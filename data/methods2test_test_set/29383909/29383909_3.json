{"test_class": {"identifier": "MetadataParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-common/src/test/java/se/kth/karamel/common/cookbookmeta/MetadataParserTest.java"}, "test_case": {"identifier": "testNdbRecognizedLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNdbRecognizedLines() throws IOException, MetadataParseException {\n    String content = IoUtils.readContentFromClasspath(\"testgithub/testorg/testrepo/master/cookbooks/hopshadoop/ndb-chef/metadata.rb\");\n    MetadataRb metadatarb = MetadataParser.parse(content);\n    assertEquals(\"ndb\", metadatarb.getName());\n    assertEquals(\"Installs/Configures NDB (MySQL Cluster)\", metadatarb.getDescription());\n    assertEquals(\"1.0\", metadatarb.getVersion());\n    List<Recipe> recipes = metadatarb.getRecipes();\n    assertEquals(11, recipes.size());\n    assertEquals(\"ndb::install\", recipes.get(0).getName());\n    assertEquals(\"Installs MySQL Cluster binaries\", recipes.get(0).getDescription());\n    assertEquals(\"ndb::purge\", recipes.get(10).getName());\n    assertEquals(\"Removes all data and all binaries related to a MySQL Cluster installation\",\n        recipes.get(10).getDescription());\n\n    List<Attribute> attributes = metadatarb.getAttributes();\n    assertEquals(45, attributes.size());\n\n    assertEquals(\"ndb/ports\", attributes.get(0).getName());\n    assertEquals(\"Dummy ports\", attributes.get(0).getDescription());\n    assertEquals(\"array\", attributes.get(0).getType());\n    assertEquals(\"required\", attributes.get(0).getRequired());\n    assertEquals(Lists.newArrayList(\"123\", \"134\", \"145\"), attributes.get(0).getDefault());\n\n    assertEquals(\"ndb/DataMemory\", attributes.get(1).getName());\n    assertEquals(\"Data memory for each MySQL Cluster Data Node\", attributes.get(1).getDescription());\n    assertEquals(\"string\", attributes.get(1).getType());\n    assertEquals(\"required\", attributes.get(1).getRequired());\n    assertEquals(\"80\", attributes.get(1).getDefault());\n\n    assertEquals(\"kagent/enabled\", attributes.get(44).getName());\n    assertEquals(\"Install kagent\", attributes.get(44).getDescription());\n    assertEquals(\"string\", attributes.get(44).getType());\n    assertEquals(\"optional\", attributes.get(44).getRequired());\n    assertEquals(\"false\", attributes.get(44).getDefault());\n  }", "signature": "void testNdbRecognizedLines()", "full_signature": "@Test public void testNdbRecognizedLines()", "class_method_signature": "MetadataParserTest.testNdbRecognizedLines()", "testcase": true, "constructor": false, "invocations": ["readContentFromClasspath", "parse", "assertEquals", "getName", "assertEquals", "getDescription", "assertEquals", "getVersion", "getRecipes", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getDescription", "get", "assertEquals", "getName", "get", "assertEquals", "getDescription", "get", "getAttributes", "assertEquals", "size", "assertEquals", "getName", "get", "assertEquals", "getDescription", "get", "assertEquals", "getType", "get", "assertEquals", "getRequired", "get", "assertEquals", "newArrayList", "getDefault", "get", "assertEquals", "getName", "get", "assertEquals", "getDescription", "get", "assertEquals", "getType", "get", "assertEquals", "getRequired", "get", "assertEquals", "getDefault", "get", "assertEquals", "getName", "get", "assertEquals", "getDescription", "get", "assertEquals", "getType", "get", "assertEquals", "getRequired", "get", "assertEquals", "getDefault", "get"]}, "focal_class": {"identifier": "MetadataParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(MetadataParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(MetadataParser.class)", "var_name": "logger"}, {"original_string": "public static Pattern NAME = Pattern.compile(\"name\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "NAME = Pattern.compile(\"name\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*\")", "var_name": "NAME"}, {"original_string": "public static Pattern DESC = Pattern.compile(\"description\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "DESC = Pattern.compile(\"description\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*\")", "var_name": "DESC"}, {"original_string": "public static Pattern VERSION = Pattern.compile(\"version\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "VERSION = Pattern.compile(\"version\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*\")", "var_name": "VERSION"}, {"original_string": "public static Pattern RECIPE = Pattern.compile(\n      \"recipe\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*(\\\\,\\\\s*[\\\\\\\"|\\\\'](.*)[\\\\\\\"|\\\\'])+\");", "modifier": "public static", "type": "Pattern", "declarator": "RECIPE = Pattern.compile(\n      \"recipe\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*(\\\\,\\\\s*[\\\\\\\"|\\\\'](.*)[\\\\\\\"|\\\\'])+\")", "var_name": "RECIPE"}, {"original_string": "public static Pattern ATTR = Pattern.compile(\"attribute\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR = Pattern.compile(\"attribute\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']\\\\s*(,)?\\\\s*\")", "var_name": "ATTR"}, {"original_string": "public static Pattern ATTR_DISP_NAME\n      = Pattern.compile(\"\\\\s*:display_name\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_DISP_NAME\n      = Pattern.compile(\"\\\\s*:display_name\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\")", "var_name": "ATTR_DISP_NAME"}, {"original_string": "public static Pattern ATTR_DESC = Pattern.compile(\"\\\\s*:description\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_DESC = Pattern.compile(\"\\\\s*:description\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\")", "var_name": "ATTR_DESC"}, {"original_string": "public static Pattern ATTR_TYPE = Pattern.compile(\"\\\\s*:type\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_TYPE = Pattern.compile(\"\\\\s*:type\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\")", "var_name": "ATTR_TYPE"}, {"original_string": "public static Pattern ATTR_DEFAULT_SIMPLE\n      = Pattern.compile(\"\\\\s*:default\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_DEFAULT_SIMPLE\n      = Pattern.compile(\"\\\\s*:default\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\")", "var_name": "ATTR_DEFAULT_SIMPLE"}, {"original_string": "public static Pattern ATTR_DEFAULT_ARRAY = Pattern.compile(\"\\\\s*:default\\\\s*=>\\\\s*\\\\[(.*)\\\\]s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_DEFAULT_ARRAY = Pattern.compile(\"\\\\s*:default\\\\s*=>\\\\s*\\\\[(.*)\\\\]s*(,)?\\\\s*\")", "var_name": "ATTR_DEFAULT_ARRAY"}, {"original_string": "public static Pattern ATTR_DEFAULT_ARRAY_ITEMS = Pattern.compile(\"[\\\\'|\\\\\\\"]([^\\\\'|\\\\\\\"]*)[\\\\'|\\\\\\\"]\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_DEFAULT_ARRAY_ITEMS = Pattern.compile(\"[\\\\'|\\\\\\\"]([^\\\\'|\\\\\\\"]*)[\\\\'|\\\\\\\"]\")", "var_name": "ATTR_DEFAULT_ARRAY_ITEMS"}, {"original_string": "public static Pattern ATTR_REQUIRED = Pattern.compile(\"\\\\s*:required\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_REQUIRED = Pattern.compile(\"\\\\s*:required\\\\s*=>\\\\s*[\\\\\\\"|\\\\'](.+)[\\\\\\\"|\\\\']s*(,)?\\\\s*\")", "var_name": "ATTR_REQUIRED"}, {"original_string": "public static String COMMA_CLOSING_LINE = \".*,\\\\s*$\";", "modifier": "public static", "type": "String", "declarator": "COMMA_CLOSING_LINE = \".*,\\\\s*$\"", "var_name": "COMMA_CLOSING_LINE"}], "methods": [{"identifier": "parse", "parameters": "(String content)", "modifiers": "public static", "return": "MetadataRb", "signature": "MetadataRb parse(String content)", "full_signature": "public static MetadataRb parse(String content)", "class_method_signature": "MetadataParser.parse(String content)", "testcase": false, "constructor": false}], "file": "karamel-common/src/main/java/se/kth/karamel/common/cookbookmeta/MetadataParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String content)", "modifiers": "public static", "return": "MetadataRb", "body": "public static MetadataRb parse(String content) throws MetadataParseException {\n    MetadataRb metadata = new MetadataRb();\n    StringReader reader = new StringReader(content);\n    Scanner scanner = new Scanner(reader);\n    List<String> comments = new ArrayList<>();\n    while (scanner.hasNextLine()) {\n      boolean found = false;\n      String line = scanner.nextLine();\n      line = line.trim();\n      if (!line.isEmpty()) {\n        if (line.startsWith(\"#\")) {\n          //It assumes that each comment block belongs to the next definition, it records comments until it finds out \n          //the next item\n          comments.add(line);\n          found = true;\n        }\n\n        //name of the cookbook\n        if (!found) {\n          Matcher m1 = NAME.matcher(line);\n          if (m1.matches()) {\n            metadata.setName(m1.group(1));\n            found = true;\n          }\n        }\n\n        //description of the cookbook\n        if (!found) {\n          Matcher m2 = DESC.matcher(line);\n          if (m2.matches()) {\n            metadata.setDescription(m2.group(1));\n            found = true;\n          }\n        }\n\n        //version of the cookbook\n        if (!found) {\n          Matcher m3 = VERSION.matcher(line);\n          if (m3.matches()) {\n            metadata.setVersion(m3.group(1));\n            found = true;\n          }\n        }\n\n        //recipe is a single line definition\n        if (!found) {\n          Matcher m4 = RECIPE.matcher(line);\n          if (m4.matches()) {\n            Recipe r = new Recipe();\n            r.setName(m4.group(1));\n            r.setDescription(m4.group(3));\n            r.parseComments(comments);\n            metadata.getRecipes().add(r);\n            found = true;\n            comments.clear();\n          }\n        }\n\n        //attribute is multiple line definition\n        if (!found) {\n          Matcher m5 = ATTR.matcher(line);\n          if (m5.matches()) {\n            Attribute attr = new Attribute();\n            attr.setName(m5.group(1));\n            while (line.matches(COMMA_CLOSING_LINE) && scanner.hasNext()) {\n              boolean found2 = false;\n              line = scanner.nextLine();\n\n              Matcher m6 = ATTR_DISP_NAME.matcher(line);\n              if (m6.matches()) {\n                attr.setDisplayName(m6.group(1));\n                found2 = true;\n              }\n\n              if (!found2) {\n                Matcher m7 = ATTR_TYPE.matcher(line);\n                if (m7.matches()) {\n                  attr.setType(m7.group(1));\n                  found2 = true;\n                }\n              }\n\n              if (!found2) {\n                Matcher m8 = ATTR_DESC.matcher(line);\n                if (m8.matches()) {\n                  attr.setDescription(m8.group(1));\n                  found2 = true;\n                }\n\n              }\n\n              if (!found2) {\n                Matcher m92 = ATTR_DEFAULT_ARRAY.matcher(line);\n                if (m92.matches()) {\n                  String sarr = m92.group(1);\n                  Matcher m921 = ATTR_DEFAULT_ARRAY_ITEMS.matcher(sarr);\n                  List<String> deflist = new ArrayList<>();\n                  while (m921.find()) {\n                    String item = m921.group(1);\n                    deflist.add(item);\n                  }\n                  attr.setDefault(deflist);\n                  found2 = true;\n                }\n              }\n              \n              if (!found2) {\n                Matcher m91 = ATTR_DEFAULT_SIMPLE.matcher(line);\n                if (m91.matches()) {\n                  attr.setDefault(m91.group(1));\n                  found2 = true;\n                }\n              }\n              \n              if (!found2) {\n                Matcher m10 = ATTR_REQUIRED.matcher(line);\n                if (m10.matches()) {\n                  attr.setRequired(m10.group(1));\n                  found2 = true;\n                }\n              }\n\n              if (!found2) {\n                logger.debug(String.format(\"Urecognized line for attribute in the metadata.rb '%s'\", line));\n              }\n            }\n            metadata.getAttributes().add(attr);\n            found = true;\n          }\n        }\n\n        if (!found) {\n          logger.debug(String.format(\"Urecognized line in the metadata.rb '%s'\", line));\n        }\n      } else {\n        comments.clear();\n      }\n    }\n    return metadata;\n  }", "signature": "MetadataRb parse(String content)", "full_signature": "public static MetadataRb parse(String content)", "class_method_signature": "MetadataParser.parse(String content)", "testcase": false, "constructor": false, "invocations": ["hasNextLine", "nextLine", "trim", "isEmpty", "startsWith", "add", "matcher", "matches", "setName", "group", "matcher", "matches", "setDescription", "group", "matcher", "matches", "setVersion", "group", "matcher", "matches", "setName", "group", "setDescription", "group", "parseComments", "add", "getRecipes", "clear", "matcher", "matches", "setName", "group", "matches", "hasNext", "nextLine", "matcher", "matches", "setDisplayName", "group", "matcher", "matches", "setType", "group", "matcher", "matches", "setDescription", "group", "matcher", "matches", "group", "matcher", "find", "group", "add", "setDefault", "matcher", "matches", "setDefault", "group", "matcher", "matches", "setRequired", "group", "debug", "format", "add", "getAttributes", "debug", "format", "clear"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}