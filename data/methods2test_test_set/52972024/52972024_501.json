{"test_class": {"identifier": "HttpRequestHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IDeserializeStrategy deserializeStrategy;", "modifier": "private", "type": "IDeserializeStrategy", "declarator": "deserializeStrategy", "var_name": "deserializeStrategy"}, {"original_string": "private IKey mockedKey;", "modifier": "private", "type": "IKey", "declarator": "mockedKey", "var_name": "mockedKey"}, {"original_string": "private IAddRequestParametersToIObject requestParametersToIObject;", "modifier": "private", "type": "IAddRequestParametersToIObject", "declarator": "requestParametersToIObject", "var_name": "requestParametersToIObject"}, {"original_string": "private IObject httpResponse;", "modifier": "private", "type": "IObject", "declarator": "httpResponse", "var_name": "httpResponse"}, {"original_string": "private IQueue taskQueueMock;", "modifier": "private", "type": "IQueue", "declarator": "taskQueueMock", "var_name": "taskQueueMock"}], "file": "CoreFeatures/HttpEndpoint/HttpRequestHandler/src/test/java/info/smart_tools/smartactors/http_endpoint/http_request_handler/HttpRequestHandlerTest.java"}, "test_case": {"identifier": "testBadRequestBodyException", "parameters": "()", "modifiers": "@Test(expected = RequestHandlerDataException.class) public", "return": "void", "body": "@Test(expected = RequestHandlerDataException.class)\n    public void testBadRequestBodyException() throws Exception {\n        ChannelHandlerContext ctx = mock(ChannelHandlerContext.class);\n        FullHttpRequest request = mock(FullHttpRequest.class);\n        IObject message = new DSObject(\"{\\\"hello\\\": \\\"world\\\"}\");\n        when(deserializeStrategy.deserialize(request)).thenThrow(DeserializationException.class);\n        when(request.method()).thenReturn(HttpMethod.POST);\n        HttpRequestHandler requestHandler = new HttpRequestHandler(ScopeProvider.getCurrentScope(), null, null, null, mock(IUpCounter.class));\n        IOC.register(Keys.getOrAdd(\"HttpPostParametersToIObjectException\"), new SingletonStrategy(\n                        new DSObject(\"{\\\"statusCode\\\": 200}\")\n                )\n        );\n        IObject environment = requestHandler.getEnvironment(ctx, request);\n        verify(ctx.writeAndFlush(any()));\n    }", "signature": "void testBadRequestBodyException()", "full_signature": "@Test(expected = RequestHandlerDataException.class) public void testBadRequestBodyException()", "class_method_signature": "HttpRequestHandlerTest.testBadRequestBodyException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenThrow", "when", "deserialize", "thenReturn", "when", "method", "getCurrentScope", "mock", "register", "getOrAdd", "getEnvironment", "verify", "writeAndFlush", "any"]}, "focal_class": {"identifier": "HttpRequestHandler", "superclass": "extends EndpointHandler<ChannelHandlerContext, FullHttpRequest>", "interfaces": "", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private static final int INTERNAL_SERVER_ERROR_STATUS_CODE = 500;", "modifier": "private static final", "type": "int", "declarator": "INTERNAL_SERVER_ERROR_STATUS_CODE = 500", "var_name": "INTERNAL_SERVER_ERROR_STATUS_CODE"}, {"original_string": "private static final int NOT_FOUND_ERROR_STATUS_CODE = 404;", "modifier": "private static final", "type": "int", "declarator": "NOT_FOUND_ERROR_STATUS_CODE = 404", "var_name": "NOT_FOUND_ERROR_STATUS_CODE"}, {"original_string": "private final IFieldName messageFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "messageFieldName", "var_name": "messageFieldName"}, {"original_string": "private final IFieldName contextFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "contextFieldName", "var_name": "contextFieldName"}, {"original_string": "private final IFieldName finalActionsFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "finalActionsFieldName", "var_name": "finalActionsFieldName"}, {"original_string": "private final IFieldName httpResponseIsSentFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "httpResponseIsSentFieldName", "var_name": "httpResponseIsSentFieldName"}, {"original_string": "private final IFieldName httpResponseStatusCodeFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "httpResponseStatusCodeFieldName", "var_name": "httpResponseStatusCodeFieldName"}, {"original_string": "private final IFieldName accessForbiddenFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "accessForbiddenFieldName", "var_name": "accessForbiddenFieldName"}, {"original_string": "private final IFieldName requestFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "requestFieldName", "var_name": "requestFieldName"}, {"original_string": "private final IFieldName channelFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "channelFieldName", "var_name": "channelFieldName"}, {"original_string": "private final IFieldName headersFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "headersFieldName", "var_name": "headersFieldName"}, {"original_string": "private final IFieldName cookiesFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "cookiesFieldName", "var_name": "cookiesFieldName"}, {"original_string": "private final IFieldName endpointName;", "modifier": "private final", "type": "IFieldName", "declarator": "endpointName", "var_name": "endpointName"}, {"original_string": "private final IFieldName responseStrategyName;", "modifier": "private final", "type": "IFieldName", "declarator": "responseStrategyName", "var_name": "responseStrategyName"}, {"original_string": "private boolean isShuttingDown = false;", "modifier": "private", "type": "boolean", "declarator": "isShuttingDown = false", "var_name": "isShuttingDown"}], "methods": [{"identifier": "HttpRequestHandler", "parameters": "(\n            final IScope scope, final IEnvironmentHandler environmentHandler, final IReceiverChain receiver,\n            final String name, final IUpCounter upCounter)", "modifiers": "public", "return": "", "signature": " HttpRequestHandler(\n            final IScope scope, final IEnvironmentHandler environmentHandler, final IReceiverChain receiver,\n            final String name, final IUpCounter upCounter)", "full_signature": "public  HttpRequestHandler(\n            final IScope scope, final IEnvironmentHandler environmentHandler, final IReceiverChain receiver,\n            final String name, final IUpCounter upCounter)", "class_method_signature": "HttpRequestHandler.HttpRequestHandler(\n            final IScope scope, final IEnvironmentHandler environmentHandler, final IReceiverChain receiver,\n            final String name, final IUpCounter upCounter)", "testcase": false, "constructor": true}, {"identifier": "getEnvironment", "parameters": "(final ChannelHandlerContext ctx, final FullHttpRequest request)", "modifiers": "@Override protected", "return": "IObject", "signature": "IObject getEnvironment(final ChannelHandlerContext ctx, final FullHttpRequest request)", "full_signature": "@Override protected IObject getEnvironment(final ChannelHandlerContext ctx, final FullHttpRequest request)", "class_method_signature": "HttpRequestHandler.getEnvironment(final ChannelHandlerContext ctx, final FullHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "sendExceptionalResponse", "parameters": "(final ChannelHandlerContext ctx, final FullHttpRequest request,\n                                           final IObject responseIObject)", "modifiers": "@Override protected", "return": "void", "signature": "void sendExceptionalResponse(final ChannelHandlerContext ctx, final FullHttpRequest request,\n                                           final IObject responseIObject)", "full_signature": "@Override protected void sendExceptionalResponse(final ChannelHandlerContext ctx, final FullHttpRequest request,\n                                           final IObject responseIObject)", "class_method_signature": "HttpRequestHandler.sendExceptionalResponse(final ChannelHandlerContext ctx, final FullHttpRequest request,\n                                           final IObject responseIObject)", "testcase": false, "constructor": false}, {"identifier": "formExceptionalResponse", "parameters": "(final IObject iObjectResponse)", "modifiers": "private", "return": "FullHttpResponse", "signature": "FullHttpResponse formExceptionalResponse(final IObject iObjectResponse)", "full_signature": "private FullHttpResponse formExceptionalResponse(final IObject iObjectResponse)", "class_method_signature": "HttpRequestHandler.formExceptionalResponse(final IObject iObjectResponse)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final ChannelHandlerContext ctx, final FullHttpRequest request)", "modifiers": "@Override public", "return": "void", "signature": "void handle(final ChannelHandlerContext ctx, final FullHttpRequest request)", "full_signature": "@Override public void handle(final ChannelHandlerContext ctx, final FullHttpRequest request)", "class_method_signature": "HttpRequestHandler.handle(final ChannelHandlerContext ctx, final FullHttpRequest request)", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint/HttpRequestHandler/src/main/java/info/smart_tools/smartactors/http_endpoint/http_request_handler/HttpRequestHandler.java"}, "focal_method": {"identifier": "getEnvironment", "parameters": "(final ChannelHandlerContext ctx, final FullHttpRequest request)", "modifiers": "@Override protected", "return": "IObject", "body": "@Override\n    protected IObject getEnvironment(final ChannelHandlerContext ctx, final FullHttpRequest request)\n            throws RequestHandlerDataException, RequestHandlerInternalException, ReadValueException {\n        try {\n            IObject message = IOC.resolve(Keys.getOrAdd(\"EmptyIObject\"));\n            if (!request.method().toString().equals(\"GET\")) {\n                IDeserializeStrategy deserializeStrategy = IOC.resolve(\n                        Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"),\n                        IOC.resolve(Keys.getOrAdd(\"http_request_key_for_deserialize\"), request),\n                        name\n                );\n\n                //resolving body of the request\n                try {\n                    message = deserializeStrategy.deserialize(request);\n                } catch (DeserializationException e) {\n                    IObject exception = IOC.resolve(Keys.getOrAdd(\"HttpPostParametersToIObjectException\"));\n                    ctx.writeAndFlush(formExceptionalResponse(exception));\n                    throw new RequestHandlerDataException(e);\n                }\n            }\n\n            //resolving uri and another request parameters of the request\n            IAddRequestParametersToIObject requestParametersToIObject = IOC.resolve(\n                    Keys.getOrAdd(\"info.smart_tools.smartactors.endpoint.interfaces.ideserialize_strategy.IDeserializeStrategy\"),\n                    \"HTTP_GET\",\n                    name\n            );\n            try {\n                requestParametersToIObject.extract(message, request);\n            } catch (Exception e) {\n                IObject exceptionalResponse = IOC.resolve(Keys.getOrAdd(\"HttpRequestParametersToIObjectException\"));\n\n                throw new RequestHandlerDataException(e);\n            }\n\n            IObject environment = IOC.resolve(Keys.getOrAdd(\"EmptyIObject\"));\n\n            IChannelHandler channelHandler = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.http_endpoint.channel_handler_netty.ChannelHandlerNetty\"), ctx);\n            //create context of the MP\n            IObject context = IOC.resolve(Keys.getOrAdd(\"EmptyIObject\"));\n            context.setValue(channelFieldName, channelHandler);\n            context.setValue(cookiesFieldName, new ArrayList<IObject>());\n            context.setValue(headersFieldName, new ArrayList<IObject>());\n            context.setValue(requestFieldName, request);\n            context.setValue(endpointName, name);\n            context.setValue(responseStrategyName, IOC.resolve(Keys.getOrAdd(\"endpoint response strategy\")));\n\n            context.setValue(httpResponseIsSentFieldName, false);\n            IAction<IObject> httpFinalAction = new IAction<IObject>() {\n                @Override\n                public void execute(final IObject environment) throws ActionExecuteException, InvalidArgumentException {\n                    try {\n                        IObject context = (IObject) environment.getValue(contextFieldName);\n                        if (null != context) {\n                            if ((boolean) context.getValue(httpResponseIsSentFieldName)) {\n                                return;\n                            }\n                        }\n                        IFieldName channelFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"channel\");\n                        IChannelHandler channelHandler = (IChannelHandler)\n                                context.getValue(channelFieldName);\n\n                        IResponse response = IOC.resolve(Keys.getOrAdd(IResponse.class.getCanonicalName()));\n                        response.setContent(\"\".getBytes());\n\n                        IResponseSender sender = IOC.resolve(Keys.getOrAdd(IResponseSender.class.getCanonicalName()),\n                                IOC.resolve(Keys.getOrAdd(\"http_request_key_for_response_sender\"), environment),\n                                name);\n                        // ToDo: need refactoring. Need create hashMap - errorName to statusCode\n                        Boolean accessForbidden = (Boolean) context.getValue(accessForbiddenFieldName);\n                        if (accessForbidden != null && accessForbidden) {\n                            context.setValue(httpResponseStatusCodeFieldName, NOT_FOUND_ERROR_STATUS_CODE);\n                        } else {\n                            context.setValue(httpResponseStatusCodeFieldName, INTERNAL_SERVER_ERROR_STATUS_CODE);\n                        }\n                        sender.send(response, environment, channelHandler);\n                    } catch (ResolutionException | ReadValueException | ResponseSendingException | ChangeValueException e) {\n                        throw new ActionExecuteException(\"Could not execute final http action.\");\n                    }\n                }\n            };\n\n            ArrayList<IAction<IObject>> finalActions = new ArrayList<>();\n            finalActions.add(httpFinalAction);\n            context.setValue(finalActionsFieldName, finalActions);\n\n            //create environment\n            environment.setValue(messageFieldName, message);\n            environment.setValue(contextFieldName, context);\n            return environment;\n        } catch (InvalidArgumentException | SerializeException | ChangeValueException | ResolutionException e) {\n            try {\n                IObject exception = IOC.resolve(Keys.getOrAdd(\"HttpInternalException\"), e);\n                ctx.writeAndFlush(formExceptionalResponse(exception));\n                throw new RequestHandlerInternalException(e);\n            } catch (SerializeException | ResolutionException | InvalidArgumentException e1) {\n                throw new RequestHandlerInternalException(\"Failed to send response\", e);\n            }\n        } finally {\n            request.release();\n        }\n    }", "signature": "IObject getEnvironment(final ChannelHandlerContext ctx, final FullHttpRequest request)", "full_signature": "@Override protected IObject getEnvironment(final ChannelHandlerContext ctx, final FullHttpRequest request)", "class_method_signature": "HttpRequestHandler.getEnvironment(final ChannelHandlerContext ctx, final FullHttpRequest request)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "equals", "toString", "method", "resolve", "getOrAdd", "resolve", "getOrAdd", "deserialize", "resolve", "getOrAdd", "writeAndFlush", "formExceptionalResponse", "resolve", "getOrAdd", "extract", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "setValue", "setValue", "setValue", "setValue", "setValue", "setValue", "resolve", "getOrAdd", "setValue", "getValue", "getValue", "resolve", "getOrAdd", "getValue", "resolve", "getOrAdd", "getCanonicalName", "setContent", "getBytes", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getValue", "setValue", "setValue", "send", "add", "setValue", "setValue", "setValue", "resolve", "getOrAdd", "writeAndFlush", "formExceptionalResponse", "release"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}