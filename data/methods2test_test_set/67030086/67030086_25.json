{"test_class": {"identifier": "StateTypeConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "pact/provider/core/src/test/java/org/arquillian/algeron/pact/provider/core/StateTypeConverterTest.java"}, "test_case": {"identifier": "should_convert_string_to_double", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_convert_string_to_double() throws Exception {\n        // given\n        Double expecteDouble = Double.valueOf(\"123\");\n        StateTypeConverter typeConverter = new StateTypeConverter();\n\n        // when\n        Double convertedDouble = typeConverter.convert(\"123\", Double.class);\n\n        // then\n        assertThat(convertedDouble).isEqualTo(expecteDouble);\n    }", "signature": "void should_convert_string_to_double()", "full_signature": "@Test public void should_convert_string_to_double()", "class_method_signature": "StateTypeConverterTest.should_convert_string_to_double()", "testcase": true, "constructor": false, "invocations": ["valueOf", "convert", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "StateTypeConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(String value, Class<T> to)", "modifiers": "public static", "return": "T", "signature": "T convert(String value, Class<T> to)", "full_signature": "public static T convert(String value, Class<T> to)", "class_method_signature": "StateTypeConverter.convert(String value, Class<T> to)", "testcase": false, "constructor": false}, {"identifier": "extractEnumName", "parameters": "(final String value)", "modifiers": "private static", "return": "String", "signature": "String extractEnumName(final String value)", "full_signature": "private static String extractEnumName(final String value)", "class_method_signature": "StateTypeConverter.extractEnumName(final String value)", "testcase": false, "constructor": false}, {"identifier": "trimElements", "parameters": "(String[] convertedArray)", "modifiers": "private static", "return": "void", "signature": "void trimElements(String[] convertedArray)", "full_signature": "private static void trimElements(String[] convertedArray)", "class_method_signature": "StateTypeConverter.trimElements(String[] convertedArray)", "testcase": false, "constructor": false}, {"identifier": "hasOnlyBlanks", "parameters": "(String[] convertedArray)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasOnlyBlanks(String[] convertedArray)", "full_signature": "private static boolean hasOnlyBlanks(String[] convertedArray)", "class_method_signature": "StateTypeConverter.hasOnlyBlanks(String[] convertedArray)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(String element)", "modifiers": "private static", "return": "boolean", "signature": "boolean isBlank(String element)", "full_signature": "private static boolean isBlank(String element)", "class_method_signature": "StateTypeConverter.isBlank(String element)", "testcase": false, "constructor": false}], "file": "pact/provider/core/src/main/java/org/arquillian/algeron/pact/provider/core/StateTypeConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, Class<T> to)", "modifiers": "public static", "return": "T", "body": "public static <T> T convert(String value, Class<T> to) {\n        if (value == null && !(String.class.equals(to) || String[].class.equals(to))) {\n            return null;\n        }\n\n        if (String.class.equals(to)) {\n            return to.cast(value);\n        } else if (Integer.class.equals(to)) {\n            return to.cast(Integer.valueOf(value));\n        } else if (int.class.equals(to)) {\n            return (T) Integer.valueOf(value);\n        } else if (Double.class.equals(to)) {\n            return to.cast(Double.valueOf(value));\n        } else if (double.class.equals(to)) {\n            return (T) Double.valueOf(value);\n        } else if (Long.class.equals(to)) {\n            return to.cast(Long.valueOf(value));\n        } else if (long.class.equals(value)) {\n            return (T) Long.valueOf(value);\n        } else if (Boolean.class.equals(to)) {\n            return to.cast(Boolean.valueOf(value));\n        } else if (boolean.class.equals(to)) {\n            return (T) Boolean.valueOf(value);\n        } else if (URL.class.equals(to)) {\n            try {\n                return to.cast(new URI(value).toURL());\n            } catch (MalformedURLException e) {\n                throw new IllegalArgumentException(\"Unable to convert value \" + value + \" to URL\", e);\n            } catch (URISyntaxException e) {\n                throw new IllegalArgumentException(\"Unable to convert value \" + value + \" to URL\", e);\n            }\n        } else if (URI.class.equals(to)) {\n            try {\n                return to.cast(new URI(value));\n            } catch (URISyntaxException e) {\n                throw new IllegalArgumentException(\"Unable to convert value \" + value + \" to URL\", e);\n            }\n        } else {\n            String trimmedValue = extractEnumName(value);\n            if (to.isEnum()) {\n                return (T) Enum.valueOf((Class<Enum>) to, trimmedValue.toUpperCase());\n            } else if (String[].class.equals(to)) {\n                final String[] convertedArray = value.split(\",\");\n                if (convertedArray.length == 0) {\n                    return to.cast(new String[0]);\n                }\n\n                trimElements(convertedArray);\n\n                if (convertedArray.length == 1 && hasOnlyBlanks(convertedArray)) {\n                    return to.cast(new String[0]);\n                }\n\n                return to.cast(convertedArray);\n            } else if (Collection.class.isAssignableFrom(to)) {\n                final String[] convertedArray = value.split(\",\");\n                if (convertedArray.length == 0) {\n                    return to.cast(new ArrayList<>());\n                }\n\n                trimElements(convertedArray);\n\n                if (convertedArray.length == 1 && hasOnlyBlanks(convertedArray)) {\n                    return to.cast(new ArrayList<>());\n                }\n\n                return to.cast(Arrays.asList(convertedArray));\n            } else if (Charset.class.equals(to)) {\n                return to.cast(Charset.forName(trimmedValue.toUpperCase()));\n            } else if (Class.class.equals(to)) {\n                try {\n                    Object clazz = Class.forName(value);\n                    return to.cast(clazz);\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(\"Unable to find class [\" + value + \"].\", e);\n                }\n            } else // Try to create instance via reflection\n            {\n                try {\n                    Object instance = Class.forName(value).newInstance();\n                    return to.cast(instance);\n                } catch (Exception e) {\n                    throw new IllegalArgumentException(\n                        \"Unable to convert value [\" + value + \"] to a class [\" + to.getName() + \"].\", e);\n                }\n            }\n        }\n    }", "signature": "T convert(String value, Class<T> to)", "full_signature": "public static T convert(String value, Class<T> to)", "class_method_signature": "StateTypeConverter.convert(String value, Class<T> to)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "cast", "equals", "cast", "valueOf", "equals", "valueOf", "equals", "cast", "valueOf", "equals", "valueOf", "equals", "cast", "valueOf", "equals", "valueOf", "equals", "cast", "valueOf", "equals", "valueOf", "equals", "cast", "toURL", "equals", "cast", "extractEnumName", "isEnum", "valueOf", "toUpperCase", "equals", "split", "cast", "trimElements", "hasOnlyBlanks", "cast", "cast", "isAssignableFrom", "split", "cast", "trimElements", "hasOnlyBlanks", "cast", "cast", "asList", "equals", "cast", "forName", "toUpperCase", "equals", "forName", "cast", "newInstance", "forName", "cast", "getName"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}