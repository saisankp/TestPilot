{"test_class": {"identifier": "ParamGenericValidationWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String FAKE_CMD_NAME = \"fakecmdname\";", "modifier": "protected static final", "type": "String", "declarator": "FAKE_CMD_NAME = \"fakecmdname\"", "var_name": "FAKE_CMD_NAME"}, {"original_string": "protected static final String FAKE_CMD_ROLE_NAME = \"fakecmdrolename\";", "modifier": "protected static final", "type": "String", "declarator": "FAKE_CMD_ROLE_NAME = \"fakecmdrolename\"", "var_name": "FAKE_CMD_ROLE_NAME"}, {"original_string": "protected String loggerOutput;", "modifier": "protected", "type": "String", "declarator": "loggerOutput", "var_name": "loggerOutput"}], "file": "server/src/test/java/com/cloud/api/dispatch/ParamGenericValidationWorkerTest.java"}, "test_case": {"identifier": "testHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandle() throws ResourceAllocationException {\n        // Prepare\n        final BaseCmd cmd = new FakeCmd();\n        final Map<String, String> params = new HashMap<String, String>();\n        params.put(ApiConstants.COMMAND, \"\");\n        params.put(ApiConstants.ACCOUNT_ID, \"\");\n        params.put(ApiConstants.CTX_START_EVENT_ID, \"\");\n        params.put(ApiConstants.COMMAND, \"\");\n        params.put(ApiConstants.CMD_EVENT_TYPE, \"\");\n        params.put(ApiConstants.USERNAME, \"\");\n        params.put(ApiConstants.USER_ID, \"\");\n        params.put(ApiConstants.PASSWORD, \"\");\n        params.put(ApiConstants.DOMAIN, \"\");\n        params.put(ApiConstants.DOMAIN_ID, \"\");\n        params.put(ApiConstants.DOMAIN__ID, \"\");\n        params.put(ApiConstants.SESSIONKEY, \"\");\n        params.put(ApiConstants.RESPONSE, \"\");\n        params.put(ApiConstants.PAGE, \"\");\n        params.put(ApiConstants.USER_API_KEY, \"\");\n        params.put(ApiConstants.API_KEY, \"\");\n        params.put(ApiConstants.PAGE_SIZE, \"\");\n        params.put(ApiConstants.HTTPMETHOD, \"\");\n        params.put(ApiConstants.SIGNATURE, \"\");\n        params.put(ApiConstants.CTX_ACCOUNT_ID, \"\");\n        params.put(ApiConstants.CTX_START_EVENT_ID, \"\");\n        // Make sure it's case insensitive\n        params.put(ApiConstants.CTX_START_EVENT_ID, \"\");\n        params.put(ApiConstants.CTX_START_EVENT_ID.toLowerCase(), \"\");\n        params.put(ApiConstants.CTX_USER_ID.toUpperCase(), \"\");\n        params.put(ApiConstants.CTX_USER_ID, \"\");\n        params.put(ApiConstants.UUID, \"\");\n        params.put(ApiConstants.ID, \"\");\n        params.put(\"_\", \"\");\n        params.put(\"addedParam\", \"\");\n\n        Account account = new AccountVO(\"testaccount\", 1L, \"networkdomain\", (short) 0, \"uuid\");\n        UserVO user = new UserVO(1, \"testuser\", \"password\", \"firstname\", \"lastName\", \"email\", \"timezone\", UUID.randomUUID().toString(), User.Source.UNKNOWN);\n        CallContext.register(user, account);\n        // Execute\n        try {\n            driveTest(cmd, params);\n        } finally {\n            CallContext.unregister();\n        }\n\n        // Assert\n        assertEquals(\"There should be no errors since there are no unknown parameters for this command class\", null, loggerOutput);\n    }", "signature": "void testHandle()", "full_signature": "@Test public void testHandle()", "class_method_signature": "ParamGenericValidationWorkerTest.testHandle()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "toLowerCase", "put", "toUpperCase", "put", "put", "put", "put", "put", "toString", "randomUUID", "register", "driveTest", "unregister", "assertEquals"]}, "focal_class": {"identifier": "ParamGenericValidationWorker", "superclass": "", "interfaces": "implements DispatchWorker", "fields": [{"original_string": "static Logger s_logger = Logger.getLogger(ParamGenericValidationWorker.class.getName());", "modifier": "static", "type": "Logger", "declarator": "s_logger = Logger.getLogger(ParamGenericValidationWorker.class.getName())", "var_name": "s_logger"}, {"original_string": "protected static final List<String> defaultParamNames = new ArrayList<String>();", "modifier": "protected static final", "type": "List<String>", "declarator": "defaultParamNames = new ArrayList<String>()", "var_name": "defaultParamNames"}, {"original_string": "protected static final String ERROR_MSG_PREFIX = \"Unknown parameters :\";", "modifier": "protected static final", "type": "String", "declarator": "ERROR_MSG_PREFIX = \"Unknown parameters :\"", "var_name": "ERROR_MSG_PREFIX"}], "methods": [{"identifier": "handle", "parameters": "(final DispatchTask task)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "signature": "void handle(final DispatchTask task)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void handle(final DispatchTask task)", "class_method_signature": "ParamGenericValidationWorker.handle(final DispatchTask task)", "testcase": false, "constructor": false}, {"identifier": "getParamNamesForCommand", "parameters": "(final BaseCmd cmd)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getParamNamesForCommand(final BaseCmd cmd)", "full_signature": "protected List<String> getParamNamesForCommand(final BaseCmd cmd)", "class_method_signature": "ParamGenericValidationWorker.getParamNamesForCommand(final BaseCmd cmd)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/api/dispatch/ParamGenericValidationWorker.java"}, "focal_method": {"identifier": "handle", "parameters": "(final DispatchTask task)", "modifiers": "@SuppressWarnings(\"rawtypes\") @Override public", "return": "void", "body": "@SuppressWarnings(\"rawtypes\")\n    @Override\n    public void handle(final DispatchTask task) {\n        final BaseCmd cmd = task.getCmd();\n        final Map params = task.getParams();\n\n        final List<String> expectedParamNames = getParamNamesForCommand(cmd);\n\n        final StringBuilder errorMsg = new StringBuilder(ERROR_MSG_PREFIX);\n        boolean foundUnknownParam = false;\n        for (final Object actualParamName : params.keySet()) {\n            // If none of the expected params matches, we have an unknown param\n            boolean matchedCurrentParam = false;\n            for (final String expectedName : expectedParamNames) {\n                if (expectedName.equalsIgnoreCase((String) actualParamName)) {\n                    matchedCurrentParam = true;\n                    break;\n                }\n            }\n            if (!matchedCurrentParam && !((String)actualParamName).equalsIgnoreCase(\"expires\") && !((String)actualParamName).equalsIgnoreCase(\"signatureversion\")) {\n                errorMsg.append(\" \").append(actualParamName);\n                foundUnknownParam= true;\n            }\n        }\n\n        if (foundUnknownParam) {\n            s_logger.warn(String.format(\"Received unknown parameters for command %s. %s\", cmd.getActualCommandName(), errorMsg));\n        }\n    }", "signature": "void handle(final DispatchTask task)", "full_signature": "@SuppressWarnings(\"rawtypes\") @Override public void handle(final DispatchTask task)", "class_method_signature": "ParamGenericValidationWorker.handle(final DispatchTask task)", "testcase": false, "constructor": false, "invocations": ["getCmd", "getParams", "getParamNamesForCommand", "keySet", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "append", "append", "warn", "format", "getActualCommandName"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}