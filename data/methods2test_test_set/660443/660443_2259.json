{"test_class": {"identifier": "PDBPolymerTest", "superclass": "extends AbstractPDBPolymerTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/PDBPolymerTest.java"}, "test_case": {"identifier": "testPDBPolymer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPDBPolymer() {\n        IPDBPolymer pdbPolymer = new PDBPolymer();\n        Assert.assertNotNull(pdbPolymer);\n        Assert.assertEquals(pdbPolymer.getMonomerCount(), 0);\n\n        IStrand oStrand1 = pdbPolymer.getBuilder().newInstance(IStrand.class);\n        oStrand1.setStrandName(\"A\");\n        IStrand oStrand2 = pdbPolymer.getBuilder().newInstance(IStrand.class);\n        oStrand2.setStrandName(\"B\");\n        IMonomer oMono1 = pdbPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono1.setMonomerName(new String(\"TRP279\"));\n        IMonomer oMono2 = pdbPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono2.setMonomerName(new String(\"HOH\"));\n        IMonomer oMono3 = pdbPolymer.getBuilder().newInstance(IMonomer.class);\n        oMono3.setMonomerName(new String(\"GLYA16\"));\n        IPDBAtom oPDBAtom1 = pdbPolymer.getBuilder().newInstance(IPDBAtom.class, \"C\");\n        IPDBAtom oPDBAtom2 = pdbPolymer.getBuilder().newInstance(IPDBAtom.class, \"C\");\n        IPDBAtom oPDBAtom3 = pdbPolymer.getBuilder().newInstance(IPDBAtom.class, \"C\");\n        IPDBAtom oPDBAtom4 = pdbPolymer.getBuilder().newInstance(IPDBAtom.class, \"C\");\n        IPDBAtom oPDBAtom5 = pdbPolymer.getBuilder().newInstance(IPDBAtom.class, \"C\");\n\n        pdbPolymer.addAtom(oPDBAtom1);\n        pdbPolymer.addAtom(oPDBAtom2, oStrand1);\n        pdbPolymer.addAtom(oPDBAtom3, oMono1, oStrand1);\n        pdbPolymer.addAtom(oPDBAtom4, oMono2, oStrand2);\n        pdbPolymer.addAtom(oPDBAtom5, oMono3, oStrand2);\n        Assert.assertNotNull(pdbPolymer.getAtom(0));\n        Assert.assertNotNull(pdbPolymer.getAtom(1));\n        Assert.assertNotNull(pdbPolymer.getAtom(2));\n        Assert.assertNotNull(pdbPolymer.getAtom(3));\n        Assert.assertNotNull(pdbPolymer.getAtom(4));\n        Assert.assertEquals(oPDBAtom1, pdbPolymer.getAtom(0));\n        Assert.assertEquals(oPDBAtom2, pdbPolymer.getAtom(1));\n        Assert.assertEquals(oPDBAtom3, pdbPolymer.getAtom(2));\n        Assert.assertEquals(oPDBAtom4, pdbPolymer.getAtom(3));\n        Assert.assertEquals(oPDBAtom5, pdbPolymer.getAtom(4));\n\n        Assert.assertNull(pdbPolymer.getMonomer(\"0815\", \"A\"));\n        Assert.assertNull(pdbPolymer.getMonomer(\"0815\", \"B\"));\n        Assert.assertNull(pdbPolymer.getMonomer(\"0815\", \"\"));\n        Assert.assertNull(pdbPolymer.getStrand(\"\"));\n        Assert.assertNotNull(pdbPolymer.getMonomer(\"TRP279\", \"A\"));\n        Assert.assertEquals(oMono1, pdbPolymer.getMonomer(\"TRP279\", \"A\"));\n        Assert.assertEquals(pdbPolymer.getMonomer(\"TRP279\", \"A\").getAtomCount(), 1);\n        Assert.assertNotNull(pdbPolymer.getMonomer(\"HOH\", \"B\"));\n        Assert.assertEquals(oMono2, pdbPolymer.getMonomer(\"HOH\", \"B\"));\n        Assert.assertEquals(pdbPolymer.getMonomer(\"HOH\", \"B\").getAtomCount(), 1);\n        Assert.assertEquals(pdbPolymer.getStrand(\"B\").getAtomCount(), 2);\n        Assert.assertEquals(pdbPolymer.getStrand(\"B\").getMonomerCount(), 2);\n        Assert.assertNull(pdbPolymer.getStrand(\"C\"));\n        Assert.assertNotNull(pdbPolymer.getStrand(\"B\"));\n    }", "signature": "void testPDBPolymer()", "full_signature": "@Test public void testPDBPolymer()", "class_method_signature": "PDBPolymerTest.testPDBPolymer()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertEquals", "getMonomerCount", "newInstance", "getBuilder", "setStrandName", "newInstance", "getBuilder", "setStrandName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertNull", "getMonomer", "assertNull", "getMonomer", "assertNull", "getMonomer", "assertNull", "getStrand", "assertNotNull", "getMonomer", "assertEquals", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertNotNull", "getMonomer", "assertEquals", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertEquals", "getAtomCount", "getStrand", "assertEquals", "getMonomerCount", "getStrand", "assertNull", "getStrand", "assertNotNull", "getStrand"]}, "focal_class": {"identifier": "PDBPolymer", "superclass": "extends BioPolymer", "interfaces": "implements Cloneable, IPDBPolymer", "fields": [{"original_string": "private static final long serialVersionUID = 4173552834313952358L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4173552834313952358L", "var_name": "serialVersionUID"}, {"original_string": "List<String>              sequentialListOfMonomers;", "modifier": "", "type": "List<String>", "declarator": "sequentialListOfMonomers", "var_name": "sequentialListOfMonomers"}, {"original_string": "List<IPDBStructure>       secondaryStructures;", "modifier": "", "type": "List<IPDBStructure>", "declarator": "secondaryStructures", "var_name": "secondaryStructures"}], "methods": [{"identifier": "PDBPolymer", "parameters": "()", "modifiers": "public", "return": "", "signature": " PDBPolymer()", "full_signature": "public  PDBPolymer()", "class_method_signature": "PDBPolymer.PDBPolymer()", "testcase": false, "constructor": true}, {"identifier": "addStructure", "parameters": "(IPDBStructure structure)", "modifiers": "@Override public", "return": "void", "signature": "void addStructure(IPDBStructure structure)", "full_signature": "@Override public void addStructure(IPDBStructure structure)", "class_method_signature": "PDBPolymer.addStructure(IPDBStructure structure)", "testcase": false, "constructor": false}, {"identifier": "getStructures", "parameters": "()", "modifiers": "@Override public", "return": "Collection<IPDBStructure>", "signature": "Collection<IPDBStructure> getStructures()", "full_signature": "@Override public Collection<IPDBStructure> getStructures()", "class_method_signature": "PDBPolymer.getStructures()", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IPDBAtom oAtom)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IPDBAtom oAtom)", "full_signature": "@Override public void addAtom(IPDBAtom oAtom)", "class_method_signature": "PDBPolymer.addAtom(IPDBAtom oAtom)", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IPDBAtom oAtom, IMonomer oMonomer)", "modifiers": "public", "return": "void", "signature": "void addAtom(IPDBAtom oAtom, IMonomer oMonomer)", "full_signature": "public void addAtom(IPDBAtom oAtom, IMonomer oMonomer)", "class_method_signature": "PDBPolymer.addAtom(IPDBAtom oAtom, IMonomer oMonomer)", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "full_signature": "@Override public void addAtom(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "class_method_signature": "PDBPolymer.addAtom(IPDBAtom oAtom, IMonomer oMonomer, IStrand oStrand)", "testcase": false, "constructor": false}, {"identifier": "getMonomerNamesInSequentialOrder", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getMonomerNamesInSequentialOrder()", "full_signature": "public Collection<String> getMonomerNamesInSequentialOrder()", "class_method_signature": "PDBPolymer.getMonomerNamesInSequentialOrder()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "IPDBPolymer", "signature": "IPDBPolymer clone()", "full_signature": "@Override public IPDBPolymer clone()", "class_method_signature": "PDBPolymer.clone()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PDBPolymer.toString()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/PDBPolymer.java"}, "focal_method": {"identifier": "PDBPolymer", "parameters": "()", "modifiers": "public", "return": "", "body": "public PDBPolymer() {\n        super();\n        sequentialListOfMonomers = new ArrayList<String>();\n        secondaryStructures = new ArrayList<IPDBStructure>();\n    }", "signature": " PDBPolymer()", "full_signature": "public  PDBPolymer()", "class_method_signature": "PDBPolymer.PDBPolymer()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}