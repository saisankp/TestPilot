{"test_class": {"identifier": "HttpHeaderParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static long ONE_MINUTE_MILLIS = 1000L * 60;", "modifier": "private static", "type": "long", "declarator": "ONE_MINUTE_MILLIS = 1000L * 60", "var_name": "ONE_MINUTE_MILLIS"}, {"original_string": "private static long ONE_HOUR_MILLIS = 1000L * 60 * 60;", "modifier": "private static", "type": "long", "declarator": "ONE_HOUR_MILLIS = 1000L * 60 * 60", "var_name": "ONE_HOUR_MILLIS"}, {"original_string": "private static long ONE_DAY_MILLIS = ONE_HOUR_MILLIS * 24;", "modifier": "private static", "type": "long", "declarator": "ONE_DAY_MILLIS = ONE_HOUR_MILLIS * 24", "var_name": "ONE_DAY_MILLIS"}, {"original_string": "private static long ONE_WEEK_MILLIS = ONE_DAY_MILLIS * 7;", "modifier": "private static", "type": "long", "declarator": "ONE_WEEK_MILLIS = ONE_DAY_MILLIS * 7", "var_name": "ONE_WEEK_MILLIS"}, {"original_string": "private Map<String, String> headers;", "modifier": "private", "type": "Map<String, String>", "declarator": "headers", "var_name": "headers"}], "file": "jus-java/src/test/java/io/apptik/comm/jus/toolbox/HttpHeaderParserTest.java"}, "test_case": {"identifier": "parseCharset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void parseCharset() {\n        // Like the ones we usually see\n        headers.put(\"Content-Type\", \"text/plain; charset=utf-8\");\n        assertEquals(\"utf-8\", HttpHeaderParser.parseCharset(headers));\n        // Charset specified, ignore default charset\n        headers.put(\"Content-Type\", \"text/plain; charset=utf-8\");\n        assertEquals(\"utf-8\", HttpHeaderParser.parseCharset(headers, \"ISO-8859-1\"));\n        // Extra whitespace\n        headers.put(\"Content-Type\", \"text/plain;    charset=utf-8 \");\n        assertEquals(\"utf-8\", HttpHeaderParser.parseCharset(headers));\n        // Extra parameters\n        headers.put(\"Content-Type\", \"text/plain; charset=utf-8; frozzle=bar\");\n        assertEquals(\"utf-8\", HttpHeaderParser.parseCharset(headers));\n        // No Content-Type header\n        headers.clear();\n        assertEquals(\"UTF-8\", HttpHeaderParser.parseCharset(headers));\n        // No Content-Type header, use default charset\n        headers.clear();\n        assertEquals(\"utf-8\", HttpHeaderParser.parseCharset(headers, \"utf-8\"));\n        // Empty value\n        headers.put(\"Content-Type\", \"text/plain; charset=\");\n        assertEquals(\"UTF-8\", HttpHeaderParser.parseCharset(headers));\n        // None specified\n        headers.put(\"Content-Type\", \"text/plain\");\n        assertEquals(\"UTF-8\", HttpHeaderParser.parseCharset(headers));\n        // None charset specified, use default charset\n        headers.put(\"Content-Type\", \"application/json\");\n        assertEquals(\"utf-8\", HttpHeaderParser.parseCharset(headers, \"utf-8\"));\n        // None specified, extra semicolon\n        headers.put(\"Content-Type\", \"text/plain;\");\n        assertEquals(\"UTF-8\", HttpHeaderParser.parseCharset(headers));\n    }", "signature": "void parseCharset()", "full_signature": "@Test public void parseCharset()", "class_method_signature": "HttpHeaderParserTest.parseCharset()", "testcase": true, "constructor": false, "invocations": ["put", "assertEquals", "parseCharset", "put", "assertEquals", "parseCharset", "put", "assertEquals", "parseCharset", "put", "assertEquals", "parseCharset", "clear", "assertEquals", "parseCharset", "clear", "assertEquals", "parseCharset", "put", "assertEquals", "parseCharset", "put", "assertEquals", "parseCharset", "put", "assertEquals", "parseCharset", "put", "assertEquals", "parseCharset"]}, "focal_class": {"identifier": "HttpHeaderParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseCacheHeaders", "parameters": "(NetworkResponse response)", "modifiers": "public static", "return": "Cache.Entry", "signature": "Cache.Entry parseCacheHeaders(NetworkResponse response)", "full_signature": "public static Cache.Entry parseCacheHeaders(NetworkResponse response)", "class_method_signature": "HttpHeaderParser.parseCacheHeaders(NetworkResponse response)", "testcase": false, "constructor": false}, {"identifier": "parseDateAsEpoch", "parameters": "(String dateStr)", "modifiers": "public static", "return": "long", "signature": "long parseDateAsEpoch(String dateStr)", "full_signature": "public static long parseDateAsEpoch(String dateStr)", "class_method_signature": "HttpHeaderParser.parseDateAsEpoch(String dateStr)", "testcase": false, "constructor": false}, {"identifier": "parseCharset", "parameters": "(Map<String, String> headers, String defaultCharset)", "modifiers": "public static", "return": "String", "signature": "String parseCharset(Map<String, String> headers, String defaultCharset)", "full_signature": "public static String parseCharset(Map<String, String> headers, String defaultCharset)", "class_method_signature": "HttpHeaderParser.parseCharset(Map<String, String> headers, String defaultCharset)", "testcase": false, "constructor": false}, {"identifier": "parseCharset", "parameters": "(Map<String, String> headers)", "modifiers": "public static", "return": "String", "signature": "String parseCharset(Map<String, String> headers)", "full_signature": "public static String parseCharset(Map<String, String> headers)", "class_method_signature": "HttpHeaderParser.parseCharset(Map<String, String> headers)", "testcase": false, "constructor": false}], "file": "jus-java/src/main/java/io/apptik/comm/jus/toolbox/HttpHeaderParser.java"}, "focal_method": {"identifier": "parseCharset", "parameters": "(Map<String, String> headers, String defaultCharset)", "modifiers": "public static", "return": "String", "body": "public static String parseCharset(Map<String, String> headers, String defaultCharset) {\n        String contentType = headers.get(HTTP.CONTENT_TYPE);\n        if (contentType != null) {\n            String[] params = contentType.split(\";\");\n            for (int i = 1; i < params.length; i++) {\n                String[] pair = params[i].trim().split(\"=\");\n                if (pair.length == 2) {\n                    if (pair[0].equals(\"charset\")) {\n                        return pair[1];\n                    }\n                }\n            }\n        }\n\n        return defaultCharset;\n    }", "signature": "String parseCharset(Map<String, String> headers, String defaultCharset)", "full_signature": "public static String parseCharset(Map<String, String> headers, String defaultCharset)", "class_method_signature": "HttpHeaderParser.parseCharset(Map<String, String> headers, String defaultCharset)", "testcase": false, "constructor": false, "invocations": ["get", "split", "split", "trim", "equals"]}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}