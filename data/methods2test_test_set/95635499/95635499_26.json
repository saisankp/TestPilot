{"test_class": {"identifier": "MultiLabelClassificationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_DELTA = 1E-8;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_DELTA = 1E-8", "var_name": "DOUBLE_DELTA"}, {"original_string": "private static final double[] GT_VECTOR = { 0.231232, 0.84354239, 0.1234782394, 0.3423489 };", "modifier": "private static final", "type": "double[]", "declarator": "GT_VECTOR = { 0.231232, 0.84354239, 0.1234782394, 0.3423489 }", "var_name": "GT_VECTOR"}, {"original_string": "private static final double THRESHOLD_SINGLE = 0.3;", "modifier": "private static final", "type": "double", "declarator": "THRESHOLD_SINGLE = 0.3", "var_name": "THRESHOLD_SINGLE"}, {"original_string": "private static final double[] THRESHOLD_VECTOR = { 0.2, 0.9, 0.1, 0.4 };", "modifier": "private static final", "type": "double[]", "declarator": "THRESHOLD_VECTOR = { 0.2, 0.9, 0.1, 0.4 }", "var_name": "THRESHOLD_VECTOR"}, {"original_string": "private static final int[] EXPECTED_THRESHOLDED_SINGLE = { 0, 1, 0, 1 };", "modifier": "private static final", "type": "int[]", "declarator": "EXPECTED_THRESHOLDED_SINGLE = { 0, 1, 0, 1 }", "var_name": "EXPECTED_THRESHOLDED_SINGLE"}, {"original_string": "private static final int[] EXPECTED_THRESHOLDED_VECTOR = { 1, 0, 1, 0 };", "modifier": "private static final", "type": "int[]", "declarator": "EXPECTED_THRESHOLDED_VECTOR = { 1, 0, 1, 0 }", "var_name": "EXPECTED_THRESHOLDED_VECTOR"}, {"original_string": "private static final double RELEVANCE_THRESHOLD = 0.5;", "modifier": "private static final", "type": "double", "declarator": "RELEVANCE_THRESHOLD = 0.5", "var_name": "RELEVANCE_THRESHOLD"}, {"original_string": "private static final int[] RELEVANT_LABELS = { 1 };", "modifier": "private static final", "type": "int[]", "declarator": "RELEVANT_LABELS = { 1 }", "var_name": "RELEVANT_LABELS"}, {"original_string": "private static final int[] IRRELEVANT_LABELS = { 0, 2, 3 };", "modifier": "private static final", "type": "int[]", "declarator": "IRRELEVANT_LABELS = { 0, 2, 3 }", "var_name": "IRRELEVANT_LABELS"}, {"original_string": "private static MultiLabelClassification classification;", "modifier": "private static", "type": "MultiLabelClassification", "declarator": "classification", "var_name": "classification"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/multilabel/MultiLabelClassificationTest.java"}, "test_case": {"identifier": "testGetLabelWiseThresholdedLabelRelevanceVector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetLabelWiseThresholdedLabelRelevanceVector() {\n\t\tint[] pred = classification.getPrediction(THRESHOLD_VECTOR);\n\t\tassertEquals(\"Prediction vector and ground truth value vector are not of the same length\", EXPECTED_THRESHOLDED_VECTOR.length, pred.length);\n\n\t\tfor (int i = 0; i < EXPECTED_THRESHOLDED_VECTOR.length; i++) {\n\t\t\tassertEquals(\"Prediction vector is not as expected for index \" + i + \".\", EXPECTED_THRESHOLDED_VECTOR[i], pred[i], DOUBLE_DELTA);\n\t\t}\n\t}", "signature": "void testGetLabelWiseThresholdedLabelRelevanceVector()", "full_signature": "@Test public void testGetLabelWiseThresholdedLabelRelevanceVector()", "class_method_signature": "MultiLabelClassificationTest.testGetLabelWiseThresholdedLabelRelevanceVector()", "testcase": true, "constructor": false, "invocations": ["getPrediction", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "MultiLabelClassification", "superclass": "extends Prediction", "interfaces": "implements IMultiLabelClassification", "fields": [{"original_string": "private static final double DEFAULT_THRESHOLD = 0.5;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_THRESHOLD = 0.5", "var_name": "DEFAULT_THRESHOLD"}, {"original_string": "private double[] threshold;", "modifier": "private", "type": "double[]", "declarator": "threshold", "var_name": "threshold"}], "methods": [{"identifier": "MultiLabelClassification", "parameters": "(final double[] predicted)", "modifiers": "public", "return": "", "signature": " MultiLabelClassification(final double[] predicted)", "full_signature": "public  MultiLabelClassification(final double[] predicted)", "class_method_signature": "MultiLabelClassification.MultiLabelClassification(final double[] predicted)", "testcase": false, "constructor": true}, {"identifier": "MultiLabelClassification", "parameters": "(final double[] predicted, final double threshold)", "modifiers": "public", "return": "", "signature": " MultiLabelClassification(final double[] predicted, final double threshold)", "full_signature": "public  MultiLabelClassification(final double[] predicted, final double threshold)", "class_method_signature": "MultiLabelClassification.MultiLabelClassification(final double[] predicted, final double threshold)", "testcase": false, "constructor": true}, {"identifier": "MultiLabelClassification", "parameters": "(final double[] predicted, final double[] threshold)", "modifiers": "public", "return": "", "signature": " MultiLabelClassification(final double[] predicted, final double[] threshold)", "full_signature": "public  MultiLabelClassification(final double[] predicted, final double[] threshold)", "class_method_signature": "MultiLabelClassification.MultiLabelClassification(final double[] predicted, final double[] threshold)", "testcase": false, "constructor": true}, {"identifier": "getPrediction", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getPrediction()", "full_signature": "@Override public double[] getPrediction()", "class_method_signature": "MultiLabelClassification.getPrediction()", "testcase": false, "constructor": false}, {"identifier": "getThresholdedPrediction", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getThresholdedPrediction()", "full_signature": "public int[] getThresholdedPrediction()", "class_method_signature": "MultiLabelClassification.getThresholdedPrediction()", "testcase": false, "constructor": false}, {"identifier": "getPrediction", "parameters": "(final double threshold)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getPrediction(final double threshold)", "full_signature": "@Override public int[] getPrediction(final double threshold)", "class_method_signature": "MultiLabelClassification.getPrediction(final double threshold)", "testcase": false, "constructor": false}, {"identifier": "getPrediction", "parameters": "(final double[] threshold)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getPrediction(final double[] threshold)", "full_signature": "@Override public int[] getPrediction(final double[] threshold)", "class_method_signature": "MultiLabelClassification.getPrediction(final double[] threshold)", "testcase": false, "constructor": false}, {"identifier": "getRelevantLabels", "parameters": "(final double threshold)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getRelevantLabels(final double threshold)", "full_signature": "@Override public int[] getRelevantLabels(final double threshold)", "class_method_signature": "MultiLabelClassification.getRelevantLabels(final double threshold)", "testcase": false, "constructor": false}, {"identifier": "getIrrelevantLabels", "parameters": "(final double threshold)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getIrrelevantLabels(final double threshold)", "full_signature": "@Override public int[] getIrrelevantLabels(final double threshold)", "class_method_signature": "MultiLabelClassification.getIrrelevantLabels(final double threshold)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/multilabel/MultiLabelClassification.java"}, "focal_method": {"identifier": "getPrediction", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n\tpublic double[] getPrediction() {\n\t\treturn (double[]) super.getPrediction();\n\t}", "signature": "double[] getPrediction()", "full_signature": "@Override public double[] getPrediction()", "class_method_signature": "MultiLabelClassification.getPrediction()", "testcase": false, "constructor": false, "invocations": ["getPrediction"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}