{"test_class": {"identifier": "ClassUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/ClassUtilTest.java"}, "test_case": {"identifier": "isPrimitiveOrWrapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isPrimitiveOrWrapper() {\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(int.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(long.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(short.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(double.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(float.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(char.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(byte.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(boolean.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(void.class));\n\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Integer.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Long.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Short.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Double.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Float.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Character.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Byte.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Boolean.class));\n        assertTrue(ClassUtil.isPrimitiveOrWrapper(Void.class));\n\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(int[].class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(long[].class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(Double[].class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(Boolean[].class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(String.class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(Object.class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(Enum.class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(Override.class));\n        assertFalse(ClassUtil.isPrimitiveOrWrapper(Compiler.class));\n    }", "signature": "void isPrimitiveOrWrapper()", "full_signature": "@Test public void isPrimitiveOrWrapper()", "class_method_signature": "ClassUtilTest.isPrimitiveOrWrapper()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertTrue", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper", "assertFalse", "isPrimitiveOrWrapper"]}, "focal_class": {"identifier": "ClassUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char RESOURCE_SEPARATOR_CHAR = '/';", "modifier": "private static final", "type": "char", "declarator": "RESOURCE_SEPARATOR_CHAR = '/'", "var_name": "RESOURCE_SEPARATOR_CHAR"}, {"original_string": "private static final char PACKAGE_SEPARATOR_CHAR = '.';", "modifier": "private static final", "type": "char", "declarator": "PACKAGE_SEPARATOR_CHAR = '.'", "var_name": "PACKAGE_SEPARATOR_CHAR"}, {"original_string": "public static final char INNER_CLASS_SEPARATOR_CHAR = '$';", "modifier": "public static final", "type": "char", "declarator": "INNER_CLASS_SEPARATOR_CHAR = '$'", "var_name": "INNER_CLASS_SEPARATOR_CHAR"}, {"original_string": "public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);", "modifier": "public static final", "type": "String", "declarator": "INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR)", "var_name": "INNER_CLASS_SEPARATOR"}, {"original_string": "private static final Map<Class<?>, TypeInfo> TYPE_MAP = Collections\n            .synchronizedMap(new WeakHashMap<Class<?>, TypeInfo>());", "modifier": "private static final", "type": "Map<Class<?>, TypeInfo>", "declarator": "TYPE_MAP = Collections\n            .synchronizedMap(new WeakHashMap<Class<?>, TypeInfo>())", "var_name": "TYPE_MAP"}, {"original_string": "private static final Map<String, PrimitiveInfo<?>> PRIMITIVES = CollectionUtil.createHashMap();", "modifier": "private static final", "type": "Map<String, PrimitiveInfo<?>>", "declarator": "PRIMITIVES = CollectionUtil.createHashMap()", "var_name": "PRIMITIVES"}, {"original_string": "private final static Map<Class<?>, Set<Class<?>>> assignmentTable = CollectionUtil.createHashMap();", "modifier": "private final static", "type": "Map<Class<?>, Set<Class<?>>>", "declarator": "assignmentTable = CollectionUtil.createHashMap()", "var_name": "assignmentTable"}], "methods": [{"identifier": "getClassNameAsResource", "parameters": "(String className)", "modifiers": "public static", "return": "String", "signature": "String getClassNameAsResource(String className)", "full_signature": "public static String getClassNameAsResource(String className)", "class_method_signature": "ClassUtil.getClassNameAsResource(String className)", "testcase": false, "constructor": false}, {"identifier": "addPrimitive", "parameters": "(Class<T> type, String typeCode, Class<T> wrapperType, String unwrapMethod,\n            T defaultValue)", "modifiers": "private static", "return": "void", "signature": "void addPrimitive(Class<T> type, String typeCode, Class<T> wrapperType, String unwrapMethod,\n            T defaultValue)", "full_signature": "private static void addPrimitive(Class<T> type, String typeCode, Class<T> wrapperType, String unwrapMethod,\n            T defaultValue)", "class_method_signature": "ClassUtil.addPrimitive(Class<T> type, String typeCode, Class<T> wrapperType, String unwrapMethod,\n            T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveType", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getPrimitiveType(String name)", "full_signature": "public static Class<?> getPrimitiveType(String name)", "class_method_signature": "ClassUtil.getPrimitiveType(String name)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getPrimitiveType(Class<?> type)", "full_signature": "public static Class<?> getPrimitiveType(Class<?> type)", "class_method_signature": "ClassUtil.getPrimitiveType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getWrapperTypeIfPrimitive", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Class<T>", "signature": "Class<T> getWrapperTypeIfPrimitive(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Class<T> getWrapperTypeIfPrimitive(Class<T> type)", "class_method_signature": "ClassUtil.getWrapperTypeIfPrimitive(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveDefaultValue", "parameters": "(Class<T> type)", "modifiers": "public static", "return": "T", "signature": "T getPrimitiveDefaultValue(Class<T> type)", "full_signature": "public static T getPrimitiveDefaultValue(Class<T> type)", "class_method_signature": "ClassUtil.getPrimitiveDefaultValue(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveOrWrapper", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitiveOrWrapper(Class<?> clazz)", "full_signature": "public static boolean isPrimitiveOrWrapper(Class<?> clazz)", "class_method_signature": "ClassUtil.isPrimitiveOrWrapper(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getArrayClass", "parameters": "(Class<?> componentType)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getArrayClass(Class<?> componentType)", "full_signature": "public static Class<?> getArrayClass(Class<?> componentType)", "class_method_signature": "ClassUtil.getArrayClass(Class<?> componentType)", "testcase": false, "constructor": false}, {"identifier": "getArrayClass", "parameters": "(Class<?> componentClass, int dimension)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getArrayClass(Class<?> componentClass, int dimension)", "full_signature": "public static Class<?> getArrayClass(Class<?> componentClass, int dimension)", "class_method_signature": "ClassUtil.getArrayClass(Class<?> componentClass, int dimension)", "testcase": false, "constructor": false}, {"identifier": "getArrayComponentType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getArrayComponentType(Class<?> type)", "full_signature": "public static Class<?> getArrayComponentType(Class<?> type)", "class_method_signature": "ClassUtil.getArrayComponentType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isInstance", "parameters": "(Class<?> clazz, Object object)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInstance(Class<?> clazz, Object object)", "full_signature": "public static boolean isInstance(Class<?> clazz, Object object)", "class_method_signature": "ClassUtil.isInstance(Class<?> clazz, Object object)", "testcase": false, "constructor": false}, {"identifier": "canInstatnce", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean canInstatnce(Class<T> clazz)", "full_signature": "public static boolean canInstatnce(Class<T> clazz)", "class_method_signature": "ClassUtil.canInstatnce(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getTypeInfo", "parameters": "(Class<?> type)", "modifiers": "protected static", "return": "TypeInfo", "signature": "TypeInfo getTypeInfo(Class<?> type)", "full_signature": "protected static TypeInfo getTypeInfo(Class<?> type)", "class_method_signature": "ClassUtil.getTypeInfo(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getAllSuperclasses", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "List<Class<?>>", "signature": "List<Class<?>> getAllSuperclasses(Class<?> clazz)", "full_signature": "public static List<Class<?>> getAllSuperclasses(Class<?> clazz)", "class_method_signature": "ClassUtil.getAllSuperclasses(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllSuperclassesAsArray", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getAllSuperclassesAsArray(Class<?> clazz)", "full_signature": "public static Class<?>[] getAllSuperclassesAsArray(Class<?> clazz)", "class_method_signature": "ClassUtil.getAllSuperclassesAsArray(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfaces", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "List<Class<?>>", "signature": "List<Class<?>> getAllInterfaces(Class<?> clazz)", "full_signature": "public static List<Class<?>> getAllInterfaces(Class<?> clazz)", "class_method_signature": "ClassUtil.getAllInterfaces(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfacesAsArray", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getAllInterfacesAsArray(Class<?> clazz)", "full_signature": "public static Class<?>[] getAllInterfacesAsArray(Class<?> clazz)", "class_method_signature": "ClassUtil.getAllInterfacesAsArray(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfacesAsSet", "parameters": "(Class<?> clazz, ClassLoader classLoader)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAllInterfacesAsSet(Class<?> clazz, ClassLoader classLoader)", "full_signature": "public static Set<Class<?>> getAllInterfacesAsSet(Class<?> clazz, ClassLoader classLoader)", "class_method_signature": "ClassUtil.getAllInterfacesAsSet(Class<?> clazz, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfaces", "parameters": "(Class<?> clazz, List<Class<?>> interfacesFound)", "modifiers": "private static", "return": "void", "signature": "void getAllInterfaces(Class<?> clazz, List<Class<?>> interfacesFound)", "full_signature": "private static void getAllInterfaces(Class<?> clazz, List<Class<?>> interfacesFound)", "class_method_signature": "ClassUtil.getAllInterfaces(Class<?> clazz, List<Class<?>> interfacesFound)", "testcase": false, "constructor": false}, {"identifier": "isVisible", "parameters": "(Class<?> clazz, ClassLoader classLoader)", "modifiers": "public static", "return": "boolean", "signature": "boolean isVisible(Class<?> clazz, ClassLoader classLoader)", "full_signature": "public static boolean isVisible(Class<?> clazz, ClassLoader classLoader)", "class_method_signature": "ClassUtil.isVisible(Class<?> clazz, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "isCacheSafe", "parameters": "(Class<?> clazz, ClassLoader classLoader)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCacheSafe(Class<?> clazz, ClassLoader classLoader)", "full_signature": "public static boolean isCacheSafe(Class<?> clazz, ClassLoader classLoader)", "class_method_signature": "ClassUtil.isCacheSafe(Class<?> clazz, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "isInterfaceImpl", "parameters": "(Class<?> thisClass, Class<?> targetInterface)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInterfaceImpl(Class<?> thisClass, Class<?> targetInterface)", "full_signature": "public static boolean isInterfaceImpl(Class<?> thisClass, Class<?> targetInterface)", "class_method_signature": "ClassUtil.isInterfaceImpl(Class<?> thisClass, Class<?> targetInterface)", "testcase": false, "constructor": false}, {"identifier": "isSubClass", "parameters": "(Class<?> thisClass, Class<?> target)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubClass(Class<?> thisClass, Class<?> target)", "full_signature": "public static boolean isSubClass(Class<?> thisClass, Class<?> target)", "class_method_signature": "ClassUtil.isSubClass(Class<?> thisClass, Class<?> target)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Class<?>[] classes, Class<?>[] fromClasses)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignable(Class<?>[] classes, Class<?>[] fromClasses)", "full_signature": "public static boolean isAssignable(Class<?>[] classes, Class<?>[] fromClasses)", "class_method_signature": "ClassUtil.isAssignable(Class<?>[] classes, Class<?>[] fromClasses)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Class<?> clazz, Class<?> fromClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignable(Class<?> clazz, Class<?> fromClass)", "full_signature": "public static boolean isAssignable(Class<?> clazz, Class<?> fromClass)", "class_method_signature": "ClassUtil.isAssignable(Class<?> clazz, Class<?> fromClass)", "testcase": false, "constructor": false}, {"identifier": "assignableSet", "parameters": "(Class<?>...types)", "modifiers": "private static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> assignableSet(Class<?>...types)", "full_signature": "private static Set<Class<?>> assignableSet(Class<?>...types)", "class_method_signature": "ClassUtil.assignableSet(Class<?>...types)", "testcase": false, "constructor": false}, {"identifier": "locateClass", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String locateClass(Class<?> clazz)", "full_signature": "public static String locateClass(Class<?> clazz)", "class_method_signature": "ClassUtil.locateClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "locateClass", "parameters": "(String className)", "modifiers": "public static", "return": "String", "signature": "String locateClass(String className)", "full_signature": "public static String locateClass(String className)", "class_method_signature": "ClassUtil.locateClass(String className)", "testcase": false, "constructor": false}, {"identifier": "locateClass", "parameters": "(String className, ClassLoader loader)", "modifiers": "public static", "return": "String", "signature": "String locateClass(String className, ClassLoader loader)", "full_signature": "public static String locateClass(String className, ClassLoader loader)", "class_method_signature": "ClassUtil.locateClass(String className, ClassLoader loader)", "testcase": false, "constructor": false}, {"identifier": "getFriendlyClassNameForObject", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getFriendlyClassNameForObject(Object object)", "full_signature": "public static String getFriendlyClassNameForObject(Object object)", "class_method_signature": "ClassUtil.getFriendlyClassNameForObject(Object object)", "testcase": false, "constructor": false}, {"identifier": "getFriendlyClassName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getFriendlyClassName(Class<?> clazz)", "full_signature": "public static String getFriendlyClassName(Class<?> clazz)", "class_method_signature": "ClassUtil.getFriendlyClassName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getFriendlyClassName", "parameters": "(String javaClassName)", "modifiers": "public static", "return": "String", "signature": "String getFriendlyClassName(String javaClassName)", "full_signature": "public static String getFriendlyClassName(String javaClassName)", "class_method_signature": "ClassUtil.getFriendlyClassName(String javaClassName)", "testcase": false, "constructor": false}, {"identifier": "toFriendlyClassName", "parameters": "(String javaClassName, boolean processInnerClass, String defaultIfInvalid)", "modifiers": "static", "return": "String", "signature": "String toFriendlyClassName(String javaClassName, boolean processInnerClass, String defaultIfInvalid)", "full_signature": "static String toFriendlyClassName(String javaClassName, boolean processInnerClass, String defaultIfInvalid)", "class_method_signature": "ClassUtil.toFriendlyClassName(String javaClassName, boolean processInnerClass, String defaultIfInvalid)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassNameForObject", "parameters": "(Object object)", "modifiers": "public static", "return": "String", "signature": "String getSimpleClassNameForObject(Object object)", "full_signature": "public static String getSimpleClassNameForObject(Object object)", "class_method_signature": "ClassUtil.getSimpleClassNameForObject(Object object)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassNameForObject", "parameters": "(Object object, boolean processInnerClass)", "modifiers": "public static", "return": "String", "signature": "String getSimpleClassNameForObject(Object object, boolean processInnerClass)", "full_signature": "public static String getSimpleClassNameForObject(Object object, boolean processInnerClass)", "class_method_signature": "ClassUtil.getSimpleClassNameForObject(Object object, boolean processInnerClass)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getSimpleClassName(Class<?> clazz)", "full_signature": "public static String getSimpleClassName(Class<?> clazz)", "class_method_signature": "ClassUtil.getSimpleClassName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassName", "parameters": "(Class<?> clazz, boolean proccessInnerClass)", "modifiers": "public static", "return": "String", "signature": "String getSimpleClassName(Class<?> clazz, boolean proccessInnerClass)", "full_signature": "public static String getSimpleClassName(Class<?> clazz, boolean proccessInnerClass)", "class_method_signature": "ClassUtil.getSimpleClassName(Class<?> clazz, boolean proccessInnerClass)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassName", "parameters": "(String javaClassName)", "modifiers": "public static", "return": "String", "signature": "String getSimpleClassName(String javaClassName)", "full_signature": "public static String getSimpleClassName(String javaClassName)", "class_method_signature": "ClassUtil.getSimpleClassName(String javaClassName)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClassName", "parameters": "(String javaClassName, boolean proccesInnerClass)", "modifiers": "public static", "return": "String", "signature": "String getSimpleClassName(String javaClassName, boolean proccesInnerClass)", "full_signature": "public static String getSimpleClassName(String javaClassName, boolean proccesInnerClass)", "class_method_signature": "ClassUtil.getSimpleClassName(String javaClassName, boolean proccesInnerClass)", "testcase": false, "constructor": false}, {"identifier": "getSimpleMethodSignature", "parameters": "(Method method)", "modifiers": "public static", "return": "String", "signature": "String getSimpleMethodSignature(Method method)", "full_signature": "public static String getSimpleMethodSignature(Method method)", "class_method_signature": "ClassUtil.getSimpleMethodSignature(Method method)", "testcase": false, "constructor": false}, {"identifier": "getSimpleMethodSignature", "parameters": "(Method method, boolean withClassName)", "modifiers": "public static", "return": "String", "signature": "String getSimpleMethodSignature(Method method, boolean withClassName)", "full_signature": "public static String getSimpleMethodSignature(Method method, boolean withClassName)", "class_method_signature": "ClassUtil.getSimpleMethodSignature(Method method, boolean withClassName)", "testcase": false, "constructor": false}, {"identifier": "getSimpleMethodSignature", "parameters": "(Method method, boolean withModifiers, boolean withReturnType,\n            boolean withClassName, boolean withExceptionType)", "modifiers": "public static", "return": "String", "signature": "String getSimpleMethodSignature(Method method, boolean withModifiers, boolean withReturnType,\n            boolean withClassName, boolean withExceptionType)", "full_signature": "public static String getSimpleMethodSignature(Method method, boolean withModifiers, boolean withReturnType,\n            boolean withClassName, boolean withExceptionType)", "class_method_signature": "ClassUtil.getSimpleMethodSignature(Method method, boolean withModifiers, boolean withReturnType,\n            boolean withClassName, boolean withExceptionType)", "testcase": false, "constructor": false}, {"identifier": "getShortClassName", "parameters": "(String className)", "modifiers": "public static", "return": "String", "signature": "String getShortClassName(String className)", "full_signature": "public static String getShortClassName(String className)", "class_method_signature": "ClassUtil.getShortClassName(String className)", "testcase": false, "constructor": false}, {"identifier": "getShortClassName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String getShortClassName(Class<?> clazz)", "full_signature": "public static String getShortClassName(Class<?> clazz)", "class_method_signature": "ClassUtil.getShortClassName(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/ClassUtil.java"}, "focal_method": {"identifier": "isPrimitiveOrWrapper", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isPrimitiveOrWrapper(Class<?> clazz) {\n        if (clazz == null) {\n            return false;\n        }\n\n        return PRIMITIVES.get(clazz.getName()) != null;\n\n    }", "signature": "boolean isPrimitiveOrWrapper(Class<?> clazz)", "full_signature": "public static boolean isPrimitiveOrWrapper(Class<?> clazz)", "class_method_signature": "ClassUtil.isPrimitiveOrWrapper(Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["get", "getName"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}