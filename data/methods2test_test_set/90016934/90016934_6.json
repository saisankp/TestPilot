{"test_class": {"identifier": "TestInterruptibleHttpClient", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/fr/gael/dhus/util/http/TestInterruptibleHttpClient.java"}, "test_case": {"identifier": "testGetInterrupted", "parameters": "()", "modifiers": "@Test (timeOut = 2000L) public", "return": "void", "body": "@Test (timeOut = 2000L)\n   public void testGetInterrupted () throws IOException, InterruptedException\n   {\n      final InterruptibleHttpClient ihc = new InterruptibleHttpClient ();\n      ServerSocket ss = new ServerSocket (0);\n      final String url = \"http://localhost:\" + String.valueOf (ss.getLocalPort ()) + '/';\n\n      Thread t = new Thread (new Runnable ()\n      {\n         @Override\n         public void run ()\n         {\n            try\n            {\n               ihc.interruptibleGet (url, new DummyChannel ());\n            }\n            catch (IOException | InterruptedException ex)\n            {\n            }\n         }\n      });\n      t.start ();\n      Thread.sleep (1000L);\n      t.interrupt ();\n      ss.close ();\n      t.join ();\n   }", "signature": "void testGetInterrupted()", "full_signature": "@Test (timeOut = 2000L) public void testGetInterrupted()", "class_method_signature": "TestInterruptibleHttpClient.testGetInterrupted()", "testcase": true, "constructor": false, "invocations": ["valueOf", "getLocalPort", "interruptibleGet", "start", "sleep", "interrupt", "close", "join"]}, "focal_class": {"identifier": "InterruptibleHttpClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HttpAsyncClientProducer clientProducer;", "modifier": "private final", "type": "HttpAsyncClientProducer", "declarator": "clientProducer", "var_name": "clientProducer"}], "methods": [{"identifier": "InterruptibleHttpClient", "parameters": "()", "modifiers": "public", "return": "", "signature": " InterruptibleHttpClient()", "full_signature": "public  InterruptibleHttpClient()", "class_method_signature": "InterruptibleHttpClient.InterruptibleHttpClient()", "testcase": false, "constructor": true}, {"identifier": "InterruptibleHttpClient", "parameters": "(HttpAsyncClientProducer clientProducer)", "modifiers": "public", "return": "", "signature": " InterruptibleHttpClient(HttpAsyncClientProducer clientProducer)", "full_signature": "public  InterruptibleHttpClient(HttpAsyncClientProducer clientProducer)", "class_method_signature": "InterruptibleHttpClient.InterruptibleHttpClient(HttpAsyncClientProducer clientProducer)", "testcase": false, "constructor": true}, {"identifier": "interruptibleRequest", "parameters": "(HttpUriRequest request, final IWC output, final ResponseValidator val)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse interruptibleRequest(HttpUriRequest request, final IWC output, final ResponseValidator val)", "full_signature": "public HttpResponse interruptibleRequest(HttpUriRequest request, final IWC output, final ResponseValidator val)", "class_method_signature": "InterruptibleHttpClient.interruptibleRequest(HttpUriRequest request, final IWC output, final ResponseValidator val)", "testcase": false, "constructor": false}, {"identifier": "interruptibleGet", "parameters": "(String url, final IWC output)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse interruptibleGet(String url, final IWC output)", "full_signature": "public HttpResponse interruptibleGet(String url, final IWC output)", "class_method_signature": "InterruptibleHttpClient.interruptibleGet(String url, final IWC output)", "testcase": false, "constructor": false}, {"identifier": "interruptibleGetRange", "parameters": "(String url, final IWC output, String etag, long range_start, long range_end)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse interruptibleGetRange(String url, final IWC output, String etag, long range_start, long range_end)", "full_signature": "public HttpResponse interruptibleGetRange(String url, final IWC output, String etag, long range_start, long range_end)", "class_method_signature": "InterruptibleHttpClient.interruptibleGetRange(String url, final IWC output, String etag, long range_start, long range_end)", "testcase": false, "constructor": false}, {"identifier": "interruptibleDelete", "parameters": "(String url, final IWC output)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse interruptibleDelete(String url, final IWC output)", "full_signature": "public HttpResponse interruptibleDelete(String url, final IWC output)", "class_method_signature": "InterruptibleHttpClient.interruptibleDelete(String url, final IWC output)", "testcase": false, "constructor": false}, {"identifier": "interruptibleHead", "parameters": "(String url)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse interruptibleHead(String url)", "full_signature": "public HttpResponse interruptibleHead(String url)", "class_method_signature": "InterruptibleHttpClient.interruptibleHead(String url)", "testcase": false, "constructor": false}], "file": "core/src/main/java/fr/gael/dhus/util/http/InterruptibleHttpClient.java"}, "focal_method": {"identifier": "interruptibleGet", "parameters": "(String url, final IWC output)", "modifiers": "public", "return": "HttpResponse", "body": "public <IWC extends InterruptibleChannel & WritableByteChannel>\n         HttpResponse interruptibleGet(String url, final IWC output)\n         throws IOException, InterruptedException\n   {\n      return interruptibleRequest(new HttpGet(url), output, null);\n   }", "signature": "HttpResponse interruptibleGet(String url, final IWC output)", "full_signature": "public HttpResponse interruptibleGet(String url, final IWC output)", "class_method_signature": "InterruptibleHttpClient.interruptibleGet(String url, final IWC output)", "testcase": false, "constructor": false, "invocations": ["interruptibleRequest"]}, "repository": {"repo_id": 90016934, "url": "https://github.com/SentinelDataHub/dhus-core", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 2371, "license": "licensed"}}