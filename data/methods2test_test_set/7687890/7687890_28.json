{"test_class": {"identifier": "TestMockPersistentStorage", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockPersistentStorage ps;", "modifier": "private", "type": "MockPersistentStorage", "declarator": "ps", "var_name": "ps"}], "file": "Code/core-abce/abce-components/src/test/java-ibm-only/eu/abc4trust/db/TestMockPersistentStorage.java"}, "test_case": {"identifier": "testGetWithoutItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetWithoutItem() {\n    SimpleParamTypes table = SimpleParamTypes.TEST_TABLE;\n    String prefix = UUID.randomUUID().toString();\n    URI key = URI.create(\"test-\"+prefix);\n    \n    assertNull(ps.getItem(table, key));\n  }", "signature": "void testGetWithoutItem()", "full_signature": "@Test public void testGetWithoutItem()", "class_method_signature": "TestMockPersistentStorage.testGetWithoutItem()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "create", "assertNull", "getItem"]}, "focal_class": {"identifier": "MockPersistentStorage", "superclass": "", "interfaces": "implements PersistentStorage", "fields": [{"original_string": "private final Map<SimpleParamTypes, Map<URI, byte[]>> storage;", "modifier": "private final", "type": "Map<SimpleParamTypes, Map<URI, byte[]>>", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final Map<TokenTypes, Map<ByteArray, URI>> nymsInToken;", "modifier": "private final", "type": "Map<TokenTypes, Map<ByteArray, URI>>", "declarator": "nymsInToken", "var_name": "nymsInToken"}, {"original_string": "private final Map<String, Map<URI, MiniCred>> creds;", "modifier": "private final", "type": "Map<String, Map<URI, MiniCred>>", "declarator": "creds", "var_name": "creds"}, {"original_string": "private final Map<String, Map<URI, MiniNym>> nyms;", "modifier": "private final", "type": "Map<String, Map<URI, MiniNym>>", "declarator": "nyms", "var_name": "nyms"}, {"original_string": "private final Map<String, Map<URI, byte[]>> secrets;", "modifier": "private final", "type": "Map<String, Map<URI, byte[]>>", "declarator": "secrets", "var_name": "secrets"}, {"original_string": "private final Map<URI, Map<URI, MiniRevInfo>> revInfos;", "modifier": "private final", "type": "Map<URI, Map<URI, MiniRevInfo>>", "declarator": "revInfos", "var_name": "revInfos"}], "methods": [{"identifier": "MockPersistentStorage", "parameters": "()", "modifiers": "public", "return": "", "signature": " MockPersistentStorage()", "full_signature": "public  MockPersistentStorage()", "class_method_signature": "MockPersistentStorage.MockPersistentStorage()", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "MockPersistentStorage.shutdown()", "testcase": false, "constructor": false}, {"identifier": "insertItem", "parameters": "(SimpleParamTypes table, URI key, byte[] value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertItem(SimpleParamTypes table, URI key, byte[] value)", "full_signature": "@Override public boolean insertItem(SimpleParamTypes table, URI key, byte[] value)", "class_method_signature": "MockPersistentStorage.insertItem(SimpleParamTypes table, URI key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "replaceItem", "parameters": "(SimpleParamTypes table, URI key, byte[] value)", "modifiers": "@Override public", "return": "int", "signature": "int replaceItem(SimpleParamTypes table, URI key, byte[] value)", "full_signature": "@Override public int replaceItem(SimpleParamTypes table, URI key, byte[] value)", "class_method_signature": "MockPersistentStorage.replaceItem(SimpleParamTypes table, URI key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "(SimpleParamTypes table, URI key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getItem(SimpleParamTypes table, URI key)", "full_signature": "@Override public byte[] getItem(SimpleParamTypes table, URI key)", "class_method_signature": "MockPersistentStorage.getItem(SimpleParamTypes table, URI key)", "testcase": false, "constructor": false}, {"identifier": "getItemAndDelete", "parameters": "(SimpleParamTypes table, URI key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getItemAndDelete(SimpleParamTypes table, URI key)", "full_signature": "@Override public byte[] getItemAndDelete(SimpleParamTypes table, URI key)", "class_method_signature": "MockPersistentStorage.getItemAndDelete(SimpleParamTypes table, URI key)", "testcase": false, "constructor": false}, {"identifier": "deleteItem", "parameters": "(SimpleParamTypes table, URI key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteItem(SimpleParamTypes table, URI key)", "full_signature": "@Override public boolean deleteItem(SimpleParamTypes table, URI key)", "class_method_signature": "MockPersistentStorage.deleteItem(SimpleParamTypes table, URI key)", "testcase": false, "constructor": false}, {"identifier": "updateItem", "parameters": "(SimpleParamTypes table, URI key, byte[] value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateItem(SimpleParamTypes table, URI key, byte[] value)", "full_signature": "@Override public boolean updateItem(SimpleParamTypes table, URI key, byte[] value)", "class_method_signature": "MockPersistentStorage.updateItem(SimpleParamTypes table, URI key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "listItems", "parameters": "(SimpleParamTypes table)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listItems(SimpleParamTypes table)", "full_signature": "@Override public List<URI> listItems(SimpleParamTypes table)", "class_method_signature": "MockPersistentStorage.listItems(SimpleParamTypes table)", "testcase": false, "constructor": false}, {"identifier": "correspondingTable", "parameters": "(TokenTypes table)", "modifiers": "private", "return": "SimpleParamTypes", "signature": "SimpleParamTypes correspondingTable(TokenTypes table)", "full_signature": "private SimpleParamTypes correspondingTable(TokenTypes table)", "class_method_signature": "MockPersistentStorage.correspondingTable(TokenTypes table)", "testcase": false, "constructor": false}, {"identifier": "associatePseudonym", "parameters": "(TokenTypes table, URI tokenId, byte[] pseudonymValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean associatePseudonym(TokenTypes table, URI tokenId, byte[] pseudonymValue)", "full_signature": "@Override public boolean associatePseudonym(TokenTypes table, URI tokenId, byte[] pseudonymValue)", "class_method_signature": "MockPersistentStorage.associatePseudonym(TokenTypes table, URI tokenId, byte[] pseudonymValue)", "testcase": false, "constructor": false}, {"identifier": "isPseudonymInToken", "parameters": "(TokenTypes table, byte[] pseudonymValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPseudonymInToken(TokenTypes table, byte[] pseudonymValue)", "full_signature": "@Override public boolean isPseudonymInToken(TokenTypes table, byte[] pseudonymValue)", "class_method_signature": "MockPersistentStorage.isPseudonymInToken(TokenTypes table, byte[] pseudonymValue)", "testcase": false, "constructor": false}, {"identifier": "insertCredential", "parameters": "(URI key, String username, URI issuer, URI credSpec, byte[] value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertCredential(URI key, String username, URI issuer, URI credSpec, byte[] value)", "full_signature": "@Override public boolean insertCredential(URI key, String username, URI issuer, URI credSpec, byte[] value)", "class_method_signature": "MockPersistentStorage.insertCredential(URI key, String username, URI issuer, URI credSpec, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "getCredential", "parameters": "(URI key, String username)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getCredential(URI key, String username)", "full_signature": "@Override public byte[] getCredential(URI key, String username)", "class_method_signature": "MockPersistentStorage.getCredential(URI key, String username)", "testcase": false, "constructor": false}, {"identifier": "deleteCredential", "parameters": "(URI key, String username)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteCredential(URI key, String username)", "full_signature": "@Override public boolean deleteCredential(URI key, String username)", "class_method_signature": "MockPersistentStorage.deleteCredential(URI key, String username)", "testcase": false, "constructor": false}, {"identifier": "updateCredential", "parameters": "(URI key, String username, byte[] value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateCredential(URI key, String username, byte[] value)", "full_signature": "@Override public boolean updateCredential(URI key, String username, byte[] value)", "class_method_signature": "MockPersistentStorage.updateCredential(URI key, String username, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "listCredentials", "parameters": "(String username)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listCredentials(String username)", "full_signature": "@Override public List<URI> listCredentials(String username)", "class_method_signature": "MockPersistentStorage.listCredentials(String username)", "testcase": false, "constructor": false}, {"identifier": "listCredentials", "parameters": "(String username, List<URI> issuerList, List<URI> credSpecList)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listCredentials(String username, List<URI> issuerList, List<URI> credSpecList)", "full_signature": "@Override public List<URI> listCredentials(String username, List<URI> issuerList, List<URI> credSpecList)", "class_method_signature": "MockPersistentStorage.listCredentials(String username, List<URI> issuerList, List<URI> credSpecList)", "testcase": false, "constructor": false}, {"identifier": "insertSecret", "parameters": "(URI key, String username, byte[] value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertSecret(URI key, String username, byte[] value)", "full_signature": "@Override public boolean insertSecret(URI key, String username, byte[] value)", "class_method_signature": "MockPersistentStorage.insertSecret(URI key, String username, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "getSecret", "parameters": "(URI key, String username)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getSecret(URI key, String username)", "full_signature": "@Override public byte[] getSecret(URI key, String username)", "class_method_signature": "MockPersistentStorage.getSecret(URI key, String username)", "testcase": false, "constructor": false}, {"identifier": "deleteSecret", "parameters": "(URI key, String username)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteSecret(URI key, String username)", "full_signature": "@Override public boolean deleteSecret(URI key, String username)", "class_method_signature": "MockPersistentStorage.deleteSecret(URI key, String username)", "testcase": false, "constructor": false}, {"identifier": "updateSecret", "parameters": "(URI key, String username, byte[] value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateSecret(URI key, String username, byte[] value)", "full_signature": "@Override public boolean updateSecret(URI key, String username, byte[] value)", "class_method_signature": "MockPersistentStorage.updateSecret(URI key, String username, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "listSecrets", "parameters": "(String username)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listSecrets(String username)", "full_signature": "@Override public List<URI> listSecrets(String username)", "class_method_signature": "MockPersistentStorage.listSecrets(String username)", "testcase": false, "constructor": false}, {"identifier": "insertPseudonym", "parameters": "(URI key, String username, String scope, boolean exclusive,\n      byte[] pseudonymValue, byte[] data)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertPseudonym(URI key, String username, String scope, boolean exclusive,\n      byte[] pseudonymValue, byte[] data)", "full_signature": "@Override public boolean insertPseudonym(URI key, String username, String scope, boolean exclusive,\n      byte[] pseudonymValue, byte[] data)", "class_method_signature": "MockPersistentStorage.insertPseudonym(URI key, String username, String scope, boolean exclusive,\n      byte[] pseudonymValue, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getPseudonym", "parameters": "(URI key, String username)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getPseudonym(URI key, String username)", "full_signature": "@Override public byte[] getPseudonym(URI key, String username)", "class_method_signature": "MockPersistentStorage.getPseudonym(URI key, String username)", "testcase": false, "constructor": false}, {"identifier": "deletePseudonym", "parameters": "(URI key, String username)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deletePseudonym(URI key, String username)", "full_signature": "@Override public boolean deletePseudonym(URI key, String username)", "class_method_signature": "MockPersistentStorage.deletePseudonym(URI key, String username)", "testcase": false, "constructor": false}, {"identifier": "updatePseudonym", "parameters": "(URI key, String username, byte[] value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updatePseudonym(URI key, String username, byte[] value)", "full_signature": "@Override public boolean updatePseudonym(URI key, String username, byte[] value)", "class_method_signature": "MockPersistentStorage.updatePseudonym(URI key, String username, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "listPseudonyms", "parameters": "(String username)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listPseudonyms(String username)", "full_signature": "@Override public List<URI> listPseudonyms(String username)", "class_method_signature": "MockPersistentStorage.listPseudonyms(String username)", "testcase": false, "constructor": false}, {"identifier": "listPseudonyms", "parameters": "(String username, String scope)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listPseudonyms(String username, String scope)", "full_signature": "@Override public List<URI> listPseudonyms(String username, String scope)", "class_method_signature": "MockPersistentStorage.listPseudonyms(String username, String scope)", "testcase": false, "constructor": false}, {"identifier": "listPseudonyms", "parameters": "(String username, String scope, boolean isExclusive)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listPseudonyms(String username, String scope, boolean isExclusive)", "full_signature": "@Override public List<URI> listPseudonyms(String username, String scope, boolean isExclusive)", "class_method_signature": "MockPersistentStorage.listPseudonyms(String username, String scope, boolean isExclusive)", "testcase": false, "constructor": false}, {"identifier": "listPseudonyms", "parameters": "(String username, byte[] pseudonymValue)", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> listPseudonyms(String username, byte[] pseudonymValue)", "full_signature": "@Override public List<URI> listPseudonyms(String username, byte[] pseudonymValue)", "class_method_signature": "MockPersistentStorage.listPseudonyms(String username, byte[] pseudonymValue)", "testcase": false, "constructor": false}, {"identifier": "insertRevocationInformation", "parameters": "(URI key, URI rev_auth, Calendar created, byte[] data)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertRevocationInformation(URI key, URI rev_auth, Calendar created, byte[] data)", "full_signature": "@Override public boolean insertRevocationInformation(URI key, URI rev_auth, Calendar created, byte[] data)", "class_method_signature": "MockPersistentStorage.insertRevocationInformation(URI key, URI rev_auth, Calendar created, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getRevocationInformation", "parameters": "(URI key, URI rev_auth)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getRevocationInformation(URI key, URI rev_auth)", "full_signature": "@Override public byte[] getRevocationInformation(URI key, URI rev_auth)", "class_method_signature": "MockPersistentStorage.getRevocationInformation(URI key, URI rev_auth)", "testcase": false, "constructor": false}, {"identifier": "getLatestRevocationInformation", "parameters": "(URI rev_auth)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getLatestRevocationInformation(URI rev_auth)", "full_signature": "@Override public byte[] getLatestRevocationInformation(URI rev_auth)", "class_method_signature": "MockPersistentStorage.getLatestRevocationInformation(URI rev_auth)", "testcase": false, "constructor": false}], "file": "Code/core-abce/abce-components/src/main/java-ibm-only/eu/abc4trust/db/MockPersistentStorage.java"}, "focal_method": {"identifier": "getItem", "parameters": "(SimpleParamTypes table, URI key)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] getItem(SimpleParamTypes table, URI key) {\n    byte[] item = storage.get(table).get(key);\n    if (item != null) {\n      item = Arrays.copyOf(item, item.length);\n    }\n    return item;\n  }", "signature": "byte[] getItem(SimpleParamTypes table, URI key)", "full_signature": "@Override public byte[] getItem(SimpleParamTypes table, URI key)", "class_method_signature": "MockPersistentStorage.getItem(SimpleParamTypes table, URI key)", "testcase": false, "constructor": false, "invocations": ["get", "get", "copyOf"]}, "repository": {"repo_id": 7687890, "url": "https://github.com/p2abcengine/p2abcengine", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 71, "size": 11790, "license": "licensed"}}