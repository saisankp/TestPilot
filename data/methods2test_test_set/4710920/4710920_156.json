{"test_class": {"identifier": "InjvmProtocolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();", "modifier": "private", "type": "Protocol", "declarator": "protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension()", "var_name": "protocol"}, {"original_string": "private ProxyFactory proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private", "type": "ProxyFactory", "declarator": "proxy = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "proxy"}, {"original_string": "private List<Exporter<?>> exporters = new ArrayList<Exporter<?>>();", "modifier": "private", "type": "List<Exporter<?>>", "declarator": "exporters = new ArrayList<Exporter<?>>()", "var_name": "exporters"}], "file": "dubbo-rpc/dubbo-rpc-injvm/src/test/java/org/apache/dubbo/rpc/protocol/injvm/InjvmProtocolTest.java"}, "test_case": {"identifier": "testLocalProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocalProtocol() throws Exception {\n        DemoService service = new DemoServiceImpl();\n        Invoker<?> invoker = proxy.getInvoker(service, DemoService.class, URL.valueOf(\"injvm://127.0.0.1/TestService\").addParameter(INTERFACE_KEY, DemoService.class.getName()));\n        assertTrue(invoker.isAvailable());\n        Exporter<?> exporter = protocol.export(invoker);\n        exporters.add(exporter);\n        service = proxy.getProxy(protocol.refer(DemoService.class, URL.valueOf(\"injvm://127.0.0.1/TestService\").addParameter(INTERFACE_KEY, DemoService.class.getName())));\n        assertEquals(service.getSize(new String[]{\"\", \"\", \"\"}), 3);\n        service.invoke(\"injvm://127.0.0.1/TestService\", \"invoke\");\n\n        InjvmInvoker injvmInvoker = new InjvmInvoker(DemoService.class, URL.valueOf(\"injvm://127.0.0.1/TestService\"), null, new HashMap<String, Exporter<?>>());\n        assertFalse(injvmInvoker.isAvailable());\n\n    }", "signature": "void testLocalProtocol()", "full_signature": "@Test public void testLocalProtocol()", "class_method_signature": "InjvmProtocolTest.testLocalProtocol()", "testcase": true, "constructor": false, "invocations": ["getInvoker", "addParameter", "valueOf", "getName", "assertTrue", "isAvailable", "export", "add", "getProxy", "refer", "addParameter", "valueOf", "getName", "assertEquals", "getSize", "invoke", "valueOf", "assertFalse", "isAvailable"]}, "focal_class": {"identifier": "InjvmProtocol", "superclass": "extends AbstractProtocol", "interfaces": "implements Protocol", "fields": [{"original_string": "public static final String NAME = LOCAL_PROTOCOL;", "modifier": "public static final", "type": "String", "declarator": "NAME = LOCAL_PROTOCOL", "var_name": "NAME"}, {"original_string": "public static final int DEFAULT_PORT = 0;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 0", "var_name": "DEFAULT_PORT"}, {"original_string": "private static InjvmProtocol INSTANCE;", "modifier": "private static", "type": "InjvmProtocol", "declarator": "INSTANCE", "var_name": "INSTANCE"}], "methods": [{"identifier": "InjvmProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " InjvmProtocol()", "full_signature": "public  InjvmProtocol()", "class_method_signature": "InjvmProtocol.InjvmProtocol()", "testcase": false, "constructor": true}, {"identifier": "getInjvmProtocol", "parameters": "()", "modifiers": "public static", "return": "InjvmProtocol", "signature": "InjvmProtocol getInjvmProtocol()", "full_signature": "public static InjvmProtocol getInjvmProtocol()", "class_method_signature": "InjvmProtocol.getInjvmProtocol()", "testcase": false, "constructor": false}, {"identifier": "getExporter", "parameters": "(Map<String, Exporter<?>> map, URL key)", "modifiers": "static", "return": "Exporter<?>", "signature": "Exporter<?> getExporter(Map<String, Exporter<?>> map, URL key)", "full_signature": "static Exporter<?> getExporter(Map<String, Exporter<?>> map, URL key)", "class_method_signature": "InjvmProtocol.getExporter(Map<String, Exporter<?>> map, URL key)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "InjvmProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "export", "parameters": "(Invoker<T> invoker)", "modifiers": "@Override public", "return": "Exporter<T>", "signature": "Exporter<T> export(Invoker<T> invoker)", "full_signature": "@Override public Exporter<T> export(Invoker<T> invoker)", "class_method_signature": "InjvmProtocol.export(Invoker<T> invoker)", "testcase": false, "constructor": false}, {"identifier": "protocolBindingRefer", "parameters": "(Class<T> serviceType, URL url)", "modifiers": "@Override public", "return": "Invoker<T>", "signature": "Invoker<T> protocolBindingRefer(Class<T> serviceType, URL url)", "full_signature": "@Override public Invoker<T> protocolBindingRefer(Class<T> serviceType, URL url)", "class_method_signature": "InjvmProtocol.protocolBindingRefer(Class<T> serviceType, URL url)", "testcase": false, "constructor": false}, {"identifier": "isInjvmRefer", "parameters": "(URL url)", "modifiers": "public", "return": "boolean", "signature": "boolean isInjvmRefer(URL url)", "full_signature": "public boolean isInjvmRefer(URL url)", "class_method_signature": "InjvmProtocol.isInjvmRefer(URL url)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-injvm/src/main/java/org/apache/dubbo/rpc/protocol/injvm/InjvmProtocol.java"}, "focal_method": {"identifier": "export", "parameters": "(Invoker<T> invoker)", "modifiers": "@Override public", "return": "Exporter<T>", "body": "@Override\n    public <T> Exporter<T> export(Invoker<T> invoker) throws RpcException {\n        return new InjvmExporter<T>(invoker, invoker.getUrl().getServiceKey(), exporterMap);\n    }", "signature": "Exporter<T> export(Invoker<T> invoker)", "full_signature": "@Override public Exporter<T> export(Invoker<T> invoker)", "class_method_signature": "InjvmProtocol.export(Invoker<T> invoker)", "testcase": false, "constructor": false, "invocations": ["getServiceKey", "getUrl"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}