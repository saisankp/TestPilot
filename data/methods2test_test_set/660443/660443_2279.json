{"test_class": {"identifier": "StrandTest", "superclass": "extends AbstractStrandTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/StrandTest.java"}, "test_case": {"identifier": "testStrand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStrand() {\n        IStrand oStrand = new Strand();\n        Assert.assertNotNull(oStrand);\n        Assert.assertEquals(oStrand.getMonomerCount(), 0);\n\n        IMonomer oMono1 = oStrand.getBuilder().newInstance(IMonomer.class);\n        oMono1.setMonomerName(new String(\"TRP279\"));\n        IMonomer oMono2 = oStrand.getBuilder().newInstance(IMonomer.class);\n        oMono2.setMonomerName(new String(\"HOH\"));\n        IMonomer oMono3 = oStrand.getBuilder().newInstance(IMonomer.class);\n        oMono3.setMonomerName(new String(\"GLYA16\"));\n        IAtom oAtom1 = oStrand.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom2 = oStrand.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom3 = oStrand.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom4 = oStrand.getBuilder().newInstance(IAtom.class, \"C\");\n        IAtom oAtom5 = oStrand.getBuilder().newInstance(IAtom.class, \"C\");\n\n        oStrand.addAtom(oAtom1);\n        oStrand.addAtom(oAtom2);\n        oStrand.addAtom(oAtom3, oMono1);\n        oStrand.addAtom(oAtom4, oMono2);\n        oStrand.addAtom(oAtom5, oMono3);\n        Assert.assertNotNull(oStrand.getAtom(0));\n        Assert.assertNotNull(oStrand.getAtom(1));\n        Assert.assertNotNull(oStrand.getAtom(2));\n        Assert.assertNotNull(oStrand.getAtom(3));\n        Assert.assertNotNull(oStrand.getAtom(4));\n        Assert.assertEquals(oAtom1, oStrand.getAtom(0));\n        Assert.assertEquals(oAtom2, oStrand.getAtom(1));\n        Assert.assertEquals(oAtom3, oStrand.getAtom(2));\n        Assert.assertEquals(oAtom4, oStrand.getAtom(3));\n        Assert.assertEquals(oAtom5, oStrand.getAtom(4));\n\n        Assert.assertNull(oStrand.getMonomer(\"0815\"));\n        Assert.assertNotNull(oStrand.getMonomer(\"\"));\n        Assert.assertNotNull(oStrand.getMonomer(\"TRP279\"));\n        Assert.assertEquals(oMono1, oStrand.getMonomer(\"TRP279\"));\n        Assert.assertEquals(oStrand.getMonomer(\"TRP279\").getAtomCount(), 1);\n        Assert.assertNotNull(oStrand.getMonomer(\"HOH\"));\n        Assert.assertEquals(oMono2, oStrand.getMonomer(\"HOH\"));\n        Assert.assertEquals(oStrand.getMonomer(\"HOH\").getAtomCount(), 1);\n        Assert.assertEquals(oStrand.getMonomer(\"\").getAtomCount(), 2);\n        Assert.assertEquals(oStrand.getAtomCount(), 5);\n        Assert.assertEquals(oStrand.getMonomerCount(), 3);\n    }", "signature": "void testStrand()", "full_signature": "@Test public void testStrand()", "class_method_signature": "StrandTest.testStrand()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertEquals", "getMonomerCount", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "setMonomerName", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "newInstance", "getBuilder", "addAtom", "addAtom", "addAtom", "addAtom", "addAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertNotNull", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertEquals", "getAtom", "assertNull", "getMonomer", "assertNotNull", "getMonomer", "assertNotNull", "getMonomer", "assertEquals", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertNotNull", "getMonomer", "assertEquals", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertEquals", "getAtomCount", "getMonomer", "assertEquals", "getAtomCount", "assertEquals", "getMonomerCount"]}, "focal_class": {"identifier": "Strand", "superclass": "extends AtomContainer", "interfaces": "implements java.io.Serializable, IStrand", "fields": [{"original_string": "private static final long     serialVersionUID = 4200943086350928356L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4200943086350928356L", "var_name": "serialVersionUID"}, {"original_string": "private Map<String, IMonomer> monomers;", "modifier": "private", "type": "Map<String, IMonomer>", "declarator": "monomers", "var_name": "monomers"}, {"original_string": "private String                strandName;", "modifier": "private", "type": "String", "declarator": "strandName", "var_name": "strandName"}, {"original_string": "private String                strandType;", "modifier": "private", "type": "String", "declarator": "strandType", "var_name": "strandType"}], "methods": [{"identifier": "Strand", "parameters": "()", "modifiers": "public", "return": "", "signature": " Strand()", "full_signature": "public  Strand()", "class_method_signature": "Strand.Strand()", "testcase": false, "constructor": true}, {"identifier": "getStrandName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getStrandName()", "full_signature": "@Override public String getStrandName()", "class_method_signature": "Strand.getStrandName()", "testcase": false, "constructor": false}, {"identifier": "getStrandType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getStrandType()", "full_signature": "@Override public String getStrandType()", "class_method_signature": "Strand.getStrandType()", "testcase": false, "constructor": false}, {"identifier": "setStrandName", "parameters": "(String cStrandName)", "modifiers": "@Override public", "return": "void", "signature": "void setStrandName(String cStrandName)", "full_signature": "@Override public void setStrandName(String cStrandName)", "class_method_signature": "Strand.setStrandName(String cStrandName)", "testcase": false, "constructor": false}, {"identifier": "setStrandType", "parameters": "(String cStrandType)", "modifiers": "@Override public", "return": "void", "signature": "void setStrandType(String cStrandType)", "full_signature": "@Override public void setStrandType(String cStrandType)", "class_method_signature": "Strand.setStrandType(String cStrandType)", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IAtom oAtom)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IAtom oAtom)", "full_signature": "@Override public void addAtom(IAtom oAtom)", "class_method_signature": "Strand.addAtom(IAtom oAtom)", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(IAtom oAtom, IMonomer oMonomer)", "modifiers": "@Override public", "return": "void", "signature": "void addAtom(IAtom oAtom, IMonomer oMonomer)", "full_signature": "@Override public void addAtom(IAtom oAtom, IMonomer oMonomer)", "class_method_signature": "Strand.addAtom(IAtom oAtom, IMonomer oMonomer)", "testcase": false, "constructor": false}, {"identifier": "getMonomerCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMonomerCount()", "full_signature": "@Override public int getMonomerCount()", "class_method_signature": "Strand.getMonomerCount()", "testcase": false, "constructor": false}, {"identifier": "getMonomer", "parameters": "(String cName)", "modifiers": "@Override public", "return": "IMonomer", "signature": "IMonomer getMonomer(String cName)", "full_signature": "@Override public IMonomer getMonomer(String cName)", "class_method_signature": "Strand.getMonomer(String cName)", "testcase": false, "constructor": false}, {"identifier": "getMonomerNames", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getMonomerNames()", "full_signature": "@Override public Collection<String> getMonomerNames()", "class_method_signature": "Strand.getMonomerNames()", "testcase": false, "constructor": false}, {"identifier": "removeMonomer", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void removeMonomer(String name)", "full_signature": "@Override public void removeMonomer(String name)", "class_method_signature": "Strand.removeMonomer(String name)", "testcase": false, "constructor": false}, {"identifier": "getMonomers", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, IMonomer>", "signature": "Map<String, IMonomer> getMonomers()", "full_signature": "@Override public Map<String, IMonomer> getMonomers()", "class_method_signature": "Strand.getMonomers()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Strand.toString()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "IStrand", "signature": "IStrand clone()", "full_signature": "@Override public IStrand clone()", "class_method_signature": "Strand.clone()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/Strand.java"}, "focal_method": {"identifier": "Strand", "parameters": "()", "modifiers": "public", "return": "", "body": "public Strand() {\n        super();\n        // Stand stuff\n        monomers = new Hashtable<String, IMonomer>();\n        Monomer oMonomer = new Monomer();\n        oMonomer.setMonomerName(\"\");\n        oMonomer.setMonomerType(\"UNKNOWN\");\n        monomers.put(\"\", oMonomer);\n        strandName = \"\";\n    }", "signature": " Strand()", "full_signature": "public  Strand()", "class_method_signature": "Strand.Strand()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}