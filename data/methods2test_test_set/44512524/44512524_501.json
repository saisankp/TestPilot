{"test_class": {"identifier": "Frugal2UTest", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/quantile/Frugal2UTest.java"}, "test_case": {"identifier": "testOffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOffer() throws QuantilesException {\n        System.out.println(\"offer\");\n\n        double[] quantiles = new double[]{0.05, 0.25, 0.5, 0.75, 0.95};\n        Frugal2U instance = new Frugal2U(quantiles, 0);\n        ExactQuantilesAll<Integer> exact = new ExactQuantilesAll<Integer>();\n        \n        RandomEngine r = new MersenneTwister64(0);\n        Normal dist = new Normal(100, 50, r);\n        int numSamples = 1000;\n                \n        for(int i = 0; i < numSamples; ++i) {\n            int num = (int) Math.max(0, dist.nextDouble());\n            instance.offer(num);\n            exact.offer(num);\n        }\n        \n        System.out.println(\"Q\\tEst\\tExact\");\n        for (double q : quantiles) {\n            System.out.println(q + \"\\t\" + instance.getQuantile(q) + \"\\t\" + exact.getQuantile(q));\n        }\n        \n        \n    }", "signature": "void testOffer()", "full_signature": "@Test public void testOffer()", "class_method_signature": "Frugal2UTest.testOffer()", "testcase": true, "constructor": false, "invocations": ["println", "max", "nextDouble", "offer", "offer", "println", "println", "getQuantile", "getQuantile"]}, "focal_class": {"identifier": "Frugal2U", "superclass": "", "interfaces": "implements IQuantiles<Integer>", "fields": [{"original_string": "private final Quantile quantiles[];", "modifier": "private final", "type": "Quantile", "declarator": "quantiles[]", "var_name": "quantiles"}], "methods": [{"identifier": "Frugal2U", "parameters": "(Quantile[] quantiles)", "modifiers": "public", "return": "", "signature": " Frugal2U(Quantile[] quantiles)", "full_signature": "public  Frugal2U(Quantile[] quantiles)", "class_method_signature": "Frugal2U.Frugal2U(Quantile[] quantiles)", "testcase": false, "constructor": true}, {"identifier": "Frugal2U", "parameters": "(double[] quantiles, int initialEstimate)", "modifiers": "public", "return": "", "signature": " Frugal2U(double[] quantiles, int initialEstimate)", "full_signature": "public  Frugal2U(double[] quantiles, int initialEstimate)", "class_method_signature": "Frugal2U.Frugal2U(double[] quantiles, int initialEstimate)", "testcase": false, "constructor": true}, {"identifier": "offer", "parameters": "(Integer value)", "modifiers": "@Override public", "return": "void", "signature": "void offer(Integer value)", "full_signature": "@Override public void offer(Integer value)", "class_method_signature": "Frugal2U.offer(Integer value)", "testcase": false, "constructor": false}, {"identifier": "getQuantile", "parameters": "(double q)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getQuantile(double q)", "full_signature": "@Override public Integer getQuantile(double q)", "class_method_signature": "Frugal2U.getQuantile(double q)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/quantile/Frugal2U.java"}, "focal_method": {"identifier": "offer", "parameters": "(Integer value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void offer(Integer value) {\n        for (Quantile q : quantiles) {\n            q.insert(value);\n        }\n    }", "signature": "void offer(Integer value)", "full_signature": "@Override public void offer(Integer value)", "class_method_signature": "Frugal2U.offer(Integer value)", "testcase": false, "constructor": false, "invocations": ["insert"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}