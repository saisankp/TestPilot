{"test_class": {"identifier": "ExpiringCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long CACHE_EXPIRY = TimeUnit.SECONDS.toMillis(2);", "modifier": "private static final", "type": "long", "declarator": "CACHE_EXPIRY = TimeUnit.SECONDS.toMillis(2)", "var_name": "CACHE_EXPIRY"}, {"original_string": "private static final Supplier<String> CACHE_ACTION = () -> {\n        byte[] array = new byte[8];\n        new Random().nextBytes(array);\n        return new String(array, StandardCharsets.UTF_8);\n    };", "modifier": "private static final", "type": "Supplier<String>", "declarator": "CACHE_ACTION = () -> {\n        byte[] array = new byte[8];\n        new Random().nextBytes(array);\n        return new String(array, StandardCharsets.UTF_8);\n    }", "var_name": "CACHE_ACTION"}, {"original_string": "private ExpiringCache<String> subject;", "modifier": "private", "type": "ExpiringCache<String>", "declarator": "subject", "var_name": "subject"}], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/cache/ExpiringCacheTest.java"}, "test_case": {"identifier": "testPutValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPutValue() {\n        String value1 = subject.getValue();\n\n        // put new value\n        subject.putValue(\"test\");\n\n        String value2 = subject.getValue();\n        assertEquals(\"test\", value2);\n        assertNotEquals(value1, value2);\n    }", "signature": "void testPutValue()", "full_signature": "@Test public void testPutValue()", "class_method_signature": "ExpiringCacheTest.testPutValue()", "testcase": true, "constructor": false, "invocations": ["getValue", "putValue", "getValue", "assertEquals", "assertNotEquals"]}, "focal_class": {"identifier": "ExpiringCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long expiry;", "modifier": "private final", "type": "long", "declarator": "expiry", "var_name": "expiry"}, {"original_string": "private final Supplier<@Nullable V> action;", "modifier": "private final", "type": "Supplier<@Nullable V>", "declarator": "action", "var_name": "action"}, {"original_string": "private SoftReference<@Nullable V> value = new SoftReference<>(null);", "modifier": "private", "type": "SoftReference<@Nullable V>", "declarator": "value = new SoftReference<>(null)", "var_name": "value"}, {"original_string": "private long expiresAt;", "modifier": "private", "type": "long", "declarator": "expiresAt", "var_name": "expiresAt"}], "methods": [{"identifier": "ExpiringCache", "parameters": "(Duration expiry, Supplier<@Nullable V> action)", "modifiers": "public", "return": "", "signature": " ExpiringCache(Duration expiry, Supplier<@Nullable V> action)", "full_signature": "public  ExpiringCache(Duration expiry, Supplier<@Nullable V> action)", "class_method_signature": "ExpiringCache.ExpiringCache(Duration expiry, Supplier<@Nullable V> action)", "testcase": false, "constructor": true}, {"identifier": "ExpiringCache", "parameters": "(long expiry, Supplier<@Nullable V> action)", "modifiers": "public", "return": "", "signature": " ExpiringCache(long expiry, Supplier<@Nullable V> action)", "full_signature": "public  ExpiringCache(long expiry, Supplier<@Nullable V> action)", "class_method_signature": "ExpiringCache.ExpiringCache(long expiry, Supplier<@Nullable V> action)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public synchronized @Nullable", "return": "V", "signature": "V getValue()", "full_signature": "public synchronized @Nullable V getValue()", "class_method_signature": "ExpiringCache.getValue()", "testcase": false, "constructor": false}, {"identifier": "putValue", "parameters": "(@Nullable V value)", "modifiers": "public final synchronized", "return": "void", "signature": "void putValue(@Nullable V value)", "full_signature": "public final synchronized void putValue(@Nullable V value)", "class_method_signature": "ExpiringCache.putValue(@Nullable V value)", "testcase": false, "constructor": false}, {"identifier": "invalidateValue", "parameters": "()", "modifiers": "public final synchronized", "return": "void", "signature": "void invalidateValue()", "full_signature": "public final synchronized void invalidateValue()", "class_method_signature": "ExpiringCache.invalidateValue()", "testcase": false, "constructor": false}, {"identifier": "refreshValue", "parameters": "()", "modifiers": "public synchronized @Nullable", "return": "V", "signature": "V refreshValue()", "full_signature": "public synchronized @Nullable V refreshValue()", "class_method_signature": "ExpiringCache.refreshValue()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExpired()", "full_signature": "public boolean isExpired()", "class_method_signature": "ExpiringCache.isExpired()", "testcase": false, "constructor": false}, {"identifier": "calcExpiresAt", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long calcExpiresAt()", "full_signature": "private long calcExpiresAt()", "class_method_signature": "ExpiringCache.calcExpiresAt()", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/cache/ExpiringCache.java"}, "focal_method": {"identifier": "putValue", "parameters": "(@Nullable V value)", "modifiers": "public final synchronized", "return": "void", "body": "public final synchronized void putValue(@Nullable V value) {\n        this.value = new SoftReference<>(value);\n        expiresAt = calcExpiresAt();\n    }", "signature": "void putValue(@Nullable V value)", "full_signature": "public final synchronized void putValue(@Nullable V value)", "class_method_signature": "ExpiringCache.putValue(@Nullable V value)", "testcase": false, "constructor": false, "invocations": ["calcExpiresAt"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}