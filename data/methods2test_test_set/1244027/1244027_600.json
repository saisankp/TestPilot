{"test_class": {"identifier": "BasicPathTest", "superclass": "extends AbstractPathTest", "interfaces": "", "fields": [{"original_string": "public static final TextEncoder NO_OP_ENCODER = Path.NO_OP_ENCODER;", "modifier": "public static final", "type": "TextEncoder", "declarator": "NO_OP_ENCODER = Path.NO_OP_ENCODER", "var_name": "NO_OP_ENCODER"}, {"original_string": "public static final Path ROOT = RootPath.INSTANCE;", "modifier": "public static final", "type": "Path", "declarator": "ROOT = RootPath.INSTANCE", "var_name": "ROOT"}, {"original_string": "private String validNamespaceUri;", "modifier": "private", "type": "String", "declarator": "validNamespaceUri", "var_name": "validNamespaceUri"}, {"original_string": "private Path path2;", "modifier": "private", "type": "Path", "declarator": "path2", "var_name": "path2"}, {"original_string": "private Path.Segment[] validSegments;", "modifier": "private", "type": "Path.Segment[]", "declarator": "validSegments", "var_name": "validSegments"}, {"original_string": "private List<Path.Segment> validSegmentsList;", "modifier": "private", "type": "List<Path.Segment>", "declarator": "validSegmentsList", "var_name": "validSegmentsList"}, {"original_string": "private Name[] validSegmentNames;", "modifier": "private", "type": "Name[]", "declarator": "validSegmentNames", "var_name": "validSegmentNames"}, {"original_string": "private String validNamespacePrefix;", "modifier": "private", "type": "String", "declarator": "validNamespacePrefix", "var_name": "validNamespacePrefix"}, {"original_string": "private PathValueFactory pathFactory;", "modifier": "private", "type": "PathValueFactory", "declarator": "pathFactory", "var_name": "pathFactory"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/BasicPathTest.java"}, "test_case": {"identifier": "shouldHaveSizeThatReflectsNumberOfSegments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHaveSizeThatReflectsNumberOfSegments() {\n        assertThat(path.size(), is(validSegmentsList.size()));\n    }", "signature": "void shouldHaveSizeThatReflectsNumberOfSegments()", "full_signature": "@Test public void shouldHaveSizeThatReflectsNumberOfSegments()", "class_method_signature": "BasicPathTest.shouldHaveSizeThatReflectsNumberOfSegments()", "testcase": true, "constructor": false, "invocations": ["assertThat", "size", "is", "size"]}, "focal_class": {"identifier": "BasicPath", "superclass": "extends AbstractPath", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final List<Segment> EMPTY_SEGMENTS = Collections.emptyList();", "modifier": "private static final", "type": "List<Segment>", "declarator": "EMPTY_SEGMENTS = Collections.emptyList()", "var_name": "EMPTY_SEGMENTS"}, {"original_string": "public static final Path EMPTY_RELATIVE = new BasicPath(EMPTY_SEGMENTS, false);", "modifier": "public static final", "type": "Path", "declarator": "EMPTY_RELATIVE = new BasicPath(EMPTY_SEGMENTS, false)", "var_name": "EMPTY_RELATIVE"}, {"original_string": "public static final Path SELF_PATH = new BasicPath(Collections.singletonList(Path.SELF_SEGMENT), false);", "modifier": "public static final", "type": "Path", "declarator": "SELF_PATH = new BasicPath(Collections.singletonList(Path.SELF_SEGMENT), false)", "var_name": "SELF_PATH"}, {"original_string": "public static final Path PARENT_PATH = new BasicPath(Collections.singletonList(Path.PARENT_SEGMENT), false);", "modifier": "public static final", "type": "Path", "declarator": "PARENT_PATH = new BasicPath(Collections.singletonList(Path.PARENT_SEGMENT), false)", "var_name": "PARENT_PATH"}, {"original_string": "private/*final*/List<Segment> segments;", "modifier": "private", "type": "List<Segment>", "declarator": "segments", "var_name": "segments"}, {"original_string": "private/*final*/boolean absolute;", "modifier": "private", "type": "boolean", "declarator": "absolute", "var_name": "absolute"}, {"original_string": "private/*final*/boolean normalized;", "modifier": "private", "type": "boolean", "declarator": "normalized", "var_name": "normalized"}], "methods": [{"identifier": "BasicPath", "parameters": "( List<Segment> segments,\n                      boolean absolute )", "modifiers": "public", "return": "", "signature": " BasicPath( List<Segment> segments,\n                      boolean absolute )", "full_signature": "public  BasicPath( List<Segment> segments,\n                      boolean absolute )", "class_method_signature": "BasicPath.BasicPath( List<Segment> segments,\n                      boolean absolute )", "testcase": false, "constructor": true}, {"identifier": "getAncestor", "parameters": "( int degree )", "modifiers": "@Override public", "return": "Path", "signature": "Path getAncestor( int degree )", "full_signature": "@Override public Path getAncestor( int degree )", "class_method_signature": "BasicPath.getAncestor( int degree )", "testcase": false, "constructor": false}, {"identifier": "getSegmentsOfParent", "parameters": "()", "modifiers": "@Override protected", "return": "Iterator<Segment>", "signature": "Iterator<Segment> getSegmentsOfParent()", "full_signature": "@Override protected Iterator<Segment> getSegmentsOfParent()", "class_method_signature": "BasicPath.getSegmentsOfParent()", "testcase": false, "constructor": false}, {"identifier": "getSegmentsList", "parameters": "()", "modifiers": "@Override public", "return": "List<Segment>", "signature": "List<Segment> getSegmentsList()", "full_signature": "@Override public List<Segment> getSegmentsList()", "class_method_signature": "BasicPath.getSegmentsList()", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "@Override public boolean isAbsolute()", "class_method_signature": "BasicPath.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "isNormalized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNormalized()", "full_signature": "@Override public boolean isNormalized()", "class_method_signature": "BasicPath.isNormalized()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override public boolean isRoot()", "class_method_signature": "BasicPath.isRoot()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BasicPath.size()", "testcase": false, "constructor": false}, {"identifier": "readObject", "parameters": "( ObjectInputStream aStream )", "modifiers": "@SuppressWarnings( \"unchecked\" ) private", "return": "void", "signature": "void readObject( ObjectInputStream aStream )", "full_signature": "@SuppressWarnings( \"unchecked\" ) private void readObject( ObjectInputStream aStream )", "class_method_signature": "BasicPath.readObject( ObjectInputStream aStream )", "testcase": false, "constructor": false}, {"identifier": "writeObject", "parameters": "( ObjectOutputStream aStream )", "modifiers": "private", "return": "void", "signature": "void writeObject( ObjectOutputStream aStream )", "full_signature": "private void writeObject( ObjectOutputStream aStream )", "class_method_signature": "BasicPath.writeObject( ObjectOutputStream aStream )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/BasicPath.java"}, "focal_method": {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int size() {\n        return this.segments.size();\n    }", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BasicPath.size()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}