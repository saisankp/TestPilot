{"test_class": {"identifier": "ClientAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "private static final String clientName = \"principal\";", "modifier": "private static final", "type": "String", "declarator": "clientName = \"principal\"", "var_name": "clientName"}, {"original_string": "private static final String clientSpiffeStr = \"spiffe://example.org/principal\";", "modifier": "private static final", "type": "String", "declarator": "clientSpiffeStr = \"spiffe://example.org/principal\"", "var_name": "clientSpiffeStr"}, {"original_string": "private static URI clientSpiffe;", "modifier": "private static", "type": "URI", "declarator": "clientSpiffe", "var_name": "clientSpiffe"}, {"original_string": "private static final Principal simplePrincipal =\n      SimplePrincipal.of(format(\"CN=%s,OU=organizational-unit\", clientName));", "modifier": "private static final", "type": "Principal", "declarator": "simplePrincipal =\n      SimplePrincipal.of(format(\"CN=%s,OU=organizational-unit\", clientName))", "var_name": "simplePrincipal"}, {"original_string": "private static final Client client =\n      new Client(0, clientName, null, clientSpiffeStr, null, null, null, null,\n          null, null, true, false);", "modifier": "private static final", "type": "Client", "declarator": "client =\n      new Client(0, clientName, null, clientSpiffeStr, null, null, null, null,\n          null, null, true, false)", "var_name": "client"}, {"original_string": "private static Principal certPrincipal;", "modifier": "private static", "type": "Principal", "declarator": "certPrincipal", "var_name": "certPrincipal"}, {"original_string": "private static final String clientPem =\n      \"-----BEGIN CERTIFICATE-----\\n\\n\"\n          + \"MIIEcTCCAlmgAwIBAgIRALryCWgCxplmVoNtywrAfR0wDQYJKoZIhvcNAQELBQAw\\n\"\n          + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjE2MDAzODI0WhcNMjExMjE2\\n\"\n          + \"MDAzNzAwWjAyMRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MRIwEAYDVQQD\\n\"\n          + \"EwlwcmluY2lwYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDz9ex2\\n\"\n          + \"HQ7YA9nyOigFjeOqSpkDVReSG2IWSDHnugkO3TVY7NqfgMx1I+KESAj5w/PXIv1I\\n\"\n          + \"Aa4qUnLYQ2IqgYUYvJqTt6DtlFLC6dWdgV0x/zRIbtybPR9Ww0eObShzy4od97w4\\n\"\n          + \"zMN1/xXwpIrTNhn9wwzi4l7vtOYwxtoss/B6MBKyxB8R6iEUupINcFANFzcKdniG\\n\"\n          + \"40HcEW8aUS6aRC8bCc4e6ACJp3VR5wnHpHXUlnkeOyTX5yWD8MKni9eY2t0Ra5OX\\n\"\n          + \"tV1NEwOPJz8fTp8aRnoe8+Rq8Lm7W59PO7cJ45srlQ5kKnagha6KB8TTzvNOtYqj\\n\"\n          + \"SgQNkb/OhS8R7Z/9AgMBAAGjgZ0wgZowDgYDVR0PAQH/BAQDAgO4MB0GA1UdJQQW\\n\"\n          + \"MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUj35sbmMzi/R/rrdMJHnj\\n\"\n          + \"n1TLhMwwHwYDVR0jBBgwFoAUUtVdMwHcbWdRZ/VypTBlpCbxgDIwKQYDVR0RBCIw\\n\"\n          + \"IIYec3BpZmZlOi8vZXhhbXBsZS5vcmcvcHJpbmNpcGFsMA0GCSqGSIb3DQEBCwUA\\n\"\n          + \"A4ICAQCXPUPcv9ADJACy5D4Z8bQlGyDj131+vthj95eyO8ftPzTrJANGwpl93oO1\\n\"\n          + \"d7lNh1h2exj/e+gtxdYE/I+DYyvHb2Op+SRNN/ZeZntaoqt22p8CGYIpsPQHttLw\\n\"\n          + \"KJ91ekZhyQhphzgceMrhcnSc/RH7L373ZkFi5FC9EAixKsaDftz+NVTk7vhc+cLV\\n\"\n          + \"Mhkhc3L3dA/Ffqpq6iRVs9eefFlN5Oot3PIihvCrbtl0tur02PjLVWQr5Y/nyVG0\\n\"\n          + \"kN0LU7+w3GNddqB0gsLkwBPZ+UtmbyjHaVQN50jZxA7ysr+EjNhTyZ3lliPX4bGE\\n\"\n          + \"TS/jTexOAObS3tC+e157k2UXbFMNZrE/pQb3juOJHcBgwpZ8FnYlwqe8VIJ6513K\\n\"\n          + \"sOTS2lqAXYCaCOC0X6grRuL+s2JTzhzfgz2xuOSQVtvGYK5FijQVpGBR5BlfgpMM\\n\"\n          + \"/W45PGdkvZGI4281VZUfTSSYK/OstnBAD3BgZXhnQg28dj8BD4jNd5JP7cKHb+ID\\n\"\n          + \"33dh8mAGmSmiSPbxkVwq1AKwa5y6hbfvPIQGaUKveQe0JLTFlU4KmYIRv/nl8N83\\n\"\n          + \"st5hq3sW1qoqXZZ71A/T/BYPODcKgeEBzJ64l7jHtPN91SE8U8vhcrpEWZb/D/PI\\n\"\n          + \"vZTiHaxVIvRRokUPFie1drkj5I7Q7qXqHOCy22rgccR64wkNVg==\\n\"\n          + \"-----END CERTIFICATE-----\";", "modifier": "private static final", "type": "String", "declarator": "clientPem =\n      \"-----BEGIN CERTIFICATE-----\\n\\n\"\n          + \"MIIEcTCCAlmgAwIBAgIRALryCWgCxplmVoNtywrAfR0wDQYJKoZIhvcNAQELBQAw\\n\"\n          + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjE2MDAzODI0WhcNMjExMjE2\\n\"\n          + \"MDAzNzAwWjAyMRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MRIwEAYDVQQD\\n\"\n          + \"EwlwcmluY2lwYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDz9ex2\\n\"\n          + \"HQ7YA9nyOigFjeOqSpkDVReSG2IWSDHnugkO3TVY7NqfgMx1I+KESAj5w/PXIv1I\\n\"\n          + \"Aa4qUnLYQ2IqgYUYvJqTt6DtlFLC6dWdgV0x/zRIbtybPR9Ww0eObShzy4od97w4\\n\"\n          + \"zMN1/xXwpIrTNhn9wwzi4l7vtOYwxtoss/B6MBKyxB8R6iEUupINcFANFzcKdniG\\n\"\n          + \"40HcEW8aUS6aRC8bCc4e6ACJp3VR5wnHpHXUlnkeOyTX5yWD8MKni9eY2t0Ra5OX\\n\"\n          + \"tV1NEwOPJz8fTp8aRnoe8+Rq8Lm7W59PO7cJ45srlQ5kKnagha6KB8TTzvNOtYqj\\n\"\n          + \"SgQNkb/OhS8R7Z/9AgMBAAGjgZ0wgZowDgYDVR0PAQH/BAQDAgO4MB0GA1UdJQQW\\n\"\n          + \"MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUj35sbmMzi/R/rrdMJHnj\\n\"\n          + \"n1TLhMwwHwYDVR0jBBgwFoAUUtVdMwHcbWdRZ/VypTBlpCbxgDIwKQYDVR0RBCIw\\n\"\n          + \"IIYec3BpZmZlOi8vZXhhbXBsZS5vcmcvcHJpbmNpcGFsMA0GCSqGSIb3DQEBCwUA\\n\"\n          + \"A4ICAQCXPUPcv9ADJACy5D4Z8bQlGyDj131+vthj95eyO8ftPzTrJANGwpl93oO1\\n\"\n          + \"d7lNh1h2exj/e+gtxdYE/I+DYyvHb2Op+SRNN/ZeZntaoqt22p8CGYIpsPQHttLw\\n\"\n          + \"KJ91ekZhyQhphzgceMrhcnSc/RH7L373ZkFi5FC9EAixKsaDftz+NVTk7vhc+cLV\\n\"\n          + \"Mhkhc3L3dA/Ffqpq6iRVs9eefFlN5Oot3PIihvCrbtl0tur02PjLVWQr5Y/nyVG0\\n\"\n          + \"kN0LU7+w3GNddqB0gsLkwBPZ+UtmbyjHaVQN50jZxA7ysr+EjNhTyZ3lliPX4bGE\\n\"\n          + \"TS/jTexOAObS3tC+e157k2UXbFMNZrE/pQb3juOJHcBgwpZ8FnYlwqe8VIJ6513K\\n\"\n          + \"sOTS2lqAXYCaCOC0X6grRuL+s2JTzhzfgz2xuOSQVtvGYK5FijQVpGBR5BlfgpMM\\n\"\n          + \"/W45PGdkvZGI4281VZUfTSSYK/OstnBAD3BgZXhnQg28dj8BD4jNd5JP7cKHb+ID\\n\"\n          + \"33dh8mAGmSmiSPbxkVwq1AKwa5y6hbfvPIQGaUKveQe0JLTFlU4KmYIRv/nl8N83\\n\"\n          + \"st5hq3sW1qoqXZZ71A/T/BYPODcKgeEBzJ64l7jHtPN91SE8U8vhcrpEWZb/D/PI\\n\"\n          + \"vZTiHaxVIvRRokUPFie1drkj5I7Q7qXqHOCy22rgccR64wkNVg==\\n\"\n          + \"-----END CERTIFICATE-----\"", "var_name": "clientPem"}, {"original_string": "private static final String multipleSpiffePem = \"-----BEGIN CERTIFICATE-----\\n\"\n      + \"MIIEnTCCAoWgAwIBAgIRAJ3eemLVkvReTvZJqcBWWBswDQYJKoZIhvcNAQELBQAw\\n\"\n      + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjI1MjIxMTQ5WhcNMjExMjE2\\n\"\n      + \"MDAzNzAwWjA4MRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MRgwFgYDVQQD\\n\"\n      + \"Ew9vdGhlci1wcmluY2lwYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\\n\"\n      + \"AQC5ImUMp17F38Wyyph/rUIL4qJE86pZLIrv2lyZd8qzHXxw1o9TawBu3fNtFx0Y\\n\"\n      + \"+96lAb7A50uNMfuzibb2U+w2mDEikFGtchrzDHC6jNPCq7eXL06adcnIEyK2w0Mq\\n\"\n      + \"qvlzuHGJxLNSRsmiuV4SQS3K96t4vCHF30WrboQKD8xsdeqdT2cspkr3WD3nHJih\\n\"\n      + \"ZMg1YdekoV7+qogXrPawnJ7kKK37hBFAF3OnHsxJMS5UMWR6SHYpYU+V8yifp24H\\n\"\n      + \"erJpL9lwJ2BXpMKHsewCLC+VclQVxArCcbmQsXmZhzKTikff/ZngiSfnSnDm9LQL\\n\"\n      + \"vG+HCzr36xwCEmlWnusbcTozAgMBAAGjgcMwgcAwDgYDVR0PAQH/BAQDAgO4MB0G\\n\"\n      + \"A1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUpGY0z/FVU+y/\\n\"\n      + \"ZlAFIdnoHzj25JEwHwYDVR0jBBgwFoAUUtVdMwHcbWdRZ/VypTBlpCbxgDIwTwYD\\n\"\n      + \"VR0RBEgwRoYec3BpZmZlOi8vZXhhbXBsZS5vcmcvcHJpbmNpcGFshiRzcGlmZmU6\\n\"\n      + \"Ly9leGFtcGxlLm9yZy9vdGhlci1wcmluY2lwYWwwDQYJKoZIhvcNAQELBQADggIB\\n\"\n      + \"AFjQdKh/mETvX82ltdxzsCmu+2WQXkw0Q7L2toseAxrAEdH/3teHfFlm/E4ozv3d\\n\"\n      + \"D46DR6SnWY5qsPqlucMQlxGnLQd291JEFeRd2pr5avV7F4K85UhslyM27DrihTpT\\n\"\n      + \"Lex5muGECm9oaJz02QanHOiJU9I5i3ggnJQnfiu9cSlbi/puLb9WR/2Q+kldMQ5A\\n\"\n      + \"m3WaP1eKGug022n/bM+OFGgaoAJHH7l2MBfwAvIltgJZLHsRLAP16G3OotmDt2Eh\\n\"\n      + \"/A3WJt0EbD3PIPkUdt643qdfQGHgw+3ATGARVPypSYG9iOeo9oGUily4irGk5Iss\\n\"\n      + \"wgU10lViC6BHcLs3YY+D8oB7Ik0p2l9JZmJmBuArRMqztSnRiVKIteHUMN0cAfrP\\n\"\n      + \"3VrKlKjJn9amdWk0feiUwb7uWO2CunQewM26MGzM0RntdxyQZ8lsqq5e8zTsHDol\\n\"\n      + \"CrD7eyfBv+98TURnNcLDAXMqd3amAhgmedUDVTrNootKuS6fyg+AmmRjcKOZ4t4g\\n\"\n      + \"16cNALu0koCWdETGGsaeu/NX7RA/ztNme+i6ZCIFaS1Fp2ucTfWyWRMkQ9+DM3vC\\n\"\n      + \"jNPreGsiWrjoReHqRxO+dtOuQf5gSGDTKMTvlESD6xilmmE5n58MCl1bSamEY7rv\\n\"\n      + \"Lz9DeXBJLBSOaXNO+/wdJY/Ix8ADwQYc+jLhdyVOKW7k\\n\"\n      + \"-----END CERTIFICATE-----\";", "modifier": "private static final", "type": "String", "declarator": "multipleSpiffePem = \"-----BEGIN CERTIFICATE-----\\n\"\n      + \"MIIEnTCCAoWgAwIBAgIRAJ3eemLVkvReTvZJqcBWWBswDQYJKoZIhvcNAQELBQAw\\n\"\n      + \"FjEUMBIGA1UEAxMLS2V5d2hpekF1dGgwHhcNMjAwNjI1MjIxMTQ5WhcNMjExMjE2\\n\"\n      + \"MDAzNzAwWjA4MRwwGgYDVQQLExNvcmdhbml6YXRpb25hbC11bml0MRgwFgYDVQQD\\n\"\n      + \"Ew9vdGhlci1wcmluY2lwYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\\n\"\n      + \"AQC5ImUMp17F38Wyyph/rUIL4qJE86pZLIrv2lyZd8qzHXxw1o9TawBu3fNtFx0Y\\n\"\n      + \"+96lAb7A50uNMfuzibb2U+w2mDEikFGtchrzDHC6jNPCq7eXL06adcnIEyK2w0Mq\\n\"\n      + \"qvlzuHGJxLNSRsmiuV4SQS3K96t4vCHF30WrboQKD8xsdeqdT2cspkr3WD3nHJih\\n\"\n      + \"ZMg1YdekoV7+qogXrPawnJ7kKK37hBFAF3OnHsxJMS5UMWR6SHYpYU+V8yifp24H\\n\"\n      + \"erJpL9lwJ2BXpMKHsewCLC+VclQVxArCcbmQsXmZhzKTikff/ZngiSfnSnDm9LQL\\n\"\n      + \"vG+HCzr36xwCEmlWnusbcTozAgMBAAGjgcMwgcAwDgYDVR0PAQH/BAQDAgO4MB0G\\n\"\n      + \"A1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAdBgNVHQ4EFgQUpGY0z/FVU+y/\\n\"\n      + \"ZlAFIdnoHzj25JEwHwYDVR0jBBgwFoAUUtVdMwHcbWdRZ/VypTBlpCbxgDIwTwYD\\n\"\n      + \"VR0RBEgwRoYec3BpZmZlOi8vZXhhbXBsZS5vcmcvcHJpbmNpcGFshiRzcGlmZmU6\\n\"\n      + \"Ly9leGFtcGxlLm9yZy9vdGhlci1wcmluY2lwYWwwDQYJKoZIhvcNAQELBQADggIB\\n\"\n      + \"AFjQdKh/mETvX82ltdxzsCmu+2WQXkw0Q7L2toseAxrAEdH/3teHfFlm/E4ozv3d\\n\"\n      + \"D46DR6SnWY5qsPqlucMQlxGnLQd291JEFeRd2pr5avV7F4K85UhslyM27DrihTpT\\n\"\n      + \"Lex5muGECm9oaJz02QanHOiJU9I5i3ggnJQnfiu9cSlbi/puLb9WR/2Q+kldMQ5A\\n\"\n      + \"m3WaP1eKGug022n/bM+OFGgaoAJHH7l2MBfwAvIltgJZLHsRLAP16G3OotmDt2Eh\\n\"\n      + \"/A3WJt0EbD3PIPkUdt643qdfQGHgw+3ATGARVPypSYG9iOeo9oGUily4irGk5Iss\\n\"\n      + \"wgU10lViC6BHcLs3YY+D8oB7Ik0p2l9JZmJmBuArRMqztSnRiVKIteHUMN0cAfrP\\n\"\n      + \"3VrKlKjJn9amdWk0feiUwb7uWO2CunQewM26MGzM0RntdxyQZ8lsqq5e8zTsHDol\\n\"\n      + \"CrD7eyfBv+98TURnNcLDAXMqd3amAhgmedUDVTrNootKuS6fyg+AmmRjcKOZ4t4g\\n\"\n      + \"16cNALu0koCWdETGGsaeu/NX7RA/ztNme+i6ZCIFaS1Fp2ucTfWyWRMkQ9+DM3vC\\n\"\n      + \"jNPreGsiWrjoReHqRxO+dtOuQf5gSGDTKMTvlESD6xilmmE5n58MCl1bSamEY7rv\\n\"\n      + \"Lz9DeXBJLBSOaXNO+/wdJY/Ix8ADwQYc+jLhdyVOKW7k\\n\"\n      + \"-----END CERTIFICATE-----\"", "var_name": "multipleSpiffePem"}, {"original_string": "private static final String multipleUriPem = \"-----BEGIN CERTIFICATE-----\\n\"\n      + \"MIIEljCCAn6gAwIBAgIQZj1dbvJBmMVMffrhfkZk8TANBgkqhkiG9w0BAQsFADAW\\n\"\n      + \"MRQwEgYDVQQDEwtLZXl3aGl6QXV0aDAeFw0yMDA3MDcyMjI3NTVaFw0yMTEyMTYw\\n\"\n      + \"MDM3MDFaMDoxHDAaBgNVBAsTE29yZ2FuaXphdGlvbmFsLXVuaXQxGjAYBgNVBAMT\\n\"\n      + \"EW90aGVyLXByaW5jaXBhbC0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\\n\"\n      + \"AQEAsmvKfyYud7tz+Q8hsnasw8K7IHd1NhMYocwYzeHMrBu9oKvhUWm8mwHhcgIa\\n\"\n      + \"MNzRInXIbJW29IA8/icRYHR/c/TL450J1Hp4Yjxu8wwrbFa4AlP4vuPAXW19FTP5\\n\"\n      + \"7zz7hTf8Re74DxHFMRxc47WUvAiUqMaLJ2GIqe4IKoIPM8REI5WQon+zziTRKp2H\\n\"\n      + \"/SSh8kybhpzJ8ZgoOedL/8L/jTEUmMzDodnK8yceDU2cyqRk4MFM5UHsXAuAx4sG\\n\"\n      + \"IxRFTLC1q0504jMD7tFctbrOtoBec3LlHV00PIgiI6NEtUKBYv+ggZFIW3hC4x+P\\n\"\n      + \"eVkuAQpqmjebmHBvdPOaaRvDzwIDAQABo4G7MIG4MA4GA1UdDwEB/wQEAwIDuDAd\\n\"\n      + \"BgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHQYDVR0OBBYEFHRPxY6n6yOR\\n\"\n      + \"ChCZDKY01wGudNKBMB8GA1UdIwQYMBaAFFLVXTMB3G1nUWf1cqUwZaQm8YAyMEcG\\n\"\n      + \"A1UdEQRAMD6GHnNwaWZmZTovL2V4YW1wbGUub3JnL3ByaW5jaXBhbIYcaHR0cDov\\n\"\n      + \"L2V4YW1wbGUub3JnL290aGVyLXVyaTANBgkqhkiG9w0BAQsFAAOCAgEAE1xYf766\\n\"\n      + \"QZTf8akq13pxVG/ofKYXbY/OhgIxp2Wr2T2+Pkgw0Gxzw/T89eut9K+g2N78pnR+\\n\"\n      + \"VmN2VfuswhqW2kQROfpl3eC8+G+537CiB7zRDeQBd/6HyNkWtO3HWv7DGMeenT/P\\n\"\n      + \"7VEIqOxVtBJt3Wz1l0wtTtaWdEzPwflMEKfDZpmEX6PB0xKfsWQ5KohXEoxCY6yR\\n\"\n      + \"PsGx+dWpVpZzwLlS6kgfzm7lXUCECJrHksHTCxNndvxqe5oaJymA7a5bvOvq0D2N\\n\"\n      + \"YiM6G0ZsCgBwcQg2NM0ft7A7dWg6ZelK5OzvVND4ZASCHtKqVUS8+l5e9jlBJ/0r\\n\"\n      + \"Hbxa7/IuqkZQgs1AdFPb4VBYRt+PaLcfBOwmvBCI2tSxwHFmP9PVa5GP7JtUru9K\\n\"\n      + \"VvCFxAB8zIW+se7rBT8dyxtCIiSuUSNtqJAOJUaOeN/WWEfED96WLPlTYB0FACMg\\n\"\n      + \"HBCkosUnbxCSY7db7zI4XOZ/UqwjbgIG9ZIiXXIoAR53Sb8Kuomhjh0Uqx1NT9L9\\n\"\n      + \"8hPcHl/DkCxNhFcM/nEoT3XHLnqAjgLO1qBJwGFLKzO/pZ1TcKf8AcLvWckmCPa0\\n\"\n      + \"8uaakuNqL4QreRU8uFf55omMp2EzmOJXlEpgWhZmIxNqJPLJaYseg2RJSap7udVn\\n\"\n      + \"Adk5fCN+nRDuNCTprfMLelPcJd6zy2HUOsM=\\n\"\n      + \"-----END CERTIFICATE-----\";", "modifier": "private static final", "type": "String", "declarator": "multipleUriPem = \"-----BEGIN CERTIFICATE-----\\n\"\n      + \"MIIEljCCAn6gAwIBAgIQZj1dbvJBmMVMffrhfkZk8TANBgkqhkiG9w0BAQsFADAW\\n\"\n      + \"MRQwEgYDVQQDEwtLZXl3aGl6QXV0aDAeFw0yMDA3MDcyMjI3NTVaFw0yMTEyMTYw\\n\"\n      + \"MDM3MDFaMDoxHDAaBgNVBAsTE29yZ2FuaXphdGlvbmFsLXVuaXQxGjAYBgNVBAMT\\n\"\n      + \"EW90aGVyLXByaW5jaXBhbC0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\\n\"\n      + \"AQEAsmvKfyYud7tz+Q8hsnasw8K7IHd1NhMYocwYzeHMrBu9oKvhUWm8mwHhcgIa\\n\"\n      + \"MNzRInXIbJW29IA8/icRYHR/c/TL450J1Hp4Yjxu8wwrbFa4AlP4vuPAXW19FTP5\\n\"\n      + \"7zz7hTf8Re74DxHFMRxc47WUvAiUqMaLJ2GIqe4IKoIPM8REI5WQon+zziTRKp2H\\n\"\n      + \"/SSh8kybhpzJ8ZgoOedL/8L/jTEUmMzDodnK8yceDU2cyqRk4MFM5UHsXAuAx4sG\\n\"\n      + \"IxRFTLC1q0504jMD7tFctbrOtoBec3LlHV00PIgiI6NEtUKBYv+ggZFIW3hC4x+P\\n\"\n      + \"eVkuAQpqmjebmHBvdPOaaRvDzwIDAQABo4G7MIG4MA4GA1UdDwEB/wQEAwIDuDAd\\n\"\n      + \"BgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHQYDVR0OBBYEFHRPxY6n6yOR\\n\"\n      + \"ChCZDKY01wGudNKBMB8GA1UdIwQYMBaAFFLVXTMB3G1nUWf1cqUwZaQm8YAyMEcG\\n\"\n      + \"A1UdEQRAMD6GHnNwaWZmZTovL2V4YW1wbGUub3JnL3ByaW5jaXBhbIYcaHR0cDov\\n\"\n      + \"L2V4YW1wbGUub3JnL290aGVyLXVyaTANBgkqhkiG9w0BAQsFAAOCAgEAE1xYf766\\n\"\n      + \"QZTf8akq13pxVG/ofKYXbY/OhgIxp2Wr2T2+Pkgw0Gxzw/T89eut9K+g2N78pnR+\\n\"\n      + \"VmN2VfuswhqW2kQROfpl3eC8+G+537CiB7zRDeQBd/6HyNkWtO3HWv7DGMeenT/P\\n\"\n      + \"7VEIqOxVtBJt3Wz1l0wtTtaWdEzPwflMEKfDZpmEX6PB0xKfsWQ5KohXEoxCY6yR\\n\"\n      + \"PsGx+dWpVpZzwLlS6kgfzm7lXUCECJrHksHTCxNndvxqe5oaJymA7a5bvOvq0D2N\\n\"\n      + \"YiM6G0ZsCgBwcQg2NM0ft7A7dWg6ZelK5OzvVND4ZASCHtKqVUS8+l5e9jlBJ/0r\\n\"\n      + \"Hbxa7/IuqkZQgs1AdFPb4VBYRt+PaLcfBOwmvBCI2tSxwHFmP9PVa5GP7JtUru9K\\n\"\n      + \"VvCFxAB8zIW+se7rBT8dyxtCIiSuUSNtqJAOJUaOeN/WWEfED96WLPlTYB0FACMg\\n\"\n      + \"HBCkosUnbxCSY7db7zI4XOZ/UqwjbgIG9ZIiXXIoAR53Sb8Kuomhjh0Uqx1NT9L9\\n\"\n      + \"8hPcHl/DkCxNhFcM/nEoT3XHLnqAjgLO1qBJwGFLKzO/pZ1TcKf8AcLvWckmCPa0\\n\"\n      + \"8uaakuNqL4QreRU8uFf55omMp2EzmOJXlEpgWhZmIxNqJPLJaYseg2RJSap7udVn\\n\"\n      + \"Adk5fCN+nRDuNCTprfMLelPcJd6zy2HUOsM=\\n\"\n      + \"-----END CERTIFICATE-----\"", "var_name": "multipleUriPem"}, {"original_string": "@Mock ClientAuthTypeConfig clientAuthTypeConfig;", "modifier": "@Mock", "type": "ClientAuthTypeConfig", "declarator": "clientAuthTypeConfig", "var_name": "clientAuthTypeConfig"}, {"original_string": "@Mock ClientAuthConfig clientAuthConfig;", "modifier": "@Mock", "type": "ClientAuthConfig", "declarator": "clientAuthConfig", "var_name": "clientAuthConfig"}, {"original_string": "@Mock ClientDAO clientDAO;", "modifier": "@Mock", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "ClientAuthenticator authenticator;", "modifier": "", "type": "ClientAuthenticator", "declarator": "authenticator", "var_name": "authenticator"}], "file": "server/src/test/java/keywhiz/service/providers/ClientAuthenticatorTest.java"}, "test_case": {"identifier": "rejectsCertMatchingMultipleClients", "parameters": "()", "modifiers": "@Test(expected = NotAuthorizedException.class) public", "return": "void", "body": "@Test(expected = NotAuthorizedException.class)\n  public void rejectsCertMatchingMultipleClients() {\n    ApiDate now = ApiDate.now();\n    Client otherClient =\n        new Client(2345L, \"other-client\", \"desc\", null, now, \"automatic\", now, \"automatic\",\n            null, null, true, false\n        );\n\n    when(clientDAO.getClientByName(clientName)).thenReturn(Optional.of(client));\n    when(clientDAO.getClientBySpiffeId(clientSpiffe)).thenReturn(Optional.of(otherClient));\n\n    authenticator.authenticate(certPrincipal, true);\n  }", "signature": "void rejectsCertMatchingMultipleClients()", "full_signature": "@Test(expected = NotAuthorizedException.class) public void rejectsCertMatchingMultipleClients()", "class_method_signature": "ClientAuthenticatorTest.rejectsCertMatchingMultipleClients()", "testcase": true, "constructor": false, "invocations": ["now", "thenReturn", "when", "getClientByName", "of", "thenReturn", "when", "getClientBySpiffeId", "of", "authenticate"]}, "focal_class": {"identifier": "ClientAuthenticator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClientAuthenticator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClientAuthenticator.class)", "var_name": "logger"}, {"original_string": "private static final Integer URINAME_SAN = 6;", "modifier": "private static final", "type": "Integer", "declarator": "URINAME_SAN = 6", "var_name": "URINAME_SAN"}, {"original_string": "private static final String SPIFFE_SCHEME = \"spiffe://\";", "modifier": "private static final", "type": "String", "declarator": "SPIFFE_SCHEME = \"spiffe://\"", "var_name": "SPIFFE_SCHEME"}, {"original_string": "private final ClientDAO clientDAOReadWrite;", "modifier": "private final", "type": "ClientDAO", "declarator": "clientDAOReadWrite", "var_name": "clientDAOReadWrite"}, {"original_string": "private final ClientDAO clientDAOReadOnly;", "modifier": "private final", "type": "ClientDAO", "declarator": "clientDAOReadOnly", "var_name": "clientDAOReadOnly"}, {"original_string": "private final ClientAuthConfig clientAuthConfig;", "modifier": "private final", "type": "ClientAuthConfig", "declarator": "clientAuthConfig", "var_name": "clientAuthConfig"}], "methods": [{"identifier": "ClientAuthenticator", "parameters": "(\n      ClientDAO clientDAOReadWrite,\n      ClientDAO clientDAOReadOnly,\n      ClientAuthConfig clientAuthConfig)", "modifiers": "public", "return": "", "signature": " ClientAuthenticator(\n      ClientDAO clientDAOReadWrite,\n      ClientDAO clientDAOReadOnly,\n      ClientAuthConfig clientAuthConfig)", "full_signature": "public  ClientAuthenticator(\n      ClientDAO clientDAOReadWrite,\n      ClientDAO clientDAOReadOnly,\n      ClientAuthConfig clientAuthConfig)", "class_method_signature": "ClientAuthenticator.ClientAuthenticator(\n      ClientDAO clientDAOReadWrite,\n      ClientDAO clientDAOReadOnly,\n      ClientAuthConfig clientAuthConfig)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(Principal principal, boolean createMissingClient)", "modifiers": "public", "return": "Optional<Client>", "signature": "Optional<Client> authenticate(Principal principal, boolean createMissingClient)", "full_signature": "public Optional<Client> authenticate(Principal principal, boolean createMissingClient)", "class_method_signature": "ClientAuthenticator.authenticate(Principal principal, boolean createMissingClient)", "testcase": false, "constructor": false}, {"identifier": "handleMissingClient", "parameters": "(boolean createMissingClient, String name,\n      Optional<URI> spiffeId)", "modifiers": "private", "return": "Optional<Client>", "signature": "Optional<Client> handleMissingClient(boolean createMissingClient, String name,\n      Optional<URI> spiffeId)", "full_signature": "private Optional<Client> handleMissingClient(boolean createMissingClient, String name,\n      Optional<URI> spiffeId)", "class_method_signature": "ClientAuthenticator.handleMissingClient(boolean createMissingClient, String name,\n      Optional<URI> spiffeId)", "testcase": false, "constructor": false}, {"identifier": "getClientName", "parameters": "(Principal principal)", "modifiers": "static", "return": "Optional<String>", "signature": "Optional<String> getClientName(Principal principal)", "full_signature": "static Optional<String> getClientName(Principal principal)", "class_method_signature": "ClientAuthenticator.getClientName(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getSpiffeId", "parameters": "(Principal principal)", "modifiers": "static", "return": "Optional<URI>", "signature": "Optional<URI> getSpiffeId(Principal principal)", "full_signature": "static Optional<URI> getSpiffeId(Principal principal)", "class_method_signature": "ClientAuthenticator.getSpiffeId(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getSpiffeIdFromCertificate", "parameters": "(X509Certificate cert)", "modifiers": "static", "return": "Optional<URI>", "signature": "Optional<URI> getSpiffeIdFromCertificate(X509Certificate cert)", "full_signature": "static Optional<URI> getSpiffeIdFromCertificate(X509Certificate cert)", "class_method_signature": "ClientAuthenticator.getSpiffeIdFromCertificate(X509Certificate cert)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/providers/ClientAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(Principal principal, boolean createMissingClient)", "modifiers": "public", "return": "Optional<Client>", "body": "public Optional<Client> authenticate(Principal principal, boolean createMissingClient) {\n    // Try to retrieve clients based on the client name and SPIFFE ID\n    Optional<String> possibleClientName = getClientName(principal);\n    Optional<URI> possibleClientSpiffeId = getSpiffeId(principal);\n\n    Optional<Client> possibleClientFromName = possibleClientName.flatMap((name) -> {\n      if (clientAuthConfig.typeConfig().useCommonName()) {\n        return clientDAOReadOnly.getClientByName(name);\n      } else {\n        return Optional.empty();\n      }\n    });\n\n    Optional<Client> possibleClientFromSpiffeId = possibleClientSpiffeId.flatMap((spiffeId) -> {\n      if (clientAuthConfig.typeConfig().useSpiffeId()) {\n        return clientDAOReadOnly.getClientBySpiffeId(spiffeId);\n      } else {\n        return Optional.empty();\n      }\n    });\n\n    // If the name and SPIFFE id both defined a client, make sure that they defined the same\n    // client! (Note that if retrieving clients by common name or SPIFFE ID is disabled, this\n    // check will not reject a certificate with a mismatched CN and SPIFFE URI.)\n    if (possibleClientFromName.isPresent() && possibleClientFromSpiffeId.isPresent()) {\n      if (!possibleClientFromName.get().equals(possibleClientFromSpiffeId.get())) {\n        throw new NotAuthorizedException(format(\n            \"Input principal's CN and SPIFFE ID correspond to different clients! (cn = %s, spiffe = %s)\",\n            possibleClientFromName.get().getName(), possibleClientFromSpiffeId.get().getName()));\n      }\n    } else if (possibleClientFromName.isEmpty() && possibleClientFromSpiffeId.isEmpty()) {\n      // Create missing clients if configured to do so (client name must be present)\n      return handleMissingClient(createMissingClient, possibleClientName.orElse(\"\"),\n          possibleClientSpiffeId);\n    }\n\n    // Retrieve whichever of the clients is set (if both are present, the earlier check guarantees\n    // that they contain the same client).\n    Client client = possibleClientFromName\n        .or(() -> possibleClientFromSpiffeId)\n        .orElseThrow(() -> new IllegalStateException(\n            \"Unable to identify client, and fallback code in server did not handle this case\"));\n\n    // Record that this client has been retrieved\n    clientDAOReadWrite.sawClient(client, principal);\n    if (client.isEnabled()) {\n      return Optional.of(client);\n    } else {\n      logger.warn(\"Client {} authenticated but disabled via DB\", client);\n      return Optional.empty();\n    }\n  }", "signature": "Optional<Client> authenticate(Principal principal, boolean createMissingClient)", "full_signature": "public Optional<Client> authenticate(Principal principal, boolean createMissingClient)", "class_method_signature": "ClientAuthenticator.authenticate(Principal principal, boolean createMissingClient)", "testcase": false, "constructor": false, "invocations": ["getClientName", "getSpiffeId", "flatMap", "useCommonName", "typeConfig", "getClientByName", "empty", "flatMap", "useSpiffeId", "typeConfig", "getClientBySpiffeId", "empty", "isPresent", "isPresent", "equals", "get", "get", "format", "getName", "get", "getName", "get", "isEmpty", "isEmpty", "handleMissingClient", "orElse", "orElseThrow", "or", "sawClient", "isEnabled", "of", "warn", "empty"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}