{"test_class": {"identifier": "PrettyDisplayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/utils/PrettyDisplayUtilsTest.java"}, "test_case": {"identifier": "test2DList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test2DList() {\n        List<String> l = Arrays.asList(\"123\", \"456\", \"789\", \"1011\", \"abc\", \"adf\", \"efa\");\n        List<List<String>> ll = new ArrayList<>();\n        for (int i = 0; i < 10; i += 1) {\n            ll.add(l);\n        }\n        System.out.println(displayList(ll, true));\n    }", "signature": "void test2DList()", "full_signature": "@Test public void test2DList()", "class_method_signature": "PrettyDisplayUtilsTest.test2DList()", "testcase": true, "constructor": false, "invocations": ["asList", "add", "println", "displayList"]}, "focal_class": {"identifier": "PrettyDisplayUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static int LIST_NUM_EDGE_ITEMS = 3;", "modifier": "static", "type": "int", "declarator": "LIST_NUM_EDGE_ITEMS = 3", "var_name": "LIST_NUM_EDGE_ITEMS"}, {"original_string": "static int MAP_NUM_EDGE_ITEMS = Integer.MAX_VALUE << 1;", "modifier": "static", "type": "int", "declarator": "MAP_NUM_EDGE_ITEMS = Integer.MAX_VALUE << 1", "var_name": "MAP_NUM_EDGE_ITEMS"}, {"original_string": "static String DEFAULT_DECIMAL_FORMAT = \"#.####\";", "modifier": "static", "type": "String", "declarator": "DEFAULT_DECIMAL_FORMAT = \"#.####\"", "var_name": "DEFAULT_DECIMAL_FORMAT"}, {"original_string": "static int DEFAULT_LINE_WIDTH = 75;", "modifier": "static", "type": "int", "declarator": "DEFAULT_LINE_WIDTH = 75", "var_name": "DEFAULT_LINE_WIDTH"}], "methods": [{"identifier": "display", "parameters": "(T v)", "modifiers": "public static", "return": "String", "signature": "String display(T v)", "full_signature": "public static String display(T v)", "class_method_signature": "PrettyDisplayUtils.display(T v)", "testcase": false, "constructor": false}, {"identifier": "display", "parameters": "(T v, boolean useRawDoubleFormat)", "modifiers": "public static", "return": "String", "signature": "String display(T v, boolean useRawDoubleFormat)", "full_signature": "public static String display(T v, boolean useRawDoubleFormat)", "class_method_signature": "PrettyDisplayUtils.display(T v, boolean useRawDoubleFormat)", "testcase": false, "constructor": false}, {"identifier": "displayDouble", "parameters": "(double v, String format)", "modifiers": "public static", "return": "String", "signature": "String displayDouble(double v, String format)", "full_signature": "public static String displayDouble(double v, String format)", "class_method_signature": "PrettyDisplayUtils.displayDouble(double v, String format)", "testcase": false, "constructor": false}, {"identifier": "displayDouble", "parameters": "(double v, String format, boolean useRawDoubleFormat)", "modifiers": "public static", "return": "String", "signature": "String displayDouble(double v, String format, boolean useRawDoubleFormat)", "full_signature": "public static String displayDouble(double v, String format, boolean useRawDoubleFormat)", "class_method_signature": "PrettyDisplayUtils.displayDouble(double v, String format, boolean useRawDoubleFormat)", "testcase": false, "constructor": false}, {"identifier": "displayDouble", "parameters": "(double v)", "modifiers": "public static", "return": "String", "signature": "String displayDouble(double v)", "full_signature": "public static String displayDouble(double v)", "class_method_signature": "PrettyDisplayUtils.displayDouble(double v)", "testcase": false, "constructor": false}, {"identifier": "displayDouble", "parameters": "(double v, boolean useRawDoubleFormat)", "modifiers": "public static", "return": "String", "signature": "String displayDouble(double v, boolean useRawDoubleFormat)", "full_signature": "public static String displayDouble(double v, boolean useRawDoubleFormat)", "class_method_signature": "PrettyDisplayUtils.displayDouble(double v, boolean useRawDoubleFormat)", "testcase": false, "constructor": false}, {"identifier": "displayList", "parameters": "(List<T> list, int numEdgeItems, boolean linebreak)", "modifiers": "public static", "return": "String", "signature": "String displayList(List<T> list, int numEdgeItems, boolean linebreak)", "full_signature": "public static String displayList(List<T> list, int numEdgeItems, boolean linebreak)", "class_method_signature": "PrettyDisplayUtils.displayList(List<T> list, int numEdgeItems, boolean linebreak)", "testcase": false, "constructor": false}, {"identifier": "displayList", "parameters": "(List<T> list, boolean linebreak)", "modifiers": "public static", "return": "String", "signature": "String displayList(List<T> list, boolean linebreak)", "full_signature": "public static String displayList(List<T> list, boolean linebreak)", "class_method_signature": "PrettyDisplayUtils.displayList(List<T> list, boolean linebreak)", "testcase": false, "constructor": false}, {"identifier": "displayList", "parameters": "(List<T> list)", "modifiers": "public static", "return": "String", "signature": "String displayList(List<T> list)", "full_signature": "public static String displayList(List<T> list)", "class_method_signature": "PrettyDisplayUtils.displayList(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "displayDenseVector", "parameters": "(DenseVector dv)", "modifiers": "public static", "return": "String", "signature": "String displayDenseVector(DenseVector dv)", "full_signature": "public static String displayDenseVector(DenseVector dv)", "class_method_signature": "PrettyDisplayUtils.displayDenseVector(DenseVector dv)", "testcase": false, "constructor": false}, {"identifier": "displayDenseMatrix", "parameters": "(DenseMatrix dm)", "modifiers": "public static", "return": "String", "signature": "String displayDenseMatrix(DenseMatrix dm)", "full_signature": "public static String displayDenseMatrix(DenseMatrix dm)", "class_method_signature": "PrettyDisplayUtils.displayDenseMatrix(DenseMatrix dm)", "testcase": false, "constructor": false}, {"identifier": "displayMap", "parameters": "(Map<?, ?> m, int numEdgeItems, boolean linebreak)", "modifiers": "public static", "return": "String", "signature": "String displayMap(Map<?, ?> m, int numEdgeItems, boolean linebreak)", "full_signature": "public static String displayMap(Map<?, ?> m, int numEdgeItems, boolean linebreak)", "class_method_signature": "PrettyDisplayUtils.displayMap(Map<?, ?> m, int numEdgeItems, boolean linebreak)", "testcase": false, "constructor": false}, {"identifier": "displayMap", "parameters": "(Map<?, ?> m)", "modifiers": "public static", "return": "String", "signature": "String displayMap(Map<?, ?> m)", "full_signature": "public static String displayMap(Map<?, ?> m)", "class_method_signature": "PrettyDisplayUtils.displayMap(Map<?, ?> m)", "testcase": false, "constructor": false}, {"identifier": "displayTable", "parameters": "(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems)", "modifiers": "public static", "return": "String", "signature": "String displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems)", "full_signature": "public static String displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems)", "class_method_signature": "PrettyDisplayUtils.displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems)", "testcase": false, "constructor": false}, {"identifier": "displayTable", "parameters": "(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems,\n                                          boolean useRawDoubleFormat)", "modifiers": "public static", "return": "String", "signature": "String displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems,\n                                          boolean useRawDoubleFormat)", "full_signature": "public static String displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems,\n                                          boolean useRawDoubleFormat)", "class_method_signature": "PrettyDisplayUtils.displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName,\n                                          int nRowEdgeItems, int nColEdgeItems,\n                                          boolean useRawDoubleFormat)", "testcase": false, "constructor": false}, {"identifier": "displayTable", "parameters": "(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName)", "modifiers": "public static", "return": "String", "signature": "String displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName)", "full_signature": "public static String displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName)", "class_method_signature": "PrettyDisplayUtils.displayTable(T[][] table, int nRows, int nCols,\n                                          String[] rowNames, String[] colNames, String cornerName)", "testcase": false, "constructor": false}, {"identifier": "indentLines", "parameters": "(String text, int indentSize)", "modifiers": "public static", "return": "String", "signature": "String indentLines(String text, int indentSize)", "full_signature": "public static String indentLines(String text, int indentSize)", "class_method_signature": "PrettyDisplayUtils.indentLines(String text, int indentSize)", "testcase": false, "constructor": false}, {"identifier": "prependStringWithIndent", "parameters": "(String text, String s)", "modifiers": "public static", "return": "String", "signature": "String prependStringWithIndent(String text, String s)", "full_signature": "public static String prependStringWithIndent(String text, String s)", "class_method_signature": "PrettyDisplayUtils.prependStringWithIndent(String text, String s)", "testcase": false, "constructor": false}, {"identifier": "displayHeadline", "parameters": "(String head, Character padChar)", "modifiers": "public static", "return": "String", "signature": "String displayHeadline(String head, Character padChar)", "full_signature": "public static String displayHeadline(String head, Character padChar)", "class_method_signature": "PrettyDisplayUtils.displayHeadline(String head, Character padChar)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/utils/PrettyDisplayUtils.java"}, "focal_method": {"identifier": "displayList", "parameters": "(List<T> list, int numEdgeItems, boolean linebreak)", "modifiers": "public static", "return": "String", "body": "public static <T> String displayList(List<T> list, int numEdgeItems, boolean linebreak) {\n        StringBuilder sbd = new StringBuilder();\n        String delimiter = linebreak ? \",\\n\" : \", \";\n        if (list.size() <= 2 * numEdgeItems) {\n            for (int i = 0; i < list.size(); i += 1) {\n                sbd.append(display(list.get(i)));\n                if (i < list.size() - 1) {\n                    sbd.append(delimiter);\n                }\n            }\n        } else {\n            for (int i = 0; i < numEdgeItems; i += 1) {\n                sbd.append(display(list.get(i)));\n                sbd.append(delimiter);\n            }\n            sbd.append(\"...\");\n            sbd.append(delimiter);\n            for (int i = list.size() - numEdgeItems; i < list.size(); i += 1) {\n                sbd.append(display(list.get(i)));\n                if (i < list.size() - 1) {\n                    sbd.append(delimiter);\n                }\n            }\n        }\n        return prependStringWithIndent(sbd.toString(), \"[\") + \"]\";\n    }", "signature": "String displayList(List<T> list, int numEdgeItems, boolean linebreak)", "full_signature": "public static String displayList(List<T> list, int numEdgeItems, boolean linebreak)", "class_method_signature": "PrettyDisplayUtils.displayList(List<T> list, int numEdgeItems, boolean linebreak)", "testcase": false, "constructor": false, "invocations": ["size", "size", "append", "display", "get", "size", "append", "append", "display", "get", "append", "append", "append", "size", "size", "append", "display", "get", "size", "append", "prependStringWithIndent", "toString"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}