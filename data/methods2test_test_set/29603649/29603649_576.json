{"test_class": {"identifier": "DomBasedStubDescriptorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DomBasedStubDescriptorFactory underTest;", "modifier": "@InjectMocks\n    private", "type": "DomBasedStubDescriptorFactory", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private InputStream inputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private XmlDocumentBuilder xmlDocumentBuilder;", "modifier": "@Mock\n    private", "type": "XmlDocumentBuilder", "declarator": "xmlDocumentBuilder", "var_name": "xmlDocumentBuilder"}, {"original_string": "@Mock\n    private StubDescriptorValidator stubDescriptorValidator1;", "modifier": "@Mock\n    private", "type": "StubDescriptorValidator", "declarator": "stubDescriptorValidator1", "var_name": "stubDescriptorValidator1"}, {"original_string": "@Mock\n    private StubDescriptorValidator stubDescriptorValidator2;", "modifier": "@Mock\n    private", "type": "StubDescriptorValidator", "declarator": "stubDescriptorValidator2", "var_name": "stubDescriptorValidator2"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private DocumentBuilderException documentBuilderException;", "modifier": "@Mock\n    private", "type": "DocumentBuilderException", "declarator": "documentBuilderException", "var_name": "documentBuilderException"}, {"original_string": "@Mock\n    private StubDescriptorParser descriptorBuilder;", "modifier": "@Mock\n    private", "type": "StubDescriptorParser", "declarator": "descriptorBuilder", "var_name": "descriptorBuilder"}, {"original_string": "@Mock\n    private StubDescriptor stubDescriptor;", "modifier": "@Mock\n    private", "type": "StubDescriptor", "declarator": "stubDescriptor", "var_name": "stubDescriptor"}, {"original_string": "@Mock\n    private StubResourceHolderUpdater stubResourceHolderUpdater;", "modifier": "@Mock\n    private", "type": "StubResourceHolderUpdater", "declarator": "stubResourceHolderUpdater", "var_name": "stubResourceHolderUpdater"}, {"original_string": "@Mock\n    private StubConfigurationAccess configurationAccess;", "modifier": "@Mock\n    private", "type": "StubConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Mock\n    private StubConfigSchema stubConfigSchema;", "modifier": "@Mock\n    private", "type": "StubConfigSchema", "declarator": "stubConfigSchema", "var_name": "stubConfigSchema"}, {"original_string": "private final List<StubDescriptorValidator> descriptorValidators = new ArrayList<>();", "modifier": "private final", "type": "List<StubDescriptorValidator>", "declarator": "descriptorValidators = new ArrayList<>()", "var_name": "descriptorValidators"}, {"original_string": "@Mock\n    private Schema schema;", "modifier": "@Mock\n    private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private StubDescriptorAttributes attributes;", "modifier": "private", "type": "StubDescriptorAttributes", "declarator": "attributes", "var_name": "attributes"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/DomBasedStubDescriptorFactoryTest.java"}, "test_case": {"identifier": "testBuildStubDescriptorShouldThrowExceptionWhenDocumentBuildingFails", "parameters": "()", "modifiers": "@Test(expectedExceptions = DescriptorCannotBeParsedException.class) public final", "return": "void", "body": "@Test(expectedExceptions = DescriptorCannotBeParsedException.class)\n    public final void testBuildStubDescriptorShouldThrowExceptionWhenDocumentBuildingFails() throws Exception {\n        //GIVEN\n        given(xmlDocumentBuilder.buildDocument(inputStream, schema)).willThrow(documentBuilderException);\n        //WHEN\n        underTest.buildStubDescriptor(inputStream);\n        //THEN exception thrown\n    }", "signature": "void testBuildStubDescriptorShouldThrowExceptionWhenDocumentBuildingFails()", "full_signature": "@Test(expectedExceptions = DescriptorCannotBeParsedException.class) public final void testBuildStubDescriptorShouldThrowExceptionWhenDocumentBuildingFails()", "class_method_signature": "DomBasedStubDescriptorFactoryTest.testBuildStubDescriptorShouldThrowExceptionWhenDocumentBuildingFails()", "testcase": true, "constructor": false, "invocations": ["willThrow", "given", "buildDocument", "buildStubDescriptor"]}, "focal_class": {"identifier": "DomBasedStubDescriptorFactory", "superclass": "", "interfaces": "implements StubDescriptorFactory", "fields": [{"original_string": "@Autowired\n    private XmlDocumentBuilder xmlDocumentBuilder;", "modifier": "@Autowired\n    private", "type": "XmlDocumentBuilder", "declarator": "xmlDocumentBuilder", "var_name": "xmlDocumentBuilder"}, {"original_string": "@Autowired\n    private List<StubDescriptorValidator> descriptorValidators;", "modifier": "@Autowired\n    private", "type": "List<StubDescriptorValidator>", "declarator": "descriptorValidators", "var_name": "descriptorValidators"}, {"original_string": "@Autowired\n    private StubDescriptorParser descriptorParser;", "modifier": "@Autowired\n    private", "type": "StubDescriptorParser", "declarator": "descriptorParser", "var_name": "descriptorParser"}, {"original_string": "@Autowired\n    private StubResourceHolderUpdater stubResourceHolderUpdater;", "modifier": "@Autowired\n    private", "type": "StubResourceHolderUpdater", "declarator": "stubResourceHolderUpdater", "var_name": "stubResourceHolderUpdater"}, {"original_string": "@Autowired\n    private StubConfigurationAccess configurationAccess;", "modifier": "@Autowired\n    private", "type": "StubConfigurationAccess", "declarator": "configurationAccess", "var_name": "configurationAccess"}, {"original_string": "@Autowired\n    private StubConfigSchema stubConfigSchema;", "modifier": "@Autowired\n    private", "type": "StubConfigSchema", "declarator": "stubConfigSchema", "var_name": "stubConfigSchema"}], "methods": [{"identifier": "buildStubDescriptor", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public synchronized", "return": "StubDescriptor", "signature": "StubDescriptor buildStubDescriptor(final InputStream inputStream)", "full_signature": "@Override public synchronized StubDescriptor buildStubDescriptor(final InputStream inputStream)", "class_method_signature": "DomBasedStubDescriptorFactory.buildStubDescriptor(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final Document document)", "modifiers": "private", "return": "void", "signature": "void validate(final Document document)", "full_signature": "private void validate(final Document document)", "class_method_signature": "DomBasedStubDescriptorFactory.validate(final Document document)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/DomBasedStubDescriptorFactory.java"}, "focal_method": {"identifier": "buildStubDescriptor", "parameters": "(final InputStream inputStream)", "modifiers": "@Override public synchronized", "return": "StubDescriptor", "body": "@Override\n    public synchronized StubDescriptor buildStubDescriptor(final InputStream inputStream) {\n        try {\n            Document document = xmlDocumentBuilder.buildDocument(inputStream, stubConfigSchema.getSchema());\n            validate(document);\n            stubResourceHolderUpdater.initializeTemporaryResourceHolder();\n            configurationAccess.setProperties();\n            StubDescriptor stubDescriptor = descriptorParser.parse(document);\n            stubResourceHolderUpdater.updateResourceHolder();\n            stubResourceHolderUpdater.clearTemporaryResourceHolder();\n            StubDescriptorAttributes attributes = stubDescriptor.getAttributes();\n            stubResourceHolderUpdater.addDocumentToResourceHolder(attributes.getGroupName(), document);\n            return stubDescriptor;\n        } catch (DocumentBuilderException e) {\n            throw new DescriptorCannotBeParsedException(\"Stub descriptor cannot be parsed.\", e);\n        }\n    }", "signature": "StubDescriptor buildStubDescriptor(final InputStream inputStream)", "full_signature": "@Override public synchronized StubDescriptor buildStubDescriptor(final InputStream inputStream)", "class_method_signature": "DomBasedStubDescriptorFactory.buildStubDescriptor(final InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["buildDocument", "getSchema", "validate", "initializeTemporaryResourceHolder", "setProperties", "parse", "updateResourceHolder", "clearTemporaryResourceHolder", "getAttributes", "addDocumentToResourceHolder", "getGroupName"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}