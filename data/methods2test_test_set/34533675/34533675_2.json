{"test_class": {"identifier": "CircleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static GeometryFactory geomFact = new GeometryFactory();", "modifier": "private static", "type": "GeometryFactory", "declarator": "geomFact = new GeometryFactory()", "var_name": "geomFact"}, {"original_string": "private static WKTReader wktReader = new WKTReader();", "modifier": "private static", "type": "WKTReader", "declarator": "wktReader = new WKTReader()", "var_name": "wktReader"}], "file": "core/src/test/java/org/datasyslab/geospark/geometryObjects/CircleTest.java"}, "test_case": {"identifier": "testGetRadius", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRadius()\n            throws Exception\n    {\n        Circle circle = new Circle(makePoint(0.0, 0.0), 0.1);\n        assertEquals(0.1, circle.getRadius(), 0.01);\n    }", "signature": "void testGetRadius()", "full_signature": "@Test public void testGetRadius()", "class_method_signature": "CircleTest.testGetRadius()", "testcase": true, "constructor": false, "invocations": ["makePoint", "assertEquals", "getRadius"]}, "focal_class": {"identifier": "Circle", "superclass": "extends Geometry", "interfaces": "", "fields": [{"original_string": "private Geometry centerGeometry;", "modifier": "private", "type": "Geometry", "declarator": "centerGeometry", "var_name": "centerGeometry"}, {"original_string": "private Coordinate centerPoint;", "modifier": "private", "type": "Coordinate", "declarator": "centerPoint", "var_name": "centerPoint"}, {"original_string": "private Double radius;", "modifier": "private", "type": "Double", "declarator": "radius", "var_name": "radius"}, {"original_string": "private Envelope MBR;", "modifier": "private", "type": "Envelope", "declarator": "MBR", "var_name": "MBR"}], "methods": [{"identifier": "getCenterGeometry", "parameters": "()", "modifiers": "public", "return": "Geometry", "signature": "Geometry getCenterGeometry()", "full_signature": "public Geometry getCenterGeometry()", "class_method_signature": "Circle.getCenterGeometry()", "testcase": false, "constructor": false}, {"identifier": "Circle", "parameters": "(Geometry centerGeometry, Double givenRadius)", "modifiers": "public", "return": "", "signature": " Circle(Geometry centerGeometry, Double givenRadius)", "full_signature": "public  Circle(Geometry centerGeometry, Double givenRadius)", "class_method_signature": "Circle.Circle(Geometry centerGeometry, Double givenRadius)", "testcase": false, "constructor": true}, {"identifier": "getCenterPoint", "parameters": "()", "modifiers": "public", "return": "Coordinate", "signature": "Coordinate getCenterPoint()", "full_signature": "public Coordinate getCenterPoint()", "class_method_signature": "Circle.getCenterPoint()", "testcase": false, "constructor": false}, {"identifier": "getRadius", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getRadius()", "full_signature": "public Double getRadius()", "class_method_signature": "Circle.getRadius()", "testcase": false, "constructor": false}, {"identifier": "setRadius", "parameters": "(Double givenRadius)", "modifiers": "public", "return": "void", "signature": "void setRadius(Double givenRadius)", "full_signature": "public void setRadius(Double givenRadius)", "class_method_signature": "Circle.setRadius(Double givenRadius)", "testcase": false, "constructor": false}, {"identifier": "covers", "parameters": "(Geometry other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean covers(Geometry other)", "full_signature": "@Override public boolean covers(Geometry other)", "class_method_signature": "Circle.covers(Geometry other)", "testcase": false, "constructor": false}, {"identifier": "covers", "parameters": "(LineString lineString)", "modifiers": "private", "return": "boolean", "signature": "boolean covers(LineString lineString)", "full_signature": "private boolean covers(LineString lineString)", "class_method_signature": "Circle.covers(LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "covers", "parameters": "(Point point)", "modifiers": "private", "return": "boolean", "signature": "boolean covers(Point point)", "full_signature": "private boolean covers(Point point)", "class_method_signature": "Circle.covers(Point point)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Geometry other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean intersects(Geometry other)", "full_signature": "@Override public boolean intersects(Geometry other)", "class_method_signature": "Circle.intersects(Geometry other)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Polygon polygon)", "modifiers": "private", "return": "boolean", "signature": "boolean intersects(Polygon polygon)", "full_signature": "private boolean intersects(Polygon polygon)", "class_method_signature": "Circle.intersects(Polygon polygon)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(LineString lineString)", "modifiers": "private", "return": "boolean", "signature": "boolean intersects(LineString lineString)", "full_signature": "private boolean intersects(LineString lineString)", "class_method_signature": "Circle.intersects(LineString lineString)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Point start, Point end)", "modifiers": "private", "return": "boolean", "signature": "boolean intersects(Point start, Point end)", "full_signature": "private boolean intersects(Point start, Point end)", "class_method_signature": "Circle.intersects(Point start, Point end)", "testcase": false, "constructor": false}, {"identifier": "getGeometryType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getGeometryType()", "full_signature": "@Override public String getGeometryType()", "class_method_signature": "Circle.getGeometryType()", "testcase": false, "constructor": false}, {"identifier": "getCoordinate", "parameters": "()", "modifiers": "@Override public", "return": "Coordinate", "signature": "Coordinate getCoordinate()", "full_signature": "@Override public Coordinate getCoordinate()", "class_method_signature": "Circle.getCoordinate()", "testcase": false, "constructor": false}, {"identifier": "getCoordinates", "parameters": "()", "modifiers": "@Override public", "return": "Coordinate[]", "signature": "Coordinate[] getCoordinates()", "full_signature": "@Override public Coordinate[] getCoordinates()", "class_method_signature": "Circle.getCoordinates()", "testcase": false, "constructor": false}, {"identifier": "getNumPoints", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumPoints()", "full_signature": "@Override public int getNumPoints()", "class_method_signature": "Circle.getNumPoints()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "Circle.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getDimension", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDimension()", "full_signature": "@Override public int getDimension()", "class_method_signature": "Circle.getDimension()", "testcase": false, "constructor": false}, {"identifier": "getBoundary", "parameters": "()", "modifiers": "@Override public", "return": "Geometry", "signature": "Geometry getBoundary()", "full_signature": "@Override public Geometry getBoundary()", "class_method_signature": "Circle.getBoundary()", "testcase": false, "constructor": false}, {"identifier": "getBoundaryDimension", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBoundaryDimension()", "full_signature": "@Override public int getBoundaryDimension()", "class_method_signature": "Circle.getBoundaryDimension()", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "()", "modifiers": "@Override public", "return": "Geometry", "signature": "Geometry reverse()", "full_signature": "@Override public Geometry reverse()", "class_method_signature": "Circle.reverse()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "Circle.clone()", "testcase": false, "constructor": false}, {"identifier": "equalsExact", "parameters": "(Geometry g, double tolerance)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equalsExact(Geometry g, double tolerance)", "full_signature": "@Override public boolean equalsExact(Geometry g, double tolerance)", "class_method_signature": "Circle.equalsExact(Geometry g, double tolerance)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(CoordinateFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void apply(CoordinateFilter filter)", "full_signature": "@Override public void apply(CoordinateFilter filter)", "class_method_signature": "Circle.apply(CoordinateFilter filter)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(CoordinateSequenceFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void apply(CoordinateSequenceFilter filter)", "full_signature": "@Override public void apply(CoordinateSequenceFilter filter)", "class_method_signature": "Circle.apply(CoordinateSequenceFilter filter)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(GeometryFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void apply(GeometryFilter filter)", "full_signature": "@Override public void apply(GeometryFilter filter)", "class_method_signature": "Circle.apply(GeometryFilter filter)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(GeometryComponentFilter filter)", "modifiers": "@Override public", "return": "void", "signature": "void apply(GeometryComponentFilter filter)", "full_signature": "@Override public void apply(GeometryComponentFilter filter)", "class_method_signature": "Circle.apply(GeometryComponentFilter filter)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void normalize()", "full_signature": "@Override public void normalize()", "class_method_signature": "Circle.normalize()", "testcase": false, "constructor": false}, {"identifier": "computeEnvelopeInternal", "parameters": "()", "modifiers": "@Override protected", "return": "Envelope", "signature": "Envelope computeEnvelopeInternal()", "full_signature": "@Override protected Envelope computeEnvelopeInternal()", "class_method_signature": "Circle.computeEnvelopeInternal()", "testcase": false, "constructor": false}, {"identifier": "compareToSameClass", "parameters": "(Object other)", "modifiers": "@Override protected", "return": "int", "signature": "int compareToSameClass(Object other)", "full_signature": "@Override protected int compareToSameClass(Object other)", "class_method_signature": "Circle.compareToSameClass(Object other)", "testcase": false, "constructor": false}, {"identifier": "compareToSameClass", "parameters": "(Object other, CoordinateSequenceComparator comp)", "modifiers": "@Override protected", "return": "int", "signature": "int compareToSameClass(Object other, CoordinateSequenceComparator comp)", "full_signature": "@Override protected int compareToSameClass(Object other, CoordinateSequenceComparator comp)", "class_method_signature": "Circle.compareToSameClass(Object other, CoordinateSequenceComparator comp)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Circle.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/datasyslab/geospark/geometryObjects/Circle.java"}, "focal_method": {"identifier": "getRadius", "parameters": "()", "modifiers": "public", "return": "Double", "body": "public Double getRadius()\n    {\n        return radius;\n    }", "signature": "Double getRadius()", "full_signature": "public Double getRadius()", "class_method_signature": "Circle.getRadius()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 34533675, "url": "https://github.com/DataSystemsLab/GeoSpark", "language": "Java", "is_fork": false, "fork_count": 357, "stargazer_count": 703, "size": 459019, "license": "licensed"}}