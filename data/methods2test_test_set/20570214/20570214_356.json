{"test_class": {"identifier": "HybridEncryptFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/hybrid/HybridEncryptFactoryTest.java"}, "test_case": {"identifier": "testBasicEncryption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBasicEncryption() throws Exception {\n    EllipticCurveType curve = EllipticCurveType.NIST_P384;\n    HashType hashType = HashType.SHA256;\n    EcPointFormat primaryPointFormat = EcPointFormat.UNCOMPRESSED;\n    EcPointFormat rawPointFormat = EcPointFormat.COMPRESSED;\n    KeyTemplate primaryDemKeyTemplate = AeadKeyTemplates.AES128_CTR_HMAC_SHA256;\n\n    KeyTemplate rawDemKeyTemplate = AeadKeyTemplates.AES128_CTR_HMAC_SHA256;\n    byte[] primarySalt = \"some salt\".getBytes(\"UTF-8\");\n    byte[] rawSalt = \"other salt\".getBytes(\"UTF-8\");\n\n    EciesAeadHkdfPrivateKey primaryPrivProto =\n        TestUtil.generateEciesAeadHkdfPrivKey(\n            curve, hashType, primaryPointFormat, primaryDemKeyTemplate, primarySalt);\n\n    Key primaryPriv =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                primaryPrivProto,\n                new EciesAeadHkdfPrivateKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n            8,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n    Key primaryPub =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                primaryPrivProto.getPublicKey(),\n                new EciesAeadHkdfPublicKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n            42,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n\n    EciesAeadHkdfPrivateKey rawPrivProto =\n        TestUtil.generateEciesAeadHkdfPrivKey(\n            curve, hashType, rawPointFormat, rawDemKeyTemplate, rawSalt);\n\n    Key rawPriv =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                rawPrivProto,\n                new EciesAeadHkdfPrivateKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PRIVATE),\n            11,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n    Key rawPub =\n        TestUtil.createKey(\n            TestUtil.createKeyData(\n                rawPrivProto.getPublicKey(),\n                new EciesAeadHkdfPublicKeyManager().getKeyType(),\n                KeyData.KeyMaterialType.ASYMMETRIC_PUBLIC),\n            43,\n            KeyStatusType.ENABLED,\n            OutputPrefixType.RAW);\n    KeysetHandle keysetHandlePub =\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(primaryPub, rawPub));\n    KeysetHandle keysetHandlePriv =\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(primaryPriv, rawPriv));\n    HybridEncrypt hybridEncrypt = HybridEncryptFactory.getPrimitive(keysetHandlePub);\n    HybridDecrypt hybridDecrypt = HybridDecryptFactory.getPrimitive(keysetHandlePriv);\n    byte[] plaintext = Random.randBytes(20);\n    byte[] contextInfo = Random.randBytes(20);\n    byte[] ciphertext = hybridEncrypt.encrypt(plaintext, contextInfo);\n    assertArrayEquals(plaintext, hybridDecrypt.decrypt(ciphertext, contextInfo));\n  }", "signature": "void testBasicEncryption()", "full_signature": "@Test public void testBasicEncryption()", "class_method_signature": "HybridEncryptFactoryTest.testBasicEncryption()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getBytes", "generateEciesAeadHkdfPrivKey", "createKey", "createKeyData", "getKeyType", "createKey", "createKeyData", "getPublicKey", "getKeyType", "generateEciesAeadHkdfPrivKey", "createKey", "createKeyData", "getKeyType", "createKey", "createKeyData", "getPublicKey", "getKeyType", "createKeysetHandle", "createKeyset", "createKeysetHandle", "createKeyset", "getPrimitive", "getPrimitive", "randBytes", "randBytes", "encrypt", "assertArrayEquals", "decrypt"]}, "focal_class": {"identifier": "HybridEncryptFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "@Deprecated public static", "return": "HybridEncrypt", "signature": "HybridEncrypt getPrimitive(KeysetHandle keysetHandle)", "full_signature": "@Deprecated public static HybridEncrypt getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "HybridEncryptFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(\n      KeysetHandle keysetHandle, final KeyManager<HybridEncrypt> keyManager)", "modifiers": "@Deprecated public static", "return": "HybridEncrypt", "signature": "HybridEncrypt getPrimitive(\n      KeysetHandle keysetHandle, final KeyManager<HybridEncrypt> keyManager)", "full_signature": "@Deprecated public static HybridEncrypt getPrimitive(\n      KeysetHandle keysetHandle, final KeyManager<HybridEncrypt> keyManager)", "class_method_signature": "HybridEncryptFactory.getPrimitive(\n      KeysetHandle keysetHandle, final KeyManager<HybridEncrypt> keyManager)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/hybrid/HybridEncryptFactory.java"}, "focal_method": {"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "@Deprecated public static", "return": "HybridEncrypt", "body": "@Deprecated\n  public static HybridEncrypt getPrimitive(KeysetHandle keysetHandle)\n      throws GeneralSecurityException {\n    return getPrimitive(keysetHandle, /* keyManager= */ null);\n  }", "signature": "HybridEncrypt getPrimitive(KeysetHandle keysetHandle)", "full_signature": "@Deprecated public static HybridEncrypt getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "HybridEncryptFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false, "invocations": ["getPrimitive"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}