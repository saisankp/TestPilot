{"test_class": {"identifier": "EngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Engine engine;", "modifier": "private", "type": "Engine", "declarator": "engine", "var_name": "engine"}], "file": "implementation/src/test/java/io/smallrye/reactive/streams/EngineTest.java"}, "test_case": {"identifier": "testUnknownTerminalStage", "parameters": "()", "modifiers": "@Test(expected = UnsupportedStageException.class) public", "return": "void", "body": "@Test(expected = UnsupportedStageException.class)\n    public void testUnknownTerminalStage() {\n        engine = new Engine();\n        List<Stage> stages = new ArrayList<>();\n        stages.add((Stage.Map) () -> i -> (int) i + 1);\n        stages.add(new Stage() {\n            // Unknown stage\n        });\n        Graph graph = () -> stages;\n        engine.buildSubscriber(graph);\n    }", "signature": "void testUnknownTerminalStage()", "full_signature": "@Test(expected = UnsupportedStageException.class) public void testUnknownTerminalStage()", "class_method_signature": "EngineTest.testUnknownTerminalStage()", "testcase": true, "constructor": false, "invocations": ["add", "add", "buildSubscriber"]}, "focal_class": {"identifier": "Engine", "superclass": "", "interfaces": "implements ReactiveStreamsEngine", "fields": [], "methods": [{"identifier": "buildPublisher", "parameters": "(Graph graph)", "modifiers": "@Override public", "return": "Publisher<T>", "signature": "Publisher<T> buildPublisher(Graph graph)", "full_signature": "@Override public Publisher<T> buildPublisher(Graph graph)", "class_method_signature": "Engine.buildPublisher(Graph graph)", "testcase": false, "constructor": false}, {"identifier": "buildSubscriber", "parameters": "(Graph graph)", "modifiers": "@Override public", "return": "SubscriberWithCompletionStage<T, R>", "signature": "SubscriberWithCompletionStage<T, R> buildSubscriber(Graph graph)", "full_signature": "@Override public SubscriberWithCompletionStage<T, R> buildSubscriber(Graph graph)", "class_method_signature": "Engine.buildSubscriber(Graph graph)", "testcase": false, "constructor": false}, {"identifier": "buildProcessor", "parameters": "(Graph graph)", "modifiers": "@Override public", "return": "Processor<T, R>", "signature": "Processor<T, R> buildProcessor(Graph graph)", "full_signature": "@Override public Processor<T, R> buildProcessor(Graph graph)", "class_method_signature": "Engine.buildProcessor(Graph graph)", "testcase": false, "constructor": false}, {"identifier": "buildCompletion", "parameters": "(Graph graph)", "modifiers": "@Override public", "return": "CompletionStage<T>", "signature": "CompletionStage<T> buildCompletion(Graph graph)", "full_signature": "@Override public CompletionStage<T> buildCompletion(Graph graph)", "class_method_signature": "Engine.buildCompletion(Graph graph)", "testcase": false, "constructor": false}, {"identifier": "applyProcessors", "parameters": "(Flowable<I> flowable, Stage stage, ProcessorOperator operator)", "modifiers": "private", "return": "Flowable<O>", "signature": "Flowable<O> applyProcessors(Flowable<I> flowable, Stage stage, ProcessorOperator operator)", "full_signature": "private Flowable<O> applyProcessors(Flowable<I> flowable, Stage stage, ProcessorOperator operator)", "class_method_signature": "Engine.applyProcessors(Flowable<I> flowable, Stage stage, ProcessorOperator operator)", "testcase": false, "constructor": false}, {"identifier": "applySubscriber", "parameters": "(Flowable<T> flowable, Stage stage, TerminalOperator operator)", "modifiers": "private", "return": "CompletionStage<R>", "signature": "CompletionStage<R> applySubscriber(Flowable<T> flowable, Stage stage, TerminalOperator operator)", "full_signature": "private CompletionStage<R> applySubscriber(Flowable<T> flowable, Stage stage, TerminalOperator operator)", "class_method_signature": "Engine.applySubscriber(Flowable<T> flowable, Stage stage, TerminalOperator operator)", "testcase": false, "constructor": false}, {"identifier": "createPublisher", "parameters": "(Stage stage, PublisherOperator operator)", "modifiers": "private", "return": "Flowable<O>", "signature": "Flowable<O> createPublisher(Stage stage, PublisherOperator operator)", "full_signature": "private Flowable<O> createPublisher(Stage stage, PublisherOperator operator)", "class_method_signature": "Engine.createPublisher(Stage stage, PublisherOperator operator)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/Engine.java"}, "focal_method": {"identifier": "buildSubscriber", "parameters": "(Graph graph)", "modifiers": "@Override public", "return": "SubscriberWithCompletionStage<T, R>", "body": "@Override\n    public <T, R> SubscriberWithCompletionStage<T, R> buildSubscriber(Graph graph) {\n        Processor<T, T> processor = new ConnectableProcessor<>();\n        Flowable<T> flowable = Flowable.fromPublisher(processor);\n        for (Stage stage : graph.getStages()) {\n            Operator operator = Stages.lookup(stage);\n            if (operator instanceof ProcessorOperator) {\n                flowable = applyProcessors(flowable, stage, (ProcessorOperator) operator);\n            } else if (operator instanceof TerminalOperator) {\n                CompletionStage<R> result = applySubscriber(Transformer.apply(flowable), stage,\n                        (TerminalOperator) operator);\n                return new DefaultSubscriberWithCompletionStage<>(processor, result);\n            } else {\n                throw new UnsupportedStageException(stage);\n            }\n        }\n\n        throw new IllegalArgumentException(\"The graph does not have a valid final stage\");\n    }", "signature": "SubscriberWithCompletionStage<T, R> buildSubscriber(Graph graph)", "full_signature": "@Override public SubscriberWithCompletionStage<T, R> buildSubscriber(Graph graph)", "class_method_signature": "Engine.buildSubscriber(Graph graph)", "testcase": false, "constructor": false, "invocations": ["fromPublisher", "getStages", "lookup", "applyProcessors", "applySubscriber", "apply"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}