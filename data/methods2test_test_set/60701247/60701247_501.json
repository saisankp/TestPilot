{"test_class": {"identifier": "ObjectPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable/testSrc/com/android/tools/idea/observable/core/ObjectPropertyTest.java"}, "test_case": {"identifier": "testObjectPropertyCanWrapOptionalProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testObjectPropertyCanWrapOptionalProperty() {\n    Person person1 = new Person(\"John Doe\", 25);\n    Person person2 = new Person(\"Jane Doe\", 21);\n\n    OptionalProperty<Person> optionalPersonProperty = new OptionalValueProperty<>(person1);\n\n    ObjectProperty<Person> personProperty = ObjectProperty.wrap(optionalPersonProperty);\n    assertThat(personProperty.get()).isEqualTo(person1);\n\n    personProperty.set(person2);\n\n    assertThat(optionalPersonProperty.getValue()).isEqualTo(person2);\n\n    optionalPersonProperty.clear();\n\n    try {\n      personProperty.get();\n      Assert.fail();\n    }\n    catch (Exception expected) {\n    }\n  }", "signature": "void testObjectPropertyCanWrapOptionalProperty()", "full_signature": "@Test public void testObjectPropertyCanWrapOptionalProperty()", "class_method_signature": "ObjectPropertyTest.testObjectPropertyCanWrapOptionalProperty()", "testcase": true, "constructor": false, "invocations": ["wrap", "isEqualTo", "assertThat", "get", "set", "isEqualTo", "assertThat", "getValue", "clear", "get", "fail"]}, "focal_class": {"identifier": "ObjectProperty", "superclass": "extends AbstractProperty<T>", "interfaces": "implements ObservableObject<T>", "fields": [], "methods": [{"identifier": "wrap", "parameters": "(@NotNull OptionalProperty<T> optionalProperty)", "modifiers": "public static", "return": "ObjectProperty<T>", "signature": "ObjectProperty<T> wrap(@NotNull OptionalProperty<T> optionalProperty)", "full_signature": "public static ObjectProperty<T> wrap(@NotNull OptionalProperty<T> optionalProperty)", "class_method_signature": "ObjectProperty.wrap(@NotNull OptionalProperty<T> optionalProperty)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(@NotNull OptionalProperty<T> optionalProperty, @NotNull String id)", "modifiers": "public static", "return": "ObjectProperty<T>", "signature": "ObjectProperty<T> wrap(@NotNull OptionalProperty<T> optionalProperty, @NotNull String id)", "full_signature": "public static ObjectProperty<T> wrap(@NotNull OptionalProperty<T> optionalProperty, @NotNull String id)", "class_method_signature": "ObjectProperty.wrap(@NotNull OptionalProperty<T> optionalProperty, @NotNull String id)", "testcase": false, "constructor": false}], "file": "observable/src/com/android/tools/idea/observable/core/ObjectProperty.java"}, "focal_method": {"identifier": "wrap", "parameters": "(@NotNull OptionalProperty<T> optionalProperty)", "modifiers": "public static", "return": "ObjectProperty<T>", "body": "public static <T> ObjectProperty<T> wrap(@NotNull OptionalProperty<T> optionalProperty) {\n    return new OptionalWrapper<>(optionalProperty, null);\n  }", "signature": "ObjectProperty<T> wrap(@NotNull OptionalProperty<T> optionalProperty)", "full_signature": "public static ObjectProperty<T> wrap(@NotNull OptionalProperty<T> optionalProperty)", "class_method_signature": "ObjectProperty.wrap(@NotNull OptionalProperty<T> optionalProperty)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}