{"test_class": {"identifier": "DownloadFilesTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/axemblr/provisionr/core/activities/DownloadFilesTest.java"}, "test_case": {"identifier": "testCreatePuppetScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreatePuppetScript() throws Exception {\n        Software software = Software.builder()\n            .file(\"http://bin.axemblr.com/test.tar.gz\", \"/opt/test.tar.gz\")\n            .file(\"http://google.com\", \"/opt/google.html\")\n            .createSoftware();\n\n        Pool pool = mock(Pool.class);\n        when(pool.getSoftware()).thenReturn(software);\n\n        PuppetActivity activity = new DownloadFiles();\n        String content = activity.createPuppetScript(pool, null);\n\n        assertThat(content)\n            .contains(\"download_file {\\\"/opt/test.tar.gz\\\":\\n\" +\n                \"  uri => \\\"http://bin.axemblr.com/test.tar.gz\\\"\\n\" +\n                \"}\")\n            .contains(\"download_file {\\\"/opt/google.html\\\":\\n\" +\n                \"  uri => \\\"http://google.com\\\"\\n\" +\n                \"}\");\n\n        assertThat(activity.createAdditionalFiles(pool, null)).isEmpty();\n    }", "signature": "void testCreatePuppetScript()", "full_signature": "@Test public void testCreatePuppetScript()", "class_method_signature": "DownloadFilesTest.testCreatePuppetScript()", "testcase": true, "constructor": false, "invocations": ["createSoftware", "file", "file", "builder", "mock", "thenReturn", "when", "getSoftware", "createPuppetScript", "contains", "contains", "assertThat", "isEmpty", "assertThat", "createAdditionalFiles"]}, "focal_class": {"identifier": "DownloadFiles", "superclass": "extends PuppetActivity", "interfaces": "", "fields": [{"original_string": "public static final String FILES_TEMPLATE = \"/com/axemblr/provisionr/core/puppet/files.pp.mustache\";", "modifier": "public static final", "type": "String", "declarator": "FILES_TEMPLATE = \"/com/axemblr/provisionr/core/puppet/files.pp.mustache\"", "var_name": "FILES_TEMPLATE"}], "methods": [{"identifier": "DownloadFiles", "parameters": "()", "modifiers": "public", "return": "", "signature": " DownloadFiles()", "full_signature": "public  DownloadFiles()", "class_method_signature": "DownloadFiles.DownloadFiles()", "testcase": false, "constructor": true}, {"identifier": "createPuppetScript", "parameters": "(Pool pool, Machine machine)", "modifiers": "@Override public", "return": "String", "signature": "String createPuppetScript(Pool pool, Machine machine)", "full_signature": "@Override public String createPuppetScript(Pool pool, Machine machine)", "class_method_signature": "DownloadFiles.createPuppetScript(Pool pool, Machine machine)", "testcase": false, "constructor": false}, {"identifier": "filesAsListOfMaps", "parameters": "(Software software)", "modifiers": "private", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> filesAsListOfMaps(Software software)", "full_signature": "private List<Map<String, String>> filesAsListOfMaps(Software software)", "class_method_signature": "DownloadFiles.filesAsListOfMaps(Software software)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/axemblr/provisionr/core/activities/DownloadFiles.java"}, "focal_method": {"identifier": "createPuppetScript", "parameters": "(Pool pool, Machine machine)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String createPuppetScript(Pool pool, Machine machine) throws Exception {\n        return Mustache.toString(InstallPackages.class, FILES_TEMPLATE,\n            ImmutableMap.of(\"files\", filesAsListOfMaps(pool.getSoftware())));\n    }", "signature": "String createPuppetScript(Pool pool, Machine machine)", "full_signature": "@Override public String createPuppetScript(Pool pool, Machine machine)", "class_method_signature": "DownloadFiles.createPuppetScript(Pool pool, Machine machine)", "testcase": false, "constructor": false, "invocations": ["toString", "of", "filesAsListOfMaps", "getSoftware"]}, "repository": {"repo_id": 6035195, "url": "https://github.com/axemblr/axemblr-provisionr", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 30, "size": 3329, "license": "licensed"}}