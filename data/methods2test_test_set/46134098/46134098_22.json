{"test_class": {"identifier": "YMLResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File INPUT_FILE = new File(\"src/test/resource/resfilter/yml/input.yml\");", "modifier": "private static final", "type": "File", "declarator": "INPUT_FILE = new File(\"src/test/resource/resfilter/yml/input.yml\")", "var_name": "INPUT_FILE"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final File EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/yml/write-output.yml\");", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "File", "declarator": "EXPECTED_WRITE_FILE = new File(\"src/test/resource/resfilter/yml/write-output.yml\")", "var_name": "EXPECTED_WRITE_FILE"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private static final File EXPECTED_MERGE_FILE = new File(\"src/test/resource/resfilter/yml/merge-output.yml\");", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "File", "declarator": "EXPECTED_MERGE_FILE = new File(\"src/test/resource/resfilter/yml/merge-output.yml\")", "var_name": "EXPECTED_MERGE_FILE"}, {"original_string": "private static Collection<ResourceString> EXPECTED_INPUT_RES_LIST;", "modifier": "private static", "type": "Collection<ResourceString>", "declarator": "EXPECTED_INPUT_RES_LIST", "var_name": "EXPECTED_INPUT_RES_LIST"}, {"original_string": "private static LanguageBundle WRITE_BUNDLE;", "modifier": "private static", "type": "LanguageBundle", "declarator": "WRITE_BUNDLE", "var_name": "WRITE_BUNDLE"}, {"original_string": "private static final YMLResource res = new YMLResource();", "modifier": "private static final", "type": "YMLResource", "declarator": "res = new YMLResource()", "var_name": "res"}], "file": "gp-res-filter/src/test/java/com/ibm/g11n/pipeline/resfilter/impl/YMLResourceTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrite() throws IOException, ResourceFilterException {\n        File tempFile = File.createTempFile(this.getClass().getSimpleName(), \".yml\");\n        tempFile.deleteOnExit();\n\n        try (OutputStream os = new FileOutputStream(tempFile)) {\n            res.write(os, WRITE_BUNDLE, null);\n            os.flush();\n            // TODO: Not ready yet\n            // assertTrue(ResourceTestUtil.compareFiles(EXPECTED_WRITE_FILE, tempFile));\n        }\n    }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "YMLResourceTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "getSimpleName", "getClass", "deleteOnExit", "write", "flush"]}, "focal_class": {"identifier": "YMLResource", "superclass": "extends ResourceFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(InputStream inStream, FilterOptions options)", "modifiers": "@Override public", "return": "LanguageBundle", "signature": "LanguageBundle parse(InputStream inStream, FilterOptions options)", "full_signature": "@Override public LanguageBundle parse(InputStream inStream, FilterOptions options)", "class_method_signature": "YMLResource.parse(InputStream inStream, FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "flattenMap", "parameters": "(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Map<String, String>", "signature": "Map<String, String> flattenMap(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "full_signature": "@SuppressWarnings(\"unchecked\") private Map<String, String> flattenMap(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "class_method_signature": "YMLResource.flattenMap(String prefix, Map<String, Object> map, Map<String, String> resource,\n            char separator)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "YMLResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false}, {"identifier": "writeFile", "parameters": "(OutputStream writer, Map<String, Object> map, int depth)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void writeFile(OutputStream writer, Map<String, Object> map, int depth)", "full_signature": "@SuppressWarnings(\"unchecked\") private void writeFile(OutputStream writer, Map<String, Object> map, int depth)", "class_method_signature": "YMLResource.writeFile(OutputStream writer, Map<String, Object> map, int depth)", "testcase": false, "constructor": false}], "file": "gp-res-filter/src/main/java/com/ibm/g11n/pipeline/resfilter/impl/YMLResource.java"}, "focal_method": {"identifier": "write", "parameters": "(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options) throws IOException, ResourceFilterException {\n\n        List<ResourceString> resStrings = languageBundle.getSortedResourceStrings();\n\n        // First we need to unflatten the map before writing the file\n        char separator = '.';\n\n        // map that we will alter in order to populate\n        HashMap<String, Object> temp_map = new HashMap<String, Object>();\n\n        // map that points to the top so we always have a reference\n        HashMap<String, Object> new_map = temp_map;\n\n        for (ResourceString res : resStrings) {\n            String value = res.getValue();\n            String key = res.getKey();\n            String[] temp = key.split(\"\\\\\" + separator);\n\n            for (int i = 0; i < temp.length; i++) {\n\n                // last intermediate key - insert value\n                if (i == temp.length - 1) {\n                    temp_map.put(temp[i], value);\n                }\n\n                // still in intermediary key - insert a new map\n                else {\n                    if (!temp_map.containsKey(temp[i])) {\n                        temp_map.put(temp[i], new HashMap<String, Object>());\n                    }\n                    temp_map = (HashMap<String, Object>) temp_map.get(temp[i]);\n                }\n            }\n\n            // reset map to point to top of HashMap\n            temp_map = new_map;\n        }\n\n        // Actually write out the file\n        writeFile(outStream, temp_map, 0);\n    }", "signature": "void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "class_method_signature": "YMLResource.write(OutputStream outStream, LanguageBundle languageBundle,\n            FilterOptions options)", "testcase": false, "constructor": false, "invocations": ["getSortedResourceStrings", "getValue", "getKey", "split", "put", "containsKey", "put", "get", "writeFile"]}, "repository": {"repo_id": 46134098, "url": "https://github.com/IBM-Cloud/gp-java-tools", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 9, "size": 6216, "license": "licensed"}}