{"test_class": {"identifier": "RandomThrottleGateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double THROTTLE_GATE_LIKELIHOOD = 0.05;", "modifier": "private static final", "type": "double", "declarator": "THROTTLE_GATE_LIKELIHOOD = 0.05", "var_name": "THROTTLE_GATE_LIKELIHOOD"}, {"original_string": "private static final int MAX_ITERATIONS = 10000;", "modifier": "private static final", "type": "int", "declarator": "MAX_ITERATIONS = 10000", "var_name": "MAX_ITERATIONS"}, {"original_string": "private static final int MIN_OPEN_GATES = 1;", "modifier": "private static final", "type": "int", "declarator": "MIN_OPEN_GATES = 1", "var_name": "MIN_OPEN_GATES"}, {"original_string": "private static final int MAX_OPEN_GATES = MAX_ITERATIONS - 1;", "modifier": "private static final", "type": "int", "declarator": "MAX_OPEN_GATES = MAX_ITERATIONS - 1", "var_name": "MAX_OPEN_GATES"}, {"original_string": "private RandomThrottleGate throttleGateUnderTest;", "modifier": "private", "type": "RandomThrottleGate", "declarator": "throttleGateUnderTest", "var_name": "throttleGateUnderTest"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/source/data/initializer/throttlegate/RandomThrottleGateTest.java"}, "test_case": {"identifier": "testNeverFullyOpenOrFullyClosed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNeverFullyOpenOrFullyClosed() {\n        int openGateCounter = (int) IntStream.range(0, MAX_ITERATIONS).filter(i -> this.throttleGateUnderTest.isOpen()).count();\n        String message = \"Gate opened \" + openGateCounter + \"/\" + MAX_ITERATIONS + \" times \" +\n                \"(expecting at least \" + MIN_OPEN_GATES + \" and a maximum of \" + MAX_OPEN_GATES + \")\";\n        isBetween(openGateCounter, MIN_OPEN_GATES, MAX_OPEN_GATES, message);\n        System.out.println(message); // Show result of test even if it passes - can track progress via build logs\n    }", "signature": "void testNeverFullyOpenOrFullyClosed()", "full_signature": "@Test public void testNeverFullyOpenOrFullyClosed()", "class_method_signature": "RandomThrottleGateTest.testNeverFullyOpenOrFullyClosed()", "testcase": true, "constructor": false, "invocations": ["count", "filter", "range", "isOpen", "isBetween", "println"]}, "focal_class": {"identifier": "RandomThrottleGate", "superclass": "", "interfaces": "implements ThrottleGate", "fields": [{"original_string": "private double throttleGateLikelihood;", "modifier": "private", "type": "double", "declarator": "throttleGateLikelihood", "var_name": "throttleGateLikelihood"}, {"original_string": "private Random randomNumberGenerator;", "modifier": "private", "type": "Random", "declarator": "randomNumberGenerator", "var_name": "randomNumberGenerator"}], "methods": [{"identifier": "RandomThrottleGate", "parameters": "(double throttleGateLikelihood)", "modifiers": "public", "return": "", "signature": " RandomThrottleGate(double throttleGateLikelihood)", "full_signature": "public  RandomThrottleGate(double throttleGateLikelihood)", "class_method_signature": "RandomThrottleGate.RandomThrottleGate(double throttleGateLikelihood)", "testcase": false, "constructor": true}, {"identifier": "isOpen", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "@Override public boolean isOpen()", "class_method_signature": "RandomThrottleGate.isOpen()", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/source/data/initializer/throttlegate/RandomThrottleGate.java"}, "focal_method": {"identifier": "isOpen", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isOpen() {\n        double chance = randomNumberGenerator.nextDouble();\n        boolean result = chance <= throttleGateLikelihood;\n        log.debug(String.format(\"Generated random number %.2f, which is %s than throttleGateLikelihood (%.2f). ThrottleGate is %s.\",\n                chance,\n                (result ? \"less\" : \"greater\"),\n                throttleGateLikelihood,\n                (result ? \"OPEN\" : \"CLOSED\")));\n        return result;\n    }", "signature": "boolean isOpen()", "full_signature": "@Override public boolean isOpen()", "class_method_signature": "RandomThrottleGate.isOpen()", "testcase": false, "constructor": false, "invocations": ["nextDouble", "debug", "format"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}