{"test_class": {"identifier": "GenerateNodeIdRandomlyTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/config/GenerateNodeIdRandomlyTest.java"}, "test_case": {"identifier": "testGenerateNodeIdRandomlyCreatesFileWithNodeIdAndPrivateKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateNodeIdRandomlyCreatesFileWithNodeIdAndPrivateKey() throws Exception {\n        File nodeIdPropertiesFile = new File(\"database-test/nodeId.properties\");\n        //Cleanup previous nodeId.properties file (if exists)\n        //noinspection ResultOfMethodCallIgnored\n        nodeIdPropertiesFile.delete();\n\n        new GenerateNodeIdRandomly(\"database-test\").getNodePrivateKey();\n\n        assertTrue(nodeIdPropertiesFile.exists());\n        String contents = FileCopyUtils.copyToString(new FileReader(nodeIdPropertiesFile));\n        String[] lines = StringUtils.tokenizeToStringArray(contents, \"\\n\");\n        assertEquals(4, lines.length);\n        assertTrue(lines[0].startsWith(\"#Generated NodeID.\"));\n        assertTrue(lines[1].startsWith(\"#\"));\n        assertTrue(lines[2].startsWith(\"nodeIdPrivateKey=\"));\n        assertEquals(\"nodeIdPrivateKey=\".length() + 64, lines[2].length());\n        assertTrue(lines[3].startsWith(\"nodeId=\"));\n        assertEquals(\"nodeId=\".length() + 128, lines[3].length());\n\n        //noinspection ResultOfMethodCallIgnored\n        nodeIdPropertiesFile.delete();\n    }", "signature": "void testGenerateNodeIdRandomlyCreatesFileWithNodeIdAndPrivateKey()", "full_signature": "@Test public void testGenerateNodeIdRandomlyCreatesFileWithNodeIdAndPrivateKey()", "class_method_signature": "GenerateNodeIdRandomlyTest.testGenerateNodeIdRandomlyCreatesFileWithNodeIdAndPrivateKey()", "testcase": true, "constructor": false, "invocations": ["delete", "getNodePrivateKey", "assertTrue", "exists", "copyToString", "tokenizeToStringArray", "assertEquals", "assertTrue", "startsWith", "assertTrue", "startsWith", "assertTrue", "startsWith", "assertEquals", "length", "length", "assertTrue", "startsWith", "assertEquals", "length", "length", "delete"]}, "focal_class": {"identifier": "GenerateNodeIdRandomly", "superclass": "", "interfaces": "implements GenerateNodeIdStrategy", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(\"general\");", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"general\")", "var_name": "logger"}, {"original_string": "private String databaseDir;", "modifier": "private", "type": "String", "declarator": "databaseDir", "var_name": "databaseDir"}], "methods": [{"identifier": "GenerateNodeIdRandomly", "parameters": "(String databaseDir)", "modifiers": "", "return": "", "signature": " GenerateNodeIdRandomly(String databaseDir)", "full_signature": "  GenerateNodeIdRandomly(String databaseDir)", "class_method_signature": "GenerateNodeIdRandomly.GenerateNodeIdRandomly(String databaseDir)", "testcase": false, "constructor": true}, {"identifier": "getNodePrivateKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getNodePrivateKey()", "full_signature": "@Override public String getNodePrivateKey()", "class_method_signature": "GenerateNodeIdRandomly.getNodePrivateKey()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/config/GenerateNodeIdRandomly.java"}, "focal_method": {"identifier": "getNodePrivateKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getNodePrivateKey() {\n        ECKey key = new ECKey();\n        Properties props = new Properties();\n        props.setProperty(\"nodeIdPrivateKey\", Hex.toHexString(key.getPrivKeyBytes()));\n        props.setProperty(\"nodeId\", Hex.toHexString(key.getNodeId()));\n\n        File file = new File(databaseDir, \"nodeId.properties\");\n        file.getParentFile().mkdirs();\n        try (Writer writer = new FileWriter(file)) {\n            props.store(writer, \"Generated NodeID. To use your own nodeId please refer to 'peer.privateKey' config option.\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n        logger.info(\"New nodeID generated: \" + props.getProperty(\"nodeId\"));\n        logger.info(\"Generated nodeID and its private key stored in \" + file);\n\n        return props.getProperty(\"nodeIdPrivateKey\");\n    }", "signature": "String getNodePrivateKey()", "full_signature": "@Override public String getNodePrivateKey()", "class_method_signature": "GenerateNodeIdRandomly.getNodePrivateKey()", "testcase": false, "constructor": false, "invocations": ["setProperty", "toHexString", "getPrivKeyBytes", "setProperty", "toHexString", "getNodeId", "mkdirs", "getParentFile", "store", "info", "getProperty", "info", "getProperty"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}