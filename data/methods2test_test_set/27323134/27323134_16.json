{"test_class": {"identifier": "MediaItemDataRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FAKE_ARTWORK = \"fake artwork\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_ARTWORK = \"fake artwork\"", "var_name": "FAKE_ARTWORK"}, {"original_string": "private static final int FAKE_COUNT = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_COUNT = 1", "var_name": "FAKE_COUNT"}, {"original_string": "private static final int FAKE_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_ID = 1", "var_name": "FAKE_ID"}, {"original_string": "private static final Media FAKE_MEDIA = Media.PROGRAM;", "modifier": "private static final", "type": "Media", "declarator": "FAKE_MEDIA = Media.PROGRAM", "var_name": "FAKE_MEDIA"}, {"original_string": "private static final String FAKE_TITLE = \"fake title\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_TITLE = \"fake title\"", "var_name": "FAKE_TITLE"}, {"original_string": "private static final String FAKE_SUBTITLE = \"fake subtitle\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_SUBTITLE = \"fake subtitle\"", "var_name": "FAKE_SUBTITLE"}, {"original_string": "private static final String FAKE_DESCRIPTION = \"fake description\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_DESCRIPTION = \"fake description\"", "var_name": "FAKE_DESCRIPTION"}, {"original_string": "private static final String FAKE_INETREF = \"fake inetref\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_INETREF = \"fake inetref\"", "var_name": "FAKE_INETREF"}, {"original_string": "private static final DateTime FAKE_START_DATE = DateTime.now();", "modifier": "private static final", "type": "DateTime", "declarator": "FAKE_START_DATE = DateTime.now()", "var_name": "FAKE_START_DATE"}, {"original_string": "private static final int FAKE_PROGRAM_FLAGS = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PROGRAM_FLAGS = 1", "var_name": "FAKE_PROGRAM_FLAGS"}, {"original_string": "private static final int FAKE_SEASON = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_SEASON = 1", "var_name": "FAKE_SEASON"}, {"original_string": "private static final int FAKE_EPISODE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_EPISODE = 1", "var_name": "FAKE_EPISODE"}, {"original_string": "private static final String FAKE_STUDIO = \"fake studio\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_STUDIO = \"fake studio\"", "var_name": "FAKE_STUDIO"}, {"original_string": "private static final String FAKE_CAST_MEMBERS = \"fake cast members\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CAST_MEMBERS = \"fake cast members\"", "var_name": "FAKE_CAST_MEMBERS"}, {"original_string": "private static final String FAKE_CHARACTERS = \"fake characters\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CHARACTERS = \"fake characters\"", "var_name": "FAKE_CHARACTERS"}, {"original_string": "private static final String FAKE_URL = \"fake url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_URL = \"fake url\"", "var_name": "FAKE_URL"}, {"original_string": "private static final String FAKE_FANART_URL = \"fake fanart url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_FANART_URL = \"fake fanart url\"", "var_name": "FAKE_FANART_URL"}, {"original_string": "private static final String FAKE_COVERART_URL = \"fake coverart url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_COVERART_URL = \"fake coverart url\"", "var_name": "FAKE_COVERART_URL"}, {"original_string": "private static final String FAKE_BANNER_URL = \"fake bannart url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_BANNER_URL = \"fake bannart url\"", "var_name": "FAKE_BANNER_URL"}, {"original_string": "private static final String FAKE_PREVIEW_URL = \"fake preview url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_PREVIEW_URL = \"fake preview url\"", "var_name": "FAKE_PREVIEW_URL"}, {"original_string": "private static final String FAKE_CONTENT_TYPE = \"fake content type\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CONTENT_TYPE = \"fake content type\"", "var_name": "FAKE_CONTENT_TYPE"}, {"original_string": "private static final long FAKE_DURATION = 1L;", "modifier": "private static final", "type": "long", "declarator": "FAKE_DURATION = 1L", "var_name": "FAKE_DURATION"}, {"original_string": "private static final int FAKE_PERCENT_COMPLETE = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PERCENT_COMPLETE = 1", "var_name": "FAKE_PERCENT_COMPLETE"}, {"original_string": "private static final boolean FAKE_RECORDING = false;", "modifier": "private static final", "type": "boolean", "declarator": "FAKE_RECORDING = false", "var_name": "FAKE_RECORDING"}, {"original_string": "private static final int FAKE_LIVESTREAM_ID = 999;", "modifier": "private static final", "type": "int", "declarator": "FAKE_LIVESTREAM_ID = 999", "var_name": "FAKE_LIVESTREAM_ID"}, {"original_string": "private static final boolean FAKE_WATCHED = false;", "modifier": "private static final", "type": "boolean", "declarator": "FAKE_WATCHED = false", "var_name": "FAKE_WATCHED"}, {"original_string": "private static final String FAKE_UPDATE_SAVED_BOOKMARK_URL = \"fake update saved bookmark url\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_UPDATE_SAVED_BOOKMARK_URL = \"fake update saved bookmark url\"", "var_name": "FAKE_UPDATE_SAVED_BOOKMARK_URL"}, {"original_string": "private static final long FAKE_BOOKMARK = 1L;", "modifier": "private static final", "type": "long", "declarator": "FAKE_BOOKMARK = 1L", "var_name": "FAKE_BOOKMARK"}, {"original_string": "private static final String FAKE_CERTIFICATION = \"fake certification\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_CERTIFICATION = \"fake certification\"", "var_name": "FAKE_CERTIFICATION"}, {"original_string": "private static final int FAKE_PARENTAL_LEVEL = 1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_PARENTAL_LEVEL = 1", "var_name": "FAKE_PARENTAL_LEVEL"}, {"original_string": "private static final String FAKE_RECORDING_GROUP = \"fake recording group\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_RECORDING_GROUP = \"fake recording group\"", "var_name": "FAKE_RECORDING_GROUP"}, {"original_string": "private MediaItemDataRepository mediaItemDataRepository;", "modifier": "private", "type": "MediaItemDataRepository", "declarator": "mediaItemDataRepository", "var_name": "mediaItemDataRepository"}, {"original_string": "@Mock\n    private MediaItemDataStoreFactory mockMediaItemDataStoreFactory;", "modifier": "@Mock\n    private", "type": "MediaItemDataStoreFactory", "declarator": "mockMediaItemDataStoreFactory", "var_name": "mockMediaItemDataStoreFactory"}, {"original_string": "@Mock\n    private MediaItemDataStore mockMediaItemDataStore;", "modifier": "@Mock\n    private", "type": "MediaItemDataStore", "declarator": "mockMediaItemDataStore", "var_name": "mockMediaItemDataStore"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "mythtv-player/src/test/java/org/mythtv/android/data/repository/MediaItemDataRepositoryTest.java"}, "test_case": {"identifier": "testMediaItemHappyCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMediaItemHappyCase() {\n\n        TestSubscriber<Object> subscriber = new TestSubscriber<>();\n\n        given( mockMediaItemDataStore.mediaItem( any( Media.class ), anyInt() ) ).willReturn( Observable.just( mediaItemEntity() ) );\n\n        mediaItemDataRepository.mediaItem( FAKE_MEDIA, FAKE_ID )\n                .subscribe( subscriber );\n\n        assertThat( subscriber.getOnNextEvents() )\n                .isNotNull()\n                .hasSize( 1 );\n\n        verify( mockMediaItemDataStoreFactory, times( 0 ) ).createMasterBackendDataStore();\n        verify( mockMediaItemDataStoreFactory, times( 1 ) ).create( anyInt() );\n        verify( mockMediaItemDataStore ).mediaItem( any( Media.class ), anyInt() );\n\n    }", "signature": "void testMediaItemHappyCase()", "full_signature": "@Test public void testMediaItemHappyCase()", "class_method_signature": "MediaItemDataRepositoryTest.testMediaItemHappyCase()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "mediaItem", "any", "anyInt", "just", "mediaItemEntity", "subscribe", "mediaItem", "hasSize", "isNotNull", "assertThat", "getOnNextEvents", "createMasterBackendDataStore", "verify", "times", "create", "verify", "times", "anyInt", "mediaItem", "verify", "any", "anyInt"]}, "focal_class": {"identifier": "MediaItemDataRepository", "superclass": "", "interfaces": "implements MediaItemRepository", "fields": [{"original_string": "private static final String CONVERT2METHODREF = \"Convert2MethodRef\";", "modifier": "private static final", "type": "String", "declarator": "CONVERT2METHODREF = \"Convert2MethodRef\"", "var_name": "CONVERT2METHODREF"}, {"original_string": "private final MediaItemDataStoreFactory mediaItemDataStoreFactory;", "modifier": "private final", "type": "MediaItemDataStoreFactory", "declarator": "mediaItemDataStoreFactory", "var_name": "mediaItemDataStoreFactory"}], "methods": [{"identifier": "MediaItemDataRepository", "parameters": "(\n            final MediaItemDataStoreFactory mediaItemDataStoreFactory\n    )", "modifiers": "@Inject public", "return": "", "signature": " MediaItemDataRepository(\n            final MediaItemDataStoreFactory mediaItemDataStoreFactory\n    )", "full_signature": "@Inject public  MediaItemDataRepository(\n            final MediaItemDataStoreFactory mediaItemDataStoreFactory\n    )", "class_method_signature": "MediaItemDataRepository.MediaItemDataRepository(\n            final MediaItemDataStoreFactory mediaItemDataStoreFactory\n    )", "testcase": false, "constructor": true}, {"identifier": "series", "parameters": "( Media media )", "modifiers": "@SuppressWarnings( CONVERT2METHODREF ) @Override public", "return": "Observable<List<Series>>", "signature": "Observable<List<Series>> series( Media media )", "full_signature": "@SuppressWarnings( CONVERT2METHODREF ) @Override public Observable<List<Series>> series( Media media )", "class_method_signature": "MediaItemDataRepository.series( Media media )", "testcase": false, "constructor": false}, {"identifier": "mediaItems", "parameters": "( final Media media, @Nullable final String title )", "modifiers": "@SuppressWarnings( CONVERT2METHODREF ) @Override public", "return": "Observable<List<MediaItem>>", "signature": "Observable<List<MediaItem>> mediaItems( final Media media, @Nullable final String title )", "full_signature": "@SuppressWarnings( CONVERT2METHODREF ) @Override public Observable<List<MediaItem>> mediaItems( final Media media, @Nullable final String title )", "class_method_signature": "MediaItemDataRepository.mediaItems( final Media media, @Nullable final String title )", "testcase": false, "constructor": false}, {"identifier": "mediaItem", "parameters": "( final Media media, final int id )", "modifiers": "@SuppressWarnings( CONVERT2METHODREF ) @Override public", "return": "Observable<MediaItem>", "signature": "Observable<MediaItem> mediaItem( final Media media, final int id )", "full_signature": "@SuppressWarnings( CONVERT2METHODREF ) @Override public Observable<MediaItem> mediaItem( final Media media, final int id )", "class_method_signature": "MediaItemDataRepository.mediaItem( final Media media, final int id )", "testcase": false, "constructor": false}, {"identifier": "addLiveStream", "parameters": "( final Media media, final int id )", "modifiers": "@Override public", "return": "Observable<MediaItem>", "signature": "Observable<MediaItem> addLiveStream( final Media media, final int id )", "full_signature": "@Override public Observable<MediaItem> addLiveStream( final Media media, final int id )", "class_method_signature": "MediaItemDataRepository.addLiveStream( final Media media, final int id )", "testcase": false, "constructor": false}, {"identifier": "removeLiveStream", "parameters": "( final Media media, final int id )", "modifiers": "@Override public", "return": "Observable<MediaItem>", "signature": "Observable<MediaItem> removeLiveStream( final Media media, final int id )", "full_signature": "@Override public Observable<MediaItem> removeLiveStream( final Media media, final int id )", "class_method_signature": "MediaItemDataRepository.removeLiveStream( final Media media, final int id )", "testcase": false, "constructor": false}, {"identifier": "updateWatchedStatus", "parameters": "( Media media, int id, boolean watched )", "modifiers": "@Override public", "return": "Observable<MediaItem>", "signature": "Observable<MediaItem> updateWatchedStatus( Media media, int id, boolean watched )", "full_signature": "@Override public Observable<MediaItem> updateWatchedStatus( Media media, int id, boolean watched )", "class_method_signature": "MediaItemDataRepository.updateWatchedStatus( Media media, int id, boolean watched )", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "( String searchString )", "modifiers": "@SuppressWarnings( CONVERT2METHODREF ) @Override public", "return": "Observable<List<MediaItem>>", "signature": "Observable<List<MediaItem>> search( String searchString )", "full_signature": "@SuppressWarnings( CONVERT2METHODREF ) @Override public Observable<List<MediaItem>> search( String searchString )", "class_method_signature": "MediaItemDataRepository.search( String searchString )", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/data/repository/MediaItemDataRepository.java"}, "focal_method": {"identifier": "mediaItem", "parameters": "( final Media media, final int id )", "modifiers": "@SuppressWarnings( CONVERT2METHODREF ) @Override public", "return": "Observable<MediaItem>", "body": "@SuppressWarnings( CONVERT2METHODREF )\n    @Override\n    public Observable<MediaItem> mediaItem( final Media media, final int id ) {\n\n        MediaItemDataStore mediaItemDataStore = mediaItemDataStoreFactory.create( id );\n\n        return mediaItemDataStore.mediaItem( media, id )\n                .map( MediaItemDataMapper::transform );\n    }", "signature": "Observable<MediaItem> mediaItem( final Media media, final int id )", "full_signature": "@SuppressWarnings( CONVERT2METHODREF ) @Override public Observable<MediaItem> mediaItem( final Media media, final int id )", "class_method_signature": "MediaItemDataRepository.mediaItem( final Media media, final int id )", "testcase": false, "constructor": false, "invocations": ["create", "map", "mediaItem"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}