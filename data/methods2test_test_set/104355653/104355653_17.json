{"test_class": {"identifier": "WaterControllerTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [], "file": "service/settlement-service/src/test/java/com/meiduimall/service/settlement/api/WaterControllerTest.java"}, "test_case": {"identifier": "testQueryWaterById", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testQueryWaterById() throws Exception {\n\t\tResultActions results = mockMvc\n\t\t\t\t.perform(MockMvcRequestBuilders.post(\"/settlementservice/revenueservice/v1/querywaterbyid\")\n\t\t\t\t\t\t.param(\"waterId\", \"QL41010216121426\").param(\"waterType\", \"3\"))\n\t\t\t\t.andExpect(status().isOk());\n\t\t\n\t\tresults.andDo(new ResultHandler() {\n\t\t\t@Override\n\t\t\tpublic void handle(MvcResult result) throws Exception {\n\t\t\t\tSystem.out.println(\"*********\"+result.getResponse().getContentAsString());\n\t\t\t}\n\t\t});\n\t}", "signature": "void testQueryWaterById()", "full_signature": "@Test public void testQueryWaterById()", "class_method_signature": "WaterControllerTest.testQueryWaterById()", "testcase": true, "constructor": false, "invocations": ["andExpect", "perform", "param", "param", "post", "isOk", "status", "andDo", "println", "getContentAsString", "getResponse"]}, "focal_class": {"identifier": "WaterController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WaterController.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WaterController.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate AgentService agentService;", "modifier": "@Autowired\n\tprivate", "type": "AgentService", "declarator": "agentService", "var_name": "agentService"}, {"original_string": "@Autowired\n\tprivate WaterService waterService;", "modifier": "@Autowired\n\tprivate", "type": "WaterService", "declarator": "waterService", "var_name": "waterService"}, {"original_string": "@Autowired\n\tprivate OrderService orderService;", "modifier": "@Autowired\n\tprivate", "type": "OrderService", "declarator": "orderService", "var_name": "orderService"}], "methods": [{"identifier": "queryWater", "parameters": "(@RequestParam(value = \"pageNumber\", defaultValue = \"1\") int pageNumber,\n\t\t\t@RequestParam(value = \"pageSize\", defaultValue = \"20\") int pageSize,\n\t\t\t@RequestParam(value = \"type\", defaultValue = \"list\") String type,\n\t\t\t@RequestParam Map<String, Object> params, String waterType)", "modifiers": "@PostMapping(\"/querywater\") public", "return": "ResBodyData", "signature": "ResBodyData queryWater(@RequestParam(value = \"pageNumber\", defaultValue = \"1\") int pageNumber,\n\t\t\t@RequestParam(value = \"pageSize\", defaultValue = \"20\") int pageSize,\n\t\t\t@RequestParam(value = \"type\", defaultValue = \"list\") String type,\n\t\t\t@RequestParam Map<String, Object> params, String waterType)", "full_signature": "@PostMapping(\"/querywater\") public ResBodyData queryWater(@RequestParam(value = \"pageNumber\", defaultValue = \"1\") int pageNumber,\n\t\t\t@RequestParam(value = \"pageSize\", defaultValue = \"20\") int pageSize,\n\t\t\t@RequestParam(value = \"type\", defaultValue = \"list\") String type,\n\t\t\t@RequestParam Map<String, Object> params, String waterType)", "class_method_signature": "WaterController.queryWater(@RequestParam(value = \"pageNumber\", defaultValue = \"1\") int pageNumber,\n\t\t\t@RequestParam(value = \"pageSize\", defaultValue = \"20\") int pageSize,\n\t\t\t@RequestParam(value = \"type\", defaultValue = \"list\") String type,\n\t\t\t@RequestParam Map<String, Object> params, String waterType)", "testcase": false, "constructor": false}, {"identifier": "queryWaterById", "parameters": "(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "modifiers": "@PostMapping(\"/querywaterbyid\") public", "return": "ResBodyData", "signature": "ResBodyData queryWaterById(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "full_signature": "@PostMapping(\"/querywaterbyid\") public ResBodyData queryWaterById(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "class_method_signature": "WaterController.queryWaterById(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "testcase": false, "constructor": false}, {"identifier": "getRecMoney", "parameters": "(@RequestParam Map<String, Object> params)", "modifiers": "@PostMapping(\"/getrecmoney\") public", "return": "ResBodyData", "signature": "ResBodyData getRecMoney(@RequestParam Map<String, Object> params)", "full_signature": "@PostMapping(\"/getrecmoney\") public ResBodyData getRecMoney(@RequestParam Map<String, Object> params)", "class_method_signature": "WaterController.getRecMoney(@RequestParam Map<String, Object> params)", "testcase": false, "constructor": false}], "file": "service/settlement-service/src/main/java/com/meiduimall/service/settlement/api/WaterController.java"}, "focal_method": {"identifier": "queryWaterById", "parameters": "(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "modifiers": "@PostMapping(\"/querywaterbyid\") public", "return": "ResBodyData", "body": "@PostMapping(\"/querywaterbyid\")\n\tpublic ResBodyData queryWaterById(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize) {\n\t\t\n\t\tif(StringUtil.isEmpty(waterId) || StringUtil.isEmpty(waterType)){\n\t\t\tlogger.error(\"\u6d41\u6c34\u7f16\u53f7\u6216\u6d41\u6c34\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\tthrow new ServiceException(SettlementApiCode.WATERID_OR_WATERTYPE_ISNULL, BaseApiCode.getZhMsg(SettlementApiCode.WATERID_OR_WATERTYPE_ISNULL));\n\t\t}\n\n\t\tMap<String, Object> result = Maps.newHashMap();\n\t\t\n\t\tif(ShareProfitConstants.WATER_TYPE_DRAW_CASH.equals(waterType)){//\u63d0\u73b0\u6d41\u6c34\u8be6\u60c5\n\t\t\t\n\t\t\tresult = waterService.getWaterType1Detail(waterId, waterType);\n\t\t\t\n\t\t}else if(ShareProfitConstants.WATER_TYPE_BILL.equals(waterType)){//\u8d26\u5355\u6d41\u6c34\u8be6\u60c5\n\t\t\t//1\uff1a\u4ee3\u7406 2\uff1a\u5546\u5bb6 3\uff1a\u5176\u4ed6(\u6bd4\u5982admin)\n\t\t\tif(loginType==null){\n\t\t\t\tlogger.error(\"\u67e5\u8be2\u8d26\u5355\u6d41\u6c34\u8be6\u60c5\uff0c\u767b\u9646\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\t\tthrow new ServiceException(SettlementApiCode.LOGIN_TYPE_ISNULL, BaseApiCode.getZhMsg(SettlementApiCode.LOGIN_TYPE_ISNULL));\n\t\t\t}else if(loginType==1 && StringUtil.isEmpty(code)){\n\t\t\t\tlogger.error(\"\u67e5\u8be2\u8d26\u5355\u6d41\u6c34\u8be6\u60c5\uff0c\u767b\u9646\u7c7b\u578b\u4e3a\u4ee3\u7406\uff0c\u4ee3\u7406\u7f16\u53f7\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\t\tthrow new ServiceException(SettlementApiCode.LOGIN_TYPE_AGENTCODE_ISNULL, BaseApiCode.getZhMsg(SettlementApiCode.LOGIN_TYPE_AGENTCODE_ISNULL));\n\t\t\t}\n\t\t\t\n\t\t\tInteger count = orderService.queryProfitCountByWaterId(waterId);\n\t\t\t\n\t\t\tList<EcmMzfShareProfit> shareProfitList=orderService.queryProfitByWaterByType(waterId,loginType,code,pageNumber,pageSize);\n\t\t\t\n\t\t\tresult.put(\"shareProfitList\", shareProfitList);\n\t\t\tresult.put(\"total\", count);\n\t\t\t\n\t\t}else if(ShareProfitConstants.WATER_TYPE_AGENT_PROFIT.equals(waterType) || ShareProfitConstants.WATER_TYPE_DEPOSIT.equals(waterType)){//\u4ee3\u7406\u8d39\u6d41\u6c34\u8be6\u60c5,\u4fdd\u8bc1\u91d1\u6d41\u6c34\u8be6\u60c5\n\t\t\t\n\t\t\tresult = waterService.getWaterDetail(waterId, waterType);\n\t\t}\n\t\t\n\t\treturn SettlementUtil.success(result);\n\t}", "signature": "ResBodyData queryWaterById(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "full_signature": "@PostMapping(\"/querywaterbyid\") public ResBodyData queryWaterById(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "class_method_signature": "WaterController.queryWaterById(String waterId, String waterType, Integer loginType, String code,\n\t\t\tInteger pageNumber, Integer pageSize)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "error", "getZhMsg", "newHashMap", "equals", "getWaterType1Detail", "equals", "error", "getZhMsg", "isEmpty", "error", "getZhMsg", "queryProfitCountByWaterId", "queryProfitByWaterByType", "put", "put", "equals", "equals", "getWaterDetail", "success"]}, "repository": {"repo_id": 104355653, "url": "https://github.com/chenjy16/mall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 403, "license": "licensed"}}