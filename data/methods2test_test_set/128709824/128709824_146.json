{"test_class": {"identifier": "ProviderHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderHelperTest.java"}, "test_case": {"identifier": "compareProviders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compareProviders() throws Exception {\n\n        ProviderGroup group1 = new ProviderGroup(\"a\");\n        ProviderGroup group2 = new ProviderGroup(\"a\");\n\n        List<ProviderInfo> oldList = new ArrayList<ProviderInfo>();\n        List<ProviderInfo> newList = new ArrayList<ProviderInfo>();\n        List<ProviderInfo> add = new ArrayList<ProviderInfo>();\n        List<ProviderInfo> remove = new ArrayList<ProviderInfo>();\n\n        group1.setProviderInfos(oldList);\n        group2.setProviderInfos(newList);\n\n        {\n            ProviderHelper.compareGroup(group1, group2, add, remove);\n            Assert.assertEquals(add.size(), 0);\n            Assert.assertEquals(remove.size(), 0);\n\n        }\n\n        {\n            oldList.clear();\n            newList.clear();\n            add.clear();\n            remove.clear();\n            oldList.add(ProviderHelper.toProviderInfo(\"127.0.0.1:12200?p=11&v=4.0\"));\n            oldList.add(ProviderHelper.toProviderInfo(\"127.0.0.2:12200?p=11&v=4.0\"));\n            oldList.add(ProviderHelper.toProviderInfo(\"127.0.0.3:12200?p=11&v=4.0\"));\n\n            ProviderHelper.compareGroup(group1, group2, add, remove);\n            Assert.assertEquals(add.size(), 0);\n            Assert.assertEquals(remove.size(), 3);\n        }\n\n        {\n            oldList.clear();\n            newList.clear();\n            add.clear();\n            remove.clear();\n\n            newList.add(ProviderHelper.toProviderInfo(\"127.0.0.1:12200?p=11&v=4.0\"));\n            newList.add(ProviderHelper.toProviderInfo(\"127.0.0.2:12200?p=11&v=4.0\"));\n            newList.add(ProviderHelper.toProviderInfo(\"127.0.0.3:12200?p=11&v=4.0\"));\n\n            ProviderHelper.compareGroup(group1, group2, add, remove);\n            Assert.assertEquals(add.size(), 3);\n            Assert.assertEquals(remove.size(), 0);\n        }\n\n        {\n            oldList.clear();\n            newList.clear();\n            add.clear();\n            remove.clear();\n            oldList.add(ProviderHelper.toProviderInfo(\"127.0.0.1:12200?p=11&v=4.0\"));\n            oldList.add(ProviderHelper.toProviderInfo(\"127.0.0.2:12200?p=11&v=4.0\"));\n            oldList.add(ProviderHelper.toProviderInfo(\"127.0.0.3:12200?p=11&v=4.0\"));\n\n            newList.add(ProviderHelper.toProviderInfo(\"127.0.0.1:12200?p=11&v=4.0\"));\n            newList.add(ProviderHelper.toProviderInfo(\"127.0.0.4:12200?p=11&v=4.0\"));\n            newList.add(ProviderHelper.toProviderInfo(\"127.0.0.5:12200?p=11&v=4.0\"));\n\n            ProviderHelper.compareGroup(group1, group2, add, remove);\n            Assert.assertEquals(add.size(), 2);\n            Assert.assertEquals(remove.size(), 2);\n        }\n    }", "signature": "void compareProviders()", "full_signature": "@Test public void compareProviders()", "class_method_signature": "ProviderHelperTest.compareProviders()", "testcase": true, "constructor": false, "invocations": ["setProviderInfos", "setProviderInfos", "compareGroup", "assertEquals", "size", "assertEquals", "size", "clear", "clear", "clear", "clear", "add", "toProviderInfo", "add", "toProviderInfo", "add", "toProviderInfo", "compareGroup", "assertEquals", "size", "assertEquals", "size", "clear", "clear", "clear", "clear", "add", "toProviderInfo", "add", "toProviderInfo", "add", "toProviderInfo", "compareGroup", "assertEquals", "size", "assertEquals", "size", "clear", "clear", "clear", "clear", "add", "toProviderInfo", "add", "toProviderInfo", "add", "toProviderInfo", "add", "toProviderInfo", "add", "toProviderInfo", "add", "toProviderInfo", "compareGroup", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "ProviderHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compareGroup", "parameters": "(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "modifiers": "public static", "return": "void", "signature": "void compareGroup(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "full_signature": "public static void compareGroup(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "class_method_signature": "ProviderHelper.compareGroup(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "testcase": false, "constructor": false}, {"identifier": "compareProviders", "parameters": "(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "modifiers": "public static", "return": "void", "signature": "void compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "full_signature": "public static void compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "class_method_signature": "ProviderHelper.compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "testcase": false, "constructor": false}, {"identifier": "compareGroups", "parameters": "(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "modifiers": "public static", "return": "void", "signature": "void compareGroups(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "full_signature": "public static void compareGroups(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "class_method_signature": "ProviderHelper.compareGroups(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "testcase": false, "constructor": false}, {"identifier": "convertToMap", "parameters": "(List<ProviderGroup> providerGroups)", "modifiers": "private static", "return": "Map<String, List<ProviderInfo>>", "signature": "Map<String, List<ProviderInfo>> convertToMap(List<ProviderGroup> providerGroups)", "full_signature": "private static Map<String, List<ProviderInfo>> convertToMap(List<ProviderGroup> providerGroups)", "class_method_signature": "ProviderHelper.convertToMap(List<ProviderGroup> providerGroups)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(ProviderGroup group)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(ProviderGroup group)", "full_signature": "public static boolean isEmpty(ProviderGroup group)", "class_method_signature": "ProviderHelper.isEmpty(ProviderGroup group)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "(ProviderInfo providerInfo)", "modifiers": "public static", "return": "String", "signature": "String toUrl(ProviderInfo providerInfo)", "full_signature": "public static String toUrl(ProviderInfo providerInfo)", "class_method_signature": "ProviderHelper.toUrl(ProviderInfo providerInfo)", "testcase": false, "constructor": false}, {"identifier": "toProviderInfo", "parameters": "(String url)", "modifiers": "public static", "return": "ProviderInfo", "signature": "ProviderInfo toProviderInfo(String url)", "full_signature": "public static ProviderInfo toProviderInfo(String url)", "class_method_signature": "ProviderHelper.toProviderInfo(String url)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/client/ProviderHelper.java"}, "focal_method": {"identifier": "compareProviders", "parameters": "(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "modifiers": "public static", "return": "void", "body": "public static void compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove) {\n        // \u6bd4\u8f83\u8001\u5217\u8868\u548c\u5f53\u524d\u5217\u8868\n        if (CommonUtils.isEmpty(oldList)) {\n            // \u7a7a\u53d8\u6210\u975e\u7a7a\n            if (CommonUtils.isNotEmpty(newList)) {\n                add.addAll(newList);\n            }\n            // \u7a7a\u5230\u7a7a\uff0c\u5ffd\u7565\n        } else {\n            // \u975e\u7a7a\u53d8\u6210\u7a7a\n            if (CommonUtils.isEmpty(newList)) {\n                remove.addAll(oldList);\n            } else {\n                // \u975e\u7a7a\u53d8\u6210\u975e\u7a7a\uff0c\u6bd4\u8f83\n                if (CommonUtils.isNotEmpty(oldList)) {\n                    List<ProviderInfo> tmpList = new ArrayList<ProviderInfo>(newList);\n                    // \u904d\u5386\u8001\u7684\n                    for (ProviderInfo oldProvider : oldList) {\n                        if (tmpList.contains(oldProvider)) {\n                            tmpList.remove(oldProvider);\n                        } else {\n                            // \u65b0\u7684\u6ca1\u6709\uff0c\u8001\u7684\u6709\uff0c\u5220\u6389\n                            remove.add(oldProvider);\n                        }\n                    }\n                    add.addAll(tmpList);\n                }\n            }\n        }\n    }", "signature": "void compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "full_signature": "public static void compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "class_method_signature": "ProviderHelper.compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isNotEmpty", "addAll", "isEmpty", "addAll", "isNotEmpty", "contains", "remove", "add", "addAll"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}