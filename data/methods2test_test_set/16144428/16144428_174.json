{"test_class": {"identifier": "SenseDocumentImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new DatamodelMapper(\"http://example.com/entity/\");", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new DatamodelMapper(\"http://example.com/entity/\")", "var_name": "mapper"}, {"original_string": "private final SenseIdValue sid = new SenseIdValueImpl(\"L42-S1\", \"http://example.com/entity/\");", "modifier": "private final", "type": "SenseIdValue", "declarator": "sid = new SenseIdValueImpl(\"L42-S1\", \"http://example.com/entity/\")", "var_name": "sid"}, {"original_string": "private final Statement s = new StatementImpl(\"MyId\", StatementRank.NORMAL,\n\t\t\tnew SomeValueSnakImpl(new PropertyIdValueImpl(\"P42\", \"http://example.com/entity/\")),\n\t\t\tCollections.emptyList(), Collections.emptyList(), sid);", "modifier": "private final", "type": "Statement", "declarator": "s = new StatementImpl(\"MyId\", StatementRank.NORMAL,\n\t\t\tnew SomeValueSnakImpl(new PropertyIdValueImpl(\"P42\", \"http://example.com/entity/\")),\n\t\t\tCollections.emptyList(), Collections.emptyList(), sid)", "var_name": "s"}, {"original_string": "private final List<StatementGroup> statementGroups = Collections.singletonList(\n\t\t\tnew StatementGroupImpl(Collections.singletonList(s))\n\t);", "modifier": "private final", "type": "List<StatementGroup>", "declarator": "statementGroups = Collections.singletonList(\n\t\t\tnew StatementGroupImpl(Collections.singletonList(s))\n\t)", "var_name": "statementGroups"}, {"original_string": "private final MonolingualTextValue rep = new TermImpl(\"en\", \"rep\");", "modifier": "private final", "type": "MonolingualTextValue", "declarator": "rep = new TermImpl(\"en\", \"rep\")", "var_name": "rep"}, {"original_string": "private final List<MonolingualTextValue> repList = Collections.singletonList(rep);", "modifier": "private final", "type": "List<MonolingualTextValue>", "declarator": "repList = Collections.singletonList(rep)", "var_name": "repList"}, {"original_string": "private final SenseDocument sd1 = new SenseDocumentImpl(sid, repList, statementGroups, 1234);", "modifier": "private final", "type": "SenseDocument", "declarator": "sd1 = new SenseDocumentImpl(sid, repList, statementGroups, 1234)", "var_name": "sd1"}, {"original_string": "private final SenseDocument sd2 = new SenseDocumentImpl(sid, repList, statementGroups, 1234);", "modifier": "private final", "type": "SenseDocument", "declarator": "sd2 = new SenseDocumentImpl(sid, repList, statementGroups, 1234)", "var_name": "sd2"}, {"original_string": "private final String JSON_SENSE = \"{\\\"type\\\":\\\"sense\\\",\\\"id\\\":\\\"L42-S1\\\",\\\"glosses\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"rep\\\"}},\\\"claims\\\":{\\\"P42\\\":[{\\\"rank\\\":\\\"normal\\\",\\\"id\\\":\\\"MyId\\\",\\\"mainsnak\\\":{\\\"property\\\":\\\"P42\\\",\\\"snaktype\\\":\\\"somevalue\\\"},\\\"type\\\":\\\"statement\\\"}]},\\\"lastrevid\\\":1234}\";", "modifier": "private final", "type": "String", "declarator": "JSON_SENSE = \"{\\\"type\\\":\\\"sense\\\",\\\"id\\\":\\\"L42-S1\\\",\\\"glosses\\\":{\\\"en\\\":{\\\"language\\\":\\\"en\\\",\\\"value\\\":\\\"rep\\\"}},\\\"claims\\\":{\\\"P42\\\":[{\\\"rank\\\":\\\"normal\\\",\\\"id\\\":\\\"MyId\\\",\\\"mainsnak\\\":{\\\"property\\\":\\\"P42\\\",\\\"snaktype\\\":\\\"somevalue\\\"},\\\"type\\\":\\\"statement\\\"}]},\\\"lastrevid\\\":1234}\"", "var_name": "JSON_SENSE"}], "file": "wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/SenseDocumentImplTest.java"}, "test_case": {"identifier": "testDeleteStatements", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDeleteStatements() {\n\t\tStatement toRemove = statementGroups.get(0).getStatements().get(0);\n\t\tSenseDocument withoutStatement = sd1.withoutStatementIds(Collections.singleton(toRemove.getStatementId()));\n\t\tassertNotEquals(withoutStatement, sd1);\n\t}", "signature": "void testDeleteStatements()", "full_signature": "@Test public void testDeleteStatements()", "class_method_signature": "SenseDocumentImplTest.testDeleteStatements()", "testcase": true, "constructor": false, "invocations": ["get", "getStatements", "get", "withoutStatementIds", "singleton", "getStatementId", "assertNotEquals"]}, "focal_class": {"identifier": "SenseDocumentImpl", "superclass": "extends StatementDocumentImpl", "interfaces": "implements SenseDocument", "fields": [{"original_string": "private final Map<String,MonolingualTextValue> glosses;", "modifier": "private final", "type": "Map<String,MonolingualTextValue>", "declarator": "glosses", "var_name": "glosses"}], "methods": [{"identifier": "SenseDocumentImpl", "parameters": "(\n\t\t\tSenseIdValue id,\n\t\t\tList<MonolingualTextValue> glosses,\n\t\t\tList<StatementGroup> statements,\n\t\t\tlong revisionId)", "modifiers": "", "return": "", "signature": " SenseDocumentImpl(\n\t\t\tSenseIdValue id,\n\t\t\tList<MonolingualTextValue> glosses,\n\t\t\tList<StatementGroup> statements,\n\t\t\tlong revisionId)", "full_signature": "  SenseDocumentImpl(\n\t\t\tSenseIdValue id,\n\t\t\tList<MonolingualTextValue> glosses,\n\t\t\tList<StatementGroup> statements,\n\t\t\tlong revisionId)", "class_method_signature": "SenseDocumentImpl.SenseDocumentImpl(\n\t\t\tSenseIdValue id,\n\t\t\tList<MonolingualTextValue> glosses,\n\t\t\tList<StatementGroup> statements,\n\t\t\tlong revisionId)", "testcase": false, "constructor": true}, {"identifier": "SenseDocumentImpl", "parameters": "(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"glosses\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> glosses,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "modifiers": "@JsonCreator", "return": "", "signature": " SenseDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"glosses\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> glosses,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "full_signature": "@JsonCreator  SenseDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"glosses\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> glosses,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "class_method_signature": "SenseDocumentImpl.SenseDocumentImpl(\n\t\t\t@JsonProperty(\"id\") String jsonId,\n\t\t\t@JsonProperty(\"glosses\") @JsonDeserialize(contentAs=TermImpl.class) Map<String, MonolingualTextValue> glosses,\n\t\t\t@JsonProperty(\"claims\") Map<String, List<StatementImpl.PreStatement>> claims,\n\t\t\t@JsonProperty(\"lastrevid\") long revisionId,\n\t\t\t@JacksonInject(\"siteIri\") String siteIri)", "testcase": false, "constructor": true}, {"identifier": "SenseDocumentImpl", "parameters": "(\n\t\t\tSenseIdValue subject,\n\t\t\tMap<String, MonolingualTextValue> glosses,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tlong revisionId)", "modifiers": "private", "return": "", "signature": " SenseDocumentImpl(\n\t\t\tSenseIdValue subject,\n\t\t\tMap<String, MonolingualTextValue> glosses,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tlong revisionId)", "full_signature": "private  SenseDocumentImpl(\n\t\t\tSenseIdValue subject,\n\t\t\tMap<String, MonolingualTextValue> glosses,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tlong revisionId)", "class_method_signature": "SenseDocumentImpl.SenseDocumentImpl(\n\t\t\tSenseIdValue subject,\n\t\t\tMap<String, MonolingualTextValue> glosses,\n\t\t\tMap<String, List<Statement>> claims,\n\t\t\tlong revisionId)", "testcase": false, "constructor": true}, {"identifier": "constructTermMap", "parameters": "(List<MonolingualTextValue> terms)", "modifiers": "private static", "return": "Map<String, MonolingualTextValue>", "signature": "Map<String, MonolingualTextValue> constructTermMap(List<MonolingualTextValue> terms)", "full_signature": "private static Map<String, MonolingualTextValue> constructTermMap(List<MonolingualTextValue> terms)", "class_method_signature": "SenseDocumentImpl.constructTermMap(List<MonolingualTextValue> terms)", "testcase": false, "constructor": false}, {"identifier": "toTerm", "parameters": "(MonolingualTextValue term)", "modifiers": "private static", "return": "MonolingualTextValue", "signature": "MonolingualTextValue toTerm(MonolingualTextValue term)", "full_signature": "private static MonolingualTextValue toTerm(MonolingualTextValue term)", "class_method_signature": "SenseDocumentImpl.toTerm(MonolingualTextValue term)", "testcase": false, "constructor": false}, {"identifier": "getEntityId", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "SenseIdValue", "signature": "SenseIdValue getEntityId()", "full_signature": "@JsonIgnore @Override public SenseIdValue getEntityId()", "class_method_signature": "SenseDocumentImpl.getEntityId()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@JsonProperty(\"type\")", "return": "String", "signature": "String getType()", "full_signature": "@JsonProperty(\"type\") String getType()", "class_method_signature": "SenseDocumentImpl.getType()", "testcase": false, "constructor": false}, {"identifier": "getGlosses", "parameters": "()", "modifiers": "@JsonProperty(\"glosses\") @Override public", "return": "Map<String, MonolingualTextValue>", "signature": "Map<String, MonolingualTextValue> getGlosses()", "full_signature": "@JsonProperty(\"glosses\") @Override public Map<String, MonolingualTextValue> getGlosses()", "class_method_signature": "SenseDocumentImpl.getGlosses()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SenseDocumentImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SenseDocumentImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SenseDocumentImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "withRevisionId", "parameters": "(long newRevisionId)", "modifiers": "@Override public", "return": "SenseDocument", "signature": "SenseDocument withRevisionId(long newRevisionId)", "full_signature": "@Override public SenseDocument withRevisionId(long newRevisionId)", "class_method_signature": "SenseDocumentImpl.withRevisionId(long newRevisionId)", "testcase": false, "constructor": false}, {"identifier": "withGloss", "parameters": "(MonolingualTextValue gloss)", "modifiers": "@Override public", "return": "SenseDocument", "signature": "SenseDocument withGloss(MonolingualTextValue gloss)", "full_signature": "@Override public SenseDocument withGloss(MonolingualTextValue gloss)", "class_method_signature": "SenseDocumentImpl.withGloss(MonolingualTextValue gloss)", "testcase": false, "constructor": false}, {"identifier": "withStatement", "parameters": "(Statement statement)", "modifiers": "@Override public", "return": "SenseDocument", "signature": "SenseDocument withStatement(Statement statement)", "full_signature": "@Override public SenseDocument withStatement(Statement statement)", "class_method_signature": "SenseDocumentImpl.withStatement(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "withoutStatementIds", "parameters": "(Set<String> statementIds)", "modifiers": "@Override public", "return": "SenseDocument", "signature": "SenseDocument withoutStatementIds(Set<String> statementIds)", "full_signature": "@Override public SenseDocument withoutStatementIds(Set<String> statementIds)", "class_method_signature": "SenseDocumentImpl.withoutStatementIds(Set<String> statementIds)", "testcase": false, "constructor": false}], "file": "wdtk-datamodel/src/main/java/org/wikidata/wdtk/datamodel/implementation/SenseDocumentImpl.java"}, "focal_method": {"identifier": "withoutStatementIds", "parameters": "(Set<String> statementIds)", "modifiers": "@Override public", "return": "SenseDocument", "body": "@Override\n\tpublic SenseDocument withoutStatementIds(Set<String> statementIds) {\n\t\treturn new SenseDocumentImpl(getEntityId(),\n\t\t\t\tglosses,\n\t\t\t\tremoveStatements(statementIds, claims),\n\t\t\t\trevisionId);\n\t}", "signature": "SenseDocument withoutStatementIds(Set<String> statementIds)", "full_signature": "@Override public SenseDocument withoutStatementIds(Set<String> statementIds)", "class_method_signature": "SenseDocumentImpl.withoutStatementIds(Set<String> statementIds)", "testcase": false, "constructor": false, "invocations": ["getEntityId", "removeStatements"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}