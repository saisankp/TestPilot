{"test_class": {"identifier": "EmbeddedPackageInstallableTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/net/adamcin/oakpal/api/EmbeddedPackageInstallableTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashCode() {\n        EmbeddedPackageInstallable self = new EmbeddedPackageInstallable(\n                PackageId.fromString(\"test:test:1\"),\n                \"/some/path\",\n                PackageId.fromString(\"test:testtest:1\"));\n\n        assertEquals(\"expect self to equal self\", self.hashCode(), self.hashCode());\n\n        assertEquals(\"expect self to equal other same params\", self.hashCode(),\n                new EmbeddedPackageInstallable(\n                        self.getParentId(),\n                        self.getJcrPath(),\n                        self.getEmbeddedId()).hashCode());\n        assertNotEquals(\"expect self to equal other different path\", self.hashCode(),\n                new EmbeddedPackageInstallable(\n                        self.getParentId(),\n                        \"/some/other/path\",\n                        self.getEmbeddedId()).hashCode());\n        assertNotEquals(\"expect self to equal other different parent id\", self.hashCode(),\n                new EmbeddedPackageInstallable(\n                        self.getEmbeddedId(),\n                        self.getJcrPath(),\n                        self.getEmbeddedId()).hashCode());\n        assertNotEquals(\"expect self to equal other different embedded id\", self.hashCode(),\n                new EmbeddedPackageInstallable(\n                        self.getParentId(),\n                        self.getJcrPath(),\n                        self.getParentId()).hashCode());\n    }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "EmbeddedPackageInstallableTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["fromString", "fromString", "assertEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode", "getParentId", "getJcrPath", "getEmbeddedId", "assertNotEquals", "hashCode", "hashCode", "getParentId", "getEmbeddedId", "assertNotEquals", "hashCode", "hashCode", "getEmbeddedId", "getJcrPath", "getEmbeddedId", "assertNotEquals", "hashCode", "hashCode", "getParentId", "getJcrPath", "getParentId"]}, "focal_class": {"identifier": "EmbeddedPackageInstallable", "superclass": "", "interfaces": "implements SlingOpenable<JcrPackage>", "fields": [{"original_string": "private final @NotNull PackageId parentId;", "modifier": "private final @NotNull", "type": "PackageId", "declarator": "parentId", "var_name": "parentId"}, {"original_string": "private final @NotNull String jcrPath;", "modifier": "private final @NotNull", "type": "String", "declarator": "jcrPath", "var_name": "jcrPath"}, {"original_string": "private final @NotNull PackageId embeddedId;", "modifier": "private final @NotNull", "type": "PackageId", "declarator": "embeddedId", "var_name": "embeddedId"}], "methods": [{"identifier": "EmbeddedPackageInstallable", "parameters": "(final @NotNull PackageId parentId,\n                                      final @NotNull String jcrPath,\n                                      final @NotNull PackageId embeddedId)", "modifiers": "public", "return": "", "signature": " EmbeddedPackageInstallable(final @NotNull PackageId parentId,\n                                      final @NotNull String jcrPath,\n                                      final @NotNull PackageId embeddedId)", "full_signature": "public  EmbeddedPackageInstallable(final @NotNull PackageId parentId,\n                                      final @NotNull String jcrPath,\n                                      final @NotNull PackageId embeddedId)", "class_method_signature": "EmbeddedPackageInstallable.EmbeddedPackageInstallable(final @NotNull PackageId parentId,\n                                      final @NotNull String jcrPath,\n                                      final @NotNull PackageId embeddedId)", "testcase": false, "constructor": true}, {"identifier": "getParentId", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "PackageId", "signature": "PackageId getParentId()", "full_signature": "@NotNull @Override public PackageId getParentId()", "class_method_signature": "EmbeddedPackageInstallable.getParentId()", "testcase": false, "constructor": false}, {"identifier": "getJcrPath", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getJcrPath()", "full_signature": "@NotNull @Override public String getJcrPath()", "class_method_signature": "EmbeddedPackageInstallable.getJcrPath()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedId", "parameters": "()", "modifiers": "@NotNull public", "return": "PackageId", "signature": "PackageId getEmbeddedId()", "full_signature": "@NotNull public PackageId getEmbeddedId()", "class_method_signature": "EmbeddedPackageInstallable.getEmbeddedId()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "EmbeddedPackageInstallable.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EmbeddedPackageInstallable.hashCode()", "testcase": false, "constructor": false}], "file": "api/src/main/java/net/adamcin/oakpal/api/EmbeddedPackageInstallable.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return Objects.hash(parentId, jcrPath, embeddedId);\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EmbeddedPackageInstallable.hashCode()", "testcase": false, "constructor": false, "invocations": ["hash"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}