{"test_class": {"identifier": "TestPropertyStrategy", "superclass": "extends TagStrategyTestBase", "interfaces": "", "fields": [], "file": "org.jvoicexml.profile.vxml21/src/test/java/org/jvoicexml/profile/vxml21/tagstrategy/TestPropertyStrategy.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        final VoiceXmlDocument document = createDocument();\n        final Vxml vxml = document.getVxml();\n        final Property property1 = vxml.appendChild(Property.class);\n        final String name = \"test\";\n        final String value1 = \"value1\";\n        property1.setName(name);\n        property1.setValue(value1);\n        final Form form = createForm();\n        final Property property2 = form.appendChild(Property.class);\n        final String value2 = \"value2\";\n        property2.setName(name);\n        property2.setValue(value2);\n\n        final VoiceXmlInterpreterContext context = getContext();\n        Assert.assertNull(context.getProperty(name));\n\n        final PropertyStrategy strategy1 = new PropertyStrategy();\n        try {\n            executeTagStrategy(property1, strategy1);\n        } catch (JVoiceXMLEvent e) {\n            Assert.fail(e.getMessage());\n        }\n        Assert.assertEquals(value1, context.getProperty(name));\n        context.enterScope(Scope.DIALOG);\n        Assert.assertEquals(value1, context.getProperty(name));\n        final PropertyStrategy strategy2 = new PropertyStrategy();\n        try {\n            executeTagStrategy(property2, strategy2);\n        } catch (JVoiceXMLEvent e) {\n            Assert.fail(e.getMessage());\n        }\n        Assert.assertEquals(value2, context.getProperty(name));\n        context.exitScope(Scope.DIALOG);\n        Assert.assertEquals(value1, context.getProperty(name));\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "TestPropertyStrategy.testExecute()", "testcase": true, "constructor": false, "invocations": ["createDocument", "getVxml", "appendChild", "setName", "setValue", "createForm", "appendChild", "setName", "setValue", "getContext", "assertNull", "getProperty", "executeTagStrategy", "fail", "getMessage", "assertEquals", "getProperty", "enterScope", "assertEquals", "getProperty", "executeTagStrategy", "fail", "getMessage", "assertEquals", "getProperty", "exitScope", "assertEquals", "getProperty"]}, "focal_class": {"identifier": "PropertyStrategy", "superclass": "extends AbstractTagStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(PropertyStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(PropertyStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String value;", "modifier": "private", "type": "String", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "PropertyStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " PropertyStrategy()", "full_signature": "public  PropertyStrategy()", "class_method_signature": "PropertyStrategy.PropertyStrategy()", "testcase": false, "constructor": true}, {"identifier": "getEvalAttributes", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getEvalAttributes()", "full_signature": "public Collection<String> getEvalAttributes()", "class_method_signature": "PropertyStrategy.getEvalAttributes()", "testcase": false, "constructor": false}, {"identifier": "validateAttributes", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "void", "signature": "void validateAttributes(final DataModel model)", "full_signature": "@Override public void validateAttributes(final DataModel model)", "class_method_signature": "PropertyStrategy.validateAttributes(final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "PropertyStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}, {"identifier": "executeLocal", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "@Override public", "return": "void", "signature": "void executeLocal(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "@Override public void executeLocal(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "PropertyStrategy.executeLocal(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.profile.vxml21/src/main/java/org/jvoicexml/profile/vxml21/tagstrategy/PropertyStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "body": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node) throws JVoiceXMLEvent {\n        context.setProperty(name, value);\n        LOGGER.info(\"set property '\" + name + \"' to value '\" + value + \"'\");\n    }", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "PropertyStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false, "invocations": ["setProperty", "info"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}