{"test_class": {"identifier": "BaseTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/quantiply/samza/task/BaseTaskTest.java"}, "test_case": {"identifier": "getMessageIdFromSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getMessageIdFromSource() {\n        MyTask myTask = new MyTask();\n        String offset = \"12345\";\n        SystemStreamPartition ssp = new SystemStreamPartition(\"fakeSystem\", \"fakeStream\", new Partition(56789));\n        IncomingMessageEnvelope envelope = new IncomingMessageEnvelope(ssp, offset, null, null);\n        assertEquals(\"fakeStream-56789-12345\", myTask.getMessageIdFromSource(envelope));\n    }", "signature": "void getMessageIdFromSource()", "full_signature": "@Test public void getMessageIdFromSource()", "class_method_signature": "BaseTaskTest.getMessageIdFromSource()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMessageIdFromSource"]}, "focal_class": {"identifier": "BaseTask", "superclass": "", "interfaces": "implements InitableTask, StreamTask, ClosableTask", "fields": [{"original_string": "protected TaskInfo taskInfo;", "modifier": "protected", "type": "TaskInfo", "declarator": "taskInfo", "var_name": "taskInfo"}, {"original_string": "protected Config config;", "modifier": "protected", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "protected Logger logger = LoggerFactory.getLogger(new Object(){}.getClass().getEnclosingClass());", "modifier": "protected", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(new Object(){}.getClass().getEnclosingClass())", "var_name": "logger"}, {"original_string": "private final Map<String, StreamMsgHandler> handlerMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, StreamMsgHandler>", "declarator": "handlerMap = new HashMap<>()", "var_name": "handlerMap"}, {"original_string": "private Optional<StreamMsgHandler> defaultHandler = Optional.empty();", "modifier": "private", "type": "Optional<StreamMsgHandler>", "declarator": "defaultHandler = Optional.empty()", "var_name": "defaultHandler"}, {"original_string": "private MetricAdaptor metricAdaptor;", "modifier": "private", "type": "MetricAdaptor", "declarator": "metricAdaptor", "var_name": "metricAdaptor"}, {"original_string": "private ErrorHandler errorHandler;", "modifier": "private", "type": "ErrorHandler", "declarator": "errorHandler", "var_name": "errorHandler"}], "methods": [{"identifier": "getErrorHandler", "parameters": "()", "modifiers": "public", "return": "ErrorHandler", "signature": "ErrorHandler getErrorHandler()", "full_signature": "public ErrorHandler getErrorHandler()", "class_method_signature": "BaseTask.getErrorHandler()", "testcase": false, "constructor": false}, {"identifier": "handleExpectedError", "parameters": "(IncomingMessageEnvelope envelope, Exception e)", "modifiers": "public", "return": "void", "signature": "void handleExpectedError(IncomingMessageEnvelope envelope, Exception e)", "full_signature": "public void handleExpectedError(IncomingMessageEnvelope envelope, Exception e)", "class_method_signature": "BaseTask.handleExpectedError(IncomingMessageEnvelope envelope, Exception e)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Config config, TaskContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(Config config, TaskContext context)", "full_signature": "@Override public void init(Config config, TaskContext context)", "class_method_signature": "BaseTask.init(Config config, TaskContext context)", "testcase": false, "constructor": false}, {"identifier": "validateHandlers", "parameters": "(TaskContext context)", "modifiers": "private", "return": "void", "signature": "void validateHandlers(TaskContext context)", "full_signature": "private void validateHandlers(TaskContext context)", "class_method_signature": "BaseTask.validateHandlers(TaskContext context)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(IncomingMessageEnvelope envelope, MessageCollector collector, TaskCoordinator coordinator)", "modifiers": "@Override public final", "return": "void", "signature": "void process(IncomingMessageEnvelope envelope, MessageCollector collector, TaskCoordinator coordinator)", "full_signature": "@Override public final void process(IncomingMessageEnvelope envelope, MessageCollector collector, TaskCoordinator coordinator)", "class_method_signature": "BaseTask.process(IncomingMessageEnvelope envelope, MessageCollector collector, TaskCoordinator coordinator)", "testcase": false, "constructor": false}, {"identifier": "getStreamMsgHandler", "parameters": "(IncomingMessageEnvelope envelope)", "modifiers": "private", "return": "StreamMsgHandler", "signature": "StreamMsgHandler getStreamMsgHandler(IncomingMessageEnvelope envelope)", "full_signature": "private StreamMsgHandler getStreamMsgHandler(IncomingMessageEnvelope envelope)", "class_method_signature": "BaseTask.getStreamMsgHandler(IncomingMessageEnvelope envelope)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void close()", "full_signature": "@Override public final void close()", "class_method_signature": "BaseTask.close()", "testcase": false, "constructor": false}, {"identifier": "_close", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void _close()", "full_signature": "protected void _close()", "class_method_signature": "BaseTask._close()", "testcase": false, "constructor": false}, {"identifier": "_init", "parameters": "(Config config, TaskContext context, MetricAdaptor metricAdaptor)", "modifiers": "protected abstract", "return": "void", "signature": "void _init(Config config, TaskContext context, MetricAdaptor metricAdaptor)", "full_signature": "protected abstract void _init(Config config, TaskContext context, MetricAdaptor metricAdaptor)", "class_method_signature": "BaseTask._init(Config config, TaskContext context, MetricAdaptor metricAdaptor)", "testcase": false, "constructor": false}, {"identifier": "registerDefaultHandler", "parameters": "(Process processFunc)", "modifiers": "protected", "return": "void", "signature": "void registerDefaultHandler(Process processFunc)", "full_signature": "protected void registerDefaultHandler(Process processFunc)", "class_method_signature": "BaseTask.registerDefaultHandler(Process processFunc)", "testcase": false, "constructor": false}, {"identifier": "registerDefaultHandler", "parameters": "(ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "modifiers": "protected", "return": "void", "signature": "void registerDefaultHandler(ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "full_signature": "protected void registerDefaultHandler(ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "class_method_signature": "BaseTask.registerDefaultHandler(ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "testcase": false, "constructor": false}, {"identifier": "registerHandler", "parameters": "(String logicalStreamName, Process processFunc)", "modifiers": "protected", "return": "void", "signature": "void registerHandler(String logicalStreamName, Process processFunc)", "full_signature": "protected void registerHandler(String logicalStreamName, Process processFunc)", "class_method_signature": "BaseTask.registerHandler(String logicalStreamName, Process processFunc)", "testcase": false, "constructor": false}, {"identifier": "registerHandler", "parameters": "(String logicalStreamName, ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "modifiers": "protected", "return": "void", "signature": "void registerHandler(String logicalStreamName, ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "full_signature": "protected void registerHandler(String logicalStreamName, ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "class_method_signature": "BaseTask.registerHandler(String logicalStreamName, ProcessWithMetrics<M> processFunc, StreamMetricFactory<M> metricFactory)", "testcase": false, "constructor": false}, {"identifier": "newStreamMsgHandler", "parameters": "(Optional<String> logicalStreamName, ProcessWithMetrics<M> processWithMetrics, StreamMetricFactory<M> metricFactory)", "modifiers": "private", "return": "StreamMsgHandler", "signature": "StreamMsgHandler newStreamMsgHandler(Optional<String> logicalStreamName, ProcessWithMetrics<M> processWithMetrics, StreamMetricFactory<M> metricFactory)", "full_signature": "private StreamMsgHandler newStreamMsgHandler(Optional<String> logicalStreamName, ProcessWithMetrics<M> processWithMetrics, StreamMetricFactory<M> metricFactory)", "class_method_signature": "BaseTask.newStreamMsgHandler(Optional<String> logicalStreamName, ProcessWithMetrics<M> processWithMetrics, StreamMetricFactory<M> metricFactory)", "testcase": false, "constructor": false}, {"identifier": "newStreamMsgHandler", "parameters": "(Optional<String> streamName, Process process)", "modifiers": "private", "return": "StreamMsgHandler", "signature": "StreamMsgHandler newStreamMsgHandler(Optional<String> streamName, Process process)", "full_signature": "private StreamMsgHandler newStreamMsgHandler(Optional<String> streamName, Process process)", "class_method_signature": "BaseTask.newStreamMsgHandler(Optional<String> streamName, Process process)", "testcase": false, "constructor": false}, {"identifier": "getStreamMetricPrefix", "parameters": "(Optional<String> streamName)", "modifiers": "private", "return": "String", "signature": "String getStreamMetricPrefix(Optional<String> streamName)", "full_signature": "private String getStreamMetricPrefix(Optional<String> streamName)", "class_method_signature": "BaseTask.getStreamMetricPrefix(Optional<String> streamName)", "testcase": false, "constructor": false}, {"identifier": "getMessageIdFromSource", "parameters": "(IncomingMessageEnvelope envelope)", "modifiers": "protected", "return": "String", "signature": "String getMessageIdFromSource(IncomingMessageEnvelope envelope)", "full_signature": "protected String getMessageIdFromSource(IncomingMessageEnvelope envelope)", "class_method_signature": "BaseTask.getMessageIdFromSource(IncomingMessageEnvelope envelope)", "testcase": false, "constructor": false}, {"identifier": "updateLagMetricsForCamusRecord", "parameters": "(IndexedRecord msg, long tsNowMs, EventStreamMetrics metrics)", "modifiers": "protected", "return": "void", "signature": "void updateLagMetricsForCamusRecord(IndexedRecord msg, long tsNowMs, EventStreamMetrics metrics)", "full_signature": "protected void updateLagMetricsForCamusRecord(IndexedRecord msg, long tsNowMs, EventStreamMetrics metrics)", "class_method_signature": "BaseTask.updateLagMetricsForCamusRecord(IndexedRecord msg, long tsNowMs, EventStreamMetrics metrics)", "testcase": false, "constructor": false}, {"identifier": "getCamusHeaders", "parameters": "(GenericRecord eventHeaders, Schema headerSchema, long tsNow)", "modifiers": "protected", "return": "GenericData.Record", "signature": "GenericData.Record getCamusHeaders(GenericRecord eventHeaders, Schema headerSchema, long tsNow)", "full_signature": "protected GenericData.Record getCamusHeaders(GenericRecord eventHeaders, Schema headerSchema, long tsNow)", "class_method_signature": "BaseTask.getCamusHeaders(GenericRecord eventHeaders, Schema headerSchema, long tsNow)", "testcase": false, "constructor": false}, {"identifier": "copyCamusTimestamp", "parameters": "(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder)", "modifiers": "private", "return": "boolean", "signature": "boolean copyCamusTimestamp(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder)", "full_signature": "private boolean copyCamusTimestamp(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder)", "class_method_signature": "BaseTask.copyCamusTimestamp(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder)", "testcase": false, "constructor": false}, {"identifier": "copyAvroField", "parameters": "(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder, String field)", "modifiers": "private", "return": "boolean", "signature": "boolean copyAvroField(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder, String field)", "full_signature": "private boolean copyAvroField(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder, String field)", "class_method_signature": "BaseTask.copyAvroField(GenericRecord src, Schema dstSchema, GenericRecordBuilder dstBuilder, String field)", "testcase": false, "constructor": false}, {"identifier": "getNumPartitionsForSystemStream", "parameters": "(SystemStream systemStream)", "modifiers": "protected", "return": "int", "signature": "int getNumPartitionsForSystemStream(SystemStream systemStream)", "full_signature": "protected int getNumPartitionsForSystemStream(SystemStream systemStream)", "class_method_signature": "BaseTask.getNumPartitionsForSystemStream(SystemStream systemStream)", "testcase": false, "constructor": false}, {"identifier": "getSystemStream", "parameters": "(String logicalStreamName)", "modifiers": "protected", "return": "SystemStream", "signature": "SystemStream getSystemStream(String logicalStreamName)", "full_signature": "protected SystemStream getSystemStream(String logicalStreamName)", "class_method_signature": "BaseTask.getSystemStream(String logicalStreamName)", "testcase": false, "constructor": false}, {"identifier": "getStreamName", "parameters": "(String logicalStreamName)", "modifiers": "protected", "return": "String", "signature": "String getStreamName(String logicalStreamName)", "full_signature": "protected String getStreamName(String logicalStreamName)", "class_method_signature": "BaseTask.getStreamName(String logicalStreamName)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLogger()", "full_signature": "protected Logger getLogger()", "class_method_signature": "BaseTask.getLogger()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(String jobName)", "modifiers": "public static", "return": "void", "signature": "void run(String jobName)", "full_signature": "public static void run(String jobName)", "class_method_signature": "BaseTask.run(String jobName)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/quantiply/samza/task/BaseTask.java"}, "focal_method": {"identifier": "getMessageIdFromSource", "parameters": "(IncomingMessageEnvelope envelope)", "modifiers": "protected", "return": "String", "body": "protected String getMessageIdFromSource(IncomingMessageEnvelope envelope) {\n        SystemStreamPartition ssp = envelope.getSystemStreamPartition();\n        return String.format(\"%s-%d-%s\", ssp.getStream(), ssp.getPartition().getPartitionId(), envelope.getOffset());\n    }", "signature": "String getMessageIdFromSource(IncomingMessageEnvelope envelope)", "full_signature": "protected String getMessageIdFromSource(IncomingMessageEnvelope envelope)", "class_method_signature": "BaseTask.getMessageIdFromSource(IncomingMessageEnvelope envelope)", "testcase": false, "constructor": false, "invocations": ["getSystemStreamPartition", "format", "getStream", "getPartitionId", "getPartition", "getOffset"]}, "repository": {"repo_id": 23237318, "url": "https://github.com/quantiply/rico", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 5128, "license": "licensed"}}