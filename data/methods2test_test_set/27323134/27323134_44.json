{"test_class": {"identifier": "PostUpdatedWatchedStatusTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Media FAKE_MEDIA = Media.PROGRAM;", "modifier": "private static final", "type": "Media", "declarator": "FAKE_MEDIA = Media.PROGRAM", "var_name": "FAKE_MEDIA"}, {"original_string": "private static final int FAKE_ID = -1;", "modifier": "private static final", "type": "int", "declarator": "FAKE_ID = -1", "var_name": "FAKE_ID"}, {"original_string": "private static final boolean FAKE_WATCHED = false;", "modifier": "private static final", "type": "boolean", "declarator": "FAKE_WATCHED = false", "var_name": "FAKE_WATCHED"}, {"original_string": "private PostUpdatedWatchedStatus postUpdatedWatchedStatus;", "modifier": "private", "type": "PostUpdatedWatchedStatus", "declarator": "postUpdatedWatchedStatus", "var_name": "postUpdatedWatchedStatus"}, {"original_string": "@Mock\n    private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock\n    private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock\n    private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock\n    private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}, {"original_string": "@Mock\n    private MediaItemRepository mockMediaItemRepository;", "modifier": "@Mock\n    private", "type": "MediaItemRepository", "declarator": "mockMediaItemRepository", "var_name": "mockMediaItemRepository"}], "file": "mythtv-player/src/test/java/org/mythtv/android/domain/interactor/PostUpdatedWatchedStatusTest.java"}, "test_case": {"identifier": "testPostUpdatedRecordedWatchedStatusDynamicUseCaseObservableHappyCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPostUpdatedRecordedWatchedStatusDynamicUseCaseObservableHappyCase() {\n\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put( \"WATCHED\", FAKE_WATCHED );\n        postUpdatedWatchedStatus.buildUseCaseObservable( parameters );\n\n        verify( mockMediaItemRepository ).updateWatchedStatus( FAKE_MEDIA, FAKE_ID, FAKE_WATCHED );\n        verifyNoMoreInteractions( mockMediaItemRepository );\n        verifyZeroInteractions( mockMediaItemRepository );\n        verifyZeroInteractions( mockThreadExecutor );\n        verifyZeroInteractions( mockPostExecutionThread );\n\n    }", "signature": "void testPostUpdatedRecordedWatchedStatusDynamicUseCaseObservableHappyCase()", "full_signature": "@Test public void testPostUpdatedRecordedWatchedStatusDynamicUseCaseObservableHappyCase()", "class_method_signature": "PostUpdatedWatchedStatusTest.testPostUpdatedRecordedWatchedStatusDynamicUseCaseObservableHappyCase()", "testcase": true, "constructor": false, "invocations": ["put", "buildUseCaseObservable", "updateWatchedStatus", "verify", "verifyNoMoreInteractions", "verifyZeroInteractions", "verifyZeroInteractions", "verifyZeroInteractions"]}, "focal_class": {"identifier": "PostUpdatedWatchedStatus", "superclass": "extends DynamicUseCase", "interfaces": "", "fields": [{"original_string": "private final MediaItemRepository mediaItemRepository;", "modifier": "private final", "type": "MediaItemRepository", "declarator": "mediaItemRepository", "var_name": "mediaItemRepository"}, {"original_string": "private final Media media;", "modifier": "private final", "type": "Media", "declarator": "media", "var_name": "media"}, {"original_string": "private final int id;", "modifier": "private final", "type": "int", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "PostUpdatedWatchedStatus", "parameters": "( final Media media, final int id, final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "modifiers": "public", "return": "", "signature": " PostUpdatedWatchedStatus( final Media media, final int id, final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "full_signature": "public  PostUpdatedWatchedStatus( final Media media, final int id, final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "class_method_signature": "PostUpdatedWatchedStatus.PostUpdatedWatchedStatus( final Media media, final int id, final MediaItemRepository mediaItemRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "testcase": false, "constructor": true}, {"identifier": "buildUseCaseObservable", "parameters": "( Map parameters )", "modifiers": "@Override protected", "return": "Observable", "signature": "Observable buildUseCaseObservable( Map parameters )", "full_signature": "@Override protected Observable buildUseCaseObservable( Map parameters )", "class_method_signature": "PostUpdatedWatchedStatus.buildUseCaseObservable( Map parameters )", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/domain/interactor/PostUpdatedWatchedStatus.java"}, "focal_method": {"identifier": "buildUseCaseObservable", "parameters": "( Map parameters )", "modifiers": "@Override protected", "return": "Observable", "body": "@Override\n    protected Observable buildUseCaseObservable( Map parameters ) {\n\n        final boolean watched = (Boolean) parameters.get( \"WATCHED\" );\n\n        return mediaItemRepository.updateWatchedStatus( this.media, this.id, watched );\n    }", "signature": "Observable buildUseCaseObservable( Map parameters )", "full_signature": "@Override protected Observable buildUseCaseObservable( Map parameters )", "class_method_signature": "PostUpdatedWatchedStatus.buildUseCaseObservable( Map parameters )", "testcase": false, "constructor": false, "invocations": ["get", "updateWatchedStatus"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}