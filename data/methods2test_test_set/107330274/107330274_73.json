{"test_class": {"identifier": "StringExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/StringExtTest.java"}, "test_case": {"identifier": "testNameFromJavaBeanGetter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNameFromJavaBeanGetter() {\n        assertNameFromJavaBeanGetterReturnsName(\"getMyName\", \"myName\");\n        assertNameFromJavaBeanGetterReturnsName(\"isMyName\", \"myName\");\n        assertNameFromJavaBeanGetterReturnsName(\"hasMyName\", \"myName\");\n\n        assertNameFromJavaBeanGetterReturnsError(\"badPrefix\");\n        assertNameFromJavaBeanGetterReturnsError(\"\");\n        assertNameFromJavaBeanGetterReturnsError(\"has\");\n    }", "signature": "void testNameFromJavaBeanGetter()", "full_signature": "@Test public void testNameFromJavaBeanGetter()", "class_method_signature": "StringExtTest.testNameFromJavaBeanGetter()", "testcase": true, "constructor": false, "invocations": ["assertNameFromJavaBeanGetterReturnsName", "assertNameFromJavaBeanGetterReturnsName", "assertNameFromJavaBeanGetterReturnsName", "assertNameFromJavaBeanGetterReturnsError", "assertNameFromJavaBeanGetterReturnsError", "assertNameFromJavaBeanGetterReturnsError"]}, "focal_class": {"identifier": "StringExt", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Pattern COMMA_SPLIT_RE = Pattern.compile(\"\\\\s*,\\\\s*\");", "modifier": "public final static", "type": "Pattern", "declarator": "COMMA_SPLIT_RE = Pattern.compile(\"\\\\s*,\\\\s*\")", "var_name": "COMMA_SPLIT_RE"}, {"original_string": "public final static Pattern DOT_SPLIT_RE = Pattern.compile(\"\\\\s*\\\\.\\\\s*\");", "modifier": "public final static", "type": "Pattern", "declarator": "DOT_SPLIT_RE = Pattern.compile(\"\\\\s*\\\\.\\\\s*\")", "var_name": "DOT_SPLIT_RE"}, {"original_string": "public final static Pattern SEMICOLON_SPLIT_RE = Pattern.compile(\"\\\\s*;\\\\s*\");", "modifier": "public final static", "type": "Pattern", "declarator": "SEMICOLON_SPLIT_RE = Pattern.compile(\"\\\\s*;\\\\s*\")", "var_name": "SEMICOLON_SPLIT_RE"}, {"original_string": "public final static Pattern COLON_SPLIT_RE = Pattern.compile(\"\\\\s*:\\\\s*\");", "modifier": "public final static", "type": "Pattern", "declarator": "COLON_SPLIT_RE = Pattern.compile(\"\\\\s*:\\\\s*\")", "var_name": "COLON_SPLIT_RE"}, {"original_string": "public final static Pattern EQUAL_SPLIT_RE = Pattern.compile(\"\\\\s*=\\\\s*\");", "modifier": "public final static", "type": "Pattern", "declarator": "EQUAL_SPLIT_RE = Pattern.compile(\"\\\\s*=\\\\s*\")", "var_name": "EQUAL_SPLIT_RE"}, {"original_string": "private static ConcurrentMap<Class<? extends Enum>, Map<String, Object>> ENUM_NAMES_MAP = new ConcurrentHashMap<>();", "modifier": "private static", "type": "ConcurrentMap<Class<? extends Enum>, Map<String, Object>>", "declarator": "ENUM_NAMES_MAP = new ConcurrentHashMap<>()", "var_name": "ENUM_NAMES_MAP"}], "methods": [{"identifier": "StringExt", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringExt()", "full_signature": "private  StringExt()", "class_method_signature": "StringExt.StringExt()", "testcase": false, "constructor": true}, {"identifier": "isNotEmpty", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(String s)", "full_signature": "public static boolean isNotEmpty(String s)", "class_method_signature": "StringExt.isNotEmpty(String s)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String s)", "full_signature": "public static boolean isEmpty(String s)", "class_method_signature": "StringExt.isEmpty(String s)", "testcase": false, "constructor": false}, {"identifier": "safeTrim", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String safeTrim(String s)", "full_signature": "public static String safeTrim(String s)", "class_method_signature": "StringExt.safeTrim(String s)", "testcase": false, "constructor": false}, {"identifier": "nonNull", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String nonNull(String value)", "full_signature": "public static String nonNull(String value)", "class_method_signature": "StringExt.nonNull(String value)", "testcase": false, "constructor": false}, {"identifier": "takeUntil", "parameters": "(String value, String endMarker)", "modifiers": "public static", "return": "String", "signature": "String takeUntil(String value, String endMarker)", "full_signature": "public static String takeUntil(String value, String endMarker)", "class_method_signature": "StringExt.takeUntil(String value, String endMarker)", "testcase": false, "constructor": false}, {"identifier": "applyIfNonEmpty", "parameters": "(String value, Consumer<String> consumer)", "modifiers": "public static", "return": "void", "signature": "void applyIfNonEmpty(String value, Consumer<String> consumer)", "full_signature": "public static void applyIfNonEmpty(String value, Consumer<String> consumer)", "class_method_signature": "StringExt.applyIfNonEmpty(String value, Consumer<String> consumer)", "testcase": false, "constructor": false}, {"identifier": "runIfEmpty", "parameters": "(String value, Runnable action)", "modifiers": "public static", "return": "void", "signature": "void runIfEmpty(String value, Runnable action)", "full_signature": "public static void runIfEmpty(String value, Runnable action)", "class_method_signature": "StringExt.runIfEmpty(String value, Runnable action)", "testcase": false, "constructor": false}, {"identifier": "trimAndApplyIfNonEmpty", "parameters": "(String value, Consumer<String> consumer)", "modifiers": "public static", "return": "void", "signature": "void trimAndApplyIfNonEmpty(String value, Consumer<String> consumer)", "full_signature": "public static void trimAndApplyIfNonEmpty(String value, Consumer<String> consumer)", "class_method_signature": "StringExt.trimAndApplyIfNonEmpty(String value, Consumer<String> consumer)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(Collection<String> stringCollection, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String concatenate(Collection<String> stringCollection, String delimiter)", "full_signature": "public static String concatenate(Collection<String> stringCollection, String delimiter)", "class_method_signature": "StringExt.concatenate(Collection<String> stringCollection, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(T[] array, String delimiter, Function<T, String> mapping)", "modifiers": "public static", "return": "String", "signature": "String concatenate(T[] array, String delimiter, Function<T, String> mapping)", "full_signature": "public static String concatenate(T[] array, String delimiter, Function<T, String> mapping)", "class_method_signature": "StringExt.concatenate(T[] array, String delimiter, Function<T, String> mapping)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(Object[] array, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String concatenate(Object[] array, String delimiter)", "full_signature": "public static String concatenate(Object[] array, String delimiter)", "class_method_signature": "StringExt.concatenate(Object[] array, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(E[] array, String delimiter)", "modifiers": "public static", "return": "String", "signature": "String concatenate(E[] array, String delimiter)", "full_signature": "public static String concatenate(E[] array, String delimiter)", "class_method_signature": "StringExt.concatenate(E[] array, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(Class<E> enumType, String delimiter, Function<E, Boolean> filter)", "modifiers": "public static", "return": "String", "signature": "String concatenate(Class<E> enumType, String delimiter, Function<E, Boolean> filter)", "full_signature": "public static String concatenate(Class<E> enumType, String delimiter, Function<E, Boolean> filter)", "class_method_signature": "StringExt.concatenate(Class<E> enumType, String delimiter, Function<E, Boolean> filter)", "testcase": false, "constructor": false}, {"identifier": "getNonEmptyOrDefault", "parameters": "(String value, String defaultValue)", "modifiers": "public static", "return": "String", "signature": "String getNonEmptyOrDefault(String value, String defaultValue)", "full_signature": "public static String getNonEmptyOrDefault(String value, String defaultValue)", "class_method_signature": "StringExt.getNonEmptyOrDefault(String value, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "firstNonEmpty", "parameters": "(String... values)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> firstNonEmpty(String... values)", "full_signature": "public static Optional<String> firstNonEmpty(String... values)", "class_method_signature": "StringExt.firstNonEmpty(String... values)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(List<String> list)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> trim(List<String> list)", "full_signature": "public static List<String> trim(List<String> list)", "class_method_signature": "StringExt.trim(List<String> list)", "testcase": false, "constructor": false}, {"identifier": "getCommaSeparator", "parameters": "()", "modifiers": "public static", "return": "Pattern", "signature": "Pattern getCommaSeparator()", "full_signature": "public static Pattern getCommaSeparator()", "class_method_signature": "StringExt.getCommaSeparator()", "testcase": false, "constructor": false}, {"identifier": "getDotSeparator", "parameters": "()", "modifiers": "public static", "return": "Pattern", "signature": "Pattern getDotSeparator()", "full_signature": "public static Pattern getDotSeparator()", "class_method_signature": "StringExt.getDotSeparator()", "testcase": false, "constructor": false}, {"identifier": "getSemicolonSeparator", "parameters": "()", "modifiers": "public static", "return": "Pattern", "signature": "Pattern getSemicolonSeparator()", "full_signature": "public static Pattern getSemicolonSeparator()", "class_method_signature": "StringExt.getSemicolonSeparator()", "testcase": false, "constructor": false}, {"identifier": "splitByComma", "parameters": "(String value)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitByComma(String value)", "full_signature": "public static List<String> splitByComma(String value)", "class_method_signature": "StringExt.splitByComma(String value)", "testcase": false, "constructor": false}, {"identifier": "splitByCommaIntoSet", "parameters": "(String value)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> splitByCommaIntoSet(String value)", "full_signature": "public static Set<String> splitByCommaIntoSet(String value)", "class_method_signature": "StringExt.splitByCommaIntoSet(String value)", "testcase": false, "constructor": false}, {"identifier": "splitByDot", "parameters": "(String value)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitByDot(String value)", "full_signature": "public static List<String> splitByDot(String value)", "class_method_signature": "StringExt.splitByDot(String value)", "testcase": false, "constructor": false}, {"identifier": "parseEnumIgnoreCase", "parameters": "(String enumName, Class<E> enumType)", "modifiers": "public static", "return": "E", "signature": "E parseEnumIgnoreCase(String enumName, Class<E> enumType)", "full_signature": "public static E parseEnumIgnoreCase(String enumName, Class<E> enumType)", "class_method_signature": "StringExt.parseEnumIgnoreCase(String enumName, Class<E> enumType)", "testcase": false, "constructor": false}, {"identifier": "parseEnumListIgnoreCase", "parameters": "(String enumNames, Class<E> enumType)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> parseEnumListIgnoreCase(String enumNames, Class<E> enumType)", "full_signature": "public static List<E> parseEnumListIgnoreCase(String enumNames, Class<E> enumType)", "class_method_signature": "StringExt.parseEnumListIgnoreCase(String enumNames, Class<E> enumType)", "testcase": false, "constructor": false}, {"identifier": "parseEnumListIgnoreCase", "parameters": "(String enumNames, Class<E> enumType, Function<String, List<E>> groupings)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> parseEnumListIgnoreCase(String enumNames, Class<E> enumType, Function<String, List<E>> groupings)", "full_signature": "public static List<E> parseEnumListIgnoreCase(String enumNames, Class<E> enumType, Function<String, List<E>> groupings)", "class_method_signature": "StringExt.parseEnumListIgnoreCase(String enumNames, Class<E> enumType, Function<String, List<E>> groupings)", "testcase": false, "constructor": false}, {"identifier": "parseKeyValueList", "parameters": "(String text, Pattern entrySeparator, Pattern pairSeparator,\n                                                       BiFunction<A, String, A> accumulator)", "modifiers": "public static", "return": "Map<String, A>", "signature": "Map<String, A> parseKeyValueList(String text, Pattern entrySeparator, Pattern pairSeparator,\n                                                       BiFunction<A, String, A> accumulator)", "full_signature": "public static Map<String, A> parseKeyValueList(String text, Pattern entrySeparator, Pattern pairSeparator,\n                                                       BiFunction<A, String, A> accumulator)", "class_method_signature": "StringExt.parseKeyValueList(String text, Pattern entrySeparator, Pattern pairSeparator,\n                                                       BiFunction<A, String, A> accumulator)", "testcase": false, "constructor": false}, {"identifier": "parseKeyValueList", "parameters": "(String text)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> parseKeyValueList(String text)", "full_signature": "public static Map<String, String> parseKeyValueList(String text)", "class_method_signature": "StringExt.parseKeyValueList(String text)", "testcase": false, "constructor": false}, {"identifier": "parseKeyValuesList", "parameters": "(String text)", "modifiers": "public static", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> parseKeyValuesList(String text)", "full_signature": "public static Map<String, Set<String>> parseKeyValuesList(String text)", "class_method_signature": "StringExt.parseKeyValuesList(String text)", "testcase": false, "constructor": false}, {"identifier": "getEnumLowerCaseNameMap", "parameters": "(Class<E> enumType)", "modifiers": "private static", "return": "Map<String, Object>", "signature": "Map<String, Object> getEnumLowerCaseNameMap(Class<E> enumType)", "full_signature": "private static Map<String, Object> getEnumLowerCaseNameMap(Class<E> enumType)", "class_method_signature": "StringExt.getEnumLowerCaseNameMap(Class<E> enumType)", "testcase": false, "constructor": false}, {"identifier": "isAsciiLetter", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsciiLetter(char c)", "full_signature": "public static boolean isAsciiLetter(char c)", "class_method_signature": "StringExt.isAsciiLetter(char c)", "testcase": false, "constructor": false}, {"identifier": "isAsciiDigit", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsciiDigit(char c)", "full_signature": "public static boolean isAsciiDigit(char c)", "class_method_signature": "StringExt.isAsciiDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "isAsciiLetterOrDigit", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsciiLetterOrDigit(char c)", "full_signature": "public static boolean isAsciiLetterOrDigit(char c)", "class_method_signature": "StringExt.isAsciiLetterOrDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "removeNonAlphanumeric", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String removeNonAlphanumeric(String text)", "full_signature": "public static String removeNonAlphanumeric(String text)", "class_method_signature": "StringExt.removeNonAlphanumeric(String text)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Pattern pattern, String text)", "modifiers": "public static", "return": "int", "signature": "int indexOf(Pattern pattern, String text)", "full_signature": "public static int indexOf(Pattern pattern, String text)", "class_method_signature": "StringExt.indexOf(Pattern pattern, String text)", "testcase": false, "constructor": false}, {"identifier": "doubleQuotes", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String doubleQuotes(String text)", "full_signature": "public static String doubleQuotes(String text)", "class_method_signature": "StringExt.doubleQuotes(String text)", "testcase": false, "constructor": false}, {"identifier": "removeSurroundingQuotes", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String removeSurroundingQuotes(String text)", "full_signature": "public static String removeSurroundingQuotes(String text)", "class_method_signature": "StringExt.removeSurroundingQuotes(String text)", "testcase": false, "constructor": false}, {"identifier": "appendToEndIfMissing", "parameters": "(String text, String value)", "modifiers": "public static", "return": "String", "signature": "String appendToEndIfMissing(String text, String value)", "full_signature": "public static String appendToEndIfMissing(String text, String value)", "class_method_signature": "StringExt.appendToEndIfMissing(String text, String value)", "testcase": false, "constructor": false}, {"identifier": "startWithLowercase", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String startWithLowercase(String text)", "full_signature": "public static String startWithLowercase(String text)", "class_method_signature": "StringExt.startWithLowercase(String text)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String s)", "modifiers": "public static", "return": "Optional<Integer>", "signature": "Optional<Integer> parseInt(String s)", "full_signature": "public static Optional<Integer> parseInt(String s)", "class_method_signature": "StringExt.parseInt(String s)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(String s)", "modifiers": "public static", "return": "Optional<Long>", "signature": "Optional<Long> parseLong(String s)", "full_signature": "public static Optional<Long> parseLong(String s)", "class_method_signature": "StringExt.parseLong(String s)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(String s)", "modifiers": "public static", "return": "Optional<Double>", "signature": "Optional<Double> parseDouble(String s)", "full_signature": "public static Optional<Double> parseDouble(String s)", "class_method_signature": "StringExt.parseDouble(String s)", "testcase": false, "constructor": false}, {"identifier": "parseDurationMsList", "parameters": "(String s)", "modifiers": "public static", "return": "Optional<List<Duration>>", "signature": "Optional<List<Duration>> parseDurationMsList(String s)", "full_signature": "public static Optional<List<Duration>> parseDurationMsList(String s)", "class_method_signature": "StringExt.parseDurationMsList(String s)", "testcase": false, "constructor": false}, {"identifier": "gzipAndBase64Encode", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String gzipAndBase64Encode(String s)", "full_signature": "public static String gzipAndBase64Encode(String s)", "class_method_signature": "StringExt.gzipAndBase64Encode(String s)", "testcase": false, "constructor": false}, {"identifier": "nameFromJavaBeanGetter", "parameters": "(String getterName)", "modifiers": "public static", "return": "Either<String, IllegalArgumentException>", "signature": "Either<String, IllegalArgumentException> nameFromJavaBeanGetter(String getterName)", "full_signature": "public static Either<String, IllegalArgumentException> nameFromJavaBeanGetter(String getterName)", "class_method_signature": "StringExt.nameFromJavaBeanGetter(String getterName)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/StringExt.java"}, "focal_method": {"identifier": "nameFromJavaBeanGetter", "parameters": "(String getterName)", "modifiers": "public static", "return": "Either<String, IllegalArgumentException>", "body": "public static Either<String, IllegalArgumentException> nameFromJavaBeanGetter(String getterName) {\n        if (isEmpty(getterName)) {\n            return Either.ofError(new IllegalArgumentException(\"getter name is empty\"));\n        }\n        int prefixLen;\n        if (getterName.startsWith(\"get\")) {\n            prefixLen = 3;\n        } else if (getterName.startsWith(\"is\")) {\n            prefixLen = 2;\n        } else if (getterName.startsWith(\"has\")) {\n            prefixLen = 3;\n        } else {\n            return Either.ofError(new IllegalArgumentException(String.format(\"getter '%s' does not start with a valid prefix (get|is|has)\", getterName)));\n        }\n\n        if (getterName.length() == prefixLen) {\n            return Either.ofError(new IllegalArgumentException(String.format(\"getter '%s' has only prefix with empty base name\", getterName)));\n        }\n\n        return Either.ofValue(Character.toLowerCase(getterName.charAt(prefixLen)) + getterName.substring(prefixLen + 1));\n    }", "signature": "Either<String, IllegalArgumentException> nameFromJavaBeanGetter(String getterName)", "full_signature": "public static Either<String, IllegalArgumentException> nameFromJavaBeanGetter(String getterName)", "class_method_signature": "StringExt.nameFromJavaBeanGetter(String getterName)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "ofError", "startsWith", "startsWith", "startsWith", "ofError", "format", "length", "ofError", "format", "ofValue", "toLowerCase", "charAt", "substring"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}