{"test_class": {"identifier": "TPSADescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [{"original_string": "private SmilesParser sp;", "modifier": "private", "type": "SmilesParser", "declarator": "sp", "var_name": "sp"}], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/TPSADescriptorTest.java"}, "test_case": {"identifier": "testTPSA7", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTPSA7() throws java.lang.Exception {\n        IAtomContainer mol = sp.parseSmiles(\"C(I)I\");//at:  16\n        addExplicitHydrogens(mol);\n        Assert.assertEquals(0.0, ((DoubleResult) descriptor.calculate(mol).getValue()).doubleValue(), 0.1); //at:  16\n    }", "signature": "void testTPSA7()", "full_signature": "@Test public void testTPSA7()", "class_method_signature": "TPSADescriptorTest.testTPSA7()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "addExplicitHydrogens", "assertEquals", "doubleValue", "getValue", "calculate"]}, "focal_class": {"identifier": "TPSADescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private boolean               checkAromaticity = false;", "modifier": "private", "type": "boolean", "declarator": "checkAromaticity = false", "var_name": "checkAromaticity"}, {"original_string": "private static HashMap<String,Double>        map;", "modifier": "private static", "type": "HashMap<String,Double>", "declarator": "map", "var_name": "map"}, {"original_string": "private static final String[] NAMES            = {\"TopoPSA\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES            = {\"TopoPSA\"}", "var_name": "NAMES"}], "methods": [{"identifier": "TPSADescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " TPSADescriptor()", "full_signature": "public  TPSADescriptor()", "class_method_signature": "TPSADescriptor.TPSADescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "TPSADescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "TPSADescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "TPSADescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "TPSADescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "TPSADescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "TPSADescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "TPSADescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "TPSADescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "TPSADescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/TPSADescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        IAtomContainer ac;\n        try {\n            ac = (IAtomContainer) atomContainer.clone();\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(e);\n        }\n        List<String> profiles = new ArrayList<String>();\n\n        // calculate the set of all rings\n        IRingSet rs;\n        try {\n            rs = (new AllRingsFinder()).findAllRings(ac);\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(e);\n        }\n        // check aromaticity if the descriptor parameter is set to true\n        if (checkAromaticity) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(ac);\n                Aromaticity.cdkLegacy().apply(ac);\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(e);\n            }\n        }\n\n        // iterate over all atoms of ac\n        for (IAtom atom : ac.atoms()) {\n            if (atom.getAtomicNumber() == IElement.N || atom.getAtomicNumber() == IElement.O || atom.getAtomicNumber() == IElement.S\n                    || atom.getAtomicNumber() == IElement.P) {\n                int singleBondCount = 0;\n                int doubleBondCount = 0;\n                int tripleBondCount = 0;\n                int aromaticBondCount = 0;\n                double maxBondOrder = 0;\n                double bondOrderSum = 0;\n                int hCount = 0;\n                int isIn3MemberRing = 0;\n\n                // counting the number of single/double/triple/aromatic bonds\n                List<IBond> connectedBonds = ac.getConnectedBondsList(atom);\n                for (IBond connectedBond : connectedBonds) {\n                    if (connectedBond.getFlag(CDKConstants.ISAROMATIC))\n                        aromaticBondCount++;\n                    else if (connectedBond.getOrder() == Order.SINGLE)\n                        singleBondCount++;\n                    else if (connectedBond.getOrder() == Order.DOUBLE)\n                        doubleBondCount++;\n                    else if (connectedBond.getOrder() == Order.TRIPLE) tripleBondCount++;\n                }\n                int formalCharge = atom.getFormalCharge();\n                List<IAtom> connectedAtoms = ac.getConnectedAtomsList(atom);\n                int numberOfNeighbours = connectedAtoms.size();\n\n                // EXPLICIT hydrogens: count the number of hydrogen atoms\n                for (int neighbourIndex = 0; neighbourIndex < numberOfNeighbours; neighbourIndex++)\n                    if (((IAtom) connectedAtoms.get(neighbourIndex)).getAtomicNumber() == IElement.H) hCount++;\n                // IMPLICIT hydrogens: count the number of hydrogen atoms and adjust other atom profile properties\n                Integer implicitHAtoms = atom.getImplicitHydrogenCount();\n                if (implicitHAtoms == CDKConstants.UNSET) {\n                    implicitHAtoms = 0;\n                }\n\n                for (int hydrogenIndex = 0; hydrogenIndex < implicitHAtoms; hydrogenIndex++) {\n                    hCount++;\n                    numberOfNeighbours++;\n                    singleBondCount++;\n                }\n                // Calculate bond order sum using the counters of single/double/triple/aromatic bonds\n                bondOrderSum += singleBondCount * 1.0;\n                bondOrderSum += doubleBondCount * 2.0;\n                bondOrderSum += tripleBondCount * 3.0;\n                bondOrderSum += aromaticBondCount * 1.5;\n                // setting maxBondOrder\n                if (singleBondCount > 0) maxBondOrder = 1.0;\n                if (aromaticBondCount > 0) maxBondOrder = 1.5;\n                if (doubleBondCount > 0) maxBondOrder = 2.0;\n                if (tripleBondCount > 0) maxBondOrder = 3.0;\n\n                // isIn3MemberRing checker\n                if (rs.contains(atom)) {\n                    IRingSet rsAtom = rs.getRings(atom);\n                    for (int ringSetIndex = 0; ringSetIndex < rsAtom.getAtomContainerCount(); ringSetIndex++) {\n                        IRing ring = (IRing) rsAtom.getAtomContainer(ringSetIndex);\n                        if (ring.getRingSize() == 3) isIn3MemberRing = 1;\n                    }\n                }\n                // create a profile of the current atom (atoms[atomIndex]) according to the profile definition in the constructor\n                String profile = atom.getSymbol() + \"+\" + maxBondOrder + \"+\" + bondOrderSum + \"+\" + numberOfNeighbours\n                        + \"+\" + hCount + \"+\" + formalCharge + \"+\" + aromaticBondCount + \"+\" + isIn3MemberRing + \"+\"\n                        + singleBondCount + \"+\" + doubleBondCount + \"+\" + tripleBondCount;\n                //logger.debug(\"tpsa profile: \"+ profile);\n                profiles.add(profile);\n            }\n        }\n        // END OF ATOM LOOP\n        // calculate the tpsa for the AtomContainer ac\n        double tpsa = 0;\n        for (int profileIndex = 0; profileIndex < profiles.size(); profileIndex++) {\n            if (map.containsKey(profiles.get(profileIndex))) {\n                tpsa += (Double) map.get(profiles.get(profileIndex));\n                //logger.debug(\"tpsa contribs: \" + profiles.elementAt(profileIndex) + \"\\t\" + ((Double)map.get(profiles.elementAt(profileIndex))).doubleValue());\n            }\n        }\n        profiles.clear(); // remove all profiles from the profiles-Vector\n        //logger.debug(\"tpsa: \" + tpsa);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(tpsa),\n                getDescriptorNames());\n\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "TPSADescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "getDummyDescriptorValue", "findAllRings", "getDummyDescriptorValue", "percieveAtomTypesAndConfigureAtoms", "apply", "cdkLegacy", "getDummyDescriptorValue", "atoms", "getAtomicNumber", "getAtomicNumber", "getAtomicNumber", "getAtomicNumber", "getConnectedBondsList", "getFlag", "getOrder", "getOrder", "getOrder", "getFormalCharge", "getConnectedAtomsList", "size", "getAtomicNumber", "get", "getImplicitHydrogenCount", "contains", "getRings", "getAtomContainerCount", "getAtomContainer", "getRingSize", "getSymbol", "add", "size", "containsKey", "get", "get", "get", "clear", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}