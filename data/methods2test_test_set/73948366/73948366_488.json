{"test_class": {"identifier": "Auth0JwtParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KeyStore baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    };", "modifier": "private final", "type": "KeyStore", "declarator": "baseKeyStore = new KeyStore() {\n        @Override\n        public String getPublicKey(String domain, String service, String keyId) {\n            return null;\n        }\n    }", "var_name": "baseKeyStore"}], "file": "contributions/authority/auth0/src/test/java/com/yahoo/athenz/auth/oauth/auth0/Auth0JwtParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"rawtypes\")\n    public void testParse() throws Exception {\n        // mock internal parser\n        Auth0JwtParser parser = new Auth0JwtParser(baseKeyStore, \"https://athenz-oauth-example.auth0.com/.well-known/jwks.json\");\n        JwtParser jwtParserMock = Mockito.mock(JwtParser.class);\n        Field f = parser.getClass().getSuperclass().getDeclaredField(\"parser\");\n        f.setAccessible(true);\n        f.set(parser, jwtParserMock);\n\n        // parse error\n        Mockito.when(jwtParserMock.parseClaimsJws(null)).thenThrow(new NullPointerException());\n        assertThrows(OAuthJwtAccessTokenException.class, () -> parser.parse(null));\n\n        // parse success\n        String jwtString = \"dummy-jwt-string\";\n        Jws<Claims> jws = new Jws<Claims>() {\n            public JwsHeader getHeader() { return null; }\n            public Claims getBody() { return null; }\n\n            @Override\n            public String getSignature() {\n                return \"dummy-jwt-signature\";\n            }\n        };\n        Mockito.when(jwtParserMock.parseClaimsJws(jwtString)).thenReturn(jws);\n        OAuthJwtAccessToken token = parser.parse(jwtString);\n        assertNotNull(token);\n        assertTrue(token instanceof Auth0Jwt);\n        assertEquals(token.getSignature(), \"dummy-jwt-signature\");\n    }", "signature": "void testParse()", "full_signature": "@Test @SuppressWarnings(\"rawtypes\") public void testParse()", "class_method_signature": "Auth0JwtParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["mock", "getDeclaredField", "getSuperclass", "getClass", "setAccessible", "set", "thenThrow", "when", "parseClaimsJws", "assertThrows", "parse", "thenReturn", "when", "parseClaimsJws", "parse", "assertNotNull", "assertTrue", "assertEquals", "getSignature"]}, "focal_class": {"identifier": "Auth0JwtParser", "superclass": "extends DefaultOAuthJwtAccessTokenParser", "interfaces": "", "fields": [], "methods": [{"identifier": "Auth0JwtParser", "parameters": "(KeyStore keyStore, String jwksUrl)", "modifiers": "public", "return": "", "signature": " Auth0JwtParser(KeyStore keyStore, String jwksUrl)", "full_signature": "public  Auth0JwtParser(KeyStore keyStore, String jwksUrl)", "class_method_signature": "Auth0JwtParser.Auth0JwtParser(KeyStore keyStore, String jwksUrl)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String jwtString)", "modifiers": "@Override public", "return": "OAuthJwtAccessToken", "signature": "OAuthJwtAccessToken parse(String jwtString)", "full_signature": "@Override public OAuthJwtAccessToken parse(String jwtString)", "class_method_signature": "Auth0JwtParser.parse(String jwtString)", "testcase": false, "constructor": false}], "file": "contributions/authority/auth0/src/main/java/com/yahoo/athenz/auth/oauth/auth0/Auth0JwtParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String jwtString)", "modifiers": "@Override public", "return": "OAuthJwtAccessToken", "body": "@Override\n    public OAuthJwtAccessToken parse(String jwtString) throws OAuthJwtAccessTokenException {\n        OAuthJwtAccessToken accessToken = null;\n        try {\n            Jws<Claims> jws = this.parser.parseClaimsJws(jwtString);\n            accessToken = new Auth0Jwt(jws);\n        } catch (Exception ex) {\n            throw new OAuthJwtAccessTokenException(ex);\n        }\n        return accessToken;\n    }", "signature": "OAuthJwtAccessToken parse(String jwtString)", "full_signature": "@Override public OAuthJwtAccessToken parse(String jwtString)", "class_method_signature": "Auth0JwtParser.parse(String jwtString)", "testcase": false, "constructor": false, "invocations": ["parseClaimsJws"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}