{"test_class": {"identifier": "ListActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "@Mock Printing printing;", "modifier": "@Mock", "type": "Printing", "declarator": "printing", "var_name": "printing"}, {"original_string": "ListActionConfig listActionConfig;", "modifier": "", "type": "ListActionConfig", "declarator": "listActionConfig", "var_name": "listActionConfig"}, {"original_string": "ListAction listAction;", "modifier": "", "type": "ListAction", "declarator": "listAction", "var_name": "listAction"}], "file": "cli/src/test/java/keywhiz/cli/commands/ListActionTest.java"}, "test_case": {"identifier": "listCallsErrorsCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void listCallsErrorsCorrectly() throws Exception {\n    listActionConfig.listType = Arrays.asList(\"secrets\");\n    listActionConfig.idx = 5;\n    boolean error = false;\n    try {\n      listAction.run();\n    } catch (AssertionError e) {\n      error = true;\n    }\n    assert(error);\n\n    listActionConfig.listType = Arrays.asList(\"secrets\");\n    listActionConfig.idx = 5;\n    listActionConfig.num = -5;\n    error = false;\n    try {\n      listAction.run();\n    } catch (IllegalArgumentException e) {\n      error = true;\n    }\n    assert(error);\n  }", "signature": "void listCallsErrorsCorrectly()", "full_signature": "@Test public void listCallsErrorsCorrectly()", "class_method_signature": "ListActionTest.listCallsErrorsCorrectly()", "testcase": true, "constructor": false, "invocations": ["asList", "run", "asList", "run"]}, "focal_class": {"identifier": "ListAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private final ListActionConfig listActionConfig;", "modifier": "private final", "type": "ListActionConfig", "declarator": "listActionConfig", "var_name": "listActionConfig"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "private final Printing printing;", "modifier": "private final", "type": "Printing", "declarator": "printing", "var_name": "printing"}], "methods": [{"identifier": "ListAction", "parameters": "(ListActionConfig listActionConfig, KeywhizClient client, Printing printing)", "modifiers": "public", "return": "", "signature": " ListAction(ListActionConfig listActionConfig, KeywhizClient client, Printing printing)", "full_signature": "public  ListAction(ListActionConfig listActionConfig, KeywhizClient client, Printing printing)", "class_method_signature": "ListAction.ListAction(ListActionConfig listActionConfig, KeywhizClient client, Printing printing)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ListAction.run()", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/ListAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    List<String> listOptions = listActionConfig.listType;\n    if (listOptions == null) {\n      try {\n        printing.printAllSanitizedSecrets(keywhizClient.allSecrets());\n      } catch (IOException e) {\n        throw Throwables.propagate(e);\n      }\n      return;\n    }\n\n    List<String> options = Arrays.asList(listOptions.get(0).split(\",\"));\n\n    String firstOption = options.get(0).toLowerCase().trim();\n    try {\n      switch (firstOption) {\n        case \"groups\":\n          printing.printAllGroups(keywhizClient.allGroups());\n          break;\n\n        case \"clients\":\n          printing.printAllClients(keywhizClient.allClients());\n          break;\n\n        case \"secrets\":\n          if (listActionConfig.idx == null && listActionConfig.num == null) {\n            printing.printAllSanitizedSecrets(keywhizClient.allSecrets());\n          } else if (listActionConfig.idx != null && listActionConfig.num != null) {\n            checkArgument(listActionConfig.idx >= 0);\n            checkArgument(listActionConfig.num >= 0);\n            if (listActionConfig.newestFirst == null) {\n              printing.printAllSanitizedSecrets(keywhizClient.allSecretsBatched(listActionConfig.idx, listActionConfig.num, true));\n            }  else {\n              printing.printAllSanitizedSecrets(keywhizClient.allSecretsBatched(listActionConfig.idx, listActionConfig.num, listActionConfig.newestFirst));\n            }\n          } else {\n            throw new AssertionError(\"Both idx and num must be provided for batched secret queries\");\n          }\n          break;\n\n        default:\n          throw new AssertionError(\"Invalid list option: \" + firstOption);\n      }\n    } catch(IOException e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ListAction.run()", "testcase": false, "constructor": false, "invocations": ["printAllSanitizedSecrets", "allSecrets", "propagate", "asList", "split", "get", "trim", "toLowerCase", "get", "printAllGroups", "allGroups", "printAllClients", "allClients", "printAllSanitizedSecrets", "allSecrets", "checkArgument", "checkArgument", "printAllSanitizedSecrets", "allSecretsBatched", "printAllSanitizedSecrets", "allSecretsBatched", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}