{"test_class": {"identifier": "RaftActorLeadershipTransferCohortTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private final TestActorFactory factory = new TestActorFactory(getSystem());", "modifier": "private final", "type": "TestActorFactory", "declarator": "factory = new TestActorFactory(getSystem())", "var_name": "factory"}, {"original_string": "private MockRaftActor mockRaftActor;", "modifier": "private", "type": "MockRaftActor", "declarator": "mockRaftActor", "var_name": "mockRaftActor"}, {"original_string": "private RaftActorLeadershipTransferCohort cohort;", "modifier": "private", "type": "RaftActorLeadershipTransferCohort", "declarator": "cohort", "var_name": "cohort"}, {"original_string": "private final OnComplete onComplete = mock(OnComplete.class);", "modifier": "private final", "type": "OnComplete", "declarator": "onComplete = mock(OnComplete.class)", "var_name": "onComplete"}, {"original_string": "private final DefaultConfigParamsImpl config = new DefaultConfigParamsImpl();", "modifier": "private final", "type": "DefaultConfigParamsImpl", "declarator": "config = new DefaultConfigParamsImpl()", "var_name": "config"}, {"original_string": "private Function<Runnable, Void> pauseLeaderFunction;", "modifier": "private", "type": "Function<Runnable, Void>", "declarator": "pauseLeaderFunction", "var_name": "pauseLeaderFunction"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/RaftActorLeadershipTransferCohortTest.java"}, "test_case": {"identifier": "testAbortTransfer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAbortTransfer() {\n        setup(\"testAbortTransfer\");\n        cohort.abortTransfer();\n        verify(onComplete).onFailure(mockRaftActor.self());\n    }", "signature": "void testAbortTransfer()", "full_signature": "@Test public void testAbortTransfer()", "class_method_signature": "RaftActorLeadershipTransferCohortTest.testAbortTransfer()", "testcase": true, "constructor": false, "invocations": ["setup", "abortTransfer", "onFailure", "verify", "self"]}, "focal_class": {"identifier": "RaftActorLeadershipTransferCohort", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RaftActorLeadershipTransferCohort.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RaftActorLeadershipTransferCohort.class)", "var_name": "LOG"}, {"original_string": "static final long USE_DEFAULT_LEADER_TIMEOUT = -1;", "modifier": "static final", "type": "long", "declarator": "USE_DEFAULT_LEADER_TIMEOUT = -1", "var_name": "USE_DEFAULT_LEADER_TIMEOUT"}, {"original_string": "private final List<OnComplete> onCompleteCallbacks = new ArrayList<>();", "modifier": "private final", "type": "List<OnComplete>", "declarator": "onCompleteCallbacks = new ArrayList<>()", "var_name": "onCompleteCallbacks"}, {"original_string": "private final Stopwatch transferTimer = Stopwatch.createUnstarted();", "modifier": "private final", "type": "Stopwatch", "declarator": "transferTimer = Stopwatch.createUnstarted()", "var_name": "transferTimer"}, {"original_string": "private final RaftActor raftActor;", "modifier": "private final", "type": "RaftActor", "declarator": "raftActor", "var_name": "raftActor"}, {"original_string": "private final String requestedFollowerId;", "modifier": "private final", "type": "String", "declarator": "requestedFollowerId", "var_name": "requestedFollowerId"}, {"original_string": "private long newLeaderTimeoutInMillis = 2000;", "modifier": "private", "type": "long", "declarator": "newLeaderTimeoutInMillis = 2000", "var_name": "newLeaderTimeoutInMillis"}, {"original_string": "private Cancellable newLeaderTimer;", "modifier": "private", "type": "Cancellable", "declarator": "newLeaderTimer", "var_name": "newLeaderTimer"}, {"original_string": "private boolean isTransferring;", "modifier": "private", "type": "boolean", "declarator": "isTransferring", "var_name": "isTransferring"}], "methods": [{"identifier": "RaftActorLeadershipTransferCohort", "parameters": "(final RaftActor raftActor)", "modifiers": "", "return": "", "signature": " RaftActorLeadershipTransferCohort(final RaftActor raftActor)", "full_signature": "  RaftActorLeadershipTransferCohort(final RaftActor raftActor)", "class_method_signature": "RaftActorLeadershipTransferCohort.RaftActorLeadershipTransferCohort(final RaftActor raftActor)", "testcase": false, "constructor": true}, {"identifier": "RaftActorLeadershipTransferCohort", "parameters": "(final RaftActor raftActor, final @Nullable String requestedFollowerId)", "modifiers": "", "return": "", "signature": " RaftActorLeadershipTransferCohort(final RaftActor raftActor, final @Nullable String requestedFollowerId)", "full_signature": "  RaftActorLeadershipTransferCohort(final RaftActor raftActor, final @Nullable String requestedFollowerId)", "class_method_signature": "RaftActorLeadershipTransferCohort.RaftActorLeadershipTransferCohort(final RaftActor raftActor, final @Nullable String requestedFollowerId)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "", "return": "void", "signature": "void init()", "full_signature": " void init()", "class_method_signature": "RaftActorLeadershipTransferCohort.init()", "testcase": false, "constructor": false}, {"identifier": "doTransfer", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void doTransfer()", "full_signature": "@VisibleForTesting void doTransfer()", "class_method_signature": "RaftActorLeadershipTransferCohort.doTransfer()", "testcase": false, "constructor": false}, {"identifier": "abortTransfer", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void abortTransfer()", "full_signature": "public void abortTransfer()", "class_method_signature": "RaftActorLeadershipTransferCohort.abortTransfer()", "testcase": false, "constructor": false}, {"identifier": "transferComplete", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void transferComplete()", "full_signature": "public void transferComplete()", "class_method_signature": "RaftActorLeadershipTransferCohort.transferComplete()", "testcase": false, "constructor": false}, {"identifier": "onNewLeader", "parameters": "(final String newLeader)", "modifiers": "", "return": "void", "signature": "void onNewLeader(final String newLeader)", "full_signature": " void onNewLeader(final String newLeader)", "class_method_signature": "RaftActorLeadershipTransferCohort.onNewLeader(final String newLeader)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "(final boolean success)", "modifiers": "private", "return": "void", "signature": "void finish(final boolean success)", "full_signature": "private void finish(final boolean success)", "class_method_signature": "RaftActorLeadershipTransferCohort.finish(final boolean success)", "testcase": false, "constructor": false}, {"identifier": "addOnComplete", "parameters": "(final OnComplete onComplete)", "modifiers": "", "return": "void", "signature": "void addOnComplete(final OnComplete onComplete)", "full_signature": " void addOnComplete(final OnComplete onComplete)", "class_method_signature": "RaftActorLeadershipTransferCohort.addOnComplete(final OnComplete onComplete)", "testcase": false, "constructor": false}, {"identifier": "isTransferring", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isTransferring()", "full_signature": " boolean isTransferring()", "class_method_signature": "RaftActorLeadershipTransferCohort.isTransferring()", "testcase": false, "constructor": false}, {"identifier": "setNewLeaderTimeoutInMillis", "parameters": "(final long newLeaderTimeoutInMillis)", "modifiers": "", "return": "void", "signature": "void setNewLeaderTimeoutInMillis(final long newLeaderTimeoutInMillis)", "full_signature": " void setNewLeaderTimeoutInMillis(final long newLeaderTimeoutInMillis)", "class_method_signature": "RaftActorLeadershipTransferCohort.setNewLeaderTimeoutInMillis(final long newLeaderTimeoutInMillis)", "testcase": false, "constructor": false}, {"identifier": "getRequestedFollowerId", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getRequestedFollowerId()", "full_signature": "public Optional<String> getRequestedFollowerId()", "class_method_signature": "RaftActorLeadershipTransferCohort.getRequestedFollowerId()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/RaftActorLeadershipTransferCohort.java"}, "focal_method": {"identifier": "abortTransfer", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void abortTransfer() {\n        LOG.debug(\"{}: leader transfer aborted\", raftActor.persistenceId());\n        finish(false);\n    }", "signature": "void abortTransfer()", "full_signature": "public void abortTransfer()", "class_method_signature": "RaftActorLeadershipTransferCohort.abortTransfer()", "testcase": false, "constructor": false, "invocations": ["debug", "persistenceId", "finish"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}