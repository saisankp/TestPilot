{"test_class": {"identifier": "ClassUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClassUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClassUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/ClassUtilTest.java"}, "test_case": {"identifier": "getMethodCaseInsensitiveGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getMethodCaseInsensitiveGet() throws Exception {\n        Method m = ClassUtil.getMethod(InternetPerson.class, \"getfirstName\", String.class, null, false);\n        Method expectedMethod = Person.class.getMethod(\"getFirstName\");\n        Assert.assertEquals(expectedMethod, m);\n    }", "signature": "void getMethodCaseInsensitiveGet()", "full_signature": "@Test public void getMethodCaseInsensitiveGet()", "class_method_signature": "ClassUtilTest.getMethodCaseInsensitiveGet()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getMethod", "assertEquals"]}, "focal_class": {"identifier": "ClassUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findEnumConstant", "parameters": "(Class<?> type, String constantName)", "modifiers": "public static", "return": "Object", "signature": "Object findEnumConstant(Class<?> type, String constantName)", "full_signature": "public static Object findEnumConstant(Class<?> type, String constantName)", "class_method_signature": "ClassUtil.findEnumConstant(Class<?> type, String constantName)", "testcase": false, "constructor": false}, {"identifier": "findEnumConstant", "parameters": "(Class<?> type, String constantName, boolean caseSensitive)", "modifiers": "public static", "return": "Object", "signature": "Object findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "full_signature": "public static Object findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "class_method_signature": "ClassUtil.findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getClassHierarchy", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getClassHierarchy(Class<?> type)", "full_signature": "public static Class<?>[] getClassHierarchy(Class<?> type)", "class_method_signature": "ClassUtil.getClassHierarchy(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "hasBeanMethods", "parameters": "(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "full_signature": "public static boolean hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "class_method_signature": "ClassUtil.hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getBeanMethods", "parameters": "(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "full_signature": "public static Method[] getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "class_method_signature": "ClassUtil.getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "full_signature": "public static Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "class_method_signature": "ClassUtil.getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/ClassUtil.java"}, "focal_method": {"identifier": "getMethod", "parameters": "(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "modifiers": "public static", "return": "Method", "body": "public static Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)\n        throws IllegalAccessException, NoSuchMethodException {\n        \n        // flag to help modify the exception to make it a little easier for debugging\n        boolean methodNameFound = false;\n\n        // start our search\n        Class<?> classType = type;\n\n        while (classType != null && !classType.equals(Object.class)) {\n\n            for (Method m : classType.getDeclaredMethods()) {\n\n                if ((!caseSensitive && m.getName().equalsIgnoreCase(name)) || (caseSensitive && m.getName().equals(name))) {\n\n                    // we found the method name, but its possible the signature won't\n                    // match below, we'll set this flag to help construct a better exception\n                    // below\n                    methodNameFound = true;\n\n                    // should we validate the return type?\n                    if (returnType != null) {\n                        // if the return types don't match, then this must be invalid\n                        // since the JVM doesn't allow the same return type\n                        if (!m.getReturnType().equals(returnType)) {\n                            throw new NoSuchMethodException(\"Method '\" + name + \"' was found in \" + type.getSimpleName() + \".class\"\n                                    + \", but the returnType \" + m.getReturnType().getSimpleName() + \".class did not match expected \" + returnType.getSimpleName() + \".class\");\n                        }\n                    // make sure the return type is VOID\n                    } else {\n                        if (!m.getReturnType().equals(void.class)) {\n                            throw new NoSuchMethodException(\"Method '\" + name + \"' was found in \" + type.getSimpleName() + \".class\"\n                                    + \", but the returnType \" + m.getReturnType().getSimpleName() + \".class was expected to be void\");\n                        }\n                    }\n\n                    // return type was okay, check the parameters\n                    Class<?>[] paramTypes = m.getParameterTypes();\n\n                    // should we check the parameter type?\n                    if (paramType != null) {\n                        // must have exactly 1 parameter\n                        if (paramTypes.length != 1) {\n                            // this might not be the method we want, keep searching\n                            continue;\n                        } else {\n                            // if the parameters don't match, keep searching\n                            if (!paramTypes[0].equals(paramType)) {\n                                continue;\n                            }\n                        }\n                    // if paramType was null, then make sure no parameters are expected\n                    } else {\n                        if (paramTypes.length != 0) {\n                            continue;\n                        }\n                    }\n\n                    // if we got here, then everything matches so far\n                    // now its time to check if the method is accessible\n                    if (!Modifier.isPublic(m.getModifiers())) {\n                        throw new IllegalAccessException(\"Method '\" + name + \"' was found in \" + type.getSimpleName() + \".class \"+\n                                \", but its not accessible since its \" + Modifier.toString(m.getModifiers()));\n                    }\n\n                    // everything was okay\n                    return m;\n                }\n            }\n\n            // move onto the superclass\n            classType = classType.getSuperclass();\n        }\n\n        String signature = \"public \" + (returnType == null ? \"void\" : returnType.getName()) + \" \" + name + \"(\" + (paramType == null ? \"\" : paramType.getName()) + \")\";\n        \n        if (methodNameFound) {\n            throw new NoSuchMethodException(\"Method '\" + signature + \"' was found in \" + type.getSimpleName() + \".class, but signature match failed\");\n        } else {\n            throw new NoSuchMethodException(\"Method '\" + signature + \"' was not found in \" + type.getSimpleName() + \".class\");\n        }\n    }", "signature": "Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "full_signature": "public static Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "class_method_signature": "ClassUtil.getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "testcase": false, "constructor": false, "invocations": ["equals", "getDeclaredMethods", "equalsIgnoreCase", "getName", "equals", "getName", "equals", "getReturnType", "getSimpleName", "getSimpleName", "getReturnType", "getSimpleName", "equals", "getReturnType", "getSimpleName", "getSimpleName", "getReturnType", "getParameterTypes", "equals", "isPublic", "getModifiers", "getSimpleName", "toString", "getModifiers", "getSuperclass", "getName", "getName", "getSimpleName", "getSimpleName"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}