{"test_class": {"identifier": "ReducedPropagationManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@org.junit.Rule\n    public Timeout rule = Timeout.seconds(50);", "modifier": "@org.junit.Rule\n    public", "type": "Timeout", "declarator": "rule = Timeout.seconds(50)", "var_name": "rule"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ReducedPropagationStorage reducedPropagationStorage;", "modifier": "private", "type": "ReducedPropagationStorage", "declarator": "reducedPropagationStorage", "var_name": "reducedPropagationStorage"}, {"original_string": "private ReducedPropagationManager manager;", "modifier": "private", "type": "ReducedPropagationManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private RequestQueue requestQueue;", "modifier": "private", "type": "RequestQueue", "declarator": "requestQueue", "var_name": "requestQueue"}, {"original_string": "private InOrder requestQueueInOrder;", "modifier": "private", "type": "InOrder", "declarator": "requestQueueInOrder", "var_name": "requestQueueInOrder"}, {"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}], "file": "gateleen-hook/src/test/java/org/swisspush/gateleen/hook/reducedpropagation/ReducedPropagationManagerTest.java"}, "test_case": {"identifier": "testExpiredQueueProcessingNotExecutedWhenLocked", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExpiredQueueProcessingNotExecutedWhenLocked(TestContext context) {\n        Mockito.when(lock.acquireLock(anyString(), anyString(), anyLong())).thenReturn(Future.succeededFuture(Boolean.FALSE));\n        Mockito.when(lock.releaseLock(anyString(), anyString())).thenReturn(Future.succeededFuture(Boolean.TRUE));\n        Mockito.when(reducedPropagationStorage.removeExpiredQueues(anyLong()))\n                .thenReturn(Future.succeededFuture(new ArrayList<>()));\n        manager.startExpiredQueueProcessing(10);\n        verify(reducedPropagationStorage, timeout(110).never()).removeExpiredQueues(anyLong());\n    }", "signature": "void testExpiredQueueProcessingNotExecutedWhenLocked(TestContext context)", "full_signature": "@Test public void testExpiredQueueProcessingNotExecutedWhenLocked(TestContext context)", "class_method_signature": "ReducedPropagationManagerTest.testExpiredQueueProcessingNotExecutedWhenLocked(TestContext context)", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "acquireLock", "anyString", "anyString", "anyLong", "succeededFuture", "thenReturn", "when", "releaseLock", "anyString", "anyString", "succeededFuture", "thenReturn", "when", "removeExpiredQueues", "anyLong", "succeededFuture", "startExpiredQueueProcessing", "removeExpiredQueues", "verify", "never", "timeout", "anyLong"]}, "focal_class": {"identifier": "ReducedPropagationManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final ReducedPropagationStorage storage;", "modifier": "private final", "type": "ReducedPropagationStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final RequestQueue requestQueue;", "modifier": "private final", "type": "RequestQueue", "declarator": "requestQueue", "var_name": "requestQueue"}, {"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}, {"original_string": "public static final String PROCESS_EXPIRED_QUEUES_LOCK = \"reducedPropagationProcExpQueuesLock\";", "modifier": "public static final", "type": "String", "declarator": "PROCESS_EXPIRED_QUEUES_LOCK = \"reducedPropagationProcExpQueuesLock\"", "var_name": "PROCESS_EXPIRED_QUEUES_LOCK"}, {"original_string": "public static final String LOCK_REQUESTER = \"ReducedPropagationManager\";", "modifier": "public static final", "type": "String", "declarator": "LOCK_REQUESTER = \"ReducedPropagationManager\"", "var_name": "LOCK_REQUESTER"}, {"original_string": "public static final String PROCESSOR_ADDRESS = \"gateleen.hook-expired-queues-processor\";", "modifier": "public static final", "type": "String", "declarator": "PROCESSOR_ADDRESS = \"gateleen.hook-expired-queues-processor\"", "var_name": "PROCESSOR_ADDRESS"}, {"original_string": "public static final String MANAGER_QUEUE_PREFIX = \"manager_\";", "modifier": "public static final", "type": "String", "declarator": "MANAGER_QUEUE_PREFIX = \"manager_\"", "var_name": "MANAGER_QUEUE_PREFIX"}, {"original_string": "private static final int MAX_QUEUE_RETRY_COUNT = 50;", "modifier": "private static final", "type": "int", "declarator": "MAX_QUEUE_RETRY_COUNT = 50", "var_name": "MAX_QUEUE_RETRY_COUNT"}, {"original_string": "private long processExpiredQueuesTimerId = -1;", "modifier": "private", "type": "long", "declarator": "processExpiredQueuesTimerId = -1", "var_name": "processExpiredQueuesTimerId"}, {"original_string": "private Map<String, Integer> failedQueueRetries = new HashMap<>();", "modifier": "private", "type": "Map<String, Integer>", "declarator": "failedQueueRetries = new HashMap<>()", "var_name": "failedQueueRetries"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private Logger log = LoggerFactory.getLogger(ReducedPropagationManager.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ReducedPropagationManager.class)", "var_name": "log"}], "methods": [{"identifier": "ReducedPropagationManager", "parameters": "(Vertx vertx, ReducedPropagationStorage storage, RequestQueue requestQueue, Lock lock)", "modifiers": "public", "return": "", "signature": " ReducedPropagationManager(Vertx vertx, ReducedPropagationStorage storage, RequestQueue requestQueue, Lock lock)", "full_signature": "public  ReducedPropagationManager(Vertx vertx, ReducedPropagationStorage storage, RequestQueue requestQueue, Lock lock)", "class_method_signature": "ReducedPropagationManager.ReducedPropagationManager(Vertx vertx, ReducedPropagationStorage storage, RequestQueue requestQueue, Lock lock)", "testcase": false, "constructor": true}, {"identifier": "startExpiredQueueProcessing", "parameters": "(long intervalMs)", "modifiers": "public", "return": "void", "signature": "void startExpiredQueueProcessing(long intervalMs)", "full_signature": "public void startExpiredQueueProcessing(long intervalMs)", "class_method_signature": "ReducedPropagationManager.startExpiredQueueProcessing(long intervalMs)", "testcase": false, "constructor": false}, {"identifier": "processIncomingRequest", "parameters": "(HttpMethod method, String targetUri, MultiMap queueHeaders, Buffer payload, String queue, long propagationIntervalMs, Handler<Void> doneHandler)", "modifiers": "public", "return": "Future<Void>", "signature": "Future<Void> processIncomingRequest(HttpMethod method, String targetUri, MultiMap queueHeaders, Buffer payload, String queue, long propagationIntervalMs, Handler<Void> doneHandler)", "full_signature": "public Future<Void> processIncomingRequest(HttpMethod method, String targetUri, MultiMap queueHeaders, Buffer payload, String queue, long propagationIntervalMs, Handler<Void> doneHandler)", "class_method_signature": "ReducedPropagationManager.processIncomingRequest(HttpMethod method, String targetUri, MultiMap queueHeaders, Buffer payload, String queue, long propagationIntervalMs, Handler<Void> doneHandler)", "testcase": false, "constructor": false}, {"identifier": "storeQueueRequest", "parameters": "(String queue, HttpMethod method, String targetUri, MultiMap queueHeaders)", "modifiers": "private", "return": "Future<Void>", "signature": "Future<Void> storeQueueRequest(String queue, HttpMethod method, String targetUri, MultiMap queueHeaders)", "full_signature": "private Future<Void> storeQueueRequest(String queue, HttpMethod method, String targetUri, MultiMap queueHeaders)", "class_method_signature": "ReducedPropagationManager.storeQueueRequest(String queue, HttpMethod method, String targetUri, MultiMap queueHeaders)", "testcase": false, "constructor": false}, {"identifier": "processExpiredQueues", "parameters": "(String lockToken)", "modifiers": "private", "return": "void", "signature": "void processExpiredQueues(String lockToken)", "full_signature": "private void processExpiredQueues(String lockToken)", "class_method_signature": "ReducedPropagationManager.processExpiredQueues(String lockToken)", "testcase": false, "constructor": false}, {"identifier": "handleFailedQueueRetry", "parameters": "(String expiredQueue)", "modifiers": "private", "return": "void", "signature": "void handleFailedQueueRetry(String expiredQueue)", "full_signature": "private void handleFailedQueueRetry(String expiredQueue)", "class_method_signature": "ReducedPropagationManager.handleFailedQueueRetry(String expiredQueue)", "testcase": false, "constructor": false}, {"identifier": "getFailedQueueRetryCount", "parameters": "(String expiredQueue)", "modifiers": "private", "return": "int", "signature": "int getFailedQueueRetryCount(String expiredQueue)", "full_signature": "private int getFailedQueueRetryCount(String expiredQueue)", "class_method_signature": "ReducedPropagationManager.getFailedQueueRetryCount(String expiredQueue)", "testcase": false, "constructor": false}, {"identifier": "getLockExpiry", "parameters": "(long interval)", "modifiers": "private", "return": "long", "signature": "long getLockExpiry(long interval)", "full_signature": "private long getLockExpiry(long interval)", "class_method_signature": "ReducedPropagationManager.getLockExpiry(long interval)", "testcase": false, "constructor": false}, {"identifier": "createToken", "parameters": "(String appendix)", "modifiers": "private", "return": "String", "signature": "String createToken(String appendix)", "full_signature": "private String createToken(String appendix)", "class_method_signature": "ReducedPropagationManager.createToken(String appendix)", "testcase": false, "constructor": false}, {"identifier": "registerExpiredQueueProcessor", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerExpiredQueueProcessor()", "full_signature": "private void registerExpiredQueueProcessor()", "class_method_signature": "ReducedPropagationManager.registerExpiredQueueProcessor()", "testcase": false, "constructor": false}, {"identifier": "processExpiredQueue", "parameters": "(String queue, Message<String> event)", "modifiers": "private", "return": "void", "signature": "void processExpiredQueue(String queue, Message<String> event)", "full_signature": "private void processExpiredQueue(String queue, Message<String> event)", "class_method_signature": "ReducedPropagationManager.processExpiredQueue(String queue, Message<String> event)", "testcase": false, "constructor": false}], "file": "gateleen-hook/src/main/java/org/swisspush/gateleen/hook/reducedpropagation/ReducedPropagationManager.java"}, "focal_method": {"identifier": "startExpiredQueueProcessing", "parameters": "(long intervalMs)", "modifiers": "public", "return": "void", "body": "public void startExpiredQueueProcessing(long intervalMs) {\n        log.info(\"About to start periodic processing of expired queues with an interval of \" + intervalMs + \" ms\");\n        vertx.cancelTimer(processExpiredQueuesTimerId);\n        processExpiredQueuesTimerId = vertx.setPeriodic(intervalMs, event -> {\n            final String token = createToken(\"reducedpropagation_expired_queue_processing\");\n            acquireLock(this.lock, PROCESS_EXPIRED_QUEUES_LOCK, token, getLockExpiry(intervalMs), log).setHandler(lockEvent -> {\n                if(lockEvent.succeeded()){\n                    if(lockEvent.result()){\n                        processExpiredQueues(token);\n                    }\n                } else {\n                    log.error(\"Could not acquire lock '\"+PROCESS_EXPIRED_QUEUES_LOCK+\"'. Message: \" + lockEvent.cause().getMessage());\n                }\n            });\n        });\n    }", "signature": "void startExpiredQueueProcessing(long intervalMs)", "full_signature": "public void startExpiredQueueProcessing(long intervalMs)", "class_method_signature": "ReducedPropagationManager.startExpiredQueueProcessing(long intervalMs)", "testcase": false, "constructor": false, "invocations": ["info", "cancelTimer", "setPeriodic", "createToken", "setHandler", "acquireLock", "getLockExpiry", "succeeded", "result", "processExpiredQueues", "error", "getMessage", "cause"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}