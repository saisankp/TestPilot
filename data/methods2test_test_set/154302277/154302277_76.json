{"test_class": {"identifier": "GridMeasurementPublishedEventProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Value(\"${distributionautomation.kafka.topic}\")\n    private String topic;", "modifier": "@Value(\"${distributionautomation.kafka.topic}\")\n    private", "type": "String", "declarator": "topic", "var_name": "topic"}, {"original_string": "@Autowired\n    private EmbeddedKafkaBroker embeddedKafka;", "modifier": "@Autowired\n    private", "type": "EmbeddedKafkaBroker", "declarator": "embeddedKafka", "var_name": "embeddedKafka"}, {"original_string": "@Mock\n    private DistributionAutomationMapper mapper;", "modifier": "@Mock\n    private", "type": "DistributionAutomationMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Autowired\n    private KafkaTemplate<String, GridMeasurementPublishedEvent> template;", "modifier": "@Autowired\n    private", "type": "KafkaTemplate<String, GridMeasurementPublishedEvent>", "declarator": "template", "var_name": "template"}, {"original_string": "private GridMeasurementPublishedEventProducer producer;", "modifier": "private", "type": "GridMeasurementPublishedEventProducer", "declarator": "producer", "var_name": "producer"}, {"original_string": "private GridMeasurementPublishedEvent message;", "modifier": "private", "type": "GridMeasurementPublishedEvent", "declarator": "message", "var_name": "message"}], "file": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducerTest.java"}, "test_case": {"identifier": "sendTest", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void sendTest() {\n\n        // send a message to the kafka bus\n        this.producer.send(\"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\");\n\n        // consume the message with embeddedKafka\n        final Map<String, Object> consumerProps = KafkaTestUtils.consumerProps(\"testGroup\", \"true\", this.embeddedKafka);\n        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n        final ConsumerFactory<String, GridMeasurementPublishedEvent> consumerFactory = new DefaultKafkaConsumerFactory<>(\n                consumerProps, new StringDeserializer(), new GridMeasurementPublishedEventDeserializer());\n        final Consumer<String, GridMeasurementPublishedEvent> consumer = consumerFactory.createConsumer();\n        this.embeddedKafka.consumeFromAnEmbeddedTopic(consumer, this.topic);\n        final ConsumerRecord<String, GridMeasurementPublishedEvent> received = KafkaTestUtils.getSingleRecord(consumer,\n                this.topic);\n\n        // check the consumed message\n        assertThat(received).has(value(this.message));\n    }", "signature": "void sendTest()", "full_signature": "@Test void sendTest()", "class_method_signature": "GridMeasurementPublishedEventProducerTest.sendTest()", "testcase": true, "constructor": false, "invocations": ["send", "consumerProps", "put", "createConsumer", "consumeFromAnEmbeddedTopic", "getSingleRecord", "has", "assertThat", "value"]}, "focal_class": {"identifier": "GridMeasurementPublishedEventProducer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate;", "modifier": "private final", "type": "KafkaTemplate<String, GridMeasurementPublishedEvent>", "declarator": "kafkaTemplate", "var_name": "kafkaTemplate"}, {"original_string": "private final DistributionAutomationMapper mapper;", "modifier": "private final", "type": "DistributionAutomationMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "GridMeasurementPublishedEventProducer", "parameters": "(\n            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate,\n            final DistributionAutomationMapper mapper)", "modifiers": "@Autowired public", "return": "", "signature": " GridMeasurementPublishedEventProducer(\n            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate,\n            final DistributionAutomationMapper mapper)", "full_signature": "@Autowired public  GridMeasurementPublishedEventProducer(\n            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate,\n            final DistributionAutomationMapper mapper)", "class_method_signature": "GridMeasurementPublishedEventProducer.GridMeasurementPublishedEventProducer(\n            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate,\n            final DistributionAutomationMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(final String measurement)", "modifiers": "public", "return": "void", "signature": "void send(final String measurement)", "full_signature": "public void send(final String measurement)", "class_method_signature": "GridMeasurementPublishedEventProducer.send(final String measurement)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java"}, "focal_method": {"identifier": "send", "parameters": "(final String measurement)", "modifiers": "public", "return": "void", "body": "public void send(final String measurement) {\n\n        final GridMeasurementPublishedEvent event = this.mapper.map(measurement,\n                GridMeasurementPublishedEvent.class);\n        /*\n         * No need for callback functionality now; by default, the template is\n         * configured with a LoggingProducerListener, which logs errors and does\n         * nothing when the send is successful.\n         */\n        this.kafkaTemplate.sendDefault(event);\n    }", "signature": "void send(final String measurement)", "full_signature": "public void send(final String measurement)", "class_method_signature": "GridMeasurementPublishedEventProducer.send(final String measurement)", "testcase": false, "constructor": false, "invocations": ["map", "sendDefault"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}