{"test_class": {"identifier": "AerTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/common/src/test/java/hera/api/model/AerTest.java"}, "test_case": {"identifier": "shouldSubstractFailOnEmptyOperand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldSubstractFailOnEmptyOperand() {\n    final Object[][] parameters = new Object[][] {\n        {Aer.EMPTY, Aer.ONE},\n        {Aer.ONE, Aer.EMPTY}\n    };\n\n    for (final Object[] parameter : parameters) {\n      final Aer left = (Aer) parameter[0];\n      final Aer right = (Aer) parameter[1];\n      try {\n        // when\n        left.subtract(right);\n        fail();\n      } catch (AssertionError e) {\n        // then\n      }\n    }\n  }", "signature": "void shouldSubstractFailOnEmptyOperand()", "full_signature": "@Test public void shouldSubstractFailOnEmptyOperand()", "class_method_signature": "AerTest.shouldSubstractFailOnEmptyOperand()", "testcase": true, "constructor": false, "invocations": ["subtract", "fail"]}, "focal_class": {"identifier": "Aer", "superclass": "", "interfaces": "implements Comparable<Aer>", "fields": [{"original_string": "public static final String EMPTY_STRING = \"Aer(EMPTY)\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_STRING = \"Aer(EMPTY)\"", "var_name": "EMPTY_STRING"}, {"original_string": "public static final Aer EMPTY = new Aer();", "modifier": "public static final", "type": "Aer", "declarator": "EMPTY = new Aer()", "var_name": "EMPTY"}, {"original_string": "public static final Aer ZERO = new Aer(BigInteger.ZERO);", "modifier": "public static final", "type": "Aer", "declarator": "ZERO = new Aer(BigInteger.ZERO)", "var_name": "ZERO"}, {"original_string": "public static final Aer ONE = new Aer(BigInteger.ONE);", "modifier": "public static final", "type": "Aer", "declarator": "ONE = new Aer(BigInteger.ONE)", "var_name": "ONE"}, {"original_string": "public static final Aer GIGA_ONE = new Aer(\"1\", Unit.GAER);", "modifier": "public static final", "type": "Aer", "declarator": "GIGA_ONE = new Aer(\"1\", Unit.GAER)", "var_name": "GIGA_ONE"}, {"original_string": "public static final Aer AERGO_ONE = new Aer(\"1\", Unit.AERGO);", "modifier": "public static final", "type": "Aer", "declarator": "AERGO_ONE = new Aer(\"1\", Unit.AERGO)", "var_name": "AERGO_ONE"}, {"original_string": "@Getter\n  protected final BigInteger value;", "modifier": "@Getter\n  protected final", "type": "BigInteger", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "of", "parameters": "(final String amount)", "modifiers": "public static", "return": "Aer", "signature": "Aer of(final String amount)", "full_signature": "public static Aer of(final String amount)", "class_method_signature": "Aer.of(final String amount)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final String amount, final Unit unit)", "modifiers": "public static", "return": "Aer", "signature": "Aer of(final String amount, final Unit unit)", "full_signature": "public static Aer of(final String amount, final Unit unit)", "class_method_signature": "Aer.of(final String amount, final Unit unit)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final BigInteger amount)", "modifiers": "public static", "return": "Aer", "signature": "Aer of(final BigInteger amount)", "full_signature": "public static Aer of(final BigInteger amount)", "class_method_signature": "Aer.of(final BigInteger amount)", "testcase": false, "constructor": false}, {"identifier": "Aer", "parameters": "(final String amount)", "modifiers": "public", "return": "", "signature": " Aer(final String amount)", "full_signature": "public  Aer(final String amount)", "class_method_signature": "Aer.Aer(final String amount)", "testcase": false, "constructor": true}, {"identifier": "Aer", "parameters": "(final String amount, final Unit unit)", "modifiers": "public", "return": "", "signature": " Aer(final String amount, final Unit unit)", "full_signature": "public  Aer(final String amount, final Unit unit)", "class_method_signature": "Aer.Aer(final String amount, final Unit unit)", "testcase": false, "constructor": true}, {"identifier": "Aer", "parameters": "(final BigInteger amount)", "modifiers": "public", "return": "", "signature": " Aer(final BigInteger amount)", "full_signature": "public  Aer(final BigInteger amount)", "class_method_signature": "Aer.Aer(final BigInteger amount)", "testcase": false, "constructor": true}, {"identifier": "Aer", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Aer()", "full_signature": "protected  Aer()", "class_method_signature": "Aer.Aer()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(final String value, final Unit unit)", "modifiers": "protected", "return": "BigInteger", "signature": "BigInteger parse(final String value, final Unit unit)", "full_signature": "protected BigInteger parse(final String value, final Unit unit)", "class_method_signature": "Aer.parse(final String value, final Unit unit)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Aer other)", "modifiers": "public", "return": "Aer", "signature": "Aer add(final Aer other)", "full_signature": "public Aer add(final Aer other)", "class_method_signature": "Aer.add(final Aer other)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Aer other)", "modifiers": "public", "return": "Aer", "signature": "Aer subtract(final Aer other)", "full_signature": "public Aer subtract(final Aer other)", "class_method_signature": "Aer.subtract(final Aer other)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final Aer other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final Aer other)", "full_signature": "@Override public int compareTo(final Aer other)", "class_method_signature": "Aer.compareTo(final Aer other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Aer.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final Unit unit)", "modifiers": "public", "return": "String", "signature": "String toString(final Unit unit)", "full_signature": "public String toString(final Unit unit)", "class_method_signature": "Aer.toString(final Unit unit)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/hera/api/model/Aer.java"}, "focal_method": {"identifier": "subtract", "parameters": "(final Aer other)", "modifiers": "public", "return": "Aer", "body": "public Aer subtract(final Aer other) {\n    assertNotNull(other, \"Other is null\");\n    assertNotEquals(Aer.EMPTY, this, \"Cannot subtract to Aer.EMPTY\");\n    assertNotEquals(Aer.EMPTY, other, \"Cannot add with Aer.EMPTY\");\n    final BigInteger subtracted = this.value.subtract(other.value);\n    return new Aer(subtracted.compareTo(BigInteger.ZERO) < 0 ? BigInteger.ZERO : subtracted);\n  }", "signature": "Aer subtract(final Aer other)", "full_signature": "public Aer subtract(final Aer other)", "class_method_signature": "Aer.subtract(final Aer other)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "assertNotEquals", "assertNotEquals", "subtract", "compareTo"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}