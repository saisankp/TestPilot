{"test_class": {"identifier": "AbsFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbsFunction absFunction;", "modifier": "private", "type": "AbsFunction", "declarator": "absFunction", "var_name": "absFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/AbsFunctionTest.java"}, "test_case": {"identifier": "testAbsFunctionPeriod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAbsFunctionPeriod() {\n        FunctionTestUtil.assertResult(absFunction.invoke(Period.of( 100, 50, 0 ) ),\n                Period.of(100, 50, 0));\n        FunctionTestUtil.assertResult(absFunction.invoke(Period.of( -100, 50, 0 ) ),\n                Period.of(100, -50, 0));\n        FunctionTestUtil.assertResult(absFunction.invoke(Period.of( 100, -50, 0 ) ),\n                Period.of(100, -50, 0));\n        FunctionTestUtil.assertResult(absFunction.invoke(Period.of( -100, -50, 0 ) ),\n                Period.of(100, 50, 0));\n        FunctionTestUtil.assertResult(absFunction.invoke(Period.of( -1, 30, 0 ) ),\n                Period.of(-1, 30, 0));\n        FunctionTestUtil.assertResultError(absFunction.invoke((Period) null ),\n                InvalidParametersEvent.class);\n    }", "signature": "void testAbsFunctionPeriod()", "full_signature": "@Test public void testAbsFunctionPeriod()", "class_method_signature": "AbsFunctionTest.testAbsFunctionPeriod()", "testcase": true, "constructor": false, "invocations": ["assertResult", "invoke", "of", "of", "assertResult", "invoke", "of", "of", "assertResult", "invoke", "of", "of", "assertResult", "invoke", "of", "of", "assertResult", "invoke", "of", "of", "assertResultError", "invoke"]}, "focal_class": {"identifier": "AbsFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [{"original_string": "public static final AbsFunction INSTANCE = new AbsFunction();", "modifier": "public static final", "type": "AbsFunction", "declarator": "INSTANCE = new AbsFunction()", "var_name": "INSTANCE"}], "methods": [{"identifier": "AbsFunction", "parameters": "()", "modifiers": "", "return": "", "signature": " AbsFunction()", "full_signature": "  AbsFunction()", "class_method_signature": "AbsFunction.AbsFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName( \"n\" ) BigDecimal number)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) BigDecimal number)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) BigDecimal number)", "class_method_signature": "AbsFunction.invoke(@ParameterName( \"n\" ) BigDecimal number)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"n\" ) Period duration)", "modifiers": "public", "return": "FEELFnResult<Period>", "signature": "FEELFnResult<Period> invoke(@ParameterName( \"n\" ) Period duration)", "full_signature": "public FEELFnResult<Period> invoke(@ParameterName( \"n\" ) Period duration)", "class_method_signature": "AbsFunction.invoke(@ParameterName( \"n\" ) Period duration)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName( \"n\" ) Duration duration)", "modifiers": "public", "return": "FEELFnResult<Duration>", "signature": "FEELFnResult<Duration> invoke(@ParameterName( \"n\" ) Duration duration)", "full_signature": "public FEELFnResult<Duration> invoke(@ParameterName( \"n\" ) Duration duration)", "class_method_signature": "AbsFunction.invoke(@ParameterName( \"n\" ) Duration duration)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/AbsFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName( \"n\" ) BigDecimal number)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "body": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) BigDecimal number) {\n        if ( number == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"number\", \"cannot be null\"));\n        }\n        return FEELFnResult.ofResult( number.abs() );\n    }", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) BigDecimal number)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName( \"n\" ) BigDecimal number)", "class_method_signature": "AbsFunction.invoke(@ParameterName( \"n\" ) BigDecimal number)", "testcase": false, "constructor": false, "invocations": ["ofError", "ofResult", "abs"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}