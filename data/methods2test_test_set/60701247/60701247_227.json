{"test_class": {"identifier": "UninstallIotLauncherAppsTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String PACKAGE_NAME = \"com.somepackage\";", "modifier": "private final", "type": "String", "declarator": "PACKAGE_NAME = \"com.somepackage\"", "var_name": "PACKAGE_NAME"}, {"original_string": "private final String OTHER_PACKAGE_NAME = \"com.someotherpackage\";", "modifier": "private final", "type": "String", "declarator": "OTHER_PACKAGE_NAME = \"com.someotherpackage\"", "var_name": "OTHER_PACKAGE_NAME"}, {"original_string": "@Mock private Project myProject;", "modifier": "@Mock private", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "@Mock private Executor myExecutor;", "modifier": "@Mock private", "type": "Executor", "declarator": "myExecutor", "var_name": "myExecutor"}, {"original_string": "@Mock private IDevice myDevice;", "modifier": "@Mock private", "type": "IDevice", "declarator": "myDevice", "var_name": "myDevice"}, {"original_string": "@Mock private IDevice myEmbeddedDevice;", "modifier": "@Mock private", "type": "IDevice", "declarator": "myEmbeddedDevice", "var_name": "myEmbeddedDevice"}, {"original_string": "@Mock private LaunchStatus myLaunchStatus;", "modifier": "@Mock private", "type": "LaunchStatus", "declarator": "myLaunchStatus", "var_name": "myLaunchStatus"}, {"original_string": "@Mock ConsolePrinter myPrinter;", "modifier": "@Mock", "type": "ConsolePrinter", "declarator": "myPrinter", "var_name": "myPrinter"}, {"original_string": "@Mock private IotInstallChecker myChecker;", "modifier": "@Mock private", "type": "IotInstallChecker", "declarator": "myChecker", "var_name": "myChecker"}, {"original_string": "@Mock private RetryingInstaller.Prompter myPrompt;", "modifier": "@Mock private", "type": "RetryingInstaller.Prompter", "declarator": "myPrompt", "var_name": "myPrompt"}], "file": "android/testSrc/com/android/tools/idea/run/tasks/UninstallIotLauncherAppsTaskTest.java"}, "test_case": {"identifier": "testTaskPromptsUserIfIotPackageExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTaskPromptsUserIfIotPackageExists() {\n    when(myChecker.getInstalledIotLauncherApps(myEmbeddedDevice)).thenReturn(Collections.singleton(OTHER_PACKAGE_NAME));\n    UninstallIotLauncherAppsTask task = new UninstallIotLauncherAppsTask(PACKAGE_NAME, myChecker, myPrompt);\n    task.run(myExecutor, myEmbeddedDevice, myLaunchStatus, myPrinter);\n    verify(myPrompt).showQuestionPrompt(Mockito.anyString());\n  }", "signature": "void testTaskPromptsUserIfIotPackageExists()", "full_signature": "@Test public void testTaskPromptsUserIfIotPackageExists()", "class_method_signature": "UninstallIotLauncherAppsTaskTest.testTaskPromptsUserIfIotPackageExists()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getInstalledIotLauncherApps", "singleton", "run", "showQuestionPrompt", "verify", "anyString"]}, "focal_class": {"identifier": "UninstallIotLauncherAppsTask", "superclass": "", "interfaces": "implements LaunchTask", "fields": [{"original_string": "private static final String ID = \"UNINSTALL_IOT\";", "modifier": "private static final", "type": "String", "declarator": "ID = \"UNINSTALL_IOT\"", "var_name": "ID"}, {"original_string": "private final String myPackageName;", "modifier": "private final", "type": "String", "declarator": "myPackageName", "var_name": "myPackageName"}, {"original_string": "private final RetryingInstaller.Prompter myPrompter;", "modifier": "private final", "type": "RetryingInstaller.Prompter", "declarator": "myPrompter", "var_name": "myPrompter"}, {"original_string": "private final IotInstallChecker myChecker;", "modifier": "private final", "type": "IotInstallChecker", "declarator": "myChecker", "var_name": "myChecker"}], "methods": [{"identifier": "UninstallIotLauncherAppsTask", "parameters": "(Project project, String packageName)", "modifiers": "public", "return": "", "signature": " UninstallIotLauncherAppsTask(Project project, String packageName)", "full_signature": "public  UninstallIotLauncherAppsTask(Project project, String packageName)", "class_method_signature": "UninstallIotLauncherAppsTask.UninstallIotLauncherAppsTask(Project project, String packageName)", "testcase": false, "constructor": true}, {"identifier": "UninstallIotLauncherAppsTask", "parameters": "(String packageName, IotInstallChecker checker, RetryingInstaller.Prompter prompter)", "modifiers": "@VisibleForTesting", "return": "", "signature": " UninstallIotLauncherAppsTask(String packageName, IotInstallChecker checker, RetryingInstaller.Prompter prompter)", "full_signature": "@VisibleForTesting  UninstallIotLauncherAppsTask(String packageName, IotInstallChecker checker, RetryingInstaller.Prompter prompter)", "class_method_signature": "UninstallIotLauncherAppsTask.UninstallIotLauncherAppsTask(String packageName, IotInstallChecker checker, RetryingInstaller.Prompter prompter)", "testcase": false, "constructor": true}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@NotNull @Override public String getDescription()", "class_method_signature": "UninstallIotLauncherAppsTask.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getDuration", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDuration()", "full_signature": "@Override public int getDuration()", "class_method_signature": "UninstallIotLauncherAppsTask.getDuration()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "modifiers": "@Override public", "return": "LaunchResult", "signature": "LaunchResult run(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "full_signature": "@Override public LaunchResult run(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "class_method_signature": "UninstallIotLauncherAppsTask.run(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getId()", "full_signature": "@NotNull @Override public String getId()", "class_method_signature": "UninstallIotLauncherAppsTask.getId()", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/tasks/UninstallIotLauncherAppsTask.java"}, "focal_method": {"identifier": "run", "parameters": "(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "modifiers": "@Override public", "return": "LaunchResult", "body": "@Override\n  public LaunchResult run(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer) {\n    // Ignore the check if not running on an embedded device.\n    if (!device.supportsFeature(IDevice.HardwareFeature.EMBEDDED)) {\n      return LaunchResult.success();\n    }\n\n    // Check for IoT Launcher apps\n    Set<String> installedIotLauncherApps = myChecker.getInstalledIotLauncherApps(device);\n    installedIotLauncherApps.remove(myPackageName);\n    if (!installedIotLauncherApps.isEmpty()) {\n      String otherApplicationIds = StringUtil.join(installedIotLauncherApps, \"\\n\");\n      String reason = AndroidBundle.message(\"deployment.failed.uninstall.prompt.androidthings.text\", otherApplicationIds);\n      if (myPrompter.showQuestionPrompt(reason)) {\n        Map<String, Throwable> failedUninstallApps = new TreeMap<>();\n        for (String app : installedIotLauncherApps) {\n          try {\n            device.uninstallPackage(app);\n          }\n          catch (InstallException e) {\n            failedUninstallApps.put(app, e);\n          }\n        }\n        if (!failedUninstallApps.isEmpty()) {\n          StringBuffer sb = new StringBuffer();\n          for (Map.Entry a : failedUninstallApps.entrySet()) {\n            sb.append(a.getKey());\n            sb.append(\": \");\n            sb.append(a.getValue());\n            sb.append(\"\\n\");\n          }\n          String errorMessage = AndroidBundle.message(\"deployment.failed.uninstall.prompt.androidthings.errortext\", sb.toString());\n          myPrompter.showErrorMessage(errorMessage);\n          return LaunchResult.error(\"\", getDescription());\n        }\n      } else {\n        printer.stdout(\"Installation aborted\");\n        return LaunchResult.error(\"\", getDescription());\n      }\n    }\n    return LaunchResult.success();\n  }", "signature": "LaunchResult run(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "full_signature": "@Override public LaunchResult run(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "class_method_signature": "UninstallIotLauncherAppsTask.run(\n    @NotNull Executor executor, @NotNull IDevice device, @NotNull LaunchStatus launchStatus, @NotNull ConsolePrinter printer)", "testcase": false, "constructor": false, "invocations": ["supportsFeature", "success", "getInstalledIotLauncherApps", "remove", "isEmpty", "join", "message", "showQuestionPrompt", "uninstallPackage", "put", "isEmpty", "entrySet", "append", "getKey", "append", "append", "getValue", "append", "message", "toString", "showErrorMessage", "error", "getDescription", "stdout", "error", "getDescription", "success"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}