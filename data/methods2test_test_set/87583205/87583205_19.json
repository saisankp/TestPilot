{"test_class": {"identifier": "EchoProtocolUdpTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CORRECT_MESSAGE = \"UDP payload!\";", "modifier": "private static final", "type": "String", "declarator": "CORRECT_MESSAGE = \"UDP payload!\"", "var_name": "CORRECT_MESSAGE"}, {"original_string": "private static final String WRONG_MESSAGE_ADDITIONAL_WHITESPACE = \"UDP payload! \";", "modifier": "private static final", "type": "String", "declarator": "WRONG_MESSAGE_ADDITIONAL_WHITESPACE = \"UDP payload! \"", "var_name": "WRONG_MESSAGE_ADDITIONAL_WHITESPACE"}, {"original_string": "private static final String WRONG_MESSAGE = \"TCP payload!\";", "modifier": "private static final", "type": "String", "declarator": "WRONG_MESSAGE = \"TCP payload!\"", "var_name": "WRONG_MESSAGE"}, {"original_string": "private static final String ECHO_SERVICE_HOST = \"echo.host\";", "modifier": "private static final", "type": "String", "declarator": "ECHO_SERVICE_HOST = \"echo.host\"", "var_name": "ECHO_SERVICE_HOST"}, {"original_string": "private QualityOfServiceTest qosTest;", "modifier": "private", "type": "QualityOfServiceTest", "declarator": "qosTest", "var_name": "qosTest"}, {"original_string": "private TestSettings testSettings;", "modifier": "private", "type": "TestSettings", "declarator": "testSettings", "var_name": "testSettings"}, {"original_string": "private RMBTClient clientHolder;", "modifier": "private", "type": "RMBTClient", "declarator": "clientHolder", "var_name": "clientHolder"}, {"original_string": "private DatagramPacket sendPacket;", "modifier": "private", "type": "DatagramPacket", "declarator": "sendPacket", "var_name": "sendPacket"}, {"original_string": "private InetAddress toReturn;", "modifier": "private", "type": "InetAddress", "declarator": "toReturn", "var_name": "toReturn"}], "file": "RMBTClient/src/test/java/at/rtr/rmbt/client/v2/task/EchoProtocolUdpTaskTest.java"}, "test_case": {"identifier": "testUdpEchoResponseWithSocketTimeoutError", "parameters": "(@Mocked final DatagramSocket mock, @Mocked final InetAddress inetAddress)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUdpEchoResponseWithSocketTimeoutError (@Mocked final DatagramSocket mock, @Mocked final InetAddress inetAddress) throws Exception {\n\n        new Expectations() {{\n\n            // spoof the internet address (as we WILL get an UnknownHostException otherwise)\n            InetAddress.getByName(anyString);\n            result = toReturn;  //return loopback address\n\n            // check the sent data for correctness, when send is called\n            mock.send((DatagramPacket) any);\n            result = new Delegate() {\n                void delegateMethod(DatagramPacket packet) {\n                    sendPacket = packet;\n                }\n            };\n\n            //return the correct message\n            mock.receive((DatagramPacket) any);\n            result = new SocketTimeoutException(\"Forcefully thrown exception\");\n\n        }};\n\n        final EchoProtocolUdpTask task = new EchoProtocolUdpTask(qosTest, clientHolder.getTaskDescList().get(0), 0);\n        final QoSTestResult res = task.call();\n\n        assertEquals(\"Result did not return TIMEOUT\",\"TIMEOUT\", res.getResultMap().get(AbstractEchoProtocolTask.RESULT_STATUS));\n        assertEquals(\"Wrong echo service host in result\", ECHO_SERVICE_HOST, res.getResultMap().get(\"echo_protocol_objective_host\"));\n        assertEquals(\"Wrong protocol type in result\", AbstractEchoProtocolTask.PROTOCOL_UDP, res.getResultMap().get(AbstractEchoProtocolTask.RESULT_PROTOCOL));\n    }", "signature": "void testUdpEchoResponseWithSocketTimeoutError(@Mocked final DatagramSocket mock, @Mocked final InetAddress inetAddress)", "full_signature": "@Test public void testUdpEchoResponseWithSocketTimeoutError(@Mocked final DatagramSocket mock, @Mocked final InetAddress inetAddress)", "class_method_signature": "EchoProtocolUdpTaskTest.testUdpEchoResponseWithSocketTimeoutError(@Mocked final DatagramSocket mock, @Mocked final InetAddress inetAddress)", "testcase": true, "constructor": false, "invocations": ["getByName", "send", "receive", "get", "getTaskDescList", "call", "assertEquals", "get", "getResultMap", "assertEquals", "get", "getResultMap", "assertEquals", "get", "getResultMap"]}, "focal_class": {"identifier": "EchoProtocolUdpTask", "superclass": "extends AbstractEchoProtocolTask", "interfaces": "", "fields": [], "methods": [{"identifier": "EchoProtocolUdpTask", "parameters": "(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "modifiers": "public", "return": "", "signature": " EchoProtocolUdpTask(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "full_signature": "public  EchoProtocolUdpTask(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "class_method_signature": "EchoProtocolUdpTask.EchoProtocolUdpTask(QualityOfServiceTest nnTest, TaskDesc taskDesc, int threadId)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "public", "return": "QoSTestResult", "signature": "QoSTestResult call()", "full_signature": "public QoSTestResult call()", "class_method_signature": "EchoProtocolUdpTask.call()", "testcase": false, "constructor": false}], "file": "RMBTClient/src/main/java/at/rtr/rmbt/client/v2/task/EchoProtocolUdpTask.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "public", "return": "QoSTestResult", "body": "public QoSTestResult call() throws Exception {\n\t\tfinal QoSTestResult result = initQoSTestResult(QosMeasurementType.ECHO_PROTOCOL);\n\t\ttry {\n\t\t\tonStart(result);\n\n\t\t\tif (testHost != null && testPort != null) {\n\n\t\t\t\ttry (final DatagramSocket socket = new DatagramSocket()) {\n\t\t\t\t\tsocket.connect(InetAddress.getByName(this.testHost), this.testPort);\n\t\t\t\t\tsocket.setSoTimeout((int) (this.timeout / 1e6));\n\n\t\t\t\t\tfinal byte[] payloadBytes = payload.getBytes();\n\n\t\t\t\t\tfinal DatagramPacket sendPacket = new DatagramPacket(payloadBytes, payloadBytes.length, InetAddress.getByName(this.testHost), this.testPort);\n\t\t\t\t\t//increase the payload size to check for potentially added characters\n\t\t\t\t\tfinal DatagramPacket receivePacket = new DatagramPacket(new byte[payloadBytes.length + 1], payloadBytes.length + 1);\n\n\t\t\t\t\tfinal long startTime = System.nanoTime();\n\t\t\t\t\tsocket.send(sendPacket);\n\t\t\t\t\tsocket.receive(receivePacket);\n\t\t\t\t\tfinal long duration = System.nanoTime() - startTime;\n\n\t\t\t\t\tfinal String testResponse = new String(receivePacket.getData(), 0, receivePacket.getLength());\n\t\t\t\t\tif (sendPacket.getLength() == receivePacket.getLength() && payload.equals(testResponse)) {\n                        result.getResultMap().put(RESULT_STATUS, \"OK\");\n                    } else {\n                        result.getResultMap().put(RESULT_STATUS, \"ERROR\");\n                    }\n\n\t\t\t\t\tresult.getResultMap().put(RESULT_RTT_NS, Long.toString(duration));\n\n\t\t\t\t\tresult.getResultMap().put(RESULT, testResponse);\n\n\t\t\t\t} catch (SocketTimeoutException ex) {\n\t\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"TIMEOUT\");\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t    ex.printStackTrace();\n\t\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"ERROR\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tresult.getResultMap().put(RESULT_STATUS, \"ERROR\");\n\t\t\t}\n\n\t\t} catch (final Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t\tresult.getResultMap().put(RESULT_STATUS, \"ERROR\");\n\t\t} finally {\n\t\t\tif (this.testPort != null) {\n\t\t\t\tresult.getResultMap().put(RESULT_PORT, testPort);\n\t\t\t}\n\n\t\t\tif (this.testHost != null) {\n\t\t\t\tresult.getResultMap().put(\"echo_protocol_objective_host\", this.testHost);\n\t\t\t}\n\n\t\t\tresult.getResultMap().put(RESULT_TIMEOUT, timeout);\n\n\t\t\tresult.getResultMap().put(AbstractEchoProtocolTask.PARAM_PAYLOAD, this.payload);\n\n\t\t\tresult.getResultMap().put(AbstractEchoProtocolTask.RESULT_PROTOCOL, AbstractEchoProtocolTask.PROTOCOL_UDP);\n\n\t\t\tonEnd(result);\n\t\t}\n\n\t\treturn result;\n\t\t    \n\t}", "signature": "QoSTestResult call()", "full_signature": "public QoSTestResult call()", "class_method_signature": "EchoProtocolUdpTask.call()", "testcase": false, "constructor": false, "invocations": ["initQoSTestResult", "onStart", "connect", "getByName", "setSoTimeout", "getBytes", "getByName", "nanoTime", "send", "receive", "nanoTime", "getData", "getLength", "getLength", "getLength", "equals", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "toString", "put", "getResultMap", "put", "getResultMap", "printStackTrace", "put", "getResultMap", "put", "getResultMap", "printStackTrace", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "put", "getResultMap", "onEnd"]}, "repository": {"repo_id": 87583205, "url": "https://github.com/rtr-nettest/open-rmbt", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 21100, "license": "licensed"}}