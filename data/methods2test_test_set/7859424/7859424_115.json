{"test_class": {"identifier": "BoardTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}], "file": "src/edu/lclark/orego/core/BoardTest.java"}, "test_case": {"identifier": "testSetUpHandicap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetUpHandicap() {\n\t\t\n\t\tString[] problem = new String[] {\n\t\t\t\t\"...................\",// 19\n\t\t\t\t\"...................\",// 18\n\t\t\t\t\"...................\",// 17\n\t\t\t\t\"...#...........#...\",// 16\n\t\t\t\t\"...................\",// 15\n\t\t\t\t\"...................\",// 14\n\t\t\t\t\"...................\",// 13\n\t\t\t\t\"...................\",// 12\n\t\t\t\t\"...................\",// 11\n\t\t\t\t\".........#.........\",// 10\n\t\t\t\t\"...................\",// 9\n\t\t\t\t\"...................\",// 8\n\t\t\t\t\"...................\",// 7\n\t\t\t\t\"...................\",// 6\n\t\t\t\t\"...................\",// 5\n\t\t\t\t\"...#...........#...\",// 4\n\t\t\t\t\"...................\",// 3\n\t\t\t\t\"...................\",// 2\n\t\t\t\t\"...................\" // 1\n\t\t      // ABCDEFGHJKLMNOPQRST\n\t\t};\n\t\tString[] problem2 = new String[] {\n\t\t\t\t\"...................\",// 19\n\t\t\t\t\"...................\",// 18\n\t\t\t\t\"...................\",// 17\n\t\t\t\t\"...#.....#.....#...\",// 16\n\t\t\t\t\"...................\",// 15\n\t\t\t\t\"...................\",// 14\n\t\t\t\t\"...................\",// 13\n\t\t\t\t\"...................\",// 12\n\t\t\t\t\"...................\",// 11\n\t\t\t\t\"...#...........#...\",// 10\n\t\t\t\t\"...................\",// 9\n\t\t\t\t\"...................\",// 8\n\t\t\t\t\"...................\",// 7\n\t\t\t\t\"...................\",// 6\n\t\t\t\t\"...................\",// 5\n\t\t\t\t\"...#.....#.....#...\",// 4\n\t\t\t\t\"...................\",// 3\n\t\t\t\t\"...................\",// 2\n\t\t\t\t\"...................\" // 1\n\t\t      // ABCDEFGHJKLMNOPQRST\n\t\t};\n\t\tboard = new Board(19);\n\t\tboard.setUpProblem(problem, WHITE);\n\t\tlong hash = board.getFancyHash();\n\t\tboard.setUpHandicap(5);\n\t\tassertEquals(hash, board.getFancyHash());\n\t\tboard.setUpProblem(problem2, WHITE);\n\t\thash = board.getFancyHash();\n\t\tboard.setUpHandicap(8);\n\t\tassertEquals(hash, board.getFancyHash());\n\t}", "signature": "void testSetUpHandicap()", "full_signature": "@Test public void testSetUpHandicap()", "class_method_signature": "BoardTest.testSetUpHandicap()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "getFancyHash", "setUpHandicap", "assertEquals", "getFancyHash", "setUpProblem", "getFancyHash", "setUpHandicap", "assertEquals", "getFancyHash"]}, "focal_class": {"identifier": "Board", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private final static String[] HANDICAP_LOCATIONS = { \"d4\", \"q16\", \"q4\",\n\t\t\t\"d16\", \"k10\", \"d10\", \"q10\", \"k4\", \"k16\" };", "modifier": "private final static", "type": "String[]", "declarator": "HANDICAP_LOCATIONS = { \"d4\", \"q16\", \"q4\",\n\t\t\t\"d16\", \"k10\", \"d10\", \"q10\", \"k4\", \"k16\" }", "var_name": "HANDICAP_LOCATIONS"}, {"original_string": "private final ShortList capturedStones;", "modifier": "private final", "type": "ShortList", "declarator": "capturedStones", "var_name": "capturedStones"}, {"original_string": "private StoneColor colorToPlay;", "modifier": "private", "type": "StoneColor", "declarator": "colorToPlay", "var_name": "colorToPlay"}, {"original_string": "private final CoordinateSystem coords;", "modifier": "private final", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private final ShortList enemyNeighboringChainIds;", "modifier": "private final", "type": "ShortList", "declarator": "enemyNeighboringChainIds", "var_name": "enemyNeighboringChainIds"}, {"original_string": "private final ShortList friendlyNeighboringChainIds;", "modifier": "private final", "type": "ShortList", "declarator": "friendlyNeighboringChainIds", "var_name": "friendlyNeighboringChainIds"}, {"original_string": "private long hash;", "modifier": "private", "type": "long", "declarator": "hash", "var_name": "hash"}, {"original_string": "private final ShortSet[] initialStones;", "modifier": "private final", "type": "ShortSet[]", "declarator": "initialStones", "var_name": "initialStones"}, {"original_string": "private short koPoint;", "modifier": "private", "type": "short", "declarator": "koPoint", "var_name": "koPoint"}, {"original_string": "private final ShortSet lastPlayLiberties;", "modifier": "private final", "type": "ShortSet", "declarator": "lastPlayLiberties", "var_name": "lastPlayLiberties"}, {"original_string": "private final ShortList neighborsOfCapturedStone;", "modifier": "private final", "type": "ShortList", "declarator": "neighborsOfCapturedStone", "var_name": "neighborsOfCapturedStone"}, {"original_string": "private BoardObserver[] observers;", "modifier": "private", "type": "BoardObserver[]", "declarator": "observers", "var_name": "observers"}, {"original_string": "private short passes;", "modifier": "private", "type": "short", "declarator": "passes", "var_name": "passes"}, {"original_string": "private final Point[] points;", "modifier": "private final", "type": "Point[]", "declarator": "points", "var_name": "points"}, {"original_string": "private long proposedHash;", "modifier": "private", "type": "long", "declarator": "proposedHash", "var_name": "proposedHash"}, {"original_string": "private final SuperKoTable superKoTable;", "modifier": "private final", "type": "SuperKoTable", "declarator": "superKoTable", "var_name": "superKoTable"}, {"original_string": "private short turn;", "modifier": "private", "type": "short", "declarator": "turn", "var_name": "turn"}, {"original_string": "private final ShortSet vacantPoints;", "modifier": "private final", "type": "ShortSet", "declarator": "vacantPoints", "var_name": "vacantPoints"}], "methods": [{"identifier": "Board", "parameters": "(int width)", "modifiers": "public", "return": "", "signature": " Board(int width)", "full_signature": "public  Board(int width)", "class_method_signature": "Board.Board(int width)", "testcase": false, "constructor": true}, {"identifier": "addObserver", "parameters": "(BoardObserver observer)", "modifiers": "public", "return": "void", "signature": "void addObserver(BoardObserver observer)", "full_signature": "public void addObserver(BoardObserver observer)", "class_method_signature": "Board.addObserver(BoardObserver observer)", "testcase": false, "constructor": false}, {"identifier": "adjustEnemyNeighbors", "parameters": "(short p)", "modifiers": "private", "return": "void", "signature": "void adjustEnemyNeighbors(short p)", "full_signature": "private void adjustEnemyNeighbors(short p)", "class_method_signature": "Board.adjustEnemyNeighbors(short p)", "testcase": false, "constructor": false}, {"identifier": "adjustFriendlyNeighbors", "parameters": "(short p)", "modifiers": "private", "return": "void", "signature": "void adjustFriendlyNeighbors(short p)", "full_signature": "private void adjustFriendlyNeighbors(short p)", "class_method_signature": "Board.adjustFriendlyNeighbors(short p)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Board.clear()", "testcase": false, "constructor": false}, {"identifier": "clearPreservingInitialStones", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearPreservingInitialStones()", "full_signature": "public void clearPreservingInitialStones()", "class_method_signature": "Board.clearPreservingInitialStones()", "testcase": false, "constructor": false}, {"identifier": "copyDataFrom", "parameters": "(Board that)", "modifiers": "public", "return": "void", "signature": "void copyDataFrom(Board that)", "full_signature": "public void copyDataFrom(Board that)", "class_method_signature": "Board.copyDataFrom(Board that)", "testcase": false, "constructor": false}, {"identifier": "finalizePlay", "parameters": "(StoneColor color, short p)", "modifiers": "private", "return": "void", "signature": "void finalizePlay(StoneColor color, short p)", "full_signature": "private void finalizePlay(StoneColor color, short p)", "class_method_signature": "Board.finalizePlay(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "getChainNextPoint", "parameters": "(short p)", "modifiers": "public", "return": "short", "signature": "short getChainNextPoint(short p)", "full_signature": "public short getChainNextPoint(short p)", "class_method_signature": "Board.getChainNextPoint(short p)", "testcase": false, "constructor": false}, {"identifier": "getChainRoot", "parameters": "(short p)", "modifiers": "public", "return": "short", "signature": "short getChainRoot(short p)", "full_signature": "public short getChainRoot(short p)", "class_method_signature": "Board.getChainRoot(short p)", "testcase": false, "constructor": false}, {"identifier": "getColorAt", "parameters": "(short p)", "modifiers": "public", "return": "Color", "signature": "Color getColorAt(short p)", "full_signature": "public Color getColorAt(short p)", "class_method_signature": "Board.getColorAt(short p)", "testcase": false, "constructor": false}, {"identifier": "getColorToPlay", "parameters": "()", "modifiers": "public", "return": "StoneColor", "signature": "StoneColor getColorToPlay()", "full_signature": "public StoneColor getColorToPlay()", "class_method_signature": "Board.getColorToPlay()", "testcase": false, "constructor": false}, {"identifier": "getCoordinateSystem", "parameters": "()", "modifiers": "public", "return": "CoordinateSystem", "signature": "CoordinateSystem getCoordinateSystem()", "full_signature": "public CoordinateSystem getCoordinateSystem()", "class_method_signature": "Board.getCoordinateSystem()", "testcase": false, "constructor": false}, {"identifier": "getFancyHash", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFancyHash()", "full_signature": "public long getFancyHash()", "class_method_signature": "Board.getFancyHash()", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getHash()", "full_signature": "public long getHash()", "class_method_signature": "Board.getHash()", "testcase": false, "constructor": false}, {"identifier": "getLiberties", "parameters": "(short p)", "modifiers": "public", "return": "ShortSet", "signature": "ShortSet getLiberties(short p)", "full_signature": "public ShortSet getLiberties(short p)", "class_method_signature": "Board.getLiberties(short p)", "testcase": false, "constructor": false}, {"identifier": "getNeighborsOfColor", "parameters": "(short p, Color color)", "modifiers": "public", "return": "int", "signature": "int getNeighborsOfColor(short p, Color color)", "full_signature": "public int getNeighborsOfColor(short p, Color color)", "class_method_signature": "Board.getNeighborsOfColor(short p, Color color)", "testcase": false, "constructor": false}, {"identifier": "getPasses", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getPasses()", "full_signature": "public short getPasses()", "class_method_signature": "Board.getPasses()", "testcase": false, "constructor": false}, {"identifier": "getTurn", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTurn()", "full_signature": "public int getTurn()", "class_method_signature": "Board.getTurn()", "testcase": false, "constructor": false}, {"identifier": "getVacantPoints", "parameters": "()", "modifiers": "public", "return": "ShortSet", "signature": "ShortSet getVacantPoints()", "full_signature": "public ShortSet getVacantPoints()", "class_method_signature": "Board.getVacantPoints()", "testcase": false, "constructor": false}, {"identifier": "hashAfterRemovingCapturedStones", "parameters": "(StoneColor color, short p)", "modifiers": "private", "return": "long", "signature": "long hashAfterRemovingCapturedStones(StoneColor color, short p)", "full_signature": "private long hashAfterRemovingCapturedStones(StoneColor color, short p)", "class_method_signature": "Board.hashAfterRemovingCapturedStones(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "hasMaxNeighborsForColor", "parameters": "(StoneColor color, short p)", "modifiers": "public", "return": "boolean", "signature": "boolean hasMaxNeighborsForColor(StoneColor color, short p)", "full_signature": "public boolean hasMaxNeighborsForColor(StoneColor color, short p)", "class_method_signature": "Board.hasMaxNeighborsForColor(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "isLegal", "parameters": "(short p)", "modifiers": "public", "return": "boolean", "signature": "boolean isLegal(short p)", "full_signature": "public boolean isLegal(short p)", "class_method_signature": "Board.isLegal(short p)", "testcase": false, "constructor": false}, {"identifier": "isSuicidal", "parameters": "(StoneColor color, short p)", "modifiers": "private", "return": "boolean", "signature": "boolean isSuicidal(StoneColor color, short p)", "full_signature": "private boolean isSuicidal(StoneColor color, short p)", "class_method_signature": "Board.isSuicidal(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "legality", "parameters": "(StoneColor color, short p)", "modifiers": "private", "return": "Legality", "signature": "Legality legality(StoneColor color, short p)", "full_signature": "private Legality legality(StoneColor color, short p)", "class_method_signature": "Board.legality(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "legalityFast", "parameters": "(StoneColor color, short p)", "modifiers": "private", "return": "Legality", "signature": "Legality legalityFast(StoneColor color, short p)", "full_signature": "private Legality legalityFast(StoneColor color, short p)", "class_method_signature": "Board.legalityFast(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "mergeChains", "parameters": "(short base, short appendage)", "modifiers": "private", "return": "void", "signature": "void mergeChains(short base, short appendage)", "full_signature": "private void mergeChains(short base, short appendage)", "class_method_signature": "Board.mergeChains(short base, short appendage)", "testcase": false, "constructor": false}, {"identifier": "notifyObservers", "parameters": "(StoneColor color, short p)", "modifiers": "private", "return": "void", "signature": "void notifyObservers(StoneColor color, short p)", "full_signature": "private void notifyObservers(StoneColor color, short p)", "class_method_signature": "Board.notifyObservers(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "pass", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pass()", "full_signature": "public void pass()", "class_method_signature": "Board.pass()", "testcase": false, "constructor": false}, {"identifier": "placeInitialStone", "parameters": "(StoneColor color, short p)", "modifiers": "public", "return": "void", "signature": "void placeInitialStone(StoneColor color, short p)", "full_signature": "public void placeInitialStone(StoneColor color, short p)", "class_method_signature": "Board.placeInitialStone(StoneColor color, short p)", "testcase": false, "constructor": false}, {"identifier": "play", "parameters": "(short p)", "modifiers": "public", "return": "Legality", "signature": "Legality play(short p)", "full_signature": "public Legality play(short p)", "class_method_signature": "Board.play(short p)", "testcase": false, "constructor": false}, {"identifier": "play", "parameters": "(String move)", "modifiers": "public", "return": "Legality", "signature": "Legality play(String move)", "full_signature": "public Legality play(String move)", "class_method_signature": "Board.play(String move)", "testcase": false, "constructor": false}, {"identifier": "playFast", "parameters": "(short p)", "modifiers": "public", "return": "Legality", "signature": "Legality playFast(short p)", "full_signature": "public Legality playFast(short p)", "class_method_signature": "Board.playFast(short p)", "testcase": false, "constructor": false}, {"identifier": "removeStone", "parameters": "(short p)", "modifiers": "private", "return": "void", "signature": "void removeStone(short p)", "full_signature": "private void removeStone(short p)", "class_method_signature": "Board.removeStone(short p)", "testcase": false, "constructor": false}, {"identifier": "setColorToPlay", "parameters": "(StoneColor stoneColor)", "modifiers": "public", "return": "void", "signature": "void setColorToPlay(StoneColor stoneColor)", "full_signature": "public void setColorToPlay(StoneColor stoneColor)", "class_method_signature": "Board.setColorToPlay(StoneColor stoneColor)", "testcase": false, "constructor": false}, {"identifier": "setPasses", "parameters": "(short passes)", "modifiers": "public", "return": "void", "signature": "void setPasses(short passes)", "full_signature": "public void setPasses(short passes)", "class_method_signature": "Board.setPasses(short passes)", "testcase": false, "constructor": false}, {"identifier": "setUpHandicap", "parameters": "(int handicapSize)", "modifiers": "public", "return": "void", "signature": "void setUpHandicap(int handicapSize)", "full_signature": "public void setUpHandicap(int handicapSize)", "class_method_signature": "Board.setUpHandicap(int handicapSize)", "testcase": false, "constructor": false}, {"identifier": "setUpProblem", "parameters": "(String[] diagram, StoneColor colorToPlay)", "modifiers": "public", "return": "void", "signature": "void setUpProblem(String[] diagram, StoneColor colorToPlay)", "full_signature": "public void setUpProblem(String[] diagram, StoneColor colorToPlay)", "class_method_signature": "Board.setUpProblem(String[] diagram, StoneColor colorToPlay)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Board.toString()", "testcase": false, "constructor": false}, {"identifier": "removeStones", "parameters": "(ShortSet ourDead)", "modifiers": "public", "return": "void", "signature": "void removeStones(ShortSet ourDead)", "full_signature": "public void removeStones(ShortSet ourDead)", "class_method_signature": "Board.removeStones(ShortSet ourDead)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/core/Board.java"}, "focal_method": {"identifier": "setUpHandicap", "parameters": "(int handicapSize)", "modifiers": "public", "return": "void", "body": "public void setUpHandicap(int handicapSize) {\n\t\tclear();\n\t\tfor (int i = 0; i < handicapSize; i++) {\n\t\t\tif ((handicapSize == 6 || handicapSize == 8) && i == 4) {\n\t\t\t\ti++;\n\t\t\t\thandicapSize++;\n\t\t\t}\n\t\t\tplaceInitialStone(BLACK, coords.at(HANDICAP_LOCATIONS[i]));\n\t\t}\n\t\tsetColorToPlay(WHITE);\n\t}", "signature": "void setUpHandicap(int handicapSize)", "full_signature": "public void setUpHandicap(int handicapSize)", "class_method_signature": "Board.setUpHandicap(int handicapSize)", "testcase": false, "constructor": false, "invocations": ["clear", "placeInitialStone", "at", "setColorToPlay"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}