{"test_class": {"identifier": "DefaultActorThreadTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProxyFactory mProxyFactory;", "modifier": "@Mock\n    private", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@Mock\n    private FailureHandler mFailureHandler;", "modifier": "@Mock\n    private", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@Mock\n    private Runnable mImpl;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mImpl", "var_name": "mImpl"}, {"original_string": "@Mock\n    private Runnable mImplProxy;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mImplProxy", "var_name": "mImplProxy"}, {"original_string": "@Mock\n    private Message mMessage;", "modifier": "@Mock\n    private", "type": "Message", "declarator": "mMessage", "var_name": "mMessage"}, {"original_string": "private DefaultActorThread.ThreadFactory mThreadFactory = new DefaultActorThread.ThreadFactory() {\n        @Override\n        public ActorHandlerBase createThread(Looper looper, long stopDelay) {\n            return createHandler(stopDelay, null);\n        }\n    };", "modifier": "private", "type": "DefaultActorThread.ThreadFactory", "declarator": "mThreadFactory = new DefaultActorThread.ThreadFactory() {\n        @Override\n        public ActorHandlerBase createThread(Looper looper, long stopDelay) {\n            return createHandler(stopDelay, null);\n        }\n    }", "var_name": "mThreadFactory"}], "file": "actors-library/src/test/java/com/truecaller/androidactors/DefaultActorThreadTest.java"}, "test_case": {"identifier": "sendTransaction_sendToHandler_initialState", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void sendTransaction_sendToHandler_initialState() {\n        DefaultActorThread thread = createThread();\n\n        Transaction transaction = Transaction.<Object>obtain(mImpl, mMessage, mFailureHandler);\n        thread.sendTransaction(transaction);\n\n        Assert.assertNotNull(thread.mHandler);\n        Mockito.verify(thread.mHandler).sendTransaction(transaction);\n    }", "signature": "void sendTransaction_sendToHandler_initialState()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void sendTransaction_sendToHandler_initialState()", "class_method_signature": "DefaultActorThreadTest.sendTransaction_sendToHandler_initialState()", "testcase": true, "constructor": false, "invocations": ["createThread", "obtain", "sendTransaction", "assertNotNull", "sendTransaction", "verify"]}, "focal_class": {"identifier": "DefaultActorThread", "superclass": "", "interfaces": "implements ActorThread", "fields": [{"original_string": "@NonNull\n    private final ThreadFactory mThreadFactory;", "modifier": "@NonNull\n    private final", "type": "ThreadFactory", "declarator": "mThreadFactory", "var_name": "mThreadFactory"}, {"original_string": "@NonNull\n    private final FailureHandler mFailureHandler;", "modifier": "@NonNull\n    private final", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@NonNull\n    private final ProxyFactory mProxyFactory;", "modifier": "@NonNull\n    private final", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@NonNull\n    private final String mThreadName;", "modifier": "@NonNull\n    private final", "type": "String", "declarator": "mThreadName", "var_name": "mThreadName"}, {"original_string": "private final long mStopDelay;", "modifier": "private final", "type": "long", "declarator": "mStopDelay", "var_name": "mStopDelay"}, {"original_string": "@VisibleForTesting\n    @Nullable\n    /* package */ ActorHandlerBase mHandler;", "modifier": "@VisibleForTesting\n    @Nullable", "type": "ActorHandlerBase", "declarator": "mHandler", "var_name": "mHandler"}], "methods": [{"identifier": "DefaultActorThread", "parameters": "(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                     @NonNull String threadName)", "modifiers": "", "return": "", "signature": " DefaultActorThread(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                     @NonNull String threadName)", "full_signature": "  DefaultActorThread(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                     @NonNull String threadName)", "class_method_signature": "DefaultActorThread.DefaultActorThread(@NonNull ProxyFactory proxyFactory, @NonNull FailureHandler failureHandler,\n                                     @NonNull String threadName)", "testcase": false, "constructor": true}, {"identifier": "DefaultActorThread", "parameters": "(@NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "modifiers": "", "return": "", "signature": " DefaultActorThread(@NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "full_signature": "  DefaultActorThread(@NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "class_method_signature": "DefaultActorThread.DefaultActorThread(@NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "testcase": false, "constructor": true}, {"identifier": "DefaultActorThread", "parameters": "(@NonNull ThreadFactory threadFactory, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "modifiers": "@VisibleForTesting", "return": "", "signature": " DefaultActorThread(@NonNull ThreadFactory threadFactory, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "full_signature": "@VisibleForTesting  DefaultActorThread(@NonNull ThreadFactory threadFactory, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "class_method_signature": "DefaultActorThread.DefaultActorThread(@NonNull ThreadFactory threadFactory, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull String threadName, long stopDelay)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(@NonNull Class<T> cls, @NonNull T impl)", "modifiers": "@NonNull @Override public", "return": "ActorRef<T>", "signature": "ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "full_signature": "@NonNull @Override public ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "class_method_signature": "DefaultActorThread.bind(@NonNull Class<T> cls, @NonNull T impl)", "testcase": false, "constructor": false}, {"identifier": "sendTransaction", "parameters": "(@NonNull Transaction transaction)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void sendTransaction(@NonNull Transaction transaction)", "full_signature": "@VisibleForTesting void sendTransaction(@NonNull Transaction transaction)", "class_method_signature": "DefaultActorThread.sendTransaction(@NonNull Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "stopThread", "parameters": "(@NonNull Looper looper)", "modifiers": "private", "return": "void", "signature": "void stopThread(@NonNull Looper looper)", "full_signature": "private void stopThread(@NonNull Looper looper)", "class_method_signature": "DefaultActorThread.stopThread(@NonNull Looper looper)", "testcase": false, "constructor": false}], "file": "actors-library/src/main/java/com/truecaller/androidactors/DefaultActorThread.java"}, "focal_method": {"identifier": "sendTransaction", "parameters": "(@NonNull Transaction transaction)", "modifiers": "@VisibleForTesting", "return": "void", "body": "@VisibleForTesting\n    /* package */ void sendTransaction(@NonNull Transaction transaction) {\n        ActorHandlerBase handler = mHandler;\n        if (handler != null && handler.sendTransaction(transaction)) {\n            return;\n        }\n\n        synchronized (this) {\n            if ((handler = mHandler) != null && handler.sendTransaction(transaction)) {\n                return;\n            }\n\n            // start thread and schedule transaction\n            HandlerThread thread = new HandlerThread(mThreadName);\n            thread.start();\n\n            mHandler = mThreadFactory.createThread(thread.getLooper(), mStopDelay);\n            mHandler.sendTransaction(transaction);\n        }\n    }", "signature": "void sendTransaction(@NonNull Transaction transaction)", "full_signature": "@VisibleForTesting void sendTransaction(@NonNull Transaction transaction)", "class_method_signature": "DefaultActorThread.sendTransaction(@NonNull Transaction transaction)", "testcase": false, "constructor": false, "invocations": ["sendTransaction", "sendTransaction", "start", "createThread", "getLooper", "sendTransaction"]}, "repository": {"repo_id": 99569378, "url": "https://github.com/truecaller/android-actors-library", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 20, "size": 352, "license": "licensed"}}