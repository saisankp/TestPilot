{"test_class": {"identifier": "ConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/ConfigTest.java"}, "test_case": {"identifier": "testRegisterKeyType_NoCatalogue_shouldThrowException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRegisterKeyType_NoCatalogue_shouldThrowException() throws Exception {\n    KeyTypeEntry entry = KeyTypeEntry.newBuilder().setCatalogueName(\"DoesNotExist\").build();\n    try {\n      Config.registerKeyType(entry);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      // expected\n    }\n  }", "signature": "void testRegisterKeyType_NoCatalogue_shouldThrowException()", "full_signature": "@Test public void testRegisterKeyType_NoCatalogue_shouldThrowException()", "class_method_signature": "ConfigTest.testRegisterKeyType_NoCatalogue_shouldThrowException()", "testcase": true, "constructor": false, "invocations": ["build", "setCatalogueName", "newBuilder", "registerKeyType", "fail"]}, "focal_class": {"identifier": "Config", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getTinkKeyTypeEntry", "parameters": "(\n      String catalogueName,\n      String primitiveName,\n      String keyProtoName,\n      int keyManagerVersion,\n      boolean newKeyAllowed)", "modifiers": "public static", "return": "KeyTypeEntry", "signature": "KeyTypeEntry getTinkKeyTypeEntry(\n      String catalogueName,\n      String primitiveName,\n      String keyProtoName,\n      int keyManagerVersion,\n      boolean newKeyAllowed)", "full_signature": "public static KeyTypeEntry getTinkKeyTypeEntry(\n      String catalogueName,\n      String primitiveName,\n      String keyProtoName,\n      int keyManagerVersion,\n      boolean newKeyAllowed)", "class_method_signature": "Config.getTinkKeyTypeEntry(\n      String catalogueName,\n      String primitiveName,\n      String keyProtoName,\n      int keyManagerVersion,\n      boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(RegistryConfig config)", "modifiers": "public static", "return": "void", "signature": "void register(RegistryConfig config)", "full_signature": "public static void register(RegistryConfig config)", "class_method_signature": "Config.register(RegistryConfig config)", "testcase": false, "constructor": false}, {"identifier": "registerKeyType", "parameters": "(KeyTypeEntry entry)", "modifiers": "public static", "return": "void", "signature": "void registerKeyType(KeyTypeEntry entry)", "full_signature": "public static void registerKeyType(KeyTypeEntry entry)", "class_method_signature": "Config.registerKeyType(KeyTypeEntry entry)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(KeyTypeEntry entry)", "modifiers": "private static", "return": "void", "signature": "void validate(KeyTypeEntry entry)", "full_signature": "private static void validate(KeyTypeEntry entry)", "class_method_signature": "Config.validate(KeyTypeEntry entry)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/Config.java"}, "focal_method": {"identifier": "registerKeyType", "parameters": "(KeyTypeEntry entry)", "modifiers": "public static", "return": "void", "body": "public static void registerKeyType(KeyTypeEntry entry) throws GeneralSecurityException {\n    validate(entry);\n    // Catalogues are no longer supported; we simply return on those catalogues which have been\n    // removed, as the key managers will be registered already.\n    if (entry.getCatalogueName().equals(\"TinkAead\")\n        || entry.getCatalogueName().equals(\"TinkMac\")\n        || entry.getCatalogueName().equals(\"TinkHybridDecrypt\")\n        || entry.getCatalogueName().equals(\"TinkHybridEncrypt\")\n        || entry.getCatalogueName().equals(\"TinkPublicKeySign\")\n        || entry.getCatalogueName().equals(\"TinkPublicKeyVerify\")\n        || entry.getCatalogueName().equals(\"TinkStreamingAead\")\n        || entry.getCatalogueName().equals(\"TinkDeterministicAead\")) {\n      return;\n    }\n    Catalogue<?> catalogue = Registry.getCatalogue(entry.getCatalogueName());\n    Registry.registerPrimitiveWrapper(catalogue.getPrimitiveWrapper());\n    KeyManager<?> keyManager =\n        catalogue.getKeyManager(\n            entry.getTypeUrl(), entry.getPrimitiveName(), entry.getKeyManagerVersion());\n    Registry.registerKeyManager(keyManager, entry.getNewKeyAllowed());\n  }", "signature": "void registerKeyType(KeyTypeEntry entry)", "full_signature": "public static void registerKeyType(KeyTypeEntry entry)", "class_method_signature": "Config.registerKeyType(KeyTypeEntry entry)", "testcase": false, "constructor": false, "invocations": ["validate", "equals", "getCatalogueName", "equals", "getCatalogueName", "equals", "getCatalogueName", "equals", "getCatalogueName", "equals", "getCatalogueName", "equals", "getCatalogueName", "equals", "getCatalogueName", "equals", "getCatalogueName", "getCatalogue", "getCatalogueName", "registerPrimitiveWrapper", "getPrimitiveWrapper", "getKeyManager", "getTypeUrl", "getPrimitiveName", "getKeyManagerVersion", "registerKeyManager", "getNewKeyAllowed"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}