{"test_class": {"identifier": "ParametricVectorGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/util/generators/primitives/vector/ParametricVectorGeneratorTest.java"}, "test_case": {"identifier": "testIllegalArguments", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testIllegalArguments() {\n        new ParametricVectorGenerator(() -> 2.).get();\n    }", "signature": "void testIllegalArguments()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testIllegalArguments()", "class_method_signature": "ParametricVectorGeneratorTest.testIllegalArguments()", "testcase": true, "constructor": false, "invocations": ["get"]}, "focal_class": {"identifier": "ParametricVectorGenerator", "superclass": "", "interfaces": "implements VectorGenerator", "fields": [{"original_string": "private final List<IgniteFunction<Double, Double>> perDimensionGenerators;", "modifier": "private final", "type": "List<IgniteFunction<Double, Double>>", "declarator": "perDimensionGenerators", "var_name": "perDimensionGenerators"}, {"original_string": "private final RandomProducer randomProducer;", "modifier": "private final", "type": "RandomProducer", "declarator": "randomProducer", "var_name": "randomProducer"}], "methods": [{"identifier": "ParametricVectorGenerator", "parameters": "(RandomProducer paramGenerator,\n        IgniteFunction<Double, Double>... perDimensionGenerators)", "modifiers": "public", "return": "", "signature": " ParametricVectorGenerator(RandomProducer paramGenerator,\n        IgniteFunction<Double, Double>... perDimensionGenerators)", "full_signature": "public  ParametricVectorGenerator(RandomProducer paramGenerator,\n        IgniteFunction<Double, Double>... perDimensionGenerators)", "class_method_signature": "ParametricVectorGenerator.ParametricVectorGenerator(RandomProducer paramGenerator,\n        IgniteFunction<Double, Double>... perDimensionGenerators)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "signature": "Vector get()", "full_signature": "@Override public Vector get()", "class_method_signature": "ParametricVectorGenerator.get()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/util/generators/primitives/vector/ParametricVectorGenerator.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Vector", "body": "@Override public Vector get() {\n        Double t = randomProducer.get();\n        return VectorUtils.of(perDimensionGenerators.stream()\n            .mapToDouble(f -> f.apply(t)).toArray());\n    }", "signature": "Vector get()", "full_signature": "@Override public Vector get()", "class_method_signature": "ParametricVectorGenerator.get()", "testcase": false, "constructor": false, "invocations": ["get", "of", "toArray", "mapToDouble", "stream", "apply"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}