{"test_class": {"identifier": "GazeMediaPlayerTest", "superclass": "", "interfaces": "", "fields": [], "file": "gazeplay-games/src/test/java/net/gazeplay/games/mediaPlayer/GazeMediaPlayerTest.java"}, "test_case": {"identifier": "shouldCreateTextButtonWhenCallingMediaButton", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCreateTextButtonWhenCallingMediaButton() {\n        Button button = GazeMediaPlayer.createMediaButton(\"Test\", 500, 500);\n        Assertions.assertEquals(\"Test\", button.getText());\n    }", "signature": "void shouldCreateTextButtonWhenCallingMediaButton()", "full_signature": "@Test void shouldCreateTextButtonWhenCallingMediaButton()", "class_method_signature": "GazeMediaPlayerTest.shouldCreateTextButtonWhenCallingMediaButton()", "testcase": true, "constructor": false, "invocations": ["createMediaButton", "assertEquals", "getText"]}, "focal_class": {"identifier": "GazeMediaPlayer", "superclass": "extends Parent", "interfaces": "implements GameLifeCycle", "fields": [{"original_string": "private final IGameContext gameContext;", "modifier": "private final", "type": "IGameContext", "declarator": "gameContext", "var_name": "gameContext"}, {"original_string": "private final Stats stats;", "modifier": "private final", "type": "Stats", "declarator": "stats", "var_name": "stats"}, {"original_string": "private final MediaButton[] mediaButtons;", "modifier": "private final", "type": "MediaButton[]", "declarator": "mediaButtons", "var_name": "mediaButtons"}, {"original_string": "private final StackPaneButton left;", "modifier": "private final", "type": "StackPaneButton", "declarator": "left", "var_name": "left"}, {"original_string": "private final StackPaneButton playPause;", "modifier": "private final", "type": "StackPaneButton", "declarator": "playPause", "var_name": "playPause"}, {"original_string": "private final StackPaneButton right;", "modifier": "private final", "type": "StackPaneButton", "declarator": "right", "var_name": "right"}, {"original_string": "private final StackPaneButton fullScreen;", "modifier": "private final", "type": "StackPaneButton", "declarator": "fullScreen", "var_name": "fullScreen"}, {"original_string": "private final StackPaneButton addVideo;", "modifier": "private final", "type": "StackPaneButton", "declarator": "addVideo", "var_name": "addVideo"}, {"original_string": "private final StackPaneButton upArrow;", "modifier": "private final", "type": "StackPaneButton", "declarator": "upArrow", "var_name": "upArrow"}, {"original_string": "private final StackPaneButton downArrow;", "modifier": "private final", "type": "StackPaneButton", "declarator": "downArrow", "var_name": "downArrow"}, {"original_string": "private final BorderPane videoRoot;", "modifier": "private final", "type": "BorderPane", "declarator": "videoRoot", "var_name": "videoRoot"}, {"original_string": "private final HBox window;", "modifier": "private final", "type": "HBox", "declarator": "window", "var_name": "window"}, {"original_string": "private final HBox tools;", "modifier": "private final", "type": "HBox", "declarator": "tools", "var_name": "tools"}, {"original_string": "private final VBox scrollList;", "modifier": "private final", "type": "VBox", "declarator": "scrollList", "var_name": "scrollList"}, {"original_string": "private final VBox videoSide;", "modifier": "private final", "type": "VBox", "declarator": "videoSide", "var_name": "videoSide"}, {"original_string": "private final Text musicTitle;", "modifier": "private final", "type": "Text", "declarator": "musicTitle", "var_name": "musicTitle"}, {"original_string": "private final MediaFileReader musicList;", "modifier": "private final", "type": "MediaFileReader", "declarator": "musicList", "var_name": "musicList"}, {"original_string": "private boolean full = false;", "modifier": "private", "type": "boolean", "declarator": "full = false", "var_name": "full"}, {"original_string": "private boolean play = false;", "modifier": "private", "type": "boolean", "declarator": "play = false", "var_name": "play"}, {"original_string": "private GazeIndicator progressIndicator;", "modifier": "private", "type": "GazeIndicator", "declarator": "progressIndicator", "var_name": "progressIndicator"}], "methods": [{"identifier": "GazeMediaPlayer", "parameters": "(final IGameContext gameContext, Stats stats)", "modifiers": "", "return": "", "signature": " GazeMediaPlayer(final IGameContext gameContext, Stats stats)", "full_signature": "  GazeMediaPlayer(final IGameContext gameContext, Stats stats)", "class_method_signature": "GazeMediaPlayer.GazeMediaPlayer(final IGameContext gameContext, Stats stats)", "testcase": false, "constructor": true}, {"identifier": "createGraphicStackPaneButton", "parameters": "(double width, double height, @NonNull String imageURL)", "modifiers": "public static", "return": "StackPaneButton", "signature": "StackPaneButton createGraphicStackPaneButton(double width, double height, @NonNull String imageURL)", "full_signature": "public static StackPaneButton createGraphicStackPaneButton(double width, double height, @NonNull String imageURL)", "class_method_signature": "GazeMediaPlayer.createGraphicStackPaneButton(double width, double height, @NonNull String imageURL)", "testcase": false, "constructor": false}, {"identifier": "createSimpleStackPaneButton", "parameters": "(double width, double height)", "modifiers": "public static", "return": "StackPaneButton", "signature": "StackPaneButton createSimpleStackPaneButton(double width, double height)", "full_signature": "public static StackPaneButton createSimpleStackPaneButton(double width, double height)", "class_method_signature": "GazeMediaPlayer.createSimpleStackPaneButton(double width, double height)", "testcase": false, "constructor": false}, {"identifier": "createTextStackPaneButton", "parameters": "(String text, double width, double height)", "modifiers": "public static", "return": "StackPaneButton", "signature": "StackPaneButton createTextStackPaneButton(String text, double width, double height)", "full_signature": "public static StackPaneButton createTextStackPaneButton(String text, double width, double height)", "class_method_signature": "GazeMediaPlayer.createTextStackPaneButton(String text, double width, double height)", "testcase": false, "constructor": false}, {"identifier": "launch", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void launch()", "full_signature": "@Override public void launch()", "class_method_signature": "GazeMediaPlayer.launch()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "GazeMediaPlayer.dispose()", "testcase": false, "constructor": false}, {"identifier": "setupHandlerWithProgressIndicator", "parameters": "(StackPaneButton button, EventHandler<ActionEvent> handler)", "modifiers": "private", "return": "void", "signature": "void setupHandlerWithProgressIndicator(StackPaneButton button, EventHandler<ActionEvent> handler)", "full_signature": "private void setupHandlerWithProgressIndicator(StackPaneButton button, EventHandler<ActionEvent> handler)", "class_method_signature": "GazeMediaPlayer.setupHandlerWithProgressIndicator(StackPaneButton button, EventHandler<ActionEvent> handler)", "testcase": false, "constructor": false}, {"identifier": "createFullScreenHandler", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createFullScreenHandler()", "full_signature": "private void createFullScreenHandler()", "class_method_signature": "GazeMediaPlayer.createFullScreenHandler()", "testcase": false, "constructor": false}, {"identifier": "createPlayPauseHandler", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createPlayPauseHandler()", "full_signature": "private void createPlayPauseHandler()", "class_method_signature": "GazeMediaPlayer.createPlayPauseHandler()", "testcase": false, "constructor": false}, {"identifier": "createAddVideoHandler", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createAddVideoHandler()", "full_signature": "private void createAddVideoHandler()", "class_method_signature": "GazeMediaPlayer.createAddVideoHandler()", "testcase": false, "constructor": false}, {"identifier": "createHandlers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createHandlers()", "full_signature": "private void createHandlers()", "class_method_signature": "GazeMediaPlayer.createHandlers()", "testcase": false, "constructor": false}, {"identifier": "stopMedia", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopMedia()", "full_signature": "private void stopMedia()", "class_method_signature": "GazeMediaPlayer.stopMedia()", "testcase": false, "constructor": false}, {"identifier": "createLeftRightHandlers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createLeftRightHandlers()", "full_signature": "private void createLeftRightHandlers()", "class_method_signature": "GazeMediaPlayer.createLeftRightHandlers()", "testcase": false, "constructor": false}, {"identifier": "playMusic", "parameters": "(final boolean next)", "modifiers": "private", "return": "void", "signature": "void playMusic(final boolean next)", "full_signature": "private void playMusic(final boolean next)", "class_method_signature": "GazeMediaPlayer.playMusic(final boolean next)", "testcase": false, "constructor": false}, {"identifier": "updateVideoSideForFullScreenMedia", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateVideoSideForFullScreenMedia()", "full_signature": "private void updateVideoSideForFullScreenMedia()", "class_method_signature": "GazeMediaPlayer.updateVideoSideForFullScreenMedia()", "testcase": false, "constructor": false}, {"identifier": "updateMediaView", "parameters": "(MediaView mediaView, double mediaViewWidth, double mediaViewHeight, double rectangleWidth, double rectangleHeight)", "modifiers": "private", "return": "void", "signature": "void updateMediaView(MediaView mediaView, double mediaViewWidth, double mediaViewHeight, double rectangleWidth, double rectangleHeight)", "full_signature": "private void updateMediaView(MediaView mediaView, double mediaViewWidth, double mediaViewHeight, double rectangleWidth, double rectangleHeight)", "class_method_signature": "GazeMediaPlayer.updateMediaView(MediaView mediaView, double mediaViewWidth, double mediaViewHeight, double rectangleWidth, double rectangleHeight)", "testcase": false, "constructor": false}, {"identifier": "setMusicListListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setMusicListListener()", "full_signature": "private void setMusicListListener()", "class_method_signature": "GazeMediaPlayer.setMusicListListener()", "testcase": false, "constructor": false}, {"identifier": "createUpDownHandlers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createUpDownHandlers()", "full_signature": "private void createUpDownHandlers()", "class_method_signature": "GazeMediaPlayer.createUpDownHandlers()", "testcase": false, "constructor": false}, {"identifier": "createDialog", "parameters": "(final Stage primaryStage)", "modifiers": "private", "return": "Stage", "signature": "Stage createDialog(final Stage primaryStage)", "full_signature": "private Stage createDialog(final Stage primaryStage)", "class_method_signature": "GazeMediaPlayer.createDialog(final Stage primaryStage)", "testcase": false, "constructor": false}, {"identifier": "createMediaButton", "parameters": "(String text, double width, double height)", "modifiers": "public static", "return": "Button", "signature": "Button createMediaButton(String text, double width, double height)", "full_signature": "public static Button createMediaButton(String text, double width, double height)", "class_method_signature": "GazeMediaPlayer.createMediaButton(String text, double width, double height)", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "(final Stage primaryStage)", "modifiers": "private", "return": "String", "signature": "String getPath(final Stage primaryStage)", "full_signature": "private String getPath(final Stage primaryStage)", "class_method_signature": "GazeMediaPlayer.getPath(final Stage primaryStage)", "testcase": false, "constructor": false}, {"identifier": "handlerURL", "parameters": "(MediaFile mf)", "modifiers": "private", "return": "EventHandler<ActionEvent>", "signature": "EventHandler<ActionEvent> handlerURL(MediaFile mf)", "full_signature": "private EventHandler<ActionEvent> handlerURL(MediaFile mf)", "class_method_signature": "GazeMediaPlayer.handlerURL(MediaFile mf)", "testcase": false, "constructor": false}, {"identifier": "handlerMedia", "parameters": "(MediaFile mf)", "modifiers": "private", "return": "EventHandler<ActionEvent>", "signature": "EventHandler<ActionEvent> handlerMedia(MediaFile mf)", "full_signature": "private EventHandler<ActionEvent> handlerMedia(MediaFile mf)", "class_method_signature": "GazeMediaPlayer.handlerMedia(MediaFile mf)", "testcase": false, "constructor": false}, {"identifier": "setupMedia", "parameters": "(int i, MediaFile mediaFile)", "modifiers": "private", "return": "void", "signature": "void setupMedia(int i, MediaFile mediaFile)", "full_signature": "private void setupMedia(int i, MediaFile mediaFile)", "class_method_signature": "GazeMediaPlayer.setupMedia(int i, MediaFile mediaFile)", "testcase": false, "constructor": false}, {"identifier": "updateMusic", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateMusic()", "full_signature": "private void updateMusic()", "class_method_signature": "GazeMediaPlayer.updateMusic()", "testcase": false, "constructor": false}, {"identifier": "fullScreenCheck", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fullScreenCheck()", "full_signature": "private void fullScreenCheck()", "class_method_signature": "GazeMediaPlayer.fullScreenCheck()", "testcase": false, "constructor": false}, {"identifier": "enableFullScreen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void enableFullScreen()", "full_signature": "private void enableFullScreen()", "class_method_signature": "GazeMediaPlayer.enableFullScreen()", "testcase": false, "constructor": false}, {"identifier": "disableFullScreen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disableFullScreen()", "full_signature": "private void disableFullScreen()", "class_method_signature": "GazeMediaPlayer.disableFullScreen()", "testcase": false, "constructor": false}, {"identifier": "getImage", "parameters": "(final Button tfi, final Stage primaryStage)", "modifiers": "private", "return": "String", "signature": "String getImage(final Button tfi, final Stage primaryStage)", "full_signature": "private String getImage(final Button tfi, final Stage primaryStage)", "class_method_signature": "GazeMediaPlayer.getImage(final Button tfi, final Stage primaryStage)", "testcase": false, "constructor": false}], "file": "gazeplay-games/src/main/java/net/gazeplay/games/mediaPlayer/GazeMediaPlayer.java"}, "focal_method": {"identifier": "createMediaButton", "parameters": "(String text, double width, double height)", "modifiers": "public static", "return": "Button", "body": "public static Button createMediaButton(String text, double width, double height) {\n        Button button = new Button(text);\n        button.setMinWidth(width);\n        button.setMinHeight(height);\n        button.setPrefWidth(width);\n        button.setPrefHeight(height);\n        button.getStyleClass().add(\"gameChooserButton\");\n        button.getStyleClass().add(\"gameVariation\");\n        button.getStyleClass().add(\"button\");\n        return button;\n    }", "signature": "Button createMediaButton(String text, double width, double height)", "full_signature": "public static Button createMediaButton(String text, double width, double height)", "class_method_signature": "GazeMediaPlayer.createMediaButton(String text, double width, double height)", "testcase": false, "constructor": false, "invocations": ["setMinWidth", "setMinHeight", "setPrefWidth", "setPrefHeight", "add", "getStyleClass", "add", "getStyleClass", "add", "getStyleClass"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}