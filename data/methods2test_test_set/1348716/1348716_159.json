{"test_class": {"identifier": "UnicodeUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String EXPECTED_CONTENT = \"Hello world\";", "modifier": "static final", "type": "String", "declarator": "EXPECTED_CONTENT = \"Hello world\"", "var_name": "EXPECTED_CONTENT"}, {"original_string": "static final String SAMPLE_UTF_16LE_TXT = \"/sample_UTF-16LE.txt\";", "modifier": "static final", "type": "String", "declarator": "SAMPLE_UTF_16LE_TXT = \"/sample_UTF-16LE.txt\"", "var_name": "SAMPLE_UTF_16LE_TXT"}, {"original_string": "static final int ONE_KIBIBYTE = 1024;", "modifier": "static final", "type": "int", "declarator": "ONE_KIBIBYTE = 1024", "var_name": "ONE_KIBIBYTE"}, {"original_string": "static final String DEFAULT_ENCODING = System.getProperty(\"file.encoding\");", "modifier": "static final", "type": "String", "declarator": "DEFAULT_ENCODING = System.getProperty(\"file.encoding\")", "var_name": "DEFAULT_ENCODING"}], "file": "common/src/test/java/org/mifos/framework/util/UnicodeUtilTest.java"}, "test_case": {"identifier": "canDecodeUtf16le", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canDecodeUtf16le() throws IOException, URISyntaxException {\n        String filename = this.getClass().getResource(SAMPLE_UTF_16LE_TXT).toURI().getPath();\n        FileInputStream in = new FileInputStream(filename);\n        byte data[] = new byte[ONE_KIBIBYTE];\n        in.read(data);\n        in.close();\n        byte converted[] = UnicodeUtil.convert(data, \"US-ASCII\");\n        assertThat(new String(converted).trim(), is(EXPECTED_CONTENT));\n    }", "signature": "void canDecodeUtf16le()", "full_signature": "@Test public void canDecodeUtf16le()", "class_method_signature": "UnicodeUtilTest.canDecodeUtf16le()", "testcase": true, "constructor": false, "invocations": ["getPath", "toURI", "getResource", "getClass", "read", "close", "convert", "assertThat", "trim", "is"]}, "focal_class": {"identifier": "UnicodeUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final byte[] bytes, final String desiredOutputEncoding)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] convert(final byte[] bytes, final String desiredOutputEncoding)", "full_signature": "public static byte[] convert(final byte[] bytes, final String desiredOutputEncoding)", "class_method_signature": "UnicodeUtil.convert(final byte[] bytes, final String desiredOutputEncoding)", "testcase": false, "constructor": false}, {"identifier": "getBOM", "parameters": "(final String enc)", "modifiers": "public static", "return": "String", "signature": "String getBOM(final String enc)", "full_signature": "public static String getBOM(final String enc)", "class_method_signature": "UnicodeUtil.getBOM(final String enc)", "testcase": false, "constructor": false}, {"identifier": "getUnicodeAwareBufferedReader", "parameters": "(String file)", "modifiers": "public static", "return": "BufferedReader", "signature": "BufferedReader getUnicodeAwareBufferedReader(String file)", "full_signature": "public static BufferedReader getUnicodeAwareBufferedReader(String file)", "class_method_signature": "UnicodeUtil.getUnicodeAwareBufferedReader(String file)", "testcase": false, "constructor": false}, {"identifier": "getUnicodeAwareBufferedReader", "parameters": "(InputStream stream)", "modifiers": "public static", "return": "BufferedReader", "signature": "BufferedReader getUnicodeAwareBufferedReader(InputStream stream)", "full_signature": "public static BufferedReader getUnicodeAwareBufferedReader(InputStream stream)", "class_method_signature": "UnicodeUtil.getUnicodeAwareBufferedReader(InputStream stream)", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/mifos/framework/util/UnicodeUtil.java"}, "focal_method": {"identifier": "convert", "parameters": "(final byte[] bytes, final String desiredOutputEncoding)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] convert(final byte[] bytes, final String desiredOutputEncoding) throws IOException {\n        // Workaround for bug that will not be fixed by SUN\n        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n        UnicodeInputStream uis = new UnicodeInputStream(new ByteArrayInputStream(bytes), \"ASCII\");\n        boolean unicodeOutputReqd = (getBOM(desiredOutputEncoding).equals(\"\")) ? false : true;\n        String enc = uis.getEncoding();\n        String BOM = getBOM(enc); // get the BOM of the inputstream\n\n        if (\"\".equals(BOM)) {\n            // inputstream looks like ascii...\n            // create a BOM based on the outputstream\n            BOM = getBOM(desiredOutputEncoding);\n        }\n        uis.close();\n\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(bytes,\n                uis.getBomOffset(), bytes.length), enc));\n        Writer w = new BufferedWriter(new OutputStreamWriter(out, desiredOutputEncoding));\n\n        // dont write a BOM for ascii(out) as the OutputStreamWriter\n        // will not process it correctly.\n        if (!\"\".equals(BOM) && unicodeOutputReqd) {\n            w.write(BOM);\n        }\n\n        char[] buffer = new char[4096];\n        int len;\n        while (true) {\n            len = br.read(buffer);\n            if (len == -1) {\n                break;\n            }\n            w.write(buffer, 0, len);\n        }\n\n        br.close(); // Close the input.\n        w.close(); // Flush and close output.\n        return out.toByteArray();\n    }", "signature": "byte[] convert(final byte[] bytes, final String desiredOutputEncoding)", "full_signature": "public static byte[] convert(final byte[] bytes, final String desiredOutputEncoding)", "class_method_signature": "UnicodeUtil.convert(final byte[] bytes, final String desiredOutputEncoding)", "testcase": false, "constructor": false, "invocations": ["equals", "getBOM", "getEncoding", "getBOM", "equals", "getBOM", "close", "getBomOffset", "equals", "write", "read", "write", "close", "close", "toByteArray"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}