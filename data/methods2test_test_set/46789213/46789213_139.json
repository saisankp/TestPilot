{"test_class": {"identifier": "TestHmacDrbg", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestHmacDrbg.java"}, "test_case": {"identifier": "testReseedException", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n  public void testReseedException() throws NoSuchAlgorithmException {\n    HmacDrbg m = new HmacDrbg(new byte[]{0x01});\n    m.reseedCounter = HmacDrbg.MAX_RESEED_COUNT - 1;\n    double max = 2;\n    for (double i = 0; i < max; i++) {\n      byte[] randBytes1 = new byte[0];\n      m.nextBytes(randBytes1);\n    }\n  }", "signature": "void testReseedException()", "full_signature": "@Test(expected = IllegalStateException.class) public void testReseedException()", "class_method_signature": "TestHmacDrbg.testReseedException()", "testcase": true, "constructor": false, "invocations": ["nextBytes"]}, "focal_class": {"identifier": "HmacDrbg", "superclass": "", "interfaces": "implements Drbg", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(HmacDrbg.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HmacDrbg.class)", "var_name": "logger"}, {"original_string": "private static final String DEFAULT_ALGORITHM = \"HmacSHA256\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_ALGORITHM = \"HmacSHA256\"", "var_name": "DEFAULT_ALGORITHM"}, {"original_string": "private final String algorithm;", "modifier": "private final", "type": "String", "declarator": "algorithm", "var_name": "algorithm"}, {"original_string": "private Mac mac = null;", "modifier": "private", "type": "Mac", "declarator": "mac = null", "var_name": "mac"}, {"original_string": "private byte[] val = null;", "modifier": "private", "type": "byte[]", "declarator": "val = null", "var_name": "val"}, {"original_string": "private byte[] key = null;", "modifier": "private", "type": "byte[]", "declarator": "key = null", "var_name": "key"}, {"original_string": "long reseedCounter;", "modifier": "", "type": "long", "declarator": "reseedCounter", "var_name": "reseedCounter"}, {"original_string": "private List<byte[]> seeds;", "modifier": "private", "type": "List<byte[]>", "declarator": "seeds", "var_name": "seeds"}, {"original_string": "static final long MAX_RESEED_COUNT = 1L << 48;", "modifier": "static final", "type": "long", "declarator": "MAX_RESEED_COUNT = 1L << 48", "var_name": "MAX_RESEED_COUNT"}], "methods": [{"identifier": "HmacDrbg", "parameters": "(byte[]... seeds)", "modifiers": "public", "return": "", "signature": " HmacDrbg(byte[]... seeds)", "full_signature": "public  HmacDrbg(byte[]... seeds)", "class_method_signature": "HmacDrbg.HmacDrbg(byte[]... seeds)", "testcase": false, "constructor": true}, {"identifier": "HmacDrbg", "parameters": "(Supplier<Mac> macSupplier, byte[]... seeds)", "modifiers": "public", "return": "", "signature": " HmacDrbg(Supplier<Mac> macSupplier, byte[]... seeds)", "full_signature": "public  HmacDrbg(Supplier<Mac> macSupplier, byte[]... seeds)", "class_method_signature": "HmacDrbg.HmacDrbg(Supplier<Mac> macSupplier, byte[]... seeds)", "testcase": false, "constructor": true}, {"identifier": "nextBytes", "parameters": "(byte[] bytes)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void nextBytes(byte[] bytes)", "full_signature": "@Override public synchronized void nextBytes(byte[] bytes)", "class_method_signature": "HmacDrbg.nextBytes(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(byte[] providedData)", "modifiers": "private", "return": "void", "signature": "void update(byte[] providedData)", "full_signature": "private void update(byte[] providedData)", "class_method_signature": "HmacDrbg.update(byte[] providedData)", "testcase": false, "constructor": false}, {"identifier": "initializeMac", "parameters": "(byte[] key)", "modifiers": "private", "return": "void", "signature": "void initializeMac(byte[] key)", "full_signature": "private void initializeMac(byte[] key)", "class_method_signature": "HmacDrbg.initializeMac(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "safeInitialize", "parameters": "(SecretKey secretKeySpec)", "modifiers": "", "return": "void", "signature": "void safeInitialize(SecretKey secretKeySpec)", "full_signature": " void safeInitialize(SecretKey secretKeySpec)", "class_method_signature": "HmacDrbg.safeInitialize(SecretKey secretKeySpec)", "testcase": false, "constructor": false}, {"identifier": "setSeed", "parameters": "(byte[] seed)", "modifiers": "private", "return": "void", "signature": "void setSeed(byte[] seed)", "full_signature": "private void setSeed(byte[] seed)", "class_method_signature": "HmacDrbg.setSeed(byte[] seed)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/HmacDrbg.java"}, "focal_method": {"identifier": "nextBytes", "parameters": "(byte[] bytes)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n  public synchronized void nextBytes(byte[] bytes) {\n    int pos = 0;\n    while (pos < bytes.length) {\n      this.val = this.mac.doFinal(this.val);\n      int length = val.length;\n      // Ensure that we don't break boundaries\n      if (length > bytes.length - pos) {\n        length = bytes.length - pos;\n      }\n      System.arraycopy(val, 0, bytes, pos, length);\n      pos += length;\n    }\n    update(null);\n    this.reseedCounter++;\n    if (this.reseedCounter >= MAX_RESEED_COUNT) {\n      if (this.seeds.isEmpty()) {\n        throw new IllegalStateException(\n            \"No more seeds available. Security guarantees no longer holds. \"\n                + \"Please restart the application using more seeds to continue beyond this point.\");\n      }\n      setSeed(this.seeds.remove(0));\n    }\n  }", "signature": "void nextBytes(byte[] bytes)", "full_signature": "@Override public synchronized void nextBytes(byte[] bytes)", "class_method_signature": "HmacDrbg.nextBytes(byte[] bytes)", "testcase": false, "constructor": false, "invocations": ["doFinal", "arraycopy", "update", "isEmpty", "setSeed", "remove"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}