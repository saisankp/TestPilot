{"test_class": {"identifier": "RegionTest", "superclass": "", "interfaces": "", "fields": [], "file": "androidplot-core/src/test/java/com/androidplot/RegionTest.java"}, "test_case": {"identifier": "testCenter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCenter() throws Exception {\n        Region r1 = new Region(1, 2);\n        assertEquals(1.5, r1.center());\n\n        Region r2 = new Region(-10, 10);\n        assertEquals(0.0, r2.center());\n\n        Region r3 = new Region(-2, -1);\n        assertEquals(-1.5, r3.center());\n    }", "signature": "void testCenter()", "full_signature": "@Test public void testCenter()", "class_method_signature": "RegionTest.testCenter()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "center", "assertEquals", "center", "assertEquals", "center"]}, "focal_class": {"identifier": "Region", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FastNumber min;", "modifier": "private", "type": "FastNumber", "declarator": "min", "var_name": "min"}, {"original_string": "private FastNumber max;", "modifier": "private", "type": "FastNumber", "declarator": "max", "var_name": "max"}, {"original_string": "private FastNumber cachedLength;", "modifier": "private", "type": "FastNumber", "declarator": "cachedLength", "var_name": "cachedLength"}, {"original_string": "private Region defaults = this;", "modifier": "private", "type": "Region", "declarator": "defaults = this", "var_name": "defaults"}], "methods": [{"identifier": "Region", "parameters": "()", "modifiers": "public", "return": "", "signature": " Region()", "full_signature": "public  Region()", "class_method_signature": "Region.Region()", "testcase": false, "constructor": true}, {"identifier": "withDefaults", "parameters": "(Region defaults)", "modifiers": "public static", "return": "Region", "signature": "Region withDefaults(Region defaults)", "full_signature": "public static Region withDefaults(Region defaults)", "class_method_signature": "Region.withDefaults(Region defaults)", "testcase": false, "constructor": false}, {"identifier": "Region", "parameters": "(Number v1, Number v2)", "modifiers": "public", "return": "", "signature": " Region(Number v1, Number v2)", "full_signature": "public  Region(Number v1, Number v2)", "class_method_signature": "Region.Region(Number v1, Number v2)", "testcase": false, "constructor": true}, {"identifier": "setMinMax", "parameters": "(Region region)", "modifiers": "public", "return": "void", "signature": "void setMinMax(Region region)", "full_signature": "public void setMinMax(Region region)", "class_method_signature": "Region.setMinMax(Region region)", "testcase": false, "constructor": false}, {"identifier": "measure", "parameters": "(Number v1, Number v2)", "modifiers": "public static", "return": "Number", "signature": "Number measure(Number v1, Number v2)", "full_signature": "public static Number measure(Number v1, Number v2)", "class_method_signature": "Region.measure(Number v1, Number v2)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number length()", "full_signature": "public Number length()", "class_method_signature": "Region.length()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Number value)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(Number value)", "full_signature": "public boolean contains(Number value)", "class_method_signature": "Region.contains(Number value)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Region region)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(Region region)", "full_signature": "public boolean intersects(Region region)", "class_method_signature": "Region.intersects(Region region)", "testcase": false, "constructor": false}, {"identifier": "center", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number center()", "full_signature": "public Number center()", "class_method_signature": "Region.center()", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(double value, Region region2)", "modifiers": "public", "return": "Number", "signature": "Number transform(double value, Region region2)", "full_signature": "public Number transform(double value, Region region2)", "class_method_signature": "Region.transform(double value, Region region2)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(double value, Region region2, boolean flip)", "modifiers": "public", "return": "Number", "signature": "Number transform(double value, Region region2, boolean flip)", "full_signature": "public Number transform(double value, Region region2, boolean flip)", "class_method_signature": "Region.transform(double value, Region region2, boolean flip)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(double value, double min, double max, boolean flip)", "modifiers": "public", "return": "double", "signature": "double transform(double value, double min, double max, boolean flip)", "full_signature": "public double transform(double value, double min, double max, boolean flip)", "class_method_signature": "Region.transform(double value, double min, double max, boolean flip)", "testcase": false, "constructor": false}, {"identifier": "ratio", "parameters": "(Region r2)", "modifiers": "public", "return": "Number", "signature": "Number ratio(Region r2)", "full_signature": "public Number ratio(Region r2)", "class_method_signature": "Region.ratio(Region r2)", "testcase": false, "constructor": false}, {"identifier": "ratio", "parameters": "(double min, double max)", "modifiers": "public", "return": "double", "signature": "double ratio(double min, double max)", "full_signature": "public double ratio(double min, double max)", "class_method_signature": "Region.ratio(double min, double max)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(Number value)", "modifiers": "public", "return": "void", "signature": "void union(Number value)", "full_signature": "public void union(Number value)", "class_method_signature": "Region.union(Number value)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(Region input)", "modifiers": "public", "return": "void", "signature": "void union(Region input)", "full_signature": "public void union(Region input)", "class_method_signature": "Region.union(Region input)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(Region input)", "modifiers": "public", "return": "void", "signature": "void intersect(Region input)", "full_signature": "public void intersect(Region input)", "class_method_signature": "Region.intersect(Region input)", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(Number line2Min, Number line2Max)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(Number line2Min, Number line2Max)", "full_signature": "public boolean intersects(Number line2Min, Number line2Max)", "class_method_signature": "Region.intersects(Number line2Min, Number line2Max)", "testcase": false, "constructor": false}, {"identifier": "isMinSet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMinSet()", "full_signature": "public boolean isMinSet()", "class_method_signature": "Region.isMinSet()", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getMin()", "full_signature": "public Number getMin()", "class_method_signature": "Region.getMin()", "testcase": false, "constructor": false}, {"identifier": "setMin", "parameters": "(Number min)", "modifiers": "public", "return": "void", "signature": "void setMin(Number min)", "full_signature": "public void setMin(Number min)", "class_method_signature": "Region.setMin(Number min)", "testcase": false, "constructor": false}, {"identifier": "isMaxSet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMaxSet()", "full_signature": "public boolean isMaxSet()", "class_method_signature": "Region.isMaxSet()", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getMax()", "full_signature": "public Number getMax()", "class_method_signature": "Region.getMax()", "testcase": false, "constructor": false}, {"identifier": "setMax", "parameters": "(Number max)", "modifiers": "public", "return": "void", "signature": "void setMax(Number max)", "full_signature": "public void setMax(Number max)", "class_method_signature": "Region.setMax(Number max)", "testcase": false, "constructor": false}, {"identifier": "isDefined", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDefined()", "full_signature": "public boolean isDefined()", "class_method_signature": "Region.isDefined()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Region.toString()", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/Region.java"}, "focal_method": {"identifier": "center", "parameters": "()", "modifiers": "public", "return": "Number", "body": "public Number center() {\n        return getMax().doubleValue() - (length().doubleValue() / 2);\n    }", "signature": "Number center()", "full_signature": "public Number center()", "class_method_signature": "Region.center()", "testcase": false, "constructor": false, "invocations": ["doubleValue", "getMax", "doubleValue", "length"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}