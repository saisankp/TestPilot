{"test_class": {"identifier": "CircuitsTest", "superclass": "", "interfaces": "", "fields": [], "file": "splitmap/src/test/java/com/openkappa/splitmap/CircuitsTest.java"}, "test_case": {"identifier": "testCircuit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCircuit() {\n    SplitMapPageWriter w1 = new SplitMapPageWriter();\n    w1.add(0);\n    w1.add(1);\n    w1.add(1 << 16);\n    w1.add(1 << 16 | 1);\n    w1.add(1 << 17 | 1);\n\n    SplitMapPageWriter w2 = new SplitMapPageWriter();\n    w2.add(0);\n    w2.add(2);\n    w2.add(1 << 16);\n    w2.add(1 << 16 | 2);\n    w2.add(1 << 17 | 2);\n\n    SplitMap result = Circuits.evaluate(contextOf(w1, w2), slice -> null == slice ? null : slice.get(0).xor(slice.get(1)), 0, 1);\n\n    assertTrue(result.contains(1));\n    assertTrue(result.contains(2));\n    assertTrue(result.contains(1 << 16 | 1));\n    assertTrue(result.contains(1 << 16 | 2));\n    assertTrue(result.contains(1 << 17 | 1));\n    assertTrue(result.contains(1 << 17 | 2));\n  }", "signature": "void testCircuit()", "full_signature": "@Test public void testCircuit()", "class_method_signature": "CircuitsTest.testCircuit()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "evaluate", "contextOf", "xor", "get", "get", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "Circuits", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Container EMPTY = new ArrayContainer();", "modifier": "private static final", "type": "Container", "declarator": "EMPTY = new ArrayContainer()", "var_name": "EMPTY"}], "methods": [{"identifier": "evaluateIfKeysIntersect", "parameters": "(QueryContext<Filter, ?> context,\n                                   Function<Slice<Filter, Container>, Container> circuit,\n                                   Filter... filters)", "modifiers": "public static", "return": "SplitMap", "signature": "SplitMap evaluateIfKeysIntersect(QueryContext<Filter, ?> context,\n                                   Function<Slice<Filter, Container>, Container> circuit,\n                                   Filter... filters)", "full_signature": "public static SplitMap evaluateIfKeysIntersect(QueryContext<Filter, ?> context,\n                                   Function<Slice<Filter, Container>, Container> circuit,\n                                   Filter... filters)", "class_method_signature": "Circuits.evaluateIfKeysIntersect(QueryContext<Filter, ?> context,\n                                   Function<Slice<Filter, Container>, Container> circuit,\n                                   Filter... filters)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "modifiers": "public static", "return": "SplitMap", "signature": "SplitMap evaluate(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "full_signature": "public static SplitMap evaluate(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "class_method_signature": "Circuits.evaluate(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "testcase": false, "constructor": false}, {"identifier": "groupByKey", "parameters": "(QueryContext<Filter, ?> context,\n                                           T defaultValue, Filter... filters)", "modifiers": "static", "return": "PrefixIndex<Slice<Filter, T>>", "signature": "PrefixIndex<Slice<Filter, T>> groupByKey(QueryContext<Filter, ?> context,\n                                           T defaultValue, Filter... filters)", "full_signature": "static PrefixIndex<Slice<Filter, T>> groupByKey(QueryContext<Filter, ?> context,\n                                           T defaultValue, Filter... filters)", "class_method_signature": "Circuits.groupByKey(QueryContext<Filter, ?> context,\n                                           T defaultValue, Filter... filters)", "testcase": false, "constructor": false}, {"identifier": "groupByIntersectingKeys", "parameters": "(QueryContext<Filter, ?> context,\n                                                        T defaultValue,\n                                                        Filter... filters)", "modifiers": "static", "return": "PrefixIndex<Slice<Filter, T>>", "signature": "PrefixIndex<Slice<Filter, T>> groupByIntersectingKeys(QueryContext<Filter, ?> context,\n                                                        T defaultValue,\n                                                        Filter... filters)", "full_signature": "static PrefixIndex<Slice<Filter, T>> groupByIntersectingKeys(QueryContext<Filter, ?> context,\n                                                        T defaultValue,\n                                                        Filter... filters)", "class_method_signature": "Circuits.groupByIntersectingKeys(QueryContext<Filter, ?> context,\n                                                        T defaultValue,\n                                                        Filter... filters)", "testcase": false, "constructor": false}, {"identifier": "groupByKey", "parameters": "(QueryContext<Filter, ?> context,\n                                           LongBinaryOperator op,\n                                           long identity,\n                                           T defaultValue,\n                                           Filter... filters)", "modifiers": "private static", "return": "PrefixIndex<Slice<Filter, T>>", "signature": "PrefixIndex<Slice<Filter, T>> groupByKey(QueryContext<Filter, ?> context,\n                                           LongBinaryOperator op,\n                                           long identity,\n                                           T defaultValue,\n                                           Filter... filters)", "full_signature": "private static PrefixIndex<Slice<Filter, T>> groupByKey(QueryContext<Filter, ?> context,\n                                           LongBinaryOperator op,\n                                           long identity,\n                                           T defaultValue,\n                                           Filter... filters)", "class_method_signature": "Circuits.groupByKey(QueryContext<Filter, ?> context,\n                                           LongBinaryOperator op,\n                                           long identity,\n                                           T defaultValue,\n                                           Filter... filters)", "testcase": false, "constructor": false}], "file": "splitmap/src/main/java/com/openkappa/splitmap/Circuits.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "modifiers": "public static", "return": "SplitMap", "body": "public static <Filter>\n  SplitMap evaluate(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters) {\n    return new SplitMap(groupByKey(context, EMPTY, filters)\n            .streamUniformPartitions()\n            .parallel()\n            .collect(new IndexAggregator<>(circuit)));\n  }", "signature": "SplitMap evaluate(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "full_signature": "public static SplitMap evaluate(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "class_method_signature": "Circuits.evaluate(QueryContext<Filter, ?> context,\n                    Function<Slice<Filter, Container>, Container> circuit,\n                    Filter... filters)", "testcase": false, "constructor": false, "invocations": ["collect", "parallel", "streamUniformPartitions", "groupByKey"]}, "repository": {"repo_id": 120205336, "url": "https://github.com/richardstartin/splitmap", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 253, "license": "licensed"}}