{"test_class": {"identifier": "TransactionEncoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "crypto/src/test/java/org/web3j/crypto/TransactionEncoderTest.java"}, "test_case": {"identifier": "testEtherTransactionAsRlpValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEtherTransactionAsRlpValues() {\n        List<RlpType> rlpStrings = TransactionEncoder.asRlpValues(createEtherTransaction(),\n                new Sign.SignatureData((byte) 0, new byte[32], new byte[32]));\n        assertThat(rlpStrings.size(), is(9));\n        assertThat(rlpStrings.get(3),\n                IsEqual.<RlpType>equalTo(RlpString.create(new BigInteger(\"add5355\", 16))));\n    }", "signature": "void testEtherTransactionAsRlpValues()", "full_signature": "@Test public void testEtherTransactionAsRlpValues()", "class_method_signature": "TransactionEncoderTest.testEtherTransactionAsRlpValues()", "testcase": true, "constructor": false, "invocations": ["asRlpValues", "createEtherTransaction", "assertThat", "size", "is", "assertThat", "get", "equalTo", "create"]}, "focal_class": {"identifier": "TransactionEncoder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "signMessage", "parameters": "(RawTransaction rawTransaction, Credentials credentials)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] signMessage(RawTransaction rawTransaction, Credentials credentials)", "full_signature": "public static byte[] signMessage(RawTransaction rawTransaction, Credentials credentials)", "class_method_signature": "TransactionEncoder.signMessage(RawTransaction rawTransaction, Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(\n            RawTransaction rawTransaction, byte chainId, Credentials credentials)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] signMessage(\n            RawTransaction rawTransaction, byte chainId, Credentials credentials)", "full_signature": "public static byte[] signMessage(\n            RawTransaction rawTransaction, byte chainId, Credentials credentials)", "class_method_signature": "TransactionEncoder.signMessage(\n            RawTransaction rawTransaction, byte chainId, Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "createEip155SignatureData", "parameters": "(\n            Sign.SignatureData signatureData, byte chainId)", "modifiers": "public static", "return": "Sign.SignatureData", "signature": "Sign.SignatureData createEip155SignatureData(\n            Sign.SignatureData signatureData, byte chainId)", "full_signature": "public static Sign.SignatureData createEip155SignatureData(\n            Sign.SignatureData signatureData, byte chainId)", "class_method_signature": "TransactionEncoder.createEip155SignatureData(\n            Sign.SignatureData signatureData, byte chainId)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(RawTransaction rawTransaction)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encode(RawTransaction rawTransaction)", "full_signature": "public static byte[] encode(RawTransaction rawTransaction)", "class_method_signature": "TransactionEncoder.encode(RawTransaction rawTransaction)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(RawTransaction rawTransaction, byte chainId)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encode(RawTransaction rawTransaction, byte chainId)", "full_signature": "public static byte[] encode(RawTransaction rawTransaction, byte chainId)", "class_method_signature": "TransactionEncoder.encode(RawTransaction rawTransaction, byte chainId)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(RawTransaction rawTransaction, Sign.SignatureData signatureData)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] encode(RawTransaction rawTransaction, Sign.SignatureData signatureData)", "full_signature": "private static byte[] encode(RawTransaction rawTransaction, Sign.SignatureData signatureData)", "class_method_signature": "TransactionEncoder.encode(RawTransaction rawTransaction, Sign.SignatureData signatureData)", "testcase": false, "constructor": false}, {"identifier": "asRlpValues", "parameters": "(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "modifiers": "static", "return": "List<RlpType>", "signature": "List<RlpType> asRlpValues(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "full_signature": "static List<RlpType> asRlpValues(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "class_method_signature": "TransactionEncoder.asRlpValues(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "testcase": false, "constructor": false}], "file": "crypto/src/main/java/org/web3j/crypto/TransactionEncoder.java"}, "focal_method": {"identifier": "asRlpValues", "parameters": "(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "modifiers": "static", "return": "List<RlpType>", "body": "static List<RlpType> asRlpValues(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData) {\n        List<RlpType> result = new ArrayList<RlpType>();\n\n        result.add(RlpString.create(rawTransaction.getNonce()));\n        result.add(RlpString.create(rawTransaction.getGasPrice()));\n        result.add(RlpString.create(rawTransaction.getGasLimit()));\n\n        // an empty to address (contract creation) should not be encoded as a numeric 0 value\n        String to = rawTransaction.getTo();\n        if (to != null && to.length() > 0) {\n            // addresses that start with zeros should be encoded with the zeros included, not\n            // as numeric values\n            result.add(RlpString.create(Numeric.hexStringToByteArray(to)));\n        } else {\n            result.add(RlpString.create(\"\"));\n        }\n\n        result.add(RlpString.create(rawTransaction.getValue()));\n\n        // value field will already be hex encoded, so we need to convert into binary first\n        byte[] data = Numeric.hexStringToByteArray(rawTransaction.getData());\n        result.add(RlpString.create(data));\n\n        if (signatureData != null) {\n            result.add(RlpString.create(signatureData.getV()));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getR())));\n            result.add(RlpString.create(Bytes.trimLeadingZeroes(signatureData.getS())));\n        }\n\n        return result;\n    }", "signature": "List<RlpType> asRlpValues(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "full_signature": "static List<RlpType> asRlpValues(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "class_method_signature": "TransactionEncoder.asRlpValues(\n            RawTransaction rawTransaction, Sign.SignatureData signatureData)", "testcase": false, "constructor": false, "invocations": ["add", "create", "getNonce", "add", "create", "getGasPrice", "add", "create", "getGasLimit", "getTo", "length", "add", "create", "hexStringToByteArray", "add", "create", "add", "create", "getValue", "hexStringToByteArray", "getData", "add", "create", "add", "create", "getV", "add", "create", "trimLeadingZeroes", "getR", "add", "create", "trimLeadingZeroes", "getS"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}