{"test_class": {"identifier": "AggregatorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AggregatorFactory factory;", "modifier": "private", "type": "AggregatorFactory", "declarator": "factory", "var_name": "factory"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/aggregation/operation/AggregatorFactoryTest.java"}, "test_case": {"identifier": "shouldReturnEmptyAggregator", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void shouldReturnEmptyAggregator() {\n        AggregationParameters parameters = new AggregationParameters();\n        parameters.addGroupBy(\"0000\");\n\n        Aggregator actual = factory.get(parameters);\n    }", "signature": "void shouldReturnEmptyAggregator()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldReturnEmptyAggregator()", "class_method_signature": "AggregatorFactoryTest.shouldReturnEmptyAggregator()", "testcase": true, "constructor": false, "invocations": ["addGroupBy", "get"]}, "focal_class": {"identifier": "AggregatorFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "get", "parameters": "(AggregationParameters parameters)", "modifiers": "public", "return": "Aggregator", "signature": "Aggregator get(AggregationParameters parameters)", "full_signature": "public Aggregator get(AggregationParameters parameters)", "class_method_signature": "AggregatorFactory.get(AggregationParameters parameters)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/aggregation/operation/AggregatorFactory.java"}, "focal_method": {"identifier": "get", "parameters": "(AggregationParameters parameters)", "modifiers": "public", "return": "Aggregator", "body": "public Aggregator get(AggregationParameters parameters) {\n\n        // return empty aggregator if empty\n        if (parameters.getOperations().isEmpty() || parameters.getGroupBy().isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid aggregation parameters\");\n        }\n\n        final AggregationOperation operation = parameters.getOperations().get(0);\n        String groupBy = parameters.getGroupBy().get(0);\n\n        switch (operation.getOperator()) {\n        case AVERAGE:\n            return new Average(groupBy, operation.getColumnId());\n        case MIN:\n            return new Min(groupBy, operation.getColumnId());\n        case MAX:\n            return new Max(groupBy, operation.getColumnId());\n        case SUM:\n            return new Sum(groupBy, operation.getColumnId());\n        default:\n            throw new IllegalArgumentException(\"Operation '\" + operation.getOperator() + \"' not supported\");\n        }\n    }", "signature": "Aggregator get(AggregationParameters parameters)", "full_signature": "public Aggregator get(AggregationParameters parameters)", "class_method_signature": "AggregatorFactory.get(AggregationParameters parameters)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getOperations", "isEmpty", "getGroupBy", "get", "getOperations", "get", "getGroupBy", "getOperator", "getColumnId", "getColumnId", "getColumnId", "getColumnId", "getOperator"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}