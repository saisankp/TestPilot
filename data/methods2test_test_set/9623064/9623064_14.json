{"test_class": {"identifier": "HttpClientDownloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PAGE_ALWAYS_NOT_EXISTS = \"http://localhost:13423/404\";", "modifier": "public static final", "type": "String", "declarator": "PAGE_ALWAYS_NOT_EXISTS = \"http://localhost:13423/404\"", "var_name": "PAGE_ALWAYS_NOT_EXISTS"}], "file": "webmagic-core/src/test/java/us/codecraft/webmagic/downloader/HttpClientDownloaderTest.java"}, "test_case": {"identifier": "testGetHtmlCharset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHtmlCharset() throws Exception {\n        HttpServer server = httpServer(13423);\n        server.get(by(uri(\"/header\"))).response(header(\"Content-Type\", \"text/html; charset=gbk\"));\n        server.get(by(uri(\"/meta4\"))).response(with(text(\"<html>\\n\" +\n                \"  <head>\\n\" +\n                \"    <meta charset='gbk'/>\\n\" +\n                \"  </head>\\n\" +\n                \"  <body></body>\\n\" +\n                \"</html>\")),header(\"Content-Type\",\"text/html; charset=gbk\"));\n        server.get(by(uri(\"/meta5\"))).response(with(text(\"<html>\\n\" +\n                \"  <head>\\n\" +\n                \"    <meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=gbk\\\" />\\n\" +\n                \"  </head>\\n\" +\n                \"  <body></body>\\n\" +\n                \"</html>\")),header(\"Content-Type\",\"text/html\"));\n        Runner.running(server, new Runnable() {\n            @Override\n            public void run() {\n                String charset = getCharsetByUrl(\"http://127.0.0.1:13423/header\");\n                assertEquals(charset, \"gbk\");\n                charset = getCharsetByUrl(\"http://127.0.0.1:13423/meta4\");\n                assertEquals(charset, \"gbk\");\n                charset = getCharsetByUrl(\"http://127.0.0.1:13423/meta5\");\n                assertEquals(charset, \"gbk\");\n            }\n\n            private String getCharsetByUrl(String url) {\n                HttpClientDownloader downloader = new HttpClientDownloader();\n                Site site = Site.me();\n                CloseableHttpClient httpClient = new HttpClientGenerator().getClient(site);\n                // encoding in http header Content-Type\n                Request requestGBK = new Request(url);\n                CloseableHttpResponse httpResponse = null;\n                try {\n                    httpResponse = httpClient.execute(new HttpUriRequestConverter().convert(requestGBK, site, null).getHttpUriRequest());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                String charset = null;\n                try {\n                    byte[] contentBytes = IOUtils.toByteArray(httpResponse.getEntity().getContent());\n                    charset = CharsetUtils.detectCharset(httpResponse.getEntity().getContentType().getValue(), contentBytes);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                return charset;\n            }\n        });\n    }", "signature": "void testGetHtmlCharset()", "full_signature": "@Test public void testGetHtmlCharset()", "class_method_signature": "HttpClientDownloaderTest.testGetHtmlCharset()", "testcase": true, "constructor": false, "invocations": ["httpServer", "response", "get", "by", "uri", "header", "response", "get", "by", "uri", "with", "text", "header", "response", "get", "by", "uri", "with", "text", "header", "running", "getCharsetByUrl", "assertEquals", "getCharsetByUrl", "assertEquals", "getCharsetByUrl", "assertEquals", "me", "getClient", "execute", "getHttpUriRequest", "convert", "printStackTrace", "toByteArray", "getContent", "getEntity", "detectCharset", "getValue", "getContentType", "getEntity", "printStackTrace"]}, "focal_class": {"identifier": "HttpClientDownloader", "superclass": "extends AbstractDownloader", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final Map<String, CloseableHttpClient> httpClients = new HashMap<String, CloseableHttpClient>();", "modifier": "private final", "type": "Map<String, CloseableHttpClient>", "declarator": "httpClients = new HashMap<String, CloseableHttpClient>()", "var_name": "httpClients"}, {"original_string": "private HttpClientGenerator httpClientGenerator = new HttpClientGenerator();", "modifier": "private", "type": "HttpClientGenerator", "declarator": "httpClientGenerator = new HttpClientGenerator()", "var_name": "httpClientGenerator"}, {"original_string": "private HttpUriRequestConverter httpUriRequestConverter = new HttpUriRequestConverter();", "modifier": "private", "type": "HttpUriRequestConverter", "declarator": "httpUriRequestConverter = new HttpUriRequestConverter()", "var_name": "httpUriRequestConverter"}, {"original_string": "private ProxyProvider proxyProvider;", "modifier": "private", "type": "ProxyProvider", "declarator": "proxyProvider", "var_name": "proxyProvider"}, {"original_string": "private boolean responseHeader = true;", "modifier": "private", "type": "boolean", "declarator": "responseHeader = true", "var_name": "responseHeader"}], "methods": [{"identifier": "setHttpUriRequestConverter", "parameters": "(HttpUriRequestConverter httpUriRequestConverter)", "modifiers": "public", "return": "void", "signature": "void setHttpUriRequestConverter(HttpUriRequestConverter httpUriRequestConverter)", "full_signature": "public void setHttpUriRequestConverter(HttpUriRequestConverter httpUriRequestConverter)", "class_method_signature": "HttpClientDownloader.setHttpUriRequestConverter(HttpUriRequestConverter httpUriRequestConverter)", "testcase": false, "constructor": false}, {"identifier": "setProxyProvider", "parameters": "(ProxyProvider proxyProvider)", "modifiers": "public", "return": "void", "signature": "void setProxyProvider(ProxyProvider proxyProvider)", "full_signature": "public void setProxyProvider(ProxyProvider proxyProvider)", "class_method_signature": "HttpClientDownloader.setProxyProvider(ProxyProvider proxyProvider)", "testcase": false, "constructor": false}, {"identifier": "getHttpClient", "parameters": "(Site site)", "modifiers": "private", "return": "CloseableHttpClient", "signature": "CloseableHttpClient getHttpClient(Site site)", "full_signature": "private CloseableHttpClient getHttpClient(Site site)", "class_method_signature": "HttpClientDownloader.getHttpClient(Site site)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(Request request, Task task)", "modifiers": "@Override public", "return": "Page", "signature": "Page download(Request request, Task task)", "full_signature": "@Override public Page download(Request request, Task task)", "class_method_signature": "HttpClientDownloader.download(Request request, Task task)", "testcase": false, "constructor": false}, {"identifier": "setThread", "parameters": "(int thread)", "modifiers": "@Override public", "return": "void", "signature": "void setThread(int thread)", "full_signature": "@Override public void setThread(int thread)", "class_method_signature": "HttpClientDownloader.setThread(int thread)", "testcase": false, "constructor": false}, {"identifier": "handleResponse", "parameters": "(Request request, String charset, HttpResponse httpResponse, Task task)", "modifiers": "protected", "return": "Page", "signature": "Page handleResponse(Request request, String charset, HttpResponse httpResponse, Task task)", "full_signature": "protected Page handleResponse(Request request, String charset, HttpResponse httpResponse, Task task)", "class_method_signature": "HttpClientDownloader.handleResponse(Request request, String charset, HttpResponse httpResponse, Task task)", "testcase": false, "constructor": false}, {"identifier": "getHtmlCharset", "parameters": "(String contentType, byte[] contentBytes)", "modifiers": "private", "return": "String", "signature": "String getHtmlCharset(String contentType, byte[] contentBytes)", "full_signature": "private String getHtmlCharset(String contentType, byte[] contentBytes)", "class_method_signature": "HttpClientDownloader.getHtmlCharset(String contentType, byte[] contentBytes)", "testcase": false, "constructor": false}], "file": "webmagic-core/src/main/java/us/codecraft/webmagic/downloader/HttpClientDownloader.java"}, "focal_method": {"identifier": "getHtmlCharset", "parameters": "(String contentType, byte[] contentBytes)", "modifiers": "private", "return": "String", "body": "private String getHtmlCharset(String contentType, byte[] contentBytes) throws IOException {\n        String charset = CharsetUtils.detectCharset(contentType, contentBytes);\n        if (charset == null) {\n            charset = Charset.defaultCharset().name();\n            logger.warn(\"Charset autodetect failed, use {} as charset. Please specify charset in Site.setCharset()\", Charset.defaultCharset());\n        }\n        return charset;\n    }", "signature": "String getHtmlCharset(String contentType, byte[] contentBytes)", "full_signature": "private String getHtmlCharset(String contentType, byte[] contentBytes)", "class_method_signature": "HttpClientDownloader.getHtmlCharset(String contentType, byte[] contentBytes)", "testcase": false, "constructor": false, "invocations": ["detectCharset", "name", "defaultCharset", "warn", "defaultCharset"]}, "repository": {"repo_id": 9623064, "url": "https://github.com/code4craft/webmagic", "language": "Java", "is_fork": false, "fork_count": 3804, "stargazer_count": 9136, "size": 17041, "license": "licensed"}}