{"test_class": {"identifier": "ServerFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/server/ServerFactoryTest.java"}, "test_case": {"identifier": "getServer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getServer() {\n        ServerConfig serverConfig = new ServerConfig().setProtocol(\"test\").setPort(1234);\n        Server server = ServerFactory.getServer(serverConfig);\n        Assert.assertNotNull(server);\n\n        boolean error = false;\n        try {\n            serverConfig = new ServerConfig().setProtocol(\"test1\").setPort(2345);\n            ServerFactory.getServer(serverConfig);\n        } catch (Exception e) {\n            error = true;\n        }\n        Assert.assertTrue(error);\n\n        Assert.assertTrue(ServerFactory.getServers().size() > 0);\n\n        ServerFactory.destroyAll();\n    }", "signature": "void getServer()", "full_signature": "@Test public void getServer()", "class_method_signature": "ServerFactoryTest.getServer()", "testcase": true, "constructor": false, "invocations": ["setPort", "setProtocol", "getServer", "assertNotNull", "setPort", "setProtocol", "getServer", "assertTrue", "assertTrue", "size", "getServers", "destroyAll"]}, "focal_class": {"identifier": "ServerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger                        LOGGER     = LoggerFactory\n                                                                      .getLogger(ServerFactory.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER     = LoggerFactory\n                                                                      .getLogger(ServerFactory.class)", "var_name": "LOGGER"}, {"original_string": "private final static ConcurrentMap<String, Server> SERVER_MAP = new ConcurrentHashMap<String, Server>();", "modifier": "private final static", "type": "ConcurrentMap<String, Server>", "declarator": "SERVER_MAP = new ConcurrentHashMap<String, Server>()", "var_name": "SERVER_MAP"}], "methods": [{"identifier": "getServer", "parameters": "(ServerConfig serverConfig)", "modifiers": "public synchronized static", "return": "Server", "signature": "Server getServer(ServerConfig serverConfig)", "full_signature": "public synchronized static Server getServer(ServerConfig serverConfig)", "class_method_signature": "ServerFactory.getServer(ServerConfig serverConfig)", "testcase": false, "constructor": false}, {"identifier": "resolveServerConfig", "parameters": "(ServerConfig serverConfig)", "modifiers": "private static", "return": "void", "signature": "void resolveServerConfig(ServerConfig serverConfig)", "full_signature": "private static void resolveServerConfig(ServerConfig serverConfig)", "class_method_signature": "ServerFactory.resolveServerConfig(ServerConfig serverConfig)", "testcase": false, "constructor": false}, {"identifier": "getServers", "parameters": "()", "modifiers": "public static", "return": "List<Server>", "signature": "List<Server> getServers()", "full_signature": "public static List<Server> getServers()", "class_method_signature": "ServerFactory.getServers()", "testcase": false, "constructor": false}, {"identifier": "destroyAll", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void destroyAll()", "full_signature": "public static void destroyAll()", "class_method_signature": "ServerFactory.destroyAll()", "testcase": false, "constructor": false}, {"identifier": "destroyServer", "parameters": "(ServerConfig serverConfig)", "modifiers": "public static", "return": "void", "signature": "void destroyServer(ServerConfig serverConfig)", "full_signature": "public static void destroyServer(ServerConfig serverConfig)", "class_method_signature": "ServerFactory.destroyServer(ServerConfig serverConfig)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/server/ServerFactory.java"}, "focal_method": {"identifier": "getServer", "parameters": "(ServerConfig serverConfig)", "modifiers": "public synchronized static", "return": "Server", "body": "public synchronized static Server getServer(ServerConfig serverConfig) {\n        try {\n            Server server = SERVER_MAP.get(Integer.toString(serverConfig.getPort()));\n            if (server == null) {\n                // \u7b97\u4e0b\u7f51\u5361\u548c\u7aef\u53e3\n                resolveServerConfig(serverConfig);\n\n                ExtensionClass<Server> ext = ExtensionLoaderFactory.getExtensionLoader(Server.class)\n                    .getExtensionClass(serverConfig.getProtocol());\n                if (ext == null) {\n                    throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_UNSUPPORTED_PROTOCOL,\n                        serverConfig.getProtocol()));\n                }\n                server = ext.getExtInstance();\n                server.init(serverConfig);\n                SERVER_MAP.put(serverConfig.getPort() + \"\", server);\n            }\n            return server;\n        } catch (SofaRpcRuntimeException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_GET_SERVER), e);\n        }\n    }", "signature": "Server getServer(ServerConfig serverConfig)", "full_signature": "public synchronized static Server getServer(ServerConfig serverConfig)", "class_method_signature": "ServerFactory.getServer(ServerConfig serverConfig)", "testcase": false, "constructor": false, "invocations": ["get", "toString", "getPort", "resolveServerConfig", "getExtensionClass", "getExtensionLoader", "getProtocol", "getLog", "getProtocol", "getExtInstance", "init", "put", "getPort", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}