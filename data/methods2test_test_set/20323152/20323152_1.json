{"test_class": {"identifier": "AsynchronousTransformerTest", "superclass": "extends TransformerTest", "interfaces": "", "fields": [{"original_string": "private static final int REFINE_PORT = 3333;", "modifier": "private static final", "type": "int", "declarator": "REFINE_PORT = 3333", "var_name": "REFINE_PORT"}, {"original_string": "private static final long ASYNC_TIMEOUT = 60000;", "modifier": "private static final", "type": "long", "declarator": "ASYNC_TIMEOUT = 60000", "var_name": "ASYNC_TIMEOUT"}], "file": "clients/clients-transformer/src/test/java/eu/spaziodati/batchrefine/transformer/AsynchronousTransformerTest.java"}, "test_case": {"identifier": "testTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransform() throws Exception {\n        File reference = findAndCopy(\"outputs/\" + fInput + \"_\" + fTransform\n                + \".\" + fFormat);\n        MimeType mime = mapContentType(fFormat);\n        Response response = doRequest(fInput, fTransform, fFormat, mime);\n        File output = EngineTestUtils\n                .toFile(response.getBody().asInputStream());\n        assertEquals(reference, output, mime);\n    }", "signature": "void testTransform()", "full_signature": "@Test public void testTransform()", "class_method_signature": "AsynchronousTransformerTest.testTransform()", "testcase": true, "constructor": false, "invocations": ["findAndCopy", "mapContentType", "doRequest", "toFile", "asInputStream", "getBody", "assertEquals"]}, "focal_class": {"identifier": "AsynchronousTransformer", "superclass": "extends BatchRefineTransformer", "interfaces": "implements\n        AsyncTransformer", "fields": [{"original_string": "private static final Logger fLogger = Logger\n            .getLogger(AsynchronousTransformer.class);", "modifier": "private static final", "type": "Logger", "declarator": "fLogger = Logger\n            .getLogger(AsynchronousTransformer.class)", "var_name": "fLogger"}, {"original_string": "private final Set<String> fActive = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());", "modifier": "private final", "type": "Set<String>", "declarator": "fActive = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>())", "var_name": "fActive"}, {"original_string": "private volatile CallBackHandler fHandler = NULL_HANDLER;", "modifier": "private volatile", "type": "CallBackHandler", "declarator": "fHandler = NULL_HANDLER", "var_name": "fHandler"}, {"original_string": "private final IAsyncTransformEngine fEngine;", "modifier": "private final", "type": "IAsyncTransformEngine", "declarator": "fEngine", "var_name": "fEngine"}, {"original_string": "private static final CallBackHandler NULL_HANDLER = new CallBackHandler() {\n        @Override\n        public void responseAvailable(String requestId, Entity response) {\n        }\n\n        @Override\n        public void reportException(String requestId, Exception ex) {\n        }\n    };", "modifier": "private static final", "type": "CallBackHandler", "declarator": "NULL_HANDLER = new CallBackHandler() {\n        @Override\n        public void responseAvailable(String requestId, Entity response) {\n        }\n\n        @Override\n        public void reportException(String requestId, Exception ex) {\n        }\n    }", "var_name": "NULL_HANDLER"}], "methods": [{"identifier": "AsynchronousTransformer", "parameters": "(IAsyncTransformEngine engine)", "modifiers": "public", "return": "", "signature": " AsynchronousTransformer(IAsyncTransformEngine engine)", "full_signature": "public  AsynchronousTransformer(IAsyncTransformEngine engine)", "class_method_signature": "AsynchronousTransformer.AsynchronousTransformer(IAsyncTransformEngine engine)", "testcase": false, "constructor": true}, {"identifier": "activate", "parameters": "(CallBackHandler callBackHandler)", "modifiers": "@Override public", "return": "void", "signature": "void activate(CallBackHandler callBackHandler)", "full_signature": "@Override public void activate(CallBackHandler callBackHandler)", "class_method_signature": "AsynchronousTransformer.activate(CallBackHandler callBackHandler)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(HttpRequestEntity entity, String requestId)", "modifiers": "@Override public", "return": "void", "signature": "void transform(HttpRequestEntity entity, String requestId)", "full_signature": "@Override public void transform(HttpRequestEntity entity, String requestId)", "class_method_signature": "AsynchronousTransformer.transform(HttpRequestEntity entity, String requestId)", "testcase": false, "constructor": false}, {"identifier": "output", "parameters": "(String requestId)", "modifiers": "private", "return": "File", "signature": "File output(String requestId)", "full_signature": "private File output(String requestId)", "class_method_signature": "AsynchronousTransformer.output(String requestId)", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "(String requestId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive(String requestId)", "full_signature": "@Override public boolean isActive(String requestId)", "class_method_signature": "AsynchronousTransformer.isActive(String requestId)", "testcase": false, "constructor": false}, {"identifier": "inactive", "parameters": "(String id)", "modifiers": "private", "return": "void", "signature": "void inactive(String id)", "full_signature": "private void inactive(String id)", "class_method_signature": "AsynchronousTransformer.inactive(String id)", "testcase": false, "constructor": false}], "file": "clients/clients-transformer/src/main/java/eu/spaziodati/batchrefine/transformer/AsynchronousTransformer.java"}, "focal_method": {"identifier": "transform", "parameters": "(HttpRequestEntity entity, String requestId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void transform(HttpRequestEntity entity, String requestId)\n            throws IOException {\n\n        logMessage(entity.getRequest());\n\n        if (!fActive.add(requestId)) {\n            throw new IllegalStateException(\"A request with ID \" + requestId + \" was already in progress.\");\n        }\n\n        File output = output(requestId);\n        ImmutablePair<MimeType, Properties> pair = exporterOptions(entity);\n        fEngine.transform(\n                downloadInput(entity).toURI(),\n                fetchTransform(entity),\n                output.toURI(),\n                pair.getRight(),\n                new CallbackWrapper(requestId, output, pair.getLeft())\n        );\n    }", "signature": "void transform(HttpRequestEntity entity, String requestId)", "full_signature": "@Override public void transform(HttpRequestEntity entity, String requestId)", "class_method_signature": "AsynchronousTransformer.transform(HttpRequestEntity entity, String requestId)", "testcase": false, "constructor": false, "invocations": ["logMessage", "getRequest", "add", "output", "exporterOptions", "transform", "toURI", "downloadInput", "fetchTransform", "toURI", "getRight", "getLeft"]}, "repository": {"repo_id": 20323152, "url": "https://github.com/fusepoolP3/p3-batchrefine", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 48, "size": 6888, "license": "licensed"}}