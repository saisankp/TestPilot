{"test_class": {"identifier": "ValidationUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "module/com.sandpolis.core.foundation/src/test/java/com/sandpolis/core/foundation/util/ValidationUtilTest.java"}, "test_case": {"identifier": "testVersionSimple", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n\tvoid testVersionSimple() {\n\t\tassertFalse(version(null));\n\t\tassertFalse(version(\"5..0\"));\n\t\tassertFalse(version(\"5..0.0\"));\n\t\tassertFalse(version(\"5.0.0.0\"));\n\n\t\tassertTrue(version(\"5.0.0\"));\n\t\tassertTrue(version(\"05.00.00\"));\n\t}", "signature": "void testVersionSimple()", "full_signature": "@Test void testVersionSimple()", "class_method_signature": "ValidationUtilTest.testVersionSimple()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "version", "assertFalse", "version", "assertFalse", "version", "assertFalse", "version", "assertTrue", "version", "assertTrue", "version"]}, "focal_class": {"identifier": "ValidationUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int USER_MAX = 30;", "modifier": "public static final", "type": "int", "declarator": "USER_MAX = 30", "var_name": "USER_MAX"}, {"original_string": "public static final int USER_MIN = 5;", "modifier": "public static final", "type": "int", "declarator": "USER_MIN = 5", "var_name": "USER_MIN"}, {"original_string": "public static final int GROUP_MAX = 48;", "modifier": "public static final", "type": "int", "declarator": "GROUP_MAX = 48", "var_name": "GROUP_MAX"}, {"original_string": "public static final int GROUP_MIN = 4;", "modifier": "public static final", "type": "int", "declarator": "GROUP_MIN = 4", "var_name": "GROUP_MIN"}, {"original_string": "public static final int PASSWORD_MAX = 64;", "modifier": "public static final", "type": "int", "declarator": "PASSWORD_MAX = 64", "var_name": "PASSWORD_MAX"}, {"original_string": "public static final int PASSWORD_MIN = 5;", "modifier": "public static final", "type": "int", "declarator": "PASSWORD_MIN = 5", "var_name": "PASSWORD_MIN"}, {"original_string": "private static final RegexValidator USERNAME_REGEX = new RegexValidator(\n\t\t\tString.format(\"^[a-zA-Z0-9]{%d,%d}$\", USER_MIN, USER_MAX));", "modifier": "private static final", "type": "RegexValidator", "declarator": "USERNAME_REGEX = new RegexValidator(\n\t\t\tString.format(\"^[a-zA-Z0-9]{%d,%d}$\", USER_MIN, USER_MAX))", "var_name": "USERNAME_REGEX"}, {"original_string": "private static final RegexValidator GROUPNAME_REGEX = new RegexValidator(\n\t\t\tString.format(\"^[a-zA-Z0-9 ]{%d,%d}$\", GROUP_MIN, GROUP_MAX));", "modifier": "private static final", "type": "RegexValidator", "declarator": "GROUPNAME_REGEX = new RegexValidator(\n\t\t\tString.format(\"^[a-zA-Z0-9 ]{%d,%d}$\", GROUP_MIN, GROUP_MAX))", "var_name": "GROUPNAME_REGEX"}, {"original_string": "private static final RegexValidator PASSWORD_REGEX = new RegexValidator(\n\t\t\tString.format(\"^.{%d,%d}$\", PASSWORD_MIN, PASSWORD_MAX));", "modifier": "private static final", "type": "RegexValidator", "declarator": "PASSWORD_REGEX = new RegexValidator(\n\t\t\tString.format(\"^.{%d,%d}$\", PASSWORD_MIN, PASSWORD_MAX))", "var_name": "PASSWORD_REGEX"}, {"original_string": "private static final RegexValidator PRIVATEIP_REGEX = new RegexValidator(\n\t\t\t\"(^127\\\\..*$)|(^10\\\\..*$)|(^172\\\\.1[6-9]\\\\..*$)|(^172\\\\.2[0-9]\\\\..*$)|(^172\\\\.3[0-1]\\\\..*$)|(^192\\\\.168\\\\..*$)\");", "modifier": "private static final", "type": "RegexValidator", "declarator": "PRIVATEIP_REGEX = new RegexValidator(\n\t\t\t\"(^127\\\\..*$)|(^10\\\\..*$)|(^172\\\\.1[6-9]\\\\..*$)|(^172\\\\.2[0-9]\\\\..*$)|(^172\\\\.3[0-1]\\\\..*$)|(^192\\\\.168\\\\..*$)\")", "var_name": "PRIVATEIP_REGEX"}, {"original_string": "private static final RegexValidator VERSION_REGEX = new RegexValidator(\"^(\\\\d)+\\\\.(\\\\d)+\\\\.(\\\\d)+(-(\\\\d)+)?$\");", "modifier": "private static final", "type": "RegexValidator", "declarator": "VERSION_REGEX = new RegexValidator(\"^(\\\\d)+\\\\.(\\\\d)+\\\\.(\\\\d)+(-(\\\\d)+)?$\")", "var_name": "VERSION_REGEX"}], "methods": [{"identifier": "ValidationUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ValidationUtil()", "full_signature": "private  ValidationUtil()", "class_method_signature": "ValidationUtil.ValidationUtil()", "testcase": false, "constructor": true}, {"identifier": "username", "parameters": "(String user)", "modifiers": "public static", "return": "boolean", "signature": "boolean username(String user)", "full_signature": "public static boolean username(String user)", "class_method_signature": "ValidationUtil.username(String user)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(String group)", "modifiers": "public static", "return": "boolean", "signature": "boolean group(String group)", "full_signature": "public static boolean group(String group)", "class_method_signature": "ValidationUtil.group(String group)", "testcase": false, "constructor": false}, {"identifier": "password", "parameters": "(String password)", "modifiers": "public static", "return": "boolean", "signature": "boolean password(String password)", "full_signature": "public static boolean password(String password)", "class_method_signature": "ValidationUtil.password(String password)", "testcase": false, "constructor": false}, {"identifier": "privateIP", "parameters": "(String ip)", "modifiers": "public static", "return": "boolean", "signature": "boolean privateIP(String ip)", "full_signature": "public static boolean privateIP(String ip)", "class_method_signature": "ValidationUtil.privateIP(String ip)", "testcase": false, "constructor": false}, {"identifier": "address", "parameters": "(String address)", "modifiers": "public static", "return": "boolean", "signature": "boolean address(String address)", "full_signature": "public static boolean address(String address)", "class_method_signature": "ValidationUtil.address(String address)", "testcase": false, "constructor": false}, {"identifier": "port", "parameters": "(String port)", "modifiers": "public static", "return": "boolean", "signature": "boolean port(String port)", "full_signature": "public static boolean port(String port)", "class_method_signature": "ValidationUtil.port(String port)", "testcase": false, "constructor": false}, {"identifier": "port", "parameters": "(int port)", "modifiers": "public static", "return": "boolean", "signature": "boolean port(int port)", "full_signature": "public static boolean port(int port)", "class_method_signature": "ValidationUtil.port(int port)", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(String path)", "modifiers": "public static", "return": "boolean", "signature": "boolean path(String path)", "full_signature": "public static boolean path(String path)", "class_method_signature": "ValidationUtil.path(String path)", "testcase": false, "constructor": false}, {"identifier": "version", "parameters": "(String version)", "modifiers": "public static", "return": "boolean", "signature": "boolean version(String version)", "full_signature": "public static boolean version(String version)", "class_method_signature": "ValidationUtil.version(String version)", "testcase": false, "constructor": false}, {"identifier": "email", "parameters": "(String email)", "modifiers": "public static", "return": "boolean", "signature": "boolean email(String email)", "full_signature": "public static boolean email(String email)", "class_method_signature": "ValidationUtil.email(String email)", "testcase": false, "constructor": false}, {"identifier": "ipv4", "parameters": "(String ipv4)", "modifiers": "public static", "return": "boolean", "signature": "boolean ipv4(String ipv4)", "full_signature": "public static boolean ipv4(String ipv4)", "class_method_signature": "ValidationUtil.ipv4(String ipv4)", "testcase": false, "constructor": false}], "file": "module/com.sandpolis.core.foundation/src/main/java/com/sandpolis/core/foundation/util/ValidationUtil.java"}, "focal_method": {"identifier": "version", "parameters": "(String version)", "modifiers": "public static", "return": "boolean", "body": "public static boolean version(String version) {\n\t\treturn VERSION_REGEX.isValid(version);\n\t}", "signature": "boolean version(String version)", "full_signature": "public static boolean version(String version)", "class_method_signature": "ValidationUtil.version(String version)", "testcase": false, "constructor": false, "invocations": ["isValid"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}