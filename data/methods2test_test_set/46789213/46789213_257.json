{"test_class": {"identifier": "TestAesDemo", "superclass": "", "interfaces": "", "fields": [], "file": "demos/aes/src/test/java/dk/alexandra/fresco/demo/TestAesDemo.java"}, "test_case": {"identifier": "testAESDemo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAESDemo() {\n    int noPlayers = 2;\n    List<Integer> ports = NetworkUtil.getFreePorts(noPlayers);\n    Map<Integer, NetworkConfiguration> netConf =\n        NetworkUtil.getNetworkConfigurations(ports);\n    Map<Integer, TestThreadConfiguration<ResourcePoolImpl, ProtocolBuilderBinary>> conf =\n        new HashMap<>();\n    for (int playerId : netConf.keySet()) {\n      ProtocolSuite<ResourcePoolImpl, ProtocolBuilderBinary> suite =\n          new DummyBooleanProtocolSuite();\n      ProtocolEvaluator<ResourcePoolImpl> evaluator =\n          new BatchedProtocolEvaluator<>(new SequentialStrategy<>(), suite);\n      SecureComputationEngine<ResourcePoolImpl, ProtocolBuilderBinary> sce =\n          new SecureComputationEngineImpl<>(suite, evaluator);\n      TestThreadConfiguration<ResourcePoolImpl, ProtocolBuilderBinary> ttc =\n          new TestThreadConfiguration<>(\n              sce,\n              () -> new ResourcePoolImpl(playerId, noPlayers),\n              () -> new SocketNetwork(netConf.get(playerId)));\n      conf.put(playerId, ttc);\n    }\n\n    TestThreadFactory<ResourcePoolImpl, ProtocolBuilderBinary> f =\n        new TestThreadFactory<ResourcePoolImpl, ProtocolBuilderBinary>() {\n          @Override\n          public TestThread<ResourcePoolImpl, ProtocolBuilderBinary> next() {\n            return new TestThread<ResourcePoolImpl, ProtocolBuilderBinary>() {\n\n              @Override\n              public void test() throws Exception {\n\n                Boolean[] input = null;\n                if (conf.getMyId() == 2) {\n                  // 128-bit AES plaintext block\n                  input = ByteAndBitConverter.toBoolean(\"00112233445566778899aabbccddeeff\");\n                } else if (conf.getMyId() == 1) {\n                  // 128-bit key\n                  input = ByteAndBitConverter.toBoolean(\"000102030405060708090a0b0c0d0e0f\");\n                }\n\n                AesDemo app = new AesDemo(conf.getMyId(), input);\n\n                List<Boolean> aesResult = runApplication(app);\n\n                // Verify output state.\n                String expected = \"69c4e0d86a7b0430d8cdb78070b4c55a\"; // expected cipher\n                boolean[] actualBoolean = new boolean[aesResult.size()];\n                int i = 0;\n                for (Boolean b : aesResult) {\n                  actualBoolean[i++] = b;\n                }\n                String actual = ByteAndBitConverter.toHex(actualBoolean);\n                Assert.assertEquals(expected, actual);\n\n              }\n            };\n          }\n        };\n\n    TestThreadRunner.run(f, conf);\n  }", "signature": "void testAESDemo()", "full_signature": "@Test public void testAESDemo()", "class_method_signature": "TestAesDemo.testAESDemo()", "testcase": true, "constructor": false, "invocations": ["getFreePorts", "getNetworkConfigurations", "keySet", "get", "put", "getMyId", "toBoolean", "getMyId", "toBoolean", "getMyId", "runApplication", "size", "toHex", "assertEquals", "run"]}, "focal_class": {"identifier": "AesDemo", "superclass": "", "interfaces": "implements Application<List<Boolean>, ProtocolBuilderBinary>", "fields": [{"original_string": "private Boolean[] in;", "modifier": "private", "type": "Boolean[]", "declarator": "in", "var_name": "in"}, {"original_string": "private int id;", "modifier": "private", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private static final int BLOCK_SIZE = 128;", "modifier": "private static final", "type": "int", "declarator": "BLOCK_SIZE = 128", "var_name": "BLOCK_SIZE"}, {"original_string": "private static final int INPUT_LENGTH = 32;", "modifier": "private static final", "type": "int", "declarator": "INPUT_LENGTH = 32", "var_name": "INPUT_LENGTH"}], "methods": [{"identifier": "AesDemo", "parameters": "(int id, Boolean[] in)", "modifiers": "public", "return": "", "signature": " AesDemo(int id, Boolean[] in)", "full_signature": "public  AesDemo(int id, Boolean[] in)", "class_method_signature": "AesDemo.AesDemo(int id, Boolean[] in)", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AesDemo.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "buildComputation", "parameters": "(ProtocolBuilderBinary producer)", "modifiers": "@Override public", "return": "DRes<List<Boolean>>", "signature": "DRes<List<Boolean>> buildComputation(ProtocolBuilderBinary producer)", "full_signature": "@Override public DRes<List<Boolean>> buildComputation(ProtocolBuilderBinary producer)", "class_method_signature": "AesDemo.buildComputation(ProtocolBuilderBinary producer)", "testcase": false, "constructor": false}], "file": "demos/aes/src/main/java/dk/alexandra/fresco/demo/AesDemo.java"}, "focal_method": {"identifier": "AesDemo", "parameters": "(int id, Boolean[] in)", "modifiers": "public", "return": "", "body": "public AesDemo(int id, Boolean[] in) {\n    this.in = in;\n    this.id = id;\n  }", "signature": " AesDemo(int id, Boolean[] in)", "full_signature": "public  AesDemo(int id, Boolean[] in)", "class_method_signature": "AesDemo.AesDemo(int id, Boolean[] in)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}