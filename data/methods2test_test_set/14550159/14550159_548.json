{"test_class": {"identifier": "AcceptLanguageHeaderDelegateTest", "superclass": "", "interfaces": "", "fields": [], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/AcceptLanguageHeaderDelegateTest.java"}, "test_case": {"identifier": "throwExceptionWhenAcceptLanguageHeaderIsNull", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void throwExceptionWhenAcceptLanguageHeaderIsNull() {\n        new AcceptLanguageHeaderDelegate().fromString(null);\n    }", "signature": "void throwExceptionWhenAcceptLanguageHeaderIsNull()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void throwExceptionWhenAcceptLanguageHeaderIsNull()", "class_method_signature": "AcceptLanguageHeaderDelegateTest.throwExceptionWhenAcceptLanguageHeaderIsNull()", "testcase": true, "constructor": false, "invocations": ["fromString"]}, "focal_class": {"identifier": "AcceptLanguageHeaderDelegate", "superclass": "", "interfaces": "implements RuntimeDelegate.HeaderDelegate<AcceptLanguage>", "fields": [{"original_string": "private static final char QUALITY_SEPARATOR = ';';", "modifier": "private static final", "type": "char", "declarator": "QUALITY_SEPARATOR = ';'", "var_name": "QUALITY_SEPARATOR"}, {"original_string": "private static final char SUB_TAG_SEPARATOR = '-';", "modifier": "private static final", "type": "char", "declarator": "SUB_TAG_SEPARATOR = '-'", "var_name": "SUB_TAG_SEPARATOR"}], "methods": [{"identifier": "fromString", "parameters": "(String header)", "modifiers": "@Override public", "return": "AcceptLanguage", "signature": "AcceptLanguage fromString(String header)", "full_signature": "@Override public AcceptLanguage fromString(String header)", "class_method_signature": "AcceptLanguageHeaderDelegate.fromString(String header)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(AcceptLanguage language)", "modifiers": "@Override public", "return": "String", "signature": "String toString(AcceptLanguage language)", "full_signature": "@Override public String toString(AcceptLanguage language)", "class_method_signature": "AcceptLanguageHeaderDelegate.toString(AcceptLanguage language)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/AcceptLanguageHeaderDelegate.java"}, "focal_method": {"identifier": "fromString", "parameters": "(String header)", "modifiers": "@Override public", "return": "AcceptLanguage", "body": "@Override\n    public AcceptLanguage fromString(String header) {\n        if (header == null) {\n            throw new IllegalArgumentException();\n        }\n\n        try {\n            header = HeaderHelper.removeWhitespaces(header);\n            String tag;\n            Map<String, String> params = null;\n\n            int p = scan(header, QUALITY_SEPARATOR);\n            if (charAtIs(header, p, QUALITY_SEPARATOR)) {\n                tag = header.substring(0, p);\n                params = new HeaderParameterParser().parse(header);\n            } else {\n                tag = header;\n            }\n\n            String lang;\n            String country = null;\n\n            p = scan(header, SUB_TAG_SEPARATOR);\n            if (charAtIs(header, p, SUB_TAG_SEPARATOR)) {\n                lang = tag.substring(0, p);\n                country = tag.substring(p + 1);\n            } else {\n                lang = tag;\n            }\n\n            if (params == null || params.get(QVALUE) == null) {\n                return new AcceptLanguage(new Language(new Locale(lang, nullToEmpty(country))));\n            }\n\n            return new AcceptLanguage(new Locale(lang, nullToEmpty(country)), parseQualityValue(params.get(QVALUE)));\n        } catch (ParseException e) {\n            throw new IllegalArgumentException(\"Accept language header malformed\");\n        }\n    }", "signature": "AcceptLanguage fromString(String header)", "full_signature": "@Override public AcceptLanguage fromString(String header)", "class_method_signature": "AcceptLanguageHeaderDelegate.fromString(String header)", "testcase": false, "constructor": false, "invocations": ["removeWhitespaces", "scan", "charAtIs", "substring", "parse", "scan", "charAtIs", "substring", "substring", "get", "nullToEmpty", "nullToEmpty", "parseQualityValue", "get"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}