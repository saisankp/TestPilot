{"test_class": {"identifier": "ObservablesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int FILTER_TIME = 10000;", "modifier": "private static final", "type": "int", "declarator": "FILTER_TIME = 10000", "var_name": "FILTER_TIME"}, {"original_string": "private Observable compositeObservableOfMany;", "modifier": "private", "type": "Observable", "declarator": "compositeObservableOfMany", "var_name": "compositeObservableOfMany"}, {"original_string": "private Observable chainedCompositeObservableOfOne;", "modifier": "private", "type": "Observable", "declarator": "chainedCompositeObservableOfOne", "var_name": "chainedCompositeObservableOfOne"}, {"original_string": "private Observable chainedCompositeObservable;", "modifier": "private", "type": "Observable", "declarator": "chainedCompositeObservable", "var_name": "chainedCompositeObservable"}, {"original_string": "private Observable chainedDupeCompositeObservable;", "modifier": "private", "type": "Observable", "declarator": "chainedDupeCompositeObservable", "var_name": "chainedDupeCompositeObservable"}, {"original_string": "private UpdateDispatcher firstUpdateDispatcher;", "modifier": "private", "type": "UpdateDispatcher", "declarator": "firstUpdateDispatcher", "var_name": "firstUpdateDispatcher"}, {"original_string": "private UpdateDispatcher secondUpdateDispatcher;", "modifier": "private", "type": "UpdateDispatcher", "declarator": "secondUpdateDispatcher", "var_name": "secondUpdateDispatcher"}, {"original_string": "private UpdateDispatcher thirdUpdateDispatcher;", "modifier": "private", "type": "UpdateDispatcher", "declarator": "thirdUpdateDispatcher", "var_name": "thirdUpdateDispatcher"}, {"original_string": "private Observable trueConditionalObservable;", "modifier": "private", "type": "Observable", "declarator": "trueConditionalObservable", "var_name": "trueConditionalObservable"}, {"original_string": "private Observable falseConditionalObservable;", "modifier": "private", "type": "Observable", "declarator": "falseConditionalObservable", "var_name": "falseConditionalObservable"}, {"original_string": "private MockUpdatable updatable;", "modifier": "private", "type": "MockUpdatable", "declarator": "updatable", "var_name": "updatable"}, {"original_string": "private MockUpdatable secondUpdatable;", "modifier": "private", "type": "MockUpdatable", "declarator": "secondUpdatable", "var_name": "secondUpdatable"}, {"original_string": "private Scheduler scheduler;", "modifier": "private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private UpdateDispatcher updateDispatcher;", "modifier": "private", "type": "UpdateDispatcher", "declarator": "updateDispatcher", "var_name": "updateDispatcher"}, {"original_string": "@Mock\n  private ActivationHandler mockActivationHandler;", "modifier": "@Mock\n  private", "type": "ActivationHandler", "declarator": "mockActivationHandler", "var_name": "mockActivationHandler"}, {"original_string": "private UpdateDispatcher updateDispatcherWithUpdatablesChanged;", "modifier": "private", "type": "UpdateDispatcher", "declarator": "updateDispatcherWithUpdatablesChanged", "var_name": "updateDispatcherWithUpdatablesChanged"}, {"original_string": "private ShadowLooper looper;", "modifier": "private", "type": "ShadowLooper", "declarator": "looper", "var_name": "looper"}], "file": "agera/src/test/java/com/google/android/agera/ObservablesTest.java"}, "test_case": {"identifier": "shouldUpdatePerMillisecondObservable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldUpdatePerMillisecondObservable() {\n    final long expectedDelayedTime = scheduler.getCurrentTime() + FILTER_TIME;\n    updatable.addToObservable(perMillisecondObservable(FILTER_TIME, updateDispatcher));\n\n    updateDispatcher.update();\n    idleMainLooper(FILTER_TIME);\n\n    assertThat(updatable, wasUpdated());\n    assertThat(scheduler.getCurrentTime(), greaterThanOrEqualTo(expectedDelayedTime));\n  }", "signature": "void shouldUpdatePerMillisecondObservable()", "full_signature": "@Test public void shouldUpdatePerMillisecondObservable()", "class_method_signature": "ObservablesTest.shouldUpdatePerMillisecondObservable()", "testcase": true, "constructor": false, "invocations": ["getCurrentTime", "addToObservable", "perMillisecondObservable", "update", "idleMainLooper", "assertThat", "wasUpdated", "assertThat", "getCurrentTime", "greaterThanOrEqualTo"]}, "focal_class": {"identifier": "Observables", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compositeObservable", "parameters": "(@NonNull final Observable... observables)", "modifiers": "@NonNull public static", "return": "Observable", "signature": "Observable compositeObservable(@NonNull final Observable... observables)", "full_signature": "@NonNull public static Observable compositeObservable(@NonNull final Observable... observables)", "class_method_signature": "Observables.compositeObservable(@NonNull final Observable... observables)", "testcase": false, "constructor": false}, {"identifier": "compositeObservable", "parameters": "(final int shortestUpdateWindowMillis,\n      @NonNull final Observable... observables)", "modifiers": "@NonNull static", "return": "Observable", "signature": "Observable compositeObservable(final int shortestUpdateWindowMillis,\n      @NonNull final Observable... observables)", "full_signature": "@NonNull static Observable compositeObservable(final int shortestUpdateWindowMillis,\n      @NonNull final Observable... observables)", "class_method_signature": "Observables.compositeObservable(final int shortestUpdateWindowMillis,\n      @NonNull final Observable... observables)", "testcase": false, "constructor": false}, {"identifier": "conditionalObservable", "parameters": "(\n      @NonNull final Condition condition, @NonNull final Observable... observables)", "modifiers": "@NonNull public static", "return": "Observable", "signature": "Observable conditionalObservable(\n      @NonNull final Condition condition, @NonNull final Observable... observables)", "full_signature": "@NonNull public static Observable conditionalObservable(\n      @NonNull final Condition condition, @NonNull final Observable... observables)", "class_method_signature": "Observables.conditionalObservable(\n      @NonNull final Condition condition, @NonNull final Observable... observables)", "testcase": false, "constructor": false}, {"identifier": "perMillisecondObservable", "parameters": "(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "modifiers": "@NonNull public static", "return": "Observable", "signature": "Observable perMillisecondObservable(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "full_signature": "@NonNull public static Observable perMillisecondObservable(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "class_method_signature": "Observables.perMillisecondObservable(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "testcase": false, "constructor": false}, {"identifier": "perLoopObservable", "parameters": "(@NonNull final Observable... observables)", "modifiers": "@NonNull public static", "return": "Observable", "signature": "Observable perLoopObservable(@NonNull final Observable... observables)", "full_signature": "@NonNull public static Observable perLoopObservable(@NonNull final Observable... observables)", "class_method_signature": "Observables.perLoopObservable(@NonNull final Observable... observables)", "testcase": false, "constructor": false}, {"identifier": "updateDispatcher", "parameters": "()", "modifiers": "@NonNull public static", "return": "UpdateDispatcher", "signature": "UpdateDispatcher updateDispatcher()", "full_signature": "@NonNull public static UpdateDispatcher updateDispatcher()", "class_method_signature": "Observables.updateDispatcher()", "testcase": false, "constructor": false}, {"identifier": "updateDispatcher", "parameters": "(\n      @NonNull final ActivationHandler activationHandler)", "modifiers": "@NonNull public static", "return": "UpdateDispatcher", "signature": "UpdateDispatcher updateDispatcher(\n      @NonNull final ActivationHandler activationHandler)", "full_signature": "@NonNull public static UpdateDispatcher updateDispatcher(\n      @NonNull final ActivationHandler activationHandler)", "class_method_signature": "Observables.updateDispatcher(\n      @NonNull final ActivationHandler activationHandler)", "testcase": false, "constructor": false}, {"identifier": "Observables", "parameters": "()", "modifiers": "private", "return": "", "signature": " Observables()", "full_signature": "private  Observables()", "class_method_signature": "Observables.Observables()", "testcase": false, "constructor": true}], "file": "agera/src/main/java/com/google/android/agera/Observables.java"}, "focal_method": {"identifier": "perMillisecondObservable", "parameters": "(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "modifiers": "@NonNull public static", "return": "Observable", "body": "@NonNull\n  public static Observable perMillisecondObservable(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables) {\n    return compositeObservable(shortestUpdateWindowMillis, observables);\n  }", "signature": "Observable perMillisecondObservable(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "full_signature": "@NonNull public static Observable perMillisecondObservable(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "class_method_signature": "Observables.perMillisecondObservable(\n      final int shortestUpdateWindowMillis, @NonNull final Observable... observables)", "testcase": false, "constructor": false, "invocations": ["compositeObservable"]}, "repository": {"repo_id": 48175620, "url": "https://github.com/google/agera", "language": "Java", "is_fork": false, "fork_count": 669, "stargazer_count": 7333, "size": 968, "license": "licensed"}}