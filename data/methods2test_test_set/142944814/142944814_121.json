{"test_class": {"identifier": "NonceRefreshingTxRequesterTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/client/NonceRefreshingTxRequesterTest.java"}, "test_case": {"identifier": "shouldRequestFailEvenOnNonceRefresh", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldRequestFailEvenOnNonceRefresh() throws Exception {\n    // given\n    final AccountOperation mockAccountOperation = mock(AccountOperation.class);\n    when(mockAccountOperation.getState(any(AccountAddress.class)))\n        .thenReturn(AccountState.newBuilder().nonce(1L).build());\n    final AergoClient mockClient = mock(AergoClient.class);\n    when(mockClient.getAccountOperation()).thenReturn(mockAccountOperation);\n    final TryCountAndInterval tryCountAndInterval = TryCountAndInterval.of(3, Time.of(100L));\n    final TxRequester txRequester = new NonceRefreshingTxRequester(tryCountAndInterval,\n        new SimpleNonceProvider());\n    final AergoKey signer = new AergoKeyGenerator().create();\n    final CommitException expected = new CommitException(CommitStatus.TX_HAS_SAME_NONCE, \"Error\");\n    final TxRequestFunction requestFunction = new TxRequestFunction() {\n      @Override\n      public TxHash apply(Signer signer, Long aLong) {\n        throw expected;\n      }\n    };\n\n    try {\n      txRequester.request(mockClient, signer, requestFunction);\n      fail(\"Should throw CommitException\");\n    } catch (Exception actual) {\n      // then\n      assertEquals(expected, actual);\n    }\n  }", "signature": "void shouldRequestFailEvenOnNonceRefresh()", "full_signature": "@Test public void shouldRequestFailEvenOnNonceRefresh()", "class_method_signature": "NonceRefreshingTxRequesterTest.shouldRequestFailEvenOnNonceRefresh()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getState", "any", "build", "nonce", "newBuilder", "mock", "thenReturn", "when", "getAccountOperation", "of", "of", "create", "request", "fail", "assertEquals"]}, "focal_class": {"identifier": "NonceRefreshingTxRequester", "superclass": "", "interfaces": "implements TxRequester", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "@NonNull\n  protected final TryCountAndInterval tryCountAndInterval;", "modifier": "@NonNull\n  protected final", "type": "TryCountAndInterval", "declarator": "tryCountAndInterval", "var_name": "tryCountAndInterval"}, {"original_string": "@NonNull\n  protected final NonceProvider nonceProvider;", "modifier": "@NonNull\n  protected final", "type": "NonceProvider", "declarator": "nonceProvider", "var_name": "nonceProvider"}], "methods": [{"identifier": "request", "parameters": "(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "modifiers": "@Override public", "return": "TxHash", "signature": "TxHash request(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "full_signature": "@Override public TxHash request(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "class_method_signature": "NonceRefreshingTxRequester.request(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "testcase": false, "constructor": false}, {"identifier": "isNonceRelatedException", "parameters": "(final Exception e)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNonceRelatedException(final Exception e)", "full_signature": "protected boolean isNonceRelatedException(final Exception e)", "class_method_signature": "NonceRefreshingTxRequester.isNonceRelatedException(final Exception e)", "testcase": false, "constructor": false}, {"identifier": "syncNonce", "parameters": "(final AergoClient aergoClient, final AccountAddress address)", "modifiers": "protected", "return": "void", "signature": "void syncNonce(final AergoClient aergoClient, final AccountAddress address)", "full_signature": "protected void syncNonce(final AergoClient aergoClient, final AccountAddress address)", "class_method_signature": "NonceRefreshingTxRequester.syncNonce(final AergoClient aergoClient, final AccountAddress address)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/NonceRefreshingTxRequester.java"}, "focal_method": {"identifier": "request", "parameters": "(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "modifiers": "@Override public", "return": "TxHash", "body": "@Override\n  public TxHash request(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction) throws Exception {\n    assertNotNull(aergoClient, \"AergoClient must not null\");\n    assertNotNull(signer, \"Signer must not null\");\n    assertNotNull(requestFunction, \"RequestFunction must not null\");\n    logger.debug(\"Transaction try with signer: {}, requestFunction: {}\", signer,\n        requestFunction);\n\n    TxHash txHash = null;\n    Exception error = null;\n\n    final long sleepInterval = tryCountAndInterval.getInterval().toMilliseconds();\n    int count = tryCountAndInterval.getCount();\n    while (0 <= count && null == txHash) {\n      final long nonce = nonceProvider.incrementAndGetNonce(signer.getPrincipal());\n      try {\n        txHash = requestFunction.apply(signer, nonce);\n      } catch (Exception e) {\n        error = e;\n        if (isNonceRelatedException(e)) {\n          final CommitException commitException = (CommitException) e;\n          logger.debug(\"Request failed with {}. Refresh it (try left: {})\",\n              commitException.getCommitStatus(), count);\n          syncNonce(aergoClient, signer.getPrincipal());\n        } else {\n          throw e;\n        }\n\n        ThreadUtils.trySleep(sleepInterval);\n        --count;\n      }\n    }\n\n    if (null == txHash && null != error) {\n      throw error;\n    }\n\n    return txHash;\n  }", "signature": "TxHash request(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "full_signature": "@Override public TxHash request(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "class_method_signature": "NonceRefreshingTxRequester.request(final AergoClient aergoClient, final Signer signer,\n      final TxRequestFunction requestFunction)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "assertNotNull", "assertNotNull", "debug", "toMilliseconds", "getInterval", "getCount", "incrementAndGetNonce", "getPrincipal", "apply", "isNonceRelatedException", "debug", "getCommitStatus", "syncNonce", "getPrincipal", "trySleep"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}