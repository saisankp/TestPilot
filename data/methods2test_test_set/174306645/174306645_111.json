{"test_class": {"identifier": "ResponsesTest", "superclass": "", "interfaces": "", "fields": [], "file": "addons/events/knative-eventing-addon/src/test/java/org/kie/kogito/events/knative/ce/http/ResponsesTest.java"}, "test_case": {"identifier": "errorProcessingCloudEvent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void errorProcessingCloudEvent() {\n        final Response response = Responses.errorProcessingCloudEvent(new IllegalArgumentException(\"Fail!\"));\n        assertThat(response).isNotNull();\n        assertThat(response.getStatus()).isEqualTo(Response.Status.BAD_REQUEST.getStatusCode());\n        assertThat(response.getEntity()).isInstanceOf(ResponseError.class);\n    }", "signature": "void errorProcessingCloudEvent()", "full_signature": "@Test void errorProcessingCloudEvent()", "class_method_signature": "ResponsesTest.errorProcessingCloudEvent()", "testcase": true, "constructor": false, "invocations": ["errorProcessingCloudEvent", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getStatus", "getStatusCode", "isInstanceOf", "assertThat", "getEntity"]}, "focal_class": {"identifier": "Responses", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERROR_PROCESSING = \"Failed to process HttpRequest into a CloudEvent format\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_PROCESSING = \"Failed to process HttpRequest into a CloudEvent format\"", "var_name": "ERROR_PROCESSING"}, {"original_string": "private static final String ERROR_CHANNEL_NOT_BOUND = \"Channel '%s' not bound, impossible to retransmit CloudEvent internally: %s\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_CHANNEL_NOT_BOUND = \"Channel '%s' not bound, impossible to retransmit CloudEvent internally: %s\"", "var_name": "ERROR_CHANNEL_NOT_BOUND"}], "methods": [{"identifier": "Responses", "parameters": "()", "modifiers": "private", "return": "", "signature": " Responses()", "full_signature": "private  Responses()", "class_method_signature": "Responses.Responses()", "testcase": false, "constructor": true}, {"identifier": "errorProcessingCloudEvent", "parameters": "(Throwable cause)", "modifiers": "public static", "return": "Response", "signature": "Response errorProcessingCloudEvent(Throwable cause)", "full_signature": "public static Response errorProcessingCloudEvent(Throwable cause)", "class_method_signature": "Responses.errorProcessingCloudEvent(Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "channelNotBound", "parameters": "(String channelName, CloudEvent cloudEvent)", "modifiers": "public static", "return": "Response", "signature": "Response channelNotBound(String channelName, CloudEvent cloudEvent)", "full_signature": "public static Response channelNotBound(String channelName, CloudEvent cloudEvent)", "class_method_signature": "Responses.channelNotBound(String channelName, CloudEvent cloudEvent)", "testcase": false, "constructor": false}], "file": "addons/events/knative-eventing-addon/src/main/java/org/kie/kogito/events/knative/ce/http/Responses.java"}, "focal_method": {"identifier": "errorProcessingCloudEvent", "parameters": "(Throwable cause)", "modifiers": "public static", "return": "Response", "body": "public static Response errorProcessingCloudEvent(Throwable cause) {\n        return Response.\n                status(Response.Status.BAD_REQUEST).\n                entity(new ResponseError(ERROR_PROCESSING, cause)).\n                build();\n    }", "signature": "Response errorProcessingCloudEvent(Throwable cause)", "full_signature": "public static Response errorProcessingCloudEvent(Throwable cause)", "class_method_signature": "Responses.errorProcessingCloudEvent(Throwable cause)", "testcase": false, "constructor": false, "invocations": ["build", "entity", "status"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}