{"test_class": {"identifier": "TransactionVisibilityFilterTest", "superclass": "extends AbstractTransactionVisibilityFilterTest", "interfaces": "", "fields": [], "file": "tephra-hbase-compat-1.1/src/test/java/co/cask/tephra/hbase11/coprocessor/TransactionVisibilityFilterTest.java"}, "test_case": {"identifier": "testTTLFiltering", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTTLFiltering() throws Exception {\n    Map<byte[], Long> ttls = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n    ttls.put(FAM, 10L);\n    ttls.put(FAM2, 30L);\n    ttls.put(FAM3, 0L);\n\n    Transaction tx = txManager.startShort();\n    long now = tx.getVisibilityUpperBound();\n    Filter filter = new TransactionVisibilityFilter(tx, ttls, false, ScanType.USER_SCAN);\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM, \"val1\", now)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM, \"val1\", now - 1 * TxConstants.MAX_TX_PER_MS)));\n    assertEquals(Filter.ReturnCode.NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM, \"val1\", now - 11 * TxConstants.MAX_TX_PER_MS)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM2, \"val1\", now - 11 * TxConstants.MAX_TX_PER_MS)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM2, \"val1\", now - 21 * TxConstants.MAX_TX_PER_MS)));\n    assertEquals(Filter.ReturnCode.NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM2, \"val1\", now - 31 * TxConstants.MAX_TX_PER_MS)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM3, \"val1\", now - 31 * TxConstants.MAX_TX_PER_MS)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM3, \"val1\", now - 1001 * TxConstants.MAX_TX_PER_MS)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row2\", FAM, \"val1\", now)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row2\", FAM, \"val1\", now - 1 * TxConstants.MAX_TX_PER_MS)));\n\n    // Verify ttl for pre-existing, non-transactional data\n    long preNow = now / TxConstants.MAX_TX_PER_MS;\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM, \"val1\", preNow)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM, \"val1\", preNow - 9L)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM, \"val1\", preNow - 10L)));\n    assertEquals(Filter.ReturnCode.NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM, \"val1\", preNow - 11L)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM3, \"val1\", preNow)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM3, \"val1\", preNow - 9L)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM3, \"val1\", preNow - 10L)));\n    assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,\n                 filter.filterKeyValue(newKeyValue(\"row1\", FAM3, \"val1\", preNow - 1001L)));\n  }", "signature": "void testTTLFiltering()", "full_signature": "@Test public void testTTLFiltering()", "class_method_signature": "TransactionVisibilityFilterTest.testTTLFiltering()", "testcase": true, "constructor": false, "invocations": ["newTreeMap", "put", "put", "put", "startShort", "getVisibilityUpperBound", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue", "assertEquals", "filterKeyValue", "newKeyValue"]}, "focal_class": {"identifier": "TransactionVisibilityFilter", "superclass": "extends FilterBase", "interfaces": "", "fields": [{"original_string": "private final Transaction tx;", "modifier": "private final", "type": "Transaction", "declarator": "tx", "var_name": "tx"}, {"original_string": "private final Map<ImmutableBytesWritable, Long> oldestTsByFamily;", "modifier": "private final", "type": "Map<ImmutableBytesWritable, Long>", "declarator": "oldestTsByFamily", "var_name": "oldestTsByFamily"}, {"original_string": "private final boolean allowEmptyValues;", "modifier": "private final", "type": "boolean", "declarator": "allowEmptyValues", "var_name": "allowEmptyValues"}, {"original_string": "private final boolean clearDeletes;", "modifier": "private final", "type": "boolean", "declarator": "clearDeletes", "var_name": "clearDeletes"}, {"original_string": "private final Filter cellFilter;", "modifier": "private final", "type": "Filter", "declarator": "cellFilter", "var_name": "cellFilter"}, {"original_string": "private final ImmutableBytesWritable currentFamily = new ImmutableBytesWritable(HConstants.EMPTY_BYTE_ARRAY);", "modifier": "private final", "type": "ImmutableBytesWritable", "declarator": "currentFamily = new ImmutableBytesWritable(HConstants.EMPTY_BYTE_ARRAY)", "var_name": "currentFamily"}, {"original_string": "private long currentOldestTs;", "modifier": "private", "type": "long", "declarator": "currentOldestTs", "var_name": "currentOldestTs"}, {"original_string": "private DeleteTracker deleteTracker = new DeleteTracker();", "modifier": "private", "type": "DeleteTracker", "declarator": "deleteTracker = new DeleteTracker()", "var_name": "deleteTracker"}], "methods": [{"identifier": "TransactionVisibilityFilter", "parameters": "(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                              ScanType scanType)", "modifiers": "public", "return": "", "signature": " TransactionVisibilityFilter(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                              ScanType scanType)", "full_signature": "public  TransactionVisibilityFilter(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                              ScanType scanType)", "class_method_signature": "TransactionVisibilityFilter.TransactionVisibilityFilter(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                              ScanType scanType)", "testcase": false, "constructor": true}, {"identifier": "TransactionVisibilityFilter", "parameters": "(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                               ScanType scanType, @Nullable Filter cellFilter)", "modifiers": "public", "return": "", "signature": " TransactionVisibilityFilter(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                               ScanType scanType, @Nullable Filter cellFilter)", "full_signature": "public  TransactionVisibilityFilter(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                               ScanType scanType, @Nullable Filter cellFilter)", "class_method_signature": "TransactionVisibilityFilter.TransactionVisibilityFilter(Transaction tx, Map<byte[], Long> ttlByFamily, boolean allowEmptyValues,\n                               ScanType scanType, @Nullable Filter cellFilter)", "testcase": false, "constructor": true}, {"identifier": "filterKeyValue", "parameters": "(Cell cell)", "modifiers": "@Override public", "return": "ReturnCode", "signature": "ReturnCode filterKeyValue(Cell cell)", "full_signature": "@Override public ReturnCode filterKeyValue(Cell cell)", "class_method_signature": "TransactionVisibilityFilter.filterKeyValue(Cell cell)", "testcase": false, "constructor": false}, {"identifier": "runSubFilter", "parameters": "(ReturnCode txFilterCode, Cell cell)", "modifiers": "private", "return": "ReturnCode", "signature": "ReturnCode runSubFilter(ReturnCode txFilterCode, Cell cell)", "full_signature": "private ReturnCode runSubFilter(ReturnCode txFilterCode, Cell cell)", "class_method_signature": "TransactionVisibilityFilter.runSubFilter(ReturnCode txFilterCode, Cell cell)", "testcase": false, "constructor": false}, {"identifier": "determineReturnCode", "parameters": "(ReturnCode txFilterCode, ReturnCode subFilterCode)", "modifiers": "protected", "return": "ReturnCode", "signature": "ReturnCode determineReturnCode(ReturnCode txFilterCode, ReturnCode subFilterCode)", "full_signature": "protected ReturnCode determineReturnCode(ReturnCode txFilterCode, ReturnCode subFilterCode)", "class_method_signature": "TransactionVisibilityFilter.determineReturnCode(ReturnCode txFilterCode, ReturnCode subFilterCode)", "testcase": false, "constructor": false}, {"identifier": "filterRow", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean filterRow()", "full_signature": "@Override public boolean filterRow()", "class_method_signature": "TransactionVisibilityFilter.filterRow()", "testcase": false, "constructor": false}, {"identifier": "transformCell", "parameters": "(Cell cell)", "modifiers": "@Override public", "return": "Cell", "signature": "Cell transformCell(Cell cell)", "full_signature": "@Override public Cell transformCell(Cell cell)", "class_method_signature": "TransactionVisibilityFilter.transformCell(Cell cell)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "TransactionVisibilityFilter.reset()", "testcase": false, "constructor": false}, {"identifier": "filterRowKey", "parameters": "(byte[] buffer, int offset, int length)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean filterRowKey(byte[] buffer, int offset, int length)", "full_signature": "@Override public boolean filterRowKey(byte[] buffer, int offset, int length)", "class_method_signature": "TransactionVisibilityFilter.filterRowKey(byte[] buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "filterAllRemaining", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean filterAllRemaining()", "full_signature": "@Override public boolean filterAllRemaining()", "class_method_signature": "TransactionVisibilityFilter.filterAllRemaining()", "testcase": false, "constructor": false}, {"identifier": "filterRowCells", "parameters": "(List<Cell> kvs)", "modifiers": "@Override public", "return": "void", "signature": "void filterRowCells(List<Cell> kvs)", "full_signature": "@Override public void filterRowCells(List<Cell> kvs)", "class_method_signature": "TransactionVisibilityFilter.filterRowCells(List<Cell> kvs)", "testcase": false, "constructor": false}, {"identifier": "hasFilterRow", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasFilterRow()", "full_signature": "@Override public boolean hasFilterRow()", "class_method_signature": "TransactionVisibilityFilter.hasFilterRow()", "testcase": false, "constructor": false}, {"identifier": "getNextKeyHint", "parameters": "(KeyValue currentKV)", "modifiers": "@SuppressWarnings(\"deprecation\") @Override public", "return": "KeyValue", "signature": "KeyValue getNextKeyHint(KeyValue currentKV)", "full_signature": "@SuppressWarnings(\"deprecation\") @Override public KeyValue getNextKeyHint(KeyValue currentKV)", "class_method_signature": "TransactionVisibilityFilter.getNextKeyHint(KeyValue currentKV)", "testcase": false, "constructor": false}, {"identifier": "getNextCellHint", "parameters": "(Cell currentKV)", "modifiers": "@Override public", "return": "Cell", "signature": "Cell getNextCellHint(Cell currentKV)", "full_signature": "@Override public Cell getNextCellHint(Cell currentKV)", "class_method_signature": "TransactionVisibilityFilter.getNextCellHint(Cell currentKV)", "testcase": false, "constructor": false}, {"identifier": "isFamilyEssential", "parameters": "(byte[] name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFamilyEssential(byte[] name)", "full_signature": "@Override public boolean isFamilyEssential(byte[] name)", "class_method_signature": "TransactionVisibilityFilter.isFamilyEssential(byte[] name)", "testcase": false, "constructor": false}, {"identifier": "isColumnDelete", "parameters": "(Cell cell)", "modifiers": "private", "return": "boolean", "signature": "boolean isColumnDelete(Cell cell)", "full_signature": "private boolean isColumnDelete(Cell cell)", "class_method_signature": "TransactionVisibilityFilter.isColumnDelete(Cell cell)", "testcase": false, "constructor": false}], "file": "tephra-hbase-compat-1.1/src/main/java/co/cask/tephra/hbase11/coprocessor/TransactionVisibilityFilter.java"}, "focal_method": {"identifier": "filterKeyValue", "parameters": "(Cell cell)", "modifiers": "@Override public", "return": "ReturnCode", "body": "@Override\n  public ReturnCode filterKeyValue(Cell cell) throws IOException {\n    if (!CellUtil.matchingFamily(cell, currentFamily.get(), currentFamily.getOffset(), currentFamily.getLength())) {\n      // column family changed\n      currentFamily.set(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());\n      Long familyOldestTs = oldestTsByFamily.get(currentFamily);\n      currentOldestTs = familyOldestTs != null ? familyOldestTs : 0;\n      deleteTracker.reset();\n    }\n    // need to apply TTL for the column family here\n    long kvTimestamp = cell.getTimestamp();\n    if (TxUtils.getTimestampForTTL(kvTimestamp) < currentOldestTs) {\n      // passed TTL for this column, seek to next\n      return ReturnCode.NEXT_COL;\n    } else if (tx.isVisible(kvTimestamp)) {\n      // Return all writes done by current transaction (including deletes) for VisibilityLevel.SNAPSHOT_ALL\n      if (tx.getVisibilityLevel() == Transaction.VisibilityLevel.SNAPSHOT_ALL && tx.isCurrentWrite(kvTimestamp)) {\n        // cell is visible\n        // visibility SNAPSHOT_ALL needs all matches\n        return runSubFilter(ReturnCode.INCLUDE, cell);\n      }\n      if (DeleteTracker.isFamilyDelete(cell)) {\n        deleteTracker.addFamilyDelete(cell);\n        if (clearDeletes) {\n          return ReturnCode.NEXT_COL;\n        } else {\n          // cell is visible\n          // as soon as we find a KV to include we can move to the next column\n          return runSubFilter(ReturnCode.INCLUDE_AND_NEXT_COL, cell);\n        }\n      }\n      // check if masked by family delete\n      if (deleteTracker.isDeleted(cell)) {\n        return ReturnCode.NEXT_COL;\n      }\n      // check for column delete\n      if (isColumnDelete(cell)) {\n        if (clearDeletes) {\n          // skip \"deleted\" cell\n          return ReturnCode.NEXT_COL;\n        } else {\n          // keep the marker but skip any remaining versions\n          return runSubFilter(ReturnCode.INCLUDE_AND_NEXT_COL, cell);\n        }\n      }\n      // cell is visible\n      // as soon as we find a KV to include we can move to the next column\n      return runSubFilter(ReturnCode.INCLUDE_AND_NEXT_COL, cell);\n    } else {\n      return ReturnCode.SKIP;\n    }\n  }", "signature": "ReturnCode filterKeyValue(Cell cell)", "full_signature": "@Override public ReturnCode filterKeyValue(Cell cell)", "class_method_signature": "TransactionVisibilityFilter.filterKeyValue(Cell cell)", "testcase": false, "constructor": false, "invocations": ["matchingFamily", "get", "getOffset", "getLength", "set", "getFamilyArray", "getFamilyOffset", "getFamilyLength", "get", "reset", "getTimestamp", "getTimestampForTTL", "isVisible", "getVisibilityLevel", "isCurrentWrite", "runSubFilter", "isFamilyDelete", "addFamilyDelete", "runSubFilter", "isDeleted", "isColumnDelete", "runSubFilter", "runSubFilter"]}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}