{"test_class": {"identifier": "RefreshTokenProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> SCOPES = List.of(\"https://www.googleapis.com/auth/devstorage.read_write\");", "modifier": "private static final", "type": "List<String>", "declarator": "SCOPES = List.of(\"https://www.googleapis.com/auth/devstorage.read_write\")", "var_name": "SCOPES"}, {"original_string": "@ClassRule\n    public static SettingsOverride settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.DATABASE_BACKEND, \"com.google.cloud.broker.database.backends.DummyDatabaseBackend\",\n        AppSettings.USER_MAPPER, \"com.google.cloud.broker.usermapping.MockUserMapper\"\n    ));", "modifier": "@ClassRule\n    public static", "type": "SettingsOverride", "declarator": "settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.DATABASE_BACKEND, \"com.google.cloud.broker.database.backends.DummyDatabaseBackend\",\n        AppSettings.USER_MAPPER, \"com.google.cloud.broker.usermapping.MockUserMapper\"\n    ))", "var_name": "settingsOverride"}], "file": "code/broker-server/src/test/java/com/google/cloud/broker/apps/brokerserver/accesstokens/providers/RefreshTokenProviderTest.java"}, "test_case": {"identifier": "testUnauthorized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnauthorized() {\n        RefreshTokenProvider provider = new RefreshTokenProvider();\n        try {\n            provider.getAccessToken(\"bob@example.com\", SCOPES);\n            fail(\"StatusRuntimeException not thrown\");\n        } catch (StatusRuntimeException e) {\n            assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode());\n            assertEquals(\n                \"GCP Token Broker authorization is invalid or has expired for identity: bob@example.com\",\n                e.getStatus().getDescription());\n        }\n    }", "signature": "void testUnauthorized()", "full_signature": "@Test public void testUnauthorized()", "class_method_signature": "RefreshTokenProviderTest.testUnauthorized()", "testcase": true, "constructor": false, "invocations": ["getAccessToken", "fail", "assertEquals", "getCode", "getCode", "getStatus", "assertEquals", "getDescription", "getStatus"]}, "focal_class": {"identifier": "RefreshTokenProvider", "superclass": "extends AbstractUserProvider", "interfaces": "", "fields": [{"original_string": "private static String AUTHZ_ERROR_MESSAGE = \"GCP Token Broker authorization is invalid or has expired for identity: %s\";", "modifier": "private static", "type": "String", "declarator": "AUTHZ_ERROR_MESSAGE = \"GCP Token Broker authorization is invalid or has expired for identity: %s\"", "var_name": "AUTHZ_ERROR_MESSAGE"}], "methods": [{"identifier": "getAccessToken", "parameters": "(String googleIdentity, List<String> scopes)", "modifiers": "@Override public", "return": "AccessToken", "signature": "AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "full_signature": "@Override public AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "class_method_signature": "RefreshTokenProvider.getAccessToken(String googleIdentity, List<String> scopes)", "testcase": false, "constructor": false}], "file": "code/broker-server/src/main/java/com/google/cloud/broker/apps/brokerserver/accesstokens/providers/RefreshTokenProvider.java"}, "focal_method": {"identifier": "getAccessToken", "parameters": "(String googleIdentity, List<String> scopes)", "modifiers": "@Override public", "return": "AccessToken", "body": "@Override\n    public AccessToken getAccessToken(String googleIdentity, List<String> scopes) {\n        // Fetch refresh token from the database\n        RefreshToken refreshToken = null;\n        try {\n            refreshToken = (RefreshToken) AbstractDatabaseBackend.getInstance().get(RefreshToken.class, googleIdentity);\n        }\n        catch (DatabaseObjectNotFound e) {\n            throw Status.PERMISSION_DENIED.withDescription(String.format(AUTHZ_ERROR_MESSAGE, googleIdentity)).asRuntimeException();\n        }\n\n        // Decrypt the refresh token's value\n        byte[] encryptedValue = refreshToken.getValue();\n        String decryptedValue = new String(AbstractEncryptionBackend.getInstance().decrypt(encryptedValue));\n\n        // Load OAuth client secret\n        GoogleClientSecrets clientSecrets = OauthClientSecretsLoader.getSecrets();\n\n        // Generate a new access token\n        TokenResponse response = null;\n        try {\n            response = new GoogleRefreshTokenRequest(\n                new NetHttpTransport(),\n                new JacksonFactory(),\n                decryptedValue,\n                clientSecrets.getDetails().getClientId(),\n                clientSecrets.getDetails().getClientSecret()\n            ).setScopes(scopes).execute();\n        } catch (IOException e) {\n            throw Status.PERMISSION_DENIED.withDescription(String.format(AUTHZ_ERROR_MESSAGE, googleIdentity)).asRuntimeException();\n        }\n\n        return new AccessToken(\n            response.getAccessToken(),\n                TimeUtils.currentTimeMillis() + response.getExpiresInSeconds() * 1000);\n    }", "signature": "AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "full_signature": "@Override public AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "class_method_signature": "RefreshTokenProvider.getAccessToken(String googleIdentity, List<String> scopes)", "testcase": false, "constructor": false, "invocations": ["get", "getInstance", "asRuntimeException", "withDescription", "format", "getValue", "decrypt", "getInstance", "getSecrets", "execute", "setScopes", "getClientId", "getDetails", "getClientSecret", "getDetails", "asRuntimeException", "withDescription", "format", "getAccessToken", "currentTimeMillis", "getExpiresInSeconds"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}