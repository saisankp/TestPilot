{"test_class": {"identifier": "ModificationFileTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/apache/iotdb/db/engine/modification/ModificationFileTest.java"}, "test_case": {"identifier": "testAbort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAbort() {\n    String tempFileName = TestConstant.BASE_OUTPUT_PATH.concat(\"mod.temp\");\n    Modification[] modifications = new Modification[]{\n        new Deletion(new PartialPath(new String[]{\"d1\", \"s1\"}), 1, 1),\n        new Deletion(new PartialPath(new String[]{\"d1\", \"s2\"}), 2, 2),\n        new Deletion(new PartialPath(new String[]{\"d1\", \"s3\"}), 3, 3, 4),\n        new Deletion(new PartialPath(new String[]{\"d1\", \"s4\"}), 4, 4, 5),\n    };\n    try (ModificationFile mFile = new ModificationFile(tempFileName)) {\n      for (int i = 0; i < 2; i++) {\n        mFile.write(modifications[i]);\n      }\n      List<Modification> modificationList = (List<Modification>) mFile.getModifications();\n      for (int i = 0; i < 2; i++) {\n        assertEquals(modifications[i], modificationList.get(i));\n      }\n\n      for (int i = 2; i < 4; i++) {\n        mFile.write(modifications[i]);\n      }\n      modificationList = (List<Modification>) mFile.getModifications();\n      mFile.abort();\n\n      for (int i = 0; i < 3; i++) {\n        assertEquals(modifications[i], modificationList.get(i));\n      }\n    } catch (IOException e) {\n      fail(e.getMessage());\n    } finally {\n      new File(tempFileName).delete();\n    }\n  }", "signature": "void testAbort()", "full_signature": "@Test public void testAbort()", "class_method_signature": "ModificationFileTest.testAbort()", "testcase": true, "constructor": false, "invocations": ["concat", "write", "getModifications", "assertEquals", "get", "write", "getModifications", "abort", "assertEquals", "get", "fail", "getMessage", "delete"]}, "focal_class": {"identifier": "ModificationFile", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ModificationFile.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ModificationFile.class)", "var_name": "logger"}, {"original_string": "public static final String FILE_SUFFIX = \".mods\";", "modifier": "public static final", "type": "String", "declarator": "FILE_SUFFIX = \".mods\"", "var_name": "FILE_SUFFIX"}, {"original_string": "private List<Modification> modifications;", "modifier": "private", "type": "List<Modification>", "declarator": "modifications", "var_name": "modifications"}, {"original_string": "private ModificationWriter writer;", "modifier": "private", "type": "ModificationWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private ModificationReader reader;", "modifier": "private", "type": "ModificationReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private String filePath;", "modifier": "private", "type": "String", "declarator": "filePath", "var_name": "filePath"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "methods": [{"identifier": "ModificationFile", "parameters": "(String filePath)", "modifiers": "public", "return": "", "signature": " ModificationFile(String filePath)", "full_signature": "public  ModificationFile(String filePath)", "class_method_signature": "ModificationFile.ModificationFile(String filePath)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "ModificationFile.init()", "testcase": false, "constructor": false}, {"identifier": "checkInit", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkInit()", "full_signature": "private void checkInit()", "class_method_signature": "ModificationFile.checkInit()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ModificationFile.close()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void abort()", "full_signature": "public void abort()", "class_method_signature": "ModificationFile.abort()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Modification mod)", "modifiers": "public", "return": "void", "signature": "void write(Modification mod)", "full_signature": "public void write(Modification mod)", "class_method_signature": "ModificationFile.write(Modification mod)", "testcase": false, "constructor": false}, {"identifier": "getModifications", "parameters": "()", "modifiers": "public", "return": "Collection<Modification>", "signature": "Collection<Modification> getModifications()", "full_signature": "public Collection<Modification> getModifications()", "class_method_signature": "ModificationFile.getModifications()", "testcase": false, "constructor": false}, {"identifier": "getFilePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFilePath()", "full_signature": "public String getFilePath()", "class_method_signature": "ModificationFile.getFilePath()", "testcase": false, "constructor": false}, {"identifier": "setFilePath", "parameters": "(String filePath)", "modifiers": "public", "return": "void", "signature": "void setFilePath(String filePath)", "full_signature": "public void setFilePath(String filePath)", "class_method_signature": "ModificationFile.setFilePath(String filePath)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void remove()", "full_signature": "public void remove()", "class_method_signature": "ModificationFile.remove()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean exists()", "full_signature": "public boolean exists()", "class_method_signature": "ModificationFile.exists()", "testcase": false, "constructor": false}, {"identifier": "createHardlink", "parameters": "()", "modifiers": "public", "return": "ModificationFile", "signature": "ModificationFile createHardlink()", "full_signature": "public ModificationFile createHardlink()", "class_method_signature": "ModificationFile.createHardlink()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/engine/modification/ModificationFile.java"}, "focal_method": {"identifier": "abort", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void abort() throws IOException {\n    synchronized (this) {\n      if (!modifications.isEmpty()) {\n        writer.abort();\n        modifications.remove(modifications.size() - 1);\n      }\n    }\n  }", "signature": "void abort()", "full_signature": "public void abort()", "class_method_signature": "ModificationFile.abort()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "abort", "remove", "size"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}