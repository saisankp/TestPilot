{"test_class": {"identifier": "SpeedConverterTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "modules/library/render/src/test/java/org/geotools/renderer/windbarbs/SpeedConverterTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n\n        // 1 m/s\n        double speed = SpeedConverter.toKnots(1, \"m/s\");\n        assertEquals(1.94384449, speed, 1E-6);\n\n        // -1 m/s\n        speed = SpeedConverter.toKnots(-1, \"m/s\");\n        assertEquals(-1.94384449, speed, 1E-6);\n\n        // 100 cm/s\n        speed = SpeedConverter.toKnots(100, \"cm/s\");\n        assertEquals(1.94384449, speed, 1E-6);\n\n        // 10 cm/s\n        speed = SpeedConverter.toKnots(10, \"cm/s\");\n        assertEquals(.194384449, speed, 1E-6);\n\n        // knot to knot\n        speed = SpeedConverter.toKnots(10, \"kn\");\n        assertEquals(10, speed, 1E-6);\n\n        // knot to knot\n        speed = SpeedConverter.toKnots(10, \"kts\");\n        assertEquals(10, speed, 1E-6);\n\n        // mph\n        speed = SpeedConverter.toKnots(1, \"mph\");\n        assertEquals(0.868976242, speed, 1E-6);\n\n        // km/h\n        speed = SpeedConverter.toKnots(1, \"km/h\");\n        assertEquals(0.539956803, speed, 1E-6);\n\n        // NaN\n        speed = SpeedConverter.toKnots(Double.NaN, \"km/h\");\n        assertEquals(Double.NaN, speed, 1E-6);\n\n        // infinite\n        try {\n            speed = SpeedConverter.toKnots(Double.NEGATIVE_INFINITY, \"km/h\");\n            assertTrue(false);\n        } catch (IllegalArgumentException e) {\n            // ok\n        }\n        try {\n            speed = SpeedConverter.toKnots(Double.POSITIVE_INFINITY, \"km/h\");\n            assertTrue(false);\n        } catch (IllegalArgumentException e) {\n            // ok\n        }\n\n        // feet/s\n        speed = SpeedConverter.toKnots(1, NonSI.FOOT.toString() + \"/s\");\n        assertEquals(0.592483801, speed, 1E-6);\n\n        try {\n            speed = SpeedConverter.toKnots(1, \"a/s\");\n            assertTrue(false);\n        } catch (IllegalArgumentException e) {\n            // ok\n        }\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SpeedConverterTest.test()", "testcase": true, "constructor": false, "invocations": ["toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertEquals", "toKnots", "assertTrue", "toKnots", "assertTrue", "toKnots", "toString", "assertEquals", "toKnots", "assertTrue"]}, "focal_class": {"identifier": "SpeedConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(SpeedConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(SpeedConverter.class)", "var_name": "LOGGER"}, {"original_string": "private static final UnitFormat UCUM_FORMAT_INSTANCE = UnitFormat.getUCUMInstance();", "modifier": "private static final", "type": "UnitFormat", "declarator": "UCUM_FORMAT_INSTANCE = UnitFormat.getUCUMInstance()", "var_name": "UCUM_FORMAT_INSTANCE"}, {"original_string": "private static final double SECONDS_IN_HOUR = 3600d;", "modifier": "private static final", "type": "double", "declarator": "SECONDS_IN_HOUR = 3600d", "var_name": "SECONDS_IN_HOUR"}, {"original_string": "private static final double METERS_IN_KILOMETER = 1000d;", "modifier": "private static final", "type": "double", "declarator": "METERS_IN_KILOMETER = 1000d", "var_name": "METERS_IN_KILOMETER"}, {"original_string": "private static final double METERS_IN_NAUTICAL_MILE = 1852d;", "modifier": "private static final", "type": "double", "declarator": "METERS_IN_NAUTICAL_MILE = 1852d", "var_name": "METERS_IN_NAUTICAL_MILE"}, {"original_string": "private static final double METERS_PER_SECOND_TO_KNOTS = SECONDS_IN_HOUR\n            / METERS_IN_NAUTICAL_MILE;", "modifier": "private static final", "type": "double", "declarator": "METERS_PER_SECOND_TO_KNOTS = SECONDS_IN_HOUR\n            / METERS_IN_NAUTICAL_MILE", "var_name": "METERS_PER_SECOND_TO_KNOTS"}, {"original_string": "private static final double CENTIMETERS_PER_SECOND_TO_KNOTS = SECONDS_IN_HOUR\n            / (METERS_IN_NAUTICAL_MILE * 100);", "modifier": "private static final", "type": "double", "declarator": "CENTIMETERS_PER_SECOND_TO_KNOTS = SECONDS_IN_HOUR\n            / (METERS_IN_NAUTICAL_MILE * 100)", "var_name": "CENTIMETERS_PER_SECOND_TO_KNOTS"}, {"original_string": "private static final double KILOMETERS_PER_HOUR_TO_KNOTS = METERS_IN_KILOMETER\n            / METERS_IN_NAUTICAL_MILE;", "modifier": "private static final", "type": "double", "declarator": "KILOMETERS_PER_HOUR_TO_KNOTS = METERS_IN_KILOMETER\n            / METERS_IN_NAUTICAL_MILE", "var_name": "KILOMETERS_PER_HOUR_TO_KNOTS"}, {"original_string": "private static final String METER_PER_SECOND = \"m/s\";", "modifier": "private static final", "type": "String", "declarator": "METER_PER_SECOND = \"m/s\"", "var_name": "METER_PER_SECOND"}, {"original_string": "private static final String CENTIMETER_PER_SECOND = \"cm/s\";", "modifier": "private static final", "type": "String", "declarator": "CENTIMETER_PER_SECOND = \"cm/s\"", "var_name": "CENTIMETER_PER_SECOND"}, {"original_string": "private static final String KILOMETER_PER_HOUR = \"km/h\";", "modifier": "private static final", "type": "String", "declarator": "KILOMETER_PER_HOUR = \"km/h\"", "var_name": "KILOMETER_PER_HOUR"}, {"original_string": "private static final String MILE_PER_HOUR = \"mph\";", "modifier": "private static final", "type": "String", "declarator": "MILE_PER_HOUR = \"mph\"", "var_name": "MILE_PER_HOUR"}, {"original_string": "private static final double MILES_PER_HOUR_TO_KNOTS = 0.868976d;", "modifier": "private static final", "type": "double", "declarator": "MILES_PER_HOUR_TO_KNOTS = 0.868976d", "var_name": "MILES_PER_HOUR_TO_KNOTS"}, {"original_string": "private static final String KNOTS = \"knots\";", "modifier": "private static final", "type": "String", "declarator": "KNOTS = \"knots\"", "var_name": "KNOTS"}, {"original_string": "private static final String KTS = \"kts\";", "modifier": "private static final", "type": "String", "declarator": "KTS = \"kts\"", "var_name": "KTS"}, {"original_string": "private static final String KN = NonSI.KNOT.toString();", "modifier": "private static final", "type": "String", "declarator": "KN = NonSI.KNOT.toString()", "var_name": "KN"}], "methods": [{"identifier": "toKnots", "parameters": "(double speed, String uom)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static", "return": "double", "signature": "double toKnots(double speed, String uom)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static double toKnots(double speed, String uom)", "class_method_signature": "SpeedConverter.toKnots(double speed, String uom)", "testcase": false, "constructor": false}], "file": "modules/library/render/src/main/java/org/geotools/renderer/windbarbs/SpeedConverter.java"}, "focal_method": {"identifier": "toKnots", "parameters": "(double speed, String uom)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static", "return": "double", "body": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    static double toKnots(double speed, String uom) {\n        Utilities.ensureNonNull(\"uom\", uom);\n        if (LOGGER.isLoggable(Level.FINE)) {\n            LOGGER.fine(\"Convert speed: \" + speed + \" (\" + uom + \")\");\n        }\n\n        // checks\n        if (Double.isNaN(speed)) {\n            return Double.NaN;\n        }\n        if (Double.isInfinite(speed)) {\n            throw new IllegalArgumentException(\"Provided infinite speed, which is illegal!\");\n        }\n\n        // most common cases first\n        if (uom.equalsIgnoreCase(KNOTS) || uom.equalsIgnoreCase(KTS) || uom.equalsIgnoreCase(KN)) {\n            return speed;\n        }\n        if (uom.equalsIgnoreCase(METER_PER_SECOND)) {\n            return (speed * METERS_PER_SECOND_TO_KNOTS);\n        }\n        if (uom.equalsIgnoreCase(CENTIMETER_PER_SECOND)) {\n            return (speed * CENTIMETERS_PER_SECOND_TO_KNOTS);\n        }\n        if (uom.equalsIgnoreCase(KILOMETER_PER_HOUR)) {\n            return (speed * KILOMETERS_PER_HOUR_TO_KNOTS);\n        }\n        if (uom.equalsIgnoreCase(MILE_PER_HOUR)) {\n            return (speed * MILES_PER_HOUR_TO_KNOTS);\n        }\n\n        // ok let's try harder --> this is going to be slower\n        try {\n            Unit unit = (Unit) SpeedConverter.UCUM_FORMAT_INSTANCE.parseObject(uom);\n            UnitConverter converter = unit.getConverterTo(NonSI.KNOT);\n            return converter.convert(speed);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"The supplied units isn't currently supported:\"\n                    + uom, e);\n        }\n    }", "signature": "double toKnots(double speed, String uom)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static double toKnots(double speed, String uom)", "class_method_signature": "SpeedConverter.toKnots(double speed, String uom)", "testcase": false, "constructor": false, "invocations": ["ensureNonNull", "isLoggable", "fine", "isNaN", "isInfinite", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "parseObject", "getConverterTo", "convert"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}