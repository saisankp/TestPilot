{"test_class": {"identifier": "RunnableContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Consumer<Context> consumer = mock(Consumer.class);", "modifier": "", "type": "Consumer<Context>", "declarator": "consumer = mock(Consumer.class)", "var_name": "consumer"}, {"original_string": "RunnableContext runnable = new RunnableContext(consumer, 1);", "modifier": "", "type": "RunnableContext", "declarator": "runnable = new RunnableContext(consumer, 1)", "var_name": "runnable"}, {"original_string": "Future<String> future = mock(Future.class);", "modifier": "", "type": "Future<String>", "declarator": "future = mock(Future.class)", "var_name": "future"}], "file": "commons/src/test/java/com/karuslabs/commons/util/concurrent/SchedulerTest.java"}, "test_case": {"identifier": "run", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void run() {        \n        runnable.run();\n        verify(consumer).accept(runnable);\n        assertEquals(0, runnable.times());\n        \n        runnable.run();\n        \n        assertEquals(0, runnable.times());\n        verify(future).cancel(false);\n    }", "signature": "void run()", "full_signature": "@Test void run()", "class_method_signature": "RunnableContextTest.run()", "testcase": true, "constructor": false, "invocations": ["run", "accept", "verify", "assertEquals", "times", "run", "assertEquals", "times", "cancel", "verify"]}, "focal_class": {"identifier": "RunnableContext", "superclass": "", "interfaces": "implements Context, Runnable", "fields": [{"original_string": "private final Consumer<Context> task;", "modifier": "private final", "type": "Consumer<Context>", "declarator": "task", "var_name": "task"}, {"original_string": "@Lazy Future<?> future;", "modifier": "@Lazy", "type": "Future<?>", "declarator": "future", "var_name": "future"}, {"original_string": "volatile long times;", "modifier": "volatile", "type": "long", "declarator": "times", "var_name": "times"}], "methods": [{"identifier": "RunnableContext", "parameters": "(Consumer<Context> task, long times)", "modifiers": "", "return": "", "signature": " RunnableContext(Consumer<Context> task, long times)", "full_signature": "  RunnableContext(Consumer<Context> task, long times)", "class_method_signature": "RunnableContext.RunnableContext(Consumer<Context> task, long times)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RunnableContext.run()", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancel()", "full_signature": "@Override public void cancel()", "class_method_signature": "RunnableContext.cancel()", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long times()", "full_signature": "@Override public long times()", "class_method_signature": "RunnableContext.times()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/concurrent/Scheduler.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        if (times == INFINITE || times > 0) {\n            task.accept(this);\n            if (times > 0) {\n                times--;\n            }\n            \n        } else {\n            cancel();\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RunnableContext.run()", "testcase": false, "constructor": false, "invocations": ["accept", "cancel"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}