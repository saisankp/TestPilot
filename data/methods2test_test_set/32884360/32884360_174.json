{"test_class": {"identifier": "BucketSamplerTest", "superclass": "", "interfaces": "", "fields": [], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/store/statistics/histograms/BucketSamplerTest.java"}, "test_case": {"identifier": "testEqualityStdDev", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualityStdDev() {\n        BucketSampler<String> sampler = runSampler(2, \"a a a    b b   c c c c   d d d   e  f f f f f \");\n        assertEquals(\"equality std dev\", 1.41421d, sampler.getEqualsStdDev(), 0.00001d);\n    }", "signature": "void testEqualityStdDev()", "full_signature": "@Test public void testEqualityStdDev()", "class_method_signature": "BucketSamplerTest.testEqualityStdDev()", "testcase": true, "constructor": false, "invocations": ["runSampler", "assertEquals", "getEqualsStdDev"]}, "focal_class": {"identifier": "BucketSampler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int maxSize;", "modifier": "private final", "type": "int", "declarator": "maxSize", "var_name": "maxSize"}, {"original_string": "private final long estimatedInputs;", "modifier": "private final", "type": "long", "declarator": "estimatedInputs", "var_name": "estimatedInputs"}, {"original_string": "private double medianPointDistance;", "modifier": "private", "type": "double", "declarator": "medianPointDistance", "var_name": "medianPointDistance"}, {"original_string": "private StandardDeviation stdDev;", "modifier": "private", "type": "StandardDeviation", "declarator": "stdDev", "var_name": "stdDev"}, {"original_string": "private double nextMedianPoint;", "modifier": "private", "type": "double", "declarator": "nextMedianPoint", "var_name": "nextMedianPoint"}, {"original_string": "private long inputsCount;", "modifier": "private", "type": "long", "declarator": "inputsCount", "var_name": "inputsCount"}, {"original_string": "private long runningLessThans;", "modifier": "private", "type": "long", "declarator": "runningLessThans", "var_name": "runningLessThans"}, {"original_string": "private long runningLessThanDistincts;", "modifier": "private", "type": "long", "declarator": "runningLessThanDistincts", "var_name": "runningLessThanDistincts"}, {"original_string": "private long bucketsSeen;", "modifier": "private", "type": "long", "declarator": "bucketsSeen", "var_name": "bucketsSeen"}, {"original_string": "private long equalsSeen;", "modifier": "private", "type": "long", "declarator": "equalsSeen", "var_name": "equalsSeen"}, {"original_string": "private final List<Bucket<T>> buckets;", "modifier": "private final", "type": "List<Bucket<T>>", "declarator": "buckets", "var_name": "buckets"}], "methods": [{"identifier": "add", "parameters": "(Bucket<T> bucket)", "modifiers": "public", "return": "boolean", "signature": "boolean add(Bucket<T> bucket)", "full_signature": "public boolean add(Bucket<T> bucket)", "class_method_signature": "BucketSampler.add(Bucket<T> bucket)", "testcase": false, "constructor": false}, {"identifier": "appendToResults", "parameters": "(Bucket<T> bucket)", "modifiers": "public", "return": "void", "signature": "void appendToResults(Bucket<T> bucket)", "full_signature": "public void appendToResults(Bucket<T> bucket)", "class_method_signature": "BucketSampler.appendToResults(Bucket<T> bucket)", "testcase": false, "constructor": false}, {"identifier": "buckets", "parameters": "()", "modifiers": "", "return": "List<Bucket<T>>", "signature": "List<Bucket<T>> buckets()", "full_signature": " List<Bucket<T>> buckets()", "class_method_signature": "BucketSampler.buckets()", "testcase": false, "constructor": false}, {"identifier": "getEqualsStdDev", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getEqualsStdDev()", "full_signature": "public double getEqualsStdDev()", "class_method_signature": "BucketSampler.getEqualsStdDev()", "testcase": false, "constructor": false}, {"identifier": "getEqualsMean", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getEqualsMean()", "full_signature": "public double getEqualsMean()", "class_method_signature": "BucketSampler.getEqualsMean()", "testcase": false, "constructor": false}, {"identifier": "BucketSampler", "parameters": "(int bucketCount, long estimatedInputs)", "modifiers": "", "return": "", "signature": " BucketSampler(int bucketCount, long estimatedInputs)", "full_signature": "  BucketSampler(int bucketCount, long estimatedInputs)", "class_method_signature": "BucketSampler.BucketSampler(int bucketCount, long estimatedInputs)", "testcase": false, "constructor": true}, {"identifier": "BucketSampler", "parameters": "(int maxSize, long estimatedInputs, boolean calculateStandardDeviation)", "modifiers": "", "return": "", "signature": " BucketSampler(int maxSize, long estimatedInputs, boolean calculateStandardDeviation)", "full_signature": "  BucketSampler(int maxSize, long estimatedInputs, boolean calculateStandardDeviation)", "class_method_signature": "BucketSampler.BucketSampler(int maxSize, long estimatedInputs, boolean calculateStandardDeviation)", "testcase": false, "constructor": true}, {"identifier": "computeMedianPointBoundaries", "parameters": "(int maxSize)", "modifiers": "private", "return": "void", "signature": "void computeMedianPointBoundaries(int maxSize)", "full_signature": "private void computeMedianPointBoundaries(int maxSize)", "class_method_signature": "BucketSampler.computeMedianPointBoundaries(int maxSize)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/store/statistics/histograms/BucketSampler.java"}, "focal_method": {"identifier": "getEqualsStdDev", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getEqualsStdDev() {\n        if (stdDev == null)\n            throw new IllegalStateException(\"standard deviation not computed\");\n        return stdDev.getResult();\n    }", "signature": "double getEqualsStdDev()", "full_signature": "public double getEqualsStdDev()", "class_method_signature": "BucketSampler.getEqualsStdDev()", "testcase": false, "constructor": false, "invocations": ["getResult"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}