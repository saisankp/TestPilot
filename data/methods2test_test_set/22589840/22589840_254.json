{"test_class": {"identifier": "LecturerMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LecturerMapper lecturerMapperTestObject;", "modifier": "private", "type": "LecturerMapper", "declarator": "lecturerMapperTestObject", "var_name": "lecturerMapperTestObject"}, {"original_string": "private SapOlatUserDao userMappingDaoMock;", "modifier": "private", "type": "SapOlatUserDao", "declarator": "userMappingDaoMock", "var_name": "userMappingDaoMock"}, {"original_string": "private LecturerMappingByPersonalNumber lecturerMappingByPersonalNumberMock;", "modifier": "private", "type": "LecturerMappingByPersonalNumber", "declarator": "lecturerMappingByPersonalNumberMock", "var_name": "lecturerMappingByPersonalNumberMock"}, {"original_string": "private MappingByFirstNameAndLastName mappingByFirstNameAndLastNameMock;", "modifier": "private", "type": "MappingByFirstNameAndLastName", "declarator": "mappingByFirstNameAndLastNameMock", "var_name": "mappingByFirstNameAndLastNameMock"}, {"original_string": "private MappingByEmail mappingByEmailMock;", "modifier": "private", "type": "MappingByEmail", "declarator": "mappingByEmailMock", "var_name": "mappingByEmailMock"}, {"original_string": "private Lecturer lecturerMock;", "modifier": "private", "type": "Lecturer", "declarator": "lecturerMock", "var_name": "lecturerMock"}, {"original_string": "private Identity identityMock;", "modifier": "private", "type": "Identity", "declarator": "identityMock", "var_name": "identityMock"}], "file": "olat7.8/src/test/java/org/olat/lms/core/course/campus/impl/mapper/LecturerMapperTest.java"}, "test_case": {"identifier": "synchronizeStudentMapping_MappingAlreadyExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void synchronizeStudentMapping_MappingAlreadyExist() {\n        when(userMappingDaoMock.existsMappingForSapUserId(lecturerMock.getPersonalNr())).thenReturn(true);\n\n        MappingResult result = lecturerMapperTestObject.synchronizeLecturerMapping(lecturerMock);\n\n        assertEquals(\"\", MappingResult.MAPPING_ALREADY_EXIST, result);\n    }", "signature": "void synchronizeStudentMapping_MappingAlreadyExist()", "full_signature": "@Test public void synchronizeStudentMapping_MappingAlreadyExist()", "class_method_signature": "LecturerMapperTest.synchronizeStudentMapping_MappingAlreadyExist()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "existsMappingForSapUserId", "getPersonalNr", "synchronizeLecturerMapping", "assertEquals"]}, "focal_class": {"identifier": "LecturerMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    LecturerMappingByPersonalNumber mappingByPersonalNumber;", "modifier": "@Autowired", "type": "LecturerMappingByPersonalNumber", "declarator": "mappingByPersonalNumber", "var_name": "mappingByPersonalNumber"}, {"original_string": "@Autowired\n    MappingByFirstNameAndLastName mappingByFirstNameAndLastName;", "modifier": "@Autowired", "type": "MappingByFirstNameAndLastName", "declarator": "mappingByFirstNameAndLastName", "var_name": "mappingByFirstNameAndLastName"}, {"original_string": "@Autowired\n    MappingByEmail mappingByEmail;", "modifier": "@Autowired", "type": "MappingByEmail", "declarator": "mappingByEmail", "var_name": "mappingByEmail"}, {"original_string": "@Autowired\n    SapOlatUserDao userMappingDao;", "modifier": "@Autowired", "type": "SapOlatUserDao", "declarator": "userMappingDao", "var_name": "userMappingDao"}], "methods": [{"identifier": "synchronizeLecturerMapping", "parameters": "(Lecturer lecturer)", "modifiers": "@Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "MappingResult", "signature": "MappingResult synchronizeLecturerMapping(Lecturer lecturer)", "full_signature": "@Transactional(propagation = Propagation.REQUIRES_NEW) public MappingResult synchronizeLecturerMapping(Lecturer lecturer)", "class_method_signature": "LecturerMapper.synchronizeLecturerMapping(Lecturer lecturer)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/core/course/campus/impl/mapper/LecturerMapper.java"}, "focal_method": {"identifier": "synchronizeLecturerMapping", "parameters": "(Lecturer lecturer)", "modifiers": "@Transactional(propagation = Propagation.REQUIRES_NEW) public", "return": "MappingResult", "body": "@Transactional(propagation = Propagation.REQUIRES_NEW)\n    public MappingResult synchronizeLecturerMapping(Lecturer lecturer) {\n        if (!userMappingDao.existsMappingForSapUserId(lecturer.getPersonalNr())) {\n            // first try to map by personal number\n            Identity mappedIdentity = mappingByPersonalNumber.tryToMap(lecturer.getPersonalNr());\n            if (mappedIdentity != null) {\n                userMappingDao.saveMapping(lecturer, mappedIdentity);\n                return MappingResult.NEW_MAPPING_BY_PERSONAL_NR;\n            }\n            // second try to map by Email\n            mappedIdentity = mappingByEmail.tryToMap(lecturer);\n            if (mappedIdentity != null) {\n                userMappingDao.saveMapping(lecturer, mappedIdentity);\n                return MappingResult.NEW_MAPPING_BY_EMAIL;\n            }\n\n            // third try to map by additional personal number\n            if (StringUtils.isNotBlank(lecturer.getAdditionalPersonalNrs())) {\n                List<String> personalNrs = Arrays.asList(lecturer.getAdditionalPersonalNrs().split(\"\\\\s*,\\\\s*\"));\n                for (String personalNr : personalNrs) {\n                    mappedIdentity = mappingByPersonalNumber.tryToMap(Long.valueOf(personalNr));\n                    if (mappedIdentity != null) {\n                        userMappingDao.saveMapping(lecturer, mappedIdentity);\n                        return MappingResult.NEW_MAPPING_BY_ADDITIONAL_PERSONAL_NR;\n                    }\n                }\n            }\n\n            // forth try to map by firstName and lastName\n            mappedIdentity = mappingByFirstNameAndLastName.tryToMap(lecturer.getFirstName(), lecturer.getLastName());\n            if (mappedIdentity != null) {\n                // DO NOT SAVE THIS MAPPING, BECAUSE IT HAS TO BE DONE MANUALLY\n                return MappingResult.COULD_BE_MAPPED_MANUALLY;\n            } else {\n                // log.info(\"Could not map lecturer:\" + lecturer);\n                return MappingResult.COULD_NOT_MAP;\n            }\n        }\n        return MappingResult.MAPPING_ALREADY_EXIST;\n    }", "signature": "MappingResult synchronizeLecturerMapping(Lecturer lecturer)", "full_signature": "@Transactional(propagation = Propagation.REQUIRES_NEW) public MappingResult synchronizeLecturerMapping(Lecturer lecturer)", "class_method_signature": "LecturerMapper.synchronizeLecturerMapping(Lecturer lecturer)", "testcase": false, "constructor": false, "invocations": ["existsMappingForSapUserId", "getPersonalNr", "tryToMap", "getPersonalNr", "saveMapping", "tryToMap", "saveMapping", "isNotBlank", "getAdditionalPersonalNrs", "asList", "split", "getAdditionalPersonalNrs", "tryToMap", "valueOf", "saveMapping", "tryToMap", "getFirstName", "getLastName"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}