{"test_class": {"identifier": "CompilationsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common2/src/test/java/org/glowroot/common2/repo/util/CompilationsTest.java"}, "test_case": {"identifier": "testNonDefaultPackageClassNameParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNonDefaultPackageClassNameParsing() {\n        assertThat(Compilations.getPublicClassName(\"package a.b; public class X {}\"))\n                .isEqualTo(\"a.b.X\");\n        assertThat(Compilations.getPublicClassName(\"  package a.b; public class X {}\"))\n                .isEqualTo(\"a.b.X\");\n        assertThat(Compilations.getPublicClassName(\"\\n  package a.b; \\n public class X {}\"))\n                .isEqualTo(\"a.b.X\");\n    }", "signature": "void testNonDefaultPackageClassNameParsing()", "full_signature": "@Test public void testNonDefaultPackageClassNameParsing()", "class_method_signature": "CompilationsTest.testNonDefaultPackageClassNameParsing()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getPublicClassName", "isEqualTo", "assertThat", "getPublicClassName", "isEqualTo", "assertThat", "getPublicClassName"]}, "focal_class": {"identifier": "Compilations", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern CLASS_NAME_PATTERN =\n            Pattern.compile(\"\\\\bpublic\\\\s+class\\\\s+([^\\\\s{]+)[\\\\s{]\");", "modifier": "private static final", "type": "Pattern", "declarator": "CLASS_NAME_PATTERN =\n            Pattern.compile(\"\\\\bpublic\\\\s+class\\\\s+([^\\\\s{]+)[\\\\s{]\")", "var_name": "CLASS_NAME_PATTERN"}, {"original_string": "private static final Pattern PACKAGE_NAME_PATTERN =\n            Pattern.compile(\"^\\\\s*\\\\bpackage\\\\s+([^;]+)\\\\s*;\");", "modifier": "private static final", "type": "Pattern", "declarator": "PACKAGE_NAME_PATTERN =\n            Pattern.compile(\"^\\\\s*\\\\bpackage\\\\s+([^;]+)\\\\s*;\")", "var_name": "PACKAGE_NAME_PATTERN"}], "methods": [{"identifier": "Compilations", "parameters": "()", "modifiers": "private", "return": "", "signature": " Compilations()", "full_signature": "private  Compilations()", "class_method_signature": "Compilations.Compilations()", "testcase": false, "constructor": true}, {"identifier": "compile", "parameters": "(String source)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> compile(String source)", "full_signature": "public static Class<?> compile(String source)", "class_method_signature": "Compilations.compile(String source)", "testcase": false, "constructor": false}, {"identifier": "getCompilationClassPath", "parameters": "()", "modifiers": "private static", "return": "List<File>", "signature": "List<File> getCompilationClassPath()", "full_signature": "private static List<File> getCompilationClassPath()", "class_method_signature": "Compilations.getCompilationClassPath()", "testcase": false, "constructor": false}, {"identifier": "getJarFile", "parameters": "(String className)", "modifiers": "private static", "return": "File", "signature": "File getJarFile(String className)", "full_signature": "private static File getJarFile(String className)", "class_method_signature": "Compilations.getJarFile(String className)", "testcase": false, "constructor": false}, {"identifier": "getPublicClassName", "parameters": "(String source)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String getPublicClassName(String source)", "full_signature": "@VisibleForTesting static String getPublicClassName(String source)", "class_method_signature": "Compilations.getPublicClassName(String source)", "testcase": false, "constructor": false}, {"identifier": "getPackagePrefix", "parameters": "(String source)", "modifiers": "private static", "return": "String", "signature": "String getPackagePrefix(String source)", "full_signature": "private static String getPackagePrefix(String source)", "class_method_signature": "Compilations.getPackagePrefix(String source)", "testcase": false, "constructor": false}], "file": "common2/src/main/java/org/glowroot/common2/repo/util/Compilations.java"}, "focal_method": {"identifier": "getPublicClassName", "parameters": "(String source)", "modifiers": "@VisibleForTesting static", "return": "String", "body": "@VisibleForTesting\n    static String getPublicClassName(String source) {\n        Matcher matcher = CLASS_NAME_PATTERN.matcher(source);\n        if (matcher.find()) {\n            return getPackagePrefix(source) + matcher.group(1);\n        } else {\n            return \"\";\n        }\n    }", "signature": "String getPublicClassName(String source)", "full_signature": "@VisibleForTesting static String getPublicClassName(String source)", "class_method_signature": "Compilations.getPublicClassName(String source)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "getPackagePrefix", "group"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}