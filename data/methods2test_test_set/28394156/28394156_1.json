{"test_class": {"identifier": "SimpleExecutionRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ExecutionService executionService;", "modifier": "@Mock\n    private", "type": "ExecutionService", "declarator": "executionService", "var_name": "executionService"}, {"original_string": "@Mock\n    private OutboundBuffer outBuffer;", "modifier": "@Mock\n    private", "type": "OutboundBuffer", "declarator": "outBuffer", "var_name": "outBuffer"}, {"original_string": "@Mock\n    private InBuffer inBuffer;", "modifier": "@Mock\n    private", "type": "InBuffer", "declarator": "inBuffer", "var_name": "inBuffer"}, {"original_string": "@Mock\n    private ExecutionMessageConverter converter;", "modifier": "@Mock\n    private", "type": "ExecutionMessageConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "@Mock\n    private EndExecutionCallback endExecutionCallback;", "modifier": "@Mock\n    private", "type": "EndExecutionCallback", "declarator": "endExecutionCallback", "var_name": "endExecutionCallback"}, {"original_string": "@Mock\n    private ExecutionMessage executionMessage;", "modifier": "@Mock\n    private", "type": "ExecutionMessage", "declarator": "executionMessage", "var_name": "executionMessage"}, {"original_string": "@Mock\n    private AtomicBoolean recoveryFlag;", "modifier": "@Mock\n    private", "type": "AtomicBoolean", "declarator": "recoveryFlag", "var_name": "recoveryFlag"}, {"original_string": "@Mock\n    private QueueStateIdGeneratorService queueStateIdGenerator;", "modifier": "@Mock\n    private", "type": "QueueStateIdGeneratorService", "declarator": "queueStateIdGenerator", "var_name": "queueStateIdGenerator"}, {"original_string": "@Mock\n    private WorkerConfigurationService workerConfigurationService;", "modifier": "@Mock\n    private", "type": "WorkerConfigurationService", "declarator": "workerConfigurationService", "var_name": "workerConfigurationService"}, {"original_string": "@Mock\n    private SuspendedExecutionService suspendedExecutionService;", "modifier": "@Mock\n    private", "type": "SuspendedExecutionService", "declarator": "suspendedExecutionService", "var_name": "suspendedExecutionService"}, {"original_string": "@Mock\n    private WorkerManager workerManager;", "modifier": "@Mock\n    private", "type": "WorkerManager", "declarator": "workerManager", "var_name": "workerManager"}, {"original_string": "@Mock\n    private ExecutionQueueService executionQueueService;", "modifier": "@Mock\n    private", "type": "ExecutionQueueService", "declarator": "executionQueueService", "var_name": "executionQueueService"}], "file": "worker/worker-manager/score-worker-manager-impl/src/test/java/io/cloudslang/worker/management/services/SimpleExecutionRunnableTest.java"}, "test_case": {"identifier": "testRun", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRun() throws Exception {\n        Execution execution = new Execution();\n        when(converter.extractExecution(any(Payload.class))).thenReturn(execution);\n\n        final List<ExecutionMessage> buffer = new ArrayList<>();\n\n        doAnswer(invocation -> {\n            for (Object message : invocation.getArguments()) {\n                buffer.add((ExecutionMessage) message);\n            }\n            return null;\n        }).when(outBuffer).put(any(ExecutionMessage[].class));\n\n        when(workerManager.isFromCurrentThreadPool(anyString())).thenReturn(true);\n\n        SimpleExecutionRunnable simpleExecutionRunnable = new SimpleExecutionRunnable(executionService, outBuffer,\n                inBuffer, converter, endExecutionCallback, queueStateIdGenerator, \"stam\", workerConfigurationService,\n                workerManager);\n\n        ExecutionMessage executionMessage = new ExecutionMessage();\n        executionMessage.setMsgId(String.valueOf(100L));\n        simpleExecutionRunnable.setExecutionMessage(executionMessage);\n        simpleExecutionRunnable.run();\n        verify(executionService, times(1)).execute(execution);\n\n        Assert.assertFalse(buffer.isEmpty());\n        assertEquals(ExecStatus.FINISHED, buffer.get(0).getStatus());\n\n        assertEquals(ExecStatus.FINISHED, buffer.get(0).getStatus());\n        assertEquals(0, this.executionMessage.getMsgSeqId());\n    }", "signature": "void testRun()", "full_signature": "@Test public void testRun()", "class_method_signature": "SimpleExecutionRunnableTest.testRun()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "extractExecution", "any", "put", "when", "doAnswer", "getArguments", "add", "any", "thenReturn", "when", "isFromCurrentThreadPool", "anyString", "setMsgId", "valueOf", "setExecutionMessage", "run", "execute", "verify", "times", "assertFalse", "isEmpty", "assertEquals", "getStatus", "get", "assertEquals", "getStatus", "get", "assertEquals", "getMsgSeqId"]}, "focal_class": {"identifier": "SimpleExecutionRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(SimpleExecutionRunnable.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(SimpleExecutionRunnable.class)", "var_name": "logger"}, {"original_string": "private static final long WORKER_EXECUTION_INTERVAL = Integer.getInteger(\"worker.executionIntervalSeconds\", 60) * 1_000L;", "modifier": "private static final", "type": "long", "declarator": "WORKER_EXECUTION_INTERVAL = Integer.getInteger(\"worker.executionIntervalSeconds\", 60) * 1_000L", "var_name": "WORKER_EXECUTION_INTERVAL"}, {"original_string": "private final ExecutionService executionService;", "modifier": "private final", "type": "ExecutionService", "declarator": "executionService", "var_name": "executionService"}, {"original_string": "private final OutboundBuffer outBuffer;", "modifier": "private final", "type": "OutboundBuffer", "declarator": "outBuffer", "var_name": "outBuffer"}, {"original_string": "private final InBuffer inBuffer;", "modifier": "private final", "type": "InBuffer", "declarator": "inBuffer", "var_name": "inBuffer"}, {"original_string": "private final ExecutionMessageConverter converter;", "modifier": "private final", "type": "ExecutionMessageConverter", "declarator": "converter", "var_name": "converter"}, {"original_string": "private final EndExecutionCallback endExecutionCallback;", "modifier": "private final", "type": "EndExecutionCallback", "declarator": "endExecutionCallback", "var_name": "endExecutionCallback"}, {"original_string": "private ExecutionMessage executionMessage;", "modifier": "private", "type": "ExecutionMessage", "declarator": "executionMessage", "var_name": "executionMessage"}, {"original_string": "private final QueueStateIdGeneratorService queueStateIdGeneratorService;", "modifier": "private final", "type": "QueueStateIdGeneratorService", "declarator": "queueStateIdGeneratorService", "var_name": "queueStateIdGeneratorService"}, {"original_string": "private final String workerUUID;", "modifier": "private final", "type": "String", "declarator": "workerUUID", "var_name": "workerUUID"}, {"original_string": "private final WorkerConfigurationService workerConfigurationService;", "modifier": "private final", "type": "WorkerConfigurationService", "declarator": "workerConfigurationService", "var_name": "workerConfigurationService"}, {"original_string": "private final boolean isRecoveryDisabled;", "modifier": "private final", "type": "boolean", "declarator": "isRecoveryDisabled", "var_name": "isRecoveryDisabled"}, {"original_string": "private final WorkerManager workerManager;", "modifier": "private final", "type": "WorkerManager", "declarator": "workerManager", "var_name": "workerManager"}], "methods": [{"identifier": "SimpleExecutionRunnable", "parameters": "(ExecutionService executionService,\n                                   OutboundBuffer outBuffer,\n                                   InBuffer inBuffer,\n                                   ExecutionMessageConverter converter,\n                                   EndExecutionCallback endExecutionCallback,\n                                   QueueStateIdGeneratorService queueStateIdGeneratorService,\n                                   String workerUUID,\n                                   WorkerConfigurationService workerConfigurationService,\n                                   WorkerManager workerManager)", "modifiers": "public", "return": "", "signature": " SimpleExecutionRunnable(ExecutionService executionService,\n                                   OutboundBuffer outBuffer,\n                                   InBuffer inBuffer,\n                                   ExecutionMessageConverter converter,\n                                   EndExecutionCallback endExecutionCallback,\n                                   QueueStateIdGeneratorService queueStateIdGeneratorService,\n                                   String workerUUID,\n                                   WorkerConfigurationService workerConfigurationService,\n                                   WorkerManager workerManager)", "full_signature": "public  SimpleExecutionRunnable(ExecutionService executionService,\n                                   OutboundBuffer outBuffer,\n                                   InBuffer inBuffer,\n                                   ExecutionMessageConverter converter,\n                                   EndExecutionCallback endExecutionCallback,\n                                   QueueStateIdGeneratorService queueStateIdGeneratorService,\n                                   String workerUUID,\n                                   WorkerConfigurationService workerConfigurationService,\n                                   WorkerManager workerManager)", "class_method_signature": "SimpleExecutionRunnable.SimpleExecutionRunnable(ExecutionService executionService,\n                                   OutboundBuffer outBuffer,\n                                   InBuffer inBuffer,\n                                   ExecutionMessageConverter converter,\n                                   EndExecutionCallback endExecutionCallback,\n                                   QueueStateIdGeneratorService queueStateIdGeneratorService,\n                                   String workerUUID,\n                                   WorkerConfigurationService workerConfigurationService,\n                                   WorkerManager workerManager)", "testcase": false, "constructor": true}, {"identifier": "getExecutionMessage", "parameters": "()", "modifiers": "public", "return": "ExecutionMessage", "signature": "ExecutionMessage getExecutionMessage()", "full_signature": "public ExecutionMessage getExecutionMessage()", "class_method_signature": "SimpleExecutionRunnable.getExecutionMessage()", "testcase": false, "constructor": false}, {"identifier": "setExecutionMessage", "parameters": "(ExecutionMessage executionMessage)", "modifiers": "public", "return": "void", "signature": "void setExecutionMessage(ExecutionMessage executionMessage)", "full_signature": "public void setExecutionMessage(ExecutionMessage executionMessage)", "class_method_signature": "SimpleExecutionRunnable.setExecutionMessage(ExecutionMessage executionMessage)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "SimpleExecutionRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "executeRegularStep", "parameters": "(Execution execution)", "modifiers": "private", "return": "void", "signature": "void executeRegularStep(Execution execution)", "full_signature": "private void executeRegularStep(Execution execution)", "class_method_signature": "SimpleExecutionRunnable.executeRegularStep(Execution execution)", "testcase": false, "constructor": false}, {"identifier": "shouldStop", "parameters": "(Execution nextStepExecution, long startTime)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldStop(Execution nextStepExecution, long startTime)", "full_signature": "private boolean shouldStop(Execution nextStepExecution, long startTime)", "class_method_signature": "SimpleExecutionRunnable.shouldStop(Execution nextStepExecution, long startTime)", "testcase": false, "constructor": false}, {"identifier": "isMiRunning", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean isMiRunning(Execution nextStepExecution)", "full_signature": "private boolean isMiRunning(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.isMiRunning(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "preconditionNotFulfilled", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean preconditionNotFulfilled(Execution nextStepExecution)", "full_signature": "private boolean preconditionNotFulfilled(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.preconditionNotFulfilled(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "isExecutionPaused", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean isExecutionPaused(Execution nextStepExecution)", "full_signature": "private boolean isExecutionPaused(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.isExecutionPaused(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "isRecoveryCheckpoint", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean isRecoveryCheckpoint(Execution nextStepExecution)", "full_signature": "private boolean isRecoveryCheckpoint(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.isRecoveryCheckpoint(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "isPersistStep", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean isPersistStep(Execution nextStepExecution)", "full_signature": "private boolean isPersistStep(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.isPersistStep(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "isSplitStep", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean isSplitStep(Execution nextStepExecution)", "full_signature": "private boolean isSplitStep(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.isSplitStep(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "shouldChangeWorkerGroup", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldChangeWorkerGroup(Execution nextStepExecution)", "full_signature": "private boolean shouldChangeWorkerGroup(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.shouldChangeWorkerGroup(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "isStickyToThisWorker", "parameters": "(String groupName)", "modifiers": "private", "return": "boolean", "signature": "boolean isStickyToThisWorker(String groupName)", "full_signature": "private boolean isStickyToThisWorker(String groupName)", "class_method_signature": "SimpleExecutionRunnable.isStickyToThisWorker(String groupName)", "testcase": false, "constructor": false}, {"identifier": "isOldThread", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isOldThread()", "full_signature": "private boolean isOldThread()", "class_method_signature": "SimpleExecutionRunnable.isOldThread()", "testcase": false, "constructor": false}, {"identifier": "isExecutionCancelled", "parameters": "(Execution execution)", "modifiers": "private", "return": "boolean", "signature": "boolean isExecutionCancelled(Execution execution)", "full_signature": "private boolean isExecutionCancelled(Execution execution)", "class_method_signature": "SimpleExecutionRunnable.isExecutionCancelled(Execution execution)", "testcase": false, "constructor": false}, {"identifier": "isCancelledExecution", "parameters": "(Execution execution)", "modifiers": "private", "return": "boolean", "signature": "boolean isCancelledExecution(Execution execution)", "full_signature": "private boolean isCancelledExecution(Execution execution)", "class_method_signature": "SimpleExecutionRunnable.isCancelledExecution(Execution execution)", "testcase": false, "constructor": false}, {"identifier": "isRunningTooLong", "parameters": "(long startTime, Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean isRunningTooLong(long startTime, Execution nextStepExecution)", "full_signature": "private boolean isRunningTooLong(long startTime, Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.isRunningTooLong(long startTime, Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "createTerminatedExecutionMessage", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "ExecutionMessage", "signature": "ExecutionMessage createTerminatedExecutionMessage(Execution nextStepExecution)", "full_signature": "private ExecutionMessage createTerminatedExecutionMessage(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.createTerminatedExecutionMessage(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "createPendingExecutionMessage", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "ExecutionMessage", "signature": "ExecutionMessage createPendingExecutionMessage(Execution nextStepExecution)", "full_signature": "private ExecutionMessage createPendingExecutionMessage(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.createPendingExecutionMessage(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "createInProgressExecutionMessage", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "ExecutionMessage", "signature": "ExecutionMessage createInProgressExecutionMessage(Execution nextStepExecution)", "full_signature": "private ExecutionMessage createInProgressExecutionMessage(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.createInProgressExecutionMessage(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "executeSplitStep", "parameters": "(Execution execution)", "modifiers": "private", "return": "void", "signature": "void executeSplitStep(Execution execution)", "full_signature": "private void executeSplitStep(Execution execution)", "class_method_signature": "SimpleExecutionRunnable.executeSplitStep(Execution execution)", "testcase": false, "constructor": false}, {"identifier": "executeParallelAndNonBlocking", "parameters": "(Execution execution)", "modifiers": "private", "return": "void", "signature": "void executeParallelAndNonBlocking(Execution execution)", "full_signature": "private void executeParallelAndNonBlocking(Execution execution)", "class_method_signature": "SimpleExecutionRunnable.executeParallelAndNonBlocking(Execution execution)", "testcase": false, "constructor": false}, {"identifier": "executeMiStep", "parameters": "(Execution execution)", "modifiers": "private", "return": "void", "signature": "void executeMiStep(Execution execution)", "full_signature": "private void executeMiStep(Execution execution)", "class_method_signature": "SimpleExecutionRunnable.executeMiStep(Execution execution)", "testcase": false, "constructor": false}, {"identifier": "isExecutionTerminating", "parameters": "(Execution nextStepExecution)", "modifiers": "private", "return": "boolean", "signature": "boolean isExecutionTerminating(Execution nextStepExecution)", "full_signature": "private boolean isExecutionTerminating(Execution nextStepExecution)", "class_method_signature": "SimpleExecutionRunnable.isExecutionTerminating(Execution nextStepExecution)", "testcase": false, "constructor": false}, {"identifier": "getSplitId", "parameters": "(List<Execution> newExecutions)", "modifiers": "private", "return": "String", "signature": "String getSplitId(List<Execution> newExecutions)", "full_signature": "private String getSplitId(List<Execution> newExecutions)", "class_method_signature": "SimpleExecutionRunnable.getSplitId(List<Execution> newExecutions)", "testcase": false, "constructor": false}], "file": "worker/worker-manager/score-worker-manager-impl/src/main/java/io/cloudslang/worker/management/services/SimpleExecutionRunnable.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        String executionId = executionMessage.getMsgId();\n\n        // We are renaming the thread for logging/monitoring purposes\n        String origThreadName = currentThread().getName();\n        currentThread().setName(origThreadName + \"_\" + executionId);\n        Execution execution = null;\n        try {\n            // If we got here because of te shortcut we have the object\n            // If we got here form DB - we need to extract the object from bytes\n            execution = (executionMessage.getExecutionObject() != null) ? executionMessage.getExecutionObject()\n                    : converter.extractExecution(executionMessage.getPayload());\n\n            // Check which logic to trigger - regular execution or split\n            if (executionService.isSplitStep(execution)) {\n                executeSplitStep(execution);\n            } else {\n                executeRegularStep(execution);\n            }\n        } catch (InterruptedException interruptedException) {\n\n            // Not old thread and interrupted by cancel\n            if (workerManager.isFromCurrentThreadPool(currentThread().getName()) && isExecutionCancelled(execution)) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Execution is interrupted...\");\n                }\n            } else {\n                logger.error(\"Execution thread is interrupted!!! Exiting...\", interruptedException);\n            }\n        } catch (Exception ex) {\n            logger.error(\"Error during execution!!!\", ex);\n            // Set status FAILED\n            executionMessage.setStatus(ExecStatus.FAILED);\n            executionMessage\n                    .incMsgSeqId();    // New status must be with incremented msg_seq_id - otherwise will be recovered and we will get duplications\n            // Send only one execution message back - the new one was not created because of error\n            try {\n                if (executionMessage.getPayload() == null) {\n                    // This is done since we could get here from InBuffer shortcut - so no payload... and for FAILED message we need to set the payload\n                    executionMessage.setPayload(converter.createPayload(execution));\n                }\n                outBuffer.put(executionMessage);\n            } catch (InterruptedException e) {\n                logger.warn(\"Thread was interrupted! Exiting the execution... \", ex);\n            }\n        } finally {\n            endExecutionCallback.endExecution(parseLong(executionId));\n            // Rename the thread back\n            currentThread().setName(origThreadName);\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "SimpleExecutionRunnable.run()", "testcase": false, "constructor": false, "invocations": ["getMsgId", "getName", "currentThread", "setName", "currentThread", "getExecutionObject", "getExecutionObject", "extractExecution", "getPayload", "isSplitStep", "executeSplitStep", "executeRegularStep", "isFromCurrentThreadPool", "getName", "currentThread", "isExecutionCancelled", "isDebugEnabled", "debug", "error", "error", "setStatus", "incMsgSeqId", "getPayload", "setPayload", "createPayload", "put", "warn", "endExecution", "parseLong", "setName", "currentThread"]}, "repository": {"repo_id": 28394156, "url": "https://github.com/CloudSlang/score", "stars": 76, "created": "12/23/2014 11:19:26 AM +00:00", "updates": "2020-01-27T14:36:32+00:00", "fork": "False", "license": "licensed"}}