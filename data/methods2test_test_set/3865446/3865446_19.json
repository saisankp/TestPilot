{"test_class": {"identifier": "SimpleBinaryRepresentationTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected SimpleBinaryRepresentation representation;", "modifier": "protected", "type": "SimpleBinaryRepresentation", "declarator": "representation", "var_name": "representation"}, {"original_string": "protected SimpleBinaryGenomeDescriptor descriptor;", "modifier": "protected", "type": "SimpleBinaryGenomeDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/SimpleBinaryRepresentationTest.java"}, "test_case": {"identifier": "testIntegerToBinary1", "parameters": "()", "modifiers": "@Test // tests conversion of integer values into binary strings public", "return": "void", "body": "@Test\n    // tests conversion of integer values into binary strings\n    public void testIntegerToBinary1(){\n        this.representation.genome = new boolean[MathUtils.sumSizes(this.descriptor.variablesLengths)];\n        this.representation.integerToBinary(new double[] {23, 2, 31, 500}); // 31 tests whether 5.th bit does not overflow and overrides preceding zero\n        boolean[] expected = new boolean[]{\n                false, true, false, true, true, true,\n                true, false,\n                true, true, true, true,\n                true, true, true, true, true, false, true, false, false\n        };\n        assertEquals(MathUtils.sumSizes(this.descriptor.variablesLengths), this.representation.genome.length);\n        assertEquals(this.representation.genome.length, expected.length);\n        for (int i = 0; i < expected.length; i++){\n            assertEquals(expected[i], this.representation.genome[i]);\n        }\n    }", "signature": "void testIntegerToBinary1()", "full_signature": "@Test // tests conversion of integer values into binary strings public void testIntegerToBinary1()", "class_method_signature": "SimpleBinaryRepresentationTest.testIntegerToBinary1()", "testcase": true, "constructor": false, "invocations": ["sumSizes", "integerToBinary", "assertEquals", "sumSizes", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SimpleBinaryRepresentation", "superclass": "", "interfaces": "implements GenotypeRepresentation", "fields": [{"original_string": "protected boolean[] genome = new boolean[0];", "modifier": "protected", "type": "boolean[]", "declarator": "genome = new boolean[0]", "var_name": "genome"}, {"original_string": "protected SimpleBinaryGenomeDescriptor descriptor;", "modifier": "protected", "type": "SimpleBinaryGenomeDescriptor", "declarator": "descriptor", "var_name": "descriptor"}], "methods": [{"identifier": "SimpleBinaryRepresentation", "parameters": "(SimpleBinaryGenomeDescriptor descriptor)", "modifiers": "public", "return": "", "signature": " SimpleBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "full_signature": "public  SimpleBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "class_method_signature": "SimpleBinaryRepresentation.SimpleBinaryRepresentation(SimpleBinaryGenomeDescriptor descriptor)", "testcase": false, "constructor": true}, {"identifier": "SimpleBinaryRepresentation", "parameters": "(SimpleBinaryRepresentation second)", "modifiers": "public", "return": "", "signature": " SimpleBinaryRepresentation(SimpleBinaryRepresentation second)", "full_signature": "public  SimpleBinaryRepresentation(SimpleBinaryRepresentation second)", "class_method_signature": "SimpleBinaryRepresentation.SimpleBinaryRepresentation(SimpleBinaryRepresentation second)", "testcase": false, "constructor": true}, {"identifier": "getTotalLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalLength()", "full_signature": "public int getTotalLength()", "class_method_signature": "SimpleBinaryRepresentation.getTotalLength()", "testcase": false, "constructor": false}, {"identifier": "getValueLengths", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getValueLengths()", "full_signature": "public int[] getValueLengths()", "class_method_signature": "SimpleBinaryRepresentation.getValueLengths()", "testcase": false, "constructor": false}, {"identifier": "getGeneAt", "parameters": "(int idx)", "modifiers": "public", "return": "boolean", "signature": "boolean getGeneAt(int idx)", "full_signature": "public boolean getGeneAt(int idx)", "class_method_signature": "SimpleBinaryRepresentation.getGeneAt(int idx)", "testcase": false, "constructor": false}, {"identifier": "setGeneAt", "parameters": "(int idx, boolean value)", "modifiers": "public", "return": "void", "signature": "void setGeneAt(int idx, boolean value)", "full_signature": "public void setGeneAt(int idx, boolean value)", "class_method_signature": "SimpleBinaryRepresentation.setGeneAt(int idx, boolean value)", "testcase": false, "constructor": false}, {"identifier": "invertGeneAt", "parameters": "(int idx)", "modifiers": "public", "return": "void", "signature": "void invertGeneAt(int idx)", "full_signature": "public void invertGeneAt(int idx)", "class_method_signature": "SimpleBinaryRepresentation.invertGeneAt(int idx)", "testcase": false, "constructor": false}, {"identifier": "swapGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void swapGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void swapGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "SimpleBinaryRepresentation.swapGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "swapGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void swapGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void swapGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "SimpleBinaryRepresentation.swapGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "swapGenesInternal", "parameters": "(GenotypeRepresentation secondRepresentation, int position)", "modifiers": "protected", "return": "void", "signature": "void swapGenesInternal(GenotypeRepresentation secondRepresentation, int position)", "full_signature": "protected void swapGenesInternal(GenotypeRepresentation secondRepresentation, int position)", "class_method_signature": "SimpleBinaryRepresentation.swapGenesInternal(GenotypeRepresentation secondRepresentation, int position)", "testcase": false, "constructor": false}, {"identifier": "receiveGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void receiveGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void receiveGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "SimpleBinaryRepresentation.receiveGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "receiveGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void receiveGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void receiveGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "SimpleBinaryRepresentation.receiveGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "andGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void andGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void andGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "SimpleBinaryRepresentation.andGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "andGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void andGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void andGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "SimpleBinaryRepresentation.andGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "orGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void orGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void orGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "SimpleBinaryRepresentation.orGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "orGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void orGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void orGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "SimpleBinaryRepresentation.orGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "xorGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int[] positions)", "modifiers": "public", "return": "void", "signature": "void xorGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "full_signature": "public void xorGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "class_method_signature": "SimpleBinaryRepresentation.xorGenes(GenotypeRepresentation secondRepresentation, int[] positions)", "testcase": false, "constructor": false}, {"identifier": "xorGenes", "parameters": "(GenotypeRepresentation secondRepresentation, int from, int to)", "modifiers": "public", "return": "void", "signature": "void xorGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "full_signature": "public void xorGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "class_method_signature": "SimpleBinaryRepresentation.xorGenes(GenotypeRepresentation secondRepresentation, int from, int to)", "testcase": false, "constructor": false}, {"identifier": "getDoubleValue", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getDoubleValue()", "full_signature": "public double[] getDoubleValue()", "class_method_signature": "SimpleBinaryRepresentation.getDoubleValue()", "testcase": false, "constructor": false}, {"identifier": "setDoubleValue", "parameters": "(double[] phenotypeValue)", "modifiers": "public", "return": "void", "signature": "void setDoubleValue(double[] phenotypeValue)", "full_signature": "public void setDoubleValue(double[] phenotypeValue)", "class_method_signature": "SimpleBinaryRepresentation.setDoubleValue(double[] phenotypeValue)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "Representation", "signature": "Representation copy()", "full_signature": "public Representation copy()", "class_method_signature": "SimpleBinaryRepresentation.copy()", "testcase": false, "constructor": false}, {"identifier": "binaryToInteger", "parameters": "()", "modifiers": "protected", "return": "double[]", "signature": "double[] binaryToInteger()", "full_signature": "protected double[] binaryToInteger()", "class_method_signature": "SimpleBinaryRepresentation.binaryToInteger()", "testcase": false, "constructor": false}, {"identifier": "integerToBinary", "parameters": "(double[] intValues)", "modifiers": "protected", "return": "void", "signature": "void integerToBinary(double[] intValues)", "full_signature": "protected void integerToBinary(double[] intValues)", "class_method_signature": "SimpleBinaryRepresentation.integerToBinary(double[] intValues)", "testcase": false, "constructor": false}, {"identifier": "decodeGenomeToBinary", "parameters": "()", "modifiers": "protected", "return": "boolean[]", "signature": "boolean[] decodeGenomeToBinary()", "full_signature": "protected boolean[] decodeGenomeToBinary()", "class_method_signature": "SimpleBinaryRepresentation.decodeGenomeToBinary()", "testcase": false, "constructor": false}, {"identifier": "encodeBinaryGenome", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void encodeBinaryGenome()", "full_signature": "protected void encodeBinaryGenome()", "class_method_signature": "SimpleBinaryRepresentation.encodeBinaryGenome()", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/representations/genotype/SimpleBinaryRepresentation.java"}, "focal_method": {"identifier": "integerToBinary", "parameters": "(double[] intValues)", "modifiers": "protected", "return": "void", "body": "protected void integerToBinary(double[] intValues){\n        int maxIndex = -1;\n        int minIndex;\n        double currentValue;\n        double newValue;\n        // for every variable...\n        for (int variableIdx = 0; variableIdx < intValues.length; variableIdx++){\n            currentValue = intValues[variableIdx];\n            minIndex = maxIndex; // previous maxIndex is current minIndex\n            maxIndex += this.descriptor.getVariablesLengths()[variableIdx]; // move maxIndex forward\n            // ... divide its value and place it to appropriate place\n            for (int genomeIdx = maxIndex; genomeIdx > minIndex; genomeIdx--){\n                newValue = Math.floor(currentValue / 2.0);\n                this.genome[genomeIdx] = ( (currentValue - newValue * 2.0) > 0.5);\n                currentValue = newValue;\n            }\n        }\n        encodeBinaryGenome();\n    }", "signature": "void integerToBinary(double[] intValues)", "full_signature": "protected void integerToBinary(double[] intValues)", "class_method_signature": "SimpleBinaryRepresentation.integerToBinary(double[] intValues)", "testcase": false, "constructor": false, "invocations": ["getVariablesLengths", "floor", "encodeBinaryGenome"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}