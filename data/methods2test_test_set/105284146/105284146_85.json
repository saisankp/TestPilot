{"test_class": {"identifier": "SecurityAnalysisToolTest", "superclass": "extends AbstractToolTest", "interfaces": "", "fields": [{"original_string": "private SecurityAnalysisTool tool;", "modifier": "private", "type": "SecurityAnalysisTool", "declarator": "tool", "var_name": "tool"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/tools/SecurityAnalysisToolTest.java"}, "test_case": {"identifier": "buildPreprocessedInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void buildPreprocessedInput() {\n        SecurityAnalysisExecutionInput executionInput = new SecurityAnalysisExecutionInput()\n                .setNetworkVariant(mock(Network.class), \"\")\n                .setParameters(new SecurityAnalysisParameters());\n\n        SecurityAnalysisPreprocessor preprocessor = mock(SecurityAnalysisPreprocessor.class);\n        SecurityAnalysisPreprocessorFactory factory = mock(SecurityAnalysisPreprocessorFactory.class);\n        when(factory.newPreprocessor(any())).thenReturn(preprocessor);\n\n        SecurityAnalysisInput input = SecurityAnalysisTool.buildPreprocessedInput(executionInput, LimitViolationFilter::new, factory);\n\n        assertSame(executionInput.getParameters(), input.getParameters());\n        assertSame(executionInput.getNetworkVariant(), input.getNetworkVariant());\n\n        verify(factory, times(0)).newPreprocessor(any());\n\n        executionInput.setContingenciesSource(ByteSource.empty());\n        SecurityAnalysisTool.buildPreprocessedInput(executionInput, LimitViolationFilter::new, factory);\n\n        verify(factory, times(1)).newPreprocessor(any());\n        verify(preprocessor, times(1)).preprocess(any());\n    }", "signature": "void buildPreprocessedInput()", "full_signature": "@Test public void buildPreprocessedInput()", "class_method_signature": "SecurityAnalysisToolTest.buildPreprocessedInput()", "testcase": true, "constructor": false, "invocations": ["setParameters", "setNetworkVariant", "mock", "mock", "mock", "thenReturn", "when", "newPreprocessor", "any", "buildPreprocessedInput", "assertSame", "getParameters", "getParameters", "assertSame", "getNetworkVariant", "getNetworkVariant", "newPreprocessor", "verify", "times", "any", "setContingenciesSource", "empty", "buildPreprocessedInput", "newPreprocessor", "verify", "times", "any", "preprocess", "verify", "times", "any"]}, "focal_class": {"identifier": "SecurityAnalysisTool", "superclass": "", "interfaces": "implements Tool", "fields": [], "methods": [{"identifier": "getCommand", "parameters": "()", "modifiers": "@Override public", "return": "Command", "signature": "Command getCommand()", "full_signature": "@Override public Command getCommand()", "class_method_signature": "SecurityAnalysisTool.getCommand()", "testcase": false, "constructor": false}, {"identifier": "updateInput", "parameters": "(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "modifiers": "static", "return": "void", "signature": "void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "full_signature": "static void updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "class_method_signature": "SecurityAnalysisTool.updateInput(ToolOptions options, SecurityAnalysisExecutionInput inputs)", "testcase": false, "constructor": false}, {"identifier": "configBasedInputBuildStrategy", "parameters": "(PlatformConfig config)", "modifiers": "private static", "return": "SecurityAnalysisInputBuildStrategy", "signature": "SecurityAnalysisInputBuildStrategy configBasedInputBuildStrategy(PlatformConfig config)", "full_signature": "private static SecurityAnalysisInputBuildStrategy configBasedInputBuildStrategy(PlatformConfig config)", "class_method_signature": "SecurityAnalysisTool.configBasedInputBuildStrategy(PlatformConfig config)", "testcase": false, "constructor": false}, {"identifier": "preprocessedInputBuildStrategy", "parameters": "(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "modifiers": "private static", "return": "SecurityAnalysisInputBuildStrategy", "signature": "SecurityAnalysisInputBuildStrategy preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "full_signature": "private static SecurityAnalysisInputBuildStrategy preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "class_method_signature": "SecurityAnalysisTool.preprocessedInputBuildStrategy(Supplier<LimitViolationFilter> filterInitializer,\n                                                                             SecurityAnalysisPreprocessorFactory preprocessorFactory)", "testcase": false, "constructor": false}, {"identifier": "buildPreprocessedInput", "parameters": "(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "modifiers": "static", "return": "SecurityAnalysisInput", "signature": "SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "full_signature": "static SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "class_method_signature": "SecurityAnalysisTool.buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "testcase": false, "constructor": false}, {"identifier": "createBuilder", "parameters": "(PlatformConfig platformConfig)", "modifiers": "private static", "return": "SecurityAnalysisExecutionBuilder", "signature": "SecurityAnalysisExecutionBuilder createBuilder(PlatformConfig platformConfig)", "full_signature": "private static SecurityAnalysisExecutionBuilder createBuilder(PlatformConfig platformConfig)", "class_method_signature": "SecurityAnalysisTool.createBuilder(PlatformConfig platformConfig)", "testcase": false, "constructor": false}, {"identifier": "buildExecution", "parameters": "(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "modifiers": "private static", "return": "SecurityAnalysisExecution", "signature": "SecurityAnalysisExecution buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "full_signature": "private static SecurityAnalysisExecution buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "class_method_signature": "SecurityAnalysisTool.buildExecution(ToolOptions options, SecurityAnalysisExecutionBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "runSecurityAnalysisWithLog", "parameters": "(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "modifiers": "private static", "return": "SecurityAnalysisResult", "signature": "SecurityAnalysisResult runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "full_signature": "private static SecurityAnalysisResult runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "class_method_signature": "SecurityAnalysisTool.runSecurityAnalysisWithLog(ComputationManager computationManager,\n                                                             SecurityAnalysisExecution execution,\n                                                             SecurityAnalysisExecutionInput input,\n                                                             Path logPath)", "testcase": false, "constructor": false}, {"identifier": "readNetwork", "parameters": "(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "modifiers": "static", "return": "Network", "signature": "Network readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "full_signature": "static Network readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "class_method_signature": "SecurityAnalysisTool.readNetwork(CommandLine line, ToolRunningContext context, ImportersLoader importersLoader)", "testcase": false, "constructor": false}, {"identifier": "uncheckedWriteBytes", "parameters": "(byte[] bytes, Path path)", "modifiers": "private static", "return": "void", "signature": "void uncheckedWriteBytes(byte[] bytes, Path path)", "full_signature": "private static void uncheckedWriteBytes(byte[] bytes, Path path)", "class_method_signature": "SecurityAnalysisTool.uncheckedWriteBytes(byte[] bytes, Path path)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context)", "modifiers": "@Override public", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context)", "full_signature": "@Override public void run(CommandLine line, ToolRunningContext context)", "class_method_signature": "SecurityAnalysisTool.run(CommandLine line, ToolRunningContext context)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "modifiers": "", "return": "void", "signature": "void run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "full_signature": " void run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "class_method_signature": "SecurityAnalysisTool.run(CommandLine line, ToolRunningContext context,\n             SecurityAnalysisExecutionBuilder executionBuilder,\n             Supplier<SecurityAnalysisParameters> parametersLoader,\n             ImportersLoader importersLoader,\n             Supplier<TableFormatterConfig> tableFormatterConfigLoader)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/tools/SecurityAnalysisTool.java"}, "focal_method": {"identifier": "buildPreprocessedInput", "parameters": "(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "modifiers": "static", "return": "SecurityAnalysisInput", "body": "static SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory) {\n\n        SecurityAnalysisInput input = new SecurityAnalysisInput(executionInput.getNetworkVariant())\n                .setParameters(executionInput.getParameters())\n                .setFilter(filterInitializer.get());\n\n        executionInput.getResultExtensions().stream()\n                .map(SecurityAnalysisInterceptors::createInterceptor)\n                .forEach(input::addInterceptor);\n\n        if (!executionInput.getViolationTypes().isEmpty()) {\n            input.getFilter().setViolationTypes(ImmutableSet.copyOf(executionInput.getViolationTypes()));\n        }\n\n        executionInput.getContingenciesSource()\n                .map(preprocessorFactory::newPreprocessor)\n                .ifPresent(p -> p.preprocess(input));\n\n        return input;\n    }", "signature": "SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "full_signature": "static SecurityAnalysisInput buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "class_method_signature": "SecurityAnalysisTool.buildPreprocessedInput(SecurityAnalysisExecutionInput executionInput,\n                                                        Supplier<LimitViolationFilter> filterInitializer,\n                                                        SecurityAnalysisPreprocessorFactory preprocessorFactory)", "testcase": false, "constructor": false, "invocations": ["setFilter", "setParameters", "getNetworkVariant", "getParameters", "get", "forEach", "map", "stream", "getResultExtensions", "isEmpty", "getViolationTypes", "setViolationTypes", "getFilter", "copyOf", "getViolationTypes", "ifPresent", "map", "getContingenciesSource", "preprocess"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}