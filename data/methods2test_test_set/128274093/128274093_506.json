{"test_class": {"identifier": "FlowableFlatMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java"}, "test_case": {"identifier": "testFlatMapSelectorMaxConcurrent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatMapSelectorMaxConcurrent() {\n        final int m = 4;\n        final AtomicInteger subscriptionCount = new AtomicInteger();\n        Flowable<Integer> source = Flowable.range(1, 10)\n            .flatMap(new Function<Integer, Flowable<Integer>>() {\n            @Override\n            public Flowable<Integer> apply(Integer t1) {\n                return composer(Flowable.range(t1 * 10, 2), subscriptionCount, m)\n                        .subscribeOn(Schedulers.computation());\n            }\n        }, new BiFunction<Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer t1, Integer t2) {\n                return t1 * 1000 + t2;\n            }\n        }, m);\n\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        source.subscribe(ts);\n\n        ts.awaitTerminalEvent();\n        ts.assertNoErrors();\n        Set<Integer> expected = new HashSet<Integer>(Arrays.asList(\n                1010, 1011, 2020, 2021, 3030, 3031, 4040, 4041, 5050, 5051,\n                6060, 6061, 7070, 7071, 8080, 8081, 9090, 9091, 10100, 10101\n        ));\n        Assert.assertEquals(expected.size(), ts.valueCount());\n        System.out.println(\"--> testFlatMapSelectorMaxConcurrent: \" + ts.values());\n        Assert.assertTrue(expected.containsAll(ts.values()));\n    }", "signature": "void testFlatMapSelectorMaxConcurrent()", "full_signature": "@Test public void testFlatMapSelectorMaxConcurrent()", "class_method_signature": "FlowableFlatMapTest.testFlatMapSelectorMaxConcurrent()", "testcase": true, "constructor": false, "invocations": ["flatMap", "range", "subscribeOn", "composer", "range", "computation", "subscribe", "awaitTerminalEvent", "assertNoErrors", "asList", "assertEquals", "size", "valueCount", "println", "values", "assertTrue", "containsAll", "values"]}, "focal_class": {"identifier": "FlowableFlatMap", "superclass": "extends AbstractFlowableWithUpstream<T, U>", "interfaces": "", "fields": [{"original_string": "final Function<? super T, ? extends Publisher<? extends U>> mapper;", "modifier": "final", "type": "Function<? super T, ? extends Publisher<? extends U>>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "final boolean delayErrors;", "modifier": "final", "type": "boolean", "declarator": "delayErrors", "var_name": "delayErrors"}, {"original_string": "final int maxConcurrency;", "modifier": "final", "type": "int", "declarator": "maxConcurrency", "var_name": "maxConcurrency"}, {"original_string": "final int bufferSize;", "modifier": "final", "type": "int", "declarator": "bufferSize", "var_name": "bufferSize"}], "methods": [{"identifier": "FlowableFlatMap", "parameters": "(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public", "return": "", "signature": " FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public  FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.FlowableFlatMap(Flowable<T> source,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Subscriber<? super U> s)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Subscriber<? super U> s)", "full_signature": "@Override protected void subscribeActual(Subscriber<? super U> s)", "class_method_signature": "FlowableFlatMap.subscribeActual(Subscriber<? super U> s)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/flowable/FlowableFlatMap.java"}, "focal_method": {"identifier": "subscribe", "parameters": "(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "modifiers": "public static", "return": "FlowableSubscriber<T>", "body": "public static <T, U> FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize) {\n        return new MergeSubscriber<T, U>(s, mapper, delayErrors, maxConcurrency, bufferSize);\n    }", "signature": "FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "full_signature": "public static FlowableSubscriber<T> subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "class_method_signature": "FlowableFlatMap.subscribe(Subscriber<? super U> s,\n            Function<? super T, ? extends Publisher<? extends U>> mapper,\n            boolean delayErrors, int maxConcurrency, int bufferSize)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}