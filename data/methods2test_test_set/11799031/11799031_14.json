{"test_class": {"identifier": "NetCDFUtilityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(NetCDFUtilityTest.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "log = org.slf4j.LoggerFactory.getLogger(NetCDFUtilityTest.class)", "var_name": "log"}], "file": "gdp-data-access/src/test/java/gov/usgs/cida/gdp/dataaccess/helper/NetCDFUtilityTest.java"}, "test_case": {"identifier": "testCIDAThredds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCIDAThredds() {\n\t\tURI catalogURI = null;\n\t\ttry {\n\t\t\tcatalogURI = NetCDFUtilityTest.class.getResource(\"internal_cida.xml\").toURI();\n\t\t} catch (URISyntaxException ex) {\n\t\t\tfail(ex.getMessage());\n\t\t}\n\t\tInvCatalogFactory factory = new InvCatalogFactory(\"default\", true);\n\t\tInvCatalog catalog = factory.readXML(catalogURI);\n\n\t\tStringBuilder errorBuilder = new StringBuilder();\n\t\tif (!catalog.check(errorBuilder)) {\n\t\t\tfail(errorBuilder.toString());\n\t\t}\n\n\t\tList<InvAccess> openDAPHandlesFromCatalog = NetCDFUtility.getDatasetHandles(catalog, ServiceType.OPENDAP);\n\t\tassertEquals(12, openDAPHandlesFromCatalog.size());\n\n\t\tassertEquals(\"CIDA Development and Testing USGS Internal THREDDS Server.\", catalog.getName());\n\t\tassertEquals(\"1.0.1\", catalog.getVersion());\n\t\tassertTrue(catalog.getProperties().isEmpty());\n\t\tList<InvService> invServiceList = catalog.getServices();\n\t\tassertFalse(invServiceList.isEmpty());\n\n\t\tInvDataset invDataSet = catalog.findDatasetByID(\"gmo/GMO_w_meta.ncml\");\n\t\tDataFormatType dft = invDataSet.getDataFormatType();\n\t\tassertEquals(\"NetCDF-Grid\", dft.toString());\n\n\t\tString catalogURL = invDataSet.getCatalogUrl();\n\t\tassertTrue(catalogURL.contains(\"file:/\"));\n\t\tassertTrue(catalogURL.contains(\"gdp-data-access/target/test-classes/gov/usgs/cida/gdp/dataaccess/helper/internal_cida.xml#gmo/GMO_w_meta.ncml\"));\n\n\t\tString auth = invDataSet.getAuthority();\n\t\tassertNull(auth);\n\n\t\tassertFalse(invDataSet.hasNestedDatasets());\n\n\t\tList<DateType> dateList = invDataSet.getDates();\n\t\tassertTrue(dateList.isEmpty());\n\n\t\tassertTrue(invDataSet.hasAccess());\n\n\t\tInvAccess invAccess = invDataSet.getAccess(ServiceType.DODS);\n\t\tassertNull(invAccess);\n\n\t\tinvAccess = invDataSet.getAccess(ServiceType.HTTPServer);\n\t\tassertNotNull(invAccess);\n\t\tassertTrue(Double.isNaN(invAccess.getDataSize()));\n\t\tassertEquals(\"gmo/GMO_w_meta.ncml\", invAccess.getUrlPath());\n\t\tassertFalse(invAccess.hasDataSize());\n\t\tassertTrue(invAccess.getUnresolvedUrlName().contains(\"/thredds/\"));\n\t\tassertTrue(invAccess.getUnresolvedUrlName().contains(\"/gmo/GMO_w_meta.ncml\"));\n\n\t\tList<InvAccess> invList = invDataSet.getAccess();\n\t\tassertFalse(invList.isEmpty());\n\t\tassertEquals(invList.size(), 4);\n\t}", "signature": "void testCIDAThredds()", "full_signature": "@Test public void testCIDAThredds()", "class_method_signature": "NetCDFUtilityTest.testCIDAThredds()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "fail", "getMessage", "readXML", "check", "fail", "toString", "getDatasetHandles", "assertEquals", "size", "assertEquals", "getName", "assertEquals", "getVersion", "assertTrue", "isEmpty", "getProperties", "getServices", "assertFalse", "isEmpty", "findDatasetByID", "getDataFormatType", "assertEquals", "toString", "getCatalogUrl", "assertTrue", "contains", "assertTrue", "contains", "getAuthority", "assertNull", "assertFalse", "hasNestedDatasets", "getDates", "assertTrue", "isEmpty", "assertTrue", "hasAccess", "getAccess", "assertNull", "getAccess", "assertNotNull", "assertTrue", "isNaN", "getDataSize", "assertEquals", "getUrlPath", "assertFalse", "hasDataSize", "assertTrue", "contains", "getUnresolvedUrlName", "assertTrue", "contains", "getUnresolvedUrlName", "getAccess", "assertFalse", "isEmpty", "assertEquals", "size"]}, "focal_class": {"identifier": "NetCDFUtility", "superclass": "", "interfaces": "", "fields": [{"original_string": "static org.slf4j.Logger log = LoggerFactory.getLogger(NetCDFUtility.class);", "modifier": "static", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(NetCDFUtility.class)", "var_name": "log"}], "methods": [{"identifier": "NetCDFUtility", "parameters": "()", "modifiers": "private", "return": "", "signature": " NetCDFUtility()", "full_signature": "private  NetCDFUtility()", "class_method_signature": "NetCDFUtility.NetCDFUtility()", "testcase": false, "constructor": true}, {"identifier": "getDatasetHandles", "parameters": "(InvCatalog catalog, ServiceType serviceType)", "modifiers": "public static", "return": "List<InvAccess>", "signature": "List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "full_signature": "public static List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "class_method_signature": "NetCDFUtility.getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "testcase": false, "constructor": false}, {"identifier": "getDatasetHandles", "parameters": "(InvDataset dataset, ServiceType serviceType)", "modifiers": "public static", "return": "List<InvAccess>", "signature": "List<InvAccess> getDatasetHandles(InvDataset dataset, ServiceType serviceType)", "full_signature": "public static List<InvAccess> getDatasetHandles(InvDataset dataset, ServiceType serviceType)", "class_method_signature": "NetCDFUtility.getDatasetHandles(InvDataset dataset, ServiceType serviceType)", "testcase": false, "constructor": false}, {"identifier": "getDataVariableNames", "parameters": "(String url)", "modifiers": "public static", "return": "List<VariableSimpleIF>", "signature": "List<VariableSimpleIF> getDataVariableNames(String url)", "full_signature": "public static List<VariableSimpleIF> getDataVariableNames(String url)", "class_method_signature": "NetCDFUtility.getDataVariableNames(String url)", "testcase": false, "constructor": false}, {"identifier": "getDataVariableNames", "parameters": "(FeatureDataset dataset)", "modifiers": "public static", "return": "List<VariableSimpleIF>", "signature": "List<VariableSimpleIF> getDataVariableNames(FeatureDataset dataset)", "full_signature": "public static List<VariableSimpleIF> getDataVariableNames(FeatureDataset dataset)", "class_method_signature": "NetCDFUtility.getDataVariableNames(FeatureDataset dataset)", "testcase": false, "constructor": false}, {"identifier": "getDataTypeCollection", "parameters": "(String datasetUrl)", "modifiers": "public static", "return": "DataTypeCollection", "signature": "DataTypeCollection getDataTypeCollection(String datasetUrl)", "full_signature": "public static DataTypeCollection getDataTypeCollection(String datasetUrl)", "class_method_signature": "NetCDFUtility.getDataTypeCollection(String datasetUrl)", "testcase": false, "constructor": false}, {"identifier": "hasTimeCoordinate", "parameters": "(String location)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasTimeCoordinate(String location)", "full_signature": "public static boolean hasTimeCoordinate(String location)", "class_method_signature": "NetCDFUtility.hasTimeCoordinate(String location)", "testcase": false, "constructor": false}, {"identifier": "hasTimeCoordinate", "parameters": "(FeatureDataset featureDataset)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasTimeCoordinate(FeatureDataset featureDataset)", "full_signature": "public static boolean hasTimeCoordinate(FeatureDataset featureDataset)", "class_method_signature": "NetCDFUtility.hasTimeCoordinate(FeatureDataset featureDataset)", "testcase": false, "constructor": false}, {"identifier": "getDateRange", "parameters": "(String threddsURL, String variableName)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getDateRange(String threddsURL, String variableName)", "full_signature": "public static List<String> getDateRange(String threddsURL, String variableName)", "class_method_signature": "NetCDFUtility.getDateRange(String threddsURL, String variableName)", "testcase": false, "constructor": false}, {"identifier": "getTimeBean", "parameters": "(String location, String gridSelection)", "modifiers": "public static", "return": "Time", "signature": "Time getTimeBean(String location, String gridSelection)", "full_signature": "public static Time getTimeBean(String location, String gridSelection)", "class_method_signature": "NetCDFUtility.getTimeBean(String location, String gridSelection)", "testcase": false, "constructor": false}], "file": "gdp-data-access/src/main/java/gov/usgs/cida/gdp/dataaccess/helper/NetCDFUtility.java"}, "focal_method": {"identifier": "getDatasetHandles", "parameters": "(InvCatalog catalog, ServiceType serviceType)", "modifiers": "public static", "return": "List<InvAccess>", "body": "public static List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType) {\n        if (catalog == null || serviceType == null) {\n            return Collections.emptyList();     // Template parameter inferred from return type.\n        }\n\n        List<InvAccess> handles = new LinkedList<InvAccess>();\n        for (InvDataset dataset : catalog.getDatasets()) {\n            handles.addAll(getDatasetHandles(dataset, serviceType));\n        }\n\n        return handles;\n    }", "signature": "List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "full_signature": "public static List<InvAccess> getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "class_method_signature": "NetCDFUtility.getDatasetHandles(InvCatalog catalog, ServiceType serviceType)", "testcase": false, "constructor": false, "invocations": ["emptyList", "getDatasets", "addAll", "getDatasetHandles"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}