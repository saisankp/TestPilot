{"test_class": {"identifier": "CallgraphTest", "superclass": "", "interfaces": "", "fields": [], "file": "lang-java-reach/src/test/java/org/eclipse/steady/cg/CallgraphTest.java"}, "test_case": {"identifier": "callgraphTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void callgraphTest() {\n    // Manually build a call graph: 10 nodes and 14 edges\n    Graph<org.eclipse.steady.shared.json.model.ConstructId> graph = SlowSparseNumberedGraph.make();\n    ConstructId a = JavaId.toSharedType(JavaId.parseMethodQName(\"test.a()\"));\n    graph.addNode(a);\n    ConstructId b = JavaId.toSharedType(JavaId.parseMethodQName(\"test.b()\"));\n    graph.addNode(b);\n    ConstructId c = JavaId.toSharedType(JavaId.parseMethodQName(\"test.c()\"));\n    graph.addNode(c);\n    ConstructId d = JavaId.toSharedType(JavaId.parseMethodQName(\"test.d()\"));\n    graph.addNode(d);\n    ConstructId e = JavaId.toSharedType(JavaId.parseMethodQName(\"test.e()\"));\n    graph.addNode(e);\n    ConstructId f = JavaId.toSharedType(JavaId.parseMethodQName(\"test.f()\"));\n    graph.addNode(f);\n    ConstructId g = JavaId.toSharedType(JavaId.parseMethodQName(\"test.g()\"));\n    graph.addNode(g);\n    ConstructId h = JavaId.toSharedType(JavaId.parseMethodQName(\"test.h()\"));\n    graph.addNode(h);\n    ConstructId i = JavaId.toSharedType(JavaId.parseMethodQName(\"test.i()\"));\n    graph.addNode(i);\n    ConstructId j = JavaId.toSharedType(JavaId.parseMethodQName(\"test.j()\"));\n    graph.addNode(j);\n    graph.addEdge(a, b);\n    graph.addEdge(a, c);\n    graph.addEdge(b, d);\n    graph.addEdge(b, e);\n    graph.addEdge(b, f);\n    graph.addEdge(c, f);\n    graph.addEdge(c, g);\n    graph.addEdge(e, h);\n    graph.addEdge(f, i);\n    graph.addEdge(h, i);\n    graph.addEdge(h, j);\n    graph.addEdge(i, j);\n    graph.addEdge(g, j);\n    graph.addEdge(i, e);\n\n    Callgraph cg = new Callgraph(graph);\n\n    // source = a; target = j;\n    // Test 1: compute the distance\n    Map<ConstructId, Integer> distance = cg.getDist(j);\n    int dist = distance.get(a);\n    assertEquals(dist, 3);\n\n    // Test 2: compute the shortest path\n    Map<ConstructId, LinkedList<Integer>> shortestPaths = cg.getShortestPath(j, null);\n    LinkedList<ConstructId> expectedShortestPath = new LinkedList<ConstructId>();\n    expectedShortestPath.add(c);\n    expectedShortestPath.add(g);\n    expectedShortestPath.add(j);\n    LinkedList<Integer> spath = shortestPaths.get(a);\n    LinkedList<ConstructId> computedShortestPath = new LinkedList<ConstructId>();\n    if (spath != null) {\n      for (int n = (spath.size() - 1); n >= 0; n--) {\n        computedShortestPath.add(cg.getConstructForId(spath.get(n)));\n      }\n    }\n    assertEquals(computedShortestPath, expectedShortestPath);\n\n    // Test 3: compute all paths: DepthFirstGetPaths\n    AbstractGetPaths getpaths = new DepthFirstGetPaths(cg.getGraph(), cg.getNodeId());\n    HashSet<LinkedList<ConstructId>> paths = getpaths.getAllPaths(a, j);\n    for (LinkedList<ConstructId> p : paths) {\n      for (ConstructId cid : p) System.out.print(cid.getQname() + \"\t\t\");\n      System.out.println();\n    }\n    assertEquals(paths.size(), 7);\n\n    // Test 4: compute all paths: Get all paths from pruned graph\n    getpaths = new PrunedGraphGetPaths(cg.getGraph(), cg.getNodeId());\n    paths = getpaths.getAllPaths(a, j);\n    for (LinkedList<ConstructId> p : paths) {\n      for (ConstructId cid : p) System.out.print(cid.getQname() + \"\t\t\");\n      System.out.println();\n    }\n    assertEquals(paths.size(), 7);\n  }", "signature": "void callgraphTest()", "full_signature": "@Test public void callgraphTest()", "class_method_signature": "CallgraphTest.callgraphTest()", "testcase": true, "constructor": false, "invocations": ["make", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "toSharedType", "parseMethodQName", "addNode", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "addEdge", "getDist", "get", "assertEquals", "getShortestPath", "add", "add", "add", "get", "size", "add", "getConstructForId", "get", "assertEquals", "getGraph", "getNodeId", "getAllPaths", "print", "getQname", "println", "assertEquals", "size", "getGraph", "getNodeId", "getAllPaths", "print", "getQname", "println", "assertEquals", "size"]}, "focal_class": {"identifier": "Callgraph", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private int nodeCount = 0;", "modifier": "private", "type": "int", "declarator": "nodeCount = 0", "var_name": "nodeCount"}, {"original_string": "private int edgeCount = 0;", "modifier": "private", "type": "int", "declarator": "edgeCount = 0", "var_name": "edgeCount"}, {"original_string": "private Graph<Integer> idgraph = SlowSparseNumberedGraph.make();", "modifier": "private", "type": "Graph<Integer>", "declarator": "idgraph = SlowSparseNumberedGraph.make()", "var_name": "idgraph"}, {"original_string": "private final HashMap<org.eclipse.steady.shared.json.model.ConstructId, Integer> nodeMap =\n      new HashMap<org.eclipse.steady.shared.json.model.ConstructId, Integer>();", "modifier": "private final", "type": "HashMap<org.eclipse.steady.shared.json.model.ConstructId, Integer>", "declarator": "nodeMap =\n      new HashMap<org.eclipse.steady.shared.json.model.ConstructId, Integer>()", "var_name": "nodeMap"}, {"original_string": "private final HashMap<Integer, NodeMetaInformation> nodeInfoMap =\n      new HashMap<Integer, NodeMetaInformation>();", "modifier": "private final", "type": "HashMap<Integer, NodeMetaInformation>", "declarator": "nodeInfoMap =\n      new HashMap<Integer, NodeMetaInformation>()", "var_name": "nodeInfoMap"}, {"original_string": "private final HashMap<URI, JarAnalyzer> jarAnalyzersCache = new HashMap<URI, JarAnalyzer>();", "modifier": "private final", "type": "HashMap<URI, JarAnalyzer>", "declarator": "jarAnalyzersCache = new HashMap<URI, JarAnalyzer>()", "var_name": "jarAnalyzersCache"}, {"original_string": "private final Map<JavaId, URL> cachedJarUrls = new HashMap<JavaId, URL>();", "modifier": "private final", "type": "Map<JavaId, URL>", "declarator": "cachedJarUrls = new HashMap<JavaId, URL>()", "var_name": "cachedJarUrls"}, {"original_string": "private final Set<org.eclipse.steady.shared.json.model.ConstructId> constructsWithoutJarUrl =\n      new HashSet<org.eclipse.steady.shared.json.model.ConstructId>();", "modifier": "private final", "type": "Set<org.eclipse.steady.shared.json.model.ConstructId>", "declarator": "constructsWithoutJarUrl =\n      new HashSet<org.eclipse.steady.shared.json.model.ConstructId>()", "var_name": "constructsWithoutJarUrl"}, {"original_string": "private final ArrayList<org.eclipse.steady.shared.json.model.ConstructId> nodeId =\n      new ArrayList<org.eclipse.steady.shared.json.model.ConstructId>();", "modifier": "private final", "type": "ArrayList<org.eclipse.steady.shared.json.model.ConstructId>", "declarator": "nodeId =\n      new ArrayList<org.eclipse.steady.shared.json.model.ConstructId>()", "var_name": "nodeId"}], "methods": [{"identifier": "getGraph", "parameters": "()", "modifiers": "public", "return": "Graph<Integer>", "signature": "Graph<Integer> getGraph()", "full_signature": "public Graph<Integer> getGraph()", "class_method_signature": "Callgraph.getGraph()", "testcase": false, "constructor": false}, {"identifier": "getIdForConstruct", "parameters": "(org.eclipse.steady.shared.json.model.ConstructId _c)", "modifiers": "public", "return": "int", "signature": "int getIdForConstruct(org.eclipse.steady.shared.json.model.ConstructId _c)", "full_signature": "public int getIdForConstruct(org.eclipse.steady.shared.json.model.ConstructId _c)", "class_method_signature": "Callgraph.getIdForConstruct(org.eclipse.steady.shared.json.model.ConstructId _c)", "testcase": false, "constructor": false}, {"identifier": "existsInCallgraph", "parameters": "(org.eclipse.steady.shared.json.model.ConstructId _c)", "modifiers": "public", "return": "boolean", "signature": "boolean existsInCallgraph(org.eclipse.steady.shared.json.model.ConstructId _c)", "full_signature": "public boolean existsInCallgraph(org.eclipse.steady.shared.json.model.ConstructId _c)", "class_method_signature": "Callgraph.existsInCallgraph(org.eclipse.steady.shared.json.model.ConstructId _c)", "testcase": false, "constructor": false}, {"identifier": "getNodeId", "parameters": "()", "modifiers": "public", "return": "ArrayList<org.eclipse.steady.shared.json.model.ConstructId>", "signature": "ArrayList<org.eclipse.steady.shared.json.model.ConstructId> getNodeId()", "full_signature": "public ArrayList<org.eclipse.steady.shared.json.model.ConstructId> getNodeId()", "class_method_signature": "Callgraph.getNodeId()", "testcase": false, "constructor": false}, {"identifier": "getConstructForId", "parameters": "(int _id)", "modifiers": "public", "return": "org.eclipse.steady.shared.json.model.ConstructId", "signature": "org.eclipse.steady.shared.json.model.ConstructId getConstructForId(int _id)", "full_signature": "public org.eclipse.steady.shared.json.model.ConstructId getConstructForId(int _id)", "class_method_signature": "Callgraph.getConstructForId(int _id)", "testcase": false, "constructor": false}, {"identifier": "Callgraph", "parameters": "(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "modifiers": "public", "return": "", "signature": " Callgraph(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "full_signature": "public  Callgraph(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "class_method_signature": "Callgraph.Callgraph(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "testcase": false, "constructor": true}, {"identifier": "createNodeMetaInformation", "parameters": "(\n      org.eclipse.steady.shared.json.model.ConstructId target, Integer target_id)", "modifiers": "private", "return": "NodeMetaInformation", "signature": "NodeMetaInformation createNodeMetaInformation(\n      org.eclipse.steady.shared.json.model.ConstructId target, Integer target_id)", "full_signature": "private NodeMetaInformation createNodeMetaInformation(\n      org.eclipse.steady.shared.json.model.ConstructId target, Integer target_id)", "class_method_signature": "Callgraph.createNodeMetaInformation(\n      org.eclipse.steady.shared.json.model.ConstructId target, Integer target_id)", "testcase": false, "constructor": false}, {"identifier": "getInformationForConstructId", "parameters": "(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "modifiers": "public", "return": "NodeMetaInformation", "signature": "NodeMetaInformation getInformationForConstructId(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "full_signature": "public NodeMetaInformation getInformationForConstructId(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "class_method_signature": "Callgraph.getInformationForConstructId(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "testcase": false, "constructor": false}, {"identifier": "getConstructsWithoutJarUrl", "parameters": "()", "modifiers": "public", "return": "Set<org.eclipse.steady.shared.json.model.ConstructId>", "signature": "Set<org.eclipse.steady.shared.json.model.ConstructId> getConstructsWithoutJarUrl()", "full_signature": "public Set<org.eclipse.steady.shared.json.model.ConstructId> getConstructsWithoutJarUrl()", "class_method_signature": "Callgraph.getConstructsWithoutJarUrl()", "testcase": false, "constructor": false}, {"identifier": "getInformationForId", "parameters": "(Integer id)", "modifiers": "public", "return": "NodeMetaInformation", "signature": "NodeMetaInformation getInformationForId(Integer id)", "full_signature": "public NodeMetaInformation getInformationForId(Integer id)", "class_method_signature": "Callgraph.getInformationForId(Integer id)", "testcase": false, "constructor": false}, {"identifier": "getNodeCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNodeCount()", "full_signature": "public int getNodeCount()", "class_method_signature": "Callgraph.getNodeCount()", "testcase": false, "constructor": false}, {"identifier": "getEdgeCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getEdgeCount()", "full_signature": "public int getEdgeCount()", "class_method_signature": "Callgraph.getEdgeCount()", "testcase": false, "constructor": false}, {"identifier": "getDist", "parameters": "(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt)", "modifiers": "public", "return": "Map<org.eclipse.steady.shared.json.model.ConstructId, Integer>", "signature": "Map<org.eclipse.steady.shared.json.model.ConstructId, Integer> getDist(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt)", "full_signature": "public Map<org.eclipse.steady.shared.json.model.ConstructId, Integer> getDist(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt)", "class_method_signature": "Callgraph.getDist(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt)", "testcase": false, "constructor": false}, {"identifier": "computeDist", "parameters": "(Integer _tgt, Map<Integer, Integer> _dist)", "modifiers": "private", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> computeDist(Integer _tgt, Map<Integer, Integer> _dist)", "full_signature": "private Map<Integer, Integer> computeDist(Integer _tgt, Map<Integer, Integer> _dist)", "class_method_signature": "Callgraph.computeDist(Integer _tgt, Map<Integer, Integer> _dist)", "testcase": false, "constructor": false}, {"identifier": "getShortestPath", "parameters": "(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt,\n      final Set<org.eclipse.steady.shared.json.model.ConstructId> _stop_if_path_found)", "modifiers": "public", "return": "Map<org.eclipse.steady.shared.json.model.ConstructId, LinkedList<Integer>>", "signature": "Map<org.eclipse.steady.shared.json.model.ConstructId, LinkedList<Integer>> getShortestPath(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt,\n      final Set<org.eclipse.steady.shared.json.model.ConstructId> _stop_if_path_found)", "full_signature": "public Map<org.eclipse.steady.shared.json.model.ConstructId, LinkedList<Integer>> getShortestPath(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt,\n      final Set<org.eclipse.steady.shared.json.model.ConstructId> _stop_if_path_found)", "class_method_signature": "Callgraph.getShortestPath(\n      org.eclipse.steady.shared.json.model.ConstructId _tgt,\n      final Set<org.eclipse.steady.shared.json.model.ConstructId> _stop_if_path_found)", "testcase": false, "constructor": false}, {"identifier": "computeShortestPath", "parameters": "(\n      Integer _tgt, Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _stop_nodes)", "modifiers": "private", "return": "Map<Integer, LinkedList<Integer>>", "signature": "Map<Integer, LinkedList<Integer>> computeShortestPath(\n      Integer _tgt, Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _stop_nodes)", "full_signature": "private Map<Integer, LinkedList<Integer>> computeShortestPath(\n      Integer _tgt, Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _stop_nodes)", "class_method_signature": "Callgraph.computeShortestPath(\n      Integer _tgt, Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _stop_nodes)", "testcase": false, "constructor": false}, {"identifier": "existsPath", "parameters": "(\n      Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _nodes)", "modifiers": "private final", "return": "boolean", "signature": "boolean existsPath(\n      Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _nodes)", "full_signature": "private final boolean existsPath(\n      Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _nodes)", "class_method_signature": "Callgraph.existsPath(\n      Map<Integer, LinkedList<Integer>> _paths, final Set<Integer> _nodes)", "testcase": false, "constructor": false}, {"identifier": "collectArchiveInformation", "parameters": "(\n      org.eclipse.steady.shared.json.model.ConstructId tgt_node)", "modifiers": "private synchronized", "return": "URL", "signature": "URL collectArchiveInformation(\n      org.eclipse.steady.shared.json.model.ConstructId tgt_node)", "full_signature": "private synchronized URL collectArchiveInformation(\n      org.eclipse.steady.shared.json.model.ConstructId tgt_node)", "class_method_signature": "Callgraph.collectArchiveInformation(\n      org.eclipse.steady.shared.json.model.ConstructId tgt_node)", "testcase": false, "constructor": false}, {"identifier": "parseNonStaticInnerClassConstruct", "parameters": "(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "modifiers": "private", "return": "org.eclipse.steady.shared.json.model.ConstructId", "signature": "org.eclipse.steady.shared.json.model.ConstructId parseNonStaticInnerClassConstruct(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "full_signature": "private org.eclipse.steady.shared.json.model.ConstructId parseNonStaticInnerClassConstruct(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "class_method_signature": "Callgraph.parseNonStaticInnerClassConstruct(\n      org.eclipse.steady.shared.json.model.ConstructId target)", "testcase": false, "constructor": false}, {"identifier": "getShaFromCachedJarAnalyzer", "parameters": "(URI _jar_url)", "modifiers": "private synchronized", "return": "String", "signature": "String getShaFromCachedJarAnalyzer(URI _jar_url)", "full_signature": "private synchronized String getShaFromCachedJarAnalyzer(URI _jar_url)", "class_method_signature": "Callgraph.getShaFromCachedJarAnalyzer(URI _jar_url)", "testcase": false, "constructor": false}], "file": "lang-java-reach/src/main/java/org/eclipse/steady/cg/Callgraph.java"}, "focal_method": {"identifier": "Callgraph", "parameters": "(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "modifiers": "public", "return": "", "body": "public Callgraph(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g) {\n    if (_g != null) {\n\n      // The problems described in Jira ticket VULAS-1429 look as if the caches survive A2C\n      // executions on different modules. Check and clear explicitly.\n      if (!this.cachedJarUrls.isEmpty()) {\n        log.warn(\"JAR URL cache not empty, clearing now...\");\n        this.cachedJarUrls.clear();\n      }\n      if (!this.jarAnalyzersCache.isEmpty()) {\n        log.warn(\"JarAnalyzer cache not empty, clearing now ...\");\n        this.jarAnalyzersCache.clear();\n      }\n\n      Iterator<org.eclipse.steady.shared.json.model.ConstructId> iter = _g.iterator();\n      org.eclipse.steady.shared.json.model.ConstructId src_node = null, tgt_node = null;\n      Iterator<org.eclipse.steady.shared.json.model.ConstructId> succNodes = null;\n      Integer src_id = null, tgt_id = null, count = -1;\n\n      // Populate the map of constructs and integers\n      while (iter.hasNext()) {\n        this.nodeCount++;\n        src_node = iter.next();\n        src_id = this.nodeMap.get(src_node);\n        if (src_id == null) {\n          src_id = ++count;\n          this.nodeMap.put(src_node, src_id);\n          this.nodeInfoMap.put(src_id, this.createNodeMetaInformation(src_node, src_id));\n          this.nodeId.add(src_node);\n          this.idgraph.addNode(src_id);\n        }\n        // targets\n        succNodes = _g.getSuccNodes(src_node);\n        while (succNodes.hasNext()) {\n          this.edgeCount++;\n          tgt_node = succNodes.next();\n          tgt_id = this.nodeMap.get(tgt_node);\n          if (tgt_id == null) {\n            tgt_id = ++count;\n            this.nodeMap.put(tgt_node, tgt_id);\n            this.nodeInfoMap.put(tgt_id, this.createNodeMetaInformation(tgt_node, tgt_id));\n            this.nodeId.add(tgt_node);\n            this.idgraph.addNode(tgt_id);\n          }\n          // add edges\n          this.idgraph.addEdge(src_id, tgt_id);\n        }\n      }\n      Callgraph.log.info(\"Built Graph<Integer> of \" + this.idgraph.getNumberOfNodes() + \" nodes\");\n    }\n  }", "signature": " Callgraph(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "full_signature": "public  Callgraph(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "class_method_signature": "Callgraph.Callgraph(Graph<org.eclipse.steady.shared.json.model.ConstructId> _g)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}