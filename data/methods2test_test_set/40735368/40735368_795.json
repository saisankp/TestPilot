{"test_class": {"identifier": "DecimatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "GeometryFactory gf = new GeometryFactory();", "modifier": "", "type": "GeometryFactory", "declarator": "gf = new GeometryFactory()", "var_name": "gf"}, {"original_string": "LiteCoordinateSequenceFactory csf = new LiteCoordinateSequenceFactory();", "modifier": "", "type": "LiteCoordinateSequenceFactory", "declarator": "csf = new LiteCoordinateSequenceFactory()", "var_name": "csf"}, {"original_string": "private MathTransform identity = new AffineTransform2D(new AffineTransform());", "modifier": "private", "type": "MathTransform", "declarator": "identity = new AffineTransform2D(new AffineTransform())", "var_name": "identity"}], "file": "modules/library/main/src/test/java/org/geotools/geometry/jts/DecimatorTest.java"}, "test_case": {"identifier": "testNoDecimation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoDecimation() {\n        // acute triangle\n        LinearRing g = gf.createLinearRing(csf.create(new double[] {0,0,0,10,2,10,2,0,0,0}));\n        LinearRing original = (LinearRing) g.clone();\n        assertTrue(g.isValid());\n        \n        Decimator d = new Decimator(-1, -1);\n        d.decimate(g);\n        g.geometryChanged();\n        assertTrue(g.isValid());\n        assertTrue(original.equalsExact(g));\n    }", "signature": "void testNoDecimation()", "full_signature": "@Test public void testNoDecimation()", "class_method_signature": "DecimatorTest.testNoDecimation()", "testcase": true, "constructor": false, "invocations": ["createLinearRing", "create", "clone", "assertTrue", "isValid", "decimate", "geometryChanged", "assertTrue", "isValid", "assertTrue", "equalsExact"]}, "focal_class": {"identifier": "Decimator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(Decimator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(Decimator.class)", "var_name": "LOGGER"}, {"original_string": "static final double DP_THRESHOLD;", "modifier": "static final", "type": "double", "declarator": "DP_THRESHOLD", "var_name": "DP_THRESHOLD"}, {"original_string": "private static final double EPS = 1e-9;", "modifier": "private static final", "type": "double", "declarator": "EPS = 1e-9", "var_name": "EPS"}, {"original_string": "private double spanx = -1;", "modifier": "private", "type": "double", "declarator": "spanx = -1", "var_name": "spanx"}, {"original_string": "private double spany = -1;", "modifier": "private", "type": "double", "declarator": "spany = -1", "var_name": "spany"}], "methods": [{"identifier": "Decimator", "parameters": "(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "modifiers": "public", "return": "", "signature": " Decimator(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "full_signature": "public  Decimator(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "class_method_signature": "Decimator.Decimator(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "testcase": false, "constructor": true}, {"identifier": "getSpanX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSpanX()", "full_signature": "public double getSpanX()", "class_method_signature": "Decimator.getSpanX()", "testcase": false, "constructor": false}, {"identifier": "getSpanY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSpanY()", "full_signature": "public double getSpanY()", "class_method_signature": "Decimator.getSpanY()", "testcase": false, "constructor": false}, {"identifier": "Decimator", "parameters": "(MathTransform screenToWorld, Rectangle paintArea)", "modifiers": "public", "return": "", "signature": " Decimator(MathTransform screenToWorld, Rectangle paintArea)", "full_signature": "public  Decimator(MathTransform screenToWorld, Rectangle paintArea)", "class_method_signature": "Decimator.Decimator(MathTransform screenToWorld, Rectangle paintArea)", "testcase": false, "constructor": true}, {"identifier": "computeGeneralizationDistances", "parameters": "(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "modifiers": "public static", "return": "double[]", "signature": "double[] computeGeneralizationDistances(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "full_signature": "public static double[] computeGeneralizationDistances(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "class_method_signature": "Decimator.computeGeneralizationDistances(MathTransform screenToWorld, Rectangle paintArea, double pixelDistance)", "testcase": false, "constructor": false}, {"identifier": "isFinite", "parameters": "(double d)", "modifiers": "private static", "return": "boolean", "signature": "boolean isFinite(double d)", "full_signature": "private static boolean isFinite(double d)", "class_method_signature": "Decimator.isFinite(double d)", "testcase": false, "constructor": false}, {"identifier": "getGeneralizationSpans", "parameters": "(double x, double y, MathTransform transform)", "modifiers": "static", "return": "double[]", "signature": "double[] getGeneralizationSpans(double x, double y, MathTransform transform)", "full_signature": "static double[] getGeneralizationSpans(double x, double y, MathTransform transform)", "class_method_signature": "Decimator.getGeneralizationSpans(double x, double y, MathTransform transform)", "testcase": false, "constructor": false}, {"identifier": "Decimator", "parameters": "(MathTransform screenToWorld)", "modifiers": "public", "return": "", "signature": " Decimator(MathTransform screenToWorld)", "full_signature": "public  Decimator(MathTransform screenToWorld)", "class_method_signature": "Decimator.Decimator(MathTransform screenToWorld)", "testcase": false, "constructor": true}, {"identifier": "Decimator", "parameters": "(double spanx, double spany)", "modifiers": "public", "return": "", "signature": " Decimator(double spanx, double spany)", "full_signature": "public  Decimator(double spanx, double spany)", "class_method_signature": "Decimator.Decimator(double spanx, double spany)", "testcase": false, "constructor": true}, {"identifier": "decimateTransformGeneralize", "parameters": "(Geometry geometry,\n\t\t\tMathTransform transform)", "modifiers": "public final", "return": "Geometry", "signature": "Geometry decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "full_signature": "public final Geometry decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "class_method_signature": "Decimator.decimateTransformGeneralize(Geometry geometry,\n\t\t\tMathTransform transform)", "testcase": false, "constructor": false}, {"identifier": "accumulateGeometryType", "parameters": "(Class elementType, Geometry generalized)", "modifiers": "private", "return": "Class", "signature": "Class accumulateGeometryType(Class elementType, Geometry generalized)", "full_signature": "private Class accumulateGeometryType(Class elementType, Geometry generalized)", "class_method_signature": "Decimator.accumulateGeometryType(Class elementType, Geometry generalized)", "testcase": false, "constructor": false}, {"identifier": "decimate", "parameters": "(Geometry geom)", "modifiers": "public final", "return": "void", "signature": "void decimate(Geometry geom)", "full_signature": "public final void decimate(Geometry geom)", "class_method_signature": "Decimator.decimate(Geometry geom)", "testcase": false, "constructor": false}, {"identifier": "decimateOnEnvelope", "parameters": "(Geometry geom, LiteCoordinateSequence seq)", "modifiers": "private", "return": "boolean", "signature": "boolean decimateOnEnvelope(Geometry geom, LiteCoordinateSequence seq)", "full_signature": "private boolean decimateOnEnvelope(Geometry geom, LiteCoordinateSequence seq)", "class_method_signature": "Decimator.decimateOnEnvelope(Geometry geom, LiteCoordinateSequence seq)", "testcase": false, "constructor": false}, {"identifier": "decimateRingFully", "parameters": "(LiteCoordinateSequence seq)", "modifiers": "private", "return": "void", "signature": "void decimateRingFully(LiteCoordinateSequence seq)", "full_signature": "private void decimateRingFully(LiteCoordinateSequence seq)", "class_method_signature": "Decimator.decimateRingFully(LiteCoordinateSequence seq)", "testcase": false, "constructor": false}, {"identifier": "decimateTransformGeneralize", "parameters": "(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "modifiers": "private final", "return": "void", "signature": "void decimateTransformGeneralize(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "full_signature": "private final void decimateTransformGeneralize(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "class_method_signature": "Decimator.decimateTransformGeneralize(LiteCoordinateSequence seq,\n            MathTransform transform, boolean ring, double spanx, double spany)", "testcase": false, "constructor": false}, {"identifier": "spanBasedGeneralize", "parameters": "(int ncoords, double[] coords, double spanx, double spany)", "modifiers": "private", "return": "int", "signature": "int spanBasedGeneralize(int ncoords, double[] coords, double spanx, double spany)", "full_signature": "private int spanBasedGeneralize(int ncoords, double[] coords, double spanx, double spany)", "class_method_signature": "Decimator.spanBasedGeneralize(int ncoords, double[] coords, double spanx, double spany)", "testcase": false, "constructor": false}, {"identifier": "dpBasedGeneralize", "parameters": "(int ncoords, double[] coords, double maxDistance)", "modifiers": "private", "return": "int", "signature": "int dpBasedGeneralize(int ncoords, double[] coords, double maxDistance)", "full_signature": "private int dpBasedGeneralize(int ncoords, double[] coords, double maxDistance)", "class_method_signature": "Decimator.dpBasedGeneralize(int ncoords, double[] coords, double maxDistance)", "testcase": false, "constructor": false}, {"identifier": "dpSimplifySection", "parameters": "(int first, int last, double[] coords, double maxDistanceSquared)", "modifiers": "private", "return": "void", "signature": "void dpSimplifySection(int first, int last, double[] coords, double maxDistanceSquared)", "full_signature": "private void dpSimplifySection(int first, int last, double[] coords, double maxDistanceSquared)", "class_method_signature": "Decimator.dpSimplifySection(int first, int last, double[] coords, double maxDistanceSquared)", "testcase": false, "constructor": false}, {"identifier": "decimate", "parameters": "(Geometry g, LiteCoordinateSequence seq)", "modifiers": "private", "return": "void", "signature": "void decimate(Geometry g, LiteCoordinateSequence seq)", "full_signature": "private void decimate(Geometry g, LiteCoordinateSequence seq)", "class_method_signature": "Decimator.decimate(Geometry g, LiteCoordinateSequence seq)", "testcase": false, "constructor": false}, {"identifier": "copyCoordinate", "parameters": "(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "modifiers": "private", "return": "int", "signature": "int copyCoordinate(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "full_signature": "private int copyCoordinate(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "class_method_signature": "Decimator.copyCoordinate(double[] coords, int dimension, int readDoubles,\n\t\t\tint currentDoubles)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/geometry/jts/Decimator.java"}, "focal_method": {"identifier": "decimate", "parameters": "(Geometry geom)", "modifiers": "public final", "return": "void", "body": "public final void decimate(Geometry geom) {\n\t\tif (spanx == -1)\n\t\t\treturn;\n\t\tif (geom instanceof MultiPoint) {\n\t\t\t// TODO check geometry and if its bbox is too small turn it into a 1\n\t\t\t// point geom\n\t\t\treturn;\n\t\t}\n\t\tif (geom instanceof GeometryCollection) {\n\t\t\t// TODO check geometry and if its bbox is too small turn it into a\n\t\t\t// 1-2 point geom\n\t\t\t// takes a bit of work because the geometry will need to be\n\t\t\t// recreated.\n\t\t\tGeometryCollection collection = (GeometryCollection) geom;\n\t\t\tfinal int numGeometries = collection.getNumGeometries();\n\t\t\tfor (int i = 0; i < numGeometries; i++) {\n\t\t\t\tdecimate(collection.getGeometryN(i));\n\t\t\t}\n\t\t} else if (geom instanceof LineString) {\n\t\t\tLineString line = (LineString) geom;\n\t\t\tLiteCoordinateSequence seq = (LiteCoordinateSequence) line\n\t\t\t\t\t.getCoordinateSequence();\n\t\t\tif (decimateOnEnvelope(line, seq)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdecimate(line, seq);\n\t\t} else if (geom instanceof Polygon) {\n\t\t\tPolygon line = (Polygon) geom;\n\t\t\tdecimate(line.getExteriorRing());\n\t\t\tfinal int numRings = line.getNumInteriorRing();\n\t\t\tfor (int i = 0; i < numRings; i++) {\n\t\t\t\tdecimate(line.getInteriorRingN(i));\n\t\t\t}\n\t\t}\n\t}", "signature": "void decimate(Geometry geom)", "full_signature": "public final void decimate(Geometry geom)", "class_method_signature": "Decimator.decimate(Geometry geom)", "testcase": false, "constructor": false, "invocations": ["getNumGeometries", "decimate", "getGeometryN", "getCoordinateSequence", "decimateOnEnvelope", "decimate", "decimate", "getExteriorRing", "getNumInteriorRing", "decimate", "getInteriorRingN"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}