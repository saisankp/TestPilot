{"test_class": {"identifier": "FileHttpUploadTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FileHttpUpload fhu = new FileHttpUpload();", "modifier": "", "type": "FileHttpUpload", "declarator": "fhu = new FileHttpUpload()", "var_name": "fhu"}], "file": "client/oim-client-common/src/test/java/com/oim/common/component/file/FileHttpUploadTest.java"}, "test_case": {"identifier": "testUpload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUpload() {\n\t\tMap<String, String> dataMap = new HashMap<String, String>();\n\t\tdataMap.put(\"userId\", \"110\");\n\n\t\tFileAction<String> action = new FileAction<String>() {\n\n\t\t\t@Override\n\t\t\tpublic void progress(long speed, long size, long finishSize, double progress) {\n\n\t\t\t\tString speedText = \"0MB/s\";\n\t\t\t\tif (speed < 1024) {\n\t\t\t\t\tspeedText = speed + \"B/s\";\n\t\t\t\t} else if (1024 <= speed && speed < (1024 * 1024)) {\n\t\t\t\t\tString s = OnlyNumberUtil.format(((double) speed / 1024d));\n\t\t\t\t\tspeedText = s + \"KB/s\";\n\t\t\t\t} else {\n\t\t\t\t\tString s = OnlyNumberUtil.format(((double) speed / (double) (1024 * 1024)));\n\t\t\t\t\tspeedText = s + \"MB/s\";\n\t\t\t\t}\n\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tsb.append(\"size:\" + size);\n\t\t\t\tsb.append(\" \");\n\t\t\t\tsb.append(\"finishSize:\" + finishSize);\n\t\t\t\tsb.append(\" \");\n\t\t\t\tsb.append(\"progress:\" + progress);\n\t\t\t\tsb.append(\" \");\n\t\t\t\tsb.append(\"speed:\");\n\t\t\t\tsb.append(speedText);\n\t\t\t\tsb.append(\" \");\n\t\t\t\tSystem.out.println(sb);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void success(String t) {\n\t\t\t\tSystem.out.println(\"success:\" + t);\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void lost(String t) {\n\t\t\t\t// TODO Auto-generated method stub\n\n\t\t\t}\n\t\t};\n\t\tString http = \"http://127.0.0.1:12000/api/v1/oim/file/upload.do\";\n\t\tFile file = new File(\"E:/Release/oss.zip\");\n\t\tfhu.upload(http, file, dataMap, action);\n\t}", "signature": "void testUpload()", "full_signature": "@Test public void testUpload()", "class_method_signature": "FileHttpUploadTest.testUpload()", "testcase": true, "constructor": false, "invocations": ["put", "format", "format", "append", "append", "append", "append", "append", "append", "append", "append", "append", "println", "println", "upload"]}, "focal_class": {"identifier": "FileHttpUpload", "superclass": "extends FileHttpHandler", "interfaces": "", "fields": [], "methods": [{"identifier": "upload", "parameters": "(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "modifiers": "public", "return": "String", "signature": "String upload(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "full_signature": "public String upload(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "class_method_signature": "FileHttpUpload.upload(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(String http, String input, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "modifiers": "public", "return": "String", "signature": "String upload(String http, String input, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "full_signature": "public String upload(String http, String input, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "class_method_signature": "FileHttpUpload.upload(String http, String input, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "testcase": false, "constructor": false}, {"identifier": "putData", "parameters": "(OutputStream out, String boundary, Map<String, String> dataMap)", "modifiers": "private", "return": "void", "signature": "void putData(OutputStream out, String boundary, Map<String, String> dataMap)", "full_signature": "private void putData(OutputStream out, String boundary, Map<String, String> dataMap)", "class_method_signature": "FileHttpUpload.putData(OutputStream out, String boundary, Map<String, String> dataMap)", "testcase": false, "constructor": false}], "file": "client/oim-client-common/src/main/java/com/oim/common/component/file/FileHttpUpload.java"}, "focal_method": {"identifier": "upload", "parameters": "(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "modifiers": "public", "return": "String", "body": "public String upload(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction) {\n\t\treturn upload(http, \"\", file, dataMap, fileAction);\n\t}", "signature": "String upload(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "full_signature": "public String upload(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "class_method_signature": "FileHttpUpload.upload(String http, File file, Map<String, String> dataMap, FileAction<String> fileAction)", "testcase": false, "constructor": false, "invocations": ["upload"]}, "repository": {"repo_id": 122696956, "url": "https://github.com/oimchat/oim-fx", "language": "Java", "is_fork": false, "fork_count": 92, "stargazer_count": 294, "size": 48671, "license": "licensed"}}