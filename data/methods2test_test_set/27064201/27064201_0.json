{"test_class": {"identifier": "RemoteFileDescriptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_SERVICE_NAME = RemoteFileDescriptorTest.class.getName();", "modifier": "private static final", "type": "String", "declarator": "TEST_SERVICE_NAME = RemoteFileDescriptorTest.class.getName()", "var_name": "TEST_SERVICE_NAME"}, {"original_string": "private static final byte[] HELLO_WORLD = \"Hello World :-)\\n\".getBytes(StandardCharsets.US_ASCII);", "modifier": "private static final", "type": "byte[]", "declarator": "HELLO_WORLD = \"Hello World :-)\\n\".getBytes(StandardCharsets.US_ASCII)", "var_name": "HELLO_WORLD"}, {"original_string": "private static final byte[] SMILEY = \":-)\\n\".getBytes(StandardCharsets.US_ASCII);", "modifier": "private static final", "type": "byte[]", "declarator": "SMILEY = \":-)\\n\".getBytes(StandardCharsets.US_ASCII)", "var_name": "SMILEY"}, {"original_string": "private static AFUNIXNaming namingInstance;", "modifier": "private static", "type": "AFUNIXNaming", "declarator": "namingInstance", "var_name": "namingInstance"}, {"original_string": "private static RemoteFileDescriptorTestServiceImpl testService;", "modifier": "private static", "type": "RemoteFileDescriptorTestServiceImpl", "declarator": "testService", "var_name": "testService"}], "file": "junixsocket-rmi/src/test/java/org/newsclub/net/unix/rmi/RemoteFileDescriptorTest.java"}, "test_case": {"identifier": "testWriteAndReadHello", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWriteAndReadHello() throws Exception {\n    RemoteFileDescriptorTestService svc = (RemoteFileDescriptorTestService) namingInstance\n        .getRegistry().lookup(TEST_SERVICE_NAME);\n\n    try (FileOutputStream fos = svc.output().asFileOutputStream()) {\n      fos.write(HELLO_WORLD);\n    }\n    svc.verifyContents(HELLO_WORLD);\n\n    try (FileInputStream fin = svc.input(12).asFileInputStream()) {\n      byte[] data = TestUtils.readAllBytes(fin);\n      assertArrayEquals(SMILEY, data);\n    }\n\n    try (NaiveFileInputStreamRemote rfis = svc.naiveInputStreamRemote();\n        FileInputStream fin = rfis.getRemoteFileDescriptor().asFileInputStream()) {\n      assertEquals('H', rfis.read());\n      assertEquals('e', fin.read());\n      assertEquals('l', fin.read());\n      assertEquals('l', fin.read());\n      fin.close(); // it's OK to close the remote file descriptor we received via RMI\n      assertEquals('o', rfis.read());\n    }\n  }", "signature": "void testWriteAndReadHello()", "full_signature": "@Test public void testWriteAndReadHello()", "class_method_signature": "RemoteFileDescriptorTest.testWriteAndReadHello()", "testcase": true, "constructor": false, "invocations": ["lookup", "getRegistry", "asFileOutputStream", "output", "write", "verifyContents", "asFileInputStream", "input", "readAllBytes", "assertArrayEquals", "naiveInputStreamRemote", "asFileInputStream", "getRemoteFileDescriptor", "assertEquals", "read", "assertEquals", "read", "assertEquals", "read", "assertEquals", "read", "close", "assertEquals", "read"]}, "focal_class": {"identifier": "RemoteFileDescriptor", "superclass": "extends RemoteFileDescriptorBase<Void>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "RemoteFileDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " RemoteFileDescriptor()", "full_signature": "public  RemoteFileDescriptor()", "class_method_signature": "RemoteFileDescriptor.RemoteFileDescriptor()", "testcase": false, "constructor": true}, {"identifier": "RemoteFileDescriptor", "parameters": "(AFUNIXRMISocketFactory socketFactory, FileDescriptor fd)", "modifiers": "public", "return": "", "signature": " RemoteFileDescriptor(AFUNIXRMISocketFactory socketFactory, FileDescriptor fd)", "full_signature": "public  RemoteFileDescriptor(AFUNIXRMISocketFactory socketFactory, FileDescriptor fd)", "class_method_signature": "RemoteFileDescriptor.RemoteFileDescriptor(AFUNIXRMISocketFactory socketFactory, FileDescriptor fd)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "RemoteFileDescriptor.close()", "testcase": false, "constructor": false}], "file": "junixsocket-rmi/src/main/java/org/newsclub/net/unix/rmi/RemoteFileDescriptor.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n  public synchronized void close() throws IOException {\n    FileDescriptor fd = getFileDescriptor();\n    if (fd != null && fd.valid()) {\n      new FileInputStream(fd).close();\n    }\n  }", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "RemoteFileDescriptor.close()", "testcase": false, "constructor": false, "invocations": ["getFileDescriptor", "valid", "close"]}, "repository": {"repo_id": 27064201, "url": "https://github.com/kohlschutter/junixsocket", "stars": 197, "created": "11/24/2014 6:41:49 AM +00:00", "updates": "2020-01-27T20:08:40+00:00", "fork": "False", "license": "licensed"}}