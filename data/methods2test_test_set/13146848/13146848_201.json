{"test_class": {"identifier": "OutputWriterHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Rule\n    public TemporaryFolder outputFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "outputFolder = new TemporaryFolder()", "var_name": "outputFolder"}, {"original_string": "private TaskExecutionContext context;", "modifier": "private", "type": "TaskExecutionContext", "declarator": "context", "var_name": "context"}], "file": "sejda-core/src/test/java/org/sejda/core/support/io/OutputWriterHelperTest.java"}, "test_case": {"identifier": "copyStreamSingleFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copyStreamSingleFile() throws IOException {\n        File tempFile = folder.newFile();\n        Map<String, File> files = new HashMap<String, File>();\n        files.put(\"newName\", tempFile);\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        OutputWriterHelper.copyToStream(files.values().iterator().next(), out);\n        assertFalse(\"temporary file not deleted\", tempFile.exists());\n        assertEquals(out.size(), tempFile.length());\n    }", "signature": "void copyStreamSingleFile()", "full_signature": "@Test public void copyStreamSingleFile()", "class_method_signature": "OutputWriterHelperTest.copyStreamSingleFile()", "testcase": true, "constructor": false, "invocations": ["newFile", "put", "copyToStream", "next", "iterator", "values", "assertFalse", "exists", "assertEquals", "size", "length"]}, "focal_class": {"identifier": "OutputWriterHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OutputWriterHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OutputWriterHelper.class)", "var_name": "LOG"}], "methods": [{"identifier": "OutputWriterHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " OutputWriterHelper()", "full_signature": "private  OutputWriterHelper()", "class_method_signature": "OutputWriterHelper.OutputWriterHelper()", "testcase": false, "constructor": true}, {"identifier": "moveToFile", "parameters": "(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "modifiers": "static", "return": "void", "signature": "void moveToFile(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "full_signature": "static void moveToFile(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "class_method_signature": "OutputWriterHelper.moveToFile(Map<String, File> files, File outputFile, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "moveToDirectory", "parameters": "(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "modifiers": "static", "return": "void", "signature": "void moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "full_signature": "static void moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "class_method_signature": "OutputWriterHelper.moveToDirectory(Map<String, File> files, File outputDirectory,\n            ExistingOutputPolicy existingOutputPolicy, TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "moveFile", "parameters": "(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "modifiers": "static", "return": "void", "signature": "void moveFile(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "full_signature": "static void moveFile(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "class_method_signature": "OutputWriterHelper.moveFile(File input, File output, ExistingOutputPolicy existingOutputPolicy,\n            TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "doMoveFile", "parameters": "(File input, File output)", "modifiers": "private static", "return": "void", "signature": "void doMoveFile(File input, File output)", "full_signature": "private static void doMoveFile(File input, File output)", "class_method_signature": "OutputWriterHelper.doMoveFile(File input, File output)", "testcase": false, "constructor": false}, {"identifier": "finalName", "parameters": "(String filename, int totalFilesNumber)", "modifiers": "private static", "return": "String", "signature": "String finalName(String filename, int totalFilesNumber)", "full_signature": "private static String finalName(String filename, int totalFilesNumber)", "class_method_signature": "OutputWriterHelper.finalName(String filename, int totalFilesNumber)", "testcase": false, "constructor": false}, {"identifier": "copyToStreamZipped", "parameters": "(Map<String, File> files, OutputStream out)", "modifiers": "static", "return": "void", "signature": "void copyToStreamZipped(Map<String, File> files, OutputStream out)", "full_signature": "static void copyToStreamZipped(Map<String, File> files, OutputStream out)", "class_method_signature": "OutputWriterHelper.copyToStreamZipped(Map<String, File> files, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "copyToStream", "parameters": "(File file, OutputStream out)", "modifiers": "static", "return": "void", "signature": "void copyToStream(File file, OutputStream out)", "full_signature": "static void copyToStream(File file, OutputStream out)", "class_method_signature": "OutputWriterHelper.copyToStream(File file, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(File file)", "modifiers": "private static", "return": "void", "signature": "void delete(File file)", "full_signature": "private static void delete(File file)", "class_method_signature": "OutputWriterHelper.delete(File file)", "testcase": false, "constructor": false}], "file": "sejda-core/src/main/java/org/sejda/core/support/io/OutputWriterHelper.java"}, "focal_method": {"identifier": "copyToStream", "parameters": "(File file, OutputStream out)", "modifiers": "static", "return": "void", "body": "static void copyToStream(File file, OutputStream out) throws IOException {\n        try (InputStream in = new FileInputStream(file)) {\n            IOUtils.copy(in, out);\n        } finally {\n            delete(file);\n        }\n    }", "signature": "void copyToStream(File file, OutputStream out)", "full_signature": "static void copyToStream(File file, OutputStream out)", "class_method_signature": "OutputWriterHelper.copyToStream(File file, OutputStream out)", "testcase": false, "constructor": false, "invocations": ["copy", "delete"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}