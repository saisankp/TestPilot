{"test_class": {"identifier": "DynamoDBCertRecordStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private AmazonDynamoDB dbClient;", "modifier": "@Mock private", "type": "AmazonDynamoDB", "declarator": "dbClient", "var_name": "dbClient"}, {"original_string": "@Mock private Table table;", "modifier": "@Mock private", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "@Mock private DynamoDB dynamoDB;", "modifier": "@Mock private", "type": "DynamoDB", "declarator": "dynamoDB", "var_name": "dynamoDB"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreFactoryTest.java"}, "test_case": {"identifier": "testCreateMissingTableName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateMissingTableName() {\n\n        PrivateKeyStore keyStore = Mockito.mock(PrivateKeyStore.class);\n\n        System.clearProperty(ZTSConsts.ZTS_PROP_CERT_DYNAMODB_TABLE_NAME);\n        TestDynamoDBCertRecordStoreFactory factory = new TestDynamoDBCertRecordStoreFactory();\n        try {\n            factory.create(keyStore);\n            fail();\n        } catch (ResourceException ex) {\n            assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE);\n        }\n\n        System.setProperty(ZTSConsts.ZTS_PROP_CERT_DYNAMODB_TABLE_NAME, \"\");\n        try {\n            factory.create(keyStore);\n            fail();\n        } catch (ResourceException ex) {\n            assertEquals(ex.getCode(), ResourceException.SERVICE_UNAVAILABLE);\n        }\n\n        System.clearProperty(ZTSConsts.ZTS_PROP_CERT_DYNAMODB_TABLE_NAME);\n    }", "signature": "void testCreateMissingTableName()", "full_signature": "@Test public void testCreateMissingTableName()", "class_method_signature": "DynamoDBCertRecordStoreFactoryTest.testCreateMissingTableName()", "testcase": true, "constructor": false, "invocations": ["mock", "clearProperty", "create", "fail", "assertEquals", "getCode", "setProperty", "create", "fail", "assertEquals", "getCode", "clearProperty"]}, "focal_class": {"identifier": "DynamoDBCertRecordStoreFactory", "superclass": "", "interfaces": "implements CertRecordStoreFactory", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBCertRecordStoreFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DynamoDBCertRecordStoreFactory.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "CertRecordStore", "signature": "CertRecordStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public CertRecordStore create(PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBCertRecordStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getDynamoDBClient", "parameters": "(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "modifiers": "", "return": "AmazonDynamoDB", "signature": "AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "full_signature": " AmazonDynamoDB getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBCertRecordStoreFactory.getDynamoDBClient(ZTSClientNotificationSenderImpl ztsClientNotificationSender, PrivateKeyStore keyStore)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBCertRecordStoreFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "CertRecordStore", "body": "@Override\n    public CertRecordStore create(PrivateKeyStore keyStore) {\n\n        final String tableName = System.getProperty(ZTSConsts.ZTS_PROP_CERT_DYNAMODB_TABLE_NAME);\n        if (tableName == null || tableName.isEmpty()) {\n            LOGGER.error(\"Cert Store DynamoDB table name not specified\");\n            throw new ResourceException(ResourceException.SERVICE_UNAVAILABLE, \"DynamoDB table name not specified\");\n        }\n\n        final String indexName = System.getProperty(ZTSConsts.ZTS_PROP_CERT_DYNAMODB_INDEX_CURRENT_TIME_NAME);\n        if (indexName == null || indexName.isEmpty()) {\n            LOGGER.error(\"Cert Store DynamoDB index current-time not specified\");\n            throw new ResourceException(ResourceException.SERVICE_UNAVAILABLE, \"DynamoDB index current-time not specified\");\n        }\n\n        ZTSClientNotificationSenderImpl ztsClientNotificationSender = new ZTSClientNotificationSenderImpl();\n        AmazonDynamoDB client = getDynamoDBClient(ztsClientNotificationSender, keyStore);\n        return new DynamoDBCertRecordStore(client, tableName, indexName, ztsClientNotificationSender);\n    }", "signature": "CertRecordStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public CertRecordStore create(PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBCertRecordStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["getProperty", "isEmpty", "error", "getProperty", "isEmpty", "error", "getDynamoDBClient"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}