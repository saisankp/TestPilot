{"test_class": {"identifier": "ColorProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ColorProvider colorProvider;", "modifier": "private", "type": "ColorProvider", "declarator": "colorProvider", "var_name": "colorProvider"}, {"original_string": "private Color firstDefaultColour;", "modifier": "private", "type": "Color", "declarator": "firstDefaultColour", "var_name": "firstDefaultColour"}], "file": "s3tbx-sentinel3-reader/src/test/java/org/esa/s3tbx/dataio/s3/util/ColorProviderTest.java"}, "test_case": {"identifier": "testGetMaskForColor_water", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMaskForColor_water() throws Exception {\n        final Color waterColor = new Color(0, 63, 255);\n        final Color waterColor1 = colorProvider.getMaskColor(\"dfgbnzwaterkj\");\n        final Color waterColor2 = colorProvider.getMaskColor(\"nfujiWATERcrtvf\");\n        final Color waterColor3 = colorProvider.getMaskColor(\"nfujiWaTeRcrtvf\");\n        final Color waterColor4 = colorProvider.getMaskColor(\"nfujiWeTaRcrtvf\");\n        assertEquals(waterColor, waterColor1);\n        assertEquals(waterColor, waterColor2);\n        assertEquals(waterColor, waterColor3);\n        assertEquals(firstDefaultColour, waterColor4);\n    }", "signature": "void testGetMaskForColor_water()", "full_signature": "@Test public void testGetMaskForColor_water()", "class_method_signature": "ColorProviderTest.testGetMaskForColor_water()", "testcase": true, "constructor": false, "invocations": ["getMaskColor", "getMaskColor", "getMaskColor", "getMaskColor", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ColorProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int colourCounter;", "modifier": "private", "type": "int", "declarator": "colourCounter", "var_name": "colourCounter"}, {"original_string": "private int numberOfIntermediateSamplePoints;", "modifier": "private", "type": "int", "declarator": "numberOfIntermediateSamplePoints", "var_name": "numberOfIntermediateSamplePoints"}, {"original_string": "private int thirdPowerOfCurrentDivisions;", "modifier": "private", "type": "int", "declarator": "thirdPowerOfCurrentDivisions", "var_name": "thirdPowerOfCurrentDivisions"}, {"original_string": "private int numberOfTotalSamplePoints;", "modifier": "private", "type": "int", "declarator": "numberOfTotalSamplePoints", "var_name": "numberOfTotalSamplePoints"}, {"original_string": "private Map<String, Color> predefinedColors;", "modifier": "private", "type": "Map<String, Color>", "declarator": "predefinedColors", "var_name": "predefinedColors"}], "methods": [{"identifier": "ColorProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " ColorProvider()", "full_signature": "public  ColorProvider()", "class_method_signature": "ColorProvider.ColorProvider()", "testcase": false, "constructor": true}, {"identifier": "setupReservedColors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setupReservedColors()", "full_signature": "private void setupReservedColors()", "class_method_signature": "ColorProvider.setupReservedColors()", "testcase": false, "constructor": false}, {"identifier": "evaluateMaxNumberOfSamplePointsForDivision", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void evaluateMaxNumberOfSamplePointsForDivision()", "full_signature": "private void evaluateMaxNumberOfSamplePointsForDivision()", "class_method_signature": "ColorProvider.evaluateMaxNumberOfSamplePointsForDivision()", "testcase": false, "constructor": false}, {"identifier": "getPredefinedColor", "parameters": "(String maskName)", "modifiers": "private", "return": "Color", "signature": "Color getPredefinedColor(String maskName)", "full_signature": "private Color getPredefinedColor(String maskName)", "class_method_signature": "ColorProvider.getPredefinedColor(String maskName)", "testcase": false, "constructor": false}, {"identifier": "getMaskColor", "parameters": "(String maskName)", "modifiers": "public", "return": "Color", "signature": "Color getMaskColor(String maskName)", "full_signature": "public Color getMaskColor(String maskName)", "class_method_signature": "ColorProvider.getMaskColor(String maskName)", "testcase": false, "constructor": false}, {"identifier": "isPredefinedColor", "parameters": "(Color color)", "modifiers": "private", "return": "boolean", "signature": "boolean isPredefinedColor(Color color)", "full_signature": "private boolean isPredefinedColor(Color color)", "class_method_signature": "ColorProvider.isPredefinedColor(Color color)", "testcase": false, "constructor": false}, {"identifier": "updateDivision", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateDivision()", "full_signature": "private void updateDivision()", "class_method_signature": "ColorProvider.updateDivision()", "testcase": false, "constructor": false}], "file": "s3tbx-sentinel3-reader/src/main/java/org/esa/s3tbx/dataio/s3/util/ColorProvider.java"}, "focal_method": {"identifier": "getMaskColor", "parameters": "(String maskName)", "modifiers": "public", "return": "Color", "body": "public Color getMaskColor(String maskName) {\n        Color color = getPredefinedColor(maskName);\n        while (color == null) {\n            int redStep = 0;\n            int greenStep = 0;\n            int blueStep = 0;\n            double stepSize = 255.0;\n            while (redStep % 2 == 0 && greenStep % 2 == 0 && blueStep % 2 == 0) {\n                updateDivision();\n                stepSize = 255.0 / (numberOfIntermediateSamplePoints + 1);\n                redStep = (colourCounter / (numberOfTotalSamplePoints * numberOfTotalSamplePoints))\n                        % numberOfTotalSamplePoints;\n                greenStep = (colourCounter / numberOfTotalSamplePoints) % numberOfTotalSamplePoints;\n                blueStep = colourCounter % numberOfTotalSamplePoints;\n                colourCounter++;\n            }\n            final Color candidateColor =\n                    new Color((int) (redStep * stepSize), (int) (greenStep * stepSize), (int) (blueStep * stepSize));\n            if (!isPredefinedColor(candidateColor)) {\n                color = candidateColor;\n            }\n        }\n        return color;\n    }", "signature": "Color getMaskColor(String maskName)", "full_signature": "public Color getMaskColor(String maskName)", "class_method_signature": "ColorProvider.getMaskColor(String maskName)", "testcase": false, "constructor": false, "invocations": ["getPredefinedColor", "updateDivision", "isPredefinedColor"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}