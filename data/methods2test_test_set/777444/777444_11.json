{"test_class": {"identifier": "UserPasswordAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/security/UserPasswordAuthenticatorTest.java"}, "test_case": {"identifier": "testCheckCredentials", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckCredentials() throws Exception {\n        UserPasswordAuthenticator auth = new UserPasswordAuthenticator(\"jolokia\",\"roland\",\"s!cr!t\");\n        assertTrue(auth.checkCredentials(\"roland\",\"s!cr!t\"));\n        assertFalse(auth.checkCredentials(\"roland\", \"bla\"));\n        assertFalse(auth.checkCredentials(null, \"bla\"));\n        assertFalse(auth.checkCredentials(\"roland\", null));\n        assertFalse(auth.checkCredentials(null, null));\n\n    }", "signature": "void testCheckCredentials()", "full_signature": "@Test public void testCheckCredentials()", "class_method_signature": "UserPasswordAuthenticatorTest.testCheckCredentials()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "checkCredentials", "assertFalse", "checkCredentials", "assertFalse", "checkCredentials", "assertFalse", "checkCredentials", "assertFalse", "checkCredentials"]}, "focal_class": {"identifier": "UserPasswordAuthenticator", "superclass": "extends BasicAuthenticator", "interfaces": "", "fields": [{"original_string": "private String user;", "modifier": "private", "type": "String", "declarator": "user", "var_name": "user"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "UserPasswordAuthenticator", "parameters": "(String pRealm, String pUser, String pPassword)", "modifiers": "public", "return": "", "signature": " UserPasswordAuthenticator(String pRealm, String pUser, String pPassword)", "full_signature": "public  UserPasswordAuthenticator(String pRealm, String pUser, String pPassword)", "class_method_signature": "UserPasswordAuthenticator.UserPasswordAuthenticator(String pRealm, String pUser, String pPassword)", "testcase": false, "constructor": true}, {"identifier": "checkCredentials", "parameters": "(String pUserGiven, String pPasswordGiven)", "modifiers": "public", "return": "boolean", "signature": "boolean checkCredentials(String pUserGiven, String pPasswordGiven)", "full_signature": "public boolean checkCredentials(String pUserGiven, String pPasswordGiven)", "class_method_signature": "UserPasswordAuthenticator.checkCredentials(String pUserGiven, String pPasswordGiven)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(HttpExchange httpExchange)", "modifiers": "@Override public", "return": "Result", "signature": "Result authenticate(HttpExchange httpExchange)", "full_signature": "@Override public Result authenticate(HttpExchange httpExchange)", "class_method_signature": "UserPasswordAuthenticator.authenticate(HttpExchange httpExchange)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/security/UserPasswordAuthenticator.java"}, "focal_method": {"identifier": "checkCredentials", "parameters": "(String pUserGiven, String pPasswordGiven)", "modifiers": "public", "return": "boolean", "body": "public boolean checkCredentials(String pUserGiven, String pPasswordGiven) {\n    return user.equals(pUserGiven) && password.equals(pPasswordGiven);\n  }", "signature": "boolean checkCredentials(String pUserGiven, String pPasswordGiven)", "full_signature": "public boolean checkCredentials(String pUserGiven, String pPasswordGiven)", "class_method_signature": "UserPasswordAuthenticator.checkCredentials(String pUserGiven, String pPasswordGiven)", "testcase": false, "constructor": false, "invocations": ["equals", "equals"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}