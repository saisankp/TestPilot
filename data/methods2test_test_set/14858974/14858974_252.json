{"test_class": {"identifier": "ModelMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "server/src/test/java/org/axway/grapes/server/db/ModelMapperTest.java"}, "test_case": {"identifier": "getModule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getModule(){\n        final DbModule dbModule = new DbModule();\n        dbModule.setName(\"root\");\n        dbModule.setVersion(\"1.0.0-SNAPSHOT\");\n\n        final DbArtifact dbArtifact = new DbArtifact();\n        dbArtifact.setGroupId(\"com.axway.root\");\n        dbArtifact.setArtifactId(\"artifact1\");\n        dbArtifact.setVersion(\"1.0.0-SNAPSHOT\");\n        dbArtifact.setClassifier(\"win\");\n        dbArtifact.setType(\"component\");\n        dbArtifact.setExtension(\"jar\");\n        dbModule.addArtifact(dbArtifact);\n\n        final DbArtifact dbThirdParty = new DbArtifact();\n        dbThirdParty.setGroupId(\"org.apache\");\n        dbThirdParty.setArtifactId(\"all\");\n        dbThirdParty.setVersion(\"6.8.0-5426\");\n        dbThirdParty.setType(\"jar\");\n        dbThirdParty.setExtension(\"jar\");\n\n        dbModule.addDependency(dbThirdParty.getGavc(), Scope.COMPILE);\n\n        final DbModule dbSubmodule = new DbModule();\n        dbSubmodule.setSubmodule(true);\n        dbSubmodule.setName(\"sub1\");\n        dbSubmodule.setVersion(\"1.0.0-SNAPSHOT\");\n\n        final DbArtifact dbArtifact2 = new DbArtifact();\n        dbArtifact2.setGroupId(\"com.axway.root.sub1\");\n        dbArtifact2.setArtifactId(\"artifactSub1\");\n        dbArtifact2.setVersion(\"1.0.0-SNAPSHOT\");\n        dbArtifact2.setExtension(\"jar\");\n        dbSubmodule.addArtifact(dbArtifact2);\n\n        final DbArtifact dbThirdParty2 = new DbArtifact();\n        dbThirdParty2.setGroupId(\"org.lol\");\n        dbThirdParty2.setArtifactId(\"all\");\n        dbThirdParty2.setVersion(\"1.2.3-4\");\n        dbThirdParty2.setExtension(\"jar\");\n\n        dbSubmodule.addDependency(dbThirdParty2.getGavc(), Scope.PROVIDED);\n        dbModule.addSubmodule(dbSubmodule);\n\n        final RepositoryHandler repositoryHandler = mock(RepositoryHandler.class);\n        when(repositoryHandler.getArtifact(dbArtifact.getGavc())).thenReturn(dbArtifact);\n        when(repositoryHandler.getArtifact(dbArtifact2.getGavc())).thenReturn(dbArtifact2);\n        when(repositoryHandler.getArtifact(dbThirdParty.getGavc())).thenReturn(dbThirdParty);\n        when(repositoryHandler.getArtifact(dbThirdParty2.getGavc())).thenReturn(dbThirdParty2);\n\n        final ModelMapper modelMapper = new ModelMapper(repositoryHandler);\n        final Module module = modelMapper.getModule(dbModule);\n\n        assertEquals(dbModule.getName(), module.getName());\n        assertEquals(dbModule.getVersion(), module.getVersion());\n        assertEquals(1, module.getArtifacts().size());\n        assertEquals(dbArtifact.getGavc(), module.getArtifacts().iterator().next().getGavc());\n        assertEquals(1, module.getDependencies().size());\n\n        final Dependency thirdParty = module.getDependencies().iterator().next();\n        assertEquals(dbThirdParty.getGavc(), thirdParty.getTarget().getGavc());\n        assertEquals(Scope.COMPILE, thirdParty.getScope());\n        assertEquals(dbModule.getName(), thirdParty.getSourceName());\n        assertEquals(dbModule.getVersion(), thirdParty.getSourceVersion());\n\n        assertEquals(1, module.getSubmodules().size());\n        final Module submodule = module.getSubmodules().iterator().next();\n\n        assertEquals(dbSubmodule.getName() , submodule.getName());\n        assertEquals(dbSubmodule.getVersion(), submodule.getVersion());\n        assertEquals(1, submodule.getArtifacts().size());\n        assertEquals(dbArtifact2.getGavc(), submodule.getArtifacts().iterator().next().getGavc());\n        assertEquals(1, submodule.getDependencies().size());\n        assertEquals(dbThirdParty2.getGavc(), submodule.getDependencies().iterator().next().getTarget().getGavc());\n        assertEquals(dbSubmodule.getName(), submodule.getDependencies().iterator().next().getSourceName());\n        assertEquals(dbSubmodule.getVersion(), submodule.getDependencies().iterator().next().getSourceVersion());\n        assertEquals(Scope.PROVIDED, submodule.getDependencies().iterator().next().getScope());\n\n    }", "signature": "void getModule()", "full_signature": "@Test public void getModule()", "class_method_signature": "ModelMapperTest.getModule()", "testcase": true, "constructor": false, "invocations": ["setName", "setVersion", "setGroupId", "setArtifactId", "setVersion", "setClassifier", "setType", "setExtension", "addArtifact", "setGroupId", "setArtifactId", "setVersion", "setType", "setExtension", "addDependency", "getGavc", "setSubmodule", "setName", "setVersion", "setGroupId", "setArtifactId", "setVersion", "setExtension", "addArtifact", "setGroupId", "setArtifactId", "setVersion", "setExtension", "addDependency", "getGavc", "addSubmodule", "mock", "thenReturn", "when", "getArtifact", "getGavc", "thenReturn", "when", "getArtifact", "getGavc", "thenReturn", "when", "getArtifact", "getGavc", "thenReturn", "when", "getArtifact", "getGavc", "getModule", "assertEquals", "getName", "getName", "assertEquals", "getVersion", "getVersion", "assertEquals", "size", "getArtifacts", "assertEquals", "getGavc", "getGavc", "next", "iterator", "getArtifacts", "assertEquals", "size", "getDependencies", "next", "iterator", "getDependencies", "assertEquals", "getGavc", "getGavc", "getTarget", "assertEquals", "getScope", "assertEquals", "getName", "getSourceName", "assertEquals", "getVersion", "getSourceVersion", "assertEquals", "size", "getSubmodules", "next", "iterator", "getSubmodules", "assertEquals", "getName", "getName", "assertEquals", "getVersion", "getVersion", "assertEquals", "size", "getArtifacts", "assertEquals", "getGavc", "getGavc", "next", "iterator", "getArtifacts", "assertEquals", "size", "getDependencies", "assertEquals", "getGavc", "getGavc", "getTarget", "next", "iterator", "getDependencies", "assertEquals", "getName", "getSourceName", "next", "iterator", "getDependencies", "assertEquals", "getVersion", "getSourceVersion", "next", "iterator", "getDependencies", "assertEquals", "getScope", "next", "iterator", "getDependencies"]}, "focal_class": {"identifier": "ModelMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RepositoryHandler repositoryHandler;", "modifier": "private final", "type": "RepositoryHandler", "declarator": "repositoryHandler", "var_name": "repositoryHandler"}], "methods": [{"identifier": "ModelMapper", "parameters": "(final RepositoryHandler repoHandler)", "modifiers": "public", "return": "", "signature": " ModelMapper(final RepositoryHandler repoHandler)", "full_signature": "public  ModelMapper(final RepositoryHandler repoHandler)", "class_method_signature": "ModelMapper.ModelMapper(final RepositoryHandler repoHandler)", "testcase": false, "constructor": true}, {"identifier": "getDbOrganization", "parameters": "(final Organization organization)", "modifiers": "public", "return": "DbOrganization", "signature": "DbOrganization getDbOrganization(final Organization organization)", "full_signature": "public DbOrganization getDbOrganization(final Organization organization)", "class_method_signature": "ModelMapper.getDbOrganization(final Organization organization)", "testcase": false, "constructor": false}, {"identifier": "getOrganization", "parameters": "(final DbOrganization dbOrganization)", "modifiers": "public", "return": "Organization", "signature": "Organization getOrganization(final DbOrganization dbOrganization)", "full_signature": "public Organization getOrganization(final DbOrganization dbOrganization)", "class_method_signature": "ModelMapper.getOrganization(final DbOrganization dbOrganization)", "testcase": false, "constructor": false}, {"identifier": "getDbLicense", "parameters": "(final License license)", "modifiers": "public", "return": "DbLicense", "signature": "DbLicense getDbLicense(final License license)", "full_signature": "public DbLicense getDbLicense(final License license)", "class_method_signature": "ModelMapper.getDbLicense(final License license)", "testcase": false, "constructor": false}, {"identifier": "getLicense", "parameters": "(final DbLicense dbLicense)", "modifiers": "public", "return": "License", "signature": "License getLicense(final DbLicense dbLicense)", "full_signature": "public License getLicense(final DbLicense dbLicense)", "class_method_signature": "ModelMapper.getLicense(final DbLicense dbLicense)", "testcase": false, "constructor": false}, {"identifier": "getDbArtifact", "parameters": "(final Artifact artifact)", "modifiers": "public", "return": "DbArtifact", "signature": "DbArtifact getDbArtifact(final Artifact artifact)", "full_signature": "public DbArtifact getDbArtifact(final Artifact artifact)", "class_method_signature": "ModelMapper.getDbArtifact(final Artifact artifact)", "testcase": false, "constructor": false}, {"identifier": "getArtifact", "parameters": "(final DbArtifact dbArtifact)", "modifiers": "public", "return": "Artifact", "signature": "Artifact getArtifact(final DbArtifact dbArtifact)", "full_signature": "public Artifact getArtifact(final DbArtifact dbArtifact)", "class_method_signature": "ModelMapper.getArtifact(final DbArtifact dbArtifact)", "testcase": false, "constructor": false}, {"identifier": "getDbModule", "parameters": "(final Module module)", "modifiers": "public", "return": "DbModule", "signature": "DbModule getDbModule(final Module module)", "full_signature": "public DbModule getDbModule(final Module module)", "class_method_signature": "ModelMapper.getDbModule(final Module module)", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "(final DbModule dbModule)", "modifiers": "public", "return": "Module", "signature": "Module getModule(final DbModule dbModule)", "full_signature": "public Module getModule(final DbModule dbModule)", "class_method_signature": "ModelMapper.getModule(final DbModule dbModule)", "testcase": false, "constructor": false}, {"identifier": "getDependency", "parameters": "(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "modifiers": "public", "return": "Dependency", "signature": "Dependency getDependency(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "full_signature": "public Dependency getDependency(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "class_method_signature": "ModelMapper.getDependency(final DbDependency dbDependency, final String sourceName, final String sourceVersion)", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "(final DbComment dbComment)", "modifiers": "public", "return": "Comment", "signature": "Comment getComment(final DbComment dbComment)", "full_signature": "public Comment getComment(final DbComment dbComment)", "class_method_signature": "ModelMapper.getComment(final DbComment dbComment)", "testcase": false, "constructor": false}, {"identifier": "getDbComment", "parameters": "(final Comment comment)", "modifiers": "public", "return": "DbComment", "signature": "DbComment getDbComment(final Comment comment)", "full_signature": "public DbComment getDbComment(final Comment comment)", "class_method_signature": "ModelMapper.getDbComment(final Comment comment)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/db/ModelMapper.java"}, "focal_method": {"identifier": "getModule", "parameters": "(final DbModule dbModule)", "modifiers": "public", "return": "Module", "body": "public Module getModule(final DbModule dbModule) {\n        final Module module = DataModelFactory.createModule(dbModule.getName(), dbModule.getVersion());\n        module.setPromoted(dbModule.isPromoted());\n        module.setSubmodule(dbModule.isSubmodule());\n        module.setCreatedDateTime(dbModule.getCreatedDateTime());\n        module.setUpdatedDateTime(dbModule.getUpdatedDateTime());\n\n        // Artifacts\n        for (final String gavc : dbModule.getArtifacts()) {\n            // Artifacts\n            final DbArtifact dbArtifact = repositoryHandler.getArtifact(gavc);\n            if (null != dbArtifact) {\n                final Artifact artifact = getArtifact(dbArtifact);\n                module.addArtifact(artifact);\n            }\n        }\n\n        // Dependencies\n        for (final DbDependency dbDependency : dbModule.getDependencies()) {\n            // Dependencies\n            final Dependency dependency = getDependency(dbDependency, module.getName(), module.getVersion());\n            dependency.setSourceName(module.getName());\n            dependency.setSourceVersion(module.getVersion());\n            module.addDependency(dependency);\n        }\n\n        // Submodules\n        for (final DbModule dbSubmodule : dbModule.getSubmodules()) {\n            module.addSubmodule(getModule(dbSubmodule));\n        }\n\n        return module;\n    }", "signature": "Module getModule(final DbModule dbModule)", "full_signature": "public Module getModule(final DbModule dbModule)", "class_method_signature": "ModelMapper.getModule(final DbModule dbModule)", "testcase": false, "constructor": false, "invocations": ["createModule", "getName", "getVersion", "setPromoted", "isPromoted", "setSubmodule", "isSubmodule", "setCreatedDateTime", "getCreatedDateTime", "setUpdatedDateTime", "getUpdatedDateTime", "getArtifacts", "getArtifact", "getArtifact", "addArtifact", "getDependencies", "getDependency", "getName", "getVersion", "setSourceName", "getName", "setSourceVersion", "getVersion", "addDependency", "getSubmodules", "addSubmodule", "getModule"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}