{"test_class": {"identifier": "AccountControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ACCOUNT_URL = \"/Account/\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_URL = \"/Account/\"", "var_name": "ACCOUNT_URL"}, {"original_string": "private static final String ACCOUNT_USER_URL = ACCOUNT_URL + \"/user\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_USER_URL = ACCOUNT_URL + \"/user\"", "var_name": "ACCOUNT_USER_URL"}, {"original_string": "private static final String ACCOUNT_APP_URL = ACCOUNT_URL + \"/app\";", "modifier": "private static final", "type": "String", "declarator": "ACCOUNT_APP_URL = ACCOUNT_URL + \"/app\"", "var_name": "ACCOUNT_APP_URL"}, {"original_string": "@Autowired\n\tprivate WebApplicationContext wac;", "modifier": "@Autowired\n\tprivate", "type": "WebApplicationContext", "declarator": "wac", "var_name": "wac"}, {"original_string": "@Autowired\n\tprivate Filter springSecurityFilterChain;", "modifier": "@Autowired\n\tprivate", "type": "Filter", "declarator": "springSecurityFilterChain", "var_name": "springSecurityFilterChain"}, {"original_string": "@Resource\n\tprivate DtoMapper dozerMapper;", "modifier": "@Resource\n\tprivate", "type": "DtoMapper", "declarator": "dozerMapper", "var_name": "dozerMapper"}, {"original_string": "@Resource\n\tprivate OadrUserService oadrUserService;", "modifier": "@Resource\n\tprivate", "type": "OadrUserService", "declarator": "oadrUserService", "var_name": "oadrUserService"}, {"original_string": "@Resource\n\tprivate OadrAppService oadrAppService;", "modifier": "@Resource\n\tprivate", "type": "OadrAppService", "declarator": "oadrAppService", "var_name": "oadrAppService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private OadrUser adminUser = null;", "modifier": "private", "type": "OadrUser", "declarator": "adminUser = null", "var_name": "adminUser"}, {"original_string": "private OadrApp appUser = null;", "modifier": "private", "type": "OadrApp", "declarator": "appUser = null", "var_name": "appUser"}, {"original_string": "private UserRequestPostProcessor admin = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "admin = SecurityMockMvcRequestPostProcessors.user(\"admin\").roles(\"ADMIN\")", "var_name": "admin"}, {"original_string": "private UserRequestPostProcessor app = SecurityMockMvcRequestPostProcessors.user(\"app\").roles(\"DEVICE_MANAGER\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "app = SecurityMockMvcRequestPostProcessors.user(\"app\").roles(\"DEVICE_MANAGER\")", "var_name": "app"}, {"original_string": "private UserRequestPostProcessor user = SecurityMockMvcRequestPostProcessors.user(\"user\").roles(\"USER\");", "modifier": "private", "type": "UserRequestPostProcessor", "declarator": "user = SecurityMockMvcRequestPostProcessors.user(\"user\").roles(\"USER\")", "var_name": "user"}, {"original_string": "private TypeReference<List<OadrAppDto>> appListRef = new TypeReference<List<OadrAppDto>>() {\n\t};", "modifier": "private", "type": "TypeReference<List<OadrAppDto>>", "declarator": "appListRef = new TypeReference<List<OadrAppDto>>() {\n\t}", "var_name": "appListRef"}, {"original_string": "private TypeReference<List<OadrUserDto>> userListRef = new TypeReference<List<OadrUserDto>>() {\n\t};", "modifier": "private", "type": "TypeReference<List<OadrUserDto>>", "declarator": "userListRef = new TypeReference<List<OadrUserDto>>() {\n\t}", "var_name": "userListRef"}], "file": "OpenADRServerVTNCommon/src/test/java/com/avob/openadr/server/common/vtn/controller/AccountControllerTest.java"}, "test_case": {"identifier": "listAppTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void listAppTest() throws Exception {\n\t\tthis.mockMvc.perform(\n\t\t\t\tMockMvcRequestBuilders.get(ACCOUNT_APP_URL).header(\"Content-Type\", \"application/json\").with(user))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.FORBIDDEN_403));\n\n\t\tMvcResult andReturn = this.mockMvc.perform(\n\t\t\t\tMockMvcRequestBuilders.get(ACCOUNT_APP_URL).header(\"Content-Type\", \"application/json\").with(admin))\n\t\t\t\t.andExpect(MockMvcResultMatchers.status().is(HttpStatus.OK_200)).andReturn();\n\n\t\tList<OadrAppDto> convertMvcResultToOadrUserDtoList = convertMvcResultToList(andReturn, appListRef);\n\t\tassertEquals(1, convertMvcResultToOadrUserDtoList.size());\n\t\tassertEquals(\"app\", convertMvcResultToOadrUserDtoList.get(0).getUsername());\n\t}", "signature": "void listAppTest()", "full_signature": "@Test public void listAppTest()", "class_method_signature": "AccountControllerTest.listAppTest()", "testcase": true, "constructor": false, "invocations": ["andExpect", "perform", "with", "header", "get", "is", "status", "andReturn", "andExpect", "perform", "with", "header", "get", "is", "status", "convertMvcResultToList", "assertEquals", "size", "assertEquals", "getUsername", "get"]}, "focal_class": {"identifier": "AccountController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MediaType OCTET_STREAM_MEDIA_TYPE = MediaType.parseMediaType(\"application/octet-stream\");", "modifier": "private static final", "type": "MediaType", "declarator": "OCTET_STREAM_MEDIA_TYPE = MediaType.parseMediaType(\"application/octet-stream\")", "var_name": "OCTET_STREAM_MEDIA_TYPE"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AccountController.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AccountController.class)", "var_name": "LOGGER"}, {"original_string": "@Resource\n\tprivate DtoMapper dtoMapper;", "modifier": "@Resource\n\tprivate", "type": "DtoMapper", "declarator": "dtoMapper", "var_name": "dtoMapper"}, {"original_string": "@Resource\n\tprivate AbstractUserDao abstractUserDao;", "modifier": "@Resource\n\tprivate", "type": "AbstractUserDao", "declarator": "abstractUserDao", "var_name": "abstractUserDao"}, {"original_string": "@Resource\n\tprivate OadrUserService oadrUserService;", "modifier": "@Resource\n\tprivate", "type": "OadrUserService", "declarator": "oadrUserService", "var_name": "oadrUserService"}, {"original_string": "@Resource\n\tprivate OadrAppService oadrAppService;", "modifier": "@Resource\n\tprivate", "type": "OadrAppService", "declarator": "oadrAppService", "var_name": "oadrAppService"}], "methods": [{"identifier": "registeredUser", "parameters": "(Principal principal)", "modifiers": "@RequestMapping(value = \"/\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM')\") public", "return": "AbstractUserWithRoleDto", "signature": "AbstractUserWithRoleDto registeredUser(Principal principal)", "full_signature": "@RequestMapping(value = \"/\", method = RequestMethod.GET) @ResponseBody @PreAuthorize(\"hasRole('ROLE_ADMIN') or hasRole('ROLE_DEVICE_MANAGER') or hasRole('ROLE_DRPROGRAM')\") public AbstractUserWithRoleDto registeredUser(Principal principal)", "class_method_signature": "AccountController.registeredUser(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "listUser", "parameters": "()", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.GET) @ResponseBody public", "return": "List<OadrUserDto>", "signature": "List<OadrUserDto> listUser()", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.GET) @ResponseBody public List<OadrUserDto> listUser()", "class_method_signature": "AccountController.listUser()", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.POST) @ResponseBody public", "return": "ResponseEntity<InputStreamResource>", "signature": "ResponseEntity<InputStreamResource> createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user\", method = RequestMethod.POST) @ResponseBody public ResponseEntity<InputStreamResource> createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "AccountController.createUser(@RequestBody OadrUserCreateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteUser", "parameters": "(@PathVariable(\"username\") String username, HttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user/{username}\", method = RequestMethod.DELETE) @ResponseBody public", "return": "void", "signature": "void deleteUser(@PathVariable(\"username\") String username, HttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/user/{username}\", method = RequestMethod.DELETE) @ResponseBody public void deleteUser(@PathVariable(\"username\") String username, HttpServletResponse response)", "class_method_signature": "AccountController.deleteUser(@PathVariable(\"username\") String username, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "listApp", "parameters": "()", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.GET) @ResponseBody public", "return": "List<OadrAppDto>", "signature": "List<OadrAppDto> listApp()", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.GET) @ResponseBody public List<OadrAppDto> listApp()", "class_method_signature": "AccountController.listApp()", "testcase": false, "constructor": false}, {"identifier": "createApp", "parameters": "(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.POST) @ResponseBody public", "return": "ResponseEntity<InputStreamResource>", "signature": "ResponseEntity<InputStreamResource> createApp(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.POST) @ResponseBody public ResponseEntity<InputStreamResource> createApp(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "class_method_signature": "AccountController.createApp(@RequestBody OadrAppCreateDto dto,\n\t\t\tHttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "deleteApp", "parameters": "(@PathVariable(\"username\") String username, HttpServletResponse response)", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app/{username}\", method = RequestMethod.DELETE) @ResponseBody public", "return": "void", "signature": "void deleteApp(@PathVariable(\"username\") String username, HttpServletResponse response)", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app/{username}\", method = RequestMethod.DELETE) @ResponseBody public void deleteApp(@PathVariable(\"username\") String username, HttpServletResponse response)", "class_method_signature": "AccountController.deleteApp(@PathVariable(\"username\") String username, HttpServletResponse response)", "testcase": false, "constructor": false}], "file": "OpenADRServerVTNCommon/src/main/java/com/avob/openadr/server/common/vtn/controller/AccountController.java"}, "focal_method": {"identifier": "listApp", "parameters": "()", "modifiers": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.GET) @ResponseBody public", "return": "List<OadrAppDto>", "body": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n\t@RequestMapping(value = \"/app\", method = RequestMethod.GET)\n\t@ResponseBody\n\tpublic List<OadrAppDto> listApp() {\n\n\t\tList<OadrApp> find = oadrAppService.findAll();\n\t\treturn dtoMapper.mapList(find, OadrAppDto.class);\n\t}", "signature": "List<OadrAppDto> listApp()", "full_signature": "@PreAuthorize(\"hasRole('ROLE_ADMIN')\") @RequestMapping(value = \"/app\", method = RequestMethod.GET) @ResponseBody public List<OadrAppDto> listApp()", "class_method_signature": "AccountController.listApp()", "testcase": false, "constructor": false, "invocations": ["findAll", "mapList"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}