{"test_class": {"identifier": "AddXMLSplitterEditTest", "superclass": "", "interfaces": "implements LocationConstants", "fields": [{"original_string": "private static final JsonNodeFactory JSON_NODE_FACTORY = JsonNodeFactory.instance;", "modifier": "private static final", "type": "JsonNodeFactory", "declarator": "JSON_NODE_FACTORY = JsonNodeFactory.instance", "var_name": "JSON_NODE_FACTORY"}, {"original_string": "private WSDLActivity activity;", "modifier": "private", "type": "WSDLActivity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private DataflowImpl dataflow;", "modifier": "private", "type": "DataflowImpl", "declarator": "dataflow", "var_name": "dataflow"}, {"original_string": "private ObjectNode configBean;", "modifier": "private", "type": "ObjectNode", "declarator": "configBean", "var_name": "configBean"}, {"original_string": "private static ObjectNode operationConfigBean;", "modifier": "private static", "type": "ObjectNode", "declarator": "operationConfigBean", "var_name": "operationConfigBean"}, {"original_string": "private String wsdlLocation = WSDL_TEST_BASE\n\t+ \"eutils/eutils_lite.wsdl\";", "modifier": "private", "type": "String", "declarator": "wsdlLocation = WSDL_TEST_BASE\n\t+ \"eutils/eutils_lite.wsdl\"", "var_name": "wsdlLocation"}, {"original_string": "private Edits edits;", "modifier": "private", "type": "Edits", "declarator": "edits", "var_name": "edits"}], "file": "taverna-wsdl-activity/src/test/java/org/apache/taverna/activities/wsdl/xmlsplitter/AddXMLSplitterEditTest.java"}, "test_case": {"identifier": "testAddInputSplitterToWSDLActivity", "parameters": "()", "modifiers": "@Ignore(\"Integration test\") @Test public", "return": "void", "body": "@Ignore(\"Integration test\")\n\t@Test\n\tpublic void testAddInputSplitterToWSDLActivity() throws Exception {\n\t\tAddXMLSplitterEdit edit = new AddXMLSplitterEdit(dataflow,activity,\"parameters\",true, new EditsImpl());\n\t\tedit.doEdit();\n\t\tassertEquals(\"The workflow should now contain 2 services\",2,dataflow.getProcessors().size());\n\t\tProcessor processor=null;\n\t\tfor (Processor p : dataflow.getProcessors()) {\n\t\t\tif (p.getLocalName().equals(\"parametersXML\")) {\n\t\t\t\tprocessor = p;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tassertNotNull(\"There should be a processor named parametersXML\",processor);\n\t\tassertEquals(\"There should be 1 activity\",1,processor.getActivityList().size());\n\t\tassertEquals(\"THe processor should have 3 input ports\",3,processor.getInputPorts().size());\n\t\tassertEquals(\"THe processor should have 1 output port\",1,processor.getOutputPorts().size());\n\n\t\tActivity<?>a = processor.getActivityList().get(0);\n\n\t\tassertEquals(\"The activity should have 3 input ports\",3,a.getInputPorts().size());\n\t\tassertEquals(\"The activity 1 output port\",1,a.getOutputPorts().size());\n\n\t\tassertEquals(\"There should be 1 datalink\",1,dataflow.getLinks().size());\n\t}", "signature": "void testAddInputSplitterToWSDLActivity()", "full_signature": "@Ignore(\"Integration test\") @Test public void testAddInputSplitterToWSDLActivity()", "class_method_signature": "AddXMLSplitterEditTest.testAddInputSplitterToWSDLActivity()", "testcase": true, "constructor": false, "invocations": ["doEdit", "assertEquals", "size", "getProcessors", "getProcessors", "equals", "getLocalName", "assertNotNull", "assertEquals", "size", "getActivityList", "assertEquals", "size", "getInputPorts", "assertEquals", "size", "getOutputPorts", "get", "getActivityList", "assertEquals", "size", "getInputPorts", "assertEquals", "size", "getOutputPorts", "assertEquals", "size", "getLinks"]}, "focal_class": {"identifier": "AddXMLSplitterEdit", "superclass": "", "interfaces": "implements Edit<Dataflow>", "fields": [{"original_string": "private final Edits edits;", "modifier": "private final", "type": "Edits", "declarator": "edits", "var_name": "edits"}, {"original_string": "private final Activity<?> activity;", "modifier": "private final", "type": "Activity<?>", "declarator": "activity", "var_name": "activity"}, {"original_string": "private final String portName;", "modifier": "private final", "type": "String", "declarator": "portName", "var_name": "portName"}, {"original_string": "private final boolean isInput;", "modifier": "private final", "type": "boolean", "declarator": "isInput", "var_name": "isInput"}, {"original_string": "private CompoundEdit compoundEdit1 = null;", "modifier": "private", "type": "CompoundEdit", "declarator": "compoundEdit1 = null", "var_name": "compoundEdit1"}, {"original_string": "private Edit<?> linkUpEdit;", "modifier": "private", "type": "Edit<?>", "declarator": "linkUpEdit", "var_name": "linkUpEdit"}, {"original_string": "private final Dataflow dataflow;", "modifier": "private final", "type": "Dataflow", "declarator": "dataflow", "var_name": "dataflow"}, {"original_string": "private boolean applied = false;", "modifier": "private", "type": "boolean", "declarator": "applied = false", "var_name": "applied"}], "methods": [{"identifier": "AddXMLSplitterEdit", "parameters": "(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "modifiers": "public", "return": "", "signature": " AddXMLSplitterEdit(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "full_signature": "public  AddXMLSplitterEdit(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "class_method_signature": "AddXMLSplitterEdit.AddXMLSplitterEdit(Dataflow dataflow, Activity<?> activity,\n\t\t\tString portName, boolean isInput, Edits edits)", "testcase": false, "constructor": true}, {"identifier": "doEdit", "parameters": "()", "modifiers": "@Override public", "return": "Dataflow", "signature": "Dataflow doEdit()", "full_signature": "@Override public Dataflow doEdit()", "class_method_signature": "AddXMLSplitterEdit.doEdit()", "testcase": false, "constructor": false}, {"identifier": "getSinkPort", "parameters": "(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "modifiers": "private", "return": "EventHandlingInputPort", "signature": "EventHandlingInputPort getSinkPort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "full_signature": "private EventHandlingInputPort getSinkPort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "class_method_signature": "AddXMLSplitterEdit.getSinkPort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "testcase": false, "constructor": false}, {"identifier": "getSourcePort", "parameters": "(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "modifiers": "private", "return": "EventForwardingOutputPort", "signature": "EventForwardingOutputPort getSourcePort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "full_signature": "private EventForwardingOutputPort getSourcePort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "class_method_signature": "AddXMLSplitterEdit.getSourcePort(Processor processor, Activity<?> activity,\n\t\t\tString portName, List<Edit<?>> editList)", "testcase": false, "constructor": false}, {"identifier": "undo", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void undo()", "full_signature": "@Override public void undo()", "class_method_signature": "AddXMLSplitterEdit.undo()", "testcase": false, "constructor": false}, {"identifier": "isApplied", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplied()", "full_signature": "@Override public boolean isApplied()", "class_method_signature": "AddXMLSplitterEdit.isApplied()", "testcase": false, "constructor": false}, {"identifier": "findProcessorForActivity", "parameters": "(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "modifiers": "private", "return": "Processor", "signature": "Processor findProcessorForActivity(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "full_signature": "private Processor findProcessorForActivity(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "class_method_signature": "AddXMLSplitterEdit.findProcessorForActivity(Dataflow dataflow,\n\t\t\tActivity<?> activity)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getSubject()", "full_signature": "@Override public Object getSubject()", "class_method_signature": "AddXMLSplitterEdit.getSubject()", "testcase": false, "constructor": false}], "file": "taverna-wsdl-activity/src/main/java/org/apache/taverna/activities/wsdl/xmlsplitter/AddXMLSplitterEdit.java"}, "focal_method": {"identifier": "doEdit", "parameters": "()", "modifiers": "@Override public", "return": "Dataflow", "body": "@Override\n\tpublic Dataflow doEdit() throws EditException {\n\t\tif (applied) throw new EditException(\"Edit has already been applied!\");\n\t\tList<Edit<?>> editList = new ArrayList<Edit<?>>();\n\n\t\tActivity<JsonNode> splitter = null;\n\t\tString sourcePortName = \"\";\n\t\tProcessor sourceProcessor = null;\n\t\tActivity<?> sourceActivity = null;\n\n\t\tString sinkPortName = \"\";\n\t\tProcessor sinkProcessor = null;\n\t\tActivity<?> sinkActivity = null;\n\n\n\t\tProcessor activityProcessor = findProcessorForActivity(dataflow,\n\t\t\t\tactivity);\n\t\tif (activityProcessor == null) {\n\t\t\tthrow new EditException(\n\t\t\t\t\t\"Cannot find the processor that the activity belongs to\");\n\t\t}\n\n\n\t\tString displayName = portName;\n\t\tif (portName.equals(\"parameters\")) {\n\t\t\tdisplayName = isInput ? \"input\" : \"output\";\n\t\t}\n\t\tString processorName = activityProcessor.getLocalName();\n\t\tString candidateName;\n\t\tif (displayName.startsWith(processorName)) {\n\t\t\t// No need to make GetRequest_GetRequestResponse\n\t\t\tcandidateName = displayName;\n\t\t} else {\n\t\t\t// Combine with processor name\n\t\t\tString displayProcessorName;\n\t\t\tif (activity instanceof XMLOutputSplitterActivity || activity instanceof XMLInputSplitterActivity) {\n\t\t\t\t// For splitters on splitters - avoid adding up blah_bluh_blih_more_stuff\n\t\t\t\tString[] processorNameSplit = processorName.replace(\"_input\", \"\").replace(\"_output\", \"\").split(\"_\");\n\t\t\t\tdisplayProcessorName = processorNameSplit[processorNameSplit.length-1];\n\t\t\t} else {\n\t\t\t\tdisplayProcessorName = activityProcessor.getLocalName();\n\t\t\t}\n\t\t\tcandidateName = displayProcessorName + \"_\" + displayName;\n\t\t}\n\t\tString name = Tools.uniqueProcessorName(candidateName, dataflow);\n\t\tProcessor splitterProcessor = edits.createProcessor(name);\n\n\t\ttry {\n\t\t\tif (activity instanceof XMLInputSplitterActivity) {\n\t\t\t\tif (!isInput) {\n\t\t\t\t\tthrow new EditException(\n\t\t\t\t\t\t\t\"Can only add an input splitter to another input splitter\");\n\t\t\t\t}\n\t\t\t\tTypeDescriptor descriptor = ((XMLInputSplitterActivity) activity)\n\t\t\t\t\t\t.getTypeDescriptorForInputPort(portName);\n\t\t\t\tif (descriptor instanceof ArrayTypeDescriptor && !((ArrayTypeDescriptor)descriptor).isWrapped()) {\n\t\t\t\t\tdescriptor=((ArrayTypeDescriptor)descriptor).getElementType();\n\t\t\t\t}\n\n\t\t\t\tJsonNode bean = XMLSplitterConfigurationBeanBuilder\n\t\t\t\t\t\t.buildBeanForInput(descriptor);\n\t\t\t\tsplitter = new XMLInputSplitterActivity();\n\t\t\t\teditList.add(edits.getConfigureActivityEdit(splitter, bean));\n\n\t\t\t} else if (activity instanceof XMLOutputSplitterActivity) {\n\t\t\t\tif (isInput) {\n\t\t\t\t\tthrow new EditException(\n\t\t\t\t\t\t\t\"Can only add an output splitter to another output splitter\");\n\t\t\t\t}\n\t\t\t\tTypeDescriptor descriptor = ((XMLOutputSplitterActivity) activity)\n\t\t\t\t\t\t.getTypeDescriptorForOutputPort(portName);\n\n\t\t\t\tif (descriptor instanceof ArrayTypeDescriptor && !((ArrayTypeDescriptor)descriptor).isWrapped()) {\n\t\t\t\t\tdescriptor=((ArrayTypeDescriptor)descriptor).getElementType();\n\t\t\t\t}\n\n\t\t\t\tJsonNode bean = XMLSplitterConfigurationBeanBuilder\n\t\t\t\t\t\t.buildBeanForOutput(descriptor);\n\t\t\t\tsplitter = new XMLOutputSplitterActivity();\n\t\t\t\teditList.add(edits.getConfigureActivityEdit(splitter, bean));\n\n\t\t\t} else if (activity instanceof WSDLActivity) {\n\t\t\t\tif (isInput) {\n\t\t\t\t\tTypeDescriptor descriptor = ((WSDLActivity) activity)\n\t\t\t\t\t\t\t.getTypeDescriptorForInputPort(portName);\n\t\t\t\t\tJsonNode bean = XMLSplitterConfigurationBeanBuilder\n\t\t\t\t\t\t\t.buildBeanForInput(descriptor);\n\t\t\t\t\tsplitter = new XMLInputSplitterActivity();\n\t\t\t\t\teditList\n\t\t\t\t\t\t\t.add(edits.getConfigureActivityEdit(splitter, bean));\n\t\t\t\t} else {\n\t\t\t\t\tTypeDescriptor descriptor = ((WSDLActivity) activity)\n\t\t\t\t\t\t\t.getTypeDescriptorForOutputPort(portName);\n\t\t\t\t\tJsonNode bean = XMLSplitterConfigurationBeanBuilder\n\t\t\t\t\t\t\t.buildBeanForOutput(descriptor);\n\t\t\t\t\tsplitter = new XMLOutputSplitterActivity();\n\t\t\t\t\teditList\n\t\t\t\t\t\t\t.add(edits.getConfigureActivityEdit(splitter, bean));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new EditException(\n\t\t\t\t\t\t\"The activity type is not suitable for adding xml processing processors\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new EditException(\n\t\t\t\t\t\"An error occured whilst tyring to add an XMLSplitter to the activity:\"\n\t\t\t\t\t\t\t+ activity, e);\n\t\t}\n\n\t\tif (isInput) {\n\t\t\tsourcePortName = \"output\";\n\t\t\tsinkPortName = portName;\n\t\t\tsinkProcessor = activityProcessor;\n\t\t\tsinkActivity = activity;\n\t\t\tsourceProcessor = splitterProcessor;\n\t\t\tsourceActivity = splitter;\n\t\t}\n\t\telse {\n\t\t\tsourcePortName = portName;\n\t\t\tsinkPortName = \"input\";\n\t\t\tsinkProcessor = splitterProcessor;\n\t\t\tsinkActivity = splitter;\n\t\t\tsourceProcessor = activityProcessor;\n\t\t\tsourceActivity = activity;\n\t\t}\n\n\t\teditList.add(edits.getDefaultDispatchStackEdit(splitterProcessor));\n\t\teditList.add(edits.getAddActivityEdit(splitterProcessor, splitter));\n//\t\teditList.add(edits\n//\t\t\t\t.getMapProcessorPortsForActivityEdit(splitterProcessor));\n\t\teditList.add(edits.getAddProcessorEdit(dataflow, splitterProcessor));\n\n\t\tcompoundEdit1 = new CompoundEdit(editList);\n\t\tcompoundEdit1.doEdit();\n\n\t\tList<Edit<?>> linkUpEditList = new ArrayList<Edit<?>>();\n\n\t\tEventForwardingOutputPort source = getSourcePort(sourceProcessor, sourceActivity,\n\t\t\t\tsourcePortName, linkUpEditList);\n\t\tEventHandlingInputPort sink = getSinkPort(sinkProcessor, sinkActivity, sinkPortName, linkUpEditList);\n\n\t\tif (source == null)\n\t\t\tthrow new EditException(\n\t\t\t\t\t\"Unable to find the source port when linking up \"\n\t\t\t\t\t\t\t+ sourcePortName + \" to \" + sinkPortName);\n\t\tif (sink == null)\n\t\t\tthrow new EditException(\n\t\t\t\t\t\"Unable to find the sink port when linking up \"\n\t\t\t\t\t\t\t+ sourcePortName + \" to \" + sinkPortName);\n\n\t\tlinkUpEditList.add(org.apache.taverna.workflowmodel.utils.Tools.getCreateAndConnectDatalinkEdit(dataflow, source, sink, edits));\n\n\t\tlinkUpEdit = new CompoundEdit(linkUpEditList);\n\t\tlinkUpEdit.doEdit();\n\t\tapplied = true;\n\t\treturn dataflow;\n\t}", "signature": "Dataflow doEdit()", "full_signature": "@Override public Dataflow doEdit()", "class_method_signature": "AddXMLSplitterEdit.doEdit()", "testcase": false, "constructor": false, "invocations": ["findProcessorForActivity", "equals", "getLocalName", "startsWith", "split", "replace", "replace", "getLocalName", "uniqueProcessorName", "createProcessor", "getTypeDescriptorForInputPort", "isWrapped", "getElementType", "buildBeanForInput", "add", "getConfigureActivityEdit", "getTypeDescriptorForOutputPort", "isWrapped", "getElementType", "buildBeanForOutput", "add", "getConfigureActivityEdit", "getTypeDescriptorForInputPort", "buildBeanForInput", "add", "getConfigureActivityEdit", "getTypeDescriptorForOutputPort", "buildBeanForOutput", "add", "getConfigureActivityEdit", "add", "getDefaultDispatchStackEdit", "add", "getAddActivityEdit", "add", "getAddProcessorEdit", "doEdit", "getSourcePort", "getSinkPort", "add", "getCreateAndConnectDatalinkEdit", "doEdit"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}