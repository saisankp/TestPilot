{"test_class": {"identifier": "AccuracyTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/selection/scoring/metric/classification/AccuracyTest.java"}, "test_case": {"identifier": "testScore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScore() {\n        Metric<Integer> scoreCalculator = new Accuracy<>();\n\n        LabelPairCursor<Integer> cursor = new TestLabelPairCursor<>(\n            Arrays.asList(1, 1, 1, 1),\n            Arrays.asList(1, 1, 0, 1)\n        );\n\n        double score = scoreCalculator.score(cursor.iterator());\n\n        assertEquals(0.75, score, 1e-12);\n    }", "signature": "void testScore()", "full_signature": "@Test public void testScore()", "class_method_signature": "AccuracyTest.testScore()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "score", "iterator", "assertEquals"]}, "focal_class": {"identifier": "Accuracy", "superclass": "", "interfaces": "implements Metric<L>", "fields": [], "methods": [{"identifier": "score", "parameters": "(Iterator<LabelPair<L>> iter)", "modifiers": "@Override public", "return": "double", "signature": "double score(Iterator<LabelPair<L>> iter)", "full_signature": "@Override public double score(Iterator<LabelPair<L>> iter)", "class_method_signature": "Accuracy.score(Iterator<LabelPair<L>> iter)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "Accuracy.name()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/selection/scoring/metric/classification/Accuracy.java"}, "focal_method": {"identifier": "score", "parameters": "(Iterator<LabelPair<L>> iter)", "modifiers": "@Override public", "return": "double", "body": "@Override public double score(Iterator<LabelPair<L>> iter) {\n        long totalCnt = 0;\n        long correctCnt = 0;\n\n        while (iter.hasNext()) {\n            LabelPair<L> e = iter.next();\n\n            L prediction = e.getPrediction();\n            L truth = e.getTruth();\n\n            if (prediction.equals(truth))\n                correctCnt++;\n\n            totalCnt++;\n        }\n\n        return 1.0 * correctCnt / totalCnt;\n    }", "signature": "double score(Iterator<LabelPair<L>> iter)", "full_signature": "@Override public double score(Iterator<LabelPair<L>> iter)", "class_method_signature": "Accuracy.score(Iterator<LabelPair<L>> iter)", "testcase": false, "constructor": false, "invocations": ["hasNext", "next", "getPrediction", "getTruth", "equals"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}