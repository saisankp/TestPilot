{"test_class": {"identifier": "MultiplicativeIntervalForecasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private MultiplicativeIntervalForecaster forecasterUnderTest;", "modifier": "private", "type": "MultiplicativeIntervalForecaster", "declarator": "forecasterUnderTest", "var_name": "forecasterUnderTest"}, {"original_string": "@Mock\n    private MetricData metricDataDummy;", "modifier": "@Mock\n    private", "type": "MetricData", "declarator": "metricDataDummy", "var_name": "metricDataDummy"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/interval/algo/multiplicative/MultiplicativeIntervalForecasterTest.java"}, "test_case": {"identifier": "testForecast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testForecast() {\n        val params = forecasterUnderTest.getParams();\n        val pointForecast = 132.4;\n        val forecastResult = forecasterUnderTest.forecast(metricDataDummy, pointForecast);\n\n        assertEquals(pointForecast * (1.0 + params.getStrongMultiplier()), forecastResult.getUpperStrong(), TOLERANCE);\n        assertEquals(pointForecast * (1.0 + params.getWeakMultiplier()), forecastResult.getUpperWeak(), TOLERANCE);\n        assertEquals(pointForecast * (1.0 - params.getWeakMultiplier()), forecastResult.getLowerWeak(), TOLERANCE);\n        assertEquals(pointForecast * (1.0 - params.getStrongMultiplier()), forecastResult.getLowerStrong(), TOLERANCE);\n    }", "signature": "void testForecast()", "full_signature": "@Test public void testForecast()", "class_method_signature": "MultiplicativeIntervalForecasterTest.testForecast()", "testcase": true, "constructor": false, "invocations": ["getParams", "forecast", "assertEquals", "getStrongMultiplier", "getUpperStrong", "assertEquals", "getWeakMultiplier", "getUpperWeak", "assertEquals", "getWeakMultiplier", "getLowerWeak", "assertEquals", "getStrongMultiplier", "getLowerStrong"]}, "focal_class": {"identifier": "MultiplicativeIntervalForecaster", "superclass": "", "interfaces": "implements IntervalForecaster", "fields": [{"original_string": "@Getter\n    @NonNull\n    private MultiplicativeIntervalForecasterParams params;", "modifier": "@Getter\n    @NonNull\n    private", "type": "MultiplicativeIntervalForecasterParams", "declarator": "params", "var_name": "params"}], "methods": [{"identifier": "forecast", "parameters": "(MetricData metricData, double pointForecast)", "modifiers": "@Override public", "return": "IntervalForecast", "signature": "IntervalForecast forecast(MetricData metricData, double pointForecast)", "full_signature": "@Override public IntervalForecast forecast(MetricData metricData, double pointForecast)", "class_method_signature": "MultiplicativeIntervalForecaster.forecast(MetricData metricData, double pointForecast)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/interval/algo/multiplicative/MultiplicativeIntervalForecaster.java"}, "focal_method": {"identifier": "forecast", "parameters": "(MetricData metricData, double pointForecast)", "modifiers": "@Override public", "return": "IntervalForecast", "body": "@Override\n    public IntervalForecast forecast(MetricData metricData, double pointForecast) {\n        notNull(metricData, \"metricData can't be null\");\n        return new IntervalForecast(\n                pointForecast * (1.0 + params.getStrongMultiplier()),\n                pointForecast * (1.0 + params.getWeakMultiplier()),\n                pointForecast * (1.0 - params.getWeakMultiplier()),\n                pointForecast * (1.0 - params.getStrongMultiplier()));\n    }", "signature": "IntervalForecast forecast(MetricData metricData, double pointForecast)", "full_signature": "@Override public IntervalForecast forecast(MetricData metricData, double pointForecast)", "class_method_signature": "MultiplicativeIntervalForecaster.forecast(MetricData metricData, double pointForecast)", "testcase": false, "constructor": false, "invocations": ["notNull", "getStrongMultiplier", "getWeakMultiplier", "getWeakMultiplier", "getStrongMultiplier"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}