{"test_class": {"identifier": "ClassUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String stringProp;", "modifier": "private", "type": "String", "declarator": "stringProp", "var_name": "stringProp"}, {"original_string": "private int intProp;", "modifier": "private", "type": "int", "declarator": "intProp", "var_name": "intProp"}], "file": "agent/core/src/test/java/org/jolokia/util/ClassUtilTest.java"}, "test_case": {"identifier": "testNewInstanceNotFound", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalArgumentException.class,expectedExceptionsMessageRegExp = \".*Blub.*\") public", "return": "void", "body": "@Test(expectedExceptions = IllegalArgumentException.class,expectedExceptionsMessageRegExp = \".*Blub.*\")\n    public void testNewInstanceNotFound() {\n        ClassUtil.newInstance(getClass().getCanonicalName() + \"$Blub\");\n    }", "signature": "void testNewInstanceNotFound()", "full_signature": "@Test(expectedExceptions = IllegalArgumentException.class,expectedExceptionsMessageRegExp = \".*Blub.*\") public void testNewInstanceNotFound()", "class_method_signature": "ClassUtilTest.testNewInstanceNotFound()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getCanonicalName", "getClass"]}, "focal_class": {"identifier": "ClassUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String,Class> PRIMITIVE_TO_OBJECT_MAP = new HashMap<String, Class>();", "modifier": "private static final", "type": "Map<String,Class>", "declarator": "PRIMITIVE_TO_OBJECT_MAP = new HashMap<String, Class>()", "var_name": "PRIMITIVE_TO_OBJECT_MAP"}], "methods": [{"identifier": "ClassUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ClassUtil()", "full_signature": "private  ClassUtil()", "class_method_signature": "ClassUtil.ClassUtil()", "testcase": false, "constructor": true}, {"identifier": "classForName", "parameters": "(String pClassName, ClassLoader ... pClassLoaders)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> classForName(String pClassName, ClassLoader ... pClassLoaders)", "full_signature": "public static Class<T> classForName(String pClassName, ClassLoader ... pClassLoaders)", "class_method_signature": "ClassUtil.classForName(String pClassName, ClassLoader ... pClassLoaders)", "testcase": false, "constructor": false}, {"identifier": "classForName", "parameters": "(String pClassName,boolean pInitialize,ClassLoader ... pClassLoaders)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> classForName(String pClassName,boolean pInitialize,ClassLoader ... pClassLoaders)", "full_signature": "public static Class<T> classForName(String pClassName,boolean pInitialize,ClassLoader ... pClassLoaders)", "class_method_signature": "ClassUtil.classForName(String pClassName,boolean pInitialize,ClassLoader ... pClassLoaders)", "testcase": false, "constructor": false}, {"identifier": "findClassLoaders", "parameters": "(ClassLoader... pClassLoaders)", "modifiers": "private static", "return": "List<ClassLoader>", "signature": "List<ClassLoader> findClassLoaders(ClassLoader... pClassLoaders)", "full_signature": "private static List<ClassLoader> findClassLoaders(ClassLoader... pClassLoaders)", "class_method_signature": "ClassUtil.findClassLoaders(ClassLoader... pClassLoaders)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String pPath)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream(String pPath)", "full_signature": "public static InputStream getResourceAsStream(String pPath)", "class_method_signature": "ClassUtil.getResourceAsStream(String pPath)", "testcase": false, "constructor": false}, {"identifier": "checkForClass", "parameters": "(String pClassName)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkForClass(String pClassName)", "full_signature": "public static boolean checkForClass(String pClassName)", "class_method_signature": "ClassUtil.checkForClass(String pClassName)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String pClassName, Object ... pArguments)", "modifiers": "public static", "return": "T", "signature": "T newInstance(String pClassName, Object ... pArguments)", "full_signature": "public static T newInstance(String pClassName, Object ... pArguments)", "class_method_signature": "ClassUtil.newInstance(String pClassName, Object ... pArguments)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> pClass, Object ... pArguments)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> pClass, Object ... pArguments)", "full_signature": "public static T newInstance(Class<T> pClass, Object ... pArguments)", "class_method_signature": "ClassUtil.newInstance(Class<T> pClass, Object ... pArguments)", "testcase": false, "constructor": false}, {"identifier": "applyMethod", "parameters": "(Object pObject, String pMethod, Object ... pArgs)", "modifiers": "public static", "return": "Object", "signature": "Object applyMethod(Object pObject, String pMethod, Object ... pArgs)", "full_signature": "public static Object applyMethod(Object pObject, String pMethod, Object ... pArgs)", "class_method_signature": "ClassUtil.applyMethod(Object pObject, String pMethod, Object ... pArgs)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "(String pResource)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getResources(String pResource)", "full_signature": "public static Set<String> getResources(String pResource)", "class_method_signature": "ClassUtil.getResources(String pResource)", "testcase": false, "constructor": false}, {"identifier": "extractUrlAsStringsFromEnumeration", "parameters": "(Enumeration<URL> urlEnum)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> extractUrlAsStringsFromEnumeration(Enumeration<URL> urlEnum)", "full_signature": "private static Set<String> extractUrlAsStringsFromEnumeration(Enumeration<URL> urlEnum)", "class_method_signature": "ClassUtil.extractUrlAsStringsFromEnumeration(Enumeration<URL> urlEnum)", "testcase": false, "constructor": false}, {"identifier": "lookupConstructor", "parameters": "(Class<T> clazz, Object[] pArguments)", "modifiers": "private static", "return": "Constructor<T>", "signature": "Constructor<T> lookupConstructor(Class<T> clazz, Object[] pArguments)", "full_signature": "private static Constructor<T> lookupConstructor(Class<T> clazz, Object[] pArguments)", "class_method_signature": "ClassUtil.lookupConstructor(Class<T> clazz, Object[] pArguments)", "testcase": false, "constructor": false}, {"identifier": "extractMethod", "parameters": "(String pMethod, Class<?> clazz, Object[] pArgs)", "modifiers": "private static", "return": "Method", "signature": "Method extractMethod(String pMethod, Class<?> clazz, Object[] pArgs)", "full_signature": "private static Method extractMethod(String pMethod, Class<?> clazz, Object[] pArgs)", "class_method_signature": "ClassUtil.extractMethod(String pMethod, Class<?> clazz, Object[] pArgs)", "testcase": false, "constructor": false}, {"identifier": "extractArgumentTypes", "parameters": "(Object[] pArguments)", "modifiers": "private static", "return": "Class[]", "signature": "Class[] extractArgumentTypes(Object[] pArguments)", "full_signature": "private static Class[] extractArgumentTypes(Object[] pArguments)", "class_method_signature": "ClassUtil.extractArgumentTypes(Object[] pArguments)", "testcase": false, "constructor": false}, {"identifier": "parametersMatch", "parameters": "(Class[] parameters, Object[] pArgs)", "modifiers": "private static", "return": "boolean", "signature": "boolean parametersMatch(Class[] parameters, Object[] pArgs)", "full_signature": "private static boolean parametersMatch(Class[] parameters, Object[] pArgs)", "class_method_signature": "ClassUtil.parametersMatch(Class[] parameters, Object[] pArgs)", "testcase": false, "constructor": false}, {"identifier": "checkForPrimitive", "parameters": "(Class argClass, Class paramClass)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkForPrimitive(Class argClass, Class paramClass)", "full_signature": "private static boolean checkForPrimitive(Class argClass, Class paramClass)", "class_method_signature": "ClassUtil.checkForPrimitive(Class argClass, Class paramClass)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/ClassUtil.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(String pClassName, Object ... pArguments)", "modifiers": "public static", "return": "T", "body": "public static <T> T newInstance(String pClassName, Object ... pArguments) {\n        Class<T> clazz = classForName(pClassName);\n        if (clazz == null) {\n            throw new IllegalArgumentException(\"Cannot find \" + pClassName);\n        }\n        return newInstance(clazz, pArguments);\n    }", "signature": "T newInstance(String pClassName, Object ... pArguments)", "full_signature": "public static T newInstance(String pClassName, Object ... pArguments)", "class_method_signature": "ClassUtil.newInstance(String pClassName, Object ... pArguments)", "testcase": false, "constructor": false, "invocations": ["classForName", "newInstance"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}