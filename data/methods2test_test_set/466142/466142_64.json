{"test_class": {"identifier": "TestStatementCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IStatementCache mockCache;", "modifier": "private", "type": "IStatementCache", "declarator": "mockCache", "var_name": "mockCache"}, {"original_string": "private Logger mockLogger;", "modifier": "private", "type": "Logger", "declarator": "mockLogger", "var_name": "mockLogger"}, {"original_string": "private BoneCPConfig config;", "modifier": "private", "type": "BoneCPConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private MockJDBCDriver driver;", "modifier": "private", "type": "MockJDBCDriver", "declarator": "driver", "var_name": "driver"}], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestStatementCache.java"}, "test_case": {"identifier": "testStatementCacheClear", "parameters": "()", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test public", "return": "void", "body": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\t@Test\n\tpublic void testStatementCacheClear() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, SQLException {\n\t\tConcurrentMap mockCache = createNiceMock(ConcurrentMap.class);\n\t\tList<StatementHandle> mockStatementCollections = createNiceMock(List.class);\n\t\tStatementCache testClass = new StatementCache(1, false, null);\n\t\tField field = testClass.getClass().getDeclaredField(\"cache\");\n\t\tfield.setAccessible(true);\n\t\tfield.set(testClass, mockCache);\n\t\t\n\t\tIterator<StatementHandle> mockIterator = createNiceMock(Iterator.class);\n\t\tStatementHandle mockStatement = createNiceMock(StatementHandle.class);\n\t\t\n\t\texpect(mockCache.values()).andReturn(mockStatementCollections).anyTimes();\n\t\texpect(mockStatementCollections.iterator()).andReturn(mockIterator).anyTimes();\n\t\texpect(mockIterator.hasNext()).andReturn(true).times(2).andReturn(false).once();\n\t\texpect(mockIterator.next()).andReturn(mockStatement).anyTimes();\n\t\tmockStatement.close();\n\t\texpectLastCall().once().andThrow(new SQLException()).once();\n\t\t\n\t\tmockCache.clear();\n\t\texpectLastCall().once();\n\t\treplay(mockCache, mockStatementCollections, mockIterator,mockStatement);\n\t\t\n\t\ttestClass.clear();\n\t\tverify(mockCache, mockStatement);\n\t\t\n\t}", "signature": "void testStatementCacheClear()", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Test public void testStatementCacheClear()", "class_method_signature": "TestStatementCache.testStatementCacheClear()", "testcase": true, "constructor": false, "invocations": ["createNiceMock", "createNiceMock", "getDeclaredField", "getClass", "setAccessible", "set", "createNiceMock", "createNiceMock", "anyTimes", "andReturn", "expect", "values", "anyTimes", "andReturn", "expect", "iterator", "once", "andReturn", "times", "andReturn", "expect", "hasNext", "anyTimes", "andReturn", "expect", "next", "close", "once", "andThrow", "once", "expectLastCall", "clear", "once", "expectLastCall", "replay", "clear", "verify"]}, "focal_class": {"identifier": "StatementCache", "superclass": "", "interfaces": "implements IStatementCache", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(StatementCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StatementCache.class)", "var_name": "logger"}, {"original_string": "private ConcurrentMap<String, StatementHandle> cache;", "modifier": "private", "type": "ConcurrentMap<String, StatementHandle>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private int cacheSize;", "modifier": "private", "type": "int", "declarator": "cacheSize", "var_name": "cacheSize"}, {"original_string": "private final boolean maintainStats;", "modifier": "private final", "type": "boolean", "declarator": "maintainStats", "var_name": "maintainStats"}, {"original_string": "private final Statistics statistics;", "modifier": "private final", "type": "Statistics", "declarator": "statistics", "var_name": "statistics"}], "methods": [{"identifier": "StatementCache", "parameters": "(int size, boolean maintainStats, Statistics statistics)", "modifiers": "public", "return": "", "signature": " StatementCache(int size, boolean maintainStats, Statistics statistics)", "full_signature": "public  StatementCache(int size, boolean maintainStats, Statistics statistics)", "class_method_signature": "StatementCache.StatementCache(int size, boolean maintainStats, Statistics statistics)", "testcase": false, "constructor": true}, {"identifier": "calculateCacheKey", "parameters": "(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "modifiers": "public", "return": "String", "signature": "String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "full_signature": "public String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "class_method_signature": "StatementCache.calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "testcase": false, "constructor": false}, {"identifier": "calculateCacheKey", "parameters": "(String sql, int resultSetType, int resultSetConcurrency)", "modifiers": "public", "return": "String", "signature": "String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency)", "full_signature": "public String calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency)", "class_method_signature": "StatementCache.calculateCacheKey(String sql, int resultSetType, int resultSetConcurrency)", "testcase": false, "constructor": false}, {"identifier": "calculateCacheKeyInternal", "parameters": "(String sql,\n\t\t\tint resultSetType, int resultSetConcurrency)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder calculateCacheKeyInternal(String sql,\n\t\t\tint resultSetType, int resultSetConcurrency)", "full_signature": "private StringBuilder calculateCacheKeyInternal(String sql,\n\t\t\tint resultSetType, int resultSetConcurrency)", "class_method_signature": "StatementCache.calculateCacheKeyInternal(String sql,\n\t\t\tint resultSetType, int resultSetConcurrency)", "testcase": false, "constructor": false}, {"identifier": "calculateCacheKey", "parameters": "(String sql, int autoGeneratedKeys)", "modifiers": "public", "return": "String", "signature": "String calculateCacheKey(String sql, int autoGeneratedKeys)", "full_signature": "public String calculateCacheKey(String sql, int autoGeneratedKeys)", "class_method_signature": "StatementCache.calculateCacheKey(String sql, int autoGeneratedKeys)", "testcase": false, "constructor": false}, {"identifier": "calculateCacheKey", "parameters": "(String sql, int[] columnIndexes)", "modifiers": "public", "return": "String", "signature": "String calculateCacheKey(String sql, int[] columnIndexes)", "full_signature": "public String calculateCacheKey(String sql, int[] columnIndexes)", "class_method_signature": "StatementCache.calculateCacheKey(String sql, int[] columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "calculateCacheKey", "parameters": "(String sql, String[] columnNames)", "modifiers": "public", "return": "String", "signature": "String calculateCacheKey(String sql, String[] columnNames)", "full_signature": "public String calculateCacheKey(String sql, String[] columnNames)", "class_method_signature": "StatementCache.calculateCacheKey(String sql, String[] columnNames)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "StatementHandle", "signature": "StatementHandle get(String key)", "full_signature": "public StatementHandle get(String key)", "class_method_signature": "StatementCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "modifiers": "public", "return": "StatementHandle", "signature": "StatementHandle get(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "full_signature": "public StatementHandle get(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "class_method_signature": "StatementCache.get(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String sql, int resultSetType, int resultSetConcurrency)", "modifiers": "public", "return": "StatementHandle", "signature": "StatementHandle get(String sql, int resultSetType, int resultSetConcurrency)", "full_signature": "public StatementHandle get(String sql, int resultSetType, int resultSetConcurrency)", "class_method_signature": "StatementCache.get(String sql, int resultSetType, int resultSetConcurrency)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String sql, int autoGeneratedKeys)", "modifiers": "public", "return": "StatementHandle", "signature": "StatementHandle get(String sql, int autoGeneratedKeys)", "full_signature": "public StatementHandle get(String sql, int autoGeneratedKeys)", "class_method_signature": "StatementCache.get(String sql, int autoGeneratedKeys)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String sql, int[] columnIndexes)", "modifiers": "public", "return": "StatementHandle", "signature": "StatementHandle get(String sql, int[] columnIndexes)", "full_signature": "public StatementHandle get(String sql, int[] columnIndexes)", "class_method_signature": "StatementCache.get(String sql, int[] columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String sql, String[] columnNames)", "modifiers": "public", "return": "StatementHandle", "signature": "StatementHandle get(String sql, String[] columnNames)", "full_signature": "public StatementHandle get(String sql, String[] columnNames)", "class_method_signature": "StatementCache.get(String sql, String[] columnNames)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "StatementCache.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "StatementCache.clear()", "testcase": false, "constructor": false}, {"identifier": "checkForProperClosure", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkForProperClosure()", "full_signature": "public void checkForProperClosure()", "class_method_signature": "StatementCache.checkForProperClosure()", "testcase": false, "constructor": false}, {"identifier": "putIfAbsent", "parameters": "(String key, StatementHandle handle)", "modifiers": "public", "return": "void", "signature": "void putIfAbsent(String key, StatementHandle handle)", "full_signature": "public void putIfAbsent(String key, StatementHandle handle)", "class_method_signature": "StatementCache.putIfAbsent(String key, StatementHandle handle)", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/StatementCache.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void clear() {\n\t\tfor (StatementHandle statement: this.cache.values()){\n\t\t\ttry {\n\t\t\t\tif (!statement.isClosed()){ \n\t\t\t\t\tstatement.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// don't log, we might fail if the connection link has died\n\t\t\t\t// logger.error(\"Error closing off statement\", e);\n\t\t\t}\n\t\t}\n\t\tthis.cache.clear();\n\t}", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "StatementCache.clear()", "testcase": false, "constructor": false, "invocations": ["values", "isClosed", "close", "clear"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}