{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-meris-l2auxdata/src/test/java/org/esa/s3tbx/meris/l2auxdata/UtilsTest.java"}, "test_case": {"identifier": "testSeasonalFactorComputation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSeasonalFactorComputation() {\n        double meanEarthSunDist = 149.60e+06 * 1000;\n        final double sunEarthDistanceSquare = meanEarthSunDist * meanEarthSunDist;\n\n        final double vStart = Utils.computeSeasonalFactor(0, sunEarthDistanceSquare);\n        assertEquals(1, vStart, 0.05);\n        assertTrue(vStart < 1.0);\n\n        final double vMid = Utils.computeSeasonalFactor(0.5 * 365, sunEarthDistanceSquare);\n        assertEquals(1, vMid, 0.05);\n        assertTrue(vMid > 1.0);\n\n        final double vEnd = Utils.computeSeasonalFactor(365, sunEarthDistanceSquare);\n        assertEquals(1, vEnd, 0.05);\n        assertTrue(vEnd < 1.0);\n    }", "signature": "void testSeasonalFactorComputation()", "full_signature": "@Test public void testSeasonalFactorComputation()", "class_method_signature": "UtilsTest.testSeasonalFactorComputation()", "testcase": true, "constructor": false, "invocations": ["computeSeasonalFactor", "assertEquals", "assertTrue", "computeSeasonalFactor", "assertEquals", "assertTrue", "computeSeasonalFactor", "assertEquals", "assertTrue"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Utils", "parameters": "()", "modifiers": "private", "return": "", "signature": " Utils()", "full_signature": "private  Utils()", "class_method_signature": "Utils.Utils()", "testcase": false, "constructor": true}, {"identifier": "computeSeasonalFactor", "parameters": "(double daysSince2000, double sunEarthDistanceSquare)", "modifiers": "public static", "return": "double", "signature": "double computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "full_signature": "public static double computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "class_method_signature": "Utils.computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "testcase": false, "constructor": false}, {"identifier": "isProductRR", "parameters": "(Product product)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProductRR(Product product)", "full_signature": "public static boolean isProductRR(Product product)", "class_method_signature": "Utils.isProductRR(Product product)", "testcase": false, "constructor": false}, {"identifier": "isProductFR", "parameters": "(Product product)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProductFR(Product product)", "full_signature": "public static boolean isProductFR(Product product)", "class_method_signature": "Utils.isProductFR(Product product)", "testcase": false, "constructor": false}, {"identifier": "downloadAndInstallAuxdata", "parameters": "(Path targetDir, URL remoteZipFileUrl)", "modifiers": "static", "return": "void", "signature": "void downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "full_signature": "static void downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "class_method_signature": "Utils.downloadAndInstallAuxdata(Path targetDir, URL remoteZipFileUrl)", "testcase": false, "constructor": false}], "file": "s3tbx-meris-l2auxdata/src/main/java/org/esa/s3tbx/meris/l2auxdata/Utils.java"}, "focal_method": {"identifier": "computeSeasonalFactor", "parameters": "(double daysSince2000, double sunEarthDistanceSquare)", "modifiers": "public static", "return": "double", "body": "public static double computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare) {\n        // Semi-major axis of ellipse Earth orbit around Sun in meters\n        final double a = 149597870.0 * 1000.0;\n        // Eccentricity of ellipse Earth orbit around Sun\n        final double e = 0.017;\n        // Perihelion in 2000 was the 03.01.2000 05:00\n        final double daysToPerihelionIn2000 = 3.0 + 5.0 / 24.0;\n        final double daysOfYear = 365.25;\n        final double theta = 2 * Math.PI * ((daysSince2000 - daysToPerihelionIn2000) / daysOfYear);\n        final double r = a * (1.0 - e * e) / (1.0 + e * Math.cos(theta));\n        return r * r / sunEarthDistanceSquare;\n    }", "signature": "double computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "full_signature": "public static double computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "class_method_signature": "Utils.computeSeasonalFactor(double daysSince2000, double sunEarthDistanceSquare)", "testcase": false, "constructor": false, "invocations": ["cos"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}