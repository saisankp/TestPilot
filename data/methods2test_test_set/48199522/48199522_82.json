{"test_class": {"identifier": "LinearInterpolatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] x;", "modifier": "private", "type": "double[]", "declarator": "x", "var_name": "x"}, {"original_string": "private double[] y;", "modifier": "private", "type": "double[]", "declarator": "y", "var_name": "y"}], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/classify/stats/LinearInterpolatorTest.java"}, "test_case": {"identifier": "testEvaluate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluate() throws Exception {\n        LinearInterpolator interpolator = new LinearInterpolator(x, y);\n        double result;\n\n        result = interpolator.evaluate(-3);\n        assertEquals(Double.NaN, result, 0.01);\n\n        result = interpolator.evaluate(-2);\n        assertEquals(1.0, result, 0.01);\n\n        result = interpolator.evaluate(-1);\n        assertEquals(2.0, result, 0.01);\n\n        result = interpolator.evaluate(0);\n        assertEquals(3.0, result, 0.01);\n\n        result = interpolator.evaluate(0.5);\n        assertEquals(3.0, result, 0.01);\n\n        result = interpolator.evaluate(1);\n        assertEquals(3.0, result, 0.01);\n\n        result = interpolator.evaluate(1.5);\n        assertEquals(5.0, result, 0.01);\n\n        result = interpolator.evaluate(3);\n        assertEquals(-1.0, result, 0.01);\n\n        result = interpolator.evaluate(3.5);\n        assertEquals(Double.NaN, result, 0.01);\n    }", "signature": "void testEvaluate()", "full_signature": "@Test public void testEvaluate()", "class_method_signature": "LinearInterpolatorTest.testEvaluate()", "testcase": true, "constructor": false, "invocations": ["evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals", "evaluate", "assertEquals"]}, "focal_class": {"identifier": "LinearInterpolator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] x;", "modifier": "private", "type": "double[]", "declarator": "x", "var_name": "x"}, {"original_string": "private double[] y;", "modifier": "private", "type": "double[]", "declarator": "y", "var_name": "y"}], "methods": [{"identifier": "LinearInterpolator", "parameters": "(double[] x, double[] y)", "modifiers": "public", "return": "", "signature": " LinearInterpolator(double[] x, double[] y)", "full_signature": "public  LinearInterpolator(double[] x, double[] y)", "class_method_signature": "LinearInterpolator.LinearInterpolator(double[] x, double[] y)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(double value)", "modifiers": "public", "return": "double", "signature": "double evaluate(double value)", "full_signature": "public double evaluate(double value)", "class_method_signature": "LinearInterpolator.evaluate(double value)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/classify/stats/LinearInterpolator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(double value)", "modifiers": "public", "return": "double", "body": "public double evaluate(double value) throws MacroBaseInternalError {\n        if ((value > x[x.length - 1]) || (value < x[0])) {\n            return Double.NaN;\n        }\n\n        for (int i = 0; i < x.length; i++) {\n            if (value == x[i]) {\n                return y[i];\n            }\n            if (value >= x[i+1]) {\n                continue;\n            }\n            double dx = x[i+1] - x[i];\n            double dy = y[i+1] - y[i];\n            double slope = dy / dx;\n            double intercept = y[i] - x[i] * slope;\n            return slope * value + intercept;\n        }\n\n        throw new MacroBaseInternalError(\"Linear interpolator implemented incorrectly\");\n    }", "signature": "double evaluate(double value)", "full_signature": "public double evaluate(double value)", "class_method_signature": "LinearInterpolator.evaluate(double value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}