{"test_class": {"identifier": "QuerySensorCreationStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private Object entryStorage = new Object();", "modifier": "private", "type": "Object", "declarator": "entryStorage = new Object()", "var_name": "entryStorage"}, {"original_string": "private ISchedulerEntry entryMock;", "modifier": "private", "type": "ISchedulerEntry", "declarator": "entryMock", "var_name": "entryMock"}, {"original_string": "private IResolveDependencyStrategy newEntryStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "newEntryStrategyMock", "var_name": "newEntryStrategyMock"}], "file": "CoreFeatures/Statistics/ScheduledQuerySensor/src/test/java/info/smart_tools/smartactors/statistics/sensors/scheduled_query_sensor/QuerySensorCreationStrategyTest.java"}, "test_case": {"identifier": "Should_createSchedulerEntryAndSensorHandle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_createSchedulerEntryAndSensorHandle()\n            throws Exception {\n        IObject conf = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n\n        when(newEntryStrategyMock.resolve(same(conf), same(entryStorage))).thenAnswer(invocation -> {\n            assertEquals(\"stat_chain\",\n                    conf.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"statisticsChain\")));\n            assertEquals(\"query sensor scheduler action\",\n                    conf.getValue(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"action\")));\n            return entryMock;\n        });\n\n        ISensorHandle handle = new QuerySensorCreationStrategy().resolve(\n                \"stat_chain\",\n                conf\n        );\n\n        assertNotNull(handle);\n    }", "signature": "void Should_createSchedulerEntryAndSensorHandle()", "full_signature": "@Test public void Should_createSchedulerEntryAndSensorHandle()", "class_method_signature": "QuerySensorCreationStrategyTest.Should_createSchedulerEntryAndSensorHandle()", "testcase": true, "constructor": false, "invocations": ["resolve", "getOrAdd", "thenAnswer", "when", "resolve", "same", "same", "assertEquals", "getValue", "resolve", "getOrAdd", "assertEquals", "getValue", "resolve", "getOrAdd", "resolve", "assertNotNull"]}, "focal_class": {"identifier": "QuerySensorCreationStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [{"original_string": "private static final int CHAIN_ID_STRATEGY_ARGUMENT_INDEX = 0;", "modifier": "private static final", "type": "int", "declarator": "CHAIN_ID_STRATEGY_ARGUMENT_INDEX = 0", "var_name": "CHAIN_ID_STRATEGY_ARGUMENT_INDEX"}, {"original_string": "private static final int CONFIG_STRATEGY_ARGUMENT_INDEX = 1;", "modifier": "private static final", "type": "int", "declarator": "CONFIG_STRATEGY_ARGUMENT_INDEX = 1", "var_name": "CONFIG_STRATEGY_ARGUMENT_INDEX"}, {"original_string": "private static final String ACTION_DEPENDENCY = \"query sensor scheduler action\";", "modifier": "private static final", "type": "String", "declarator": "ACTION_DEPENDENCY = \"query sensor scheduler action\"", "var_name": "ACTION_DEPENDENCY"}, {"original_string": "private final IFieldName actionFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "actionFieldName", "var_name": "actionFieldName"}, {"original_string": "private final IFieldName statisticsChainFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "statisticsChainFieldName", "var_name": "statisticsChainFieldName"}], "methods": [{"identifier": "QuerySensorCreationStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " QuerySensorCreationStrategy()", "full_signature": "public  QuerySensorCreationStrategy()", "class_method_signature": "QuerySensorCreationStrategy.QuerySensorCreationStrategy()", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "QuerySensorCreationStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Statistics/ScheduledQuerySensor/src/main/java/info/smart_tools/smartactors/statistics/sensors/scheduled_query_sensor/QuerySensorCreationStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) throws ResolveDependencyStrategyException {\n        Object statisticsChainId = args[CHAIN_ID_STRATEGY_ARGUMENT_INDEX];\n        IObject conf = (IObject) args[CONFIG_STRATEGY_ARGUMENT_INDEX];\n\n        try {\n            conf.setValue(statisticsChainFieldName, statisticsChainId);\n            conf.setValue(actionFieldName, ACTION_DEPENDENCY);\n\n            ISchedulerEntry entry = IOC.resolve(\n                    Keys.getOrAdd(\"new scheduler entry\"),\n                    conf,\n                    IOC.resolve(Keys.getOrAdd(\"query sensors scheduler storage\"))\n            );\n\n            return (T) new QuerySensorHandle(entry);\n        } catch (ChangeValueException | InvalidArgumentException | ResolutionException e) {\n            throw new ResolveDependencyStrategyException(e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "QuerySensorCreationStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["setValue", "setValue", "resolve", "getOrAdd", "resolve", "getOrAdd"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}