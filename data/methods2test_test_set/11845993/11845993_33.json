{"test_class": {"identifier": "JaegerTracerFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "stagemonitor-tracing-elasticsearch/src/test/java/org/stagemonitor/tracing/elasticsearch/impl/JaegerTracerFactoryTest.java"}, "test_case": {"identifier": "testIsRoot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsRoot() throws Exception {\n\t\tfinal StagemonitorPlugin.InitArguments initArguments = mock(StagemonitorPlugin.InitArguments.class);\n\t\twhen(initArguments.getMeasurementSession()).thenReturn(\n\t\t\t\tnew MeasurementSession(\"JaegerTracerFactoryTest\", \"test\", \"test\"));\n\t\tfinal JaegerTracerFactory jaegerTracerFactory = new JaegerTracerFactory();\n\t\tfinal Tracer tracer = jaegerTracerFactory.getTracer(initArguments);\n\t\tSpan rootSpan = tracer.buildSpan(\"foo\").start();\n\t\ttry (final Scope rootScope = tracer.scopeManager().activate(rootSpan)) {\n\t\t\tfinal Span childSpan = tracer.buildSpan(\"bar\").start();\n\t\t\ttry (final Scope childScope = tracer.scopeManager().activate(childSpan)) {\n\t\t\t\tassertThat(jaegerTracerFactory.isRoot(rootSpan)).isTrue();\n\t\t\t\tassertThat(jaegerTracerFactory.isRoot(childSpan)).isFalse();\n\t\t\t}\n\t\t}\n\t}", "signature": "void testIsRoot()", "full_signature": "@Test public void testIsRoot()", "class_method_signature": "JaegerTracerFactoryTest.testIsRoot()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getMeasurementSession", "getTracer", "start", "buildSpan", "activate", "scopeManager", "start", "buildSpan", "activate", "scopeManager", "isTrue", "assertThat", "isRoot", "isFalse", "assertThat", "isRoot"]}, "focal_class": {"identifier": "JaegerTracerFactory", "superclass": "extends TracerFactory", "interfaces": "", "fields": [], "methods": [{"identifier": "getTracer", "parameters": "(StagemonitorPlugin.InitArguments initArguments)", "modifiers": "@Override public", "return": "Tracer", "signature": "Tracer getTracer(StagemonitorPlugin.InitArguments initArguments)", "full_signature": "@Override public Tracer getTracer(StagemonitorPlugin.InitArguments initArguments)", "class_method_signature": "JaegerTracerFactory.getTracer(StagemonitorPlugin.InitArguments initArguments)", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "(Span span)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRoot(Span span)", "full_signature": "@Override public boolean isRoot(Span span)", "class_method_signature": "JaegerTracerFactory.isRoot(Span span)", "testcase": false, "constructor": false}, {"identifier": "isSampled", "parameters": "(Span span)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSampled(Span span)", "full_signature": "@Override public boolean isSampled(Span span)", "class_method_signature": "JaegerTracerFactory.isSampled(Span span)", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing-elasticsearch/src/main/java/org/stagemonitor/tracing/elasticsearch/impl/JaegerTracerFactory.java"}, "focal_method": {"identifier": "isRoot", "parameters": "(Span span)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean isRoot(Span span) {\n\t\t// TODO replace with Span#unwrap once https://github.com/opentracing/opentracing-java/pull/211 is merged\n\t\tif (span instanceof SpanWrapper) {\n\t\t\tspan = ((SpanWrapper) span).getDelegate();\n\t\t}\n\t\tif (span instanceof io.jaegertracing.internal.JaegerSpan) {\n\t\t\tfinal io.jaegertracing.internal.JaegerSpan jaegerSpan = (io.jaegertracing.internal.JaegerSpan) span;\n\t\t\treturn jaegerSpan.context().getParentId() == 0;\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean isRoot(Span span)", "full_signature": "@Override public boolean isRoot(Span span)", "class_method_signature": "JaegerTracerFactory.isRoot(Span span)", "testcase": false, "constructor": false, "invocations": ["getDelegate", "getParentId", "context"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}