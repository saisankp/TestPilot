{"test_class": {"identifier": "RunnerExpressionParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/configuration/src/test/java/org/arquillian/algeron/configuration/RunnerExpressionParserTest.java"}, "test_case": {"identifier": "can_use_default_chars_if_not_sys_prop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void can_use_default_chars_if_not_sys_prop() {\n        assertThat(RunnerExpressionParser.parseExpressions(\"myvalue:secondvalue\")).isEqualTo(\"myvalue:secondvalue\");\n    }", "signature": "void can_use_default_chars_if_not_sys_prop()", "full_signature": "@Test public void can_use_default_chars_if_not_sys_prop()", "class_method_signature": "RunnerExpressionParserTest.can_use_default_chars_if_not_sys_prop()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "parseExpressions"]}, "focal_class": {"identifier": "RunnerExpressionParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String START_EXPRESSION = \"${\";", "modifier": "public static final", "type": "String", "declarator": "START_EXPRESSION = \"${\"", "var_name": "START_EXPRESSION"}, {"original_string": "public static final char END_EXPRESSION = '}';", "modifier": "public static final", "type": "char", "declarator": "END_EXPRESSION = '}'", "var_name": "END_EXPRESSION"}], "methods": [{"identifier": "RunnerExpressionParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " RunnerExpressionParser()", "full_signature": "private  RunnerExpressionParser()", "class_method_signature": "RunnerExpressionParser.RunnerExpressionParser()", "testcase": false, "constructor": true}, {"identifier": "parseExpressions", "parameters": "(final String value)", "modifiers": "public static", "return": "String", "signature": "String parseExpressions(final String value)", "full_signature": "public static String parseExpressions(final String value)", "class_method_signature": "RunnerExpressionParser.parseExpressions(final String value)", "testcase": false, "constructor": false}, {"identifier": "parseExpressions", "parameters": "(final String value, final SystemPropertyResolver valueResolver)", "modifiers": "public static", "return": "String", "signature": "String parseExpressions(final String value, final SystemPropertyResolver valueResolver)", "full_signature": "public static String parseExpressions(final String value, final SystemPropertyResolver valueResolver)", "class_method_signature": "RunnerExpressionParser.parseExpressions(final String value, final SystemPropertyResolver valueResolver)", "testcase": false, "constructor": false}, {"identifier": "replaceExpressions", "parameters": "(final String value, final SystemPropertyResolver valueResolver)", "modifiers": "private static", "return": "String", "signature": "String replaceExpressions(final String value, final SystemPropertyResolver valueResolver)", "full_signature": "private static String replaceExpressions(final String value, final SystemPropertyResolver valueResolver)", "class_method_signature": "RunnerExpressionParser.replaceExpressions(final String value, final SystemPropertyResolver valueResolver)", "testcase": false, "constructor": false}], "file": "common/configuration/src/main/java/org/arquillian/algeron/configuration/RunnerExpressionParser.java"}, "focal_method": {"identifier": "parseExpressions", "parameters": "(final String value)", "modifiers": "public static", "return": "String", "body": "public static String parseExpressions(final String value) {\n        return parseExpressions(value, new SystemPropertyResolver());\n    }", "signature": "String parseExpressions(final String value)", "full_signature": "public static String parseExpressions(final String value)", "class_method_signature": "RunnerExpressionParser.parseExpressions(final String value)", "testcase": false, "constructor": false, "invocations": ["parseExpressions"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}