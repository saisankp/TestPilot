{"test_class": {"identifier": "StoragePolicySelectorServiceImplTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private AwsHelper awsHelper;", "modifier": "@Mock\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Mock\n    private BusinessObjectDataDao businessObjectDataDao;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataDao", "declarator": "businessObjectDataDao", "var_name": "businessObjectDataDao"}, {"original_string": "@Mock\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Mock\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Mock\n    private HerdDaoImpl herdDao;", "modifier": "@Mock\n    private", "type": "HerdDaoImpl", "declarator": "herdDao", "var_name": "herdDao"}, {"original_string": "@Mock\n    private HerdStringHelper herdStringHelper;", "modifier": "@Mock\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Mock\n    private JsonHelper jsonHelper;", "modifier": "@Mock\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Mock\n    private SqsDao sqsDao;", "modifier": "@Mock\n    private", "type": "SqsDao", "declarator": "sqsDao", "var_name": "sqsDao"}, {"original_string": "@InjectMocks\n    private StoragePolicySelectorServiceImpl storagePolicySelectorServiceImpl;", "modifier": "@InjectMocks\n    private", "type": "StoragePolicySelectorServiceImpl", "declarator": "storagePolicySelectorServiceImpl", "var_name": "storagePolicySelectorServiceImpl"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/StoragePolicySelectorServiceImplTest.java"}, "test_case": {"identifier": "testCompleteStoragePolicyTransitionImpl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompleteStoragePolicyTransitionImpl()\n    {\n        // Create a current timestamp.\n        Timestamp currentTimestamp = new Timestamp(LONG_VALUE);\n\n        // Set a number of maximum results.\n        Integer maxResults = 10;\n\n        // Create configuration values required for testing.\n        Integer updatedOnThresholdInDays = 90;\n        Integer storagePolicyTransitionMaxAllowedAttempts = 3;\n\n        // Create an empty mapping of matched business object data entities.\n        Map<BusinessObjectDataEntity, StoragePolicyEntity> noMatchingBusinessObjectDataEntities = new HashMap<>();\n\n        // Create an empty list of storage policy selections.\n        List<StoragePolicySelection> storagePolicySelections = new ArrayList<>();\n\n        // Mock the external calls.\n        when(herdDao.getCurrentTimestamp()).thenReturn(currentTimestamp);\n        when(herdStringHelper.getConfigurationValueAsInteger(ConfigurationValue.STORAGE_POLICY_PROCESSOR_BDATA_UPDATED_ON_THRESHOLD_DAYS))\n            .thenReturn(updatedOnThresholdInDays);\n        when(businessObjectDataDao.getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(0),\n            StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults))\n            .thenReturn(noMatchingBusinessObjectDataEntities);\n        when(businessObjectDataDao.getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(1),\n            StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults))\n            .thenReturn(noMatchingBusinessObjectDataEntities);\n        when(businessObjectDataDao.getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(2),\n            StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults))\n            .thenReturn(noMatchingBusinessObjectDataEntities);\n        when(businessObjectDataDao.getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(3),\n            StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults))\n            .thenReturn(noMatchingBusinessObjectDataEntities);\n        when(herdStringHelper.getConfigurationValueAsInteger(ConfigurationValue.STORAGE_POLICY_TRANSITION_MAX_ALLOWED_ATTEMPTS))\n            .thenReturn(storagePolicyTransitionMaxAllowedAttempts);\n\n        // Call the method under test.\n        List<StoragePolicySelection> result = storagePolicySelectorServiceImpl.execute(AWS_SQS_QUEUE_NAME, maxResults);\n\n        // Verify the external calls.\n        verify(herdDao).getCurrentTimestamp();\n        verify(herdStringHelper).getConfigurationValueAsInteger(ConfigurationValue.STORAGE_POLICY_PROCESSOR_BDATA_UPDATED_ON_THRESHOLD_DAYS);\n        verify(herdStringHelper).getConfigurationValueAsInteger(ConfigurationValue.STORAGE_POLICY_TRANSITION_MAX_ALLOWED_ATTEMPTS);\n        verify(businessObjectDataDao)\n            .getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(0),\n                StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults);\n        verify(businessObjectDataDao)\n            .getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(1),\n                StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults);\n        verify(businessObjectDataDao)\n            .getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(2),\n                StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults);\n        verify(businessObjectDataDao)\n            .getBusinessObjectDataEntitiesMatchingStoragePolicies(StoragePolicySelectorServiceImpl.STORAGE_POLICY_PRIORITY_LEVELS.get(3),\n                StoragePolicySelectorServiceImpl.SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES, storagePolicyTransitionMaxAllowedAttempts, 0, maxResults);\n        verifyNoMoreInteractionsHelper();\n\n        // Validate the results.\n        assertEquals(storagePolicySelections, result);\n    }", "signature": "void testCompleteStoragePolicyTransitionImpl()", "full_signature": "@Test public void testCompleteStoragePolicyTransitionImpl()", "class_method_signature": "StoragePolicySelectorServiceImplTest.testCompleteStoragePolicyTransitionImpl()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getCurrentTimestamp", "thenReturn", "when", "getConfigurationValueAsInteger", "thenReturn", "when", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "get", "thenReturn", "when", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "get", "thenReturn", "when", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "get", "thenReturn", "when", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "get", "thenReturn", "when", "getConfigurationValueAsInteger", "execute", "getCurrentTimestamp", "verify", "getConfigurationValueAsInteger", "verify", "getConfigurationValueAsInteger", "verify", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "verify", "get", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "verify", "get", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "verify", "get", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "verify", "get", "verifyNoMoreInteractionsHelper", "assertEquals"]}, "focal_class": {"identifier": "StoragePolicySelectorServiceImpl", "superclass": "", "interfaces": "implements StoragePolicySelectorService", "fields": [{"original_string": "public static final List<StoragePolicyPriorityLevel> STORAGE_POLICY_PRIORITY_LEVELS = Collections.unmodifiableList(Arrays\n        .asList(new StoragePolicyPriorityLevel(false, false, false), new StoragePolicyPriorityLevel(false, true, true),\n            new StoragePolicyPriorityLevel(true, false, false), new StoragePolicyPriorityLevel(true, true, true)));", "modifier": "public static final", "type": "List<StoragePolicyPriorityLevel>", "declarator": "STORAGE_POLICY_PRIORITY_LEVELS = Collections.unmodifiableList(Arrays\n        .asList(new StoragePolicyPriorityLevel(false, false, false), new StoragePolicyPriorityLevel(false, true, true),\n            new StoragePolicyPriorityLevel(true, false, false), new StoragePolicyPriorityLevel(true, true, true)))", "var_name": "STORAGE_POLICY_PRIORITY_LEVELS"}, {"original_string": "public static final List<String> SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES = Collections\n        .unmodifiableList(Arrays.asList(BusinessObjectDataStatusEntity.VALID, BusinessObjectDataStatusEntity.INVALID, BusinessObjectDataStatusEntity.EXPIRED));", "modifier": "public static final", "type": "List<String>", "declarator": "SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES = Collections\n        .unmodifiableList(Arrays.asList(BusinessObjectDataStatusEntity.VALID, BusinessObjectDataStatusEntity.INVALID, BusinessObjectDataStatusEntity.EXPIRED))", "var_name": "SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StoragePolicySelectorServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StoragePolicySelectorServiceImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private AwsHelper awsHelper;", "modifier": "@Autowired\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDataDao businessObjectDataDao;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataDao", "declarator": "businessObjectDataDao", "var_name": "businessObjectDataDao"}, {"original_string": "@Autowired\n    private BusinessObjectDataHelper businessObjectDataHelper;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDataHelper", "declarator": "businessObjectDataHelper", "var_name": "businessObjectDataHelper"}, {"original_string": "@Autowired\n    private HerdDao herdDao;", "modifier": "@Autowired\n    private", "type": "HerdDao", "declarator": "herdDao", "var_name": "herdDao"}, {"original_string": "@Autowired\n    private HerdStringHelper herdStringHelper;", "modifier": "@Autowired\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private SqsDao sqsDao;", "modifier": "@Autowired\n    private", "type": "SqsDao", "declarator": "sqsDao", "var_name": "sqsDao"}], "methods": [{"identifier": "execute", "parameters": "(String sqsQueueName, int maxResult)", "modifiers": "@Override public", "return": "List<StoragePolicySelection>", "signature": "List<StoragePolicySelection> execute(String sqsQueueName, int maxResult)", "full_signature": "@Override public List<StoragePolicySelection> execute(String sqsQueueName, int maxResult)", "class_method_signature": "StoragePolicySelectorServiceImpl.execute(String sqsQueueName, int maxResult)", "testcase": false, "constructor": false}, {"identifier": "sendStoragePolicySelectionToSqsQueue", "parameters": "(String sqsQueueName, List<StoragePolicySelection> storagePolicySelections)", "modifiers": "private", "return": "void", "signature": "void sendStoragePolicySelectionToSqsQueue(String sqsQueueName, List<StoragePolicySelection> storagePolicySelections)", "full_signature": "private void sendStoragePolicySelectionToSqsQueue(String sqsQueueName, List<StoragePolicySelection> storagePolicySelections)", "class_method_signature": "StoragePolicySelectorServiceImpl.sendStoragePolicySelectionToSqsQueue(String sqsQueueName, List<StoragePolicySelection> storagePolicySelections)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/StoragePolicySelectorServiceImpl.java"}, "focal_method": {"identifier": "execute", "parameters": "(String sqsQueueName, int maxResult)", "modifiers": "@Override public", "return": "List<StoragePolicySelection>", "body": "@Override\n    public List<StoragePolicySelection> execute(String sqsQueueName, int maxResult)\n    {\n        // Create a result list.\n        List<StoragePolicySelection> storagePolicySelections = new ArrayList<>();\n\n        // Get the current timestamp from the database.\n        Timestamp currentTimestamp = herdDao.getCurrentTimestamp();\n\n        // Get the threshold in days since business object data registration update for business object data to be selectable\n        // by a storage policy with DAYS_SINCE_BDATA_PRIMARY_PARTITION_VALUE storage policy rule type.\n        int updatedOnThresholdInDays =\n            herdStringHelper.getConfigurationValueAsInteger(ConfigurationValue.STORAGE_POLICY_PROCESSOR_BDATA_UPDATED_ON_THRESHOLD_DAYS);\n\n        // Get the maximum number of failed storage policy transition attempts before the relative storage unit gets excluded from\n        // being selected per storage policies by the storage policy selector system job. 0 means the maximum is not set.\n        int maxAllowedTransitionAttempts = herdStringHelper.getConfigurationValueAsInteger(ConfigurationValue.STORAGE_POLICY_TRANSITION_MAX_ALLOWED_ATTEMPTS);\n\n        LOGGER.info(\"{}={} {}={}\", ConfigurationValue.STORAGE_POLICY_PROCESSOR_BDATA_UPDATED_ON_THRESHOLD_DAYS.getKey(), updatedOnThresholdInDays,\n            ConfigurationValue.STORAGE_POLICY_TRANSITION_MAX_ALLOWED_ATTEMPTS.getKey(), maxAllowedTransitionAttempts);\n\n        // Compute business object data \"updated on\" threshold timestamp based on\n        // the current database timestamp and the threshold value configured in the system.\n        Timestamp updatedOnThresholdTimestamp = HerdDateUtils.addDays(currentTimestamp, -updatedOnThresholdInDays);\n\n        // Keep track of all business object data entities selected per storage policies. This is need to avoid a lower priority selection policy\n        // to be executed ahead of a higher priority one.\n        Set<BusinessObjectDataEntity> selectedBusinessObjectDataEntities = new LinkedHashSet<>();\n\n        // Separately process all possible storage policy priority levels in order of priorities. This is done to assure that higher priority level storage\n        // policies will be listed earlier in the final result map.\n        for (StoragePolicyPriorityLevel storagePolicyPriorityLevel : STORAGE_POLICY_PRIORITY_LEVELS)\n        {\n            // Until we reach maximum number of results or run out of entities to select, retrieve and process business object data entities mapped to their\n            // corresponding storage policy entities, where the business object data status is supported by the storage policy feature and the business object\n            // data alternate key values match storage policy's filter and transition (not taking into account storage policy rules).\n            int startPosition = 0;\n            while (true)\n            {\n                Map<BusinessObjectDataEntity, StoragePolicyEntity> map = businessObjectDataDao\n                    .getBusinessObjectDataEntitiesMatchingStoragePolicies(storagePolicyPriorityLevel, SUPPORTED_BUSINESS_OBJECT_DATA_STATUSES,\n                        maxAllowedTransitionAttempts, startPosition, maxResult);\n\n                for (Map.Entry<BusinessObjectDataEntity, StoragePolicyEntity> entry : map.entrySet())\n                {\n                    BusinessObjectDataEntity businessObjectDataEntity = entry.getKey();\n\n                    // Process this storage policy selection, only if this business object data has not been selected earlier.\n                    if (!selectedBusinessObjectDataEntities.contains(businessObjectDataEntity))\n                    {\n                        boolean createStoragePolicySelection = false;\n\n                        // Remember that we got this business object data entity as matching to a storage policy.\n                        // This is done so we would not try to select this business object data again later by a lower level storage policy.\n                        selectedBusinessObjectDataEntities.add(businessObjectDataEntity);\n\n                        // Get the storage policy entity, so we can validate the storage policy rule against this business object data.\n                        StoragePolicyEntity storagePolicyEntity = entry.getValue();\n\n                        // Get a storage policy rule type and value.\n                        String storagePolicyRuleType = storagePolicyEntity.getStoragePolicyRuleType().getCode();\n                        Integer storagePolicyRuleValue = storagePolicyEntity.getStoragePolicyRuleValue();\n\n                        // For DAYS_SINCE_BDATA_REGISTERED storage policy rule type, select business object data based on it's \"created on\" timestamp.\n                        if (StoragePolicyRuleTypeEntity.DAYS_SINCE_BDATA_REGISTERED.equals(storagePolicyRuleType))\n                        {\n                            // Compute \"created on\" threshold timestamp based on the current timestamp and storage policy rule value.\n                            Timestamp createdOnThresholdTimestamp = HerdDateUtils.addDays(currentTimestamp, -storagePolicyRuleValue);\n\n                            // Select this business object data if it has \"created on\" timestamp before or equal to the threshold timestamp.\n                            createStoragePolicySelection = (businessObjectDataEntity.getCreatedOn().compareTo(createdOnThresholdTimestamp) <= 0);\n                        }\n                        // For DAYS_SINCE_BDATA_PRIMARY_PARTITION_VALUE storage policy rule type, select business object data based on both it's primary\n                        // partition value compared against storage policy rule value and \"updated on\" timestamp being below the threshold.\n                        else if (StoragePolicyRuleTypeEntity.DAYS_SINCE_BDATA_PRIMARY_PARTITION_VALUE.equals(storagePolicyRuleType))\n                        {\n                            // For this storage policy rule, we ignore this business object data if it was updated earlier than the threshold value of days ago.\n                            if (businessObjectDataEntity.getUpdatedOn().compareTo(updatedOnThresholdTimestamp) <= 0)\n                            {\n                                // Try to convert business object data primary partition value to a timestamp.\n                                // If it is not a date, the storage policy rule is not matching this business object data.\n                                Date primaryPartitionValue = businessObjectDataHelper.getDateFromString(businessObjectDataEntity.getPartitionValue());\n\n                                // For this storage policy rule, we ignore this business data if primary partition value is not a date.\n                                if (primaryPartitionValue != null)\n                                {\n                                    // Compute the relative primary partition value threshold date based on the current timestamp and storage policy rule value.\n                                    Date primaryPartitionValueThreshold = new Date(HerdDateUtils.addDays(currentTimestamp, -storagePolicyRuleValue).getTime());\n\n                                    // Select this business object data if it has it's primary partition value before or equal to the threshold date.\n                                    createStoragePolicySelection = (primaryPartitionValue.compareTo(primaryPartitionValueThreshold) <= 0);\n                                }\n                            }\n                        }\n                        // Fail on an un-supported storage policy rule type.\n                        else\n                        {\n                            throw new IllegalStateException(String.format(\"Storage policy type \\\"%s\\\" is not supported.\", storagePolicyRuleType));\n                        }\n\n                        // If this business object data got selected, create a storage policy selection and add it to the result list.\n                        if (createStoragePolicySelection)\n                        {\n                            // Create business object data key and storage policy key per selected entities.\n                            BusinessObjectDataKey businessObjectDataKey = businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity);\n                            StoragePolicyKey storagePolicyKey =\n                                new StoragePolicyKey(storagePolicyEntity.getNamespace().getCode(), storagePolicyEntity.getName());\n\n                            // Create and add a storage policy selection to the result list.\n                            storagePolicySelections.add(new StoragePolicySelection(businessObjectDataKey, storagePolicyKey, storagePolicyEntity.getVersion()));\n\n                            LOGGER.info(\"Selected business object data for storage policy processing: \" +\n                                \"businessObjectDataKey={} storagePolicyKey={} storagePolicyVersion={}\", jsonHelper.objectToJson(businessObjectDataKey),\n                                jsonHelper.objectToJson(storagePolicyKey), storagePolicyEntity.getVersion());\n\n                            // Stop adding storage policy selections to the result list if we reached the maximum results limit.\n                            if (storagePolicySelections.size() >= maxResult)\n                            {\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                // Stop processing storage policies if we reached the max result limit or there are no more business object data to select.\n                if (storagePolicySelections.size() >= maxResult || map.isEmpty())\n                {\n                    break;\n                }\n\n                // Increment start position for the next select.\n                startPosition += maxResult;\n            }\n\n            // Stop processing storage policies if we reached the max result limit.\n            if (storagePolicySelections.size() >= maxResult)\n            {\n                break;\n            }\n        }\n\n        // Send all storage policy selections to the specified SQS queue.\n        sendStoragePolicySelectionToSqsQueue(sqsQueueName, storagePolicySelections);\n\n        return storagePolicySelections;\n    }", "signature": "List<StoragePolicySelection> execute(String sqsQueueName, int maxResult)", "full_signature": "@Override public List<StoragePolicySelection> execute(String sqsQueueName, int maxResult)", "class_method_signature": "StoragePolicySelectorServiceImpl.execute(String sqsQueueName, int maxResult)", "testcase": false, "constructor": false, "invocations": ["getCurrentTimestamp", "getConfigurationValueAsInteger", "getConfigurationValueAsInteger", "info", "getKey", "getKey", "addDays", "getBusinessObjectDataEntitiesMatchingStoragePolicies", "entrySet", "getKey", "contains", "add", "getValue", "getCode", "getStoragePolicyRuleType", "getStoragePolicyRuleValue", "equals", "addDays", "compareTo", "getCreatedOn", "equals", "compareTo", "getUpdatedOn", "getDateFromString", "getPartitionValue", "getTime", "addDays", "compareTo", "format", "getBusinessObjectDataKey", "getCode", "getNamespace", "getName", "add", "getVersion", "info", "objectToJson", "objectToJson", "getVersion", "size", "size", "isEmpty", "size", "sendStoragePolicySelectionToSqsQueue"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}