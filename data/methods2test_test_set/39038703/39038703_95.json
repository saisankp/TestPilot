{"test_class": {"identifier": "IndexVersionTest", "superclass": "", "interfaces": "", "fields": [], "file": "dspace-api/src/test/java/org/dspace/app/util/IndexVersionTest.java"}, "test_case": {"identifier": "testCompareSoftwareVersions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompareSoftwareVersions() throws Exception {\n        \n        // Test various version comparisons. Remember, in software versions:\n        // 4.1 < 4.4 < 4.5 < 4.10 < 4.21 < 4.51\n        \n        // less than tests (return -1)\n        assertEquals(IndexVersion.compareSoftwareVersions(\"5\", \"6\"), -1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"4.1\", \"6\"), -1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"4.1\", \"4.4\"), -1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"4.1\", \"4.10\"), -1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"4.4\", \"4.10\"), -1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"4.4\", \"5.1\"), -1);\n        \n        // greater than tests (return 1)\n        assertEquals(IndexVersion.compareSoftwareVersions(\"6\", \"5\"), 1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"6.10\", \"6.4\"), 1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"6.10\", \"6.1\"), 1);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"5.3\", \"2.4\"), 1);\n        \n        // equality tests (return 0)\n        assertEquals(IndexVersion.compareSoftwareVersions(\"5\", \"5.0\"), 0);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"6\", \"6\"), 0);\n        assertEquals(IndexVersion.compareSoftwareVersions(\"4.2\", \"4.2\"), 0);\n        // we ignore subminor versions, so these should be \"equal\"\n        assertEquals(IndexVersion.compareSoftwareVersions(\"4.2.1\", \"4.2\"), 0);\n    }", "signature": "void testCompareSoftwareVersions()", "full_signature": "@Test public void testCompareSoftwareVersions()", "class_method_signature": "IndexVersionTest.testCompareSoftwareVersions()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions", "assertEquals", "compareSoftwareVersions"]}, "focal_class": {"identifier": "IndexVersion", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "main", "parameters": "(String[] argv)", "modifiers": "public static", "return": "void", "signature": "void main(String[] argv)", "full_signature": "public static void main(String[] argv)", "class_method_signature": "IndexVersion.main(String[] argv)", "testcase": false, "constructor": false}, {"identifier": "getIndexVersion", "parameters": "(String indexDirPath)", "modifiers": "public static", "return": "String", "signature": "String getIndexVersion(String indexDirPath)", "full_signature": "public static String getIndexVersion(String indexDirPath)", "class_method_signature": "IndexVersion.getIndexVersion(String indexDirPath)", "testcase": false, "constructor": false}, {"identifier": "compareSoftwareVersions", "parameters": "(String firstVersion, String secondVersion)", "modifiers": "public static", "return": "int", "signature": "int compareSoftwareVersions(String firstVersion, String secondVersion)", "full_signature": "public static int compareSoftwareVersions(String firstVersion, String secondVersion)", "class_method_signature": "IndexVersion.compareSoftwareVersions(String firstVersion, String secondVersion)", "testcase": false, "constructor": false}, {"identifier": "getLatestVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getLatestVersion()", "full_signature": "public static String getLatestVersion()", "class_method_signature": "IndexVersion.getLatestVersion()", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/app/util/IndexVersion.java"}, "focal_method": {"identifier": "compareSoftwareVersions", "parameters": "(String firstVersion, String secondVersion)", "modifiers": "public static", "return": "int", "body": "public static int compareSoftwareVersions(String firstVersion, String secondVersion)\n            throws IOException\n    {\n        // Constants which represent our various return values for this comparison\n        int GREATER_THAN = 1;\n        int EQUAL = 0;\n        int LESS_THAN = -1;\n        \n        // \"null\" is less than anything\n        if(firstVersion==null)\n            return LESS_THAN;\n        // Anything is newer than \"null\"\n        if(secondVersion==null)\n            return GREATER_THAN;\n            \n        //Split the first version into it's parts (i.e. major & minor versions)\n        String[] firstParts = firstVersion.split(\"\\\\.\");\n        String[] secondParts = secondVersion.split(\"\\\\.\");\n        \n        // Get major / minor version numbers. Default to \"0\" if unspecified\n        // NOTE: We are specifically IGNORING any sub-minor version numbers\n        int firstMajor = firstParts.length>=1 ? Integer.parseInt(firstParts[0]) : 0;\n        int firstMinor = firstParts.length>=2 ? Integer.parseInt(firstParts[1]) : 0;\n        int secondMajor = secondParts.length>=1 ? Integer.parseInt(secondParts[0]) : 0;\n        int secondMinor = secondParts.length>=2 ? Integer.parseInt(secondParts[1]) : 0;\n        \n        // Check for equality\n        if(firstMajor==secondMajor && firstMinor==secondMinor)\n        {\n            return EQUAL;\n        }\n        // If first major version is greater than second\n        else if(firstMajor > secondMajor)\n        {\n            return GREATER_THAN;\n        }\n        // If first major version is less than second\n        else if(firstMajor < secondMajor)\n        {\n            return LESS_THAN;\n        }\n        // If we get here, major versions must be EQUAL. Now, time to check our minor versions\n        else if(firstMinor > secondMinor)\n        {\n            return GREATER_THAN;\n        }\n        else if(firstMinor < secondMinor)\n        {\n            return LESS_THAN;\n        }\n        else\n        {\n            // This is an impossible scenario. \n            // This 'else' should never be triggered since we've checked for equality above already\n            return EQUAL;\n        }\n    }", "signature": "int compareSoftwareVersions(String firstVersion, String secondVersion)", "full_signature": "public static int compareSoftwareVersions(String firstVersion, String secondVersion)", "class_method_signature": "IndexVersion.compareSoftwareVersions(String firstVersion, String secondVersion)", "testcase": false, "constructor": false, "invocations": ["split", "split", "parseInt", "parseInt", "parseInt", "parseInt"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}