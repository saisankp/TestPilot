{"test_class": {"identifier": "NotReusableClientTransportHolderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/transport/NotReusableClientTransportHolderTest.java"}, "test_case": {"identifier": "getClientTransport", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getClientTransport() {\n        NotReusableClientTransportHolder holder = new NotReusableClientTransportHolder();\n        ClientTransportConfig config = new ClientTransportConfig();\n        config.setProviderInfo(new ProviderInfo().setHost(\"127.0.0.1\").setPort(12222))\n            .setContainer(\"test\");\n\n        TestClientTransport clientTransport = (TestClientTransport) holder.getClientTransport(config);\n\n        ClientTransportConfig config2 = new ClientTransportConfig();\n        config2.setProviderInfo(new ProviderInfo().setHost(\"127.0.0.1\").setPort(12222))\n            .setContainer(\"test\");\n        TestClientTransport clientTransport2 = (TestClientTransport) holder.getClientTransport(config2);\n        Assert.assertFalse(clientTransport == clientTransport2);\n\n        ClientTransportConfig config3 = new ClientTransportConfig();\n        config3.setProviderInfo(new ProviderInfo().setHost(\"127.0.0.1\").setPort(12223))\n            .setContainer(\"test\");\n        TestClientTransport clientTransport3 = (TestClientTransport) holder.getClientTransport(config3);\n        Assert.assertFalse(clientTransport2 == clientTransport3);\n\n        Assert.assertFalse(holder.removeClientTransport(null));\n\n        clientTransport.setRequest(4);\n        Assert.assertTrue(holder.removeClientTransport(clientTransport));\n        Assert.assertEquals(2, holder.size());\n\n        clientTransport2.setRequest(0);\n        Assert.assertTrue(holder.removeClientTransport(clientTransport2));\n        Assert.assertEquals(1, holder.size());\n\n        holder.destroy();\n        Assert.assertEquals(0, holder.size());\n    }", "signature": "void getClientTransport()", "full_signature": "@Test public void getClientTransport()", "class_method_signature": "NotReusableClientTransportHolderTest.getClientTransport()", "testcase": true, "constructor": false, "invocations": ["setContainer", "setProviderInfo", "setPort", "setHost", "getClientTransport", "setContainer", "setProviderInfo", "setPort", "setHost", "getClientTransport", "assertFalse", "setContainer", "setProviderInfo", "setPort", "setHost", "getClientTransport", "assertFalse", "assertFalse", "removeClientTransport", "setRequest", "assertTrue", "removeClientTransport", "assertEquals", "size", "setRequest", "assertTrue", "removeClientTransport", "assertEquals", "size", "destroy", "assertEquals", "size"]}, "focal_class": {"identifier": "NotReusableClientTransportHolder", "superclass": "", "interfaces": "implements ClientTransportHolder", "fields": [{"original_string": "private final static Logger                                         LOGGER        = LoggerFactory\n                                                                                          .getLogger(NotReusableClientTransportHolder.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER        = LoggerFactory\n                                                                                          .getLogger(NotReusableClientTransportHolder.class)", "var_name": "LOGGER"}, {"original_string": "private final ConcurrentMap<ClientTransportConfig, ClientTransport> allTransports = new ConcurrentHashMap<ClientTransportConfig, ClientTransport>();", "modifier": "private final", "type": "ConcurrentMap<ClientTransportConfig, ClientTransport>", "declarator": "allTransports = new ConcurrentHashMap<ClientTransportConfig, ClientTransport>()", "var_name": "allTransports"}], "methods": [{"identifier": "getClientTransport", "parameters": "(ClientTransportConfig config)", "modifiers": "@Override public", "return": "ClientTransport", "signature": "ClientTransport getClientTransport(ClientTransportConfig config)", "full_signature": "@Override public ClientTransport getClientTransport(ClientTransportConfig config)", "class_method_signature": "NotReusableClientTransportHolder.getClientTransport(ClientTransportConfig config)", "testcase": false, "constructor": false}, {"identifier": "removeClientTransport", "parameters": "(ClientTransport clientTransport)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeClientTransport(ClientTransport clientTransport)", "full_signature": "@Override public boolean removeClientTransport(ClientTransport clientTransport)", "class_method_signature": "NotReusableClientTransportHolder.removeClientTransport(ClientTransport clientTransport)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "NotReusableClientTransportHolder.size()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "NotReusableClientTransportHolder.destroy()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(DestroyHook hook)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(DestroyHook hook)", "full_signature": "@Override public void destroy(DestroyHook hook)", "class_method_signature": "NotReusableClientTransportHolder.destroy(DestroyHook hook)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/transport/NotReusableClientTransportHolder.java"}, "focal_method": {"identifier": "getClientTransport", "parameters": "(ClientTransportConfig config)", "modifiers": "@Override public", "return": "ClientTransport", "body": "@Override\n    public ClientTransport getClientTransport(ClientTransportConfig config) {\n\n        ClientTransport transport = allTransports.get(config);\n        if (transport == null) {\n            transport = ExtensionLoaderFactory.getExtensionLoader(ClientTransport.class)\n                .getExtension(config.getContainer(),\n                    new Class[] { ClientTransportConfig.class },\n                    new Object[] { config });\n            ClientTransport old = allTransports.putIfAbsent(config, transport); // \u4fdd\u5b58\u552f\u4e00\u957f\u8fde\u63a5\n            if (old != null) {\n                if (LOGGER.isWarnEnabled()) {\n                    LOGGER.warn(\"Multiple threads init ClientTransport with same ClientTransportConfig!\");\n                }\n                transport.destroy(); //\u5982\u679c\u540c\u65f6\u6709\u4eba\u63d2\u5165\uff0c\u5219\u4f7f\u7528\u7b2c\u4e00\u4e2a\n                transport = old;\n            }\n        }\n        return transport;\n    }", "signature": "ClientTransport getClientTransport(ClientTransportConfig config)", "full_signature": "@Override public ClientTransport getClientTransport(ClientTransportConfig config)", "class_method_signature": "NotReusableClientTransportHolder.getClientTransport(ClientTransportConfig config)", "testcase": false, "constructor": false, "invocations": ["get", "getExtension", "getExtensionLoader", "getContainer", "putIfAbsent", "isWarnEnabled", "warn", "destroy"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}