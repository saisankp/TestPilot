{"test_class": {"identifier": "HBaseDataStoreTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HBaseDataStore HBaseDataStore;", "modifier": "private", "type": "HBaseDataStore", "declarator": "HBaseDataStore", "var_name": "HBaseDataStore"}, {"original_string": "private HTableInterface tableInterface;", "modifier": "private", "type": "HTableInterface", "declarator": "tableInterface", "var_name": "tableInterface"}, {"original_string": "private HbaseTableConnection hBaseTableConnection;", "modifier": "private", "type": "HbaseTableConnection", "declarator": "hBaseTableConnection", "var_name": "hBaseTableConnection"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private static final byte[] COLUMN_FAMILY = Bytes.toBytes(\"d\");", "modifier": "private static final", "type": "byte[]", "declarator": "COLUMN_FAMILY = Bytes.toBytes(\"d\")", "var_name": "COLUMN_FAMILY"}, {"original_string": "private static final byte[] DATA_FIELD_NAME = Bytes.toBytes(\"data\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATA_FIELD_NAME = Bytes.toBytes(\"data\")", "var_name": "DATA_FIELD_NAME"}, {"original_string": "private static final String TEST_APP_NAME = \"test-app\";", "modifier": "private static final", "type": "String", "declarator": "TEST_APP_NAME = \"test-app\"", "var_name": "TEST_APP_NAME"}, {"original_string": "private static final Table TEST_APP = new Table(TEST_APP_NAME, 7);", "modifier": "private static final", "type": "Table", "declarator": "TEST_APP = new Table(TEST_APP_NAME, 7)", "var_name": "TEST_APP"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/datastore/impl/hbase/HBaseDataStoreTest.java"}, "test_case": {"identifier": "testSaveSingleNullHBaseTableConnection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSaveSingleNullHBaseTableConnection() throws Exception {\n        Document expectedDocument = new Document();\n        expectedDocument.setId(UUID.randomUUID().toString());\n        expectedDocument.setTimestamp(System.currentTimeMillis());\n        JsonNode data = mapper.valueToTree(Collections.singletonMap(\"TEST_NAME\", \"SINGLE_SAVE_TEST\"));\n        expectedDocument.setData(data);\n        when(hBaseTableConnection.getTable(Matchers.<Table>any())).thenReturn(null);\n        try {\n            HBaseDataStore.save(TEST_APP, expectedDocument);\n            fail();\n        } catch (DataStoreException ex) {\n            assertEquals(DataStoreException.ErrorCode.STORE_SINGLE_SAVE, ex.getErrorCode());\n        }\n    }", "signature": "void testSaveSingleNullHBaseTableConnection()", "full_signature": "@Test public void testSaveSingleNullHBaseTableConnection()", "class_method_signature": "HBaseDataStoreTest.testSaveSingleNullHBaseTableConnection()", "testcase": true, "constructor": false, "invocations": ["setId", "toString", "randomUUID", "setTimestamp", "currentTimeMillis", "valueToTree", "singletonMap", "setData", "thenReturn", "when", "getTable", "any", "save", "fail", "assertEquals", "getErrorCode"]}, "focal_class": {"identifier": "HBaseDataStore", "superclass": "", "interfaces": "implements DataStore", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HBaseDataStore.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HBaseDataStore.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private static final byte[] COLUMN_FAMILY = Bytes.toBytes(\"d\");", "modifier": "private static final", "type": "byte[]", "declarator": "COLUMN_FAMILY = Bytes.toBytes(\"d\")", "var_name": "COLUMN_FAMILY"}, {"original_string": "private static final byte[] DATA_FIELD_NAME = Bytes.toBytes(\"data\");", "modifier": "private static final", "type": "byte[]", "declarator": "DATA_FIELD_NAME = Bytes.toBytes(\"data\")", "var_name": "DATA_FIELD_NAME"}, {"original_string": "private static final byte[] TIMESTAMP_FIELD_NAME = Bytes.toBytes(\"timestamp\");", "modifier": "private static final", "type": "byte[]", "declarator": "TIMESTAMP_FIELD_NAME = Bytes.toBytes(\"timestamp\")", "var_name": "TIMESTAMP_FIELD_NAME"}, {"original_string": "private final HbaseTableConnection tableWrapper;", "modifier": "private final", "type": "HbaseTableConnection", "declarator": "tableWrapper", "var_name": "tableWrapper"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "HBaseDataStore", "parameters": "(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "full_signature": "public  HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "class_method_signature": "HBaseDataStore.HBaseDataStore(HbaseTableConnection tableWrapper, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "save", "parameters": "(final Table table, Document document)", "modifiers": "@Override public", "return": "void", "signature": "void save(final Table table, Document document)", "full_signature": "@Override public void save(final Table table, Document document)", "class_method_signature": "HBaseDataStore.save(final Table table, Document document)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(final Table table, List<Document> documents)", "modifiers": "@Override public", "return": "void", "signature": "void save(final Table table, List<Document> documents)", "full_signature": "@Override public void save(final Table table, List<Document> documents)", "class_method_signature": "HBaseDataStore.save(final Table table, List<Document> documents)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Table table, String id)", "modifiers": "@Override public", "return": "Document", "signature": "Document get(final Table table, String id)", "full_signature": "@Override public Document get(final Table table, String id)", "class_method_signature": "HBaseDataStore.get(final Table table, String id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final Table table, List<String> ids)", "modifiers": "@Override public", "return": "List<Document>", "signature": "List<Document> get(final Table table, List<String> ids)", "full_signature": "@Override public List<Document> get(final Table table, List<String> ids)", "class_method_signature": "HBaseDataStore.get(final Table table, List<String> ids)", "testcase": false, "constructor": false}, {"identifier": "getPutForDocument", "parameters": "(final Table table, Document document)", "modifiers": "public", "return": "Put", "signature": "Put getPutForDocument(final Table table, Document document)", "full_signature": "public Put getPutForDocument(final Table table, Document document)", "class_method_signature": "HBaseDataStore.getPutForDocument(final Table table, Document document)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/datastore/impl/hbase/HBaseDataStore.java"}, "focal_method": {"identifier": "save", "parameters": "(final Table table, Document document)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void save(final Table table, Document document) throws DataStoreException {\n        if (document == null || document.getData() == null || document.getId() == null) {\n            throw new DataStoreException(DataStoreException.ErrorCode.STORE_INVALID_REQUEST, \"Invalid Document\");\n        }\n        HTableInterface hTable = null;\n        try {\n            hTable = tableWrapper.getTable(table);\n            Stopwatch stopwatch = new Stopwatch();\n            stopwatch.start();\n            hTable.put(getPutForDocument(table, document));\n            logger.error(String.format(\"HBASE put took : %d table : %s\", stopwatch.elapsedMillis(), table));\n        } catch (JsonProcessingException e) {\n            throw new DataStoreException(DataStoreException.ErrorCode.STORE_INVALID_REQUEST,\n                    e.getMessage(), e);\n        } catch (IOException e) {\n            throw new DataStoreException(DataStoreException.ErrorCode.STORE_SINGLE_SAVE,\n                    e.getMessage(), e);\n        } catch (Exception e) {\n            throw new DataStoreException(DataStoreException.ErrorCode.STORE_SINGLE_SAVE,\n                    e.getMessage(), e);\n        } finally {\n            if (null != hTable) {\n                try {\n                    hTable.close();\n                } catch (IOException e) {\n                    logger.error(\"Error closing table: \", e);\n                }\n            }\n        }\n    }", "signature": "void save(final Table table, Document document)", "full_signature": "@Override public void save(final Table table, Document document)", "class_method_signature": "HBaseDataStore.save(final Table table, Document document)", "testcase": false, "constructor": false, "invocations": ["getData", "getId", "getTable", "start", "put", "getPutForDocument", "error", "format", "elapsedMillis", "getMessage", "getMessage", "getMessage", "close", "error"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}