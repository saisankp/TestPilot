{"test_class": {"identifier": "CachingHttpClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PATH_TO_RESOURCE = \"/found\";", "modifier": "private static final", "type": "String", "declarator": "PATH_TO_RESOURCE = \"/found\"", "var_name": "PATH_TO_RESOURCE"}, {"original_string": "private static final String PATH_TO_MISSING_RESOURCE = \"/notFound\";", "modifier": "private static final", "type": "String", "declarator": "PATH_TO_MISSING_RESOURCE = \"/notFound\"", "var_name": "PATH_TO_MISSING_RESOURCE"}, {"original_string": "private static final int TEST_PORT = 9090;", "modifier": "private static final", "type": "int", "declarator": "TEST_PORT = 9090", "var_name": "TEST_PORT"}, {"original_string": "private static final String TEST_HOST = \"localhost\";", "modifier": "private static final", "type": "String", "declarator": "TEST_HOST = \"localhost\"", "var_name": "TEST_HOST"}, {"original_string": "private static final int TEST_TIMEOUT = 1000;", "modifier": "private static final", "type": "int", "declarator": "TEST_TIMEOUT = 1000", "var_name": "TEST_TIMEOUT"}, {"original_string": "private static final String SERVER_RESPONSE = \"content\";", "modifier": "private static final", "type": "String", "declarator": "SERVER_RESPONSE = \"content\"", "var_name": "SERVER_RESPONSE"}, {"original_string": "private static Server server;", "modifier": "private static", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private ContentReceviedCallback<String> testCallback = s -> new String(s);", "modifier": "private", "type": "ContentReceviedCallback<String>", "declarator": "testCallback = s -> new String(s)", "var_name": "testCallback"}, {"original_string": "private CachingHttpClient<String> testClient = new CachingHttpClient<>(testCallback);", "modifier": "private", "type": "CachingHttpClient<String>", "declarator": "testClient = new CachingHttpClient<>(testCallback)", "var_name": "testClient"}], "file": "custom-checks/checkstyle/src/test/java/org/openhab/tools/analysis/utils/CachingHttpClientTest.java"}, "test_case": {"identifier": "testSuccessAndFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccessAndFailure() throws Exception {\n        URL url = getUniqueURL(PATH_TO_RESOURCE);\n        assertNotNull(testClient.get(url));\n\n        // The server stops responding\n        Mockito.doNothing().when(server.getHandler()).handle(any(), any(), any(), any());\n\n        assertNotNull(testClient.get(url));\n        verify(server.getHandler(), times(1)).handle(any(), any(), any(), any());\n    }", "signature": "void testSuccessAndFailure()", "full_signature": "@Test public void testSuccessAndFailure()", "class_method_signature": "CachingHttpClientTest.testSuccessAndFailure()", "testcase": true, "constructor": false, "invocations": ["getUniqueURL", "assertNotNull", "get", "handle", "when", "doNothing", "getHandler", "any", "any", "any", "any", "assertNotNull", "get", "handle", "verify", "getHandler", "times", "any", "any", "any", "any"]}, "focal_class": {"identifier": "CachingHttpClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int RETRY_TIME = 10;", "modifier": "private static final", "type": "int", "declarator": "RETRY_TIME = 10", "var_name": "RETRY_TIME"}, {"original_string": "private static Cache<URL, Optional<byte[]>> cache = CacheBuilder.newBuilder()\n            .expireAfterWrite(RETRY_TIME, TimeUnit.MINUTES).build();", "modifier": "private static", "type": "Cache<URL, Optional<byte[]>>", "declarator": "cache = CacheBuilder.newBuilder()\n            .expireAfterWrite(RETRY_TIME, TimeUnit.MINUTES).build()", "var_name": "cache"}, {"original_string": "private ContentReceviedCallback<T> callback;", "modifier": "private", "type": "ContentReceviedCallback<T>", "declarator": "callback", "var_name": "callback"}], "methods": [{"identifier": "CachingHttpClient", "parameters": "(ContentReceviedCallback<T> callback)", "modifiers": "public", "return": "", "signature": " CachingHttpClient(ContentReceviedCallback<T> callback)", "full_signature": "public  CachingHttpClient(ContentReceviedCallback<T> callback)", "class_method_signature": "CachingHttpClient.CachingHttpClient(ContentReceviedCallback<T> callback)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(URL url)", "modifiers": "public synchronized", "return": "T", "signature": "T get(URL url)", "full_signature": "public synchronized T get(URL url)", "class_method_signature": "CachingHttpClient.get(URL url)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(URL url)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getContent(URL url)", "full_signature": "private byte[] getContent(URL url)", "class_method_signature": "CachingHttpClient.getContent(URL url)", "testcase": false, "constructor": false}], "file": "custom-checks/checkstyle/src/main/java/org/openhab/tools/analysis/utils/CachingHttpClient.java"}, "focal_method": {"identifier": "get", "parameters": "(URL url)", "modifiers": "public synchronized", "return": "T", "body": "public synchronized T get(URL url) throws IOException {\n        if (url == null) {\n            throw new IllegalArgumentException(\"URL must not be null\");\n        }\n\n        Optional<byte[]> content = Optional.empty();\n        try {\n            content = cache.get(url, () -> Optional.of(getContent(url)));\n        } catch (ExecutionException e) {\n            cache.put(url, Optional.empty());\n            throw new IOException(\"Unable to get \" + url.toString(), e.getCause());\n        }\n        return content.isPresent() ? callback.transform(content.get()) : null;\n    }", "signature": "T get(URL url)", "full_signature": "public synchronized T get(URL url)", "class_method_signature": "CachingHttpClient.get(URL url)", "testcase": false, "constructor": false, "invocations": ["empty", "get", "of", "getContent", "put", "empty", "toString", "getCause", "isPresent", "transform", "get"]}, "repository": {"repo_id": 83811108, "url": "https://github.com/openhab/static-code-analysis", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 21, "size": 1174, "license": "licensed"}}