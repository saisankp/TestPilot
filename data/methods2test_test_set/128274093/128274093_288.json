{"test_class": {"identifier": "EndConsumerHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Throwable> errors;", "modifier": "", "type": "List<Throwable>", "declarator": "errors", "var_name": "errors"}], "file": "rxjava/src/test/java/io/reactivex/internal/util/EndConsumerHelperTest.java"}, "test_case": {"identifier": "checkDoubleDisposableCompletableObserver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkDoubleDisposableCompletableObserver() {\n        CompletableObserver consumer = new DisposableCompletableObserver() {\n            @Override\n            public void onError(Throwable t) {\n            }\n            @Override\n            public void onComplete() {\n            }\n        };\n\n        Disposable sub1 = Disposables.empty();\n\n        consumer.onSubscribe(sub1);\n\n        assertFalse(sub1.isDisposed());\n\n        Disposable sub2 = Disposables.empty();\n\n        consumer.onSubscribe(sub2);\n\n        assertFalse(sub1.isDisposed());\n\n        assertTrue(sub2.isDisposed());\n\n        TestHelper.assertError(errors, 0, ProtocolViolationException.class);\n        assertEquals(EndConsumerHelper.composeMessage(consumer.getClass().getName()), errors.get(0).getMessage());\n        assertEquals(errors.toString(), 1, errors.size());\n    }", "signature": "void checkDoubleDisposableCompletableObserver()", "full_signature": "@Test public void checkDoubleDisposableCompletableObserver()", "class_method_signature": "EndConsumerHelperTest.checkDoubleDisposableCompletableObserver()", "testcase": true, "constructor": false, "invocations": ["empty", "onSubscribe", "assertFalse", "isDisposed", "empty", "onSubscribe", "assertFalse", "isDisposed", "assertTrue", "isDisposed", "assertError", "assertEquals", "composeMessage", "getName", "getClass", "getMessage", "get", "assertEquals", "toString", "size"]}, "focal_class": {"identifier": "EndConsumerHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "EndConsumerHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " EndConsumerHelper()", "full_signature": "private  EndConsumerHelper()", "class_method_signature": "EndConsumerHelper.EndConsumerHelper()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(Disposable upstream, Disposable next, Class<?> observer)", "modifiers": "public static", "return": "boolean", "signature": "boolean validate(Disposable upstream, Disposable next, Class<?> observer)", "full_signature": "public static boolean validate(Disposable upstream, Disposable next, Class<?> observer)", "class_method_signature": "EndConsumerHelper.validate(Disposable upstream, Disposable next, Class<?> observer)", "testcase": false, "constructor": false}, {"identifier": "setOnce", "parameters": "(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "modifiers": "public static", "return": "boolean", "signature": "boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "full_signature": "public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "class_method_signature": "EndConsumerHelper.setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Subscription upstream, Subscription next, Class<?> subscriber)", "modifiers": "public static", "return": "boolean", "signature": "boolean validate(Subscription upstream, Subscription next, Class<?> subscriber)", "full_signature": "public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber)", "class_method_signature": "EndConsumerHelper.validate(Subscription upstream, Subscription next, Class<?> subscriber)", "testcase": false, "constructor": false}, {"identifier": "setOnce", "parameters": "(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "modifiers": "public static", "return": "boolean", "signature": "boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "full_signature": "public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "class_method_signature": "EndConsumerHelper.setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber)", "testcase": false, "constructor": false}, {"identifier": "composeMessage", "parameters": "(String consumer)", "modifiers": "public static", "return": "String", "signature": "String composeMessage(String consumer)", "full_signature": "public static String composeMessage(String consumer)", "class_method_signature": "EndConsumerHelper.composeMessage(String consumer)", "testcase": false, "constructor": false}, {"identifier": "reportDoubleSubscription", "parameters": "(Class<?> consumer)", "modifiers": "public static", "return": "void", "signature": "void reportDoubleSubscription(Class<?> consumer)", "full_signature": "public static void reportDoubleSubscription(Class<?> consumer)", "class_method_signature": "EndConsumerHelper.reportDoubleSubscription(Class<?> consumer)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/util/EndConsumerHelper.java"}, "focal_method": {"identifier": "composeMessage", "parameters": "(String consumer)", "modifiers": "public static", "return": "String", "body": "public static String composeMessage(String consumer) {\n        return \"It is not allowed to subscribe with a(n) \" + consumer + \" multiple times. \"\n                + \"Please create a fresh instance of \" + consumer + \" and subscribe that to the target source instead.\";\n    }", "signature": "String composeMessage(String consumer)", "full_signature": "public static String composeMessage(String consumer)", "class_method_signature": "EndConsumerHelper.composeMessage(String consumer)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}