{"test_class": {"identifier": "WorkbookFileTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-plans/step-plans-base-artefacts/src/test/java/step/datapool/excel/WorkbookFileTest.java"}, "test_case": {"identifier": "testSizeLimit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSizeLimit() {\n\t\tException ex = null;\n\t\ttry {\n\t\t\tWorkbookFile workbook = new WorkbookFile(getResourceFile(\"Excel1.xlsx\"), 1, false);\n\t\t\tworkbook.close();\n\t\t} catch (Exception e) {\n\t\t\tex = e;\n\t\t}\n\t\t\n\t\tAssert.assertTrue(ex!=null && \"The size of the workbook 'Excel1.xlsx' exceeds the max size 1bytes.\".equals(ex.getMessage()));\n\t}", "signature": "void testSizeLimit()", "full_signature": "@Test public void testSizeLimit()", "class_method_signature": "WorkbookFileTest.testSizeLimit()", "testcase": true, "constructor": false, "invocations": ["getResourceFile", "close", "assertTrue", "equals", "getMessage"]}, "focal_class": {"identifier": "WorkbookFile", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WorkbookFile.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WorkbookFile.class)", "var_name": "logger"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private InputStream inputStream;", "modifier": "private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "private OutputStream outputStream;", "modifier": "private", "type": "OutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "private Workbook workbook;", "modifier": "private", "type": "Workbook", "declarator": "workbook", "var_name": "workbook"}, {"original_string": "private static Pattern FILENAME_PATTERN = Pattern.compile(\"(.*)\\\\.(.+?)$\");", "modifier": "private static", "type": "Pattern", "declarator": "FILENAME_PATTERN = Pattern.compile(\"(.*)\\\\.(.+?)$\")", "var_name": "FILENAME_PATTERN"}, {"original_string": "private static String DATE_FORMAT = \"yyyyMMddhhmmss\";", "modifier": "private static", "type": "String", "declarator": "DATE_FORMAT = \"yyyyMMddhhmmss\"", "var_name": "DATE_FORMAT"}], "methods": [{"identifier": "WorkbookFile", "parameters": "()", "modifiers": "public", "return": "", "signature": " WorkbookFile()", "full_signature": "public  WorkbookFile()", "class_method_signature": "WorkbookFile.WorkbookFile()", "testcase": false, "constructor": true}, {"identifier": "WorkbookFile", "parameters": "(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists)", "modifiers": "public", "return": "", "signature": " WorkbookFile(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists)", "full_signature": "public  WorkbookFile(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists)", "class_method_signature": "WorkbookFile.WorkbookFile(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists)", "testcase": false, "constructor": true}, {"identifier": "WorkbookFile", "parameters": "(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "modifiers": "public", "return": "", "signature": " WorkbookFile(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "full_signature": "public  WorkbookFile(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "class_method_signature": "WorkbookFile.WorkbookFile(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(File mainWorkbook)", "modifiers": "private", "return": "void", "signature": "void create(File mainWorkbook)", "full_signature": "private void create(File mainWorkbook)", "class_method_signature": "WorkbookFile.create(File mainWorkbook)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "modifiers": "", "return": "void", "signature": "void open(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "full_signature": " void open(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "class_method_signature": "WorkbookFile.open(File mainWorkbook, Integer maxWorkbookSize, boolean createIfNotExists, boolean forUpdate)", "testcase": false, "constructor": false}, {"identifier": "checkFileSize", "parameters": "(File file, Integer maxWorkbookSize)", "modifiers": "", "return": "void", "signature": "void checkFileSize(File file, Integer maxWorkbookSize)", "full_signature": " void checkFileSize(File file, Integer maxWorkbookSize)", "class_method_signature": "WorkbookFile.checkFileSize(File file, Integer maxWorkbookSize)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void save()", "full_signature": "public void save()", "class_method_signature": "WorkbookFile.save()", "testcase": false, "constructor": false}, {"identifier": "closeOutputStream", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeOutputStream()", "full_signature": "private void closeOutputStream()", "class_method_signature": "WorkbookFile.closeOutputStream()", "testcase": false, "constructor": false}, {"identifier": "closeInputStream", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeInputStream()", "full_signature": "private void closeInputStream()", "class_method_signature": "WorkbookFile.closeInputStream()", "testcase": false, "constructor": false}, {"identifier": "createBackupFile", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File createBackupFile()", "full_signature": "private File createBackupFile()", "class_method_signature": "WorkbookFile.createBackupFile()", "testcase": false, "constructor": false}, {"identifier": "isFileIsOpenedByAnotherProcess", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isFileIsOpenedByAnotherProcess()", "full_signature": "private boolean isFileIsOpenedByAnotherProcess()", "class_method_signature": "WorkbookFile.isFileIsOpenedByAnotherProcess()", "testcase": false, "constructor": false}, {"identifier": "openOutputStream", "parameters": "(File file)", "modifiers": "private", "return": "void", "signature": "void openOutputStream(File file)", "full_signature": "private void openOutputStream(File file)", "class_method_signature": "WorkbookFile.openOutputStream(File file)", "testcase": false, "constructor": false}, {"identifier": "writeWorkbookToOutputStream", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeWorkbookToOutputStream()", "full_signature": "private void writeWorkbookToOutputStream()", "class_method_signature": "WorkbookFile.writeWorkbookToOutputStream()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "WorkbookFile.close()", "testcase": false, "constructor": false}, {"identifier": "getWorkbook", "parameters": "()", "modifiers": "public", "return": "Workbook", "signature": "Workbook getWorkbook()", "full_signature": "public Workbook getWorkbook()", "class_method_signature": "WorkbookFile.getWorkbook()", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-base-artefacts/src/main/java/step/datapool/excel/WorkbookFile.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void close() {\n\t\tcloseInputStream();\n\t\tcloseOutputStream();\n\t\t\n\t\ttry {\n\t\t\tif (workbook != null) {\n\t\t\t\tworkbook.close();\n\t\t\t}\n\t\t} catch (IOException e) {}\n\t}", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "WorkbookFile.close()", "testcase": false, "constructor": false, "invocations": ["closeInputStream", "closeOutputStream", "close"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}