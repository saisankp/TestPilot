{"test_class": {"identifier": "EncodedBodyBuilderTest", "superclass": "", "interfaces": "implements LocationConstants", "fields": [], "file": "taverna-wsdl-generic/src/test/java/org/apache/taverna/wsdl/soap/EncodedBodyBuilderTest.java"}, "test_case": {"identifier": "testComplexType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testComplexType() throws Exception {\n\t\tBodyBuilder builder = createBuilder(wsdlResourcePath(\"TestServices-rpcencoded.wsdl\"), \"personToString\");\n\t\t\n\t\tassertTrue(\"Wrong type of builder created\",builder instanceof EncodedBodyBuilder);\n\t\t\n\t\tString p = \"<Person xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\"><name xsi:type=\\\"xsd:string\\\">bob</name><age xsi:type=\\\"xsd:int\\\">12</age></Person>\";\n\t\t\n\t\tMap<String,Object> inputMap = new HashMap<String, Object>();\n\t\t\n\t\tinputMap.put(\"p\",p);\n\t\tSOAPElement body = builder.build(inputMap);\n\t\t\n                Iterator<SOAPElement> persons = body.getChildElements(new QName(\"\", \"p\"));\n                \n                assertTrue(\"'Person' tag is missing\", persons.hasNext());\n                SOAPElement person = persons.next();\n                assertFalse(\"more than one 'Person' tag found\", persons.hasNext());\n                \n                String personType = person.getAttributeNS(XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI, \"type\");\n                assertNotNull(\"type definition of Person is missing\", personType);\n                assertTrue(\"wrong xsi:type for the 'Person' tag\", \"ns1:Person\".equals(personType));\n\n                assertTrue(\"wrong type definition for Person\", \"ns1:Person\".equals(personType));\n\n                Iterator<SOAPElement> names = person.getChildElements(new QName(\"\", \"name\"));\n                \n                assertTrue(\"'name' tag is missing\", names.hasNext());\n                SOAPElement name = names.next();\n                assertFalse(\"More than one 'name' tag found\", names.hasNext());\n\n                String nameType = name.getAttributeNS(XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI, \"type\");\n                assertNotNull(\"type definition of name is missing\", nameType);\n                assertTrue(\"wrong name's xsi:type\", \"xsd:string\".equals(nameType));\n                assertTrue(\"wrong 'name' tag value (must be 'bob')\", \"bob\".equals(name.getTextContent()));\n\n                Iterator<SOAPElement> ages = person.getChildElements(new QName(\"\", \"age\"));\n                \n                assertTrue(\"'age' tag is missing\", ages.hasNext());\n                SOAPElement age = ages.next();\n                assertFalse(\"more than one 'age' tag found\", ages.hasNext());\n\n                String ageType = age.getAttributeNS(XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI, \"type\");\n                assertNotNull(\"missing type definition for the 'age' tag\", ageType);\n                assertTrue(\"wrong xsi:type for 'age' tag\", \"xsd:int\".equals(ageType));\n                assertTrue(\"wrong 'age' tag value (must be 12)\", \"12\".equals(age.getTextContent()));\n\t}", "signature": "void testComplexType()", "full_signature": "@Test public void testComplexType()", "class_method_signature": "EncodedBodyBuilderTest.testComplexType()", "testcase": true, "constructor": false, "invocations": ["createBuilder", "wsdlResourcePath", "assertTrue", "put", "build", "getChildElements", "assertTrue", "hasNext", "next", "assertFalse", "hasNext", "getAttributeNS", "assertNotNull", "assertTrue", "equals", "assertTrue", "equals", "getChildElements", "assertTrue", "hasNext", "next", "assertFalse", "hasNext", "getAttributeNS", "assertNotNull", "assertTrue", "equals", "assertTrue", "equals", "getTextContent", "getChildElements", "assertTrue", "hasNext", "next", "assertFalse", "hasNext", "getAttributeNS", "assertNotNull", "assertTrue", "equals", "assertTrue", "equals", "getTextContent"]}, "focal_class": {"identifier": "EncodedBodyBuilder", "superclass": "extends AbstractBodyBuilder", "interfaces": "", "fields": [], "methods": [{"identifier": "EncodedBodyBuilder", "parameters": "(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "modifiers": "public", "return": "", "signature": " EncodedBodyBuilder(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "full_signature": "public  EncodedBodyBuilder(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "class_method_signature": "EncodedBodyBuilder.EncodedBodyBuilder(String style, WSDLParser parser, String operationName, List<TypeDescriptor> inputDescriptors)", "testcase": false, "constructor": true}, {"identifier": "getUse", "parameters": "()", "modifiers": "@Override protected", "return": "Use", "signature": "Use getUse()", "full_signature": "@Override protected Use getUse()", "class_method_signature": "EncodedBodyBuilder.getUse()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(Map inputMap)", "modifiers": "@Override public", "return": "SOAPElement", "signature": "SOAPElement build(Map inputMap)", "full_signature": "@Override public SOAPElement build(Map inputMap)", "class_method_signature": "EncodedBodyBuilder.build(Map inputMap)", "testcase": false, "constructor": false}, {"identifier": "createSkeletonElementForSingleItem", "parameters": "(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "modifiers": "@Override protected", "return": "Element", "signature": "Element createSkeletonElementForSingleItem(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "full_signature": "@Override protected Element createSkeletonElementForSingleItem(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "class_method_signature": "EncodedBodyBuilder.createSkeletonElementForSingleItem(\n\t\t\tMap<String, String> namespaceMappings, TypeDescriptor descriptor,\n\t\t\tString inputName, String typeName)", "testcase": false, "constructor": false}, {"identifier": "createElementForArrayType", "parameters": "(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "modifiers": "@Override protected", "return": "Element", "signature": "Element createElementForArrayType(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "full_signature": "@Override protected Element createElementForArrayType(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "class_method_signature": "EncodedBodyBuilder.createElementForArrayType(\n\t\t\tMap<String, String> namespaceMappings, String inputName,\n\t\t\tObject dataValue, TypeDescriptor descriptor, String mimeType,\n\t\t\tString typeName)", "testcase": false, "constructor": false}, {"identifier": "addElementToBody", "parameters": "(String operationNamespace, SOAPElement body, Element el)", "modifiers": "@Override protected", "return": "SOAPElement", "signature": "SOAPElement addElementToBody(String operationNamespace, SOAPElement body, Element el)", "full_signature": "@Override protected SOAPElement addElementToBody(String operationNamespace, SOAPElement body, Element el)", "class_method_signature": "EncodedBodyBuilder.addElementToBody(String operationNamespace, SOAPElement body, Element el)", "testcase": false, "constructor": false}], "file": "taverna-wsdl-generic/src/main/java/org/apache/taverna/wsdl/soap/EncodedBodyBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(Map inputMap)", "modifiers": "@Override public", "return": "SOAPElement", "body": "@Override\n\tpublic SOAPElement build(Map inputMap) throws WSDLException,\n\t\t\tParserConfigurationException, SOAPException, IOException,\n\t\t\tSAXException, UnknownOperationException {\n\n\t\tSOAPElement result = super.build(inputMap);\n                \n\t\tfor (Iterator iterator = namespaceMappings.keySet().iterator(); iterator.hasNext();) {\n\t\t\tString namespaceURI = (String) iterator.next();\n\t\t\tString ns = namespaceMappings.get(namespaceURI);\n\t\t\tresult.addNamespaceDeclaration(ns, namespaceURI);\n\t\t}\n                \n                result.setAttributeNS(SOAPConstants.URI_NS_SOAP_1_1_ENVELOPE, \"soapenv:encodingStyle\", SOAPConstants.URI_NS_SOAP_ENCODING);\n\n\t\treturn result;\n\t}", "signature": "SOAPElement build(Map inputMap)", "full_signature": "@Override public SOAPElement build(Map inputMap)", "class_method_signature": "EncodedBodyBuilder.build(Map inputMap)", "testcase": false, "constructor": false, "invocations": ["build", "iterator", "keySet", "hasNext", "next", "get", "addNamespaceDeclaration", "setAttributeNS"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}