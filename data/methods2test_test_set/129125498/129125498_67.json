{"test_class": {"identifier": "HoltWintersSeasonalEstimatesValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int DUMMY_FREQUENCY = 4;", "modifier": "private static", "type": "int", "declarator": "DUMMY_FREQUENCY = 4", "var_name": "DUMMY_FREQUENCY"}, {"original_string": "private static final double[] INSUFFICIENT_SEASONAL_ESTIMATES = new double[]{1, 2, 3};", "modifier": "private static final", "type": "double[]", "declarator": "INSUFFICIENT_SEASONAL_ESTIMATES = new double[]{1, 2, 3}", "var_name": "INSUFFICIENT_SEASONAL_ESTIMATES"}, {"original_string": "private static double[] VALID_ADDITIVE_SEASONAL_COMPONENT = {100_000, 0, 0, -101_000};", "modifier": "private static", "type": "double[]", "declarator": "VALID_ADDITIVE_SEASONAL_COMPONENT = {100_000, 0, 0, -101_000}", "var_name": "VALID_ADDITIVE_SEASONAL_COMPONENT"}, {"original_string": "private static double[] INVALID_ADDITIVE_SEASONAL_COMPONENT = {100_000, 0, 0, -101_100};", "modifier": "private static", "type": "double[]", "declarator": "INVALID_ADDITIVE_SEASONAL_COMPONENT = {100_000, 0, 0, -101_100}", "var_name": "INVALID_ADDITIVE_SEASONAL_COMPONENT"}, {"original_string": "private static double[] VALID_MULTIPLICATIVE_SEASONAL_COMPONENT = {1.001001, 1, 1, (1 - 0.001)};", "modifier": "private static", "type": "double[]", "declarator": "VALID_MULTIPLICATIVE_SEASONAL_COMPONENT = {1.001001, 1, 1, (1 - 0.001)}", "var_name": "VALID_MULTIPLICATIVE_SEASONAL_COMPONENT"}, {"original_string": "private static double[] INVALID_MULTIPLICATIVE_SEASONAL_COMPONENT = {1.001_100, 1, 1, (1 - 0.001)};", "modifier": "private static", "type": "double[]", "declarator": "INVALID_MULTIPLICATIVE_SEASONAL_COMPONENT = {1.001_100, 1, 1, (1 - 0.001)}", "var_name": "INVALID_MULTIPLICATIVE_SEASONAL_COMPONENT"}, {"original_string": "private HoltWintersSeasonalEstimatesValidator subject;", "modifier": "private", "type": "HoltWintersSeasonalEstimatesValidator", "declarator": "subject", "var_name": "subject"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/holtwinters/HoltWintersSeasonalEstimatesValidatorTest.java"}, "test_case": {"identifier": "testValidMultiplicativeSeasonalEstimatesIsValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidMultiplicativeSeasonalEstimatesIsValid() {\n        subject.validate(VALID_MULTIPLICATIVE_SEASONAL_COMPONENT, DUMMY_FREQUENCY, HoltWintersSeasonalityType.MULTIPLICATIVE);\n    }", "signature": "void testValidMultiplicativeSeasonalEstimatesIsValid()", "full_signature": "@Test public void testValidMultiplicativeSeasonalEstimatesIsValid()", "class_method_signature": "HoltWintersSeasonalEstimatesValidatorTest.testValidMultiplicativeSeasonalEstimatesIsValid()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "HoltWintersSeasonalEstimatesValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "modifiers": "public", "return": "void", "signature": "void validate(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "full_signature": "public void validate(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.validate(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "testcase": false, "constructor": false}, {"identifier": "checkNotNull", "parameters": "(double[] initSeasonalEstimates)", "modifiers": "private", "return": "void", "signature": "void checkNotNull(double[] initSeasonalEstimates)", "full_signature": "private void checkNotNull(double[] initSeasonalEstimates)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.checkNotNull(double[] initSeasonalEstimates)", "testcase": false, "constructor": false}, {"identifier": "checkLength", "parameters": "(double[] initSeasonalEstimates, int frequency)", "modifiers": "private", "return": "void", "signature": "void checkLength(double[] initSeasonalEstimates, int frequency)", "full_signature": "private void checkLength(double[] initSeasonalEstimates, int frequency)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.checkLength(double[] initSeasonalEstimates, int frequency)", "testcase": false, "constructor": false}, {"identifier": "checkSumOfEstimates", "parameters": "(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "modifiers": "private", "return": "void", "signature": "void checkSumOfEstimates(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "full_signature": "private void checkSumOfEstimates(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.checkSumOfEstimates(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(double[] values, int frequency)", "modifiers": "private static", "return": "BigDecimal", "signature": "BigDecimal sum(double[] values, int frequency)", "full_signature": "private static BigDecimal sum(double[] values, int frequency)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.sum(double[] values, int frequency)", "testcase": false, "constructor": false}, {"identifier": "distancesFromIdentity", "parameters": "(double[] values, HoltWintersSeasonalityType seasonalityType, int frequency)", "modifiers": "private static", "return": "double[]", "signature": "double[] distancesFromIdentity(double[] values, HoltWintersSeasonalityType seasonalityType, int frequency)", "full_signature": "private static double[] distancesFromIdentity(double[] values, HoltWintersSeasonalityType seasonalityType, int frequency)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.distancesFromIdentity(double[] values, HoltWintersSeasonalityType seasonalityType, int frequency)", "testcase": false, "constructor": false}, {"identifier": "eachMinusOne", "parameters": "(double[] values, int frequency)", "modifiers": "private static", "return": "double[]", "signature": "double[] eachMinusOne(double[] values, int frequency)", "full_signature": "private static double[] eachMinusOne(double[] values, int frequency)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.eachMinusOne(double[] values, int frequency)", "testcase": false, "constructor": false}, {"identifier": "maxOfAbsolutes", "parameters": "(double[] values, int frequency)", "modifiers": "private static", "return": "BigDecimal", "signature": "BigDecimal maxOfAbsolutes(double[] values, int frequency)", "full_signature": "private static BigDecimal maxOfAbsolutes(double[] values, int frequency)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.maxOfAbsolutes(double[] values, int frequency)", "testcase": false, "constructor": false}, {"identifier": "onePercent", "parameters": "(BigDecimal val)", "modifiers": "private static", "return": "BigDecimal", "signature": "BigDecimal onePercent(BigDecimal val)", "full_signature": "private static BigDecimal onePercent(BigDecimal val)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.onePercent(BigDecimal val)", "testcase": false, "constructor": false}, {"identifier": "fmt", "parameters": "(BigDecimal val)", "modifiers": "private static", "return": "String", "signature": "String fmt(BigDecimal val)", "full_signature": "private static String fmt(BigDecimal val)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.fmt(BigDecimal val)", "testcase": false, "constructor": false}, {"identifier": "multiplicativeErrorMessage", "parameters": "(BigDecimal seasonalSum, BigDecimal tolerance)", "modifiers": "private", "return": "String", "signature": "String multiplicativeErrorMessage(BigDecimal seasonalSum, BigDecimal tolerance)", "full_signature": "private String multiplicativeErrorMessage(BigDecimal seasonalSum, BigDecimal tolerance)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.multiplicativeErrorMessage(BigDecimal seasonalSum, BigDecimal tolerance)", "testcase": false, "constructor": false}, {"identifier": "additiveErrorMessage", "parameters": "(int frequency, BigDecimal seasonalSum, BigDecimal tolerance)", "modifiers": "private", "return": "String", "signature": "String additiveErrorMessage(int frequency, BigDecimal seasonalSum, BigDecimal tolerance)", "full_signature": "private String additiveErrorMessage(int frequency, BigDecimal seasonalSum, BigDecimal tolerance)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.additiveErrorMessage(int frequency, BigDecimal seasonalSum, BigDecimal tolerance)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/holtwinters/HoltWintersSeasonalEstimatesValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "modifiers": "public", "return": "void", "body": "public void validate(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType) {\n        checkNotNull(initSeasonalEstimates);\n        if (initSeasonalEstimates.length <= 0) return;\n        checkLength(initSeasonalEstimates, frequency);\n        checkSumOfEstimates(initSeasonalEstimates, frequency, seasonalityType);\n    }", "signature": "void validate(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "full_signature": "public void validate(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "class_method_signature": "HoltWintersSeasonalEstimatesValidator.validate(double[] initSeasonalEstimates, int frequency, HoltWintersSeasonalityType seasonalityType)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkLength", "checkSumOfEstimates"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}