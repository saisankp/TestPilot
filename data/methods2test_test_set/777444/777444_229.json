{"test_class": {"identifier": "BeanExtractorTest", "superclass": "extends AbstractExtractorTest", "interfaces": "", "fields": [{"original_string": "private int number;", "modifier": "private", "type": "int", "declarator": "number", "var_name": "number"}, {"original_string": "private String text, writeOnly;", "modifier": "private", "type": "String", "declarator": "text", "var_name": "text"}, {"original_string": "private boolean flag;", "modifier": "private", "type": "boolean", "declarator": "flag", "var_name": "flag"}, {"original_string": "private Inner inner;", "modifier": "private", "type": "Inner", "declarator": "inner", "var_name": "inner"}, {"original_string": "private Nacked nacked;", "modifier": "private", "type": "Nacked", "declarator": "nacked", "var_name": "nacked"}, {"original_string": "private Object nulli;", "modifier": "private", "type": "Object", "declarator": "nulli", "var_name": "nulli"}, {"original_string": "private BeanExtractorTest self;", "modifier": "private", "type": "BeanExtractorTest", "declarator": "self", "var_name": "self"}, {"original_string": "private BeanExtractorTest hiddenSelf;", "modifier": "private", "type": "BeanExtractorTest", "declarator": "hiddenSelf", "var_name": "hiddenSelf"}, {"original_string": "private Inner hiddenInner;", "modifier": "private", "type": "Inner", "declarator": "hiddenInner", "var_name": "hiddenInner"}], "file": "agent/core/src/test/java/org/jolokia/converter/json/BeanExtractorTest.java"}, "test_case": {"identifier": "simplSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simplSet() throws InvocationTargetException, IllegalAccessException {\n        assertTrue(extractor.canSetValue());\n        String old = (String) setObject(this,\"text\",\"NewText\");\n        assertEquals(old,\"Test\");\n        assertEquals(getText(),\"NewText\");\n    }", "signature": "void simplSet()", "full_signature": "@Test public void simplSet()", "class_method_signature": "BeanExtractorTest.simplSet()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "canSetValue", "setObject", "assertEquals", "assertEquals", "getText"]}, "focal_class": {"identifier": "BeanExtractor", "superclass": "", "interfaces": "implements Extractor", "fields": [{"original_string": "private static final Set<Class> FINAL_CLASSES = new HashSet<Class>(Arrays.asList(\n            String.class,\n            Number.class,\n            Byte.class,\n            Double.class,\n            Float.class,\n            Long.class,\n            Short.class,\n            Integer.class,\n            Boolean.class\n    ));", "modifier": "private static final", "type": "Set<Class>", "declarator": "FINAL_CLASSES = new HashSet<Class>(Arrays.asList(\n            String.class,\n            Number.class,\n            Byte.class,\n            Double.class,\n            Float.class,\n            Long.class,\n            Short.class,\n            Integer.class,\n            Boolean.class\n    ))", "var_name": "FINAL_CLASSES"}, {"original_string": "private static final Set<String> IGNORE_METHODS = new HashSet<String>(Arrays.asList(\n            \"getClass\",\n            // Ommit internal stuff\n            \"getStackTrace\",\n            \"getClassLoader\"\n    ));", "modifier": "private static final", "type": "Set<String>", "declarator": "IGNORE_METHODS = new HashSet<String>(Arrays.asList(\n            \"getClass\",\n            // Ommit internal stuff\n            \"getStackTrace\",\n            \"getClassLoader\"\n    ))", "var_name": "IGNORE_METHODS"}, {"original_string": "private static final Class[] IGNORED_RETURN_TYPES = new Class[]{\n            OutputStream.class,\n            Writer.class\n    };", "modifier": "private static final", "type": "Class[]", "declarator": "IGNORED_RETURN_TYPES = new Class[]{\n            OutputStream.class,\n            Writer.class\n    }", "var_name": "IGNORED_RETURN_TYPES"}, {"original_string": "private static final String[] GETTER_PREFIX = new String[]{\"get\", \"is\", \"has\"};", "modifier": "private static final", "type": "String[]", "declarator": "GETTER_PREFIX = new String[]{\"get\", \"is\", \"has\"}", "var_name": "GETTER_PREFIX"}], "methods": [{"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class", "signature": "Class getType()", "full_signature": "public Class getType()", "class_method_signature": "BeanExtractor.getType()", "testcase": false, "constructor": false}, {"identifier": "extractObject", "parameters": "(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts, boolean jsonify)", "modifiers": "@SuppressWarnings(\"PMD.CompareObjectsWithEquals\") public", "return": "Object", "signature": "Object extractObject(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts, boolean jsonify)", "full_signature": "@SuppressWarnings(\"PMD.CompareObjectsWithEquals\") public Object extractObject(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts, boolean jsonify)", "class_method_signature": "BeanExtractor.extractObject(ObjectToJsonConverter pConverter, Object pValue,\n                                Stack<String> pPathParts, boolean jsonify)", "testcase": false, "constructor": false}, {"identifier": "setObjectValue", "parameters": "(StringToObjectConverter pConverter,Object pInner, String pAttribute, Object pValue)", "modifiers": "public", "return": "Object", "signature": "Object setObjectValue(StringToObjectConverter pConverter,Object pInner, String pAttribute, Object pValue)", "full_signature": "public Object setObjectValue(StringToObjectConverter pConverter,Object pInner, String pAttribute, Object pValue)", "class_method_signature": "BeanExtractor.setObjectValue(StringToObjectConverter pConverter,Object pInner, String pAttribute, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "canSetValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSetValue()", "full_signature": "public boolean canSetValue()", "class_method_signature": "BeanExtractor.canSetValue()", "testcase": false, "constructor": false}, {"identifier": "exctractJsonifiedValue", "parameters": "(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts)", "modifiers": "private", "return": "Object", "signature": "Object exctractJsonifiedValue(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts)", "full_signature": "private Object exctractJsonifiedValue(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts)", "class_method_signature": "BeanExtractor.exctractJsonifiedValue(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts)", "testcase": false, "constructor": false}, {"identifier": "extractBeanValues", "parameters": "(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, List<String> pAttributes)", "modifiers": "private", "return": "Object", "signature": "Object extractBeanValues(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, List<String> pAttributes)", "full_signature": "private Object extractBeanValues(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, List<String> pAttributes)", "class_method_signature": "BeanExtractor.extractBeanValues(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts, List<String> pAttributes)", "testcase": false, "constructor": false}, {"identifier": "extractJsonifiedPropertyValue", "parameters": "(ObjectToJsonConverter pConverter, Object pValue, String pAttribute, Stack<String> pPathParts)", "modifiers": "@SuppressWarnings(\"PMD.CompareObjectsWithEquals\") private", "return": "Object", "signature": "Object extractJsonifiedPropertyValue(ObjectToJsonConverter pConverter, Object pValue, String pAttribute, Stack<String> pPathParts)", "full_signature": "@SuppressWarnings(\"PMD.CompareObjectsWithEquals\") private Object extractJsonifiedPropertyValue(ObjectToJsonConverter pConverter, Object pValue, String pAttribute, Stack<String> pPathParts)", "class_method_signature": "BeanExtractor.extractJsonifiedPropertyValue(ObjectToJsonConverter pConverter, Object pValue, String pAttribute, Stack<String> pPathParts)", "testcase": false, "constructor": false}, {"identifier": "extractBeanAttributes", "parameters": "(Object pValue)", "modifiers": "private", "return": "List<String>", "signature": "List<String> extractBeanAttributes(Object pValue)", "full_signature": "private List<String> extractBeanAttributes(Object pValue)", "class_method_signature": "BeanExtractor.extractBeanAttributes(Object pValue)", "testcase": false, "constructor": false}, {"identifier": "hasAnnotation", "parameters": "(Method method, String annotation)", "modifiers": "private", "return": "boolean", "signature": "boolean hasAnnotation(Method method, String annotation)", "full_signature": "private boolean hasAnnotation(Method method, String annotation)", "class_method_signature": "BeanExtractor.hasAnnotation(Method method, String annotation)", "testcase": false, "constructor": false}, {"identifier": "addAttributes", "parameters": "(List<String> pAttrs, Method pMethod)", "modifiers": "@SuppressWarnings(\"PMD.UnnecessaryCaseChange\") private", "return": "void", "signature": "void addAttributes(List<String> pAttrs, Method pMethod)", "full_signature": "@SuppressWarnings(\"PMD.UnnecessaryCaseChange\") private void addAttributes(List<String> pAttrs, Method pMethod)", "class_method_signature": "BeanExtractor.addAttributes(List<String> pAttrs, Method pMethod)", "testcase": false, "constructor": false}, {"identifier": "extractBeanPropertyValue", "parameters": "(Object pValue, String pAttribute, ValueFaultHandler pFaultHandler)", "modifiers": "private", "return": "Object", "signature": "Object extractBeanPropertyValue(Object pValue, String pAttribute, ValueFaultHandler pFaultHandler)", "full_signature": "private Object extractBeanPropertyValue(Object pValue, String pAttribute, ValueFaultHandler pFaultHandler)", "class_method_signature": "BeanExtractor.extractBeanPropertyValue(Object pValue, String pAttribute, ValueFaultHandler pFaultHandler)", "testcase": false, "constructor": false}, {"identifier": "isIgnoredType", "parameters": "(Class<?> pReturnType)", "modifiers": "private", "return": "boolean", "signature": "boolean isIgnoredType(Class<?> pReturnType)", "full_signature": "private boolean isIgnoredType(Class<?> pReturnType)", "class_method_signature": "BeanExtractor.isIgnoredType(Class<?> pReturnType)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/json/BeanExtractor.java"}, "focal_method": {"identifier": "canSetValue", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean canSetValue() {\n        return true;\n    }", "signature": "boolean canSetValue()", "full_signature": "public boolean canSetValue()", "class_method_signature": "BeanExtractor.canSetValue()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}