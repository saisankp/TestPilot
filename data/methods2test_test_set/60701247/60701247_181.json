{"test_class": {"identifier": "AvdWizardUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder myFolder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "myFolder = new TemporaryFolder()", "var_name": "myFolder"}], "file": "android/testSrc/com/android/tools/idea/avdmanager/AvdWizardUtilsTest.java"}, "test_case": {"identifier": "testEmulatorSupportsWebp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEmulatorSupportsWebp() {\n    assertThat(emulatorSupportsWebp(createMockSdk(\"24.0.0\", FD_EMULATOR))).isFalse();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.0.0\", FD_EMULATOR))).isFalse();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.1.0\", FD_EMULATOR))).isFalse();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.1.9\", FD_EMULATOR))).isFalse();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.2.0\", FD_EMULATOR))).isFalse();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.2.2\", FD_EMULATOR))).isFalse();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.2.3\", FD_EMULATOR))).isTrue();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.3.0\", FD_EMULATOR))).isTrue();\n    assertThat(emulatorSupportsWebp(createMockSdk(\"26.0.0\", FD_EMULATOR))).isTrue();\n\n    assertThat(emulatorSupportsWebp(createMockSdk(\"25.2.3\", \"irrelevant\"))).isFalse();\n  }", "signature": "void testEmulatorSupportsWebp()", "full_signature": "@Test public void testEmulatorSupportsWebp()", "class_method_signature": "AvdWizardUtilsTest.testEmulatorSupportsWebp()", "testcase": true, "constructor": false, "invocations": ["isFalse", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isFalse", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isFalse", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isFalse", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isFalse", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isFalse", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isTrue", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isTrue", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isTrue", "assertThat", "emulatorSupportsWebp", "createMockSdk", "isFalse", "assertThat", "emulatorSupportsWebp", "createMockSdk"]}, "focal_class": {"identifier": "AvdWizardUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String WIZARD_ONLY = \"AvdManager.WizardOnly.\";", "modifier": "public static final", "type": "String", "declarator": "WIZARD_ONLY = \"AvdManager.WizardOnly.\"", "var_name": "WIZARD_ONLY"}, {"original_string": "public static final String DEVICE_DEFINITION_KEY = WIZARD_ONLY + \"DeviceDefinition\";", "modifier": "public static final", "type": "String", "declarator": "DEVICE_DEFINITION_KEY = WIZARD_ONLY + \"DeviceDefinition\"", "var_name": "DEVICE_DEFINITION_KEY"}, {"original_string": "public static final String SYSTEM_IMAGE_KEY = WIZARD_ONLY + \"SystemImage\";", "modifier": "public static final", "type": "String", "declarator": "SYSTEM_IMAGE_KEY = WIZARD_ONLY + \"SystemImage\"", "var_name": "SYSTEM_IMAGE_KEY"}, {"original_string": "public static final String RAM_STORAGE_KEY = AvdManager.AVD_INI_RAM_SIZE;", "modifier": "public static final", "type": "String", "declarator": "RAM_STORAGE_KEY = AvdManager.AVD_INI_RAM_SIZE", "var_name": "RAM_STORAGE_KEY"}, {"original_string": "public static final String VM_HEAP_STORAGE_KEY = AvdManager.AVD_INI_VM_HEAP_SIZE;", "modifier": "public static final", "type": "String", "declarator": "VM_HEAP_STORAGE_KEY = AvdManager.AVD_INI_VM_HEAP_SIZE", "var_name": "VM_HEAP_STORAGE_KEY"}, {"original_string": "public static final String INTERNAL_STORAGE_KEY = AvdManager.AVD_INI_DATA_PARTITION_SIZE;", "modifier": "public static final", "type": "String", "declarator": "INTERNAL_STORAGE_KEY = AvdManager.AVD_INI_DATA_PARTITION_SIZE", "var_name": "INTERNAL_STORAGE_KEY"}, {"original_string": "public static final String SD_CARD_STORAGE_KEY = AvdManager.AVD_INI_SDCARD_SIZE;", "modifier": "public static final", "type": "String", "declarator": "SD_CARD_STORAGE_KEY = AvdManager.AVD_INI_SDCARD_SIZE", "var_name": "SD_CARD_STORAGE_KEY"}, {"original_string": "public static final String EXISTING_SD_LOCATION = AvdManager.AVD_INI_SDCARD_PATH;", "modifier": "public static final", "type": "String", "declarator": "EXISTING_SD_LOCATION = AvdManager.AVD_INI_SDCARD_PATH", "var_name": "EXISTING_SD_LOCATION"}, {"original_string": "public static final String DISPLAY_SD_SIZE_KEY = WIZARD_ONLY + \"displaySdCardSize\";", "modifier": "public static final", "type": "String", "declarator": "DISPLAY_SD_SIZE_KEY = WIZARD_ONLY + \"displaySdCardSize\"", "var_name": "DISPLAY_SD_SIZE_KEY"}, {"original_string": "public static final String DISPLAY_SD_LOCATION_KEY = WIZARD_ONLY + \"displaySdLocation\";", "modifier": "public static final", "type": "String", "declarator": "DISPLAY_SD_LOCATION_KEY = WIZARD_ONLY + \"displaySdLocation\"", "var_name": "DISPLAY_SD_LOCATION_KEY"}, {"original_string": "public static final String DISPLAY_USE_EXTERNAL_SD_KEY = WIZARD_ONLY + \"displayUseExistingSd\";", "modifier": "public static final", "type": "String", "declarator": "DISPLAY_USE_EXTERNAL_SD_KEY = WIZARD_ONLY + \"displayUseExistingSd\"", "var_name": "DISPLAY_USE_EXTERNAL_SD_KEY"}, {"original_string": "public static final String DEFAULT_ORIENTATION_KEY = WIZARD_ONLY + \"DefaultOrientation\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_ORIENTATION_KEY = WIZARD_ONLY + \"DefaultOrientation\"", "var_name": "DEFAULT_ORIENTATION_KEY"}, {"original_string": "public static final String AVD_INI_NETWORK_SPEED = \"runtime.network.speed\";", "modifier": "public static final", "type": "String", "declarator": "AVD_INI_NETWORK_SPEED = \"runtime.network.speed\"", "var_name": "AVD_INI_NETWORK_SPEED"}, {"original_string": "public static final String NETWORK_SPEED_KEY = AVD_INI_NETWORK_SPEED;", "modifier": "public static final", "type": "String", "declarator": "NETWORK_SPEED_KEY = AVD_INI_NETWORK_SPEED", "var_name": "NETWORK_SPEED_KEY"}, {"original_string": "public static final String AVD_INI_NETWORK_LATENCY = \"runtime.network.latency\";", "modifier": "public static final", "type": "String", "declarator": "AVD_INI_NETWORK_LATENCY = \"runtime.network.latency\"", "var_name": "AVD_INI_NETWORK_LATENCY"}, {"original_string": "public static final String NETWORK_LATENCY_KEY = AVD_INI_NETWORK_LATENCY;", "modifier": "public static final", "type": "String", "declarator": "NETWORK_LATENCY_KEY = AVD_INI_NETWORK_LATENCY", "var_name": "NETWORK_LATENCY_KEY"}, {"original_string": "public static final String FRONT_CAMERA_KEY = AvdManager.AVD_INI_CAMERA_FRONT;", "modifier": "public static final", "type": "String", "declarator": "FRONT_CAMERA_KEY = AvdManager.AVD_INI_CAMERA_FRONT", "var_name": "FRONT_CAMERA_KEY"}, {"original_string": "public static final String BACK_CAMERA_KEY = AvdManager.AVD_INI_CAMERA_BACK;", "modifier": "public static final", "type": "String", "declarator": "BACK_CAMERA_KEY = AvdManager.AVD_INI_CAMERA_BACK", "var_name": "BACK_CAMERA_KEY"}, {"original_string": "public static final String USE_HOST_GPU_KEY = AvdManager.AVD_INI_GPU_EMULATION;", "modifier": "public static final", "type": "String", "declarator": "USE_HOST_GPU_KEY = AvdManager.AVD_INI_GPU_EMULATION", "var_name": "USE_HOST_GPU_KEY"}, {"original_string": "public static final String HOST_GPU_MODE_KEY = AvdManager.AVD_INI_GPU_MODE;", "modifier": "public static final", "type": "String", "declarator": "HOST_GPU_MODE_KEY = AvdManager.AVD_INI_GPU_MODE", "var_name": "HOST_GPU_MODE_KEY"}, {"original_string": "public static final String USE_COLD_BOOT = AvdManager.AVD_INI_FORCE_COLD_BOOT_MODE;", "modifier": "public static final", "type": "String", "declarator": "USE_COLD_BOOT = AvdManager.AVD_INI_FORCE_COLD_BOOT_MODE", "var_name": "USE_COLD_BOOT"}, {"original_string": "public static final String USE_FAST_BOOT = AvdManager.AVD_INI_FORCE_FAST_BOOT_MODE;", "modifier": "public static final", "type": "String", "declarator": "USE_FAST_BOOT = AvdManager.AVD_INI_FORCE_FAST_BOOT_MODE", "var_name": "USE_FAST_BOOT"}, {"original_string": "public static final String USE_CHOSEN_SNAPSHOT_BOOT = AvdManager.AVD_INI_FORCE_CHOSEN_SNAPSHOT_BOOT_MODE;", "modifier": "public static final", "type": "String", "declarator": "USE_CHOSEN_SNAPSHOT_BOOT = AvdManager.AVD_INI_FORCE_CHOSEN_SNAPSHOT_BOOT_MODE", "var_name": "USE_CHOSEN_SNAPSHOT_BOOT"}, {"original_string": "public static final String CHOSEN_SNAPSHOT_FILE = AvdManager.AVD_INI_CHOSEN_SNAPSHOT_FILE;", "modifier": "public static final", "type": "String", "declarator": "CHOSEN_SNAPSHOT_FILE = AvdManager.AVD_INI_CHOSEN_SNAPSHOT_FILE", "var_name": "CHOSEN_SNAPSHOT_FILE"}, {"original_string": "public static final String COLD_BOOT_ONCE_VALUE = AvdManager.AVD_INI_COLD_BOOT_ONCE;", "modifier": "public static final", "type": "String", "declarator": "COLD_BOOT_ONCE_VALUE = AvdManager.AVD_INI_COLD_BOOT_ONCE", "var_name": "COLD_BOOT_ONCE_VALUE"}, {"original_string": "public static final String IS_IN_EDIT_MODE_KEY = WIZARD_ONLY + \"isInEditMode\";", "modifier": "public static final", "type": "String", "declarator": "IS_IN_EDIT_MODE_KEY = WIZARD_ONLY + \"isInEditMode\"", "var_name": "IS_IN_EDIT_MODE_KEY"}, {"original_string": "public static final String CUSTOM_SKIN_FILE_KEY = AvdManager.AVD_INI_SKIN_PATH;", "modifier": "public static final", "type": "String", "declarator": "CUSTOM_SKIN_FILE_KEY = AvdManager.AVD_INI_SKIN_PATH", "var_name": "CUSTOM_SKIN_FILE_KEY"}, {"original_string": "public static final String BACKUP_SKIN_FILE_KEY = AvdManager.AVD_INI_BACKUP_SKIN_PATH;", "modifier": "public static final", "type": "String", "declarator": "BACKUP_SKIN_FILE_KEY = AvdManager.AVD_INI_BACKUP_SKIN_PATH", "var_name": "BACKUP_SKIN_FILE_KEY"}, {"original_string": "public static final String DEVICE_FRAME_KEY = \"showDeviceFrame\";", "modifier": "public static final", "type": "String", "declarator": "DEVICE_FRAME_KEY = \"showDeviceFrame\"", "var_name": "DEVICE_FRAME_KEY"}, {"original_string": "public static final String DISPLAY_NAME_KEY = AVD_INI_DISPLAY_NAME;", "modifier": "public static final", "type": "String", "declarator": "DISPLAY_NAME_KEY = AVD_INI_DISPLAY_NAME", "var_name": "DISPLAY_NAME_KEY"}, {"original_string": "public static final String AVD_ID_KEY = AVD_INI_AVD_ID;", "modifier": "public static final", "type": "String", "declarator": "AVD_ID_KEY = AVD_INI_AVD_ID", "var_name": "AVD_ID_KEY"}, {"original_string": "public static final String CPU_CORES_KEY = AvdManager.AVD_INI_CPU_CORES;", "modifier": "public static final", "type": "String", "declarator": "CPU_CORES_KEY = AvdManager.AVD_INI_CPU_CORES", "var_name": "CPU_CORES_KEY"}, {"original_string": "public static final String HAS_HARDWARE_KEYBOARD_KEY = HardwareProperties.HW_KEYBOARD;", "modifier": "public static final", "type": "String", "declarator": "HAS_HARDWARE_KEYBOARD_KEY = HardwareProperties.HW_KEYBOARD", "var_name": "HAS_HARDWARE_KEYBOARD_KEY"}, {"original_string": "public static final Font STANDARD_FONT = JBFont.create(new Font(\"Sans\", Font.PLAIN, 12));", "modifier": "public static final", "type": "Font", "declarator": "STANDARD_FONT = JBFont.create(new Font(\"Sans\", Font.PLAIN, 12))", "var_name": "STANDARD_FONT"}, {"original_string": "public static final Font FIGURE_FONT = JBFont.create(new Font(\"Sans\", Font.PLAIN, 10));", "modifier": "public static final", "type": "Font", "declarator": "FIGURE_FONT = JBFont.create(new Font(\"Sans\", Font.PLAIN, 10))", "var_name": "FIGURE_FONT"}, {"original_string": "public static final Font TITLE_FONT = JBFont.create(new Font(\"Sans\", Font.BOLD, 16));", "modifier": "public static final", "type": "Font", "declarator": "TITLE_FONT = JBFont.create(new Font(\"Sans\", Font.BOLD, 16))", "var_name": "TITLE_FONT"}, {"original_string": "public static final List<IdDisplay> ALL_DEVICE_TAGS = ImmutableList.of(DEFAULT_TAG, WEAR_TAG, TV_TAG, CHROMEOS_TAG, AUTOMOTIVE_TAG);", "modifier": "public static final", "type": "List<IdDisplay>", "declarator": "ALL_DEVICE_TAGS = ImmutableList.of(DEFAULT_TAG, WEAR_TAG, TV_TAG, CHROMEOS_TAG, AUTOMOTIVE_TAG)", "var_name": "ALL_DEVICE_TAGS"}, {"original_string": "public static final List<IdDisplay> TAGS_WITH_GOOGLE_API = ImmutableList.of(GOOGLE_APIS_TAG, GOOGLE_APIS_X86_TAG,\n                                                                              PLAY_STORE_TAG, TV_TAG, WEAR_TAG, CHROMEOS_TAG,\n                                                                              AUTOMOTIVE_TAG);", "modifier": "public static final", "type": "List<IdDisplay>", "declarator": "TAGS_WITH_GOOGLE_API = ImmutableList.of(GOOGLE_APIS_TAG, GOOGLE_APIS_X86_TAG,\n                                                                              PLAY_STORE_TAG, TV_TAG, WEAR_TAG, CHROMEOS_TAG,\n                                                                              AUTOMOTIVE_TAG)", "var_name": "TAGS_WITH_GOOGLE_API"}, {"original_string": "public static final String CREATE_SKIN_HELP_LINK = \"http://developer.android.com/tools/devices/managing-avds.html#skins\";", "modifier": "public static final", "type": "String", "declarator": "CREATE_SKIN_HELP_LINK = \"http://developer.android.com/tools/devices/managing-avds.html#skins\"", "var_name": "CREATE_SKIN_HELP_LINK"}, {"original_string": "public static final File NO_SKIN = new File(\"_no_skin\");", "modifier": "public static final", "type": "File", "declarator": "NO_SKIN = new File(\"_no_skin\")", "var_name": "NO_SKIN"}, {"original_string": "private static final Dimension AVD_WIZARD_MIN_SIZE = JBUI.size(600, 400);", "modifier": "private static final", "type": "Dimension", "declarator": "AVD_WIZARD_MIN_SIZE = JBUI.size(600, 400)", "var_name": "AVD_WIZARD_MIN_SIZE"}, {"original_string": "private static final Dimension AVD_WIZARD_SIZE = JBUI.size(1000, 650);", "modifier": "private static final", "type": "Dimension", "declarator": "AVD_WIZARD_SIZE = JBUI.size(1000, 650)", "var_name": "AVD_WIZARD_SIZE"}, {"original_string": "private static final String AVD_WIZARD_HELP_URL = \"https://developer.android.com/r/studio-ui/avd-manager.html\";", "modifier": "private static final", "type": "String", "declarator": "AVD_WIZARD_HELP_URL = \"https://developer.android.com/r/studio-ui/avd-manager.html\"", "var_name": "AVD_WIZARD_HELP_URL"}, {"original_string": "private static final int MAX_RAM_MB = 1536;", "modifier": "private static final", "type": "int", "declarator": "MAX_RAM_MB = 1536", "var_name": "MAX_RAM_MB"}, {"original_string": "private static final Revision MIN_SNAPSHOT_MANAGEMENT_VERSION = new Revision(27, 2, 5);", "modifier": "private static final", "type": "Revision", "declarator": "MIN_SNAPSHOT_MANAGEMENT_VERSION = new Revision(27, 2, 5)", "var_name": "MIN_SNAPSHOT_MANAGEMENT_VERSION"}, {"original_string": "private static final Revision MIN_WEBP_VERSION = new Revision(25, 2, 3);", "modifier": "private static final", "type": "Revision", "declarator": "MIN_WEBP_VERSION = new Revision(25, 2, 3)", "var_name": "MIN_WEBP_VERSION"}, {"original_string": "private static Map<String, HardwareProperties.HardwareProperty> ourHardwareProperties;", "modifier": "private static", "type": "Map<String, HardwareProperties.HardwareProperty>", "declarator": "ourHardwareProperties", "var_name": "ourHardwareProperties"}], "methods": [{"identifier": "getLog", "parameters": "()", "modifiers": "private static", "return": "Logger", "signature": "Logger getLog()", "full_signature": "private static Logger getLog()", "class_method_signature": "AvdWizardUtils.getLog()", "testcase": false, "constructor": false}, {"identifier": "getDefaultRam", "parameters": "(@NotNull Hardware hardware)", "modifiers": "@NotNull public static", "return": "Storage", "signature": "Storage getDefaultRam(@NotNull Hardware hardware)", "full_signature": "@NotNull public static Storage getDefaultRam(@NotNull Hardware hardware)", "class_method_signature": "AvdWizardUtils.getDefaultRam(@NotNull Hardware hardware)", "testcase": false, "constructor": false}, {"identifier": "getMaxPossibleRam", "parameters": "()", "modifiers": "@NotNull public static", "return": "Storage", "signature": "Storage getMaxPossibleRam()", "full_signature": "@NotNull public static Storage getMaxPossibleRam()", "class_method_signature": "AvdWizardUtils.getMaxPossibleRam()", "testcase": false, "constructor": false}, {"identifier": "getMaxPossibleRam", "parameters": "(Storage ram)", "modifiers": "@NotNull private static", "return": "Storage", "signature": "Storage getMaxPossibleRam(Storage ram)", "full_signature": "@NotNull private static Storage getMaxPossibleRam(Storage ram)", "class_method_signature": "AvdWizardUtils.getMaxPossibleRam(Storage ram)", "testcase": false, "constructor": false}, {"identifier": "getMaxCpuCores", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getMaxCpuCores()", "full_signature": "public static int getMaxCpuCores()", "class_method_signature": "AvdWizardUtils.getMaxCpuCores()", "testcase": false, "constructor": false}, {"identifier": "getHardwarePropertyDefaultValue", "parameters": "(String name, @Nullable AndroidSdkHandler sdkHandler)", "modifiers": "@Nullable public static", "return": "String", "signature": "String getHardwarePropertyDefaultValue(String name, @Nullable AndroidSdkHandler sdkHandler)", "full_signature": "@Nullable public static String getHardwarePropertyDefaultValue(String name, @Nullable AndroidSdkHandler sdkHandler)", "class_method_signature": "AvdWizardUtils.getHardwarePropertyDefaultValue(String name, @Nullable AndroidSdkHandler sdkHandler)", "testcase": false, "constructor": false}, {"identifier": "cleanAvdName", "parameters": "(@NotNull AvdManagerConnection connection, @NotNull String candidateBase, boolean uniquify)", "modifiers": "public static", "return": "String", "signature": "String cleanAvdName(@NotNull AvdManagerConnection connection, @NotNull String candidateBase, boolean uniquify)", "full_signature": "public static String cleanAvdName(@NotNull AvdManagerConnection connection, @NotNull String candidateBase, boolean uniquify)", "class_method_signature": "AvdWizardUtils.cleanAvdName(@NotNull AvdManagerConnection connection, @NotNull String candidateBase, boolean uniquify)", "testcase": false, "constructor": false}, {"identifier": "pathToUpdatedSkins", "parameters": "(@Nullable File deviceFile, @Nullable SystemImageDescription image, @NotNull FileOp fop)", "modifiers": "@Nullable public static", "return": "File", "signature": "File pathToUpdatedSkins(@Nullable File deviceFile, @Nullable SystemImageDescription image, @NotNull FileOp fop)", "full_signature": "@Nullable public static File pathToUpdatedSkins(@Nullable File deviceFile, @Nullable SystemImageDescription image, @NotNull FileOp fop)", "class_method_signature": "AvdWizardUtils.pathToUpdatedSkins(@Nullable File deviceFile, @Nullable SystemImageDescription image, @NotNull FileOp fop)", "testcase": false, "constructor": false}, {"identifier": "ensureSkinsAreCurrent", "parameters": "(@Nullable File resourcePath,\n                                           @Nullable File skinDestination,\n                                           @Nullable File deviceName,\n                                           boolean emulatorCanDecodeWebp,\n                                           @NotNull FileOp fop)", "modifiers": "@VisibleForTesting @Nullable public static", "return": "File", "signature": "File ensureSkinsAreCurrent(@Nullable File resourcePath,\n                                           @Nullable File skinDestination,\n                                           @Nullable File deviceName,\n                                           boolean emulatorCanDecodeWebp,\n                                           @NotNull FileOp fop)", "full_signature": "@VisibleForTesting @Nullable public static File ensureSkinsAreCurrent(@Nullable File resourcePath,\n                                           @Nullable File skinDestination,\n                                           @Nullable File deviceName,\n                                           boolean emulatorCanDecodeWebp,\n                                           @NotNull FileOp fop)", "class_method_signature": "AvdWizardUtils.ensureSkinsAreCurrent(@Nullable File resourcePath,\n                                           @Nullable File skinDestination,\n                                           @Nullable File deviceName,\n                                           boolean emulatorCanDecodeWebp,\n                                           @NotNull FileOp fop)", "testcase": false, "constructor": false}, {"identifier": "emulatorSupportsWebp", "parameters": "(@NotNull AndroidSdkHandler sdkHandler)", "modifiers": "@VisibleForTesting static", "return": "boolean", "signature": "boolean emulatorSupportsWebp(@NotNull AndroidSdkHandler sdkHandler)", "full_signature": "@VisibleForTesting static boolean emulatorSupportsWebp(@NotNull AndroidSdkHandler sdkHandler)", "class_method_signature": "AvdWizardUtils.emulatorSupportsWebp(@NotNull AndroidSdkHandler sdkHandler)", "testcase": false, "constructor": false}, {"identifier": "emulatorSupportsSnapshotManagement", "parameters": "(@NotNull AndroidSdkHandler sdkHandler)", "modifiers": "static", "return": "boolean", "signature": "boolean emulatorSupportsSnapshotManagement(@NotNull AndroidSdkHandler sdkHandler)", "full_signature": "static boolean emulatorSupportsSnapshotManagement(@NotNull AndroidSdkHandler sdkHandler)", "class_method_signature": "AvdWizardUtils.emulatorSupportsSnapshotManagement(@NotNull AndroidSdkHandler sdkHandler)", "testcase": false, "constructor": false}, {"identifier": "emulatorVersionIsAtLeast", "parameters": "(@NotNull AndroidSdkHandler sdkHandler, Revision minRevision)", "modifiers": "private static", "return": "boolean", "signature": "boolean emulatorVersionIsAtLeast(@NotNull AndroidSdkHandler sdkHandler, Revision minRevision)", "full_signature": "private static boolean emulatorVersionIsAtLeast(@NotNull AndroidSdkHandler sdkHandler, Revision minRevision)", "class_method_signature": "AvdWizardUtils.emulatorVersionIsAtLeast(@NotNull AndroidSdkHandler sdkHandler, Revision minRevision)", "testcase": false, "constructor": false}, {"identifier": "convertWebpSkinToPng", "parameters": "(@NotNull FileOp fop, @NotNull File dest, @NotNull File resourcePath)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void convertWebpSkinToPng(@NotNull FileOp fop, @NotNull File dest, @NotNull File resourcePath)", "full_signature": "@VisibleForTesting static void convertWebpSkinToPng(@NotNull FileOp fop, @NotNull File dest, @NotNull File resourcePath)", "class_method_signature": "AvdWizardUtils.convertWebpSkinToPng(@NotNull FileOp fop, @NotNull File dest, @NotNull File resourcePath)", "testcase": false, "constructor": false}, {"identifier": "createAvdWizard", "parameters": "(@Nullable Component parent,\n                                                  @Nullable Project project)", "modifiers": "public static", "return": "ModelWizardDialog", "signature": "ModelWizardDialog createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project)", "full_signature": "public static ModelWizardDialog createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project)", "class_method_signature": "AvdWizardUtils.createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project)", "testcase": false, "constructor": false}, {"identifier": "createAvdWizard", "parameters": "(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @Nullable AvdInfo avdInfo)", "modifiers": "public static", "return": "ModelWizardDialog", "signature": "ModelWizardDialog createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @Nullable AvdInfo avdInfo)", "full_signature": "public static ModelWizardDialog createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @Nullable AvdInfo avdInfo)", "class_method_signature": "AvdWizardUtils.createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @Nullable AvdInfo avdInfo)", "testcase": false, "constructor": false}, {"identifier": "createAvdWizard", "parameters": "(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @NotNull AvdOptionsModel model)", "modifiers": "public static", "return": "ModelWizardDialog", "signature": "ModelWizardDialog createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @NotNull AvdOptionsModel model)", "full_signature": "public static ModelWizardDialog createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @NotNull AvdOptionsModel model)", "class_method_signature": "AvdWizardUtils.createAvdWizard(@Nullable Component parent,\n                                                  @Nullable Project project,\n                                                  @NotNull AvdOptionsModel model)", "testcase": false, "constructor": false}, {"identifier": "createAvdWizardForDuplication", "parameters": "(@Nullable Component parent,\n                                                                @Nullable Project project,\n                                                                @NotNull  AvdInfo avdInfo)", "modifiers": "public static", "return": "ModelWizardDialog", "signature": "ModelWizardDialog createAvdWizardForDuplication(@Nullable Component parent,\n                                                                @Nullable Project project,\n                                                                @NotNull  AvdInfo avdInfo)", "full_signature": "public static ModelWizardDialog createAvdWizardForDuplication(@Nullable Component parent,\n                                                                @Nullable Project project,\n                                                                @NotNull  AvdInfo avdInfo)", "class_method_signature": "AvdWizardUtils.createAvdWizardForDuplication(@Nullable Component parent,\n                                                                @Nullable Project project,\n                                                                @NotNull  AvdInfo avdInfo)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/avdmanager/AvdWizardUtils.java"}, "focal_method": {"identifier": "emulatorSupportsWebp", "parameters": "(@NotNull AndroidSdkHandler sdkHandler)", "modifiers": "@VisibleForTesting static", "return": "boolean", "body": "@VisibleForTesting\n  static boolean emulatorSupportsWebp(@NotNull AndroidSdkHandler sdkHandler) {\n    return emulatorVersionIsAtLeast(sdkHandler, MIN_WEBP_VERSION);\n  }", "signature": "boolean emulatorSupportsWebp(@NotNull AndroidSdkHandler sdkHandler)", "full_signature": "@VisibleForTesting static boolean emulatorSupportsWebp(@NotNull AndroidSdkHandler sdkHandler)", "class_method_signature": "AvdWizardUtils.emulatorSupportsWebp(@NotNull AndroidSdkHandler sdkHandler)", "testcase": false, "constructor": false, "invocations": ["emulatorVersionIsAtLeast"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}