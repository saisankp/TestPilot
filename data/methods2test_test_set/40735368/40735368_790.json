{"test_class": {"identifier": "WorldFileWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/main/src/test/java/org/geotools/data/WorldFileWriterTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrite() throws Exception {\n        AffineTransform at = new AffineTransform(42.34, 0, 0, -42.34,347671.10, 5196940.18);\n\n        File tmp = File.createTempFile(\"write\", \"wld\", new File(\"target\"));\n        new WorldFileWriter(tmp, at);\n\n        BufferedReader r = new BufferedReader(new FileReader(tmp));\n        assertEquals(42.34, Double.parseDouble(r.readLine()), 0.1);\n        assertEquals(0, Double.parseDouble(r.readLine()), 0.1);\n        assertEquals(0, Double.parseDouble(r.readLine()), 0.1);\n        assertEquals(-42.34, Double.parseDouble(r.readLine()), 0.1);\n        assertEquals(347671.10, Double.parseDouble(r.readLine()), 0.1);\n        assertEquals(5196940.18, Double.parseDouble(r.readLine()), 0.1);\n\n        assertNull(r.readLine());\n    }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "WorldFileWriterTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "assertEquals", "parseDouble", "readLine", "assertEquals", "parseDouble", "readLine", "assertEquals", "parseDouble", "readLine", "assertEquals", "parseDouble", "readLine", "assertEquals", "parseDouble", "readLine", "assertEquals", "parseDouble", "readLine", "assertNull", "readLine"]}, "focal_class": {"identifier": "WorldFileWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_BUFFER_SIZE = 4096;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BUFFER_SIZE = 4096", "var_name": "DEFAULT_BUFFER_SIZE"}, {"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging\n\t\t\t.getLogger(\"org.geotools.data.data\");", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n\t\t\t.getLogger(\"org.geotools.data.data\")", "var_name": "LOGGER"}], "methods": [{"identifier": "checkTransform", "parameters": "(AffineTransform transform)", "modifiers": "private static", "return": "AffineTransform", "signature": "AffineTransform checkTransform(AffineTransform transform)", "full_signature": "private static AffineTransform checkTransform(AffineTransform transform)", "class_method_signature": "WorldFileWriter.checkTransform(AffineTransform transform)", "testcase": false, "constructor": false}, {"identifier": "checkMathTransform", "parameters": "(MathTransform transform)", "modifiers": "private static", "return": "MathTransform", "signature": "MathTransform checkMathTransform(MathTransform transform)", "full_signature": "private static MathTransform checkMathTransform(MathTransform transform)", "class_method_signature": "WorldFileWriter.checkMathTransform(MathTransform transform)", "testcase": false, "constructor": false}, {"identifier": "WorldFileWriter", "parameters": "(final File outLocation,\n\t\t\tfinal AffineTransform transform)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final File outLocation,\n\t\t\tfinal AffineTransform transform)", "full_signature": "public  WorldFileWriter(final File outLocation,\n\t\t\tfinal AffineTransform transform)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final File outLocation,\n\t\t\tfinal AffineTransform transform)", "testcase": false, "constructor": true}, {"identifier": "WorldFileWriter", "parameters": "(final File outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final File outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "full_signature": "public  WorldFileWriter(final File outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final File outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "testcase": false, "constructor": true}, {"identifier": "WorldFileWriter", "parameters": "(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform)", "full_signature": "public  WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform)", "testcase": false, "constructor": true}, {"identifier": "WorldFileWriter", "parameters": "(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "full_signature": "public  WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal AffineTransform transform, final int buffSize)", "testcase": false, "constructor": true}, {"identifier": "WorldFileWriter", "parameters": "(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform)", "full_signature": "public  WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform)", "testcase": false, "constructor": true}, {"identifier": "WorldFileWriter", "parameters": "(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform, final int buffSize)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform, final int buffSize)", "full_signature": "public  WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform, final int buffSize)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final OutputStream outLocation,\n\t\t\tfinal MathTransform transform, final int buffSize)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(BufferedWriter writer, MathTransform transform)", "modifiers": "private", "return": "void", "signature": "void write(BufferedWriter writer, MathTransform transform)", "full_signature": "private void write(BufferedWriter writer, MathTransform transform)", "class_method_signature": "WorldFileWriter.write(BufferedWriter writer, MathTransform transform)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(BufferedWriter writer)", "modifiers": "private", "return": "void", "signature": "void close(BufferedWriter writer)", "full_signature": "private void close(BufferedWriter writer)", "class_method_signature": "WorldFileWriter.close(BufferedWriter writer)", "testcase": false, "constructor": false}, {"identifier": "WorldFileWriter", "parameters": "(final File outLocation, final MathTransform transform, int buffSize)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final File outLocation, final MathTransform transform, int buffSize)", "full_signature": "public  WorldFileWriter(final File outLocation, final MathTransform transform, int buffSize)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final File outLocation, final MathTransform transform, int buffSize)", "testcase": false, "constructor": true}, {"identifier": "WorldFileWriter", "parameters": "(final File outLocation, final MathTransform transform)", "modifiers": "public", "return": "", "signature": " WorldFileWriter(final File outLocation, final MathTransform transform)", "full_signature": "public  WorldFileWriter(final File outLocation, final MathTransform transform)", "class_method_signature": "WorldFileWriter.WorldFileWriter(final File outLocation, final MathTransform transform)", "testcase": false, "constructor": true}], "file": "modules/library/main/src/main/java/org/geotools/data/WorldFileWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(BufferedWriter writer, MathTransform transform)", "modifiers": "private", "return": "void", "body": "private void write(BufferedWriter writer, MathTransform transform){\n\t\ttry {\n\t\t\tif ((transform instanceof IdentityTransform)) {\n\t\t\t\twriter.write(\"1\");\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(\"0\");\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(\"0\");\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(\"1\");\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(\"0\");\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(\"0\");\n\t\t\t\tclose(writer);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ((transform instanceof AffineTransform2D)) {\n\t\t\t\tfinal AffineTransform2D affine = (AffineTransform2D) transform;\n\t\t\t\twriter.write(Double.toString(affine.getScaleX()));\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(Double.toString(affine.getShearX()));\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(Double.toString(affine.getShearY()));\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(Double.toString(affine.getScaleY()));\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(Double.toString(affine.getTranslateX()));\n\t\t\t\twriter.newLine();\n\t\t\t\twriter.write(Double.toString(affine.getTranslateY()));\n\t\t\t\tclose(writer);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tassert false:transform;\n\t\t} catch (IOException e) {\n\t\t\tif(LOGGER.isLoggable(Level.SEVERE))\n\t\t\t\tLOGGER.log(Level.SEVERE,e.getLocalizedMessage(),e);\n\t\t} finally {\n\t\t\tclose(writer);\n\t\t}\n\t\t\n\n\t}", "signature": "void write(BufferedWriter writer, MathTransform transform)", "full_signature": "private void write(BufferedWriter writer, MathTransform transform)", "class_method_signature": "WorldFileWriter.write(BufferedWriter writer, MathTransform transform)", "testcase": false, "constructor": false, "invocations": ["write", "newLine", "write", "newLine", "write", "newLine", "write", "newLine", "write", "newLine", "write", "close", "write", "toString", "getScaleX", "newLine", "write", "toString", "getShearX", "newLine", "write", "toString", "getShearY", "newLine", "write", "toString", "getScaleY", "newLine", "write", "toString", "getTranslateX", "newLine", "write", "toString", "getTranslateY", "close", "isLoggable", "log", "getLocalizedMessage", "close"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}