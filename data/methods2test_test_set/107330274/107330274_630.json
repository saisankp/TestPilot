{"test_class": {"identifier": "TaskEvictionStepTest", "superclass": "extends AbstractTaskRelocationTest", "interfaces": "", "fields": [{"original_string": "private final RelocationTransactionLogger transactionLog = new RelocationTransactionLogger(jobOperations);", "modifier": "private final", "type": "RelocationTransactionLogger", "declarator": "transactionLog = new RelocationTransactionLogger(jobOperations)", "var_name": "transactionLog"}, {"original_string": "private TaskEvictionStep step;", "modifier": "private", "type": "TaskEvictionStep", "declarator": "step", "var_name": "step"}], "file": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/workflow/step/TaskEvictionStepTest.java"}, "test_case": {"identifier": "testSuccessfulEviction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccessfulEviction() {\n        Job<BatchJobExt> job = TestDataFactory.newBatchJob(\"job1\", 1, newSelfManagedDisruptionBudget(1_000));\n        relocationConnectorStubs.addJob(job);\n        relocationConnectorStubs.setQuota(\"job1\", 1);\n\n        Task task = jobOperations.getTasks().get(0);\n        relocationConnectorStubs.place(TestDataFactory.REMOVABLE_INSTANCE_GROUP, task);\n\n        TaskRelocationPlan taskRelocationPlan = oneMigrationPlan().toBuilder().withTaskId(task.getId()).build();\n\n        Map<String, TaskRelocationStatus> result = step.evict(Collections.singletonMap(task.getId(), taskRelocationPlan));\n        assertThat(result).hasSize(1);\n\n        TaskRelocationStatus relocationStatus = result.get(task.getId());\n        assertThat(relocationStatus.getTaskId()).isEqualTo(task.getId());\n        assertThat(relocationStatus.getStatusCode()).isEqualTo(TaskRelocationStatus.STATUS_CODE_TERMINATED);\n        assertThat(relocationStatus.getTaskRelocationPlan()).isEqualTo(taskRelocationPlan);\n    }", "signature": "void testSuccessfulEviction()", "full_signature": "@Test public void testSuccessfulEviction()", "class_method_signature": "TaskEvictionStepTest.testSuccessfulEviction()", "testcase": true, "constructor": false, "invocations": ["newBatchJob", "newSelfManagedDisruptionBudget", "addJob", "setQuota", "get", "getTasks", "place", "build", "withTaskId", "toBuilder", "oneMigrationPlan", "getId", "evict", "singletonMap", "getId", "hasSize", "assertThat", "get", "getId", "isEqualTo", "assertThat", "getTaskId", "getId", "isEqualTo", "assertThat", "getStatusCode", "isEqualTo", "assertThat", "getTaskRelocationPlan"]}, "focal_class": {"identifier": "TaskEvictionStep", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TaskEvictionStep.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TaskEvictionStep.class)", "var_name": "logger"}, {"original_string": "private static final int CONCURRENCY_LIMIT = 20;", "modifier": "private static final", "type": "int", "declarator": "CONCURRENCY_LIMIT = 20", "var_name": "CONCURRENCY_LIMIT"}, {"original_string": "private static final Duration EVICTION_TIMEOUT = Duration.ofSeconds(5);", "modifier": "private static final", "type": "Duration", "declarator": "EVICTION_TIMEOUT = Duration.ofSeconds(5)", "var_name": "EVICTION_TIMEOUT"}, {"original_string": "private static final String STEP_NAME = \"taskEvictionStep\";", "modifier": "private static final", "type": "String", "declarator": "STEP_NAME = \"taskEvictionStep\"", "var_name": "STEP_NAME"}, {"original_string": "private final EvictionServiceClient evictionServiceClient;", "modifier": "private final", "type": "EvictionServiceClient", "declarator": "evictionServiceClient", "var_name": "evictionServiceClient"}, {"original_string": "private final CodeInvariants invariants;", "modifier": "private final", "type": "CodeInvariants", "declarator": "invariants", "var_name": "invariants"}, {"original_string": "private final RelocationTransactionLogger transactionLog;", "modifier": "private final", "type": "RelocationTransactionLogger", "declarator": "transactionLog", "var_name": "transactionLog"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final StepMetrics metrics;", "modifier": "private final", "type": "StepMetrics", "declarator": "metrics", "var_name": "metrics"}], "methods": [{"identifier": "TaskEvictionStep", "parameters": "(EvictionServiceClient evictionServiceClient,\n                            TitusRuntime titusRuntime,\n                            RelocationTransactionLogger transactionLog,\n                            Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " TaskEvictionStep(EvictionServiceClient evictionServiceClient,\n                            TitusRuntime titusRuntime,\n                            RelocationTransactionLogger transactionLog,\n                            Scheduler scheduler)", "full_signature": "public  TaskEvictionStep(EvictionServiceClient evictionServiceClient,\n                            TitusRuntime titusRuntime,\n                            RelocationTransactionLogger transactionLog,\n                            Scheduler scheduler)", "class_method_signature": "TaskEvictionStep.TaskEvictionStep(EvictionServiceClient evictionServiceClient,\n                            TitusRuntime titusRuntime,\n                            RelocationTransactionLogger transactionLog,\n                            Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "evict", "parameters": "(Map<String, TaskRelocationPlan> taskToEvict)", "modifiers": "public", "return": "Map<String, TaskRelocationStatus>", "signature": "Map<String, TaskRelocationStatus> evict(Map<String, TaskRelocationPlan> taskToEvict)", "full_signature": "public Map<String, TaskRelocationStatus> evict(Map<String, TaskRelocationPlan> taskToEvict)", "class_method_signature": "TaskEvictionStep.evict(Map<String, TaskRelocationPlan> taskToEvict)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(Map<String, TaskRelocationPlan> taskToEvict)", "modifiers": "private", "return": "Map<String, TaskRelocationStatus>", "signature": "Map<String, TaskRelocationStatus> execute(Map<String, TaskRelocationPlan> taskToEvict)", "full_signature": "private Map<String, TaskRelocationStatus> execute(Map<String, TaskRelocationPlan> taskToEvict)", "class_method_signature": "TaskEvictionStep.execute(Map<String, TaskRelocationPlan> taskToEvict)", "testcase": false, "constructor": false}], "file": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/workflow/step/TaskEvictionStep.java"}, "focal_method": {"identifier": "evict", "parameters": "(Map<String, TaskRelocationPlan> taskToEvict)", "modifiers": "public", "return": "Map<String, TaskRelocationStatus>", "body": "public Map<String, TaskRelocationStatus> evict(Map<String, TaskRelocationPlan> taskToEvict) {\n        Stopwatch stopwatch = Stopwatch.createStarted();\n        try {\n            Map<String, TaskRelocationStatus> result = execute(taskToEvict);\n            metrics.onSuccess(result.size(), stopwatch.elapsed(TimeUnit.MILLISECONDS));\n            logger.debug(\"Eviction result: {}\", result);\n            return result;\n        } catch (Exception e) {\n            logger.error(\"Step processing error\", e);\n            metrics.onError(stopwatch.elapsed(TimeUnit.MILLISECONDS));\n            throw e;\n        }\n    }", "signature": "Map<String, TaskRelocationStatus> evict(Map<String, TaskRelocationPlan> taskToEvict)", "full_signature": "public Map<String, TaskRelocationStatus> evict(Map<String, TaskRelocationPlan> taskToEvict)", "class_method_signature": "TaskEvictionStep.evict(Map<String, TaskRelocationPlan> taskToEvict)", "testcase": false, "constructor": false, "invocations": ["createStarted", "execute", "onSuccess", "size", "elapsed", "debug", "error", "onError", "elapsed"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}