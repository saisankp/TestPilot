{"test_class": {"identifier": "StringContainsTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/query/simple/StringContainsTest.java"}, "test_case": {"identifier": "testStringContains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStringContains() {\n        assertTrue(StringContains.containsFragment(\"THIS IS A TEST\", \"THIS\"));\n        assertTrue(StringContains.containsFragment(\"THIS IS A TEST\", \"TEST\"));\n        assertTrue(StringContains.containsFragment(\"THIS IS A TEST\", \"IS A\"));\n        assertFalse(StringContains.containsFragment(\"THIS IS A TEST\", \"FOO\"));\n        assertTrue(StringContains.containsFragment(\"THIS IS A TEST\", \"\"));\n        assertTrue(StringContains.containsFragment(\"\", \"\"));\n        assertFalse(StringContains.containsFragment(\"\", \"TEST\"));\n    }", "signature": "void testStringContains()", "full_signature": "@Test public void testStringContains()", "class_method_signature": "StringContainsTest.testStringContains()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "containsFragment", "assertTrue", "containsFragment", "assertTrue", "containsFragment", "assertFalse", "containsFragment", "assertTrue", "containsFragment", "assertTrue", "containsFragment", "assertFalse", "containsFragment"]}, "focal_class": {"identifier": "StringContains", "superclass": "extends SimpleQuery<O, A>", "interfaces": "", "fields": [{"original_string": "private final A value;", "modifier": "private final", "type": "A", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "StringContains", "parameters": "(Attribute<O, A> attribute, A value)", "modifiers": "public", "return": "", "signature": " StringContains(Attribute<O, A> attribute, A value)", "full_signature": "public  StringContains(Attribute<O, A> attribute, A value)", "class_method_signature": "StringContains.StringContains(Attribute<O, A> attribute, A value)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "A", "signature": "A getValue()", "full_signature": "public A getValue()", "class_method_signature": "StringContains.getValue()", "testcase": false, "constructor": false}, {"identifier": "matchesSimpleAttribute", "parameters": "(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringContains.matchesSimpleAttribute(SimpleAttribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "matchesNonSimpleAttribute", "parameters": "(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "full_signature": "@Override protected boolean matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "class_method_signature": "StringContains.matchesNonSimpleAttribute(Attribute<O, A> attribute, O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "containsFragment", "parameters": "(CharSequence document, CharSequence fragment)", "modifiers": "static", "return": "boolean", "signature": "boolean containsFragment(CharSequence document, CharSequence fragment)", "full_signature": "static boolean containsFragment(CharSequence document, CharSequence fragment)", "class_method_signature": "StringContains.containsFragment(CharSequence document, CharSequence fragment)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "StringContains.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "calcHashCode", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int calcHashCode()", "full_signature": "@Override protected int calcHashCode()", "class_method_signature": "StringContains.calcHashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "StringContains.toString()", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/simple/StringContains.java"}, "focal_method": {"identifier": "StringContains", "parameters": "(Attribute<O, A> attribute, A value)", "modifiers": "public", "return": "", "body": "public StringContains(Attribute<O, A> attribute, A value) {\n        super(attribute);\n        this.value = checkQueryValueNotNull(value);\n    }", "signature": " StringContains(Attribute<O, A> attribute, A value)", "full_signature": "public  StringContains(Attribute<O, A> attribute, A value)", "class_method_signature": "StringContains.StringContains(Attribute<O, A> attribute, A value)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}