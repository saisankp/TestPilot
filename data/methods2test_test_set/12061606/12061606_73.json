{"test_class": {"identifier": "GeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/uk/ac/ebi/beam/GeneratorTest.java"}, "test_case": {"identifier": "permuteTH_3_nonRing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void permuteTH_3_nonRing() throws Exception {\n        String input = \"C[C@H](N)O\";\n        Graph g = Parser.parse(input);\n        assertThat(Generator.generate(g), is(input));\n    }", "signature": "void permuteTH_3_nonRing()", "full_signature": "@Test public void permuteTH_3_nonRing()", "class_method_signature": "GeneratorTest.permuteTH_3_nonRing()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "generate", "is"]}, "focal_class": {"identifier": "Generator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Graph         g;", "modifier": "private final", "type": "Graph", "declarator": "g", "var_name": "g"}, {"original_string": "private final StringBuilder sb;", "modifier": "private final", "type": "StringBuilder", "declarator": "sb", "var_name": "sb"}, {"original_string": "private final int[]                           visitedAt;", "modifier": "private final", "type": "int[]", "declarator": "visitedAt", "var_name": "visitedAt"}, {"original_string": "private final int[]                           tmp;", "modifier": "private final", "type": "int[]", "declarator": "tmp", "var_name": "tmp"}, {"original_string": "private       int                             nVisit;", "modifier": "private", "type": "int", "declarator": "nVisit", "var_name": "nVisit"}, {"original_string": "private final AtomToken[]                     tokens;", "modifier": "private final", "type": "AtomToken[]", "declarator": "tokens", "var_name": "tokens"}, {"original_string": "private final Map<Integer, List<RingClosure>> rings;", "modifier": "private final", "type": "Map<Integer, List<RingClosure>>", "declarator": "rings", "var_name": "rings"}, {"original_string": "private final RingNumbering                   rnums;", "modifier": "private final", "type": "RingNumbering", "declarator": "rnums", "var_name": "rnums"}], "methods": [{"identifier": "Generator", "parameters": "(Graph g, RingNumbering rnums)", "modifiers": "", "return": "", "signature": " Generator(Graph g, RingNumbering rnums)", "full_signature": "  Generator(Graph g, RingNumbering rnums)", "class_method_signature": "Generator.Generator(Graph g, RingNumbering rnums)", "testcase": false, "constructor": true}, {"identifier": "Generator", "parameters": "(Graph g, int[] visitedAt, RingNumbering rnums)", "modifiers": "", "return": "", "signature": " Generator(Graph g, int[] visitedAt, RingNumbering rnums)", "full_signature": "  Generator(Graph g, int[] visitedAt, RingNumbering rnums)", "class_method_signature": "Generator.Generator(Graph g, int[] visitedAt, RingNumbering rnums)", "testcase": false, "constructor": true}, {"identifier": "setAllenalStereo", "parameters": "(Graph g, int[] visitedAt, int u)", "modifiers": "private", "return": "void", "signature": "void setAllenalStereo(Graph g, int[] visitedAt, int u)", "full_signature": "private void setAllenalStereo(Graph g, int[] visitedAt, int u)", "class_method_signature": "Generator.setAllenalStereo(Graph g, int[] visitedAt, int u)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(int u, int p)", "modifiers": "", "return": "void", "signature": "void prepare(int u, int p)", "full_signature": " void prepare(int u, int p)", "class_method_signature": "Generator.prepare(int u, int p)", "testcase": false, "constructor": false}, {"identifier": "prepareStereochemistry", "parameters": "(int u, int prev)", "modifiers": "private", "return": "void", "signature": "void prepareStereochemistry(int u, int prev)", "full_signature": "private void prepareStereochemistry(int u, int prev)", "class_method_signature": "Generator.prepareStereochemistry(int u, int prev)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(int u, int p, Bond b)", "modifiers": "", "return": "void", "signature": "void write(int u, int p, Bond b)", "full_signature": " void write(int u, int p, Bond b)", "class_method_signature": "Generator.write(int u, int p, Bond b)", "testcase": false, "constructor": false}, {"identifier": "cyclicEdge", "parameters": "(int u, int v, Bond b)", "modifiers": "private", "return": "void", "signature": "void cyclicEdge(int u, int v, Bond b)", "full_signature": "private void cyclicEdge(int u, int v, Bond b)", "class_method_signature": "Generator.cyclicEdge(int u, int v, Bond b)", "testcase": false, "constructor": false}, {"identifier": "addRing", "parameters": "(int u, RingClosure rc)", "modifiers": "private", "return": "void", "signature": "void addRing(int u, RingClosure rc)", "full_signature": "private void addRing(int u, RingClosure rc)", "class_method_signature": "Generator.addRing(int u, RingClosure rc)", "testcase": false, "constructor": false}, {"identifier": "string", "parameters": "()", "modifiers": "", "return": "String", "signature": "String string()", "full_signature": " String string()", "class_method_signature": "Generator.string()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(final Graph g)", "modifiers": "static", "return": "String", "signature": "String generate(final Graph g)", "full_signature": "static String generate(final Graph g)", "class_method_signature": "Generator.generate(final Graph g)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(final Graph g, int[] visitedAt)", "modifiers": "static", "return": "String", "signature": "String generate(final Graph g, int[] visitedAt)", "full_signature": "static String generate(final Graph g, int[] visitedAt)", "class_method_signature": "Generator.generate(final Graph g, int[] visitedAt)", "testcase": false, "constructor": false}], "file": "core/src/main/java/uk/ac/ebi/beam/Generator.java"}, "focal_method": {"identifier": "generate", "parameters": "(final Graph g)", "modifiers": "static", "return": "String", "body": "static String generate(final Graph g) throws InvalidSmilesException {\n        return new Generator(g, new IterativeRingNumbering(1)).string();\n    }", "signature": "String generate(final Graph g)", "full_signature": "static String generate(final Graph g)", "class_method_signature": "Generator.generate(final Graph g)", "testcase": false, "constructor": false, "invocations": ["string"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}