{"test_class": {"identifier": "DockerfileGitHubUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GitHubUtil gitHubUtil;", "modifier": "@Mock", "type": "GitHubUtil", "declarator": "gitHubUtil", "var_name": "gitHubUtil"}, {"original_string": "private DockerfileGitHubUtil dockerfileGitHubUtil;", "modifier": "private", "type": "DockerfileGitHubUtil", "declarator": "dockerfileGitHubUtil", "var_name": "dockerfileGitHubUtil"}], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/utils/DockerfileGitHubUtilTest.java"}, "test_case": {"identifier": "testNoPullRequestForBranch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoPullRequestForBranch() {\n        String imageName = \"someimage\";\n        GHPullRequest ghPullRequest = mock(GHPullRequest.class);\n        GHPullRequestQueryBuilder queryBuilder = getGHPullRequestQueryBuilder(imageName, Optional.empty());\n        GHRepository parent = mock(GHRepository.class);\n        when(parent.queryPullRequests()).thenReturn(queryBuilder);\n        GitForkBranch gitForkBranch = new GitForkBranch(imageName, \"\", null);\n\n\n        gitHubUtil = mock(GitHubUtil.class);\n        dockerfileGitHubUtil = new DockerfileGitHubUtil(gitHubUtil);\n        assertEquals(dockerfileGitHubUtil.getPullRequestForImageBranch(parent, gitForkBranch), Optional.empty());\n    }", "signature": "void testNoPullRequestForBranch()", "full_signature": "@Test public void testNoPullRequestForBranch()", "class_method_signature": "DockerfileGitHubUtilTest.testNoPullRequestForBranch()", "testcase": true, "constructor": false, "invocations": ["mock", "getGHPullRequestQueryBuilder", "empty", "mock", "thenReturn", "when", "queryPullRequests", "mock", "assertEquals", "getPullRequestForImageBranch", "empty"]}, "focal_class": {"identifier": "DockerfileGitHubUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DockerfileGitHubUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DockerfileGitHubUtil.class)", "var_name": "log"}, {"original_string": "private final GitHubUtil gitHubUtil;", "modifier": "private final", "type": "GitHubUtil", "declarator": "gitHubUtil", "var_name": "gitHubUtil"}], "methods": [{"identifier": "DockerfileGitHubUtil", "parameters": "(GitHubUtil gitHubUtil)", "modifiers": "public", "return": "", "signature": " DockerfileGitHubUtil(GitHubUtil gitHubUtil)", "full_signature": "public  DockerfileGitHubUtil(GitHubUtil gitHubUtil)", "class_method_signature": "DockerfileGitHubUtil.DockerfileGitHubUtil(GitHubUtil gitHubUtil)", "testcase": false, "constructor": true}, {"identifier": "getGitHubUtil", "parameters": "()", "modifiers": "protected", "return": "GitHubUtil", "signature": "GitHubUtil getGitHubUtil()", "full_signature": "protected GitHubUtil getGitHubUtil()", "class_method_signature": "DockerfileGitHubUtil.getGitHubUtil()", "testcase": false, "constructor": false}, {"identifier": "getOrCreateFork", "parameters": "(GHRepository parent)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository getOrCreateFork(GHRepository parent)", "full_signature": "public GHRepository getOrCreateFork(GHRepository parent)", "class_method_signature": "DockerfileGitHubUtil.getOrCreateFork(GHRepository parent)", "testcase": false, "constructor": false}, {"identifier": "getMyself", "parameters": "()", "modifiers": "public", "return": "GHMyself", "signature": "GHMyself getMyself()", "full_signature": "public GHMyself getMyself()", "class_method_signature": "DockerfileGitHubUtil.getMyself()", "testcase": false, "constructor": false}, {"identifier": "getRepo", "parameters": "(String repoName)", "modifiers": "public", "return": "GHRepository", "signature": "GHRepository getRepo(String repoName)", "full_signature": "public GHRepository getRepo(String repoName)", "class_method_signature": "DockerfileGitHubUtil.getRepo(String repoName)", "testcase": false, "constructor": false}, {"identifier": "findFilesWithImage", "parameters": "(String query, String org)", "modifiers": "public", "return": "PagedSearchIterable<GHContent>", "signature": "PagedSearchIterable<GHContent> findFilesWithImage(String query, String org)", "full_signature": "public PagedSearchIterable<GHContent> findFilesWithImage(String query, String org)", "class_method_signature": "DockerfileGitHubUtil.findFilesWithImage(String query, String org)", "testcase": false, "constructor": false}, {"identifier": "getGHRepositories", "parameters": "(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "modifiers": "public", "return": "List<GHRepository>", "signature": "List<GHRepository> getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "full_signature": "public List<GHRepository> getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "class_method_signature": "DockerfileGitHubUtil.getGHRepositories(Multimap<String, String> pathToDockerfileInParentRepo,\n                                                            GHMyself currentUser)", "testcase": false, "constructor": false}, {"identifier": "modifyAllOnGithub", "parameters": "(GHRepository repo, String branch,\n                                  String img, String tag)", "modifiers": "public", "return": "void", "signature": "void modifyAllOnGithub(GHRepository repo, String branch,\n                                  String img, String tag)", "full_signature": "public void modifyAllOnGithub(GHRepository repo, String branch,\n                                  String img, String tag)", "class_method_signature": "DockerfileGitHubUtil.modifyAllOnGithub(GHRepository repo, String branch,\n                                  String img, String tag)", "testcase": false, "constructor": false}, {"identifier": "modifyOnGithubRecursive", "parameters": "(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "modifiers": "protected", "return": "void", "signature": "void modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "full_signature": "protected void modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "class_method_signature": "DockerfileGitHubUtil.modifyOnGithubRecursive(GHRepository repo, GHContent content,\n                                           String branch, String img, String tag)", "testcase": false, "constructor": false}, {"identifier": "tryRetrievingContent", "parameters": "(GHRepository repo, String path, String branch)", "modifiers": "public", "return": "GHContent", "signature": "GHContent tryRetrievingContent(GHRepository repo, String path, String branch)", "full_signature": "public GHContent tryRetrievingContent(GHRepository repo, String path, String branch)", "class_method_signature": "DockerfileGitHubUtil.tryRetrievingContent(GHRepository repo, String path, String branch)", "testcase": false, "constructor": false}, {"identifier": "modifyOnGithub", "parameters": "(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "modifiers": "public", "return": "void", "signature": "void modifyOnGithub(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "full_signature": "public void modifyOnGithub(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "class_method_signature": "DockerfileGitHubUtil.modifyOnGithub(GHContent content,\n                               String branch, String img, String tag, String customMessage)", "testcase": false, "constructor": false}, {"identifier": "findImagesAndFix", "parameters": "(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "modifiers": "protected", "return": "void", "signature": "void findImagesAndFix(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "full_signature": "protected void findImagesAndFix(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "class_method_signature": "DockerfileGitHubUtil.findImagesAndFix(GHContent content,\n                                    String branch, String img, String tag, String customMessage,\n                                    BufferedReader reader)", "testcase": false, "constructor": false}, {"identifier": "rewriteDockerfile", "parameters": "(String img, String tag, BufferedReader reader, StringBuilder strB)", "modifiers": "protected", "return": "boolean", "signature": "boolean rewriteDockerfile(String img, String tag, BufferedReader reader, StringBuilder strB)", "full_signature": "protected boolean rewriteDockerfile(String img, String tag, BufferedReader reader, StringBuilder strB)", "class_method_signature": "DockerfileGitHubUtil.rewriteDockerfile(String img, String tag, BufferedReader reader, StringBuilder strB)", "testcase": false, "constructor": false}, {"identifier": "changeIfDockerfileBaseImageLine", "parameters": "(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "modifiers": "protected", "return": "boolean", "signature": "boolean changeIfDockerfileBaseImageLine(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "full_signature": "protected boolean changeIfDockerfileBaseImageLine(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "class_method_signature": "DockerfileGitHubUtil.changeIfDockerfileBaseImageLine(String imageToFind, String tag, StringBuilder stringBuilder, String line)", "testcase": false, "constructor": false}, {"identifier": "getGitHubJsonStore", "parameters": "(String store)", "modifiers": "public", "return": "GitHubJsonStore", "signature": "GitHubJsonStore getGitHubJsonStore(String store)", "full_signature": "public GitHubJsonStore getGitHubJsonStore(String store)", "class_method_signature": "DockerfileGitHubUtil.getGitHubJsonStore(String store)", "testcase": false, "constructor": false}, {"identifier": "createPullReq", "parameters": "(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "modifiers": "public", "return": "void", "signature": "void createPullReq(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "full_signature": "public void createPullReq(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "class_method_signature": "DockerfileGitHubUtil.createPullReq(GHRepository origRepo,\n                              String branch, GHRepository forkRepo,\n                              PullRequestInfo pullRequestInfo)", "testcase": false, "constructor": false}, {"identifier": "getPullRequestForImageBranch", "parameters": "(GHRepository repository, GitForkBranch gitForkBranch)", "modifiers": "public", "return": "Optional<GHPullRequest>", "signature": "Optional<GHPullRequest> getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "full_signature": "public Optional<GHPullRequest> getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "class_method_signature": "DockerfileGitHubUtil.getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateForkBranchToParentDefault", "parameters": "(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "modifiers": "public", "return": "void", "signature": "void createOrUpdateForkBranchToParentDefault(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "full_signature": "public void createOrUpdateForkBranchToParentDefault(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "class_method_signature": "DockerfileGitHubUtil.createOrUpdateForkBranchToParentDefault(GHRepository parent, GHRepository fork, GitForkBranch gitForkBranch)", "testcase": false, "constructor": false}, {"identifier": "thisUserIsOwner", "parameters": "(GHRepository repo)", "modifiers": "public", "return": "boolean", "signature": "boolean thisUserIsOwner(GHRepository repo)", "full_signature": "public boolean thisUserIsOwner(GHRepository repo)", "class_method_signature": "DockerfileGitHubUtil.thisUserIsOwner(GHRepository repo)", "testcase": false, "constructor": false}, {"identifier": "getGHContents", "parameters": "(String org, String img)", "modifiers": "public", "return": "Optional<PagedSearchIterable<GHContent>>", "signature": "Optional<PagedSearchIterable<GHContent>> getGHContents(String org, String img)", "full_signature": "public Optional<PagedSearchIterable<GHContent>> getGHContents(String org, String img)", "class_method_signature": "DockerfileGitHubUtil.getGHContents(String org, String img)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/utils/DockerfileGitHubUtil.java"}, "focal_method": {"identifier": "getPullRequestForImageBranch", "parameters": "(GHRepository repository, GitForkBranch gitForkBranch)", "modifiers": "public", "return": "Optional<GHPullRequest>", "body": "public Optional<GHPullRequest> getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch) {\n        PagedIterable<GHPullRequest> pullRequests =\n                repository.queryPullRequests().state(GHIssueState.OPEN).head(gitForkBranch.getBranchName()).list();\n        for (GHPullRequest pullRequest : pullRequests) {\n            // There can be only one since it is based on branch.\n            return Optional.of(pullRequest);\n        }\n        return Optional.empty();\n    }", "signature": "Optional<GHPullRequest> getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "full_signature": "public Optional<GHPullRequest> getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "class_method_signature": "DockerfileGitHubUtil.getPullRequestForImageBranch(GHRepository repository, GitForkBranch gitForkBranch)", "testcase": false, "constructor": false, "invocations": ["list", "head", "state", "queryPullRequests", "getBranchName", "of", "empty"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}