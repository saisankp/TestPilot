{"test_class": {"identifier": "CurrencyListEditorPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<CharSequence> CURRENCIES = Arrays.asList(\"USD\", \"EUR\");", "modifier": "private static final", "type": "List<CharSequence>", "declarator": "CURRENCIES = Arrays.asList(\"USD\", \"EUR\")", "var_name": "CURRENCIES"}, {"original_string": "CurrencyListEditorPresenter nullSavedStatePresenter;", "modifier": "", "type": "CurrencyListEditorPresenter", "declarator": "nullSavedStatePresenter", "var_name": "nullSavedStatePresenter"}, {"original_string": "CurrencyListEditorPresenter savedStatePresenter;", "modifier": "", "type": "CurrencyListEditorPresenter", "declarator": "savedStatePresenter", "var_name": "savedStatePresenter"}, {"original_string": "@Mock\n    CurrencyListEditorView view;", "modifier": "@Mock", "type": "CurrencyListEditorView", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    DatabaseHelper database;", "modifier": "@Mock", "type": "DatabaseHelper", "declarator": "database", "var_name": "database"}, {"original_string": "@Mock\n    CurrencyCodeSupplier currencyCodeSupplier;", "modifier": "@Mock", "type": "CurrencyCodeSupplier", "declarator": "currencyCodeSupplier", "var_name": "currencyCodeSupplier"}, {"original_string": "@Mock\n    Consumer<List<CharSequence>> displayCurrenciesConsumer;", "modifier": "@Mock", "type": "Consumer<List<CharSequence>>", "declarator": "displayCurrenciesConsumer", "var_name": "displayCurrenciesConsumer"}, {"original_string": "@Mock\n    Consumer<Integer> displayCurrencySelectionConsumer;", "modifier": "@Mock", "type": "Consumer<Integer>", "declarator": "displayCurrencySelectionConsumer", "var_name": "displayCurrencySelectionConsumer"}, {"original_string": "PublishSubject<Integer> currencyClicks = PublishSubject.create();", "modifier": "", "type": "PublishSubject<Integer>", "declarator": "currencyClicks = PublishSubject.create()", "var_name": "currencyClicks"}, {"original_string": "Bundle savedInstanceState = new Bundle();", "modifier": "", "type": "Bundle", "declarator": "savedInstanceState = new Bundle()", "var_name": "savedInstanceState"}], "file": "app/src/test/java/co/smartreceipts/android/currency/widget/CurrencyListEditorPresenterTest.java"}, "test_case": {"identifier": "subscribeDisplaysCurrenciesListForNullState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void subscribeDisplaysCurrenciesListForNullState() throws Exception {\n        nullSavedStatePresenter.subscribe();\n        verify(displayCurrenciesConsumer).accept(CURRENCIES);\n    }", "signature": "void subscribeDisplaysCurrenciesListForNullState()", "full_signature": "@Test public void subscribeDisplaysCurrenciesListForNullState()", "class_method_signature": "CurrencyListEditorPresenterTest.subscribeDisplaysCurrenciesListForNullState()", "testcase": true, "constructor": false, "invocations": ["subscribe", "accept", "verify"]}, "focal_class": {"identifier": "CurrencyListEditorPresenter", "superclass": "extends BasePresenter<CurrencyListEditorView>", "interfaces": "", "fields": [{"original_string": "private static final String OUT_STATE_SELECTED_CURRENCY_POSITION = \"out_state_selected_currency_position\";", "modifier": "private static final", "type": "String", "declarator": "OUT_STATE_SELECTED_CURRENCY_POSITION = \"out_state_selected_currency_position\"", "var_name": "OUT_STATE_SELECTED_CURRENCY_POSITION"}, {"original_string": "private final DatabaseHelper databaseHelper;", "modifier": "private final", "type": "DatabaseHelper", "declarator": "databaseHelper", "var_name": "databaseHelper"}, {"original_string": "private final CurrencyCodeSupplier defaultCurrencyCodeSupplier;", "modifier": "private final", "type": "CurrencyCodeSupplier", "declarator": "defaultCurrencyCodeSupplier", "var_name": "defaultCurrencyCodeSupplier"}, {"original_string": "private final Bundle savedInstanceState;", "modifier": "private final", "type": "Bundle", "declarator": "savedInstanceState", "var_name": "savedInstanceState"}, {"original_string": "private final Scheduler subscribeOnScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "subscribeOnScheduler", "var_name": "subscribeOnScheduler"}, {"original_string": "private final Scheduler observeOnScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "observeOnScheduler", "var_name": "observeOnScheduler"}, {"original_string": "private int lastSelectedCurrencyCodeIndex = -1;", "modifier": "private", "type": "int", "declarator": "lastSelectedCurrencyCodeIndex = -1", "var_name": "lastSelectedCurrencyCodeIndex"}], "methods": [{"identifier": "CurrencyListEditorPresenter", "parameters": "(@NonNull CurrencyListEditorView view,\n                                       @NonNull DatabaseHelper databaseHelper,\n                                       @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                       @Nullable Bundle savedInstanceState)", "modifiers": "public", "return": "", "signature": " CurrencyListEditorPresenter(@NonNull CurrencyListEditorView view,\n                                       @NonNull DatabaseHelper databaseHelper,\n                                       @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                       @Nullable Bundle savedInstanceState)", "full_signature": "public  CurrencyListEditorPresenter(@NonNull CurrencyListEditorView view,\n                                       @NonNull DatabaseHelper databaseHelper,\n                                       @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                       @Nullable Bundle savedInstanceState)", "class_method_signature": "CurrencyListEditorPresenter.CurrencyListEditorPresenter(@NonNull CurrencyListEditorView view,\n                                       @NonNull DatabaseHelper databaseHelper,\n                                       @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                       @Nullable Bundle savedInstanceState)", "testcase": false, "constructor": true}, {"identifier": "CurrencyListEditorPresenter", "parameters": "(@NonNull CurrencyListEditorView view,\n                                @NonNull DatabaseHelper databaseHelper,\n                                @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                @Nullable Bundle savedInstanceState,\n                                @NonNull Scheduler subscribeOnScheduler,\n                                @NonNull Scheduler observeOnScheduler)", "modifiers": "@VisibleForTesting", "return": "", "signature": " CurrencyListEditorPresenter(@NonNull CurrencyListEditorView view,\n                                @NonNull DatabaseHelper databaseHelper,\n                                @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                @Nullable Bundle savedInstanceState,\n                                @NonNull Scheduler subscribeOnScheduler,\n                                @NonNull Scheduler observeOnScheduler)", "full_signature": "@VisibleForTesting  CurrencyListEditorPresenter(@NonNull CurrencyListEditorView view,\n                                @NonNull DatabaseHelper databaseHelper,\n                                @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                @Nullable Bundle savedInstanceState,\n                                @NonNull Scheduler subscribeOnScheduler,\n                                @NonNull Scheduler observeOnScheduler)", "class_method_signature": "CurrencyListEditorPresenter.CurrencyListEditorPresenter(@NonNull CurrencyListEditorView view,\n                                @NonNull DatabaseHelper databaseHelper,\n                                @NonNull CurrencyCodeSupplier defaultCurrencyCodeSupplier,\n                                @Nullable Bundle savedInstanceState,\n                                @NonNull Scheduler subscribeOnScheduler,\n                                @NonNull Scheduler observeOnScheduler)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override @CallSuper public", "return": "void", "signature": "void subscribe()", "full_signature": "@Override @CallSuper public void subscribe()", "class_method_signature": "CurrencyListEditorPresenter.subscribe()", "testcase": false, "constructor": false}, {"identifier": "onSaveInstanceState", "parameters": "(@NonNull Bundle outState)", "modifiers": "public", "return": "void", "signature": "void onSaveInstanceState(@NonNull Bundle outState)", "full_signature": "public void onSaveInstanceState(@NonNull Bundle outState)", "class_method_signature": "CurrencyListEditorPresenter.onSaveInstanceState(@NonNull Bundle outState)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/currency/widget/CurrencyListEditorPresenter.java"}, "focal_method": {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override @CallSuper public", "return": "void", "body": "@Override\n    @CallSuper\n    public void subscribe() {\n        // A ConnectableObservable resembles an ordinary Observable, but it does not begin emitting until #connect is called\n        final ConnectableObservable<List<CharSequence>> currenciesConnectableObservable = Observable.fromCallable(this.databaseHelper::getCurrenciesList)\n                .subscribeOn(subscribeOnScheduler)\n                .observeOn(observeOnScheduler)\n                .publish();\n\n        // Display the full list of currencies\n        this.compositeDisposable.add(currenciesConnectableObservable\n                .subscribe(view.displayCurrencies()));\n\n        // Ensure we always restore the \"last\" currency\n        //noinspection Convert2MethodRef\n        this.compositeDisposable.add(currenciesConnectableObservable\n                .map(currenciesList -> {\n                    final String currencyCode;\n                    if (savedInstanceState != null && savedInstanceState.containsKey(OUT_STATE_SELECTED_CURRENCY_POSITION)) {\n                        currencyCode = currenciesList.get(savedInstanceState.getInt(OUT_STATE_SELECTED_CURRENCY_POSITION)).toString();\n                    } else if (lastSelectedCurrencyCodeIndex >= 0) {\n                        currencyCode = currenciesList.get(lastSelectedCurrencyCodeIndex).toString();\n                    } else {\n                        currencyCode = defaultCurrencyCodeSupplier.get();\n                    }\n\n                    final int currencyPosition = currenciesList.indexOf(currencyCode);\n                    if (currencyPosition >= 0) {\n                        return currencyPosition;\n                    } else {\n                        return 0;\n                    }\n                })\n                .subscribe(view.displayCurrencySelection()));\n\n        // Handle selections\n        this.compositeDisposable.add(currenciesConnectableObservable\n                    .flatMap(currenciesList -> {\n                        //noinspection ConstantConditions\n                        return view.currencyClicks()\n                                .filter(currencyIndex -> currencyIndex >= 0);\n                    })\n                    .doOnNext(currencyIndex -> lastSelectedCurrencyCodeIndex = currencyIndex)\n                    .subscribe(view.displayCurrencySelection()));\n\n        // Call #connect to start out emissions\n        this.compositeDisposable.add(currenciesConnectableObservable.connect());\n    }", "signature": "void subscribe()", "full_signature": "@Override @CallSuper public void subscribe()", "class_method_signature": "CurrencyListEditorPresenter.subscribe()", "testcase": false, "constructor": false, "invocations": ["publish", "observeOn", "subscribeOn", "fromCallable", "add", "subscribe", "displayCurrencies", "add", "subscribe", "map", "containsKey", "toString", "get", "getInt", "toString", "get", "get", "indexOf", "displayCurrencySelection", "add", "subscribe", "doOnNext", "flatMap", "filter", "currencyClicks", "displayCurrencySelection", "add", "connect"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}