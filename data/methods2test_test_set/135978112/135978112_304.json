{"test_class": {"identifier": "KTableImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private Serde<String> stringSerde = Serdes.String();", "modifier": "final private", "type": "Serde<String>", "declarator": "stringSerde = Serdes.String()", "var_name": "stringSerde"}, {"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}, {"original_string": "private File stateDir = null;", "modifier": "private", "type": "File", "declarator": "stateDir = null", "var_name": "stateDir"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableImplTest.java"}, "test_case": {"identifier": "testRepartition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRepartition() throws IOException {\n        String topic1 = \"topic1\";\n\n        final KStreamBuilder builder = new KStreamBuilder();\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n\n        KTableImpl<String, String, String> table1Aggregated = (KTableImpl<String, String, String>) table1\n                .groupBy(MockKeyValueMapper.<String, String>NoOpKeyValueMapper())\n                .aggregate(MockInitializer.STRING_INIT, MockAggregator.STRING_ADDER, MockAggregator.STRING_REMOVER, \"mock-result1\");\n\n\n        KTableImpl<String, String, String> table1Reduced = (KTableImpl<String, String, String>) table1\n                .groupBy(MockKeyValueMapper.<String, String>NoOpKeyValueMapper())\n                .reduce(MockReducer.STRING_ADDER, MockReducer.STRING_REMOVER, \"mock-result2\");\n\n        driver = new KStreamTestDriver(builder, stateDir, stringSerde, stringSerde);\n        driver.setTime(0L);\n\n        // three state store should be created, one for source, one for aggregate and one for reduce\n        assertEquals(3, driver.allStateStores().size());\n\n        // contains the corresponding repartition source / sink nodes\n        assertTrue(driver.allProcessorNames().contains(\"KSTREAM-SINK-0000000003\"));\n        assertTrue(driver.allProcessorNames().contains(\"KSTREAM-SOURCE-0000000004\"));\n        assertTrue(driver.allProcessorNames().contains(\"KSTREAM-SINK-0000000007\"));\n        assertTrue(driver.allProcessorNames().contains(\"KSTREAM-SOURCE-0000000008\"));\n\n        assertNotNull(((ChangedSerializer) ((SinkNode) driver.processor(\"KSTREAM-SINK-0000000003\")).valueSerializer()).inner());\n        assertNotNull(((ChangedDeserializer) ((SourceNode) driver.processor(\"KSTREAM-SOURCE-0000000004\")).valueDeserializer()).inner());\n        assertNotNull(((ChangedSerializer) ((SinkNode) driver.processor(\"KSTREAM-SINK-0000000007\")).valueSerializer()).inner());\n        assertNotNull(((ChangedDeserializer) ((SourceNode) driver.processor(\"KSTREAM-SOURCE-0000000008\")).valueDeserializer()).inner());\n    }", "signature": "void testRepartition()", "full_signature": "@Test public void testRepartition()", "class_method_signature": "KTableImplTest.testRepartition()", "testcase": true, "constructor": false, "invocations": ["table", "aggregate", "groupBy", "NoOpKeyValueMapper", "reduce", "groupBy", "NoOpKeyValueMapper", "setTime", "assertEquals", "size", "allStateStores", "assertTrue", "contains", "allProcessorNames", "assertTrue", "contains", "allProcessorNames", "assertTrue", "contains", "allProcessorNames", "assertTrue", "contains", "allProcessorNames", "assertNotNull", "inner", "valueSerializer", "processor", "assertNotNull", "inner", "valueDeserializer", "processor", "assertNotNull", "inner", "valueSerializer", "processor", "assertNotNull", "inner", "valueDeserializer", "processor"]}, "focal_class": {"identifier": "KTableImpl", "superclass": "extends AbstractStream<K>", "interfaces": "implements KTable<K, V>", "fields": [{"original_string": "private static final String FILTER_NAME = \"KTABLE-FILTER-\";", "modifier": "private static final", "type": "String", "declarator": "FILTER_NAME = \"KTABLE-FILTER-\"", "var_name": "FILTER_NAME"}, {"original_string": "private static final String FOREACH_NAME = \"KTABLE-FOREACH-\";", "modifier": "private static final", "type": "String", "declarator": "FOREACH_NAME = \"KTABLE-FOREACH-\"", "var_name": "FOREACH_NAME"}, {"original_string": "public static final String JOINTHIS_NAME = \"KTABLE-JOINTHIS-\";", "modifier": "public static final", "type": "String", "declarator": "JOINTHIS_NAME = \"KTABLE-JOINTHIS-\"", "var_name": "JOINTHIS_NAME"}, {"original_string": "public static final String JOINOTHER_NAME = \"KTABLE-JOINOTHER-\";", "modifier": "public static final", "type": "String", "declarator": "JOINOTHER_NAME = \"KTABLE-JOINOTHER-\"", "var_name": "JOINOTHER_NAME"}, {"original_string": "public static final String LEFTTHIS_NAME = \"KTABLE-LEFTTHIS-\";", "modifier": "public static final", "type": "String", "declarator": "LEFTTHIS_NAME = \"KTABLE-LEFTTHIS-\"", "var_name": "LEFTTHIS_NAME"}, {"original_string": "public static final String LEFTOTHER_NAME = \"KTABLE-LEFTOTHER-\";", "modifier": "public static final", "type": "String", "declarator": "LEFTOTHER_NAME = \"KTABLE-LEFTOTHER-\"", "var_name": "LEFTOTHER_NAME"}, {"original_string": "private static final String MAPVALUES_NAME = \"KTABLE-MAPVALUES-\";", "modifier": "private static final", "type": "String", "declarator": "MAPVALUES_NAME = \"KTABLE-MAPVALUES-\"", "var_name": "MAPVALUES_NAME"}, {"original_string": "public static final String MERGE_NAME = \"KTABLE-MERGE-\";", "modifier": "public static final", "type": "String", "declarator": "MERGE_NAME = \"KTABLE-MERGE-\"", "var_name": "MERGE_NAME"}, {"original_string": "public static final String OUTERTHIS_NAME = \"KTABLE-OUTERTHIS-\";", "modifier": "public static final", "type": "String", "declarator": "OUTERTHIS_NAME = \"KTABLE-OUTERTHIS-\"", "var_name": "OUTERTHIS_NAME"}, {"original_string": "public static final String OUTEROTHER_NAME = \"KTABLE-OUTEROTHER-\";", "modifier": "public static final", "type": "String", "declarator": "OUTEROTHER_NAME = \"KTABLE-OUTEROTHER-\"", "var_name": "OUTEROTHER_NAME"}, {"original_string": "private static final String PRINTING_NAME = \"KSTREAM-PRINTER-\";", "modifier": "private static final", "type": "String", "declarator": "PRINTING_NAME = \"KSTREAM-PRINTER-\"", "var_name": "PRINTING_NAME"}, {"original_string": "private static final String SELECT_NAME = \"KTABLE-SELECT-\";", "modifier": "private static final", "type": "String", "declarator": "SELECT_NAME = \"KTABLE-SELECT-\"", "var_name": "SELECT_NAME"}, {"original_string": "public static final String SOURCE_NAME = \"KTABLE-SOURCE-\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_NAME = \"KTABLE-SOURCE-\"", "var_name": "SOURCE_NAME"}, {"original_string": "private static final String TOSTREAM_NAME = \"KTABLE-TOSTREAM-\";", "modifier": "private static final", "type": "String", "declarator": "TOSTREAM_NAME = \"KTABLE-TOSTREAM-\"", "var_name": "TOSTREAM_NAME"}, {"original_string": "public final ProcessorSupplier<?, ?> processorSupplier;", "modifier": "public final", "type": "ProcessorSupplier<?, ?>", "declarator": "processorSupplier", "var_name": "processorSupplier"}, {"original_string": "private final Serde<K> keySerde;", "modifier": "private final", "type": "Serde<K>", "declarator": "keySerde", "var_name": "keySerde"}, {"original_string": "private final Serde<V> valSerde;", "modifier": "private final", "type": "Serde<V>", "declarator": "valSerde", "var_name": "valSerde"}, {"original_string": "private boolean sendOldValues = false;", "modifier": "private", "type": "boolean", "declarator": "sendOldValues = false", "var_name": "sendOldValues"}], "methods": [{"identifier": "KTableImpl", "parameters": "(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes)", "modifiers": "public", "return": "", "signature": " KTableImpl(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes)", "full_signature": "public  KTableImpl(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes)", "class_method_signature": "KTableImpl.KTableImpl(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes)", "testcase": false, "constructor": true}, {"identifier": "KTableImpl", "parameters": "(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes,\n                      Serde<K> keySerde,\n                      Serde<V> valSerde)", "modifiers": "public", "return": "", "signature": " KTableImpl(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes,\n                      Serde<K> keySerde,\n                      Serde<V> valSerde)", "full_signature": "public  KTableImpl(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes,\n                      Serde<K> keySerde,\n                      Serde<V> valSerde)", "class_method_signature": "KTableImpl.KTableImpl(KStreamBuilder topology,\n                      String name,\n                      ProcessorSupplier<?, ?> processorSupplier,\n                      Set<String> sourceNodes,\n                      Serde<K> keySerde,\n                      Serde<V> valSerde)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(Predicate<K, V> predicate)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> filter(Predicate<K, V> predicate)", "full_signature": "@Override public KTable<K, V> filter(Predicate<K, V> predicate)", "class_method_signature": "KTableImpl.filter(Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "filterNot", "parameters": "(final Predicate<K, V> predicate)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> filterNot(final Predicate<K, V> predicate)", "full_signature": "@Override public KTable<K, V> filterNot(final Predicate<K, V> predicate)", "class_method_signature": "KTableImpl.filterNot(final Predicate<K, V> predicate)", "testcase": false, "constructor": false}, {"identifier": "mapValues", "parameters": "(ValueMapper<V, V1> mapper)", "modifiers": "@Override public", "return": "KTable<K, V1>", "signature": "KTable<K, V1> mapValues(ValueMapper<V, V1> mapper)", "full_signature": "@Override public KTable<K, V1> mapValues(ValueMapper<V, V1> mapper)", "class_method_signature": "KTableImpl.mapValues(ValueMapper<V, V1> mapper)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void print()", "full_signature": "@Override public void print()", "class_method_signature": "KTableImpl.print()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Serde<K> keySerde, Serde<V> valSerde)", "modifiers": "@Override public", "return": "void", "signature": "void print(Serde<K> keySerde, Serde<V> valSerde)", "full_signature": "@Override public void print(Serde<K> keySerde, Serde<V> valSerde)", "class_method_signature": "KTableImpl.print(Serde<K> keySerde, Serde<V> valSerde)", "testcase": false, "constructor": false}, {"identifier": "writeAsText", "parameters": "(String filePath)", "modifiers": "@Override public", "return": "void", "signature": "void writeAsText(String filePath)", "full_signature": "@Override public void writeAsText(String filePath)", "class_method_signature": "KTableImpl.writeAsText(String filePath)", "testcase": false, "constructor": false}, {"identifier": "writeAsText", "parameters": "(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "modifiers": "@Override public", "return": "void", "signature": "void writeAsText(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "full_signature": "@Override public void writeAsText(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "class_method_signature": "KTableImpl.writeAsText(String filePath, Serde<K> keySerde, Serde<V> valSerde)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(Serde<K> keySerde,\n                                Serde<V> valSerde,\n                                StreamPartitioner<K, V> partitioner,\n                                String topic)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> through(Serde<K> keySerde,\n                                Serde<V> valSerde,\n                                StreamPartitioner<K, V> partitioner,\n                                String topic)", "full_signature": "@Override public KTable<K, V> through(Serde<K> keySerde,\n                                Serde<V> valSerde,\n                                StreamPartitioner<K, V> partitioner,\n                                String topic)", "class_method_signature": "KTableImpl.through(Serde<K> keySerde,\n                                Serde<V> valSerde,\n                                StreamPartitioner<K, V> partitioner,\n                                String topic)", "testcase": false, "constructor": false}, {"identifier": "foreach", "parameters": "(final ForeachAction<K, V> action)", "modifiers": "@Override public", "return": "void", "signature": "void foreach(final ForeachAction<K, V> action)", "full_signature": "@Override public void foreach(final ForeachAction<K, V> action)", "class_method_signature": "KTableImpl.foreach(final ForeachAction<K, V> action)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, String topic)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> through(Serde<K> keySerde, Serde<V> valSerde, String topic)", "full_signature": "@Override public KTable<K, V> through(Serde<K> keySerde, Serde<V> valSerde, String topic)", "class_method_signature": "KTableImpl.through(Serde<K> keySerde, Serde<V> valSerde, String topic)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(StreamPartitioner<K, V> partitioner, String topic)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> through(StreamPartitioner<K, V> partitioner, String topic)", "full_signature": "@Override public KTable<K, V> through(StreamPartitioner<K, V> partitioner, String topic)", "class_method_signature": "KTableImpl.through(StreamPartitioner<K, V> partitioner, String topic)", "testcase": false, "constructor": false}, {"identifier": "through", "parameters": "(String topic)", "modifiers": "@Override public", "return": "KTable<K, V>", "signature": "KTable<K, V> through(String topic)", "full_signature": "@Override public KTable<K, V> through(String topic)", "class_method_signature": "KTableImpl.through(String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(String topic)", "modifiers": "@Override public", "return": "void", "signature": "void to(String topic)", "full_signature": "@Override public void to(String topic)", "class_method_signature": "KTableImpl.to(String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(StreamPartitioner<K, V> partitioner, String topic)", "modifiers": "@Override public", "return": "void", "signature": "void to(StreamPartitioner<K, V> partitioner, String topic)", "full_signature": "@Override public void to(StreamPartitioner<K, V> partitioner, String topic)", "class_method_signature": "KTableImpl.to(StreamPartitioner<K, V> partitioner, String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, String topic)", "modifiers": "@Override public", "return": "void", "signature": "void to(Serde<K> keySerde, Serde<V> valSerde, String topic)", "full_signature": "@Override public void to(Serde<K> keySerde, Serde<V> valSerde, String topic)", "class_method_signature": "KTableImpl.to(Serde<K> keySerde, Serde<V> valSerde, String topic)", "testcase": false, "constructor": false}, {"identifier": "to", "parameters": "(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "modifiers": "@Override public", "return": "void", "signature": "void to(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "full_signature": "@Override public void to(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "class_method_signature": "KTableImpl.to(Serde<K> keySerde, Serde<V> valSerde, StreamPartitioner<K, V> partitioner, String topic)", "testcase": false, "constructor": false}, {"identifier": "toStream", "parameters": "()", "modifiers": "@Override public", "return": "KStream<K, V>", "signature": "KStream<K, V> toStream()", "full_signature": "@Override public KStream<K, V> toStream()", "class_method_signature": "KTableImpl.toStream()", "testcase": false, "constructor": false}, {"identifier": "toStream", "parameters": "(KeyValueMapper<K, V, K1> mapper)", "modifiers": "@Override public", "return": "KStream<K1, V>", "signature": "KStream<K1, V> toStream(KeyValueMapper<K, V, K1> mapper)", "full_signature": "@Override public KStream<K1, V> toStream(KeyValueMapper<K, V, K1> mapper)", "class_method_signature": "KTableImpl.toStream(KeyValueMapper<K, V, K1> mapper)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "KTable<K, R>", "signature": "KTable<K, R> join(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public KTable<K, R> join(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "class_method_signature": "KTableImpl.join(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "testcase": false, "constructor": false}, {"identifier": "outerJoin", "parameters": "(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "KTable<K, R>", "signature": "KTable<K, R> outerJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public KTable<K, R> outerJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "class_method_signature": "KTableImpl.outerJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "testcase": false, "constructor": false}, {"identifier": "leftJoin", "parameters": "(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "KTable<K, R>", "signature": "KTable<K, R> leftJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public KTable<K, R> leftJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "class_method_signature": "KTableImpl.leftJoin(KTable<K, V1> other, ValueJoiner<V, V1, R> joiner)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "modifiers": "@Override public", "return": "KGroupedTable<K1, V1>", "signature": "KGroupedTable<K1, V1> groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "full_signature": "@Override public KGroupedTable<K1, V1> groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "class_method_signature": "KTableImpl.groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(KeyValueMapper<K, V, KeyValue<K1, V1>> selector)", "modifiers": "@Override public", "return": "KGroupedTable<K1, V1>", "signature": "KGroupedTable<K1, V1> groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector)", "full_signature": "@Override public KGroupedTable<K1, V1> groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector)", "class_method_signature": "KTableImpl.groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector)", "testcase": false, "constructor": false}, {"identifier": "valueGetterSupplier", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "KTableValueGetterSupplier<K, V>", "signature": "KTableValueGetterSupplier<K, V> valueGetterSupplier()", "full_signature": "@SuppressWarnings(\"unchecked\") KTableValueGetterSupplier<K, V> valueGetterSupplier()", "class_method_signature": "KTableImpl.valueGetterSupplier()", "testcase": false, "constructor": false}, {"identifier": "enableSendingOldValues", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void enableSendingOldValues()", "full_signature": "@SuppressWarnings(\"unchecked\") void enableSendingOldValues()", "class_method_signature": "KTableImpl.enableSendingOldValues()", "testcase": false, "constructor": false}, {"identifier": "sendingOldValueEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean sendingOldValueEnabled()", "full_signature": " boolean sendingOldValueEnabled()", "class_method_signature": "KTableImpl.sendingOldValueEnabled()", "testcase": false, "constructor": false}, {"identifier": "materialize", "parameters": "(KTableSource<K, ?> source)", "modifiers": "private", "return": "void", "signature": "void materialize(KTableSource<K, ?> source)", "full_signature": "private void materialize(KTableSource<K, ?> source)", "class_method_signature": "KTableImpl.materialize(KTableSource<K, ?> source)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableImpl.java"}, "focal_method": {"identifier": "groupBy", "parameters": "(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "modifiers": "@Override public", "return": "KGroupedTable<K1, V1>", "body": "@Override\n    public <K1, V1> KGroupedTable<K1, V1> groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde) {\n\n        String selectName = topology.newName(SELECT_NAME);\n\n        KTableProcessorSupplier<K, V, KeyValue<K1, V1>> selectSupplier = new KTableRepartitionMap<>(this, selector);\n\n        // select the aggregate key and values (old and new), it would require parent to send old values\n        topology.addProcessor(selectName, selectSupplier, this.name);\n        this.enableSendingOldValues();\n\n        return new KGroupedTableImpl<>(topology, selectName, this.name, keySerde, valueSerde);\n    }", "signature": "KGroupedTable<K1, V1> groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "full_signature": "@Override public KGroupedTable<K1, V1> groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "class_method_signature": "KTableImpl.groupBy(KeyValueMapper<K, V, KeyValue<K1, V1>> selector,\n                                                  Serde<K1> keySerde,\n                                                  Serde<V1> valueSerde)", "testcase": false, "constructor": false, "invocations": ["newName", "addProcessor", "enableSendingOldValues"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}