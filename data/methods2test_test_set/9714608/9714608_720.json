{"test_class": {"identifier": "UnitVectorPropertyTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [{"original_string": "private static final double ox = 123.456;", "modifier": "private static final", "type": "double", "declarator": "ox = 123.456", "var_name": "ox"}, {"original_string": "private static final double oy = 951.753;", "modifier": "private static final", "type": "double", "declarator": "oy = 951.753", "var_name": "oy"}, {"original_string": "private static final double ux = 0.12864;", "modifier": "private static final", "type": "double", "declarator": "ux = 0.12864", "var_name": "ux"}, {"original_string": "private static final double uy = 0.99169;", "modifier": "private static final", "type": "double", "declarator": "uy = 0.99169", "var_name": "uy"}, {"original_string": "private UnitVectorProperty property;", "modifier": "private", "type": "UnitVectorProperty", "declarator": "property", "var_name": "property"}], "file": "advanced/mathfx/src/test/java/org/arakhne/afc/math/geometry/d2/dfx/UnitVectorPropertyTest.java"}, "test_case": {"identifier": "getX", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getX() {\n\t\tassertEpsilonEquals(ux, this.property.getX());\n\t}", "signature": "void getX()", "full_signature": "@Test public void getX()", "class_method_signature": "UnitVectorPropertyTest.getX()", "testcase": true, "constructor": false, "invocations": ["assertEpsilonEquals", "getX"]}, "focal_class": {"identifier": "UnitVectorProperty", "superclass": "extends SimpleObjectProperty<Vector2dfx>", "interfaces": "", "fields": [{"original_string": "private final WeakReference<GeomFactory2dfx> factory;", "modifier": "private final", "type": "WeakReference<GeomFactory2dfx>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private ReadOnlyDoubleWrapper x;", "modifier": "private", "type": "ReadOnlyDoubleWrapper", "declarator": "x", "var_name": "x"}, {"original_string": "private ReadOnlyDoubleWrapper y;", "modifier": "private", "type": "ReadOnlyDoubleWrapper", "declarator": "y", "var_name": "y"}, {"original_string": "private Vector2dfx fake;", "modifier": "private", "type": "Vector2dfx", "declarator": "fake", "var_name": "fake"}], "methods": [{"identifier": "UnitVectorProperty", "parameters": "(Object bean, String name, GeomFactory2dfx factory)", "modifiers": "public", "return": "", "signature": " UnitVectorProperty(Object bean, String name, GeomFactory2dfx factory)", "full_signature": "public  UnitVectorProperty(Object bean, String name, GeomFactory2dfx factory)", "class_method_signature": "UnitVectorProperty.UnitVectorProperty(Object bean, String name, GeomFactory2dfx factory)", "testcase": false, "constructor": true}, {"identifier": "getGeomFactory", "parameters": "()", "modifiers": "public", "return": "GeomFactory2dfx", "signature": "GeomFactory2dfx getGeomFactory()", "full_signature": "public GeomFactory2dfx getGeomFactory()", "class_method_signature": "UnitVectorProperty.getGeomFactory()", "testcase": false, "constructor": false}, {"identifier": "internalXProperty", "parameters": "()", "modifiers": "private", "return": "ReadOnlyDoubleWrapper", "signature": "ReadOnlyDoubleWrapper internalXProperty()", "full_signature": "private ReadOnlyDoubleWrapper internalXProperty()", "class_method_signature": "UnitVectorProperty.internalXProperty()", "testcase": false, "constructor": false}, {"identifier": "internalYProperty", "parameters": "()", "modifiers": "private", "return": "ReadOnlyDoubleWrapper", "signature": "ReadOnlyDoubleWrapper internalYProperty()", "full_signature": "private ReadOnlyDoubleWrapper internalYProperty()", "class_method_signature": "UnitVectorProperty.internalYProperty()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "UnitVectorProperty.init()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Vector2dfx", "signature": "Vector2dfx get()", "full_signature": "@Override public Vector2dfx get()", "class_method_signature": "UnitVectorProperty.get()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Vector2dfx newValue)", "modifiers": "@Override public", "return": "void", "signature": "void set(Vector2dfx newValue)", "full_signature": "@Override public void set(Vector2dfx newValue)", "class_method_signature": "UnitVectorProperty.set(Vector2dfx newValue)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(double x, double y)", "modifiers": "public", "return": "void", "signature": "void set(double x, double y)", "full_signature": "public void set(double x, double y)", "class_method_signature": "UnitVectorProperty.set(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getX()", "full_signature": "public double getX()", "class_method_signature": "UnitVectorProperty.getX()", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getY()", "full_signature": "public double getY()", "class_method_signature": "UnitVectorProperty.getY()", "testcase": false, "constructor": false}, {"identifier": "xProperty", "parameters": "()", "modifiers": "@Pure public", "return": "ReadOnlyDoubleProperty", "signature": "ReadOnlyDoubleProperty xProperty()", "full_signature": "@Pure public ReadOnlyDoubleProperty xProperty()", "class_method_signature": "UnitVectorProperty.xProperty()", "testcase": false, "constructor": false}, {"identifier": "yProperty", "parameters": "()", "modifiers": "@Pure public", "return": "ReadOnlyDoubleProperty", "signature": "ReadOnlyDoubleProperty yProperty()", "full_signature": "@Pure public ReadOnlyDoubleProperty yProperty()", "class_method_signature": "UnitVectorProperty.yProperty()", "testcase": false, "constructor": false}], "file": "advanced/mathfx/src/main/java/org/arakhne/afc/math/geometry/d2/dfx/UnitVectorProperty.java"}, "focal_method": {"identifier": "getX", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getX() {\n\t\tif (isBound()) {\n\t\t\treturn super.get().getX();\n\t\t}\n\t\treturn internalXProperty().get();\n\t}", "signature": "double getX()", "full_signature": "public double getX()", "class_method_signature": "UnitVectorProperty.getX()", "testcase": false, "constructor": false, "invocations": ["isBound", "getX", "get", "get", "internalXProperty"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}