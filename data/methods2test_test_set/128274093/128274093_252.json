{"test_class": {"identifier": "QueueDrainSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/subscribers/QueueDrainSubscriberTest.java"}, "test_case": {"identifier": "unorderedOnNextRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unorderedOnNextRace() {\n        for (int i = 0; i < TestHelper.RACE_LONG_LOOPS; i++) {\n\n            TestSubscriber<Integer> ts = new TestSubscriber<Integer>(1);\n            Disposable d = Disposables.empty();\n            final QueueDrainSubscriber<Integer, Integer, Integer> qd = createUnordered(ts, d);\n            ts.onSubscribe(new BooleanSubscription());\n\n            qd.requested(Long.MAX_VALUE);\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    qd.onNext(1);\n                }\n            };\n\n            TestHelper.race(r1, r1);\n\n            ts.assertValuesOnly(1, 1);\n        }\n    }", "signature": "void unorderedOnNextRace()", "full_signature": "@Test public void unorderedOnNextRace()", "class_method_signature": "QueueDrainSubscriberTest.unorderedOnNextRace()", "testcase": true, "constructor": false, "invocations": ["empty", "createUnordered", "onSubscribe", "requested", "onNext", "race", "assertValuesOnly"]}, "focal_class": {"identifier": "QueueDrainSubscriber", "superclass": "extends QueueDrainSubscriberPad4", "interfaces": "implements FlowableSubscriber<T>, QueueDrain<U, V>", "fields": [{"original_string": "protected final Subscriber<? super V> actual;", "modifier": "protected final", "type": "Subscriber<? super V>", "declarator": "actual", "var_name": "actual"}, {"original_string": "protected final SimplePlainQueue<U> queue;", "modifier": "protected final", "type": "SimplePlainQueue<U>", "declarator": "queue", "var_name": "queue"}, {"original_string": "protected volatile boolean cancelled;", "modifier": "protected volatile", "type": "boolean", "declarator": "cancelled", "var_name": "cancelled"}, {"original_string": "protected volatile boolean done;", "modifier": "protected volatile", "type": "boolean", "declarator": "done", "var_name": "done"}, {"original_string": "protected Throwable error;", "modifier": "protected", "type": "Throwable", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "QueueDrainSubscriber", "parameters": "(Subscriber<? super V> actual, SimplePlainQueue<U> queue)", "modifiers": "public", "return": "", "signature": " QueueDrainSubscriber(Subscriber<? super V> actual, SimplePlainQueue<U> queue)", "full_signature": "public  QueueDrainSubscriber(Subscriber<? super V> actual, SimplePlainQueue<U> queue)", "class_method_signature": "QueueDrainSubscriber.QueueDrainSubscriber(Subscriber<? super V> actual, SimplePlainQueue<U> queue)", "testcase": false, "constructor": true}, {"identifier": "cancelled", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean cancelled()", "full_signature": "@Override public final boolean cancelled()", "class_method_signature": "QueueDrainSubscriber.cancelled()", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean done()", "full_signature": "@Override public final boolean done()", "class_method_signature": "QueueDrainSubscriber.done()", "testcase": false, "constructor": false}, {"identifier": "enter", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean enter()", "full_signature": "@Override public final boolean enter()", "class_method_signature": "QueueDrainSubscriber.enter()", "testcase": false, "constructor": false}, {"identifier": "fastEnter", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean fastEnter()", "full_signature": "public final boolean fastEnter()", "class_method_signature": "QueueDrainSubscriber.fastEnter()", "testcase": false, "constructor": false}, {"identifier": "fastPathEmitMax", "parameters": "(U value, boolean delayError, Disposable dispose)", "modifiers": "protected final", "return": "void", "signature": "void fastPathEmitMax(U value, boolean delayError, Disposable dispose)", "full_signature": "protected final void fastPathEmitMax(U value, boolean delayError, Disposable dispose)", "class_method_signature": "QueueDrainSubscriber.fastPathEmitMax(U value, boolean delayError, Disposable dispose)", "testcase": false, "constructor": false}, {"identifier": "fastPathOrderedEmitMax", "parameters": "(U value, boolean delayError, Disposable dispose)", "modifiers": "protected final", "return": "void", "signature": "void fastPathOrderedEmitMax(U value, boolean delayError, Disposable dispose)", "full_signature": "protected final void fastPathOrderedEmitMax(U value, boolean delayError, Disposable dispose)", "class_method_signature": "QueueDrainSubscriber.fastPathOrderedEmitMax(U value, boolean delayError, Disposable dispose)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Subscriber<? super V> a, U v)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(Subscriber<? super V> a, U v)", "full_signature": "@Override public boolean accept(Subscriber<? super V> a, U v)", "class_method_signature": "QueueDrainSubscriber.accept(Subscriber<? super V> a, U v)", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "()", "modifiers": "@Override public final", "return": "Throwable", "signature": "Throwable error()", "full_signature": "@Override public final Throwable error()", "class_method_signature": "QueueDrainSubscriber.error()", "testcase": false, "constructor": false}, {"identifier": "leave", "parameters": "(int m)", "modifiers": "@Override public final", "return": "int", "signature": "int leave(int m)", "full_signature": "@Override public final int leave(int m)", "class_method_signature": "QueueDrainSubscriber.leave(int m)", "testcase": false, "constructor": false}, {"identifier": "requested", "parameters": "()", "modifiers": "@Override public final", "return": "long", "signature": "long requested()", "full_signature": "@Override public final long requested()", "class_method_signature": "QueueDrainSubscriber.requested()", "testcase": false, "constructor": false}, {"identifier": "produced", "parameters": "(long n)", "modifiers": "@Override public final", "return": "long", "signature": "long produced(long n)", "full_signature": "@Override public final long produced(long n)", "class_method_signature": "QueueDrainSubscriber.produced(long n)", "testcase": false, "constructor": false}, {"identifier": "requested", "parameters": "(long n)", "modifiers": "public final", "return": "void", "signature": "void requested(long n)", "full_signature": "public final void requested(long n)", "class_method_signature": "QueueDrainSubscriber.requested(long n)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/subscribers/QueueDrainSubscriber.java"}, "focal_method": {"identifier": "requested", "parameters": "()", "modifiers": "@Override public final", "return": "long", "body": "@Override\n    public final long requested() {\n        return requested.get();\n    }", "signature": "long requested()", "full_signature": "@Override public final long requested()", "class_method_signature": "QueueDrainSubscriber.requested()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}