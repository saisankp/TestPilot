{"test_class": {"identifier": "BrowserMobResponseUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private WilmaHttpResponse wilmaHttpResponse;", "modifier": "@Mock\n    private", "type": "WilmaHttpResponse", "declarator": "wilmaHttpResponse", "var_name": "wilmaHttpResponse"}, {"original_string": "@Mock\n    private BrowserMobHttpResponse browserMobHttpResponse;", "modifier": "@Mock\n    private", "type": "BrowserMobHttpResponse", "declarator": "browserMobHttpResponse", "var_name": "browserMobHttpResponse"}, {"original_string": "@Mock\n    private HttpResponse httpResponse;", "modifier": "@Mock\n    private", "type": "HttpResponse", "declarator": "httpResponse", "var_name": "httpResponse"}, {"original_string": "@Mock\n    private Header header;", "modifier": "@Mock\n    private", "type": "Header", "declarator": "header", "var_name": "header"}, {"original_string": "@InjectMocks\n    private BrowserMobResponseUpdater underTest;", "modifier": "@InjectMocks\n    private", "type": "BrowserMobResponseUpdater", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-browsermob-integration/src/test/java/com/epam/wilma/browsermob/transformer/BrowserMobResponseUpdaterTest.java"}, "test_case": {"identifier": "testUpdateResponseShouldUpdateBodyPart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateResponseShouldUpdateBodyPart() throws URISyntaxException, IOException {\n        //GIVEN\n        given(browserMobHttpResponse.getRawResponse()).willReturn(httpResponse);\n        given(wilmaHttpResponse.getNewBody()).willReturn(\"NEW BODY\".getBytes());\n        given(wilmaHttpResponse.isVolatile()).willReturn(true);\n        //WHEN\n        underTest.updateResponse(browserMobHttpResponse, wilmaHttpResponse);\n        //THEN\n        verify(browserMobHttpResponse).setAnswer((byte[]) anyObject());\n        verify(httpResponse).setEntity((HttpEntity) anyObject());\n    }", "signature": "void testUpdateResponseShouldUpdateBodyPart()", "full_signature": "@Test public void testUpdateResponseShouldUpdateBodyPart()", "class_method_signature": "BrowserMobResponseUpdaterTest.testUpdateResponseShouldUpdateBodyPart()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getRawResponse", "willReturn", "given", "getNewBody", "getBytes", "willReturn", "given", "isVolatile", "updateResponse", "setAnswer", "verify", "anyObject", "setEntity", "verify", "anyObject"]}, "focal_class": {"identifier": "BrowserMobResponseUpdater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(BrowserMobResponseUpdater.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BrowserMobResponseUpdater.class)", "var_name": "logger"}], "methods": [{"identifier": "updateResponse", "parameters": "(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "modifiers": "public", "return": "void", "signature": "void updateResponse(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "full_signature": "public void updateResponse(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "class_method_signature": "BrowserMobResponseUpdater.updateResponse(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-browsermob-integration/src/main/java/com/epam/wilma/browsermob/transformer/BrowserMobResponseUpdater.java"}, "focal_method": {"identifier": "updateResponse", "parameters": "(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "modifiers": "public", "return": "void", "body": "public void updateResponse(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse) {\n\n        //Note: update (proxy) response is an experimental feature only\n        if (!wilmaResponse.isVolatile()) {\n            return;\n        }\n\n        // From now on, the response is volatile\n\n        // update the headers of the original response with extra headers added/removed by Resp interceptors\n        Map<String, HttpHeaderChange> headerChangeMap = wilmaResponse.getHeaderChanges();\n        if (headerChangeMap != null && !headerChangeMap.isEmpty()) { //we have header change requests\n            for (Map.Entry<String, HttpHeaderChange> headerChangeEntry : headerChangeMap.entrySet()) {\n                String headerKey = headerChangeEntry.getKey();\n                HttpHeaderChange headerChange = headerChangeEntry.getValue();\n                Header header = browserMobHttpResponse.getRawResponse().getFirstHeader(headerKey);\n\n                if (headerChange instanceof HttpHeaderToBeUpdated) {\n                    // it is HttpHeaderToBeChanged, so added, or updated\n                    if (header != null) {\n                        ((HttpHeaderToBeUpdated) headerChange).setOriginalValue(header.getValue());\n                    }\n                    browserMobHttpResponse.getRawResponse().addHeader(headerKey, ((HttpHeaderToBeUpdated) headerChange).getNewValue());\n                    headerChange.setApplied();\n                } else {\n                    // it is HttpHeaderToBeRemoved\n                    if (header != null) {\n                        browserMobHttpResponse.getRawResponse().removeHeader(header);\n                        headerChange.setApplied();\n                    }\n                }\n            }\n        }\n\n        byte[] newBody = wilmaResponse.getNewBody();\n        if (newBody != null) {\n            try {\n                browserMobHttpResponse.setAnswer(newBody);\n                browserMobHttpResponse.getRawResponse().setEntity(new ByteArrayEntity(wilmaResponse.getNewBody()));\n            } catch (IOException e) {\n                //ups, were unable to set new response correctly ...\n                logger.warn(\"Message ont-the-fly update was failed for message: \" + wilmaResponse.getWilmaMessageId(), e);\n            }\n        }\n    }", "signature": "void updateResponse(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "full_signature": "public void updateResponse(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "class_method_signature": "BrowserMobResponseUpdater.updateResponse(final BrowserMobHttpResponse browserMobHttpResponse, final WilmaHttpResponse wilmaResponse)", "testcase": false, "constructor": false, "invocations": ["isVolatile", "getHeaderChanges", "isEmpty", "entrySet", "getKey", "getValue", "getFirstHeader", "getRawResponse", "setOriginalValue", "getValue", "addHeader", "getRawResponse", "getNewValue", "setApplied", "removeHeader", "getRawResponse", "setApplied", "getNewBody", "setAnswer", "setEntity", "getRawResponse", "getNewBody", "warn", "getWilmaMessageId"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}