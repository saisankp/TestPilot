{"test_class": {"identifier": "BoundsTest", "superclass": "extends AbstractElementTest", "interfaces": "", "fields": [], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/elements/BoundsTest.java"}, "test_case": {"identifier": "width", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void width() throws Exception {\n        assertThat(new Bounds(2, 2, 7, 6).width(), is(closeTo(5d, 0.1)));\n    }", "signature": "void width()", "full_signature": "@Test public void width()", "class_method_signature": "BoundsTest.width()", "testcase": true, "constructor": false, "invocations": ["assertThat", "width", "is", "closeTo"]}, "focal_class": {"identifier": "Bounds", "superclass": "", "interfaces": "implements IRenderingElement", "fields": [{"original_string": "public double minX, minY;", "modifier": "public", "type": "double", "declarator": "minX", "var_name": "minX"}, {"original_string": "public double maxX, maxY;", "modifier": "public", "type": "double", "declarator": "maxX", "var_name": "maxX"}, {"original_string": "private final ElementGroup elements = new ElementGroup();", "modifier": "private final", "type": "ElementGroup", "declarator": "elements = new ElementGroup()", "var_name": "elements"}], "methods": [{"identifier": "Bounds", "parameters": "(double x1, double y1, double x2, double y2)", "modifiers": "public", "return": "", "signature": " Bounds(double x1, double y1, double x2, double y2)", "full_signature": "public  Bounds(double x1, double y1, double x2, double y2)", "class_method_signature": "Bounds.Bounds(double x1, double y1, double x2, double y2)", "testcase": false, "constructor": true}, {"identifier": "Bounds", "parameters": "()", "modifiers": "public", "return": "", "signature": " Bounds()", "full_signature": "public  Bounds()", "class_method_signature": "Bounds.Bounds()", "testcase": false, "constructor": true}, {"identifier": "Bounds", "parameters": "(IRenderingElement element)", "modifiers": "public", "return": "", "signature": " Bounds(IRenderingElement element)", "full_signature": "public  Bounds(IRenderingElement element)", "class_method_signature": "Bounds.Bounds(IRenderingElement element)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(IRenderingElement element)", "modifiers": "public", "return": "void", "signature": "void add(IRenderingElement element)", "full_signature": "public void add(IRenderingElement element)", "class_method_signature": "Bounds.add(IRenderingElement element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double x, double y)", "modifiers": "public", "return": "void", "signature": "void add(double x, double y)", "full_signature": "public void add(double x, double y)", "class_method_signature": "Bounds.add(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Bounds bounds)", "modifiers": "public", "return": "void", "signature": "void add(Bounds bounds)", "full_signature": "public void add(Bounds bounds)", "class_method_signature": "Bounds.add(Bounds bounds)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(GeneralPath path)", "modifiers": "private", "return": "void", "signature": "void add(GeneralPath path)", "full_signature": "private void add(GeneralPath path)", "class_method_signature": "Bounds.add(GeneralPath path)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(IRenderingElement newElement)", "modifiers": "private", "return": "void", "signature": "void traverse(IRenderingElement newElement)", "full_signature": "private void traverse(IRenderingElement newElement)", "class_method_signature": "Bounds.traverse(IRenderingElement newElement)", "testcase": false, "constructor": false}, {"identifier": "root", "parameters": "()", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement root()", "full_signature": "public IRenderingElement root()", "class_method_signature": "Bounds.root()", "testcase": false, "constructor": false}, {"identifier": "width", "parameters": "()", "modifiers": "public final", "return": "double", "signature": "double width()", "full_signature": "public final double width()", "class_method_signature": "Bounds.width()", "testcase": false, "constructor": false}, {"identifier": "height", "parameters": "()", "modifiers": "public final", "return": "double", "signature": "double height()", "full_signature": "public final double height()", "class_method_signature": "Bounds.height()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public final boolean isEmpty()", "class_method_signature": "Bounds.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(IRenderingVisitor visitor)", "modifiers": "@Override public", "return": "void", "signature": "void accept(IRenderingVisitor visitor)", "full_signature": "@Override public void accept(IRenderingVisitor visitor)", "class_method_signature": "Bounds.accept(IRenderingVisitor visitor)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Bounds.toString()", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/elements/Bounds.java"}, "focal_method": {"identifier": "width", "parameters": "()", "modifiers": "public final", "return": "double", "body": "public final double width() {\n        return maxX - minX;\n    }", "signature": "double width()", "full_signature": "public final double width()", "class_method_signature": "Bounds.width()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}