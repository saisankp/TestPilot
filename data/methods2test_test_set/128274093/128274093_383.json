{"test_class": {"identifier": "ObservableCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservableCacheTest.java"}, "test_case": {"identifier": "testAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsync() {\n        Observable<Integer> source = Observable.range(1, 10000);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Integer> to1 = new TestObserver<Integer>();\n\n            ObservableCache<Integer> cached = (ObservableCache<Integer>)ObservableCache.from(source);\n\n            cached.observeOn(Schedulers.computation()).subscribe(to1);\n\n            to1.awaitTerminalEvent(2, TimeUnit.SECONDS);\n            to1.assertNoErrors();\n            to1.assertComplete();\n            assertEquals(10000, to1.values().size());\n\n            TestObserver<Integer> to2 = new TestObserver<Integer>();\n            cached.observeOn(Schedulers.computation()).subscribe(to2);\n\n            to2.awaitTerminalEvent(2, TimeUnit.SECONDS);\n            to2.assertNoErrors();\n            to2.assertComplete();\n            assertEquals(10000, to2.values().size());\n        }\n    }", "signature": "void testAsync()", "full_signature": "@Test public void testAsync()", "class_method_signature": "ObservableCacheTest.testAsync()", "testcase": true, "constructor": false, "invocations": ["range", "from", "subscribe", "observeOn", "computation", "awaitTerminalEvent", "assertNoErrors", "assertComplete", "assertEquals", "size", "values", "subscribe", "observeOn", "computation", "awaitTerminalEvent", "assertNoErrors", "assertComplete", "assertEquals", "size", "values"]}, "focal_class": {"identifier": "ObservableCache", "superclass": "extends AbstractObservableWithUpstream<T, T>", "interfaces": "", "fields": [{"original_string": "final CacheState<T> state;", "modifier": "final", "type": "CacheState<T>", "declarator": "state", "var_name": "state"}, {"original_string": "final AtomicBoolean once;", "modifier": "final", "type": "AtomicBoolean", "declarator": "once", "var_name": "once"}], "methods": [{"identifier": "from", "parameters": "(Observable<T> source)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> from(Observable<T> source)", "full_signature": "public static Observable<T> from(Observable<T> source)", "class_method_signature": "ObservableCache.from(Observable<T> source)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(Observable<T> source, int capacityHint)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> from(Observable<T> source, int capacityHint)", "full_signature": "public static Observable<T> from(Observable<T> source, int capacityHint)", "class_method_signature": "ObservableCache.from(Observable<T> source, int capacityHint)", "testcase": false, "constructor": false}, {"identifier": "ObservableCache", "parameters": "(Observable<T> source, CacheState<T> state)", "modifiers": "private", "return": "", "signature": " ObservableCache(Observable<T> source, CacheState<T> state)", "full_signature": "private  ObservableCache(Observable<T> source, CacheState<T> state)", "class_method_signature": "ObservableCache.ObservableCache(Observable<T> source, CacheState<T> state)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> t)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Observer<? super T> t)", "full_signature": "@Override protected void subscribeActual(Observer<? super T> t)", "class_method_signature": "ObservableCache.subscribeActual(Observer<? super T> t)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isConnected()", "full_signature": " boolean isConnected()", "class_method_signature": "ObservableCache.isConnected()", "testcase": false, "constructor": false}, {"identifier": "hasObservers", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasObservers()", "full_signature": " boolean hasObservers()", "class_method_signature": "ObservableCache.hasObservers()", "testcase": false, "constructor": false}, {"identifier": "cachedEventCount", "parameters": "()", "modifiers": "", "return": "int", "signature": "int cachedEventCount()", "full_signature": " int cachedEventCount()", "class_method_signature": "ObservableCache.cachedEventCount()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableCache.java"}, "focal_method": {"identifier": "from", "parameters": "(Observable<T> source)", "modifiers": "public static", "return": "Observable<T>", "body": "public static <T> Observable<T> from(Observable<T> source) {\n        return from(source, 16);\n    }", "signature": "Observable<T> from(Observable<T> source)", "full_signature": "public static Observable<T> from(Observable<T> source)", "class_method_signature": "ObservableCache.from(Observable<T> source)", "testcase": false, "constructor": false, "invocations": ["from"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}