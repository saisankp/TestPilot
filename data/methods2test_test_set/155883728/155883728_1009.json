{"test_class": {"identifier": "CommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CommandTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CommandTest.class)", "var_name": "LOGGER"}, {"original_string": "final File testOutputBaseDir = new File(\"target/test-output/CommandTest\");", "modifier": "final", "type": "File", "declarator": "testOutputBaseDir = new File(\"target/test-output/CommandTest\")", "var_name": "testOutputBaseDir"}], "file": "cli/src/test/java/net/adamcin/oakpal/cli/CommandTest.java"}, "test_case": {"identifier": "testGetHighestReportSeverity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHighestReportSeverity() {\n        ReportCollector collector1 = new ReportCollector();\n        collector1.reportViolation(new SimpleViolation(Severity.MINOR, \"\"));\n        collector1.reportViolation(new SimpleViolation(Severity.MAJOR, \"\"));\n        CheckReport hasMajor = new SimpleReport(\"hasMajor\", collector1.getReportedViolations());\n        ReportCollector collector2 = new ReportCollector();\n        collector2.reportViolation(new SimpleViolation(Severity.MINOR, \"\"));\n        collector2.reportViolation(new SimpleViolation(Severity.SEVERE, \"\"));\n        CheckReport hasSevere = new SimpleReport(\"hasSevere\", collector2.getReportedViolations());\n        ReportCollector collector3 = new ReportCollector();\n        collector3.reportViolation(new SimpleViolation(Severity.MINOR, \"\"));\n        CheckReport hasMinor = new SimpleReport(\"hasMinor\", collector3.getReportedViolations());\n        final Console console = getMockConsole();\n        Options optsFailDefault = new Options.Builder()\n                .build(console).getOrDefault(null);\n        Options optsFailMinor = new Options.Builder()\n                .setFailOnSeverity(Severity.MINOR)\n                .build(console).getOrDefault(null);\n        Options optsFailMajor = new Options.Builder()\n                .setFailOnSeverity(Severity.MAJOR)\n                .build(console).getOrDefault(null);\n        Options optsFailSevere = new Options.Builder()\n                .setFailOnSeverity(Severity.SEVERE)\n                .build(console).getOrDefault(null);\n        final Command command = new Command();\n        assertFalse(\"no exit minor default fail\",\n                command.getHighestReportSeverity(optsFailDefault, Collections.singletonList(hasMinor)).isPresent());\n        assertEquals(\"major exit default fail\", Command.EXIT_MAJOR_VIOLATION,\n                command.getHighestReportSeverity(optsFailDefault, Collections.singletonList(hasMajor)).get());\n        assertEquals(\"severe exit default fail\", Command.EXIT_SEVERE_VIOLATION,\n                command.getHighestReportSeverity(optsFailDefault, Collections.singletonList(hasSevere)).get());\n\n        assertEquals(\"minor exit minor fail\", Command.EXIT_MINOR_VIOLATION,\n                command.getHighestReportSeverity(optsFailMinor, Collections.singletonList(hasMinor)).get());\n        assertEquals(\"major exit minor fail\", Command.EXIT_MAJOR_VIOLATION,\n                command.getHighestReportSeverity(optsFailMinor, Collections.singletonList(hasMajor)).get());\n        assertEquals(\"severe exit minor fail\", Command.EXIT_SEVERE_VIOLATION,\n                command.getHighestReportSeverity(optsFailMinor, Collections.singletonList(hasSevere)).get());\n\n        assertFalse(\"no exit minor major fail\",\n                command.getHighestReportSeverity(optsFailMajor, Collections.singletonList(hasMinor)).isPresent());\n        assertEquals(\"major exit major fail\", Command.EXIT_MAJOR_VIOLATION,\n                command.getHighestReportSeverity(optsFailMajor, Collections.singletonList(hasMajor)).get());\n        assertEquals(\"severe exit major fail\", Command.EXIT_SEVERE_VIOLATION,\n                command.getHighestReportSeverity(optsFailMajor, Collections.singletonList(hasSevere)).get());\n\n        assertFalse(\"no exit minor severe fail\",\n                command.getHighestReportSeverity(optsFailSevere, Collections.singletonList(hasMinor)).isPresent());\n        assertFalse(\"no exit major severe fail\",\n                command.getHighestReportSeverity(optsFailSevere, Collections.singletonList(hasMajor)).isPresent());\n        assertEquals(\"severe exit major fail\", Command.EXIT_SEVERE_VIOLATION,\n                command.getHighestReportSeverity(optsFailSevere, Collections.singletonList(hasSevere)).get());\n\n        assertFalse(\"no exit minor default fail\",\n                command.getHighestReportSeverity(optsFailDefault, Arrays.asList(hasMinor, hasMinor)).isPresent());\n        assertEquals(\"minor exit\", Command.EXIT_MAJOR_VIOLATION,\n                command.getHighestReportSeverity(optsFailDefault, Arrays.asList(hasMinor, hasMajor)).get());\n        assertEquals(\"major exit\", Command.EXIT_MAJOR_VIOLATION,\n                command.getHighestReportSeverity(optsFailDefault, Arrays.asList(hasMajor, hasMinor)).get());\n        assertEquals(\"major exit\", Command.EXIT_MAJOR_VIOLATION,\n                command.getHighestReportSeverity(optsFailDefault, Arrays.asList(hasMajor, hasMajor)).get());\n        assertEquals(\"severe exit\", Command.EXIT_SEVERE_VIOLATION,\n                command.getHighestReportSeverity(optsFailDefault, Arrays.asList(hasSevere, hasMajor)).get());\n    }", "signature": "void testGetHighestReportSeverity()", "full_signature": "@Test public void testGetHighestReportSeverity()", "class_method_signature": "CommandTest.testGetHighestReportSeverity()", "testcase": true, "constructor": false, "invocations": ["reportViolation", "reportViolation", "getReportedViolations", "reportViolation", "reportViolation", "getReportedViolations", "reportViolation", "getReportedViolations", "getMockConsole", "getOrDefault", "build", "getOrDefault", "build", "setFailOnSeverity", "getOrDefault", "build", "setFailOnSeverity", "getOrDefault", "build", "setFailOnSeverity", "assertFalse", "isPresent", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertFalse", "isPresent", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertFalse", "isPresent", "getHighestReportSeverity", "singletonList", "assertFalse", "isPresent", "getHighestReportSeverity", "singletonList", "assertEquals", "get", "getHighestReportSeverity", "singletonList", "assertFalse", "isPresent", "getHighestReportSeverity", "asList", "assertEquals", "get", "getHighestReportSeverity", "asList", "assertEquals", "get", "getHighestReportSeverity", "asList", "assertEquals", "get", "getHighestReportSeverity", "asList", "assertEquals", "get", "getHighestReportSeverity", "asList"]}, "focal_class": {"identifier": "Command", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Command.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Command.class)", "var_name": "LOGGER"}, {"original_string": "private static final String SHORT_NO_OPT_PREFIX = \"+\";", "modifier": "private static final", "type": "String", "declarator": "SHORT_NO_OPT_PREFIX = \"+\"", "var_name": "SHORT_NO_OPT_PREFIX"}, {"original_string": "private static final String LONG_NO_OPT_PREFIX = \"--no-\";", "modifier": "private static final", "type": "String", "declarator": "LONG_NO_OPT_PREFIX = \"--no-\"", "var_name": "LONG_NO_OPT_PREFIX"}, {"original_string": "private static final String VERSION_PROPERTIES_NAME = \"version.properties\";", "modifier": "private static final", "type": "String", "declarator": "VERSION_PROPERTIES_NAME = \"version.properties\"", "var_name": "VERSION_PROPERTIES_NAME"}, {"original_string": "private static final String COMMAND_HELP_TXT = \"help.txt\";", "modifier": "private static final", "type": "String", "declarator": "COMMAND_HELP_TXT = \"help.txt\"", "var_name": "COMMAND_HELP_TXT"}, {"original_string": "static final Integer EXIT_GENERAL_ERROR = 1;", "modifier": "static final", "type": "Integer", "declarator": "EXIT_GENERAL_ERROR = 1", "var_name": "EXIT_GENERAL_ERROR"}, {"original_string": "static final Integer EXIT_ABORTED_SCAN = 9;", "modifier": "static final", "type": "Integer", "declarator": "EXIT_ABORTED_SCAN = 9", "var_name": "EXIT_ABORTED_SCAN"}, {"original_string": "static final Integer EXIT_SEVERE_VIOLATION = 10;", "modifier": "static final", "type": "Integer", "declarator": "EXIT_SEVERE_VIOLATION = 10", "var_name": "EXIT_SEVERE_VIOLATION"}, {"original_string": "static final Integer EXIT_MAJOR_VIOLATION = 11;", "modifier": "static final", "type": "Integer", "declarator": "EXIT_MAJOR_VIOLATION = 11", "var_name": "EXIT_MAJOR_VIOLATION"}, {"original_string": "static final Integer EXIT_MINOR_VIOLATION = 12;", "modifier": "static final", "type": "Integer", "declarator": "EXIT_MINOR_VIOLATION = 12", "var_name": "EXIT_MINOR_VIOLATION"}], "methods": [{"identifier": "perform", "parameters": "(final @NotNull Console console, final @NotNull String[] args)", "modifiers": "", "return": "IO<Integer>", "signature": "IO<Integer> perform(final @NotNull Console console, final @NotNull String[] args)", "full_signature": " IO<Integer> perform(final @NotNull Console console, final @NotNull String[] args)", "class_method_signature": "Command.perform(final @NotNull Console console, final @NotNull String[] args)", "testcase": false, "constructor": false}, {"identifier": "getNodeStoreSupplier", "parameters": "(final @NotNull Options opts)", "modifiers": "", "return": "Supplier<NodeStore>", "signature": "Supplier<NodeStore> getNodeStoreSupplier(final @NotNull Options opts)", "full_signature": " Supplier<NodeStore> getNodeStoreSupplier(final @NotNull Options opts)", "class_method_signature": "Command.getNodeStoreSupplier(final @NotNull Options opts)", "testcase": false, "constructor": false}, {"identifier": "doScan", "parameters": "(final @NotNull Console console, final @NotNull Options opts)", "modifiers": "", "return": "IO<Integer>", "signature": "IO<Integer> doScan(final @NotNull Console console, final @NotNull Options opts)", "full_signature": " IO<Integer> doScan(final @NotNull Console console, final @NotNull Options opts)", "class_method_signature": "Command.doScan(final @NotNull Console console, final @NotNull Options opts)", "testcase": false, "constructor": false}, {"identifier": "runOakScan", "parameters": "(final @NotNull Options opts, final @NotNull OakMachine oak)", "modifiers": "", "return": "Result<List<CheckReport>>", "signature": "Result<List<CheckReport>> runOakScan(final @NotNull Options opts, final @NotNull OakMachine oak)", "full_signature": " Result<List<CheckReport>> runOakScan(final @NotNull Options opts, final @NotNull OakMachine oak)", "class_method_signature": "Command.runOakScan(final @NotNull Options opts, final @NotNull OakMachine oak)", "testcase": false, "constructor": false}, {"identifier": "getHighestReportSeverity", "parameters": "(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "modifiers": "", "return": "Optional<Integer>", "signature": "Optional<Integer> getHighestReportSeverity(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "full_signature": " Optional<Integer> getHighestReportSeverity(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "class_method_signature": "Command.getHighestReportSeverity(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "testcase": false, "constructor": false}, {"identifier": "printReports", "parameters": "(final @NotNull List<CheckReport> reports,\n                             final @NotNull Function<StructuredMessage, IO<Nothing>> linePrinter)", "modifiers": "", "return": "IO<Nothing>", "signature": "IO<Nothing> printReports(final @NotNull List<CheckReport> reports,\n                             final @NotNull Function<StructuredMessage, IO<Nothing>> linePrinter)", "full_signature": " IO<Nothing> printReports(final @NotNull List<CheckReport> reports,\n                             final @NotNull Function<StructuredMessage, IO<Nothing>> linePrinter)", "class_method_signature": "Command.printReports(final @NotNull List<CheckReport> reports,\n                             final @NotNull Function<StructuredMessage, IO<Nothing>> linePrinter)", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "modifiers": "", "return": "IO<Nothing>", "signature": "IO<Nothing> printHelp(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "full_signature": " IO<Nothing> printHelp(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "class_method_signature": "Command.printHelp(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "testcase": false, "constructor": false}, {"identifier": "printVersion", "parameters": "(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "modifiers": "", "return": "IO<Nothing>", "signature": "IO<Nothing> printVersion(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "full_signature": " IO<Nothing> printVersion(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "class_method_signature": "Command.printVersion(final @NotNull Function<Object, IO<Nothing>> linePrinter)", "testcase": false, "constructor": false}, {"identifier": "flipOpt", "parameters": "(final @NotNull String wholeOpt)", "modifiers": "", "return": "Optional<String>", "signature": "Optional<String> flipOpt(final @NotNull String wholeOpt)", "full_signature": " Optional<String> flipOpt(final @NotNull String wholeOpt)", "class_method_signature": "Command.flipOpt(final @NotNull String wholeOpt)", "testcase": false, "constructor": false}, {"identifier": "parseArgs", "parameters": "(final @NotNull Console console, final @NotNull String[] args)", "modifiers": "@NotNull", "return": "Result<Options>", "signature": "Result<Options> parseArgs(final @NotNull Console console, final @NotNull String[] args)", "full_signature": "@NotNull Result<Options> parseArgs(final @NotNull Console console, final @NotNull String[] args)", "class_method_signature": "Command.parseArgs(final @NotNull Console console, final @NotNull String[] args)", "testcase": false, "constructor": false}], "file": "cli/src/main/java/net/adamcin/oakpal/cli/Command.java"}, "focal_method": {"identifier": "getHighestReportSeverity", "parameters": "(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "modifiers": "", "return": "Optional<Integer>", "body": "Optional<Integer> getHighestReportSeverity(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports) {\n        return reports.stream()\n                .flatMap(compose1(CheckReport::getViolations, Collection::stream))\n                .map(Violation::getSeverity)\n                .reduce(Severity::maxSeverity)\n                .filter(opts.getFailOnSeverity().meetsMinimumSeverity())\n                .map(severity -> {\n                    switch (severity) {\n                        case SEVERE:\n                            return EXIT_SEVERE_VIOLATION;\n                        case MAJOR:\n                            return EXIT_MAJOR_VIOLATION;\n                        case MINOR:\n                        default:\n                            return EXIT_MINOR_VIOLATION;\n                    }\n                });\n    }", "signature": "Optional<Integer> getHighestReportSeverity(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "full_signature": " Optional<Integer> getHighestReportSeverity(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "class_method_signature": "Command.getHighestReportSeverity(final @NotNull Options opts,\n                                               final @NotNull List<CheckReport> reports)", "testcase": false, "constructor": false, "invocations": ["map", "filter", "reduce", "map", "flatMap", "stream", "compose1", "meetsMinimumSeverity", "getFailOnSeverity"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}