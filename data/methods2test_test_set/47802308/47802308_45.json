{"test_class": {"identifier": "SpringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/spring/src/test/java/org/onetwo/common/spring/SpringUtilsTest.java"}, "test_case": {"identifier": "testToMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToMap(){\n\t\tTestBean test = new TestBean();\n\t\ttest.setUserName(\"testUserName\");\n\t\ttest.setBirthday(DateUtils.parse(\"2017-01-05 11:11:11\"));\n\t\ttest.getAttrs().put(\"aa\", \"bb\");\n\t\tTestBean test2 = new TestBean();\n\t\ttest2.setUserName(\"testUserName2\");\n\t\ttest.getAttrs().put(\"cc\", test2);\n\t\ttest.setName(\"testRealName\");\n\t\tMap<String, Object> map = SpringUtils.toFlatMap(test);\n\t\tSystem.out.println(\"map:\"+map);\n\t\tassertThat(map.size()).isEqualTo(5);\n\t\tassertThat(map.get(\"birthday\")).isEqualTo(\"2017-01-05\");\n\t\tassertThat(map.get(\"realName\")).isEqualTo(\"testRealName\");\n\t}", "signature": "void testToMap()", "full_signature": "@Test public void testToMap()", "class_method_signature": "SpringUtilsTest.testToMap()", "testcase": true, "constructor": false, "invocations": ["setUserName", "setBirthday", "parse", "put", "getAttrs", "setUserName", "put", "getAttrs", "setName", "toFlatMap", "println", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "SpringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static Logger logger = JFishLoggerFactory.getLogger(SpringUtils.class);", "modifier": "protected static", "type": "Logger", "declarator": "logger = JFishLoggerFactory.getLogger(SpringUtils.class)", "var_name": "logger"}, {"original_string": "private static String ACTIVE_PROFILES = \"spring.profiles.active\";", "modifier": "private static", "type": "String", "declarator": "ACTIVE_PROFILES = \"spring.profiles.active\"", "var_name": "ACTIVE_PROFILES"}, {"original_string": "private static final MapToBeanConvertor MAP_TO_BEAN = MapToBeanConvertor.builder().build();", "modifier": "private static final", "type": "MapToBeanConvertor", "declarator": "MAP_TO_BEAN = MapToBeanConvertor.builder().build()", "var_name": "MAP_TO_BEAN"}, {"original_string": "private static final FormattingConversionService CONVERSION_SERVICE = new DefaultFormattingConversionService();", "modifier": "private static final", "type": "FormattingConversionService", "declarator": "CONVERSION_SERVICE = new DefaultFormattingConversionService()", "var_name": "CONVERSION_SERVICE"}, {"original_string": "private static final BeanToMapConvertor BEAN_TO_MAP_CONVERTOR = BeanToMapBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.enableFieldNameAnnotation()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build();", "modifier": "private static final", "type": "BeanToMapConvertor", "declarator": "BEAN_TO_MAP_CONVERTOR = BeanToMapBuilder.newBuilder()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.enableFieldNameAnnotation()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build()", "var_name": "BEAN_TO_MAP_CONVERTOR"}, {"original_string": "public static final Expression DOLOR = ExpressionFacotry.newExpression(\"${\", \"}\");", "modifier": "public static final", "type": "Expression", "declarator": "DOLOR = ExpressionFacotry.newExpression(\"${\", \"}\")", "var_name": "DOLOR"}], "methods": [{"identifier": "SpringUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " SpringUtils()", "full_signature": "private  SpringUtils()", "class_method_signature": "SpringUtils.SpringUtils()", "testcase": false, "constructor": true}, {"identifier": "higherThan", "parameters": "(int order)", "modifiers": "public static", "return": "int", "signature": "int higherThan(int order)", "full_signature": "public static int higherThan(int order)", "class_method_signature": "SpringUtils.higherThan(int order)", "testcase": false, "constructor": false}, {"identifier": "higherThan", "parameters": "(int order, int step)", "modifiers": "public static", "return": "int", "signature": "int higherThan(int order, int step)", "full_signature": "public static int higherThan(int order, int step)", "class_method_signature": "SpringUtils.higherThan(int order, int step)", "testcase": false, "constructor": false}, {"identifier": "lowerThan", "parameters": "(int order)", "modifiers": "public static", "return": "int", "signature": "int lowerThan(int order)", "full_signature": "public static int lowerThan(int order)", "class_method_signature": "SpringUtils.lowerThan(int order)", "testcase": false, "constructor": false}, {"identifier": "lowerThan", "parameters": "(int order, int step)", "modifiers": "public static", "return": "int", "signature": "int lowerThan(int order, int step)", "full_signature": "public static int lowerThan(int order, int step)", "class_method_signature": "SpringUtils.lowerThan(int order, int step)", "testcase": false, "constructor": false}, {"identifier": "getFormattingConversionService", "parameters": "()", "modifiers": "public static", "return": "FormattingConversionService", "signature": "FormattingConversionService getFormattingConversionService()", "full_signature": "public static FormattingConversionService getFormattingConversionService()", "class_method_signature": "SpringUtils.getFormattingConversionService()", "testcase": false, "constructor": false}, {"identifier": "convertValue", "parameters": "(Object value, Class<T> targetType)", "modifiers": "public static", "return": "T", "signature": "T convertValue(Object value, Class<T> targetType)", "full_signature": "public static T convertValue(Object value, Class<T> targetType)", "class_method_signature": "SpringUtils.convertValue(Object value, Class<T> targetType)", "testcase": false, "constructor": false}, {"identifier": "convertValue", "parameters": "(Object value, Class<?> clazz, String name, boolean byProperty)", "modifiers": "public static", "return": "Object", "signature": "Object convertValue(Object value, Class<?> clazz, String name, boolean byProperty)", "full_signature": "public static Object convertValue(Object value, Class<?> clazz, String name, boolean byProperty)", "class_method_signature": "SpringUtils.convertValue(Object value, Class<?> clazz, String name, boolean byProperty)", "testcase": false, "constructor": false}, {"identifier": "toFlatMap", "parameters": "(Object obj)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> toFlatMap(Object obj)", "full_signature": "public static Map<String, Object> toFlatMap(Object obj)", "class_method_signature": "SpringUtils.toFlatMap(Object obj)", "testcase": false, "constructor": false}, {"identifier": "typeDescriptorForPerperty", "parameters": "(Class<?> clazz, String propertyName)", "modifiers": "public static", "return": "TypeDescriptor", "signature": "TypeDescriptor typeDescriptorForPerperty(Class<?> clazz, String propertyName)", "full_signature": "public static TypeDescriptor typeDescriptorForPerperty(Class<?> clazz, String propertyName)", "class_method_signature": "SpringUtils.typeDescriptorForPerperty(Class<?> clazz, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "typeDescriptorForField", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "TypeDescriptor", "signature": "TypeDescriptor typeDescriptorForField(Class<?> clazz, String fieldName)", "full_signature": "public static TypeDescriptor typeDescriptorForField(Class<?> clazz, String fieldName)", "class_method_signature": "SpringUtils.typeDescriptorForField(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "setProfiles", "parameters": "(String profiles)", "modifiers": "public static", "return": "void", "signature": "void setProfiles(String profiles)", "full_signature": "public static void setProfiles(String profiles)", "class_method_signature": "SpringUtils.setProfiles(String profiles)", "testcase": false, "constructor": false}, {"identifier": "getProfiles", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getProfiles()", "full_signature": "public static String getProfiles()", "class_method_signature": "SpringUtils.getProfiles()", "testcase": false, "constructor": false}, {"identifier": "addProfiles", "parameters": "(String... profiles)", "modifiers": "public static", "return": "void", "signature": "void addProfiles(String... profiles)", "full_signature": "public static void addProfiles(String... profiles)", "class_method_signature": "SpringUtils.addProfiles(String... profiles)", "testcase": false, "constructor": false}, {"identifier": "getBeansWithAnnotation", "parameters": "(ApplicationContext applicationContext, Class<T> annotationType)", "modifiers": "public static", "return": "List<WithAnnotationBeanData<T>>", "signature": "List<WithAnnotationBeanData<T>> getBeansWithAnnotation(ApplicationContext applicationContext, Class<T> annotationType)", "full_signature": "public static List<WithAnnotationBeanData<T>> getBeansWithAnnotation(ApplicationContext applicationContext, Class<T> annotationType)", "class_method_signature": "SpringUtils.getBeansWithAnnotation(ApplicationContext applicationContext, Class<T> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getBeanWithAnnotation", "parameters": "(ApplicationContext applicationContext, Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "T", "signature": "T getBeanWithAnnotation(ApplicationContext applicationContext, Class<? extends Annotation> annotationType)", "full_signature": "public static T getBeanWithAnnotation(ApplicationContext applicationContext, Class<? extends Annotation> annotationType)", "class_method_signature": "SpringUtils.getBeanWithAnnotation(ApplicationContext applicationContext, Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getBeans", "parameters": "(ListableBeanFactory appContext, Class<T> clazz)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getBeans(ListableBeanFactory appContext, Class<T> clazz)", "full_signature": "public static List<T> getBeans(ListableBeanFactory appContext, Class<T> clazz)", "class_method_signature": "SpringUtils.getBeans(ListableBeanFactory appContext, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getBeans", "parameters": "(ListableBeanFactory appContext, Class<?> clazz, ParameterizedTypeReference<T> typeRef)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> getBeans(ListableBeanFactory appContext, Class<?> clazz, ParameterizedTypeReference<T> typeRef)", "full_signature": "public static List<T> getBeans(ListableBeanFactory appContext, Class<?> clazz, ParameterizedTypeReference<T> typeRef)", "class_method_signature": "SpringUtils.getBeans(ListableBeanFactory appContext, Class<?> clazz, ParameterizedTypeReference<T> typeRef)", "testcase": false, "constructor": false}, {"identifier": "getBeansAsMap", "parameters": "(ApplicationContext appContext, Class<T> clazz)", "modifiers": "public static", "return": "Map<String, T>", "signature": "Map<String, T> getBeansAsMap(ApplicationContext appContext, Class<T> clazz)", "full_signature": "public static Map<String, T> getBeansAsMap(ApplicationContext appContext, Class<T> clazz)", "class_method_signature": "SpringUtils.getBeansAsMap(ApplicationContext appContext, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getBean", "parameters": "(ListableBeanFactory appContext, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getBean(ListableBeanFactory appContext, Class<T> clazz)", "full_signature": "public static T getBean(ListableBeanFactory appContext, Class<T> clazz)", "class_method_signature": "SpringUtils.getBean(ListableBeanFactory appContext, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getBean", "parameters": "(ApplicationContext appContext, String beanName)", "modifiers": "public static", "return": "T", "signature": "T getBean(ApplicationContext appContext, String beanName)", "full_signature": "public static T getBean(ApplicationContext appContext, String beanName)", "class_method_signature": "SpringUtils.getBean(ApplicationContext appContext, String beanName)", "testcase": false, "constructor": false}, {"identifier": "getHighestOrder", "parameters": "(ApplicationContext appContext, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getHighestOrder(ApplicationContext appContext, Class<T> clazz)", "full_signature": "public static T getHighestOrder(ApplicationContext appContext, Class<T> clazz)", "class_method_signature": "SpringUtils.getHighestOrder(ApplicationContext appContext, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getLowestOrder", "parameters": "(ApplicationContext appContext, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getLowestOrder(ApplicationContext appContext, Class<T> clazz)", "full_signature": "public static T getLowestOrder(ApplicationContext appContext, Class<T> clazz)", "class_method_signature": "SpringUtils.getLowestOrder(ApplicationContext appContext, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "newApplicationConf", "parameters": "(String... locations)", "modifiers": "public static", "return": "PropertyPlaceholderConfigurer", "signature": "PropertyPlaceholderConfigurer newApplicationConf(String... locations)", "full_signature": "public static PropertyPlaceholderConfigurer newApplicationConf(String... locations)", "class_method_signature": "SpringUtils.newApplicationConf(String... locations)", "testcase": false, "constructor": false}, {"identifier": "newApplicationConf", "parameters": "(boolean searchSystemEnvironment, String... locations)", "modifiers": "public static", "return": "PropertyPlaceholderConfigurer", "signature": "PropertyPlaceholderConfigurer newApplicationConf(boolean searchSystemEnvironment, String... locations)", "full_signature": "public static PropertyPlaceholderConfigurer newApplicationConf(boolean searchSystemEnvironment, String... locations)", "class_method_signature": "SpringUtils.newApplicationConf(boolean searchSystemEnvironment, String... locations)", "testcase": false, "constructor": false}, {"identifier": "isSpringConfPlaceholder", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSpringConfPlaceholder(String value)", "full_signature": "public static boolean isSpringConfPlaceholder(String value)", "class_method_signature": "SpringUtils.isSpringConfPlaceholder(String value)", "testcase": false, "constructor": false}, {"identifier": "newPathResource", "parameters": "(String location)", "modifiers": "public static", "return": "Resource", "signature": "Resource newPathResource(String location)", "full_signature": "public static Resource newPathResource(String location)", "class_method_signature": "SpringUtils.newPathResource(String location)", "testcase": false, "constructor": false}, {"identifier": "newClassPathResource", "parameters": "(String location)", "modifiers": "public static", "return": "Resource", "signature": "Resource newClassPathResource(String location)", "full_signature": "public static Resource newClassPathResource(String location)", "class_method_signature": "SpringUtils.newClassPathResource(String location)", "testcase": false, "constructor": false}, {"identifier": "createProperties", "parameters": "(String location, boolean throwIfError)", "modifiers": "public static", "return": "Properties", "signature": "Properties createProperties(String location, boolean throwIfError)", "full_signature": "public static Properties createProperties(String location, boolean throwIfError)", "class_method_signature": "SpringUtils.createProperties(String location, boolean throwIfError)", "testcase": false, "constructor": false}, {"identifier": "loadAsJFishProperties", "parameters": "(String... classpaths)", "modifiers": "public static", "return": "JFishProperties", "signature": "JFishProperties loadAsJFishProperties(String... classpaths)", "full_signature": "public static JFishProperties loadAsJFishProperties(String... classpaths)", "class_method_signature": "SpringUtils.loadAsJFishProperties(String... classpaths)", "testcase": false, "constructor": false}, {"identifier": "createPropertiesBySptring", "parameters": "(String...classpaths)", "modifiers": "public static", "return": "PropertiesFactoryBean", "signature": "PropertiesFactoryBean createPropertiesBySptring(String...classpaths)", "full_signature": "public static PropertiesFactoryBean createPropertiesBySptring(String...classpaths)", "class_method_signature": "SpringUtils.createPropertiesBySptring(String...classpaths)", "testcase": false, "constructor": false}, {"identifier": "createPropertiesBySptring", "parameters": "(JFishProperties properties, String...classpaths)", "modifiers": "public static", "return": "PropertiesFactoryBean", "signature": "PropertiesFactoryBean createPropertiesBySptring(JFishProperties properties, String...classpaths)", "full_signature": "public static PropertiesFactoryBean createPropertiesBySptring(JFishProperties properties, String...classpaths)", "class_method_signature": "SpringUtils.createPropertiesBySptring(JFishProperties properties, String...classpaths)", "testcase": false, "constructor": false}, {"identifier": "findAutoWiringBeanFactory", "parameters": "(ApplicationContext context)", "modifiers": "public static", "return": "AutowireCapableBeanFactory", "signature": "AutowireCapableBeanFactory findAutoWiringBeanFactory(ApplicationContext context)", "full_signature": "public static AutowireCapableBeanFactory findAutoWiringBeanFactory(ApplicationContext context)", "class_method_signature": "SpringUtils.findAutoWiringBeanFactory(ApplicationContext context)", "testcase": false, "constructor": false}, {"identifier": "createBeanDefinition", "parameters": "(Class<?> beanClass, Object[] constructorArgs, Map<String, Object> properties)", "modifiers": "public static", "return": "BeanDefinition", "signature": "BeanDefinition createBeanDefinition(Class<?> beanClass, Object[] constructorArgs, Map<String, Object> properties)", "full_signature": "public static BeanDefinition createBeanDefinition(Class<?> beanClass, Object[] constructorArgs, Map<String, Object> properties)", "class_method_signature": "SpringUtils.createBeanDefinition(Class<?> beanClass, Object[] constructorArgs, Map<String, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "autowireBean", "parameters": "(ApplicationContext appContext, T existingBean)", "modifiers": "public static", "return": "void", "signature": "void autowireBean(ApplicationContext appContext, T existingBean)", "full_signature": "public static void autowireBean(ApplicationContext appContext, T existingBean)", "class_method_signature": "SpringUtils.autowireBean(ApplicationContext appContext, T existingBean)", "testcase": false, "constructor": false}, {"identifier": "injectAndInitialize", "parameters": "(ApplicationContext appContext, T bean)", "modifiers": "public static", "return": "void", "signature": "void injectAndInitialize(ApplicationContext appContext, T bean)", "full_signature": "public static void injectAndInitialize(ApplicationContext appContext, T bean)", "class_method_signature": "SpringUtils.injectAndInitialize(ApplicationContext appContext, T bean)", "testcase": false, "constructor": false}, {"identifier": "injectAndInitialize", "parameters": "(AutowireCapableBeanFactory acb, T bean, int autowireMode)", "modifiers": "public static", "return": "void", "signature": "void injectAndInitialize(AutowireCapableBeanFactory acb, T bean, int autowireMode)", "full_signature": "public static void injectAndInitialize(AutowireCapableBeanFactory acb, T bean, int autowireMode)", "class_method_signature": "SpringUtils.injectAndInitialize(AutowireCapableBeanFactory acb, T bean, int autowireMode)", "testcase": false, "constructor": false}, {"identifier": "initializeBean", "parameters": "(AutowireCapableBeanFactory acb, T bean)", "modifiers": "public static", "return": "void", "signature": "void initializeBean(AutowireCapableBeanFactory acb, T bean)", "full_signature": "public static void initializeBean(AutowireCapableBeanFactory acb, T bean)", "class_method_signature": "SpringUtils.initializeBean(AutowireCapableBeanFactory acb, T bean)", "testcase": false, "constructor": false}, {"identifier": "initializeBean", "parameters": "(ApplicationContext appContext, T bean)", "modifiers": "public static", "return": "void", "signature": "void initializeBean(ApplicationContext appContext, T bean)", "full_signature": "public static void initializeBean(ApplicationContext appContext, T bean)", "class_method_signature": "SpringUtils.initializeBean(ApplicationContext appContext, T bean)", "testcase": false, "constructor": false}, {"identifier": "registerBean", "parameters": "(BeanFactory context, Class<?> beanClass, Object...params)", "modifiers": "public static", "return": "T", "signature": "T registerBean(BeanFactory context, Class<?> beanClass, Object...params)", "full_signature": "public static T registerBean(BeanFactory context, Class<?> beanClass, Object...params)", "class_method_signature": "SpringUtils.registerBean(BeanFactory context, Class<?> beanClass, Object...params)", "testcase": false, "constructor": false}, {"identifier": "registerBean", "parameters": "(BeanFactory context, String beanName, Class<?> beanClass, Object...params)", "modifiers": "public static", "return": "T", "signature": "T registerBean(BeanFactory context, String beanName, Class<?> beanClass, Object...params)", "full_signature": "public static T registerBean(BeanFactory context, String beanName, Class<?> beanClass, Object...params)", "class_method_signature": "SpringUtils.registerBean(BeanFactory context, String beanName, Class<?> beanClass, Object...params)", "testcase": false, "constructor": false}, {"identifier": "registerBeanDefinition", "parameters": "(Object context, String beanName, Class<?> beanClass, Object...params)", "modifiers": "public static", "return": "BeanDefinition", "signature": "BeanDefinition registerBeanDefinition(Object context, String beanName, Class<?> beanClass, Object...params)", "full_signature": "public static BeanDefinition registerBeanDefinition(Object context, String beanName, Class<?> beanClass, Object...params)", "class_method_signature": "SpringUtils.registerBeanDefinition(Object context, String beanName, Class<?> beanClass, Object...params)", "testcase": false, "constructor": false}, {"identifier": "getSingletonBeanRegistry", "parameters": "(Object applicationContext)", "modifiers": "public static", "return": "SingletonBeanRegistry", "signature": "SingletonBeanRegistry getSingletonBeanRegistry(Object applicationContext)", "full_signature": "public static SingletonBeanRegistry getSingletonBeanRegistry(Object applicationContext)", "class_method_signature": "SpringUtils.getSingletonBeanRegistry(Object applicationContext)", "testcase": false, "constructor": false}, {"identifier": "getBeanDefinitionRegistry", "parameters": "(Object applicationContext)", "modifiers": "public static", "return": "BeanDefinitionRegistry", "signature": "BeanDefinitionRegistry getBeanDefinitionRegistry(Object applicationContext)", "full_signature": "public static BeanDefinitionRegistry getBeanDefinitionRegistry(Object applicationContext)", "class_method_signature": "SpringUtils.getBeanDefinitionRegistry(Object applicationContext)", "testcase": false, "constructor": false}, {"identifier": "getBeanDefinitionRegistry", "parameters": "(Object applicationContext, boolean throwIfNull)", "modifiers": "public static", "return": "BeanDefinitionRegistry", "signature": "BeanDefinitionRegistry getBeanDefinitionRegistry(Object applicationContext, boolean throwIfNull)", "full_signature": "public static BeanDefinitionRegistry getBeanDefinitionRegistry(Object applicationContext, boolean throwIfNull)", "class_method_signature": "SpringUtils.getBeanDefinitionRegistry(Object applicationContext, boolean throwIfNull)", "testcase": false, "constructor": false}, {"identifier": "registerSingleton", "parameters": "(BeanFactory applicationContext, String beanName, Object singletonObject)", "modifiers": "public static", "return": "void", "signature": "void registerSingleton(BeanFactory applicationContext, String beanName, Object singletonObject)", "full_signature": "public static void registerSingleton(BeanFactory applicationContext, String beanName, Object singletonObject)", "class_method_signature": "SpringUtils.registerSingleton(BeanFactory applicationContext, String beanName, Object singletonObject)", "testcase": false, "constructor": false}, {"identifier": "registerAndInitSingleton", "parameters": "(ApplicationContext applicationContext, String beanName, Object singletonObject)", "modifiers": "public static", "return": "void", "signature": "void registerAndInitSingleton(ApplicationContext applicationContext, String beanName, Object singletonObject)", "full_signature": "public static void registerAndInitSingleton(ApplicationContext applicationContext, String beanName, Object singletonObject)", "class_method_signature": "SpringUtils.registerAndInitSingleton(ApplicationContext applicationContext, String beanName, Object singletonObject)", "testcase": false, "constructor": false}, {"identifier": "classpath", "parameters": "(String path)", "modifiers": "public static", "return": "Resource", "signature": "Resource classpath(String path)", "full_signature": "public static Resource classpath(String path)", "class_method_signature": "SpringUtils.classpath(String path)", "testcase": false, "constructor": false}, {"identifier": "classpathStream", "parameters": "(String path)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream classpathStream(String path)", "full_signature": "public static InputStream classpathStream(String path)", "class_method_signature": "SpringUtils.classpathStream(String path)", "testcase": false, "constructor": false}, {"identifier": "newBeanWrapper", "parameters": "(Object obj)", "modifiers": "public static", "return": "BeanWrapper", "signature": "BeanWrapper newBeanWrapper(Object obj)", "full_signature": "public static BeanWrapper newBeanWrapper(Object obj)", "class_method_signature": "SpringUtils.newBeanWrapper(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newPropertyAccessor", "parameters": "(Object obj, boolean directFieldAccess)", "modifiers": "public static", "return": "ConfigurablePropertyAccessor", "signature": "ConfigurablePropertyAccessor newPropertyAccessor(Object obj, boolean directFieldAccess)", "full_signature": "public static ConfigurablePropertyAccessor newPropertyAccessor(Object obj, boolean directFieldAccess)", "class_method_signature": "SpringUtils.newPropertyAccessor(Object obj, boolean directFieldAccess)", "testcase": false, "constructor": false}, {"identifier": "newBeanMapWrapper", "parameters": "(Object obj, Object...listElementTypes)", "modifiers": "public static", "return": "BeanWrapper", "signature": "BeanWrapper newBeanMapWrapper(Object obj, Object...listElementTypes)", "full_signature": "public static BeanWrapper newBeanMapWrapper(Object obj, Object...listElementTypes)", "class_method_signature": "SpringUtils.newBeanMapWrapper(Object obj, Object...listElementTypes)", "testcase": false, "constructor": false}, {"identifier": "map2Bean", "parameters": "(Map<String, ?> props, Class<T> beanClass)", "modifiers": "public static", "return": "T", "signature": "T map2Bean(Map<String, ?> props, Class<T> beanClass)", "full_signature": "public static T map2Bean(Map<String, ?> props, Class<T> beanClass)", "class_method_signature": "SpringUtils.map2Bean(Map<String, ?> props, Class<T> beanClass)", "testcase": false, "constructor": false}, {"identifier": "setMap2Bean", "parameters": "(Map<String, ?> props, T bean)", "modifiers": "public static", "return": "T", "signature": "T setMap2Bean(Map<String, ?> props, T bean)", "full_signature": "public static T setMap2Bean(Map<String, ?> props, T bean)", "class_method_signature": "SpringUtils.setMap2Bean(Map<String, ?> props, T bean)", "testcase": false, "constructor": false}, {"identifier": "beansOfAnnotationIncludingAncestors", "parameters": "(ListableBeanFactory lbf, Class<? extends Annotation> annotationType)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> beansOfAnnotationIncludingAncestors(ListableBeanFactory lbf, Class<? extends Annotation> annotationType)", "full_signature": "public static Map<String, Object> beansOfAnnotationIncludingAncestors(ListableBeanFactory lbf, Class<? extends Annotation> annotationType)", "class_method_signature": "SpringUtils.beansOfAnnotationIncludingAncestors(ListableBeanFactory lbf, Class<? extends Annotation> annotationType)", "testcase": false, "constructor": false}, {"identifier": "getConstructorNames", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String[]", "signature": "String[] getConstructorNames(Class<?> clazz)", "full_signature": "public static String[] getConstructorNames(Class<?> clazz)", "class_method_signature": "SpringUtils.getConstructorNames(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getConstructorNames", "parameters": "(Class<?> clazz, int constructorIndex)", "modifiers": "public static", "return": "String[]", "signature": "String[] getConstructorNames(Class<?> clazz, int constructorIndex)", "full_signature": "public static String[] getConstructorNames(Class<?> clazz, int constructorIndex)", "class_method_signature": "SpringUtils.getConstructorNames(Class<?> clazz, int constructorIndex)", "testcase": false, "constructor": false}, {"identifier": "getConstructorNames", "parameters": "(Constructor<?> targetConstructor)", "modifiers": "public static", "return": "String[]", "signature": "String[] getConstructorNames(Constructor<?> targetConstructor)", "full_signature": "public static String[] getConstructorNames(Constructor<?> targetConstructor)", "class_method_signature": "SpringUtils.getConstructorNames(Constructor<?> targetConstructor)", "testcase": false, "constructor": false}, {"identifier": "getTargetClass", "parameters": "(Object candidate)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getTargetClass(Object candidate)", "full_signature": "public static Class<?> getTargetClass(Object candidate)", "class_method_signature": "SpringUtils.getTargetClass(Object candidate)", "testcase": false, "constructor": false}, {"identifier": "scanAnnotation", "parameters": "(ApplicationContext applicationContext, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "modifiers": "public static", "return": "boolean", "signature": "boolean scanAnnotation(ApplicationContext applicationContext, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "full_signature": "public static boolean scanAnnotation(ApplicationContext applicationContext, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "class_method_signature": "SpringUtils.scanAnnotation(ApplicationContext applicationContext, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "testcase": false, "constructor": false}, {"identifier": "scanAnnotation", "parameters": "(ListableBeanFactory beanFactory, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "modifiers": "public static", "return": "boolean", "signature": "boolean scanAnnotation(ListableBeanFactory beanFactory, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "full_signature": "public static boolean scanAnnotation(ListableBeanFactory beanFactory, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "class_method_signature": "SpringUtils.scanAnnotation(ListableBeanFactory beanFactory, Class<? extends Annotation> annoClass, BiConsumer<Object, Class<?>> consumer)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationAttributes", "parameters": "(AnnotatedTypeMetadata metadata, Class<?> annoType)", "modifiers": "public static", "return": "AnnotationAttributes", "signature": "AnnotationAttributes getAnnotationAttributes(AnnotatedTypeMetadata metadata, Class<?> annoType)", "full_signature": "public static AnnotationAttributes getAnnotationAttributes(AnnotatedTypeMetadata metadata, Class<?> annoType)", "class_method_signature": "SpringUtils.getAnnotationAttributes(AnnotatedTypeMetadata metadata, Class<?> annoType)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationAttributes", "parameters": "(Method method, Class<? extends Annotation> annoClass, boolean searchOnClass)", "modifiers": "public static", "return": "Optional<AnnotationAttributes>", "signature": "Optional<AnnotationAttributes> getAnnotationAttributes(Method method, Class<? extends Annotation> annoClass, boolean searchOnClass)", "full_signature": "public static Optional<AnnotationAttributes> getAnnotationAttributes(Method method, Class<? extends Annotation> annoClass, boolean searchOnClass)", "class_method_signature": "SpringUtils.getAnnotationAttributes(Method method, Class<? extends Annotation> annoClass, boolean searchOnClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationAttributes", "parameters": "(Method method, Class<? extends Annotation> annoClass)", "modifiers": "public static", "return": "Optional<AnnotationAttributes>", "signature": "Optional<AnnotationAttributes> getAnnotationAttributes(Method method, Class<? extends Annotation> annoClass)", "full_signature": "public static Optional<AnnotationAttributes> getAnnotationAttributes(Method method, Class<? extends Annotation> annoClass)", "class_method_signature": "SpringUtils.getAnnotationAttributes(Method method, Class<? extends Annotation> annoClass)", "testcase": false, "constructor": false}, {"identifier": "resolvePlaceholders", "parameters": "(Object applicationContext, String value)", "modifiers": "public static", "return": "String", "signature": "String resolvePlaceholders(Object applicationContext, String value)", "full_signature": "public static String resolvePlaceholders(Object applicationContext, String value)", "class_method_signature": "SpringUtils.resolvePlaceholders(Object applicationContext, String value)", "testcase": false, "constructor": false}, {"identifier": "resolvePlaceholders", "parameters": "(Object applicationContext, String value, boolean throwIfNotResolved)", "modifiers": "public static", "return": "String", "signature": "String resolvePlaceholders(Object applicationContext, String value, boolean throwIfNotResolved)", "full_signature": "public static String resolvePlaceholders(Object applicationContext, String value, boolean throwIfNotResolved)", "class_method_signature": "SpringUtils.resolvePlaceholders(Object applicationContext, String value, boolean throwIfNotResolved)", "testcase": false, "constructor": false}, {"identifier": "toBean", "parameters": "(Map<String, ?> propValues, Class<T> beanClass)", "modifiers": "public static", "return": "T", "signature": "T toBean(Map<String, ?> propValues, Class<T> beanClass)", "full_signature": "public static T toBean(Map<String, ?> propValues, Class<T> beanClass)", "class_method_signature": "SpringUtils.toBean(Map<String, ?> propValues, Class<T> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getMapToBean", "parameters": "()", "modifiers": "public static", "return": "MapToBeanConvertor", "signature": "MapToBeanConvertor getMapToBean()", "full_signature": "public static MapToBeanConvertor getMapToBean()", "class_method_signature": "SpringUtils.getMapToBean()", "testcase": false, "constructor": false}, {"identifier": "readClassPathFile", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String readClassPathFile(String path)", "full_signature": "public static String readClassPathFile(String path)", "class_method_signature": "SpringUtils.readClassPathFile(String path)", "testcase": false, "constructor": false}, {"identifier": "readClassPathFile", "parameters": "(String path, String charset)", "modifiers": "public static", "return": "String", "signature": "String readClassPathFile(String path, String charset)", "full_signature": "public static String readClassPathFile(String path, String charset)", "class_method_signature": "SpringUtils.readClassPathFile(String path, String charset)", "testcase": false, "constructor": false}, {"identifier": "readMultipartFile", "parameters": "(MultipartFile multipartFile)", "modifiers": "public static", "return": "String", "signature": "String readMultipartFile(MultipartFile multipartFile)", "full_signature": "public static String readMultipartFile(MultipartFile multipartFile)", "class_method_signature": "SpringUtils.readMultipartFile(MultipartFile multipartFile)", "testcase": false, "constructor": false}, {"identifier": "readMultipartFile", "parameters": "(MultipartFile multipartFile, String charset)", "modifiers": "public static", "return": "String", "signature": "String readMultipartFile(MultipartFile multipartFile, String charset)", "full_signature": "public static String readMultipartFile(MultipartFile multipartFile, String charset)", "class_method_signature": "SpringUtils.readMultipartFile(MultipartFile multipartFile, String charset)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(Resource resource)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getInputStream(Resource resource)", "full_signature": "public static InputStream getInputStream(Resource resource)", "class_method_signature": "SpringUtils.getInputStream(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "getBeanToMapConvertor", "parameters": "(String... excludeProperties)", "modifiers": "public static", "return": "BeanToMapConvertor", "signature": "BeanToMapConvertor getBeanToMapConvertor(String... excludeProperties)", "full_signature": "public static BeanToMapConvertor getBeanToMapConvertor(String... excludeProperties)", "class_method_signature": "SpringUtils.getBeanToMapConvertor(String... excludeProperties)", "testcase": false, "constructor": false}, {"identifier": "selectMethodsByParameterTypes", "parameters": "(Class<?> targetClass, String targetMethod, Method sourceMethod)", "modifiers": "public static", "return": "Set<Method>", "signature": "Set<Method> selectMethodsByParameterTypes(Class<?> targetClass, String targetMethod, Method sourceMethod)", "full_signature": "public static Set<Method> selectMethodsByParameterTypes(Class<?> targetClass, String targetMethod, Method sourceMethod)", "class_method_signature": "SpringUtils.selectMethodsByParameterTypes(Class<?> targetClass, String targetMethod, Method sourceMethod)", "testcase": false, "constructor": false}], "file": "core/modules/spring/src/main/java/org/onetwo/common/spring/SpringUtils.java"}, "focal_method": {"identifier": "toFlatMap", "parameters": "(Object obj)", "modifiers": "public static", "return": "Map<String, Object>", "body": "public static Map<String, Object> toFlatMap(Object obj) {\n\t\tMap<String, Object> map = Maps.newHashMap();\n\t\t\n\t\tConsumableValuePutter putter = new ConsumableValuePutter((k, v) -> {\n\t\t\tmap.put(k, v);\n\t\t});\n\t\t/*BEAN_TO_MAP_CONVERTOR.flatObject(\"\", obj, (k, v, ctx)->{\n\t\t\tObject value = v;\n\t\t\tTypeDescriptor sourceType = null;\n\t\t\tif(v.getClass()!=String.class){\n            \tField field = ctx.getField();\n            \tif(field!=null && (field.getAnnotation(DateTimeFormat.class)!=null || field.getAnnotation(NumberFormat.class)!=null) ){\n    \t            sourceType = new TypeDescriptor(field);\n            \t}\n            \tif(sourceType==null){\n    \t            sourceType = new TypeDescriptor(new Property(ctx.getSource().getClass(), ctx.getProperty().getReadMethod(), ctx.getProperty().getWriteMethod()));\n            \t}\n            \tvalue = getFormattingConversionService().convert(v, sourceType, TypeDescriptor.valueOf(String.class));\n            }\n        \tmap.put(k, value);\n\t\t});*/\n\t\tBEAN_TO_MAP_CONVERTOR.flatObject(\"\", obj, putter);\n\t\treturn map;\n\t}", "signature": "Map<String, Object> toFlatMap(Object obj)", "full_signature": "public static Map<String, Object> toFlatMap(Object obj)", "class_method_signature": "SpringUtils.toFlatMap(Object obj)", "testcase": false, "constructor": false, "invocations": ["newHashMap", "put", "flatObject"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}