{"test_class": {"identifier": "MainInstrumentMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MavenProject mavenProject;", "modifier": "private", "type": "MavenProject", "declarator": "mavenProject", "var_name": "mavenProject"}, {"original_string": "private MainInstrumentMojo fixture;", "modifier": "private", "type": "MainInstrumentMojo", "declarator": "fixture", "var_name": "fixture"}], "file": "maven-plugin/src/test/java/com/offbynull/coroutines/mavenplugin/MainInstrumentMojoTest.java"}, "test_case": {"identifier": "mustNotThrowExceptionWhenDirectoryDoesntExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mustNotThrowExceptionWhenDirectoryDoesntExist() throws Exception {\n        File mainDir = null;\n        try {\n            // create a folder and delete it right away\n            mainDir = Files.createTempDirectory(getClass().getSimpleName()).toFile();\n            File fakeFolder = new File(mainDir, \"DOESNOTEXIST\");\n            \n            // mock\n            Mockito.when(mavenProject.getCompileClasspathElements()).thenReturn(Collections.emptyList());\n            Build build = Mockito.mock(Build.class);\n            Mockito.when(mavenProject.getBuild()).thenReturn(build);\n            Mockito.when(build.getOutputDirectory()).thenReturn(fakeFolder.getAbsolutePath());\n            \n            // execute plugin\n            fixture.execute();\n        } finally {\n            if (mainDir != null) {\n                FileUtils.deleteDirectory(mainDir);\n            }\n        }\n    }", "signature": "void mustNotThrowExceptionWhenDirectoryDoesntExist()", "full_signature": "@Test public void mustNotThrowExceptionWhenDirectoryDoesntExist()", "class_method_signature": "MainInstrumentMojoTest.mustNotThrowExceptionWhenDirectoryDoesntExist()", "testcase": true, "constructor": false, "invocations": ["toFile", "createTempDirectory", "getSimpleName", "getClass", "thenReturn", "when", "getCompileClasspathElements", "emptyList", "mock", "thenReturn", "when", "getBuild", "thenReturn", "when", "getOutputDirectory", "getAbsolutePath", "execute", "deleteDirectory"]}, "focal_class": {"identifier": "MainInstrumentMojo", "superclass": "extends AbstractInstrumentMojo", "interfaces": "", "fields": [], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "MainInstrumentMojo.execute()", "testcase": false, "constructor": false}], "file": "maven-plugin/src/main/java/com/offbynull/coroutines/mavenplugin/MainInstrumentMojo.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        Log log = getLog();\n\n        File mainOutputFolder = new File(getProject().getBuild().getOutputDirectory());\n        if (!mainOutputFolder.isDirectory()) {\n            log.warn(\"Main folder doesn't exist -- nothing to instrument\");\n            return;\n        }\n        \n        List<String> classpath;\n        try {\n            classpath = getProject().getCompileClasspathElements();\n        } catch (DependencyResolutionRequiredException ex) {\n            throw new MojoExecutionException(\"Dependency resolution problem\", ex);\n        }\n\n        log.debug(\"Processing main output folder ... \");\n        instrumentPath(log, classpath, mainOutputFolder);\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "MainInstrumentMojo.execute()", "testcase": false, "constructor": false, "invocations": ["getLog", "getOutputDirectory", "getBuild", "getProject", "isDirectory", "warn", "getCompileClasspathElements", "getProject", "debug", "instrumentPath"]}, "repository": {"repo_id": 31940141, "url": "https://github.com/offbynull/coroutines", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 287, "size": 841, "license": "licensed"}}