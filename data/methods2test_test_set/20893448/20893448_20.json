{"test_class": {"identifier": "MimicProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MimicProcessor mimicProcessor;", "modifier": "private", "type": "MimicProcessor", "declarator": "mimicProcessor", "var_name": "mimicProcessor"}, {"original_string": "private CtClass src;", "modifier": "private", "type": "CtClass", "declarator": "src", "var_name": "src"}, {"original_string": "private CtClass dst;", "modifier": "private", "type": "CtClass", "declarator": "dst", "var_name": "dst"}], "file": "mimic-library/src/test/java/com/github/stephanenicolas/mimic/MimicProcessorTest.java"}, "test_case": {"identifier": "testShouldTransform_does_filter_correctly_a_class_with_no_mimic_annotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldTransform_does_filter_correctly_a_class_with_no_mimic_annotation()\n            throws Exception {\n        // GIVEN\n\n        // WHEN\n        boolean filter = mimicProcessor.shouldTransform(dst);\n\n        // THEN\n        assertFalse(filter);\n    }", "signature": "void testShouldTransform_does_filter_correctly_a_class_with_no_mimic_annotation()", "full_signature": "@Test public void testShouldTransform_does_filter_correctly_a_class_with_no_mimic_annotation()", "class_method_signature": "MimicProcessorTest.testShouldTransform_does_filter_correctly_a_class_with_no_mimic_annotation()", "testcase": true, "constructor": false, "invocations": ["shouldTransform", "assertFalse"]}, "focal_class": {"identifier": "MimicProcessor", "superclass": "extends ClassTransformer", "interfaces": "", "fields": [{"original_string": "@Inject\n    private MimicCreator mimic;", "modifier": "@Inject\n    private", "type": "MimicCreator", "declarator": "mimic", "var_name": "mimic"}], "methods": [{"identifier": "MimicProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " MimicProcessor()", "full_signature": "public  MimicProcessor()", "class_method_signature": "MimicProcessor.MimicProcessor()", "testcase": false, "constructor": true}, {"identifier": "applyTransformations", "parameters": "(final CtClass classToTransform)", "modifiers": "@Override protected", "return": "void", "signature": "void applyTransformations(final CtClass classToTransform)", "full_signature": "@Override protected void applyTransformations(final CtClass classToTransform)", "class_method_signature": "MimicProcessor.applyTransformations(final CtClass classToTransform)", "testcase": false, "constructor": false}, {"identifier": "shouldTransform", "parameters": "(CtClass candidateClass)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldTransform(CtClass candidateClass)", "full_signature": "@Override protected boolean shouldTransform(CtClass candidateClass)", "class_method_signature": "MimicProcessor.shouldTransform(CtClass candidateClass)", "testcase": false, "constructor": false}], "file": "mimic-library/src/main/java/com/github/stephanenicolas/mimic/MimicProcessor.java"}, "focal_method": {"identifier": "shouldTransform", "parameters": "(CtClass candidateClass)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n    protected boolean shouldTransform(CtClass candidateClass) throws Exception {\n        // no support for non-static inner classes in javassist.\n        if (candidateClass.getDeclaringClass() != null\n                && (candidateClass.getModifiers() & Modifier.STATIC) == 0) {\n            return false;\n        }\n        return candidateClass.hasAnnotation(Mimic.class);\n    }", "signature": "boolean shouldTransform(CtClass candidateClass)", "full_signature": "@Override protected boolean shouldTransform(CtClass candidateClass)", "class_method_signature": "MimicProcessor.shouldTransform(CtClass candidateClass)", "testcase": false, "constructor": false, "invocations": ["getDeclaringClass", "getModifiers", "hasAnnotation"]}, "repository": {"repo_id": 20893448, "url": "https://github.com/stephanenicolas/mimic", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 18, "size": 673, "license": "licensed"}}