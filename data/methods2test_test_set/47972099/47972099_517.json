{"test_class": {"identifier": "WrapperSetupHelperTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "flink-contrib/flink-storm/src/test/java/org/apache/flink/storm/wrappers/WrapperSetupHelperTest.java"}, "test_case": {"identifier": "testCreateTopologyContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateTopologyContext() {\n\t\tHashMap<String, Integer> dops = new HashMap<String, Integer>();\n\t\tdops.put(\"spout1\", 1);\n\t\tdops.put(\"spout2\", 3);\n\t\tdops.put(\"bolt1\", 1);\n\t\tdops.put(\"bolt2\", 2);\n\t\tdops.put(\"sink\", 1);\n\n\t\tHashMap<String, Integer> taskCounter = new HashMap<String, Integer>();\n\t\ttaskCounter.put(\"spout1\", 0);\n\t\ttaskCounter.put(\"spout2\", 0);\n\t\ttaskCounter.put(\"bolt1\", 0);\n\t\ttaskCounter.put(\"bolt2\", 0);\n\t\ttaskCounter.put(\"sink\", 0);\n\n\t\tHashMap<String, IComponent> operators = new HashMap<String, IComponent>();\n\t\toperators.put(\"spout1\", new TestDummySpout());\n\t\toperators.put(\"spout2\", new TestDummySpout());\n\t\toperators.put(\"bolt1\", new TestDummyBolt());\n\t\toperators.put(\"bolt2\", new TestDummyBolt());\n\t\toperators.put(\"sink\", new TestSink());\n\n\t\tTopologyBuilder builder = new TopologyBuilder();\n\n\t\tbuilder.setSpout(\"spout1\", (IRichSpout) operators.get(\"spout1\"), dops.get(\"spout1\"));\n\t\tbuilder.setSpout(\"spout2\", (IRichSpout) operators.get(\"spout2\"), dops.get(\"spout2\"));\n\t\tbuilder.setBolt(\"bolt1\", (IRichBolt) operators.get(\"bolt1\"), dops.get(\"bolt1\")).shuffleGrouping(\"spout1\");\n\t\tbuilder.setBolt(\"bolt2\", (IRichBolt) operators.get(\"bolt2\"), dops.get(\"bolt2\")).allGrouping(\"spout2\");\n\t\tbuilder.setBolt(\"sink\", (IRichBolt) operators.get(\"sink\"), dops.get(\"sink\"))\n\t\t\t\t.shuffleGrouping(\"bolt1\", TestDummyBolt.groupingStreamId)\n\t\t\t\t.shuffleGrouping(\"bolt1\", TestDummyBolt.shuffleStreamId)\n\t\t\t\t.shuffleGrouping(\"bolt2\", TestDummyBolt.groupingStreamId)\n\t\t\t\t.shuffleGrouping(\"bolt2\", TestDummyBolt.shuffleStreamId);\n\n\t\tLocalCluster cluster = new LocalCluster();\n\t\tConfig c = new Config();\n\t\tc.setNumAckers(0);\n\t\tcluster.submitTopology(\"test\", c, builder.createTopology());\n\n\t\twhile (TestSink.result.size() != 8) {\n\t\t\tUtils.sleep(100);\n\t\t}\n\t\tcluster.shutdown();\n\n\t\tfinal FlinkTopology flinkBuilder = FlinkTopology.createTopology(builder);\n\t\tStormTopology stormTopology = flinkBuilder.getStormTopology();\n\n\t\tSet<Integer> taskIds = new HashSet<Integer>();\n\n\t\tfor (TopologyContext expectedContext : TestSink.result) {\n\t\t\tfinal String thisComponentId = expectedContext.getThisComponentId();\n\t\t\tint index = taskCounter.get(thisComponentId);\n\n\t\t\tStreamingRuntimeContext context = mock(StreamingRuntimeContext.class);\n\t\t\twhen(context.getTaskName()).thenReturn(thisComponentId);\n\t\t\twhen(context.getNumberOfParallelSubtasks()).thenReturn(dops.get(thisComponentId));\n\t\t\twhen(context.getIndexOfThisSubtask()).thenReturn(index);\n\t\t\ttaskCounter.put(thisComponentId, ++index);\n\n\t\t\tConfig stormConfig = new Config();\n\t\t\tstormConfig.put(WrapperSetupHelper.TOPOLOGY_NAME, \"test\");\n\n\t\t\tTopologyContext topologyContext = WrapperSetupHelper.createTopologyContext(context,\n\t\t\t\t\toperators.get(thisComponentId), thisComponentId, stormTopology, stormConfig);\n\n\t\t\tComponentCommon expcetedCommon = expectedContext.getComponentCommon(thisComponentId);\n\t\t\tComponentCommon common = topologyContext.getComponentCommon(thisComponentId);\n\n\t\t\tAssert.assertNull(topologyContext.getCodeDir());\n\t\t\tAssert.assertNull(common.get_json_conf());\n\t\t\tAssert.assertNull(topologyContext.getExecutorData(null));\n\t\t\tAssert.assertNull(topologyContext.getPIDDir());\n\t\t\tAssert.assertNull(topologyContext.getResource(null));\n\t\t\tAssert.assertNull(topologyContext.getSharedExecutor());\n\t\t\tAssert.assertNull(expectedContext.getTaskData(null));\n\t\t\tAssert.assertNull(topologyContext.getThisWorkerPort());\n\n\t\t\tAssert.assertTrue(expectedContext.getStormId().startsWith(topologyContext.getStormId()));\n\n\t\t\tAssert.assertEquals(expcetedCommon.get_inputs(), common.get_inputs());\n\t\t\tAssert.assertEquals(expcetedCommon.get_parallelism_hint(), common.get_parallelism_hint());\n\t\t\tAssert.assertEquals(expcetedCommon.get_streams(), common.get_streams());\n\t\t\tAssert.assertEquals(expectedContext.getComponentIds(), topologyContext.getComponentIds());\n\t\t\tAssert.assertEquals(expectedContext.getComponentStreams(thisComponentId),\n\t\t\t\t\ttopologyContext.getComponentStreams(thisComponentId));\n\t\t\tAssert.assertEquals(thisComponentId, topologyContext.getThisComponentId());\n\t\t\tAssert.assertEquals(expectedContext.getThisSources(), topologyContext.getThisSources());\n\t\t\tAssert.assertEquals(expectedContext.getThisStreams(), topologyContext.getThisStreams());\n\t\t\tAssert.assertEquals(expectedContext.getThisTargets(), topologyContext.getThisTargets());\n\t\t\tAssert.assertEquals(0, topologyContext.getThisWorkerTasks().size());\n\n\t\t\tfor (int taskId : topologyContext.getComponentTasks(thisComponentId)) {\n\t\t\t\tAssert.assertEquals(thisComponentId, topologyContext.getComponentId(taskId));\n\t\t\t}\n\n\t\t\tfor (String componentId : expectedContext.getComponentIds()) {\n\t\t\t\tAssert.assertEquals(expectedContext.getSources(componentId),\n\t\t\t\t\t\ttopologyContext.getSources(componentId));\n\t\t\t\tAssert.assertEquals(expectedContext.getTargets(componentId),\n\t\t\t\t\t\ttopologyContext.getTargets(componentId));\n\n\t\t\t\tfor (String streamId : expectedContext.getComponentStreams(componentId)) {\n\t\t\t\t\tAssert.assertEquals(\n\t\t\t\t\t\t\texpectedContext.getComponentOutputFields(componentId, streamId).toList(),\n\t\t\t\t\t\t\ttopologyContext.getComponentOutputFields(componentId, streamId).toList());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (String streamId : expectedContext.getThisStreams()) {\n\t\t\t\tAssert.assertEquals(expectedContext.getThisOutputFields(streamId).toList(),\n\t\t\t\t\t\ttopologyContext.getThisOutputFields(streamId).toList());\n\t\t\t}\n\n\t\t\tHashMap<Integer, String> taskToComponents = new HashMap<Integer, String>();\n\t\t\tSet<Integer> allTaskIds = new HashSet<Integer>();\n\t\t\tfor (String componentId : expectedContext.getComponentIds()) {\n\t\t\t\tList<Integer> possibleTasks = expectedContext.getComponentTasks(componentId);\n\t\t\t\tList<Integer> tasks = topologyContext.getComponentTasks(componentId);\n\n\t\t\t\tIterator<Integer> p_it = possibleTasks.iterator();\n\t\t\t\tIterator<Integer> t_it = tasks.iterator();\n\t\t\t\twhile(p_it.hasNext()) {\n\t\t\t\t\tAssert.assertTrue(t_it.hasNext());\n\t\t\t\t\tAssert.assertNull(taskToComponents.put(p_it.next(), componentId));\n\t\t\t\t\tAssert.assertTrue(allTaskIds.add(t_it.next()));\n\t\t\t\t}\n\t\t\t\tAssert.assertFalse(t_it.hasNext());\n\t\t\t}\n\n\t\t\tAssert.assertEquals(taskToComponents, expectedContext.getTaskToComponent());\n\t\t\tAssert.assertTrue(taskIds.add(topologyContext.getThisTaskId()));\n\n\t\t\ttry {\n\t\t\t\ttopologyContext.getHooks();\n\t\t\t\tAssert.fail();\n\t\t\t} catch (UnsupportedOperationException e) { /* expected */ }\n\n\t\t\ttry {\n\t\t\t\ttopologyContext.getRegisteredMetricByName(null);\n\t\t\t\tAssert.fail();\n\t\t\t} catch (UnsupportedOperationException e) { /* expected */ }\n\t\t}\n\t}", "signature": "void testCreateTopologyContext()", "full_signature": "@Test public void testCreateTopologyContext()", "class_method_signature": "WrapperSetupHelperTest.testCreateTopologyContext()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "setSpout", "get", "get", "setSpout", "get", "get", "shuffleGrouping", "setBolt", "get", "get", "allGrouping", "setBolt", "get", "get", "shuffleGrouping", "shuffleGrouping", "shuffleGrouping", "shuffleGrouping", "setBolt", "get", "get", "setNumAckers", "submitTopology", "createTopology", "size", "sleep", "shutdown", "createTopology", "getStormTopology", "getThisComponentId", "get", "mock", "thenReturn", "when", "getTaskName", "thenReturn", "when", "getNumberOfParallelSubtasks", "get", "thenReturn", "when", "getIndexOfThisSubtask", "put", "put", "createTopologyContext", "get", "getComponentCommon", "getComponentCommon", "assertNull", "getCodeDir", "assertNull", "get_json_conf", "assertNull", "getExecutorData", "assertNull", "getPIDDir", "assertNull", "getResource", "assertNull", "getSharedExecutor", "assertNull", "getTaskData", "assertNull", "getThisWorkerPort", "assertTrue", "startsWith", "getStormId", "getStormId", "assertEquals", "get_inputs", "get_inputs", "assertEquals", "get_parallelism_hint", "get_parallelism_hint", "assertEquals", "get_streams", "get_streams", "assertEquals", "getComponentIds", "getComponentIds", "assertEquals", "getComponentStreams", "getComponentStreams", "assertEquals", "getThisComponentId", "assertEquals", "getThisSources", "getThisSources", "assertEquals", "getThisStreams", "getThisStreams", "assertEquals", "getThisTargets", "getThisTargets", "assertEquals", "size", "getThisWorkerTasks", "getComponentTasks", "assertEquals", "getComponentId", "getComponentIds", "assertEquals", "getSources", "getSources", "assertEquals", "getTargets", "getTargets", "getComponentStreams", "assertEquals", "toList", "getComponentOutputFields", "toList", "getComponentOutputFields", "getThisStreams", "assertEquals", "toList", "getThisOutputFields", "toList", "getThisOutputFields", "getComponentIds", "getComponentTasks", "getComponentTasks", "iterator", "iterator", "hasNext", "assertTrue", "hasNext", "assertNull", "put", "next", "assertTrue", "add", "next", "assertFalse", "hasNext", "assertEquals", "getTaskToComponent", "assertTrue", "add", "getThisTaskId", "getHooks", "fail", "getRegisteredMetricByName", "fail"]}, "focal_class": {"identifier": "WrapperSetupHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static String TOPOLOGY_NAME = \"storm.topology.name\";", "modifier": "final static", "type": "String", "declarator": "TOPOLOGY_NAME = \"storm.topology.name\"", "var_name": "TOPOLOGY_NAME"}, {"original_string": "private static int tid;", "modifier": "private static", "type": "int", "declarator": "tid", "var_name": "tid"}], "methods": [{"identifier": "getNumberOfAttributes", "parameters": "(final IComponent spoutOrBolt,\n\t\t\tfinal Collection<String> rawOutputs)", "modifiers": "static", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getNumberOfAttributes(final IComponent spoutOrBolt,\n\t\t\tfinal Collection<String> rawOutputs)", "full_signature": "static HashMap<String, Integer> getNumberOfAttributes(final IComponent spoutOrBolt,\n\t\t\tfinal Collection<String> rawOutputs)", "class_method_signature": "WrapperSetupHelper.getNumberOfAttributes(final IComponent spoutOrBolt,\n\t\t\tfinal Collection<String> rawOutputs)", "testcase": false, "constructor": false}, {"identifier": "createTopologyContext", "parameters": "(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static synchronized", "return": "TopologyContext", "signature": "TopologyContext createTopologyContext(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static synchronized TopologyContext createTopologyContext(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "class_method_signature": "WrapperSetupHelper.createTopologyContext(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "testcase": false, "constructor": false}, {"identifier": "processSingleOperator", "parameters": "(final String componentId,\n\t\t\tfinal ComponentCommon common, final String operatorName, final int index,\n\t\t\tfinal int dop, final Map<Integer, String> taskToComponents,\n\t\t\tfinal Map<String, List<Integer>> componentToSortedTasks,\n\t\t\tfinal Map<String, Map<String, Fields>> componentToStreamToFields)", "modifiers": "private static", "return": "Integer", "signature": "Integer processSingleOperator(final String componentId,\n\t\t\tfinal ComponentCommon common, final String operatorName, final int index,\n\t\t\tfinal int dop, final Map<Integer, String> taskToComponents,\n\t\t\tfinal Map<String, List<Integer>> componentToSortedTasks,\n\t\t\tfinal Map<String, Map<String, Fields>> componentToStreamToFields)", "full_signature": "private static Integer processSingleOperator(final String componentId,\n\t\t\tfinal ComponentCommon common, final String operatorName, final int index,\n\t\t\tfinal int dop, final Map<Integer, String> taskToComponents,\n\t\t\tfinal Map<String, List<Integer>> componentToSortedTasks,\n\t\t\tfinal Map<String, Map<String, Fields>> componentToStreamToFields)", "class_method_signature": "WrapperSetupHelper.processSingleOperator(final String componentId,\n\t\t\tfinal ComponentCommon common, final String operatorName, final int index,\n\t\t\tfinal int dop, final Map<Integer, String> taskToComponents,\n\t\t\tfinal Map<String, List<Integer>> componentToSortedTasks,\n\t\t\tfinal Map<String, Map<String, Fields>> componentToStreamToFields)", "testcase": false, "constructor": false}], "file": "flink-contrib/flink-storm/src/main/java/org/apache/flink/storm/wrappers/WrapperSetupHelper.java"}, "focal_method": {"identifier": "createTopologyContext", "parameters": "(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static synchronized", "return": "TopologyContext", "body": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\tstatic synchronized TopologyContext createTopologyContext(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig) {\n\n\t\tfinal int dop = context.getNumberOfParallelSubtasks();\n\n\t\tfinal Map<Integer, String> taskToComponents = new HashMap<Integer, String>();\n\t\tfinal Map<String, List<Integer>> componentToSortedTasks = new HashMap<String, List<Integer>>();\n\t\tfinal Map<String, Map<String, Fields>> componentToStreamToFields = new HashMap<String, Map<String, Fields>>();\n\t\tString stormId = (String) stormConfig.get(TOPOLOGY_NAME);\n\t\tString codeDir = null; // not supported\n\t\tString pidDir = null; // not supported\n\t\tInteger taskId = -1;\n\t\tInteger workerPort = null; // not supported\n\t\tList<Integer> workerTasks = new ArrayList<Integer>();\n\t\tfinal Map<String, Object> defaultResources = new HashMap<String, Object>();\n\t\tfinal Map<String, Object> userResources = new HashMap<String, Object>();\n\t\tfinal Map<String, Object> executorData = new HashMap<String, Object>();\n\t\tfinal Map registeredMetrics = new HashMap();\n\t\tAtom openOrPrepareWasCalled = null;\n\n\t\tif (stormTopology == null) {\n\t\t\t// embedded mode\n\t\t\tComponentCommon common = new ComponentCommon();\n\t\t\tcommon.set_parallelism_hint(dop);\n\n\t\t\tHashMap<String, SpoutSpec> spouts = new HashMap<String, SpoutSpec>();\n\t\t\tHashMap<String, Bolt> bolts = new HashMap<String, Bolt>();\n\t\t\tif (spoutOrBolt instanceof IRichSpout) {\n\t\t\t\tspouts.put(operatorName, new SpoutSpec(null, common));\n\t\t\t} else {\n\t\t\t\tassert (spoutOrBolt instanceof IRichBolt);\n\t\t\t\tbolts.put(operatorName, new Bolt(null, common));\n\t\t\t}\n\t\t\tstormTopology = new StormTopology(spouts, bolts, new HashMap<String, StateSpoutSpec>());\n\n\t\t\tList<Integer> sortedTasks = new ArrayList<Integer>(dop);\n\t\t\tfor (int i = 1; i <= dop; ++i) {\n\t\t\t\ttaskToComponents.put(i, operatorName);\n\t\t\t\tsortedTasks.add(i);\n\t\t\t}\n\t\t\tcomponentToSortedTasks.put(operatorName, sortedTasks);\n\n\t\t\tSetupOutputFieldsDeclarer declarer = new SetupOutputFieldsDeclarer();\n\t\t\tspoutOrBolt.declareOutputFields(declarer);\n\t\t\tcomponentToStreamToFields.put(operatorName, declarer.outputStreams);\n\t\t} else {\n\t\t\t// whole topology is built (i.e. FlinkTopology is used)\n\t\t\tMap<String, SpoutSpec> spouts = stormTopology.get_spouts();\n\t\t\tMap<String, Bolt> bolts = stormTopology.get_bolts();\n\t\t\tMap<String, StateSpoutSpec> stateSpouts = stormTopology.get_state_spouts();\n\n\t\t\ttid = 1;\n\n\t\t\tfor (Entry<String, SpoutSpec> spout : spouts.entrySet()) {\n\t\t\t\tInteger rc = processSingleOperator(spout.getKey(), spout.getValue().get_common(),\n\t\t\t\t\t\toperatorName, context.getIndexOfThisSubtask(), dop, taskToComponents,\n\t\t\t\t\t\tcomponentToSortedTasks, componentToStreamToFields);\n\t\t\t\tif (rc != null) {\n\t\t\t\t\ttaskId = rc;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Entry<String, Bolt> bolt : bolts.entrySet()) {\n\t\t\t\tInteger rc = processSingleOperator(bolt.getKey(), bolt.getValue().get_common(),\n\t\t\t\t\t\toperatorName, context.getIndexOfThisSubtask(), dop, taskToComponents,\n\t\t\t\t\t\tcomponentToSortedTasks, componentToStreamToFields);\n\t\t\t\tif (rc != null) {\n\t\t\t\t\ttaskId = rc;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Entry<String, StateSpoutSpec> stateSpout : stateSpouts.entrySet()) {\n\t\t\t\tInteger rc = processSingleOperator(stateSpout.getKey(), stateSpout\n\t\t\t\t\t\t.getValue().get_common(), operatorName, context.getIndexOfThisSubtask(),\n\t\t\t\t\t\tdop, taskToComponents, componentToSortedTasks, componentToStreamToFields);\n\t\t\t\tif (rc != null) {\n\t\t\t\t\ttaskId = rc;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassert(taskId != null);\n\t\t}\n\n\t\tif (!stormConfig.containsKey(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)) {\n\t\t\tstormConfig.put(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS, 30); // Storm default value\n\t\t}\n\n\t\treturn new FlinkTopologyContext(stormTopology, stormConfig, taskToComponents,\n\t\t\t\tcomponentToSortedTasks, componentToStreamToFields, stormId, codeDir, pidDir,\n\t\t\t\ttaskId, workerPort, workerTasks, defaultResources, userResources, executorData,\n\t\t\t\tregisteredMetrics, openOrPrepareWasCalled);\n\t}", "signature": "TopologyContext createTopologyContext(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) static synchronized TopologyContext createTopologyContext(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "class_method_signature": "WrapperSetupHelper.createTopologyContext(\n\t\t\tfinal StreamingRuntimeContext context, final IComponent spoutOrBolt,\n\t\t\tfinal String operatorName, StormTopology stormTopology, final Map stormConfig)", "testcase": false, "constructor": false, "invocations": ["getNumberOfParallelSubtasks", "get", "set_parallelism_hint", "put", "put", "put", "add", "put", "declareOutputFields", "put", "get_spouts", "get_bolts", "get_state_spouts", "entrySet", "processSingleOperator", "getKey", "get_common", "getValue", "getIndexOfThisSubtask", "entrySet", "processSingleOperator", "getKey", "get_common", "getValue", "getIndexOfThisSubtask", "entrySet", "processSingleOperator", "getKey", "get_common", "getValue", "getIndexOfThisSubtask", "containsKey", "put"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}