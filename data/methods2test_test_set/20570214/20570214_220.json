{"test_class": {"identifier": "AesGcmHkdfStreamingKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AesGcmHkdfStreamingKeyManager manager = new AesGcmHkdfStreamingKeyManager();", "modifier": "private final", "type": "AesGcmHkdfStreamingKeyManager", "declarator": "manager = new AesGcmHkdfStreamingKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<AesGcmHkdfStreamingKeyFormat, AesGcmHkdfStreamingKey>\n      factory = manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<AesGcmHkdfStreamingKeyFormat, AesGcmHkdfStreamingKey>", "declarator": "factory = manager.keyFactory()", "var_name": "factory"}], "file": "java_src/src/test/java/com/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManagerTest.java"}, "test_case": {"identifier": "testAes128GcmHkdf1MBTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAes128GcmHkdf1MBTemplate() throws Exception {\n    KeyTemplate template = AesGcmHkdfStreamingKeyManager.aes128GcmHkdf1MBTemplate();\n    assertThat(template.getTypeUrl()).isEqualTo(new AesGcmHkdfStreamingKeyManager().getKeyType());\n    assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.RAW);\n    AesGcmHkdfStreamingKeyFormat format =\n        AesGcmHkdfStreamingKeyFormat.parseFrom(\n            template.getValue(), ExtensionRegistryLite.getEmptyRegistry());\n\n    assertThat(format.getKeySize()).isEqualTo(16);\n    assertThat(format.getParams().getDerivedKeySize()).isEqualTo(16);\n    assertThat(format.getParams().getHkdfHashType()).isEqualTo(HashType.SHA256);\n    assertThat(format.getParams().getCiphertextSegmentSize()).isEqualTo(1 << 20);\n  }", "signature": "void testAes128GcmHkdf1MBTemplate()", "full_signature": "@Test public void testAes128GcmHkdf1MBTemplate()", "class_method_signature": "AesGcmHkdfStreamingKeyManagerTest.testAes128GcmHkdf1MBTemplate()", "testcase": true, "constructor": false, "invocations": ["aes128GcmHkdf1MBTemplate", "isEqualTo", "assertThat", "getTypeUrl", "getKeyType", "isEqualTo", "assertThat", "getOutputPrefixType", "parseFrom", "getValue", "getEmptyRegistry", "isEqualTo", "assertThat", "getKeySize", "isEqualTo", "assertThat", "getDerivedKeySize", "getParams", "isEqualTo", "assertThat", "getHkdfHashType", "getParams", "isEqualTo", "assertThat", "getCiphertextSegmentSize", "getParams"]}, "focal_class": {"identifier": "AesGcmHkdfStreamingKeyManager", "superclass": "extends KeyTypeManager<AesGcmHkdfStreamingKey>", "interfaces": "", "fields": [{"original_string": "private static final int NONCE_PREFIX_IN_BYTES = 7;", "modifier": "private static final", "type": "int", "declarator": "NONCE_PREFIX_IN_BYTES = 7", "var_name": "NONCE_PREFIX_IN_BYTES"}, {"original_string": "private static final int TAG_SIZE_IN_BYTES = 16;", "modifier": "private static final", "type": "int", "declarator": "TAG_SIZE_IN_BYTES = 16", "var_name": "TAG_SIZE_IN_BYTES"}], "methods": [{"identifier": "AesGcmHkdfStreamingKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " AesGcmHkdfStreamingKeyManager()", "full_signature": "  AesGcmHkdfStreamingKeyManager()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.AesGcmHkdfStreamingKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(AesGcmHkdfStreamingKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(AesGcmHkdfStreamingKey key)", "full_signature": "@Override public void validateKey(AesGcmHkdfStreamingKey key)", "class_method_signature": "AesGcmHkdfStreamingKeyManager.validateKey(AesGcmHkdfStreamingKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "AesGcmHkdfStreamingKey", "signature": "AesGcmHkdfStreamingKey parseKey(ByteString byteString)", "full_signature": "@Override public AesGcmHkdfStreamingKey parseKey(ByteString byteString)", "class_method_signature": "AesGcmHkdfStreamingKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesGcmHkdfStreamingKeyFormat, AesGcmHkdfStreamingKey>", "signature": "KeyFactory<AesGcmHkdfStreamingKeyFormat, AesGcmHkdfStreamingKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesGcmHkdfStreamingKeyFormat, AesGcmHkdfStreamingKey> keyFactory()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "validateParams", "parameters": "(AesGcmHkdfStreamingParams params)", "modifiers": "private static", "return": "void", "signature": "void validateParams(AesGcmHkdfStreamingParams params)", "full_signature": "private static void validateParams(AesGcmHkdfStreamingParams params)", "class_method_signature": "AesGcmHkdfStreamingKeyManager.validateParams(AesGcmHkdfStreamingParams params)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "AesGcmHkdfStreamingKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "aes128GcmHkdf4KBTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes128GcmHkdf4KBTemplate()", "full_signature": "public static final KeyTemplate aes128GcmHkdf4KBTemplate()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.aes128GcmHkdf4KBTemplate()", "testcase": false, "constructor": false}, {"identifier": "aes128GcmHkdf1MBTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes128GcmHkdf1MBTemplate()", "full_signature": "public static final KeyTemplate aes128GcmHkdf1MBTemplate()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.aes128GcmHkdf1MBTemplate()", "testcase": false, "constructor": false}, {"identifier": "aes256GcmHkdf4KBTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes256GcmHkdf4KBTemplate()", "full_signature": "public static final KeyTemplate aes256GcmHkdf4KBTemplate()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.aes256GcmHkdf4KBTemplate()", "testcase": false, "constructor": false}, {"identifier": "aes256GcmHkdf1MBTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes256GcmHkdf1MBTemplate()", "full_signature": "public static final KeyTemplate aes256GcmHkdf1MBTemplate()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.aes256GcmHkdf1MBTemplate()", "testcase": false, "constructor": false}, {"identifier": "createKeyTemplate", "parameters": "(\n      int mainKeySize, HashType hkdfHashType, int derivedKeySize, int ciphertextSegmentSize)", "modifiers": "private static", "return": "KeyTemplate", "signature": "KeyTemplate createKeyTemplate(\n      int mainKeySize, HashType hkdfHashType, int derivedKeySize, int ciphertextSegmentSize)", "full_signature": "private static KeyTemplate createKeyTemplate(\n      int mainKeySize, HashType hkdfHashType, int derivedKeySize, int ciphertextSegmentSize)", "class_method_signature": "AesGcmHkdfStreamingKeyManager.createKeyTemplate(\n      int mainKeySize, HashType hkdfHashType, int derivedKeySize, int ciphertextSegmentSize)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/streamingaead/AesGcmHkdfStreamingKeyManager.java"}, "focal_method": {"identifier": "aes128GcmHkdf1MBTemplate", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "body": "public static final KeyTemplate aes128GcmHkdf1MBTemplate() {\n    return createKeyTemplate(16, HashType.SHA256, 16, 1 << 20);\n  }", "signature": "KeyTemplate aes128GcmHkdf1MBTemplate()", "full_signature": "public static final KeyTemplate aes128GcmHkdf1MBTemplate()", "class_method_signature": "AesGcmHkdfStreamingKeyManager.aes128GcmHkdf1MBTemplate()", "testcase": false, "constructor": false, "invocations": ["createKeyTemplate"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}