{"test_class": {"identifier": "WindowedStreamPartitionerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"topic\";", "modifier": "private", "type": "String", "declarator": "topicName = \"topic\"", "var_name": "topicName"}, {"original_string": "private IntegerSerializer intSerializer = new IntegerSerializer();", "modifier": "private", "type": "IntegerSerializer", "declarator": "intSerializer = new IntegerSerializer()", "var_name": "intSerializer"}, {"original_string": "private StringSerializer stringSerializer = new StringSerializer();", "modifier": "private", "type": "StringSerializer", "declarator": "stringSerializer = new StringSerializer()", "var_name": "stringSerializer"}, {"original_string": "private List<PartitionInfo> infos = Arrays.asList(\n            new PartitionInfo(topicName, 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 3, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 4, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 5, Node.noNode(), new Node[0], new Node[0])\n    );", "modifier": "private", "type": "List<PartitionInfo>", "declarator": "infos = Arrays.asList(\n            new PartitionInfo(topicName, 0, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 1, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 2, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 3, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 4, Node.noNode(), new Node[0], new Node[0]),\n            new PartitionInfo(topicName, 5, Node.noNode(), new Node[0], new Node[0])\n    )", "var_name": "infos"}, {"original_string": "private Cluster cluster = new Cluster(Collections.singletonList(Node.noNode()), infos, Collections.<String>emptySet());", "modifier": "private", "type": "Cluster", "declarator": "cluster = new Cluster(Collections.singletonList(Node.noNode()), infos, Collections.<String>emptySet())", "var_name": "cluster"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/WindowedStreamPartitionerTest.java"}, "test_case": {"identifier": "testCopartitioning", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCopartitioning() {\n\n        Random rand = new Random();\n\n        DefaultPartitioner defaultPartitioner = new DefaultPartitioner();\n\n        WindowedSerializer<Integer> windowedSerializer = new WindowedSerializer<>(intSerializer);\n        WindowedStreamPartitioner<Integer, String> streamPartitioner = new WindowedStreamPartitioner<>(windowedSerializer);\n\n        for (int k = 0; k < 10; k++) {\n            Integer key = rand.nextInt();\n            byte[] keyBytes = intSerializer.serialize(topicName, key);\n\n            String value = key.toString();\n            byte[] valueBytes = stringSerializer.serialize(topicName, value);\n\n            Integer expected = defaultPartitioner.partition(\"topic\", key, keyBytes, value, valueBytes, cluster);\n\n            for (int w = 0; w < 10; w++) {\n                TimeWindow window = new TimeWindow(10 * w, 20 * w);\n\n                Windowed<Integer> windowedKey = new Windowed<>(key, window);\n                Integer actual = streamPartitioner.partition(windowedKey, value, infos.size());\n\n                assertEquals(expected, actual);\n            }\n        }\n    }", "signature": "void testCopartitioning()", "full_signature": "@Test public void testCopartitioning()", "class_method_signature": "WindowedStreamPartitionerTest.testCopartitioning()", "testcase": true, "constructor": false, "invocations": ["nextInt", "serialize", "toString", "serialize", "partition", "partition", "size", "assertEquals"]}, "focal_class": {"identifier": "WindowedStreamPartitioner", "superclass": "", "interfaces": "implements StreamPartitioner<Windowed<K>, V>", "fields": [{"original_string": "private final WindowedSerializer<K> serializer;", "modifier": "private final", "type": "WindowedSerializer<K>", "declarator": "serializer", "var_name": "serializer"}], "methods": [{"identifier": "WindowedStreamPartitioner", "parameters": "(WindowedSerializer<K> serializer)", "modifiers": "public", "return": "", "signature": " WindowedStreamPartitioner(WindowedSerializer<K> serializer)", "full_signature": "public  WindowedStreamPartitioner(WindowedSerializer<K> serializer)", "class_method_signature": "WindowedStreamPartitioner.WindowedStreamPartitioner(WindowedSerializer<K> serializer)", "testcase": false, "constructor": true}, {"identifier": "partition", "parameters": "(Windowed<K> windowedKey, V value, int numPartitions)", "modifiers": "public", "return": "Integer", "signature": "Integer partition(Windowed<K> windowedKey, V value, int numPartitions)", "full_signature": "public Integer partition(Windowed<K> windowedKey, V value, int numPartitions)", "class_method_signature": "WindowedStreamPartitioner.partition(Windowed<K> windowedKey, V value, int numPartitions)", "testcase": false, "constructor": false}, {"identifier": "toPositive", "parameters": "(int number)", "modifiers": "private static", "return": "int", "signature": "int toPositive(int number)", "full_signature": "private static int toPositive(int number)", "class_method_signature": "WindowedStreamPartitioner.toPositive(int number)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/WindowedStreamPartitioner.java"}, "focal_method": {"identifier": "partition", "parameters": "(Windowed<K> windowedKey, V value, int numPartitions)", "modifiers": "public", "return": "Integer", "body": "public Integer partition(Windowed<K> windowedKey, V value, int numPartitions) {\n        byte[] keyBytes = serializer.serializeBaseKey(null, windowedKey);\n\n        // hash the keyBytes to choose a partition\n        return toPositive(Utils.murmur2(keyBytes)) % numPartitions;\n    }", "signature": "Integer partition(Windowed<K> windowedKey, V value, int numPartitions)", "full_signature": "public Integer partition(Windowed<K> windowedKey, V value, int numPartitions)", "class_method_signature": "WindowedStreamPartitioner.partition(Windowed<K> windowedKey, V value, int numPartitions)", "testcase": false, "constructor": false, "invocations": ["serializeBaseKey", "toPositive", "murmur2"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}