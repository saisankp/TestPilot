{"test_class": {"identifier": "CriteriaMatcherInMemoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "rice-middleware/krms/impl/src/test/java/org/kuali/rice/krms/impl/repository/mock/CriteriaMatcherInMemoryTest.java"}, "test_case": {"identifier": "testExtractValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractValue() {\n//        addCont(orgs, \"ID-AA\", \"AA\", \"Automobile Association\", \"Consumer\", \"true\", \"Automobile Association towing\");\n        ContextDefinition org = this.getTestContexts().get(0);\n        assertEquals(\"ID-AA\", CriteriaMatcherInMemory.extractValue(\"id\", org));\n        assertEquals(\"AA\", CriteriaMatcherInMemory.extractValue(\"namespace\", org));\n        assertEquals(\"Automobile Association\", CriteriaMatcherInMemory.extractValue(\"name\", org));\n        assertEquals(\"Consumer\", CriteriaMatcherInMemory.extractValue(\"typeId\", org));\n        assertEquals(\"true\", CriteriaMatcherInMemory.extractValue(\"active\", org));\n        assertEquals(\"Automobile Association towing\", CriteriaMatcherInMemory.extractValue(\"description\", org));\n    }", "signature": "void testExtractValue()", "full_signature": "@Test public void testExtractValue()", "class_method_signature": "CriteriaMatcherInMemoryTest.testExtractValue()", "testcase": true, "constructor": false, "invocations": ["get", "getTestContexts", "assertEquals", "extractValue", "assertEquals", "extractValue", "assertEquals", "extractValue", "assertEquals", "extractValue", "assertEquals", "extractValue", "assertEquals", "extractValue"]}, "focal_class": {"identifier": "CriteriaMatcherInMemory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryByCriteria criteria;", "modifier": "private", "type": "QueryByCriteria", "declarator": "criteria", "var_name": "criteria"}, {"original_string": "private transient Map<String, Pattern> patternCache = new HashMap<String, Pattern>();", "modifier": "private transient", "type": "Map<String, Pattern>", "declarator": "patternCache = new HashMap<String, Pattern>()", "var_name": "patternCache"}], "methods": [{"identifier": "CriteriaMatcherInMemory", "parameters": "()", "modifiers": "public", "return": "", "signature": " CriteriaMatcherInMemory()", "full_signature": "public  CriteriaMatcherInMemory()", "class_method_signature": "CriteriaMatcherInMemory.CriteriaMatcherInMemory()", "testcase": false, "constructor": true}, {"identifier": "getCriteria", "parameters": "()", "modifiers": "public", "return": "QueryByCriteria", "signature": "QueryByCriteria getCriteria()", "full_signature": "public QueryByCriteria getCriteria()", "class_method_signature": "CriteriaMatcherInMemory.getCriteria()", "testcase": false, "constructor": false}, {"identifier": "setCriteria", "parameters": "(QueryByCriteria criteria)", "modifiers": "public", "return": "void", "signature": "void setCriteria(QueryByCriteria criteria)", "full_signature": "public void setCriteria(QueryByCriteria criteria)", "class_method_signature": "CriteriaMatcherInMemory.setCriteria(QueryByCriteria criteria)", "testcase": false, "constructor": false}, {"identifier": "findMatching", "parameters": "(Collection<T> all)", "modifiers": "public", "return": "Collection<T>", "signature": "Collection<T> findMatching(Collection<T> all)", "full_signature": "public Collection<T> findMatching(Collection<T> all)", "class_method_signature": "CriteriaMatcherInMemory.findMatching(Collection<T> all)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(T infoObject)", "modifiers": "public", "return": "boolean", "signature": "boolean matches(T infoObject)", "full_signature": "public boolean matches(T infoObject)", "class_method_signature": "CriteriaMatcherInMemory.matches(T infoObject)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(T infoObject, Predicate predicate)", "modifiers": "protected", "return": "boolean", "signature": "boolean matches(T infoObject, Predicate predicate)", "full_signature": "protected boolean matches(T infoObject, Predicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matches(T infoObject, Predicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesOr", "parameters": "(T infoObject, OrPredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesOr(T infoObject, OrPredicate predicate)", "full_signature": "private boolean matchesOr(T infoObject, OrPredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesOr(T infoObject, OrPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesAnd", "parameters": "(T infoObject, AndPredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesAnd(T infoObject, AndPredicate predicate)", "full_signature": "private boolean matchesAnd(T infoObject, AndPredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesAnd(T infoObject, AndPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesEqual", "parameters": "(T infoObject, EqualPredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesEqual(T infoObject, EqualPredicate predicate)", "full_signature": "private boolean matchesEqual(T infoObject, EqualPredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesEqual(T infoObject, EqualPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesLessThan", "parameters": "(T infoObject, LessThanPredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesLessThan(T infoObject, LessThanPredicate predicate)", "full_signature": "private boolean matchesLessThan(T infoObject, LessThanPredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesLessThan(T infoObject, LessThanPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesLessThanOrEqual", "parameters": "(T infoObject, LessThanOrEqualPredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesLessThanOrEqual(T infoObject, LessThanOrEqualPredicate predicate)", "full_signature": "private boolean matchesLessThanOrEqual(T infoObject, LessThanOrEqualPredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesLessThanOrEqual(T infoObject, LessThanOrEqualPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesGreaterThan", "parameters": "(T infoObject, GreaterThanPredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesGreaterThan(T infoObject, GreaterThanPredicate predicate)", "full_signature": "private boolean matchesGreaterThan(T infoObject, GreaterThanPredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesGreaterThan(T infoObject, GreaterThanPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesGreaterThanOrEqual", "parameters": "(T infoObject, GreaterThanOrEqualPredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesGreaterThanOrEqual(T infoObject, GreaterThanOrEqualPredicate predicate)", "full_signature": "private boolean matchesGreaterThanOrEqual(T infoObject, GreaterThanOrEqualPredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesGreaterThanOrEqual(T infoObject, GreaterThanOrEqualPredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "matchesLike", "parameters": "(T infoObject, LikePredicate predicate)", "modifiers": "private", "return": "boolean", "signature": "boolean matchesLike(T infoObject, LikePredicate predicate)", "full_signature": "private boolean matchesLike(T infoObject, LikePredicate predicate)", "class_method_signature": "CriteriaMatcherInMemory.matchesLike(T infoObject, LikePredicate predicate)", "testcase": false, "constructor": false}, {"identifier": "extractValue", "parameters": "(String fieldPath, Object infoObject)", "modifiers": "protected static", "return": "Object", "signature": "Object extractValue(String fieldPath, Object infoObject)", "full_signature": "protected static Object extractValue(String fieldPath, Object infoObject)", "class_method_signature": "CriteriaMatcherInMemory.extractValue(String fieldPath, Object infoObject)", "testcase": false, "constructor": false}, {"identifier": "matchesEqual", "parameters": "(Object dataValue, Object criteriaValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesEqual(Object dataValue, Object criteriaValue)", "full_signature": "public static boolean matchesEqual(Object dataValue, Object criteriaValue)", "class_method_signature": "CriteriaMatcherInMemory.matchesEqual(Object dataValue, Object criteriaValue)", "testcase": false, "constructor": false}, {"identifier": "matchesLessThan", "parameters": "(Object dataValue, Object criteriaValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesLessThan(Object dataValue, Object criteriaValue)", "full_signature": "public static boolean matchesLessThan(Object dataValue, Object criteriaValue)", "class_method_signature": "CriteriaMatcherInMemory.matchesLessThan(Object dataValue, Object criteriaValue)", "testcase": false, "constructor": false}, {"identifier": "matchesGreaterThan", "parameters": "(Object dataValue, Object criteriaValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesGreaterThan(Object dataValue, Object criteriaValue)", "full_signature": "public static boolean matchesGreaterThan(Object dataValue, Object criteriaValue)", "class_method_signature": "CriteriaMatcherInMemory.matchesGreaterThan(Object dataValue, Object criteriaValue)", "testcase": false, "constructor": false}, {"identifier": "getPattern", "parameters": "(String expr)", "modifiers": "private", "return": "Pattern", "signature": "Pattern getPattern(String expr)", "full_signature": "private Pattern getPattern(String expr)", "class_method_signature": "CriteriaMatcherInMemory.getPattern(String expr)", "testcase": false, "constructor": false}, {"identifier": "matchesLike", "parameters": "(Object dataValue, Object criteriaValue)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesLike(Object dataValue, Object criteriaValue)", "full_signature": "public boolean matchesLike(Object dataValue, Object criteriaValue)", "class_method_signature": "CriteriaMatcherInMemory.matchesLike(Object dataValue, Object criteriaValue)", "testcase": false, "constructor": false}, {"identifier": "matchesLikeCachingPattern", "parameters": "(final String str, final String expr)", "modifiers": "public", "return": "boolean", "signature": "boolean matchesLikeCachingPattern(final String str, final String expr)", "full_signature": "public boolean matchesLikeCachingPattern(final String str, final String expr)", "class_method_signature": "CriteriaMatcherInMemory.matchesLikeCachingPattern(final String str, final String expr)", "testcase": false, "constructor": false}, {"identifier": "compilePattern", "parameters": "(final String expr)", "modifiers": "private static", "return": "Pattern", "signature": "Pattern compilePattern(final String expr)", "full_signature": "private static Pattern compilePattern(final String expr)", "class_method_signature": "CriteriaMatcherInMemory.compilePattern(final String expr)", "testcase": false, "constructor": false}, {"identifier": "matchesLike", "parameters": "(final String str, final String expr)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesLike(final String str, final String expr)", "full_signature": "public static boolean matchesLike(final String str, final String expr)", "class_method_signature": "CriteriaMatcherInMemory.matchesLike(final String str, final String expr)", "testcase": false, "constructor": false}, {"identifier": "matchesLike", "parameters": "(final String str, final Pattern p)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchesLike(final String str, final Pattern p)", "full_signature": "private static boolean matchesLike(final String str, final Pattern p)", "class_method_signature": "CriteriaMatcherInMemory.matchesLike(final String str, final Pattern p)", "testcase": false, "constructor": false}, {"identifier": "quotemeta", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String quotemeta(String s)", "full_signature": "private static String quotemeta(String s)", "class_method_signature": "CriteriaMatcherInMemory.quotemeta(String s)", "testcase": false, "constructor": false}], "file": "rice-middleware/krms/impl/src/main/java/org/kuali/rice/krms/impl/repository/mock/CriteriaMatcherInMemory.java"}, "focal_method": {"identifier": "extractValue", "parameters": "(String fieldPath, Object infoObject)", "modifiers": "protected static", "return": "Object", "body": "protected static Object extractValue(String fieldPath, Object infoObject) {\n\n        try {\n            if (infoObject == null) {\n                return null;\n            }\n            Object value = PropertyUtils.getNestedProperty(infoObject, fieldPath);\n            // translate boolean to string so we can compare\n            // Have to do this because RICE's predicate does not support boolean \n            // because it is database oriented and most DB do not support booleans natively.\n            if (value instanceof Boolean) {\n                return value.toString();\n            }\n            // See Rice's CriteriaSupportUtils.determineCriteriaValue where data normalized \n            // translate date to joda DateTime because that is what RICE PredicateFactory does \n            // similar to rest of the types \n            if (value instanceof Date) {\n                return new DateTime ((Date) value);\n            }\n            if (value instanceof Calendar) {\n                return new DateTime ((Calendar) value);\n            }\n            if (value instanceof Short) {\n                return BigInteger.valueOf(((Short) value).longValue());\n            }\n            if (value instanceof AtomicLong) {\n                return BigInteger.valueOf(((AtomicLong) value).longValue());\n            }\n            if (value instanceof AtomicInteger) {\n                return BigInteger.valueOf(((AtomicInteger) value).longValue());\n            }\n            if (value instanceof Integer) {\n                return BigInteger.valueOf(((Integer)value).longValue());\n            }\n            if (value instanceof Long) {\n                return BigInteger.valueOf(((Long)value).longValue());\n            }\n            if (value instanceof Float) {\n                return BigDecimal.valueOf(((Float)value).doubleValue());\n            }\n            if (value instanceof Double) {\n                return BigDecimal.valueOf(((Double)value).doubleValue());\n            }\n            return value;\n        } catch (NestedNullException ex) {\n            return null;\n        }  catch (IllegalAccessException ex) {\n            throw new IllegalArgumentException(fieldPath, ex);\n        } catch (InvocationTargetException ex) {\n            throw new IllegalArgumentException(fieldPath, ex);\n        } catch (NoSuchMethodException ex) {\n            throw new IllegalArgumentException(fieldPath, ex);\n        }\n//        }\n//        return value;\n    }", "signature": "Object extractValue(String fieldPath, Object infoObject)", "full_signature": "protected static Object extractValue(String fieldPath, Object infoObject)", "class_method_signature": "CriteriaMatcherInMemory.extractValue(String fieldPath, Object infoObject)", "testcase": false, "constructor": false, "invocations": ["getNestedProperty", "toString", "valueOf", "longValue", "valueOf", "longValue", "valueOf", "longValue", "valueOf", "longValue", "valueOf", "longValue", "valueOf", "doubleValue", "valueOf", "doubleValue"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}