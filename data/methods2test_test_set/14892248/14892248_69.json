{"test_class": {"identifier": "PdfReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/pdf/PdfReaderTest.java"}, "test_case": {"identifier": "circularReferencesInResources", "parameters": "()", "modifiers": "@Test(expected = ExceptionConverter.class) public", "return": "void", "body": "@Test(expected = ExceptionConverter.class)\n    public void circularReferencesInResources() throws IOException {\n        File testFile = TestResourceUtils.getResourceAsTempFile(this, \"circularReferencesInResources.pdf\");\n        String filename = testFile.getAbsolutePath();\n        PdfReader rdr = new PdfReader(filename);\n        rdr.close();\n        BaseFont.getDocumentFonts(rdr);\n    }", "signature": "void circularReferencesInResources()", "full_signature": "@Test(expected = ExceptionConverter.class) public void circularReferencesInResources()", "class_method_signature": "PdfReaderTest.circularReferencesInResources()", "testcase": true, "constructor": false, "invocations": ["getResourceAsTempFile", "getAbsolutePath", "close", "getDocumentFonts"]}, "focal_class": {"identifier": "PdfReader", "superclass": "", "interfaces": "implements PdfViewerPreferences", "fields": [{"original_string": "public static boolean unethicalreading = false;", "modifier": "public static", "type": "boolean", "declarator": "unethicalreading = false", "var_name": "unethicalreading"}, {"original_string": "public static boolean debugmode = false;", "modifier": "public static", "type": "boolean", "declarator": "debugmode = false", "var_name": "debugmode"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PdfReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PdfReader.class)", "var_name": "LOGGER"}, {"original_string": "static final PdfName pageInhCandidates[] = {\n        PdfName.MEDIABOX, PdfName.ROTATE, PdfName.RESOURCES, PdfName.CROPBOX\n    };", "modifier": "static final", "type": "PdfName", "declarator": "pageInhCandidates[] = {\n        PdfName.MEDIABOX, PdfName.ROTATE, PdfName.RESOURCES, PdfName.CROPBOX\n    }", "var_name": "pageInhCandidates"}, {"original_string": "static final byte endstream[] = PdfEncodings.convertToBytes(\"endstream\", null);", "modifier": "static final", "type": "byte", "declarator": "endstream[] = PdfEncodings.convertToBytes(\"endstream\", null)", "var_name": "endstream"}, {"original_string": "static final byte endobj[] = PdfEncodings.convertToBytes(\"endobj\", null);", "modifier": "static final", "type": "byte", "declarator": "endobj[] = PdfEncodings.convertToBytes(\"endobj\", null)", "var_name": "endobj"}, {"original_string": "protected PRTokeniser tokens;", "modifier": "protected", "type": "PRTokeniser", "declarator": "tokens", "var_name": "tokens"}, {"original_string": "protected long xref[];", "modifier": "protected", "type": "long", "declarator": "xref[]", "var_name": "xref"}, {"original_string": "protected HashMap<Integer, IntHashtable> objStmMark;", "modifier": "protected", "type": "HashMap<Integer, IntHashtable>", "declarator": "objStmMark", "var_name": "objStmMark"}, {"original_string": "protected LongHashtable objStmToOffset;", "modifier": "protected", "type": "LongHashtable", "declarator": "objStmToOffset", "var_name": "objStmToOffset"}, {"original_string": "protected boolean newXrefType;", "modifier": "protected", "type": "boolean", "declarator": "newXrefType", "var_name": "newXrefType"}, {"original_string": "protected ArrayList<PdfObject> xrefObj;", "modifier": "protected", "type": "ArrayList<PdfObject>", "declarator": "xrefObj", "var_name": "xrefObj"}, {"original_string": "PdfDictionary rootPages;", "modifier": "", "type": "PdfDictionary", "declarator": "rootPages", "var_name": "rootPages"}, {"original_string": "protected PdfDictionary trailer;", "modifier": "protected", "type": "PdfDictionary", "declarator": "trailer", "var_name": "trailer"}, {"original_string": "protected PdfDictionary catalog;", "modifier": "protected", "type": "PdfDictionary", "declarator": "catalog", "var_name": "catalog"}, {"original_string": "protected PageRefs pageRefs;", "modifier": "protected", "type": "PageRefs", "declarator": "pageRefs", "var_name": "pageRefs"}, {"original_string": "protected PRAcroForm acroForm = null;", "modifier": "protected", "type": "PRAcroForm", "declarator": "acroForm = null", "var_name": "acroForm"}, {"original_string": "protected boolean acroFormParsed = false;", "modifier": "protected", "type": "boolean", "declarator": "acroFormParsed = false", "var_name": "acroFormParsed"}, {"original_string": "protected boolean encrypted = false;", "modifier": "protected", "type": "boolean", "declarator": "encrypted = false", "var_name": "encrypted"}, {"original_string": "protected boolean rebuilt = false;", "modifier": "protected", "type": "boolean", "declarator": "rebuilt = false", "var_name": "rebuilt"}, {"original_string": "protected int freeXref;", "modifier": "protected", "type": "int", "declarator": "freeXref", "var_name": "freeXref"}, {"original_string": "protected boolean tampered = false;", "modifier": "protected", "type": "boolean", "declarator": "tampered = false", "var_name": "tampered"}, {"original_string": "protected long lastXref;", "modifier": "protected", "type": "long", "declarator": "lastXref", "var_name": "lastXref"}, {"original_string": "protected long eofPos;", "modifier": "protected", "type": "long", "declarator": "eofPos", "var_name": "eofPos"}, {"original_string": "protected char pdfVersion;", "modifier": "protected", "type": "char", "declarator": "pdfVersion", "var_name": "pdfVersion"}, {"original_string": "protected PdfEncryption decrypt;", "modifier": "protected", "type": "PdfEncryption", "declarator": "decrypt", "var_name": "decrypt"}, {"original_string": "protected byte password[] = null;", "modifier": "protected", "type": "byte", "declarator": "password[] = null", "var_name": "password"}, {"original_string": "protected Key certificateKey = null;", "modifier": "protected", "type": "Key", "declarator": "certificateKey = null", "var_name": "certificateKey"}, {"original_string": "protected Certificate certificate = null;", "modifier": "protected", "type": "Certificate", "declarator": "certificate = null", "var_name": "certificate"}, {"original_string": "protected String certificateKeyProvider = null;", "modifier": "protected", "type": "String", "declarator": "certificateKeyProvider = null", "var_name": "certificateKeyProvider"}, {"original_string": "protected ExternalDecryptionProcess externalDecryptionProcess = null;", "modifier": "protected", "type": "ExternalDecryptionProcess", "declarator": "externalDecryptionProcess = null", "var_name": "externalDecryptionProcess"}, {"original_string": "private boolean ownerPasswordUsed;", "modifier": "private", "type": "boolean", "declarator": "ownerPasswordUsed", "var_name": "ownerPasswordUsed"}, {"original_string": "protected ArrayList<PdfString> strings = new ArrayList<PdfString>();", "modifier": "protected", "type": "ArrayList<PdfString>", "declarator": "strings = new ArrayList<PdfString>()", "var_name": "strings"}, {"original_string": "protected boolean sharedStreams = true;", "modifier": "protected", "type": "boolean", "declarator": "sharedStreams = true", "var_name": "sharedStreams"}, {"original_string": "protected boolean consolidateNamedDestinations = false;", "modifier": "protected", "type": "boolean", "declarator": "consolidateNamedDestinations = false", "var_name": "consolidateNamedDestinations"}, {"original_string": "protected boolean remoteToLocalNamedDestinations = false;", "modifier": "protected", "type": "boolean", "declarator": "remoteToLocalNamedDestinations = false", "var_name": "remoteToLocalNamedDestinations"}, {"original_string": "protected int rValue;", "modifier": "protected", "type": "int", "declarator": "rValue", "var_name": "rValue"}, {"original_string": "protected long pValue;", "modifier": "protected", "type": "long", "declarator": "pValue", "var_name": "pValue"}, {"original_string": "private int objNum;", "modifier": "private", "type": "int", "declarator": "objNum", "var_name": "objNum"}, {"original_string": "private int objGen;", "modifier": "private", "type": "int", "declarator": "objGen", "var_name": "objGen"}, {"original_string": "private long fileLength;", "modifier": "private", "type": "long", "declarator": "fileLength", "var_name": "fileLength"}, {"original_string": "private boolean hybridXref;", "modifier": "private", "type": "boolean", "declarator": "hybridXref", "var_name": "hybridXref"}, {"original_string": "private int lastXrefPartial = -1;", "modifier": "private", "type": "int", "declarator": "lastXrefPartial = -1", "var_name": "lastXrefPartial"}, {"original_string": "private boolean partial;", "modifier": "private", "type": "boolean", "declarator": "partial", "var_name": "partial"}, {"original_string": "private PRIndirectReference cryptoRef;", "modifier": "private", "type": "PRIndirectReference", "declarator": "cryptoRef", "var_name": "cryptoRef"}, {"original_string": "private final PdfViewerPreferencesImp viewerPreferences = new PdfViewerPreferencesImp();", "modifier": "private final", "type": "PdfViewerPreferencesImp", "declarator": "viewerPreferences = new PdfViewerPreferencesImp()", "var_name": "viewerPreferences"}, {"original_string": "private boolean encryptionError;", "modifier": "private", "type": "boolean", "declarator": "encryptionError", "var_name": "encryptionError"}, {"original_string": "MemoryLimitsAwareHandler memoryLimitsAwareHandler = null;", "modifier": "", "type": "MemoryLimitsAwareHandler", "declarator": "memoryLimitsAwareHandler = null", "var_name": "memoryLimitsAwareHandler"}, {"original_string": "private boolean appendable;", "modifier": "private", "type": "boolean", "declarator": "appendable", "var_name": "appendable"}, {"original_string": "protected static Counter COUNTER = CounterFactory.getCounter(PdfReader.class);", "modifier": "protected static", "type": "Counter", "declarator": "COUNTER = CounterFactory.getCounter(PdfReader.class)", "var_name": "COUNTER"}, {"original_string": "private int readDepth = 0;", "modifier": "private", "type": "int", "declarator": "readDepth = 0", "var_name": "readDepth"}], "methods": [{"identifier": "getCounter", "parameters": "()", "modifiers": "protected", "return": "Counter", "signature": "Counter getCounter()", "full_signature": "protected Counter getCounter()", "class_method_signature": "PdfReader.getCounter()", "testcase": false, "constructor": false}, {"identifier": "PdfReader", "parameters": "(RandomAccessSource byteSource, boolean partialRead, byte ownerPassword[], Certificate certificate, Key certificateKey, String certificateKeyProvider, ExternalDecryptionProcess externalDecryptionProcess, boolean closeSourceOnConstructorError)", "modifiers": "private", "return": "", "signature": " PdfReader(RandomAccessSource byteSource, boolean partialRead, byte ownerPassword[], Certificate certificate, Key certificateKey, String certificateKeyProvider, ExternalDecryptionProcess externalDecryptionProcess, boolean closeSourceOnConstructorError)", "full_signature": "private  PdfReader(RandomAccessSource byteSource, boolean partialRead, byte ownerPassword[], Certificate certificate, Key certificateKey, String certificateKeyProvider, ExternalDecryptionProcess externalDecryptionProcess, boolean closeSourceOnConstructorError)", "class_method_signature": "PdfReader.PdfReader(RandomAccessSource byteSource, boolean partialRead, byte ownerPassword[], Certificate certificate, Key certificateKey, String certificateKeyProvider, ExternalDecryptionProcess externalDecryptionProcess, boolean closeSourceOnConstructorError)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(RandomAccessSource byteSource, ReaderProperties properties)", "modifiers": "private", "return": "", "signature": " PdfReader(RandomAccessSource byteSource, ReaderProperties properties)", "full_signature": "private  PdfReader(RandomAccessSource byteSource, ReaderProperties properties)", "class_method_signature": "PdfReader.PdfReader(RandomAccessSource byteSource, ReaderProperties properties)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final String filename)", "modifiers": "public", "return": "", "signature": " PdfReader(final String filename)", "full_signature": "public  PdfReader(final String filename)", "class_method_signature": "PdfReader.PdfReader(final String filename)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(ReaderProperties properties, final String filename)", "modifiers": "public", "return": "", "signature": " PdfReader(ReaderProperties properties, final String filename)", "full_signature": "public  PdfReader(ReaderProperties properties, final String filename)", "class_method_signature": "PdfReader.PdfReader(ReaderProperties properties, final String filename)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final String filename, final byte ownerPassword[])", "modifiers": "public", "return": "", "signature": " PdfReader(final String filename, final byte ownerPassword[])", "full_signature": "public  PdfReader(final String filename, final byte ownerPassword[])", "class_method_signature": "PdfReader.PdfReader(final String filename, final byte ownerPassword[])", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final String filename, final byte ownerPassword[], boolean partial)", "modifiers": "public", "return": "", "signature": " PdfReader(final String filename, final byte ownerPassword[], boolean partial)", "full_signature": "public  PdfReader(final String filename, final byte ownerPassword[], boolean partial)", "class_method_signature": "PdfReader.PdfReader(final String filename, final byte ownerPassword[], boolean partial)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final byte pdfIn[])", "modifiers": "public", "return": "", "signature": " PdfReader(final byte pdfIn[])", "full_signature": "public  PdfReader(final byte pdfIn[])", "class_method_signature": "PdfReader.PdfReader(final byte pdfIn[])", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final byte pdfIn[], final byte ownerPassword[])", "modifiers": "public", "return": "", "signature": " PdfReader(final byte pdfIn[], final byte ownerPassword[])", "full_signature": "public  PdfReader(final byte pdfIn[], final byte ownerPassword[])", "class_method_signature": "PdfReader.PdfReader(final byte pdfIn[], final byte ownerPassword[])", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final String filename, final Certificate certificate, final Key certificateKey, final String certificateKeyProvider)", "modifiers": "public", "return": "", "signature": " PdfReader(final String filename, final Certificate certificate, final Key certificateKey, final String certificateKeyProvider)", "full_signature": "public  PdfReader(final String filename, final Certificate certificate, final Key certificateKey, final String certificateKeyProvider)", "class_method_signature": "PdfReader.PdfReader(final String filename, final Certificate certificate, final Key certificateKey, final String certificateKeyProvider)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final String filename, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "modifiers": "public", "return": "", "signature": " PdfReader(final String filename, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "full_signature": "public  PdfReader(final String filename, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "class_method_signature": "PdfReader.PdfReader(final String filename, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final byte[] pdfIn, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "modifiers": "public", "return": "", "signature": " PdfReader(final byte[] pdfIn, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "full_signature": "public  PdfReader(final byte[] pdfIn, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "class_method_signature": "PdfReader.PdfReader(final byte[] pdfIn, Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final InputStream inputStream, final Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "modifiers": "public", "return": "", "signature": " PdfReader(final InputStream inputStream, final Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "full_signature": "public  PdfReader(final InputStream inputStream, final Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "class_method_signature": "PdfReader.PdfReader(final InputStream inputStream, final Certificate certificate, final ExternalDecryptionProcess externalDecryptionProcess)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final URL url)", "modifiers": "public", "return": "", "signature": " PdfReader(final URL url)", "full_signature": "public  PdfReader(final URL url)", "class_method_signature": "PdfReader.PdfReader(final URL url)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final URL url, final byte ownerPassword[])", "modifiers": "public", "return": "", "signature": " PdfReader(final URL url, final byte ownerPassword[])", "full_signature": "public  PdfReader(final URL url, final byte ownerPassword[])", "class_method_signature": "PdfReader.PdfReader(final URL url, final byte ownerPassword[])", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final InputStream is, final byte ownerPassword[])", "modifiers": "public", "return": "", "signature": " PdfReader(final InputStream is, final byte ownerPassword[])", "full_signature": "public  PdfReader(final InputStream is, final byte ownerPassword[])", "class_method_signature": "PdfReader.PdfReader(final InputStream is, final byte ownerPassword[])", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final InputStream is)", "modifiers": "public", "return": "", "signature": " PdfReader(final InputStream is)", "full_signature": "public  PdfReader(final InputStream is)", "class_method_signature": "PdfReader.PdfReader(final InputStream is)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(ReaderProperties properties, final InputStream is)", "modifiers": "public", "return": "", "signature": " PdfReader(ReaderProperties properties, final InputStream is)", "full_signature": "public  PdfReader(ReaderProperties properties, final InputStream is)", "class_method_signature": "PdfReader.PdfReader(ReaderProperties properties, final InputStream is)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(ReaderProperties properties, final RandomAccessFileOrArray raf)", "modifiers": "public", "return": "", "signature": " PdfReader(ReaderProperties properties, final RandomAccessFileOrArray raf)", "full_signature": "public  PdfReader(ReaderProperties properties, final RandomAccessFileOrArray raf)", "class_method_signature": "PdfReader.PdfReader(ReaderProperties properties, final RandomAccessFileOrArray raf)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final RandomAccessFileOrArray raf, final byte ownerPassword[])", "modifiers": "public", "return": "", "signature": " PdfReader(final RandomAccessFileOrArray raf, final byte ownerPassword[])", "full_signature": "public  PdfReader(final RandomAccessFileOrArray raf, final byte ownerPassword[])", "class_method_signature": "PdfReader.PdfReader(final RandomAccessFileOrArray raf, final byte ownerPassword[])", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final RandomAccessFileOrArray raf, final byte ownerPassword[], boolean partial)", "modifiers": "public", "return": "", "signature": " PdfReader(final RandomAccessFileOrArray raf, final byte ownerPassword[], boolean partial)", "full_signature": "public  PdfReader(final RandomAccessFileOrArray raf, final byte ownerPassword[], boolean partial)", "class_method_signature": "PdfReader.PdfReader(final RandomAccessFileOrArray raf, final byte ownerPassword[], boolean partial)", "testcase": false, "constructor": true}, {"identifier": "PdfReader", "parameters": "(final PdfReader reader)", "modifiers": "public", "return": "", "signature": " PdfReader(final PdfReader reader)", "full_signature": "public  PdfReader(final PdfReader reader)", "class_method_signature": "PdfReader.PdfReader(final PdfReader reader)", "testcase": false, "constructor": true}, {"identifier": "getOffsetTokeniser", "parameters": "(RandomAccessSource byteSource)", "modifiers": "private static", "return": "PRTokeniser", "signature": "PRTokeniser getOffsetTokeniser(RandomAccessSource byteSource)", "full_signature": "private static PRTokeniser getOffsetTokeniser(RandomAccessSource byteSource)", "class_method_signature": "PdfReader.getOffsetTokeniser(RandomAccessSource byteSource)", "testcase": false, "constructor": false}, {"identifier": "getSafeFile", "parameters": "()", "modifiers": "public", "return": "RandomAccessFileOrArray", "signature": "RandomAccessFileOrArray getSafeFile()", "full_signature": "public RandomAccessFileOrArray getSafeFile()", "class_method_signature": "PdfReader.getSafeFile()", "testcase": false, "constructor": false}, {"identifier": "getPdfReaderInstance", "parameters": "(final PdfWriter writer)", "modifiers": "protected", "return": "PdfReaderInstance", "signature": "PdfReaderInstance getPdfReaderInstance(final PdfWriter writer)", "full_signature": "protected PdfReaderInstance getPdfReaderInstance(final PdfWriter writer)", "class_method_signature": "PdfReader.getPdfReaderInstance(final PdfWriter writer)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPages", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfPages()", "full_signature": "public int getNumberOfPages()", "class_method_signature": "PdfReader.getNumberOfPages()", "testcase": false, "constructor": false}, {"identifier": "getCatalog", "parameters": "()", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getCatalog()", "full_signature": "public PdfDictionary getCatalog()", "class_method_signature": "PdfReader.getCatalog()", "testcase": false, "constructor": false}, {"identifier": "getAcroForm", "parameters": "()", "modifiers": "public", "return": "PRAcroForm", "signature": "PRAcroForm getAcroForm()", "full_signature": "public PRAcroForm getAcroForm()", "class_method_signature": "PdfReader.getAcroForm()", "testcase": false, "constructor": false}, {"identifier": "getMemoryLimitsAwareHandler", "parameters": "()", "modifiers": "", "return": "MemoryLimitsAwareHandler", "signature": "MemoryLimitsAwareHandler getMemoryLimitsAwareHandler()", "full_signature": " MemoryLimitsAwareHandler getMemoryLimitsAwareHandler()", "class_method_signature": "PdfReader.getMemoryLimitsAwareHandler()", "testcase": false, "constructor": false}, {"identifier": "getPageRotation", "parameters": "(final int index)", "modifiers": "public", "return": "int", "signature": "int getPageRotation(final int index)", "full_signature": "public int getPageRotation(final int index)", "class_method_signature": "PdfReader.getPageRotation(final int index)", "testcase": false, "constructor": false}, {"identifier": "getPageRotation", "parameters": "(final PdfDictionary page)", "modifiers": "", "return": "int", "signature": "int getPageRotation(final PdfDictionary page)", "full_signature": " int getPageRotation(final PdfDictionary page)", "class_method_signature": "PdfReader.getPageRotation(final PdfDictionary page)", "testcase": false, "constructor": false}, {"identifier": "getPageSizeWithRotation", "parameters": "(final int index)", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getPageSizeWithRotation(final int index)", "full_signature": "public Rectangle getPageSizeWithRotation(final int index)", "class_method_signature": "PdfReader.getPageSizeWithRotation(final int index)", "testcase": false, "constructor": false}, {"identifier": "getPageSizeWithRotation", "parameters": "(final PdfDictionary page)", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getPageSizeWithRotation(final PdfDictionary page)", "full_signature": "public Rectangle getPageSizeWithRotation(final PdfDictionary page)", "class_method_signature": "PdfReader.getPageSizeWithRotation(final PdfDictionary page)", "testcase": false, "constructor": false}, {"identifier": "getPageSize", "parameters": "(final int index)", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getPageSize(final int index)", "full_signature": "public Rectangle getPageSize(final int index)", "class_method_signature": "PdfReader.getPageSize(final int index)", "testcase": false, "constructor": false}, {"identifier": "getPageSize", "parameters": "(final PdfDictionary page)", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getPageSize(final PdfDictionary page)", "full_signature": "public Rectangle getPageSize(final PdfDictionary page)", "class_method_signature": "PdfReader.getPageSize(final PdfDictionary page)", "testcase": false, "constructor": false}, {"identifier": "getCropBox", "parameters": "(final int index)", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getCropBox(final int index)", "full_signature": "public Rectangle getCropBox(final int index)", "class_method_signature": "PdfReader.getCropBox(final int index)", "testcase": false, "constructor": false}, {"identifier": "getBoxSize", "parameters": "(final int index, final String boxName)", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getBoxSize(final int index, final String boxName)", "full_signature": "public Rectangle getBoxSize(final int index, final String boxName)", "class_method_signature": "PdfReader.getBoxSize(final int index, final String boxName)", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "()", "modifiers": "public", "return": "HashMap<String, String>", "signature": "HashMap<String, String> getInfo()", "full_signature": "public HashMap<String, String> getInfo()", "class_method_signature": "PdfReader.getInfo()", "testcase": false, "constructor": false}, {"identifier": "getNormalizedRectangle", "parameters": "(final PdfArray box)", "modifiers": "public static", "return": "Rectangle", "signature": "Rectangle getNormalizedRectangle(final PdfArray box)", "full_signature": "public static Rectangle getNormalizedRectangle(final PdfArray box)", "class_method_signature": "PdfReader.getNormalizedRectangle(final PdfArray box)", "testcase": false, "constructor": false}, {"identifier": "isTagged", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTagged()", "full_signature": "public boolean isTagged()", "class_method_signature": "PdfReader.isTagged()", "testcase": false, "constructor": false}, {"identifier": "readPdf", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readPdf()", "full_signature": "protected void readPdf()", "class_method_signature": "PdfReader.readPdf()", "testcase": false, "constructor": false}, {"identifier": "readPdfPartial", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readPdfPartial()", "full_signature": "protected void readPdfPartial()", "class_method_signature": "PdfReader.readPdfPartial()", "testcase": false, "constructor": false}, {"identifier": "equalsArray", "parameters": "(final byte ar1[], final byte ar2[], final int size)", "modifiers": "private", "return": "boolean", "signature": "boolean equalsArray(final byte ar1[], final byte ar2[], final int size)", "full_signature": "private boolean equalsArray(final byte ar1[], final byte ar2[], final int size)", "class_method_signature": "PdfReader.equalsArray(final byte ar1[], final byte ar2[], final int size)", "testcase": false, "constructor": false}, {"identifier": "readDecryptedDocObj", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void readDecryptedDocObj()", "full_signature": "@SuppressWarnings(\"unchecked\") private void readDecryptedDocObj()", "class_method_signature": "PdfReader.readDecryptedDocObj()", "testcase": false, "constructor": false}, {"identifier": "getPdfObjectRelease", "parameters": "(final PdfObject obj)", "modifiers": "public static", "return": "PdfObject", "signature": "PdfObject getPdfObjectRelease(final PdfObject obj)", "full_signature": "public static PdfObject getPdfObjectRelease(final PdfObject obj)", "class_method_signature": "PdfReader.getPdfObjectRelease(final PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "getPdfObject", "parameters": "(PdfObject obj)", "modifiers": "public static", "return": "PdfObject", "signature": "PdfObject getPdfObject(PdfObject obj)", "full_signature": "public static PdfObject getPdfObject(PdfObject obj)", "class_method_signature": "PdfReader.getPdfObject(PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "getPdfObjectRelease", "parameters": "(final PdfObject obj, final PdfObject parent)", "modifiers": "public static", "return": "PdfObject", "signature": "PdfObject getPdfObjectRelease(final PdfObject obj, final PdfObject parent)", "full_signature": "public static PdfObject getPdfObjectRelease(final PdfObject obj, final PdfObject parent)", "class_method_signature": "PdfReader.getPdfObjectRelease(final PdfObject obj, final PdfObject parent)", "testcase": false, "constructor": false}, {"identifier": "getPdfObject", "parameters": "(PdfObject obj, final PdfObject parent)", "modifiers": "public static", "return": "PdfObject", "signature": "PdfObject getPdfObject(PdfObject obj, final PdfObject parent)", "full_signature": "public static PdfObject getPdfObject(PdfObject obj, final PdfObject parent)", "class_method_signature": "PdfReader.getPdfObject(PdfObject obj, final PdfObject parent)", "testcase": false, "constructor": false}, {"identifier": "getPdfObjectRelease", "parameters": "(final int idx)", "modifiers": "public", "return": "PdfObject", "signature": "PdfObject getPdfObjectRelease(final int idx)", "full_signature": "public PdfObject getPdfObjectRelease(final int idx)", "class_method_signature": "PdfReader.getPdfObjectRelease(final int idx)", "testcase": false, "constructor": false}, {"identifier": "getPdfObject", "parameters": "(final int idx)", "modifiers": "public", "return": "PdfObject", "signature": "PdfObject getPdfObject(final int idx)", "full_signature": "public PdfObject getPdfObject(final int idx)", "class_method_signature": "PdfReader.getPdfObject(final int idx)", "testcase": false, "constructor": false}, {"identifier": "resetLastXrefPartial", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetLastXrefPartial()", "full_signature": "public void resetLastXrefPartial()", "class_method_signature": "PdfReader.resetLastXrefPartial()", "testcase": false, "constructor": false}, {"identifier": "releaseLastXrefPartial", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void releaseLastXrefPartial()", "full_signature": "public void releaseLastXrefPartial()", "class_method_signature": "PdfReader.releaseLastXrefPartial()", "testcase": false, "constructor": false}, {"identifier": "releaseLastXrefPartial", "parameters": "(final PdfObject obj)", "modifiers": "public static", "return": "void", "signature": "void releaseLastXrefPartial(final PdfObject obj)", "full_signature": "public static void releaseLastXrefPartial(final PdfObject obj)", "class_method_signature": "PdfReader.releaseLastXrefPartial(final PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "setXrefPartialObject", "parameters": "(final int idx, final PdfObject obj)", "modifiers": "private", "return": "void", "signature": "void setXrefPartialObject(final int idx, final PdfObject obj)", "full_signature": "private void setXrefPartialObject(final int idx, final PdfObject obj)", "class_method_signature": "PdfReader.setXrefPartialObject(final int idx, final PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "addPdfObject", "parameters": "(final PdfObject obj)", "modifiers": "public", "return": "PRIndirectReference", "signature": "PRIndirectReference addPdfObject(final PdfObject obj)", "full_signature": "public PRIndirectReference addPdfObject(final PdfObject obj)", "class_method_signature": "PdfReader.addPdfObject(final PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "readPages", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readPages()", "full_signature": "protected void readPages()", "class_method_signature": "PdfReader.readPages()", "testcase": false, "constructor": false}, {"identifier": "readDocObjPartial", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readDocObjPartial()", "full_signature": "protected void readDocObjPartial()", "class_method_signature": "PdfReader.readDocObjPartial()", "testcase": false, "constructor": false}, {"identifier": "readSingleObject", "parameters": "(final int k)", "modifiers": "protected", "return": "PdfObject", "signature": "PdfObject readSingleObject(final int k)", "full_signature": "protected PdfObject readSingleObject(final int k)", "class_method_signature": "PdfReader.readSingleObject(final int k)", "testcase": false, "constructor": false}, {"identifier": "readOneObjStm", "parameters": "(final PRStream stream, int idx)", "modifiers": "protected", "return": "PdfObject", "signature": "PdfObject readOneObjStm(final PRStream stream, int idx)", "full_signature": "protected PdfObject readOneObjStm(final PRStream stream, int idx)", "class_method_signature": "PdfReader.readOneObjStm(final PRStream stream, int idx)", "testcase": false, "constructor": false}, {"identifier": "dumpPerc", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double dumpPerc()", "full_signature": "public double dumpPerc()", "class_method_signature": "PdfReader.dumpPerc()", "testcase": false, "constructor": false}, {"identifier": "readDocObj", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readDocObj()", "full_signature": "protected void readDocObj()", "class_method_signature": "PdfReader.readDocObj()", "testcase": false, "constructor": false}, {"identifier": "checkPRStreamLength", "parameters": "(final PRStream stream)", "modifiers": "private", "return": "void", "signature": "void checkPRStreamLength(final PRStream stream)", "full_signature": "private void checkPRStreamLength(final PRStream stream)", "class_method_signature": "PdfReader.checkPRStreamLength(final PRStream stream)", "testcase": false, "constructor": false}, {"identifier": "readObjStm", "parameters": "(final PRStream stream, final IntHashtable map)", "modifiers": "protected", "return": "void", "signature": "void readObjStm(final PRStream stream, final IntHashtable map)", "full_signature": "protected void readObjStm(final PRStream stream, final IntHashtable map)", "class_method_signature": "PdfReader.readObjStm(final PRStream stream, final IntHashtable map)", "testcase": false, "constructor": false}, {"identifier": "killIndirect", "parameters": "(final PdfObject obj)", "modifiers": "public static", "return": "PdfObject", "signature": "PdfObject killIndirect(final PdfObject obj)", "full_signature": "public static PdfObject killIndirect(final PdfObject obj)", "class_method_signature": "PdfReader.killIndirect(final PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "ensureXrefSize", "parameters": "(final int size)", "modifiers": "private", "return": "void", "signature": "void ensureXrefSize(final int size)", "full_signature": "private void ensureXrefSize(final int size)", "class_method_signature": "PdfReader.ensureXrefSize(final int size)", "testcase": false, "constructor": false}, {"identifier": "readXref", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void readXref()", "full_signature": "protected void readXref()", "class_method_signature": "PdfReader.readXref()", "testcase": false, "constructor": false}, {"identifier": "readXrefSection", "parameters": "()", "modifiers": "protected", "return": "PdfDictionary", "signature": "PdfDictionary readXrefSection()", "full_signature": "protected PdfDictionary readXrefSection()", "class_method_signature": "PdfReader.readXrefSection()", "testcase": false, "constructor": false}, {"identifier": "readXRefStream", "parameters": "(final long ptr)", "modifiers": "protected", "return": "boolean", "signature": "boolean readXRefStream(final long ptr)", "full_signature": "protected boolean readXRefStream(final long ptr)", "class_method_signature": "PdfReader.readXRefStream(final long ptr)", "testcase": false, "constructor": false}, {"identifier": "rebuildXref", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void rebuildXref()", "full_signature": "protected void rebuildXref()", "class_method_signature": "PdfReader.rebuildXref()", "testcase": false, "constructor": false}, {"identifier": "readDictionary", "parameters": "()", "modifiers": "protected", "return": "PdfDictionary", "signature": "PdfDictionary readDictionary()", "full_signature": "protected PdfDictionary readDictionary()", "class_method_signature": "PdfReader.readDictionary()", "testcase": false, "constructor": false}, {"identifier": "readArray", "parameters": "()", "modifiers": "protected", "return": "PdfArray", "signature": "PdfArray readArray()", "full_signature": "protected PdfArray readArray()", "class_method_signature": "PdfReader.readArray()", "testcase": false, "constructor": false}, {"identifier": "readPRObject", "parameters": "()", "modifiers": "protected", "return": "PdfObject", "signature": "PdfObject readPRObject()", "full_signature": "protected PdfObject readPRObject()", "class_method_signature": "PdfReader.readPRObject()", "testcase": false, "constructor": false}, {"identifier": "FlateDecode", "parameters": "(final byte in[])", "modifiers": "public static", "return": "byte[]", "signature": "byte[] FlateDecode(final byte in[])", "full_signature": "public static byte[] FlateDecode(final byte in[])", "class_method_signature": "PdfReader.FlateDecode(final byte in[])", "testcase": false, "constructor": false}, {"identifier": "FlateDecode", "parameters": "(final byte in[], ByteArrayOutputStream out)", "modifiers": "static", "return": "byte[]", "signature": "byte[] FlateDecode(final byte in[], ByteArrayOutputStream out)", "full_signature": "static byte[] FlateDecode(final byte in[], ByteArrayOutputStream out)", "class_method_signature": "PdfReader.FlateDecode(final byte in[], ByteArrayOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "decodePredictor", "parameters": "(final byte in[], final PdfObject dicPar)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodePredictor(final byte in[], final PdfObject dicPar)", "full_signature": "public static byte[] decodePredictor(final byte in[], final PdfObject dicPar)", "class_method_signature": "PdfReader.decodePredictor(final byte in[], final PdfObject dicPar)", "testcase": false, "constructor": false}, {"identifier": "FlateDecode", "parameters": "(final byte in[], final boolean strict)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] FlateDecode(final byte in[], final boolean strict)", "full_signature": "public static byte[] FlateDecode(final byte in[], final boolean strict)", "class_method_signature": "PdfReader.FlateDecode(final byte in[], final boolean strict)", "testcase": false, "constructor": false}, {"identifier": "FlateDecode", "parameters": "(final byte in[], final boolean strict, ByteArrayOutputStream out)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] FlateDecode(final byte in[], final boolean strict, ByteArrayOutputStream out)", "full_signature": "private static byte[] FlateDecode(final byte in[], final boolean strict, ByteArrayOutputStream out)", "class_method_signature": "PdfReader.FlateDecode(final byte in[], final boolean strict, ByteArrayOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "ASCIIHexDecode", "parameters": "(final byte in[])", "modifiers": "public static", "return": "byte[]", "signature": "byte[] ASCIIHexDecode(final byte in[])", "full_signature": "public static byte[] ASCIIHexDecode(final byte in[])", "class_method_signature": "PdfReader.ASCIIHexDecode(final byte in[])", "testcase": false, "constructor": false}, {"identifier": "ASCIIHexDecode", "parameters": "(final byte in[], ByteArrayOutputStream out)", "modifiers": "static", "return": "byte[]", "signature": "byte[] ASCIIHexDecode(final byte in[], ByteArrayOutputStream out)", "full_signature": "static byte[] ASCIIHexDecode(final byte in[], ByteArrayOutputStream out)", "class_method_signature": "PdfReader.ASCIIHexDecode(final byte in[], ByteArrayOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "ASCII85Decode", "parameters": "(final byte in[])", "modifiers": "public static", "return": "byte[]", "signature": "byte[] ASCII85Decode(final byte in[])", "full_signature": "public static byte[] ASCII85Decode(final byte in[])", "class_method_signature": "PdfReader.ASCII85Decode(final byte in[])", "testcase": false, "constructor": false}, {"identifier": "ASCII85Decode", "parameters": "(final byte in[], ByteArrayOutputStream out)", "modifiers": "static", "return": "byte[]", "signature": "byte[] ASCII85Decode(final byte in[], ByteArrayOutputStream out)", "full_signature": "static byte[] ASCII85Decode(final byte in[], ByteArrayOutputStream out)", "class_method_signature": "PdfReader.ASCII85Decode(final byte in[], ByteArrayOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "LZWDecode", "parameters": "(final byte in[])", "modifiers": "public static", "return": "byte[]", "signature": "byte[] LZWDecode(final byte in[])", "full_signature": "public static byte[] LZWDecode(final byte in[])", "class_method_signature": "PdfReader.LZWDecode(final byte in[])", "testcase": false, "constructor": false}, {"identifier": "LZWDecode", "parameters": "(final byte in[], ByteArrayOutputStream out)", "modifiers": "static", "return": "byte[]", "signature": "byte[] LZWDecode(final byte in[], ByteArrayOutputStream out)", "full_signature": "static byte[] LZWDecode(final byte in[], ByteArrayOutputStream out)", "class_method_signature": "PdfReader.LZWDecode(final byte in[], ByteArrayOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "isRebuilt", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRebuilt()", "full_signature": "public boolean isRebuilt()", "class_method_signature": "PdfReader.isRebuilt()", "testcase": false, "constructor": false}, {"identifier": "getPageN", "parameters": "(final int pageNum)", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getPageN(final int pageNum)", "full_signature": "public PdfDictionary getPageN(final int pageNum)", "class_method_signature": "PdfReader.getPageN(final int pageNum)", "testcase": false, "constructor": false}, {"identifier": "getPageNRelease", "parameters": "(final int pageNum)", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getPageNRelease(final int pageNum)", "full_signature": "public PdfDictionary getPageNRelease(final int pageNum)", "class_method_signature": "PdfReader.getPageNRelease(final int pageNum)", "testcase": false, "constructor": false}, {"identifier": "releasePage", "parameters": "(final int pageNum)", "modifiers": "public", "return": "void", "signature": "void releasePage(final int pageNum)", "full_signature": "public void releasePage(final int pageNum)", "class_method_signature": "PdfReader.releasePage(final int pageNum)", "testcase": false, "constructor": false}, {"identifier": "resetReleasePage", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetReleasePage()", "full_signature": "public void resetReleasePage()", "class_method_signature": "PdfReader.resetReleasePage()", "testcase": false, "constructor": false}, {"identifier": "getPageOrigRef", "parameters": "(final int pageNum)", "modifiers": "public", "return": "PRIndirectReference", "signature": "PRIndirectReference getPageOrigRef(final int pageNum)", "full_signature": "public PRIndirectReference getPageOrigRef(final int pageNum)", "class_method_signature": "PdfReader.getPageOrigRef(final int pageNum)", "testcase": false, "constructor": false}, {"identifier": "getPageContent", "parameters": "(final int pageNum, final RandomAccessFileOrArray file)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPageContent(final int pageNum, final RandomAccessFileOrArray file)", "full_signature": "public byte[] getPageContent(final int pageNum, final RandomAccessFileOrArray file)", "class_method_signature": "PdfReader.getPageContent(final int pageNum, final RandomAccessFileOrArray file)", "testcase": false, "constructor": false}, {"identifier": "getPageContent", "parameters": "(final PdfDictionary page)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getPageContent(final PdfDictionary page)", "full_signature": "public static byte[] getPageContent(final PdfDictionary page)", "class_method_signature": "PdfReader.getPageContent(final PdfDictionary page)", "testcase": false, "constructor": false}, {"identifier": "getPageResources", "parameters": "(final int pageNum)", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getPageResources(final int pageNum)", "full_signature": "public PdfDictionary getPageResources(final int pageNum)", "class_method_signature": "PdfReader.getPageResources(final int pageNum)", "testcase": false, "constructor": false}, {"identifier": "getPageResources", "parameters": "(final PdfDictionary pageDict)", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getPageResources(final PdfDictionary pageDict)", "full_signature": "public PdfDictionary getPageResources(final PdfDictionary pageDict)", "class_method_signature": "PdfReader.getPageResources(final PdfDictionary pageDict)", "testcase": false, "constructor": false}, {"identifier": "getPageContent", "parameters": "(final int pageNum)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPageContent(final int pageNum)", "full_signature": "public byte[] getPageContent(final int pageNum)", "class_method_signature": "PdfReader.getPageContent(final int pageNum)", "testcase": false, "constructor": false}, {"identifier": "killXref", "parameters": "(PdfObject obj)", "modifiers": "protected", "return": "void", "signature": "void killXref(PdfObject obj)", "full_signature": "protected void killXref(PdfObject obj)", "class_method_signature": "PdfReader.killXref(PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "setPageContent", "parameters": "(final int pageNum, final byte content[])", "modifiers": "public", "return": "void", "signature": "void setPageContent(final int pageNum, final byte content[])", "full_signature": "public void setPageContent(final int pageNum, final byte content[])", "class_method_signature": "PdfReader.setPageContent(final int pageNum, final byte content[])", "testcase": false, "constructor": false}, {"identifier": "setPageContent", "parameters": "(final int pageNum, final byte content[], final int compressionLevel)", "modifiers": "public", "return": "void", "signature": "void setPageContent(final int pageNum, final byte content[], final int compressionLevel)", "full_signature": "public void setPageContent(final int pageNum, final byte content[], final int compressionLevel)", "class_method_signature": "PdfReader.setPageContent(final int pageNum, final byte content[], final int compressionLevel)", "testcase": false, "constructor": false}, {"identifier": "setPageContent", "parameters": "(final int pageNum, final byte content[], final int compressionLevel, final boolean killOldXRefRecursively)", "modifiers": "public", "return": "void", "signature": "void setPageContent(final int pageNum, final byte content[], final int compressionLevel, final boolean killOldXRefRecursively)", "full_signature": "public void setPageContent(final int pageNum, final byte content[], final int compressionLevel, final boolean killOldXRefRecursively)", "class_method_signature": "PdfReader.setPageContent(final int pageNum, final byte content[], final int compressionLevel, final boolean killOldXRefRecursively)", "testcase": false, "constructor": false}, {"identifier": "decodeBytes", "parameters": "(byte[] b, final PdfDictionary streamDictionary)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeBytes(byte[] b, final PdfDictionary streamDictionary)", "full_signature": "public static byte[] decodeBytes(byte[] b, final PdfDictionary streamDictionary)", "class_method_signature": "PdfReader.decodeBytes(byte[] b, final PdfDictionary streamDictionary)", "testcase": false, "constructor": false}, {"identifier": "decodeBytes", "parameters": "(byte[] b, final PdfDictionary streamDictionary, Map<PdfName, FilterHandlers.FilterHandler> filterHandlers)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeBytes(byte[] b, final PdfDictionary streamDictionary, Map<PdfName, FilterHandlers.FilterHandler> filterHandlers)", "full_signature": "public static byte[] decodeBytes(byte[] b, final PdfDictionary streamDictionary, Map<PdfName, FilterHandlers.FilterHandler> filterHandlers)", "class_method_signature": "PdfReader.decodeBytes(byte[] b, final PdfDictionary streamDictionary, Map<PdfName, FilterHandlers.FilterHandler> filterHandlers)", "testcase": false, "constructor": false}, {"identifier": "getStreamBytes", "parameters": "(final PRStream stream, final RandomAccessFileOrArray file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getStreamBytes(final PRStream stream, final RandomAccessFileOrArray file)", "full_signature": "public static byte[] getStreamBytes(final PRStream stream, final RandomAccessFileOrArray file)", "class_method_signature": "PdfReader.getStreamBytes(final PRStream stream, final RandomAccessFileOrArray file)", "testcase": false, "constructor": false}, {"identifier": "getStreamBytes", "parameters": "(final PRStream stream)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getStreamBytes(final PRStream stream)", "full_signature": "public static byte[] getStreamBytes(final PRStream stream)", "class_method_signature": "PdfReader.getStreamBytes(final PRStream stream)", "testcase": false, "constructor": false}, {"identifier": "getStreamBytesRaw", "parameters": "(final PRStream stream, final RandomAccessFileOrArray file)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getStreamBytesRaw(final PRStream stream, final RandomAccessFileOrArray file)", "full_signature": "public static byte[] getStreamBytesRaw(final PRStream stream, final RandomAccessFileOrArray file)", "class_method_signature": "PdfReader.getStreamBytesRaw(final PRStream stream, final RandomAccessFileOrArray file)", "testcase": false, "constructor": false}, {"identifier": "getStreamBytesRaw", "parameters": "(final PRStream stream)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getStreamBytesRaw(final PRStream stream)", "full_signature": "public static byte[] getStreamBytesRaw(final PRStream stream)", "class_method_signature": "PdfReader.getStreamBytesRaw(final PRStream stream)", "testcase": false, "constructor": false}, {"identifier": "eliminateSharedStreams", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void eliminateSharedStreams()", "full_signature": "public void eliminateSharedStreams()", "class_method_signature": "PdfReader.eliminateSharedStreams()", "testcase": false, "constructor": false}, {"identifier": "isTampered", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTampered()", "full_signature": "public boolean isTampered()", "class_method_signature": "PdfReader.isTampered()", "testcase": false, "constructor": false}, {"identifier": "setTampered", "parameters": "(final boolean tampered)", "modifiers": "public", "return": "void", "signature": "void setTampered(final boolean tampered)", "full_signature": "public void setTampered(final boolean tampered)", "class_method_signature": "PdfReader.setTampered(final boolean tampered)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getMetadata()", "full_signature": "public byte[] getMetadata()", "class_method_signature": "PdfReader.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "getLastXref", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastXref()", "full_signature": "public long getLastXref()", "class_method_signature": "PdfReader.getLastXref()", "testcase": false, "constructor": false}, {"identifier": "getXrefSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getXrefSize()", "full_signature": "public int getXrefSize()", "class_method_signature": "PdfReader.getXrefSize()", "testcase": false, "constructor": false}, {"identifier": "getEofPos", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getEofPos()", "full_signature": "public long getEofPos()", "class_method_signature": "PdfReader.getEofPos()", "testcase": false, "constructor": false}, {"identifier": "getPdfVersion", "parameters": "()", "modifiers": "public", "return": "char", "signature": "char getPdfVersion()", "full_signature": "public char getPdfVersion()", "class_method_signature": "PdfReader.getPdfVersion()", "testcase": false, "constructor": false}, {"identifier": "isEncrypted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEncrypted()", "full_signature": "public boolean isEncrypted()", "class_method_signature": "PdfReader.isEncrypted()", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPermissions()", "full_signature": "public long getPermissions()", "class_method_signature": "PdfReader.getPermissions()", "testcase": false, "constructor": false}, {"identifier": "is128Key", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean is128Key()", "full_signature": "public boolean is128Key()", "class_method_signature": "PdfReader.is128Key()", "testcase": false, "constructor": false}, {"identifier": "getTrailer", "parameters": "()", "modifiers": "public", "return": "PdfDictionary", "signature": "PdfDictionary getTrailer()", "full_signature": "public PdfDictionary getTrailer()", "class_method_signature": "PdfReader.getTrailer()", "testcase": false, "constructor": false}, {"identifier": "getDecrypt", "parameters": "()", "modifiers": "", "return": "PdfEncryption", "signature": "PdfEncryption getDecrypt()", "full_signature": " PdfEncryption getDecrypt()", "class_method_signature": "PdfReader.getDecrypt()", "testcase": false, "constructor": false}, {"identifier": "equalsn", "parameters": "(final byte a1[], final byte a2[])", "modifiers": "static", "return": "boolean", "signature": "boolean equalsn(final byte a1[], final byte a2[])", "full_signature": "static boolean equalsn(final byte a1[], final byte a2[])", "class_method_signature": "PdfReader.equalsn(final byte a1[], final byte a2[])", "testcase": false, "constructor": false}, {"identifier": "existsName", "parameters": "(final PdfDictionary dic, final PdfName key, final PdfName value)", "modifiers": "static", "return": "boolean", "signature": "boolean existsName(final PdfDictionary dic, final PdfName key, final PdfName value)", "full_signature": "static boolean existsName(final PdfDictionary dic, final PdfName key, final PdfName value)", "class_method_signature": "PdfReader.existsName(final PdfDictionary dic, final PdfName key, final PdfName value)", "testcase": false, "constructor": false}, {"identifier": "getFontName", "parameters": "(final PdfDictionary dic)", "modifiers": "static", "return": "String", "signature": "String getFontName(final PdfDictionary dic)", "full_signature": "static String getFontName(final PdfDictionary dic)", "class_method_signature": "PdfReader.getFontName(final PdfDictionary dic)", "testcase": false, "constructor": false}, {"identifier": "getSubsetPrefix", "parameters": "(final PdfDictionary dic)", "modifiers": "static", "return": "String", "signature": "String getSubsetPrefix(final PdfDictionary dic)", "full_signature": "static String getSubsetPrefix(final PdfDictionary dic)", "class_method_signature": "PdfReader.getSubsetPrefix(final PdfDictionary dic)", "testcase": false, "constructor": false}, {"identifier": "shuffleSubsetNames", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int shuffleSubsetNames()", "full_signature": "public int shuffleSubsetNames()", "class_method_signature": "PdfReader.shuffleSubsetNames()", "testcase": false, "constructor": false}, {"identifier": "createFakeFontSubsets", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int createFakeFontSubsets()", "full_signature": "public int createFakeFontSubsets()", "class_method_signature": "PdfReader.createFakeFontSubsets()", "testcase": false, "constructor": false}, {"identifier": "getNameArray", "parameters": "(PdfObject obj)", "modifiers": "private static", "return": "PdfArray", "signature": "PdfArray getNameArray(PdfObject obj)", "full_signature": "private static PdfArray getNameArray(PdfObject obj)", "class_method_signature": "PdfReader.getNameArray(PdfObject obj)", "testcase": false, "constructor": false}, {"identifier": "getNamedDestination", "parameters": "()", "modifiers": "public", "return": "HashMap<Object, PdfObject>", "signature": "HashMap<Object, PdfObject> getNamedDestination()", "full_signature": "public HashMap<Object, PdfObject> getNamedDestination()", "class_method_signature": "PdfReader.getNamedDestination()", "testcase": false, "constructor": false}, {"identifier": "getNamedDestination", "parameters": "(final boolean keepNames)", "modifiers": "public", "return": "HashMap<Object, PdfObject>", "signature": "HashMap<Object, PdfObject> getNamedDestination(final boolean keepNames)", "full_signature": "public HashMap<Object, PdfObject> getNamedDestination(final boolean keepNames)", "class_method_signature": "PdfReader.getNamedDestination(final boolean keepNames)", "testcase": false, "constructor": false}, {"identifier": "getNamedDestinationFromNames", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "HashMap<String, PdfObject>", "signature": "HashMap<String, PdfObject> getNamedDestinationFromNames()", "full_signature": "@SuppressWarnings(\"unchecked\") public HashMap<String, PdfObject> getNamedDestinationFromNames()", "class_method_signature": "PdfReader.getNamedDestinationFromNames()", "testcase": false, "constructor": false}, {"identifier": "getNamedDestinationFromNames", "parameters": "(final boolean keepNames)", "modifiers": "public", "return": "HashMap<Object, PdfObject>", "signature": "HashMap<Object, PdfObject> getNamedDestinationFromNames(final boolean keepNames)", "full_signature": "public HashMap<Object, PdfObject> getNamedDestinationFromNames(final boolean keepNames)", "class_method_signature": "PdfReader.getNamedDestinationFromNames(final boolean keepNames)", "testcase": false, "constructor": false}, {"identifier": "getNamedDestinationFromStrings", "parameters": "()", "modifiers": "public", "return": "HashMap<String, PdfObject>", "signature": "HashMap<String, PdfObject> getNamedDestinationFromStrings()", "full_signature": "public HashMap<String, PdfObject> getNamedDestinationFromStrings()", "class_method_signature": "PdfReader.getNamedDestinationFromStrings()", "testcase": false, "constructor": false}, {"identifier": "removeFields", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeFields()", "full_signature": "public void removeFields()", "class_method_signature": "PdfReader.removeFields()", "testcase": false, "constructor": false}, {"identifier": "removeAnnotations", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeAnnotations()", "full_signature": "public void removeAnnotations()", "class_method_signature": "PdfReader.removeAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getLinks", "parameters": "(final int page)", "modifiers": "public", "return": "ArrayList<PdfAnnotation.PdfImportedLink>", "signature": "ArrayList<PdfAnnotation.PdfImportedLink> getLinks(final int page)", "full_signature": "public ArrayList<PdfAnnotation.PdfImportedLink> getLinks(final int page)", "class_method_signature": "PdfReader.getLinks(final int page)", "testcase": false, "constructor": false}, {"identifier": "iterateBookmarks", "parameters": "(PdfObject outlineRef, final HashMap<Object, PdfObject> names)", "modifiers": "private", "return": "void", "signature": "void iterateBookmarks(PdfObject outlineRef, final HashMap<Object, PdfObject> names)", "full_signature": "private void iterateBookmarks(PdfObject outlineRef, final HashMap<Object, PdfObject> names)", "class_method_signature": "PdfReader.iterateBookmarks(PdfObject outlineRef, final HashMap<Object, PdfObject> names)", "testcase": false, "constructor": false}, {"identifier": "makeRemoteNamedDestinationsLocal", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void makeRemoteNamedDestinationsLocal()", "full_signature": "public void makeRemoteNamedDestinationsLocal()", "class_method_signature": "PdfReader.makeRemoteNamedDestinationsLocal()", "testcase": false, "constructor": false}, {"identifier": "convertNamedDestination", "parameters": "(PdfObject obj, final HashMap<Object, PdfObject> names)", "modifiers": "private", "return": "boolean", "signature": "boolean convertNamedDestination(PdfObject obj, final HashMap<Object, PdfObject> names)", "full_signature": "private boolean convertNamedDestination(PdfObject obj, final HashMap<Object, PdfObject> names)", "class_method_signature": "PdfReader.convertNamedDestination(PdfObject obj, final HashMap<Object, PdfObject> names)", "testcase": false, "constructor": false}, {"identifier": "consolidateNamedDestinations", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void consolidateNamedDestinations()", "full_signature": "public void consolidateNamedDestinations()", "class_method_signature": "PdfReader.consolidateNamedDestinations()", "testcase": false, "constructor": false}, {"identifier": "replaceNamedDestination", "parameters": "(PdfObject obj, final HashMap<Object, PdfObject> names)", "modifiers": "private", "return": "boolean", "signature": "boolean replaceNamedDestination(PdfObject obj, final HashMap<Object, PdfObject> names)", "full_signature": "private boolean replaceNamedDestination(PdfObject obj, final HashMap<Object, PdfObject> names)", "class_method_signature": "PdfReader.replaceNamedDestination(PdfObject obj, final HashMap<Object, PdfObject> names)", "testcase": false, "constructor": false}, {"identifier": "duplicatePdfDictionary", "parameters": "(final PdfDictionary original, PdfDictionary copy, final PdfReader newReader)", "modifiers": "protected static", "return": "PdfDictionary", "signature": "PdfDictionary duplicatePdfDictionary(final PdfDictionary original, PdfDictionary copy, final PdfReader newReader)", "full_signature": "protected static PdfDictionary duplicatePdfDictionary(final PdfDictionary original, PdfDictionary copy, final PdfReader newReader)", "class_method_signature": "PdfReader.duplicatePdfDictionary(final PdfDictionary original, PdfDictionary copy, final PdfReader newReader)", "testcase": false, "constructor": false}, {"identifier": "duplicatePdfObject", "parameters": "(final PdfObject original, final PdfReader newReader)", "modifiers": "protected static", "return": "PdfObject", "signature": "PdfObject duplicatePdfObject(final PdfObject original, final PdfReader newReader)", "full_signature": "protected static PdfObject duplicatePdfObject(final PdfObject original, final PdfReader newReader)", "class_method_signature": "PdfReader.duplicatePdfObject(final PdfObject original, final PdfReader newReader)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "PdfReader.close()", "testcase": false, "constructor": false}, {"identifier": "removeUnusedNode", "parameters": "(PdfObject obj, final boolean hits[])", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void removeUnusedNode(PdfObject obj, final boolean hits[])", "full_signature": "@SuppressWarnings(\"unchecked\") protected void removeUnusedNode(PdfObject obj, final boolean hits[])", "class_method_signature": "PdfReader.removeUnusedNode(PdfObject obj, final boolean hits[])", "testcase": false, "constructor": false}, {"identifier": "removeUnusedObjects", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int removeUnusedObjects()", "full_signature": "public int removeUnusedObjects()", "class_method_signature": "PdfReader.removeUnusedObjects()", "testcase": false, "constructor": false}, {"identifier": "getAcroFields", "parameters": "()", "modifiers": "public", "return": "AcroFields", "signature": "AcroFields getAcroFields()", "full_signature": "public AcroFields getAcroFields()", "class_method_signature": "PdfReader.getAcroFields()", "testcase": false, "constructor": false}, {"identifier": "getJavaScript", "parameters": "(final RandomAccessFileOrArray file)", "modifiers": "public", "return": "String", "signature": "String getJavaScript(final RandomAccessFileOrArray file)", "full_signature": "public String getJavaScript(final RandomAccessFileOrArray file)", "class_method_signature": "PdfReader.getJavaScript(final RandomAccessFileOrArray file)", "testcase": false, "constructor": false}, {"identifier": "getJavaScript", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getJavaScript()", "full_signature": "public String getJavaScript()", "class_method_signature": "PdfReader.getJavaScript()", "testcase": false, "constructor": false}, {"identifier": "selectPages", "parameters": "(final String ranges)", "modifiers": "public", "return": "void", "signature": "void selectPages(final String ranges)", "full_signature": "public void selectPages(final String ranges)", "class_method_signature": "PdfReader.selectPages(final String ranges)", "testcase": false, "constructor": false}, {"identifier": "selectPages", "parameters": "(final List<Integer> pagesToKeep)", "modifiers": "public", "return": "void", "signature": "void selectPages(final List<Integer> pagesToKeep)", "full_signature": "public void selectPages(final List<Integer> pagesToKeep)", "class_method_signature": "PdfReader.selectPages(final List<Integer> pagesToKeep)", "testcase": false, "constructor": false}, {"identifier": "selectPages", "parameters": "(final List<Integer> pagesToKeep, boolean removeUnused)", "modifiers": "protected", "return": "void", "signature": "void selectPages(final List<Integer> pagesToKeep, boolean removeUnused)", "full_signature": "protected void selectPages(final List<Integer> pagesToKeep, boolean removeUnused)", "class_method_signature": "PdfReader.selectPages(final List<Integer> pagesToKeep, boolean removeUnused)", "testcase": false, "constructor": false}, {"identifier": "setViewerPreferences", "parameters": "(final int preferences)", "modifiers": "public", "return": "void", "signature": "void setViewerPreferences(final int preferences)", "full_signature": "public void setViewerPreferences(final int preferences)", "class_method_signature": "PdfReader.setViewerPreferences(final int preferences)", "testcase": false, "constructor": false}, {"identifier": "addViewerPreference", "parameters": "(final PdfName key, final PdfObject value)", "modifiers": "public", "return": "void", "signature": "void addViewerPreference(final PdfName key, final PdfObject value)", "full_signature": "public void addViewerPreference(final PdfName key, final PdfObject value)", "class_method_signature": "PdfReader.addViewerPreference(final PdfName key, final PdfObject value)", "testcase": false, "constructor": false}, {"identifier": "setViewerPreferences", "parameters": "(final PdfViewerPreferencesImp vp)", "modifiers": "public", "return": "void", "signature": "void setViewerPreferences(final PdfViewerPreferencesImp vp)", "full_signature": "public void setViewerPreferences(final PdfViewerPreferencesImp vp)", "class_method_signature": "PdfReader.setViewerPreferences(final PdfViewerPreferencesImp vp)", "testcase": false, "constructor": false}, {"identifier": "getSimpleViewerPreferences", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSimpleViewerPreferences()", "full_signature": "public int getSimpleViewerPreferences()", "class_method_signature": "PdfReader.getSimpleViewerPreferences()", "testcase": false, "constructor": false}, {"identifier": "isAppendable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAppendable()", "full_signature": "public boolean isAppendable()", "class_method_signature": "PdfReader.isAppendable()", "testcase": false, "constructor": false}, {"identifier": "setAppendable", "parameters": "(final boolean appendable)", "modifiers": "public", "return": "void", "signature": "void setAppendable(final boolean appendable)", "full_signature": "public void setAppendable(final boolean appendable)", "class_method_signature": "PdfReader.setAppendable(final boolean appendable)", "testcase": false, "constructor": false}, {"identifier": "isNewXrefType", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNewXrefType()", "full_signature": "public boolean isNewXrefType()", "class_method_signature": "PdfReader.isNewXrefType()", "testcase": false, "constructor": false}, {"identifier": "getFileLength", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getFileLength()", "full_signature": "public long getFileLength()", "class_method_signature": "PdfReader.getFileLength()", "testcase": false, "constructor": false}, {"identifier": "isHybridXref", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHybridXref()", "full_signature": "public boolean isHybridXref()", "class_method_signature": "PdfReader.isHybridXref()", "testcase": false, "constructor": false}, {"identifier": "getCryptoRef", "parameters": "()", "modifiers": "", "return": "PdfIndirectReference", "signature": "PdfIndirectReference getCryptoRef()", "full_signature": " PdfIndirectReference getCryptoRef()", "class_method_signature": "PdfReader.getCryptoRef()", "testcase": false, "constructor": false}, {"identifier": "hasUsageRights", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasUsageRights()", "full_signature": "public boolean hasUsageRights()", "class_method_signature": "PdfReader.hasUsageRights()", "testcase": false, "constructor": false}, {"identifier": "removeUsageRights", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeUsageRights()", "full_signature": "public void removeUsageRights()", "class_method_signature": "PdfReader.removeUsageRights()", "testcase": false, "constructor": false}, {"identifier": "getCertificationLevel", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCertificationLevel()", "full_signature": "public int getCertificationLevel()", "class_method_signature": "PdfReader.getCertificationLevel()", "testcase": false, "constructor": false}, {"identifier": "isOpenedWithFullPermissions", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isOpenedWithFullPermissions()", "full_signature": "public final boolean isOpenedWithFullPermissions()", "class_method_signature": "PdfReader.isOpenedWithFullPermissions()", "testcase": false, "constructor": false}, {"identifier": "getCryptoMode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCryptoMode()", "full_signature": "public int getCryptoMode()", "class_method_signature": "PdfReader.getCryptoMode()", "testcase": false, "constructor": false}, {"identifier": "isMetadataEncrypted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMetadataEncrypted()", "full_signature": "public boolean isMetadataEncrypted()", "class_method_signature": "PdfReader.isMetadataEncrypted()", "testcase": false, "constructor": false}, {"identifier": "computeUserPassword", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] computeUserPassword()", "full_signature": "public byte[] computeUserPassword()", "class_method_signature": "PdfReader.computeUserPassword()", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/PdfReader.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void close() {\n        try {\n            tokens.close();\n        }\n        catch (IOException e) {\n            throw new ExceptionConverter(e);\n        }\n    }", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "PdfReader.close()", "testcase": false, "constructor": false, "invocations": ["close"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}