{"test_class": {"identifier": "DefaultAnnotationManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "webapp/impl/src/test/java/cloud/piranha/webapp/impl/DefaultAnnotationManagerTest.java"}, "test_case": {"identifier": "testGetClasses", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetClasses() {\n        DefaultAnnotationManager manager = new DefaultAnnotationManager();\n        assertNotNull(manager.getAnnotatedClasses());\n        assertTrue(manager.getAnnotatedClasses().isEmpty());\n    }", "signature": "void testGetClasses()", "full_signature": "@Test void testGetClasses()", "class_method_signature": "DefaultAnnotationManagerTest.testGetClasses()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getAnnotatedClasses", "assertTrue", "isEmpty", "getAnnotatedClasses"]}, "focal_class": {"identifier": "DefaultAnnotationManager", "superclass": "", "interfaces": "implements AnnotationManager", "fields": [{"original_string": "private final Map<Class<?>, List<AnnotationInfo<?>>> annotations = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Class<?>, List<AnnotationInfo<?>>>", "declarator": "annotations = new ConcurrentHashMap<>()", "var_name": "annotations"}, {"original_string": "private final Map<Class<?>, List<Class<?>>> instances = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<Class<?>, List<Class<?>>>", "declarator": "instances = new ConcurrentHashMap<>()", "var_name": "instances"}], "methods": [{"identifier": "getAnnotations", "parameters": "(Class<?>... annotationClasses)", "modifiers": "@Override public", "return": "List<AnnotationInfo<?>>", "signature": "List<AnnotationInfo<?>> getAnnotations(Class<?>... annotationClasses)", "full_signature": "@Override public List<AnnotationInfo<?>> getAnnotations(Class<?>... annotationClasses)", "class_method_signature": "DefaultAnnotationManager.getAnnotations(Class<?>... annotationClasses)", "testcase": false, "constructor": false}, {"identifier": "getAnnotations", "parameters": "(Class<T> annotationClass)", "modifiers": "@Override public", "return": "List<AnnotationInfo<T>>", "signature": "List<AnnotationInfo<T>> getAnnotations(Class<T> annotationClass)", "full_signature": "@Override public List<AnnotationInfo<T>> getAnnotations(Class<T> annotationClass)", "class_method_signature": "DefaultAnnotationManager.getAnnotations(Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getInstances", "parameters": "(Class<?>... instanceClasses)", "modifiers": "@Override public", "return": "List<Class<?>>", "signature": "List<Class<?>> getInstances(Class<?>... instanceClasses)", "full_signature": "@Override public List<Class<?>> getInstances(Class<?>... instanceClasses)", "class_method_signature": "DefaultAnnotationManager.getInstances(Class<?>... instanceClasses)", "testcase": false, "constructor": false}, {"identifier": "getInstances", "parameters": "(Class<T> instanceClass)", "modifiers": "@Override public", "return": "List<Class<T>>", "signature": "List<Class<T>> getInstances(Class<T> instanceClass)", "full_signature": "@Override public List<Class<T>> getInstances(Class<T> instanceClass)", "class_method_signature": "DefaultAnnotationManager.getInstances(Class<T> instanceClass)", "testcase": false, "constructor": false}, {"identifier": "addAnnotation", "parameters": "(AnnotationInfo<?> annotationInfo)", "modifiers": "public", "return": "DefaultAnnotationManager", "signature": "DefaultAnnotationManager addAnnotation(AnnotationInfo<?> annotationInfo)", "full_signature": "public DefaultAnnotationManager addAnnotation(AnnotationInfo<?> annotationInfo)", "class_method_signature": "DefaultAnnotationManager.addAnnotation(AnnotationInfo<?> annotationInfo)", "testcase": false, "constructor": false}, {"identifier": "addInstance", "parameters": "(Class<?> instanceClass, Class<?> implementingClass)", "modifiers": "public", "return": "DefaultAnnotationManager", "signature": "DefaultAnnotationManager addInstance(Class<?> instanceClass, Class<?> implementingClass)", "full_signature": "public DefaultAnnotationManager addInstance(Class<?> instanceClass, Class<?> implementingClass)", "class_method_signature": "DefaultAnnotationManager.addInstance(Class<?> instanceClass, Class<?> implementingClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationStream", "parameters": "(Class<T> annotationClass)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Stream<AnnotationInfo<T>>", "signature": "Stream<AnnotationInfo<T>> getAnnotationStream(Class<T> annotationClass)", "full_signature": "@SuppressWarnings(\"unchecked\") private Stream<AnnotationInfo<T>> getAnnotationStream(Class<T> annotationClass)", "class_method_signature": "DefaultAnnotationManager.getAnnotationStream(Class<T> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getInstanceStream", "parameters": "(Class<T> instanceClass)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Stream<Class<T>>", "signature": "Stream<Class<T>> getInstanceStream(Class<T> instanceClass)", "full_signature": "@SuppressWarnings(\"unchecked\") private Stream<Class<T>> getInstanceStream(Class<T> instanceClass)", "class_method_signature": "DefaultAnnotationManager.getInstanceStream(Class<T> instanceClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotatedClasses", "parameters": "()", "modifiers": "@Override public", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAnnotatedClasses()", "full_signature": "@Override public Set<Class<?>> getAnnotatedClasses()", "class_method_signature": "DefaultAnnotationManager.getAnnotatedClasses()", "testcase": false, "constructor": false}, {"identifier": "getAnnotationsByTarget", "parameters": "(Class<T> annotationClass, AnnotatedElement type)", "modifiers": "@Override public", "return": "List<AnnotationInfo<T>>", "signature": "List<AnnotationInfo<T>> getAnnotationsByTarget(Class<T> annotationClass, AnnotatedElement type)", "full_signature": "@Override public List<AnnotationInfo<T>> getAnnotationsByTarget(Class<T> annotationClass, AnnotatedElement type)", "class_method_signature": "DefaultAnnotationManager.getAnnotationsByTarget(Class<T> annotationClass, AnnotatedElement type)", "testcase": false, "constructor": false}], "file": "webapp/impl/src/main/java/cloud/piranha/webapp/impl/DefaultAnnotationManager.java"}, "focal_method": {"identifier": "getAnnotatedClasses", "parameters": "()", "modifiers": "@Override public", "return": "Set<Class<?>>", "body": "@Override\n    public Set<Class<?>> getAnnotatedClasses() {\n        return new HashSet<>();\n    }", "signature": "Set<Class<?>> getAnnotatedClasses()", "full_signature": "@Override public Set<Class<?>> getAnnotatedClasses()", "class_method_signature": "DefaultAnnotationManager.getAnnotatedClasses()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}