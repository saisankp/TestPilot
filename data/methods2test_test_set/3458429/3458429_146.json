{"test_class": {"identifier": "WebSocketFrameTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Generator strictGenerator;", "modifier": "private", "type": "Generator", "declarator": "strictGenerator", "var_name": "strictGenerator"}, {"original_string": "private Generator laxGenerator;", "modifier": "private", "type": "Generator", "declarator": "laxGenerator", "var_name": "laxGenerator"}], "file": "firefly-net/src/test/java/com/fireflysource/net/websocket/common/frame/WebSocketFrameTest.java"}, "test_case": {"identifier": "testLaxInvalidClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLaxInvalidClose() {\n        WebSocketFrame frame = new CloseFrame().setFin(false);\n        ByteBuffer actual = generateWholeFrame(laxGenerator, frame);\n        String expected = \"0800\";\n        assertFrameHex(\"Lax Invalid Close Frame\", expected, actual);\n    }", "signature": "void testLaxInvalidClose()", "full_signature": "@Test public void testLaxInvalidClose()", "class_method_signature": "WebSocketFrameTest.testLaxInvalidClose()", "testcase": true, "constructor": false, "invocations": ["setFin", "generateWholeFrame", "assertFrameHex"]}, "focal_class": {"identifier": "WebSocketFrame", "superclass": "", "interfaces": "implements Frame", "fields": [{"original_string": "protected byte finRsvOp;", "modifier": "protected", "type": "byte", "declarator": "finRsvOp", "var_name": "finRsvOp"}, {"original_string": "protected boolean masked = false;", "modifier": "protected", "type": "boolean", "declarator": "masked = false", "var_name": "masked"}, {"original_string": "protected byte[] mask;", "modifier": "protected", "type": "byte[]", "declarator": "mask", "var_name": "mask"}, {"original_string": "protected ByteBuffer data;", "modifier": "protected", "type": "ByteBuffer", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "copy", "parameters": "(Frame original)", "modifiers": "public static", "return": "WebSocketFrame", "signature": "WebSocketFrame copy(Frame original)", "full_signature": "public static WebSocketFrame copy(Frame original)", "class_method_signature": "WebSocketFrame.copy(Frame original)", "testcase": false, "constructor": false}, {"identifier": "WebSocketFrame", "parameters": "(byte opcode)", "modifiers": "protected", "return": "", "signature": " WebSocketFrame(byte opcode)", "full_signature": "protected  WebSocketFrame(byte opcode)", "class_method_signature": "WebSocketFrame.WebSocketFrame(byte opcode)", "testcase": false, "constructor": true}, {"identifier": "assertValid", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void assertValid()", "full_signature": "public abstract void assertValid()", "class_method_signature": "WebSocketFrame.assertValid()", "testcase": false, "constructor": false}, {"identifier": "copyHeaders", "parameters": "(Frame frame)", "modifiers": "protected", "return": "void", "signature": "void copyHeaders(Frame frame)", "full_signature": "protected void copyHeaders(Frame frame)", "class_method_signature": "WebSocketFrame.copyHeaders(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "copyHeaders", "parameters": "(WebSocketFrame copy)", "modifiers": "protected", "return": "void", "signature": "void copyHeaders(WebSocketFrame copy)", "full_signature": "protected void copyHeaders(WebSocketFrame copy)", "class_method_signature": "WebSocketFrame.copyHeaders(WebSocketFrame copy)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "WebSocketFrame.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getMask", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getMask()", "full_signature": "@Override public byte[] getMask()", "class_method_signature": "WebSocketFrame.getMask()", "testcase": false, "constructor": false}, {"identifier": "getOpCode", "parameters": "()", "modifiers": "@Override public final", "return": "byte", "signature": "byte getOpCode()", "full_signature": "@Override public final byte getOpCode()", "class_method_signature": "WebSocketFrame.getOpCode()", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "()", "modifiers": "@Override public", "return": "ByteBuffer", "signature": "ByteBuffer getPayload()", "full_signature": "@Override public ByteBuffer getPayload()", "class_method_signature": "WebSocketFrame.getPayload()", "testcase": false, "constructor": false}, {"identifier": "getPayloadAsUTF8", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPayloadAsUTF8()", "full_signature": "public String getPayloadAsUTF8()", "class_method_signature": "WebSocketFrame.getPayloadAsUTF8()", "testcase": false, "constructor": false}, {"identifier": "getPayloadLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPayloadLength()", "full_signature": "@Override public int getPayloadLength()", "class_method_signature": "WebSocketFrame.getPayloadLength()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "Type", "signature": "Type getType()", "full_signature": "@Override public Type getType()", "class_method_signature": "WebSocketFrame.getType()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WebSocketFrame.hashCode()", "testcase": false, "constructor": false}, {"identifier": "hasPayload", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPayload()", "full_signature": "@Override public boolean hasPayload()", "class_method_signature": "WebSocketFrame.hasPayload()", "testcase": false, "constructor": false}, {"identifier": "isControlFrame", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isControlFrame()", "full_signature": "public abstract boolean isControlFrame()", "class_method_signature": "WebSocketFrame.isControlFrame()", "testcase": false, "constructor": false}, {"identifier": "isDataFrame", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isDataFrame()", "full_signature": "public abstract boolean isDataFrame()", "class_method_signature": "WebSocketFrame.isDataFrame()", "testcase": false, "constructor": false}, {"identifier": "isFin", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFin()", "full_signature": "@Override public boolean isFin()", "class_method_signature": "WebSocketFrame.isFin()", "testcase": false, "constructor": false}, {"identifier": "isMasked", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMasked()", "full_signature": "@Override public boolean isMasked()", "class_method_signature": "WebSocketFrame.isMasked()", "testcase": false, "constructor": false}, {"identifier": "isRsv1", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRsv1()", "full_signature": "@Override public boolean isRsv1()", "class_method_signature": "WebSocketFrame.isRsv1()", "testcase": false, "constructor": false}, {"identifier": "isRsv2", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRsv2()", "full_signature": "@Override public boolean isRsv2()", "class_method_signature": "WebSocketFrame.isRsv2()", "testcase": false, "constructor": false}, {"identifier": "isRsv3", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRsv3()", "full_signature": "@Override public boolean isRsv3()", "class_method_signature": "WebSocketFrame.isRsv3()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "WebSocketFrame.reset()", "testcase": false, "constructor": false}, {"identifier": "setFin", "parameters": "(boolean fin)", "modifiers": "public", "return": "WebSocketFrame", "signature": "WebSocketFrame setFin(boolean fin)", "full_signature": "public WebSocketFrame setFin(boolean fin)", "class_method_signature": "WebSocketFrame.setFin(boolean fin)", "testcase": false, "constructor": false}, {"identifier": "setMask", "parameters": "(byte[] maskingKey)", "modifiers": "public", "return": "Frame", "signature": "Frame setMask(byte[] maskingKey)", "full_signature": "public Frame setMask(byte[] maskingKey)", "class_method_signature": "WebSocketFrame.setMask(byte[] maskingKey)", "testcase": false, "constructor": false}, {"identifier": "setMasked", "parameters": "(boolean mask)", "modifiers": "public", "return": "Frame", "signature": "Frame setMasked(boolean mask)", "full_signature": "public Frame setMasked(boolean mask)", "class_method_signature": "WebSocketFrame.setMasked(boolean mask)", "testcase": false, "constructor": false}, {"identifier": "setOpCode", "parameters": "(byte op)", "modifiers": "protected", "return": "WebSocketFrame", "signature": "WebSocketFrame setOpCode(byte op)", "full_signature": "protected WebSocketFrame setOpCode(byte op)", "class_method_signature": "WebSocketFrame.setOpCode(byte op)", "testcase": false, "constructor": false}, {"identifier": "setPayload", "parameters": "(ByteBuffer buf)", "modifiers": "public", "return": "WebSocketFrame", "signature": "WebSocketFrame setPayload(ByteBuffer buf)", "full_signature": "public WebSocketFrame setPayload(ByteBuffer buf)", "class_method_signature": "WebSocketFrame.setPayload(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "setRsv1", "parameters": "(boolean rsv1)", "modifiers": "public", "return": "WebSocketFrame", "signature": "WebSocketFrame setRsv1(boolean rsv1)", "full_signature": "public WebSocketFrame setRsv1(boolean rsv1)", "class_method_signature": "WebSocketFrame.setRsv1(boolean rsv1)", "testcase": false, "constructor": false}, {"identifier": "setRsv2", "parameters": "(boolean rsv2)", "modifiers": "public", "return": "WebSocketFrame", "signature": "WebSocketFrame setRsv2(boolean rsv2)", "full_signature": "public WebSocketFrame setRsv2(boolean rsv2)", "class_method_signature": "WebSocketFrame.setRsv2(boolean rsv2)", "testcase": false, "constructor": false}, {"identifier": "setRsv3", "parameters": "(boolean rsv3)", "modifiers": "public", "return": "WebSocketFrame", "signature": "WebSocketFrame setRsv3(boolean rsv3)", "full_signature": "public WebSocketFrame setRsv3(boolean rsv3)", "class_method_signature": "WebSocketFrame.setRsv3(boolean rsv3)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WebSocketFrame.toString()", "testcase": false, "constructor": false}], "file": "firefly-net/src/main/java/com/fireflysource/net/websocket/common/frame/WebSocketFrame.java"}, "focal_method": {"identifier": "setFin", "parameters": "(boolean fin)", "modifiers": "public", "return": "WebSocketFrame", "body": "public WebSocketFrame setFin(boolean fin) {\n        // set bit 1\n        this.finRsvOp = (byte) ((finRsvOp & 0x7F) | (fin ? 0x80 : 0x00));\n        return this;\n    }", "signature": "WebSocketFrame setFin(boolean fin)", "full_signature": "public WebSocketFrame setFin(boolean fin)", "class_method_signature": "WebSocketFrame.setFin(boolean fin)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}