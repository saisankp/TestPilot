{"test_class": {"identifier": "S3BinaryStoreTest", "superclass": "extends EasyMockSupport", "interfaces": "", "fields": [{"original_string": "private static final String BUCKET = \"mock.bucket\";", "modifier": "private static final", "type": "String", "declarator": "BUCKET = \"mock.bucket\"", "var_name": "BUCKET"}, {"original_string": "private static final String TEST_KEY = \"test-key\";", "modifier": "private static final", "type": "String", "declarator": "TEST_KEY = \"test-key\"", "var_name": "TEST_KEY"}, {"original_string": "private static final String TEST_MIME = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "TEST_MIME = \"text/plain\"", "var_name": "TEST_MIME"}, {"original_string": "private static final String TEST_CONTENT = \"test-content\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONTENT = \"test-content\"", "var_name": "TEST_CONTENT"}, {"original_string": "@Rule\n    public EasyMockRule easyMock = new EasyMockRule(this);", "modifier": "@Rule\n    public", "type": "EasyMockRule", "declarator": "easyMock = new EasyMockRule(this)", "var_name": "easyMock"}, {"original_string": "@Parameter(0)\n    public String description;", "modifier": "@Parameter(0)\n    public", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "@Parameter(1)\n    public boolean deleteUnusedNatively;", "modifier": "@Parameter(1)\n    public", "type": "boolean", "declarator": "deleteUnusedNatively", "var_name": "deleteUnusedNatively"}, {"original_string": "@Parameter(2)\n    public BucketLifecycleConfiguration bucketLifecycleConfiguration;", "modifier": "@Parameter(2)\n    public", "type": "BucketLifecycleConfiguration", "declarator": "bucketLifecycleConfiguration", "var_name": "bucketLifecycleConfiguration"}, {"original_string": "@Mock\n    private AmazonS3Client s3Client;", "modifier": "@Mock\n    private", "type": "AmazonS3Client", "declarator": "s3Client", "var_name": "s3Client"}, {"original_string": "@Mock\n    private ObjectListing objectListing;", "modifier": "@Mock\n    private", "type": "ObjectListing", "declarator": "objectListing", "var_name": "objectListing"}, {"original_string": "private S3BinaryStore s3BinaryStore;", "modifier": "private", "type": "S3BinaryStore", "declarator": "s3BinaryStore", "var_name": "s3BinaryStore"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/binary/S3BinaryStoreTest.java"}, "test_case": {"identifier": "testMarkAsUnused", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMarkAsUnused() throws BinaryStoreException {\n        Capture<GetObjectTaggingRequest> getTaggingRequestCapture = Capture.newInstance();\n        GetObjectTaggingResult getTaggingResult = new GetObjectTaggingResult(new ArrayList<>());\n        getTaggingResult.getTagSet().add(new Tag(S3BinaryStore.UNUSED_TAG_KEY, String.valueOf(false)));\n        expect(s3Client.getObjectTagging(capture(getTaggingRequestCapture)))\n                .andReturn(getTaggingResult);\n\n        Capture<SetObjectTaggingRequest> setTaggingRequestCapture = Capture.newInstance();\n        expect(s3Client.setObjectTagging(capture(setTaggingRequestCapture)))\n                .andReturn(new SetObjectTaggingResult());\n\n        replayAll();\n\n        s3BinaryStore.markAsUnused(Collections.singleton(new BinaryKey(TEST_KEY)));\n\n        SetObjectTaggingRequest setTaggingRequest = setTaggingRequestCapture.getValue();\n        assertUnusedTagInSetTaggingRequest(setTaggingRequest, String.valueOf(true));\n    }", "signature": "void testMarkAsUnused()", "full_signature": "@Test public void testMarkAsUnused()", "class_method_signature": "S3BinaryStoreTest.testMarkAsUnused()", "testcase": true, "constructor": false, "invocations": ["newInstance", "add", "getTagSet", "valueOf", "andReturn", "expect", "getObjectTagging", "capture", "newInstance", "andReturn", "expect", "setObjectTagging", "capture", "replayAll", "markAsUnused", "singleton", "getValue", "assertUnusedTagInSetTaggingRequest", "valueOf"]}, "focal_class": {"identifier": "S3BinaryStore", "superclass": "extends AbstractBinaryStore", "interfaces": "", "fields": [{"original_string": "protected static final String EXTRACTED_TEXT_KEY = \"extracted-text\";", "modifier": "protected static final", "type": "String", "declarator": "EXTRACTED_TEXT_KEY = \"extracted-text\"", "var_name": "EXTRACTED_TEXT_KEY"}, {"original_string": "protected static final String USER_MIME_TYPE_KEY = \"user-mime-type\";", "modifier": "protected static final", "type": "String", "declarator": "USER_MIME_TYPE_KEY = \"user-mime-type\"", "var_name": "USER_MIME_TYPE_KEY"}, {"original_string": "@Deprecated\n    protected static final String UNUSED_KEY = \"unused\";", "modifier": "@Deprecated\n    protected static final", "type": "String", "declarator": "UNUSED_KEY = \"unused\"", "var_name": "UNUSED_KEY"}, {"original_string": "protected static final String UNUSED_TAG_KEY = \"modeshape.unused\";", "modifier": "protected static final", "type": "String", "declarator": "UNUSED_TAG_KEY = \"modeshape.unused\"", "var_name": "UNUSED_TAG_KEY"}, {"original_string": "protected static final String UNUSED_RULE = \"modeshape.unused\";", "modifier": "protected static final", "type": "String", "declarator": "UNUSED_RULE = \"modeshape.unused\"", "var_name": "UNUSED_RULE"}, {"original_string": "private AmazonS3 s3Client;", "modifier": "private", "type": "AmazonS3", "declarator": "s3Client", "var_name": "s3Client"}, {"original_string": "private final FileSystemBinaryStore fileSystemCache;", "modifier": "private final", "type": "FileSystemBinaryStore", "declarator": "fileSystemCache", "var_name": "fileSystemCache"}, {"original_string": "private final String bucketName;", "modifier": "private final", "type": "String", "declarator": "bucketName", "var_name": "bucketName"}, {"original_string": "private final boolean deleteUnusedNatively;", "modifier": "private final", "type": "boolean", "declarator": "deleteUnusedNatively", "var_name": "deleteUnusedNatively"}, {"original_string": "private boolean lifecycleUpdated = false;", "modifier": "private", "type": "boolean", "declarator": "lifecycleUpdated = false", "var_name": "lifecycleUpdated"}], "methods": [{"identifier": "S3BinaryStore", "parameters": "(String accessKey, String secretKey, String bucketName)", "modifiers": "public", "return": "", "signature": " S3BinaryStore(String accessKey, String secretKey, String bucketName)", "full_signature": "public  S3BinaryStore(String accessKey, String secretKey, String bucketName)", "class_method_signature": "S3BinaryStore.S3BinaryStore(String accessKey, String secretKey, String bucketName)", "testcase": false, "constructor": true}, {"identifier": "S3BinaryStore", "parameters": "(String accessKey, String secretKey, String bucketName, String endPoint)", "modifiers": "public", "return": "", "signature": " S3BinaryStore(String accessKey, String secretKey, String bucketName, String endPoint)", "full_signature": "public  S3BinaryStore(String accessKey, String secretKey, String bucketName, String endPoint)", "class_method_signature": "S3BinaryStore.S3BinaryStore(String accessKey, String secretKey, String bucketName, String endPoint)", "testcase": false, "constructor": true}, {"identifier": "S3BinaryStore", "parameters": "( String accessKey,\n                          String secretKey,\n                          String bucketName,\n                          String endPoint,\n                          Boolean deleteUnusedNatively )", "modifiers": "public", "return": "", "signature": " S3BinaryStore( String accessKey,\n                          String secretKey,\n                          String bucketName,\n                          String endPoint,\n                          Boolean deleteUnusedNatively )", "full_signature": "public  S3BinaryStore( String accessKey,\n                          String secretKey,\n                          String bucketName,\n                          String endPoint,\n                          Boolean deleteUnusedNatively )", "class_method_signature": "S3BinaryStore.S3BinaryStore( String accessKey,\n                          String secretKey,\n                          String bucketName,\n                          String endPoint,\n                          Boolean deleteUnusedNatively )", "testcase": false, "constructor": true}, {"identifier": "S3BinaryStore", "parameters": "(String bucketName, AmazonS3 s3Client, boolean deleteUnusedNatively)", "modifiers": "protected", "return": "", "signature": " S3BinaryStore(String bucketName, AmazonS3 s3Client, boolean deleteUnusedNatively)", "full_signature": "protected  S3BinaryStore(String bucketName, AmazonS3 s3Client, boolean deleteUnusedNatively)", "class_method_signature": "S3BinaryStore.S3BinaryStore(String bucketName, AmazonS3 s3Client, boolean deleteUnusedNatively)", "testcase": false, "constructor": true}, {"identifier": "getStoredMimeType", "parameters": "(BinaryValue binaryValue)", "modifiers": "@Override protected", "return": "String", "signature": "String getStoredMimeType(BinaryValue binaryValue)", "full_signature": "@Override protected String getStoredMimeType(BinaryValue binaryValue)", "class_method_signature": "S3BinaryStore.getStoredMimeType(BinaryValue binaryValue)", "testcase": false, "constructor": false}, {"identifier": "storeMimeType", "parameters": "(BinaryValue binaryValue, String mimeType)", "modifiers": "@Override protected", "return": "void", "signature": "void storeMimeType(BinaryValue binaryValue, String mimeType)", "full_signature": "@Override protected void storeMimeType(BinaryValue binaryValue, String mimeType)", "class_method_signature": "S3BinaryStore.storeMimeType(BinaryValue binaryValue, String mimeType)", "testcase": false, "constructor": false}, {"identifier": "storeExtractedText", "parameters": "(BinaryValue binaryValue, String extractedText)", "modifiers": "@Override public", "return": "void", "signature": "void storeExtractedText(BinaryValue binaryValue, String extractedText)", "full_signature": "@Override public void storeExtractedText(BinaryValue binaryValue, String extractedText)", "class_method_signature": "S3BinaryStore.storeExtractedText(BinaryValue binaryValue, String extractedText)", "testcase": false, "constructor": false}, {"identifier": "setS3ObjectUserProperty", "parameters": "(String key, String metadataKey, String metadataValue)", "modifiers": "private", "return": "void", "signature": "void setS3ObjectUserProperty(String key, String metadataKey, String metadataValue)", "full_signature": "private void setS3ObjectUserProperty(String key, String metadataKey, String metadataValue)", "class_method_signature": "S3BinaryStore.setS3ObjectUserProperty(String key, String metadataKey, String metadataValue)", "testcase": false, "constructor": false}, {"identifier": "getExtractedText", "parameters": "(BinaryValue binaryValue)", "modifiers": "@Override public", "return": "String", "signature": "String getExtractedText(BinaryValue binaryValue)", "full_signature": "@Override public String getExtractedText(BinaryValue binaryValue)", "class_method_signature": "S3BinaryStore.getExtractedText(BinaryValue binaryValue)", "testcase": false, "constructor": false}, {"identifier": "storeValue", "parameters": "(InputStream stream, boolean markAsUnused)", "modifiers": "@Override public", "return": "BinaryValue", "signature": "BinaryValue storeValue(InputStream stream, boolean markAsUnused)", "full_signature": "@Override public BinaryValue storeValue(InputStream stream, boolean markAsUnused)", "class_method_signature": "S3BinaryStore.storeValue(InputStream stream, boolean markAsUnused)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(BinaryKey key)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(BinaryKey key)", "full_signature": "@Override public InputStream getInputStream(BinaryKey key)", "class_method_signature": "S3BinaryStore.getInputStream(BinaryKey key)", "testcase": false, "constructor": false}, {"identifier": "markAsUsed", "parameters": "(Iterable<BinaryKey> keys)", "modifiers": "@Override public", "return": "void", "signature": "void markAsUsed(Iterable<BinaryKey> keys)", "full_signature": "@Override public void markAsUsed(Iterable<BinaryKey> keys)", "class_method_signature": "S3BinaryStore.markAsUsed(Iterable<BinaryKey> keys)", "testcase": false, "constructor": false}, {"identifier": "markAsUnused", "parameters": "(Iterable<BinaryKey> keys)", "modifiers": "@Override public", "return": "void", "signature": "void markAsUnused(Iterable<BinaryKey> keys)", "full_signature": "@Override public void markAsUnused(Iterable<BinaryKey> keys)", "class_method_signature": "S3BinaryStore.markAsUnused(Iterable<BinaryKey> keys)", "testcase": false, "constructor": false}, {"identifier": "setS3ObjectTag", "parameters": "(String objectKey, String tagKey, String tagValue)", "modifiers": "private", "return": "void", "signature": "void setS3ObjectTag(String objectKey, String tagKey, String tagValue)", "full_signature": "private void setS3ObjectTag(String objectKey, String tagKey, String tagValue)", "class_method_signature": "S3BinaryStore.setS3ObjectTag(String objectKey, String tagKey, String tagValue)", "testcase": false, "constructor": false}, {"identifier": "mergeS3TagSet", "parameters": "(List<Tag> initialTags, Tag changeTag)", "modifiers": "private", "return": "List<Tag>", "signature": "List<Tag> mergeS3TagSet(List<Tag> initialTags, Tag changeTag)", "full_signature": "private List<Tag> mergeS3TagSet(List<Tag> initialTags, Tag changeTag)", "class_method_signature": "S3BinaryStore.mergeS3TagSet(List<Tag> initialTags, Tag changeTag)", "testcase": false, "constructor": false}, {"identifier": "removeValuesUnusedLongerThan", "parameters": "(long minimumAge, TimeUnit timeUnit)", "modifiers": "@Override public", "return": "void", "signature": "void removeValuesUnusedLongerThan(long minimumAge, TimeUnit timeUnit)", "full_signature": "@Override public void removeValuesUnusedLongerThan(long minimumAge, TimeUnit timeUnit)", "class_method_signature": "S3BinaryStore.removeValuesUnusedLongerThan(long minimumAge, TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "getAllBinaryKeys", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<BinaryKey>", "signature": "Iterable<BinaryKey> getAllBinaryKeys()", "full_signature": "@Override public Iterable<BinaryKey> getAllBinaryKeys()", "class_method_signature": "S3BinaryStore.getAllBinaryKeys()", "testcase": false, "constructor": false}, {"identifier": "migrateUnusedMetadataToTags", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void migrateUnusedMetadataToTags()", "full_signature": "public void migrateUnusedMetadataToTags()", "class_method_signature": "S3BinaryStore.migrateUnusedMetadataToTags()", "testcase": false, "constructor": false}, {"identifier": "supplyObjects", "parameters": "()", "modifiers": "private", "return": "Supplier<Stream<S3ObjectSummary>>", "signature": "Supplier<Stream<S3ObjectSummary>> supplyObjects()", "full_signature": "private Supplier<Stream<S3ObjectSummary>> supplyObjects()", "class_method_signature": "S3BinaryStore.supplyObjects()", "testcase": false, "constructor": false}, {"identifier": "updateBucketLifecycle", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateBucketLifecycle()", "full_signature": "private void updateBucketLifecycle()", "class_method_signature": "S3BinaryStore.updateBucketLifecycle()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/binary/S3BinaryStore.java"}, "focal_method": {"identifier": "markAsUnused", "parameters": "(Iterable<BinaryKey> keys)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void markAsUnused(Iterable<BinaryKey> keys) throws BinaryStoreException {\n        for (BinaryKey key : keys) {\n            setS3ObjectTag(key.toString(), UNUSED_TAG_KEY, String.valueOf(true));\n        }\n    }", "signature": "void markAsUnused(Iterable<BinaryKey> keys)", "full_signature": "@Override public void markAsUnused(Iterable<BinaryKey> keys)", "class_method_signature": "S3BinaryStore.markAsUnused(Iterable<BinaryKey> keys)", "testcase": false, "constructor": false, "invocations": ["setS3ObjectTag", "toString", "valueOf"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}