{"test_class": {"identifier": "PerspectivesExplorerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    PerspectivesExplorer.View viewM;", "modifier": "@Mock", "type": "PerspectivesExplorer.View", "declarator": "viewM", "var_name": "viewM"}, {"original_string": "@Mock\n    PerspectivePluginManager perspectivePluginManagerM;", "modifier": "@Mock", "type": "PerspectivePluginManager", "declarator": "perspectivePluginManagerM", "var_name": "perspectivePluginManagerM"}, {"original_string": "@Mock\n    PlaceManager placeManagerM;", "modifier": "@Mock", "type": "PlaceManager", "declarator": "placeManagerM", "var_name": "placeManagerM"}, {"original_string": "@Mock\n    PluginController pluginControllerM;", "modifier": "@Mock", "type": "PluginController", "declarator": "pluginControllerM", "var_name": "pluginControllerM"}, {"original_string": "@Mock\n    NewPluginPopUp newPluginPopUpM;", "modifier": "@Mock", "type": "NewPluginPopUp", "declarator": "newPluginPopUpM", "var_name": "newPluginPopUpM"}, {"original_string": "@Mock\n    ContentManagerI18n i18nM;", "modifier": "@Mock", "type": "ContentManagerI18n", "declarator": "i18nM", "var_name": "i18nM"}, {"original_string": "PerspectivesExplorer perspectivesExplorer;", "modifier": "", "type": "PerspectivesExplorer", "declarator": "perspectivesExplorer", "var_name": "perspectivesExplorer"}, {"original_string": "Plugin a = mkPlugin(\"a\"), b = mkPlugin(\"B\"), c = mkPlugin(\"cEE\");", "modifier": "", "type": "Plugin", "declarator": "a = mkPlugin(\"a\")", "var_name": "a"}, {"original_string": "List<Plugin> pluginList = Arrays.asList(b, c, a);", "modifier": "", "type": "List<Plugin>", "declarator": "pluginList = Arrays.asList(b, c, a)", "var_name": "pluginList"}], "file": "dashbuilder-client/dashbuilder-cms-client/src/test/java/org/dashbuilder/client/cms/widget/PerspectivesExplorerTest.java"}, "test_case": {"identifier": "testPerspectiveReadAccessDenied", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPerspectiveReadAccessDenied() {\n        when(pluginControllerM.canRead(a)).thenReturn(true);\n        when(pluginControllerM.canRead(b)).thenReturn(true);\n\n        perspectivesExplorer.show();\n\n        InOrder inOrder = inOrder(viewM);\n        inOrder.verify(viewM).clear();\n        inOrder.verify(viewM).addPerspective(eq(\"a\"), any());\n        inOrder.verify(viewM).addPerspective(eq(\"B\"), any());\n        inOrder.verify(viewM, never()).addPerspective(eq(\"cEE\"), any());\n    }", "signature": "void testPerspectiveReadAccessDenied()", "full_signature": "@Test public void testPerspectiveReadAccessDenied()", "class_method_signature": "PerspectivesExplorerTest.testPerspectiveReadAccessDenied()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "canRead", "thenReturn", "when", "canRead", "show", "inOrder", "clear", "verify", "addPerspective", "verify", "eq", "any", "addPerspective", "verify", "eq", "any", "addPerspective", "verify", "never", "eq", "any"]}, "focal_class": {"identifier": "PerspectivesExplorer", "superclass": "", "interfaces": "implements IsElement", "fields": [{"original_string": "View view;", "modifier": "", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "PerspectivePluginManager perspectivePluginManager;", "modifier": "", "type": "PerspectivePluginManager", "declarator": "perspectivePluginManager", "var_name": "perspectivePluginManager"}, {"original_string": "PlaceManager placeManager;", "modifier": "", "type": "PlaceManager", "declarator": "placeManager", "var_name": "placeManager"}, {"original_string": "PluginController pluginController;", "modifier": "", "type": "PluginController", "declarator": "pluginController", "var_name": "pluginController"}, {"original_string": "NewPluginPopUp newPluginPopUp;", "modifier": "", "type": "NewPluginPopUp", "declarator": "newPluginPopUp", "var_name": "newPluginPopUp"}, {"original_string": "ContentManagerI18n i18n;", "modifier": "", "type": "ContentManagerI18n", "declarator": "i18n", "var_name": "i18n"}, {"original_string": "Command onExpandCommand;", "modifier": "", "type": "Command", "declarator": "onExpandCommand", "var_name": "onExpandCommand"}, {"original_string": "boolean expanded;", "modifier": "", "type": "boolean", "declarator": "expanded", "var_name": "expanded"}], "methods": [{"identifier": "PerspectivesExplorer", "parameters": "(View view,\n                                PerspectivePluginManager perspectivePluginManager,\n                                PluginController pluginController,\n                                NewPluginPopUp newPluginPopUp,\n                                PlaceManager placeManager,\n                                ContentManagerI18n i18n)", "modifiers": "@Inject public", "return": "", "signature": " PerspectivesExplorer(View view,\n                                PerspectivePluginManager perspectivePluginManager,\n                                PluginController pluginController,\n                                NewPluginPopUp newPluginPopUp,\n                                PlaceManager placeManager,\n                                ContentManagerI18n i18n)", "full_signature": "@Inject public  PerspectivesExplorer(View view,\n                                PerspectivePluginManager perspectivePluginManager,\n                                PluginController pluginController,\n                                NewPluginPopUp newPluginPopUp,\n                                PlaceManager placeManager,\n                                ContentManagerI18n i18n)", "class_method_signature": "PerspectivesExplorer.PerspectivesExplorer(View view,\n                                PerspectivePluginManager perspectivePluginManager,\n                                PluginController pluginController,\n                                NewPluginPopUp newPluginPopUp,\n                                PlaceManager placeManager,\n                                ContentManagerI18n i18n)", "testcase": false, "constructor": true}, {"identifier": "getElement", "parameters": "()", "modifiers": "@Override public", "return": "HTMLElement", "signature": "HTMLElement getElement()", "full_signature": "@Override public HTMLElement getElement()", "class_method_signature": "PerspectivesExplorer.getElement()", "testcase": false, "constructor": false}, {"identifier": "setOnExpandCommand", "parameters": "(Command onExpandCommand)", "modifiers": "public", "return": "void", "signature": "void setOnExpandCommand(Command onExpandCommand)", "full_signature": "public void setOnExpandCommand(Command onExpandCommand)", "class_method_signature": "PerspectivesExplorer.setOnExpandCommand(Command onExpandCommand)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void show()", "full_signature": "public void show()", "class_method_signature": "PerspectivesExplorer.show()", "testcase": false, "constructor": false}, {"identifier": "onPerspectiveClick", "parameters": "(Plugin plugin)", "modifiers": "public", "return": "void", "signature": "void onPerspectiveClick(Plugin plugin)", "full_signature": "public void onPerspectiveClick(Plugin plugin)", "class_method_signature": "PerspectivesExplorer.onPerspectiveClick(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "isExpanded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExpanded()", "full_signature": "public boolean isExpanded()", "class_method_signature": "PerspectivesExplorer.isExpanded()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void expand()", "full_signature": "public void expand()", "class_method_signature": "PerspectivesExplorer.expand()", "testcase": false, "constructor": false}, {"identifier": "collapse", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void collapse()", "full_signature": "public void collapse()", "class_method_signature": "PerspectivesExplorer.collapse()", "testcase": false, "constructor": false}, {"identifier": "expandOrCollapse", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void expandOrCollapse()", "full_signature": "public void expandOrCollapse()", "class_method_signature": "PerspectivesExplorer.expandOrCollapse()", "testcase": false, "constructor": false}, {"identifier": "setMaximized", "parameters": "(boolean maximized)", "modifiers": "public", "return": "void", "signature": "void setMaximized(boolean maximized)", "full_signature": "public void setMaximized(boolean maximized)", "class_method_signature": "PerspectivesExplorer.setMaximized(boolean maximized)", "testcase": false, "constructor": false}, {"identifier": "createNewPerspective", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void createNewPerspective()", "full_signature": "public void createNewPerspective()", "class_method_signature": "PerspectivesExplorer.createNewPerspective()", "testcase": false, "constructor": false}, {"identifier": "onPerspectivePluginsChanged", "parameters": "(@Observes final PerspectivePluginsChangedEvent event)", "modifiers": "public", "return": "void", "signature": "void onPerspectivePluginsChanged(@Observes final PerspectivePluginsChangedEvent event)", "full_signature": "public void onPerspectivePluginsChanged(@Observes final PerspectivePluginsChangedEvent event)", "class_method_signature": "PerspectivesExplorer.onPerspectivePluginsChanged(@Observes final PerspectivePluginsChangedEvent event)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-cms-client/src/main/java/org/dashbuilder/client/cms/widget/PerspectivesExplorer.java"}, "focal_method": {"identifier": "show", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void show() {\n        view.clear();\n        view.setTitle(i18n.capitalizeFirst(i18n.getPerspectivesResourceName()));\n        view.setNewMenuName(i18n.getContentExplorerNew());\n        view.setNewMenuVisible(pluginController.canCreatePerspectives());\n        view.setPerspectiveName(i18n.capitalizeFirst(i18n.getPerspectiveResourceName()));\n\n        perspectivePluginManager.getPerspectivePlugins(perspectivePlugins -> {\n\n            List<Plugin> filteredPlugins = perspectivePlugins.stream()\n                    .filter(pluginController::canRead)\n                    .sorted((p1, p2) -> p1.getName().compareToIgnoreCase(p2.getName()))\n                    .collect(Collectors.toList());\n\n\n            if (filteredPlugins.isEmpty()) {\n                view.showEmpty(i18n.getNoPerspectives());\n            } else {\n                filteredPlugins.forEach(p -> view.addPerspective(p.getName(), () -> onPerspectiveClick(p)));\n            }\n        });\n\n        this.expand();\n    }", "signature": "void show()", "full_signature": "public void show()", "class_method_signature": "PerspectivesExplorer.show()", "testcase": false, "constructor": false, "invocations": ["clear", "setTitle", "capitalizeFirst", "getPerspectivesResourceName", "setNewMenuName", "getContentExplorerNew", "setNewMenuVisible", "canCreatePerspectives", "setPerspectiveName", "capitalizeFirst", "getPerspectiveResourceName", "getPerspectivePlugins", "collect", "sorted", "filter", "stream", "compareToIgnoreCase", "getName", "getName", "toList", "isEmpty", "showEmpty", "getNoPerspectives", "forEach", "addPerspective", "getName", "onPerspectiveClick", "expand"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}