{"test_class": {"identifier": "BlockchainServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BlockchainService blockchainService;", "modifier": "private", "type": "BlockchainService", "declarator": "blockchainService", "var_name": "blockchainService"}, {"original_string": "private Blockchain blockchain;", "modifier": "private", "type": "Blockchain", "declarator": "blockchain", "var_name": "blockchain"}], "file": "elrond-core/src/test/java/network/elrond/blockchain/BlockchainServiceImplTest.java"}, "test_case": {"identifier": "testGetWithNullBlockchainShouldThrowExtension", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testGetWithNullBlockchainShouldThrowExtension() throws IOException, ClassNotFoundException {\n        blockchainService.get(\"testHash\", null, BlockchainUnitType.BLOCK);\n    }", "signature": "void testGetWithNullBlockchainShouldThrowExtension()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testGetWithNullBlockchainShouldThrowExtension()", "class_method_signature": "BlockchainServiceImplTest.testGetWithNullBlockchainShouldThrowExtension()", "testcase": true, "constructor": false, "invocations": ["get"]}, "focal_class": {"identifier": "BlockchainServiceImpl", "superclass": "", "interfaces": "implements BlockchainService", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(BlockchainServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(BlockchainServiceImpl.class)", "var_name": "logger"}], "methods": [{"identifier": "contains", "parameters": "(H hash, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "@Override public synchronized", "return": "boolean", "signature": "boolean contains(H hash, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "@Override public synchronized boolean contains(H hash, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.contains(H hash, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "putAndWait", "parameters": "(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "public synchronized", "return": "void", "signature": "void putAndWait(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "public synchronized void putAndWait(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.putAndWait(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void put(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "@Override public synchronized void put(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.put(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "putLocal", "parameters": "(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void putLocal(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "@Override public synchronized void putLocal(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.putLocal(H hash, B object, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(H hash, B object, Blockchain blockchain, BlockchainUnitType type, boolean await)", "modifiers": "private", "return": "void", "signature": "void put(H hash, B object, Blockchain blockchain, BlockchainUnitType type, boolean await)", "full_signature": "private void put(H hash, B object, Blockchain blockchain, BlockchainUnitType type, boolean await)", "class_method_signature": "BlockchainServiceImpl.put(H hash, B object, Blockchain blockchain, BlockchainUnitType type, boolean await)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "(List<H> hashes, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "@Override public synchronized", "return": "List<B>", "signature": "List<B> getAll(List<H> hashes, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "@Override public synchronized List<B> getAll(List<H> hashes, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.getAll(List<H> hashes, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(H hash, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "@Override public synchronized", "return": "B", "signature": "B get(H hash, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "@Override public synchronized B get(H hash, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.get(H hash, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "getLocal", "parameters": "(H hash, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "@Override public synchronized", "return": "B", "signature": "B getLocal(H hash, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "@Override public synchronized B getLocal(H hash, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.getLocal(H hash, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false}, {"identifier": "getDataFromDatabase", "parameters": "(H hash, BlockchainPersistenceUnit<H, B> unit)", "modifiers": "private", "return": "B", "signature": "B getDataFromDatabase(H hash, BlockchainPersistenceUnit<H, B> unit)", "full_signature": "private B getDataFromDatabase(H hash, BlockchainPersistenceUnit<H, B> unit)", "class_method_signature": "BlockchainServiceImpl.getDataFromDatabase(H hash, BlockchainPersistenceUnit<H, B> unit)", "testcase": false, "constructor": false}, {"identifier": "decodeObject", "parameters": "(Class<B> clazz, String strJSONData)", "modifiers": "private", "return": "B", "signature": "B decodeObject(Class<B> clazz, String strJSONData)", "full_signature": "private B decodeObject(Class<B> clazz, String strJSONData)", "class_method_signature": "BlockchainServiceImpl.decodeObject(Class<B> clazz, String strJSONData)", "testcase": false, "constructor": false}, {"identifier": "isOffline", "parameters": "(P2PConnection connection)", "modifiers": "protected", "return": "boolean", "signature": "boolean isOffline(P2PConnection connection)", "full_signature": "protected boolean isOffline(P2PConnection connection)", "class_method_signature": "BlockchainServiceImpl.isOffline(P2PConnection connection)", "testcase": false, "constructor": false}, {"identifier": "requestData", "parameters": "(H hash, BlockchainUnitType unitType, P2PConnection connection)", "modifiers": "private", "return": "B", "signature": "B requestData(H hash, BlockchainUnitType unitType, P2PConnection connection)", "full_signature": "private B requestData(H hash, BlockchainUnitType unitType, P2PConnection connection)", "class_method_signature": "BlockchainServiceImpl.requestData(H hash, BlockchainUnitType unitType, P2PConnection connection)", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/blockchain/BlockchainServiceImpl.java"}, "focal_method": {"identifier": "get", "parameters": "(H hash, Blockchain blockchain, BlockchainUnitType type)", "modifiers": "@Override public synchronized", "return": "B", "body": "@Override\n    public synchronized <H extends Object, B extends Serializable> B get(H hash, Blockchain blockchain, BlockchainUnitType type) throws IOException, ClassNotFoundException {\n        logger.traceEntry(\"params: {} {} {}\", hash, blockchain, type);\n\n        Util.check(hash != null, \"hash!=null\");\n        Util.check(blockchain != null, \"blockchain!=null\");\n\n        BlockchainPersistenceUnit<H, B> unit = blockchain.getUnit(type);\n        P2PConnection connection = blockchain.getConnection();\n\n        Map<H, B> cache = unit.getCache();\n\n        boolean exists = cache.get(hash) != null;\n        if (!exists) {\n            B object = getDataFromDatabase(hash, unit);\n            if (object == null) {\n                object = requestData(hash, type, connection);\n            }\n\n            return object;\n        }\n\n        B result = cache.get(hash);\n        return logger.traceExit(result);\n\n    }", "signature": "B get(H hash, Blockchain blockchain, BlockchainUnitType type)", "full_signature": "@Override public synchronized B get(H hash, Blockchain blockchain, BlockchainUnitType type)", "class_method_signature": "BlockchainServiceImpl.get(H hash, Blockchain blockchain, BlockchainUnitType type)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "check", "check", "getUnit", "getConnection", "getCache", "get", "getDataFromDatabase", "requestData", "get", "traceExit"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}