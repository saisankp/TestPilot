{"test_class": {"identifier": "GraphTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/uk/ac/ebi/beam/GraphTest.java"}, "test_case": {"identifier": "adjacent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void adjacent() {\n        Graph g = new Graph(5);\n        g.addAtom(mock(Atom.class));\n        g.addAtom(mock(Atom.class));\n        g.addAtom(mock(Atom.class));\n        g.addEdge(new Edge(0, 1, Bond.IMPLICIT));\n        g.addEdge(new Edge(1, 2, Bond.IMPLICIT));\n        assertTrue(g.adjacent(0, 1));\n        assertTrue(g.adjacent(1, 2));\n        assertFalse(g.adjacent(0, 2));\n    }", "signature": "void adjacent()", "full_signature": "@Test public void adjacent()", "class_method_signature": "GraphTest.adjacent()", "testcase": true, "constructor": false, "invocations": ["addAtom", "mock", "addAtom", "mock", "addAtom", "mock", "addEdge", "addEdge", "assertTrue", "adjacent", "assertTrue", "adjacent", "assertFalse", "adjacent"]}, "focal_class": {"identifier": "Graph", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int HAS_AROM     = 0x1;", "modifier": "public static final", "type": "int", "declarator": "HAS_AROM     = 0x1", "var_name": "HAS_AROM"}, {"original_string": "public static final int HAS_ATM_STRO = 0x2;", "modifier": "public static final", "type": "int", "declarator": "HAS_ATM_STRO = 0x2", "var_name": "HAS_ATM_STRO"}, {"original_string": "public static final int HAS_EXT_STRO = 0x4;", "modifier": "public static final", "type": "int", "declarator": "HAS_EXT_STRO = 0x4", "var_name": "HAS_EXT_STRO"}, {"original_string": "public static final int HAS_BND_STRO = 0x8;", "modifier": "public static final", "type": "int", "declarator": "HAS_BND_STRO = 0x8", "var_name": "HAS_BND_STRO"}, {"original_string": "public static final int HAS_STRO = HAS_ATM_STRO |  HAS_EXT_STRO | HAS_BND_STRO;", "modifier": "public static final", "type": "int", "declarator": "HAS_STRO = HAS_ATM_STRO |  HAS_EXT_STRO | HAS_BND_STRO", "var_name": "HAS_STRO"}, {"original_string": "private Atom[] atoms;", "modifier": "private", "type": "Atom[]", "declarator": "atoms", "var_name": "atoms"}, {"original_string": "private int[] degrees;", "modifier": "private", "type": "int[]", "declarator": "degrees", "var_name": "degrees"}, {"original_string": "private int[] valences;", "modifier": "private", "type": "int[]", "declarator": "valences", "var_name": "valences"}, {"original_string": "private Edge[][] edges;", "modifier": "private", "type": "Edge[][]", "declarator": "edges", "var_name": "edges"}, {"original_string": "private Topology topologies[];", "modifier": "private", "type": "Topology", "declarator": "topologies[]", "var_name": "topologies"}, {"original_string": "private int order, size;", "modifier": "private", "type": "int", "declarator": "order", "var_name": "order"}, {"original_string": "private int flags = 0;", "modifier": "private", "type": "int", "declarator": "flags = 0", "var_name": "flags"}, {"original_string": "private String title;", "modifier": "private", "type": "String", "declarator": "title", "var_name": "title"}], "methods": [{"identifier": "Graph", "parameters": "(int expSize)", "modifiers": "", "return": "", "signature": " Graph(int expSize)", "full_signature": "  Graph(int expSize)", "class_method_signature": "Graph.Graph(int expSize)", "testcase": false, "constructor": true}, {"identifier": "Graph", "parameters": "(Graph org)", "modifiers": "", "return": "", "signature": " Graph(Graph org)", "full_signature": "  Graph(Graph org)", "class_method_signature": "Graph.Graph(Graph org)", "testcase": false, "constructor": true}, {"identifier": "setAtom", "parameters": "(int i, Atom a)", "modifiers": "", "return": "void", "signature": "void setAtom(int i, Atom a)", "full_signature": " void setAtom(int i, Atom a)", "class_method_signature": "Graph.setAtom(int i, Atom a)", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureCapacity()", "full_signature": "private void ensureCapacity()", "class_method_signature": "Graph.ensureCapacity()", "testcase": false, "constructor": false}, {"identifier": "addAtom", "parameters": "(Atom a)", "modifiers": "", "return": "int", "signature": "int addAtom(Atom a)", "full_signature": " int addAtom(Atom a)", "class_method_signature": "Graph.addAtom(Atom a)", "testcase": false, "constructor": false}, {"identifier": "atom", "parameters": "(int i)", "modifiers": "public", "return": "Atom", "signature": "Atom atom(int i)", "full_signature": "public Atom atom(int i)", "class_method_signature": "Graph.atom(int i)", "testcase": false, "constructor": false}, {"identifier": "addEdge", "parameters": "(Edge e)", "modifiers": "", "return": "void", "signature": "void addEdge(Edge e)", "full_signature": " void addEdge(Edge e)", "class_method_signature": "Graph.addEdge(Edge e)", "testcase": false, "constructor": false}, {"identifier": "ensureEdgeCapacity", "parameters": "(int i)", "modifiers": "private", "return": "void", "signature": "void ensureEdgeCapacity(int i)", "full_signature": "private void ensureEdgeCapacity(int i)", "class_method_signature": "Graph.ensureEdgeCapacity(int i)", "testcase": false, "constructor": false}, {"identifier": "degree", "parameters": "(int u)", "modifiers": "public", "return": "int", "signature": "int degree(int u)", "full_signature": "public int degree(int u)", "class_method_signature": "Graph.degree(int u)", "testcase": false, "constructor": false}, {"identifier": "bondedValence", "parameters": "(int u)", "modifiers": "", "return": "int", "signature": "int bondedValence(int u)", "full_signature": " int bondedValence(int u)", "class_method_signature": "Graph.bondedValence(int u)", "testcase": false, "constructor": false}, {"identifier": "updateBondedValence", "parameters": "(int i, int x)", "modifiers": "", "return": "void", "signature": "void updateBondedValence(int i, int x)", "full_signature": " void updateBondedValence(int i, int x)", "class_method_signature": "Graph.updateBondedValence(int i, int x)", "testcase": false, "constructor": false}, {"identifier": "edges", "parameters": "(int u)", "modifiers": "public", "return": "List<Edge>", "signature": "List<Edge> edges(int u)", "full_signature": "public List<Edge> edges(int u)", "class_method_signature": "Graph.edges(int u)", "testcase": false, "constructor": false}, {"identifier": "neighbors", "parameters": "(int u)", "modifiers": "public", "return": "int[]", "signature": "int[] neighbors(int u)", "full_signature": "public int[] neighbors(int u)", "class_method_signature": "Graph.neighbors(int u)", "testcase": false, "constructor": false}, {"identifier": "adjacent", "parameters": "(int u, int v)", "modifiers": "public", "return": "boolean", "signature": "boolean adjacent(int u, int v)", "full_signature": "public boolean adjacent(int u, int v)", "class_method_signature": "Graph.adjacent(int u, int v)", "testcase": false, "constructor": false}, {"identifier": "implHCount", "parameters": "(int u)", "modifiers": "public", "return": "int", "signature": "int implHCount(int u)", "full_signature": "public int implHCount(int u)", "class_method_signature": "Graph.implHCount(int u)", "testcase": false, "constructor": false}, {"identifier": "edge", "parameters": "(int u, int v)", "modifiers": "public", "return": "Edge", "signature": "Edge edge(int u, int v)", "full_signature": "public Edge edge(int u, int v)", "class_method_signature": "Graph.edge(int u, int v)", "testcase": false, "constructor": false}, {"identifier": "edgeAt", "parameters": "(int u, int j)", "modifiers": "public", "return": "Edge", "signature": "Edge edgeAt(int u, int j)", "full_signature": "public Edge edgeAt(int u, int j)", "class_method_signature": "Graph.edgeAt(int u, int j)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(Edge org, Edge rep)", "modifiers": "", "return": "void", "signature": "void replace(Edge org, Edge rep)", "full_signature": " void replace(Edge org, Edge rep)", "class_method_signature": "Graph.replace(Edge org, Edge rep)", "testcase": false, "constructor": false}, {"identifier": "addTopology", "parameters": "(Topology t)", "modifiers": "", "return": "void", "signature": "void addTopology(Topology t)", "full_signature": " void addTopology(Topology t)", "class_method_signature": "Graph.addTopology(Topology t)", "testcase": false, "constructor": false}, {"identifier": "clearTopology", "parameters": "(int v)", "modifiers": "", "return": "void", "signature": "void clearTopology(int v)", "full_signature": " void clearTopology(int v)", "class_method_signature": "Graph.clearTopology(int v)", "testcase": false, "constructor": false}, {"identifier": "topologyOf", "parameters": "(int u)", "modifiers": "public", "return": "Topology", "signature": "Topology topologyOf(int u)", "full_signature": "public Topology topologyOf(int u)", "class_method_signature": "Graph.topologyOf(int u)", "testcase": false, "constructor": false}, {"identifier": "configurationOf", "parameters": "(int u)", "modifiers": "public", "return": "Configuration", "signature": "Configuration configurationOf(int u)", "full_signature": "public Configuration configurationOf(int u)", "class_method_signature": "Graph.configurationOf(int u)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int order()", "full_signature": "public int order()", "class_method_signature": "Graph.order()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Graph.size()", "testcase": false, "constructor": false}, {"identifier": "fromSmiles", "parameters": "(String smi)", "modifiers": "public static", "return": "Graph", "signature": "Graph fromSmiles(String smi)", "full_signature": "public static Graph fromSmiles(String smi)", "class_method_signature": "Graph.fromSmiles(String smi)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String smi, boolean strict, Set<String> warnings)", "modifiers": "public static", "return": "Graph", "signature": "Graph parse(String smi, boolean strict, Set<String> warnings)", "full_signature": "public static Graph parse(String smi, boolean strict, Set<String> warnings)", "class_method_signature": "Graph.parse(String smi, boolean strict, Set<String> warnings)", "testcase": false, "constructor": false}, {"identifier": "toSmiles", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toSmiles()", "full_signature": "public String toSmiles()", "class_method_signature": "Graph.toSmiles()", "testcase": false, "constructor": false}, {"identifier": "toSmiles", "parameters": "(int[] visitedAt)", "modifiers": "public", "return": "String", "signature": "String toSmiles(int[] visitedAt)", "full_signature": "public String toSmiles(int[] visitedAt)", "class_method_signature": "Graph.toSmiles(int[] visitedAt)", "testcase": false, "constructor": false}, {"identifier": "aromatic", "parameters": "()", "modifiers": "public", "return": "Graph", "signature": "Graph aromatic()", "full_signature": "public Graph aromatic()", "class_method_signature": "Graph.aromatic()", "testcase": false, "constructor": false}, {"identifier": "resonate", "parameters": "()", "modifiers": "public", "return": "Graph", "signature": "Graph resonate()", "full_signature": "public Graph resonate()", "class_method_signature": "Graph.resonate()", "testcase": false, "constructor": false}, {"identifier": "kekule", "parameters": "()", "modifiers": "public", "return": "Graph", "signature": "Graph kekule()", "full_signature": "public Graph kekule()", "class_method_signature": "Graph.kekule()", "testcase": false, "constructor": false}, {"identifier": "assignable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean assignable()", "full_signature": "public boolean assignable()", "class_method_signature": "Graph.assignable()", "testcase": false, "constructor": false}, {"identifier": "permute", "parameters": "(int[] p)", "modifiers": "public", "return": "Graph", "signature": "Graph permute(int[] p)", "full_signature": "public Graph permute(int[] p)", "class_method_signature": "Graph.permute(int[] p)", "testcase": false, "constructor": false}, {"identifier": "atoms", "parameters": "()", "modifiers": "public", "return": "Iterable<Atom>", "signature": "Iterable<Atom> atoms()", "full_signature": "public Iterable<Atom> atoms()", "class_method_signature": "Graph.atoms()", "testcase": false, "constructor": false}, {"identifier": "edges", "parameters": "()", "modifiers": "public", "return": "Iterable<Edge>", "signature": "Iterable<Edge> edges()", "full_signature": "public Iterable<Edge> edges()", "class_method_signature": "Graph.edges()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Function<Graph, T> f)", "modifiers": "", "return": "T", "signature": "T apply(Function<Graph, T> f)", "full_signature": " T apply(Function<Graph, T> f)", "class_method_signature": "Graph.apply(Function<Graph, T> f)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clear()", "full_signature": " void clear()", "class_method_signature": "Graph.clear()", "testcase": false, "constructor": false}, {"identifier": "getFlags", "parameters": "(final int mask)", "modifiers": "public", "return": "int", "signature": "int getFlags(final int mask)", "full_signature": "public int getFlags(final int mask)", "class_method_signature": "Graph.getFlags(final int mask)", "testcase": false, "constructor": false}, {"identifier": "getFlags", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFlags()", "full_signature": "public int getFlags()", "class_method_signature": "Graph.getFlags()", "testcase": false, "constructor": false}, {"identifier": "addFlags", "parameters": "(final int mask)", "modifiers": "", "return": "void", "signature": "void addFlags(final int mask)", "full_signature": " void addFlags(final int mask)", "class_method_signature": "Graph.addFlags(final int mask)", "testcase": false, "constructor": false}, {"identifier": "setFlags", "parameters": "(final int flags)", "modifiers": "", "return": "void", "signature": "void setFlags(final int flags)", "full_signature": " void setFlags(final int flags)", "class_method_signature": "Graph.setFlags(final int flags)", "testcase": false, "constructor": false}, {"identifier": "setTitle", "parameters": "(String title)", "modifiers": "public", "return": "void", "signature": "void setTitle(String title)", "full_signature": "public void setTitle(String title)", "class_method_signature": "Graph.setTitle(String title)", "testcase": false, "constructor": false}, {"identifier": "getTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTitle()", "full_signature": "public String getTitle()", "class_method_signature": "Graph.getTitle()", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(EdgeComparator comparator)", "modifiers": "public", "return": "Graph", "signature": "Graph sort(EdgeComparator comparator)", "full_signature": "public Graph sort(EdgeComparator comparator)", "class_method_signature": "Graph.sort(EdgeComparator comparator)", "testcase": false, "constructor": false}], "file": "core/src/main/java/uk/ac/ebi/beam/Graph.java"}, "focal_method": {"identifier": "adjacent", "parameters": "(int u, int v)", "modifiers": "public", "return": "boolean", "body": "public boolean adjacent(int u, int v) {\n        final int d = degrees[u];\n        for (int j = 0; j < d; ++j) {\n            Edge e = edges[u][j];\n            if (e.other(u) == v)\n                return true;\n        }\n        return false;\n    }", "signature": "boolean adjacent(int u, int v)", "full_signature": "public boolean adjacent(int u, int v)", "class_method_signature": "Graph.adjacent(int u, int v)", "testcase": false, "constructor": false, "invocations": ["other"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}