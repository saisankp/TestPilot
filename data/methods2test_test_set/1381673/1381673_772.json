{"test_class": {"identifier": "DTCellValue52Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DTCellValue52 dcv;", "modifier": "private", "type": "DTCellValue52", "declarator": "dcv", "var_name": "dcv"}, {"original_string": "private Field fieldBoolean;", "modifier": "private", "type": "Field", "declarator": "fieldBoolean", "var_name": "fieldBoolean"}, {"original_string": "private Field fieldDate;", "modifier": "private", "type": "Field", "declarator": "fieldDate", "var_name": "fieldDate"}, {"original_string": "private Field fieldNumeric;", "modifier": "private", "type": "Field", "declarator": "fieldNumeric", "var_name": "fieldNumeric"}, {"original_string": "private Field fieldString;", "modifier": "private", "type": "Field", "declarator": "fieldString", "var_name": "fieldString"}, {"original_string": "private Field fieldDataType;", "modifier": "private", "type": "Field", "declarator": "fieldDataType", "var_name": "fieldDataType"}, {"original_string": "private static final Date now = Calendar.getInstance().getTime();", "modifier": "private static final", "type": "Date", "declarator": "now = Calendar.getInstance().getTime()", "var_name": "now"}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/test/java/org/drools/workbench/models/guided/dtable/shared/model/DTCellValue52Test.java"}, "test_case": {"identifier": "testGetNumericValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNumericValue() throws Exception {\n        fieldBoolean.set(dcv,\n                         true);\n        fieldDate.set(dcv,\n                      now);\n        dcv.setNumericValue(1L);\n        fieldString.set(dcv,\n                        \"woot\");\n        assertEquals(DataType.DataTypes.NUMERIC_LONG,\n                     dcv.getDataType());\n        assertNull(dcv.getBooleanValue());\n        assertNull(dcv.getDateValue());\n        assertEquals(1L,\n                     dcv.getNumericValue());\n        assertNull(dcv.getStringValue());\n    }", "signature": "void testGetNumericValue()", "full_signature": "@Test public void testGetNumericValue()", "class_method_signature": "DTCellValue52Test.testGetNumericValue()", "testcase": true, "constructor": false, "invocations": ["set", "set", "setNumericValue", "set", "assertEquals", "getDataType", "assertNull", "getBooleanValue", "assertNull", "getDateValue", "assertEquals", "getNumericValue", "assertNull", "getStringValue"]}, "focal_class": {"identifier": "DTCellValue52", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -3547167997433925031L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3547167997433925031L", "var_name": "serialVersionUID"}, {"original_string": "private Boolean valueBoolean;", "modifier": "private", "type": "Boolean", "declarator": "valueBoolean", "var_name": "valueBoolean"}, {"original_string": "private Date valueDate;", "modifier": "private", "type": "Date", "declarator": "valueDate", "var_name": "valueDate"}, {"original_string": "private Number valueNumeric;", "modifier": "private", "type": "Number", "declarator": "valueNumeric", "var_name": "valueNumeric"}, {"original_string": "private String valueString;", "modifier": "private", "type": "String", "declarator": "valueString", "var_name": "valueString"}, {"original_string": "private DataTypes dataType = DataTypes.STRING;", "modifier": "private", "type": "DataTypes", "declarator": "dataType = DataTypes.STRING", "var_name": "dataType"}, {"original_string": "private boolean isOtherwise;", "modifier": "private", "type": "boolean", "declarator": "isOtherwise", "var_name": "isOtherwise"}], "methods": [{"identifier": "DTCellValue52", "parameters": "()", "modifiers": "public", "return": "", "signature": " DTCellValue52()", "full_signature": "public  DTCellValue52()", "class_method_signature": "DTCellValue52.DTCellValue52()", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final DTCellValue52 sourceCell)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final DTCellValue52 sourceCell)", "full_signature": "public  DTCellValue52(final DTCellValue52 sourceCell)", "class_method_signature": "DTCellValue52.DTCellValue52(final DTCellValue52 sourceCell)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final DataTypes type,\n                         final boolean emptyValue)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final DataTypes type,\n                         final boolean emptyValue)", "full_signature": "public  DTCellValue52(final DataTypes type,\n                         final boolean emptyValue)", "class_method_signature": "DTCellValue52.DTCellValue52(final DataTypes type,\n                         final boolean emptyValue)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Object value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Object value)", "full_signature": "public  DTCellValue52(final Object value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Object value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final BigDecimal value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final BigDecimal value)", "full_signature": "public  DTCellValue52(final BigDecimal value)", "class_method_signature": "DTCellValue52.DTCellValue52(final BigDecimal value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final BigInteger value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final BigInteger value)", "full_signature": "public  DTCellValue52(final BigInteger value)", "class_method_signature": "DTCellValue52.DTCellValue52(final BigInteger value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Byte value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Byte value)", "full_signature": "public  DTCellValue52(final Byte value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Byte value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Double value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Double value)", "full_signature": "public  DTCellValue52(final Double value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Double value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Float value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Float value)", "full_signature": "public  DTCellValue52(final Float value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Float value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Integer value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Integer value)", "full_signature": "public  DTCellValue52(final Integer value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Integer value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Long value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Long value)", "full_signature": "public  DTCellValue52(final Long value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Long value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Short value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Short value)", "full_signature": "public  DTCellValue52(final Short value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Short value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Boolean value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Boolean value)", "full_signature": "public  DTCellValue52(final Boolean value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Boolean value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final Date value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final Date value)", "full_signature": "public  DTCellValue52(final Date value)", "class_method_signature": "DTCellValue52.DTCellValue52(final Date value)", "testcase": false, "constructor": true}, {"identifier": "DTCellValue52", "parameters": "(final String value)", "modifiers": "public", "return": "", "signature": " DTCellValue52(final String value)", "full_signature": "public  DTCellValue52(final String value)", "class_method_signature": "DTCellValue52.DTCellValue52(final String value)", "testcase": false, "constructor": true}, {"identifier": "getDataType", "parameters": "()", "modifiers": "public", "return": "DataType.DataTypes", "signature": "DataType.DataTypes getDataType()", "full_signature": "public DataType.DataTypes getDataType()", "class_method_signature": "DTCellValue52.getDataType()", "testcase": false, "constructor": false}, {"identifier": "getBooleanValue", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean getBooleanValue()", "full_signature": "public Boolean getBooleanValue()", "class_method_signature": "DTCellValue52.getBooleanValue()", "testcase": false, "constructor": false}, {"identifier": "getDateValue", "parameters": "()", "modifiers": "public", "return": "Date", "signature": "Date getDateValue()", "full_signature": "public Date getDateValue()", "class_method_signature": "DTCellValue52.getDateValue()", "testcase": false, "constructor": false}, {"identifier": "getNumericValue", "parameters": "()", "modifiers": "public", "return": "Number", "signature": "Number getNumericValue()", "full_signature": "public Number getNumericValue()", "class_method_signature": "DTCellValue52.getNumericValue()", "testcase": false, "constructor": false}, {"identifier": "getStringValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStringValue()", "full_signature": "public String getStringValue()", "class_method_signature": "DTCellValue52.getStringValue()", "testcase": false, "constructor": false}, {"identifier": "isOtherwise", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOtherwise()", "full_signature": "public boolean isOtherwise()", "class_method_signature": "DTCellValue52.isOtherwise()", "testcase": false, "constructor": false}, {"identifier": "setBooleanValue", "parameters": "(final Boolean value)", "modifiers": "public", "return": "void", "signature": "void setBooleanValue(final Boolean value)", "full_signature": "public void setBooleanValue(final Boolean value)", "class_method_signature": "DTCellValue52.setBooleanValue(final Boolean value)", "testcase": false, "constructor": false}, {"identifier": "setDateValue", "parameters": "(final Date value)", "modifiers": "public", "return": "void", "signature": "void setDateValue(final Date value)", "full_signature": "public void setDateValue(final Date value)", "class_method_signature": "DTCellValue52.setDateValue(final Date value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final Number value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final Number value)", "full_signature": "public void setNumericValue(final Number value)", "class_method_signature": "DTCellValue52.setNumericValue(final Number value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final BigDecimal value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final BigDecimal value)", "full_signature": "public void setNumericValue(final BigDecimal value)", "class_method_signature": "DTCellValue52.setNumericValue(final BigDecimal value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final BigInteger value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final BigInteger value)", "full_signature": "public void setNumericValue(final BigInteger value)", "class_method_signature": "DTCellValue52.setNumericValue(final BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final Byte value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final Byte value)", "full_signature": "public void setNumericValue(final Byte value)", "class_method_signature": "DTCellValue52.setNumericValue(final Byte value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final Double value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final Double value)", "full_signature": "public void setNumericValue(final Double value)", "class_method_signature": "DTCellValue52.setNumericValue(final Double value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final Float value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final Float value)", "full_signature": "public void setNumericValue(final Float value)", "class_method_signature": "DTCellValue52.setNumericValue(final Float value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final Integer value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final Integer value)", "full_signature": "public void setNumericValue(final Integer value)", "class_method_signature": "DTCellValue52.setNumericValue(final Integer value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final Long value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final Long value)", "full_signature": "public void setNumericValue(final Long value)", "class_method_signature": "DTCellValue52.setNumericValue(final Long value)", "testcase": false, "constructor": false}, {"identifier": "setNumericValue", "parameters": "(final Short value)", "modifiers": "public", "return": "void", "signature": "void setNumericValue(final Short value)", "full_signature": "public void setNumericValue(final Short value)", "class_method_signature": "DTCellValue52.setNumericValue(final Short value)", "testcase": false, "constructor": false}, {"identifier": "setOtherwise", "parameters": "(final boolean isOtherwise)", "modifiers": "public", "return": "void", "signature": "void setOtherwise(final boolean isOtherwise)", "full_signature": "public void setOtherwise(final boolean isOtherwise)", "class_method_signature": "DTCellValue52.setOtherwise(final boolean isOtherwise)", "testcase": false, "constructor": false}, {"identifier": "setStringValue", "parameters": "(final String value)", "modifiers": "public", "return": "void", "signature": "void setStringValue(final String value)", "full_signature": "public void setStringValue(final String value)", "class_method_signature": "DTCellValue52.setStringValue(final String value)", "testcase": false, "constructor": false}, {"identifier": "clearValues", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearValues()", "full_signature": "public void clearValues()", "class_method_signature": "DTCellValue52.clearValues()", "testcase": false, "constructor": false}, {"identifier": "hasValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasValue()", "full_signature": "public boolean hasValue()", "class_method_signature": "DTCellValue52.hasValue()", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isNumeric()", "full_signature": "private boolean isNumeric()", "class_method_signature": "DTCellValue52.isNumeric()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DTCellValue52.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override //A clone of this class is used while editing a column. Overriding this method //allows us to easily compare the clone and the original to check if a change //has been made public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override //A clone of this class is used while editing a column. Overriding this method //allows us to easily compare the clone and the original to check if a change //has been made public boolean equals(Object obj)", "class_method_signature": "DTCellValue52.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "cloneDefaultValueCell", "parameters": "()", "modifiers": "public", "return": "DTCellValue52", "signature": "DTCellValue52 cloneDefaultValueCell()", "full_signature": "public DTCellValue52 cloneDefaultValueCell()", "class_method_signature": "DTCellValue52.cloneDefaultValueCell()", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-guided-dtable/src/main/java/org/drools/workbench/models/guided/dtable/shared/model/DTCellValue52.java"}, "focal_method": {"identifier": "getNumericValue", "parameters": "()", "modifiers": "public", "return": "Number", "body": "public Number getNumericValue() {\n        if (!isNumeric()) {\n            valueNumeric = null;\n        }\n        return valueNumeric;\n    }", "signature": "Number getNumericValue()", "full_signature": "public Number getNumericValue()", "class_method_signature": "DTCellValue52.getNumericValue()", "testcase": false, "constructor": false, "invocations": ["isNumeric"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}