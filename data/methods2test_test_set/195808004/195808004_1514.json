{"test_class": {"identifier": "TestDataStorage", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String DEFAULT_BPID = \"bp-0\";", "modifier": "private final static", "type": "String", "declarator": "DEFAULT_BPID = \"bp-0\"", "var_name": "DEFAULT_BPID"}, {"original_string": "private final static String CLUSTER_ID = \"cluster0\";", "modifier": "private final static", "type": "String", "declarator": "CLUSTER_ID = \"cluster0\"", "var_name": "CLUSTER_ID"}, {"original_string": "private final static String BUILD_VERSION = \"2.0\";", "modifier": "private final static", "type": "String", "declarator": "BUILD_VERSION = \"2.0\"", "var_name": "BUILD_VERSION"}, {"original_string": "private final static String SOFTWARE_VERSION = \"2.0\";", "modifier": "private final static", "type": "String", "declarator": "SOFTWARE_VERSION = \"2.0\"", "var_name": "SOFTWARE_VERSION"}, {"original_string": "private final static long CTIME = 1;", "modifier": "private final static", "type": "long", "declarator": "CTIME = 1", "var_name": "CTIME"}, {"original_string": "private final static File TEST_DIR =\n      new File(System.getProperty(\"test.build.data\") + \"/dstest\");", "modifier": "private final static", "type": "File", "declarator": "TEST_DIR =\n      new File(System.getProperty(\"test.build.data\") + \"/dstest\")", "var_name": "TEST_DIR"}, {"original_string": "private final static StartupOption START_OPT = StartupOption.REGULAR;", "modifier": "private final static", "type": "StartupOption", "declarator": "START_OPT = StartupOption.REGULAR", "var_name": "START_OPT"}, {"original_string": "private DataNode mockDN = Mockito.mock(DataNode.class);", "modifier": "private", "type": "DataNode", "declarator": "mockDN = Mockito.mock(DataNode.class)", "var_name": "mockDN"}, {"original_string": "private NamespaceInfo nsInfo;", "modifier": "private", "type": "NamespaceInfo", "declarator": "nsInfo", "var_name": "nsInfo"}, {"original_string": "private DataStorage storage;", "modifier": "private", "type": "DataStorage", "declarator": "storage", "var_name": "storage"}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/datanode/TestDataStorage.java"}, "test_case": {"identifier": "testRecoverTransitionReadDoTransitionFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRecoverTransitionReadDoTransitionFailure()\n      throws IOException {\n    final int numLocations = 3;\n    List<StorageLocation> locations = createStorageLocations(numLocations);\n    // Prepare volumes\n    storage.recoverTransitionRead(mockDN, nsInfo, locations, START_OPT);\n    assertEquals(numLocations, storage.getNumStorageDirs());\n\n    // Reset DataStorage\n    storage.unlockAll();\n    storage = new DataStorage();\n    // Trigger an exception from doTransition().\n    nsInfo.clusterID = \"cluster1\";\n    try {\n      storage.recoverTransitionRead(mockDN, nsInfo, locations, START_OPT);\n      fail(\"Expect to throw an exception from doTransition()\");\n    } catch (IOException e) {\n      GenericTestUtils.assertExceptionContains(\"All specified directories\", e);\n    }\n    assertEquals(0, storage.getNumStorageDirs());\n  }", "signature": "void testRecoverTransitionReadDoTransitionFailure()", "full_signature": "@Test public void testRecoverTransitionReadDoTransitionFailure()", "class_method_signature": "TestDataStorage.testRecoverTransitionReadDoTransitionFailure()", "testcase": true, "constructor": false, "invocations": ["createStorageLocations", "recoverTransitionRead", "assertEquals", "getNumStorageDirs", "unlockAll", "recoverTransitionRead", "fail", "assertExceptionContains", "assertEquals", "getNumStorageDirs"]}, "focal_class": {"identifier": "DataStorage", "superclass": "extends Storage", "interfaces": "", "fields": [{"original_string": "public final static String BLOCK_SUBDIR_PREFIX = \"subdir\";", "modifier": "public final static", "type": "String", "declarator": "BLOCK_SUBDIR_PREFIX = \"subdir\"", "var_name": "BLOCK_SUBDIR_PREFIX"}, {"original_string": "final static String COPY_FILE_PREFIX = \"dncp_\";", "modifier": "final static", "type": "String", "declarator": "COPY_FILE_PREFIX = \"dncp_\"", "var_name": "COPY_FILE_PREFIX"}, {"original_string": "final static String STORAGE_DIR_DETACHED = \"detach\";", "modifier": "final static", "type": "String", "declarator": "STORAGE_DIR_DETACHED = \"detach\"", "var_name": "STORAGE_DIR_DETACHED"}, {"original_string": "public final static String STORAGE_DIR_RBW = \"rbw\";", "modifier": "public final static", "type": "String", "declarator": "STORAGE_DIR_RBW = \"rbw\"", "var_name": "STORAGE_DIR_RBW"}, {"original_string": "public final static String STORAGE_DIR_FINALIZED = \"finalized\";", "modifier": "public final static", "type": "String", "declarator": "STORAGE_DIR_FINALIZED = \"finalized\"", "var_name": "STORAGE_DIR_FINALIZED"}, {"original_string": "public final static String STORAGE_DIR_LAZY_PERSIST = \"lazypersist\";", "modifier": "public final static", "type": "String", "declarator": "STORAGE_DIR_LAZY_PERSIST = \"lazypersist\"", "var_name": "STORAGE_DIR_LAZY_PERSIST"}, {"original_string": "public final static String STORAGE_DIR_TMP = \"tmp\";", "modifier": "public final static", "type": "String", "declarator": "STORAGE_DIR_TMP = \"tmp\"", "var_name": "STORAGE_DIR_TMP"}, {"original_string": "private Set<String> trashEnabledBpids;", "modifier": "private", "type": "Set<String>", "declarator": "trashEnabledBpids", "var_name": "trashEnabledBpids"}, {"original_string": "private String datanodeUuid = null;", "modifier": "private", "type": "String", "declarator": "datanodeUuid = null", "var_name": "datanodeUuid"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private final Map<String, BlockPoolSliceStorage> bpStorageMap\n      = Collections.synchronizedMap(new HashMap<String, BlockPoolSliceStorage>());", "modifier": "private final", "type": "Map<String, BlockPoolSliceStorage>", "declarator": "bpStorageMap\n      = Collections.synchronizedMap(new HashMap<String, BlockPoolSliceStorage>())", "var_name": "bpStorageMap"}], "methods": [{"identifier": "DataStorage", "parameters": "()", "modifiers": "", "return": "", "signature": " DataStorage()", "full_signature": "  DataStorage()", "class_method_signature": "DataStorage.DataStorage()", "testcase": false, "constructor": true}, {"identifier": "getBPStorage", "parameters": "(String bpid)", "modifiers": "public", "return": "BlockPoolSliceStorage", "signature": "BlockPoolSliceStorage getBPStorage(String bpid)", "full_signature": "public BlockPoolSliceStorage getBPStorage(String bpid)", "class_method_signature": "DataStorage.getBPStorage(String bpid)", "testcase": false, "constructor": false}, {"identifier": "DataStorage", "parameters": "(StorageInfo storageInfo)", "modifiers": "public", "return": "", "signature": " DataStorage(StorageInfo storageInfo)", "full_signature": "public  DataStorage(StorageInfo storageInfo)", "class_method_signature": "DataStorage.DataStorage(StorageInfo storageInfo)", "testcase": false, "constructor": true}, {"identifier": "getDatanodeUuid", "parameters": "()", "modifiers": "public synchronized", "return": "String", "signature": "String getDatanodeUuid()", "full_signature": "public synchronized String getDatanodeUuid()", "class_method_signature": "DataStorage.getDatanodeUuid()", "testcase": false, "constructor": false}, {"identifier": "setDatanodeUuid", "parameters": "(String newDatanodeUuid)", "modifiers": "public synchronized", "return": "void", "signature": "void setDatanodeUuid(String newDatanodeUuid)", "full_signature": "public synchronized void setDatanodeUuid(String newDatanodeUuid)", "class_method_signature": "DataStorage.setDatanodeUuid(String newDatanodeUuid)", "testcase": false, "constructor": false}, {"identifier": "createStorageID", "parameters": "(\n      StorageDirectory sd, boolean regenerateStorageIds)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds)", "full_signature": "public synchronized boolean createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds)", "class_method_signature": "DataStorage.createStorageID(\n      StorageDirectory sd, boolean regenerateStorageIds)", "testcase": false, "constructor": false}, {"identifier": "enableTrash", "parameters": "(String bpid)", "modifiers": "public", "return": "void", "signature": "void enableTrash(String bpid)", "full_signature": "public void enableTrash(String bpid)", "class_method_signature": "DataStorage.enableTrash(String bpid)", "testcase": false, "constructor": false}, {"identifier": "clearTrash", "parameters": "(String bpid)", "modifiers": "public", "return": "void", "signature": "void clearTrash(String bpid)", "full_signature": "public void clearTrash(String bpid)", "class_method_signature": "DataStorage.clearTrash(String bpid)", "testcase": false, "constructor": false}, {"identifier": "trashEnabled", "parameters": "(String bpid)", "modifiers": "public", "return": "boolean", "signature": "boolean trashEnabled(String bpid)", "full_signature": "public boolean trashEnabled(String bpid)", "class_method_signature": "DataStorage.trashEnabled(String bpid)", "testcase": false, "constructor": false}, {"identifier": "setRollingUpgradeMarker", "parameters": "(String bpid)", "modifiers": "public", "return": "void", "signature": "void setRollingUpgradeMarker(String bpid)", "full_signature": "public void setRollingUpgradeMarker(String bpid)", "class_method_signature": "DataStorage.setRollingUpgradeMarker(String bpid)", "testcase": false, "constructor": false}, {"identifier": "clearRollingUpgradeMarker", "parameters": "(String bpid)", "modifiers": "public", "return": "void", "signature": "void clearRollingUpgradeMarker(String bpid)", "full_signature": "public void clearRollingUpgradeMarker(String bpid)", "class_method_signature": "DataStorage.clearRollingUpgradeMarker(String bpid)", "testcase": false, "constructor": false}, {"identifier": "getTrashDirectoryForBlockFile", "parameters": "(String bpid, File blockFile)", "modifiers": "public", "return": "String", "signature": "String getTrashDirectoryForBlockFile(String bpid, File blockFile)", "full_signature": "public String getTrashDirectoryForBlockFile(String bpid, File blockFile)", "class_method_signature": "DataStorage.getTrashDirectoryForBlockFile(String bpid, File blockFile)", "testcase": false, "constructor": false}, {"identifier": "loadStorageDirectory", "parameters": "(DataNode datanode,\n      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt)", "modifiers": "private", "return": "StorageDirectory", "signature": "StorageDirectory loadStorageDirectory(DataNode datanode,\n      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt)", "full_signature": "private StorageDirectory loadStorageDirectory(DataNode datanode,\n      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt)", "class_method_signature": "DataStorage.loadStorageDirectory(DataNode datanode,\n      NamespaceInfo nsInfo, File dataDir, StartupOption startOpt)", "testcase": false, "constructor": false}, {"identifier": "prepareVolume", "parameters": "(DataNode datanode, File volume,\n      List<NamespaceInfo> nsInfos)", "modifiers": "public", "return": "VolumeBuilder", "signature": "VolumeBuilder prepareVolume(DataNode datanode, File volume,\n      List<NamespaceInfo> nsInfos)", "full_signature": "public VolumeBuilder prepareVolume(DataNode datanode, File volume,\n      List<NamespaceInfo> nsInfos)", "class_method_signature": "DataStorage.prepareVolume(DataNode datanode, File volume,\n      List<NamespaceInfo> nsInfos)", "testcase": false, "constructor": false}, {"identifier": "addStorageLocations", "parameters": "(DataNode datanode,\n      NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs,\n      StartupOption startOpt)", "modifiers": "@VisibleForTesting synchronized", "return": "List<StorageLocation>", "signature": "List<StorageLocation> addStorageLocations(DataNode datanode,\n      NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs,\n      StartupOption startOpt)", "full_signature": "@VisibleForTesting synchronized List<StorageLocation> addStorageLocations(DataNode datanode,\n      NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs,\n      StartupOption startOpt)", "class_method_signature": "DataStorage.addStorageLocations(DataNode datanode,\n      NamespaceInfo nsInfo, Collection<StorageLocation> dataDirs,\n      StartupOption startOpt)", "testcase": false, "constructor": false}, {"identifier": "removeVolumes", "parameters": "(final Set<File> dirsToRemove)", "modifiers": "synchronized", "return": "void", "signature": "void removeVolumes(final Set<File> dirsToRemove)", "full_signature": "synchronized void removeVolumes(final Set<File> dirsToRemove)", "class_method_signature": "DataStorage.removeVolumes(final Set<File> dirsToRemove)", "testcase": false, "constructor": false}, {"identifier": "recoverTransitionRead", "parameters": "(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "modifiers": "", "return": "void", "signature": "void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "full_signature": " void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "class_method_signature": "DataStorage.recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "testcase": false, "constructor": false}, {"identifier": "makeBlockPoolDataDir", "parameters": "(Collection<File> dataDirs,\n      Configuration conf)", "modifiers": "static", "return": "void", "signature": "void makeBlockPoolDataDir(Collection<File> dataDirs,\n      Configuration conf)", "full_signature": "static void makeBlockPoolDataDir(Collection<File> dataDirs,\n      Configuration conf)", "class_method_signature": "DataStorage.makeBlockPoolDataDir(Collection<File> dataDirs,\n      Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(StorageDirectory sd, NamespaceInfo nsInfo,\n              String datanodeUuid)", "modifiers": "", "return": "void", "signature": "void format(StorageDirectory sd, NamespaceInfo nsInfo,\n              String datanodeUuid)", "full_signature": " void format(StorageDirectory sd, NamespaceInfo nsInfo,\n              String datanodeUuid)", "class_method_signature": "DataStorage.format(StorageDirectory sd, NamespaceInfo nsInfo,\n              String datanodeUuid)", "testcase": false, "constructor": false}, {"identifier": "setPropertiesFromFields", "parameters": "(Properties props, \n                           StorageDirectory sd \n                           )", "modifiers": "@Override protected", "return": "void", "signature": "void setPropertiesFromFields(Properties props, \n                           StorageDirectory sd \n                           )", "full_signature": "@Override protected void setPropertiesFromFields(Properties props, \n                           StorageDirectory sd \n                           )", "class_method_signature": "DataStorage.setPropertiesFromFields(Properties props, \n                           StorageDirectory sd \n                           )", "testcase": false, "constructor": false}, {"identifier": "setFieldsFromProperties", "parameters": "(Properties props, StorageDirectory sd)", "modifiers": "@Override protected", "return": "void", "signature": "void setFieldsFromProperties(Properties props, StorageDirectory sd)", "full_signature": "@Override protected void setFieldsFromProperties(Properties props, StorageDirectory sd)", "class_method_signature": "DataStorage.setFieldsFromProperties(Properties props, StorageDirectory sd)", "testcase": false, "constructor": false}, {"identifier": "setFieldsFromProperties", "parameters": "(Properties props, StorageDirectory sd,\n      boolean overrideLayoutVersion, int toLayoutVersion)", "modifiers": "private", "return": "void", "signature": "void setFieldsFromProperties(Properties props, StorageDirectory sd,\n      boolean overrideLayoutVersion, int toLayoutVersion)", "full_signature": "private void setFieldsFromProperties(Properties props, StorageDirectory sd,\n      boolean overrideLayoutVersion, int toLayoutVersion)", "class_method_signature": "DataStorage.setFieldsFromProperties(Properties props, StorageDirectory sd,\n      boolean overrideLayoutVersion, int toLayoutVersion)", "testcase": false, "constructor": false}, {"identifier": "isPreUpgradableLayout", "parameters": "(StorageDirectory sd)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPreUpgradableLayout(StorageDirectory sd)", "full_signature": "@Override public boolean isPreUpgradableLayout(StorageDirectory sd)", "class_method_signature": "DataStorage.isPreUpgradableLayout(StorageDirectory sd)", "testcase": false, "constructor": false}, {"identifier": "readProperties", "parameters": "(StorageDirectory sd, int rollbackLayoutVersion)", "modifiers": "", "return": "void", "signature": "void readProperties(StorageDirectory sd, int rollbackLayoutVersion)", "full_signature": " void readProperties(StorageDirectory sd, int rollbackLayoutVersion)", "class_method_signature": "DataStorage.readProperties(StorageDirectory sd, int rollbackLayoutVersion)", "testcase": false, "constructor": false}, {"identifier": "doTransition", "parameters": "( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             )", "modifiers": "private", "return": "void", "signature": "void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             )", "full_signature": "private void doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             )", "class_method_signature": "DataStorage.doTransition( DataNode datanode,\n                             StorageDirectory sd, \n                             NamespaceInfo nsInfo, \n                             StartupOption startOpt\n                             )", "testcase": false, "constructor": false}, {"identifier": "doUpgrade", "parameters": "(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)", "modifiers": "", "return": "void", "signature": "void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)", "full_signature": " void doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)", "class_method_signature": "DataStorage.doUpgrade(DataNode datanode, StorageDirectory sd, NamespaceInfo nsInfo)", "testcase": false, "constructor": false}, {"identifier": "cleanupDetachDir", "parameters": "(File detachDir)", "modifiers": "private", "return": "void", "signature": "void cleanupDetachDir(File detachDir)", "full_signature": "private void cleanupDetachDir(File detachDir)", "class_method_signature": "DataStorage.cleanupDetachDir(File detachDir)", "testcase": false, "constructor": false}, {"identifier": "doRollback", "parameters": "( StorageDirectory sd,\n                   NamespaceInfo nsInfo\n                   )", "modifiers": "", "return": "void", "signature": "void doRollback( StorageDirectory sd,\n                   NamespaceInfo nsInfo\n                   )", "full_signature": " void doRollback( StorageDirectory sd,\n                   NamespaceInfo nsInfo\n                   )", "class_method_signature": "DataStorage.doRollback( StorageDirectory sd,\n                   NamespaceInfo nsInfo\n                   )", "testcase": false, "constructor": false}, {"identifier": "doFinalize", "parameters": "(StorageDirectory sd)", "modifiers": "", "return": "void", "signature": "void doFinalize(StorageDirectory sd)", "full_signature": " void doFinalize(StorageDirectory sd)", "class_method_signature": "DataStorage.doFinalize(StorageDirectory sd)", "testcase": false, "constructor": false}, {"identifier": "finalizeUpgrade", "parameters": "(String bpID)", "modifiers": "", "return": "void", "signature": "void finalizeUpgrade(String bpID)", "full_signature": " void finalizeUpgrade(String bpID)", "class_method_signature": "DataStorage.finalizeUpgrade(String bpID)", "testcase": false, "constructor": false}, {"identifier": "linkAllBlocks", "parameters": "(DataNode datanode, File fromDir, File fromBbwDir,\n      File toDir)", "modifiers": "private", "return": "void", "signature": "void linkAllBlocks(DataNode datanode, File fromDir, File fromBbwDir,\n      File toDir)", "full_signature": "private void linkAllBlocks(DataNode datanode, File fromDir, File fromBbwDir,\n      File toDir)", "class_method_signature": "DataStorage.linkAllBlocks(DataNode datanode, File fromDir, File fromBbwDir,\n      File toDir)", "testcase": false, "constructor": false}, {"identifier": "linkBlocks", "parameters": "(DataNode datanode, File from, File to, int oldLV,\n      HardLink hl)", "modifiers": "static", "return": "void", "signature": "void linkBlocks(DataNode datanode, File from, File to, int oldLV,\n      HardLink hl)", "full_signature": "static void linkBlocks(DataNode datanode, File from, File to, int oldLV,\n      HardLink hl)", "class_method_signature": "DataStorage.linkBlocks(DataNode datanode, File from, File to, int oldLV,\n      HardLink hl)", "testcase": false, "constructor": false}, {"identifier": "findDuplicateEntries", "parameters": "(ArrayList<LinkArgs> all)", "modifiers": "static", "return": "ArrayList<LinkArgs>", "signature": "ArrayList<LinkArgs> findDuplicateEntries(ArrayList<LinkArgs> all)", "full_signature": "static ArrayList<LinkArgs> findDuplicateEntries(ArrayList<LinkArgs> all)", "class_method_signature": "DataStorage.findDuplicateEntries(ArrayList<LinkArgs> all)", "testcase": false, "constructor": false}, {"identifier": "removeDuplicateEntries", "parameters": "(ArrayList<LinkArgs> all,\n                                             ArrayList<LinkArgs> duplicates)", "modifiers": "private static", "return": "void", "signature": "void removeDuplicateEntries(ArrayList<LinkArgs> all,\n                                             ArrayList<LinkArgs> duplicates)", "full_signature": "private static void removeDuplicateEntries(ArrayList<LinkArgs> all,\n                                             ArrayList<LinkArgs> duplicates)", "class_method_signature": "DataStorage.removeDuplicateEntries(ArrayList<LinkArgs> all,\n                                             ArrayList<LinkArgs> duplicates)", "testcase": false, "constructor": false}, {"identifier": "linkBlocksHelper", "parameters": "(File from, File to, int oldLV, HardLink hl,\n  boolean upgradeToIdBasedLayout, File blockRoot,\n      List<LinkArgs> idBasedLayoutSingleLinks)", "modifiers": "static", "return": "void", "signature": "void linkBlocksHelper(File from, File to, int oldLV, HardLink hl,\n  boolean upgradeToIdBasedLayout, File blockRoot,\n      List<LinkArgs> idBasedLayoutSingleLinks)", "full_signature": "static void linkBlocksHelper(File from, File to, int oldLV, HardLink hl,\n  boolean upgradeToIdBasedLayout, File blockRoot,\n      List<LinkArgs> idBasedLayoutSingleLinks)", "class_method_signature": "DataStorage.linkBlocksHelper(File from, File to, int oldLV, HardLink hl,\n  boolean upgradeToIdBasedLayout, File blockRoot,\n      List<LinkArgs> idBasedLayoutSingleLinks)", "testcase": false, "constructor": false}, {"identifier": "addBlockPoolStorage", "parameters": "(String bpID, BlockPoolSliceStorage bpStorage\n      )", "modifiers": "private", "return": "void", "signature": "void addBlockPoolStorage(String bpID, BlockPoolSliceStorage bpStorage\n      )", "full_signature": "private void addBlockPoolStorage(String bpID, BlockPoolSliceStorage bpStorage\n      )", "class_method_signature": "DataStorage.addBlockPoolStorage(String bpID, BlockPoolSliceStorage bpStorage\n      )", "testcase": false, "constructor": false}, {"identifier": "removeBlockPoolStorage", "parameters": "(String bpId)", "modifiers": "synchronized", "return": "void", "signature": "void removeBlockPoolStorage(String bpId)", "full_signature": "synchronized void removeBlockPoolStorage(String bpId)", "class_method_signature": "DataStorage.removeBlockPoolStorage(String bpId)", "testcase": false, "constructor": false}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataStorage.java"}, "focal_method": {"identifier": "recoverTransitionRead", "parameters": "(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "modifiers": "", "return": "void", "body": "void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt) throws IOException {\n    if (this.initialized) {\n      LOG.info(\"DataNode version: \" + HdfsConstants.DATANODE_LAYOUT_VERSION\n          + \" and NameNode layout version: \" + nsInfo.getLayoutVersion());\n      this.storageDirs = new ArrayList<StorageDirectory>(dataDirs.size());\n      // mark DN storage is initialized\n      this.initialized = true;\n    }\n\n    if (addStorageLocations(datanode, nsInfo, dataDirs, startOpt).isEmpty()) {\n      throw new IOException(\"All specified directories are failed to load.\");\n    }\n  }", "signature": "void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "full_signature": " void recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "class_method_signature": "DataStorage.recoverTransitionRead(DataNode datanode, NamespaceInfo nsInfo,\n      Collection<StorageLocation> dataDirs, StartupOption startOpt)", "testcase": false, "constructor": false, "invocations": ["info", "getLayoutVersion", "size", "isEmpty", "addStorageLocations"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}