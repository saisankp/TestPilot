{"test_class": {"identifier": "SocketIoNamespaceImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoNamespaceImplTest.java"}, "test_case": {"identifier": "test_constructor_new_instance", "parameters": "()", "modifiers": "@SuppressWarnings(\"ResultOfMethodCallIgnored\") @Test public", "return": "void", "body": "@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test\n    public void test_constructor_new_instance() {\n        final SocketIoServer server = Mockito.spy(new SocketIoServer(new EngineIoServer()));\n\n        final SocketIoNamespaceImpl namespace = new SocketIoNamespaceImpl(server, \"/_foo\");\n\n        Mockito.verify(server, Mockito.times(1)).getAdapterFactory();\n        assertEquals(\"/_foo\", namespace.getName());\n        assertEquals(server, namespace.getServer());\n        assertNotNull(namespace.getAdapter());\n        assertEquals(0, namespace.getConnectedSockets().size());\n    }", "signature": "void test_constructor_new_instance()", "full_signature": "@SuppressWarnings(\"ResultOfMethodCallIgnored\") @Test public void test_constructor_new_instance()", "class_method_signature": "SocketIoNamespaceImplTest.test_constructor_new_instance()", "testcase": true, "constructor": false, "invocations": ["spy", "getAdapterFactory", "verify", "times", "assertEquals", "getName", "assertEquals", "getServer", "assertNotNull", "getAdapter", "assertEquals", "size", "getConnectedSockets"]}, "focal_class": {"identifier": "SocketIoNamespaceImpl", "superclass": "extends SocketIoNamespace", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n    private final Map<String, SocketIoSocket> mSockets = new ConcurrentHashMap<>();", "modifier": "@SuppressWarnings(\"MismatchedQueryAndUpdateOfCollection\")\n    private final", "type": "Map<String, SocketIoSocket>", "declarator": "mSockets = new ConcurrentHashMap<>()", "var_name": "mSockets"}, {"original_string": "private final Map<String, SocketIoSocket> mConnectedSockets = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, SocketIoSocket>", "declarator": "mConnectedSockets = new ConcurrentHashMap<>()", "var_name": "mConnectedSockets"}, {"original_string": "private final AtomicInteger mAckId = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "mAckId = new AtomicInteger(0)", "var_name": "mAckId"}], "methods": [{"identifier": "SocketIoNamespaceImpl", "parameters": "(SocketIoServer server, String name)", "modifiers": "", "return": "", "signature": " SocketIoNamespaceImpl(SocketIoServer server, String name)", "full_signature": "  SocketIoNamespaceImpl(SocketIoServer server, String name)", "class_method_signature": "SocketIoNamespaceImpl.SocketIoNamespaceImpl(SocketIoServer server, String name)", "testcase": false, "constructor": true}, {"identifier": "broadcast", "parameters": "(String[] rooms, String event, Object[] args)", "modifiers": "@Override public", "return": "void", "signature": "void broadcast(String[] rooms, String event, Object[] args)", "full_signature": "@Override public void broadcast(String[] rooms, String event, Object[] args)", "class_method_signature": "SocketIoNamespaceImpl.broadcast(String[] rooms, String event, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getConnectedSockets", "parameters": "()", "modifiers": "@Override", "return": "Map<String, SocketIoSocket>", "signature": "Map<String, SocketIoSocket> getConnectedSockets()", "full_signature": "@Override Map<String, SocketIoSocket> getConnectedSockets()", "class_method_signature": "SocketIoNamespaceImpl.getConnectedSockets()", "testcase": false, "constructor": false}, {"identifier": "nextId", "parameters": "()", "modifiers": "", "return": "int", "signature": "int nextId()", "full_signature": " int nextId()", "class_method_signature": "SocketIoNamespaceImpl.nextId()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(SocketIoClient client)", "modifiers": "synchronized", "return": "SocketIoSocket", "signature": "SocketIoSocket add(SocketIoClient client)", "full_signature": "synchronized SocketIoSocket add(SocketIoClient client)", "class_method_signature": "SocketIoNamespaceImpl.add(SocketIoClient client)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(SocketIoSocket socket)", "modifiers": "synchronized", "return": "void", "signature": "void remove(SocketIoSocket socket)", "full_signature": "synchronized void remove(SocketIoSocket socket)", "class_method_signature": "SocketIoNamespaceImpl.remove(SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "addConnected", "parameters": "(SocketIoSocket socket)", "modifiers": "synchronized", "return": "void", "signature": "void addConnected(SocketIoSocket socket)", "full_signature": "synchronized void addConnected(SocketIoSocket socket)", "class_method_signature": "SocketIoNamespaceImpl.addConnected(SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "removeConnected", "parameters": "(SocketIoSocket socket)", "modifiers": "synchronized", "return": "void", "signature": "void removeConnected(SocketIoSocket socket)", "full_signature": "synchronized void removeConnected(SocketIoSocket socket)", "class_method_signature": "SocketIoNamespaceImpl.removeConnected(SocketIoSocket socket)", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoNamespaceImpl.java"}, "focal_method": {"identifier": "getConnectedSockets", "parameters": "()", "modifiers": "@Override", "return": "Map<String, SocketIoSocket>", "body": "@Override\n    Map<String, SocketIoSocket> getConnectedSockets() {\n        return mConnectedSockets;\n    }", "signature": "Map<String, SocketIoSocket> getConnectedSockets()", "full_signature": "@Override Map<String, SocketIoSocket> getConnectedSockets()", "class_method_signature": "SocketIoNamespaceImpl.getConnectedSockets()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}