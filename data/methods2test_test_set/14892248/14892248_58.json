{"test_class": {"identifier": "MatrixTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/pdf/parser/MatrixTest.java"}, "test_case": {"identifier": "testDeterminant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeterminant(){\n        Matrix m = new Matrix(2, 3, 4, 5, 6, 7);\n        Assert.assertEquals(-2f, m.getDeterminant(), .001f);\n    }", "signature": "void testDeterminant()", "full_signature": "@Test public void testDeterminant()", "class_method_signature": "MatrixTest.testDeterminant()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getDeterminant"]}, "focal_class": {"identifier": "Matrix", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int I11 = 0;", "modifier": "public static final", "type": "int", "declarator": "I11 = 0", "var_name": "I11"}, {"original_string": "public static final int I12 = 1;", "modifier": "public static final", "type": "int", "declarator": "I12 = 1", "var_name": "I12"}, {"original_string": "public static final int I13 = 2;", "modifier": "public static final", "type": "int", "declarator": "I13 = 2", "var_name": "I13"}, {"original_string": "public static final int I21 = 3;", "modifier": "public static final", "type": "int", "declarator": "I21 = 3", "var_name": "I21"}, {"original_string": "public static final int I22 = 4;", "modifier": "public static final", "type": "int", "declarator": "I22 = 4", "var_name": "I22"}, {"original_string": "public static final int I23 = 5;", "modifier": "public static final", "type": "int", "declarator": "I23 = 5", "var_name": "I23"}, {"original_string": "public static final int I31 = 6;", "modifier": "public static final", "type": "int", "declarator": "I31 = 6", "var_name": "I31"}, {"original_string": "public static final int I32 = 7;", "modifier": "public static final", "type": "int", "declarator": "I32 = 7", "var_name": "I32"}, {"original_string": "public static final int I33 = 8;", "modifier": "public static final", "type": "int", "declarator": "I33 = 8", "var_name": "I33"}, {"original_string": "private final float[] vals = new float[]{\n            1,0,0,\n            0,1,0,\n            0,0,1\n    };", "modifier": "private final", "type": "float[]", "declarator": "vals = new float[]{\n            1,0,0,\n            0,1,0,\n            0,0,1\n    }", "var_name": "vals"}], "methods": [{"identifier": "Matrix", "parameters": "()", "modifiers": "public", "return": "", "signature": " Matrix()", "full_signature": "public  Matrix()", "class_method_signature": "Matrix.Matrix()", "testcase": false, "constructor": true}, {"identifier": "Matrix", "parameters": "(float tx, float ty)", "modifiers": "public", "return": "", "signature": " Matrix(float tx, float ty)", "full_signature": "public  Matrix(float tx, float ty)", "class_method_signature": "Matrix.Matrix(float tx, float ty)", "testcase": false, "constructor": true}, {"identifier": "Matrix", "parameters": "(float a, float b, float c, float d, float e, float f)", "modifiers": "public", "return": "", "signature": " Matrix(float a, float b, float c, float d, float e, float f)", "full_signature": "public  Matrix(float a, float b, float c, float d, float e, float f)", "class_method_signature": "Matrix.Matrix(float a, float b, float c, float d, float e, float f)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int index)", "modifiers": "public", "return": "float", "signature": "float get(int index)", "full_signature": "public float get(int index)", "class_method_signature": "Matrix.get(int index)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(Matrix by)", "modifiers": "public", "return": "Matrix", "signature": "Matrix multiply(Matrix by)", "full_signature": "public Matrix multiply(Matrix by)", "class_method_signature": "Matrix.multiply(Matrix by)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Matrix arg)", "modifiers": "public", "return": "Matrix", "signature": "Matrix subtract(Matrix arg)", "full_signature": "public Matrix subtract(Matrix arg)", "class_method_signature": "Matrix.subtract(Matrix arg)", "testcase": false, "constructor": false}, {"identifier": "getDeterminant", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getDeterminant()", "full_signature": "public float getDeterminant()", "class_method_signature": "Matrix.getDeterminant()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Matrix.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Matrix.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Matrix.toString()", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/parser/Matrix.java"}, "focal_method": {"identifier": "getDeterminant", "parameters": "()", "modifiers": "public", "return": "float", "body": "public float getDeterminant(){\n        // ref http://en.wikipedia.org/wiki/Determinant   \n        // note that in PDF, I13 and I23 are always 0 and I33 is always 1\n        // so this could be simplified/faster\n        return    vals[I11] * vals[I22] * vals[I33] \n                + vals[I12] * vals[I23] * vals[I31]\n                + vals[I13] * vals[I21] * vals[I32]\n                - vals[I11] * vals[I23] * vals[I32]\n                - vals[I12] * vals[I21] * vals[I33]\n                - vals[I13] * vals[I22] * vals[I31];\n    }", "signature": "float getDeterminant()", "full_signature": "public float getDeterminant()", "class_method_signature": "Matrix.getDeterminant()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}