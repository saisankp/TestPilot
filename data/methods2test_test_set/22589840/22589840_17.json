{"test_class": {"identifier": "TableEventTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TableEvent one = null;", "modifier": "private", "type": "TableEvent", "declarator": "one = null", "var_name": "one"}, {"original_string": "private TableEvent sameRefAsOne = null;", "modifier": "private", "type": "TableEvent", "declarator": "sameRefAsOne = null", "var_name": "sameRefAsOne"}, {"original_string": "private TableEvent sameAsOne = null;", "modifier": "private", "type": "TableEvent", "declarator": "sameAsOne = null", "var_name": "sameAsOne"}, {"original_string": "private TableEvent two = null;", "modifier": "private", "type": "TableEvent", "declarator": "two = null", "var_name": "two"}], "file": "OLAT-LMS/src/test/java/org/olat/presentation/framework/core/components/table/TableEventTest.java"}, "test_case": {"identifier": "testEqualsCodeContract", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualsCodeContract() {\n        assertFalse(\"Wrong equals implementation, different types are recognized as equals \", one.equals(new Integer(1)));\n        assertFalse(\"Wrong equals implementation, different objects are recognized as equals \", one.equals(two));\n        assertFalse(\"Wrong equals implementation, null value is recognized as equals \", one.equals(null));\n        assertTrue(\"Wrong equals implementation, same objects are NOT recognized as equals \", one.equals(sameRefAsOne));\n        assertTrue(\"Wrong equals implementation, same objecst are NOT recognized as equals \", one.equals(sameAsOne));\n\n        // super type equals with Event is not checked for coupling reasons: TODO:pb:2010-11-23:discuss equal implementation strategy\n\n    }", "signature": "void testEqualsCodeContract()", "full_signature": "@Test public void testEqualsCodeContract()", "class_method_signature": "TableEventTest.testEqualsCodeContract()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "TableEvent", "superclass": "extends Event", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 4709852364630387174L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4709852364630387174L", "var_name": "serialVersionUID"}, {"original_string": "private int rowId;", "modifier": "private", "type": "int", "declarator": "rowId", "var_name": "rowId"}, {"original_string": "private String actionId;", "modifier": "private", "type": "String", "declarator": "actionId", "var_name": "actionId"}], "methods": [{"identifier": "TableEvent", "parameters": "(final String command, final int rowId, final String actionId)", "modifiers": "public", "return": "", "signature": " TableEvent(final String command, final int rowId, final String actionId)", "full_signature": "public  TableEvent(final String command, final int rowId, final String actionId)", "class_method_signature": "TableEvent.TableEvent(final String command, final int rowId, final String actionId)", "testcase": false, "constructor": true}, {"identifier": "getActionId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getActionId()", "full_signature": "public String getActionId()", "class_method_signature": "TableEvent.getActionId()", "testcase": false, "constructor": false}, {"identifier": "getRowId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRowId()", "full_signature": "public int getRowId()", "class_method_signature": "TableEvent.getRowId()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TableEvent.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TableEvent.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TableEvent.hashCode()", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/presentation/framework/core/components/table/TableEvent.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        TableEvent other = (TableEvent) obj;\n        if (other.getCommand() == null && this.getCommand() != null) {\n            return false;\n        } else if (other.getCommand() != null && this.getCommand() == null) {\n            return false;\n        }\n\n        return other.getCommand().equals(this.getCommand()) && other.actionId.equals(actionId) && other.rowId == rowId;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TableEvent.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "getCommand", "getCommand", "getCommand", "getCommand", "equals", "getCommand", "getCommand", "equals"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}