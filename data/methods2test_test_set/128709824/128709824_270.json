{"test_class": {"identifier": "ReflectUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger LOGGER = LoggerFactory.getLogger(ReflectUtilsTest.class);", "modifier": "private final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ReflectUtilsTest.class)", "var_name": "LOGGER"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/ReflectUtilsTest.java"}, "test_case": {"identifier": "testIsBeanPropertyWriteMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsBeanPropertyWriteMethod() throws Exception {\n        Assert.assertFalse(isBeanPropertyWriteMethod(null));\n        Assert.assertTrue(isBeanPropertyWriteMethod(TestReflect.class.getMethod(\"setS\", int.class)));\n        Assert.assertFalse(isBeanPropertyWriteMethod(TestReflect.class.getMethod(\"set\", int.class)));\n        Assert.assertFalse(isBeanPropertyWriteMethod(TestReflect.class.getDeclaredMethod(\"set1\", int.class)));\n        Assert.assertFalse(isBeanPropertyWriteMethod(TestReflect.class.getMethod(\"set2\", int.class)));\n        Assert.assertFalse(isBeanPropertyWriteMethod(TestReflect.class.getMethod(\"set3\", int.class, int.class)));\n        Assert.assertFalse(isBeanPropertyWriteMethod(TestReflect.class.getMethod(\"aset4\", int.class)));\n    }", "signature": "void testIsBeanPropertyWriteMethod()", "full_signature": "@Test public void testIsBeanPropertyWriteMethod()", "class_method_signature": "ReflectUtilsTest.testIsBeanPropertyWriteMethod()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isBeanPropertyWriteMethod", "assertTrue", "isBeanPropertyWriteMethod", "getMethod", "assertFalse", "isBeanPropertyWriteMethod", "getMethod", "assertFalse", "isBeanPropertyWriteMethod", "getDeclaredMethod", "assertFalse", "isBeanPropertyWriteMethod", "getMethod", "assertFalse", "isBeanPropertyWriteMethod", "getMethod", "assertFalse", "isBeanPropertyWriteMethod", "getMethod"]}, "focal_class": {"identifier": "ReflectUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isPrimitives", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitives(Class<?> clazz)", "full_signature": "public static boolean isPrimitives(Class<?> clazz)", "class_method_signature": "ReflectUtils.isPrimitives(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveType", "parameters": "(Class<?> clazz)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPrimitiveType(Class<?> clazz)", "full_signature": "private static boolean isPrimitiveType(Class<?> clazz)", "class_method_signature": "ReflectUtils.isPrimitiveType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getCodeBase", "parameters": "(Class<?> cls)", "modifiers": "public static", "return": "String", "signature": "String getCodeBase(Class<?> cls)", "full_signature": "public static String getCodeBase(Class<?> cls)", "class_method_signature": "ReflectUtils.getCodeBase(Class<?> cls)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(String clazzName, String methodName, String[] argsType)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(String clazzName, String methodName, String[] argsType)", "full_signature": "public static Method getMethod(String clazzName, String methodName, String[] argsType)", "class_method_signature": "ReflectUtils.getMethod(String clazzName, String methodName, String[] argsType)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class clazz, String methodName, Class... argsType)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Class clazz, String methodName, Class... argsType)", "full_signature": "public static Method getMethod(Class clazz, String methodName, Class... argsType)", "class_method_signature": "ReflectUtils.getMethod(Class clazz, String methodName, Class... argsType)", "testcase": false, "constructor": false}, {"identifier": "getPropertySetterMethod", "parameters": "(Class clazz, String property, Class propertyClazz)", "modifiers": "public static", "return": "Method", "signature": "Method getPropertySetterMethod(Class clazz, String property, Class propertyClazz)", "full_signature": "public static Method getPropertySetterMethod(Class clazz, String property, Class propertyClazz)", "class_method_signature": "ReflectUtils.getPropertySetterMethod(Class clazz, String property, Class propertyClazz)", "testcase": false, "constructor": false}, {"identifier": "getPropertyGetterMethod", "parameters": "(Class clazz, String property)", "modifiers": "public static", "return": "Method", "signature": "Method getPropertyGetterMethod(Class clazz, String property)", "full_signature": "public static Method getPropertyGetterMethod(Class clazz, String property)", "class_method_signature": "ReflectUtils.getPropertyGetterMethod(Class clazz, String property)", "testcase": false, "constructor": false}, {"identifier": "isBeanPropertyReadMethod", "parameters": "(Method method)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isBeanPropertyReadMethod(Method method)", "full_signature": "protected static boolean isBeanPropertyReadMethod(Method method)", "class_method_signature": "ReflectUtils.isBeanPropertyReadMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "getPropertyNameFromBeanReadMethod", "parameters": "(Method method)", "modifiers": "protected static", "return": "String", "signature": "String getPropertyNameFromBeanReadMethod(Method method)", "full_signature": "protected static String getPropertyNameFromBeanReadMethod(Method method)", "class_method_signature": "ReflectUtils.getPropertyNameFromBeanReadMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "isBeanPropertyWriteMethod", "parameters": "(Method method)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isBeanPropertyWriteMethod(Method method)", "full_signature": "protected static boolean isBeanPropertyWriteMethod(Method method)", "class_method_signature": "ReflectUtils.isBeanPropertyWriteMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "isPublicInstanceField", "parameters": "(Field field)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isPublicInstanceField(Field field)", "full_signature": "protected static boolean isPublicInstanceField(Field field)", "class_method_signature": "ReflectUtils.isPublicInstanceField(Field field)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/ReflectUtils.java"}, "focal_method": {"identifier": "isBeanPropertyWriteMethod", "parameters": "(Method method)", "modifiers": "protected static", "return": "boolean", "body": "protected static boolean isBeanPropertyWriteMethod(Method method) {\n        return method != null\n            && Modifier.isPublic(method.getModifiers())\n            && !Modifier.isStatic(method.getModifiers())\n            && method.getDeclaringClass() != Object.class\n            && method.getParameterTypes().length == 1\n            && method.getName().startsWith(\"set\")\n            // \u6392\u9664\u5c31\u53ebset\u7684\u65b9\u6cd5\n            && !\"set\".equals(method.getName());\n    }", "signature": "boolean isBeanPropertyWriteMethod(Method method)", "full_signature": "protected static boolean isBeanPropertyWriteMethod(Method method)", "class_method_signature": "ReflectUtils.isBeanPropertyWriteMethod(Method method)", "testcase": false, "constructor": false, "invocations": ["isPublic", "getModifiers", "isStatic", "getModifiers", "getDeclaringClass", "getParameterTypes", "startsWith", "getName", "equals", "getName"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}