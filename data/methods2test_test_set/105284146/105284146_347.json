{"test_class": {"identifier": "UcteConverterHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Network reference;", "modifier": "private static", "type": "Network", "declarator": "reference", "var_name": "reference"}], "file": "ucte/ucte-converter/src/test/java/com/powsybl/ucte/converter/util/UcteConverterHelperTest.java"}, "test_case": {"identifier": "calculateSymmAngleDuTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calculateSymmAngleDuTest() {\n        assertEquals(1.573, calculateSymmAngleDu(reference.getTwoWindingsTransformer(\"ZABCD221 ZEFGH221 1\")), 0.0001);\n    }", "signature": "void calculateSymmAngleDuTest()", "full_signature": "@Test public void calculateSymmAngleDuTest()", "class_method_signature": "UcteConverterHelperTest.calculateSymmAngleDuTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calculateSymmAngleDu", "getTwoWindingsTransformer"]}, "focal_class": {"identifier": "UcteConverterHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "UcteConverterHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " UcteConverterHelper()", "full_signature": "private  UcteConverterHelper()", "class_method_signature": "UcteConverterHelper.UcteConverterHelper()", "testcase": false, "constructor": true}, {"identifier": "calculatePhaseDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculatePhaseDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculatePhaseDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculatePhaseDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "calculateSymmAngleDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "calculateAsymmAngleDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateAsymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "calculateAsymmAngleTheta", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "signature": "double calculateAsymmAngleTheta(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateAsymmAngleTheta(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateAsymmAngleTheta(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}], "file": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/util/UcteConverterHelper.java"}, "focal_method": {"identifier": "calculateSymmAngleDu", "parameters": "(TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "public static", "return": "double", "body": "public static double calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer) {\n        double alphaMin = Double.MAX_VALUE;\n        double alphaMax = -Double.MAX_VALUE;\n\n        PhaseTapChanger tapChanger = twoWindingsTransformer.getPhaseTapChanger();\n        for (int i = tapChanger.getLowTapPosition(); i <= tapChanger.getHighTapPosition(); ++i) {\n            alphaMin = Double.min(alphaMin, tapChanger.getStep(i).getAlpha());\n            alphaMax = Double.max(alphaMax, tapChanger.getStep(i).getAlpha());\n        }\n        alphaMin = Math.toRadians(alphaMin);\n        alphaMax = Math.toRadians(alphaMax);\n\n        return 100 * (2 * (Math.tan(alphaMax / 2) - Math.tan(alphaMin / 2)) / (tapChanger.getStepCount() - 1));\n    }", "signature": "double calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "public static double calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteConverterHelper.calculateSymmAngleDu(TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false, "invocations": ["getPhaseTapChanger", "getLowTapPosition", "getHighTapPosition", "min", "getAlpha", "getStep", "max", "getAlpha", "getStep", "toRadians", "toRadians", "tan", "tan", "getStepCount"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}