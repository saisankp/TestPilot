{"test_class": {"identifier": "HkdfStreamingPrfTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/prf/HkdfStreamingPrfTest.java"}, "test_case": {"identifier": "testComputePrf_rfc589vector5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComputePrf_rfc589vector5() throws Exception {\n    HashType hash = HashType.SHA1;\n    byte[] ikm =\n        Hex.decode(\n            \"000102030405060708090a0b0c0d0e0f\"\n                + \"101112131415161718191a1b1c1d1e1f\"\n                + \"202122232425262728292a2b2c2d2e2f\"\n                + \"303132333435363738393a3b3c3d3e3f\"\n                + \"404142434445464748494a4b4c4d4e4f\");\n    byte[] salt =\n        Hex.decode(\n            \"606162636465666768696a6b6c6d6e6f\"\n                + \"707172737475767778797a7b7c7d7e7f\"\n                + \"808182838485868788898a8b8c8d8e8f\"\n                + \"909192939495969798999a9b9c9d9e9f\"\n                + \"a0a1a2a3a4a5a6a7a8a9aaabacadaeaf\");\n    byte[] info =\n        Hex.decode(\n            \"b0b1b2b3b4b5b6b7b8b9babbbcbdbebf\"\n                + \"c0c1c2c3c4c5c6c7c8c9cacbcccdcecf\"\n                + \"d0d1d2d3d4d5d6d7d8d9dadbdcdddedf\"\n                + \"e0e1e2e3e4e5e6e7e8e9eaebecedeeef\"\n                + \"f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff\");\n    byte[] expectedResult =\n        Hex.decode(\n            \"0bd770a74d1160f7c9f12cd5912a06eb\"\n                + \"ff6adcae899d92191fe4305673ba2ffe\"\n                + \"8fa3f1a4e5ad79f3f334b3b202b2173c\"\n                + \"486ea37ce3d397ed034c7f9dfeb15c5e\"\n                + \"927336d0441f4c4300e2cff0d0900b52\"\n                + \"d3b4\");\n    HkdfStreamingPrf prf = new HkdfStreamingPrf(hash, ikm, salt);\n    InputStream input = prf.computePrf(info);\n\n    byte[] output = new byte[expectedResult.length];\n    assertThat(input.read(output)).isEqualTo(expectedResult.length);\n    assertThat(output).isEqualTo(expectedResult);\n  }", "signature": "void testComputePrf_rfc589vector5()", "full_signature": "@Test public void testComputePrf_rfc589vector5()", "class_method_signature": "HkdfStreamingPrfTest.testComputePrf_rfc589vector5()", "testcase": true, "constructor": false, "invocations": ["decode", "decode", "decode", "decode", "computePrf", "isEqualTo", "assertThat", "read", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "HkdfStreamingPrf", "superclass": "", "interfaces": "implements StreamingPrf", "fields": [{"original_string": "private final HashType hashType;", "modifier": "private final", "type": "HashType", "declarator": "hashType", "var_name": "hashType"}, {"original_string": "@SuppressWarnings(\"Immutable\")\n  private final byte[] ikm;", "modifier": "@SuppressWarnings(\"Immutable\")\n  private final", "type": "byte[]", "declarator": "ikm", "var_name": "ikm"}, {"original_string": "@SuppressWarnings(\"Immutable\")\n  private final byte[] salt;", "modifier": "@SuppressWarnings(\"Immutable\")\n  private final", "type": "byte[]", "declarator": "salt", "var_name": "salt"}], "methods": [{"identifier": "getJavaxHmacName", "parameters": "(HashType hashType)", "modifiers": "private static", "return": "String", "signature": "String getJavaxHmacName(HashType hashType)", "full_signature": "private static String getJavaxHmacName(HashType hashType)", "class_method_signature": "HkdfStreamingPrf.getJavaxHmacName(HashType hashType)", "testcase": false, "constructor": false}, {"identifier": "HkdfStreamingPrf", "parameters": "(final HashType hashType, final byte[] ikm, final byte[] salt)", "modifiers": "public", "return": "", "signature": " HkdfStreamingPrf(final HashType hashType, final byte[] ikm, final byte[] salt)", "full_signature": "public  HkdfStreamingPrf(final HashType hashType, final byte[] ikm, final byte[] salt)", "class_method_signature": "HkdfStreamingPrf.HkdfStreamingPrf(final HashType hashType, final byte[] ikm, final byte[] salt)", "testcase": false, "constructor": true}, {"identifier": "computePrf", "parameters": "(final byte[] input)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream computePrf(final byte[] input)", "full_signature": "@Override public InputStream computePrf(final byte[] input)", "class_method_signature": "HkdfStreamingPrf.computePrf(final byte[] input)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/prf/HkdfStreamingPrf.java"}, "focal_method": {"identifier": "computePrf", "parameters": "(final byte[] input)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n  public InputStream computePrf(final byte[] input) {\n    return new HkdfInputStream(input);\n  }", "signature": "InputStream computePrf(final byte[] input)", "full_signature": "@Override public InputStream computePrf(final byte[] input)", "class_method_signature": "HkdfStreamingPrf.computePrf(final byte[] input)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}