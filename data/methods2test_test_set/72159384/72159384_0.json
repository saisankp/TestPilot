{"test_class": {"identifier": "ConsumerRecordRelayTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Consumer<Integer, String> consumer;", "modifier": "@Mock\n    private", "type": "Consumer<Integer, String>", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "@Mock\n    private BlockingQueueConsumer<Integer, String> blockingQueueConsumer;", "modifier": "@Mock\n    private", "type": "BlockingQueueConsumer<Integer, String>", "declarator": "blockingQueueConsumer", "var_name": "blockingQueueConsumer"}, {"original_string": "private ConsumerRecord<Integer, String> record = new ConsumerRecord<>(\"testTopic\", 1, 42, 1234, \"SomeValue\");", "modifier": "private", "type": "ConsumerRecord<Integer, String>", "declarator": "record = new ConsumerRecord<>(\"testTopic\", 1, 42, 1234, \"SomeValue\")", "var_name": "record"}], "file": "verteiler/src/test/java/io/datanerds/verteiler/ConsumerRecordRelayTest.java"}, "test_case": {"identifier": "relayWithException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void relayWithException() throws Exception {\n        when(consumer.poll(anyLong())).thenThrow(RuntimeException.class);\n\n        ConsumerRecordRelay<Integer, String> relay = new ConsumerRecordRelay<>(consumer, blockingQueueConsumer);\n        new Thread(relay).start();\n        verify(blockingQueueConsumer, never()).relay(record);\n        verify(consumer, timeout(1000).only()).poll(anyLong());\n        relay.stop();\n    }", "signature": "void relayWithException()", "full_signature": "@Test public void relayWithException()", "class_method_signature": "ConsumerRecordRelayTest.relayWithException()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "poll", "anyLong", "start", "relay", "verify", "never", "poll", "verify", "only", "timeout", "anyLong", "stop"]}, "focal_class": {"identifier": "ConsumerRecordRelay", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ConsumerRecordRelay.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConsumerRecordRelay.class)", "var_name": "logger"}, {"original_string": "private static final long POLLING_TIMEOUT_MS = 5000L;", "modifier": "private static final", "type": "long", "declarator": "POLLING_TIMEOUT_MS = 5000L", "var_name": "POLLING_TIMEOUT_MS"}, {"original_string": "private volatile boolean stopped = false;", "modifier": "private volatile", "type": "boolean", "declarator": "stopped = false", "var_name": "stopped"}, {"original_string": "private volatile boolean updateOffsets;", "modifier": "private volatile", "type": "boolean", "declarator": "updateOffsets", "var_name": "updateOffsets"}, {"original_string": "private final Map<TopicPartition, OffsetAndMetadata> offsets = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<TopicPartition, OffsetAndMetadata>", "declarator": "offsets = new ConcurrentHashMap<>()", "var_name": "offsets"}, {"original_string": "private final BlockingQueueConsumer<K, V> blockingQueueConsumer;", "modifier": "private final", "type": "BlockingQueueConsumer<K, V>", "declarator": "blockingQueueConsumer", "var_name": "blockingQueueConsumer"}, {"original_string": "private final Consumer<K, V> consumer;", "modifier": "private final", "type": "Consumer<K, V>", "declarator": "consumer", "var_name": "consumer"}], "methods": [{"identifier": "ConsumerRecordRelay", "parameters": "(Consumer<K, V> consumer, BlockingQueueConsumer<K, V> blockingQueueConsumer)", "modifiers": "public", "return": "", "signature": " ConsumerRecordRelay(Consumer<K, V> consumer, BlockingQueueConsumer<K, V> blockingQueueConsumer)", "full_signature": "public  ConsumerRecordRelay(Consumer<K, V> consumer, BlockingQueueConsumer<K, V> blockingQueueConsumer)", "class_method_signature": "ConsumerRecordRelay.ConsumerRecordRelay(Consumer<K, V> consumer, BlockingQueueConsumer<K, V> blockingQueueConsumer)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ConsumerRecordRelay.run()", "testcase": false, "constructor": false}, {"identifier": "setOffset", "parameters": "(ConsumerRecord<K, V> record)", "modifiers": "public", "return": "void", "signature": "void setOffset(ConsumerRecord<K, V> record)", "full_signature": "public void setOffset(ConsumerRecord<K, V> record)", "class_method_signature": "ConsumerRecordRelay.setOffset(ConsumerRecord<K, V> record)", "testcase": false, "constructor": false}, {"identifier": "removePartitionFromOffset", "parameters": "(TopicPartition topicPartition)", "modifiers": "public", "return": "void", "signature": "void removePartitionFromOffset(TopicPartition topicPartition)", "full_signature": "public void removePartitionFromOffset(TopicPartition topicPartition)", "class_method_signature": "ConsumerRecordRelay.removePartitionFromOffset(TopicPartition topicPartition)", "testcase": false, "constructor": false}, {"identifier": "commitOffsets", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void commitOffsets()", "full_signature": "private void commitOffsets()", "class_method_signature": "ConsumerRecordRelay.commitOffsets()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void stop()", "full_signature": " void stop()", "class_method_signature": "ConsumerRecordRelay.stop()", "testcase": false, "constructor": false}, {"identifier": "callback", "parameters": "(Map<TopicPartition, OffsetAndMetadata> offset, Exception ex)", "modifiers": "private", "return": "void", "signature": "void callback(Map<TopicPartition, OffsetAndMetadata> offset, Exception ex)", "full_signature": "private void callback(Map<TopicPartition, OffsetAndMetadata> offset, Exception ex)", "class_method_signature": "ConsumerRecordRelay.callback(Map<TopicPartition, OffsetAndMetadata> offset, Exception ex)", "testcase": false, "constructor": false}], "file": "verteiler/src/main/java/io/datanerds/verteiler/ConsumerRecordRelay.java"}, "focal_method": {"identifier": "stop", "parameters": "()", "modifiers": "", "return": "void", "body": "void stop() {\n        logger.info(\"Stopping Kafka message relay\");\n        stopped = true;\n    }", "signature": "void stop()", "full_signature": " void stop()", "class_method_signature": "ConsumerRecordRelay.stop()", "testcase": false, "constructor": false, "invocations": ["info"]}, "repository": {"repo_id": 72159384, "url": "https://github.com/datanerds-io/verteiler", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 33, "license": "licensed"}}