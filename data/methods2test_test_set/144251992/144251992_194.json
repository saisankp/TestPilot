{"test_class": {"identifier": "FixedHourScheduledJobTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int EXECUTION_HOUR = 4;", "modifier": "private final", "type": "int", "declarator": "EXECUTION_HOUR = 4", "var_name": "EXECUTION_HOUR"}, {"original_string": "private FixedHourJob fixedHourJob;", "modifier": "private", "type": "FixedHourJob", "declarator": "fixedHourJob", "var_name": "fixedHourJob"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/scheduled/FixedHourScheduledJobTest.java"}, "test_case": {"identifier": "shouldUpdateReturnsTrueWhenLastExecuteWasYesterdayAndUpdateHourPassed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdateReturnsTrueWhenLastExecuteWasYesterdayAndUpdateHourPassed() {\n        // given\n        var updateHour = 4;\n        var instant = Instant.parse(\"2019-03-14T05:00:00.00Z\");\n        var zoneId = ZoneId.systemDefault();\n        var localClock = Clock.fixed(instant, zoneId);\n        var localFixedHourJob = new FixedHourJob(localClock, updateHour);\n\n        var lastExecuteTime = LocalDateTime.now(localClock).minus(1L, ChronoUnit.DAYS);\n\n        // when\n        var actualShouldUpdate = localFixedHourJob.shouldExecute(lastExecuteTime);\n\n        // then\n        assertThat(actualShouldUpdate).isTrue();\n    }", "signature": "void shouldUpdateReturnsTrueWhenLastExecuteWasYesterdayAndUpdateHourPassed()", "full_signature": "@Test public void shouldUpdateReturnsTrueWhenLastExecuteWasYesterdayAndUpdateHourPassed()", "class_method_signature": "FixedHourScheduledJobTest.shouldUpdateReturnsTrueWhenLastExecuteWasYesterdayAndUpdateHourPassed()", "testcase": true, "constructor": false, "invocations": ["parse", "systemDefault", "fixed", "minus", "now", "shouldExecute", "isTrue", "assertThat"]}, "focal_class": {"identifier": "FixedHourScheduledJob", "superclass": "", "interfaces": "implements ScheduledJob", "fields": [{"original_string": "protected final Clock clock;", "modifier": "protected final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "protected final int jobExecutionHour;", "modifier": "protected final", "type": "int", "declarator": "jobExecutionHour", "var_name": "jobExecutionHour"}], "methods": [{"identifier": "FixedHourScheduledJob", "parameters": "(Clock clock, int jobExecutionHour)", "modifiers": "protected", "return": "", "signature": " FixedHourScheduledJob(Clock clock, int jobExecutionHour)", "full_signature": "protected  FixedHourScheduledJob(Clock clock, int jobExecutionHour)", "class_method_signature": "FixedHourScheduledJob.FixedHourScheduledJob(Clock clock, int jobExecutionHour)", "testcase": false, "constructor": true}, {"identifier": "shouldExecute", "parameters": "(LocalDateTime lastExecuteTime)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean shouldExecute(LocalDateTime lastExecuteTime)", "full_signature": "@Override public final boolean shouldExecute(LocalDateTime lastExecuteTime)", "class_method_signature": "FixedHourScheduledJob.shouldExecute(LocalDateTime lastExecuteTime)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/scheduled/FixedHourScheduledJob.java"}, "focal_method": {"identifier": "shouldExecute", "parameters": "(LocalDateTime lastExecuteTime)", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n    public final boolean shouldExecute(LocalDateTime lastExecuteTime) {\n        var now = LocalDateTime.now(clock);\n        var today = LocalDate.now(clock);\n        var yesterday = today.minus(1, ChronoUnit.DAYS);\n        var lastExecuteDate = lastExecuteTime.toLocalDate();\n\n        // last execute two days or more ago\n        if(yesterday.isAfter(lastExecuteDate)) {\n            return true;\n\n            // last execute yesterday\n        } else if(today.isAfter(lastExecuteDate)) {\n            return now.getHour() >= this.jobExecutionHour;\n\n            // last execute today\n        } else {\n            return lastExecuteTime.getHour() < this.jobExecutionHour;\n        }\n    }", "signature": "boolean shouldExecute(LocalDateTime lastExecuteTime)", "full_signature": "@Override public final boolean shouldExecute(LocalDateTime lastExecuteTime)", "class_method_signature": "FixedHourScheduledJob.shouldExecute(LocalDateTime lastExecuteTime)", "testcase": false, "constructor": false, "invocations": ["now", "now", "minus", "toLocalDate", "isAfter", "isAfter", "getHour", "getHour"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}