{"test_class": {"identifier": "VertxJobsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CALLBACK_URL = \"http://localhost\";", "modifier": "public static final", "type": "String", "declarator": "CALLBACK_URL = \"http://localhost\"", "var_name": "CALLBACK_URL"}, {"original_string": "public static final String JOB_SERVICE_URL = \"http://localhost:8085\";", "modifier": "public static final", "type": "String", "declarator": "JOB_SERVICE_URL = \"http://localhost:8085\"", "var_name": "JOB_SERVICE_URL"}, {"original_string": "private VertxJobsService tested;", "modifier": "private", "type": "VertxJobsService", "declarator": "tested", "var_name": "tested"}, {"original_string": "private ExecutorService executor = Executors.newSingleThreadExecutor();", "modifier": "private", "type": "ExecutorService", "declarator": "executor = Executors.newSingleThreadExecutor()", "var_name": "executor"}, {"original_string": "@Mock\n    private Vertx vertx;", "modifier": "@Mock\n    private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "@Mock\n    private WebClient webClient;", "modifier": "@Mock\n    private", "type": "WebClient", "declarator": "webClient", "var_name": "webClient"}, {"original_string": "@Mock\n    private Instance instance;", "modifier": "@Mock\n    private", "type": "Instance", "declarator": "instance", "var_name": "instance"}], "file": "addons/jobs/jobs-management-quarkus-addon/src/test/java/org/kie/kogito/jobs/management/quarkus/VertxJobsServiceTest.java"}, "test_case": {"identifier": "testGetScheduleTime", "parameters": "(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response)", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetScheduleTime(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response) {\n        when(webClient.get(anyString())).thenReturn(request);\n        Job job = new Job();\n        job.setId(\"123\");\n        job.setExpirationTime(ZonedDateTime.now());\n        AsyncResult<HttpResponse<Buffer>> asyncResult = mock(AsyncResult.class);\n        when(asyncResult.succeeded()).thenReturn(true);\n        when(asyncResult.result()).thenReturn(response);\n        when(response.statusCode()).thenReturn(200);\n        when(response.bodyAsJson(any())).thenReturn(job);\n        \n        doAnswer(invocationOnMock -> {\n            Handler<AsyncResult<HttpResponse<Buffer>>> handler = invocationOnMock.getArgument(0);\n            executor.submit(() -> handler.handle(asyncResult));\n            return null;\n        }).when(request).send(any());\n        \n        ZonedDateTime scheduledTime = tested.getScheduledTime(\"123\");\n        assertThat(scheduledTime).isEqualTo(job.getExpirationTime());\n        verify(webClient).get(\"/jobs/123\");\n    }", "signature": "void testGetScheduleTime(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response)", "full_signature": "@Test void testGetScheduleTime(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response)", "class_method_signature": "VertxJobsServiceTest.testGetScheduleTime(@Mock HttpRequest<Buffer> request, @Mock HttpResponse<Buffer> response)", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "get", "anyString", "setId", "setExpirationTime", "now", "mock", "thenReturn", "when", "succeeded", "thenReturn", "when", "result", "thenReturn", "when", "statusCode", "thenReturn", "when", "bodyAsJson", "any", "send", "when", "doAnswer", "getArgument", "submit", "handle", "any", "getScheduledTime", "isEqualTo", "assertThat", "getExpirationTime", "get", "verify"]}, "focal_class": {"identifier": "VertxJobsService", "superclass": "extends RestJobsService", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(VertxJobsService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(VertxJobsService.class)", "var_name": "LOGGER"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private Instance<WebClient> providedWebClient;", "modifier": "private", "type": "Instance<WebClient>", "declarator": "providedWebClient", "var_name": "providedWebClient"}, {"original_string": "private WebClient client;", "modifier": "private", "type": "WebClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "VertxJobsService", "parameters": "(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "modifiers": "@Inject public", "return": "", "signature": " VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "full_signature": "@Inject public  VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "class_method_signature": "VertxJobsService.VertxJobsService(@ConfigProperty(name = \"kogito.jobs-service.url\") String jobServiceUrl,\n                            @ConfigProperty(name = \"kogito.service.url\") String callbackEndpoint,\n                            Vertx vertx,\n                            Instance<WebClient> providedWebClient)", "testcase": false, "constructor": true}, {"identifier": "VertxJobsService", "parameters": "()", "modifiers": "", "return": "", "signature": " VertxJobsService()", "full_signature": "  VertxJobsService()", "class_method_signature": "VertxJobsService.VertxJobsService()", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void initialize()", "full_signature": "@PostConstruct void initialize()", "class_method_signature": "VertxJobsService.initialize()", "testcase": false, "constructor": false}, {"identifier": "scheduleProcessJob", "parameters": "(ProcessJobDescription description)", "modifiers": "@Override public", "return": "String", "signature": "String scheduleProcessJob(ProcessJobDescription description)", "full_signature": "@Override public String scheduleProcessJob(ProcessJobDescription description)", "class_method_signature": "VertxJobsService.scheduleProcessJob(ProcessJobDescription description)", "testcase": false, "constructor": false}, {"identifier": "scheduleProcessInstanceJob", "parameters": "(ProcessInstanceJobDescription description)", "modifiers": "@Override public", "return": "String", "signature": "String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "full_signature": "@Override public String scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "class_method_signature": "VertxJobsService.scheduleProcessInstanceJob(ProcessInstanceJobDescription description)", "testcase": false, "constructor": false}, {"identifier": "cancelJob", "parameters": "(String id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cancelJob(String id)", "full_signature": "@Override public boolean cancelJob(String id)", "class_method_signature": "VertxJobsService.cancelJob(String id)", "testcase": false, "constructor": false}, {"identifier": "getScheduledTime", "parameters": "(String id)", "modifiers": "@Override public", "return": "ZonedDateTime", "signature": "ZonedDateTime getScheduledTime(String id)", "full_signature": "@Override public ZonedDateTime getScheduledTime(String id)", "class_method_signature": "VertxJobsService.getScheduledTime(String id)", "testcase": false, "constructor": false}], "file": "addons/jobs/jobs-management-quarkus-addon/src/main/java/org/kie/kogito/jobs/management/quarkus/VertxJobsService.java"}, "focal_method": {"identifier": "getScheduledTime", "parameters": "(String id)", "modifiers": "@Override public", "return": "ZonedDateTime", "body": "@Override\n    public ZonedDateTime getScheduledTime(String id) {\n        CompletableFuture<Job> future = new CompletableFuture<Job>();\n\n        client.get(JOBS_PATH + \"/\" + id).send(res -> {\n            if (res.succeeded() && res.result().statusCode() == 200) {\n                future.complete(res.result().bodyAsJson(Job.class));\n            } else if (res.succeeded() && res.result().statusCode() == 404) {\n                future.completeExceptionally(new JobNotFoundException(id));\n            } else {\n                future.completeExceptionally(new RuntimeException(\"Unable to find job with id \" + id));\n            }\n        });\n\n        try {\n            return future.get().getExpirationTime();\n        } catch (Exception e) {\n            if (e.getCause() != null) {\n                throw new RuntimeException(e.getCause());\n            }\n            \n            throw new RuntimeException(e);\n        }\n\n    }", "signature": "ZonedDateTime getScheduledTime(String id)", "full_signature": "@Override public ZonedDateTime getScheduledTime(String id)", "class_method_signature": "VertxJobsService.getScheduledTime(String id)", "testcase": false, "constructor": false, "invocations": ["send", "get", "succeeded", "statusCode", "result", "complete", "bodyAsJson", "result", "succeeded", "statusCode", "result", "completeExceptionally", "completeExceptionally", "getExpirationTime", "get", "getCause", "getCause"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}