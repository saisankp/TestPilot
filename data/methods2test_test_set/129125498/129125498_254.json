{"test_class": {"identifier": "RequestValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DetectorDocument illegalParamsDetector;", "modifier": "private", "type": "DetectorDocument", "declarator": "illegalParamsDetector", "var_name": "illegalParamsDetector"}, {"original_string": "private DetectorDocument legalParamsDetector;", "modifier": "private", "type": "DetectorDocument", "declarator": "legalParamsDetector", "var_name": "legalParamsDetector"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/util/RequestValidatorTest.java"}, "test_case": {"identifier": "testValidateInvalidDetector_illegal_params", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testValidateInvalidDetector_illegal_params() {\n        RequestValidator.validateDetectorDocument(illegalParamsDetector);\n    }", "signature": "void testValidateInvalidDetector_illegal_params()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testValidateInvalidDetector_illegal_params()", "class_method_signature": "RequestValidatorTest.testValidateInvalidDetector_illegal_params()", "testcase": true, "constructor": false, "invocations": ["validateDetectorDocument"]}, "focal_class": {"identifier": "RequestValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validateUser", "parameters": "(User user)", "modifiers": "public static", "return": "void", "signature": "void validateUser(User user)", "full_signature": "public static void validateUser(User user)", "class_method_signature": "RequestValidator.validateUser(User user)", "testcase": false, "constructor": false}, {"identifier": "validateExpression", "parameters": "(Expression expression)", "modifiers": "public static", "return": "void", "signature": "void validateExpression(Expression expression)", "full_signature": "public static void validateExpression(Expression expression)", "class_method_signature": "RequestValidator.validateExpression(Expression expression)", "testcase": false, "constructor": false}, {"identifier": "validateBoolean", "parameters": "(Boolean condition)", "modifiers": "public static", "return": "void", "signature": "void validateBoolean(Boolean condition)", "full_signature": "public static void validateBoolean(Boolean condition)", "class_method_signature": "RequestValidator.validateBoolean(Boolean condition)", "testcase": false, "constructor": false}, {"identifier": "validateOperand", "parameters": "(Operand operand)", "modifiers": "private static", "return": "void", "signature": "void validateOperand(Operand operand)", "full_signature": "private static void validateOperand(Operand operand)", "class_method_signature": "RequestValidator.validateOperand(Operand operand)", "testcase": false, "constructor": false}, {"identifier": "validateMappingDetector", "parameters": "(ConsumerDetectorMapping consumerDetectorMapping)", "modifiers": "public static", "return": "void", "signature": "void validateMappingDetector(ConsumerDetectorMapping consumerDetectorMapping)", "full_signature": "public static void validateMappingDetector(ConsumerDetectorMapping consumerDetectorMapping)", "class_method_signature": "RequestValidator.validateMappingDetector(ConsumerDetectorMapping consumerDetectorMapping)", "testcase": false, "constructor": false}, {"identifier": "validateDetectorDocument", "parameters": "(DetectorDocument document)", "modifiers": "public static", "return": "void", "signature": "void validateDetectorDocument(DetectorDocument document)", "full_signature": "public static void validateDetectorDocument(DetectorDocument document)", "class_method_signature": "RequestValidator.validateDetectorDocument(DetectorDocument document)", "testcase": false, "constructor": false}, {"identifier": "validateDetector", "parameters": "(Detector detector)", "modifiers": "public static", "return": "void", "signature": "void validateDetector(Detector detector)", "full_signature": "public static void validateDetector(Detector detector)", "class_method_signature": "RequestValidator.validateDetector(Detector detector)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/util/RequestValidator.java"}, "focal_method": {"identifier": "validateDetectorDocument", "parameters": "(DetectorDocument document)", "modifiers": "public static", "return": "void", "body": "public static void validateDetectorDocument(DetectorDocument document) {\n        new DetectorFactory().buildDetector(document);\n    }", "signature": "void validateDetectorDocument(DetectorDocument document)", "full_signature": "public static void validateDetectorDocument(DetectorDocument document)", "class_method_signature": "RequestValidator.validateDetectorDocument(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["buildDetector"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}