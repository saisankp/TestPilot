{"test_class": {"identifier": "ImageCompressUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/unicef/rapidreg/utils/ImageCompressUtilTest.java"}, "test_case": {"identifier": "should_return_sample_size_when_give_req_width_and_height", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_return_sample_size_when_give_req_width_and_height() throws Exception {\n        BitmapFactory.Options options = createBitmapFactoryOptions(4, 4);\n        int actual = calculateInSampleSize(options, 2, 2);\n        assertThat(\"should return 2 when ratio is 2\", actual, is(2));\n    }", "signature": "void should_return_sample_size_when_give_req_width_and_height()", "full_signature": "@Test public void should_return_sample_size_when_give_req_width_and_height()", "class_method_signature": "ImageCompressUtilTest.should_return_sample_size_when_give_req_width_and_height()", "testcase": true, "constructor": false, "invocations": ["createBitmapFactoryOptions", "calculateInSampleSize", "assertThat", "is"]}, "focal_class": {"identifier": "ImageCompressUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convertImageToBytes", "parameters": "(Bitmap imageSource)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] convertImageToBytes(Bitmap imageSource)", "full_signature": "public static byte[] convertImageToBytes(Bitmap imageSource)", "class_method_signature": "ImageCompressUtil.convertImageToBytes(Bitmap imageSource)", "testcase": false, "constructor": false}, {"identifier": "rotateBitmapByExif", "parameters": "(String srcPath, Bitmap bitmap)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap rotateBitmapByExif(String srcPath, Bitmap bitmap)", "full_signature": "public static Bitmap rotateBitmapByExif(String srcPath, Bitmap bitmap)", "class_method_signature": "ImageCompressUtil.rotateBitmapByExif(String srcPath, Bitmap bitmap)", "testcase": false, "constructor": false}, {"identifier": "recycleBitmap", "parameters": "(Bitmap bitmap)", "modifiers": "public static", "return": "void", "signature": "void recycleBitmap(Bitmap bitmap)", "full_signature": "public static void recycleBitmap(Bitmap bitmap)", "class_method_signature": "ImageCompressUtil.recycleBitmap(Bitmap bitmap)", "testcase": false, "constructor": false}, {"identifier": "storeImage", "parameters": "(Bitmap image, String saveFilePath)", "modifiers": "public static", "return": "void", "signature": "void storeImage(Bitmap image, String saveFilePath)", "full_signature": "public static void storeImage(Bitmap image, String saveFilePath)", "class_method_signature": "ImageCompressUtil.storeImage(Bitmap image, String saveFilePath)", "testcase": false, "constructor": false}, {"identifier": "compressImage", "parameters": "(String filePath, float maxWidth, float maxHeight)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap compressImage(String filePath, float maxWidth, float maxHeight)", "full_signature": "public static Bitmap compressImage(String filePath, float maxWidth, float maxHeight)", "class_method_signature": "ImageCompressUtil.compressImage(String filePath, float maxWidth, float maxHeight)", "testcase": false, "constructor": false}, {"identifier": "compressByQuality", "parameters": "(Bitmap bitmap, int maxSize)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap compressByQuality(Bitmap bitmap, int maxSize)", "full_signature": "public static Bitmap compressByQuality(Bitmap bitmap, int maxSize)", "class_method_signature": "ImageCompressUtil.compressByQuality(Bitmap bitmap, int maxSize)", "testcase": false, "constructor": false}, {"identifier": "calculateInSampleSize", "parameters": "(BitmapFactory.Options options, int reqWidth, int reqHeight)", "modifiers": "public static", "return": "int", "signature": "int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight)", "full_signature": "public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight)", "class_method_signature": "ImageCompressUtil.calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight)", "testcase": false, "constructor": false}, {"identifier": "readImageFile", "parameters": "(String filePath)", "modifiers": "public static", "return": "Blob", "signature": "Blob readImageFile(String filePath)", "full_signature": "public static Blob readImageFile(String filePath)", "class_method_signature": "ImageCompressUtil.readImageFile(String filePath)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/unicef/rapidreg/utils/ImageCompressUtil.java"}, "focal_method": {"identifier": "calculateInSampleSize", "parameters": "(BitmapFactory.Options options, int reqWidth, int reqHeight)", "modifiers": "public static", "return": "int", "body": "public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n\n        if (height > reqHeight || width > reqWidth) {\n            final int heightRatio = Math.round((float) height / (float) reqHeight);\n            final int widthRatio = Math.round((float) width / (float) reqWidth);\n            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;\n        }\n        float totalPixels = width * height;\n        float totalReqPixelsCap = reqWidth * reqHeight * 2;\n        while (totalPixels / (inSampleSize * inSampleSize) > totalReqPixelsCap) {\n            inSampleSize++;\n        }\n        return inSampleSize;\n    }", "signature": "int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight)", "full_signature": "public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight)", "class_method_signature": "ImageCompressUtil.calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight)", "testcase": false, "constructor": false, "invocations": ["round", "round"]}, "repository": {"repo_id": 59507570, "url": "https://github.com/UnicefNY/RapidReg", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 10753, "license": "Other"}}