{"test_class": {"identifier": "ShuntCompensatorsValidationTest", "superclass": "extends AbstractValidationTest", "interfaces": "", "fields": [{"original_string": "private double q = 170.50537;", "modifier": "private", "type": "double", "declarator": "q = 170.50537", "var_name": "q"}, {"original_string": "private double p = Float.NaN;", "modifier": "private", "type": "double", "declarator": "p = Float.NaN", "var_name": "p"}, {"original_string": "private int currentSectionCount = 1;", "modifier": "private", "type": "int", "declarator": "currentSectionCount = 1", "var_name": "currentSectionCount"}, {"original_string": "private final int maximumSectionCount = 1;", "modifier": "private final", "type": "int", "declarator": "maximumSectionCount = 1", "var_name": "maximumSectionCount"}, {"original_string": "private final double bPerSection = -0.0010387811;", "modifier": "private final", "type": "double", "declarator": "bPerSection = -0.0010387811", "var_name": "bPerSection"}, {"original_string": "private final double v = 405.14175;", "modifier": "private final", "type": "double", "declarator": "v = 405.14175", "var_name": "v"}, {"original_string": "private final double qMax = -150;", "modifier": "private final", "type": "double", "declarator": "qMax = -150", "var_name": "qMax"}, {"original_string": "private final double nominalV = 380;", "modifier": "private final", "type": "double", "declarator": "nominalV = 380", "var_name": "nominalV"}, {"original_string": "private final boolean connected = true;", "modifier": "private final", "type": "boolean", "declarator": "connected = true", "var_name": "connected"}, {"original_string": "private boolean mainComponent = true;", "modifier": "private", "type": "boolean", "declarator": "mainComponent = true", "var_name": "mainComponent"}, {"original_string": "private ShuntCompensator shunt;", "modifier": "private", "type": "ShuntCompensator", "declarator": "shunt", "var_name": "shunt"}, {"original_string": "private Terminal shuntTerminal;", "modifier": "private", "type": "Terminal", "declarator": "shuntTerminal", "var_name": "shuntTerminal"}, {"original_string": "private BusView shuntBusView;", "modifier": "private", "type": "BusView", "declarator": "shuntBusView", "var_name": "shuntBusView"}], "file": "loadflow/loadflow-validation/src/test/java/com/powsybl/loadflow/validation/ShuntCompensatorsValidationTest.java"}, "test_case": {"identifier": "checkShuntsValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkShuntsValues() {\n        // \u201cp\u201d is always NaN\n        assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, v, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n        p = 1;\n        assertFalse(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, v, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n        p = Float.NaN;\n\n        // \u201cq\u201d = - bPerSection * currentSectionCount * v^2\n        assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, v, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n        q = 170.52;\n        assertFalse(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, v, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n        assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, v, qMax, nominalV, connected, mainComponent, looseConfig, NullWriter.NULL_WRITER));\n        q = 171.52;\n        assertFalse(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, v, qMax, nominalV, connected, mainComponent, looseConfig, NullWriter.NULL_WRITER));\n        // check main component\n        mainComponent = false;\n        assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, v, qMax, nominalV, connected, mainComponent, looseConfig, NullWriter.NULL_WRITER));\n        mainComponent = true;\n        q = 170.50537;\n\n        // check with NaN values\n        assertFalse(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, Float.NaN, v, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n        assertFalse(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, Float.NaN, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n        strictConfig.setOkMissingValues(true);\n        assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, Float.NaN, v, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n        assertTrue(ShuntCompensatorsValidation.INSTANCE.checkShunts(\"test\", p, q, currentSectionCount, maximumSectionCount, bPerSection, Float.NaN, qMax, nominalV, connected, mainComponent, strictConfig, NullWriter.NULL_WRITER));\n    }", "signature": "void checkShuntsValues()", "full_signature": "@Test public void checkShuntsValues()", "class_method_signature": "ShuntCompensatorsValidationTest.checkShuntsValues()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "checkShunts", "assertFalse", "checkShunts", "assertTrue", "checkShunts", "assertFalse", "checkShunts", "assertTrue", "checkShunts", "assertFalse", "checkShunts", "assertTrue", "checkShunts", "assertFalse", "checkShunts", "assertFalse", "checkShunts", "setOkMissingValues", "assertTrue", "checkShunts", "assertTrue", "checkShunts"]}, "focal_class": {"identifier": "ShuntCompensatorsValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(StaticVarCompensatorsValidation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(StaticVarCompensatorsValidation.class)", "var_name": "LOGGER"}, {"original_string": "public static final ShuntCompensatorsValidation INSTANCE = new ShuntCompensatorsValidation();", "modifier": "public static final", "type": "ShuntCompensatorsValidation", "declarator": "INSTANCE = new ShuntCompensatorsValidation()", "var_name": "INSTANCE"}], "methods": [{"identifier": "ShuntCompensatorsValidation", "parameters": "()", "modifiers": "private", "return": "", "signature": " ShuntCompensatorsValidation()", "full_signature": "private  ShuntCompensatorsValidation()", "class_method_signature": "ShuntCompensatorsValidation.ShuntCompensatorsValidation()", "testcase": false, "constructor": true}, {"identifier": "checkShunts", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "signature": "boolean checkShunts(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkShunts(Network network, ValidationConfig config, Path file)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false}, {"identifier": "checkShunts", "parameters": "(Network network, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkShunts(Network network, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkShunts(Network network, ValidationConfig config, Writer writer)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(Network network, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkShunts", "parameters": "(Network network, ValidationConfig config, ValidationWriter shuntsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkShunts(Network network, ValidationConfig config, ValidationWriter shuntsWriter)", "full_signature": "public boolean checkShunts(Network network, ValidationConfig config, ValidationWriter shuntsWriter)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(Network network, ValidationConfig config, ValidationWriter shuntsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkShunts", "parameters": "(ShuntCompensator shunt, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkShunts(ShuntCompensator shunt, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkShunts(ShuntCompensator shunt, ValidationConfig config, Writer writer)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(ShuntCompensator shunt, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkShunts", "parameters": "(ShuntCompensator shunt, ValidationConfig config, ValidationWriter shuntsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkShunts(ShuntCompensator shunt, ValidationConfig config, ValidationWriter shuntsWriter)", "full_signature": "public boolean checkShunts(ShuntCompensator shunt, ValidationConfig config, ValidationWriter shuntsWriter)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(ShuntCompensator shunt, ValidationConfig config, ValidationWriter shuntsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkShunts", "parameters": "(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkShunts(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               Writer writer)", "full_signature": "public boolean checkShunts(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               Writer writer)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkShunts", "parameters": "(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               ValidationWriter shuntsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkShunts(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               ValidationWriter shuntsWriter)", "full_signature": "public boolean checkShunts(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               ValidationWriter shuntsWriter)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(String id, double p, double q, int currentSectionCount, int maximumSectionCount, double bPerSection,\n                               double v, double qMax, double nominalV, boolean connected, boolean mainComponent, ValidationConfig config,\n                               ValidationWriter shuntsWriter)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/ShuntCompensatorsValidation.java"}, "focal_method": {"identifier": "checkShunts", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "body": "public boolean checkShunts(Network network, ValidationConfig config, Path file) throws IOException {\n        Objects.requireNonNull(file);\n        Objects.requireNonNull(config);\n        Objects.requireNonNull(file);\n        try (Writer writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8)) {\n            return checkShunts(network, config, writer);\n        }\n    }", "signature": "boolean checkShunts(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkShunts(Network network, ValidationConfig config, Path file)", "class_method_signature": "ShuntCompensatorsValidation.checkShunts(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull", "newBufferedWriter", "checkShunts"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}