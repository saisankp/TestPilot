{"test_class": {"identifier": "FDBHolderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String dirString;", "modifier": "private final", "type": "String", "declarator": "dirString", "var_name": "dirString"}, {"original_string": "private final Tuple2 expected;", "modifier": "private final", "type": "Tuple2", "declarator": "expected", "var_name": "expected"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/store/FDBHolderImplTest.java"}, "test_case": {"identifier": "doCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doCompare() {\n        try {\n            Tuple2 actual = Tuple2.fromList(FDBHolderImpl.parseDirString(dirString));\n            if(expected.size() != actual.size()) {\n                fail(String.format(\"Tuple size mismatch: [%s] vs [%s]\", expected.getItems(), actual.getItems()));\n            }\n            for(int i = 0; i < expected.size(); ++i) {\n                Object e = expected.get(i);\n                Object a = actual.get(i);\n                assertEquals(String.format(\"tuple(%d)\", i), e, a);\n            }\n        } catch(IllegalArgumentException e) {\n            if(dirString != null) {\n                throw e;\n            }\n            // else: expected\n        }\n    }", "signature": "void doCompare()", "full_signature": "@Test public void doCompare()", "class_method_signature": "FDBHolderImplTest.doCompare()", "testcase": true, "constructor": false, "invocations": ["fromList", "parseDirString", "size", "size", "fail", "format", "getItems", "getItems", "size", "get", "get", "assertEquals", "format"]}, "focal_class": {"identifier": "FDBHolderImpl", "superclass": "", "interfaces": "implements FDBHolder, Service", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FDBHolderImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FDBHolderImpl.class)", "var_name": "LOG"}, {"original_string": "private static final String CONFIG_API_VERSION = \"fdbsql.fdb.api_version\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_API_VERSION = \"fdbsql.fdb.api_version\"", "var_name": "CONFIG_API_VERSION"}, {"original_string": "private static final String CONFIG_CLUSTER_FILE = \"fdbsql.fdb.cluster_file\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_CLUSTER_FILE = \"fdbsql.fdb.cluster_file\"", "var_name": "CONFIG_CLUSTER_FILE"}, {"original_string": "private static final String CONFIG_TRACE_DIRECTORY = \"fdbsql.fdb.trace_directory\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_TRACE_DIRECTORY = \"fdbsql.fdb.trace_directory\"", "var_name": "CONFIG_TRACE_DIRECTORY"}, {"original_string": "private static final String CONFIG_ROOT_DIR = \"fdbsql.fdb.root_directory\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_ROOT_DIR = \"fdbsql.fdb.root_directory\"", "var_name": "CONFIG_ROOT_DIR"}, {"original_string": "private static final String CONFIG_TLS_PLUGIN = \"fdbsql.fdb.tls.plugin\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_TLS_PLUGIN = \"fdbsql.fdb.tls.plugin\"", "var_name": "CONFIG_TLS_PLUGIN"}, {"original_string": "private static final String CONFIG_TLS_CERT_PATH = \"fdbsql.fdb.tls.cert_path\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_TLS_CERT_PATH = \"fdbsql.fdb.tls.cert_path\"", "var_name": "CONFIG_TLS_CERT_PATH"}, {"original_string": "private static final String CONFIG_TLS_KEY_PATH = \"fdbsql.fdb.tls.key_path\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_TLS_KEY_PATH = \"fdbsql.fdb.tls.key_path\"", "var_name": "CONFIG_TLS_KEY_PATH"}, {"original_string": "private static final String CONFIG_TLS_VERIFY_PEERS = \"fdbsql.fdb.tls.verify_peers\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_TLS_VERIFY_PEERS = \"fdbsql.fdb.tls.verify_peers\"", "var_name": "CONFIG_TLS_VERIFY_PEERS"}, {"original_string": "private static final String CONFIG_KNOB_PREFIX = \"fdbsql.fdb.knobs.\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_KNOB_PREFIX = \"fdbsql.fdb.knobs.\"", "var_name": "CONFIG_KNOB_PREFIX"}, {"original_string": "private final ConfigurationService configService;", "modifier": "private final", "type": "ConfigurationService", "declarator": "configService", "var_name": "configService"}, {"original_string": "private int apiVersion;", "modifier": "private", "type": "int", "declarator": "apiVersion", "var_name": "apiVersion"}, {"original_string": "private FDB fdb;", "modifier": "private", "type": "FDB", "declarator": "fdb", "var_name": "fdb"}, {"original_string": "private Database db;", "modifier": "private", "type": "Database", "declarator": "db", "var_name": "db"}, {"original_string": "private DirectorySubspace rootDirectory;", "modifier": "private", "type": "DirectorySubspace", "declarator": "rootDirectory", "var_name": "rootDirectory"}], "methods": [{"identifier": "FDBHolderImpl", "parameters": "(ConfigurationService configService)", "modifiers": "@Inject public", "return": "", "signature": " FDBHolderImpl(ConfigurationService configService)", "full_signature": "@Inject public  FDBHolderImpl(ConfigurationService configService)", "class_method_signature": "FDBHolderImpl.FDBHolderImpl(ConfigurationService configService)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "FDBHolderImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "FDBHolderImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "crash", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void crash()", "full_signature": "@Override public void crash()", "class_method_signature": "FDBHolderImpl.crash()", "testcase": false, "constructor": false}, {"identifier": "getAPIVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getAPIVersion()", "full_signature": "@Override public int getAPIVersion()", "class_method_signature": "FDBHolderImpl.getAPIVersion()", "testcase": false, "constructor": false}, {"identifier": "getFDB", "parameters": "()", "modifiers": "@Override public", "return": "FDB", "signature": "FDB getFDB()", "full_signature": "@Override public FDB getFDB()", "class_method_signature": "FDBHolderImpl.getFDB()", "testcase": false, "constructor": false}, {"identifier": "getDatabase", "parameters": "()", "modifiers": "@Override public", "return": "Database", "signature": "Database getDatabase()", "full_signature": "@Override public Database getDatabase()", "class_method_signature": "FDBHolderImpl.getDatabase()", "testcase": false, "constructor": false}, {"identifier": "getTransactionContext", "parameters": "()", "modifiers": "@Override public", "return": "TransactionContext", "signature": "TransactionContext getTransactionContext()", "full_signature": "@Override public TransactionContext getTransactionContext()", "class_method_signature": "FDBHolderImpl.getTransactionContext()", "testcase": false, "constructor": false}, {"identifier": "getRootDirectory", "parameters": "()", "modifiers": "@Override public", "return": "DirectorySubspace", "signature": "DirectorySubspace getRootDirectory()", "full_signature": "@Override public DirectorySubspace getRootDirectory()", "class_method_signature": "FDBHolderImpl.getRootDirectory()", "testcase": false, "constructor": false}, {"identifier": "setOptions", "parameters": "(NetworkOptions options)", "modifiers": "private", "return": "void", "signature": "void setOptions(NetworkOptions options)", "full_signature": "private void setOptions(NetworkOptions options)", "class_method_signature": "FDBHolderImpl.setOptions(NetworkOptions options)", "testcase": false, "constructor": false}, {"identifier": "parseDirString", "parameters": "(String dirString)", "modifiers": "static", "return": "List<String>", "signature": "List<String> parseDirString(String dirString)", "full_signature": "static List<String> parseDirString(String dirString)", "class_method_signature": "FDBHolderImpl.parseDirString(String dirString)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/store/FDBHolderImpl.java"}, "focal_method": {"identifier": "parseDirString", "parameters": "(String dirString)", "modifiers": "static", "return": "List<String>", "body": "static List<String> parseDirString(String dirString) {\n        ArgumentValidation.notNull(\"dirString\", dirString);\n        // Excess whitespace, ends with /, back to forward and deduplicate\n        String normalized = (dirString.trim() + \"/\").replace(\"\\\\\", \"/\").replace(\"//\", \"/\");\n        String[] parts = normalized.split(\"/\");\n        return Arrays.asList(parts);\n    }", "signature": "List<String> parseDirString(String dirString)", "full_signature": "static List<String> parseDirString(String dirString)", "class_method_signature": "FDBHolderImpl.parseDirString(String dirString)", "testcase": false, "constructor": false, "invocations": ["notNull", "replace", "replace", "trim", "split", "asList"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}