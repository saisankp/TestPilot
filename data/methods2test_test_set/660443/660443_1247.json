{"test_class": {"identifier": "PharmacophoreAngleBondTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/pcore/src/test/java/org/openscience/cdk/pharmacophore/PharmacophoreAngleBondTest.java"}, "test_case": {"identifier": "testGetAngle4", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAngle4() {\n        PharmacophoreAtom patom1 = new PharmacophoreAtom(\"[CX2]N\", \"Amine\", new Point3d(1, 1, 0));\n        PharmacophoreAtom patom2 = new PharmacophoreAtom(\"c1ccccc1\", \"Aromatic\", new Point3d(0, 0, 0));\n        PharmacophoreAtom patom3 = new PharmacophoreAtom(\"C\", \"Blah\", new Point3d(1, 0, 0));\n        PharmacophoreAngleBond pbond = new PharmacophoreAngleBond(patom1, patom2, patom3);\n        Assert.assertEquals(45.0, pbond.getBondLength(), 0.00001);\n    }", "signature": "void testGetAngle4()", "full_signature": "@Test public void testGetAngle4()", "class_method_signature": "PharmacophoreAngleBondTest.testGetAngle4()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getBondLength"]}, "focal_class": {"identifier": "PharmacophoreAngleBond", "superclass": "extends Bond", "interfaces": "", "fields": [], "methods": [{"identifier": "PharmacophoreAngleBond", "parameters": "(PharmacophoreAtom patom1, PharmacophoreAtom patom2, PharmacophoreAtom patom3)", "modifiers": "public", "return": "", "signature": " PharmacophoreAngleBond(PharmacophoreAtom patom1, PharmacophoreAtom patom2, PharmacophoreAtom patom3)", "full_signature": "public  PharmacophoreAngleBond(PharmacophoreAtom patom1, PharmacophoreAtom patom2, PharmacophoreAtom patom3)", "class_method_signature": "PharmacophoreAngleBond.PharmacophoreAngleBond(PharmacophoreAtom patom1, PharmacophoreAtom patom2, PharmacophoreAtom patom3)", "testcase": false, "constructor": true}, {"identifier": "getBondLength", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getBondLength()", "full_signature": "public double getBondLength()", "class_method_signature": "PharmacophoreAngleBond.getBondLength()", "testcase": false, "constructor": false}], "file": "tool/pcore/src/main/java/org/openscience/cdk/pharmacophore/PharmacophoreAngleBond.java"}, "focal_method": {"identifier": "getBondLength", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double getBondLength() {\n        double epsilon = 1e-3;\n        PharmacophoreAtom atom1 = (PharmacophoreAtom) getAtom(0);\n        PharmacophoreAtom atom2 = (PharmacophoreAtom) getAtom(1);\n        PharmacophoreAtom atom3 = (PharmacophoreAtom) getAtom(2);\n\n        double a2 = atom3.getPoint3d().distanceSquared(atom1.getPoint3d());\n        double b2 = atom3.getPoint3d().distanceSquared(atom2.getPoint3d());\n        double c2 = atom2.getPoint3d().distanceSquared(atom1.getPoint3d());\n\n        double cosangle = (b2 + c2 - a2) / (2 * Math.sqrt(b2) * Math.sqrt(c2));\n        if (-1.0 - epsilon < cosangle && -1.0 + epsilon > cosangle) return 180.0;\n        if (1.0 - epsilon < cosangle && 1.0 + epsilon > cosangle) return 0.0;\n\n        return Math.acos(cosangle) * 180.0 / Math.PI;\n    }", "signature": "double getBondLength()", "full_signature": "public double getBondLength()", "class_method_signature": "PharmacophoreAngleBond.getBondLength()", "testcase": false, "constructor": false, "invocations": ["getAtom", "getAtom", "getAtom", "distanceSquared", "getPoint3d", "getPoint3d", "distanceSquared", "getPoint3d", "getPoint3d", "distanceSquared", "getPoint3d", "getPoint3d", "sqrt", "sqrt", "acos"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}