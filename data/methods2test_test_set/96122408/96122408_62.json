{"test_class": {"identifier": "BadgeClassActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FiniteDuration ACTOR_MAX_WAIT_DURATION = duration(\"100 second\");", "modifier": "private static final", "type": "FiniteDuration", "declarator": "ACTOR_MAX_WAIT_DURATION = duration(\"100 second\")", "var_name": "ACTOR_MAX_WAIT_DURATION"}, {"original_string": "private TestKit probe;", "modifier": "private", "type": "TestKit", "declarator": "probe", "var_name": "probe"}, {"original_string": "private ActorRef subject;", "modifier": "private", "type": "ActorRef", "declarator": "subject", "var_name": "subject"}, {"original_string": "private Request actorMessage;", "modifier": "private", "type": "Request", "declarator": "actorMessage", "var_name": "actorMessage"}, {"original_string": "private BadgrServiceImpl mockBadgingService;", "modifier": "private", "type": "BadgrServiceImpl", "declarator": "mockBadgingService", "var_name": "mockBadgingService"}, {"original_string": "private ProjectCommonException resourceNotFoundException;", "modifier": "private", "type": "ProjectCommonException", "declarator": "resourceNotFoundException", "var_name": "resourceNotFoundException"}], "file": "actors/badge/src/test/java/org/sunbird/badge/actors/BadgeClassActorTest.java"}, "test_case": {"identifier": "testCreateBadgeClassFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateBadgeClassFailure() {\n    PowerMockito.when(mockBadgingService.createBadgeClass(actorMessage))\n        .thenThrow(resourceNotFoundException);\n\n    actorMessage.setOperation(BadgingActorOperations.CREATE_BADGE_CLASS.getValue());\n\n    subject.tell(actorMessage, probe.getRef());\n\n    ProjectCommonException exception =\n        probe.expectMsgClass(ACTOR_MAX_WAIT_DURATION, ProjectCommonException.class);\n    Assert.assertTrue(null != exception);\n  }", "signature": "void testCreateBadgeClassFailure()", "full_signature": "@Test public void testCreateBadgeClassFailure()", "class_method_signature": "BadgeClassActorTest.testCreateBadgeClassFailure()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "createBadgeClass", "setOperation", "getValue", "tell", "getRef", "expectMsgClass", "assertTrue"]}, "focal_class": {"identifier": "BadgeClassActor", "superclass": "extends BaseActor", "interfaces": "", "fields": [{"original_string": "private BadgingService badgingService;", "modifier": "private", "type": "BadgingService", "declarator": "badgingService", "var_name": "badgingService"}], "methods": [{"identifier": "BadgeClassActor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BadgeClassActor()", "full_signature": "public  BadgeClassActor()", "class_method_signature": "BadgeClassActor.BadgeClassActor()", "testcase": false, "constructor": true}, {"identifier": "BadgeClassActor", "parameters": "(BadgingService badgingService)", "modifiers": "public", "return": "", "signature": " BadgeClassActor(BadgingService badgingService)", "full_signature": "public  BadgeClassActor(BadgingService badgingService)", "class_method_signature": "BadgeClassActor.BadgeClassActor(BadgingService badgingService)", "testcase": false, "constructor": true}, {"identifier": "onReceive", "parameters": "(Request request)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(Request request)", "full_signature": "@Override public void onReceive(Request request)", "class_method_signature": "BadgeClassActor.onReceive(Request request)", "testcase": false, "constructor": false}, {"identifier": "createBadgeClass", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void createBadgeClass(Request actorMessage)", "full_signature": "private void createBadgeClass(Request actorMessage)", "class_method_signature": "BadgeClassActor.createBadgeClass(Request actorMessage)", "testcase": false, "constructor": false}, {"identifier": "getBadgeClass", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void getBadgeClass(Request actorMessage)", "full_signature": "private void getBadgeClass(Request actorMessage)", "class_method_signature": "BadgeClassActor.getBadgeClass(Request actorMessage)", "testcase": false, "constructor": false}, {"identifier": "searchBadgeClass", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void searchBadgeClass(Request actorMessage)", "full_signature": "private void searchBadgeClass(Request actorMessage)", "class_method_signature": "BadgeClassActor.searchBadgeClass(Request actorMessage)", "testcase": false, "constructor": false}, {"identifier": "deleteBadgeClass", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "signature": "void deleteBadgeClass(Request actorMessage)", "full_signature": "private void deleteBadgeClass(Request actorMessage)", "class_method_signature": "BadgeClassActor.deleteBadgeClass(Request actorMessage)", "testcase": false, "constructor": false}], "file": "actors/badge/src/main/java/org/sunbird/badge/actors/BadgeClassActor.java"}, "focal_method": {"identifier": "createBadgeClass", "parameters": "(Request actorMessage)", "modifiers": "private", "return": "void", "body": "private void createBadgeClass(Request actorMessage) {\n    ProjectLogger.log(\"createBadgeClass called\");\n\n    try {\n      Response response = badgingService.createBadgeClass(actorMessage);\n\n      sender().tell(response, self());\n    } catch (ProjectCommonException e) {\n      ProjectLogger.log(\"createBadgeClass: exception = \", e);\n\n      sender().tell(e, self());\n    }\n  }", "signature": "void createBadgeClass(Request actorMessage)", "full_signature": "private void createBadgeClass(Request actorMessage)", "class_method_signature": "BadgeClassActor.createBadgeClass(Request actorMessage)", "testcase": false, "constructor": false, "invocations": ["log", "createBadgeClass", "tell", "sender", "self", "log", "tell", "sender", "self"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}