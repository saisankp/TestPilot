{"test_class": {"identifier": "ChiPathClusterDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/ChiPathClusterDescriptorTest.java"}, "test_case": {"identifier": "testDan64", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDan64() throws Exception {\n        IAtomContainer mol = new AtomContainer();\n        IAtom a1 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a1.setPoint2d(new Point2d(0.7500000000000004, 2.799038105676658));\n        mol.addAtom(a1);\n        IAtom a2 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a2.setPoint2d(new Point2d(0.0, 1.5));\n        mol.addAtom(a2);\n        IAtom a3 = mol.getBuilder().newInstance(IAtom.class, \"C\");\n        a3.setPoint2d(new Point2d(0.0, 0.0));\n        mol.addAtom(a3);\n        IAtom a4 = mol.getBuilder().newInstance(IAtom.class, \"O\");\n        a4.setPoint2d(new Point2d(-1.2990381056766582, 0.7500000000000001));\n        mol.addAtom(a4);\n        IBond b1 = mol.getBuilder().newInstance(IBond.class, a2, a1, IBond.Order.SINGLE);\n        mol.addBond(b1);\n        IBond b2 = mol.getBuilder().newInstance(IBond.class, a3, a2, IBond.Order.SINGLE);\n        mol.addBond(b2);\n        IBond b3 = mol.getBuilder().newInstance(IBond.class, a4, a3, IBond.Order.SINGLE);\n        mol.addBond(b3);\n        IBond b4 = mol.getBuilder().newInstance(IBond.class, a4, a2, IBond.Order.SINGLE);\n        mol.addBond(b4);\n\n        DoubleArrayResult ret = (DoubleArrayResult) descriptor.calculate(mol).getValue();\n\n        Assert.assertEquals(0.0000, ret.get(0), 0.0001);\n        Assert.assertEquals(0.0000, ret.get(1), 0.0001);\n        Assert.assertEquals(0.0000, ret.get(2), 0.0001);\n        Assert.assertEquals(0.0000, ret.get(3), 0.0001);\n        Assert.assertEquals(0.0000, ret.get(4), 0.0001);\n        Assert.assertEquals(0.0000, ret.get(5), 0.0001);\n    }", "signature": "void testDan64()", "full_signature": "@Test public void testDan64()", "class_method_signature": "ChiPathClusterDescriptorTest.testDan64()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "getValue", "calculate", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ChiPathClusterDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static ILoggingTool   logger = LoggingToolFactory.createLoggingTool(ChiPathClusterDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(ChiPathClusterDescriptor.class)", "var_name": "logger"}, {"original_string": "private SmilesParser          sp;", "modifier": "private", "type": "SmilesParser", "declarator": "sp", "var_name": "sp"}, {"original_string": "private static final String[] NAMES  = {\"SPC-4\", \"SPC-5\", \"SPC-6\", \"VPC-4\", \"VPC-5\", \"VPC-6\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES  = {\"SPC-4\", \"SPC-5\", \"SPC-6\", \"VPC-4\", \"VPC-5\", \"VPC-6\"}", "var_name": "NAMES"}], "methods": [{"identifier": "ChiPathClusterDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChiPathClusterDescriptor()", "full_signature": "public  ChiPathClusterDescriptor()", "class_method_signature": "ChiPathClusterDescriptor.ChiPathClusterDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "ChiPathClusterDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "ChiPathClusterDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "ChiPathClusterDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ChiPathClusterDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ChiPathClusterDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "ChiPathClusterDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "ChiPathClusterDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "ChiPathClusterDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "ChiPathClusterDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "order4", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List", "signature": "List order4(IAtomContainer atomContainer)", "full_signature": "private List order4(IAtomContainer atomContainer)", "class_method_signature": "ChiPathClusterDescriptor.order4(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order5", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List", "signature": "List order5(IAtomContainer atomContainer)", "full_signature": "private List order5(IAtomContainer atomContainer)", "class_method_signature": "ChiPathClusterDescriptor.order5(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order6", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List", "signature": "List order6(IAtomContainer atomContainer)", "full_signature": "private List order6(IAtomContainer atomContainer)", "class_method_signature": "ChiPathClusterDescriptor.order6(IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/ChiPathClusterDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        if (sp == null) sp = new SmilesParser(container.getBuilder());\n\n        IAtomContainer localAtomContainer = AtomContainerManipulator.removeHydrogens(container);\n        CDKAtomTypeMatcher matcher = CDKAtomTypeMatcher.getInstance(container.getBuilder());\n        Iterator<IAtom> atoms = localAtomContainer.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            IAtomType type;\n            try {\n                type = matcher.findMatchingAtomType(localAtomContainer, atom);\n                AtomTypeManipulator.configure(atom, type);\n            } catch (Exception e) {\n                return getDummyDescriptorValue(new CDKException(\"Error in atom typing: \" + e.getMessage()));\n            }\n        }\n        CDKHydrogenAdder hAdder = CDKHydrogenAdder.getInstance(container.getBuilder());\n        try {\n            hAdder.addImplicitHydrogens(localAtomContainer);\n        } catch (Exception e) {\n            return getDummyDescriptorValue(new CDKException(\"Error in hydrogen addition: \" + e.getMessage()));\n        }\n\n        List subgraph4 = order4(localAtomContainer);\n        List subgraph5 = order5(localAtomContainer);\n        List subgraph6 = order6(localAtomContainer);\n\n        double order4s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph4);\n        double order5s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph5);\n        double order6s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph6);\n\n        double order4v, order5v, order6v;\n        try {\n            order4v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph4);\n            order5v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph5);\n            order6v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph6);\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(new CDKException(\"Error in substructure search: \" + e.getMessage()));\n        }\n\n        DoubleArrayResult retval = new DoubleArrayResult();\n        retval.add(order4s);\n        retval.add(order5s);\n        retval.add(order6s);\n\n        retval.add(order4v);\n        retval.add(order5v);\n        retval.add(order6v);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames());\n\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "ChiPathClusterDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getBuilder", "removeHydrogens", "getInstance", "getBuilder", "iterator", "atoms", "hasNext", "next", "findMatchingAtomType", "configure", "getDummyDescriptorValue", "getMessage", "getInstance", "getBuilder", "addImplicitHydrogens", "getDummyDescriptorValue", "getMessage", "order4", "order5", "order6", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "getDummyDescriptorValue", "getMessage", "add", "add", "add", "add", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}