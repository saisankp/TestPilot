{"test_class": {"identifier": "HttpUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/HttpUtilsTest.java"}, "test_case": {"identifier": "validateSessionKeyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validateSessionKeyTest() {\n        HttpSession session = null;\n        Map<String, Object[]> params = null;\n        String sessionKeyString = null;\n        Cookie[] cookies = null;\n        final String sessionKeyValue = \"randomUniqueSessionID\";\n\n        // session and sessionKeyString null test\n        assertFalse(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n        sessionKeyString =  \"sessionkey\";\n        assertFalse(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n\n        // param and cookie null test\n        session = new MockHttpSession();\n        session.setAttribute(sessionKeyString, sessionKeyValue);\n        assertFalse(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n\n        // param null, cookies not null test\n        params = null;\n        cookies = new Cookie[]{new Cookie(sessionKeyString, sessionKeyValue)};\n        assertFalse(HttpUtils.validateSessionKey(session, params, cookies, \"randomString\"));\n        assertTrue(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n\n        // param not null, cookies null test\n        params = new HashMap<String, Object[]>();\n        params.put(sessionKeyString, new String[]{\"randomString\"});\n        cookies = null;\n        assertFalse(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n        params.put(sessionKeyString, new String[]{sessionKeyValue});\n        assertTrue(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n\n        // both param and cookies not null test\n        params = new HashMap<String, Object[]>();\n        cookies = new Cookie[]{new Cookie(sessionKeyString, sessionKeyValue)};\n        params.put(sessionKeyString, new String[]{\"incorrectValue\"});\n        assertFalse(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n        params.put(sessionKeyString, new String[]{sessionKeyValue});\n        assertTrue(HttpUtils.validateSessionKey(session, params, cookies, sessionKeyString));\n    }", "signature": "void validateSessionKeyTest()", "full_signature": "@Test public void validateSessionKeyTest()", "class_method_signature": "HttpUtilsTest.validateSessionKeyTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "validateSessionKey", "assertFalse", "validateSessionKey", "setAttribute", "assertFalse", "validateSessionKey", "assertFalse", "validateSessionKey", "assertTrue", "validateSessionKey", "put", "assertFalse", "validateSessionKey", "put", "assertTrue", "validateSessionKey", "put", "assertFalse", "validateSessionKey", "put", "assertTrue", "validateSessionKey"]}, "focal_class": {"identifier": "HttpUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(HttpUtils.class);", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(HttpUtils.class)", "var_name": "s_logger"}, {"original_string": "public static final String UTF_8 = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "UTF_8 = \"UTF-8\"", "var_name": "UTF_8"}, {"original_string": "public static final String RESPONSE_TYPE_JSON = \"json\";", "modifier": "public static final", "type": "String", "declarator": "RESPONSE_TYPE_JSON = \"json\"", "var_name": "RESPONSE_TYPE_JSON"}, {"original_string": "public static final String RESPONSE_TYPE_XML = \"xml\";", "modifier": "public static final", "type": "String", "declarator": "RESPONSE_TYPE_XML = \"xml\"", "var_name": "RESPONSE_TYPE_XML"}, {"original_string": "public static final String JSON_CONTENT_TYPE = \"application/json; charset=UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "JSON_CONTENT_TYPE = \"application/json; charset=UTF-8\"", "var_name": "JSON_CONTENT_TYPE"}, {"original_string": "public static final String XML_CONTENT_TYPE = \"text/xml; charset=UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "XML_CONTENT_TYPE = \"text/xml; charset=UTF-8\"", "var_name": "XML_CONTENT_TYPE"}], "methods": [{"identifier": "addSecurityHeaders", "parameters": "(final HttpServletResponse resp)", "modifiers": "public static", "return": "void", "signature": "void addSecurityHeaders(final HttpServletResponse resp)", "full_signature": "public static void addSecurityHeaders(final HttpServletResponse resp)", "class_method_signature": "HttpUtils.addSecurityHeaders(final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "writeHttpResponse", "parameters": "(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "modifiers": "public static", "return": "void", "signature": "void writeHttpResponse(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "full_signature": "public static void writeHttpResponse(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "class_method_signature": "HttpUtils.writeHttpResponse(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "testcase": false, "constructor": false}, {"identifier": "findCookie", "parameters": "(final Cookie[] cookies, final String key)", "modifiers": "public static", "return": "String", "signature": "String findCookie(final Cookie[] cookies, final String key)", "full_signature": "public static String findCookie(final Cookie[] cookies, final String key)", "class_method_signature": "HttpUtils.findCookie(final Cookie[] cookies, final String key)", "testcase": false, "constructor": false}, {"identifier": "validateSessionKey", "parameters": "(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "full_signature": "public static boolean validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "class_method_signature": "HttpUtils.validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/HttpUtils.java"}, "focal_method": {"identifier": "validateSessionKey", "parameters": "(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "modifiers": "public static", "return": "boolean", "body": "public static boolean validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString) {\n        if (session == null || sessionKeyString == null) {\n            return false;\n        }\n        final String sessionKey = (String) session.getAttribute(sessionKeyString);\n        final String sessionKeyFromCookie = HttpUtils.findCookie(cookies, sessionKeyString);\n        String[] sessionKeyFromParams = null;\n        if (params != null) {\n            sessionKeyFromParams = (String[]) params.get(sessionKeyString);\n        }\n        if ((sessionKey == null)\n                || (sessionKeyFromParams == null && sessionKeyFromCookie == null)\n                || (sessionKeyFromParams != null && !sessionKey.equals(sessionKeyFromParams[0]))\n                || (sessionKeyFromCookie != null && !sessionKey.equals(sessionKeyFromCookie))) {\n            return false;\n        }\n        return true;\n    }", "signature": "boolean validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "full_signature": "public static boolean validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "class_method_signature": "HttpUtils.validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "findCookie", "get", "equals", "equals"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}