{"test_class": {"identifier": "TestConfigSchemaFlowTransformService", "superclass": "", "interfaces": "", "fields": [], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/test/java/com/cloudera/cem/efm/service/flow/transform/TestConfigSchemaFlowTransformService.java"}, "test_case": {"identifier": "testTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransform() throws FlowTransformException {\n        final VersionedFlowSnapshotMetadata snapshotMetadata = new VersionedFlowSnapshotMetadata();\n        snapshotMetadata.setBucketIdentifier(\"bucket 1\");\n        snapshotMetadata.setFlowIdentifier(\"flow 2\");\n        snapshotMetadata.setVersion(1);\n        snapshotMetadata.setComments(\"This is snapshot #1\");\n\n        final VersionedProcessGroup root = new VersionedProcessGroup();\n        root.setIdentifier(\"root\");\n        root.setName(\"Root\");\n\n        final Map<String,String> props = new HashMap<>();\n        props.put(\"Property 1\", \"Value 1\");\n\n        final Map<String, VersionedPropertyDescriptor> propDescriptors = new HashMap<>();\n\n        final VersionedPropertyDescriptor propDescriptor1 = new VersionedPropertyDescriptor();\n        propDescriptor1.setName(\"Property 1\");\n        propDescriptors.put(propDescriptor1.getName(), propDescriptor1);\n\n        final VersionedProcessor proc1 = new VersionedProcessor();\n        proc1.setIdentifier(\"p1\");\n        proc1.setName(\"Processor 1\");\n        proc1.setProperties(props);\n        proc1.setPropertyDescriptors(propDescriptors);\n\n        root.getProcessors().add(proc1);\n\n        final VersionedFlowSnapshot snapshot = new VersionedFlowSnapshot();\n        snapshot.setSnapshotMetadata(snapshotMetadata);\n        snapshot.setFlowContents(root);\n\n        // test the transform\n        final FlowTransformService<ConfigSchema> transformService = new ConfigSchemaFlowTransformService();\n        final ConfigSchema configSchema = transformService.transform(snapshot);\n\n        Assert.assertNotNull(configSchema);\n        Assert.assertNotNull(configSchema.getProcessGroupSchema());\n        Assert.assertNotNull(configSchema.getProcessGroupSchema().getProcessors());\n        Assert.assertEquals(1, configSchema.getProcessGroupSchema().getProcessors().size());\n    }", "signature": "void testTransform()", "full_signature": "@Test public void testTransform()", "class_method_signature": "TestConfigSchemaFlowTransformService.testTransform()", "testcase": true, "constructor": false, "invocations": ["setBucketIdentifier", "setFlowIdentifier", "setVersion", "setComments", "setIdentifier", "setName", "put", "setName", "put", "getName", "setIdentifier", "setName", "setProperties", "setPropertyDescriptors", "add", "getProcessors", "setSnapshotMetadata", "setFlowContents", "transform", "assertNotNull", "assertNotNull", "getProcessGroupSchema", "assertNotNull", "getProcessors", "getProcessGroupSchema", "assertEquals", "size", "getProcessors", "getProcessGroupSchema"]}, "focal_class": {"identifier": "ConfigSchemaFlowTransformService", "superclass": "", "interfaces": "implements FlowTransformService<ConfigSchema>", "fields": [], "methods": [{"identifier": "transform", "parameters": "(final VersionedFlowSnapshot versionedFlowSnapshot)", "modifiers": "@Override public", "return": "ConfigSchema", "signature": "ConfigSchema transform(final VersionedFlowSnapshot versionedFlowSnapshot)", "full_signature": "@Override public ConfigSchema transform(final VersionedFlowSnapshot versionedFlowSnapshot)", "class_method_signature": "ConfigSchemaFlowTransformService.transform(final VersionedFlowSnapshot versionedFlowSnapshot)", "testcase": false, "constructor": false}], "file": "efm/efm-c2-protocol/efm-c2-protocol-framework/src/main/java/com/cloudera/cem/efm/service/flow/transform/ConfigSchemaFlowTransformService.java"}, "focal_method": {"identifier": "transform", "parameters": "(final VersionedFlowSnapshot versionedFlowSnapshot)", "modifiers": "@Override public", "return": "ConfigSchema", "body": "@Override\n    public ConfigSchema transform(final VersionedFlowSnapshot versionedFlowSnapshot) throws FlowTransformException {\n        if (versionedFlowSnapshot == null) {\n            throw new IllegalArgumentException(\"VersionedFlowSnapshot cannot be null\");\n        }\n\n        try {\n            return ConfigMain.transformVersionedFlowSnapshotToSchema(versionedFlowSnapshot);\n        } catch (Exception e) {\n            throw new FlowTransformException(\"Unable to transform flow due to: \" + e.getMessage(), e);\n        }\n    }", "signature": "ConfigSchema transform(final VersionedFlowSnapshot versionedFlowSnapshot)", "full_signature": "@Override public ConfigSchema transform(final VersionedFlowSnapshot versionedFlowSnapshot)", "class_method_signature": "ConfigSchemaFlowTransformService.transform(final VersionedFlowSnapshot versionedFlowSnapshot)", "testcase": false, "constructor": false, "invocations": ["transformVersionedFlowSnapshotToSchema", "getMessage"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}