{"test_class": {"identifier": "ClassUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class)", "var_name": "LOGGER"}, {"original_string": "private static ClassLoader loader;", "modifier": "private static", "type": "ClassLoader", "declarator": "loader", "var_name": "loader"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/ClassUtilsTest.java"}, "test_case": {"identifier": "testNewInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewInstance() throws Exception {\n        short s = ClassUtils.newInstance(short.class);\n        Assert.assertTrue(s == 0);\n        Short s2 = ClassUtils.newInstance(Short.class);\n        Assert.assertTrue(s2 == 0);\n\n        int i = ClassUtils.newInstance(int.class);\n        Assert.assertTrue(i == 0);\n        Integer integer = ClassUtils.newInstance(Integer.class);\n        Assert.assertTrue(integer == 0);\n\n        long l = ClassUtils.newInstance(long.class);\n        Assert.assertTrue(l == 0);\n        Long l2 = ClassUtils.newInstance(Long.class);\n        Assert.assertTrue(l2 == 0);\n\n        double d = ClassUtils.newInstance(double.class);\n        Assert.assertTrue(d == 0.0d);\n        Double d2 = ClassUtils.newInstance(Double.class);\n        Assert.assertTrue(d2 == 0.0d);\n\n        float f = ClassUtils.newInstance(float.class);\n        Assert.assertTrue(f == 0.0f);\n        Float f2 = ClassUtils.newInstance(Float.class);\n        Assert.assertTrue(f2 == 0.0f);\n\n        byte b = ClassUtils.newInstance(byte.class);\n        Assert.assertTrue(b == 0);\n        Byte b2 = ClassUtils.newInstance(Byte.class);\n        Assert.assertTrue(b2 == 0);\n\n        char c = ClassUtils.newInstance(char.class);\n        Assert.assertTrue(c == 0);\n        Character c2 = ClassUtils.newInstance(Character.class);\n        Assert.assertTrue(c2 == 0);\n\n        boolean bl = ClassUtils.newInstance(boolean.class);\n        Assert.assertFalse(bl);\n        Boolean bl2 = ClassUtils.newInstance(Boolean.class);\n        Assert.assertFalse(bl2);\n\n        Assert.assertNotNull(ClassUtils.newInstance(TestMemberClass1.class));\n        Assert.assertNotNull(ClassUtils.newInstance(TestMemberClass2.class));\n        Assert.assertNotNull(ClassUtils.newInstance(TestMemberClass3.class));\n        Assert.assertNotNull(ClassUtils.newInstance(TestMemberClass4.class));\n        Assert.assertNotNull(ClassUtils.newInstance(TestMemberClass5.class));\n        Assert.assertNotNull(ClassUtils.newInstance(TestMemberClass6.class));\n        Assert.assertNotNull(ClassUtils.newInstance(TestClass1.class));\n        Assert.assertNotNull(ClassUtils.newInstance(TestClass2.class));\n        TestClass3 class3 = ClassUtils.newInstance(TestClass3.class);\n        Assert.assertNotNull(class3);\n        Assert.assertNull(class3.getName());\n        Assert.assertEquals(class3.getAge(), 0);\n\n    }", "signature": "void testNewInstance()", "full_signature": "@Test public void testNewInstance()", "class_method_signature": "ClassUtilsTest.testNewInstance()", "testcase": true, "constructor": false, "invocations": ["newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertTrue", "newInstance", "assertFalse", "newInstance", "assertFalse", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "newInstance", "assertNotNull", "assertNull", "getName", "assertEquals", "getAge"]}, "focal_class": {"identifier": "ClassUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "forName", "parameters": "(String className)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className)", "full_signature": "public static Class forName(String className)", "class_method_signature": "ClassUtils.forName(String className)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String className, boolean initialize)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className, boolean initialize)", "full_signature": "public static Class forName(String className, boolean initialize)", "class_method_signature": "ClassUtils.forName(String className, boolean initialize)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String className, ClassLoader cl)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className, ClassLoader cl)", "full_signature": "public static Class forName(String className, ClassLoader cl)", "class_method_signature": "ClassUtils.forName(String className, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getAllMethods", "parameters": "(Class clazz)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAllMethods(Class clazz)", "full_signature": "public static List<Method> getAllMethods(Class clazz)", "class_method_signature": "ClassUtils.getAllMethods(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "(Class clazz)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllFields(Class clazz)", "full_signature": "public static List<Field> getAllFields(Class clazz)", "class_method_signature": "ClassUtils.getAllFields(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "public static T newInstance(Class<T> clazz)", "class_method_signature": "ClassUtils.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "newInstanceWithArgs", "parameters": "(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "modifiers": "public static", "return": "T", "signature": "T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "full_signature": "public static T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "class_method_signature": "ClassUtils.newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPrimitiveValue", "parameters": "(Class clazz)", "modifiers": "public static", "return": "Object", "signature": "Object getDefaultPrimitiveValue(Class clazz)", "full_signature": "public static Object getDefaultPrimitiveValue(Class clazz)", "class_method_signature": "ClassUtils.getDefaultPrimitiveValue(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getDefaultWrapperValue", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getDefaultWrapperValue(Class<T> clazz)", "full_signature": "public static T getDefaultWrapperValue(Class<T> clazz)", "class_method_signature": "ClassUtils.getDefaultWrapperValue(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getMethodKey", "parameters": "(String interfaceName, String methodName)", "modifiers": "public static", "return": "String", "signature": "String getMethodKey(String interfaceName, String methodName)", "full_signature": "public static String getMethodKey(String interfaceName, String methodName)", "class_method_signature": "ClassUtils.getMethodKey(String interfaceName, String methodName)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Class<?> interfaceClass, Class<?> implementClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "full_signature": "public static boolean isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "class_method_signature": "ClassUtils.isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "testcase": false, "constructor": false}, {"identifier": "isImplementOrSubclass", "parameters": "(String interfaceName, Class<?> implementClass)", "modifiers": "private static", "return": "boolean", "signature": "boolean isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "full_signature": "private static boolean isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "class_method_signature": "ClassUtils.isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/ClassUtils.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "body": "public static <T> T newInstance(Class<T> clazz) throws SofaRpcRuntimeException {\n        if (clazz.isPrimitive()) {\n            return (T) getDefaultPrimitiveValue(clazz);\n        }\n\n        T t = getDefaultWrapperValue(clazz);\n        if (t != null) {\n            return t;\n        }\n\n        try {\n            // \u666e\u901a\u7c7b\uff0c\u5982\u679c\u662f\u6210\u5458\u7c7b\uff08\u9700\u8981\u591a\u4f20\u4e00\u4e2a\u7236\u7c7b\u53c2\u6570\uff09\n            if (!(clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers()))) {\n                try {\n                    // \u5148\u627e\u4e00\u4e2a\u7a7a\u7684\u6784\u9020\u51fd\u6570\n                    Constructor<T> constructor = clazz.getDeclaredConstructor();\n                    constructor.setAccessible(true);\n                    return constructor.newInstance();\n                } catch (Exception ignore) { // NOPMD\n                }\n            }\n            // \u4e0d\u884c\u7684\u8bdd\uff0c\u627e\u4e00\u4e2a\u6700\u5c11\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\n            Constructor<T>[] constructors = (Constructor<T>[]) clazz.getDeclaredConstructors();\n            if (constructors == null || constructors.length == 0) {\n                throw new SofaRpcRuntimeException(\"The \" + clazz.getCanonicalName()\n                    + \" has no default constructor!\");\n            }\n            Constructor<T> constructor = constructors[0];\n            if (constructor.getParameterTypes().length > 0) {\n                for (Constructor<T> c : constructors) {\n                    if (c.getParameterTypes().length < constructor.getParameterTypes().length) {\n                        constructor = c;\n                        if (constructor.getParameterTypes().length == 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n            constructor.setAccessible(true);\n            // \u865a\u62df\u6784\u9020\u51fd\u6570\u7684\u53c2\u6570\u503c\uff0c\u57fa\u672c\u7c7b\u578b\u4f7f\u7528\u9ed8\u8ba4\u503c\uff0c\u5176\u5b83\u7c7b\u578b\u4f7f\u7528null\n            Class<?>[] argTypes = constructor.getParameterTypes();\n            Object[] args = new Object[argTypes.length];\n            for (int i = 0; i < args.length; i++) {\n                args[i] = getDefaultPrimitiveValue(argTypes[i]);\n            }\n            return constructor.newInstance(args);\n        } catch (SofaRpcRuntimeException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new SofaRpcRuntimeException(e.getMessage(), e);\n        }\n    }", "signature": "T newInstance(Class<T> clazz)", "full_signature": "public static T newInstance(Class<T> clazz)", "class_method_signature": "ClassUtils.newInstance(Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["isPrimitive", "getDefaultPrimitiveValue", "getDefaultWrapperValue", "isMemberClass", "isStatic", "getModifiers", "getDeclaredConstructor", "setAccessible", "newInstance", "getDeclaredConstructors", "getCanonicalName", "getParameterTypes", "getParameterTypes", "getParameterTypes", "getParameterTypes", "setAccessible", "getParameterTypes", "getDefaultPrimitiveValue", "newInstance", "getMessage"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}