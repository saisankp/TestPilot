{"test_class": {"identifier": "ModelValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ModelValidator validator;", "modifier": "private", "type": "ModelValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private FieldData fieldData;", "modifier": "private", "type": "FieldData", "declarator": "fieldData", "var_name": "fieldData"}], "file": "stardao-core/src/test/java/io/stardog/stardao/validation/ModelValidatorTest.java"}, "test_case": {"identifier": "testValidateCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateCreate() throws Exception {\n        try {\n            validator.validateCreate(TestValidateModel.builder().email(\"ok@example.com\").build(), fieldData);\n            fail(\"Expected DataValidationException\");\n        } catch (DataValidationException e) {\n            assertEquals(1, e.getErrors().size());\n        }\n\n        assertTrue(validator.validateCreate(TestValidateModel.builder().email(\"ok@example.com\").type(\"type\").build(), fieldData));\n    }", "signature": "void testValidateCreate()", "full_signature": "@Test public void testValidateCreate()", "class_method_signature": "ModelValidatorTest.testValidateCreate()", "testcase": true, "constructor": false, "invocations": ["validateCreate", "build", "email", "builder", "fail", "assertEquals", "size", "getErrors", "assertTrue", "validateCreate", "build", "type", "email", "builder"]}, "focal_class": {"identifier": "ModelValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Validator validator;", "modifier": "private final", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "ModelValidator", "parameters": "(Validator validator, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " ModelValidator(Validator validator, ObjectMapper mapper)", "full_signature": "public  ModelValidator(Validator validator, ObjectMapper mapper)", "class_method_signature": "ModelValidator.ModelValidator(Validator validator, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "getModelValidationErrors", "parameters": "(Object object, Class validationGroup)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getModelValidationErrors(Object object, Class validationGroup)", "full_signature": "public List<ValidationError> getModelValidationErrors(Object object, Class validationGroup)", "class_method_signature": "ModelValidator.getModelValidationErrors(Object object, Class validationGroup)", "testcase": false, "constructor": false}, {"identifier": "getCreateValidationErrors", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "full_signature": "public List<ValidationError> getCreateValidationErrors(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.getCreateValidationErrors(Object create, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "getUpdateValidationErrors", "parameters": "(Update<?> update, FieldData fieldData)", "modifiers": "public", "return": "List<ValidationError>", "signature": "List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "full_signature": "public List<ValidationError> getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "class_method_signature": "ModelValidator.getUpdateValidationErrors(Update<?> update, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "validateModel", "parameters": "(Object model)", "modifiers": "public", "return": "boolean", "signature": "boolean validateModel(Object model)", "full_signature": "public boolean validateModel(Object model)", "class_method_signature": "ModelValidator.validateModel(Object model)", "testcase": false, "constructor": false}, {"identifier": "validateCreate", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "boolean", "signature": "boolean validateCreate(Object create, FieldData fieldData)", "full_signature": "public boolean validateCreate(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.validateCreate(Object create, FieldData fieldData)", "testcase": false, "constructor": false}, {"identifier": "validateUpdate", "parameters": "(Update<?> update, FieldData fieldData)", "modifiers": "public", "return": "boolean", "signature": "boolean validateUpdate(Update<?> update, FieldData fieldData)", "full_signature": "public boolean validateUpdate(Update<?> update, FieldData fieldData)", "class_method_signature": "ModelValidator.validateUpdate(Update<?> update, FieldData fieldData)", "testcase": false, "constructor": false}], "file": "stardao-core/src/main/java/io/stardog/stardao/validation/ModelValidator.java"}, "focal_method": {"identifier": "validateCreate", "parameters": "(Object create, FieldData fieldData)", "modifiers": "public", "return": "boolean", "body": "public boolean validateCreate(Object create, FieldData fieldData) {\n        List<ValidationError> errors = getCreateValidationErrors(create, fieldData);\n        if (!errors.isEmpty()) {\n            throw new DataValidationException(errors);\n        }\n        return true;\n    }", "signature": "boolean validateCreate(Object create, FieldData fieldData)", "full_signature": "public boolean validateCreate(Object create, FieldData fieldData)", "class_method_signature": "ModelValidator.validateCreate(Object create, FieldData fieldData)", "testcase": false, "constructor": false, "invocations": ["getCreateValidationErrors", "isEmpty"]}, "repository": {"repo_id": 79784019, "url": "https://github.com/stardogventures/stardao", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 219, "license": "licensed"}}