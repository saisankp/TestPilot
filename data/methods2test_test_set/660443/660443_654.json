{"test_class": {"identifier": "PostFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/org/openscience/cdk/smsd/filters/PostFilterTest.java"}, "test_case": {"identifier": "testFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFilter() {\n\n        List<Integer> l1 = new ArrayList<Integer>(6);\n        l1.add(1);\n        l1.add(2);\n        l1.add(3);\n        l1.add(4);\n        l1.add(5);\n        l1.add(6);\n\n        List<Integer> l2 = new ArrayList<Integer>(6);\n        l2.add(1);\n        l2.add(2);\n        l2.add(3);\n        l2.add(4);\n        l2.add(5);\n        l2.add(6);\n\n        List<Integer> l3 = new ArrayList<Integer>(6);\n        l3.add(1);\n        l3.add(2);\n        l3.add(5);\n        l3.add(4);\n        l3.add(3);\n        l3.add(6);\n\n        List<List<Integer>> mappings = new ArrayList<List<Integer>>(3);\n        mappings.add(l1);\n        mappings.add(l2);\n        mappings.add(l3);\n\n        assertEquals(3, mappings.size());\n        List<Map<Integer, Integer>> expResult = PostFilter.filter(mappings);\n        assertEquals(2, expResult.size());\n    }", "signature": "void testFilter()", "full_signature": "@Test public void testFilter()", "class_method_signature": "PostFilterTest.testFilter()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertEquals", "size", "filter", "assertEquals", "size"]}, "focal_class": {"identifier": "PostFilter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "filter", "parameters": "(List<List<Integer>> mappings)", "modifiers": "public static", "return": "List<Map<Integer, Integer>>", "signature": "List<Map<Integer, Integer>> filter(List<List<Integer>> mappings)", "full_signature": "public static List<Map<Integer, Integer>> filter(List<List<Integer>> mappings)", "class_method_signature": "PostFilter.filter(List<List<Integer>> mappings)", "testcase": false, "constructor": false}, {"identifier": "hasMap", "parameters": "(Map<Integer, Integer> newMap, List<Map<Integer, Integer>> nonRedundantMapping)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasMap(Map<Integer, Integer> newMap, List<Map<Integer, Integer>> nonRedundantMapping)", "full_signature": "private static boolean hasMap(Map<Integer, Integer> newMap, List<Map<Integer, Integer>> nonRedundantMapping)", "class_method_signature": "PostFilter.hasMap(Map<Integer, Integer> newMap, List<Map<Integer, Integer>> nonRedundantMapping)", "testcase": false, "constructor": false}, {"identifier": "removeRedundantMapping", "parameters": "(List<List<Integer>> mappingOrg)", "modifiers": "private static", "return": "List<Map<Integer, Integer>>", "signature": "List<Map<Integer, Integer>> removeRedundantMapping(List<List<Integer>> mappingOrg)", "full_signature": "private static List<Map<Integer, Integer>> removeRedundantMapping(List<List<Integer>> mappingOrg)", "class_method_signature": "PostFilter.removeRedundantMapping(List<List<Integer>> mappingOrg)", "testcase": false, "constructor": false}, {"identifier": "getMappingMapFromList", "parameters": "(List<Integer> list)", "modifiers": "private static", "return": "Map<Integer, Integer>", "signature": "Map<Integer, Integer> getMappingMapFromList(List<Integer> list)", "full_signature": "private static Map<Integer, Integer> getMappingMapFromList(List<Integer> list)", "class_method_signature": "PostFilter.getMappingMapFromList(List<Integer> list)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/smsd/filters/PostFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(List<List<Integer>> mappings)", "modifiers": "public static", "return": "List<Map<Integer, Integer>>", "body": "public static List<Map<Integer, Integer>> filter(List<List<Integer>> mappings) {\n        FinalMappings finalMappings = FinalMappings.getInstance();\n        if (mappings != null && !mappings.isEmpty()) {\n            finalMappings.set(removeRedundantMapping(mappings));\n            mappings.clear();\n        } else {\n            finalMappings.set(new ArrayList<Map<Integer, Integer>>());\n        }\n        return finalMappings.getFinalMapping();\n    }", "signature": "List<Map<Integer, Integer>> filter(List<List<Integer>> mappings)", "full_signature": "public static List<Map<Integer, Integer>> filter(List<List<Integer>> mappings)", "class_method_signature": "PostFilter.filter(List<List<Integer>> mappings)", "testcase": false, "constructor": false, "invocations": ["getInstance", "isEmpty", "set", "removeRedundantMapping", "clear", "set", "getFinalMapping"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}