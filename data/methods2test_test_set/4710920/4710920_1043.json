{"test_class": {"identifier": "ReferenceAnnotationBeanPostProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String AOP_SUFFIX = \"(based on AOP)\";", "modifier": "private static final", "type": "String", "declarator": "AOP_SUFFIX = \"(based on AOP)\"", "var_name": "AOP_SUFFIX"}, {"original_string": "@Autowired\n    private ConfigurableApplicationContext context;", "modifier": "@Autowired\n    private", "type": "ConfigurableApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Autowired\n    @Qualifier(\"defaultHelloService\")\n    private HelloService defaultHelloService;", "modifier": "@Autowired\n    @Qualifier(\"defaultHelloService\")\n    private", "type": "HelloService", "declarator": "defaultHelloService", "var_name": "defaultHelloService"}, {"original_string": "@Autowired\n    @Qualifier(\"helloServiceImpl\")\n    private HelloService helloServiceImpl;", "modifier": "@Autowired\n    @Qualifier(\"helloServiceImpl\")\n    private", "type": "HelloService", "declarator": "helloServiceImpl", "var_name": "helloServiceImpl"}, {"original_string": "@Reference(id = \"helloService\", methods = @Method(name = \"sayHello\", timeout = 100))\n    private HelloService helloService;", "modifier": "@Reference(id = \"helloService\", methods = @Method(name = \"sayHello\", timeout = 100))\n    private", "type": "HelloService", "declarator": "helloService", "var_name": "helloService"}, {"original_string": "@Reference\n    private HelloService helloService2;", "modifier": "@Reference\n    private", "type": "HelloService", "declarator": "helloService2", "var_name": "helloService2"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessorTest.java"}, "test_case": {"identifier": "testGetReferenceBeans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetReferenceBeans() {\n\n        ReferenceAnnotationBeanPostProcessor beanPostProcessor = context.getBean(BEAN_NAME,\n                ReferenceAnnotationBeanPostProcessor.class);\n\n        Collection<ReferenceBean<?>> referenceBeans = beanPostProcessor.getReferenceBeans();\n\n        Assert.assertEquals(4, referenceBeans.size());\n\n        ReferenceBean<?> referenceBean = referenceBeans.iterator().next();\n\n        Assert.assertNotNull(ReferenceConfigCache.getCache().get(referenceBean));\n\n    }", "signature": "void testGetReferenceBeans()", "full_signature": "@Test public void testGetReferenceBeans()", "class_method_signature": "ReferenceAnnotationBeanPostProcessorTest.testGetReferenceBeans()", "testcase": true, "constructor": false, "invocations": ["getBean", "getReferenceBeans", "assertEquals", "size", "next", "iterator", "assertNotNull", "get", "getCache"]}, "focal_class": {"identifier": "ReferenceAnnotationBeanPostProcessor", "superclass": "extends AbstractAnnotationBeanPostProcessor", "interfaces": "implements\n        ApplicationContextAware", "fields": [{"original_string": "public static final String BEAN_NAME = \"referenceAnnotationBeanPostProcessor\";", "modifier": "public static final", "type": "String", "declarator": "BEAN_NAME = \"referenceAnnotationBeanPostProcessor\"", "var_name": "BEAN_NAME"}, {"original_string": "private static final int CACHE_SIZE = Integer.getInteger(BEAN_NAME + \".cache.size\", 32);", "modifier": "private static final", "type": "int", "declarator": "CACHE_SIZE = Integer.getInteger(BEAN_NAME + \".cache.size\", 32)", "var_name": "CACHE_SIZE"}, {"original_string": "private final ConcurrentMap<String, ReferenceBean<?>> referenceBeanCache =\n            new ConcurrentHashMap<>(CACHE_SIZE);", "modifier": "private final", "type": "ConcurrentMap<String, ReferenceBean<?>>", "declarator": "referenceBeanCache =\n            new ConcurrentHashMap<>(CACHE_SIZE)", "var_name": "referenceBeanCache"}, {"original_string": "private final ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>> injectedFieldReferenceBeanCache =\n            new ConcurrentHashMap<>(CACHE_SIZE);", "modifier": "private final", "type": "ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "declarator": "injectedFieldReferenceBeanCache =\n            new ConcurrentHashMap<>(CACHE_SIZE)", "var_name": "injectedFieldReferenceBeanCache"}, {"original_string": "private final ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>> injectedMethodReferenceBeanCache =\n            new ConcurrentHashMap<>(CACHE_SIZE);", "modifier": "private final", "type": "ConcurrentMap<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "declarator": "injectedMethodReferenceBeanCache =\n            new ConcurrentHashMap<>(CACHE_SIZE)", "var_name": "injectedMethodReferenceBeanCache"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "methods": [{"identifier": "ReferenceAnnotationBeanPostProcessor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReferenceAnnotationBeanPostProcessor()", "full_signature": "public  ReferenceAnnotationBeanPostProcessor()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.ReferenceAnnotationBeanPostProcessor()", "testcase": false, "constructor": true}, {"identifier": "getReferenceBeans", "parameters": "()", "modifiers": "public", "return": "Collection<ReferenceBean<?>>", "signature": "Collection<ReferenceBean<?>> getReferenceBeans()", "full_signature": "public Collection<ReferenceBean<?>> getReferenceBeans()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getReferenceBeans()", "testcase": false, "constructor": false}, {"identifier": "getInjectedFieldReferenceBeanMap", "parameters": "()", "modifiers": "public", "return": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "signature": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedFieldReferenceBeanMap()", "full_signature": "public Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedFieldReferenceBeanMap()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getInjectedFieldReferenceBeanMap()", "testcase": false, "constructor": false}, {"identifier": "getInjectedMethodReferenceBeanMap", "parameters": "()", "modifiers": "public", "return": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>>", "signature": "Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedMethodReferenceBeanMap()", "full_signature": "public Map<InjectionMetadata.InjectedElement, ReferenceBean<?>> getInjectedMethodReferenceBeanMap()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getInjectedMethodReferenceBeanMap()", "testcase": false, "constructor": false}, {"identifier": "doGetInjectedBean", "parameters": "(AnnotationAttributes attributes, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "modifiers": "@Override protected", "return": "Object", "signature": "Object doGetInjectedBean(AnnotationAttributes attributes, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "full_signature": "@Override protected Object doGetInjectedBean(AnnotationAttributes attributes, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.doGetInjectedBean(AnnotationAttributes attributes, Object bean, String beanName, Class<?> injectedType,\n                                       InjectionMetadata.InjectedElement injectedElement)", "testcase": false, "constructor": false}, {"identifier": "registerReferenceBean", "parameters": "(String referencedBeanName, ReferenceBean referenceBean,\n                                       AnnotationAttributes attributes,\n                                       boolean localServiceBean, Class<?> interfaceClass)", "modifiers": "private", "return": "void", "signature": "void registerReferenceBean(String referencedBeanName, ReferenceBean referenceBean,\n                                       AnnotationAttributes attributes,\n                                       boolean localServiceBean, Class<?> interfaceClass)", "full_signature": "private void registerReferenceBean(String referencedBeanName, ReferenceBean referenceBean,\n                                       AnnotationAttributes attributes,\n                                       boolean localServiceBean, Class<?> interfaceClass)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.registerReferenceBean(String referencedBeanName, ReferenceBean referenceBean,\n                                       AnnotationAttributes attributes,\n                                       boolean localServiceBean, Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "getReferenceBeanName", "parameters": "(AnnotationAttributes attributes, Class<?> interfaceClass)", "modifiers": "private", "return": "String", "signature": "String getReferenceBeanName(AnnotationAttributes attributes, Class<?> interfaceClass)", "full_signature": "private String getReferenceBeanName(AnnotationAttributes attributes, Class<?> interfaceClass)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getReferenceBeanName(AnnotationAttributes attributes, Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "generateReferenceBeanName", "parameters": "(AnnotationAttributes attributes, Class<?> interfaceClass)", "modifiers": "private", "return": "String", "signature": "String generateReferenceBeanName(AnnotationAttributes attributes, Class<?> interfaceClass)", "full_signature": "private String generateReferenceBeanName(AnnotationAttributes attributes, Class<?> interfaceClass)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.generateReferenceBeanName(AnnotationAttributes attributes, Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "isLocalServiceBean", "parameters": "(String referencedBeanName, ReferenceBean referenceBean, AnnotationAttributes attributes)", "modifiers": "private", "return": "boolean", "signature": "boolean isLocalServiceBean(String referencedBeanName, ReferenceBean referenceBean, AnnotationAttributes attributes)", "full_signature": "private boolean isLocalServiceBean(String referencedBeanName, ReferenceBean referenceBean, AnnotationAttributes attributes)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.isLocalServiceBean(String referencedBeanName, ReferenceBean referenceBean, AnnotationAttributes attributes)", "testcase": false, "constructor": false}, {"identifier": "existsServiceBean", "parameters": "(String referencedBeanName)", "modifiers": "private", "return": "boolean", "signature": "boolean existsServiceBean(String referencedBeanName)", "full_signature": "private boolean existsServiceBean(String referencedBeanName)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.existsServiceBean(String referencedBeanName)", "testcase": false, "constructor": false}, {"identifier": "isRemoteReferenceBean", "parameters": "(ReferenceBean referenceBean, AnnotationAttributes attributes)", "modifiers": "private", "return": "boolean", "signature": "boolean isRemoteReferenceBean(ReferenceBean referenceBean, AnnotationAttributes attributes)", "full_signature": "private boolean isRemoteReferenceBean(ReferenceBean referenceBean, AnnotationAttributes attributes)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.isRemoteReferenceBean(ReferenceBean referenceBean, AnnotationAttributes attributes)", "testcase": false, "constructor": false}, {"identifier": "prepareReferenceBean", "parameters": "(String referencedBeanName, ReferenceBean referenceBean, boolean localServiceBean)", "modifiers": "private", "return": "void", "signature": "void prepareReferenceBean(String referencedBeanName, ReferenceBean referenceBean, boolean localServiceBean)", "full_signature": "private void prepareReferenceBean(String referencedBeanName, ReferenceBean referenceBean, boolean localServiceBean)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.prepareReferenceBean(String referencedBeanName, ReferenceBean referenceBean, boolean localServiceBean)", "testcase": false, "constructor": false}, {"identifier": "exportServiceBeanIfNecessary", "parameters": "(String referencedBeanName)", "modifiers": "private", "return": "void", "signature": "void exportServiceBeanIfNecessary(String referencedBeanName)", "full_signature": "private void exportServiceBeanIfNecessary(String referencedBeanName)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.exportServiceBeanIfNecessary(String referencedBeanName)", "testcase": false, "constructor": false}, {"identifier": "getServiceBean", "parameters": "(String referencedBeanName)", "modifiers": "private", "return": "ServiceBean", "signature": "ServiceBean getServiceBean(String referencedBeanName)", "full_signature": "private ServiceBean getServiceBean(String referencedBeanName)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getServiceBean(String referencedBeanName)", "testcase": false, "constructor": false}, {"identifier": "buildInjectedObjectCacheKey", "parameters": "(AnnotationAttributes attributes, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "modifiers": "@Override protected", "return": "String", "signature": "String buildInjectedObjectCacheKey(AnnotationAttributes attributes, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "full_signature": "@Override protected String buildInjectedObjectCacheKey(AnnotationAttributes attributes, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildInjectedObjectCacheKey(AnnotationAttributes attributes, Object bean, String beanName,\n                                                 Class<?> injectedType, InjectionMetadata.InjectedElement injectedElement)", "testcase": false, "constructor": false}, {"identifier": "buildReferencedBeanName", "parameters": "(AnnotationAttributes attributes, Class<?> serviceInterfaceType)", "modifiers": "private", "return": "String", "signature": "String buildReferencedBeanName(AnnotationAttributes attributes, Class<?> serviceInterfaceType)", "full_signature": "private String buildReferencedBeanName(AnnotationAttributes attributes, Class<?> serviceInterfaceType)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildReferencedBeanName(AnnotationAttributes attributes, Class<?> serviceInterfaceType)", "testcase": false, "constructor": false}, {"identifier": "buildReferenceBeanIfAbsent", "parameters": "(String referenceBeanName, AnnotationAttributes attributes,\n                                                     Class<?> referencedType)", "modifiers": "private", "return": "ReferenceBean", "signature": "ReferenceBean buildReferenceBeanIfAbsent(String referenceBeanName, AnnotationAttributes attributes,\n                                                     Class<?> referencedType)", "full_signature": "private ReferenceBean buildReferenceBeanIfAbsent(String referenceBeanName, AnnotationAttributes attributes,\n                                                     Class<?> referencedType)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.buildReferenceBeanIfAbsent(String referenceBeanName, AnnotationAttributes attributes,\n                                                     Class<?> referencedType)", "testcase": false, "constructor": false}, {"identifier": "cacheInjectedReferenceBean", "parameters": "(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "modifiers": "private", "return": "void", "signature": "void cacheInjectedReferenceBean(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "full_signature": "private void cacheInjectedReferenceBean(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.cacheInjectedReferenceBean(ReferenceBean referenceBean,\n                                            InjectionMetadata.InjectedElement injectedElement)", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.destroy()", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/beans/factory/annotation/ReferenceAnnotationBeanPostProcessor.java"}, "focal_method": {"identifier": "getReferenceBeans", "parameters": "()", "modifiers": "public", "return": "Collection<ReferenceBean<?>>", "body": "public Collection<ReferenceBean<?>> getReferenceBeans() {\n        return referenceBeanCache.values();\n    }", "signature": "Collection<ReferenceBean<?>> getReferenceBeans()", "full_signature": "public Collection<ReferenceBean<?>> getReferenceBeans()", "class_method_signature": "ReferenceAnnotationBeanPostProcessor.getReferenceBeans()", "testcase": false, "constructor": false, "invocations": ["values"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}