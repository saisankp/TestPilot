{"test_class": {"identifier": "BasicBatchPipelineTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/edu/stanford/futuredata/macrobase/pipeline/BasicBatchPipelineTest.java"}, "test_case": {"identifier": "testDemoQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDemoQuery() throws Exception {\n        PipelineConfig conf = PipelineConfig.fromYamlFile(\n                \"src/test/resources/tiny_conf.yaml\"\n        );\n        BasicBatchPipeline p = new BasicBatchPipeline(conf);\n        Explanation e = p.results();\n        assertEquals(3.0, e.numTotal(), 1e-10);\n    }", "signature": "void testDemoQuery()", "full_signature": "@Test public void testDemoQuery()", "class_method_signature": "BasicBatchPipelineTest.testDemoQuery()", "testcase": true, "constructor": false, "invocations": ["fromYamlFile", "results", "assertEquals", "numTotal"]}, "focal_class": {"identifier": "BasicBatchPipeline", "superclass": "", "interfaces": "implements Pipeline", "fields": [{"original_string": "Logger log = LoggerFactory.getLogger(Pipeline.class);", "modifier": "", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Pipeline.class)", "var_name": "log"}, {"original_string": "private String inputURI = null;", "modifier": "private", "type": "String", "declarator": "inputURI = null", "var_name": "inputURI"}, {"original_string": "private String classifierType;", "modifier": "private", "type": "String", "declarator": "classifierType", "var_name": "classifierType"}, {"original_string": "private String metric;", "modifier": "private", "type": "String", "declarator": "metric", "var_name": "metric"}, {"original_string": "private double cutoff;", "modifier": "private", "type": "double", "declarator": "cutoff", "var_name": "cutoff"}, {"original_string": "private Optional<String> meanColumn;", "modifier": "private", "type": "Optional<String>", "declarator": "meanColumn", "var_name": "meanColumn"}, {"original_string": "private String strCutoff;", "modifier": "private", "type": "String", "declarator": "strCutoff", "var_name": "strCutoff"}, {"original_string": "private boolean isStrPredicate;", "modifier": "private", "type": "boolean", "declarator": "isStrPredicate", "var_name": "isStrPredicate"}, {"original_string": "private boolean pctileHigh;", "modifier": "private", "type": "boolean", "declarator": "pctileHigh", "var_name": "pctileHigh"}, {"original_string": "private boolean pctileLow;", "modifier": "private", "type": "boolean", "declarator": "pctileLow", "var_name": "pctileLow"}, {"original_string": "private String predicateStr;", "modifier": "private", "type": "String", "declarator": "predicateStr", "var_name": "predicateStr"}, {"original_string": "private int numThreads;", "modifier": "private", "type": "int", "declarator": "numThreads", "var_name": "numThreads"}, {"original_string": "private int bitmapRatioThreshold;", "modifier": "private", "type": "int", "declarator": "bitmapRatioThreshold", "var_name": "bitmapRatioThreshold"}, {"original_string": "private String summarizerType;", "modifier": "private", "type": "String", "declarator": "summarizerType", "var_name": "summarizerType"}, {"original_string": "private List<String> attributes;", "modifier": "private", "type": "List<String>", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "private String ratioMetric;", "modifier": "private", "type": "String", "declarator": "ratioMetric", "var_name": "ratioMetric"}, {"original_string": "private double minSupport;", "modifier": "private", "type": "double", "declarator": "minSupport", "var_name": "minSupport"}, {"original_string": "private double minRiskRatio;", "modifier": "private", "type": "double", "declarator": "minRiskRatio", "var_name": "minRiskRatio"}, {"original_string": "private double meanShiftRatio;", "modifier": "private", "type": "double", "declarator": "meanShiftRatio", "var_name": "meanShiftRatio"}, {"original_string": "private boolean useFDs;", "modifier": "private", "type": "boolean", "declarator": "useFDs", "var_name": "useFDs"}, {"original_string": "private int[] functionalDependencies;", "modifier": "private", "type": "int[]", "declarator": "functionalDependencies", "var_name": "functionalDependencies"}], "methods": [{"identifier": "BasicBatchPipeline", "parameters": "(PipelineConfig conf)", "modifiers": "public", "return": "", "signature": " BasicBatchPipeline(PipelineConfig conf)", "full_signature": "public  BasicBatchPipeline(PipelineConfig conf)", "class_method_signature": "BasicBatchPipeline.BasicBatchPipeline(PipelineConfig conf)", "testcase": false, "constructor": true}, {"identifier": "getClassifier", "parameters": "()", "modifiers": "public", "return": "Classifier", "signature": "Classifier getClassifier()", "full_signature": "public Classifier getClassifier()", "class_method_signature": "BasicBatchPipeline.getClassifier()", "testcase": false, "constructor": false}, {"identifier": "getSummarizer", "parameters": "(String outlierColumnName)", "modifiers": "public", "return": "BatchSummarizer", "signature": "BatchSummarizer getSummarizer(String outlierColumnName)", "full_signature": "public BatchSummarizer getSummarizer(String outlierColumnName)", "class_method_signature": "BasicBatchPipeline.getSummarizer(String outlierColumnName)", "testcase": false, "constructor": false}, {"identifier": "loadData", "parameters": "()", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame loadData()", "full_signature": "public DataFrame loadData()", "class_method_signature": "BasicBatchPipeline.loadData()", "testcase": false, "constructor": false}, {"identifier": "results", "parameters": "()", "modifiers": "@Override public", "return": "Explanation", "signature": "Explanation results()", "full_signature": "@Override public Explanation results()", "class_method_signature": "BasicBatchPipeline.results()", "testcase": false, "constructor": false}], "file": "core/src/main/java/edu/stanford/futuredata/macrobase/pipeline/BasicBatchPipeline.java"}, "focal_method": {"identifier": "results", "parameters": "()", "modifiers": "@Override public", "return": "Explanation", "body": "@Override\n    public Explanation results() throws Exception {\n        long startTime = System.currentTimeMillis();\n        DataFrame df = loadData();\n        long elapsed = System.currentTimeMillis() - startTime;\n\n        log.info(\"Loading time: {} ms\", elapsed);\n        log.info(\"{} rows\", df.getNumRows());\n        log.info(\"Metric: {}\", metric);\n        log.info(\"Attributes: {}\", attributes);\n\n        Classifier classifier = getClassifier();\n        classifier.process(df);\n        df = classifier.getResults();\n\n        BatchSummarizer summarizer = getSummarizer(classifier.getOutputColumnName());\n\n        startTime = System.currentTimeMillis();\n        summarizer.process(df);\n        elapsed = System.currentTimeMillis() - startTime;\n        log.info(\"Summarization time: {} ms\", elapsed);\n        Explanation output = summarizer.getResults();\n\n        return output;\n    }", "signature": "Explanation results()", "full_signature": "@Override public Explanation results()", "class_method_signature": "BasicBatchPipeline.results()", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "loadData", "currentTimeMillis", "info", "info", "getNumRows", "info", "info", "getClassifier", "process", "getResults", "getSummarizer", "getOutputColumnName", "currentTimeMillis", "process", "currentTimeMillis", "info", "getResults"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}