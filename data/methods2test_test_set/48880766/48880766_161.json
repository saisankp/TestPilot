{"test_class": {"identifier": "SqlResultSetReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/io/jdbc/SqlResultSetReaderTest.java"}, "test_case": {"identifier": "testSqlResultSetReader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSqlResultSetReader() throws Exception {\n\n    // Create a named constant for the URL.\n    // NOTE: This value is specific for H2 in-memory DB.\n    final String DB_URL = \"jdbc:h2:mem:CoffeeDB\";\n\n    // Create a connection to the database.\n    Connection conn = DriverManager.getConnection(DB_URL);\n\n    // If the DB already exists, drop the tables.\n    TestDb.dropTables(conn);\n\n    // Build the Coffee table.\n    TestDb.buildCoffeeTable(conn);\n\n    // Build the Customer table.\n    TestDb.buildCustomerTable(conn);\n\n    // Build the UnpaidInvoice table.\n    TestDb.buildUnpaidOrderTable(conn);\n\n    // Build the OracleNumbers table.\n    TestDb.buildNumbersTable(conn);\n\n    // Build the NullValues table.\n    TestDb.buildNullValuesTable(conn);\n\n    try (Statement stmt = conn.createStatement()) {\n      String sql;\n\n      sql = \"SELECT * FROM coffee\";\n      try (ResultSet rs = stmt.executeQuery(sql)) {\n        Table coffee = SqlResultSetReader.read(rs);\n        assertEquals(4, coffee.columnCount());\n        assertEquals(18, coffee.rowCount());\n      }\n\n      sql = \"SELECT * FROM Customer\";\n      try (ResultSet rs = stmt.executeQuery(sql)) {\n        Table customer = SqlResultSetReader.read(rs);\n        assertEquals(7, customer.columnCount());\n        assertEquals(3, customer.rowCount());\n      }\n\n      sql = \"SELECT * FROM UnpaidOrder\";\n      try (ResultSet rs = stmt.executeQuery(sql)) {\n        Table unpaidInvoice = SqlResultSetReader.read(rs);\n        assertEquals(5, unpaidInvoice.columnCount());\n        assertEquals(0, unpaidInvoice.rowCount());\n      }\n\n      sql = \"SELECT * FROM Numbers\";\n      try (ResultSet rs = stmt.executeQuery(sql)) {\n        Table numbers = SqlResultSetReader.read(rs);\n        assertEquals(13, numbers.columnCount());\n        assertEquals(3, numbers.rowCount());\n        assertTrue(numbers.column(\"Description\").type() instanceof StringColumnType);\n        assertTrue(numbers.column(\"NumInt\").type() instanceof IntColumnType);\n        assertTrue(numbers.column(\"NumInt6_0\").type() instanceof IntColumnType);\n        assertTrue(numbers.column(\"NumLong\").type() instanceof LongColumnType);\n        assertTrue(numbers.column(\"NumShort\").type() instanceof ShortColumnType);\n        assertTrue(numbers.column(\"NumNumber\").type() instanceof DoubleColumnType);\n        assertTrue(numbers.column(\"NumBigInt\").type() instanceof DoubleColumnType);\n        assertTrue(numbers.column(\"NumBigDec\").type() instanceof DoubleColumnType);\n        assertTrue(numbers.column(\"NumFloat7_1\").type() instanceof FloatColumnType);\n        assertTrue(numbers.column(\"NumFloat7_7\").type() instanceof FloatColumnType);\n        assertTrue(numbers.column(\"NumDouble7_8\").type() instanceof DoubleColumnType);\n        assertTrue(numbers.column(\"NumDouble7_16\").type() instanceof DoubleColumnType);\n      }\n\n      sql = \"SELECT * FROM NullValues\";\n      try (ResultSet rs = stmt.executeQuery(sql)) {\n        Table nullValues = SqlResultSetReader.read(rs);\n        assertEquals(8, nullValues.columnCount());\n        assertEquals(3, nullValues.rowCount());\n        assertEquals(2, nullValues.column(\"StringValue\").removeMissing().size());\n        assertEquals(1, nullValues.column(\"DoubleValue\").removeMissing().size());\n        assertEquals(2, nullValues.column(\"IntegerValue\").removeMissing().size());\n        assertEquals(1, nullValues.column(\"ShortValue\").removeMissing().size());\n        assertEquals(1, nullValues.column(\"LongValue\").removeMissing().size());\n        assertEquals(1, nullValues.column(\"FloatValue\").removeMissing().size());\n        assertEquals(1, nullValues.column(\"BooleanValue\").removeMissing().size());\n      }\n    }\n  }", "signature": "void testSqlResultSetReader()", "full_signature": "@Test public void testSqlResultSetReader()", "class_method_signature": "SqlResultSetReaderTest.testSqlResultSetReader()", "testcase": true, "constructor": false, "invocations": ["getConnection", "dropTables", "buildCoffeeTable", "buildCustomerTable", "buildUnpaidOrderTable", "buildNumbersTable", "buildNullValuesTable", "createStatement", "executeQuery", "read", "assertEquals", "columnCount", "assertEquals", "rowCount", "executeQuery", "read", "assertEquals", "columnCount", "assertEquals", "rowCount", "executeQuery", "read", "assertEquals", "columnCount", "assertEquals", "rowCount", "executeQuery", "read", "assertEquals", "columnCount", "assertEquals", "rowCount", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "assertTrue", "type", "column", "executeQuery", "read", "assertEquals", "columnCount", "assertEquals", "rowCount", "assertEquals", "size", "removeMissing", "column", "assertEquals", "size", "removeMissing", "column", "assertEquals", "size", "removeMissing", "column", "assertEquals", "size", "removeMissing", "column", "assertEquals", "size", "removeMissing", "column", "assertEquals", "size", "removeMissing", "column", "assertEquals", "size", "removeMissing", "column"]}, "focal_class": {"identifier": "SqlResultSetReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Integer, ColumnType> SQL_TYPE_TO_TABLESAW_TYPE = initializeMap();", "modifier": "private static final", "type": "Map<Integer, ColumnType>", "declarator": "SQL_TYPE_TO_TABLESAW_TYPE = initializeMap()", "var_name": "SQL_TYPE_TO_TABLESAW_TYPE"}], "methods": [{"identifier": "initializeMap", "parameters": "()", "modifiers": "private static", "return": "Map<Integer, ColumnType>", "signature": "Map<Integer, ColumnType> initializeMap()", "full_signature": "private static Map<Integer, ColumnType> initializeMap()", "class_method_signature": "SqlResultSetReader.initializeMap()", "testcase": false, "constructor": false}, {"identifier": "mapJdbcTypeToColumnType", "parameters": "(Integer jdbc, ColumnType columnType)", "modifiers": "public static", "return": "void", "signature": "void mapJdbcTypeToColumnType(Integer jdbc, ColumnType columnType)", "full_signature": "public static void mapJdbcTypeToColumnType(Integer jdbc, ColumnType columnType)", "class_method_signature": "SqlResultSetReader.mapJdbcTypeToColumnType(Integer jdbc, ColumnType columnType)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(ResultSet resultSet)", "modifiers": "public static", "return": "Table", "signature": "Table read(ResultSet resultSet)", "full_signature": "public static Table read(ResultSet resultSet)", "class_method_signature": "SqlResultSetReader.read(ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "appendToColumn", "parameters": "(Column<?> column, ResultSet resultSet, Object value)", "modifiers": "protected static", "return": "void", "signature": "void appendToColumn(Column<?> column, ResultSet resultSet, Object value)", "full_signature": "protected static void appendToColumn(Column<?> column, ResultSet resultSet, Object value)", "class_method_signature": "SqlResultSetReader.appendToColumn(Column<?> column, ResultSet resultSet, Object value)", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "(int columnType, int scale, int precision)", "modifiers": "protected static", "return": "ColumnType", "signature": "ColumnType getColumnType(int columnType, int scale, int precision)", "full_signature": "protected static ColumnType getColumnType(int columnType, int scale, int precision)", "class_method_signature": "SqlResultSetReader.getColumnType(int columnType, int scale, int precision)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/io/jdbc/SqlResultSetReader.java"}, "focal_method": {"identifier": "read", "parameters": "(ResultSet resultSet)", "modifiers": "public static", "return": "Table", "body": "public static Table read(ResultSet resultSet) throws SQLException {\n\n    ResultSetMetaData metaData = resultSet.getMetaData();\n    Table table = Table.create();\n\n    // Setup the columns and add to the table\n    for (int i = 1; i <= metaData.getColumnCount(); i++) {\n      ColumnType type =\n          getColumnType(metaData.getColumnType(i), metaData.getScale(i), metaData.getPrecision(i));\n\n      Preconditions.checkState(\n          type != null,\n          \"No column type found for %s as specified for column %s\",\n          metaData.getColumnType(i),\n          metaData.getColumnName(i));\n\n      Column<?> newColumn = type.create(metaData.getColumnLabel(i));\n      table.addColumns(newColumn);\n    }\n\n    // Add the rows\n    while (resultSet.next()) {\n      for (int i = 1; i <= metaData.getColumnCount(); i++) {\n        Column<?> column =\n            table.column(i - 1); // subtract 1 because results sets originate at 1 not 0\n        if (column instanceof ShortColumn) {\n          appendToColumn(column, resultSet, resultSet.getShort(i));\n        } else if (column instanceof IntColumn) {\n          appendToColumn(column, resultSet, resultSet.getInt(i));\n        } else if (column instanceof LongColumn) {\n          appendToColumn(column, resultSet, resultSet.getLong(i));\n        } else if (column instanceof FloatColumn) {\n          appendToColumn(column, resultSet, resultSet.getFloat(i));\n        } else if (column instanceof DoubleColumn) {\n          appendToColumn(column, resultSet, resultSet.getDouble(i));\n        } else if (column instanceof BooleanColumn) {\n          appendToColumn(column, resultSet, resultSet.getBoolean(i));\n        } else {\n          column.appendObj(resultSet.getObject(i));\n        }\n      }\n    }\n    return table;\n  }", "signature": "Table read(ResultSet resultSet)", "full_signature": "public static Table read(ResultSet resultSet)", "class_method_signature": "SqlResultSetReader.read(ResultSet resultSet)", "testcase": false, "constructor": false, "invocations": ["getMetaData", "create", "getColumnCount", "getColumnType", "getColumnType", "getScale", "getPrecision", "checkState", "getColumnType", "getColumnName", "create", "getColumnLabel", "addColumns", "next", "getColumnCount", "column", "appendToColumn", "getShort", "appendToColumn", "getInt", "appendToColumn", "getLong", "appendToColumn", "getFloat", "appendToColumn", "getDouble", "appendToColumn", "getBoolean", "appendObj", "getObject"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}