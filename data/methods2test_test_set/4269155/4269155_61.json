{"test_class": {"identifier": "VelocityRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VelocityRequest context;", "modifier": "private", "type": "VelocityRequest", "declarator": "context", "var_name": "context"}, {"original_string": "private Context velocityContext;", "modifier": "private", "type": "Context", "declarator": "velocityContext", "var_name": "velocityContext"}, {"original_string": "private StringWriter writer;", "modifier": "private", "type": "StringWriter", "declarator": "writer", "var_name": "writer"}], "file": "tiles-request-velocity/src/test/java/org/apache/tiles/request/velocity/VelocityRequestTest.java"}, "test_case": {"identifier": "testCreateVelocityRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateVelocityRequest() {\n        HttpServletRequest httpRequest = createMock(HttpServletRequest.class);\n        HttpServletResponse response = createMock(HttpServletResponse.class);\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n\n        replay(velocityContext, httpRequest, response, applicationContext);\n        context = VelocityRequest.createVelocityRequest(applicationContext,\n                httpRequest, response, velocityContext, writer);\n        ServletRequest servletRequest = (ServletRequest) context.getWrappedRequest();\n        assertEquals(httpRequest, servletRequest.getRequest());\n        assertEquals(response, servletRequest.getResponse());\n        verify(velocityContext, httpRequest, response, applicationContext);\n    }", "signature": "void testCreateVelocityRequest()", "full_signature": "@Test public void testCreateVelocityRequest()", "class_method_signature": "VelocityRequestTest.testCreateVelocityRequest()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "replay", "createVelocityRequest", "getWrappedRequest", "assertEquals", "getRequest", "assertEquals", "getResponse", "verify"]}, "focal_class": {"identifier": "VelocityRequest", "superclass": "extends AbstractViewRequest", "interfaces": "", "fields": [{"original_string": "private final List<String> scopes;", "modifier": "private final", "type": "List<String>", "declarator": "scopes", "var_name": "scopes"}, {"original_string": "private final Context ctx;", "modifier": "private final", "type": "Context", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private Writer writer;", "modifier": "private", "type": "Writer", "declarator": "writer", "var_name": "writer"}, {"original_string": "private Map<String, Object> pageScope;", "modifier": "private", "type": "Map<String, Object>", "declarator": "pageScope", "var_name": "pageScope"}], "methods": [{"identifier": "createVelocityRequest", "parameters": "(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "modifiers": "public static", "return": "VelocityRequest", "signature": "VelocityRequest createVelocityRequest(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "full_signature": "public static VelocityRequest createVelocityRequest(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "class_method_signature": "VelocityRequest.createVelocityRequest(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "VelocityRequest", "parameters": "(\n            DispatchRequest enclosedRequest, Context ctx, Writer writer)", "modifiers": "public", "return": "", "signature": " VelocityRequest(\n            DispatchRequest enclosedRequest, Context ctx, Writer writer)", "full_signature": "public  VelocityRequest(\n            DispatchRequest enclosedRequest, Context ctx, Writer writer)", "class_method_signature": "VelocityRequest.VelocityRequest(\n            DispatchRequest enclosedRequest, Context ctx, Writer writer)", "testcase": false, "constructor": true}, {"identifier": "getAvailableScopes", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAvailableScopes()", "full_signature": "@Override public List<String> getAvailableScopes()", "class_method_signature": "VelocityRequest.getAvailableScopes()", "testcase": false, "constructor": false}, {"identifier": "doInclude", "parameters": "(String path)", "modifiers": "@Override protected", "return": "void", "signature": "void doInclude(String path)", "full_signature": "@Override protected void doInclude(String path)", "class_method_signature": "VelocityRequest.doInclude(String path)", "testcase": false, "constructor": false}, {"identifier": "getPrintWriter", "parameters": "()", "modifiers": "@Override public", "return": "PrintWriter", "signature": "PrintWriter getPrintWriter()", "full_signature": "@Override public PrintWriter getPrintWriter()", "class_method_signature": "VelocityRequest.getPrintWriter()", "testcase": false, "constructor": false}, {"identifier": "getWriter", "parameters": "()", "modifiers": "@Override public", "return": "Writer", "signature": "Writer getWriter()", "full_signature": "@Override public Writer getWriter()", "class_method_signature": "VelocityRequest.getWriter()", "testcase": false, "constructor": false}, {"identifier": "getPageScope", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getPageScope()", "full_signature": "public Map<String, Object> getPageScope()", "class_method_signature": "VelocityRequest.getPageScope()", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(String scope)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getContext(String scope)", "full_signature": "@Override public Map<String, Object> getContext(String scope)", "class_method_signature": "VelocityRequest.getContext(String scope)", "testcase": false, "constructor": false}], "file": "tiles-request-velocity/src/main/java/org/apache/tiles/request/velocity/VelocityRequest.java"}, "focal_method": {"identifier": "createVelocityRequest", "parameters": "(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "modifiers": "public static", "return": "VelocityRequest", "body": "public static VelocityRequest createVelocityRequest(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer) {\n        DispatchRequest servletRequest = new ServletRequest(\n                applicationContext, request, response);\n        VelocityRequest velocityRequest = new VelocityRequest(\n                servletRequest, velocityContext, writer);\n        return velocityRequest;\n    }", "signature": "VelocityRequest createVelocityRequest(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "full_signature": "public static VelocityRequest createVelocityRequest(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "class_method_signature": "VelocityRequest.createVelocityRequest(\n            ApplicationContext applicationContext, HttpServletRequest request,\n            HttpServletResponse response, Context velocityContext, Writer writer)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4269155, "url": "https://github.com/apache/tiles-request", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 865, "license": "licensed"}}