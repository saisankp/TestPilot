{"test_class": {"identifier": "AbstractSearchableCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  Criteria criteria;", "modifier": "@Mock", "type": "Criteria", "declarator": "criteria", "var_name": "criteria"}, {"original_string": "@Mock\n  Filter filter;", "modifier": "@Mock", "type": "Filter", "declarator": "filter", "var_name": "filter"}, {"original_string": "@Mock\n  IndexHandler<Integer, Item> indexHandler;", "modifier": "@Mock", "type": "IndexHandler<Integer, Item>", "declarator": "indexHandler", "var_name": "indexHandler"}], "file": "imcache-core/src/test/java/com/cetsoft/imcache/cache/AbstractSearchableCacheTest.java"}, "test_case": {"identifier": "execute", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    AbstractSearchableCache<Integer, Item> abstractCache = new AbstractSearchableCache<Integer, Item>(\n        \"searchable-cache\",\n        key -> null, (key, value) -> {\n    }, indexHandler) {\n      final Map<Integer, Item> items = new HashMap<>();\n\n      @Override\n      public void put(Integer key, Item value) {\n        items.put(key, value);\n        indexHandler.add(key, value);\n      }\n\n      @Override\n      public void put(Integer key, Item value, TimeUnit timeUnit, long duration) {\n        items.put(key, value);\n        indexHandler.add(key, value);\n      }\n\n      @Override\n      public Item get(Integer key) {\n        return null;\n      }\n\n      @Override\n      public Item invalidate(Integer key) {\n        final Item value = items.remove(key);\n        indexHandler.remove(key, value);\n        return null;\n      }\n\n      @Override\n      public boolean contains(Integer key) {\n        return false;\n      }\n\n      @Override\n      public void clear() {\n\n      }\n\n      @Override\n      public long size() {\n        return 0;\n      }\n\n      @Override\n      public CacheStats stats() {\n        return null;\n      }\n    };\n    Item item1 = new Item(1);\n    Item item2 = new Item(2);\n    abstractCache.put(1, item1);\n    abstractCache.put(2, item1);\n    List<Integer> keys = new ArrayList<Integer>();\n    keys.add(1);\n    keys.add(2);\n    List<Item> values = new ArrayList<Item>();\n    values.add(item1);\n    values.add(item2);\n    doReturn(keys).when(indexHandler).execute(any(Query.class));\n    doReturn(values).when(filter).filter(anyList());\n    List<Item> items = abstractCache\n        .execute(CacheQuery.newQuery().setCriteria(criteria).setFilter(filter));\n    assertTrue(items.contains(item1));\n    assertTrue(items.contains(item2));\n    abstractCache.setCacheLoader(key -> null);\n    assertNull(abstractCache.getCacheLoader().load(1));\n    assertEquals(\"searchable-cache\", abstractCache.getName());\n    abstractCache.setEvictionListener((key, value) -> {\n    });\n  }", "signature": "void execute()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void execute()", "class_method_signature": "AbstractSearchableCacheTest.execute()", "testcase": true, "constructor": false, "invocations": ["put", "add", "put", "add", "remove", "remove", "put", "put", "add", "add", "add", "add", "execute", "when", "doReturn", "any", "filter", "when", "doReturn", "anyList", "execute", "setFilter", "setCriteria", "newQuery", "assertTrue", "contains", "assertTrue", "contains", "setCacheLoader", "assertNull", "load", "getCacheLoader", "assertEquals", "getName", "setEvictionListener"]}, "focal_class": {"identifier": "AbstractSearchableCache", "superclass": "extends AbstractCache<K, V>", "interfaces": "implements\n    SearchableCache<K, V>", "fields": [{"original_string": "protected IndexHandler<K, V> indexHandler;", "modifier": "protected", "type": "IndexHandler<K, V>", "declarator": "indexHandler", "var_name": "indexHandler"}], "methods": [{"identifier": "AbstractSearchableCache", "parameters": "(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      IndexHandler<K, V> indexHandler)", "modifiers": "public", "return": "", "signature": " AbstractSearchableCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      IndexHandler<K, V> indexHandler)", "full_signature": "public  AbstractSearchableCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      IndexHandler<K, V> indexHandler)", "class_method_signature": "AbstractSearchableCache.AbstractSearchableCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      IndexHandler<K, V> indexHandler)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Query query)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<V>", "signature": "List<V> execute(Query query)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<V> execute(Query query)", "class_method_signature": "AbstractSearchableCache.execute(Query query)", "testcase": false, "constructor": false}], "file": "imcache-core/src/main/java/com/cetsoft/imcache/cache/AbstractSearchableCache.java"}, "focal_method": {"identifier": "execute", "parameters": "(Query query)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<V>", "body": "@SuppressWarnings(\"unchecked\")\n  public List<V> execute(Query query) {\n    List<K> keys = indexHandler.execute(query);\n    List<V> values = new ArrayList<V>(keys.size());\n    for (K key : keys) {\n      V value = get(key);\n      if (value != null) {\n        values.add(value);\n      }\n    }\n    if (query.getFilter() != null) {\n      values = (List<V>) query.getFilter().filter((List<Object>) values);\n    }\n    return values;\n  }", "signature": "List<V> execute(Query query)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<V> execute(Query query)", "class_method_signature": "AbstractSearchableCache.execute(Query query)", "testcase": false, "constructor": false, "invocations": ["execute", "size", "get", "add", "getFilter", "filter", "getFilter"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}