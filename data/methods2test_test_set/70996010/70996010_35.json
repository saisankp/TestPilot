{"test_class": {"identifier": "VpnWatchdogTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VpnWatchdog watchdog;", "modifier": "private", "type": "VpnWatchdog", "declarator": "watchdog", "var_name": "watchdog"}, {"original_string": "private DatagramSocket mockSocket;", "modifier": "private", "type": "DatagramSocket", "declarator": "mockSocket", "var_name": "mockSocket"}], "file": "app/src/test/java/org/jak_linux/dns66/vpn/VpnWatchdogTest.java"}, "test_case": {"identifier": "testHandleTimeout_error", "parameters": "()", "modifiers": "@Test(expected = AdVpnThread.VpnNetworkException.class) public", "return": "void", "body": "@Test(expected = AdVpnThread.VpnNetworkException.class)\n    public void testHandleTimeout_error() throws Exception {\n        watchdog.lastPacketReceived = 1;\n        watchdog.lastPacketSent = 2;\n\n        watchdog.handleTimeout();\n    }", "signature": "void testHandleTimeout_error()", "full_signature": "@Test(expected = AdVpnThread.VpnNetworkException.class) public void testHandleTimeout_error()", "class_method_signature": "VpnWatchdogTest.testHandleTimeout_error()", "testcase": true, "constructor": false, "invocations": ["handleTimeout"]}, "focal_class": {"identifier": "VpnWatchdog", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"VpnWatchDog\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"VpnWatchDog\"", "var_name": "TAG"}, {"original_string": "private static final int POLL_TIMEOUT_START = 1000;", "modifier": "private static final", "type": "int", "declarator": "POLL_TIMEOUT_START = 1000", "var_name": "POLL_TIMEOUT_START"}, {"original_string": "private static final int POLL_TIMEOUT_END = 4096000;", "modifier": "private static final", "type": "int", "declarator": "POLL_TIMEOUT_END = 4096000", "var_name": "POLL_TIMEOUT_END"}, {"original_string": "private static final int POLL_TIMEOUT_WAITING = 7000;", "modifier": "private static final", "type": "int", "declarator": "POLL_TIMEOUT_WAITING = 7000", "var_name": "POLL_TIMEOUT_WAITING"}, {"original_string": "private static final int POLL_TIMEOUT_GROW = 4;", "modifier": "private static final", "type": "int", "declarator": "POLL_TIMEOUT_GROW = 4", "var_name": "POLL_TIMEOUT_GROW"}, {"original_string": "private static final int INIT_PENALTY_START = 0;", "modifier": "private static final", "type": "int", "declarator": "INIT_PENALTY_START = 0", "var_name": "INIT_PENALTY_START"}, {"original_string": "private static final int INIT_PENALTY_END = 5000;", "modifier": "private static final", "type": "int", "declarator": "INIT_PENALTY_END = 5000", "var_name": "INIT_PENALTY_END"}, {"original_string": "private static final int INIT_PENALTY_INC = 200;", "modifier": "private static final", "type": "int", "declarator": "INIT_PENALTY_INC = 200", "var_name": "INIT_PENALTY_INC"}, {"original_string": "int initPenalty = INIT_PENALTY_START;", "modifier": "", "type": "int", "declarator": "initPenalty = INIT_PENALTY_START", "var_name": "initPenalty"}, {"original_string": "int pollTimeout = POLL_TIMEOUT_START;", "modifier": "", "type": "int", "declarator": "pollTimeout = POLL_TIMEOUT_START", "var_name": "pollTimeout"}, {"original_string": "long lastPacketSent = 0;", "modifier": "", "type": "long", "declarator": "lastPacketSent = 0", "var_name": "lastPacketSent"}, {"original_string": "long lastPacketReceived = 0;", "modifier": "", "type": "long", "declarator": "lastPacketReceived = 0", "var_name": "lastPacketReceived"}, {"original_string": "private boolean enabled = false;", "modifier": "private", "type": "boolean", "declarator": "enabled = false", "var_name": "enabled"}, {"original_string": "private InetAddress target;", "modifier": "private", "type": "InetAddress", "declarator": "target", "var_name": "target"}], "methods": [{"identifier": "getPollTimeout", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getPollTimeout()", "full_signature": " int getPollTimeout()", "class_method_signature": "VpnWatchdog.getPollTimeout()", "testcase": false, "constructor": false}, {"identifier": "setTarget", "parameters": "(InetAddress target)", "modifiers": "", "return": "void", "signature": "void setTarget(InetAddress target)", "full_signature": " void setTarget(InetAddress target)", "class_method_signature": "VpnWatchdog.setTarget(InetAddress target)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(boolean enabled)", "modifiers": "", "return": "void", "signature": "void initialize(boolean enabled)", "full_signature": " void initialize(boolean enabled)", "class_method_signature": "VpnWatchdog.initialize(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "handleTimeout", "parameters": "()", "modifiers": "", "return": "void", "signature": "void handleTimeout()", "full_signature": " void handleTimeout()", "class_method_signature": "VpnWatchdog.handleTimeout()", "testcase": false, "constructor": false}, {"identifier": "handlePacket", "parameters": "(byte[] packetData)", "modifiers": "", "return": "void", "signature": "void handlePacket(byte[] packetData)", "full_signature": " void handlePacket(byte[] packetData)", "class_method_signature": "VpnWatchdog.handlePacket(byte[] packetData)", "testcase": false, "constructor": false}, {"identifier": "sendPacket", "parameters": "()", "modifiers": "", "return": "void", "signature": "void sendPacket()", "full_signature": " void sendPacket()", "class_method_signature": "VpnWatchdog.sendPacket()", "testcase": false, "constructor": false}, {"identifier": "newDatagramSocket", "parameters": "()", "modifiers": "@NonNull", "return": "DatagramSocket", "signature": "DatagramSocket newDatagramSocket()", "full_signature": "@NonNull DatagramSocket newDatagramSocket()", "class_method_signature": "VpnWatchdog.newDatagramSocket()", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/vpn/VpnWatchdog.java"}, "focal_method": {"identifier": "handleTimeout", "parameters": "()", "modifiers": "", "return": "void", "body": "void handleTimeout() throws AdVpnThread.VpnNetworkException {\n        if (!enabled)\n            return;\n        Log.d(TAG, \"handleTimeout: Milliseconds elapsed between last receive and sent: \"\n                + (lastPacketReceived - lastPacketSent));\n        // Receive really timed out.\n        if (lastPacketReceived < lastPacketSent && lastPacketSent != 0) {\n            initPenalty += INIT_PENALTY_INC;\n            if (initPenalty > INIT_PENALTY_END)\n                initPenalty = INIT_PENALTY_END;\n            throw new AdVpnThread.VpnNetworkException(\"Watchdog timed out\");\n        }\n        // We received a packet after sending it, so we can be more confident and grow our wait\n        // time.\n        pollTimeout *= POLL_TIMEOUT_GROW;\n        if (pollTimeout > POLL_TIMEOUT_END)\n            pollTimeout = POLL_TIMEOUT_END;\n\n\n        sendPacket();\n    }", "signature": "void handleTimeout()", "full_signature": " void handleTimeout()", "class_method_signature": "VpnWatchdog.handleTimeout()", "testcase": false, "constructor": false, "invocations": ["d", "sendPacket"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}