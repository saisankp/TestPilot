{"test_class": {"identifier": "JmsSinkTest", "superclass": "extends JmsTestBase", "interfaces": "", "fields": [{"original_string": "private JMSContext jms;", "modifier": "private", "type": "JMSContext", "declarator": "jms", "var_name": "jms"}, {"original_string": "private ActiveMQJMSConnectionFactory factory;", "modifier": "private", "type": "ActiveMQJMSConnectionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Jsonb json;", "modifier": "private", "type": "Jsonb", "declarator": "json", "var_name": "json"}, {"original_string": "private ExecutorService executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private CompletionSubscriber<org.eclipse.microprofile.reactive.messaging.Message<?>, Void> subscriber;", "modifier": "private", "type": "CompletionSubscriber<org.eclipse.microprofile.reactive.messaging.Message<?>, Void>", "declarator": "subscriber", "var_name": "subscriber"}], "file": "smallrye-reactive-messaging-jms/src/test/java/io/smallrye/reactive/messaging/jms/JmsSinkTest.java"}, "test_case": {"identifier": "testPropagation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPropagation() throws JMSException {\n        MapBasedConfig config = new MapBasedConfig.Builder()\n                .put(\"destination\", \"queue-one\")\n                .put(\"channel-name\", \"jms\")\n                .put(\"ttl\", 10000L)\n                .build();\n        JmsSink sink = new JmsSink(jms, new JmsConnectorOutgoingConfiguration(config), json, executor);\n        MyJmsClient client = new MyJmsClient(jms.createQueue(\"queue-one\"));\n        subscriber = sink.getSink().build();\n        subscriber.onSubscribe(new Subscriptions.EmptySubscription());\n        AtomicBoolean acked = new AtomicBoolean();\n        Message<String> hello = Message.of(\"hello\",\n                () -> CompletableFuture.runAsync(() -> acked.set(true)));\n\n        Destination rt = jms.createQueue(\"reply-to\");\n\n        OutgoingJmsMessageMetadata metadata = OutgoingJmsMessageMetadata.builder()\n                .withCorrelationId(\"my-correlation-id\")\n                .withReplyTo(rt)\n                .withDeliveryMode(DeliveryMode.PERSISTENT)\n                .withType(String.class.getName())\n                .build();\n\n        hello = hello.withMetadata(Collections.singleton(metadata));\n        subscriber.onNext(hello);\n\n        await().until(() -> client.messages.size() >= 1);\n        assertThat(acked).isTrue();\n        javax.jms.Message message = client.messages.get(0);\n        assertThat(message.getBody(String.class)).isEqualTo(\"hello\");\n        assertThat(message.getJMSCorrelationID()).isEqualTo(\"my-correlation-id\");\n        assertThat(message.getJMSReplyTo()).isEqualTo(rt);\n        assertThat(message.getJMSDeliveryMode()).isEqualTo(2);\n        assertThat(message.getJMSType()).isEqualTo(String.class.getName());\n\n    }", "signature": "void testPropagation()", "full_signature": "@Test public void testPropagation()", "class_method_signature": "JmsSinkTest.testPropagation()", "testcase": true, "constructor": false, "invocations": ["build", "put", "put", "put", "createQueue", "build", "getSink", "onSubscribe", "of", "runAsync", "set", "createQueue", "build", "withType", "withDeliveryMode", "withReplyTo", "withCorrelationId", "builder", "getName", "withMetadata", "singleton", "onNext", "until", "await", "size", "isTrue", "assertThat", "get", "isEqualTo", "assertThat", "getBody", "isEqualTo", "assertThat", "getJMSCorrelationID", "isEqualTo", "assertThat", "getJMSReplyTo", "isEqualTo", "assertThat", "getJMSDeliveryMode", "isEqualTo", "assertThat", "getJMSType", "getName"]}, "focal_class": {"identifier": "JmsSink", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JMSProducer producer;", "modifier": "private final", "type": "JMSProducer", "declarator": "producer", "var_name": "producer"}, {"original_string": "private final Destination destination;", "modifier": "private final", "type": "Destination", "declarator": "destination", "var_name": "destination"}, {"original_string": "private final SubscriberBuilder<Message<?>, Void> sink;", "modifier": "private final", "type": "SubscriberBuilder<Message<?>, Void>", "declarator": "sink", "var_name": "sink"}, {"original_string": "private final JMSContext context;", "modifier": "private final", "type": "JMSContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final Jsonb json;", "modifier": "private final", "type": "Jsonb", "declarator": "json", "var_name": "json"}, {"original_string": "private final Executor executor;", "modifier": "private final", "type": "Executor", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "JmsSink", "parameters": "(JMSContext context, JmsConnectorOutgoingConfiguration config, Jsonb jsonb, Executor executor)", "modifiers": "", "return": "", "signature": " JmsSink(JMSContext context, JmsConnectorOutgoingConfiguration config, Jsonb jsonb, Executor executor)", "full_signature": "  JmsSink(JMSContext context, JmsConnectorOutgoingConfiguration config, Jsonb jsonb, Executor executor)", "class_method_signature": "JmsSink.JmsSink(JMSContext context, JmsConnectorOutgoingConfiguration config, Jsonb jsonb, Executor executor)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(Message<?> message)", "modifiers": "private", "return": "CompletionStage<Message<?>>", "signature": "CompletionStage<Message<?>> send(Message<?> message)", "full_signature": "private CompletionStage<Message<?>> send(Message<?> message)", "class_method_signature": "JmsSink.send(Message<?> message)", "testcase": false, "constructor": false}, {"identifier": "isPrimitiveBoxed", "parameters": "(Class<?> c)", "modifiers": "private", "return": "boolean", "signature": "boolean isPrimitiveBoxed(Class<?> c)", "full_signature": "private boolean isPrimitiveBoxed(Class<?> c)", "class_method_signature": "JmsSink.isPrimitiveBoxed(Class<?> c)", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "(Message<?> incoming, Runnable action)", "modifiers": "private", "return": "CompletionStage<Message<?>>", "signature": "CompletionStage<Message<?>> dispatch(Message<?> incoming, Runnable action)", "full_signature": "private CompletionStage<Message<?>> dispatch(Message<?> incoming, Runnable action)", "class_method_signature": "JmsSink.dispatch(Message<?> incoming, Runnable action)", "testcase": false, "constructor": false}, {"identifier": "getDestination", "parameters": "(JMSContext context, String name, String type)", "modifiers": "private", "return": "Destination", "signature": "Destination getDestination(JMSContext context, String name, String type)", "full_signature": "private Destination getDestination(JMSContext context, String name, String type)", "class_method_signature": "JmsSink.getDestination(JMSContext context, String name, String type)", "testcase": false, "constructor": false}, {"identifier": "getSink", "parameters": "()", "modifiers": "", "return": "SubscriberBuilder<Message<?>, Void>", "signature": "SubscriberBuilder<Message<?>, Void> getSink()", "full_signature": " SubscriberBuilder<Message<?>, Void> getSink()", "class_method_signature": "JmsSink.getSink()", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-jms/src/main/java/io/smallrye/reactive/messaging/jms/JmsSink.java"}, "focal_method": {"identifier": "getSink", "parameters": "()", "modifiers": "", "return": "SubscriberBuilder<Message<?>, Void>", "body": "SubscriberBuilder<Message<?>, Void> getSink() {\n        return sink;\n    }", "signature": "SubscriberBuilder<Message<?>, Void> getSink()", "full_signature": " SubscriberBuilder<Message<?>, Void> getSink()", "class_method_signature": "JmsSink.getSink()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}