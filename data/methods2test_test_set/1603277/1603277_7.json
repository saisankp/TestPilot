{"test_class": {"identifier": "CITest", "superclass": "", "interfaces": "", "fields": [], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.classification/src/test/java/eu/alertproject/iccs/stardom/classification/CITest.java"}, "test_case": {"identifier": "deserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deserialize() throws IOException {\n\n        CI o =  CIUtils.loadFromDefaultLocation();\n\n        Assert.assertNotNull(o);\n        Assert.assertEquals(3, o.getClassifiers().size(),0);\n\n        \n        String[] mls = new String[]{\n               \"ForumActivityMetric\",\n                \"ForumTemporalMetric\",\n                \"ItsActivityMetric\",\n                \"ItsIssuesResolvedMetric\",\n                \"ItsTemporalMetric\",\n                \"MailingListActivityMetric\",\n                \"MailingListTemporalMetric\",\n                \"ScmActivityMetric\",\n                \"ScmApiIntroducedMetric\",\n                \"ScmApiUsageCountMetric\",\n                \"ScmTemporalMetric\"\n        };\n        \n        Iterator<CI.Classifier> iterator = o.getClassifiers().iterator();\n\n        CI.Classifier cd = iterator.next();\n        Assert.assertEquals(\"core developers\", cd.getName());\n        Assert.assertEquals(1.0, cd.getPrior(),0.0);\n        Assert.assertEquals(11,cd.getMetrics().size(),0);\n        assertNames(mls,cd.getMetrics().iterator());\n        Assert.assertEquals(0.1234,cd.getMetrics().get(6).getStandardDeviation(),0.0);\n        Assert.assertEquals(0.0002,cd.getMetrics().get(6).getMean(),0.0);\n\n\n        CI.Classifier tr = iterator.next();\n        Assert.assertEquals(\"testers\", tr.getName());\n        Assert.assertEquals(2.0, tr.getPrior(),0.0);\n        Assert.assertEquals(11,tr.getMetrics().size(),0);\n        assertNames(mls,tr.getMetrics().iterator());\n        Assert.assertEquals(0.5683,tr.getMetrics().get(4).getStandardDeviation(),0.0);\n        Assert.assertEquals(0.0004,tr.getMetrics().get(4).getMean(),0.0);\n\n\n        CI.Classifier bt = iterator.next();\n        Assert.assertEquals(\"bug triagers\", bt.getName());\n        Assert.assertEquals(3.0, bt.getPrior(),0.0);\n        Assert.assertEquals(11,bt.getMetrics().size(),0);\n        assertNames(mls,bt.getMetrics().iterator());\n        Assert.assertEquals(0.0005895,bt.getMetrics().get(10).getStandardDeviation(),0.0);\n        Assert.assertEquals(0.2547890,bt.getMetrics().get(10).getMean(),0.0);\n\n\n\n    }", "signature": "void deserialize()", "full_signature": "@Test public void deserialize()", "class_method_signature": "CITest.deserialize()", "testcase": true, "constructor": false, "invocations": ["loadFromDefaultLocation", "assertNotNull", "assertEquals", "size", "getClassifiers", "iterator", "getClassifiers", "next", "assertEquals", "getName", "assertEquals", "getPrior", "assertEquals", "size", "getMetrics", "assertNames", "iterator", "getMetrics", "assertEquals", "getStandardDeviation", "get", "getMetrics", "assertEquals", "getMean", "get", "getMetrics", "next", "assertEquals", "getName", "assertEquals", "getPrior", "assertEquals", "size", "getMetrics", "assertNames", "iterator", "getMetrics", "assertEquals", "getStandardDeviation", "get", "getMetrics", "assertEquals", "getMean", "get", "getMetrics", "next", "assertEquals", "getName", "assertEquals", "getPrior", "assertEquals", "size", "getMetrics", "assertNames", "iterator", "getMetrics", "assertEquals", "getStandardDeviation", "get", "getMetrics", "assertEquals", "getMean", "get", "getMetrics"]}, "focal_class": {"identifier": "CI", "superclass": "", "interfaces": "", "fields": [{"original_string": "@XStreamImplicit(itemFieldName = \"classifier\")\n    private List<Classifier> classifiers;", "modifier": "@XStreamImplicit(itemFieldName = \"classifier\")\n    private", "type": "List<Classifier>", "declarator": "classifiers", "var_name": "classifiers"}], "methods": [{"identifier": "getClassifiers", "parameters": "()", "modifiers": "public", "return": "List<Classifier>", "signature": "List<Classifier> getClassifiers()", "full_signature": "public List<Classifier> getClassifiers()", "class_method_signature": "CI.getClassifiers()", "testcase": false, "constructor": false}, {"identifier": "setClassifiers", "parameters": "(List<Classifier> classifiers)", "modifiers": "public", "return": "void", "signature": "void setClassifiers(List<Classifier> classifiers)", "full_signature": "public void setClassifiers(List<Classifier> classifiers)", "class_method_signature": "CI.setClassifiers(List<Classifier> classifiers)", "testcase": false, "constructor": false}], "file": "eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.classification/src/main/java/eu/alertproject/iccs/stardom/classification/CI.java"}, "focal_method": {"identifier": "getClassifiers", "parameters": "()", "modifiers": "public", "return": "List<Classifier>", "body": "public List<Classifier> getClassifiers() {\n        return classifiers;\n    }", "signature": "List<Classifier> getClassifiers()", "full_signature": "public List<Classifier> getClassifiers()", "class_method_signature": "CI.getClassifiers()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1603277, "url": "https://github.com/iccs/STARDOM", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 39514, "license": "licensed"}}