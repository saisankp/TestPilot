{"test_class": {"identifier": "UrlUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String localAddress = \"127.0.0.1\";", "modifier": "", "type": "String", "declarator": "localAddress = \"127.0.0.1\"", "var_name": "localAddress"}], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/UrlUtilsTest.java"}, "test_case": {"identifier": "testConvertRegister", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertRegister() {\n        String key = \"perf/dubbo.test.api.HelloService:1.0.0\";\n        Map<String, Map<String, String>> register = new HashMap<String, Map<String, String>>();\n        register.put(key, null);\n        Map<String, Map<String, String>> newRegister = UrlUtils.convertRegister(register);\n        assertEquals(register, newRegister);\n    }", "signature": "void testConvertRegister()", "full_signature": "@Test public void testConvertRegister()", "class_method_signature": "UrlUtilsTest.testConvertRegister()", "testcase": true, "constructor": false, "invocations": ["put", "convertRegister", "assertEquals"]}, "focal_class": {"identifier": "UrlUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String URL_PARAM_STARTING_SYMBOL = \"?\";", "modifier": "private final static", "type": "String", "declarator": "URL_PARAM_STARTING_SYMBOL = \"?\"", "var_name": "URL_PARAM_STARTING_SYMBOL"}], "methods": [{"identifier": "parseURL", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "URL", "signature": "URL parseURL(String address, Map<String, String> defaults)", "full_signature": "public static URL parseURL(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURL(String address, Map<String, String> defaults)", "testcase": false, "constructor": false}, {"identifier": "parseURLs", "parameters": "(String address, Map<String, String> defaults)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> parseURLs(String address, Map<String, String> defaults)", "full_signature": "public static List<URL> parseURLs(String address, Map<String, String> defaults)", "class_method_signature": "UrlUtils.parseURLs(String address, Map<String, String> defaults)", "testcase": false, "constructor": false}, {"identifier": "convertRegister", "parameters": "(Map<String, Map<String, String>> register)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "full_signature": "public static Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "class_method_signature": "UrlUtils.convertRegister(Map<String, Map<String, String>> register)", "testcase": false, "constructor": false}, {"identifier": "convertSubscribe", "parameters": "(Map<String, String> subscribe)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> convertSubscribe(Map<String, String> subscribe)", "full_signature": "public static Map<String, String> convertSubscribe(Map<String, String> subscribe)", "class_method_signature": "UrlUtils.convertSubscribe(Map<String, String> subscribe)", "testcase": false, "constructor": false}, {"identifier": "revertRegister", "parameters": "(Map<String, Map<String, String>> register)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> revertRegister(Map<String, Map<String, String>> register)", "full_signature": "public static Map<String, Map<String, String>> revertRegister(Map<String, Map<String, String>> register)", "class_method_signature": "UrlUtils.revertRegister(Map<String, Map<String, String>> register)", "testcase": false, "constructor": false}, {"identifier": "revertSubscribe", "parameters": "(Map<String, String> subscribe)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> revertSubscribe(Map<String, String> subscribe)", "full_signature": "public static Map<String, String> revertSubscribe(Map<String, String> subscribe)", "class_method_signature": "UrlUtils.revertSubscribe(Map<String, String> subscribe)", "testcase": false, "constructor": false}, {"identifier": "revertNotify", "parameters": "(Map<String, Map<String, String>> notify)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "signature": "Map<String, Map<String, String>> revertNotify(Map<String, Map<String, String>> notify)", "full_signature": "public static Map<String, Map<String, String>> revertNotify(Map<String, Map<String, String>> notify)", "class_method_signature": "UrlUtils.revertNotify(Map<String, Map<String, String>> notify)", "testcase": false, "constructor": false}, {"identifier": "revertForbid", "parameters": "(List<String> forbid, Set<URL> subscribed)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> revertForbid(List<String> forbid, Set<URL> subscribed)", "full_signature": "public static List<String> revertForbid(List<String> forbid, Set<URL> subscribed)", "class_method_signature": "UrlUtils.revertForbid(List<String> forbid, Set<URL> subscribed)", "testcase": false, "constructor": false}, {"identifier": "getEmptyUrl", "parameters": "(String service, String category)", "modifiers": "public static", "return": "URL", "signature": "URL getEmptyUrl(String service, String category)", "full_signature": "public static URL getEmptyUrl(String service, String category)", "class_method_signature": "UrlUtils.getEmptyUrl(String service, String category)", "testcase": false, "constructor": false}, {"identifier": "isMatchCategory", "parameters": "(String category, String categories)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchCategory(String category, String categories)", "full_signature": "public static boolean isMatchCategory(String category, String categories)", "class_method_signature": "UrlUtils.isMatchCategory(String category, String categories)", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(URL consumerUrl, URL providerUrl)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatch(URL consumerUrl, URL providerUrl)", "full_signature": "public static boolean isMatch(URL consumerUrl, URL providerUrl)", "class_method_signature": "UrlUtils.isMatch(URL consumerUrl, URL providerUrl)", "testcase": false, "constructor": false}, {"identifier": "isMatchGlobPattern", "parameters": "(String pattern, String value, URL param)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchGlobPattern(String pattern, String value, URL param)", "full_signature": "public static boolean isMatchGlobPattern(String pattern, String value, URL param)", "class_method_signature": "UrlUtils.isMatchGlobPattern(String pattern, String value, URL param)", "testcase": false, "constructor": false}, {"identifier": "isMatchGlobPattern", "parameters": "(String pattern, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatchGlobPattern(String pattern, String value)", "full_signature": "public static boolean isMatchGlobPattern(String pattern, String value)", "class_method_signature": "UrlUtils.isMatchGlobPattern(String pattern, String value)", "testcase": false, "constructor": false}, {"identifier": "isServiceKeyMatch", "parameters": "(URL pattern, URL value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceKeyMatch(URL pattern, URL value)", "full_signature": "public static boolean isServiceKeyMatch(URL pattern, URL value)", "class_method_signature": "UrlUtils.isServiceKeyMatch(URL pattern, URL value)", "testcase": false, "constructor": false}, {"identifier": "classifyUrls", "parameters": "(List<URL> urls, Predicate<URL> predicate)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> classifyUrls(List<URL> urls, Predicate<URL> predicate)", "full_signature": "public static List<URL> classifyUrls(List<URL> urls, Predicate<URL> predicate)", "class_method_signature": "UrlUtils.classifyUrls(List<URL> urls, Predicate<URL> predicate)", "testcase": false, "constructor": false}, {"identifier": "isConfigurator", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isConfigurator(URL url)", "full_signature": "public static boolean isConfigurator(URL url)", "class_method_signature": "UrlUtils.isConfigurator(URL url)", "testcase": false, "constructor": false}, {"identifier": "isRoute", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRoute(URL url)", "full_signature": "public static boolean isRoute(URL url)", "class_method_signature": "UrlUtils.isRoute(URL url)", "testcase": false, "constructor": false}, {"identifier": "isProvider", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isProvider(URL url)", "full_signature": "public static boolean isProvider(URL url)", "class_method_signature": "UrlUtils.isProvider(URL url)", "testcase": false, "constructor": false}, {"identifier": "isRegistry", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRegistry(URL url)", "full_signature": "public static boolean isRegistry(URL url)", "class_method_signature": "UrlUtils.isRegistry(URL url)", "testcase": false, "constructor": false}, {"identifier": "isServiceDiscoveryRegistryType", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceDiscoveryRegistryType(URL url)", "full_signature": "public static boolean isServiceDiscoveryRegistryType(URL url)", "class_method_signature": "UrlUtils.isServiceDiscoveryRegistryType(URL url)", "testcase": false, "constructor": false}, {"identifier": "isServiceDiscoveryRegistryType", "parameters": "(Map<String, String> parameters)", "modifiers": "public static", "return": "boolean", "signature": "boolean isServiceDiscoveryRegistryType(Map<String, String> parameters)", "full_signature": "public static boolean isServiceDiscoveryRegistryType(Map<String, String> parameters)", "class_method_signature": "UrlUtils.isServiceDiscoveryRegistryType(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "isItemMatch", "parameters": "(String pattern, String value)", "modifiers": "static", "return": "boolean", "signature": "boolean isItemMatch(String pattern, String value)", "full_signature": "static boolean isItemMatch(String pattern, String value)", "class_method_signature": "UrlUtils.isItemMatch(String pattern, String value)", "testcase": false, "constructor": false}, {"identifier": "parseServiceKey", "parameters": "(String serviceKey)", "modifiers": "public static", "return": "String[]", "signature": "String[] parseServiceKey(String serviceKey)", "full_signature": "public static String[] parseServiceKey(String serviceKey)", "class_method_signature": "UrlUtils.parseServiceKey(String serviceKey)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/UrlUtils.java"}, "focal_method": {"identifier": "convertRegister", "parameters": "(Map<String, Map<String, String>> register)", "modifiers": "public static", "return": "Map<String, Map<String, String>>", "body": "public static Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register) {\n        Map<String, Map<String, String>> newRegister = new HashMap<String, Map<String, String>>();\n        for (Map.Entry<String, Map<String, String>> entry : register.entrySet()) {\n            String serviceName = entry.getKey();\n            Map<String, String> serviceUrls = entry.getValue();\n            if (StringUtils.isNotContains(serviceName, ':') && StringUtils.isNotContains(serviceName, '/')) {\n                for (Map.Entry<String, String> entry2 : serviceUrls.entrySet()) {\n                    String serviceUrl = entry2.getKey();\n                    String serviceQuery = entry2.getValue();\n                    Map<String, String> params = StringUtils.parseQueryString(serviceQuery);\n                    String group = params.get(\"group\");\n                    String version = params.get(\"version\");\n                    //params.remove(\"group\");\n                    //params.remove(\"version\");\n                    String name = serviceName;\n                    if (group != null && group.length() > 0) {\n                        name = group + \"/\" + name;\n                    }\n                    if (version != null && version.length() > 0) {\n                        name = name + \":\" + version;\n                    }\n                    Map<String, String> newUrls = newRegister.get(name);\n                    if (newUrls == null) {\n                        newUrls = new HashMap<String, String>();\n                        newRegister.put(name, newUrls);\n                    }\n                    newUrls.put(serviceUrl, StringUtils.toQueryString(params));\n                }\n            } else {\n                newRegister.put(serviceName, serviceUrls);\n            }\n        }\n        return newRegister;\n    }", "signature": "Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "full_signature": "public static Map<String, Map<String, String>> convertRegister(Map<String, Map<String, String>> register)", "class_method_signature": "UrlUtils.convertRegister(Map<String, Map<String, String>> register)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "isNotContains", "isNotContains", "entrySet", "getKey", "getValue", "parseQueryString", "get", "get", "length", "length", "get", "put", "put", "toQueryString", "put"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}