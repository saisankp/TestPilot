{"test_class": {"identifier": "ReporterOutputCSVTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "assembly/compliance-tool/src/test/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/reporter/ReporterOutputCSVTest.java"}, "test_case": {"identifier": "testPrint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrint() throws IOException {\n        Path csvFilePath = temporaryFolder.newFile(\"csvFile.csv\").toPath();\n        final String delimiter = \";\";\n\n        final ReporterOutput csvReporter = ReporterOutputFactory.getReporterOutput(\"csv\");\n        csvReporter.setFilePath(csvFilePath);\n        csvReporter.setResultType(SW360SparseRelease.class);\n\n        final SW360SparseRelease sparseRelease = SW360TestUtils.mkSW3SparseRelease(\"test\");\n        csvReporter.print(Collections.singleton(sparseRelease));\n\n        assertThat(csvFilePath).exists();\n        final CSVParser csvParser = SW360TestUtils.getCsvParser(csvFilePath.toFile(), ';');\n        final List<CSVRecord> records = csvParser.getRecords();\n        assertThat(records).hasSize(1);\n        assertThat(records.get(0).size()).isEqualTo(ReporterUtils.sparseReleaseCsvPrintHeader(delimiter).split(delimiter).length);\n    }", "signature": "void testPrint()", "full_signature": "@Test public void testPrint()", "class_method_signature": "ReporterOutputCSVTest.testPrint()", "testcase": true, "constructor": false, "invocations": ["toPath", "newFile", "getReporterOutput", "setFilePath", "setResultType", "mkSW3SparseRelease", "print", "singleton", "exists", "assertThat", "getCsvParser", "toFile", "getRecords", "hasSize", "assertThat", "isEqualTo", "assertThat", "size", "get", "split", "sparseReleaseCsvPrintHeader"]}, "focal_class": {"identifier": "ReporterOutputCSV", "superclass": "", "interfaces": "implements ReporterOutput", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ReporterOutputCSV.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ReporterOutputCSV.class)", "var_name": "LOGGER"}, {"original_string": "private static final String DEFAULT_DELIMITER = \";\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_DELIMITER = \";\"", "var_name": "DEFAULT_DELIMITER"}, {"original_string": "private Class<?> resultType;", "modifier": "private", "type": "Class<?>", "declarator": "resultType", "var_name": "resultType"}, {"original_string": "private Path filePath;", "modifier": "private", "type": "Path", "declarator": "filePath", "var_name": "filePath"}, {"original_string": "private String delimiter = DEFAULT_DELIMITER;", "modifier": "private", "type": "String", "declarator": "delimiter = DEFAULT_DELIMITER", "var_name": "delimiter"}], "methods": [{"identifier": "setResultType", "parameters": "(Class type)", "modifiers": "@Override public", "return": "void", "signature": "void setResultType(Class type)", "full_signature": "@Override public void setResultType(Class type)", "class_method_signature": "ReporterOutputCSV.setResultType(Class type)", "testcase": false, "constructor": false}, {"identifier": "setFilePath", "parameters": "(Path filePath)", "modifiers": "@Override public", "return": "void", "signature": "void setFilePath(Path filePath)", "full_signature": "@Override public void setFilePath(Path filePath)", "class_method_signature": "ReporterOutputCSV.setFilePath(Path filePath)", "testcase": false, "constructor": false}, {"identifier": "setDelimiter", "parameters": "(String delimiter)", "modifiers": "public", "return": "ReporterOutputCSV", "signature": "ReporterOutputCSV setDelimiter(String delimiter)", "full_signature": "public ReporterOutputCSV setDelimiter(String delimiter)", "class_method_signature": "ReporterOutputCSV.setDelimiter(String delimiter)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(Collection<T> result)", "modifiers": "@Override public", "return": "void", "signature": "void print(Collection<T> result)", "full_signature": "@Override public void print(Collection<T> result)", "class_method_signature": "ReporterOutputCSV.print(Collection<T> result)", "testcase": false, "constructor": false}, {"identifier": "setBody", "parameters": "(Collection<T> result)", "modifiers": "private", "return": "String[][]", "signature": "String[][] setBody(Collection<T> result)", "full_signature": "private String[][] setBody(Collection<T> result)", "class_method_signature": "ReporterOutputCSV.setBody(Collection<T> result)", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getHeader()", "full_signature": "private String getHeader()", "class_method_signature": "ReporterOutputCSV.getHeader()", "testcase": false, "constructor": false}, {"identifier": "printCsvFile", "parameters": "(String header, String[][] body)", "modifiers": "private", "return": "void", "signature": "void printCsvFile(String header, String[][] body)", "full_signature": "private void printCsvFile(String header, String[][] body)", "class_method_signature": "ReporterOutputCSV.printCsvFile(String header, String[][] body)", "testcase": false, "constructor": false}], "file": "assembly/compliance-tool/src/main/java/org/eclipse/sw360/antenna/frontend/compliancetool/sw360/reporter/ReporterOutputCSV.java"}, "focal_method": {"identifier": "print", "parameters": "(Collection<T> result)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public <T> void print(Collection<T> result) {\n        String header = getHeader();\n        String[][] body = setBody(result);\n\n        printCsvFile(header, body);\n    }", "signature": "void print(Collection<T> result)", "full_signature": "@Override public void print(Collection<T> result)", "class_method_signature": "ReporterOutputCSV.print(Collection<T> result)", "testcase": false, "constructor": false, "invocations": ["getHeader", "setBody", "printCsvFile"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}