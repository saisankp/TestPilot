{"test_class": {"identifier": "EcdsaVerifyKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EcdsaSignKeyManager signManager = new EcdsaSignKeyManager();", "modifier": "private final", "type": "EcdsaSignKeyManager", "declarator": "signManager = new EcdsaSignKeyManager()", "var_name": "signManager"}, {"original_string": "private final EcdsaVerifyKeyManager verifyManager = new EcdsaVerifyKeyManager();", "modifier": "private final", "type": "EcdsaVerifyKeyManager", "declarator": "verifyManager = new EcdsaVerifyKeyManager()", "var_name": "verifyManager"}, {"original_string": "private final KeyTypeManager.KeyFactory<EcdsaKeyFormat, EcdsaPrivateKey> factory =\n      signManager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<EcdsaKeyFormat, EcdsaPrivateKey>", "declarator": "factory =\n      signManager.keyFactory()", "var_name": "factory"}, {"original_string": "final RfcTestVector[] rfcTestVectors = {\n    new RfcTestVector(\n        \"sample\",\n        \"60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6\",\n        \"7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299\",\n        \"EFD48B2AACB6A8FD1140DD9CD45E81D69D2C877B56AAF991C34D0EA84EAF3716\",\n        \"F7CB1C942D657C41D436C7A1B6E29F65F3E900DBB9AFF4064DC4AB2F843ACDA8\",\n        HashType.SHA256,\n        EllipticCurveType.NIST_P256),\n    new RfcTestVector(\n        \"sample\",\n        \"EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64\"\n            + \"DEF8F0EA9055866064A254515480BC13\",\n        \"8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1\"\n            + \"288B231C3AE0D4FE7344FD2533264720\",\n        \"ED0959D5880AB2D869AE7F6C2915C6D60F96507F9CB3E047C0046861DA4A799C\"\n            + \"FE30F35CC900056D7C99CD7882433709\",\n        \"512C8CCEEE3890A84058CE1E22DBC2198F42323CE8ACA9135329F03C068E5112\"\n            + \"DC7CC3EF3446DEFCEB01A45C2667FDD5\",\n        HashType.SHA512,\n        EllipticCurveType.NIST_P384),\n    new RfcTestVector(\n        \"test\",\n        \"01894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD3\"\n            + \"71123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F502\"\n            + \"3A4\",\n        \"00493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A2\"\n            + \"8A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDF\"\n            + \"CF5\",\n        \"013E99020ABF5CEE7525D16B69B229652AB6BDF2AFFCAEF38773B4B7D08725F10\"\n            + \"CDB93482FDCC54EDCEE91ECA4166B2A7C6265EF0CE2BD7051B7CEF945BABD47E\"\n            + \"E6D\",\n        \"01FBD0013C674AA79CB39849527916CE301C66EA7CE8B80682786AD60F98F7E78\"\n            + \"A19CA69EFF5C57400E3B3A0AD66CE0978214D13BAF4E9AC60752F7B155E2DE4D\"\n            + \"CE3\",\n        HashType.SHA512,\n        EllipticCurveType.NIST_P521),\n  };", "modifier": "final", "type": "RfcTestVector[]", "declarator": "rfcTestVectors = {\n    new RfcTestVector(\n        \"sample\",\n        \"60FED4BA255A9D31C961EB74C6356D68C049B8923B61FA6CE669622E60F29FB6\",\n        \"7903FE1008B8BC99A41AE9E95628BC64F2F1B20C2D7E9F5177A3C294D4462299\",\n        \"EFD48B2AACB6A8FD1140DD9CD45E81D69D2C877B56AAF991C34D0EA84EAF3716\",\n        \"F7CB1C942D657C41D436C7A1B6E29F65F3E900DBB9AFF4064DC4AB2F843ACDA8\",\n        HashType.SHA256,\n        EllipticCurveType.NIST_P256),\n    new RfcTestVector(\n        \"sample\",\n        \"EC3A4E415B4E19A4568618029F427FA5DA9A8BC4AE92E02E06AAE5286B300C64\"\n            + \"DEF8F0EA9055866064A254515480BC13\",\n        \"8015D9B72D7D57244EA8EF9AC0C621896708A59367F9DFB9F54CA84B3F1C9DB1\"\n            + \"288B231C3AE0D4FE7344FD2533264720\",\n        \"ED0959D5880AB2D869AE7F6C2915C6D60F96507F9CB3E047C0046861DA4A799C\"\n            + \"FE30F35CC900056D7C99CD7882433709\",\n        \"512C8CCEEE3890A84058CE1E22DBC2198F42323CE8ACA9135329F03C068E5112\"\n            + \"DC7CC3EF3446DEFCEB01A45C2667FDD5\",\n        HashType.SHA512,\n        EllipticCurveType.NIST_P384),\n    new RfcTestVector(\n        \"test\",\n        \"01894550D0785932E00EAA23B694F213F8C3121F86DC97A04E5A7167DB4E5BCD3\"\n            + \"71123D46E45DB6B5D5370A7F20FB633155D38FFA16D2BD761DCAC474B9A2F502\"\n            + \"3A4\",\n        \"00493101C962CD4D2FDDF782285E64584139C2F91B47F87FF82354D6630F746A2\"\n            + \"8A0DB25741B5B34A828008B22ACC23F924FAAFBD4D33F81EA66956DFEAA2BFDF\"\n            + \"CF5\",\n        \"013E99020ABF5CEE7525D16B69B229652AB6BDF2AFFCAEF38773B4B7D08725F10\"\n            + \"CDB93482FDCC54EDCEE91ECA4166B2A7C6265EF0CE2BD7051B7CEF945BABD47E\"\n            + \"E6D\",\n        \"01FBD0013C674AA79CB39849527916CE301C66EA7CE8B80682786AD60F98F7E78\"\n            + \"A19CA69EFF5C57400E3B3A0AD66CE0978214D13BAF4E9AC60752F7B155E2DE4D\"\n            + \"CE3\",\n        HashType.SHA512,\n        EllipticCurveType.NIST_P521),\n  }", "var_name": "rfcTestVectors"}], "file": "java_src/src/test/java/com/google/crypto/tink/signature/EcdsaVerifyKeyManagerTest.java"}, "test_case": {"identifier": "validateKey_wrongVersion_throws", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validateKey_wrongVersion_throws() throws Exception {\n    EcdsaPublicKey wrongVersionKey =\n        EcdsaPublicKey.newBuilder(validPublicKey()).setVersion(1).build();\n    try {\n      verifyManager.validateKey(wrongVersionKey);\n      fail();\n    } catch (GeneralSecurityException e) {\n      // expected.\n    }\n  }", "signature": "void validateKey_wrongVersion_throws()", "full_signature": "@Test public void validateKey_wrongVersion_throws()", "class_method_signature": "EcdsaVerifyKeyManagerTest.validateKey_wrongVersion_throws()", "testcase": true, "constructor": false, "invocations": ["build", "setVersion", "newBuilder", "validPublicKey", "validateKey", "fail"]}, "focal_class": {"identifier": "EcdsaVerifyKeyManager", "superclass": "extends KeyTypeManager<EcdsaPublicKey>", "interfaces": "", "fields": [], "methods": [{"identifier": "EcdsaVerifyKeyManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " EcdsaVerifyKeyManager()", "full_signature": "public  EcdsaVerifyKeyManager()", "class_method_signature": "EcdsaVerifyKeyManager.EcdsaVerifyKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "EcdsaVerifyKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "EcdsaVerifyKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "EcdsaVerifyKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "EcdsaPublicKey", "signature": "EcdsaPublicKey parseKey(ByteString byteString)", "full_signature": "@Override public EcdsaPublicKey parseKey(ByteString byteString)", "class_method_signature": "EcdsaVerifyKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(EcdsaPublicKey pubKey)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(EcdsaPublicKey pubKey)", "full_signature": "@Override public void validateKey(EcdsaPublicKey pubKey)", "class_method_signature": "EcdsaVerifyKeyManager.validateKey(EcdsaPublicKey pubKey)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/signature/EcdsaVerifyKeyManager.java"}, "focal_method": {"identifier": "validateKey", "parameters": "(EcdsaPublicKey pubKey)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void validateKey(EcdsaPublicKey pubKey) throws GeneralSecurityException {\n    Validators.validateVersion(pubKey.getVersion(), getVersion());\n    SigUtil.validateEcdsaParams(pubKey.getParams());\n  }", "signature": "void validateKey(EcdsaPublicKey pubKey)", "full_signature": "@Override public void validateKey(EcdsaPublicKey pubKey)", "class_method_signature": "EcdsaVerifyKeyManager.validateKey(EcdsaPublicKey pubKey)", "testcase": false, "constructor": false, "invocations": ["validateVersion", "getVersion", "getVersion", "validateEcdsaParams", "getParams"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}