{"test_class": {"identifier": "SchemaValueConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/hortonworks/streamline/common/SchemaValueConverterTest.java"}, "test_case": {"identifier": "convertMapValueDoesNotHaveRequiredField", "parameters": "()", "modifiers": "@Test(expected = SchemaValidationFailedException.class) public", "return": "void", "body": "@Test(expected = SchemaValidationFailedException.class)\n    public void convertMapValueDoesNotHaveRequiredField() {\n        Schema schema = Schema.of(\n                Schema.Field.of(\"a\", Schema.Type.BINARY),\n                Schema.Field.of(\"b\", Schema.Type.STRING),\n                Schema.Field.of(\"c\", Schema.Type.ARRAY));\n\n        Map<String, Object> value = new HashMap<>();\n        value.put(\"a\", new byte[] { 0x01, 0x02 });\n        value.put(\"c\", Collections.singletonList(\"hello\"));\n\n        SchemaValueConverter.convertMap(schema, value);\n    }", "signature": "void convertMapValueDoesNotHaveRequiredField()", "full_signature": "@Test(expected = SchemaValidationFailedException.class) public void convertMapValueDoesNotHaveRequiredField()", "class_method_signature": "SchemaValueConverterTest.convertMapValueDoesNotHaveRequiredField()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "put", "put", "singletonList", "convertMap"]}, "focal_class": {"identifier": "SchemaValueConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "SchemaValueConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " SchemaValueConverter()", "full_signature": "private  SchemaValueConverter()", "class_method_signature": "SchemaValueConverter.SchemaValueConverter()", "testcase": false, "constructor": true}, {"identifier": "convertMap", "parameters": "(Schema schema, Map<String, Object> value)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> convertMap(Schema schema, Map<String, Object> value)", "full_signature": "public static Map<String, Object> convertMap(Schema schema, Map<String, Object> value)", "class_method_signature": "SchemaValueConverter.convertMap(Schema schema, Map<String, Object> value)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Schema.Type type, Object value)", "modifiers": "public static", "return": "Object", "signature": "Object convert(Schema.Type type, Object value)", "full_signature": "public static Object convert(Schema.Type type, Object value)", "class_method_signature": "SchemaValueConverter.convert(Schema.Type type, Object value)", "testcase": false, "constructor": false}, {"identifier": "convertNumber", "parameters": "(com.hortonworks.registries.common.Schema.Type type, Object value)", "modifiers": "private static", "return": "Object", "signature": "Object convertNumber(com.hortonworks.registries.common.Schema.Type type, Object value)", "full_signature": "private static Object convertNumber(com.hortonworks.registries.common.Schema.Type type, Object value)", "class_method_signature": "SchemaValueConverter.convertNumber(com.hortonworks.registries.common.Schema.Type type, Object value)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/hortonworks/streamline/common/SchemaValueConverter.java"}, "focal_method": {"identifier": "convertMap", "parameters": "(Schema schema, Map<String, Object> value)", "modifiers": "public static", "return": "Map<String, Object>", "body": "public static Map<String, Object> convertMap(Schema schema, Map<String, Object> value) {\n        Map<String, Schema.Type> fieldToType = schema.getFields().stream()\n                .collect(toMap(Schema.Field::getName, Schema.Field::getType));\n\n        List<Schema.Field> requiredFields = schema.getFields().stream()\n                .filter(field -> !field.isOptional()).collect(toList());\n\n        List<String> fieldsNotFoundInSchema = value.keySet().stream()\n                .filter(f -> !(fieldToType.containsKey(f))).collect(toList());\n\n        List<Schema.Field> requiredFieldsNotFoundInValue = requiredFields.stream()\n                .filter(f -> !(value.containsKey(f.getName()))).collect(toList());\n\n        if (!fieldsNotFoundInSchema.isEmpty()) {\n            throw SchemaValidationFailedException.fieldsNotFoundInSchema(fieldsNotFoundInSchema);\n        }\n\n        if (!requiredFieldsNotFoundInValue.isEmpty()) {\n            throw SchemaValidationFailedException.requiredFieldsNotFoundInValue(\n                    requiredFieldsNotFoundInValue.stream().map(Schema.Field::getName).collect(toList()));\n        }\n\n        Map<String, Object> result = new HashMap<>();\n        value.forEach((k, v) -> {\n            if (v == null) {\n                throw SchemaValidationFailedException.nullValueForField(k);\n            }\n            result.put(k, convert(fieldToType.get(k), v));\n        });\n        return result;\n    }", "signature": "Map<String, Object> convertMap(Schema schema, Map<String, Object> value)", "full_signature": "public static Map<String, Object> convertMap(Schema schema, Map<String, Object> value)", "class_method_signature": "SchemaValueConverter.convertMap(Schema schema, Map<String, Object> value)", "testcase": false, "constructor": false, "invocations": ["collect", "stream", "getFields", "toMap", "collect", "filter", "stream", "getFields", "isOptional", "toList", "collect", "filter", "stream", "keySet", "containsKey", "toList", "collect", "filter", "stream", "containsKey", "getName", "toList", "isEmpty", "fieldsNotFoundInSchema", "isEmpty", "requiredFieldsNotFoundInValue", "collect", "map", "stream", "toList", "forEach", "nullValueForField", "put", "convert", "get"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}