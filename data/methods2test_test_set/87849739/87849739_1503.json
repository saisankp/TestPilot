{"test_class": {"identifier": "HeaderValueValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HEADER_KEY = \"header-key\";", "modifier": "private static final", "type": "String", "declarator": "HEADER_KEY = \"header-key\"", "var_name": "HEADER_KEY"}, {"original_string": "@Mock\n    private HeaderDefinition headerDefinition;", "modifier": "@Mock\n    private", "type": "HeaderDefinition", "declarator": "headerDefinition", "var_name": "headerDefinition"}, {"original_string": "private HeaderValueValidator underTest;", "modifier": "private", "type": "HeaderValueValidator", "declarator": "underTest", "var_name": "underTest"}], "file": "model/base/src/test/java/org/eclipse/ditto/model/base/headers/HeaderValueValidatorTest.java"}, "test_case": {"identifier": "invalidJsonArrayStringValueNoStringItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidJsonArrayStringValueNoStringItem() {\n        Mockito.when(headerDefinition.getJavaType()).thenReturn(JsonArray.class);\n        final JsonArray jsonArray = JsonFactory.newArrayBuilder()\n                .add(\"foo\")\n                .add(2)\n                .add(\"baz\")\n                .build();\n        final String value = jsonArray.toString();\n\n        assertThatExceptionOfType(DittoHeaderInvalidException.class)\n                .isThrownBy(() -> underTest.accept(headerDefinition, value))\n                .withMessage(\"JSON array for <%s> contained non-string values!\", HEADER_KEY)\n                .withNoCause();\n    }", "signature": "void invalidJsonArrayStringValueNoStringItem()", "full_signature": "@Test public void invalidJsonArrayStringValueNoStringItem()", "class_method_signature": "HeaderValueValidatorTest.invalidJsonArrayStringValueNoStringItem()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getJavaType", "build", "add", "add", "add", "newArrayBuilder", "toString", "withNoCause", "withMessage", "isThrownBy", "assertThatExceptionOfType", "accept"]}, "focal_class": {"identifier": "HeaderValueValidator", "superclass": "", "interfaces": "implements BiConsumer<HeaderDefinition, CharSequence>", "fields": [{"original_string": "private static final HeaderValueValidator INSTANCE = new HeaderValueValidator();", "modifier": "private static final", "type": "HeaderValueValidator", "declarator": "INSTANCE = new HeaderValueValidator()", "var_name": "INSTANCE"}], "methods": [{"identifier": "HeaderValueValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " HeaderValueValidator()", "full_signature": "private  HeaderValueValidator()", "class_method_signature": "HeaderValueValidator.HeaderValueValidator()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "HeaderValueValidator", "signature": "HeaderValueValidator getInstance()", "full_signature": "public static HeaderValueValidator getInstance()", "class_method_signature": "HeaderValueValidator.getInstance()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "modifiers": "@Override public", "return": "void", "signature": "void accept(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "full_signature": "@Override public void accept(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "class_method_signature": "HeaderValueValidator.accept(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "testcase": false, "constructor": false}], "file": "model/base/src/main/java/org/eclipse/ditto/model/base/headers/HeaderValueValidator.java"}, "focal_method": {"identifier": "accept", "parameters": "(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void accept(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence) {\n        final ValueValidator validatorChain = HeaderValueValidators.getIntValidator()\n                .andThen(HeaderValueValidators.getLongValidator())\n                .andThen(HeaderValueValidators.getBooleanValidator())\n                .andThen(HeaderValueValidators.getJsonArrayValidator())\n                .andThen(HeaderValueValidators.getEntityTagValidator())\n                .andThen(HeaderValueValidators.getEntityTagMatchersValidator());\n\n        validatorChain.accept(definition, charSequence);\n    }", "signature": "void accept(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "full_signature": "@Override public void accept(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "class_method_signature": "HeaderValueValidator.accept(@Nonnull final HeaderDefinition definition, @Nullable final CharSequence charSequence)", "testcase": false, "constructor": false, "invocations": ["andThen", "andThen", "andThen", "andThen", "andThen", "getIntValidator", "getLongValidator", "getBooleanValidator", "getJsonArrayValidator", "getEntityTagValidator", "getEntityTagMatchersValidator", "accept"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}