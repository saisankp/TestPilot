{"test_class": {"identifier": "TestOpenedValueStoreImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BigInteger open = BigInteger.ZERO;", "modifier": "private final", "type": "BigInteger", "declarator": "open = BigInteger.ZERO", "var_name": "open"}, {"original_string": "private final BigInteger authenticated = BigInteger.ONE;", "modifier": "private final", "type": "BigInteger", "declarator": "authenticated = BigInteger.ONE", "var_name": "authenticated"}], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestOpenedValueStoreImpl.java"}, "test_case": {"identifier": "testPushOpenedValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPushOpenedValues() {\n    OpenedValueStore<BigInteger, BigInteger> store = new OpenedValueStoreImpl<>();\n    store.pushOpenedValue(authenticated, open);\n    Assert.assertTrue(\"Store expected to have pending values\", store.hasPendingValues());\n    Assert.assertTrue(store.exceedsThreshold(0));\n    Assert.assertFalse(store.exceedsThreshold(1));\n  }", "signature": "void testPushOpenedValues()", "full_signature": "@Test public void testPushOpenedValues()", "class_method_signature": "TestOpenedValueStoreImpl.testPushOpenedValues()", "testcase": true, "constructor": false, "invocations": ["pushOpenedValue", "assertTrue", "hasPendingValues", "assertTrue", "exceedsThreshold", "assertFalse", "exceedsThreshold"]}, "focal_class": {"identifier": "OpenedValueStoreImpl", "superclass": "", "interfaces": "implements OpenedValueStore<AuthT, OpenT>", "fields": [{"original_string": "private List<AuthT> sharesWithMacs;", "modifier": "private", "type": "List<AuthT>", "declarator": "sharesWithMacs", "var_name": "sharesWithMacs"}, {"original_string": "private List<OpenT> openValues;", "modifier": "private", "type": "List<OpenT>", "declarator": "openValues", "var_name": "openValues"}], "methods": [{"identifier": "OpenedValueStoreImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " OpenedValueStoreImpl()", "full_signature": "public  OpenedValueStoreImpl()", "class_method_signature": "OpenedValueStoreImpl.OpenedValueStoreImpl()", "testcase": false, "constructor": true}, {"identifier": "pushOpenedValues", "parameters": "(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "modifiers": "@Override public", "return": "void", "signature": "void pushOpenedValues(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "full_signature": "@Override public void pushOpenedValues(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "class_method_signature": "OpenedValueStoreImpl.pushOpenedValues(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "testcase": false, "constructor": false}, {"identifier": "pushOpenedValue", "parameters": "(AuthT newShareWithMac, OpenT newOpenedValue)", "modifiers": "@Override public", "return": "void", "signature": "void pushOpenedValue(AuthT newShareWithMac, OpenT newOpenedValue)", "full_signature": "@Override public void pushOpenedValue(AuthT newShareWithMac, OpenT newOpenedValue)", "class_method_signature": "OpenedValueStoreImpl.pushOpenedValue(AuthT newShareWithMac, OpenT newOpenedValue)", "testcase": false, "constructor": false}, {"identifier": "popValues", "parameters": "()", "modifiers": "@Override public", "return": "Pair<List<AuthT>, List<OpenT>>", "signature": "Pair<List<AuthT>, List<OpenT>> popValues()", "full_signature": "@Override public Pair<List<AuthT>, List<OpenT>> popValues()", "class_method_signature": "OpenedValueStoreImpl.popValues()", "testcase": false, "constructor": false}, {"identifier": "hasPendingValues", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPendingValues()", "full_signature": "@Override public boolean hasPendingValues()", "class_method_signature": "OpenedValueStoreImpl.hasPendingValues()", "testcase": false, "constructor": false}, {"identifier": "exceedsThreshold", "parameters": "(int threshold)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exceedsThreshold(int threshold)", "full_signature": "@Override public boolean exceedsThreshold(int threshold)", "class_method_signature": "OpenedValueStoreImpl.exceedsThreshold(int threshold)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/OpenedValueStoreImpl.java"}, "focal_method": {"identifier": "pushOpenedValues", "parameters": "(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void pushOpenedValues(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues) {\n    sharesWithMacs.addAll(newSharesWithMacs);\n    openValues.addAll(newOpenedValues);\n  }", "signature": "void pushOpenedValues(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "full_signature": "@Override public void pushOpenedValues(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "class_method_signature": "OpenedValueStoreImpl.pushOpenedValues(List<AuthT> newSharesWithMacs, List<OpenT> newOpenedValues)", "testcase": false, "constructor": false, "invocations": ["addAll", "addAll"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}