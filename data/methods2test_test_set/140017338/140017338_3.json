{"test_class": {"identifier": "MavenInvokerRequesterTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Mock\n    private DefaultInvoker defaultInvokerMock = Mockito.mock(DefaultInvoker.class);", "modifier": "@Mock\n    private", "type": "DefaultInvoker", "declarator": "defaultInvokerMock = Mockito.mock(DefaultInvoker.class)", "var_name": "defaultInvokerMock"}, {"original_string": "@Captor\n    private\n    ArgumentCaptor<InvocationRequest> captor = ArgumentCaptor.forClass(InvocationRequest.class);", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<InvocationRequest>", "declarator": "captor = ArgumentCaptor.forClass(InvocationRequest.class)", "var_name": "captor"}, {"original_string": "private MavenInvokerRequester mir;", "modifier": "private", "type": "MavenInvokerRequester", "declarator": "mir", "var_name": "mir"}, {"original_string": "private Coordinate mavenCoordinate;", "modifier": "private", "type": "Coordinate", "declarator": "mavenCoordinate", "var_name": "mavenCoordinate"}], "file": "modules/maven/src/test/java/org/eclipse/sw360/antenna/maven/MavenInvokerRequesterTest.java"}, "test_case": {"identifier": "requestFileTestThatRequestIsComposedCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void requestFileTestThatRequestIsComposedCorrectly() throws Exception {\n        Path targetDirectory = temporaryFolder.newFolder(\"target\").toPath();\n\n        final String expectedJarBaseName = mir.getExpectedJarBaseName(mavenCoordinate, ClassifierInformation.DEFAULT_JAR);\n        File expectedJarFile = new File(targetDirectory.toFile(), expectedJarBaseName);\n\n        Mockito.when(defaultInvokerMock.execute(ArgumentMatchers.any(InvocationRequest.class)))\n                .then((Answer<InvocationResult>) invocationOnMock -> {\n                    // touch expected file\n                    new FileOutputStream(expectedJarFile).close();\n\n                    // return dummy result\n                    return getDummyInvocationResult(0);\n                });\n\n        Optional<File> resultFile = mir.requestFile(mavenCoordinate, targetDirectory, ClassifierInformation.DEFAULT_JAR);\n\n        Mockito.verify(defaultInvokerMock).execute(captor.capture());\n\n        assertThat(resultFile.get()).isEqualTo(expectedJarFile);\n        InvocationRequest invocationRequest = captor.getValue();\n        Collection<String> goals = invocationRequest.getGoals();\n\n        assertThat(goals).isNotEmpty();\n        assertThat(goals).filteredOn(s -> s.contains(mavenCoordinate.getNamespace())).hasSize(1);\n        assertThat(goals).filteredOn(s -> s.contains(mavenCoordinate.getName())).hasSize(1);\n        assertThat(goals).filteredOn(s -> s.contains(mavenCoordinate.getVersion())).hasSize(1);\n        assertThat(goals).filteredOn(s -> s.contains(targetDirectory.toString())).hasSize(1);\n    }", "signature": "void requestFileTestThatRequestIsComposedCorrectly()", "full_signature": "@Test public void requestFileTestThatRequestIsComposedCorrectly()", "class_method_signature": "MavenInvokerRequesterTest.requestFileTestThatRequestIsComposedCorrectly()", "testcase": true, "constructor": false, "invocations": ["toPath", "newFolder", "getExpectedJarBaseName", "toFile", "then", "when", "execute", "any", "close", "getDummyInvocationResult", "requestFile", "execute", "verify", "capture", "isEqualTo", "assertThat", "get", "getValue", "getGoals", "isNotEmpty", "assertThat", "hasSize", "filteredOn", "assertThat", "contains", "getNamespace", "hasSize", "filteredOn", "assertThat", "contains", "getName", "hasSize", "filteredOn", "assertThat", "contains", "getVersion", "hasSize", "filteredOn", "assertThat", "contains", "toString"]}, "focal_class": {"identifier": "MavenInvokerRequester", "superclass": "extends IArtifactRequester", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MavenInvokerRequester.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MavenInvokerRequester.class)", "var_name": "LOGGER"}, {"original_string": "public static final String POM_FILENAME = \"pom.xml\";", "modifier": "public static final", "type": "String", "declarator": "POM_FILENAME = \"pom.xml\"", "var_name": "POM_FILENAME"}, {"original_string": "private static final String MVN_ARG_GROUP_ID = \"\\\"-DgroupId=%s\\\"\";", "modifier": "private static final", "type": "String", "declarator": "MVN_ARG_GROUP_ID = \"\\\"-DgroupId=%s\\\"\"", "var_name": "MVN_ARG_GROUP_ID"}, {"original_string": "private static final String MVN_ARG_ARTIFACT_ID = \"\\\"-DartifactId=%s\\\"\";", "modifier": "private static final", "type": "String", "declarator": "MVN_ARG_ARTIFACT_ID = \"\\\"-DartifactId=%s\\\"\"", "var_name": "MVN_ARG_ARTIFACT_ID"}, {"original_string": "private static final String MVN_ARG_VERSION = \"\\\"-Dversion=%s\\\"\";", "modifier": "private static final", "type": "String", "declarator": "MVN_ARG_VERSION = \"\\\"-Dversion=%s\\\"\"", "var_name": "MVN_ARG_VERSION"}, {"original_string": "private static final String MVN_ARG_DEST = \"\\\"-Ddest=%s\\\"\";", "modifier": "private static final", "type": "String", "declarator": "MVN_ARG_DEST = \"\\\"-Ddest=%s\\\"\"", "var_name": "MVN_ARG_DEST"}, {"original_string": "private static final String MVN_ARG_CLASSIFIER = \"\\\"-Dclassifier=%s\\\"\";", "modifier": "private static final", "type": "String", "declarator": "MVN_ARG_CLASSIFIER = \"\\\"-Dclassifier=%s\\\"\"", "var_name": "MVN_ARG_CLASSIFIER"}, {"original_string": "private static final String MVN_ARG_REPOS = \"\\\"-DremoteRepositories=%s\\\"\";", "modifier": "private static final", "type": "String", "declarator": "MVN_ARG_REPOS = \"\\\"-DremoteRepositories=%s\\\"\"", "var_name": "MVN_ARG_REPOS"}, {"original_string": "private static final String MVN_DOWNLOAD_CMD = \"dependency:get --quiet\";", "modifier": "private static final", "type": "String", "declarator": "MVN_DOWNLOAD_CMD = \"dependency:get --quiet\"", "var_name": "MVN_DOWNLOAD_CMD"}, {"original_string": "private final File basedir;", "modifier": "private final", "type": "File", "declarator": "basedir", "var_name": "basedir"}, {"original_string": "private DefaultInvoker defaultInvoker;", "modifier": "private", "type": "DefaultInvoker", "declarator": "defaultInvoker", "var_name": "defaultInvoker"}, {"original_string": "private Optional<URL> sourceRepositoryUrl;", "modifier": "private", "type": "Optional<URL>", "declarator": "sourceRepositoryUrl", "var_name": "sourceRepositoryUrl"}], "methods": [{"identifier": "MavenInvokerRequester", "parameters": "(File basedir)", "modifiers": "public", "return": "", "signature": " MavenInvokerRequester(File basedir)", "full_signature": "public  MavenInvokerRequester(File basedir)", "class_method_signature": "MavenInvokerRequester.MavenInvokerRequester(File basedir)", "testcase": false, "constructor": true}, {"identifier": "MavenInvokerRequester", "parameters": "(File basedir, URL sourceRepositoryUrl)", "modifiers": "public", "return": "", "signature": " MavenInvokerRequester(File basedir, URL sourceRepositoryUrl)", "full_signature": "public  MavenInvokerRequester(File basedir, URL sourceRepositoryUrl)", "class_method_signature": "MavenInvokerRequester.MavenInvokerRequester(File basedir, URL sourceRepositoryUrl)", "testcase": false, "constructor": true}, {"identifier": "MavenInvokerRequester", "parameters": "(File basedir, DefaultInvoker defaultInvoker, Optional<URL> sourceRepositoryUrl)", "modifiers": "public", "return": "", "signature": " MavenInvokerRequester(File basedir, DefaultInvoker defaultInvoker, Optional<URL> sourceRepositoryUrl)", "full_signature": "public  MavenInvokerRequester(File basedir, DefaultInvoker defaultInvoker, Optional<URL> sourceRepositoryUrl)", "class_method_signature": "MavenInvokerRequester.MavenInvokerRequester(File basedir, DefaultInvoker defaultInvoker, Optional<URL> sourceRepositoryUrl)", "testcase": false, "constructor": true}, {"identifier": "requestFile", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "modifiers": "@Override public", "return": "Optional<File>", "signature": "Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "full_signature": "@Override public Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "class_method_signature": "MavenInvokerRequester.requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "testcase": false, "constructor": false}, {"identifier": "callMavenInvoker", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory, String classifier)", "modifiers": "private", "return": "boolean", "signature": "boolean callMavenInvoker(Coordinate mavenCoordinate, Path targetDirectory, String classifier)", "full_signature": "private boolean callMavenInvoker(Coordinate mavenCoordinate, Path targetDirectory, String classifier)", "class_method_signature": "MavenInvokerRequester.callMavenInvoker(Coordinate mavenCoordinate, Path targetDirectory, String classifier)", "testcase": false, "constructor": false}, {"identifier": "buildBasicMvnDownloadCmd", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory)", "modifiers": "private", "return": "List<String>", "signature": "List<String> buildBasicMvnDownloadCmd(Coordinate mavenCoordinate, Path targetDirectory)", "full_signature": "private List<String> buildBasicMvnDownloadCmd(Coordinate mavenCoordinate, Path targetDirectory)", "class_method_signature": "MavenInvokerRequester.buildBasicMvnDownloadCmd(Coordinate mavenCoordinate, Path targetDirectory)", "testcase": false, "constructor": false}, {"identifier": "getPomFileFromContext", "parameters": "()", "modifiers": "protected", "return": "File", "signature": "File getPomFileFromContext()", "full_signature": "protected File getPomFileFromContext()", "class_method_signature": "MavenInvokerRequester.getPomFileFromContext()", "testcase": false, "constructor": false}, {"identifier": "buildInvocationRequest", "parameters": "(List<String> mvnDownloadCmd)", "modifiers": "private", "return": "InvocationRequest", "signature": "InvocationRequest buildInvocationRequest(List<String> mvnDownloadCmd)", "full_signature": "private InvocationRequest buildInvocationRequest(List<String> mvnDownloadCmd)", "class_method_signature": "MavenInvokerRequester.buildInvocationRequest(List<String> mvnDownloadCmd)", "testcase": false, "constructor": false}, {"identifier": "getExpectedJarFile", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "modifiers": "private", "return": "File", "signature": "File getExpectedJarFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "full_signature": "private File getExpectedJarFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "class_method_signature": "MavenInvokerRequester.getExpectedJarFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "testcase": false, "constructor": false}, {"identifier": "callMavenInvocationRequest", "parameters": "(InvocationRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean callMavenInvocationRequest(InvocationRequest request)", "full_signature": "private boolean callMavenInvocationRequest(InvocationRequest request)", "class_method_signature": "MavenInvokerRequester.callMavenInvocationRequest(InvocationRequest request)", "testcase": false, "constructor": false}], "file": "modules/maven/src/main/java/org/eclipse/sw360/antenna/maven/MavenInvokerRequester.java"}, "focal_method": {"identifier": "requestFile", "parameters": "(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "modifiers": "@Override public", "return": "Optional<File>", "body": "@Override\n    public Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation) {\n\n        File expectedJarFile = getExpectedJarFile(mavenCoordinate, targetDirectory, classifierInformation);\n\n        if (expectedJarFile.exists()) {\n            LOGGER.debug(\"The file \" + expectedJarFile + \" already exists and won't be downloaded again\");\n            return Optional.of(expectedJarFile);\n        }\n\n        LOGGER.debug(\"Requesting artifact with id \" + mavenCoordinate.toString());\n        boolean requestSuccessful = callMavenInvoker(mavenCoordinate, targetDirectory, classifierInformation.classifier);\n\n        String jarType = classifierInformation.isSource ? \"sources jar\" : classifierInformation.classifier + \" jar\";\n        if (!requestSuccessful) {\n            LOGGER.warn(\"Failed to find \" + jarType + \": Artifact \" + mavenCoordinate.toString() + \" not found in repo.\");\n            return Optional.empty();\n        } else if (!expectedJarFile.exists()) {\n            LOGGER.warn(\"Failed to find \" + jarType + \": Maven call succeeded but Artifact was not generated in the expected place.\");\n            return Optional.empty();\n        }\n\n        return Optional.of(getExpectedJarFile(mavenCoordinate, targetDirectory, classifierInformation));\n    }", "signature": "Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "full_signature": "@Override public Optional<File> requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "class_method_signature": "MavenInvokerRequester.requestFile(Coordinate mavenCoordinate, Path targetDirectory, ClassifierInformation classifierInformation)", "testcase": false, "constructor": false, "invocations": ["getExpectedJarFile", "exists", "debug", "of", "debug", "toString", "callMavenInvoker", "warn", "toString", "empty", "exists", "warn", "empty", "of", "getExpectedJarFile"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}