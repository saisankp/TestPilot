{"test_class": {"identifier": "ByteBufferInputStreamTest", "superclass": "extends ZKTestCase", "interfaces": "", "fields": [{"original_string": "private static final byte[] DATA_BYTES_0 =\n        \"Apache ZooKeeper\".getBytes(Charset.forName(\"UTF-8\"));", "modifier": "private static final", "type": "byte[]", "declarator": "DATA_BYTES_0 =\n        \"Apache ZooKeeper\".getBytes(Charset.forName(\"UTF-8\"))", "var_name": "DATA_BYTES_0"}, {"original_string": "private static byte[] DATA_BYTES;", "modifier": "private static", "type": "byte[]", "declarator": "DATA_BYTES", "var_name": "DATA_BYTES"}, {"original_string": "private ByteBuffer bb;", "modifier": "private", "type": "ByteBuffer", "declarator": "bb", "var_name": "bb"}, {"original_string": "private ByteBufferInputStream in;", "modifier": "private", "type": "ByteBufferInputStream", "declarator": "in", "var_name": "in"}, {"original_string": "private byte[] bs;", "modifier": "private", "type": "byte[]", "declarator": "bs", "var_name": "bs"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/ByteBufferInputStreamTest.java"}, "test_case": {"identifier": "testReadArrayOffsetLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testReadArrayOffsetLength() throws Exception {\n        assertEquals(1, in.read(bs, 2, 1));\n        byte[] expected =\n            new byte[] { (byte) 1, (byte) 2, DATA_BYTES[0], (byte) 4 };\n        assertArrayEquals(expected, bs);\n    }", "signature": "void testReadArrayOffsetLength()", "full_signature": "@Test public void testReadArrayOffsetLength()", "class_method_signature": "ByteBufferInputStreamTest.testReadArrayOffsetLength()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "read", "assertArrayEquals"]}, "focal_class": {"identifier": "ByteBufferInputStream", "superclass": "extends InputStream", "interfaces": "", "fields": [{"original_string": "ByteBuffer bb;", "modifier": "", "type": "ByteBuffer", "declarator": "bb", "var_name": "bb"}], "methods": [{"identifier": "ByteBufferInputStream", "parameters": "(ByteBuffer bb)", "modifiers": "public", "return": "", "signature": " ByteBufferInputStream(ByteBuffer bb)", "full_signature": "public  ByteBufferInputStream(ByteBuffer bb)", "class_method_signature": "ByteBufferInputStream.ByteBufferInputStream(ByteBuffer bb)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "ByteBufferInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "available", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int available()", "full_signature": "@Override public int available()", "class_method_signature": "ByteBufferInputStream.available()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b, int off, int len)", "full_signature": "@Override public int read(byte[] b, int off, int len)", "class_method_signature": "ByteBufferInputStream.read(byte[] b, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b)", "full_signature": "@Override public int read(byte[] b)", "class_method_signature": "ByteBufferInputStream.read(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(long n)", "modifiers": "@Override public", "return": "long", "signature": "long skip(long n)", "full_signature": "@Override public long skip(long n)", "class_method_signature": "ByteBufferInputStream.skip(long n)", "testcase": false, "constructor": false}, {"identifier": "byteBuffer2Record", "parameters": "(ByteBuffer bb, Record record)", "modifiers": "static public", "return": "void", "signature": "void byteBuffer2Record(ByteBuffer bb, Record record)", "full_signature": "static public void byteBuffer2Record(ByteBuffer bb, Record record)", "class_method_signature": "ByteBufferInputStream.byteBuffer2Record(ByteBuffer bb, Record record)", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferInputStream.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int read() throws IOException {\n        if (bb.remaining() == 0) {\n            return -1;\n        }\n        return bb.get() & 0xff;\n    }", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "ByteBufferInputStream.read()", "testcase": false, "constructor": false, "invocations": ["remaining", "get"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}