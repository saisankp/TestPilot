{"test_class": {"identifier": "BinarySearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "int[] array = {-2, -1, 0, 2, 3, 4, 5, 8, 10};", "modifier": "", "type": "int[]", "declarator": "array = {-2, -1, 0, 2, 3, 4, 5, 8, 10}", "var_name": "array"}], "file": "algs/src/test/java/org/buptdavid/datastructure/search/BinarySearchTest.java"}, "test_case": {"identifier": "testSearchCirculation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSearchCirculation(){\n\t\tAssert.assertEquals(Integer.valueOf(-2), BinarySearch.searchCirculation(array, -2));\n\t\tAssert.assertEquals(Integer.valueOf(10), BinarySearch.searchCirculation(array, 10));\n\t\t\n\t\tAssert.assertEquals(Integer.valueOf(0), BinarySearch.searchCirculation(array, 0));\n\t\t\n\t\tAssert.assertEquals(null, BinarySearch.searchCirculation(array, 1));\n\t}", "signature": "void testSearchCirculation()", "full_signature": "@Test public void testSearchCirculation()", "class_method_signature": "BinarySearchTest.testSearchCirculation()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "valueOf", "searchCirculation", "assertEquals", "valueOf", "searchCirculation", "assertEquals", "valueOf", "searchCirculation", "assertEquals", "searchCirculation"]}, "focal_class": {"identifier": "BinarySearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "searchCirculation", "parameters": "(int[] array, int value)", "modifiers": "public static", "return": "Integer", "signature": "Integer searchCirculation(int[] array, int value)", "full_signature": "public static Integer searchCirculation(int[] array, int value)", "class_method_signature": "BinarySearch.searchCirculation(int[] array, int value)", "testcase": false, "constructor": false}, {"identifier": "searchRecursive", "parameters": "(int[] array, int value)", "modifiers": "public static", "return": "Integer", "signature": "Integer searchRecursive(int[] array, int value)", "full_signature": "public static Integer searchRecursive(int[] array, int value)", "class_method_signature": "BinarySearch.searchRecursive(int[] array, int value)", "testcase": false, "constructor": false}, {"identifier": "searchRecursive", "parameters": "(int[] array, int value, int low, int high)", "modifiers": "private static", "return": "Integer", "signature": "Integer searchRecursive(int[] array, int value, int low, int high)", "full_signature": "private static Integer searchRecursive(int[] array, int value, int low, int high)", "class_method_signature": "BinarySearch.searchRecursive(int[] array, int value, int low, int high)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/org/buptdavid/datastructure/search/BinarySearch.java"}, "focal_method": {"identifier": "searchCirculation", "parameters": "(int[] array, int value)", "modifiers": "public static", "return": "Integer", "body": "public static Integer searchCirculation(int[] array, int value){\n\t\tint low = 0;\n\t\tint high = array.length - 1;\n\t\tint middle;\n\t\t\n\t\twhile(low <= high){\n\t\t\tmiddle = (low + high) / 2;\n\t\t\tif(value < array[middle]){\n\t\t\t\thigh = middle - 1;\n\t\t\t}else if(value > array[middle]){\n\t\t\t\tlow = middle + 1;\n\t\t\t}else{\n\t\t\t\treturn array[middle];\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}", "signature": "Integer searchCirculation(int[] array, int value)", "full_signature": "public static Integer searchCirculation(int[] array, int value)", "class_method_signature": "BinarySearch.searchCirculation(int[] array, int value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}