{"test_class": {"identifier": "SeProxyServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SeProxyServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SeProxyServiceTest.class)", "var_name": "logger"}, {"original_string": "SeProxyService proxyService;", "modifier": "", "type": "SeProxyService", "declarator": "proxyService", "var_name": "proxyService"}, {"original_string": "AbstractPlugin plugin1 = new MockAbstractThreadedPlugin(PLUGIN_NAME_1);", "modifier": "", "type": "AbstractPlugin", "declarator": "plugin1 = new MockAbstractThreadedPlugin(PLUGIN_NAME_1)", "var_name": "plugin1"}, {"original_string": "AbstractPlugin plugin2 = new MockAbstractThreadedPlugin(PLUGIN_NAME_2);", "modifier": "", "type": "AbstractPlugin", "declarator": "plugin2 = new MockAbstractThreadedPlugin(PLUGIN_NAME_2)", "var_name": "plugin2"}, {"original_string": "@Mock PluginFactory factory1;", "modifier": "@Mock", "type": "PluginFactory", "declarator": "factory1", "var_name": "factory1"}, {"original_string": "@Mock PluginFactory factory2;", "modifier": "@Mock", "type": "PluginFactory", "declarator": "factory2", "var_name": "factory2"}, {"original_string": "static String PLUGIN_NAME_1 = \"plugin1\";", "modifier": "static", "type": "String", "declarator": "PLUGIN_NAME_1 = \"plugin1\"", "var_name": "PLUGIN_NAME_1"}, {"original_string": "static String PLUGIN_NAME_2 = \"plugin2\";", "modifier": "static", "type": "String", "declarator": "PLUGIN_NAME_2 = \"plugin2\"", "var_name": "PLUGIN_NAME_2"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/seproxy/SeProxyServiceTest.java"}, "test_case": {"identifier": "testGetVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetVersion() {\n    // test that version follows semver guidelines\n    String regex =\n        \"^([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\\\\.[0-9A-Za-z-]+)*))?(?:\\\\+[0-9A-Za-z-]+)?$\";\n    String version = SeProxyService.getInstance().getVersion();\n    logger.info(\"Version of SeProxyService {}\", version);\n    System.out.println(\"Version of SeProxyService \" + version);\n    assertTrue(version.matches(regex));\n  }", "signature": "void testGetVersion()", "full_signature": "@Test public void testGetVersion()", "class_method_signature": "SeProxyServiceTest.testGetVersion()", "testcase": true, "constructor": false, "invocations": ["getVersion", "getInstance", "info", "println", "assertTrue", "matches"]}, "focal_class": {"identifier": "SeProxyService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SeProxyService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SeProxyService.class)", "var_name": "logger"}, {"original_string": "private static final SeProxyService uniqueInstance = new SeProxyService();", "modifier": "private static final", "type": "SeProxyService", "declarator": "uniqueInstance = new SeProxyService()", "var_name": "uniqueInstance"}, {"original_string": "private final Map<String, ReaderPlugin> plugins = new ConcurrentHashMap<String, ReaderPlugin>();", "modifier": "private final", "type": "Map<String, ReaderPlugin>", "declarator": "plugins = new ConcurrentHashMap<String, ReaderPlugin>()", "var_name": "plugins"}, {"original_string": "private final Object MONITOR = new Object();", "modifier": "private final", "type": "Object", "declarator": "MONITOR = new Object()", "var_name": "MONITOR"}], "methods": [{"identifier": "SeProxyService", "parameters": "()", "modifiers": "private", "return": "", "signature": " SeProxyService()", "full_signature": "private  SeProxyService()", "class_method_signature": "SeProxyService.SeProxyService()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "SeProxyService", "signature": "SeProxyService getInstance()", "full_signature": "public static SeProxyService getInstance()", "class_method_signature": "SeProxyService.getInstance()", "testcase": false, "constructor": false}, {"identifier": "registerPlugin", "parameters": "(PluginFactory pluginFactory)", "modifiers": "public", "return": "ReaderPlugin", "signature": "ReaderPlugin registerPlugin(PluginFactory pluginFactory)", "full_signature": "public ReaderPlugin registerPlugin(PluginFactory pluginFactory)", "class_method_signature": "SeProxyService.registerPlugin(PluginFactory pluginFactory)", "testcase": false, "constructor": false}, {"identifier": "unregisterPlugin", "parameters": "(String pluginName)", "modifiers": "public", "return": "boolean", "signature": "boolean unregisterPlugin(String pluginName)", "full_signature": "public boolean unregisterPlugin(String pluginName)", "class_method_signature": "SeProxyService.unregisterPlugin(String pluginName)", "testcase": false, "constructor": false}, {"identifier": "isRegistered", "parameters": "(String pluginName)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isRegistered(String pluginName)", "full_signature": "public synchronized boolean isRegistered(String pluginName)", "class_method_signature": "SeProxyService.isRegistered(String pluginName)", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "()", "modifiers": "public synchronized", "return": "Map<String, ReaderPlugin>", "signature": "Map<String, ReaderPlugin> getPlugins()", "full_signature": "public synchronized Map<String, ReaderPlugin> getPlugins()", "class_method_signature": "SeProxyService.getPlugins()", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(String name)", "modifiers": "public synchronized", "return": "ReaderPlugin", "signature": "ReaderPlugin getPlugin(String name)", "full_signature": "public synchronized ReaderPlugin getPlugin(String name)", "class_method_signature": "SeProxyService.getPlugin(String name)", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "SeProxyService.getVersion()", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/seproxy/SeProxyService.java"}, "focal_method": {"identifier": "getVersion", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getVersion() {\n    try {\n      // load keyple core property file\n      InputStream propertiesIs =\n          Thread.currentThread()\n              .getContextClassLoader()\n              .getResourceAsStream(\"META-INF/keyple-core.properties\");\n      Properties prop = new Properties();\n      prop.load(propertiesIs);\n      String version = prop.getProperty(\"version\");\n      if (version != null) {\n        return version;\n      }\n      propertiesIs.close();\n    } catch (IOException e) {\n      logger.error(\"Keyple core properties file not found in META_INF\");\n    }\n\n    return \"no-version-found\";\n  }", "signature": "String getVersion()", "full_signature": "public String getVersion()", "class_method_signature": "SeProxyService.getVersion()", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "getContextClassLoader", "currentThread", "load", "getProperty", "close", "error"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}