{"test_class": {"identifier": "TableFieldMappingResourceTest", "superclass": "extends FoxtrotResourceTest", "interfaces": "", "fields": [{"original_string": "private final FoxtrotTableManager tableManager;", "modifier": "private final", "type": "FoxtrotTableManager", "declarator": "tableManager", "var_name": "tableManager"}, {"original_string": "@Rule\n    public ResourceTestRule resources;", "modifier": "@Rule\n    public", "type": "ResourceTestRule", "declarator": "resources", "var_name": "resources"}], "file": "foxtrot-server/src/test/java/com/flipkart/foxtrot/server/resources/TableFieldMappingResourceTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Ignore @Test public", "return": "void", "body": "@Ignore\n    @Test\n    public void testGet() throws Exception {\n        getQueryStore().save(TestUtils.TEST_TABLE_NAME, TestUtils.getMappingDocuments(getMapper()));\n        await().pollDelay(500, TimeUnit.MILLISECONDS).until(() -> true);\n\n        Set<FieldMetadata> mappings = new HashSet<>();\n        mappings.add(FieldMetadata.builder()\n                             .field(\"time\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"word\")\n                             .type(FieldType.STRING)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"data.data\")\n                             .type(FieldType.STRING)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"header.hello\")\n                             .type(FieldType.STRING)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"head.hello\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"date.dayOfWeek\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"date.minuteOfDay\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"date.monthOfYear\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"date.hourOfDay\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"date.year\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"date.dayOfMonth\")\n                             .type(FieldType.LONG)\n                             .build());\n        mappings.add(FieldMetadata.builder()\n                             .field(\"date.minuteOfHour\")\n                             .type(FieldType.LONG)\n                             .build());\n\n        TableFieldMapping tableFieldMapping = new TableFieldMapping(TestUtils.TEST_TABLE_NAME, mappings);\n        String response = resources.client()\n                .target(String.format(\"/v1/tables/%s/fields\", TestUtils.TEST_TABLE_NAME))\n                .request()\n                .get(String.class);\n\n        TableFieldMapping mapping = getMapper().readValue(response, TableFieldMapping.class);\n        assertEquals(tableFieldMapping.getTable(), mapping.getTable());\n        assertTrue(tableFieldMapping.getMappings()\n                           .equals(mapping.getMappings()));\n    }", "signature": "void testGet()", "full_signature": "@Ignore @Test public void testGet()", "class_method_signature": "TableFieldMappingResourceTest.testGet()", "testcase": true, "constructor": false, "invocations": ["save", "getQueryStore", "getMappingDocuments", "getMapper", "until", "pollDelay", "await", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "add", "build", "type", "field", "builder", "get", "request", "target", "client", "format", "readValue", "getMapper", "assertEquals", "getTable", "getTable", "assertTrue", "equals", "getMappings", "getMappings"]}, "focal_class": {"identifier": "TableFieldMappingResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TableManager tableManager;", "modifier": "private final", "type": "TableManager", "declarator": "tableManager", "var_name": "tableManager"}, {"original_string": "private final TableMetadataManager tableMetadataManager;", "modifier": "private final", "type": "TableMetadataManager", "declarator": "tableMetadataManager", "var_name": "tableMetadataManager"}], "methods": [{"identifier": "TableFieldMappingResource", "parameters": "(TableManager tableManager, TableMetadataManager tableMetadataManager)", "modifiers": "@Inject public", "return": "", "signature": " TableFieldMappingResource(TableManager tableManager, TableMetadataManager tableMetadataManager)", "full_signature": "@Inject public  TableFieldMappingResource(TableManager tableManager, TableMetadataManager tableMetadataManager)", "class_method_signature": "TableFieldMappingResource.TableFieldMappingResource(TableManager tableManager, TableMetadataManager tableMetadataManager)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "modifiers": "@GET @Timed @Path(\"/{name}/fields\") @ApiOperation(\"Get fields\") public", "return": "Response", "signature": "Response get(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "full_signature": "@GET @Timed @Path(\"/{name}/fields\") @ApiOperation(\"Get fields\") public Response get(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "class_method_signature": "TableFieldMappingResource.get(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "(@QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                                 @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "modifiers": "@GET @Timed @Path(\"/fields\") @ApiOperation(\"Get all Fields\") public", "return": "Response", "signature": "Response getAllFields(@QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                                 @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "full_signature": "@GET @Timed @Path(\"/fields\") @ApiOperation(\"Get all Fields\") public Response getAllFields(@QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                                 @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "class_method_signature": "TableFieldMappingResource.getAllFields(@QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                                 @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "testcase": false, "constructor": false}, {"identifier": "updateEstimation", "parameters": "(@PathParam(\"name\") final String table, @QueryParam(\"time\") @DefaultValue(\"0\") long epoch)", "modifiers": "@POST @Timed @Path(\"/{name}/fields/update\") @ApiOperation(\"Update Fields\") public", "return": "Response", "signature": "Response updateEstimation(@PathParam(\"name\") final String table, @QueryParam(\"time\") @DefaultValue(\"0\") long epoch)", "full_signature": "@POST @Timed @Path(\"/{name}/fields/update\") @ApiOperation(\"Update Fields\") public Response updateEstimation(@PathParam(\"name\") final String table, @QueryParam(\"time\") @DefaultValue(\"0\") long epoch)", "class_method_signature": "TableFieldMappingResource.updateEstimation(@PathParam(\"name\") final String table, @QueryParam(\"time\") @DefaultValue(\"0\") long epoch)", "testcase": false, "constructor": false}], "file": "foxtrot-server/src/main/java/com/flipkart/foxtrot/server/resources/TableFieldMappingResource.java"}, "focal_method": {"identifier": "get", "parameters": "(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "modifiers": "@GET @Timed @Path(\"/{name}/fields\") @ApiOperation(\"Get fields\") public", "return": "Response", "body": "@GET\n    @Timed\n    @Path(\"/{name}/fields\")\n    @ApiOperation(\"Get fields\")\n    public Response get(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality) {\n        return Response.ok(tableMetadataManager.getFieldMappings(table, withCardinality, calculateCardinality))\n                .build();\n    }", "signature": "Response get(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "full_signature": "@GET @Timed @Path(\"/{name}/fields\") @ApiOperation(\"Get fields\") public Response get(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "class_method_signature": "TableFieldMappingResource.get(@PathParam(\"name\") final String table,\n                        @QueryParam(\"withCardinality\") @DefaultValue(\"false\") boolean withCardinality,\n                        @QueryParam(\"calculateCardinality\") @DefaultValue(\"false\") boolean calculateCardinality)", "testcase": false, "constructor": false, "invocations": ["build", "ok", "getFieldMappings"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}