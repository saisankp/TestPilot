{"test_class": {"identifier": "SmsServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SmsService smsService;", "modifier": "@Autowired\n    private", "type": "SmsService", "declarator": "smsService", "var_name": "smsService"}], "file": "moved/system/system-service-impl/src/test/java/cn/iocoder/mall/admin/service/SmsServiceImplTest.java"}, "test_case": {"identifier": "updateSignTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void updateSignTest() {\n        String oldSign = \"\u60a6\u8dd1\u8fd0\u52a82\";\n        String newSign = \"\u60a6\u8dd1\u8fd0\u52a8\";\n        smsService.updateSign(3, newSign, SmsPlatformEnum.YunPian.getValue());\n        SmsSignBO smsSignBO =  smsService.getSign(3);\n        Assert.assertTrue(\"\u66f4\u65b0\u4e0d\u6210\u529f!\", smsSignBO.getSign().equals(newSign));\n    }", "signature": "void updateSignTest()", "full_signature": "@Test public void updateSignTest()", "class_method_signature": "SmsServiceImplTest.updateSignTest()", "testcase": true, "constructor": false, "invocations": ["updateSign", "getValue", "getSign", "assertTrue", "Sign))", "equals("]}, "focal_class": {"identifier": "SmsServiceImpl", "superclass": "", "interfaces": "implements SmsService", "fields": [{"original_string": "@Autowired\n    private SmsSignMapper smsSignMapper;", "modifier": "@Autowired\n    private", "type": "SmsSignMapper", "declarator": "smsSignMapper", "var_name": "smsSignMapper"}, {"original_string": "@Autowired\n    private SmsTemplateMapper smsTemplateMapper;", "modifier": "@Autowired\n    private", "type": "SmsTemplateMapper", "declarator": "smsTemplateMapper", "var_name": "smsTemplateMapper"}, {"original_string": "@Autowired\n    private SmsSendMapper smsSendMapper;", "modifier": "@Autowired\n    private", "type": "SmsSendMapper", "declarator": "smsSendMapper", "var_name": "smsSendMapper"}, {"original_string": "@Autowired\n    @Qualifier(\"smsYunPianClient\")\n    private SmsClient smsYunPianClient;", "modifier": "@Autowired\n    @Qualifier(\"smsYunPianClient\")\n    private", "type": "SmsClient", "declarator": "smsYunPianClient", "var_name": "smsYunPianClient"}, {"original_string": "@Autowired\n    @Qualifier(\"smsAliYunClient\")\n    private SmsClient smsAliYunClient;", "modifier": "@Autowired\n    @Qualifier(\"smsAliYunClient\")\n    private", "type": "SmsClient", "declarator": "smsAliYunClient", "var_name": "smsAliYunClient"}], "methods": [{"identifier": "pageSmsSign", "parameters": "(PageQuerySmsSignDTO queryDTO)", "modifiers": "@Override public", "return": "PageSmsSignBO", "signature": "PageSmsSignBO pageSmsSign(PageQuerySmsSignDTO queryDTO)", "full_signature": "@Override public PageSmsSignBO pageSmsSign(PageQuerySmsSignDTO queryDTO)", "class_method_signature": "SmsServiceImpl.pageSmsSign(PageQuerySmsSignDTO queryDTO)", "testcase": false, "constructor": false}, {"identifier": "pageSmsTemplate", "parameters": "(PageQuerySmsTemplateDTO queryDTO)", "modifiers": "@Override public", "return": "PageSmsTemplateBO", "signature": "PageSmsTemplateBO pageSmsTemplate(PageQuerySmsTemplateDTO queryDTO)", "full_signature": "@Override public PageSmsTemplateBO pageSmsTemplate(PageQuerySmsTemplateDTO queryDTO)", "class_method_signature": "SmsServiceImpl.pageSmsTemplate(PageQuerySmsTemplateDTO queryDTO)", "testcase": false, "constructor": false}, {"identifier": "addSign", "parameters": "(String sign, Integer platform)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void addSign(String sign, Integer platform)", "full_signature": "@Override @Transactional public void addSign(String sign, Integer platform)", "class_method_signature": "SmsServiceImpl.addSign(String sign, Integer platform)", "testcase": false, "constructor": false}, {"identifier": "getSign", "parameters": "(Integer signId)", "modifiers": "@Override public", "return": "SmsSignBO", "signature": "SmsSignBO getSign(Integer signId)", "full_signature": "@Override public SmsSignBO getSign(Integer signId)", "class_method_signature": "SmsServiceImpl.getSign(Integer signId)", "testcase": false, "constructor": false}, {"identifier": "updateSign", "parameters": "(Integer id, String newSign, Integer platform)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void updateSign(Integer id, String newSign, Integer platform)", "full_signature": "@Override @Transactional public void updateSign(Integer id, String newSign, Integer platform)", "class_method_signature": "SmsServiceImpl.updateSign(Integer id, String newSign, Integer platform)", "testcase": false, "constructor": false}, {"identifier": "deleteSign", "parameters": "(Integer id)", "modifiers": "@Override public", "return": "void", "signature": "void deleteSign(Integer id)", "full_signature": "@Override public void deleteSign(Integer id)", "class_method_signature": "SmsServiceImpl.deleteSign(Integer id)", "testcase": false, "constructor": false}, {"identifier": "addTemplate", "parameters": "(Integer smsSignId, String templateCode,\n                            String template, Integer platform, Integer smsType)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void addTemplate(Integer smsSignId, String templateCode,\n                            String template, Integer platform, Integer smsType)", "full_signature": "@Override @Transactional public void addTemplate(Integer smsSignId, String templateCode,\n                            String template, Integer platform, Integer smsType)", "class_method_signature": "SmsServiceImpl.addTemplate(Integer smsSignId, String templateCode,\n                            String template, Integer platform, Integer smsType)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "(Integer id, Integer platform)", "modifiers": "@Override public", "return": "SmsTemplateBO", "signature": "SmsTemplateBO getTemplate(Integer id, Integer platform)", "full_signature": "@Override public SmsTemplateBO getTemplate(Integer id, Integer platform)", "class_method_signature": "SmsServiceImpl.getTemplate(Integer id, Integer platform)", "testcase": false, "constructor": false}, {"identifier": "updateTemplate", "parameters": "(Integer id, Integer smsSignId, String templateCode,\n                               String template, Integer platform, Integer smsType)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void updateTemplate(Integer id, Integer smsSignId, String templateCode,\n                               String template, Integer platform, Integer smsType)", "full_signature": "@Override @Transactional public void updateTemplate(Integer id, Integer smsSignId, String templateCode,\n                               String template, Integer platform, Integer smsType)", "class_method_signature": "SmsServiceImpl.updateTemplate(Integer id, Integer smsSignId, String templateCode,\n                               String template, Integer platform, Integer smsType)", "testcase": false, "constructor": false}, {"identifier": "deleteTemplate", "parameters": "(Integer id)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void deleteTemplate(Integer id)", "full_signature": "@Override @Transactional public void deleteTemplate(Integer id)", "class_method_signature": "SmsServiceImpl.deleteTemplate(Integer id)", "testcase": false, "constructor": false}, {"identifier": "singleSend", "parameters": "(String mobile, Integer smsTemplateId, Map<String, String> params)", "modifiers": "@Override public", "return": "void", "signature": "void singleSend(String mobile, Integer smsTemplateId, Map<String, String> params)", "full_signature": "@Override public void singleSend(String mobile, Integer smsTemplateId, Map<String, String> params)", "class_method_signature": "SmsServiceImpl.singleSend(String mobile, Integer smsTemplateId, Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "batchSend", "parameters": "(List<String> mobileList, Integer smsTemplateId, Map<String, String> params)", "modifiers": "@Override public", "return": "void", "signature": "void batchSend(List<String> mobileList, Integer smsTemplateId, Map<String, String> params)", "full_signature": "@Override public void batchSend(List<String> mobileList, Integer smsTemplateId, Map<String, String> params)", "class_method_signature": "SmsServiceImpl.batchSend(List<String> mobileList, Integer smsTemplateId, Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "getSmsClient", "parameters": "(Integer platform)", "modifiers": "private", "return": "SmsClient", "signature": "SmsClient getSmsClient(Integer platform)", "full_signature": "private SmsClient getSmsClient(Integer platform)", "class_method_signature": "SmsServiceImpl.getSmsClient(Integer platform)", "testcase": false, "constructor": false}], "file": "moved/system/system-service-impl/src/main/java/cn/iocoder/mall/admin/service/SmsServiceImpl.java"}, "focal_method": {"identifier": "updateSign", "parameters": "(Integer id, String newSign, Integer platform)", "modifiers": "@Override @Transactional public", "return": "void", "body": "@Override\n    @Transactional\n    public void updateSign(Integer id, String newSign, Integer platform) {\n        // \u907f\u514d\u91cd\u590d\n        SmsSignDO smsSignDO = smsSignMapper.selectOne(\n                new QueryWrapper<SmsSignDO>()\n                        .eq(\"sign\", newSign)\n                        .eq(\"platform\", platform));\n\n        if (smsSignDO != null) {\n            throw new ServiceException(AdminErrorCodeEnum.SMS_SIGN_IS_EXISTENT.getCode(),\n                    AdminErrorCodeEnum.SMS_SIGN_IS_EXISTENT.getMessage());\n        }\n\n        // \u66f4\u65b0\n        smsSignMapper.update(\n                (SmsSignDO) new SmsSignDO()\n                        .setSign(newSign)\n                        .setPlatform(platform)\n                        .setUpdateTime(new Date()),\n                new QueryWrapper<SmsSignDO>().eq(\"id\", id)\n        );\n    }", "signature": "void updateSign(Integer id, String newSign, Integer platform)", "full_signature": "@Override @Transactional public void updateSign(Integer id, String newSign, Integer platform)", "class_method_signature": "SmsServiceImpl.updateSign(Integer id, String newSign, Integer platform)", "testcase": false, "constructor": false, "invocations": ["selectOne", "eq", "eq", "getCode", "getMessage", "update", "setUpdateTime", "setPlatform", "setSign", "eq"]}, "repository": {"repo_id": 184611677, "url": "https://github.com/YunaiV/onemall", "language": "Java", "is_fork": false, "fork_count": 1162, "stargazer_count": 2893, "size": 7986, "license": "licensed"}}