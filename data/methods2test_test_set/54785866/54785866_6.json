{"test_class": {"identifier": "ProjectServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@MockBean\n\tprivate ProjectJpaRepository projectRepoMock;", "modifier": "@MockBean\n\tprivate", "type": "ProjectJpaRepository", "declarator": "projectRepoMock", "var_name": "projectRepoMock"}, {"original_string": "@InjectMocks\n\tprivate ProjectService projectService;", "modifier": "@InjectMocks\n\tprivate", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}], "file": "tools/interfaceBuilder/src/test/java/interfacebuilder/projects/ProjectServiceTest.java"}, "test_case": {"identifier": "testSaveProject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSaveProject() {\n\t\tfinal Project project = new Project(\"name\", \"path\", Game.SC2);\n\t\tproject.setId(1);\n\t\twhen(projectRepoMock.save(project)).thenReturn(project);\n\t\t\n\t\tfinal Project savedProject = projectService.saveProject(project);\n\t\tassertEquals(project, savedProject, \"saving altered project\");\n\t}", "signature": "void testSaveProject()", "full_signature": "@Test public void testSaveProject()", "class_method_signature": "ProjectServiceTest.testSaveProject()", "testcase": true, "constructor": false, "invocations": ["setId", "thenReturn", "when", "save", "saveProject", "assertEquals"]}, "focal_class": {"identifier": "ProjectService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DIRECTORY_SYMBOL = \"/\";", "modifier": "private static final", "type": "String", "declarator": "DIRECTORY_SYMBOL = \"/\"", "var_name": "DIRECTORY_SYMBOL"}, {"original_string": "private static final Logger logger = LogManager.getLogger(ProjectService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(ProjectService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate ProjectJpaRepository projectRepo;", "modifier": "@Autowired\n\tprivate", "type": "ProjectJpaRepository", "declarator": "projectRepo", "var_name": "projectRepo"}, {"original_string": "@Autowired\n\tprivate MpqBuilderService mpqBuilderService;", "modifier": "@Autowired\n\tprivate", "type": "MpqBuilderService", "declarator": "mpqBuilderService", "var_name": "mpqBuilderService"}], "methods": [{"identifier": "pathContainsCompileableForGame", "parameters": "(final String path, final GameData game)", "modifiers": "public", "return": "boolean", "signature": "boolean pathContainsCompileableForGame(final String path, final GameData game)", "full_signature": "public boolean pathContainsCompileableForGame(final String path, final GameData game)", "class_method_signature": "ProjectService.pathContainsCompileableForGame(final String path, final GameData game)", "testcase": false, "constructor": false}, {"identifier": "getAllProjects", "parameters": "()", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> getAllProjects()", "full_signature": "public List<Project> getAllProjects()", "class_method_signature": "ProjectService.getAllProjects()", "testcase": false, "constructor": false}, {"identifier": "saveProject", "parameters": "(final Project project)", "modifiers": "public", "return": "Project", "signature": "Project saveProject(final Project project)", "full_signature": "public Project saveProject(final Project project)", "class_method_signature": "ProjectService.saveProject(final Project project)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(final Iterable<Project> projects, final boolean useCmdLineSettings)", "modifiers": "public", "return": "void", "signature": "void build(final Iterable<Project> projects, final boolean useCmdLineSettings)", "full_signature": "public void build(final Iterable<Project> projects, final boolean useCmdLineSettings)", "class_method_signature": "ProjectService.build(final Iterable<Project> projects, final boolean useCmdLineSettings)", "testcase": false, "constructor": false}, {"identifier": "deleteProject", "parameters": "(final Project project)", "modifiers": "public", "return": "void", "signature": "void deleteProject(final Project project)", "full_signature": "public void deleteProject(final Project project)", "class_method_signature": "ProjectService.deleteProject(final Project project)", "testcase": false, "constructor": false}, {"identifier": "getProjectsOfPath", "parameters": "(final String path)", "modifiers": "public", "return": "List<Project>", "signature": "List<Project> getProjectsOfPath(final String path)", "full_signature": "public List<Project> getProjectsOfPath(final String path)", "class_method_signature": "ProjectService.getProjectsOfPath(final String path)", "testcase": false, "constructor": false}, {"identifier": "fetchBestCompressionRuleSet", "parameters": "(final Project project)", "modifiers": "@Transactional public", "return": "RuleSet", "signature": "RuleSet fetchBestCompressionRuleSet(final Project project)", "full_signature": "@Transactional public RuleSet fetchBestCompressionRuleSet(final Project project)", "class_method_signature": "ProjectService.fetchBestCompressionRuleSet(final Project project)", "testcase": false, "constructor": false}, {"identifier": "createTemplateProjectFiles", "parameters": "(final Project project)", "modifiers": "public", "return": "void", "signature": "void createTemplateProjectFiles(final Project project)", "full_signature": "public void createTemplateProjectFiles(final Project project)", "class_method_signature": "ProjectService.createTemplateProjectFiles(final Project project)", "testcase": false, "constructor": false}], "file": "tools/interfaceBuilder/src/main/java/interfacebuilder/projects/ProjectService.java"}, "focal_method": {"identifier": "saveProject", "parameters": "(final Project project)", "modifiers": "public", "return": "Project", "body": "public Project saveProject(final Project project) {\n\t\ttry {\n\t\t\treturn projectRepo.save(project);\n\t\t} catch (final DataAccessException e) {\n\t\t\tlogger.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}", "signature": "Project saveProject(final Project project)", "full_signature": "public Project saveProject(final Project project)", "class_method_signature": "ProjectService.saveProject(final Project project)", "testcase": false, "constructor": false, "invocations": ["save", "error"]}, "repository": {"repo_id": 54785866, "url": "https://github.com/Ahli/Galaxy-Observer-UI", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 636191, "license": "licensed"}}