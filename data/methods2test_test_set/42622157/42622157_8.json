{"test_class": {"identifier": "TestUtil", "superclass": "", "interfaces": "", "fields": [], "file": "org.eclipse.winery.common/src/test/java/org/eclipse/winery/common/TestUtil.java"}, "test_case": {"identifier": "testNamespaceToJavaPackageURLWithHostOnly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNamespaceToJavaPackageURLWithHostOnly() {\n        assertEquals(\"org.example.www\", Util.namespaceToJavaPackage(\"http://www.example.org/\"));\n    }", "signature": "void testNamespaceToJavaPackageURLWithHostOnly()", "full_signature": "@Test public void testNamespaceToJavaPackageURLWithHostOnly()", "class_method_signature": "TestUtil.testNamespaceToJavaPackageURLWithHostOnly()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "namespaceToJavaPackage"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String FORBIDDEN_CHARACTER_REPLACEMENT = \"_\";", "modifier": "public static final", "type": "String", "declarator": "FORBIDDEN_CHARACTER_REPLACEMENT = \"_\"", "var_name": "FORBIDDEN_CHARACTER_REPLACEMENT"}, {"original_string": "public static final String slashEncoded = Util.URLencode(\"/\");", "modifier": "public static final", "type": "String", "declarator": "slashEncoded = Util.URLencode(\"/\")", "var_name": "slashEncoded"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Util.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Util.class)", "var_name": "LOGGER"}, {"original_string": "private static final String NCNameStartChar_RegExp = \"[A-Z_a-z\\u00c0-\\u00d6\\u00d8\\u00f6\\u00f8\\u02ff\\u0370\\u037d\\u037f-\\u1fff\\u200c-\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]\";", "modifier": "private static final", "type": "String", "declarator": "NCNameStartChar_RegExp = \"[A-Z_a-z\\u00c0-\\u00d6\\u00d8\\u00f6\\u00f8\\u02ff\\u0370\\u037d\\u037f-\\u1fff\\u200c-\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]\"", "var_name": "NCNameStartChar_RegExp"}, {"original_string": "private static final String NCNameChar_RegExp = Util.NCNameStartChar_RegExp + \"|[-\\\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]\";", "modifier": "private static final", "type": "String", "declarator": "NCNameChar_RegExp = Util.NCNameStartChar_RegExp + \"|[-\\\\.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]\"", "var_name": "NCNameChar_RegExp"}, {"original_string": "private static final Pattern NCNameStartChar_Pattern = Pattern.compile(Util.NCNameStartChar_RegExp);", "modifier": "private static final", "type": "Pattern", "declarator": "NCNameStartChar_Pattern = Pattern.compile(Util.NCNameStartChar_RegExp)", "var_name": "NCNameStartChar_Pattern"}, {"original_string": "private static final Pattern NCNameChar_RegExp_Pattern = Pattern.compile(Util.NCNameChar_RegExp);", "modifier": "private static final", "type": "Pattern", "declarator": "NCNameChar_RegExp_Pattern = Pattern.compile(Util.NCNameChar_RegExp)", "var_name": "NCNameChar_RegExp_Pattern"}], "methods": [{"identifier": "URLdecode", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String URLdecode(String s)", "full_signature": "public static String URLdecode(String s)", "class_method_signature": "Util.URLdecode(String s)", "testcase": false, "constructor": false}, {"identifier": "URLencode", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String URLencode(String s)", "full_signature": "public static String URLencode(String s)", "class_method_signature": "Util.URLencode(String s)", "testcase": false, "constructor": false}, {"identifier": "URLencode", "parameters": "(QName qname)", "modifiers": "public static", "return": "String", "signature": "String URLencode(QName qname)", "full_signature": "public static String URLencode(QName qname)", "class_method_signature": "Util.URLencode(QName qname)", "testcase": false, "constructor": false}, {"identifier": "DoubleURLencode", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String DoubleURLencode(String s)", "full_signature": "public static String DoubleURLencode(String s)", "class_method_signature": "Util.DoubleURLencode(String s)", "testcase": false, "constructor": false}, {"identifier": "DoubleURLencode", "parameters": "(QName qname)", "modifiers": "public static", "return": "String", "signature": "String DoubleURLencode(QName qname)", "full_signature": "public static String DoubleURLencode(QName qname)", "class_method_signature": "Util.DoubleURLencode(QName qname)", "testcase": false, "constructor": false}, {"identifier": "isRelativeURI", "parameters": "(String uri)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRelativeURI(String uri)", "full_signature": "public static boolean isRelativeURI(String uri)", "class_method_signature": "Util.isRelativeURI(String uri)", "testcase": false, "constructor": false}, {"identifier": "getPathInsideRepo", "parameters": "(GenericId id)", "modifiers": "public static", "return": "String", "signature": "String getPathInsideRepo(GenericId id)", "full_signature": "public static String getPathInsideRepo(GenericId id)", "class_method_signature": "Util.getPathInsideRepo(GenericId id)", "testcase": false, "constructor": false}, {"identifier": "getComponentIdClassForTExtensibleElements", "parameters": "(Class<? extends TExtensibleElements> clazz)", "modifiers": "public static", "return": "Class<? extends DefinitionsChildId>", "signature": "Class<? extends DefinitionsChildId> getComponentIdClassForTExtensibleElements(Class<? extends TExtensibleElements> clazz)", "full_signature": "public static Class<? extends DefinitionsChildId> getComponentIdClassForTExtensibleElements(Class<? extends TExtensibleElements> clazz)", "class_method_signature": "Util.getComponentIdClassForTExtensibleElements(Class<? extends TExtensibleElements> clazz)", "testcase": false, "constructor": false}, {"identifier": "getComponentIdClass", "parameters": "(String idClassName)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Class<? extends DefinitionsChildId>", "signature": "Class<? extends DefinitionsChildId> getComponentIdClass(String idClassName)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Class<? extends DefinitionsChildId> getComponentIdClass(String idClassName)", "class_method_signature": "Util.getComponentIdClass(String idClassName)", "testcase": false, "constructor": false}, {"identifier": "getGenericIdClassForType", "parameters": "(String typeIdType)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Class<? extends GenericId>", "signature": "Class<? extends GenericId> getGenericIdClassForType(String typeIdType)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Class<? extends GenericId> getGenericIdClassForType(String typeIdType)", "class_method_signature": "Util.getGenericIdClassForType(String typeIdType)", "testcase": false, "constructor": false}, {"identifier": "getUrlPath", "parameters": "(GenericId id)", "modifiers": "public static", "return": "String", "signature": "String getUrlPath(GenericId id)", "full_signature": "public static String getUrlPath(GenericId id)", "class_method_signature": "Util.getUrlPath(GenericId id)", "testcase": false, "constructor": false}, {"identifier": "getUrlPath", "parameters": "(String pathInsideRepo)", "modifiers": "public static", "return": "String", "signature": "String getUrlPath(String pathInsideRepo)", "full_signature": "public static String getUrlPath(String pathInsideRepo)", "class_method_signature": "Util.getUrlPath(String pathInsideRepo)", "testcase": false, "constructor": false}, {"identifier": "getUrlPath", "parameters": "(RepositoryFileReference ref)", "modifiers": "public static", "return": "String", "signature": "String getUrlPath(RepositoryFileReference ref)", "full_signature": "public static String getUrlPath(RepositoryFileReference ref)", "class_method_signature": "Util.getUrlPath(RepositoryFileReference ref)", "testcase": false, "constructor": false}, {"identifier": "getURLpathFragmentForCollection", "parameters": "(Class<? extends TExtensibleElements> c)", "modifiers": "public static", "return": "String", "signature": "String getURLpathFragmentForCollection(Class<? extends TExtensibleElements> c)", "full_signature": "public static String getURLpathFragmentForCollection(Class<? extends TExtensibleElements> c)", "class_method_signature": "Util.getURLpathFragmentForCollection(Class<? extends TExtensibleElements> c)", "testcase": false, "constructor": false}, {"identifier": "getEverythingBetweenTheLastDotAndBeforeId", "parameters": "(Class<? extends GenericId> cls)", "modifiers": "public static", "return": "String", "signature": "String getEverythingBetweenTheLastDotAndBeforeId(Class<? extends GenericId> cls)", "full_signature": "public static String getEverythingBetweenTheLastDotAndBeforeId(Class<? extends GenericId> cls)", "class_method_signature": "Util.getEverythingBetweenTheLastDotAndBeforeId(Class<? extends GenericId> cls)", "testcase": false, "constructor": false}, {"identifier": "getTypeForElementId", "parameters": "(Class<? extends ToscaElementId> idClass)", "modifiers": "public static", "return": "String", "signature": "String getTypeForElementId(Class<? extends ToscaElementId> idClass)", "full_signature": "public static String getTypeForElementId(Class<? extends ToscaElementId> idClass)", "class_method_signature": "Util.getTypeForElementId(Class<? extends ToscaElementId> idClass)", "testcase": false, "constructor": false}, {"identifier": "getTypeForComponentId", "parameters": "(Class<? extends DefinitionsChildId> idClass)", "modifiers": "public static", "return": "String", "signature": "String getTypeForComponentId(Class<? extends DefinitionsChildId> idClass)", "full_signature": "public static String getTypeForComponentId(Class<? extends DefinitionsChildId> idClass)", "class_method_signature": "Util.getTypeForComponentId(Class<? extends DefinitionsChildId> idClass)", "testcase": false, "constructor": false}, {"identifier": "getRootPathFragment", "parameters": "(Class<? extends DefinitionsChildId> idClass)", "modifiers": "public static", "return": "String", "signature": "String getRootPathFragment(Class<? extends DefinitionsChildId> idClass)", "full_signature": "public static String getRootPathFragment(Class<? extends DefinitionsChildId> idClass)", "class_method_signature": "Util.getRootPathFragment(Class<? extends DefinitionsChildId> idClass)", "testcase": false, "constructor": false}, {"identifier": "getFolderName", "parameters": "(Class<? extends DefinitionsChildId> idClass)", "modifiers": "public static", "return": "String", "signature": "String getFolderName(Class<? extends DefinitionsChildId> idClass)", "full_signature": "public static String getFolderName(Class<? extends DefinitionsChildId> idClass)", "class_method_signature": "Util.getFolderName(Class<? extends DefinitionsChildId> idClass)", "testcase": false, "constructor": false}, {"identifier": "qname2hrefWithName", "parameters": "(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname, String name)", "modifiers": "public static", "return": "String", "signature": "String qname2hrefWithName(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname, String name)", "full_signature": "public static String qname2hrefWithName(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname, String name)", "class_method_signature": "Util.qname2hrefWithName(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname, String name)", "testcase": false, "constructor": false}, {"identifier": "qname2href", "parameters": "(@NonNull String repositoryUiUrl, @NonNull Class<? extends TExtensibleElements> element, @Nullable QName qname, @Nullable String name)", "modifiers": "public static", "return": "String", "signature": "String qname2href(@NonNull String repositoryUiUrl, @NonNull Class<? extends TExtensibleElements> element, @Nullable QName qname, @Nullable String name)", "full_signature": "public static String qname2href(@NonNull String repositoryUiUrl, @NonNull Class<? extends TExtensibleElements> element, @Nullable QName qname, @Nullable String name)", "class_method_signature": "Util.qname2href(@NonNull String repositoryUiUrl, @NonNull Class<? extends TExtensibleElements> element, @Nullable QName qname, @Nullable String name)", "testcase": false, "constructor": false}, {"identifier": "qname2href", "parameters": "(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname)", "modifiers": "public static", "return": "String", "signature": "String qname2href(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname)", "full_signature": "public static String qname2href(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname)", "class_method_signature": "Util.qname2href(String repositoryUiUrl, Class<? extends TExtensibleElements> element, QName qname)", "testcase": false, "constructor": false}, {"identifier": "renderMinInstances", "parameters": "(Integer minInstances)", "modifiers": "public static", "return": "String", "signature": "String renderMinInstances(Integer minInstances)", "full_signature": "public static String renderMinInstances(Integer minInstances)", "class_method_signature": "Util.renderMinInstances(Integer minInstances)", "testcase": false, "constructor": false}, {"identifier": "renderMaxInstances", "parameters": "(String maxInstances)", "modifiers": "public static", "return": "String", "signature": "String renderMaxInstances(String maxInstances)", "full_signature": "public static String renderMaxInstances(String maxInstances)", "class_method_signature": "Util.renderMaxInstances(String maxInstances)", "testcase": false, "constructor": false}, {"identifier": "getLocalName", "parameters": "(@SuppressWarnings(\"rawtypes\") Class clazz)", "modifiers": "private static", "return": "String", "signature": "String getLocalName(@SuppressWarnings(\"rawtypes\") Class clazz)", "full_signature": "private static String getLocalName(@SuppressWarnings(\"rawtypes\") Class clazz)", "class_method_signature": "Util.getLocalName(@SuppressWarnings(\"rawtypes\") Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getJAXBElement", "parameters": "(Class<T> clazz, T obj)", "modifiers": "public static", "return": "JAXBElement<T>", "signature": "JAXBElement<T> getJAXBElement(Class<T> clazz, T obj)", "full_signature": "public static JAXBElement<T> getJAXBElement(Class<T> clazz, T obj)", "class_method_signature": "Util.getJAXBElement(Class<T> clazz, T obj)", "testcase": false, "constructor": false}, {"identifier": "getXMLAsString", "parameters": "(Class<T> clazz, T obj)", "modifiers": "public static", "return": "String", "signature": "String getXMLAsString(Class<T> clazz, T obj)", "full_signature": "public static String getXMLAsString(Class<T> clazz, T obj)", "class_method_signature": "Util.getXMLAsString(Class<T> clazz, T obj)", "testcase": false, "constructor": false}, {"identifier": "getXMLAsString", "parameters": "(Element el)", "modifiers": "public static", "return": "String", "signature": "String getXMLAsString(Element el)", "full_signature": "public static String getXMLAsString(Element el)", "class_method_signature": "Util.getXMLAsString(Element el)", "testcase": false, "constructor": false}, {"identifier": "instanceSupportsNameAttribute", "parameters": "(Class<? extends DefinitionsChildId> idClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean instanceSupportsNameAttribute(Class<? extends DefinitionsChildId> idClass)", "full_signature": "public static boolean instanceSupportsNameAttribute(Class<? extends DefinitionsChildId> idClass)", "class_method_signature": "Util.instanceSupportsNameAttribute(Class<? extends DefinitionsChildId> idClass)", "testcase": false, "constructor": false}, {"identifier": "getLastURIPart", "parameters": "(String loc)", "modifiers": "public static", "return": "String", "signature": "String getLastURIPart(String loc)", "full_signature": "public static String getLastURIPart(String loc)", "class_method_signature": "Util.getLastURIPart(String loc)", "testcase": false, "constructor": false}, {"identifier": "makeCSSName", "parameters": "(String namespace, String localName)", "modifiers": "public static", "return": "String", "signature": "String makeCSSName(String namespace, String localName)", "full_signature": "public static String makeCSSName(String namespace, String localName)", "class_method_signature": "Util.makeCSSName(String namespace, String localName)", "testcase": false, "constructor": false}, {"identifier": "makeCSSName", "parameters": "(QName qname)", "modifiers": "public static", "return": "String", "signature": "String makeCSSName(QName qname)", "full_signature": "public static String makeCSSName(QName qname)", "class_method_signature": "Util.makeCSSName(QName qname)", "testcase": false, "constructor": false}, {"identifier": "convertQNameListToNamespaceToLocalNameList", "parameters": "(List<QName> list)", "modifiers": "public static", "return": "SortedMap<String, SortedSet<String>>", "signature": "SortedMap<String, SortedSet<String>> convertQNameListToNamespaceToLocalNameList(List<QName> list)", "full_signature": "public static SortedMap<String, SortedSet<String>> convertQNameListToNamespaceToLocalNameList(List<QName> list)", "class_method_signature": "Util.convertQNameListToNamespaceToLocalNameList(List<QName> list)", "testcase": false, "constructor": false}, {"identifier": "namespaceToJavaPackage", "parameters": "(String namespace)", "modifiers": "public static", "return": "String", "signature": "String namespaceToJavaPackage(String namespace)", "full_signature": "public static String namespaceToJavaPackage(String namespace)", "class_method_signature": "Util.namespaceToJavaPackage(String namespace)", "testcase": false, "constructor": false}, {"identifier": "cleanName", "parameters": "(String s)", "modifiers": "private static", "return": "String", "signature": "String cleanName(String s)", "full_signature": "private static String cleanName(String s)", "class_method_signature": "Util.cleanName(String s)", "testcase": false, "constructor": false}, {"identifier": "makeNCName", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String makeNCName(String text)", "full_signature": "public static String makeNCName(String text)", "class_method_signature": "Util.makeNCName(String text)", "testcase": false, "constructor": false}, {"identifier": "addAsIs", "parameters": "(StringBuilder sb, String s, String separator)", "modifiers": "private static", "return": "void", "signature": "void addAsIs(StringBuilder sb, String s, String separator)", "full_signature": "private static void addAsIs(StringBuilder sb, String s, String separator)", "class_method_signature": "Util.addAsIs(StringBuilder sb, String s, String separator)", "testcase": false, "constructor": false}, {"identifier": "addReversed", "parameters": "(StringBuilder sb, String s, String separator)", "modifiers": "private static", "return": "void", "signature": "void addReversed(StringBuilder sb, String s, String separator)", "full_signature": "private static void addReversed(StringBuilder sb, String s, String separator)", "class_method_signature": "Util.addReversed(StringBuilder sb, String s, String separator)", "testcase": false, "constructor": false}, {"identifier": "determineAndCreateRepositoryPath", "parameters": "()", "modifiers": "public static", "return": "Path", "signature": "Path determineAndCreateRepositoryPath()", "full_signature": "public static Path determineAndCreateRepositoryPath()", "class_method_signature": "Util.determineAndCreateRepositoryPath()", "testcase": false, "constructor": false}, {"identifier": "createDefaultRepositoryPath", "parameters": "()", "modifiers": "private static", "return": "Path", "signature": "Path createDefaultRepositoryPath()", "full_signature": "private static Path createDefaultRepositoryPath()", "class_method_signature": "Util.createDefaultRepositoryPath()", "testcase": false, "constructor": false}, {"identifier": "createCsarOutputPath", "parameters": "(String csarOutputPath)", "modifiers": "public static", "return": "void", "signature": "void createCsarOutputPath(String csarOutputPath)", "full_signature": "public static void createCsarOutputPath(String csarOutputPath)", "class_method_signature": "Util.createCsarOutputPath(String csarOutputPath)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.common/src/main/java/org/eclipse/winery/common/Util.java"}, "focal_method": {"identifier": "namespaceToJavaPackage", "parameters": "(String namespace)", "modifiers": "public static", "return": "String", "body": "public static String namespaceToJavaPackage(String namespace) {\n        URI uri;\n        try {\n            uri = new URI(namespace);\n        } catch (URISyntaxException e) {\n            Util.LOGGER.debug(e.getMessage(), e);\n            return \"uri.invalid\";\n        }\n        StringBuilder sb = new StringBuilder();\n\n        String host = uri.getHost();\n        if (host != null) {\n            Util.addReversed(sb, host, \"\\\\.\");\n        }\n\n        String path = uri.getPath();\n        if (!path.equals(\"\")) {\n            if (path.startsWith(\"/\")) {\n                // remove first slash\n                path = path.substring(1);\n            }\n\n            // and then handle the string\n            Util.addAsIs(sb, path, \"/\");\n        }\n\n        // remove the final dot\n        sb.replace(sb.length() - 1, sb.length(), \"\");\n\n        return Util.cleanName(sb.toString());\n    }", "signature": "String namespaceToJavaPackage(String namespace)", "full_signature": "public static String namespaceToJavaPackage(String namespace)", "class_method_signature": "Util.namespaceToJavaPackage(String namespace)", "testcase": false, "constructor": false, "invocations": ["debug", "getMessage", "getHost", "addReversed", "getPath", "equals", "startsWith", "substring", "addAsIs", "replace", "length", "length", "cleanName", "toString"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}