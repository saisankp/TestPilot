{"test_class": {"identifier": "GroupsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "@Mock GroupDAO groupDAO;", "modifier": "@Mock", "type": "GroupDAO", "declarator": "groupDAO", "var_name": "groupDAO"}, {"original_string": "User user = User.named(\"user\");", "modifier": "", "type": "User", "declarator": "user = User.named(\"user\")", "var_name": "user"}, {"original_string": "ApiDate now = ApiDate.now();", "modifier": "", "type": "ApiDate", "declarator": "now = ApiDate.now()", "var_name": "now"}, {"original_string": "Group group =\n      new Group(1, \"group\", \"desc\", now, \"creator\", now, \"creator\", ImmutableMap.of(\"app\", \"app\"));", "modifier": "", "type": "Group", "declarator": "group =\n      new Group(1, \"group\", \"desc\", now, \"creator\", now, \"creator\", ImmutableMap.of(\"app\", \"app\"))", "var_name": "group"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}, {"original_string": "GroupsResource resource;", "modifier": "", "type": "GroupsResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/keywhiz/service/resources/admin/GroupsResourceTest.java"}, "test_case": {"identifier": "getSpecificIncludesAllTheThings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void getSpecificIncludesAllTheThings() {\n    when(groupDAO.getGroupById(4444)).thenReturn(Optional.of(group));\n\n    SanitizedSecret secret =\n        SanitizedSecret.of(1, \"name\", null, \"checksum\", now, \"creator\", now, \"creator\", null, null,\n            null, 1136214245, 125L, now, \"creator\");\n    when(aclDAO.getSanitizedSecretsFor(group)).thenReturn(ImmutableSet.of(secret));\n\n    Client client =\n        new Client(1, \"client\", \"desc\", null, now, \"creator\", now, \"creator\", null, null, true, false\n        );\n    when(aclDAO.getClientsFor(group)).thenReturn(ImmutableSet.of(client));\n\n    GroupDetailResponse response = resource.getGroup(user, new LongParam(\"4444\"));\n\n    assertThat(response.getId()).isEqualTo(group.getId());\n    assertThat(response.getName()).isEqualTo(group.getName());\n    assertThat(response.getDescription()).isEqualTo(group.getDescription());\n    assertThat(response.getCreationDate()).isEqualTo(group.getCreatedAt());\n    assertThat(response.getCreatedBy()).isEqualTo(group.getCreatedBy());\n    assertThat(response.getUpdateDate()).isEqualTo(group.getUpdatedAt());\n    assertThat(response.getUpdatedBy()).isEqualTo(group.getUpdatedBy());\n    assertThat(response.getSecrets()).containsExactly(secret);\n    assertThat(response.getClients()).containsExactly(client);\n  }", "signature": "void getSpecificIncludesAllTheThings()", "full_signature": "@Test public void getSpecificIncludesAllTheThings()", "class_method_signature": "GroupsResourceTest.getSpecificIncludesAllTheThings()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getGroupById", "of", "of", "thenReturn", "when", "getSanitizedSecretsFor", "of", "thenReturn", "when", "getClientsFor", "of", "getGroup", "isEqualTo", "assertThat", "getId", "getId", "isEqualTo", "assertThat", "getName", "getName", "isEqualTo", "assertThat", "getDescription", "getDescription", "isEqualTo", "assertThat", "getCreationDate", "getCreatedAt", "isEqualTo", "assertThat", "getCreatedBy", "getCreatedBy", "isEqualTo", "assertThat", "getUpdateDate", "getUpdatedAt", "isEqualTo", "assertThat", "getUpdatedBy", "getUpdatedBy", "containsExactly", "assertThat", "getSecrets", "containsExactly", "assertThat", "getClients"]}, "focal_class": {"identifier": "GroupsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GroupsResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GroupsResource.class)", "var_name": "logger"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final GroupDAO groupDAO;", "modifier": "private final", "type": "GroupDAO", "declarator": "groupDAO", "var_name": "groupDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "GroupsResource", "parameters": "(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " GroupsResource(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "full_signature": "@Inject public  GroupsResource(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "class_method_signature": "GroupsResource.GroupsResource(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "GroupsResource", "parameters": "(AclDAO aclDAO, GroupDAO groupDAO, AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " GroupsResource(AclDAO aclDAO, GroupDAO groupDAO, AuditLog auditLog)", "full_signature": "@VisibleForTesting  GroupsResource(AclDAO aclDAO, GroupDAO groupDAO, AuditLog auditLog)", "class_method_signature": "GroupsResource.GroupsResource(AclDAO aclDAO, GroupDAO groupDAO, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "findGroups", "parameters": "(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "signature": "Response findGroups(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET public Response findGroups(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "class_method_signature": "GroupsResource.findGroups(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "listGroups", "parameters": "(@Auth User user)", "modifiers": "protected", "return": "List<Group>", "signature": "List<Group> listGroups(@Auth User user)", "full_signature": "protected List<Group> listGroups(@Auth User user)", "class_method_signature": "GroupsResource.listGroups(@Auth User user)", "testcase": false, "constructor": false}, {"identifier": "getGroupByName", "parameters": "(@Auth User user, String name)", "modifiers": "protected", "return": "Group", "signature": "Group getGroupByName(@Auth User user, String name)", "full_signature": "protected Group getGroupByName(@Auth User user, String name)", "class_method_signature": "GroupsResource.getGroupByName(@Auth User user, String name)", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(@Auth User user, @Valid CreateGroupRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response createGroup(@Auth User user, @Valid CreateGroupRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createGroup(@Auth User user, @Valid CreateGroupRequestV2 request)", "class_method_signature": "GroupsResource.createGroup(@Auth User user, @Valid CreateGroupRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"{groupId}\") @Timed @ExceptionMetered @GET public", "return": "GroupDetailResponse", "signature": "GroupDetailResponse getGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"{groupId}\") @Timed @ExceptionMetered @GET public GroupDetailResponse getGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "GroupsResource.getGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"{groupId}\") @Timed @ExceptionMetered @DELETE public", "return": "Response", "signature": "Response deleteGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"{groupId}\") @Timed @ExceptionMetered @DELETE public Response deleteGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "GroupsResource.deleteGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}, {"identifier": "groupDetailResponseFromId", "parameters": "(long groupId)", "modifiers": "private", "return": "GroupDetailResponse", "signature": "GroupDetailResponse groupDetailResponseFromId(long groupId)", "full_signature": "private GroupDetailResponse groupDetailResponseFromId(long groupId)", "class_method_signature": "GroupsResource.groupDetailResponseFromId(long groupId)", "testcase": false, "constructor": false}, {"identifier": "groupFromName", "parameters": "(String name)", "modifiers": "private", "return": "Group", "signature": "Group groupFromName(String name)", "full_signature": "private Group groupFromName(String name)", "class_method_signature": "GroupsResource.groupFromName(String name)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/admin/GroupsResource.java"}, "focal_method": {"identifier": "getGroup", "parameters": "(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"{groupId}\") @Timed @ExceptionMetered @GET public", "return": "GroupDetailResponse", "body": "@Path(\"{groupId}\")\n  @Timed @ExceptionMetered\n  @GET\n  public GroupDetailResponse getGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId) {\n    logger.info(\"User '{}' retrieving group id={}.\", user, groupId);\n    return groupDetailResponseFromId(groupId.get());\n  }", "signature": "GroupDetailResponse getGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"{groupId}\") @Timed @ExceptionMetered @GET public GroupDetailResponse getGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "GroupsResource.getGroup(@Auth User user, @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false, "invocations": ["info", "groupDetailResponseFromId", "get"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}