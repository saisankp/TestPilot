{"test_class": {"identifier": "OCInvocationCallbacksTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OCInvocationCallbacks callbacks = new OCInvocationCallbacks(new JavaImplementor());", "modifier": "private", "type": "OCInvocationCallbacks", "declarator": "callbacks = new OCInvocationCallbacks(new JavaImplementor())", "var_name": "callbacks"}], "file": "rococoa/rococoa-core/src/test/java/org/rococoa/internal/OCInvocationCallbacksTest.java"}, "test_case": {"identifier": "testMethodForSelector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testMethodForSelector() throws SecurityException, NoSuchMethodException {\n        assertNull(callbacks.methodForSelector(\"nosuch\"));\n        assertEquals(\n            JavaImplementor.class.getDeclaredMethod(\"returnsIDTakesVoid\"),                \n            callbacks.methodForSelector(\"returnsIDTakesVoid\"));\n        assertEquals(\n            JavaImplementor.class.getDeclaredMethod(\"returnsVoidTakesInt\", int.class),                \n            callbacks.methodForSelector(\"returnsVoidTakesInt:\"));\n        assertEquals(\n            JavaImplementor.class.getDeclaredMethod(\"returnsVoidTakesInt_andInt\", int.class, int.class),\n            callbacks.methodForSelector(\"returnsVoidTakesInt:andInt:\"));\n        // wrong number of args\n        assertNull(callbacks.methodForSelector(\"returnsVoidTakesVoid:\")); \n        assertNull(callbacks.methodForSelector(\"returnsVoidTakesInt\"));\n    }", "signature": "void testMethodForSelector()", "full_signature": "@Test public void testMethodForSelector()", "class_method_signature": "OCInvocationCallbacksTest.testMethodForSelector()", "testcase": true, "constructor": false, "invocations": ["assertNull", "methodForSelector", "assertEquals", "getDeclaredMethod", "methodForSelector", "assertEquals", "getDeclaredMethod", "methodForSelector", "assertEquals", "getDeclaredMethod", "methodForSelector", "assertNull", "methodForSelector", "assertNull", "methodForSelector"]}, "focal_class": {"identifier": "OCInvocationCallbacks", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logging = Logger.getLogger(\"org.rococoa.callback\");", "modifier": "private static", "type": "Logger", "declarator": "logging = Logger.getLogger(\"org.rococoa.callback\")", "var_name": "logging"}, {"original_string": "private final Object javaObject;", "modifier": "private final", "type": "Object", "declarator": "javaObject", "var_name": "javaObject"}, {"original_string": "public final RococoaLibrary.MethodSignatureCallback methodSignatureCallback =\n        new RococoaLibrary.MethodSignatureCallback() {\n            public String callback(String selectorName) {\n                if (logging.isLoggable(Level.FINEST)) {\n                    logging.finest(String.format(\"callback wanting methodSignature for selector %s\", selectorName));\n                }\n                return methodSignatureForSelector(selectorName);\n            }\n    };", "modifier": "public final", "type": "RococoaLibrary.MethodSignatureCallback", "declarator": "methodSignatureCallback =\n        new RococoaLibrary.MethodSignatureCallback() {\n            public String callback(String selectorName) {\n                if (logging.isLoggable(Level.FINEST)) {\n                    logging.finest(String.format(\"callback wanting methodSignature for selector %s\", selectorName));\n                }\n                return methodSignatureForSelector(selectorName);\n            }\n    }", "var_name": "methodSignatureCallback"}, {"original_string": "public final RococoaLibrary.SelectorInvokedCallback selectorInvokedCallback =\n        new RococoaLibrary.SelectorInvokedCallback() {\n            public void callback(String selectorName, ID nsInvocation) {\n                if (logging.isLoggable(Level.FINEST)) {\n                    logging.finest(String.format(\"callback invoking %s on %s\", selectorName, javaObject));\n                }\n                callMethod(javaObject, selectorName, Rococoa.wrap(nsInvocation, NSInvocation.class));\n            }\n    };", "modifier": "public final", "type": "RococoaLibrary.SelectorInvokedCallback", "declarator": "selectorInvokedCallback =\n        new RococoaLibrary.SelectorInvokedCallback() {\n            public void callback(String selectorName, ID nsInvocation) {\n                if (logging.isLoggable(Level.FINEST)) {\n                    logging.finest(String.format(\"callback invoking %s on %s\", selectorName, javaObject));\n                }\n                callMethod(javaObject, selectorName, Rococoa.wrap(nsInvocation, NSInvocation.class));\n            }\n    }", "var_name": "selectorInvokedCallback"}], "methods": [{"identifier": "OCInvocationCallbacks", "parameters": "(Object javaObject)", "modifiers": "public", "return": "", "signature": " OCInvocationCallbacks(Object javaObject)", "full_signature": "public  OCInvocationCallbacks(Object javaObject)", "class_method_signature": "OCInvocationCallbacks.OCInvocationCallbacks(Object javaObject)", "testcase": false, "constructor": true}, {"identifier": "methodSignatureForSelector", "parameters": "(String selectorName)", "modifiers": "protected", "return": "String", "signature": "String methodSignatureForSelector(String selectorName)", "full_signature": "protected String methodSignatureForSelector(String selectorName)", "class_method_signature": "OCInvocationCallbacks.methodSignatureForSelector(String selectorName)", "testcase": false, "constructor": false}, {"identifier": "methodForSelector", "parameters": "(String selectorName)", "modifiers": "protected", "return": "Method", "signature": "Method methodForSelector(String selectorName)", "full_signature": "protected Method methodForSelector(String selectorName)", "class_method_signature": "OCInvocationCallbacks.methodForSelector(String selectorName)", "testcase": false, "constructor": false}, {"identifier": "ocMethodSignatureAsString", "parameters": "(Method method)", "modifiers": "protected", "return": "String", "signature": "String ocMethodSignatureAsString(Method method)", "full_signature": "protected String ocMethodSignatureAsString(Method method)", "class_method_signature": "OCInvocationCallbacks.ocMethodSignatureAsString(Method method)", "testcase": false, "constructor": false}, {"identifier": "callMethod", "parameters": "(Object o, String selectorName, NSInvocation invocation)", "modifiers": "private", "return": "void", "signature": "void callMethod(Object o, String selectorName, NSInvocation invocation)", "full_signature": "private void callMethod(Object o, String selectorName, NSInvocation invocation)", "class_method_signature": "OCInvocationCallbacks.callMethod(Object o, String selectorName, NSInvocation invocation)", "testcase": false, "constructor": false}, {"identifier": "methodNameForSelector", "parameters": "(String selectorName)", "modifiers": "private", "return": "String", "signature": "String methodNameForSelector(String selectorName)", "full_signature": "private String methodNameForSelector(String selectorName)", "class_method_signature": "OCInvocationCallbacks.methodNameForSelector(String selectorName)", "testcase": false, "constructor": false}, {"identifier": "argsForFrom", "parameters": "(Method method, NSInvocation invocation, NSMethodSignature nsMethodSignature)", "modifiers": "private", "return": "Object[]", "signature": "Object[] argsForFrom(Method method, NSInvocation invocation, NSMethodSignature nsMethodSignature)", "full_signature": "private Object[] argsForFrom(Method method, NSInvocation invocation, NSMethodSignature nsMethodSignature)", "class_method_signature": "OCInvocationCallbacks.argsForFrom(Method method, NSInvocation invocation, NSMethodSignature nsMethodSignature)", "testcase": false, "constructor": false}, {"identifier": "javaObjectForOCArgument", "parameters": "(NSInvocation invocation,\n            int indexInInvocation, String objCArgumentTypeAsString, Class<?> javaParameterType)", "modifiers": "private", "return": "Object", "signature": "Object javaObjectForOCArgument(NSInvocation invocation,\n            int indexInInvocation, String objCArgumentTypeAsString, Class<?> javaParameterType)", "full_signature": "private Object javaObjectForOCArgument(NSInvocation invocation,\n            int indexInInvocation, String objCArgumentTypeAsString, Class<?> javaParameterType)", "class_method_signature": "OCInvocationCallbacks.javaObjectForOCArgument(NSInvocation invocation,\n            int indexInInvocation, String objCArgumentTypeAsString, Class<?> javaParameterType)", "testcase": false, "constructor": false}, {"identifier": "putResultIntoInvocation", "parameters": "(NSInvocation invocation, String typeToReturnToObjC, Object result)", "modifiers": "private", "return": "void", "signature": "void putResultIntoInvocation(NSInvocation invocation, String typeToReturnToObjC, Object result)", "full_signature": "private void putResultIntoInvocation(NSInvocation invocation, String typeToReturnToObjC, Object result)", "class_method_signature": "OCInvocationCallbacks.putResultIntoInvocation(NSInvocation invocation, String typeToReturnToObjC, Object result)", "testcase": false, "constructor": false}, {"identifier": "bufferForReturn", "parameters": "(Object methodCallResult)", "modifiers": "private", "return": "Memory", "signature": "Memory bufferForReturn(Object methodCallResult)", "full_signature": "private Memory bufferForReturn(Object methodCallResult)", "class_method_signature": "OCInvocationCallbacks.bufferForReturn(Object methodCallResult)", "testcase": false, "constructor": false}, {"identifier": "countColons", "parameters": "(String selectorName)", "modifiers": "private", "return": "int", "signature": "int countColons(String selectorName)", "full_signature": "private int countColons(String selectorName)", "class_method_signature": "OCInvocationCallbacks.countColons(String selectorName)", "testcase": false, "constructor": false}, {"identifier": "stringForType", "parameters": "(Class<?> clas)", "modifiers": "private", "return": "String", "signature": "String stringForType(Class<?> clas)", "full_signature": "private String stringForType(Class<?> clas)", "class_method_signature": "OCInvocationCallbacks.stringForType(Class<?> clas)", "testcase": false, "constructor": false}], "file": "rococoa/rococoa-core/src/main/java/org/rococoa/internal/OCInvocationCallbacks.java"}, "focal_method": {"identifier": "methodForSelector", "parameters": "(String selectorName)", "modifiers": "protected", "return": "Method", "body": "protected Method methodForSelector(String selectorName) {\n        if (null == selectorName) {\n            logging.severe(\"methodForSelector called with null selectorName\");\n            return null;\n        }\n        int parameterCount = countColons(selectorName);\n        String methodName = methodNameForSelector(selectorName);\n        try {\n            Method[] methods = javaObject.getClass().getMethods();\n            for (Method method : methods) {\n                if (method.getName().equals(methodName) && method.getParameterTypes().length == parameterCount) {\n                    boolean match = true;\n                    if(null == stringForType(method.getReturnType())) {\n                        match = false;\n                    }\n                    if(match) {\n                        for (Class<?> parameterType : method.getParameterTypes()) {\n                            if(null == stringForType(parameterType)) {\n                                match = false;\n                                break;\n                            }\n                        }\n                    }\n                    if(match) {\n                        return method;\n                    }\n                }\n            }\n            logging.fine(\"No method \" + methodName + \" for selector:\" + selectorName);\n            return null;\n        } catch (Exception e) {\n            logging.log(Level.SEVERE, \"Exception finding methodForSelector\", e);\n            return null;\n        }\n    }", "signature": "Method methodForSelector(String selectorName)", "full_signature": "protected Method methodForSelector(String selectorName)", "class_method_signature": "OCInvocationCallbacks.methodForSelector(String selectorName)", "testcase": false, "constructor": false, "invocations": ["severe", "countColons", "methodNameForSelector", "getMethods", "getClass", "equals", "getName", "getParameterTypes", "stringForType", "getReturnType", "getParameterTypes", "stringForType", "fine", "log"]}, "repository": {"repo_id": 32143635, "url": "https://github.com/iterate-ch/rococoa", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 17, "size": 2377, "license": "licensed"}}