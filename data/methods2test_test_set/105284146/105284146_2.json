{"test_class": {"identifier": "GeneratorsValidationTest", "superclass": "extends AbstractValidationTest", "interfaces": "", "fields": [{"original_string": "private double p = -39.5056;", "modifier": "private", "type": "double", "declarator": "p = -39.5056", "var_name": "p"}, {"original_string": "private double q = 3.72344;", "modifier": "private", "type": "double", "declarator": "q = 3.72344", "var_name": "q"}, {"original_string": "private double v = 380.0;", "modifier": "private", "type": "double", "declarator": "v = 380.0", "var_name": "v"}, {"original_string": "private double targetP = 39.5056;", "modifier": "private", "type": "double", "declarator": "targetP = 39.5056", "var_name": "targetP"}, {"original_string": "private double targetQ = -3.72344;", "modifier": "private", "type": "double", "declarator": "targetQ = -3.72344", "var_name": "targetQ"}, {"original_string": "private final double targetV = 380.0;", "modifier": "private final", "type": "double", "declarator": "targetV = 380.0", "var_name": "targetV"}, {"original_string": "private boolean voltageRegulatorOn = true;", "modifier": "private", "type": "boolean", "declarator": "voltageRegulatorOn = true", "var_name": "voltageRegulatorOn"}, {"original_string": "private final double minP = 25.0;", "modifier": "private final", "type": "double", "declarator": "minP = 25.0", "var_name": "minP"}, {"original_string": "private final double maxP = 45.0;", "modifier": "private final", "type": "double", "declarator": "maxP = 45.0", "var_name": "maxP"}, {"original_string": "private final double minQ = -10.0;", "modifier": "private final", "type": "double", "declarator": "minQ = -10.0", "var_name": "minQ"}, {"original_string": "private final double maxQ = 0.0;", "modifier": "private final", "type": "double", "declarator": "maxQ = 0.0", "var_name": "maxQ"}, {"original_string": "private final boolean connected = true;", "modifier": "private final", "type": "boolean", "declarator": "connected = true", "var_name": "connected"}, {"original_string": "private boolean mainComponent = true;", "modifier": "private", "type": "boolean", "declarator": "mainComponent = true", "var_name": "mainComponent"}, {"original_string": "private BusView genBusView;", "modifier": "private", "type": "BusView", "declarator": "genBusView", "var_name": "genBusView"}, {"original_string": "private Terminal genTerminal;", "modifier": "private", "type": "Terminal", "declarator": "genTerminal", "var_name": "genTerminal"}, {"original_string": "private Generator generator;", "modifier": "private", "type": "Generator", "declarator": "generator", "var_name": "generator"}], "file": "loadflow/loadflow-validation/src/test/java/com/powsybl/loadflow/validation/GeneratorsValidationTest.java"}, "test_case": {"identifier": "checkGenerators", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkGenerators() {\n        // active power should be equal to setpoint\n        assertTrue(GeneratorsValidation.INSTANCE.checkGenerators(generator, strictConfig, NullWriter.NULL_WRITER));\n        Mockito.when(genTerminal.getP()).thenReturn(-39.8);\n        assertFalse(GeneratorsValidation.INSTANCE.checkGenerators(generator, strictConfig, NullWriter.NULL_WRITER));\n\n        // the unit is disconnected\n        Mockito.when(genBusView.getBus()).thenReturn(null);\n        assertTrue(GeneratorsValidation.INSTANCE.checkGenerators(generator, strictConfig, NullWriter.NULL_WRITER));\n    }", "signature": "void checkGenerators()", "full_signature": "@Test public void checkGenerators()", "class_method_signature": "GeneratorsValidationTest.checkGenerators()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "checkGenerators", "thenReturn", "when", "getP", "assertFalse", "checkGenerators", "thenReturn", "when", "getBus", "assertTrue", "checkGenerators"]}, "focal_class": {"identifier": "GeneratorsValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GeneratorsValidation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GeneratorsValidation.class)", "var_name": "LOGGER"}, {"original_string": "public static final GeneratorsValidation INSTANCE = new GeneratorsValidation();", "modifier": "public static final", "type": "GeneratorsValidation", "declarator": "INSTANCE = new GeneratorsValidation()", "var_name": "INSTANCE"}], "methods": [{"identifier": "GeneratorsValidation", "parameters": "()", "modifiers": "private", "return": "", "signature": " GeneratorsValidation()", "full_signature": "private  GeneratorsValidation()", "class_method_signature": "GeneratorsValidation.GeneratorsValidation()", "testcase": false, "constructor": true}, {"identifier": "checkGenerators", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "signature": "boolean checkGenerators(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkGenerators(Network network, ValidationConfig config, Path file)", "class_method_signature": "GeneratorsValidation.checkGenerators(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false}, {"identifier": "checkGenerators", "parameters": "(Network network, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkGenerators(Network network, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkGenerators(Network network, ValidationConfig config, Writer writer)", "class_method_signature": "GeneratorsValidation.checkGenerators(Network network, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkGenerators", "parameters": "(Network network, ValidationConfig config, ValidationWriter generatorsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkGenerators(Network network, ValidationConfig config, ValidationWriter generatorsWriter)", "full_signature": "public boolean checkGenerators(Network network, ValidationConfig config, ValidationWriter generatorsWriter)", "class_method_signature": "GeneratorsValidation.checkGenerators(Network network, ValidationConfig config, ValidationWriter generatorsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkGenerators", "parameters": "(Generator gen, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkGenerators(Generator gen, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkGenerators(Generator gen, ValidationConfig config, Writer writer)", "class_method_signature": "GeneratorsValidation.checkGenerators(Generator gen, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkGenerators", "parameters": "(Generator gen, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "modifiers": "public", "return": "boolean", "signature": "boolean checkGenerators(Generator gen, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "full_signature": "public boolean checkGenerators(Generator gen, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "class_method_signature": "GeneratorsValidation.checkGenerators(Generator gen, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "testcase": false, "constructor": false}, {"identifier": "checkGenerators", "parameters": "(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkGenerators(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkGenerators(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, Writer writer)", "class_method_signature": "GeneratorsValidation.checkGenerators(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkGenerators", "parameters": "(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "modifiers": "public", "return": "boolean", "signature": "boolean checkGenerators(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "full_signature": "public boolean checkGenerators(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "class_method_signature": "GeneratorsValidation.checkGenerators(String id, double p, double q, double v, double targetP, double targetQ, double targetV,\n                                          boolean voltageRegulatorOn, double minP, double maxP, double minQ, double maxQ, boolean connected,\n                                          boolean mainComponent, ValidationConfig config, ValidationWriter generatorsWriter, BalanceTypeGuesser guesser)", "testcase": false, "constructor": false}, {"identifier": "getExpectedP", "parameters": "(BalanceTypeGuesser guesser, String id, double p, double targetP, double minP, double maxP, double threshold)", "modifiers": "private static", "return": "double", "signature": "double getExpectedP(BalanceTypeGuesser guesser, String id, double p, double targetP, double minP, double maxP, double threshold)", "full_signature": "private static double getExpectedP(BalanceTypeGuesser guesser, String id, double p, double targetP, double minP, double maxP, double threshold)", "class_method_signature": "GeneratorsValidation.getExpectedP(BalanceTypeGuesser guesser, String id, double p, double targetP, double minP, double maxP, double threshold)", "testcase": false, "constructor": false}, {"identifier": "checkGeneratorsNaNValues", "parameters": "(String id, double p, double q, double targetP, double targetQ)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkGeneratorsNaNValues(String id, double p, double q, double targetP, double targetQ)", "full_signature": "private static boolean checkGeneratorsNaNValues(String id, double p, double q, double targetP, double targetQ)", "class_method_signature": "GeneratorsValidation.checkGeneratorsNaNValues(String id, double p, double q, double targetP, double targetQ)", "testcase": false, "constructor": false}, {"identifier": "checkGeneratorsValues", "parameters": "(String id, double p, double q, double v, double expectedP, double targetQ, double targetV,\n                                                 boolean voltageRegulatorOn, double minQ, double maxQ, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkGeneratorsValues(String id, double p, double q, double v, double expectedP, double targetQ, double targetV,\n                                                 boolean voltageRegulatorOn, double minQ, double maxQ, ValidationConfig config)", "full_signature": "private static boolean checkGeneratorsValues(String id, double p, double q, double v, double expectedP, double targetQ, double targetV,\n                                                 boolean voltageRegulatorOn, double minQ, double maxQ, ValidationConfig config)", "class_method_signature": "GeneratorsValidation.checkGeneratorsValues(String id, double p, double q, double v, double expectedP, double targetQ, double targetV,\n                                                 boolean voltageRegulatorOn, double minQ, double maxQ, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "getMaxQ", "parameters": "(double minQ, double maxQ)", "modifiers": "private static", "return": "double", "signature": "double getMaxQ(double minQ, double maxQ)", "full_signature": "private static double getMaxQ(double minQ, double maxQ)", "class_method_signature": "GeneratorsValidation.getMaxQ(double minQ, double maxQ)", "testcase": false, "constructor": false}, {"identifier": "getMinQ", "parameters": "(double minQ, double maxQ)", "modifiers": "private static", "return": "double", "signature": "double getMinQ(double minQ, double maxQ)", "full_signature": "private static double getMinQ(double minQ, double maxQ)", "class_method_signature": "GeneratorsValidation.getMinQ(double minQ, double maxQ)", "testcase": false, "constructor": false}, {"identifier": "checkReactiveBoundInversion", "parameters": "(double minQ, double maxQ, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkReactiveBoundInversion(double minQ, double maxQ, ValidationConfig config)", "full_signature": "private static boolean checkReactiveBoundInversion(double minQ, double maxQ, ValidationConfig config)", "class_method_signature": "GeneratorsValidation.checkReactiveBoundInversion(double minQ, double maxQ, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "checkSetpointOutsidePowerBounds", "parameters": "(double targetP, double minP, double maxP, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkSetpointOutsidePowerBounds(double targetP, double minP, double maxP, ValidationConfig config)", "full_signature": "private static boolean checkSetpointOutsidePowerBounds(double targetP, double minP, double maxP, ValidationConfig config)", "class_method_signature": "GeneratorsValidation.checkSetpointOutsidePowerBounds(double targetP, double minP, double maxP, ValidationConfig config)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/GeneratorsValidation.java"}, "focal_method": {"identifier": "checkGenerators", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "body": "public boolean checkGenerators(Network network, ValidationConfig config, Path file) throws IOException {\n        Objects.requireNonNull(network);\n        Objects.requireNonNull(config);\n        Objects.requireNonNull(file);\n        try (Writer writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8)) {\n            return checkGenerators(network, config, writer);\n        }\n    }", "signature": "boolean checkGenerators(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkGenerators(Network network, ValidationConfig config, Path file)", "class_method_signature": "GeneratorsValidation.checkGenerators(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull", "newBufferedWriter", "checkGenerators"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}