{"test_class": {"identifier": "FileVaultNameFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FileVaultNameFinderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FileVaultNameFinderTest.class)", "var_name": "LOGGER"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/FileVaultNameFinderTest.java"}, "test_case": {"identifier": "test_file_noReferences", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_file_noReferences() throws Exception {\n        File p = new File(\"src/test/resources/filevault/noReferences\");\n        FileArchive archive = new FileArchive(p);\n        FileVaultNameFinder finder = new FileVaultNameFinder();\n        Set<QName> names = finder.search(archive);\n\n        LOGGER.info(\"names: {}\", names);\n        assertTrue(\"name search should return no references\", names.isEmpty());\n    }", "signature": "void test_file_noReferences()", "full_signature": "@Test public void test_file_noReferences()", "class_method_signature": "FileVaultNameFinderTest.test_file_noReferences()", "testcase": true, "constructor": false, "invocations": ["search", "info", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "FileVaultNameFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FileVaultNameFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FileVaultNameFinder.class)", "var_name": "LOGGER"}, {"original_string": "private final Set<QName> references = new LinkedHashSet<>();", "modifier": "private final", "type": "Set<QName>", "declarator": "references = new LinkedHashSet<>()", "var_name": "references"}, {"original_string": "private final Set<QName> definitions = new LinkedHashSet<>();", "modifier": "private final", "type": "Set<QName>", "declarator": "definitions = new LinkedHashSet<>()", "var_name": "definitions"}], "methods": [{"identifier": "FileVaultNameFinder", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileVaultNameFinder()", "full_signature": "public  FileVaultNameFinder()", "class_method_signature": "FileVaultNameFinder.FileVaultNameFinder()", "testcase": false, "constructor": true}, {"identifier": "loadBuiltins", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadBuiltins()", "full_signature": " void loadBuiltins()", "class_method_signature": "FileVaultNameFinder.loadBuiltins()", "testcase": false, "constructor": false}, {"identifier": "addReference", "parameters": "(final QName qName)", "modifiers": "", "return": "void", "signature": "void addReference(final QName qName)", "full_signature": " void addReference(final QName qName)", "class_method_signature": "FileVaultNameFinder.addReference(final QName qName)", "testcase": false, "constructor": false}, {"identifier": "addDefinition", "parameters": "(final QName qName)", "modifiers": "", "return": "void", "signature": "void addDefinition(final QName qName)", "full_signature": " void addDefinition(final QName qName)", "class_method_signature": "FileVaultNameFinder.addDefinition(final QName qName)", "testcase": false, "constructor": false}, {"identifier": "collectPrivilegeDefinition", "parameters": "(final @NotNull NamespaceMapping mapping,\n                                    final @NotNull PrivilegeDefinition def)", "modifiers": "", "return": "void", "signature": "void collectPrivilegeDefinition(final @NotNull NamespaceMapping mapping,\n                                    final @NotNull PrivilegeDefinition def)", "full_signature": " void collectPrivilegeDefinition(final @NotNull NamespaceMapping mapping,\n                                    final @NotNull PrivilegeDefinition def)", "class_method_signature": "FileVaultNameFinder.collectPrivilegeDefinition(final @NotNull NamespaceMapping mapping,\n                                    final @NotNull PrivilegeDefinition def)", "testcase": false, "constructor": false}, {"identifier": "collectNodeTypeNames", "parameters": "(final NamespaceMapping mapping, final QNodeTypeDefinition def)", "modifiers": "", "return": "void", "signature": "void collectNodeTypeNames(final NamespaceMapping mapping, final QNodeTypeDefinition def)", "full_signature": " void collectNodeTypeNames(final NamespaceMapping mapping, final QNodeTypeDefinition def)", "class_method_signature": "FileVaultNameFinder.collectNodeTypeNames(final NamespaceMapping mapping, final QNodeTypeDefinition def)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(final Archive archive)", "modifiers": "public", "return": "Set<QName>", "signature": "Set<QName> search(final Archive archive)", "full_signature": "public Set<QName> search(final Archive archive)", "class_method_signature": "FileVaultNameFinder.search(final Archive archive)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(final Archive archive, final Archive.Entry entry)", "modifiers": "", "return": "void", "signature": "void search(final Archive archive, final Archive.Entry entry)", "full_signature": " void search(final Archive archive, final Archive.Entry entry)", "class_method_signature": "FileVaultNameFinder.search(final Archive archive, final Archive.Entry entry)", "testcase": false, "constructor": false}, {"identifier": "handleDocView", "parameters": "(final @NotNull VaultInputSource source)", "modifiers": "", "return": "void", "signature": "void handleDocView(final @NotNull VaultInputSource source)", "full_signature": " void handleDocView(final @NotNull VaultInputSource source)", "class_method_signature": "FileVaultNameFinder.handleDocView(final @NotNull VaultInputSource source)", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/FileVaultNameFinder.java"}, "focal_method": {"identifier": "search", "parameters": "(final Archive archive)", "modifiers": "public", "return": "Set<QName>", "body": "public Set<QName> search(final Archive archive) throws Exception {\n        archive.open(false);\n        PrivilegeDefinitions defs = archive.getMetaInf().getPrivileges();\n        if (defs != null && !defs.getDefinitions().isEmpty()) {\n            NamespaceMapping mapping = defs.getNamespaceMapping();\n            defs.getDefinitions().forEach(def -> collectPrivilegeDefinition(mapping, def));\n        }\n\n        Collection<NodeTypeSet> nodeTypeSets = archive.getMetaInf().getNodeTypes();\n        for (NodeTypeSet nodeTypeSet : nodeTypeSets) {\n            NamespaceMapping names = nodeTypeSet.getNamespaceMapping();\n            nodeTypeSet.getNodeTypes().values().forEach(def -> collectNodeTypeNames(names, def));\n        }\n\n        Archive.Entry rootEntry = archive.getJcrRoot();\n\n        if (rootEntry != null) {\n            this.search(archive, rootEntry);\n        }\n\n        Set<QName> subtracted = new LinkedHashSet<>();\n\n        references.stream()\n                .filter(((Predicate<QName>) definitions::contains).negate())\n                .forEachOrdered(subtracted::add);\n\n        return subtracted;\n    }", "signature": "Set<QName> search(final Archive archive)", "full_signature": "public Set<QName> search(final Archive archive)", "class_method_signature": "FileVaultNameFinder.search(final Archive archive)", "testcase": false, "constructor": false, "invocations": ["open", "getPrivileges", "getMetaInf", "isEmpty", "getDefinitions", "getNamespaceMapping", "forEach", "getDefinitions", "collectPrivilegeDefinition", "getNodeTypes", "getMetaInf", "getNamespaceMapping", "forEach", "values", "getNodeTypes", "collectNodeTypeNames", "getJcrRoot", "search", "forEachOrdered", "filter", "stream", "negate"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}