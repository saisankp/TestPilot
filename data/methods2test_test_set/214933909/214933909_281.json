{"test_class": {"identifier": "GroupDatabaseControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private DatabaseService databaseService;", "modifier": "@MockBean\n    private", "type": "DatabaseService", "declarator": "databaseService", "var_name": "databaseService"}, {"original_string": "@MockBean\n    private GroupDatabaseService groupDatabaseService;", "modifier": "@MockBean\n    private", "type": "GroupDatabaseService", "declarator": "groupDatabaseService", "var_name": "groupDatabaseService"}, {"original_string": "@MockBean\n    private DataBaseDao dataBaseDao;", "modifier": "@MockBean\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/GroupDatabaseControllerTest.java"}, "test_case": {"identifier": "add", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void add() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/groupdb/add\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void add()", "full_signature": "@Test public void add()", "class_method_signature": "GroupDatabaseControllerTest.add()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "content", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "GroupDatabaseController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private DatabaseService databaseService;", "modifier": "@Autowired\n    private", "type": "DatabaseService", "declarator": "databaseService", "var_name": "databaseService"}, {"original_string": "@Autowired\n    private GroupDatabaseService groupDatabaseService;", "modifier": "@Autowired\n    private", "type": "GroupDatabaseService", "declarator": "groupDatabaseService", "var_name": "groupDatabaseService"}, {"original_string": "@Autowired\n    private DataBaseDao dataBaseDao;", "modifier": "@Autowired\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}], "methods": [{"identifier": "getDBListByGroupId", "parameters": "(@RequestParam(\"groupId\") Long id)", "modifiers": "@RequestMapping(value = \"/dblist\") public", "return": "ServiceResult<List<DataBaseInfo>>", "signature": "ServiceResult<List<DataBaseInfo>> getDBListByGroupId(@RequestParam(\"groupId\") Long id)", "full_signature": "@RequestMapping(value = \"/dblist\") public ServiceResult<List<DataBaseInfo>> getDBListByGroupId(@RequestParam(\"groupId\") Long id)", "class_method_signature": "GroupDatabaseController.getDBListByGroupId(@RequestParam(\"groupId\") Long id)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupDatabaseController.add(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupDatabaseController.update(@Validated(UpdateGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupDatabaseController.delete(@Validated(DeleteGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "transfer", "parameters": "(@Validated(TransferGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/transfer\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> transfer(@Validated(TransferGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/transfer\", method = RequestMethod.PUT) public ServiceResult<String> transfer(@Validated(TransferGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupDatabaseController.transfer(@Validated(TransferGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/GroupDatabaseController.java"}, "focal_method": {"identifier": "add", "parameters": "(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/add\", method = RequestMethod.POST)\n    public ServiceResult<String> add(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors) throws Exception {\n        dataBaseInfo.setUpdateUserNo(user.getUserNo());\n        ValidateResult validateRes = groupDatabaseService.validatePermision(user, errors)\n                .addAssert(() -> !groupDatabaseService.isGroupHadDB(dataBaseInfo), \"\u5df2\u5b58\u5728\u6b64DB!!!\")\n                .addAssert(() -> dataBaseDao.updateDataBaseInfo(dataBaseInfo.getId(), dataBaseInfo.getDal_group_id(), dataBaseInfo.getComment()) > 0, message.db_message_add_operation_failed).validate();\n        if (!validateRes.isValid()) {\n            return ServiceResult.fail(validateRes.getSummarize());\n        }\n\n        return databaseService.genDefaultDbsetAndEntry(dataBaseInfo);\n    }", "signature": "ServiceResult<String> add(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupDatabaseController.add(@Validated(AddGroupDB.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["setUpdateUserNo", "getUserNo", "validate", "addAssert", "addAssert", "validatePermision", "isGroupHadDB", "updateDataBaseInfo", "getId", "getDal_group_id", "getComment", "isValid", "fail", "getSummarize", "genDefaultDbsetAndEntry"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}