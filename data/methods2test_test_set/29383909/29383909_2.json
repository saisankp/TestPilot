{"test_class": {"identifier": "DefaultRbTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-common/src/test/java/se/kth/karamel/common/cookbookmeta/DefaultRbTest.java"}, "test_case": {"identifier": "testLoadAttributes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLoadAttributes() throws CookbookUrlException, MetadataParseException, ValidationException, NoKaramelizedCookbookException {\n    Settings.CB_CLASSPATH_MODE = true;\n    KaramelizedCookbook cb = new KaramelizedCookbook(\"testorg/testrepo/tree/master/cookbooks/biobankcloud/hiway-chef\", false);\n    DefaultRb defaultRb = cb.getDefaultRb();\n    \n    Object value = defaultRb.getValue(\"hiway/variantcall/reads/run_ids\");\n    Assert.assertEquals(Lists.newArrayList(\"SRR359188\", \"SRR359195\"), value);\n\n    value = defaultRb.getValue(\"hiway/variantcall/reference/chromosomes\");\n    Assert.assertEquals(Lists.newArrayList(\"chr22\", \"chrY\"), value);\n  }", "signature": "void testLoadAttributes()", "full_signature": "@Test public void testLoadAttributes()", "class_method_signature": "DefaultRbTest.testLoadAttributes()", "testcase": true, "constructor": false, "invocations": ["getDefaultRb", "getValue", "assertEquals", "newArrayList", "getValue", "assertEquals", "newArrayList"]}, "focal_class": {"identifier": "DefaultRb", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<String> contentLines;", "modifier": "private final", "type": "List<String>", "declarator": "contentLines", "var_name": "contentLines"}, {"original_string": "public static String LINE_PATTERN = \"^\\\\s*default\\\\s*(\\\\[:.*\\\\])+\\\\s*=\\\\s*.*\\\\s*$\";", "modifier": "public static", "type": "String", "declarator": "LINE_PATTERN = \"^\\\\s*default\\\\s*(\\\\[:.*\\\\])+\\\\s*=\\\\s*.*\\\\s*$\"", "var_name": "LINE_PATTERN"}, {"original_string": "public static String LINE_PATTERN2 = \"^\\\\s*default\\\\s*(\\\\..*)+\\\\s*=\\\\s*.*\\\\s*$\";", "modifier": "public static", "type": "String", "declarator": "LINE_PATTERN2 = \"^\\\\s*default\\\\s*(\\\\..*)+\\\\s*=\\\\s*.*\\\\s*$\"", "var_name": "LINE_PATTERN2"}, {"original_string": "public static Pattern SIMPLE_VALUE_PATTERN = Pattern.compile(\"^((\\\".*\\\")|('.*')|(\\\\d*)|(\\\\[.*\\\\]))$\");", "modifier": "public static", "type": "Pattern", "declarator": "SIMPLE_VALUE_PATTERN = Pattern.compile(\"^((\\\".*\\\")|('.*')|(\\\\d*)|(\\\\[.*\\\\]))$\")", "var_name": "SIMPLE_VALUE_PATTERN"}, {"original_string": "public static Pattern SKIP_VALUE_PATTERN = Pattern.compile(\"^.*\\\\[:.*\\\\].*$\");", "modifier": "public static", "type": "Pattern", "declarator": "SKIP_VALUE_PATTERN = Pattern.compile(\"^.*\\\\[:.*\\\\].*$\")", "var_name": "SKIP_VALUE_PATTERN"}, {"original_string": "public static Pattern SKIP_VALUE_PATTERN2 = Pattern.compile(\"^.*\\\\..*$\");", "modifier": "public static", "type": "Pattern", "declarator": "SKIP_VALUE_PATTERN2 = Pattern.compile(\"^.*\\\\..*$\")", "var_name": "SKIP_VALUE_PATTERN2"}, {"original_string": "public static Pattern ARRAY_VALUE_PATTERN = Pattern.compile(\"\\\\s*\\\\[(.*)\\\\]s*(,)?\\\\s*\");", "modifier": "public static", "type": "Pattern", "declarator": "ARRAY_VALUE_PATTERN = Pattern.compile(\"\\\\s*\\\\[(.*)\\\\]s*(,)?\\\\s*\")", "var_name": "ARRAY_VALUE_PATTERN"}, {"original_string": "public static Pattern ATTR_DEFAULT_ARRAY_ITEMS = Pattern.compile(\"[\\\\'|\\\\\\\"]([^\\\\'|\\\\\\\"]*)[\\\\'|\\\\\\\"]\");", "modifier": "public static", "type": "Pattern", "declarator": "ATTR_DEFAULT_ARRAY_ITEMS = Pattern.compile(\"[\\\\'|\\\\\\\"]([^\\\\'|\\\\\\\"]*)[\\\\'|\\\\\\\"]\")", "var_name": "ATTR_DEFAULT_ARRAY_ITEMS"}, {"original_string": "private final Map<String, Object> kv = new HashMap<>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "kv = new HashMap<>()", "var_name": "kv"}], "methods": [{"identifier": "DefaultRb", "parameters": "(String content)", "modifiers": "public", "return": "", "signature": " DefaultRb(String content)", "full_signature": "public  DefaultRb(String content)", "class_method_signature": "DefaultRb.DefaultRb(String content)", "testcase": false, "constructor": true}, {"identifier": "loadAttributes", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void loadAttributes()", "full_signature": "public void loadAttributes()", "class_method_signature": "DefaultRb.loadAttributes()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String key)", "modifiers": "public", "return": "Object", "signature": "Object getValue(String key)", "full_signature": "public Object getValue(String key)", "class_method_signature": "DefaultRb.getValue(String key)", "testcase": false, "constructor": false}, {"identifier": "getExperimentContextFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getExperimentContextFormat()", "full_signature": "public String getExperimentContextFormat()", "class_method_signature": "DefaultRb.getExperimentContextFormat()", "testcase": false, "constructor": false}], "file": "karamel-common/src/main/java/se/kth/karamel/common/cookbookmeta/DefaultRb.java"}, "focal_method": {"identifier": "loadAttributes", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void loadAttributes() {\n    for (String line : contentLines) {\n      if (line.matches(LINE_PATTERN) || line.matches(LINE_PATTERN2)) {\n        int indx = line.indexOf(\"=\");\n        String key = line.substring(0, indx - 1).trim().substring(9).replaceAll(\"\\\\[\\\\:\", \"/\").\n            replaceAll(\"\\\\[\\\\'\", \"/\").replaceAll(\"\\\\]\", \"\").replaceAll(\"\\\\'\", \"\").\n            replaceAll(\"\\\\.\", \"/\").trim();\n        String value = line.substring(indx + 1).trim();\n        Matcher m0 = ARRAY_VALUE_PATTERN.matcher(value);\n        Matcher m1 = SIMPLE_VALUE_PATTERN.matcher(value);\n        Matcher m2 = SKIP_VALUE_PATTERN.matcher(value);\n        if (m0.matches() && !m2.matches()) {\n          String sarr = m0.group(1);\n          Matcher m921 = ATTR_DEFAULT_ARRAY_ITEMS.matcher(sarr);\n          List<String> deflist = new ArrayList<>();\n          while (m921.find()) {\n            String item = m921.group(1);\n            deflist.add(item);\n          }\n          kv.put(key, deflist);\n        } else if (m1.matches() && !m2.matches()) {\n          value = m1.group(1);\n          if (value.matches(\"^(\\\".*\\\")|('.*')$\")) {\n            value = value.substring(1, value.length() - 1);\n          }\n          kv.put(key, value);\n        }\n\n      }\n    }\n\n  }", "signature": "void loadAttributes()", "full_signature": "public void loadAttributes()", "class_method_signature": "DefaultRb.loadAttributes()", "testcase": false, "constructor": false, "invocations": ["matches", "matches", "indexOf", "trim", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "replaceAll", "substring", "trim", "substring", "trim", "substring", "matcher", "matcher", "matcher", "matches", "matches", "group", "matcher", "find", "group", "add", "put", "matches", "matches", "group", "matches", "substring", "length", "put"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}