{"test_class": {"identifier": "ConditionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int VALUE = 1;", "modifier": "private static final", "type": "int", "declarator": "VALUE = 1", "var_name": "VALUE"}, {"original_string": "@Mock\n  private Condition mockConditionFalse;", "modifier": "@Mock\n  private", "type": "Condition", "declarator": "mockConditionFalse", "var_name": "mockConditionFalse"}, {"original_string": "@Mock\n  private Condition mockConditionTrue;", "modifier": "@Mock\n  private", "type": "Condition", "declarator": "mockConditionTrue", "var_name": "mockConditionTrue"}, {"original_string": "@Mock\n  private Predicate<Integer> mockPredicateFalse;", "modifier": "@Mock\n  private", "type": "Predicate<Integer>", "declarator": "mockPredicateFalse", "var_name": "mockPredicateFalse"}, {"original_string": "@Mock\n  private Predicate<Integer> mockPredicateTrue;", "modifier": "@Mock\n  private", "type": "Predicate<Integer>", "declarator": "mockPredicateTrue", "var_name": "mockPredicateTrue"}, {"original_string": "@Mock\n  private Supplier<Integer> mockValueSupplier;", "modifier": "@Mock\n  private", "type": "Supplier<Integer>", "declarator": "mockValueSupplier", "var_name": "mockValueSupplier"}], "file": "agera/src/test/java/com/google/android/agera/ConditionsTest.java"}, "test_case": {"identifier": "shouldReturnFalseForAnyWithNonStaticNoTrueCondition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldReturnFalseForAnyWithNonStaticNoTrueCondition() {\n    assertThat(any(mockConditionFalse, mockConditionFalse), doesNotApply());\n  }", "signature": "void shouldReturnFalseForAnyWithNonStaticNoTrueCondition()", "full_signature": "@Test public void shouldReturnFalseForAnyWithNonStaticNoTrueCondition()", "class_method_signature": "ConditionsTest.shouldReturnFalseForAnyWithNonStaticNoTrueCondition()", "testcase": true, "constructor": false, "invocations": ["assertThat", "any", "doesNotApply"]}, "focal_class": {"identifier": "Conditions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "trueCondition", "parameters": "()", "modifiers": "@NonNull public static", "return": "Condition", "signature": "Condition trueCondition()", "full_signature": "@NonNull public static Condition trueCondition()", "class_method_signature": "Conditions.trueCondition()", "testcase": false, "constructor": false}, {"identifier": "falseCondition", "parameters": "()", "modifiers": "@NonNull public static", "return": "Condition", "signature": "Condition falseCondition()", "full_signature": "@NonNull public static Condition falseCondition()", "class_method_signature": "Conditions.falseCondition()", "testcase": false, "constructor": false}, {"identifier": "staticCondition", "parameters": "(final boolean value)", "modifiers": "@NonNull public static", "return": "Condition", "signature": "Condition staticCondition(final boolean value)", "full_signature": "@NonNull public static Condition staticCondition(final boolean value)", "class_method_signature": "Conditions.staticCondition(final boolean value)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(@NonNull final Condition condition)", "modifiers": "@NonNull public static", "return": "Condition", "signature": "Condition not(@NonNull final Condition condition)", "full_signature": "@NonNull public static Condition not(@NonNull final Condition condition)", "class_method_signature": "Conditions.not(@NonNull final Condition condition)", "testcase": false, "constructor": false}, {"identifier": "any", "parameters": "(@NonNull final Condition... conditions)", "modifiers": "@NonNull public static", "return": "Condition", "signature": "Condition any(@NonNull final Condition... conditions)", "full_signature": "@NonNull public static Condition any(@NonNull final Condition... conditions)", "class_method_signature": "Conditions.any(@NonNull final Condition... conditions)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "(@NonNull final Condition... conditions)", "modifiers": "@NonNull public static", "return": "Condition", "signature": "Condition all(@NonNull final Condition... conditions)", "full_signature": "@NonNull public static Condition all(@NonNull final Condition... conditions)", "class_method_signature": "Conditions.all(@NonNull final Condition... conditions)", "testcase": false, "constructor": false}, {"identifier": "predicateAsCondition", "parameters": "(@NonNull final Predicate<T> predicate,\n      @NonNull final Supplier<? extends T> supplier)", "modifiers": "@NonNull public static", "return": "Condition", "signature": "Condition predicateAsCondition(@NonNull final Predicate<T> predicate,\n      @NonNull final Supplier<? extends T> supplier)", "full_signature": "@NonNull public static Condition predicateAsCondition(@NonNull final Predicate<T> predicate,\n      @NonNull final Supplier<? extends T> supplier)", "class_method_signature": "Conditions.predicateAsCondition(@NonNull final Predicate<T> predicate,\n      @NonNull final Supplier<? extends T> supplier)", "testcase": false, "constructor": false}, {"identifier": "composite", "parameters": "(@NonNull final Condition[] conditions,\n      @NonNull final Condition defaultCondition, @NonNull final Condition definingCondition)", "modifiers": "@NonNull private static", "return": "Condition", "signature": "Condition composite(@NonNull final Condition[] conditions,\n      @NonNull final Condition defaultCondition, @NonNull final Condition definingCondition)", "full_signature": "@NonNull private static Condition composite(@NonNull final Condition[] conditions,\n      @NonNull final Condition defaultCondition, @NonNull final Condition definingCondition)", "class_method_signature": "Conditions.composite(@NonNull final Condition[] conditions,\n      @NonNull final Condition defaultCondition, @NonNull final Condition definingCondition)", "testcase": false, "constructor": false}, {"identifier": "Conditions", "parameters": "()", "modifiers": "private", "return": "", "signature": " Conditions()", "full_signature": "private  Conditions()", "class_method_signature": "Conditions.Conditions()", "testcase": false, "constructor": true}], "file": "agera/src/main/java/com/google/android/agera/Conditions.java"}, "focal_method": {"identifier": "any", "parameters": "(@NonNull final Condition... conditions)", "modifiers": "@NonNull public static", "return": "Condition", "body": "@NonNull\n  public static Condition any(@NonNull final Condition... conditions) {\n    return composite(conditions, falseCondition(), trueCondition());\n  }", "signature": "Condition any(@NonNull final Condition... conditions)", "full_signature": "@NonNull public static Condition any(@NonNull final Condition... conditions)", "class_method_signature": "Conditions.any(@NonNull final Condition... conditions)", "testcase": false, "constructor": false, "invocations": ["composite", "falseCondition", "trueCondition"]}, "repository": {"repo_id": 48175620, "url": "https://github.com/google/agera", "language": "Java", "is_fork": false, "fork_count": 669, "stargazer_count": 7333, "size": 968, "license": "licensed"}}