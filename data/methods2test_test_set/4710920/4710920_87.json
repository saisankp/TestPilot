{"test_class": {"identifier": "StaticDirectoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL SCRIPT_URL = URL.valueOf(\"condition://0.0.0.0/com.foo.BarService\");", "modifier": "private", "type": "URL", "declarator": "SCRIPT_URL = URL.valueOf(\"condition://0.0.0.0/com.foo.BarService\")", "var_name": "SCRIPT_URL"}], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectoryTest.java"}, "test_case": {"identifier": "testStaticDirectory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStaticDirectory() {\n        Router router = new ConditionRouterFactory().getRouter(getRouteUrl(\" => \" + \" host = \" + NetUtils.getLocalHost()));\n        List<Router> routers = new ArrayList<Router>();\n        routers.add(router);\n        List<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n        Invoker<String> invoker1 = new MockInvoker<String>(URL.valueOf(\"dubbo://10.20.3.3:20880/com.foo.BarService\"));\n        Invoker<String> invoker2 = new MockInvoker<String>(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880/com.foo.BarService\"));\n        Invoker<String> invoker3 = new MockInvoker<String>(URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880/com.foo.BarService\"));\n        invokers.add(invoker1);\n        invokers.add(invoker2);\n        invokers.add(invoker3);\n        List<Invoker<String>> filteredInvokers = router.route(invokers, URL.valueOf(\"consumer://\" + NetUtils.getLocalHost() + \"/com.foo.BarService\"), new RpcInvocation());\n        StaticDirectory<String> staticDirectory = new StaticDirectory<>(filteredInvokers);\n        boolean isAvailable = staticDirectory.isAvailable();\n        Assertions.assertTrue(!isAvailable);\n        List<Invoker<String>> newInvokers = staticDirectory.list(new MockDirInvocation());\n        Assertions.assertTrue(newInvokers.size() > 0);\n        staticDirectory.destroy();\n        Assertions.assertEquals(0, newInvokers.size());\n    }", "signature": "void testStaticDirectory()", "full_signature": "@Test public void testStaticDirectory()", "class_method_signature": "StaticDirectoryTest.testStaticDirectory()", "testcase": true, "constructor": false, "invocations": ["getRouter", "getRouteUrl", "getLocalHost", "add", "valueOf", "valueOf", "getLocalHost", "valueOf", "getLocalHost", "add", "add", "add", "route", "valueOf", "getLocalHost", "isAvailable", "assertTrue", "list", "assertTrue", "size", "destroy", "assertEquals", "size"]}, "focal_class": {"identifier": "StaticDirectory", "superclass": "extends AbstractDirectory<T>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(StaticDirectory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StaticDirectory.class)", "var_name": "logger"}, {"original_string": "private final List<Invoker<T>> invokers;", "modifier": "private final", "type": "List<Invoker<T>>", "declarator": "invokers", "var_name": "invokers"}], "methods": [{"identifier": "StaticDirectory", "parameters": "(List<Invoker<T>> invokers)", "modifiers": "public", "return": "", "signature": " StaticDirectory(List<Invoker<T>> invokers)", "full_signature": "public  StaticDirectory(List<Invoker<T>> invokers)", "class_method_signature": "StaticDirectory.StaticDirectory(List<Invoker<T>> invokers)", "testcase": false, "constructor": true}, {"identifier": "StaticDirectory", "parameters": "(List<Invoker<T>> invokers, RouterChain<T> routerChain)", "modifiers": "public", "return": "", "signature": " StaticDirectory(List<Invoker<T>> invokers, RouterChain<T> routerChain)", "full_signature": "public  StaticDirectory(List<Invoker<T>> invokers, RouterChain<T> routerChain)", "class_method_signature": "StaticDirectory.StaticDirectory(List<Invoker<T>> invokers, RouterChain<T> routerChain)", "testcase": false, "constructor": true}, {"identifier": "StaticDirectory", "parameters": "(URL url, List<Invoker<T>> invokers)", "modifiers": "public", "return": "", "signature": " StaticDirectory(URL url, List<Invoker<T>> invokers)", "full_signature": "public  StaticDirectory(URL url, List<Invoker<T>> invokers)", "class_method_signature": "StaticDirectory.StaticDirectory(URL url, List<Invoker<T>> invokers)", "testcase": false, "constructor": true}, {"identifier": "StaticDirectory", "parameters": "(URL url, List<Invoker<T>> invokers, RouterChain<T> routerChain)", "modifiers": "public", "return": "", "signature": " StaticDirectory(URL url, List<Invoker<T>> invokers, RouterChain<T> routerChain)", "full_signature": "public  StaticDirectory(URL url, List<Invoker<T>> invokers, RouterChain<T> routerChain)", "class_method_signature": "StaticDirectory.StaticDirectory(URL url, List<Invoker<T>> invokers, RouterChain<T> routerChain)", "testcase": false, "constructor": true}, {"identifier": "getInterface", "parameters": "()", "modifiers": "@Override public", "return": "Class<T>", "signature": "Class<T> getInterface()", "full_signature": "@Override public Class<T> getInterface()", "class_method_signature": "StaticDirectory.getInterface()", "testcase": false, "constructor": false}, {"identifier": "getAllInvokers", "parameters": "()", "modifiers": "@Override public", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> getAllInvokers()", "full_signature": "@Override public List<Invoker<T>> getAllInvokers()", "class_method_signature": "StaticDirectory.getAllInvokers()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "StaticDirectory.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "StaticDirectory.destroy()", "testcase": false, "constructor": false}, {"identifier": "buildRouterChain", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void buildRouterChain()", "full_signature": "public void buildRouterChain()", "class_method_signature": "StaticDirectory.buildRouterChain()", "testcase": false, "constructor": false}, {"identifier": "doList", "parameters": "(Invocation invocation)", "modifiers": "@Override protected", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> doList(Invocation invocation)", "full_signature": "@Override protected List<Invoker<T>> doList(Invocation invocation)", "class_method_signature": "StaticDirectory.doList(Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/directory/StaticDirectory.java"}, "focal_method": {"identifier": "StaticDirectory", "parameters": "(List<Invoker<T>> invokers)", "modifiers": "public", "return": "", "body": "public StaticDirectory(List<Invoker<T>> invokers) {\n        this(null, invokers, null);\n    }", "signature": " StaticDirectory(List<Invoker<T>> invokers)", "full_signature": "public  StaticDirectory(List<Invoker<T>> invokers)", "class_method_signature": "StaticDirectory.StaticDirectory(List<Invoker<T>> invokers)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}