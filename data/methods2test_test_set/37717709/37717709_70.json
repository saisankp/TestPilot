{"test_class": {"identifier": "TestIfStrategy", "superclass": "extends TagStrategyTestBase", "interfaces": "", "fields": [], "file": "org.jvoicexml.profile.vxml21/src/test/java/org/jvoicexml/profile/vxml21/tagstrategy/TestIfStrategy.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception, JVoiceXMLEvent {\n        final Block block = createBlock();\n        final If ifNode = block.appendChild(If.class);\n        ifNode.setCond(\"test == 'horst'\");\n        final Assign assign = ifNode.appendChild(Assign.class);\n        assign.setName(\"test\");\n        assign.setExpr(\"'fritz'\");\n\n        final TagStrategyFactory tagfactory = Mockito\n                .mock(TagStrategyFactory.class);\n        final Profile profile = getContext().getProfile();\n        Mockito.when(profile.getTagStrategyFactory()).thenReturn(tagfactory);\n\n        final DataModel model = getDataModel();\n        Mockito.when(model.evaluateExpression(ifNode.getCond(), Boolean.class))\n                .thenReturn(true);\n\n        final IfStrategy strategy = new IfStrategy();\n        executeTagStrategy(ifNode, strategy);\n\n        Mockito.verify(model).evaluateExpression(ifNode.getCond(),\n                Boolean.class);\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "TestIfStrategy.testExecute()", "testcase": true, "constructor": false, "invocations": ["createBlock", "appendChild", "setCond", "appendChild", "setName", "setExpr", "mock", "getProfile", "getContext", "thenReturn", "when", "getTagStrategyFactory", "getDataModel", "thenReturn", "when", "evaluateExpression", "getCond", "executeTagStrategy", "evaluateExpression", "verify", "getCond"]}, "focal_class": {"identifier": "IfStrategy", "superclass": "extends AbstractTagStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(IfStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(IfStrategy.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "IfStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " IfStrategy()", "full_signature": "  IfStrategy()", "class_method_signature": "IfStrategy.IfStrategy()", "testcase": false, "constructor": true}, {"identifier": "getEvalAttributes", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getEvalAttributes()", "full_signature": "public Collection<String> getEvalAttributes()", "class_method_signature": "IfStrategy.getEvalAttributes()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "IfStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}, {"identifier": "getListToExecute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "modifiers": "private", "return": "NodeList", "signature": "NodeList getListToExecute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "full_signature": "private NodeList getListToExecute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "class_method_signature": "IfStrategy.getListToExecute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}, {"identifier": "checkCondition", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "modifiers": "private", "return": "boolean", "signature": "boolean checkCondition(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "full_signature": "private boolean checkCondition(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "class_method_signature": "IfStrategy.checkCondition(final VoiceXmlInterpreterContext context,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(final NodeList children, final int start)", "modifiers": "private", "return": "NodeList", "signature": "NodeList collect(final NodeList children, final int start)", "full_signature": "private NodeList collect(final NodeList children, final int start)", "class_method_signature": "IfStrategy.collect(final NodeList children, final int start)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.profile.vxml21/src/main/java/org/jvoicexml/profile/vxml21/tagstrategy/IfStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "body": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node) throws JVoiceXMLEvent {\n        final NodeList list = getListToExecute(context, node);\n        if (list == null) {\n            LOGGER.info(\"no condition evaluated to true\");\n\n            return;\n        }\n        final TagStrategyExecutor executor = fia.getTagStrategyExecutor();\n        executor.executeChildNodes(context, interpreter, fia, item, list);\n    }", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "IfStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false, "invocations": ["getListToExecute", "info", "getTagStrategyExecutor", "executeChildNodes"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}