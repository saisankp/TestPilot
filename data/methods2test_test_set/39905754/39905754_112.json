{"test_class": {"identifier": "DFSTreeTest", "superclass": "", "interfaces": "", "fields": [], "file": "Beirut/2015/2015-11-04-DFSOnTree/src/test/java/DFSTreeTest.java"}, "test_case": {"identifier": "a_node_with_two_levels_generates_two_plans", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void\n   a_node_with_two_levels_generates_two_plans(){\n      DFSTree tree = DFSTreeBuilder.aTreeBuilder().withLabel(0)\n        .withChild(DFSTreeBuilder.aTreeBuilder().withLabel(1)\n          .withChild(DFSTreeBuilder.aTreeBuilder().withLabel(2))\n          .withChild(DFSTreeBuilder.aTreeBuilder().withLabel(3))).build();\n      assertThat(tree.generateCombinations()).isEqualTo(Lists.newArrayList(\"0,1,2,3\",\"0,1,3,2\"));\n   }", "signature": "void a_node_with_two_levels_generates_two_plans()", "full_signature": "@Test public void a_node_with_two_levels_generates_two_plans()", "class_method_signature": "DFSTreeTest.a_node_with_two_levels_generates_two_plans()", "testcase": true, "constructor": false, "invocations": ["build", "withChild", "withLabel", "aTreeBuilder", "withChild", "withChild", "withLabel", "aTreeBuilder", "withLabel", "aTreeBuilder", "withLabel", "aTreeBuilder", "isEqualTo", "assertThat", "generateCombinations", "newArrayList"]}, "focal_class": {"identifier": "DFSTree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<DFSTree> nodes= Lists.newArrayList();", "modifier": "private", "type": "List<DFSTree>", "declarator": "nodes= Lists.newArrayList()", "var_name": "nodes"}, {"original_string": "private int label;", "modifier": "private", "type": "int", "declarator": "label", "var_name": "label"}], "methods": [{"identifier": "DFSTree", "parameters": "(int label)", "modifiers": "public", "return": "", "signature": " DFSTree(int label)", "full_signature": "public  DFSTree(int label)", "class_method_signature": "DFSTree.DFSTree(int label)", "testcase": false, "constructor": true}, {"identifier": "edge", "parameters": "(DFSTree child)", "modifiers": "public", "return": "void", "signature": "void edge(DFSTree child)", "full_signature": "public void edge(DFSTree child)", "class_method_signature": "DFSTree.edge(DFSTree child)", "testcase": false, "constructor": false}, {"identifier": "generateCombinations", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> generateCombinations()", "full_signature": "public List<String> generateCombinations()", "class_method_signature": "DFSTree.generateCombinations()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DFSTree.toString()", "testcase": false, "constructor": false}], "file": "Beirut/2015/2015-11-04-DFSOnTree/src/main/java/DFSTree.java"}, "focal_method": {"identifier": "generateCombinations", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> generateCombinations() {\n      ArrayList<String> results = Lists.newArrayList();\n\n      Collection<List<DFSTree>> permutations = Collections2.permutations(nodes);\n\n      for (List<DFSTree> permutation : permutations) {\n         results.add(label + \",\" + Joiner.on(',').join(permutation));\n      }\n\n      List<String> childrenLabels = Lists.newArrayList();\n      for (DFSTree node : nodes) {\n         if(!node.nodes.isEmpty()) {\n            Collection<List<DFSTree>> childrenPermutation = Collections2.permutations(node.nodes);\n            for (List<DFSTree> child : childrenPermutation) {\n               childrenLabels.add(Joiner.on(',').join(child));\n            }\n         }\n      }\n\n      if(childrenLabels.isEmpty()) {\n         return results;\n      }\n      List<String> listOfString = Lists.newArrayList();\n\n      List<List<String>> lists = Lists.cartesianProduct(results, childrenLabels);\n\n      Joiner j  =Joiner.on(\",\");\n      for (List<String> list : lists) {\n         listOfString.add(j.join(list));\n      }\n\n      return listOfString;\n}", "signature": "List<String> generateCombinations()", "full_signature": "public List<String> generateCombinations()", "class_method_signature": "DFSTree.generateCombinations()", "testcase": false, "constructor": false, "invocations": ["newArrayList", "permutations", "add", "join", "on", "newArrayList", "isEmpty", "permutations", "add", "join", "on", "isEmpty", "newArrayList", "cartesianProduct", "on", "add", "join"]}, "repository": {"repo_id": 39905754, "url": "https://github.com/murex/murex-coding-dojo", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1700, "license": "licensed"}}