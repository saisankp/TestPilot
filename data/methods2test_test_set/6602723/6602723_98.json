{"test_class": {"identifier": "TestWindowedEventCounter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WindowedEventCounter impl;", "modifier": "private", "type": "WindowedEventCounter", "declarator": "impl", "var_name": "impl"}, {"original_string": "private StoppedClock clock = new StoppedClock();", "modifier": "private", "type": "StoppedClock", "declarator": "clock = new StoppedClock()", "var_name": "clock"}, {"original_string": "private static int CAPACITY = 3;", "modifier": "private static", "type": "int", "declarator": "CAPACITY = 3", "var_name": "CAPACITY"}, {"original_string": "private static long WINDOW_MILLIS = 5L;", "modifier": "private static", "type": "long", "declarator": "WINDOW_MILLIS = 5L", "var_name": "WINDOW_MILLIS"}], "file": "jrugged-core/src/test/java/org/fishwife/jrugged/TestWindowedEventCounter.java"}, "test_case": {"identifier": "testSettingBadWindowMillisThrowsException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSettingBadWindowMillisThrowsException() {\n        try {\n            impl.setWindowMillis(0);\n            fail(\"should have thrown IllegalArgumentException\");\n        } catch (IllegalArgumentException iae) {\n            // this is expected. ignore and let test pass.\n        }\n    }", "signature": "void testSettingBadWindowMillisThrowsException()", "full_signature": "@Test public void testSettingBadWindowMillisThrowsException()", "class_method_signature": "TestWindowedEventCounter.testSettingBadWindowMillisThrowsException()", "testcase": true, "constructor": false, "invocations": ["setWindowMillis", "fail"]}, "focal_class": {"identifier": "WindowedEventCounter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Clock clock = new SystemClock();", "modifier": "private", "type": "Clock", "declarator": "clock = new SystemClock()", "var_name": "clock"}, {"original_string": "private long windowMillis;", "modifier": "private", "type": "long", "declarator": "windowMillis", "var_name": "windowMillis"}, {"original_string": "private final LinkedList<Long> queue = new LinkedList<Long>();", "modifier": "private final", "type": "LinkedList<Long>", "declarator": "queue = new LinkedList<Long>()", "var_name": "queue"}, {"original_string": "private int capacity;", "modifier": "private", "type": "int", "declarator": "capacity", "var_name": "capacity"}], "methods": [{"identifier": "WindowedEventCounter", "parameters": "(int capacity, long windowMillis)", "modifiers": "public", "return": "", "signature": " WindowedEventCounter(int capacity, long windowMillis)", "full_signature": "public  WindowedEventCounter(int capacity, long windowMillis)", "class_method_signature": "WindowedEventCounter.WindowedEventCounter(int capacity, long windowMillis)", "testcase": false, "constructor": true}, {"identifier": "mark", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void mark()", "full_signature": "public void mark()", "class_method_signature": "WindowedEventCounter.mark()", "testcase": false, "constructor": false}, {"identifier": "tally", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int tally()", "full_signature": "public int tally()", "class_method_signature": "WindowedEventCounter.tally()", "testcase": false, "constructor": false}, {"identifier": "getWindowMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getWindowMillis()", "full_signature": "public long getWindowMillis()", "class_method_signature": "WindowedEventCounter.getWindowMillis()", "testcase": false, "constructor": false}, {"identifier": "setCapacity", "parameters": "(int capacity)", "modifiers": "public", "return": "void", "signature": "void setCapacity(int capacity)", "full_signature": "public void setCapacity(int capacity)", "class_method_signature": "WindowedEventCounter.setCapacity(int capacity)", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCapacity()", "full_signature": "public int getCapacity()", "class_method_signature": "WindowedEventCounter.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "setWindowMillis", "parameters": "(long windowMillis)", "modifiers": "public", "return": "void", "signature": "void setWindowMillis(long windowMillis)", "full_signature": "public void setWindowMillis(long windowMillis)", "class_method_signature": "WindowedEventCounter.setWindowMillis(long windowMillis)", "testcase": false, "constructor": false}, {"identifier": "setClock", "parameters": "(Clock clock)", "modifiers": "protected", "return": "void", "signature": "void setClock(Clock clock)", "full_signature": "protected void setClock(Clock clock)", "class_method_signature": "WindowedEventCounter.setClock(Clock clock)", "testcase": false, "constructor": false}], "file": "jrugged-core/src/main/java/org/fishwife/jrugged/WindowedEventCounter.java"}, "focal_method": {"identifier": "setWindowMillis", "parameters": "(long windowMillis)", "modifiers": "public", "return": "void", "body": "public void setWindowMillis(long windowMillis) {\n        if (windowMillis <= 0) {\n            throw new IllegalArgumentException(\"windowMillis must be greater than 0\");\n        }\n\n        // changing windowMillis while tally() is draining expired events could\n        // lead to weirdness, let's lock for this.\n        synchronized (queue) {\n            this.windowMillis = windowMillis;\n        }\n    }", "signature": "void setWindowMillis(long windowMillis)", "full_signature": "public void setWindowMillis(long windowMillis)", "class_method_signature": "WindowedEventCounter.setWindowMillis(long windowMillis)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}