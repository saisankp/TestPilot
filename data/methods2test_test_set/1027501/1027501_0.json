{"test_class": {"identifier": "TestHttpSender", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TestHttpSender.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TestHttpSender.class)", "var_name": "logger"}, {"original_string": "private static final File eventsFile = new File(System.getProperty(\"java.io.tmpdir\"), \"TestHttpSender-\" + System.currentTimeMillis());", "modifier": "private static final", "type": "File", "declarator": "eventsFile = new File(System.getProperty(\"java.io.tmpdir\"), \"TestHttpSender-\" + System.currentTimeMillis())", "var_name": "eventsFile"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private Server errorServer;", "modifier": "private", "type": "Server", "declarator": "errorServer", "var_name": "errorServer"}, {"original_string": "private HttpSender sender;", "modifier": "private", "type": "HttpSender", "declarator": "sender", "var_name": "sender"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private CallbackHandler failureCallbackHandler;", "modifier": "@SuppressWarnings(\"unused\")\n    private", "type": "CallbackHandler", "declarator": "failureCallbackHandler", "var_name": "failureCallbackHandler"}, {"original_string": "@SuppressWarnings(\"unused\")\n    private CallbackHandler successCallbackHandler;", "modifier": "@SuppressWarnings(\"unused\")\n    private", "type": "CallbackHandler", "declarator": "successCallbackHandler", "var_name": "successCallbackHandler"}], "file": "http/src/test/java/com/ning/metrics/eventtracker/TestHttpSender.java"}, "test_case": {"identifier": "testSend", "parameters": "()", "modifiers": "@Test(groups = \"slow\") public", "return": "void", "body": "@Test(groups = \"slow\")\n    public void testSend() throws Exception\n    {\n        // test send before server's initialized. hope for timeout failure\n        logger.info(\"sending\");\n        sender.send(eventsFile, failureCallbackHandler);\n        Thread.sleep((long) 100); // 100 is long enough for it to timeout\n\n        // initialize server and test again.\n        server.start();\n        logger.info(\"Started server\");\n        logger.info(\"sending\");\n        sender.send(eventsFile, successCallbackHandler);\n        Thread.sleep((long) 500);\n        server.stop();\n    }", "signature": "void testSend()", "full_signature": "@Test(groups = \"slow\") public void testSend()", "class_method_signature": "TestHttpSender.testSend()", "testcase": true, "constructor": false, "invocations": ["info", "send", "sleep", "start", "info", "info", "send", "sleep", "stop"]}, "focal_class": {"identifier": "HttpSender", "superclass": "", "interfaces": "implements EventSender", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(HttpSender.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(HttpSender.class)", "var_name": "log"}, {"original_string": "private final AtomicLong activeRequests = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "activeRequests = new AtomicLong(0)", "var_name": "activeRequests"}, {"original_string": "private final LocalQueueAndWorkers workers;", "modifier": "private final", "type": "LocalQueueAndWorkers", "declarator": "workers", "var_name": "workers"}, {"original_string": "private final ThreadSafeAsyncHttpClient client;", "modifier": "private final", "type": "ThreadSafeAsyncHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final long httpMaxWaitTimeInMillis;", "modifier": "private final", "type": "long", "declarator": "httpMaxWaitTimeInMillis", "var_name": "httpMaxWaitTimeInMillis"}, {"original_string": "private final Timer sendTimer;", "modifier": "private final", "type": "Timer", "declarator": "sendTimer", "var_name": "sendTimer"}], "methods": [{"identifier": "HttpSender", "parameters": "(final String collectorHost, final int collectorPort, final EventType eventType,\n                      final long httpMaxWaitTimeInMillis, final long httpMaxKeepAliveInMillis, final int httpWorkersPoolSize)", "modifiers": "public", "return": "", "signature": " HttpSender(final String collectorHost, final int collectorPort, final EventType eventType,\n                      final long httpMaxWaitTimeInMillis, final long httpMaxKeepAliveInMillis, final int httpWorkersPoolSize)", "full_signature": "public  HttpSender(final String collectorHost, final int collectorPort, final EventType eventType,\n                      final long httpMaxWaitTimeInMillis, final long httpMaxKeepAliveInMillis, final int httpWorkersPoolSize)", "class_method_signature": "HttpSender.HttpSender(final String collectorHost, final int collectorPort, final EventType eventType,\n                      final long httpMaxWaitTimeInMillis, final long httpMaxKeepAliveInMillis, final int httpWorkersPoolSize)", "testcase": false, "constructor": true}, {"identifier": "HttpSender", "parameters": "(final ThreadSafeAsyncHttpClient client, final long httpMaxWaitTimeInMillis, final Timer sendTimer, final int httpWorkersPoolSize)", "modifiers": "", "return": "", "signature": " HttpSender(final ThreadSafeAsyncHttpClient client, final long httpMaxWaitTimeInMillis, final Timer sendTimer, final int httpWorkersPoolSize)", "full_signature": "  HttpSender(final ThreadSafeAsyncHttpClient client, final long httpMaxWaitTimeInMillis, final Timer sendTimer, final int httpWorkersPoolSize)", "class_method_signature": "HttpSender.HttpSender(final ThreadSafeAsyncHttpClient client, final long httpMaxWaitTimeInMillis, final Timer sendTimer, final int httpWorkersPoolSize)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(final File file, final CallbackHandler handler)", "modifiers": "@Override public", "return": "void", "signature": "void send(final File file, final CallbackHandler handler)", "full_signature": "@Override public void send(final File file, final CallbackHandler handler)", "class_method_signature": "HttpSender.send(final File file, final CallbackHandler handler)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void close()", "full_signature": "@Override public synchronized void close()", "class_method_signature": "HttpSender.close()", "testcase": false, "constructor": false}], "file": "http/src/main/java/com/ning/metrics/eventtracker/HttpSender.java"}, "focal_method": {"identifier": "send", "parameters": "(final File file, final CallbackHandler handler)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void send(final File file, final CallbackHandler handler)\n    {\n        log.info(\"Sending local file to collector: {}\", file.getAbsolutePath());\n        final long startTime = System.nanoTime();\n\n        final AsyncCompletionHandler<Response> asyncCompletionHandler = new AsyncCompletionHandler<Response>()\n        {\n            @Override\n            public Response onCompleted(final Response response)\n            {\n                activeRequests.decrementAndGet();\n\n                if (response.getStatusCode() == 202) {\n                    handler.onSuccess(file);\n                }\n                else {\n                    handler.onError(new IOException(String.format(\"Received response %d: %s\",\n                                                                  response.getStatusCode(), response.getStatusText())), file);\n                }\n\n                sendTimer.update(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);\n                return response; // never read\n            }\n\n            @Override\n            public void onThrowable(final Throwable t)\n            {\n                activeRequests.decrementAndGet();\n                handler.onError(t, file);\n            }\n        };\n\n        final HttpJob job = new HttpJob(client, file, asyncCompletionHandler);\n        workers.offer(job);\n    }", "signature": "void send(final File file, final CallbackHandler handler)", "full_signature": "@Override public void send(final File file, final CallbackHandler handler)", "class_method_signature": "HttpSender.send(final File file, final CallbackHandler handler)", "testcase": false, "constructor": false, "invocations": ["info", "getAbsolutePath", "nanoTime", "decrementAndGet", "getStatusCode", "onSuccess", "onError", "format", "getStatusCode", "getStatusText", "update", "nanoTime", "decrementAndGet", "onError", "offer"]}, "repository": {"repo_id": 1027501, "url": "https://github.com/pierre/eventtracker", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 10, "size": 509, "license": "licensed"}}