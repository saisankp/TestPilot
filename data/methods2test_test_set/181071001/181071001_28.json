{"test_class": {"identifier": "TestDescriptorUtils", "superclass": "", "interfaces": "", "fields": [], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/test/java/com/cloudera/cem/efm/validation/TestDescriptorUtils.java"}, "test_case": {"identifier": "testMappingSomeTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMappingSomeTrue() {\n        PropertyDescriptor desc = TestPropertyValidationContext.createDescriptor(\"boolean\", true, Arrays.asList(\"true\", \"false\"), \"false\");\n        desc.setValidator(\"BOOLEAN_VALIDATOR\");\n        desc.setDescription(\"oh description\");\n        desc.setSensitive(true);\n        org.apache.nifi.components.PropertyDescriptor otherDescriptor = DescriptorUtils.toComponentDescriptor(desc);\n\n        // can't use a reflection equals since they are different types\n        assertEquals(desc.getAllowableValues().size(),otherDescriptor.getAllowableValues().size());\n        assertEquals(desc.getDefaultValue(),otherDescriptor.getDefaultValue());\n        assertEquals(desc.getDescription(),otherDescriptor.getDescription());\n        assertEquals(desc.getDisplayName(),otherDescriptor.getDisplayName());\n        assertEquals(desc.getName(),otherDescriptor.getName());\n        assertEquals(desc.getSensitive(),otherDescriptor.isSensitive());\n        assertEquals(desc.getRequired(),otherDescriptor.isRequired());\n    }", "signature": "void testMappingSomeTrue()", "full_signature": "@Test public void testMappingSomeTrue()", "class_method_signature": "TestDescriptorUtils.testMappingSomeTrue()", "testcase": true, "constructor": false, "invocations": ["createDescriptor", "asList", "setValidator", "setDescription", "setSensitive", "toComponentDescriptor", "assertEquals", "size", "getAllowableValues", "size", "getAllowableValues", "assertEquals", "getDefaultValue", "getDefaultValue", "assertEquals", "getDescription", "getDescription", "assertEquals", "getDisplayName", "getDisplayName", "assertEquals", "getName", "getName", "assertEquals", "getSensitive", "isSensitive", "assertEquals", "getRequired", "isRequired"]}, "focal_class": {"identifier": "DescriptorUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toComponentDescriptor", "parameters": "(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "modifiers": "public static final", "return": "org.apache.nifi.components.PropertyDescriptor", "signature": "org.apache.nifi.components.PropertyDescriptor toComponentDescriptor(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "full_signature": "public static final org.apache.nifi.components.PropertyDescriptor toComponentDescriptor(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "class_method_signature": "DescriptorUtils.toComponentDescriptor(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "testcase": false, "constructor": false}], "file": "efm/efm-flow-designer/efm-flow-designer-framework/src/main/java/com/cloudera/cem/efm/validation/DescriptorUtils.java"}, "focal_method": {"identifier": "toComponentDescriptor", "parameters": "(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "modifiers": "public static final", "return": "org.apache.nifi.components.PropertyDescriptor", "body": "public static final org.apache.nifi.components.PropertyDescriptor toComponentDescriptor(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor) {\n        Set<String> allowableValues = new HashSet<>();\n        if (null != descriptor.getAllowableValues())\n        descriptor.getAllowableValues().stream().map(e -> e.getValue()).forEach(allowableValues::add);\n        org.apache.nifi.components.PropertyDescriptor desc = new org.apache.nifi.components.PropertyDescriptor.Builder()\n                .defaultValue(descriptor.getDefaultValue())\n                .description(descriptor.getDescription())\n                .dynamic(descriptor.isDynamic())\n                .required(descriptor.getRequired())\n                .sensitive(descriptor.getSensitive())\n                .name(descriptor.getName())\n                .displayName(descriptor.getDisplayName())\n                .allowableValues(allowableValues.isEmpty() ? null : allowableValues).dynamic(descriptor.isDynamic())\n                .build();\n        return desc;\n    }", "signature": "org.apache.nifi.components.PropertyDescriptor toComponentDescriptor(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "full_signature": "public static final org.apache.nifi.components.PropertyDescriptor toComponentDescriptor(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "class_method_signature": "DescriptorUtils.toComponentDescriptor(\n            com.cloudera.cem.efm.model.extension.PropertyDescriptor descriptor)", "testcase": false, "constructor": false, "invocations": ["getAllowableValues", "forEach", "map", "stream", "getAllowableValues", "getValue", "build", "dynamic", "allowableValues", "displayName", "name", "sensitive", "required", "dynamic", "description", "defaultValue", "getDefaultValue", "getDescription", "isDynamic", "getRequired", "getSensitive", "getName", "getDisplayName", "isEmpty", "isDynamic"]}, "repository": {"repo_id": 181071001, "url": "https://github.com/hortonworks/efm", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 2003, "license": "licensed"}}