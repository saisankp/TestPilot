{"test_class": {"identifier": "StddevpTest", "superclass": "", "interfaces": "", "fields": [], "file": "streams/functions/src/test/java/com/hortonworks/streamline/streams/udaf/StddevpTest.java"}, "test_case": {"identifier": "testResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResult() throws Exception {\n        Stddevp stddevp = new Stddevp();\n        Stddev stddev = new Stddev();\n        Variancep variancep = new Variancep();\n        Variance variance = new Variance();\n        Mean meanObj = new Mean();\n        StddevOnline stddevpAgg = stddevp.init();\n        StddevOnline stddevAgg = stddevp.init();\n        StddevOnline variancepAgg = stddevp.init();\n        StddevOnline varianceAgg = stddevp.init();\n        StddevOnline meanAgg = stddevp.init();\n        double arr[] = {1, 2, 2, 3, 3, 4, 5};\n        double sum = 0;\n        for (double i : arr) {\n            stddevpAgg = stddevp.add(stddevpAgg, i);\n            stddevAgg = stddev.add(stddevAgg, i);\n            variancepAgg = stddev.add(variancepAgg, i);\n            varianceAgg = stddev.add(varianceAgg, i);\n            meanAgg = meanObj.add(meanAgg, i);\n            sum += i;\n        }\n        double mean = sum / arr.length;\n        double sqsum = 0.0;\n        for (double i : arr) {\n            sqsum += (mean - i) * (mean - i);\n        }\n        Assert.assertEquals(mean, meanObj.result(meanAgg), .0001);\n        Assert.assertEquals(Math.sqrt(sqsum / arr.length), stddevp.result(stddevpAgg), .0001);\n        Assert.assertEquals(Math.sqrt(sqsum / (arr.length - 1)), stddev.result(stddevAgg), .0001);\n        Assert.assertEquals(sqsum / arr.length, variancep.result(variancepAgg), .0001);\n        Assert.assertEquals(sqsum / (arr.length - 1), variance.result(varianceAgg), .0001);\n    }", "signature": "void testResult()", "full_signature": "@Test public void testResult()", "class_method_signature": "StddevpTest.testResult()", "testcase": true, "constructor": false, "invocations": ["init", "init", "init", "init", "init", "add", "add", "add", "add", "add", "assertEquals", "result", "assertEquals", "sqrt", "result", "assertEquals", "sqrt", "result", "assertEquals", "result", "assertEquals", "result"]}, "focal_class": {"identifier": "Stddevp", "superclass": "", "interfaces": "implements UDAF<StddevOnline, Number, Double>", "fields": [], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "StddevOnline", "signature": "StddevOnline init()", "full_signature": "@Override public StddevOnline init()", "class_method_signature": "Stddevp.init()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(StddevOnline aggregate, Number val)", "modifiers": "@Override public", "return": "StddevOnline", "signature": "StddevOnline add(StddevOnline aggregate, Number val)", "full_signature": "@Override public StddevOnline add(StddevOnline aggregate, Number val)", "class_method_signature": "Stddevp.add(StddevOnline aggregate, Number val)", "testcase": false, "constructor": false}, {"identifier": "result", "parameters": "(StddevOnline aggregate)", "modifiers": "@Override public", "return": "Double", "signature": "Double result(StddevOnline aggregate)", "full_signature": "@Override public Double result(StddevOnline aggregate)", "class_method_signature": "Stddevp.result(StddevOnline aggregate)", "testcase": false, "constructor": false}], "file": "streams/functions/src/main/java/com/hortonworks/streamline/streams/udaf/Stddevp.java"}, "focal_method": {"identifier": "result", "parameters": "(StddevOnline aggregate)", "modifiers": "@Override public", "return": "Double", "body": "@Override\n    public Double result(StddevOnline aggregate) {\n        return aggregate.stddevp();\n    }", "signature": "Double result(StddevOnline aggregate)", "full_signature": "@Override public Double result(StddevOnline aggregate)", "class_method_signature": "Stddevp.result(StddevOnline aggregate)", "testcase": false, "constructor": false, "invocations": ["stddevp"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}