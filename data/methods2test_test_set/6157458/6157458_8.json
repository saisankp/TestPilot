{"test_class": {"identifier": "DefaultExtensionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExtensionFactory extensionFactory;", "modifier": "private", "type": "ExtensionFactory", "declarator": "extensionFactory", "var_name": "extensionFactory"}], "file": "pf4j/src/test/java/org/pf4j/DefaultExtensionFactoryTest.java"}, "test_case": {"identifier": "testCreateFailConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateFailConstructor() {\n        assertThrows(PluginRuntimeException.class, () -> extensionFactory.create(FailTestExtension.class));\n    }", "signature": "void testCreateFailConstructor()", "full_signature": "@Test public void testCreateFailConstructor()", "class_method_signature": "DefaultExtensionFactoryTest.testCreateFailConstructor()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "create"]}, "focal_class": {"identifier": "DefaultExtensionFactory", "superclass": "", "interfaces": "implements ExtensionFactory", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultExtensionFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultExtensionFactory.class)", "var_name": "log"}], "methods": [{"identifier": "create", "parameters": "(Class<T> extensionClass)", "modifiers": "@Override public", "return": "T", "signature": "T create(Class<T> extensionClass)", "full_signature": "@Override public T create(Class<T> extensionClass)", "class_method_signature": "DefaultExtensionFactory.create(Class<T> extensionClass)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/DefaultExtensionFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Class<T> extensionClass)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T create(Class<T> extensionClass) {\n        log.debug(\"Create instance for extension '{}'\", extensionClass.getName());\n        try {\n            return extensionClass.newInstance();\n        } catch (Exception e) {\n            throw new PluginRuntimeException(e);\n        }\n    }", "signature": "T create(Class<T> extensionClass)", "full_signature": "@Override public T create(Class<T> extensionClass)", "class_method_signature": "DefaultExtensionFactory.create(Class<T> extensionClass)", "testcase": false, "constructor": false, "invocations": ["debug", "getName", "newInstance"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}