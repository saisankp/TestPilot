{"test_class": {"identifier": "AbstractHashGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/AbstractHashGeneratorTest.java"}, "test_case": {"identifier": "testLowestThreeBits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLowestThreeBits() throws Exception {\n        assertThat(AbstractHashGenerator.lowestThreeBits(0L), is(0));\n        assertThat(AbstractHashGenerator.lowestThreeBits(1L), is(1));\n        assertThat(AbstractHashGenerator.lowestThreeBits(2L), is(2));\n        assertThat(AbstractHashGenerator.lowestThreeBits(3L), is(3));\n        assertThat(AbstractHashGenerator.lowestThreeBits(4L), is(4));\n        assertThat(AbstractHashGenerator.lowestThreeBits(5L), is(5));\n        assertThat(AbstractHashGenerator.lowestThreeBits(6L), is(6));\n        assertThat(AbstractHashGenerator.lowestThreeBits(7L), is(7));\n\n        // check we don't exceed 7\n        assertThat(AbstractHashGenerator.lowestThreeBits(8L), is(0));\n        assertThat(AbstractHashGenerator.lowestThreeBits(9L), is(1));\n        assertThat(AbstractHashGenerator.lowestThreeBits(10L), is(2));\n        assertThat(AbstractHashGenerator.lowestThreeBits(11L), is(3));\n        assertThat(AbstractHashGenerator.lowestThreeBits(12L), is(4));\n        assertThat(AbstractHashGenerator.lowestThreeBits(13L), is(5));\n        assertThat(AbstractHashGenerator.lowestThreeBits(14L), is(6));\n        assertThat(AbstractHashGenerator.lowestThreeBits(15L), is(7));\n        assertThat(AbstractHashGenerator.lowestThreeBits(16L), is(0));\n\n        // max/min numbers\n        assertThat(AbstractHashGenerator.lowestThreeBits(Long.MAX_VALUE), is(7));\n        assertThat(AbstractHashGenerator.lowestThreeBits(Long.MIN_VALUE), is(0));\n    }", "signature": "void testLowestThreeBits()", "full_signature": "@Test public void testLowestThreeBits()", "class_method_signature": "AbstractHashGeneratorTest.testLowestThreeBits()", "testcase": true, "constructor": false, "invocations": ["assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is", "assertThat", "lowestThreeBits", "is"]}, "focal_class": {"identifier": "AbstractHashGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Pseudorandom pseudorandom;", "modifier": "private final", "type": "Pseudorandom", "declarator": "pseudorandom", "var_name": "pseudorandom"}], "methods": [{"identifier": "AbstractHashGenerator", "parameters": "(Pseudorandom pseudorandom)", "modifiers": "public", "return": "", "signature": " AbstractHashGenerator(Pseudorandom pseudorandom)", "full_signature": "public  AbstractHashGenerator(Pseudorandom pseudorandom)", "class_method_signature": "AbstractHashGenerator.AbstractHashGenerator(Pseudorandom pseudorandom)", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(long[] src)", "modifiers": "static", "return": "long[]", "signature": "long[] copy(long[] src)", "full_signature": "static long[] copy(long[] src)", "class_method_signature": "AbstractHashGenerator.copy(long[] src)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(long[] src, long[] dest)", "modifiers": "static", "return": "void", "signature": "void copy(long[] src, long[] dest)", "full_signature": "static void copy(long[] src, long[] dest)", "class_method_signature": "AbstractHashGenerator.copy(long[] src, long[] dest)", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "(long seed)", "modifiers": "", "return": "long", "signature": "long rotate(long seed)", "full_signature": " long rotate(long seed)", "class_method_signature": "AbstractHashGenerator.rotate(long seed)", "testcase": false, "constructor": false}, {"identifier": "rotate", "parameters": "(long value, int n)", "modifiers": "", "return": "long", "signature": "long rotate(long value, int n)", "full_signature": " long rotate(long value, int n)", "class_method_signature": "AbstractHashGenerator.rotate(long value, int n)", "testcase": false, "constructor": false}, {"identifier": "lowestThreeBits", "parameters": "(long value)", "modifiers": "static", "return": "int", "signature": "int lowestThreeBits(long value)", "full_signature": "static int lowestThreeBits(long value)", "class_method_signature": "AbstractHashGenerator.lowestThreeBits(long value)", "testcase": false, "constructor": false}, {"identifier": "distribute", "parameters": "(long value)", "modifiers": "", "return": "long", "signature": "long distribute(long value)", "full_signature": " long distribute(long value)", "class_method_signature": "AbstractHashGenerator.distribute(long value)", "testcase": false, "constructor": false}, {"identifier": "toAdjList", "parameters": "(IAtomContainer container)", "modifiers": "static", "return": "int[][]", "signature": "int[][] toAdjList(IAtomContainer container)", "full_signature": "static int[][] toAdjList(IAtomContainer container)", "class_method_signature": "AbstractHashGenerator.toAdjList(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/AbstractHashGenerator.java"}, "focal_method": {"identifier": "lowestThreeBits", "parameters": "(long value)", "modifiers": "static", "return": "int", "body": "static int lowestThreeBits(long value) {\n        return (int) (value & 0x7);\n    }", "signature": "int lowestThreeBits(long value)", "full_signature": "static int lowestThreeBits(long value)", "class_method_signature": "AbstractHashGenerator.lowestThreeBits(long value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}