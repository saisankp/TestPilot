{"test_class": {"identifier": "TestEmbeddedAgent", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n      .getLogger(TestEmbeddedAgent.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n      .getLogger(TestEmbeddedAgent.class)", "var_name": "LOGGER"}, {"original_string": "private static final String HOSTNAME = \"localhost\";", "modifier": "private static final", "type": "String", "declarator": "HOSTNAME = \"localhost\"", "var_name": "HOSTNAME"}, {"original_string": "private static AtomicInteger serialNumber = new AtomicInteger(0);", "modifier": "private static", "type": "AtomicInteger", "declarator": "serialNumber = new AtomicInteger(0)", "var_name": "serialNumber"}, {"original_string": "private EmbeddedAgent agent;", "modifier": "private", "type": "EmbeddedAgent", "declarator": "agent", "var_name": "agent"}, {"original_string": "private Map<String, String> properties;", "modifier": "private", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private EventCollector eventCollector;", "modifier": "private", "type": "EventCollector", "declarator": "eventCollector", "var_name": "eventCollector"}, {"original_string": "private NettyServer nettyServer;", "modifier": "private", "type": "NettyServer", "declarator": "nettyServer", "var_name": "nettyServer"}, {"original_string": "private Map<String, String> headers;", "modifier": "private", "type": "Map<String, String>", "declarator": "headers", "var_name": "headers"}, {"original_string": "private byte[] body;", "modifier": "private", "type": "byte[]", "declarator": "body", "var_name": "body"}], "file": "flume-ng-embedded-agent/src/test/java/org/apache/flume/agent/embedded/TestEmbeddedAgent.java"}, "test_case": {"identifier": "testPutAll", "parameters": "()", "modifiers": "@Test(timeout = 30000L) public", "return": "void", "body": "@Test(timeout = 30000L)\n  public void testPutAll() throws Exception {\n    List<Event> events = Lists.newArrayList();\n    events.add(EventBuilder.withBody(body, headers));\n    agent.configure(properties);\n    agent.start();\n    agent.putAll(events);\n\n    Event event;\n    while ((event = eventCollector.poll()) == null) {\n      Thread.sleep(500L);\n    }\n    Assert.assertNotNull(event);\n    Assert.assertArrayEquals(body, event.getBody());\n    Assert.assertEquals(headers, event.getHeaders());\n  }", "signature": "void testPutAll()", "full_signature": "@Test(timeout = 30000L) public void testPutAll()", "class_method_signature": "TestEmbeddedAgent.testPutAll()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "add", "withBody", "configure", "start", "putAll", "poll", "sleep", "assertNotNull", "assertArrayEquals", "getBody", "assertEquals", "getHeaders"]}, "focal_class": {"identifier": "EmbeddedAgent", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n      .getLogger(EmbeddedAgent.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n      .getLogger(EmbeddedAgent.class)", "var_name": "LOGGER"}, {"original_string": "private final MaterializedConfigurationProvider configurationProvider;", "modifier": "private final", "type": "MaterializedConfigurationProvider", "declarator": "configurationProvider", "var_name": "configurationProvider"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final LifecycleSupervisor supervisor;", "modifier": "private final", "type": "LifecycleSupervisor", "declarator": "supervisor", "var_name": "supervisor"}, {"original_string": "private State state;", "modifier": "private", "type": "State", "declarator": "state", "var_name": "state"}, {"original_string": "private SourceRunner sourceRunner;", "modifier": "private", "type": "SourceRunner", "declarator": "sourceRunner", "var_name": "sourceRunner"}, {"original_string": "private Channel channel;", "modifier": "private", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private SinkRunner sinkRunner;", "modifier": "private", "type": "SinkRunner", "declarator": "sinkRunner", "var_name": "sinkRunner"}, {"original_string": "private EmbeddedSource embeddedSource;", "modifier": "private", "type": "EmbeddedSource", "declarator": "embeddedSource", "var_name": "embeddedSource"}], "methods": [{"identifier": "EmbeddedAgent", "parameters": "(MaterializedConfigurationProvider configurationProvider,\n      String name)", "modifiers": "@InterfaceAudience.Private @InterfaceStability.Unstable @VisibleForTesting", "return": "", "signature": " EmbeddedAgent(MaterializedConfigurationProvider configurationProvider,\n      String name)", "full_signature": "@InterfaceAudience.Private @InterfaceStability.Unstable @VisibleForTesting  EmbeddedAgent(MaterializedConfigurationProvider configurationProvider,\n      String name)", "class_method_signature": "EmbeddedAgent.EmbeddedAgent(MaterializedConfigurationProvider configurationProvider,\n      String name)", "testcase": false, "constructor": true}, {"identifier": "EmbeddedAgent", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " EmbeddedAgent(String name)", "full_signature": "public  EmbeddedAgent(String name)", "class_method_signature": "EmbeddedAgent.EmbeddedAgent(String name)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Map<String, String> properties)", "modifiers": "public", "return": "void", "signature": "void configure(Map<String, String> properties)", "full_signature": "public void configure(Map<String, String> properties)", "class_method_signature": "EmbeddedAgent.configure(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "EmbeddedAgent.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "EmbeddedAgent.stop()", "testcase": false, "constructor": false}, {"identifier": "doConfigure", "parameters": "(Map<String, String> properties)", "modifiers": "private", "return": "void", "signature": "void doConfigure(Map<String, String> properties)", "full_signature": "private void doConfigure(Map<String, String> properties)", "class_method_signature": "EmbeddedAgent.doConfigure(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Event event)", "modifiers": "public", "return": "void", "signature": "void put(Event event)", "full_signature": "public void put(Event event)", "class_method_signature": "EmbeddedAgent.put(Event event)", "testcase": false, "constructor": false}, {"identifier": "putAll", "parameters": "(List<Event> events)", "modifiers": "public", "return": "void", "signature": "void putAll(List<Event> events)", "full_signature": "public void putAll(List<Event> events)", "class_method_signature": "EmbeddedAgent.putAll(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doStart()", "full_signature": "private void doStart()", "class_method_signature": "EmbeddedAgent.doStart()", "testcase": false, "constructor": false}, {"identifier": "stopLogError", "parameters": "(LifecycleAware lifeCycleAware)", "modifiers": "private", "return": "void", "signature": "void stopLogError(LifecycleAware lifeCycleAware)", "full_signature": "private void stopLogError(LifecycleAware lifeCycleAware)", "class_method_signature": "EmbeddedAgent.stopLogError(LifecycleAware lifeCycleAware)", "testcase": false, "constructor": false}], "file": "flume-ng-embedded-agent/src/main/java/org/apache/flume/agent/embedded/EmbeddedAgent.java"}, "focal_method": {"identifier": "putAll", "parameters": "(List<Event> events)", "modifiers": "public", "return": "void", "body": "public void putAll(List<Event> events) throws EventDeliveryException {\n    if (state != State.STARTED) {\n      throw new IllegalStateException(\"Cannot put events unless started\");\n    }\n    try {\n      embeddedSource.putAll(events);\n    } catch (ChannelException ex) {\n      throw new EventDeliveryException(\"Embedded agent \" + name +\n          \": Unable to process event: \" + ex.getMessage(), ex);\n    }\n  }", "signature": "void putAll(List<Event> events)", "full_signature": "public void putAll(List<Event> events)", "class_method_signature": "EmbeddedAgent.putAll(List<Event> events)", "testcase": false, "constructor": false, "invocations": ["putAll", "getMessage"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}