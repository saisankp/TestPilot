{"test_class": {"identifier": "HandlebarsViewTest", "superclass": "", "interfaces": "", "fields": [], "file": "handlebars-springmvc/src/test/java/com/github/jknack/handlebars/springmvc/HandlebarsViewTest.java"}, "test_case": {"identifier": "renderMergedTemplateModel", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n  @SuppressWarnings(\"unchecked\")\n  public void renderMergedTemplateModel() throws Exception {\n    Map<String, Object> model = createMock(Map.class);\n\n    PrintWriter writer = createMock(PrintWriter.class);\n\n    Template template = createMock(Template.class);\n    Capture<Context> context = EasyMock.newCapture();\n    template.apply(capture(context), isA(PrintWriter.class));\n\n    HttpServletRequest request = createMock(HttpServletRequest.class);\n\n    HttpServletResponse response = createMock(HttpServletResponse.class);\n    expect(response.getWriter()).andReturn(writer);\n\n    replay(template, model, request, response);\n\n    HandlebarsView view = new HandlebarsView();\n    view.setValueResolver(MapValueResolver.INSTANCE);\n    view.setTemplate(template);\n    view.renderMergedTemplateModel(model, request, response);\n\n    assertNotNull(context.getValue());\n\n    verify(template, model, request, response);\n  }", "signature": "void renderMergedTemplateModel()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void renderMergedTemplateModel()", "class_method_signature": "HandlebarsViewTest.renderMergedTemplateModel()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "newCapture", "apply", "capture", "isA", "createMock", "createMock", "andReturn", "expect", "getWriter", "replay", "setValueResolver", "setTemplate", "renderMergedTemplateModel", "assertNotNull", "getValue", "verify"]}, "focal_class": {"identifier": "HandlebarsView", "superclass": "extends AbstractTemplateView", "interfaces": "", "fields": [{"original_string": "protected Template template;", "modifier": "protected", "type": "Template", "declarator": "template", "var_name": "template"}, {"original_string": "protected ValueResolver[] valueResolvers;", "modifier": "protected", "type": "ValueResolver[]", "declarator": "valueResolvers", "var_name": "valueResolvers"}], "methods": [{"identifier": "renderMergedTemplateModel", "parameters": "(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "modifiers": "@Override protected", "return": "void", "signature": "void renderMergedTemplateModel(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "full_signature": "@Override protected void renderMergedTemplateModel(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "class_method_signature": "HandlebarsView.renderMergedTemplateModel(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "()", "modifiers": "public", "return": "Template", "signature": "Template getTemplate()", "full_signature": "public Template getTemplate()", "class_method_signature": "HandlebarsView.getTemplate()", "testcase": false, "constructor": false}, {"identifier": "checkResource", "parameters": "(final Locale locale)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkResource(final Locale locale)", "full_signature": "@Override public boolean checkResource(final Locale locale)", "class_method_signature": "HandlebarsView.checkResource(final Locale locale)", "testcase": false, "constructor": false}, {"identifier": "setTemplate", "parameters": "(final Template template)", "modifiers": "public", "return": "void", "signature": "void setTemplate(final Template template)", "full_signature": "public void setTemplate(final Template template)", "class_method_signature": "HandlebarsView.setTemplate(final Template template)", "testcase": false, "constructor": false}, {"identifier": "setValueResolver", "parameters": "(final ValueResolver... valueResolvers)", "modifiers": "public", "return": "void", "signature": "void setValueResolver(final ValueResolver... valueResolvers)", "full_signature": "public void setValueResolver(final ValueResolver... valueResolvers)", "class_method_signature": "HandlebarsView.setValueResolver(final ValueResolver... valueResolvers)", "testcase": false, "constructor": false}, {"identifier": "isContextRequired", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isContextRequired()", "full_signature": "@Override protected boolean isContextRequired()", "class_method_signature": "HandlebarsView.isContextRequired()", "testcase": false, "constructor": false}], "file": "handlebars-springmvc/src/main/java/com/github/jknack/handlebars/springmvc/HandlebarsView.java"}, "focal_method": {"identifier": "renderMergedTemplateModel", "parameters": "(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void renderMergedTemplateModel(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)\n      throws IOException {\n    Context context = Context.newBuilder(model)\n        .resolver(valueResolvers)\n        .build();\n    try {\n      template.apply(context, response.getWriter());\n    } finally {\n      context.destroy();\n    }\n  }", "signature": "void renderMergedTemplateModel(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "full_signature": "@Override protected void renderMergedTemplateModel(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "class_method_signature": "HandlebarsView.renderMergedTemplateModel(final Map<String, Object> model,\n      final HttpServletRequest request, final HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["build", "resolver", "newBuilder", "apply", "getWriter", "destroy"]}, "repository": {"repo_id": 4459604, "url": "https://github.com/jknack/handlebars.java", "stars": 1107, "created": "5/27/2012 3:22:22 AM +00:00", "updates": "2020-01-24T06:58:31+00:00", "fork": "False", "license": "licensed"}}