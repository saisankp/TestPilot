{"test_class": {"identifier": "ListHeaderProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String                    header                      = \"b,a,d,c\";", "modifier": "private final", "type": "String", "declarator": "header                      = \"b,a,d,c\"", "var_name": "header"}, {"original_string": "private final String                    headerWithSpaces            = \" b\\t, a , d,  c   \";", "modifier": "private final", "type": "String", "declarator": "headerWithSpaces            = \" b\\t, a , d,  c   \"", "var_name": "headerWithSpaces"}, {"original_string": "private final List<QualityValue>        expectedQualityValueList    = newArrayList(mockQualityValue(\"a\", 1.0f),\n                                                                                       mockQualityValue(\"b\", 0.7f),\n                                                                                       mockQualityValue(\"c\", 0.5f),\n                                                                                       mockQualityValue(\"d\", 0.3f));", "modifier": "private final", "type": "List<QualityValue>", "declarator": "expectedQualityValueList    = newArrayList(mockQualityValue(\"a\", 1.0f),\n                                                                                       mockQualityValue(\"b\", 0.7f),\n                                                                                       mockQualityValue(\"c\", 0.5f),\n                                                                                       mockQualityValue(\"d\", 0.3f))", "var_name": "expectedQualityValueList"}, {"original_string": "private final Map<String, QualityValue> headerItemToQualityValueMap = ImmutableMap.of(\"a\", expectedQualityValueList.get(0),\n                                                                                          \"b\", expectedQualityValueList.get(1),\n                                                                                          \"c\", expectedQualityValueList.get(2),\n                                                                                          \"d\", expectedQualityValueList.get(3));", "modifier": "private final", "type": "Map<String, QualityValue>", "declarator": "headerItemToQualityValueMap = ImmutableMap.of(\"a\", expectedQualityValueList.get(0),\n                                                                                          \"b\", expectedQualityValueList.get(1),\n                                                                                          \"c\", expectedQualityValueList.get(2),\n                                                                                          \"d\", expectedQualityValueList.get(3))", "var_name": "headerItemToQualityValueMap"}, {"original_string": "private ListHeaderProducer<QualityValue> listHeaderProducer;", "modifier": "private", "type": "ListHeaderProducer<QualityValue>", "declarator": "listHeaderProducer", "var_name": "listHeaderProducer"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/header/ListHeaderProducerTest.java"}, "test_case": {"identifier": "parsesGivenStringToSortedListOfQualityValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parsesGivenStringToSortedListOfQualityValues() {\n        List<QualityValue> qualitySortedList = listHeaderProducer.createQualitySortedList(header);\n        assertEquals(expectedQualityValueList, qualitySortedList);\n    }", "signature": "void parsesGivenStringToSortedListOfQualityValues()", "full_signature": "@Test public void parsesGivenStringToSortedListOfQualityValues()", "class_method_signature": "ListHeaderProducerTest.parsesGivenStringToSortedListOfQualityValues()", "testcase": true, "constructor": false, "invocations": ["createQualitySortedList", "assertEquals"]}, "focal_class": {"identifier": "ListHeaderProducer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ListItemFactory<T> itemFactory;", "modifier": "private final", "type": "ListItemFactory<T>", "declarator": "itemFactory", "var_name": "itemFactory"}], "methods": [{"identifier": "ListHeaderProducer", "parameters": "(ListItemFactory<T> itemFactory)", "modifiers": "public", "return": "", "signature": " ListHeaderProducer(ListItemFactory<T> itemFactory)", "full_signature": "public  ListHeaderProducer(ListItemFactory<T> itemFactory)", "class_method_signature": "ListHeaderProducer.ListHeaderProducer(ListItemFactory<T> itemFactory)", "testcase": false, "constructor": true}, {"identifier": "createQualitySortedList", "parameters": "(String header)", "modifiers": "public", "return": "List<T>", "signature": "List<T> createQualitySortedList(String header)", "full_signature": "public List<T> createQualitySortedList(String header)", "class_method_signature": "ListHeaderProducer.createQualitySortedList(String header)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/header/ListHeaderProducer.java"}, "focal_method": {"identifier": "createQualitySortedList", "parameters": "(String header)", "modifiers": "public", "return": "List<T>", "body": "public List<T> createQualitySortedList(String header) {\n        final List<T> tokens = new ArrayList<>();\n        int n;\n        int p = 0;\n        final int length = header.length();\n        while (p < length) {\n            n = scan(header, p, ',');\n\n            String token;\n            if (charAtIs(header, n, ',')) {\n                token = header.substring(p, n);\n            } else {\n                token = header.substring(p);\n                n = length;\n            }\n\n            tokens.add(itemFactory.createItem(token));\n\n            p = n + 1;\n        }\n\n        if (tokens.size() > 1) {\n            Collections.sort(tokens, QUALITY_VALUE_COMPARATOR);\n        }\n\n        return tokens;\n    }", "signature": "List<T> createQualitySortedList(String header)", "full_signature": "public List<T> createQualitySortedList(String header)", "class_method_signature": "ListHeaderProducer.createQualitySortedList(String header)", "testcase": false, "constructor": false, "invocations": ["length", "scan", "charAtIs", "substring", "substring", "add", "createItem", "size", "sort"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}