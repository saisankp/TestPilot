{"test_class": {"identifier": "AesCtrHmacAeadKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final AesCtrHmacAeadKeyManager manager = new AesCtrHmacAeadKeyManager();", "modifier": "private final", "type": "AesCtrHmacAeadKeyManager", "declarator": "manager = new AesCtrHmacAeadKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<AesCtrHmacAeadKeyFormat, AesCtrHmacAeadKey> factory =\n      manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<AesCtrHmacAeadKeyFormat, AesCtrHmacAeadKey>", "declarator": "factory =\n      manager.keyFactory()", "var_name": "factory"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/AesCtrHmacAeadKeyManagerTest.java"}, "test_case": {"identifier": "testAes256CtrHmacSha256Template", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAes256CtrHmacSha256Template() throws Exception {\n    KeyTemplate template = AesCtrHmacAeadKeyManager.aes256CtrHmacSha256Template();\n    assertEquals(new AesCtrHmacAeadKeyManager().getKeyType(), template.getTypeUrl());\n    assertEquals(KeyTemplate.OutputPrefixType.TINK, template.getOutputPrefixType());\n    AesCtrHmacAeadKeyFormat format =\n        AesCtrHmacAeadKeyFormat.parseFrom(\n            template.getValue(), ExtensionRegistryLite.getEmptyRegistry());\n\n    assertTrue(format.hasAesCtrKeyFormat());\n    assertTrue(format.getAesCtrKeyFormat().hasParams());\n    assertEquals(32, format.getAesCtrKeyFormat().getKeySize());\n    assertEquals(16, format.getAesCtrKeyFormat().getParams().getIvSize());\n\n    assertTrue(format.hasHmacKeyFormat());\n    assertTrue(format.getHmacKeyFormat().hasParams());\n    assertEquals(32, format.getHmacKeyFormat().getKeySize());\n    assertEquals(32, format.getHmacKeyFormat().getParams().getTagSize());\n    assertEquals(HashType.SHA256, format.getHmacKeyFormat().getParams().getHash());\n  }", "signature": "void testAes256CtrHmacSha256Template()", "full_signature": "@Test public void testAes256CtrHmacSha256Template()", "class_method_signature": "AesCtrHmacAeadKeyManagerTest.testAes256CtrHmacSha256Template()", "testcase": true, "constructor": false, "invocations": ["aes256CtrHmacSha256Template", "assertEquals", "getKeyType", "getTypeUrl", "assertEquals", "getOutputPrefixType", "parseFrom", "getValue", "getEmptyRegistry", "assertTrue", "hasAesCtrKeyFormat", "assertTrue", "hasParams", "getAesCtrKeyFormat", "assertEquals", "getKeySize", "getAesCtrKeyFormat", "assertEquals", "getIvSize", "getParams", "getAesCtrKeyFormat", "assertTrue", "hasHmacKeyFormat", "assertTrue", "hasParams", "getHmacKeyFormat", "assertEquals", "getKeySize", "getHmacKeyFormat", "assertEquals", "getTagSize", "getParams", "getHmacKeyFormat", "assertEquals", "getHash", "getParams", "getHmacKeyFormat"]}, "focal_class": {"identifier": "AesCtrHmacAeadKeyManager", "superclass": "extends KeyTypeManager<AesCtrHmacAeadKey>", "interfaces": "", "fields": [], "methods": [{"identifier": "AesCtrHmacAeadKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " AesCtrHmacAeadKeyManager()", "full_signature": "  AesCtrHmacAeadKeyManager()", "class_method_signature": "AesCtrHmacAeadKeyManager.AesCtrHmacAeadKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "AesCtrHmacAeadKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "AesCtrHmacAeadKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "AesCtrHmacAeadKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(AesCtrHmacAeadKey key)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(AesCtrHmacAeadKey key)", "full_signature": "@Override public void validateKey(AesCtrHmacAeadKey key)", "class_method_signature": "AesCtrHmacAeadKeyManager.validateKey(AesCtrHmacAeadKey key)", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "AesCtrHmacAeadKey", "signature": "AesCtrHmacAeadKey parseKey(ByteString byteString)", "full_signature": "@Override public AesCtrHmacAeadKey parseKey(ByteString byteString)", "class_method_signature": "AesCtrHmacAeadKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<AesCtrHmacAeadKeyFormat, AesCtrHmacAeadKey>", "signature": "KeyFactory<AesCtrHmacAeadKeyFormat, AesCtrHmacAeadKey> keyFactory()", "full_signature": "@Override public KeyFactory<AesCtrHmacAeadKeyFormat, AesCtrHmacAeadKey> keyFactory()", "class_method_signature": "AesCtrHmacAeadKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void register(boolean newKeyAllowed)", "full_signature": "public static void register(boolean newKeyAllowed)", "class_method_signature": "AesCtrHmacAeadKeyManager.register(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "aes128CtrHmacSha256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes128CtrHmacSha256Template()", "full_signature": "public static final KeyTemplate aes128CtrHmacSha256Template()", "class_method_signature": "AesCtrHmacAeadKeyManager.aes128CtrHmacSha256Template()", "testcase": false, "constructor": false}, {"identifier": "aes256CtrHmacSha256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate aes256CtrHmacSha256Template()", "full_signature": "public static final KeyTemplate aes256CtrHmacSha256Template()", "class_method_signature": "AesCtrHmacAeadKeyManager.aes256CtrHmacSha256Template()", "testcase": false, "constructor": false}, {"identifier": "createKeyTemplate", "parameters": "(\n      int aesKeySize, int ivSize, int hmacKeySize, int tagSize, HashType hashType)", "modifiers": "private static", "return": "KeyTemplate", "signature": "KeyTemplate createKeyTemplate(\n      int aesKeySize, int ivSize, int hmacKeySize, int tagSize, HashType hashType)", "full_signature": "private static KeyTemplate createKeyTemplate(\n      int aesKeySize, int ivSize, int hmacKeySize, int tagSize, HashType hashType)", "class_method_signature": "AesCtrHmacAeadKeyManager.createKeyTemplate(\n      int aesKeySize, int ivSize, int hmacKeySize, int tagSize, HashType hashType)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/AesCtrHmacAeadKeyManager.java"}, "focal_method": {"identifier": "aes256CtrHmacSha256Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "body": "public static final KeyTemplate aes256CtrHmacSha256Template() {\n    return createKeyTemplate(32, 16, 32, 32, HashType.SHA256);\n  }", "signature": "KeyTemplate aes256CtrHmacSha256Template()", "full_signature": "public static final KeyTemplate aes256CtrHmacSha256Template()", "class_method_signature": "AesCtrHmacAeadKeyManager.aes256CtrHmacSha256Template()", "testcase": false, "constructor": false, "invocations": ["createKeyTemplate"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}