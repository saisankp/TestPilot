{"test_class": {"identifier": "ArgumentPatternMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "pact/provider/core/src/test/java/org/arquillian/algeron/pact/provider/core/ArgumentPatternMatcherTest.java"}, "test_case": {"identifier": "should_extract_multiple_arguments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_extract_multiple_arguments() {\n        List<String> arguments = ArgumentPatternMatcher.arguments(Pattern.compile(\"I have (\\\\d+) cukes in my (\\\\w+)\"),\n            \"I have 36 cukes in my belly\");\n        assertThat(arguments).containsExactly(\"36\", \"belly\");\n    }", "signature": "void should_extract_multiple_arguments()", "full_signature": "@Test public void should_extract_multiple_arguments()", "class_method_signature": "ArgumentPatternMatcherTest.should_extract_multiple_arguments()", "testcase": true, "constructor": false, "invocations": ["arguments", "compile", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "ArgumentPatternMatcher", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ArgumentPatternMatcher", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArgumentPatternMatcher()", "full_signature": "public  ArgumentPatternMatcher()", "class_method_signature": "ArgumentPatternMatcher.ArgumentPatternMatcher()", "testcase": false, "constructor": true}, {"identifier": "arguments", "parameters": "(Pattern pattern, String state)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> arguments(Pattern pattern, String state)", "full_signature": "public static List<String> arguments(Pattern pattern, String state)", "class_method_signature": "ArgumentPatternMatcher.arguments(Pattern pattern, String state)", "testcase": false, "constructor": false}], "file": "pact/provider/core/src/main/java/org/arquillian/algeron/pact/provider/core/ArgumentPatternMatcher.java"}, "focal_method": {"identifier": "arguments", "parameters": "(Pattern pattern, String state)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> arguments(Pattern pattern, String state) {\n        final List<String> argumentsValues = new ArrayList<>();\n        Matcher matcher = pattern.matcher(state);\n        if (matcher.lookingAt()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n                int startIndex = matcher.start(i);\n\n                if (startIndex == -1) {\n                    argumentsValues.add(\"\");\n                } else {\n                    argumentsValues.add(matcher.group(i));\n                }\n            }\n        }\n\n        return argumentsValues;\n    }", "signature": "List<String> arguments(Pattern pattern, String state)", "full_signature": "public static List<String> arguments(Pattern pattern, String state)", "class_method_signature": "ArgumentPatternMatcher.arguments(Pattern pattern, String state)", "testcase": false, "constructor": false, "invocations": ["matcher", "lookingAt", "groupCount", "start", "add", "add", "group"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}