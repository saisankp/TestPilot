{"test_class": {"identifier": "ZebraShardingConfigurationUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested\n    private ZebraShardingConfigurationUtil zebraShardingConfigurationUtil;", "modifier": "@Tested\n    private", "type": "ZebraShardingConfigurationUtil", "declarator": "zebraShardingConfigurationUtil", "var_name": "zebraShardingConfigurationUtil"}, {"original_string": "@Mocked\n    private ApplicationContextUtil applicationContextUtil;", "modifier": "@Mocked\n    private", "type": "ApplicationContextUtil", "declarator": "applicationContextUtil", "var_name": "applicationContextUtil"}, {"original_string": "@Mocked\n    private Environment environment;", "modifier": "@Mocked\n    private", "type": "Environment", "declarator": "environment", "var_name": "environment"}, {"original_string": "@Mocked\n    private Binder binder;", "modifier": "@Mocked\n    private", "type": "Binder", "declarator": "binder", "var_name": "binder"}, {"original_string": "@Mocked\n    BindResult<ZebraShardingConfiguration> bindResult;", "modifier": "@Mocked", "type": "BindResult<ZebraShardingConfiguration>", "declarator": "bindResult", "var_name": "bindResult"}], "file": "zebra/zebra-database/src/test/java/com/guosen/zebra/database/sharding/conf/ZebraShardingConfigurationUtilTest.java"}, "test_case": {"identifier": "testGetCfg", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCfg() {\n        ZebraShardingConfiguration cfg = new ZebraShardingConfiguration();\n\n        Map<String, ZebraShardingDataSourceCfg> cfgMap = new HashMap<>();\n        ZebraShardingDataSourceCfg shardingCfg = new ZebraShardingDataSourceCfg();\n        shardingCfg.setSharding(new ZebraShardingRuleConfiguration());\n        ZebraShardingDataSourceCfg masterSlaveCfg = new ZebraShardingDataSourceCfg();\n        masterSlaveCfg.setMasterslave(new ZebraMasterSlaveRuleConfiguration());\n        cfgMap.put(\"shardingDs1\", shardingCfg);\n        cfgMap.put(\"masterSlaveDs1\", masterSlaveCfg);\n\n        cfg.setShardingcfg(cfgMap);\n\n        new Expectations() {\n            {\n                ApplicationContextUtil.getEnvironment();\n                result = environment;\n            }\n            {\n                Binder.get(environment);\n                result = binder;\n            }\n            {\n                @SuppressWarnings(\"unchecked\")\n                Bindable<ZebraShardingConfiguration> bindable = (Bindable<ZebraShardingConfiguration>) any;\n                binder.bind(\"zebra.database\", bindable);\n                result = bindResult;\n            }\n            {\n                bindResult.isBound();\n                result = true;\n            }\n            {\n                bindResult.get();\n                result = cfg;\n            }\n        };\n\n        ZebraShardingConfiguration result = ZebraShardingConfigurationUtil.getZebraShardingConfiguration();\n        assertThat(result, is(not(nullValue())));\n        Map<String, ZebraShardingDataSourceCfg> resultCfg = result.getShardingcfg();\n        assertThat(resultCfg,  is(not(anEmptyMap())));\n\n        ZebraShardingDataSourceCfg resultShardingCfg = resultCfg.get(\"shardingDs1\");\n        assertThat(resultShardingCfg.getType(),  is(ZebraShardingDataSourceCfg.Type.SHARDING));\n\n        ZebraShardingDataSourceCfg resultMasterSlaveCfg = resultCfg.get(\"masterSlaveDs1\");\n        assertThat(resultMasterSlaveCfg.getType(),  is(ZebraShardingDataSourceCfg.Type.MASTER_SLAVE));\n        assertThat(resultMasterSlaveCfg.getMasterslave().getName(),  is(\"masterSlaveDs1\"));\n    }", "signature": "void testGetCfg()", "full_signature": "@Test public void testGetCfg()", "class_method_signature": "ZebraShardingConfigurationUtilTest.testGetCfg()", "testcase": true, "constructor": false, "invocations": ["setSharding", "setMasterslave", "put", "put", "setShardingcfg", "getEnvironment", "get", "bind", "isBound", "get", "getZebraShardingConfiguration", "assertThat", "is", "not", "nullValue", "getShardingcfg", "assertThat", "is", "not", "anEmptyMap", "get", "assertThat", "getType", "is", "get", "assertThat", "getType", "is", "assertThat", "getName", "getMasterslave", "is"]}, "focal_class": {"identifier": "ZebraShardingConfigurationUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ZEBRA_SHARDING_CONF_PREFIX = \"zebra.database\";", "modifier": "private static final", "type": "String", "declarator": "ZEBRA_SHARDING_CONF_PREFIX = \"zebra.database\"", "var_name": "ZEBRA_SHARDING_CONF_PREFIX"}], "methods": [{"identifier": "ZebraShardingConfigurationUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ZebraShardingConfigurationUtil()", "full_signature": "private  ZebraShardingConfigurationUtil()", "class_method_signature": "ZebraShardingConfigurationUtil.ZebraShardingConfigurationUtil()", "testcase": false, "constructor": true}, {"identifier": "getZebraShardingConfiguration", "parameters": "()", "modifiers": "public static", "return": "ZebraShardingConfiguration", "signature": "ZebraShardingConfiguration getZebraShardingConfiguration()", "full_signature": "public static ZebraShardingConfiguration getZebraShardingConfiguration()", "class_method_signature": "ZebraShardingConfigurationUtil.getZebraShardingConfiguration()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(ZebraShardingConfiguration cfg)", "modifiers": "private static", "return": "void", "signature": "void setType(ZebraShardingConfiguration cfg)", "full_signature": "private static void setType(ZebraShardingConfiguration cfg)", "class_method_signature": "ZebraShardingConfigurationUtil.setType(ZebraShardingConfiguration cfg)", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "modifiers": "private static", "return": "void", "signature": "void setType(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "full_signature": "private static void setType(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "class_method_signature": "ZebraShardingConfigurationUtil.setType(ZebraShardingDataSourceCfg zebraShardingDataSourceCfg)", "testcase": false, "constructor": false}, {"identifier": "setNameIfMasterSlave", "parameters": "(ZebraShardingConfiguration cfg)", "modifiers": "private static", "return": "void", "signature": "void setNameIfMasterSlave(ZebraShardingConfiguration cfg)", "full_signature": "private static void setNameIfMasterSlave(ZebraShardingConfiguration cfg)", "class_method_signature": "ZebraShardingConfigurationUtil.setNameIfMasterSlave(ZebraShardingConfiguration cfg)", "testcase": false, "constructor": false}, {"identifier": "fillDefaultCfgOfShardingIfNotCfg", "parameters": "(ZebraShardingConfiguration cfg)", "modifiers": "private static", "return": "void", "signature": "void fillDefaultCfgOfShardingIfNotCfg(ZebraShardingConfiguration cfg)", "full_signature": "private static void fillDefaultCfgOfShardingIfNotCfg(ZebraShardingConfiguration cfg)", "class_method_signature": "ZebraShardingConfigurationUtil.fillDefaultCfgOfShardingIfNotCfg(ZebraShardingConfiguration cfg)", "testcase": false, "constructor": false}], "file": "zebra/zebra-database/src/main/java/com/guosen/zebra/database/sharding/conf/ZebraShardingConfigurationUtil.java"}, "focal_method": {"identifier": "getZebraShardingConfiguration", "parameters": "()", "modifiers": "public static", "return": "ZebraShardingConfiguration", "body": "public static ZebraShardingConfiguration getZebraShardingConfiguration() {\n\n        /*\n         * \u4f7f\u7528Spring Boot\u7684Binder\u65b9\u5f0f\u6765\u8bfb\u53d6\uff0c\u800c\u4e0d\u662f\u5e38\u7528\u7684@ConfigurationProperties\u6765\u81ea\u52a8\u88c5\u914d\u3002\n         * \u662f\u56e0\u4e3aZebraShardingConfiguration\u4f1a\u5728\u5b9e\u73b0\u4e86BeanDefinitionRegistryPostProcessor\u7684\u7c7b\u4e2d\u4f7f\u7528\n         * \u6b64\u65f6@ConfigurationProperties\u6ce8\u89e3\u7684\u7c7b\u8fd8\u672a\u88ab\u5904\u7406\uff0c\u5bf9\u5e94\u7684\u503c\u7686\u4e3a\u7a7a\u3002\n         * \u6240\u4ee5\u7a0b\u5e8f\u5fc5\u987b\u7528Binder\u65b9\u5f0f\u663e\u5f0f\u8bfb\u53d6\u3002\n         */\n        Environment environment = ApplicationContextUtil.getEnvironment();\n        BindResult<ZebraShardingConfiguration> bindResult = Binder.get(environment)\n                        .bind(ZEBRA_SHARDING_CONF_PREFIX, Bindable.of(ZebraShardingConfiguration.class));\n\n        ZebraShardingConfiguration cfg = bindResult.isBound() ? bindResult.get() : null;\n\n        if (cfg != null) {\n            setType(cfg);\n            setNameIfMasterSlave(cfg);\n            fillDefaultCfgOfShardingIfNotCfg(cfg);\n        }\n\n        return cfg;\n    }", "signature": "ZebraShardingConfiguration getZebraShardingConfiguration()", "full_signature": "public static ZebraShardingConfiguration getZebraShardingConfiguration()", "class_method_signature": "ZebraShardingConfigurationUtil.getZebraShardingConfiguration()", "testcase": false, "constructor": false, "invocations": ["getEnvironment", "bind", "get", "of", "isBound", "get", "setType", "setNameIfMasterSlave", "fillDefaultCfgOfShardingIfNotCfg"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}