{"test_class": {"identifier": "RequiredParametersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n\tpublic", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "flink-java/src/test/java/org/apache/flink/api/java/utils/RequiredParametersTest.java"}, "test_case": {"identifier": "testPrintHelpWithMissingParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPrintHelpWithMissingParams() {\n\t\tRequiredParameters required = new RequiredParameters();\n\n\t\tString helpText = required.getHelp(Arrays.asList(\"param1\", \"param2\", \"paramN\"));\n\t\tAssert.assertThat(helpText, CoreMatchers.allOf(\n\t\t\t\tcontainsString(\"Missing arguments for:\"),\n\t\t\t\tcontainsString(\"param1 \"),\n\t\t\t\tcontainsString(\"param2 \"),\n\t\t\t\tcontainsString(\"paramN \")));\n\t}", "signature": "void testPrintHelpWithMissingParams()", "full_signature": "@Test public void testPrintHelpWithMissingParams()", "class_method_signature": "RequiredParametersTest.testPrintHelpWithMissingParams()", "testcase": true, "constructor": false, "invocations": ["getHelp", "asList", "assertThat", "allOf", "containsString", "containsString", "containsString", "containsString"]}, "focal_class": {"identifier": "RequiredParameters", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HELP_TEXT_PARAM_DELIMITER = \"\\t\";", "modifier": "private static final", "type": "String", "declarator": "HELP_TEXT_PARAM_DELIMITER = \"\\t\"", "var_name": "HELP_TEXT_PARAM_DELIMITER"}, {"original_string": "private static final String HELP_TEXT_LINE_DELIMITER = \"\\n\";", "modifier": "private static final", "type": "String", "declarator": "HELP_TEXT_LINE_DELIMITER = \"\\n\"", "var_name": "HELP_TEXT_LINE_DELIMITER"}, {"original_string": "private static final int HELP_TEXT_LENGTH_PER_PARAM = 100;", "modifier": "private static final", "type": "int", "declarator": "HELP_TEXT_LENGTH_PER_PARAM = 100", "var_name": "HELP_TEXT_LENGTH_PER_PARAM"}, {"original_string": "private HashMap<String, Option> data;", "modifier": "private", "type": "HashMap<String, Option>", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "RequiredParameters", "parameters": "()", "modifiers": "public", "return": "", "signature": " RequiredParameters()", "full_signature": "public  RequiredParameters()", "class_method_signature": "RequiredParameters.RequiredParameters()", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(String name)", "modifiers": "public", "return": "Option", "signature": "Option add(String name)", "full_signature": "public Option add(String name)", "class_method_signature": "RequiredParameters.add(String name)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Option option)", "modifiers": "public", "return": "void", "signature": "void add(Option option)", "full_signature": "public void add(Option option)", "class_method_signature": "RequiredParameters.add(Option option)", "testcase": false, "constructor": false}, {"identifier": "applyTo", "parameters": "(ParameterTool parameterTool)", "modifiers": "public", "return": "void", "signature": "void applyTo(ParameterTool parameterTool)", "full_signature": "public void applyTo(ParameterTool parameterTool)", "class_method_signature": "RequiredParameters.applyTo(ParameterTool parameterTool)", "testcase": false, "constructor": false}, {"identifier": "checkAndApplyDefaultValue", "parameters": "(Option o, Map<String, String> data)", "modifiers": "private", "return": "void", "signature": "void checkAndApplyDefaultValue(Option o, Map<String, String> data)", "full_signature": "private void checkAndApplyDefaultValue(Option o, Map<String, String> data)", "class_method_signature": "RequiredParameters.checkAndApplyDefaultValue(Option o, Map<String, String> data)", "testcase": false, "constructor": false}, {"identifier": "checkIsCastableToDefinedType", "parameters": "(Option o, Map<String, String> data)", "modifiers": "private", "return": "void", "signature": "void checkIsCastableToDefinedType(Option o, Map<String, String> data)", "full_signature": "private void checkIsCastableToDefinedType(Option o, Map<String, String> data)", "class_method_signature": "RequiredParameters.checkIsCastableToDefinedType(Option o, Map<String, String> data)", "testcase": false, "constructor": false}, {"identifier": "checkChoices", "parameters": "(Option o, Map<String, String> data)", "modifiers": "private", "return": "void", "signature": "void checkChoices(Option o, Map<String, String> data)", "full_signature": "private void checkChoices(Option o, Map<String, String> data)", "class_method_signature": "RequiredParameters.checkChoices(Option o, Map<String, String> data)", "testcase": false, "constructor": false}, {"identifier": "hasNoDefaultValueAndNoValuePassedOnAlternativeName", "parameters": "(Option o, Map<String, String> data)", "modifiers": "private", "return": "boolean", "signature": "boolean hasNoDefaultValueAndNoValuePassedOnAlternativeName(Option o, Map<String, String> data)", "full_signature": "private boolean hasNoDefaultValueAndNoValuePassedOnAlternativeName(Option o, Map<String, String> data)", "class_method_signature": "RequiredParameters.hasNoDefaultValueAndNoValuePassedOnAlternativeName(Option o, Map<String, String> data)", "testcase": false, "constructor": false}, {"identifier": "checkAmbiguousValues", "parameters": "(Option o, Map<String, String> data)", "modifiers": "private", "return": "void", "signature": "void checkAmbiguousValues(Option o, Map<String, String> data)", "full_signature": "private void checkAmbiguousValues(Option o, Map<String, String> data)", "class_method_signature": "RequiredParameters.checkAmbiguousValues(Option o, Map<String, String> data)", "testcase": false, "constructor": false}, {"identifier": "getHelp", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHelp()", "full_signature": "public String getHelp()", "class_method_signature": "RequiredParameters.getHelp()", "testcase": false, "constructor": false}, {"identifier": "getHelp", "parameters": "(List<String> missingArguments)", "modifiers": "public", "return": "String", "signature": "String getHelp(List<String> missingArguments)", "full_signature": "public String getHelp(List<String> missingArguments)", "class_method_signature": "RequiredParameters.getHelp(List<String> missingArguments)", "testcase": false, "constructor": false}, {"identifier": "helpText", "parameters": "(Option option)", "modifiers": "private", "return": "String", "signature": "String helpText(Option option)", "full_signature": "private String helpText(Option option)", "class_method_signature": "RequiredParameters.helpText(Option option)", "testcase": false, "constructor": false}, {"identifier": "missingArgumentsText", "parameters": "(List<String> missingArguments)", "modifiers": "private", "return": "String", "signature": "String missingArgumentsText(List<String> missingArguments)", "full_signature": "private String missingArgumentsText(List<String> missingArguments)", "class_method_signature": "RequiredParameters.missingArgumentsText(List<String> missingArguments)", "testcase": false, "constructor": false}], "file": "flink-java/src/main/java/org/apache/flink/api/java/utils/RequiredParameters.java"}, "focal_method": {"identifier": "getHelp", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getHelp() {\n\t\tStringBuilder sb = new StringBuilder(data.size() * HELP_TEXT_LENGTH_PER_PARAM);\n\n\t\tsb.append(\"Required Parameters:\");\n\t\tsb.append(HELP_TEXT_LINE_DELIMITER);\n\n\t\tfor (Option o : data.values()) {\n\t\t\tsb.append(this.helpText(o));\n\t\t}\n\t\tsb.append(HELP_TEXT_LINE_DELIMITER);\n\n\t\treturn sb.toString();\n\t}", "signature": "String getHelp()", "full_signature": "public String getHelp()", "class_method_signature": "RequiredParameters.getHelp()", "testcase": false, "constructor": false, "invocations": ["size", "append", "append", "values", "append", "helpText", "append", "toString"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}