{"test_class": {"identifier": "PatternExtractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PatternExtractor extractor;", "modifier": "private", "type": "PatternExtractor", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}], "file": "src/edu/lclark/orego/patterns/PatternExtractorTest.java"}, "test_case": {"identifier": "testRotate90Degrees", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRotate90Degrees() {\n\t\textractor.analyzeMove(coords.at(\"A5\"));\n\t\tboard.play(\"a5\");\n\t\textractor.analyzeMove(coords.at(\"B6\"));\n\t\tboard.play(\"b6\");\n\t\textractor.analyzeMove(coords.at(\"A7\"));\n\t\tboard.play(\"a7\");\n\t\textractor.analyzeMove(coords.at(\"A6\"));\n\t\tboard.play(\"a6\");\n\t\tassertEquals(0.5, extractor.getWinRate(43425), 0.01);\n\t\tassertEquals(1.0, extractor.getWinRate(47900), 0.01);\n\t\tassertEquals(1.0, extractor.getWinRate(44867), 0.01);\n\t\tassertEquals(1.0, extractor.getWinRate(64193), 0.01);\n\t}", "signature": "void testRotate90Degrees()", "full_signature": "@Test public void testRotate90Degrees()", "class_method_signature": "PatternExtractorTest.testRotate90Degrees()", "testcase": true, "constructor": false, "invocations": ["analyzeMove", "at", "play", "analyzeMove", "at", "play", "analyzeMove", "at", "play", "analyzeMove", "at", "play", "assertEquals", "getWinRate", "assertEquals", "getWinRate", "assertEquals", "getWinRate", "assertEquals", "getWinRate"]}, "focal_class": {"identifier": "PatternExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static int PATTERN_COUNT = Character.MAX_VALUE + 1;", "modifier": "private final static", "type": "int", "declarator": "PATTERN_COUNT = Character.MAX_VALUE + 1", "var_name": "PATTERN_COUNT"}, {"original_string": "private final ShortList candidates;", "modifier": "private final", "type": "ShortList", "declarator": "candidates", "var_name": "candidates"}, {"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "final CoordinateSystem coords;", "modifier": "final", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private final SgfParser parser;", "modifier": "private final", "type": "SgfParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private final MersenneTwisterFast random;", "modifier": "private final", "type": "MersenneTwisterFast", "declarator": "random", "var_name": "random"}, {"original_string": "private final int[] runs;", "modifier": "private final", "type": "int[]", "declarator": "runs", "var_name": "runs"}, {"original_string": "private final boolean verbose;", "modifier": "private final", "type": "boolean", "declarator": "verbose", "var_name": "verbose"}, {"original_string": "private final int[] wins;", "modifier": "private final", "type": "int[]", "declarator": "wins", "var_name": "wins"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "PatternExtractor.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "printPatterns", "parameters": "(double lo, double hi)", "modifiers": "static", "return": "void", "signature": "void printPatterns(double lo, double hi)", "full_signature": "static void printPatterns(double lo, double hi)", "class_method_signature": "PatternExtractor.printPatterns(double lo, double hi)", "testcase": false, "constructor": false}, {"identifier": "reflectAcrossDiagonal", "parameters": "(int[] colors)", "modifiers": "private static", "return": "int[]", "signature": "int[] reflectAcrossDiagonal(int[] colors)", "full_signature": "private static int[] reflectAcrossDiagonal(int[] colors)", "class_method_signature": "PatternExtractor.reflectAcrossDiagonal(int[] colors)", "testcase": false, "constructor": false}, {"identifier": "rotate90Degrees", "parameters": "(int[] colors)", "modifiers": "private static", "return": "int[]", "signature": "int[] rotate90Degrees(int[] colors)", "full_signature": "private static int[] rotate90Degrees(int[] colors)", "class_method_signature": "PatternExtractor.rotate90Degrees(int[] colors)", "testcase": false, "constructor": false}, {"identifier": "PatternExtractor", "parameters": "(boolean verbose)", "modifiers": "public", "return": "", "signature": " PatternExtractor(boolean verbose)", "full_signature": "public  PatternExtractor(boolean verbose)", "class_method_signature": "PatternExtractor.PatternExtractor(boolean verbose)", "testcase": false, "constructor": true}, {"identifier": "analyzeFiles", "parameters": "(File file)", "modifiers": "", "return": "void", "signature": "void analyzeFiles(File file)", "full_signature": " void analyzeFiles(File file)", "class_method_signature": "PatternExtractor.analyzeFiles(File file)", "testcase": false, "constructor": false}, {"identifier": "analyzeGames", "parameters": "(List<List<Short>> games)", "modifiers": "@SuppressWarnings(\"boxing\")", "return": "void", "signature": "void analyzeGames(List<List<Short>> games)", "full_signature": "@SuppressWarnings(\"boxing\") void analyzeGames(List<List<Short>> games)", "class_method_signature": "PatternExtractor.analyzeGames(List<List<Short>> games)", "testcase": false, "constructor": false}, {"identifier": "analyzeMove", "parameters": "(short move)", "modifiers": "", "return": "void", "signature": "void analyzeMove(short move)", "full_signature": " void analyzeMove(short move)", "class_method_signature": "PatternExtractor.analyzeMove(short move)", "testcase": false, "constructor": false}, {"identifier": "buildPatternData", "parameters": "(File file)", "modifiers": "", "return": "void", "signature": "void buildPatternData(File file)", "full_signature": " void buildPatternData(File file)", "class_method_signature": "PatternExtractor.buildPatternData(File file)", "testcase": false, "constructor": false}, {"identifier": "getBoard", "parameters": "()", "modifiers": "", "return": "Board", "signature": "Board getBoard()", "full_signature": " Board getBoard()", "class_method_signature": "PatternExtractor.getBoard()", "testcase": false, "constructor": false}, {"identifier": "getWinRate", "parameters": "(int colors)", "modifiers": "", "return": "float", "signature": "float getWinRate(int colors)", "full_signature": " float getWinRate(int colors)", "class_method_signature": "PatternExtractor.getWinRate(int colors)", "testcase": false, "constructor": false}, {"identifier": "selectRandomMove", "parameters": "(short move)", "modifiers": "", "return": "short", "signature": "short selectRandomMove(short move)", "full_signature": " short selectRandomMove(short move)", "class_method_signature": "PatternExtractor.selectRandomMove(short move)", "testcase": false, "constructor": false}, {"identifier": "updateRotations", "parameters": "(boolean winner, int[] colors)", "modifiers": "private", "return": "void", "signature": "void updateRotations(boolean winner, int[] colors)", "full_signature": "private void updateRotations(boolean winner, int[] colors)", "class_method_signature": "PatternExtractor.updateRotations(boolean winner, int[] colors)", "testcase": false, "constructor": false}, {"identifier": "updateTables", "parameters": "(boolean winner, short move)", "modifiers": "", "return": "void", "signature": "void updateTables(boolean winner, short move)", "full_signature": " void updateTables(boolean winner, short move)", "class_method_signature": "PatternExtractor.updateTables(boolean winner, short move)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/patterns/PatternExtractor.java"}, "focal_method": {"identifier": "rotate90Degrees", "parameters": "(int[] colors)", "modifiers": "private static", "return": "int[]", "body": "private static int[] rotate90Degrees(int[] colors) {\n\t\tint[] result = new int[8];\n\t\tresult[0] = colors[1];\n\t\tresult[1] = colors[3];\n\t\tresult[2] = colors[0];\n\t\tresult[3] = colors[2];\n\t\tresult[4] = colors[6];\n\t\tresult[5] = colors[4];\n\t\tresult[6] = colors[7];\n\t\tresult[7] = colors[5];\n\t\treturn result;\n\t}", "signature": "int[] rotate90Degrees(int[] colors)", "full_signature": "private static int[] rotate90Degrees(int[] colors)", "class_method_signature": "PatternExtractor.rotate90Degrees(int[] colors)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}