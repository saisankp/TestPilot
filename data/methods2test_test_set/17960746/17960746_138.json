{"test_class": {"identifier": "CinematicTest", "superclass": "", "interfaces": "", "fields": [], "file": "jme3-core/src/test/java/com/jme3/cinematic/CinematicTest.java"}, "test_case": {"identifier": "clearEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void clearEmpty() {\n        Cinematic sut = new Cinematic();\n        sut.clear();\n    }", "signature": "void clearEmpty()", "full_signature": "@Test public void clearEmpty()", "class_method_signature": "CinematicTest.clearEmpty()", "testcase": true, "constructor": false, "invocations": ["clear"]}, "focal_class": {"identifier": "Cinematic", "superclass": "extends AbstractCinematicEvent", "interfaces": "implements AppState", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(Cinematic.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(Cinematic.class.getName())", "var_name": "logger"}, {"original_string": "private Node scene;", "modifier": "private", "type": "Node", "declarator": "scene", "var_name": "scene"}, {"original_string": "protected TimeLine timeLine = new TimeLine();", "modifier": "protected", "type": "TimeLine", "declarator": "timeLine = new TimeLine()", "var_name": "timeLine"}, {"original_string": "private int lastFetchedKeyFrame = -1;", "modifier": "private", "type": "int", "declarator": "lastFetchedKeyFrame = -1", "var_name": "lastFetchedKeyFrame"}, {"original_string": "private List<CinematicEvent> cinematicEvents = new ArrayList<>();", "modifier": "private", "type": "List<CinematicEvent>", "declarator": "cinematicEvents = new ArrayList<>()", "var_name": "cinematicEvents"}, {"original_string": "private Map<String, CameraNode> cameras = new HashMap<>();", "modifier": "private", "type": "Map<String, CameraNode>", "declarator": "cameras = new HashMap<>()", "var_name": "cameras"}, {"original_string": "private CameraNode currentCam;", "modifier": "private", "type": "CameraNode", "declarator": "currentCam", "var_name": "currentCam"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "private Map<String, Map<Object, Object>> eventsData;", "modifier": "private", "type": "Map<String, Map<Object, Object>>", "declarator": "eventsData", "var_name": "eventsData"}, {"original_string": "private float nextEnqueue = 0;", "modifier": "private", "type": "float", "declarator": "nextEnqueue = 0", "var_name": "nextEnqueue"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}], "methods": [{"identifier": "Cinematic", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Cinematic()", "full_signature": "protected  Cinematic()", "class_method_signature": "Cinematic.Cinematic()", "testcase": false, "constructor": true}, {"identifier": "Cinematic", "parameters": "(float initialDuration)", "modifiers": "public", "return": "", "signature": " Cinematic(float initialDuration)", "full_signature": "public  Cinematic(float initialDuration)", "class_method_signature": "Cinematic.Cinematic(float initialDuration)", "testcase": false, "constructor": true}, {"identifier": "Cinematic", "parameters": "(LoopMode loopMode)", "modifiers": "public", "return": "", "signature": " Cinematic(LoopMode loopMode)", "full_signature": "public  Cinematic(LoopMode loopMode)", "class_method_signature": "Cinematic.Cinematic(LoopMode loopMode)", "testcase": false, "constructor": true}, {"identifier": "Cinematic", "parameters": "(float initialDuration, LoopMode loopMode)", "modifiers": "public", "return": "", "signature": " Cinematic(float initialDuration, LoopMode loopMode)", "full_signature": "public  Cinematic(float initialDuration, LoopMode loopMode)", "class_method_signature": "Cinematic.Cinematic(float initialDuration, LoopMode loopMode)", "testcase": false, "constructor": true}, {"identifier": "Cinematic", "parameters": "(Node scene)", "modifiers": "public", "return": "", "signature": " Cinematic(Node scene)", "full_signature": "public  Cinematic(Node scene)", "class_method_signature": "Cinematic.Cinematic(Node scene)", "testcase": false, "constructor": true}, {"identifier": "Cinematic", "parameters": "(Node scene, float initialDuration)", "modifiers": "public", "return": "", "signature": " Cinematic(Node scene, float initialDuration)", "full_signature": "public  Cinematic(Node scene, float initialDuration)", "class_method_signature": "Cinematic.Cinematic(Node scene, float initialDuration)", "testcase": false, "constructor": true}, {"identifier": "Cinematic", "parameters": "(Node scene, LoopMode loopMode)", "modifiers": "public", "return": "", "signature": " Cinematic(Node scene, LoopMode loopMode)", "full_signature": "public  Cinematic(Node scene, LoopMode loopMode)", "class_method_signature": "Cinematic.Cinematic(Node scene, LoopMode loopMode)", "testcase": false, "constructor": true}, {"identifier": "Cinematic", "parameters": "(Node scene, float initialDuration, LoopMode loopMode)", "modifiers": "public", "return": "", "signature": " Cinematic(Node scene, float initialDuration, LoopMode loopMode)", "full_signature": "public  Cinematic(Node scene, float initialDuration, LoopMode loopMode)", "class_method_signature": "Cinematic.Cinematic(Node scene, float initialDuration, LoopMode loopMode)", "testcase": false, "constructor": true}, {"identifier": "onPlay", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onPlay()", "full_signature": "@Override public void onPlay()", "class_method_signature": "Cinematic.onPlay()", "testcase": false, "constructor": false}, {"identifier": "onStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onStop()", "full_signature": "@Override public void onStop()", "class_method_signature": "Cinematic.onStop()", "testcase": false, "constructor": false}, {"identifier": "onPause", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onPause()", "full_signature": "@Override public void onPause()", "class_method_signature": "Cinematic.onPause()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(JmeExporter ex)", "modifiers": "@Override public", "return": "void", "signature": "void write(JmeExporter ex)", "full_signature": "@Override public void write(JmeExporter ex)", "class_method_signature": "Cinematic.write(JmeExporter ex)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(JmeImporter im)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void read(JmeImporter im)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public void read(JmeImporter im)", "class_method_signature": "Cinematic.read(JmeImporter im)", "testcase": false, "constructor": false}, {"identifier": "setSpeed", "parameters": "(float speed)", "modifiers": "@Override public", "return": "void", "signature": "void setSpeed(float speed)", "full_signature": "@Override public void setSpeed(float speed)", "class_method_signature": "Cinematic.setSpeed(float speed)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(AppStateManager stateManager, Application app)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(AppStateManager stateManager, Application app)", "full_signature": "@Override public void initialize(AppStateManager stateManager, Application app)", "class_method_signature": "Cinematic.initialize(AppStateManager stateManager, Application app)", "testcase": false, "constructor": false}, {"identifier": "isInitialized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInitialized()", "full_signature": "@Override public boolean isInitialized()", "class_method_signature": "Cinematic.isInitialized()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "( String id )", "modifiers": "protected", "return": "void", "signature": "void setId( String id )", "full_signature": "protected void setId( String id )", "class_method_signature": "Cinematic.setId( String id )", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "Cinematic.getId()", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(boolean enabled)", "modifiers": "@Override public", "return": "void", "signature": "void setEnabled(boolean enabled)", "full_signature": "@Override public void setEnabled(boolean enabled)", "class_method_signature": "Cinematic.setEnabled(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "@Override public boolean isEnabled()", "class_method_signature": "Cinematic.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "stateAttached", "parameters": "(AppStateManager stateManager)", "modifiers": "@Override public", "return": "void", "signature": "void stateAttached(AppStateManager stateManager)", "full_signature": "@Override public void stateAttached(AppStateManager stateManager)", "class_method_signature": "Cinematic.stateAttached(AppStateManager stateManager)", "testcase": false, "constructor": false}, {"identifier": "stateDetached", "parameters": "(AppStateManager stateManager)", "modifiers": "@Override public", "return": "void", "signature": "void stateDetached(AppStateManager stateManager)", "full_signature": "@Override public void stateDetached(AppStateManager stateManager)", "class_method_signature": "Cinematic.stateDetached(AppStateManager stateManager)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(float tpf)", "modifiers": "@Override public", "return": "void", "signature": "void update(float tpf)", "full_signature": "@Override public void update(float tpf)", "class_method_signature": "Cinematic.update(float tpf)", "testcase": false, "constructor": false}, {"identifier": "onUpdate", "parameters": "(float tpf)", "modifiers": "@Override public", "return": "void", "signature": "void onUpdate(float tpf)", "full_signature": "@Override public void onUpdate(float tpf)", "class_method_signature": "Cinematic.onUpdate(float tpf)", "testcase": false, "constructor": false}, {"identifier": "setTime", "parameters": "(float time)", "modifiers": "@Override public", "return": "void", "signature": "void setTime(float time)", "full_signature": "@Override public void setTime(float time)", "class_method_signature": "Cinematic.setTime(float time)", "testcase": false, "constructor": false}, {"identifier": "addCinematicEvent", "parameters": "(float timeStamp, CinematicEvent cinematicEvent)", "modifiers": "public", "return": "KeyFrame", "signature": "KeyFrame addCinematicEvent(float timeStamp, CinematicEvent cinematicEvent)", "full_signature": "public KeyFrame addCinematicEvent(float timeStamp, CinematicEvent cinematicEvent)", "class_method_signature": "Cinematic.addCinematicEvent(float timeStamp, CinematicEvent cinematicEvent)", "testcase": false, "constructor": false}, {"identifier": "enqueueCinematicEvent", "parameters": "(CinematicEvent cinematicEvent)", "modifiers": "public", "return": "float", "signature": "float enqueueCinematicEvent(CinematicEvent cinematicEvent)", "full_signature": "public float enqueueCinematicEvent(CinematicEvent cinematicEvent)", "class_method_signature": "Cinematic.enqueueCinematicEvent(CinematicEvent cinematicEvent)", "testcase": false, "constructor": false}, {"identifier": "removeCinematicEvent", "parameters": "(CinematicEvent cinematicEvent)", "modifiers": "public", "return": "boolean", "signature": "boolean removeCinematicEvent(CinematicEvent cinematicEvent)", "full_signature": "public boolean removeCinematicEvent(CinematicEvent cinematicEvent)", "class_method_signature": "Cinematic.removeCinematicEvent(CinematicEvent cinematicEvent)", "testcase": false, "constructor": false}, {"identifier": "removeCinematicEvent", "parameters": "(float timeStamp, CinematicEvent cinematicEvent)", "modifiers": "public", "return": "boolean", "signature": "boolean removeCinematicEvent(float timeStamp, CinematicEvent cinematicEvent)", "full_signature": "public boolean removeCinematicEvent(float timeStamp, CinematicEvent cinematicEvent)", "class_method_signature": "Cinematic.removeCinematicEvent(float timeStamp, CinematicEvent cinematicEvent)", "testcase": false, "constructor": false}, {"identifier": "removeCinematicEvent", "parameters": "(KeyFrame keyFrame, CinematicEvent cinematicEvent)", "modifiers": "public", "return": "boolean", "signature": "boolean removeCinematicEvent(KeyFrame keyFrame, CinematicEvent cinematicEvent)", "full_signature": "public boolean removeCinematicEvent(KeyFrame keyFrame, CinematicEvent cinematicEvent)", "class_method_signature": "Cinematic.removeCinematicEvent(KeyFrame keyFrame, CinematicEvent cinematicEvent)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(RenderManager rm)", "modifiers": "@Override public", "return": "void", "signature": "void render(RenderManager rm)", "full_signature": "@Override public void render(RenderManager rm)", "class_method_signature": "Cinematic.render(RenderManager rm)", "testcase": false, "constructor": false}, {"identifier": "postRender", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void postRender()", "full_signature": "@Override public void postRender()", "class_method_signature": "Cinematic.postRender()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "Cinematic.cleanup()", "testcase": false, "constructor": false}, {"identifier": "fitDuration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void fitDuration()", "full_signature": "public void fitDuration()", "class_method_signature": "Cinematic.fitDuration()", "testcase": false, "constructor": false}, {"identifier": "bindCamera", "parameters": "(String cameraName, Camera cam)", "modifiers": "public", "return": "CameraNode", "signature": "CameraNode bindCamera(String cameraName, Camera cam)", "full_signature": "public CameraNode bindCamera(String cameraName, Camera cam)", "class_method_signature": "Cinematic.bindCamera(String cameraName, Camera cam)", "testcase": false, "constructor": false}, {"identifier": "getCamera", "parameters": "(String cameraName)", "modifiers": "public", "return": "CameraNode", "signature": "CameraNode getCamera(String cameraName)", "full_signature": "public CameraNode getCamera(String cameraName)", "class_method_signature": "Cinematic.getCamera(String cameraName)", "testcase": false, "constructor": false}, {"identifier": "setEnableCurrentCam", "parameters": "(boolean enabled)", "modifiers": "private", "return": "void", "signature": "void setEnableCurrentCam(boolean enabled)", "full_signature": "private void setEnableCurrentCam(boolean enabled)", "class_method_signature": "Cinematic.setEnableCurrentCam(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "setActiveCamera", "parameters": "(String cameraName)", "modifiers": "public", "return": "void", "signature": "void setActiveCamera(String cameraName)", "full_signature": "public void setActiveCamera(String cameraName)", "class_method_signature": "Cinematic.setActiveCamera(String cameraName)", "testcase": false, "constructor": false}, {"identifier": "activateCamera", "parameters": "(final float timeStamp, final String cameraName)", "modifiers": "public", "return": "void", "signature": "void activateCamera(final float timeStamp, final String cameraName)", "full_signature": "public void activateCamera(final float timeStamp, final String cameraName)", "class_method_signature": "Cinematic.activateCamera(final float timeStamp, final String cameraName)", "testcase": false, "constructor": false}, {"identifier": "getEventsData", "parameters": "()", "modifiers": "private", "return": "Map<String, Map<Object, Object>>", "signature": "Map<String, Map<Object, Object>> getEventsData()", "full_signature": "private Map<String, Map<Object, Object>> getEventsData()", "class_method_signature": "Cinematic.getEventsData()", "testcase": false, "constructor": false}, {"identifier": "putEventData", "parameters": "(String type, Object key, Object object)", "modifiers": "public", "return": "void", "signature": "void putEventData(String type, Object key, Object object)", "full_signature": "public void putEventData(String type, Object key, Object object)", "class_method_signature": "Cinematic.putEventData(String type, Object key, Object object)", "testcase": false, "constructor": false}, {"identifier": "getEventData", "parameters": "(String type, Object key)", "modifiers": "public", "return": "Object", "signature": "Object getEventData(String type, Object key)", "full_signature": "public Object getEventData(String type, Object key)", "class_method_signature": "Cinematic.getEventData(String type, Object key)", "testcase": false, "constructor": false}, {"identifier": "removeEventData", "parameters": "(String type, Object key)", "modifiers": "public", "return": "void", "signature": "void removeEventData(String type, Object key)", "full_signature": "public void removeEventData(String type, Object key)", "class_method_signature": "Cinematic.removeEventData(String type, Object key)", "testcase": false, "constructor": false}, {"identifier": "setScene", "parameters": "(Node scene)", "modifiers": "public", "return": "void", "signature": "void setScene(Node scene)", "full_signature": "public void setScene(Node scene)", "class_method_signature": "Cinematic.setScene(Node scene)", "testcase": false, "constructor": false}, {"identifier": "getScene", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node getScene()", "full_signature": "public Node getScene()", "class_method_signature": "Cinematic.getScene()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Cinematic.clear()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "Cinematic.dispose()", "testcase": false, "constructor": false}], "file": "jme3-core/src/main/java/com/jme3/cinematic/Cinematic.java"}, "focal_method": {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void clear() {\n        dispose();\n        cinematicEvents.clear();\n        timeLine.clear();\n        if (eventsData != null) {\n            eventsData.clear();\n        }\n    }", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Cinematic.clear()", "testcase": false, "constructor": false, "invocations": ["dispose", "clear", "clear", "clear"]}, "repository": {"repo_id": 17960746, "url": "https://github.com/jMonkeyEngine/jmonkeyengine", "language": "Java", "is_fork": false, "fork_count": 957, "stargazer_count": 2373, "size": 861551, "license": "licensed"}}