{"test_class": {"identifier": "LocalPreferenceLoadBalancerTest", "superclass": "extends BaseLoadBalancerTest", "interfaces": "", "fields": [], "file": "core-impl/client/src/test/java/com/alipay/sofa/rpc/client/lb/LocalPreferenceLoadBalancerTest.java"}, "test_case": {"identifier": "doSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doSelect() throws Exception {\n\n        LocalPreferenceLoadBalancer loadBalancer = new LocalPreferenceLoadBalancer(null);\n\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>();\n        int size = 20;\n        int total = 100000;\n        SofaRequest request = new SofaRequest();\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildSameWeightProviderList(size);\n            int localps = 5;\n            for (int i = 0; i < localps; i++) {\n                ProviderInfo localProvider = new ProviderInfo();\n                localProvider.setHost(SystemInfo.getLocalHost());\n                localProvider.setPort(22000 + i);\n                providers.add(localProvider);\n                cnt.put(22000 + i, 0);\n            }\n\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            for (int i = 0; i < size; i++) {\n                Assert.assertTrue(cnt.get(9000 + i) == 0);\n            }\n            int avg = total / localps;\n            for (int i = 0; i < localps; i++) {\n                Assert.assertTrue(avg * 0.9 < cnt.get(22000 + i)\n                    && avg * 1.1 > cnt.get(22000 + i)); // \u968f\u673a\u504f\u5dee\u4e0d\u4f1a\u592a\u5927\uff0c\u5e94\u8be5\u4e0d\u8d85\u8fc710%\n            }\n        }\n\n        {\n            for (int i = 0; i < size; i++) {\n                cnt.put(9000 + i, 0);\n            }\n            List<ProviderInfo> providers = buildDiffWeightProviderList(size);\n\n            int localps = 5;\n            for (int i = 0; i < localps; i++) {\n                ProviderInfo localProvider = new ProviderInfo();\n                localProvider.setHost(SystemInfo.getLocalHost());\n                localProvider.setPort(22000 + i);\n                localProvider.setWeight(i * 100);\n                providers.add(localProvider);\n                cnt.put(22000 + i, 0);\n            }\n\n            long start = System.currentTimeMillis();\n            for (int i = 0; i < total; i++) {\n                ProviderInfo provider = loadBalancer.doSelect(request, providers);\n                int port = provider.getPort();\n                cnt.put(port, cnt.get(port) + 1);\n            }\n            long end = System.currentTimeMillis();\n            LOGGER.info(\"elapsed\" + (end - start) + \"ms\");\n            LOGGER.info(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n            for (int i = 0; i < size; i++) {\n                Assert.assertTrue(cnt.get(9000 + i) == 0);\n            }\n\n            int count = 0;\n            for (int i = 0; i < localps; i++) {\n                count += i;\n            }\n            int per = total / count;\n            Assert.assertTrue(cnt.get(22000) == 0);\n            for (int i = 1; i < localps; i++) {\n                Assert.assertTrue(per * i * 0.9 < cnt.get(22000 + i)\n                    && per * i * 1.1 > cnt.get(22000 + i)); // \u968f\u673a\u504f\u5dee\u4e0d\u4f1a\u592a\u5927\uff0c\u5e94\u8be5\u4e0d\u8d85\u8fc710%\n            }\n        }\n    }", "signature": "void doSelect()", "full_signature": "@Test public void doSelect()", "class_method_signature": "LocalPreferenceLoadBalancerTest.doSelect()", "testcase": true, "constructor": false, "invocations": ["put", "buildSameWeightProviderList", "setHost", "getLocalHost", "setPort", "add", "put", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get", "assertTrue", "get", "get", "put", "buildDiffWeightProviderList", "setHost", "getLocalHost", "setPort", "setWeight", "add", "put", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "info", "info", "assertTrue", "get", "assertTrue", "get", "assertTrue", "get", "get"]}, "focal_class": {"identifier": "LocalPreferenceLoadBalancer", "superclass": "extends RandomLoadBalancer", "interfaces": "", "fields": [], "methods": [{"identifier": "LocalPreferenceLoadBalancer", "parameters": "(ConsumerBootstrap consumerBootstrap)", "modifiers": "public", "return": "", "signature": " LocalPreferenceLoadBalancer(ConsumerBootstrap consumerBootstrap)", "full_signature": "public  LocalPreferenceLoadBalancer(ConsumerBootstrap consumerBootstrap)", "class_method_signature": "LocalPreferenceLoadBalancer.LocalPreferenceLoadBalancer(ConsumerBootstrap consumerBootstrap)", "testcase": false, "constructor": true}, {"identifier": "doSelect", "parameters": "(SofaRequest invocation, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "signature": "ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "class_method_signature": "LocalPreferenceLoadBalancer.doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false}], "file": "core-impl/client/src/main/java/com/alipay/sofa/rpc/client/lb/LocalPreferenceLoadBalancer.java"}, "focal_method": {"identifier": "doSelect", "parameters": "(SofaRequest invocation, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "body": "@Override\n    public ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos) {\n        String localhost = SystemInfo.getLocalHost();\n        if (StringUtils.isEmpty(localhost)) {\n            return super.doSelect(invocation, providerInfos);\n        }\n        List<ProviderInfo> localProviderInfo = new ArrayList<ProviderInfo>();\n        for (ProviderInfo providerInfo : providerInfos) { // \u89e3\u6790IP\uff0c\u770b\u662f\u5426\u548c\u672c\u5730\u4e00\u81f4\n            if (localhost.equals(providerInfo.getHost())) {\n                localProviderInfo.add(providerInfo);\n            }\n        }\n        if (CommonUtils.isNotEmpty(localProviderInfo)) { // \u547d\u4e2d\u672c\u673a\u7684\u670d\u52a1\u7aef\n            return super.doSelect(invocation, localProviderInfo);\n        } else { // \u6ca1\u6709\u547d\u4e2d\u672c\u673a\u4e0a\u7684\u670d\u52a1\u7aef\n            return super.doSelect(invocation, providerInfos);\n        }\n    }", "signature": "ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "class_method_signature": "LocalPreferenceLoadBalancer.doSelect(SofaRequest invocation, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false, "invocations": ["getLocalHost", "isEmpty", "doSelect", "equals", "getHost", "add", "isNotEmpty", "doSelect", "doSelect"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}