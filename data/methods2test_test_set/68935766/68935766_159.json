{"test_class": {"identifier": "ScribeMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MavenProject pom = mock(MavenProject.class);", "modifier": "", "type": "MavenProject", "declarator": "pom = mock(MavenProject.class)", "var_name": "pom"}, {"original_string": "Log log = mock(Log.class);", "modifier": "", "type": "Log", "declarator": "log = mock(Log.class)", "var_name": "log"}, {"original_string": "File folder = new File(getClass().getClassLoader().getResource(\"beacon.yml\").getFile()).getParentFile();", "modifier": "", "type": "File", "declarator": "folder = new File(getClass().getClassLoader().getResource(\"beacon.yml\").getFile()).getParentFile()", "var_name": "folder"}, {"original_string": "File file = new File(folder, \"plugin.yml\");", "modifier": "", "type": "File", "declarator": "file = new File(folder, \"plugin.yml\")", "var_name": "file"}, {"original_string": "ScribeMojo mojo;", "modifier": "", "type": "ScribeMojo", "declarator": "mojo", "var_name": "mojo"}], "file": "scribe/maven-plugin/src/test/java/com/karuslabs/scribe/maven/plugin/ScribeMojoTest.java"}, "test_case": {"identifier": "project", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void project() {\n        var contributor = new Contributor();\n        contributor.setName(\"bob\");\n        \n        var developer = new Developer();\n        developer.setName(\"bobby\");\n        \n        var dependency = new Dependency();\n        dependency.setGroupId(\"org.spigotmc\");\n        dependency.setArtifactId(\"spigot-api\");\n        dependency.setVersion(\"1.15-R0.1-SNAPSHOT\");\n        \n        when(pom.getName()).thenReturn(\"name\");\n        when(pom.getVersion()).thenReturn(\"version\");\n        when(pom.getDescription()).thenReturn(\"description\");\n        when(pom.getUrl()).thenReturn(\"url\");\n        when(pom.getContributors()).thenReturn(List.of(contributor));\n        when(pom.getDevelopers()).thenReturn(List.of(developer));\n        when(pom.getDependencies()).thenReturn(List.of(dependency));\n        \n        var project = mojo.project();\n        \n        assertEquals(\"name\", project.name);\n        assertEquals(\"version\", project.version);\n        assertEquals(\"description\", project.description);\n        assertEquals(\"url\", project.url);\n        assertEquals(\"1.15-R0.1-SNAPSHOT\", project.api);\n        assertEquals(List.of(\"bob\", \"bobby\"), project.authors);\n    }", "signature": "void project()", "full_signature": "@Test void project()", "class_method_signature": "ScribeMojoTest.project()", "testcase": true, "constructor": false, "invocations": ["setName", "setName", "setGroupId", "setArtifactId", "setVersion", "thenReturn", "when", "getName", "thenReturn", "when", "getVersion", "thenReturn", "when", "getDescription", "thenReturn", "when", "getUrl", "thenReturn", "when", "getContributors", "of", "thenReturn", "when", "getDevelopers", "of", "thenReturn", "when", "getDependencies", "of", "project", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "of"]}, "focal_class": {"identifier": "ScribeMojo", "superclass": "extends AbstractMojo", "interfaces": "", "fields": [{"original_string": "@Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n    MavenProject pom;", "modifier": "@Parameter(defaultValue = \"${project}\", readonly = true, required = true)", "type": "MavenProject", "declarator": "pom", "var_name": "pom"}, {"original_string": "@Parameter(defaultValue = \"${project.compileClasspathElements}\", readonly = true, required = true)\n    List<String> classpaths;", "modifier": "@Parameter(defaultValue = \"${project.compileClasspathElements}\", readonly = true, required = true)", "type": "List<String>", "declarator": "classpaths", "var_name": "classpaths"}, {"original_string": "@Parameter(defaultValue = \"${project.basedir}/src/main/resources\")\n    File folder;", "modifier": "@Parameter(defaultValue = \"${project.basedir}/src/main/resources\")", "type": "File", "declarator": "folder", "var_name": "folder"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "ScribeMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "project", "parameters": "()", "modifiers": "", "return": "Project", "signature": "Project project()", "full_signature": " Project project()", "class_method_signature": "ScribeMojo.project()", "testcase": false, "constructor": false}, {"identifier": "valid", "parameters": "(MavenEnvironment environment)", "modifiers": "", "return": "boolean", "signature": "boolean valid(MavenEnvironment environment)", "full_signature": " boolean valid(MavenEnvironment environment)", "class_method_signature": "ScribeMojo.valid(MavenEnvironment environment)", "testcase": false, "constructor": false}], "file": "scribe/maven-plugin/src/main/java/com/karuslabs/scribe/maven/plugin/ScribeMojo.java"}, "focal_method": {"identifier": "project", "parameters": "()", "modifiers": "", "return": "Project", "body": "Project project() {\n        var authors = Stream.of(pom.getContributors(), pom.getDevelopers())\n                            .flatMap(Collection::stream)\n                            .map(Contributor::getName)\n                            .collect(toList());\n        \n        var api = \"\";\n        for (var dependency : pom.getDependencies()) {\n            var group = Project.DEPENDENCIES.get(dependency.getArtifactId());\n            if (Objects.equals(group, dependency.getGroupId())) {\n                api = dependency.getVersion();\n                break;\n            }\n        }\n        return new Project(pom.getName(), pom.getVersion(), api, authors, pom.getDescription(), pom.getUrl());\n    }", "signature": "Project project()", "full_signature": " Project project()", "class_method_signature": "ScribeMojo.project()", "testcase": false, "constructor": false, "invocations": ["collect", "map", "flatMap", "of", "getContributors", "getDevelopers", "toList", "getDependencies", "get", "getArtifactId", "equals", "getGroupId", "getVersion", "getName", "getVersion", "getDescription", "getUrl"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}