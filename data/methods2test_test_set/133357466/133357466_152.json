{"test_class": {"identifier": "BlockChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private BlockChain testNetChain;", "modifier": "private", "type": "BlockChain", "declarator": "testNetChain", "var_name": "testNetChain"}, {"original_string": "private Wallet wallet;", "modifier": "private", "type": "Wallet", "declarator": "wallet", "var_name": "wallet"}, {"original_string": "private BlockChain chain;", "modifier": "private", "type": "BlockChain", "declarator": "chain", "var_name": "chain"}, {"original_string": "private BlockStore blockStore;", "modifier": "private", "type": "BlockStore", "declarator": "blockStore", "var_name": "blockStore"}, {"original_string": "private Address coinbaseTo;", "modifier": "private", "type": "Address", "declarator": "coinbaseTo", "var_name": "coinbaseTo"}, {"original_string": "private final StoredBlock[] block = new StoredBlock[1];", "modifier": "private final", "type": "StoredBlock[]", "declarator": "block = new StoredBlock[1]", "var_name": "block"}, {"original_string": "private Transaction coinbaseTransaction;", "modifier": "private", "type": "Transaction", "declarator": "coinbaseTransaction", "var_name": "coinbaseTransaction"}, {"original_string": "private static final TweakableTestNet3Params TESTNET = new TweakableTestNet3Params();", "modifier": "private static final", "type": "TweakableTestNet3Params", "declarator": "TESTNET = new TweakableTestNet3Params()", "var_name": "TESTNET"}, {"original_string": "private static final NetworkParameters UNITTEST = UnitTestParams.get();", "modifier": "private static final", "type": "NetworkParameters", "declarator": "UNITTEST = UnitTestParams.get()", "var_name": "UNITTEST"}, {"original_string": "private static final NetworkParameters MAINNET = MainNetParams.get();", "modifier": "private static final", "type": "NetworkParameters", "declarator": "MAINNET = MainNetParams.get()", "var_name": "MAINNET"}], "file": "core/src/test/java/org/ulordj/core/BlockChainTest.java"}, "test_case": {"identifier": "testBasicChaining", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicChaining() throws Exception {\n        // Check that we can plug a few blocks together and the futures work.\n        ListenableFuture<StoredBlock> future = testNetChain.getHeightFuture(2);\n        // Block 1 from the testnet.\n        Block b1 = getBlock1();\n        assertTrue(testNetChain.add(b1));\n        assertFalse(future.isDone());\n        // Block 2 from the testnet.\n        Block b2 = getBlock2();\n\n        // Let's try adding an invalid block.\n        BigInteger n = b2.getNonce();\n        try {\n            b2.setNonce(BigInteger.valueOf(12345));\n            testNetChain.add(b2);\n            fail();\n        } catch (VerificationException e) {\n            b2.setNonce(n);\n        }\n\n        // Now it works because we reset the nonce.\n        assertTrue(testNetChain.add(b2));\n        assertTrue(future.isDone());\n        assertEquals(2, future.get().getHeight());\n    }", "signature": "void testBasicChaining()", "full_signature": "@Test public void testBasicChaining()", "class_method_signature": "BlockChainTest.testBasicChaining()", "testcase": true, "constructor": false, "invocations": ["getHeightFuture", "getBlock1", "assertTrue", "add", "assertFalse", "isDone", "getBlock2", "getNonce", "setNonce", "valueOf", "add", "fail", "setNonce", "assertTrue", "add", "assertTrue", "isDone", "assertEquals", "getHeight", "get"]}, "focal_class": {"identifier": "BlockChain", "superclass": "extends AbstractBlockChain", "interfaces": "", "fields": [{"original_string": "protected final BlockStore blockStore;", "modifier": "protected final", "type": "BlockStore", "declarator": "blockStore", "var_name": "blockStore"}], "methods": [{"identifier": "BlockChain", "parameters": "(Context context, Wallet wallet, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(Context context, Wallet wallet, BlockStore blockStore)", "full_signature": "public  BlockChain(Context context, Wallet wallet, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(Context context, Wallet wallet, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "BlockChain", "parameters": "(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "full_signature": "public  BlockChain(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(NetworkParameters params, Wallet wallet, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "BlockChain", "parameters": "(Context context, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(Context context, BlockStore blockStore)", "full_signature": "public  BlockChain(Context context, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(Context context, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "BlockChain", "parameters": "(NetworkParameters params, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(NetworkParameters params, BlockStore blockStore)", "full_signature": "public  BlockChain(NetworkParameters params, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(NetworkParameters params, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "BlockChain", "parameters": "(Context params, List<? extends Wallet> wallets, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(Context params, List<? extends Wallet> wallets, BlockStore blockStore)", "full_signature": "public  BlockChain(Context params, List<? extends Wallet> wallets, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(Context params, List<? extends Wallet> wallets, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "BlockChain", "parameters": "(NetworkParameters params, List<? extends Wallet> wallets, BlockStore blockStore)", "modifiers": "public", "return": "", "signature": " BlockChain(NetworkParameters params, List<? extends Wallet> wallets, BlockStore blockStore)", "full_signature": "public  BlockChain(NetworkParameters params, List<? extends Wallet> wallets, BlockStore blockStore)", "class_method_signature": "BlockChain.BlockChain(NetworkParameters params, List<? extends Wallet> wallets, BlockStore blockStore)", "testcase": false, "constructor": true}, {"identifier": "addToBlockStore", "parameters": "(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "modifiers": "@Override protected", "return": "StoredBlock", "signature": "StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "full_signature": "@Override protected StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "class_method_signature": "BlockChain.addToBlockStore(StoredBlock storedPrev, Block blockHeader, TransactionOutputChanges txOutChanges)", "testcase": false, "constructor": false}, {"identifier": "addToBlockStore", "parameters": "(StoredBlock storedPrev, Block blockHeader)", "modifiers": "@Override protected", "return": "StoredBlock", "signature": "StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader)", "full_signature": "@Override protected StoredBlock addToBlockStore(StoredBlock storedPrev, Block blockHeader)", "class_method_signature": "BlockChain.addToBlockStore(StoredBlock storedPrev, Block blockHeader)", "testcase": false, "constructor": false}, {"identifier": "rollbackBlockStore", "parameters": "(int height)", "modifiers": "@Override protected", "return": "void", "signature": "void rollbackBlockStore(int height)", "full_signature": "@Override protected void rollbackBlockStore(int height)", "class_method_signature": "BlockChain.rollbackBlockStore(int height)", "testcase": false, "constructor": false}, {"identifier": "shouldVerifyTransactions", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean shouldVerifyTransactions()", "full_signature": "@Override protected boolean shouldVerifyTransactions()", "class_method_signature": "BlockChain.shouldVerifyTransactions()", "testcase": false, "constructor": false}, {"identifier": "connectTransactions", "parameters": "(int height, Block block)", "modifiers": "@Override protected", "return": "TransactionOutputChanges", "signature": "TransactionOutputChanges connectTransactions(int height, Block block)", "full_signature": "@Override protected TransactionOutputChanges connectTransactions(int height, Block block)", "class_method_signature": "BlockChain.connectTransactions(int height, Block block)", "testcase": false, "constructor": false}, {"identifier": "connectTransactions", "parameters": "(StoredBlock newBlock)", "modifiers": "@Override protected", "return": "TransactionOutputChanges", "signature": "TransactionOutputChanges connectTransactions(StoredBlock newBlock)", "full_signature": "@Override protected TransactionOutputChanges connectTransactions(StoredBlock newBlock)", "class_method_signature": "BlockChain.connectTransactions(StoredBlock newBlock)", "testcase": false, "constructor": false}, {"identifier": "disconnectTransactions", "parameters": "(StoredBlock block)", "modifiers": "@Override protected", "return": "void", "signature": "void disconnectTransactions(StoredBlock block)", "full_signature": "@Override protected void disconnectTransactions(StoredBlock block)", "class_method_signature": "BlockChain.disconnectTransactions(StoredBlock block)", "testcase": false, "constructor": false}, {"identifier": "doSetChainHead", "parameters": "(StoredBlock chainHead)", "modifiers": "@Override protected", "return": "void", "signature": "void doSetChainHead(StoredBlock chainHead)", "full_signature": "@Override protected void doSetChainHead(StoredBlock chainHead)", "class_method_signature": "BlockChain.doSetChainHead(StoredBlock chainHead)", "testcase": false, "constructor": false}, {"identifier": "notSettingChainHead", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void notSettingChainHead()", "full_signature": "@Override protected void notSettingChainHead()", "class_method_signature": "BlockChain.notSettingChainHead()", "testcase": false, "constructor": false}, {"identifier": "getStoredBlockInCurrentScope", "parameters": "(Sha256Hash hash)", "modifiers": "@Override protected", "return": "StoredBlock", "signature": "StoredBlock getStoredBlockInCurrentScope(Sha256Hash hash)", "full_signature": "@Override protected StoredBlock getStoredBlockInCurrentScope(Sha256Hash hash)", "class_method_signature": "BlockChain.getStoredBlockInCurrentScope(Sha256Hash hash)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(FilteredBlock block)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(FilteredBlock block)", "full_signature": "@Override public boolean add(FilteredBlock block)", "class_method_signature": "BlockChain.add(FilteredBlock block)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ulordj/core/BlockChain.java"}, "focal_method": {"identifier": "add", "parameters": "(FilteredBlock block)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean add(FilteredBlock block) throws VerificationException, PrunedException {\n        boolean success = super.add(block);\n        if (success) {\n            trackFilteredTransactions(block.getTransactionCount());\n        }\n        return success;\n    }", "signature": "boolean add(FilteredBlock block)", "full_signature": "@Override public boolean add(FilteredBlock block)", "class_method_signature": "BlockChain.add(FilteredBlock block)", "testcase": false, "constructor": false, "invocations": ["add", "trackFilteredTransactions", "getTransactionCount"]}, "repository": {"repo_id": 133357466, "url": "https://github.com/UlordChain/ulordj", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 23, "size": 7129, "license": "licensed"}}