{"test_class": {"identifier": "ConfigUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BOOTSTRAP_SERVERS = \"kafkasvc:9092\";", "modifier": "private static final", "type": "String", "declarator": "BOOTSTRAP_SERVERS = \"kafkasvc:9092\"", "var_name": "BOOTSTRAP_SERVERS"}, {"original_string": "private static final String GROUP_ID = \"my-group\";", "modifier": "private static final", "type": "String", "declarator": "GROUP_ID = \"my-group\"", "var_name": "GROUP_ID"}, {"original_string": "private static final String CLIENT_ID = \"my-client\";", "modifier": "private static final", "type": "String", "declarator": "CLIENT_ID = \"my-client\"", "var_name": "CLIENT_ID"}, {"original_string": "private static final String KEY_DESER = \"org.apache.kafka.common.serialization.StringDeserializer\";", "modifier": "private static final", "type": "String", "declarator": "KEY_DESER = \"org.apache.kafka.common.serialization.StringDeserializer\"", "var_name": "KEY_DESER"}, {"original_string": "private static final String VALUE_DESER = \"com.expedia.adaptivealerting.kafka.serde.MappedMetricDataJsonSerde$Deser\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_DESER = \"com.expedia.adaptivealerting.kafka.serde.MappedMetricDataJsonSerde$Deser\"", "var_name": "VALUE_DESER"}, {"original_string": "private static final String KEY_SER = \"org.apache.kafka.common.serialization.StringSerializer\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SER = \"org.apache.kafka.common.serialization.StringSerializer\"", "var_name": "KEY_SER"}, {"original_string": "private static final String VALUE_SER = \"com.expedia.adaptivealerting.kafka.serde.MappedMetricDataJsonSerde$Ser\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_SER = \"com.expedia.adaptivealerting.kafka.serde.MappedMetricDataJsonSerde$Ser\"", "var_name": "VALUE_SER"}], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/util/ConfigUtilTest.java"}, "test_case": {"identifier": "testToConsumerConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToConsumerConfig() {\n        val config = ConfigFactory.load(\"consumer.conf\");\n        val props = ConfigUtil.toConsumerConfig(config);\n        assertEquals(BOOTSTRAP_SERVERS, props.getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG));\n        assertEquals(GROUP_ID, props.getProperty(ConsumerConfig.GROUP_ID_CONFIG));\n        assertEquals(KEY_DESER, props.getProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG));\n        assertEquals(VALUE_DESER, props.getProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG));\n    }", "signature": "void testToConsumerConfig()", "full_signature": "@Test public void testToConsumerConfig()", "class_method_signature": "ConfigUtilTest.testToConsumerConfig()", "testcase": true, "constructor": false, "invocations": ["load", "toConsumerConfig", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty", "assertEquals", "getProperty"]}, "focal_class": {"identifier": "ConfigUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toConsumerConfig", "parameters": "(Config config)", "modifiers": "public static", "return": "Properties", "signature": "Properties toConsumerConfig(Config config)", "full_signature": "public static Properties toConsumerConfig(Config config)", "class_method_signature": "ConfigUtil.toConsumerConfig(Config config)", "testcase": false, "constructor": false}, {"identifier": "toProducerConfig", "parameters": "(Config config)", "modifiers": "public static", "return": "Properties", "signature": "Properties toProducerConfig(Config config)", "full_signature": "public static Properties toProducerConfig(Config config)", "class_method_signature": "ConfigUtil.toProducerConfig(Config config)", "testcase": false, "constructor": false}, {"identifier": "copyProps", "parameters": "(Config config, Properties props, String... keys)", "modifiers": "private static", "return": "void", "signature": "void copyProps(Config config, Properties props, String... keys)", "full_signature": "private static void copyProps(Config config, Properties props, String... keys)", "class_method_signature": "ConfigUtil.copyProps(Config config, Properties props, String... keys)", "testcase": false, "constructor": false}, {"identifier": "copyProp", "parameters": "(Config config, Properties props, String key)", "modifiers": "private static", "return": "void", "signature": "void copyProp(Config config, Properties props, String key)", "full_signature": "private static void copyProp(Config config, Properties props, String key)", "class_method_signature": "ConfigUtil.copyProp(Config config, Properties props, String key)", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/util/ConfigUtil.java"}, "focal_method": {"identifier": "toConsumerConfig", "parameters": "(Config config)", "modifiers": "public static", "return": "Properties", "body": "public static Properties toConsumerConfig(Config config) {\n        val keys = new String[]{\n            ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,\n            ConsumerConfig.GROUP_ID_CONFIG,\n            ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n            ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG\n        };\n        val props = new Properties();\n        copyProps(config, props, keys);\n        return props;\n    }", "signature": "Properties toConsumerConfig(Config config)", "full_signature": "public static Properties toConsumerConfig(Config config)", "class_method_signature": "ConfigUtil.toConsumerConfig(Config config)", "testcase": false, "constructor": false, "invocations": ["copyProps"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}