{"test_class": {"identifier": "ExceptionHandlingMailSendingTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BY_OLAT_UNHANDLED_TEXT = \"outer exception text unimportant in OLAT\";", "modifier": "private static final", "type": "String", "declarator": "BY_OLAT_UNHANDLED_TEXT = \"outer exception text unimportant in OLAT\"", "var_name": "BY_OLAT_UNHANDLED_TEXT"}, {"original_string": "private List<ContactList> theContactLists;", "modifier": "private", "type": "List<ContactList>", "declarator": "theContactLists", "var_name": "theContactLists"}, {"original_string": "private Identity theFromIdentity;", "modifier": "private", "type": "Identity", "declarator": "theFromIdentity", "var_name": "theFromIdentity"}, {"original_string": "private MailTemplate emptyMailTemplate = new MailTemplate(\"Empty Subject\", \"Empty Body\",\"Empty Footer\", null) {\n\t\t@Override\n\t\tpublic void putVariablesInMailContext(VelocityContext context,\tOLATPrincipal recipient) {\n\t\t\t// \n\t\t}\n\t};", "modifier": "private", "type": "MailTemplate", "declarator": "emptyMailTemplate = new MailTemplate(\"Empty Subject\", \"Empty Body\",\"Empty Footer\", null) {\n\t\t@Override\n\t\tpublic void putVariablesInMailContext(VelocityContext context,\tOLATPrincipal recipient) {\n\t\t\t// \n\t\t}\n\t}", "var_name": "emptyMailTemplate"}, {"original_string": "private Object testI18nManagerInitializer;", "modifier": "private", "type": "Object", "declarator": "testI18nManagerInitializer", "var_name": "testI18nManagerInitializer"}, {"original_string": "private Translator translator;", "modifier": "private", "type": "Translator", "declarator": "translator", "var_name": "translator"}, {"original_string": "@DataPoint public static FolderClosedException fce = new FolderClosedException(Mockito.mock(Folder.class), \"a message\");", "modifier": "@DataPoint public static", "type": "FolderClosedException", "declarator": "fce = new FolderClosedException(Mockito.mock(Folder.class), \"a message\")", "var_name": "fce"}, {"original_string": "@DataPoint public static FolderNotFoundException fnfe = new FolderNotFoundException(Mockito.mock(Folder.class), \"a message\");", "modifier": "@DataPoint public static", "type": "FolderNotFoundException", "declarator": "fnfe = new FolderNotFoundException(Mockito.mock(Folder.class), \"a message\")", "var_name": "fnfe"}, {"original_string": "@DataPoint public static IllegalWriteException iwe = new IllegalWriteException(\"a message\");", "modifier": "@DataPoint public static", "type": "IllegalWriteException", "declarator": "iwe = new IllegalWriteException(\"a message\")", "var_name": "iwe"}, {"original_string": "@DataPoint public static MessageRemovedException mre = new MessageRemovedException(\"a message\");", "modifier": "@DataPoint public static", "type": "MessageRemovedException", "declarator": "mre = new MessageRemovedException(\"a message\")", "var_name": "mre"}, {"original_string": "@DataPoint public static MethodNotSupportedException mnse = new MethodNotSupportedException(\"a message\");", "modifier": "@DataPoint public static", "type": "MethodNotSupportedException", "declarator": "mnse = new MethodNotSupportedException(\"a message\")", "var_name": "mnse"}, {"original_string": "@DataPoint public static NoSuchProviderException nspe = new NoSuchProviderException(\"a message\");", "modifier": "@DataPoint public static", "type": "NoSuchProviderException", "declarator": "nspe = new NoSuchProviderException(\"a message\")", "var_name": "nspe"}, {"original_string": "@DataPoint public static ParseException pe = new ParseException(\"a message\");", "modifier": "@DataPoint public static", "type": "ParseException", "declarator": "pe = new ParseException(\"a message\")", "var_name": "pe"}, {"original_string": "@DataPoint public static ReadOnlyFolderException rofe = new ReadOnlyFolderException(Mockito.mock(Folder.class), \"a message\");", "modifier": "@DataPoint public static", "type": "ReadOnlyFolderException", "declarator": "rofe = new ReadOnlyFolderException(Mockito.mock(Folder.class), \"a message\")", "var_name": "rofe"}, {"original_string": "@DataPoint public static SearchException se = new SearchException(\"some parse message\");", "modifier": "@DataPoint public static", "type": "SearchException", "declarator": "se = new SearchException(\"some parse message\")", "var_name": "se"}, {"original_string": "@DataPoint public static StoreClosedException sce = new StoreClosedException(Mockito.mock(Store.class),\"some parse message\");", "modifier": "@DataPoint public static", "type": "StoreClosedException", "declarator": "sce = new StoreClosedException(Mockito.mock(Store.class),\"some parse message\")", "var_name": "sce"}], "file": "OLAT-LMS/src/test/java/org/olat/presentation/contactform/ExceptionHandlingMailSendingTemplateTest.java"}, "test_case": {"identifier": "shouldFailWithSendFailedExceptionWithAnAuthenticationFailedException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldFailWithSendFailedExceptionWithAnAuthenticationFailedException(){\n\t\t//setup\n\t\tExceptionHandlingMailSendingTemplate doSendWithSendFailedException = new ExceptionHandlingMailSendingTemplate() {\n\t\t\t@Override\n\t\t\tprotected boolean doSend(Emailer emailer) throws AddressException, SendFailedException, MessagingException {\n\t\t\t\tassertNotNull(\"emailer was constructed\", emailer);\n\t\t\t\tMessagingException firstInnerException = new AuthenticationFailedException(\"<some authentication failed message from the mailsystem>\");\n\t\t\t\tthrow new SendFailedException(BY_OLAT_UNHANDLED_TEXT, firstInnerException);\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tprotected MailTemplate getMailTemplate() {\n\t\t\t\treturn emptyMailTemplate;\n\t\t\t};\n\t\t\t\n\t\t\t@Override\n\t\t\tprotected List<ContactList> getTheToContactLists() {\n\t\t\t\treturn theContactLists;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tprotected Identity getFromIdentity() {\n\t\t\t\treturn theFromIdentity;\n\t\t\t}\n\t\t};\t\n\t\t\n\t\t//exercise\n\t\tMessageSendStatus sendStatus = doSendWithSendFailedException.send();\n\t\t\n\t\t//verify\n\t\tassertEquals(MessageSendStatusCode.SMTP_AUTHENTICATION_FAILED, sendStatus.getStatusCode());\n\t\tverifyStatusCodeIndicateSendFailedOnly(sendStatus);\n\t\tverifySendStatusIsError(sendStatus);\n\t\tassertTrue(sendStatus.canProceedWithWorkflow());\n\t}", "signature": "void shouldFailWithSendFailedExceptionWithAnAuthenticationFailedException()", "full_signature": "@Test public void shouldFailWithSendFailedExceptionWithAnAuthenticationFailedException()", "class_method_signature": "ExceptionHandlingMailSendingTemplateTest.shouldFailWithSendFailedExceptionWithAnAuthenticationFailedException()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "send", "assertEquals", "getStatusCode", "verifyStatusCodeIndicateSendFailedOnly", "verifySendStatusIsError", "assertTrue", "canProceedWithWorkflow"]}, "focal_class": {"identifier": "ExceptionHandlingMailSendingTemplate", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "send", "parameters": "()", "modifiers": "public", "return": "MessageSendStatus", "signature": "MessageSendStatus send()", "full_signature": "public MessageSendStatus send()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.send()", "testcase": false, "constructor": false}, {"identifier": "getFromIdentity", "parameters": "()", "modifiers": "abstract protected", "return": "Identity", "signature": "Identity getFromIdentity()", "full_signature": "abstract protected Identity getFromIdentity()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.getFromIdentity()", "testcase": false, "constructor": false}, {"identifier": "getTheToContactLists", "parameters": "()", "modifiers": "abstract protected", "return": "List<ContactList>", "signature": "List<ContactList> getTheToContactLists()", "full_signature": "abstract protected List<ContactList> getTheToContactLists()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.getTheToContactLists()", "testcase": false, "constructor": false}, {"identifier": "doSend", "parameters": "(Emailer emailer)", "modifiers": "abstract protected", "return": "boolean", "signature": "boolean doSend(Emailer emailer)", "full_signature": "abstract protected boolean doSend(Emailer emailer)", "class_method_signature": "ExceptionHandlingMailSendingTemplate.doSend(Emailer emailer)", "testcase": false, "constructor": false}, {"identifier": "getMailTemplate", "parameters": "()", "modifiers": "protected", "return": "MailTemplate", "signature": "MailTemplate getMailTemplate()", "full_signature": "protected MailTemplate getMailTemplate()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.getMailTemplate()", "testcase": false, "constructor": false}, {"identifier": "handleMessagingException", "parameters": "()", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus handleMessagingException()", "full_signature": "static MessageSendStatus handleMessagingException()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.handleMessagingException()", "testcase": false, "constructor": false}, {"identifier": "createSuccessfullSentEmailMessageStatus", "parameters": "()", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createSuccessfullSentEmailMessageStatus()", "full_signature": "static MessageSendStatus createSuccessfullSentEmailMessageStatus()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createSuccessfullSentEmailMessageStatus()", "testcase": false, "constructor": false}, {"identifier": "handleAddressException", "parameters": "(final boolean success)", "modifiers": "private", "return": "MessageSendStatus", "signature": "MessageSendStatus handleAddressException(final boolean success)", "full_signature": "private MessageSendStatus handleAddressException(final boolean success)", "class_method_signature": "ExceptionHandlingMailSendingTemplate.handleAddressException(final boolean success)", "testcase": false, "constructor": false}, {"identifier": "createSendProblemsCausedByAddresses", "parameters": "(final boolean success)", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createSendProblemsCausedByAddresses(final boolean success)", "full_signature": "static MessageSendStatus createSendProblemsCausedByAddresses(final boolean success)", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createSendProblemsCausedByAddresses(final boolean success)", "testcase": false, "constructor": false}, {"identifier": "createPartialyNotSentMessageSendStatus", "parameters": "(final boolean success)", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createPartialyNotSentMessageSendStatus(final boolean success)", "full_signature": "static MessageSendStatus createPartialyNotSentMessageSendStatus(final boolean success)", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createPartialyNotSentMessageSendStatus(final boolean success)", "testcase": false, "constructor": false}, {"identifier": "handleSendFailedException", "parameters": "(final SendFailedException e)", "modifiers": "private", "return": "MessageSendStatus", "signature": "MessageSendStatus handleSendFailedException(final SendFailedException e)", "full_signature": "private MessageSendStatus handleSendFailedException(final SendFailedException e)", "class_method_signature": "ExceptionHandlingMailSendingTemplate.handleSendFailedException(final SendFailedException e)", "testcase": false, "constructor": false}, {"identifier": "createCouldNotConnectToSmtpHostMessageSendStatus", "parameters": "()", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createCouldNotConnectToSmtpHostMessageSendStatus()", "full_signature": "static MessageSendStatus createCouldNotConnectToSmtpHostMessageSendStatus()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createCouldNotConnectToSmtpHostMessageSendStatus()", "testcase": false, "constructor": false}, {"identifier": "createUnknownSMTPHost", "parameters": "()", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createUnknownSMTPHost()", "full_signature": "static MessageSendStatus createUnknownSMTPHost()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createUnknownSMTPHost()", "testcase": false, "constructor": false}, {"identifier": "createNoRecipientMessageSendStatus", "parameters": "()", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createNoRecipientMessageSendStatus()", "full_signature": "static MessageSendStatus createNoRecipientMessageSendStatus()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createNoRecipientMessageSendStatus()", "testcase": false, "constructor": false}, {"identifier": "createInvalidAddressesMessageSendStatus", "parameters": "(Address[] invalidAddresses)", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createInvalidAddressesMessageSendStatus(Address[] invalidAddresses)", "full_signature": "static MessageSendStatus createInvalidAddressesMessageSendStatus(Address[] invalidAddresses)", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createInvalidAddressesMessageSendStatus(Address[] invalidAddresses)", "testcase": false, "constructor": false}, {"identifier": "createInvalidDomainMessageSendStatus", "parameters": "()", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createInvalidDomainMessageSendStatus()", "full_signature": "static MessageSendStatus createInvalidDomainMessageSendStatus()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createInvalidDomainMessageSendStatus()", "testcase": false, "constructor": false}, {"identifier": "createAuthenticationFailedMessageSendStatus", "parameters": "()", "modifiers": "static", "return": "MessageSendStatus", "signature": "MessageSendStatus createAuthenticationFailedMessageSendStatus()", "full_signature": "static MessageSendStatus createAuthenticationFailedMessageSendStatus()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.createAuthenticationFailedMessageSendStatus()", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/presentation/contactform/ExceptionHandlingMailSendingTemplate.java"}, "focal_method": {"identifier": "send", "parameters": "()", "modifiers": "public", "return": "MessageSendStatus", "body": "public MessageSendStatus send(){\n\n\t\tfinal boolean useInstitutionalEmail = false; \n\t\tfinal Emailer emailer = new Emailer(getFromIdentity(), useInstitutionalEmail, getMailTemplate());\n\t\t\n\t\tMessageSendStatus messageSendStatus = createSuccessfullSentEmailMessageStatus();\n\t\tboolean sendEmailSuccess = false;\n\t\ttry {\n\t\t\tsendEmailSuccess = doSend(emailer);\n\t\t} catch (final AddressException e) {\n\t\t\t// error in recipient email address(es)\n\t\t\t// TODO:discuss:\u00a0sendEmailSuccess should always be false if the addressexcpetion happens \n\t\t\tmessageSendStatus = handleAddressException(sendEmailSuccess);\n\t\t} catch (final SendFailedException e) {\n\t\t\t// error in sending message\n\t\t\t// CAUSE: sender email address invalid\n\t\t\tmessageSendStatus = handleSendFailedException(e);\n\t\t} catch (final MessagingException e) {\n\t\t\t// error in message-subject || .-body\n\t\t\tmessageSendStatus = handleMessagingException();\n\t\t}\n\t\treturn messageSendStatus;\n\t}", "signature": "MessageSendStatus send()", "full_signature": "public MessageSendStatus send()", "class_method_signature": "ExceptionHandlingMailSendingTemplate.send()", "testcase": false, "constructor": false, "invocations": ["getFromIdentity", "getMailTemplate", "createSuccessfullSentEmailMessageStatus", "doSend", "handleAddressException", "handleSendFailedException", "handleMessagingException"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}