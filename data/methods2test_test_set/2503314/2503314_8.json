{"test_class": {"identifier": "AuthenticationManagerLdapTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "private static final String NEW_PASSWORD = \"newPassword\";", "modifier": "private static final", "type": "String", "declarator": "NEW_PASSWORD = \"newPassword\"", "var_name": "NEW_PASSWORD"}, {"original_string": "private AuthenticationManagerLdapTemplate sut;", "modifier": "private", "type": "AuthenticationManagerLdapTemplate", "declarator": "sut", "var_name": "sut"}, {"original_string": "private CustomBindAuthenticator customBindAuthenticator = mock(CustomBindAuthenticator.class);", "modifier": "private", "type": "CustomBindAuthenticator", "declarator": "customBindAuthenticator = mock(CustomBindAuthenticator.class)", "var_name": "customBindAuthenticator"}, {"original_string": "private InitialDirContextFactory initialDirContextFactory = mock(InitialDirContextFactory.class);", "modifier": "private", "type": "InitialDirContextFactory", "declarator": "initialDirContextFactory = mock(InitialDirContextFactory.class)", "var_name": "initialDirContextFactory"}, {"original_string": "private DirContext dirContext = mock(DirContext.class);", "modifier": "private", "type": "DirContext", "declarator": "dirContext = mock(DirContext.class)", "var_name": "dirContext"}, {"original_string": "private ConfigurationUtil configurationUtil = mock(ConfigurationUtil.class);", "modifier": "private", "type": "ConfigurationUtil", "declarator": "configurationUtil = mock(ConfigurationUtil.class)", "var_name": "configurationUtil"}, {"original_string": "private ApplicationContext ctx = mock(ApplicationContext.class);", "modifier": "private", "type": "ApplicationContext", "declarator": "ctx = mock(ApplicationContext.class)", "var_name": "ctx"}, {"original_string": "private User user = new User();", "modifier": "private", "type": "User", "declarator": "user = new User()", "var_name": "user"}], "file": "tntconcept-core/src/test/java/com/autentia/tnt/manager/security/AuthenticationManagerLdapTemplateTest.java"}, "test_case": {"identifier": "shouldThrowNamingExceptionWhenApplyUpdate", "parameters": "()", "modifiers": "@Test(expected = NamingException.class) public", "return": "void", "body": "@Test(expected = NamingException.class)\n    public void shouldThrowNamingExceptionWhenApplyUpdate() throws NamingException {\n\n        user.setPasswordExpired(Boolean.FALSE);\n\n        doThrow(new NamingException()).when(dirContext).modifyAttributes(eq(user.getLdapName()),\n                any(ModificationItem[].class));\n\n        assertThat(user.isPasswordExpired(), is(Boolean.FALSE));\n        assertThat(user.getLdapPassword(), is(PASSWORD));\n\n        try {\n            Attribute newPasswordAttribute = new BasicAttribute(\"userPassword\", NEW_PASSWORD);\n            ModificationItem[] mods = new ModificationItem[1];\n            mods[0] = new ModificationItem(DirContext.REPLACE_ATTRIBUTE, newPasswordAttribute);\n            try {\n                dirContext.modifyAttributes(user.getLdapName(), mods);\n            } catch (NamingException e) {\n                AuthenticationManagerLdapImpl.log.error(e);\n                throw e;\n            }\n            user.setPasswordExpired(Boolean.FALSE);\n            user.setLdapPassword(NEW_PASSWORD);\n        } catch (NamingException e) {\n            assertThat(user.isPasswordExpired(), is(Boolean.FALSE));\n            assertThat(user.getLdapPassword(), is(PASSWORD));\n            throw e;\n        }\n    }", "signature": "void shouldThrowNamingExceptionWhenApplyUpdate()", "full_signature": "@Test(expected = NamingException.class) public void shouldThrowNamingExceptionWhenApplyUpdate()", "class_method_signature": "AuthenticationManagerLdapTemplateTest.shouldThrowNamingExceptionWhenApplyUpdate()", "testcase": true, "constructor": false, "invocations": ["setPasswordExpired", "modifyAttributes", "when", "doThrow", "eq", "getLdapName", "any", "assertThat", "isPasswordExpired", "is", "assertThat", "getLdapPassword", "is", "modifyAttributes", "getLdapName", "error", "setPasswordExpired", "setLdapPassword", "assertThat", "isPasswordExpired", "is", "assertThat", "getLdapPassword", "is"]}, "focal_class": {"identifier": "AuthenticationManagerLdapTemplate", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log log = LogFactory.getLog(AuthenticationManager.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.getLog(AuthenticationManager.class)", "var_name": "log"}], "methods": [{"identifier": "getTemplate", "parameters": "(User loggedUser)", "modifiers": "protected", "return": "LdapTemplate", "signature": "LdapTemplate getTemplate(User loggedUser)", "full_signature": "protected LdapTemplate getTemplate(User loggedUser)", "class_method_signature": "AuthenticationManagerLdapTemplate.getTemplate(User loggedUser)", "testcase": false, "constructor": false}, {"identifier": "getCallback", "parameters": "(final User user, final String password)", "modifiers": "protected", "return": "LdapCallback", "signature": "LdapCallback getCallback(final User user, final String password)", "full_signature": "protected LdapCallback getCallback(final User user, final String password)", "class_method_signature": "AuthenticationManagerLdapTemplate.getCallback(final User user, final String password)", "testcase": false, "constructor": false}, {"identifier": "getCallback", "parameters": "(final User user)", "modifiers": "protected", "return": "LdapCallback", "signature": "LdapCallback getCallback(final User user)", "full_signature": "protected LdapCallback getCallback(final User user)", "class_method_signature": "AuthenticationManagerLdapTemplate.getCallback(final User user)", "testcase": false, "constructor": false}, {"identifier": "changeLdapUserPassword", "parameters": "(DirContext dirContext, String password, User user)", "modifiers": "protected", "return": "User", "signature": "User changeLdapUserPassword(DirContext dirContext, String password, User user)", "full_signature": "protected User changeLdapUserPassword(DirContext dirContext, String password, User user)", "class_method_signature": "AuthenticationManagerLdapTemplate.changeLdapUserPassword(DirContext dirContext, String password, User user)", "testcase": false, "constructor": false}, {"identifier": "setLdapUserPasswordResetFlag", "parameters": "(DirContext dirContext, User user)", "modifiers": "protected", "return": "User", "signature": "User setLdapUserPasswordResetFlag(DirContext dirContext, User user)", "full_signature": "protected User setLdapUserPasswordResetFlag(DirContext dirContext, User user)", "class_method_signature": "AuthenticationManagerLdapTemplate.setLdapUserPasswordResetFlag(DirContext dirContext, User user)", "testcase": false, "constructor": false}, {"identifier": "modifyAttributes", "parameters": "(DirContext dirContext, User user, ModificationItem[] mods)", "modifiers": "protected", "return": "void", "signature": "void modifyAttributes(DirContext dirContext, User user, ModificationItem[] mods)", "full_signature": "protected void modifyAttributes(DirContext dirContext, User user, ModificationItem[] mods)", "class_method_signature": "AuthenticationManagerLdapTemplate.modifyAttributes(DirContext dirContext, User user, ModificationItem[] mods)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(final User user, final String password)", "modifiers": "public", "return": "void", "signature": "void changePassword(final User user, final String password)", "full_signature": "public void changePassword(final User user, final String password)", "class_method_signature": "AuthenticationManagerLdapTemplate.changePassword(final User user, final String password)", "testcase": false, "constructor": false}, {"identifier": "changePassword", "parameters": "(final User user, final String password, User userAdmin)", "modifiers": "protected", "return": "void", "signature": "void changePassword(final User user, final String password, User userAdmin)", "full_signature": "protected void changePassword(final User user, final String password, User userAdmin)", "class_method_signature": "AuthenticationManagerLdapTemplate.changePassword(final User user, final String password, User userAdmin)", "testcase": false, "constructor": false}, {"identifier": "activateLdapUserPasswordResetFlag", "parameters": "(final User user, User userAdmin)", "modifiers": "protected", "return": "void", "signature": "void activateLdapUserPasswordResetFlag(final User user, User userAdmin)", "full_signature": "protected void activateLdapUserPasswordResetFlag(final User user, User userAdmin)", "class_method_signature": "AuthenticationManagerLdapTemplate.activateLdapUserPasswordResetFlag(final User user, User userAdmin)", "testcase": false, "constructor": false}], "file": "tntconcept-core/src/main/java/com/autentia/tnt/manager/security/AuthenticationManagerLdapTemplate.java"}, "focal_method": {"identifier": "modifyAttributes", "parameters": "(DirContext dirContext, User user, ModificationItem[] mods)", "modifiers": "protected", "return": "void", "body": "protected void modifyAttributes(DirContext dirContext, User user, ModificationItem[] mods) throws NamingException {\n        dirContext.modifyAttributes(user.getLdapName(), mods);\n    }", "signature": "void modifyAttributes(DirContext dirContext, User user, ModificationItem[] mods)", "full_signature": "protected void modifyAttributes(DirContext dirContext, User user, ModificationItem[] mods)", "class_method_signature": "AuthenticationManagerLdapTemplate.modifyAttributes(DirContext dirContext, User user, ModificationItem[] mods)", "testcase": false, "constructor": false, "invocations": ["modifyAttributes", "getLdapName"]}, "repository": {"repo_id": 2503314, "url": "https://github.com/autentia/TNTConcept", "stars": 11, "created": "10/3/2011 8:00:30 AM +00:00", "updates": "2020-01-24T12:30:31+00:00", "fork": "False", "license": "licensed"}}