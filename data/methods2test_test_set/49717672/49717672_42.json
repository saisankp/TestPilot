{"test_class": {"identifier": "SensorSanityTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/Models/SensorSanityTest.java"}, "test_case": {"identifier": "sanity_raw_test_2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sanity_raw_test_2() {\n\n        assertWithMessage(\"Unrestricted passes\").that(SensorSanity.isRawValueSane(10000, DexCollectionType.Disabled)).isTrue();\n\n        assertWithMessage(\"G5 typical OK\").that(SensorSanity.isRawValueSane(300, DexCollectionType.DexcomG5)).isTrue();\n        assertWithMessage(\"G4 typical OK\").that(SensorSanity.isRawValueSane(300, DexCollectionType.DexbridgeWixel)).isTrue();\n        assertWithMessage(\"Libre typical OK\").that(SensorSanity.isRawValueSane(300, DexCollectionType.LimiTTer)).isTrue();\n\n\n        assertWithMessage(\"G5 high FAIL\").that(SensorSanity.isRawValueSane(1001, DexCollectionType.DexcomG5)).isFalse();\n        assertWithMessage(\"G4 high FAIL\").that(SensorSanity.isRawValueSane(1001, DexCollectionType.DexbridgeWixel)).isFalse();\n        //     assertWithMessage(\"Libre low FAIL\").that(SensorSanity.isRawValueSane(1001, DexCollectionType.LimiTTer)).isFalse();\n\n    }", "signature": "void sanity_raw_test_2()", "full_signature": "@Test public void sanity_raw_test_2()", "class_method_signature": "SensorSanityTest.sanity_raw_test_2()", "testcase": true, "constructor": false, "invocations": ["isTrue", "that", "assertWithMessage", "isRawValueSane", "isTrue", "that", "assertWithMessage", "isRawValueSane", "isTrue", "that", "assertWithMessage", "isRawValueSane", "isTrue", "that", "assertWithMessage", "isRawValueSane", "isFalse", "that", "assertWithMessage", "isRawValueSane", "isFalse", "that", "assertWithMessage", "isRawValueSane"]}, "focal_class": {"identifier": "SensorSanity", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final double DEXCOM_MIN_RAW = 5;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_MIN_RAW = 5", "var_name": "DEXCOM_MIN_RAW"}, {"original_string": "public static final double DEXCOM_MAX_RAW = 1000;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_MAX_RAW = 1000", "var_name": "DEXCOM_MAX_RAW"}, {"original_string": "public static final double DEXCOM_G6_MIN_RAW = 5;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_G6_MIN_RAW = 5", "var_name": "DEXCOM_G6_MIN_RAW"}, {"original_string": "public static final double DEXCOM_G6_MAX_RAW = 1000;", "modifier": "public static final", "type": "double", "declarator": "DEXCOM_G6_MAX_RAW = 1000", "var_name": "DEXCOM_G6_MAX_RAW"}, {"original_string": "public static final double LIBRE_MIN_RAW = 5;", "modifier": "public static final", "type": "double", "declarator": "LIBRE_MIN_RAW = 5", "var_name": "LIBRE_MIN_RAW"}, {"original_string": "private static final String TAG = \"SensorSanity\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"SensorSanity\"", "var_name": "TAG"}, {"original_string": "private static final String PREF_LIBRE_SN = \"SensorSanity-LibreSN\";", "modifier": "private static final", "type": "String", "declarator": "PREF_LIBRE_SN = \"SensorSanity-LibreSN\"", "var_name": "PREF_LIBRE_SN"}, {"original_string": "private static final String PREF_LIBRE_SENSOR_UUID = \"SensorSanity-LibreSensor\";", "modifier": "private static final", "type": "String", "declarator": "PREF_LIBRE_SENSOR_UUID = \"SensorSanity-LibreSensor\"", "var_name": "PREF_LIBRE_SENSOR_UUID"}], "methods": [{"identifier": "isRawValueSane", "parameters": "(double raw_value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value)", "full_signature": "public static boolean isRawValueSane(double raw_value)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value)", "testcase": false, "constructor": false}, {"identifier": "isRawValueSane", "parameters": "(double raw_value, boolean hard)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value, boolean hard)", "full_signature": "public static boolean isRawValueSane(double raw_value, boolean hard)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value, boolean hard)", "testcase": false, "constructor": false}, {"identifier": "isRawValueSane", "parameters": "(double raw_value, DexCollectionType type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value, DexCollectionType type)", "full_signature": "public static boolean isRawValueSane(double raw_value, DexCollectionType type)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value, DexCollectionType type)", "testcase": false, "constructor": false}, {"identifier": "isRawValueSane", "parameters": "(double raw_value, DexCollectionType type, boolean hard_check)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRawValueSane(double raw_value, DexCollectionType type, boolean hard_check)", "full_signature": "public static boolean isRawValueSane(double raw_value, DexCollectionType type, boolean hard_check)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value, DexCollectionType type, boolean hard_check)", "testcase": false, "constructor": false}, {"identifier": "allowTestingWithDeadSensor", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean allowTestingWithDeadSensor()", "full_signature": "public static boolean allowTestingWithDeadSensor()", "class_method_signature": "SensorSanity.allowTestingWithDeadSensor()", "testcase": false, "constructor": false}, {"identifier": "clearEnviorment", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearEnviorment()", "full_signature": "public static void clearEnviorment()", "class_method_signature": "SensorSanity.clearEnviorment()", "testcase": false, "constructor": false}, {"identifier": "checkLibreSensorChangeIfEnabled", "parameters": "(final String sn)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkLibreSensorChangeIfEnabled(final String sn)", "full_signature": "public static boolean checkLibreSensorChangeIfEnabled(final String sn)", "class_method_signature": "SensorSanity.checkLibreSensorChangeIfEnabled(final String sn)", "testcase": false, "constructor": false}, {"identifier": "checkLibreSensorChange", "parameters": "(final String currentSerial)", "modifiers": "public synchronized static", "return": "boolean", "signature": "boolean checkLibreSensorChange(final String currentSerial)", "full_signature": "public synchronized static boolean checkLibreSensorChange(final String currentSerial)", "class_method_signature": "SensorSanity.checkLibreSensorChange(final String currentSerial)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/Models/SensorSanity.java"}, "focal_method": {"identifier": "isRawValueSane", "parameters": "(double raw_value)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isRawValueSane(double raw_value) {\n        return isRawValueSane(raw_value, DexCollectionType.getDexCollectionType(), false);\n    }", "signature": "boolean isRawValueSane(double raw_value)", "full_signature": "public static boolean isRawValueSane(double raw_value)", "class_method_signature": "SensorSanity.isRawValueSane(double raw_value)", "testcase": false, "constructor": false, "invocations": ["isRawValueSane", "getDexCollectionType"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}