{"test_class": {"identifier": "PieTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Pie p1 = new Pie(\"Weekly Special\", \"Apple\", 1, 0,\n                     \"flour\", \"sugar\", \"apples\", \"cinnamon\",\n                     \"butter\", \"baking soda\", \"salt\");", "modifier": "private", "type": "Pie", "declarator": "p1 = new Pie(\"Weekly Special\", \"Apple\", 1, 0,\n                     \"flour\", \"sugar\", \"apples\", \"cinnamon\",\n                     \"butter\", \"baking soda\", \"salt\")", "var_name": "p1"}, {"original_string": "private Pie p2 = new Pie(\"Summer Special\", \"Key Lime\", 1, 2.0,\n                     \"flour\", \"sugar\", \"lime juice\", \"lemon juice\",\n                     \"graham crackers\", \"butter\", \"baking soda\", \"salt\");", "modifier": "private", "type": "Pie", "declarator": "p2 = new Pie(\"Summer Special\", \"Key Lime\", 1, 2.0,\n                     \"flour\", \"sugar\", \"lime juice\", \"lemon juice\",\n                     \"graham crackers\", \"butter\", \"baking soda\", \"salt\")", "var_name": "p2"}], "file": "Projects/Project_10/PieTest.java"}, "test_case": {"identifier": "priceTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void priceTest() {\n      Assert.assertEquals(\"\", 12, p1.price(), .001);\n      Assert.assertFalse(\"\", 12 == p2.price());\n   }", "signature": "void priceTest()", "full_signature": "@Test public void priceTest()", "class_method_signature": "PieTest.priceTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "price", "assertFalse", "price"]}, "focal_class": {"identifier": "Pie", "superclass": "extends BakedItem", "interfaces": "", "fields": [{"original_string": "private double crustCost;", "modifier": "private", "type": "double", "declarator": "crustCost", "var_name": "crustCost"}, {"original_string": "public static final double BASE_RATE = 12.0;", "modifier": "public static final", "type": "double", "declarator": "BASE_RATE = 12.0", "var_name": "BASE_RATE"}], "methods": [{"identifier": "Pie", "parameters": "(String nameIn, String flavorIn, int quantityIn, \n               double crustCostIn, String ... ingredientsIn)", "modifiers": "public", "return": "", "signature": " Pie(String nameIn, String flavorIn, int quantityIn, \n               double crustCostIn, String ... ingredientsIn)", "full_signature": "public  Pie(String nameIn, String flavorIn, int quantityIn, \n               double crustCostIn, String ... ingredientsIn)", "class_method_signature": "Pie.Pie(String nameIn, String flavorIn, int quantityIn, \n               double crustCostIn, String ... ingredientsIn)", "testcase": false, "constructor": true}, {"identifier": "getCrustCost", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCrustCost()", "full_signature": "public double getCrustCost()", "class_method_signature": "Pie.getCrustCost()", "testcase": false, "constructor": false}, {"identifier": "setCrustCost", "parameters": "(double crustCostIn)", "modifiers": "public", "return": "void", "signature": "void setCrustCost(double crustCostIn)", "full_signature": "public void setCrustCost(double crustCostIn)", "class_method_signature": "Pie.setCrustCost(double crustCostIn)", "testcase": false, "constructor": false}, {"identifier": "price", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double price()", "full_signature": "public double price()", "class_method_signature": "Pie.price()", "testcase": false, "constructor": false}], "file": "Projects/Project_10/Pie.java"}, "focal_method": {"identifier": "price", "parameters": "()", "modifiers": "public", "return": "double", "body": "public double price() {\n      return (BASE_RATE + crustCost) * quantity;\n   }", "signature": "double price()", "full_signature": "public double price()", "class_method_signature": "Pie.price()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 79497496, "url": "https://github.com/perryBunn/COMP1210", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 15825, "license": "MIT License"}}