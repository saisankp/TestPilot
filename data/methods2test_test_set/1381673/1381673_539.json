{"test_class": {"identifier": "SumFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SumFunction sumFunction;", "modifier": "private", "type": "SumFunction", "declarator": "sumFunction", "var_name": "sumFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/SumFunctionTest.java"}, "test_case": {"identifier": "invokeArrayParamContainsUnsupportedNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeArrayParamContainsUnsupportedNumber() {\n        FunctionTestUtil.assertResultError(sumFunction.invoke(new Object[]{10, 2, Double.NaN}), InvalidParametersEvent.class);\n    }", "signature": "void invokeArrayParamContainsUnsupportedNumber()", "full_signature": "@Test public void invokeArrayParamContainsUnsupportedNumber()", "class_method_signature": "SumFunctionTest.invokeArrayParamContainsUnsupportedNumber()", "testcase": true, "constructor": false, "invocations": ["assertResultError", "invoke"]}, "focal_class": {"identifier": "SumFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [], "methods": [{"identifier": "SumFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " SumFunction()", "full_signature": "public  SumFunction()", "class_method_signature": "SumFunction.SumFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName(\"list\") List list)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName(\"list\") List list)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"list\") List list)", "class_method_signature": "SumFunction.invoke(@ParameterName(\"list\") List list)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName(\"list\") Number single)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName(\"list\") Number single)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"list\") Number single)", "class_method_signature": "SumFunction.invoke(@ParameterName(\"list\") Number single)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(@ParameterName(\"n\") Object[] list)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName(\"n\") Object[] list)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"n\") Object[] list)", "class_method_signature": "SumFunction.invoke(@ParameterName(\"n\") Object[] list)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/SumFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName(\"list\") List list)", "modifiers": "public", "return": "FEELFnResult<BigDecimal>", "body": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"list\") List list) {\n        if ( list == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"the list cannot be null\"));\n        }\n        if (list.isEmpty()) {\n            return FEELFnResult.ofResult(null); // DMN spec, Table 75: ...or null if list is empty\n        }\n        BigDecimal sum = BigDecimal.ZERO;\n        for ( Object element : list ) {\n            if ( element instanceof BigDecimal ) {\n                sum = sum.add( (BigDecimal) element );\n            } else if ( element instanceof Number ) {\n                BigDecimal value = EvalHelper.getBigDecimalOrNull( element );\n                if (value == null) {\n                    return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"an element in the list is not suitable for the sum\"));\n                } else {\n                    sum = sum.add( value );\n                }\n            } else {\n                return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"an element in the list is not a number\"));\n            }\n        }\n        return FEELFnResult.ofResult( sum );\n    }", "signature": "FEELFnResult<BigDecimal> invoke(@ParameterName(\"list\") List list)", "full_signature": "public FEELFnResult<BigDecimal> invoke(@ParameterName(\"list\") List list)", "class_method_signature": "SumFunction.invoke(@ParameterName(\"list\") List list)", "testcase": false, "constructor": false, "invocations": ["ofError", "isEmpty", "ofResult", "add", "getBigDecimalOrNull", "ofError", "add", "ofError", "ofResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}