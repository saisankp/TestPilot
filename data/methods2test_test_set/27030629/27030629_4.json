{"test_class": {"identifier": "UserModelDataMapperTest", "superclass": "extends PresentationSpec", "interfaces": "", "fields": [{"original_string": "private static final int FAKE_USER_ID = 123;", "modifier": "private static final", "type": "int", "declarator": "FAKE_USER_ID = 123", "var_name": "FAKE_USER_ID"}, {"original_string": "private static final String FAKE_FULLNAME = \"Tony Stark\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_FULLNAME = \"Tony Stark\"", "var_name": "FAKE_FULLNAME"}, {"original_string": "private UserModelDataMapper userModelDataMapper = new UserModelDataMapper();", "modifier": "private", "type": "UserModelDataMapper", "declarator": "userModelDataMapper = new UserModelDataMapper()", "var_name": "userModelDataMapper"}], "file": "Presentation/src/test/java/com/example/presentation/userlist/UserModelDataMapperTest.java"}, "test_case": {"identifier": "testTransformUserCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformUserCollection() {\n        User mockUserOne = mock(User.class);\n        User mockUserTwo = mock(User.class);\n\n        List<User> userList = new ArrayList<>(5);\n        userList.add(mockUserOne);\n        userList.add(mockUserTwo);\n\n        Collection<UserModel> userModelList = userModelDataMapper.transform(userList);\n\n        assertThat(userModelList.toArray()[0], is(instanceOf(UserModel.class)));\n        assertThat(userModelList.toArray()[1], is(instanceOf(UserModel.class)));\n        assertThat(userModelList.size(), is(2));\n    }", "signature": "void testTransformUserCollection()", "full_signature": "@Test public void testTransformUserCollection()", "class_method_signature": "UserModelDataMapperTest.testTransformUserCollection()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "add", "add", "transform", "assertThat", "toArray", "is", "instanceOf", "assertThat", "toArray", "is", "instanceOf", "assertThat", "size", "is"]}, "focal_class": {"identifier": "UserModelDataMapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "transform", "parameters": "(User user)", "modifiers": "public", "return": "UserModel", "signature": "UserModel transform(User user)", "full_signature": "public UserModel transform(User user)", "class_method_signature": "UserModelDataMapper.transform(User user)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Collection<User> usersCollection)", "modifiers": "public", "return": "Collection<UserModel>", "signature": "Collection<UserModel> transform(Collection<User> usersCollection)", "full_signature": "public Collection<UserModel> transform(Collection<User> usersCollection)", "class_method_signature": "UserModelDataMapper.transform(Collection<User> usersCollection)", "testcase": false, "constructor": false}], "file": "Presentation/src/main/java/com/example/presentation/userlist/UserModelDataMapper.java"}, "focal_method": {"identifier": "transform", "parameters": "(User user)", "modifiers": "public", "return": "UserModel", "body": "public UserModel transform(User user) {\n    if (user == null) {\n      throw new IllegalArgumentException(\"Cannot transform a null value\");\n    }\n    UserModel userModel = new UserModel(user.getUserId());\n    userModel.setFullName(user.getFullName());\n\n    return userModel;\n  }", "signature": "UserModel transform(User user)", "full_signature": "public UserModel transform(User user)", "class_method_signature": "UserModelDataMapper.transform(User user)", "testcase": false, "constructor": false, "invocations": ["getUserId", "setFullName", "getFullName"]}, "repository": {"repo_id": 27030629, "url": "https://github.com/nenick/AndroidAppDevelopment", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 17, "size": 6155, "license": "licensed"}}