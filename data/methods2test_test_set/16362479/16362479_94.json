{"test_class": {"identifier": "EntityOwnershipStatisticsTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private static final String LOCAL_MEMBER_NAME = \"member-1\";", "modifier": "private static final", "type": "String", "declarator": "LOCAL_MEMBER_NAME = \"member-1\"", "var_name": "LOCAL_MEMBER_NAME"}, {"original_string": "private static final String REMOTE_MEMBER_NAME1 = \"member-2\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_MEMBER_NAME1 = \"member-2\"", "var_name": "REMOTE_MEMBER_NAME1"}, {"original_string": "private static final String REMOTE_MEMBER_NAME2 = \"member-3\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_MEMBER_NAME2 = \"member-3\"", "var_name": "REMOTE_MEMBER_NAME2"}, {"original_string": "private static final String ENTITY_TYPE = \"test\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_TYPE = \"test\"", "var_name": "ENTITY_TYPE"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"))", "var_name": "ENTITY_ID1"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"))", "var_name": "ENTITY_ID2"}, {"original_string": "private final Shard mockShard = Mockito.mock(Shard.class);", "modifier": "private final", "type": "Shard", "declarator": "mockShard = Mockito.mock(Shard.class)", "var_name": "mockShard"}, {"original_string": "private final ShardDataTree shardDataTree = new ShardDataTree(mockShard, EOSTestUtils.SCHEMA_CONTEXT,\n        TreeType.OPERATIONAL);", "modifier": "private final", "type": "ShardDataTree", "declarator": "shardDataTree = new ShardDataTree(mockShard, EOSTestUtils.SCHEMA_CONTEXT,\n        TreeType.OPERATIONAL)", "var_name": "shardDataTree"}, {"original_string": "private EntityOwnershipStatistics ownershipStatistics;", "modifier": "private", "type": "EntityOwnershipStatistics", "declarator": "ownershipStatistics", "var_name": "ownershipStatistics"}], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipStatisticsTest.java"}, "test_case": {"identifier": "testOnDataTreeChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnDataTreeChanged() throws Exception {\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID1, LOCAL_MEMBER_NAME));\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID2, LOCAL_MEMBER_NAME));\n\n        // Write local member as owner for entity 1\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, LOCAL_MEMBER_NAME));\n        assertStatistics(ownershipStatistics.all(), LOCAL_MEMBER_NAME, 1L);\n\n        // Add remote member 1 as candidate for entity 1 - ownershipStatistics support should not get notified\n\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID1, REMOTE_MEMBER_NAME1));\n        assertStatistics(ownershipStatistics.all(), LOCAL_MEMBER_NAME, 1L);\n\n        // Change owner to remote member 1 for entity 1\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, REMOTE_MEMBER_NAME1));\n        Map<String, Map<String, Long>> statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 1L);\n\n        // Change owner to remote member 2 for entity 1\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, REMOTE_MEMBER_NAME2));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 1L);\n\n        // Clear the owner for entity 1\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, \"\"));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 0L);\n\n        // Change owner to the local member for entity 1\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID1), entityEntryWithOwner(ENTITY_ID1, LOCAL_MEMBER_NAME));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 1L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 0L);\n\n        // Change owner to remote member 1 for entity 2\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, REMOTE_MEMBER_NAME1));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 1L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 1L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 0L);\n\n        // Change owner to the local member for entity 2\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, LOCAL_MEMBER_NAME));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 2L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 0L);\n\n        // Write local member owner for entity 2 again - expect no change\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, LOCAL_MEMBER_NAME));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 2L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 0L);\n\n        // Clear the owner for entity 2\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, \"\"));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 1L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 0L);\n\n        // Clear the owner for entity 2 again - expect no change\n\n        writeNode(entityPath(ENTITY_TYPE, ENTITY_ID2), entityEntryWithOwner(ENTITY_ID2, \"\"));\n        statistics = ownershipStatistics.all();\n        assertStatistics(statistics, LOCAL_MEMBER_NAME, 1L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME1, 0L);\n        assertStatistics(statistics, REMOTE_MEMBER_NAME2, 0L);\n\n    }", "signature": "void testOnDataTreeChanged()", "full_signature": "@Test public void testOnDataTreeChanged()", "class_method_signature": "EntityOwnershipStatisticsTest.testOnDataTreeChanged()", "testcase": true, "constructor": false, "invocations": ["writeNode", "entityOwnersWithCandidate", "writeNode", "entityOwnersWithCandidate", "writeNode", "entityPath", "entityEntryWithOwner", "assertStatistics", "all", "writeNode", "entityOwnersWithCandidate", "assertStatistics", "all", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics", "writeNode", "entityPath", "entityEntryWithOwner", "all", "assertStatistics", "assertStatistics", "assertStatistics"]}, "focal_class": {"identifier": "EntityOwnershipStatistics", "superclass": "extends AbstractEntityOwnerChangeListener", "interfaces": "", "fields": [{"original_string": "private final TrieMap<String, TrieMap<String, Long>> statistics = TrieMap.create();", "modifier": "private final", "type": "TrieMap<String, TrieMap<String, Long>>", "declarator": "statistics = TrieMap.create()", "var_name": "statistics"}], "methods": [{"identifier": "EntityOwnershipStatistics", "parameters": "()", "modifiers": "", "return": "", "signature": " EntityOwnershipStatistics()", "full_signature": "  EntityOwnershipStatistics()", "class_method_signature": "EntityOwnershipStatistics.EntityOwnershipStatistics()", "testcase": false, "constructor": true}, {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeCandidate> changes)", "modifiers": "@Override public", "return": "void", "signature": "void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "class_method_signature": "EntityOwnershipStatistics.onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "()", "modifiers": "", "return": "Map<String, Map<String, Long>>", "signature": "Map<String, Map<String, Long>> all()", "full_signature": " Map<String, Map<String, Long>> all()", "class_method_signature": "EntityOwnershipStatistics.all()", "testcase": false, "constructor": false}, {"identifier": "byEntityType", "parameters": "(final String entityType)", "modifiers": "", "return": "Map<String, Long>", "signature": "Map<String, Long> byEntityType(final String entityType)", "full_signature": " Map<String, Long> byEntityType(final String entityType)", "class_method_signature": "EntityOwnershipStatistics.byEntityType(final String entityType)", "testcase": false, "constructor": false}, {"identifier": "updateStatistics", "parameters": "(final String entityType, final String candidateName, final long count)", "modifiers": "private", "return": "void", "signature": "void updateStatistics(final String entityType, final String candidateName, final long count)", "full_signature": "private void updateStatistics(final String entityType, final String candidateName, final long count)", "class_method_signature": "EntityOwnershipStatistics.updateStatistics(final String entityType, final String candidateName, final long count)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/EntityOwnershipStatistics.java"}, "focal_method": {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeCandidate> changes)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onDataTreeChanged(final Collection<DataTreeCandidate> changes) {\n        for (DataTreeCandidate change : changes) {\n            DataTreeCandidateNode changeRoot = change.getRootNode();\n            LeafNode<?> ownerLeaf = (LeafNode<?>) changeRoot.getDataAfter().get();\n            String entityType = entityTypeFromEntityPath(change.getRootPath());\n            String newOwner = extractOwner(ownerLeaf);\n            if (!Strings.isNullOrEmpty(newOwner)) {\n                updateStatistics(entityType, newOwner, 1);\n            }\n\n            Optional<NormalizedNode<?, ?>> dataBefore = changeRoot.getDataBefore();\n            if (dataBefore.isPresent()) {\n                String origOwner = extractOwner((LeafNode<?>) changeRoot.getDataBefore().get());\n                if (!Strings.isNullOrEmpty(origOwner)) {\n                    updateStatistics(entityType, origOwner, -1);\n                }\n            }\n        }\n    }", "signature": "void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "class_method_signature": "EntityOwnershipStatistics.onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "testcase": false, "constructor": false, "invocations": ["getRootNode", "get", "getDataAfter", "entityTypeFromEntityPath", "getRootPath", "extractOwner", "isNullOrEmpty", "updateStatistics", "getDataBefore", "isPresent", "extractOwner", "get", "getDataBefore", "isNullOrEmpty", "updateStatistics"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}