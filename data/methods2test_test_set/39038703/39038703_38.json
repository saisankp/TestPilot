{"test_class": {"identifier": "ProviderStackTest", "superclass": "", "interfaces": "", "fields": [], "file": "dspace-services/src/test/java/org/dspace/utils/servicemanager/ProviderStackTest.java"}, "test_case": {"identifier": "testAddProvider", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddProvider() {\n        // preload\n        ProviderStack<Provider> providers = new ProviderStack<Provider>(new Provider[] {\n                new UnorderedProvider(\"ccc\"),\n                new UnorderedProvider(\"ddd\"),\n                new OrderedProvider(\"bbb\", 5),\n                new OrderedProvider(\"aaa\", 2)\n        });\n        assertNotNull(providers.hashCode());\n        assertNotNull(providers.toString());\n        assertEquals(4, providers.size());\n        // check the order\n        List<Provider> l = providers.getProviders();\n        assertEquals(\"aaa\", l.get(0).getPrefix());\n        assertEquals(\"bbb\", l.get(1).getPrefix());\n        assertEquals(\"ccc\", l.get(2).getPrefix());\n        assertEquals(\"ddd\", l.get(3).getPrefix());\n\n        // now do some adds\n\n        // unordered should go to the end\n        Provider p5 = new UnorderedProvider(\"eee\");\n        providers.addProvider( p5 );\n        assertEquals(5, providers.size());\n        l = providers.getProviders();\n        assertEquals(\"aaa\", l.get(0).getPrefix());\n        assertEquals(\"bbb\", l.get(1).getPrefix());\n        assertEquals(\"ccc\", l.get(2).getPrefix());\n        assertEquals(\"ddd\", l.get(3).getPrefix());\n        assertEquals(\"eee\", l.get(4).getPrefix());\n\n        // ordered should go in order\n        Provider p6 = new OrderedProvider(\"ab6\", 3);\n        providers.addProvider( p6 );\n        assertEquals(6, providers.size());\n        l = providers.getProviders();\n        assertEquals(\"aaa\", l.get(0).getPrefix());\n        assertEquals(\"ab6\", l.get(1).getPrefix());\n        assertEquals(\"bbb\", l.get(2).getPrefix());\n        assertEquals(\"ccc\", l.get(3).getPrefix());\n        assertEquals(\"ddd\", l.get(4).getPrefix());\n        assertEquals(\"eee\", l.get(5).getPrefix());\n\n        Provider p7 = new OrderedProvider(\"bc7\", 6);\n        providers.addProvider( p7 );\n        assertEquals(7, providers.size());\n        l = providers.getProviders();\n        assertEquals(\"aaa\", l.get(0).getPrefix());\n        assertEquals(\"ab6\", l.get(1).getPrefix());\n        assertEquals(\"bbb\", l.get(2).getPrefix());\n        assertEquals(\"bc7\", l.get(3).getPrefix());\n        assertEquals(\"ccc\", l.get(4).getPrefix());\n        assertEquals(\"ddd\", l.get(5).getPrefix());\n        assertEquals(\"eee\", l.get(6).getPrefix());\n\n        l = null;\n        p5 = p6 = p7 = null;\n        providers.clear();\n        providers = null;\n    }", "signature": "void testAddProvider()", "full_signature": "@Test public void testAddProvider()", "class_method_signature": "ProviderStackTest.testAddProvider()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "hashCode", "assertNotNull", "toString", "assertEquals", "size", "getProviders", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "addProvider", "assertEquals", "size", "getProviders", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "addProvider", "assertEquals", "size", "getProviders", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "addProvider", "assertEquals", "size", "getProviders", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "assertEquals", "getPrefix", "get", "clear"]}, "focal_class": {"identifier": "ProviderStack", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final List<ProviderHolder<T>> providers;", "modifier": "protected final", "type": "List<ProviderHolder<T>>", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "ProviderStack", "parameters": "()", "modifiers": "public", "return": "", "signature": " ProviderStack()", "full_signature": "public  ProviderStack()", "class_method_signature": "ProviderStack.ProviderStack()", "testcase": false, "constructor": true}, {"identifier": "ProviderStack", "parameters": "(ServiceManager serviceManager, Class<T> providerType)", "modifiers": "public", "return": "", "signature": " ProviderStack(ServiceManager serviceManager, Class<T> providerType)", "full_signature": "public  ProviderStack(ServiceManager serviceManager, Class<T> providerType)", "class_method_signature": "ProviderStack.ProviderStack(ServiceManager serviceManager, Class<T> providerType)", "testcase": false, "constructor": true}, {"identifier": "ProviderStack", "parameters": "(T[] currentProviders)", "modifiers": "public", "return": "", "signature": " ProviderStack(T[] currentProviders)", "full_signature": "public  ProviderStack(T[] currentProviders)", "class_method_signature": "ProviderStack.ProviderStack(T[] currentProviders)", "testcase": false, "constructor": true}, {"identifier": "addProvider", "parameters": "(T provider)", "modifiers": "public", "return": "int", "signature": "int addProvider(T provider)", "full_signature": "public int addProvider(T provider)", "class_method_signature": "ProviderStack.addProvider(T provider)", "testcase": false, "constructor": false}, {"identifier": "removeProvider", "parameters": "(final int position)", "modifiers": "public", "return": "boolean", "signature": "boolean removeProvider(final int position)", "full_signature": "public boolean removeProvider(final int position)", "class_method_signature": "ProviderStack.removeProvider(final int position)", "testcase": false, "constructor": false}, {"identifier": "removeProvider", "parameters": "(T provider)", "modifiers": "public", "return": "boolean", "signature": "boolean removeProvider(T provider)", "full_signature": "public boolean removeProvider(T provider)", "class_method_signature": "ProviderStack.removeProvider(T provider)", "testcase": false, "constructor": false}, {"identifier": "getProviders", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getProviders()", "full_signature": "public List<T> getProviders()", "class_method_signature": "ProviderStack.getProviders()", "testcase": false, "constructor": false}, {"identifier": "getProviderHolders", "parameters": "()", "modifiers": "public", "return": "List<ProviderHolder<T>>", "signature": "List<ProviderHolder<T>> getProviderHolders()", "full_signature": "public List<ProviderHolder<T>> getProviderHolders()", "class_method_signature": "ProviderStack.getProviderHolders()", "testcase": false, "constructor": false}, {"identifier": "getIterator", "parameters": "()", "modifiers": "public", "return": "Iterator<T>", "signature": "Iterator<T> getIterator()", "full_signature": "public Iterator<T> getIterator()", "class_method_signature": "ProviderStack.getIterator()", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "(final int position)", "modifiers": "public", "return": "T", "signature": "T getProvider(final int position)", "full_signature": "public T getProvider(final int position)", "class_method_signature": "ProviderStack.getProvider(final int position)", "testcase": false, "constructor": false}, {"identifier": "getProviderHolder", "parameters": "(final int position)", "modifiers": "public", "return": "ProviderHolder<T>", "signature": "ProviderHolder<T> getProviderHolder(final int position)", "full_signature": "public ProviderHolder<T> getProviderHolder(final int position)", "class_method_signature": "ProviderStack.getProviderHolder(final int position)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ProviderStack.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "ProviderStack.clear()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "protected", "return": "List<T>", "signature": "List<T> refresh()", "full_signature": "protected List<T> refresh()", "class_method_signature": "ProviderStack.refresh()", "testcase": false, "constructor": false}], "file": "dspace-services/src/main/java/org/dspace/utils/servicemanager/ProviderStack.java"}, "focal_method": {"identifier": "addProvider", "parameters": "(T provider)", "modifiers": "public", "return": "int", "body": "public int addProvider(T provider) {\n        if (provider == null) {\n            throw new IllegalArgumentException(\"provider to add cannot be null\");\n        }\n        int position = 0;\n        refresh();\n        int providerOrder = 0;\n        if (provider instanceof NotProvider) {\n            throw new IllegalArgumentException(\"Cannot place anything that implements NotProvider into the provider stack, failure for: \" + provider);\n        }\n        if (provider instanceof OrderedService) {\n            providerOrder = ((OrderedService)provider).getOrder();\n        }\n        // place at the bottom of the stack\n        providers.add( new ProviderHolder<T>(provider) );\n        if (providerOrder > 0) {\n            // re-sort the providers\n            Collections.sort(this.providers, new ProviderStackComparator());\n        }\n        return position;\n    }", "signature": "int addProvider(T provider)", "full_signature": "public int addProvider(T provider)", "class_method_signature": "ProviderStack.addProvider(T provider)", "testcase": false, "constructor": false, "invocations": ["refresh", "getOrder", "add", "sort"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}