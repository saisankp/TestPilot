{"test_class": {"identifier": "FreemarkerRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ATTR_APPLICATION_MODEL =\n        \".freemarker.Application\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_APPLICATION_MODEL =\n        \".freemarker.Application\"", "var_name": "ATTR_APPLICATION_MODEL"}, {"original_string": "private static final String ATTR_JSP_TAGLIBS_MODEL =\n        \".freemarker.JspTaglibs\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_JSP_TAGLIBS_MODEL =\n        \".freemarker.JspTaglibs\"", "var_name": "ATTR_JSP_TAGLIBS_MODEL"}, {"original_string": "private static final String ATTR_REQUEST_MODEL = \".freemarker.Request\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_REQUEST_MODEL = \".freemarker.Request\"", "var_name": "ATTR_REQUEST_MODEL"}, {"original_string": "private static final String ATTR_REQUEST_PARAMETERS_MODEL =\n        \".freemarker.RequestParameters\";", "modifier": "private static final", "type": "String", "declarator": "ATTR_REQUEST_PARAMETERS_MODEL =\n        \".freemarker.RequestParameters\"", "var_name": "ATTR_REQUEST_PARAMETERS_MODEL"}, {"original_string": "private FreemarkerRenderer renderer;", "modifier": "private", "type": "FreemarkerRenderer", "declarator": "renderer", "var_name": "renderer"}, {"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private ServletContext servletContext;", "modifier": "private", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}], "file": "tiles-request-freemarker/src/test/java/org/apache/tiles/request/freemarker/render/FreemarkerRendererTest.java"}, "test_case": {"identifier": "testRenderException1", "parameters": "()", "modifiers": "@Test(expected = CannotRenderException.class) public", "return": "void", "body": "@Test(expected = CannotRenderException.class)\n    public void testRenderException1() throws IOException, ServletException {\n        ApplicationContext applicationContext = createMock(ServletApplicationContext.class);\n        ServletContext servletContext = createMock(ServletContext.class);\n        GenericServlet servlet = createMockBuilder(GenericServlet.class).createMock();\n        ServletConfig servletConfig = createMock(ServletConfig.class);\n        ObjectWrapper objectWrapper = createMock(ObjectWrapper.class);\n\n        replay(servlet, servletConfig);\n        servlet.init(servletConfig);\n\n        expect(applicationContext.getContext()).andReturn(servletContext).anyTimes();\n        expect(servletContext.getRealPath(isA(String.class))).andReturn(null).anyTimes();\n        URL resource = getClass().getResource(\"/test.ftl\");\n        expect(servletContext.getResource(isA(String.class))).andReturn(resource).anyTimes();\n\n        replay(applicationContext, servletContext, objectWrapper);\n\n        FreemarkerRenderer renderer = FreemarkerRendererBuilder\n                .createInstance().setApplicationContext(applicationContext)\n                .setParameter(\"TemplatePath\", \"/\")\n                .setParameter(\"NoCache\", \"true\")\n                .setParameter(\"ContentType\", \"text/html\")\n                .setParameter(\"template_update_delay\", \"0\")\n                .setParameter(\"default_encoding\", \"ISO-8859-1\")\n                .setParameter(\"number_format\", \"0.##########\").build();\n\n        ServletRequest request = createMock(ServletRequest.class);\n\n        replay(request);\n        try {\n            renderer.render(null, request);\n        } finally {\n            verify(applicationContext, servletContext, request, servlet,\n                    servletConfig, objectWrapper);\n        }\n    }", "signature": "void testRenderException1()", "full_signature": "@Test(expected = CannotRenderException.class) public void testRenderException1()", "class_method_signature": "FreemarkerRendererTest.testRenderException1()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "createMockBuilder", "createMock", "createMock", "replay", "init", "anyTimes", "andReturn", "expect", "getContext", "anyTimes", "andReturn", "expect", "getRealPath", "isA", "getResource", "getClass", "anyTimes", "andReturn", "expect", "getResource", "isA", "replay", "build", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setApplicationContext", "createInstance", "createMock", "replay", "render", "verify"]}, "focal_class": {"identifier": "FreemarkerRenderer", "superclass": "", "interfaces": "implements Renderer", "fields": [{"original_string": "private AttributeValueFreemarkerServlet servlet;", "modifier": "private", "type": "AttributeValueFreemarkerServlet", "declarator": "servlet", "var_name": "servlet"}], "methods": [{"identifier": "FreemarkerRenderer", "parameters": "(AttributeValueFreemarkerServlet servlet)", "modifiers": "public", "return": "", "signature": " FreemarkerRenderer(AttributeValueFreemarkerServlet servlet)", "full_signature": "public  FreemarkerRenderer(AttributeValueFreemarkerServlet servlet)", "class_method_signature": "FreemarkerRenderer.FreemarkerRenderer(AttributeValueFreemarkerServlet servlet)", "testcase": false, "constructor": true}, {"identifier": "render", "parameters": "(String path, Request request)", "modifiers": "@Override public", "return": "void", "signature": "void render(String path, Request request)", "full_signature": "@Override public void render(String path, Request request)", "class_method_signature": "FreemarkerRenderer.render(String path, Request request)", "testcase": false, "constructor": false}, {"identifier": "isRenderable", "parameters": "(String path, Request request)", "modifiers": "public", "return": "boolean", "signature": "boolean isRenderable(String path, Request request)", "full_signature": "public boolean isRenderable(String path, Request request)", "class_method_signature": "FreemarkerRenderer.isRenderable(String path, Request request)", "testcase": false, "constructor": false}], "file": "tiles-request-freemarker/src/main/java/org/apache/tiles/request/freemarker/render/FreemarkerRenderer.java"}, "focal_method": {"identifier": "render", "parameters": "(String path, Request request)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void render(String path, Request request) throws IOException {\n        if (path == null) {\n            throw new CannotRenderException(\"Cannot dispatch a null path\");\n        }\n        ServletRequest servletRequest = org.apache.tiles.request.servlet.ServletUtil.getServletRequest(request);\n        HttpServletRequest httpRequest = servletRequest.getRequest();\n        HttpServletResponse httpResponse = servletRequest.getResponse();\n        servlet.setValue(path);\n        try {\n            servlet.doGet(httpRequest,\n                    new ExternalWriterHttpServletResponse(httpResponse,\n                            request.getPrintWriter()));\n        } catch (ServletException e) {\n            throw new FreemarkerRequestException(\"Exception when rendering a FreeMarker attribute\", e);\n        }\n    }", "signature": "void render(String path, Request request)", "full_signature": "@Override public void render(String path, Request request)", "class_method_signature": "FreemarkerRenderer.render(String path, Request request)", "testcase": false, "constructor": false, "invocations": ["getServletRequest", "getRequest", "getResponse", "setValue", "doGet", "getPrintWriter"]}, "repository": {"repo_id": 4269155, "url": "https://github.com/apache/tiles-request", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 865, "license": "licensed"}}