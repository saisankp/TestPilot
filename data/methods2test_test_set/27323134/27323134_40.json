{"test_class": {"identifier": "UseCaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UseCaseTestClass useCase;", "modifier": "private", "type": "UseCaseTestClass", "declarator": "useCase", "var_name": "useCase"}, {"original_string": "@Mock\n    private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock\n    private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock\n    private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock\n    private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}], "file": "mythtv-player/src/test/java/org/mythtv/android/domain/interactor/UseCaseTest.java"}, "test_case": {"identifier": "testBuildUseCaseObservableReturnCorrectResult", "parameters": "()", "modifiers": "@Test @SuppressWarnings( \"unchecked\" ) public", "return": "void", "body": "@Test\n    @SuppressWarnings( \"unchecked\" )\n    public void testBuildUseCaseObservableReturnCorrectResult() {\n\n        TestSubscriber<Integer> testSubscriber = new TestSubscriber<>();\n        TestScheduler testScheduler = new TestScheduler();\n        given( mockPostExecutionThread.getScheduler() ).willReturn( testScheduler );\n\n        useCase.execute( testSubscriber );\n\n        assertThat( testSubscriber.getOnNextEvents().size(), is( 0 ) );\n    }", "signature": "void testBuildUseCaseObservableReturnCorrectResult()", "full_signature": "@Test @SuppressWarnings( \"unchecked\" ) public void testBuildUseCaseObservableReturnCorrectResult()", "class_method_signature": "UseCaseTest.testBuildUseCaseObservableReturnCorrectResult()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getScheduler", "execute", "assertThat", "size", "getOnNextEvents", "is"]}, "focal_class": {"identifier": "UseCase", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final ThreadExecutor threadExecutor;", "modifier": "protected final", "type": "ThreadExecutor", "declarator": "threadExecutor", "var_name": "threadExecutor"}, {"original_string": "protected final PostExecutionThread postExecutionThread;", "modifier": "protected final", "type": "PostExecutionThread", "declarator": "postExecutionThread", "var_name": "postExecutionThread"}, {"original_string": "protected Subscription subscription = Subscriptions.empty();", "modifier": "protected", "type": "Subscription", "declarator": "subscription = Subscriptions.empty()", "var_name": "subscription"}], "methods": [{"identifier": "UseCase", "parameters": "( ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "modifiers": "protected", "return": "", "signature": " UseCase( ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "full_signature": "protected  UseCase( ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "class_method_signature": "UseCase.UseCase( ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "testcase": false, "constructor": true}, {"identifier": "buildUseCaseObservable", "parameters": "()", "modifiers": "protected abstract", "return": "Observable", "signature": "Observable buildUseCaseObservable()", "full_signature": "protected abstract Observable buildUseCaseObservable()", "class_method_signature": "UseCase.buildUseCaseObservable()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "( Subscriber UseCaseSubscriber )", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void execute( Subscriber UseCaseSubscriber )", "full_signature": "@SuppressWarnings(\"unchecked\") public void execute( Subscriber UseCaseSubscriber )", "class_method_signature": "UseCase.execute( Subscriber UseCaseSubscriber )", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void unsubscribe()", "full_signature": "public void unsubscribe()", "class_method_signature": "UseCase.unsubscribe()", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/domain/interactor/UseCase.java"}, "focal_method": {"identifier": "execute", "parameters": "( Subscriber UseCaseSubscriber )", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    public void execute( Subscriber UseCaseSubscriber ) {\n\n        this.subscription = this.buildUseCaseObservable()\n                .subscribeOn( Schedulers.from( threadExecutor ) )\n                .observeOn( postExecutionThread.getScheduler() )\n                .subscribe( UseCaseSubscriber );\n\n    }", "signature": "void execute( Subscriber UseCaseSubscriber )", "full_signature": "@SuppressWarnings(\"unchecked\") public void execute( Subscriber UseCaseSubscriber )", "class_method_signature": "UseCase.execute( Subscriber UseCaseSubscriber )", "testcase": false, "constructor": false, "invocations": ["subscribe", "observeOn", "subscribeOn", "buildUseCaseObservable", "from", "getScheduler"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}