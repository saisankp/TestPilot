{"test_class": {"identifier": "XslTransformerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private XslCompiler xslCompiler;", "modifier": "@Mock\n    private", "type": "XslCompiler", "declarator": "xslCompiler", "var_name": "xslCompiler"}, {"original_string": "@Mock\n    private XslOutputProvider xslOutputProvider;", "modifier": "@Mock\n    private", "type": "XslOutputProvider", "declarator": "xslOutputProvider", "var_name": "xslOutputProvider"}, {"original_string": "@Mock\n    private StreamSourceFactory streamSourceFactory;", "modifier": "@Mock\n    private", "type": "StreamSourceFactory", "declarator": "streamSourceFactory", "var_name": "streamSourceFactory"}, {"original_string": "@Mock\n    private SAXSourceFactory saxSourceFactory;", "modifier": "@Mock\n    private", "type": "SAXSourceFactory", "declarator": "saxSourceFactory", "var_name": "saxSourceFactory"}, {"original_string": "@Mock\n    private ProcessorFactory processorFactory;", "modifier": "@Mock\n    private", "type": "ProcessorFactory", "declarator": "processorFactory", "var_name": "processorFactory"}, {"original_string": "@Mock\n    private InputSourceFactory inputSourceFactory;", "modifier": "@Mock\n    private", "type": "InputSourceFactory", "declarator": "inputSourceFactory", "var_name": "inputSourceFactory"}, {"original_string": "@Mock\n    private QNameFactory qNameFactory;", "modifier": "@Mock\n    private", "type": "QNameFactory", "declarator": "qNameFactory", "var_name": "qNameFactory"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private Processor processor;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mock\n    private XMLReader xmlReader;", "modifier": "@Mock\n    private", "type": "XMLReader", "declarator": "xmlReader", "var_name": "xmlReader"}, {"original_string": "@Mock\n    private XsltExecutable xsltExecutable;", "modifier": "@Mock\n    private", "type": "XsltExecutable", "declarator": "xsltExecutable", "var_name": "xsltExecutable"}, {"original_string": "@Mock\n    private ByteArrayOutputStream outputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "@Mock\n    private XsltTransformer xsltTransformer;", "modifier": "@Mock\n    private", "type": "XsltTransformer", "declarator": "xsltTransformer", "var_name": "xsltTransformer"}, {"original_string": "@Mock\n    private InputStream xslInputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "xslInputStream", "var_name": "xslInputStream"}, {"original_string": "@Mock\n    private InputStream requestInputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "requestInputStream", "var_name": "requestInputStream"}, {"original_string": "@Mock\n    private InputStream templateInputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "templateInputStream", "var_name": "templateInputStream"}, {"original_string": "@Mock\n    private StreamSource requestStreamResource;", "modifier": "@Mock\n    private", "type": "StreamSource", "declarator": "requestStreamResource", "var_name": "requestStreamResource"}, {"original_string": "@Mock\n    private XdmNode requestDocument;", "modifier": "@Mock\n    private", "type": "XdmNode", "declarator": "requestDocument", "var_name": "requestDocument"}, {"original_string": "@Mock\n    private QName requestName;", "modifier": "@Mock\n    private", "type": "QName", "declarator": "requestName", "var_name": "requestName"}, {"original_string": "@Mock\n    private InputSource inputSource;", "modifier": "@Mock\n    private", "type": "InputSource", "declarator": "inputSource", "var_name": "inputSource"}, {"original_string": "@Mock\n    private SAXSource templateSource;", "modifier": "@Mock\n    private", "type": "SAXSource", "declarator": "templateSource", "var_name": "templateSource"}, {"original_string": "@Mock\n    private XdmNode templateNode;", "modifier": "@Mock\n    private", "type": "XdmNode", "declarator": "templateNode", "var_name": "templateNode"}, {"original_string": "@InjectMocks\n    private XslTransformer underTest;", "modifier": "@InjectMocks\n    private", "type": "XslTransformer", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslTransformerTest.java"}, "test_case": {"identifier": "testTransformShouldReturnOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTransformShouldReturnOutput() throws SaxonApiException, SAXException {\n        //GIVEN\n        given(xslCompiler.compileXsl(xslInputStream, processor)).willReturn(xsltExecutable);\n        given(xsltExecutable.load()).willReturn(xsltTransformer);\n        given(xslOutputProvider.getOutput(xsltTransformer)).willReturn(outputStream);\n        setRequestMocks();\n        setTemplateMocks();\n        //WHEN\n        byte[] actual = underTest.transform(xslInputStream, requestInputStream, templateInputStream);\n        //THEN\n        assertEquals(actual, outputStream.toByteArray());\n    }", "signature": "void testTransformShouldReturnOutput()", "full_signature": "@Test public void testTransformShouldReturnOutput()", "class_method_signature": "XslTransformerTest.testTransformShouldReturnOutput()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "compileXsl", "willReturn", "given", "load", "willReturn", "given", "getOutput", "setRequestMocks", "setTemplateMocks", "transform", "assertEquals", "toByteArray"]}, "focal_class": {"identifier": "XslTransformer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String REQUEST_PARAMETER_NAME = \"request\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_PARAMETER_NAME = \"request\"", "var_name": "REQUEST_PARAMETER_NAME"}, {"original_string": "@Autowired\n    private XslCompiler xslCompiler;", "modifier": "@Autowired\n    private", "type": "XslCompiler", "declarator": "xslCompiler", "var_name": "xslCompiler"}, {"original_string": "@Autowired\n    private XslOutputProvider xslOutputProvider;", "modifier": "@Autowired\n    private", "type": "XslOutputProvider", "declarator": "xslOutputProvider", "var_name": "xslOutputProvider"}, {"original_string": "@Autowired\n    private StreamSourceFactory streamSourceFactory;", "modifier": "@Autowired\n    private", "type": "StreamSourceFactory", "declarator": "streamSourceFactory", "var_name": "streamSourceFactory"}, {"original_string": "@Autowired\n    private SAXSourceFactory saxSourceFactory;", "modifier": "@Autowired\n    private", "type": "SAXSourceFactory", "declarator": "saxSourceFactory", "var_name": "saxSourceFactory"}, {"original_string": "@Autowired\n    private ProcessorFactory processorFactory;", "modifier": "@Autowired\n    private", "type": "ProcessorFactory", "declarator": "processorFactory", "var_name": "processorFactory"}, {"original_string": "@Autowired\n    private InputSourceFactory inputSourceFactory;", "modifier": "@Autowired\n    private", "type": "InputSourceFactory", "declarator": "inputSourceFactory", "var_name": "inputSourceFactory"}, {"original_string": "@Autowired\n    private QNameFactory qNameFactory;", "modifier": "@Autowired\n    private", "type": "QNameFactory", "declarator": "qNameFactory", "var_name": "qNameFactory"}], "methods": [{"identifier": "transform", "parameters": "(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "modifiers": "public", "return": "byte[]", "signature": "byte[] transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "full_signature": "public byte[] transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "class_method_signature": "XslTransformer.transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "testcase": false, "constructor": false}, {"identifier": "setTemplate", "parameters": "(final InputStream templateInputStream, final Processor processor, final XMLReader xmlReader,\n            final XsltTransformer xsltTransformer)", "modifiers": "private", "return": "void", "signature": "void setTemplate(final InputStream templateInputStream, final Processor processor, final XMLReader xmlReader,\n            final XsltTransformer xsltTransformer)", "full_signature": "private void setTemplate(final InputStream templateInputStream, final Processor processor, final XMLReader xmlReader,\n            final XsltTransformer xsltTransformer)", "class_method_signature": "XslTransformer.setTemplate(final InputStream templateInputStream, final Processor processor, final XMLReader xmlReader,\n            final XsltTransformer xsltTransformer)", "testcase": false, "constructor": false}, {"identifier": "setRequest", "parameters": "(final InputStream requestInputStream, final Processor processor, final XsltTransformer xsltTransformer)", "modifiers": "private", "return": "void", "signature": "void setRequest(final InputStream requestInputStream, final Processor processor, final XsltTransformer xsltTransformer)", "full_signature": "private void setRequest(final InputStream requestInputStream, final Processor processor, final XsltTransformer xsltTransformer)", "class_method_signature": "XslTransformer.setRequest(final InputStream requestInputStream, final Processor processor, final XsltTransformer xsltTransformer)", "testcase": false, "constructor": false}, {"identifier": "createXMLReader", "parameters": "()", "modifiers": "", "return": "XMLReader", "signature": "XMLReader createXMLReader()", "full_signature": " XMLReader createXMLReader()", "class_method_signature": "XslTransformer.createXMLReader()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslTransformer.java"}, "focal_method": {"identifier": "transform", "parameters": "(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "modifiers": "public", "return": "byte[]", "body": "public byte[] transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)\n        throws SaxonApiException, SAXException {\n        Processor processor = processorFactory.createProcessor();\n        XMLReader xmlReader = createXMLReader();\n        //xsl compilation\n        XsltExecutable xsltExecutable = xslCompiler.compileXsl(xslInputStream, processor);\n        XsltTransformer xsltTransformer = xsltExecutable.load();\n        //set the output\n        ByteArrayOutputStream output = xslOutputProvider.getOutput(xsltTransformer);\n        //set the request\n        setRequest(requestInputStream, processor, xsltTransformer);\n        //set the template\n        setTemplate(templateInputStream, processor, xmlReader, xsltTransformer);\n        xsltTransformer.transform();\n        return output.toByteArray();\n    }", "signature": "byte[] transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "full_signature": "public byte[] transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "class_method_signature": "XslTransformer.transform(final InputStream xslInputStream, final InputStream requestInputStream, final InputStream templateInputStream)", "testcase": false, "constructor": false, "invocations": ["createProcessor", "createXMLReader", "compileXsl", "load", "getOutput", "setRequest", "setTemplate", "transform", "toByteArray"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}