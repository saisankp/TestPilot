{"test_class": {"identifier": "RangeOptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/core/support/RangeOptionTest.java"}, "test_case": {"identifier": "testParseInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseInvalid() {\n        assertThat(RangeOption.parse(\"Range=10-\")).isNull();\n        assertThat(RangeOption.parse(\"Range=10-a\")).isNull();\n        assertThat(RangeOption.parse(\"lang-en\")).isNull();\n        assertThat(RangeOption.parse(\"member;Range=10-100\")).isNull();\n        assertThat(RangeOption.parse(\";Range=10-100\")).isNull();\n        assertThat(RangeOption.parse(\"Range=10-100;\")).isNull();\n        assertThat(RangeOption.parse(\"Range=10-100;lang-de\")).isNull();\n    }", "signature": "void testParseInvalid()", "full_signature": "@Test public void testParseInvalid()", "class_method_signature": "RangeOptionTest.testParseInvalid()", "testcase": true, "constructor": false, "invocations": ["isNull", "assertThat", "parse", "isNull", "assertThat", "parse", "isNull", "assertThat", "parse", "isNull", "assertThat", "parse", "isNull", "assertThat", "parse", "isNull", "assertThat", "parse", "isNull", "assertThat", "parse"]}, "focal_class": {"identifier": "RangeOption", "superclass": "", "interfaces": "implements Comparable<RangeOption>", "fields": [{"original_string": "public static final int TERMINAL_END_OF_RANGE = -1;", "modifier": "public static final", "type": "int", "declarator": "TERMINAL_END_OF_RANGE = -1", "var_name": "TERMINAL_END_OF_RANGE"}, {"original_string": "public static final int TERMINAL_MISSING = -2;", "modifier": "public static final", "type": "int", "declarator": "TERMINAL_MISSING = -2", "var_name": "TERMINAL_MISSING"}, {"original_string": "private int initial = 0;", "modifier": "private", "type": "int", "declarator": "initial = 0", "var_name": "initial"}, {"original_string": "private int terminal = TERMINAL_END_OF_RANGE;", "modifier": "private", "type": "int", "declarator": "terminal = TERMINAL_END_OF_RANGE", "var_name": "terminal"}, {"original_string": "private static final Pattern RANGE_PATTERN = Pattern.compile(\"^Range=([0-9]+)(-([0-9]+|\\\\*))?$\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "RANGE_PATTERN = Pattern.compile(\"^Range=([0-9]+)(-([0-9]+|\\\\*))?$\", Pattern.CASE_INSENSITIVE)", "var_name": "RANGE_PATTERN"}], "methods": [{"identifier": "RangeOption", "parameters": "(int initial)", "modifiers": "public", "return": "", "signature": " RangeOption(int initial)", "full_signature": "public  RangeOption(int initial)", "class_method_signature": "RangeOption.RangeOption(int initial)", "testcase": false, "constructor": true}, {"identifier": "RangeOption", "parameters": "(int initial, int terminal)", "modifiers": "public", "return": "", "signature": " RangeOption(int initial, int terminal)", "full_signature": "public  RangeOption(int initial, int terminal)", "class_method_signature": "RangeOption.RangeOption(int initial, int terminal)", "testcase": false, "constructor": true}, {"identifier": "isTerminalEndOfRange", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTerminalEndOfRange()", "full_signature": "public boolean isTerminalEndOfRange()", "class_method_signature": "RangeOption.isTerminalEndOfRange()", "testcase": false, "constructor": false}, {"identifier": "isTerminalMissing", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTerminalMissing()", "full_signature": "public boolean isTerminalMissing()", "class_method_signature": "RangeOption.isTerminalMissing()", "testcase": false, "constructor": false}, {"identifier": "getInitial", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInitial()", "full_signature": "public int getInitial()", "class_method_signature": "RangeOption.getInitial()", "testcase": false, "constructor": false}, {"identifier": "getTerminal", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTerminal()", "full_signature": "public int getTerminal()", "class_method_signature": "RangeOption.getTerminal()", "testcase": false, "constructor": false}, {"identifier": "isFullRange", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFullRange()", "full_signature": "public boolean isFullRange()", "class_method_signature": "RangeOption.isFullRange()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "RangeOption.toString()", "testcase": false, "constructor": false}, {"identifier": "appendTo", "parameters": "(StringBuilder rangeBuilder)", "modifiers": "public", "return": "void", "signature": "void appendTo(StringBuilder rangeBuilder)", "full_signature": "public void appendTo(StringBuilder rangeBuilder)", "class_method_signature": "RangeOption.appendTo(StringBuilder rangeBuilder)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String option)", "modifiers": "public static", "return": "RangeOption", "signature": "RangeOption parse(String option)", "full_signature": "public static RangeOption parse(String option)", "class_method_signature": "RangeOption.parse(String option)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(RangeOption that)", "modifiers": "public", "return": "int", "signature": "int compareTo(RangeOption that)", "full_signature": "public int compareTo(RangeOption that)", "class_method_signature": "RangeOption.compareTo(RangeOption that)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RangeOption.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RangeOption.hashCode()", "testcase": false, "constructor": false}, {"identifier": "nextRange", "parameters": "(int pageSize)", "modifiers": "public", "return": "RangeOption", "signature": "RangeOption nextRange(int pageSize)", "full_signature": "public RangeOption nextRange(int pageSize)", "class_method_signature": "RangeOption.nextRange(int pageSize)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/core/support/RangeOption.java"}, "focal_method": {"identifier": "parse", "parameters": "(String option)", "modifiers": "public static", "return": "RangeOption", "body": "public static RangeOption parse(String option) {\n        Matcher rangeMatcher = RANGE_PATTERN.matcher(option);\n\n        rangeMatcher.find();\n\n        if (!rangeMatcher.matches()) {\n            return null;\n        }\n\n        String initialStr = rangeMatcher.group(1);\n\n        int initial = Integer.parseInt(initialStr);\n        int terminal = TERMINAL_MISSING;\n\n        if (rangeMatcher.group(2) != null) {\n            String terminalStr = rangeMatcher.group(3);\n\n            if (\"*\".equals(terminalStr)) {\n                terminal = TERMINAL_END_OF_RANGE;\n            } else {\n                terminal = Integer.parseInt(terminalStr);\n            }\n        }\n\n        return new RangeOption(initial, terminal);\n    }", "signature": "RangeOption parse(String option)", "full_signature": "public static RangeOption parse(String option)", "class_method_signature": "RangeOption.parse(String option)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "matches", "group", "parseInt", "group", "group", "equals", "parseInt"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}