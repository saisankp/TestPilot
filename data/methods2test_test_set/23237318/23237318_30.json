{"test_class": {"identifier": "ErrorHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Clock clock = mock(Clock.class);", "modifier": "private final", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}], "file": "core/src/test/java/com/quantiply/samza/task/ErrorHandlerTest.java"}, "test_case": {"identifier": "testNotTooManyErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotTooManyErrors() throws Exception {\n        ErrorHandler errHandler = getErrorHandler();\n        BaseTask.StreamMetrics metrics = new BaseTask.StreamMetrics(new Meter(clock), new Meter(clock));\n\n        when(clock.getTick()).thenReturn(0L);\n        metrics.processed.mark(910L);\n        metrics.dropped.mark(90L);\n\n        when(clock.getTick()).thenReturn(TimeUnit.SECONDS.toNanos(10));\n        assertTrue(metrics.processed.getOneMinuteRate() > 0);\n        assertTrue(metrics.dropped.getOneMinuteRate() > 0);\n        assertFalse(errHandler.hasTooManyErrors(metrics));\n    }", "signature": "void testNotTooManyErrors()", "full_signature": "@Test public void testNotTooManyErrors()", "class_method_signature": "ErrorHandlerTest.testNotTooManyErrors()", "testcase": true, "constructor": false, "invocations": ["getErrorHandler", "thenReturn", "when", "getTick", "mark", "mark", "thenReturn", "when", "getTick", "toNanos", "assertTrue", "getOneMinuteRate", "assertTrue", "getOneMinuteRate", "assertFalse", "hasTooManyErrors"]}, "focal_class": {"identifier": "ErrorHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String SYSTEM_PRODUCER_SOURCE = \"rico-error-handler\";", "modifier": "private final static", "type": "String", "declarator": "SYSTEM_PRODUCER_SOURCE = \"rico-error-handler\"", "var_name": "SYSTEM_PRODUCER_SOURCE"}, {"original_string": "private static Logger logger = LoggerFactory.getLogger(new Object() {}.getClass().getEnclosingClass());", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(new Object() {}.getClass().getEnclosingClass())", "var_name": "logger"}, {"original_string": "private final Config config;", "modifier": "private final", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private final TaskInfo taskInfo;", "modifier": "private final", "type": "TaskInfo", "declarator": "taskInfo", "var_name": "taskInfo"}, {"original_string": "private Optional<SystemStream> droppedMsgStream;", "modifier": "private", "type": "Optional<SystemStream>", "declarator": "droppedMsgStream", "var_name": "droppedMsgStream"}, {"original_string": "private Optional<SystemProducer> systemProducer;", "modifier": "private", "type": "Optional<SystemProducer>", "declarator": "systemProducer", "var_name": "systemProducer"}, {"original_string": "private boolean dropOnError;", "modifier": "private", "type": "boolean", "declarator": "dropOnError", "var_name": "dropOnError"}, {"original_string": "private Serde serde;", "modifier": "private", "type": "Serde", "declarator": "serde", "var_name": "serde"}, {"original_string": "private double dropMaxRatio = 1.0;", "modifier": "private", "type": "double", "declarator": "dropMaxRatio = 1.0", "var_name": "dropMaxRatio"}], "methods": [{"identifier": "ErrorHandler", "parameters": "(Config config, TaskInfo taskInfo)", "modifiers": "public", "return": "", "signature": " ErrorHandler(Config config, TaskInfo taskInfo)", "full_signature": "public  ErrorHandler(Config config, TaskInfo taskInfo)", "class_method_signature": "ErrorHandler.ErrorHandler(Config config, TaskInfo taskInfo)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "ErrorHandler.start()", "testcase": false, "constructor": false}, {"identifier": "dropOnError", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean dropOnError()", "full_signature": "public boolean dropOnError()", "class_method_signature": "ErrorHandler.dropOnError()", "testcase": false, "constructor": false}, {"identifier": "getDropMaxRatio", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDropMaxRatio()", "full_signature": "public double getDropMaxRatio()", "class_method_signature": "ErrorHandler.getDropMaxRatio()", "testcase": false, "constructor": false}, {"identifier": "logDroppedMsgConfig", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void logDroppedMsgConfig()", "full_signature": "private void logDroppedMsgConfig()", "class_method_signature": "ErrorHandler.logDroppedMsgConfig()", "testcase": false, "constructor": false}, {"identifier": "getSystemProducer", "parameters": "(Config config)", "modifiers": "private", "return": "SystemProducer", "signature": "SystemProducer getSystemProducer(Config config)", "full_signature": "private SystemProducer getSystemProducer(Config config)", "class_method_signature": "ErrorHandler.getSystemProducer(Config config)", "testcase": false, "constructor": false}, {"identifier": "handleException", "parameters": "(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "modifiers": "public", "return": "void", "signature": "void handleException(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "full_signature": "public void handleException(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "class_method_signature": "ErrorHandler.handleException(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "testcase": false, "constructor": false}, {"identifier": "hasTooManyErrors", "parameters": "(BaseTask.StreamMetrics metrics)", "modifiers": "public", "return": "boolean", "signature": "boolean hasTooManyErrors(BaseTask.StreamMetrics metrics)", "full_signature": "public boolean hasTooManyErrors(BaseTask.StreamMetrics metrics)", "class_method_signature": "ErrorHandler.hasTooManyErrors(BaseTask.StreamMetrics metrics)", "testcase": false, "constructor": false}, {"identifier": "handleExpectedError", "parameters": "(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "modifiers": "public", "return": "void", "signature": "void handleExpectedError(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "full_signature": "public void handleExpectedError(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "class_method_signature": "ErrorHandler.handleExpectedError(IncomingMessageEnvelope envelope, Exception e, BaseTask.StreamMetrics metrics)", "testcase": false, "constructor": false}, {"identifier": "handleDroppedMessage", "parameters": "(IncomingMessageEnvelope envelope, Exception e, Meter dropped)", "modifiers": "private", "return": "void", "signature": "void handleDroppedMessage(IncomingMessageEnvelope envelope, Exception e, Meter dropped)", "full_signature": "private void handleDroppedMessage(IncomingMessageEnvelope envelope, Exception e, Meter dropped)", "class_method_signature": "ErrorHandler.handleDroppedMessage(IncomingMessageEnvelope envelope, Exception e, Meter dropped)", "testcase": false, "constructor": false}, {"identifier": "serializeDroppedMessage", "parameters": "(IncomingMessageEnvelope envelope, Exception e)", "modifiers": "private", "return": "byte[]", "signature": "byte[] serializeDroppedMessage(IncomingMessageEnvelope envelope, Exception e)", "full_signature": "private byte[] serializeDroppedMessage(IncomingMessageEnvelope envelope, Exception e)", "class_method_signature": "ErrorHandler.serializeDroppedMessage(IncomingMessageEnvelope envelope, Exception e)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "ErrorHandler.stop()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/quantiply/samza/task/ErrorHandler.java"}, "focal_method": {"identifier": "hasTooManyErrors", "parameters": "(BaseTask.StreamMetrics metrics)", "modifiers": "public", "return": "boolean", "body": "public boolean hasTooManyErrors(BaseTask.StreamMetrics metrics) {\n        long msgsDone = metrics.processed.getCount() + metrics.dropped.getCount();\n        if (msgsDone > 100L) {\n            double dropRate = metrics.dropped.getOneMinuteRate();\n            double successRate = metrics.processed.getOneMinuteRate();\n            if (dropRate > 0.0) {\n                double totalRate = dropRate + successRate;\n                double dropRatio = dropRate/totalRate;\n                if (logger.isTraceEnabled()) {\n                    logger.trace(String.format(\"Drop rate: %f msg/s, success rate %f msg/s, total rate %f msg/s, drop ratio %f, max drop ratio %f\",\n                            dropRate, successRate, totalRate, dropRatio, dropMaxRatio));\n                }\n                if (dropRatio > dropMaxRatio) {\n                    logger.error(String.format(\"Error ratio (1min avg) %2f has exceeded threshold %f.\", dropRatio, dropMaxRatio));\n                    return true;\n                }\n            }\n            else {\n                logger.trace(\"Drop rate is still 0.0\");\n            }\n        }\n        return false;\n    }", "signature": "boolean hasTooManyErrors(BaseTask.StreamMetrics metrics)", "full_signature": "public boolean hasTooManyErrors(BaseTask.StreamMetrics metrics)", "class_method_signature": "ErrorHandler.hasTooManyErrors(BaseTask.StreamMetrics metrics)", "testcase": false, "constructor": false, "invocations": ["getCount", "getCount", "getOneMinuteRate", "getOneMinuteRate", "isTraceEnabled", "trace", "format", "error", "format", "trace"]}, "repository": {"repo_id": 23237318, "url": "https://github.com/quantiply/rico", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 5128, "license": "licensed"}}