{"test_class": {"identifier": "MMElementRuleTest", "superclass": "extends FormulaRuleTest", "interfaces": "", "fields": [{"original_string": "private static IChemObjectBuilder builder;", "modifier": "private static", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/rules/MMElementRuleTest.java"}, "test_case": {"identifier": "testSetParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetParameters() throws Exception {\n\n        IRule rule = new MMElementRule();\n\n        Object[] params = new Object[2];\n\n        params[0] = MMElementRule.Database.DNP;\n        params[1] = MMElementRule.RangeMass.Minus1000;\n\n        rule.setParameters(params);\n        Object[] objects = rule.getParameters();\n\n        Assert.assertSame(MMElementRule.Database.DNP, objects[0]);\n        Assert.assertSame(MMElementRule.RangeMass.Minus1000, objects[1]);\n    }", "signature": "void testSetParameters()", "full_signature": "@Test public void testSetParameters()", "class_method_signature": "MMElementRuleTest.testSetParameters()", "testcase": true, "constructor": false, "invocations": ["setParameters", "getParameters", "assertSame", "assertSame"]}, "focal_class": {"identifier": "MMElementRule", "superclass": "", "interfaces": "implements IRule", "fields": [{"original_string": "private Database                 databaseUsed  = Database.WILEY;", "modifier": "private", "type": "Database", "declarator": "databaseUsed  = Database.WILEY", "var_name": "databaseUsed"}, {"original_string": "private RangeMass                rangeMassUsed = RangeMass.Minus500;", "modifier": "private", "type": "RangeMass", "declarator": "rangeMassUsed = RangeMass.Minus500", "var_name": "rangeMassUsed"}, {"original_string": "private HashMap<String, Integer> hashMap;", "modifier": "private", "type": "HashMap<String, Integer>", "declarator": "hashMap", "var_name": "hashMap"}, {"original_string": "private static ILoggingTool      logger        = LoggingToolFactory.createLoggingTool(MMElementRule.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger        = LoggingToolFactory.createLoggingTool(MMElementRule.class)", "var_name": "logger"}], "methods": [{"identifier": "MMElementRule", "parameters": "()", "modifiers": "public", "return": "", "signature": " MMElementRule()", "full_signature": "public  MMElementRule()", "class_method_signature": "MMElementRule.MMElementRule()", "testcase": false, "constructor": true}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "MMElementRule.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "MMElementRule.getParameters()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "double", "signature": "double validate(IMolecularFormula formula)", "full_signature": "@Override public double validate(IMolecularFormula formula)", "class_method_signature": "MMElementRule.validate(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getDNP_500", "parameters": "()", "modifiers": "private", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getDNP_500()", "full_signature": "private HashMap<String, Integer> getDNP_500()", "class_method_signature": "MMElementRule.getDNP_500()", "testcase": false, "constructor": false}, {"identifier": "getDNP_1000", "parameters": "()", "modifiers": "private", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getDNP_1000()", "full_signature": "private HashMap<String, Integer> getDNP_1000()", "class_method_signature": "MMElementRule.getDNP_1000()", "testcase": false, "constructor": false}, {"identifier": "getDNP_2000", "parameters": "()", "modifiers": "private", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getDNP_2000()", "full_signature": "private HashMap<String, Integer> getDNP_2000()", "class_method_signature": "MMElementRule.getDNP_2000()", "testcase": false, "constructor": false}, {"identifier": "getDNP_3000", "parameters": "()", "modifiers": "private", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getDNP_3000()", "full_signature": "private HashMap<String, Integer> getDNP_3000()", "class_method_signature": "MMElementRule.getDNP_3000()", "testcase": false, "constructor": false}, {"identifier": "getWisley_500", "parameters": "()", "modifiers": "private", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getWisley_500()", "full_signature": "private HashMap<String, Integer> getWisley_500()", "class_method_signature": "MMElementRule.getWisley_500()", "testcase": false, "constructor": false}, {"identifier": "getWisley_1000", "parameters": "()", "modifiers": "private", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getWisley_1000()", "full_signature": "private HashMap<String, Integer> getWisley_1000()", "class_method_signature": "MMElementRule.getWisley_1000()", "testcase": false, "constructor": false}, {"identifier": "getWisley_2000", "parameters": "()", "modifiers": "private", "return": "HashMap<String, Integer>", "signature": "HashMap<String, Integer> getWisley_2000()", "full_signature": "private HashMap<String, Integer> getWisley_2000()", "class_method_signature": "MMElementRule.getWisley_2000()", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/rules/MMElementRule.java"}, "focal_method": {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setParameters(Object[] params) throws CDKException {\n        if (params.length > 2) throw new CDKException(\"MMElementRule only expects maximal two parameters\");\n\n        if (params[0] != null) {\n            if (!(params[0] instanceof Database))\n                throw new CDKException(\"The parameter must be of type Database enum\");\n            databaseUsed = (Database) params[0];\n        }\n\n        if (params.length > 1 && params[1] != null) {\n            if (!(params[1] instanceof RangeMass))\n                throw new CDKException(\"The parameter must be of type RangeMass enum\");\n            rangeMassUsed = (RangeMass) params[1];\n        }\n\n        if ((databaseUsed == Database.DNP) && (rangeMassUsed == RangeMass.Minus500))\n            this.hashMap = getDNP_500();\n        else if ((databaseUsed == Database.DNP) && (rangeMassUsed == RangeMass.Minus1000))\n            this.hashMap = getDNP_1000();\n        else if ((databaseUsed == Database.DNP) && (rangeMassUsed == RangeMass.Minus2000))\n            this.hashMap = getDNP_2000();\n        else if ((databaseUsed == Database.DNP) && (rangeMassUsed == RangeMass.Minus3000))\n            this.hashMap = getDNP_3000();\n        else if ((databaseUsed == Database.WILEY) && (rangeMassUsed == RangeMass.Minus500))\n            this.hashMap = getWisley_500();\n        else if ((databaseUsed == Database.WILEY) && (rangeMassUsed == RangeMass.Minus1000))\n            this.hashMap = getWisley_1000();\n        else if ((databaseUsed == Database.WILEY) && (rangeMassUsed == RangeMass.Minus2000))\n            this.hashMap = getWisley_2000();\n    }", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "MMElementRule.setParameters(Object[] params)", "testcase": false, "constructor": false, "invocations": ["getDNP_500", "getDNP_1000", "getDNP_2000", "getDNP_3000", "getWisley_500", "getWisley_1000", "getWisley_2000"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}