{"test_class": {"identifier": "BookingServiceTest", "superclass": "extends AbstractBasePersistenceTest", "interfaces": "", "fields": [{"original_string": "private BookingService bookingService;", "modifier": "private", "type": "BookingService", "declarator": "bookingService", "var_name": "bookingService"}, {"original_string": "@Mock\n    private Event<NewReservationEvent> mockEvent;", "modifier": "@Mock\n    private", "type": "Event<NewReservationEvent>", "declarator": "mockEvent", "var_name": "mockEvent"}, {"original_string": "@Mock\n    private Event<ReservationStatusChangeEvent> mockResEvent;", "modifier": "@Mock\n    private", "type": "Event<ReservationStatusChangeEvent>", "declarator": "mockResEvent", "var_name": "mockResEvent"}], "file": "booking/src/test/java/org/koenighotze/jee7hotel/booking/business/BookingServiceTest.java"}, "test_case": {"identifier": "booking_a_room_sets_the_reservation_number", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void booking_a_room_sets_the_reservation_number() {\n        Reservation reservation =\n                bookingService.bookRoom(\"guest\", \"room\", now(), now());\n        getEntityManager().flush();\n        assertThat(reservation).isNotNull();\n        assertThat(reservation.getReservationNumber()).isNotNull();\n    }", "signature": "void booking_a_room_sets_the_reservation_number()", "full_signature": "@Test public void booking_a_room_sets_the_reservation_number()", "class_method_signature": "BookingServiceTest.booking_a_room_sets_the_reservation_number()", "testcase": true, "constructor": false, "invocations": ["bookRoom", "now", "now", "flush", "getEntityManager", "isNotNull", "assertThat", "isNotNull", "assertThat", "getReservationNumber"]}, "focal_class": {"identifier": "BookingService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(BookingService.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(BookingService.class.getName())", "var_name": "LOGGER"}, {"original_string": "private ReservationCostCalculator reservationCostCalculator;", "modifier": "private", "type": "ReservationCostCalculator", "declarator": "reservationCostCalculator", "var_name": "reservationCostCalculator"}, {"original_string": "private EntityManager em;", "modifier": "private", "type": "EntityManager", "declarator": "em", "var_name": "em"}, {"original_string": "private Event<NewReservationEvent> reservationEvents;", "modifier": "private", "type": "Event<NewReservationEvent>", "declarator": "reservationEvents", "var_name": "reservationEvents"}, {"original_string": "private Event<ReservationStatusChangeEvent> reservationStateChangeEvents;", "modifier": "private", "type": "Event<ReservationStatusChangeEvent>", "declarator": "reservationStateChangeEvents", "var_name": "reservationStateChangeEvents"}], "methods": [{"identifier": "BookingService", "parameters": "()", "modifiers": "public", "return": "", "signature": " BookingService()", "full_signature": "public  BookingService()", "class_method_signature": "BookingService.BookingService()", "testcase": false, "constructor": true}, {"identifier": "BookingService", "parameters": "(Event<NewReservationEvent> reservationEvents, Event<ReservationStatusChangeEvent> reservationStateChangeEvents, ReservationCostCalculator reservationCostCalculator)", "modifiers": "@Inject public", "return": "", "signature": " BookingService(Event<NewReservationEvent> reservationEvents, Event<ReservationStatusChangeEvent> reservationStateChangeEvents, ReservationCostCalculator reservationCostCalculator)", "full_signature": "@Inject public  BookingService(Event<NewReservationEvent> reservationEvents, Event<ReservationStatusChangeEvent> reservationStateChangeEvents, ReservationCostCalculator reservationCostCalculator)", "class_method_signature": "BookingService.BookingService(Event<NewReservationEvent> reservationEvents, Event<ReservationStatusChangeEvent> reservationStateChangeEvents, ReservationCostCalculator reservationCostCalculator)", "testcase": false, "constructor": true}, {"identifier": "setReservationStateChangeEvents", "parameters": "(Event<ReservationStatusChangeEvent> reservationStateChangeEvents)", "modifiers": "public", "return": "void", "signature": "void setReservationStateChangeEvents(Event<ReservationStatusChangeEvent> reservationStateChangeEvents)", "full_signature": "public void setReservationStateChangeEvents(Event<ReservationStatusChangeEvent> reservationStateChangeEvents)", "class_method_signature": "BookingService.setReservationStateChangeEvents(Event<ReservationStatusChangeEvent> reservationStateChangeEvents)", "testcase": false, "constructor": false}, {"identifier": "setReservationEvents", "parameters": "(Event<NewReservationEvent> reservationEvents)", "modifiers": "public", "return": "void", "signature": "void setReservationEvents(Event<NewReservationEvent> reservationEvents)", "full_signature": "public void setReservationEvents(Event<NewReservationEvent> reservationEvents)", "class_method_signature": "BookingService.setReservationEvents(Event<NewReservationEvent> reservationEvents)", "testcase": false, "constructor": false}, {"identifier": "cancelReservation", "parameters": "(String reservationNumber)", "modifiers": "public", "return": "boolean", "signature": "boolean cancelReservation(String reservationNumber)", "full_signature": "public boolean cancelReservation(String reservationNumber)", "class_method_signature": "BookingService.cancelReservation(String reservationNumber)", "testcase": false, "constructor": false}, {"identifier": "newReservationNumber", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String newReservationNumber()", "full_signature": "public String newReservationNumber()", "class_method_signature": "BookingService.newReservationNumber()", "testcase": false, "constructor": false}, {"identifier": "findReservationForGuest", "parameters": "(String guestId)", "modifiers": "public", "return": "List<Reservation>", "signature": "List<Reservation> findReservationForGuest(String guestId)", "full_signature": "public List<Reservation> findReservationForGuest(String guestId)", "class_method_signature": "BookingService.findReservationForGuest(String guestId)", "testcase": false, "constructor": false}, {"identifier": "getAllReservations", "parameters": "()", "modifiers": "public", "return": "List<Reservation>", "signature": "List<Reservation> getAllReservations()", "full_signature": "public List<Reservation> getAllReservations()", "class_method_signature": "BookingService.getAllReservations()", "testcase": false, "constructor": false}, {"identifier": "getReservation", "parameters": "(Long id)", "modifiers": "public", "return": "Reservation", "signature": "Reservation getReservation(Long id)", "full_signature": "public Reservation getReservation(Long id)", "class_method_signature": "BookingService.getReservation(Long id)", "testcase": false, "constructor": false}, {"identifier": "bookRoom", "parameters": "(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "modifiers": "public", "return": "Reservation", "signature": "Reservation bookRoom(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "full_signature": "public Reservation bookRoom(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "class_method_signature": "BookingService.bookRoom(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "testcase": false, "constructor": false}, {"identifier": "setEntityManager", "parameters": "(EntityManager entityManager)", "modifiers": "@PersistenceContext public", "return": "void", "signature": "void setEntityManager(EntityManager entityManager)", "full_signature": "@PersistenceContext public void setEntityManager(EntityManager entityManager)", "class_method_signature": "BookingService.setEntityManager(EntityManager entityManager)", "testcase": false, "constructor": false}, {"identifier": "findReservationByNumber", "parameters": "(String reservationNumber)", "modifiers": "public", "return": "Optional<Reservation>", "signature": "Optional<Reservation> findReservationByNumber(String reservationNumber)", "full_signature": "public Optional<Reservation> findReservationByNumber(String reservationNumber)", "class_method_signature": "BookingService.findReservationByNumber(String reservationNumber)", "testcase": false, "constructor": false}, {"identifier": "reopenReservation", "parameters": "(String reservationNumber)", "modifiers": "public", "return": "void", "signature": "void reopenReservation(String reservationNumber)", "full_signature": "public void reopenReservation(String reservationNumber)", "class_method_signature": "BookingService.reopenReservation(String reservationNumber)", "testcase": false, "constructor": false}, {"identifier": "confirmReservation", "parameters": "(String reservationNumber)", "modifiers": "public", "return": "void", "signature": "void confirmReservation(String reservationNumber)", "full_signature": "public void confirmReservation(String reservationNumber)", "class_method_signature": "BookingService.confirmReservation(String reservationNumber)", "testcase": false, "constructor": false}], "file": "booking/src/main/java/org/koenighotze/jee7hotel/booking/business/BookingService.java"}, "focal_method": {"identifier": "bookRoom", "parameters": "(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "modifiers": "public", "return": "Reservation", "body": "public Reservation bookRoom(String guestId, String roomId, LocalDate checkin, LocalDate checkout) {\n        Reservation reservation =\n                new Reservation(guestId, newReservationNumber(), roomId,\n                        checkin, checkout, reservationCostCalculator.calculateRateFor(BUDGET, checkin, checkout));\n\n        LOGGER.info(() -> \"Storing \" + reservation);\n        this.em.persist(reservation);\n\n        this.reservationEvents.fire(new NewReservationEvent(reservation.getReservationNumber()));\n\n        this.em.flush();\n        return reservation;\n    }", "signature": "Reservation bookRoom(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "full_signature": "public Reservation bookRoom(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "class_method_signature": "BookingService.bookRoom(String guestId, String roomId, LocalDate checkin, LocalDate checkout)", "testcase": false, "constructor": false, "invocations": ["newReservationNumber", "calculateRateFor", "info", "persist", "fire", "getReservationNumber", "flush"]}, "repository": {"repo_id": 26170170, "url": "https://github.com/koenighotze/Hotel-Reservation-Tool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1659, "license": "licensed"}}