{"test_class": {"identifier": "SideModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PROPERTY_PREFIX = \"PROP\";", "modifier": "private static final", "type": "String", "declarator": "PROPERTY_PREFIX = \"PROP\"", "var_name": "PROPERTY_PREFIX"}, {"original_string": "private static final String CONTEXT = \"CONTEXT\";", "modifier": "private static final", "type": "String", "declarator": "CONTEXT = \"CONTEXT\"", "var_name": "CONTEXT"}, {"original_string": "private Properties myProperties;", "modifier": "private", "type": "Properties", "declarator": "myProperties", "var_name": "myProperties"}, {"original_string": "private List<AttachedToolWindow<String>> myToolWindows;", "modifier": "private", "type": "List<AttachedToolWindow<String>>", "declarator": "myToolWindows", "var_name": "myToolWindows"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow1;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow1", "var_name": "myToolWindow1"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow2;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow2", "var_name": "myToolWindow2"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow3;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow3", "var_name": "myToolWindow3"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow4;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow4", "var_name": "myToolWindow4"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow5;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow5", "var_name": "myToolWindow5"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myFloatingToolWindow1;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myFloatingToolWindow1", "var_name": "myFloatingToolWindow1"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myFloatingToolWindow2;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myFloatingToolWindow2", "var_name": "myFloatingToolWindow2"}, {"original_string": "@Mock\n  private SideModel.Listener<String> myListener;", "modifier": "@Mock\n  private", "type": "SideModel.Listener<String>", "declarator": "myListener", "var_name": "myListener"}, {"original_string": "@Mock\n  private Project myProject;", "modifier": "@Mock\n  private", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "@InjectMocks\n  private SideModel<String> mySideModel;", "modifier": "@InjectMocks\n  private", "type": "SideModel<String>", "declarator": "mySideModel", "var_name": "mySideModel"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/workbench/SideModelTest.java"}, "test_case": {"identifier": "testGetContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetContext() {\n    assertThat(mySideModel.getContext()).isSameAs(CONTEXT);\n  }", "signature": "void testGetContext()", "full_signature": "@Test public void testGetContext()", "class_method_signature": "SideModelTest.testGetContext()", "testcase": true, "constructor": false, "invocations": ["isSameAs", "assertThat", "getContext"]}, "focal_class": {"identifier": "SideModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<AttachedToolWindow<T>> myAllTools;", "modifier": "private final", "type": "List<AttachedToolWindow<T>>", "declarator": "myAllTools", "var_name": "myAllTools"}, {"original_string": "private final VisiblePair<T> myLeftVisibleTools;", "modifier": "private final", "type": "VisiblePair<T>", "declarator": "myLeftVisibleTools", "var_name": "myLeftVisibleTools"}, {"original_string": "private final VisiblePair<T> myRightVisibleTools;", "modifier": "private final", "type": "VisiblePair<T>", "declarator": "myRightVisibleTools", "var_name": "myRightVisibleTools"}, {"original_string": "private final List<Listener<T>> myListeners;", "modifier": "private final", "type": "List<Listener<T>>", "declarator": "myListeners", "var_name": "myListeners"}, {"original_string": "private final Project myProject;", "modifier": "private final", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "private T myContext;", "modifier": "private", "type": "T", "declarator": "myContext", "var_name": "myContext"}, {"original_string": "private AttachedToolWindow<T> myVisibleAutoHideTool;", "modifier": "private", "type": "AttachedToolWindow<T>", "declarator": "myVisibleAutoHideTool", "var_name": "myVisibleAutoHideTool"}], "methods": [{"identifier": "SideModel", "parameters": "(@NotNull Project project)", "modifiers": "", "return": "", "signature": " SideModel(@NotNull Project project)", "full_signature": "  SideModel(@NotNull Project project)", "class_method_signature": "SideModel.SideModel(@NotNull Project project)", "testcase": false, "constructor": true}, {"identifier": "getProject", "parameters": "()", "modifiers": "public", "return": "Project", "signature": "Project getProject()", "full_signature": "public Project getProject()", "class_method_signature": "SideModel.getProject()", "testcase": false, "constructor": false}, {"identifier": "setContext", "parameters": "(T context)", "modifiers": "public", "return": "void", "signature": "void setContext(T context)", "full_signature": "public void setContext(T context)", "class_method_signature": "SideModel.setContext(T context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getContext()", "full_signature": "public T getContext()", "class_method_signature": "SideModel.getContext()", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(@NotNull Listener<T> listener)", "modifiers": "public", "return": "void", "signature": "void addListener(@NotNull Listener<T> listener)", "full_signature": "public void addListener(@NotNull Listener<T> listener)", "class_method_signature": "SideModel.addListener(@NotNull Listener<T> listener)", "testcase": false, "constructor": false}, {"identifier": "getAllTools", "parameters": "()", "modifiers": "@NotNull public", "return": "List<AttachedToolWindow<T>>", "signature": "List<AttachedToolWindow<T>> getAllTools()", "full_signature": "@NotNull public List<AttachedToolWindow<T>> getAllTools()", "class_method_signature": "SideModel.getAllTools()", "testcase": false, "constructor": false}, {"identifier": "getVisibleTools", "parameters": "(@NotNull Side side)", "modifiers": "@NotNull public", "return": "List<AttachedToolWindow>", "signature": "List<AttachedToolWindow> getVisibleTools(@NotNull Side side)", "full_signature": "@NotNull public List<AttachedToolWindow> getVisibleTools(@NotNull Side side)", "class_method_signature": "SideModel.getVisibleTools(@NotNull Side side)", "testcase": false, "constructor": false}, {"identifier": "getHiddenTools", "parameters": "(@NotNull Side side)", "modifiers": "@NotNull public", "return": "List<AttachedToolWindow>", "signature": "List<AttachedToolWindow> getHiddenTools(@NotNull Side side)", "full_signature": "@NotNull public List<AttachedToolWindow> getHiddenTools(@NotNull Side side)", "class_method_signature": "SideModel.getHiddenTools(@NotNull Side side)", "testcase": false, "constructor": false}, {"identifier": "getTopTools", "parameters": "(@NotNull Side side)", "modifiers": "@NotNull public", "return": "List<AttachedToolWindow>", "signature": "List<AttachedToolWindow> getTopTools(@NotNull Side side)", "full_signature": "@NotNull public List<AttachedToolWindow> getTopTools(@NotNull Side side)", "class_method_signature": "SideModel.getTopTools(@NotNull Side side)", "testcase": false, "constructor": false}, {"identifier": "getBottomTools", "parameters": "(@NotNull Side side)", "modifiers": "@NotNull public", "return": "List<AttachedToolWindow>", "signature": "List<AttachedToolWindow> getBottomTools(@NotNull Side side)", "full_signature": "@NotNull public List<AttachedToolWindow> getBottomTools(@NotNull Side side)", "class_method_signature": "SideModel.getBottomTools(@NotNull Side side)", "testcase": false, "constructor": false}, {"identifier": "getVisibleAutoHideTool", "parameters": "()", "modifiers": "@Nullable public", "return": "AttachedToolWindow<T>", "signature": "AttachedToolWindow<T> getVisibleAutoHideTool()", "full_signature": "@Nullable public AttachedToolWindow<T> getVisibleAutoHideTool()", "class_method_signature": "SideModel.getVisibleAutoHideTool()", "testcase": false, "constructor": false}, {"identifier": "getHiddenSliders", "parameters": "()", "modifiers": "@NotNull public", "return": "List<AttachedToolWindow<T>>", "signature": "List<AttachedToolWindow<T>> getHiddenSliders()", "full_signature": "@NotNull public List<AttachedToolWindow<T>> getHiddenSliders()", "class_method_signature": "SideModel.getHiddenSliders()", "testcase": false, "constructor": false}, {"identifier": "getDetachedTools", "parameters": "()", "modifiers": "@NotNull public", "return": "List<AttachedToolWindow<T>>", "signature": "List<AttachedToolWindow<T>> getDetachedTools()", "full_signature": "@NotNull public List<AttachedToolWindow<T>> getDetachedTools()", "class_method_signature": "SideModel.getDetachedTools()", "testcase": false, "constructor": false}, {"identifier": "setTools", "parameters": "(@NotNull List<AttachedToolWindow<T>> tools)", "modifiers": "public", "return": "void", "signature": "void setTools(@NotNull List<AttachedToolWindow<T>> tools)", "full_signature": "public void setTools(@NotNull List<AttachedToolWindow<T>> tools)", "class_method_signature": "SideModel.setTools(@NotNull List<AttachedToolWindow<T>> tools)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@NotNull AttachedToolWindow<T> tool)", "modifiers": "private", "return": "void", "signature": "void add(@NotNull AttachedToolWindow<T> tool)", "full_signature": "private void add(@NotNull AttachedToolWindow<T> tool)", "class_method_signature": "SideModel.add(@NotNull AttachedToolWindow<T> tool)", "testcase": false, "constructor": false}, {"identifier": "changeToolSettingsAfterDragAndDrop", "parameters": "(@NotNull AttachedToolWindow<T> tool,\n                                                 @NotNull Side side,\n                                                 @NotNull Split split,\n                                                 int wantedSideToolIndex)", "modifiers": "public", "return": "void", "signature": "void changeToolSettingsAfterDragAndDrop(@NotNull AttachedToolWindow<T> tool,\n                                                 @NotNull Side side,\n                                                 @NotNull Split split,\n                                                 int wantedSideToolIndex)", "full_signature": "public void changeToolSettingsAfterDragAndDrop(@NotNull AttachedToolWindow<T> tool,\n                                                 @NotNull Side side,\n                                                 @NotNull Split split,\n                                                 int wantedSideToolIndex)", "class_method_signature": "SideModel.changeToolSettingsAfterDragAndDrop(@NotNull AttachedToolWindow<T> tool,\n                                                 @NotNull Side side,\n                                                 @NotNull Split split,\n                                                 int wantedSideToolIndex)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NotNull AttachedToolWindow<T> tool, @NotNull PropertyType typeOfChange)", "modifiers": "public", "return": "void", "signature": "void update(@NotNull AttachedToolWindow<T> tool, @NotNull PropertyType typeOfChange)", "full_signature": "public void update(@NotNull AttachedToolWindow<T> tool, @NotNull PropertyType typeOfChange)", "class_method_signature": "SideModel.update(@NotNull AttachedToolWindow<T> tool, @NotNull PropertyType typeOfChange)", "testcase": false, "constructor": false}, {"identifier": "updateLocally", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateLocally()", "full_signature": "public void updateLocally()", "class_method_signature": "SideModel.updateLocally()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NotNull List<AttachedToolWindow<T>> tools, @NotNull EventType eventType)", "modifiers": "private", "return": "void", "signature": "void update(@NotNull List<AttachedToolWindow<T>> tools, @NotNull EventType eventType)", "full_signature": "private void update(@NotNull List<AttachedToolWindow<T>> tools, @NotNull EventType eventType)", "class_method_signature": "SideModel.update(@NotNull List<AttachedToolWindow<T>> tools, @NotNull EventType eventType)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void swap()", "full_signature": "public void swap()", "class_method_signature": "SideModel.swap()", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(@NotNull EventType type)", "modifiers": "private", "return": "void", "signature": "void notifyListeners(@NotNull EventType type)", "full_signature": "private void notifyListeners(@NotNull EventType type)", "class_method_signature": "SideModel.notifyListeners(@NotNull EventType type)", "testcase": false, "constructor": false}, {"identifier": "getVisibleTools", "parameters": "(boolean isLeft)", "modifiers": "@NotNull private", "return": "VisiblePair<T>", "signature": "VisiblePair<T> getVisibleTools(boolean isLeft)", "full_signature": "@NotNull private VisiblePair<T> getVisibleTools(boolean isLeft)", "class_method_signature": "SideModel.getVisibleTools(boolean isLeft)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/workbench/SideModel.java"}, "focal_method": {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "T", "body": "public T getContext() {\n    return myContext;\n  }", "signature": "T getContext()", "full_signature": "public T getContext()", "class_method_signature": "SideModel.getContext()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}