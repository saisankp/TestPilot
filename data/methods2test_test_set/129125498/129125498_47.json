{"test_class": {"identifier": "AnomalyConsumerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KafkaConsumer<String, MappedMetricData> kafkaConsumer;", "modifier": "private", "type": "KafkaConsumer<String, MappedMetricData>", "declarator": "kafkaConsumer", "var_name": "kafkaConsumer"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private AnomalyConsumer anomalyConsumer;", "modifier": "private", "type": "AnomalyConsumer", "declarator": "anomalyConsumer", "var_name": "anomalyConsumer"}], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/visualizer/AnomalyConsumerTest.java"}, "test_case": {"identifier": "testProcessWakeException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessWakeException() {\n        when(kafkaConsumer.poll(anyLong())).thenThrow(WakeupException.class);\n        assertFalse(anomalyConsumer.process(kafkaConsumer, true));\n        verify(kafkaConsumer, times(1)).close();\n\n    }", "signature": "void testProcessWakeException()", "full_signature": "@Test public void testProcessWakeException()", "class_method_signature": "AnomalyConsumerTest.testProcessWakeException()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "poll", "anyLong", "assertFalse", "process", "close", "verify", "times"]}, "focal_class": {"identifier": "AnomalyConsumer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KafkaConsumer<String, MappedMetricData> kafkaConsumer;", "modifier": "private", "type": "KafkaConsumer<String, MappedMetricData>", "declarator": "kafkaConsumer", "var_name": "kafkaConsumer"}, {"original_string": "private static String TOPIC = \"topic\";", "modifier": "private static", "type": "String", "declarator": "TOPIC = \"topic\"", "var_name": "TOPIC"}, {"original_string": "private static String METRIC_CONSUMER = \"metric-consumer\";", "modifier": "private static", "type": "String", "declarator": "METRIC_CONSUMER = \"metric-consumer\"", "var_name": "METRIC_CONSUMER"}, {"original_string": "private static long POLL_INTERVAL = 1000L;", "modifier": "private static", "type": "long", "declarator": "POLL_INTERVAL = 1000L", "var_name": "POLL_INTERVAL"}, {"original_string": "private AnomaliesProcessor anomaliesProcessor;", "modifier": "private", "type": "AnomaliesProcessor", "declarator": "anomaliesProcessor", "var_name": "anomaliesProcessor"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "public Config consumerConfig = VisualizerUtility.getConfig(METRIC_CONSUMER);", "modifier": "public", "type": "Config", "declarator": "consumerConfig = VisualizerUtility.getConfig(METRIC_CONSUMER)", "var_name": "consumerConfig"}, {"original_string": "public Properties metricProps = VisualizerUtility.getMetricConsumerProps(consumerConfig);", "modifier": "public", "type": "Properties", "declarator": "metricProps = VisualizerUtility.getMetricConsumerProps(consumerConfig)", "var_name": "metricProps"}], "methods": [{"identifier": "AnomalyConsumer", "parameters": "()", "modifiers": "public", "return": "", "signature": " AnomalyConsumer()", "full_signature": "public  AnomalyConsumer()", "class_method_signature": "AnomalyConsumer.AnomalyConsumer()", "testcase": false, "constructor": true}, {"identifier": "listen", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void listen()", "full_signature": "public void listen()", "class_method_signature": "AnomalyConsumer.listen()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "modifiers": "public", "return": "boolean", "signature": "boolean process(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "full_signature": "public boolean process(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "class_method_signature": "AnomalyConsumer.process(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "testcase": false, "constructor": false}, {"identifier": "setKafkaConsumer", "parameters": "(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setKafkaConsumer(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "full_signature": "@VisibleForTesting public void setKafkaConsumer(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "class_method_signature": "AnomalyConsumer.setKafkaConsumer(KafkaConsumer<String, MappedMetricData> kafkaConsumer)", "testcase": false, "constructor": false}, {"identifier": "setExecutorService", "parameters": "(ExecutorService executorService)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setExecutorService(ExecutorService executorService)", "full_signature": "@VisibleForTesting public void setExecutorService(ExecutorService executorService)", "class_method_signature": "AnomalyConsumer.setExecutorService(ExecutorService executorService)", "testcase": false, "constructor": false}, {"identifier": "getAnomaliesProcessor", "parameters": "()", "modifiers": "public", "return": "AnomaliesProcessor", "signature": "AnomaliesProcessor getAnomaliesProcessor()", "full_signature": "public AnomaliesProcessor getAnomaliesProcessor()", "class_method_signature": "AnomalyConsumer.getAnomaliesProcessor()", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/visualizer/AnomalyConsumer.java"}, "focal_method": {"identifier": "process", "parameters": "(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "modifiers": "public", "return": "boolean", "body": "public boolean process(KafkaConsumer kafkaConsumer, boolean continueProcessing) {\n        try {\n            ConsumerRecords<String, MappedMetricData> metricRecords = kafkaConsumer.poll(POLL_INTERVAL);\n            log.trace(\"Read {} metric records from topic={}\", metricRecords.count(), consumerConfig.getString(TOPIC));\n            anomaliesProcessor.processMetrics(metricRecords, executorService);\n        } catch (WakeupException e) {\n            kafkaConsumer.close();\n            continueProcessing = false;\n        } catch (Exception e) {\n            log.error(e.getLocalizedMessage());\n            e.printStackTrace();\n        }\n\n        return continueProcessing;\n    }", "signature": "boolean process(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "full_signature": "public boolean process(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "class_method_signature": "AnomalyConsumer.process(KafkaConsumer kafkaConsumer, boolean continueProcessing)", "testcase": false, "constructor": false, "invocations": ["poll", "trace", "count", "getString", "processMetrics", "close", "error", "getLocalizedMessage", "printStackTrace"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}