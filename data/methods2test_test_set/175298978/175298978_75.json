{"test_class": {"identifier": "GitDiffTest", "superclass": "", "interfaces": "", "fields": [], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/model/GitDiffTest.java"}, "test_case": {"identifier": "parseIncorrectLineWillThrow", "parameters": "()", "modifiers": "@Test(expected = Exception.class) public", "return": "void", "body": "@Test(expected = Exception.class)\n    public void parseIncorrectLineWillThrow() throws Exception {\n        String line = \"SmellTracker/src/main/resources/schema/tracker-sqlite.sql  |  2 ++\";\n\n        GitDiff.parse(line);\n    }", "signature": "void parseIncorrectLineWillThrow()", "full_signature": "@Test(expected = Exception.class) public void parseIncorrectLineWillThrow()", "class_method_signature": "GitDiffTest.parseIncorrectLineWillThrow()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "GitDiff", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GitDiff.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GitDiff.class.getName())", "var_name": "logger"}, {"original_string": "public static final GitDiff EMPTY = new GitDiff(0, 0, 0);", "modifier": "public static final", "type": "GitDiff", "declarator": "EMPTY = new GitDiff(0, 0, 0)", "var_name": "EMPTY"}, {"original_string": "private static final Pattern MODIF_PATTERN = Pattern.compile(\"(?<number>\\\\d+)\\\\s(insertion[s]?|deletion[s]?)\\\\((?<sign>[+-])\\\\)\");", "modifier": "private static final", "type": "Pattern", "declarator": "MODIF_PATTERN = Pattern.compile(\"(?<number>\\\\d+)\\\\s(insertion[s]?|deletion[s]?)\\\\((?<sign>[+-])\\\\)\")", "var_name": "MODIF_PATTERN"}, {"original_string": "private static final Pattern FILE_PATTERN = Pattern.compile(\"(?<number>\\\\d+)\\\\sfile[s]?\\\\schanged\");", "modifier": "private static final", "type": "Pattern", "declarator": "FILE_PATTERN = Pattern.compile(\"(?<number>\\\\d+)\\\\sfile[s]?\\\\schanged\")", "var_name": "FILE_PATTERN"}, {"original_string": "private final int addition;", "modifier": "private final", "type": "int", "declarator": "addition", "var_name": "addition"}, {"original_string": "private final int deletion;", "modifier": "private final", "type": "int", "declarator": "deletion", "var_name": "deletion"}, {"original_string": "private final int changedFiles;", "modifier": "private final", "type": "int", "declarator": "changedFiles", "var_name": "changedFiles"}], "methods": [{"identifier": "GitDiff", "parameters": "(int addition, int deletion, int changedFiles)", "modifiers": "public", "return": "", "signature": " GitDiff(int addition, int deletion, int changedFiles)", "full_signature": "public  GitDiff(int addition, int deletion, int changedFiles)", "class_method_signature": "GitDiff.GitDiff(int addition, int deletion, int changedFiles)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String line)", "modifiers": "public static", "return": "GitDiff", "signature": "GitDiff parse(String line)", "full_signature": "public static GitDiff parse(String line)", "class_method_signature": "GitDiff.parse(String line)", "testcase": false, "constructor": false}, {"identifier": "getAddition", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAddition()", "full_signature": "public int getAddition()", "class_method_signature": "GitDiff.getAddition()", "testcase": false, "constructor": false}, {"identifier": "getDeletion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDeletion()", "full_signature": "public int getDeletion()", "class_method_signature": "GitDiff.getDeletion()", "testcase": false, "constructor": false}, {"identifier": "getChangedFiles", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getChangedFiles()", "full_signature": "public int getChangedFiles()", "class_method_signature": "GitDiff.getChangedFiles()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GitDiff.toString()", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/model/GitDiff.java"}, "focal_method": {"identifier": "parse", "parameters": "(String line)", "modifiers": "public static", "return": "GitDiff", "body": "public static GitDiff parse(String line) throws Exception {\n        line = line.trim();\n        String[] split = line.split(\",\");\n        Map<String, Integer> modifications = new HashMap<>();\n\n        Matcher matcher = FILE_PATTERN.matcher(split[0]);\n        if (!matcher.find()) {\n            throw new Exception(\"Unable to parse diff line: \" + line);\n        }\n        int changedFiles = Integer.valueOf(matcher.group(\"number\"));\n\n        // We should be greater than 1\n        String input;\n        if (split.length > 1) {\n            input = split[1];\n            matcher = MODIF_PATTERN.matcher(input);\n            if (matcher.find()) {\n                modifications.put(matcher.group(\"sign\"), Integer.valueOf(matcher.group(\"number\")));\n            }\n        }\n        if (split.length > 2) {\n            input = split[2];\n            matcher = MODIF_PATTERN.matcher(input);\n            if (matcher.find()) {\n                modifications.put(matcher.group(\"sign\"), Integer.valueOf(matcher.group(\"number\")));\n            }\n        }\n\n        int addition = modifications.getOrDefault(\"+\", 0);\n        int deletion = modifications.getOrDefault(\"-\", 0);\n        return new GitDiff(addition, deletion, changedFiles);\n    }", "signature": "GitDiff parse(String line)", "full_signature": "public static GitDiff parse(String line)", "class_method_signature": "GitDiff.parse(String line)", "testcase": false, "constructor": false, "invocations": ["trim", "split", "matcher", "find", "valueOf", "group", "matcher", "find", "put", "group", "valueOf", "group", "matcher", "find", "put", "group", "valueOf", "group", "getOrDefault", "getOrDefault"]}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}