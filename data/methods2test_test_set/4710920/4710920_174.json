{"test_class": {"identifier": "ExecuteLimitFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ExecuteLimitFilter executeLimitFilter = new ExecuteLimitFilter();", "modifier": "private", "type": "ExecuteLimitFilter", "declarator": "executeLimitFilter = new ExecuteLimitFilter()", "var_name": "executeLimitFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/ExecuteLimitFilterTest.java"}, "test_case": {"identifier": "testNoExecuteLimitInvoke", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoExecuteLimitInvoke() throws Exception {\n        Invoker invoker = Mockito.mock(Invoker.class);\n        when(invoker.invoke(any(Invocation.class))).thenReturn(new AppResponse(\"result\"));\n        when(invoker.getUrl()).thenReturn(URL.valueOf(\"test://test:11/test?accesslog=true&group=dubbo&version=1.1\"));\n\n        Invocation invocation = Mockito.mock(Invocation.class);\n        when(invocation.getMethodName()).thenReturn(\"testNoExecuteLimitInvoke\");\n\n        Result result = executeLimitFilter.invoke(invoker, invocation);\n        Assertions.assertEquals(\"result\", result.getValue());\n    }", "signature": "void testNoExecuteLimitInvoke()", "full_signature": "@Test public void testNoExecuteLimitInvoke()", "class_method_signature": "ExecuteLimitFilterTest.testNoExecuteLimitInvoke()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "invoke", "any", "thenReturn", "when", "getUrl", "valueOf", "mock", "thenReturn", "when", "getMethodName", "invoke", "assertEquals", "getValue"]}, "focal_class": {"identifier": "ExecuteLimitFilter", "superclass": "", "interfaces": "implements Filter, Filter.Listener", "fields": [{"original_string": "private static final String EXECUTE_LIMIT_FILTER_START_TIME = \"execute_limit_filter_start_time\";", "modifier": "private static final", "type": "String", "declarator": "EXECUTE_LIMIT_FILTER_START_TIME = \"execute_limit_filter_start_time\"", "var_name": "EXECUTE_LIMIT_FILTER_START_TIME"}], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExecuteLimitFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "onResponse", "parameters": "(Result appResponse, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExecuteLimitFilter.onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t, Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "void", "signature": "void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public void onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExecuteLimitFilter.onError(Throwable t, Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getElapsed", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "long", "signature": "long getElapsed(Invocation invocation)", "full_signature": "private long getElapsed(Invocation invocation)", "class_method_signature": "ExecuteLimitFilter.getElapsed(Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/ExecuteLimitFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        URL url = invoker.getUrl();\n        String methodName = invocation.getMethodName();\n        int max = url.getMethodParameter(methodName, EXECUTES_KEY, 0);\n        if (!RpcStatus.beginCount(url, methodName, max)) {\n            throw new RpcException(RpcException.LIMIT_EXCEEDED_EXCEPTION,\n                    \"Failed to invoke method \" + invocation.getMethodName() + \" in provider \" +\n                            url + \", cause: The service using threads greater than <dubbo:service executes=\\\"\" + max +\n                            \"\\\" /> limited.\");\n        }\n\n        invocation.put(EXECUTE_LIMIT_FILTER_START_TIME, System.currentTimeMillis());\n        try {\n            return invoker.invoke(invocation);\n        } catch (Throwable t) {\n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            } else {\n                throw new RpcException(\"unexpected exception when ExecuteLimitFilter\", t);\n            }\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "ExecuteLimitFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getUrl", "getMethodName", "getMethodParameter", "beginCount", "getMethodName", "put", "currentTimeMillis", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}