{"test_class": {"identifier": "BeanInfoCacheTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/cache/BeanInfoCacheTest.java"}, "test_case": {"identifier": "getMethodDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getMethodDescriptor() {\n        Map<String, MethodDescriptor> propertyMap = BeanInfoCache.getInstance().getMethodDescriptor(Abean.class);\n        for (Map.Entry<String, MethodDescriptor> entry : propertyMap.entrySet()) {\n            logger.info(entry.getKey());\n            logger.info(entry.getValue().getName());\n        }\n    }", "signature": "void getMethodDescriptor()", "full_signature": "@Test public void getMethodDescriptor()", "class_method_signature": "BeanInfoCacheTest.getMethodDescriptor()", "testcase": true, "constructor": false, "invocations": ["getMethodDescriptor", "getInstance", "entrySet", "info", "getKey", "info", "getName", "getValue"]}, "focal_class": {"identifier": "BeanInfoCache", "superclass": "extends CachedLogger", "interfaces": "", "fields": [{"original_string": "private static final BeanInfoCache instance = new BeanInfoCache();", "modifier": "private static final", "type": "BeanInfoCache", "declarator": "instance = new BeanInfoCache()", "var_name": "instance"}, {"original_string": "private final Computable<String, Map<String, PropertyDescriptor>> propertyCached =\n            new ConcurrentCache<String, Map<String, PropertyDescriptor>>();", "modifier": "private final", "type": "Computable<String, Map<String, PropertyDescriptor>>", "declarator": "propertyCached =\n            new ConcurrentCache<String, Map<String, PropertyDescriptor>>()", "var_name": "propertyCached"}, {"original_string": "private final Computable<String, Map<String, MethodDescriptor>> methodCached =\n            new ConcurrentCache<String, Map<String, MethodDescriptor>>();", "modifier": "private final", "type": "Computable<String, Map<String, MethodDescriptor>>", "declarator": "methodCached =\n            new ConcurrentCache<String, Map<String, MethodDescriptor>>()", "var_name": "methodCached"}], "methods": [{"identifier": "BeanInfoCache", "parameters": "()", "modifiers": "private", "return": "", "signature": " BeanInfoCache()", "full_signature": "private  BeanInfoCache()", "class_method_signature": "BeanInfoCache.BeanInfoCache()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "BeanInfoCache", "signature": "BeanInfoCache getInstance()", "full_signature": "public static BeanInfoCache getInstance()", "class_method_signature": "BeanInfoCache.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getBeanInfo", "parameters": "(Class<?> beanClass)", "modifiers": "public", "return": "BeanInfo", "signature": "BeanInfo getBeanInfo(Class<?> beanClass)", "full_signature": "public BeanInfo getBeanInfo(Class<?> beanClass)", "class_method_signature": "BeanInfoCache.getBeanInfo(Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getBeanInfo", "parameters": "(Class<?> beanClass, Class<?> stopClass)", "modifiers": "public", "return": "BeanInfo", "signature": "BeanInfo getBeanInfo(Class<?> beanClass, Class<?> stopClass)", "full_signature": "public BeanInfo getBeanInfo(Class<?> beanClass, Class<?> stopClass)", "class_method_signature": "BeanInfoCache.getBeanInfo(Class<?> beanClass, Class<?> stopClass)", "testcase": false, "constructor": false}, {"identifier": "getBeanDescriptor", "parameters": "(Class<?> beanClass)", "modifiers": "public", "return": "BeanDescriptor", "signature": "BeanDescriptor getBeanDescriptor(Class<?> beanClass)", "full_signature": "public BeanDescriptor getBeanDescriptor(Class<?> beanClass)", "class_method_signature": "BeanInfoCache.getBeanDescriptor(Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getPropertyMap", "parameters": "(final Class<?> beanClass)", "modifiers": "private", "return": "Map<String, PropertyDescriptor>", "signature": "Map<String, PropertyDescriptor> getPropertyMap(final Class<?> beanClass)", "full_signature": "private Map<String, PropertyDescriptor> getPropertyMap(final Class<?> beanClass)", "class_method_signature": "BeanInfoCache.getPropertyMap(final Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptor", "parameters": "(final Class<?> beanClass)", "modifiers": "public", "return": "Map<String, PropertyDescriptor>", "signature": "Map<String, PropertyDescriptor> getPropertyDescriptor(final Class<?> beanClass)", "full_signature": "public Map<String, PropertyDescriptor> getPropertyDescriptor(final Class<?> beanClass)", "class_method_signature": "BeanInfoCache.getPropertyDescriptor(final Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptor", "parameters": "(final Class<?> beanClass, String propertyName)", "modifiers": "public", "return": "PropertyDescriptor", "signature": "PropertyDescriptor getPropertyDescriptor(final Class<?> beanClass, String propertyName)", "full_signature": "public PropertyDescriptor getPropertyDescriptor(final Class<?> beanClass, String propertyName)", "class_method_signature": "BeanInfoCache.getPropertyDescriptor(final Class<?> beanClass, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "getMethodMap", "parameters": "(final Class<?> beanClass)", "modifiers": "private", "return": "Map<String, MethodDescriptor>", "signature": "Map<String, MethodDescriptor> getMethodMap(final Class<?> beanClass)", "full_signature": "private Map<String, MethodDescriptor> getMethodMap(final Class<?> beanClass)", "class_method_signature": "BeanInfoCache.getMethodMap(final Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getMethodDescriptor", "parameters": "(final Class<?> beanClass)", "modifiers": "public", "return": "Map<String, MethodDescriptor>", "signature": "Map<String, MethodDescriptor> getMethodDescriptor(final Class<?> beanClass)", "full_signature": "public Map<String, MethodDescriptor> getMethodDescriptor(final Class<?> beanClass)", "class_method_signature": "BeanInfoCache.getMethodDescriptor(final Class<?> beanClass)", "testcase": false, "constructor": false}, {"identifier": "getMethodDescriptor", "parameters": "(final Class<?> beanClass, String methodName)", "modifiers": "public", "return": "MethodDescriptor", "signature": "MethodDescriptor getMethodDescriptor(final Class<?> beanClass, String methodName)", "full_signature": "public MethodDescriptor getMethodDescriptor(final Class<?> beanClass, String methodName)", "class_method_signature": "BeanInfoCache.getMethodDescriptor(final Class<?> beanClass, String methodName)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/cache/BeanInfoCache.java"}, "focal_method": {"identifier": "getMethodDescriptor", "parameters": "(final Class<?> beanClass)", "modifiers": "public", "return": "Map<String, MethodDescriptor>", "body": "public Map<String, MethodDescriptor> getMethodDescriptor(final Class<?> beanClass) {\n        Map<String, MethodDescriptor> map = getMethodMap(beanClass);\n\n        return Collections.unmodifiableMap(map);\n    }", "signature": "Map<String, MethodDescriptor> getMethodDescriptor(final Class<?> beanClass)", "full_signature": "public Map<String, MethodDescriptor> getMethodDescriptor(final Class<?> beanClass)", "class_method_signature": "BeanInfoCache.getMethodDescriptor(final Class<?> beanClass)", "testcase": false, "constructor": false, "invocations": ["getMethodMap", "unmodifiableMap"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}