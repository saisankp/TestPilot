{"test_class": {"identifier": "PredictionRuleMappersGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/prediction/PredictionRuleMappersGeneratorTest.java"}, "test_case": {"identifier": "getPredictionRuleMapperSource", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getPredictionRuleMapperSource() {\n        final String predictionRuleMapper = \"PredictionRuleMapperImpl\";\n        final String packageName = \"PACKAGE\";\n        final List<String> generatedRuleMappers = IntStream.range(0, 4).mapToObj(index -> packageName + \".\" +\n                \"subPack\" + index + \".\" + predictionRuleMapper).collect(Collectors.toList());\n        String retrieved = PredictionRuleMappersGenerator.getPredictionRuleMappersSource(packageName,\n                                                                                        generatedRuleMappers);\n        assertNotNull(retrieved);\n        String expected = String.format(\"package %s;\", packageName);\n        assertTrue(retrieved.contains(expected));\n        List<String> mod = generatedRuleMappers.stream().map(gen -> \"new \" + gen + \"()\").collect(Collectors.toList());\n        expected = \"Arrays.asList(\" + String.join(\", \", mod) + \");\";\n        assertTrue(retrieved.contains(expected));\n    }", "signature": "void getPredictionRuleMapperSource()", "full_signature": "@Test void getPredictionRuleMapperSource()", "class_method_signature": "PredictionRuleMappersGeneratorTest.getPredictionRuleMapperSource()", "testcase": true, "constructor": false, "invocations": ["collect", "mapToObj", "range", "toList", "getPredictionRuleMappersSource", "assertNotNull", "format", "assertTrue", "contains", "collect", "map", "stream", "toList", "join", "assertTrue", "contains"]}, "focal_class": {"identifier": "PredictionRuleMappersGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEMPLATE_JAVA = \"/class-templates/PMMLRuleMappersTemplate.java\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_JAVA = \"/class-templates/PMMLRuleMappersTemplate.java\"", "var_name": "TEMPLATE_JAVA"}], "methods": [{"identifier": "PredictionRuleMappersGenerator", "parameters": "()", "modifiers": "private", "return": "", "signature": " PredictionRuleMappersGenerator()", "full_signature": "private  PredictionRuleMappersGenerator()", "class_method_signature": "PredictionRuleMappersGenerator.PredictionRuleMappersGenerator()", "testcase": false, "constructor": true}, {"identifier": "getPredictionRuleMappersSource", "parameters": "(final String packageName, final List<String> generatedRuleMappers)", "modifiers": "public static", "return": "String", "signature": "String getPredictionRuleMappersSource(final String packageName, final List<String> generatedRuleMappers)", "full_signature": "public static String getPredictionRuleMappersSource(final String packageName, final List<String> generatedRuleMappers)", "class_method_signature": "PredictionRuleMappersGenerator.getPredictionRuleMappersSource(final String packageName, final List<String> generatedRuleMappers)", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/prediction/PredictionRuleMappersGenerator.java"}, "focal_method": {"identifier": "getPredictionRuleMappersSource", "parameters": "(final String packageName, final List<String> generatedRuleMappers)", "modifiers": "public static", "return": "String", "body": "public static String getPredictionRuleMappersSource(final String packageName, final List<String> generatedRuleMappers) {\n        CompilationUnit clazz =\n                StaticJavaParser.parse(PredictionRuleMappersGenerator.class.getResourceAsStream(TEMPLATE_JAVA)).clone();\n        if (!packageName.isEmpty()) {\n            clazz.setPackageDeclaration(packageName);\n        }\n        ClassOrInterfaceDeclaration typeDeclaration = (ClassOrInterfaceDeclaration) clazz.getTypes().get(0);\n        FieldDeclaration ruleNameField =\n                typeDeclaration.getFieldByName(\"predictionRuleMappers\").orElseThrow(() -> new RuntimeException(\"The template \" + TEMPLATE_JAVA + \" has been modified.\"));\n        final List<Expression> nodeList = generatedRuleMappers.stream()\n                .map(generatedRuleMapper -> {\n                    ObjectCreationExpr objectCreationExpr = new ObjectCreationExpr();\n                    objectCreationExpr.setType(generatedRuleMapper);\n                    return objectCreationExpr;\n                })\n                .collect(Collectors.toList());\n        NodeList<Expression> expressions = NodeList.nodeList(nodeList);\n        MethodCallExpr methodCallExpr = new MethodCallExpr(new NameExpr(\"Arrays\"), \"asList\", expressions);\n        ruleNameField.getVariables().get(0).setInitializer(methodCallExpr);\n        return clazz.toString();\n    }", "signature": "String getPredictionRuleMappersSource(final String packageName, final List<String> generatedRuleMappers)", "full_signature": "public static String getPredictionRuleMappersSource(final String packageName, final List<String> generatedRuleMappers)", "class_method_signature": "PredictionRuleMappersGenerator.getPredictionRuleMappersSource(final String packageName, final List<String> generatedRuleMappers)", "testcase": false, "constructor": false, "invocations": ["clone", "parse", "getResourceAsStream", "isEmpty", "setPackageDeclaration", "get", "getTypes", "orElseThrow", "getFieldByName", "collect", "map", "stream", "setType", "toList", "nodeList", "setInitializer", "get", "getVariables", "toString"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}