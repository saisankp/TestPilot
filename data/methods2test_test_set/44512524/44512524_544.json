{"test_class": {"identifier": "TestAdaptiveCounting", "superclass": "", "interfaces": "", "fields": [], "file": "ml/streaminer/src/test/java/org/streaminer/stream/cardinality/TestAdaptiveCounting.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() throws CardinalityMergeException\n    {\n        int numToMerge = 10;\n        int cardinality = 10000;\n\n        AdaptiveCounting[] lcs = new AdaptiveCounting[numToMerge];\n        AdaptiveCounting baseline = new AdaptiveCounting(16);\n        for (int i = 0; i < numToMerge; i++)\n        {\n            lcs[i] = new AdaptiveCounting(16);\n            for (int j = 0; j < cardinality; j++)\n            {\n                double val = Math.random();\n                lcs[i].offer(val);\n                baseline.offer(val);\n            }\n        }\n\n        int expectedCardinality = numToMerge * cardinality;\n        long mergedEstimate = AdaptiveCounting.mergeEstimators(lcs).cardinality();\n        double error = Math.abs(mergedEstimate - expectedCardinality) / (double) expectedCardinality;\n        assertEquals(0.01, error, 0.01);\n\n        AdaptiveCounting lc = lcs[0];\n        lcs = Arrays.asList(lcs).subList(1, lcs.length).toArray(new AdaptiveCounting[0]);\n        mergedEstimate = lc.merge(lcs).cardinality();\n        error = Math.abs(mergedEstimate - expectedCardinality) / (double) expectedCardinality;\n        assertEquals(0.01, error, 0.01);\n\n        assertEquals(baseline.cardinality(), mergedEstimate);\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "TestAdaptiveCounting.testMerge()", "testcase": true, "constructor": false, "invocations": ["random", "offer", "offer", "cardinality", "mergeEstimators", "abs", "assertEquals", "toArray", "subList", "asList", "cardinality", "merge", "abs", "assertEquals", "assertEquals", "cardinality"]}, "focal_class": {"identifier": "AdaptiveCounting", "superclass": "extends LogLog", "interfaces": "", "fields": [{"original_string": "protected int b_e;", "modifier": "protected", "type": "int", "declarator": "b_e", "var_name": "b_e"}, {"original_string": "protected final double B_s = 0.051;", "modifier": "protected final", "type": "double", "declarator": "B_s = 0.051", "var_name": "B_s"}], "methods": [{"identifier": "AdaptiveCounting", "parameters": "(int k)", "modifiers": "public", "return": "", "signature": " AdaptiveCounting(int k)", "full_signature": "public  AdaptiveCounting(int k)", "class_method_signature": "AdaptiveCounting.AdaptiveCounting(int k)", "testcase": false, "constructor": true}, {"identifier": "AdaptiveCounting", "parameters": "(byte[] M)", "modifiers": "public", "return": "", "signature": " AdaptiveCounting(byte[] M)", "full_signature": "public  AdaptiveCounting(byte[] M)", "class_method_signature": "AdaptiveCounting.AdaptiveCounting(byte[] M)", "testcase": false, "constructor": true}, {"identifier": "offer", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(Object o)", "full_signature": "@Override public boolean offer(Object o)", "class_method_signature": "AdaptiveCounting.offer(Object o)", "testcase": false, "constructor": false}, {"identifier": "cardinality", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long cardinality()", "full_signature": "@Override public long cardinality()", "class_method_signature": "AdaptiveCounting.cardinality()", "testcase": false, "constructor": false}, {"identifier": "rho", "parameters": "(long x, int k)", "modifiers": "protected static", "return": "byte", "signature": "byte rho(long x, int k)", "full_signature": "protected static byte rho(long x, int k)", "class_method_signature": "AdaptiveCounting.rho(long x, int k)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(IRichCardinality... estimators)", "modifiers": "@Override public", "return": "IRichCardinality", "signature": "IRichCardinality merge(IRichCardinality... estimators)", "full_signature": "@Override public IRichCardinality merge(IRichCardinality... estimators)", "class_method_signature": "AdaptiveCounting.merge(IRichCardinality... estimators)", "testcase": false, "constructor": false}, {"identifier": "mergeEstimators", "parameters": "(LogLog... estimators)", "modifiers": "public static", "return": "AdaptiveCounting", "signature": "AdaptiveCounting mergeEstimators(LogLog... estimators)", "full_signature": "public static AdaptiveCounting mergeEstimators(LogLog... estimators)", "class_method_signature": "AdaptiveCounting.mergeEstimators(LogLog... estimators)", "testcase": false, "constructor": false}], "file": "ml/streaminer/src/main/java/org/streaminer/stream/cardinality/AdaptiveCounting.java"}, "focal_method": {"identifier": "merge", "parameters": "(IRichCardinality... estimators)", "modifiers": "@Override public", "return": "IRichCardinality", "body": "@Override\n    public IRichCardinality merge(IRichCardinality... estimators) throws LogLogMergeException {\n        LogLog res = (LogLog) super.merge(estimators);\n        return new AdaptiveCounting(res.M);\n    }", "signature": "IRichCardinality merge(IRichCardinality... estimators)", "full_signature": "@Override public IRichCardinality merge(IRichCardinality... estimators)", "class_method_signature": "AdaptiveCounting.merge(IRichCardinality... estimators)", "testcase": false, "constructor": false, "invocations": ["merge"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}