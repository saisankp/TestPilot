{"test_class": {"identifier": "LoadBProjectCommandTest", "superclass": "", "interfaces": "", "fields": [], "file": "de.prob2.kernel/src/test/java/de/prob/animator/command/LoadBProjectCommandTest.java"}, "test_case": {"identifier": "testWriteCommand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWriteCommand() throws URISyntaxException, IOException {\n\t\tURL resource = this.getClass().getResource(\"/de/prob/testmachines/b/scheduler.mch\");\n\t\tassertNotNull(resource);\n\t\tFile f =  new File(resource.toURI());\n\t\tStructuredPrologOutput prologTermOutput = new StructuredPrologOutput();\n\t\tClassicalBFactory factory = new ClassicalBFactory(null);\n\t\tBParser bparser = new BParser();\n\t\tStart ast = factory.parseFile(f, bparser);\n\t\tRecursiveMachineLoader rml = factory.parseAllMachines(ast,\n\t\t\t\tf.getParent(), f, bparser.getContentProvider(), bparser);\n\n\t\tLoadBProjectCommand command = new LoadBProjectCommand(rml, f);\n\t\tcommand.writeCommand(prologTermOutput);\n\t\tprologTermOutput.fullstop().flush();\n\t\tCollection<PrologTerm> sentences = prologTermOutput.getSentences();\n\t\tPrologTerm next = sentences.iterator().next();\n\t\tassertNotNull(next);\n\t\tassertTrue(next instanceof CompoundPrologTerm);\n\t\tCompoundPrologTerm t = (CompoundPrologTerm) next;\n\t\tassertEquals(\"load_classical_b_from_list_of_facts\", t.getFunctor());\n\t\tassertEquals(2, t.getArity());\n\n\t\tPrologTerm argument = t.getArgument(2);\n\t\tassertTrue(argument.isList());\n\n\t}", "signature": "void testWriteCommand()", "full_signature": "@Test public void testWriteCommand()", "class_method_signature": "LoadBProjectCommandTest.testWriteCommand()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "assertNotNull", "toURI", "parseFile", "parseAllMachines", "getParent", "getContentProvider", "writeCommand", "flush", "fullstop", "getSentences", "next", "iterator", "assertNotNull", "assertTrue", "assertEquals", "getFunctor", "assertEquals", "getArity", "getArgument", "assertTrue", "isList"]}, "focal_class": {"identifier": "LoadBProjectCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [{"original_string": "private static final String PROLOG_COMMAND_NAME = \"load_classical_b_from_list_of_facts\";", "modifier": "private static final", "type": "String", "declarator": "PROLOG_COMMAND_NAME = \"load_classical_b_from_list_of_facts\"", "var_name": "PROLOG_COMMAND_NAME"}, {"original_string": "private NodeIdAssignment nodeIdMapping;", "modifier": "private", "type": "NodeIdAssignment", "declarator": "nodeIdMapping", "var_name": "nodeIdMapping"}, {"original_string": "private final RecursiveMachineLoader rml;", "modifier": "private final", "type": "RecursiveMachineLoader", "declarator": "rml", "var_name": "rml"}, {"original_string": "private final File mainMachine;", "modifier": "private final", "type": "File", "declarator": "mainMachine", "var_name": "mainMachine"}], "methods": [{"identifier": "LoadBProjectCommand", "parameters": "(final RecursiveMachineLoader rml, File f)", "modifiers": "public", "return": "", "signature": " LoadBProjectCommand(final RecursiveMachineLoader rml, File f)", "full_signature": "public  LoadBProjectCommand(final RecursiveMachineLoader rml, File f)", "class_method_signature": "LoadBProjectCommand.LoadBProjectCommand(final RecursiveMachineLoader rml, File f)", "testcase": false, "constructor": true}, {"identifier": "writeCommand", "parameters": "(final IPrologTermOutput pto)", "modifiers": "@Override public", "return": "void", "signature": "void writeCommand(final IPrologTermOutput pto)", "full_signature": "@Override public void writeCommand(final IPrologTermOutput pto)", "class_method_signature": "LoadBProjectCommand.writeCommand(final IPrologTermOutput pto)", "testcase": false, "constructor": false}, {"identifier": "processResult", "parameters": "(final ISimplifiedROMap<String, PrologTerm> bindings)", "modifiers": "@Override public", "return": "void", "signature": "void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "full_signature": "@Override public void processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "class_method_signature": "LoadBProjectCommand.processResult(final ISimplifiedROMap<String, PrologTerm> bindings)", "testcase": false, "constructor": false}, {"identifier": "printLoadTerm", "parameters": "(IPrologTermOutput pto)", "modifiers": "private", "return": "void", "signature": "void printLoadTerm(IPrologTermOutput pto)", "full_signature": "private void printLoadTerm(IPrologTermOutput pto)", "class_method_signature": "LoadBProjectCommand.printLoadTerm(IPrologTermOutput pto)", "testcase": false, "constructor": false}, {"identifier": "getNodeIdMapping", "parameters": "()", "modifiers": "public", "return": "NodeIdAssignment", "signature": "NodeIdAssignment getNodeIdMapping()", "full_signature": "public NodeIdAssignment getNodeIdMapping()", "class_method_signature": "LoadBProjectCommand.getNodeIdMapping()", "testcase": false, "constructor": false}], "file": "de.prob2.kernel/src/main/java/de/prob/animator/command/LoadBProjectCommand.java"}, "focal_method": {"identifier": "writeCommand", "parameters": "(final IPrologTermOutput pto)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void writeCommand(final IPrologTermOutput pto) {\n\t\tpto.openTerm(PROLOG_COMMAND_NAME);\n\t\tpto.printAtom(mainMachine.getAbsolutePath());\n\t\tpto.openList();\n\t\tprintLoadTerm(pto);\n\t\tpto.closeList();\n\t\tpto.closeTerm();\n\t}", "signature": "void writeCommand(final IPrologTermOutput pto)", "full_signature": "@Override public void writeCommand(final IPrologTermOutput pto)", "class_method_signature": "LoadBProjectCommand.writeCommand(final IPrologTermOutput pto)", "testcase": false, "constructor": false, "invocations": ["openTerm", "printAtom", "getAbsolutePath", "openList", "printLoadTerm", "closeList", "closeTerm"]}, "repository": {"repo_id": 5495723, "url": "https://github.com/bendisposto/prob2", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 11, "size": 32880, "license": "licensed"}}