{"test_class": {"identifier": "DefaultClassInjectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DefaultClassInjector defaultClassInjector;", "modifier": "", "type": "DefaultClassInjector", "declarator": "defaultClassInjector", "var_name": "defaultClassInjector"}, {"original_string": "@Mock\n    TypeDeterminator typeDeterminator;", "modifier": "@Mock", "type": "TypeDeterminator", "declarator": "typeDeterminator", "var_name": "typeDeterminator"}, {"original_string": "@Mock\n    TypeConfig typeConfig;", "modifier": "@Mock", "type": "TypeConfig", "declarator": "typeConfig", "var_name": "typeConfig"}, {"original_string": "@Mock\n    TypeContainer typeContainer;", "modifier": "@Mock", "type": "TypeContainer", "declarator": "typeContainer", "var_name": "typeContainer"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    InjectionSet injectionSet;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)", "type": "InjectionSet", "declarator": "injectionSet", "var_name": "injectionSet"}, {"original_string": "Map<String, Class<?>> classes;", "modifier": "", "type": "Map<String, Class<?>>", "declarator": "classes", "var_name": "classes"}, {"original_string": "Map<String, Class<?>[]> inheritanceTree;", "modifier": "", "type": "Map<String, Class<?>[]>", "declarator": "inheritanceTree", "var_name": "inheritanceTree"}, {"original_string": "ClassLoader classLoader;", "modifier": "", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}], "file": "core/src/test/java/com/github/jsr330/instance/DefaultClassInjectorTest.java"}, "test_case": {"identifier": "injectStaticMembers_NoClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void injectStaticMembers_NoClasses() {\n        defaultClassInjector.injectStaticMembers(classes, inheritanceTree, classLoader);\n        \n        verifyZeroInteractions(typeConfig, typeDeterminator);\n    }", "signature": "void injectStaticMembers_NoClasses()", "full_signature": "@Test public void injectStaticMembers_NoClasses()", "class_method_signature": "DefaultClassInjectorTest.injectStaticMembers_NoClasses()", "testcase": true, "constructor": false, "invocations": ["injectStaticMembers", "verifyZeroInteractions"]}, "focal_class": {"identifier": "DefaultClassInjector", "superclass": "", "interfaces": "implements ClassInjector", "fields": [{"original_string": "private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[] {};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "EMPTY_CLASS_ARRAY = new Class<?>[] {}", "var_name": "EMPTY_CLASS_ARRAY"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DefaultClassInjector.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DefaultClassInjector.class)", "var_name": "LOGGER"}, {"original_string": "protected Map<String, Provider<?>> providers = new TreeMap<String, Provider<?>>();", "modifier": "protected", "type": "Map<String, Provider<?>>", "declarator": "providers = new TreeMap<String, Provider<?>>()", "var_name": "providers"}, {"original_string": "protected Map<String, Object> singletons = new TreeMap<String, Object>();", "modifier": "protected", "type": "Map<String, Object>", "declarator": "singletons = new TreeMap<String, Object>()", "var_name": "singletons"}, {"original_string": "protected TypeDeterminator typeDeterminator = new DefaultTypeDeterminator();", "modifier": "protected", "type": "TypeDeterminator", "declarator": "typeDeterminator = new DefaultTypeDeterminator()", "var_name": "typeDeterminator"}, {"original_string": "protected Map<String, TypeContainer> types = new TreeMap<String, TypeContainer>();", "modifier": "protected", "type": "Map<String, TypeContainer>", "declarator": "types = new TreeMap<String, TypeContainer>()", "var_name": "types"}, {"original_string": "protected TypeConfig config;", "modifier": "protected", "type": "TypeConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "DefaultClassInjector", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultClassInjector()", "full_signature": "public  DefaultClassInjector()", "class_method_signature": "DefaultClassInjector.DefaultClassInjector()", "testcase": false, "constructor": true}, {"identifier": "DefaultClassInjector", "parameters": "(TypeConfig config)", "modifiers": "public", "return": "", "signature": " DefaultClassInjector(TypeConfig config)", "full_signature": "public  DefaultClassInjector(TypeConfig config)", "class_method_signature": "DefaultClassInjector.DefaultClassInjector(TypeConfig config)", "testcase": false, "constructor": true}, {"identifier": "DefaultClassInjector", "parameters": "(TypeDeterminator typeDeterminator)", "modifiers": "public", "return": "", "signature": " DefaultClassInjector(TypeDeterminator typeDeterminator)", "full_signature": "public  DefaultClassInjector(TypeDeterminator typeDeterminator)", "class_method_signature": "DefaultClassInjector.DefaultClassInjector(TypeDeterminator typeDeterminator)", "testcase": false, "constructor": true}, {"identifier": "DefaultClassInjector", "parameters": "(TypeConfig config, TypeDeterminator typeDeterminator)", "modifiers": "public", "return": "", "signature": " DefaultClassInjector(TypeConfig config, TypeDeterminator typeDeterminator)", "full_signature": "public  DefaultClassInjector(TypeConfig config, TypeDeterminator typeDeterminator)", "class_method_signature": "DefaultClassInjector.DefaultClassInjector(TypeConfig config, TypeDeterminator typeDeterminator)", "testcase": false, "constructor": true}, {"identifier": "setTypeConfig", "parameters": "(TypeConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void setTypeConfig(TypeConfig config)", "full_signature": "@Override public void setTypeConfig(TypeConfig config)", "class_method_signature": "DefaultClassInjector.setTypeConfig(TypeConfig config)", "testcase": false, "constructor": false}, {"identifier": "injectStaticMembers", "parameters": "(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void injectStaticMembers(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void injectStaticMembers(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.injectStaticMembers(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "instance", "parameters": "(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader, Class<?>[] generics, Annotation qualifier)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T instance(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader, Class<?>[] generics, Annotation qualifier)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T instance(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader, Class<?>[] generics, Annotation qualifier)", "class_method_signature": "DefaultClassInjector.instance(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader, Class<?>[] generics, Annotation qualifier)", "testcase": false, "constructor": false}, {"identifier": "generateTypeContainer", "parameters": "(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "modifiers": "protected", "return": "TypeContainer", "signature": "TypeContainer generateTypeContainer(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "full_signature": "protected TypeContainer generateTypeContainer(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.generateTypeContainer(Class<T> type, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "injectTypeContainer", "parameters": "(TypeContainer typeContainer, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "protected", "return": "void", "signature": "void injectTypeContainer(TypeContainer typeContainer, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "protected void injectTypeContainer(TypeContainer typeContainer, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.injectTypeContainer(TypeContainer typeContainer, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "injectStaticFields", "parameters": "(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "protected", "return": "void", "signature": "void injectStaticFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "protected void injectStaticFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.injectStaticFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "injectFields", "parameters": "(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "protected", "return": "void", "signature": "void injectFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "protected void injectFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.injectFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "injectFields", "parameters": "(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "void", "signature": "void injectFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "full_signature": "@SuppressWarnings(\"unchecked\") protected void injectFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "class_method_signature": "DefaultClassInjector.injectFields(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "testcase": false, "constructor": false}, {"identifier": "injectStaticMethods", "parameters": "(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "protected", "return": "void", "signature": "void injectStaticMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "protected void injectStaticMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.injectStaticMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "injectMethods", "parameters": "(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "protected", "return": "void", "signature": "void injectMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "protected void injectMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.injectMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "injectMethods", "parameters": "(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "modifiers": "protected", "return": "void", "signature": "void injectMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "full_signature": "protected void injectMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "class_method_signature": "DefaultClassInjector.injectMethods(InjectionSet set, Object inst, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader,\n            boolean onlyStatic)", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "(Method method, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "protected", "return": "Object[]", "signature": "Object[] getArguments(Method method, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "protected Object[] getArguments(Method method, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.getArguments(Method method, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "(Constructor<?> ctor, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "protected", "return": "Object[]", "signature": "Object[] getArguments(Constructor<?> ctor, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "protected Object[] getArguments(Constructor<?> ctor, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.getArguments(Constructor<?> ctor, Map<String, Class<? extends T>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getArguments", "parameters": "(Map<String, Class<? extends T>[]> inheritanceTree, Class<?>[] parameters, Type[] generics, Annotation[][] annotations,\n            ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Object[]", "signature": "Object[] getArguments(Map<String, Class<? extends T>[]> inheritanceTree, Class<?>[] parameters, Type[] generics, Annotation[][] annotations,\n            ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") protected Object[] getArguments(Map<String, Class<? extends T>[]> inheritanceTree, Class<?>[] parameters, Type[] generics, Annotation[][] annotations,\n            ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.getArguments(Map<String, Class<? extends T>[]> inheritanceTree, Class<?>[] parameters, Type[] generics, Annotation[][] annotations,\n            ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getQualifier", "parameters": "(Annotation[] annotations)", "modifiers": "protected", "return": "Annotation", "signature": "Annotation getQualifier(Annotation[] annotations)", "full_signature": "protected Annotation getQualifier(Annotation[] annotations)", "class_method_signature": "DefaultClassInjector.getQualifier(Annotation[] annotations)", "testcase": false, "constructor": false}, {"identifier": "getInjectableConstructor", "parameters": "(Class<?> type)", "modifiers": "protected", "return": "Constructor<?>", "signature": "Constructor<?> getInjectableConstructor(Class<?> type)", "full_signature": "protected Constructor<?> getInjectableConstructor(Class<?> type)", "class_method_signature": "DefaultClassInjector.getInjectableConstructor(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getDefaultConstructor", "parameters": "(Class<?> type)", "modifiers": "protected", "return": "Constructor<?>", "signature": "Constructor<?> getDefaultConstructor(Class<?> type)", "full_signature": "protected Constructor<?> getDefaultConstructor(Class<?> type)", "class_method_signature": "DefaultClassInjector.getDefaultConstructor(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getGenericTypes", "parameters": "(ParameterizedType type)", "modifiers": "protected", "return": "Class<?>[]", "signature": "Class<?>[] getGenericTypes(ParameterizedType type)", "full_signature": "protected Class<?>[] getGenericTypes(ParameterizedType type)", "class_method_signature": "DefaultClassInjector.getGenericTypes(ParameterizedType type)", "testcase": false, "constructor": false}, {"identifier": "getTypeDeterminator", "parameters": "()", "modifiers": "public", "return": "TypeDeterminator", "signature": "TypeDeterminator getTypeDeterminator()", "full_signature": "public TypeDeterminator getTypeDeterminator()", "class_method_signature": "DefaultClassInjector.getTypeDeterminator()", "testcase": false, "constructor": false}, {"identifier": "setTypeDeterminator", "parameters": "(TypeDeterminator typeDeterminator)", "modifiers": "public", "return": "void", "signature": "void setTypeDeterminator(TypeDeterminator typeDeterminator)", "full_signature": "public void setTypeDeterminator(TypeDeterminator typeDeterminator)", "class_method_signature": "DefaultClassInjector.setTypeDeterminator(TypeDeterminator typeDeterminator)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/jsr330/instance/DefaultClassInjector.java"}, "focal_method": {"identifier": "injectStaticMembers", "parameters": "(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void injectStaticMembers(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader) {\n        TypeContainer typeContainer;\n        Map<String, Class<? extends Object>[]> castedInheritanceTree = new HashMap<String, Class<? extends Object>[]>(inheritanceTree);\n        \n        for (Map.Entry<String, Class<?>> type : classes.entrySet()) {\n            typeContainer = generateTypeContainer((Class<Object>) type.getValue(), castedInheritanceTree, null, classLoader);\n            for (InjectionSet set : typeContainer.getInjectionSets()) {\n                injectStaticFields(set, (Object) null, castedInheritanceTree, classLoader);\n                injectStaticMethods(set, (Object) null, castedInheritanceTree, classLoader);\n            }\n        }\n    }", "signature": "void injectStaticMembers(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void injectStaticMembers(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "class_method_signature": "DefaultClassInjector.injectStaticMembers(Map<String, Class<?>> classes, Map<String, Class<?>[]> inheritanceTree, ClassLoader classLoader)", "testcase": false, "constructor": false, "invocations": ["entrySet", "generateTypeContainer", "getValue", "getInjectionSets", "injectStaticFields", "injectStaticMethods"]}, "repository": {"repo_id": 4654729, "url": "https://github.com/rstiller/JSR-330", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 10, "size": 747, "license": "licensed"}}