{"test_class": {"identifier": "LoessInterpolatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "stl-decomp-4j/src/test/java/com/github/servicenow/ds/stats/stl/LoessInterpolatorTest.java"}, "test_case": {"identifier": "smoothingWithLargeWidthGivesLinearRegressionFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void smoothingWithLargeWidthGivesLinearRegressionFit() {\n\n\t\t// 100 point sample of linear data plus noise generated in Python with\n\t\t//\n\t\t// x = np.arange(0, 100)\n\t\t// y = 10.0 * x + 100.0*np.random.randn(100)\n\n\t\tfinal double[] scatter100 = new double[] { 45.0641826945, 69.6998783993, 9.81903951235, -75.4079441854,\n\t\t\t\t53.7430205615, 12.1359388898, 84.972441255, 194.467452805, 182.276035711, 128.161856616, 147.021732433,\n\t\t\t\t-40.6773185264, 41.1575417261, 111.04115761, 75.0179056538, 278.946359666, 93.3453251262,\n\t\t\t\t103.779785975, 252.750915429, 252.636103208, 457.859165335, 143.021758047, 79.343240193, 280.969547174,\n\t\t\t\t35.650257308, 157.656673765, 29.6984404613, 141.980264706, 263.465758806, 346.309482972, 330.044915761,\n\t\t\t\t135.019120067, 211.801092316, 198.186646037, 206.088498967, 510.89412974, 332.076915483, 530.524264511,\n\t\t\t\t298.21175481, 234.317252809, 573.836352739, 382.708235416, 340.090947574, 452.475239395, 576.134135134,\n\t\t\t\t536.703405146, 545.033194307, 479.525083559, 368.551750848, 588.429801268, 528.672000843,\n\t\t\t\t507.301073925, 432.749370682, 600.239380863, 567.328853536, 481.544306962, 510.42118889, 456.519971302,\n\t\t\t\t565.839651322, 510.505759788, 503.2514057, 491.279917041, 642.319449309, 573.019058995, 574.709858012,\n\t\t\t\t597.316826688, 602.361341448, 622.312708681, 506.669245531, 640.120714982, 699.793133288,\n\t\t\t\t672.969830555, 656.645808774, 901.375994679, 573.903581507, 906.472771298, 719.604429516,\n\t\t\t\t759.262994619, 786.970584025, 717.422383977, 899.007418786, 745.516032607, 748.049043698, 876.99080793,\n\t\t\t\t810.985707949, 888.762045358, 947.030030816, 1007.48402395, 830.251382179, 921.078927761,\n\t\t\t\t810.212273661, 926.740829016, 787.965498372, 944.230542154, 808.215987256, 1044.74526488,\n\t\t\t\t866.568085766, 1068.6479395, 776.566771785, 1190.32090194 };\n\n\t\t// Linear fit from Python\n\n\t\tfinal double testSlope = 9.9564197212156671;\n\t\tfinal double testIntercept = -12.894457726954045;\n\n\t\t// Choose a loess width sufficiently large that tri-cube weights for all of the data will be 1.0.\n\n\t\tLoessInterpolator loess = new LoessInterpolator.Builder().setWidth(1000000).interpolate(scatter100);\n\n\t\tdouble x = -5.0;\n\t\twhile (x < 105.0) {\n\t\t\tDouble y = loess.smoothOnePoint(x, 0, scatter100.length - 1);\n\t\t\tassertNotNull(y);\n\t\t\tassertEquals(\"Fit is on regression line\", testSlope * x + testIntercept, y, 1.0e-8);\n\t\t\tx += 0.5;\n\t\t}\n\t}", "signature": "void smoothingWithLargeWidthGivesLinearRegressionFit()", "full_signature": "@Test public void smoothingWithLargeWidthGivesLinearRegressionFit()", "class_method_signature": "LoessInterpolatorTest.smoothingWithLargeWidthGivesLinearRegressionFit()", "testcase": true, "constructor": false, "invocations": ["interpolate", "setWidth", "smoothOnePoint", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "LoessInterpolator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int fWidth;", "modifier": "private final", "type": "int", "declarator": "fWidth", "var_name": "fWidth"}, {"original_string": "private final double[] fExternalWeights;", "modifier": "private final", "type": "double[]", "declarator": "fExternalWeights", "var_name": "fExternalWeights"}, {"original_string": "final double[] fData;", "modifier": "final", "type": "double[]", "declarator": "fData", "var_name": "fData"}, {"original_string": "final double[] fWeights;", "modifier": "final", "type": "double[]", "declarator": "fWeights", "var_name": "fWeights"}], "methods": [{"identifier": "smoothOnePoint", "parameters": "(final double x, final int left, final int right)", "modifiers": "", "return": "Double", "signature": "Double smoothOnePoint(final double x, final int left, final int right)", "full_signature": " Double smoothOnePoint(final double x, final int left, final int right)", "class_method_signature": "LoessInterpolator.smoothOnePoint(final double x, final int left, final int right)", "testcase": false, "constructor": false}, {"identifier": "updateWeights", "parameters": "(double x, int left, int right)", "modifiers": "abstract", "return": "void", "signature": "void updateWeights(double x, int left, int right)", "full_signature": "abstract void updateWeights(double x, int left, int right)", "class_method_signature": "LoessInterpolator.updateWeights(double x, int left, int right)", "testcase": false, "constructor": false}, {"identifier": "computeNeighborhoodWeights", "parameters": "(double x, int left, int right)", "modifiers": "private", "return": "State", "signature": "State computeNeighborhoodWeights(double x, int left, int right)", "full_signature": "private State computeNeighborhoodWeights(double x, int left, int right)", "class_method_signature": "LoessInterpolator.computeNeighborhoodWeights(double x, int left, int right)", "testcase": false, "constructor": false}, {"identifier": "LoessInterpolator", "parameters": "(int width, double[] data, double[] externalWeights)", "modifiers": "", "return": "", "signature": " LoessInterpolator(int width, double[] data, double[] externalWeights)", "full_signature": "  LoessInterpolator(int width, double[] data, double[] externalWeights)", "class_method_signature": "LoessInterpolator.LoessInterpolator(int width, double[] data, double[] externalWeights)", "testcase": false, "constructor": true}], "file": "stl-decomp-4j/src/main/java/com/github/servicenow/ds/stats/stl/LoessInterpolator.java"}, "focal_method": {"identifier": "smoothOnePoint", "parameters": "(final double x, final int left, final int right)", "modifiers": "", "return": "Double", "body": "Double smoothOnePoint(final double x, final int left, final int right) {\n\n\t\t// Ordinarily, one doesn't do linear regression one x-value at a time, but LOESS does since\n\t\t// each x-value will typically have a different window. As a result, the weighted linear regression\n\t\t// is recast as a linear operation on the input data, weighted by this.fWeights.\n\n\t\tState state = computeNeighborhoodWeights(x, left, right);\n\n\t\tif (state == State.WEIGHTS_FAILED)\n\t\t\treturn null;\n\n\t\tif (state == State.LINEAR_OK)\n\t\t\tupdateWeights(x, left, right);\n\n\t\tdouble ys = 0.0;\n\t\tfor (int i = left; i <= right; ++i)\n\t\t\tys += fWeights[i] * fData[i];\n\n\t\treturn ys;\n\t}", "signature": "Double smoothOnePoint(final double x, final int left, final int right)", "full_signature": " Double smoothOnePoint(final double x, final int left, final int right)", "class_method_signature": "LoessInterpolator.smoothOnePoint(final double x, final int left, final int right)", "testcase": false, "constructor": false, "invocations": ["computeNeighborhoodWeights", "updateWeights"]}, "repository": {"repo_id": 80868140, "url": "https://github.com/ServiceNow/stl-decomp-4j", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 79, "size": 3949, "license": "licensed"}}