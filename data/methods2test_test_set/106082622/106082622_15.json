{"test_class": {"identifier": "KafkaOperationsFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaOperationsFactoryTest.java"}, "test_case": {"identifier": "smokeTestNonSslOperationsClient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void smokeTestNonSslOperationsClient() {\n        // Create dependencies.\n        final SecretManager secretManager = new SecretManager(\"notused\");\n        final KafkaClientConfigUtil configUtil = new KafkaClientConfigUtil(\"Not-Used\", \"Test-Prefix\");\n        final KafkaAdminFactory kafkaAdminFactory = new KafkaAdminFactory(configUtil);\n        final KafkaOperationsFactory operationsFactory = new KafkaOperationsFactory(secretManager, kafkaAdminFactory);\n\n        // Create cluster model.\n        final Cluster cluster = new Cluster();\n        cluster.setBrokerHosts(sharedKafkaTestResource.getKafkaConnectString());\n        cluster.setSslEnabled(false);\n\n        // Create instance\n        try (final KafkaOperations kafkaOperations = operationsFactory.create(cluster, 1L)) {\n\n            // Call method to validate things work as expected\n            final NodeList nodeList = kafkaOperations.getClusterNodes();\n            assertNotNull(\"Should have a non-null result\", nodeList);\n            assertFalse(\"Should have non-empty node\", nodeList.getNodes().isEmpty());\n        }\n    }", "signature": "void smokeTestNonSslOperationsClient()", "full_signature": "@Test public void smokeTestNonSslOperationsClient()", "class_method_signature": "KafkaOperationsFactoryTest.smokeTestNonSslOperationsClient()", "testcase": true, "constructor": false, "invocations": ["setBrokerHosts", "getKafkaConnectString", "setSslEnabled", "create", "getClusterNodes", "assertNotNull", "assertFalse", "isEmpty", "getNodes"]}, "focal_class": {"identifier": "KafkaOperationsFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String consumerIdPrefix = \"KafkaWebView-Operation-UserId\";", "modifier": "private static final", "type": "String", "declarator": "consumerIdPrefix = \"KafkaWebView-Operation-UserId\"", "var_name": "consumerIdPrefix"}, {"original_string": "private final SecretManager secretManager;", "modifier": "private final", "type": "SecretManager", "declarator": "secretManager", "var_name": "secretManager"}, {"original_string": "private final KafkaAdminFactory kafkaAdminFactory;", "modifier": "private final", "type": "KafkaAdminFactory", "declarator": "kafkaAdminFactory", "var_name": "kafkaAdminFactory"}], "methods": [{"identifier": "KafkaOperationsFactory", "parameters": "(final SecretManager secretManager, final KafkaAdminFactory kafkaAdminFactory)", "modifiers": "public", "return": "", "signature": " KafkaOperationsFactory(final SecretManager secretManager, final KafkaAdminFactory kafkaAdminFactory)", "full_signature": "public  KafkaOperationsFactory(final SecretManager secretManager, final KafkaAdminFactory kafkaAdminFactory)", "class_method_signature": "KafkaOperationsFactory.KafkaOperationsFactory(final SecretManager secretManager, final KafkaAdminFactory kafkaAdminFactory)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final Cluster cluster, final long userId)", "modifiers": "public", "return": "KafkaOperations", "signature": "KafkaOperations create(final Cluster cluster, final long userId)", "full_signature": "public KafkaOperations create(final Cluster cluster, final long userId)", "class_method_signature": "KafkaOperationsFactory.create(final Cluster cluster, final long userId)", "testcase": false, "constructor": false}, {"identifier": "getConsumerConfig", "parameters": "(final Cluster cluster, final long userId)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getConsumerConfig(final Cluster cluster, final long userId)", "full_signature": "public Map<String, Object> getConsumerConfig(final Cluster cluster, final long userId)", "class_method_signature": "KafkaOperationsFactory.getConsumerConfig(final Cluster cluster, final long userId)", "testcase": false, "constructor": false}, {"identifier": "getClientId", "parameters": "(final long userId)", "modifiers": "private", "return": "String", "signature": "String getClientId(final long userId)", "full_signature": "private String getClientId(final long userId)", "class_method_signature": "KafkaOperationsFactory.getClientId(final long userId)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaOperationsFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(final Cluster cluster, final long userId)", "modifiers": "public", "return": "KafkaOperations", "body": "public KafkaOperations create(final Cluster cluster, final long userId) {\n        final String clientId = getClientId(userId);\n\n        // Create new Operational Client\n        final ClusterConfig clusterConfig = ClusterConfig.newBuilder(cluster, secretManager).build();\n        final AdminClient adminClient = kafkaAdminFactory.create(clusterConfig, clientId);\n        final KafkaConsumer<String, String> kafkaConsumer = kafkaAdminFactory.createConsumer(clusterConfig, clientId);\n\n        return new KafkaOperations(adminClient, kafkaConsumer);\n    }", "signature": "KafkaOperations create(final Cluster cluster, final long userId)", "full_signature": "public KafkaOperations create(final Cluster cluster, final long userId)", "class_method_signature": "KafkaOperationsFactory.create(final Cluster cluster, final long userId)", "testcase": false, "constructor": false, "invocations": ["getClientId", "build", "newBuilder", "create", "createConsumer"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}