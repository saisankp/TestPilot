{"test_class": {"identifier": "ValidateFactCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private KieSession kieSession;", "modifier": "@Mock\n    private", "type": "KieSession", "declarator": "kieSession", "var_name": "kieSession"}, {"original_string": "@Mock\n    private ScenarioResult scenarioResult;", "modifier": "@Mock\n    private", "type": "ScenarioResult", "declarator": "scenarioResult", "var_name": "scenarioResult"}, {"original_string": "@Mock\n    private FactMappingValue factMappingValue;", "modifier": "@Mock\n    private", "type": "FactMappingValue", "declarator": "factMappingValue", "var_name": "factMappingValue"}, {"original_string": "@Mock\n    private RegistryContext registryContext;", "modifier": "@Mock\n    private", "type": "RegistryContext", "declarator": "registryContext", "var_name": "registryContext"}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/fluent/ValidateFactCommandTest.java"}, "test_case": {"identifier": "executeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void executeTest() {\n        when(registryContext.lookup(KieSession.class)).thenReturn(kieSession);\n        Function<Object, ValueWrapper> alwaysMatchFunction = ValueWrapper::of;\n\n        ValidateFactCommand validateFactCommand = new ValidateFactCommand(asList(new FactCheckerHandle(String.class, alwaysMatchFunction, scenarioResult)));\n\n        when(kieSession.getObjects(any(ObjectFilter.class))).thenReturn(Collections.singleton(null));\n        validateFactCommand.execute(registryContext);\n        verify(scenarioResult, times(1)).setResult(anyBoolean());\n\n        reset(scenarioResult);\n\n        when(kieSession.getObjects(any(ObjectFilter.class))).thenReturn(Collections.emptyList());\n        when(scenarioResult.getFactMappingValue()).thenReturn(factMappingValue);\n        when(factMappingValue.getStatus()).thenReturn(FactMappingValueStatus.FAILED_WITH_EXCEPTION);\n        validateFactCommand.execute(registryContext);\n        verify(scenarioResult, times(0)).setResult(anyBoolean());\n    }", "signature": "void executeTest()", "full_signature": "@Test public void executeTest()", "class_method_signature": "ValidateFactCommandTest.executeTest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "lookup", "asList", "thenReturn", "when", "getObjects", "any", "singleton", "execute", "setResult", "verify", "times", "anyBoolean", "reset", "thenReturn", "when", "getObjects", "any", "emptyList", "thenReturn", "when", "getFactMappingValue", "thenReturn", "when", "getStatus", "execute", "setResult", "verify", "times", "anyBoolean"]}, "focal_class": {"identifier": "ValidateFactCommand", "superclass": "", "interfaces": "implements ExecutableCommand<Void>", "fields": [{"original_string": "private final List<FactCheckerHandle> factToCheck;", "modifier": "private final", "type": "List<FactCheckerHandle>", "declarator": "factToCheck", "var_name": "factToCheck"}], "methods": [{"identifier": "ValidateFactCommand", "parameters": "(List<FactCheckerHandle> factToCheck)", "modifiers": "public", "return": "", "signature": " ValidateFactCommand(List<FactCheckerHandle> factToCheck)", "full_signature": "public  ValidateFactCommand(List<FactCheckerHandle> factToCheck)", "class_method_signature": "ValidateFactCommand.ValidateFactCommand(List<FactCheckerHandle> factToCheck)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Context context)", "modifiers": "@Override public", "return": "Void", "signature": "Void execute(Context context)", "full_signature": "@Override public Void execute(Context context)", "class_method_signature": "ValidateFactCommand.execute(Context context)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/fluent/ValidateFactCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(Context context)", "modifiers": "@Override public", "return": "Void", "body": "@Override\n    public Void execute(Context context) {\n        KieSession ksession = ((RegistryContext) context).lookup(KieSession.class);\n        Collection<?> objects = ksession.getObjects(new ConditionFilter(factToCheck));\n        if (objects.size() > 0) {\n            factToCheck.forEach(fact -> fact.getScenarioResult().setResult(true));\n        } else {\n            factToCheck.forEach(fact -> fact.getScenarioResult().getFactMappingValue().setExceptionMessage(\"There is no instance which satisfies the expected conditions\"));\n        }\n        return null;\n    }", "signature": "Void execute(Context context)", "full_signature": "@Override public Void execute(Context context)", "class_method_signature": "ValidateFactCommand.execute(Context context)", "testcase": false, "constructor": false, "invocations": ["lookup", "getObjects", "size", "forEach", "setResult", "getScenarioResult", "forEach", "setExceptionMessage", "getFactMappingValue", "getScenarioResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}