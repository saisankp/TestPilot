{"test_class": {"identifier": "DefaultDubboConfigBinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private DubboConfigBinder dubboConfigBinder;", "modifier": "@Autowired\n    private", "type": "DubboConfigBinder", "declarator": "dubboConfigBinder", "var_name": "dubboConfigBinder"}], "file": "dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinderTest.java"}, "test_case": {"identifier": "testBinder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBinder() {\n\n        ApplicationConfig applicationConfig = new ApplicationConfig();\n        dubboConfigBinder.bind(\"dubbo.application\", applicationConfig);\n        Assertions.assertEquals(\"hello\", applicationConfig.getName());\n        Assertions.assertEquals(\"world\", applicationConfig.getOwner());\n\n        RegistryConfig registryConfig = new RegistryConfig();\n        dubboConfigBinder.bind(\"dubbo.registry\", registryConfig);\n        Assertions.assertEquals(\"10.20.153.17\", registryConfig.getAddress());\n\n        ProtocolConfig protocolConfig = new ProtocolConfig();\n        dubboConfigBinder.bind(\"dubbo.protocol\", protocolConfig);\n        Assertions.assertEquals(Integer.valueOf(20881), protocolConfig.getPort());\n\n    }", "signature": "void testBinder()", "full_signature": "@Test public void testBinder()", "class_method_signature": "DefaultDubboConfigBinderTest.testBinder()", "testcase": true, "constructor": false, "invocations": ["bind", "assertEquals", "getName", "assertEquals", "getOwner", "bind", "assertEquals", "getAddress", "bind", "assertEquals", "valueOf", "getPort"]}, "focal_class": {"identifier": "DefaultDubboConfigBinder", "superclass": "extends AbstractDubboConfigBinder", "interfaces": "", "fields": [], "methods": [{"identifier": "bind", "parameters": "(String prefix, C dubboConfig)", "modifiers": "@Override public", "return": "void", "signature": "void bind(String prefix, C dubboConfig)", "full_signature": "@Override public void bind(String prefix, C dubboConfig)", "class_method_signature": "DefaultDubboConfigBinder.bind(String prefix, C dubboConfig)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-spring/src/main/java/org/apache/dubbo/config/spring/context/properties/DefaultDubboConfigBinder.java"}, "focal_method": {"identifier": "bind", "parameters": "(String prefix, C dubboConfig)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public <C extends AbstractConfig> void bind(String prefix, C dubboConfig) {\n        DataBinder dataBinder = new DataBinder(dubboConfig);\n        // Set ignored*\n        dataBinder.setIgnoreInvalidFields(isIgnoreInvalidFields());\n        dataBinder.setIgnoreUnknownFields(isIgnoreUnknownFields());\n        // Get properties under specified prefix from PropertySources\n        Map<String, Object> properties = getSubProperties(getPropertySources(), prefix);\n        // Convert Map to MutablePropertyValues\n        MutablePropertyValues propertyValues = new MutablePropertyValues(properties);\n        // Bind\n        dataBinder.bind(propertyValues);\n    }", "signature": "void bind(String prefix, C dubboConfig)", "full_signature": "@Override public void bind(String prefix, C dubboConfig)", "class_method_signature": "DefaultDubboConfigBinder.bind(String prefix, C dubboConfig)", "testcase": false, "constructor": false, "invocations": ["setIgnoreInvalidFields", "isIgnoreInvalidFields", "setIgnoreUnknownFields", "isIgnoreUnknownFields", "getSubProperties", "getPropertySources", "bind"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}