{"test_class": {"identifier": "BoroughParserTest", "superclass": "extends AbstractSpecTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BoroughParserTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BoroughParserTest.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private BoroughParser parser;", "modifier": "@Autowired\n    private", "type": "BoroughParser", "declarator": "parser", "var_name": "parser"}], "file": "geoclient-parser/src/test/java/gov/nyc/doitt/gis/geoclient/parser/regex/BoroughParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse()\n    {\n        testParser(parser, LOGGER);\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "BoroughParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["testParser"]}, "focal_class": {"identifier": "BoroughParser", "superclass": "extends AbstractRegexParser", "interfaces": "", "fields": [{"original_string": "private final Pattern boroughPattern;", "modifier": "private final", "type": "Pattern", "declarator": "boroughPattern", "var_name": "boroughPattern"}, {"original_string": "private final Pattern boroughAndNycPattern;", "modifier": "private final", "type": "Pattern", "declarator": "boroughAndNycPattern", "var_name": "boroughAndNycPattern"}, {"original_string": "private final Pattern boroughAndStatePattern;", "modifier": "private final", "type": "Pattern", "declarator": "boroughAndStatePattern", "var_name": "boroughAndStatePattern"}], "methods": [{"identifier": "BoroughParser", "parameters": "(Set<String> boroughNames)", "modifiers": "public", "return": "", "signature": " BoroughParser(Set<String> boroughNames)", "full_signature": "public  BoroughParser(Set<String> boroughNames)", "class_method_signature": "BoroughParser.BoroughParser(Set<String> boroughNames)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "BoroughParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false}, {"identifier": "buildEndsWithBoroughAndNycPattern", "parameters": "(Set<String> boroughNames)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern buildEndsWithBoroughAndNycPattern(Set<String> boroughNames)", "full_signature": "protected Pattern buildEndsWithBoroughAndNycPattern(Set<String> boroughNames)", "class_method_signature": "BoroughParser.buildEndsWithBoroughAndNycPattern(Set<String> boroughNames)", "testcase": false, "constructor": false}, {"identifier": "buildEndsWithBoroughAndStatePattern", "parameters": "(Set<String> boroughNames)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern buildEndsWithBoroughAndStatePattern(Set<String> boroughNames)", "full_signature": "protected Pattern buildEndsWithBoroughAndStatePattern(Set<String> boroughNames)", "class_method_signature": "BoroughParser.buildEndsWithBoroughAndStatePattern(Set<String> boroughNames)", "testcase": false, "constructor": false}, {"identifier": "buildEndsWithBoroughPattern", "parameters": "(Set<String> boroughNames)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern buildEndsWithBoroughPattern(Set<String> boroughNames)", "full_signature": "protected Pattern buildEndsWithBoroughPattern(Set<String> boroughNames)", "class_method_signature": "BoroughParser.buildEndsWithBoroughPattern(Set<String> boroughNames)", "testcase": false, "constructor": false}, {"identifier": "parseBoroughAndNyc", "parameters": "(ParseContext parseContext)", "modifiers": "private", "return": "boolean", "signature": "boolean parseBoroughAndNyc(ParseContext parseContext)", "full_signature": "private boolean parseBoroughAndNyc(ParseContext parseContext)", "class_method_signature": "BoroughParser.parseBoroughAndNyc(ParseContext parseContext)", "testcase": false, "constructor": false}, {"identifier": "parseBoroughAndState", "parameters": "(ParseContext parseContext)", "modifiers": "private", "return": "boolean", "signature": "boolean parseBoroughAndState(ParseContext parseContext)", "full_signature": "private boolean parseBoroughAndState(ParseContext parseContext)", "class_method_signature": "BoroughParser.parseBoroughAndState(ParseContext parseContext)", "testcase": false, "constructor": false}, {"identifier": "parseBorough", "parameters": "(ParseContext parseContext)", "modifiers": "private", "return": "boolean", "signature": "boolean parseBorough(ParseContext parseContext)", "full_signature": "private boolean parseBorough(ParseContext parseContext)", "class_method_signature": "BoroughParser.parseBorough(ParseContext parseContext)", "testcase": false, "constructor": false}], "file": "geoclient-parser/src/main/java/gov/nyc/doitt/gis/geoclient/parser/regex/BoroughParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(ParseContext parseContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void parse(ParseContext parseContext)\n    {\n        boolean found = parseBoroughAndNyc(parseContext);\n        if(!found)\n        {\n            found = parseBoroughAndState(parseContext);\n        }\n        if(!found)\n        {\n            parseBorough(parseContext);\n        }\n    }", "signature": "void parse(ParseContext parseContext)", "full_signature": "@Override public void parse(ParseContext parseContext)", "class_method_signature": "BoroughParser.parse(ParseContext parseContext)", "testcase": false, "constructor": false, "invocations": ["parseBoroughAndNyc", "parseBoroughAndState", "parseBorough"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}