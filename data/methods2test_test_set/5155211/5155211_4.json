{"test_class": {"identifier": "RoboStrokeTest", "superclass": "extends TestProperties", "interfaces": "", "fields": [{"original_string": "private TestRoboStroke test;", "modifier": "private", "type": "TestRoboStroke", "declarator": "test", "var_name": "test"}], "file": "common/src/test/java/org/nargila/robostroke/RoboStrokeTest.java"}, "test_case": {"identifier": "testSplitRowingContinuousMode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSplitRowingContinuousMode() throws Exception {\n\t\t\n\t\t\n\t\ttest = new TestRoboStroke(v(\"dataInput\"));\n        \n\t\tfinal int strokesVal = v(\"strokes\", Integer.class);\n\t\t\n\t\tBusEventListener listener = new BusEventListener() {\n\t\t\t\n\t\t\t@SuppressWarnings(\"incomplete-switch\")\n\t\t\t@Override\n\t\t\tpublic void onBusEvent(DataRecord event) {\n\t\t\t\tswitch (event.type) {\n\t\t\t\tcase ROWING_COUNT:\n\t\t\t\t\tif ((Integer)event.data == strokesVal) {\n\t\t\t\t\t\ttest.roboStroke.getParameters().setParam(ParamKeys.PARAM_ROWING_MODE.getId(), RowingSplitMode.AUTO + \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\ttest.bus.addBusListener(listener);\n\t\tDataRecord event;\n\t\t\n\t\ttry {\t\t\t\t\t\t\t\n\t\t\t\n\t\t\tevent = splitRowing(RowingSplitMode.CONTINUOUS, false);\n\t\t\n\t\t} finally {\n\t\t\ttest.bus.removeBusListener(listener);\n\t\t}\n\t\t\n\t\t/* ROWING_STOP 169103868297216 169098851909632 114.224663 36272340992 37000 12 */\n\t\tObject[] data = (Object[]) event.data;\n\t\t\n\t\tfloat distance = (Float)data[1];\n\t\tlong splitTime = (Long) data[2];\n\t\tlong travelTime = (Long) data[3];\n\t\tint strokes = (Integer) data[4];\n\t\t\n\t\tAssert.assertEquals(v(\"splitTime\", Double.class), splitTime / 1000000000.0, 0.5);\n\t\tAssert.assertEquals(v(\"distance\", Double.class), distance, 1);\n\t\tAssert.assertEquals(v(\"travelTime\", Double.class), travelTime / 1000.0, 1);\n\t\tAssert.assertEquals((double)strokesVal, strokes, 1);\n\t\t\n\t}", "signature": "void testSplitRowingContinuousMode()", "full_signature": "@Test public void testSplitRowingContinuousMode()", "class_method_signature": "RoboStrokeTest.testSplitRowingContinuousMode()", "testcase": true, "constructor": false, "invocations": ["v", "v", "setParam", "getParameters", "getId", "addBusListener", "splitRowing", "removeBusListener", "assertEquals", "v", "assertEquals", "v", "assertEquals", "v", "assertEquals"]}, "focal_class": {"identifier": "RoboStroke", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RoboStroke.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RoboStroke.class)", "var_name": "logger"}, {"original_string": "private SensorDataInput dataInput;", "modifier": "private", "type": "SensorDataInput", "declarator": "dataInput", "var_name": "dataInput"}, {"original_string": "private final SimpleLock inputLock = new SimpleLock();", "modifier": "private final", "type": "SimpleLock", "declarator": "inputLock = new SimpleLock()", "var_name": "inputLock"}, {"original_string": "private GravityFilter gravityFilter;", "modifier": "private", "type": "GravityFilter", "declarator": "gravityFilter", "var_name": "gravityFilter"}, {"original_string": "private StrokeRateScanner strokeRateScanner;", "modifier": "private", "type": "StrokeRateScanner", "declarator": "strokeRateScanner", "var_name": "strokeRateScanner"}, {"original_string": "private RowingDetector rowingDetector;", "modifier": "private", "type": "RowingDetector", "declarator": "rowingDetector", "var_name": "rowingDetector"}, {"original_string": "private StrokePowerScanner strokePowerScanner;", "modifier": "private", "type": "StrokePowerScanner", "declarator": "strokePowerScanner", "var_name": "strokePowerScanner"}, {"original_string": "private RollScanner rollScanner;", "modifier": "private", "type": "RollScanner", "declarator": "rollScanner", "var_name": "rollScanner"}, {"original_string": "private SensorDataFilter accelerationFilter;", "modifier": "private", "type": "SensorDataFilter", "declarator": "accelerationFilter", "var_name": "accelerationFilter"}, {"original_string": "private GPSDataFilter gpsFilter;", "modifier": "private", "type": "GPSDataFilter", "declarator": "gpsFilter", "var_name": "gpsFilter"}, {"original_string": "private ErrorListener errorListener;", "modifier": "private", "type": "ErrorListener", "declarator": "errorListener", "var_name": "errorListener"}, {"original_string": "private final RoboStrokeEventBus bus = new RoboStrokeEventBus();", "modifier": "private final", "type": "RoboStrokeEventBus", "declarator": "bus = new RoboStrokeEventBus()", "var_name": "bus"}, {"original_string": "private final ParameterService parameters = new ParameterService(bus);", "modifier": "private final", "type": "ParameterService", "declarator": "parameters = new ParameterService(bus)", "var_name": "parameters"}, {"original_string": "private final SessionRecorder recorder = new SessionRecorder(this);", "modifier": "private final", "type": "SessionRecorder", "declarator": "recorder = new SessionRecorder(this)", "var_name": "recorder"}, {"original_string": "private SessionBroadcaster sessionBroadcaster;", "modifier": "private", "type": "SessionBroadcaster", "declarator": "sessionBroadcaster", "var_name": "sessionBroadcaster"}, {"original_string": "private boolean broadcastOn;", "modifier": "private", "type": "boolean", "declarator": "broadcastOn", "var_name": "broadcastOn"}, {"original_string": "private AxisDataReverseFilter coaxModeOrientationFilter;", "modifier": "private", "type": "AxisDataReverseFilter", "declarator": "coaxModeOrientationFilter", "var_name": "coaxModeOrientationFilter"}, {"original_string": "private AxisDataSwapFilter landscapeAccelFilter;", "modifier": "private", "type": "AxisDataSwapFilter", "declarator": "landscapeAccelFilter", "var_name": "landscapeAccelFilter"}, {"original_string": "private AxisDataSwapFilter landscapeOrientationFilter;", "modifier": "private", "type": "AxisDataSwapFilter", "declarator": "landscapeOrientationFilter", "var_name": "landscapeOrientationFilter"}, {"original_string": "private final BusEventListener sessionParamChangeListener;", "modifier": "private final", "type": "BusEventListener", "declarator": "sessionParamChangeListener", "var_name": "sessionParamChangeListener"}, {"original_string": "private final ParamKeys[] sessionParamList = {\n\t\t\tParamKeys.PARAM_SENSOR_ORIENTATION_REVERSED\n\t};", "modifier": "private final", "type": "ParamKeys[]", "declarator": "sessionParamList = {\n\t\t\tParamKeys.PARAM_SENSOR_ORIENTATION_REVERSED\n\t}", "var_name": "sessionParamList"}], "methods": [{"identifier": "RoboStroke", "parameters": "()", "modifiers": "public", "return": "", "signature": " RoboStroke()", "full_signature": "public  RoboStroke()", "class_method_signature": "RoboStroke.RoboStroke()", "testcase": false, "constructor": true}, {"identifier": "RoboStroke", "parameters": "(DistanceResolver distanceResolver)", "modifiers": "public", "return": "", "signature": " RoboStroke(DistanceResolver distanceResolver)", "full_signature": "public  RoboStroke(DistanceResolver distanceResolver)", "class_method_signature": "RoboStroke.RoboStroke(DistanceResolver distanceResolver)", "testcase": false, "constructor": true}, {"identifier": "RoboStroke", "parameters": "(DistanceResolver distanceResolver, DataSender dataSenderImpl)", "modifiers": "public", "return": "", "signature": " RoboStroke(DistanceResolver distanceResolver, DataSender dataSenderImpl)", "full_signature": "public  RoboStroke(DistanceResolver distanceResolver, DataSender dataSenderImpl)", "class_method_signature": "RoboStroke.RoboStroke(DistanceResolver distanceResolver, DataSender dataSenderImpl)", "testcase": false, "constructor": true}, {"identifier": "setLandscapeMode", "parameters": "(boolean value)", "modifiers": "private", "return": "void", "signature": "void setLandscapeMode(boolean value)", "full_signature": "private void setLandscapeMode(boolean value)", "class_method_signature": "RoboStroke.setLandscapeMode(boolean value)", "testcase": false, "constructor": false}, {"identifier": "setCoaxMode", "parameters": "(boolean value)", "modifiers": "private", "return": "void", "signature": "void setCoaxMode(boolean value)", "full_signature": "private void setCoaxMode(boolean value)", "class_method_signature": "RoboStroke.setCoaxMode(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getBus", "parameters": "()", "modifiers": "public", "return": "RoboStrokeEventBus", "signature": "RoboStrokeEventBus getBus()", "full_signature": "public RoboStrokeEventBus getBus()", "class_method_signature": "RoboStroke.getBus()", "testcase": false, "constructor": false}, {"identifier": "setErrorListener", "parameters": "(ErrorListener errorListener)", "modifiers": "public", "return": "void", "signature": "void setErrorListener(ErrorListener errorListener)", "full_signature": "public void setErrorListener(ErrorListener errorListener)", "class_method_signature": "RoboStroke.setErrorListener(ErrorListener errorListener)", "testcase": false, "constructor": false}, {"identifier": "initPipeline", "parameters": "(DistanceResolver distanceResolver)", "modifiers": "private", "return": "void", "signature": "void initPipeline(DistanceResolver distanceResolver)", "full_signature": "private void initPipeline(DistanceResolver distanceResolver)", "class_method_signature": "RoboStroke.initPipeline(DistanceResolver distanceResolver)", "testcase": false, "constructor": false}, {"identifier": "setFileInput", "parameters": "(File file)", "modifiers": "public", "return": "void", "signature": "void setFileInput(File file)", "full_signature": "public void setFileInput(File file)", "class_method_signature": "RoboStroke.setFileInput(File file)", "testcase": false, "constructor": false}, {"identifier": "setInput", "parameters": "(SensorDataInput dataInput)", "modifiers": "public", "return": "void", "signature": "void setInput(SensorDataInput dataInput)", "full_signature": "public void setInput(SensorDataInput dataInput)", "class_method_signature": "RoboStroke.setInput(SensorDataInput dataInput)", "testcase": false, "constructor": false}, {"identifier": "isSeekableDataInput", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSeekableDataInput()", "full_signature": "public boolean isSeekableDataInput()", "class_method_signature": "RoboStroke.isSeekableDataInput()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "RoboStroke.stop()", "testcase": false, "constructor": false}, {"identifier": "getDataInput", "parameters": "()", "modifiers": "public", "return": "SensorDataInput", "signature": "SensorDataInput getDataInput()", "full_signature": "public SensorDataInput getDataInput()", "class_method_signature": "RoboStroke.getDataInput()", "testcase": false, "constructor": false}, {"identifier": "getGravityFilter", "parameters": "()", "modifiers": "public", "return": "GravityFilter", "signature": "GravityFilter getGravityFilter()", "full_signature": "public GravityFilter getGravityFilter()", "class_method_signature": "RoboStroke.getGravityFilter()", "testcase": false, "constructor": false}, {"identifier": "getStrokeRateScanner", "parameters": "()", "modifiers": "public", "return": "StrokeRateScanner", "signature": "StrokeRateScanner getStrokeRateScanner()", "full_signature": "public StrokeRateScanner getStrokeRateScanner()", "class_method_signature": "RoboStroke.getStrokeRateScanner()", "testcase": false, "constructor": false}, {"identifier": "getStrokePowerScanner", "parameters": "()", "modifiers": "public", "return": "StrokePowerScanner", "signature": "StrokePowerScanner getStrokePowerScanner()", "full_signature": "public StrokePowerScanner getStrokePowerScanner()", "class_method_signature": "RoboStroke.getStrokePowerScanner()", "testcase": false, "constructor": false}, {"identifier": "getAccelerationSource", "parameters": "()", "modifiers": "public", "return": "SensorDataSource", "signature": "SensorDataSource getAccelerationSource()", "full_signature": "public SensorDataSource getAccelerationSource()", "class_method_signature": "RoboStroke.getAccelerationSource()", "testcase": false, "constructor": false}, {"identifier": "getGpsFilter", "parameters": "()", "modifiers": "public", "return": "GPSDataFilter", "signature": "GPSDataFilter getGpsFilter()", "full_signature": "public GPSDataFilter getGpsFilter()", "class_method_signature": "RoboStroke.getGpsFilter()", "testcase": false, "constructor": false}, {"identifier": "getOrientationSource", "parameters": "()", "modifiers": "public", "return": "SensorDataSource", "signature": "SensorDataSource getOrientationSource()", "full_signature": "public SensorDataSource getOrientationSource()", "class_method_signature": "RoboStroke.getOrientationSource()", "testcase": false, "constructor": false}, {"identifier": "connectPipeline", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void connectPipeline()", "full_signature": "private void connectPipeline()", "class_method_signature": "RoboStroke.connectPipeline()", "testcase": false, "constructor": false}, {"identifier": "setDataLogger", "parameters": "(File logFile)", "modifiers": "public", "return": "void", "signature": "void setDataLogger(File logFile)", "full_signature": "public void setDataLogger(File logFile)", "class_method_signature": "RoboStroke.setDataLogger(File logFile)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "ParameterService", "signature": "ParameterService getParameters()", "full_signature": "public ParameterService getParameters()", "class_method_signature": "RoboStroke.getParameters()", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "RoboStroke.finalize()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "RoboStroke.destroy()", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/nargila/robostroke/RoboStroke.java"}, "focal_method": {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "ParameterService", "body": "public ParameterService getParameters() {\n\t\treturn parameters;\n\t}", "signature": "ParameterService getParameters()", "full_signature": "public ParameterService getParameters()", "class_method_signature": "RoboStroke.getParameters()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5155211, "url": "https://github.com/talos-rowing/talos-rowing", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 6135, "license": "licensed"}}