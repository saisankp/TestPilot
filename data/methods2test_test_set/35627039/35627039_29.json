{"test_class": {"identifier": "NotificationBoltTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NotificationBolt bolt;", "modifier": "private", "type": "NotificationBolt", "declarator": "bolt", "var_name": "bolt"}, {"original_string": "private static final String NOTIFIER_NAME = \"test_notifier\";", "modifier": "private static final", "type": "String", "declarator": "NOTIFIER_NAME = \"test_notifier\"", "var_name": "NOTIFIER_NAME"}, {"original_string": "private static final Properties NOTIFIER_PROPS = new Properties();", "modifier": "private static final", "type": "Properties", "declarator": "NOTIFIER_PROPS = new Properties()", "var_name": "NOTIFIER_PROPS"}, {"original_string": "private static final Map<String, String> NOTIFIER_KV = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "NOTIFIER_KV = new HashMap<>()", "var_name": "NOTIFIER_KV"}, {"original_string": "@Mocked\n    private OutputCollector collector;", "modifier": "@Mocked\n    private", "type": "OutputCollector", "declarator": "collector", "var_name": "collector"}, {"original_string": "@Mocked\n    ProxyUtil<Notifier> mockProxyUtil;", "modifier": "@Mocked", "type": "ProxyUtil<Notifier>", "declarator": "mockProxyUtil", "var_name": "mockProxyUtil"}, {"original_string": "@Mocked\n    private Tuple tuple;", "modifier": "@Mocked\n    private", "type": "Tuple", "declarator": "tuple", "var_name": "tuple"}, {"original_string": "@Mocked\n    private HBaseNotificationStore hBaseNotificationStore;", "modifier": "@Mocked\n    private", "type": "HBaseNotificationStore", "declarator": "hBaseNotificationStore", "var_name": "hBaseNotificationStore"}, {"original_string": "private Notifier notifier;", "modifier": "private", "type": "Notifier", "declarator": "notifier", "var_name": "notifier"}], "file": "streams/runners/storm/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/storm/bolt/notification/NotificationBoltTest.java"}, "test_case": {"identifier": "testExecuteEmptyConf", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testExecuteEmptyConf() throws Exception {\n        bolt.prepare(new HashMap(), null, null);\n    }", "signature": "void testExecuteEmptyConf()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testExecuteEmptyConf()", "class_method_signature": "NotificationBoltTest.testExecuteEmptyConf()", "testcase": true, "constructor": false, "invocations": ["prepare"]}, "focal_class": {"identifier": "NotificationBolt", "superclass": "extends BaseTickTupleAwareRichBolt", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NotificationBolt.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NotificationBolt.class)", "var_name": "LOG"}, {"original_string": "private static final String CATALOG_ROOT_URL = \"catalog.root.url\";", "modifier": "private static final", "type": "String", "declarator": "CATALOG_ROOT_URL = \"catalog.root.url\"", "var_name": "CATALOG_ROOT_URL"}, {"original_string": "public static final String LOCAL_NOTIFIER_JAR_PATH = \"local.notifier.jar.path\";", "modifier": "public static final", "type": "String", "declarator": "LOCAL_NOTIFIER_JAR_PATH = \"local.notifier.jar.path\"", "var_name": "LOCAL_NOTIFIER_JAR_PATH"}, {"original_string": "private static final String NOTIFICATION_STORE_CONFIG_KEY = \"notification.store.conf\";", "modifier": "private static final", "type": "String", "declarator": "NOTIFICATION_STORE_CONFIG_KEY = \"notification.store.conf\"", "var_name": "NOTIFICATION_STORE_CONFIG_KEY"}, {"original_string": "private static final String NOTIFICATION_SERVICE_CONFIG_KEY = \"notification.conf\";", "modifier": "private static final", "type": "String", "declarator": "NOTIFICATION_SERVICE_CONFIG_KEY = \"notification.conf\"", "var_name": "NOTIFICATION_SERVICE_CONFIG_KEY"}, {"original_string": "private NotificationService notificationService;", "modifier": "private", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}, {"original_string": "private BoltNotificationContext notificationContext;", "modifier": "private", "type": "BoltNotificationContext", "declarator": "notificationContext", "var_name": "notificationContext"}, {"original_string": "private final NotificationSink notificationSink;", "modifier": "private final", "type": "NotificationSink", "declarator": "notificationSink", "var_name": "notificationSink"}, {"original_string": "private String notificationStoreClazz = \"\";", "modifier": "private", "type": "String", "declarator": "notificationStoreClazz = \"\"", "var_name": "notificationStoreClazz"}], "methods": [{"identifier": "NotificationBolt", "parameters": "(String notificationSinkJson)", "modifiers": "public", "return": "", "signature": " NotificationBolt(String notificationSinkJson)", "full_signature": "public  NotificationBolt(String notificationSinkJson)", "class_method_signature": "NotificationBolt.NotificationBolt(String notificationSinkJson)", "testcase": false, "constructor": true}, {"identifier": "NotificationBolt", "parameters": "(NotificationSink notificationSink)", "modifiers": "public", "return": "", "signature": " NotificationBolt(NotificationSink notificationSink)", "full_signature": "public  NotificationBolt(NotificationSink notificationSink)", "class_method_signature": "NotificationBolt.NotificationBolt(NotificationSink notificationSink)", "testcase": false, "constructor": true}, {"identifier": "withNotificationStoreClass", "parameters": "(String clazz)", "modifiers": "public", "return": "NotificationBolt", "signature": "NotificationBolt withNotificationStoreClass(String clazz)", "full_signature": "public NotificationBolt withNotificationStoreClass(String clazz)", "class_method_signature": "NotificationBolt.withNotificationStoreClass(String clazz)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(Map stormConf, TopologyContext context, OutputCollector collector)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "full_signature": "@Override public void prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "class_method_signature": "NotificationBolt.prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Tuple tuple)", "modifiers": "@Override protected", "return": "void", "signature": "void process(Tuple tuple)", "full_signature": "@Override protected void process(Tuple tuple)", "class_method_signature": "NotificationBolt.process(Tuple tuple)", "testcase": false, "constructor": false}, {"identifier": "declareOutputFields", "parameters": "(OutputFieldsDeclarer declarer)", "modifiers": "@Override public", "return": "void", "signature": "void declareOutputFields(OutputFieldsDeclarer declarer)", "full_signature": "@Override public void declareOutputFields(OutputFieldsDeclarer declarer)", "class_method_signature": "NotificationBolt.declareOutputFields(OutputFieldsDeclarer declarer)", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "NotificationBolt.cleanup()", "testcase": false, "constructor": false}, {"identifier": "convertMapValuesToString", "parameters": "(Map<String, Object> map)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> convertMapValuesToString(Map<String, Object> map)", "full_signature": "private Map<String, String> convertMapValuesToString(Map<String, Object> map)", "class_method_signature": "NotificationBolt.convertMapValuesToString(Map<String, Object> map)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/storm/bolt/notification/NotificationBolt.java"}, "focal_method": {"identifier": "prepare", "parameters": "(Map stormConf, TopologyContext context, OutputCollector collector)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {\n        if (!stormConf.containsKey(CATALOG_ROOT_URL)) {\n            throw new IllegalArgumentException(\"conf must contain \" + CATALOG_ROOT_URL);\n        }\n\n        Map<String, Object> notificationConf = null;\n        if (stormConf.get(NOTIFICATION_SERVICE_CONFIG_KEY) != null) {\n            notificationConf = (Map<String, Object>) stormConf.get(NOTIFICATION_SERVICE_CONFIG_KEY);\n        } else {\n            notificationConf = Collections.emptyMap();\n        }\n\n        NotificationStore notificationStore = null;\n        try {\n            if (!StringUtils.isEmpty(notificationStoreClazz)) {\n                Class<?> clazz = Class.forName(notificationStoreClazz);\n                notificationStore = (NotificationStore) clazz.newInstance();\n                Map<String, Object> config = (Map<String, Object>) stormConf.get(NOTIFICATION_STORE_CONFIG_KEY);\n                if (config == null) {\n                    config = Collections.emptyMap();\n                }\n                notificationStore.init(config);\n            }\n        } catch (ClassNotFoundException | InstantiationException| IllegalAccessException ex) {\n            throw new RuntimeException(ex);\n        }\n\n        notificationService = new NotificationServiceImpl(notificationConf, notificationStore);\n\n        String jarPath = \"\";\n        if (stormConf.containsKey(LOCAL_NOTIFIER_JAR_PATH)) {\n            jarPath = String.format(\"%s%s%s\", stormConf.get(LOCAL_NOTIFIER_JAR_PATH).toString(),\n                    File.separator, notificationSink.getNotifierJarFileName());\n        }\n\n        Properties props = new Properties();\n        props.putAll(convertMapValuesToString(notificationSink.getNotifierProperties()));\n        NotifierConfig notifierConfig = new NotifierConfigImpl(props,\n                convertMapValuesToString(notificationSink.getNotifierFieldValues()),\n                notificationSink.getNotifierClassName(), jarPath);\n\n        notificationContext = new BoltNotificationContext(collector, notifierConfig);\n        notificationService.register(notificationSink.getNotifierName(), notificationContext);\n    }", "signature": "void prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "full_signature": "@Override public void prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "class_method_signature": "NotificationBolt.prepare(Map stormConf, TopologyContext context, OutputCollector collector)", "testcase": false, "constructor": false, "invocations": ["containsKey", "get", "get", "emptyMap", "isEmpty", "forName", "newInstance", "get", "emptyMap", "init", "containsKey", "format", "toString", "get", "getNotifierJarFileName", "putAll", "convertMapValuesToString", "getNotifierProperties", "convertMapValuesToString", "getNotifierFieldValues", "getNotifierClassName", "register", "getNotifierName"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}