{"test_class": {"identifier": "PrioritySchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PriorityScheduler priorityScheduler = new PriorityScheduler();", "modifier": "private", "type": "PriorityScheduler", "declarator": "priorityScheduler = new PriorityScheduler()", "var_name": "priorityScheduler"}, {"original_string": "private Task task = new Task() {\n        @Override\n        public String getUUID() {\n            return \"1\";\n        }\n\n        @Override\n        public Site getSite() {\n            return null;\n        }\n    };", "modifier": "private", "type": "Task", "declarator": "task = new Task() {\n        @Override\n        public String getUUID() {\n            return \"1\";\n        }\n\n        @Override\n        public Site getSite() {\n            return null;\n        }\n    }", "var_name": "task"}], "file": "webmagic-core/src/test/java/us/codecraft/webmagic/scheduler/PrioritySchedulerTest.java"}, "test_case": {"identifier": "testDifferentPriority", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDifferentPriority() {\n        Request request = new Request(\"a\");\n        request.setPriority(100);\n        priorityScheduler.push(request,task);\n\n        request = new Request(\"b\");\n        request.setPriority(900);\n        priorityScheduler.push(request,task);\n\n        request = new Request(\"c\");\n        priorityScheduler.push(request,task);\n\n        request = new Request(\"d\");\n        request.setPriority(-900);\n        priorityScheduler.push(request,task);\n\n        Request poll = priorityScheduler.poll(task);\n        Assert.assertEquals(\"b\",poll.getUrl());\n        poll = priorityScheduler.poll(task);\n        Assert.assertEquals(\"a\",poll.getUrl());\n        poll = priorityScheduler.poll(task);\n        Assert.assertEquals(\"c\",poll.getUrl());\n        poll = priorityScheduler.poll(task);\n        Assert.assertEquals(\"d\",poll.getUrl());\n    }", "signature": "void testDifferentPriority()", "full_signature": "@Test public void testDifferentPriority()", "class_method_signature": "PrioritySchedulerTest.testDifferentPriority()", "testcase": true, "constructor": false, "invocations": ["setPriority", "push", "setPriority", "push", "push", "setPriority", "push", "poll", "assertEquals", "getUrl", "poll", "assertEquals", "getUrl", "poll", "assertEquals", "getUrl", "poll", "assertEquals", "getUrl"]}, "focal_class": {"identifier": "PriorityScheduler", "superclass": "extends DuplicateRemovedScheduler", "interfaces": "implements MonitorableScheduler", "fields": [{"original_string": "public static final int INITIAL_CAPACITY = 5;", "modifier": "public static final", "type": "int", "declarator": "INITIAL_CAPACITY = 5", "var_name": "INITIAL_CAPACITY"}, {"original_string": "private BlockingQueue<Request> noPriorityQueue = new LinkedBlockingQueue<Request>();", "modifier": "private", "type": "BlockingQueue<Request>", "declarator": "noPriorityQueue = new LinkedBlockingQueue<Request>()", "var_name": "noPriorityQueue"}, {"original_string": "private PriorityBlockingQueue<Request> priorityQueuePlus = new PriorityBlockingQueue<Request>(INITIAL_CAPACITY, new Comparator<Request>() {\n        @Override\n        public int compare(Request o1, Request o2) {\n            return -NumberUtils.compareLong(o1.getPriority(), o2.getPriority());\n        }\n    });", "modifier": "private", "type": "PriorityBlockingQueue<Request>", "declarator": "priorityQueuePlus = new PriorityBlockingQueue<Request>(INITIAL_CAPACITY, new Comparator<Request>() {\n        @Override\n        public int compare(Request o1, Request o2) {\n            return -NumberUtils.compareLong(o1.getPriority(), o2.getPriority());\n        }\n    })", "var_name": "priorityQueuePlus"}, {"original_string": "private PriorityBlockingQueue<Request> priorityQueueMinus = new PriorityBlockingQueue<Request>(INITIAL_CAPACITY, new Comparator<Request>() {\n        @Override\n        public int compare(Request o1, Request o2) {\n            return -NumberUtils.compareLong(o1.getPriority(), o2.getPriority());\n        }\n    });", "modifier": "private", "type": "PriorityBlockingQueue<Request>", "declarator": "priorityQueueMinus = new PriorityBlockingQueue<Request>(INITIAL_CAPACITY, new Comparator<Request>() {\n        @Override\n        public int compare(Request o1, Request o2) {\n            return -NumberUtils.compareLong(o1.getPriority(), o2.getPriority());\n        }\n    })", "var_name": "priorityQueueMinus"}], "methods": [{"identifier": "pushWhenNoDuplicate", "parameters": "(Request request, Task task)", "modifiers": "@Override public", "return": "void", "signature": "void pushWhenNoDuplicate(Request request, Task task)", "full_signature": "@Override public void pushWhenNoDuplicate(Request request, Task task)", "class_method_signature": "PriorityScheduler.pushWhenNoDuplicate(Request request, Task task)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(Task task)", "modifiers": "@Override public synchronized", "return": "Request", "signature": "Request poll(Task task)", "full_signature": "@Override public synchronized Request poll(Task task)", "class_method_signature": "PriorityScheduler.poll(Task task)", "testcase": false, "constructor": false}, {"identifier": "getLeftRequestsCount", "parameters": "(Task task)", "modifiers": "@Override public", "return": "int", "signature": "int getLeftRequestsCount(Task task)", "full_signature": "@Override public int getLeftRequestsCount(Task task)", "class_method_signature": "PriorityScheduler.getLeftRequestsCount(Task task)", "testcase": false, "constructor": false}, {"identifier": "getTotalRequestsCount", "parameters": "(Task task)", "modifiers": "@Override public", "return": "int", "signature": "int getTotalRequestsCount(Task task)", "full_signature": "@Override public int getTotalRequestsCount(Task task)", "class_method_signature": "PriorityScheduler.getTotalRequestsCount(Task task)", "testcase": false, "constructor": false}], "file": "webmagic-core/src/main/java/us/codecraft/webmagic/scheduler/PriorityScheduler.java"}, "focal_method": {"identifier": "poll", "parameters": "(Task task)", "modifiers": "@Override public synchronized", "return": "Request", "body": "@Override\n    public synchronized Request poll(Task task) {\n        Request poll = priorityQueuePlus.poll();\n        if (poll != null) {\n            return poll;\n        }\n        poll = noPriorityQueue.poll();\n        if (poll != null) {\n            return poll;\n        }\n        return priorityQueueMinus.poll();\n    }", "signature": "Request poll(Task task)", "full_signature": "@Override public synchronized Request poll(Task task)", "class_method_signature": "PriorityScheduler.poll(Task task)", "testcase": false, "constructor": false, "invocations": ["poll", "poll", "poll"]}, "repository": {"repo_id": 9623064, "url": "https://github.com/code4craft/webmagic", "language": "Java", "is_fork": false, "fork_count": 3804, "stargazer_count": 9136, "size": 17041, "license": "licensed"}}