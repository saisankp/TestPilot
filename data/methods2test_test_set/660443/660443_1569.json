{"test_class": {"identifier": "EccentricConnectivityIndexDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/EccentricConnectivityIndexDescriptorTest.java"}, "test_case": {"identifier": "testEccentricConnectivityIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEccentricConnectivityIndex() throws ClassNotFoundException, CDKException, java.lang.Exception {\n        String filename = \"data/hin/gravindex.hin\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        ISimpleChemObjectReader reader = new HINReader(ins);\n        ChemFile content = (ChemFile) reader.read((ChemObject) new ChemFile());\n        List cList = ChemFileManipulator.getAllAtomContainers(content);\n        IAtomContainer ac = (IAtomContainer) cList.get(0);\n\n        addImplicitHydrogens(ac);\n\n        IntegerResult retval = (IntegerResult) descriptor.calculate(ac).getValue();\n        //logger.debug(retval.intValue());\n\n        Assert.assertEquals(254, retval.intValue(), 0);\n    }", "signature": "void testEccentricConnectivityIndex()", "full_signature": "@Test public void testEccentricConnectivityIndex()", "class_method_signature": "EccentricConnectivityIndexDescriptorTest.testEccentricConnectivityIndex()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "getAllAtomContainers", "get", "addImplicitHydrogens", "getValue", "calculate", "assertEquals", "intValue"]}, "focal_class": {"identifier": "EccentricConnectivityIndexDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"ECCEN\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"ECCEN\"}", "var_name": "NAMES"}], "methods": [{"identifier": "EccentricConnectivityIndexDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " EccentricConnectivityIndexDescriptor()", "full_signature": "public  EccentricConnectivityIndexDescriptor()", "class_method_signature": "EccentricConnectivityIndexDescriptor.EccentricConnectivityIndexDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "EccentricConnectivityIndexDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "EccentricConnectivityIndexDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "EccentricConnectivityIndexDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "EccentricConnectivityIndexDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "EccentricConnectivityIndexDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "EccentricConnectivityIndexDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "EccentricConnectivityIndexDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "EccentricConnectivityIndexDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/EccentricConnectivityIndexDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        IAtomContainer local = AtomContainerManipulator.removeHydrogens(container);\n\n        int natom = local.getAtomCount();\n        int[][] admat = AdjacencyMatrix.getMatrix(local);\n        int[][] distmat = PathTools.computeFloydAPSP(admat);\n\n        int eccenindex = 0;\n        for (int i = 0; i < natom; i++) {\n            int max = -1;\n            for (int j = 0; j < natom; j++) {\n                if (distmat[i][j] > max) max = distmat[i][j];\n            }\n            int degree = local.getConnectedBondsCount(i);\n            eccenindex += max * degree;\n        }\n        IntegerResult retval = new IntegerResult(eccenindex);\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames(), null);\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "EccentricConnectivityIndexDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["removeHydrogens", "getAtomCount", "getMatrix", "computeFloydAPSP", "getConnectedBondsCount", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}