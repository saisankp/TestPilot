{"test_class": {"identifier": "MqttSinkTest", "superclass": "extends MqttTestBase", "interfaces": "", "fields": [{"original_string": "private WeldContainer container;", "modifier": "private", "type": "WeldContainer", "declarator": "container", "var_name": "container"}], "file": "smallrye-reactive-messaging-mqtt/src/test/java/io/smallrye/reactive/messaging/mqtt/MqttSinkTest.java"}, "test_case": {"identifier": "testSinkUsingInteger", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSinkUsingInteger() throws InterruptedException {\n        String topic = UUID.randomUUID().toString();\n        CountDownLatch latch = new CountDownLatch(1);\n        AtomicInteger expected = new AtomicInteger(0);\n        usage.consumeIntegers(topic, 10, 10, TimeUnit.SECONDS,\n                latch::countDown,\n                v -> expected.getAndIncrement());\n\n        Map<String, Object> config = new HashMap<>();\n        config.put(\"topic\", topic);\n        config.put(\"host\", address);\n        config.put(\"port\", port);\n        MqttSink sink = new MqttSink(vertx, new MqttConnectorOutgoingConfiguration(new MapBasedConfig(config)));\n\n        Subscriber<? extends Message<?>> subscriber = sink.getSink().build();\n        Flowable.range(0, 10)\n                .map(Message::of)\n                .subscribe((Subscriber<? super Message<Integer>>) subscriber);\n\n        assertThat(latch.await(1, TimeUnit.MINUTES)).isTrue();\n        await().untilAtomic(expected, is(10));\n        assertThat(expected).hasValue(10);\n    }", "signature": "void testSinkUsingInteger()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testSinkUsingInteger()", "class_method_signature": "MqttSinkTest.testSinkUsingInteger()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "consumeIntegers", "getAndIncrement", "put", "put", "put", "build", "getSink", "subscribe", "map", "range", "isTrue", "assertThat", "await", "untilAtomic", "await", "is", "hasValue", "assertThat"]}, "focal_class": {"identifier": "MqttSink", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private final String server;", "modifier": "private final", "type": "String", "declarator": "server", "var_name": "server"}, {"original_string": "private final String topic;", "modifier": "private final", "type": "String", "declarator": "topic", "var_name": "topic"}, {"original_string": "private final int qos;", "modifier": "private final", "type": "int", "declarator": "qos", "var_name": "qos"}, {"original_string": "private final SubscriberBuilder<? extends Message<?>, Void> sink;", "modifier": "private final", "type": "SubscriberBuilder<? extends Message<?>, Void>", "declarator": "sink", "var_name": "sink"}, {"original_string": "private final AtomicBoolean connected = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "connected = new AtomicBoolean()", "var_name": "connected"}], "methods": [{"identifier": "MqttSink", "parameters": "(Vertx vertx, MqttConnectorOutgoingConfiguration config)", "modifiers": "public", "return": "", "signature": " MqttSink(Vertx vertx, MqttConnectorOutgoingConfiguration config)", "full_signature": "public  MqttSink(Vertx vertx, MqttConnectorOutgoingConfiguration config)", "class_method_signature": "MqttSink.MqttSink(Vertx vertx, MqttConnectorOutgoingConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(AtomicReference<MqttClient> reference, Message<?> msg)", "modifiers": "private", "return": "CompletionStage<?>", "signature": "CompletionStage<?> send(AtomicReference<MqttClient> reference, Message<?> msg)", "full_signature": "private CompletionStage<?> send(AtomicReference<MqttClient> reference, Message<?> msg)", "class_method_signature": "MqttSink.send(AtomicReference<MqttClient> reference, Message<?> msg)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object payload)", "modifiers": "private", "return": "Buffer", "signature": "Buffer convert(Object payload)", "full_signature": "private Buffer convert(Object payload)", "class_method_signature": "MqttSink.convert(Object payload)", "testcase": false, "constructor": false}, {"identifier": "getSink", "parameters": "()", "modifiers": "public", "return": "SubscriberBuilder<? extends Message<?>, Void>", "signature": "SubscriberBuilder<? extends Message<?>, Void> getSink()", "full_signature": "public SubscriberBuilder<? extends Message<?>, Void> getSink()", "class_method_signature": "MqttSink.getSink()", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReady()", "full_signature": "public boolean isReady()", "class_method_signature": "MqttSink.isReady()", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-mqtt/src/main/java/io/smallrye/reactive/messaging/mqtt/MqttSink.java"}, "focal_method": {"identifier": "getSink", "parameters": "()", "modifiers": "public", "return": "SubscriberBuilder<? extends Message<?>, Void>", "body": "public SubscriberBuilder<? extends Message<?>, Void> getSink() {\n        return sink;\n    }", "signature": "SubscriberBuilder<? extends Message<?>, Void> getSink()", "full_signature": "public SubscriberBuilder<? extends Message<?>, Void> getSink()", "class_method_signature": "MqttSink.getSink()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}