{"test_class": {"identifier": "CommonAncestorSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TreeNode<Integer> root;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "root", "var_name": "root"}, {"original_string": "TreeNode<Integer> node8;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node8", "var_name": "node8"}, {"original_string": "TreeNode<Integer> node6;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node6", "var_name": "node6"}, {"original_string": "TreeNode<Integer> node4;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node4", "var_name": "node4"}, {"original_string": "TreeNode<Integer> node7;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node7", "var_name": "node7"}, {"original_string": "TreeNode<Integer> node5;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node5", "var_name": "node5"}, {"original_string": "TreeNode<Integer> node3;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node3", "var_name": "node3"}, {"original_string": "TreeNode<Integer> node11;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node11", "var_name": "node11"}, {"original_string": "TreeNode<Integer> node9;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node9", "var_name": "node9"}, {"original_string": "TreeNode<Integer> node10;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node10", "var_name": "node10"}, {"original_string": "TreeNode<Integer> node12;", "modifier": "", "type": "TreeNode<Integer>", "declarator": "node12", "var_name": "node12"}], "file": "algs/src/test/java/org/buptdavid/datastructure/tree/CommonAncestorSearchTest.java"}, "test_case": {"identifier": "searchCommonAncestorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void searchCommonAncestorTest(){\n\t\tAssert.assertEquals(node4, CommonAncestorSearch.searchCommonAncestor(root, node3, node5));\n\t\tAssert.assertEquals(node6, CommonAncestorSearch.searchCommonAncestor(root, node3, node7));\n\t\t\n\t\tAssert.assertEquals(root, CommonAncestorSearch.searchCommonAncestor(root, node5, node10));\n\t\t\n\t\tAssert.assertEquals(node11, CommonAncestorSearch.searchCommonAncestor(root, node10, node12));\n\t\t\n\t\tAssert.assertEquals(null, CommonAncestorSearch.searchCommonAncestor(node6, node3, node10));\n\t\tAssert.assertEquals(null, CommonAncestorSearch.searchCommonAncestor(node6, root, node3));\n\t}", "signature": "void searchCommonAncestorTest()", "full_signature": "@Test public void searchCommonAncestorTest()", "class_method_signature": "CommonAncestorSearchTest.searchCommonAncestorTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "searchCommonAncestor", "assertEquals", "searchCommonAncestor", "assertEquals", "searchCommonAncestor", "assertEquals", "searchCommonAncestor", "assertEquals", "searchCommonAncestor", "assertEquals", "searchCommonAncestor"]}, "focal_class": {"identifier": "CommonAncestorSearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "isDescendant", "parameters": "(TreeNode<Integer> root, TreeNode<Integer> p)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDescendant(TreeNode<Integer> root, TreeNode<Integer> p)", "full_signature": "private static boolean isDescendant(TreeNode<Integer> root, TreeNode<Integer> p)", "class_method_signature": "CommonAncestorSearch.isDescendant(TreeNode<Integer> root, TreeNode<Integer> p)", "testcase": false, "constructor": false}, {"identifier": "searchCommonAncestor", "parameters": "(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "modifiers": "public static", "return": "TreeNode<Integer>", "signature": "TreeNode<Integer> searchCommonAncestor(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "full_signature": "public static TreeNode<Integer> searchCommonAncestor(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "class_method_signature": "CommonAncestorSearch.searchCommonAncestor(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/org/buptdavid/datastructure/tree/CommonAncestorSearch.java"}, "focal_method": {"identifier": "searchCommonAncestor", "parameters": "(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "modifiers": "public static", "return": "TreeNode<Integer>", "body": "public static TreeNode<Integer> searchCommonAncestor(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q){\n\t\t// \u786e\u4fddp\u548cq\u90fd\u662froot\u7684\u5b50\u5b59\u8282\u70b9\n\t\tif(!isDescendant(root, p) || !isDescendant(root, q)){\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tif(root == q || root== q){\n\t\t\treturn root;\n\t\t}\n\t\t\n\t\tboolean is_p_on_left = isDescendant(root.left, p);\n\t\tboolean is_q_on_left = isDescendant(root.left, q);\n\t\t\n\t\t// \u5982\u679cp\u548cq\u5728root\u7684\u4e24\u8fb9,\u5219\u8fd4\u56deroot\n\t\tif(is_p_on_left != is_q_on_left){\n\t\t\treturn root;\n\t\t}\n\t\t\n\t\t// \u5982\u679cp\u548cq\u5728root\u7684\u540c\u4e00\u8fb9,\u5219\u904d\u5386\u8bbf\u95ee\u90a3\u4e00\u8fb9\n\t\tTreeNode<Integer> treeSide = is_p_on_left?root.left:root.right;\n\t\treturn searchCommonAncestor(treeSide, p, q);\n\t}", "signature": "TreeNode<Integer> searchCommonAncestor(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "full_signature": "public static TreeNode<Integer> searchCommonAncestor(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "class_method_signature": "CommonAncestorSearch.searchCommonAncestor(TreeNode<Integer> root, TreeNode<Integer> p, TreeNode<Integer> q)", "testcase": false, "constructor": false, "invocations": ["isDescendant", "isDescendant", "isDescendant", "isDescendant", "searchCommonAncestor"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}