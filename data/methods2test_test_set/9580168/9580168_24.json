{"test_class": {"identifier": "PmdValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STATIC_ACCESS = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Static fields should be accessed in a static way \\\\[CLASS_NAME.FIELD_NAME\\\\]\\\\.\";", "modifier": "private static final", "type": "String", "declarator": "STATIC_ACCESS = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Static fields should be accessed in a static way \\\\[CLASS_NAME.FIELD_NAME\\\\]\\\\.\"", "var_name": "STATIC_ACCESS"}, {"original_string": "private static final String CODE_IN_CON = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Only field initialization or call to other constructors in a constructor\";", "modifier": "private static final", "type": "String", "declarator": "CODE_IN_CON = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Only field initialization or call to other constructors in a constructor\"", "var_name": "CODE_IN_CON"}, {"original_string": "private static final String NO_CON_INIT = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Avoid doing field initialization outside constructor.\";", "modifier": "private static final", "type": "String", "declarator": "NO_CON_INIT = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Avoid doing field initialization outside constructor.\"", "var_name": "NO_CON_INIT"}, {"original_string": "private static final String MULT_CON_INIT = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Avoid field initialization in several constructors.\";", "modifier": "private static final", "type": "String", "declarator": "MULT_CON_INIT = \"%s\\\\[\\\\d+-\\\\d+\\\\]: Avoid field initialization in several constructors.\"", "var_name": "MULT_CON_INIT"}, {"original_string": "private static final String BRACKETS = \"(%s)\";", "modifier": "private static final", "type": "String", "declarator": "BRACKETS = \"(%s)\"", "var_name": "BRACKETS"}, {"original_string": "private static final String PLAIN_ASSERTIONS =\n        \"Avoid using Plain JUnit assertions\";", "modifier": "private static final", "type": "String", "declarator": "PLAIN_ASSERTIONS =\n        \"Avoid using Plain JUnit assertions\"", "var_name": "PLAIN_ASSERTIONS"}, {"original_string": "private static final String STATIC_METHODS =\n        \"Public static methods are prohibited\";", "modifier": "private static final", "type": "String", "declarator": "STATIC_METHODS =\n        \"Public static methods are prohibited\"", "var_name": "STATIC_METHODS"}, {"original_string": "private static final String FILES_CREATE_ERR =\n        // @checkstyle LineLength (1 line)\n        \"Files.createFile should not be used in tests, replace them with @Rule TemporaryFolder\";", "modifier": "private static final", "type": "String", "declarator": "FILES_CREATE_ERR =\n        // @checkstyle LineLength (1 line)\n        \"Files.createFile should not be used in tests, replace them with @Rule TemporaryFolder\"", "var_name": "FILES_CREATE_ERR"}], "file": "qulice-pmd/src/test/java/com/qulice/pmd/PmdValidatorTest.java"}, "test_case": {"identifier": "prohibitsPublicStaticMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void prohibitsPublicStaticMethods() throws Exception {\n        new PmdAssert(\n            \"StaticPublicMethod.java\",\n            Matchers.is(false),\n            Matchers.containsString(PmdValidatorTest.STATIC_METHODS)\n        ).validate();\n    }", "signature": "void prohibitsPublicStaticMethods()", "full_signature": "@Test public void prohibitsPublicStaticMethods()", "class_method_signature": "PmdValidatorTest.prohibitsPublicStaticMethods()", "testcase": true, "constructor": false, "invocations": ["validate", "is", "containsString"]}, "focal_class": {"identifier": "PmdValidator", "superclass": "", "interfaces": "implements ResourceValidator", "fields": [{"original_string": "private final transient Environment env;", "modifier": "private final transient", "type": "Environment", "declarator": "env", "var_name": "env"}], "methods": [{"identifier": "PmdValidator", "parameters": "(final Environment env)", "modifiers": "public", "return": "", "signature": " PmdValidator(final Environment env)", "full_signature": "public  PmdValidator(final Environment env)", "class_method_signature": "PmdValidator.PmdValidator(final Environment env)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(final Collection<File> files)", "modifiers": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public", "return": "Collection<Violation>", "signature": "Collection<Violation> validate(final Collection<File> files)", "full_signature": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public Collection<Violation> validate(final Collection<File> files)", "class_method_signature": "PmdValidator.validate(final Collection<File> files)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "PmdValidator.name()", "testcase": false, "constructor": false}], "file": "qulice-pmd/src/main/java/com/qulice/pmd/PmdValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(final Collection<File> files)", "modifiers": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public", "return": "Collection<Violation>", "body": "@Override\n    @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\")\n    public Collection<Violation> validate(final Collection<File> files) {\n        final SourceValidator validator = new SourceValidator(this.env);\n        final Collection<DataSource> sources = new LinkedList<>();\n        for (final File file : files) {\n            sources.add(new FileDataSource(file));\n        }\n        final Collection<RuleViolation> breaches = validator.validate(\n            sources, this.env.basedir().getPath()\n        );\n        final Collection<Violation> violations = new LinkedList<>();\n        for (final RuleViolation breach : breaches) {\n            violations.add(\n                new Violation.Default(\n                    this.name(),\n                    breach.getRule().getName(),\n                    breach.getFilename(),\n                    String.format(\n                        \"%d-%d\",\n                        breach.getBeginLine(), breach.getEndLine()\n                    ),\n                    breach.getDescription()\n                )\n            );\n        }\n        return violations;\n    }", "signature": "Collection<Violation> validate(final Collection<File> files)", "full_signature": "@Override @SuppressWarnings(\"PMD.AvoidInstantiatingObjectsInLoops\") public Collection<Violation> validate(final Collection<File> files)", "class_method_signature": "PmdValidator.validate(final Collection<File> files)", "testcase": false, "constructor": false, "invocations": ["add", "validate", "getPath", "basedir", "add", "name", "getName", "getRule", "getFilename", "format", "getBeginLine", "getEndLine", "getDescription"]}, "repository": {"repo_id": 9580168, "url": "https://github.com/teamed/qulice", "language": "Java", "is_fork": false, "fork_count": 87, "stargazer_count": 240, "size": 17854, "license": "licensed"}}