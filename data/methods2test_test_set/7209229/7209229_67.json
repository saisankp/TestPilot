{"test_class": {"identifier": "TestDbusEventBuffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODULE = TestDbusEventBuffer.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = TestDbusEventBuffer.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "public static final long NANOSECONDS = 1000*1000*1000;", "modifier": "public static final", "type": "long", "declarator": "NANOSECONDS = 1000*1000*1000", "var_name": "NANOSECONDS"}, {"original_string": "public static final long MILLISECONDS = 1000;", "modifier": "public static final", "type": "long", "declarator": "MILLISECONDS = 1000", "var_name": "MILLISECONDS"}, {"original_string": "private final long key = 12345L;", "modifier": "private final", "type": "long", "declarator": "key = 12345L", "var_name": "key"}, {"original_string": "private final long timeStamp = System.nanoTime();", "modifier": "private final", "type": "long", "declarator": "timeStamp = System.nanoTime()", "var_name": "timeStamp"}, {"original_string": "private final short pPartitionId = 0;", "modifier": "private final", "type": "short", "declarator": "pPartitionId = 0", "var_name": "pPartitionId"}, {"original_string": "private final short lPartitionId = 30;", "modifier": "private final", "type": "short", "declarator": "lPartitionId = 30", "var_name": "lPartitionId"}, {"original_string": "private final String value = \"foobar\";", "modifier": "private final", "type": "String", "declarator": "value = \"foobar\"", "var_name": "value"}, {"original_string": "private final short srcId = 15;", "modifier": "private final", "type": "short", "declarator": "srcId = 15", "var_name": "srcId"}, {"original_string": "private final byte[] schemaId = \"abcdefghijklmnop\".getBytes(Charset.defaultCharset());", "modifier": "private final", "type": "byte[]", "declarator": "schemaId = \"abcdefghijklmnop\".getBytes(Charset.defaultCharset())", "var_name": "schemaId"}, {"original_string": "private static HashSet<String> _idSet = new HashSet<String>();", "modifier": "private static", "type": "HashSet<String>", "declarator": "_idSet = new HashSet<String>()", "var_name": "_idSet"}, {"original_string": "private final AtomicInteger thrCounter = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "thrCounter = new AtomicInteger()", "var_name": "thrCounter"}], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/TestDbusEventBuffer.java"}, "test_case": {"identifier": "testSessionIdGeneration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSessionIdGeneration() throws Exception\n  {\n    class IdGeneratorThread implements Runnable\n    {\n      private final DbusEventBuffer.SessionIdGenerator _idGenerator;\n      private final int _nTimes;\n      private final String _ids[];\n      public IdGeneratorThread(DbusEventBuffer.SessionIdGenerator idGenerator, int nTimes)\n      {\n        _idGenerator = idGenerator;\n        _nTimes = nTimes;\n        _ids = new String[_nTimes];\n      }\n\n      @Override\n      public void run()\n      {\n        for (int i = 0; i < _nTimes; i++)\n        {\n          _ids[i] = _idGenerator.generateSessionId();\n        }\n\n        for (int i = 0; i < _nTimes; i++)\n        {\n          try\n          {\n            addId(_ids[i]);\n          }\n          catch (Exception e)\n          {\n            throw new RuntimeException(\"Could not add Id\" + _ids[i]);\n          }\n        }\n        thrCounter.decrementAndGet();\n      }\n    }\n\n    final int nThreads = 20;\n    final int nTimes = 300;\n    final Thread threads[] = new Thread[nThreads];\n    final DbusEventBuffer.SessionIdGenerator idGenerator = new DbusEventBuffer.SessionIdGenerator();\n\n    for (int i = 0; i < nThreads; i++)\n    {\n      threads[i] = new Thread(new IdGeneratorThread(idGenerator, nTimes), \"idgen_thread_\" + i);\n    }\n\n    thrCounter.set(nThreads);\n    for (int i = 0; i < nThreads; i++)\n    {\n      threads[i].start();\n    }\n\n    for (int i = 0; i < nThreads; i++)\n    {\n      threads[i].join();\n    }\n    Assert.assertEquals(0, thrCounter.get());\n  }", "signature": "void testSessionIdGeneration()", "full_signature": "@Test public void testSessionIdGeneration()", "class_method_signature": "TestDbusEventBuffer.testSessionIdGeneration()", "testcase": true, "constructor": false, "invocations": ["generateSessionId", "addId", "decrementAndGet", "set", "start", "join", "assertEquals", "get"]}, "focal_class": {"identifier": "DbusEventBuffer", "superclass": "", "interfaces": "implements Iterable<DbusEventInternalWritable>,\nDbusEventBufferAppendable, DbusEventBufferStreamAppendable", "fields": [{"original_string": "public static final String MODULE = DbusEventBuffer.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = DbusEventBuffer.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "public static final String MMAP_META_INFO_FILE_NAME = \"metaFile\";", "modifier": "public static final", "type": "String", "declarator": "MMAP_META_INFO_FILE_NAME = \"metaFile\"", "var_name": "MMAP_META_INFO_FILE_NAME"}, {"original_string": "public static final String SESSION_PREFIX = \"session_\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_PREFIX = \"session_\"", "var_name": "SESSION_PREFIX"}, {"original_string": "public static final String MMAP_META_INFO_SUFFIX = \".info\";", "modifier": "public static final", "type": "String", "declarator": "MMAP_META_INFO_SUFFIX = \".info\"", "var_name": "MMAP_META_INFO_SUFFIX"}, {"original_string": "public static final String PERF_MODULE = MODULE + \"Perf\";", "modifier": "public static final", "type": "String", "declarator": "PERF_MODULE = MODULE + \"Perf\"", "var_name": "PERF_MODULE"}, {"original_string": "public static final Logger PERF_LOG = Logger.getLogger(PERF_MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "PERF_LOG = Logger.getLogger(PERF_MODULE)", "var_name": "PERF_LOG"}, {"original_string": "protected static final AtomicLong ITERATORS_COUNTER = new AtomicLong(0);", "modifier": "protected static final", "type": "AtomicLong", "declarator": "ITERATORS_COUNTER = new AtomicLong(0)", "var_name": "ITERATORS_COUNTER"}, {"original_string": "private final long _bufferRemoveWaitPeriodSec;", "modifier": "private final", "type": "long", "declarator": "_bufferRemoveWaitPeriodSec", "var_name": "_bufferRemoveWaitPeriodSec"}, {"original_string": "private final double _nanoSecsInMSec = 1000000.0;", "modifier": "private final", "type": "double", "declarator": "_nanoSecsInMSec = 1000000.0", "var_name": "_nanoSecsInMSec"}, {"original_string": "private final DbusEventFactory _eventFactory;", "modifier": "private final", "type": "DbusEventFactory", "declarator": "_eventFactory", "var_name": "_eventFactory"}, {"original_string": "private byte _eventSerializationVersion = -1;", "modifier": "private", "type": "byte", "declarator": "_eventSerializationVersion = -1", "var_name": "_eventSerializationVersion"}, {"original_string": "private boolean _scnRegress = false;", "modifier": "private", "type": "boolean", "declarator": "_scnRegress = false", "var_name": "_scnRegress"}, {"original_string": "private boolean _dropOldEvents = false;", "modifier": "private", "type": "boolean", "declarator": "_dropOldEvents = false", "var_name": "_dropOldEvents"}, {"original_string": "public static final int MAX_DEBUG_ON_ERROR_ITERATIONS = 2;", "modifier": "public static final", "type": "int", "declarator": "MAX_DEBUG_ON_ERROR_ITERATIONS = 2", "var_name": "MAX_DEBUG_ON_ERROR_ITERATIONS"}, {"original_string": "static final HashMap<String, Integer> TRACE_FILES_COUNT_MAP = new HashMap<String, Integer>();", "modifier": "static final", "type": "HashMap<String, Integer>", "declarator": "TRACE_FILES_COUNT_MAP = new HashMap<String, Integer>()", "var_name": "TRACE_FILES_COUNT_MAP"}, {"original_string": "private static int MIN_INITIAL_ITERATORS = 30;", "modifier": "private static", "type": "int", "declarator": "MIN_INITIAL_ITERATORS = 30", "var_name": "MIN_INITIAL_ITERATORS"}, {"original_string": "private final ReentrantLock _queueLock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "_queueLock = new ReentrantLock()", "var_name": "_queueLock"}, {"original_string": "private final Lock _readBufferLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "_readBufferLock = new ReentrantLock()", "var_name": "_readBufferLock"}, {"original_string": "private final Condition _notFull = _queueLock.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "_notFull = _queueLock.newCondition()", "var_name": "_notFull"}, {"original_string": "private final Condition _notEmpty = _queueLock.newCondition();", "modifier": "private final", "type": "Condition", "declarator": "_notEmpty = _queueLock.newCondition()", "var_name": "_notEmpty"}, {"original_string": "protected final RangeBasedReaderWriterLock _rwLockProvider;", "modifier": "protected final", "type": "RangeBasedReaderWriterLock", "declarator": "_rwLockProvider", "var_name": "_rwLockProvider"}, {"original_string": "private final AtomicInteger readLocked = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "readLocked = new AtomicInteger(0)", "var_name": "readLocked"}, {"original_string": "private final PhysicalPartition _physicalPartition;", "modifier": "private final", "type": "PhysicalPartition", "declarator": "_physicalPartition", "var_name": "_physicalPartition"}, {"original_string": "private final BufferPosition _currentWritePosition;", "modifier": "private final", "type": "BufferPosition", "declarator": "_currentWritePosition", "var_name": "_currentWritePosition"}, {"original_string": "private final ScnIndex _scnIndex;", "modifier": "private final", "type": "ScnIndex", "declarator": "_scnIndex", "var_name": "_scnIndex"}, {"original_string": "private final ByteBuffer[] _buffers;", "modifier": "private final", "type": "ByteBuffer[]", "declarator": "_buffers", "var_name": "_buffers"}, {"original_string": "private final int _maxBufferSize;", "modifier": "private final", "type": "int", "declarator": "_maxBufferSize", "var_name": "_maxBufferSize"}, {"original_string": "private final int _initReadBufferSize;", "modifier": "private final", "type": "int", "declarator": "_initReadBufferSize", "var_name": "_initReadBufferSize"}, {"original_string": "private final int _maxEventSize;", "modifier": "private final", "type": "int", "declarator": "_maxEventSize", "var_name": "_maxEventSize"}, {"original_string": "private final  BufferPosition _head;", "modifier": "private final", "type": "BufferPosition", "declarator": "_head", "var_name": "_head"}, {"original_string": "private final  BufferPosition _tail;", "modifier": "private final", "type": "BufferPosition", "declarator": "_tail", "var_name": "_tail"}, {"original_string": "final boolean _bufferPersistenceEnabled;", "modifier": "final", "type": "boolean", "declarator": "_bufferPersistenceEnabled", "var_name": "_bufferPersistenceEnabled"}, {"original_string": "private boolean _empty;", "modifier": "private", "type": "boolean", "declarator": "_empty", "var_name": "_empty"}, {"original_string": "private boolean _isClosed = false;", "modifier": "private", "type": "boolean", "declarator": "_isClosed = false", "var_name": "_isClosed"}, {"original_string": "private final long _allocatedSize;", "modifier": "private final", "type": "long", "declarator": "_allocatedSize", "var_name": "_allocatedSize"}, {"original_string": "private final HashSet<InternalDatabusEventsListener> _internalListeners =\n      new HashSet<InternalDatabusEventsListener>();", "modifier": "private final", "type": "HashSet<InternalDatabusEventsListener>", "declarator": "_internalListeners =\n      new HashSet<InternalDatabusEventsListener>()", "var_name": "_internalListeners"}, {"original_string": "private final AllocationPolicy _allocationPolicy;", "modifier": "private final", "type": "AllocationPolicy", "declarator": "_allocationPolicy", "var_name": "_allocationPolicy"}, {"original_string": "private final QueuePolicy _queueingPolicy;", "modifier": "private final", "type": "QueuePolicy", "declarator": "_queueingPolicy", "var_name": "_queueingPolicy"}, {"original_string": "private File _mmapSessionDirectory;", "modifier": "private", "type": "File", "declarator": "_mmapSessionDirectory", "var_name": "_mmapSessionDirectory"}, {"original_string": "private File _mmapDirectory;", "modifier": "private", "type": "File", "declarator": "_mmapDirectory", "var_name": "_mmapDirectory"}, {"original_string": "private String _sessionId;", "modifier": "private", "type": "String", "declarator": "_sessionId", "var_name": "_sessionId"}, {"original_string": "protected final Set<WeakReference<BaseEventIterator>> _busyIteratorPool =\n          new HashSet<WeakReference<BaseEventIterator>>(MIN_INITIAL_ITERATORS);", "modifier": "protected final", "type": "Set<WeakReference<BaseEventIterator>>", "declarator": "_busyIteratorPool =\n          new HashSet<WeakReference<BaseEventIterator>>(MIN_INITIAL_ITERATORS)", "var_name": "_busyIteratorPool"}, {"original_string": "private final AssertLevel _assertLevel;", "modifier": "private final", "type": "AssertLevel", "declarator": "_assertLevel", "var_name": "_assertLevel"}, {"original_string": "private WindowState _eventState = WindowState.INIT;", "modifier": "private", "type": "WindowState", "declarator": "_eventState = WindowState.INIT", "var_name": "_eventState"}, {"original_string": "private final BufferPosition _eventStartIndex;", "modifier": "private final", "type": "BufferPosition", "declarator": "_eventStartIndex", "var_name": "_eventStartIndex"}, {"original_string": "private int _numEventsInWindow;", "modifier": "private", "type": "int", "declarator": "_numEventsInWindow", "var_name": "_numEventsInWindow"}, {"original_string": "private volatile long _lastWrittenSequence;", "modifier": "private volatile", "type": "long", "declarator": "_lastWrittenSequence", "var_name": "_lastWrittenSequence"}, {"original_string": "private volatile long _seenEndOfPeriodScn = -1;", "modifier": "private volatile", "type": "long", "declarator": "_seenEndOfPeriodScn = -1", "var_name": "_seenEndOfPeriodScn"}, {"original_string": "private volatile long _prevScn;", "modifier": "private volatile", "type": "long", "declarator": "_prevScn", "var_name": "_prevScn"}, {"original_string": "private final BufferPositionParser _bufferPositionParser;", "modifier": "private final", "type": "BufferPositionParser", "declarator": "_bufferPositionParser", "var_name": "_bufferPositionParser"}, {"original_string": "private volatile long _timestampOfFirstEvent;", "modifier": "private volatile", "type": "long", "declarator": "_timestampOfFirstEvent", "var_name": "_timestampOfFirstEvent"}, {"original_string": "private volatile long _minScn;", "modifier": "private volatile", "type": "long", "declarator": "_minScn", "var_name": "_minScn"}, {"original_string": "private volatile long _timestampOfLatestDataEvent = 0;", "modifier": "private volatile", "type": "long", "declarator": "_timestampOfLatestDataEvent = 0", "var_name": "_timestampOfLatestDataEvent"}, {"original_string": "private static SessionIdGenerator _sessionIdGenerator = new SessionIdGenerator();", "modifier": "private static", "type": "SessionIdGenerator", "declarator": "_sessionIdGenerator = new SessionIdGenerator()", "var_name": "_sessionIdGenerator"}, {"original_string": "private int _refCount = 0;", "modifier": "private", "type": "int", "declarator": "_refCount = 0", "var_name": "_refCount"}, {"original_string": "private long _tsRefCounterUpdate = Long.MAX_VALUE;", "modifier": "private", "type": "long", "declarator": "_tsRefCounterUpdate = Long.MAX_VALUE", "var_name": "_tsRefCounterUpdate"}, {"original_string": "final Logger _log;", "modifier": "final", "type": "Logger", "declarator": "_log", "var_name": "_log"}, {"original_string": "private static final double LN_5 = Math.log(5.0);", "modifier": "private static final", "type": "double", "declarator": "LN_5 = Math.log(5.0)", "var_name": "LN_5"}], "methods": [{"identifier": "getMmapMetaInfoFileNamePrefix", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getMmapMetaInfoFileNamePrefix()", "full_signature": "public static String getMmapMetaInfoFileNamePrefix()", "class_method_signature": "DbusEventBuffer.getMmapMetaInfoFileNamePrefix()", "testcase": false, "constructor": false}, {"identifier": "getSessionPrefix", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getSessionPrefix()", "full_signature": "public static String getSessionPrefix()", "class_method_signature": "DbusEventBuffer.getSessionPrefix()", "testcase": false, "constructor": false}, {"identifier": "setDropOldEvents", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setDropOldEvents(boolean val)", "full_signature": "public void setDropOldEvents(boolean val)", "class_method_signature": "DbusEventBuffer.setDropOldEvents(boolean val)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "protected boolean isClosed()", "class_method_signature": "DbusEventBuffer.isClosed()", "testcase": false, "constructor": false}, {"identifier": "setClosed", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void setClosed()", "full_signature": "protected void setClosed()", "class_method_signature": "DbusEventBuffer.setClosed()", "testcase": false, "constructor": false}, {"identifier": "getPhysicalPartition", "parameters": "()", "modifiers": "public", "return": "PhysicalPartition", "signature": "PhysicalPartition getPhysicalPartition()", "full_signature": "public PhysicalPartition getPhysicalPartition()", "class_method_signature": "DbusEventBuffer.getPhysicalPartition()", "testcase": false, "constructor": false}, {"identifier": "increaseRefCounter", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void increaseRefCounter()", "full_signature": "public synchronized void increaseRefCounter()", "class_method_signature": "DbusEventBuffer.increaseRefCounter()", "testcase": false, "constructor": false}, {"identifier": "decreaseRefCounter", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void decreaseRefCounter()", "full_signature": "public synchronized void decreaseRefCounter()", "class_method_signature": "DbusEventBuffer.decreaseRefCounter()", "testcase": false, "constructor": false}, {"identifier": "shouldBeRemoved", "parameters": "(boolean now)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean shouldBeRemoved(boolean now)", "full_signature": "public synchronized boolean shouldBeRemoved(boolean now)", "class_method_signature": "DbusEventBuffer.shouldBeRemoved(boolean now)", "testcase": false, "constructor": false}, {"identifier": "getRefCount", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getRefCount()", "full_signature": "public synchronized int getRefCount()", "class_method_signature": "DbusEventBuffer.getRefCount()", "testcase": false, "constructor": false}, {"identifier": "forceReleaseDirectMemory", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void forceReleaseDirectMemory()", "full_signature": "public void forceReleaseDirectMemory()", "class_method_signature": "DbusEventBuffer.forceReleaseDirectMemory()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "DbusEventBuffer.clear()", "testcase": false, "constructor": false}, {"identifier": "clearAndStart", "parameters": "(boolean start, long prevScn)", "modifiers": "private", "return": "void", "signature": "void clearAndStart(boolean start, long prevScn)", "full_signature": "private void clearAndStart(boolean start, long prevScn)", "class_method_signature": "DbusEventBuffer.clearAndStart(boolean start, long prevScn)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(long prevScn)", "modifiers": "public", "return": "void", "signature": "void reset(long prevScn)", "full_signature": "public void reset(long prevScn)", "class_method_signature": "DbusEventBuffer.reset(long prevScn)", "testcase": false, "constructor": false}, {"identifier": "getTimestampOfFirstEvent", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimestampOfFirstEvent()", "full_signature": "public long getTimestampOfFirstEvent()", "class_method_signature": "DbusEventBuffer.getTimestampOfFirstEvent()", "testcase": false, "constructor": false}, {"identifier": "lockFreeClear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void lockFreeClear()", "full_signature": "private void lockFreeClear()", "class_method_signature": "DbusEventBuffer.lockFreeClear()", "testcase": false, "constructor": false}, {"identifier": "DbusEventBuffer", "parameters": "(Config config)", "modifiers": "public", "return": "", "signature": " DbusEventBuffer(Config config)", "full_signature": "public  DbusEventBuffer(Config config)", "class_method_signature": "DbusEventBuffer.DbusEventBuffer(Config config)", "testcase": false, "constructor": true}, {"identifier": "DbusEventBuffer", "parameters": "(StaticConfig config)", "modifiers": "public", "return": "", "signature": " DbusEventBuffer(StaticConfig config)", "full_signature": "public  DbusEventBuffer(StaticConfig config)", "class_method_signature": "DbusEventBuffer.DbusEventBuffer(StaticConfig config)", "testcase": false, "constructor": true}, {"identifier": "DbusEventBuffer", "parameters": "(StaticConfig config, PhysicalPartition pPartition, DbusEventFactory eventFactory)", "modifiers": "public", "return": "", "signature": " DbusEventBuffer(StaticConfig config, PhysicalPartition pPartition, DbusEventFactory eventFactory)", "full_signature": "public  DbusEventBuffer(StaticConfig config, PhysicalPartition pPartition, DbusEventFactory eventFactory)", "class_method_signature": "DbusEventBuffer.DbusEventBuffer(StaticConfig config, PhysicalPartition pPartition, DbusEventFactory eventFactory)", "testcase": false, "constructor": true}, {"identifier": "DbusEventBuffer", "parameters": "(long maxEventBufferSize, int maxIndividualBufferSize, int maxIndexSize,\n                         int initReadBufferSize, int maxEventSize,\n                         AllocationPolicy allocationPolicy, File mmapDirectory,\n                         QueuePolicy queuePolicy, RelayEventTraceOption traceOption,\n                         PhysicalPartition physicalPartition, AssertLevel assertLevel, long bufRemovalWaitPeriod,\n                         boolean restoreBuffers, boolean validateEventesInRestoredBuffers,\n                         boolean enableScnIndex, DbusEventFactory eventFactory)", "modifiers": "public", "return": "", "signature": " DbusEventBuffer(long maxEventBufferSize, int maxIndividualBufferSize, int maxIndexSize,\n                         int initReadBufferSize, int maxEventSize,\n                         AllocationPolicy allocationPolicy, File mmapDirectory,\n                         QueuePolicy queuePolicy, RelayEventTraceOption traceOption,\n                         PhysicalPartition physicalPartition, AssertLevel assertLevel, long bufRemovalWaitPeriod,\n                         boolean restoreBuffers, boolean validateEventesInRestoredBuffers,\n                         boolean enableScnIndex, DbusEventFactory eventFactory)", "full_signature": "public  DbusEventBuffer(long maxEventBufferSize, int maxIndividualBufferSize, int maxIndexSize,\n                         int initReadBufferSize, int maxEventSize,\n                         AllocationPolicy allocationPolicy, File mmapDirectory,\n                         QueuePolicy queuePolicy, RelayEventTraceOption traceOption,\n                         PhysicalPartition physicalPartition, AssertLevel assertLevel, long bufRemovalWaitPeriod,\n                         boolean restoreBuffers, boolean validateEventesInRestoredBuffers,\n                         boolean enableScnIndex, DbusEventFactory eventFactory)", "class_method_signature": "DbusEventBuffer.DbusEventBuffer(long maxEventBufferSize, int maxIndividualBufferSize, int maxIndexSize,\n                         int initReadBufferSize, int maxEventSize,\n                         AllocationPolicy allocationPolicy, File mmapDirectory,\n                         QueuePolicy queuePolicy, RelayEventTraceOption traceOption,\n                         PhysicalPartition physicalPartition, AssertLevel assertLevel, long bufRemovalWaitPeriod,\n                         boolean restoreBuffers, boolean validateEventesInRestoredBuffers,\n                         boolean enableScnIndex, DbusEventFactory eventFactory)", "testcase": false, "constructor": true}, {"identifier": "metaFileName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String metaFileName()", "full_signature": " String metaFileName()", "class_method_signature": "DbusEventBuffer.metaFileName()", "testcase": false, "constructor": false}, {"identifier": "setAndValidateMMappedBuffers", "parameters": "(DbusEventBufferMetaInfo mi)", "modifiers": "private", "return": "void", "signature": "void setAndValidateMMappedBuffers(DbusEventBufferMetaInfo mi)", "full_signature": "private void setAndValidateMMappedBuffers(DbusEventBufferMetaInfo mi)", "class_method_signature": "DbusEventBuffer.setAndValidateMMappedBuffers(DbusEventBufferMetaInfo mi)", "testcase": false, "constructor": false}, {"identifier": "validateEventsInBuffer", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validateEventsInBuffer()", "full_signature": "public void validateEventsInBuffer()", "class_method_signature": "DbusEventBuffer.validateEventsInBuffer()", "testcase": false, "constructor": false}, {"identifier": "validateMetaData", "parameters": "(long maxTotalEventBufferSize, DbusEventBufferMetaInfo mi)", "modifiers": "private", "return": "void", "signature": "void validateMetaData(long maxTotalEventBufferSize, DbusEventBufferMetaInfo mi)", "full_signature": "private void validateMetaData(long maxTotalEventBufferSize, DbusEventBufferMetaInfo mi)", "class_method_signature": "DbusEventBuffer.validateMetaData(long maxTotalEventBufferSize, DbusEventBufferMetaInfo mi)", "testcase": false, "constructor": false}, {"identifier": "allocateByteBuffer", "parameters": "(int size, ByteOrder byteOrder,\n                                       AllocationPolicy allocationPolicy,\n                                       boolean restoreBuffers,\n                                       File mmapSessionDir,\n                                       File mmapFile)", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer allocateByteBuffer(int size, ByteOrder byteOrder,\n                                       AllocationPolicy allocationPolicy,\n                                       boolean restoreBuffers,\n                                       File mmapSessionDir,\n                                       File mmapFile)", "full_signature": "public static ByteBuffer allocateByteBuffer(int size, ByteOrder byteOrder,\n                                       AllocationPolicy allocationPolicy,\n                                       boolean restoreBuffers,\n                                       File mmapSessionDir,\n                                       File mmapFile)", "class_method_signature": "DbusEventBuffer.allocateByteBuffer(int size, ByteOrder byteOrder,\n                                       AllocationPolicy allocationPolicy,\n                                       boolean restoreBuffers,\n                                       File mmapSessionDir,\n                                       File mmapFile)", "testcase": false, "constructor": false}, {"identifier": "createEventTraceListener", "parameters": "(RelayEventTraceOption traceOption,\n                                                                 String pSourceName)", "modifiers": "private", "return": "InternalDatabusEventsListener", "signature": "InternalDatabusEventsListener createEventTraceListener(RelayEventTraceOption traceOption,\n                                                                 String pSourceName)", "full_signature": "private InternalDatabusEventsListener createEventTraceListener(RelayEventTraceOption traceOption,\n                                                                 String pSourceName)", "class_method_signature": "DbusEventBuffer.createEventTraceListener(RelayEventTraceOption traceOption,\n                                                                 String pSourceName)", "testcase": false, "constructor": false}, {"identifier": "getRwLockProvider", "parameters": "()", "modifiers": "", "return": "RangeBasedReaderWriterLock", "signature": "RangeBasedReaderWriterLock getRwLockProvider()", "full_signature": " RangeBasedReaderWriterLock getRwLockProvider()", "class_method_signature": "DbusEventBuffer.getRwLockProvider()", "testcase": false, "constructor": false}, {"identifier": "setPrevScn", "parameters": "(long scn)", "modifiers": "public", "return": "void", "signature": "void setPrevScn(long scn)", "full_signature": "public void setPrevScn(long scn)", "class_method_signature": "DbusEventBuffer.setPrevScn(long scn)", "testcase": false, "constructor": false}, {"identifier": "getPrevScn", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getPrevScn()", "full_signature": "@Override public long getPrevScn()", "class_method_signature": "DbusEventBuffer.getPrevScn()", "testcase": false, "constructor": false}, {"identifier": "getMinScn", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getMinScn()", "full_signature": "@Override public long getMinScn()", "class_method_signature": "DbusEventBuffer.getMinScn()", "testcase": false, "constructor": false}, {"identifier": "resetWindowState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetWindowState()", "full_signature": "private void resetWindowState()", "class_method_signature": "DbusEventBuffer.resetWindowState()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(long startScn)", "modifiers": "@Override public", "return": "void", "signature": "void start(long startScn)", "full_signature": "@Override public void start(long startScn)", "class_method_signature": "DbusEventBuffer.start(long startScn)", "testcase": false, "constructor": false}, {"identifier": "startEvents", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startEvents()", "full_signature": "@Override public void startEvents()", "class_method_signature": "DbusEventBuffer.startEvents()", "testcase": false, "constructor": false}, {"identifier": "appendEvent", "parameters": "(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing)", "full_signature": "@Override public boolean appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing)", "class_method_signature": "DbusEventBuffer.appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing)", "testcase": false, "constructor": false}, {"identifier": "appendEvent", "parameters": "(\n                             DbusEventKey key,\n                             long sequenceId,\n                             short pPartitionId,\n                             short logicalPartitionId,\n                             long timeStampInNanos,\n                             short srcId,\n                             byte[] schemaId,\n                             byte[] value,\n                             boolean enableTracing,\n                             DbusEventsStatisticsCollector statsCollector)", "modifiers": "@Override @Deprecated public", "return": "boolean", "signature": "boolean appendEvent(\n                             DbusEventKey key,\n                             long sequenceId,\n                             short pPartitionId,\n                             short logicalPartitionId,\n                             long timeStampInNanos,\n                             short srcId,\n                             byte[] schemaId,\n                             byte[] value,\n                             boolean enableTracing,\n                             DbusEventsStatisticsCollector statsCollector)", "full_signature": "@Override @Deprecated public boolean appendEvent(\n                             DbusEventKey key,\n                             long sequenceId,\n                             short pPartitionId,\n                             short logicalPartitionId,\n                             long timeStampInNanos,\n                             short srcId,\n                             byte[] schemaId,\n                             byte[] value,\n                             boolean enableTracing,\n                             DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.appendEvent(\n                             DbusEventKey key,\n                             long sequenceId,\n                             short pPartitionId,\n                             short logicalPartitionId,\n                             long timeStampInNanos,\n                             short srcId,\n                             byte[] schemaId,\n                             byte[] value,\n                             boolean enableTracing,\n                             DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "appendEvent", "parameters": "(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, DbusEventsStatisticsCollector statsCollector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, DbusEventsStatisticsCollector statsCollector)", "full_signature": "@Override public boolean appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "appendEvent", "parameters": "(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, boolean isReplicated, DbusEventsStatisticsCollector statsCollector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, boolean isReplicated, DbusEventsStatisticsCollector statsCollector)", "full_signature": "@Override public boolean appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, boolean isReplicated, DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.appendEvent(DbusEventKey key, short pPartitionId, short lPartitionId,\n                             long timeStamp, short srcId, byte[] schemaId, byte[] value,\n                             boolean enableTracing, boolean isReplicated, DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "appendEvent", "parameters": "(DbusEventKey key,\n                             DbusEventInfo eventInfo,\n                             DbusEventsStatisticsCollector statsCollector)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appendEvent(DbusEventKey key,\n                             DbusEventInfo eventInfo,\n                             DbusEventsStatisticsCollector statsCollector)", "full_signature": "@Override public boolean appendEvent(DbusEventKey key,\n                             DbusEventInfo eventInfo,\n                             DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.appendEvent(DbusEventKey key,\n                             DbusEventInfo eventInfo,\n                             DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "prepareForAppend", "parameters": "(final int dbusEventSize)", "modifiers": "private", "return": "void", "signature": "void prepareForAppend(final int dbusEventSize)", "full_signature": "private void prepareForAppend(final int dbusEventSize)", "class_method_signature": "DbusEventBuffer.prepareForAppend(final int dbusEventSize)", "testcase": false, "constructor": false}, {"identifier": "finalizeAppend", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void finalizeAppend()", "full_signature": "private void finalizeAppend()", "class_method_signature": "DbusEventBuffer.finalizeAppend()", "testcase": false, "constructor": false}, {"identifier": "rollbackEvents", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rollbackEvents()", "full_signature": "@Override public void rollbackEvents()", "class_method_signature": "DbusEventBuffer.rollbackEvents()", "testcase": false, "constructor": false}, {"identifier": "rollbackCurrentWritePosition", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void rollbackCurrentWritePosition()", "full_signature": "private void rollbackCurrentWritePosition()", "class_method_signature": "DbusEventBuffer.rollbackCurrentWritePosition()", "testcase": false, "constructor": false}, {"identifier": "endEvents", "parameters": "(boolean updateWindowScn, long windowScn,\n                        boolean updateIndex, boolean callListener,\n                        DbusEventsStatisticsCollector statsCollector)", "modifiers": "@Override public", "return": "void", "signature": "void endEvents(boolean updateWindowScn, long windowScn,\n                        boolean updateIndex, boolean callListener,\n                        DbusEventsStatisticsCollector statsCollector)", "full_signature": "@Override public void endEvents(boolean updateWindowScn, long windowScn,\n                        boolean updateIndex, boolean callListener,\n                        DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.endEvents(boolean updateWindowScn, long windowScn,\n                        boolean updateIndex, boolean callListener,\n                        DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "endEvents", "parameters": "(long sequenceId)", "modifiers": "public", "return": "void", "signature": "void endEvents(long sequenceId)", "full_signature": "public void endEvents(long sequenceId)", "class_method_signature": "DbusEventBuffer.endEvents(long sequenceId)", "testcase": false, "constructor": false}, {"identifier": "endEvents", "parameters": "(long eventWindowScn,DbusEventsStatisticsCollector statsCollector)", "modifiers": "@Override public", "return": "void", "signature": "void endEvents(long eventWindowScn,DbusEventsStatisticsCollector statsCollector)", "full_signature": "@Override public void endEvents(long eventWindowScn,DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.endEvents(long eventWindowScn,DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "streamEvents", "parameters": "(Checkpoint checkPoint,\n                                         WritableByteChannel writeChannel,\n                                         StreamEventsArgs args\n                                         )", "modifiers": "public", "return": "StreamEventsResult", "signature": "StreamEventsResult streamEvents(Checkpoint checkPoint,\n                                         WritableByteChannel writeChannel,\n                                         StreamEventsArgs args\n                                         )", "full_signature": "public StreamEventsResult streamEvents(Checkpoint checkPoint,\n                                         WritableByteChannel writeChannel,\n                                         StreamEventsArgs args\n                                         )", "class_method_signature": "DbusEventBuffer.streamEvents(Checkpoint checkPoint,\n                                         WritableByteChannel writeChannel,\n                                         StreamEventsArgs args\n                                         )", "testcase": false, "constructor": false}, {"identifier": "batchWrite", "parameters": "(Range range, WritableByteChannel writeChannel, Encoding encoding)", "modifiers": "public", "return": "int", "signature": "int batchWrite(Range range, WritableByteChannel writeChannel, Encoding encoding)", "full_signature": "public int batchWrite(Range range, WritableByteChannel writeChannel, Encoding encoding)", "class_method_signature": "DbusEventBuffer.batchWrite(Range range, WritableByteChannel writeChannel, Encoding encoding)", "testcase": false, "constructor": false}, {"identifier": "empty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean empty()", "full_signature": "@Override public boolean empty()", "class_method_signature": "DbusEventBuffer.empty()", "testcase": false, "constructor": false}, {"identifier": "releaseWriteLock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseWriteLock()", "full_signature": "private void releaseWriteLock()", "class_method_signature": "DbusEventBuffer.releaseWriteLock()", "testcase": false, "constructor": false}, {"identifier": "acquireWriteRangeLock", "parameters": "(long startOffset, long endOffset)", "modifiers": "private", "return": "void", "signature": "void acquireWriteRangeLock(long startOffset, long endOffset)", "full_signature": "private void acquireWriteRangeLock(long startOffset, long endOffset)", "class_method_signature": "DbusEventBuffer.acquireWriteRangeLock(long startOffset, long endOffset)", "testcase": false, "constructor": false}, {"identifier": "releaseWriteRangeLock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseWriteRangeLock()", "full_signature": "private void releaseWriteRangeLock()", "class_method_signature": "DbusEventBuffer.releaseWriteRangeLock()", "testcase": false, "constructor": false}, {"identifier": "acquireWriteLock", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void acquireWriteLock()", "full_signature": "private void acquireWriteLock()", "class_method_signature": "DbusEventBuffer.acquireWriteLock()", "testcase": false, "constructor": false}, {"identifier": "getReadStatus", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReadStatus()", "full_signature": "public int getReadStatus()", "class_method_signature": "DbusEventBuffer.getReadStatus()", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(ReadableByteChannel readChannel, Encoding _encoding)", "modifiers": "public", "return": "int", "signature": "int readEvents(ReadableByteChannel readChannel, Encoding _encoding)", "full_signature": "public int readEvents(ReadableByteChannel readChannel, Encoding _encoding)", "class_method_signature": "DbusEventBuffer.readEvents(ReadableByteChannel readChannel, Encoding _encoding)", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(ReadableByteChannel readChannel)", "modifiers": "public", "return": "int", "signature": "int readEvents(ReadableByteChannel readChannel)", "full_signature": "public int readEvents(ReadableByteChannel readChannel)", "class_method_signature": "DbusEventBuffer.readEvents(ReadableByteChannel readChannel)", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(ReadableByteChannel readChannel,\n                        DbusEventsStatisticsCollector statsCollector)", "modifiers": "public", "return": "int", "signature": "int readEvents(ReadableByteChannel readChannel,\n                        DbusEventsStatisticsCollector statsCollector)", "full_signature": "public int readEvents(ReadableByteChannel readChannel,\n                        DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.readEvents(ReadableByteChannel readChannel,\n                        DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners)", "modifiers": "public", "return": "int", "signature": "int readEvents(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners)", "full_signature": "public int readEvents(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners)", "class_method_signature": "DbusEventBuffer.readEvents(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners)", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners,\n                        DbusEventsStatisticsCollector statsCollector)", "modifiers": "@Override public", "return": "int", "signature": "int readEvents(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners,\n                        DbusEventsStatisticsCollector statsCollector)", "full_signature": "@Override public int readEvents(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners,\n                        DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.readEvents(ReadableByteChannel readChannel,\n                        Iterable<InternalDatabusEventsListener> eventListeners,\n                        DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "readEventsInternal", "parameters": "(ReadableByteChannel readChannel,\n                                 Iterable<InternalDatabusEventsListener> eventListeners,\n                                 DbusEventsStatisticsCollector statsCollector)", "modifiers": "private", "return": "int", "signature": "int readEventsInternal(ReadableByteChannel readChannel,\n                                 Iterable<InternalDatabusEventsListener> eventListeners,\n                                 DbusEventsStatisticsCollector statsCollector)", "full_signature": "private int readEventsInternal(ReadableByteChannel readChannel,\n                                 Iterable<InternalDatabusEventsListener> eventListeners,\n                                 DbusEventsStatisticsCollector statsCollector)", "class_method_signature": "DbusEventBuffer.readEventsInternal(ReadableByteChannel readChannel,\n                                 Iterable<InternalDatabusEventsListener> eventListeners,\n                                 DbusEventsStatisticsCollector statsCollector)", "testcase": false, "constructor": false}, {"identifier": "readEventsFromChannel", "parameters": "(ReadableByteChannel readChannel,\n                                        ByteBuffer readBuffer, boolean logDebugEnabled)", "modifiers": "private", "return": "boolean", "signature": "boolean readEventsFromChannel(ReadableByteChannel readChannel,\n                                        ByteBuffer readBuffer, boolean logDebugEnabled)", "full_signature": "private boolean readEventsFromChannel(ReadableByteChannel readChannel,\n                                        ByteBuffer readBuffer, boolean logDebugEnabled)", "class_method_signature": "DbusEventBuffer.readEventsFromChannel(ReadableByteChannel readChannel,\n                                        ByteBuffer readBuffer, boolean logDebugEnabled)", "testcase": false, "constructor": false}, {"identifier": "compactStgBuffer", "parameters": "(ReadEventsReadPosition readPos, boolean logDebugEnabled)", "modifiers": "private", "return": "void", "signature": "void compactStgBuffer(ReadEventsReadPosition readPos, boolean logDebugEnabled)", "full_signature": "private void compactStgBuffer(ReadEventsReadPosition readPos, boolean logDebugEnabled)", "class_method_signature": "DbusEventBuffer.compactStgBuffer(ReadEventsReadPosition readPos, boolean logDebugEnabled)", "testcase": false, "constructor": false}, {"identifier": "ensureFreeSpace", "parameters": "(long writeStartPos, long writeEndPos, boolean logDebugEnabled)", "modifiers": "private", "return": "boolean", "signature": "boolean ensureFreeSpace(long writeStartPos, long writeEndPos, boolean logDebugEnabled)", "full_signature": "private boolean ensureFreeSpace(long writeStartPos, long writeEndPos, boolean logDebugEnabled)", "class_method_signature": "DbusEventBuffer.ensureFreeSpace(long writeStartPos, long writeEndPos, boolean logDebugEnabled)", "testcase": false, "constructor": false}, {"identifier": "waitForReadEventsFreeSpace", "parameters": "(boolean logDebugEnabled,\n                                             long writeStartPosition,\n                                             long writeEndPosition)", "modifiers": "private", "return": "boolean", "signature": "boolean waitForReadEventsFreeSpace(boolean logDebugEnabled,\n                                             long writeStartPosition,\n                                             long writeEndPosition)", "full_signature": "private boolean waitForReadEventsFreeSpace(boolean logDebugEnabled,\n                                             long writeStartPosition,\n                                             long writeEndPosition)", "class_method_signature": "DbusEventBuffer.waitForReadEventsFreeSpace(boolean logDebugEnabled,\n                                             long writeStartPosition,\n                                             long writeEndPosition)", "testcase": false, "constructor": false}, {"identifier": "overwritesHead", "parameters": "(long writeStartPosition, long writeEndPosition)", "modifiers": "private", "return": "boolean", "signature": "boolean overwritesHead(long writeStartPosition, long writeEndPosition)", "full_signature": "private boolean overwritesHead(long writeStartPosition, long writeEndPosition)", "class_method_signature": "DbusEventBuffer.overwritesHead(long writeStartPosition, long writeEndPosition)", "testcase": false, "constructor": false}, {"identifier": "freeUpSpaceForReadEvents", "parameters": "(boolean logDebugEnabled, long writeStartPosition,\n                                        long writeEndPosition)", "modifiers": "private", "return": "void", "signature": "void freeUpSpaceForReadEvents(boolean logDebugEnabled, long writeStartPosition,\n                                        long writeEndPosition)", "full_signature": "private void freeUpSpaceForReadEvents(boolean logDebugEnabled, long writeStartPosition,\n                                        long writeEndPosition)", "class_method_signature": "DbusEventBuffer.freeUpSpaceForReadEvents(boolean logDebugEnabled, long writeStartPosition,\n                                        long writeEndPosition)", "testcase": false, "constructor": false}, {"identifier": "adjustByteBufferLimit", "parameters": "(long oldHeadPos)", "modifiers": "private", "return": "void", "signature": "void adjustByteBufferLimit(long oldHeadPos)", "full_signature": "private void adjustByteBufferLimit(long oldHeadPos)", "class_method_signature": "DbusEventBuffer.adjustByteBufferLimit(long oldHeadPos)", "testcase": false, "constructor": false}, {"identifier": "copyReadEventToEventBuffer", "parameters": "(ReadEventsReadPosition readPos,\n                                          ReadEventsWritePosition writePos,\n                                          Iterable<InternalDatabusEventsListener> eventListeners,\n                                          DbusEventsStatisticsCollector statsCollector,\n                                          boolean logDebugEnabled)", "modifiers": "private", "return": "void", "signature": "void copyReadEventToEventBuffer(ReadEventsReadPosition readPos,\n                                          ReadEventsWritePosition writePos,\n                                          Iterable<InternalDatabusEventsListener> eventListeners,\n                                          DbusEventsStatisticsCollector statsCollector,\n                                          boolean logDebugEnabled)", "full_signature": "private void copyReadEventToEventBuffer(ReadEventsReadPosition readPos,\n                                          ReadEventsWritePosition writePos,\n                                          Iterable<InternalDatabusEventsListener> eventListeners,\n                                          DbusEventsStatisticsCollector statsCollector,\n                                          boolean logDebugEnabled)", "class_method_signature": "DbusEventBuffer.copyReadEventToEventBuffer(ReadEventsReadPosition readPos,\n                                          ReadEventsWritePosition writePos,\n                                          Iterable<InternalDatabusEventsListener> eventListeners,\n                                          DbusEventsStatisticsCollector statsCollector,\n                                          boolean logDebugEnabled)", "testcase": false, "constructor": false}, {"identifier": "updateNewReadEvent", "parameters": "(ReadEventsReadPosition readPos,\n                                 ReadEventsWritePosition writePos,\n    \t  \t\t\t\t\t     DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t     Iterable<InternalDatabusEventsListener> eventListeners,\n    \t  \t\t\t\t\t     boolean logDebugEnabled)", "modifiers": "private", "return": "int", "signature": "int updateNewReadEvent(ReadEventsReadPosition readPos,\n                                 ReadEventsWritePosition writePos,\n    \t  \t\t\t\t\t     DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t     Iterable<InternalDatabusEventsListener> eventListeners,\n    \t  \t\t\t\t\t     boolean logDebugEnabled)", "full_signature": "private int updateNewReadEvent(ReadEventsReadPosition readPos,\n                                 ReadEventsWritePosition writePos,\n    \t  \t\t\t\t\t     DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t     Iterable<InternalDatabusEventsListener> eventListeners,\n    \t  \t\t\t\t\t     boolean logDebugEnabled)", "class_method_signature": "DbusEventBuffer.updateNewReadEvent(ReadEventsReadPosition readPos,\n                                 ReadEventsWritePosition writePos,\n    \t  \t\t\t\t\t     DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t     Iterable<InternalDatabusEventsListener> eventListeners,\n    \t  \t\t\t\t\t     boolean logDebugEnabled)", "testcase": false, "constructor": false}, {"identifier": "updateScnIndexWithNewReadEvent", "parameters": "(ReadEventsReadPosition readPos,\n                                             ReadEventsWritePosition writePos,\n                                             Iterable<InternalDatabusEventsListener> eventListeners,\n                                             DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t\t\t\t\t boolean logDebugEnabled)", "modifiers": "private", "return": "int", "signature": "int updateScnIndexWithNewReadEvent(ReadEventsReadPosition readPos,\n                                             ReadEventsWritePosition writePos,\n                                             Iterable<InternalDatabusEventsListener> eventListeners,\n                                             DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t\t\t\t\t boolean logDebugEnabled)", "full_signature": "private int updateScnIndexWithNewReadEvent(ReadEventsReadPosition readPos,\n                                             ReadEventsWritePosition writePos,\n                                             Iterable<InternalDatabusEventsListener> eventListeners,\n                                             DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t\t\t\t\t boolean logDebugEnabled)", "class_method_signature": "DbusEventBuffer.updateScnIndexWithNewReadEvent(ReadEventsReadPosition readPos,\n                                             ReadEventsWritePosition writePos,\n                                             Iterable<InternalDatabusEventsListener> eventListeners,\n                                             DbusEventsStatisticsCollector statsCollector,\n    \t  \t\t\t\t\t\t\t\t\t boolean logDebugEnabled)", "testcase": false, "constructor": false}, {"identifier": "callListeners", "parameters": "(DbusEventInternalWritable event, long currentPosition,\n                             Iterable<InternalDatabusEventsListener> eventListeners)", "modifiers": "private", "return": "void", "signature": "void callListeners(DbusEventInternalWritable event, long currentPosition,\n                             Iterable<InternalDatabusEventsListener> eventListeners)", "full_signature": "private void callListeners(DbusEventInternalWritable event, long currentPosition,\n                             Iterable<InternalDatabusEventsListener> eventListeners)", "class_method_signature": "DbusEventBuffer.callListeners(DbusEventInternalWritable event, long currentPosition,\n                             Iterable<InternalDatabusEventsListener> eventListeners)", "testcase": false, "constructor": false}, {"identifier": "eventAtPosition", "parameters": "(long pos)", "modifiers": "private", "return": "DbusEvent", "signature": "DbusEvent eventAtPosition(long pos)", "full_signature": "private DbusEvent eventAtPosition(long pos)", "class_method_signature": "DbusEventBuffer.eventAtPosition(long pos)", "testcase": false, "constructor": false}, {"identifier": "logSequenceErrorPackets", "parameters": "(ReadEventsReadPosition readPos)", "modifiers": "private", "return": "String", "signature": "String logSequenceErrorPackets(ReadEventsReadPosition readPos)", "full_signature": "private String logSequenceErrorPackets(ReadEventsReadPosition readPos)", "class_method_signature": "DbusEventBuffer.logSequenceErrorPackets(ReadEventsReadPosition readPos)", "testcase": false, "constructor": false}, {"identifier": "moveHead", "parameters": "(long proposedHead, long newScn, long newHeadTsNs, boolean logDebugEnabled)", "modifiers": "protected", "return": "void", "signature": "void moveHead(long proposedHead, long newScn, long newHeadTsNs, boolean logDebugEnabled)", "full_signature": "protected void moveHead(long proposedHead, long newScn, long newHeadTsNs, boolean logDebugEnabled)", "class_method_signature": "DbusEventBuffer.moveHead(long proposedHead, long newScn, long newHeadTsNs, boolean logDebugEnabled)", "testcase": false, "constructor": false}, {"identifier": "updateFirstEventMetadata", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateFirstEventMetadata()", "full_signature": "private void updateFirstEventMetadata()", "class_method_signature": "DbusEventBuffer.updateFirstEventMetadata()", "testcase": false, "constructor": false}, {"identifier": "moveCurrentWritePosition", "parameters": "(long newWritePos)", "modifiers": "protected", "return": "void", "signature": "void moveCurrentWritePosition(long newWritePos)", "full_signature": "protected void moveCurrentWritePosition(long newWritePos)", "class_method_signature": "DbusEventBuffer.moveCurrentWritePosition(long newWritePos)", "testcase": false, "constructor": false}, {"identifier": "assertBuffersLimits", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean assertBuffersLimits()", "full_signature": " boolean assertBuffersLimits()", "class_method_signature": "DbusEventBuffer.assertBuffersLimits()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DbusEventBuffer.toString()", "testcase": false, "constructor": false}, {"identifier": "bufPositionInfo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String bufPositionInfo()", "full_signature": "public String bufPositionInfo()", "class_method_signature": "DbusEventBuffer.bufPositionInfo()", "testcase": false, "constructor": false}, {"identifier": "toShortString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toShortString()", "full_signature": "public String toShortString()", "class_method_signature": "DbusEventBuffer.toShortString()", "testcase": false, "constructor": false}, {"identifier": "waitForFreeSpaceUninterruptibly", "parameters": "(long freeSpaceThreshold)", "modifiers": "public", "return": "void", "signature": "void waitForFreeSpaceUninterruptibly(long freeSpaceThreshold)", "full_signature": "public void waitForFreeSpaceUninterruptibly(long freeSpaceThreshold)", "class_method_signature": "DbusEventBuffer.waitForFreeSpaceUninterruptibly(long freeSpaceThreshold)", "testcase": false, "constructor": false}, {"identifier": "waitForFreeSpace", "parameters": "(long freeSpaceThreshold)", "modifiers": "public", "return": "void", "signature": "void waitForFreeSpace(long freeSpaceThreshold)", "full_signature": "public void waitForFreeSpace(long freeSpaceThreshold)", "class_method_signature": "DbusEventBuffer.waitForFreeSpace(long freeSpaceThreshold)", "testcase": false, "constructor": false}, {"identifier": "waitForFreeSpace", "parameters": "(long freeSpaceThreshold, boolean interruptCaller)", "modifiers": "private", "return": "void", "signature": "void waitForFreeSpace(long freeSpaceThreshold, boolean interruptCaller)", "full_signature": "private void waitForFreeSpace(long freeSpaceThreshold, boolean interruptCaller)", "class_method_signature": "DbusEventBuffer.waitForFreeSpace(long freeSpaceThreshold, boolean interruptCaller)", "testcase": false, "constructor": false}, {"identifier": "getBufferFreeSpace", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getBufferFreeSpace()", "full_signature": "public long getBufferFreeSpace()", "class_method_signature": "DbusEventBuffer.getBufferFreeSpace()", "testcase": false, "constructor": false}, {"identifier": "getBufferFreeReadSpace", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBufferFreeReadSpace()", "full_signature": "public int getBufferFreeReadSpace()", "class_method_signature": "DbusEventBuffer.getBufferFreeReadSpace()", "testcase": false, "constructor": false}, {"identifier": "getMaxReadBufferCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxReadBufferCapacity()", "full_signature": "public int getMaxReadBufferCapacity()", "class_method_signature": "DbusEventBuffer.getMaxReadBufferCapacity()", "testcase": false, "constructor": false}, {"identifier": "remaining", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long remaining()", "full_signature": "private long remaining()", "class_method_signature": "DbusEventBuffer.remaining()", "testcase": false, "constructor": false}, {"identifier": "trackIterator", "parameters": "(BaseEventIterator eventIterator)", "modifiers": "protected", "return": "void", "signature": "void trackIterator(BaseEventIterator eventIterator)", "full_signature": "protected void trackIterator(BaseEventIterator eventIterator)", "class_method_signature": "DbusEventBuffer.trackIterator(BaseEventIterator eventIterator)", "testcase": false, "constructor": false}, {"identifier": "untrackIterator", "parameters": "(BaseEventIterator eventIterator)", "modifiers": "protected", "return": "void", "signature": "void untrackIterator(BaseEventIterator eventIterator)", "full_signature": "protected void untrackIterator(BaseEventIterator eventIterator)", "class_method_signature": "DbusEventBuffer.untrackIterator(BaseEventIterator eventIterator)", "testcase": false, "constructor": false}, {"identifier": "acquireIterator", "parameters": "(String iteratorName)", "modifiers": "public", "return": "DbusEventIterator", "signature": "DbusEventIterator acquireIterator(String iteratorName)", "full_signature": "public DbusEventIterator acquireIterator(String iteratorName)", "class_method_signature": "DbusEventBuffer.acquireIterator(String iteratorName)", "testcase": false, "constructor": false}, {"identifier": "acquireInternalIterator", "parameters": "(long head, long tail, String iteratorName)", "modifiers": "protected", "return": "InternalEventIterator", "signature": "InternalEventIterator acquireInternalIterator(long head, long tail, String iteratorName)", "full_signature": "protected InternalEventIterator acquireInternalIterator(long head, long tail, String iteratorName)", "class_method_signature": "DbusEventBuffer.acquireInternalIterator(long head, long tail, String iteratorName)", "testcase": false, "constructor": false}, {"identifier": "acquireLockFreeInternalIterator", "parameters": "(long head, long tail,\n                                                              String iteratorName)", "modifiers": "protected", "return": "BaseEventIterator", "signature": "BaseEventIterator acquireLockFreeInternalIterator(long head, long tail,\n                                                              String iteratorName)", "full_signature": "protected BaseEventIterator acquireLockFreeInternalIterator(long head, long tail,\n                                                              String iteratorName)", "class_method_signature": "DbusEventBuffer.acquireLockFreeInternalIterator(long head, long tail,\n                                                              String iteratorName)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<DbusEventInternalWritable>", "signature": "Iterator<DbusEventInternalWritable> iterator()", "full_signature": "@Override public Iterator<DbusEventInternalWritable> iterator()", "class_method_signature": "DbusEventBuffer.iterator()", "testcase": false, "constructor": false}, {"identifier": "releaseIterator", "parameters": "(BaseEventIterator e)", "modifiers": "public", "return": "void", "signature": "void releaseIterator(BaseEventIterator e)", "full_signature": "public void releaseIterator(BaseEventIterator e)", "class_method_signature": "DbusEventBuffer.releaseIterator(BaseEventIterator e)", "testcase": false, "constructor": false}, {"identifier": "addInternalListener", "parameters": "(InternalDatabusEventsListener listener)", "modifiers": "public", "return": "void", "signature": "void addInternalListener(InternalDatabusEventsListener listener)", "full_signature": "public void addInternalListener(InternalDatabusEventsListener listener)", "class_method_signature": "DbusEventBuffer.addInternalListener(InternalDatabusEventsListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeInternalListener", "parameters": "(InternalDatabusEventsListener listener)", "modifiers": "public", "return": "boolean", "signature": "boolean removeInternalListener(InternalDatabusEventsListener listener)", "full_signature": "public boolean removeInternalListener(InternalDatabusEventsListener listener)", "class_method_signature": "DbusEventBuffer.removeInternalListener(InternalDatabusEventsListener listener)", "testcase": false, "constructor": false}, {"identifier": "getHead", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getHead()", "full_signature": " long getHead()", "class_method_signature": "DbusEventBuffer.getHead()", "testcase": false, "constructor": false}, {"identifier": "getTail", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getTail()", "full_signature": " long getTail()", "class_method_signature": "DbusEventBuffer.getTail()", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "", "return": "ByteBuffer[]", "signature": "ByteBuffer[] getBuffer()", "full_signature": " ByteBuffer[] getBuffer()", "class_method_signature": "DbusEventBuffer.getBuffer()", "testcase": false, "constructor": false}, {"identifier": "getScnIndex", "parameters": "()", "modifiers": "", "return": "ScnIndex", "signature": "ScnIndex getScnIndex()", "full_signature": " ScnIndex getScnIndex()", "class_method_signature": "DbusEventBuffer.getScnIndex()", "testcase": false, "constructor": false}, {"identifier": "getBufferPositionParser", "parameters": "()", "modifiers": "public", "return": "BufferPositionParser", "signature": "BufferPositionParser getBufferPositionParser()", "full_signature": "public BufferPositionParser getBufferPositionParser()", "class_method_signature": "DbusEventBuffer.getBufferPositionParser()", "testcase": false, "constructor": false}, {"identifier": "setHead", "parameters": "(long offset)", "modifiers": "", "return": "void", "signature": "void setHead(long offset)", "full_signature": " void setHead(long offset)", "class_method_signature": "DbusEventBuffer.setHead(long offset)", "testcase": false, "constructor": false}, {"identifier": "setTail", "parameters": "(long offset)", "modifiers": "", "return": "void", "signature": "void setTail(long offset)", "full_signature": " void setTail(long offset)", "class_method_signature": "DbusEventBuffer.setTail(long offset)", "testcase": false, "constructor": false}, {"identifier": "deleteFirstWindow", "parameters": "()", "modifiers": "", "return": "long", "signature": "long deleteFirstWindow()", "full_signature": " long deleteFirstWindow()", "class_method_signature": "DbusEventBuffer.deleteFirstWindow()", "testcase": false, "constructor": false}, {"identifier": "recreateIndex", "parameters": "()", "modifiers": "", "return": "void", "signature": "void recreateIndex()", "full_signature": " void recreateIndex()", "class_method_signature": "DbusEventBuffer.recreateIndex()", "testcase": false, "constructor": false}, {"identifier": "getAllocatedSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getAllocatedSize()", "full_signature": "public long getAllocatedSize()", "class_method_signature": "DbusEventBuffer.getAllocatedSize()", "testcase": false, "constructor": false}, {"identifier": "lastWrittenScn", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long lastWrittenScn()", "full_signature": "@Override public long lastWrittenScn()", "class_method_signature": "DbusEventBuffer.lastWrittenScn()", "testcase": false, "constructor": false}, {"identifier": "setStartSCN", "parameters": "(long sinceSCN)", "modifiers": "@Override public", "return": "void", "signature": "void setStartSCN(long sinceSCN)", "full_signature": "@Override public void setStartSCN(long sinceSCN)", "class_method_signature": "DbusEventBuffer.setStartSCN(long sinceSCN)", "testcase": false, "constructor": false}, {"identifier": "setEmpty", "parameters": "(boolean val)", "modifiers": "", "return": "void", "signature": "void setEmpty(boolean val)", "full_signature": " void setEmpty(boolean val)", "class_method_signature": "DbusEventBuffer.setEmpty(boolean val)", "testcase": false, "constructor": false}, {"identifier": "getTimestampOfLatestDataEvent", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimestampOfLatestDataEvent()", "full_signature": "public long getTimestampOfLatestDataEvent()", "class_method_signature": "DbusEventBuffer.getTimestampOfLatestDataEvent()", "testcase": false, "constructor": false}, {"identifier": "closeBuffer", "parameters": "(boolean persistBuffer)", "modifiers": "public", "return": "void", "signature": "void closeBuffer(boolean persistBuffer)", "full_signature": "public void closeBuffer(boolean persistBuffer)", "class_method_signature": "DbusEventBuffer.closeBuffer(boolean persistBuffer)", "testcase": false, "constructor": false}, {"identifier": "removeMMapFiles", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeMMapFiles()", "full_signature": "public void removeMMapFiles()", "class_method_signature": "DbusEventBuffer.removeMMapFiles()", "testcase": false, "constructor": false}, {"identifier": "flushMMappedBuffers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void flushMMappedBuffers()", "full_signature": "private void flushMMappedBuffers()", "class_method_signature": "DbusEventBuffer.flushMMappedBuffers()", "testcase": false, "constructor": false}, {"identifier": "cleanUpPersistedBuffers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanUpPersistedBuffers()", "full_signature": "public void cleanUpPersistedBuffers()", "class_method_signature": "DbusEventBuffer.cleanUpPersistedBuffers()", "testcase": false, "constructor": false}, {"identifier": "saveBufferMetaInfo", "parameters": "(boolean infoOnly)", "modifiers": "public", "return": "void", "signature": "void saveBufferMetaInfo(boolean infoOnly)", "full_signature": "public void saveBufferMetaInfo(boolean infoOnly)", "class_method_signature": "DbusEventBuffer.saveBufferMetaInfo(boolean infoOnly)", "testcase": false, "constructor": false}, {"identifier": "saveDataBufferMetaInfo", "parameters": "(boolean infoOnly)", "modifiers": "private", "return": "void", "signature": "void saveDataBufferMetaInfo(boolean infoOnly)", "full_signature": "private void saveDataBufferMetaInfo(boolean infoOnly)", "class_method_signature": "DbusEventBuffer.saveDataBufferMetaInfo(boolean infoOnly)", "testcase": false, "constructor": false}, {"identifier": "initBuffersWithMetaInfo", "parameters": "(DbusEventBufferMetaInfo mi)", "modifiers": "public", "return": "void", "signature": "void initBuffersWithMetaInfo(DbusEventBufferMetaInfo mi)", "full_signature": "public void initBuffersWithMetaInfo(DbusEventBufferMetaInfo mi)", "class_method_signature": "DbusEventBuffer.initBuffersWithMetaInfo(DbusEventBufferMetaInfo mi)", "testcase": false, "constructor": false}, {"identifier": "getSeenEndOfPeriodScn", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSeenEndOfPeriodScn()", "full_signature": "public long getSeenEndOfPeriodScn()", "class_method_signature": "DbusEventBuffer.getSeenEndOfPeriodScn()", "testcase": false, "constructor": false}, {"identifier": "isSCNRegress", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSCNRegress()", "full_signature": "public boolean isSCNRegress()", "class_method_signature": "DbusEventBuffer.isSCNRegress()", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "()", "modifiers": "public", "return": "Logger", "signature": "Logger getLog()", "full_signature": "public Logger getLog()", "class_method_signature": "DbusEventBuffer.getLog()", "testcase": false, "constructor": false}, {"identifier": "hexdumpByteBufferContents", "parameters": "(long pos, int length)", "modifiers": "public", "return": "String", "signature": "String hexdumpByteBufferContents(long pos, int length)", "full_signature": "public String hexdumpByteBufferContents(long pos, int length)", "class_method_signature": "DbusEventBuffer.hexdumpByteBufferContents(long pos, int length)", "testcase": false, "constructor": false}, {"identifier": "injectEvent", "parameters": "(DbusEventInternalReadable event)", "modifiers": "public", "return": "boolean", "signature": "boolean injectEvent(DbusEventInternalReadable event)", "full_signature": "public boolean injectEvent(DbusEventInternalReadable event)", "class_method_signature": "DbusEventBuffer.injectEvent(DbusEventInternalReadable event)", "testcase": false, "constructor": false}, {"identifier": "getEventSerializationVersion", "parameters": "()", "modifiers": "public synchronized", "return": "byte", "signature": "byte getEventSerializationVersion()", "full_signature": "public synchronized byte getEventSerializationVersion()", "class_method_signature": "DbusEventBuffer.getEventSerializationVersion()", "testcase": false, "constructor": false}, {"identifier": "setEventSerializationVersion", "parameters": "(byte eventSerializationVersion)", "modifiers": "protected synchronized", "return": "void", "signature": "void setEventSerializationVersion(byte eventSerializationVersion)", "full_signature": "protected synchronized void setEventSerializationVersion(byte eventSerializationVersion)", "class_method_signature": "DbusEventBuffer.setEventSerializationVersion(byte eventSerializationVersion)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/DbusEventBuffer.java"}, "focal_method": {"identifier": "start", "parameters": "(long startScn)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void start(long startScn)\n  {\n    assert((_eventState == WindowState.INIT) || (_eventState == WindowState.ENDED));\n    startEvents();\n    endEvents(startScn);\n    this.setPrevScn(startScn);\n  }", "signature": "void start(long startScn)", "full_signature": "@Override public void start(long startScn)", "class_method_signature": "DbusEventBuffer.start(long startScn)", "testcase": false, "constructor": false, "invocations": ["startEvents", "endEvents", "setPrevScn"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}