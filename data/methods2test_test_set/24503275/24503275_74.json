{"test_class": {"identifier": "DataWordTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/vm/DataWordTest.java"}, "test_case": {"identifier": "testMod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMod() {\n\t\tString expected = \"000000000000000000000000000000000000000000000000000000000000001a\";\n\t\t\n\t\tbyte[] one = new byte[32];\n\t\tone[31] = 0x1e; // 0x000000000000000000000000000000000000000000000000000000000000001e\n\t\t\n\t\tbyte[] two = new byte[32];\n\t\tfor (int i = 0; i < two.length; i++) {\n\t\t\ttwo[i] = (byte) 0xff;\n\t\t}\n\t\ttwo[31] = 0x56; // 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff56\n\t\t\n\t\tDataWord x = new DataWord(one);// System.out.println(x.value());\n\t\tDataWord y = new DataWord(two);// System.out.println(y.value());\n\t\ty.mod(x);\n\t\tassertEquals(32, y.getData().length);\n\t\tassertEquals(expected, Hex.toHexString(y.getData()));\n\t}", "signature": "void testMod()", "full_signature": "@Test public void testMod()", "class_method_signature": "DataWordTest.testMod()", "testcase": true, "constructor": false, "invocations": ["mod", "assertEquals", "getData", "assertEquals", "toHexString", "getData"]}, "focal_class": {"identifier": "DataWord", "superclass": "", "interfaces": "implements Comparable<DataWord>", "fields": [{"original_string": "public static final BigInteger _2_256\t\t\t= BigInteger.valueOf(2).pow(256);", "modifier": "public static final", "type": "BigInteger", "declarator": "_2_256\t\t\t= BigInteger.valueOf(2).pow(256)", "var_name": "_2_256"}, {"original_string": "public static final BigInteger MAX_VALUE\t\t= _2_256.subtract(BigInteger.ONE);", "modifier": "public static final", "type": "BigInteger", "declarator": "MAX_VALUE\t\t= _2_256.subtract(BigInteger.ONE)", "var_name": "MAX_VALUE"}, {"original_string": "public static final DataWord ZERO \t\t\t\t= new DataWord(new byte[32]);", "modifier": "public static final", "type": "DataWord", "declarator": "ZERO \t\t\t\t= new DataWord(new byte[32])", "var_name": "ZERO"}, {"original_string": "public static final DataWord ZERO_EMPTY_ARRAY\t= new DataWord(new byte[0]);", "modifier": "public static final", "type": "DataWord", "declarator": "ZERO_EMPTY_ARRAY\t= new DataWord(new byte[0])", "var_name": "ZERO_EMPTY_ARRAY"}, {"original_string": "private byte[] data = new byte[32];", "modifier": "private", "type": "byte[]", "declarator": "data = new byte[32]", "var_name": "data"}], "methods": [{"identifier": "DataWord", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataWord()", "full_signature": "public  DataWord()", "class_method_signature": "DataWord.DataWord()", "testcase": false, "constructor": true}, {"identifier": "DataWord", "parameters": "(int num)", "modifiers": "public", "return": "", "signature": " DataWord(int num)", "full_signature": "public  DataWord(int num)", "class_method_signature": "DataWord.DataWord(int num)", "testcase": false, "constructor": true}, {"identifier": "DataWord", "parameters": "(long num)", "modifiers": "public", "return": "", "signature": " DataWord(long num)", "full_signature": "public  DataWord(long num)", "class_method_signature": "DataWord.DataWord(long num)", "testcase": false, "constructor": true}, {"identifier": "DataWord", "parameters": "(byte[] data)", "modifiers": "public", "return": "", "signature": " DataWord(byte[] data)", "full_signature": "public  DataWord(byte[] data)", "class_method_signature": "DataWord.DataWord(byte[] data)", "testcase": false, "constructor": true}, {"identifier": "getData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getData()", "full_signature": "public byte[] getData()", "class_method_signature": "DataWord.getData()", "testcase": false, "constructor": false}, {"identifier": "getNoLeadZeroesData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getNoLeadZeroesData()", "full_signature": "public byte[] getNoLeadZeroesData()", "class_method_signature": "DataWord.getNoLeadZeroesData()", "testcase": false, "constructor": false}, {"identifier": "getLast20Bytes", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getLast20Bytes()", "full_signature": "public byte[] getLast20Bytes()", "class_method_signature": "DataWord.getLast20Bytes()", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger value()", "full_signature": "public BigInteger value()", "class_method_signature": "DataWord.value()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int intValue()", "full_signature": "public int intValue()", "class_method_signature": "DataWord.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long longValue()", "full_signature": "public long longValue()", "class_method_signature": "DataWord.longValue()", "testcase": false, "constructor": false}, {"identifier": "sValue", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger sValue()", "full_signature": "public BigInteger sValue()", "class_method_signature": "DataWord.sValue()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "DataWord.isZero()", "testcase": false, "constructor": false}, {"identifier": "isNegative", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNegative()", "full_signature": "public boolean isNegative()", "class_method_signature": "DataWord.isNegative()", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(DataWord w2)", "modifiers": "public", "return": "DataWord", "signature": "DataWord and(DataWord w2)", "full_signature": "public DataWord and(DataWord w2)", "class_method_signature": "DataWord.and(DataWord w2)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(DataWord w2)", "modifiers": "public", "return": "DataWord", "signature": "DataWord or(DataWord w2)", "full_signature": "public DataWord or(DataWord w2)", "class_method_signature": "DataWord.or(DataWord w2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(DataWord w2)", "modifiers": "public", "return": "DataWord", "signature": "DataWord xor(DataWord w2)", "full_signature": "public DataWord xor(DataWord w2)", "class_method_signature": "DataWord.xor(DataWord w2)", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void negate()", "full_signature": "public void negate()", "class_method_signature": "DataWord.negate()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void add(DataWord word)", "full_signature": "public void add(DataWord word)", "class_method_signature": "DataWord.add(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "add2", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void add2(DataWord word)", "full_signature": "public void add2(DataWord word)", "class_method_signature": "DataWord.add2(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "mul", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void mul(DataWord word)", "full_signature": "public void mul(DataWord word)", "class_method_signature": "DataWord.mul(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void div(DataWord word)", "full_signature": "public void div(DataWord word)", "class_method_signature": "DataWord.div(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "sDiv", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void sDiv(DataWord word)", "full_signature": "public void sDiv(DataWord word)", "class_method_signature": "DataWord.sDiv(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "sub", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void sub(DataWord word)", "full_signature": "public void sub(DataWord word)", "class_method_signature": "DataWord.sub(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "exp", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void exp(DataWord word)", "full_signature": "public void exp(DataWord word)", "class_method_signature": "DataWord.exp(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void mod(DataWord word)", "full_signature": "public void mod(DataWord word)", "class_method_signature": "DataWord.mod(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "sMod", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "signature": "void sMod(DataWord word)", "full_signature": "public void sMod(DataWord word)", "class_method_signature": "DataWord.sMod(DataWord word)", "testcase": false, "constructor": false}, {"identifier": "addmod", "parameters": "(DataWord word1, DataWord word2)", "modifiers": "public", "return": "void", "signature": "void addmod(DataWord word1, DataWord word2)", "full_signature": "public void addmod(DataWord word1, DataWord word2)", "class_method_signature": "DataWord.addmod(DataWord word1, DataWord word2)", "testcase": false, "constructor": false}, {"identifier": "mulmod", "parameters": "(DataWord word1, DataWord word2)", "modifiers": "public", "return": "void", "signature": "void mulmod(DataWord word1, DataWord word2)", "full_signature": "public void mulmod(DataWord word1, DataWord word2)", "class_method_signature": "DataWord.mulmod(DataWord word1, DataWord word2)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "DataWord.toString()", "testcase": false, "constructor": false}, {"identifier": "shortHex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String shortHex()", "full_signature": "public String shortHex()", "class_method_signature": "DataWord.shortHex()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "public", "return": "DataWord", "signature": "DataWord clone()", "full_signature": "public DataWord clone()", "class_method_signature": "DataWord.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DataWord.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataWord.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(DataWord o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(DataWord o)", "full_signature": "@Override public int compareTo(DataWord o)", "class_method_signature": "DataWord.compareTo(DataWord o)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/vm/DataWord.java"}, "focal_method": {"identifier": "mod", "parameters": "(DataWord word)", "modifiers": "public", "return": "void", "body": "public void mod(DataWord word) {\n\n        if (word.isZero()) {\n            this.and(ZERO);\n            return;\n        }\n\n        BigInteger result = value().mod(word.value());\n        this.data = ByteUtil.copyToArray(result.and(MAX_VALUE));\n    }", "signature": "void mod(DataWord word)", "full_signature": "public void mod(DataWord word)", "class_method_signature": "DataWord.mod(DataWord word)", "testcase": false, "constructor": false, "invocations": ["isZero", "and", "mod", "value", "value", "copyToArray", "and"]}, "repository": {"repo_id": 24503275, "url": "https://github.com/ethereumj/ethereumj", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 27, "size": 13884, "license": "licensed"}}