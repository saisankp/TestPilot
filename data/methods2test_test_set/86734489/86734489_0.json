{"test_class": {"identifier": "AdditionalPropertiesParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "Kafka/KafkaJCAAPI/src/test/java/fish/payara/cloud/connectors/kafka/tools/AdditionalPropertiesParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "(String propertiesString, Properties resultingProperties)", "modifiers": "@Test(dataProvider = \"ParsingResultProvider\") public", "return": "void", "body": "@Test(dataProvider = \"ParsingResultProvider\")\n    public void testParse(String propertiesString, Properties resultingProperties) throws Exception {\n        assertEquals(resultingProperties, new AdditionalPropertiesParser(propertiesString).parse(), \"Wrong properties from parsing found.\");\n    }", "signature": "void testParse(String propertiesString, Properties resultingProperties)", "full_signature": "@Test(dataProvider = \"ParsingResultProvider\") public void testParse(String propertiesString, Properties resultingProperties)", "class_method_signature": "AdditionalPropertiesParserTest.testParse(String propertiesString, Properties resultingProperties)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parse"]}, "focal_class": {"identifier": "AdditionalPropertiesParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(AdditionalPropertiesParser.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(AdditionalPropertiesParser.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String LIST_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "LIST_SEPARATOR = \",\"", "var_name": "LIST_SEPARATOR"}, {"original_string": "private static final String KEY_VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "KEY_VALUE_SEPARATOR = \"=\"", "var_name": "KEY_VALUE_SEPARATOR"}, {"original_string": "private static final char ESCAPE_CHARACTER = '\\'';", "modifier": "private static final", "type": "char", "declarator": "ESCAPE_CHARACTER = '\\''", "var_name": "ESCAPE_CHARACTER"}, {"original_string": "private String propertiesString;", "modifier": "private", "type": "String", "declarator": "propertiesString", "var_name": "propertiesString"}], "methods": [{"identifier": "AdditionalPropertiesParser", "parameters": "(String propertiesString)", "modifiers": "public", "return": "", "signature": " AdditionalPropertiesParser(String propertiesString)", "full_signature": "public  AdditionalPropertiesParser(String propertiesString)", "class_method_signature": "AdditionalPropertiesParser.AdditionalPropertiesParser(String propertiesString)", "testcase": false, "constructor": true}, {"identifier": "split", "parameters": "(String propertiesString, String separator)", "modifiers": "private static", "return": "String[]", "signature": "String[] split(String propertiesString, String separator)", "full_signature": "private static String[] split(String propertiesString, String separator)", "class_method_signature": "AdditionalPropertiesParser.split(String propertiesString, String separator)", "testcase": false, "constructor": false}, {"identifier": "correctSingleQuotes", "parameters": "(String val)", "modifiers": "private static", "return": "String", "signature": "String correctSingleQuotes(String val)", "full_signature": "private static String correctSingleQuotes(String val)", "class_method_signature": "AdditionalPropertiesParser.correctSingleQuotes(String val)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(Properties base, Properties addtional)", "modifiers": "public static", "return": "Properties", "signature": "Properties merge(Properties base, Properties addtional)", "full_signature": "public static Properties merge(Properties base, Properties addtional)", "class_method_signature": "AdditionalPropertiesParser.merge(Properties base, Properties addtional)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties parse()", "full_signature": "public Properties parse()", "class_method_signature": "AdditionalPropertiesParser.parse()", "testcase": false, "constructor": false}], "file": "Kafka/KafkaJCAAPI/src/main/java/fish/payara/cloud/connectors/kafka/tools/AdditionalPropertiesParser.java"}, "focal_method": {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "Properties", "body": "public Properties parse() {\n        Properties properties = new Properties();\n        if (propertiesString != null) {\n            String lastKey = null;\n            final String[] splittedProperties = split(propertiesString, LIST_SEPARATOR);\n            for (String singleKeyValue : splittedProperties) {\n                final String[] splittedKeyValue = split(singleKeyValue, KEY_VALUE_SEPARATOR);\n                switch (splittedKeyValue.length) {\n                    case 2: {\n                        final String key = correctSingleQuotes(splittedKeyValue[0].trim());\n                        lastKey = key;\n                        final String value = correctSingleQuotes(splittedKeyValue[1].trim());\n                        final String existingValue = properties.getProperty(key);\n                        if (existingValue != null) {\n                            properties.setProperty(key, existingValue + LIST_SEPARATOR + value);\n                        } else {\n                            properties.setProperty(key, value);\n                        }\n                        break;\n                    }\n                    case 1: {\n                        if (lastKey != null) {\n                            final String value = correctSingleQuotes(splittedKeyValue[0].trim());\n                            // assume property to be list and use the last key to add to\n                            final String existingValue = properties.getProperty(lastKey);\n                            if (existingValue != null) {\n                                properties.setProperty(lastKey, existingValue + LIST_SEPARATOR + value);\n                            } else {\n                                properties.setProperty(lastKey, value);\n                            }\n                        }\n                        break;\n                    }\n                    default:\n                        LOG.warning(\"Found illegal properties \" + Arrays.toString(splittedKeyValue));\n\n                }\n            }\n        }\n        return properties;\n    }", "signature": "Properties parse()", "full_signature": "public Properties parse()", "class_method_signature": "AdditionalPropertiesParser.parse()", "testcase": false, "constructor": false, "invocations": ["split", "split", "correctSingleQuotes", "trim", "correctSingleQuotes", "trim", "getProperty", "setProperty", "setProperty", "correctSingleQuotes", "trim", "getProperty", "setProperty", "setProperty", "warning", "toString"]}, "repository": {"repo_id": 86734489, "url": "https://github.com/payara/Cloud-Connectors", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 30, "size": 311, "license": "licensed"}}