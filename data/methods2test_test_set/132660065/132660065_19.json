{"test_class": {"identifier": "JsonNodeConverterTest", "superclass": "extends AbstractCodecTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JsonNodeConverterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JsonNodeConverterTest.class)", "var_name": "LOG"}, {"original_string": "private final NodeConverter bindingSerializer;", "modifier": "private final", "type": "NodeConverter", "declarator": "bindingSerializer", "var_name": "bindingSerializer"}], "file": "lighty-core/lighty-codecs/src/test/java/io/lighty/codecs/JsonNodeConverterTest.java"}, "test_case": {"identifier": "testSerializeRpc_out", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerializeRpc_out() throws Exception {\n        Optional<RpcDefinition> loadedRpc = ConverterUtils.loadRpc(schemaContext, SIMPLE_IO_RPC_QNAME);\n        Writer serializedRpc =\n                bindingSerializer.serializeRpc(loadedRpc.get().getOutput(), testedSimpleRpcOutputNormalizedNodes);\n        Assert.assertFalse(Strings.isNullOrEmpty(serializedRpc.toString()));\n        LOG.info(serializedRpc.toString());\n    }", "signature": "void testSerializeRpc_out()", "full_signature": "@Test public void testSerializeRpc_out()", "class_method_signature": "JsonNodeConverterTest.testSerializeRpc_out()", "testcase": true, "constructor": false, "invocations": ["loadRpc", "serializeRpc", "getOutput", "get", "assertFalse", "isNullOrEmpty", "toString", "info", "toString"]}, "focal_class": {"identifier": "JsonNodeConverter", "superclass": "", "interfaces": "implements NodeConverter", "fields": [{"original_string": "private final SchemaContext schemaContext;", "modifier": "private final", "type": "SchemaContext", "declarator": "schemaContext", "var_name": "schemaContext"}], "methods": [{"identifier": "JsonNodeConverter", "parameters": "(final SchemaContext schemaContext)", "modifiers": "public", "return": "", "signature": " JsonNodeConverter(final SchemaContext schemaContext)", "full_signature": "public  JsonNodeConverter(final SchemaContext schemaContext)", "class_method_signature": "JsonNodeConverter.JsonNodeConverter(final SchemaContext schemaContext)", "testcase": false, "constructor": true}, {"identifier": "serializeData", "parameters": "(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer serializeData(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "full_signature": "@Override public Writer serializeData(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "class_method_signature": "JsonNodeConverter.serializeData(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "testcase": false, "constructor": false}, {"identifier": "serializeRpc", "parameters": "(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "modifiers": "@Override public", "return": "Writer", "signature": "Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "full_signature": "@Override public Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "class_method_signature": "JsonNodeConverter.serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(final SchemaNode schemaNode, final Reader inputData)", "modifiers": "@Override public", "return": "NormalizedNode<?, ?>", "signature": "NormalizedNode<?, ?> deserialize(final SchemaNode schemaNode, final Reader inputData)", "full_signature": "@Override public NormalizedNode<?, ?> deserialize(final SchemaNode schemaNode, final Reader inputData)", "class_method_signature": "JsonNodeConverter.deserialize(final SchemaNode schemaNode, final Reader inputData)", "testcase": false, "constructor": false}], "file": "lighty-core/lighty-codecs/src/main/java/io/lighty/codecs/JsonNodeConverter.java"}, "focal_method": {"identifier": "serializeRpc", "parameters": "(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "modifiers": "@Override public", "return": "Writer", "body": "@Override\n    public Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)\n            throws SerializationException {\n        Writer writer = new StringWriter();\n        JsonWriter jsonWriter = new JsonWriter(writer);\n        JSONCodecFactory jsonCodecFactory =\n                JSONCodecFactorySupplier.DRAFT_LHOTKA_NETMOD_YANG_JSON_02.createLazy(this.schemaContext);\n        String localName = schemaNode.getQName().getLocalName();\n        URI namespace = schemaNode.getQName().getNamespace();\n        NormalizedNodeStreamWriter create = JSONNormalizedNodeStreamWriter.createExclusiveWriter(jsonCodecFactory,\n                schemaNode.getPath(), namespace, jsonWriter);\n        try (NormalizedNodeWriter normalizedNodeWriter = NormalizedNodeWriter.forStreamWriter(create)) {\n            jsonWriter.beginObject().name(localName);\n            for (NormalizedNode<?, ?> child : ((ContainerNode) normalizedNode).getValue()) {\n                normalizedNodeWriter.write(child);\n            }\n            // XXX dirty check for end of object. When serializing RPCs with input/output which is not a\n            // container\n            // the object is not closed.\n            if (!writer.toString().endsWith(\"}\")) {\n                jsonWriter.endObject();\n            }\n        } catch (IOException ioe) {\n            throw new SerializationException(ioe);\n        }\n        return writer;\n    }", "signature": "Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "full_signature": "@Override public Writer serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "class_method_signature": "JsonNodeConverter.serializeRpc(final SchemaNode schemaNode, final NormalizedNode<?, ?> normalizedNode)", "testcase": false, "constructor": false, "invocations": ["createLazy", "getLocalName", "getQName", "getNamespace", "getQName", "createExclusiveWriter", "getPath", "forStreamWriter", "name", "beginObject", "getValue", "write", "endsWith", "toString", "endObject"]}, "repository": {"repo_id": 132660065, "url": "https://github.com/PantheonTechnologies/lighty-core", "stars": 45, "created": "5/8/2018 8:16:54 PM +00:00", "updates": "2020-01-22T13:46:21+00:00", "fork": "False", "license": "licensed"}}