{"test_class": {"identifier": "DistinctEliminatorTest", "superclass": "extends DistinctEliminatorTestBase", "interfaces": "implements TestBase.GenerateAndCheckResult", "fields": [], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/sql/optimizer/DistinctEliminatorTest.java"}, "test_case": {"identifier": "testEliminate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEliminate() throws Exception {\n        generateAndCheckResult();\n    }", "signature": "void testEliminate()", "full_signature": "@Test public void testEliminate()", "class_method_signature": "DistinctEliminatorTest.testEliminate()", "testcase": true, "constructor": false, "invocations": ["generateAndCheckResult"]}, "focal_class": {"identifier": "DistinctEliminator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SQLParserContext parserContext;", "modifier": "private", "type": "SQLParserContext", "declarator": "parserContext", "var_name": "parserContext"}, {"original_string": "private FromBaseTable unjoinedTable;", "modifier": "private", "type": "FromBaseTable", "declarator": "unjoinedTable", "var_name": "unjoinedTable"}], "methods": [{"identifier": "DistinctEliminator", "parameters": "(SQLParserContext parserContext)", "modifiers": "public", "return": "", "signature": " DistinctEliminator(SQLParserContext parserContext)", "full_signature": "public  DistinctEliminator(SQLParserContext parserContext)", "class_method_signature": "DistinctEliminator.DistinctEliminator(SQLParserContext parserContext)", "testcase": false, "constructor": true}, {"identifier": "eliminate", "parameters": "(DMLStatementNode stmt)", "modifiers": "public", "return": "DMLStatementNode", "signature": "DMLStatementNode eliminate(DMLStatementNode stmt)", "full_signature": "public DMLStatementNode eliminate(DMLStatementNode stmt)", "class_method_signature": "DistinctEliminator.eliminate(DMLStatementNode stmt)", "testcase": false, "constructor": false}, {"identifier": "selectNode", "parameters": "(SelectNode selectNode)", "modifiers": "protected", "return": "void", "signature": "void selectNode(SelectNode selectNode)", "full_signature": "protected void selectNode(SelectNode selectNode)", "class_method_signature": "DistinctEliminator.selectNode(SelectNode selectNode)", "testcase": false, "constructor": false}, {"identifier": "isTableDistinct", "parameters": "(FromTable fromTable,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "modifiers": "protected", "return": "boolean", "signature": "boolean isTableDistinct(FromTable fromTable,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "full_signature": "protected boolean isTableDistinct(FromTable fromTable,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "class_method_signature": "DistinctEliminator.isTableDistinct(FromTable fromTable,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "testcase": false, "constructor": false}, {"identifier": "isJoinDistinct", "parameters": "(JoinNode join,\n                                     ResultColumnList resultColumns, \n                                     AndNode whereConditions)", "modifiers": "protected", "return": "boolean", "signature": "boolean isJoinDistinct(JoinNode join,\n                                     ResultColumnList resultColumns, \n                                     AndNode whereConditions)", "full_signature": "protected boolean isJoinDistinct(JoinNode join,\n                                     ResultColumnList resultColumns, \n                                     AndNode whereConditions)", "class_method_signature": "DistinctEliminator.isJoinDistinct(JoinNode join,\n                                     ResultColumnList resultColumns, \n                                     AndNode whereConditions)", "testcase": false, "constructor": false}, {"identifier": "isTableDistinct", "parameters": "(FromBaseTable table, TableBinding binding,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "modifiers": "protected", "return": "boolean", "signature": "boolean isTableDistinct(FromBaseTable table, TableBinding binding,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "full_signature": "protected boolean isTableDistinct(FromBaseTable table, TableBinding binding,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "class_method_signature": "DistinctEliminator.isTableDistinct(FromBaseTable table, TableBinding binding,\n                                      ResultColumnList resultColumns, \n                                      AndNode whereConditions, AndNode joinConditions)", "testcase": false, "constructor": false}, {"identifier": "columnInResult", "parameters": "(Column column, ResultColumnList resultColumns)", "modifiers": "protected", "return": "boolean", "signature": "boolean columnInResult(Column column, ResultColumnList resultColumns)", "full_signature": "protected boolean columnInResult(Column column, ResultColumnList resultColumns)", "class_method_signature": "DistinctEliminator.columnInResult(Column column, ResultColumnList resultColumns)", "testcase": false, "constructor": false}, {"identifier": "columnInConditions", "parameters": "(Column column, AndNode conditions,\n                                         Set<FromTable> joinTables)", "modifiers": "protected", "return": "boolean", "signature": "boolean columnInConditions(Column column, AndNode conditions,\n                                         Set<FromTable> joinTables)", "full_signature": "protected boolean columnInConditions(Column column, AndNode conditions,\n                                         Set<FromTable> joinTables)", "class_method_signature": "DistinctEliminator.columnInConditions(Column column, AndNode conditions,\n                                         Set<FromTable> joinTables)", "testcase": false, "constructor": false}, {"identifier": "isColumnReference", "parameters": "(ValueNode value, Column column)", "modifiers": "protected", "return": "boolean", "signature": "boolean isColumnReference(ValueNode value, Column column)", "full_signature": "protected boolean isColumnReference(ValueNode value, Column column)", "class_method_signature": "DistinctEliminator.isColumnReference(ValueNode value, Column column)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/sql/optimizer/DistinctEliminator.java"}, "focal_method": {"identifier": "eliminate", "parameters": "(DMLStatementNode stmt)", "modifiers": "public", "return": "DMLStatementNode", "body": "public DMLStatementNode eliminate(DMLStatementNode stmt) throws StandardException {\n        ResultSetNode resultSet = stmt.getResultSetNode();\n        if (resultSet.getNodeType() == NodeTypes.SELECT_NODE) {\n            selectNode((SelectNode)resultSet);\n        }\n        return stmt;\n    }", "signature": "DMLStatementNode eliminate(DMLStatementNode stmt)", "full_signature": "public DMLStatementNode eliminate(DMLStatementNode stmt)", "class_method_signature": "DistinctEliminator.eliminate(DMLStatementNode stmt)", "testcase": false, "constructor": false, "invocations": ["getResultSetNode", "getNodeType", "selectNode"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}