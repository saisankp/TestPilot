{"test_class": {"identifier": "ClassFileMetadataReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InputStream input;", "modifier": "private", "type": "InputStream", "declarator": "input", "var_name": "input"}], "file": "sequencers/modeshape-sequencer-java/src/test/java/org/modeshape/sequencer/classfile/metadata/ClassFileMetadataReaderTest.java"}, "test_case": {"identifier": "shouldReadEnum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReadEnum() throws Exception {\n        String resourceName = \"/\" + MockEnum.class.getName().replace('.', '/') + \".class\";\n        input = getClass().getResourceAsStream(resourceName);\n\n        ClassMetadata cmd = ClassFileMetadataReader.instance(input);\n\n        assertThat(cmd, instanceOf(EnumMetadata.class));\n        EnumMetadata emd = (EnumMetadata)cmd;\n\n        List<String> enumValues = Arrays.asList(\"VALUE_A\", \"VALUE_B\", \"VALUE_C\");\n        assertThat(emd.getValues(), is(enumValues));\n\n        for (FieldMetadata fmd : emd.getFields()) {\n            assertThat(fmd.getName(), not(anyOf(is(\"VALUE_A\"), is(\"VALUE_B\"), is(\"VALUE_C\"))));\n        }\n\n    }", "signature": "void shouldReadEnum()", "full_signature": "@Test public void shouldReadEnum()", "class_method_signature": "ClassFileMetadataReaderTest.shouldReadEnum()", "testcase": true, "constructor": false, "invocations": ["replace", "getName", "getResourceAsStream", "getClass", "instance", "assertThat", "instanceOf", "asList", "assertThat", "getValues", "is", "getFields", "assertThat", "getName", "not", "anyOf", "is", "is", "is"]}, "focal_class": {"identifier": "ClassFileMetadataReader", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "instance", "parameters": "( InputStream stream )", "modifiers": "public static", "return": "ClassMetadata", "signature": "ClassMetadata instance( InputStream stream )", "full_signature": "public static ClassMetadata instance( InputStream stream )", "class_method_signature": "ClassFileMetadataReader.instance( InputStream stream )", "testcase": false, "constructor": false}], "file": "sequencers/modeshape-sequencer-java/src/main/java/org/modeshape/sequencer/classfile/metadata/ClassFileMetadataReader.java"}, "focal_method": {"identifier": "instance", "parameters": "( InputStream stream )", "modifiers": "public static", "return": "ClassMetadata", "body": "public static ClassMetadata instance( InputStream stream ) throws Exception {\n        ClassFile clazz = new ClassFile(new DataInputStream(stream));\n\n        if ((AccessFlag.ENUM & clazz.getAccessFlags()) == AccessFlag.ENUM) {\n            return new EnumMetadata(clazz);\n        }\n\n        return new ClassMetadata(clazz);\n    }", "signature": "ClassMetadata instance( InputStream stream )", "full_signature": "public static ClassMetadata instance( InputStream stream )", "class_method_signature": "ClassFileMetadataReader.instance( InputStream stream )", "testcase": false, "constructor": false, "invocations": ["getAccessFlags"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}