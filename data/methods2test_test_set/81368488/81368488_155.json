{"test_class": {"identifier": "ReplayablePseudoRandomTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReplayablePseudoRandom random;", "modifier": "private", "type": "ReplayablePseudoRandom", "declarator": "random", "var_name": "random"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/random/ReplayablePseudoRandomTest.java"}, "test_case": {"identifier": "nextFloatTestDistribution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nextFloatTestDistribution() {\n        int[] res = new int[10];\n        int error = 0;\n        for (int i = 0; i < 1000; i++) {\n            float number = random.nextFloat();\n            if (number > 1.0f) {\n                error++;\n            } else if (number < 0.1f) {\n                res[0]++;\n            } else if (number < 0.2f) {\n                res[1]++;\n            } else if (number < 0.3f) {\n                res[2]++;\n            } else if (number < 0.4f) {\n                res[3]++;\n            } else if (number < 0.5f) {\n                res[4]++;\n            } else if (number < 0.6f) {\n                res[5]++;\n            } else if (number < 0.7f) {\n                res[6]++;\n            } else if (number < 0.8f) {\n                res[7]++;\n            } else if (number < 0.9f) {\n                res[8]++;\n            } else if (number < 1.0f) {\n                res[9]++;\n            }\n        }\n        // each possibility should at least appear half of the perfect distribution ( =(1/10)/2 = 0.05)\n        assertTrue(res[0] / 1000d > 0.05);\n        assertTrue(res[1] / 1000d > 0.05);\n        assertTrue(res[2] / 1000d > 0.05);\n        assertTrue(res[3] / 1000d > 0.05);\n        assertTrue(res[4] / 1000d > 0.05);\n        assertTrue(res[5] / 1000d > 0.05);\n        assertTrue(res[6] / 1000d > 0.05);\n        assertTrue(res[7] / 1000d > 0.05);\n        assertTrue(res[8] / 1000d > 0.05);\n        assertTrue(res[9] / 1000d > 0.05);\n        assertEquals(0, error);\n    }", "signature": "void nextFloatTestDistribution()", "full_signature": "@Test public void nextFloatTestDistribution()", "class_method_signature": "ReplayablePseudoRandomTest.nextFloatTestDistribution()", "testcase": true, "constructor": false, "invocations": ["nextFloat", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertEquals"]}, "focal_class": {"identifier": "ReplayablePseudoRandom", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double seed;", "modifier": "private", "type": "double", "declarator": "seed", "var_name": "seed"}], "methods": [{"identifier": "ReplayablePseudoRandom", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReplayablePseudoRandom()", "full_signature": "public  ReplayablePseudoRandom()", "class_method_signature": "ReplayablePseudoRandom.ReplayablePseudoRandom()", "testcase": false, "constructor": true}, {"identifier": "ReplayablePseudoRandom", "parameters": "(double seed)", "modifiers": "public", "return": "", "signature": " ReplayablePseudoRandom(double seed)", "full_signature": "public  ReplayablePseudoRandom(double seed)", "class_method_signature": "ReplayablePseudoRandom.ReplayablePseudoRandom(double seed)", "testcase": false, "constructor": true}, {"identifier": "random", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double random()", "full_signature": "public double random()", "class_method_signature": "ReplayablePseudoRandom.random()", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "(int bound)", "modifiers": "public", "return": "int", "signature": "int nextInt(int bound)", "full_signature": "public int nextInt(int bound)", "class_method_signature": "ReplayablePseudoRandom.nextInt(int bound)", "testcase": false, "constructor": false}, {"identifier": "nextDouble", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double nextDouble()", "full_signature": "public double nextDouble()", "class_method_signature": "ReplayablePseudoRandom.nextDouble()", "testcase": false, "constructor": false}, {"identifier": "nextBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean nextBoolean()", "full_signature": "public boolean nextBoolean()", "class_method_signature": "ReplayablePseudoRandom.nextBoolean()", "testcase": false, "constructor": false}, {"identifier": "nextFloat", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float nextFloat()", "full_signature": "public float nextFloat()", "class_method_signature": "ReplayablePseudoRandom.nextFloat()", "testcase": false, "constructor": false}, {"identifier": "getSeed", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSeed()", "full_signature": "public double getSeed()", "class_method_signature": "ReplayablePseudoRandom.getSeed()", "testcase": false, "constructor": false}, {"identifier": "setSeed", "parameters": "(double seed)", "modifiers": "public", "return": "void", "signature": "void setSeed(double seed)", "full_signature": "public void setSeed(double seed)", "class_method_signature": "ReplayablePseudoRandom.setSeed(double seed)", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/random/ReplayablePseudoRandom.java"}, "focal_method": {"identifier": "nextFloat", "parameters": "()", "modifiers": "public", "return": "float", "body": "public float nextFloat() {\n        int randMax = Integer.MAX_VALUE;\n        return (float) (this.random() / (double) randMax) / 2;\n    }", "signature": "float nextFloat()", "full_signature": "public float nextFloat()", "class_method_signature": "ReplayablePseudoRandom.nextFloat()", "testcase": false, "constructor": false, "invocations": ["random"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}