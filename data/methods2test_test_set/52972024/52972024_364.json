{"test_class": {"identifier": "ResponseSenderReceiverTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IMessageProcessor messageProcessorMock;", "modifier": "private", "type": "IMessageProcessor", "declarator": "messageProcessorMock", "var_name": "messageProcessorMock"}, {"original_string": "private IObject envMock, ctxMock;", "modifier": "private", "type": "IObject", "declarator": "envMock", "var_name": "envMock"}, {"original_string": "private IResponseStrategy responseStrategyMock;", "modifier": "private", "type": "IResponseStrategy", "declarator": "responseStrategyMock", "var_name": "responseStrategyMock"}], "file": "CoreFeatures/MessageProcessing/ResponseSenderReceiver/src/test/java/info/smart_tools/smartactors/message_processing/response_sender_receiver/ResponseSenderReceiverTest.java"}, "test_case": {"identifier": "Should_wrapExceptionOccurredSendingResponse", "parameters": "()", "modifiers": "@Test(expected = MessageReceiveException.class) public", "return": "void", "body": "@Test(expected = MessageReceiveException.class)\n    public void Should_wrapExceptionOccurredSendingResponse()\n            throws Exception {\n        doThrow(ResponseException.class).when(responseStrategyMock).sendResponse(same(envMock));\n\n        IMessageReceiver receiver = new ResponseSenderReceiver();\n\n        receiver.receive(messageProcessorMock);\n    }", "signature": "void Should_wrapExceptionOccurredSendingResponse()", "full_signature": "@Test(expected = MessageReceiveException.class) public void Should_wrapExceptionOccurredSendingResponse()", "class_method_signature": "ResponseSenderReceiverTest.Should_wrapExceptionOccurredSendingResponse()", "testcase": true, "constructor": false, "invocations": ["sendResponse", "when", "doThrow", "same", "receive"]}, "focal_class": {"identifier": "ResponseSenderReceiver", "superclass": "", "interfaces": "implements IMessageReceiver", "fields": [{"original_string": "private final IAction<IObject> action;", "modifier": "private final", "type": "IAction<IObject>", "declarator": "action", "var_name": "action"}], "methods": [{"identifier": "ResponseSenderReceiver", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResponseSenderReceiver()", "full_signature": "public  ResponseSenderReceiver()", "class_method_signature": "ResponseSenderReceiver.ResponseSenderReceiver()", "testcase": false, "constructor": true}, {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "ResponseSenderReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ResponseSenderReceiver/src/main/java/info/smart_tools/smartactors/message_processing/response_sender_receiver/ResponseSenderReceiver.java"}, "focal_method": {"identifier": "receive", "parameters": "(final IMessageProcessor processor)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receive(final IMessageProcessor processor) throws MessageReceiveException, AsynchronousOperationException {\n        try {\n            action.execute(processor.getEnvironment());\n        } catch (ActionExecuteException | InvalidArgumentException e) {\n            throw new MessageReceiveException(\"Error occurred sending response.\", e);\n        }\n    }", "signature": "void receive(final IMessageProcessor processor)", "full_signature": "@Override public void receive(final IMessageProcessor processor)", "class_method_signature": "ResponseSenderReceiver.receive(final IMessageProcessor processor)", "testcase": false, "constructor": false, "invocations": ["execute", "getEnvironment"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}