{"test_class": {"identifier": "DirUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "shared/src/test/java/org/eclipse/steady/shared/util/DirUtilTest.java"}, "test_case": {"identifier": "testFilterSubpaths", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFilterSubpaths() {\n    final Path p1 = Paths.get(\"./src/test/resources/foo/bar/empty.txt\");\n    final Path p2 = Paths.get(\"./src/test/resources/foo/bar\");\n    final Path p3 = Paths.get(\"./src/test/resources/foo\");\n    final Path p4 = Paths.get(\"./src/test/resources/foo/empty\");\n\n    final Set<Path> filter = new HashSet<Path>();\n    filter.add(p2);\n    final Set<Path> to_be_filtered = new HashSet<Path>();\n    to_be_filtered.add(p1);\n    to_be_filtered.add(p3);\n    to_be_filtered.add(p4);\n\n    final Set<Path> r1 = DirUtil.filterSubpaths(to_be_filtered, filter, true);\n    assertEquals(1, r1.size());\n\n    final Set<Path> r2 = DirUtil.filterSubpaths(to_be_filtered, filter, false);\n    assertEquals(2, r2.size());\n  }", "signature": "void testFilterSubpaths()", "full_signature": "@Test public void testFilterSubpaths()", "class_method_signature": "DirUtilTest.testFilterSubpaths()", "testcase": true, "constructor": false, "invocations": ["get", "get", "get", "get", "add", "add", "add", "add", "filterSubpaths", "assertEquals", "size", "filterSubpaths", "assertEquals", "size"]}, "focal_class": {"identifier": "DirUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}], "methods": [{"identifier": "containsFile", "parameters": "(final File _dir, final String _filename)", "modifiers": "public static final", "return": "boolean", "signature": "boolean containsFile(final File _dir, final String _filename)", "full_signature": "public static final boolean containsFile(final File _dir, final String _filename)", "class_method_signature": "DirUtil.containsFile(final File _dir, final String _filename)", "testcase": false, "constructor": false}, {"identifier": "getAllFiles", "parameters": "(final File _dir, final String[] _ignore)", "modifiers": "public static", "return": "File[]", "signature": "File[] getAllFiles(final File _dir, final String[] _ignore)", "full_signature": "public static File[] getAllFiles(final File _dir, final String[] _ignore)", "class_method_signature": "DirUtil.getAllFiles(final File _dir, final String[] _ignore)", "testcase": false, "constructor": false}, {"identifier": "unzip", "parameters": "(final File _zip, File _out_dir)", "modifiers": "public static", "return": "File", "signature": "File unzip(final File _zip, File _out_dir)", "full_signature": "public static File unzip(final File _zip, File _out_dir)", "class_method_signature": "DirUtil.unzip(final File _zip, File _out_dir)", "testcase": false, "constructor": false}, {"identifier": "isBelowDestinationPath", "parameters": "(Path _destination_path, String _entry_name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBelowDestinationPath(Path _destination_path, String _entry_name)", "full_signature": "public static boolean isBelowDestinationPath(Path _destination_path, String _entry_name)", "class_method_signature": "DirUtil.isBelowDestinationPath(Path _destination_path, String _entry_name)", "testcase": false, "constructor": false}, {"identifier": "filterSubpaths", "parameters": "(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "modifiers": "public static", "return": "Set<Path>", "signature": "Set<Path> filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "full_signature": "public static Set<Path> filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "class_method_signature": "DirUtil.filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "testcase": false, "constructor": false}, {"identifier": "getDigest", "parameters": "(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "modifiers": "public static", "return": "String", "signature": "String getDigest(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "full_signature": "public static String getDigest(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "class_method_signature": "DirUtil.getDigest(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "testcase": false, "constructor": false}], "file": "shared/src/main/java/org/eclipse/steady/shared/util/DirUtil.java"}, "focal_method": {"identifier": "filterSubpaths", "parameters": "(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "modifiers": "public static", "return": "Set<Path>", "body": "public static Set<Path> filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths) {\n    final Set<Path> result = new HashSet<Path>();\n    for (Path p1 : _to_be_filtered) {\n      boolean is_sub = false;\n      for (Path p2 : _filter) {\n        if (p1.startsWith(p2)) {\n          is_sub = true;\n          if (_keep_subpaths) {\n            result.add(p1);\n            break;\n          }\n        }\n      }\n      if (!_keep_subpaths && !is_sub) {\n        result.add(p1);\n      }\n    }\n    return result;\n  }", "signature": "Set<Path> filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "full_signature": "public static Set<Path> filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "class_method_signature": "DirUtil.filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "testcase": false, "constructor": false, "invocations": ["startsWith", "add", "add"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}