{"test_class": {"identifier": "TestDefaultIndexer", "superclass": "extends IndexTestBase", "interfaces": "", "fields": [], "file": "themis-index/src/test/java/org/apache/hadoop/hbase/themis/index/cp/TestDefaultIndexer.java"}, "test_case": {"identifier": "testIndexGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIndexGet() throws IOException {\n    Result result = null;\n    nextTsAndCreateTransaction();\n    transaction.put(MAIN_TABLE, new ThemisPut(ROW).add(FAMILY, QUALIFIER, VALUE));\n    mockTsAndCommitTransaction();\n    \n    nextTsAndCreateTransaction();\n    \n    // no-index scan\n    ResultScanner scanner = transaction.getScanner(MAIN_TABLE,\n      new ThemisScan().addColumn(FAMILY, QUALIFIER));\n    Assert.assertFalse(scanner instanceof IndexScanner);\n    checkReadResult(VALUE, COLUMN, scanner.next());\n    scanner.close();\n    \n    // index get column\n    IndexGet indexGet = new IndexGet(INDEX_COLUMN, VALUE,\n        new DataGet().addColumn(FAMILY, QUALIFIER));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    Assert.assertTrue(scanner instanceof IndexScanner);\n    checkReadResult(VALUE, COLUMN, scanner.next());\n    checkAndCloseScanner(scanner);\n    \n    // write other qualifier and family\n    nextTsAndCreateTransaction();\n    transaction.delete(MAIN_TABLE, new ThemisDelete(ROW).deleteColumn(FAMILY, ANOTHER_QUALIFIER));\n    transaction.put(MAIN_TABLE, new ThemisPut(ROW).add(ANOTHER_FAMILY, QUALIFIER, ANOTHER_VALUE));\n    mockTsAndCommitTransaction();\n    \n    nextTsAndCreateTransaction();\n    // index get family and column\n    indexGet = new IndexGet(INDEX_COLUMN, VALUE,\n      new DataGet().addColumn(FAMILY, QUALIFIER).addFamily(ANOTHER_FAMILY));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    checkReadResults(new byte[][] { VALUE, ANOTHER_VALUE }, new ColumnCoordinate[] { COLUMN,\n        COLUMN_WITH_ANOTHER_FAMILY }, scanner.next());\n    checkAndCloseScanner(scanner);\n    \n    // index get whole row\n    indexGet = new IndexGet(INDEX_COLUMN, VALUE, new DataGet());\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    checkReadResults(new byte[][] { VALUE, ANOTHER_VALUE }, new ColumnCoordinate[] { COLUMN,\n        COLUMN_WITH_ANOTHER_FAMILY }, scanner.next());\n    checkAndCloseScanner(scanner);\n    \n    // write another value in index column\n    transaction.put(MAIN_TABLE, new ThemisPut(ROW).add(FAMILY, QUALIFIER, ANOTHER_VALUE));\n    mockTsAndCommitTransaction();\n    \n    // also get old value because timestamp is not updated\n    indexGet = new IndexGet(INDEX_COLUMN, VALUE, new DataGet().addColumn(FAMILY, QUALIFIER));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    Assert.assertTrue(scanner instanceof IndexScanner);\n    checkReadResult(VALUE, COLUMN, scanner.next());\n    checkAndCloseScanner(scanner);\n    \n    // can not read the old value\n    nextTransactionTs();\n    createTransactionWithMock();\n    indexGet = new IndexGet(INDEX_COLUMN, VALUE, new DataGet().addColumn(FAMILY, QUALIFIER));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    Assert.assertTrue(scanner instanceof IndexScanner);\n    checkAndCloseScanner(scanner);\n    \n    // can read the new value\n    nextTsAndCreateTransaction();\n    indexGet = new IndexGet(INDEX_COLUMN, ANOTHER_VALUE, new DataGet().addColumn(FAMILY, QUALIFIER)\n        .addFamily(ANOTHER_FAMILY));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    Assert.assertTrue(scanner instanceof IndexScanner);\n    checkReadResults(new byte[][] { ANOTHER_VALUE, ANOTHER_VALUE }, new ColumnCoordinate[] { COLUMN,\n        COLUMN_WITH_ANOTHER_FAMILY }, scanner.next());\n    checkAndCloseScanner(scanner);\n    \n    // delete value\n    // write another value in index column\n    transaction.delete(MAIN_TABLE, new ThemisDelete(ROW).deleteColumn(FAMILY, QUALIFIER));\n    mockTsAndCommitTransaction();\n    \n    // still read old value\n    indexGet = new IndexGet(INDEX_COLUMN, ANOTHER_VALUE, new DataGet().addColumn(FAMILY, QUALIFIER));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    Assert.assertTrue(scanner instanceof IndexScanner);\n    checkReadResult(ANOTHER_VALUE, COLUMN, scanner.next());\n    checkAndCloseScanner(scanner);\n    \n    // can not read value after timestamp updated\n    nextTsAndCreateTransaction();\n    indexGet = new IndexGet(INDEX_COLUMN, ANOTHER_VALUE, new DataGet().addColumn(FAMILY, QUALIFIER));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    Assert.assertTrue(scanner instanceof IndexScanner);\n    checkAndCloseScanner(scanner);\n    \n    // two rows with the same index column value\n    nextTsAndCreateTransaction();\n    transaction.put(MAIN_TABLE, new ThemisPut(ANOTHER_ROW).add(FAMILY, QUALIFIER, VALUE));\n    transaction.put(MAIN_TABLE, new ThemisPut(ROW).add(FAMILY, QUALIFIER, VALUE));\n    mockTsAndCommitTransaction();\n    \n    nextTsAndCreateTransaction();\n    indexGet = new IndexGet(INDEX_COLUMN, VALUE, new DataGet().addColumn(FAMILY, QUALIFIER));\n    scanner = transaction.getScanner(MAIN_TABLE, indexGet);\n    Assert.assertTrue(scanner instanceof IndexScanner);\n    result = scanner.next();\n    Assert.assertArrayEquals(ANOTHER_ROW, result.getRow());\n    checkReadResult(VALUE, COLUMN, result);\n    result = scanner.next();\n    Assert.assertArrayEquals(ROW, result.getRow());\n    checkReadResult(VALUE, COLUMN, result);\n    checkAndCloseScanner(scanner);\n  }", "signature": "void testIndexGet()", "full_signature": "@Test public void testIndexGet()", "class_method_signature": "TestDefaultIndexer.testIndexGet()", "testcase": true, "constructor": false, "invocations": ["nextTsAndCreateTransaction", "put", "add", "mockTsAndCommitTransaction", "nextTsAndCreateTransaction", "getScanner", "addColumn", "assertFalse", "checkReadResult", "next", "close", "addColumn", "getScanner", "assertTrue", "checkReadResult", "next", "checkAndCloseScanner", "nextTsAndCreateTransaction", "delete", "deleteColumn", "put", "add", "mockTsAndCommitTransaction", "nextTsAndCreateTransaction", "addFamily", "addColumn", "getScanner", "checkReadResults", "next", "checkAndCloseScanner", "getScanner", "checkReadResults", "next", "checkAndCloseScanner", "put", "add", "mockTsAndCommitTransaction", "addColumn", "getScanner", "assertTrue", "checkReadResult", "next", "checkAndCloseScanner", "nextTransactionTs", "createTransactionWithMock", "addColumn", "getScanner", "assertTrue", "checkAndCloseScanner", "nextTsAndCreateTransaction", "addFamily", "addColumn", "getScanner", "assertTrue", "checkReadResults", "next", "checkAndCloseScanner", "delete", "deleteColumn", "mockTsAndCommitTransaction", "addColumn", "getScanner", "assertTrue", "checkReadResult", "next", "checkAndCloseScanner", "nextTsAndCreateTransaction", "addColumn", "getScanner", "assertTrue", "checkAndCloseScanner", "nextTsAndCreateTransaction", "put", "add", "put", "add", "mockTsAndCommitTransaction", "nextTsAndCreateTransaction", "addColumn", "getScanner", "assertTrue", "next", "assertArrayEquals", "getRow", "checkReadResult", "next", "assertArrayEquals", "getRow", "checkReadResult", "checkAndCloseScanner"]}, "focal_class": {"identifier": "DefaultIndexer", "superclass": "extends Indexer", "interfaces": "", "fields": [{"original_string": "private final Map<IndexColumn, String> columnIndexes = new HashMap<IndexColumn, String>();", "modifier": "private final", "type": "Map<IndexColumn, String>", "declarator": "columnIndexes = new HashMap<IndexColumn, String>()", "var_name": "columnIndexes"}], "methods": [{"identifier": "DefaultIndexer", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " DefaultIndexer(Configuration conf)", "full_signature": "public  DefaultIndexer(Configuration conf)", "class_method_signature": "DefaultIndexer.DefaultIndexer(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "getColumnIndexes", "parameters": "()", "modifiers": "public", "return": "Map<IndexColumn, String>", "signature": "Map<IndexColumn, String> getColumnIndexes()", "full_signature": "public Map<IndexColumn, String> getColumnIndexes()", "class_method_signature": "DefaultIndexer.getColumnIndexes()", "testcase": false, "constructor": false}, {"identifier": "loadSecondaryIndexes", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void loadSecondaryIndexes()", "full_signature": "protected void loadSecondaryIndexes()", "class_method_signature": "DefaultIndexer.loadSecondaryIndexes()", "testcase": false, "constructor": false}, {"identifier": "loadSecondaryIndexesForTable", "parameters": "(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "modifiers": "protected", "return": "void", "signature": "void loadSecondaryIndexesForTable(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "full_signature": "protected void loadSecondaryIndexesForTable(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "class_method_signature": "DefaultIndexer.loadSecondaryIndexesForTable(HTableDescriptor desc,\n      Map<IndexColumn, String> columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "getScanner", "parameters": "(byte[] tableName, ThemisScan scan, Transaction transaction)", "modifiers": "@Override public", "return": "IndexScanner", "signature": "IndexScanner getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "full_signature": "@Override public IndexScanner getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "class_method_signature": "DefaultIndexer.getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "addIndexMutations", "parameters": "(ColumnMutationCache mutationCache)", "modifiers": "@Override public", "return": "void", "signature": "void addIndexMutations(ColumnMutationCache mutationCache)", "full_signature": "@Override public void addIndexMutations(ColumnMutationCache mutationCache)", "class_method_signature": "DefaultIndexer.addIndexMutations(ColumnMutationCache mutationCache)", "testcase": false, "constructor": false}, {"identifier": "constructIndexKv", "parameters": "(byte[] mainRowkey, byte[] mainValue)", "modifiers": "protected static", "return": "KeyValue", "signature": "KeyValue constructIndexKv(byte[] mainRowkey, byte[] mainValue)", "full_signature": "protected static KeyValue constructIndexKv(byte[] mainRowkey, byte[] mainValue)", "class_method_signature": "DefaultIndexer.constructIndexKv(byte[] mainRowkey, byte[] mainValue)", "testcase": false, "constructor": false}], "file": "themis-index/src/main/java/org/apache/hadoop/hbase/themis/index/cp/DefaultIndexer.java"}, "focal_method": {"identifier": "getScanner", "parameters": "(byte[] tableName, ThemisScan scan, Transaction transaction)", "modifiers": "@Override public", "return": "IndexScanner", "body": "@Override\n  public IndexScanner getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)\n      throws IOException {\n    if (!(scan instanceof IndexRead)) {\n      return null;\n    }\n    IndexRead indexRead = (IndexRead)scan;\n    if (!Bytes.equals(tableName, indexRead.getIndexColumn().getTableName())) {\n      throw new IOException(\"tableName not match, tableName=\" + Bytes.toString(tableName)\n          + \", indexColumn=\" + indexRead.getIndexColumn());\n    }\n    String indexTableName = columnIndexes.get(indexRead.getIndexColumn());\n    if (indexTableName == null) {\n      throw new IOException(\"not find index definition for indexColumn=\" + indexRead.getIndexColumn());\n    }\n    return new IndexScanner(indexTableName, indexRead, transaction);\n  }", "signature": "IndexScanner getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "full_signature": "@Override public IndexScanner getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "class_method_signature": "DefaultIndexer.getScanner(byte[] tableName, ThemisScan scan, Transaction transaction)", "testcase": false, "constructor": false, "invocations": ["equals", "getTableName", "getIndexColumn", "toString", "getIndexColumn", "get", "getIndexColumn", "getIndexColumn"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}