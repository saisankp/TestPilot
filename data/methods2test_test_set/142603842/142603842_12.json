{"test_class": {"identifier": "RemoveVehicleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ScoreDirector<VehicleRoutingSolution> scoreDirector;", "modifier": "@Mock\n    private", "type": "ScoreDirector<VehicleRoutingSolution>", "declarator": "scoreDirector", "var_name": "scoreDirector"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/change/RemoveVehicleTest.java"}, "test_case": {"identifier": "remove_vehicle", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void remove_vehicle() {\n        PlanningVehicle removedVehicle = PlanningVehicleFactory.testVehicle(1);\n        PlanningVehicle otherVehicle = PlanningVehicleFactory.testVehicle(2);\n\n        PlanningDepot depot = new PlanningDepot(PlanningLocationFactory.testLocation(1));\n\n        PlanningVisit firstVisit = testVisit(1);\n        PlanningVisit lastVisit = testVisit(2);\n\n        VehicleRoutingSolution solution = SolutionFactory.solutionFromVisits(\n                Arrays.asList(removedVehicle, otherVehicle),\n                depot,\n                Arrays.asList(firstVisit, lastVisit));\n\n        when(scoreDirector.getWorkingSolution()).thenReturn(solution);\n        when(scoreDirector.lookUpWorkingObject(removedVehicle)).thenReturn(removedVehicle);\n\n        // V -> first -> last\n        removedVehicle.setNextVisit(firstVisit);\n        firstVisit.setPreviousStandstill(removedVehicle);\n        firstVisit.setVehicle(removedVehicle);\n        firstVisit.setNextVisit(lastVisit);\n        lastVisit.setPreviousStandstill(firstVisit);\n        lastVisit.setVehicle(removedVehicle);\n\n        // do change\n        RemoveVehicle removeVehicle = new RemoveVehicle(removedVehicle);\n        removeVehicle.doChange(scoreDirector);\n\n        assertThat(firstVisit.getPreviousStandstill()).isNull();\n        assertThat(lastVisit.getPreviousStandstill()).isNull();\n        assertThat(solution.getVehicleList()).containsExactly(otherVehicle);\n\n        verify(scoreDirector).beforeVariableChanged(firstVisit, \"previousStandstill\");\n        verify(scoreDirector).afterVariableChanged(firstVisit, \"previousStandstill\");\n        verify(scoreDirector).beforeVariableChanged(lastVisit, \"previousStandstill\");\n        verify(scoreDirector).afterVariableChanged(lastVisit, \"previousStandstill\");\n        verify(scoreDirector).beforeProblemFactRemoved(removedVehicle);\n        verify(scoreDirector).afterProblemFactRemoved(removedVehicle);\n        verify(scoreDirector).triggerVariableListeners();\n    }", "signature": "void remove_vehicle()", "full_signature": "@Test void remove_vehicle()", "class_method_signature": "RemoveVehicleTest.remove_vehicle()", "testcase": true, "constructor": false, "invocations": ["testVehicle", "testVehicle", "testLocation", "testVisit", "testVisit", "solutionFromVisits", "asList", "asList", "thenReturn", "when", "getWorkingSolution", "thenReturn", "when", "lookUpWorkingObject", "setNextVisit", "setPreviousStandstill", "setVehicle", "setNextVisit", "setPreviousStandstill", "setVehicle", "doChange", "isNull", "assertThat", "getPreviousStandstill", "isNull", "assertThat", "getPreviousStandstill", "containsExactly", "assertThat", "getVehicleList", "beforeVariableChanged", "verify", "afterVariableChanged", "verify", "beforeVariableChanged", "verify", "afterVariableChanged", "verify", "beforeProblemFactRemoved", "verify", "afterProblemFactRemoved", "verify", "triggerVariableListeners", "verify"]}, "focal_class": {"identifier": "RemoveVehicle", "superclass": "", "interfaces": "implements ProblemFactChange<VehicleRoutingSolution>", "fields": [{"original_string": "private final PlanningVehicle removedVehicle;", "modifier": "private final", "type": "PlanningVehicle", "declarator": "removedVehicle", "var_name": "removedVehicle"}], "methods": [{"identifier": "RemoveVehicle", "parameters": "(PlanningVehicle removedVehicle)", "modifiers": "public", "return": "", "signature": " RemoveVehicle(PlanningVehicle removedVehicle)", "full_signature": "public  RemoveVehicle(PlanningVehicle removedVehicle)", "class_method_signature": "RemoveVehicle.RemoveVehicle(PlanningVehicle removedVehicle)", "testcase": false, "constructor": true}, {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "RemoveVehicle.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/change/RemoveVehicle.java"}, "focal_method": {"identifier": "doChange", "parameters": "(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector) {\n        VehicleRoutingSolution workingSolution = scoreDirector.getWorkingSolution();\n\n        // Look up a working copy of the vehicle\n        PlanningVehicle workingVehicle = scoreDirector.lookUpWorkingObject(removedVehicle);\n        if (workingVehicle == null) {\n            throw new IllegalStateException(\"Can't look up a working copy of \" + removedVehicle);\n        }\n\n        // Un-initialize all visits of this vehicle\n        for (PlanningVisit visit : workingVehicle.getFutureVisits()) {\n            scoreDirector.beforeVariableChanged(visit, \"previousStandstill\");\n            visit.setPreviousStandstill(null);\n            scoreDirector.afterVariableChanged(visit, \"previousStandstill\");\n        }\n\n        // No need to clone the vehicleList because it is a planning entity collection, so it is already\n        // planning-cloned.\n        // To learn more about problem fact changes, see:\n        // https://docs.jboss.org/optaplanner/release/latest/optaplanner-docs/html_single/#problemFactChangeExample\n\n        // Remove the vehicle\n        scoreDirector.beforeProblemFactRemoved(workingVehicle);\n        if (!workingSolution.getVehicleList().remove(workingVehicle)) {\n            throw new IllegalStateException(\n                    \"Working solution's vehicleList \"\n                            + workingSolution.getVehicleList()\n                            + \" doesn't contain the workingVehicle (\"\n                            + workingVehicle\n                            + \"). This is a bug!\");\n        }\n        scoreDirector.afterProblemFactRemoved(workingVehicle);\n\n        scoreDirector.triggerVariableListeners();\n    }", "signature": "void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "full_signature": "@Override public void doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "class_method_signature": "RemoveVehicle.doChange(ScoreDirector<VehicleRoutingSolution> scoreDirector)", "testcase": false, "constructor": false, "invocations": ["getWorkingSolution", "lookUpWorkingObject", "getFutureVisits", "beforeVariableChanged", "setPreviousStandstill", "afterVariableChanged", "beforeProblemFactRemoved", "remove", "getVehicleList", "getVehicleList", "afterProblemFactRemoved", "triggerVariableListeners"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}