{"test_class": {"identifier": "MediaRequestProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MediaRequestProcessor processor = new MediaRequestProcessor();", "modifier": "private", "type": "MediaRequestProcessor", "declarator": "processor = new MediaRequestProcessor()", "var_name": "processor"}, {"original_string": "private MediaCollectionAdapter adapterMock = EasyMock.createStrictMock(MediaCollectionAdapter.class);", "modifier": "private", "type": "MediaCollectionAdapter", "declarator": "adapterMock = EasyMock.createStrictMock(MediaCollectionAdapter.class)", "var_name": "adapterMock"}, {"original_string": "private RequestContext requestMock = EasyMock.createStrictMock(RequestContext.class);", "modifier": "private", "type": "RequestContext", "declarator": "requestMock = EasyMock.createStrictMock(RequestContext.class)", "var_name": "requestMock"}, {"original_string": "private ResponseContext responseMock = EasyMock.createStrictMock(ResponseContext.class);", "modifier": "private", "type": "ResponseContext", "declarator": "responseMock = EasyMock.createStrictMock(ResponseContext.class)", "var_name": "responseMock"}], "file": "server/src/test/java/org/apache/abdera/protocol/server/processors/MediaRequestProcessorTest.java"}, "test_case": {"identifier": "testProcessMediaGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testProcessMediaGet() {\n                EasyMock.replay(responseMock);\n                \n                EasyMock.expect(requestMock.getMethod()).andReturn(\"GET\");\n                EasyMock.replay(requestMock);\n                \n                EasyMock.expect(adapterMock.getMedia(requestMock)).andReturn(responseMock);\n                EasyMock.replay(adapterMock);\n                \n                ResponseContext response = processor.processMedia(requestMock, adapterMock);\n                assertNotNull(response);\n        }", "signature": "void testProcessMediaGet()", "full_signature": "@Test public void testProcessMediaGet()", "class_method_signature": "MediaRequestProcessorTest.testProcessMediaGet()", "testcase": true, "constructor": false, "invocations": ["replay", "andReturn", "expect", "getMethod", "replay", "andReturn", "expect", "getMedia", "replay", "processMedia", "assertNotNull"]}, "focal_class": {"identifier": "MediaRequestProcessor", "superclass": "", "interfaces": "implements RequestProcessor", "fields": [], "methods": [{"identifier": "process", "parameters": "(RequestContext context,\n                                   WorkspaceManager workspaceManager,\n                                   CollectionAdapter collectionAdapter)", "modifiers": "public", "return": "ResponseContext", "signature": "ResponseContext process(RequestContext context,\n                                   WorkspaceManager workspaceManager,\n                                   CollectionAdapter collectionAdapter)", "full_signature": "public ResponseContext process(RequestContext context,\n                                   WorkspaceManager workspaceManager,\n                                   CollectionAdapter collectionAdapter)", "class_method_signature": "MediaRequestProcessor.process(RequestContext context,\n                                   WorkspaceManager workspaceManager,\n                                   CollectionAdapter collectionAdapter)", "testcase": false, "constructor": false}, {"identifier": "processMedia", "parameters": "(RequestContext context, CollectionAdapter adapter)", "modifiers": "protected", "return": "ResponseContext", "signature": "ResponseContext processMedia(RequestContext context, CollectionAdapter adapter)", "full_signature": "protected ResponseContext processMedia(RequestContext context, CollectionAdapter adapter)", "class_method_signature": "MediaRequestProcessor.processMedia(RequestContext context, CollectionAdapter adapter)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/abdera/protocol/server/processors/MediaRequestProcessor.java"}, "focal_method": {"identifier": "processMedia", "parameters": "(RequestContext context, CollectionAdapter adapter)", "modifiers": "protected", "return": "ResponseContext", "body": "protected ResponseContext processMedia(RequestContext context, CollectionAdapter adapter) {\n        String method = context.getMethod();\n        if (adapter instanceof MediaCollectionAdapter) {\n            MediaCollectionAdapter mcadapter = (MediaCollectionAdapter)adapter;\n            if (method.equalsIgnoreCase(\"GET\")) {\n                return mcadapter.getMedia(context);\n            } else if (method.equalsIgnoreCase(\"POST\")) {\n                return mcadapter.postMedia(context);\n            } else if (method.equalsIgnoreCase(\"PUT\")) {\n                return mcadapter.putMedia(context);\n            } else if (method.equalsIgnoreCase(\"DELETE\")) {\n                return mcadapter.deleteMedia(context);\n            } else if (method.equalsIgnoreCase(\"HEAD\")) {\n                return mcadapter.headMedia(context);\n            } else if (method.equalsIgnoreCase(\"OPTIONS\")) {\n                return mcadapter.optionsMedia(context);\n            } else {\n                return null;\n            }\n        } else {\n            return ProviderHelper.notallowed(context);\n        }\n    }", "signature": "ResponseContext processMedia(RequestContext context, CollectionAdapter adapter)", "full_signature": "protected ResponseContext processMedia(RequestContext context, CollectionAdapter adapter)", "class_method_signature": "MediaRequestProcessor.processMedia(RequestContext context, CollectionAdapter adapter)", "testcase": false, "constructor": false, "invocations": ["getMethod", "equalsIgnoreCase", "getMedia", "equalsIgnoreCase", "postMedia", "equalsIgnoreCase", "putMedia", "equalsIgnoreCase", "deleteMedia", "equalsIgnoreCase", "headMedia", "equalsIgnoreCase", "optionsMedia", "notallowed"]}, "repository": {"repo_id": 206482, "url": "https://github.com/apache/abdera", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 15, "size": 12255, "license": "licensed"}}