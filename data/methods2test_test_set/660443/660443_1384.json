{"test_class": {"identifier": "BasicAtomHashGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/BasicAtomHashGeneratorTest.java"}, "test_case": {"identifier": "testGenerate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerate() throws Exception {\n\n        AtomHashGenerator seedMock = mock(AtomHashGenerator.class);\n        IAtomContainer container = mock(IAtomContainer.class);\n\n        AtomHashGenerator generator = new BasicAtomHashGenerator(seedMock, new Xorshift(), 0);\n\n        when(seedMock.generate(container)).thenReturn(new long[0]);\n        when(container.bonds()).thenReturn(new Iterable<IBond>() {\n\n            @Override\n            public Iterator<IBond> iterator() {\n                return new Iterator<IBond>() {\n\n                    @Override\n                    public boolean hasNext() {\n                        return false;\n                    }\n\n                    @Override\n                    public IBond next() {\n                        return null;\n                    }\n\n                    @Override\n                    public void remove() {\n\n                    }\n                };\n            }\n        });\n\n        generator.generate(container);\n\n        verify(seedMock, times(1)).generate(container);\n    }", "signature": "void testGenerate()", "full_signature": "@Test public void testGenerate()", "class_method_signature": "BasicAtomHashGeneratorTest.testGenerate()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "generate", "thenReturn", "when", "bonds", "generate", "generate", "verify", "times"]}, "focal_class": {"identifier": "BasicAtomHashGenerator", "superclass": "extends AbstractAtomHashGenerator", "interfaces": "implements AtomHashGenerator", "fields": [{"original_string": "private final AtomHashGenerator    seedGenerator;", "modifier": "private final", "type": "AtomHashGenerator", "declarator": "seedGenerator", "var_name": "seedGenerator"}, {"original_string": "private final StereoEncoderFactory factory;", "modifier": "private final", "type": "StereoEncoderFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final int                  depth;", "modifier": "private final", "type": "int", "declarator": "depth", "var_name": "depth"}], "methods": [{"identifier": "BasicAtomHashGenerator", "parameters": "(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, int depth)", "modifiers": "public", "return": "", "signature": " BasicAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, int depth)", "full_signature": "public  BasicAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, int depth)", "class_method_signature": "BasicAtomHashGenerator.BasicAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, int depth)", "testcase": false, "constructor": true}, {"identifier": "BasicAtomHashGenerator", "parameters": "(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom, int depth)", "modifiers": "public", "return": "", "signature": " BasicAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom, int depth)", "full_signature": "public  BasicAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom, int depth)", "class_method_signature": "BasicAtomHashGenerator.BasicAtomHashGenerator(AtomHashGenerator seedGenerator, Pseudorandom pseudorandom, int depth)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "BasicAtomHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "modifiers": "@Override", "return": "long[]", "signature": "long[] generate(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "full_signature": "@Override long[] generate(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "class_method_signature": "BasicAtomHashGenerator.generate(long[] current, StereoEncoder encoder, int[][] graph, Suppressed suppressed)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int[][] graph, int v, long[] current, long[] unique, long[] included)", "modifiers": "", "return": "long", "signature": "long next(int[][] graph, int v, long[] current, long[] unique, long[] included)", "full_signature": " long next(int[][] graph, int v, long[] current, long[] unique, long[] included)", "class_method_signature": "BasicAtomHashGenerator.next(int[][] graph, int v, long[] current, long[] unique, long[] included)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/BasicAtomHashGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "body": "@Override\n    public long[] generate(IAtomContainer container) {\n        int[][] graph = toAdjList(container);\n        return generate(seedGenerator.generate(container), factory.create(container, graph), graph, Suppressed.none());\n    }", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "BasicAtomHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["toAdjList", "generate", "generate", "create", "none"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}