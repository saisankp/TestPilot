{"test_class": {"identifier": "AndroidGpsLocationClientTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private AndroidGpsLocationClient androidGpsLocationClient;", "modifier": "private", "type": "AndroidGpsLocationClient", "declarator": "androidGpsLocationClient", "var_name": "androidGpsLocationClient"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}], "file": "library/src/test/java/io/ona/kujaku/location/clients/AndroidGpsLocationClientTest.java"}, "test_case": {"identifier": "androidGpsLocationClientOnLocationChangedShouldCallRegisteredLocationListenerAndUpdateLastLocation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void androidGpsLocationClientOnLocationChangedShouldCallRegisteredLocationListenerAndUpdateLastLocation() {\n        androidGpsLocationClient = new AndroidGpsLocationClient(RuntimeEnvironment.application);\n        LocationListener locationListener = Mockito.mock(LocationListener.class);\n        LocationListener locationListener2 = Mockito.mock(LocationListener.class);\n\n        // Mock call to KujakuLibrary.showToast\n        KujakuLibrary kujakuLibrary = Mockito.mock(KujakuLibrary.class);\n        ReflectionHelpers.setStaticField(KujakuLibrary.class, \"library\", kujakuLibrary);\n        Mockito.doNothing().when(kujakuLibrary).showToast(Mockito.anyString());\n\n        // Create a mock location\n        Location location = new Location(LocationManager.GPS_PROVIDER);\n        location.setAccuracy(4f);\n        location.setAltitude(23f);\n        location.setLatitude(3d);\n        location.setLongitude(1d);\n\n        // Set the location listeners supposed to receive updates\n        androidGpsLocationClient.addLocationListener(locationListener);\n        androidGpsLocationClient.setLocationListener(locationListener2);\n\n        // Retrieve the androidGpsLocationListener from the AndroidGpsLocationClient\n        AndroidGpsLocationClient.AndroidGpsLocationListener androidGpsLocationListener = ReflectionHelpers.getField(androidGpsLocationClient, \"androidGpsLocationListener\");\n\n        // Call onLocationChanged on the androidGpsLocationListener\n        androidGpsLocationListener.onLocationChanged(location);\n\n        Mockito.verify(locationListener).onLocationChanged(location);\n        Mockito.verify(locationListener2).onLocationChanged(location);\n        Assert.assertEquals(location, androidGpsLocationClient.getLastLocation());\n    }", "signature": "void androidGpsLocationClientOnLocationChangedShouldCallRegisteredLocationListenerAndUpdateLastLocation()", "full_signature": "@Test public void androidGpsLocationClientOnLocationChangedShouldCallRegisteredLocationListenerAndUpdateLastLocation()", "class_method_signature": "AndroidGpsLocationClientTest.androidGpsLocationClientOnLocationChangedShouldCallRegisteredLocationListenerAndUpdateLastLocation()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "setStaticField", "showToast", "when", "doNothing", "anyString", "setAccuracy", "setAltitude", "setLatitude", "setLongitude", "addLocationListener", "setLocationListener", "getField", "onLocationChanged", "onLocationChanged", "verify", "onLocationChanged", "verify", "assertEquals", "getLastLocation"]}, "focal_class": {"identifier": "AndroidGpsLocationClient", "superclass": "extends BaseLocationClient", "interfaces": "", "fields": [{"original_string": "private Location lastLocation;", "modifier": "private", "type": "Location", "declarator": "lastLocation", "var_name": "lastLocation"}, {"original_string": "private long updateInterval = 5000;", "modifier": "private", "type": "long", "declarator": "updateInterval = 5000", "var_name": "updateInterval"}, {"original_string": "private long fastestUpdateInterval = 1000;", "modifier": "private", "type": "long", "declarator": "fastestUpdateInterval = 1000", "var_name": "fastestUpdateInterval"}, {"original_string": "private Object gpsStatusCallback;", "modifier": "private", "type": "Object", "declarator": "gpsStatusCallback", "var_name": "gpsStatusCallback"}, {"original_string": "private AndroidGpsLocationListener androidGpsLocationListener;", "modifier": "private", "type": "AndroidGpsLocationListener", "declarator": "androidGpsLocationListener", "var_name": "androidGpsLocationListener"}], "methods": [{"identifier": "AndroidGpsLocationClient", "parameters": "(@NonNull Context context)", "modifiers": "public", "return": "", "signature": " AndroidGpsLocationClient(@NonNull Context context)", "full_signature": "public  AndroidGpsLocationClient(@NonNull Context context)", "class_method_signature": "AndroidGpsLocationClient.AndroidGpsLocationClient(@NonNull Context context)", "testcase": false, "constructor": true}, {"identifier": "stopLocationUpdates", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stopLocationUpdates()", "full_signature": "@Override public void stopLocationUpdates()", "class_method_signature": "AndroidGpsLocationClient.stopLocationUpdates()", "testcase": false, "constructor": false}, {"identifier": "registerForGpsStoppedEvent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerForGpsStoppedEvent()", "full_signature": "private void registerForGpsStoppedEvent()", "class_method_signature": "AndroidGpsLocationClient.registerForGpsStoppedEvent()", "testcase": false, "constructor": false}, {"identifier": "unregisterForGpsStoppedEvent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unregisterForGpsStoppedEvent()", "full_signature": "private void unregisterForGpsStoppedEvent()", "class_method_signature": "AndroidGpsLocationClient.unregisterForGpsStoppedEvent()", "testcase": false, "constructor": false}, {"identifier": "resetLastLocationIfLocationServiceIsOff", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetLastLocationIfLocationServiceIsOff()", "full_signature": "private void resetLastLocationIfLocationServiceIsOff()", "class_method_signature": "AndroidGpsLocationClient.resetLastLocationIfLocationServiceIsOff()", "testcase": false, "constructor": false}, {"identifier": "getLastLocation", "parameters": "()", "modifiers": "@SuppressLint(\"MissingPermission\") @Nullable @Override public", "return": "Location", "signature": "Location getLastLocation()", "full_signature": "@SuppressLint(\"MissingPermission\") @Nullable @Override public Location getLastLocation()", "class_method_signature": "AndroidGpsLocationClient.getLastLocation()", "testcase": false, "constructor": false}, {"identifier": "requestLocationUpdates", "parameters": "(@NonNull LocationListener locationListener)", "modifiers": "@Override public", "return": "void", "signature": "void requestLocationUpdates(@NonNull LocationListener locationListener)", "full_signature": "@Override public void requestLocationUpdates(@NonNull LocationListener locationListener)", "class_method_signature": "AndroidGpsLocationClient.requestLocationUpdates(@NonNull LocationListener locationListener)", "testcase": false, "constructor": false}, {"identifier": "setUpdateIntervals", "parameters": "(long updateInterval, long fastestUpdateInterval)", "modifiers": "@Override public", "return": "void", "signature": "void setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "full_signature": "@Override public void setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "class_method_signature": "AndroidGpsLocationClient.setUpdateIntervals(long updateInterval, long fastestUpdateInterval)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String getProvider()", "full_signature": "@NonNull @Override public String getProvider()", "class_method_signature": "AndroidGpsLocationClient.getProvider()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AndroidGpsLocationClient.close()", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/location/clients/AndroidGpsLocationClient.java"}, "focal_method": {"identifier": "getLastLocation", "parameters": "()", "modifiers": "@SuppressLint(\"MissingPermission\") @Nullable @Override public", "return": "Location", "body": "@SuppressLint(\"MissingPermission\")\n    @Nullable\n    @Override\n    public Location getLastLocation() {\n        Location lastLocationFromProvider = locationManager.getLastKnownLocation(getProvider());\n        return lastLocationFromProvider != null && (lastLocation == null || lastLocationFromProvider.getTime() > lastLocation.getTime()) ? lastLocationFromProvider : lastLocation;\n    }", "signature": "Location getLastLocation()", "full_signature": "@SuppressLint(\"MissingPermission\") @Nullable @Override public Location getLastLocation()", "class_method_signature": "AndroidGpsLocationClient.getLastLocation()", "testcase": false, "constructor": false, "invocations": ["getLastKnownLocation", "getProvider", "getTime", "getTime"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}