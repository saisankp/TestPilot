{"test_class": {"identifier": "GuicerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Guicer.ServiceLifecycleActions<DummyInterfaces.DummyService> MESSAGING_ACTIONS\n            = new Guicer.ServiceLifecycleActions<DummyInterfaces.DummyService>()\n    {\n        @Override\n        public void onStart(DummyInterfaces.DummyService service) {\n            DummyInterfaces.addMessage(\"starting \" + service.getClass().getSimpleName());\n            service.start();\n            DummyInterfaces.addMessage(\"started \" + service.getClass().getSimpleName());\n        }\n\n        @Override\n        public void onShutdown(DummyInterfaces.DummyService service) {\n            DummyInterfaces.addMessage(\"stopping \" + service.getClass().getSimpleName());\n            service.stop();\n            DummyInterfaces.addMessage(\"stopped \" + service.getClass().getSimpleName());\n        }\n\n        @Override\n        public DummyInterfaces.DummyService castIfActionable(Object object) {\n            return (object instanceof DummyInterfaces.DummyService) ? (DummyInterfaces.DummyService) object : null;\n        }\n    };", "modifier": "static final", "type": "Guicer.ServiceLifecycleActions<DummyInterfaces.DummyService>", "declarator": "MESSAGING_ACTIONS\n            = new Guicer.ServiceLifecycleActions<DummyInterfaces.DummyService>()\n    {\n        @Override\n        public void onStart(DummyInterfaces.DummyService service) {\n            DummyInterfaces.addMessage(\"starting \" + service.getClass().getSimpleName());\n            service.start();\n            DummyInterfaces.addMessage(\"started \" + service.getClass().getSimpleName());\n        }\n\n        @Override\n        public void onShutdown(DummyInterfaces.DummyService service) {\n            DummyInterfaces.addMessage(\"stopping \" + service.getClass().getSimpleName());\n            service.stop();\n            DummyInterfaces.addMessage(\"stopped \" + service.getClass().getSimpleName());\n        }\n\n        @Override\n        public DummyInterfaces.DummyService castIfActionable(Object object) {\n            return (object instanceof DummyInterfaces.DummyService) ? (DummyInterfaces.DummyService) object : null;\n        }\n    }", "var_name": "MESSAGING_ACTIONS"}, {"original_string": "private static Guicer onlyGuicer;", "modifier": "private static", "type": "Guicer", "declarator": "onlyGuicer", "var_name": "onlyGuicer"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/service/servicemanager/GuicerTest.java"}, "test_case": {"identifier": "singletonNess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singletonNess() throws Exception {\n        Guicer guicer = messageGuicer(\n                bind(DummyInterfaces.Gamma.class, DummySimpleServices.SimpleGamma.class, false)\n        );\n        guicer.get(DummyInterfaces.Gamma.class, MESSAGING_ACTIONS);\n        guicer.get(DummyInterfaces.Gamma.class, MESSAGING_ACTIONS);\n        assertEquals(\n                \"messages\",\n                joined(\n                        \"starting SimpleGamma\",\n                        \"started SimpleGamma\"\n                ),\n                Strings.join(DummyInterfaces.messages())\n        );\n    }", "signature": "void singletonNess()", "full_signature": "@Test public void singletonNess()", "class_method_signature": "GuicerTest.singletonNess()", "testcase": true, "constructor": false, "invocations": ["messageGuicer", "bind", "get", "get", "assertEquals", "joined", "join", "messages"]}, "focal_class": {"identifier": "Guicer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Class<? extends ServiceManagerBase> serviceManagerInterfaceClass;", "modifier": "private final", "type": "Class<? extends ServiceManagerBase>", "declarator": "serviceManagerInterfaceClass", "var_name": "serviceManagerInterfaceClass"}, {"original_string": "private final Collection<Class<?>> directlyRequiredClasses;", "modifier": "private final", "type": "Collection<Class<?>>", "declarator": "directlyRequiredClasses", "var_name": "directlyRequiredClasses"}, {"original_string": "private final Set<Object> services;", "modifier": "private final", "type": "Set<Object>", "declarator": "services", "var_name": "services"}, {"original_string": "private final Injector _injector;", "modifier": "private final", "type": "Injector", "declarator": "_injector", "var_name": "_injector"}, {"original_string": "private static final Comparator<? super Class<?>> BY_CLASS_NAME = new Comparator<Class<?>>() {\n        @Override\n        public int compare(Class<?> o1, Class<?> o2) {\n            return o1.getName().compareTo(o2.getName());\n        }\n    };", "modifier": "private static final", "type": "Comparator<? super Class<?>>", "declarator": "BY_CLASS_NAME = new Comparator<Class<?>>() {\n        @Override\n        public int compare(Class<?> o1, Class<?> o2) {\n            return o1.getName().compareTo(o2.getName());\n        }\n    }", "var_name": "BY_CLASS_NAME"}], "methods": [{"identifier": "directlyRequiredClasses", "parameters": "()", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> directlyRequiredClasses()", "full_signature": "public Collection<Class<?>> directlyRequiredClasses()", "class_method_signature": "Guicer.directlyRequiredClasses()", "testcase": false, "constructor": false}, {"identifier": "stopAllServices", "parameters": "(ServiceLifecycleActions<?> withActions)", "modifiers": "public", "return": "void", "signature": "void stopAllServices(ServiceLifecycleActions<?> withActions)", "full_signature": "public void stopAllServices(ServiceLifecycleActions<?> withActions)", "class_method_signature": "Guicer.stopAllServices(ServiceLifecycleActions<?> withActions)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "modifiers": "public", "return": "T", "signature": "T get(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "full_signature": "public T get(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "class_method_signature": "Guicer.get(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "testcase": false, "constructor": false}, {"identifier": "serviceIsStarted", "parameters": "(Class<?> serviceClass)", "modifiers": "public", "return": "boolean", "signature": "boolean serviceIsStarted(Class<?> serviceClass)", "full_signature": "public boolean serviceIsStarted(Class<?> serviceClass)", "class_method_signature": "Guicer.serviceIsStarted(Class<?> serviceClass)", "testcase": false, "constructor": false}, {"identifier": "isRequired", "parameters": "(Class<?> interfaceClass)", "modifiers": "public", "return": "boolean", "signature": "boolean isRequired(Class<?> interfaceClass)", "full_signature": "public boolean isRequired(Class<?> interfaceClass)", "class_method_signature": "Guicer.isRequired(Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "isBoundTo", "parameters": "(Class<?> interfaceClass, Class<?> targetClass)", "modifiers": "public", "return": "boolean", "signature": "boolean isBoundTo(Class<?> interfaceClass, Class<?> targetClass)", "full_signature": "public boolean isBoundTo(Class<?> interfaceClass, Class<?> targetClass)", "class_method_signature": "Guicer.isBoundTo(Class<?> interfaceClass, Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "dependenciesFor", "parameters": "(Class<?> rootClass)", "modifiers": "public", "return": "List<?>", "signature": "List<?> dependenciesFor(Class<?> rootClass)", "full_signature": "public List<?> dependenciesFor(Class<?> rootClass)", "class_method_signature": "Guicer.dependenciesFor(Class<?> rootClass)", "testcase": false, "constructor": false}, {"identifier": "forServices", "parameters": "(Collection<ServiceBinding> serviceBindings)", "modifiers": "public static", "return": "Guicer", "signature": "Guicer forServices(Collection<ServiceBinding> serviceBindings)", "full_signature": "public static Guicer forServices(Collection<ServiceBinding> serviceBindings)", "class_method_signature": "Guicer.forServices(Collection<ServiceBinding> serviceBindings)", "testcase": false, "constructor": false}, {"identifier": "forServices", "parameters": "(Class<M> serviceManagerInterfaceClass,\n                                                                    M serviceManager,\n                                                                    Collection<ServiceBinding> serviceBindings,\n                                                                    List<String> priorities,\n                                                                    Collection<? extends Module> modules)", "modifiers": "public static", "return": "Guicer", "signature": "Guicer forServices(Class<M> serviceManagerInterfaceClass,\n                                                                    M serviceManager,\n                                                                    Collection<ServiceBinding> serviceBindings,\n                                                                    List<String> priorities,\n                                                                    Collection<? extends Module> modules)", "full_signature": "public static Guicer forServices(Class<M> serviceManagerInterfaceClass,\n                                                                    M serviceManager,\n                                                                    Collection<ServiceBinding> serviceBindings,\n                                                                    List<String> priorities,\n                                                                    Collection<? extends Module> modules)", "class_method_signature": "Guicer.forServices(Class<M> serviceManagerInterfaceClass,\n                                                                    M serviceManager,\n                                                                    Collection<ServiceBinding> serviceBindings,\n                                                                    List<String> priorities,\n                                                                    Collection<? extends Module> modules)", "testcase": false, "constructor": false}, {"identifier": "Guicer", "parameters": "(Class<? extends ServiceManagerBase> serviceManagerInterfaceClass, ServiceManagerBase serviceManager,\n                   Collection<ServiceBinding> serviceBindings, List<String> priorities,\n                   Collection<? extends Module> modules)", "modifiers": "private", "return": "", "signature": " Guicer(Class<? extends ServiceManagerBase> serviceManagerInterfaceClass, ServiceManagerBase serviceManager,\n                   Collection<ServiceBinding> serviceBindings, List<String> priorities,\n                   Collection<? extends Module> modules)", "full_signature": "private  Guicer(Class<? extends ServiceManagerBase> serviceManagerInterfaceClass, ServiceManagerBase serviceManager,\n                   Collection<ServiceBinding> serviceBindings, List<String> priorities,\n                   Collection<? extends Module> modules)", "class_method_signature": "Guicer.Guicer(Class<? extends ServiceManagerBase> serviceManagerInterfaceClass, ServiceManagerBase serviceManager,\n                   Collection<ServiceBinding> serviceBindings, List<String> priorities,\n                   Collection<? extends Module> modules)", "testcase": false, "constructor": true}, {"identifier": "buildDependencies", "parameters": "(Class<?> forClass, LinkedHashMap<Class<?>,Object> results, Deque<Object> dependents)", "modifiers": "private", "return": "void", "signature": "void buildDependencies(Class<?> forClass, LinkedHashMap<Class<?>,Object> results, Deque<Object> dependents)", "full_signature": "private void buildDependencies(Class<?> forClass, LinkedHashMap<Class<?>,Object> results, Deque<Object> dependents)", "class_method_signature": "Guicer.buildDependencies(Class<?> forClass, LinkedHashMap<Class<?>,Object> results, Deque<Object> dependents)", "testcase": false, "constructor": false}, {"identifier": "circularDependencyInjection", "parameters": "(Class<?> forClass, Object instance, Deque<Object> dependents)", "modifiers": "private", "return": "CircularDependencyException", "signature": "CircularDependencyException circularDependencyInjection(Class<?> forClass, Object instance, Deque<Object> dependents)", "full_signature": "private CircularDependencyException circularDependencyInjection(Class<?> forClass, Object instance, Deque<Object> dependents)", "class_method_signature": "Guicer.circularDependencyInjection(Class<?> forClass, Object instance, Deque<Object> dependents)", "testcase": false, "constructor": false}, {"identifier": "startService", "parameters": "(Class<T> serviceClass, T instance, ServiceLifecycleActions<S> withActions)", "modifiers": "private", "return": "T", "signature": "T startService(Class<T> serviceClass, T instance, ServiceLifecycleActions<S> withActions)", "full_signature": "private T startService(Class<T> serviceClass, T instance, ServiceLifecycleActions<S> withActions)", "class_method_signature": "Guicer.startService(Class<T> serviceClass, T instance, ServiceLifecycleActions<S> withActions)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(List<T> list)", "modifiers": "private static", "return": "List<T>", "signature": "List<T> reverse(List<T> list)", "full_signature": "private static List<T> reverse(List<T> list)", "class_method_signature": "Guicer.reverse(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "startServiceIfApplicable", "parameters": "(T instance, ServiceLifecycleActions<S> withActions)", "modifiers": "private", "return": "void", "signature": "void startServiceIfApplicable(T instance, ServiceLifecycleActions<S> withActions)", "full_signature": "private void startServiceIfApplicable(T instance, ServiceLifecycleActions<S> withActions)", "class_method_signature": "Guicer.startServiceIfApplicable(T instance, ServiceLifecycleActions<S> withActions)", "testcase": false, "constructor": false}, {"identifier": "stopServices", "parameters": "(ServiceLifecycleActions<?> withActions, Exception initialCause)", "modifiers": "private", "return": "void", "signature": "void stopServices(ServiceLifecycleActions<?> withActions, Exception initialCause)", "full_signature": "private void stopServices(ServiceLifecycleActions<?> withActions, Exception initialCause)", "class_method_signature": "Guicer.stopServices(ServiceLifecycleActions<?> withActions, Exception initialCause)", "testcase": false, "constructor": false}, {"identifier": "tryStopServices", "parameters": "(ServiceLifecycleActions<S> withActions, Exception initialCause)", "modifiers": "private", "return": "List<Throwable>", "signature": "List<Throwable> tryStopServices(ServiceLifecycleActions<S> withActions, Exception initialCause)", "full_signature": "private List<Throwable> tryStopServices(ServiceLifecycleActions<S> withActions, Exception initialCause)", "class_method_signature": "Guicer.tryStopServices(ServiceLifecycleActions<S> withActions, Exception initialCause)", "testcase": false, "constructor": false}, {"identifier": "servicesClassesInStartupOrder", "parameters": "()", "modifiers": "public", "return": "List<Class<?>>", "signature": "List<Class<?>> servicesClassesInStartupOrder()", "full_signature": "public List<Class<?>> servicesClassesInStartupOrder()", "class_method_signature": "Guicer.servicesClassesInStartupOrder()", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/service/servicemanager/Guicer.java"}, "focal_method": {"identifier": "get", "parameters": "(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "modifiers": "public", "return": "T", "body": "public <T> T get(Class<T> serviceClass, ServiceLifecycleActions<?> withActions) {\n        if(!serviceClass.isInterface()) {\n            throw new IllegalArgumentException(\"Interface required\");\n        }\n        final T instance = _injector.getInstance(serviceClass);\n        return startService(serviceClass, instance, withActions);\n    }", "signature": "T get(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "full_signature": "public T get(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "class_method_signature": "Guicer.get(Class<T> serviceClass, ServiceLifecycleActions<?> withActions)", "testcase": false, "constructor": false, "invocations": ["isInterface", "getInstance", "startService"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}