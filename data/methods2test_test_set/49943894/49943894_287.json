{"test_class": {"identifier": "ReflectUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/ReflectUtilTest.java"}, "test_case": {"identifier": "testFlattenNullProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlattenNullProperties() throws Exception {\n\n        final List<String> expectedResult = newArrayList(\"booleanProperty\", TRUE.toString(), \"intProperty\", \"1\", \"stringProperty\", \"null\");\n\n        final Bean bean = new Bean(1, true, null);\n\n        assertEquals(expectedResult, flattenProperties(bean, Bean.class));\n\n    }", "signature": "void testFlattenNullProperties()", "full_signature": "@Test public void testFlattenNullProperties()", "class_method_signature": "ReflectUtilTest.testFlattenNullProperties()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "toString", "assertEquals", "flattenProperties"]}, "focal_class": {"identifier": "ReflectUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(ReflectUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(ReflectUtil.class)", "var_name": "s_logger"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(Reflections.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Reflections.class)", "var_name": "logger"}], "methods": [{"identifier": "getAnyField", "parameters": "(Class<?> clazz, String fieldName)", "modifiers": "public static", "return": "Pair<Class<?>, Field>", "signature": "Pair<Class<?>, Field> getAnyField(Class<?> clazz, String fieldName)", "full_signature": "public static Pair<Class<?>, Field> getAnyField(Class<?> clazz, String fieldName)", "class_method_signature": "ReflectUtil.getAnyField(Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getClassesWithAnnotation", "parameters": "(Class<? extends Annotation> annotation, String[] packageNames)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getClassesWithAnnotation(Class<? extends Annotation> annotation, String[] packageNames)", "full_signature": "public static Set<Class<?>> getClassesWithAnnotation(Class<? extends Annotation> annotation, String[] packageNames)", "class_method_signature": "ReflectUtil.getClassesWithAnnotation(Class<? extends Annotation> annotation, String[] packageNames)", "testcase": false, "constructor": false}, {"identifier": "isCmdClassAsync", "parameters": "(Class<?> cmdClass, Class<?>[] searchClasses)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCmdClassAsync(Class<?> cmdClass, Class<?>[] searchClasses)", "full_signature": "public static boolean isCmdClassAsync(Class<?> cmdClass, Class<?>[] searchClasses)", "class_method_signature": "ReflectUtil.isCmdClassAsync(Class<?> cmdClass, Class<?>[] searchClasses)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsForClass", "parameters": "(Class<?> cmdClass, Class<?> baseClass)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllFieldsForClass(Class<?> cmdClass, Class<?> baseClass)", "full_signature": "public static List<Field> getAllFieldsForClass(Class<?> cmdClass, Class<?> baseClass)", "class_method_signature": "ReflectUtil.getAllFieldsForClass(Class<?> cmdClass, Class<?> baseClass)", "testcase": false, "constructor": false}, {"identifier": "getAllFieldsForClass", "parameters": "(Class<?> cmdClass, Class<?>[] excludeClasses)", "modifiers": "public static", "return": "Set<Field>", "signature": "Set<Field> getAllFieldsForClass(Class<?> cmdClass, Class<?>[] excludeClasses)", "full_signature": "public static Set<Field> getAllFieldsForClass(Class<?> cmdClass, Class<?>[] excludeClasses)", "class_method_signature": "ReflectUtil.getAllFieldsForClass(Class<?> cmdClass, Class<?>[] excludeClasses)", "testcase": false, "constructor": false}, {"identifier": "flattenProperties", "parameters": "(final Object target, final Class<?> clazz)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> flattenProperties(final Object target, final Class<?> clazz)", "full_signature": "public static List<String> flattenProperties(final Object target, final Class<?> clazz)", "class_method_signature": "ReflectUtil.flattenProperties(final Object target, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "flattenPropeties", "parameters": "(final Object target, final Class<?> clazz, final String... excludedProperties)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> flattenPropeties(final Object target, final Class<?> clazz, final String... excludedProperties)", "full_signature": "public static List<String> flattenPropeties(final Object target, final Class<?> clazz, final String... excludedProperties)", "class_method_signature": "ReflectUtil.flattenPropeties(final Object target, final Class<?> clazz, final String... excludedProperties)", "testcase": false, "constructor": false}, {"identifier": "flattenProperties", "parameters": "(final Object target, final Class<?> clazz, final ImmutableSet<String> excludedProperties)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> flattenProperties(final Object target, final Class<?> clazz, final ImmutableSet<String> excludedProperties)", "full_signature": "private static List<String> flattenProperties(final Object target, final Class<?> clazz, final ImmutableSet<String> excludedProperties)", "class_method_signature": "ReflectUtil.flattenProperties(final Object target, final Class<?> clazz, final ImmutableSet<String> excludedProperties)", "testcase": false, "constructor": false}, {"identifier": "getEntityName", "parameters": "(Class clz)", "modifiers": "public static", "return": "String", "signature": "String getEntityName(Class clz)", "full_signature": "public static String getEntityName(Class clz)", "class_method_signature": "ReflectUtil.getEntityName(Class clz)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/ReflectUtil.java"}, "focal_method": {"identifier": "flattenProperties", "parameters": "(final Object target, final Class<?> clazz)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> flattenProperties(final Object target, final Class<?> clazz) {\n        return flattenPropeties(target, clazz, \"class\");\n    }", "signature": "List<String> flattenProperties(final Object target, final Class<?> clazz)", "full_signature": "public static List<String> flattenProperties(final Object target, final Class<?> clazz)", "class_method_signature": "ReflectUtil.flattenProperties(final Object target, final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["flattenPropeties"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}