{"test_class": {"identifier": "ClassAliasTypeResolverBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassAliasTypeResolverBuilder builder;", "modifier": "private", "type": "ClassAliasTypeResolverBuilder", "declarator": "builder", "var_name": "builder"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/json/ClassAliasTypeResolverBuilderTest.java"}, "test_case": {"identifier": "setClassToIdMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setClassToIdMap() {\n        Map<Class<?>, String> map = new HashMap<Class<?>, String>();\n        map.put(ClassAliasIdResolverTest.class, \"cairt\");\n\n        builder.setClassToId(map);\n    }", "signature": "void setClassToIdMap()", "full_signature": "@Test public void setClassToIdMap()", "class_method_signature": "ClassAliasTypeResolverBuilderTest.setClassToIdMap()", "testcase": true, "constructor": false, "invocations": ["put", "setClassToId"]}, "focal_class": {"identifier": "ClassAliasTypeResolverBuilder", "superclass": "extends DefaultTypeResolverBuilder", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private Map<String, Class<?>> idToClass = new HashMap<String, Class<?>>();", "modifier": "private", "type": "Map<String, Class<?>>", "declarator": "idToClass = new HashMap<String, Class<?>>()", "var_name": "idToClass"}, {"original_string": "private Map<Class<?>, String> classToId = new HashMap<Class<?>, String>();", "modifier": "private", "type": "Map<Class<?>, String>", "declarator": "classToId = new HashMap<Class<?>, String>()", "var_name": "classToId"}], "methods": [{"identifier": "ClassAliasTypeResolverBuilder", "parameters": "(final DefaultTyping typing)", "modifiers": "public", "return": "", "signature": " ClassAliasTypeResolverBuilder(final DefaultTyping typing)", "full_signature": "public  ClassAliasTypeResolverBuilder(final DefaultTyping typing)", "class_method_signature": "ClassAliasTypeResolverBuilder.ClassAliasTypeResolverBuilder(final DefaultTyping typing)", "testcase": false, "constructor": true}, {"identifier": "idResolver", "parameters": "(final MapperConfig<?> config, final JavaType baseType, final Collection<NamedType> subtypes,\n            final boolean forSer, final boolean forDeser)", "modifiers": "@Override protected", "return": "TypeIdResolver", "signature": "TypeIdResolver idResolver(final MapperConfig<?> config, final JavaType baseType, final Collection<NamedType> subtypes,\n            final boolean forSer, final boolean forDeser)", "full_signature": "@Override protected TypeIdResolver idResolver(final MapperConfig<?> config, final JavaType baseType, final Collection<NamedType> subtypes,\n            final boolean forSer, final boolean forDeser)", "class_method_signature": "ClassAliasTypeResolverBuilder.idResolver(final MapperConfig<?> config, final JavaType baseType, final Collection<NamedType> subtypes,\n            final boolean forSer, final boolean forDeser)", "testcase": false, "constructor": false}, {"identifier": "setClassToId", "parameters": "(final Map<Class<?>, String> classToId)", "modifiers": "public", "return": "void", "signature": "void setClassToId(final Map<Class<?>, String> classToId)", "full_signature": "public void setClassToId(final Map<Class<?>, String> classToId)", "class_method_signature": "ClassAliasTypeResolverBuilder.setClassToId(final Map<Class<?>, String> classToId)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/json/ClassAliasTypeResolverBuilder.java"}, "focal_method": {"identifier": "setClassToId", "parameters": "(final Map<Class<?>, String> classToId)", "modifiers": "public", "return": "void", "body": "public void setClassToId(final Map<Class<?>, String> classToId) {\n\n        Map<String, Class<?>> reverseMap = new HashMap<String, Class<?>>();\n        for (Map.Entry<Class<?>, String> entry : classToId.entrySet()) {\n            Assert.notNull(entry.getKey(), \"Class cannot be null: \" + entry);\n            Assert.hasText(entry.getValue(), \"Alias (id) cannot be null or contain only whitespaces\" + entry);\n\n            if (reverseMap.put(entry.getValue(), entry.getKey()) != null) {\n                throw new IllegalArgumentException(\"Two or more classes with the same alias (id): \" + entry.getValue());\n            }\n        }\n\n        this.classToId = classToId;\n        this.idToClass = reverseMap;\n    }", "signature": "void setClassToId(final Map<Class<?>, String> classToId)", "full_signature": "public void setClassToId(final Map<Class<?>, String> classToId)", "class_method_signature": "ClassAliasTypeResolverBuilder.setClassToId(final Map<Class<?>, String> classToId)", "testcase": false, "constructor": false, "invocations": ["entrySet", "notNull", "getKey", "hasText", "getValue", "put", "getValue", "getKey", "getValue"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}