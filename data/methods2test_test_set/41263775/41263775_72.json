{"test_class": {"identifier": "FloatQuantizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/quantizer/FloatQuantizerTest.java"}, "test_case": {"identifier": "testWithCompressionFactor_5", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithCompressionFactor_5() throws Exception {\n        Quantizer<Float> quantizer = FloatQuantizer.withCompressionFactor(5);\n        // Note: comparing using toString, as double comparison with epsilon would not distinguish 0.0 from -0.0...\n        Assert.assertEquals(\"0.0\", quantizer.getQuantizedValue(0.0F).toString());\n        Assert.assertEquals(\"0.0\", quantizer.getQuantizedValue(4.2F).toString());\n        Assert.assertEquals(\"5.0\", quantizer.getQuantizedValue(5.0F).toString());\n        Assert.assertEquals(\"5.0\", quantizer.getQuantizedValue(9.9F).toString());\n        Assert.assertEquals(\"0.0\", quantizer.getQuantizedValue(-0.0F).toString());\n        Assert.assertEquals(\"0.0\", quantizer.getQuantizedValue(-4.2F).toString());\n        Assert.assertEquals(\"-5.0\", quantizer.getQuantizedValue(-5.0F).toString());\n        Assert.assertEquals(\"-5.0\", quantizer.getQuantizedValue(-9.9F).toString());\n    }", "signature": "void testWithCompressionFactor_5()", "full_signature": "@Test public void testWithCompressionFactor_5()", "class_method_signature": "FloatQuantizerTest.testWithCompressionFactor_5()", "testcase": true, "constructor": false, "invocations": ["withCompressionFactor", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue", "assertEquals", "toString", "getQuantizedValue"]}, "focal_class": {"identifier": "FloatQuantizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FloatQuantizer", "parameters": "()", "modifiers": "", "return": "", "signature": " FloatQuantizer()", "full_signature": "  FloatQuantizer()", "class_method_signature": "FloatQuantizer.FloatQuantizer()", "testcase": false, "constructor": true}, {"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<Float>", "signature": "Quantizer<Float> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<Float> withCompressionFactor(int compressionFactor)", "class_method_signature": "FloatQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/quantizer/FloatQuantizer.java"}, "focal_method": {"identifier": "withCompressionFactor", "parameters": "(int compressionFactor)", "modifiers": "public static", "return": "Quantizer<Float>", "body": "public static Quantizer<Float> withCompressionFactor(int compressionFactor) {\n        return compressionFactor < 2 ? new TruncatingQuantizer() : new TruncatingAndCompressingQuantizer(compressionFactor);\n    }", "signature": "Quantizer<Float> withCompressionFactor(int compressionFactor)", "full_signature": "public static Quantizer<Float> withCompressionFactor(int compressionFactor)", "class_method_signature": "FloatQuantizer.withCompressionFactor(int compressionFactor)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}