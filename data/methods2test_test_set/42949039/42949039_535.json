{"test_class": {"identifier": "HerdJmsMessageListenerTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    HerdJmsMessageListener herdJmsMessageListener;", "modifier": "@Autowired", "type": "HerdJmsMessageListener", "declarator": "herdJmsMessageListener", "var_name": "herdJmsMessageListener"}, {"original_string": "@Autowired\n    JsonHelper jsonHelper;", "modifier": "@Autowired", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    UploadDownloadService uploadDownloadService;", "modifier": "@Autowired", "type": "UploadDownloadService", "declarator": "uploadDownloadService", "var_name": "uploadDownloadService"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/HerdJmsMessageListenerTest.java"}, "test_case": {"identifier": "testS3MessageNoKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testS3MessageNoKey() throws Exception\n    {\n        S3Entity s3Entity = new S3Entity(null, null, new S3ObjectEntity(\"key_does_not_exist\", 0L, null, null), null);\n        List<S3EventNotificationRecord> records = new ArrayList<>();\n        records.add(new S3EventNotificationRecord(null, null, null, null, null, null, null, s3Entity, null));\n\n        S3EventNotification s3EventNotification = new S3EventNotification(records);\n\n        setLogLevel(UploadDownloadServiceImpl.class, LogLevel.OFF);\n        setLogLevel(HerdJmsMessageListener.class, LogLevel.OFF);\n\n        herdJmsMessageListener.processMessage(jsonHelper.objectToJson(s3EventNotification), null);\n    }", "signature": "void testS3MessageNoKey()", "full_signature": "@Test public void testS3MessageNoKey()", "class_method_signature": "HerdJmsMessageListenerTest.testS3MessageNoKey()", "testcase": true, "constructor": false, "invocations": ["add", "setLogLevel", "setLogLevel", "processMessage", "objectToJson"]}, "focal_class": {"identifier": "HerdJmsMessageListener", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HerdJmsMessageListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HerdJmsMessageListener.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private MessageNotificationEventService sqsNotificationEventService;", "modifier": "@Autowired\n    private", "type": "MessageNotificationEventService", "declarator": "sqsNotificationEventService", "var_name": "sqsNotificationEventService"}, {"original_string": "@Autowired\n    private UploadDownloadService uploadDownloadService;", "modifier": "@Autowired\n    private", "type": "UploadDownloadService", "declarator": "uploadDownloadService", "var_name": "uploadDownloadService"}], "methods": [{"identifier": "controlHerdJmsMessageListener", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 60000) public", "return": "void", "signature": "void controlHerdJmsMessageListener()", "full_signature": "@Scheduled(fixedDelay = 60000) public void controlHerdJmsMessageListener()", "class_method_signature": "HerdJmsMessageListener.controlHerdJmsMessageListener()", "testcase": false, "constructor": false}, {"identifier": "processMessage", "parameters": "(String payload, @Headers Map<Object, Object> allHeaders)", "modifiers": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING) public", "return": "void", "signature": "void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "full_signature": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING) public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "class_method_signature": "HerdJmsMessageListener.processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "testcase": false, "constructor": false}, {"identifier": "processS3Notification", "parameters": "(String payload)", "modifiers": "private", "return": "boolean", "signature": "boolean processS3Notification(String payload)", "full_signature": "private boolean processS3Notification(String payload)", "class_method_signature": "HerdJmsMessageListener.processS3Notification(String payload)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/HerdJmsMessageListener.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(String payload, @Headers Map<Object, Object> allHeaders)", "modifiers": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING) public", "return": "void", "body": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING,\n        containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING)\n    public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)\n    {\n        LOGGER.info(\"JMS message received from the queue. jmsQueueName=\\\"{}\\\" jmsMessageHeaders=\\\"{}\\\" jmsMessagePayload={}\",\n            HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, allHeaders, payload);\n\n        // Process the message as S3 notification.\n        boolean messageProcessed = processS3Notification(payload);\n\n        if (!messageProcessed)\n        {\n            // The message was not processed, log the error.\n            LOGGER.error(\"Failed to process message from the JMS queue. jmsQueueName=\\\"{}\\\" jmsMessagePayload={}\",\n                HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, payload);\n        }\n    }", "signature": "void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "full_signature": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_HERD_INCOMING) public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "class_method_signature": "HerdJmsMessageListener.processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "testcase": false, "constructor": false, "invocations": ["info", "processS3Notification", "error"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}