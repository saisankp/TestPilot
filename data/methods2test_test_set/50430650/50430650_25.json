{"test_class": {"identifier": "ClasspathScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/technophobia/substeps/scanner/ClasspathScannerTest.java"}, "test_case": {"identifier": "testClasspathResolution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testClasspathResolution() {\n        // can get the classpath like this:\n        System.out.println(System.getProperty(\"java.class.path\"));\n\n        final ClasspathScanner cpScanner = new ClasspathScanner();\n\n        final List<Class<?>> classesWithAnnotation = cpScanner.getClassesWithAnnotation(\n                SubSteps.StepImplementations.class, Thread.currentThread().getContextClassLoader());\n\n        Assert.assertNotNull(classesWithAnnotation);\n\n        Assert.assertThat(classesWithAnnotation.contains(MockStepImplementations.class),\n                is(true));\n\n        // if elem is a jar, open up and take a look - lengthy?\n\n        // if the path element is a folder - assume its full of java classes,\n        // construct a name and load up via the classloader\n\n        // how to actually get the classes from\n    }", "signature": "void testClasspathResolution()", "full_signature": "@Test public void testClasspathResolution()", "class_method_signature": "ClasspathScannerTest.testClasspathResolution()", "testcase": true, "constructor": false, "invocations": ["println", "getProperty", "getClassesWithAnnotation", "getContextClassLoader", "currentThread", "assertNotNull", "assertThat", "contains", "is"]}, "focal_class": {"identifier": "ClasspathScanner", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getClassesWithAnnotation", "parameters": "(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "modifiers": "public", "return": "List<Class<?>>", "signature": "List<Class<?>> getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "full_signature": "public List<Class<?>> getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "class_method_signature": "ClasspathScanner.getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "testcase": false, "constructor": false}, {"identifier": "getClassesWithAnnotation", "parameters": "(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader)", "modifiers": "public", "return": "List<Class<?>>", "signature": "List<Class<?>> getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader)", "full_signature": "public List<Class<?>> getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader)", "class_method_signature": "ClasspathScanner.getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "convertFileToClass", "parameters": "(final File f, final File root)", "modifiers": "private static", "return": "String", "signature": "String convertFileToClass(final File f, final File root)", "full_signature": "private static String convertFileToClass(final File f, final File root)", "class_method_signature": "ClasspathScanner.convertFileToClass(final File f, final File root)", "testcase": false, "constructor": false}, {"identifier": "getAllFiles", "parameters": "(final File root, final String extension)", "modifiers": "private static", "return": "List<File>", "signature": "List<File> getAllFiles(final File root, final String extension)", "full_signature": "private static List<File> getAllFiles(final File root, final String extension)", "class_method_signature": "ClasspathScanner.getAllFiles(final File root, final String extension)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/technophobia/substeps/scanner/ClasspathScanner.java"}, "focal_method": {"identifier": "getClassesWithAnnotation", "parameters": "(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "modifiers": "public", "return": "List<Class<?>>", "body": "public List<Class<?>> getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements) {\n\n        final List<Class<?>> classList = new ArrayList<Class<?>>();\n\n        final List<String> classNameList = new ArrayList<String>();\n\n        for (final String cpElement : cpElements) {\n            final File f = new File(cpElement);\n\n            if (f.exists() && f.isDirectory()) {\n                final List<File> files = getAllFiles(f, \"class\");\n\n                for (final File classFile : files) {\n                    classNameList.add(convertFileToClass(classFile, f));\n                }\n\n            } else {\n                // jar file\n                JarFile jarFile = null;\n                try {\n                    jarFile = new JarFile(f);\n\n                    final Enumeration<JarEntry> entries = jarFile.entries();\n\n                    while (entries.hasMoreElements()) {\n                        final JarEntry nextElement = entries.nextElement();\n\n                        if (!nextElement.isDirectory()) {\n                            final String name = nextElement.getName();\n\n                            if (name.endsWith(\".class\")) {\n                                final String classname = name.replace(File.separatorChar, '.');\n                                classNameList.add(classname.substring(0, classname.length() - 6));\n                            }\n                        }\n                    }\n                } catch (final IOException e) {\n                    // don't care\n                } finally {\n                    if (jarFile != null) {\n                        try {\n                            jarFile.close();\n                        } catch (IOException e) {\n                            // don't care\n                        }\n                    }\n                }\n\n                // load up contents of jar\n\n            }\n\n        }\n\n        for (final String className : classNameList) {\n            try {\n                if (!className.contains(\"$\")) {\n                    // no inner classes here thanks\n                    final Class<?> clazz = classLoader.loadClass(className);\n\n                    if (clazz.isAnnotationPresent(desiredAnnotation)) {\n                        classList.add(clazz);\n                    }\n                }\n            } catch (final NoClassDefFoundError e) {\n                // don't care\n            } catch (final ClassNotFoundException e) {\n                // don't care about that either\n            }\n\n        }\n\n        return classList;\n\n    }", "signature": "List<Class<?>> getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "full_signature": "public List<Class<?>> getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "class_method_signature": "ClasspathScanner.getClassesWithAnnotation(final Class<? extends Annotation> desiredAnnotation,\n                                                   final ClassLoader classLoader, final String[] cpElements)", "testcase": false, "constructor": false, "invocations": ["exists", "isDirectory", "getAllFiles", "add", "convertFileToClass", "entries", "hasMoreElements", "nextElement", "isDirectory", "getName", "endsWith", "replace", "add", "substring", "length", "close", "contains", "loadClass", "isAnnotationPresent", "add"]}, "repository": {"repo_id": 50430650, "url": "https://github.com/Substeps/substeps-framework", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 5, "size": 2783, "license": "licensed"}}