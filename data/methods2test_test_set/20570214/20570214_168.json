{"test_class": {"identifier": "RsaSsaPkcs1SignKeyManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RsaSsaPkcs1SignKeyManager manager = new RsaSsaPkcs1SignKeyManager();", "modifier": "private final", "type": "RsaSsaPkcs1SignKeyManager", "declarator": "manager = new RsaSsaPkcs1SignKeyManager()", "var_name": "manager"}, {"original_string": "private final KeyTypeManager.KeyFactory<RsaSsaPkcs1KeyFormat, RsaSsaPkcs1PrivateKey> factory =\n      manager.keyFactory();", "modifier": "private final", "type": "KeyTypeManager.KeyFactory<RsaSsaPkcs1KeyFormat, RsaSsaPkcs1PrivateKey>", "declarator": "factory =\n      manager.keyFactory()", "var_name": "factory"}], "file": "java_src/src/test/java/com/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManagerTest.java"}, "test_case": {"identifier": "testRsa3072SsaPkcs1Sha256F4Template", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRsa3072SsaPkcs1Sha256F4Template() throws Exception {\n    KeyTemplate template = RsaSsaPkcs1SignKeyManager.rsa3072SsaPkcs1Sha256F4Template();\n    assertThat(template.getTypeUrl()).isEqualTo(new RsaSsaPkcs1SignKeyManager().getKeyType());\n    assertThat(template.getOutputPrefixType()).isEqualTo(KeyTemplate.OutputPrefixType.TINK);\n    RsaSsaPkcs1KeyFormat format =\n        RsaSsaPkcs1KeyFormat.parseFrom(\n            template.getValue(), ExtensionRegistryLite.getEmptyRegistry());\n\n    assertThat(format.hasParams()).isTrue();\n    assertThat(format.getParams().getHashType()).isEqualTo(HashType.SHA256);\n    assertThat(format.getModulusSizeInBits()).isEqualTo(3072);\n    assertThat(new BigInteger(1, format.getPublicExponent().toByteArray()))\n        .isEqualTo(BigInteger.valueOf(65537));\n  }", "signature": "void testRsa3072SsaPkcs1Sha256F4Template()", "full_signature": "@Test public void testRsa3072SsaPkcs1Sha256F4Template()", "class_method_signature": "RsaSsaPkcs1SignKeyManagerTest.testRsa3072SsaPkcs1Sha256F4Template()", "testcase": true, "constructor": false, "invocations": ["rsa3072SsaPkcs1Sha256F4Template", "isEqualTo", "assertThat", "getTypeUrl", "getKeyType", "isEqualTo", "assertThat", "getOutputPrefixType", "parseFrom", "getValue", "getEmptyRegistry", "isTrue", "assertThat", "hasParams", "isEqualTo", "assertThat", "getHashType", "getParams", "isEqualTo", "assertThat", "getModulusSizeInBits", "isEqualTo", "assertThat", "toByteArray", "getPublicExponent", "valueOf"]}, "focal_class": {"identifier": "RsaSsaPkcs1SignKeyManager", "superclass": "extends PrivateKeyTypeManager<RsaSsaPkcs1PrivateKey, RsaSsaPkcs1PublicKey>", "interfaces": "", "fields": [{"original_string": "private static final byte[] TEST_MESSAGE =\n      \"Tink and Wycheproof.\".getBytes(Charset.forName(\"UTF-8\"));", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_MESSAGE =\n      \"Tink and Wycheproof.\".getBytes(Charset.forName(\"UTF-8\"))", "var_name": "TEST_MESSAGE"}], "methods": [{"identifier": "RsaSsaPkcs1SignKeyManager", "parameters": "()", "modifiers": "", "return": "", "signature": " RsaSsaPkcs1SignKeyManager()", "full_signature": "  RsaSsaPkcs1SignKeyManager()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.RsaSsaPkcs1SignKeyManager()", "testcase": false, "constructor": true}, {"identifier": "getKeyType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getKeyType()", "full_signature": "@Override public String getKeyType()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.getKeyType()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVersion()", "full_signature": "@Override public int getVersion()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(RsaSsaPkcs1PrivateKey privKeyProto)", "modifiers": "@Override public", "return": "RsaSsaPkcs1PublicKey", "signature": "RsaSsaPkcs1PublicKey getPublicKey(RsaSsaPkcs1PrivateKey privKeyProto)", "full_signature": "@Override public RsaSsaPkcs1PublicKey getPublicKey(RsaSsaPkcs1PrivateKey privKeyProto)", "class_method_signature": "RsaSsaPkcs1SignKeyManager.getPublicKey(RsaSsaPkcs1PrivateKey privKeyProto)", "testcase": false, "constructor": false}, {"identifier": "keyMaterialType", "parameters": "()", "modifiers": "@Override public", "return": "KeyMaterialType", "signature": "KeyMaterialType keyMaterialType()", "full_signature": "@Override public KeyMaterialType keyMaterialType()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.keyMaterialType()", "testcase": false, "constructor": false}, {"identifier": "parseKey", "parameters": "(ByteString byteString)", "modifiers": "@Override public", "return": "RsaSsaPkcs1PrivateKey", "signature": "RsaSsaPkcs1PrivateKey parseKey(ByteString byteString)", "full_signature": "@Override public RsaSsaPkcs1PrivateKey parseKey(ByteString byteString)", "class_method_signature": "RsaSsaPkcs1SignKeyManager.parseKey(ByteString byteString)", "testcase": false, "constructor": false}, {"identifier": "validateKey", "parameters": "(RsaSsaPkcs1PrivateKey privKey)", "modifiers": "@Override public", "return": "void", "signature": "void validateKey(RsaSsaPkcs1PrivateKey privKey)", "full_signature": "@Override public void validateKey(RsaSsaPkcs1PrivateKey privKey)", "class_method_signature": "RsaSsaPkcs1SignKeyManager.validateKey(RsaSsaPkcs1PrivateKey privKey)", "testcase": false, "constructor": false}, {"identifier": "keyFactory", "parameters": "()", "modifiers": "@Override public", "return": "KeyFactory<RsaSsaPkcs1KeyFormat, RsaSsaPkcs1PrivateKey>", "signature": "KeyFactory<RsaSsaPkcs1KeyFormat, RsaSsaPkcs1PrivateKey> keyFactory()", "full_signature": "@Override public KeyFactory<RsaSsaPkcs1KeyFormat, RsaSsaPkcs1PrivateKey> keyFactory()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.keyFactory()", "testcase": false, "constructor": false}, {"identifier": "registerPair", "parameters": "(boolean newKeyAllowed)", "modifiers": "public static", "return": "void", "signature": "void registerPair(boolean newKeyAllowed)", "full_signature": "public static void registerPair(boolean newKeyAllowed)", "class_method_signature": "RsaSsaPkcs1SignKeyManager.registerPair(boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "rsa3072SsaPkcs1Sha256F4Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rsa3072SsaPkcs1Sha256F4Template()", "full_signature": "public static final KeyTemplate rsa3072SsaPkcs1Sha256F4Template()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.rsa3072SsaPkcs1Sha256F4Template()", "testcase": false, "constructor": false}, {"identifier": "rawRsa3072SsaPkcs1Sha256F4Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawRsa3072SsaPkcs1Sha256F4Template()", "full_signature": "public static final KeyTemplate rawRsa3072SsaPkcs1Sha256F4Template()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.rawRsa3072SsaPkcs1Sha256F4Template()", "testcase": false, "constructor": false}, {"identifier": "rsa4096SsaPkcs1Sha512F4Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rsa4096SsaPkcs1Sha512F4Template()", "full_signature": "public static final KeyTemplate rsa4096SsaPkcs1Sha512F4Template()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.rsa4096SsaPkcs1Sha512F4Template()", "testcase": false, "constructor": false}, {"identifier": "rawRsa4096SsaPkcs1Sha512F4Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "signature": "KeyTemplate rawRsa4096SsaPkcs1Sha512F4Template()", "full_signature": "public static final KeyTemplate rawRsa4096SsaPkcs1Sha512F4Template()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.rawRsa4096SsaPkcs1Sha512F4Template()", "testcase": false, "constructor": false}, {"identifier": "createKeyTemplate", "parameters": "(\n      HashType hashType,\n      int modulusSize,\n      BigInteger publicExponent,\n      KeyTemplate.OutputPrefixType prefixType)", "modifiers": "private static", "return": "KeyTemplate", "signature": "KeyTemplate createKeyTemplate(\n      HashType hashType,\n      int modulusSize,\n      BigInteger publicExponent,\n      KeyTemplate.OutputPrefixType prefixType)", "full_signature": "private static KeyTemplate createKeyTemplate(\n      HashType hashType,\n      int modulusSize,\n      BigInteger publicExponent,\n      KeyTemplate.OutputPrefixType prefixType)", "class_method_signature": "RsaSsaPkcs1SignKeyManager.createKeyTemplate(\n      HashType hashType,\n      int modulusSize,\n      BigInteger publicExponent,\n      KeyTemplate.OutputPrefixType prefixType)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/signature/RsaSsaPkcs1SignKeyManager.java"}, "focal_method": {"identifier": "rsa3072SsaPkcs1Sha256F4Template", "parameters": "()", "modifiers": "public static final", "return": "KeyTemplate", "body": "public static final KeyTemplate rsa3072SsaPkcs1Sha256F4Template() {\n    return createKeyTemplate(\n        HashType.SHA256,\n        /*modulusSize=*/ 3072,\n        RSAKeyGenParameterSpec.F4,\n        KeyTemplate.OutputPrefixType.TINK);\n  }", "signature": "KeyTemplate rsa3072SsaPkcs1Sha256F4Template()", "full_signature": "public static final KeyTemplate rsa3072SsaPkcs1Sha256F4Template()", "class_method_signature": "RsaSsaPkcs1SignKeyManager.rsa3072SsaPkcs1Sha256F4Template()", "testcase": false, "constructor": false, "invocations": ["createKeyTemplate"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}