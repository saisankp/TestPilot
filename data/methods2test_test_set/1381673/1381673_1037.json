{"test_class": {"identifier": "UpdatableInspectorListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UpdatableInspectorList<HasUUID, Item> list;", "modifier": "private", "type": "UpdatableInspectorList<HasUUID, Item>", "declarator": "list", "var_name": "list"}, {"original_string": "private AnalyzerConfiguration configuration;", "modifier": "private", "type": "AnalyzerConfiguration", "declarator": "configuration", "var_name": "configuration"}], "file": "drools-verifier/drools-verifier-core/src/test/java/org/drools/verifier/core/maps/UpdatableInspectorListTest.java"}, "test_case": {"identifier": "reAddNew", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reAddNew() throws\n            Exception {\n        final ArrayList<Item> updates = new ArrayList<>();\n\n        updates.add(new Item());\n\n        list.update(updates);\n        assertEquals(1,\n                     list.size());\n\n        updates.add(new Item());\n        list.update(updates);\n        assertEquals(2,\n                     list.size());\n    }", "signature": "void reAddNew()", "full_signature": "@Test public void reAddNew()", "class_method_signature": "UpdatableInspectorListTest.reAddNew()", "testcase": true, "constructor": false, "invocations": ["add", "update", "assertEquals", "size", "add", "update", "assertEquals", "size"]}, "focal_class": {"identifier": "UpdatableInspectorList", "superclass": "extends InspectorList<InspectorType>", "interfaces": "", "fields": [{"original_string": "private InspectorFactory<InspectorType, InspectedType> inspectorFactory;", "modifier": "private", "type": "InspectorFactory<InspectorType, InspectedType>", "declarator": "inspectorFactory", "var_name": "inspectorFactory"}, {"original_string": "private HashMap<UUIDKey, InspectorType> map = new HashMap<>();", "modifier": "private", "type": "HashMap<UUIDKey, InspectorType>", "declarator": "map = new HashMap<>()", "var_name": "map"}], "methods": [{"identifier": "UpdatableInspectorList", "parameters": "(final InspectorFactory<InspectorType, InspectedType> inspectorFactory,\n                                  final AnalyzerConfiguration configuration)", "modifiers": "public", "return": "", "signature": " UpdatableInspectorList(final InspectorFactory<InspectorType, InspectedType> inspectorFactory,\n                                  final AnalyzerConfiguration configuration)", "full_signature": "public  UpdatableInspectorList(final InspectorFactory<InspectorType, InspectedType> inspectorFactory,\n                                  final AnalyzerConfiguration configuration)", "class_method_signature": "UpdatableInspectorList.UpdatableInspectorList(final InspectorFactory<InspectorType, InspectedType> inspectorFactory,\n                                  final AnalyzerConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(final Collection<InspectedType> updates)", "modifiers": "public", "return": "void", "signature": "void update(final Collection<InspectedType> updates)", "full_signature": "public void update(final Collection<InspectedType> updates)", "class_method_signature": "UpdatableInspectorList.update(final Collection<InspectedType> updates)", "testcase": false, "constructor": false}], "file": "drools-verifier/drools-verifier-core/src/main/java/org/drools/verifier/core/maps/UpdatableInspectorList.java"}, "focal_method": {"identifier": "update", "parameters": "(final Collection<InspectedType> updates)", "modifiers": "public", "return": "void", "body": "public void update(final Collection<InspectedType> updates) {\n\n        final ArrayList<UUIDKey> originalItems = new ArrayList<>(map.keySet());\n\n        for (final InspectedType updatable : updates) {\n\n            final InspectorType inspector = map.get(updatable.getUuidKey());\n\n            if (inspector != null) {\n                // Everything up to date.\n                originalItems.remove(updatable.getUuidKey());\n                continue;\n            } else {\n                final InspectorType newInspector = inspectorFactory.make(updatable);\n                add(newInspector);\n                map.put(updatable.getUuidKey(),\n                        newInspector);\n            }\n        }\n\n        // Remove left overs, they were not in updates\n        for (final UUIDKey originalItem : originalItems) {\n            remove(map.remove(originalItem));\n        }\n    }", "signature": "void update(final Collection<InspectedType> updates)", "full_signature": "public void update(final Collection<InspectedType> updates)", "class_method_signature": "UpdatableInspectorList.update(final Collection<InspectedType> updates)", "testcase": false, "constructor": false, "invocations": ["keySet", "get", "getUuidKey", "remove", "getUuidKey", "make", "add", "put", "getUuidKey", "remove", "remove"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}