{"test_class": {"identifier": "PipelineFunctionLowerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final PipelineElement KNOWN_INPUT = PipelineElement.resolved(\"CamElCase\");", "modifier": "private static final", "type": "PipelineElement", "declarator": "KNOWN_INPUT = PipelineElement.resolved(\"CamElCase\")", "var_name": "KNOWN_INPUT"}, {"original_string": "private static final String LOWER_CASE = \"camelcase\";", "modifier": "private static final", "type": "String", "declarator": "LOWER_CASE = \"camelcase\"", "var_name": "LOWER_CASE"}, {"original_string": "private final PipelineFunctionLower function = new PipelineFunctionLower();", "modifier": "private final", "type": "PipelineFunctionLower", "declarator": "function = new PipelineFunctionLower()", "var_name": "function"}, {"original_string": "@Mock\n    private ExpressionResolver expressionResolver;", "modifier": "@Mock\n    private", "type": "ExpressionResolver", "declarator": "expressionResolver", "var_name": "expressionResolver"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/PipelineFunctionLowerTest.java"}, "test_case": {"identifier": "apply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void apply() {\n        assertThat(function.apply(KNOWN_INPUT, \"()\", expressionResolver)).contains(LOWER_CASE);\n    }", "signature": "void apply()", "full_signature": "@Test public void apply()", "class_method_signature": "PipelineFunctionLowerTest.apply()", "testcase": true, "constructor": false, "invocations": ["contains", "assertThat", "apply"]}, "focal_class": {"identifier": "PipelineFunctionLower", "superclass": "", "interfaces": "implements PipelineFunction", "fields": [{"original_string": "private static final String FUNCTION_NAME = \"lower\";", "modifier": "private static final", "type": "String", "declarator": "FUNCTION_NAME = \"lower\"", "var_name": "FUNCTION_NAME"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "PipelineFunctionLower.getName()", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "()", "modifiers": "@Override public", "return": "LowerFunctionSignature", "signature": "LowerFunctionSignature getSignature()", "full_signature": "@Override public LowerFunctionSignature getSignature()", "class_method_signature": "PipelineFunctionLower.getSignature()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "signature": "PipelineElement apply(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement apply(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionLower.apply(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false}, {"identifier": "validateOrThrow", "parameters": "(final String paramsIncludingParentheses)", "modifiers": "private", "return": "void", "signature": "void validateOrThrow(final String paramsIncludingParentheses)", "full_signature": "private void validateOrThrow(final String paramsIncludingParentheses)", "class_method_signature": "PipelineFunctionLower.validateOrThrow(final String paramsIncludingParentheses)", "testcase": false, "constructor": false}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/PipelineFunctionLower.java"}, "focal_method": {"identifier": "apply", "parameters": "(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "modifiers": "@Override public", "return": "PipelineElement", "body": "@Override\n    public PipelineElement apply(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver) {\n\n        // check if signature matches (empty params!)\n        validateOrThrow(paramsIncludingParentheses);\n        return element.map(String::toLowerCase);\n    }", "signature": "PipelineElement apply(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "full_signature": "@Override public PipelineElement apply(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "class_method_signature": "PipelineFunctionLower.apply(final PipelineElement element, final String paramsIncludingParentheses,\n            final ExpressionResolver expressionResolver)", "testcase": false, "constructor": false, "invocations": ["validateOrThrow", "map"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}