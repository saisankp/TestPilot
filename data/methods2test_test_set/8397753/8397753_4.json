{"test_class": {"identifier": "TestGitStatus", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "private File repositoryDirectory;", "modifier": "private", "type": "File", "declarator": "repositoryDirectory", "var_name": "repositoryDirectory"}, {"original_string": "private GitCommit gitCommit;", "modifier": "private", "type": "GitCommit", "declarator": "gitCommit", "var_name": "gitCommit"}, {"original_string": "private GitAdd gitAdd;", "modifier": "private", "type": "GitAdd", "declarator": "gitAdd", "var_name": "gitAdd"}, {"original_string": "private GitStatus gitStatus;", "modifier": "private", "type": "GitStatus", "declarator": "gitStatus", "var_name": "gitStatus"}, {"original_string": "private GitStatusOptions options;", "modifier": "private", "type": "GitStatusOptions", "declarator": "options", "var_name": "options"}, {"original_string": "File file1;", "modifier": "", "type": "File", "declarator": "file1", "var_name": "file1"}, {"original_string": "File file2;", "modifier": "", "type": "File", "declarator": "file2", "var_name": "file2"}, {"original_string": "File testDir;", "modifier": "", "type": "File", "declarator": "testDir", "var_name": "testDir"}, {"original_string": "File file3;", "modifier": "", "type": "File", "declarator": "file3", "var_name": "file3"}], "file": "javagit/src/test/java/edu/nyu/cs/javagit/api/commands/TestGitStatus.java"}, "test_case": {"identifier": "testReadyToCommitNewFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadyToCommitNewFiles() throws IOException, JavaGitException {\n        List<File> filesToAdd = new ArrayList<File>();\n        filesToAdd.add(file1);\n        filesToAdd.add(file2);\n        filesToAdd.add(new File(\"testDirectory\"));\n        filesToAdd.add(new File(\"testDirectory\" + File.separator + file3.getPath()));\n        GitAddOptions addOptions = new GitAddOptions();\n        gitAdd.add(repositoryDirectory, addOptions, filesToAdd);\n        List<File> statusPath = null;\n        GitStatusResponse status = gitStatus.status(repositoryDirectory, options, statusPath);\n        int noOfNewFilesToCommit = status.getNewFilesToCommitSize();\n        assertEquals(\"Error. No of New Files to commit does not match\", 3, noOfNewFilesToCommit);\n        assertEquals(\"Error. Filename does not match\", \"foobar01\", status\n                .getFileFromNewFilesToCommit(0).getName());\n        assertEquals(\"Error. Filename does not match\", \"foobar02\", status\n                .getFileFromNewFilesToCommit(1).getName());\n        assertEquals(\"Error. Filename does not match\", repositoryDirectory.getPath() +\n                File.separator + \"testDirectory\" + File.separator + \"foobar03\",\n                status.getFileFromNewFilesToCommit(2).toString());\n    }", "signature": "void testReadyToCommitNewFiles()", "full_signature": "@Test public void testReadyToCommitNewFiles()", "class_method_signature": "TestGitStatus.testReadyToCommitNewFiles()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "getPath", "add", "status", "getNewFilesToCommitSize", "assertEquals", "assertEquals", "getName", "getFileFromNewFilesToCommit", "assertEquals", "getName", "getFileFromNewFilesToCommit", "assertEquals", "getPath", "toString", "getFileFromNewFilesToCommit"]}, "focal_class": {"identifier": "GitStatus", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "status", "parameters": "(File repositoryPath, GitStatusOptions options, List<File> paths)", "modifiers": "public", "return": "GitStatusResponse", "signature": "GitStatusResponse status(File repositoryPath, GitStatusOptions options, List<File> paths)", "full_signature": "public GitStatusResponse status(File repositoryPath, GitStatusOptions options, List<File> paths)", "class_method_signature": "GitStatus.status(File repositoryPath, GitStatusOptions options, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "(File repositoryPath, List<File> paths)", "modifiers": "public", "return": "GitStatusResponse", "signature": "GitStatusResponse status(File repositoryPath, List<File> paths)", "full_signature": "public GitStatusResponse status(File repositoryPath, List<File> paths)", "class_method_signature": "GitStatus.status(File repositoryPath, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "(File repositoryPath, GitStatusOptions options)", "modifiers": "public", "return": "GitStatusResponse", "signature": "GitStatusResponse status(File repositoryPath, GitStatusOptions options)", "full_signature": "public GitStatusResponse status(File repositoryPath, GitStatusOptions options)", "class_method_signature": "GitStatus.status(File repositoryPath, GitStatusOptions options)", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "(File repositoryPath, GitStatusOptions options, File file)", "modifiers": "public", "return": "GitStatusResponse", "signature": "GitStatusResponse status(File repositoryPath, GitStatusOptions options, File file)", "full_signature": "public GitStatusResponse status(File repositoryPath, GitStatusOptions options, File file)", "class_method_signature": "GitStatus.status(File repositoryPath, GitStatusOptions options, File file)", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "(File repositoryPath)", "modifiers": "public", "return": "GitStatusResponse", "signature": "GitStatusResponse status(File repositoryPath)", "full_signature": "public GitStatusResponse status(File repositoryPath)", "class_method_signature": "GitStatus.status(File repositoryPath)", "testcase": false, "constructor": false}, {"identifier": "statusAll", "parameters": "(File repositoryPath)", "modifiers": "public", "return": "GitStatusResponse", "signature": "GitStatusResponse statusAll(File repositoryPath)", "full_signature": "public GitStatusResponse statusAll(File repositoryPath)", "class_method_signature": "GitStatus.statusAll(File repositoryPath)", "testcase": false, "constructor": false}, {"identifier": "getSingleFileStatus", "parameters": "(File repositoryPath, File path)", "modifiers": "public", "return": "GitStatusResponse", "signature": "GitStatusResponse getSingleFileStatus(File repositoryPath, File path)", "full_signature": "public GitStatusResponse getSingleFileStatus(File repositoryPath, File path)", "class_method_signature": "GitStatus.getSingleFileStatus(File repositoryPath, File path)", "testcase": false, "constructor": false}, {"identifier": "getFileStatus", "parameters": "(File repositoryPath, File path)", "modifiers": "public", "return": "GitFileSystemObject.Status", "signature": "GitFileSystemObject.Status getFileStatus(File repositoryPath, File path)", "full_signature": "public GitFileSystemObject.Status getFileStatus(File repositoryPath, File path)", "class_method_signature": "GitStatus.getFileStatus(File repositoryPath, File path)", "testcase": false, "constructor": false}], "file": "javagit/src/main/java/edu/nyu/cs/javagit/api/commands/GitStatus.java"}, "focal_method": {"identifier": "status", "parameters": "(File repositoryPath, GitStatusOptions options, List<File> paths)", "modifiers": "public", "return": "GitStatusResponse", "body": "public GitStatusResponse status(File repositoryPath, GitStatusOptions options, List<File> paths)\n      throws JavaGitException, IOException {\n    CheckUtilities.checkFileValidity(repositoryPath);\n    IClient client = ClientManager.getInstance().getPreferredClient();\n    IGitStatus gitStatus = client.getGitStatusInstance();\n    return gitStatus.status(repositoryPath, options, paths);\n  }", "signature": "GitStatusResponse status(File repositoryPath, GitStatusOptions options, List<File> paths)", "full_signature": "public GitStatusResponse status(File repositoryPath, GitStatusOptions options, List<File> paths)", "class_method_signature": "GitStatus.status(File repositoryPath, GitStatusOptions options, List<File> paths)", "testcase": false, "constructor": false, "invocations": ["checkFileValidity", "getPreferredClient", "getInstance", "getGitStatusInstance", "status"]}, "repository": {"repo_id": 8397753, "url": "https://github.com/bit-man/SwissArmyJavaGit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 1549, "license": "licensed"}}