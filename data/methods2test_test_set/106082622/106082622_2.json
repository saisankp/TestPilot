{"test_class": {"identifier": "CustomUserDetailsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private UserTestTools userTestTools;", "modifier": "@Autowired\n    private", "type": "UserTestTools", "declarator": "userTestTools", "var_name": "userTestTools"}, {"original_string": "@Autowired\n    private CustomUserDetailsService customUserDetailsService;", "modifier": "@Autowired\n    private", "type": "CustomUserDetailsService", "declarator": "customUserDetailsService", "var_name": "customUserDetailsService"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/user/CustomUserDetailsServiceTest.java"}, "test_case": {"identifier": "smokeTest_loadValidUser_differentCasing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void smokeTest_loadValidUser_differentCasing() {\n        // Setup user.\n        final String userEmail = \"test\" + System.currentTimeMillis() + \"@example.com\";\n        final User user = userTestTools.createUser();\n        user.setEmail(userEmail);\n        userTestTools.save(user);\n\n        // Setup lookup email to have a different case.\n        final String lookupEmail = userEmail.toUpperCase();\n\n        // Attempt to load using different case.\n        final UserDetails userDetails = customUserDetailsService.loadUserByUsername(lookupEmail);\n\n        // Verify\n        assertNotNull(\"Result should be non-null\", userDetails);\n        assertTrue(\"Should be a CustomUserDetails instance\", userDetails instanceof CustomUserDetails);\n        assertEquals(\"Should have correct email\", userEmail, userDetails.getUsername());\n        assertEquals(\"Should have correct id\",  user.getId(), ((CustomUserDetails) userDetails).getUserId());\n        assertNotNull(\"Should have a user model\", ((CustomUserDetails) userDetails).getUserModel());\n    }", "signature": "void smokeTest_loadValidUser_differentCasing()", "full_signature": "@Test public void smokeTest_loadValidUser_differentCasing()", "class_method_signature": "CustomUserDetailsServiceTest.smokeTest_loadValidUser_differentCasing()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "createUser", "setEmail", "save", "toUpperCase", "loadUserByUsername", "assertNotNull", "assertTrue", "assertEquals", "getUsername", "assertEquals", "getId", "getUserId", "assertNotNull", "getUserModel"]}, "focal_class": {"identifier": "CustomUserDetailsService", "superclass": "", "interfaces": "implements UserDetailsService", "fields": [{"original_string": "private final UserRepository userRepository;", "modifier": "private final", "type": "UserRepository", "declarator": "userRepository", "var_name": "userRepository"}], "methods": [{"identifier": "CustomUserDetailsService", "parameters": "(final UserRepository userRepository)", "modifiers": "public", "return": "", "signature": " CustomUserDetailsService(final UserRepository userRepository)", "full_signature": "public  CustomUserDetailsService(final UserRepository userRepository)", "class_method_signature": "CustomUserDetailsService.CustomUserDetailsService(final UserRepository userRepository)", "testcase": false, "constructor": true}, {"identifier": "loadUserByUsername", "parameters": "(final String email)", "modifiers": "@Override public", "return": "UserDetails", "signature": "UserDetails loadUserByUsername(final String email)", "full_signature": "@Override public UserDetails loadUserByUsername(final String email)", "class_method_signature": "CustomUserDetailsService.loadUserByUsername(final String email)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/user/CustomUserDetailsService.java"}, "focal_method": {"identifier": "loadUserByUsername", "parameters": "(final String email)", "modifiers": "@Override public", "return": "UserDetails", "body": "@Override\n    public UserDetails loadUserByUsername(final String email) throws UsernameNotFoundException {\n        final User user = userRepository.findByEmailIgnoreCase(email);\n        if (user == null) {\n            throw new UsernameNotFoundException(\"User not found.\");\n        }\n        return new CustomUserDetails(user);\n    }", "signature": "UserDetails loadUserByUsername(final String email)", "full_signature": "@Override public UserDetails loadUserByUsername(final String email)", "class_method_signature": "CustomUserDetailsService.loadUserByUsername(final String email)", "testcase": false, "constructor": false, "invocations": ["findByEmailIgnoreCase"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}