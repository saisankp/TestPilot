{"test_class": {"identifier": "JsonStackingSemanticTranslatorTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private static final String ONT_URI = \"urn://mobi.com/ontologies/testExtraction\";", "modifier": "private static final", "type": "String", "declarator": "ONT_URI = \"urn://mobi.com/ontologies/testExtraction\"", "var_name": "ONT_URI"}, {"original_string": "private JsonStackingSemanticTranslator extractor;", "modifier": "private", "type": "JsonStackingSemanticTranslator", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "private ExtractedOntology ontology;", "modifier": "private", "type": "ExtractedOntology", "declarator": "ontology", "var_name": "ontology"}], "file": "document-translation/com.mobi.document.translator.json/src/test/java/com/mobi/document/translator/stack/impl/json/JsonStackingSemanticTranslatorTest.java"}, "test_case": {"identifier": "twoDimensionalArraysTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void twoDimensionalArraysTest() throws Exception {\n        //TODO - Work with 2D Arrays... Ensure changes behave consistently.\n        final Model output = this.extractor.translate(\n                Paths.get(\"src/test/resources/test2dArrays.json\"), this.ontology);\n        Assert.assertNotNull(output);\n        Assert.assertFalse(output.isEmpty());\n\n    }", "signature": "void twoDimensionalArraysTest()", "full_signature": "@Test public void twoDimensionalArraysTest()", "class_method_signature": "JsonStackingSemanticTranslatorTest.twoDimensionalArraysTest()", "testcase": true, "constructor": false, "invocations": ["translate", "get", "assertNotNull", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "JsonStackingSemanticTranslator", "superclass": "extends AbstractStackingSemanticTranslator<JsonStackItem>", "interfaces": "implements StackingSemanticTranslator<JsonStackItem>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JsonStackingSemanticTranslator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JsonStackingSemanticTranslator.class)", "var_name": "LOG"}, {"original_string": "private static final JsonFactory JSON_FACTORY = new JsonFactory();", "modifier": "private static final", "type": "JsonFactory", "declarator": "JSON_FACTORY = new JsonFactory()", "var_name": "JSON_FACTORY"}], "methods": [{"identifier": "JsonStackingSemanticTranslator", "parameters": "()", "modifiers": "public", "return": "", "signature": " JsonStackingSemanticTranslator()", "full_signature": "public  JsonStackingSemanticTranslator()", "class_method_signature": "JsonStackingSemanticTranslator.JsonStackingSemanticTranslator()", "testcase": false, "constructor": true}, {"identifier": "setValueFactory", "parameters": "(ValueFactory valueFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setValueFactory(ValueFactory valueFactory)", "full_signature": "@Reference public void setValueFactory(ValueFactory valueFactory)", "class_method_signature": "JsonStackingSemanticTranslator.setValueFactory(ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "setModelFactory", "parameters": "(ModelFactory modelFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setModelFactory(ModelFactory modelFactory)", "full_signature": "@Reference public void setModelFactory(ModelFactory modelFactory)", "class_method_signature": "JsonStackingSemanticTranslator.setModelFactory(ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "setExpressionProcessor", "parameters": "(IriExpressionProcessor expressionProcessor)", "modifiers": "@Reference public", "return": "void", "signature": "void setExpressionProcessor(IriExpressionProcessor expressionProcessor)", "full_signature": "@Reference public void setExpressionProcessor(IriExpressionProcessor expressionProcessor)", "class_method_signature": "JsonStackingSemanticTranslator.setExpressionProcessor(IriExpressionProcessor expressionProcessor)", "testcase": false, "constructor": false}, {"identifier": "setOrmFactoryRegistry", "parameters": "(OrmFactoryRegistry ormFactoryRegistry)", "modifiers": "@Reference public", "return": "void", "signature": "void setOrmFactoryRegistry(OrmFactoryRegistry ormFactoryRegistry)", "full_signature": "@Reference public void setOrmFactoryRegistry(OrmFactoryRegistry ormFactoryRegistry)", "class_method_signature": "JsonStackingSemanticTranslator.setOrmFactoryRegistry(OrmFactoryRegistry ormFactoryRegistry)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "modifiers": "@Override public", "return": "Model", "signature": "Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "full_signature": "@Override public Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "class_method_signature": "JsonStackingSemanticTranslator.translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "testcase": false, "constructor": false}, {"identifier": "currentName", "parameters": "(final String jsonCurrentName)", "modifiers": "private", "return": "String", "signature": "String currentName(final String jsonCurrentName)", "full_signature": "private String currentName(final String jsonCurrentName)", "class_method_signature": "JsonStackingSemanticTranslator.currentName(final String jsonCurrentName)", "testcase": false, "constructor": false}, {"identifier": "peekForLastNonArray", "parameters": "()", "modifiers": "private", "return": "Optional<JsonStackItem>", "signature": "Optional<JsonStackItem> peekForLastNonArray()", "full_signature": "private Optional<JsonStackItem> peekForLastNonArray()", "class_method_signature": "JsonStackingSemanticTranslator.peekForLastNonArray()", "testcase": false, "constructor": false}, {"identifier": "parseToken", "parameters": "(final Model result, final ExtractedOntology managedOntology, final JsonToken token,\n                            final JsonParser jsonParser)", "modifiers": "private", "return": "void", "signature": "void parseToken(final Model result, final ExtractedOntology managedOntology, final JsonToken token,\n                            final JsonParser jsonParser)", "full_signature": "private void parseToken(final Model result, final ExtractedOntology managedOntology, final JsonToken token,\n                            final JsonParser jsonParser)", "class_method_signature": "JsonStackingSemanticTranslator.parseToken(final Model result, final ExtractedOntology managedOntology, final JsonToken token,\n                            final JsonParser jsonParser)", "testcase": false, "constructor": false}, {"identifier": "getPropertyName", "parameters": "(final String currentName)", "modifiers": "private", "return": "String", "signature": "String getPropertyName(final String currentName)", "full_signature": "private String getPropertyName(final String currentName)", "class_method_signature": "JsonStackingSemanticTranslator.getPropertyName(final String currentName)", "testcase": false, "constructor": false}, {"identifier": "getDatatypeDomain", "parameters": "(final JsonStackItem item)", "modifiers": "private", "return": "IRI", "signature": "IRI getDatatypeDomain(final JsonStackItem item)", "full_signature": "private IRI getDatatypeDomain(final JsonStackItem item)", "class_method_signature": "JsonStackingSemanticTranslator.getDatatypeDomain(final JsonStackItem item)", "testcase": false, "constructor": false}, {"identifier": "addDatatypeProperty", "parameters": "(final ExtractedOntology managedOntology, final String propertyName,\n                                     final JsonStackItem item, final Value value, final IRI range)", "modifiers": "private", "return": "void", "signature": "void addDatatypeProperty(final ExtractedOntology managedOntology, final String propertyName,\n                                     final JsonStackItem item, final Value value, final IRI range)", "full_signature": "private void addDatatypeProperty(final ExtractedOntology managedOntology, final String propertyName,\n                                     final JsonStackItem item, final Value value, final IRI range)", "class_method_signature": "JsonStackingSemanticTranslator.addDatatypeProperty(final ExtractedOntology managedOntology, final String propertyName,\n                                     final JsonStackItem item, final Value value, final IRI range)", "testcase": false, "constructor": false}], "file": "document-translation/com.mobi.document.translator.json/src/main/java/com/mobi/document/translator/stack/impl/json/JsonStackingSemanticTranslator.java"}, "focal_method": {"identifier": "translate", "parameters": "(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "modifiers": "@Override public", "return": "Model", "body": "@Override\n    public Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)\n            throws SemanticTranslationException {\n        final Model result = modelFactory.createModel();\n        try (final JsonParser jsonParser = JSON_FACTORY.createParser(dataStream)) {\n            JsonToken token = null;\n            while ((token = jsonParser.nextToken()) != null) {\n                parseToken(result, managedOntology, token, jsonParser);\n            }\n        } catch (JsonParseException e) {\n            throw new SemanticTranslationException(\"Issue parsing JSON from incoming data, on entity: \"\n                    + entityIdentifier, e);\n        } catch (IOException e) {\n            throw new SemanticTranslationException(\"Issue reading incoming stream to extract meaning from \"\n                    + entityIdentifier, e);\n        }\n        return result;\n    }", "signature": "Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "full_signature": "@Override public Model translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "class_method_signature": "JsonStackingSemanticTranslator.translate(InputStream dataStream, String entityIdentifier, ExtractedOntology managedOntology)", "testcase": false, "constructor": false, "invocations": ["createModel", "createParser", "nextToken", "parseToken"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}