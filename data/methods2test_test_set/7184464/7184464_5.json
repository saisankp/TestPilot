{"test_class": {"identifier": "EclipseLogAppenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EclipseLogAppenderWithMockPlatform appender = null;", "modifier": "private", "type": "EclipseLogAppenderWithMockPlatform", "declarator": "appender = null", "var_name": "appender"}, {"original_string": "private PatternLayoutEncoder encoder = null;", "modifier": "private", "type": "PatternLayoutEncoder", "declarator": "encoder = null", "var_name": "encoder"}], "file": "eclipse/src/test/java/ch/qos/logback/contrib/eclipse/EclipseLogAppenderTest.java"}, "test_case": {"identifier": "testAppendInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAppendInfo() {\n        MockEclipseErrorLog log = (MockEclipseErrorLog)appender.getPlatform().getLog(null);\n        List<IStatus> events = log.getLog();\n\n        //TODO: write me...\n    }", "signature": "void testAppendInfo()", "full_signature": "@Test public void testAppendInfo()", "class_method_signature": "EclipseLogAppenderTest.testAppendInfo()", "testcase": true, "constructor": false, "invocations": ["getLog", "getPlatform", "getLog"]}, "focal_class": {"identifier": "EclipseLogAppender", "superclass": "extends AppenderBase<ILoggingEvent>", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_BUNDLE_SYMBOLIC_NAME = \"ch.qos.logback.contrib.eclipse\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_BUNDLE_SYMBOLIC_NAME = \"ch.qos.logback.contrib.eclipse\"", "var_name": "DEFAULT_BUNDLE_SYMBOLIC_NAME"}, {"original_string": "private static final IPlatform _platform = new IPlatform() {\n\t\t@Override\n\t\tpublic ILog getLog(Bundle bundle) {\n\t\t\treturn Platform.getLog(bundle);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Bundle getBundle(String bundleName) {\n\t\t\treturn Platform.getBundle(bundleName);\n\t\t}\n\t};", "modifier": "private static final", "type": "IPlatform", "declarator": "_platform = new IPlatform() {\n\t\t@Override\n\t\tpublic ILog getLog(Bundle bundle) {\n\t\t\treturn Platform.getLog(bundle);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Bundle getBundle(String bundleName) {\n\t\t\treturn Platform.getBundle(bundleName);\n\t\t}\n\t}", "var_name": "_platform"}, {"original_string": "private PatternLayoutEncoder _encoder = null;", "modifier": "private", "type": "PatternLayoutEncoder", "declarator": "_encoder = null", "var_name": "_encoder"}, {"original_string": "private ILog _eclipseLog = null;", "modifier": "private", "type": "ILog", "declarator": "_eclipseLog = null", "var_name": "_eclipseLog"}, {"original_string": "private String _bundleName = null;", "modifier": "private", "type": "String", "declarator": "_bundleName = null", "var_name": "_bundleName"}], "methods": [{"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "EclipseLogAppender.start()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(ILoggingEvent event)", "modifiers": "@Override protected", "return": "void", "signature": "void append(ILoggingEvent event)", "full_signature": "@Override protected void append(ILoggingEvent event)", "class_method_signature": "EclipseLogAppender.append(ILoggingEvent event)", "testcase": false, "constructor": false}, {"identifier": "getEncoder", "parameters": "()", "modifiers": "public", "return": "PatternLayoutEncoder", "signature": "PatternLayoutEncoder getEncoder()", "full_signature": "public PatternLayoutEncoder getEncoder()", "class_method_signature": "EclipseLogAppender.getEncoder()", "testcase": false, "constructor": false}, {"identifier": "setEncoder", "parameters": "(PatternLayoutEncoder encoder)", "modifiers": "public", "return": "void", "signature": "void setEncoder(PatternLayoutEncoder encoder)", "full_signature": "public void setEncoder(PatternLayoutEncoder encoder)", "class_method_signature": "EclipseLogAppender.setEncoder(PatternLayoutEncoder encoder)", "testcase": false, "constructor": false}, {"identifier": "getBundleName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBundleName()", "full_signature": "public String getBundleName()", "class_method_signature": "EclipseLogAppender.getBundleName()", "testcase": false, "constructor": false}, {"identifier": "setBundleName", "parameters": "(String bundleName)", "modifiers": "public", "return": "void", "signature": "void setBundleName(String bundleName)", "full_signature": "public void setBundleName(String bundleName)", "class_method_signature": "EclipseLogAppender.setBundleName(String bundleName)", "testcase": false, "constructor": false}, {"identifier": "getPlatform", "parameters": "()", "modifiers": "protected", "return": "IPlatform", "signature": "IPlatform getPlatform()", "full_signature": "protected IPlatform getPlatform()", "class_method_signature": "EclipseLogAppender.getPlatform()", "testcase": false, "constructor": false}], "file": "eclipse/src/main/java/ch/qos/logback/contrib/eclipse/EclipseLogAppender.java"}, "focal_method": {"identifier": "getPlatform", "parameters": "()", "modifiers": "protected", "return": "IPlatform", "body": "protected IPlatform getPlatform() {\n    \treturn _platform;\n    }", "signature": "IPlatform getPlatform()", "full_signature": "protected IPlatform getPlatform()", "class_method_signature": "EclipseLogAppender.getPlatform()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7184464, "url": "https://github.com/qos-ch/logback-contrib", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 32, "size": 301, "license": "licensed"}}