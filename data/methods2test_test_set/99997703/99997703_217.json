{"test_class": {"identifier": "TypesTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/utils/TypesTest.java"}, "test_case": {"identifier": "testGetInstancesOfTypeUntil_whenPredicateAlwaysFalse_noResultsAreReturned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInstancesOfTypeUntil_whenPredicateAlwaysFalse_noResultsAreReturned() throws Exception {\n        Assertions.assertEquals(ImmutableList.of(), Types.getInstancesOfTypeUntil(Lists.newArrayList(1, 2, 3), Integer.class, n -> false));\n    }", "signature": "void testGetInstancesOfTypeUntil_whenPredicateAlwaysFalse_noResultsAreReturned()", "full_signature": "@Test public void testGetInstancesOfTypeUntil_whenPredicateAlwaysFalse_noResultsAreReturned()", "class_method_signature": "TypesTest.testGetInstancesOfTypeUntil_whenPredicateAlwaysFalse_noResultsAreReturned()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "of", "getInstancesOfTypeUntil", "newArrayList"]}, "focal_class": {"identifier": "Types", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Types", "parameters": "()", "modifiers": "private", "return": "", "signature": " Types()", "full_signature": "private  Types()", "class_method_signature": "Types.Types()", "testcase": false, "constructor": true}, {"identifier": "fromType", "parameters": "(Object o, Class<T> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") // This is actually checked public static", "return": "Optional<T>", "signature": "Optional<T> fromType(Object o, Class<T> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") // This is actually checked public static Optional<T> fromType(Object o, Class<T> clazz)", "class_method_signature": "Types.fromType(Object o, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "fromTypeOrFail", "parameters": "(Object o, Class<T> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") // This is actually checked public static", "return": "T", "signature": "T fromTypeOrFail(Object o, Class<T> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") // This is actually checked public static T fromTypeOrFail(Object o, Class<T> clazz)", "class_method_signature": "Types.fromTypeOrFail(Object o, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "streamInstancesOfType", "parameters": "(Collection<?> collection, Class<T> clazz)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> streamInstancesOfType(Collection<?> collection, Class<T> clazz)", "full_signature": "public static Stream<T> streamInstancesOfType(Collection<?> collection, Class<T> clazz)", "class_method_signature": "Types.streamInstancesOfType(Collection<?> collection, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "streamInstancesOfType", "parameters": "(Stream<?> stream, Class<T> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") // This is actually checked public static", "return": "Stream<T>", "signature": "Stream<T> streamInstancesOfType(Stream<?> stream, Class<T> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") // This is actually checked public static Stream<T> streamInstancesOfType(Stream<?> stream, Class<T> clazz)", "class_method_signature": "Types.streamInstancesOfType(Stream<?> stream, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getInstancesOfType", "parameters": "(Collection<?> collection, Class<T> clazz)", "modifiers": "public static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> getInstancesOfType(Collection<?> collection, Class<T> clazz)", "full_signature": "public static ImmutableList<T> getInstancesOfType(Collection<?> collection, Class<T> clazz)", "class_method_signature": "Types.getInstancesOfType(Collection<?> collection, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getInstancesOfType", "parameters": "(Stream<?> stream, Class<T> clazz)", "modifiers": "public static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> getInstancesOfType(Stream<?> stream, Class<T> clazz)", "full_signature": "public static ImmutableList<T> getInstancesOfType(Stream<?> stream, Class<T> clazz)", "class_method_signature": "Types.getInstancesOfType(Stream<?> stream, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "streamInstancesOfTypeOrFail", "parameters": "(Collection<?> collection, Class<T> clazz)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> streamInstancesOfTypeOrFail(Collection<?> collection, Class<T> clazz)", "full_signature": "public static Stream<T> streamInstancesOfTypeOrFail(Collection<?> collection, Class<T> clazz)", "class_method_signature": "Types.streamInstancesOfTypeOrFail(Collection<?> collection, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "streamInstancesOfTypeOrFail", "parameters": "(Stream<?> stream, Class<T> clazz)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> streamInstancesOfTypeOrFail(Stream<?> stream, Class<T> clazz)", "full_signature": "public static Stream<T> streamInstancesOfTypeOrFail(Stream<?> stream, Class<T> clazz)", "class_method_signature": "Types.streamInstancesOfTypeOrFail(Stream<?> stream, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getInstancesOfTypeOrFail", "parameters": "(Collection<?> collection, Class<T> clazz)", "modifiers": "public static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> getInstancesOfTypeOrFail(Collection<?> collection, Class<T> clazz)", "full_signature": "public static ImmutableList<T> getInstancesOfTypeOrFail(Collection<?> collection, Class<T> clazz)", "class_method_signature": "Types.getInstancesOfTypeOrFail(Collection<?> collection, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getInstancesOfTypeOrFail", "parameters": "(Stream<?> stream, Class<T> clazz)", "modifiers": "public static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> getInstancesOfTypeOrFail(Stream<?> stream, Class<T> clazz)", "full_signature": "public static ImmutableList<T> getInstancesOfTypeOrFail(Stream<?> stream, Class<T> clazz)", "class_method_signature": "Types.getInstancesOfTypeOrFail(Stream<?> stream, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getInstancesOfTypeUntil", "parameters": "(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "modifiers": "@SuppressWarnings(\"unchecked\") // This is actually checked public static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> getInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "full_signature": "@SuppressWarnings(\"unchecked\") // This is actually checked public static ImmutableList<T> getInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "class_method_signature": "Types.getInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "testcase": false, "constructor": false}, {"identifier": "getInstancesOfTypeUntil", "parameters": "(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "modifiers": "public static", "return": "ImmutableList<T>", "signature": "ImmutableList<T> getInstancesOfTypeUntil(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "full_signature": "public static ImmutableList<T> getInstancesOfTypeUntil(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "class_method_signature": "Types.getInstancesOfTypeUntil(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "testcase": false, "constructor": false}, {"identifier": "streamInstancesOfTypeUntil", "parameters": "(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> streamInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "full_signature": "public static Stream<T> streamInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "class_method_signature": "Types.streamInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "testcase": false, "constructor": false}, {"identifier": "streamInstancesOfTypeUntil", "parameters": "(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> streamInstancesOfTypeUntil(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "full_signature": "public static Stream<T> streamInstancesOfTypeUntil(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "class_method_signature": "Types.streamInstancesOfTypeUntil(Stream<O> stream, Class<T> clazz, Predicate<O> condition)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/utils/Types.java"}, "focal_method": {"identifier": "getInstancesOfTypeUntil", "parameters": "(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "modifiers": "@SuppressWarnings(\"unchecked\") // This is actually checked public static", "return": "ImmutableList<T>", "body": "@SuppressWarnings(\"unchecked\") // This is actually checked\n    public static <O, T extends O> ImmutableList<T> getInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition) {\n        Builder<T> resultBuilder = ImmutableList.builder();\n\n        for (O o : collection) {\n            if (!condition.test(o)) {\n                break;\n            }\n\n            if (clazz.isAssignableFrom(o.getClass())) {\n                resultBuilder.add((T) o);\n            }\n        }\n\n        return resultBuilder.build();\n    }", "signature": "ImmutableList<T> getInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "full_signature": "@SuppressWarnings(\"unchecked\") // This is actually checked public static ImmutableList<T> getInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "class_method_signature": "Types.getInstancesOfTypeUntil(Collection<O> collection, Class<T> clazz, Predicate<O> condition)", "testcase": false, "constructor": false, "invocations": ["builder", "test", "isAssignableFrom", "getClass", "add", "build"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}