{"test_class": {"identifier": "FeldmanEqRangeProofTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final EcCurve curve = CommonConfiguration.CURVE;", "modifier": "public static final", "type": "EcCurve", "declarator": "curve = CommonConfiguration.CURVE", "var_name": "curve"}, {"original_string": "public static final EcPoint g = CommonConfiguration.g;", "modifier": "public static final", "type": "EcPoint", "declarator": "g = CommonConfiguration.g", "var_name": "g"}, {"original_string": "public static final EcPoint h = CommonConfiguration.h;", "modifier": "public static final", "type": "EcPoint", "declarator": "h = CommonConfiguration.h", "var_name": "h"}], "file": "pross-common/src/test/java/com/ibm/pross/common/util/crypto/zkp/feldman/FeldmanEqRangeProofTest.java"}, "test_case": {"identifier": "testAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAll() {\n\n\t\t// Generate encryption key\n\t\tSystem.out.println(\"Generating key...\");\n\t\tfinal PaillierKeyGenerator keyGenerator = new PaillierKeyGenerator(2048);\n\t\tlong s1 = System.nanoTime();\n\t\tfinal PaillierKeyPair keyPair = keyGenerator.generate();\n\t\tlong e1 = System.nanoTime();\n\t\tSystem.out.println(\"Done. Took: \" + ((e1 - s1) / 1_000_000.0) + \" ms\");\n\t\tSystem.out.println();\n\n\t\t// Get public and private keys\n\t\tfinal PaillierPublicKey publicKey = keyPair.getPublicKey();\n\t\tfinal PaillierPrivateKey privateKey = keyPair.getPrivateKey();\n\n\t\tfinal BigInteger share = BigInteger.valueOf(12345);\n\n\t\tSystem.out.println(\"Encrypting share...\");\n\n\t\t// Generate randomness: r\n\t\tfinal BigInteger n = publicKey.getN();\n\n\t\t// Warm up\n\t\tPaillierCipher.encrypt(publicKey, share);\n\n\t\t// Encrypt value\n\t\tlong s2 = System.nanoTime();\n\t\tfinal BigInteger r1 = RandomNumberGenerator.generateRandomCoprimeInRange(n);\n\t\tfinal BigInteger E = PaillierCipher.encrypt(publicKey, share, r1);\n\t\tlong e2 = System.nanoTime();\n\t\tSystem.out.println(\"Done. Took: \" + ((e2 - s2) / 1_000_000.0) + \" ms\");\n\t\tSystem.out.println();\n\n\t\t// Create commitment\n\t\tSystem.out.println(\"Creating Pedersen commitment...\");\n\t\tlong s3 = System.nanoTime();\n\t\tfinal BigInteger r2 = RandomNumberGenerator.generateRandomPositiveInteger(curve.getR());\n\t\tfinal EcPoint S = curve.addPoints(curve.multiply(g, share), curve.multiply(h, r2));\n\t\tlong e3 = System.nanoTime();\n\t\tSystem.out.println(\"Done. Took: \" + ((e3 - s3) / 1_000_000.0) + \" ms\");\n\t\tSystem.out.println();\n\n\t\t// Generating zero knowledge proof\n\t\tSystem.out.println(\"Generating zero knowledge proof...\");\n\t\tlong s4 = System.nanoTime();\n\t\tfinal FeldmanEqRangeProof proof = FeldmanEqRangeProofGenerator.generate(publicKey, share, r1, r2, E, S);\n\t\tlong e4 = System.nanoTime();\n\t\tSystem.out.println(\"Done. Took: \" + ((e4 - s4) / 1_000_000.0) + \" ms\");\n\t\tSystem.out.println();\n\n\t\t// Print proof\n\t\t// System.out.println(\"Sizes: \");\n\t\t// System.out.println(\"E1: \" + proof.getE1().toByteArray().length);\n\t\t// System.out.println(\"S1: \" + proof.getS1().getX().toByteArray().length);\n\t\t// System.out.println(\"Z: \" + proof.getZ().toByteArray().length);\n\t\t// System.out.println(\"Z1: \" + proof.getZ1().toByteArray().length);\n\t\t// System.out.println(\"Z2: \" + proof.getZ2().toByteArray().length);\n\n\t\t// Validate proof\n\t\tSystem.out.println(\"Verifying zero knowledge proof...\");\n\t\tlong s5 = System.nanoTime();\n\t\tfinal boolean valid = FeldmanEqRangeProofVerifier.isValid(proof, E, S, publicKey);\n\t\tlong e5 = System.nanoTime();\n\t\tSystem.out.println(\"Done. Took: \" + ((e5 - s5) / 1_000_000.0) + \" ms\");\n\t\tSystem.out.println(\"Proof is valid: \" + valid);\n\t\tAssert.assertTrue(valid);\n\t\tSystem.out.println();\n\n\t\t// Validate decryption\n\t\tSystem.out.println(\"Decrypting share...\");\n\t\tlong s6 = System.nanoTime();\n\t\tfinal BigInteger decryptedShare = PaillierCipher.decrypt(privateKey, E);\n\t\tlong e6 = System.nanoTime();\n\t\tSystem.out.println(\"Done. Took: \" + ((e6 - s6) / 1_000_000.0) + \" ms\");\n\t\tSystem.out.println(\"Recovered plaintext: \" + share.equals(decryptedShare));\n\t\tSystem.out.println(\"Result: \" + decryptedShare);\n\t\tAssert.assertEquals(share, decryptedShare);\n\t\tSystem.out.println();\n\n\t}", "signature": "void testAll()", "full_signature": "@Test public void testAll()", "class_method_signature": "FeldmanEqRangeProofTest.testAll()", "testcase": true, "constructor": false, "invocations": ["println", "nanoTime", "generate", "nanoTime", "println", "println", "getPublicKey", "getPrivateKey", "valueOf", "println", "getN", "encrypt", "nanoTime", "generateRandomCoprimeInRange", "encrypt", "nanoTime", "println", "println", "println", "nanoTime", "generateRandomPositiveInteger", "getR", "addPoints", "multiply", "multiply", "nanoTime", "println", "println", "println", "nanoTime", "generate", "nanoTime", "println", "println", "println", "nanoTime", "isValid", "nanoTime", "println", "println", "assertTrue", "println", "println", "nanoTime", "decrypt", "nanoTime", "println", "println", "equals", "println", "assertEquals", "println"]}, "focal_class": {"identifier": "FeldmanEqRangeProof", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 968857084310495016L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 968857084310495016L", "var_name": "serialVersionUID"}, {"original_string": "private final BigInteger E1;", "modifier": "private final", "type": "BigInteger", "declarator": "E1", "var_name": "E1"}, {"original_string": "private final EcPoint S1;", "modifier": "private final", "type": "EcPoint", "declarator": "S1", "var_name": "S1"}, {"original_string": "private final BigInteger z;", "modifier": "private final", "type": "BigInteger", "declarator": "z", "var_name": "z"}, {"original_string": "private final BigInteger z1;", "modifier": "private final", "type": "BigInteger", "declarator": "z1", "var_name": "z1"}, {"original_string": "private final BigInteger z2;", "modifier": "private final", "type": "BigInteger", "declarator": "z2", "var_name": "z2"}], "methods": [{"identifier": "FeldmanEqRangeProof", "parameters": "(final BigInteger E1, final EcPoint S1, final BigInteger z, final BigInteger z1,\n\t\t\tfinal BigInteger z2)", "modifiers": "public", "return": "", "signature": " FeldmanEqRangeProof(final BigInteger E1, final EcPoint S1, final BigInteger z, final BigInteger z1,\n\t\t\tfinal BigInteger z2)", "full_signature": "public  FeldmanEqRangeProof(final BigInteger E1, final EcPoint S1, final BigInteger z, final BigInteger z1,\n\t\t\tfinal BigInteger z2)", "class_method_signature": "FeldmanEqRangeProof.FeldmanEqRangeProof(final BigInteger E1, final EcPoint S1, final BigInteger z, final BigInteger z1,\n\t\t\tfinal BigInteger z2)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FeldmanEqRangeProof.toString()", "testcase": false, "constructor": false}, {"identifier": "getE1", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getE1()", "full_signature": "public BigInteger getE1()", "class_method_signature": "FeldmanEqRangeProof.getE1()", "testcase": false, "constructor": false}, {"identifier": "getS1", "parameters": "()", "modifiers": "public", "return": "EcPoint", "signature": "EcPoint getS1()", "full_signature": "public EcPoint getS1()", "class_method_signature": "FeldmanEqRangeProof.getS1()", "testcase": false, "constructor": false}, {"identifier": "getZ", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getZ()", "full_signature": "public BigInteger getZ()", "class_method_signature": "FeldmanEqRangeProof.getZ()", "testcase": false, "constructor": false}, {"identifier": "getZ1", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getZ1()", "full_signature": "public BigInteger getZ1()", "class_method_signature": "FeldmanEqRangeProof.getZ1()", "testcase": false, "constructor": false}, {"identifier": "getZ2", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getZ2()", "full_signature": "public BigInteger getZ2()", "class_method_signature": "FeldmanEqRangeProof.getZ2()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FeldmanEqRangeProof.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "FeldmanEqRangeProof.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "FeldmanEqRangeProof.getSize()", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/crypto/zkp/feldman/FeldmanEqRangeProof.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif (getClass() != obj.getClass())\n\t\t\treturn false;\n\t\tFeldmanEqRangeProof other = (FeldmanEqRangeProof) obj;\n\t\tif (E1 == null) {\n\t\t\tif (other.E1 != null)\n\t\t\t\treturn false;\n\t\t} else if (!E1.equals(other.E1))\n\t\t\treturn false;\n\t\tif (S1 == null) {\n\t\t\tif (other.S1 != null)\n\t\t\t\treturn false;\n\t\t} else if (!S1.equals(other.S1))\n\t\t\treturn false;\n\t\tif (z == null) {\n\t\t\tif (other.z != null)\n\t\t\t\treturn false;\n\t\t} else if (!z.equals(other.z))\n\t\t\treturn false;\n\t\tif (z1 == null) {\n\t\t\tif (other.z1 != null)\n\t\t\t\treturn false;\n\t\t} else if (!z1.equals(other.z1))\n\t\t\treturn false;\n\t\tif (z2 == null) {\n\t\t\tif (other.z2 != null)\n\t\t\t\treturn false;\n\t\t} else if (!z2.equals(other.z2))\n\t\t\treturn false;\n\t\treturn true;\n\t}", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "FeldmanEqRangeProof.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}