{"test_class": {"identifier": "MappingGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "private MappingGenerator generator;", "modifier": "private", "type": "MappingGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderextra/src/test/java/org/openscience/cdk/renderer/generators/MappingGeneratorTest.java"}, "test_case": {"identifier": "testEmptyReaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyReaction() {\n        IReaction emptyReaction = super.builder.newInstance(IReaction.class);\n\n        // nothing should be made\n        IRenderingElement root = generator.generate(emptyReaction, model);\n        List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root);\n        Assert.assertEquals(0, elements.size());\n    }", "signature": "void testEmptyReaction()", "full_signature": "@Test public void testEmptyReaction()", "class_method_signature": "MappingGeneratorTest.testEmptyReaction()", "testcase": true, "constructor": false, "invocations": ["newInstance", "generate", "getAllSimpleElements", "assertEquals", "size"]}, "focal_class": {"identifier": "MappingGenerator", "superclass": "", "interfaces": "implements IGenerator<IReaction>", "fields": [{"original_string": "private IGeneratorParameter<Color> atomAtomMappingLineColor = new AtomAtomMappingLineColor();", "modifier": "private", "type": "IGeneratorParameter<Color>", "declarator": "atomAtomMappingLineColor = new AtomAtomMappingLineColor()", "var_name": "atomAtomMappingLineColor"}, {"original_string": "private IGeneratorParameter<Double> mappingLineWidth = new MappingLineWidth();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "mappingLineWidth = new MappingLineWidth()", "var_name": "mappingLineWidth"}, {"original_string": "private IGeneratorParameter<Boolean> showAtomAtomMapping = new ShowAtomAtomMapping();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "showAtomAtomMapping = new ShowAtomAtomMapping()", "var_name": "showAtomAtomMapping"}], "methods": [{"identifier": "MappingGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " MappingGenerator()", "full_signature": "public  MappingGenerator()", "class_method_signature": "MappingGenerator.MappingGenerator()", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IReaction reaction, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IReaction reaction, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IReaction reaction, RendererModel model)", "class_method_signature": "MappingGenerator.generate(IReaction reaction, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getWidthForMappingLine", "parameters": "(RendererModel model)", "modifiers": "private", "return": "double", "signature": "double getWidthForMappingLine(RendererModel model)", "full_signature": "private double getWidthForMappingLine(RendererModel model)", "class_method_signature": "MappingGenerator.getWidthForMappingLine(RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "MappingGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderextra/src/main/java/org/openscience/cdk/renderer/generators/MappingGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IReaction reaction, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "body": "@Override\n    public IRenderingElement generate(IReaction reaction, RendererModel model) {\n        if (!showAtomAtomMapping.getValue()) return null;\n        ElementGroup elementGroup = new ElementGroup();\n        Color mappingColor = atomAtomMappingLineColor.getValue();\n        for (IMapping mapping : reaction.mappings()) {\n            // XXX assume that there are only 2 endpoints!\n            // XXX assume that the ChemObjects are actually IAtoms...\n            IAtom endPointA = (IAtom) mapping.getChemObject(0);\n            IAtom endPointB = (IAtom) mapping.getChemObject(1);\n            Point2d pointA = endPointA.getPoint2d();\n            Point2d pointB = endPointB.getPoint2d();\n            elementGroup.add(new LineElement(pointA.x, pointA.y, pointB.x, pointB.y, getWidthForMappingLine(model),\n                    mappingColor));\n        }\n        return elementGroup;\n    }", "signature": "IRenderingElement generate(IReaction reaction, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IReaction reaction, RendererModel model)", "class_method_signature": "MappingGenerator.generate(IReaction reaction, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["getValue", "getValue", "mappings", "getChemObject", "getChemObject", "getPoint2d", "getPoint2d", "add", "getWidthForMappingLine"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}