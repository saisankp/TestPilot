{"test_class": {"identifier": "CommandDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PrintStream outBack, errBack;", "modifier": "private", "type": "PrintStream", "declarator": "outBack", "var_name": "outBack"}, {"original_string": "private ByteArrayOutputStream outStream,errStream;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "outStream", "var_name": "outStream"}], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/client/command/CommandDispatcherTest.java"}, "test_case": {"identifier": "list", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void list() throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {\n        CommandDispatcher d = new CommandDispatcher(opts(\"list\"));\n\n        VirtualMachineHandler vmh = createMock(VirtualMachineHandler.class);\n        List<ProcessDescription> ret = new ArrayList<ProcessDescription>();\n        ret.add(new ProcessDescription(\"12\",\"TestProcess\"));\n        expect(vmh.listProcesses()).andReturn(ret);\n        replay(vmh);\n\n        assertEquals(d.dispatchCommand(null, vmh), 0);\n\n        verify(vmh);\n    }", "signature": "void list()", "full_signature": "@Test public void list()", "class_method_signature": "CommandDispatcherTest.list()", "testcase": true, "constructor": false, "invocations": ["opts", "createMock", "add", "andReturn", "expect", "listProcesses", "replay", "assertEquals", "dispatchCommand", "verify"]}, "focal_class": {"identifier": "CommandDispatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OptionsAndArgs options;", "modifier": "private", "type": "OptionsAndArgs", "declarator": "options", "var_name": "options"}, {"original_string": "private static final Map<String,AbstractBaseCommand> COMMANDS = new HashMap<String, AbstractBaseCommand>();", "modifier": "private static final", "type": "Map<String,AbstractBaseCommand>", "declarator": "COMMANDS = new HashMap<String, AbstractBaseCommand>()", "var_name": "COMMANDS"}], "methods": [{"identifier": "CommandDispatcher", "parameters": "(OptionsAndArgs pOptions)", "modifiers": "public", "return": "", "signature": " CommandDispatcher(OptionsAndArgs pOptions)", "full_signature": "public  CommandDispatcher(OptionsAndArgs pOptions)", "class_method_signature": "CommandDispatcher.CommandDispatcher(OptionsAndArgs pOptions)", "testcase": false, "constructor": true}, {"identifier": "dispatchCommand", "parameters": "(Object pVm,VirtualMachineHandler pHandler)", "modifiers": "public", "return": "int", "signature": "int dispatchCommand(Object pVm,VirtualMachineHandler pHandler)", "full_signature": "public int dispatchCommand(Object pVm,VirtualMachineHandler pHandler)", "class_method_signature": "CommandDispatcher.dispatchCommand(Object pVm,VirtualMachineHandler pHandler)", "testcase": false, "constructor": false}, {"identifier": "getAvailableCommands", "parameters": "()", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getAvailableCommands()", "full_signature": "public static Set<String> getAvailableCommands()", "class_method_signature": "CommandDispatcher.getAvailableCommands()", "testcase": false, "constructor": false}, {"identifier": "printHelp", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void printHelp()", "full_signature": "public static void printHelp()", "class_method_signature": "CommandDispatcher.printHelp()", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/client/command/CommandDispatcher.java"}, "focal_method": {"identifier": "dispatchCommand", "parameters": "(Object pVm,VirtualMachineHandler pHandler)", "modifiers": "public", "return": "int", "body": "public int dispatchCommand(Object pVm,VirtualMachineHandler pHandler) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {\n        String commandName = options.getCommand();\n        AbstractBaseCommand command = COMMANDS.get(commandName);\n        if (command == null) {\n            throw new IllegalArgumentException(\"Unknown command '\" + commandName + \"'\");\n        }\n        return command.execute(options,pVm,pHandler);\n    }", "signature": "int dispatchCommand(Object pVm,VirtualMachineHandler pHandler)", "full_signature": "public int dispatchCommand(Object pVm,VirtualMachineHandler pHandler)", "class_method_signature": "CommandDispatcher.dispatchCommand(Object pVm,VirtualMachineHandler pHandler)", "testcase": false, "constructor": false, "invocations": ["getCommand", "get", "execute"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}