{"test_class": {"identifier": "JenkinsPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "JenkinsPlugin jenkinsPlugin;", "modifier": "", "type": "JenkinsPlugin", "declarator": "jenkinsPlugin", "var_name": "jenkinsPlugin"}, {"original_string": "private Map<String, String> properties;", "modifier": "private", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/jenkins/JenkinsPluginTest.java"}, "test_case": {"identifier": "should_thrown_an_exception_when_passing_null_to_is_jenkins_instance", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()\n            throws SoftwareNotFoundException {\n        jenkinsPlugin.getSoftwareId(null, properties);\n    }", "signature": "void should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()", "full_signature": "@Test(expected = NullPointerException.class) public void should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()", "class_method_signature": "JenkinsPluginTest.should_thrown_an_exception_when_passing_null_to_is_jenkins_instance()", "testcase": true, "constructor": false, "invocations": ["getSoftwareId"]}, "focal_class": {"identifier": "JenkinsPlugin", "superclass": "", "interfaces": "implements VisuwallPlugin<JenkinsConnection>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JenkinsPlugin.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JenkinsPlugin.class)", "var_name": "LOG"}], "methods": [{"identifier": "getConnection", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "JenkinsConnection", "signature": "JenkinsConnection getConnection(URL url, Map<String, String> properties)", "full_signature": "@Override public JenkinsConnection getConnection(URL url, Map<String, String> properties)", "class_method_signature": "JenkinsPlugin.getConnection(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "getConnectionClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<JenkinsConnection>", "signature": "Class<JenkinsConnection> getConnectionClass()", "full_signature": "@Override public Class<JenkinsConnection> getConnectionClass()", "class_method_signature": "JenkinsPlugin.getConnectionClass()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "JenkinsPlugin.getName()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getVersion()", "full_signature": "@Override public float getVersion()", "class_method_signature": "JenkinsPlugin.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getSoftwareId", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SoftwareId", "signature": "SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "full_signature": "@Override public SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "class_method_signature": "JenkinsPlugin.getSoftwareId(URL url, Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JenkinsPlugin.toString()", "testcase": false, "constructor": false}, {"identifier": "getPropertiesWithDefaultValue", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getPropertiesWithDefaultValue()", "full_signature": "@Override public Map<String, String> getPropertiesWithDefaultValue()", "class_method_signature": "JenkinsPlugin.getPropertiesWithDefaultValue()", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/jenkins/JenkinsPlugin.java"}, "focal_method": {"identifier": "getSoftwareId", "parameters": "(URL url, Map<String, String> properties)", "modifiers": "@Override public", "return": "SoftwareId", "body": "@Override\n    public SoftwareId getSoftwareId(URL url, Map<String, String> properties) throws SoftwareNotFoundException {\n        Preconditions.checkNotNull(url, \"url is mandatory\");\n        try {\n            url = new URL(url.toString() + \"/api/\");\n            String content = Downloadables.getContent(url);\n            JenkinsVersionPage jenkinsApiPage = new JenkinsVersionPage(content);\n            if (jenkinsApiPage.isJenkinsApiPage()) {\n                return jenkinsApiPage.createSoftwareId();\n            }\n        } catch (IOException e) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Can't get content of \" + url, e);\n            }\n        }\n        throw new SoftwareNotFoundException(\"Url \" + url + \" is not compatible with Jenkins\");\n    }", "signature": "SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "full_signature": "@Override public SoftwareId getSoftwareId(URL url, Map<String, String> properties)", "class_method_signature": "JenkinsPlugin.getSoftwareId(URL url, Map<String, String> properties)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "toString", "getContent", "isJenkinsApiPage", "createSoftwareId", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}