{"test_class": {"identifier": "DateUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/berlin_vegan/bvapp/helpers/DateUtilTest.java"}, "test_case": {"identifier": "testIsPublicHoliday", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsPublicHoliday() throws Exception {\n        final Calendar calendar = GregorianCalendar.getInstance();\n        calendar.set(2015, 0, 1);\n        assertTrue(DateUtil.isPublicHoliday(calendar.getTime()));\n\n        calendar.set(2016, 2, 28); //28 March is \"Ostermontag\"\n        assertTrue(DateUtil.isPublicHoliday(calendar.getTime()));\n\n        calendar.set(2015, 5, 5); // 5 June\n        assertFalse(DateUtil.isPublicHoliday(calendar.getTime()));\n\n    }", "signature": "void testIsPublicHoliday()", "full_signature": "@Test public void testIsPublicHoliday()", "class_method_signature": "DateUtilTest.testIsPublicHoliday()", "testcase": true, "constructor": false, "invocations": ["getInstance", "set", "assertTrue", "isPublicHoliday", "getTime", "set", "assertTrue", "isPublicHoliday", "getTime", "set", "assertFalse", "isPublicHoliday", "getTime"]}, "focal_class": {"identifier": "DateUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final List<String> FIXED_HOLIDAYS = Arrays.asList(\"1.1\", \"1.5\", \"3.10\", \"25.12\", \"26.12\");", "modifier": "public static final", "type": "List<String>", "declarator": "FIXED_HOLIDAYS = Arrays.asList(\"1.1\", \"1.5\", \"3.10\", \"25.12\", \"26.12\")", "var_name": "FIXED_HOLIDAYS"}, {"original_string": "public static final List<String> DYNAMIC_HOLIDAYS = Arrays.asList(\"25.3.2016\", \"28.3.2016\", \"5.5.2016\", \"16.5.2016\", \"14.4.2017\", \"17.4.2017\", \"25.5.2017\", \"05.6.2017\");", "modifier": "public static final", "type": "List<String>", "declarator": "DYNAMIC_HOLIDAYS = Arrays.asList(\"25.3.2016\", \"28.3.2016\", \"5.5.2016\", \"16.5.2016\", \"14.4.2017\", \"17.4.2017\", \"25.5.2017\", \"05.6.2017\")", "var_name": "DYNAMIC_HOLIDAYS"}, {"original_string": "public static final int ONE_MINUTE_IN_MILLISECONDS = 60000;", "modifier": "public static final", "type": "int", "declarator": "ONE_MINUTE_IN_MILLISECONDS = 60000", "var_name": "ONE_MINUTE_IN_MILLISECONDS"}, {"original_string": "public static final int HOURS_PER_DAY = 24;", "modifier": "public static final", "type": "int", "declarator": "HOURS_PER_DAY = 24", "var_name": "HOURS_PER_DAY"}, {"original_string": "public static final int MINUTES_PER_HOUR = 60;", "modifier": "public static final", "type": "int", "declarator": "MINUTES_PER_HOUR = 60", "var_name": "MINUTES_PER_HOUR"}, {"original_string": "public static final int MINUTES_PER_DAY = HOURS_PER_DAY * MINUTES_PER_HOUR;", "modifier": "public static final", "type": "int", "declarator": "MINUTES_PER_DAY = HOURS_PER_DAY * MINUTES_PER_HOUR", "var_name": "MINUTES_PER_DAY"}], "methods": [{"identifier": "getDayOfWeek", "parameters": "(Date date)", "modifiers": "static public", "return": "int", "signature": "int getDayOfWeek(Date date)", "full_signature": "static public int getDayOfWeek(Date date)", "class_method_signature": "DateUtil.getDayOfWeek(Date date)", "testcase": false, "constructor": false}, {"identifier": "isPublicHoliday", "parameters": "(Date date)", "modifiers": "static public", "return": "boolean", "signature": "boolean isPublicHoliday(Date date)", "full_signature": "static public boolean isPublicHoliday(Date date)", "class_method_signature": "DateUtil.isPublicHoliday(Date date)", "testcase": false, "constructor": false}, {"identifier": "inMinutes", "parameters": "(int hours, int minutes)", "modifiers": "public static", "return": "int", "signature": "int inMinutes(int hours, int minutes)", "full_signature": "public static int inMinutes(int hours, int minutes)", "class_method_signature": "DateUtil.inMinutes(int hours, int minutes)", "testcase": false, "constructor": false}, {"identifier": "addMinutesToDate", "parameters": "(Date date, int minutes)", "modifiers": "public static", "return": "Date", "signature": "Date addMinutesToDate(Date date, int minutes)", "full_signature": "public static Date addMinutesToDate(Date date, int minutes)", "class_method_signature": "DateUtil.addMinutesToDate(Date date, int minutes)", "testcase": false, "constructor": false}, {"identifier": "formatTimeFromMinutes", "parameters": "(int minutes)", "modifiers": "static public", "return": "String", "signature": "String formatTimeFromMinutes(int minutes)", "full_signature": "static public String formatTimeFromMinutes(int minutes)", "class_method_signature": "DateUtil.formatTimeFromMinutes(int minutes)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/berlin_vegan/bvapp/helpers/DateUtil.java"}, "focal_method": {"identifier": "isPublicHoliday", "parameters": "(Date date)", "modifiers": "static public", "return": "boolean", "body": "static public boolean isPublicHoliday(Date date) {\n        final Calendar calendar = GregorianCalendar.getInstance();\n        calendar.setTime(date);\n        final int day = calendar.get(Calendar.DAY_OF_MONTH);\n        final int month = calendar.get(Calendar.MONTH) + 1;\n        final int year = calendar.get(Calendar.YEAR);\n\n        String dateStr = String.valueOf(day) + \".\" + String.valueOf(month);\n        String dateStrWithYear = dateStr + \".\" + String.valueOf(year);\n        return FIXED_HOLIDAYS.contains(dateStr) || DYNAMIC_HOLIDAYS.contains(dateStrWithYear);\n    }", "signature": "boolean isPublicHoliday(Date date)", "full_signature": "static public boolean isPublicHoliday(Date date)", "class_method_signature": "DateUtil.isPublicHoliday(Date date)", "testcase": false, "constructor": false, "invocations": ["getInstance", "setTime", "get", "get", "get", "valueOf", "valueOf", "valueOf", "contains", "contains"]}, "repository": {"repo_id": 33683869, "url": "https://github.com/Berlin-Vegan/berlin-vegan-guide", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 13, "size": 885, "license": "licensed"}}