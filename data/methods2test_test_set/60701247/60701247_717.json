{"test_class": {"identifier": "SimpleperfTraceParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleperfTraceParser myParser;", "modifier": "private", "type": "SimpleperfTraceParser", "declarator": "myParser", "var_name": "myParser"}, {"original_string": "private File myTraceFile;", "modifier": "private", "type": "File", "declarator": "myTraceFile", "var_name": "myTraceFile"}], "file": "profilers/testSrc/com/android/tools/profilers/cpu/simpleperf/SimpleperfTraceParserTest.java"}, "test_case": {"identifier": "invalidFileShouldFailDueToMagicNumberMismatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void invalidFileShouldFailDueToMagicNumberMismatch() throws IOException {\n    ByteString traceBytes = traceFileToByteString(\"simpleperf_malformed.trace\");\n    File trace = FileUtil.createTempFile(\"cpu_trace\", \".trace\");\n    try (FileOutputStream out = new FileOutputStream(trace)) {\n      out.write(traceBytes.toByteArray());\n    }\n    myParser = new SimpleperfTraceParser();\n\n    try {\n      myParser.parse(trace, 0);\n      fail(\"IllegalStateException should have been thrown due to missing file.\");\n    } catch (IllegalStateException e) {\n      assertTrue(e.getMessage().contains(\"magic number mismatch\"));\n      // Do nothing. Expected exception.\n    }\n  }", "signature": "void invalidFileShouldFailDueToMagicNumberMismatch()", "full_signature": "@Test public void invalidFileShouldFailDueToMagicNumberMismatch()", "class_method_signature": "SimpleperfTraceParserTest.invalidFileShouldFailDueToMagicNumberMismatch()", "testcase": true, "constructor": false, "invocations": ["traceFileToByteString", "createTempFile", "write", "toByteArray", "parse", "fail", "assertTrue", "contains", "getMessage"]}, "focal_class": {"identifier": "SimpleperfTraceParser", "superclass": "", "interfaces": "implements TraceParser", "fields": [{"original_string": "private static final String MAGIC = \"SIMPLEPERF\";", "modifier": "private static final", "type": "String", "declarator": "MAGIC = \"SIMPLEPERF\"", "var_name": "MAGIC"}, {"original_string": "private static final int INVALID_SYMBOL_ID = -1;", "modifier": "private static final", "type": "int", "declarator": "INVALID_SYMBOL_ID = -1", "var_name": "INVALID_SYMBOL_ID"}, {"original_string": "private static final String DATA_APP_DIR = \"/data/app\";", "modifier": "private static final", "type": "String", "declarator": "DATA_APP_DIR = \"/data/app\"", "var_name": "DATA_APP_DIR"}, {"original_string": "private int myTraceVersion;", "modifier": "private", "type": "int", "declarator": "myTraceVersion", "var_name": "myTraceVersion"}, {"original_string": "private final Map<Integer, SimpleperfReport.File> myFiles;", "modifier": "private final", "type": "Map<Integer, SimpleperfReport.File>", "declarator": "myFiles", "var_name": "myFiles"}, {"original_string": "private final Map<Integer, SimpleperfReport.Thread> myThreads;", "modifier": "private final", "type": "Map<Integer, SimpleperfReport.Thread>", "declarator": "myThreads", "var_name": "myThreads"}, {"original_string": "@VisibleForTesting final List<SimpleperfReport.Sample> mySamples;", "modifier": "@VisibleForTesting final", "type": "List<SimpleperfReport.Sample>", "declarator": "mySamples", "var_name": "mySamples"}, {"original_string": "private final Map<CpuThreadInfo, CaptureNode> myCaptureTrees;", "modifier": "private final", "type": "Map<CpuThreadInfo, CaptureNode>", "declarator": "myCaptureTrees", "var_name": "myCaptureTrees"}, {"original_string": "private long mySampleCount;", "modifier": "private", "type": "long", "declarator": "mySampleCount", "var_name": "mySampleCount"}, {"original_string": "private long myLostSampleCount;", "modifier": "private", "type": "long", "declarator": "myLostSampleCount", "var_name": "myLostSampleCount"}, {"original_string": "private Range myRange;", "modifier": "private", "type": "Range", "declarator": "myRange", "var_name": "myRange"}, {"original_string": "private List<String> myEventTypes;", "modifier": "private", "type": "List<String>", "declarator": "myEventTypes", "var_name": "myEventTypes"}, {"original_string": "private String myAppPackageName;", "modifier": "private", "type": "String", "declarator": "myAppPackageName", "var_name": "myAppPackageName"}, {"original_string": "private String myAppDataFolderPrefix;", "modifier": "private", "type": "String", "declarator": "myAppDataFolderPrefix", "var_name": "myAppDataFolderPrefix"}], "methods": [{"identifier": "SimpleperfTraceParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleperfTraceParser()", "full_signature": "public  SimpleperfTraceParser()", "class_method_signature": "SimpleperfTraceParser.SimpleperfTraceParser()", "testcase": false, "constructor": true}, {"identifier": "fileNameFromPath", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String fileNameFromPath(String path)", "full_signature": "private static String fileNameFromPath(String path)", "class_method_signature": "SimpleperfTraceParser.fileNameFromPath(String path)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(SimpleperfReport.Sample.CallChainEntry c1, SimpleperfReport.Sample.CallChainEntry c2)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(SimpleperfReport.Sample.CallChainEntry c1, SimpleperfReport.Sample.CallChainEntry c2)", "full_signature": "private static boolean equals(SimpleperfReport.Sample.CallChainEntry c1, SimpleperfReport.Sample.CallChainEntry c2)", "class_method_signature": "SimpleperfTraceParser.equals(SimpleperfReport.Sample.CallChainEntry c1, SimpleperfReport.Sample.CallChainEntry c2)", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "()", "modifiers": "private static", "return": "Logger", "signature": "Logger getLog()", "full_signature": "private static Logger getLog()", "class_method_signature": "SimpleperfTraceParser.getLog()", "testcase": false, "constructor": false}, {"identifier": "byteBufferFromFile", "parameters": "(File f, ByteOrder byteOrder)", "modifiers": "private static", "return": "ByteBuffer", "signature": "ByteBuffer byteBufferFromFile(File f, ByteOrder byteOrder)", "full_signature": "private static ByteBuffer byteBufferFromFile(File f, ByteOrder byteOrder)", "class_method_signature": "SimpleperfTraceParser.byteBufferFromFile(File f, ByteOrder byteOrder)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(File trace, long traceId)", "modifiers": "@Override public", "return": "CpuCapture", "signature": "CpuCapture parse(File trace, long traceId)", "full_signature": "@Override public CpuCapture parse(File trace, long traceId)", "class_method_signature": "SimpleperfTraceParser.parse(File trace, long traceId)", "testcase": false, "constructor": false}, {"identifier": "supportsDualClock", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsDualClock()", "full_signature": "@Override public boolean supportsDualClock()", "class_method_signature": "SimpleperfTraceParser.supportsDualClock()", "testcase": false, "constructor": false}, {"identifier": "getCaptureTrees", "parameters": "()", "modifiers": "@Override public", "return": "Map<CpuThreadInfo, CaptureNode>", "signature": "Map<CpuThreadInfo, CaptureNode> getCaptureTrees()", "full_signature": "@Override public Map<CpuThreadInfo, CaptureNode> getCaptureTrees()", "class_method_signature": "SimpleperfTraceParser.getCaptureTrees()", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "()", "modifiers": "@Override public", "return": "Range", "signature": "Range getRange()", "full_signature": "@Override public Range getRange()", "class_method_signature": "SimpleperfTraceParser.getRange()", "testcase": false, "constructor": false}, {"identifier": "getLostSampleCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLostSampleCount()", "full_signature": "public long getLostSampleCount()", "class_method_signature": "SimpleperfTraceParser.getLostSampleCount()", "testcase": false, "constructor": false}, {"identifier": "getSampleCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSampleCount()", "full_signature": "public long getSampleCount()", "class_method_signature": "SimpleperfTraceParser.getSampleCount()", "testcase": false, "constructor": false}, {"identifier": "createCaptureNode", "parameters": "(CaptureNodeModel model, long timestamp)", "modifiers": "@NotNull private static", "return": "CaptureNode", "signature": "CaptureNode createCaptureNode(CaptureNodeModel model, long timestamp)", "full_signature": "@NotNull private static CaptureNode createCaptureNode(CaptureNodeModel model, long timestamp)", "class_method_signature": "SimpleperfTraceParser.createCaptureNode(CaptureNodeModel model, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "parseTraceFile", "parameters": "(File trace)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void parseTraceFile(File trace)", "full_signature": "@VisibleForTesting void parseTraceFile(File trace)", "class_method_signature": "SimpleperfTraceParser.parseTraceFile(File trace)", "testcase": false, "constructor": false}, {"identifier": "parseVersionNumber", "parameters": "(ByteBuffer buffer)", "modifiers": "private", "return": "void", "signature": "void parseVersionNumber(ByteBuffer buffer)", "full_signature": "private void parseVersionNumber(ByteBuffer buffer)", "class_method_signature": "SimpleperfTraceParser.parseVersionNumber(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "verifyMagicNumber", "parameters": "(ByteBuffer buffer)", "modifiers": "private static", "return": "void", "signature": "void verifyMagicNumber(ByteBuffer buffer)", "full_signature": "private static void verifyMagicNumber(ByteBuffer buffer)", "class_method_signature": "SimpleperfTraceParser.verifyMagicNumber(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "parseSampleData", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void parseSampleData()", "full_signature": "private void parseSampleData()", "class_method_signature": "SimpleperfTraceParser.parseSampleData()", "testcase": false, "constructor": false}, {"identifier": "splitSamplesPerThread", "parameters": "()", "modifiers": "private", "return": "Map<Integer, List<SimpleperfReport.Sample>>", "signature": "Map<Integer, List<SimpleperfReport.Sample>> splitSamplesPerThread()", "full_signature": "private Map<Integer, List<SimpleperfReport.Sample>> splitSamplesPerThread()", "class_method_signature": "SimpleperfTraceParser.splitSamplesPerThread()", "testcase": false, "constructor": false}, {"identifier": "setNodeEndTime", "parameters": "(CaptureNode node, long endTimeNs)", "modifiers": "private static", "return": "void", "signature": "void setNodeEndTime(CaptureNode node, long endTimeNs)", "full_signature": "private static void setNodeEndTime(CaptureNode node, long endTimeNs)", "class_method_signature": "SimpleperfTraceParser.setNodeEndTime(CaptureNode node, long endTimeNs)", "testcase": false, "constructor": false}, {"identifier": "setNodeStartTime", "parameters": "(CaptureNode node, long startTimeNs)", "modifiers": "private static", "return": "void", "signature": "void setNodeStartTime(CaptureNode node, long startTimeNs)", "full_signature": "private static void setNodeStartTime(CaptureNode node, long startTimeNs)", "class_method_signature": "SimpleperfTraceParser.setNodeStartTime(CaptureNode node, long startTimeNs)", "testcase": false, "constructor": false}, {"identifier": "parseThreadSamples", "parameters": "(int threadId, List<SimpleperfReport.Sample> threadSamples)", "modifiers": "private", "return": "void", "signature": "void parseThreadSamples(int threadId, List<SimpleperfReport.Sample> threadSamples)", "full_signature": "private void parseThreadSamples(int threadId, List<SimpleperfReport.Sample> threadSamples)", "class_method_signature": "SimpleperfTraceParser.parseThreadSamples(int threadId, List<SimpleperfReport.Sample> threadSamples)", "testcase": false, "constructor": false}, {"identifier": "updateAncestorsEndTime", "parameters": "(long endTimestamp, CaptureNode lastVisited)", "modifiers": "private static", "return": "void", "signature": "void updateAncestorsEndTime(long endTimestamp, CaptureNode lastVisited)", "full_signature": "private static void updateAncestorsEndTime(long endTimestamp, CaptureNode lastVisited)", "class_method_signature": "SimpleperfTraceParser.updateAncestorsEndTime(long endTimestamp, CaptureNode lastVisited)", "testcase": false, "constructor": false}, {"identifier": "parseCallChain", "parameters": "(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                     List<SimpleperfReport.Sample.CallChainEntry> previousCallChain,\n                                     long sampleTimestamp, CaptureNode lastVisitedNode)", "modifiers": "private", "return": "CaptureNode", "signature": "CaptureNode parseCallChain(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                     List<SimpleperfReport.Sample.CallChainEntry> previousCallChain,\n                                     long sampleTimestamp, CaptureNode lastVisitedNode)", "full_signature": "private CaptureNode parseCallChain(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                     List<SimpleperfReport.Sample.CallChainEntry> previousCallChain,\n                                     long sampleTimestamp, CaptureNode lastVisitedNode)", "class_method_signature": "SimpleperfTraceParser.parseCallChain(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                     List<SimpleperfReport.Sample.CallChainEntry> previousCallChain,\n                                     long sampleTimestamp, CaptureNode lastVisitedNode)", "testcase": false, "constructor": false}, {"identifier": "findDivergenceAndUpdateEndTime", "parameters": "(int divergenceCount, long endTimestamp, CaptureNode node)", "modifiers": "private static", "return": "CaptureNode", "signature": "CaptureNode findDivergenceAndUpdateEndTime(int divergenceCount, long endTimestamp, CaptureNode node)", "full_signature": "private static CaptureNode findDivergenceAndUpdateEndTime(int divergenceCount, long endTimestamp, CaptureNode node)", "class_method_signature": "SimpleperfTraceParser.findDivergenceAndUpdateEndTime(int divergenceCount, long endTimestamp, CaptureNode node)", "testcase": false, "constructor": false}, {"identifier": "addNewNodes", "parameters": "(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                  CaptureNode node, int startIndex, long startTimestamp)", "modifiers": "private", "return": "CaptureNode", "signature": "CaptureNode addNewNodes(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                  CaptureNode node, int startIndex, long startTimestamp)", "full_signature": "private CaptureNode addNewNodes(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                  CaptureNode node, int startIndex, long startTimestamp)", "class_method_signature": "SimpleperfTraceParser.addNewNodes(List<SimpleperfReport.Sample.CallChainEntry> callChain,\n                                  CaptureNode node, int startIndex, long startTimestamp)", "testcase": false, "constructor": false}, {"identifier": "methodModelFromCallchainEntry", "parameters": "(SimpleperfReport.Sample.CallChainEntry callChainEntry, long parentVAddress)", "modifiers": "private", "return": "CaptureNodeModel", "signature": "CaptureNodeModel methodModelFromCallchainEntry(SimpleperfReport.Sample.CallChainEntry callChainEntry, long parentVAddress)", "full_signature": "private CaptureNodeModel methodModelFromCallchainEntry(SimpleperfReport.Sample.CallChainEntry callChainEntry, long parentVAddress)", "class_method_signature": "SimpleperfTraceParser.methodModelFromCallchainEntry(SimpleperfReport.Sample.CallChainEntry callChainEntry, long parentVAddress)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/simpleperf/SimpleperfTraceParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(File trace, long traceId)", "modifiers": "@Override public", "return": "CpuCapture", "body": "@Override\n  public CpuCapture parse(File trace, long traceId) throws IOException {\n    parseTraceFile(trace);\n    parseSampleData();\n    return new CpuCapture(this, traceId, Cpu.CpuTraceType.SIMPLEPERF);\n  }", "signature": "CpuCapture parse(File trace, long traceId)", "full_signature": "@Override public CpuCapture parse(File trace, long traceId)", "class_method_signature": "SimpleperfTraceParser.parse(File trace, long traceId)", "testcase": false, "constructor": false, "invocations": ["parseTraceFile", "parseSampleData"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}