{"test_class": {"identifier": "DBSCANClustererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static double[][] DATA = new double[][]{\n    //                           eps     | 1 | 1\n    //                           minSize | 1 | 0\n    //                           ------------------\n    new double[]{1., 1., 1.}, // cluster | 1 | 1\n    new double[]{1., 2., 1.}, // N=noise | 1 | 1\n    new double[]{1., 1., 2.}, //         | 1 | 1\n    new double[]{0., 1., 1.}, //         | 1 | 1\n    new double[]{4., 4., 2.}, //         | 2 | 2\n    new double[]{4., 3., 3.}, //         | 2 | 3\n    new double[]{4., 4., 4.}, //         | 2 | 4\n    new double[]{4., 5., 4.}, //         | N | 4\n    new double[]{10., 10., 10.} //       | N | 5\n  };", "modifier": "static", "type": "double[][]", "declarator": "DATA = new double[][]{\n    //                           eps     | 1 | 1\n    //                           minSize | 1 | 0\n    //                           ------------------\n    new double[]{1., 1., 1.}, // cluster | 1 | 1\n    new double[]{1., 2., 1.}, // N=noise | 1 | 1\n    new double[]{1., 1., 2.}, //         | 1 | 1\n    new double[]{0., 1., 1.}, //         | 1 | 1\n    new double[]{4., 4., 2.}, //         | 2 | 2\n    new double[]{4., 3., 3.}, //         | 2 | 3\n    new double[]{4., 4., 4.}, //         | 2 | 4\n    new double[]{4., 5., 4.}, //         | N | 4\n    new double[]{10., 10., 10.} //       | N | 5\n  }", "var_name": "DATA"}, {"original_string": "static double[][] DATA_2 = new double[][]{\n    new double[]{0., 0., 0.},\n    new double[]{10., 10., 10.},\n    new double[]{0., 0., 10.},\n    new double[]{10., 10., 0.},\n  };", "modifier": "static", "type": "double[][]", "declarator": "DATA_2 = new double[][]{\n    new double[]{0., 0., 0.},\n    new double[]{10., 10., 10.},\n    new double[]{0., 0., 10.},\n    new double[]{10., 10., 0.},\n  }", "var_name": "DATA_2"}], "file": "designer/testSrc/com/android/tools/idea/uibuilder/mockup/colorextractor/DBSCANClustererTest.java"}, "test_case": {"identifier": "testCluster", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCluster() throws Exception {\n    DBSCANClusterer clusterer = new DBSCANClusterer(1, 1);\n    List<List<double[]>> cluster = clusterer.cluster(DATA);\n    assertNotNull(cluster);\n    assertEquals(2, cluster.size());\n\n    DBSCANClusterer clusterer2 = new DBSCANClusterer(1, 0);\n    List<List<double[]>> cluster2 = clusterer2.cluster(DATA);\n    assertNotNull(cluster2);\n    assertEquals(5, cluster2.size());\n\n    DBSCANClusterer clusterer3 = new DBSCANClusterer(1, 0);\n    List<List<double[]>> cluster3 = clusterer3.cluster(DATA_2);\n    assertNotNull(cluster3);\n    assertEquals(4, cluster3.size());\n  }", "signature": "void testCluster()", "full_signature": "@Test public void testCluster()", "class_method_signature": "DBSCANClustererTest.testCluster()", "testcase": true, "constructor": false, "invocations": ["cluster", "assertNotNull", "assertEquals", "size", "cluster", "assertNotNull", "assertEquals", "size", "cluster", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "DBSCANClusterer", "superclass": "", "interfaces": "implements Clusterer", "fields": [{"original_string": "private int myVisited = 0;", "modifier": "private", "type": "int", "declarator": "myVisited = 0", "var_name": "myVisited"}, {"original_string": "private float myEps;", "modifier": "private", "type": "float", "declarator": "myEps", "var_name": "myEps"}, {"original_string": "private int myMinPts;", "modifier": "private", "type": "int", "declarator": "myMinPts", "var_name": "myMinPts"}, {"original_string": "private List<List<double[]>> myClusters = new ArrayList<>();", "modifier": "private", "type": "List<List<double[]>>", "declarator": "myClusters = new ArrayList<>()", "var_name": "myClusters"}, {"original_string": "private PointType[] myPointTypes;", "modifier": "private", "type": "PointType[]", "declarator": "myPointTypes", "var_name": "myPointTypes"}, {"original_string": "ProgressListener listener;", "modifier": "", "type": "ProgressListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "DBSCANClusterer", "parameters": "(float eps, int minPts)", "modifiers": "public", "return": "", "signature": " DBSCANClusterer(float eps, int minPts)", "full_signature": "public  DBSCANClusterer(float eps, int minPts)", "class_method_signature": "DBSCANClusterer.DBSCANClusterer(float eps, int minPts)", "testcase": false, "constructor": true}, {"identifier": "DBSCANClusterer", "parameters": "(float eps, int minPts, ProgressListener listener)", "modifiers": "public", "return": "", "signature": " DBSCANClusterer(float eps, int minPts, ProgressListener listener)", "full_signature": "public  DBSCANClusterer(float eps, int minPts, ProgressListener listener)", "class_method_signature": "DBSCANClusterer.DBSCANClusterer(float eps, int minPts, ProgressListener listener)", "testcase": false, "constructor": true}, {"identifier": "cluster", "parameters": "(double[][] input)", "modifiers": "@Override public", "return": "List<List<double[]>>", "signature": "List<List<double[]>> cluster(double[][] input)", "full_signature": "@Override public List<List<double[]>> cluster(double[][] input)", "class_method_signature": "DBSCANClusterer.cluster(double[][] input)", "testcase": false, "constructor": false}, {"identifier": "expandCluster", "parameters": "(double[][] input, int pointIndex, List<double[]> cluster)", "modifiers": "private", "return": "boolean", "signature": "boolean expandCluster(double[][] input, int pointIndex, List<double[]> cluster)", "full_signature": "private boolean expandCluster(double[][] input, int pointIndex, List<double[]> cluster)", "class_method_signature": "DBSCANClusterer.expandCluster(double[][] input, int pointIndex, List<double[]> cluster)", "testcase": false, "constructor": false}, {"identifier": "notifyProgress", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyProgress()", "full_signature": "private void notifyProgress()", "class_method_signature": "DBSCANClusterer.notifyProgress()", "testcase": false, "constructor": false}, {"identifier": "regionQuery", "parameters": "(double[][] input, int pointIndex)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> regionQuery(double[][] input, int pointIndex)", "full_signature": "private List<Integer> regionQuery(double[][] input, int pointIndex)", "class_method_signature": "DBSCANClusterer.regionQuery(double[][] input, int pointIndex)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(double[] neighbor, double[] point)", "modifiers": "private static", "return": "double", "signature": "double distance(double[] neighbor, double[] point)", "full_signature": "private static double distance(double[] neighbor, double[] point)", "class_method_signature": "DBSCANClusterer.distance(double[] neighbor, double[] point)", "testcase": false, "constructor": false}], "file": "designer/src/com/android/tools/idea/uibuilder/mockup/colorextractor/DBSCANClusterer.java"}, "focal_method": {"identifier": "cluster", "parameters": "(double[][] input)", "modifiers": "@Override public", "return": "List<List<double[]>>", "body": "@Override\n  public List<List<double[]>> cluster(double[][] input) {\n    List<double[]> cluster = new ArrayList<>();\n    myPointTypes = new PointType[input.length];\n\n    for (int i = 0; i < input.length; i++) {\n      if (myPointTypes[i] == null) { // If point is unclassified\n        if (expandCluster(input, i, cluster)) {\n          if (!cluster.isEmpty()) {\n            myClusters.add(cluster);\n            myVisited += cluster.size();\n            notifyProgress();\n          }\n          cluster = new ArrayList<>();\n        }\n      }\n    }\n    return myClusters;\n  }", "signature": "List<List<double[]>> cluster(double[][] input)", "full_signature": "@Override public List<List<double[]>> cluster(double[][] input)", "class_method_signature": "DBSCANClusterer.cluster(double[][] input)", "testcase": false, "constructor": false, "invocations": ["expandCluster", "isEmpty", "add", "size", "notifyProgress"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}