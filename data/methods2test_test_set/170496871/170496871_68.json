{"test_class": {"identifier": "ExchangeLatchManagerTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final String LATCH_NAME = \"test\";", "modifier": "private static final", "type": "String", "declarator": "LATCH_NAME = \"test\"", "var_name": "LATCH_NAME"}, {"original_string": "private static final String STALE_ACK_LOG_MSG = \"Latch for this acknowledge is completed or never have existed\";", "modifier": "private static final", "type": "String", "declarator": "STALE_ACK_LOG_MSG = \"Latch for this acknowledge is completed or never have existed\"", "var_name": "STALE_ACK_LOG_MSG"}, {"original_string": "public static final Pattern ERROR_MSG = Pattern.compile(\"An error occurred processing the message.*\"\n        + LatchAckMessage.class.getSimpleName());", "modifier": "public static final", "type": "Pattern", "declarator": "ERROR_MSG = Pattern.compile(\"An error occurred processing the message.*\"\n        + LatchAckMessage.class.getSimpleName())", "var_name": "ERROR_MSG"}, {"original_string": "public ListeningTestLogger gridLogger;", "modifier": "public", "type": "ListeningTestLogger", "declarator": "gridLogger", "var_name": "gridLogger"}], "file": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManagerTest.java"}, "test_case": {"identifier": "shouldCorrectlyExecuteLatchWhenCrdCreatedLast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCorrectlyExecuteLatchWhenCrdCreatedLast() throws Exception {\n        IgniteEx crd = startGrid(0);\n        IgniteEx ignite1 = startGrid(1);\n        startGrid(2);\n\n        //Version which is greater than current.\n        AffinityTopologyVersion nextVer = new AffinityTopologyVersion(crd.cluster().topologyVersion() + 1, 0);\n\n        //Send ack message from client latch before server latch would be created.\n        ignite1.context().io().sendToGridTopic(\n            crd.localNode(),\n            GridTopic.TOPIC_EXCHANGE,\n            new LatchAckMessage(\n                LATCH_NAME, nextVer, false\n            ), GridIoPolicy.SYSTEM_POOL\n        );\n\n        //Current version increase up to nextVer after this event.\n        stopGrid(2);\n\n        //This latch expected ack only from this node and from ignite1 which already sent it.\n        Latch latchCrdOther = latchManager(0).getOrCreate(LATCH_NAME, nextVer);\n\n        latchCrdOther.countDown();\n        latchCrdOther.await(1, TimeUnit.SECONDS);\n    }", "signature": "void shouldCorrectlyExecuteLatchWhenCrdCreatedLast()", "full_signature": "@Test public void shouldCorrectlyExecuteLatchWhenCrdCreatedLast()", "class_method_signature": "ExchangeLatchManagerTest.shouldCorrectlyExecuteLatchWhenCrdCreatedLast()", "testcase": true, "constructor": false, "invocations": ["startGrid", "startGrid", "startGrid", "topologyVersion", "cluster", "sendToGridTopic", "io", "context", "localNode", "stopGrid", "getOrCreate", "latchManager", "countDown", "await"]}, "focal_class": {"identifier": "ExchangeLatchManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final IgniteProductVersion VERSION_SINCE = IgniteProductVersion.fromString(\"2.5.0\");", "modifier": "private static final", "type": "IgniteProductVersion", "declarator": "VERSION_SINCE = IgniteProductVersion.fromString(\"2.5.0\")", "var_name": "VERSION_SINCE"}, {"original_string": "public static final IgniteProductVersion PROTOCOL_V2_VERSION_SINCE = IgniteProductVersion.fromString(\"2.5.3\");", "modifier": "public static final", "type": "IgniteProductVersion", "declarator": "PROTOCOL_V2_VERSION_SINCE = IgniteProductVersion.fromString(\"2.5.3\")", "var_name": "PROTOCOL_V2_VERSION_SINCE"}, {"original_string": "private final IgniteLogger log;", "modifier": "private final", "type": "IgniteLogger", "declarator": "log", "var_name": "log"}, {"original_string": "private final GridKernalContext ctx;", "modifier": "private final", "type": "GridKernalContext", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "@GridToStringExclude\n    private final GridDiscoveryManager discovery;", "modifier": "@GridToStringExclude\n    private final", "type": "GridDiscoveryManager", "declarator": "discovery", "var_name": "discovery"}, {"original_string": "@GridToStringExclude\n    private final GridIoManager io;", "modifier": "@GridToStringExclude\n    private final", "type": "GridIoManager", "declarator": "io", "var_name": "io"}, {"original_string": "@GridToStringExclude\n    private volatile ClusterNode crd;", "modifier": "@GridToStringExclude\n    private volatile", "type": "ClusterNode", "declarator": "crd", "var_name": "crd"}, {"original_string": "private final ConcurrentMap<CompletableLatchUid, Set<UUID>> pendingAcks = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<CompletableLatchUid, Set<UUID>>", "declarator": "pendingAcks = new ConcurrentHashMap<>()", "var_name": "pendingAcks"}, {"original_string": "@GridToStringInclude\n    private final ConcurrentMap<CompletableLatchUid, ServerLatch> serverLatches = new ConcurrentHashMap<>();", "modifier": "@GridToStringInclude\n    private final", "type": "ConcurrentMap<CompletableLatchUid, ServerLatch>", "declarator": "serverLatches = new ConcurrentHashMap<>()", "var_name": "serverLatches"}, {"original_string": "@GridToStringInclude\n    private final ConcurrentMap<CompletableLatchUid, ClientLatch> clientLatches = new ConcurrentHashMap<>();", "modifier": "@GridToStringInclude\n    private final", "type": "ConcurrentMap<CompletableLatchUid, ClientLatch>", "declarator": "clientLatches = new ConcurrentHashMap<>()", "var_name": "clientLatches"}, {"original_string": "@GridToStringExclude\n    private final ConcurrentMap<AffinityTopologyVersion, ClusterNode> joinedNodes = new ConcurrentHashMap<>();", "modifier": "@GridToStringExclude\n    private final", "type": "ConcurrentMap<AffinityTopologyVersion, ClusterNode>", "declarator": "joinedNodes = new ConcurrentHashMap<>()", "var_name": "joinedNodes"}, {"original_string": "private final ReentrantLock lock = new ReentrantLock();", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}], "methods": [{"identifier": "ExchangeLatchManager", "parameters": "(GridKernalContext ctx)", "modifiers": "public", "return": "", "signature": " ExchangeLatchManager(GridKernalContext ctx)", "full_signature": "public  ExchangeLatchManager(GridKernalContext ctx)", "class_method_signature": "ExchangeLatchManager.ExchangeLatchManager(GridKernalContext ctx)", "testcase": false, "constructor": true}, {"identifier": "createServerLatch", "parameters": "(CompletableLatchUid latchUid, Collection<ClusterNode> participants)", "modifiers": "private", "return": "Latch", "signature": "Latch createServerLatch(CompletableLatchUid latchUid, Collection<ClusterNode> participants)", "full_signature": "private Latch createServerLatch(CompletableLatchUid latchUid, Collection<ClusterNode> participants)", "class_method_signature": "ExchangeLatchManager.createServerLatch(CompletableLatchUid latchUid, Collection<ClusterNode> participants)", "testcase": false, "constructor": false}, {"identifier": "createClientLatch", "parameters": "(CompletableLatchUid latchUid, ClusterNode coordinator, Collection<ClusterNode> participants)", "modifiers": "private", "return": "Latch", "signature": "Latch createClientLatch(CompletableLatchUid latchUid, ClusterNode coordinator, Collection<ClusterNode> participants)", "full_signature": "private Latch createClientLatch(CompletableLatchUid latchUid, ClusterNode coordinator, Collection<ClusterNode> participants)", "class_method_signature": "ExchangeLatchManager.createClientLatch(CompletableLatchUid latchUid, ClusterNode coordinator, Collection<ClusterNode> participants)", "testcase": false, "constructor": false}, {"identifier": "getOrCreate", "parameters": "(String id, AffinityTopologyVersion topVer)", "modifiers": "public", "return": "Latch", "signature": "Latch getOrCreate(String id, AffinityTopologyVersion topVer)", "full_signature": "public Latch getOrCreate(String id, AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.getOrCreate(String id, AffinityTopologyVersion topVer)", "testcase": false, "constructor": false}, {"identifier": "dropLatch", "parameters": "(String id, AffinityTopologyVersion topVer)", "modifiers": "public", "return": "void", "signature": "void dropLatch(String id, AffinityTopologyVersion topVer)", "full_signature": "public void dropLatch(String id, AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.dropLatch(String id, AffinityTopologyVersion topVer)", "testcase": false, "constructor": false}, {"identifier": "aliveNodesForTopologyVer", "parameters": "(AffinityTopologyVersion topVer)", "modifiers": "private", "return": "Collection<ClusterNode>", "signature": "Collection<ClusterNode> aliveNodesForTopologyVer(AffinityTopologyVersion topVer)", "full_signature": "private Collection<ClusterNode> aliveNodesForTopologyVer(AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.aliveNodesForTopologyVer(AffinityTopologyVersion topVer)", "testcase": false, "constructor": false}, {"identifier": "getLatchParticipants", "parameters": "(AffinityTopologyVersion topVer)", "modifiers": "private", "return": "Collection<ClusterNode>", "signature": "Collection<ClusterNode> getLatchParticipants(AffinityTopologyVersion topVer)", "full_signature": "private Collection<ClusterNode> getLatchParticipants(AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.getLatchParticipants(AffinityTopologyVersion topVer)", "testcase": false, "constructor": false}, {"identifier": "excludeJoinedNodes", "parameters": "(List<ClusterNode> participantNodes, AffinityTopologyVersion topVer)", "modifiers": "private", "return": "List<ClusterNode>", "signature": "List<ClusterNode> excludeJoinedNodes(List<ClusterNode> participantNodes, AffinityTopologyVersion topVer)", "full_signature": "private List<ClusterNode> excludeJoinedNodes(List<ClusterNode> participantNodes, AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.excludeJoinedNodes(List<ClusterNode> participantNodes, AffinityTopologyVersion topVer)", "testcase": false, "constructor": false}, {"identifier": "getLatchCoordinator", "parameters": "(AffinityTopologyVersion topVer)", "modifiers": "@Nullable private", "return": "ClusterNode", "signature": "ClusterNode getLatchCoordinator(AffinityTopologyVersion topVer)", "full_signature": "@Nullable private ClusterNode getLatchCoordinator(AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.getLatchCoordinator(AffinityTopologyVersion topVer)", "testcase": false, "constructor": false}, {"identifier": "canSkipJoiningNodes", "parameters": "(AffinityTopologyVersion topVer)", "modifiers": "public", "return": "boolean", "signature": "boolean canSkipJoiningNodes(AffinityTopologyVersion topVer)", "full_signature": "public boolean canSkipJoiningNodes(AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.canSkipJoiningNodes(AffinityTopologyVersion topVer)", "testcase": false, "constructor": false}, {"identifier": "processAck", "parameters": "(UUID from, LatchAckMessage message)", "modifiers": "private", "return": "void", "signature": "void processAck(UUID from, LatchAckMessage message)", "full_signature": "private void processAck(UUID from, LatchAckMessage message)", "class_method_signature": "ExchangeLatchManager.processAck(UUID from, LatchAckMessage message)", "testcase": false, "constructor": false}, {"identifier": "becomeNewCoordinator", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void becomeNewCoordinator()", "full_signature": "private void becomeNewCoordinator()", "class_method_signature": "ExchangeLatchManager.becomeNewCoordinator()", "testcase": false, "constructor": false}, {"identifier": "processNodeLeft", "parameters": "(AffinityTopologyVersion topVer, ClusterNode left)", "modifiers": "private", "return": "void", "signature": "void processNodeLeft(AffinityTopologyVersion topVer, ClusterNode left)", "full_signature": "private void processNodeLeft(AffinityTopologyVersion topVer, ClusterNode left)", "class_method_signature": "ExchangeLatchManager.processNodeLeft(AffinityTopologyVersion topVer, ClusterNode left)", "testcase": false, "constructor": false}, {"identifier": "sendAck", "parameters": "(UUID nodeId, CompletableLatchUid latchUid, boolean finalAck)", "modifiers": "private", "return": "void", "signature": "void sendAck(UUID nodeId, CompletableLatchUid latchUid, boolean finalAck)", "full_signature": "private void sendAck(UUID nodeId, CompletableLatchUid latchUid, boolean finalAck)", "class_method_signature": "ExchangeLatchManager.sendAck(UUID nodeId, CompletableLatchUid latchUid, boolean finalAck)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ExchangeLatchManager.toString()", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/latch/ExchangeLatchManager.java"}, "focal_method": {"identifier": "getOrCreate", "parameters": "(String id, AffinityTopologyVersion topVer)", "modifiers": "public", "return": "Latch", "body": "public Latch getOrCreate(String id, AffinityTopologyVersion topVer) {\n        lock.lock();\n\n        try {\n            final CompletableLatchUid latchUid = new CompletableLatchUid(id, topVer);\n\n            CompletableLatch latch = clientLatches.containsKey(latchUid) ?\n                clientLatches.get(latchUid) : serverLatches.get(latchUid);\n\n            if (latch != null)\n                return latch;\n\n            ClusterNode coordinator = getLatchCoordinator(topVer);\n\n            if (coordinator == null)\n                return null;\n\n            Collection<ClusterNode> participants = getLatchParticipants(topVer);\n\n            return coordinator.isLocal()\n                ? createServerLatch(latchUid, participants)\n                : createClientLatch(latchUid, coordinator, participants);\n        }\n        finally {\n            lock.unlock();\n        }\n    }", "signature": "Latch getOrCreate(String id, AffinityTopologyVersion topVer)", "full_signature": "public Latch getOrCreate(String id, AffinityTopologyVersion topVer)", "class_method_signature": "ExchangeLatchManager.getOrCreate(String id, AffinityTopologyVersion topVer)", "testcase": false, "constructor": false, "invocations": ["lock", "containsKey", "get", "get", "getLatchCoordinator", "getLatchParticipants", "isLocal", "createServerLatch", "createClientLatch", "unlock"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}