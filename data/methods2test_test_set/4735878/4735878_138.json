{"test_class": {"identifier": "BundleListRendererTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/orbisgis-omanager/src/test/java/org/orbisgis/omanager/ui/BundleListRendererTest.java"}, "test_case": {"identifier": "parseIconTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseIconTest() {\n\n        String res = BundleListRenderer.getBundleIconPath(\"icon.png;size=32\");\n        Assert.assertEquals(\"icon.png\",res);\n\n        String res2 = BundleListRenderer.getBundleIconPath(\"icon.png;size=16, icon2.png;size=64\");\n        Assert.assertEquals(\"icon2.png\",res2);\n\n        String res3 = BundleListRenderer.getBundleIconPath(\"icon.png;size=32, icon2.png;size=64\");\n        Assert.assertEquals(\"icon.png\",res3);\n    }", "signature": "void parseIconTest()", "full_signature": "@Test public void parseIconTest()", "class_method_signature": "BundleListRendererTest.parseIconTest()", "testcase": true, "constructor": false, "invocations": ["getBundleIconPath", "assertEquals", "getBundleIconPath", "assertEquals", "getBundleIconPath", "assertEquals"]}, "focal_class": {"identifier": "BundleListRenderer", "superclass": "", "interfaces": "implements ListCellRenderer<BundleItem>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BundleListRenderer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BundleListRenderer.class)", "var_name": "LOGGER"}, {"original_string": "private ListCellRenderer<? super BundleItem> lookAndFeelRenderer;", "modifier": "private", "type": "ListCellRenderer<? super BundleItem>", "declarator": "lookAndFeelRenderer", "var_name": "lookAndFeelRenderer"}, {"original_string": "private static Dimension bundleIconDimension = new Dimension(32,32);", "modifier": "private static", "type": "Dimension", "declarator": "bundleIconDimension = new Dimension(32,32)", "var_name": "bundleIconDimension"}, {"original_string": "private static final ImageIcon defaultIcon = new ImageIcon(BundleListRenderer.class.getResource(\"defaultIcon.png\"));", "modifier": "private static final", "type": "ImageIcon", "declarator": "defaultIcon = new ImageIcon(BundleListRenderer.class.getResource(\"defaultIcon.png\"))", "var_name": "defaultIcon"}, {"original_string": "private static final ImageIcon activeLayer = new ImageIcon(BundleListRenderer.class.getResource(\"active_layer.png\"));", "modifier": "private static final", "type": "ImageIcon", "declarator": "activeLayer = new ImageIcon(BundleListRenderer.class.getResource(\"active_layer.png\"))", "var_name": "activeLayer"}, {"original_string": "private static final ImageIcon obrIcon = mergeIcons(defaultIcon.getImage(),new ImageIcon(BundleListRenderer.class.getResource(\"obr.png\")).getImage());", "modifier": "private static final", "type": "ImageIcon", "declarator": "obrIcon = mergeIcons(defaultIcon.getImage(),new ImageIcon(BundleListRenderer.class.getResource(\"obr.png\")).getImage())", "var_name": "obrIcon"}, {"original_string": "private static final String ICON_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "ICON_SEPARATOR = \",\"", "var_name": "ICON_SEPARATOR"}, {"original_string": "private static final String ICON_SIZE_PROP = \"size=\";", "modifier": "private static final", "type": "String", "declarator": "ICON_SIZE_PROP = \"size=\"", "var_name": "ICON_SIZE_PROP"}, {"original_string": "private static final String ICON_HEADER = \"Bundle-Icon\";", "modifier": "private static final", "type": "String", "declarator": "ICON_HEADER = \"Bundle-Icon\"", "var_name": "ICON_HEADER"}], "methods": [{"identifier": "BundleListRenderer", "parameters": "(JList list)", "modifiers": "public", "return": "", "signature": " BundleListRenderer(JList list)", "full_signature": "public  BundleListRenderer(JList list)", "class_method_signature": "BundleListRenderer.BundleListRenderer(JList list)", "testcase": false, "constructor": true}, {"identifier": "mergeIcons", "parameters": "(Image bottom,Image top)", "modifiers": "private static", "return": "ImageIcon", "signature": "ImageIcon mergeIcons(Image bottom,Image top)", "full_signature": "private static ImageIcon mergeIcons(Image bottom,Image top)", "class_method_signature": "BundleListRenderer.mergeIcons(Image bottom,Image top)", "testcase": false, "constructor": false}, {"identifier": "pathToImage", "parameters": "(Bundle bundle, String path)", "modifiers": "private", "return": "ImageIcon", "signature": "ImageIcon pathToImage(Bundle bundle, String path)", "full_signature": "private ImageIcon pathToImage(Bundle bundle, String path)", "class_method_signature": "BundleListRenderer.pathToImage(Bundle bundle, String path)", "testcase": false, "constructor": false}, {"identifier": "getBundleIconPath", "parameters": "(String icons)", "modifiers": "public static", "return": "String", "signature": "String getBundleIconPath(String icons)", "full_signature": "public static String getBundleIconPath(String icons)", "class_method_signature": "BundleListRenderer.getBundleIconPath(String icons)", "testcase": false, "constructor": false}, {"identifier": "getBundleIcon", "parameters": "(Bundle bundle)", "modifiers": "private", "return": "ImageIcon", "signature": "ImageIcon getBundleIcon(Bundle bundle)", "full_signature": "private ImageIcon getBundleIcon(Bundle bundle)", "class_method_signature": "BundleListRenderer.getBundleIcon(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "getListCellRendererComponent", "parameters": "(JList<? extends BundleItem> jList, BundleItem bi, int i, boolean b, boolean b2)", "modifiers": "@Override public", "return": "Component", "signature": "Component getListCellRendererComponent(JList<? extends BundleItem> jList, BundleItem bi, int i, boolean b, boolean b2)", "full_signature": "@Override public Component getListCellRendererComponent(JList<? extends BundleItem> jList, BundleItem bi, int i, boolean b, boolean b2)", "class_method_signature": "BundleListRenderer.getListCellRendererComponent(JList<? extends BundleItem> jList, BundleItem bi, int i, boolean b, boolean b2)", "testcase": false, "constructor": false}, {"identifier": "updateLFRenderer", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateLFRenderer()", "full_signature": "public void updateLFRenderer()", "class_method_signature": "BundleListRenderer.updateLFRenderer()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(JList list)", "modifiers": "private", "return": "void", "signature": "void initialize(JList list)", "full_signature": "private void initialize(JList list)", "class_method_signature": "BundleListRenderer.initialize(JList list)", "testcase": false, "constructor": false}], "file": "bundles/orbisgis-omanager/src/main/java/org/orbisgis/omanager/ui/BundleListRenderer.java"}, "focal_method": {"identifier": "getBundleIconPath", "parameters": "(String icons)", "modifiers": "public static", "return": "String", "body": "public static String getBundleIconPath(String icons) {\n        if(icons!=null) {\n            List<String> iconList = new ArrayList<>();\n            if(icons.contains(ICON_SEPARATOR)) {\n                for(String icon_descr : icons.split(ICON_SEPARATOR)) {\n                    iconList.add(icon_descr);\n                }\n            } else {\n                iconList.add(icons);\n            }\n            String best_path = \"\";\n            int best_width = 0;\n            for(String icon_descr : iconList) {\n                // Take the best icon size\n                int size_pos = icon_descr.indexOf(ICON_SIZE_PROP);\n                int size_val = 0;\n                String iconPath = new String(icon_descr);\n                if(size_pos>1) {\n                    size_val = Integer.valueOf(icon_descr.substring(size_pos+ICON_SIZE_PROP.length()\n                            ,icon_descr.length()).trim());\n                    iconPath = icon_descr.substring(0,size_pos-1).trim();\n                }\n                if(best_width==0 || size_val == bundleIconDimension.width ||\n                        (size_val > best_width && best_width != bundleIconDimension.width)) {\n                    best_path = iconPath;\n                    best_width = size_val;\n                }\n            }\n            if(!best_path.isEmpty()) {\n                return best_path;\n            }\n        }\n        return \"\";\n    }", "signature": "String getBundleIconPath(String icons)", "full_signature": "public static String getBundleIconPath(String icons)", "class_method_signature": "BundleListRenderer.getBundleIconPath(String icons)", "testcase": false, "constructor": false, "invocations": ["contains", "split", "add", "add", "indexOf", "valueOf", "trim", "substring", "length", "length", "trim", "substring", "isEmpty"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}