{"test_class": {"identifier": "JodatimeUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/common/src/test/java/org/onetwo/common/utils/JodatimeUtilsTest.java"}, "test_case": {"identifier": "testInterval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testInterval(){\n\t\tDateTime start = JodatimeUtils.parse(\"2016-11-24\");\n\t\tDateTime end = JodatimeUtils.parse(\"2016-12-24\");\n\t\tInterval interval = new Interval(start, end);\n\t\tboolean res = interval.contains(start.plusSeconds(1));\n\t\tAssertions.assertThat(res).isTrue();\n\t\tres = interval.contains(start.minusSeconds(1));\n\t\tAssertions.assertThat(res).isFalse();\n\t}", "signature": "void testInterval()", "full_signature": "@Test public void testInterval()", "class_method_signature": "JodatimeUtilsTest.testInterval()", "testcase": true, "constructor": false, "invocations": ["parse", "parse", "contains", "plusSeconds", "isTrue", "assertThat", "contains", "minusSeconds", "isFalse", "assertThat"]}, "focal_class": {"identifier": "JodatimeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String[] DATE_PATTERNS = new String[]{\"yyyy-MM-dd\"};", "modifier": "public static", "type": "String[]", "declarator": "DATE_PATTERNS = new String[]{\"yyyy-MM-dd\"}", "var_name": "DATE_PATTERNS"}, {"original_string": "public static String PATTERN_DATE_TIME = \"yyyy-MM-dd HH:mm:ss\";", "modifier": "public static", "type": "String", "declarator": "PATTERN_DATE_TIME = \"yyyy-MM-dd HH:mm:ss\"", "var_name": "PATTERN_DATE_TIME"}], "methods": [{"identifier": "atStartOfDate", "parameters": "(Date date)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime atStartOfDate(Date date)", "full_signature": "public static DateTime atStartOfDate(Date date)", "class_method_signature": "JodatimeUtils.atStartOfDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "atStartOfDate", "parameters": "(Date date, int plusDays)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime atStartOfDate(Date date, int plusDays)", "full_signature": "public static DateTime atStartOfDate(Date date, int plusDays)", "class_method_signature": "JodatimeUtils.atStartOfDate(Date date, int plusDays)", "testcase": false, "constructor": false}, {"identifier": "atEndOfDate", "parameters": "(Date date)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime atEndOfDate(Date date)", "full_signature": "public static DateTime atEndOfDate(Date date)", "class_method_signature": "JodatimeUtils.atEndOfDate(Date date)", "testcase": false, "constructor": false}, {"identifier": "atEndOfDate", "parameters": "(Date date, int plusDays)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime atEndOfDate(Date date, int plusDays)", "full_signature": "public static DateTime atEndOfDate(Date date, int plusDays)", "class_method_signature": "JodatimeUtils.atEndOfDate(Date date, int plusDays)", "testcase": false, "constructor": false}, {"identifier": "atStartOfMonth", "parameters": "(Date date)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime atStartOfMonth(Date date)", "full_signature": "public static DateTime atStartOfMonth(Date date)", "class_method_signature": "JodatimeUtils.atStartOfMonth(Date date)", "testcase": false, "constructor": false}, {"identifier": "atEndOfMonth", "parameters": "(Date date)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime atEndOfMonth(Date date)", "full_signature": "public static DateTime atEndOfMonth(Date date)", "class_method_signature": "JodatimeUtils.atEndOfMonth(Date date)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Date date, String pattern)", "modifiers": "public static", "return": "String", "signature": "String format(Date date, String pattern)", "full_signature": "public static String format(Date date, String pattern)", "class_method_signature": "JodatimeUtils.format(Date date, String pattern)", "testcase": false, "constructor": false}, {"identifier": "formatDateTime", "parameters": "(Date date)", "modifiers": "public static", "return": "String", "signature": "String formatDateTime(Date date)", "full_signature": "public static String formatDateTime(Date date)", "class_method_signature": "JodatimeUtils.formatDateTime(Date date)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String source, String pattern)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parse(String source, String pattern)", "full_signature": "public static DateTime parse(String source, String pattern)", "class_method_signature": "JodatimeUtils.parse(String source, String pattern)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String source)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime parse(String source)", "full_signature": "public static DateTime parse(String source)", "class_method_signature": "JodatimeUtils.parse(String source)", "testcase": false, "constructor": false}, {"identifier": "createInterval", "parameters": "(String start, String end)", "modifiers": "public static", "return": "Interval", "signature": "Interval createInterval(String start, String end)", "full_signature": "public static Interval createInterval(String start, String end)", "class_method_signature": "JodatimeUtils.createInterval(String start, String end)", "testcase": false, "constructor": false}, {"identifier": "createInterval", "parameters": "(Date start, Date end)", "modifiers": "public static", "return": "Interval", "signature": "Interval createInterval(Date start, Date end)", "full_signature": "public static Interval createInterval(Date start, Date end)", "class_method_signature": "JodatimeUtils.createInterval(Date start, Date end)", "testcase": false, "constructor": false}, {"identifier": "isTimeBetweenInterval", "parameters": "(Date theTime, Date start, Date end)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeBetweenInterval(Date theTime, Date start, Date end)", "full_signature": "public static boolean isTimeBetweenInterval(Date theTime, Date start, Date end)", "class_method_signature": "JodatimeUtils.isTimeBetweenInterval(Date theTime, Date start, Date end)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(Date start, Date end)", "modifiers": "public static", "return": "Period", "signature": "Period between(Date start, Date end)", "full_signature": "public static Period between(Date start, Date end)", "class_method_signature": "JodatimeUtils.between(Date start, Date end)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(LocalDateTime start, LocalDateTime end)", "modifiers": "public static", "return": "Period", "signature": "Period between(LocalDateTime start, LocalDateTime end)", "full_signature": "public static Period between(LocalDateTime start, LocalDateTime end)", "class_method_signature": "JodatimeUtils.between(LocalDateTime start, LocalDateTime end)", "testcase": false, "constructor": false}, {"identifier": "JodatimeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " JodatimeUtils()", "full_signature": "private  JodatimeUtils()", "class_method_signature": "JodatimeUtils.JodatimeUtils()", "testcase": false, "constructor": true}], "file": "core/modules/common/src/main/java/org/onetwo/common/utils/JodatimeUtils.java"}, "focal_method": {"identifier": "parse", "parameters": "(String source, String pattern)", "modifiers": "public static", "return": "DateTime", "body": "public static DateTime parse(String source, String pattern){\n\t\tAssert.hasText(source);\n\t\treturn DateTimeFormat.forPattern(pattern).parseDateTime(source);\n\t}", "signature": "DateTime parse(String source, String pattern)", "full_signature": "public static DateTime parse(String source, String pattern)", "class_method_signature": "JodatimeUtils.parse(String source, String pattern)", "testcase": false, "constructor": false, "invocations": ["hasText", "parseDateTime", "forPattern"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}