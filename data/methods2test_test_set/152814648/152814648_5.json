{"test_class": {"identifier": "DynamicLineParserTest", "superclass": "extends AbstractParserTest", "interfaces": "", "fields": [{"original_string": "private static final String FILE_NAME = \"file-with-line-numbers.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"file-with-line-numbers.txt\"", "var_name": "FILE_NAME"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/groovy/DynamicLineParserTest.java"}, "test_case": {"identifier": "shouldScanAllLinesAndAssignLineNumberAndFileName", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldScanAllLinesAndAssignLineNumberAndFileName() {\n        DynamicLineParser parser = new DynamicLineParser(\"^(.*)$\", \n                \"return builder.setFileName(fileName).setLineStart(lineNumber).setMessage(matcher.group(1)).buildOptional()\");\n        Report report = parser.parse(createReaderFactory(FILE_NAME));\n        \n        assertThat(report).hasSize(3);\n        for (int i = 0; i < 3; i++) {\n            assertThat(report.get(i)).hasBaseName(FILE_NAME).hasLineStart(i + 1).hasMessage(String.valueOf(i + 1));\n        }\n    }", "signature": "void shouldScanAllLinesAndAssignLineNumberAndFileName()", "full_signature": "@Test void shouldScanAllLinesAndAssignLineNumberAndFileName()", "class_method_signature": "DynamicLineParserTest.shouldScanAllLinesAndAssignLineNumberAndFileName()", "testcase": true, "constructor": false, "invocations": ["parse", "createReaderFactory", "hasSize", "assertThat", "hasMessage", "hasLineStart", "hasBaseName", "assertThat", "get", "valueOf"]}, "focal_class": {"identifier": "DynamicLineParser", "superclass": "extends LookaheadParser", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -4450779127190928924L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4450779127190928924L", "var_name": "serialVersionUID"}, {"original_string": "private final GroovyExpressionMatcher expressionMatcher;", "modifier": "private final", "type": "GroovyExpressionMatcher", "declarator": "expressionMatcher", "var_name": "expressionMatcher"}, {"original_string": "private String fileName = StringUtils.EMPTY;", "modifier": "private", "type": "String", "declarator": "fileName = StringUtils.EMPTY", "var_name": "fileName"}], "methods": [{"identifier": "DynamicLineParser", "parameters": "(final String regexp, final String script)", "modifiers": "", "return": "", "signature": " DynamicLineParser(final String regexp, final String script)", "full_signature": "  DynamicLineParser(final String regexp, final String script)", "class_method_signature": "DynamicLineParser.DynamicLineParser(final String regexp, final String script)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(final ReaderFactory reader)", "modifiers": "@Override public", "return": "Report", "signature": "Report parse(final ReaderFactory reader)", "full_signature": "@Override public Report parse(final ReaderFactory reader)", "class_method_signature": "DynamicLineParser.parse(final ReaderFactory reader)", "testcase": false, "constructor": false}, {"identifier": "createIssue", "parameters": "(final Matcher matcher, final LookaheadStream lookahead,\n            final IssueBuilder builder)", "modifiers": "@Override protected", "return": "Optional<Issue>", "signature": "Optional<Issue> createIssue(final Matcher matcher, final LookaheadStream lookahead,\n            final IssueBuilder builder)", "full_signature": "@Override protected Optional<Issue> createIssue(final Matcher matcher, final LookaheadStream lookahead,\n            final IssueBuilder builder)", "class_method_signature": "DynamicLineParser.createIssue(final Matcher matcher, final LookaheadStream lookahead,\n            final IssueBuilder builder)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/groovy/DynamicLineParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final ReaderFactory reader)", "modifiers": "@Override public", "return": "Report", "body": "@Override\n    public Report parse(final ReaderFactory reader) throws ParsingException {\n        fileName = reader.getFileName();\n        \n        return super.parse(reader);\n    }", "signature": "Report parse(final ReaderFactory reader)", "full_signature": "@Override public Report parse(final ReaderFactory reader)", "class_method_signature": "DynamicLineParser.parse(final ReaderFactory reader)", "testcase": false, "constructor": false, "invocations": ["getFileName", "parse"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}