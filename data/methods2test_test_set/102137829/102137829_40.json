{"test_class": {"identifier": "BinariesTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/de/slackspace/openkeepass/domain/BinariesTest.java"}, "test_case": {"identifier": "shouldUnmarshallXmlToObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUnmarshallXmlToObject() throws Exception {\n        int id = 5;\n        Binary binary = new BinaryBuilder()\n                .id(id)\n                .isCompressed(false)\n                .data(new byte[10])\n                .build();\n\n        Binaries binaries = new BinariesBuilder().addBinary(binary).build();\n\n        String xml = \"<Binaries><Binary ID='5' Compressed='False'>AAAAAAAAAAAAAA==</Binary></Binaries>\";\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(xml.getBytes());\n        Binaries binariesUnmarshall =\n                new SimpleXmlParser().fromXml(inputStream, new NullProtectionStrategy(), Binaries.class);\n\n        Assert.assertEquals(binaries.getBinaries().size(), binariesUnmarshall.getBinaries().size());\n        Assert.assertArrayEquals(binaries.getBinaries().get(0).getData(), binariesUnmarshall.getBinaries().get(0).getData());\n        Assert.assertEquals(binaries.getBinaries().get(0).getId(), binariesUnmarshall.getBinaries().get(0).getId());\n        Assert.assertEquals(binaries.getBinaries().get(0).isCompressed(), binariesUnmarshall.getBinaries().get(0).isCompressed());\n    }", "signature": "void shouldUnmarshallXmlToObject()", "full_signature": "@Test public void shouldUnmarshallXmlToObject()", "class_method_signature": "BinariesTest.shouldUnmarshallXmlToObject()", "testcase": true, "constructor": false, "invocations": ["build", "data", "isCompressed", "id", "build", "addBinary", "getBytes", "fromXml", "assertEquals", "size", "getBinaries", "size", "getBinaries", "assertArrayEquals", "getData", "get", "getBinaries", "getData", "get", "getBinaries", "assertEquals", "getId", "get", "getBinaries", "getId", "get", "getBinaries", "assertEquals", "isCompressed", "get", "getBinaries", "isCompressed", "get", "getBinaries"]}, "focal_class": {"identifier": "Binaries", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ElementList(name = \"Binary\", inline = true, required = false)\n    private List<Binary> binaryList = new ArrayList<Binary>();", "modifier": "@ElementList(name = \"Binary\", inline = true, required = false)\n    private", "type": "List<Binary>", "declarator": "binaryList = new ArrayList<Binary>()", "var_name": "binaryList"}], "methods": [{"identifier": "Binaries", "parameters": "()", "modifiers": "", "return": "", "signature": " Binaries()", "full_signature": "  Binaries()", "class_method_signature": "Binaries.Binaries()", "testcase": false, "constructor": true}, {"identifier": "Binaries", "parameters": "(BinariesContract binariesContract)", "modifiers": "public", "return": "", "signature": " Binaries(BinariesContract binariesContract)", "full_signature": "public  Binaries(BinariesContract binariesContract)", "class_method_signature": "Binaries.Binaries(BinariesContract binariesContract)", "testcase": false, "constructor": true}, {"identifier": "getBinaries", "parameters": "()", "modifiers": "public", "return": "List<Binary>", "signature": "List<Binary> getBinaries()", "full_signature": "public List<Binary> getBinaries()", "class_method_signature": "Binaries.getBinaries()", "testcase": false, "constructor": false}, {"identifier": "getBinaryById", "parameters": "(int id)", "modifiers": "public", "return": "Binary", "signature": "Binary getBinaryById(int id)", "full_signature": "public Binary getBinaryById(int id)", "class_method_signature": "Binaries.getBinaryById(int id)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "Binaries.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public final boolean equals(Object obj)", "class_method_signature": "Binaries.equals(Object obj)", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/domain/Binaries.java"}, "focal_method": {"identifier": "getBinaries", "parameters": "()", "modifiers": "public", "return": "List<Binary>", "body": "public List<Binary> getBinaries() {\n        return binaryList;\n    }", "signature": "List<Binary> getBinaries()", "full_signature": "public List<Binary> getBinaries()", "class_method_signature": "Binaries.getBinaries()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}