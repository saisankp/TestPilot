{"test_class": {"identifier": "AsyncWorkItemHandlerTest", "superclass": "extends AbstractExecutorBaseTest", "interfaces": "", "fields": [{"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "private RuntimeManager manager;", "modifier": "private", "type": "RuntimeManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private EntityManagerFactory emf = null;", "modifier": "private", "type": "EntityManagerFactory", "declarator": "emf = null", "var_name": "emf"}, {"original_string": "private EntityManagerFactory emfErrors = null;", "modifier": "private", "type": "EntityManagerFactory", "declarator": "emfErrors = null", "var_name": "emfErrors"}], "file": "jbpm-services/jbpm-executor/src/test/java/org/jbpm/executor/impl/wih/AsyncWorkItemHandlerTest.java"}, "test_case": {"identifier": "testRunProcessWithAsyncHandlerRecordExecutionErrorProcessAutoAck", "parameters": "()", "modifiers": "@Test(timeout=20000) public", "return": "void", "body": "@Test(timeout=20000)\n    public void testRunProcessWithAsyncHandlerRecordExecutionErrorProcessAutoAck() throws Exception {\n        CountDownAsyncJobListener countDownListener = new CountDownAsyncJobListener(1);\n        ((ExecutorServiceImpl) executorService).addAsyncJobListener(countDownListener);\n        ((ExecutorServiceImpl) executorService).setRetries(0);\n        \n        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get().newDefaultBuilder()\n                .userGroupCallback(userGroupCallback)\n                .addAsset(ResourceFactory.newClassPathResource(\"BPMN2-UserTaskWithRollback.bpmn2\"), ResourceType.BPMN2)\n                .get();\n        \n        manager = RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(environment); \n        assertNotNull(manager);\n        \n        RuntimeEngine runtime = manager.getRuntimeEngine(EmptyContext.get());\n        KieSession ksession = runtime.getKieSession();\n        assertNotNull(ksession);       \n        \n        ProcessInstance processInstance = ksession.startProcess(\"UserTaskWithRollback\");\n        assertEquals(ProcessInstance.STATE_ACTIVE, processInstance.getState());\n        \n        processInstance = runtime.getKieSession().getProcessInstance(processInstance.getId());\n        assertNotNull(processInstance);\n        \n        manager.disposeRuntimeEngine(runtime);\n        runtime = manager.getRuntimeEngine(EmptyContext.get());\n        \n        TaskService taskService = runtime.getTaskService();\n        List<TaskSummary> tasks = taskService.getTasksAssignedAsPotentialOwner(\"john\", \"en-UK\");\n        assertEquals(1, tasks.size());\n        \n        long taskId = tasks.get(0).getId();\n        \n        taskService.start(taskId, \"john\");\n        \n        Map<String, Object> results = new HashMap<>();\n        results.put(\"output1\", \"rollback\");\n        \n        try {\n            taskService.complete(taskId, \"john\", results);\n            fail(\"Complete task should fail due to broken script\");\n        } catch (Throwable e) {\n            // expected\n        }\n        \n        manager.disposeRuntimeEngine(runtime);\n        \n        \n        ExecutionErrorManager errorManager = ((AbstractRuntimeManager) manager).getExecutionErrorManager();\n        assertNotNull(\"ErrorManager is null\", errorManager);\n        ExecutionErrorStorage errorStorage = errorManager.getStorage();\n        assertNotNull(\"ErrorStorage is null\", errorStorage);\n        \n        List<ExecutionError> errors = errorStorage.list(0, 10);\n        assertEquals(1, errors.size());\n        \n        ExecutionError error = errors.get(0);\n        assertNotNull(error);\n        assertEquals(\"Process\", error.getType());        \n        assertEquals(\"UserTaskWithRollback\", error.getProcessId());\n        assertEquals(\"Script Task 1\", error.getActivityName());\n        assertEquals(manager.getIdentifier(), error.getDeploymentId());\n        assertNotNull(error.getError());\n        assertNotNull(error.getErrorMessage());\n        assertNotNull(error.getActivityId());\n        assertNotNull(error.getProcessInstanceId());\n        \n        assertNull(error.getAcknowledgedAt());\n        assertNull(error.getAcknowledgedBy());\n        assertFalse(error.isAcknowledged());\n        \n        countDownListener.reset(1);\n        // first run should not ack the job as it's in error state\n        CommandContext ctx = new CommandContext();\n        ctx.setData(\"SingleRun\", \"true\");\n        ctx.setData(\"EmfName\", \"org.jbpm.persistence.complete\");\n        executorService.scheduleRequest(ProcessAutoAckErrorCommand.class.getName(), ctx);\n                \n        countDownListener.waitTillCompleted();\n        \n        errors = errorStorage.list(0, 10);\n        assertEquals(1, errors.size());\n        \n        error = errors.get(0);\n        assertNotNull(error);        \n        assertFalse(error.isAcknowledged());\n        \n        runtime = manager.getRuntimeEngine(EmptyContext.get());\n        tasks = taskService.getTasksAssignedAsPotentialOwner(\"john\", \"en-UK\");\n        assertEquals(1, tasks.size());\n        \n        taskId = tasks.get(0).getId();\n        \n        results = new HashMap<>();\n        results.put(\"output1\", \"ok\");\n        \n        taskService.complete(taskId, \"john\", results);\n        manager.disposeRuntimeEngine(runtime);\n        countDownListener.reset(1);\n        // since task was completed auto ack should work\n        executorService.scheduleRequest(ProcessAutoAckErrorCommand.class.getName(), ctx);\n                \n        countDownListener.waitTillCompleted();\n        \n        errors = errorStorage.list(0, 10);\n        assertEquals(1, errors.size());\n        \n        error = errors.get(0);\n        assertNotNull(error);        \n        assertTrue(error.isAcknowledged());\n        \n    }", "signature": "void testRunProcessWithAsyncHandlerRecordExecutionErrorProcessAutoAck()", "full_signature": "@Test(timeout=20000) public void testRunProcessWithAsyncHandlerRecordExecutionErrorProcessAutoAck()", "class_method_signature": "AsyncWorkItemHandlerTest.testRunProcessWithAsyncHandlerRecordExecutionErrorProcessAutoAck()", "testcase": true, "constructor": false, "invocations": ["addAsyncJobListener", "setRetries", "get", "addAsset", "userGroupCallback", "newDefaultBuilder", "get", "newClassPathResource", "newSingletonRuntimeManager", "get", "assertNotNull", "getRuntimeEngine", "get", "getKieSession", "assertNotNull", "startProcess", "assertEquals", "getState", "getProcessInstance", "getKieSession", "getId", "assertNotNull", "disposeRuntimeEngine", "getRuntimeEngine", "get", "getTaskService", "getTasksAssignedAsPotentialOwner", "assertEquals", "size", "getId", "get", "start", "put", "complete", "fail", "disposeRuntimeEngine", "getExecutionErrorManager", "assertNotNull", "getStorage", "assertNotNull", "list", "assertEquals", "size", "get", "assertNotNull", "assertEquals", "getType", "assertEquals", "getProcessId", "assertEquals", "getActivityName", "assertEquals", "getIdentifier", "getDeploymentId", "assertNotNull", "getError", "assertNotNull", "getErrorMessage", "assertNotNull", "getActivityId", "assertNotNull", "getProcessInstanceId", "assertNull", "getAcknowledgedAt", "assertNull", "getAcknowledgedBy", "assertFalse", "isAcknowledged", "reset", "setData", "setData", "scheduleRequest", "getName", "waitTillCompleted", "list", "assertEquals", "size", "get", "assertNotNull", "assertFalse", "isAcknowledged", "getRuntimeEngine", "get", "getTasksAssignedAsPotentialOwner", "assertEquals", "size", "getId", "get", "put", "complete", "disposeRuntimeEngine", "reset", "scheduleRequest", "getName", "waitTillCompleted", "list", "assertEquals", "size", "get", "assertNotNull", "assertTrue", "isAcknowledged"]}, "focal_class": {"identifier": "AsyncWorkItemHandler", "superclass": "", "interfaces": "implements WorkItemHandler, Cacheable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AsyncWorkItemHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AsyncWorkItemHandler.class)", "var_name": "logger"}, {"original_string": "private ExecutorService executorService;", "modifier": "private", "type": "ExecutorService", "declarator": "executorService", "var_name": "executorService"}, {"original_string": "private String commandClass;", "modifier": "private", "type": "String", "declarator": "commandClass", "var_name": "commandClass"}], "methods": [{"identifier": "AsyncWorkItemHandler", "parameters": "(ExecutorService executorService)", "modifiers": "public", "return": "", "signature": " AsyncWorkItemHandler(ExecutorService executorService)", "full_signature": "public  AsyncWorkItemHandler(ExecutorService executorService)", "class_method_signature": "AsyncWorkItemHandler.AsyncWorkItemHandler(ExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "AsyncWorkItemHandler", "parameters": "(ExecutorService executorService, String commandClass)", "modifiers": "public", "return": "", "signature": " AsyncWorkItemHandler(ExecutorService executorService, String commandClass)", "full_signature": "public  AsyncWorkItemHandler(ExecutorService executorService, String commandClass)", "class_method_signature": "AsyncWorkItemHandler.AsyncWorkItemHandler(ExecutorService executorService, String commandClass)", "testcase": false, "constructor": true}, {"identifier": "AsyncWorkItemHandler", "parameters": "(Object executorService, String commandClass)", "modifiers": "public", "return": "", "signature": " AsyncWorkItemHandler(Object executorService, String commandClass)", "full_signature": "public  AsyncWorkItemHandler(Object executorService, String commandClass)", "class_method_signature": "AsyncWorkItemHandler.AsyncWorkItemHandler(Object executorService, String commandClass)", "testcase": false, "constructor": true}, {"identifier": "executeWorkItem", "parameters": "(WorkItem workItem, WorkItemManager manager)", "modifiers": "@Override public", "return": "void", "signature": "void executeWorkItem(WorkItem workItem, WorkItemManager manager)", "full_signature": "@Override public void executeWorkItem(WorkItem workItem, WorkItemManager manager)", "class_method_signature": "AsyncWorkItemHandler.executeWorkItem(WorkItem workItem, WorkItemManager manager)", "testcase": false, "constructor": false}, {"identifier": "abortWorkItem", "parameters": "(WorkItem workItem, WorkItemManager manager)", "modifiers": "@Override public", "return": "void", "signature": "void abortWorkItem(WorkItem workItem, WorkItemManager manager)", "full_signature": "@Override public void abortWorkItem(WorkItem workItem, WorkItemManager manager)", "class_method_signature": "AsyncWorkItemHandler.abortWorkItem(WorkItem workItem, WorkItemManager manager)", "testcase": false, "constructor": false}, {"identifier": "buildBusinessKey", "parameters": "(WorkItem workItem)", "modifiers": "protected", "return": "String", "signature": "String buildBusinessKey(WorkItem workItem)", "full_signature": "protected String buildBusinessKey(WorkItem workItem)", "class_method_signature": "AsyncWorkItemHandler.buildBusinessKey(WorkItem workItem)", "testcase": false, "constructor": false}, {"identifier": "getProcessInstanceId", "parameters": "(WorkItem workItem)", "modifiers": "protected", "return": "long", "signature": "long getProcessInstanceId(WorkItem workItem)", "full_signature": "protected long getProcessInstanceId(WorkItem workItem)", "class_method_signature": "AsyncWorkItemHandler.getProcessInstanceId(WorkItem workItem)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AsyncWorkItemHandler.close()", "testcase": false, "constructor": false}], "file": "jbpm-services/jbpm-executor/src/main/java/org/jbpm/executor/impl/wih/AsyncWorkItemHandler.java"}, "focal_method": {"identifier": "getProcessInstanceId", "parameters": "(WorkItem workItem)", "modifiers": "protected", "return": "long", "body": "protected long getProcessInstanceId(WorkItem workItem) {\n        return ((WorkItemImpl) workItem).getProcessInstanceId();\n    }", "signature": "long getProcessInstanceId(WorkItem workItem)", "full_signature": "protected long getProcessInstanceId(WorkItem workItem)", "class_method_signature": "AsyncWorkItemHandler.getProcessInstanceId(WorkItem workItem)", "testcase": false, "constructor": false, "invocations": ["getProcessInstanceId"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}