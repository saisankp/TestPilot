{"test_class": {"identifier": "MemtableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int THREAD_POOL_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "THREAD_POOL_SIZE = 16", "var_name": "THREAD_POOL_SIZE"}, {"original_string": "private static final int NUMBER_OF_VALUES = 512;", "modifier": "private static final", "type": "int", "declarator": "NUMBER_OF_VALUES = 512", "var_name": "NUMBER_OF_VALUES"}], "file": "logstore/src/test/java/com/puresoltechnologies/ductiledb/logstore/index/MemtableTest.java"}, "test_case": {"identifier": "testSimplePerformance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimplePerformance() {\n\tMemtable memtable = new Memtable();\n\tFile file = new File(\"file\");\n\tStopWatch stopWatch = new StopWatch();\n\tstopWatch.start();\n\tfor (int i = 0; i < 10000; ++i) {\n\t    memtable.put(new IndexEntry(Key.of((long) i), file, i));\n\t}\n\tstopWatch.stop();\n\tSystem.out.println(stopWatch);\n\tassertTrue(stopWatch.getDuration().compareTo(Duration.ofSeconds(1, 100)) < 0);\n    }", "signature": "void testSimplePerformance()", "full_signature": "@Test public void testSimplePerformance()", "class_method_signature": "MemtableTest.testSimplePerformance()", "testcase": true, "constructor": false, "invocations": ["start", "put", "of", "stop", "println", "assertTrue", "compareTo", "getDuration", "ofSeconds"]}, "focal_class": {"identifier": "Memtable", "superclass": "", "interfaces": "implements Iterable<IndexEntry>", "fields": [{"original_string": "private final ReentrantReadWriteLock reentrantReadWriteLock = new ReentrantReadWriteLock(true);", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "reentrantReadWriteLock = new ReentrantReadWriteLock(true)", "var_name": "reentrantReadWriteLock"}, {"original_string": "private final ReadLock readLock = reentrantReadWriteLock.readLock();", "modifier": "private final", "type": "ReadLock", "declarator": "readLock = reentrantReadWriteLock.readLock()", "var_name": "readLock"}, {"original_string": "private final WriteLock writeLock = reentrantReadWriteLock.writeLock();", "modifier": "private final", "type": "WriteLock", "declarator": "writeLock = reentrantReadWriteLock.writeLock()", "var_name": "writeLock"}, {"original_string": "private final RedBlackTree<Key, IndexEntry> values = new RedBlackTree<>();", "modifier": "private final", "type": "RedBlackTree<Key, IndexEntry>", "declarator": "values = new RedBlackTree<>()", "var_name": "values"}], "methods": [{"identifier": "Memtable", "parameters": "()", "modifiers": "public", "return": "", "signature": " Memtable()", "full_signature": "public  Memtable()", "class_method_signature": "Memtable.Memtable()", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "Memtable.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Memtable.size()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(IndexEntry indexEntry)", "modifiers": "public", "return": "void", "signature": "void put(IndexEntry indexEntry)", "full_signature": "public void put(IndexEntry indexEntry)", "class_method_signature": "Memtable.put(IndexEntry indexEntry)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Key rowKey)", "modifiers": "public", "return": "IndexEntry", "signature": "IndexEntry get(Key rowKey)", "full_signature": "public IndexEntry get(Key rowKey)", "class_method_signature": "Memtable.get(Key rowKey)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Key rowKey)", "modifiers": "public", "return": "void", "signature": "void delete(Key rowKey)", "full_signature": "public void delete(Key rowKey)", "class_method_signature": "Memtable.delete(Key rowKey)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "IndexEntryIterator", "signature": "IndexEntryIterator iterator()", "full_signature": "@Override public IndexEntryIterator iterator()", "class_method_signature": "Memtable.iterator()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(Key startKey, Key endKey)", "modifiers": "public", "return": "IndexEntryIterator", "signature": "IndexEntryIterator iterator(Key startKey, Key endKey)", "full_signature": "public IndexEntryIterator iterator(Key startKey, Key endKey)", "class_method_signature": "Memtable.iterator(Key startKey, Key endKey)", "testcase": false, "constructor": false}], "file": "logstore/src/main/java/com/puresoltechnologies/ductiledb/logstore/index/Memtable.java"}, "focal_method": {"identifier": "put", "parameters": "(IndexEntry indexEntry)", "modifiers": "public", "return": "void", "body": "public void put(IndexEntry indexEntry) {\n\twriteLock.lock();\n\ttry {\n\t    values.put(indexEntry.getRowKey(), indexEntry);\n\t} finally {\n\t    writeLock.unlock();\n\t}\n    }", "signature": "void put(IndexEntry indexEntry)", "full_signature": "public void put(IndexEntry indexEntry)", "class_method_signature": "Memtable.put(IndexEntry indexEntry)", "testcase": false, "constructor": false, "invocations": ["lock", "put", "getRowKey", "unlock"]}, "repository": {"repo_id": 45098765, "url": "https://github.com/PureSolTechnologies/DuctileDB", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 12564, "license": "licensed"}}