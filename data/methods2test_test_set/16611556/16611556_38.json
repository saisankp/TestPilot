{"test_class": {"identifier": "CacheImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final String name = \"someCache\";", "modifier": "protected final", "type": "String", "declarator": "name = \"someCache\"", "var_name": "name"}, {"original_string": "protected final Collection<String> aliases = ImmutableSet.of(\"alias1\", \"alias2\");", "modifier": "protected final", "type": "Collection<String>", "declarator": "aliases = ImmutableSet.of(\"alias1\", \"alias2\")", "var_name": "aliases"}, {"original_string": "protected final SerializationType defaultSerializationType = SerializationType.PROVIDER;", "modifier": "protected final", "type": "SerializationType", "declarator": "defaultSerializationType = SerializationType.PROVIDER", "var_name": "defaultSerializationType"}, {"original_string": "protected JsonTranscoder jsonTranscoder;", "modifier": "protected", "type": "JsonTranscoder", "declarator": "jsonTranscoder", "var_name": "jsonTranscoder"}, {"original_string": "protected JavaTranscoder javaTranscoder;", "modifier": "protected", "type": "JavaTranscoder", "declarator": "javaTranscoder", "var_name": "javaTranscoder"}, {"original_string": "protected CacheClient cacheClient;", "modifier": "protected", "type": "CacheClient", "declarator": "cacheClient", "var_name": "cacheClient"}, {"original_string": "protected Cache cache;", "modifier": "protected", "type": "Cache", "declarator": "cache", "var_name": "cache"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/CacheImplTest.java"}, "test_case": {"identifier": "getAvailableServers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAvailableServers() {\n        @SuppressWarnings(\"unchecked\")\n        Collection<SocketAddress> addresses = Mockito.mock(Collection.class);\n        Mockito.when(cacheClient.getAvailableServers()).thenReturn(addresses);\n\n        assertSame(addresses, cache.getAvailableServers());\n    }", "signature": "void getAvailableServers()", "full_signature": "@Test public void getAvailableServers()", "class_method_signature": "CacheImplTest.getAvailableServers()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getAvailableServers", "assertSame", "getAvailableServers"]}, "focal_class": {"identifier": "CacheImpl", "superclass": "", "interfaces": "implements Cache", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CacheImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CacheImpl.class)", "var_name": "LOGGER"}, {"original_string": "@Getter\n    private final String name;", "modifier": "@Getter\n    private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@Getter\n    private final Collection<String> aliases;", "modifier": "@Getter\n    private final", "type": "Collection<String>", "declarator": "aliases", "var_name": "aliases"}, {"original_string": "@Getter\n    private final CacheProperties properties;", "modifier": "@Getter\n    private final", "type": "CacheProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final SerializationType defaultSerializationType;", "modifier": "private final", "type": "SerializationType", "declarator": "defaultSerializationType", "var_name": "defaultSerializationType"}, {"original_string": "private final JsonTranscoder jsonTranscoder;", "modifier": "private final", "type": "JsonTranscoder", "declarator": "jsonTranscoder", "var_name": "jsonTranscoder"}, {"original_string": "private final JavaTranscoder javaTranscoder;", "modifier": "private final", "type": "JavaTranscoder", "declarator": "javaTranscoder", "var_name": "javaTranscoder"}, {"original_string": "private final LongToStringTranscoder longToStringTranscoder = new LongToStringTranscoder();", "modifier": "private final", "type": "LongToStringTranscoder", "declarator": "longToStringTranscoder = new LongToStringTranscoder()", "var_name": "longToStringTranscoder"}, {"original_string": "private final CacheTranscoder customTranscoder;", "modifier": "private final", "type": "CacheTranscoder", "declarator": "customTranscoder", "var_name": "customTranscoder"}, {"original_string": "private volatile CacheClient cacheClient;", "modifier": "private volatile", "type": "CacheClient", "declarator": "cacheClient", "var_name": "cacheClient"}], "methods": [{"identifier": "CacheImpl", "parameters": "(final String name, final Collection<String> aliases, final CacheClient cacheClient,\n            final SerializationType defaultSerializationType, final JsonTranscoder jsonTranscoder, final JavaTranscoder javaTranscoder,\n            final CacheTranscoder customTranscoder, final CacheProperties properties)", "modifiers": "", "return": "", "signature": " CacheImpl(final String name, final Collection<String> aliases, final CacheClient cacheClient,\n            final SerializationType defaultSerializationType, final JsonTranscoder jsonTranscoder, final JavaTranscoder javaTranscoder,\n            final CacheTranscoder customTranscoder, final CacheProperties properties)", "full_signature": "  CacheImpl(final String name, final Collection<String> aliases, final CacheClient cacheClient,\n            final SerializationType defaultSerializationType, final JsonTranscoder jsonTranscoder, final JavaTranscoder javaTranscoder,\n            final CacheTranscoder customTranscoder, final CacheProperties properties)", "class_method_signature": "CacheImpl.CacheImpl(final String name, final Collection<String> aliases, final CacheClient cacheClient,\n            final SerializationType defaultSerializationType, final JsonTranscoder jsonTranscoder, final JavaTranscoder javaTranscoder,\n            final CacheTranscoder customTranscoder, final CacheProperties properties)", "testcase": false, "constructor": true}, {"identifier": "getAvailableServers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<SocketAddress>", "signature": "Collection<SocketAddress> getAvailableServers()", "full_signature": "@Override public Collection<SocketAddress> getAvailableServers()", "class_method_signature": "CacheImpl.getAvailableServers()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String cacheKey, final SerializationType serializationType)", "modifiers": "@Override public", "return": "T", "signature": "T get(final String cacheKey, final SerializationType serializationType)", "full_signature": "@Override public T get(final String cacheKey, final SerializationType serializationType)", "class_method_signature": "CacheImpl.get(final String cacheKey, final SerializationType serializationType)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void set(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public void set(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "class_method_signature": "CacheImpl.set(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "testcase": false, "constructor": false}, {"identifier": "setSilently", "parameters": "(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "modifiers": "@Override public", "return": "void", "signature": "void setSilently(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "full_signature": "@Override public void setSilently(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "class_method_signature": "CacheImpl.setSilently(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "full_signature": "@Override public boolean add(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "class_method_signature": "CacheImpl.add(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "testcase": false, "constructor": false}, {"identifier": "addSilently", "parameters": "(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addSilently(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "full_signature": "@Override public boolean addSilently(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "class_method_signature": "CacheImpl.addSilently(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType)", "testcase": false, "constructor": false}, {"identifier": "getBulk", "parameters": "(final Collection<String> keys, final SerializationType serializationType)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getBulk(final Collection<String> keys, final SerializationType serializationType)", "full_signature": "@Override public Map<String, Object> getBulk(final Collection<String> keys, final SerializationType serializationType)", "class_method_signature": "CacheImpl.getBulk(final Collection<String> keys, final SerializationType serializationType)", "testcase": false, "constructor": false}, {"identifier": "decr", "parameters": "(final String key, final int by)", "modifiers": "@Override public", "return": "long", "signature": "long decr(final String key, final int by)", "full_signature": "@Override public long decr(final String key, final int by)", "class_method_signature": "CacheImpl.decr(final String key, final int by)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean delete(final String key)", "full_signature": "@Override public boolean delete(final String key)", "class_method_signature": "CacheImpl.delete(final String key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final Collection<String> keys)", "modifiers": "@Override public", "return": "void", "signature": "void delete(final Collection<String> keys)", "full_signature": "@Override public void delete(final Collection<String> keys)", "class_method_signature": "CacheImpl.delete(final Collection<String> keys)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "CacheImpl.flush()", "testcase": false, "constructor": false}, {"identifier": "incr", "parameters": "(final String key, final int by, final long def)", "modifiers": "@Override public", "return": "long", "signature": "long incr(final String key, final int by, final long def)", "full_signature": "@Override public long incr(final String key, final int by, final long def)", "class_method_signature": "CacheImpl.incr(final String key, final int by, final long def)", "testcase": false, "constructor": false}, {"identifier": "incr", "parameters": "(final String key, final int by, final long def, final int exp)", "modifiers": "@Override public", "return": "long", "signature": "long incr(final String key, final int by, final long def, final int exp)", "full_signature": "@Override public long incr(final String key, final int by, final long def, final int exp)", "class_method_signature": "CacheImpl.incr(final String key, final int by, final long def, final int exp)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "@Override public boolean isEnabled()", "class_method_signature": "CacheImpl.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "getCounter", "parameters": "(final String cacheKey)", "modifiers": "@Override public", "return": "Long", "signature": "Long getCounter(final String cacheKey)", "full_signature": "@Override public Long getCounter(final String cacheKey)", "class_method_signature": "CacheImpl.getCounter(final String cacheKey)", "testcase": false, "constructor": false}, {"identifier": "setCounter", "parameters": "(final String cacheKey, final int expiration, final long value)", "modifiers": "@Override public", "return": "void", "signature": "void setCounter(final String cacheKey, final int expiration, final long value)", "full_signature": "@Override public void setCounter(final String cacheKey, final int expiration, final long value)", "class_method_signature": "CacheImpl.setCounter(final String cacheKey, final int expiration, final long value)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "CacheImpl.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getNativeClient", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getNativeClient()", "full_signature": "@Override public Object getNativeClient()", "class_method_signature": "CacheImpl.getNativeClient()", "testcase": false, "constructor": false}, {"identifier": "changeCacheClient", "parameters": "(final CacheClient newCacheClient)", "modifiers": "", "return": "void", "signature": "void changeCacheClient(final CacheClient newCacheClient)", "full_signature": " void changeCacheClient(final CacheClient newCacheClient)", "class_method_signature": "CacheImpl.changeCacheClient(final CacheClient newCacheClient)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String cacheKey, final SerializationType serializationType, final CacheTranscoder cacheTranscoder)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "T", "signature": "T get(final String cacheKey, final SerializationType serializationType, final CacheTranscoder cacheTranscoder)", "full_signature": "@SuppressWarnings(\"unchecked\") private T get(final String cacheKey, final SerializationType serializationType, final CacheTranscoder cacheTranscoder)", "class_method_signature": "CacheImpl.get(final String cacheKey, final SerializationType serializationType, final CacheTranscoder cacheTranscoder)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final String cacheKey, final int expiration, final T value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "modifiers": "private", "return": "void", "signature": "void set(final String cacheKey, final int expiration, final T value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "full_signature": "private void set(final String cacheKey, final int expiration, final T value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "class_method_signature": "CacheImpl.set(final String cacheKey, final int expiration, final T value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "modifiers": "private", "return": "boolean", "signature": "boolean add(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "full_signature": "private boolean add(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "class_method_signature": "CacheImpl.add(final String cacheKey, final int expiration, final Object value, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "testcase": false, "constructor": false}, {"identifier": "getBulk", "parameters": "(final Collection<String> keys, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getBulk(final Collection<String> keys, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "full_signature": "private Map<String, Object> getBulk(final Collection<String> keys, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "class_method_signature": "CacheImpl.getBulk(final Collection<String> keys, final SerializationType serializationType,\n            final CacheTranscoder cacheTranscoder)", "testcase": false, "constructor": false}, {"identifier": "getSerializationType", "parameters": "(final SerializationType serializationType)", "modifiers": "private", "return": "SerializationType", "signature": "SerializationType getSerializationType(final SerializationType serializationType)", "full_signature": "private SerializationType getSerializationType(final SerializationType serializationType)", "class_method_signature": "CacheImpl.getSerializationType(final SerializationType serializationType)", "testcase": false, "constructor": false}, {"identifier": "warn", "parameters": "(final Exception e, final String format, final Object... args)", "modifiers": "private", "return": "void", "signature": "void warn(final Exception e, final String format, final Object... args)", "full_signature": "private void warn(final Exception e, final String format, final Object... args)", "class_method_signature": "CacheImpl.warn(final Exception e, final String format, final Object... args)", "testcase": false, "constructor": false}, {"identifier": "validateTranscoder", "parameters": "(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "modifiers": "private", "return": "void", "signature": "void validateTranscoder(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "full_signature": "private void validateTranscoder(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "class_method_signature": "CacheImpl.validateTranscoder(final SerializationType serializationType, final CacheTranscoder cacheTranscoder,\n            final String transcoderName)", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/CacheImpl.java"}, "focal_method": {"identifier": "getAvailableServers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<SocketAddress>", "body": "@Override\n    public Collection<SocketAddress> getAvailableServers() {\n        return cacheClient.getAvailableServers();\n    }", "signature": "Collection<SocketAddress> getAvailableServers()", "full_signature": "@Override public Collection<SocketAddress> getAvailableServers()", "class_method_signature": "CacheImpl.getAvailableServers()", "testcase": false, "constructor": false, "invocations": ["getAvailableServers"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}