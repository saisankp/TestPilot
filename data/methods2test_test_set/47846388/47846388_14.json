{"test_class": {"identifier": "ServiceEmitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypescriptServiceGeneratorConfiguration settings;", "modifier": "private", "type": "TypescriptServiceGeneratorConfiguration", "declarator": "settings", "var_name": "settings"}, {"original_string": "private IndentedOutputWriter writer;", "modifier": "private", "type": "IndentedOutputWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private ByteArrayOutputStream stream;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "private ServiceClassParser serviceClassParser;", "modifier": "private", "type": "ServiceClassParser", "declarator": "serviceClassParser", "var_name": "serviceClassParser"}], "file": "typescript-service-generator-core/src/test/java/com/palantir/code/ts/generator/ServiceEmitterTest.java"}, "test_case": {"identifier": "testDuplicateMethodClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDuplicateMethodClass() {\n        ServiceModel model = serviceClassParser.parseServiceClass(DuplicateMethodNamesService.class, settings);\n        ServiceEmitter serviceEmitter = new ServiceEmitter(model, settings, writer);\n        serviceEmitter.emitTypescriptClass();\n        writer.close();\n        String expectedOutput = \"\\n\" +\n\"export class DuplicateMethodNamesServiceImpl implements DuplicateMethodNamesService {\\n\" +\n\"\\n\" +\n\"    private httpApiBridge: HttpApiBridge;\\n\" +\n\"    constructor(httpApiBridge: HttpApiBridge) {\\n\" +\n\"        this.httpApiBridge = httpApiBridge;\\n\" +\n\"    }\\n\" +\n\"}\\n\";\n        assertEquals(expectedOutput, new String(stream.toByteArray()));\n    }", "signature": "void testDuplicateMethodClass()", "full_signature": "@Test public void testDuplicateMethodClass()", "class_method_signature": "ServiceEmitterTest.testDuplicateMethodClass()", "testcase": true, "constructor": false, "invocations": ["parseServiceClass", "emitTypescriptClass", "close", "assertEquals", "toByteArray"]}, "focal_class": {"identifier": "ServiceEmitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = new ObjectMapper()", "var_name": "OBJECT_MAPPER"}, {"original_string": "private final ServiceModel model;", "modifier": "private final", "type": "ServiceModel", "declarator": "model", "var_name": "model"}, {"original_string": "private final TypescriptServiceGeneratorConfiguration settings;", "modifier": "private final", "type": "TypescriptServiceGeneratorConfiguration", "declarator": "settings", "var_name": "settings"}, {"original_string": "private final IndentedOutputWriter writer;", "modifier": "private final", "type": "IndentedOutputWriter", "declarator": "writer", "var_name": "writer"}], "methods": [{"identifier": "ServiceEmitter", "parameters": "(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "modifiers": "public", "return": "", "signature": " ServiceEmitter(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "full_signature": "public  ServiceEmitter(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "class_method_signature": "ServiceEmitter.ServiceEmitter(ServiceModel model, TypescriptServiceGeneratorConfiguration settings, IndentedOutputWriter writer)", "testcase": false, "constructor": true}, {"identifier": "emitTypescriptTypes", "parameters": "(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "modifiers": "public", "return": "void", "signature": "void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "full_signature": "public void emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "class_method_signature": "ServiceEmitter.emitTypescriptTypes(TypescriptServiceGeneratorConfiguration settings, List<Type> additionalTypesToOutput)", "testcase": false, "constructor": false}, {"identifier": "emitTypescriptClass", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void emitTypescriptClass()", "full_signature": "public void emitTypescriptClass()", "class_method_signature": "ServiceEmitter.emitTypescriptClass()", "testcase": false, "constructor": false}, {"identifier": "emitTypescriptInterface", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void emitTypescriptInterface()", "full_signature": "public void emitTypescriptInterface()", "class_method_signature": "ServiceEmitter.emitTypescriptInterface()", "testcase": false, "constructor": false}, {"identifier": "getDuplicateEndpointNames", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getDuplicateEndpointNames()", "full_signature": "private Set<String> getDuplicateEndpointNames()", "class_method_signature": "ServiceEmitter.getDuplicateEndpointNames()", "testcase": false, "constructor": false}, {"identifier": "getEndpointPathString", "parameters": "(InnerServiceModel model, ServiceEndpointModel endpointModel)", "modifiers": "private", "return": "String", "signature": "String getEndpointPathString(InnerServiceModel model, ServiceEndpointModel endpointModel)", "full_signature": "private String getEndpointPathString(InnerServiceModel model, ServiceEndpointModel endpointModel)", "class_method_signature": "ServiceEmitter.getEndpointPathString(InnerServiceModel model, ServiceEndpointModel endpointModel)", "testcase": false, "constructor": false}, {"identifier": "getEndpointParametersString", "parameters": "(ServiceEndpointModel endpointModel)", "modifiers": "private", "return": "String", "signature": "String getEndpointParametersString(ServiceEndpointModel endpointModel)", "full_signature": "private String getEndpointParametersString(ServiceEndpointModel endpointModel)", "class_method_signature": "ServiceEmitter.getEndpointParametersString(ServiceEndpointModel endpointModel)", "testcase": false, "constructor": false}, {"identifier": "filterInputClasses", "parameters": "(Set<Class<?>> referencedClasses)", "modifiers": "private", "return": "Set<Class<?>>", "signature": "Set<Class<?>> filterInputClasses(Set<Class<?>> referencedClasses)", "full_signature": "private Set<Class<?>> filterInputClasses(Set<Class<?>> referencedClasses)", "class_method_signature": "ServiceEmitter.filterInputClasses(Set<Class<?>> referencedClasses)", "testcase": false, "constructor": false}, {"identifier": "getReferencedClasses", "parameters": "(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getReferencedClasses(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "full_signature": "public static Set<Class<?>> getReferencedClasses(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "class_method_signature": "ServiceEmitter.getReferencedClasses(Set<Type> referencedTypes, TypescriptServiceGeneratorConfiguration settings)", "testcase": false, "constructor": false}, {"identifier": "optionalToString", "parameters": "(Optional<T> payload)", "modifiers": "private static", "return": "String", "signature": "String optionalToString(Optional<T> payload)", "full_signature": "private static String optionalToString(Optional<T> payload)", "class_method_signature": "ServiceEmitter.optionalToString(Optional<T> payload)", "testcase": false, "constructor": false}], "file": "typescript-service-generator-core/src/main/java/com/palantir/code/ts/generator/ServiceEmitter.java"}, "focal_method": {"identifier": "emitTypescriptClass", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void emitTypescriptClass() {\n        Set<String> endpointsToWarnAboutDuplicateNames = Sets.newHashSet();\n        if (!this.settings.emitDuplicateJavaMethodNames()) {\n            endpointsToWarnAboutDuplicateNames = getDuplicateEndpointNames();\n        }\n        writer.writeLine(\"\");\n        // Adding \"Impl\" ensures the class name is different from the impl name, which is a compilation requirement.\n        writer.writeLine(\"export class \" + model.name() + \"Impl\" + \" implements \" + settings.getSettings().addTypeNamePrefix + model.name() + \" {\");\n        writer.increaseIndent();\n\n        writer.writeLine(\"\");\n        writer.writeLine(String.format(\"private httpApiBridge: %sHttpApiBridge;\", settings.generatedInterfacePrefix()));\n        writer.writeLine(String.format(\"constructor(httpApiBridge: %sHttpApiBridge) {\", settings.generatedInterfacePrefix()));\n        writer.increaseIndent();\n        writer.writeLine(\"this.httpApiBridge = httpApiBridge;\");\n        writer.decreaseIndent();\n        writer.writeLine(\"}\");\n\n        for (InnerServiceModel innerServiceModel : model.innerServiceModels()) {\n            if (model.innerServiceModels().size() > 1) {\n                writer.writeLine(\"\");\n                writer.writeLine(\"// endpoints for service class: \" + innerServiceModel.name());\n            }\n            for (ServiceEndpointModel endpointModel: innerServiceModel.endpointModels()) {\n                if (endpointsToWarnAboutDuplicateNames.contains(endpointModel.endpointName())) {\n                    // don't output any duplicates\n                    continue;\n                }\n                writer.writeLine(\"\");\n                String line = \"public \" + endpointModel.endpointName() + \"(\";\n                line += getEndpointParametersString(endpointModel);\n                line += \") {\";\n                writer.writeLine(line);\n                writer.increaseIndent();\n                writer.writeLine(String.format(\"var httpCallData = <%sHttpEndpointOptions> {\", settings.generatedInterfacePrefix()));\n                writer.increaseIndent();\n                writer.writeLine(\"serviceIdentifier: \\\"\" + Character.toLowerCase(model.name().charAt(0)) + model.name().substring(1) + \"\\\",\");\n                writer.writeLine(\"endpointPath: \\\"\" + getEndpointPathString(innerServiceModel, endpointModel) + \"\\\",\");\n                writer.writeLine(\"endpointName: \\\"\" + endpointModel.endpointName() + \"\\\",\");\n                writer.writeLine(\"method: \\\"\" + endpointModel.endpointMethodType() + \"\\\",\");\n                writer.writeLine(\"requestMediaType: \\\"\" + endpointModel.endpointRequestMediaType() + \"\\\",\");\n                writer.writeLine(\"responseMediaType: \\\"\" + optionalToString(endpointModel.endpointResponseMediaType()) + \"\\\",\");\n                List<String> requiredHeaders = Lists.newArrayList();\n                List<String> pathArguments = Lists.newArrayList();\n                List<String> queryArguments = Lists.newArrayList();\n                String dataArgument = null;\n                for (ServiceEndpointParameterModel parameterModel : endpointModel.parameters()) {\n                    if (parameterModel.headerParam() != null) {\n                        requiredHeaders.add(\"\\\"\" + parameterModel.headerParam() + \"\\\"\");\n                    } else if (parameterModel.pathParam() != null) {\n                        pathArguments.add(parameterModel.getParameterName());\n                    } else if (parameterModel.queryParam() != null) {\n                        queryArguments.add(parameterModel.queryParam());\n                    } else {\n                        if (dataArgument != null) {\n                            throw new IllegalStateException(\"There should only be one data argument per endpoint. Found both\" + dataArgument + \" and \" + parameterModel.getParameterName());\n                        }\n                        dataArgument = parameterModel.getParameterName();\n                        boolean isEnum = false;\n                        if (parameterModel.javaType() instanceof Class<?>) {\n                            isEnum = ((Class<?>) parameterModel.javaType()).isEnum();\n                        }\n                        if (endpointModel.endpointRequestMediaType().equals(MediaType.APPLICATION_JSON) && (parameterModel.tsType().toString().equals(\"string\") || isEnum)) {\n                            // strings (and enums, the wire format of an enum is a string) have to be wrapped in quotes in order to be valid json\n                            dataArgument = \"`\\\"${\" + parameterModel.getParameterName() + \"}\\\"`\";\n                        }\n                    }\n                }\n                writer.writeLine(\"requiredHeaders: [\" + Joiner.on(\", \").join(requiredHeaders) + \"],\");\n                writer.writeLine(\"pathArguments: [\" + Joiner.on(\", \").join(pathArguments) + \"],\");\n                writer.writeLine(\"queryArguments: {\");\n                writer.increaseIndent();\n                for (String queryArgument: queryArguments) {\n                    writer.writeLine(queryArgument + \": \" + queryArgument + \",\");\n                }\n                writer.decreaseIndent();\n                writer.writeLine(\"},\");\n                writer.writeLine(\"data: \" + dataArgument);\n                writer.decreaseIndent();\n                writer.writeLine(\"};\");\n                writer.writeLine(\"return this.httpApiBridge.callEndpoint<\" + endpointModel.tsReturnType().toString() + \">(httpCallData);\");\n                writer.decreaseIndent();\n                writer.writeLine(\"}\");\n            }\n        }\n        writer.decreaseIndent();\n        writer.writeLine(\"}\");\n    }", "signature": "void emitTypescriptClass()", "full_signature": "public void emitTypescriptClass()", "class_method_signature": "ServiceEmitter.emitTypescriptClass()", "testcase": false, "constructor": false, "invocations": ["newHashSet", "emitDuplicateJavaMethodNames", "getDuplicateEndpointNames", "writeLine", "writeLine", "name", "getSettings", "name", "increaseIndent", "writeLine", "writeLine", "format", "generatedInterfacePrefix", "writeLine", "format", "generatedInterfacePrefix", "increaseIndent", "writeLine", "decreaseIndent", "writeLine", "innerServiceModels", "size", "innerServiceModels", "writeLine", "writeLine", "name", "endpointModels", "contains", "endpointName", "writeLine", "endpointName", "getEndpointParametersString", "writeLine", "increaseIndent", "writeLine", "format", "generatedInterfacePrefix", "increaseIndent", "writeLine", "toLowerCase", "charAt", "name", "substring", "name", "writeLine", "getEndpointPathString", "writeLine", "endpointName", "writeLine", "endpointMethodType", "writeLine", "endpointRequestMediaType", "writeLine", "optionalToString", "endpointResponseMediaType", "newArrayList", "newArrayList", "newArrayList", "parameters", "headerParam", "add", "headerParam", "pathParam", "add", "getParameterName", "queryParam", "add", "queryParam", "getParameterName", "getParameterName", "javaType", "isEnum", "javaType", "equals", "endpointRequestMediaType", "equals", "toString", "tsType", "getParameterName", "writeLine", "join", "on", "writeLine", "join", "on", "writeLine", "increaseIndent", "writeLine", "decreaseIndent", "writeLine", "writeLine", "decreaseIndent", "writeLine", "writeLine", "toString", "tsReturnType", "decreaseIndent", "writeLine", "decreaseIndent", "writeLine"]}, "repository": {"repo_id": 47846388, "url": "https://github.com/palantir/typescript-service-generator", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 20, "size": 371, "license": "licensed"}}