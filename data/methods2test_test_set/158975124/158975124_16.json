{"test_class": {"identifier": "TsFileWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TsFileWriter writer = null;", "modifier": "", "type": "TsFileWriter", "declarator": "writer = null", "var_name": "writer"}, {"original_string": "long fileName = System.nanoTime();", "modifier": "", "type": "long", "declarator": "fileName = System.nanoTime()", "var_name": "fileName"}, {"original_string": "boolean closed = false;", "modifier": "", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}], "file": "tsfile/src/test/java/org/apache/iotdb/tsfile/write/TsFileWriterTest.java"}, "test_case": {"identifier": "writeTablet2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void writeTablet2() throws IOException, WriteProcessException {\n    Tablet tablet = new Tablet(\"d1\", Arrays.asList(\n        new MeasurementSchema(\"s1\", TSDataType.FLOAT, TSEncoding.RLE, CompressionType.SNAPPY),\n        new MeasurementSchema(\"s2\", TSDataType.INT32, TSEncoding.RLE, CompressionType.SNAPPY)));\n    tablet.timestamps[0] = 10000;\n    ((float[]) tablet.values[0])[0] = 5.0f;\n    tablet.rowSize = 1;\n    writer.write(tablet);\n    closeFile();\n    //in this case, the value of s2 = 0 at time 10000.\n    readOneRow(0);\n  }", "signature": "void writeTablet2()", "full_signature": "@Test public void writeTablet2()", "class_method_signature": "TsFileWriterTest.writeTablet2()", "testcase": true, "constructor": false, "invocations": ["asList", "write", "closeFile", "readOneRow"]}, "focal_class": {"identifier": "TsFileWriter", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "protected static final TSFileConfig config = TSFileDescriptor.getInstance().getConfig();", "modifier": "protected static final", "type": "TSFileConfig", "declarator": "config = TSFileDescriptor.getInstance().getConfig()", "var_name": "config"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TsFileWriter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TsFileWriter.class)", "var_name": "LOG"}, {"original_string": "protected final Schema schema;", "modifier": "protected final", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private final TsFileIOWriter fileWriter;", "modifier": "private final", "type": "TsFileIOWriter", "declarator": "fileWriter", "var_name": "fileWriter"}, {"original_string": "private final int pageSize;", "modifier": "private final", "type": "int", "declarator": "pageSize", "var_name": "pageSize"}, {"original_string": "private long recordCount = 0;", "modifier": "private", "type": "long", "declarator": "recordCount = 0", "var_name": "recordCount"}, {"original_string": "private Map<String, IChunkGroupWriter> groupWriters = new HashMap<>();", "modifier": "private", "type": "Map<String, IChunkGroupWriter>", "declarator": "groupWriters = new HashMap<>()", "var_name": "groupWriters"}, {"original_string": "private long recordCountForNextMemCheck = 100;", "modifier": "private", "type": "long", "declarator": "recordCountForNextMemCheck = 100", "var_name": "recordCountForNextMemCheck"}, {"original_string": "private long chunkGroupSizeThreshold;", "modifier": "private", "type": "long", "declarator": "chunkGroupSizeThreshold", "var_name": "chunkGroupSizeThreshold"}], "methods": [{"identifier": "TsFileWriter", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " TsFileWriter(File file)", "full_signature": "public  TsFileWriter(File file)", "class_method_signature": "TsFileWriter.TsFileWriter(File file)", "testcase": false, "constructor": true}, {"identifier": "TsFileWriter", "parameters": "(TsFileIOWriter fileWriter)", "modifiers": "public", "return": "", "signature": " TsFileWriter(TsFileIOWriter fileWriter)", "full_signature": "public  TsFileWriter(TsFileIOWriter fileWriter)", "class_method_signature": "TsFileWriter.TsFileWriter(TsFileIOWriter fileWriter)", "testcase": false, "constructor": true}, {"identifier": "TsFileWriter", "parameters": "(File file, Schema schema)", "modifiers": "public", "return": "", "signature": " TsFileWriter(File file, Schema schema)", "full_signature": "public  TsFileWriter(File file, Schema schema)", "class_method_signature": "TsFileWriter.TsFileWriter(File file, Schema schema)", "testcase": false, "constructor": true}, {"identifier": "TsFileWriter", "parameters": "(TsFileOutput output, Schema schema)", "modifiers": "public", "return": "", "signature": " TsFileWriter(TsFileOutput output, Schema schema)", "full_signature": "public  TsFileWriter(TsFileOutput output, Schema schema)", "class_method_signature": "TsFileWriter.TsFileWriter(TsFileOutput output, Schema schema)", "testcase": false, "constructor": true}, {"identifier": "TsFileWriter", "parameters": "(File file, Schema schema, TSFileConfig conf)", "modifiers": "public", "return": "", "signature": " TsFileWriter(File file, Schema schema, TSFileConfig conf)", "full_signature": "public  TsFileWriter(File file, Schema schema, TSFileConfig conf)", "class_method_signature": "TsFileWriter.TsFileWriter(File file, Schema schema, TSFileConfig conf)", "testcase": false, "constructor": true}, {"identifier": "TsFileWriter", "parameters": "(TsFileIOWriter fileWriter, Schema schema, TSFileConfig conf)", "modifiers": "protected", "return": "", "signature": " TsFileWriter(TsFileIOWriter fileWriter, Schema schema, TSFileConfig conf)", "full_signature": "protected  TsFileWriter(TsFileIOWriter fileWriter, Schema schema, TSFileConfig conf)", "class_method_signature": "TsFileWriter.TsFileWriter(TsFileIOWriter fileWriter, Schema schema, TSFileConfig conf)", "testcase": false, "constructor": true}, {"identifier": "registerDeviceTemplate", "parameters": "(String templateName, Map<String, MeasurementSchema> template)", "modifiers": "public", "return": "void", "signature": "void registerDeviceTemplate(String templateName, Map<String, MeasurementSchema> template)", "full_signature": "public void registerDeviceTemplate(String templateName, Map<String, MeasurementSchema> template)", "class_method_signature": "TsFileWriter.registerDeviceTemplate(String templateName, Map<String, MeasurementSchema> template)", "testcase": false, "constructor": false}, {"identifier": "registerDevice", "parameters": "(String deviceId, String templateName)", "modifiers": "public", "return": "void", "signature": "void registerDevice(String deviceId, String templateName)", "full_signature": "public void registerDevice(String deviceId, String templateName)", "class_method_signature": "TsFileWriter.registerDevice(String deviceId, String templateName)", "testcase": false, "constructor": false}, {"identifier": "registerTimeseries", "parameters": "(Path path, MeasurementSchema measurementSchema)", "modifiers": "public", "return": "void", "signature": "void registerTimeseries(Path path, MeasurementSchema measurementSchema)", "full_signature": "public void registerTimeseries(Path path, MeasurementSchema measurementSchema)", "class_method_signature": "TsFileWriter.registerTimeseries(Path path, MeasurementSchema measurementSchema)", "testcase": false, "constructor": false}, {"identifier": "checkIsTimeSeriesExist", "parameters": "(TSRecord record)", "modifiers": "private", "return": "boolean", "signature": "boolean checkIsTimeSeriesExist(TSRecord record)", "full_signature": "private boolean checkIsTimeSeriesExist(TSRecord record)", "class_method_signature": "TsFileWriter.checkIsTimeSeriesExist(TSRecord record)", "testcase": false, "constructor": false}, {"identifier": "checkIsTimeSeriesExist", "parameters": "(Tablet tablet)", "modifiers": "private", "return": "void", "signature": "void checkIsTimeSeriesExist(Tablet tablet)", "full_signature": "private void checkIsTimeSeriesExist(Tablet tablet)", "class_method_signature": "TsFileWriter.checkIsTimeSeriesExist(Tablet tablet)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(TSRecord record)", "modifiers": "public", "return": "boolean", "signature": "boolean write(TSRecord record)", "full_signature": "public boolean write(TSRecord record)", "class_method_signature": "TsFileWriter.write(TSRecord record)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Tablet tablet)", "modifiers": "public", "return": "boolean", "signature": "boolean write(Tablet tablet)", "full_signature": "public boolean write(Tablet tablet)", "class_method_signature": "TsFileWriter.write(Tablet tablet)", "testcase": false, "constructor": false}, {"identifier": "calculateMemSizeForAllGroup", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long calculateMemSizeForAllGroup()", "full_signature": "private long calculateMemSizeForAllGroup()", "class_method_signature": "TsFileWriter.calculateMemSizeForAllGroup()", "testcase": false, "constructor": false}, {"identifier": "checkMemorySizeAndMayFlushChunks", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean checkMemorySizeAndMayFlushChunks()", "full_signature": "private boolean checkMemorySizeAndMayFlushChunks()", "class_method_signature": "TsFileWriter.checkMemorySizeAndMayFlushChunks()", "testcase": false, "constructor": false}, {"identifier": "flushAllChunkGroups", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean flushAllChunkGroups()", "full_signature": "public boolean flushAllChunkGroups()", "class_method_signature": "TsFileWriter.flushAllChunkGroups()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reset()", "full_signature": "private void reset()", "class_method_signature": "TsFileWriter.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TsFileWriter.close()", "testcase": false, "constructor": false}, {"identifier": "getIOWriter", "parameters": "()", "modifiers": "public", "return": "TsFileIOWriter", "signature": "TsFileIOWriter getIOWriter()", "full_signature": "public TsFileIOWriter getIOWriter()", "class_method_signature": "TsFileWriter.getIOWriter()", "testcase": false, "constructor": false}, {"identifier": "writeVersion", "parameters": "(long versionPair)", "modifiers": "public", "return": "void", "signature": "void writeVersion(long versionPair)", "full_signature": "public void writeVersion(long versionPair)", "class_method_signature": "TsFileWriter.writeVersion(long versionPair)", "testcase": false, "constructor": false}], "file": "tsfile/src/main/java/org/apache/iotdb/tsfile/write/TsFileWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(TSRecord record)", "modifiers": "public", "return": "boolean", "body": "public boolean write(TSRecord record) throws IOException, WriteProcessException {\n    // make sure the ChunkGroupWriter for this TSRecord exist\n    checkIsTimeSeriesExist(record);\n    // get corresponding ChunkGroupWriter and write this TSRecord\n    groupWriters.get(record.deviceId).write(record.time, record.dataPointList);\n    ++recordCount;\n    return checkMemorySizeAndMayFlushChunks();\n  }", "signature": "boolean write(TSRecord record)", "full_signature": "public boolean write(TSRecord record)", "class_method_signature": "TsFileWriter.write(TSRecord record)", "testcase": false, "constructor": false, "invocations": ["checkIsTimeSeriesExist", "write", "get", "checkMemorySizeAndMayFlushChunks"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}