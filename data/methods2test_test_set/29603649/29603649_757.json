{"test_class": {"identifier": "XslCompilerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private InputStream inputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private Processor processor;", "modifier": "@Mock\n    private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mock\n    private XsltExecutable xsltExecutable;", "modifier": "@Mock\n    private", "type": "XsltExecutable", "declarator": "xsltExecutable", "var_name": "xsltExecutable"}, {"original_string": "@Mock\n    private StreamSource source;", "modifier": "@Mock\n    private", "type": "StreamSource", "declarator": "source", "var_name": "source"}, {"original_string": "@Mock\n    private XsltCompiler xsltCompiler;", "modifier": "@Mock\n    private", "type": "XsltCompiler", "declarator": "xsltCompiler", "var_name": "xsltCompiler"}, {"original_string": "@Mock\n    private StreamSourceFactory streamSourceFactory;", "modifier": "@Mock\n    private", "type": "StreamSourceFactory", "declarator": "streamSourceFactory", "var_name": "streamSourceFactory"}, {"original_string": "@Mock\n    private SaxonCompilerErrorListener errorListener;", "modifier": "@Mock\n    private", "type": "SaxonCompilerErrorListener", "declarator": "errorListener", "var_name": "errorListener"}, {"original_string": "@InjectMocks\n    private XslCompiler underTest;", "modifier": "@InjectMocks\n    private", "type": "XslCompiler", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslCompilerTest.java"}, "test_case": {"identifier": "testCompileXslShouldCompileSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompileXslShouldCompileSource() throws SaxonApiException {\n        //GIVEN\n        given(processor.newXsltCompiler()).willReturn(xsltCompiler);\n        given(streamSourceFactory.createStreamSource(inputStream)).willReturn(source);\n        //WHEN\n        underTest.compileXsl(inputStream, processor);\n        //THEN\n        verify(xsltCompiler).compile(source);\n    }", "signature": "void testCompileXslShouldCompileSource()", "full_signature": "@Test public void testCompileXslShouldCompileSource()", "class_method_signature": "XslCompilerTest.testCompileXslShouldCompileSource()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "newXsltCompiler", "willReturn", "given", "createStreamSource", "compileXsl", "compile", "verify"]}, "focal_class": {"identifier": "XslCompiler", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private StreamSourceFactory streamSourceFactory;", "modifier": "@Autowired\n    private", "type": "StreamSourceFactory", "declarator": "streamSourceFactory", "var_name": "streamSourceFactory"}, {"original_string": "@Autowired\n    private SaxonCompilerErrorListener errorListener;", "modifier": "@Autowired\n    private", "type": "SaxonCompilerErrorListener", "declarator": "errorListener", "var_name": "errorListener"}], "methods": [{"identifier": "compileXsl", "parameters": "(final InputStream inputStream, final Processor processor)", "modifiers": "public", "return": "XsltExecutable", "signature": "XsltExecutable compileXsl(final InputStream inputStream, final Processor processor)", "full_signature": "public XsltExecutable compileXsl(final InputStream inputStream, final Processor processor)", "class_method_signature": "XslCompiler.compileXsl(final InputStream inputStream, final Processor processor)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/stub/response/formatter/xsl/XslCompiler.java"}, "focal_method": {"identifier": "compileXsl", "parameters": "(final InputStream inputStream, final Processor processor)", "modifiers": "public", "return": "XsltExecutable", "body": "public XsltExecutable compileXsl(final InputStream inputStream, final Processor processor) throws SaxonApiException {\n        XsltCompiler xsltCompiler = processor.newXsltCompiler();\n        Source xslSource = streamSourceFactory.createStreamSource(inputStream);\n        xsltCompiler.setErrorListener(errorListener);\n        XsltExecutable xsltExecutable = xsltCompiler.compile(xslSource);\n        return xsltExecutable;\n    }", "signature": "XsltExecutable compileXsl(final InputStream inputStream, final Processor processor)", "full_signature": "public XsltExecutable compileXsl(final InputStream inputStream, final Processor processor)", "class_method_signature": "XslCompiler.compileXsl(final InputStream inputStream, final Processor processor)", "testcase": false, "constructor": false, "invocations": ["newXsltCompiler", "createStreamSource", "setErrorListener", "compile"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}