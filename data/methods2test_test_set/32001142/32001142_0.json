{"test_class": {"identifier": "MethodToLogTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static  final String METHODS_TO_LOG\n            = \"[{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"int\\\"], \\\"parameterNames\\\":[\\\"i\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"methodToLog\\\"]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"int\\\"], \\\"parameterNames\\\":[\\\"i\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"methodToLog\\\"]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[\\\"int\\\"], \\\"parameterNames\\\":[\\\"anInt\\\"]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[\\\"int\\\",\\\"java.lang.Long\\\",\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"anInt\\\",\\\"aLong\\\",\\\"methodToLog\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"method1\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"method1\\\", \\\"parameterClasses\\\":[\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"methodToLog\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"method1\\\", \\\"parameterClasses\\\":[\\\"int\\\",\\\"java.lang.Integer\\\"], \\\"parameterNames\\\":[\\\"i\\\",\\\"j\\\"]}]\";", "modifier": "public static  final", "type": "String", "declarator": "METHODS_TO_LOG\n            = \"[{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"int\\\"], \\\"parameterNames\\\":[\\\"i\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.InnerClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"methodToLog\\\"]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"int\\\"], \\\"parameterNames\\\":[\\\"i\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod.StaticNestedClass\\\", \\\"methodName\\\":\\\"innerMethod\\\", \\\"parameterClasses\\\":[\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"methodToLog\\\"]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[\\\"int\\\"], \\\"parameterNames\\\":[\\\"anInt\\\"]},{\\\"type\\\":1, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"<init>\\\", \\\"parameterClasses\\\":[\\\"int\\\",\\\"java.lang.Long\\\",\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"anInt\\\",\\\"aLong\\\",\\\"methodToLog\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"method1\\\", \\\"parameterClasses\\\":[], \\\"parameterNames\\\":[]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"method1\\\", \\\"parameterClasses\\\":[\\\"com.promegu.xlog.base.MethodToLog\\\"], \\\"parameterNames\\\":[\\\"methodToLog\\\"]},{\\\"type\\\":0, \\\"className\\\":\\\"com.promegu.xlog.base.TestMatchMethod\\\", \\\"methodName\\\":\\\"method1\\\", \\\"parameterClasses\\\":[\\\"int\\\",\\\"java.lang.Integer\\\"], \\\"parameterNames\\\":[\\\"i\\\",\\\"j\\\"]}]\"", "var_name": "METHODS_TO_LOG"}], "file": "xlog-base/src/test/java/com/promegu/xlog/base/MethodToLogTest.java"}, "test_case": {"identifier": "testMatchMethodOrConstructor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatchMethodOrConstructor() {\n        List<MethodToLog> methodToLogs = new Gson()\n                .fromJson(METHODS_TO_LOG, new TypeToken<List<MethodToLog>>() {\n                }.getType());\n\n        Set<Member> methods = new HashSet<>();\n        methods.addAll(Arrays.asList(TestMatchMethod.class.getDeclaredMethods()));\n        methods.addAll(Arrays.asList(TestMatchMethod.class.getDeclaredConstructors()));\n        methods.addAll(Arrays.asList(TestMatchMethod.InnerClass.class.getDeclaredMethods()));\n        methods.addAll(Arrays.asList(TestMatchMethod.InnerClass.class.getDeclaredConstructors()));\n        methods.addAll(Arrays.asList(TestMatchMethod.StaticNestedClass.class.getDeclaredMethods()));\n        methods.addAll(\n                Arrays.asList(TestMatchMethod.StaticNestedClass.class.getDeclaredConstructors()));\n\n        for (Member member : methods) {\n            int matchCount = 0;\n\n            for (MethodToLog methodToLog : methodToLogs) {\n                if (methodToLog.matchMethodOrConstructor(member)) {\n                    matchCount++;\n                }\n            }\n\n            // ensure every method match 1 time\n            assertThat(matchCount, is(1));\n        }\n\n        // ensure every method is tested\n        assertThat(methodToLogs.size(), is(methods.size()));\n    }", "signature": "void testMatchMethodOrConstructor()", "full_signature": "@Test public void testMatchMethodOrConstructor()", "class_method_signature": "MethodToLogTest.testMatchMethodOrConstructor()", "testcase": true, "constructor": false, "invocations": ["fromJson", "getType", "addAll", "asList", "getDeclaredMethods", "addAll", "asList", "getDeclaredConstructors", "addAll", "asList", "getDeclaredMethods", "addAll", "asList", "getDeclaredConstructors", "addAll", "asList", "getDeclaredMethods", "addAll", "asList", "getDeclaredConstructors", "matchMethodOrConstructor", "assertThat", "is", "assertThat", "size", "is", "size"]}, "focal_class": {"identifier": "MethodToLog", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int type;", "modifier": "private", "type": "int", "declarator": "type", "var_name": "type"}, {"original_string": "private String className;", "modifier": "private", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "private String methodName;", "modifier": "private", "type": "String", "declarator": "methodName", "var_name": "methodName"}, {"original_string": "private List<String> parameterClasses;", "modifier": "private", "type": "List<String>", "declarator": "parameterClasses", "var_name": "parameterClasses"}, {"original_string": "private List<String> parameterNames;", "modifier": "private", "type": "List<String>", "declarator": "parameterNames", "var_name": "parameterNames"}], "methods": [{"identifier": "MethodToLog", "parameters": "(int type, String className, String methodName, List<String> parameterClasses,\n            List<String> parameterNames)", "modifiers": "public", "return": "", "signature": " MethodToLog(int type, String className, String methodName, List<String> parameterClasses,\n            List<String> parameterNames)", "full_signature": "public  MethodToLog(int type, String className, String methodName, List<String> parameterClasses,\n            List<String> parameterNames)", "class_method_signature": "MethodToLog.MethodToLog(int type, String className, String methodName, List<String> parameterClasses,\n            List<String> parameterNames)", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getType()", "full_signature": "public int getType()", "class_method_signature": "MethodToLog.getType()", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassName()", "full_signature": "public String getClassName()", "class_method_signature": "MethodToLog.getClassName()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "MethodToLog.getName()", "testcase": false, "constructor": false}, {"identifier": "getParameterClasses", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getParameterClasses()", "full_signature": "public List<String> getParameterClasses()", "class_method_signature": "MethodToLog.getParameterClasses()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getParameterNames()", "full_signature": "public List<String> getParameterNames()", "class_method_signature": "MethodToLog.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "isMethod", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMethod()", "full_signature": "public boolean isMethod()", "class_method_signature": "MethodToLog.isMethod()", "testcase": false, "constructor": false}, {"identifier": "isConstructor", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConstructor()", "full_signature": "public boolean isConstructor()", "class_method_signature": "MethodToLog.isConstructor()", "testcase": false, "constructor": false}, {"identifier": "matchMethodOrConstructor", "parameters": "(Member member)", "modifiers": "public", "return": "boolean", "signature": "boolean matchMethodOrConstructor(Member member)", "full_signature": "public boolean matchMethodOrConstructor(Member member)", "class_method_signature": "MethodToLog.matchMethodOrConstructor(Member member)", "testcase": false, "constructor": false}, {"identifier": "matchMethod", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean matchMethod(Method method)", "full_signature": "private boolean matchMethod(Method method)", "class_method_signature": "MethodToLog.matchMethod(Method method)", "testcase": false, "constructor": false}, {"identifier": "matchMethod", "parameters": "(Constructor constructor)", "modifiers": "private", "return": "boolean", "signature": "boolean matchMethod(Constructor constructor)", "full_signature": "private boolean matchMethod(Constructor constructor)", "class_method_signature": "MethodToLog.matchMethod(Constructor constructor)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MethodToLog.toString()", "testcase": false, "constructor": false}], "file": "xlog-base/src/main/java/com/promegu/xlog/base/MethodToLog.java"}, "focal_method": {"identifier": "matchMethodOrConstructor", "parameters": "(Member member)", "modifiers": "public", "return": "boolean", "body": "public boolean matchMethodOrConstructor(Member member) {\n        if (member instanceof Method) {\n            return matchMethod((Method) member);\n        } else if (member instanceof Constructor) {\n            return matchMethod((Constructor) member);\n        }\n        return false;\n    }", "signature": "boolean matchMethodOrConstructor(Member member)", "full_signature": "public boolean matchMethodOrConstructor(Member member)", "class_method_signature": "MethodToLog.matchMethodOrConstructor(Member member)", "testcase": false, "constructor": false, "invocations": ["matchMethod", "matchMethod"]}, "repository": {"repo_id": 32001142, "url": "https://github.com/promeG/XLog", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 309, "size": 790, "license": "licensed"}}