{"test_class": {"identifier": "CertificateLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "outland-feature-java/src/test/java/outland/feature/CertificateLoaderTest.java"}, "test_case": {"identifier": "resolvePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void resolvePath() throws IOException {\n    try {\n      CertificateLoader.resolvePath(\"classpath:cer\");\n      fail(\"exception expected for unknown classpath\");\n    } catch (Exception ignored) {\n    }\n\n    try {\n      CertificateLoader.resolvePath(\"file://woo\");\n      fail(\"exception expected for file uri component\");\n    } catch (Exception ignored) {\n    }\n\n    try {\n      CertificateLoader.resolvePath(\"file:///woo\");\n      fail(\"exception expected for missing path\");\n    } catch (Exception ignored) {\n    }\n\n    Path pathC = CertificateLoader.resolvePath(\"classpath:certs\");\n    assertTrue(pathC != null);\n\n    String fPath = \"file://\" + folder.newFolder().getAbsolutePath();\n    Path pathF = CertificateLoader.resolvePath(fPath);\n    assertTrue(pathF != null);\n  }", "signature": "void resolvePath()", "full_signature": "@Test public void resolvePath()", "class_method_signature": "CertificateLoaderTest.resolvePath()", "testcase": true, "constructor": false, "invocations": ["resolvePath", "fail", "resolvePath", "fail", "resolvePath", "fail", "resolvePath", "assertTrue", "getAbsolutePath", "newFolder", "resolvePath", "assertTrue"]}, "focal_class": {"identifier": "CertificateLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"FeatureClient\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"FeatureClient\")", "var_name": "logger"}, {"original_string": "private final String certificatePath;", "modifier": "private final", "type": "String", "declarator": "certificatePath", "var_name": "certificatePath"}, {"original_string": "private SSLContext sslContext;", "modifier": "private", "type": "SSLContext", "declarator": "sslContext", "var_name": "sslContext"}, {"original_string": "private X509TrustManager trustManager;", "modifier": "private", "type": "X509TrustManager", "declarator": "trustManager", "var_name": "trustManager"}], "methods": [{"identifier": "CertificateLoader", "parameters": "(String certificatePath)", "modifiers": "", "return": "", "signature": " CertificateLoader(String certificatePath)", "full_signature": "  CertificateLoader(String certificatePath)", "class_method_signature": "CertificateLoader.CertificateLoader(String certificatePath)", "testcase": false, "constructor": true}, {"identifier": "getResourceUrl", "parameters": "(String resourceName)", "modifiers": "private static", "return": "URL", "signature": "URL getResourceUrl(String resourceName)", "full_signature": "private static URL getResourceUrl(String resourceName)", "class_method_signature": "CertificateLoader.getResourceUrl(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "resolvePath", "parameters": "(String certificatePath)", "modifiers": "@VisibleForTesting static", "return": "Path", "signature": "Path resolvePath(String certificatePath)", "full_signature": "@VisibleForTesting static Path resolvePath(String certificatePath)", "class_method_signature": "CertificateLoader.resolvePath(String certificatePath)", "testcase": false, "constructor": false}, {"identifier": "applySslSocketFactory", "parameters": "(OkHttpClient.Builder builder)", "modifiers": "", "return": "void", "signature": "void applySslSocketFactory(OkHttpClient.Builder builder)", "full_signature": " void applySslSocketFactory(OkHttpClient.Builder builder)", "class_method_signature": "CertificateLoader.applySslSocketFactory(OkHttpClient.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String certificatePath)", "modifiers": "private", "return": "void", "signature": "void create(String certificatePath)", "full_signature": "private void create(String certificatePath)", "class_method_signature": "CertificateLoader.create(String certificatePath)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Path path)", "modifiers": "private", "return": "void", "signature": "void create(Path path)", "full_signature": "private void create(Path path)", "class_method_signature": "CertificateLoader.create(Path path)", "testcase": false, "constructor": false}, {"identifier": "installCertificates", "parameters": "(Path path, KeyStore keyStore)", "modifiers": "private", "return": "void", "signature": "void installCertificates(Path path, KeyStore keyStore)", "full_signature": "private void installCertificates(Path path, KeyStore keyStore)", "class_method_signature": "CertificateLoader.installCertificates(Path path, KeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "sslContext", "parameters": "()", "modifiers": "", "return": "SSLContext", "signature": "SSLContext sslContext()", "full_signature": " SSLContext sslContext()", "class_method_signature": "CertificateLoader.sslContext()", "testcase": false, "constructor": false}, {"identifier": "trustManager", "parameters": "()", "modifiers": "", "return": "X509TrustManager", "signature": "X509TrustManager trustManager()", "full_signature": " X509TrustManager trustManager()", "class_method_signature": "CertificateLoader.trustManager()", "testcase": false, "constructor": false}], "file": "outland-feature-java/src/main/java/outland/feature/CertificateLoader.java"}, "focal_method": {"identifier": "resolvePath", "parameters": "(String certificatePath)", "modifiers": "@VisibleForTesting static", "return": "Path", "body": "@VisibleForTesting\n  static Path resolvePath(String certificatePath) {\n    Path path;\n    if (certificatePath.startsWith(\"file:\")) {\n      try {\n        logger.info(\"using file resolver for {}\", certificatePath);\n        path = Paths.get(new URL(certificatePath).toURI());\n        if (!Files.exists(path)) {\n          throw new FileNotFoundException();\n        }\n        return path;\n      } catch (Exception e) {\n        throw new FeatureException(\n            Problem.localProblem(\"certificatePath resolver failed \" + certificatePath,\n                e.getMessage()), e);\n      }\n    }\n\n    if (certificatePath.startsWith(\"classpath:\")) {\n      logger.info(\"using classpath resolver for {}\", certificatePath);\n      String resource = getResourceUrl(\n          certificatePath.substring(\"classpath:\".length(), certificatePath.length())).getPath();\n      return Paths.get(resource);\n    }\n\n    throw new FeatureException(\n        Problem.localProblem(\n            \"certificatePath must start with file: or classpath: \" + certificatePath, \"\"));\n  }", "signature": "Path resolvePath(String certificatePath)", "full_signature": "@VisibleForTesting static Path resolvePath(String certificatePath)", "class_method_signature": "CertificateLoader.resolvePath(String certificatePath)", "testcase": false, "constructor": false, "invocations": ["startsWith", "info", "get", "toURI", "exists", "localProblem", "getMessage", "startsWith", "info", "getPath", "getResourceUrl", "substring", "length", "length", "get", "localProblem"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}