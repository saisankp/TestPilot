{"test_class": {"identifier": "SixMonthlyAprilPeriodTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DateTime startDate;", "modifier": "private", "type": "DateTime", "declarator": "startDate", "var_name": "startDate"}, {"original_string": "private DateTime endDate;", "modifier": "private", "type": "DateTime", "declarator": "endDate", "var_name": "endDate"}, {"original_string": "private DateTime testDate;", "modifier": "private", "type": "DateTime", "declarator": "testDate", "var_name": "testDate"}, {"original_string": "private SixMonthlyAprilPeriodType periodType;", "modifier": "private", "type": "SixMonthlyAprilPeriodType", "declarator": "periodType", "var_name": "periodType"}], "file": "dhis-2/dhis-api/src/test/java/org/hisp/dhis/period/SixMonthlyAprilPeriodTypeTest.java"}, "test_case": {"identifier": "testGetIsoDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetIsoDate()\n    {\n        testDate = new DateTime( 2015, 2, 1, 0 ,0 );\n        \n        startDate = new DateTime( 2014, 10, 1, 0 ,0 );\n        endDate = new DateTime( 2015, 3, 31, 0, 0 );\n        \n        Period period = periodType.createPeriod( testDate.toDate() );\n        \n        assertEquals( startDate.toDate(), period.getStartDate() );\n        assertEquals( endDate.toDate(), period.getEndDate() );\n    }", "signature": "void testGetIsoDate()", "full_signature": "@Test public void testGetIsoDate()", "class_method_signature": "SixMonthlyAprilPeriodTypeTest.testGetIsoDate()", "testcase": true, "constructor": false, "invocations": ["createPeriod", "toDate", "assertEquals", "toDate", "getStartDate", "assertEquals", "toDate", "getEndDate"]}, "focal_class": {"identifier": "SixMonthlyAprilPeriodType", "superclass": "extends SixMonthlyAbstractPeriodType", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -2770872821413382644L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2770872821413382644L", "var_name": "serialVersionUID"}, {"original_string": "private static final String ISO_FORMAT = \"yyyyAprilSn\";", "modifier": "private static final", "type": "String", "declarator": "ISO_FORMAT = \"yyyyAprilSn\"", "var_name": "ISO_FORMAT"}, {"original_string": "private static final String ISO8601_DURATION = \"P6M\";", "modifier": "private static final", "type": "String", "declarator": "ISO8601_DURATION = \"P6M\"", "var_name": "ISO8601_DURATION"}, {"original_string": "private static final int BASE_MONTH = DateTimeConstants.APRIL;", "modifier": "private static final", "type": "int", "declarator": "BASE_MONTH = DateTimeConstants.APRIL", "var_name": "BASE_MONTH"}, {"original_string": "public static final String NAME = \"SixMonthlyApril\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"SixMonthlyApril\"", "var_name": "NAME"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SixMonthlyAprilPeriodType.getName()", "testcase": false, "constructor": false}, {"identifier": "getBaseMonth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBaseMonth()", "full_signature": "@Override public int getBaseMonth()", "class_method_signature": "SixMonthlyAprilPeriodType.getBaseMonth()", "testcase": false, "constructor": false}, {"identifier": "getIsoDate", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "String", "signature": "String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "SixMonthlyAprilPeriodType.getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false}, {"identifier": "getIsoFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIsoFormat()", "full_signature": "@Override public String getIsoFormat()", "class_method_signature": "SixMonthlyAprilPeriodType.getIsoFormat()", "testcase": false, "constructor": false}, {"identifier": "getIso8601Duration", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getIso8601Duration()", "full_signature": "@Override public String getIso8601Duration()", "class_method_signature": "SixMonthlyAprilPeriodType.getIso8601Duration()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-api/src/main/java/org/hisp/dhis/period/SixMonthlyAprilPeriodType.java"}, "focal_method": {"identifier": "getIsoDate", "parameters": "( DateTimeUnit dateTimeUnit, Calendar calendar )", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )\n    {\n        int month = dateTimeUnit.getMonth();\n\n        if ( dateTimeUnit.isIso8601() )\n        {\n            month = calendar.fromIso( dateTimeUnit ).getMonth();\n        }\n\n        switch ( month )\n        {\n            case 4:\n                return dateTimeUnit.getYear() + \"AprilS1\";\n            case 10:\n                return dateTimeUnit.getYear() + \"AprilS2\";\n            default:\n                throw new IllegalArgumentException( \"Month not valid [4,10]\" );\n        }\n    }", "signature": "String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "full_signature": "@Override public String getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "class_method_signature": "SixMonthlyAprilPeriodType.getIsoDate( DateTimeUnit dateTimeUnit, Calendar calendar )", "testcase": false, "constructor": false, "invocations": ["getMonth", "isIso8601", "getMonth", "fromIso", "getYear", "getYear"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}