{"test_class": {"identifier": "FileCertRecordStoreConnectionTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/FileCertRecordStoreConnectionTest.java"}, "test_case": {"identifier": "testdeleteExpiredX509CertRecords", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testdeleteExpiredX509CertRecords() throws Exception {\n        \n        // make sure the directory does not exist\n\n        ZTSTestUtils.deleteDirectory(new File(\"/tmp/zts-cert-tests\"));\n\n        FileCertRecordStore store = new FileCertRecordStore(new File(\"/tmp/zts-cert-tests\"));\n        FileCertRecordStoreConnection con = (FileCertRecordStoreConnection) store.getConnection();\n        assertNotNull(con);\n        \n        X509CertRecord certRecord = new X509CertRecord();\n        Date now = new Date();\n\n        certRecord.setService(\"cn\");\n        certRecord.setProvider(\"ostk\");\n        certRecord.setInstanceId(\"instance-id\");\n        certRecord.setCurrentIP(\"current-ip\");\n        certRecord.setCurrentSerial(\"current-serial\");\n        certRecord.setCurrentTime(now);\n        certRecord.setPrevIP(\"prev-ip\");\n        certRecord.setPrevSerial(\"prev-serial\");\n        certRecord.setPrevTime(now);\n        \n        boolean result = con.insertX509CertRecord(certRecord);\n        assertTrue(result);\n        \n        X509CertRecord certRecordCheck = con.getX509CertRecord(\"ostk\", \"instance-id\", \"cn\");\n        assertNotNull(certRecordCheck);\n        \n        Thread.sleep(1000);\n        con.deleteExpiredX509CertRecords(0);\n\n        certRecordCheck = con.getX509CertRecord(\"ostk\", \"instance-id\", \"cn\");\n        assertNull(certRecordCheck);\n        con.close();\n    }", "signature": "void testdeleteExpiredX509CertRecords()", "full_signature": "@Test public void testdeleteExpiredX509CertRecords()", "class_method_signature": "FileCertRecordStoreConnectionTest.testdeleteExpiredX509CertRecords()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "getConnection", "assertNotNull", "setService", "setProvider", "setInstanceId", "setCurrentIP", "setCurrentSerial", "setCurrentTime", "setPrevIP", "setPrevSerial", "setPrevTime", "insertX509CertRecord", "assertTrue", "getX509CertRecord", "assertNotNull", "sleep", "deleteExpiredX509CertRecords", "getX509CertRecord", "assertNull", "close"]}, "focal_class": {"identifier": "FileCertRecordStoreConnection", "superclass": "", "interfaces": "implements CertRecordStoreConnection", "fields": [{"original_string": "File rootDir;", "modifier": "", "type": "File", "declarator": "rootDir", "var_name": "rootDir"}, {"original_string": "FilesHelper filesHelper;", "modifier": "", "type": "FilesHelper", "declarator": "filesHelper", "var_name": "filesHelper"}], "methods": [{"identifier": "FileCertRecordStoreConnection", "parameters": "(File rootDir)", "modifiers": "public", "return": "", "signature": " FileCertRecordStoreConnection(File rootDir)", "full_signature": "public  FileCertRecordStoreConnection(File rootDir)", "class_method_signature": "FileCertRecordStoreConnection.FileCertRecordStoreConnection(File rootDir)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileCertRecordStoreConnection.close()", "testcase": false, "constructor": false}, {"identifier": "setOperationTimeout", "parameters": "(int opTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int opTimeout)", "full_signature": "@Override public void setOperationTimeout(int opTimeout)", "class_method_signature": "FileCertRecordStoreConnection.setOperationTimeout(int opTimeout)", "testcase": false, "constructor": false}, {"identifier": "getX509CertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "@Override public", "return": "X509CertRecord", "signature": "X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "full_signature": "@Override public X509CertRecord getX509CertRecord(String provider, String instanceId, String service)", "class_method_signature": "FileCertRecordStoreConnection.getX509CertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "updateX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateX509CertRecord(X509CertRecord certRecord)", "full_signature": "@Override public boolean updateX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "FileCertRecordStoreConnection.updateX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "insertX509CertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean insertX509CertRecord(X509CertRecord certRecord)", "full_signature": "@Override public boolean insertX509CertRecord(X509CertRecord certRecord)", "class_method_signature": "FileCertRecordStoreConnection.insertX509CertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteX509CertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteX509CertRecord(String provider, String instanceId, String service)", "full_signature": "@Override public boolean deleteX509CertRecord(String provider, String instanceId, String service)", "class_method_signature": "FileCertRecordStoreConnection.deleteX509CertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "deleteExpiredX509CertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "signature": "int deleteExpiredX509CertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredX509CertRecords(int expiryTimeMins)", "class_method_signature": "FileCertRecordStoreConnection.deleteExpiredX509CertRecords(int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "updateUnrefreshedCertificatesNotificationTimestamp", "parameters": "(String lastNotifiedServer,\n                                                                                   long lastNotifiedTime,\n                                                                                   String provider)", "modifiers": "@Override public", "return": "List<X509CertRecord>", "signature": "List<X509CertRecord> updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                                   long lastNotifiedTime,\n                                                                                   String provider)", "full_signature": "@Override public List<X509CertRecord> updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                                   long lastNotifiedTime,\n                                                                                   String provider)", "class_method_signature": "FileCertRecordStoreConnection.updateUnrefreshedCertificatesNotificationTimestamp(String lastNotifiedServer,\n                                                                                   long lastNotifiedTime,\n                                                                                   String provider)", "testcase": false, "constructor": false}, {"identifier": "notExpired", "parameters": "(long currentTime, long lastModified, int expiryTimeMins)", "modifiers": "", "return": "boolean", "signature": "boolean notExpired(long currentTime, long lastModified, int expiryTimeMins)", "full_signature": " boolean notExpired(long currentTime, long lastModified, int expiryTimeMins)", "class_method_signature": "FileCertRecordStoreConnection.notExpired(long currentTime, long lastModified, int expiryTimeMins)", "testcase": false, "constructor": false}, {"identifier": "getRecordFileName", "parameters": "(final String provider, final String instanceId, final String service)", "modifiers": "private", "return": "String", "signature": "String getRecordFileName(final String provider, final String instanceId, final String service)", "full_signature": "private String getRecordFileName(final String provider, final String instanceId, final String service)", "class_method_signature": "FileCertRecordStoreConnection.getRecordFileName(final String provider, final String instanceId, final String service)", "testcase": false, "constructor": false}, {"identifier": "getCertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "private synchronized", "return": "X509CertRecord", "signature": "X509CertRecord getCertRecord(String provider, String instanceId, String service)", "full_signature": "private synchronized X509CertRecord getCertRecord(String provider, String instanceId, String service)", "class_method_signature": "FileCertRecordStoreConnection.getCertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}, {"identifier": "putCertRecord", "parameters": "(X509CertRecord certRecord)", "modifiers": "private synchronized", "return": "void", "signature": "void putCertRecord(X509CertRecord certRecord)", "full_signature": "private synchronized void putCertRecord(X509CertRecord certRecord)", "class_method_signature": "FileCertRecordStoreConnection.putCertRecord(X509CertRecord certRecord)", "testcase": false, "constructor": false}, {"identifier": "deleteCertRecord", "parameters": "(String provider, String instanceId, String service)", "modifiers": "private synchronized", "return": "void", "signature": "void deleteCertRecord(String provider, String instanceId, String service)", "full_signature": "private synchronized void deleteCertRecord(String provider, String instanceId, String service)", "class_method_signature": "FileCertRecordStoreConnection.deleteCertRecord(String provider, String instanceId, String service)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/FileCertRecordStoreConnection.java"}, "focal_method": {"identifier": "deleteExpiredX509CertRecords", "parameters": "(int expiryTimeMins)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int deleteExpiredX509CertRecords(int expiryTimeMins) {\n        String[] fnames = rootDir.list();\n        if (fnames == null) {\n            return 0;\n        }\n        long currentTime = System.currentTimeMillis();\n        int count = 0;\n        for (String fname : fnames) {\n            \n            // if the modification timestamp is older than\n            // specified number of minutes then we'll delete it\n            \n            File file = new File(rootDir, fname);\n            if (notExpired(currentTime, file.lastModified(), expiryTimeMins)) {\n                continue;\n            }\n            //noinspection ResultOfMethodCallIgnored\n            file.delete();\n            count += 1;\n        }\n        return count;\n    }", "signature": "int deleteExpiredX509CertRecords(int expiryTimeMins)", "full_signature": "@Override public int deleteExpiredX509CertRecords(int expiryTimeMins)", "class_method_signature": "FileCertRecordStoreConnection.deleteExpiredX509CertRecords(int expiryTimeMins)", "testcase": false, "constructor": false, "invocations": ["list", "currentTimeMillis", "notExpired", "lastModified", "delete"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}