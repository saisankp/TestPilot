{"test_class": {"identifier": "HibernateCollectionAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Server server;", "modifier": "private static", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private static Abdera abdera = Abdera.getInstance();", "modifier": "private static", "type": "Abdera", "declarator": "abdera = Abdera.getInstance()", "var_name": "abdera"}, {"original_string": "private static AbderaClient client = new AbderaClient();", "modifier": "private static", "type": "AbderaClient", "declarator": "client = new AbderaClient()", "var_name": "client"}], "file": "adapters/hibernate/src/test/java/org/apache/abdera/protocol/server/adapters/hibernate/HibernateCollectionAdapterTest.java"}, "test_case": {"identifier": "testGetFeed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetFeed() {\n\t\tClientResponse resp = client.get(\"http://localhost:9002/hibernate\");\n\t\tassertNotNull(resp);\n\t\tassertEquals(ResponseType.SUCCESS, resp.getType());\n\t    assertTrue(MimeTypeHelper.isMatch(resp.getContentType().toString(), Constants.ATOM_MEDIA_TYPE));\n\t    Document<Feed> doc = resp.getDocument();\n\t    Feed feed = doc.getRoot();\n\t    assertEquals(\"http://localhost:9002/hibernate\", feed.getId().toString());\t    \n\t    assertEquals(\"david\", feed.getAuthor().getName());\n\t    assertEquals(0, feed.getEntries().size());\n\t    resp.release();\t    \n\t}", "signature": "void testGetFeed()", "full_signature": "@Test public void testGetFeed()", "class_method_signature": "HibernateCollectionAdapterTest.testGetFeed()", "testcase": true, "constructor": false, "invocations": ["get", "assertNotNull", "assertEquals", "getType", "assertTrue", "isMatch", "toString", "getContentType", "getDocument", "getRoot", "assertEquals", "toString", "getId", "assertEquals", "getName", "getAuthor", "assertEquals", "size", "getEntries", "release"]}, "focal_class": {"identifier": "HibernateCollectionAdapter", "superclass": "extends BasicAdapter", "interfaces": "", "fields": [{"original_string": "private static Log logger = LogFactory.getLog(HibernateCollectionAdapter.class);", "modifier": "private static", "type": "Log", "declarator": "logger = LogFactory.getLog(HibernateCollectionAdapter.class)", "var_name": "logger"}, {"original_string": "protected static Configuration hibernateConfig;", "modifier": "protected static", "type": "Configuration", "declarator": "hibernateConfig", "var_name": "hibernateConfig"}, {"original_string": "protected static SessionFactory sessionFactory;", "modifier": "protected static", "type": "SessionFactory", "declarator": "sessionFactory", "var_name": "sessionFactory"}, {"original_string": "public static final String HIBERNATE_ANNOTATION_CONFIG = \"hibernateAnnotationConfig\";", "modifier": "public static final", "type": "String", "declarator": "HIBERNATE_ANNOTATION_CONFIG = \"hibernateAnnotationConfig\"", "var_name": "HIBERNATE_ANNOTATION_CONFIG"}, {"original_string": "public static final String HIBERNATE_CFG_PATH = \"hibernateCfgPath\";", "modifier": "public static final", "type": "String", "declarator": "HIBERNATE_CFG_PATH = \"hibernateCfgPath\"", "var_name": "HIBERNATE_CFG_PATH"}, {"original_string": "public static final String ENTRY_MAPPING_CLASS_NAME = \"entryMappingClassName\";", "modifier": "public static final", "type": "String", "declarator": "ENTRY_MAPPING_CLASS_NAME = \"entryMappingClassName\"", "var_name": "ENTRY_MAPPING_CLASS_NAME"}], "methods": [{"identifier": "HibernateCollectionAdapter", "parameters": "(Abdera abdera, FeedConfiguration config)", "modifiers": "public", "return": "", "signature": " HibernateCollectionAdapter(Abdera abdera, FeedConfiguration config)", "full_signature": "public  HibernateCollectionAdapter(Abdera abdera, FeedConfiguration config)", "class_method_signature": "HibernateCollectionAdapter.HibernateCollectionAdapter(Abdera abdera, FeedConfiguration config)", "testcase": false, "constructor": true}, {"identifier": "loadHibernateConfiguration", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadHibernateConfiguration()", "full_signature": "private void loadHibernateConfiguration()", "class_method_signature": "HibernateCollectionAdapter.loadHibernateConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getSessionFactory", "parameters": "()", "modifiers": "protected", "return": "SessionFactory", "signature": "SessionFactory getSessionFactory()", "full_signature": "protected SessionFactory getSessionFactory()", "class_method_signature": "HibernateCollectionAdapter.getSessionFactory()", "testcase": false, "constructor": false}, {"identifier": "rebuildSessionFactory", "parameters": "(Configuration cfg)", "modifiers": "private", "return": "void", "signature": "void rebuildSessionFactory(Configuration cfg)", "full_signature": "private void rebuildSessionFactory(Configuration cfg)", "class_method_signature": "HibernateCollectionAdapter.rebuildSessionFactory(Configuration cfg)", "testcase": false, "constructor": false}, {"identifier": "createEntry", "parameters": "(Entry entry)", "modifiers": "@Override public", "return": "Entry", "signature": "Entry createEntry(Entry entry)", "full_signature": "@Override public Entry createEntry(Entry entry)", "class_method_signature": "HibernateCollectionAdapter.createEntry(Entry entry)", "testcase": false, "constructor": false}, {"identifier": "deleteEntry", "parameters": "(Object entryId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteEntry(Object entryId)", "full_signature": "@Override public boolean deleteEntry(Object entryId)", "class_method_signature": "HibernateCollectionAdapter.deleteEntry(Object entryId)", "testcase": false, "constructor": false}, {"identifier": "getEntry", "parameters": "(Object entryId)", "modifiers": "@Override public", "return": "Entry", "signature": "Entry getEntry(Object entryId)", "full_signature": "@Override public Entry getEntry(Object entryId)", "class_method_signature": "HibernateCollectionAdapter.getEntry(Object entryId)", "testcase": false, "constructor": false}, {"identifier": "getFeed", "parameters": "()", "modifiers": "@Override public", "return": "Feed", "signature": "Feed getFeed()", "full_signature": "@Override public Feed getFeed()", "class_method_signature": "HibernateCollectionAdapter.getFeed()", "testcase": false, "constructor": false}, {"identifier": "updateEntry", "parameters": "(Object entryId, Entry entry)", "modifiers": "@Override public", "return": "Entry", "signature": "Entry updateEntry(Object entryId, Entry entry)", "full_signature": "@Override public Entry updateEntry(Object entryId, Entry entry)", "class_method_signature": "HibernateCollectionAdapter.updateEntry(Object entryId, Entry entry)", "testcase": false, "constructor": false}, {"identifier": "collectMappingObject", "parameters": "(Entry entry, Object forUpdate)", "modifiers": "protected", "return": "Object", "signature": "Object collectMappingObject(Entry entry, Object forUpdate)", "full_signature": "protected Object collectMappingObject(Entry entry, Object forUpdate)", "class_method_signature": "HibernateCollectionAdapter.collectMappingObject(Entry entry, Object forUpdate)", "testcase": false, "constructor": false}, {"identifier": "collectField", "parameters": "(Field field, Class clazz, Object mappingObject, Object entryValue)", "modifiers": "protected", "return": "void", "signature": "void collectField(Field field, Class clazz, Object mappingObject, Object entryValue)", "full_signature": "protected void collectField(Field field, Class clazz, Object mappingObject, Object entryValue)", "class_method_signature": "HibernateCollectionAdapter.collectField(Field field, Class clazz, Object mappingObject, Object entryValue)", "testcase": false, "constructor": false}, {"identifier": "getSetter", "parameters": "(String fieldName)", "modifiers": "protected", "return": "String", "signature": "String getSetter(String fieldName)", "full_signature": "protected String getSetter(String fieldName)", "class_method_signature": "HibernateCollectionAdapter.getSetter(String fieldName)", "testcase": false, "constructor": false}], "file": "adapters/hibernate/src/main/java/org/apache/abdera/protocol/server/adapters/hibernate/HibernateCollectionAdapter.java"}, "focal_method": {"identifier": "getFeed", "parameters": "()", "modifiers": "@Override public", "return": "Feed", "body": "@Override\n\tpublic Feed getFeed() throws Exception {\t\t\n\t\tSession session = getSessionFactory().openSession();\n\t\t\n\t\tString queryName = config.getFeedId() + \"-get-feed\";\t\t\n\t\tQuery query = session.getNamedQuery(queryName);\n\t\t\n\t\tFeed feed = createFeed();\n\t\tquery.setResultTransformer(new AtomEntryResultTransformer(\n\t\t\t\tconfig.getServerConfiguration().getServerUri() + \"/\" + config.getFeedId(), this.getAbdera(), feed));\n\t\tquery.list();\t\t\n\t\t\n\t\tsession.close();\n\t\treturn feed;\n\t}", "signature": "Feed getFeed()", "full_signature": "@Override public Feed getFeed()", "class_method_signature": "HibernateCollectionAdapter.getFeed()", "testcase": false, "constructor": false, "invocations": ["openSession", "getSessionFactory", "getFeedId", "getNamedQuery", "createFeed", "setResultTransformer", "getServerUri", "getServerConfiguration", "getFeedId", "getAbdera", "list", "close"]}, "repository": {"repo_id": 206482, "url": "https://github.com/apache/abdera", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 15, "size": 12255, "license": "licensed"}}