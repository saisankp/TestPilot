{"test_class": {"identifier": "TestOperationQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "public int count = 10000;", "modifier": "public", "type": "int", "declarator": "count = 10000", "var_name": "count"}], "file": "xenon-common/src/test/java/com/vmware/xenon/common/TestOperationQueue.java"}, "test_case": {"identifier": "transferAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void transferAll() {\n        OperationQueue q = OperationQueue.createFifo(this.count);\n        final String pragma = UUID.randomUUID().toString();\n        for (int i = 0; i < this.count; i++) {\n            Operation op = Operation.createPost(null).addPragmaDirective(pragma);\n            q.offer(op);\n        }\n\n        Collection<Operation> ops = new ArrayList<>(this.count);\n        q.transferAll(ops);\n        assertTrue(ops.size() == this.count);\n        assertTrue(q.isEmpty());\n        for (Operation op : ops) {\n            assertEquals(pragma, op.getRequestHeader(Operation.PRAGMA_HEADER));\n        }\n    }", "signature": "void transferAll()", "full_signature": "@Test public void transferAll()", "class_method_signature": "TestOperationQueue.transferAll()", "testcase": true, "constructor": false, "invocations": ["createFifo", "toString", "randomUUID", "addPragmaDirective", "createPost", "offer", "transferAll", "assertTrue", "size", "assertTrue", "isEmpty", "assertEquals", "getRequestHeader"]}, "focal_class": {"identifier": "OperationQueue", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int limit;", "modifier": "private", "type": "int", "declarator": "limit", "var_name": "limit"}, {"original_string": "private int elementCount;", "modifier": "private", "type": "int", "declarator": "elementCount", "var_name": "elementCount"}, {"original_string": "private Deque<Operation> store = new ConcurrentLinkedDeque<>();", "modifier": "private", "type": "Deque<Operation>", "declarator": "store = new ConcurrentLinkedDeque<>()", "var_name": "store"}], "methods": [{"identifier": "createFifo", "parameters": "(int limit)", "modifiers": "public static", "return": "OperationQueue", "signature": "OperationQueue createFifo(int limit)", "full_signature": "public static OperationQueue createFifo(int limit)", "class_method_signature": "OperationQueue.createFifo(int limit)", "testcase": false, "constructor": false}, {"identifier": "createLifo", "parameters": "(int limit)", "modifiers": "public static", "return": "OperationQueue", "signature": "OperationQueue createLifo(int limit)", "full_signature": "public static OperationQueue createLifo(int limit)", "class_method_signature": "OperationQueue.createLifo(int limit)", "testcase": false, "constructor": false}, {"identifier": "OperationQueue", "parameters": "()", "modifiers": "private", "return": "", "signature": " OperationQueue()", "full_signature": "private  OperationQueue()", "class_method_signature": "OperationQueue.OperationQueue()", "testcase": false, "constructor": true}, {"identifier": "getLimit", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLimit()", "full_signature": "public int getLimit()", "class_method_signature": "OperationQueue.getLimit()", "testcase": false, "constructor": false}, {"identifier": "setLimit", "parameters": "(int limit)", "modifiers": "public", "return": "void", "signature": "void setLimit(int limit)", "full_signature": "public void setLimit(int limit)", "class_method_signature": "OperationQueue.setLimit(int limit)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "OperationQueue.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Operation op)", "modifiers": "public", "return": "boolean", "signature": "boolean offer(Operation op)", "full_signature": "public boolean offer(Operation op)", "class_method_signature": "OperationQueue.offer(Operation op)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "()", "modifiers": "public", "return": "Operation", "signature": "Operation poll()", "full_signature": "public Operation poll()", "class_method_signature": "OperationQueue.poll()", "testcase": false, "constructor": false}, {"identifier": "toCollection", "parameters": "()", "modifiers": "", "return": "Collection<Operation>", "signature": "Collection<Operation> toCollection()", "full_signature": " Collection<Operation> toCollection()", "class_method_signature": "OperationQueue.toCollection()", "testcase": false, "constructor": false}, {"identifier": "transferAll", "parameters": "(Collection<Operation> pendingOps)", "modifiers": "public", "return": "void", "signature": "void transferAll(Collection<Operation> pendingOps)", "full_signature": "public void transferAll(Collection<Operation> pendingOps)", "class_method_signature": "OperationQueue.transferAll(Collection<Operation> pendingOps)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "OperationQueue.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "OperationQueue.size()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "public", "return": "Iterator<Operation>", "signature": "Iterator<Operation> iterator()", "full_signature": "public Iterator<Operation> iterator()", "class_method_signature": "OperationQueue.iterator()", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/OperationQueue.java"}, "focal_method": {"identifier": "transferAll", "parameters": "(Collection<Operation> pendingOps)", "modifiers": "public", "return": "void", "body": "public void transferAll(Collection<Operation> pendingOps) {\n        pendingOps.addAll(this.store);\n        this.store.clear();\n    }", "signature": "void transferAll(Collection<Operation> pendingOps)", "full_signature": "public void transferAll(Collection<Operation> pendingOps)", "class_method_signature": "OperationQueue.transferAll(Collection<Operation> pendingOps)", "testcase": false, "constructor": false, "invocations": ["addAll", "clear"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}