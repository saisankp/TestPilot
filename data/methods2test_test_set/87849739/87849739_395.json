{"test_class": {"identifier": "ScriptedIncomingMappingTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PAYLOAD = \"payload\";", "modifier": "private static final", "type": "String", "declarator": "PAYLOAD = \"payload\"", "var_name": "PAYLOAD"}, {"original_string": "private static final byte[] BYTES = PAYLOAD.getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "BYTES = PAYLOAD.getBytes()", "var_name": "BYTES"}], "file": "services/connectivity/mapping/src/test/java/org/eclipse/ditto/services/connectivity/mapping/javascript/ScriptedIncomingMappingTest.java"}, "test_case": {"identifier": "mapExternalMessageTextAndBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapExternalMessageTextAndBytes() {\n        final ExternalMessage externalMessage = ExternalMessageFactory\n                .newExternalMessageBuilder(new HashMap<>())\n                .withTextAndBytes(PAYLOAD, ByteBuffer.wrap(BYTES))\n                .build();\n\n        final NativeObject nativeObject = ScriptedIncomingMapping.mapExternalMessageToNativeObject(externalMessage);\n\n        final String textPayload = (String) nativeObject.get(\"textPayload\");\n        final NativeArrayBuffer bytePayload = (NativeArrayBuffer) nativeObject.get(\"bytePayload\");\n        assertThat(textPayload).isEqualTo(PAYLOAD);\n        assertThat(bytePayload.getBuffer()).isEqualTo(BYTES);\n    }", "signature": "void mapExternalMessageTextAndBytes()", "full_signature": "@Test public void mapExternalMessageTextAndBytes()", "class_method_signature": "ScriptedIncomingMappingTest.mapExternalMessageTextAndBytes()", "testcase": true, "constructor": false, "invocations": ["build", "withTextAndBytes", "newExternalMessageBuilder", "wrap", "mapExternalMessageToNativeObject", "get", "get", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "getBuffer"]}, "focal_class": {"identifier": "ScriptedIncomingMapping", "superclass": "", "interfaces": "implements MappingFunction<ExternalMessage, List<Adaptable>>", "fields": [{"original_string": "private static final String EXTERNAL_MESSAGE_HEADERS = \"headers\";", "modifier": "private static final", "type": "String", "declarator": "EXTERNAL_MESSAGE_HEADERS = \"headers\"", "var_name": "EXTERNAL_MESSAGE_HEADERS"}, {"original_string": "private static final String EXTERNAL_MESSAGE_CONTENT_TYPE = \"contentType\";", "modifier": "private static final", "type": "String", "declarator": "EXTERNAL_MESSAGE_CONTENT_TYPE = \"contentType\"", "var_name": "EXTERNAL_MESSAGE_CONTENT_TYPE"}, {"original_string": "private static final String EXTERNAL_MESSAGE_TEXT_PAYLOAD = \"textPayload\";", "modifier": "private static final", "type": "String", "declarator": "EXTERNAL_MESSAGE_TEXT_PAYLOAD = \"textPayload\"", "var_name": "EXTERNAL_MESSAGE_TEXT_PAYLOAD"}, {"original_string": "private static final String EXTERNAL_MESSAGE_BYTE_PAYLOAD = \"bytePayload\";", "modifier": "private static final", "type": "String", "declarator": "EXTERNAL_MESSAGE_BYTE_PAYLOAD = \"bytePayload\"", "var_name": "EXTERNAL_MESSAGE_BYTE_PAYLOAD"}, {"original_string": "private static final String INCOMING_FUNCTION_NAME = \"mapToDittoProtocolMsgWrapper\";", "modifier": "private static final", "type": "String", "declarator": "INCOMING_FUNCTION_NAME = \"mapToDittoProtocolMsgWrapper\"", "var_name": "INCOMING_FUNCTION_NAME"}, {"original_string": "@Nullable\n    private ContextFactory contextFactory;", "modifier": "@Nullable\n    private", "type": "ContextFactory", "declarator": "contextFactory", "var_name": "contextFactory"}, {"original_string": "@Nullable\n    private Scriptable scope;", "modifier": "@Nullable\n    private", "type": "Scriptable", "declarator": "scope", "var_name": "scope"}], "methods": [{"identifier": "ScriptedIncomingMapping", "parameters": "(@Nullable final ContextFactory contextFactory, @Nullable final Scriptable scope)", "modifiers": "", "return": "", "signature": " ScriptedIncomingMapping(@Nullable final ContextFactory contextFactory, @Nullable final Scriptable scope)", "full_signature": "  ScriptedIncomingMapping(@Nullable final ContextFactory contextFactory, @Nullable final Scriptable scope)", "class_method_signature": "ScriptedIncomingMapping.ScriptedIncomingMapping(@Nullable final ContextFactory contextFactory, @Nullable final Scriptable scope)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final ExternalMessage message)", "modifiers": "@Override public", "return": "List<Adaptable>", "signature": "List<Adaptable> apply(final ExternalMessage message)", "full_signature": "@Override public List<Adaptable> apply(final ExternalMessage message)", "class_method_signature": "ScriptedIncomingMapping.apply(final ExternalMessage message)", "testcase": false, "constructor": false}, {"identifier": "mapExternalMessageToNativeObject", "parameters": "(final ExternalMessage message)", "modifiers": "static", "return": "NativeObject", "signature": "NativeObject mapExternalMessageToNativeObject(final ExternalMessage message)", "full_signature": "static NativeObject mapExternalMessageToNativeObject(final ExternalMessage message)", "class_method_signature": "ScriptedIncomingMapping.mapExternalMessageToNativeObject(final ExternalMessage message)", "testcase": false, "constructor": false}, {"identifier": "getAdaptableFromObject", "parameters": "(final Context cx, final Object result)", "modifiers": "private", "return": "Adaptable", "signature": "Adaptable getAdaptableFromObject(final Context cx, final Object result)", "full_signature": "private Adaptable getAdaptableFromObject(final Context cx, final Object result)", "class_method_signature": "ScriptedIncomingMapping.getAdaptableFromObject(final Context cx, final Object result)", "testcase": false, "constructor": false}], "file": "services/connectivity/mapping/src/main/java/org/eclipse/ditto/services/connectivity/mapping/javascript/ScriptedIncomingMapping.java"}, "focal_method": {"identifier": "mapExternalMessageToNativeObject", "parameters": "(final ExternalMessage message)", "modifiers": "static", "return": "NativeObject", "body": "static NativeObject mapExternalMessageToNativeObject(final ExternalMessage message) {\n        final NativeObject headersObj = new NativeObject();\n        message.getHeaders().forEach((key, value) -> headersObj.put(key, headersObj, value));\n\n        final NativeArrayBuffer bytePayload =\n                message.getBytePayload()\n                        .map(bb -> {\n                            final NativeArrayBuffer nativeArrayBuffer = new NativeArrayBuffer(bb.remaining());\n                            bb.get(nativeArrayBuffer.getBuffer());\n                            return nativeArrayBuffer;\n                        })\n                        .orElse(null);\n\n        final String contentType = message.getHeaders().get(ExternalMessage.CONTENT_TYPE_HEADER);\n        final String textPayload = message.getTextPayload().orElse(null);\n\n        final NativeObject externalMessage = new NativeObject();\n        externalMessage.put(EXTERNAL_MESSAGE_HEADERS, externalMessage, headersObj);\n        externalMessage.put(EXTERNAL_MESSAGE_TEXT_PAYLOAD, externalMessage, textPayload);\n        externalMessage.put(EXTERNAL_MESSAGE_BYTE_PAYLOAD, externalMessage, bytePayload);\n        externalMessage.put(EXTERNAL_MESSAGE_CONTENT_TYPE, externalMessage, contentType);\n        return externalMessage;\n    }", "signature": "NativeObject mapExternalMessageToNativeObject(final ExternalMessage message)", "full_signature": "static NativeObject mapExternalMessageToNativeObject(final ExternalMessage message)", "class_method_signature": "ScriptedIncomingMapping.mapExternalMessageToNativeObject(final ExternalMessage message)", "testcase": false, "constructor": false, "invocations": ["forEach", "getHeaders", "put", "orElse", "map", "getBytePayload", "remaining", "get", "getBuffer", "get", "getHeaders", "orElse", "getTextPayload", "put", "put", "put", "put"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}