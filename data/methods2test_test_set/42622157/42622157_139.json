{"test_class": {"identifier": "ConfigurationBasedNamespaceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConfigurationBasedNamespaceManager configurationBasedNamespaceManager;", "modifier": "private", "type": "ConfigurationBasedNamespaceManager", "declarator": "configurationBasedNamespaceManager", "var_name": "configurationBasedNamespaceManager"}], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/backend/filebased/ConfigurationBasedNamespaceManagerTest.java"}, "test_case": {"identifier": "openToscaNodeTypesCorrectAtSecondCall", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void openToscaNodeTypesCorrectAtSecondCall() {\n        assertEquals(\"otntyIexample\", this.configurationBasedNamespaceManager.getPrefix(\"http://opentosca.org/nodetypes/example\"));\n        assertEquals(\"otntyIexample\", this.configurationBasedNamespaceManager.getPrefix(\"http://opentosca.org/nodetypes/example\"));\n    }", "signature": "void openToscaNodeTypesCorrectAtSecondCall()", "full_signature": "@Test public void openToscaNodeTypesCorrectAtSecondCall()", "class_method_signature": "ConfigurationBasedNamespaceManagerTest.openToscaNodeTypesCorrectAtSecondCall()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPrefix", "assertEquals", "getPrefix"]}, "focal_class": {"identifier": "ConfigurationBasedNamespaceManager", "superclass": "extends AbstractNamespaceManager", "interfaces": "", "fields": [{"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private Map<String, String> namespaceToPrefixMap = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "namespaceToPrefixMap = new HashMap<>()", "var_name": "namespaceToPrefixMap"}], "methods": [{"identifier": "ConfigurationBasedNamespaceManager", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "", "signature": " ConfigurationBasedNamespaceManager(Configuration configuration)", "full_signature": "public  ConfigurationBasedNamespaceManager(Configuration configuration)", "class_method_signature": "ConfigurationBasedNamespaceManager.ConfigurationBasedNamespaceManager(Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "getPrefix", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "String", "signature": "String getPrefix(String namespace)", "full_signature": "@Override public String getPrefix(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.getPrefix(String namespace)", "testcase": false, "constructor": false}, {"identifier": "hasPermanentProperties", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPermanentProperties(String namespace)", "full_signature": "@Override public boolean hasPermanentProperties(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.hasPermanentProperties(String namespace)", "testcase": false, "constructor": false}, {"identifier": "removeNamespaceProperties", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "void", "signature": "void removeNamespaceProperties(String namespace)", "full_signature": "@Override public void removeNamespaceProperties(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.removeNamespaceProperties(String namespace)", "testcase": false, "constructor": false}, {"identifier": "setNamespaceProperties", "parameters": "(String namespace, NamespaceProperties properties)", "modifiers": "@Override public", "return": "void", "signature": "void setNamespaceProperties(String namespace, NamespaceProperties properties)", "full_signature": "@Override public void setNamespaceProperties(String namespace, NamespaceProperties properties)", "class_method_signature": "ConfigurationBasedNamespaceManager.setNamespaceProperties(String namespace, NamespaceProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getAllPermanentPrefixes", "parameters": "()", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> getAllPermanentPrefixes()", "full_signature": "private Collection<String> getAllPermanentPrefixes()", "class_method_signature": "ConfigurationBasedNamespaceManager.getAllPermanentPrefixes()", "testcase": false, "constructor": false}, {"identifier": "getAllNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, NamespaceProperties>", "signature": "Map<String, NamespaceProperties> getAllNamespaces()", "full_signature": "@Override public Map<String, NamespaceProperties> getAllNamespaces()", "class_method_signature": "ConfigurationBasedNamespaceManager.getAllNamespaces()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ConfigurationBasedNamespaceManager.clear()", "testcase": false, "constructor": false}, {"identifier": "getAllPrefixes", "parameters": "(String namespace)", "modifiers": "@Override protected", "return": "Set<String>", "signature": "Set<String> getAllPrefixes(String namespace)", "full_signature": "@Override protected Set<String> getAllPrefixes(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.getAllPrefixes(String namespace)", "testcase": false, "constructor": false}, {"identifier": "addAllPermanent", "parameters": "(Collection<NamespaceProperties> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addAllPermanent(Collection<NamespaceProperties> properties)", "full_signature": "@Override public void addAllPermanent(Collection<NamespaceProperties> properties)", "class_method_signature": "ConfigurationBasedNamespaceManager.addAllPermanent(Collection<NamespaceProperties> properties)", "testcase": false, "constructor": false}, {"identifier": "replaceAll", "parameters": "(Map<String, NamespaceProperties> map)", "modifiers": "@Override public", "return": "void", "signature": "void replaceAll(Map<String, NamespaceProperties> map)", "full_signature": "@Override public void replaceAll(Map<String, NamespaceProperties> map)", "class_method_signature": "ConfigurationBasedNamespaceManager.replaceAll(Map<String, NamespaceProperties> map)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceProperties", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "NamespaceProperties", "signature": "NamespaceProperties getNamespaceProperties(String namespace)", "full_signature": "@Override public NamespaceProperties getNamespaceProperties(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.getNamespaceProperties(String namespace)", "testcase": false, "constructor": false}, {"identifier": "isPatternNamespace", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPatternNamespace(String namespace)", "full_signature": "@Override public boolean isPatternNamespace(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.isPatternNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "isSecureCollection", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSecureCollection(String namespace)", "full_signature": "@Override public boolean isSecureCollection(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.isSecureCollection(String namespace)", "testcase": false, "constructor": false}, {"identifier": "isGeneratedNamespace", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isGeneratedNamespace(String namespace)", "full_signature": "@Override public boolean isGeneratedNamespace(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.isGeneratedNamespace(String namespace)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/filebased/ConfigurationBasedNamespaceManager.java"}, "focal_method": {"identifier": "getPrefix", "parameters": "(String namespace)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getPrefix(String namespace) {\n        if (namespace == null) {\n            namespace = \"\";\n        }\n\n        // configuration stores the permanent mapping\n        // this has precedence\n        String prefix = configuration.getString(namespace);\n        if (prefix == null || prefix.isEmpty()) {\n            // in case no permanent mapping is found - or the prefix is invalid, check the in-memory ones\n            prefix = this.namespaceToPrefixMap.get(namespace);\n            if (prefix == null) {\n                prefix = this.generatePrefix(namespace);\n                this.namespaceToPrefixMap.put(namespace, prefix);\n            }\n        }\n        return prefix;\n    }", "signature": "String getPrefix(String namespace)", "full_signature": "@Override public String getPrefix(String namespace)", "class_method_signature": "ConfigurationBasedNamespaceManager.getPrefix(String namespace)", "testcase": false, "constructor": false, "invocations": ["getString", "isEmpty", "get", "generatePrefix", "put"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}