{"test_class": {"identifier": "TrackAbbrvTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/tracks/TrackAbbrvTest.java"}, "test_case": {"identifier": "abbreviate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void abbreviate() throws IOException {\n        File in = FileUtil.makeFileGz(\"time,sensor,x,y,z\\n,gps,1,2,3\\n,alt,4,5,6\\n,grv,7,8,9\");\n        File out = File.createTempFile(\"abbrv-out\", \".csv\");\n        TrackAbbrv.abbreviate(in, out);\n        assertEquals(40, out.length());\n    }", "signature": "void abbreviate()", "full_signature": "@Test public void abbreviate()", "class_method_signature": "TrackAbbrvTest.abbreviate()", "testcase": true, "constructor": false, "invocations": ["makeFileGz", "createTempFile", "abbreviate", "assertEquals", "length"]}, "focal_class": {"identifier": "TrackAbbrv", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"TrackAbbrv\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"TrackAbbrv\"", "var_name": "TAG"}], "methods": [{"identifier": "abbreviate", "parameters": "(@NonNull File trackFileGz, @NonNull File abbrvFile)", "modifiers": "public static", "return": "void", "signature": "void abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile)", "full_signature": "public static void abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile)", "class_method_signature": "TrackAbbrv.abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/tracks/TrackAbbrv.java"}, "focal_method": {"identifier": "abbreviate", "parameters": "(@NonNull File trackFileGz, @NonNull File abbrvFile)", "modifiers": "public static", "return": "void", "body": "public static void abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile) {\n        final long startTime = System.currentTimeMillis();\n        // Read file line by line\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(trackFileGz)), StandardCharsets.UTF_8))) {\n            try (FileWriter writer = new FileWriter(abbrvFile)) {\n                boolean firstLine = true;\n                String line;\n\n                while ((line = br.readLine()) != null) {\n                    if (firstLine) {\n                        firstLine = false;\n                        writer.write(line);\n                        writer.write('\\n');\n                    } else if (!line.contains(\",grv,\") && !line.contains(\",rot,\") && !line.contains(\",acc,\")) {\n                        // Write alt and gps only\n                        writer.write(line);\n                        writer.write('\\n');\n                    }\n                }\n            }\n        } catch (EOFException e) {\n            // Still error but less verbose\n            Log.e(TAG, \"Premature end of gzip track file \" + trackFileGz + \" to \" + abbrvFile + \"\\n\" + e);\n        } catch (IOException e) {\n            Log.e(TAG, \"Error abbreviated track data from \" + trackFileGz + \" to \" + abbrvFile, e);\n        }\n        Log.i(TAG, \"Abbreviated track \" + (trackFileGz.length() >> 10) + \"kb -> \" + (abbrvFile.length() >> 10) + \"kb in \" + (System.currentTimeMillis() - startTime) + \"ms\");\n    }", "signature": "void abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile)", "full_signature": "public static void abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile)", "class_method_signature": "TrackAbbrv.abbreviate(@NonNull File trackFileGz, @NonNull File abbrvFile)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "readLine", "write", "write", "contains", "contains", "contains", "write", "write", "e", "e", "i", "length", "length", "currentTimeMillis"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}