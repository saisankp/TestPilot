{"test_class": {"identifier": "ValuesInSIUnitsTest", "superclass": "", "interfaces": "implements UtilityClassTest", "fields": [{"original_string": "private static final double TOLERANCE = 1e-12;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 1e-12", "var_name": "TOLERANCE"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/physics/units/ValuesInSIUnitsTest.java"}, "test_case": {"identifier": "convertAcceleration_whenValueGetsLarger_thenPrecisionIsMaintained", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void convertAcceleration_whenValueGetsLarger_thenPrecisionIsMaintained() {\n        double mmPerMsAcceleration = 1.31211;\n        double siSpeed = mmPerMsAcceleration * 1000 * 1000 / 1000;\n        assertThat(ValuesInSIUnits.convertAcceleration(mmPerMsAcceleration, LengthUnit.MILLIMETERS, TimeUnit.MILLISECONDS)).isCloseTo(siSpeed, withinPercentage(TOLERANCE));\n    }", "signature": "void convertAcceleration_whenValueGetsLarger_thenPrecisionIsMaintained()", "full_signature": "@Test void convertAcceleration_whenValueGetsLarger_thenPrecisionIsMaintained()", "class_method_signature": "ValuesInSIUnitsTest.convertAcceleration_whenValueGetsLarger_thenPrecisionIsMaintained()", "testcase": true, "constructor": false, "invocations": ["isCloseTo", "assertThat", "convertAcceleration", "withinPercentage"]}, "focal_class": {"identifier": "ValuesInSIUnits", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NANOS_IN_SECOND = TimeUnit.NANOSECONDS.convert(1, TimeUnit.SECONDS);", "modifier": "private static final", "type": "long", "declarator": "NANOS_IN_SECOND = TimeUnit.NANOSECONDS.convert(1, TimeUnit.SECONDS)", "var_name": "NANOS_IN_SECOND"}], "methods": [{"identifier": "ValuesInSIUnits", "parameters": "()", "modifiers": "private", "return": "", "signature": " ValuesInSIUnits()", "full_signature": "private  ValuesInSIUnits()", "class_method_signature": "ValuesInSIUnits.ValuesInSIUnits()", "testcase": false, "constructor": true}, {"identifier": "convertDuration", "parameters": "(double duration, TimeUnit sourceUnit)", "modifiers": "public static", "return": "double", "signature": "double convertDuration(double duration, TimeUnit sourceUnit)", "full_signature": "public static double convertDuration(double duration, TimeUnit sourceUnit)", "class_method_signature": "ValuesInSIUnits.convertDuration(double duration, TimeUnit sourceUnit)", "testcase": false, "constructor": false}, {"identifier": "convertSpeed", "parameters": "(double speed, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "modifiers": "public static", "return": "double", "signature": "double convertSpeed(double speed, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "full_signature": "public static double convertSpeed(double speed, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "class_method_signature": "ValuesInSIUnits.convertSpeed(double speed, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "testcase": false, "constructor": false}, {"identifier": "convertAcceleration", "parameters": "(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "modifiers": "public static", "return": "double", "signature": "double convertAcceleration(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "full_signature": "public static double convertAcceleration(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "class_method_signature": "ValuesInSIUnits.convertAcceleration(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "testcase": false, "constructor": false}, {"identifier": "convertJerk", "parameters": "(double jerk, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "modifiers": "public static", "return": "double", "signature": "double convertJerk(double jerk, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "full_signature": "public static double convertJerk(double jerk, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "class_method_signature": "ValuesInSIUnits.convertJerk(double jerk, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "testcase": false, "constructor": false}, {"identifier": "getTimeUnitAsSeconds", "parameters": "(TimeUnit unit)", "modifiers": "private static", "return": "double", "signature": "double getTimeUnitAsSeconds(TimeUnit unit)", "full_signature": "private static double getTimeUnitAsSeconds(TimeUnit unit)", "class_method_signature": "ValuesInSIUnits.getTimeUnitAsSeconds(TimeUnit unit)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/physics/units/ValuesInSIUnits.java"}, "focal_method": {"identifier": "convertAcceleration", "parameters": "(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "modifiers": "public static", "return": "double", "body": "public static double convertAcceleration(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit) {\n        return acceleration * LengthUnit.METERS.getUnitsIn(sourceLengthUnit) / Math.pow(getTimeUnitAsSeconds(sourceTimeUnit), 2);\n    }", "signature": "double convertAcceleration(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "full_signature": "public static double convertAcceleration(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "class_method_signature": "ValuesInSIUnits.convertAcceleration(double acceleration, LengthUnit sourceLengthUnit, TimeUnit sourceTimeUnit)", "testcase": false, "constructor": false, "invocations": ["getUnitsIn", "pow", "getTimeUnitAsSeconds"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}