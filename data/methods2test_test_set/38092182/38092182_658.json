{"test_class": {"identifier": "ImageDiskTaskManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private TaskManagerListener<Bitmap> imageTaskManagerListener;", "modifier": "@Mock private", "type": "TaskManagerListener<Bitmap>", "declarator": "imageTaskManagerListener", "var_name": "imageTaskManagerListener"}, {"original_string": "private Semaphore semaphore;", "modifier": "private", "type": "Semaphore", "declarator": "semaphore", "var_name": "semaphore"}, {"original_string": "private Map<String, Bitmap> bitmaps;", "modifier": "private", "type": "Map<String, Bitmap>", "declarator": "bitmaps", "var_name": "bitmaps"}, {"original_string": "private FakeHttpLayer fakeHttpLayer;", "modifier": "private", "type": "FakeHttpLayer", "declarator": "fakeHttpLayer", "var_name": "fakeHttpLayer"}, {"original_string": "private String url1;", "modifier": "private", "type": "String", "declarator": "url1", "var_name": "url1"}, {"original_string": "private String url2;", "modifier": "private", "type": "String", "declarator": "url2", "var_name": "url2"}, {"original_string": "private String url3;", "modifier": "private", "type": "String", "declarator": "url3", "var_name": "url3"}, {"original_string": "private String imageData1;", "modifier": "private", "type": "String", "declarator": "imageData1", "var_name": "imageData1"}, {"original_string": "private String imageData2;", "modifier": "private", "type": "String", "declarator": "imageData2", "var_name": "imageData2"}, {"original_string": "private String imageData3;", "modifier": "private", "type": "String", "declarator": "imageData3", "var_name": "imageData3"}, {"original_string": "private List<String> list;", "modifier": "private", "type": "List<String>", "declarator": "list", "var_name": "list"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private static final int TEST_WIDTH = 400;", "modifier": "private static final", "type": "int", "declarator": "TEST_WIDTH = 400", "var_name": "TEST_WIDTH"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/nativeads/ImageDiskTaskManagerTest.java"}, "test_case": {"identifier": "execute_withPartiallyPopulatedDiskCache_shouldReturnSomeImagesInMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void execute_withPartiallyPopulatedDiskCache_shouldReturnSomeImagesInMap() throws Exception {\n        CacheService.initialize(context);\n        CacheServiceTest.assertCachesAreEmpty();\n        CacheService.putToDiskCache(url1, imageData1.getBytes());\n\n        new ImageDiskTaskManager(list, imageTaskManagerListener, TEST_WIDTH).execute();\n        semaphore.acquire();\n\n        assertThat(bitmaps.size()).isEqualTo(2);\n        assertThat(bitmaps.get(url1)).isNotNull();\n        assertThat(bitmaps.containsKey(url2)).isTrue();\n        assertThat(bitmaps.get(url2)).isNull();\n    }", "signature": "void execute_withPartiallyPopulatedDiskCache_shouldReturnSomeImagesInMap()", "full_signature": "@Test public void execute_withPartiallyPopulatedDiskCache_shouldReturnSomeImagesInMap()", "class_method_signature": "ImageDiskTaskManagerTest.execute_withPartiallyPopulatedDiskCache_shouldReturnSomeImagesInMap()", "testcase": true, "constructor": false, "invocations": ["initialize", "assertCachesAreEmpty", "putToDiskCache", "getBytes", "execute", "acquire", "isEqualTo", "assertThat", "size", "isNotNull", "assertThat", "get", "isTrue", "assertThat", "containsKey", "isNull", "assertThat", "get"]}, "focal_class": {"identifier": "ImageDiskTaskManager", "superclass": "extends TaskManager<Bitmap>", "interfaces": "", "fields": [{"original_string": "@NonNull private final List<String> mUrls;", "modifier": "@NonNull private final", "type": "List<String>", "declarator": "mUrls", "var_name": "mUrls"}, {"original_string": "private final int mMaxImageWidth;", "modifier": "private final", "type": "int", "declarator": "mMaxImageWidth", "var_name": "mMaxImageWidth"}], "methods": [{"identifier": "ImageDiskTaskManager", "parameters": "(@NonNull final List<String> urls,\n            @NonNull final TaskManagerListener<Bitmap> imageTaskManagerListener,\n            final int maxImageWidth)", "modifiers": "", "return": "", "signature": " ImageDiskTaskManager(@NonNull final List<String> urls,\n            @NonNull final TaskManagerListener<Bitmap> imageTaskManagerListener,\n            final int maxImageWidth)", "full_signature": "  ImageDiskTaskManager(@NonNull final List<String> urls,\n            @NonNull final TaskManagerListener<Bitmap> imageTaskManagerListener,\n            final int maxImageWidth)", "class_method_signature": "ImageDiskTaskManager.ImageDiskTaskManager(@NonNull final List<String> urls,\n            @NonNull final TaskManagerListener<Bitmap> imageTaskManagerListener,\n            final int maxImageWidth)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override", "return": "void", "signature": "void execute()", "full_signature": "@Override void execute()", "class_method_signature": "ImageDiskTaskManager.execute()", "testcase": false, "constructor": false}, {"identifier": "failAllTasks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void failAllTasks()", "full_signature": " void failAllTasks()", "class_method_signature": "ImageDiskTaskManager.failAllTasks()", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override", "return": "void", "body": "@Override\n    void execute() {\n        if (mUrls.isEmpty()) {\n            mImageTaskManagerListener.onSuccess(mResults);\n        }\n\n        ImageDiskTaskListener imageDiskTaskListener = new ImageDiskTaskListener(mMaxImageWidth);\n        for (final String url : mUrls) {\n            CacheService.getFromDiskCacheAsync(url, imageDiskTaskListener);\n        }\n    }", "signature": "void execute()", "full_signature": "@Override void execute()", "class_method_signature": "ImageDiskTaskManager.execute()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "onSuccess", "getFromDiskCacheAsync"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}