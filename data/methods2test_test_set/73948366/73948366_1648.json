{"test_class": {"identifier": "RoleMemberReviewNotificationTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/notification/RoleMemberReviewNotificationTaskTest.java"}, "test_case": {"identifier": "testSendRoleMemberReviewReminders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendRoleMemberReviewReminders() {\n\n        DBService dbsvc = Mockito.mock(DBService.class);\n        NotificationService mockNotificationService =  Mockito.mock(NotificationService.class);\n        NotificationServiceFactory testfact = () -> mockNotificationService;\n\n        List<MemberRole> memberRoles = new ArrayList<>();\n        memberRoles.add(new MemberRole().setRoleName(\"role1\")\n                .setDomainName(\"athenz1\")\n                .setMemberName(\"user.joe\")\n                .setReviewReminder(Timestamp.fromMillis(100)));\n        DomainRoleMember domainRoleMember = new DomainRoleMember()\n                .setMemberName(\"user.joe\")\n                .setMemberRoles(memberRoles);\n        Map<String, DomainRoleMember> reviewMembers = new HashMap<>();\n        reviewMembers.put(\"user.joe\", domainRoleMember);\n\n        // we're going to return null for our first thread which will\n        // run during init call and then the real data for the second\n        // call\n\n        Mockito.when(dbsvc.getRoleReviewMembers(1))\n                .thenReturn(null)\n                .thenReturn(reviewMembers);\n\n        NotificationManager notificationManager = getNotificationManager(dbsvc, testfact);\n\n        ZMSTestUtils.sleep(1000);\n\n        AthenzDomain domain = new AthenzDomain(\"athenz1\");\n        List<RoleMember> roleMembers = new ArrayList<>();\n        roleMembers.add(new RoleMember().setMemberName(\"user.jane\"));\n        Role adminRole = new Role()\n                .setName(\"athenz1:role.admin\")\n                .setRoleMembers(roleMembers);\n        List<Role> roles = new ArrayList<>();\n        roles.add(adminRole);\n        domain.setRoles(roles);\n\n        Mockito.when(dbsvc.getRolesByDomain(\"athenz1\")).thenReturn(domain.getRoles());\n\n        List<Notification> notifications = new RoleMemberReviewNotificationTask(dbsvc, USER_DOMAIN_PREFIX).getNotifications();\n\n        // we should get 2 notifications - one for user and one for domain\n        assertEquals(notifications.size(), 2);\n\n        // Verify contents of notifications is as expected\n        Notification expectedFirstNotification = new Notification();\n        expectedFirstNotification.addRecipient(\"user.joe\");\n        expectedFirstNotification.addDetails(NOTIFICATION_DETAILS_ROLES_LIST, \"athenz1;role1;1970-01-01T00:00:00.100Z\");\n        expectedFirstNotification.addDetails(\"member\", \"user.joe\");\n        expectedFirstNotification.setNotificationToEmailConverter(new RoleMemberReviewNotificationTask.RoleReviewPrincipalNotificationToEmailConverter());\n        expectedFirstNotification.setType(\"role_membership_review\");\n\n        Notification expectedSecondNotification = new Notification();\n        expectedSecondNotification.addRecipient(\"user.jane\");\n        expectedSecondNotification.addDetails(NOTIFICATION_DETAILS_MEMBERS_LIST, \"user.joe;role1;1970-01-01T00:00:00.100Z\");\n        expectedSecondNotification.addDetails(\"domain\", \"athenz1\");\n        expectedSecondNotification.setNotificationToEmailConverter(new RoleMemberReviewNotificationTask.RoleReviewDomainNotificationToEmailConverter());\n        expectedSecondNotification.setType(\"role_membership_review\");\n\n        assertEquals(notifications.get(0), expectedFirstNotification);\n        assertEquals(notifications.get(1), expectedSecondNotification);\n\n        notificationManager.shutdown();\n    }", "signature": "void testSendRoleMemberReviewReminders()", "full_signature": "@Test public void testSendRoleMemberReviewReminders()", "class_method_signature": "RoleMemberReviewNotificationTaskTest.testSendRoleMemberReviewReminders()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "add", "setReviewReminder", "setMemberName", "setDomainName", "setRoleName", "fromMillis", "setMemberRoles", "setMemberName", "put", "thenReturn", "thenReturn", "when", "getRoleReviewMembers", "getNotificationManager", "sleep", "add", "setMemberName", "setRoleMembers", "setName", "add", "setRoles", "thenReturn", "when", "getRolesByDomain", "getRoles", "getNotifications", "assertEquals", "size", "addRecipient", "addDetails", "addDetails", "setNotificationToEmailConverter", "setType", "addRecipient", "addDetails", "addDetails", "setNotificationToEmailConverter", "setType", "assertEquals", "get", "assertEquals", "get", "shutdown"]}, "focal_class": {"identifier": "RoleMemberReviewNotificationTask", "superclass": "", "interfaces": "implements NotificationTask", "fields": [{"original_string": "private final DBService dbService;", "modifier": "private final", "type": "DBService", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "private final RoleMemberNotificationCommon roleMemberNotificationCommon;", "modifier": "private final", "type": "RoleMemberNotificationCommon", "declarator": "roleMemberNotificationCommon", "var_name": "roleMemberNotificationCommon"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RoleMemberReviewNotificationTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RoleMemberReviewNotificationTask.class)", "var_name": "LOGGER"}, {"original_string": "private final static String DESCRIPTION = \"Periodic Review Reminder\";", "modifier": "private final static", "type": "String", "declarator": "DESCRIPTION = \"Periodic Review Reminder\"", "var_name": "DESCRIPTION"}, {"original_string": "private final static String NOTIFICATION_TYPE = \"role_membership_review\";", "modifier": "private final static", "type": "String", "declarator": "NOTIFICATION_TYPE = \"role_membership_review\"", "var_name": "NOTIFICATION_TYPE"}, {"original_string": "private final RoleReviewPrincipalNotificationToEmailConverter roleReviewPrincipalNotificationToEmailConverter;", "modifier": "private final", "type": "RoleReviewPrincipalNotificationToEmailConverter", "declarator": "roleReviewPrincipalNotificationToEmailConverter", "var_name": "roleReviewPrincipalNotificationToEmailConverter"}, {"original_string": "private final RoleReviewDomainNotificationToEmailConverter roleReviewDomainNotificationToEmailConverter;", "modifier": "private final", "type": "RoleReviewDomainNotificationToEmailConverter", "declarator": "roleReviewDomainNotificationToEmailConverter", "var_name": "roleReviewDomainNotificationToEmailConverter"}], "methods": [{"identifier": "RoleMemberReviewNotificationTask", "parameters": "(DBService dbService, String userDomainPrefix)", "modifiers": "public", "return": "", "signature": " RoleMemberReviewNotificationTask(DBService dbService, String userDomainPrefix)", "full_signature": "public  RoleMemberReviewNotificationTask(DBService dbService, String userDomainPrefix)", "class_method_signature": "RoleMemberReviewNotificationTask.RoleMemberReviewNotificationTask(DBService dbService, String userDomainPrefix)", "testcase": false, "constructor": true}, {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "RoleMemberReviewNotificationTask.getNotifications()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "RoleMemberReviewNotificationTask.getDescription()", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/notification/RoleMemberReviewNotificationTask.java"}, "focal_method": {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "body": "@Override\n    public List<Notification> getNotifications() {\n        Map<String, DomainRoleMember> reviewMembers = dbService.getRoleReviewMembers(1);\n        if (reviewMembers == null || reviewMembers.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"No members require review reminders\");\n            }\n            return new ArrayList<>();\n        }\n\n        return roleMemberNotificationCommon.getNotificationDetails(\n                reviewMembers,\n                roleReviewPrincipalNotificationToEmailConverter,\n                roleReviewDomainNotificationToEmailConverter,\n                new ReviewRoleMemberDetailStringer(),\n                NOTIFICATION_TYPE);\n    }", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "RoleMemberReviewNotificationTask.getNotifications()", "testcase": false, "constructor": false, "invocations": ["getRoleReviewMembers", "isEmpty", "isDebugEnabled", "debug", "getNotificationDetails"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}