{"test_class": {"identifier": "CpuMonitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeTimer myTimer = new FakeTimer();", "modifier": "private final", "type": "FakeTimer", "declarator": "myTimer = new FakeTimer()", "var_name": "myTimer"}, {"original_string": "@Rule\n  public FakeGrpcChannel myGrpcChannel =\n    new FakeGrpcChannel(\"CpuMonitorTestChannel\", new FakeCpuService(), new FakeTransportService(myTimer), new FakeProfilerService(myTimer));", "modifier": "@Rule\n  public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel =\n    new FakeGrpcChannel(\"CpuMonitorTestChannel\", new FakeCpuService(), new FakeTransportService(myTimer), new FakeProfilerService(myTimer))", "var_name": "myGrpcChannel"}], "file": "profilers/testSrc/com/android/tools/profilers/cpu/CpuMonitorTest.java"}, "test_case": {"identifier": "testExpand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExpand() {\n    StudioProfilers profilers = new StudioProfilers(new ProfilerClient(myGrpcChannel.getName()), new FakeIdeProfilerServices(), myTimer);\n    CpuMonitor monitor = new CpuMonitor(profilers);\n    assertEquals(profilers.getStage().getClass(), NullMonitorStage.class);\n    // One second must be enough for new devices (and processes) to be picked up\n    myTimer.tick(FakeTimer.ONE_SECOND_IN_NS);\n    monitor.expand();\n    assertThat(profilers.getStage(), instanceOf(CpuProfilerStage.class));\n  }", "signature": "void testExpand()", "full_signature": "@Test public void testExpand()", "class_method_signature": "CpuMonitorTest.testExpand()", "testcase": true, "constructor": false, "invocations": ["getName", "assertEquals", "getClass", "getStage", "tick", "expand", "assertThat", "getStage", "instanceOf"]}, "focal_class": {"identifier": "CpuMonitor", "superclass": "extends ProfilerMonitor", "interfaces": "", "fields": [{"original_string": "private static final SingleUnitAxisFormatter CPU_USAGE_FORMATTER = new SingleUnitAxisFormatter(1, 2, 10, \"%\");", "modifier": "private static final", "type": "SingleUnitAxisFormatter", "declarator": "CPU_USAGE_FORMATTER = new SingleUnitAxisFormatter(1, 2, 10, \"%\")", "var_name": "CPU_USAGE_FORMATTER"}, {"original_string": "@NotNull private final CpuUsage myThisProcessCpuUsage;", "modifier": "@NotNull private final", "type": "CpuUsage", "declarator": "myThisProcessCpuUsage", "var_name": "myThisProcessCpuUsage"}, {"original_string": "@NotNull private final ClampedAxisComponentModel myCpuUsageAxis;", "modifier": "@NotNull private final", "type": "ClampedAxisComponentModel", "declarator": "myCpuUsageAxis", "var_name": "myCpuUsageAxis"}, {"original_string": "@NotNull private final Legends myLegends;", "modifier": "@NotNull private final", "type": "Legends", "declarator": "myLegends", "var_name": "myLegends"}, {"original_string": "@NotNull private final Legends myTooltipLegends;", "modifier": "@NotNull private final", "type": "Legends", "declarator": "myTooltipLegends", "var_name": "myTooltipLegends"}], "methods": [{"identifier": "CpuMonitor", "parameters": "(@NotNull StudioProfilers profilers)", "modifiers": "public", "return": "", "signature": " CpuMonitor(@NotNull StudioProfilers profilers)", "full_signature": "public  CpuMonitor(@NotNull StudioProfilers profilers)", "class_method_signature": "CpuMonitor.CpuMonitor(@NotNull StudioProfilers profilers)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CpuMonitor.getName()", "testcase": false, "constructor": false}, {"identifier": "buildTooltip", "parameters": "()", "modifiers": "@Override public", "return": "TooltipModel", "signature": "TooltipModel buildTooltip()", "full_signature": "@Override public TooltipModel buildTooltip()", "class_method_signature": "CpuMonitor.buildTooltip()", "testcase": false, "constructor": false}, {"identifier": "exit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void exit()", "full_signature": "@Override public void exit()", "class_method_signature": "CpuMonitor.exit()", "testcase": false, "constructor": false}, {"identifier": "enter", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void enter()", "full_signature": "@Override public void enter()", "class_method_signature": "CpuMonitor.enter()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void expand()", "full_signature": "@Override public void expand()", "class_method_signature": "CpuMonitor.expand()", "testcase": false, "constructor": false}, {"identifier": "getCpuUsageAxis", "parameters": "()", "modifiers": "@NotNull public", "return": "AxisComponentModel", "signature": "AxisComponentModel getCpuUsageAxis()", "full_signature": "@NotNull public AxisComponentModel getCpuUsageAxis()", "class_method_signature": "CpuMonitor.getCpuUsageAxis()", "testcase": false, "constructor": false}, {"identifier": "getLegends", "parameters": "()", "modifiers": "@NotNull public", "return": "Legends", "signature": "Legends getLegends()", "full_signature": "@NotNull public Legends getLegends()", "class_method_signature": "CpuMonitor.getLegends()", "testcase": false, "constructor": false}, {"identifier": "getThisProcessCpuUsage", "parameters": "()", "modifiers": "@NotNull public", "return": "CpuUsage", "signature": "CpuUsage getThisProcessCpuUsage()", "full_signature": "@NotNull public CpuUsage getThisProcessCpuUsage()", "class_method_signature": "CpuMonitor.getThisProcessCpuUsage()", "testcase": false, "constructor": false}, {"identifier": "getTooltipLegends", "parameters": "()", "modifiers": "@NotNull public", "return": "Legends", "signature": "Legends getTooltipLegends()", "full_signature": "@NotNull public Legends getTooltipLegends()", "class_method_signature": "CpuMonitor.getTooltipLegends()", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/cpu/CpuMonitor.java"}, "focal_method": {"identifier": "expand", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void expand() {\n    myProfilers.setStage(new CpuProfilerStage(myProfilers));\n  }", "signature": "void expand()", "full_signature": "@Override public void expand()", "class_method_signature": "CpuMonitor.expand()", "testcase": false, "constructor": false, "invocations": ["setStage"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}