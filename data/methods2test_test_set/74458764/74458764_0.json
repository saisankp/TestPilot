{"test_class": {"identifier": "TestServletContextAdapter", "superclass": "", "interfaces": "", "fields": [], "file": "session-agent/src/test/java/com/amadeus/session/agent/TestServletContextAdapter.java"}, "test_case": {"identifier": "testIgnoreNonPublicMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIgnoreNonPublicMethods() {\n    ClassVisitor cv = mock(ClassVisitor.class);\n    ServletContextAdapter sca = new ServletContextAdapter(cv);\n    MethodVisitor result = sca.visitMethod(ACC_PROTECTED, \"addListener\", \"(Ljava/lang/Object;)V\", null, null);\n    assertThat(result, not(instanceOf(EnahceAddListener.class)));\n    result = sca.visitMethod(ACC_PRIVATE, \"addListener\", \"(Ljava/util/EventListener;)V\", null, null);\n    assertThat(result, not(instanceOf(EnahceAddListener.class)));\n    result = sca.visitMethod(ACC_STATIC | ACC_PUBLIC, \"addListener\", \"(Ljava/util/EventListener;)V\", null, null);\n    assertThat(result, not(instanceOf(EnahceAddListener.class)));\n  }", "signature": "void testIgnoreNonPublicMethods()", "full_signature": "@Test public void testIgnoreNonPublicMethods()", "class_method_signature": "TestServletContextAdapter.testIgnoreNonPublicMethods()", "testcase": true, "constructor": false, "invocations": ["mock", "visitMethod", "assertThat", "not", "instanceOf", "visitMethod", "assertThat", "not", "instanceOf", "visitMethod", "assertThat", "not", "instanceOf"]}, "focal_class": {"identifier": "ServletContextAdapter", "superclass": "extends ClassVisitor", "interfaces": "", "fields": [{"original_string": "String className;", "modifier": "", "type": "String", "declarator": "className", "var_name": "className"}, {"original_string": "boolean addedStaticInit;", "modifier": "", "type": "boolean", "declarator": "addedStaticInit", "var_name": "addedStaticInit"}], "methods": [{"identifier": "ServletContextAdapter", "parameters": "(ClassVisitor cv)", "modifiers": "public", "return": "", "signature": " ServletContextAdapter(ClassVisitor cv)", "full_signature": "public  ServletContextAdapter(ClassVisitor cv)", "class_method_signature": "ServletContextAdapter.ServletContextAdapter(ClassVisitor cv)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(int version, int access, String name, String signature, String superName, String[] interfaces)", "modifiers": "@Override public", "return": "void", "signature": "void visit(int version, int access, String name, String signature, String superName, String[] interfaces)", "full_signature": "@Override public void visit(int version, int access, String name, String signature, String superName, String[] interfaces)", "class_method_signature": "ServletContextAdapter.visit(int version, int access, String name, String signature, String superName, String[] interfaces)", "testcase": false, "constructor": false}, {"identifier": "visitMethod", "parameters": "(int access, String name, String desc, String signature, String[] exceptions)", "modifiers": "@Override public", "return": "MethodVisitor", "signature": "MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)", "full_signature": "@Override public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)", "class_method_signature": "ServletContextAdapter.visitMethod(int access, String name, String desc, String signature, String[] exceptions)", "testcase": false, "constructor": false}, {"identifier": "visitEnd", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void visitEnd()", "full_signature": "@Override public void visitEnd()", "class_method_signature": "ServletContextAdapter.visitEnd()", "testcase": false, "constructor": false}], "file": "session-agent/src/main/java/com/amadeus/session/agent/ServletContextAdapter.java"}, "focal_method": {"identifier": "visitMethod", "parameters": "(int access, String name, String desc, String signature, String[] exceptions)", "modifiers": "@Override public", "return": "MethodVisitor", "body": "@Override\n  public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n    if ((access & (ACC_STATIC | ACC_PUBLIC)) == ACC_PUBLIC\n        && \"addListener\".equals(name)\n        && (\"(Ljava/lang/Object;)V\".equals(desc) || \"(Ljava/util/EventListener;)V\".equals(desc))) {\n      debug(\"modifying addListener(...) method for %s\", className);\n      MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n      return new EnahceAddListener(mv);\n    }\n    // Enhance static initializer if present\n    if (\"<clinit>\".equals(name) && !addedStaticInit) {\n      MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n      return new EnhanceStaticInit(mv);\n    }\n    return super.visitMethod(access, name, desc, signature, exceptions);\n  }", "signature": "MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)", "full_signature": "@Override public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)", "class_method_signature": "ServletContextAdapter.visitMethod(int access, String name, String desc, String signature, String[] exceptions)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "debug", "visitMethod", "equals", "visitMethod", "visitMethod"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}