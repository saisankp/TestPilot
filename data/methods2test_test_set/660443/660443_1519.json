{"test_class": {"identifier": "BasicGroupCountDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/BasicGroupCountDescriptorTest.java"}, "test_case": {"identifier": "testAmine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAmine() throws Exception {\n        SmilesParser sp = new SmilesParser(SilentChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"NC\");\n        IntegerResult result = (IntegerResult) descriptor.calculate(mol).getValue();\n        Assert.assertEquals(1, result.intValue());\n    }", "signature": "void testAmine()", "full_signature": "@Test public void testAmine()", "class_method_signature": "BasicGroupCountDescriptorTest.testAmine()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "getValue", "calculate", "assertEquals", "intValue"]}, "focal_class": {"identifier": "BasicGroupCountDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private final static String[] SMARTS_STRINGS = {\"[$([NH2]-[CX4])]\", \"[$([NH](-[CX4])-[CX4])]\",\n            \"[$(N(-[CX4])(-[CX4])-[CX4])]\", \"[$([*;+;!$(*~[*;-])])]\", \"[$(N=C-N)]\", \"[$(N-C=N)]\"};", "modifier": "private final static", "type": "String[]", "declarator": "SMARTS_STRINGS = {\"[$([NH2]-[CX4])]\", \"[$([NH](-[CX4])-[CX4])]\",\n            \"[$(N(-[CX4])(-[CX4])-[CX4])]\", \"[$([*;+;!$(*~[*;-])])]\", \"[$(N=C-N)]\", \"[$(N-C=N)]\"}", "var_name": "SMARTS_STRINGS"}, {"original_string": "private final static String[] NAMES          = {\"nBase\"};", "modifier": "private final static", "type": "String[]", "declarator": "NAMES          = {\"nBase\"}", "var_name": "NAMES"}, {"original_string": "private List<SmartsPattern> tools            = new ArrayList<SmartsPattern>();", "modifier": "private", "type": "List<SmartsPattern>", "declarator": "tools            = new ArrayList<SmartsPattern>()", "var_name": "tools"}], "methods": [{"identifier": "BasicGroupCountDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicGroupCountDescriptor()", "full_signature": "public  BasicGroupCountDescriptor()", "class_method_signature": "BasicGroupCountDescriptor.BasicGroupCountDescriptor()", "testcase": false, "constructor": true}, {"identifier": "initialise", "parameters": "(IChemObjectBuilder builder)", "modifiers": "@Override public", "return": "void", "signature": "void initialise(IChemObjectBuilder builder)", "full_signature": "@Override public void initialise(IChemObjectBuilder builder)", "class_method_signature": "BasicGroupCountDescriptor.initialise(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "BasicGroupCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "BasicGroupCountDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "BasicGroupCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "BasicGroupCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "BasicGroupCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "BasicGroupCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "BasicGroupCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "BasicGroupCountDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception exception)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception exception)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception exception)", "class_method_signature": "BasicGroupCountDescriptor.getDummyDescriptorValue(Exception exception)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/BasicGroupCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n\n        if (tools.isEmpty()) {\n            throw new IllegalStateException(\"descriptor is not initalised, invoke 'initalise' first\");\n        }\n\n        atomContainer = clone(atomContainer);\n        for (IAtom atom : atomContainer.atoms()) {\n            if (atom.getImplicitHydrogenCount() == null)\n                atom.setImplicitHydrogenCount(0);\n        }\n\n        int count = 0;\n        for (SmartsPattern ptrn : tools) {\n            count += ptrn.matchAll(atomContainer).count();\n        }\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                count), getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "BasicGroupCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "clone", "atoms", "getImplicitHydrogenCount", "setImplicitHydrogenCount", "count", "matchAll", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}