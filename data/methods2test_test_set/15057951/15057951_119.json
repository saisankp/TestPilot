{"test_class": {"identifier": "BetweenMatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/matchers/BetweenMatcherTest.java"}, "test_case": {"identifier": "testMatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMatches() {\n\n        // zaleznosci\n        IntegerType intType = new IntegerType();\n        StringType strType = new StringType();\n\n        Matcher m1ii = new BetweenMatcher(true, true, \":-,\");       // separat: \":-,\"\n        Matcher m2ie = new BetweenMatcher(true, false, \"\");         // default: \"~\"\n        Matcher m3ee = new BetweenMatcher(false, false, null);      // default: \"~\"\n\n        // przypadki testowe\n        // [pattern] [value] [matcher] [type] [expectedResult]\n        Object[][] tests = {\n            {\"1200 : 1300\", \"1200\", m1ii, intType, true},\n            {\"1200 : 1300\", \"1250\", m1ii, intType, true},\n            {\"1200 : 1300\", \"1300\", m1ii, intType, true},\n            {\"1200 : 1300\", \"1199\", m1ii, intType, false},\n            {\"1200 : 1300\", \"1301\", m1ii, intType, false},\n            //\n            {\"1200 ~ 1300\", \"1200\", m2ie, intType, true},\n            {\"1200 ~ 1300\", \"1250\", m2ie, intType, true},\n            {\"1200 ~ 1300\", \"1300\", m2ie, intType, false},\n            {\"1200 ~ 1300\", \"1199\", m2ie, intType, false},\n            {\"1200 ~ 1300\", \"1301\", m2ie, intType, false},\n            //\n            {\"1200 ~ 1300\", \"1200\", m3ee, intType, false},\n            {\"1200 ~ 1300\", \"1250\", m3ee, intType, true},\n            {\"1200 ~ 1300\", \"1300\", m3ee, intType, false},\n            {\"1200 ~ 1300\", \"1199\", m3ee, intType, false},\n            {\"1200 ~ 1300\", \"1301\", m3ee, intType, false},\n            //\n            {\"1200 : * \", \"1200\", m1ii, intType, true},\n            {\"1200 :*  \", \"1199\", m1ii, intType, false},\n            {\"* :1300 \", \"1250\", m1ii, intType, true},\n            {\"*: 1300 \", \"1999\", m1ii, intType, false},\n            {\" 1200 : \", \"1300\", m1ii, intType, true},\n            {\" 1200 : \", \"1100\", m1ii, intType, false},\n            {\" : 1300 \", \"1250\", m1ii, intType, true},\n            {\" : 1300 \", \"1999\", m1ii, intType, false},\n            {\"  1200  \", \"1300\", m1ii, intType, true},\n            {\"  1200  \", \"1100\", m1ii, intType, false},\n            //\n            {\"1200 : * \", \"1200\", m1ii, strType, true},\n            {\"1200 :*  \", \"1199\", m1ii, strType, false},\n            {\"* :1300 \", \"1250\", m1ii, strType, true},\n            {\"*: 1300 \", \"1999\", m1ii, strType, false},\n            {\" 1200 : \", \"1300\", m1ii, strType, true},\n            {\" 1200 : \", \"1100\", m1ii, strType, false},\n            {\" : 1300 \", \"1250\", m1ii, strType, true},\n            {\" : 1300 \", \"1999\", m1ii, strType, false},\n            {\"  1200  \", \"1300\", m1ii, strType, true},\n            {\"  1200  \", \"1100\", m1ii, strType, false},\n            //\n            {\"aa:abaaa\", \"a\", m1ii, strType, false},\n            {\"aa:abaaa\", \"aa\", m1ii, strType, true},\n            {\"aa:abaaa\", \"aaa\", m1ii, strType, true},\n            {\"aa:abaaa\", \"aaaa\", m1ii, strType, true},\n            {\"aa:abaaa\", \"abaaa\", m1ii, strType, true},\n            {\"aa:abaaa\", \"abaab\", m1ii, strType, false},\n            //\n            {\"1200 - 1300\", \"1200\", m1ii, intType, true},\n            {\"1200 - 1300\", \"1250\", m1ii, intType, true},\n            {\"1200 , 1300\", \"1300\", m1ii, intType, true},\n            {\"1200- 1300 \", \"1199\", m1ii, intType, false},\n            {\" 1200:1300 \", \"1301\", m1ii, intType, false}\n        };\n\n\n        // testy i weryfikacja\n        for (Object[] test : tests) {\n            String pattern = (String) test[0];\n            String value = (String) test[1];\n            Matcher matcher = (Matcher) test[2];\n            Type<?> type = (Type<?>) test[3];\n            boolean expectedResult = (Boolean) test[4];\n\n            // test\n            boolean result = matcher.matches(value, pattern, type);\n\n            // weryfikacja\n            assertEquals(expectedResult, result);\n        }\n    }", "signature": "void testMatches()", "full_signature": "@Test public void testMatches()", "class_method_signature": "BetweenMatcherTest.testMatches()", "testcase": true, "constructor": false, "invocations": ["matches", "assertEquals"]}, "focal_class": {"identifier": "BetweenMatcher", "superclass": "", "interfaces": "implements Matcher", "fields": [{"original_string": "private static final char[] DEFAULT_SEPARATORS = {'~', ':', '-', ','};", "modifier": "private static final", "type": "char[]", "declarator": "DEFAULT_SEPARATORS = {'~', ':', '-', ','}", "var_name": "DEFAULT_SEPARATORS"}, {"original_string": "public static final String BETWEEN_IE = \"between/ie\";", "modifier": "public static final", "type": "String", "declarator": "BETWEEN_IE = \"between/ie\"", "var_name": "BETWEEN_IE"}, {"original_string": "public static final String BETWEEN_EI = \"between/ei\";", "modifier": "public static final", "type": "String", "declarator": "BETWEEN_EI = \"between/ei\"", "var_name": "BETWEEN_EI"}, {"original_string": "public static final String BETWEEN_II = \"between/ii\";", "modifier": "public static final", "type": "String", "declarator": "BETWEEN_II = \"between/ii\"", "var_name": "BETWEEN_II"}, {"original_string": "public static final String BETWEEN_EE = \"between/ee\";", "modifier": "public static final", "type": "String", "declarator": "BETWEEN_EE = \"between/ee\"", "var_name": "BETWEEN_EE"}, {"original_string": "private boolean lowerInclusive = true;", "modifier": "private", "type": "boolean", "declarator": "lowerInclusive = true", "var_name": "lowerInclusive"}, {"original_string": "private boolean upperInclusive = false;", "modifier": "private", "type": "boolean", "declarator": "upperInclusive = false", "var_name": "upperInclusive"}, {"original_string": "private char[] separators = DEFAULT_SEPARATORS;", "modifier": "private", "type": "char[]", "declarator": "separators = DEFAULT_SEPARATORS", "var_name": "separators"}], "methods": [{"identifier": "BetweenMatcher", "parameters": "()", "modifiers": "public", "return": "", "signature": " BetweenMatcher()", "full_signature": "public  BetweenMatcher()", "class_method_signature": "BetweenMatcher.BetweenMatcher()", "testcase": false, "constructor": true}, {"identifier": "BetweenMatcher", "parameters": "(String lowerInclusive, String upperInclusive)", "modifiers": "public", "return": "", "signature": " BetweenMatcher(String lowerInclusive, String upperInclusive)", "full_signature": "public  BetweenMatcher(String lowerInclusive, String upperInclusive)", "class_method_signature": "BetweenMatcher.BetweenMatcher(String lowerInclusive, String upperInclusive)", "testcase": false, "constructor": true}, {"identifier": "BetweenMatcher", "parameters": "(String lowerInclusive, String upperInclusive, String separators)", "modifiers": "public", "return": "", "signature": " BetweenMatcher(String lowerInclusive, String upperInclusive, String separators)", "full_signature": "public  BetweenMatcher(String lowerInclusive, String upperInclusive, String separators)", "class_method_signature": "BetweenMatcher.BetweenMatcher(String lowerInclusive, String upperInclusive, String separators)", "testcase": false, "constructor": true}, {"identifier": "BetweenMatcher", "parameters": "(boolean lowerInclusive, boolean upperInclusive, String separators)", "modifiers": "public", "return": "", "signature": " BetweenMatcher(boolean lowerInclusive, boolean upperInclusive, String separators)", "full_signature": "public  BetweenMatcher(boolean lowerInclusive, boolean upperInclusive, String separators)", "class_method_signature": "BetweenMatcher.BetweenMatcher(boolean lowerInclusive, boolean upperInclusive, String separators)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(String value, String pattern, Type<T> type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(String value, String pattern, Type<T> type)", "full_signature": "@Override public boolean matches(String value, String pattern, Type<T> type)", "class_method_signature": "BetweenMatcher.matches(String value, String pattern, Type<T> type)", "testcase": false, "constructor": false}, {"identifier": "findSeparator", "parameters": "(String pattern)", "modifiers": "private", "return": "char", "signature": "char findSeparator(String pattern)", "full_signature": "private char findSeparator(String pattern)", "class_method_signature": "BetweenMatcher.findSeparator(String pattern)", "testcase": false, "constructor": false}, {"identifier": "lowerCondition", "parameters": "(T v, String lower, Type<T> type)", "modifiers": "private", "return": "boolean", "signature": "boolean lowerCondition(T v, String lower, Type<T> type)", "full_signature": "private boolean lowerCondition(T v, String lower, Type<T> type)", "class_method_signature": "BetweenMatcher.lowerCondition(T v, String lower, Type<T> type)", "testcase": false, "constructor": false}, {"identifier": "upperCondition", "parameters": "(T v, String upper, Type<T> type)", "modifiers": "private", "return": "boolean", "signature": "boolean upperCondition(T v, String upper, Type<T> type)", "full_signature": "private boolean upperCondition(T v, String upper, Type<T> type)", "class_method_signature": "BetweenMatcher.upperCondition(T v, String upper, Type<T> type)", "testcase": false, "constructor": false}, {"identifier": "separators", "parameters": "()", "modifiers": "public", "return": "char[]", "signature": "char[] separators()", "full_signature": "public char[] separators()", "class_method_signature": "BetweenMatcher.separators()", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/matchers/BetweenMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(String value, String pattern, Type<T> type)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public <T extends ValueHolder> boolean matches(String value, String pattern, Type<T> type) {\n        char separator = findSeparator(pattern);\n\n        String[] tokens = EngineUtil.split2(pattern, separator);\n        String lower = tokens[0].trim();\n        String upper = tokens[1].trim();\n\n        T v = type.decode(value);\n\n        return lowerCondition(v, lower, type) && upperCondition(v, upper, type);\n    }", "signature": "boolean matches(String value, String pattern, Type<T> type)", "full_signature": "@Override public boolean matches(String value, String pattern, Type<T> type)", "class_method_signature": "BetweenMatcher.matches(String value, String pattern, Type<T> type)", "testcase": false, "constructor": false, "invocations": ["findSeparator", "split2", "trim", "trim", "decode", "lowerCondition", "upperCondition"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}