{"test_class": {"identifier": "PsqlEventMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JSON_MISSING_EVENT_TYPE = \"{'tableName': 'test', 'newEntity': {}, 'oldEntity': {}}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_MISSING_EVENT_TYPE = \"{'tableName': 'test', 'newEntity': {}, 'oldEntity': {}}\"", "var_name": "JSON_MISSING_EVENT_TYPE"}, {"original_string": "private static final String JSON_MISSING_TABLE_NAME = \"{'eventType': 'UPDATE', 'newEntity': {}, 'oldEntity': {}}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_MISSING_TABLE_NAME = \"{'eventType': 'UPDATE', 'newEntity': {}, 'oldEntity': {}}\"", "var_name": "JSON_MISSING_TABLE_NAME"}, {"original_string": "private static final String JSON_MISSING_NEW_DATA = \"{'tableName': 'test', 'eventType': 'UPDATE', 'oldEntity': {}}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_MISSING_NEW_DATA = \"{'tableName': 'test', 'eventType': 'UPDATE', 'oldEntity': {}}\"", "var_name": "JSON_MISSING_NEW_DATA"}, {"original_string": "private static final String JSON_MISSING_OLD_DATA = \"{'tableName': 'test', 'eventType': 'UPDATE', 'newEntity': {}}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_MISSING_OLD_DATA = \"{'tableName': 'test', 'eventType': 'UPDATE', 'newEntity': {}}\"", "var_name": "JSON_MISSING_OLD_DATA"}, {"original_string": "private static final String NONPARSABLE_JSON = \"{'nonparsable' 'json'}\";", "modifier": "private static final", "type": "String", "declarator": "NONPARSABLE_JSON = \"{'nonparsable' 'json'}\"", "var_name": "NONPARSABLE_JSON"}, {"original_string": "private static final String JSON_CORRECT_RESPONSE = \"{'tableName': 'test', 'eventType': 'UPDATE',\"\n            + \"'oldEntity': {'id': 1, 'value': 'abc'}, 'newEntity': {'id': 1, 'value': 'def'}}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_CORRECT_RESPONSE = \"{'tableName': 'test', 'eventType': 'UPDATE',\"\n            + \"'oldEntity': {'id': 1, 'value': 'abc'}, 'newEntity': {'id': 1, 'value': 'def'}}\"", "var_name": "JSON_CORRECT_RESPONSE"}, {"original_string": "private static final String JSON_CORRECT_RESPONSE_INSERT = \"{'tableName': 'test', 'eventType': 'INSERT',\"\n            + \"'oldEntity': {}, 'newEntity': {'id': 1, 'value': 'def'}}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_CORRECT_RESPONSE_INSERT = \"{'tableName': 'test', 'eventType': 'INSERT',\"\n            + \"'oldEntity': {}, 'newEntity': {'id': 1, 'value': 'def'}}\"", "var_name": "JSON_CORRECT_RESPONSE_INSERT"}, {"original_string": "private static final String JSON_NESTED_RESPONSE_INSERT = \"{'tableName': 'test', 'eventType': 'INSERT',\"\n            + \"'oldEntity': {}, 'newEntity': {'id': 1, 'value': {'id':3}}}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_NESTED_RESPONSE_INSERT = \"{'tableName': 'test', 'eventType': 'INSERT',\"\n            + \"'oldEntity': {}, 'newEntity': {'id': 1, 'value': {'id':3}}}\"", "var_name": "JSON_NESTED_RESPONSE_INSERT"}, {"original_string": "private static final String JSON_NULL_OLD_ENTITY = \"{'tableName': 'test', 'eventType': 'UPDATE', 'newEntity': {}, 'oldEntity': null}\";", "modifier": "private static final", "type": "String", "declarator": "JSON_NULL_OLD_ENTITY = \"{'tableName': 'test', 'eventType': 'UPDATE', 'newEntity': {}, 'oldEntity': null}\"", "var_name": "JSON_NULL_OLD_ENTITY"}, {"original_string": "private PsqlEventMapper mapper = new PsqlEventMapper();", "modifier": "private", "type": "PsqlEventMapper", "declarator": "mapper = new PsqlEventMapper()", "var_name": "mapper"}], "file": "reactive-source-psql/src/test/java/org/reactivesource/psql/PsqlEventMapperTest.java"}, "test_case": {"identifier": "testParsingPayloadDoesntFailForEmptyRow", "parameters": "()", "modifiers": "@Test(groups = SMALL) public", "return": "void", "body": "@Test(groups = SMALL)\n    public void testParsingPayloadDoesntFailForEmptyRow() {\n        Event<Map<String, Object>> event = mapper.parseResponse(JSON_CORRECT_RESPONSE_INSERT);\n        assertEquals(event.getOldEntity(), Maps.newHashMap());\n    }", "signature": "void testParsingPayloadDoesntFailForEmptyRow()", "full_signature": "@Test(groups = SMALL) public void testParsingPayloadDoesntFailForEmptyRow()", "class_method_signature": "PsqlEventMapperTest.testParsingPayloadDoesntFailForEmptyRow()", "testcase": true, "constructor": false, "invocations": ["parseResponse", "assertEquals", "getOldEntity", "newHashMap"]}, "focal_class": {"identifier": "PsqlEventMapper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PsqlEventMapper", "parameters": "()", "modifiers": "", "return": "", "signature": " PsqlEventMapper()", "full_signature": "  PsqlEventMapper()", "class_method_signature": "PsqlEventMapper.PsqlEventMapper()", "testcase": false, "constructor": true}, {"identifier": "parseResponse", "parameters": "(String responsePayload)", "modifiers": "", "return": "Event<Map<String, Object>>", "signature": "Event<Map<String, Object>> parseResponse(String responsePayload)", "full_signature": " Event<Map<String, Object>> parseResponse(String responsePayload)", "class_method_signature": "PsqlEventMapper.parseResponse(String responsePayload)", "testcase": false, "constructor": false}, {"identifier": "validateEvent", "parameters": "(Event<Map<String, Object>> event)", "modifiers": "private", "return": "void", "signature": "void validateEvent(Event<Map<String, Object>> event)", "full_signature": "private void validateEvent(Event<Map<String, Object>> event)", "class_method_signature": "PsqlEventMapper.validateEvent(Event<Map<String, Object>> event)", "testcase": false, "constructor": false}], "file": "reactive-source-psql/src/main/java/org/reactivesource/psql/PsqlEventMapper.java"}, "focal_method": {"identifier": "parseResponse", "parameters": "(String responsePayload)", "modifiers": "", "return": "Event<Map<String, Object>>", "body": "Event<Map<String, Object>> parseResponse(String responsePayload) {\n        try {\n            JSONObject jsonResponse = new JSONObject(responsePayload);\n            String eventType = jsonResponse.getString(EVENT_TYPE_KEY);\n            String tableName = jsonResponse.getString(TABLE_NAME_KEY);\n            Map<String, Object> newRow = jsonObjectToMap(jsonResponse.getJSONObject(NEW_ENTITY_KEY));\n            Map<String, Object> oldRow = jsonObjectToMap(jsonResponse.getJSONObject(OLD_ENTITY_KEY));\n\n            Event<Map<String, Object>> event = new Event<>(eventType, tableName, newRow, oldRow);\n            validateEvent(event);\n            return event;\n        } catch (JSONException je) {\n            throw new InvalidPayloadException(\"Payload is not a valid json payload\", je);\n        } catch (InvalidPayloadException ipe) {\n            throw new InvalidPayloadException(\"Payload is not valid.\", ipe);\n        }\n    }", "signature": "Event<Map<String, Object>> parseResponse(String responsePayload)", "full_signature": " Event<Map<String, Object>> parseResponse(String responsePayload)", "class_method_signature": "PsqlEventMapper.parseResponse(String responsePayload)", "testcase": false, "constructor": false, "invocations": ["getString", "getString", "jsonObjectToMap", "getJSONObject", "jsonObjectToMap", "getJSONObject", "validateEvent"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}