{"test_class": {"identifier": "PeerMetricConverterFactoryTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/transport/PeerMetricConverterFactoryTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConvert() {\n    final ModelConverter<PeerMetric, types.Metric.PeerMetric> converter =\n        new PeerMetricConverterFactory().create();\n\n    final Metric.PeerMetric rpcPeerMetric = Metric.PeerMetric.newBuilder()\n        .setPeerID(ByteString.EMPTY)\n        .build();\n    final PeerMetric actual =\n        PeerMetric.newBuilder().peerId(Base58Utils.encode(new byte[0])).build();\n    final PeerMetric expected = converter.convertToDomainModel(rpcPeerMetric);\n    assertEquals(expected, actual);\n  }", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "PeerMetricConverterFactoryTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["create", "build", "setPeerID", "newBuilder", "build", "peerId", "newBuilder", "encode", "convertToDomainModel", "assertEquals"]}, "focal_class": {"identifier": "PeerMetricConverterFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final Function1<PeerMetric, Metric.PeerMetric> domainConverter =\n      new Function1<PeerMetric, Metric.PeerMetric>() {\n\n        @Override\n        public Metric.PeerMetric apply(final PeerMetric domainPeer) {\n          throw new UnsupportedOperationException();\n        }\n      };", "modifier": "protected final", "type": "Function1<PeerMetric, Metric.PeerMetric>", "declarator": "domainConverter =\n      new Function1<PeerMetric, Metric.PeerMetric>() {\n\n        @Override\n        public Metric.PeerMetric apply(final PeerMetric domainPeer) {\n          throw new UnsupportedOperationException();\n        }\n      }", "var_name": "domainConverter"}, {"original_string": "protected final Function1<Metric.PeerMetric, PeerMetric> rpcConverter =\n      new Function1<Metric.PeerMetric, PeerMetric>() {\n\n        @Override\n        public PeerMetric apply(final Metric.PeerMetric rpcPeerMetric) {\n          logger.trace(\"Rpc peer metric to convert: {}\", rpcPeerMetric);\n          final PeerMetric domainPeerMetric = PeerMetric.newBuilder()\n              .peerId(Base58Utils.encode(rpcPeerMetric.getPeerID().toByteArray()))\n              .sumIn(rpcPeerMetric.getSumIn())\n              .sumOut(rpcPeerMetric.getSumOut())\n              .averageIn(rpcPeerMetric.getAvrIn())\n              .averageOut(rpcPeerMetric.getAvrOut())\n              .build();\n          logger.trace(\"Domain peer metric converted: {}\", domainPeerMetric);\n          return domainPeerMetric;\n        }\n      };", "modifier": "protected final", "type": "Function1<Metric.PeerMetric, PeerMetric>", "declarator": "rpcConverter =\n      new Function1<Metric.PeerMetric, PeerMetric>() {\n\n        @Override\n        public PeerMetric apply(final Metric.PeerMetric rpcPeerMetric) {\n          logger.trace(\"Rpc peer metric to convert: {}\", rpcPeerMetric);\n          final PeerMetric domainPeerMetric = PeerMetric.newBuilder()\n              .peerId(Base58Utils.encode(rpcPeerMetric.getPeerID().toByteArray()))\n              .sumIn(rpcPeerMetric.getSumIn())\n              .sumOut(rpcPeerMetric.getSumOut())\n              .averageIn(rpcPeerMetric.getAvrIn())\n              .averageOut(rpcPeerMetric.getAvrOut())\n              .build();\n          logger.trace(\"Domain peer metric converted: {}\", domainPeerMetric);\n          return domainPeerMetric;\n        }\n      }", "var_name": "rpcConverter"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "public", "return": "ModelConverter<PeerMetric, Metric.PeerMetric>", "signature": "ModelConverter<PeerMetric, Metric.PeerMetric> create()", "full_signature": "public ModelConverter<PeerMetric, Metric.PeerMetric> create()", "class_method_signature": "PeerMetricConverterFactory.create()", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/transport/PeerMetricConverterFactory.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "ModelConverter<PeerMetric, Metric.PeerMetric>", "body": "public ModelConverter<PeerMetric, Metric.PeerMetric> create() {\n    return new ModelConverter<>(domainConverter, rpcConverter);\n  }", "signature": "ModelConverter<PeerMetric, Metric.PeerMetric> create()", "full_signature": "public ModelConverter<PeerMetric, Metric.PeerMetric> create()", "class_method_signature": "PeerMetricConverterFactory.create()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}