{"test_class": {"identifier": "VersionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "alien4cloud-common/src/test/java/alien4cloud/utils/VersionUtilTest.java"}, "test_case": {"identifier": "isQualifierValidOrFail", "parameters": "()", "modifiers": "@Test(expected = InvalidVersionException.class) public", "return": "void", "body": "@Test(expected = InvalidVersionException.class)\n    public void isQualifierValidOrFail() throws Exception {\n        VersionUtil.isQualifierValidOrFail(\"Dev-SnAPSHoT-toto\");\n    }", "signature": "void isQualifierValidOrFail()", "full_signature": "@Test(expected = InvalidVersionException.class) public void isQualifierValidOrFail()", "class_method_signature": "VersionUtilTest.isQualifierValidOrFail()", "testcase": true, "constructor": false, "invocations": ["isQualifierValidOrFail"]}, "focal_class": {"identifier": "VersionUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DEFAULT_VERSION_NAME = \"0.1.0-SNAPSHOT\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_VERSION_NAME = \"0.1.0-SNAPSHOT\"", "var_name": "DEFAULT_VERSION_NAME"}, {"original_string": "public static final Pattern VERSION_PATTERN = Pattern.compile(\"\\\\d+(?:\\\\.\\\\d+)*(?:[\\\\.-]\\\\p{Alnum}+)*\");", "modifier": "public static final", "type": "Pattern", "declarator": "VERSION_PATTERN = Pattern.compile(\"\\\\d+(?:\\\\.\\\\d+)*(?:[\\\\.-]\\\\p{Alnum}+)*\")", "var_name": "VERSION_PATTERN"}, {"original_string": "public static final String SNAPSHOT_IDENTIFIER = \"-SNAPSHOT\";", "modifier": "public static final", "type": "String", "declarator": "SNAPSHOT_IDENTIFIER = \"-SNAPSHOT\"", "var_name": "SNAPSHOT_IDENTIFIER"}, {"original_string": "public static final Pattern QUALIFIER_PATTERN = Pattern.compile(\"^((?!.*snapshot)[a-zA-Z0-9\\\\-_]+)*$\", Pattern.CASE_INSENSITIVE);", "modifier": "public static final", "type": "Pattern", "declarator": "QUALIFIER_PATTERN = Pattern.compile(\"^((?!.*snapshot)[a-zA-Z0-9\\\\-_]+)*$\", Pattern.CASE_INSENSITIVE)", "var_name": "QUALIFIER_PATTERN"}], "methods": [{"identifier": "VersionUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " VersionUtil()", "full_signature": "private  VersionUtil()", "class_method_signature": "VersionUtil.VersionUtil()", "testcase": false, "constructor": true}, {"identifier": "isSnapshot", "parameters": "(String version)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSnapshot(String version)", "full_signature": "public static boolean isSnapshot(String version)", "class_method_signature": "VersionUtil.isSnapshot(String version)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(String version)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValid(String version)", "full_signature": "public static boolean isValid(String version)", "class_method_signature": "VersionUtil.isValid(String version)", "testcase": false, "constructor": false}, {"identifier": "isValidOrFail", "parameters": "(String version)", "modifiers": "public static", "return": "void", "signature": "void isValidOrFail(String version)", "full_signature": "public static void isValidOrFail(String version)", "class_method_signature": "VersionUtil.isValidOrFail(String version)", "testcase": false, "constructor": false}, {"identifier": "parseVersion", "parameters": "(String version)", "modifiers": "public static", "return": "Version", "signature": "Version parseVersion(String version)", "full_signature": "public static Version parseVersion(String version)", "class_method_signature": "VersionUtil.parseVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(String versionLeft, String versionRight)", "modifiers": "public static", "return": "int", "signature": "int compare(String versionLeft, String versionRight)", "full_signature": "public static int compare(String versionLeft, String versionRight)", "class_method_signature": "VersionUtil.compare(String versionLeft, String versionRight)", "testcase": false, "constructor": false}, {"identifier": "isQualifierValid", "parameters": "(String qualifier)", "modifiers": "public static", "return": "boolean", "signature": "boolean isQualifierValid(String qualifier)", "full_signature": "public static boolean isQualifierValid(String qualifier)", "class_method_signature": "VersionUtil.isQualifierValid(String qualifier)", "testcase": false, "constructor": false}, {"identifier": "isQualifierValidOrFail", "parameters": "(String qualifier)", "modifiers": "public static", "return": "void", "signature": "void isQualifierValidOrFail(String qualifier)", "full_signature": "public static void isQualifierValidOrFail(String qualifier)", "class_method_signature": "VersionUtil.isQualifierValidOrFail(String qualifier)", "testcase": false, "constructor": false}], "file": "alien4cloud-common/src/main/java/alien4cloud/utils/VersionUtil.java"}, "focal_method": {"identifier": "isQualifierValidOrFail", "parameters": "(String qualifier)", "modifiers": "public static", "return": "void", "body": "public static void isQualifierValidOrFail(String qualifier) {\n        if (!isQualifierValid(qualifier)) {\n            throw new InvalidVersionException(\"This qualifier [\" + qualifier + \"] is not valid as it does not match [\" + QUALIFIER_PATTERN + \"]\");\n        }\n    }", "signature": "void isQualifierValidOrFail(String qualifier)", "full_signature": "public static void isQualifierValidOrFail(String qualifier)", "class_method_signature": "VersionUtil.isQualifierValidOrFail(String qualifier)", "testcase": false, "constructor": false, "invocations": ["isQualifierValid"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}