{"test_class": {"identifier": "FunctionReturnDecoderTest", "superclass": "", "interfaces": "", "fields": [], "file": "abi/src/test/java/org/web3j/abi/FunctionReturnDecoderTest.java"}, "test_case": {"identifier": "testDecodeIndexedBytes32Value", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecodeIndexedBytes32Value() {\n        String rawInput = \"0x1234567890123456789012345678901234567890123456789012345678901234\";\n        byte[] rawInputBytes = Numeric.hexStringToByteArray(rawInput);\n\n        assertThat(FunctionReturnDecoder.decodeIndexedValue(\n                rawInput,\n                new TypeReference<Bytes32>(){}),\n                IsEqual.<Type>equalTo(new Bytes32(rawInputBytes)));\n    }", "signature": "void testDecodeIndexedBytes32Value()", "full_signature": "@Test public void testDecodeIndexedBytes32Value()", "class_method_signature": "FunctionReturnDecoderTest.testDecodeIndexedBytes32Value()", "testcase": true, "constructor": false, "invocations": ["hexStringToByteArray", "assertThat", "decodeIndexedValue", "equalTo"]}, "focal_class": {"identifier": "FunctionReturnDecoder", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FunctionReturnDecoder", "parameters": "()", "modifiers": "private", "return": "", "signature": " FunctionReturnDecoder()", "full_signature": "private  FunctionReturnDecoder()", "class_method_signature": "FunctionReturnDecoder.FunctionReturnDecoder()", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(\n            String rawInput, List<TypeReference<Type>> outputParameters)", "modifiers": "public static", "return": "List<Type>", "signature": "List<Type> decode(\n            String rawInput, List<TypeReference<Type>> outputParameters)", "full_signature": "public static List<Type> decode(\n            String rawInput, List<TypeReference<Type>> outputParameters)", "class_method_signature": "FunctionReturnDecoder.decode(\n            String rawInput, List<TypeReference<Type>> outputParameters)", "testcase": false, "constructor": false}, {"identifier": "decodeIndexedValue", "parameters": "(\n            String rawInput, TypeReference<T> typeReference)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Type", "signature": "Type decodeIndexedValue(\n            String rawInput, TypeReference<T> typeReference)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Type decodeIndexedValue(\n            String rawInput, TypeReference<T> typeReference)", "class_method_signature": "FunctionReturnDecoder.decodeIndexedValue(\n            String rawInput, TypeReference<T> typeReference)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(\n            String input, List<TypeReference<Type>> outputParameters)", "modifiers": "private static", "return": "List<Type>", "signature": "List<Type> build(\n            String input, List<TypeReference<Type>> outputParameters)", "full_signature": "private static List<Type> build(\n            String input, List<TypeReference<Type>> outputParameters)", "class_method_signature": "FunctionReturnDecoder.build(\n            String input, List<TypeReference<Type>> outputParameters)", "testcase": false, "constructor": false}, {"identifier": "getDataOffset", "parameters": "(String input, int offset, Class<T> type)", "modifiers": "private static", "return": "int", "signature": "int getDataOffset(String input, int offset, Class<T> type)", "full_signature": "private static int getDataOffset(String input, int offset, Class<T> type)", "class_method_signature": "FunctionReturnDecoder.getDataOffset(String input, int offset, Class<T> type)", "testcase": false, "constructor": false}], "file": "abi/src/main/java/org/web3j/abi/FunctionReturnDecoder.java"}, "focal_method": {"identifier": "decodeIndexedValue", "parameters": "(\n            String rawInput, TypeReference<T> typeReference)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Type", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T extends Type> Type decodeIndexedValue(\n            String rawInput, TypeReference<T> typeReference) {\n        String input = Numeric.cleanHexPrefix(rawInput);\n\n        try {\n            Class<T> type = typeReference.getClassType();\n\n            if (Bytes.class.isAssignableFrom(type)) {\n                return TypeDecoder.decodeBytes(input, (Class<Bytes>) Class.forName(type.getName()));\n            } else if (Array.class.isAssignableFrom(type)\n                    || BytesType.class.isAssignableFrom(type)\n                    || Utf8String.class.isAssignableFrom(type)) {\n                return TypeDecoder.decodeBytes(input, Bytes32.class);\n            } else {\n                return TypeDecoder.decode(input, type);\n            }\n        } catch (ClassNotFoundException e) {\n            throw new UnsupportedOperationException(\"Invalid class reference provided\", e);\n        }\n    }", "signature": "Type decodeIndexedValue(\n            String rawInput, TypeReference<T> typeReference)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Type decodeIndexedValue(\n            String rawInput, TypeReference<T> typeReference)", "class_method_signature": "FunctionReturnDecoder.decodeIndexedValue(\n            String rawInput, TypeReference<T> typeReference)", "testcase": false, "constructor": false, "invocations": ["cleanHexPrefix", "getClassType", "isAssignableFrom", "decodeBytes", "forName", "getName", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "decodeBytes", "decode"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}