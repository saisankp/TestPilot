{"test_class": {"identifier": "XMLInputSplitterTest", "superclass": "extends WSDLTestHelper", "interfaces": "", "fields": [], "file": "taverna-wsdl-generic/src/test/java/org/apache/taverna/wsdl/xmlsplitter/XMLInputSplitterTest.java"}, "test_case": {"identifier": "testNillable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNillable() throws Exception {\n\t\tWSDLParser parser = new WSDLParser(wsdlResourcePath(\"VSOi.wsdl\"));\n\t\tTypeDescriptor descriptor = parser.getOperationInputParameters(\"Query\").get(0);\n\t\tXMLInputSplitter splitter = new XMLInputSplitter(descriptor,new String[]{\"version\",\"block\"},new String[]{\"text/plain\",\"text/plain\"},new String[]{\"output\"});\n\t\tMap<String,Object> inputMap = new HashMap<String, Object>();\n\t\t// Magic string meaning insert xsi:nil=true\n\t\tinputMap.put(\"version\", \"xsi:nil\");\n\t\tMap<String,String> outputMap = splitter.execute(inputMap);\n\t\tassertNotNull(\"there should be an output named 'output'\",outputMap.containsKey(\"output\"));\n\t\tString xml = outputMap.get(\"output\");\n\t\tSystem.out.println(xml);\n\t\t// empty string as <block> as it is not nillable\n\t\tassertTrue(xml.contains(\"<block xmlns=\\\"\\\"></block>\"));\n\t\t// FIXME: Should not really allow nil=true here, as version is not nillable! \n\t\tassertTrue(xml.contains(\"<version xmlns=\\\"\\\" \" +\n\t\t\t\t\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \" +\n\t\t\t\t\"xsi:nil=\\\"true\\\" />\"));\n\t}", "signature": "void testNillable()", "full_signature": "@Test public void testNillable()", "class_method_signature": "XMLInputSplitterTest.testNillable()", "testcase": true, "constructor": false, "invocations": ["wsdlResourcePath", "get", "getOperationInputParameters", "put", "execute", "assertNotNull", "containsKey", "get", "println", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "XMLInputSplitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypeDescriptor typeDescriptor;", "modifier": "private", "type": "TypeDescriptor", "declarator": "typeDescriptor", "var_name": "typeDescriptor"}, {"original_string": "private String[] outputNames;", "modifier": "private", "type": "String[]", "declarator": "outputNames", "var_name": "outputNames"}, {"original_string": "private String[] inputNames;", "modifier": "private", "type": "String[]", "declarator": "inputNames", "var_name": "inputNames"}, {"original_string": "private String[] inputTypes;", "modifier": "private", "type": "String[]", "declarator": "inputTypes", "var_name": "inputTypes"}], "methods": [{"identifier": "XMLInputSplitter", "parameters": "(TypeDescriptor typeDescriptor, String inputNames[],\n\t\t\tString inputTypes[], String[] outputNames)", "modifiers": "public", "return": "", "signature": " XMLInputSplitter(TypeDescriptor typeDescriptor, String inputNames[],\n\t\t\tString inputTypes[], String[] outputNames)", "full_signature": "public  XMLInputSplitter(TypeDescriptor typeDescriptor, String inputNames[],\n\t\t\tString inputTypes[], String[] outputNames)", "class_method_signature": "XMLInputSplitter.XMLInputSplitter(TypeDescriptor typeDescriptor, String inputNames[],\n\t\t\tString inputTypes[], String[] outputNames)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Map<String, Object> inputMap)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> execute(Map<String, Object> inputMap)", "full_signature": "public Map<String, String> execute(Map<String, Object> inputMap)", "class_method_signature": "XMLInputSplitter.execute(Map<String, Object> inputMap)", "testcase": false, "constructor": false}, {"identifier": "executeForComplexType", "parameters": "(Map<String, Object> inputMap,\n\t\t\tMap<String, String> result, Element outputElement)", "modifiers": "private", "return": "void", "signature": "void executeForComplexType(Map<String, Object> inputMap,\n\t\t\tMap<String, String> result, Element outputElement)", "full_signature": "private void executeForComplexType(Map<String, Object> inputMap,\n\t\t\tMap<String, String> result, Element outputElement)", "class_method_signature": "XMLInputSplitter.executeForComplexType(Map<String, Object> inputMap,\n\t\t\tMap<String, String> result, Element outputElement)", "testcase": false, "constructor": false}, {"identifier": "buildElementFromObject", "parameters": "(String key, Object dataObject)", "modifiers": "private", "return": "Element", "signature": "Element buildElementFromObject(String key, Object dataObject)", "full_signature": "private Element buildElementFromObject(String key, Object dataObject)", "class_method_signature": "XMLInputSplitter.buildElementFromObject(String key, Object dataObject)", "testcase": false, "constructor": false}, {"identifier": "createDataElementForXMLInput", "parameters": "(Object dataObject, String key)", "modifiers": "private", "return": "Element", "signature": "Element createDataElementForXMLInput(Object dataObject, String key)", "full_signature": "private Element createDataElementForXMLInput(Object dataObject, String key)", "class_method_signature": "XMLInputSplitter.createDataElementForXMLInput(Object dataObject, String key)", "testcase": false, "constructor": false}, {"identifier": "setDataElementNamespace", "parameters": "(String key, Element dataElement)", "modifiers": "private", "return": "void", "signature": "void setDataElementNamespace(String key, Element dataElement)", "full_signature": "private void setDataElementNamespace(String key, Element dataElement)", "class_method_signature": "XMLInputSplitter.setDataElementNamespace(String key, Element dataElement)", "testcase": false, "constructor": false}, {"identifier": "updateElementNamespace", "parameters": "(Element dataElement, String namespaceURI)", "modifiers": "private", "return": "void", "signature": "void updateElementNamespace(Element dataElement, String namespaceURI)", "full_signature": "private void updateElementNamespace(Element dataElement, String namespaceURI)", "class_method_signature": "XMLInputSplitter.updateElementNamespace(Element dataElement, String namespaceURI)", "testcase": false, "constructor": false}, {"identifier": "isXMLInput", "parameters": "(String key)", "modifiers": "private", "return": "boolean", "signature": "boolean isXMLInput(String key)", "full_signature": "private boolean isXMLInput(String key)", "class_method_signature": "XMLInputSplitter.isXMLInput(String key)", "testcase": false, "constructor": false}], "file": "taverna-wsdl-generic/src/main/java/org/apache/taverna/wsdl/xmlsplitter/XMLInputSplitter.java"}, "focal_method": {"identifier": "execute", "parameters": "(Map<String, Object> inputMap)", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> execute(Map<String, Object> inputMap)\n\t\t\tthrows JDOMException, IOException {\n\t\tMap<String, String> result = new HashMap<String, String>();\n\t\tElement outputElement = (this.typeDescriptor.getName().length() > 0 ? new Element(\n\t\t\t\tthis.typeDescriptor.getName())\n\t\t\t\t: new Element(this.typeDescriptor.getType()));\n\n\t\tif (typeDescriptor instanceof ComplexTypeDescriptor) {\n\t\t\texecuteForComplexType(inputMap, result, outputElement);\n\n\t\t} else {\n\t\t\tfor (String key : inputMap.keySet()) {\n\t\t\t\tObject dataObject = inputMap.get(key);\n\n\t\t\t\tif (dataObject instanceof List) {\n\t\t\t\t\tElement dataElement = buildElementFromObject(key, \"\");\n\t\t\t\t\tfor (Object dataItem : ((List<?>) dataObject)) {\n\t\t\t\t\t\tElement itemElement = buildElementFromObject(key,\n\t\t\t\t\t\t\t\tdataItem);\n\t\t\t\t\t\tdataElement.addContent(itemElement);\n\t\t\t\t\t}\n\n\t\t\t\t\tXMLOutputter outputter = new XMLOutputter();\n\t\t\t\t\tString xmlText = outputter.outputString(dataElement);\n\n\t\t\t\t\tresult.put(outputNames[0], xmlText);\n\t\t\t\t} else {\n\t\t\t\t\tElement dataElement = buildElementFromObject(key,\n\t\t\t\t\t\t\tdataObject);\n\t\t\t\t\toutputElement.addContent(dataElement);\n\t\t\t\t\tXMLOutputter outputter = new XMLOutputter();\n\t\t\t\t\tString xmlText = outputter.outputString(outputElement);\n\t\t\t\t\tresult.put(outputNames[0], xmlText);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\n\t}", "signature": "Map<String, String> execute(Map<String, Object> inputMap)", "full_signature": "public Map<String, String> execute(Map<String, Object> inputMap)", "class_method_signature": "XMLInputSplitter.execute(Map<String, Object> inputMap)", "testcase": false, "constructor": false, "invocations": ["length", "getName", "getName", "getType", "executeForComplexType", "keySet", "get", "buildElementFromObject", "buildElementFromObject", "addContent", "outputString", "put", "buildElementFromObject", "addContent", "outputString", "put"]}, "repository": {"repo_id": 30956938, "url": "https://github.com/apache/incubator-taverna-common-activities", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 5696, "license": "licensed"}}