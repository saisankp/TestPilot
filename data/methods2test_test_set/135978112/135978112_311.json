{"test_class": {"identifier": "KStreamBranchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"topic\";", "modifier": "private", "type": "String", "declarator": "topicName = \"topic\"", "var_name": "topicName"}, {"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamBranchTest.java"}, "test_case": {"identifier": "testKStreamBranch", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testKStreamBranch() {\n        KStreamBuilder builder = new KStreamBuilder();\n\n        Predicate<Integer, String> isEven = new Predicate<Integer, String>() {\n            @Override\n            public boolean test(Integer key, String value) {\n                return (key % 2) == 0;\n            }\n        };\n        Predicate<Integer, String> isMultipleOfThree = new Predicate<Integer, String>() {\n            @Override\n            public boolean test(Integer key, String value) {\n                return (key % 3) == 0;\n            }\n        };\n        Predicate<Integer, String> isOdd = new Predicate<Integer, String>() {\n            @Override\n            public boolean test(Integer key, String value) {\n                return (key % 2) != 0;\n            }\n        };\n\n        final int[] expectedKeys = new int[]{1, 2, 3, 4, 5, 6};\n\n        KStream<Integer, String> stream;\n        KStream<Integer, String>[] branches;\n        MockProcessorSupplier<Integer, String>[] processors;\n\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        branches = stream.branch(isEven, isMultipleOfThree, isOdd);\n\n        assertEquals(3, branches.length);\n\n        processors = (MockProcessorSupplier<Integer, String>[]) Array.newInstance(MockProcessorSupplier.class, branches.length);\n        for (int i = 0; i < branches.length; i++) {\n            processors[i] = new MockProcessorSupplier<>();\n            branches[i].process(processors[i]);\n        }\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(3, processors[0].processed.size());\n        assertEquals(1, processors[1].processed.size());\n        assertEquals(2, processors[2].processed.size());\n    }", "signature": "void testKStreamBranch()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testKStreamBranch()", "class_method_signature": "KStreamBranchTest.testKStreamBranch()", "testcase": true, "constructor": false, "invocations": ["stream", "Integer", "String", "branch", "assertEquals", "newInstance", "process", "process", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "KStreamBranch", "superclass": "", "interfaces": "implements ProcessorSupplier<K, V>", "fields": [{"original_string": "private final Predicate<K, V>[] predicates;", "modifier": "private final", "type": "Predicate<K, V>[]", "declarator": "predicates", "var_name": "predicates"}], "methods": [{"identifier": "KStreamBranch", "parameters": "(Predicate<K, V> ... predicates)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " KStreamBranch(Predicate<K, V> ... predicates)", "full_signature": "@SuppressWarnings(\"unchecked\") public  KStreamBranch(Predicate<K, V> ... predicates)", "class_method_signature": "KStreamBranch.KStreamBranch(Predicate<K, V> ... predicates)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamBranch.get()", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamBranch.java"}, "focal_method": {"identifier": "KStreamBranch", "parameters": "(Predicate<K, V> ... predicates)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "body": "@SuppressWarnings(\"unchecked\")\n    public KStreamBranch(Predicate<K, V> ... predicates) {\n        this.predicates = predicates;\n    }", "signature": " KStreamBranch(Predicate<K, V> ... predicates)", "full_signature": "@SuppressWarnings(\"unchecked\") public  KStreamBranch(Predicate<K, V> ... predicates)", "class_method_signature": "KStreamBranch.KStreamBranch(Predicate<K, V> ... predicates)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}