{"test_class": {"identifier": "SimpleServiceIdentityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String servicePublicKeyStringK0 = null;", "modifier": "private", "type": "String", "declarator": "servicePublicKeyStringK0 = null", "var_name": "servicePublicKeyStringK0"}, {"original_string": "private String servicePublicKeyStringK1 = null;", "modifier": "private", "type": "String", "declarator": "servicePublicKeyStringK1 = null", "var_name": "servicePublicKeyStringK1"}, {"original_string": "private String servicePrivateKeyStringK1 = null;", "modifier": "private", "type": "String", "declarator": "servicePrivateKeyStringK1 = null", "var_name": "servicePrivateKeyStringK1"}, {"original_string": "private File k0File = null;", "modifier": "private", "type": "File", "declarator": "k0File = null", "var_name": "k0File"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/impl/SimpleServiceIdentityProviderTest.java"}, "test_case": {"identifier": "testGetServerHostName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetServerHostName() throws UnknownHostException {\n        PrivateKey key = Crypto.loadPrivateKey(servicePrivateKeyStringK1);\n        SimpleServiceIdentityProvider simpleServiceIdentityProvider = new SimpleServiceIdentityProvider(\"coretech\",\n                \"athenz\", key, \"1\");\n\n        SimpleServiceIdentityProvider provider = Mockito.spy(simpleServiceIdentityProvider);\n        doThrow(UnknownHostException.class).when(provider).getLocalHost();\n        assertEquals(provider.getServerHostName(), \"localhost\");\n    }", "signature": "void testGetServerHostName()", "full_signature": "@Test public void testGetServerHostName()", "class_method_signature": "SimpleServiceIdentityProviderTest.testGetServerHostName()", "testcase": true, "constructor": false, "invocations": ["loadPrivateKey", "spy", "getLocalHost", "when", "doThrow", "assertEquals", "getServerHostName"]}, "focal_class": {"identifier": "SimpleServiceIdentityProvider", "superclass": "", "interfaces": "implements ServiceIdentityProvider", "fields": [{"original_string": "private static final Authority PRINCIPAL_AUTHORITY = new PrincipalAuthority();", "modifier": "private static final", "type": "Authority", "declarator": "PRINCIPAL_AUTHORITY = new PrincipalAuthority()", "var_name": "PRINCIPAL_AUTHORITY"}, {"original_string": "private String domain;", "modifier": "private", "type": "String", "declarator": "domain", "var_name": "domain"}, {"original_string": "private String service;", "modifier": "private", "type": "String", "declarator": "service", "var_name": "service"}, {"original_string": "private PrivateKey key;", "modifier": "private", "type": "PrivateKey", "declarator": "key", "var_name": "key"}, {"original_string": "private long tokenTimeout;", "modifier": "private", "type": "long", "declarator": "tokenTimeout", "var_name": "tokenTimeout"}, {"original_string": "private String keyId;", "modifier": "private", "type": "String", "declarator": "keyId", "var_name": "keyId"}, {"original_string": "private String host = null;", "modifier": "private", "type": "String", "declarator": "host = null", "var_name": "host"}, {"original_string": "private Authority authority;", "modifier": "private", "type": "Authority", "declarator": "authority", "var_name": "authority"}], "methods": [{"identifier": "SimpleServiceIdentityProvider", "parameters": "(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId)", "modifiers": "public", "return": "", "signature": " SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId)", "full_signature": "public  SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId)", "class_method_signature": "SimpleServiceIdentityProvider.SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId)", "testcase": false, "constructor": true}, {"identifier": "SimpleServiceIdentityProvider", "parameters": "(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId, long tokenTimeout)", "modifiers": "public", "return": "", "signature": " SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId, long tokenTimeout)", "full_signature": "public  SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId, long tokenTimeout)", "class_method_signature": "SimpleServiceIdentityProvider.SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId, long tokenTimeout)", "testcase": false, "constructor": true}, {"identifier": "SimpleServiceIdentityProvider", "parameters": "(Authority authority, String domainName,\n            String serviceName, PrivateKey privateKey, String keyId, long tokenTimeout)", "modifiers": "public", "return": "", "signature": " SimpleServiceIdentityProvider(Authority authority, String domainName,\n            String serviceName, PrivateKey privateKey, String keyId, long tokenTimeout)", "full_signature": "public  SimpleServiceIdentityProvider(Authority authority, String domainName,\n            String serviceName, PrivateKey privateKey, String keyId, long tokenTimeout)", "class_method_signature": "SimpleServiceIdentityProvider.SimpleServiceIdentityProvider(Authority authority, String domainName,\n            String serviceName, PrivateKey privateKey, String keyId, long tokenTimeout)", "testcase": false, "constructor": true}, {"identifier": "getIdentity", "parameters": "(String domainName, String serviceName)", "modifiers": "public", "return": "Principal", "signature": "Principal getIdentity(String domainName, String serviceName)", "full_signature": "public Principal getIdentity(String domainName, String serviceName)", "class_method_signature": "SimpleServiceIdentityProvider.getIdentity(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "getServerHostName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getServerHostName()", "full_signature": " String getServerHostName()", "class_method_signature": "SimpleServiceIdentityProvider.getServerHostName()", "testcase": false, "constructor": false}, {"identifier": "getLocalHost", "parameters": "()", "modifiers": "", "return": "InetAddress", "signature": "InetAddress getLocalHost()", "full_signature": " InetAddress getLocalHost()", "class_method_signature": "SimpleServiceIdentityProvider.getLocalHost()", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "SimpleServiceIdentityProvider.getHost()", "testcase": false, "constructor": false}, {"identifier": "setHost", "parameters": "(String host)", "modifiers": "public", "return": "void", "signature": "void setHost(String host)", "full_signature": "public void setHost(String host)", "class_method_signature": "SimpleServiceIdentityProvider.setHost(String host)", "testcase": false, "constructor": false}, {"identifier": "setTokenTimeout", "parameters": "(long tokenTimeout)", "modifiers": "public", "return": "void", "signature": "void setTokenTimeout(long tokenTimeout)", "full_signature": "public void setTokenTimeout(long tokenTimeout)", "class_method_signature": "SimpleServiceIdentityProvider.setTokenTimeout(long tokenTimeout)", "testcase": false, "constructor": false}, {"identifier": "getAuthority", "parameters": "()", "modifiers": "public", "return": "Authority", "signature": "Authority getAuthority()", "full_signature": "public Authority getAuthority()", "class_method_signature": "SimpleServiceIdentityProvider.getAuthority()", "testcase": false, "constructor": false}, {"identifier": "setAuthority", "parameters": "(Authority authority)", "modifiers": "public", "return": "void", "signature": "void setAuthority(Authority authority)", "full_signature": "public void setAuthority(Authority authority)", "class_method_signature": "SimpleServiceIdentityProvider.setAuthority(Authority authority)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimpleServiceIdentityProvider.java"}, "focal_method": {"identifier": "getServerHostName", "parameters": "()", "modifiers": "", "return": "String", "body": "String getServerHostName() {\n        \n        String urlhost;\n        try {\n            InetAddress localhost = getLocalHost();\n            urlhost = localhost.getCanonicalHostName();\n        } catch (java.net.UnknownHostException e) {\n            urlhost = \"localhost\";\n        }\n        return urlhost;\n    }", "signature": "String getServerHostName()", "full_signature": " String getServerHostName()", "class_method_signature": "SimpleServiceIdentityProvider.getServerHostName()", "testcase": false, "constructor": false, "invocations": ["getLocalHost", "getCanonicalHostName"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}