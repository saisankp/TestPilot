{"test_class": {"identifier": "DistributedSecurityAnalysisTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private Path workingDir;", "modifier": "private", "type": "Path", "declarator": "workingDir", "var_name": "workingDir"}, {"original_string": "private ComputationManager cm = mock(ComputationManager.class);", "modifier": "private", "type": "ComputationManager", "declarator": "cm = mock(ComputationManager.class)", "var_name": "cm"}, {"original_string": "private Network network = EurostagTutorialExample1Factory.create();", "modifier": "private", "type": "Network", "declarator": "network = EurostagTutorialExample1Factory.create()", "var_name": "network"}, {"original_string": "private ContingenciesProvider contingencies = newContingenciesProvider();", "modifier": "private", "type": "ContingenciesProvider", "declarator": "contingencies = newContingenciesProvider()", "var_name": "contingencies"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/distributed/DistributedSecurityAnalysisTest.java"}, "test_case": {"identifier": "testDistributedWithLog", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDistributedWithLog() throws IOException {\n        ExternalSecurityAnalysisConfig config = new ExternalSecurityAnalysisConfig();\n        SecurityAnalysis analysis = new DistributedSecurityAnalysis(config, network, cm, Collections.emptyList(), 5);\n\n        analysis.runWithLog(VariantManagerConstants.INITIAL_VARIANT_ID, new SecurityAnalysisParameters(), contingencies);\n\n        checkInvocationOnExecutionHandler(workingDir);\n        checkWorkingDirContent();\n    }", "signature": "void testDistributedWithLog()", "full_signature": "@Test public void testDistributedWithLog()", "class_method_signature": "DistributedSecurityAnalysisTest.testDistributedWithLog()", "testcase": true, "constructor": false, "invocations": ["emptyList", "runWithLog", "checkInvocationOnExecutionHandler", "checkWorkingDirContent"]}, "focal_class": {"identifier": "DistributedSecurityAnalysis", "superclass": "extends ExternalSecurityAnalysis", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DistributedSecurityAnalysis.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DistributedSecurityAnalysis.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "DistributedSecurityAnalysis", "parameters": "(ExternalSecurityAnalysisConfig config, Network network,\n                                       ComputationManager computationManager, List<String> extensions, int taskCount)", "modifiers": "public", "return": "", "signature": " DistributedSecurityAnalysis(ExternalSecurityAnalysisConfig config, Network network,\n                                       ComputationManager computationManager, List<String> extensions, int taskCount)", "full_signature": "public  DistributedSecurityAnalysis(ExternalSecurityAnalysisConfig config, Network network,\n                                       ComputationManager computationManager, List<String> extensions, int taskCount)", "class_method_signature": "DistributedSecurityAnalysis.DistributedSecurityAnalysis(ExternalSecurityAnalysisConfig config, Network network,\n                                       ComputationManager computationManager, List<String> extensions, int taskCount)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "modifiers": "@Override public", "return": "CompletableFuture<SecurityAnalysisResult>", "signature": "CompletableFuture<SecurityAnalysisResult> run(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "full_signature": "@Override public CompletableFuture<SecurityAnalysisResult> run(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "class_method_signature": "DistributedSecurityAnalysis.run(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "testcase": false, "constructor": false}, {"identifier": "runWithLog", "parameters": "(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "modifiers": "@Override public", "return": "CompletableFuture<SecurityAnalysisResultWithLog>", "signature": "CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "full_signature": "@Override public CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "class_method_signature": "DistributedSecurityAnalysis.runWithLog(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/distributed/DistributedSecurityAnalysis.java"}, "focal_method": {"identifier": "runWithLog", "parameters": "(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "modifiers": "@Override public", "return": "CompletableFuture<SecurityAnalysisResultWithLog>", "body": "@Override\n    public CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider) {\n        LOGGER.debug(\"Starting distributed security analysis(with log).\");\n\n        ExecutionEnvironment itoolsEnv = new ExecutionEnvironment(Collections.emptyMap(), \"security_analysis_task_\", config.isDebug());\n\n        SecurityAnalysisExecutionInput input = buildInput(workingVariantId, parameters, contingenciesProvider);\n\n        List<Contingency> contingencies = contingenciesProvider.getContingencies(network);\n        int actualTaskCount = Math.min(taskCount, Math.max(1, contingencies.size()));\n        return computationManager.execute(itoolsEnv,\n                SecurityAnalysisExecutionHandlers.distributedWithLog(input, actualTaskCount));\n    }", "signature": "CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "full_signature": "@Override public CompletableFuture<SecurityAnalysisResultWithLog> runWithLog(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "class_method_signature": "DistributedSecurityAnalysis.runWithLog(String workingVariantId, SecurityAnalysisParameters parameters, ContingenciesProvider contingenciesProvider)", "testcase": false, "constructor": false, "invocations": ["debug", "emptyMap", "isDebug", "buildInput", "getContingencies", "min", "max", "size", "execute", "distributedWithLog"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}