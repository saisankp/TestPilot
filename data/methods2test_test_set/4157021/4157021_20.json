{"test_class": {"identifier": "InMemoryUserSessionServiceImplTest", "superclass": "extends ServiceTestBase", "interfaces": "", "fields": [], "file": "src/core/services-impl/src/test/java/it/geosolutions/geostore/services/InMemoryUserSessionServiceImplTest.java"}, "test_case": {"identifier": "testInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialization() {\n    \tInMemoryUserSessionServiceImpl service = new InMemoryUserSessionServiceImpl();\n    \tservice.setCleanUpSeconds(500);\n    \tassertTrue(true);\n    }", "signature": "void testInitialization()", "full_signature": "@Test public void testInitialization()", "class_method_signature": "InMemoryUserSessionServiceImplTest.testInitialization()", "testcase": true, "constructor": false, "invocations": ["setCleanUpSeconds", "assertTrue"]}, "focal_class": {"identifier": "InMemoryUserSessionServiceImpl", "superclass": "", "interfaces": "implements UserSessionService", "fields": [{"original_string": "private Map<String, UserSession> sessions = new ConcurrentHashMap<String, UserSession>();", "modifier": "private", "type": "Map<String, UserSession>", "declarator": "sessions = new ConcurrentHashMap<String, UserSession>()", "var_name": "sessions"}, {"original_string": "private int cleanUpSeconds = 60;", "modifier": "private", "type": "int", "declarator": "cleanUpSeconds = 60", "var_name": "cleanUpSeconds"}, {"original_string": "private final ScheduledExecutorService scheduler = Executors\n            .newScheduledThreadPool(1);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduler = Executors\n            .newScheduledThreadPool(1)", "var_name": "scheduler"}, {"original_string": "private Runnable evictionTask = new Runnable() {\n        @Override\n        public void run() {\n            for(String sessionId : sessions.keySet()) {\n                UserSession session = sessions.get(sessionId);\n                if(session.isExpired()) {\n                    removeSession(sessionId);\n                }\n            }\n        }\n    };", "modifier": "private", "type": "Runnable", "declarator": "evictionTask = new Runnable() {\n        @Override\n        public void run() {\n            for(String sessionId : sessions.keySet()) {\n                UserSession session = sessions.get(sessionId);\n                if(session.isExpired()) {\n                    removeSession(sessionId);\n                }\n            }\n        }\n    }", "var_name": "evictionTask"}], "methods": [{"identifier": "InMemoryUserSessionServiceImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " InMemoryUserSessionServiceImpl()", "full_signature": "public  InMemoryUserSessionServiceImpl()", "class_method_signature": "InMemoryUserSessionServiceImpl.InMemoryUserSessionServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "setCleanUpSeconds", "parameters": "(int cleanUpSeconds)", "modifiers": "public", "return": "void", "signature": "void setCleanUpSeconds(int cleanUpSeconds)", "full_signature": "public void setCleanUpSeconds(int cleanUpSeconds)", "class_method_signature": "InMemoryUserSessionServiceImpl.setCleanUpSeconds(int cleanUpSeconds)", "testcase": false, "constructor": false}, {"identifier": "getUserData", "parameters": "(String sessionId)", "modifiers": "@Override public", "return": "User", "signature": "User getUserData(String sessionId)", "full_signature": "@Override public User getUserData(String sessionId)", "class_method_signature": "InMemoryUserSessionServiceImpl.getUserData(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "registerNewSession", "parameters": "(String sessionId, UserSession session)", "modifiers": "@Override public", "return": "void", "signature": "void registerNewSession(String sessionId, UserSession session)", "full_signature": "@Override public void registerNewSession(String sessionId, UserSession session)", "class_method_signature": "InMemoryUserSessionServiceImpl.registerNewSession(String sessionId, UserSession session)", "testcase": false, "constructor": false}, {"identifier": "registerNewSession", "parameters": "(UserSession session)", "modifiers": "@Override public", "return": "String", "signature": "String registerNewSession(UserSession session)", "full_signature": "@Override public String registerNewSession(UserSession session)", "class_method_signature": "InMemoryUserSessionServiceImpl.registerNewSession(UserSession session)", "testcase": false, "constructor": false}, {"identifier": "createSessionId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String createSessionId()", "full_signature": "private String createSessionId()", "class_method_signature": "InMemoryUserSessionServiceImpl.createSessionId()", "testcase": false, "constructor": false}, {"identifier": "removeSession", "parameters": "(String sessionId)", "modifiers": "@Override public", "return": "void", "signature": "void removeSession(String sessionId)", "full_signature": "@Override public void removeSession(String sessionId)", "class_method_signature": "InMemoryUserSessionServiceImpl.removeSession(String sessionId)", "testcase": false, "constructor": false}, {"identifier": "removeAllSessions", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllSessions()", "full_signature": "@Override public void removeAllSessions()", "class_method_signature": "InMemoryUserSessionServiceImpl.removeAllSessions()", "testcase": false, "constructor": false}, {"identifier": "isOwner", "parameters": "(String sessionId, Object owner)", "modifiers": "public", "return": "boolean", "signature": "boolean isOwner(String sessionId, Object owner)", "full_signature": "public boolean isOwner(String sessionId, Object owner)", "class_method_signature": "InMemoryUserSessionServiceImpl.isOwner(String sessionId, Object owner)", "testcase": false, "constructor": false}, {"identifier": "refreshSession", "parameters": "(String sessionId, String refreshToken)", "modifiers": "@Override public", "return": "UserSession", "signature": "UserSession refreshSession(String sessionId, String refreshToken)", "full_signature": "@Override public UserSession refreshSession(String sessionId, String refreshToken)", "class_method_signature": "InMemoryUserSessionServiceImpl.refreshSession(String sessionId, String refreshToken)", "testcase": false, "constructor": false}, {"identifier": "getRefreshToken", "parameters": "(String sessionId)", "modifiers": "@Override public", "return": "String", "signature": "String getRefreshToken(String sessionId)", "full_signature": "@Override public String getRefreshToken(String sessionId)", "class_method_signature": "InMemoryUserSessionServiceImpl.getRefreshToken(String sessionId)", "testcase": false, "constructor": false}], "file": "src/core/services-impl/src/main/java/it/geosolutions/geostore/services/InMemoryUserSessionServiceImpl.java"}, "focal_method": {"identifier": "setCleanUpSeconds", "parameters": "(int cleanUpSeconds)", "modifiers": "public", "return": "void", "body": "public void setCleanUpSeconds(int cleanUpSeconds) {\n        this.cleanUpSeconds = cleanUpSeconds;\n    }", "signature": "void setCleanUpSeconds(int cleanUpSeconds)", "full_signature": "public void setCleanUpSeconds(int cleanUpSeconds)", "class_method_signature": "InMemoryUserSessionServiceImpl.setCleanUpSeconds(int cleanUpSeconds)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4157021, "url": "https://github.com/geosolutions-it/geostore", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 19, "size": 1798, "license": "licensed"}}