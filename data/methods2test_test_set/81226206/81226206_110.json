{"test_class": {"identifier": "FeatureBackendTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(FeatureBackendTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FeatureBackendTest.class)", "var_name": "logger"}], "file": "karate-core/src/test/java/com/intuit/karate/core/FeatureBackendTest.java"}, "test_case": {"identifier": "testMultipleServerFeatures", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleServerFeatures() {\n        Feature feature = FeatureParser.parse(FileUtils.getFileRelativeTo(getClass(), \"server.feature\"));\n        Feature feature2 = FeatureParser.parse(FileUtils.getFileRelativeTo(getClass(), \"server-path-matching.feature\"));\n        FeaturesBackend backend = new FeaturesBackend(new Feature[]{feature, feature2});\n\n        Match match = new Match()\n                .text(ScriptValueMap.VAR_REQUEST_URI, \"/v10/cats\")\n                .text(ScriptValueMap.VAR_REQUEST_METHOD, \"GET\");\n\n        FeatureBackend.FeatureScenarioMatch matchingInfo = backend.getMatchingScenario(match.vars());\n\n        Assert.assertNotNull(matchingInfo.getFeatureBackend());\n        Assert.assertNotNull(matchingInfo.getScenario());\n        Assert.assertEquals(\"server-path-matching.feature\", matchingInfo.getFeatureBackend().getFeatureName());\n        Assert.assertThat(matchingInfo.getScenario().getName(), containsString(\"/v10/cats\"));\n    }", "signature": "void testMultipleServerFeatures()", "full_signature": "@Test public void testMultipleServerFeatures()", "class_method_signature": "FeatureBackendTest.testMultipleServerFeatures()", "testcase": true, "constructor": false, "invocations": ["parse", "getFileRelativeTo", "getClass", "parse", "getFileRelativeTo", "getClass", "text", "text", "getMatchingScenario", "vars", "assertNotNull", "getFeatureBackend", "assertNotNull", "getScenario", "assertEquals", "getFeatureName", "getFeatureBackend", "assertThat", "getName", "getScenario", "containsString"]}, "focal_class": {"identifier": "FeatureBackend", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ALLOWED_METHODS = \"GET, HEAD, POST, PUT, DELETE, PATCH\";", "modifier": "private static final", "type": "String", "declarator": "ALLOWED_METHODS = \"GET, HEAD, POST, PUT, DELETE, PATCH\"", "var_name": "ALLOWED_METHODS"}, {"original_string": "private final Feature feature;", "modifier": "private final", "type": "Feature", "declarator": "feature", "var_name": "feature"}, {"original_string": "private final StepActions actions;", "modifier": "private final", "type": "StepActions", "declarator": "actions", "var_name": "actions"}, {"original_string": "private final ScenarioContext context;", "modifier": "private final", "type": "ScenarioContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final String featureName;", "modifier": "private final", "type": "String", "declarator": "featureName", "var_name": "featureName"}, {"original_string": "private static final String VAR_AFTER_SCENARIO = \"afterScenario\";", "modifier": "private static final", "type": "String", "declarator": "VAR_AFTER_SCENARIO = \"afterScenario\"", "var_name": "VAR_AFTER_SCENARIO"}], "methods": [{"identifier": "putBinding", "parameters": "(String name, ScenarioContext context)", "modifiers": "private static", "return": "void", "signature": "void putBinding(String name, ScenarioContext context)", "full_signature": "private static void putBinding(String name, ScenarioContext context)", "class_method_signature": "FeatureBackend.putBinding(String name, ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "putBinding2", "parameters": "(String name, ScenarioContext context)", "modifiers": "private static", "return": "void", "signature": "void putBinding2(String name, ScenarioContext context)", "full_signature": "private static void putBinding2(String name, ScenarioContext context)", "class_method_signature": "FeatureBackend.putBinding2(String name, ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "ScenarioContext", "signature": "ScenarioContext getContext()", "full_signature": "public ScenarioContext getContext()", "class_method_signature": "FeatureBackend.getContext()", "testcase": false, "constructor": false}, {"identifier": "getFeatureName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFeatureName()", "full_signature": "public String getFeatureName()", "class_method_signature": "FeatureBackend.getFeatureName()", "testcase": false, "constructor": false}, {"identifier": "FeatureBackend", "parameters": "(Feature feature)", "modifiers": "public", "return": "", "signature": " FeatureBackend(Feature feature)", "full_signature": "public  FeatureBackend(Feature feature)", "class_method_signature": "FeatureBackend.FeatureBackend(Feature feature)", "testcase": false, "constructor": true}, {"identifier": "FeatureBackend", "parameters": "(Feature feature, Map<String, Object> arg)", "modifiers": "public", "return": "", "signature": " FeatureBackend(Feature feature, Map<String, Object> arg)", "full_signature": "public  FeatureBackend(Feature feature, Map<String, Object> arg)", "class_method_signature": "FeatureBackend.FeatureBackend(Feature feature, Map<String, Object> arg)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(ScriptValueMap args, Scenario scenario)", "modifiers": "public", "return": "ScriptValueMap", "signature": "ScriptValueMap handle(ScriptValueMap args, Scenario scenario)", "full_signature": "public ScriptValueMap handle(ScriptValueMap args, Scenario scenario)", "class_method_signature": "FeatureBackend.handle(ScriptValueMap args, Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "getMatchingScenarios", "parameters": "(ScriptValueMap args)", "modifiers": "public", "return": "List<FeatureScenarioMatch>", "signature": "List<FeatureScenarioMatch> getMatchingScenarios(ScriptValueMap args)", "full_signature": "public List<FeatureScenarioMatch> getMatchingScenarios(ScriptValueMap args)", "class_method_signature": "FeatureBackend.getMatchingScenarios(ScriptValueMap args)", "testcase": false, "constructor": false}, {"identifier": "isMatchingScenario", "parameters": "(Scenario scenario)", "modifiers": "private", "return": "boolean", "signature": "boolean isMatchingScenario(Scenario scenario)", "full_signature": "private boolean isMatchingScenario(Scenario scenario)", "class_method_signature": "FeatureBackend.isMatchingScenario(Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "getDefaultScenario", "parameters": "(ScriptValueMap args)", "modifiers": "public", "return": "Scenario", "signature": "Scenario getDefaultScenario(ScriptValueMap args)", "full_signature": "public Scenario getDefaultScenario(ScriptValueMap args)", "class_method_signature": "FeatureBackend.getDefaultScenario(ScriptValueMap args)", "testcase": false, "constructor": false}, {"identifier": "isDefaultScenario", "parameters": "(Scenario scenario)", "modifiers": "private", "return": "boolean", "signature": "boolean isDefaultScenario(Scenario scenario)", "full_signature": "private boolean isDefaultScenario(Scenario scenario)", "class_method_signature": "FeatureBackend.isDefaultScenario(Scenario scenario)", "testcase": false, "constructor": false}, {"identifier": "corsCheck", "parameters": "(HttpRequest request, long startTime)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse corsCheck(HttpRequest request, long startTime)", "full_signature": "public HttpResponse corsCheck(HttpRequest request, long startTime)", "class_method_signature": "FeatureBackend.corsCheck(HttpRequest request, long startTime)", "testcase": false, "constructor": false}, {"identifier": "buildResponse", "parameters": "(HttpRequest request, long startTime, Scenario scenario, ScriptValueMap args)", "modifiers": "public", "return": "HttpResponse", "signature": "HttpResponse buildResponse(HttpRequest request, long startTime, Scenario scenario, ScriptValueMap args)", "full_signature": "public HttpResponse buildResponse(HttpRequest request, long startTime, Scenario scenario, ScriptValueMap args)", "class_method_signature": "FeatureBackend.buildResponse(HttpRequest request, long startTime, Scenario scenario, ScriptValueMap args)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/core/FeatureBackend.java"}, "focal_method": {"identifier": "getFeatureName", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getFeatureName() {\n        return featureName;\n    }", "signature": "String getFeatureName()", "full_signature": "public String getFeatureName()", "class_method_signature": "FeatureBackend.getFeatureName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}