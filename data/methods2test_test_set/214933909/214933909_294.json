{"test_class": {"identifier": "ApiExtControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private ProjectDao projectDao;", "modifier": "@MockBean\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@MockBean\n    private DataBaseDao dataBaseDao;", "modifier": "@MockBean\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@MockBean\n    private DatabaseSetDao databaseSetDao;", "modifier": "@MockBean\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "private MockMvc mvc;", "modifier": "private", "type": "MockMvc", "declarator": "mvc", "var_name": "mvc"}, {"original_string": "private MockHttpSession session;", "modifier": "private", "type": "MockHttpSession", "declarator": "session", "var_name": "session"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/ApiExtControllerTest.java"}, "test_case": {"identifier": "check", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void check() throws Exception {\n        mvc.perform(MockMvcRequestBuilders.get(\"/apiext/data?appid=1001\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                //.andExpect(MockMvcResultMatchers.jsonPath(\"$.author\").value(\"\u561f\u561fMD\u72ec\u7acb\u535a\u5ba2\"))\n                //.andExpect(MockMvcResultMatchers.jsonPath(\"$.title\").value(\"Spring Boot\u5e72\u8d27\u7cfb\u5217\"))\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void check()", "full_signature": "@Test public void check()", "class_method_signature": "ApiExtControllerTest.check()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "contentType", "get", "isOk", "status", "print"]}, "focal_class": {"identifier": "ApiExtController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ProjectDao projectDao;", "modifier": "@Autowired\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Autowired\n    private ProjectService projectService;", "modifier": "@Autowired\n    private", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}, {"original_string": "@Autowired\n    private DatabaseSetService databaseSetService;", "modifier": "@Autowired\n    private", "type": "DatabaseSetService", "declarator": "databaseSetService", "var_name": "databaseSetService"}, {"original_string": "@Autowired\n    private DataBaseDao dataBaseDao;", "modifier": "@Autowired\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@Autowired\n    private DatabaseSetDao databaseSetDao;", "modifier": "@Autowired\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@Autowired\n    private DatabaseService databaseService;", "modifier": "@Autowired\n    private", "type": "DatabaseService", "declarator": "databaseService", "var_name": "databaseService"}], "methods": [{"identifier": "check", "parameters": "(@RequestParam(\"appid\") String appid)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ServiceResult", "signature": "ServiceResult check(@RequestParam(\"appid\") String appid)", "full_signature": "@RequestMapping(value = \"/check\") public ServiceResult check(@RequestParam(\"appid\") String appid)", "class_method_signature": "ApiExtController.check(@RequestParam(\"appid\") String appid)", "testcase": false, "constructor": false}, {"identifier": "checkDblist", "parameters": "(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/checkDblist\") public", "return": "ServiceResult", "signature": "ServiceResult checkDblist(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/checkDblist\") public ServiceResult checkDblist(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user)", "class_method_signature": "ApiExtController.checkDblist(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "checkAll", "parameters": "(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user, HttpServletRequest request)", "modifiers": "@RequestMapping(value = \"/checkAll\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> checkAll(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user, HttpServletRequest request)", "full_signature": "@RequestMapping(value = \"/checkAll\") public ServiceResult<String> checkAll(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user, HttpServletRequest request)", "class_method_signature": "ApiExtController.checkAll(@RequestParam(\"appid\") String appid, @CurrentUser LoginUser user, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "appidExist", "parameters": "(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid)", "modifiers": "@RequestMapping(value = \"/appidExist\") public", "return": "ServiceResult", "signature": "ServiceResult appidExist(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid)", "full_signature": "@RequestMapping(value = \"/appidExist\") public ServiceResult appidExist(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid)", "class_method_signature": "ApiExtController.appidExist(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/ApiExtController.java"}, "focal_method": {"identifier": "check", "parameters": "(@RequestParam(\"appid\") String appid)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ServiceResult", "body": "@RequestMapping(value = \"/check\")\n    public ServiceResult check(@RequestParam(\"appid\") String appid) {\n        try {\n            if (null != appid) {\n                Project project = projectDao.getProjectByAppId(appid);\n                CheckIDsView checkIDsView = new CheckIDsView(project.getId(), project.getDal_group_id());\n                return ServiceResult.success(checkIDsView);\n            } else {\n                return ServiceResult.fail(\"ApiExtController.data appid \u4e3a\u7a7a\");\n            }\n        } catch (Exception e) {\n            return ServiceResult.fail(\"ApiExtController.data appid : \" + appid + \"   \" + StringUtil.getMessage(e));\n        }\n    }", "signature": "ServiceResult check(@RequestParam(\"appid\") String appid)", "full_signature": "@RequestMapping(value = \"/check\") public ServiceResult check(@RequestParam(\"appid\") String appid)", "class_method_signature": "ApiExtController.check(@RequestParam(\"appid\") String appid)", "testcase": false, "constructor": false, "invocations": ["getProjectByAppId", "getId", "getDal_group_id", "success", "fail", "fail", "getMessage"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}