{"test_class": {"identifier": "StorageGroupProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String storageGroup = \"root.vehicle.d0\";", "modifier": "private", "type": "String", "declarator": "storageGroup = \"root.vehicle.d0\"", "var_name": "storageGroup"}, {"original_string": "private String systemDir = TestConstant.OUTPUT_DATA_DIR.concat(\"info\");", "modifier": "private", "type": "String", "declarator": "systemDir = TestConstant.OUTPUT_DATA_DIR.concat(\"info\")", "var_name": "systemDir"}, {"original_string": "private String deviceId = \"root.vehicle.d0\";", "modifier": "private", "type": "String", "declarator": "deviceId = \"root.vehicle.d0\"", "var_name": "deviceId"}, {"original_string": "private String measurementId = \"s0\";", "modifier": "private", "type": "String", "declarator": "measurementId = \"s0\"", "var_name": "measurementId"}, {"original_string": "private StorageGroupProcessor processor;", "modifier": "private", "type": "StorageGroupProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private QueryContext context = EnvironmentUtils.TEST_QUERY_CONTEXT;", "modifier": "private", "type": "QueryContext", "declarator": "context = EnvironmentUtils.TEST_QUERY_CONTEXT", "var_name": "context"}, {"original_string": "private AtomicLong mergeLock;", "modifier": "private", "type": "AtomicLong", "declarator": "mergeLock", "var_name": "mergeLock"}], "file": "server/src/test/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessorTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMerge() throws WriteProcessException, QueryProcessException, IllegalPathException {\n\n    mergeLock = new AtomicLong(0);\n    for (int j = 21; j <= 30; j++) {\n      TSRecord record = new TSRecord(j, deviceId);\n      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n      insertToStorageGroupProcessor(record);\n      processor.asyncCloseAllWorkingTsFileProcessors();\n    }\n    processor.syncCloseAllWorkingTsFileProcessors();\n\n    for (int j = 10; j >= 1; j--) {\n      TSRecord record = new TSRecord(j, deviceId);\n      record.addTuple(DataPoint.getDataPoint(TSDataType.INT32, measurementId, String.valueOf(j)));\n      insertToStorageGroupProcessor(record);\n      processor.asyncCloseAllWorkingTsFileProcessors();\n    }\n\n    processor.syncCloseAllWorkingTsFileProcessors();\n    processor.merge(true);\n    while (mergeLock.get() == 0) {\n      // wait\n    }\n\n    QueryDataSource queryDataSource = processor.query(new PartialPath(deviceId), measurementId, context,\n        null, null);\n    Assert.assertEquals(10, queryDataSource.getSeqResources().size());\n    Assert.assertEquals(0, queryDataSource.getUnseqResources().size());\n    for (TsFileResource resource : queryDataSource.getSeqResources()) {\n      Assert.assertTrue(resource.isClosed());\n    }\n    for (TsFileResource resource : queryDataSource.getUnseqResources()) {\n      Assert.assertTrue(resource.isClosed());\n    }\n  }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "StorageGroupProcessorTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["addTuple", "getDataPoint", "valueOf", "insertToStorageGroupProcessor", "asyncCloseAllWorkingTsFileProcessors", "syncCloseAllWorkingTsFileProcessors", "addTuple", "getDataPoint", "valueOf", "insertToStorageGroupProcessor", "asyncCloseAllWorkingTsFileProcessors", "syncCloseAllWorkingTsFileProcessors", "merge", "get", "query", "assertEquals", "size", "getSeqResources", "assertEquals", "size", "getUnseqResources", "getSeqResources", "assertTrue", "isClosed", "getUnseqResources", "assertTrue", "isClosed"]}, "focal_class": {"identifier": "StorageGroupProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MERGING_MODIFICATION_FILE_NAME = \"merge.mods\";", "modifier": "private static final", "type": "String", "declarator": "MERGING_MODIFICATION_FILE_NAME = \"merge.mods\"", "var_name": "MERGING_MODIFICATION_FILE_NAME"}, {"original_string": "private static final int MERGE_MOD_START_VERSION_NUM = 1;", "modifier": "private static final", "type": "int", "declarator": "MERGE_MOD_START_VERSION_NUM = 1", "var_name": "MERGE_MOD_START_VERSION_NUM"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(StorageGroupProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(StorageGroupProcessor.class)", "var_name": "logger"}, {"original_string": "private static final int POS_ALREADY_EXIST = -2;", "modifier": "private static final", "type": "int", "declarator": "POS_ALREADY_EXIST = -2", "var_name": "POS_ALREADY_EXIST"}, {"original_string": "private static final int POS_OVERLAP = -3;", "modifier": "private static final", "type": "int", "declarator": "POS_OVERLAP = -3", "var_name": "POS_OVERLAP"}, {"original_string": "private final ReadWriteLock insertLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "insertLock = new ReentrantReadWriteLock()", "var_name": "insertLock"}, {"original_string": "private final Object closeStorageGroupCondition = new Object();", "modifier": "private final", "type": "Object", "declarator": "closeStorageGroupCondition = new Object()", "var_name": "closeStorageGroupCondition"}, {"original_string": "private volatile boolean hotCompactionMergeWorking = false;", "modifier": "private volatile", "type": "boolean", "declarator": "hotCompactionMergeWorking = false", "var_name": "hotCompactionMergeWorking"}, {"original_string": "private final ReadWriteLock closeQueryLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "closeQueryLock = new ReentrantReadWriteLock()", "var_name": "closeQueryLock"}, {"original_string": "private final TreeMap<Long, TsFileProcessor> workSequenceTsFileProcessors = new TreeMap<>();", "modifier": "private final", "type": "TreeMap<Long, TsFileProcessor>", "declarator": "workSequenceTsFileProcessors = new TreeMap<>()", "var_name": "workSequenceTsFileProcessors"}, {"original_string": "private final TreeMap<Long, TsFileProcessor> workUnsequenceTsFileProcessors = new TreeMap<>();", "modifier": "private final", "type": "TreeMap<Long, TsFileProcessor>", "declarator": "workUnsequenceTsFileProcessors = new TreeMap<>()", "var_name": "workUnsequenceTsFileProcessors"}, {"original_string": "private List<TsFileResource> upgradeSeqFileList = new LinkedList<>();", "modifier": "private", "type": "List<TsFileResource>", "declarator": "upgradeSeqFileList = new LinkedList<>()", "var_name": "upgradeSeqFileList"}, {"original_string": "private CopyOnReadLinkedList<TsFileProcessor> closingSequenceTsFileProcessor = new CopyOnReadLinkedList<>();", "modifier": "private", "type": "CopyOnReadLinkedList<TsFileProcessor>", "declarator": "closingSequenceTsFileProcessor = new CopyOnReadLinkedList<>()", "var_name": "closingSequenceTsFileProcessor"}, {"original_string": "private List<TsFileResource> upgradeUnseqFileList = new LinkedList<>();", "modifier": "private", "type": "List<TsFileResource>", "declarator": "upgradeUnseqFileList = new LinkedList<>()", "var_name": "upgradeUnseqFileList"}, {"original_string": "private CopyOnReadLinkedList<TsFileProcessor> closingUnSequenceTsFileProcessor = new CopyOnReadLinkedList<>();", "modifier": "private", "type": "CopyOnReadLinkedList<TsFileProcessor>", "declarator": "closingUnSequenceTsFileProcessor = new CopyOnReadLinkedList<>()", "var_name": "closingUnSequenceTsFileProcessor"}, {"original_string": "private Map<Long, Map<String, Long>> latestTimeForEachDevice = new HashMap<>();", "modifier": "private", "type": "Map<Long, Map<String, Long>>", "declarator": "latestTimeForEachDevice = new HashMap<>()", "var_name": "latestTimeForEachDevice"}, {"original_string": "private Map<Long, Map<String, Long>> partitionLatestFlushedTimeForEachDevice = new HashMap<>();", "modifier": "private", "type": "Map<Long, Map<String, Long>>", "declarator": "partitionLatestFlushedTimeForEachDevice = new HashMap<>()", "var_name": "partitionLatestFlushedTimeForEachDevice"}, {"original_string": "private Map<Long, Map<String, Long>> newlyFlushedPartitionLatestFlushedTimeForEachDevice = new HashMap<>();", "modifier": "private", "type": "Map<Long, Map<String, Long>>", "declarator": "newlyFlushedPartitionLatestFlushedTimeForEachDevice = new HashMap<>()", "var_name": "newlyFlushedPartitionLatestFlushedTimeForEachDevice"}, {"original_string": "private Map<String, Long> globalLatestFlushedTimeForEachDevice = new HashMap<>();", "modifier": "private", "type": "Map<String, Long>", "declarator": "globalLatestFlushedTimeForEachDevice = new HashMap<>()", "var_name": "globalLatestFlushedTimeForEachDevice"}, {"original_string": "private String storageGroupName;", "modifier": "private", "type": "String", "declarator": "storageGroupName", "var_name": "storageGroupName"}, {"original_string": "private File storageGroupSysDir;", "modifier": "private", "type": "File", "declarator": "storageGroupSysDir", "var_name": "storageGroupSysDir"}, {"original_string": "private TsFileManagement tsFileManagement;", "modifier": "private", "type": "TsFileManagement", "declarator": "tsFileManagement", "var_name": "tsFileManagement"}, {"original_string": "private HashMap<Long, VersionController> timePartitionIdVersionControllerMap = new HashMap<>();", "modifier": "private", "type": "HashMap<Long, VersionController>", "declarator": "timePartitionIdVersionControllerMap = new HashMap<>()", "var_name": "timePartitionIdVersionControllerMap"}, {"original_string": "private ReentrantReadWriteLock mergeLock = new ReentrantReadWriteLock();", "modifier": "private", "type": "ReentrantReadWriteLock", "declarator": "mergeLock = new ReentrantReadWriteLock()", "var_name": "mergeLock"}, {"original_string": "private ModificationFile mergingModification;", "modifier": "private", "type": "ModificationFile", "declarator": "mergingModification", "var_name": "mergingModification"}, {"original_string": "private volatile boolean isMerging = false;", "modifier": "private volatile", "type": "boolean", "declarator": "isMerging = false", "var_name": "isMerging"}, {"original_string": "private long mergeStartTime;", "modifier": "private", "type": "long", "declarator": "mergeStartTime", "var_name": "mergeStartTime"}, {"original_string": "private long dataTTL = Long.MAX_VALUE;", "modifier": "private", "type": "long", "declarator": "dataTTL = Long.MAX_VALUE", "var_name": "dataTTL"}, {"original_string": "private FSFactory fsFactory = FSFactoryProducer.getFSFactory();", "modifier": "private", "type": "FSFactory", "declarator": "fsFactory = FSFactoryProducer.getFSFactory()", "var_name": "fsFactory"}, {"original_string": "private TsFileFlushPolicy fileFlushPolicy;", "modifier": "private", "type": "TsFileFlushPolicy", "declarator": "fileFlushPolicy", "var_name": "fileFlushPolicy"}, {"original_string": "private Map<Long, Set<Long>> partitionDirectFileVersions = new HashMap<>();", "modifier": "private", "type": "Map<Long, Set<Long>>", "declarator": "partitionDirectFileVersions = new HashMap<>()", "var_name": "partitionDirectFileVersions"}, {"original_string": "private Map<Long, Long> partitionMaxFileVersions = new HashMap<>();", "modifier": "private", "type": "Map<Long, Long>", "declarator": "partitionMaxFileVersions = new HashMap<>()", "var_name": "partitionMaxFileVersions"}], "methods": [{"identifier": "StorageGroupProcessor", "parameters": "(String systemDir, String storageGroupName,\n      TsFileFlushPolicy fileFlushPolicy)", "modifiers": "public", "return": "", "signature": " StorageGroupProcessor(String systemDir, String storageGroupName,\n      TsFileFlushPolicy fileFlushPolicy)", "full_signature": "public  StorageGroupProcessor(String systemDir, String storageGroupName,\n      TsFileFlushPolicy fileFlushPolicy)", "class_method_signature": "StorageGroupProcessor.StorageGroupProcessor(String systemDir, String storageGroupName,\n      TsFileFlushPolicy fileFlushPolicy)", "testcase": false, "constructor": true}, {"identifier": "splitResourcesByPartition", "parameters": "(\n      List<TsFileResource> resources)", "modifiers": "private", "return": "Map<Long, List<TsFileResource>>", "signature": "Map<Long, List<TsFileResource>> splitResourcesByPartition(\n      List<TsFileResource> resources)", "full_signature": "private Map<Long, List<TsFileResource>> splitResourcesByPartition(\n      List<TsFileResource> resources)", "class_method_signature": "StorageGroupProcessor.splitResourcesByPartition(\n      List<TsFileResource> resources)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void recover()", "full_signature": "private void recover()", "class_method_signature": "StorageGroupProcessor.recover()", "testcase": false, "constructor": false}, {"identifier": "updatePartitionFileVersion", "parameters": "(long partitionNum, long fileVersion)", "modifiers": "private", "return": "void", "signature": "void updatePartitionFileVersion(long partitionNum, long fileVersion)", "full_signature": "private void updatePartitionFileVersion(long partitionNum, long fileVersion)", "class_method_signature": "StorageGroupProcessor.updatePartitionFileVersion(long partitionNum, long fileVersion)", "testcase": false, "constructor": false}, {"identifier": "updateLastestFlushedTime", "parameters": "()", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private", "return": "void", "signature": "void updateLastestFlushedTime()", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private void updateLastestFlushedTime()", "class_method_signature": "StorageGroupProcessor.updateLastestFlushedTime()", "testcase": false, "constructor": false}, {"identifier": "getVersionControllerByTimePartitionId", "parameters": "(long timePartitionId)", "modifiers": "private", "return": "VersionController", "signature": "VersionController getVersionControllerByTimePartitionId(long timePartitionId)", "full_signature": "private VersionController getVersionControllerByTimePartitionId(long timePartitionId)", "class_method_signature": "StorageGroupProcessor.getVersionControllerByTimePartitionId(long timePartitionId)", "testcase": false, "constructor": false}, {"identifier": "getAllFiles", "parameters": "(List<String> folders)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private", "return": "Pair<List<TsFileResource>, List<TsFileResource>>", "signature": "Pair<List<TsFileResource>, List<TsFileResource>> getAllFiles(List<String> folders)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning private Pair<List<TsFileResource>, List<TsFileResource>> getAllFiles(List<String> folders)", "class_method_signature": "StorageGroupProcessor.getAllFiles(List<String> folders)", "testcase": false, "constructor": false}, {"identifier": "continueFailedRenames", "parameters": "(File fileFolder, String suffix)", "modifiers": "private", "return": "void", "signature": "void continueFailedRenames(File fileFolder, String suffix)", "full_signature": "private void continueFailedRenames(File fileFolder, String suffix)", "class_method_signature": "StorageGroupProcessor.continueFailedRenames(File fileFolder, String suffix)", "testcase": false, "constructor": false}, {"identifier": "recoverTsFiles", "parameters": "(List<TsFileResource> tsFiles, boolean isSeq)", "modifiers": "private", "return": "void", "signature": "void recoverTsFiles(List<TsFileResource> tsFiles, boolean isSeq)", "full_signature": "private void recoverTsFiles(List<TsFileResource> tsFiles, boolean isSeq)", "class_method_signature": "StorageGroupProcessor.recoverTsFiles(List<TsFileResource> tsFiles, boolean isSeq)", "testcase": false, "constructor": false}, {"identifier": "compareFileName", "parameters": "(File o1, File o2)", "modifiers": "private", "return": "int", "signature": "int compareFileName(File o1, File o2)", "full_signature": "private int compareFileName(File o1, File o2)", "class_method_signature": "StorageGroupProcessor.compareFileName(File o1, File o2)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(InsertRowPlan insertRowPlan)", "modifiers": "public", "return": "void", "signature": "void insert(InsertRowPlan insertRowPlan)", "full_signature": "public void insert(InsertRowPlan insertRowPlan)", "class_method_signature": "StorageGroupProcessor.insert(InsertRowPlan insertRowPlan)", "testcase": false, "constructor": false}, {"identifier": "insertTablet", "parameters": "(InsertTabletPlan insertTabletPlan)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public", "return": "void", "signature": "void insertTablet(InsertTabletPlan insertTabletPlan)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public void insertTablet(InsertTabletPlan insertTabletPlan)", "class_method_signature": "StorageGroupProcessor.insertTablet(InsertTabletPlan insertTabletPlan)", "testcase": false, "constructor": false}, {"identifier": "isAlive", "parameters": "(long time)", "modifiers": "private", "return": "boolean", "signature": "boolean isAlive(long time)", "full_signature": "private boolean isAlive(long time)", "class_method_signature": "StorageGroupProcessor.isAlive(long time)", "testcase": false, "constructor": false}, {"identifier": "insertTabletToTsFileProcessor", "parameters": "(InsertTabletPlan insertTabletPlan,\n      int start, int end, boolean sequence, TSStatus[] results, long timePartitionId)", "modifiers": "private", "return": "boolean", "signature": "boolean insertTabletToTsFileProcessor(InsertTabletPlan insertTabletPlan,\n      int start, int end, boolean sequence, TSStatus[] results, long timePartitionId)", "full_signature": "private boolean insertTabletToTsFileProcessor(InsertTabletPlan insertTabletPlan,\n      int start, int end, boolean sequence, TSStatus[] results, long timePartitionId)", "class_method_signature": "StorageGroupProcessor.insertTabletToTsFileProcessor(InsertTabletPlan insertTabletPlan,\n      int start, int end, boolean sequence, TSStatus[] results, long timePartitionId)", "testcase": false, "constructor": false}, {"identifier": "tryToUpdateBatchInsertLastCache", "parameters": "(InsertTabletPlan plan, Long latestFlushedTime)", "modifiers": "private", "return": "void", "signature": "void tryToUpdateBatchInsertLastCache(InsertTabletPlan plan, Long latestFlushedTime)", "full_signature": "private void tryToUpdateBatchInsertLastCache(InsertTabletPlan plan, Long latestFlushedTime)", "class_method_signature": "StorageGroupProcessor.tryToUpdateBatchInsertLastCache(InsertTabletPlan plan, Long latestFlushedTime)", "testcase": false, "constructor": false}, {"identifier": "insertToTsFileProcessor", "parameters": "(InsertRowPlan insertRowPlan, boolean sequence)", "modifiers": "private", "return": "void", "signature": "void insertToTsFileProcessor(InsertRowPlan insertRowPlan, boolean sequence)", "full_signature": "private void insertToTsFileProcessor(InsertRowPlan insertRowPlan, boolean sequence)", "class_method_signature": "StorageGroupProcessor.insertToTsFileProcessor(InsertRowPlan insertRowPlan, boolean sequence)", "testcase": false, "constructor": false}, {"identifier": "tryToUpdateInsertLastCache", "parameters": "(InsertRowPlan plan, Long latestFlushedTime)", "modifiers": "private", "return": "void", "signature": "void tryToUpdateInsertLastCache(InsertRowPlan plan, Long latestFlushedTime)", "full_signature": "private void tryToUpdateInsertLastCache(InsertRowPlan plan, Long latestFlushedTime)", "class_method_signature": "StorageGroupProcessor.tryToUpdateInsertLastCache(InsertRowPlan plan, Long latestFlushedTime)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateTsFileProcessor", "parameters": "(long timeRangeId, boolean sequence)", "modifiers": "private", "return": "TsFileProcessor", "signature": "TsFileProcessor getOrCreateTsFileProcessor(long timeRangeId, boolean sequence)", "full_signature": "private TsFileProcessor getOrCreateTsFileProcessor(long timeRangeId, boolean sequence)", "class_method_signature": "StorageGroupProcessor.getOrCreateTsFileProcessor(long timeRangeId, boolean sequence)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateTsFileProcessorIntern", "parameters": "(long timeRangeId,\n      TreeMap<Long, TsFileProcessor> tsFileProcessorTreeMap,\n      boolean sequence)", "modifiers": "private", "return": "TsFileProcessor", "signature": "TsFileProcessor getOrCreateTsFileProcessorIntern(long timeRangeId,\n      TreeMap<Long, TsFileProcessor> tsFileProcessorTreeMap,\n      boolean sequence)", "full_signature": "private TsFileProcessor getOrCreateTsFileProcessorIntern(long timeRangeId,\n      TreeMap<Long, TsFileProcessor> tsFileProcessorTreeMap,\n      boolean sequence)", "class_method_signature": "StorageGroupProcessor.getOrCreateTsFileProcessorIntern(long timeRangeId,\n      TreeMap<Long, TsFileProcessor> tsFileProcessorTreeMap,\n      boolean sequence)", "testcase": false, "constructor": false}, {"identifier": "createTsFileProcessor", "parameters": "(boolean sequence, long timePartitionId)", "modifiers": "private", "return": "TsFileProcessor", "signature": "TsFileProcessor createTsFileProcessor(boolean sequence, long timePartitionId)", "full_signature": "private TsFileProcessor createTsFileProcessor(boolean sequence, long timePartitionId)", "class_method_signature": "StorageGroupProcessor.createTsFileProcessor(boolean sequence, long timePartitionId)", "testcase": false, "constructor": false}, {"identifier": "getNewTsFileName", "parameters": "(long timePartitionId)", "modifiers": "private", "return": "String", "signature": "String getNewTsFileName(long timePartitionId)", "full_signature": "private String getNewTsFileName(long timePartitionId)", "class_method_signature": "StorageGroupProcessor.getNewTsFileName(long timePartitionId)", "testcase": false, "constructor": false}, {"identifier": "getNewTsFileName", "parameters": "(long time, long version, int mergeCnt)", "modifiers": "private", "return": "String", "signature": "String getNewTsFileName(long time, long version, int mergeCnt)", "full_signature": "private String getNewTsFileName(long time, long version, int mergeCnt)", "class_method_signature": "StorageGroupProcessor.getNewTsFileName(long time, long version, int mergeCnt)", "testcase": false, "constructor": false}, {"identifier": "asyncCloseOneTsFileProcessor", "parameters": "(boolean sequence, TsFileProcessor tsFileProcessor)", "modifiers": "public", "return": "void", "signature": "void asyncCloseOneTsFileProcessor(boolean sequence, TsFileProcessor tsFileProcessor)", "full_signature": "public void asyncCloseOneTsFileProcessor(boolean sequence, TsFileProcessor tsFileProcessor)", "class_method_signature": "StorageGroupProcessor.asyncCloseOneTsFileProcessor(boolean sequence, TsFileProcessor tsFileProcessor)", "testcase": false, "constructor": false}, {"identifier": "deleteFolder", "parameters": "(String systemDir)", "modifiers": "public", "return": "void", "signature": "void deleteFolder(String systemDir)", "full_signature": "public void deleteFolder(String systemDir)", "class_method_signature": "StorageGroupProcessor.deleteFolder(String systemDir)", "testcase": false, "constructor": false}, {"identifier": "closeAllResources", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void closeAllResources()", "full_signature": "public void closeAllResources()", "class_method_signature": "StorageGroupProcessor.closeAllResources()", "testcase": false, "constructor": false}, {"identifier": "syncDeleteDataFiles", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void syncDeleteDataFiles()", "full_signature": "public void syncDeleteDataFiles()", "class_method_signature": "StorageGroupProcessor.syncDeleteDataFiles()", "testcase": false, "constructor": false}, {"identifier": "deleteAllSGFolders", "parameters": "(List<String> folder)", "modifiers": "private", "return": "void", "signature": "void deleteAllSGFolders(List<String> folder)", "full_signature": "private void deleteAllSGFolders(List<String> folder)", "class_method_signature": "StorageGroupProcessor.deleteAllSGFolders(List<String> folder)", "testcase": false, "constructor": false}, {"identifier": "checkFilesTTL", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void checkFilesTTL()", "full_signature": "public synchronized void checkFilesTTL()", "class_method_signature": "StorageGroupProcessor.checkFilesTTL()", "testcase": false, "constructor": false}, {"identifier": "checkFileTTL", "parameters": "(TsFileResource resource, long timeLowerBound, boolean isSeq)", "modifiers": "private", "return": "void", "signature": "void checkFileTTL(TsFileResource resource, long timeLowerBound, boolean isSeq)", "full_signature": "private void checkFileTTL(TsFileResource resource, long timeLowerBound, boolean isSeq)", "class_method_signature": "StorageGroupProcessor.checkFileTTL(TsFileResource resource, long timeLowerBound, boolean isSeq)", "testcase": false, "constructor": false}, {"identifier": "syncCloseAllWorkingTsFileProcessors", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void syncCloseAllWorkingTsFileProcessors()", "full_signature": "public void syncCloseAllWorkingTsFileProcessors()", "class_method_signature": "StorageGroupProcessor.syncCloseAllWorkingTsFileProcessors()", "testcase": false, "constructor": false}, {"identifier": "asyncCloseAllWorkingTsFileProcessors", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void asyncCloseAllWorkingTsFileProcessors()", "full_signature": "public void asyncCloseAllWorkingTsFileProcessors()", "class_method_signature": "StorageGroupProcessor.asyncCloseAllWorkingTsFileProcessors()", "testcase": false, "constructor": false}, {"identifier": "forceCloseAllWorkingTsFileProcessors", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void forceCloseAllWorkingTsFileProcessors()", "full_signature": "public void forceCloseAllWorkingTsFileProcessors()", "class_method_signature": "StorageGroupProcessor.forceCloseAllWorkingTsFileProcessors()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(PartialPath deviceId, String measurementId, QueryContext context,\n      QueryFileManager filePathsManager, Filter timeFilter)", "modifiers": "public", "return": "QueryDataSource", "signature": "QueryDataSource query(PartialPath deviceId, String measurementId, QueryContext context,\n      QueryFileManager filePathsManager, Filter timeFilter)", "full_signature": "public QueryDataSource query(PartialPath deviceId, String measurementId, QueryContext context,\n      QueryFileManager filePathsManager, Filter timeFilter)", "class_method_signature": "StorageGroupProcessor.query(PartialPath deviceId, String measurementId, QueryContext context,\n      QueryFileManager filePathsManager, Filter timeFilter)", "testcase": false, "constructor": false}, {"identifier": "writeLock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeLock()", "full_signature": "public void writeLock()", "class_method_signature": "StorageGroupProcessor.writeLock()", "testcase": false, "constructor": false}, {"identifier": "writeUnlock", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeUnlock()", "full_signature": "public void writeUnlock()", "class_method_signature": "StorageGroupProcessor.writeUnlock()", "testcase": false, "constructor": false}, {"identifier": "getFileResourceListForQuery", "parameters": "(\n      Collection<TsFileResource> tsFileResources, List<TsFileResource> upgradeTsFileResources,\n      PartialPath deviceId, String measurementId, QueryContext context, Filter timeFilter,\n      boolean isSeq)", "modifiers": "private", "return": "List<TsFileResource>", "signature": "List<TsFileResource> getFileResourceListForQuery(\n      Collection<TsFileResource> tsFileResources, List<TsFileResource> upgradeTsFileResources,\n      PartialPath deviceId, String measurementId, QueryContext context, Filter timeFilter,\n      boolean isSeq)", "full_signature": "private List<TsFileResource> getFileResourceListForQuery(\n      Collection<TsFileResource> tsFileResources, List<TsFileResource> upgradeTsFileResources,\n      PartialPath deviceId, String measurementId, QueryContext context, Filter timeFilter,\n      boolean isSeq)", "class_method_signature": "StorageGroupProcessor.getFileResourceListForQuery(\n      Collection<TsFileResource> tsFileResources, List<TsFileResource> upgradeTsFileResources,\n      PartialPath deviceId, String measurementId, QueryContext context, Filter timeFilter,\n      boolean isSeq)", "testcase": false, "constructor": false}, {"identifier": "isTsFileResourceSatisfied", "parameters": "(TsFileResource tsFileResource, String deviceId,\n      Filter timeFilter, boolean isSeq)", "modifiers": "private", "return": "boolean", "signature": "boolean isTsFileResourceSatisfied(TsFileResource tsFileResource, String deviceId,\n      Filter timeFilter, boolean isSeq)", "full_signature": "private boolean isTsFileResourceSatisfied(TsFileResource tsFileResource, String deviceId,\n      Filter timeFilter, boolean isSeq)", "class_method_signature": "StorageGroupProcessor.isTsFileResourceSatisfied(TsFileResource tsFileResource, String deviceId,\n      Filter timeFilter, boolean isSeq)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(PartialPath deviceId, String measurementId, long startTime, long endTime)", "modifiers": "public", "return": "void", "signature": "void delete(PartialPath deviceId, String measurementId, long startTime, long endTime)", "full_signature": "public void delete(PartialPath deviceId, String measurementId, long startTime, long endTime)", "class_method_signature": "StorageGroupProcessor.delete(PartialPath deviceId, String measurementId, long startTime, long endTime)", "testcase": false, "constructor": false}, {"identifier": "logDeletion", "parameters": "(long startTime, long endTime, PartialPath deviceId, String measurementId)", "modifiers": "private", "return": "void", "signature": "void logDeletion(long startTime, long endTime, PartialPath deviceId, String measurementId)", "full_signature": "private void logDeletion(long startTime, long endTime, PartialPath deviceId, String measurementId)", "class_method_signature": "StorageGroupProcessor.logDeletion(long startTime, long endTime, PartialPath deviceId, String measurementId)", "testcase": false, "constructor": false}, {"identifier": "deleteDataInFiles", "parameters": "(Collection<TsFileResource> tsFileResourceList, Deletion deletion,\n      List<ModificationFile> updatedModFiles)", "modifiers": "private", "return": "void", "signature": "void deleteDataInFiles(Collection<TsFileResource> tsFileResourceList, Deletion deletion,\n      List<ModificationFile> updatedModFiles)", "full_signature": "private void deleteDataInFiles(Collection<TsFileResource> tsFileResourceList, Deletion deletion,\n      List<ModificationFile> updatedModFiles)", "class_method_signature": "StorageGroupProcessor.deleteDataInFiles(Collection<TsFileResource> tsFileResourceList, Deletion deletion,\n      List<ModificationFile> updatedModFiles)", "testcase": false, "constructor": false}, {"identifier": "tryToDeleteLastCache", "parameters": "(PartialPath deviceId, String measurementId, long startTime,\n      long endTime)", "modifiers": "private", "return": "void", "signature": "void tryToDeleteLastCache(PartialPath deviceId, String measurementId, long startTime,\n      long endTime)", "full_signature": "private void tryToDeleteLastCache(PartialPath deviceId, String measurementId, long startTime,\n      long endTime)", "class_method_signature": "StorageGroupProcessor.tryToDeleteLastCache(PartialPath deviceId, String measurementId, long startTime,\n      long endTime)", "testcase": false, "constructor": false}, {"identifier": "updateEndTimeMap", "parameters": "(TsFileProcessor tsFileProcessor)", "modifiers": "private", "return": "void", "signature": "void updateEndTimeMap(TsFileProcessor tsFileProcessor)", "full_signature": "private void updateEndTimeMap(TsFileProcessor tsFileProcessor)", "class_method_signature": "StorageGroupProcessor.updateEndTimeMap(TsFileProcessor tsFileProcessor)", "testcase": false, "constructor": false}, {"identifier": "unsequenceFlushCallback", "parameters": "(TsFileProcessor processor)", "modifiers": "private", "return": "boolean", "signature": "boolean unsequenceFlushCallback(TsFileProcessor processor)", "full_signature": "private boolean unsequenceFlushCallback(TsFileProcessor processor)", "class_method_signature": "StorageGroupProcessor.unsequenceFlushCallback(TsFileProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "updateLatestFlushTimeCallback", "parameters": "(TsFileProcessor processor)", "modifiers": "private", "return": "boolean", "signature": "boolean updateLatestFlushTimeCallback(TsFileProcessor processor)", "full_signature": "private boolean updateLatestFlushTimeCallback(TsFileProcessor processor)", "class_method_signature": "StorageGroupProcessor.updateLatestFlushTimeCallback(TsFileProcessor processor)", "testcase": false, "constructor": false}, {"identifier": "updateNewlyFlushedPartitionLatestFlushedTimeForEachDevice", "parameters": "(long partitionId,\n      String deviceId, long time)", "modifiers": "public", "return": "void", "signature": "void updateNewlyFlushedPartitionLatestFlushedTimeForEachDevice(long partitionId,\n      String deviceId, long time)", "full_signature": "public void updateNewlyFlushedPartitionLatestFlushedTimeForEachDevice(long partitionId,\n      String deviceId, long time)", "class_method_signature": "StorageGroupProcessor.updateNewlyFlushedPartitionLatestFlushedTimeForEachDevice(long partitionId,\n      String deviceId, long time)", "testcase": false, "constructor": false}, {"identifier": "closeUnsealedTsFileProcessorCallBack", "parameters": "(\n      TsFileProcessor tsFileProcessor)", "modifiers": "private", "return": "void", "signature": "void closeUnsealedTsFileProcessorCallBack(\n      TsFileProcessor tsFileProcessor)", "full_signature": "private void closeUnsealedTsFileProcessorCallBack(\n      TsFileProcessor tsFileProcessor)", "class_method_signature": "StorageGroupProcessor.closeUnsealedTsFileProcessorCallBack(\n      TsFileProcessor tsFileProcessor)", "testcase": false, "constructor": false}, {"identifier": "closeHotCompactionMergeCallBack", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeHotCompactionMergeCallBack()", "full_signature": "private void closeHotCompactionMergeCallBack()", "class_method_signature": "StorageGroupProcessor.closeHotCompactionMergeCallBack()", "testcase": false, "constructor": false}, {"identifier": "countUpgradeFiles", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int countUpgradeFiles()", "full_signature": "public int countUpgradeFiles()", "class_method_signature": "StorageGroupProcessor.countUpgradeFiles()", "testcase": false, "constructor": false}, {"identifier": "upgrade", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void upgrade()", "full_signature": "public void upgrade()", "class_method_signature": "StorageGroupProcessor.upgrade()", "testcase": false, "constructor": false}, {"identifier": "upgradeTsFileResourceCallBack", "parameters": "(TsFileResource tsFileResource)", "modifiers": "private", "return": "void", "signature": "void upgradeTsFileResourceCallBack(TsFileResource tsFileResource)", "full_signature": "private void upgradeTsFileResourceCallBack(TsFileResource tsFileResource)", "class_method_signature": "StorageGroupProcessor.upgradeTsFileResourceCallBack(TsFileResource tsFileResource)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(boolean fullMerge)", "modifiers": "public", "return": "void", "signature": "void merge(boolean fullMerge)", "full_signature": "public void merge(boolean fullMerge)", "class_method_signature": "StorageGroupProcessor.merge(boolean fullMerge)", "testcase": false, "constructor": false}, {"identifier": "getMergeFileSelector", "parameters": "(long budget, MergeResource resource)", "modifiers": "private", "return": "IMergeFileSelector", "signature": "IMergeFileSelector getMergeFileSelector(long budget, MergeResource resource)", "full_signature": "private IMergeFileSelector getMergeFileSelector(long budget, MergeResource resource)", "class_method_signature": "StorageGroupProcessor.getMergeFileSelector(long budget, MergeResource resource)", "testcase": false, "constructor": false}, {"identifier": "removeUnseqFiles", "parameters": "(List<TsFileResource> unseqFiles)", "modifiers": "private", "return": "void", "signature": "void removeUnseqFiles(List<TsFileResource> unseqFiles)", "full_signature": "private void removeUnseqFiles(List<TsFileResource> unseqFiles)", "class_method_signature": "StorageGroupProcessor.removeUnseqFiles(List<TsFileResource> unseqFiles)", "testcase": false, "constructor": false}, {"identifier": "updateMergeModification", "parameters": "(TsFileResource seqFile)", "modifiers": "@SuppressWarnings(\"squid:S1141\") private", "return": "void", "signature": "void updateMergeModification(TsFileResource seqFile)", "full_signature": "@SuppressWarnings(\"squid:S1141\") private void updateMergeModification(TsFileResource seqFile)", "class_method_signature": "StorageGroupProcessor.updateMergeModification(TsFileResource seqFile)", "testcase": false, "constructor": false}, {"identifier": "removeMergingModification", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeMergingModification()", "full_signature": "private void removeMergingModification()", "class_method_signature": "StorageGroupProcessor.removeMergingModification()", "testcase": false, "constructor": false}, {"identifier": "mergeEndAction", "parameters": "(List<TsFileResource> seqFiles, List<TsFileResource> unseqFiles,\n      File mergeLog)", "modifiers": "protected", "return": "void", "signature": "void mergeEndAction(List<TsFileResource> seqFiles, List<TsFileResource> unseqFiles,\n      File mergeLog)", "full_signature": "protected void mergeEndAction(List<TsFileResource> seqFiles, List<TsFileResource> unseqFiles,\n      File mergeLog)", "class_method_signature": "StorageGroupProcessor.mergeEndAction(List<TsFileResource> seqFiles, List<TsFileResource> unseqFiles,\n      File mergeLog)", "testcase": false, "constructor": false}, {"identifier": "doubleWriteLock", "parameters": "(TsFileResource seqFile)", "modifiers": "private", "return": "void", "signature": "void doubleWriteLock(TsFileResource seqFile)", "full_signature": "private void doubleWriteLock(TsFileResource seqFile)", "class_method_signature": "StorageGroupProcessor.doubleWriteLock(TsFileResource seqFile)", "testcase": false, "constructor": false}, {"identifier": "doubleWriteUnlock", "parameters": "(TsFileResource seqFile)", "modifiers": "private", "return": "void", "signature": "void doubleWriteUnlock(TsFileResource seqFile)", "full_signature": "private void doubleWriteUnlock(TsFileResource seqFile)", "class_method_signature": "StorageGroupProcessor.doubleWriteUnlock(TsFileResource seqFile)", "testcase": false, "constructor": false}, {"identifier": "loadNewTsFileForSync", "parameters": "(TsFileResource newTsFileResource)", "modifiers": "public", "return": "void", "signature": "void loadNewTsFileForSync(TsFileResource newTsFileResource)", "full_signature": "public void loadNewTsFileForSync(TsFileResource newTsFileResource)", "class_method_signature": "StorageGroupProcessor.loadNewTsFileForSync(TsFileResource newTsFileResource)", "testcase": false, "constructor": false}, {"identifier": "loadNewTsFile", "parameters": "(TsFileResource newTsFileResource)", "modifiers": "public", "return": "void", "signature": "void loadNewTsFile(TsFileResource newTsFileResource)", "full_signature": "public void loadNewTsFile(TsFileResource newTsFileResource)", "class_method_signature": "StorageGroupProcessor.loadNewTsFile(TsFileResource newTsFileResource)", "testcase": false, "constructor": false}, {"identifier": "setPartitionFileVersionToMax", "parameters": "(long partition, long version)", "modifiers": "public", "return": "void", "signature": "void setPartitionFileVersionToMax(long partition, long version)", "full_signature": "public void setPartitionFileVersionToMax(long partition, long version)", "class_method_signature": "StorageGroupProcessor.setPartitionFileVersionToMax(long partition, long version)", "testcase": false, "constructor": false}, {"identifier": "computeMaxVersion", "parameters": "(Long oldVersion, Long newVersion)", "modifiers": "private", "return": "long", "signature": "long computeMaxVersion(Long oldVersion, Long newVersion)", "full_signature": "private long computeMaxVersion(Long oldVersion, Long newVersion)", "class_method_signature": "StorageGroupProcessor.computeMaxVersion(Long oldVersion, Long newVersion)", "testcase": false, "constructor": false}, {"identifier": "findInsertionPosition", "parameters": "(TsFileResource newTsFileResource, long newFilePartitionId,\n      List<TsFileResource> sequenceList)", "modifiers": "private", "return": "int", "signature": "int findInsertionPosition(TsFileResource newTsFileResource, long newFilePartitionId,\n      List<TsFileResource> sequenceList)", "full_signature": "private int findInsertionPosition(TsFileResource newTsFileResource, long newFilePartitionId,\n      List<TsFileResource> sequenceList)", "class_method_signature": "StorageGroupProcessor.findInsertionPosition(TsFileResource newTsFileResource, long newFilePartitionId,\n      List<TsFileResource> sequenceList)", "testcase": false, "constructor": false}, {"identifier": "compareTsFileDevices", "parameters": "(TsFileResource fileA, TsFileResource fileB)", "modifiers": "private", "return": "int", "signature": "int compareTsFileDevices(TsFileResource fileA, TsFileResource fileB)", "full_signature": "private int compareTsFileDevices(TsFileResource fileA, TsFileResource fileB)", "class_method_signature": "StorageGroupProcessor.compareTsFileDevices(TsFileResource fileA, TsFileResource fileB)", "testcase": false, "constructor": false}, {"identifier": "removeFullyOverlapFiles", "parameters": "(TsFileResource resource)", "modifiers": "@SuppressWarnings(\"unused\") public", "return": "void", "signature": "void removeFullyOverlapFiles(TsFileResource resource)", "full_signature": "@SuppressWarnings(\"unused\") public void removeFullyOverlapFiles(TsFileResource resource)", "class_method_signature": "StorageGroupProcessor.removeFullyOverlapFiles(TsFileResource resource)", "testcase": false, "constructor": false}, {"identifier": "removeFullyOverlapFiles", "parameters": "(TsFileResource newTsFile, Iterator<TsFileResource> iterator\n      , boolean isSeq)", "modifiers": "private", "return": "void", "signature": "void removeFullyOverlapFiles(TsFileResource newTsFile, Iterator<TsFileResource> iterator\n      , boolean isSeq)", "full_signature": "private void removeFullyOverlapFiles(TsFileResource newTsFile, Iterator<TsFileResource> iterator\n      , boolean isSeq)", "class_method_signature": "StorageGroupProcessor.removeFullyOverlapFiles(TsFileResource newTsFile, Iterator<TsFileResource> iterator\n      , boolean isSeq)", "testcase": false, "constructor": false}, {"identifier": "removeFullyOverlapFile", "parameters": "(TsFileResource tsFileResource,\n      Iterator<TsFileResource> iterator\n      , boolean isSeq)", "modifiers": "private", "return": "void", "signature": "void removeFullyOverlapFile(TsFileResource tsFileResource,\n      Iterator<TsFileResource> iterator\n      , boolean isSeq)", "full_signature": "private void removeFullyOverlapFile(TsFileResource tsFileResource,\n      Iterator<TsFileResource> iterator\n      , boolean isSeq)", "class_method_signature": "StorageGroupProcessor.removeFullyOverlapFile(TsFileResource tsFileResource,\n      Iterator<TsFileResource> iterator\n      , boolean isSeq)", "testcase": false, "constructor": false}, {"identifier": "getFileNameForLoadingFile", "parameters": "(String tsfileName, int insertIndex,\n      long timePartitionId, List<TsFileResource> sequenceList)", "modifiers": "private", "return": "String", "signature": "String getFileNameForLoadingFile(String tsfileName, int insertIndex,\n      long timePartitionId, List<TsFileResource> sequenceList)", "full_signature": "private String getFileNameForLoadingFile(String tsfileName, int insertIndex,\n      long timePartitionId, List<TsFileResource> sequenceList)", "class_method_signature": "StorageGroupProcessor.getFileNameForLoadingFile(String tsfileName, int insertIndex,\n      long timePartitionId, List<TsFileResource> sequenceList)", "testcase": false, "constructor": false}, {"identifier": "updateLatestTimeMap", "parameters": "(TsFileResource newTsFileResource)", "modifiers": "private", "return": "void", "signature": "void updateLatestTimeMap(TsFileResource newTsFileResource)", "full_signature": "private void updateLatestTimeMap(TsFileResource newTsFileResource)", "class_method_signature": "StorageGroupProcessor.updateLatestTimeMap(TsFileResource newTsFileResource)", "testcase": false, "constructor": false}, {"identifier": "loadTsFileByType", "parameters": "(LoadTsFileType type, File syncedTsFile,\n      TsFileResource tsFileResource, long filePartitionId)", "modifiers": "private", "return": "boolean", "signature": "boolean loadTsFileByType(LoadTsFileType type, File syncedTsFile,\n      TsFileResource tsFileResource, long filePartitionId)", "full_signature": "private boolean loadTsFileByType(LoadTsFileType type, File syncedTsFile,\n      TsFileResource tsFileResource, long filePartitionId)", "class_method_signature": "StorageGroupProcessor.loadTsFileByType(LoadTsFileType type, File syncedTsFile,\n      TsFileResource tsFileResource, long filePartitionId)", "testcase": false, "constructor": false}, {"identifier": "deleteTsfile", "parameters": "(File tsfieToBeDeleted)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteTsfile(File tsfieToBeDeleted)", "full_signature": "public boolean deleteTsfile(File tsfieToBeDeleted)", "class_method_signature": "StorageGroupProcessor.deleteTsfile(File tsfieToBeDeleted)", "testcase": false, "constructor": false}, {"identifier": "getWorkSequenceTsFileProcessors", "parameters": "()", "modifiers": "public", "return": "Collection<TsFileProcessor>", "signature": "Collection<TsFileProcessor> getWorkSequenceTsFileProcessors()", "full_signature": "public Collection<TsFileProcessor> getWorkSequenceTsFileProcessors()", "class_method_signature": "StorageGroupProcessor.getWorkSequenceTsFileProcessors()", "testcase": false, "constructor": false}, {"identifier": "moveTsfile", "parameters": "(File fileToBeMoved, File targetDir)", "modifiers": "public", "return": "boolean", "signature": "boolean moveTsfile(File fileToBeMoved, File targetDir)", "full_signature": "public boolean moveTsfile(File fileToBeMoved, File targetDir)", "class_method_signature": "StorageGroupProcessor.moveTsfile(File fileToBeMoved, File targetDir)", "testcase": false, "constructor": false}, {"identifier": "getWorkUnsequenceTsFileProcessor", "parameters": "()", "modifiers": "public", "return": "Collection<TsFileProcessor>", "signature": "Collection<TsFileProcessor> getWorkUnsequenceTsFileProcessor()", "full_signature": "public Collection<TsFileProcessor> getWorkUnsequenceTsFileProcessor()", "class_method_signature": "StorageGroupProcessor.getWorkUnsequenceTsFileProcessor()", "testcase": false, "constructor": false}, {"identifier": "setDataTTL", "parameters": "(long dataTTL)", "modifiers": "public", "return": "void", "signature": "void setDataTTL(long dataTTL)", "full_signature": "public void setDataTTL(long dataTTL)", "class_method_signature": "StorageGroupProcessor.setDataTTL(long dataTTL)", "testcase": false, "constructor": false}, {"identifier": "getSequenceFileTreeSet", "parameters": "()", "modifiers": "public", "return": "List<TsFileResource>", "signature": "List<TsFileResource> getSequenceFileTreeSet()", "full_signature": "public List<TsFileResource> getSequenceFileTreeSet()", "class_method_signature": "StorageGroupProcessor.getSequenceFileTreeSet()", "testcase": false, "constructor": false}, {"identifier": "getUnSequenceFileList", "parameters": "()", "modifiers": "public", "return": "List<TsFileResource>", "signature": "List<TsFileResource> getUnSequenceFileList()", "full_signature": "public List<TsFileResource> getUnSequenceFileList()", "class_method_signature": "StorageGroupProcessor.getUnSequenceFileList()", "testcase": false, "constructor": false}, {"identifier": "getStorageGroupName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStorageGroupName()", "full_signature": "public String getStorageGroupName()", "class_method_signature": "StorageGroupProcessor.getStorageGroupName()", "testcase": false, "constructor": false}, {"identifier": "isFileAlreadyExist", "parameters": "(TsFileResource tsFileResource, long partitionNum)", "modifiers": "public", "return": "boolean", "signature": "boolean isFileAlreadyExist(TsFileResource tsFileResource, long partitionNum)", "full_signature": "public boolean isFileAlreadyExist(TsFileResource tsFileResource, long partitionNum)", "class_method_signature": "StorageGroupProcessor.isFileAlreadyExist(TsFileResource tsFileResource, long partitionNum)", "testcase": false, "constructor": false}, {"identifier": "removePartitions", "parameters": "(TimePartitionFilter filter)", "modifiers": "public", "return": "void", "signature": "void removePartitions(TimePartitionFilter filter)", "full_signature": "public void removePartitions(TimePartitionFilter filter)", "class_method_signature": "StorageGroupProcessor.removePartitions(TimePartitionFilter filter)", "testcase": false, "constructor": false}, {"identifier": "removePartitions", "parameters": "(TimePartitionFilter filter,\n      Set<Entry<Long, TsFileProcessor>> processorEntrys)", "modifiers": "private", "return": "void", "signature": "void removePartitions(TimePartitionFilter filter,\n      Set<Entry<Long, TsFileProcessor>> processorEntrys)", "full_signature": "private void removePartitions(TimePartitionFilter filter,\n      Set<Entry<Long, TsFileProcessor>> processorEntrys)", "class_method_signature": "StorageGroupProcessor.removePartitions(TimePartitionFilter filter,\n      Set<Entry<Long, TsFileProcessor>> processorEntrys)", "testcase": false, "constructor": false}, {"identifier": "removePartitions", "parameters": "(TimePartitionFilter filter, Iterator<TsFileResource> iterator)", "modifiers": "private", "return": "void", "signature": "void removePartitions(TimePartitionFilter filter, Iterator<TsFileResource> iterator)", "full_signature": "private void removePartitions(TimePartitionFilter filter, Iterator<TsFileResource> iterator)", "class_method_signature": "StorageGroupProcessor.removePartitions(TimePartitionFilter filter, Iterator<TsFileResource> iterator)", "testcase": false, "constructor": false}, {"identifier": "isHotCompactionMergeWorking", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isHotCompactionMergeWorking()", "full_signature": "public boolean isHotCompactionMergeWorking()", "class_method_signature": "StorageGroupProcessor.isHotCompactionMergeWorking()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/engine/storagegroup/StorageGroupProcessor.java"}, "focal_method": {"identifier": "merge", "parameters": "(boolean fullMerge)", "modifiers": "public", "return": "void", "body": "public void merge(boolean fullMerge) {\n    writeLock();\n    try {\n      if (isMerging) {\n        if (logger.isInfoEnabled()) {\n          logger.info(\"{} Last merge is ongoing, currently consumed time: {}ms\", storageGroupName,\n              (System.currentTimeMillis() - mergeStartTime));\n        }\n        return;\n      }\n      logger.info(\"{} will close all files for starting a merge (fullmerge = {})\", storageGroupName,\n          fullMerge);\n\n      List<TsFileResource> seqMergeList = tsFileManagement.getStableTsFileList(true);\n      List<TsFileResource> unSeqMergeList = tsFileManagement.getStableTsFileList(false);\n      if (seqMergeList.isEmpty() || unSeqMergeList.isEmpty()) {\n        logger.info(\"{} no files to be merged\", storageGroupName);\n        return;\n      }\n\n      long budget = IoTDBDescriptor.getInstance().getConfig().getMergeMemoryBudget();\n      long timeLowerBound = System.currentTimeMillis() - dataTTL;\n      MergeResource mergeResource = new MergeResource(seqMergeList, unSeqMergeList, timeLowerBound);\n\n      IMergeFileSelector fileSelector = getMergeFileSelector(budget, mergeResource);\n      try {\n        List[] mergeFiles = fileSelector.select();\n        if (mergeFiles.length == 0) {\n          logger.info(\"{} cannot select merge candidates under the budget {}\", storageGroupName,\n              budget);\n          return;\n        }\n        // avoid pending tasks holds the metadata and streams\n        mergeResource.clear();\n        String taskName = storageGroupName + \"-\" + System.currentTimeMillis();\n        // do not cache metadata until true candidates are chosen, or too much metadata will be\n        // cached during selection\n        mergeResource.setCacheDeviceMeta(true);\n\n        for (TsFileResource tsFileResource : mergeResource.getSeqFiles()) {\n          tsFileResource.setMerging(true);\n        }\n        for (TsFileResource tsFileResource : mergeResource.getUnseqFiles()) {\n          tsFileResource.setMerging(true);\n        }\n\n        MergeTask mergeTask = new MergeTask(mergeResource, storageGroupSysDir.getPath(),\n            this::mergeEndAction, taskName, fullMerge, fileSelector.getConcurrentMergeNum(),\n            storageGroupName);\n        mergingModification = new ModificationFile(\n            storageGroupSysDir + File.separator + MERGING_MODIFICATION_FILE_NAME);\n        MergeManager.getINSTANCE().submitMainTask(mergeTask);\n        if (logger.isInfoEnabled()) {\n          logger.info(\"{} submits a merge task {}, merging {} seqFiles, {} unseqFiles\",\n              storageGroupName, taskName, mergeFiles[0].size(), mergeFiles[1].size());\n        }\n        isMerging = true;\n        mergeStartTime = System.currentTimeMillis();\n\n      } catch (MergeException | IOException e) {\n        logger.error(\"{} cannot select file for merge\", storageGroupName, e);\n      }\n    } finally {\n      writeUnlock();\n    }\n  }", "signature": "void merge(boolean fullMerge)", "full_signature": "public void merge(boolean fullMerge)", "class_method_signature": "StorageGroupProcessor.merge(boolean fullMerge)", "testcase": false, "constructor": false, "invocations": ["writeLock", "isInfoEnabled", "info", "currentTimeMillis", "info", "getStableTsFileList", "getStableTsFileList", "isEmpty", "isEmpty", "info", "getMergeMemoryBudget", "getConfig", "getInstance", "currentTimeMillis", "getMergeFileSelector", "select", "info", "clear", "currentTimeMillis", "setCacheDeviceMeta", "getSeqFiles", "setMerging", "getUnseqFiles", "setMerging", "getPath", "getConcurrentMergeNum", "submitMainTask", "getINSTANCE", "isInfoEnabled", "info", "size", "size", "currentTimeMillis", "error", "writeUnlock"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}