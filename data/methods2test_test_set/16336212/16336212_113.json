{"test_class": {"identifier": "DataSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/embedded/src/test/java/org/glowroot/agent/embedded/util/DataSourceTest.java"}, "test_case": {"identifier": "testDebugOneNullArg", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDebugOneNullArg() throws SQLException {\n        // given\n        Logger logger = mock(Logger.class);\n        when(logger.isDebugEnabled()).thenReturn(true);\n        // when\n        DataSource.debug(logger, \"select x from y where a = ?\", new Object[] {null});\n        // then\n        verify(logger, times(2)).isDebugEnabled();\n        verify(logger).debug(\"{} [{}]\", \"select x from y where a = ?\", \"NULL\");\n        verifyNoMoreInteractions(logger);\n    }", "signature": "void testDebugOneNullArg()", "full_signature": "@Test public void testDebugOneNullArg()", "class_method_signature": "DataSourceTest.testDebugOneNullArg()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "isDebugEnabled", "debug", "isDebugEnabled", "verify", "times", "debug", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "DataSource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DataSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DataSource.class)", "var_name": "logger"}, {"original_string": "private static final int CACHE_SIZE =\n            Integer.getInteger(\"glowroot.internal.h2.cacheSize\", 8192);", "modifier": "private static final", "type": "int", "declarator": "CACHE_SIZE =\n            Integer.getInteger(\"glowroot.internal.h2.cacheSize\", 8192)", "var_name": "CACHE_SIZE"}, {"original_string": "private static final int QUERY_TIMEOUT_SECONDS =\n            Integer.getInteger(\"glowroot.internal.h2.queryTimeout\", 60);", "modifier": "private static final", "type": "int", "declarator": "QUERY_TIMEOUT_SECONDS =\n            Integer.getInteger(\"glowroot.internal.h2.queryTimeout\", 60)", "var_name": "QUERY_TIMEOUT_SECONDS"}, {"original_string": "private final @Nullable File dbFile;", "modifier": "private final @Nullable", "type": "File", "declarator": "dbFile", "var_name": "dbFile"}, {"original_string": "private final Thread shutdownHookThread;", "modifier": "private final", "type": "Thread", "declarator": "shutdownHookThread", "var_name": "shutdownHookThread"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "@GuardedBy(\"lock\")\n    private JdbcConnection connection;", "modifier": "@GuardedBy(\"lock\")\n    private", "type": "JdbcConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private volatile boolean closed;", "modifier": "private volatile", "type": "boolean", "declarator": "closed", "var_name": "closed"}, {"original_string": "@SuppressWarnings(\"nullness:type.argument.type.incompatible\")\n    private final ThreadLocal<Boolean> suppressQueryTimeout = new ThreadLocal<Boolean>() {\n        @Override\n        protected Boolean initialValue() {\n            return false;\n        }\n    };", "modifier": "@SuppressWarnings(\"nullness:type.argument.type.incompatible\")\n    private final", "type": "ThreadLocal<Boolean>", "declarator": "suppressQueryTimeout = new ThreadLocal<Boolean>() {\n        @Override\n        protected Boolean initialValue() {\n            return false;\n        }\n    }", "var_name": "suppressQueryTimeout"}, {"original_string": "private final Map</*@Untainted*/ String, ImmutableList<Column>> tables =\n            Maps.newConcurrentMap();", "modifier": "private final", "type": "Map</*@Untainted*/ String, ImmutableList<Column>>", "declarator": "tables =\n            Maps.newConcurrentMap()", "var_name": "tables"}, {"original_string": "private final Map</*@Untainted*/ String, ImmutableList<Index>> indexes =\n            Maps.newConcurrentMap();", "modifier": "private final", "type": "Map</*@Untainted*/ String, ImmutableList<Index>>", "declarator": "indexes =\n            Maps.newConcurrentMap()", "var_name": "indexes"}, {"original_string": "private final LoadingCache</*@Untainted*/ String, PreparedStatement> preparedStatementCache =\n            CacheBuilder.newBuilder().weakValues()\n                    .build(new CacheLoader</*@Untainted*/ String, PreparedStatement>() {\n                        @Override\n                        @SuppressWarnings(\"GuardedBy\")\n                        public PreparedStatement load(@Untainted String sql) throws SQLException {\n                            return connection.prepareStatement(sql);\n                        }\n                    });", "modifier": "private final", "type": "LoadingCache</*@Untainted*/ String, PreparedStatement>", "declarator": "preparedStatementCache =\n            CacheBuilder.newBuilder().weakValues()\n                    .build(new CacheLoader</*@Untainted*/ String, PreparedStatement>() {\n                        @Override\n                        @SuppressWarnings(\"GuardedBy\")\n                        public PreparedStatement load(@Untainted String sql) throws SQLException {\n                            return connection.prepareStatement(sql);\n                        }\n                    })", "var_name": "preparedStatementCache"}], "methods": [{"identifier": "DataSource", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataSource()", "full_signature": "public  DataSource()", "class_method_signature": "DataSource.DataSource()", "testcase": false, "constructor": true}, {"identifier": "DataSource", "parameters": "(File dbFile)", "modifiers": "public", "return": "", "signature": " DataSource(File dbFile)", "full_signature": "public  DataSource(File dbFile)", "class_method_signature": "DataSource.DataSource(File dbFile)", "testcase": false, "constructor": true}, {"identifier": "defrag", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void defrag()", "full_signature": "public void defrag()", "class_method_signature": "DataSource.defrag()", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void compact()", "full_signature": "public void compact()", "class_method_signature": "DataSource.compact()", "testcase": false, "constructor": false}, {"identifier": "getH2DataFileSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getH2DataFileSize()", "full_signature": "public long getH2DataFileSize()", "class_method_signature": "DataSource.getH2DataFileSize()", "testcase": false, "constructor": false}, {"identifier": "analyzeH2DiskSpace", "parameters": "()", "modifiers": "public", "return": "List<H2Table>", "signature": "List<H2Table> analyzeH2DiskSpace()", "full_signature": "public List<H2Table> analyzeH2DiskSpace()", "class_method_signature": "DataSource.analyzeH2DiskSpace()", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void deleteAll()", "full_signature": "public void deleteAll()", "class_method_signature": "DataSource.deleteAll()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(@Untainted String sql)", "modifiers": "public", "return": "void", "signature": "void execute(@Untainted String sql)", "full_signature": "public void execute(@Untainted String sql)", "class_method_signature": "DataSource.execute(@Untainted String sql)", "testcase": false, "constructor": false}, {"identifier": "queryForLong", "parameters": "(final @Untainted String sql, Object... args)", "modifiers": "public", "return": "long", "signature": "long queryForLong(final @Untainted String sql, Object... args)", "full_signature": "public long queryForLong(final @Untainted String sql, Object... args)", "class_method_signature": "DataSource.queryForLong(final @Untainted String sql, Object... args)", "testcase": false, "constructor": false}, {"identifier": "queryForOptionalLong", "parameters": "(final @Untainted String sql, Object... args)", "modifiers": "public @Nullable", "return": "Long", "signature": "Long queryForOptionalLong(final @Untainted String sql, Object... args)", "full_signature": "public @Nullable Long queryForOptionalLong(final @Untainted String sql, Object... args)", "class_method_signature": "DataSource.queryForOptionalLong(final @Untainted String sql, Object... args)", "testcase": false, "constructor": false}, {"identifier": "queryForStringList", "parameters": "(final @Untainted String sql)", "modifiers": "public", "return": "List<String>", "signature": "List<String> queryForStringList(final @Untainted String sql)", "full_signature": "public List<String> queryForStringList(final @Untainted String sql)", "class_method_signature": "DataSource.queryForStringList(final @Untainted String sql)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(JdbcQuery<T> jdbcQuery)", "modifiers": "public", "return": "T", "signature": "T query(JdbcQuery<T> jdbcQuery)", "full_signature": "public T query(JdbcQuery<T> jdbcQuery)", "class_method_signature": "DataSource.query(JdbcQuery<T> jdbcQuery)", "testcase": false, "constructor": false}, {"identifier": "queryAtMostOne", "parameters": "(JdbcRowQuery<T> jdbcQuery)", "modifiers": "public", "return": "T", "signature": "T queryAtMostOne(JdbcRowQuery<T> jdbcQuery)", "full_signature": "public T queryAtMostOne(JdbcRowQuery<T> jdbcQuery)", "class_method_signature": "DataSource.queryAtMostOne(JdbcRowQuery<T> jdbcQuery)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(JdbcRowQuery<T> jdbcQuery)", "modifiers": "public", "return": "List<T>", "signature": "List<T> query(JdbcRowQuery<T> jdbcQuery)", "full_signature": "public List<T> query(JdbcRowQuery<T> jdbcQuery)", "class_method_signature": "DataSource.query(JdbcRowQuery<T> jdbcQuery)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final @Untainted String sql, final @Nullable Object... args)", "modifiers": "public", "return": "int", "signature": "int update(final @Untainted String sql, final @Nullable Object... args)", "full_signature": "public int update(final @Untainted String sql, final @Nullable Object... args)", "class_method_signature": "DataSource.update(final @Untainted String sql, final @Nullable Object... args)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(JdbcUpdate jdbcUpdate)", "modifiers": "public", "return": "int", "signature": "int update(JdbcUpdate jdbcUpdate)", "full_signature": "public int update(JdbcUpdate jdbcUpdate)", "class_method_signature": "DataSource.update(JdbcUpdate jdbcUpdate)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(JdbcUpdate jdbcUpdate)", "modifiers": "public", "return": "int[]", "signature": "int[] batchUpdate(JdbcUpdate jdbcUpdate)", "full_signature": "public int[] batchUpdate(JdbcUpdate jdbcUpdate)", "class_method_signature": "DataSource.batchUpdate(JdbcUpdate jdbcUpdate)", "testcase": false, "constructor": false}, {"identifier": "deleteBefore", "parameters": "(@Untainted String tableName, long captureTime)", "modifiers": "public", "return": "void", "signature": "void deleteBefore(@Untainted String tableName, long captureTime)", "full_signature": "public void deleteBefore(@Untainted String tableName, long captureTime)", "class_method_signature": "DataSource.deleteBefore(@Untainted String tableName, long captureTime)", "testcase": false, "constructor": false}, {"identifier": "deleteBefore", "parameters": "(@Untainted String tableName, @Untainted String columnName,\n            long captureTime)", "modifiers": "public", "return": "void", "signature": "void deleteBefore(@Untainted String tableName, @Untainted String columnName,\n            long captureTime)", "full_signature": "public void deleteBefore(@Untainted String tableName, @Untainted String columnName,\n            long captureTime)", "class_method_signature": "DataSource.deleteBefore(@Untainted String tableName, @Untainted String columnName,\n            long captureTime)", "testcase": false, "constructor": false}, {"identifier": "deleteBeforeUsingLock", "parameters": "(@Untainted String tableName, @Untainted String columnName,\n            long captureTime, Object externalLock)", "modifiers": "public", "return": "void", "signature": "void deleteBeforeUsingLock(@Untainted String tableName, @Untainted String columnName,\n            long captureTime, Object externalLock)", "full_signature": "public void deleteBeforeUsingLock(@Untainted String tableName, @Untainted String columnName,\n            long captureTime, Object externalLock)", "class_method_signature": "DataSource.deleteBeforeUsingLock(@Untainted String tableName, @Untainted String columnName,\n            long captureTime, Object externalLock)", "testcase": false, "constructor": false}, {"identifier": "syncTable", "parameters": "(@Untainted String tableName, List<Column> columns)", "modifiers": "public", "return": "void", "signature": "void syncTable(@Untainted String tableName, List<Column> columns)", "full_signature": "public void syncTable(@Untainted String tableName, List<Column> columns)", "class_method_signature": "DataSource.syncTable(@Untainted String tableName, List<Column> columns)", "testcase": false, "constructor": false}, {"identifier": "syncIndexes", "parameters": "(@Untainted String tableName, ImmutableList<Index> indexes)", "modifiers": "public", "return": "void", "signature": "void syncIndexes(@Untainted String tableName, ImmutableList<Index> indexes)", "full_signature": "public void syncIndexes(@Untainted String tableName, ImmutableList<Index> indexes)", "class_method_signature": "DataSource.syncIndexes(@Untainted String tableName, ImmutableList<Index> indexes)", "testcase": false, "constructor": false}, {"identifier": "getDbFileSize", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getDbFileSize()", "full_signature": " long getDbFileSize()", "class_method_signature": "DataSource.getDbFileSize()", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(String tableName)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(String tableName)", "full_signature": "public boolean tableExists(String tableName)", "class_method_signature": "DataSource.tableExists(String tableName)", "testcase": false, "constructor": false}, {"identifier": "columnExists", "parameters": "(String tableName, String columnName)", "modifiers": "public", "return": "boolean", "signature": "boolean columnExists(String tableName, String columnName)", "full_signature": "public boolean columnExists(String tableName, String columnName)", "class_method_signature": "DataSource.columnExists(String tableName, String columnName)", "testcase": false, "constructor": false}, {"identifier": "renameTable", "parameters": "(@Untainted String oldTableName, @Untainted String newTableName)", "modifiers": "public", "return": "void", "signature": "void renameTable(@Untainted String oldTableName, @Untainted String newTableName)", "full_signature": "public void renameTable(@Untainted String oldTableName, @Untainted String newTableName)", "class_method_signature": "DataSource.renameTable(@Untainted String oldTableName, @Untainted String newTableName)", "testcase": false, "constructor": false}, {"identifier": "renameColumn", "parameters": "(@Untainted String tableName, @Untainted String oldColumnName,\n            @Untainted String newColumnName)", "modifiers": "public", "return": "void", "signature": "void renameColumn(@Untainted String tableName, @Untainted String oldColumnName,\n            @Untainted String newColumnName)", "full_signature": "public void renameColumn(@Untainted String tableName, @Untainted String oldColumnName,\n            @Untainted String newColumnName)", "class_method_signature": "DataSource.renameColumn(@Untainted String tableName, @Untainted String oldColumnName,\n            @Untainted String newColumnName)", "testcase": false, "constructor": false}, {"identifier": "suppressQueryTimeout", "parameters": "(Callable<V> callable)", "modifiers": "public", "return": "V", "signature": "V suppressQueryTimeout(Callable<V> callable)", "full_signature": "public V suppressQueryTimeout(Callable<V> callable)", "class_method_signature": "DataSource.suppressQueryTimeout(Callable<V> callable)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@OnlyUsedByTests public", "return": "void", "signature": "void close()", "full_signature": "@OnlyUsedByTests public void close()", "class_method_signature": "DataSource.close()", "testcase": false, "constructor": false}, {"identifier": "checkConnectionUnderLock", "parameters": "()", "modifiers": "@GuardedBy(\"lock\") private", "return": "void", "signature": "void checkConnectionUnderLock()", "full_signature": "@GuardedBy(\"lock\") private void checkConnectionUnderLock()", "class_method_signature": "DataSource.checkConnectionUnderLock()", "testcase": false, "constructor": false}, {"identifier": "prepareStatementUnderLock", "parameters": "(@Untainted String sql,\n            int queryTimeoutSeconds)", "modifiers": "@GuardedBy(\"lock\") private", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatementUnderLock(@Untainted String sql,\n            int queryTimeoutSeconds)", "full_signature": "@GuardedBy(\"lock\") private PreparedStatement prepareStatementUnderLock(@Untainted String sql,\n            int queryTimeoutSeconds)", "class_method_signature": "DataSource.prepareStatementUnderLock(@Untainted String sql,\n            int queryTimeoutSeconds)", "testcase": false, "constructor": false}, {"identifier": "queryUnderLock", "parameters": "(@Untainted String sql, Object[] args,\n            ResultSetExtractor<T> rse)", "modifiers": "@GuardedBy(\"lock\") private", "return": "T", "signature": "T queryUnderLock(@Untainted String sql, Object[] args,\n            ResultSetExtractor<T> rse)", "full_signature": "@GuardedBy(\"lock\") private T queryUnderLock(@Untainted String sql, Object[] args,\n            ResultSetExtractor<T> rse)", "class_method_signature": "DataSource.queryUnderLock(@Untainted String sql, Object[] args,\n            ResultSetExtractor<T> rse)", "testcase": false, "constructor": false}, {"identifier": "analyzeH2DiskSpaceUnderSuppressQueryTimeout", "parameters": "()", "modifiers": "private", "return": "List<H2Table>", "signature": "List<H2Table> analyzeH2DiskSpaceUnderSuppressQueryTimeout()", "full_signature": "private List<H2Table> analyzeH2DiskSpaceUnderSuppressQueryTimeout()", "class_method_signature": "DataSource.analyzeH2DiskSpaceUnderSuppressQueryTimeout()", "testcase": false, "constructor": false}, {"identifier": "getAllTableNames", "parameters": "()", "modifiers": "@GuardedBy(\"lock\") private", "return": "List</*@Untainted*/ String>", "signature": "List</*@Untainted*/ String> getAllTableNames()", "full_signature": "@GuardedBy(\"lock\") private List</*@Untainted*/ String> getAllTableNames()", "class_method_signature": "DataSource.getAllTableNames()", "testcase": false, "constructor": false}, {"identifier": "createConnection", "parameters": "(@Nullable File dbFile)", "modifiers": "private static", "return": "JdbcConnection", "signature": "JdbcConnection createConnection(@Nullable File dbFile)", "full_signature": "private static JdbcConnection createConnection(@Nullable File dbFile)", "class_method_signature": "DataSource.createConnection(@Nullable File dbFile)", "testcase": false, "constructor": false}, {"identifier": "extractAndClose", "parameters": "(ResultSet resultSet, ResultSetExtractor<T> rse)", "modifiers": "private static", "return": "T", "signature": "T extractAndClose(ResultSet resultSet, ResultSetExtractor<T> rse)", "full_signature": "private static T extractAndClose(ResultSet resultSet, ResultSetExtractor<T> rse)", "class_method_signature": "DataSource.extractAndClose(ResultSet resultSet, ResultSetExtractor<T> rse)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String sql, @Nullable Object... args)", "modifiers": "private static", "return": "void", "signature": "void debug(String sql, @Nullable Object... args)", "full_signature": "private static void debug(String sql, @Nullable Object... args)", "class_method_signature": "DataSource.debug(String sql, @Nullable Object... args)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Logger logger, String sql, @Nullable Object... args)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void debug(Logger logger, String sql, @Nullable Object... args)", "full_signature": "@VisibleForTesting static void debug(Logger logger, String sql, @Nullable Object... args)", "class_method_signature": "DataSource.debug(Logger logger, String sql, @Nullable Object... args)", "testcase": false, "constructor": false}], "file": "agent/embedded/src/main/java/org/glowroot/agent/embedded/util/DataSource.java"}, "focal_method": {"identifier": "debug", "parameters": "(String sql, @Nullable Object... args)", "modifiers": "private static", "return": "void", "body": "private static void debug(String sql, @Nullable Object... args) {\n        debug(logger, sql, args);\n    }", "signature": "void debug(String sql, @Nullable Object... args)", "full_signature": "private static void debug(String sql, @Nullable Object... args)", "class_method_signature": "DataSource.debug(String sql, @Nullable Object... args)", "testcase": false, "constructor": false, "invocations": ["debug"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}