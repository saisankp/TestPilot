{"test_class": {"identifier": "UDFHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/utils/UDFHelperTest.java"}, "test_case": {"identifier": "generateUDFClause", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generateUDFClause() {\n        String clause = UDFHelper.generateUDFClause(\n            \"input\", \"func\", \"c1\", new String[]{\"c0\", \"c1\"}, new String[]{\"c0\", \"c1\", \"c2\"}\n        );\n        assertEquals(\n            \"SELECT `c0`,`c2`, func(`c0`,`c1`) as `c1` FROM input\",\n            clause);\n    }", "signature": "void generateUDFClause()", "full_signature": "@Test public void generateUDFClause()", "class_method_signature": "UDFHelperTest.generateUDFClause()", "testcase": true, "constructor": false, "invocations": ["generateUDFClause", "assertEquals"]}, "focal_class": {"identifier": "UDFHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generateRandomFuncName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String generateRandomFuncName()", "full_signature": "public static String generateRandomFuncName()", "class_method_signature": "UDFHelper.generateRandomFuncName()", "testcase": false, "constructor": false}, {"identifier": "generateUDFClause", "parameters": "(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "modifiers": "public static", "return": "String", "signature": "String generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "full_signature": "public static String generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "class_method_signature": "UDFHelper.generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "testcase": false, "constructor": false}, {"identifier": "generateUDTFClause", "parameters": "(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "modifiers": "public static", "return": "String", "signature": "String generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "full_signature": "public static String generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "class_method_signature": "UDFHelper.generateUDTFClause(\n        final String inTableName, final String functionName,\n        final String[] outputCols, final String[] selectedCols, final String[] reservedCols)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/utils/UDFHelper.java"}, "focal_method": {"identifier": "generateUDFClause", "parameters": "(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "modifiers": "public static", "return": "String", "body": "public static String generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols) {\n        final String selectedColsStr = TableUtil.columnsToSqlClause(selectedCols);\n\n        // if outputCol is found in reservedCols, the one in reservedCols will not be output\n        final String[] cleanedReservedCols = Arrays.stream(reservedCols)\n            .filter(d -> !d.equals(outputCol))\n            .toArray(String[]::new);\n\n        StringBuilder sb = new StringBuilder();\n        if (cleanedReservedCols.length > 0) {\n            sb.append(TableUtil.columnsToSqlClause(cleanedReservedCols)).append(\", \");\n        }\n        sb.append(functionName).append(\"(\").append(selectedColsStr).append(\") as `\").append(outputCol).append(\"`\");\n        return String.format(\"SELECT %s FROM %s\", sb.toString(), inTableName);\n    }", "signature": "String generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "full_signature": "public static String generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "class_method_signature": "UDFHelper.generateUDFClause(\n        final String inTableName, final String functionName,\n        final String outputCol, final String[] selectedCols, final String[] reservedCols)", "testcase": false, "constructor": false, "invocations": ["columnsToSqlClause", "toArray", "filter", "stream", "equals", "append", "append", "columnsToSqlClause", "append", "append", "append", "append", "append", "append", "format", "toString"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}