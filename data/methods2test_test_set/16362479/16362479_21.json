{"test_class": {"identifier": "RpcErrorsExceptionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERROR_MESSAGE = \"Test error message.\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE = \"Test error message.\"", "var_name": "ERROR_MESSAGE"}, {"original_string": "private List<RpcError> rpcErrors;", "modifier": "private", "type": "List<RpcError>", "declarator": "rpcErrors", "var_name": "rpcErrors"}, {"original_string": "private RpcErrorsException exception;", "modifier": "private", "type": "RpcErrorsException", "declarator": "exception", "var_name": "exception"}], "file": "opendaylight/md-sal/sal-remoterpc-connector/src/test/java/org/opendaylight/controller/remote/rpc/RpcErrorsExceptionTest.java"}, "test_case": {"identifier": "testGetRpcErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRpcErrors() {\n        final List<RpcError> actualErrors = (List<RpcError>) exception.getRpcErrors();\n        assertEquals(rpcErrors.size(), actualErrors.size());\n\n        for (int i = 0; i < actualErrors.size(); i++) {\n            final RpcError expected = rpcErrors.get(i);\n            final RpcError actual = actualErrors.get(i);\n\n            assertEquals(expected.getApplicationTag(), actual.getApplicationTag());\n            assertEquals(expected.getSeverity(), actual.getSeverity());\n            assertEquals(expected.getMessage(), actual.getMessage());\n            assertEquals(expected.getErrorType(), actual.getErrorType());\n            assertEquals(expected.getCause(), actual.getCause());\n            assertEquals(expected.getInfo(), actual.getInfo());\n            assertEquals(expected.getTag(), actual.getTag());\n        }\n    }", "signature": "void testGetRpcErrors()", "full_signature": "@Test public void testGetRpcErrors()", "class_method_signature": "RpcErrorsExceptionTest.testGetRpcErrors()", "testcase": true, "constructor": false, "invocations": ["getRpcErrors", "assertEquals", "size", "size", "size", "get", "get", "assertEquals", "getApplicationTag", "getApplicationTag", "assertEquals", "getSeverity", "getSeverity", "assertEquals", "getMessage", "getMessage", "assertEquals", "getErrorType", "getErrorType", "assertEquals", "getCause", "getCause", "assertEquals", "getInfo", "getInfo", "assertEquals", "getTag", "getTag"]}, "focal_class": {"identifier": "RpcErrorsException", "superclass": "extends DOMRpcException", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final List<RpcErrorData> rpcErrorDataList = new ArrayList<>();", "modifier": "private final", "type": "List<RpcErrorData>", "declarator": "rpcErrorDataList = new ArrayList<>()", "var_name": "rpcErrorDataList"}], "methods": [{"identifier": "RpcErrorsException", "parameters": "(final String message, final Iterable<? extends RpcError> rpcErrors)", "modifiers": "public", "return": "", "signature": " RpcErrorsException(final String message, final Iterable<? extends RpcError> rpcErrors)", "full_signature": "public  RpcErrorsException(final String message, final Iterable<? extends RpcError> rpcErrors)", "class_method_signature": "RpcErrorsException.RpcErrorsException(final String message, final Iterable<? extends RpcError> rpcErrors)", "testcase": false, "constructor": true}, {"identifier": "getRpcErrors", "parameters": "()", "modifiers": "public", "return": "Collection<RpcError>", "signature": "Collection<RpcError> getRpcErrors()", "full_signature": "public Collection<RpcError> getRpcErrors()", "class_method_signature": "RpcErrorsException.getRpcErrors()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-remoterpc-connector/src/main/java/org/opendaylight/controller/remote/rpc/RpcErrorsException.java"}, "focal_method": {"identifier": "getRpcErrors", "parameters": "()", "modifiers": "public", "return": "Collection<RpcError>", "body": "public Collection<RpcError> getRpcErrors() {\n        final Collection<RpcError> rpcErrors = new ArrayList<>();\n        for (final RpcErrorData ed: rpcErrorDataList) {\n            final RpcError rpcError = ed.severity == ErrorSeverity.ERROR\n                    ? RpcResultBuilder.newError(ed.errorType, ed.tag, ed.message, ed.applicationTag,\n                            ed.info, ed.cause) :\n                      RpcResultBuilder.newWarning(ed.errorType, ed.tag, ed.message, ed.applicationTag,\n                            ed.info, ed.cause);\n            rpcErrors.add(rpcError);\n        }\n\n        return rpcErrors;\n    }", "signature": "Collection<RpcError> getRpcErrors()", "full_signature": "public Collection<RpcError> getRpcErrors()", "class_method_signature": "RpcErrorsException.getRpcErrors()", "testcase": false, "constructor": false, "invocations": ["newError", "newWarning", "add"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}