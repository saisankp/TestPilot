{"test_class": {"identifier": "LocalDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LocalDispatcher mLocalDispatcher;", "modifier": "private", "type": "LocalDispatcher", "declarator": "mLocalDispatcher", "var_name": "mLocalDispatcher"}, {"original_string": "private BlockingQueue<BallRequest> mRequestQueue;", "modifier": "private", "type": "BlockingQueue<BallRequest>", "declarator": "mRequestQueue", "var_name": "mRequestQueue"}, {"original_string": "private BlockingQueue<BallRequest> mNetworkQueue;", "modifier": "private", "type": "BlockingQueue<BallRequest>", "declarator": "mNetworkQueue", "var_name": "mNetworkQueue"}, {"original_string": "private BallResponseDelivery mResponseDelivery;", "modifier": "private", "type": "BallResponseDelivery", "declarator": "mResponseDelivery", "var_name": "mResponseDelivery"}, {"original_string": "private LocalRequestProcessor mLocalRequestProcessor;", "modifier": "private", "type": "LocalRequestProcessor", "declarator": "mLocalRequestProcessor", "var_name": "mLocalRequestProcessor"}, {"original_string": "private BallRequest mRequest;", "modifier": "private", "type": "BallRequest", "declarator": "mRequest", "var_name": "mRequest"}, {"original_string": "private BallResponse mResponse;", "modifier": "private", "type": "BallResponse", "declarator": "mResponse", "var_name": "mResponse"}], "file": "library/src/test/java/com/siu/android/volleyball/local/LocalDispatcherTest.java"}, "test_case": {"identifier": "shouldPostResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldPostResponse() throws Exception {\n        // the response\n        final Object responseContent = new Object();\n\n        // local request processor returns non null reponse\n        Mockito.when(mLocalRequestProcessor.getLocalResponse()).thenReturn(responseContent);\n\n        Assertions.assertThat(mLocalDispatcher.dispatch()).isEqualTo(true);\n        Mockito.verify(mRequestQueue).take();\n        Mockito.verify(mRequest).addMarker(\"local-queue-take\");\n        Mockito.verify(mRequest).addMarker(\"local-response-get-content-successful\");\n        Mockito.verify(mResponseDelivery).postResponse(Mockito.eq(mRequest), Mockito.argThat(new ArgumentMatcher<BallResponse<?>>() {\n            @Override\n            public boolean matches(Object argument) {\n                if (argument instanceof BallResponse ) {\n                    BallResponse response = (BallResponse) argument;\n                    // response should be local and intermediate\n                    if (response.getResponseSource() == BallResponse.ResponseSource.LOCAL &&\n                            response.isIntermediate() && response.getResult().equals(responseContent)) {\n                        return true;\n                    }\n                }\n\n                return false;\n            }\n        }));\n        Mockito.verifyNoMoreInteractions(mResponseDelivery);\n    }", "signature": "void shouldPostResponse()", "full_signature": "@Test public void shouldPostResponse()", "class_method_signature": "LocalDispatcherTest.shouldPostResponse()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getLocalResponse", "isEqualTo", "assertThat", "dispatch", "take", "verify", "addMarker", "verify", "addMarker", "verify", "postResponse", "verify", "eq", "argThat", "getResponseSource", "isIntermediate", "equals", "getResult", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "LocalDispatcher", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static final boolean DEBUG = VolleyLog.DEBUG;", "modifier": "private static final", "type": "boolean", "declarator": "DEBUG = VolleyLog.DEBUG", "var_name": "DEBUG"}, {"original_string": "private final BlockingQueue<BallRequest> mRequestQueue;", "modifier": "private final", "type": "BlockingQueue<BallRequest>", "declarator": "mRequestQueue", "var_name": "mRequestQueue"}, {"original_string": "private final BlockingQueue<BallRequest> mNetworkQueue;", "modifier": "private final", "type": "BlockingQueue<BallRequest>", "declarator": "mNetworkQueue", "var_name": "mNetworkQueue"}, {"original_string": "private final BallResponseDelivery mDelivery;", "modifier": "private final", "type": "BallResponseDelivery", "declarator": "mDelivery", "var_name": "mDelivery"}, {"original_string": "private volatile boolean mQuit = false;", "modifier": "private volatile", "type": "boolean", "declarator": "mQuit = false", "var_name": "mQuit"}], "methods": [{"identifier": "LocalDispatcher", "parameters": "(BlockingQueue<BallRequest> requestQueue, BlockingQueue<BallRequest> networkQueue, BallResponseDelivery delivery)", "modifiers": "public", "return": "", "signature": " LocalDispatcher(BlockingQueue<BallRequest> requestQueue, BlockingQueue<BallRequest> networkQueue, BallResponseDelivery delivery)", "full_signature": "public  LocalDispatcher(BlockingQueue<BallRequest> requestQueue, BlockingQueue<BallRequest> networkQueue, BallResponseDelivery delivery)", "class_method_signature": "LocalDispatcher.LocalDispatcher(BlockingQueue<BallRequest> requestQueue, BlockingQueue<BallRequest> networkQueue, BallResponseDelivery delivery)", "testcase": false, "constructor": true}, {"identifier": "quit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void quit()", "full_signature": "public void quit()", "class_method_signature": "LocalDispatcher.quit()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "LocalDispatcher.run()", "testcase": false, "constructor": false}, {"identifier": "dispatch", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean dispatch()", "full_signature": "protected boolean dispatch()", "class_method_signature": "LocalDispatcher.dispatch()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/siu/android/volleyball/local/LocalDispatcher.java"}, "focal_method": {"identifier": "dispatch", "parameters": "()", "modifiers": "protected", "return": "boolean", "body": "protected boolean dispatch() {\n        try {\n            // Get a request from the local triage queue, blocking until\n            // at least one is available.\n            final BallRequest request = mRequestQueue.take();\n            request.addMarker(\"local-queue-take\");\n\n            // If the request has been canceled, don't bother dispatching it.\n            if (request.isCanceled()) {\n                request.finish(\"local-discard-canceled\");\n                return true;\n            }\n\n            Object responseContent = request.getLocalRequestProcessor().getLocalResponse();\n\n            // Do not deliver local response if null\n            // Let a chance to the cache to deliver a better response\n            if (responseContent == null) {\n                request.addMarker(\"local-response-content-null-exit\");\n                mDelivery.postEmptyIntermediateResponse(request, BallResponse.ResponseSource.LOCAL);\n                return true;\n            }\n\n            request.addMarker(\"local-response-get-content-successful\");\n\n            BallResponse response = BallResponse.success(responseContent, null);\n            response.setResponseSource(BallResponse.ResponseSource.LOCAL);\n            response.setIntermediate(true);\n\n            // Post the intermediate response back to the user and have\n            // the delivery then forward the request along to the network.\n            mDelivery.postResponse(request, response);\n\n        } catch (InterruptedException e) {\n            // We may have been interrupted because it was time to quit.\n            if (mQuit) {\n                return false;\n            }\n            return true;\n        }\n\n        return true;\n    }", "signature": "boolean dispatch()", "full_signature": "protected boolean dispatch()", "class_method_signature": "LocalDispatcher.dispatch()", "testcase": false, "constructor": false, "invocations": ["take", "addMarker", "isCanceled", "finish", "getLocalResponse", "getLocalRequestProcessor", "addMarker", "postEmptyIntermediateResponse", "addMarker", "success", "setResponseSource", "setIntermediate", "postResponse"]}, "repository": {"repo_id": 12504536, "url": "https://github.com/lukaspili/Volley-Ball", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 32, "size": 490, "license": "licensed"}}