{"test_class": {"identifier": "ImmutablePolicyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Label END_USER_LABEL = Label.of(\"EndUser\");", "modifier": "private static final", "type": "Label", "declarator": "END_USER_LABEL = Label.of(\"EndUser\")", "var_name": "END_USER_LABEL"}, {"original_string": "private static final JsonPointer END_USER_RESOURCE_1 = JsonPointer.of(\"foo/bar\");", "modifier": "private static final", "type": "JsonPointer", "declarator": "END_USER_RESOURCE_1 = JsonPointer.of(\"foo/bar\")", "var_name": "END_USER_RESOURCE_1"}, {"original_string": "private static final JsonPointer END_USER_RESOURCE_2 = JsonPointer.of(\"/attributes\");", "modifier": "private static final", "type": "JsonPointer", "declarator": "END_USER_RESOURCE_2 = JsonPointer.of(\"/attributes\")", "var_name": "END_USER_RESOURCE_2"}, {"original_string": "private static final SubjectId END_USER_SUBJECT_ID_1 =\n            SubjectId.newInstance(SubjectIssuer.GOOGLE, \"myself\");", "modifier": "private static final", "type": "SubjectId", "declarator": "END_USER_SUBJECT_ID_1 =\n            SubjectId.newInstance(SubjectIssuer.GOOGLE, \"myself\")", "var_name": "END_USER_SUBJECT_ID_1"}, {"original_string": "private static final SubjectType END_USER_SUBJECT_TYPE_1 = SubjectType.newInstance(\"endUserSubjectType1\");", "modifier": "private static final", "type": "SubjectType", "declarator": "END_USER_SUBJECT_TYPE_1 = SubjectType.newInstance(\"endUserSubjectType1\")", "var_name": "END_USER_SUBJECT_TYPE_1"}, {"original_string": "private static final SubjectId END_USER_SUBJECT_ID_2 =\n            SubjectId.newInstance(SubjectIssuer.GOOGLE, \"others\");", "modifier": "private static final", "type": "SubjectId", "declarator": "END_USER_SUBJECT_ID_2 =\n            SubjectId.newInstance(SubjectIssuer.GOOGLE, \"others\")", "var_name": "END_USER_SUBJECT_ID_2"}, {"original_string": "private static final SubjectType END_USER_SUBJECT_TYPE_2 = SubjectType.newInstance(\"endUserSubjectType2\");", "modifier": "private static final", "type": "SubjectType", "declarator": "END_USER_SUBJECT_TYPE_2 = SubjectType.newInstance(\"endUserSubjectType2\")", "var_name": "END_USER_SUBJECT_TYPE_2"}, {"original_string": "private static final EffectedPermissions END_USER_EFFECTED_PERMISSIONS_1 =\n            EffectedPermissions.newInstance(Permissions.newInstance(TestConstants.Policy.PERMISSION_READ),\n                    Permissions.newInstance(TestConstants.Policy.PERMISSION_WRITE));", "modifier": "private static final", "type": "EffectedPermissions", "declarator": "END_USER_EFFECTED_PERMISSIONS_1 =\n            EffectedPermissions.newInstance(Permissions.newInstance(TestConstants.Policy.PERMISSION_READ),\n                    Permissions.newInstance(TestConstants.Policy.PERMISSION_WRITE))", "var_name": "END_USER_EFFECTED_PERMISSIONS_1"}, {"original_string": "private static final Label SUPPORT_LABEL = Label.of(\"SupportGroup\");", "modifier": "private static final", "type": "Label", "declarator": "SUPPORT_LABEL = Label.of(\"SupportGroup\")", "var_name": "SUPPORT_LABEL"}, {"original_string": "private static final PolicyId POLICY_ID = PolicyId.of(\"com.example\", \"myPolicy\");", "modifier": "private static final", "type": "PolicyId", "declarator": "POLICY_ID = PolicyId.of(\"com.example\", \"myPolicy\")", "var_name": "POLICY_ID"}], "file": "model/policies/src/test/java/org/eclipse/ditto/model/policies/ImmutablePolicyTest.java"}, "test_case": {"identifier": "setSubjectForShouldCopyExisting", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setSubjectForShouldCopyExisting() {\n        final Policy policy = createPolicy();\n        final Policy policyModified =\n                policy.setSubjectFor(END_USER_LABEL,\n                        Subject.newInstance(END_USER_SUBJECT_ID_2, END_USER_SUBJECT_TYPE_2));\n\n        assertThat(policy).hasLabel(END_USER_LABEL);\n        assertThat(policy).hasSubjectFor(END_USER_LABEL, END_USER_SUBJECT_ID_1);\n        assertThat(policy).hasSubjectTypeFor(END_USER_LABEL, END_USER_SUBJECT_ID_1, END_USER_SUBJECT_TYPE_1);\n        assertThat(policy).doesNotHaveSubjectFor(END_USER_LABEL, END_USER_SUBJECT_ID_2);\n        assertThat(policy).hasResourceFor(END_USER_LABEL, TestConstants.Policy.RESOURCE_TYPE, END_USER_RESOURCE_1);\n        assertThat(policyModified).hasLabel(END_USER_LABEL);\n        assertThat(policyModified).hasSubjectFor(END_USER_LABEL, END_USER_SUBJECT_ID_1);\n        assertThat(policyModified).hasSubjectTypeFor(END_USER_LABEL, END_USER_SUBJECT_ID_1, END_USER_SUBJECT_TYPE_1);\n        assertThat(policyModified).hasSubjectFor(END_USER_LABEL, END_USER_SUBJECT_ID_2);\n        assertThat(policyModified).hasSubjectTypeFor(END_USER_LABEL, END_USER_SUBJECT_ID_2, END_USER_SUBJECT_TYPE_2);\n        assertThat(policyModified).hasResourceFor(END_USER_LABEL, TestConstants.Policy.RESOURCE_TYPE,\n                END_USER_RESOURCE_1);\n    }", "signature": "void setSubjectForShouldCopyExisting()", "full_signature": "@Test public void setSubjectForShouldCopyExisting()", "class_method_signature": "ImmutablePolicyTest.setSubjectForShouldCopyExisting()", "testcase": true, "constructor": false, "invocations": ["createPolicy", "setSubjectFor", "newInstance", "hasLabel", "assertThat", "hasSubjectFor", "assertThat", "hasSubjectTypeFor", "assertThat", "doesNotHaveSubjectFor", "assertThat", "hasResourceFor", "assertThat", "hasLabel", "assertThat", "hasSubjectFor", "assertThat", "hasSubjectTypeFor", "assertThat", "hasSubjectFor", "assertThat", "hasSubjectTypeFor", "assertThat", "hasResourceFor", "assertThat"]}, "focal_class": {"identifier": "ImmutablePolicy", "superclass": "", "interfaces": "implements Policy", "fields": [{"original_string": "@Nullable private final PolicyId policyId;", "modifier": "@Nullable private final", "type": "PolicyId", "declarator": "policyId", "var_name": "policyId"}, {"original_string": "private final Map<Label, PolicyEntry> entries;", "modifier": "private final", "type": "Map<Label, PolicyEntry>", "declarator": "entries", "var_name": "entries"}, {"original_string": "@Nullable private final String namespace;", "modifier": "@Nullable private final", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "@Nullable private final PolicyLifecycle lifecycle;", "modifier": "@Nullable private final", "type": "PolicyLifecycle", "declarator": "lifecycle", "var_name": "lifecycle"}, {"original_string": "@Nullable private final PolicyRevision revision;", "modifier": "@Nullable private final", "type": "PolicyRevision", "declarator": "revision", "var_name": "revision"}, {"original_string": "@Nullable private final Instant modified;", "modifier": "@Nullable private final", "type": "Instant", "declarator": "modified", "var_name": "modified"}, {"original_string": "@Nullable private final Instant created;", "modifier": "@Nullable private final", "type": "Instant", "declarator": "created", "var_name": "created"}], "methods": [{"identifier": "ImmutablePolicy", "parameters": "(@Nullable final PolicyId policyId,\n            final Map<Label, PolicyEntry> theEntries,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created)", "modifiers": "private", "return": "", "signature": " ImmutablePolicy(@Nullable final PolicyId policyId,\n            final Map<Label, PolicyEntry> theEntries,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created)", "full_signature": "private  ImmutablePolicy(@Nullable final PolicyId policyId,\n            final Map<Label, PolicyEntry> theEntries,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created)", "class_method_signature": "ImmutablePolicy.ImmutablePolicy(@Nullable final PolicyId policyId,\n            final Map<Label, PolicyEntry> theEntries,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(@Nullable final String policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "modifiers": "@Deprecated public static", "return": "Policy", "signature": "Policy of(@Nullable final String policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "full_signature": "@Deprecated public static Policy of(@Nullable final String policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "class_method_signature": "ImmutablePolicy.of(@Nullable final String policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(@Nullable final PolicyId policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "modifiers": "public static", "return": "Policy", "signature": "Policy of(@Nullable final PolicyId policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "full_signature": "public static Policy of(@Nullable final PolicyId policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "class_method_signature": "ImmutablePolicy.of(@Nullable final PolicyId policyId,\n            @Nullable final PolicyLifecycle lifecycle,\n            @Nullable final PolicyRevision revision,\n            @Nullable final Instant modified,\n            @Nullable final Instant created,\n            final Iterable<PolicyEntry> entries)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject)", "modifiers": "public static", "return": "Policy", "signature": "Policy fromJson(final JsonObject jsonObject)", "full_signature": "public static Policy fromJson(final JsonObject jsonObject)", "class_method_signature": "ImmutablePolicy.fromJson(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "tryToParseModified", "parameters": "(final CharSequence dateTime)", "modifiers": "private static", "return": "Instant", "signature": "Instant tryToParseModified(final CharSequence dateTime)", "full_signature": "private static Instant tryToParseModified(final CharSequence dateTime)", "class_method_signature": "ImmutablePolicy.tryToParseModified(final CharSequence dateTime)", "testcase": false, "constructor": false}, {"identifier": "getEntityId", "parameters": "()", "modifiers": "@Override public", "return": "Optional<PolicyId>", "signature": "Optional<PolicyId> getEntityId()", "full_signature": "@Override public Optional<PolicyId> getEntityId()", "class_method_signature": "ImmutablePolicy.getEntityId()", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getNamespace()", "full_signature": "@Override public Optional<String> getNamespace()", "class_method_signature": "ImmutablePolicy.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "getLifecycle", "parameters": "()", "modifiers": "@Override public", "return": "Optional<PolicyLifecycle>", "signature": "Optional<PolicyLifecycle> getLifecycle()", "full_signature": "@Override public Optional<PolicyLifecycle> getLifecycle()", "class_method_signature": "ImmutablePolicy.getLifecycle()", "testcase": false, "constructor": false}, {"identifier": "getRevision", "parameters": "()", "modifiers": "@Override public", "return": "Optional<PolicyRevision>", "signature": "Optional<PolicyRevision> getRevision()", "full_signature": "@Override public Optional<PolicyRevision> getRevision()", "class_method_signature": "ImmutablePolicy.getRevision()", "testcase": false, "constructor": false}, {"identifier": "getModified", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Instant>", "signature": "Optional<Instant> getModified()", "full_signature": "@Override public Optional<Instant> getModified()", "class_method_signature": "ImmutablePolicy.getModified()", "testcase": false, "constructor": false}, {"identifier": "getCreated", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Instant>", "signature": "Optional<Instant> getCreated()", "full_signature": "@Override public Optional<Instant> getCreated()", "class_method_signature": "ImmutablePolicy.getCreated()", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Metadata>", "signature": "Optional<Metadata> getMetadata()", "full_signature": "@Override public Optional<Metadata> getMetadata()", "class_method_signature": "ImmutablePolicy.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "isDeleted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDeleted()", "full_signature": "@Override public boolean isDeleted()", "class_method_signature": "ImmutablePolicy.isDeleted()", "testcase": false, "constructor": false}, {"identifier": "setEntry", "parameters": "(final PolicyEntry policyEntry)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy setEntry(final PolicyEntry policyEntry)", "full_signature": "@Override public Policy setEntry(final PolicyEntry policyEntry)", "class_method_signature": "ImmutablePolicy.setEntry(final PolicyEntry policyEntry)", "testcase": false, "constructor": false}, {"identifier": "getLabels", "parameters": "()", "modifiers": "@Override public", "return": "Set<Label>", "signature": "Set<Label> getLabels()", "full_signature": "@Override public Set<Label> getLabels()", "class_method_signature": "ImmutablePolicy.getLabels()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final CharSequence label)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final CharSequence label)", "full_signature": "@Override public boolean contains(final CharSequence label)", "class_method_signature": "ImmutablePolicy.contains(final CharSequence label)", "testcase": false, "constructor": false}, {"identifier": "getEntryFor", "parameters": "(final CharSequence label)", "modifiers": "@Override public", "return": "Optional<PolicyEntry>", "signature": "Optional<PolicyEntry> getEntryFor(final CharSequence label)", "full_signature": "@Override public Optional<PolicyEntry> getEntryFor(final CharSequence label)", "class_method_signature": "ImmutablePolicy.getEntryFor(final CharSequence label)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(final CharSequence label)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy removeEntry(final CharSequence label)", "full_signature": "@Override public Policy removeEntry(final CharSequence label)", "class_method_signature": "ImmutablePolicy.removeEntry(final CharSequence label)", "testcase": false, "constructor": false}, {"identifier": "removeEntry", "parameters": "(final PolicyEntry entry)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy removeEntry(final PolicyEntry entry)", "full_signature": "@Override public Policy removeEntry(final PolicyEntry entry)", "class_method_signature": "ImmutablePolicy.removeEntry(final PolicyEntry entry)", "testcase": false, "constructor": false}, {"identifier": "setSubjectsFor", "parameters": "(final CharSequence label, final Subjects subjects)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy setSubjectsFor(final CharSequence label, final Subjects subjects)", "full_signature": "@Override public Policy setSubjectsFor(final CharSequence label, final Subjects subjects)", "class_method_signature": "ImmutablePolicy.setSubjectsFor(final CharSequence label, final Subjects subjects)", "testcase": false, "constructor": false}, {"identifier": "setSubjectFor", "parameters": "(final CharSequence label, final Subject subject)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy setSubjectFor(final CharSequence label, final Subject subject)", "full_signature": "@Override public Policy setSubjectFor(final CharSequence label, final Subject subject)", "class_method_signature": "ImmutablePolicy.setSubjectFor(final CharSequence label, final Subject subject)", "testcase": false, "constructor": false}, {"identifier": "removeSubjectFor", "parameters": "(final CharSequence label, final SubjectId subjectId)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy removeSubjectFor(final CharSequence label, final SubjectId subjectId)", "full_signature": "@Override public Policy removeSubjectFor(final CharSequence label, final SubjectId subjectId)", "class_method_signature": "ImmutablePolicy.removeSubjectFor(final CharSequence label, final SubjectId subjectId)", "testcase": false, "constructor": false}, {"identifier": "setResourcesFor", "parameters": "(final CharSequence label, final Resources resources)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy setResourcesFor(final CharSequence label, final Resources resources)", "full_signature": "@Override public Policy setResourcesFor(final CharSequence label, final Resources resources)", "class_method_signature": "ImmutablePolicy.setResourcesFor(final CharSequence label, final Resources resources)", "testcase": false, "constructor": false}, {"identifier": "setResourceFor", "parameters": "(final CharSequence label, final Resource resource)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy setResourceFor(final CharSequence label, final Resource resource)", "full_signature": "@Override public Policy setResourceFor(final CharSequence label, final Resource resource)", "class_method_signature": "ImmutablePolicy.setResourceFor(final CharSequence label, final Resource resource)", "testcase": false, "constructor": false}, {"identifier": "removeResourceFor", "parameters": "(final CharSequence label, final ResourceKey resourceKey)", "modifiers": "@Override public", "return": "Policy", "signature": "Policy removeResourceFor(final CharSequence label, final ResourceKey resourceKey)", "full_signature": "@Override public Policy removeResourceFor(final CharSequence label, final ResourceKey resourceKey)", "class_method_signature": "ImmutablePolicy.removeResourceFor(final CharSequence label, final ResourceKey resourceKey)", "testcase": false, "constructor": false}, {"identifier": "getEffectedPermissionsFor", "parameters": "(final CharSequence label, final SubjectId subjectId,\n            final ResourceKey resourceKey)", "modifiers": "@Override public", "return": "Optional<EffectedPermissions>", "signature": "Optional<EffectedPermissions> getEffectedPermissionsFor(final CharSequence label, final SubjectId subjectId,\n            final ResourceKey resourceKey)", "full_signature": "@Override public Optional<EffectedPermissions> getEffectedPermissionsFor(final CharSequence label, final SubjectId subjectId,\n            final ResourceKey resourceKey)", "class_method_signature": "ImmutablePolicy.getEffectedPermissionsFor(final CharSequence label, final SubjectId subjectId,\n            final ResourceKey resourceKey)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ImmutablePolicy.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "ImmutablePolicy.getSize()", "testcase": false, "constructor": false}, {"identifier": "getEntriesSet", "parameters": "()", "modifiers": "@Override public", "return": "Set<PolicyEntry>", "signature": "Set<PolicyEntry> getEntriesSet()", "full_signature": "@Override public Set<PolicyEntry> getEntriesSet()", "class_method_signature": "ImmutablePolicy.getEntriesSet()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<PolicyEntry>", "signature": "Stream<PolicyEntry> stream()", "full_signature": "@Override public Stream<PolicyEntry> stream()", "class_method_signature": "ImmutablePolicy.stream()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<PolicyEntry>", "signature": "Iterator<PolicyEntry> iterator()", "full_signature": "@Override public Iterator<PolicyEntry> iterator()", "class_method_signature": "ImmutablePolicy.iterator()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "full_signature": "@Override public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "class_method_signature": "ImmutablePolicy.toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "copyEntries", "parameters": "()", "modifiers": "private", "return": "Map<Label, PolicyEntry>", "signature": "Map<Label, PolicyEntry> copyEntries()", "full_signature": "private Map<Label, PolicyEntry> copyEntries()", "class_method_signature": "ImmutablePolicy.copyEntries()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutablePolicy.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutablePolicy.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutablePolicy.toString()", "testcase": false, "constructor": false}], "file": "model/policies/src/main/java/org/eclipse/ditto/model/policies/ImmutablePolicy.java"}, "focal_method": {"identifier": "setSubjectFor", "parameters": "(final CharSequence label, final Subject subject)", "modifiers": "@Override public", "return": "Policy", "body": "@Override\n    public Policy setSubjectFor(final CharSequence label, final Subject subject) {\n        final Label lbl = Label.of(label);\n        checkNotNull(subject, \"subject to set to the Policy entry\");\n\n        final Policy result;\n        final PolicyEntry existingPolicyEntry = entries.get(lbl);\n        if (null != existingPolicyEntry) {\n            final Subjects existingSubjects = existingPolicyEntry.getSubjects();\n            final Subjects newSubjects = existingSubjects.setSubject(subject);\n            if (!Objects.equals(existingSubjects, newSubjects)) {\n                final Map<Label, PolicyEntry> entriesCopy = copyEntries();\n                entriesCopy.put(lbl, newPolicyEntry(lbl, newSubjects, existingPolicyEntry.getResources()));\n                result = new ImmutablePolicy(policyId, entriesCopy, lifecycle, revision, modified, created);\n            } else {\n                result = this;\n            }\n        } else {\n            result = setSubjectsFor(label, Subjects.newInstance(subject));\n        }\n\n        return result;\n    }", "signature": "Policy setSubjectFor(final CharSequence label, final Subject subject)", "full_signature": "@Override public Policy setSubjectFor(final CharSequence label, final Subject subject)", "class_method_signature": "ImmutablePolicy.setSubjectFor(final CharSequence label, final Subject subject)", "testcase": false, "constructor": false, "invocations": ["of", "checkNotNull", "get", "getSubjects", "setSubject", "equals", "copyEntries", "put", "newPolicyEntry", "getResources", "setSubjectsFor", "newInstance"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}