{"test_class": {"identifier": "ByteUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "ethereumj-core/src/test/java/org/ethereum/util/ByteUtilTest.java"}, "test_case": {"identifier": "testMatchingNibbleLength5", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void testMatchingNibbleLength5() {\n        // a == null\n        byte[] a = null;\n        byte[] b = new byte[]{0x00};\n        ByteUtil.matchingNibbleLength(a, b);\n    }", "signature": "void testMatchingNibbleLength5()", "full_signature": "@Test(expected = NullPointerException.class) public void testMatchingNibbleLength5()", "class_method_signature": "ByteUtilTest.testMatchingNibbleLength5()", "testcase": true, "constructor": false, "invocations": ["matchingNibbleLength"]}, "focal_class": {"identifier": "ByteUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];", "modifier": "public static final", "type": "byte[]", "declarator": "EMPTY_BYTE_ARRAY = new byte[0]", "var_name": "EMPTY_BYTE_ARRAY"}, {"original_string": "public static final byte[] ZERO_BYTE_ARRAY = new byte[]{0};", "modifier": "public static final", "type": "byte[]", "declarator": "ZERO_BYTE_ARRAY = new byte[]{0}", "var_name": "ZERO_BYTE_ARRAY"}], "methods": [{"identifier": "appendByte", "parameters": "(byte[] bytes, byte b)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] appendByte(byte[] bytes, byte b)", "full_signature": "public static byte[] appendByte(byte[] bytes, byte b)", "class_method_signature": "ByteUtil.appendByte(byte[] bytes, byte b)", "testcase": false, "constructor": false}, {"identifier": "bigIntegerToBytes", "parameters": "(BigInteger b, int numBytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] bigIntegerToBytes(BigInteger b, int numBytes)", "full_signature": "public static byte[] bigIntegerToBytes(BigInteger b, int numBytes)", "class_method_signature": "ByteUtil.bigIntegerToBytes(BigInteger b, int numBytes)", "testcase": false, "constructor": false}, {"identifier": "bigIntegerToBytesSigned", "parameters": "(BigInteger b, int numBytes)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] bigIntegerToBytesSigned(BigInteger b, int numBytes)", "full_signature": "public static byte[] bigIntegerToBytesSigned(BigInteger b, int numBytes)", "class_method_signature": "ByteUtil.bigIntegerToBytesSigned(BigInteger b, int numBytes)", "testcase": false, "constructor": false}, {"identifier": "bigIntegerToBytes", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] bigIntegerToBytes(BigInteger value)", "full_signature": "public static byte[] bigIntegerToBytes(BigInteger value)", "class_method_signature": "ByteUtil.bigIntegerToBytes(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "bytesToBigInteger", "parameters": "(byte[] bb)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger bytesToBigInteger(byte[] bb)", "full_signature": "public static BigInteger bytesToBigInteger(byte[] bb)", "class_method_signature": "ByteUtil.bytesToBigInteger(byte[] bb)", "testcase": false, "constructor": false}, {"identifier": "matchingNibbleLength", "parameters": "(byte[] a, byte[] b)", "modifiers": "public static", "return": "int", "signature": "int matchingNibbleLength(byte[] a, byte[] b)", "full_signature": "public static int matchingNibbleLength(byte[] a, byte[] b)", "class_method_signature": "ByteUtil.matchingNibbleLength(byte[] a, byte[] b)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytes(long val)", "full_signature": "public static byte[] longToBytes(long val)", "class_method_signature": "ByteUtil.longToBytes(long val)", "testcase": false, "constructor": false}, {"identifier": "longToBytesNoLeadZeroes", "parameters": "(long val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytesNoLeadZeroes(long val)", "full_signature": "public static byte[] longToBytesNoLeadZeroes(long val)", "class_method_signature": "ByteUtil.longToBytesNoLeadZeroes(long val)", "testcase": false, "constructor": false}, {"identifier": "intToBytes", "parameters": "(int val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytes(int val)", "full_signature": "public static byte[] intToBytes(int val)", "class_method_signature": "ByteUtil.intToBytes(int val)", "testcase": false, "constructor": false}, {"identifier": "intToBytesNoLeadZeroes", "parameters": "(int val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytesNoLeadZeroes(int val)", "full_signature": "public static byte[] intToBytesNoLeadZeroes(int val)", "class_method_signature": "ByteUtil.intToBytesNoLeadZeroes(int val)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] data)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] data)", "full_signature": "public static String toHexString(byte[] data)", "class_method_signature": "ByteUtil.toHexString(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "calcPacketLength", "parameters": "(byte[] msg)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] calcPacketLength(byte[] msg)", "full_signature": "public static byte[] calcPacketLength(byte[] msg)", "class_method_signature": "ByteUtil.calcPacketLength(byte[] msg)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToInt", "parameters": "(byte[] b)", "modifiers": "public static", "return": "int", "signature": "int byteArrayToInt(byte[] b)", "full_signature": "public static int byteArrayToInt(byte[] b)", "class_method_signature": "ByteUtil.byteArrayToInt(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToLong", "parameters": "(byte[] b)", "modifiers": "public static", "return": "long", "signature": "long byteArrayToLong(byte[] b)", "full_signature": "public static long byteArrayToLong(byte[] b)", "class_method_signature": "ByteUtil.byteArrayToLong(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "nibblesToPrettyString", "parameters": "(byte[] nibbles)", "modifiers": "public static", "return": "String", "signature": "String nibblesToPrettyString(byte[] nibbles)", "full_signature": "public static String nibblesToPrettyString(byte[] nibbles)", "class_method_signature": "ByteUtil.nibblesToPrettyString(byte[] nibbles)", "testcase": false, "constructor": false}, {"identifier": "oneByteToHexString", "parameters": "(byte value)", "modifiers": "public static", "return": "String", "signature": "String oneByteToHexString(byte value)", "full_signature": "public static String oneByteToHexString(byte value)", "class_method_signature": "ByteUtil.oneByteToHexString(byte value)", "testcase": false, "constructor": false}, {"identifier": "numBytes", "parameters": "(String val)", "modifiers": "public static", "return": "int", "signature": "int numBytes(String val)", "full_signature": "public static int numBytes(String val)", "class_method_signature": "ByteUtil.numBytes(String val)", "testcase": false, "constructor": false}, {"identifier": "encodeValFor32Bits", "parameters": "(Object arg)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeValFor32Bits(Object arg)", "full_signature": "public static byte[] encodeValFor32Bits(Object arg)", "class_method_signature": "ByteUtil.encodeValFor32Bits(Object arg)", "testcase": false, "constructor": false}, {"identifier": "encodeDataList", "parameters": "(Object... args)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeDataList(Object... args)", "full_signature": "public static byte[] encodeDataList(Object... args)", "class_method_signature": "ByteUtil.encodeDataList(Object... args)", "testcase": false, "constructor": false}, {"identifier": "firstNonZeroByte", "parameters": "(byte[] data)", "modifiers": "public static", "return": "int", "signature": "int firstNonZeroByte(byte[] data)", "full_signature": "public static int firstNonZeroByte(byte[] data)", "class_method_signature": "ByteUtil.firstNonZeroByte(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "stripLeadingZeroes", "parameters": "(byte[] data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] stripLeadingZeroes(byte[] data)", "full_signature": "public static byte[] stripLeadingZeroes(byte[] data)", "class_method_signature": "ByteUtil.stripLeadingZeroes(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "boolean", "signature": "boolean increment(byte[] bytes)", "full_signature": "public static boolean increment(byte[] bytes)", "class_method_signature": "ByteUtil.increment(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "copyToArray", "parameters": "(BigInteger value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] copyToArray(BigInteger value)", "full_signature": "public static byte[] copyToArray(BigInteger value)", "class_method_signature": "ByteUtil.copyToArray(BigInteger value)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(byte[] data)", "modifiers": "public static", "return": "ByteArrayWrapper", "signature": "ByteArrayWrapper wrap(byte[] data)", "full_signature": "public static ByteArrayWrapper wrap(byte[] data)", "class_method_signature": "ByteUtil.wrap(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "setBit", "parameters": "(byte[] data, int pos, int val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] setBit(byte[] data, int pos, int val)", "full_signature": "public static byte[] setBit(byte[] data, int pos, int val)", "class_method_signature": "ByteUtil.setBit(byte[] data, int pos, int val)", "testcase": false, "constructor": false}, {"identifier": "getBit", "parameters": "(byte[] data, int pos)", "modifiers": "public static", "return": "int", "signature": "int getBit(byte[] data, int pos)", "full_signature": "public static int getBit(byte[] data, int pos)", "class_method_signature": "ByteUtil.getBit(byte[] data, int pos)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(byte[] b1, byte[] b2)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] and(byte[] b1, byte[] b2)", "full_signature": "public static byte[] and(byte[] b1, byte[] b2)", "class_method_signature": "ByteUtil.and(byte[] b1, byte[] b2)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(byte[] b1, byte[] b2)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] or(byte[] b1, byte[] b2)", "full_signature": "public static byte[] or(byte[] b1, byte[] b2)", "class_method_signature": "ByteUtil.or(byte[] b1, byte[] b2)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(byte[] b1, byte[] b2)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] xor(byte[] b1, byte[] b2)", "full_signature": "public static byte[] xor(byte[] b1, byte[] b2)", "class_method_signature": "ByteUtil.xor(byte[] b1, byte[] b2)", "testcase": false, "constructor": false}, {"identifier": "xorAlignRight", "parameters": "(byte[] b1, byte[] b2)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] xorAlignRight(byte[] b1, byte[] b2)", "full_signature": "public static byte[] xorAlignRight(byte[] b1, byte[] b2)", "class_method_signature": "ByteUtil.xorAlignRight(byte[] b1, byte[] b2)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(byte[]... arrays)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] merge(byte[]... arrays)", "full_signature": "public static byte[] merge(byte[]... arrays)", "class_method_signature": "ByteUtil.merge(byte[]... arrays)", "testcase": false, "constructor": false}, {"identifier": "isNullOrZeroArray", "parameters": "(byte[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrZeroArray(byte[] array)", "full_signature": "public static boolean isNullOrZeroArray(byte[] array)", "class_method_signature": "ByteUtil.isNullOrZeroArray(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "isSingleZero", "parameters": "(byte[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSingleZero(byte[] array)", "full_signature": "public static boolean isSingleZero(byte[] array)", "class_method_signature": "ByteUtil.isSingleZero(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(Set<byte[]> setA, Set<byte[]> setB)", "modifiers": "public static", "return": "Set<byte[]>", "signature": "Set<byte[]> difference(Set<byte[]> setA, Set<byte[]> setB)", "full_signature": "public static Set<byte[]> difference(Set<byte[]> setA, Set<byte[]> setB)", "class_method_signature": "ByteUtil.difference(Set<byte[]> setA, Set<byte[]> setB)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(byte[]... bytes)", "modifiers": "public static", "return": "int", "signature": "int length(byte[]... bytes)", "full_signature": "public static int length(byte[]... bytes)", "class_method_signature": "ByteUtil.length(byte[]... bytes)", "testcase": false, "constructor": false}, {"identifier": "intsToBytes", "parameters": "(int[] arr, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intsToBytes(int[] arr, boolean bigEndian)", "full_signature": "public static byte[] intsToBytes(int[] arr, boolean bigEndian)", "class_method_signature": "ByteUtil.intsToBytes(int[] arr, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToInts", "parameters": "(byte[] arr, boolean bigEndian)", "modifiers": "public static", "return": "int[]", "signature": "int[] bytesToInts(byte[] arr, boolean bigEndian)", "full_signature": "public static int[] bytesToInts(byte[] arr, boolean bigEndian)", "class_method_signature": "ByteUtil.bytesToInts(byte[] arr, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bytesToInts", "parameters": "(byte[] b, int[] arr, boolean bigEndian)", "modifiers": "public static", "return": "void", "signature": "void bytesToInts(byte[] b, int[] arr, boolean bigEndian)", "full_signature": "public static void bytesToInts(byte[] b, int[] arr, boolean bigEndian)", "class_method_signature": "ByteUtil.bytesToInts(byte[] b, int[] arr, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "intsToBytes", "parameters": "(int[] arr, byte[] b, boolean bigEndian)", "modifiers": "public static", "return": "void", "signature": "void intsToBytes(int[] arr, byte[] b, boolean bigEndian)", "full_signature": "public static void intsToBytes(int[] arr, byte[] b, boolean bigEndian)", "class_method_signature": "ByteUtil.intsToBytes(int[] arr, byte[] b, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "bigEndianToShort", "parameters": "(byte[] bs)", "modifiers": "public static", "return": "short", "signature": "short bigEndianToShort(byte[] bs)", "full_signature": "public static short bigEndianToShort(byte[] bs)", "class_method_signature": "ByteUtil.bigEndianToShort(byte[] bs)", "testcase": false, "constructor": false}, {"identifier": "bigEndianToShort", "parameters": "(byte[] bs, int off)", "modifiers": "public static", "return": "short", "signature": "short bigEndianToShort(byte[] bs, int off)", "full_signature": "public static short bigEndianToShort(byte[] bs, int off)", "class_method_signature": "ByteUtil.bigEndianToShort(byte[] bs, int off)", "testcase": false, "constructor": false}, {"identifier": "shortToBytes", "parameters": "(short n)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] shortToBytes(short n)", "full_signature": "public static byte[] shortToBytes(short n)", "class_method_signature": "ByteUtil.shortToBytes(short n)", "testcase": false, "constructor": false}, {"identifier": "hexStringToBytes", "parameters": "(String data)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hexStringToBytes(String data)", "full_signature": "public static byte[] hexStringToBytes(String data)", "class_method_signature": "ByteUtil.hexStringToBytes(String data)", "testcase": false, "constructor": false}, {"identifier": "hostToBytes", "parameters": "(String ip)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hostToBytes(String ip)", "full_signature": "public static byte[] hostToBytes(String ip)", "class_method_signature": "ByteUtil.hostToBytes(String ip)", "testcase": false, "constructor": false}, {"identifier": "bytesToIp", "parameters": "(byte[] bytesIp)", "modifiers": "public static", "return": "String", "signature": "String bytesToIp(byte[] bytesIp)", "full_signature": "public static String bytesToIp(byte[] bytesIp)", "class_method_signature": "ByteUtil.bytesToIp(byte[] bytesIp)", "testcase": false, "constructor": false}, {"identifier": "numberOfLeadingZeros", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "int", "signature": "int numberOfLeadingZeros(byte[] bytes)", "full_signature": "public static int numberOfLeadingZeros(byte[] bytes)", "class_method_signature": "ByteUtil.numberOfLeadingZeros(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "parseBytes", "parameters": "(byte[] input, int offset, int len)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseBytes(byte[] input, int offset, int len)", "full_signature": "public static byte[] parseBytes(byte[] input, int offset, int len)", "class_method_signature": "ByteUtil.parseBytes(byte[] input, int offset, int len)", "testcase": false, "constructor": false}, {"identifier": "parseWord", "parameters": "(byte[] input, int idx)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseWord(byte[] input, int idx)", "full_signature": "public static byte[] parseWord(byte[] input, int idx)", "class_method_signature": "ByteUtil.parseWord(byte[] input, int idx)", "testcase": false, "constructor": false}, {"identifier": "parseWord", "parameters": "(byte[] input, int offset, int idx)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseWord(byte[] input, int offset, int idx)", "full_signature": "public static byte[] parseWord(byte[] input, int offset, int idx)", "class_method_signature": "ByteUtil.parseWord(byte[] input, int offset, int idx)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/ByteUtil.java"}, "focal_method": {"identifier": "matchingNibbleLength", "parameters": "(byte[] a, byte[] b)", "modifiers": "public static", "return": "int", "body": "public static int matchingNibbleLength(byte[] a, byte[] b) {\n        int i = 0;\n        int length = a.length < b.length ? a.length : b.length;\n        while (i < length) {\n            if (a[i] != b[i])\n                return i;\n            i++;\n        }\n        return i;\n    }", "signature": "int matchingNibbleLength(byte[] a, byte[] b)", "full_signature": "public static int matchingNibbleLength(byte[] a, byte[] b)", "class_method_signature": "ByteUtil.matchingNibbleLength(byte[] a, byte[] b)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}