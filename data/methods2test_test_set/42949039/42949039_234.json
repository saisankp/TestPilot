{"test_class": {"identifier": "EmrClusterDefinitionHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/EmrClusterDefinitionHelperTest.java"}, "test_case": {"identifier": "testValidateEmrClusterDefinitionConfigurationMasterSpotPriceAndMaxSearchPriceSpecified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateEmrClusterDefinitionConfigurationMasterSpotPriceAndMaxSearchPriceSpecified()\n    {\n        EmrClusterDefinition emrClusterDefinition = createValidEmrClusterDefinition();\n        emrClusterDefinition.getInstanceDefinitions().getMasterInstances().setInstanceSpotPrice(BigDecimal.ONE);\n        emrClusterDefinition.getInstanceDefinitions().getMasterInstances().setInstanceMaxSearchPrice(BigDecimal.ONE);\n\n        try\n        {\n            emrClusterDefinitionHelper.validateEmrClusterDefinitionConfiguration(emrClusterDefinition);\n            fail(\"expected IllegalArgumentException, but no exception was thrown\");\n        }\n        catch (Exception e)\n        {\n            assertEquals(\"thrown exception\", IllegalArgumentException.class, e.getClass());\n        }\n    }", "signature": "void testValidateEmrClusterDefinitionConfigurationMasterSpotPriceAndMaxSearchPriceSpecified()", "full_signature": "@Test public void testValidateEmrClusterDefinitionConfigurationMasterSpotPriceAndMaxSearchPriceSpecified()", "class_method_signature": "EmrClusterDefinitionHelperTest.testValidateEmrClusterDefinitionConfigurationMasterSpotPriceAndMaxSearchPriceSpecified()", "testcase": true, "constructor": false, "invocations": ["createValidEmrClusterDefinition", "setInstanceSpotPrice", "getMasterInstances", "getInstanceDefinitions", "setInstanceMaxSearchPrice", "getMasterInstances", "getInstanceDefinitions", "validateEmrClusterDefinitionConfiguration", "fail", "assertEquals", "getClass"]}, "focal_class": {"identifier": "EmrClusterDefinitionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Autowired\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private EmrHelper emrHelper;", "modifier": "@Autowired\n    private", "type": "EmrHelper", "declarator": "emrHelper", "var_name": "emrHelper"}, {"original_string": "@Autowired\n    private HerdStringHelper herdStringHelper;", "modifier": "@Autowired\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}], "methods": [{"identifier": "validateEmrClusterDefinitionConfiguration", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "public", "return": "void", "signature": "void validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition)", "full_signature": "public void validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrClusterDefinitionHelper.validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}, {"identifier": "validateEmrClusterDefinitionKey", "parameters": "(EmrClusterDefinitionKey key)", "modifiers": "public", "return": "void", "signature": "void validateEmrClusterDefinitionKey(EmrClusterDefinitionKey key)", "full_signature": "public void validateEmrClusterDefinitionKey(EmrClusterDefinitionKey key)", "class_method_signature": "EmrClusterDefinitionHelper.validateEmrClusterDefinitionKey(EmrClusterDefinitionKey key)", "testcase": false, "constructor": false}, {"identifier": "assertNotBlankAndTrim", "parameters": "(List<String> list, String displayName)", "modifiers": "private", "return": "List<String>", "signature": "List<String> assertNotBlankAndTrim(List<String> list, String displayName)", "full_signature": "private List<String> assertNotBlankAndTrim(List<String> list, String displayName)", "class_method_signature": "EmrClusterDefinitionHelper.assertNotBlankAndTrim(List<String> list, String displayName)", "testcase": false, "constructor": false}, {"identifier": "validateInstanceDefinition", "parameters": "(String name, InstanceDefinition instanceDefinition, Integer minimumInstanceCount)", "modifiers": "private", "return": "void", "signature": "void validateInstanceDefinition(String name, InstanceDefinition instanceDefinition, Integer minimumInstanceCount)", "full_signature": "private void validateInstanceDefinition(String name, InstanceDefinition instanceDefinition, Integer minimumInstanceCount)", "class_method_signature": "EmrClusterDefinitionHelper.validateInstanceDefinition(String name, InstanceDefinition instanceDefinition, Integer minimumInstanceCount)", "testcase": false, "constructor": false}, {"identifier": "validateMasterInstanceDefinition", "parameters": "(MasterInstanceDefinition masterInstanceDefinition)", "modifiers": "private", "return": "void", "signature": "void validateMasterInstanceDefinition(MasterInstanceDefinition masterInstanceDefinition)", "full_signature": "private void validateMasterInstanceDefinition(MasterInstanceDefinition masterInstanceDefinition)", "class_method_signature": "EmrClusterDefinitionHelper.validateMasterInstanceDefinition(MasterInstanceDefinition masterInstanceDefinition)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/EmrClusterDefinitionHelper.java"}, "focal_method": {"identifier": "validateEmrClusterDefinitionConfiguration", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "public", "return": "void", "body": "public void validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition) throws IllegalArgumentException\n    {\n        Assert.notNull(emrClusterDefinition, \"An EMR cluster definition configuration must be specified.\");\n\n        Assert.isTrue(StringUtils.isNotBlank(emrClusterDefinition.getSubnetId()), \"Subnet ID must be specified\");\n        for (String token : emrClusterDefinition.getSubnetId().split(\",\"))\n        {\n            Assert.isTrue(StringUtils.isNotBlank(token), \"No blank is allowed in the list of subnet IDs\");\n        }\n\n        Assert.isTrue(!emrHelper.isInstanceDefinitionsEmpty(emrClusterDefinition.getInstanceDefinitions()) ||\n            CollectionUtils.isNotEmpty(emrClusterDefinition.getInstanceFleets()), \"Instance group definitions or instance fleets must be specified.\");\n\n        if (!emrHelper.isInstanceDefinitionsEmpty(emrClusterDefinition.getInstanceDefinitions()))\n        {\n            // Check master instances.\n            Assert.notNull(emrClusterDefinition.getInstanceDefinitions().getMasterInstances(), \"Master instances must be specified.\");\n            validateMasterInstanceDefinition(emrClusterDefinition.getInstanceDefinitions().getMasterInstances());\n\n            // Check core instances.\n            if (emrClusterDefinition.getInstanceDefinitions().getCoreInstances() != null)\n            {\n                validateInstanceDefinition(\"core\", emrClusterDefinition.getInstanceDefinitions().getCoreInstances(), 0);\n                // If instance count is <= 0, remove the entire core instance definition since it is redundant.\n                if (emrClusterDefinition.getInstanceDefinitions().getCoreInstances().getInstanceCount() <= 0)\n                {\n                    emrClusterDefinition.getInstanceDefinitions().setCoreInstances(null);\n                }\n            }\n\n            // Check task instances\n            if (emrClusterDefinition.getInstanceDefinitions().getTaskInstances() != null)\n            {\n                validateInstanceDefinition(\"task\", emrClusterDefinition.getInstanceDefinitions().getTaskInstances(), 1);\n            }\n\n            // Check that total number of instances does not exceed the max allowed.\n            int maxEmrInstanceCount = configurationHelper.getProperty(ConfigurationValue.MAX_EMR_INSTANCES_COUNT, Integer.class);\n            if (maxEmrInstanceCount > 0)\n            {\n                int instancesRequested = emrClusterDefinition.getInstanceDefinitions().getMasterInstances().getInstanceCount();\n                if (emrClusterDefinition.getInstanceDefinitions().getCoreInstances() != null)\n                {\n                    instancesRequested += emrClusterDefinition.getInstanceDefinitions().getCoreInstances().getInstanceCount();\n                }\n                if (emrClusterDefinition.getInstanceDefinitions().getTaskInstances() != null)\n                {\n                    instancesRequested += emrClusterDefinition.getInstanceDefinitions().getTaskInstances().getInstanceCount();\n                }\n\n                Assert.isTrue((maxEmrInstanceCount >= instancesRequested), \"Total number of instances requested can not exceed : \" + maxEmrInstanceCount);\n            }\n        }\n\n        // Make sure instance fleet minimum ip available filter is non-negative\n        if (emrClusterDefinition.getInstanceFleetMinimumIpAvailableFilter() != null)\n        {\n            Assert.isTrue(emrClusterDefinition.getInstanceFleetMinimumIpAvailableFilter() >= 0,\n                    \"Minimum number of available IPs required for the instance fleet must be non-negative\");\n        }\n\n        // Validate node tags including checking for required tags and detecting any duplicate node tag names in case sensitive manner.\n        Assert.notEmpty(emrClusterDefinition.getNodeTags(), \"Node tags must be specified.\");\n        HashSet<String> nodeTagNameValidationSet = new HashSet<>();\n        for (NodeTag nodeTag : emrClusterDefinition.getNodeTags())\n        {\n            Assert.hasText(nodeTag.getTagName(), \"A node tag name must be specified.\");\n            Assert.hasText(nodeTag.getTagValue(), \"A node tag value must be specified.\");\n            Assert.isTrue(!nodeTagNameValidationSet.contains(nodeTag.getTagName()), String.format(\"Duplicate node tag \\\"%s\\\" is found.\", nodeTag.getTagName()));\n            nodeTagNameValidationSet.add(nodeTag.getTagName());\n        }\n\n        // Validate the mandatory AWS tags are there\n        for (String mandatoryTag : herdStringHelper.splitStringWithDefaultDelimiter(configurationHelper.getProperty(ConfigurationValue.MANDATORY_AWS_TAGS)))\n        {\n            Assert.isTrue(nodeTagNameValidationSet.contains(mandatoryTag), String.format(\"Mandatory AWS tag not specified: \\\"%s\\\"\", mandatoryTag));\n        }\n\n        emrClusterDefinition.setAdditionalMasterSecurityGroups(\n            assertNotBlankAndTrim(emrClusterDefinition.getAdditionalMasterSecurityGroups(), \"additionalMasterSecurityGroup\"));\n\n        emrClusterDefinition\n            .setAdditionalSlaveSecurityGroups(assertNotBlankAndTrim(emrClusterDefinition.getAdditionalSlaveSecurityGroups(), \"additionalSlaveSecurityGroup\"));\n\n        // Fail if security configuration is specified for EMR version less than 4.8.0.\n        if (StringUtils.isNotBlank(emrClusterDefinition.getSecurityConfiguration()))\n        {\n            final DefaultArtifactVersion securityConfigurationMinEmrVersion = new DefaultArtifactVersion(\"4.8.0\");\n            Assert.isTrue(StringUtils.isNotBlank(emrClusterDefinition.getReleaseLabel()) &&\n                securityConfigurationMinEmrVersion.compareTo(new DefaultArtifactVersion(emrClusterDefinition.getReleaseLabel().replaceFirst(\"^(emr-)\", \"\"))) <=\n                    0, \"EMR security configuration is not supported prior to EMR release 4.8.0.\");\n        }\n    }", "signature": "void validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition)", "full_signature": "public void validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrClusterDefinitionHelper.validateEmrClusterDefinitionConfiguration(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false, "invocations": ["notNull", "isTrue", "isNotBlank", "getSubnetId", "split", "getSubnetId", "isTrue", "isNotBlank", "isTrue", "isInstanceDefinitionsEmpty", "getInstanceDefinitions", "isNotEmpty", "getInstanceFleets", "isInstanceDefinitionsEmpty", "getInstanceDefinitions", "notNull", "getMasterInstances", "getInstanceDefinitions", "validateMasterInstanceDefinition", "getMasterInstances", "getInstanceDefinitions", "getCoreInstances", "getInstanceDefinitions", "validateInstanceDefinition", "getCoreInstances", "getInstanceDefinitions", "getInstanceCount", "getCoreInstances", "getInstanceDefinitions", "setCoreInstances", "getInstanceDefinitions", "getTaskInstances", "getInstanceDefinitions", "validateInstanceDefinition", "getTaskInstances", "getInstanceDefinitions", "getProperty", "getInstanceCount", "getMasterInstances", "getInstanceDefinitions", "getCoreInstances", "getInstanceDefinitions", "getInstanceCount", "getCoreInstances", "getInstanceDefinitions", "getTaskInstances", "getInstanceDefinitions", "getInstanceCount", "getTaskInstances", "getInstanceDefinitions", "isTrue", "getInstanceFleetMinimumIpAvailableFilter", "isTrue", "getInstanceFleetMinimumIpAvailableFilter", "notEmpty", "getNodeTags", "getNodeTags", "hasText", "getTagName", "hasText", "getTagValue", "isTrue", "contains", "getTagName", "format", "getTagName", "add", "getTagName", "splitStringWithDefaultDelimiter", "getProperty", "isTrue", "contains", "format", "setAdditionalMasterSecurityGroups", "assertNotBlankAndTrim", "getAdditionalMasterSecurityGroups", "setAdditionalSlaveSecurityGroups", "assertNotBlankAndTrim", "getAdditionalSlaveSecurityGroups", "isNotBlank", "getSecurityConfiguration", "isTrue", "isNotBlank", "getReleaseLabel", "compareTo", "replaceFirst", "getReleaseLabel"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}