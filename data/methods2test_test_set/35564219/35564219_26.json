{"test_class": {"identifier": "ObjectPoolTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "library/src/test/java/com/climate/mirage/utils/ObjectPoolTest.java"}, "test_case": {"identifier": "testPoolDoesntOverFill", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPoolDoesntOverFill() throws Exception {\n        ObjectFactory<MirageRequest> factory = Mockito.mock(ObjectFactory.class);\n\n        ObjectPool<MirageRequest> pool = new ObjectPool<>(factory, 3);\n        pool.recycle(new MirageRequest());\n        pool.recycle(new MirageRequest());\n        pool.recycle(new MirageRequest());\n        pool.recycle(new MirageRequest());\n        pool.recycle(new MirageRequest());\n        Assert.assertEquals(3, getPoolSize(pool));\n    }", "signature": "void testPoolDoesntOverFill()", "full_signature": "@Test public void testPoolDoesntOverFill()", "class_method_signature": "ObjectPoolTest.testPoolDoesntOverFill()", "testcase": true, "constructor": false, "invocations": ["mock", "recycle", "recycle", "recycle", "recycle", "recycle", "assertEquals", "getPoolSize"]}, "focal_class": {"identifier": "ObjectPool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectFactory<T> factory;", "modifier": "private", "type": "ObjectFactory<T>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private int poolSize = 20;", "modifier": "private", "type": "int", "declarator": "poolSize = 20", "var_name": "poolSize"}, {"original_string": "private final List<T> pool;", "modifier": "private final", "type": "List<T>", "declarator": "pool", "var_name": "pool"}], "methods": [{"identifier": "ObjectPool", "parameters": "(ObjectFactory<T> factory, int poolSize)", "modifiers": "public", "return": "", "signature": " ObjectPool(ObjectFactory<T> factory, int poolSize)", "full_signature": "public  ObjectPool(ObjectFactory<T> factory, int poolSize)", "class_method_signature": "ObjectPool.ObjectPool(ObjectFactory<T> factory, int poolSize)", "testcase": false, "constructor": true}, {"identifier": "getObject", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getObject()", "full_signature": "public T getObject()", "class_method_signature": "ObjectPool.getObject()", "testcase": false, "constructor": false}, {"identifier": "recycle", "parameters": "(T object)", "modifiers": "public", "return": "void", "signature": "void recycle(T object)", "full_signature": "public void recycle(T object)", "class_method_signature": "ObjectPool.recycle(T object)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/utils/ObjectPool.java"}, "focal_method": {"identifier": "recycle", "parameters": "(T object)", "modifiers": "public", "return": "void", "body": "public void recycle(T object) {\n\t\tfactory.recycle(object);\n\t\tsynchronized (pool) {\n\t\t\tif (pool.size() < poolSize && !pool.contains(object)) {\n\t\t\t\tpool.add(object);\n\t\t\t}\n\t\t}\n\t}", "signature": "void recycle(T object)", "full_signature": "public void recycle(T object)", "class_method_signature": "ObjectPool.recycle(T object)", "testcase": false, "constructor": false, "invocations": ["recycle", "size", "contains", "add"]}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}