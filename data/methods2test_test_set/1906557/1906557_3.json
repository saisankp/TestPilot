{"test_class": {"identifier": "ExtremeStartupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ExtremeStartup server = new ExtremeStartup();", "modifier": "private final", "type": "ExtremeStartup", "declarator": "server = new ExtremeStartup()", "var_name": "server"}], "file": "java/jetty/src/test/java/ExtremeStartupTest.java"}, "test_case": {"identifier": "should_accept_missing_input", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_accept_missing_input() {\n        assertEquals(server.answer(null), \"team name\");\n    }", "signature": "void should_accept_missing_input()", "full_signature": "@Test public void should_accept_missing_input()", "class_method_signature": "ExtremeStartupTest.should_accept_missing_input()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "answer"]}, "focal_class": {"identifier": "ExtremeStartup", "superclass": "extends HttpServlet", "interfaces": "", "fields": [], "methods": [{"identifier": "doGet", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ExtremeStartup.doGet(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "answer", "parameters": "(String parameter)", "modifiers": "", "return": "String", "signature": "String answer(String parameter)", "full_signature": " String answer(String parameter)", "class_method_signature": "ExtremeStartup.answer(String parameter)", "testcase": false, "constructor": false}], "file": "java/jetty/src/main/java/ExtremeStartup.java"}, "focal_method": {"identifier": "answer", "parameters": "(String parameter)", "modifiers": "", "return": "String", "body": "String answer(String parameter) {\n        if (parameter == null)\n            return \"team name\";\n        Matcher additionMatcher = Pattern.compile(\".*what is the sum of (\\\\d+) and (\\\\d+)\").matcher(parameter);\n        if (additionMatcher.matches()) {\n            return String.valueOf(Integer.parseInt(additionMatcher.group(1))\n                    + Integer.parseInt(additionMatcher.group(2)));\n        }\n        return \"team name\";\n    }", "signature": "String answer(String parameter)", "full_signature": " String answer(String parameter)", "class_method_signature": "ExtremeStartup.answer(String parameter)", "testcase": false, "constructor": false, "invocations": ["matcher", "compile", "matches", "valueOf", "parseInt", "group", "parseInt", "group"]}, "repository": {"repo_id": 1906557, "url": "https://github.com/sopra-steria-norge/extreme_startup_servers", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 64, "size": 1152, "license": "licensed"}}