{"test_class": {"identifier": "NormalDistributionStatisticsComputerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<FeatureMeta> meta = Arrays.asList(\n        new FeatureMeta(\"\", 0, false),\n        new FeatureMeta(\"\", 1, true),\n        new FeatureMeta(\"\", 2, false),\n        new FeatureMeta(\"\", 3, true),\n        new FeatureMeta(\"\", 4, false),\n        new FeatureMeta(\"\", 5, true),\n        new FeatureMeta(\"\", 6, false)\n    );", "modifier": "private final", "type": "List<FeatureMeta>", "declarator": "meta = Arrays.asList(\n        new FeatureMeta(\"\", 0, false),\n        new FeatureMeta(\"\", 1, true),\n        new FeatureMeta(\"\", 2, false),\n        new FeatureMeta(\"\", 3, true),\n        new FeatureMeta(\"\", 4, false),\n        new FeatureMeta(\"\", 5, true),\n        new FeatureMeta(\"\", 6, false)\n    )", "var_name": "meta"}, {"original_string": "private BootstrappedDatasetPartition partition = new BootstrappedDatasetPartition(new BootstrappedVector[] {\n        new BootstrappedVector(VectorUtils.of(0, 1, 2, 1, 4, 2, 6), 0., null),\n        new BootstrappedVector(VectorUtils.of(1, 0, 3, 2, 5, 3, 7), 0., null),\n        new BootstrappedVector(VectorUtils.of(2, 1, 4, 1, 6, 2, 8), 0., null),\n        new BootstrappedVector(VectorUtils.of(3, 0, 5, 2, 7, 3, 9), 0., null),\n        new BootstrappedVector(VectorUtils.of(4, 1, 6, 1, 8, 2, 10), 0., null),\n        new BootstrappedVector(VectorUtils.of(5, 0, 7, 2, 9, 3, 11), 0., null),\n        new BootstrappedVector(VectorUtils.of(6, 1, 8, 1, 10, 2, 12), 0., null),\n        new BootstrappedVector(VectorUtils.of(7, 0, 9, 2, 11, 3, 13), 0., null),\n        new BootstrappedVector(VectorUtils.of(8, 1, 10, 1, 12, 2, 14), 0., null),\n        new BootstrappedVector(VectorUtils.of(9, 0, 11, 2, 13, 3, 15), 0., null),\n    });", "modifier": "private", "type": "BootstrappedDatasetPartition", "declarator": "partition = new BootstrappedDatasetPartition(new BootstrappedVector[] {\n        new BootstrappedVector(VectorUtils.of(0, 1, 2, 1, 4, 2, 6), 0., null),\n        new BootstrappedVector(VectorUtils.of(1, 0, 3, 2, 5, 3, 7), 0., null),\n        new BootstrappedVector(VectorUtils.of(2, 1, 4, 1, 6, 2, 8), 0., null),\n        new BootstrappedVector(VectorUtils.of(3, 0, 5, 2, 7, 3, 9), 0., null),\n        new BootstrappedVector(VectorUtils.of(4, 1, 6, 1, 8, 2, 10), 0., null),\n        new BootstrappedVector(VectorUtils.of(5, 0, 7, 2, 9, 3, 11), 0., null),\n        new BootstrappedVector(VectorUtils.of(6, 1, 8, 1, 10, 2, 12), 0., null),\n        new BootstrappedVector(VectorUtils.of(7, 0, 9, 2, 11, 3, 13), 0., null),\n        new BootstrappedVector(VectorUtils.of(8, 1, 10, 1, 12, 2, 14), 0., null),\n        new BootstrappedVector(VectorUtils.of(9, 0, 11, 2, 13, 3, 15), 0., null),\n    })", "var_name": "partition"}, {"original_string": "private NormalDistributionStatisticsComputer computer = new NormalDistributionStatisticsComputer();", "modifier": "private", "type": "NormalDistributionStatisticsComputer", "declarator": "computer = new NormalDistributionStatisticsComputer()", "var_name": "computer"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/randomforest/data/statistics/NormalDistributionStatisticsComputerTest.java"}, "test_case": {"identifier": "reduceStatsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reduceStatsTest() {\n        List<NormalDistributionStatistics> left = Arrays.asList(\n            new NormalDistributionStatistics(0, 9, 285, 45, 10),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(2, 11, 505, 65, 10),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(4, 13, 805, 85, 10),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(6, 15, 1185, 105, 10)\n        );\n\n        List<NormalDistributionStatistics> right = Arrays.asList(\n            new NormalDistributionStatistics(6, 15, 1185, 105, 10),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(4, 13, 805, 85, 10),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(2, 11, 505, 65, 10),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(0, 9, 285, 45, 10)\n        );\n\n        List<NormalDistributionStatistics> res = computer.reduceStats(left, right, meta);\n        NormalDistributionStatistics[] exp = new NormalDistributionStatistics[] {\n            new NormalDistributionStatistics(0, 15, 1470, 150, 20),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(2, 13, 1310, 150, 20),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(2, 13, 1310, 150, 20),\n            new NormalDistributionStatistics(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, 0, 0, 10),\n            new NormalDistributionStatistics(0, 15, 1470, 150, 20)\n        };\n\n        assertEquals(exp.length, res.size());\n        for (int i = 0; i < exp.length; i++) {\n            NormalDistributionStatistics expStat = exp[i];\n            NormalDistributionStatistics resStat = res.get(i);\n            assertEquals(expStat.mean(), resStat.mean(), 0.01);\n            assertEquals(expStat.variance(), resStat.variance(), 0.01);\n            assertEquals(expStat.std(), resStat.std(), 0.01);\n            assertEquals(expStat.min(), resStat.min(), 0.01);\n            assertEquals(expStat.max(), resStat.max(), 0.01);\n        }\n    }", "signature": "void reduceStatsTest()", "full_signature": "@Test public void reduceStatsTest()", "class_method_signature": "NormalDistributionStatisticsComputerTest.reduceStatsTest()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "reduceStats", "assertEquals", "size", "get", "assertEquals", "mean", "mean", "assertEquals", "variance", "variance", "assertEquals", "std", "std", "assertEquals", "min", "min", "assertEquals", "max", "max"]}, "focal_class": {"identifier": "NormalDistributionStatisticsComputer", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -3699071003012595743L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3699071003012595743L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "computeStatistics", "parameters": "(List<FeatureMeta> meta, Dataset<EmptyContext,\n        BootstrappedDatasetPartition> dataset)", "modifiers": "public", "return": "List<NormalDistributionStatistics>", "signature": "List<NormalDistributionStatistics> computeStatistics(List<FeatureMeta> meta, Dataset<EmptyContext,\n        BootstrappedDatasetPartition> dataset)", "full_signature": "public List<NormalDistributionStatistics> computeStatistics(List<FeatureMeta> meta, Dataset<EmptyContext,\n        BootstrappedDatasetPartition> dataset)", "class_method_signature": "NormalDistributionStatisticsComputer.computeStatistics(List<FeatureMeta> meta, Dataset<EmptyContext,\n        BootstrappedDatasetPartition> dataset)", "testcase": false, "constructor": false}, {"identifier": "computeStatsOnPartition", "parameters": "(BootstrappedDatasetPartition part,\n        List<FeatureMeta> meta)", "modifiers": "public", "return": "List<NormalDistributionStatistics>", "signature": "List<NormalDistributionStatistics> computeStatsOnPartition(BootstrappedDatasetPartition part,\n        List<FeatureMeta> meta)", "full_signature": "public List<NormalDistributionStatistics> computeStatsOnPartition(BootstrappedDatasetPartition part,\n        List<FeatureMeta> meta)", "class_method_signature": "NormalDistributionStatisticsComputer.computeStatsOnPartition(BootstrappedDatasetPartition part,\n        List<FeatureMeta> meta)", "testcase": false, "constructor": false}, {"identifier": "reduceStats", "parameters": "(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "modifiers": "public", "return": "List<NormalDistributionStatistics>", "signature": "List<NormalDistributionStatistics> reduceStats(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "full_signature": "public List<NormalDistributionStatistics> reduceStats(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "class_method_signature": "NormalDistributionStatisticsComputer.reduceStats(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/randomforest/data/statistics/NormalDistributionStatisticsComputer.java"}, "focal_method": {"identifier": "reduceStats", "parameters": "(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "modifiers": "public", "return": "List<NormalDistributionStatistics>", "body": "public List<NormalDistributionStatistics> reduceStats(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta) {\n\n        if (left == null)\n            return right;\n        if (right == null)\n            return left;\n\n        assert meta.size() == left.size() && meta.size() == right.size();\n        List<NormalDistributionStatistics> res = new ArrayList<>();\n        for (int featureId = 0; featureId < meta.size(); featureId++) {\n            NormalDistributionStatistics leftStat = left.get(featureId);\n            NormalDistributionStatistics rightStat = right.get(featureId);\n            res.add(leftStat.plus(rightStat));\n        }\n        return res;\n    }", "signature": "List<NormalDistributionStatistics> reduceStats(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "full_signature": "public List<NormalDistributionStatistics> reduceStats(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "class_method_signature": "NormalDistributionStatisticsComputer.reduceStats(List<NormalDistributionStatistics> left,\n        List<NormalDistributionStatistics> right,\n        List<FeatureMeta> meta)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "size", "size", "get", "get", "add", "plus"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}