{"test_class": {"identifier": "PathToEveryLeafTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PathToEveryLeaf pathToEveryLeaf;", "modifier": "private", "type": "PathToEveryLeaf", "declarator": "pathToEveryLeaf", "var_name": "pathToEveryLeaf"}], "file": "algs/src/test/java/com/github/pedrovgs/problem38/PathToEveryLeafTest.java"}, "test_case": {"identifier": "shouldReturnOneElementWithJustOneNodeIfTheTreeContainsJustOneElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnOneElementWithJustOneNodeIfTheTreeContainsJustOneElement() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(1);\n\n    List<List<BinaryNode>> paths = pathToEveryLeaf.calculate(root);\n\n    assertEquals(1, paths.size());\n    assertEquals(1, paths.get(0).get(0).getData());\n  }", "signature": "void shouldReturnOneElementWithJustOneNodeIfTheTreeContainsJustOneElement()", "full_signature": "@Test public void shouldReturnOneElementWithJustOneNodeIfTheTreeContainsJustOneElement()", "class_method_signature": "PathToEveryLeafTest.shouldReturnOneElementWithJustOneNodeIfTheTreeContainsJustOneElement()", "testcase": true, "constructor": false, "invocations": ["calculate", "assertEquals", "size", "assertEquals", "getData", "get", "get"]}, "focal_class": {"identifier": "PathToEveryLeaf", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculate", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "List<List<BinaryNode>>", "signature": "List<List<BinaryNode>> calculate(BinaryNode<Integer> root)", "full_signature": "public List<List<BinaryNode>> calculate(BinaryNode<Integer> root)", "class_method_signature": "PathToEveryLeaf.calculate(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "calculatePathToLeafs", "parameters": "(BinaryNode<Integer> root,\n      List<BinaryNode> path)", "modifiers": "private static", "return": "List<List<BinaryNode>>", "signature": "List<List<BinaryNode>> calculatePathToLeafs(BinaryNode<Integer> root,\n      List<BinaryNode> path)", "full_signature": "private static List<List<BinaryNode>> calculatePathToLeafs(BinaryNode<Integer> root,\n      List<BinaryNode> path)", "class_method_signature": "PathToEveryLeaf.calculatePathToLeafs(BinaryNode<Integer> root,\n      List<BinaryNode> path)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem38/PathToEveryLeaf.java"}, "focal_method": {"identifier": "calculate", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "List<List<BinaryNode>>", "body": "public List<List<BinaryNode>> calculate(BinaryNode<Integer> root) {\n    if (root == null) {\n      throw new IllegalArgumentException(\"You can't pass a null instance of BinaryNode\");\n    }\n    return calculatePathToLeafs(root, new LinkedList<BinaryNode>());\n  }", "signature": "List<List<BinaryNode>> calculate(BinaryNode<Integer> root)", "full_signature": "public List<List<BinaryNode>> calculate(BinaryNode<Integer> root)", "class_method_signature": "PathToEveryLeaf.calculate(BinaryNode<Integer> root)", "testcase": false, "constructor": false, "invocations": ["calculatePathToLeafs"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}