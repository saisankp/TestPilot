{"test_class": {"identifier": "PortofolioServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Offset<Double> PERCENT_OFFSET = offset(0.000000000001d);", "modifier": "private static final", "type": "Offset<Double>", "declarator": "PERCENT_OFFSET = offset(0.000000000001d)", "var_name": "PERCENT_OFFSET"}, {"original_string": "@Autowired\n\tprivate PortofolioService portofolioService;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioService", "declarator": "portofolioService", "var_name": "portofolioService"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/portofolio/PortofolioServiceTest.java"}, "test_case": {"identifier": "testCreatePortofolio", "parameters": "()", "modifiers": "@Sql(\"/sql/insert_user_symbol.sql\") @Test public", "return": "void", "body": "@Sql(\"/sql/insert_user_symbol.sql\")\n\t@Test\n\tpublic void testCreatePortofolio() {\n\t\tString login = \"user\";\n\t\tString baseCurrency = EUR;\n\t\tint amount = 1000;\n\n\t\tPortofolio p = portofolioService.createPortofolio(login, baseCurrency, amount);\n\n\t\tassertThat(p.getBaseCurrency().getSymbol().getCode()).isEqualTo(baseCurrency);\n\t\tassertThat(p.getBaseCurrency().getQuantity()).isEqualTo(amount);\n\t}", "signature": "void testCreatePortofolio()", "full_signature": "@Sql(\"/sql/insert_user_symbol.sql\") @Test public void testCreatePortofolio()", "class_method_signature": "PortofolioServiceTest.testCreatePortofolio()", "testcase": true, "constructor": false, "invocations": ["createPortofolio", "isEqualTo", "assertThat", "getCode", "getSymbol", "getBaseCurrency", "isEqualTo", "assertThat", "getQuantity", "getBaseCurrency"]}, "focal_class": {"identifier": "PortofolioService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate UserRepository userRepo;", "modifier": "@Autowired\n\tprivate", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}, {"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate SymbolMapper symbolMapper;", "modifier": "@Autowired\n\tprivate", "type": "SymbolMapper", "declarator": "symbolMapper", "var_name": "symbolMapper"}], "methods": [{"identifier": "createPortofolio", "parameters": "(String login, String baseCurrencyCode, int baseCurrencyAmount)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "full_signature": "public Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "class_method_signature": "PortofolioService.createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "testcase": false, "constructor": false}, {"identifier": "getBaseCurrency", "parameters": "(String login)", "modifiers": "public", "return": "AssetInfo", "signature": "AssetInfo getBaseCurrency(String login)", "full_signature": "public AssetInfo getBaseCurrency(String login)", "class_method_signature": "PortofolioService.getBaseCurrency(String login)", "testcase": false, "constructor": false}, {"identifier": "getPortofolio", "parameters": "(String login)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio getPortofolio(String login)", "full_signature": "public Portofolio getPortofolio(String login)", "class_method_signature": "PortofolioService.getPortofolio(String login)", "testcase": false, "constructor": false}, {"identifier": "getAsset", "parameters": "(AssetEntity ae)", "modifiers": "protected", "return": "AssetInfo", "signature": "AssetInfo getAsset(AssetEntity ae)", "full_signature": "protected AssetInfo getAsset(AssetEntity ae)", "class_method_signature": "PortofolioService.getAsset(AssetEntity ae)", "testcase": false, "constructor": false}, {"identifier": "getOrderInfo", "parameters": "(String login, String symbolCode, double quantity)", "modifiers": "public", "return": "OrderInfo", "signature": "OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "full_signature": "public OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "class_method_signature": "PortofolioService.getOrderInfo(String login, String symbolCode, double quantity)", "testcase": false, "constructor": false}, {"identifier": "getAvailableSymbols", "parameters": "(String login)", "modifiers": "public", "return": "List<Symbol>", "signature": "List<Symbol> getAvailableSymbols(String login)", "full_signature": "public List<Symbol> getAvailableSymbols(String login)", "class_method_signature": "PortofolioService.getAvailableSymbols(String login)", "testcase": false, "constructor": false}, {"identifier": "buy", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order buy(String login, String code, double quantity)", "full_signature": "public Order buy(String login, String code, double quantity)", "class_method_signature": "PortofolioService.buy(String login, String code, double quantity)", "testcase": false, "constructor": false}, {"identifier": "sell", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order sell(String login, String code, double quantity)", "full_signature": "public Order sell(String login, String code, double quantity)", "class_method_signature": "PortofolioService.sell(String login, String code, double quantity)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/portofolio/PortofolioService.java"}, "focal_method": {"identifier": "createPortofolio", "parameters": "(String login, String baseCurrencyCode, int baseCurrencyAmount)", "modifiers": "public", "return": "Portofolio", "body": "public Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount) {\n\t\tUserEntity ue = userRepo.findByUsername(login);\n\t\tSymbolEntity se = symbolRepo.findById(baseCurrencyCode).get();\n\n\t\t// FIXME add checks\n\n\t\tPortofolioEntity pe = new PortofolioEntity(ue, se, BigDecimal.valueOf(baseCurrencyAmount));\n\n\t\tportofolioRepo.save(pe);\n\n\t\treturn getPortofolio(login);\n\t}", "signature": "Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "full_signature": "public Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "class_method_signature": "PortofolioService.createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "testcase": false, "constructor": false, "invocations": ["findByUsername", "get", "findById", "valueOf", "save", "getPortofolio"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}