{"test_class": {"identifier": "StatDisplayUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private GazePlay gazePlay;", "modifier": "@Mock\n    private", "type": "GazePlay", "declarator": "gazePlay", "var_name": "gazePlay"}, {"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private StatsContext mockStatsContext;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    private", "type": "StatsContext", "declarator": "mockStatsContext", "var_name": "mockStatsContext"}, {"original_string": "@Mock\n    private Stats mockStats;", "modifier": "@Mock\n    private", "type": "Stats", "declarator": "mockStats", "var_name": "mockStats"}, {"original_string": "@Mock\n    private ShootGamesStats mockShootStats;", "modifier": "@Mock\n    private", "type": "ShootGamesStats", "declarator": "mockShootStats", "var_name": "mockShootStats"}, {"original_string": "@Mock\n    private Region mockRegion;", "modifier": "@Mock\n    private", "type": "Region", "declarator": "mockRegion", "var_name": "mockRegion"}, {"original_string": "@Mock\n    private ScreenDimensionSupplier screenDimensionSupplier;", "modifier": "@Mock\n    private", "type": "ScreenDimensionSupplier", "declarator": "screenDimensionSupplier", "var_name": "screenDimensionSupplier"}, {"original_string": "@Captor\n    private ArgumentCaptor<Cursor> captor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Cursor>", "declarator": "captor", "var_name": "captor"}], "file": "gazeplay-core/src/test/java/net/gazeplay/commons/utils/stats/StatDisplayUtilsTest.java"}, "test_case": {"identifier": "shouldBuildLineChartForNormalGame", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldBuildLineChartForNormalGame() {\n        final List<Long> mockShots = new ArrayList<>(List.of(1L, 2L, 3L));\n\n        when(mockStats.getOriginalDurationsBetweenGoals()).thenReturn(mockShots);\n        when(mockStats.computeRoundsDurationStandardDeviation()).thenReturn(0d);\n        when(mockStats.computeRoundsDurationAverageDuration()).thenReturn(2L);\n\n        final LineChart<String, Number> lineChart = StatDisplayUtils.buildLineChart(mockStats, mockRegion);\n\n        assertEquals(4, lineChart.getData().size());\n        assertEquals(5, lineChart.getData().get(0).getData().size());\n        assertEquals(5, lineChart.getData().get(1).getData().size());\n        assertEquals(5, lineChart.getData().get(2).getData().size());\n        assertEquals(3, lineChart.getData().get(3).getData().size());\n    }", "signature": "void shouldBuildLineChartForNormalGame()", "full_signature": "@Test void shouldBuildLineChartForNormalGame()", "class_method_signature": "StatDisplayUtilsTest.shouldBuildLineChartForNormalGame()", "testcase": true, "constructor": false, "invocations": ["of", "thenReturn", "when", "getOriginalDurationsBetweenGoals", "thenReturn", "when", "computeRoundsDurationStandardDeviation", "thenReturn", "when", "computeRoundsDurationAverageDuration", "buildLineChart", "assertEquals", "size", "getData", "assertEquals", "size", "getData", "get", "getData", "assertEquals", "size", "getData", "get", "getData", "assertEquals", "size", "getData", "get", "getData", "assertEquals", "size", "getData", "get", "getData"]}, "focal_class": {"identifier": "StatDisplayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createHomeButtonInStatsScreen", "parameters": "(GazePlay gazePlay, StatsContext statsContext)", "modifiers": "public static", "return": "HomeButton", "signature": "HomeButton createHomeButtonInStatsScreen(GazePlay gazePlay, StatsContext statsContext)", "full_signature": "public static HomeButton createHomeButtonInStatsScreen(GazePlay gazePlay, StatsContext statsContext)", "class_method_signature": "StatDisplayUtils.createHomeButtonInStatsScreen(GazePlay gazePlay, StatsContext statsContext)", "testcase": false, "constructor": false}, {"identifier": "returnToMenu", "parameters": "(GazePlay gazePlay, StatsContext statsContext)", "modifiers": "static", "return": "void", "signature": "void returnToMenu(GazePlay gazePlay, StatsContext statsContext)", "full_signature": "static void returnToMenu(GazePlay gazePlay, StatsContext statsContext)", "class_method_signature": "StatDisplayUtils.returnToMenu(GazePlay gazePlay, StatsContext statsContext)", "testcase": false, "constructor": false}, {"identifier": "buildLineChart", "parameters": "(Stats stats, final Region root)", "modifiers": "public static", "return": "LineChart<String, Number>", "signature": "LineChart<String, Number> buildLineChart(Stats stats, final Region root)", "full_signature": "public static LineChart<String, Number> buildLineChart(Stats stats, final Region root)", "class_method_signature": "StatDisplayUtils.buildLineChart(Stats stats, final Region root)", "testcase": false, "constructor": false}, {"identifier": "buildAreaChart", "parameters": "(LinkedList<FixationPoint> points, final Region root)", "modifiers": "public static", "return": "AreaChart<Number, Number>", "signature": "AreaChart<Number, Number> buildAreaChart(LinkedList<FixationPoint> points, final Region root)", "full_signature": "public static AreaChart<Number, Number> buildAreaChart(LinkedList<FixationPoint> points, final Region root)", "class_method_signature": "StatDisplayUtils.buildAreaChart(LinkedList<FixationPoint> points, final Region root)", "testcase": false, "constructor": false}, {"identifier": "buildGazeMetrics", "parameters": "(Stats stats, final Region root)", "modifiers": "public static", "return": "ImageView", "signature": "ImageView buildGazeMetrics(Stats stats, final Region root)", "full_signature": "public static ImageView buildGazeMetrics(Stats stats, final Region root)", "class_method_signature": "StatDisplayUtils.buildGazeMetrics(Stats stats, final Region root)", "testcase": false, "constructor": false}, {"identifier": "resetToOriginalIndexInParent", "parameters": "(Node node, int originalIndexInParent)", "modifiers": "private static", "return": "void", "signature": "void resetToOriginalIndexInParent(Node node, int originalIndexInParent)", "full_signature": "private static void resetToOriginalIndexInParent(Node node, int originalIndexInParent)", "class_method_signature": "StatDisplayUtils.resetToOriginalIndexInParent(Node node, int originalIndexInParent)", "testcase": false, "constructor": false}, {"identifier": "getOriginalIndexInParent", "parameters": "(Node node)", "modifiers": "private static", "return": "int", "signature": "int getOriginalIndexInParent(Node node)", "full_signature": "private static int getOriginalIndexInParent(Node node)", "class_method_signature": "StatDisplayUtils.getOriginalIndexInParent(Node node)", "testcase": false, "constructor": false}, {"identifier": "createZoomOutAreaChartEventHandler", "parameters": "(XYChart<Number, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "modifiers": "private static", "return": "EventHandler<Event>", "signature": "EventHandler<Event> createZoomOutAreaChartEventHandler(XYChart<Number, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "full_signature": "private static EventHandler<Event> createZoomOutAreaChartEventHandler(XYChart<Number, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "class_method_signature": "StatDisplayUtils.createZoomOutAreaChartEventHandler(XYChart<Number, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "testcase": false, "constructor": false}, {"identifier": "createZoomOutLineChartEventHandler", "parameters": "(XYChart<String, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "modifiers": "private static", "return": "EventHandler<Event>", "signature": "EventHandler<Event> createZoomOutLineChartEventHandler(XYChart<String, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "full_signature": "private static EventHandler<Event> createZoomOutLineChartEventHandler(XYChart<String, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "class_method_signature": "StatDisplayUtils.createZoomOutLineChartEventHandler(XYChart<String, Number> chart,\n                                                                          final Region root, int originalIndexInParent)", "testcase": false, "constructor": false}, {"identifier": "createZoomInAreaChartEventHandler", "parameters": "(XYChart<Number, Number> chart,\n                                                                         final Region root)", "modifiers": "private static", "return": "EventHandler<Event>", "signature": "EventHandler<Event> createZoomInAreaChartEventHandler(XYChart<Number, Number> chart,\n                                                                         final Region root)", "full_signature": "private static EventHandler<Event> createZoomInAreaChartEventHandler(XYChart<Number, Number> chart,\n                                                                         final Region root)", "class_method_signature": "StatDisplayUtils.createZoomInAreaChartEventHandler(XYChart<Number, Number> chart,\n                                                                         final Region root)", "testcase": false, "constructor": false}, {"identifier": "createZoomInLineChartEventHandler", "parameters": "(XYChart<String, Number> chart,\n                                                                         final Region root)", "modifiers": "private static", "return": "EventHandler<Event>", "signature": "EventHandler<Event> createZoomInLineChartEventHandler(XYChart<String, Number> chart,\n                                                                         final Region root)", "full_signature": "private static EventHandler<Event> createZoomInLineChartEventHandler(XYChart<String, Number> chart,\n                                                                         final Region root)", "class_method_signature": "StatDisplayUtils.createZoomInLineChartEventHandler(XYChart<String, Number> chart,\n                                                                         final Region root)", "testcase": false, "constructor": false}, {"identifier": "createZoomOutGazeMetricsEventHandler", "parameters": "(ImageView gazeMetrics, final Region root,\n                                                                            int originalIndexInParent)", "modifiers": "private static", "return": "EventHandler<Event>", "signature": "EventHandler<Event> createZoomOutGazeMetricsEventHandler(ImageView gazeMetrics, final Region root,\n                                                                            int originalIndexInParent)", "full_signature": "private static EventHandler<Event> createZoomOutGazeMetricsEventHandler(ImageView gazeMetrics, final Region root,\n                                                                            int originalIndexInParent)", "class_method_signature": "StatDisplayUtils.createZoomOutGazeMetricsEventHandler(ImageView gazeMetrics, final Region root,\n                                                                            int originalIndexInParent)", "testcase": false, "constructor": false}, {"identifier": "createZoomInGazeMetricsEventHandler", "parameters": "(ImageView gazeMetrics, final Region root)", "modifiers": "private static", "return": "EventHandler<Event>", "signature": "EventHandler<Event> createZoomInGazeMetricsEventHandler(ImageView gazeMetrics, final Region root)", "full_signature": "private static EventHandler<Event> createZoomInGazeMetricsEventHandler(ImageView gazeMetrics, final Region root)", "class_method_signature": "StatDisplayUtils.createZoomInGazeMetricsEventHandler(ImageView gazeMetrics, final Region root)", "testcase": false, "constructor": false}, {"identifier": "zoomOutAndReset", "parameters": "(Node node)", "modifiers": "private static", "return": "void", "signature": "void zoomOutAndReset(Node node)", "full_signature": "private static void zoomOutAndReset(Node node)", "class_method_signature": "StatDisplayUtils.zoomOutAndReset(Node node)", "testcase": false, "constructor": false}, {"identifier": "zoomInAndCenter", "parameters": "(Node node, double initialWidth, double initialHeight, boolean preserveRatio)", "modifiers": "private static", "return": "void", "signature": "void zoomInAndCenter(Node node, double initialWidth, double initialHeight, boolean preserveRatio)", "full_signature": "private static void zoomInAndCenter(Node node, double initialWidth, double initialHeight, boolean preserveRatio)", "class_method_signature": "StatDisplayUtils.zoomInAndCenter(Node node, double initialWidth, double initialHeight, boolean preserveRatio)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(long totalTime)", "modifiers": "public static", "return": "String", "signature": "String convert(long totalTime)", "full_signature": "public static String convert(long totalTime)", "class_method_signature": "StatDisplayUtils.convert(long totalTime)", "testcase": false, "constructor": false}], "file": "gazeplay-core/src/main/java/net/gazeplay/commons/utils/stats/StatDisplayUtils.java"}, "focal_method": {"identifier": "buildLineChart", "parameters": "(Stats stats, final Region root)", "modifiers": "public static", "return": "LineChart<String, Number>", "body": "public static LineChart<String, Number> buildLineChart(Stats stats, final Region root) {\n\n        final CategoryAxis xAxis = new CategoryAxis();\n        final NumberAxis yAxis = new NumberAxis();\n\n        LineChart<String, Number> lineChart = new LineChart<>(xAxis, yAxis);\n\n        // defining a series\n        Series<String, Number> series = new Series<>();\n        Series<String, Number> average = new Series<>();\n        Series<String, Number> sdp = new Series<>();\n        Series<String, Number> sdm = new Series<>();\n        // populating the series with data\n\n        final List<Long> shots;\n        if (stats instanceof ShootGamesStats) {\n            shots = stats.getSortedDurationsBetweenGoals();\n        } else {\n            shots = stats.getOriginalDurationsBetweenGoals();\n        }\n\n        double sd = stats.computeRoundsDurationStandardDeviation();\n\n        String xValue = \"0\";\n\n        average.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration()));\n        sdp.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() + sd));\n        sdm.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() - sd));\n\n        int i = 1;\n\n        for (Long duration : shots) {\n            xValue = Integer.toString(i);\n            series.getData().add(new Data<>(xValue, duration));\n            average.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration()));\n\n            sdp.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() + sd));\n            sdm.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() - sd));\n            i++;\n        }\n\n        xValue = Integer.toString(i);\n        average.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration()));\n        sdp.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() + sd));\n        sdm.getData().add(new Data<>(xValue, stats.computeRoundsDurationAverageDuration() - sd));\n\n        lineChart.setCreateSymbols(false);\n\n        lineChart.getData().add(average);\n        lineChart.getData().add(sdp);\n        lineChart.getData().add(sdm);\n        lineChart.getData().add(series);\n\n        series.getNode().setStyle(\"-fx-stroke-width: 3; -fx-stroke: red; -fx-stroke-dash-offset:5;\");\n        average.getNode().setStyle(\"-fx-stroke-width: 1; -fx-stroke: lightgreen;\");\n        sdp.getNode().setStyle(\"-fx-stroke-width: 1; -fx-stroke: grey;\");\n        sdm.getNode().setStyle(\"-fx-stroke-width: 1; -fx-stroke: grey;\");\n\n        EventHandler<Event> openLineChartEvent = createZoomInLineChartEventHandler(lineChart, root);\n\n        lineChart.addEventHandler(MouseEvent.MOUSE_CLICKED, openLineChartEvent);\n\n        lineChart.setLegendVisible(false);\n\n        root.widthProperty().addListener((observable, oldValue, newValue) -> lineChart.setMaxWidth(newValue.doubleValue() * 0.4));\n        root.heightProperty().addListener((observable, oldValue, newValue) -> lineChart.setMaxHeight(newValue.doubleValue() * 0.4));\n        lineChart.setMaxWidth(root.getWidth() * 0.4);\n        lineChart.setMaxHeight(root.getHeight() * 0.4);\n\n        return lineChart;\n    }", "signature": "LineChart<String, Number> buildLineChart(Stats stats, final Region root)", "full_signature": "public static LineChart<String, Number> buildLineChart(Stats stats, final Region root)", "class_method_signature": "StatDisplayUtils.buildLineChart(Stats stats, final Region root)", "testcase": false, "constructor": false, "invocations": ["getSortedDurationsBetweenGoals", "getOriginalDurationsBetweenGoals", "computeRoundsDurationStandardDeviation", "add", "getData", "computeRoundsDurationAverageDuration", "add", "getData", "computeRoundsDurationAverageDuration", "add", "getData", "computeRoundsDurationAverageDuration", "toString", "add", "getData", "add", "getData", "computeRoundsDurationAverageDuration", "add", "getData", "computeRoundsDurationAverageDuration", "add", "getData", "computeRoundsDurationAverageDuration", "toString", "add", "getData", "computeRoundsDurationAverageDuration", "add", "getData", "computeRoundsDurationAverageDuration", "add", "getData", "computeRoundsDurationAverageDuration", "setCreateSymbols", "add", "getData", "add", "getData", "add", "getData", "add", "getData", "setStyle", "getNode", "setStyle", "getNode", "setStyle", "getNode", "setStyle", "getNode", "createZoomInLineChartEventHandler", "addEventHandler", "setLegendVisible", "addListener", "widthProperty", "setMaxWidth", "doubleValue", "addListener", "heightProperty", "setMaxHeight", "doubleValue", "setMaxWidth", "getWidth", "setMaxHeight", "getHeight"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}