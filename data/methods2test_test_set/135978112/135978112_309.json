{"test_class": {"identifier": "KStreamFlatMapValuesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"topic\";", "modifier": "private", "type": "String", "declarator": "topicName = \"topic\"", "var_name": "topicName"}, {"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KStreamFlatMapValuesTest.java"}, "test_case": {"identifier": "testFlatMapValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatMapValues() {\n        KStreamBuilder builder = new KStreamBuilder();\n\n        ValueMapper<String, Iterable<String>> mapper =\n            new ValueMapper<String, Iterable<String>>() {\n                @Override\n                public Iterable<String> apply(String value) {\n                    ArrayList<String> result = new ArrayList<String>();\n                    result.add(value.toLowerCase(Locale.ROOT));\n                    result.add(value);\n                    return result;\n                }\n            };\n\n        final int[] expectedKeys = {0, 1, 2, 3};\n\n        KStream<Integer, String> stream;\n        MockProcessorSupplier<Integer, String> processor;\n\n        processor = new MockProcessorSupplier<>();\n        stream = builder.stream(Serdes.Integer(), Serdes.String(), topicName);\n        stream.flatMapValues(mapper).process(processor);\n\n        driver = new KStreamTestDriver(builder);\n        for (int i = 0; i < expectedKeys.length; i++) {\n            driver.process(topicName, expectedKeys[i], \"V\" + expectedKeys[i]);\n        }\n\n        assertEquals(8, processor.processed.size());\n\n        String[] expected = {\"0:v0\", \"0:V0\", \"1:v1\", \"1:V1\", \"2:v2\", \"2:V2\", \"3:v3\", \"3:V3\"};\n\n        for (int i = 0; i < expected.length; i++) {\n            assertEquals(expected[i], processor.processed.get(i));\n        }\n    }", "signature": "void testFlatMapValues()", "full_signature": "@Test public void testFlatMapValues()", "class_method_signature": "KStreamFlatMapValuesTest.testFlatMapValues()", "testcase": true, "constructor": false, "invocations": ["add", "toLowerCase", "add", "stream", "Integer", "String", "process", "flatMapValues", "process", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "KStreamFlatMapValues", "superclass": "", "interfaces": "implements ProcessorSupplier<K, V>", "fields": [{"original_string": "private final ValueMapper<V, ? extends Iterable<V1>> mapper;", "modifier": "private final", "type": "ValueMapper<V, ? extends Iterable<V1>>", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "KStreamFlatMapValues", "parameters": "(ValueMapper<V, ? extends Iterable<V1>> mapper)", "modifiers": "", "return": "", "signature": " KStreamFlatMapValues(ValueMapper<V, ? extends Iterable<V1>> mapper)", "full_signature": "  KStreamFlatMapValues(ValueMapper<V, ? extends Iterable<V1>> mapper)", "class_method_signature": "KStreamFlatMapValues.KStreamFlatMapValues(ValueMapper<V, ? extends Iterable<V1>> mapper)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamFlatMapValues.get()", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KStreamFlatMapValues.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, V>", "body": "@Override\n    public Processor<K, V> get() {\n        return new KStreamFlatMapValuesProcessor();\n    }", "signature": "Processor<K, V> get()", "full_signature": "@Override public Processor<K, V> get()", "class_method_signature": "KStreamFlatMapValues.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}