{"test_class": {"identifier": "LineParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "aesh/src/test/java/org/aesh/parser/LineParserTest.java"}, "test_case": {"identifier": "testParsedLineIterator2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParsedLineIterator2() {\n        LineParser lineParser = new LineParser();\n        ParsedLine line = lineParser.parseLine(\"foo bar\");\n        ParsedLineIterator iterator = line.iterator();\n\n        assertEquals(\"foo bar\", iterator.stringFromCurrentPosition());\n        iterator.updateIteratorPosition(3);\n        assertEquals(' ', iterator.pollChar());\n        assertEquals(\"bar\", iterator.stringFromCurrentPosition());\n        assertEquals(\"bar\", iterator.pollWord());\n\n        line = lineParser.parseLine(\"command --opt1={ myProp1=99, myProp2=100} --opt2\");\n        iterator = line.iterator();\n        assertEquals(\"command\", iterator.pollWord());\n        assertEquals('-', iterator.peekChar());\n        assertEquals(\"--opt1={\", iterator.peekWord());\n        iterator.updateIteratorPosition(33);\n        assertEquals(\"--opt2\", iterator.peekWord());\n        assertEquals(' ', iterator.peekChar());\n\n        line = lineParser.parseLine(\"--headers={t=x; t=y}\");\n        iterator = line.iterator();\n        assertEquals(\"--headers={t=x;\", iterator.pollWord());\n        assertEquals('t', iterator.peekChar());\n        iterator.updateIteratorPosition(3);\n        assertEquals('}', iterator.peekChar());\n        assertEquals(\"t=y}\", iterator.pollWord());\n        assertFalse(iterator.hasNextWord());\n        assertNull(\"\", iterator.pollWord());\n\n        line = lineParser.parseLine(\"--headers={t=x; t=y}\");\n        iterator = line.iterator();\n        iterator.pollParsedWord();\n        iterator.updateIteratorPosition(4);\n        assertFalse(iterator.hasNextChar());\n        assertEquals('\\u0000', iterator.pollChar());\n        assertNull(\"\", iterator.pollWord());\n\n        line = lineParser.parseLine(\"--headers={t=x; t=y}\");\n        iterator = line.iterator();\n        iterator.pollParsedWord();\n        iterator.updateIteratorPosition(40);\n        assertFalse(iterator.hasNextChar());\n        assertEquals('\\u0000', iterator.pollChar());\n        assertNull(\"\", iterator.pollWord());\n\n        line = lineParser.parseLine(\"--headers={t=x; t=y}\");\n        iterator = line.iterator();\n        iterator.updateIteratorPosition(20);\n        assertNull(iterator.peekWord());\n     }", "signature": "void testParsedLineIterator2()", "full_signature": "@Test public void testParsedLineIterator2()", "class_method_signature": "LineParserTest.testParsedLineIterator2()", "testcase": true, "constructor": false, "invocations": ["parseLine", "iterator", "assertEquals", "stringFromCurrentPosition", "updateIteratorPosition", "assertEquals", "pollChar", "assertEquals", "stringFromCurrentPosition", "assertEquals", "pollWord", "parseLine", "iterator", "assertEquals", "pollWord", "assertEquals", "peekChar", "assertEquals", "peekWord", "updateIteratorPosition", "assertEquals", "peekWord", "assertEquals", "peekChar", "parseLine", "iterator", "assertEquals", "pollWord", "assertEquals", "peekChar", "updateIteratorPosition", "assertEquals", "peekChar", "assertEquals", "pollWord", "assertFalse", "hasNextWord", "assertNull", "pollWord", "parseLine", "iterator", "pollParsedWord", "updateIteratorPosition", "assertFalse", "hasNextChar", "assertEquals", "pollChar", "assertNull", "pollWord", "parseLine", "iterator", "pollParsedWord", "updateIteratorPosition", "assertFalse", "hasNextChar", "assertEquals", "pollChar", "assertNull", "pollWord", "parseLine", "iterator", "updateIteratorPosition", "assertNull", "peekWord"]}, "focal_class": {"identifier": "LineParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char NULL_CHAR = '\\u0000';", "modifier": "private static final", "type": "char", "declarator": "NULL_CHAR = '\\u0000'", "var_name": "NULL_CHAR"}, {"original_string": "private static final char SPACE_CHAR = ' ';", "modifier": "private static final", "type": "char", "declarator": "SPACE_CHAR = ' '", "var_name": "SPACE_CHAR"}, {"original_string": "private static final char BACK_SLASH = '\\\\';", "modifier": "private static final", "type": "char", "declarator": "BACK_SLASH = '\\\\'", "var_name": "BACK_SLASH"}, {"original_string": "private static final char SINGLE_QUOTE = '\\'';", "modifier": "private static final", "type": "char", "declarator": "SINGLE_QUOTE = '\\''", "var_name": "SINGLE_QUOTE"}, {"original_string": "private static final char DOUBLE_QUOTE = '\\\"';", "modifier": "private static final", "type": "char", "declarator": "DOUBLE_QUOTE = '\\\"'", "var_name": "DOUBLE_QUOTE"}, {"original_string": "private static final char CURLY_START = '{';", "modifier": "private static final", "type": "char", "declarator": "CURLY_START = '{'", "var_name": "CURLY_START"}, {"original_string": "private static final char CURLY_END = '}';", "modifier": "private static final", "type": "char", "declarator": "CURLY_END = '}'", "var_name": "CURLY_END"}, {"original_string": "private static final char PARENTHESIS_START = '(';", "modifier": "private static final", "type": "char", "declarator": "PARENTHESIS_START = '('", "var_name": "PARENTHESIS_START"}, {"original_string": "private static final char PARENTHESIS_END = ')';", "modifier": "private static final", "type": "char", "declarator": "PARENTHESIS_END = ')'", "var_name": "PARENTHESIS_END"}, {"original_string": "private List<ParsedWord> textList = new ArrayList<>();", "modifier": "private", "type": "List<ParsedWord>", "declarator": "textList = new ArrayList<>()", "var_name": "textList"}, {"original_string": "private boolean haveEscape = false;", "modifier": "private", "type": "boolean", "declarator": "haveEscape = false", "var_name": "haveEscape"}, {"original_string": "private boolean haveSingleQuote = false;", "modifier": "private", "type": "boolean", "declarator": "haveSingleQuote = false", "var_name": "haveSingleQuote"}, {"original_string": "private boolean haveDoubleQuote = false;", "modifier": "private", "type": "boolean", "declarator": "haveDoubleQuote = false", "var_name": "haveDoubleQuote"}, {"original_string": "private boolean ternaryQuote = false;", "modifier": "private", "type": "boolean", "declarator": "ternaryQuote = false", "var_name": "ternaryQuote"}, {"original_string": "private boolean haveCurlyBracket = false;", "modifier": "private", "type": "boolean", "declarator": "haveCurlyBracket = false", "var_name": "haveCurlyBracket"}, {"original_string": "private boolean haveSquareBracket = false;", "modifier": "private", "type": "boolean", "declarator": "haveSquareBracket = false", "var_name": "haveSquareBracket"}, {"original_string": "private StringBuilder builder = new StringBuilder();", "modifier": "private", "type": "StringBuilder", "declarator": "builder = new StringBuilder()", "var_name": "builder"}, {"original_string": "private char prev = NULL_CHAR;", "modifier": "private", "type": "char", "declarator": "prev = NULL_CHAR", "var_name": "prev"}, {"original_string": "private int index = 0;", "modifier": "private", "type": "int", "declarator": "index = 0", "var_name": "index"}, {"original_string": "private int cursorWord = -1;", "modifier": "private", "type": "int", "declarator": "cursorWord = -1", "var_name": "cursorWord"}, {"original_string": "private int wordCursor = -1;", "modifier": "private", "type": "int", "declarator": "wordCursor = -1", "var_name": "wordCursor"}, {"original_string": "private String text;", "modifier": "private", "type": "String", "declarator": "text", "var_name": "text"}, {"original_string": "private int cursor = -1;", "modifier": "private", "type": "int", "declarator": "cursor = -1", "var_name": "cursor"}, {"original_string": "private boolean parseBrackets;", "modifier": "private", "type": "boolean", "declarator": "parseBrackets", "var_name": "parseBrackets"}, {"original_string": "private EnumSet<OperatorType> operators;", "modifier": "private", "type": "EnumSet<OperatorType>", "declarator": "operators", "var_name": "operators"}, {"original_string": "private OperatorType currentOperator;", "modifier": "private", "type": "OperatorType", "declarator": "currentOperator", "var_name": "currentOperator"}, {"original_string": "private int startIndex;", "modifier": "private", "type": "int", "declarator": "startIndex", "var_name": "startIndex"}], "methods": [{"identifier": "input", "parameters": "(String text)", "modifiers": "public", "return": "LineParser", "signature": "LineParser input(String text)", "full_signature": "public LineParser input(String text)", "class_method_signature": "LineParser.input(String text)", "testcase": false, "constructor": false}, {"identifier": "cursor", "parameters": "(int cursor)", "modifiers": "public", "return": "LineParser", "signature": "LineParser cursor(int cursor)", "full_signature": "public LineParser cursor(int cursor)", "class_method_signature": "LineParser.cursor(int cursor)", "testcase": false, "constructor": false}, {"identifier": "parseBrackets", "parameters": "(boolean doParse)", "modifiers": "public", "return": "LineParser", "signature": "LineParser parseBrackets(boolean doParse)", "full_signature": "public LineParser parseBrackets(boolean doParse)", "class_method_signature": "LineParser.parseBrackets(boolean doParse)", "testcase": false, "constructor": false}, {"identifier": "operators", "parameters": "(EnumSet<OperatorType> operators)", "modifiers": "public", "return": "LineParser", "signature": "LineParser operators(EnumSet<OperatorType> operators)", "full_signature": "public LineParser operators(EnumSet<OperatorType> operators)", "class_method_signature": "LineParser.operators(EnumSet<OperatorType> operators)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "public", "return": "ParsedLine", "signature": "ParsedLine parse()", "full_signature": "public ParsedLine parse()", "class_method_signature": "LineParser.parse()", "testcase": false, "constructor": false}, {"identifier": "parseWithOperators", "parameters": "()", "modifiers": "public", "return": "List<ParsedLine>", "signature": "List<ParsedLine> parseWithOperators()", "full_signature": "public List<ParsedLine> parseWithOperators()", "class_method_signature": "LineParser.parseWithOperators()", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String text)", "modifiers": "public", "return": "ParsedLine", "signature": "ParsedLine parseLine(String text)", "full_signature": "public ParsedLine parseLine(String text)", "class_method_signature": "LineParser.parseLine(String text)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String text, int cursor)", "modifiers": "public", "return": "ParsedLine", "signature": "ParsedLine parseLine(String text, int cursor)", "full_signature": "public ParsedLine parseLine(String text, int cursor)", "class_method_signature": "LineParser.parseLine(String text, int cursor)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "modifiers": "public", "return": "ParsedLine", "signature": "ParsedLine parseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "full_signature": "public ParsedLine parseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "class_method_signature": "LineParser.parseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "testcase": false, "constructor": false}, {"identifier": "doParseLine", "parameters": "(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "modifiers": "private", "return": "ParsedLine", "signature": "ParsedLine doParseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "full_signature": "private ParsedLine doParseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "class_method_signature": "LineParser.doParseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets)", "testcase": false, "constructor": false}, {"identifier": "parseLine", "parameters": "(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "modifiers": "public", "return": "List<ParsedLine>", "signature": "List<ParsedLine> parseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "full_signature": "public List<ParsedLine> parseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "class_method_signature": "LineParser.parseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "testcase": false, "constructor": false}, {"identifier": "doParseLine", "parameters": "(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "modifiers": "private", "return": "List<ParsedLine>", "signature": "List<ParsedLine> doParseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "full_signature": "private List<ParsedLine> doParseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "class_method_signature": "LineParser.doParseLine(String text, int cursor, boolean parseCurlyAndSquareBrackets, Set<OperatorType> operators)", "testcase": false, "constructor": false}, {"identifier": "nextChar", "parameters": "(String text, int index)", "modifiers": "private", "return": "char", "signature": "char nextChar(String text, int index)", "full_signature": "private char nextChar(String text, int index)", "class_method_signature": "LineParser.nextChar(String text, int index)", "testcase": false, "constructor": false}, {"identifier": "isQuoted", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isQuoted()", "full_signature": "private boolean isQuoted()", "class_method_signature": "LineParser.isQuoted()", "testcase": false, "constructor": false}, {"identifier": "matchesOperators", "parameters": "(Set<OperatorType> operators, String text, int index)", "modifiers": "private", "return": "OperatorType", "signature": "OperatorType matchesOperators(Set<OperatorType> operators, String text, int index)", "full_signature": "private OperatorType matchesOperators(Set<OperatorType> operators, String text, int index)", "class_method_signature": "LineParser.matchesOperators(Set<OperatorType> operators, String text, int index)", "testcase": false, "constructor": false}, {"identifier": "endOfLineProcessing", "parameters": "(String text, int cursor,\n                                           int startIndex, int totalTextLength)", "modifiers": "private", "return": "ParsedLine", "signature": "ParsedLine endOfLineProcessing(String text, int cursor,\n                                           int startIndex, int totalTextLength)", "full_signature": "private ParsedLine endOfLineProcessing(String text, int cursor,\n                                           int startIndex, int totalTextLength)", "class_method_signature": "LineParser.endOfLineProcessing(String text, int cursor,\n                                           int startIndex, int totalTextLength)", "testcase": false, "constructor": false}, {"identifier": "handleCurlyEnd", "parameters": "(char c)", "modifiers": "private", "return": "void", "signature": "void handleCurlyEnd(char c)", "full_signature": "private void handleCurlyEnd(char c)", "class_method_signature": "LineParser.handleCurlyEnd(char c)", "testcase": false, "constructor": false}, {"identifier": "handleCurlyStart", "parameters": "(char c)", "modifiers": "private", "return": "void", "signature": "void handleCurlyStart(char c)", "full_signature": "private void handleCurlyStart(char c)", "class_method_signature": "LineParser.handleCurlyStart(char c)", "testcase": false, "constructor": false}, {"identifier": "handleDoubleQuote", "parameters": "(char c)", "modifiers": "private", "return": "void", "signature": "void handleDoubleQuote(char c)", "full_signature": "private void handleDoubleQuote(char c)", "class_method_signature": "LineParser.handleDoubleQuote(char c)", "testcase": false, "constructor": false}, {"identifier": "handleHaveDoubleQuote", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleHaveDoubleQuote()", "full_signature": "private void handleHaveDoubleQuote()", "class_method_signature": "LineParser.handleHaveDoubleQuote()", "testcase": false, "constructor": false}, {"identifier": "handleSingleQuote", "parameters": "(char c)", "modifiers": "private", "return": "void", "signature": "void handleSingleQuote(char c)", "full_signature": "private void handleSingleQuote(char c)", "class_method_signature": "LineParser.handleSingleQuote(char c)", "testcase": false, "constructor": false}, {"identifier": "handleSpace", "parameters": "(char c)", "modifiers": "private", "return": "char", "signature": "char handleSpace(char c)", "full_signature": "private char handleSpace(char c)", "class_method_signature": "LineParser.handleSpace(char c)", "testcase": false, "constructor": false}, {"identifier": "handleFoundOperator", "parameters": "(List<ParsedLine> lines, String text, int cursor)", "modifiers": "private", "return": "void", "signature": "void handleFoundOperator(List<ParsedLine> lines, String text, int cursor)", "full_signature": "private void handleFoundOperator(List<ParsedLine> lines, String text, int cursor)", "class_method_signature": "LineParser.handleFoundOperator(List<ParsedLine> lines, String text, int cursor)", "testcase": false, "constructor": false}, {"identifier": "handleEscape", "parameters": "(char c)", "modifiers": "private", "return": "void", "signature": "void handleEscape(char c)", "full_signature": "private void handleEscape(char c)", "class_method_signature": "LineParser.handleEscape(char c)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void reset()", "full_signature": "private void reset()", "class_method_signature": "LineParser.reset()", "testcase": false, "constructor": false}], "file": "aesh/src/main/java/org/aesh/parser/LineParser.java"}, "focal_method": {"identifier": "parseLine", "parameters": "(String text)", "modifiers": "public", "return": "ParsedLine", "body": "public ParsedLine parseLine(String text) {\n        return parseLine(text, -1);\n    }", "signature": "ParsedLine parseLine(String text)", "full_signature": "public ParsedLine parseLine(String text)", "class_method_signature": "LineParser.parseLine(String text)", "testcase": false, "constructor": false, "invocations": ["parseLine"]}, "repository": {"repo_id": 2280644, "url": "https://github.com/aeshell/aesh", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 83, "size": 6068, "license": "licensed"}}