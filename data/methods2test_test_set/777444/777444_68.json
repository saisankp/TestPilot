{"test_class": {"identifier": "RestrictorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LogHandler dummyLogHandler = createDummyLogHandler();", "modifier": "private final", "type": "LogHandler", "declarator": "dummyLogHandler = createDummyLogHandler()", "var_name": "dummyLogHandler"}], "file": "agent/core/src/test/java/org/jolokia/restrictor/RestrictorFactoryTest.java"}, "test_case": {"identifier": "testAllowAllRestrictor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAllowAllRestrictor() throws Exception {\n\n        Configuration config = getConfig();\n        Restrictor restrictor = RestrictorFactory.createRestrictor(config, dummyLogHandler);\n        assertTrue(restrictor.getClass().isAssignableFrom(AllowAllRestrictor.class));\n\n    }", "signature": "void testAllowAllRestrictor()", "full_signature": "@Test public void testAllowAllRestrictor()", "class_method_signature": "RestrictorFactoryTest.testAllowAllRestrictor()", "testcase": true, "constructor": false, "invocations": ["getConfig", "createRestrictor", "assertTrue", "isAssignableFrom", "getClass"]}, "focal_class": {"identifier": "RestrictorFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RestrictorFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " RestrictorFactory()", "full_signature": "private  RestrictorFactory()", "class_method_signature": "RestrictorFactory.RestrictorFactory()", "testcase": false, "constructor": true}, {"identifier": "createRestrictor", "parameters": "(Configuration pConfig, LogHandler logHandler)", "modifiers": "public static", "return": "Restrictor", "signature": "Restrictor createRestrictor(Configuration pConfig, LogHandler logHandler)", "full_signature": "public static Restrictor createRestrictor(Configuration pConfig, LogHandler logHandler)", "class_method_signature": "RestrictorFactory.createRestrictor(Configuration pConfig, LogHandler logHandler)", "testcase": false, "constructor": false}, {"identifier": "createCustomRestrictor", "parameters": "(Configuration pConfig)", "modifiers": "private static", "return": "Restrictor", "signature": "Restrictor createCustomRestrictor(Configuration pConfig)", "full_signature": "private static Restrictor createCustomRestrictor(Configuration pConfig)", "class_method_signature": "RestrictorFactory.createCustomRestrictor(Configuration pConfig)", "testcase": false, "constructor": false}, {"identifier": "lookupRestrictor", "parameters": "(Configuration pConfig, Class restrictorClass)", "modifiers": "private static", "return": "Restrictor", "signature": "Restrictor lookupRestrictor(Configuration pConfig, Class restrictorClass)", "full_signature": "private static Restrictor lookupRestrictor(Configuration pConfig, Class restrictorClass)", "class_method_signature": "RestrictorFactory.lookupRestrictor(Configuration pConfig, Class restrictorClass)", "testcase": false, "constructor": false}, {"identifier": "lookupPolicyRestrictor", "parameters": "(String pLocation)", "modifiers": "public static", "return": "PolicyRestrictor", "signature": "PolicyRestrictor lookupPolicyRestrictor(String pLocation)", "full_signature": "public static PolicyRestrictor lookupPolicyRestrictor(String pLocation)", "class_method_signature": "RestrictorFactory.lookupPolicyRestrictor(String pLocation)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/restrictor/RestrictorFactory.java"}, "focal_method": {"identifier": "createRestrictor", "parameters": "(Configuration pConfig, LogHandler logHandler)", "modifiers": "public static", "return": "Restrictor", "body": "public static Restrictor createRestrictor(Configuration pConfig, LogHandler logHandler) {\n\n        Restrictor customRestrictor = createCustomRestrictor(pConfig);\n        if (customRestrictor != null) {\n            logHandler.info(\"Using restrictor \" + customRestrictor.getClass().getCanonicalName());\n            return customRestrictor;\n        }\n\n        String location = NetworkUtil.replaceExpression(pConfig.get(ConfigKey.POLICY_LOCATION));\n        try {\n            Restrictor ret = RestrictorFactory.lookupPolicyRestrictor(location);\n            if (ret != null) {\n                logHandler.info(\"Using policy access restrictor \" + location);\n                return ret;\n            } else {\n                logHandler.info(\"No access restrictor found, access to any MBean is allowed\");\n                return new AllowAllRestrictor();\n            }\n        } catch (IOException e) {\n            logHandler.error(\"Error while accessing access restrictor at \" + location +\n                             \". Denying all access to MBeans for security reasons. Exception: \" + e, e);\n            return new DenyAllRestrictor();\n        }\n    }", "signature": "Restrictor createRestrictor(Configuration pConfig, LogHandler logHandler)", "full_signature": "public static Restrictor createRestrictor(Configuration pConfig, LogHandler logHandler)", "class_method_signature": "RestrictorFactory.createRestrictor(Configuration pConfig, LogHandler logHandler)", "testcase": false, "constructor": false, "invocations": ["createCustomRestrictor", "info", "getCanonicalName", "getClass", "replaceExpression", "get", "lookupPolicyRestrictor", "info", "info", "error"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}