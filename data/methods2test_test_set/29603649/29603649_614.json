{"test_class": {"identifier": "InterceptorDescriptorParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"interceptor1\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"interceptor1\"", "var_name": "NAME"}, {"original_string": "private static final String VALUE = \"21\";", "modifier": "private static final", "type": "String", "declarator": "VALUE = \"21\"", "var_name": "VALUE"}, {"original_string": "private static final String CLASS = \"sessionStoringInterceptor\";", "modifier": "private static final", "type": "String", "declarator": "CLASS = \"sessionStoringInterceptor\"", "var_name": "CLASS"}, {"original_string": "private static final String BAD_CLASS = \"sessionStoringInterceptor.class\";", "modifier": "private static final", "type": "String", "declarator": "BAD_CLASS = \"sessionStoringInterceptor.class\"", "var_name": "BAD_CLASS"}, {"original_string": "@Mock\n    private RequestInterceptorInitializer requestInterceptorInitializer;", "modifier": "@Mock\n    private", "type": "RequestInterceptorInitializer", "declarator": "requestInterceptorInitializer", "var_name": "requestInterceptorInitializer"}, {"original_string": "@Mock\n    private ResponseInterceptorInitializer responseInterceptorInitializer;", "modifier": "@Mock\n    private", "type": "ResponseInterceptorInitializer", "declarator": "responseInterceptorInitializer", "var_name": "responseInterceptorInitializer"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private Element interceptorNode;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "interceptorNode", "var_name": "interceptorNode"}, {"original_string": "@Mock\n    private Element parameterNode;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "parameterNode", "var_name": "parameterNode"}, {"original_string": "@InjectMocks\n    private InterceptorDescriptorParser underTest;", "modifier": "@InjectMocks\n    private", "type": "InterceptorDescriptorParser", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/node/InterceptorDescriptorParserTest.java"}, "test_case": {"identifier": "testParseNodeWhenInterceptorNodeIsNullShouldDoNothing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseNodeWhenInterceptorNodeIsNullShouldDoNothing() {\n        //GIVEN\n        //WHEN\n        InterceptorDescriptor actual = underTest.parseNode(null, document);\n        //THEN\n        assertEquals(actual, null);\n    }", "signature": "void testParseNodeWhenInterceptorNodeIsNullShouldDoNothing()", "full_signature": "@Test public void testParseNodeWhenInterceptorNodeIsNullShouldDoNothing()", "class_method_signature": "InterceptorDescriptorParserTest.testParseNodeWhenInterceptorNodeIsNullShouldDoNothing()", "testcase": true, "constructor": false, "invocations": ["parseNode", "assertEquals"]}, "focal_class": {"identifier": "InterceptorDescriptorParser", "superclass": "", "interfaces": "implements NodeParser<InterceptorDescriptor>", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InterceptorDescriptorParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InterceptorDescriptorParser.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private RequestInterceptorInitializer requestInterceptorInitializer;", "modifier": "@Autowired\n    private", "type": "RequestInterceptorInitializer", "declarator": "requestInterceptorInitializer", "var_name": "requestInterceptorInitializer"}, {"original_string": "@Autowired\n    private ResponseInterceptorInitializer responseInterceptorInitializer;", "modifier": "@Autowired\n    private", "type": "ResponseInterceptorInitializer", "declarator": "responseInterceptorInitializer", "var_name": "responseInterceptorInitializer"}], "methods": [{"identifier": "parseNode", "parameters": "(final Node interceptorNode, final Document document)", "modifiers": "@Override public", "return": "InterceptorDescriptor", "signature": "InterceptorDescriptor parseNode(final Node interceptorNode, final Document document)", "full_signature": "@Override public InterceptorDescriptor parseNode(final Node interceptorNode, final Document document)", "class_method_signature": "InterceptorDescriptorParser.parseNode(final Node interceptorNode, final Document document)", "testcase": false, "constructor": false}, {"identifier": "parseInterceptorParameters", "parameters": "(final NodeList params)", "modifiers": "private", "return": "ParameterList", "signature": "ParameterList parseInterceptorParameters(final NodeList params)", "full_signature": "private ParameterList parseInterceptorParameters(final NodeList params)", "class_method_signature": "InterceptorDescriptorParser.parseInterceptorParameters(final NodeList params)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/node/InterceptorDescriptorParser.java"}, "focal_method": {"identifier": "parseNode", "parameters": "(final Node interceptorNode, final Document document)", "modifiers": "@Override public", "return": "InterceptorDescriptor", "body": "@Override\n    public InterceptorDescriptor parseNode(final Node interceptorNode, final Document document) {\n        InterceptorDescriptor interceptorDescriptor = null;\n        if (interceptorNode != null) {\n            Element el = (Element) interceptorNode;\n            String name = el.getAttribute(\"name\");\n            String clazz = el.getAttribute(\"class\");\n            //check for dummy problem of not giving class attribute, or giving 'class' to the end of the class name\n            if (clazz == null) {\n                throw new DescriptorValidationFailedException(\"Validation of stub descriptor failed - Class name is missing.\");\n            }\n            if (clazz.toLowerCase().endsWith(\".class\")) {\n                throw new DescriptorValidationFailedException(\"Validation of stub descriptor failed - Class name '\" + clazz\n                        + \"' should not contain 'class' at its end.\");\n            }\n            ParameterList params = parseInterceptorParameters(el.getElementsByTagName(\"param\"));\n            RequestInterceptor requestInterceptor = null;\n            ResponseInterceptor responseInterceptor = null;\n            try {\n                requestInterceptor = requestInterceptorInitializer.getExternalClassObject(clazz);\n            } catch (InterfaceValidationFailedException e) {\n                // don't worry\n                LOGGER.debug(\"No Request interceptor in class:\" + clazz, e);\n            }\n            try {\n                responseInterceptor = responseInterceptorInitializer.getExternalClassObject(clazz);\n            } catch (InterfaceValidationFailedException e) {\n                //don't worry\n                LOGGER.debug(\"No Response interceptor in class:\" + clazz, e);\n            }\n            if (requestInterceptor == null && responseInterceptor == null) {\n                throw new DescriptorValidationFailedException(\"Validation of stub descriptor failed - Class '\" + clazz\n                        + \"' does not implement any of the necessary interfaces.\");\n            }\n            interceptorDescriptor = new InterceptorDescriptor(name, requestInterceptor, responseInterceptor, params);\n        }\n        return interceptorDescriptor;\n    }", "signature": "InterceptorDescriptor parseNode(final Node interceptorNode, final Document document)", "full_signature": "@Override public InterceptorDescriptor parseNode(final Node interceptorNode, final Document document)", "class_method_signature": "InterceptorDescriptorParser.parseNode(final Node interceptorNode, final Document document)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "getAttribute", "endsWith", "toLowerCase", "parseInterceptorParameters", "getElementsByTagName", "getExternalClassObject", "debug", "getExternalClassObject", "debug"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}