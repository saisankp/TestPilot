{"test_class": {"identifier": "FormatFactoryTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private static FormatFactory factory;", "modifier": "private static", "type": "FormatFactory", "declarator": "factory", "var_name": "factory"}], "file": "storage/ioformats/src/test/java/org/openscience/cdk/io/FormatFactoryTest.java"}, "test_case": {"identifier": "testGuessFormat_Gz", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGuessFormat_Gz() throws Exception {\n        String filename = \"data/xyz/bf3.xyz.gz\";\n        InputStream input = new BufferedInputStream(new GZIPInputStream(this.getClass().getClassLoader()\n                .getResourceAsStream(filename)));\n        IChemFormat format = factory.guessFormat(input);\n        Assert.assertNotNull(format);\n        // make sure the InputStream is properly reset\n        BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n        String line = reader.readLine();\n        Assert.assertNotNull(line);\n        Assert.assertEquals(\"4\", line);\n        line = reader.readLine();\n        Assert.assertNotNull(line);\n        Assert.assertEquals(\"Bortrifluorid\", line);\n    }", "signature": "void testGuessFormat_Gz()", "full_signature": "@Test public void testGuessFormat_Gz()", "class_method_signature": "FormatFactoryTest.testGuessFormat_Gz()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "guessFormat", "assertNotNull", "readLine", "assertNotNull", "assertEquals", "readLine", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "FormatFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int                      headerLength;", "modifier": "private", "type": "int", "declarator": "headerLength", "var_name": "headerLength"}, {"original_string": "private List<IChemFormatMatcher> formats = new ArrayList<IChemFormatMatcher>(100);", "modifier": "private", "type": "List<IChemFormatMatcher>", "declarator": "formats = new ArrayList<IChemFormatMatcher>(100)", "var_name": "formats"}, {"original_string": "private final static ILoggingTool LOGGER = LoggingToolFactory.createLoggingTool(FormatFactory.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "LOGGER = LoggingToolFactory.createLoggingTool(FormatFactory.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "FormatFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " FormatFactory()", "full_signature": "public  FormatFactory()", "class_method_signature": "FormatFactory.FormatFactory()", "testcase": false, "constructor": true}, {"identifier": "FormatFactory", "parameters": "(int headerLength)", "modifiers": "public", "return": "", "signature": " FormatFactory(int headerLength)", "full_signature": "public  FormatFactory(int headerLength)", "class_method_signature": "FormatFactory.FormatFactory(int headerLength)", "testcase": false, "constructor": true}, {"identifier": "loadFormats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadFormats()", "full_signature": "private void loadFormats()", "class_method_signature": "FormatFactory.loadFormats()", "testcase": false, "constructor": false}, {"identifier": "registerFormat", "parameters": "(IChemFormatMatcher format)", "modifiers": "public", "return": "void", "signature": "void registerFormat(IChemFormatMatcher format)", "full_signature": "public void registerFormat(IChemFormatMatcher format)", "class_method_signature": "FormatFactory.registerFormat(IChemFormatMatcher format)", "testcase": false, "constructor": false}, {"identifier": "getFormats", "parameters": "()", "modifiers": "public", "return": "List<IChemFormatMatcher>", "signature": "List<IChemFormatMatcher> getFormats()", "full_signature": "public List<IChemFormatMatcher> getFormats()", "class_method_signature": "FormatFactory.getFormats()", "testcase": false, "constructor": false}, {"identifier": "guessFormat", "parameters": "(Reader input)", "modifiers": "public", "return": "IChemFormat", "signature": "IChemFormat guessFormat(Reader input)", "full_signature": "public IChemFormat guessFormat(Reader input)", "class_method_signature": "FormatFactory.guessFormat(Reader input)", "testcase": false, "constructor": false}, {"identifier": "guessFormat", "parameters": "(InputStream input)", "modifiers": "public", "return": "IChemFormat", "signature": "IChemFormat guessFormat(InputStream input)", "full_signature": "public IChemFormat guessFormat(InputStream input)", "class_method_signature": "FormatFactory.guessFormat(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "getMatchResult", "parameters": "( BufferedReader buffer)", "modifiers": "private", "return": "IChemFormat", "signature": "IChemFormat getMatchResult( BufferedReader buffer)", "full_signature": "private IChemFormat getMatchResult( BufferedReader buffer)", "class_method_signature": "FormatFactory.getMatchResult( BufferedReader buffer)", "testcase": false, "constructor": false}, {"identifier": "getXYZFormat", "parameters": "(BufferedReader buffer)", "modifiers": "private", "return": "IChemFormat", "signature": "IChemFormat getXYZFormat(BufferedReader buffer)", "full_signature": "private IChemFormat getXYZFormat(BufferedReader buffer)", "class_method_signature": "FormatFactory.getXYZFormat(BufferedReader buffer)", "testcase": false, "constructor": false}], "file": "storage/ioformats/src/main/java/org/openscience/cdk/io/FormatFactory.java"}, "focal_method": {"identifier": "guessFormat", "parameters": "(Reader input)", "modifiers": "public", "return": "IChemFormat", "body": "public IChemFormat guessFormat(Reader input) throws IOException {\n        if (input == null) {\n            throw new IllegalArgumentException(\"input cannot be null\");\n        }\n        // make a copy of the header\n        char[] header = new char[this.headerLength];\n        if (!input.markSupported()) {\n            throw new IllegalArgumentException(\"input must support mark\");\n        }\n        input.mark(this.headerLength);\n        input.read(header, 0, this.headerLength);\n        input.reset();\n\n        BufferedReader buffer = new BufferedReader(new CharArrayReader(header));\n        IChemFormat chemFormat = getMatchResult(buffer);\n\n        if(chemFormat == null){\n        \tbuffer = new BufferedReader(new CharArrayReader(header));\n            chemFormat = getXYZFormat(buffer);\n          }\n        return chemFormat;\n        \n    }", "signature": "IChemFormat guessFormat(Reader input)", "full_signature": "public IChemFormat guessFormat(Reader input)", "class_method_signature": "FormatFactory.guessFormat(Reader input)", "testcase": false, "constructor": false, "invocations": ["markSupported", "mark", "read", "reset", "getMatchResult", "getXYZFormat"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}