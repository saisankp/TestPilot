{"test_class": {"identifier": "PropertiesResourceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PropertiesResourceImpl fixture;", "modifier": "private", "type": "PropertiesResourceImpl", "declarator": "fixture", "var_name": "fixture"}], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/util/PropertiesResourceImplTest.java"}, "test_case": {"identifier": "testWriteBOMForUnicodeMode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteBOMForUnicodeMode()\n        throws IOException\n    {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        PropertyFile file = PropertiesFactory.eINSTANCE.createPropertyFile();\n        Property property = PropertiesFactory.eINSTANCE.createProperty();\n        property.setKey(\"key\");\n        property.setValue(\"value\");\n        property.setComment(\"comment\");\n        file.getProperties().add(property);\n        getFixture().getContents().add(file);\n        Map<String, Object> options = new HashMap<String, Object>();\n        options.put(PropertiesResourceImpl.OPTION_FILEMODE, JavaPropertyScannerUTF8.TYPE);\n        getFixture().doSave(out, options);\n        ByteOrderMark mark = ByteOrderMark.read(new ByteArrayInputStream(out.toByteArray()));\n        assertEquals(\"Must write a BOM in unicode mode\", ByteOrderMark.UTF_8, mark);\n    }", "signature": "void testWriteBOMForUnicodeMode()", "full_signature": "@Test public void testWriteBOMForUnicodeMode()", "class_method_signature": "PropertiesResourceImplTest.testWriteBOMForUnicodeMode()", "testcase": true, "constructor": false, "invocations": ["createPropertyFile", "createProperty", "setKey", "setValue", "setComment", "add", "getProperties", "add", "getContents", "getFixture", "put", "doSave", "getFixture", "read", "toByteArray", "assertEquals"]}, "focal_class": {"identifier": "PropertiesResourceImpl", "superclass": "extends ResourceImpl", "interfaces": "", "fields": [{"original_string": "private int savedProperties;", "modifier": "private", "type": "int", "declarator": "savedProperties", "var_name": "savedProperties"}, {"original_string": "public static final String OPTION_FILEMODE = \"file.mode\";", "modifier": "public static final", "type": "String", "declarator": "OPTION_FILEMODE = \"file.mode\"", "var_name": "OPTION_FILEMODE"}, {"original_string": "public static final String OPTION_ENCODING = \"encoding\";", "modifier": "public static final", "type": "String", "declarator": "OPTION_ENCODING = \"encoding\"", "var_name": "OPTION_ENCODING"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PropertiesResourceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PropertiesResourceImpl.class)", "var_name": "LOG"}, {"original_string": "private static final LoadingCache<String, ReentrantReadWriteLock> LOCKS = CacheBuilder.newBuilder().maximumSize(10000).build(new CacheLoader<String, ReentrantReadWriteLock>() {\n\n\t\t@Override\n\t\tpublic ReentrantReadWriteLock load(String key) throws Exception {\n\t\t\treturn new ReentrantReadWriteLock();\n\t\t}\n\t});", "modifier": "private static final", "type": "LoadingCache<String, ReentrantReadWriteLock>", "declarator": "LOCKS = CacheBuilder.newBuilder().maximumSize(10000).build(new CacheLoader<String, ReentrantReadWriteLock>() {\n\n\t\t@Override\n\t\tpublic ReentrantReadWriteLock load(String key) throws Exception {\n\t\t\treturn new ReentrantReadWriteLock();\n\t\t}\n\t})", "var_name": "LOCKS"}], "methods": [{"identifier": "PropertiesResourceImpl", "parameters": "(URI uri)", "modifiers": "public", "return": "", "signature": " PropertiesResourceImpl(URI uri)", "full_signature": "public  PropertiesResourceImpl(URI uri)", "class_method_signature": "PropertiesResourceImpl.PropertiesResourceImpl(URI uri)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(Map<?, ?> options)", "modifiers": "@Override public", "return": "void", "signature": "void load(Map<?, ?> options)", "full_signature": "@Override public void load(Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.load(Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "doLoad", "parameters": "(InputStream inputStream, Map<?, ?> options)", "modifiers": "@Override protected", "return": "void", "signature": "void doLoad(InputStream inputStream, Map<?, ?> options)", "full_signature": "@Override protected void doLoad(InputStream inputStream, Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.doLoad(InputStream inputStream, Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(Map<?, ?> options)", "modifiers": "private", "return": "String", "signature": "String getPropertyType(Map<?, ?> options)", "full_signature": "private String getPropertyType(Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.getPropertyType(Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Map<?, ?> options)", "modifiers": "@Override public", "return": "void", "signature": "void save(Map<?, ?> options)", "full_signature": "@Override public void save(Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.save(Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "doSave", "parameters": "(OutputStream outputStream, Map<?, ?> options)", "modifiers": "@Override protected", "return": "void", "signature": "void doSave(OutputStream outputStream, Map<?, ?> options)", "full_signature": "@Override protected void doSave(OutputStream outputStream, Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.doSave(OutputStream outputStream, Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "getSavedProperties", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSavedProperties()", "full_signature": "public int getSavedProperties()", "class_method_signature": "PropertiesResourceImpl.getSavedProperties()", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/util/PropertiesResourceImpl.java"}, "focal_method": {"identifier": "doSave", "parameters": "(OutputStream outputStream, Map<?, ?> options)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doSave(OutputStream outputStream, Map<?, ?> options)\n            throws IOException {\n        savedProperties = 0;\n        String type = getPropertyType(options);\n        PropertyScanner scanner = PropertyResourceUtil.createScanner(type);\n        String encoding = scanner.getEncoding();\n        PropertyConverter converter = scanner.createConverter(getURI());\n        try{\n\n        \t\tPropertyFile file = (PropertyFile) getContents().get(0);\n        \t\tsavedProperties = converter.write(outputStream, file,encoding);\n        }\n        finally{\n\t\t\t\toutputStream.close();\n        }\n    }", "signature": "void doSave(OutputStream outputStream, Map<?, ?> options)", "full_signature": "@Override protected void doSave(OutputStream outputStream, Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.doSave(OutputStream outputStream, Map<?, ?> options)", "testcase": false, "constructor": false, "invocations": ["getPropertyType", "createScanner", "getEncoding", "createConverter", "getURI", "get", "getContents", "write", "close"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}