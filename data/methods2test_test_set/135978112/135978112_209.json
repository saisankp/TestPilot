{"test_class": {"identifier": "ConsumerNetworkClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String topicName = \"test\";", "modifier": "private", "type": "String", "declarator": "topicName = \"test\"", "var_name": "topicName"}, {"original_string": "private MockTime time = new MockTime();", "modifier": "private", "type": "MockTime", "declarator": "time = new MockTime()", "var_name": "time"}, {"original_string": "private MockClient client = new MockClient(time);", "modifier": "private", "type": "MockClient", "declarator": "client = new MockClient(time)", "var_name": "client"}, {"original_string": "private Cluster cluster = TestUtils.singletonCluster(topicName, 1);", "modifier": "private", "type": "Cluster", "declarator": "cluster = TestUtils.singletonCluster(topicName, 1)", "var_name": "cluster"}, {"original_string": "private Node node = cluster.nodes().get(0);", "modifier": "private", "type": "Node", "declarator": "node = cluster.nodes().get(0)", "var_name": "node"}, {"original_string": "private Metadata metadata = new Metadata(0, Long.MAX_VALUE);", "modifier": "private", "type": "Metadata", "declarator": "metadata = new Metadata(0, Long.MAX_VALUE)", "var_name": "metadata"}, {"original_string": "private ConsumerNetworkClient consumerClient = new ConsumerNetworkClient(client, metadata, time, 100, 1000);", "modifier": "private", "type": "ConsumerNetworkClient", "declarator": "consumerClient = new ConsumerNetworkClient(client, metadata, time, 100, 1000)", "var_name": "consumerClient"}], "file": "clients/src/test/java/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClientTest.java"}, "test_case": {"identifier": "send", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void send() {\n        client.prepareResponse(heartbeatResponse(Errors.NONE.code()));\n        RequestFuture<ClientResponse> future = consumerClient.send(node, ApiKeys.METADATA, heartbeatRequest());\n        assertEquals(1, consumerClient.pendingRequestCount());\n        assertEquals(1, consumerClient.pendingRequestCount(node));\n        assertFalse(future.isDone());\n\n        consumerClient.poll(future);\n        assertTrue(future.isDone());\n        assertTrue(future.succeeded());\n\n        ClientResponse clientResponse = future.value();\n        HeartbeatResponse response = new HeartbeatResponse(clientResponse.responseBody());\n        assertEquals(Errors.NONE.code(), response.errorCode());\n    }", "signature": "void send()", "full_signature": "@Test public void send()", "class_method_signature": "ConsumerNetworkClientTest.send()", "testcase": true, "constructor": false, "invocations": ["prepareResponse", "heartbeatResponse", "code", "send", "heartbeatRequest", "assertEquals", "pendingRequestCount", "assertEquals", "pendingRequestCount", "assertFalse", "isDone", "poll", "assertTrue", "isDone", "assertTrue", "succeeded", "value", "responseBody", "assertEquals", "code", "errorCode"]}, "focal_class": {"identifier": "ConsumerNetworkClient", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ConsumerNetworkClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConsumerNetworkClient.class)", "var_name": "log"}, {"original_string": "private final KafkaClient client;", "modifier": "private final", "type": "KafkaClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final DelayedTaskQueue delayedTasks = new DelayedTaskQueue();", "modifier": "private final", "type": "DelayedTaskQueue", "declarator": "delayedTasks = new DelayedTaskQueue()", "var_name": "delayedTasks"}, {"original_string": "private final Map<Node, List<ClientRequest>> unsent = new HashMap<>();", "modifier": "private final", "type": "Map<Node, List<ClientRequest>>", "declarator": "unsent = new HashMap<>()", "var_name": "unsent"}, {"original_string": "private final long unsentExpiryMs;", "modifier": "private final", "type": "long", "declarator": "unsentExpiryMs", "var_name": "unsentExpiryMs"}, {"original_string": "private final AtomicBoolean wakeup = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "wakeup = new AtomicBoolean(false)", "var_name": "wakeup"}, {"original_string": "private int wakeupDisabledCount = 0;", "modifier": "private", "type": "int", "declarator": "wakeupDisabledCount = 0", "var_name": "wakeupDisabledCount"}, {"original_string": "private final long retryBackoffMs;", "modifier": "private final", "type": "long", "declarator": "retryBackoffMs", "var_name": "retryBackoffMs"}, {"original_string": "private final Metadata metadata;", "modifier": "private final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private final Time time;", "modifier": "private final", "type": "Time", "declarator": "time", "var_name": "time"}], "methods": [{"identifier": "ConsumerNetworkClient", "parameters": "(KafkaClient client,\n        Metadata metadata,\n        Time time,\n        long retryBackoffMs,\n        long requestTimeoutMs)", "modifiers": "public", "return": "", "signature": " ConsumerNetworkClient(KafkaClient client,\n        Metadata metadata,\n        Time time,\n        long retryBackoffMs,\n        long requestTimeoutMs)", "full_signature": "public  ConsumerNetworkClient(KafkaClient client,\n        Metadata metadata,\n        Time time,\n        long retryBackoffMs,\n        long requestTimeoutMs)", "class_method_signature": "ConsumerNetworkClient.ConsumerNetworkClient(KafkaClient client,\n        Metadata metadata,\n        Time time,\n        long retryBackoffMs,\n        long requestTimeoutMs)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "(DelayedTask task, long at)", "modifiers": "public", "return": "void", "signature": "void schedule(DelayedTask task, long at)", "full_signature": "public void schedule(DelayedTask task, long at)", "class_method_signature": "ConsumerNetworkClient.schedule(DelayedTask task, long at)", "testcase": false, "constructor": false}, {"identifier": "unschedule", "parameters": "(DelayedTask task)", "modifiers": "public", "return": "void", "signature": "void unschedule(DelayedTask task)", "full_signature": "public void unschedule(DelayedTask task)", "class_method_signature": "ConsumerNetworkClient.unschedule(DelayedTask task)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "modifiers": "public", "return": "RequestFuture<ClientResponse>", "signature": "RequestFuture<ClientResponse> send(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "full_signature": "public RequestFuture<ClientResponse> send(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "class_method_signature": "ConsumerNetworkClient.send(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(Node node, ClientRequest request)", "modifiers": "private", "return": "void", "signature": "void put(Node node, ClientRequest request)", "full_signature": "private void put(Node node, ClientRequest request)", "class_method_signature": "ConsumerNetworkClient.put(Node node, ClientRequest request)", "testcase": false, "constructor": false}, {"identifier": "leastLoadedNode", "parameters": "()", "modifiers": "public", "return": "Node", "signature": "Node leastLoadedNode()", "full_signature": "public Node leastLoadedNode()", "class_method_signature": "ConsumerNetworkClient.leastLoadedNode()", "testcase": false, "constructor": false}, {"identifier": "awaitMetadataUpdate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void awaitMetadataUpdate()", "full_signature": "public void awaitMetadataUpdate()", "class_method_signature": "ConsumerNetworkClient.awaitMetadataUpdate()", "testcase": false, "constructor": false}, {"identifier": "wakeup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void wakeup()", "full_signature": "public void wakeup()", "class_method_signature": "ConsumerNetworkClient.wakeup()", "testcase": false, "constructor": false}, {"identifier": "ensureFreshMetadata", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void ensureFreshMetadata()", "full_signature": "public void ensureFreshMetadata()", "class_method_signature": "ConsumerNetworkClient.ensureFreshMetadata()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(RequestFuture<?> future)", "modifiers": "public", "return": "void", "signature": "void poll(RequestFuture<?> future)", "full_signature": "public void poll(RequestFuture<?> future)", "class_method_signature": "ConsumerNetworkClient.poll(RequestFuture<?> future)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(RequestFuture<?> future, long timeout)", "modifiers": "public", "return": "boolean", "signature": "boolean poll(RequestFuture<?> future, long timeout)", "full_signature": "public boolean poll(RequestFuture<?> future, long timeout)", "class_method_signature": "ConsumerNetworkClient.poll(RequestFuture<?> future, long timeout)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout)", "modifiers": "public", "return": "void", "signature": "void poll(long timeout)", "full_signature": "public void poll(long timeout)", "class_method_signature": "ConsumerNetworkClient.poll(long timeout)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout, long now)", "modifiers": "public", "return": "void", "signature": "void poll(long timeout, long now)", "full_signature": "public void poll(long timeout, long now)", "class_method_signature": "ConsumerNetworkClient.poll(long timeout, long now)", "testcase": false, "constructor": false}, {"identifier": "pollNoWakeup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pollNoWakeup()", "full_signature": "public void pollNoWakeup()", "class_method_signature": "ConsumerNetworkClient.pollNoWakeup()", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(long timeout, long now, boolean executeDelayedTasks)", "modifiers": "private", "return": "void", "signature": "void poll(long timeout, long now, boolean executeDelayedTasks)", "full_signature": "private void poll(long timeout, long now, boolean executeDelayedTasks)", "class_method_signature": "ConsumerNetworkClient.poll(long timeout, long now, boolean executeDelayedTasks)", "testcase": false, "constructor": false}, {"identifier": "executeDelayedTasks", "parameters": "(long now)", "modifiers": "public", "return": "void", "signature": "void executeDelayedTasks(long now)", "full_signature": "public void executeDelayedTasks(long now)", "class_method_signature": "ConsumerNetworkClient.executeDelayedTasks(long now)", "testcase": false, "constructor": false}, {"identifier": "awaitPendingRequests", "parameters": "(Node node)", "modifiers": "public", "return": "void", "signature": "void awaitPendingRequests(Node node)", "full_signature": "public void awaitPendingRequests(Node node)", "class_method_signature": "ConsumerNetworkClient.awaitPendingRequests(Node node)", "testcase": false, "constructor": false}, {"identifier": "pendingRequestCount", "parameters": "(Node node)", "modifiers": "public", "return": "int", "signature": "int pendingRequestCount(Node node)", "full_signature": "public int pendingRequestCount(Node node)", "class_method_signature": "ConsumerNetworkClient.pendingRequestCount(Node node)", "testcase": false, "constructor": false}, {"identifier": "pendingRequestCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int pendingRequestCount()", "full_signature": "public int pendingRequestCount()", "class_method_signature": "ConsumerNetworkClient.pendingRequestCount()", "testcase": false, "constructor": false}, {"identifier": "checkDisconnects", "parameters": "(long now)", "modifiers": "private", "return": "void", "signature": "void checkDisconnects(long now)", "full_signature": "private void checkDisconnects(long now)", "class_method_signature": "ConsumerNetworkClient.checkDisconnects(long now)", "testcase": false, "constructor": false}, {"identifier": "failExpiredRequests", "parameters": "(long now)", "modifiers": "private", "return": "void", "signature": "void failExpiredRequests(long now)", "full_signature": "private void failExpiredRequests(long now)", "class_method_signature": "ConsumerNetworkClient.failExpiredRequests(long now)", "testcase": false, "constructor": false}, {"identifier": "failUnsentRequests", "parameters": "(Node node, RuntimeException e)", "modifiers": "protected", "return": "void", "signature": "void failUnsentRequests(Node node, RuntimeException e)", "full_signature": "protected void failUnsentRequests(Node node, RuntimeException e)", "class_method_signature": "ConsumerNetworkClient.failUnsentRequests(Node node, RuntimeException e)", "testcase": false, "constructor": false}, {"identifier": "trySend", "parameters": "(long now)", "modifiers": "private", "return": "boolean", "signature": "boolean trySend(long now)", "full_signature": "private boolean trySend(long now)", "class_method_signature": "ConsumerNetworkClient.trySend(long now)", "testcase": false, "constructor": false}, {"identifier": "clientPoll", "parameters": "(long timeout, long now)", "modifiers": "private", "return": "void", "signature": "void clientPoll(long timeout, long now)", "full_signature": "private void clientPoll(long timeout, long now)", "class_method_signature": "ConsumerNetworkClient.clientPoll(long timeout, long now)", "testcase": false, "constructor": false}, {"identifier": "maybeTriggerWakeup", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeTriggerWakeup()", "full_signature": "private void maybeTriggerWakeup()", "class_method_signature": "ConsumerNetworkClient.maybeTriggerWakeup()", "testcase": false, "constructor": false}, {"identifier": "disableWakeups", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disableWakeups()", "full_signature": "public void disableWakeups()", "class_method_signature": "ConsumerNetworkClient.disableWakeups()", "testcase": false, "constructor": false}, {"identifier": "enableWakeups", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enableWakeups()", "full_signature": "public void enableWakeups()", "class_method_signature": "ConsumerNetworkClient.enableWakeups()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ConsumerNetworkClient.close()", "testcase": false, "constructor": false}, {"identifier": "connectionFailed", "parameters": "(Node node)", "modifiers": "public", "return": "boolean", "signature": "boolean connectionFailed(Node node)", "full_signature": "public boolean connectionFailed(Node node)", "class_method_signature": "ConsumerNetworkClient.connectionFailed(Node node)", "testcase": false, "constructor": false}, {"identifier": "tryConnect", "parameters": "(Node node)", "modifiers": "public", "return": "void", "signature": "void tryConnect(Node node)", "full_signature": "public void tryConnect(Node node)", "class_method_signature": "ConsumerNetworkClient.tryConnect(Node node)", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.java"}, "focal_method": {"identifier": "send", "parameters": "(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "modifiers": "public", "return": "RequestFuture<ClientResponse>", "body": "public RequestFuture<ClientResponse> send(Node node,\n        ApiKeys api,\n        AbstractRequest request) {\n        long now = time.milliseconds();\n        RequestFutureCompletionHandler future = new RequestFutureCompletionHandler();\n        RequestHeader header = client.nextRequestHeader(api);\n        RequestSend send = new RequestSend(node.idString(), header, request.toStruct());\n        put(node, new ClientRequest(now, true, send, future));\n        return future;\n    }", "signature": "RequestFuture<ClientResponse> send(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "full_signature": "public RequestFuture<ClientResponse> send(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "class_method_signature": "ConsumerNetworkClient.send(Node node,\n        ApiKeys api,\n        AbstractRequest request)", "testcase": false, "constructor": false, "invocations": ["milliseconds", "nextRequestHeader", "idString", "toStruct", "put"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}