{"test_class": {"identifier": "ErrorDefinitionValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "conjure-core/src/test/java/com/palantir/conjure/defs/validator/ErrorDefinitionValidatorTest.java"}, "test_case": {"identifier": "testUniqueArgNamesValidator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUniqueArgNamesValidator() {\n        FieldDefinition safeArg1 = FieldDefinition.builder()\n                .fieldName(FieldName.of(\"fooBar\"))\n                .type(Type.primitive(PrimitiveType.STRING))\n                .build();\n        FieldDefinition unsafeArg1 = FieldDefinition.builder()\n                .fieldName(FieldName.of(\"foo-bar\"))\n                .type(Type.primitive(PrimitiveType.STRING))\n                .build();\n        ErrorDefinition definition1 = ErrorDefinition.builder()\n                .errorName(TypeName.of(\"Foo\", \"package\"))\n                .namespace(ErrorNamespace.of(\"Test\"))\n                .code(ErrorCode.INVALID_ARGUMENT)\n                .safeArgs(safeArg1)\n                .unsafeArgs(unsafeArg1)\n                .build();\n\n        assertThatThrownBy(() -> ErrorDefinitionValidator.validate(definition1))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessage(\"ErrorDefinition must not contain duplicate field names (modulo case normalization): \"\n                        + \"foo-bar vs fooBar\");\n\n        FieldDefinition safeArg2 = FieldDefinition.builder()\n                .fieldName(FieldName.of(\"foo-bar\"))\n                .type(Type.primitive(PrimitiveType.STRING))\n                .build();\n        FieldDefinition unsafeArg2 = FieldDefinition.builder()\n                .fieldName(FieldName.of(\"foo_bar\"))\n                .type(Type.primitive(PrimitiveType.STRING))\n                .build();\n        ErrorDefinition definition2 = ErrorDefinition.builder()\n                .errorName(TypeName.of(\"Foo\", \"package\"))\n                .namespace(ErrorNamespace.of(\"Test\"))\n                .code(ErrorCode.INVALID_ARGUMENT)\n                .safeArgs(safeArg2)\n                .unsafeArgs(unsafeArg2)\n                .build();\n\n        assertThatThrownBy(() -> ErrorDefinitionValidator.validate(definition2))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessage(\"ErrorDefinition must not contain duplicate field names (modulo case normalization): \"\n                        + \"foo-bar vs foo_bar\");\n    }", "signature": "void testUniqueArgNamesValidator()", "full_signature": "@Test public void testUniqueArgNamesValidator()", "class_method_signature": "ErrorDefinitionValidatorTest.testUniqueArgNamesValidator()", "testcase": true, "constructor": false, "invocations": ["build", "type", "fieldName", "builder", "of", "primitive", "build", "type", "fieldName", "builder", "of", "primitive", "build", "unsafeArgs", "safeArgs", "code", "namespace", "errorName", "builder", "of", "of", "hasMessage", "isInstanceOf", "assertThatThrownBy", "validate", "build", "type", "fieldName", "builder", "of", "primitive", "build", "type", "fieldName", "builder", "of", "primitive", "build", "unsafeArgs", "safeArgs", "code", "namespace", "errorName", "builder", "of", "of", "hasMessage", "isInstanceOf", "assertThatThrownBy", "validate"]}, "focal_class": {"identifier": "ErrorDefinitionValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final UniqueFieldNamesValidator UNIQUE_FIELD_NAMES_VALIDATOR =\n            new UniqueFieldNamesValidator(ErrorDefinition.class);", "modifier": "private static final", "type": "UniqueFieldNamesValidator", "declarator": "UNIQUE_FIELD_NAMES_VALIDATOR =\n            new UniqueFieldNamesValidator(ErrorDefinition.class)", "var_name": "UNIQUE_FIELD_NAMES_VALIDATOR"}], "methods": [{"identifier": "ErrorDefinitionValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " ErrorDefinitionValidator()", "full_signature": "private  ErrorDefinitionValidator()", "class_method_signature": "ErrorDefinitionValidator.ErrorDefinitionValidator()", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(ErrorDefinition definition)", "modifiers": "public static", "return": "void", "signature": "void validate(ErrorDefinition definition)", "full_signature": "public static void validate(ErrorDefinition definition)", "class_method_signature": "ErrorDefinitionValidator.validate(ErrorDefinition definition)", "testcase": false, "constructor": false}], "file": "conjure-core/src/main/java/com/palantir/conjure/defs/validator/ErrorDefinitionValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(ErrorDefinition definition)", "modifiers": "public static", "return": "void", "body": "public static void validate(ErrorDefinition definition) {\n        UNIQUE_FIELD_NAMES_VALIDATOR.validate(\n                Stream.concat(definition.getSafeArgs().stream(), definition.getUnsafeArgs().stream())\n                        .map(FieldDefinition::getFieldName)\n                        .collect(Collectors.toSet()));\n    }", "signature": "void validate(ErrorDefinition definition)", "full_signature": "public static void validate(ErrorDefinition definition)", "class_method_signature": "ErrorDefinitionValidator.validate(ErrorDefinition definition)", "testcase": false, "constructor": false, "invocations": ["validate", "collect", "map", "concat", "stream", "getSafeArgs", "stream", "getUnsafeArgs", "toSet"]}, "repository": {"repo_id": 134616422, "url": "https://github.com/palantir/conjure", "stars": 211, "created": "5/23/2018 7:28:43 PM +00:00", "updates": "2020-01-24T17:51:52+00:00", "fork": "False", "license": "licensed"}}