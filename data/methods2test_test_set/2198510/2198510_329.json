{"test_class": {"identifier": "TestEmbeddedAgentConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, String> properties;", "modifier": "private", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}], "file": "flume-ng-embedded-agent/src/test/java/org/apache/flume/agent/embedded/TestEmbeddedAgentConfiguration.java"}, "test_case": {"identifier": "testFullSourceType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFullSourceType() throws Exception {\n    doTestExcepted(EmbeddedAgentConfiguration.configure(\"test1\", properties));\n  }", "signature": "void testFullSourceType()", "full_signature": "@Test public void testFullSourceType()", "class_method_signature": "TestEmbeddedAgentConfiguration.testFullSourceType()", "testcase": true, "constructor": false, "invocations": ["doTestExcepted", "configure"]}, "focal_class": {"identifier": "EmbeddedAgentConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SEPERATOR = \".\";", "modifier": "public static final", "type": "String", "declarator": "SEPERATOR = \".\"", "var_name": "SEPERATOR"}, {"original_string": "private static final Joiner JOINER = Joiner.on(SEPERATOR);", "modifier": "private static final", "type": "Joiner", "declarator": "JOINER = Joiner.on(SEPERATOR)", "var_name": "JOINER"}, {"original_string": "private static final String TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}, {"original_string": "public static final String SOURCE = \"source\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE = \"source\"", "var_name": "SOURCE"}, {"original_string": "public static final String CHANNEL = \"channel\";", "modifier": "public static final", "type": "String", "declarator": "CHANNEL = \"channel\"", "var_name": "CHANNEL"}, {"original_string": "public static final String SINK_PROCESSOR = \"processor\";", "modifier": "public static final", "type": "String", "declarator": "SINK_PROCESSOR = \"processor\"", "var_name": "SINK_PROCESSOR"}, {"original_string": "public static final String SINKS = \"sinks\";", "modifier": "public static final", "type": "String", "declarator": "SINKS = \"sinks\"", "var_name": "SINKS"}, {"original_string": "public static final String SINKS_PREFIX = join(SINKS, \"\");", "modifier": "public static final", "type": "String", "declarator": "SINKS_PREFIX = join(SINKS, \"\")", "var_name": "SINKS_PREFIX"}, {"original_string": "public static final String SOURCE_TYPE = join(SOURCE, TYPE);", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TYPE = join(SOURCE, TYPE)", "var_name": "SOURCE_TYPE"}, {"original_string": "public static final String SOURCE_PREFIX = join(SOURCE, \"\");", "modifier": "public static final", "type": "String", "declarator": "SOURCE_PREFIX = join(SOURCE, \"\")", "var_name": "SOURCE_PREFIX"}, {"original_string": "public static final String CHANNEL_TYPE = join(CHANNEL, TYPE);", "modifier": "public static final", "type": "String", "declarator": "CHANNEL_TYPE = join(CHANNEL, TYPE)", "var_name": "CHANNEL_TYPE"}, {"original_string": "public static final String CHANNEL_PREFIX = join(CHANNEL, \"\");", "modifier": "public static final", "type": "String", "declarator": "CHANNEL_PREFIX = join(CHANNEL, \"\")", "var_name": "CHANNEL_PREFIX"}, {"original_string": "public static final String SINK_PROCESSOR_TYPE = join(SINK_PROCESSOR, TYPE);", "modifier": "public static final", "type": "String", "declarator": "SINK_PROCESSOR_TYPE = join(SINK_PROCESSOR, TYPE)", "var_name": "SINK_PROCESSOR_TYPE"}, {"original_string": "public static final String SINK_PROCESSOR_PREFIX = join(SINK_PROCESSOR, \"\");", "modifier": "public static final", "type": "String", "declarator": "SINK_PROCESSOR_PREFIX = join(SINK_PROCESSOR, \"\")", "var_name": "SINK_PROCESSOR_PREFIX"}, {"original_string": "public static final String SOURCE_TYPE_EMBEDDED = EmbeddedSource.class.getName();", "modifier": "public static final", "type": "String", "declarator": "SOURCE_TYPE_EMBEDDED = EmbeddedSource.class.getName()", "var_name": "SOURCE_TYPE_EMBEDDED"}, {"original_string": "private static final String SOURCE_TYPE_EMBEDDED_ALIAS = \"EMBEDDED\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_TYPE_EMBEDDED_ALIAS = \"EMBEDDED\"", "var_name": "SOURCE_TYPE_EMBEDDED_ALIAS"}, {"original_string": "public static final String CHANNEL_TYPE_MEMORY = ChannelType.MEMORY.name();", "modifier": "public static final", "type": "String", "declarator": "CHANNEL_TYPE_MEMORY = ChannelType.MEMORY.name()", "var_name": "CHANNEL_TYPE_MEMORY"}, {"original_string": "public static final String CHANNEL_TYPE_SPILLABLEMEMORY = ChannelType.SPILLABLEMEMORY.name();", "modifier": "public static final", "type": "String", "declarator": "CHANNEL_TYPE_SPILLABLEMEMORY = ChannelType.SPILLABLEMEMORY.name()", "var_name": "CHANNEL_TYPE_SPILLABLEMEMORY"}, {"original_string": "public static final String CHANNEL_TYPE_FILE = ChannelType.FILE.name();", "modifier": "public static final", "type": "String", "declarator": "CHANNEL_TYPE_FILE = ChannelType.FILE.name()", "var_name": "CHANNEL_TYPE_FILE"}, {"original_string": "public static final String SINK_TYPE_AVRO = SinkType.AVRO.name();", "modifier": "public static final", "type": "String", "declarator": "SINK_TYPE_AVRO = SinkType.AVRO.name()", "var_name": "SINK_TYPE_AVRO"}, {"original_string": "public static final String SINK_PROCESSOR_TYPE_DEFAULT = SinkProcessorType.DEFAULT.name();", "modifier": "public static final", "type": "String", "declarator": "SINK_PROCESSOR_TYPE_DEFAULT = SinkProcessorType.DEFAULT.name()", "var_name": "SINK_PROCESSOR_TYPE_DEFAULT"}, {"original_string": "public static final String SINK_PROCESSOR_TYPE_FAILOVER = SinkProcessorType.FAILOVER.name();", "modifier": "public static final", "type": "String", "declarator": "SINK_PROCESSOR_TYPE_FAILOVER = SinkProcessorType.FAILOVER.name()", "var_name": "SINK_PROCESSOR_TYPE_FAILOVER"}, {"original_string": "public static final String SINK_PROCESSOR_TYPE_LOAD_BALANCE =\n      SinkProcessorType.LOAD_BALANCE.name();", "modifier": "public static final", "type": "String", "declarator": "SINK_PROCESSOR_TYPE_LOAD_BALANCE =\n      SinkProcessorType.LOAD_BALANCE.name()", "var_name": "SINK_PROCESSOR_TYPE_LOAD_BALANCE"}, {"original_string": "private static final String[] ALLOWED_SOURCES = {\n    SOURCE_TYPE_EMBEDDED_ALIAS,\n    SOURCE_TYPE_EMBEDDED,\n  };", "modifier": "private static final", "type": "String[]", "declarator": "ALLOWED_SOURCES = {\n    SOURCE_TYPE_EMBEDDED_ALIAS,\n    SOURCE_TYPE_EMBEDDED,\n  }", "var_name": "ALLOWED_SOURCES"}, {"original_string": "private static final String[] ALLOWED_CHANNELS = {\n    CHANNEL_TYPE_MEMORY,\n    CHANNEL_TYPE_FILE\n  };", "modifier": "private static final", "type": "String[]", "declarator": "ALLOWED_CHANNELS = {\n    CHANNEL_TYPE_MEMORY,\n    CHANNEL_TYPE_FILE\n  }", "var_name": "ALLOWED_CHANNELS"}, {"original_string": "private static final String[] ALLOWED_SINKS = {\n    SINK_TYPE_AVRO\n  };", "modifier": "private static final", "type": "String[]", "declarator": "ALLOWED_SINKS = {\n    SINK_TYPE_AVRO\n  }", "var_name": "ALLOWED_SINKS"}, {"original_string": "private static final String[] ALLOWED_SINK_PROCESSORS = {\n    SINK_PROCESSOR_TYPE_DEFAULT,\n    SINK_PROCESSOR_TYPE_FAILOVER,\n    SINK_PROCESSOR_TYPE_LOAD_BALANCE\n  };", "modifier": "private static final", "type": "String[]", "declarator": "ALLOWED_SINK_PROCESSORS = {\n    SINK_PROCESSOR_TYPE_DEFAULT,\n    SINK_PROCESSOR_TYPE_FAILOVER,\n    SINK_PROCESSOR_TYPE_LOAD_BALANCE\n  }", "var_name": "ALLOWED_SINK_PROCESSORS"}, {"original_string": "private static final ImmutableList<String> DISALLOWED_SINK_NAMES =\n      ImmutableList.of(\"source\", \"channel\", \"processor\");", "modifier": "private static final", "type": "ImmutableList<String>", "declarator": "DISALLOWED_SINK_NAMES =\n      ImmutableList.of(\"source\", \"channel\", \"processor\")", "var_name": "DISALLOWED_SINK_NAMES"}], "methods": [{"identifier": "validate", "parameters": "(String name,\n      Map<String, String> properties)", "modifiers": "private static", "return": "void", "signature": "void validate(String name,\n      Map<String, String> properties)", "full_signature": "private static void validate(String name,\n      Map<String, String> properties)", "class_method_signature": "EmbeddedAgentConfiguration.validate(String name,\n      Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String name,\n      Map<String, String> properties)", "modifiers": "@InterfaceAudience.Private @InterfaceStability.Unstable static", "return": "Map<String, String>", "signature": "Map<String, String> configure(String name,\n      Map<String, String> properties)", "full_signature": "@InterfaceAudience.Private @InterfaceStability.Unstable static Map<String, String> configure(String name,\n      Map<String, String> properties)", "class_method_signature": "EmbeddedAgentConfiguration.configure(String name,\n      Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "checkAllowed", "parameters": "(String[] allowedTypes, String type)", "modifiers": "private static", "return": "void", "signature": "void checkAllowed(String[] allowedTypes, String type)", "full_signature": "private static void checkAllowed(String[] allowedTypes, String type)", "class_method_signature": "EmbeddedAgentConfiguration.checkAllowed(String[] allowedTypes, String type)", "testcase": false, "constructor": false}, {"identifier": "checkRequired", "parameters": "(Map<String, String> properties, String name)", "modifiers": "private static", "return": "void", "signature": "void checkRequired(Map<String, String> properties, String name)", "full_signature": "private static void checkRequired(Map<String, String> properties, String name)", "class_method_signature": "EmbeddedAgentConfiguration.checkRequired(Map<String, String> properties, String name)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String... parts)", "modifiers": "private static", "return": "String", "signature": "String join(String... parts)", "full_signature": "private static String join(String... parts)", "class_method_signature": "EmbeddedAgentConfiguration.join(String... parts)", "testcase": false, "constructor": false}, {"identifier": "EmbeddedAgentConfiguration", "parameters": "()", "modifiers": "private", "return": "", "signature": " EmbeddedAgentConfiguration()", "full_signature": "private  EmbeddedAgentConfiguration()", "class_method_signature": "EmbeddedAgentConfiguration.EmbeddedAgentConfiguration()", "testcase": false, "constructor": true}], "file": "flume-ng-embedded-agent/src/main/java/org/apache/flume/agent/embedded/EmbeddedAgentConfiguration.java"}, "focal_method": {"identifier": "configure", "parameters": "(String name,\n      Map<String, String> properties)", "modifiers": "@InterfaceAudience.Private @InterfaceStability.Unstable static", "return": "Map<String, String>", "body": "@InterfaceAudience.Private\n  @InterfaceStability.Unstable\n  static Map<String, String> configure(String name,\n      Map<String, String> properties) throws FlumeException {\n    validate(name, properties);\n    // we are going to modify the properties as we parse the config\n    properties = new HashMap<String, String>(properties);\n\n    if (!properties.containsKey(SOURCE_TYPE) ||\n        SOURCE_TYPE_EMBEDDED_ALIAS.equalsIgnoreCase(properties.get(SOURCE_TYPE))) {\n      properties.put(SOURCE_TYPE, SOURCE_TYPE_EMBEDDED);\n    }\n    String sinkNames = properties.remove(SINKS);\n\n    String strippedName = name.replaceAll(\"\\\\s+\",\"\");\n    String sourceName = \"source-\" + strippedName;\n    String channelName = \"channel-\" + strippedName;\n    String sinkGroupName = \"sink-group-\" + strippedName;\n\n    /*\n     * Now we are going to process the user supplied configuration\n     * and generate an agent configuration. This is only to supply\n     * a simpler client api than passing in an entire agent configuration.\n     */\n    // user supplied config -> agent configuration\n    Map<String, String> result = Maps.newHashMap();\n\n    /*\n     * First we are going to setup all the root level pointers. I.E\n     * point the agent at the components, sink group at sinks, and\n     * source at the channel.\n     */\n    // point agent at source\n    result.put(join(name, BasicConfigurationConstants.CONFIG_SOURCES),\n        sourceName);\n    // point agent at channel\n    result.put(join(name, BasicConfigurationConstants.CONFIG_CHANNELS),\n        channelName);\n    // point agent at sinks\n    result.put(join(name, BasicConfigurationConstants.CONFIG_SINKS),\n        sinkNames);\n    // points the agent at the sinkgroup\n    result.put(join(name, BasicConfigurationConstants.CONFIG_SINKGROUPS),\n        sinkGroupName);\n    // points the sinkgroup at the sinks\n    result.put(join(name, BasicConfigurationConstants.CONFIG_SINKGROUPS,\n            sinkGroupName, SINKS), sinkNames);\n    // points the source at the channel\n    result.put(join(name,\n        BasicConfigurationConstants.CONFIG_SOURCES, sourceName,\n        BasicConfigurationConstants.CONFIG_CHANNELS), channelName);\n\n    // Properties will be modified during iteration so we need a\n    // copy of the keys.\n    Set<String> userProvidedKeys = new HashSet<String>(properties.keySet());\n\n    /*\n     * Second process the sink configuration and point the sinks\n     * at the channel.\n     */\n    for (String sink :  sinkNames.split(\"\\\\s+\")) {\n      for (String key : userProvidedKeys) {\n        String value = properties.get(key);\n        if (key.startsWith(sink + SEPERATOR)) {\n          properties.remove(key);\n          result.put(join(name,\n              BasicConfigurationConstants.CONFIG_SINKS, key), value);\n        }\n      }\n      // point the sink at the channel\n      result.put(join(name,\n          BasicConfigurationConstants.CONFIG_SINKS, sink,\n          BasicConfigurationConstants.CONFIG_CHANNEL), channelName);\n    }\n    /*\n     * Third, process all remaining configuration items, prefixing them\n     * correctly and then passing them on to the agent.\n     */\n    userProvidedKeys = new HashSet<String>(properties.keySet());\n    for (String key : userProvidedKeys) {\n      String value = properties.get(key);\n      if (key.startsWith(SOURCE_PREFIX)) {\n        // users use `source' but agent needs the actual source name\n        key = key.replaceFirst(SOURCE, sourceName);\n        result.put(join(name,\n            BasicConfigurationConstants.CONFIG_SOURCES, key), value);\n      } else if (key.startsWith(CHANNEL_PREFIX)) {\n        // users use `channel' but agent needs the actual channel name\n        key = key.replaceFirst(CHANNEL, channelName);\n        result.put(join(name,\n            BasicConfigurationConstants.CONFIG_CHANNELS, key), value);\n      } else if (key.startsWith(SINK_PROCESSOR_PREFIX)) {\n        // agent.sinkgroups.sinkgroup.processor.*\n        result.put(join(name, BasicConfigurationConstants.CONFIG_SINKGROUPS,\n                sinkGroupName, key), value);\n      } else {\n        // XXX should we simply ignore this?\n        throw new FlumeException(\"Unknown configuration \" + key);\n      }\n    }\n    return result;\n  }", "signature": "Map<String, String> configure(String name,\n      Map<String, String> properties)", "full_signature": "@InterfaceAudience.Private @InterfaceStability.Unstable static Map<String, String> configure(String name,\n      Map<String, String> properties)", "class_method_signature": "EmbeddedAgentConfiguration.configure(String name,\n      Map<String, String> properties)", "testcase": false, "constructor": false, "invocations": ["validate", "containsKey", "equalsIgnoreCase", "get", "put", "remove", "replaceAll", "newHashMap", "put", "join", "put", "join", "put", "join", "put", "join", "put", "join", "put", "join", "keySet", "split", "get", "startsWith", "remove", "put", "join", "put", "join", "keySet", "get", "startsWith", "replaceFirst", "put", "join", "startsWith", "replaceFirst", "put", "join", "startsWith", "put", "join"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}