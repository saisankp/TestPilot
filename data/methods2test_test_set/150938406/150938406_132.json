{"test_class": {"identifier": "LocalKmeansFuncTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/kmeans/LocalKmeansFuncTest.java"}, "test_case": {"identifier": "kmeansSparseTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void kmeansSparseTest() {\n\t\tint len = 10;\n\t\tint k = 2;\n\t\tint size = 20;\n\t\tEuclideanDistance distance = new EuclideanDistance();\n\t\tlong[] sampleWeights = new long[len];\n\t\tFastDistanceVectorData[] samples = new FastDistanceVectorData[len];\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tsampleWeights[i] = i;\n\t\t\tsamples[i] = distance.prepareVectorData(Tuple2.of(new SparseVector(size, new int[]{i, i + 1}, new double[]{i, i}), null));\n\t\t}\n\t\tFastDistanceMatrixData initCentroid = kmeans(k, sampleWeights, samples, distance, size);\n\t\tDenseMatrix initCentroidData = initCentroid.getVectors();\n\t\tAssert.assertEquals(initCentroidData.numCols(), k);\n\t\tAssert.assertEquals(new DenseVector(initCentroidData.getColumn(0)).normL2(), 8.615, 0.001);\n\t\tAssert.assertEquals(new DenseVector(initCentroidData.getColumn(1)).normL2(), 4.128, 0.001);\n\t}", "signature": "void kmeansSparseTest()", "full_signature": "@Test public void kmeansSparseTest()", "class_method_signature": "LocalKmeansFuncTest.kmeansSparseTest()", "testcase": true, "constructor": false, "invocations": ["prepareVectorData", "of", "kmeans", "getVectors", "assertEquals", "numCols", "assertEquals", "normL2", "getColumn", "assertEquals", "normL2", "getColumn"]}, "focal_class": {"identifier": "LocalKmeansFunc", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LocalKmeansFunc.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LocalKmeansFunc.class)", "var_name": "LOG"}, {"original_string": "private static int LOCAL_MAX_ITER = 30;", "modifier": "private static", "type": "int", "declarator": "LOCAL_MAX_ITER = 30", "var_name": "LOCAL_MAX_ITER"}], "methods": [{"identifier": "kmeans", "parameters": "(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "modifiers": "static", "return": "FastDistanceMatrixData", "signature": "FastDistanceMatrixData kmeans(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "full_signature": "static FastDistanceMatrixData kmeans(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "class_method_signature": "LocalKmeansFunc.kmeans(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "testcase": false, "constructor": false}, {"identifier": "sampleInitialCentroids", "parameters": "(int k,\n                                                                       long[] sampleWeights,\n                                                                       FastDistanceVectorData[] samples,\n                                                                       FastDistance distance,\n                                                                       Random random)", "modifiers": "private static", "return": "List<FastDistanceVectorData>", "signature": "List<FastDistanceVectorData> sampleInitialCentroids(int k,\n                                                                       long[] sampleWeights,\n                                                                       FastDistanceVectorData[] samples,\n                                                                       FastDistance distance,\n                                                                       Random random)", "full_signature": "private static List<FastDistanceVectorData> sampleInitialCentroids(int k,\n                                                                       long[] sampleWeights,\n                                                                       FastDistanceVectorData[] samples,\n                                                                       FastDistance distance,\n                                                                       Random random)", "class_method_signature": "LocalKmeansFunc.sampleInitialCentroids(int k,\n                                                                       long[] sampleWeights,\n                                                                       FastDistanceVectorData[] samples,\n                                                                       FastDistance distance,\n                                                                       Random random)", "testcase": false, "constructor": false}, {"identifier": "pickWeight", "parameters": "(long[] centroidWeights, double[] costs, Random random)", "modifiers": "private static", "return": "int", "signature": "int pickWeight(long[] centroidWeights, double[] costs, Random random)", "full_signature": "private static int pickWeight(long[] centroidWeights, double[] costs, Random random)", "class_method_signature": "LocalKmeansFunc.pickWeight(long[] centroidWeights, double[] costs, Random random)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/kmeans/LocalKmeansFunc.java"}, "focal_method": {"identifier": "kmeans", "parameters": "(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "modifiers": "static", "return": "FastDistanceMatrixData", "body": "static FastDistanceMatrixData kmeans(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize) {\n\n        Random random = new Random(0);\n\n        List<FastDistanceVectorData> initCentroidsList = sampleInitialCentroids(k, sampleWeights, samples, distance,\n            random);\n        FastDistanceMatrixData initCentroids = KMeansUtil.buildCentroidsMatrix(initCentroidsList, distance, vectorSize);\n\n        boolean converge = false;\n        int iteration = 0;\n        DenseMatrix sumMatrix = new DenseMatrix(vectorSize + 1, k);\n        DenseMatrix distanceMatrix = new DenseMatrix(k, 1);\n        double[] sumMatrixData = sumMatrix.getData();\n        double[] initCentroidsData = initCentroids.getVectors().getData();\n        int[] indices = new int[samples.length];\n\n        while (!converge && iteration < LOCAL_MAX_ITER) {\n            iteration++;\n            converge = true;\n            for (int i = 0; i < samples.length; i++) {\n                int clusterId = KMeansUtil.updateSumMatrix(samples[i], sampleWeights[i], initCentroids, vectorSize,\n                    sumMatrixData, k, distance, distanceMatrix);\n                if (clusterId != indices[i]) {\n                    indices[i] = clusterId;\n                    converge = false;\n                }\n            }\n            Arrays.fill(initCentroidsData, 0.0);\n            for (int i = 0; i < k; i++) {\n                int initCentroidsStartIndex = i * vectorSize;\n                int sumMatrixStartIndex = initCentroidsStartIndex + i;\n                double weight = sumMatrixData[sumMatrixStartIndex + vectorSize];\n\n                if (weight > 0) {\n                    BLAS.axpy(vectorSize, 1.0 / weight, sumMatrixData, sumMatrixStartIndex, initCentroidsData,\n                        initCentroidsStartIndex);\n                } else {\n                    int index = random.nextInt(samples.length);\n                    MatVecOp.appendVectorToMatrix(initCentroids.getVectors(), false, i, samples[index].getVector());\n                }\n                distance.updateLabel(initCentroids);\n            }\n        }\n        if (iteration != LOCAL_MAX_ITER) {\n            LOG.info(\"Local kmeans converge with {} steps.\", iteration);\n        } else {\n            LOG.info(\"Local kmeans reach max iteration number!\");\n        }\n        return initCentroids;\n    }", "signature": "FastDistanceMatrixData kmeans(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "full_signature": "static FastDistanceMatrixData kmeans(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "class_method_signature": "LocalKmeansFunc.kmeans(int k, long[] sampleWeights, FastDistanceVectorData[] samples,\n                                         FastDistance distance, int vectorSize)", "testcase": false, "constructor": false, "invocations": ["sampleInitialCentroids", "buildCentroidsMatrix", "getData", "getData", "getVectors", "updateSumMatrix", "fill", "axpy", "nextInt", "appendVectorToMatrix", "getVectors", "getVector", "updateLabel", "info", "info"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}