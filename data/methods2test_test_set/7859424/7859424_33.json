{"test_class": {"identifier": "SimpleSearchNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleSearchNode node;", "modifier": "private", "type": "SimpleSearchNode", "declarator": "node", "var_name": "node"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}], "file": "src/edu/lclark/orego/mcts/SimpleSearchNodeTest.java"}, "test_case": {"identifier": "testIsFresh", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIsFresh() {\n\t\tassertTrue(node.isFresh(coords));\n\t\tnode.recordPlayout(1, new short[] { PASS }, 0, 1);\n\t}", "signature": "void testIsFresh()", "full_signature": "@Test public void testIsFresh()", "class_method_signature": "SimpleSearchNodeTest.testIsFresh()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isFresh", "recordPlayout"]}, "focal_class": {"identifier": "SimpleSearchNode", "superclass": "", "interfaces": "implements SearchNode", "fields": [{"original_string": "private static final int INITIAL_PASS_RUNS = 10;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_PASS_RUNS = 10", "var_name": "INITIAL_PASS_RUNS"}, {"original_string": "private boolean biasUpdated;", "modifier": "private", "type": "boolean", "declarator": "biasUpdated", "var_name": "biasUpdated"}, {"original_string": "private ListNode<SearchNode> children;", "modifier": "private", "type": "ListNode<SearchNode>", "declarator": "children", "var_name": "children"}, {"original_string": "private long fancyHash;", "modifier": "private", "type": "long", "declarator": "fancyHash", "var_name": "fancyHash"}, {"original_string": "private final BitVector hasChild;", "modifier": "private final", "type": "BitVector", "declarator": "hasChild", "var_name": "hasChild"}, {"original_string": "private final int[] runs;", "modifier": "private final", "type": "int[]", "declarator": "runs", "var_name": "runs"}, {"original_string": "private int totalRuns;", "modifier": "private", "type": "int", "declarator": "totalRuns", "var_name": "totalRuns"}, {"original_string": "private short winningMove;", "modifier": "private", "type": "short", "declarator": "winningMove", "var_name": "winningMove"}, {"original_string": "private final float[] winRates;", "modifier": "private final", "type": "float[]", "declarator": "winRates", "var_name": "winRates"}], "methods": [{"identifier": "SimpleSearchNode", "parameters": "(CoordinateSystem coords)", "modifiers": "public", "return": "", "signature": " SimpleSearchNode(CoordinateSystem coords)", "full_signature": "public  SimpleSearchNode(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.SimpleSearchNode(CoordinateSystem coords)", "testcase": false, "constructor": true}, {"identifier": "bestWinCountReport", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "String", "signature": "String bestWinCountReport(CoordinateSystem coords)", "full_signature": "@Override public String bestWinCountReport(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.bestWinCountReport(CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "bestWinRate", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "short", "signature": "short bestWinRate(CoordinateSystem coords)", "full_signature": "@Override public short bestWinRate(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.bestWinRate(CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "biasUpdated", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean biasUpdated()", "full_signature": "@Override public boolean biasUpdated()", "class_method_signature": "SimpleSearchNode.biasUpdated()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(@SuppressWarnings(\"hiding\") long fancyHash,\n\t\t\tCoordinateSystem coords)", "modifiers": "@Override public", "return": "void", "signature": "void clear(@SuppressWarnings(\"hiding\") long fancyHash,\n\t\t\tCoordinateSystem coords)", "full_signature": "@Override public void clear(@SuppressWarnings(\"hiding\") long fancyHash,\n\t\t\tCoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.clear(@SuppressWarnings(\"hiding\") long fancyHash,\n\t\t\tCoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "deepToString", "parameters": "(Board board, TranspositionTable table,\n\t\t\tint maxDepth)", "modifiers": "@Override public", "return": "String", "signature": "String deepToString(Board board, TranspositionTable table,\n\t\t\tint maxDepth)", "full_signature": "@Override public String deepToString(Board board, TranspositionTable table,\n\t\t\tint maxDepth)", "class_method_signature": "SimpleSearchNode.deepToString(Board board, TranspositionTable table,\n\t\t\tint maxDepth)", "testcase": false, "constructor": false}, {"identifier": "deepToString", "parameters": "(Board board, TranspositionTable table, int maxDepth,\n\t\t\tint depth)", "modifiers": "", "return": "String", "signature": "String deepToString(Board board, TranspositionTable table, int maxDepth,\n\t\t\tint depth)", "full_signature": " String deepToString(Board board, TranspositionTable table, int maxDepth,\n\t\t\tint depth)", "class_method_signature": "SimpleSearchNode.deepToString(Board board, TranspositionTable table, int maxDepth,\n\t\t\tint depth)", "testcase": false, "constructor": false}, {"identifier": "exclude", "parameters": "(short p)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void exclude(short p)", "full_signature": "@Override public synchronized void exclude(short p)", "class_method_signature": "SimpleSearchNode.exclude(short p)", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void free()", "full_signature": "@Override public void free()", "class_method_signature": "SimpleSearchNode.free()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "ListNode<SearchNode>", "signature": "ListNode<SearchNode> getChildren()", "full_signature": "@Override public ListNode<SearchNode> getChildren()", "class_method_signature": "SimpleSearchNode.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getFancyHash", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getFancyHash()", "full_signature": "@Override public long getFancyHash()", "class_method_signature": "SimpleSearchNode.getFancyHash()", "testcase": false, "constructor": false}, {"identifier": "getMoveWithMostWins", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "short", "signature": "short getMoveWithMostWins(CoordinateSystem coords)", "full_signature": "@Override public short getMoveWithMostWins(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.getMoveWithMostWins(CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "getRuns", "parameters": "(short p)", "modifiers": "@Override public", "return": "int", "signature": "int getRuns(short p)", "full_signature": "@Override public int getRuns(short p)", "class_method_signature": "SimpleSearchNode.getRuns(short p)", "testcase": false, "constructor": false}, {"identifier": "getTotalRuns", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTotalRuns()", "full_signature": "@Override public int getTotalRuns()", "class_method_signature": "SimpleSearchNode.getTotalRuns()", "testcase": false, "constructor": false}, {"identifier": "getWinningMove", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short getWinningMove()", "full_signature": "@Override public short getWinningMove()", "class_method_signature": "SimpleSearchNode.getWinningMove()", "testcase": false, "constructor": false}, {"identifier": "getWinRate", "parameters": "(short p)", "modifiers": "@Override public", "return": "float", "signature": "float getWinRate(short p)", "full_signature": "@Override public float getWinRate(short p)", "class_method_signature": "SimpleSearchNode.getWinRate(short p)", "testcase": false, "constructor": false}, {"identifier": "getWins", "parameters": "(short p)", "modifiers": "@Override public", "return": "float", "signature": "float getWins(short p)", "full_signature": "@Override public float getWins(short p)", "class_method_signature": "SimpleSearchNode.getWins(short p)", "testcase": false, "constructor": false}, {"identifier": "hasChild", "parameters": "(short p)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChild(short p)", "full_signature": "@Override public boolean hasChild(short p)", "class_method_signature": "SimpleSearchNode.hasChild(short p)", "testcase": false, "constructor": false}, {"identifier": "isFresh", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isFresh(CoordinateSystem coords)", "full_signature": "@Override public boolean isFresh(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.isFresh(CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "isInUse", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInUse()", "full_signature": "@Override public boolean isInUse()", "class_method_signature": "SimpleSearchNode.isInUse()", "testcase": false, "constructor": false}, {"identifier": "isMarked", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMarked()", "full_signature": "@Override public boolean isMarked()", "class_method_signature": "SimpleSearchNode.isMarked()", "testcase": false, "constructor": false}, {"identifier": "overallWinRate", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "float", "signature": "float overallWinRate(CoordinateSystem coords)", "full_signature": "@Override public float overallWinRate(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.overallWinRate(CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "recordPlayout", "parameters": "(float winProportion, McRunnable runnable, int t)", "modifiers": "@Override public", "return": "void", "signature": "void recordPlayout(float winProportion, McRunnable runnable, int t)", "full_signature": "@Override public void recordPlayout(float winProportion, McRunnable runnable, int t)", "class_method_signature": "SimpleSearchNode.recordPlayout(float winProportion, McRunnable runnable, int t)", "testcase": false, "constructor": false}, {"identifier": "recordPlayout", "parameters": "(float winProportion, short[] moves, int t, int turn)", "modifiers": "", "return": "void", "signature": "void recordPlayout(float winProportion, short[] moves, int t, int turn)", "full_signature": " void recordPlayout(float winProportion, short[] moves, int t, int turn)", "class_method_signature": "SimpleSearchNode.recordPlayout(float winProportion, short[] moves, int t, int turn)", "testcase": false, "constructor": false}, {"identifier": "setBiasUpdated", "parameters": "(boolean value)", "modifiers": "@Override public", "return": "void", "signature": "void setBiasUpdated(boolean value)", "full_signature": "@Override public void setBiasUpdated(boolean value)", "class_method_signature": "SimpleSearchNode.setBiasUpdated(boolean value)", "testcase": false, "constructor": false}, {"identifier": "setChildren", "parameters": "(ListNode<SearchNode> children)", "modifiers": "@Override public", "return": "void", "signature": "void setChildren(ListNode<SearchNode> children)", "full_signature": "@Override public void setChildren(ListNode<SearchNode> children)", "class_method_signature": "SimpleSearchNode.setChildren(ListNode<SearchNode> children)", "testcase": false, "constructor": false}, {"identifier": "setHasChild", "parameters": "(short p)", "modifiers": "@Override public", "return": "void", "signature": "void setHasChild(short p)", "full_signature": "@Override public void setHasChild(short p)", "class_method_signature": "SimpleSearchNode.setHasChild(short p)", "testcase": false, "constructor": false}, {"identifier": "setMarked", "parameters": "(boolean marked)", "modifiers": "@Override public", "return": "void", "signature": "void setMarked(boolean marked)", "full_signature": "@Override public void setMarked(boolean marked)", "class_method_signature": "SimpleSearchNode.setMarked(boolean marked)", "testcase": false, "constructor": false}, {"identifier": "setWinningMove", "parameters": "(short move)", "modifiers": "@Override public", "return": "void", "signature": "void setWinningMove(short move)", "full_signature": "@Override public void setWinningMove(short move)", "class_method_signature": "SimpleSearchNode.setWinningMove(short move)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "String", "signature": "String toString(CoordinateSystem coords)", "full_signature": "@Override public String toString(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.toString(CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(short p, CoordinateSystem coords)", "modifiers": "@SuppressWarnings(\"boxing\")", "return": "String", "signature": "String toString(short p, CoordinateSystem coords)", "full_signature": "@SuppressWarnings(\"boxing\") String toString(short p, CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.toString(short p, CoordinateSystem coords)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(short p, int n, float wins)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void update(short p, int n, float wins)", "full_signature": "@Override public synchronized void update(short p, int n, float wins)", "class_method_signature": "SimpleSearchNode.update(short p, int n, float wins)", "testcase": false, "constructor": false}, {"identifier": "updateBias", "parameters": "(McRunnable runnable)", "modifiers": "@Override public", "return": "void", "signature": "void updateBias(McRunnable runnable)", "full_signature": "@Override public void updateBias(McRunnable runnable)", "class_method_signature": "SimpleSearchNode.updateBias(McRunnable runnable)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/mcts/SimpleSearchNode.java"}, "focal_method": {"identifier": "isFresh", "parameters": "(CoordinateSystem coords)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean isFresh(CoordinateSystem coords) {\n\t\treturn totalRuns == 2 * coords.getArea() + INITIAL_PASS_RUNS;\n\t}", "signature": "boolean isFresh(CoordinateSystem coords)", "full_signature": "@Override public boolean isFresh(CoordinateSystem coords)", "class_method_signature": "SimpleSearchNode.isFresh(CoordinateSystem coords)", "testcase": false, "constructor": false, "invocations": ["getArea"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}