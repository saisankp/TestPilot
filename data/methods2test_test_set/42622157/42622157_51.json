{"test_class": {"identifier": "SubstitutionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String GRANDFATHER = \"grandfather\";", "modifier": "private final static", "type": "String", "declarator": "GRANDFATHER = \"grandfather\"", "var_name": "GRANDFATHER"}, {"original_string": "private final static String PARENT = \"parent\";", "modifier": "private final static", "type": "String", "declarator": "PARENT = \"parent\"", "var_name": "PARENT"}, {"original_string": "private final static String MOTHER = \"mother\";", "modifier": "private final static", "type": "String", "declarator": "MOTHER = \"mother\"", "var_name": "MOTHER"}, {"original_string": "private final static String AUNT = \"aunt\";", "modifier": "private final static", "type": "String", "declarator": "AUNT = \"aunt\"", "var_name": "AUNT"}, {"original_string": "private final static String CHILD = \"child\";", "modifier": "private final static", "type": "String", "declarator": "CHILD = \"child\"", "var_name": "CHILD"}, {"original_string": "private final static String GRANDCHILD = \"grandchild\";", "modifier": "private final static", "type": "String", "declarator": "GRANDCHILD = \"grandchild\"", "var_name": "GRANDCHILD"}, {"original_string": "private final static String STRANGER = \"stranger\";", "modifier": "private final static", "type": "String", "declarator": "STRANGER = \"stranger\"", "var_name": "STRANGER"}, {"original_string": "private static Map<QName, TNodeType> nodeTypes;", "modifier": "private static", "type": "Map<QName, TNodeType>", "declarator": "nodeTypes", "var_name": "nodeTypes"}, {"original_string": "private static QName grandFather = new QName(\"https://example.org/tosca/substiution\", GRANDFATHER);", "modifier": "private static", "type": "QName", "declarator": "grandFather = new QName(\"https://example.org/tosca/substiution\", GRANDFATHER)", "var_name": "grandFather"}, {"original_string": "private static QName parent = new QName(\"https://example.org/tosca/substiution\", PARENT);", "modifier": "private static", "type": "QName", "declarator": "parent = new QName(\"https://example.org/tosca/substiution\", PARENT)", "var_name": "parent"}, {"original_string": "private static QName child = new QName(\"https://example.org/tosca/substiution\", CHILD);", "modifier": "private static", "type": "QName", "declarator": "child = new QName(\"https://example.org/tosca/substiution\", CHILD)", "var_name": "child"}, {"original_string": "private static QName grandChild = new QName(\"https://example.org/tosca/substiution\", GRANDCHILD);", "modifier": "private static", "type": "QName", "declarator": "grandChild = new QName(\"https://example.org/tosca/substiution\", GRANDCHILD)", "var_name": "grandChild"}, {"original_string": "private static QName mother = new QName(\"https://example.org/tosca/substiution\", MOTHER);", "modifier": "private static", "type": "QName", "declarator": "mother = new QName(\"https://example.org/tosca/substiution\", MOTHER)", "var_name": "mother"}, {"original_string": "private static QName aunt = new QName(\"https://my.example.org/tosca/substiution\", AUNT);", "modifier": "private static", "type": "QName", "declarator": "aunt = new QName(\"https://my.example.org/tosca/substiution\", AUNT)", "var_name": "aunt"}, {"original_string": "private static QName stranger = new QName(\"ftp://example.org/stranger\", STRANGER);", "modifier": "private static", "type": "QName", "declarator": "stranger = new QName(\"ftp://example.org/stranger\", STRANGER)", "var_name": "stranger"}], "file": "org.eclipse.winery.model.adaptation/src/test/java/org/eclipse/winery/model/adaptation/substitution/SubstitutionUtilsTest.java"}, "test_case": {"identifier": "getSubstitutableTemplateMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSubstitutableTemplateMap() {\n        List<TNodeTemplate> templates = Arrays.asList(\n            new TNodeTemplate.Builder(\"id0\", stranger).build(),\n            new TNodeTemplate.Builder(\"id1\", parent).build(),\n            new TNodeTemplate.Builder(\"id2\", grandFather).build(),\n            new TNodeTemplate.Builder(\"id3\", aunt).build()\n        );\n\n        Map<TNodeTemplate, List<Subtypes<TNodeType>>> substitutableTemplates = SubstitutionUtils.collectSubstitutableTemplates(templates, nodeTypes);\n\n        assertEquals(2, substitutableTemplates.size());\n        assertTrue(substitutableTemplates.entrySet()\n            .removeIf(entry -> grandFather.equals(entry.getKey().getTypeAsQName()))\n        );\n        assertTrue(substitutableTemplates.entrySet()\n            .removeIf(entry -> parent.equals(entry.getKey().getType()))\n        );\n    }", "signature": "void getSubstitutableTemplateMap()", "full_signature": "@Test public void getSubstitutableTemplateMap()", "class_method_signature": "SubstitutionUtilsTest.getSubstitutableTemplateMap()", "testcase": true, "constructor": false, "invocations": ["asList", "build", "build", "build", "build", "collectSubstitutableTemplates", "assertEquals", "size", "assertTrue", "removeIf", "entrySet", "equals", "getTypeAsQName", "getKey", "assertTrue", "removeIf", "entrySet", "equals", "getType", "getKey"]}, "focal_class": {"identifier": "SubstitutionUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "collectSubstitutableTemplates", "parameters": "(List<R> templates, Map<QName, T> types)", "modifiers": "public static", "return": "Map<R, List<Subtypes<T>>>", "signature": "Map<R, List<Subtypes<T>>> collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "full_signature": "public static Map<R, List<Subtypes<T>>> collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "class_method_signature": "SubstitutionUtils.collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "testcase": false, "constructor": false}, {"identifier": "collectTypeHierarchy", "parameters": "(Map<QName, T> types, QName parent)", "modifiers": "public static", "return": "Optional<List<Subtypes<T>>>", "signature": "Optional<List<Subtypes<T>>> collectTypeHierarchy(Map<QName, T> types, QName parent)", "full_signature": "public static Optional<List<Subtypes<T>>> collectTypeHierarchy(Map<QName, T> types, QName parent)", "class_method_signature": "SubstitutionUtils.collectTypeHierarchy(Map<QName, T> types, QName parent)", "testcase": false, "constructor": false}, {"identifier": "containsPatterns", "parameters": "(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsPatterns(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "full_signature": "public static boolean containsPatterns(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "class_method_signature": "SubstitutionUtils.containsPatterns(List<TNodeTemplate> topologyNodes, Map<QName, TNodeType> nodeTypes)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.model.adaptation/src/main/java/org/eclipse/winery/model/adaptation/substitution/SubstitutionUtils.java"}, "focal_method": {"identifier": "collectSubstitutableTemplates", "parameters": "(List<R> templates, Map<QName, T> types)", "modifiers": "public static", "return": "Map<R, List<Subtypes<T>>>", "body": "public static <R extends HasType, T extends HasInheritance> Map<R, List<Subtypes<T>>> collectSubstitutableTemplates(List<R> templates, Map<QName, T> types) {\n        Map<R, List<Subtypes<T>>> substitutableTypes = new HashMap<>();\n\n        templates.forEach(tNodeTemplate -> {\n            QName nodeTemplateType = tNodeTemplate.getTypeAsQName();\n            collectTypeHierarchy(types, nodeTemplateType)\n                .ifPresent(tNodeTypeSubtypes ->\n                    substitutableTypes.put(tNodeTemplate, tNodeTypeSubtypes)\n                );\n        });\n\n        return substitutableTypes;\n    }", "signature": "Map<R, List<Subtypes<T>>> collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "full_signature": "public static Map<R, List<Subtypes<T>>> collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "class_method_signature": "SubstitutionUtils.collectSubstitutableTemplates(List<R> templates, Map<QName, T> types)", "testcase": false, "constructor": false, "invocations": ["forEach", "getTypeAsQName", "ifPresent", "collectTypeHierarchy", "put"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}