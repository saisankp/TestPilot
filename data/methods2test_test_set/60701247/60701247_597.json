{"test_class": {"identifier": "SelectedPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable-ui/testSrc/com/android/tools/idea/observable/ui/SelectedPropertyTest.java"}, "test_case": {"identifier": "testSelectedProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSelectedProperty() {\n    JCheckBox checkbox = new JCheckBox();\n    checkbox.setSelected(true);\n\n    SelectedProperty selectedProperty = new SelectedProperty(checkbox);\n    CountListener listener = new CountListener();\n    selectedProperty.addListener(listener);\n\n    assertThat(selectedProperty.get()).isTrue();\n    assertThat(listener.getCount()).isEqualTo(0);\n\n    checkbox.setSelected(false);\n    assertThat(selectedProperty.get()).isFalse();\n    assertThat(listener.getCount()).isEqualTo(1);\n\n    selectedProperty.set(true);\n    assertThat(checkbox.isSelected()).isTrue();\n    assertThat(listener.getCount()).isEqualTo(2);\n  }", "signature": "void testSelectedProperty()", "full_signature": "@Test public void testSelectedProperty()", "class_method_signature": "SelectedPropertyTest.testSelectedProperty()", "testcase": true, "constructor": false, "invocations": ["setSelected", "addListener", "isTrue", "assertThat", "get", "isEqualTo", "assertThat", "getCount", "setSelected", "isFalse", "assertThat", "get", "isEqualTo", "assertThat", "getCount", "set", "isTrue", "assertThat", "isSelected", "isEqualTo", "assertThat", "getCount"]}, "focal_class": {"identifier": "SelectedProperty", "superclass": "extends BoolProperty", "interfaces": "implements ItemListener", "fields": [{"original_string": "@NotNull private final AbstractButton myButton;", "modifier": "@NotNull private final", "type": "AbstractButton", "declarator": "myButton", "var_name": "myButton"}], "methods": [{"identifier": "SelectedProperty", "parameters": "(@NotNull AbstractButton button)", "modifiers": "public", "return": "", "signature": " SelectedProperty(@NotNull AbstractButton button)", "full_signature": "public  SelectedProperty(@NotNull AbstractButton button)", "class_method_signature": "SelectedProperty.SelectedProperty(@NotNull AbstractButton button)", "testcase": false, "constructor": true}, {"identifier": "itemStateChanged", "parameters": "(ItemEvent itemEvent)", "modifiers": "@Override public", "return": "void", "signature": "void itemStateChanged(ItemEvent itemEvent)", "full_signature": "@Override public void itemStateChanged(ItemEvent itemEvent)", "class_method_signature": "SelectedProperty.itemStateChanged(ItemEvent itemEvent)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Boolean", "signature": "Boolean get()", "full_signature": "@NotNull @Override public Boolean get()", "class_method_signature": "SelectedProperty.get()", "testcase": false, "constructor": false}, {"identifier": "setDirectly", "parameters": "(@NotNull Boolean value)", "modifiers": "@Override protected", "return": "void", "signature": "void setDirectly(@NotNull Boolean value)", "full_signature": "@Override protected void setDirectly(@NotNull Boolean value)", "class_method_signature": "SelectedProperty.setDirectly(@NotNull Boolean value)", "testcase": false, "constructor": false}], "file": "observable-ui/src/com/android/tools/idea/observable/ui/SelectedProperty.java"}, "focal_method": {"identifier": "SelectedProperty", "parameters": "(@NotNull AbstractButton button)", "modifiers": "public", "return": "", "body": "public SelectedProperty(@NotNull AbstractButton button) {\n    myButton = button;\n    myButton.addItemListener(this);\n  }", "signature": " SelectedProperty(@NotNull AbstractButton button)", "full_signature": "public  SelectedProperty(@NotNull AbstractButton button)", "class_method_signature": "SelectedProperty.SelectedProperty(@NotNull AbstractButton button)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}