{"test_class": {"identifier": "QuarkCubeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public Fixture fixture = new Fixture();", "modifier": "public", "type": "Fixture", "declarator": "fixture = new Fixture()", "var_name": "fixture"}], "file": "optimizer/src/test/java/com/qubole/quark/planner/QuarkCubeTest.java"}, "test_case": {"identifier": "computeHeirDimensionSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void computeHeirDimensionSet() {\n    Set<Set<QuarkCube.Dimension>> dimSet = QuarkCube.getDimensionSets(\n        fixture.getHeirDim());\n    assertEquals(dimSet.size(), 4);\n  }", "signature": "void computeHeirDimensionSet()", "full_signature": "@Test public void computeHeirDimensionSet()", "class_method_signature": "QuarkCubeTest.computeHeirDimensionSet()", "testcase": true, "constructor": false, "invocations": ["getDimensionSets", "getHeirDim", "assertEquals", "size"]}, "focal_class": {"identifier": "QuarkCube", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final String name;", "modifier": "public final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "public final Object sql;", "modifier": "public final", "type": "Object", "declarator": "sql", "var_name": "sql"}, {"original_string": "public final List<Measure> measures;", "modifier": "public final", "type": "List<Measure>", "declarator": "measures", "var_name": "measures"}, {"original_string": "public final Set<Dimension> dimensions;", "modifier": "public final", "type": "Set<Dimension>", "declarator": "dimensions", "var_name": "dimensions"}, {"original_string": "public final List<String> tableName;", "modifier": "public final", "type": "List<String>", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "public final List<String> alias;", "modifier": "public final", "type": "List<String>", "declarator": "alias", "var_name": "alias"}, {"original_string": "public final String groupingColumn;", "modifier": "public final", "type": "String", "declarator": "groupingColumn", "var_name": "groupingColumn"}, {"original_string": "public final Set<Set<Dimension>> groups;", "modifier": "public final", "type": "Set<Set<Dimension>>", "declarator": "groups", "var_name": "groups"}], "methods": [{"identifier": "QuarkCube", "parameters": "(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<String> tableName, String groupingColumn)", "modifiers": "public", "return": "", "signature": " QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<String> tableName, String groupingColumn)", "full_signature": "public  QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<String> tableName, String groupingColumn)", "class_method_signature": "QuarkCube.QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<String> tableName, String groupingColumn)", "testcase": false, "constructor": true}, {"identifier": "QuarkCube", "parameters": "(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn)", "modifiers": "public", "return": "", "signature": " QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn)", "full_signature": "public  QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn)", "class_method_signature": "QuarkCube.QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn)", "testcase": false, "constructor": true}, {"identifier": "QuarkCube", "parameters": "(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn,\n                   List<String> alias)", "modifiers": "public", "return": "", "signature": " QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn,\n                   List<String> alias)", "full_signature": "public  QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn,\n                   List<String> alias)", "class_method_signature": "QuarkCube.QuarkCube(String name, Object sql, List<Measure> measures,\n                   List<Dimension> dimensionList,\n                   List<Group> groupList,\n                   List<String> tableName, String groupingColumn,\n                   List<String> alias)", "testcase": false, "constructor": true}, {"identifier": "buildGroups", "parameters": "(List<Dimension> dimensions,\n                           List<Group> groupList,\n                           Map<String, Set<Dimension>> groupToDimensionMap,\n                           Map<String, Dimension> idToDimensionMap)", "modifiers": "private", "return": "void", "signature": "void buildGroups(List<Dimension> dimensions,\n                           List<Group> groupList,\n                           Map<String, Set<Dimension>> groupToDimensionMap,\n                           Map<String, Dimension> idToDimensionMap)", "full_signature": "private void buildGroups(List<Dimension> dimensions,\n                           List<Group> groupList,\n                           Map<String, Set<Dimension>> groupToDimensionMap,\n                           Map<String, Dimension> idToDimensionMap)", "class_method_signature": "QuarkCube.buildGroups(List<Dimension> dimensions,\n                           List<Group> groupList,\n                           Map<String, Set<Dimension>> groupToDimensionMap,\n                           Map<String, Dimension> idToDimensionMap)", "testcase": false, "constructor": false}, {"identifier": "addDimension", "parameters": "(Map<String, Set<QuarkCube.Dimension>> groupToDimensionMap,\n                            List<Group> groupList,\n                            Map<String, QuarkCube.Dimension> idToDimensionMap,\n                            Dimension dimension)", "modifiers": "private", "return": "void", "signature": "void addDimension(Map<String, Set<QuarkCube.Dimension>> groupToDimensionMap,\n                            List<Group> groupList,\n                            Map<String, QuarkCube.Dimension> idToDimensionMap,\n                            Dimension dimension)", "full_signature": "private void addDimension(Map<String, Set<QuarkCube.Dimension>> groupToDimensionMap,\n                            List<Group> groupList,\n                            Map<String, QuarkCube.Dimension> idToDimensionMap,\n                            Dimension dimension)", "class_method_signature": "QuarkCube.addDimension(Map<String, Set<QuarkCube.Dimension>> groupToDimensionMap,\n                            List<Group> groupList,\n                            Map<String, QuarkCube.Dimension> idToDimensionMap,\n                            Dimension dimension)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(CalciteSchema calciteSchema, QuarkTable quarkTable)", "modifiers": "public", "return": "Lattice", "signature": "Lattice build(CalciteSchema calciteSchema, QuarkTable quarkTable)", "full_signature": "public Lattice build(CalciteSchema calciteSchema, QuarkTable quarkTable)", "class_method_signature": "QuarkCube.build(CalciteSchema calciteSchema, QuarkTable quarkTable)", "testcase": false, "constructor": false}, {"identifier": "validateCubeLatticeFilter", "parameters": "(Lattice.Builder latticeBuilder)", "modifiers": "private", "return": "void", "signature": "void validateCubeLatticeFilter(Lattice.Builder latticeBuilder)", "full_signature": "private void validateCubeLatticeFilter(Lattice.Builder latticeBuilder)", "class_method_signature": "QuarkCube.validateCubeLatticeFilter(Lattice.Builder latticeBuilder)", "testcase": false, "constructor": false}, {"identifier": "getDimensionSets", "parameters": "(Set<Dimension> dimensions)", "modifiers": "public static", "return": "Set<Set<Dimension>>", "signature": "Set<Set<Dimension>> getDimensionSets(Set<Dimension> dimensions)", "full_signature": "public static Set<Set<Dimension>> getDimensionSets(Set<Dimension> dimensions)", "class_method_signature": "QuarkCube.getDimensionSets(Set<Dimension> dimensions)", "testcase": false, "constructor": false}, {"identifier": "getHierarichalSet", "parameters": "(Dimension d,\n      AtomicBoolean isChildMandatory)", "modifiers": "private static", "return": "Set<Set<Dimension>>", "signature": "Set<Set<Dimension>> getHierarichalSet(Dimension d,\n      AtomicBoolean isChildMandatory)", "full_signature": "private static Set<Set<Dimension>> getHierarichalSet(Dimension d,\n      AtomicBoolean isChildMandatory)", "class_method_signature": "QuarkCube.getHierarichalSet(Dimension d,\n      AtomicBoolean isChildMandatory)", "testcase": false, "constructor": false}, {"identifier": "toUpperCase", "parameters": "(List<String> stringList)", "modifiers": "private", "return": "ImmutableList<String>", "signature": "ImmutableList<String> toUpperCase(List<String> stringList)", "full_signature": "private ImmutableList<String> toUpperCase(List<String> stringList)", "class_method_signature": "QuarkCube.toUpperCase(List<String> stringList)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object o)", "modifiers": "static", "return": "String", "signature": "String toString(Object o)", "full_signature": "static String toString(Object o)", "class_method_signature": "QuarkCube.toString(Object o)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(List list)", "modifiers": "private static", "return": "String", "signature": "String concatenate(List list)", "full_signature": "private static String concatenate(List list)", "class_method_signature": "QuarkCube.concatenate(List list)", "testcase": false, "constructor": false}, {"identifier": "cartesian", "parameters": "(List<Set<T>> list)", "modifiers": "public static", "return": "Set<Set<E>>", "signature": "Set<Set<E>> cartesian(List<Set<T>> list)", "full_signature": "public static Set<Set<E>> cartesian(List<Set<T>> list)", "class_method_signature": "QuarkCube.cartesian(List<Set<T>> list)", "testcase": false, "constructor": false}], "file": "optimizer/src/main/java/com/qubole/quark/planner/QuarkCube.java"}, "focal_method": {"identifier": "getDimensionSets", "parameters": "(Set<Dimension> dimensions)", "modifiers": "public static", "return": "Set<Set<Dimension>>", "body": "public static Set<Set<Dimension>> getDimensionSets(Set<Dimension> dimensions) {\n    Set<Set<Dimension>> result = Sets.newHashSet();\n    result.add(new HashSet<>());\n    for (Dimension d : dimensions) {\n      // traverse only the top level dimension i.e., with no parents\n      if (d.parentDimension == null) {\n        result = cartesian(ImmutableList.of(result,\n            getHierarichalSet(d, new AtomicBoolean(false))));\n      }\n    }\n    return result;\n  }", "signature": "Set<Set<Dimension>> getDimensionSets(Set<Dimension> dimensions)", "full_signature": "public static Set<Set<Dimension>> getDimensionSets(Set<Dimension> dimensions)", "class_method_signature": "QuarkCube.getDimensionSets(Set<Dimension> dimensions)", "testcase": false, "constructor": false, "invocations": ["newHashSet", "add", "cartesian", "of", "getHierarichalSet"]}, "repository": {"repo_id": 48161197, "url": "https://github.com/qubole/quark", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 81, "size": 574, "license": "licensed"}}