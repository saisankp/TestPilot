{"test_class": {"identifier": "RangeParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "http/src/test/java/ro/polak/http/protocol/parser/impl/RangeParserTest.java"}, "test_case": {"identifier": "shouldParseMultipleValuesSpaceSeparated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseMultipleValuesSpaceSeparated() throws MalformedInputException {\n        RangeParser rangeParser = new RangeParser();\n        List<Range> rageList = rangeParser.parse(\"bytes=1-100, 200-301\");\n        assertThat(rageList.size(), is(2));\n        assertThat(rageList.get(0).getFrom(), is(1L));\n        assertThat(rageList.get(0).getTo(), is(100L));\n        assertThat(rageList.get(1).getFrom(), is(200L));\n        assertThat(rageList.get(1).getTo(), is(301L));\n    }", "signature": "void shouldParseMultipleValuesSpaceSeparated()", "full_signature": "@Test public void shouldParseMultipleValuesSpaceSeparated()", "class_method_signature": "RangeParserTest.shouldParseMultipleValuesSpaceSeparated()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "size", "is", "assertThat", "getFrom", "get", "is", "assertThat", "getTo", "get", "is", "assertThat", "getFrom", "get", "is", "assertThat", "getTo", "get", "is"]}, "focal_class": {"identifier": "RangeParser", "superclass": "", "interfaces": "implements Parser<List<Range>>", "fields": [{"original_string": "private static final String START_WORD = \"bytes=\";", "modifier": "private static final", "type": "String", "declarator": "START_WORD = \"bytes=\"", "var_name": "START_WORD"}, {"original_string": "private static final String RANGES_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "RANGES_SEPARATOR = \",\"", "var_name": "RANGES_SEPARATOR"}, {"original_string": "private static final String RANGE_SEPARATOR = \"-\";", "modifier": "private static final", "type": "String", "declarator": "RANGE_SEPARATOR = \"-\"", "var_name": "RANGE_SEPARATOR"}], "methods": [{"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "List<Range>", "signature": "List<Range> parse(final String input)", "full_signature": "@Override public List<Range> parse(final String input)", "class_method_signature": "RangeParser.parse(final String input)", "testcase": false, "constructor": false}, {"identifier": "getRange", "parameters": "(final String[] values)", "modifiers": "private", "return": "Range", "signature": "Range getRange(final String[] values)", "full_signature": "private Range getRange(final String[] values)", "class_method_signature": "RangeParser.getRange(final String[] values)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/parser/impl/RangeParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String input)", "modifiers": "@Override public", "return": "List<Range>", "body": "@Override\n    public List<Range> parse(final String input) throws MalformedInputException {\n        List<Range> rangeList = new ArrayList<>();\n\n        String inputNormalized = input.toLowerCase().trim();\n        if (!inputNormalized.startsWith(START_WORD)) {\n            throw new MalformedInputException(\"Header value must start with bytes=\");\n        }\n\n        String[] rangesString = inputNormalized.substring(START_WORD.length()).split(RANGES_SEPARATOR);\n        for (String rangeString : rangesString) {\n            if (rangeString.indexOf(RANGE_SEPARATOR) == -1) {\n                throw new MalformedInputException(\"Invalid range value \" + rangeString);\n            }\n\n            String[] values = rangeString.split(RANGE_SEPARATOR);\n\n            if (values.length != 2) {\n                throw new MalformedInputException(\"Invalid range value \" + rangeString);\n            }\n\n            rangeList.add(getRange(values));\n        }\n\n        return rangeList;\n    }", "signature": "List<Range> parse(final String input)", "full_signature": "@Override public List<Range> parse(final String input)", "class_method_signature": "RangeParser.parse(final String input)", "testcase": false, "constructor": false, "invocations": ["trim", "toLowerCase", "startsWith", "split", "substring", "length", "indexOf", "split", "add", "getRange"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}