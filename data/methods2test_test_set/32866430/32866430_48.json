{"test_class": {"identifier": "GroupResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = KeywhizService.customizeObjectMapper(Jackson.newObjectMapper());", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = KeywhizService.customizeObjectMapper(Jackson.newObjectMapper())", "var_name": "mapper"}, {"original_string": "OkHttpClient mutualSslClient;", "modifier": "", "type": "OkHttpClient", "declarator": "mutualSslClient", "var_name": "mutualSslClient"}, {"original_string": "@ClassRule public static final RuleChain chain = IntegrationTestRule.rule();", "modifier": "@ClassRule public static final", "type": "RuleChain", "declarator": "chain = IntegrationTestRule.rule()", "var_name": "chain"}], "file": "server/src/test/java/keywhiz/service/resources/automation/v2/GroupResourceTest.java"}, "test_case": {"identifier": "clientDetailForGroup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void clientDetailForGroup() throws Exception {\n    // Sample group\n    create(CreateGroupRequestV2.builder().name(\"groupWithClients\").description(\"desc\").build());\n\n    // Sample client\n    createClient(\"test-client\", \"groupWithClients\");\n\n    Set<Client> clients = clientsInfo(\"groupWithClients\");\n\n    assertThat(clients).hasSize(1);\n    assertThat(clients.iterator().next().getName()).isEqualTo(\"test-client\");\n  }", "signature": "void clientDetailForGroup()", "full_signature": "@Test public void clientDetailForGroup()", "class_method_signature": "GroupResourceTest.clientDetailForGroup()", "testcase": true, "constructor": false, "invocations": ["create", "build", "description", "name", "builder", "createClient", "clientsInfo", "hasSize", "assertThat", "isEqualTo", "assertThat", "getName", "next", "iterator"]}, "focal_class": {"identifier": "GroupResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GroupResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GroupResource.class)", "var_name": "logger"}, {"original_string": "private final AclDAO aclDAOReadOnly;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAOReadOnly", "var_name": "aclDAOReadOnly"}, {"original_string": "private final GroupDAO groupDAOReadOnly;", "modifier": "private final", "type": "GroupDAO", "declarator": "groupDAOReadOnly", "var_name": "groupDAOReadOnly"}, {"original_string": "private final GroupDAO groupDAOReadWrite;", "modifier": "private final", "type": "GroupDAO", "declarator": "groupDAOReadWrite", "var_name": "groupDAOReadWrite"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "GroupResource", "parameters": "(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " GroupResource(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "full_signature": "@Inject public  GroupResource(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "class_method_signature": "GroupResource.GroupResource(AclDAOFactory aclDAOFactory, GroupDAOFactory groupDAOFactory, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "createGroup", "parameters": "(@Auth AutomationClient automationClient,\n      @Valid CreateGroupRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response createGroup(@Auth AutomationClient automationClient,\n      @Valid CreateGroupRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createGroup(@Auth AutomationClient automationClient,\n      @Valid CreateGroupRequestV2 request)", "class_method_signature": "GroupResource.createGroup(@Auth AutomationClient automationClient,\n      @Valid CreateGroupRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "groupListing", "parameters": "(@Auth AutomationClient automationClient)", "modifiers": "@Timed @ExceptionMetered @GET @Produces(APPLICATION_JSON) public", "return": "Iterable<String>", "signature": "Iterable<String> groupListing(@Auth AutomationClient automationClient)", "full_signature": "@Timed @ExceptionMetered @GET @Produces(APPLICATION_JSON) public Iterable<String> groupListing(@Auth AutomationClient automationClient)", "class_method_signature": "GroupResource.groupListing(@Auth AutomationClient automationClient)", "testcase": false, "constructor": false}, {"identifier": "groupInfo", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}\") @Produces(APPLICATION_JSON) public", "return": "GroupDetailResponseV2", "signature": "GroupDetailResponseV2 groupInfo(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}\") @Produces(APPLICATION_JSON) public GroupDetailResponseV2 groupInfo(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "GroupResource.groupInfo(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "secretDetailForGroup", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}/secrets\") @Produces(APPLICATION_JSON) public", "return": "Set<SanitizedSecret>", "signature": "Set<SanitizedSecret> secretDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}/secrets\") @Produces(APPLICATION_JSON) public Set<SanitizedSecret> secretDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "GroupResource.secretDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "clientDetailForGroup", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}/clients\") @Produces(APPLICATION_JSON) public", "return": "Set<Client>", "signature": "Set<Client> clientDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}/clients\") @Produces(APPLICATION_JSON) public Set<Client> clientDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "GroupResource.clientDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @DELETE @Path(\"{name}\") public", "return": "Response", "signature": "Response deleteGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @DELETE @Path(\"{name}\") public Response deleteGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "GroupResource.deleteGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/automation/v2/GroupResource.java"}, "focal_method": {"identifier": "clientDetailForGroup", "parameters": "(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{name}/clients\") @Produces(APPLICATION_JSON) public", "return": "Set<Client>", "body": "@Timed @ExceptionMetered\n  @GET\n  @Path(\"{name}/clients\")\n  @Produces(APPLICATION_JSON)\n  public Set<Client> clientDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name) {\n    Group group = groupDAOReadOnly.getGroup(name)\n        .orElseThrow(NotFoundException::new);\n\n    return aclDAOReadOnly.getClientsFor(group);\n  }", "signature": "Set<Client> clientDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{name}/clients\") @Produces(APPLICATION_JSON) public Set<Client> clientDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "class_method_signature": "GroupResource.clientDetailForGroup(@Auth AutomationClient automationClient,\n      @PathParam(\"name\") String name)", "testcase": false, "constructor": false, "invocations": ["orElseThrow", "getGroup", "getClientsFor"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}