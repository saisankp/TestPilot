{"test_class": {"identifier": "GeoPkgDataStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder tmp = new TemporaryFolder(new File(\"target\"));", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "tmp = new TemporaryFolder(new File(\"target\"))", "var_name": "tmp"}], "file": "modules/unsupported/geopkg/src/test/java/org/geotools/geopkg/GeoPkgDataStoreFactoryTest.java"}, "test_case": {"identifier": "testBaseDirectory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBaseDirectory() throws IOException {\n        Map<String,Serializable> map = new HashMap<>();\n        map.put(GeoPkgDataStoreFactory.DBTYPE.key, \"geopkg\");\n        map.put(GeoPkgDataStoreFactory.DATABASE.key, \"foo.gpkg\");\n\n        GeoPkgDataStoreFactory factory = new GeoPkgDataStoreFactory();\n        factory.setBaseDirectory(tmp.getRoot());\n\n        // create some data to trigger file creation\n        SimpleFeatureTypeBuilder b = new SimpleFeatureTypeBuilder();\n        b.setName(\"foo\");\n        b.setNamespaceURI(\"http://geotools.org\");\n        b.setSRS(\"EPSG:4326\");\n        b.add(\"geom\", Point.class);\n        b.add(\"name\", String.class);\n\n        DataStore data = factory.createDataStore(map);\n        data.createSchema(b.buildFeatureType());\n        data.dispose();\n\n        assertTrue(new File(tmp.getRoot(), \"foo.gpkg\").exists());\n    }", "signature": "void testBaseDirectory()", "full_signature": "@Test public void testBaseDirectory()", "class_method_signature": "GeoPkgDataStoreFactoryTest.testBaseDirectory()", "testcase": true, "constructor": false, "invocations": ["put", "put", "setBaseDirectory", "getRoot", "setName", "setNamespaceURI", "setSRS", "add", "add", "createDataStore", "createSchema", "buildFeatureType", "dispose", "assertTrue", "exists", "getRoot"]}, "focal_class": {"identifier": "GeoPkgDataStoreFactory", "superclass": "extends JDBCDataStoreFactory", "interfaces": "", "fields": [{"original_string": "public static final Param DBTYPE = new Param(\"dbtype\", String.class, \"Type\", true, \"geopkg\");", "modifier": "public static final", "type": "Param", "declarator": "DBTYPE = new Param(\"dbtype\", String.class, \"Type\", true, \"geopkg\")", "var_name": "DBTYPE"}, {"original_string": "public static final Param USER = new Param(JDBCDataStoreFactory.USER.key, JDBCDataStoreFactory.USER.type, \n            JDBCDataStoreFactory.USER.description, false, JDBCDataStoreFactory.USER.sample);", "modifier": "public static final", "type": "Param", "declarator": "USER = new Param(JDBCDataStoreFactory.USER.key, JDBCDataStoreFactory.USER.type, \n            JDBCDataStoreFactory.USER.description, false, JDBCDataStoreFactory.USER.sample)", "var_name": "USER"}, {"original_string": "File baseDirectory = null;", "modifier": "", "type": "File", "declarator": "baseDirectory = null", "var_name": "baseDirectory"}, {"original_string": "GeoPkgGeomWriter.Configuration writerConfig;", "modifier": "", "type": "GeoPkgGeomWriter.Configuration", "declarator": "writerConfig", "var_name": "writerConfig"}], "methods": [{"identifier": "GeoPkgDataStoreFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " GeoPkgDataStoreFactory()", "full_signature": "public  GeoPkgDataStoreFactory()", "class_method_signature": "GeoPkgDataStoreFactory.GeoPkgDataStoreFactory()", "testcase": false, "constructor": true}, {"identifier": "GeoPkgDataStoreFactory", "parameters": "(GeoPkgGeomWriter.Configuration writerConfig)", "modifiers": "public", "return": "", "signature": " GeoPkgDataStoreFactory(GeoPkgGeomWriter.Configuration writerConfig)", "full_signature": "public  GeoPkgDataStoreFactory(GeoPkgGeomWriter.Configuration writerConfig)", "class_method_signature": "GeoPkgDataStoreFactory.GeoPkgDataStoreFactory(GeoPkgGeomWriter.Configuration writerConfig)", "testcase": false, "constructor": true}, {"identifier": "setBaseDirectory", "parameters": "(File baseDirectory)", "modifiers": "public", "return": "void", "signature": "void setBaseDirectory(File baseDirectory)", "full_signature": "public void setBaseDirectory(File baseDirectory)", "class_method_signature": "GeoPkgDataStoreFactory.setBaseDirectory(File baseDirectory)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseID", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getDatabaseID()", "full_signature": "@Override protected String getDatabaseID()", "class_method_signature": "GeoPkgDataStoreFactory.getDatabaseID()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "GeoPkgDataStoreFactory.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getDriverClassName", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getDriverClassName()", "full_signature": "@Override protected String getDriverClassName()", "class_method_signature": "GeoPkgDataStoreFactory.getDriverClassName()", "testcase": false, "constructor": false}, {"identifier": "createSQLDialect", "parameters": "(JDBCDataStore dataStore)", "modifiers": "@Override protected", "return": "SQLDialect", "signature": "SQLDialect createSQLDialect(JDBCDataStore dataStore)", "full_signature": "@Override protected SQLDialect createSQLDialect(JDBCDataStore dataStore)", "class_method_signature": "GeoPkgDataStoreFactory.createSQLDialect(JDBCDataStore dataStore)", "testcase": false, "constructor": false}, {"identifier": "getValidationQuery", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getValidationQuery()", "full_signature": "@Override protected String getValidationQuery()", "class_method_signature": "GeoPkgDataStoreFactory.getValidationQuery()", "testcase": false, "constructor": false}, {"identifier": "getJDBCUrl", "parameters": "(Map params)", "modifiers": "@Override protected", "return": "String", "signature": "String getJDBCUrl(Map params)", "full_signature": "@Override protected String getJDBCUrl(Map params)", "class_method_signature": "GeoPkgDataStoreFactory.getJDBCUrl(Map params)", "testcase": false, "constructor": false}, {"identifier": "setupParameters", "parameters": "(Map parameters)", "modifiers": "@Override protected", "return": "void", "signature": "void setupParameters(Map parameters)", "full_signature": "@Override protected void setupParameters(Map parameters)", "class_method_signature": "GeoPkgDataStoreFactory.setupParameters(Map parameters)", "testcase": false, "constructor": false}, {"identifier": "createDataSource", "parameters": "(Map params)", "modifiers": "@Override public", "return": "BasicDataSource", "signature": "BasicDataSource createDataSource(Map params)", "full_signature": "@Override public BasicDataSource createDataSource(Map params)", "class_method_signature": "GeoPkgDataStoreFactory.createDataSource(Map params)", "testcase": false, "constructor": false}, {"identifier": "createDataStoreInternal", "parameters": "(JDBCDataStore dataStore, Map params)", "modifiers": "@Override protected", "return": "JDBCDataStore", "signature": "JDBCDataStore createDataStoreInternal(JDBCDataStore dataStore, Map params)", "full_signature": "@Override protected JDBCDataStore createDataStoreInternal(JDBCDataStore dataStore, Map params)", "class_method_signature": "GeoPkgDataStoreFactory.createDataStoreInternal(JDBCDataStore dataStore, Map params)", "testcase": false, "constructor": false}, {"identifier": "addConnectionProperties", "parameters": "(BasicDataSource dataSource)", "modifiers": "static", "return": "void", "signature": "void addConnectionProperties(BasicDataSource dataSource)", "full_signature": "static void addConnectionProperties(BasicDataSource dataSource)", "class_method_signature": "GeoPkgDataStoreFactory.addConnectionProperties(BasicDataSource dataSource)", "testcase": false, "constructor": false}], "file": "modules/unsupported/geopkg/src/main/java/org/geotools/geopkg/GeoPkgDataStoreFactory.java"}, "focal_method": {"identifier": "setBaseDirectory", "parameters": "(File baseDirectory)", "modifiers": "public", "return": "void", "body": "public void setBaseDirectory(File baseDirectory) {\n        this.baseDirectory = baseDirectory;\n    }", "signature": "void setBaseDirectory(File baseDirectory)", "full_signature": "public void setBaseDirectory(File baseDirectory)", "class_method_signature": "GeoPkgDataStoreFactory.setBaseDirectory(File baseDirectory)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}