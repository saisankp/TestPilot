{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "clients/src/test/java/org/apache/kafka/common/utils/UtilsTest.java"}, "test_case": {"identifier": "testFormatAddress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormatAddress() {\n        assertEquals(\"127.0.0.1:8000\", formatAddress(\"127.0.0.1\", 8000));\n        assertEquals(\"mydomain.com:8080\", formatAddress(\"mydomain.com\", 8080));\n        assertEquals(\"[::1]:1234\", formatAddress(\"::1\", 1234));\n        assertEquals(\"[2001:db8:85a3:8d3:1319:8a2e:370:7348]:5678\", formatAddress(\"2001:db8:85a3:8d3:1319:8a2e:370:7348\", 5678));\n    }", "signature": "void testFormatAddress()", "full_signature": "@Test public void testFormatAddress()", "class_method_signature": "UtilsTest.testFormatAddress()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "formatAddress", "assertEquals", "formatAddress", "assertEquals", "formatAddress", "assertEquals", "formatAddress"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern HOST_PORT_PATTERN = Pattern.compile(\".*?\\\\[?([0-9a-zA-Z\\\\-%.:]*)\\\\]?:([0-9]+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "HOST_PORT_PATTERN = Pattern.compile(\".*?\\\\[?([0-9a-zA-Z\\\\-%.:]*)\\\\]?:([0-9]+)\")", "var_name": "HOST_PORT_PATTERN"}, {"original_string": "public static final String NL = System.getProperty(\"line.separator\");", "modifier": "public static final", "type": "String", "declarator": "NL = System.getProperty(\"line.separator\")", "var_name": "NL"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(Utils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Utils.class)", "var_name": "log"}], "methods": [{"identifier": "sorted", "parameters": "(Collection<T> collection)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> sorted(Collection<T> collection)", "full_signature": "public static List<T> sorted(Collection<T> collection)", "class_method_signature": "Utils.sorted(Collection<T> collection)", "testcase": false, "constructor": false}, {"identifier": "utf8", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String utf8(byte[] bytes)", "full_signature": "public static String utf8(byte[] bytes)", "class_method_signature": "Utils.utf8(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "utf8", "parameters": "(String string)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] utf8(String string)", "full_signature": "public static byte[] utf8(String string)", "class_method_signature": "Utils.utf8(String string)", "testcase": false, "constructor": false}, {"identifier": "readUnsignedInt", "parameters": "(ByteBuffer buffer)", "modifiers": "public static", "return": "long", "signature": "long readUnsignedInt(ByteBuffer buffer)", "full_signature": "public static long readUnsignedInt(ByteBuffer buffer)", "class_method_signature": "Utils.readUnsignedInt(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readUnsignedInt", "parameters": "(ByteBuffer buffer, int index)", "modifiers": "public static", "return": "long", "signature": "long readUnsignedInt(ByteBuffer buffer, int index)", "full_signature": "public static long readUnsignedInt(ByteBuffer buffer, int index)", "class_method_signature": "Utils.readUnsignedInt(ByteBuffer buffer, int index)", "testcase": false, "constructor": false}, {"identifier": "readUnsignedIntLE", "parameters": "(InputStream in)", "modifiers": "public static", "return": "int", "signature": "int readUnsignedIntLE(InputStream in)", "full_signature": "public static int readUnsignedIntLE(InputStream in)", "class_method_signature": "Utils.readUnsignedIntLE(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "toArrayLE", "parameters": "(int val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toArrayLE(int val)", "full_signature": "public static byte[] toArrayLE(int val)", "class_method_signature": "Utils.toArrayLE(int val)", "testcase": false, "constructor": false}, {"identifier": "readUnsignedIntLE", "parameters": "(byte[] buffer, int offset)", "modifiers": "public static", "return": "int", "signature": "int readUnsignedIntLE(byte[] buffer, int offset)", "full_signature": "public static int readUnsignedIntLE(byte[] buffer, int offset)", "class_method_signature": "Utils.readUnsignedIntLE(byte[] buffer, int offset)", "testcase": false, "constructor": false}, {"identifier": "writeUnsignedInt", "parameters": "(ByteBuffer buffer, long value)", "modifiers": "public static", "return": "void", "signature": "void writeUnsignedInt(ByteBuffer buffer, long value)", "full_signature": "public static void writeUnsignedInt(ByteBuffer buffer, long value)", "class_method_signature": "Utils.writeUnsignedInt(ByteBuffer buffer, long value)", "testcase": false, "constructor": false}, {"identifier": "writeUnsignedInt", "parameters": "(ByteBuffer buffer, int index, long value)", "modifiers": "public static", "return": "void", "signature": "void writeUnsignedInt(ByteBuffer buffer, int index, long value)", "full_signature": "public static void writeUnsignedInt(ByteBuffer buffer, int index, long value)", "class_method_signature": "Utils.writeUnsignedInt(ByteBuffer buffer, int index, long value)", "testcase": false, "constructor": false}, {"identifier": "writeUnsignedIntLE", "parameters": "(OutputStream out, int value)", "modifiers": "public static", "return": "void", "signature": "void writeUnsignedIntLE(OutputStream out, int value)", "full_signature": "public static void writeUnsignedIntLE(OutputStream out, int value)", "class_method_signature": "Utils.writeUnsignedIntLE(OutputStream out, int value)", "testcase": false, "constructor": false}, {"identifier": "writeUnsignedIntLE", "parameters": "(byte[] buffer, int offset, int value)", "modifiers": "public static", "return": "void", "signature": "void writeUnsignedIntLE(byte[] buffer, int offset, int value)", "full_signature": "public static void writeUnsignedIntLE(byte[] buffer, int offset, int value)", "class_method_signature": "Utils.writeUnsignedIntLE(byte[] buffer, int offset, int value)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "(int n)", "modifiers": "public static", "return": "int", "signature": "int abs(int n)", "full_signature": "public static int abs(int n)", "class_method_signature": "Utils.abs(int n)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(long first, long ... rest)", "modifiers": "public static", "return": "long", "signature": "long min(long first, long ... rest)", "full_signature": "public static long min(long first, long ... rest)", "class_method_signature": "Utils.min(long first, long ... rest)", "testcase": false, "constructor": false}, {"identifier": "utf8Length", "parameters": "(CharSequence s)", "modifiers": "public static", "return": "int", "signature": "int utf8Length(CharSequence s)", "full_signature": "public static int utf8Length(CharSequence s)", "class_method_signature": "Utils.utf8Length(CharSequence s)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(ByteBuffer buffer)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toArray(ByteBuffer buffer)", "full_signature": "public static byte[] toArray(ByteBuffer buffer)", "class_method_signature": "Utils.toArray(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(ByteBuffer buffer, int offset, int size)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toArray(ByteBuffer buffer, int offset, int size)", "full_signature": "public static byte[] toArray(ByteBuffer buffer, int offset, int size)", "class_method_signature": "Utils.toArray(ByteBuffer buffer, int offset, int size)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(T t)", "modifiers": "public static", "return": "T", "signature": "T notNull(T t)", "full_signature": "public static T notNull(T t)", "class_method_signature": "Utils.notNull(T t)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(long ms)", "modifiers": "public static", "return": "void", "signature": "void sleep(long ms)", "full_signature": "public static void sleep(long ms)", "class_method_signature": "Utils.sleep(long ms)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> c)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> c)", "full_signature": "public static T newInstance(Class<T> c)", "class_method_signature": "Utils.newInstance(Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String klass, Class<T> base)", "modifiers": "public static", "return": "T", "signature": "T newInstance(String klass, Class<T> base)", "full_signature": "public static T newInstance(String klass, Class<T> base)", "class_method_signature": "Utils.newInstance(String klass, Class<T> base)", "testcase": false, "constructor": false}, {"identifier": "murmur2", "parameters": "(final byte[] data)", "modifiers": "public static", "return": "int", "signature": "int murmur2(final byte[] data)", "full_signature": "public static int murmur2(final byte[] data)", "class_method_signature": "Utils.murmur2(final byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "(String address)", "modifiers": "public static", "return": "String", "signature": "String getHost(String address)", "full_signature": "public static String getHost(String address)", "class_method_signature": "Utils.getHost(String address)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "(String address)", "modifiers": "public static", "return": "Integer", "signature": "Integer getPort(String address)", "full_signature": "public static Integer getPort(String address)", "class_method_signature": "Utils.getPort(String address)", "testcase": false, "constructor": false}, {"identifier": "formatAddress", "parameters": "(String host, Integer port)", "modifiers": "public static", "return": "String", "signature": "String formatAddress(String host, Integer port)", "full_signature": "public static String formatAddress(String host, Integer port)", "class_method_signature": "Utils.formatAddress(String host, Integer port)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(T[] strs, String seperator)", "modifiers": "public static", "return": "String", "signature": "String join(T[] strs, String seperator)", "full_signature": "public static String join(T[] strs, String seperator)", "class_method_signature": "Utils.join(T[] strs, String seperator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<T> list, String seperator)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<T> list, String seperator)", "full_signature": "public static String join(Collection<T> list, String seperator)", "class_method_signature": "Utils.join(Collection<T> list, String seperator)", "testcase": false, "constructor": false}, {"identifier": "loadProps", "parameters": "(String filename)", "modifiers": "public static", "return": "Properties", "signature": "Properties loadProps(String filename)", "full_signature": "public static Properties loadProps(String filename)", "class_method_signature": "Utils.loadProps(String filename)", "testcase": false, "constructor": false}, {"identifier": "propsToStringMap", "parameters": "(Properties props)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> propsToStringMap(Properties props)", "full_signature": "public static Map<String, String> propsToStringMap(Properties props)", "class_method_signature": "Utils.propsToStringMap(Properties props)", "testcase": false, "constructor": false}, {"identifier": "stackTrace", "parameters": "(Throwable e)", "modifiers": "public static", "return": "String", "signature": "String stackTrace(Throwable e)", "full_signature": "public static String stackTrace(Throwable e)", "class_method_signature": "Utils.stackTrace(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "newThread", "parameters": "(String name, Runnable runnable, boolean daemon)", "modifiers": "public static", "return": "Thread", "signature": "Thread newThread(String name, Runnable runnable, boolean daemon)", "full_signature": "public static Thread newThread(String name, Runnable runnable, boolean daemon)", "class_method_signature": "Utils.newThread(String name, Runnable runnable, boolean daemon)", "testcase": false, "constructor": false}, {"identifier": "daemonThread", "parameters": "(String name, Runnable runnable)", "modifiers": "public static", "return": "Thread", "signature": "Thread daemonThread(String name, Runnable runnable)", "full_signature": "public static Thread daemonThread(String name, Runnable runnable)", "class_method_signature": "Utils.daemonThread(String name, Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "croak", "parameters": "(String message)", "modifiers": "public static", "return": "void", "signature": "void croak(String message)", "full_signature": "public static void croak(String message)", "class_method_signature": "Utils.croak(String message)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(ByteBuffer buffer, int offset, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes(ByteBuffer buffer, int offset, int length)", "full_signature": "public static byte[] readBytes(ByteBuffer buffer, int offset, int length)", "class_method_signature": "Utils.readBytes(ByteBuffer buffer, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(ByteBuffer buffer)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] readBytes(ByteBuffer buffer)", "full_signature": "public static byte[] readBytes(ByteBuffer buffer)", "class_method_signature": "Utils.readBytes(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "readFileAsString", "parameters": "(String path, Charset charset)", "modifiers": "public static", "return": "String", "signature": "String readFileAsString(String path, Charset charset)", "full_signature": "public static String readFileAsString(String path, Charset charset)", "class_method_signature": "Utils.readFileAsString(String path, Charset charset)", "testcase": false, "constructor": false}, {"identifier": "readFileAsString", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String readFileAsString(String path)", "full_signature": "public static String readFileAsString(String path)", "class_method_signature": "Utils.readFileAsString(String path)", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "(ByteBuffer existingBuffer, int newLength)", "modifiers": "public static", "return": "ByteBuffer", "signature": "ByteBuffer ensureCapacity(ByteBuffer existingBuffer, int newLength)", "full_signature": "public static ByteBuffer ensureCapacity(ByteBuffer existingBuffer, int newLength)", "class_method_signature": "Utils.ensureCapacity(ByteBuffer existingBuffer, int newLength)", "testcase": false, "constructor": false}, {"identifier": "mkSet", "parameters": "(T... elems)", "modifiers": "@SafeVarargs public static", "return": "Set<T>", "signature": "Set<T> mkSet(T... elems)", "full_signature": "@SafeVarargs public static Set<T> mkSet(T... elems)", "class_method_signature": "Utils.mkSet(T... elems)", "testcase": false, "constructor": false}, {"identifier": "mkList", "parameters": "(T... elems)", "modifiers": "@SafeVarargs public static", "return": "List<T>", "signature": "List<T> mkList(T... elems)", "full_signature": "@SafeVarargs public static List<T> mkList(T... elems)", "class_method_signature": "Utils.mkList(T... elems)", "testcase": false, "constructor": false}, {"identifier": "mkString", "parameters": "(Collection<T> coll, String separator)", "modifiers": "public static", "return": "CharSequence", "signature": "CharSequence mkString(Collection<T> coll, String separator)", "full_signature": "public static CharSequence mkString(Collection<T> coll, String separator)", "class_method_signature": "Utils.mkString(Collection<T> coll, String separator)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(File file)", "modifiers": "public static", "return": "void", "signature": "void delete(File file)", "full_signature": "public static void delete(File file)", "class_method_signature": "Utils.delete(File file)", "testcase": false, "constructor": false}, {"identifier": "safe", "parameters": "(List<T> other)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> safe(List<T> other)", "full_signature": "public static List<T> safe(List<T> other)", "class_method_signature": "Utils.safe(List<T> other)", "testcase": false, "constructor": false}, {"identifier": "getKafkaClassLoader", "parameters": "()", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getKafkaClassLoader()", "full_signature": "public static ClassLoader getKafkaClassLoader()", "class_method_signature": "Utils.getKafkaClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getContextOrKafkaClassLoader", "parameters": "()", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getContextOrKafkaClassLoader()", "full_signature": "public static ClassLoader getContextOrKafkaClassLoader()", "class_method_signature": "Utils.getContextOrKafkaClassLoader()", "testcase": false, "constructor": false}, {"identifier": "atomicMoveWithFallback", "parameters": "(Path source, Path target)", "modifiers": "public static", "return": "void", "signature": "void atomicMoveWithFallback(Path source, Path target)", "full_signature": "public static void atomicMoveWithFallback(Path source, Path target)", "class_method_signature": "Utils.atomicMoveWithFallback(Path source, Path target)", "testcase": false, "constructor": false}, {"identifier": "closeAll", "parameters": "(Closeable... closeables)", "modifiers": "public static", "return": "void", "signature": "void closeAll(Closeable... closeables)", "full_signature": "public static void closeAll(Closeable... closeables)", "class_method_signature": "Utils.closeAll(Closeable... closeables)", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/common/utils/Utils.java"}, "focal_method": {"identifier": "formatAddress", "parameters": "(String host, Integer port)", "modifiers": "public static", "return": "String", "body": "public static String formatAddress(String host, Integer port) {\n        return host.contains(\":\")\n                ? \"[\" + host + \"]:\" + port // IPv6\n                : host + \":\" + port;\n    }", "signature": "String formatAddress(String host, Integer port)", "full_signature": "public static String formatAddress(String host, Integer port)", "class_method_signature": "Utils.formatAddress(String host, Integer port)", "testcase": false, "constructor": false, "invocations": ["contains"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}