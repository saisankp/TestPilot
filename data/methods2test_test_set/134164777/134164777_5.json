{"test_class": {"identifier": "TrieTreeTest", "superclass": "", "interfaces": "", "fields": [], "file": "cim-common/src/test/java/com/crossoverjie/cim/common/data/construct/TrieTreeTest.java"}, "test_case": {"identifier": "prefixSearch44", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void prefixSearch44() throws Exception {\n        TrieTree trieTree = new TrieTree();\n        trieTree.insert(\"a\");\n        trieTree.insert(\"b\");\n        trieTree.insert(\"c\");\n        trieTree.insert(\"d\");\n        trieTree.insert(\"e\");\n        trieTree.insert(\"f\");\n        trieTree.insert(\"g\");\n        trieTree.insert(\"h\");\n\n    }", "signature": "void prefixSearch44()", "full_signature": "@Test public void prefixSearch44()", "class_method_signature": "TrieTreeTest.prefixSearch44()", "testcase": true, "constructor": false, "invocations": ["insert", "insert", "insert", "insert", "insert", "insert", "insert", "insert"]}, "focal_class": {"identifier": "TrieTree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CHILDREN_LENGTH = 26 * 2;", "modifier": "private static final", "type": "int", "declarator": "CHILDREN_LENGTH = 26 * 2", "var_name": "CHILDREN_LENGTH"}, {"original_string": "private static final int MAX_CHAR_LENGTH = 16;", "modifier": "private static final", "type": "int", "declarator": "MAX_CHAR_LENGTH = 16", "var_name": "MAX_CHAR_LENGTH"}, {"original_string": "private static final char UPPERCASE_STAR = 'A';", "modifier": "private static final", "type": "char", "declarator": "UPPERCASE_STAR = 'A'", "var_name": "UPPERCASE_STAR"}, {"original_string": "private static final char LOWERCASE_STAR = 'G';", "modifier": "private static final", "type": "char", "declarator": "LOWERCASE_STAR = 'G'", "var_name": "LOWERCASE_STAR"}, {"original_string": "private Node root;", "modifier": "private", "type": "Node", "declarator": "root", "var_name": "root"}], "methods": [{"identifier": "TrieTree", "parameters": "()", "modifiers": "public", "return": "", "signature": " TrieTree()", "full_signature": "public  TrieTree()", "class_method_signature": "TrieTree.TrieTree()", "testcase": false, "constructor": true}, {"identifier": "insert", "parameters": "(String data)", "modifiers": "public", "return": "void", "signature": "void insert(String data)", "full_signature": "public void insert(String data)", "class_method_signature": "TrieTree.insert(String data)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(Node root, String data)", "modifiers": "private", "return": "void", "signature": "void insert(Node root, String data)", "full_signature": "private void insert(Node root, String data)", "class_method_signature": "TrieTree.insert(Node root, String data)", "testcase": false, "constructor": false}, {"identifier": "prefixSearch", "parameters": "(String key)", "modifiers": "public", "return": "List<String>", "signature": "List<String> prefixSearch(String key)", "full_signature": "public List<String> prefixSearch(String key)", "class_method_signature": "TrieTree.prefixSearch(String key)", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(Node child, List<String> value, String key, String result)", "modifiers": "private", "return": "List<String>", "signature": "List<String> query(Node child, List<String> value, String key, String result)", "full_signature": "private List<String> query(Node child, List<String> value, String key, String result)", "class_method_signature": "TrieTree.query(Node child, List<String> value, String key, String result)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> all()", "full_signature": "public List<String> all()", "class_method_signature": "TrieTree.all()", "testcase": false, "constructor": false}, {"identifier": "depth", "parameters": "(Node node, List<String> list, char[] chars, int index)", "modifiers": "public", "return": "List<String>", "signature": "List<String> depth(Node node, List<String> list, char[] chars, int index)", "full_signature": "public List<String> depth(Node node, List<String> list, char[] chars, int index)", "class_method_signature": "TrieTree.depth(Node node, List<String> list, char[] chars, int index)", "testcase": false, "constructor": false}], "file": "cim-common/src/main/java/com/crossoverjie/cim/common/data/construct/TrieTree.java"}, "focal_method": {"identifier": "insert", "parameters": "(String data)", "modifiers": "public", "return": "void", "body": "public void insert(String data) {\n        this.insert(this.root, data);\n    }", "signature": "void insert(String data)", "full_signature": "public void insert(String data)", "class_method_signature": "TrieTree.insert(String data)", "testcase": false, "constructor": false, "invocations": ["insert"]}, "repository": {"repo_id": 134164777, "url": "https://github.com/crossoverJie/cim", "stars": 4518, "created": "5/20/2018 3:55:56 PM +00:00", "updates": "2020-01-27T13:30:30+00:00", "fork": "False", "license": "licensed"}}