{"test_class": {"identifier": "PortfolioItemEventHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_AMOUNT_ITEMS = 100;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_AMOUNT_ITEMS = 100", "var_name": "DEFAULT_AMOUNT_ITEMS"}, {"original_string": "private final PortfolioViewRepository portfolioViewRepository = mock(PortfolioViewRepository.class);", "modifier": "private final", "type": "PortfolioViewRepository", "declarator": "portfolioViewRepository = mock(PortfolioViewRepository.class)", "var_name": "portfolioViewRepository"}, {"original_string": "private final OrderBookViewRepository orderBookViewRepository = mock(OrderBookViewRepository.class);", "modifier": "private final", "type": "OrderBookViewRepository", "declarator": "orderBookViewRepository = mock(OrderBookViewRepository.class)", "var_name": "orderBookViewRepository"}, {"original_string": "private PortfolioItemEventHandler testSubject;", "modifier": "private", "type": "PortfolioItemEventHandler", "declarator": "testSubject", "var_name": "testSubject"}, {"original_string": "private final UserId userId = new UserId();", "modifier": "private final", "type": "UserId", "declarator": "userId = new UserId()", "var_name": "userId"}, {"original_string": "private final OrderBookId itemId = new OrderBookId();", "modifier": "private final", "type": "OrderBookId", "declarator": "itemId = new OrderBookId()", "var_name": "itemId"}, {"original_string": "private final PortfolioId portfolioId = new PortfolioId();", "modifier": "private final", "type": "PortfolioId", "declarator": "portfolioId = new PortfolioId()", "var_name": "portfolioId"}, {"original_string": "private final CompanyId companyId = new CompanyId();", "modifier": "private final", "type": "CompanyId", "declarator": "companyId = new CompanyId()", "var_name": "companyId"}, {"original_string": "private final TransactionId transactionId = new TransactionId();", "modifier": "private final", "type": "TransactionId", "declarator": "transactionId = new TransactionId()", "var_name": "transactionId"}], "file": "query/src/test/java/org/axonframework/samples/trader/query/portfolio/PortfolioItemEventHandlerTest.java"}, "test_case": {"identifier": "testHandleEventAddItems", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleEventAddItems() {\n        testSubject.on(new ItemsAddedToPortfolioEvent(portfolioId, itemId, 100));\n\n        verify(portfolioViewRepository).save(argThat(new PortfolioEntryMatcher(\n                itemId.getIdentifier(), 1, 2 * DEFAULT_AMOUNT_ITEMS, 1, DEFAULT_AMOUNT_ITEMS\n        )));\n    }", "signature": "void testHandleEventAddItems()", "full_signature": "@Test public void testHandleEventAddItems()", "class_method_signature": "PortfolioItemEventHandlerTest.testHandleEventAddItems()", "testcase": true, "constructor": false, "invocations": ["on", "save", "verify", "argThat", "getIdentifier"]}, "focal_class": {"identifier": "PortfolioItemEventHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(PortfolioItemEventHandler.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PortfolioItemEventHandler.class)", "var_name": "logger"}, {"original_string": "private final PortfolioViewRepository portfolioViewRepository;", "modifier": "private final", "type": "PortfolioViewRepository", "declarator": "portfolioViewRepository", "var_name": "portfolioViewRepository"}, {"original_string": "private final OrderBookViewRepository orderBookViewRepository;", "modifier": "private final", "type": "OrderBookViewRepository", "declarator": "orderBookViewRepository", "var_name": "orderBookViewRepository"}], "methods": [{"identifier": "PortfolioItemEventHandler", "parameters": "(PortfolioViewRepository portfolioViewRepository,\n                                     OrderBookViewRepository orderBookViewRepository)", "modifiers": "@Autowired public", "return": "", "signature": " PortfolioItemEventHandler(PortfolioViewRepository portfolioViewRepository,\n                                     OrderBookViewRepository orderBookViewRepository)", "full_signature": "@Autowired public  PortfolioItemEventHandler(PortfolioViewRepository portfolioViewRepository,\n                                     OrderBookViewRepository orderBookViewRepository)", "class_method_signature": "PortfolioItemEventHandler.PortfolioItemEventHandler(PortfolioViewRepository portfolioViewRepository,\n                                     OrderBookViewRepository orderBookViewRepository)", "testcase": false, "constructor": true}, {"identifier": "on", "parameters": "(ItemsAddedToPortfolioEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(ItemsAddedToPortfolioEvent event)", "full_signature": "@EventHandler public void on(ItemsAddedToPortfolioEvent event)", "class_method_signature": "PortfolioItemEventHandler.on(ItemsAddedToPortfolioEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(ItemReservationCancelledForPortfolioEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(ItemReservationCancelledForPortfolioEvent event)", "full_signature": "@EventHandler public void on(ItemReservationCancelledForPortfolioEvent event)", "class_method_signature": "PortfolioItemEventHandler.on(ItemReservationCancelledForPortfolioEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(ItemReservationConfirmedForPortfolioEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(ItemReservationConfirmedForPortfolioEvent event)", "full_signature": "@EventHandler public void on(ItemReservationConfirmedForPortfolioEvent event)", "class_method_signature": "PortfolioItemEventHandler.on(ItemReservationConfirmedForPortfolioEvent event)", "testcase": false, "constructor": false}, {"identifier": "on", "parameters": "(ItemsReservedEvent event)", "modifiers": "@EventHandler public", "return": "void", "signature": "void on(ItemsReservedEvent event)", "full_signature": "@EventHandler public void on(ItemsReservedEvent event)", "class_method_signature": "PortfolioItemEventHandler.on(ItemsReservedEvent event)", "testcase": false, "constructor": false}, {"identifier": "createItemEntry", "parameters": "(String identifier, long amount)", "modifiers": "private", "return": "ItemEntry", "signature": "ItemEntry createItemEntry(String identifier, long amount)", "full_signature": "private ItemEntry createItemEntry(String identifier, long amount)", "class_method_signature": "PortfolioItemEventHandler.createItemEntry(String identifier, long amount)", "testcase": false, "constructor": false}], "file": "query/src/main/java/org/axonframework/samples/trader/query/portfolio/PortfolioItemEventHandler.java"}, "focal_method": {"identifier": "on", "parameters": "(ItemsAddedToPortfolioEvent event)", "modifiers": "@EventHandler public", "return": "void", "body": "@EventHandler\n    public void on(ItemsAddedToPortfolioEvent event) {\n        OrderBookId orderBookId = event.getOrderBookId();\n        logger.debug(\"Handle ItemsAddedToPortfolioEvent for orderBook with identifier {}\", orderBookId);\n\n        ItemEntry itemEntry = createItemEntry(orderBookId.getIdentifier(), event.getAmountOfItemsAdded());\n\n        PortfolioView portfolioView = portfolioViewRepository.findOne(event.getPortfolioId().getIdentifier());\n        portfolioView.addItemInPossession(itemEntry);\n\n        portfolioViewRepository.save(portfolioView);\n    }", "signature": "void on(ItemsAddedToPortfolioEvent event)", "full_signature": "@EventHandler public void on(ItemsAddedToPortfolioEvent event)", "class_method_signature": "PortfolioItemEventHandler.on(ItemsAddedToPortfolioEvent event)", "testcase": false, "constructor": false, "invocations": ["getOrderBookId", "debug", "createItemEntry", "getIdentifier", "getAmountOfItemsAdded", "findOne", "getIdentifier", "getPortfolioId", "addItemInPossession", "save"]}, "repository": {"repo_id": 854559, "url": "https://github.com/AxonFramework/Axon-trader", "language": "Java", "is_fork": false, "fork_count": 178, "stargazer_count": 356, "size": 1455, "license": "licensed"}}