{"test_class": {"identifier": "ShapefileDataStoreTest", "superclass": "extends TestCaseSupport", "interfaces": "", "fields": [{"original_string": "final static String STATE_POP = \"shapes/statepop.shp\";", "modifier": "final static", "type": "String", "declarator": "STATE_POP = \"shapes/statepop.shp\"", "var_name": "STATE_POP"}, {"original_string": "final static String STREAM = \"shapes/stream.shp\";", "modifier": "final static", "type": "String", "declarator": "STREAM = \"shapes/stream.shp\"", "var_name": "STREAM"}, {"original_string": "final static String DANISH = \"shapes/danish_point.shp\";", "modifier": "final static", "type": "String", "declarator": "DANISH = \"shapes/danish_point.shp\"", "var_name": "DANISH"}, {"original_string": "final static String CHINESE = \"shapes/chinese_poly.shp\";", "modifier": "final static", "type": "String", "declarator": "CHINESE = \"shapes/chinese_poly.shp\"", "var_name": "CHINESE"}, {"original_string": "final static String RUSSIAN = \"shapes/rus-windows-1251.shp\";", "modifier": "final static", "type": "String", "declarator": "RUSSIAN = \"shapes/rus-windows-1251.shp\"", "var_name": "RUSSIAN"}, {"original_string": "final static String UTF8 = \"shapes/wgs1snt.shp\";", "modifier": "final static", "type": "String", "declarator": "UTF8 = \"shapes/wgs1snt.shp\"", "var_name": "UTF8"}, {"original_string": "final static FilterFactory2 ff = CommonFactoryFinder\n            .getFilterFactory2(null);", "modifier": "final static", "type": "FilterFactory2", "declarator": "ff = CommonFactoryFinder\n            .getFilterFactory2(null)", "var_name": "ff"}, {"original_string": "private ShapefileDataStore store;", "modifier": "private", "type": "ShapefileDataStore", "declarator": "store", "var_name": "store"}], "file": "modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/ShapefileDataStoreTest.java"}, "test_case": {"identifier": "testSpacesInPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSpacesInPath() throws Exception {\n        URL u = TestData.url(TestCaseSupport.class, \"folder with spaces/pointtest.shp\");\n        File f = DataUtilities.urlToFile(u);\n        assertTrue(f.exists());\n        ShapefileDataStore s = new ShapefileDataStore(u);\n        loadFeatures(s);\n        s.dispose();\n    }", "signature": "void testSpacesInPath()", "full_signature": "@Test public void testSpacesInPath()", "class_method_signature": "ShapefileDataStoreTest.testSpacesInPath()", "testcase": true, "constructor": false, "invocations": ["url", "urlToFile", "assertTrue", "exists", "loadFeatures", "dispose"]}, "focal_class": {"identifier": "ShapefileDataStore", "superclass": "extends ContentDataStore", "interfaces": "implements FileDataStore", "fields": [{"original_string": "public static final String ORIGINAL_FIELD_NAME = \"original\";", "modifier": "public static final", "type": "String", "declarator": "ORIGINAL_FIELD_NAME = \"original\"", "var_name": "ORIGINAL_FIELD_NAME"}, {"original_string": "public static final String ORIGINAL_FIELD_DUPLICITY_COUNT = \"count\";", "modifier": "public static final", "type": "String", "declarator": "ORIGINAL_FIELD_DUPLICITY_COUNT = \"count\"", "var_name": "ORIGINAL_FIELD_DUPLICITY_COUNT"}, {"original_string": "public static final Charset DEFAULT_STRING_CHARSET = (Charset) ShapefileDataStoreFactory.DBFCHARSET\n            .getDefaultValue();", "modifier": "public static final", "type": "Charset", "declarator": "DEFAULT_STRING_CHARSET = (Charset) ShapefileDataStoreFactory.DBFCHARSET\n            .getDefaultValue()", "var_name": "DEFAULT_STRING_CHARSET"}, {"original_string": "public static final TimeZone DEFAULT_TIMEZONE = (TimeZone) ShapefileDataStoreFactory.DBFTIMEZONE\n            .getDefaultValue();", "modifier": "public static final", "type": "TimeZone", "declarator": "DEFAULT_TIMEZONE = (TimeZone) ShapefileDataStoreFactory.DBFTIMEZONE\n            .getDefaultValue()", "var_name": "DEFAULT_TIMEZONE"}, {"original_string": "protected static final Boolean TRACE_ENABLED = \"true\".equalsIgnoreCase(System\n            .getProperty(\"gt2.shapefile.trace\"));", "modifier": "protected static final", "type": "Boolean", "declarator": "TRACE_ENABLED = \"true\".equalsIgnoreCase(System\n            .getProperty(\"gt2.shapefile.trace\"))", "var_name": "TRACE_ENABLED"}, {"original_string": "Exception trace;", "modifier": "", "type": "Exception", "declarator": "trace", "var_name": "trace"}, {"original_string": "ShpFiles shpFiles;", "modifier": "", "type": "ShpFiles", "declarator": "shpFiles", "var_name": "shpFiles"}, {"original_string": "Charset charset = DEFAULT_STRING_CHARSET;", "modifier": "", "type": "Charset", "declarator": "charset = DEFAULT_STRING_CHARSET", "var_name": "charset"}, {"original_string": "TimeZone timeZone = DEFAULT_TIMEZONE;", "modifier": "", "type": "TimeZone", "declarator": "timeZone = DEFAULT_TIMEZONE", "var_name": "timeZone"}, {"original_string": "boolean memoryMapped = false;", "modifier": "", "type": "boolean", "declarator": "memoryMapped = false", "var_name": "memoryMapped"}, {"original_string": "boolean bufferCachingEnabled = true;", "modifier": "", "type": "boolean", "declarator": "bufferCachingEnabled = true", "var_name": "bufferCachingEnabled"}, {"original_string": "boolean indexed = true;", "modifier": "", "type": "boolean", "declarator": "indexed = true", "var_name": "indexed"}, {"original_string": "boolean indexCreationEnabled = true;", "modifier": "", "type": "boolean", "declarator": "indexCreationEnabled = true", "var_name": "indexCreationEnabled"}, {"original_string": "boolean fidIndexed = true;", "modifier": "", "type": "boolean", "declarator": "fidIndexed = true", "var_name": "fidIndexed"}, {"original_string": "IndexManager indexManager;", "modifier": "", "type": "IndexManager", "declarator": "indexManager", "var_name": "indexManager"}, {"original_string": "ShapefileSetManager shpManager;", "modifier": "", "type": "ShapefileSetManager", "declarator": "shpManager", "var_name": "shpManager"}], "methods": [{"identifier": "ShapefileDataStore", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " ShapefileDataStore(URL url)", "full_signature": "public  ShapefileDataStore(URL url)", "class_method_signature": "ShapefileDataStore.ShapefileDataStore(URL url)", "testcase": false, "constructor": true}, {"identifier": "createTypeNames", "parameters": "()", "modifiers": "@Override protected", "return": "List<Name>", "signature": "List<Name> createTypeNames()", "full_signature": "@Override protected List<Name> createTypeNames()", "class_method_signature": "ShapefileDataStore.createTypeNames()", "testcase": false, "constructor": false}, {"identifier": "getTypeName", "parameters": "()", "modifiers": "", "return": "Name", "signature": "Name getTypeName()", "full_signature": " Name getTypeName()", "class_method_signature": "ShapefileDataStore.getTypeName()", "testcase": false, "constructor": false}, {"identifier": "createFeatureSource", "parameters": "(ContentEntry entry)", "modifiers": "@Override protected", "return": "ContentFeatureSource", "signature": "ContentFeatureSource createFeatureSource(ContentEntry entry)", "full_signature": "@Override protected ContentFeatureSource createFeatureSource(ContentEntry entry)", "class_method_signature": "ShapefileDataStore.createFeatureSource(ContentEntry entry)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSource", "parameters": "()", "modifiers": "public", "return": "ContentFeatureSource", "signature": "ContentFeatureSource getFeatureSource()", "full_signature": "public ContentFeatureSource getFeatureSource()", "class_method_signature": "ShapefileDataStore.getFeatureSource()", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "()", "modifiers": "public", "return": "Charset", "signature": "Charset getCharset()", "full_signature": "public Charset getCharset()", "class_method_signature": "ShapefileDataStore.getCharset()", "testcase": false, "constructor": false}, {"identifier": "setCharset", "parameters": "(Charset charset)", "modifiers": "public", "return": "void", "signature": "void setCharset(Charset charset)", "full_signature": "public void setCharset(Charset charset)", "class_method_signature": "ShapefileDataStore.setCharset(Charset charset)", "testcase": false, "constructor": false}, {"identifier": "getTimeZone", "parameters": "()", "modifiers": "public", "return": "TimeZone", "signature": "TimeZone getTimeZone()", "full_signature": "public TimeZone getTimeZone()", "class_method_signature": "ShapefileDataStore.getTimeZone()", "testcase": false, "constructor": false}, {"identifier": "setTimeZone", "parameters": "(TimeZone timeZone)", "modifiers": "public", "return": "void", "signature": "void setTimeZone(TimeZone timeZone)", "full_signature": "public void setTimeZone(TimeZone timeZone)", "class_method_signature": "ShapefileDataStore.setTimeZone(TimeZone timeZone)", "testcase": false, "constructor": false}, {"identifier": "isMemoryMapped", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMemoryMapped()", "full_signature": "public boolean isMemoryMapped()", "class_method_signature": "ShapefileDataStore.isMemoryMapped()", "testcase": false, "constructor": false}, {"identifier": "setMemoryMapped", "parameters": "(boolean memoryMapped)", "modifiers": "public", "return": "void", "signature": "void setMemoryMapped(boolean memoryMapped)", "full_signature": "public void setMemoryMapped(boolean memoryMapped)", "class_method_signature": "ShapefileDataStore.setMemoryMapped(boolean memoryMapped)", "testcase": false, "constructor": false}, {"identifier": "isBufferCachingEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBufferCachingEnabled()", "full_signature": "public boolean isBufferCachingEnabled()", "class_method_signature": "ShapefileDataStore.isBufferCachingEnabled()", "testcase": false, "constructor": false}, {"identifier": "setBufferCachingEnabled", "parameters": "(boolean bufferCachingEnabled)", "modifiers": "public", "return": "void", "signature": "void setBufferCachingEnabled(boolean bufferCachingEnabled)", "full_signature": "public void setBufferCachingEnabled(boolean bufferCachingEnabled)", "class_method_signature": "ShapefileDataStore.setBufferCachingEnabled(boolean bufferCachingEnabled)", "testcase": false, "constructor": false}, {"identifier": "isIndexed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIndexed()", "full_signature": "public boolean isIndexed()", "class_method_signature": "ShapefileDataStore.isIndexed()", "testcase": false, "constructor": false}, {"identifier": "setIndexed", "parameters": "(boolean indexed)", "modifiers": "public", "return": "void", "signature": "void setIndexed(boolean indexed)", "full_signature": "public void setIndexed(boolean indexed)", "class_method_signature": "ShapefileDataStore.setIndexed(boolean indexed)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "public", "return": "SimpleFeatureType", "signature": "SimpleFeatureType getSchema()", "full_signature": "public SimpleFeatureType getSchema()", "class_method_signature": "ShapefileDataStore.getSchema()", "testcase": false, "constructor": false}, {"identifier": "getFeatureReader", "parameters": "()", "modifiers": "public", "return": "FeatureReader<SimpleFeatureType, SimpleFeature>", "signature": "FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader()", "full_signature": "public FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader()", "class_method_signature": "ShapefileDataStore.getFeatureReader()", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "(Query query)", "modifiers": "public", "return": "long", "signature": "long getCount(Query query)", "full_signature": "public long getCount(Query query)", "class_method_signature": "ShapefileDataStore.getCount(Query query)", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "public", "return": "void", "signature": "void createSchema(SimpleFeatureType featureType)", "full_signature": "public void createSchema(SimpleFeatureType featureType)", "class_method_signature": "ShapefileDataStore.createSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "toSingleLineWKT", "parameters": "(CoordinateReferenceSystem crs)", "modifiers": "", "return": "String", "signature": "String toSingleLineWKT(CoordinateReferenceSystem crs)", "full_signature": " String toSingleLineWKT(CoordinateReferenceSystem crs)", "class_method_signature": "ShapefileDataStore.toSingleLineWKT(CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "createDbaseHeader", "parameters": "(SimpleFeatureType featureType)", "modifiers": "protected static", "return": "DbaseFileHeader", "signature": "DbaseFileHeader createDbaseHeader(SimpleFeatureType featureType)", "full_signature": "protected static DbaseFileHeader createDbaseHeader(SimpleFeatureType featureType)", "class_method_signature": "ShapefileDataStore.createDbaseHeader(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "forceSchemaCRS", "parameters": "(CoordinateReferenceSystem crs)", "modifiers": "public", "return": "void", "signature": "void forceSchemaCRS(CoordinateReferenceSystem crs)", "full_signature": "public void forceSchemaCRS(CoordinateReferenceSystem crs)", "class_method_signature": "ShapefileDataStore.forceSchemaCRS(CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ShapefileDataStore.dispose()", "testcase": false, "constructor": false}, {"identifier": "finalize", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void finalize()", "full_signature": "@Override protected void finalize()", "class_method_signature": "ShapefileDataStore.finalize()", "testcase": false, "constructor": false}, {"identifier": "isFidIndexed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFidIndexed()", "full_signature": "public boolean isFidIndexed()", "class_method_signature": "ShapefileDataStore.isFidIndexed()", "testcase": false, "constructor": false}, {"identifier": "setFidIndexed", "parameters": "(boolean fidIndexed)", "modifiers": "public", "return": "void", "signature": "void setFidIndexed(boolean fidIndexed)", "full_signature": "public void setFidIndexed(boolean fidIndexed)", "class_method_signature": "ShapefileDataStore.setFidIndexed(boolean fidIndexed)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ShapefileDataStore.toString()", "testcase": false, "constructor": false}, {"identifier": "updateSchema", "parameters": "(SimpleFeatureType featureType)", "modifiers": "@Override public", "return": "void", "signature": "void updateSchema(SimpleFeatureType featureType)", "full_signature": "@Override public void updateSchema(SimpleFeatureType featureType)", "class_method_signature": "ShapefileDataStore.updateSchema(SimpleFeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriter", "parameters": "(Filter filter,\n            Transaction transaction)", "modifiers": "@Override public", "return": "FeatureWriter<SimpleFeatureType, SimpleFeature>", "signature": "FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Filter filter,\n            Transaction transaction)", "full_signature": "@Override public FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Filter filter,\n            Transaction transaction)", "class_method_signature": "ShapefileDataStore.getFeatureWriter(Filter filter,\n            Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriter", "parameters": "(Transaction transaction)", "modifiers": "@Override public", "return": "FeatureWriter<SimpleFeatureType, SimpleFeature>", "signature": "FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Transaction transaction)", "full_signature": "@Override public FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(Transaction transaction)", "class_method_signature": "ShapefileDataStore.getFeatureWriter(Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "getFeatureWriterAppend", "parameters": "(\n            Transaction transaction)", "modifiers": "@Override public", "return": "FeatureWriter<SimpleFeatureType, SimpleFeature>", "signature": "FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriterAppend(\n            Transaction transaction)", "full_signature": "@Override public FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriterAppend(\n            Transaction transaction)", "class_method_signature": "ShapefileDataStore.getFeatureWriterAppend(\n            Transaction transaction)", "testcase": false, "constructor": false}, {"identifier": "isIndexCreationEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIndexCreationEnabled()", "full_signature": "public boolean isIndexCreationEnabled()", "class_method_signature": "ShapefileDataStore.isIndexCreationEnabled()", "testcase": false, "constructor": false}, {"identifier": "setIndexCreationEnabled", "parameters": "(boolean indexCreationEnabled)", "modifiers": "public", "return": "void", "signature": "void setIndexCreationEnabled(boolean indexCreationEnabled)", "full_signature": "public void setIndexCreationEnabled(boolean indexCreationEnabled)", "class_method_signature": "ShapefileDataStore.setIndexCreationEnabled(boolean indexCreationEnabled)", "testcase": false, "constructor": false}], "file": "modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/ShapefileDataStore.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void dispose() {\n        super.dispose();\n        if (shpFiles != null) {\n            shpFiles.dispose();\n            shpFiles = null;\n        }\n    }", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ShapefileDataStore.dispose()", "testcase": false, "constructor": false, "invocations": ["dispose", "dispose"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}