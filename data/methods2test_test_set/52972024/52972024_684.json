{"test_class": {"identifier": "DatabaseSectionStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Object configMock;", "modifier": "private", "type": "Object", "declarator": "configMock", "var_name": "configMock"}], "file": "Starters/DatabaseServiceStarter/DatabaseStarter/src/test/java/info/smart_tools/smartactors/database_service_starter/database_starter/DatabaseSectionStrategyTest.java"}, "test_case": {"identifier": "testLoadingConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadingConfig() throws InvalidArgumentException, ResolutionException, ConfigurationProcessingException {\n        DSObject config = new DSObject(\"\\n\" +\n                \"     {\\n\" +\n                \"         \\\"database\\\": [\\n\" +\n                \"             {\\n\" +\n                \"                 \\\"key\\\": \\\"databaseKey\\\",\" +\n                \"                 \\\"type\\\": \\\"TestStrategy\\\",\\n\" +\n                \"                 \\\"config\\\": {}\\n\" +\n                \"             }\\n\" +\n                \"         ]\\n\" +\n                \"     }\");\n        DatabaseSectionStrategy strategy = new DatabaseSectionStrategy();\n        strategy.onLoadConfig(config);\n        assertSame(configMock, IOC.resolve(Keys.getOrAdd(\"databaseKey\")));\n    }", "signature": "void testLoadingConfig()", "full_signature": "@Test public void testLoadingConfig()", "class_method_signature": "DatabaseSectionStrategyTest.testLoadingConfig()", "testcase": true, "constructor": false, "invocations": ["onLoadConfig", "assertSame", "resolve", "getOrAdd"]}, "focal_class": {"identifier": "DatabaseSectionStrategy", "superclass": "", "interfaces": "implements ISectionStrategy", "fields": [{"original_string": "private final IFieldName sectionFN;", "modifier": "private final", "type": "IFieldName", "declarator": "sectionFN", "var_name": "sectionFN"}, {"original_string": "private final IFieldName typeFN;", "modifier": "private final", "type": "IFieldName", "declarator": "typeFN", "var_name": "typeFN"}, {"original_string": "private final IFieldName configFN;", "modifier": "private final", "type": "IFieldName", "declarator": "configFN", "var_name": "configFN"}, {"original_string": "private final IFieldName keyFN;", "modifier": "private final", "type": "IFieldName", "declarator": "keyFN", "var_name": "keyFN"}], "methods": [{"identifier": "DatabaseSectionStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " DatabaseSectionStrategy()", "full_signature": "public  DatabaseSectionStrategy()", "class_method_signature": "DatabaseSectionStrategy.DatabaseSectionStrategy()", "testcase": false, "constructor": true}, {"identifier": "onLoadConfig", "parameters": "(final IObject config)", "modifiers": "@Override public", "return": "void", "signature": "void onLoadConfig(final IObject config)", "full_signature": "@Override public void onLoadConfig(final IObject config)", "class_method_signature": "DatabaseSectionStrategy.onLoadConfig(final IObject config)", "testcase": false, "constructor": false}, {"identifier": "getSectionName", "parameters": "()", "modifiers": "@Override public", "return": "IFieldName", "signature": "IFieldName getSectionName()", "full_signature": "@Override public IFieldName getSectionName()", "class_method_signature": "DatabaseSectionStrategy.getSectionName()", "testcase": false, "constructor": false}], "file": "Starters/DatabaseServiceStarter/DatabaseStarter/src/main/java/info/smart_tools/smartactors/database_service_starter/database_starter/DatabaseSectionStrategy.java"}, "focal_method": {"identifier": "onLoadConfig", "parameters": "(final IObject config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onLoadConfig(final IObject config) throws ConfigurationProcessingException {\n        try {\n            List<IObject> databaseObjects = (List<IObject>) config.getValue(sectionFN);\n            for (IObject databaseObj : databaseObjects) {\n                Object databaseOpts = IOC.resolve(Keys.getOrAdd((String) databaseObj.getValue(typeFN)), databaseObj.getValue(configFN));\n                IOC.register(Keys.getOrAdd((String) databaseObj.getValue(keyFN)), new SingletonStrategy(databaseOpts));\n            }\n        } catch (ReadValueException | InvalidArgumentException | RegistrationException e) {\n            throw new ConfigurationProcessingException(\"Error occurred loading \\\"database\\\" configuration section.\", e);\n        } catch (ResolutionException e) {\n            throw new ConfigurationProcessingException(\"Error occurred resolving \\\"database\\\".\", e);\n        }\n    }", "signature": "void onLoadConfig(final IObject config)", "full_signature": "@Override public void onLoadConfig(final IObject config)", "class_method_signature": "DatabaseSectionStrategy.onLoadConfig(final IObject config)", "testcase": false, "constructor": false, "invocations": ["getValue", "resolve", "getOrAdd", "getValue", "getValue", "register", "getOrAdd", "getValue"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}