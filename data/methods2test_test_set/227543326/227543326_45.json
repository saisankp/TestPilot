{"test_class": {"identifier": "DistinctQueryResultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DistinctQueryResult distinctQueryResult;", "modifier": "private", "type": "DistinctQueryResult", "declarator": "distinctQueryResult", "var_name": "distinctQueryResult"}, {"original_string": "private QueryResultMetaData queryResultMetaData;", "modifier": "private", "type": "QueryResultMetaData", "declarator": "queryResultMetaData", "var_name": "queryResultMetaData"}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/test/java/org/apache/shardingsphere/core/execute/sql/execute/result/DistinctQueryResultTest.java"}, "test_case": {"identifier": "assertGetCurrentRow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void assertGetCurrentRow() {\n        distinctQueryResult.next();\n        assertThat(distinctQueryResult.getCurrentRow().getColumnValue(1), is((Object) 10));\n    }", "signature": "void assertGetCurrentRow()", "full_signature": "@Test public void assertGetCurrentRow()", "class_method_signature": "DistinctQueryResultTest.assertGetCurrentRow()", "testcase": true, "constructor": false, "invocations": ["next", "assertThat", "getColumnValue", "getCurrentRow", "is"]}, "focal_class": {"identifier": "DistinctQueryResult", "superclass": "", "interfaces": "implements QueryResult", "fields": [{"original_string": "@Getter\n    private final QueryResultMetaData queryResultMetaData;", "modifier": "@Getter\n    private final", "type": "QueryResultMetaData", "declarator": "queryResultMetaData", "var_name": "queryResultMetaData"}, {"original_string": "private final Iterator<QueryRow> resultData;", "modifier": "private final", "type": "Iterator<QueryRow>", "declarator": "resultData", "var_name": "resultData"}, {"original_string": "private QueryRow currentRow;", "modifier": "private", "type": "QueryRow", "declarator": "currentRow", "var_name": "currentRow"}], "methods": [{"identifier": "DistinctQueryResult", "parameters": "(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "modifiers": "public", "return": "", "signature": " DistinctQueryResult(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "full_signature": "public  DistinctQueryResult(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "class_method_signature": "DistinctQueryResult.DistinctQueryResult(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "testcase": false, "constructor": true}, {"identifier": "getResultData", "parameters": "(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "modifiers": "private", "return": "Iterator<QueryRow>", "signature": "Iterator<QueryRow> getResultData(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "full_signature": "private Iterator<QueryRow> getResultData(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "class_method_signature": "DistinctQueryResult.getResultData(final Collection<QueryResult> queryResults, final List<String> distinctColumnLabels)", "testcase": false, "constructor": false}, {"identifier": "fill", "parameters": "(final Set<QueryRow> resultData, final QueryResult queryResult, final List<Integer> distinctColumnIndexes)", "modifiers": "private", "return": "void", "signature": "void fill(final Set<QueryRow> resultData, final QueryResult queryResult, final List<Integer> distinctColumnIndexes)", "full_signature": "private void fill(final Set<QueryRow> resultData, final QueryResult queryResult, final List<Integer> distinctColumnIndexes)", "class_method_signature": "DistinctQueryResult.fill(final Set<QueryRow> resultData, final QueryResult queryResult, final List<Integer> distinctColumnIndexes)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "()", "modifiers": "public", "return": "List<DistinctQueryResult>", "signature": "List<DistinctQueryResult> divide()", "full_signature": "public List<DistinctQueryResult> divide()", "class_method_signature": "DistinctQueryResult.divide()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean next()", "full_signature": "@Override public final boolean next()", "class_method_signature": "DistinctQueryResult.next()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final int columnIndex, final Class<?> type)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(final int columnIndex, final Class<?> type)", "full_signature": "@Override public Object getValue(final int columnIndex, final Class<?> type)", "class_method_signature": "DistinctQueryResult.getValue(final int columnIndex, final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final String columnLabel, final Class<?> type)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(final String columnLabel, final Class<?> type)", "full_signature": "@Override public Object getValue(final String columnLabel, final Class<?> type)", "class_method_signature": "DistinctQueryResult.getValue(final String columnLabel, final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getCalendarValue", "parameters": "(final int columnIndex, final Class<?> type, final Calendar calendar)", "modifiers": "@Override public", "return": "Object", "signature": "Object getCalendarValue(final int columnIndex, final Class<?> type, final Calendar calendar)", "full_signature": "@Override public Object getCalendarValue(final int columnIndex, final Class<?> type, final Calendar calendar)", "class_method_signature": "DistinctQueryResult.getCalendarValue(final int columnIndex, final Class<?> type, final Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "getCalendarValue", "parameters": "(final String columnLabel, final Class<?> type, final Calendar calendar)", "modifiers": "@Override public", "return": "Object", "signature": "Object getCalendarValue(final String columnLabel, final Class<?> type, final Calendar calendar)", "full_signature": "@Override public Object getCalendarValue(final String columnLabel, final Class<?> type, final Calendar calendar)", "class_method_signature": "DistinctQueryResult.getCalendarValue(final String columnLabel, final Class<?> type, final Calendar calendar)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final int columnIndex, final String type)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(final int columnIndex, final String type)", "full_signature": "@Override public InputStream getInputStream(final int columnIndex, final String type)", "class_method_signature": "DistinctQueryResult.getInputStream(final int columnIndex, final String type)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final String columnLabel, final String type)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(final String columnLabel, final String type)", "full_signature": "@Override public InputStream getInputStream(final String columnLabel, final String type)", "class_method_signature": "DistinctQueryResult.getInputStream(final String columnLabel, final String type)", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final Object value)", "modifiers": "@SneakyThrows protected", "return": "InputStream", "signature": "InputStream getInputStream(final Object value)", "full_signature": "@SneakyThrows protected InputStream getInputStream(final Object value)", "class_method_signature": "DistinctQueryResult.getInputStream(final Object value)", "testcase": false, "constructor": false}, {"identifier": "wasNull", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean wasNull()", "full_signature": "@Override public boolean wasNull()", "class_method_signature": "DistinctQueryResult.wasNull()", "testcase": false, "constructor": false}, {"identifier": "isCaseSensitive", "parameters": "(final int columnIndex)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCaseSensitive(final int columnIndex)", "full_signature": "@Override public boolean isCaseSensitive(final int columnIndex)", "class_method_signature": "DistinctQueryResult.isCaseSensitive(final int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getColumnCount()", "full_signature": "@Override public int getColumnCount()", "class_method_signature": "DistinctQueryResult.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getColumnLabel", "parameters": "(final int columnIndex)", "modifiers": "@Override public", "return": "String", "signature": "String getColumnLabel(final int columnIndex)", "full_signature": "@Override public String getColumnLabel(final int columnIndex)", "class_method_signature": "DistinctQueryResult.getColumnLabel(final int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "getColumnIndex", "parameters": "(final String columnLabel)", "modifiers": "protected", "return": "Integer", "signature": "Integer getColumnIndex(final String columnLabel)", "full_signature": "protected Integer getColumnIndex(final String columnLabel)", "class_method_signature": "DistinctQueryResult.getColumnIndex(final String columnLabel)", "testcase": false, "constructor": false}], "file": "zebra/zebra-thirdparty/sharding-core-execute/src/main/java/org/apache/shardingsphere/core/execute/sql/execute/result/DistinctQueryResult.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n    public final boolean next() {\n        if (resultData.hasNext()) {\n            currentRow = resultData.next();\n            return true;\n        }\n        currentRow = null;\n        return false;\n    }", "signature": "boolean next()", "full_signature": "@Override public final boolean next()", "class_method_signature": "DistinctQueryResult.next()", "testcase": false, "constructor": false, "invocations": ["hasNext", "next"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}