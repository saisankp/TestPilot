{"test_class": {"identifier": "SecurityRoleFunctionRestControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private SecurityRoleFunctionRestController securityRoleFunctionRestController;", "modifier": "@InjectMocks\n    private", "type": "SecurityRoleFunctionRestController", "declarator": "securityRoleFunctionRestController", "var_name": "securityRoleFunctionRestController"}, {"original_string": "@Mock\n    private SecurityRoleFunctionService securityRoleFunctionService;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionService", "declarator": "securityRoleFunctionService", "var_name": "securityRoleFunctionService"}], "file": "herd-code/herd-rest/src/test/java/org/finra/herd/rest/SecurityRoleFunctionRestControllerTest.java"}, "test_case": {"identifier": "testCreateSecurityRoleFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateSecurityRoleFunction()\n    {\n        // Create a security role function create request.\n        SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest =\n            new SecurityRoleFunctionCreateRequest(new SecurityRoleFunctionKey(SECURITY_ROLE, SECURITY_FUNCTION));\n\n        // Create a security role function.\n        SecurityRoleFunction securityRoleFunction = new SecurityRoleFunction(ID, new SecurityRoleFunctionKey(SECURITY_ROLE, SECURITY_FUNCTION));\n\n        // Mock the external calls.\n        when(securityRoleFunctionService.createSecurityRoleFunction(securityRoleFunctionCreateRequest)).thenReturn(securityRoleFunction);\n\n        // Call the method under test.\n        SecurityRoleFunction result = securityRoleFunctionRestController.createSecurityRoleFunction(securityRoleFunctionCreateRequest);\n\n        // Validate the result.\n        assertEquals(securityRoleFunction, result);\n\n        // Verify the external calls.\n        verify(securityRoleFunctionService).createSecurityRoleFunction(securityRoleFunctionCreateRequest);\n        verifyNoMoreInteractions(securityRoleFunctionService);\n    }", "signature": "void testCreateSecurityRoleFunction()", "full_signature": "@Test public void testCreateSecurityRoleFunction()", "class_method_signature": "SecurityRoleFunctionRestControllerTest.testCreateSecurityRoleFunction()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "createSecurityRoleFunction", "createSecurityRoleFunction", "assertEquals", "createSecurityRoleFunction", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SecurityRoleFunctionRestController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SECURITY_ROLE_FUNCTIONS_URI_PREFIX = \"/securityRoleFunctions\";", "modifier": "private static final", "type": "String", "declarator": "SECURITY_ROLE_FUNCTIONS_URI_PREFIX = \"/securityRoleFunctions\"", "var_name": "SECURITY_ROLE_FUNCTIONS_URI_PREFIX"}, {"original_string": "@Autowired\n    private SecurityRoleFunctionService securityRoleFunctionService;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionService", "declarator": "securityRoleFunctionService", "var_name": "securityRoleFunctionService"}], "methods": [{"identifier": "createSecurityRoleFunction", "parameters": "(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "modifiers": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_POST) public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction createSecurityRoleFunction(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "full_signature": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_POST) public SecurityRoleFunction createSecurityRoleFunction(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "class_method_signature": "SecurityRoleFunctionRestController.createSecurityRoleFunction(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteSecurityRoleFunction", "parameters": "(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "modifiers": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityRoleNames/{securityRoleName}/securityFunctionNames/{securityFunctionName}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_DELETE) public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction deleteSecurityRoleFunction(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "full_signature": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityRoleNames/{securityRoleName}/securityFunctionNames/{securityFunctionName}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_DELETE) public SecurityRoleFunction deleteSecurityRoleFunction(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "class_method_signature": "SecurityRoleFunctionRestController.deleteSecurityRoleFunction(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunction", "parameters": "(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "modifiers": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityRoleNames/{securityRoleName}/securityFunctionNames/{securityFunctionName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_GET) public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction getSecurityRoleFunction(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "full_signature": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityRoleNames/{securityRoleName}/securityFunctionNames/{securityFunctionName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_GET) public SecurityRoleFunction getSecurityRoleFunction(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "class_method_signature": "SecurityRoleFunctionRestController.getSecurityRoleFunction(@PathVariable(\"securityRoleName\") String securityRoleName,\n        @PathVariable(\"securityFunctionName\") String securityFunctionName)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctions", "parameters": "()", "modifiers": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX, method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_ALL_GET) public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctions()", "full_signature": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX, method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_ALL_GET) public SecurityRoleFunctionKeys getSecurityRoleFunctions()", "class_method_signature": "SecurityRoleFunctionRestController.getSecurityRoleFunctions()", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctionsBySecurityFunction", "parameters": "(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "modifiers": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityFunctionNames/{securityFunctionName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_BY_SECURITY_FUNCTION_GET) public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "full_signature": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityFunctionNames/{securityFunctionName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_BY_SECURITY_FUNCTION_GET) public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "class_method_signature": "SecurityRoleFunctionRestController.getSecurityRoleFunctionsBySecurityFunction(@PathVariable(\"securityFunctionName\") String securityFunctionName)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctionsBySecurityRole", "parameters": "(@PathVariable(\"securityRoleName\") String securityRoleName)", "modifiers": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityRoleNames/{securityRoleName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_BY_SECURITY_ROLE_GET) public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(@PathVariable(\"securityRoleName\") String securityRoleName)", "full_signature": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX + \"/securityRoleNames/{securityRoleName}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_BY_SECURITY_ROLE_GET) public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(@PathVariable(\"securityRoleName\") String securityRoleName)", "class_method_signature": "SecurityRoleFunctionRestController.getSecurityRoleFunctionsBySecurityRole(@PathVariable(\"securityRoleName\") String securityRoleName)", "testcase": false, "constructor": false}], "file": "herd-code/herd-rest/src/main/java/org/finra/herd/rest/SecurityRoleFunctionRestController.java"}, "focal_method": {"identifier": "createSecurityRoleFunction", "parameters": "(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "modifiers": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_POST) public", "return": "SecurityRoleFunction", "body": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"})\n    @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_POST)\n    public SecurityRoleFunction createSecurityRoleFunction(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)\n    {\n        return securityRoleFunctionService.createSecurityRoleFunction(securityRoleFunctionCreateRequest);\n    }", "signature": "SecurityRoleFunction createSecurityRoleFunction(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "full_signature": "@RequestMapping(value = SECURITY_ROLE_FUNCTIONS_URI_PREFIX, method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_SECURITY_ROLE_FUNCTIONS_POST) public SecurityRoleFunction createSecurityRoleFunction(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "class_method_signature": "SecurityRoleFunctionRestController.createSecurityRoleFunction(@RequestBody SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "testcase": false, "constructor": false, "invocations": ["createSecurityRoleFunction"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}