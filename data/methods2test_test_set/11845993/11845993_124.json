{"test_class": {"identifier": "ClientSpanServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockTracer mockTracer;", "modifier": "private", "type": "MockTracer", "declarator": "mockTracer", "var_name": "mockTracer"}, {"original_string": "private ClientSpanServlet servlet;", "modifier": "private", "type": "ClientSpanServlet", "declarator": "servlet", "var_name": "servlet"}, {"original_string": "private ServletPlugin servletPlugin;", "modifier": "private", "type": "ServletPlugin", "declarator": "servletPlugin", "var_name": "servletPlugin"}, {"original_string": "private ReportingSpanEventListener reportingSpanEventListener;", "modifier": "private", "type": "ReportingSpanEventListener", "declarator": "reportingSpanEventListener", "var_name": "reportingSpanEventListener"}, {"original_string": "private TracingPlugin tracingPlugin;", "modifier": "private", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}], "file": "stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/eum/ClientSpanServletTest.java"}, "test_case": {"identifier": "testConvertWeaselBeaconToSpan_withDisabledSamplingFlagIsDiscarded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConvertWeaselBeaconToSpan_withDisabledSamplingFlagIsDiscarded() throws ServletException, IOException {\n\t\t// Given\n\t\tMockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest();\n\t\tmockHttpServletRequest.setParameter(\"ty\", \"pl\");\n\t\tmockHttpServletRequest.setParameter(\"r\", \"1496751574200\");\n\t\tmockHttpServletRequest.setParameter(\"u\", \"http://localhost:9966/petclinic/\");\n\t\tmockHttpServletRequest.setParameter(\"ts\", \"-197\");\n\t\tmockHttpServletRequest.setParameter(\"d\", \"518\");\n\t\tmockHttpServletRequest.setParameter(\"sp\", \"0\");\n\t\tmockHttpServletRequest.setParameter(\"t_unl\", \"0\");\n\t\tmockHttpServletRequest.setParameter(\"t_red\", \"500\");\n\t\tmockHttpServletRequest.setParameter(\"t_apc\", \"5\");\n\t\tmockHttpServletRequest.setParameter(\"t_dns\", \"0\");\n\t\tmockHttpServletRequest.setParameter(\"t_tcp\", \"0\");\n\t\tmockHttpServletRequest.setParameter(\"t_ssl\", \"2\");\n\t\tmockHttpServletRequest.setParameter(\"t_req\", \"38\");\n\t\tmockHttpServletRequest.setParameter(\"t_rsp\", \"4\");\n\t\tmockHttpServletRequest.setParameter(\"t_pro\", \"471\");\n\t\tmockHttpServletRequest.setParameter(\"t_loa\", \"5\");\n\t\tmockHttpServletRequest.setParameter(\"t_fp\", \"151\");\n\t\tmockHttpServletRequest.setParameter(\"t_fp\", \"151\");\n\n\t\t// When\n\t\tservlet.doPost(mockHttpServletRequest, new MockHttpServletResponse());\n\n\t\t// Then\n\t\tassertSpanIsDiscarded();\n\t}", "signature": "void testConvertWeaselBeaconToSpan_withDisabledSamplingFlagIsDiscarded()", "full_signature": "@Test public void testConvertWeaselBeaconToSpan_withDisabledSamplingFlagIsDiscarded()", "class_method_signature": "ClientSpanServletTest.testConvertWeaselBeaconToSpan_withDisabledSamplingFlagIsDiscarded()", "testcase": true, "constructor": false, "invocations": ["setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "setParameter", "doPost", "assertSpanIsDiscarded"]}, "focal_class": {"identifier": "ClientSpanServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "static final String PARAMETER_TYPE = \"ty\";", "modifier": "static final", "type": "String", "declarator": "PARAMETER_TYPE = \"ty\"", "var_name": "PARAMETER_TYPE"}, {"original_string": "static final String TYPE_PAGE_LOAD = \"pl\";", "modifier": "static final", "type": "String", "declarator": "TYPE_PAGE_LOAD = \"pl\"", "var_name": "TYPE_PAGE_LOAD"}, {"original_string": "static final String TYPE_ERROR = \"err\";", "modifier": "static final", "type": "String", "declarator": "TYPE_ERROR = \"err\"", "var_name": "TYPE_ERROR"}, {"original_string": "static final String TYPE_XHR = \"xhr\";", "modifier": "static final", "type": "String", "declarator": "TYPE_XHR = \"xhr\"", "var_name": "TYPE_XHR"}, {"original_string": "private static final String PARAMETER_TIME_STAMP = \"ts\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_TIME_STAMP = \"ts\"", "var_name": "PARAMETER_TIME_STAMP"}, {"original_string": "private static final String PARAMETER_REFERENCE_TIMESTAMP = \"r\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_REFERENCE_TIMESTAMP = \"r\"", "var_name": "PARAMETER_REFERENCE_TIMESTAMP"}, {"original_string": "private static final String PARAMETER_DURATION = \"d\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_DURATION = \"d\"", "var_name": "PARAMETER_DURATION"}, {"original_string": "private static final String PARAMETER_URL = \"u\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_URL = \"u\"", "var_name": "PARAMETER_URL"}, {"original_string": "private static final String PARAMETER_LOCATION = \"l\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_LOCATION = \"l\"", "var_name": "PARAMETER_LOCATION"}, {"original_string": "private static final String ACCESS_CONTROL_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_CONTROL_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\"", "var_name": "ACCESS_CONTROL_ALLOW_ORIGIN"}, {"original_string": "private static final String ACCESS_CONTROL_ALLOW_METHODS = \"Access-Control-Allow-Methods\";", "modifier": "private static final", "type": "String", "declarator": "ACCESS_CONTROL_ALLOW_METHODS = \"Access-Control-Allow-Methods\"", "var_name": "ACCESS_CONTROL_ALLOW_METHODS"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClientSpanServlet.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClientSpanServlet.class)", "var_name": "logger"}, {"original_string": "private static final String SAMPLED_FLAG = \"sp\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLED_FLAG = \"sp\"", "var_name": "SAMPLED_FLAG"}, {"original_string": "private static final String BACKEND_TRACE_ID = \"bt\";", "modifier": "private static final", "type": "String", "declarator": "BACKEND_TRACE_ID = \"bt\"", "var_name": "BACKEND_TRACE_ID"}, {"original_string": "private final TracingPlugin tracingPlugin;", "modifier": "private final", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}, {"original_string": "private final List<ClientSpanTagProcessor> tagProcessors;", "modifier": "private final", "type": "List<ClientSpanTagProcessor>", "declarator": "tagProcessors", "var_name": "tagProcessors"}, {"original_string": "private UserAgentParser userAgentParser;", "modifier": "private", "type": "UserAgentParser", "declarator": "userAgentParser", "var_name": "userAgentParser"}, {"original_string": "private final ServletPlugin servletPlugin;", "modifier": "private final", "type": "ServletPlugin", "declarator": "servletPlugin", "var_name": "servletPlugin"}], "methods": [{"identifier": "ClientSpanServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " ClientSpanServlet()", "full_signature": "public  ClientSpanServlet()", "class_method_signature": "ClientSpanServlet.ClientSpanServlet()", "testcase": false, "constructor": true}, {"identifier": "ClientSpanServlet", "parameters": "(TracingPlugin tracingPlugin, ServletPlugin servletPlugin)", "modifiers": "", "return": "", "signature": " ClientSpanServlet(TracingPlugin tracingPlugin, ServletPlugin servletPlugin)", "full_signature": "  ClientSpanServlet(TracingPlugin tracingPlugin, ServletPlugin servletPlugin)", "class_method_signature": "ClientSpanServlet.ClientSpanServlet(TracingPlugin tracingPlugin, ServletPlugin servletPlugin)", "testcase": false, "constructor": true}, {"identifier": "initializeDefaultTagProcessors", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeDefaultTagProcessors()", "full_signature": "private void initializeDefaultTagProcessors()", "class_method_signature": "ClientSpanServlet.initializeDefaultTagProcessors()", "testcase": false, "constructor": false}, {"identifier": "durationProcessor", "parameters": "(String typePageLoad, String tagName)", "modifiers": "private", "return": "ClientSpanTagProcessor", "signature": "ClientSpanTagProcessor durationProcessor(String typePageLoad, String tagName)", "full_signature": "private ClientSpanTagProcessor durationProcessor(String typePageLoad, String tagName)", "class_method_signature": "ClientSpanServlet.durationProcessor(String typePageLoad, String tagName)", "testcase": false, "constructor": false}, {"identifier": "durationProcessor", "parameters": "(String beaconType, String tagName, String requestParameterName)", "modifiers": "private", "return": "ClientSpanTagProcessor", "signature": "ClientSpanTagProcessor durationProcessor(String beaconType, String tagName, String requestParameterName)", "full_signature": "private ClientSpanTagProcessor durationProcessor(String beaconType, String tagName, String requestParameterName)", "class_method_signature": "ClientSpanServlet.durationProcessor(String beaconType, String tagName, String requestParameterName)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ClientSpanServlet.doGet(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ClientSpanServlet.doPost(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doOptions", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doOptions(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doOptions(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ClientSpanServlet.doOptions(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "private", "return": "void", "signature": "void handleRequest(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "private void handleRequest(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ClientSpanServlet.handleRequest(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "setCorsHeaders", "parameters": "(HttpServletResponse resp)", "modifiers": "private", "return": "void", "signature": "void setCorsHeaders(HttpServletResponse resp)", "full_signature": "private void setCorsHeaders(HttpServletResponse resp)", "class_method_signature": "ClientSpanServlet.setCorsHeaders(HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "addTagProcessor", "parameters": "(ClientSpanTagProcessor tagProcessor)", "modifiers": "private", "return": "void", "signature": "void addTagProcessor(ClientSpanTagProcessor tagProcessor)", "full_signature": "private void addTagProcessor(ClientSpanTagProcessor tagProcessor)", "class_method_signature": "ClientSpanServlet.addTagProcessor(ClientSpanTagProcessor tagProcessor)", "testcase": false, "constructor": false}, {"identifier": "convertWeaselBeaconToSpan", "parameters": "(HttpServletRequest httpServletRequest)", "modifiers": "", "return": "void", "signature": "void convertWeaselBeaconToSpan(HttpServletRequest httpServletRequest)", "full_signature": " void convertWeaselBeaconToSpan(HttpServletRequest httpServletRequest)", "class_method_signature": "ClientSpanServlet.convertWeaselBeaconToSpan(HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "getOperationName", "parameters": "(HttpServletRequest httpServletRequest)", "modifiers": "private", "return": "String", "signature": "String getOperationName(HttpServletRequest httpServletRequest)", "full_signature": "private String getOperationName(HttpServletRequest httpServletRequest)", "class_method_signature": "ClientSpanServlet.getOperationName(HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}, {"identifier": "getHttpUrl", "parameters": "(HttpServletRequest httpServletRequest)", "modifiers": "private", "return": "String", "signature": "String getHttpUrl(HttpServletRequest httpServletRequest)", "full_signature": "private String getHttpUrl(HttpServletRequest httpServletRequest)", "class_method_signature": "ClientSpanServlet.getHttpUrl(HttpServletRequest httpServletRequest)", "testcase": false, "constructor": false}], "file": "stagemonitor-web-servlet/src/main/java/org/stagemonitor/web/servlet/eum/ClientSpanServlet.java"}, "focal_method": {"identifier": "doPost", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n\tprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\t\thandleRequest(req, resp);\n\t}", "signature": "void doPost(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doPost(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ClientSpanServlet.doPost(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["handleRequest"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}