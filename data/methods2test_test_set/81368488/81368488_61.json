{"test_class": {"identifier": "AreaOfInterestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private GazePlay mockGazePlay;", "modifier": "@Mock\n    private", "type": "GazePlay", "declarator": "mockGazePlay", "var_name": "mockGazePlay"}, {"original_string": "@Mock\n    private Stats mocksStats;", "modifier": "@Mock\n    private", "type": "Stats", "declarator": "mocksStats", "var_name": "mocksStats"}, {"original_string": "SavedStatsInfo statsInfo = new SavedStatsInfo(\n        new File(\"file1.csv\"),\n        new File(\"metricsMouse.csv\"),\n        new File(\"metricsGaze.csv\"),\n        new File(\"metricsBoth.csv\"),\n        new File(\"screenshot.png\"),\n        new File(\"colors.txt\")\n    );", "modifier": "", "type": "SavedStatsInfo", "declarator": "statsInfo = new SavedStatsInfo(\n        new File(\"file1.csv\"),\n        new File(\"metricsMouse.csv\"),\n        new File(\"metricsGaze.csv\"),\n        new File(\"metricsBoth.csv\"),\n        new File(\"screenshot.png\"),\n        new File(\"colors.txt\")\n    )", "var_name": "statsInfo"}, {"original_string": "Dimension2D screen = new Dimension2D(700, 800);", "modifier": "", "type": "Dimension2D", "declarator": "screen = new Dimension2D(700, 800)", "var_name": "screen"}, {"original_string": "Supplier<Dimension2D> supplier = () -> screen;", "modifier": "", "type": "Supplier<Dimension2D>", "declarator": "supplier = () -> screen", "var_name": "supplier"}], "file": "gazeplay-core/src/test/java/net/gazeplay/ui/scenes/stats/AreaOfInterestTest.java"}, "test_case": {"identifier": "shouldCalculateConvexHull", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCalculateConvexHull() {\n        Point2D[] input = new Point2D[]{\n            new Point2D(2, 2),\n            new Point2D(2, 3),\n            new Point2D(3, 5),\n            new Point2D(1, 2),\n            new Point2D(1.25, 3),\n            new Point2D(2, 1),\n            new Point2D(4, 2)\n        };\n\n        Double[] expected = new Double[]{\n            1d, 2d, 2d, 1d, 4d, 2d, 3d, 5d, 1.25, 3d\n        };\n\n        Double[] actual = AreaOfInterest.calculateConvexHull(input);\n\n        assertArrayEquals(expected, actual);\n    }", "signature": "void shouldCalculateConvexHull()", "full_signature": "@Test void shouldCalculateConvexHull()", "class_method_signature": "AreaOfInterestTest.shouldCalculateConvexHull()", "testcase": true, "constructor": false, "invocations": ["calculateConvexHull", "assertArrayEquals"]}, "focal_class": {"identifier": "AreaOfInterest", "superclass": "extends GraphicalContext<BorderPane>", "interfaces": "", "fields": [{"original_string": "private final List<CoordinatesTracker> movementHistory;", "modifier": "private final", "type": "List<CoordinatesTracker>", "declarator": "movementHistory", "var_name": "movementHistory"}, {"original_string": "private final Label timeLabel;", "modifier": "private final", "type": "Label", "declarator": "timeLabel", "var_name": "timeLabel"}, {"original_string": "private Timeline clock;", "modifier": "private", "type": "Timeline", "declarator": "clock", "var_name": "clock"}, {"original_string": "private MediaPlayer player;", "modifier": "private", "type": "MediaPlayer", "declarator": "player", "var_name": "player"}, {"original_string": "private final List<AreaOfInterestProps> allAOIList;", "modifier": "private final", "type": "List<AreaOfInterestProps>", "declarator": "allAOIList", "var_name": "allAOIList"}, {"original_string": "private List<CoordinatesTracker> areaOfInterestList;", "modifier": "private", "type": "List<CoordinatesTracker>", "declarator": "areaOfInterestList", "var_name": "areaOfInterestList"}, {"original_string": "private final List<List> allAOIListTemp;", "modifier": "private final", "type": "List<List>", "declarator": "allAOIListTemp", "var_name": "allAOIListTemp"}, {"original_string": "private final List<int[]> startAndEndIdx;", "modifier": "private final", "type": "List<int[]>", "declarator": "startAndEndIdx", "var_name": "startAndEndIdx"}, {"original_string": "private final List<Polygon> allAOIListPolygon;", "modifier": "private final", "type": "List<Polygon>", "declarator": "allAOIListPolygon", "var_name": "allAOIListPolygon"}, {"original_string": "private final List<Double[]> allAOIListPolygonPt;", "modifier": "private final", "type": "List<Double[]>", "declarator": "allAOIListPolygonPt", "var_name": "allAOIListPolygonPt"}, {"original_string": "private final Color[] colors = new Color[]{\n        Color.PURPLE,\n        Color.WHITE,\n        Color.PINK,\n        Color.ORANGE,\n        Color.BLUE,\n        Color.RED,\n        Color.CHOCOLATE\n    };", "modifier": "private final", "type": "Color[]", "declarator": "colors = new Color[]{\n        Color.PURPLE,\n        Color.WHITE,\n        Color.PINK,\n        Color.ORANGE,\n        Color.BLUE,\n        Color.RED,\n        Color.CHOCOLATE\n    }", "var_name": "colors"}, {"original_string": "private final Configuration config;", "modifier": "private final", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private Polygon currentAreaDisplay;", "modifier": "private", "type": "Polygon", "declarator": "currentAreaDisplay", "var_name": "currentAreaDisplay"}, {"original_string": "private GridPane currentInfoBox;", "modifier": "private", "type": "GridPane", "declarator": "currentInfoBox", "var_name": "currentInfoBox"}, {"original_string": "private Line currentLineToInfoBox;", "modifier": "private", "type": "Line", "declarator": "currentLineToInfoBox", "var_name": "currentLineToInfoBox"}, {"original_string": "private double score;", "modifier": "private", "type": "double", "declarator": "score", "var_name": "score"}, {"original_string": "private int colorIterator;", "modifier": "private", "type": "int", "declarator": "colorIterator", "var_name": "colorIterator"}, {"original_string": "private final Pane graphicsPane;", "modifier": "private final", "type": "Pane", "declarator": "graphicsPane", "var_name": "graphicsPane"}, {"original_string": "private Double previousInfoBoxX;", "modifier": "private", "type": "Double", "declarator": "previousInfoBoxX", "var_name": "previousInfoBoxX"}, {"original_string": "private Double previousInfoBoxY;", "modifier": "private", "type": "Double", "declarator": "previousInfoBoxY", "var_name": "previousInfoBoxY"}, {"original_string": "private final ArrayList<InitialAreaOfInterestProps> combinedAreaList;", "modifier": "private final", "type": "ArrayList<InitialAreaOfInterestProps>", "declarator": "combinedAreaList", "var_name": "combinedAreaList"}, {"original_string": "private final int[] areaMap;", "modifier": "private final", "type": "int[]", "declarator": "areaMap", "var_name": "areaMap"}, {"original_string": "private boolean playing = false;", "modifier": "private", "type": "boolean", "declarator": "playing = false", "var_name": "playing"}, {"original_string": "private double highestFixationTime = 0;", "modifier": "private", "type": "double", "declarator": "highestFixationTime = 0", "var_name": "highestFixationTime"}, {"original_string": "private int intereatorAOI = 0;", "modifier": "private", "type": "int", "declarator": "intereatorAOI = 0", "var_name": "intereatorAOI"}], "methods": [{"identifier": "AreaOfInterest", "parameters": "(final GazePlay gazePlay, final Stats stats)", "modifiers": "public", "return": "", "signature": " AreaOfInterest(final GazePlay gazePlay, final Stats stats)", "full_signature": "public  AreaOfInterest(final GazePlay gazePlay, final Stats stats)", "class_method_signature": "AreaOfInterest.AreaOfInterest(final GazePlay gazePlay, final Stats stats)", "testcase": false, "constructor": true}, {"identifier": "createButtonBox", "parameters": "()", "modifiers": "", "return": "HBox", "signature": "HBox createButtonBox()", "full_signature": " HBox createButtonBox()", "class_method_signature": "AreaOfInterest.createButtonBox()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "ObservableList<Node>", "signature": "ObservableList<Node> getChildren()", "full_signature": "@Override public ObservableList<Node> getChildren()", "class_method_signature": "AreaOfInterest.getChildren()", "testcase": false, "constructor": false}, {"identifier": "dataTreatment", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void dataTreatment()", "full_signature": "private void dataTreatment()", "class_method_signature": "AreaOfInterest.dataTreatment()", "testcase": false, "constructor": false}, {"identifier": "playButtonPressed", "parameters": "(final double progressRate)", "modifiers": "private", "return": "void", "signature": "void playButtonPressed(final double progressRate)", "full_signature": "private void playButtonPressed(final double progressRate)", "class_method_signature": "AreaOfInterest.playButtonPressed(final double progressRate)", "testcase": false, "constructor": false}, {"identifier": "plotMovement", "parameters": "(final int movementIndex, final Pane graphicsPane, final double progressRate)", "modifiers": "private", "return": "void", "signature": "void plotMovement(final int movementIndex, final Pane graphicsPane, final double progressRate)", "full_signature": "private void plotMovement(final int movementIndex, final Pane graphicsPane, final double progressRate)", "class_method_signature": "AreaOfInterest.plotMovement(final int movementIndex, final Pane graphicsPane, final double progressRate)", "testcase": false, "constructor": false}, {"identifier": "addAllInitialArea", "parameters": "()", "modifiers": "", "return": "void", "signature": "void addAllInitialArea()", "full_signature": " void addAllInitialArea()", "class_method_signature": "AreaOfInterest.addAllInitialArea()", "testcase": false, "constructor": false}, {"identifier": "calculateAreaOfInterest", "parameters": "(final int index, final double startTime)", "modifiers": "private", "return": "void", "signature": "void calculateAreaOfInterest(final int index, final double startTime)", "full_signature": "private void calculateAreaOfInterest(final int index, final double startTime)", "class_method_signature": "AreaOfInterest.calculateAreaOfInterest(final int index, final double startTime)", "testcase": false, "constructor": false}, {"identifier": "calculateInfoBox", "parameters": "(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "modifiers": "", "return": "InfoBoxProps", "signature": "InfoBoxProps calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "full_signature": " InfoBoxProps calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "class_method_signature": "AreaOfInterest.calculateInfoBox(\n        final String aoiID,\n        final double ttff,\n        final double timeSpent,\n        final int fixations,\n        final int centerX,\n        final int centerY,\n        final Polygon currentAreaDisplay\n    )", "testcase": false, "constructor": false}, {"identifier": "calculateRectangle", "parameters": "(final Point2D[] point2D)", "modifiers": "static", "return": "Double[]", "signature": "Double[] calculateRectangle(final Point2D[] point2D)", "full_signature": "static Double[] calculateRectangle(final Point2D[] point2D)", "class_method_signature": "AreaOfInterest.calculateRectangle(final Point2D[] point2D)", "testcase": false, "constructor": false}, {"identifier": "orientation", "parameters": "(final Point2D p1, final Point2D p2, final Point2D p3)", "modifiers": "static", "return": "int", "signature": "int orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "full_signature": "static int orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "class_method_signature": "AreaOfInterest.orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "testcase": false, "constructor": false}, {"identifier": "calculateConvexHull", "parameters": "(final Point2D[] points)", "modifiers": "static", "return": "Double[]", "signature": "Double[] calculateConvexHull(final Point2D[] points)", "full_signature": "static Double[] calculateConvexHull(final Point2D[] points)", "class_method_signature": "AreaOfInterest.calculateConvexHull(final Point2D[] points)", "testcase": false, "constructor": false}, {"identifier": "calculateTargetAOI", "parameters": "(final ArrayList<TargetAOI> targetAOIArrayList)", "modifiers": "static", "return": "void", "signature": "void calculateTargetAOI(final ArrayList<TargetAOI> targetAOIArrayList)", "full_signature": "static void calculateTargetAOI(final ArrayList<TargetAOI> targetAOIArrayList)", "class_method_signature": "AreaOfInterest.calculateTargetAOI(final ArrayList<TargetAOI> targetAOIArrayList)", "testcase": false, "constructor": false}, {"identifier": "makeInfoBox", "parameters": "(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "modifiers": "static", "return": "GridPane", "signature": "GridPane makeInfoBox(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "full_signature": "static GridPane makeInfoBox(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "class_method_signature": "AreaOfInterest.makeInfoBox(\n        final String aoiID,\n        final String ttff,\n        final String timeSpent,\n        final int fixations,\n        final int revisits\n    )", "testcase": false, "constructor": false}, {"identifier": "computeConnectedArea", "parameters": "()", "modifiers": "private", "return": "ArrayList<InitialAreaOfInterestProps>", "signature": "ArrayList<InitialAreaOfInterestProps> computeConnectedArea()", "full_signature": "private ArrayList<InitialAreaOfInterestProps> computeConnectedArea()", "class_method_signature": "AreaOfInterest.computeConnectedArea()", "testcase": false, "constructor": false}], "file": "gazeplay-core/src/main/java/net/gazeplay/ui/scenes/stats/AreaOfInterest.java"}, "focal_method": {"identifier": "calculateConvexHull", "parameters": "(final Point2D[] points)", "modifiers": "static", "return": "Double[]", "body": "static Double[] calculateConvexHull(final Point2D[] points) {\n        final int numberOfPoints = points.length;\n        final ArrayList<Double> convexHullPoints = new ArrayList<>();\n        final Vector<Point2D> hull = new Vector<>();\n\n        // Finding the index of the lowest X value, or left-most point, in all points.\n        int lowestValueIndex = 0;\n        for (int i = 1; i < numberOfPoints; i++) {\n            if (points[i].getX() < points[lowestValueIndex].getX()) {\n                lowestValueIndex = i;\n            }\n        }\n\n        int point = lowestValueIndex, q;\n        do {\n            hull.add(points[point]);\n            q = (point + 1) % numberOfPoints;\n            for (int i = 0; i < numberOfPoints; i++) {\n                if (orientation(points[point], points[i], points[q]) < 0) { // Checking if the points are convex.\n                    q = i;\n                }\n            }\n            point = q;\n        } while (point != lowestValueIndex);\n\n        for (final Point2D temp : hull) {\n            convexHullPoints.add(temp.getX());\n            convexHullPoints.add(temp.getY());\n        }\n\n        Double[] hullPointsArray = new Double[convexHullPoints.size()];\n        convexHullPoints.toArray(hullPointsArray);\n\n        return hullPointsArray;\n    }", "signature": "Double[] calculateConvexHull(final Point2D[] points)", "full_signature": "static Double[] calculateConvexHull(final Point2D[] points)", "class_method_signature": "AreaOfInterest.calculateConvexHull(final Point2D[] points)", "testcase": false, "constructor": false, "invocations": ["getX", "getX", "add", "orientation", "add", "getX", "add", "getY", "size", "toArray"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}