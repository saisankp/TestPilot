{"test_class": {"identifier": "StatusResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "HealthCheckRegistry registry;", "modifier": "", "type": "HealthCheckRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "Environment environment;", "modifier": "", "type": "Environment", "declarator": "environment", "var_name": "environment"}, {"original_string": "StatusResource status;", "modifier": "", "type": "StatusResource", "declarator": "status", "var_name": "status"}, {"original_string": "KeywhizConfig keywhizConfig;", "modifier": "", "type": "KeywhizConfig", "declarator": "keywhizConfig", "var_name": "keywhizConfig"}], "file": "server/src/test/java/keywhiz/service/resources/StatusResourceTest.java"}, "test_case": {"identifier": "testStatusOk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testStatusOk() throws Exception {\n    when(registry.runHealthChecks()).thenReturn(new TreeMap<>());\n    Response r = status.get();\n    assertThat(r.getStatus()).isEqualTo(200);\n  }", "signature": "void testStatusOk()", "full_signature": "@Test public void testStatusOk()", "class_method_signature": "StatusResourceTest.testStatusOk()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "runHealthChecks", "get", "isEqualTo", "assertThat", "getStatus"]}, "focal_class": {"identifier": "StatusResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SecretDeliveryResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SecretDeliveryResource.class)", "var_name": "logger"}, {"original_string": "Supplier<SortedMap<String, HealthCheck.Result>> memoizedCheck;", "modifier": "", "type": "Supplier<SortedMap<String, HealthCheck.Result>>", "declarator": "memoizedCheck", "var_name": "memoizedCheck"}], "methods": [{"identifier": "StatusResource", "parameters": "(KeywhizConfig keywhizConfig, Environment environment)", "modifiers": "@Inject public", "return": "", "signature": " StatusResource(KeywhizConfig keywhizConfig, Environment environment)", "full_signature": "@Inject public  StatusResource(KeywhizConfig keywhizConfig, Environment environment)", "class_method_signature": "StatusResource.StatusResource(KeywhizConfig keywhizConfig, Environment environment)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "signature": "Response get()", "full_signature": "@Timed @ExceptionMetered @GET public Response get()", "class_method_signature": "StatusResource.get()", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/StatusResource.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "body": "@Timed @ExceptionMetered\n  @GET\n  public Response get() {\n    SortedMap<String, HealthCheck.Result> results = memoizedCheck.get();\n\n    List<String> failing = results.entrySet().stream()\n        .filter(r -> !r.getValue().isHealthy())\n        .map(Map.Entry::getKey)\n        .collect(toList());\n\n    if (!failing.isEmpty()) {\n      logger.warn(\"Health checks failed: {}\", results);\n      String message = \"failing health checks: \" + Arrays.toString(failing.toArray());\n      StatusResponse sr = new StatusResponse(\"critical\", message, results);\n      return Response.serverError().entity(sr).build();\n    }\n    StatusResponse sr = new StatusResponse(\"ok\", \"ok\", results);\n    return Response.ok(sr).build();\n  }", "signature": "Response get()", "full_signature": "@Timed @ExceptionMetered @GET public Response get()", "class_method_signature": "StatusResource.get()", "testcase": false, "constructor": false, "invocations": ["get", "collect", "map", "filter", "stream", "entrySet", "isHealthy", "getValue", "toList", "isEmpty", "warn", "toString", "toArray", "build", "entity", "serverError", "build", "ok"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}