{"test_class": {"identifier": "GetEncoderListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GetEncoderList getEncoderList;", "modifier": "private", "type": "GetEncoderList", "declarator": "getEncoderList", "var_name": "getEncoderList"}, {"original_string": "@Mock\n    private ThreadExecutor mockThreadExecutor;", "modifier": "@Mock\n    private", "type": "ThreadExecutor", "declarator": "mockThreadExecutor", "var_name": "mockThreadExecutor"}, {"original_string": "@Mock\n    private PostExecutionThread mockPostExecutionThread;", "modifier": "@Mock\n    private", "type": "PostExecutionThread", "declarator": "mockPostExecutionThread", "var_name": "mockPostExecutionThread"}, {"original_string": "@Mock\n    private DvrRepository mockDvrRepository;", "modifier": "@Mock\n    private", "type": "DvrRepository", "declarator": "mockDvrRepository", "var_name": "mockDvrRepository"}], "file": "mythtv-player/src/test/java/org/mythtv/android/domain/interactor/GetEncoderListTest.java"}, "test_case": {"identifier": "testGetEncoderListUseCaseObservableHappyCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEncoderListUseCaseObservableHappyCase() {\n\n        getEncoderList.buildUseCaseObservable();\n\n        verify( mockDvrRepository ).encoders();\n        verifyNoMoreInteractions( mockDvrRepository );\n        verifyZeroInteractions( mockThreadExecutor );\n        verifyZeroInteractions( mockPostExecutionThread );\n\n    }", "signature": "void testGetEncoderListUseCaseObservableHappyCase()", "full_signature": "@Test public void testGetEncoderListUseCaseObservableHappyCase()", "class_method_signature": "GetEncoderListTest.testGetEncoderListUseCaseObservableHappyCase()", "testcase": true, "constructor": false, "invocations": ["buildUseCaseObservable", "encoders", "verify", "verifyNoMoreInteractions", "verifyZeroInteractions", "verifyZeroInteractions"]}, "focal_class": {"identifier": "GetEncoderList", "superclass": "extends UseCase", "interfaces": "", "fields": [{"original_string": "private final DvrRepository dvrRepository;", "modifier": "private final", "type": "DvrRepository", "declarator": "dvrRepository", "var_name": "dvrRepository"}], "methods": [{"identifier": "GetEncoderList", "parameters": "( DvrRepository dvrRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "modifiers": "@Inject public", "return": "", "signature": " GetEncoderList( DvrRepository dvrRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "full_signature": "@Inject public  GetEncoderList( DvrRepository dvrRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "class_method_signature": "GetEncoderList.GetEncoderList( DvrRepository dvrRepository, ThreadExecutor threadExecutor, PostExecutionThread postExecutionThread )", "testcase": false, "constructor": true}, {"identifier": "buildUseCaseObservable", "parameters": "()", "modifiers": "@Override public", "return": "Observable", "signature": "Observable buildUseCaseObservable()", "full_signature": "@Override public Observable buildUseCaseObservable()", "class_method_signature": "GetEncoderList.buildUseCaseObservable()", "testcase": false, "constructor": false}], "file": "mythtv-player/src/main/java/org/mythtv/android/domain/interactor/GetEncoderList.java"}, "focal_method": {"identifier": "buildUseCaseObservable", "parameters": "()", "modifiers": "@Override public", "return": "Observable", "body": "@Override\n    public Observable buildUseCaseObservable() {\n        return this.dvrRepository.encoders();\n    }", "signature": "Observable buildUseCaseObservable()", "full_signature": "@Override public Observable buildUseCaseObservable()", "class_method_signature": "GetEncoderList.buildUseCaseObservable()", "testcase": false, "constructor": false, "invocations": ["encoders"]}, "repository": {"repo_id": 27323134, "url": "https://github.com/MythTV-Clients/MythtvPlayerForAndroid", "stars": 17, "created": "11/30/2014 3:26:45 AM +00:00", "updates": "2019-12-31T22:13:00+00:00", "fork": "False", "license": "licensed"}}