{"test_class": {"identifier": "SingleParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Environment<String> environment = spy(new StubEnvironment<>());", "modifier": "", "type": "Environment<String>", "declarator": "environment = spy(new StubEnvironment<>())", "var_name": "environment"}, {"original_string": "StubParser resolver = new StubParser(environment);", "modifier": "", "type": "StubParser", "declarator": "resolver = new StubParser(environment)", "var_name": "resolver"}], "file": "scribe/core/src/test/java/com/karuslabs/scribe/core/parsers/SingleParserTest.java"}, "test_case": {"identifier": "check_one", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void check_one() {\n        resolver.check(Set.of(\"a\"));\n        verifyNoInteractions(environment);\n    }", "signature": "void check_one()", "full_signature": "@Test void check_one()", "class_method_signature": "SingleParserTest.check_one()", "testcase": true, "constructor": false, "invocations": ["check", "of", "verifyNoInteractions"]}, "focal_class": {"identifier": "SingleParser", "superclass": "extends Parser<T>", "interfaces": "", "fields": [{"original_string": "protected String name;", "modifier": "protected", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "SingleParser", "parameters": "(Environment environment, Set<Class<? extends Annotation>> annotations, String name)", "modifiers": "public", "return": "", "signature": " SingleParser(Environment environment, Set<Class<? extends Annotation>> annotations, String name)", "full_signature": "public  SingleParser(Environment environment, Set<Class<? extends Annotation>> annotations, String name)", "class_method_signature": "SingleParser.SingleParser(Environment environment, Set<Class<? extends Annotation>> annotations, String name)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "(Set<T> types)", "modifiers": "@Override protected", "return": "void", "signature": "void check(Set<T> types)", "full_signature": "@Override protected void check(Set<T> types)", "class_method_signature": "SingleParser.check(Set<T> types)", "testcase": false, "constructor": false}], "file": "scribe/core/src/main/java/com/karuslabs/scribe/core/parsers/SingleParser.java"}, "focal_method": {"identifier": "check", "parameters": "(Set<T> types)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void check(Set<T> types) {\n        if (types.size() > 1) {\n            for (var type : types) {\n                environment.error(type, \"Project contains \" + types.size() + \" @\" + name + \" annotations, should contain one @\" + name + \" annotation\");\n            }\n        }\n    }", "signature": "void check(Set<T> types)", "full_signature": "@Override protected void check(Set<T> types)", "class_method_signature": "SingleParser.check(Set<T> types)", "testcase": false, "constructor": false, "invocations": ["size", "error", "size"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}