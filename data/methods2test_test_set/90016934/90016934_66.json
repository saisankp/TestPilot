{"test_class": {"identifier": "TestSourceService", "superclass": "extends AbstractTestNGSpringContextTests", "interfaces": "", "fields": [{"original_string": "@Autowired\n   private SourceService service;", "modifier": "@Autowired\n   private", "type": "SourceService", "declarator": "service", "var_name": "service"}], "file": "core/src/test/java/fr/gael/dhus/service/TestSourceService.java"}, "test_case": {"identifier": "sortSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void sortSource()\n   {\n      Source source0 = EasyMock.createMock(Source.class);\n      source0.setId(0);\n      EasyMock.expect(source0.getBandwidth()).andStubReturn(3L);\n      EasyMock.expect(source0.getId()).andStubReturn(0);\n\n      Source source1 = EasyMock.createMock(Source.class);\n      source1.setId(1);\n      EasyMock.expect(source1.getBandwidth()).andStubReturn(12L);\n      EasyMock.expect(source1.getId()).andStubReturn(1);\n\n      Source source2 = EasyMock.createMock(Source.class);\n      source2.setId(2);\n      EasyMock.expect(source2.getBandwidth()).andStubReturn(1L);\n      EasyMock.expect(source2.getId()).andStubReturn(2);\n\n      Source source3 = EasyMock.createMock(Source.class);\n      source3.setId(3);\n      EasyMock.expect(source3.getBandwidth()).andStubReturn(3L);\n      EasyMock.expect(source3.getId()).andStubReturn(3);\n\n      Source source4 = EasyMock.createMock(Source.class);\n      source4.setId(4);\n      EasyMock.expect(source4.getBandwidth()).andStubReturn(8L);\n      EasyMock.expect(source4.getId()).andStubReturn(4);\n\n      Source source5 = EasyMock.createMock(Source.class);\n      source5.setId(5);\n      EasyMock.expect(source5.getBandwidth()).andStubReturn(-1L);\n      EasyMock.expect(source5.getId()).andStubReturn(5);\n\n      EasyMock.replay(source0, source1, source2, source3, source4, source5);\n      List<Source> sources = Arrays.asList(source0, source1, source2, source3, source4, source5);\n      List<Source> sortedList = service.sortSources(sources);\n\n      Assert.assertNotNull(sortedList);\n      Assert.assertEquals(sortedList.size(), 6);\n      Assert.assertEquals(sortedList.get(0).getId(), 5);\n      Assert.assertEquals(sortedList.get(1).getId(), 1);\n      Assert.assertEquals(sortedList.get(2).getId(), 4);\n      Assert.assertEquals(sortedList.get(3).getId(), 0);\n      Assert.assertEquals(sortedList.get(4).getId(), 3);\n      Assert.assertEquals(sortedList.get(5).getId(), 2);\n   }", "signature": "void sortSource()", "full_signature": "@Test public void sortSource()", "class_method_signature": "TestSourceService.sortSource()", "testcase": true, "constructor": false, "invocations": ["createMock", "setId", "andStubReturn", "expect", "getBandwidth", "andStubReturn", "expect", "getId", "createMock", "setId", "andStubReturn", "expect", "getBandwidth", "andStubReturn", "expect", "getId", "createMock", "setId", "andStubReturn", "expect", "getBandwidth", "andStubReturn", "expect", "getId", "createMock", "setId", "andStubReturn", "expect", "getBandwidth", "andStubReturn", "expect", "getId", "createMock", "setId", "andStubReturn", "expect", "getBandwidth", "andStubReturn", "expect", "getId", "createMock", "setId", "andStubReturn", "expect", "getBandwidth", "andStubReturn", "expect", "getId", "replay", "asList", "sortSources", "assertNotNull", "assertEquals", "size", "assertEquals", "getId", "get", "assertEquals", "getId", "get", "assertEquals", "getId", "get", "assertEquals", "getId", "get", "assertEquals", "getId", "get", "assertEquals", "getId", "get"]}, "focal_class": {"identifier": "SourceService", "superclass": "", "interfaces": "implements ISourceService", "fields": [{"original_string": "private static final int LIMIT_MAX_DOWNLOADS = 30;", "modifier": "private static final", "type": "int", "declarator": "LIMIT_MAX_DOWNLOADS = 30", "var_name": "LIMIT_MAX_DOWNLOADS"}, {"original_string": "private Comparator<Source> sourceComparator;", "modifier": "private", "type": "Comparator<Source>", "declarator": "sourceComparator", "var_name": "sourceComparator"}, {"original_string": "@Autowired\n   private ConfigurationManager configurationManager;", "modifier": "@Autowired\n   private", "type": "ConfigurationManager", "declarator": "configurationManager", "var_name": "configurationManager"}], "methods": [{"identifier": "getSourceManager", "parameters": "()", "modifiers": "private", "return": "SourceManager", "signature": "SourceManager getSourceManager()", "full_signature": "private SourceManager getSourceManager()", "class_method_signature": "SourceService.getSourceManager()", "testcase": false, "constructor": false}, {"identifier": "exits", "parameters": "(int sourceId)", "modifiers": "private", "return": "boolean", "signature": "boolean exits(int sourceId)", "full_signature": "private boolean exits(int sourceId)", "class_method_signature": "SourceService.exits(int sourceId)", "testcase": false, "constructor": false}, {"identifier": "getSourceComparator", "parameters": "()", "modifiers": "private synchronized", "return": "Comparator<Source>", "signature": "Comparator<Source> getSourceComparator()", "full_signature": "private synchronized Comparator<Source> getSourceComparator()", "class_method_signature": "SourceService.getSourceComparator()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int count()", "full_signature": "@Override public int count()", "class_method_signature": "SourceService.count()", "testcase": false, "constructor": false}, {"identifier": "createSource", "parameters": "(String url, String username, String password, Integer maxDownloads)", "modifiers": "@Override public", "return": "Source", "signature": "Source createSource(String url, String username, String password, Integer maxDownloads)", "full_signature": "@Override public Source createSource(String url, String username, String password, Integer maxDownloads)", "class_method_signature": "SourceService.createSource(String url, String username, String password, Integer maxDownloads)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(int sourceId)", "modifiers": "@Override public", "return": "Source", "signature": "Source getSource(int sourceId)", "full_signature": "@Override public Source getSource(int sourceId)", "class_method_signature": "SourceService.getSource(int sourceId)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(SynchronizerSource synchronizerSource)", "modifiers": "@Override public", "return": "Source", "signature": "Source getSource(SynchronizerSource synchronizerSource)", "full_signature": "@Override public Source getSource(SynchronizerSource synchronizerSource)", "class_method_signature": "SourceService.getSource(SynchronizerSource synchronizerSource)", "testcase": false, "constructor": false}, {"identifier": "getSource", "parameters": "(List<SynchronizerSource> synchronizerSources)", "modifiers": "@Override public", "return": "List<Source>", "signature": "List<Source> getSource(List<SynchronizerSource> synchronizerSources)", "full_signature": "@Override public List<Source> getSource(List<SynchronizerSource> synchronizerSources)", "class_method_signature": "SourceService.getSource(List<SynchronizerSource> synchronizerSources)", "testcase": false, "constructor": false}, {"identifier": "updateSource", "parameters": "(Source source)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean updateSource(Source source)", "full_signature": "@Override public boolean updateSource(Source source)", "class_method_signature": "SourceService.updateSource(Source source)", "testcase": false, "constructor": false}, {"identifier": "deleteSource", "parameters": "(Source source)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteSource(Source source)", "full_signature": "@Override public boolean deleteSource(Source source)", "class_method_signature": "SourceService.deleteSource(Source source)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "@Override public", "return": "List<Source>", "signature": "List<Source> list()", "full_signature": "@Override public List<Source> list()", "class_method_signature": "SourceService.list()", "testcase": false, "constructor": false}, {"identifier": "sortSources", "parameters": "(List<Source> sources)", "modifiers": "@Override public", "return": "List<Source>", "signature": "List<Source> sortSources(List<Source> sources)", "full_signature": "@Override public List<Source> sortSources(List<Source> sources)", "class_method_signature": "SourceService.sortSources(List<Source> sources)", "testcase": false, "constructor": false}, {"identifier": "getBestSource", "parameters": "(List<Source> sources)", "modifiers": "@Override public", "return": "Source", "signature": "Source getBestSource(List<Source> sources)", "full_signature": "@Override public Source getBestSource(List<Source> sources)", "class_method_signature": "SourceService.getBestSource(List<Source> sources)", "testcase": false, "constructor": false}], "file": "core/src/main/java/fr/gael/dhus/service/SourceService.java"}, "focal_method": {"identifier": "sortSources", "parameters": "(List<Source> sources)", "modifiers": "@Override public", "return": "List<Source>", "body": "@Override\n   public List<Source> sortSources(List<Source> sources)\n   {\n      List<Source> sortedList = new ArrayList<>(sources);\n      Collections.sort(sortedList, getSourceComparator().reversed());\n      return Collections.unmodifiableList(sortedList);\n   }", "signature": "List<Source> sortSources(List<Source> sources)", "full_signature": "@Override public List<Source> sortSources(List<Source> sources)", "class_method_signature": "SourceService.sortSources(List<Source> sources)", "testcase": false, "constructor": false, "invocations": ["sort", "reversed", "getSourceComparator", "unmodifiableList"]}, "repository": {"repo_id": 90016934, "url": "https://github.com/SentinelDataHub/dhus-core", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 2371, "license": "licensed"}}