{"test_class": {"identifier": "DefaultMessageFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultMessageFactory factory = new DefaultMessageFactory();", "modifier": "private", "type": "DefaultMessageFactory", "declarator": "factory = new DefaultMessageFactory()", "var_name": "factory"}], "file": "core/src/test/java/quickfix/DefaultMessageFactoryTest.java"}, "test_case": {"identifier": "testMessageCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMessageCreate() throws Exception {\n        assertMessage(quickfix.fix40.Advertisement.class, MsgType.ADVERTISEMENT, factory.create(BEGINSTRING_FIX40, MsgType.ADVERTISEMENT));\n        assertMessage(quickfix.fix41.Advertisement.class, MsgType.ADVERTISEMENT, factory.create(BEGINSTRING_FIX41, MsgType.ADVERTISEMENT));\n        assertMessage(quickfix.fix42.Advertisement.class, MsgType.ADVERTISEMENT, factory.create(BEGINSTRING_FIX42, MsgType.ADVERTISEMENT));\n        assertMessage(quickfix.fix43.Advertisement.class, MsgType.ADVERTISEMENT, factory.create(BEGINSTRING_FIX43, MsgType.ADVERTISEMENT));\n        assertMessage(quickfix.fix44.Advertisement.class, MsgType.ADVERTISEMENT, factory.create(BEGINSTRING_FIX44, MsgType.ADVERTISEMENT));\n        assertMessage(quickfix.fix50.Advertisement.class, MsgType.ADVERTISEMENT, factory.create(FIX50, MsgType.ADVERTISEMENT));\n        assertMessage(quickfix.Message.class, MsgType.ADVERTISEMENT, factory.create(\"unknown\", MsgType.ADVERTISEMENT));\n    }", "signature": "void testMessageCreate()", "full_signature": "@Test public void testMessageCreate()", "class_method_signature": "DefaultMessageFactoryTest.testMessageCreate()", "testcase": true, "constructor": false, "invocations": ["assertMessage", "create", "assertMessage", "create", "assertMessage", "create", "assertMessage", "create", "assertMessage", "create", "assertMessage", "create", "assertMessage", "create"]}, "focal_class": {"identifier": "DefaultMessageFactory", "superclass": "", "interfaces": "implements MessageFactory", "fields": [{"original_string": "private final Map<String,MessageFactory> messageFactories\n        = new ConcurrentHashMap<String,MessageFactory>();", "modifier": "private final", "type": "Map<String,MessageFactory>", "declarator": "messageFactories\n        = new ConcurrentHashMap<String,MessageFactory>()", "var_name": "messageFactories"}], "methods": [{"identifier": "DefaultMessageFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultMessageFactory()", "full_signature": "public  DefaultMessageFactory()", "class_method_signature": "DefaultMessageFactory.DefaultMessageFactory()", "testcase": false, "constructor": true}, {"identifier": "discoverFactory", "parameters": "(String beginString, String factoryClassName)", "modifiers": "private", "return": "void", "signature": "void discoverFactory(String beginString, String factoryClassName)", "full_signature": "private void discoverFactory(String beginString, String factoryClassName)", "class_method_signature": "DefaultMessageFactory.discoverFactory(String beginString, String factoryClassName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String beginString, String msgType)", "modifiers": "public", "return": "Message", "signature": "Message create(String beginString, String msgType)", "full_signature": "public Message create(String beginString, String msgType)", "class_method_signature": "DefaultMessageFactory.create(String beginString, String msgType)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String beginString, String msgType, int correspondingFieldID)", "modifiers": "public", "return": "Group", "signature": "Group create(String beginString, String msgType, int correspondingFieldID)", "full_signature": "public Group create(String beginString, String msgType, int correspondingFieldID)", "class_method_signature": "DefaultMessageFactory.create(String beginString, String msgType, int correspondingFieldID)", "testcase": false, "constructor": false}], "file": "core/src/main/java/quickfix/DefaultMessageFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(String beginString, String msgType)", "modifiers": "public", "return": "Message", "body": "public Message create(String beginString, String msgType) {\n        MessageFactory messageFactory = messageFactories.get(beginString);\n        if (beginString.equals(BEGINSTRING_FIXT11)) {\n            // The default message factory assumes that only FIX 5.0 will be\n            // used with FIXT 1.1 sessions. A more flexible approach will require\n            // an extension to the QF JNI API. Until then, you will need a custom\n            // message factory if you want to use application messages prior to\n            // FIX 5.0 with a FIXT 1.1 session.\n            //\n            // If you need to determine admin message category based on a data\n            // dictionary, then use a custom message factory and don't use the\n            // static method used below.\n            if (!MessageUtils.isAdminMessage(msgType)) {\n                messageFactory = messageFactories.get(FIX50);\n            }\n        }\n        \n        if (messageFactory != null) {\n            return messageFactory.create(beginString, msgType);\n        }\n\n        Message message = new Message();\n        message.getHeader().setString(MsgType.FIELD, msgType);\n        \n        return message;\n    }", "signature": "Message create(String beginString, String msgType)", "full_signature": "public Message create(String beginString, String msgType)", "class_method_signature": "DefaultMessageFactory.create(String beginString, String msgType)", "testcase": false, "constructor": false, "invocations": ["get", "equals", "isAdminMessage", "get", "create", "setString", "getHeader"]}, "repository": {"repo_id": 3480699, "url": "https://github.com/quickfixj/mirror", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 29054, "license": "licensed"}}