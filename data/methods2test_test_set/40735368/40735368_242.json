{"test_class": {"identifier": "FeatureTypeDBObjectTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/unsupported/mongodb/src/test/java/org/geotools/data/mongodb/FeatureTypeDBObjectTest.java"}, "test_case": {"identifier": "testRoundTripConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoundTripConversion() throws FileNotFoundException, IOException, FactoryException {\n\n        SimpleFeatureType original = buildDummyFeatureType(\"dummy\");\n        \n        DBObject dbo = FeatureTypeDBObject.convert(original);\n        \n        // make sure we're dealing with proper BSON/JSON by round-tripping it\n        // through serialization...\n        StringBuilder jsonBuffer = new StringBuilder();\n        JSON.serialize(dbo, jsonBuffer);\n        String json = jsonBuffer.toString();\n        System.out.println(MongoTestUtil.prettyPrint(json));\n        Object o = JSON.parse(json);\n        assertThat(o, is(instanceOf(DBObject.class)));\n        dbo = (DBObject)o;\n        \n        SimpleFeatureType result = FeatureTypeDBObject.convert(dbo);\n     \n        compareFeatureTypes(original, result, false);\n    }", "signature": "void testRoundTripConversion()", "full_signature": "@Test public void testRoundTripConversion()", "class_method_signature": "FeatureTypeDBObjectTest.testRoundTripConversion()", "testcase": true, "constructor": false, "invocations": ["buildDummyFeatureType", "convert", "serialize", "toString", "println", "prettyPrint", "parse", "assertThat", "is", "instanceOf", "convert", "compareFeatureTypes"]}, "focal_class": {"identifier": "FeatureTypeDBObject", "superclass": "", "interfaces": "", "fields": [{"original_string": "final static String KEY_typeName = \"typeName\";", "modifier": "final static", "type": "String", "declarator": "KEY_typeName = \"typeName\"", "var_name": "KEY_typeName"}, {"original_string": "final static String KEY_geometryDescriptor = \"geometryDescriptor\";", "modifier": "final static", "type": "String", "declarator": "KEY_geometryDescriptor = \"geometryDescriptor\"", "var_name": "KEY_geometryDescriptor"}, {"original_string": "final static String KEY_localName = \"localName\";", "modifier": "final static", "type": "String", "declarator": "KEY_localName = \"localName\"", "var_name": "KEY_localName"}, {"original_string": "final static String KEY_crs = \"crs\";", "modifier": "final static", "type": "String", "declarator": "KEY_crs = \"crs\"", "var_name": "KEY_crs"}, {"original_string": "final static String KEY_type = \"type\";", "modifier": "final static", "type": "String", "declarator": "KEY_type = \"type\"", "var_name": "KEY_type"}, {"original_string": "final static String KEY_properties = \"properties\";", "modifier": "final static", "type": "String", "declarator": "KEY_properties = \"properties\"", "var_name": "KEY_properties"}, {"original_string": "final static String KEY_name = \"name\";", "modifier": "final static", "type": "String", "declarator": "KEY_name = \"name\"", "var_name": "KEY_name"}, {"original_string": "final static String KEY_defaultValue = \"defaultValue\";", "modifier": "final static", "type": "String", "declarator": "KEY_defaultValue = \"defaultValue\"", "var_name": "KEY_defaultValue"}, {"original_string": "final static String KEY_minOccurs = \"minOccurs\";", "modifier": "final static", "type": "String", "declarator": "KEY_minOccurs = \"minOccurs\"", "var_name": "KEY_minOccurs"}, {"original_string": "final static String KEY_maxOccurs = \"maxOccurs\";", "modifier": "final static", "type": "String", "declarator": "KEY_maxOccurs = \"maxOccurs\"", "var_name": "KEY_maxOccurs"}, {"original_string": "final static String KEY_binding = \"binding\";", "modifier": "final static", "type": "String", "declarator": "KEY_binding = \"binding\"", "var_name": "KEY_binding"}, {"original_string": "final static String KEY_attributeDescriptors = \"attributeDescriptors\";", "modifier": "final static", "type": "String", "declarator": "KEY_attributeDescriptors = \"attributeDescriptors\"", "var_name": "KEY_attributeDescriptors"}, {"original_string": "final static String KEY_userData = \"userData\";", "modifier": "final static", "type": "String", "declarator": "KEY_userData = \"userData\"", "var_name": "KEY_userData"}, {"original_string": "final static String VALUE_name = \"name\";", "modifier": "final static", "type": "String", "declarator": "VALUE_name = \"name\"", "var_name": "VALUE_name"}, {"original_string": "final static String PREFIX_URN_OGC = \"urn:ogc:def:crs:\";", "modifier": "final static", "type": "String", "declarator": "PREFIX_URN_OGC = \"urn:ogc:def:crs:\"", "var_name": "PREFIX_URN_OGC"}], "methods": [{"identifier": "convert", "parameters": "(SimpleFeatureType ft)", "modifiers": "public static", "return": "DBObject", "signature": "DBObject convert(SimpleFeatureType ft)", "full_signature": "public static DBObject convert(SimpleFeatureType ft)", "class_method_signature": "FeatureTypeDBObject.convert(SimpleFeatureType ft)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(DBObject ftDBO)", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType convert(DBObject ftDBO)", "full_signature": "public static SimpleFeatureType convert(DBObject ftDBO)", "class_method_signature": "FeatureTypeDBObject.convert(DBObject ftDBO)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(DBObject ftDBO, Name name)", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType convert(DBObject ftDBO, Name name)", "full_signature": "public static SimpleFeatureType convert(DBObject ftDBO, Name name)", "class_method_signature": "FeatureTypeDBObject.convert(DBObject ftDBO, Name name)", "testcase": false, "constructor": false}, {"identifier": "typeCheck", "parameters": "(Map<?, ?> map)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> typeCheck(Map<?, ?> map)", "full_signature": "private static Map<String, String> typeCheck(Map<?, ?> map)", "class_method_signature": "FeatureTypeDBObject.typeCheck(Map<?, ?> map)", "testcase": false, "constructor": false}, {"identifier": "extractAndVerifyType", "parameters": "(Class<T> type, DBObject dbo, String key,\n            boolean required)", "modifiers": "private static", "return": "T", "signature": "T extractAndVerifyType(Class<T> type, DBObject dbo, String key,\n            boolean required)", "full_signature": "private static T extractAndVerifyType(Class<T> type, DBObject dbo, String key,\n            boolean required)", "class_method_signature": "FeatureTypeDBObject.extractAndVerifyType(Class<T> type, DBObject dbo, String key,\n            boolean required)", "testcase": false, "constructor": false}, {"identifier": "extractDBObject", "parameters": "(DBObject dbo, String key)", "modifiers": "static", "return": "BasicDBObject", "signature": "BasicDBObject extractDBObject(DBObject dbo, String key)", "full_signature": "static BasicDBObject extractDBObject(DBObject dbo, String key)", "class_method_signature": "FeatureTypeDBObject.extractDBObject(DBObject dbo, String key)", "testcase": false, "constructor": false}, {"identifier": "extractDBObject", "parameters": "(DBObject dbo, String key, boolean required)", "modifiers": "static", "return": "BasicDBObject", "signature": "BasicDBObject extractDBObject(DBObject dbo, String key, boolean required)", "full_signature": "static BasicDBObject extractDBObject(DBObject dbo, String key, boolean required)", "class_method_signature": "FeatureTypeDBObject.extractDBObject(DBObject dbo, String key, boolean required)", "testcase": false, "constructor": false}, {"identifier": "extractDBList", "parameters": "(DBObject dbo, String key)", "modifiers": "static", "return": "BasicDBList", "signature": "BasicDBList extractDBList(DBObject dbo, String key)", "full_signature": "static BasicDBList extractDBList(DBObject dbo, String key)", "class_method_signature": "FeatureTypeDBObject.extractDBList(DBObject dbo, String key)", "testcase": false, "constructor": false}, {"identifier": "extractDBList", "parameters": "(DBObject dbo, String key, boolean required)", "modifiers": "static", "return": "BasicDBList", "signature": "BasicDBList extractDBList(DBObject dbo, String key, boolean required)", "full_signature": "static BasicDBList extractDBList(DBObject dbo, String key, boolean required)", "class_method_signature": "FeatureTypeDBObject.extractDBList(DBObject dbo, String key, boolean required)", "testcase": false, "constructor": false}, {"identifier": "extractString", "parameters": "(DBObject dbo, String key)", "modifiers": "static", "return": "String", "signature": "String extractString(DBObject dbo, String key)", "full_signature": "static String extractString(DBObject dbo, String key)", "class_method_signature": "FeatureTypeDBObject.extractString(DBObject dbo, String key)", "testcase": false, "constructor": false}, {"identifier": "extractString", "parameters": "(DBObject dbo, String key, boolean required)", "modifiers": "static", "return": "String", "signature": "String extractString(DBObject dbo, String key, boolean required)", "full_signature": "static String extractString(DBObject dbo, String key, boolean required)", "class_method_signature": "FeatureTypeDBObject.extractString(DBObject dbo, String key, boolean required)", "testcase": false, "constructor": false}, {"identifier": "extractInteger", "parameters": "(DBObject dbo, String key)", "modifiers": "static", "return": "Integer", "signature": "Integer extractInteger(DBObject dbo, String key)", "full_signature": "static Integer extractInteger(DBObject dbo, String key)", "class_method_signature": "FeatureTypeDBObject.extractInteger(DBObject dbo, String key)", "testcase": false, "constructor": false}, {"identifier": "extractInteger", "parameters": "(DBObject dbo, String key, boolean required)", "modifiers": "static", "return": "Integer", "signature": "Integer extractInteger(DBObject dbo, String key, boolean required)", "full_signature": "static Integer extractInteger(DBObject dbo, String key, boolean required)", "class_method_signature": "FeatureTypeDBObject.extractInteger(DBObject dbo, String key, boolean required)", "testcase": false, "constructor": false}, {"identifier": "decodeCRSFromGeoJSON", "parameters": "(DBObject crsDBO)", "modifiers": "static", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem decodeCRSFromGeoJSON(DBObject crsDBO)", "full_signature": "static CoordinateReferenceSystem decodeCRSFromGeoJSON(DBObject crsDBO)", "class_method_signature": "FeatureTypeDBObject.decodeCRSFromGeoJSON(DBObject crsDBO)", "testcase": false, "constructor": false}, {"identifier": "encodeCRSToGeoJSON", "parameters": "(CoordinateReferenceSystem crs)", "modifiers": "static", "return": "DBObject", "signature": "DBObject encodeCRSToGeoJSON(CoordinateReferenceSystem crs)", "full_signature": "static DBObject encodeCRSToGeoJSON(CoordinateReferenceSystem crs)", "class_method_signature": "FeatureTypeDBObject.encodeCRSToGeoJSON(CoordinateReferenceSystem crs)", "testcase": false, "constructor": false}], "file": "modules/unsupported/mongodb/src/main/java/org/geotools/data/mongodb/FeatureTypeDBObject.java"}, "focal_method": {"identifier": "convert", "parameters": "(SimpleFeatureType ft)", "modifiers": "public static", "return": "DBObject", "body": "public static DBObject convert(SimpleFeatureType ft) {\n\n        DBObject ftDBO = new BasicDBObject(KEY_typeName, ft.getTypeName());\n        Map<String, String> ftUserData = typeCheck(ft.getUserData());\n        if (!ftUserData.isEmpty()) {\n            ftDBO.put(KEY_userData, new BasicDBObject(ftUserData));\n        }\n\n        // for geometry descriptor, just store name to reference against attribute\n        GeometryDescriptor gd = ft.getGeometryDescriptor();\n        String gdLocalName = gd.getLocalName();\n        DBObject gdDBO = new BasicDBObject(KEY_localName, gdLocalName);\n        CoordinateReferenceSystem crs = gd.getCoordinateReferenceSystem();\n        if (crs == null) {\n            crs = DefaultGeographicCRS.WGS84;\n        }\n        DBObject crsDBO = encodeCRSToGeoJSON(crs);\n        if (crsDBO != null) {\n            gdDBO.put(KEY_crs, crsDBO);\n        }\n        ftDBO.put(KEY_geometryDescriptor, gdDBO);\n\n        BasicDBList adDBL = new BasicDBList();\n        for (AttributeDescriptor ad : ft.getAttributeDescriptors()) {\n            String adLocalName = ad.getLocalName();\n            DBObject adDBO = new BasicDBObject(KEY_localName, adLocalName);\n            if (!adLocalName.equals(gdLocalName)) {\n                Object dv = ad.getDefaultValue();\n                if (dv != null) {\n                    adDBO.put(KEY_defaultValue, dv);\n                }\n                adDBO.put(KEY_minOccurs, ad.getMinOccurs());\n                adDBO.put(KEY_maxOccurs, ad.getMaxOccurs());\n            }\n            Class<?> binding = ad instanceof GeometryDescriptor ? Geometry.class : ad.getType()\n                    .getBinding();\n            adDBO.put(KEY_type, new BasicDBObject(KEY_binding, binding.getName()));\n            Map<String, String> adUserData = typeCheck(ad.getUserData());\n            if (!adUserData.isEmpty()) {\n                adDBO.put(KEY_userData, new BasicDBObject(adUserData));\n            }\n            adDBL.add(adDBO);\n        }\n        ftDBO.put(KEY_attributeDescriptors, adDBL);\n        return ftDBO;\n    }", "signature": "DBObject convert(SimpleFeatureType ft)", "full_signature": "public static DBObject convert(SimpleFeatureType ft)", "class_method_signature": "FeatureTypeDBObject.convert(SimpleFeatureType ft)", "testcase": false, "constructor": false, "invocations": ["getTypeName", "typeCheck", "getUserData", "isEmpty", "put", "getGeometryDescriptor", "getLocalName", "getCoordinateReferenceSystem", "encodeCRSToGeoJSON", "put", "put", "getAttributeDescriptors", "getLocalName", "equals", "getDefaultValue", "put", "put", "getMinOccurs", "put", "getMaxOccurs", "getBinding", "getType", "put", "getName", "typeCheck", "getUserData", "isEmpty", "put", "add", "put"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}