{"test_class": {"identifier": "TCPTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private byte[] pktSerialized = new byte[] { 0x45, 0x20,\n            0x00, 0x34, 0x1d, (byte) 0x85, 0x00, 0x00, 0x32, 0x06,\n            0x31, 0x1e, 0x4a, 0x7d, 0x2d, 0x6d, (byte) 0xc0, (byte) 0xa8,\n            0x01, 0x6f, 0x03, (byte) 0xe1, (byte) 0xc0, 0x32, (byte) 0xe3, (byte) 0xad,\n            (byte) 0xee, (byte) 0x88, (byte) 0xb7, (byte) 0xda, (byte) 0xd8, 0x24, (byte) 0x80, 0x10,\n            0x01, 0x0b, 0x59, 0x33, 0x00, 0x00, 0x01, 0x01,\n            0x08, 0x0a, 0x20, (byte) 0x9a, 0x41, 0x04, 0x07, 0x76,\n            0x53, 0x1f};", "modifier": "private", "type": "byte[]", "declarator": "pktSerialized = new byte[] { 0x45, 0x20,\n            0x00, 0x34, 0x1d, (byte) 0x85, 0x00, 0x00, 0x32, 0x06,\n            0x31, 0x1e, 0x4a, 0x7d, 0x2d, 0x6d, (byte) 0xc0, (byte) 0xa8,\n            0x01, 0x6f, 0x03, (byte) 0xe1, (byte) 0xc0, 0x32, (byte) 0xe3, (byte) 0xad,\n            (byte) 0xee, (byte) 0x88, (byte) 0xb7, (byte) 0xda, (byte) 0xd8, 0x24, (byte) 0x80, 0x10,\n            0x01, 0x0b, 0x59, 0x33, 0x00, 0x00, 0x01, 0x01,\n            0x08, 0x0a, 0x20, (byte) 0x9a, 0x41, 0x04, 0x07, 0x76,\n            0x53, 0x1f}", "var_name": "pktSerialized"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/packet/TCPTest.java"}, "test_case": {"identifier": "testSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize() {\n        IPacket packet = new IPv4()\n        .setDiffServ((byte) 0x20)\n        .setIdentification((short) 0x1d85)\n        .setFlags((byte) 0x00)\n        .setTtl((byte) 50)\n        .setSourceAddress(\"74.125.45.109\")\n        .setDestinationAddress(\"192.168.1.111\")\n        .setPayload(new TCP()\n                        .setSourcePort((short) 993)\n                        .setDestinationPort((short) 49202)\n                        .setSequence(0xe3adee88)\n                        .setAcknowledge(0xb7dad824)\n                        .setDataOffset((byte) 8)\n                        .setFlags((short) 0x10)\n                        .setWindowSize((short) 267)\n                        .setOptions(new byte[] {0x01, 0x01, 0x08, 0x0a, 0x20, (byte) 0x9a,\n                                                0x41, 0x04, 0x07, 0x76, 0x53, 0x1f})\n                        .setPayload(null)\n                   );\n        byte[] actual = packet.serialize();\n        assertTrue(Arrays.equals(pktSerialized, actual));\n    }", "signature": "void testSerialize()", "full_signature": "@Test public void testSerialize()", "class_method_signature": "TCPTest.testSerialize()", "testcase": true, "constructor": false, "invocations": ["setPayload", "setDestinationAddress", "setSourceAddress", "setTtl", "setFlags", "setIdentification", "setDiffServ", "setPayload", "setOptions", "setWindowSize", "setFlags", "setDataOffset", "setAcknowledge", "setSequence", "setDestinationPort", "setSourcePort", "serialize", "assertTrue", "equals"]}, "focal_class": {"identifier": "TCP", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "protected short sourcePort;", "modifier": "protected", "type": "short", "declarator": "sourcePort", "var_name": "sourcePort"}, {"original_string": "protected short destinationPort;", "modifier": "protected", "type": "short", "declarator": "destinationPort", "var_name": "destinationPort"}, {"original_string": "protected int sequence;", "modifier": "protected", "type": "int", "declarator": "sequence", "var_name": "sequence"}, {"original_string": "protected int acknowledge;", "modifier": "protected", "type": "int", "declarator": "acknowledge", "var_name": "acknowledge"}, {"original_string": "protected byte dataOffset;", "modifier": "protected", "type": "byte", "declarator": "dataOffset", "var_name": "dataOffset"}, {"original_string": "protected short flags;", "modifier": "protected", "type": "short", "declarator": "flags", "var_name": "flags"}, {"original_string": "protected short windowSize;", "modifier": "protected", "type": "short", "declarator": "windowSize", "var_name": "windowSize"}, {"original_string": "protected short checksum;", "modifier": "protected", "type": "short", "declarator": "checksum", "var_name": "checksum"}, {"original_string": "protected short urgentPointer;", "modifier": "protected", "type": "short", "declarator": "urgentPointer", "var_name": "urgentPointer"}, {"original_string": "protected byte[] options;", "modifier": "protected", "type": "byte[]", "declarator": "options", "var_name": "options"}], "methods": [{"identifier": "getSourcePort", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getSourcePort()", "full_signature": "public short getSourcePort()", "class_method_signature": "TCP.getSourcePort()", "testcase": false, "constructor": false}, {"identifier": "setSourcePort", "parameters": "(short sourcePort)", "modifiers": "public", "return": "TCP", "signature": "TCP setSourcePort(short sourcePort)", "full_signature": "public TCP setSourcePort(short sourcePort)", "class_method_signature": "TCP.setSourcePort(short sourcePort)", "testcase": false, "constructor": false}, {"identifier": "getDestinationPort", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getDestinationPort()", "full_signature": "public short getDestinationPort()", "class_method_signature": "TCP.getDestinationPort()", "testcase": false, "constructor": false}, {"identifier": "setDestinationPort", "parameters": "(short destinationPort)", "modifiers": "public", "return": "TCP", "signature": "TCP setDestinationPort(short destinationPort)", "full_signature": "public TCP setDestinationPort(short destinationPort)", "class_method_signature": "TCP.setDestinationPort(short destinationPort)", "testcase": false, "constructor": false}, {"identifier": "getChecksum", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getChecksum()", "full_signature": "public short getChecksum()", "class_method_signature": "TCP.getChecksum()", "testcase": false, "constructor": false}, {"identifier": "getSequence", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSequence()", "full_signature": "public int getSequence()", "class_method_signature": "TCP.getSequence()", "testcase": false, "constructor": false}, {"identifier": "setSequence", "parameters": "(int seq)", "modifiers": "public", "return": "TCP", "signature": "TCP setSequence(int seq)", "full_signature": "public TCP setSequence(int seq)", "class_method_signature": "TCP.setSequence(int seq)", "testcase": false, "constructor": false}, {"identifier": "getAcknowledge", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getAcknowledge()", "full_signature": "public int getAcknowledge()", "class_method_signature": "TCP.getAcknowledge()", "testcase": false, "constructor": false}, {"identifier": "setAcknowledge", "parameters": "(int ack)", "modifiers": "public", "return": "TCP", "signature": "TCP setAcknowledge(int ack)", "full_signature": "public TCP setAcknowledge(int ack)", "class_method_signature": "TCP.setAcknowledge(int ack)", "testcase": false, "constructor": false}, {"identifier": "getDataOffset", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getDataOffset()", "full_signature": "public byte getDataOffset()", "class_method_signature": "TCP.getDataOffset()", "testcase": false, "constructor": false}, {"identifier": "setDataOffset", "parameters": "(byte offset)", "modifiers": "public", "return": "TCP", "signature": "TCP setDataOffset(byte offset)", "full_signature": "public TCP setDataOffset(byte offset)", "class_method_signature": "TCP.setDataOffset(byte offset)", "testcase": false, "constructor": false}, {"identifier": "getFlags", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getFlags()", "full_signature": "public short getFlags()", "class_method_signature": "TCP.getFlags()", "testcase": false, "constructor": false}, {"identifier": "setFlags", "parameters": "(short flags)", "modifiers": "public", "return": "TCP", "signature": "TCP setFlags(short flags)", "full_signature": "public TCP setFlags(short flags)", "class_method_signature": "TCP.setFlags(short flags)", "testcase": false, "constructor": false}, {"identifier": "getWindowSize", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getWindowSize()", "full_signature": "public short getWindowSize()", "class_method_signature": "TCP.getWindowSize()", "testcase": false, "constructor": false}, {"identifier": "setWindowSize", "parameters": "(short windowSize)", "modifiers": "public", "return": "TCP", "signature": "TCP setWindowSize(short windowSize)", "full_signature": "public TCP setWindowSize(short windowSize)", "class_method_signature": "TCP.setWindowSize(short windowSize)", "testcase": false, "constructor": false}, {"identifier": "getTcpChecksum", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getTcpChecksum()", "full_signature": "public short getTcpChecksum()", "class_method_signature": "TCP.getTcpChecksum()", "testcase": false, "constructor": false}, {"identifier": "setTcpChecksum", "parameters": "(short checksum)", "modifiers": "public", "return": "TCP", "signature": "TCP setTcpChecksum(short checksum)", "full_signature": "public TCP setTcpChecksum(short checksum)", "class_method_signature": "TCP.setTcpChecksum(short checksum)", "testcase": false, "constructor": false}, {"identifier": "resetChecksum", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetChecksum()", "full_signature": "@Override public void resetChecksum()", "class_method_signature": "TCP.resetChecksum()", "testcase": false, "constructor": false}, {"identifier": "getUrgentPointer", "parameters": "(short urgentPointer)", "modifiers": "public", "return": "short", "signature": "short getUrgentPointer(short urgentPointer)", "full_signature": "public short getUrgentPointer(short urgentPointer)", "class_method_signature": "TCP.getUrgentPointer(short urgentPointer)", "testcase": false, "constructor": false}, {"identifier": "setUrgentPointer", "parameters": "(short urgentPointer)", "modifiers": "public", "return": "TCP", "signature": "TCP setUrgentPointer(short urgentPointer)", "full_signature": "public TCP setUrgentPointer(short urgentPointer)", "class_method_signature": "TCP.setUrgentPointer(short urgentPointer)", "testcase": false, "constructor": false}, {"identifier": "getOptions", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getOptions()", "full_signature": "public byte[] getOptions()", "class_method_signature": "TCP.getOptions()", "testcase": false, "constructor": false}, {"identifier": "setOptions", "parameters": "(byte[] options)", "modifiers": "public", "return": "TCP", "signature": "TCP setOptions(byte[] options)", "full_signature": "public TCP setOptions(byte[] options)", "class_method_signature": "TCP.setOptions(byte[] options)", "testcase": false, "constructor": false}, {"identifier": "setChecksum", "parameters": "(short checksum)", "modifiers": "public", "return": "TCP", "signature": "TCP setChecksum(short checksum)", "full_signature": "public TCP setChecksum(short checksum)", "class_method_signature": "TCP.setChecksum(short checksum)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "public byte[] serialize()", "class_method_signature": "TCP.serialize()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TCP.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TCP.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "TCP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/packet/TCP.java"}, "focal_method": {"identifier": "serialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "body": "public byte[] serialize() {\n        int length;\n        if (dataOffset == 0)\n            dataOffset = 5;  // default header length\n        length = dataOffset << 2;\n        byte[] payloadData = null;\n        if (payload != null) {\n            payload.setParent(this);\n            payloadData = payload.serialize();\n            length += payloadData.length;\n        }\n\n        byte[] data = new byte[length];\n        ByteBuffer bb = ByteBuffer.wrap(data);\n\n        bb.putShort(this.sourcePort);\n        bb.putShort(this.destinationPort);\n        bb.putInt(this.sequence);\n        bb.putInt(this.acknowledge);\n        bb.putShort((short) (this.flags | (dataOffset << 12)));\n        bb.putShort(this.windowSize);\n        bb.putShort(this.checksum);\n        bb.putShort(this.urgentPointer);\n        if (dataOffset > 5) {\n            int padding;\n            bb.put(options);\n            padding = (dataOffset << 2) - 20 - options.length;\n            for (int i = 0; i < padding; i++)\n                bb.put((byte) 0);\n        }\n        if (payloadData != null)\n            bb.put(payloadData);\n\n        if (this.parent != null && this.parent instanceof IPv4)\n            ((IPv4)this.parent).setProtocol(IPv4.PROTOCOL_TCP);\n\n        // compute checksum if needed\n        if (this.checksum == 0) {\n            bb.rewind();\n            int accumulation = 0;\n\n            // compute pseudo header mac\n            if (this.parent != null && this.parent instanceof IPv4) {\n                IPv4 ipv4 = (IPv4) this.parent;\n                accumulation += ((ipv4.getSourceAddress() >> 16) & 0xffff)\n                        + (ipv4.getSourceAddress() & 0xffff);\n                accumulation += ((ipv4.getDestinationAddress() >> 16) & 0xffff)\n                        + (ipv4.getDestinationAddress() & 0xffff);\n                accumulation += ipv4.getProtocol() & 0xff;\n                accumulation += length & 0xffff;\n            }\n\n            for (int i = 0; i < length / 2; ++i) {\n                accumulation += 0xffff & bb.getShort();\n            }\n            // pad to an even number of shorts\n            if (length % 2 > 0) {\n                accumulation += (bb.get() & 0xff) << 8;\n            }\n\n            accumulation = ((accumulation >> 16) & 0xffff)\n                    + (accumulation & 0xffff);\n            this.checksum = (short) (~accumulation & 0xffff);\n            bb.putShort(16, this.checksum);\n        }\n        return data;\n    }", "signature": "byte[] serialize()", "full_signature": "public byte[] serialize()", "class_method_signature": "TCP.serialize()", "testcase": false, "constructor": false, "invocations": ["setParent", "serialize", "wrap", "putShort", "putShort", "putInt", "putInt", "putShort", "putShort", "putShort", "putShort", "put", "put", "put", "setProtocol", "rewind", "getSourceAddress", "getSourceAddress", "getDestinationAddress", "getDestinationAddress", "getProtocol", "getShort", "get", "putShort"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}