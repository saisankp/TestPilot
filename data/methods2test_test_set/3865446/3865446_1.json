{"test_class": {"identifier": "PopulationUtilsTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/util/PopulationUtilsTest.java"}, "test_case": {"identifier": "testConcatenate2", "parameters": "()", "modifiers": "@Test // tests concatenation and ordering of given Populations, limited by maxIndexExclusive public", "return": "void", "body": "@Test\n    // tests concatenation and ordering of given Populations, limited by maxIndexExclusive\n    public void testConcatenate2() throws Exception {\n        SimpleIndividual[] ind1 = new SimpleIndividual[] {new SimpleIndividual(1, 1.0, null), new SimpleIndividual(2, 3.0, null), new SimpleIndividual(5, 3.0, null)};\n        SimpleIndividual[] ind2 = new SimpleIndividual[] {new SimpleIndividual(10, 0.0, null), new SimpleIndividual(2, 2.0, null)};\n\n        Individual[] indOut = PopulationUtils.concatenate(new Population[]{new SimplePopulation(ind1), new SimplePopulation(ind2), new SimplePopulation(ind1)}, new SimplePopulationFactory(), 2).getIndividuals();\n\n        assertTrue(indOut[0] == ind1[0]);\n        assertTrue(indOut[1] == ind1[1]);\n        assertTrue(indOut[2] == ind1[2]);\n        assertTrue(indOut[3] == ind2[0]);\n        assertTrue(indOut[4] == ind2[1]);\n        assertTrue(indOut.length == ind1.length + ind2.length);\n    }", "signature": "void testConcatenate2()", "full_signature": "@Test // tests concatenation and ordering of given Populations, limited by maxIndexExclusive public void testConcatenate2()", "class_method_signature": "PopulationUtilsTest.testConcatenate2()", "testcase": true, "constructor": false, "invocations": ["getIndividuals", "concatenate", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "PopulationUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "concatenate", "parameters": "(Population[] populations, PopulationFactory populationFactory)", "modifiers": "public static", "return": "Population", "signature": "Population concatenate(Population[] populations, PopulationFactory populationFactory)", "full_signature": "public static Population concatenate(Population[] populations, PopulationFactory populationFactory)", "class_method_signature": "PopulationUtils.concatenate(Population[] populations, PopulationFactory populationFactory)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "modifiers": "public static", "return": "Population", "signature": "Population concatenate(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "full_signature": "public static Population concatenate(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "class_method_signature": "PopulationUtils.concatenate(Population[] populations, PopulationFactory populationFactory, int maxIndexExclusive)", "testcase": false, "constructor": false}, {"identifier": "appendPopulation", "parameters": "(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "modifiers": "public static", "return": "Population[]", "signature": "Population[] appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "full_signature": "public static Population[] appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "class_method_signature": "PopulationUtils.appendPopulation(Population[] populations, Population populationToAppend, boolean appendAtTheEnd)", "testcase": false, "constructor": false}, {"identifier": "sumSizes", "parameters": "(Population[] populations)", "modifiers": "public static", "return": "int", "signature": "int sumSizes(Population[] populations)", "full_signature": "public static int sumSizes(Population[] populations)", "class_method_signature": "PopulationUtils.sumSizes(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "sumSizes", "parameters": "(Population[] populations, int maxIndexExclusive)", "modifiers": "public static", "return": "int", "signature": "int sumSizes(Population[] populations, int maxIndexExclusive)", "full_signature": "public static int sumSizes(Population[] populations, int maxIndexExclusive)", "class_method_signature": "PopulationUtils.sumSizes(Population[] populations, int maxIndexExclusive)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/util/PopulationUtils.java"}, "focal_method": {"identifier": "concatenate", "parameters": "(Population[] populations, PopulationFactory populationFactory)", "modifiers": "public static", "return": "Population", "body": "public static Population concatenate(Population[] populations, PopulationFactory populationFactory){\n        if (populations == null){\n            throw new OptimizationException(\"input Population[] cannot be null\");\n        }\n        return concatenate(populations, populationFactory, populations.length);\n    }", "signature": "Population concatenate(Population[] populations, PopulationFactory populationFactory)", "full_signature": "public static Population concatenate(Population[] populations, PopulationFactory populationFactory)", "class_method_signature": "PopulationUtils.concatenate(Population[] populations, PopulationFactory populationFactory)", "testcase": false, "constructor": false, "invocations": ["concatenate"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}