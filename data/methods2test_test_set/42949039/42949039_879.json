{"test_class": {"identifier": "BaseJpaDaoImplTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    protected BaseJpaDaoImpl baseJpaDaoImpl;", "modifier": "@Autowired\n    protected", "type": "BaseJpaDaoImpl", "declarator": "baseJpaDaoImpl", "var_name": "baseJpaDaoImpl"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/impl/BaseJpaDaoImplTest.java"}, "test_case": {"identifier": "testGetPredicateForInClauseOneChunk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPredicateForInClauseOneChunk()\n    {\n        // Create the JPA builder, query, and entity root.\n        CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n        CriteriaQuery<BusinessObjectDataEntity> criteria = builder.createQuery(BusinessObjectDataEntity.class);\n        Root<BusinessObjectDataEntity> businessObjectDataEntity = criteria.from(BusinessObjectDataEntity.class);\n\n        // Get the predicate for the \"in\" clause with 1000 values.\n        Predicate predicate = baseJpaDaoImpl\n            .getPredicateForInClause(builder, businessObjectDataEntity.get(BusinessObjectDataEntity_.partitionValue), getPartitionValueList(1000));\n\n        // We expect to get back an \"in\" predicate with a single chunk of 1000 partition values.\n        assertTrue(predicate instanceof InPredicate);\n        assertEquals(1000, ((InPredicate) predicate).getValues().size());\n    }", "signature": "void testGetPredicateForInClauseOneChunk()", "full_signature": "@Test public void testGetPredicateForInClauseOneChunk()", "class_method_signature": "BaseJpaDaoImplTest.testGetPredicateForInClauseOneChunk()", "testcase": true, "constructor": false, "invocations": ["getCriteriaBuilder", "createQuery", "from", "getPredicateForInClause", "get", "getPartitionValueList", "assertTrue", "assertEquals", "size", "getValues"]}, "focal_class": {"identifier": "BaseJpaDaoImpl", "superclass": "", "interfaces": "implements BaseJpaDao", "fields": [{"original_string": "@PersistenceContext\n    protected EntityManager entityManager;", "modifier": "@PersistenceContext\n    protected", "type": "EntityManager", "declarator": "entityManager", "var_name": "entityManager"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}], "methods": [{"identifier": "delete", "parameters": "(T entity)", "modifiers": "@Override public", "return": "void", "signature": "void delete(T entity)", "full_signature": "@Override public void delete(T entity)", "class_method_signature": "BaseJpaDaoImpl.delete(T entity)", "testcase": false, "constructor": false}, {"identifier": "detach", "parameters": "(T entity)", "modifiers": "@Override public", "return": "void", "signature": "void detach(T entity)", "full_signature": "@Override public void detach(T entity)", "class_method_signature": "BaseJpaDaoImpl.detach(T entity)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Class<T> entityClass)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> findAll(Class<T> entityClass)", "full_signature": "@Override public List<T> findAll(Class<T> entityClass)", "class_method_signature": "BaseJpaDaoImpl.findAll(Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(Class<T> entityClass, Object entityId)", "modifiers": "@Override public", "return": "T", "signature": "T findById(Class<T> entityClass, Object entityId)", "full_signature": "@Override public T findById(Class<T> entityClass, Object entityId)", "class_method_signature": "BaseJpaDaoImpl.findById(Class<T> entityClass, Object entityId)", "testcase": false, "constructor": false}, {"identifier": "findByNamedProperties", "parameters": "(Class<T> entityClass, Map<String, ?> params)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> findByNamedProperties(Class<T> entityClass, Map<String, ?> params)", "full_signature": "@Override public List<T> findByNamedProperties(Class<T> entityClass, Map<String, ?> params)", "class_method_signature": "BaseJpaDaoImpl.findByNamedProperties(Class<T> entityClass, Map<String, ?> params)", "testcase": false, "constructor": false}, {"identifier": "findUniqueByNamedProperties", "parameters": "(Class<T> entityClass, Map<String, ?> params)", "modifiers": "@Override public", "return": "T", "signature": "T findUniqueByNamedProperties(Class<T> entityClass, Map<String, ?> params)", "full_signature": "@Override public T findUniqueByNamedProperties(Class<T> entityClass, Map<String, ?> params)", "class_method_signature": "BaseJpaDaoImpl.findUniqueByNamedProperties(Class<T> entityClass, Map<String, ?> params)", "testcase": false, "constructor": false}, {"identifier": "getCurrentTimestamp", "parameters": "()", "modifiers": "@Override public", "return": "Timestamp", "signature": "Timestamp getCurrentTimestamp()", "full_signature": "@Override public Timestamp getCurrentTimestamp()", "class_method_signature": "BaseJpaDaoImpl.getCurrentTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getEntityManager", "parameters": "()", "modifiers": "@Override public", "return": "EntityManager", "signature": "EntityManager getEntityManager()", "full_signature": "@Override public EntityManager getEntityManager()", "class_method_signature": "BaseJpaDaoImpl.getEntityManager()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String queryString)", "modifiers": "@SuppressWarnings({\"unchecked\"}) @Override public", "return": "List<T>", "signature": "List<T> query(String queryString)", "full_signature": "@SuppressWarnings({\"unchecked\"}) @Override public List<T> query(String queryString)", "class_method_signature": "BaseJpaDaoImpl.query(String queryString)", "testcase": false, "constructor": false}, {"identifier": "queryByNamedParams", "parameters": "(String queryString, Map<String, ?> params)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> queryByNamedParams(String queryString, Map<String, ?> params)", "full_signature": "@Override public List<T> queryByNamedParams(String queryString, Map<String, ?> params)", "class_method_signature": "BaseJpaDaoImpl.queryByNamedParams(String queryString, Map<String, ?> params)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(T entity)", "modifiers": "@Override public", "return": "T", "signature": "T save(T entity)", "full_signature": "@Override public T save(T entity)", "class_method_signature": "BaseJpaDaoImpl.save(T entity)", "testcase": false, "constructor": false}, {"identifier": "saveAndRefresh", "parameters": "(T entity)", "modifiers": "@Override public", "return": "T", "signature": "T saveAndRefresh(T entity)", "full_signature": "@Override public T saveAndRefresh(T entity)", "class_method_signature": "BaseJpaDaoImpl.saveAndRefresh(T entity)", "testcase": false, "constructor": false}, {"identifier": "executeSingleResultQuery", "parameters": "(CriteriaQuery<T> criteria, String message)", "modifiers": "protected", "return": "T", "signature": "T executeSingleResultQuery(CriteriaQuery<T> criteria, String message)", "full_signature": "protected T executeSingleResultQuery(CriteriaQuery<T> criteria, String message)", "class_method_signature": "BaseJpaDaoImpl.executeSingleResultQuery(CriteriaQuery<T> criteria, String message)", "testcase": false, "constructor": false}, {"identifier": "getPredicateForInClause", "parameters": "(CriteriaBuilder builder, Path<T> path, List<T> values)", "modifiers": "protected", "return": "Predicate", "signature": "Predicate getPredicateForInClause(CriteriaBuilder builder, Path<T> path, List<T> values)", "full_signature": "protected Predicate getPredicateForInClause(CriteriaBuilder builder, Path<T> path, List<T> values)", "class_method_signature": "BaseJpaDaoImpl.getPredicateForInClause(CriteriaBuilder builder, Path<T> path, List<T> values)", "testcase": false, "constructor": false}, {"identifier": "executeQueryWithNamedParams", "parameters": "(Query query, Map<String, ?> params)", "modifiers": "@SuppressWarnings({\"unchecked\"}) private", "return": "List<T>", "signature": "List<T> executeQueryWithNamedParams(Query query, Map<String, ?> params)", "full_signature": "@SuppressWarnings({\"unchecked\"}) private List<T> executeQueryWithNamedParams(Query query, Map<String, ?> params)", "class_method_signature": "BaseJpaDaoImpl.executeQueryWithNamedParams(Query query, Map<String, ?> params)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/impl/BaseJpaDaoImpl.java"}, "focal_method": {"identifier": "getPredicateForInClause", "parameters": "(CriteriaBuilder builder, Path<T> path, List<T> values)", "modifiers": "protected", "return": "Predicate", "body": "protected <T> Predicate getPredicateForInClause(CriteriaBuilder builder, Path<T> path, List<T> values)\n    {\n        // Get the chunk size from the environment and use a default as necessary.\n        int inClauseChunkSize = configurationHelper.getProperty(ConfigurationValue.DB_IN_CLAUSE_CHUNK_SIZE, Integer.class);\n\n        // Initializes the returned predicate and the value list size.\n        Predicate predicate = null;\n        int listSize = values.size();\n\n        // Loop through each chunk of values until we have reached the end of the values.\n        for (int i = 0; i < listSize; i += inClauseChunkSize)\n        {\n            // Get a sub-list for the current chunk of data.\n            List<T> valuesSubList = values.subList(i, (listSize > (i + inClauseChunkSize) ? (i + inClauseChunkSize) : listSize));\n\n            // Get an updated predicate which will be the \"in\" clause of the sub-list on the first loop or the \"in\" clause of the sub-list \"or\"ed with the\\\n            // previous sub-list \"in\" clause.\n            predicate = (predicate == null ? path.in(valuesSubList) : builder.or(predicate, path.in(valuesSubList)));\n        }\n\n        // Return the \"in\" clause predicate.\n        return predicate;\n    }", "signature": "Predicate getPredicateForInClause(CriteriaBuilder builder, Path<T> path, List<T> values)", "full_signature": "protected Predicate getPredicateForInClause(CriteriaBuilder builder, Path<T> path, List<T> values)", "class_method_signature": "BaseJpaDaoImpl.getPredicateForInClause(CriteriaBuilder builder, Path<T> path, List<T> values)", "testcase": false, "constructor": false, "invocations": ["getProperty", "size", "subList", "in", "or", "in"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}