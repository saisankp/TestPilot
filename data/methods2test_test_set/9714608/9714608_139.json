{"test_class": {"identifier": "ListUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/org/arakhne/afc/util/ListUtilTest.java"}, "test_case": {"identifier": "ceilingIndexComparatorTList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void ceilingIndexComparatorTList() {\n\t\tList<Integer> list = new ArrayList<>();\n\t\tlist.addAll(Arrays.asList(1, 4, 6, 6, 6, 12, 30));\n\n\t\tassertEquals(0, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), -2));\n\t\tassertEquals(5, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), 7));\n\t\tassertEquals(-1, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), 34));\n\t\tassertEquals(0, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), 1));\n\t\tassertEquals(1, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), 4));\n\t\tassertEquals(2, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), 6));\n\t\tassertEquals(5, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), 12));\n\t\tassertEquals(6, ListUtil.ceilingIndex(list, new NaturalOrderComparator<Integer>(), 30));\n\t\t\n\t\tIterator<Integer> iterator = list.iterator();\n\t\tassertEquals(Integer.valueOf(1), iterator.next());\n\t\tassertEquals(Integer.valueOf(4), iterator.next());\n\t\tassertEquals(Integer.valueOf(6), iterator.next());\n\t\tassertEquals(Integer.valueOf(6), iterator.next());\n\t\tassertEquals(Integer.valueOf(6), iterator.next());\n\t\tassertEquals(Integer.valueOf(12), iterator.next());\n\t\tassertEquals(Integer.valueOf(30), iterator.next());\n\t\tassertFalse(iterator.hasNext());\n\t}", "signature": "void ceilingIndexComparatorTList()", "full_signature": "@Test public void ceilingIndexComparatorTList()", "class_method_signature": "ListUtilTest.ceilingIndexComparatorTList()", "testcase": true, "constructor": false, "invocations": ["addAll", "asList", "assertEquals", "ceilingIndex", "assertEquals", "ceilingIndex", "assertEquals", "ceilingIndex", "assertEquals", "ceilingIndex", "assertEquals", "ceilingIndex", "assertEquals", "ceilingIndex", "assertEquals", "ceilingIndex", "assertEquals", "ceilingIndex", "iterator", "assertEquals", "valueOf", "next", "assertEquals", "valueOf", "next", "assertEquals", "valueOf", "next", "assertEquals", "valueOf", "next", "assertEquals", "valueOf", "next", "assertEquals", "valueOf", "next", "assertEquals", "valueOf", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "ListUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ListUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ListUtil()", "full_signature": "private  ListUtil()", "class_method_signature": "ListUtil.ListUtil()", "testcase": false, "constructor": true}, {"identifier": "remove", "parameters": "(List<E> list, Comparator<? super E> comparator, E data)", "modifiers": "public static", "return": "int", "signature": "int remove(List<E> list, Comparator<? super E> comparator, E data)", "full_signature": "public static int remove(List<E> list, Comparator<? super E> comparator, E data)", "class_method_signature": "ListUtil.remove(List<E> list, Comparator<? super E> comparator, E data)", "testcase": false, "constructor": false}, {"identifier": "addIfAbsent", "parameters": "(List<E> list, Comparator<? super E> comparator, E data)", "modifiers": "@Inline(value = \"add($1, $2, $3, false, false)\") public static", "return": "int", "signature": "int addIfAbsent(List<E> list, Comparator<? super E> comparator, E data)", "full_signature": "@Inline(value = \"add($1, $2, $3, false, false)\") public static int addIfAbsent(List<E> list, Comparator<? super E> comparator, E data)", "class_method_signature": "ListUtil.addIfAbsent(List<E> list, Comparator<? super E> comparator, E data)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(List<E> list, Comparator<? super E> comparator, E data,\n\t\t\tboolean allowMultipleOccurencesOfSameValue, boolean allowReplacement)", "modifiers": "public static", "return": "int", "signature": "int add(List<E> list, Comparator<? super E> comparator, E data,\n\t\t\tboolean allowMultipleOccurencesOfSameValue, boolean allowReplacement)", "full_signature": "public static int add(List<E> list, Comparator<? super E> comparator, E data,\n\t\t\tboolean allowMultipleOccurencesOfSameValue, boolean allowReplacement)", "class_method_signature": "ListUtil.add(List<E> list, Comparator<? super E> comparator, E data,\n\t\t\tboolean allowMultipleOccurencesOfSameValue, boolean allowReplacement)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(List<E> list, Comparator<? super E> comparator, E data)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean contains(List<E> list, Comparator<? super E> comparator, E data)", "full_signature": "@Pure public static boolean contains(List<E> list, Comparator<? super E> comparator, E data)", "class_method_signature": "ListUtil.contains(List<E> list, Comparator<? super E> comparator, E data)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "signature": "int indexOf(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int indexOf(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.indexOf(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "signature": "int lastIndexOf(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int lastIndexOf(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.lastIndexOf(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false}, {"identifier": "getInsertionIndex", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "signature": "int getInsertionIndex(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int getInsertionIndex(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.getInsertionIndex(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false}, {"identifier": "getInsertionIndex", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt, boolean allowMultiple)", "modifiers": "@Pure public static", "return": "int", "signature": "int getInsertionIndex(List<T> list, Comparator<? super T> comparator, T elt, boolean allowMultiple)", "full_signature": "@Pure public static int getInsertionIndex(List<T> list, Comparator<? super T> comparator, T elt, boolean allowMultiple)", "class_method_signature": "ListUtil.getInsertionIndex(List<T> list, Comparator<? super T> comparator, T elt, boolean allowMultiple)", "testcase": false, "constructor": false}, {"identifier": "ceilingIndex", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "signature": "int ceilingIndex(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int ceilingIndex(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.ceilingIndex(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false}, {"identifier": "floorIndex", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "signature": "int floorIndex(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int floorIndex(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.floorIndex(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false}, {"identifier": "higherIndex", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "signature": "int higherIndex(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int higherIndex(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.higherIndex(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false}, {"identifier": "lowerIndex", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "signature": "int lowerIndex(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int lowerIndex(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.lowerIndex(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false}, {"identifier": "reverseIterator", "parameters": "(final List<T> list)", "modifiers": "public static", "return": "Iterator<T>", "signature": "Iterator<T> reverseIterator(final List<T> list)", "full_signature": "public static Iterator<T> reverseIterator(final List<T> list)", "class_method_signature": "ListUtil.reverseIterator(final List<T> list)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/org/arakhne/afc/util/ListUtil.java"}, "focal_method": {"identifier": "ceilingIndex", "parameters": "(List<T> list, Comparator<? super T> comparator, T elt)", "modifiers": "@Pure public static", "return": "int", "body": "@Pure\n\tpublic static <T> int ceilingIndex(List<T> list, Comparator<? super T> comparator, T elt) {\n\t\ttry {\n\t\t\tassert comparator != null;\n\t\t\tassert list != null;\n\t\t\tif (elt == null) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tint first = 0;\n\t\t\tint last = list.size() - 1;\n\n\t\t\twhile (last >= first) {\n\t\t\t\tint c = (first + last) / 2;\n\t\t\t\tfinal T indata = list.get(c);\n\t\t\t\tfinal int cmp = comparator.compare(elt, indata);\n\t\t\t\tif (cmp == 0) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\t--c;\n\t\t\t\t\t}\n\t\t\t\t\twhile (c >= 0 && comparator.compare(elt, list.get(c)) == 0);\n\t\t\t\t\treturn c + 1;\n\t\t\t\t} else if (cmp < 0) {\n\t\t\t\t\tlast = c - 1;\n\t\t\t\t} else {\n\t\t\t\t\tfirst = c + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (first >= list.size()) {\n\t\t\t\tfirst = -1;\n\t\t\t}\n\t\t\treturn first;\n\t\t} catch (AssertionError e) {\n\t\t\tthrow e;\n\t\t} catch (Throwable exception) {\n\t\t\treturn -1;\n\t\t}\n\t}", "signature": "int ceilingIndex(List<T> list, Comparator<? super T> comparator, T elt)", "full_signature": "@Pure public static int ceilingIndex(List<T> list, Comparator<? super T> comparator, T elt)", "class_method_signature": "ListUtil.ceilingIndex(List<T> list, Comparator<? super T> comparator, T elt)", "testcase": false, "constructor": false, "invocations": ["size", "get", "compare", "compare", "get", "size"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}