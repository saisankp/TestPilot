{"test_class": {"identifier": "ProfilerScrollbarTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final float EPSILON = 0.0001f;", "modifier": "public static final", "type": "float", "declarator": "EPSILON = 0.0001f", "var_name": "EPSILON"}, {"original_string": "private StreamingTimeline myTimeline;", "modifier": "private", "type": "StreamingTimeline", "declarator": "myTimeline", "var_name": "myTimeline"}, {"original_string": "private ProfilerScrollbar myScrollbar;", "modifier": "private", "type": "ProfilerScrollbar", "declarator": "myScrollbar", "var_name": "myScrollbar"}, {"original_string": "private JPanel myPanel;", "modifier": "private", "type": "JPanel", "declarator": "myPanel", "var_name": "myPanel"}, {"original_string": "private FakeUi myUi;", "modifier": "private", "type": "FakeUi", "declarator": "myUi", "var_name": "myUi"}, {"original_string": "private FakeTimer myTimer;", "modifier": "private", "type": "FakeTimer", "declarator": "myTimer", "var_name": "myTimer"}], "file": "profilers-ui/testSrc/com/android/tools/profilers/ProfilerScrollbarTest.java"}, "test_case": {"identifier": "testModelChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testModelChanged() {\n    // Note: model units are kept in 1000th of a range unit\n    assertEquals(0, myScrollbar.getModel().getMinimum());\n    assertEquals(10, myScrollbar.getModel().getMaximum());\n    assertEquals(0, myScrollbar.getModel().getValue());\n    assertEquals(5, myScrollbar.getModel().getExtent());\n\n    // Update view range.\n    myTimeline.getViewRange().set(1000, 4000);\n    assertEquals(0, myScrollbar.getModel().getMinimum());\n    assertEquals(10, myScrollbar.getModel().getMaximum());\n    assertEquals(1, myScrollbar.getModel().getValue());\n    assertEquals(3, myScrollbar.getModel().getExtent());\n\n    // Update data range.\n    myTimeline.getDataRange().set(0, 20000);\n    assertEquals(0, myScrollbar.getModel().getMinimum());\n    assertEquals(20, myScrollbar.getModel().getMaximum());\n    assertEquals(1, myScrollbar.getModel().getValue());\n    assertEquals(3, myScrollbar.getModel().getExtent());\n  }", "signature": "void testModelChanged()", "full_signature": "@Test public void testModelChanged()", "class_method_signature": "ProfilerScrollbarTest.testModelChanged()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMinimum", "getModel", "assertEquals", "getMaximum", "getModel", "assertEquals", "getValue", "getModel", "assertEquals", "getExtent", "getModel", "set", "getViewRange", "assertEquals", "getMinimum", "getModel", "assertEquals", "getMaximum", "getModel", "assertEquals", "getValue", "getModel", "assertEquals", "getExtent", "getModel", "set", "getDataRange", "assertEquals", "getMinimum", "getModel", "assertEquals", "getMaximum", "getModel", "assertEquals", "getValue", "getModel", "assertEquals", "getExtent", "getModel"]}, "focal_class": {"identifier": "ProfilerScrollbar", "superclass": "extends JBScrollBar", "interfaces": "", "fields": [{"original_string": "private static final float VIEW_ZOOM_PER_MOUSEWHEEL_FACTOR = 0.125f;", "modifier": "private static final", "type": "float", "declarator": "VIEW_ZOOM_PER_MOUSEWHEEL_FACTOR = 0.125f", "var_name": "VIEW_ZOOM_PER_MOUSEWHEEL_FACTOR"}, {"original_string": "private static final float VIEW_PAN_PERCENTAGE_PER_MOUSEHWEEL_FACTOR = 0.005f;", "modifier": "private static final", "type": "float", "declarator": "VIEW_PAN_PERCENTAGE_PER_MOUSEHWEEL_FACTOR = 0.005f", "var_name": "VIEW_PAN_PERCENTAGE_PER_MOUSEHWEEL_FACTOR"}, {"original_string": "private static final long MS_TO_US = TimeUnit.MILLISECONDS.toMicros(1);", "modifier": "private static final", "type": "long", "declarator": "MS_TO_US = TimeUnit.MILLISECONDS.toMicros(1)", "var_name": "MS_TO_US"}, {"original_string": "private static final float STREAMING_POSITION_THRESHOLD_PX = 10;", "modifier": "private static final", "type": "float", "declarator": "STREAMING_POSITION_THRESHOLD_PX = 10", "var_name": "STREAMING_POSITION_THRESHOLD_PX"}, {"original_string": "@NotNull private final StreamingTimeline myTimeline;", "modifier": "@NotNull private final", "type": "StreamingTimeline", "declarator": "myTimeline", "var_name": "myTimeline"}, {"original_string": "private final AspectObserver myAspectObserver;", "modifier": "private final", "type": "AspectObserver", "declarator": "myAspectObserver", "var_name": "myAspectObserver"}, {"original_string": "private boolean myUpdating;", "modifier": "private", "type": "boolean", "declarator": "myUpdating", "var_name": "myUpdating"}, {"original_string": "private boolean myCheckStream;", "modifier": "private", "type": "boolean", "declarator": "myCheckStream", "var_name": "myCheckStream"}], "methods": [{"identifier": "ProfilerScrollbar", "parameters": "(@NotNull StreamingTimeline timeline,\n                           @NotNull JComponent zoomPanComponent)", "modifiers": "public", "return": "", "signature": " ProfilerScrollbar(@NotNull StreamingTimeline timeline,\n                           @NotNull JComponent zoomPanComponent)", "full_signature": "public  ProfilerScrollbar(@NotNull StreamingTimeline timeline,\n                           @NotNull JComponent zoomPanComponent)", "class_method_signature": "ProfilerScrollbar.ProfilerScrollbar(@NotNull StreamingTimeline timeline,\n                           @NotNull JComponent zoomPanComponent)", "testcase": false, "constructor": true}, {"identifier": "getZoomWheelDelta", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "double", "signature": "double getZoomWheelDelta()", "full_signature": "@VisibleForTesting public double getZoomWheelDelta()", "class_method_signature": "ProfilerScrollbar.getZoomWheelDelta()", "testcase": false, "constructor": false}, {"identifier": "getPanWheelDelta", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "double", "signature": "double getPanWheelDelta()", "full_signature": "@VisibleForTesting public double getPanWheelDelta()", "class_method_signature": "ProfilerScrollbar.getPanWheelDelta()", "testcase": false, "constructor": false}, {"identifier": "modelChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void modelChanged()", "full_signature": "private void modelChanged()", "class_method_signature": "ProfilerScrollbar.modelChanged()", "testcase": false, "constructor": false}, {"identifier": "updateModel", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateModel()", "full_signature": "private void updateModel()", "class_method_signature": "ProfilerScrollbar.updateModel()", "testcase": false, "constructor": false}, {"identifier": "paintComponent", "parameters": "(Graphics g)", "modifiers": "@Override protected", "return": "void", "signature": "void paintComponent(Graphics g)", "full_signature": "@Override protected void paintComponent(Graphics g)", "class_method_signature": "ProfilerScrollbar.paintComponent(Graphics g)", "testcase": false, "constructor": false}, {"identifier": "isScrollable", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "boolean", "signature": "boolean isScrollable()", "full_signature": "@VisibleForTesting public boolean isScrollable()", "class_method_signature": "ProfilerScrollbar.isScrollable()", "testcase": false, "constructor": false}, {"identifier": "isCloseToMax", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isCloseToMax()", "full_signature": "private boolean isCloseToMax()", "class_method_signature": "ProfilerScrollbar.isCloseToMax()", "testcase": false, "constructor": false}], "file": "profilers-ui/src/com/android/tools/profilers/ProfilerScrollbar.java"}, "focal_method": {"identifier": "modelChanged", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void modelChanged() {\n    myUpdating = true;\n    Range dataRangeUs = myTimeline.getDataRange();\n    Range viewRangeUs = myTimeline.getViewRange();\n    int dataExtentMs = (int)((dataRangeUs.getLength()) / MS_TO_US);\n    int viewExtentMs = Math.min(dataExtentMs, (int)(viewRangeUs.getLength() / MS_TO_US));\n    int viewRelativeMinMs = Math.max(0, (int)((viewRangeUs.getMin() - dataRangeUs.getMin()) / MS_TO_US));\n\n    setValues(viewRelativeMinMs, viewExtentMs, 0, dataExtentMs);\n    setBlockIncrement(viewExtentMs);\n    myUpdating = false;\n  }", "signature": "void modelChanged()", "full_signature": "private void modelChanged()", "class_method_signature": "ProfilerScrollbar.modelChanged()", "testcase": false, "constructor": false, "invocations": ["getDataRange", "getViewRange", "getLength", "min", "getLength", "max", "getMin", "getMin", "setValues", "setBlockIncrement"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}