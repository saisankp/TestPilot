{"test_class": {"identifier": "JsonValueConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JsonValueConverter<Map<String, TestObject>> jsonValueConverter =\n\t\t\tnew JsonValueConverter<Map<String, TestObject>>(new TypeReference<Map<String, TestObject>>(){});", "modifier": "private", "type": "JsonValueConverter<Map<String, TestObject>>", "declarator": "jsonValueConverter =\n\t\t\tnew JsonValueConverter<Map<String, TestObject>>(new TypeReference<Map<String, TestObject>>(){})", "var_name": "jsonValueConverter"}], "file": "stagemonitor-configuration/src/test/java/org/stagemonitor/configuration/converter/JsonValueConverterTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConvert() throws Exception {\n\t\tMap<String, TestObject> convert = jsonValueConverter.convert(\"{ \\\"1\\\": { \\\"test\\\": \\\"foobar\\\" } }\");\n\t\tAssert.assertEquals(\"foobar\", convert.get(\"1\").getTest());\n\t}", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "JsonValueConverterTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals", "getTest", "get"]}, "focal_class": {"identifier": "JsonValueConverter", "superclass": "extends AbstractValueConverter<T>", "interfaces": "", "fields": [{"original_string": "private final TypeReference<T> typeReference;", "modifier": "private final", "type": "TypeReference<T>", "declarator": "typeReference", "var_name": "typeReference"}, {"original_string": "private final ObjectMapper objectMapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "methods": [{"identifier": "JsonValueConverter", "parameters": "(TypeReference<T> typeReference)", "modifiers": "public", "return": "", "signature": " JsonValueConverter(TypeReference<T> typeReference)", "full_signature": "public  JsonValueConverter(TypeReference<T> typeReference)", "class_method_signature": "JsonValueConverter.JsonValueConverter(TypeReference<T> typeReference)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(String s)", "modifiers": "@Override public", "return": "T", "signature": "T convert(String s)", "full_signature": "@Override public T convert(String s)", "class_method_signature": "JsonValueConverter.convert(String s)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(T value)", "modifiers": "@Override public", "return": "String", "signature": "String toString(T value)", "full_signature": "@Override public String toString(T value)", "class_method_signature": "JsonValueConverter.toString(T value)", "testcase": false, "constructor": false}], "file": "stagemonitor-configuration/src/main/java/org/stagemonitor/configuration/converter/JsonValueConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String s)", "modifiers": "@Override public", "return": "T", "body": "@Override\n\tpublic T convert(String s) {\n\t\ttry {\n\t\t\treturn objectMapper.readValue(s, typeReference);\n\t\t} catch (IOException e) {\n\t\t\tthrow new IllegalArgumentException(e);\n\t\t}\n\t}", "signature": "T convert(String s)", "full_signature": "@Override public T convert(String s)", "class_method_signature": "JsonValueConverter.convert(String s)", "testcase": false, "constructor": false, "invocations": ["readValue"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}