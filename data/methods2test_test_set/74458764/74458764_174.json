{"test_class": {"identifier": "TestInitializeSessionManagement", "superclass": "", "interfaces": "", "fields": [], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestInitializeSessionManagement.java"}, "test_case": {"identifier": "testWithProviders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWithProviders() throws ServletException {\n    InitializeSessionManagement ism = new InitializeSessionManagement();\n    ServletContext context = mock(ServletContext.class);\n    Dynamic dynamic = mock(Dynamic.class);\n    when(context.addFilter(any(String.class), any(Filter.class))).thenReturn(dynamic);\n    when(context.getClassLoader()).thenReturn(this.getClass().getClassLoader());\n    ism.onStartup(null, context);\n    @SuppressWarnings(\"rawtypes\")\n    ArgumentCaptor<HashMap> arg = ArgumentCaptor.forClass(HashMap.class);\n    verify(context).setAttribute(eq(PROVIDERS), arg.capture());\n    assertTrue(arg.getValue().containsKey(\"redis\"));\n    assertEquals(JedisSessionRepositoryFactory.class.getName(), arg.getValue().get(\"redis\"));\n    assertTrue(arg.getValue().containsKey(\"in-memory\"));\n    assertEquals(InMemoryRepositoryFactory.class.getName(), arg.getValue().get(\"in-memory\"));\n  }", "signature": "void testWithProviders()", "full_signature": "@Test public void testWithProviders()", "class_method_signature": "TestInitializeSessionManagement.testWithProviders()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "addFilter", "any", "any", "thenReturn", "when", "getClassLoader", "getClassLoader", "getClass", "onStartup", "forClass", "setAttribute", "verify", "eq", "capture", "assertTrue", "containsKey", "getValue", "assertEquals", "getName", "get", "getValue", "assertTrue", "containsKey", "getValue", "assertEquals", "getName", "get", "getValue"]}, "focal_class": {"identifier": "InitializeSessionManagement", "superclass": "", "interfaces": "implements ServletContainerInitializer", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(InitializeSessionManagement.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(InitializeSessionManagement.class)", "var_name": "logger"}, {"original_string": "private static boolean disabled = Boolean.parseBoolean(getPropertySecured(DISABLED_SESSION, null));", "modifier": "private static", "type": "boolean", "declarator": "disabled = Boolean.parseBoolean(getPropertySecured(DISABLED_SESSION, null))", "var_name": "disabled"}], "methods": [{"identifier": "onStartup", "parameters": "(Set<Class<?>> classes, ServletContext context)", "modifiers": "@Override public", "return": "void", "signature": "void onStartup(Set<Class<?>> classes, ServletContext context)", "full_signature": "@Override public void onStartup(Set<Class<?>> classes, ServletContext context)", "class_method_signature": "InitializeSessionManagement.onStartup(Set<Class<?>> classes, ServletContext context)", "testcase": false, "constructor": false}, {"identifier": "setupProviders", "parameters": "(ServletContext context)", "modifiers": "static", "return": "void", "signature": "void setupProviders(ServletContext context)", "full_signature": "static void setupProviders(ServletContext context)", "class_method_signature": "InitializeSessionManagement.setupProviders(ServletContext context)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/InitializeSessionManagement.java"}, "focal_method": {"identifier": "onStartup", "parameters": "(Set<Class<?>> classes, ServletContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void onStartup(Set<Class<?>> classes, ServletContext context) throws ServletException {\n    // If session support is disabled, just log it\n    if (disabled || Boolean.parseBoolean(context.getInitParameter(DISABLED_SESSION))) {\n      logger.warn(\"Session management disabled for {}, {}, {}\", context.getContextPath(), disabled,\n          context.getInitParameter(DISABLED_SESSION));\n      return;\n    }\n    setupProviders(context);\n    initSessionManagement(context);\n  }", "signature": "void onStartup(Set<Class<?>> classes, ServletContext context)", "full_signature": "@Override public void onStartup(Set<Class<?>> classes, ServletContext context)", "class_method_signature": "InitializeSessionManagement.onStartup(Set<Class<?>> classes, ServletContext context)", "testcase": false, "constructor": false, "invocations": ["parseBoolean", "getInitParameter", "warn", "getContextPath", "getInitParameter", "setupProviders", "initSessionManagement"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}