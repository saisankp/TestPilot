{"test_class": {"identifier": "MaybeCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/maybe/MaybeCacheTest.java"}, "test_case": {"identifier": "crossCancelOnComplete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void crossCancelOnComplete() {\n\n        final TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n\n        PublishProcessor<Integer> pp = PublishProcessor.create();\n\n        Maybe<Integer> source = pp.singleElement().cache();\n\n        source.subscribe(Functions.emptyConsumer(), Functions.emptyConsumer(), new Action() {\n            @Override\n            public void run() throws Exception {\n                ts.cancel();\n            }\n        });\n\n        source.toFlowable().subscribe(ts);\n\n        pp.onComplete();\n\n        ts.assertEmpty();\n    }", "signature": "void crossCancelOnComplete()", "full_signature": "@Test public void crossCancelOnComplete()", "class_method_signature": "MaybeCacheTest.crossCancelOnComplete()", "testcase": true, "constructor": false, "invocations": ["create", "cache", "singleElement", "subscribe", "emptyConsumer", "emptyConsumer", "cancel", "subscribe", "toFlowable", "onComplete", "assertEmpty"]}, "focal_class": {"identifier": "MaybeCache", "superclass": "extends Maybe<T>", "interfaces": "implements MaybeObserver<T>", "fields": [{"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final CacheDisposable[] EMPTY = new CacheDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "CacheDisposable[]", "declarator": "EMPTY = new CacheDisposable[0]", "var_name": "EMPTY"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final CacheDisposable[] TERMINATED = new CacheDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "CacheDisposable[]", "declarator": "TERMINATED = new CacheDisposable[0]", "var_name": "TERMINATED"}, {"original_string": "final AtomicReference<MaybeSource<T>> source;", "modifier": "final", "type": "AtomicReference<MaybeSource<T>>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<CacheDisposable<T>[]> observers;", "modifier": "final", "type": "AtomicReference<CacheDisposable<T>[]>", "declarator": "observers", "var_name": "observers"}, {"original_string": "T value;", "modifier": "", "type": "T", "declarator": "value", "var_name": "value"}, {"original_string": "Throwable error;", "modifier": "", "type": "Throwable", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "MaybeCache", "parameters": "(MaybeSource<T> source)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " MaybeCache(MaybeSource<T> source)", "full_signature": "@SuppressWarnings(\"unchecked\") public  MaybeCache(MaybeSource<T> source)", "class_method_signature": "MaybeCache.MaybeCache(MaybeSource<T> source)", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(MaybeObserver<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(MaybeObserver<? super T> observer)", "full_signature": "@Override protected void subscribeActual(MaybeObserver<? super T> observer)", "class_method_signature": "MaybeCache.subscribeActual(MaybeObserver<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Disposable d)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable d)", "full_signature": "@Override public void onSubscribe(Disposable d)", "class_method_signature": "MaybeCache.onSubscribe(Disposable d)", "testcase": false, "constructor": false}, {"identifier": "onSuccess", "parameters": "(T value)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onSuccess(T value)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onSuccess(T value)", "class_method_signature": "MaybeCache.onSuccess(T value)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable e)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onError(Throwable e)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onError(Throwable e)", "class_method_signature": "MaybeCache.onError(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onComplete()", "class_method_signature": "MaybeCache.onComplete()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(CacheDisposable<T> inner)", "modifiers": "", "return": "boolean", "signature": "boolean add(CacheDisposable<T> inner)", "full_signature": " boolean add(CacheDisposable<T> inner)", "class_method_signature": "MaybeCache.add(CacheDisposable<T> inner)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(CacheDisposable<T> inner)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void remove(CacheDisposable<T> inner)", "full_signature": "@SuppressWarnings(\"unchecked\") void remove(CacheDisposable<T> inner)", "class_method_signature": "MaybeCache.remove(CacheDisposable<T> inner)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/maybe/MaybeCache.java"}, "focal_method": {"identifier": "onComplete", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public void onComplete() {\n        for (CacheDisposable<T> inner : observers.getAndSet(TERMINATED)) {\n            if (!inner.isDisposed()) {\n                inner.actual.onComplete();\n            }\n        }\n    }", "signature": "void onComplete()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onComplete()", "class_method_signature": "MaybeCache.onComplete()", "testcase": false, "constructor": false, "invocations": ["getAndSet", "isDisposed", "onComplete"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}