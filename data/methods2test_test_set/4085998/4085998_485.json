{"test_class": {"identifier": "urn_perun_entityless_attribute_def_def_usedGidsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static urn_perun_entityless_attribute_def_def_usedGids classInstance;", "modifier": "private static", "type": "urn_perun_entityless_attribute_def_def_usedGids", "declarator": "classInstance", "var_name": "classInstance"}, {"original_string": "private static PerunSessionImpl session;", "modifier": "private static", "type": "PerunSessionImpl", "declarator": "session", "var_name": "session"}, {"original_string": "private static Attribute attributeToCheck;", "modifier": "private static", "type": "Attribute", "declarator": "attributeToCheck", "var_name": "attributeToCheck"}], "file": "perun-core/src/test/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_entityless_attribute_def_def_usedGidsTest.java"}, "test_case": {"identifier": "testCheckValueWithWrongValueInMap", "parameters": "()", "modifiers": "@Test(expected = WrongAttributeValueException.class) public", "return": "void", "body": "@Test(expected = WrongAttributeValueException.class)\n\tpublic void testCheckValueWithWrongValueInMap() throws Exception {\n\t\tSystem.out.println(\"testCheckValueWithWrongValueInMap()\");\n\t\tMap<String, String> value = new LinkedHashMap<>();\n\t\tvalue.put(\"R11\", \"bad value\");\n\t\tattributeToCheck.setValue(value);\n\n\t\tclassInstance.checkAttributeSyntax(session, \"key\", attributeToCheck);\n\t}", "signature": "void testCheckValueWithWrongValueInMap()", "full_signature": "@Test(expected = WrongAttributeValueException.class) public void testCheckValueWithWrongValueInMap()", "class_method_signature": "urn_perun_entityless_attribute_def_def_usedGidsTest.testCheckValueWithWrongValueInMap()", "testcase": true, "constructor": false, "invocations": ["println", "put", "setValue", "checkAttributeSyntax"]}, "focal_class": {"identifier": "urn_perun_entityless_attribute_def_def_usedGids", "superclass": "extends EntitylessAttributesModuleAbstract", "interfaces": "implements EntitylessAttributesModuleImplApi", "fields": [{"original_string": "private static final Pattern keyPattern = Pattern.compile(\"^[RGD][1-9][0-9]*$\");", "modifier": "private static final", "type": "Pattern", "declarator": "keyPattern = Pattern.compile(\"^[RGD][1-9][0-9]*$\")", "var_name": "keyPattern"}, {"original_string": "private static final Pattern valuePattern = Pattern.compile(\"^[1-9][0-9]*$\");", "modifier": "private static final", "type": "Pattern", "declarator": "valuePattern = Pattern.compile(\"^[1-9][0-9]*$\")", "var_name": "valuePattern"}], "methods": [{"identifier": "checkAttributeSyntax", "parameters": "(PerunSessionImpl perunSession, String key, Attribute attribute)", "modifiers": "@Override public", "return": "void", "signature": "void checkAttributeSyntax(PerunSessionImpl perunSession, String key, Attribute attribute)", "full_signature": "@Override public void checkAttributeSyntax(PerunSessionImpl perunSession, String key, Attribute attribute)", "class_method_signature": "urn_perun_entityless_attribute_def_def_usedGids.checkAttributeSyntax(PerunSessionImpl perunSession, String key, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "getAttributeDefinition", "parameters": "()", "modifiers": "@Override public", "return": "AttributeDefinition", "signature": "AttributeDefinition getAttributeDefinition()", "full_signature": "@Override public AttributeDefinition getAttributeDefinition()", "class_method_signature": "urn_perun_entityless_attribute_def_def_usedGids.getAttributeDefinition()", "testcase": false, "constructor": false}], "file": "perun-core/src/main/java/cz/metacentrum/perun/core/impl/modules/attributes/urn_perun_entityless_attribute_def_def_usedGids.java"}, "focal_method": {"identifier": "checkAttributeSyntax", "parameters": "(PerunSessionImpl perunSession, String key, Attribute attribute)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void checkAttributeSyntax(PerunSessionImpl perunSession, String key, Attribute attribute) throws WrongAttributeValueException {\n\t\t//If this attribute value is null, it means there is no GIDS depleted or used.\n\t\tif(attribute.getValue() == null) return;\n\t\t\n\t\tMap<String, String> map = attribute.valueAsMap();\n\n\t\tSet<String> mapKeys = map.keySet();\n\t\tfor(String mapKey: mapKeys) {\n\t\t\t//Test key\n\t\t\tif(mapKey == null) throw new WrongAttributeValueException(attribute, key, \"Key in usedGids can't be null.\");\n\t\t\tMatcher keyMatcher = keyPattern.matcher(mapKey);\n\t\t\tif(!keyMatcher.matches()) throw new WrongAttributeValueException(attribute, key, \"Key in usedGids can be only in format 'Rx', 'Gx', 'Dx' where 'x' is positive integer.\");\n\t\t\t\n\t\t\t//Test value\n\t\t\tString value = map.get(mapKey);\n\t\t\tif(value == null) throw new WrongAttributeValueException(attribute, key, \"Value in usedGids can't be null.\");\n\t\t\tMatcher valueMatcher = valuePattern.matcher(value);\n\t\t\tif(!valueMatcher.matches()) throw new WrongAttributeValueException(attribute, key, \"Key in usedGids can be only positive integer.\");\n\t\t}\n\t\t\n\t\t//If group or resource has some gid, this gid can't be depleted at the same time!\n\t\tfor(String mapKey: mapKeys) {\n\t\t\t//We have to skip keys in usedGids which start with \"D\",\n\t\t\t//usedGids always contains key \"D\" + value when value has key starting with \"D\"\n\t\t\tif(mapKey.startsWith(\"D\")) continue;\n\t\t\tString value = map.get(mapKey);\n\t\t\tif(map.containsKey(\"D\" + value)) throw new WrongAttributeValueException(attribute, key, \"This gid can't be depleted and used at the same time!\");\n\t\t}\n\t}", "signature": "void checkAttributeSyntax(PerunSessionImpl perunSession, String key, Attribute attribute)", "full_signature": "@Override public void checkAttributeSyntax(PerunSessionImpl perunSession, String key, Attribute attribute)", "class_method_signature": "urn_perun_entityless_attribute_def_def_usedGids.checkAttributeSyntax(PerunSessionImpl perunSession, String key, Attribute attribute)", "testcase": false, "constructor": false, "invocations": ["getValue", "valueAsMap", "keySet", "matcher", "matches", "get", "matcher", "matches", "startsWith", "get", "containsKey"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}