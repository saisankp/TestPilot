{"test_class": {"identifier": "ExpressionTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jboss/hal/core/expression/ExpressionTest.java"}, "test_case": {"identifier": "nil", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void nil() {\n        Expression.of(null);\n    }", "signature": "void nil()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void nil()", "class_method_signature": "ExpressionTest.nil()", "testcase": true, "constructor": false, "invocations": ["of"]}, "focal_class": {"identifier": "Expression", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EXPRESSION_START = \"${\";", "modifier": "private static final", "type": "String", "declarator": "EXPRESSION_START = \"${\"", "var_name": "EXPRESSION_START"}, {"original_string": "private static final String EXPRESSION_END = \"}\";", "modifier": "private static final", "type": "String", "declarator": "EXPRESSION_END = \"}\"", "var_name": "EXPRESSION_END"}, {"original_string": "private String prefix;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private String suffix;", "modifier": "private", "type": "String", "declarator": "suffix", "var_name": "suffix"}, {"original_string": "private String key;", "modifier": "private", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private String defaultValue;", "modifier": "private", "type": "String", "declarator": "defaultValue", "var_name": "defaultValue"}], "methods": [{"identifier": "isExpression", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isExpression(String value)", "full_signature": "public static boolean isExpression(String value)", "class_method_signature": "Expression.isExpression(String value)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String value)", "modifiers": "public static", "return": "Expression", "signature": "Expression of(String value)", "full_signature": "public static Expression of(String value)", "class_method_signature": "Expression.of(String value)", "testcase": false, "constructor": false}, {"identifier": "Expression", "parameters": "(String prefix, String key, String defaultValue, String suffix)", "modifiers": "private", "return": "", "signature": " Expression(String prefix, String key, String defaultValue, String suffix)", "full_signature": "private  Expression(String prefix, String key, String defaultValue, String suffix)", "class_method_signature": "Expression.Expression(String prefix, String key, String defaultValue, String suffix)", "testcase": false, "constructor": true}, {"identifier": "getKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getKey()", "full_signature": "public String getKey()", "class_method_signature": "Expression.getKey()", "testcase": false, "constructor": false}, {"identifier": "getDefaultValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDefaultValue()", "full_signature": "public String getDefaultValue()", "class_method_signature": "Expression.getDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrefix()", "full_signature": "public String getPrefix()", "class_method_signature": "Expression.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "getSuffix", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSuffix()", "full_signature": "public String getSuffix()", "class_method_signature": "Expression.getSuffix()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Expression.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Expression.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Expression.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jboss/hal/core/expression/Expression.java"}, "focal_method": {"identifier": "of", "parameters": "(String value)", "modifiers": "public static", "return": "Expression", "body": "public static Expression of(String value) {\n        if (!Strings.isNullOrEmpty(value) && value.trim().length() != 0) {\n            if (value.contains(EXPRESSION_START) && value.indexOf(EXPRESSION_END) > 1) {\n                int init = value.indexOf(EXPRESSION_START);\n                int end = value.indexOf(EXPRESSION_END);\n                String token = value.substring(init + 2, end);\n                String prefix = null;\n                String suffix = null;\n                if (init > 0) {\n                    prefix = value.substring(0, init);\n                }\n                if (end < value.length() - 1) {\n                    suffix = value.substring(end + 1);\n                }\n                int idx = token.indexOf(\":\");\n                String defaultValue = null;\n                if (idx != -1) {\n                    defaultValue = token.substring(idx + 1, token.length());\n                    token = token.substring(0, idx);\n                }\n                return new Expression(prefix, token, defaultValue, suffix);\n            } else {\n                throw new IllegalArgumentException(\n                        \"Illegal expression \\\"\" + value + \"\\\": Please use the pattern ${key[:default-value]}\");\n            }\n        }\n        throw new IllegalArgumentException(\"Empty expression: Please use the pattern ${key[:default-value]}\");\n    }", "signature": "Expression of(String value)", "full_signature": "public static Expression of(String value)", "class_method_signature": "Expression.of(String value)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "length", "trim", "contains", "indexOf", "indexOf", "indexOf", "substring", "substring", "length", "substring", "indexOf", "substring", "length", "substring"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}