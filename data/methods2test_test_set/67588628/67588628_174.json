{"test_class": {"identifier": "DefaultConfigurationReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private ConfigurationReader configurationReader;", "modifier": "@Inject\n    private", "type": "ConfigurationReader", "declarator": "configurationReader", "var_name": "configurationReader"}], "file": "artemis-configuration/src/test/java/org/jnosql/artemis/configuration/DefaultConfigurationReaderTest.java"}, "test_case": {"identifier": "shouldReturnNPEWhenConfigurationIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNPEWhenConfigurationIsNull() {\n        Assertions.assertThrows(NullPointerException.class, () -> {\n            ConfigurationUnit annotation = mock(ConfigurationUnit.class);\n            configurationReader.read(annotation, null);\n        });\n    }", "signature": "void shouldReturnNPEWhenConfigurationIsNull()", "full_signature": "@Test public void shouldReturnNPEWhenConfigurationIsNull()", "class_method_signature": "DefaultConfigurationReaderTest.shouldReturnNPEWhenConfigurationIsNull()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "mock", "read"]}, "focal_class": {"identifier": "DefaultConfigurationReader", "superclass": "", "interfaces": "implements ConfigurationReader", "fields": [{"original_string": "private static final String META_INF = \"META-INF/\";", "modifier": "private static final", "type": "String", "declarator": "META_INF = \"META-INF/\"", "var_name": "META_INF"}, {"original_string": "private static final String WEB_INF = \"WEB-INF/\";", "modifier": "private static final", "type": "String", "declarator": "WEB_INF = \"WEB-INF/\"", "var_name": "WEB_INF"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(DefaultConfigurationReader.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(DefaultConfigurationReader.class.getName())", "var_name": "LOGGER"}, {"original_string": "@Inject\n    private Reflections reflections;", "modifier": "@Inject\n    private", "type": "Reflections", "declarator": "reflections", "var_name": "reflections"}, {"original_string": "@Inject\n    @Any\n    private Instance<ConfigurableReader> readers;", "modifier": "@Inject\n    @Any\n    private", "type": "Instance<ConfigurableReader>", "declarator": "readers", "var_name": "readers"}], "methods": [{"identifier": "read", "parameters": "(ConfigurationUnit annotation, Class<T> configurationClass)", "modifiers": "@Override public", "return": "ConfigurationSettingsUnit", "signature": "ConfigurationSettingsUnit read(ConfigurationUnit annotation, Class<T> configurationClass)", "full_signature": "@Override public ConfigurationSettingsUnit read(ConfigurationUnit annotation, Class<T> configurationClass)", "class_method_signature": "DefaultConfigurationReader.read(ConfigurationUnit annotation, Class<T> configurationClass)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(ConfigurationUnit annotation)", "modifiers": "@Override public", "return": "ConfigurationSettingsUnit", "signature": "ConfigurationSettingsUnit read(ConfigurationUnit annotation)", "full_signature": "@Override public ConfigurationSettingsUnit read(ConfigurationUnit annotation)", "class_method_signature": "DefaultConfigurationReader.read(ConfigurationUnit annotation)", "testcase": false, "constructor": false}, {"identifier": "getConfigurations", "parameters": "(ConfigurationUnit annotation)", "modifiers": "private", "return": "List<Configurable>", "signature": "List<Configurable> getConfigurations(ConfigurationUnit annotation)", "full_signature": "private List<Configurable> getConfigurations(ConfigurationUnit annotation)", "class_method_signature": "DefaultConfigurationReader.getConfigurations(ConfigurationUnit annotation)", "testcase": false, "constructor": false}, {"identifier": "getSettings", "parameters": "(Configurable configuration)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getSettings(Configurable configuration)", "full_signature": "private Map<String, Object> getSettings(Configurable configuration)", "class_method_signature": "DefaultConfigurationReader.getSettings(Configurable configuration)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(ConfigurationUnit annotation)", "modifiers": "private", "return": "String", "signature": "String getExtension(ConfigurationUnit annotation)", "full_signature": "private String getExtension(ConfigurationUnit annotation)", "class_method_signature": "DefaultConfigurationReader.getExtension(ConfigurationUnit annotation)", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "(Class<T> configurationClass, Configurable configuration)", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> getProvider(Class<T> configurationClass, Configurable configuration)", "full_signature": "private Class<?> getProvider(Class<T> configurationClass, Configurable configuration)", "class_method_signature": "DefaultConfigurationReader.getProvider(Class<T> configurationClass, Configurable configuration)", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "(ConfigurationUnit annotation, List<Configurable> configurations)", "modifiers": "private", "return": "Configurable", "signature": "Configurable getConfiguration(ConfigurationUnit annotation, List<Configurable> configurations)", "full_signature": "private Configurable getConfiguration(ConfigurationUnit annotation, List<Configurable> configurations)", "class_method_signature": "DefaultConfigurationReader.getConfiguration(ConfigurationUnit annotation, List<Configurable> configurations)", "testcase": false, "constructor": false}, {"identifier": "readStream", "parameters": "(ConfigurationUnit annotation)", "modifiers": "private", "return": "Supplier<InputStream>", "signature": "Supplier<InputStream> readStream(ConfigurationUnit annotation)", "full_signature": "private Supplier<InputStream> readStream(ConfigurationUnit annotation)", "class_method_signature": "DefaultConfigurationReader.readStream(ConfigurationUnit annotation)", "testcase": false, "constructor": false}], "file": "artemis-configuration/src/main/java/org/jnosql/artemis/configuration/DefaultConfigurationReader.java"}, "focal_method": {"identifier": "read", "parameters": "(ConfigurationUnit annotation, Class<T> configurationClass)", "modifiers": "@Override public", "return": "ConfigurationSettingsUnit", "body": "@Override\n    public <T> ConfigurationSettingsUnit read(ConfigurationUnit annotation, Class<T> configurationClass) {\n\n        requireNonNull(annotation, \"annotation is required\");\n        requireNonNull(configurationClass, \"configurationClass is required\");\n\n\n        List<Configurable> configurations = getConfigurations(annotation);\n        Configurable configuration = getConfiguration(annotation, configurations);\n\n        String name = configuration.getName();\n        String description = configuration.getDescription();\n        Map<String, Object> settings = getSettings(configuration);\n        Class<?> provider = getProvider(configurationClass, configuration);\n\n        return new DefaultConfigurationSettingsUnit(name, description, provider, Settings.of(settings));\n    }", "signature": "ConfigurationSettingsUnit read(ConfigurationUnit annotation, Class<T> configurationClass)", "full_signature": "@Override public ConfigurationSettingsUnit read(ConfigurationUnit annotation, Class<T> configurationClass)", "class_method_signature": "DefaultConfigurationReader.read(ConfigurationUnit annotation, Class<T> configurationClass)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "getConfigurations", "getConfiguration", "getName", "getDescription", "getSettings", "getProvider", "of"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}