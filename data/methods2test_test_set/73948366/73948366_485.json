{"test_class": {"identifier": "KeyManagerProxyTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/cert_refresher/src/test/java/com/oath/auth/KeyManagerProxyTest.java"}, "test_case": {"identifier": "testKeyManagerProxyGetCertificateChain", "parameters": "(@Mocked X509ExtendedKeyManager mockedKeyManager)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testKeyManagerProxyGetCertificateChain(@Mocked X509ExtendedKeyManager mockedKeyManager) {\n        new Expectations() {{\n            mockedKeyManager.getCertificateChain(\"cert\"); times = 1;\n        }};\n\n        KeyManagerProxy keyManagerProxy = new KeyManagerProxy(new KeyManager[]{mockedKeyManager});\n\n        keyManagerProxy.getCertificateChain(\"cert\");\n    }", "signature": "void testKeyManagerProxyGetCertificateChain(@Mocked X509ExtendedKeyManager mockedKeyManager)", "full_signature": "@Test public void testKeyManagerProxyGetCertificateChain(@Mocked X509ExtendedKeyManager mockedKeyManager)", "class_method_signature": "KeyManagerProxyTest.testKeyManagerProxyGetCertificateChain(@Mocked X509ExtendedKeyManager mockedKeyManager)", "testcase": true, "constructor": false, "invocations": ["getCertificateChain", "getCertificateChain"]}, "focal_class": {"identifier": "KeyManagerProxy", "superclass": "extends X509ExtendedKeyManager", "interfaces": "", "fields": [{"original_string": "private volatile X509ExtendedKeyManager keyManager;", "modifier": "private volatile", "type": "X509ExtendedKeyManager", "declarator": "keyManager", "var_name": "keyManager"}], "methods": [{"identifier": "KeyManagerProxy", "parameters": "(KeyManager[] keyManagers)", "modifiers": "public", "return": "", "signature": " KeyManagerProxy(KeyManager[] keyManagers)", "full_signature": "public  KeyManagerProxy(KeyManager[] keyManagers)", "class_method_signature": "KeyManagerProxy.KeyManagerProxy(KeyManager[] keyManagers)", "testcase": false, "constructor": true}, {"identifier": "setKeyManager", "parameters": "(final KeyManager[] keyManagers)", "modifiers": "public", "return": "void", "signature": "void setKeyManager(final KeyManager[] keyManagers)", "full_signature": "public void setKeyManager(final KeyManager[] keyManagers)", "class_method_signature": "KeyManagerProxy.setKeyManager(final KeyManager[] keyManagers)", "testcase": false, "constructor": false}, {"identifier": "getClientAliases", "parameters": "(String s, Principal[] principals)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getClientAliases(String s, Principal[] principals)", "full_signature": "@Override public String[] getClientAliases(String s, Principal[] principals)", "class_method_signature": "KeyManagerProxy.getClientAliases(String s, Principal[] principals)", "testcase": false, "constructor": false}, {"identifier": "chooseClientAlias", "parameters": "(String[] strings, Principal[] principals, Socket socket)", "modifiers": "@Override public", "return": "String", "signature": "String chooseClientAlias(String[] strings, Principal[] principals, Socket socket)", "full_signature": "@Override public String chooseClientAlias(String[] strings, Principal[] principals, Socket socket)", "class_method_signature": "KeyManagerProxy.chooseClientAlias(String[] strings, Principal[] principals, Socket socket)", "testcase": false, "constructor": false}, {"identifier": "getServerAliases", "parameters": "(String s, Principal[] principals)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getServerAliases(String s, Principal[] principals)", "full_signature": "@Override public String[] getServerAliases(String s, Principal[] principals)", "class_method_signature": "KeyManagerProxy.getServerAliases(String s, Principal[] principals)", "testcase": false, "constructor": false}, {"identifier": "chooseServerAlias", "parameters": "(String s, Principal[] principals, Socket socket)", "modifiers": "@Override public", "return": "String", "signature": "String chooseServerAlias(String s, Principal[] principals, Socket socket)", "full_signature": "@Override public String chooseServerAlias(String s, Principal[] principals, Socket socket)", "class_method_signature": "KeyManagerProxy.chooseServerAlias(String s, Principal[] principals, Socket socket)", "testcase": false, "constructor": false}, {"identifier": "getCertificateChain", "parameters": "(String s)", "modifiers": "@Override public", "return": "X509Certificate[]", "signature": "X509Certificate[] getCertificateChain(String s)", "full_signature": "@Override public X509Certificate[] getCertificateChain(String s)", "class_method_signature": "KeyManagerProxy.getCertificateChain(String s)", "testcase": false, "constructor": false}, {"identifier": "getPrivateKey", "parameters": "(String s)", "modifiers": "@Override public", "return": "PrivateKey", "signature": "PrivateKey getPrivateKey(String s)", "full_signature": "@Override public PrivateKey getPrivateKey(String s)", "class_method_signature": "KeyManagerProxy.getPrivateKey(String s)", "testcase": false, "constructor": false}, {"identifier": "chooseEngineClientAlias", "parameters": "(String[] keyType, Principal[] issuers, SSLEngine engine)", "modifiers": "@Override public", "return": "String", "signature": "String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine)", "full_signature": "@Override public String chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine)", "class_method_signature": "KeyManagerProxy.chooseEngineClientAlias(String[] keyType, Principal[] issuers, SSLEngine engine)", "testcase": false, "constructor": false}, {"identifier": "chooseEngineServerAlias", "parameters": "(String keyType, Principal[] issuers, SSLEngine engine)", "modifiers": "@Override public", "return": "String", "signature": "String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine)", "full_signature": "@Override public String chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine)", "class_method_signature": "KeyManagerProxy.chooseEngineServerAlias(String keyType, Principal[] issuers, SSLEngine engine)", "testcase": false, "constructor": false}], "file": "libs/java/cert_refresher/src/main/java/com/oath/auth/KeyManagerProxy.java"}, "focal_method": {"identifier": "getCertificateChain", "parameters": "(String s)", "modifiers": "@Override public", "return": "X509Certificate[]", "body": "@Override\n    public X509Certificate[] getCertificateChain(String s) {\n        return keyManager.getCertificateChain(s);\n    }", "signature": "X509Certificate[] getCertificateChain(String s)", "full_signature": "@Override public X509Certificate[] getCertificateChain(String s)", "class_method_signature": "KeyManagerProxy.getCertificateChain(String s)", "testcase": false, "constructor": false, "invocations": ["getCertificateChain"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}