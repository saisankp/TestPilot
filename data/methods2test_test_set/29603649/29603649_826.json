{"test_class": {"identifier": "HostValidatorServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private List<String> allowedHosts;", "modifier": "@Mock\n    private", "type": "List<String>", "declarator": "allowedHosts", "var_name": "allowedHosts"}, {"original_string": "@Mock\n    private WilmaAdminHostsDTO wilmaAdminHostsDTO;", "modifier": "@Mock\n    private", "type": "WilmaAdminHostsDTO", "declarator": "wilmaAdminHostsDTO", "var_name": "wilmaAdminHostsDTO"}, {"original_string": "@Mock\n    private IpAddressResolver ipAddressResolver;", "modifier": "@Mock\n    private", "type": "IpAddressResolver", "declarator": "ipAddressResolver", "var_name": "ipAddressResolver"}, {"original_string": "@InjectMocks\n    private HostValidatorService underTest;", "modifier": "@InjectMocks\n    private", "type": "HostValidatorService", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private HttpServletRequest httpServletRequest;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/security/HostValidatorServiceTest.java"}, "test_case": {"identifier": "testIsRequestFromAdminShouldReturnFalseWhenHostIsNotAdminAndSecurityIsEnabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsRequestFromAdminShouldReturnFalseWhenHostIsNotAdminAndSecurityIsEnabled() {\n        //GIVEN\n        given(httpServletRequest.getRemoteAddr()).willReturn(\"ip\");\n        given(ipAddressResolver.resolveToHostName(\"ip\")).willReturn(\"host\");\n        given(wilmaAdminHostsDTO.isSecurityEnabled()).willReturn(true);\n        given(allowedHosts.contains(\"host\")).willReturn(false);\n        //WHEN\n        boolean result = underTest.isRequestFromAdmin(httpServletRequest);\n        //THEN\n        assertFalse(result);\n    }", "signature": "void testIsRequestFromAdminShouldReturnFalseWhenHostIsNotAdminAndSecurityIsEnabled()", "full_signature": "@Test public void testIsRequestFromAdminShouldReturnFalseWhenHostIsNotAdminAndSecurityIsEnabled()", "class_method_signature": "HostValidatorServiceTest.testIsRequestFromAdminShouldReturnFalseWhenHostIsNotAdminAndSecurityIsEnabled()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getRemoteAddr", "willReturn", "given", "resolveToHostName", "willReturn", "given", "isSecurityEnabled", "willReturn", "given", "contains", "isRequestFromAdmin", "assertFalse"]}, "focal_class": {"identifier": "HostValidatorService", "superclass": "", "interfaces": "implements ApplicationListener<ContextRefreshedEvent>", "fields": [{"original_string": "private List<String> allowedHosts;", "modifier": "private", "type": "List<String>", "declarator": "allowedHosts", "var_name": "allowedHosts"}, {"original_string": "@Autowired\n    private WilmaAdminHostsDTO wilmaAdminHostsDTO;", "modifier": "@Autowired\n    private", "type": "WilmaAdminHostsDTO", "declarator": "wilmaAdminHostsDTO", "var_name": "wilmaAdminHostsDTO"}, {"original_string": "@Autowired\n    private IpAddressResolver ipAddressResolver;", "modifier": "@Autowired\n    private", "type": "IpAddressResolver", "declarator": "ipAddressResolver", "var_name": "ipAddressResolver"}], "methods": [{"identifier": "isRequestFromAdmin", "parameters": "(final ServletRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean isRequestFromAdmin(final ServletRequest request)", "full_signature": "public boolean isRequestFromAdmin(final ServletRequest request)", "class_method_signature": "HostValidatorService.isRequestFromAdmin(final ServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "initializeAllowedHosts", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeAllowedHosts()", "full_signature": "private void initializeAllowedHosts()", "class_method_signature": "HostValidatorService.initializeAllowedHosts()", "testcase": false, "constructor": false}, {"identifier": "onApplicationEvent", "parameters": "(final ContextRefreshedEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onApplicationEvent(final ContextRefreshedEvent event)", "full_signature": "@Override public void onApplicationEvent(final ContextRefreshedEvent event)", "class_method_signature": "HostValidatorService.onApplicationEvent(final ContextRefreshedEvent event)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/security/HostValidatorService.java"}, "focal_method": {"identifier": "isRequestFromAdmin", "parameters": "(final ServletRequest request)", "modifiers": "public", "return": "boolean", "body": "public boolean isRequestFromAdmin(final ServletRequest request) {\n        String host = ipAddressResolver.resolveToHostName(request.getRemoteAddr());\n        return !wilmaAdminHostsDTO.isSecurityEnabled() || allowedHosts.contains(host);\n    }", "signature": "boolean isRequestFromAdmin(final ServletRequest request)", "full_signature": "public boolean isRequestFromAdmin(final ServletRequest request)", "class_method_signature": "HostValidatorService.isRequestFromAdmin(final ServletRequest request)", "testcase": false, "constructor": false, "invocations": ["resolveToHostName", "getRemoteAddr", "isSecurityEnabled", "contains"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}