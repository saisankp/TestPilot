{"test_class": {"identifier": "MessageCommandAckRequestSetterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ThingId THING_ID = ThingId.of(\"test.ns\", \"theThingId\");", "modifier": "private static final", "type": "ThingId", "declarator": "THING_ID = ThingId.of(\"test.ns\", \"theThingId\")", "var_name": "THING_ID"}, {"original_string": "private static final String SUBJECT = \"theSubject\";", "modifier": "private static final", "type": "String", "declarator": "SUBJECT = \"theSubject\"", "var_name": "SUBJECT"}, {"original_string": "private static final String CONTENT_TYPE = \"application/xml\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE = \"application/xml\"", "var_name": "CONTENT_TYPE"}, {"original_string": "private static final String KNOWN_RAW_PAYLOAD_STR = \"<some>42</some>\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_RAW_PAYLOAD_STR = \"<some>42</some>\"", "var_name": "KNOWN_RAW_PAYLOAD_STR"}, {"original_string": "private static final byte[] KNOWN_RAW_PAYLOAD_BYTES = KNOWN_RAW_PAYLOAD_STR.getBytes(StandardCharsets.UTF_8);", "modifier": "private static final", "type": "byte[]", "declarator": "KNOWN_RAW_PAYLOAD_BYTES = KNOWN_RAW_PAYLOAD_STR.getBytes(StandardCharsets.UTF_8)", "var_name": "KNOWN_RAW_PAYLOAD_BYTES"}, {"original_string": "static final Message<?> MESSAGE = MessagesModelFactory.newMessageBuilder(\n            MessageHeaders.newBuilder(MessageDirection.TO, THING_ID, SUBJECT)\n                    .contentType(CONTENT_TYPE)\n                    .build())\n            .rawPayload(ByteBuffer.wrap(KNOWN_RAW_PAYLOAD_BYTES))\n            .build();", "modifier": "static final", "type": "Message<?>", "declarator": "MESSAGE = MessagesModelFactory.newMessageBuilder(\n            MessageHeaders.newBuilder(MessageDirection.TO, THING_ID, SUBJECT)\n                    .contentType(CONTENT_TYPE)\n                    .build())\n            .rawPayload(ByteBuffer.wrap(KNOWN_RAW_PAYLOAD_BYTES))\n            .build()", "var_name": "MESSAGE"}], "file": "signals/commands/messages/src/test/java/org/eclipse/ditto/signals/commands/messages/acks/MessageCommandAckRequestSetterTest.java"}, "test_case": {"identifier": "addsLiveResponseAckLabelToAlreadyRequiredAckLabels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addsLiveResponseAckLabelToAlreadyRequiredAckLabels() {\n        final AcknowledgementRequest ackRequest1 = AcknowledgementRequest.of(AcknowledgementLabel.of(\"FOO\"));\n        final AcknowledgementRequest ackRequest2 = AcknowledgementRequest.of(AcknowledgementLabel.of(\"BAR\"));\n        final DittoHeaders dittoHeaders = DittoHeaders.newBuilder()\n                .channel(\"live\")\n                .acknowledgementRequest(ackRequest1, ackRequest2)\n                .randomCorrelationId()\n                .responseRequired(true)\n                .build();\n        final MessageCommand<?, ?> command = SendThingMessage.of(THING_ID, MESSAGE, dittoHeaders);\n        final MessageCommandAckRequestSetter underTest = MessageCommandAckRequestSetter.getInstance();\n\n        final DittoHeaders expectedHeaders = dittoHeaders.toBuilder()\n                .acknowledgementRequest(ackRequest1, ackRequest2,\n                        AcknowledgementRequest.of(DittoAcknowledgementLabel.LIVE_RESPONSE))\n                .build();\n        final MessageCommand<?, ?> expectedCommand = command.setDittoHeaders(expectedHeaders);\n\n        final MessageCommand<?, ?> appliedCommand = underTest.apply(command);\n        assertThat(appliedCommand.getDittoHeaders()).isEqualTo(expectedHeaders);\n        assertThat(appliedCommand).isEqualTo(expectedCommand);\n    }", "signature": "void addsLiveResponseAckLabelToAlreadyRequiredAckLabels()", "full_signature": "@Test public void addsLiveResponseAckLabelToAlreadyRequiredAckLabels()", "class_method_signature": "MessageCommandAckRequestSetterTest.addsLiveResponseAckLabelToAlreadyRequiredAckLabels()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "build", "responseRequired", "randomCorrelationId", "acknowledgementRequest", "channel", "newBuilder", "of", "getInstance", "build", "acknowledgementRequest", "toBuilder", "of", "setDittoHeaders", "apply", "isEqualTo", "assertThat", "getDittoHeaders", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "MessageCommandAckRequestSetter", "superclass": "extends AbstractCommandAckRequestSetter<MessageCommand<?, ?>>", "interfaces": "", "fields": [{"original_string": "private static final MessageCommandAckRequestSetter INSTANCE = new MessageCommandAckRequestSetter();", "modifier": "private static final", "type": "MessageCommandAckRequestSetter", "declarator": "INSTANCE = new MessageCommandAckRequestSetter()", "var_name": "INSTANCE"}], "methods": [{"identifier": "MessageCommandAckRequestSetter", "parameters": "()", "modifiers": "private", "return": "", "signature": " MessageCommandAckRequestSetter()", "full_signature": "private  MessageCommandAckRequestSetter()", "class_method_signature": "MessageCommandAckRequestSetter.MessageCommandAckRequestSetter()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "MessageCommandAckRequestSetter", "signature": "MessageCommandAckRequestSetter getInstance()", "full_signature": "public static MessageCommandAckRequestSetter getInstance()", "class_method_signature": "MessageCommandAckRequestSetter.getInstance()", "testcase": false, "constructor": false}, {"identifier": "isApplicable", "parameters": "(final MessageCommand<?, ?> command)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplicable(final MessageCommand<?, ?> command)", "full_signature": "@Override public boolean isApplicable(final MessageCommand<?, ?> command)", "class_method_signature": "MessageCommandAckRequestSetter.isApplicable(final MessageCommand<?, ?> command)", "testcase": false, "constructor": false}, {"identifier": "getMatchedClass", "parameters": "()", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "Class<MessageCommand<?, ?>>", "signature": "Class<MessageCommand<?, ?>> getMatchedClass()", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public Class<MessageCommand<?, ?>> getMatchedClass()", "class_method_signature": "MessageCommandAckRequestSetter.getMatchedClass()", "testcase": false, "constructor": false}, {"identifier": "isBindResponseRequiredToAddingRemovingImplicitLabel", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isBindResponseRequiredToAddingRemovingImplicitLabel()", "full_signature": "@Override protected boolean isBindResponseRequiredToAddingRemovingImplicitLabel()", "class_method_signature": "MessageCommandAckRequestSetter.isBindResponseRequiredToAddingRemovingImplicitLabel()", "testcase": false, "constructor": false}], "file": "signals/commands/messages/src/main/java/org/eclipse/ditto/signals/commands/messages/acks/MessageCommandAckRequestSetter.java"}, "focal_method": {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "MessageCommandAckRequestSetter", "body": "public static MessageCommandAckRequestSetter getInstance() {\n        return INSTANCE;\n    }", "signature": "MessageCommandAckRequestSetter getInstance()", "full_signature": "public static MessageCommandAckRequestSetter getInstance()", "class_method_signature": "MessageCommandAckRequestSetter.getInstance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}