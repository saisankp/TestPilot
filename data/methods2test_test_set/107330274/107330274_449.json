{"test_class": {"identifier": "AggregatingHealthServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TestClock clock = Clocks.test();", "modifier": "private final", "type": "TestClock", "declarator": "clock = Clocks.test()", "var_name": "clock"}, {"original_string": "@Rule\n    public final GrpcServerRule cellOne = new GrpcServerRule().directExecutor();", "modifier": "@Rule\n    public final", "type": "GrpcServerRule", "declarator": "cellOne = new GrpcServerRule().directExecutor()", "var_name": "cellOne"}, {"original_string": "@Rule\n    public final GrpcServerRule cellTwo = new GrpcServerRule().directExecutor();", "modifier": "@Rule\n    public final", "type": "GrpcServerRule", "declarator": "cellTwo = new GrpcServerRule().directExecutor()", "var_name": "cellTwo"}, {"original_string": "AggregatingHealthService service;", "modifier": "", "type": "AggregatingHealthService", "declarator": "service", "var_name": "service"}, {"original_string": "private final CellConnector connector = mock(CellConnector.class);", "modifier": "private final", "type": "CellConnector", "declarator": "connector = mock(CellConnector.class)", "var_name": "connector"}], "file": "titus-server-federation/src/test/java/com/netflix/titus/federation/service/AggregatingHealthServiceTest.java"}, "test_case": {"identifier": "oneCellFailing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void oneCellFailing() {\n        cellOne.getServiceRegistry().addService(new CellWithHealthStatus(ok(\"one\")));\n        cellTwo.getServiceRegistry().addService(new CellWithHealthStatus(failing(\"two\")));\n\n        AssertableSubscriber<HealthCheckResponse> subscriber = service.check(HealthCheckRequest.newBuilder().build()).test();\n        subscriber.awaitTerminalEvent(10, TimeUnit.SECONDS);\n        subscriber.assertNoErrors();\n        subscriber.assertValueCount(1);\n        HealthCheckResponse response = subscriber.getOnNextEvents().get(0);\n        assertThat(response.getStatus()).isEqualTo(NOT_SERVING);\n        assertThat(response.getDetailsCount()).isEqualTo(2);\n        assertThat(response.getDetails(0).hasDetails()).isTrue();\n        assertThat(response.getDetails(1).hasDetails()).isTrue();\n        Set<String> cellsSeen = response.getDetailsList().stream()\n                .map(s -> s.getDetails().getCell())\n                .collect(Collectors.toSet());\n        assertThat(cellsSeen).contains(\"one\", \"two\");\n    }", "signature": "void oneCellFailing()", "full_signature": "@Test public void oneCellFailing()", "class_method_signature": "AggregatingHealthServiceTest.oneCellFailing()", "testcase": true, "constructor": false, "invocations": ["addService", "getServiceRegistry", "ok", "addService", "getServiceRegistry", "failing", "test", "check", "build", "newBuilder", "awaitTerminalEvent", "assertNoErrors", "assertValueCount", "get", "getOnNextEvents", "isEqualTo", "assertThat", "getStatus", "isEqualTo", "assertThat", "getDetailsCount", "isTrue", "assertThat", "hasDetails", "getDetails", "isTrue", "assertThat", "hasDetails", "getDetails", "collect", "map", "stream", "getDetailsList", "getCell", "getDetails", "toSet", "contains", "assertThat"]}, "focal_class": {"identifier": "AggregatingHealthService", "superclass": "", "interfaces": "implements HealthService", "fields": [{"original_string": "private final AggregatingCellClient client;", "modifier": "private final", "type": "AggregatingCellClient", "declarator": "client", "var_name": "client"}, {"original_string": "private final CallMetadataResolver callMetadataResolver;", "modifier": "private final", "type": "CallMetadataResolver", "declarator": "callMetadataResolver", "var_name": "callMetadataResolver"}, {"original_string": "private final GrpcConfiguration grpcConfiguration;", "modifier": "private final", "type": "GrpcConfiguration", "declarator": "grpcConfiguration", "var_name": "grpcConfiguration"}], "methods": [{"identifier": "AggregatingHealthService", "parameters": "(AggregatingCellClient client, CallMetadataResolver callMetadataResolver, GrpcConfiguration grpcConfiguration)", "modifiers": "@Inject public", "return": "", "signature": " AggregatingHealthService(AggregatingCellClient client, CallMetadataResolver callMetadataResolver, GrpcConfiguration grpcConfiguration)", "full_signature": "@Inject public  AggregatingHealthService(AggregatingCellClient client, CallMetadataResolver callMetadataResolver, GrpcConfiguration grpcConfiguration)", "class_method_signature": "AggregatingHealthService.AggregatingHealthService(AggregatingCellClient client, CallMetadataResolver callMetadataResolver, GrpcConfiguration grpcConfiguration)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "()", "modifiers": "private", "return": "ClientCall<HealthCheckResponse>", "signature": "ClientCall<HealthCheckResponse> check()", "full_signature": "private ClientCall<HealthCheckResponse> check()", "class_method_signature": "AggregatingHealthService.check()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(HealthCheckRequest request)", "modifiers": "@Override public", "return": "Observable<HealthCheckResponse>", "signature": "Observable<HealthCheckResponse> check(HealthCheckRequest request)", "full_signature": "@Override public Observable<HealthCheckResponse> check(HealthCheckRequest request)", "class_method_signature": "AggregatingHealthService.check(HealthCheckRequest request)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(ServingStatus oneStatus, ServingStatus otherStatus)", "modifiers": "private static", "return": "ServingStatus", "signature": "ServingStatus merge(ServingStatus oneStatus, ServingStatus otherStatus)", "full_signature": "private static ServingStatus merge(ServingStatus oneStatus, ServingStatus otherStatus)", "class_method_signature": "AggregatingHealthService.merge(ServingStatus oneStatus, ServingStatus otherStatus)", "testcase": false, "constructor": false}, {"identifier": "newErrorResponse", "parameters": "(String cellName, Throwable e)", "modifiers": "private static", "return": "HealthCheckResponse", "signature": "HealthCheckResponse newErrorResponse(String cellName, Throwable e)", "full_signature": "private static HealthCheckResponse newErrorResponse(String cellName, Throwable e)", "class_method_signature": "AggregatingHealthService.newErrorResponse(String cellName, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "statusCodeFromThrowable", "parameters": "(Throwable e)", "modifiers": "private static", "return": "String", "signature": "String statusCodeFromThrowable(Throwable e)", "full_signature": "private static String statusCodeFromThrowable(Throwable e)", "class_method_signature": "AggregatingHealthService.statusCodeFromThrowable(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(STUB stub)", "modifiers": "private", "return": "STUB", "signature": "STUB wrap(STUB stub)", "full_signature": "private STUB wrap(STUB stub)", "class_method_signature": "AggregatingHealthService.wrap(STUB stub)", "testcase": false, "constructor": false}], "file": "titus-server-federation/src/main/java/com/netflix/titus/federation/service/AggregatingHealthService.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "private", "return": "ClientCall<HealthCheckResponse>", "body": "private ClientCall<HealthCheckResponse> check() {\n        return (client, responseObserver) -> wrap(client).check(HealthCheckRequest.newBuilder().build(), responseObserver);\n    }", "signature": "ClientCall<HealthCheckResponse> check()", "full_signature": "private ClientCall<HealthCheckResponse> check()", "class_method_signature": "AggregatingHealthService.check()", "testcase": false, "constructor": false, "invocations": ["check", "wrap", "build", "newBuilder"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}