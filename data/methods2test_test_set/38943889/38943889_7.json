{"test_class": {"identifier": "CheckDigitLuhnMod10VerifierTest", "superclass": "", "interfaces": "", "fields": [], "file": "tlc-commons-project/tlc-commons-base/src/test/java/com/thelastcheck/commons/base/utils/CheckDigitLuhnMod10VerifierTest.java"}, "test_case": {"identifier": "testIsValid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsValid() {\n        CheckDigitVerifier verifier = CheckDigitVerifiers.getVerifier(LuhnMod10);\n        assertTrue(verifier.isValid(\"79927398713\"));\n        assertTrue(verifier.isValid(\"49927398716\"));\n        assertFalse(verifier.isValid(\"49927398717\"));\n        assertTrue(verifier.isValid(\"1234567812345670\"));\n        assertFalse(verifier.isValid(\"1234567812345678\"));\n        assertFalse(verifier.isValid(\"294217778\"));\n    }", "signature": "void testIsValid()", "full_signature": "@Test public void testIsValid()", "class_method_signature": "CheckDigitLuhnMod10VerifierTest.testIsValid()", "testcase": true, "constructor": false, "invocations": ["getVerifier", "assertTrue", "isValid", "assertTrue", "isValid", "assertFalse", "isValid", "assertTrue", "isValid", "assertFalse", "isValid", "assertFalse", "isValid"]}, "focal_class": {"identifier": "CheckDigitLuhnMod10Verifier", "superclass": "", "interfaces": "implements CheckDigitVerifier", "fields": [{"original_string": "private static CheckDigitVerifier instance = new CheckDigitLuhnMod10Verifier();", "modifier": "private static", "type": "CheckDigitVerifier", "declarator": "instance = new CheckDigitLuhnMod10Verifier()", "var_name": "instance"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "CheckDigitVerifier", "signature": "CheckDigitVerifier getInstance()", "full_signature": "public static CheckDigitVerifier getInstance()", "class_method_signature": "CheckDigitLuhnMod10Verifier.getInstance()", "testcase": false, "constructor": false}, {"identifier": "CheckDigitLuhnMod10Verifier", "parameters": "()", "modifiers": "private", "return": "", "signature": " CheckDigitLuhnMod10Verifier()", "full_signature": "private  CheckDigitLuhnMod10Verifier()", "class_method_signature": "CheckDigitLuhnMod10Verifier.CheckDigitLuhnMod10Verifier()", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean isValid(String id)", "full_signature": "public boolean isValid(String id)", "class_method_signature": "CheckDigitLuhnMod10Verifier.isValid(String id)", "testcase": false, "constructor": false}], "file": "tlc-commons-project/tlc-commons-base/src/main/java/com/thelastcheck/commons/base/utils/CheckDigitLuhnMod10Verifier.java"}, "focal_method": {"identifier": "isValid", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "body": "public boolean isValid(String id) {\n\n        int currentDigit;\n        int idSum = 0;\n        int position = 0; //the current position number (to calc odd/even proc)\n\n        for (int i = id.length() - 1; i >= 0; i--) {\n            //get the current rightmost digit from the string\n            String idCurrentRightmostDigit = id.substring(i, i + 1);\n\n            //parse to int the current rightmost digit, if fail return false (not-valid id)\n            try {\n                currentDigit = Integer.parseInt(idCurrentRightmostDigit);\n            } catch (NumberFormatException e) {\n                return false;\n            }\n\n            // double value of every 2nd rightmost digit\n            // if value 2 digits (for example: 18 ),\n            // then sum the digits (made easy by subtracting 9, for example, 18 -> 1+8 = 9, same as 18-9 = 9)\n            if (position % 2 != 0) {\n                currentDigit *= 2;\n                if (currentDigit > 9)\n                    currentDigit -= 9;\n            }\n            position++; //increase the proc number\n\n            //summarize the processed digits\n            idSum += currentDigit;\n        }\n\n        //if digits sum is exactly divisible by 10, return true (valid), else false (not-valid)\n        return (idSum % 10 == 0);\n    }", "signature": "boolean isValid(String id)", "full_signature": "public boolean isValid(String id)", "class_method_signature": "CheckDigitLuhnMod10Verifier.isValid(String id)", "testcase": false, "constructor": false, "invocations": ["length", "substring", "parseInt"]}, "repository": {"repo_id": 38943889, "url": "https://github.com/TheLastCheck/tlc.open.java", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 1247, "license": "licensed"}}