{"test_class": {"identifier": "CommonHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int H2_STATEMENT_WAS_CANCELED = 57014;", "modifier": "private static final", "type": "int", "declarator": "H2_STATEMENT_WAS_CANCELED = 57014", "var_name": "H2_STATEMENT_WAS_CANCELED"}, {"original_string": "private static final CommonHandler HTTP_SERVER_HANDLER =\n            new CommonHandler(false, mock(LayoutService.class), new HashMap<Pattern, HttpService>(),\n                    mock(HttpSessionManager.class), new ArrayList<Object>(), mock(Clock.class));", "modifier": "private static final", "type": "CommonHandler", "declarator": "HTTP_SERVER_HANDLER =\n            new CommonHandler(false, mock(LayoutService.class), new HashMap<Pattern, HttpService>(),\n                    mock(HttpSessionManager.class), new ArrayList<Object>(), mock(Clock.class))", "var_name": "HTTP_SERVER_HANDLER"}], "file": "ui/src/test/java/org/glowroot/ui/CommonHandlerTest.java"}, "test_case": {"identifier": "shouldCreateSqlTimeoutResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateSqlTimeoutResponse() throws Exception {\n        // given\n        Exception e = new SQLException(\"\", \"\", H2_STATEMENT_WAS_CANCELED);\n        // when\n        CommonResponse httpResponse = HTTP_SERVER_HANDLER.newHttpResponseFromException(\n                mock(CommonRequest.class), mock(Authentication.class), e);\n        // then\n        String content = (String) httpResponse.getContent();\n        assertThat(content).isEqualTo(\"{\\\"message\\\":\"\n                + \"\\\"Query timed out (timeout is configurable under Configuration > Advanced)\\\"}\");\n        assertThat(httpResponse.getStatus()).isEqualTo(HttpResponseStatus.REQUEST_TIMEOUT);\n    }", "signature": "void shouldCreateSqlTimeoutResponse()", "full_signature": "@Test public void shouldCreateSqlTimeoutResponse()", "class_method_signature": "CommonHandlerTest.shouldCreateSqlTimeoutResponse()", "testcase": true, "constructor": false, "invocations": ["newHttpResponseFromException", "mock", "mock", "getContent", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "getStatus"]}, "focal_class": {"identifier": "CommonHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CommonHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CommonHandler.class)", "var_name": "logger"}, {"original_string": "private static final Logger auditLogger = LoggerFactory.getLogger(\"audit\");", "modifier": "private static final", "type": "Logger", "declarator": "auditLogger = LoggerFactory.getLogger(\"audit\")", "var_name": "auditLogger"}, {"original_string": "private static final ObjectMapper mapper = ObjectMappers.create();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = ObjectMappers.create()", "var_name": "mapper"}, {"original_string": "private static final long TEN_YEARS = DAYS.toMillis(3650);", "modifier": "private static final", "type": "long", "declarator": "TEN_YEARS = DAYS.toMillis(3650)", "var_name": "TEN_YEARS"}, {"original_string": "private static final long ONE_DAY = DAYS.toMillis(1);", "modifier": "private static final", "type": "long", "declarator": "ONE_DAY = DAYS.toMillis(1)", "var_name": "ONE_DAY"}, {"original_string": "private static final long FIVE_MINUTES = MINUTES.toMillis(5);", "modifier": "private static final", "type": "long", "declarator": "FIVE_MINUTES = MINUTES.toMillis(5)", "var_name": "FIVE_MINUTES"}, {"original_string": "private static final String RESOURCE_BASE = \"org/glowroot/ui/app-dist\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_BASE = \"org/glowroot/ui/app-dist\"", "var_name": "RESOURCE_BASE"}, {"original_string": "private static final @Nullable String RESOURCE_BASE_URL_PREFIX;", "modifier": "private static final @Nullable", "type": "String", "declarator": "RESOURCE_BASE_URL_PREFIX", "var_name": "RESOURCE_BASE_URL_PREFIX"}, {"original_string": "private static final ImmutableMap<String, MediaType> mediaTypes =\n            ImmutableMap.<String, MediaType>builder()\n                    .put(\"html\", MediaType.HTML_UTF_8)\n                    .put(\"js\", MediaType.TEXT_JAVASCRIPT_UTF_8)\n                    .put(\"css\", MediaType.CSS_UTF_8)\n                    .put(\"ico\", MediaType.create(\"image\", \"x-icon\"))\n                    .put(\"woff\", MediaType.WOFF)\n                    .put(\"woff2\", MediaType.create(\"application\", \"font-woff2\"))\n                    .put(\"swf\", MediaType.create(\"application\", \"vnd.adobe.flash-movie\"))\n                    .put(\"map\", MediaType.JSON_UTF_8)\n                    .build();", "modifier": "private static final", "type": "ImmutableMap<String, MediaType>", "declarator": "mediaTypes =\n            ImmutableMap.<String, MediaType>builder()\n                    .put(\"html\", MediaType.HTML_UTF_8)\n                    .put(\"js\", MediaType.TEXT_JAVASCRIPT_UTF_8)\n                    .put(\"css\", MediaType.CSS_UTF_8)\n                    .put(\"ico\", MediaType.create(\"image\", \"x-icon\"))\n                    .put(\"woff\", MediaType.WOFF)\n                    .put(\"woff2\", MediaType.create(\"application\", \"font-woff2\"))\n                    .put(\"swf\", MediaType.create(\"application\", \"vnd.adobe.flash-movie\"))\n                    .put(\"map\", MediaType.JSON_UTF_8)\n                    .build()", "var_name": "mediaTypes"}, {"original_string": "private static final int H2_STATEMENT_WAS_CANCELED = 57014;", "modifier": "private static final", "type": "int", "declarator": "H2_STATEMENT_WAS_CANCELED = 57014", "var_name": "H2_STATEMENT_WAS_CANCELED"}, {"original_string": "private final boolean central;", "modifier": "private final", "type": "boolean", "declarator": "central", "var_name": "central"}, {"original_string": "private final LayoutService layoutService;", "modifier": "private final", "type": "LayoutService", "declarator": "layoutService", "var_name": "layoutService"}, {"original_string": "private final ImmutableMap<Pattern, HttpService> httpServices;", "modifier": "private final", "type": "ImmutableMap<Pattern, HttpService>", "declarator": "httpServices", "var_name": "httpServices"}, {"original_string": "private final ImmutableList<JsonServiceMapping> jsonServiceMappings;", "modifier": "private final", "type": "ImmutableList<JsonServiceMapping>", "declarator": "jsonServiceMappings", "var_name": "jsonServiceMappings"}, {"original_string": "private final HttpSessionManager httpSessionManager;", "modifier": "private final", "type": "HttpSessionManager", "declarator": "httpSessionManager", "var_name": "httpSessionManager"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "CommonHandler", "parameters": "(boolean central, LayoutService layoutService,\n            Map<Pattern, HttpService> httpServices, HttpSessionManager httpSessionManager,\n            List<Object> jsonServices, Clock clock)", "modifiers": "", "return": "", "signature": " CommonHandler(boolean central, LayoutService layoutService,\n            Map<Pattern, HttpService> httpServices, HttpSessionManager httpSessionManager,\n            List<Object> jsonServices, Clock clock)", "full_signature": "  CommonHandler(boolean central, LayoutService layoutService,\n            Map<Pattern, HttpService> httpServices, HttpSessionManager httpSessionManager,\n            List<Object> jsonServices, Clock clock)", "class_method_signature": "CommonHandler.CommonHandler(boolean central, LayoutService layoutService,\n            Map<Pattern, HttpService> httpServices, HttpSessionManager httpSessionManager,\n            List<Object> jsonServices, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(CommonRequest request)", "modifiers": "public", "return": "CommonResponse", "signature": "CommonResponse handle(CommonRequest request)", "full_signature": "public CommonResponse handle(CommonRequest request)", "class_method_signature": "CommonHandler.handle(CommonRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleIfLoginOrLogoutRequest", "parameters": "(CommonRequest request)", "modifiers": "private @Nullable", "return": "CommonResponse", "signature": "CommonResponse handleIfLoginOrLogoutRequest(CommonRequest request)", "full_signature": "private @Nullable CommonResponse handleIfLoginOrLogoutRequest(CommonRequest request)", "class_method_signature": "CommonHandler.handleIfLoginOrLogoutRequest(CommonRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleRequest", "parameters": "(CommonRequest request, Authentication authentication)", "modifiers": "private", "return": "CommonResponse", "signature": "CommonResponse handleRequest(CommonRequest request, Authentication authentication)", "full_signature": "private CommonResponse handleRequest(CommonRequest request, Authentication authentication)", "class_method_signature": "CommonHandler.handleRequest(CommonRequest request, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "getHttpService", "parameters": "(String path)", "modifiers": "private @Nullable", "return": "HttpService", "signature": "HttpService getHttpService(String path)", "full_signature": "private @Nullable HttpService getHttpService(String path)", "class_method_signature": "CommonHandler.getHttpService(String path)", "testcase": false, "constructor": false}, {"identifier": "handleHttpService", "parameters": "(CommonRequest request, HttpService httpService,\n            Authentication authentication)", "modifiers": "private", "return": "CommonResponse", "signature": "CommonResponse handleHttpService(CommonRequest request, HttpService httpService,\n            Authentication authentication)", "full_signature": "private CommonResponse handleHttpService(CommonRequest request, HttpService httpService,\n            Authentication authentication)", "class_method_signature": "CommonHandler.handleHttpService(CommonRequest request, HttpService httpService,\n            Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "getJsonServiceMapping", "parameters": "(CommonRequest request,\n            String path)", "modifiers": "private @Nullable", "return": "JsonServiceMapping", "signature": "JsonServiceMapping getJsonServiceMapping(CommonRequest request,\n            String path)", "full_signature": "private @Nullable JsonServiceMapping getJsonServiceMapping(CommonRequest request,\n            String path)", "class_method_signature": "CommonHandler.getJsonServiceMapping(CommonRequest request,\n            String path)", "testcase": false, "constructor": false}, {"identifier": "handleJsonServiceMappings", "parameters": "(CommonRequest request,\n            JsonServiceMapping jsonServiceMapping, Authentication authentication)", "modifiers": "private", "return": "CommonResponse", "signature": "CommonResponse handleJsonServiceMappings(CommonRequest request,\n            JsonServiceMapping jsonServiceMapping, Authentication authentication)", "full_signature": "private CommonResponse handleJsonServiceMappings(CommonRequest request,\n            JsonServiceMapping jsonServiceMapping, Authentication authentication)", "class_method_signature": "CommonHandler.handleJsonServiceMappings(CommonRequest request,\n            JsonServiceMapping jsonServiceMapping, Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "newHttpResponseFromException", "parameters": "(CommonRequest request,\n            Authentication authentication, Exception exception)", "modifiers": "", "return": "CommonResponse", "signature": "CommonResponse newHttpResponseFromException(CommonRequest request,\n            Authentication authentication, Exception exception)", "full_signature": " CommonResponse newHttpResponseFromException(CommonRequest request,\n            Authentication authentication, Exception exception)", "class_method_signature": "CommonHandler.newHttpResponseFromException(CommonRequest request,\n            Authentication authentication, Exception exception)", "testcase": false, "constructor": false}, {"identifier": "handleNotAuthorized", "parameters": "(CommonRequest request,\n            Authentication authentication)", "modifiers": "private", "return": "CommonResponse", "signature": "CommonResponse handleNotAuthorized(CommonRequest request,\n            Authentication authentication)", "full_signature": "private CommonResponse handleNotAuthorized(CommonRequest request,\n            Authentication authentication)", "class_method_signature": "CommonHandler.handleNotAuthorized(CommonRequest request,\n            Authentication authentication)", "testcase": false, "constructor": false}, {"identifier": "handleStaticResource", "parameters": "(String path, CommonRequest request)", "modifiers": "private", "return": "CommonResponse", "signature": "CommonResponse handleStaticResource(String path, CommonRequest request)", "full_signature": "private CommonResponse handleStaticResource(String path, CommonRequest request)", "class_method_signature": "CommonHandler.handleStaticResource(String path, CommonRequest request)", "testcase": false, "constructor": false}, {"identifier": "getExpiresForPath", "parameters": "(String path)", "modifiers": "private @Nullable", "return": "Date", "signature": "Date getExpiresForPath(String path)", "full_signature": "private @Nullable Date getExpiresForPath(String path)", "class_method_signature": "CommonHandler.getExpiresForPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getAgentRollupIdFromRequest", "parameters": "(CommonRequest request)", "modifiers": "private static @Nullable", "return": "String", "signature": "String getAgentRollupIdFromRequest(CommonRequest request)", "full_signature": "private static @Nullable String getAgentRollupIdFromRequest(CommonRequest request)", "class_method_signature": "CommonHandler.getAgentRollupIdFromRequest(CommonRequest request)", "testcase": false, "constructor": false}, {"identifier": "buildJsonResponse", "parameters": "(@Nullable Object responseObject)", "modifiers": "private static", "return": "CommonResponse", "signature": "CommonResponse buildJsonResponse(@Nullable Object responseObject)", "full_signature": "private static CommonResponse buildJsonResponse(@Nullable Object responseObject)", "class_method_signature": "CommonHandler.buildJsonResponse(@Nullable Object responseObject)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(HttpMethod httpMethod, String path,\n            String permission, Object jsonService, Method method)", "modifiers": "private static", "return": "JsonServiceMapping", "signature": "JsonServiceMapping build(HttpMethod httpMethod, String path,\n            String permission, Object jsonService, Method method)", "full_signature": "private static JsonServiceMapping build(HttpMethod httpMethod, String path,\n            String permission, Object jsonService, Method method)", "class_method_signature": "CommonHandler.build(HttpMethod httpMethod, String path,\n            String permission, Object jsonService, Method method)", "testcase": false, "constructor": false}, {"identifier": "getSecureUrlForPath", "parameters": "(String path)", "modifiers": "private static @Nullable", "return": "URL", "signature": "URL getSecureUrlForPath(String path)", "full_signature": "private static @Nullable URL getSecureUrlForPath(String path)", "class_method_signature": "CommonHandler.getSecureUrlForPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getUrlForPath", "parameters": "(String path)", "modifiers": "private static @Nullable", "return": "URL", "signature": "URL getUrlForPath(String path)", "full_signature": "private static @Nullable URL getUrlForPath(String path)", "class_method_signature": "CommonHandler.getUrlForPath(String path)", "testcase": false, "constructor": false}, {"identifier": "newHttpResponseWithMessage", "parameters": "(HttpResponseStatus status,\n            @Nullable String message)", "modifiers": "private static", "return": "CommonResponse", "signature": "CommonResponse newHttpResponseWithMessage(HttpResponseStatus status,\n            @Nullable String message)", "full_signature": "private static CommonResponse newHttpResponseWithMessage(HttpResponseStatus status,\n            @Nullable String message)", "class_method_signature": "CommonHandler.newHttpResponseWithMessage(HttpResponseStatus status,\n            @Nullable String message)", "testcase": false, "constructor": false}, {"identifier": "newHttpResponseWithStackTrace", "parameters": "(Exception e,\n            HttpResponseStatus status, @Nullable String simplifiedMessage)", "modifiers": "static", "return": "CommonResponse", "signature": "CommonResponse newHttpResponseWithStackTrace(Exception e,\n            HttpResponseStatus status, @Nullable String simplifiedMessage)", "full_signature": "static CommonResponse newHttpResponseWithStackTrace(Exception e,\n            HttpResponseStatus status, @Nullable String simplifiedMessage)", "class_method_signature": "CommonHandler.newHttpResponseWithStackTrace(Exception e,\n            HttpResponseStatus status, @Nullable String simplifiedMessage)", "testcase": false, "constructor": false}, {"identifier": "getHttpResponseWithStackTrace", "parameters": "(Exception e,\n            @Nullable String simplifiedMessage)", "modifiers": "private static", "return": "String", "signature": "String getHttpResponseWithStackTrace(Exception e,\n            @Nullable String simplifiedMessage)", "full_signature": "private static String getHttpResponseWithStackTrace(Exception e,\n            @Nullable String simplifiedMessage)", "class_method_signature": "CommonHandler.getHttpResponseWithStackTrace(Exception e,\n            @Nullable String simplifiedMessage)", "testcase": false, "constructor": false}, {"identifier": "callMethod", "parameters": "(JsonServiceMapping jsonServiceMapping,\n            List<Class<?>> parameterTypes, List<Object> parameters,\n            Map<String, List<String>> queryParameters, Authentication authentication,\n            CommonRequest request)", "modifiers": "private static @Nullable", "return": "Object", "signature": "Object callMethod(JsonServiceMapping jsonServiceMapping,\n            List<Class<?>> parameterTypes, List<Object> parameters,\n            Map<String, List<String>> queryParameters, Authentication authentication,\n            CommonRequest request)", "full_signature": "private static @Nullable Object callMethod(JsonServiceMapping jsonServiceMapping,\n            List<Class<?>> parameterTypes, List<Object> parameters,\n            Map<String, List<String>> queryParameters, Authentication authentication,\n            CommonRequest request)", "class_method_signature": "CommonHandler.callMethod(JsonServiceMapping jsonServiceMapping,\n            List<Class<?>> parameterTypes, List<Object> parameters,\n            Map<String, List<String>> queryParameters, Authentication authentication,\n            CommonRequest request)", "testcase": false, "constructor": false}, {"identifier": "isAutoRefresh", "parameters": "(@Nullable List<String> autoRefreshParams)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAutoRefresh(@Nullable List<String> autoRefreshParams)", "full_signature": "private static boolean isAutoRefresh(@Nullable List<String> autoRefreshParams)", "class_method_signature": "CommonHandler.isAutoRefresh(@Nullable List<String> autoRefreshParams)", "testcase": false, "constructor": false}], "file": "ui/src/main/java/org/glowroot/ui/CommonHandler.java"}, "focal_method": {"identifier": "newHttpResponseFromException", "parameters": "(CommonRequest request,\n            Authentication authentication, Exception exception)", "modifiers": "", "return": "CommonResponse", "body": "CommonResponse newHttpResponseFromException(CommonRequest request,\n            Authentication authentication, Exception exception) throws Exception {\n        Exception e = exception;\n        if (e instanceof InvocationTargetException) {\n            Throwable cause = e.getCause();\n            if (cause instanceof Exception) {\n                e = (Exception) cause;\n            }\n        }\n        if (e instanceof JsonServiceException) {\n            // this is an \"expected\" exception, no need to log\n            JsonServiceException jsonServiceException = (JsonServiceException) e;\n            if (jsonServiceException.getStatus() == FORBIDDEN) {\n                return handleNotAuthorized(request, authentication);\n            } else {\n                return newHttpResponseWithMessage(jsonServiceException.getStatus(),\n                        jsonServiceException.getMessage());\n            }\n        }\n        logger.error(e.getMessage(), e);\n        if (e instanceof SQLException\n                && ((SQLException) e).getErrorCode() == H2_STATEMENT_WAS_CANCELED) {\n            return newHttpResponseWithMessage(REQUEST_TIMEOUT,\n                    \"Query timed out (timeout is configurable under Configuration > Advanced)\");\n        }\n        return newHttpResponseWithStackTrace(e, INTERNAL_SERVER_ERROR, null);\n    }", "signature": "CommonResponse newHttpResponseFromException(CommonRequest request,\n            Authentication authentication, Exception exception)", "full_signature": " CommonResponse newHttpResponseFromException(CommonRequest request,\n            Authentication authentication, Exception exception)", "class_method_signature": "CommonHandler.newHttpResponseFromException(CommonRequest request,\n            Authentication authentication, Exception exception)", "testcase": false, "constructor": false, "invocations": ["getCause", "getStatus", "handleNotAuthorized", "newHttpResponseWithMessage", "getStatus", "getMessage", "error", "getMessage", "getErrorCode", "newHttpResponseWithMessage", "newHttpResponseWithStackTrace"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}