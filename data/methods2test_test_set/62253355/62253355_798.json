{"test_class": {"identifier": "SimpleProvenanceServiceTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private SimpleProvenanceService service;", "modifier": "private", "type": "SimpleProvenanceService", "declarator": "service", "var_name": "service"}, {"original_string": "private OrmFactory<User> userFactory = getRequiredOrmFactory(User.class);", "modifier": "private", "type": "OrmFactory<User>", "declarator": "userFactory = getRequiredOrmFactory(User.class)", "var_name": "userFactory"}, {"original_string": "private OrmFactory<Activity> activityFactory = getRequiredOrmFactory(Activity.class);", "modifier": "private", "type": "OrmFactory<Activity>", "declarator": "activityFactory = getRequiredOrmFactory(Activity.class)", "var_name": "activityFactory"}, {"original_string": "private OrmFactory<Entity> entityFactory = getRequiredOrmFactory(Entity.class);", "modifier": "private", "type": "OrmFactory<Entity>", "declarator": "entityFactory = getRequiredOrmFactory(Entity.class)", "var_name": "entityFactory"}, {"original_string": "private IRI activityIRI;", "modifier": "private", "type": "IRI", "declarator": "activityIRI", "var_name": "activityIRI"}, {"original_string": "@Mock\n    private OrmFactoryRegistry registry;", "modifier": "@Mock\n    private", "type": "OrmFactoryRegistry", "declarator": "registry", "var_name": "registry"}], "file": "com.mobi.prov.impl/src/test/java/com/mobi/prov/impl/SimpleProvenanceServiceTest.java"}, "test_case": {"identifier": "deleteActivityTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deleteActivityTest() throws Exception {\n        // Setup:\n        Activity toRemove = activityFactory.createNew(activityIRI);\n        Activity other = activityFactory.createNew(VALUE_FACTORY.createIRI(\"http://test.com/other\"));\n        Entity generated1 = entityFactory.createNew(VALUE_FACTORY.createIRI(\"http://test.com/generated/1\"));\n        Entity invalidated1 = entityFactory.createNew(VALUE_FACTORY.createIRI(\"http://test.com/invalidated/1\"));\n        Entity used1 = entityFactory.createNew(VALUE_FACTORY.createIRI(\"http://test.com/used/1\"));\n        Entity generated2 = entityFactory.createNew(VALUE_FACTORY.createIRI(\"http://test.com/generated/2\"));\n        Entity invalidated2 = entityFactory.createNew(VALUE_FACTORY.createIRI(\"http://test.com/invalidated/2\"));\n        Entity used2 = entityFactory.createNew(VALUE_FACTORY.createIRI(\"http://test.com/used/2\"));\n        toRemove.setGenerated(Collections.singleton(generated1));\n        toRemove.setInvalidated(Collections.singleton(invalidated1));\n        toRemove.setUsed(Collections.singleton(used1));\n        toRemove.setGenerated(Collections.singleton(generated2));\n        toRemove.setInvalidated(Collections.singleton(invalidated2));\n        toRemove.setUsed(Collections.singleton(used2));\n        other.setGenerated(Collections.singleton(generated1));\n        other.setInvalidated(Collections.singleton(invalidated1));\n        other.setUsed(Collections.singleton(used1));\n        try (RepositoryConnection conn = repo.getConnection()) {\n            conn.add(toRemove.getModel());\n            conn.add(generated1.getModel());\n            conn.add(invalidated1.getModel());\n            conn.add(used1.getModel());\n            conn.add(generated2.getModel());\n            conn.add(invalidated2.getModel());\n            conn.add(used2.getModel());\n            conn.add(other.getModel());\n        }\n\n        service.deleteActivity(activityIRI);\n        try (RepositoryConnection conn = repo.getConnection()) {\n            toRemove.getModel().forEach(statement -> assertFalse(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n            generated1.getModel().forEach(statement -> assertTrue(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n            invalidated1.getModel().forEach(statement -> assertTrue(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n            used1.getModel().forEach(statement -> assertTrue(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n            generated2.getModel().forEach(statement -> assertFalse(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n            invalidated2.getModel().forEach(statement -> assertFalse(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n            used2.getModel().forEach(statement -> assertFalse(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n            other.getModel().forEach(statement -> assertTrue(conn.contains(statement.getSubject(), statement.getPredicate(), statement.getObject())));\n        }\n    }", "signature": "void deleteActivityTest()", "full_signature": "@Test public void deleteActivityTest()", "class_method_signature": "SimpleProvenanceServiceTest.deleteActivityTest()", "testcase": true, "constructor": false, "invocations": ["createNew", "createNew", "createIRI", "createNew", "createIRI", "createNew", "createIRI", "createNew", "createIRI", "createNew", "createIRI", "createNew", "createIRI", "createNew", "createIRI", "setGenerated", "singleton", "setInvalidated", "singleton", "setUsed", "singleton", "setGenerated", "singleton", "setInvalidated", "singleton", "setUsed", "singleton", "setGenerated", "singleton", "setInvalidated", "singleton", "setUsed", "singleton", "getConnection", "add", "getModel", "add", "getModel", "add", "getModel", "add", "getModel", "add", "getModel", "add", "getModel", "add", "getModel", "add", "getModel", "deleteActivity", "getConnection", "forEach", "getModel", "assertFalse", "contains", "getSubject", "getPredicate", "getObject", "forEach", "getModel", "assertTrue", "contains", "getSubject", "getPredicate", "getObject", "forEach", "getModel", "assertTrue", "contains", "getSubject", "getPredicate", "getObject", "forEach", "getModel", "assertTrue", "contains", "getSubject", "getPredicate", "getObject", "forEach", "getModel", "assertFalse", "contains", "getSubject", "getPredicate", "getObject", "forEach", "getModel", "assertFalse", "contains", "getSubject", "getPredicate", "getObject", "forEach", "getModel", "assertFalse", "contains", "getSubject", "getPredicate", "getObject", "forEach", "getModel", "assertTrue", "contains", "getSubject", "getPredicate", "getObject"]}, "focal_class": {"identifier": "SimpleProvenanceService", "superclass": "", "interfaces": "implements ProvenanceService", "fields": [{"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private OrmFactoryRegistry factoryRegistry;", "modifier": "private", "type": "OrmFactoryRegistry", "declarator": "factoryRegistry", "var_name": "factoryRegistry"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private ModelFactory mf;", "modifier": "private", "type": "ModelFactory", "declarator": "mf", "var_name": "mf"}, {"original_string": "private ActivityFactory activityFactory;", "modifier": "private", "type": "ActivityFactory", "declarator": "activityFactory", "var_name": "activityFactory"}, {"original_string": "private static String ACTIVITY_NAMESPACE = \"http://mobi.com/activities/\";", "modifier": "private static", "type": "String", "declarator": "ACTIVITY_NAMESPACE = \"http://mobi.com/activities/\"", "var_name": "ACTIVITY_NAMESPACE"}], "methods": [{"identifier": "setRepo", "parameters": "(Repository repo)", "modifiers": "@Reference(target = \"(id=prov)\")", "return": "void", "signature": "void setRepo(Repository repo)", "full_signature": "@Reference(target = \"(id=prov)\") void setRepo(Repository repo)", "class_method_signature": "SimpleProvenanceService.setRepo(Repository repo)", "testcase": false, "constructor": false}, {"identifier": "setFactoryRegistry", "parameters": "(OrmFactoryRegistry factoryRegistry)", "modifiers": "@Reference", "return": "void", "signature": "void setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "full_signature": "@Reference void setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "class_method_signature": "SimpleProvenanceService.setFactoryRegistry(OrmFactoryRegistry factoryRegistry)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "SimpleProvenanceService.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setMf", "parameters": "(ModelFactory mf)", "modifiers": "@Reference", "return": "void", "signature": "void setMf(ModelFactory mf)", "full_signature": "@Reference void setMf(ModelFactory mf)", "class_method_signature": "SimpleProvenanceService.setMf(ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "setActivityFactory", "parameters": "(ActivityFactory activityFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setActivityFactory(ActivityFactory activityFactory)", "full_signature": "@Reference void setActivityFactory(ActivityFactory activityFactory)", "class_method_signature": "SimpleProvenanceService.setActivityFactory(ActivityFactory activityFactory)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "RepositoryConnection", "signature": "RepositoryConnection getConnection()", "full_signature": "@Override public RepositoryConnection getConnection()", "class_method_signature": "SimpleProvenanceService.getConnection()", "testcase": false, "constructor": false}, {"identifier": "createActivity", "parameters": "(ActivityConfig config)", "modifiers": "@Override public", "return": "Activity", "signature": "Activity createActivity(ActivityConfig config)", "full_signature": "@Override public Activity createActivity(ActivityConfig config)", "class_method_signature": "SimpleProvenanceService.createActivity(ActivityConfig config)", "testcase": false, "constructor": false}, {"identifier": "addActivity", "parameters": "(Activity activity)", "modifiers": "@Override public", "return": "void", "signature": "void addActivity(Activity activity)", "full_signature": "@Override public void addActivity(Activity activity)", "class_method_signature": "SimpleProvenanceService.addActivity(Activity activity)", "testcase": false, "constructor": false}, {"identifier": "getActivity", "parameters": "(Resource activityIRI)", "modifiers": "@Override public", "return": "Optional<Activity>", "signature": "Optional<Activity> getActivity(Resource activityIRI)", "full_signature": "@Override public Optional<Activity> getActivity(Resource activityIRI)", "class_method_signature": "SimpleProvenanceService.getActivity(Resource activityIRI)", "testcase": false, "constructor": false}, {"identifier": "updateActivity", "parameters": "(Activity newActivity)", "modifiers": "@Override public", "return": "void", "signature": "void updateActivity(Activity newActivity)", "full_signature": "@Override public void updateActivity(Activity newActivity)", "class_method_signature": "SimpleProvenanceService.updateActivity(Activity newActivity)", "testcase": false, "constructor": false}, {"identifier": "deleteActivity", "parameters": "(Resource activityIRI)", "modifiers": "@Override public", "return": "void", "signature": "void deleteActivity(Resource activityIRI)", "full_signature": "@Override public void deleteActivity(Resource activityIRI)", "class_method_signature": "SimpleProvenanceService.deleteActivity(Resource activityIRI)", "testcase": false, "constructor": false}, {"identifier": "removeIfNotReferenced", "parameters": "(Resource iri, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void removeIfNotReferenced(Resource iri, RepositoryConnection conn)", "full_signature": "private void removeIfNotReferenced(Resource iri, RepositoryConnection conn)", "class_method_signature": "SimpleProvenanceService.removeIfNotReferenced(Resource iri, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getReferencedEntityIRIs", "parameters": "(Resource activityIRI, String propIRI, RepositoryConnection conn)", "modifiers": "private", "return": "List<Resource>", "signature": "List<Resource> getReferencedEntityIRIs(Resource activityIRI, String propIRI, RepositoryConnection conn)", "full_signature": "private List<Resource> getReferencedEntityIRIs(Resource activityIRI, String propIRI, RepositoryConnection conn)", "class_method_signature": "SimpleProvenanceService.getReferencedEntityIRIs(Resource activityIRI, String propIRI, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getActivityFactories", "parameters": "()", "modifiers": "private", "return": "Map<Class<? extends Activity>, OrmFactory<? extends Activity>>", "signature": "Map<Class<? extends Activity>, OrmFactory<? extends Activity>> getActivityFactories()", "full_signature": "private Map<Class<? extends Activity>, OrmFactory<? extends Activity>> getActivityFactories()", "class_method_signature": "SimpleProvenanceService.getActivityFactories()", "testcase": false, "constructor": false}, {"identifier": "addEntitiesToModel", "parameters": "(Set<Resource> entityIRIs, Model model, RepositoryConnection conn)", "modifiers": "private", "return": "void", "signature": "void addEntitiesToModel(Set<Resource> entityIRIs, Model model, RepositoryConnection conn)", "full_signature": "private void addEntitiesToModel(Set<Resource> entityIRIs, Model model, RepositoryConnection conn)", "class_method_signature": "SimpleProvenanceService.addEntitiesToModel(Set<Resource> entityIRIs, Model model, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "addEntitiesToModel", "parameters": "(Set<Entity> entities, Model model)", "modifiers": "private", "return": "void", "signature": "void addEntitiesToModel(Set<Entity> entities, Model model)", "full_signature": "private void addEntitiesToModel(Set<Entity> entities, Model model)", "class_method_signature": "SimpleProvenanceService.addEntitiesToModel(Set<Entity> entities, Model model)", "testcase": false, "constructor": false}], "file": "com.mobi.prov.impl/src/main/java/com/mobi/prov/impl/SimpleProvenanceService.java"}, "focal_method": {"identifier": "deleteActivity", "parameters": "(Resource activityIRI)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void deleteActivity(Resource activityIRI) {\n        try (RepositoryConnection conn = repo.getConnection()) {\n            if (!conn.contains(activityIRI, null, null)) {\n                throw new IllegalArgumentException(\"Activity \" + activityIRI + \" does not exist\");\n            }\n            conn.begin();\n            List<Resource> generated = getReferencedEntityIRIs(activityIRI, Activity.generated_IRI, conn);\n            List<Resource> invalided = getReferencedEntityIRIs(activityIRI, Activity.invalidated_IRI, conn);\n            List<Resource> used = getReferencedEntityIRIs(activityIRI, Activity.used_IRI, conn);\n            conn.remove(activityIRI, null, null);\n            conn.remove((Resource) null, null, activityIRI);\n            generated.forEach(resource -> removeIfNotReferenced(resource, conn));\n            invalided.forEach(resource -> removeIfNotReferenced(resource, conn));\n            used.forEach(resource -> removeIfNotReferenced(resource, conn));\n            conn.commit();\n        }\n    }", "signature": "void deleteActivity(Resource activityIRI)", "full_signature": "@Override public void deleteActivity(Resource activityIRI)", "class_method_signature": "SimpleProvenanceService.deleteActivity(Resource activityIRI)", "testcase": false, "constructor": false, "invocations": ["getConnection", "contains", "begin", "getReferencedEntityIRIs", "getReferencedEntityIRIs", "getReferencedEntityIRIs", "remove", "remove", "forEach", "removeIfNotReferenced", "forEach", "removeIfNotReferenced", "forEach", "removeIfNotReferenced", "commit"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}