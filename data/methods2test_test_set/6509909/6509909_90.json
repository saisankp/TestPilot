{"test_class": {"identifier": "HaikuReviewTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HaikuReview haikuReview;", "modifier": "private", "type": "HaikuReview", "declarator": "haikuReview", "var_name": "haikuReview"}], "file": "haikuReview/20161219-paul-niamh/src/test/java/HaikuReviewTest.java"}, "test_case": {"identifier": "testWordIsOneSyllable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWordIsOneSyllable() throws Exception {\n        String oneSyllable = \"ae\";\n        int number = haikuReview.getNumberOfSyllables(oneSyllable);\n\n        assertThat(number).isEqualTo(1);\n    }", "signature": "void testWordIsOneSyllable()", "full_signature": "@Test public void testWordIsOneSyllable()", "class_method_signature": "HaikuReviewTest.testWordIsOneSyllable()", "testcase": true, "constructor": false, "invocations": ["getNumberOfSyllables", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "HaikuReview", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "splitHaiku", "parameters": "(String haiku)", "modifiers": "public", "return": "String[]", "signature": "String[] splitHaiku(String haiku)", "full_signature": "public String[] splitHaiku(String haiku)", "class_method_signature": "HaikuReview.splitHaiku(String haiku)", "testcase": false, "constructor": false}, {"identifier": "validateHaikuCharacters", "parameters": "(String haiku)", "modifiers": "public", "return": "boolean", "signature": "boolean validateHaikuCharacters(String haiku)", "full_signature": "public boolean validateHaikuCharacters(String haiku)", "class_method_signature": "HaikuReview.validateHaikuCharacters(String haiku)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfSyllables", "parameters": "(String line)", "modifiers": "public", "return": "int", "signature": "int getNumberOfSyllables(String line)", "full_signature": "public int getNumberOfSyllables(String line)", "class_method_signature": "HaikuReview.getNumberOfSyllables(String line)", "testcase": false, "constructor": false}, {"identifier": "isAConstantant", "parameters": "(char character)", "modifiers": "public", "return": "boolean", "signature": "boolean isAConstantant(char character)", "full_signature": "public boolean isAConstantant(char character)", "class_method_signature": "HaikuReview.isAConstantant(char character)", "testcase": false, "constructor": false}], "file": "haikuReview/20161219-paul-niamh/src/main/java/HaikuReview.java"}, "focal_method": {"identifier": "getNumberOfSyllables", "parameters": "(String line)", "modifiers": "public", "return": "int", "body": "public int getNumberOfSyllables(String line) {\n\n        char[] chars = line.toCharArray();\n        char previousCharacter = ' ';\n        int syllableCount = 0;\n\n        for (int i = 0; i < chars.length; i++) {\n            char currentCharacter = chars[i];\n\n            boolean previousCharacterIsAVowel = isAConstantant(previousCharacter);\n            boolean endOfLine = i == chars.length - 1;\n            if (previousCharacterIsAVowel && endOfLine) {\n                syllableCount++;\n            } else if (previousCharacterIsAVowel && !isAConstantant(currentCharacter)) {\n                syllableCount++;\n            }\n\n            previousCharacter = currentCharacter;\n        }\n        return syllableCount;\n\n    }", "signature": "int getNumberOfSyllables(String line)", "full_signature": "public int getNumberOfSyllables(String line)", "class_method_signature": "HaikuReview.getNumberOfSyllables(String line)", "testcase": false, "constructor": false, "invocations": ["toCharArray", "isAConstantant", "isAConstantant"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}