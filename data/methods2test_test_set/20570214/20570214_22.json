{"test_class": {"identifier": "AesGcmSivTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Integer[] keySizeInBytes;", "modifier": "private", "type": "Integer[]", "declarator": "keySizeInBytes", "var_name": "keySizeInBytes"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/subtle/AesGcmSivTest.java"}, "test_case": {"identifier": "testWycheproofVectors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWycheproofVectors() throws Exception {\n    JSONObject json =\n        WycheproofTestUtil.readJson(\"../wycheproof/testvectors/aes_gcm_siv_test.json\");\n    int errors = 0;\n    int cntSkippedTests = 0;\n    JSONArray testGroups = json.getJSONArray(\"testGroups\");\n    for (int i = 0; i < testGroups.length(); i++) {\n      JSONObject group = testGroups.getJSONObject(i);\n      int keySize = group.getInt(\"keySize\");\n      JSONArray tests = group.getJSONArray(\"tests\");\n      if (!Arrays.asList(keySizeInBytes).contains(keySize / 8)) {\n        cntSkippedTests += tests.length();\n        continue;\n      }\n      for (int j = 0; j < tests.length(); j++) {\n        JSONObject testcase = tests.getJSONObject(j);\n        String tcId =\n            String.format(\n                \"testcase %d (%s)\", testcase.getInt(\"tcId\"), testcase.getString(\"comment\"));\n        byte[] iv = Hex.decode(testcase.getString(\"iv\"));\n        byte[] key = Hex.decode(testcase.getString(\"key\"));\n        byte[] msg = Hex.decode(testcase.getString(\"msg\"));\n        byte[] aad = Hex.decode(testcase.getString(\"aad\"));\n        byte[] ct = Hex.decode(testcase.getString(\"ct\"));\n        byte[] tag = Hex.decode(testcase.getString(\"tag\"));\n        byte[] ciphertext = Bytes.concat(iv, ct, tag);\n        // Result is one of \"valid\", \"invalid\", \"acceptable\".\n        // \"valid\" are test vectors with matching plaintext, ciphertext and tag.\n        // \"invalid\" are test vectors with invalid parameters or invalid ciphertext and tag.\n        // \"acceptable\" are test vectors with weak parameters or legacy formats.\n        String result = testcase.getString(\"result\");\n        // Tink only supports 12-byte iv.\n        if (iv.length != 12) {\n          result = \"invalid\";\n        }\n\n        try {\n          AesGcmSiv gcm = new AesGcmSiv(key);\n          byte[] decrypted = gcm.decrypt(ciphertext, aad);\n          boolean eq = TestUtil.arrayEquals(decrypted, msg);\n          if (result.equals(\"invalid\")) {\n            System.out.printf(\n                \"FAIL %s: accepting invalid ciphertext, cleartext: %s, decrypted: %s%n\",\n                tcId, Hex.encode(msg), Hex.encode(decrypted));\n            errors++;\n          } else {\n            if (!eq) {\n              System.out.printf(\n                  \"FAIL %s: incorrect decryption, result: %s, expected: %s%n\",\n                  tcId, Hex.encode(decrypted), Hex.encode(msg));\n              errors++;\n            }\n          }\n        } catch (GeneralSecurityException ex) {\n          if (result.equals(\"valid\")) {\n            System.out.printf(\"FAIL %s: cannot decrypt, exception %s%n\", tcId, ex);\n            errors++;\n          }\n        }\n      }\n    }\n    System.out.printf(\"Number of tests skipped: %d\", cntSkippedTests);\n    assertEquals(0, errors);\n  }", "signature": "void testWycheproofVectors()", "full_signature": "@Test public void testWycheproofVectors()", "class_method_signature": "AesGcmSivTest.testWycheproofVectors()", "testcase": true, "constructor": false, "invocations": ["readJson", "getJSONArray", "length", "getJSONObject", "getInt", "getJSONArray", "contains", "asList", "length", "length", "getJSONObject", "format", "getInt", "getString", "decode", "getString", "decode", "getString", "decode", "getString", "decode", "getString", "decode", "getString", "decode", "getString", "concat", "getString", "decrypt", "arrayEquals", "equals", "printf", "encode", "encode", "printf", "encode", "encode", "equals", "printf", "printf", "assertEquals"]}, "focal_class": {"identifier": "AesGcmSiv", "superclass": "", "interfaces": "implements Aead", "fields": [{"original_string": "private static final ThreadLocal<Cipher> localCipher =\n      new ThreadLocal<Cipher>() {\n        @Override\n        protected Cipher initialValue() {\n          try {\n            return EngineFactory.CIPHER.getInstance(\"AES/GCM-SIV/NoPadding\");\n          } catch (GeneralSecurityException ex) {\n            throw new IllegalStateException(ex);\n          }\n        }\n      };", "modifier": "private static final", "type": "ThreadLocal<Cipher>", "declarator": "localCipher =\n      new ThreadLocal<Cipher>() {\n        @Override\n        protected Cipher initialValue() {\n          try {\n            return EngineFactory.CIPHER.getInstance(\"AES/GCM-SIV/NoPadding\");\n          } catch (GeneralSecurityException ex) {\n            throw new IllegalStateException(ex);\n          }\n        }\n      }", "var_name": "localCipher"}, {"original_string": "private static final int IV_SIZE_IN_BYTES = 12;", "modifier": "private static final", "type": "int", "declarator": "IV_SIZE_IN_BYTES = 12", "var_name": "IV_SIZE_IN_BYTES"}, {"original_string": "private static final int TAG_SIZE_IN_BYTES = 16;", "modifier": "private static final", "type": "int", "declarator": "TAG_SIZE_IN_BYTES = 16", "var_name": "TAG_SIZE_IN_BYTES"}, {"original_string": "private final SecretKey keySpec;", "modifier": "private final", "type": "SecretKey", "declarator": "keySpec", "var_name": "keySpec"}], "methods": [{"identifier": "AesGcmSiv", "parameters": "(final byte[] key)", "modifiers": "public", "return": "", "signature": " AesGcmSiv(final byte[] key)", "full_signature": "public  AesGcmSiv(final byte[] key)", "class_method_signature": "AesGcmSiv.AesGcmSiv(final byte[] key)", "testcase": false, "constructor": true}, {"identifier": "encrypt", "parameters": "(final byte[] plaintext, final byte[] associatedData)", "modifiers": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public", "return": "byte[]", "signature": "byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "full_signature": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "class_method_signature": "AesGcmSiv.encrypt(final byte[] plaintext, final byte[] associatedData)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final byte[] ciphertext, final byte[] associatedData)", "modifiers": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public", "return": "byte[]", "signature": "byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "full_signature": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "class_method_signature": "AesGcmSiv.decrypt(final byte[] ciphertext, final byte[] associatedData)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "(final byte[] iv)", "modifiers": "private static", "return": "AlgorithmParameterSpec", "signature": "AlgorithmParameterSpec getParams(final byte[] iv)", "full_signature": "private static AlgorithmParameterSpec getParams(final byte[] iv)", "class_method_signature": "AesGcmSiv.getParams(final byte[] iv)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "(final byte[] buf, int offset, int len)", "modifiers": "private static", "return": "AlgorithmParameterSpec", "signature": "AlgorithmParameterSpec getParams(final byte[] buf, int offset, int len)", "full_signature": "private static AlgorithmParameterSpec getParams(final byte[] buf, int offset, int len)", "class_method_signature": "AesGcmSiv.getParams(final byte[] buf, int offset, int len)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/subtle/AesGcmSiv.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(final byte[] ciphertext, final byte[] associatedData)", "modifiers": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public", "return": "byte[]", "body": "@Override\n  /**\n   * On Android KitKat (API level 19) this method does not support non null or non empty {@code\n   * associatedData}. It might not work at all in older versions.\n   */\n  public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)\n      throws GeneralSecurityException {\n    if (ciphertext.length < IV_SIZE_IN_BYTES + TAG_SIZE_IN_BYTES) {\n      throw new GeneralSecurityException(\"ciphertext too short\");\n    }\n\n    AlgorithmParameterSpec params = getParams(ciphertext, 0, IV_SIZE_IN_BYTES);\n    localCipher.get().init(Cipher.DECRYPT_MODE, keySpec, params);\n    if (associatedData != null && associatedData.length != 0) {\n      localCipher.get().updateAAD(associatedData);\n    }\n    return localCipher\n        .get()\n        .doFinal(ciphertext, IV_SIZE_IN_BYTES, ciphertext.length - IV_SIZE_IN_BYTES);\n  }", "signature": "byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "full_signature": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "class_method_signature": "AesGcmSiv.decrypt(final byte[] ciphertext, final byte[] associatedData)", "testcase": false, "constructor": false, "invocations": ["getParams", "init", "get", "updateAAD", "get", "doFinal", "get"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}