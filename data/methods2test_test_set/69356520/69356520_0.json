{"test_class": {"identifier": "IPSTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NOT_IPS_PATCH = \"Not an IPS patch.\";", "modifier": "private static final", "type": "String", "declarator": "NOT_IPS_PATCH = \"Not an IPS patch.\"", "var_name": "NOT_IPS_PATCH"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Mock\n    Context mockContext;", "modifier": "@Mock", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}], "file": "app/src/test/java/org/emunix/unipatcher/patcher/IPSTest.java"}, "test_case": {"identifier": "IPS_InvalidPatch_NoMagic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void IPS_InvalidPatch_NoMagic() throws Exception {\n        File patch = new File(this.getClass().getResource(\"/ips/not_ips.ips\").getPath());\n        File in = new File(getClass().getResource(\"/ips/min_ips.bin\").getPath());\n        File out = folder.newFile(\"out.bin\");\n\n        IPS patcher = new IPS(mockContext, patch, in, out);\n\n        try {\n            patcher.apply();\n            fail(\"Expected an PatchException to be thrown\");\n        } catch (PatchException e) {\n            assertThat(e.getMessage(), is(\"Not an IPS patch.\"));\n        }\n    }", "signature": "void IPS_InvalidPatch_NoMagic()", "full_signature": "@Test public void IPS_InvalidPatch_NoMagic()", "class_method_signature": "IPSTest.IPS_InvalidPatch_NoMagic()", "testcase": true, "constructor": false, "invocations": ["getPath", "getResource", "getClass", "getPath", "getResource", "getClass", "newFile", "apply", "fail", "assertThat", "getMessage", "is"]}, "focal_class": {"identifier": "IPS", "superclass": "extends Patcher", "interfaces": "", "fields": [{"original_string": "public static final int NOT_IPS_PATCH = 0;", "modifier": "public static final", "type": "int", "declarator": "NOT_IPS_PATCH = 0", "var_name": "NOT_IPS_PATCH"}, {"original_string": "public static final int IPS_PATCH = 1;", "modifier": "public static final", "type": "int", "declarator": "IPS_PATCH = 1", "var_name": "IPS_PATCH"}, {"original_string": "public static final int IPS32_PATCH = 2;", "modifier": "public static final", "type": "int", "declarator": "IPS32_PATCH = 2", "var_name": "IPS32_PATCH"}, {"original_string": "private static final byte[] MAGIC_NUMBER_IPS = {0x50, 0x41, 0x54, 0x43, 0x48};", "modifier": "private static final", "type": "byte[]", "declarator": "MAGIC_NUMBER_IPS = {0x50, 0x41, 0x54, 0x43, 0x48}", "var_name": "MAGIC_NUMBER_IPS"}, {"original_string": "private static final byte[] MAGIC_NUMBER_IPS32 = {0x49, 0x50, 0x53, 0x33, 0x32};", "modifier": "private static final", "type": "byte[]", "declarator": "MAGIC_NUMBER_IPS32 = {0x49, 0x50, 0x53, 0x33, 0x32}", "var_name": "MAGIC_NUMBER_IPS32"}, {"original_string": "private int mPatchType = NOT_IPS_PATCH;", "modifier": "private", "type": "int", "declarator": "mPatchType = NOT_IPS_PATCH", "var_name": "mPatchType"}], "methods": [{"identifier": "IPS", "parameters": "(Context context, File patch, File rom, File output)", "modifiers": "public", "return": "", "signature": " IPS(Context context, File patch, File rom, File output)", "full_signature": "public  IPS(Context context, File patch, File rom, File output)", "class_method_signature": "IPS.IPS(Context context, File patch, File rom, File output)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(boolean ignoreChecksum)", "modifiers": "@Override public", "return": "void", "signature": "void apply(boolean ignoreChecksum)", "full_signature": "@Override public void apply(boolean ignoreChecksum)", "class_method_signature": "IPS.apply(boolean ignoreChecksum)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void apply()", "full_signature": "public void apply()", "class_method_signature": "IPS.apply()", "testcase": false, "constructor": false}, {"identifier": "checkEOF", "parameters": "(long value)", "modifiers": "private", "return": "boolean", "signature": "boolean checkEOF(long value)", "full_signature": "private boolean checkEOF(long value)", "class_method_signature": "IPS.checkEOF(long value)", "testcase": false, "constructor": false}, {"identifier": "readOffset", "parameters": "(InputStream stream)", "modifiers": "private", "return": "long", "signature": "long readOffset(InputStream stream)", "full_signature": "private long readOffset(InputStream stream)", "class_method_signature": "IPS.readOffset(InputStream stream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/emunix/unipatcher/patcher/IPS.java"}, "focal_method": {"identifier": "apply", "parameters": "(boolean ignoreChecksum)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void apply(boolean ignoreChecksum) throws PatchException, IOException {\n        apply();\n    }", "signature": "void apply(boolean ignoreChecksum)", "full_signature": "@Override public void apply(boolean ignoreChecksum)", "class_method_signature": "IPS.apply(boolean ignoreChecksum)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 69356520, "url": "https://github.com/btimofeev/UniPatcher", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 34, "size": 1720, "license": "licensed"}}