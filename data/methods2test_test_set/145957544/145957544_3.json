{"test_class": {"identifier": "KiltReformatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public TemporaryFolder tmpFolder= new TemporaryFolder();", "modifier": "@Rule\n  public", "type": "TemporaryFolder", "declarator": "tmpFolder= new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "kilt-core/src/test/java/de/poiu/kilt/reformatting/KiltReformatterTest.java"}, "test_case": {"identifier": "testReformat_multilineProperties_ToSingleLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReformat_multilineProperties_ToSingleLine() throws IOException {\n\n    // - preparation\n\n    final Path propertiesRootDirectory= this.tmpFolder.getRoot().toPath();\n    final File f1= createI18nBundle(propertiesRootDirectory, \"\"\n      + \"\\tkey\\\\ \\\\\\n\"\n      + \"  one\\\\\\n\"\n      + \"  : value \\\\\\n\"\n      + \"    1\\n\"\n      + \"key\\\\ \\\\\\n\"\n      + \"  two\\\\\\r\"\n      + \"  = \\t value \\\\\\r\"\n      + \"    2\\n\"\n    );\n\n    final FileMatcher fileMatcher= new FileMatcher(propertiesRootDirectory, new String[]{\"**/*.properties\"}, new String[]{\"\"});\n\n    // - execution\n\n    new KiltReformatter()\n      .reformat(fileMatcher, \"<key> = <value>\\\\n\", true, UTF_8);\n\n    // - verification\n\n    System.out.println(\"SOLL:\\n\"\n      + \"key one = value 1\\n\"\n      + \"key two = value 2\\n\"\n    );\n    System.out.println(\"IST:\\n\"\n      + contentOf(f1));\n\n    assertThat(contentOf(f1)).isEqualTo(\"\"\n      + \"key\\\\ one = value 1\\n\"\n      + \"key\\\\ two = value 2\\n\"\n    );\n  }", "signature": "void testReformat_multilineProperties_ToSingleLine()", "full_signature": "@Test public void testReformat_multilineProperties_ToSingleLine()", "class_method_signature": "KiltReformatterTest.testReformat_multilineProperties_ToSingleLine()", "testcase": true, "constructor": false, "invocations": ["toPath", "getRoot", "createI18nBundle", "reformat", "println", "println", "contentOf", "isEqualTo", "assertThat", "contentOf"]}, "focal_class": {"identifier": "KiltReformatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER= LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER= LogManager.getLogger()", "var_name": "LOGGER"}, {"original_string": "private static final ApronOptions APRON_OPTIONS= ApronOptions.create()\n        .with(MissingKeyAction.NOTHING)\n        .with(UnicodeHandling.DO_NOTHING);", "modifier": "private static final", "type": "ApronOptions", "declarator": "APRON_OPTIONS= ApronOptions.create()\n        .with(MissingKeyAction.NOTHING)\n        .with(UnicodeHandling.DO_NOTHING)", "var_name": "APRON_OPTIONS"}], "methods": [{"identifier": "reformat", "parameters": "(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "modifiers": "public", "return": "void", "signature": "void reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "full_signature": "public void reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "class_method_signature": "KiltReformatter.reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "reorderByKey", "parameters": "(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "modifiers": "public", "return": "void", "signature": "void reorderByKey(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "full_signature": "public void reorderByKey(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "class_method_signature": "KiltReformatter.reorderByKey(final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "reorderByTemplate", "parameters": "(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "modifiers": "public", "return": "void", "signature": "void reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "full_signature": "public void reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "class_method_signature": "KiltReformatter.reorderByTemplate(final File template, final FileMatcher fileMatcher, final AttachCommentsTo attachCommentsTo, final Charset charset)", "testcase": false, "constructor": false}], "file": "kilt-core/src/main/java/de/poiu/kilt/reformatting/KiltReformatter.java"}, "focal_method": {"identifier": "reformat", "parameters": "(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "modifiers": "public", "return": "void", "body": "public void reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset) {\n    Require.nonNull(fileMatcher);\n    Require.nonNull(formatString);\n    Require.nonNull(charset);\n\n    final Set<File> propertyFiles= fileMatcher.findMatchingFiles();\n    LOGGER.log(Level.INFO, \"Reformatting entries in the following files: {}\", propertyFiles);\n\n    final Reformatter reformatter= new Reformatter(\n      ReformatOptions.create()\n        .with(charset)\n        .withFormat(formatString)\n        .withReformatKeyAndValue(reformatKeyAndValue));\n\n    for (final File propertyFile : propertyFiles) {\n      reformatter.reformat(propertyFile);\n    }\n  }", "signature": "void reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "full_signature": "public void reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "class_method_signature": "KiltReformatter.reformat(final FileMatcher fileMatcher, final String formatString, final boolean reformatKeyAndValue, final Charset charset)", "testcase": false, "constructor": false, "invocations": ["nonNull", "nonNull", "nonNull", "findMatchingFiles", "log", "withReformatKeyAndValue", "withFormat", "with", "create", "reformat"]}, "repository": {"repo_id": 145957544, "url": "https://github.com/hupfdule/kilt", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 31, "size": 782, "license": "licensed"}}