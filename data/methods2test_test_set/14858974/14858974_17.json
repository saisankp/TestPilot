{"test_class": {"identifier": "FileUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/org/axway/grapes/commons/utils/FileUtilsTest.java"}, "test_case": {"identifier": "checkSerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkSerialization() throws IOException {\n        final File testdir = new File(System.getProperty(\"user.dir\") + \"/target\");\n        final String content = \"content\";\n        final String fileName = \"test.txt\";\n\n        final File testFile = new File(testdir, fileName);\n        assertFalse(testFile.exists());\n\n        FileUtils.serialize(testdir, content, fileName);\n        assertTrue(testFile.exists());\n\n        FileReader reader = null;\n        BufferedReader buff = null;\n        String realContent = null;\n\n        try{\n            reader = new FileReader(testFile);\n            buff = new BufferedReader(reader);\n\n            realContent = buff.readLine();\n\n        }\n        catch (Exception e){\n\n        }\n        finally {\n            if(buff != null){\n                try {\n                    buff.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if(reader != null){\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        assertNotNull(realContent);\n        assertEquals(content, realContent);\n\n        if(testFile.exists()){\n            testFile.delete();\n        }\n\n    }", "signature": "void checkSerialization()", "full_signature": "@Test public void checkSerialization()", "class_method_signature": "FileUtilsTest.checkSerialization()", "testcase": true, "constructor": false, "invocations": ["getProperty", "assertFalse", "exists", "serialize", "assertTrue", "exists", "readLine", "close", "printStackTrace", "close", "printStackTrace", "assertNotNull", "assertEquals", "exists", "delete"]}, "focal_class": {"identifier": "FileUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "FileUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileUtils()", "full_signature": "private  FileUtils()", "class_method_signature": "FileUtils.FileUtils()", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(final File folder, final String content, final String fileName)", "modifiers": "public static", "return": "void", "signature": "void serialize(final File folder, final String content, final String fileName)", "full_signature": "public static void serialize(final File folder, final String content, final String fileName)", "class_method_signature": "FileUtils.serialize(final File folder, final String content, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final File file)", "modifiers": "public static", "return": "String", "signature": "String read(final File file)", "full_signature": "public static String read(final File file)", "class_method_signature": "FileUtils.read(final File file)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(final File file)", "modifiers": "public static", "return": "Long", "signature": "Long getSize(final File file)", "full_signature": "public static Long getSize(final File file)", "class_method_signature": "FileUtils.getSize(final File file)", "testcase": false, "constructor": false}, {"identifier": "touch", "parameters": "(final File folder , final String fileName)", "modifiers": "public static", "return": "void", "signature": "void touch(final File folder , final String fileName)", "full_signature": "public static void touch(final File folder , final String fileName)", "class_method_signature": "FileUtils.touch(final File folder , final String fileName)", "testcase": false, "constructor": false}, {"identifier": "getFileChecksumSHA256", "parameters": "(final File artifactFile)", "modifiers": "public static", "return": "String", "signature": "String getFileChecksumSHA256(final File artifactFile)", "full_signature": "public static String getFileChecksumSHA256(final File artifactFile)", "class_method_signature": "FileUtils.getFileChecksumSHA256(final File artifactFile)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/axway/grapes/commons/utils/FileUtils.java"}, "focal_method": {"identifier": "serialize", "parameters": "(final File folder, final String content, final String fileName)", "modifiers": "public static", "return": "void", "body": "public static void serialize(final File folder, final String content, final String fileName) throws IOException {\n        if (!folder.exists()) {\n            folder.mkdirs();\n        }\n\n        final File output = new File(folder, fileName);\n\n        try (\n                final FileWriter writer = new FileWriter(output);\n        ) {\n            writer.write(content);\n            writer.flush();\n        } catch (Exception e) {\n            throw new IOException(\"Failed to serialize the notification in folder \" + folder.getPath(), e);\n        }\n    }", "signature": "void serialize(final File folder, final String content, final String fileName)", "full_signature": "public static void serialize(final File folder, final String content, final String fileName)", "class_method_signature": "FileUtils.serialize(final File folder, final String content, final String fileName)", "testcase": false, "constructor": false, "invocations": ["exists", "mkdirs", "write", "flush", "getPath"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}