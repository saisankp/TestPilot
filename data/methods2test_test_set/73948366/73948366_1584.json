{"test_class": {"identifier": "AWSObjectStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/store/impl/AWSObjectStoreFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n\n        System.setProperty(ZMSConsts.ZMS_PROP_AWS_RDS_MASTER_INSTANCE, \"instance\");\n        System.setProperty(ZMSConsts.ZMS_PROP_AWS_RDS_USER, \"rds-user\");\n        System.setProperty(ZMSConsts.ZMS_PROP_AWS_RDS_IAM_ROLE, \"role\");\n        System.setProperty(ZMSConsts.ZMS_PROP_AWS_RDS_CREDS_REFRESH_TIME, \"1\");\n\n        System.clearProperty(ZMSConsts.ZMS_PROP_AWS_RDS_REPLICA_INSTANCE);\n\n        AWSObjectStoreFactory factory = new TestAWSObjectStoreFactory();\n        ObjectStore store = factory.create(null);\n        \n        // sleep a couple of seconds for the updater to run\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException ignored) {\n        }\n        assertNotNull(store);\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "AWSObjectStoreFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "setProperty", "clearProperty", "create", "sleep", "assertNotNull"]}, "focal_class": {"identifier": "AWSObjectStoreFactory", "superclass": "", "interfaces": "implements ObjectStoreFactory", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AWSObjectStoreFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AWSObjectStoreFactory.class)", "var_name": "LOG"}, {"original_string": "private static Properties mysqlMasterConnectionProperties = new Properties();", "modifier": "private static", "type": "Properties", "declarator": "mysqlMasterConnectionProperties = new Properties()", "var_name": "mysqlMasterConnectionProperties"}, {"original_string": "private static Properties mysqlReplicaConnectionProperties = new Properties();", "modifier": "private static", "type": "Properties", "declarator": "mysqlReplicaConnectionProperties = new Properties()", "var_name": "mysqlReplicaConnectionProperties"}, {"original_string": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private static ScheduledExecutorService scheduledThreadPool;", "modifier": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private static", "type": "ScheduledExecutorService", "declarator": "scheduledThreadPool", "var_name": "scheduledThreadPool"}, {"original_string": "private static String rdsUser = null;", "modifier": "private static", "type": "String", "declarator": "rdsUser = null", "var_name": "rdsUser"}, {"original_string": "private static String rdsIamRole = null;", "modifier": "private static", "type": "String", "declarator": "rdsIamRole = null", "var_name": "rdsIamRole"}, {"original_string": "private static String rdsMaster = null;", "modifier": "private static", "type": "String", "declarator": "rdsMaster = null", "var_name": "rdsMaster"}, {"original_string": "private static String rdsReplica = null;", "modifier": "private static", "type": "String", "declarator": "rdsReplica = null", "var_name": "rdsReplica"}, {"original_string": "private int rdsPort = 3306;", "modifier": "private", "type": "int", "declarator": "rdsPort = 3306", "var_name": "rdsPort"}], "methods": [{"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "ObjectStore", "signature": "ObjectStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public ObjectStore create(PrivateKeyStore keyStore)", "class_method_signature": "AWSObjectStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getNewInstanceCredentialsProvider", "parameters": "()", "modifiers": "", "return": "InstanceProfileCredentialsProvider", "signature": "InstanceProfileCredentialsProvider getNewInstanceCredentialsProvider()", "full_signature": " InstanceProfileCredentialsProvider getNewInstanceCredentialsProvider()", "class_method_signature": "AWSObjectStoreFactory.getNewInstanceCredentialsProvider()", "testcase": false, "constructor": false}, {"identifier": "getRegion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getRegion()", "full_signature": " String getRegion()", "class_method_signature": "AWSObjectStoreFactory.getRegion()", "testcase": false, "constructor": false}, {"identifier": "getGeneratorAuthToken", "parameters": "(RdsIamAuthTokenGenerator generator, final String hostname,\n                                 int port, final String rdsUser)", "modifiers": "", "return": "String", "signature": "String getGeneratorAuthToken(RdsIamAuthTokenGenerator generator, final String hostname,\n                                 int port, final String rdsUser)", "full_signature": " String getGeneratorAuthToken(RdsIamAuthTokenGenerator generator, final String hostname,\n                                 int port, final String rdsUser)", "class_method_signature": "AWSObjectStoreFactory.getGeneratorAuthToken(RdsIamAuthTokenGenerator generator, final String hostname,\n                                 int port, final String rdsUser)", "testcase": false, "constructor": false}, {"identifier": "getAuthToken", "parameters": "(String hostname, int port, String rdsUser, String rdsIamRole)", "modifiers": "", "return": "String", "signature": "String getAuthToken(String hostname, int port, String rdsUser, String rdsIamRole)", "full_signature": " String getAuthToken(String hostname, int port, String rdsUser, String rdsIamRole)", "class_method_signature": "AWSObjectStoreFactory.getAuthToken(String hostname, int port, String rdsUser, String rdsIamRole)", "testcase": false, "constructor": false}, {"identifier": "updateCredentials", "parameters": "(String hostname, Properties mysqlProperties)", "modifiers": "", "return": "void", "signature": "void updateCredentials(String hostname, Properties mysqlProperties)", "full_signature": " void updateCredentials(String hostname, Properties mysqlProperties)", "class_method_signature": "AWSObjectStoreFactory.updateCredentials(String hostname, Properties mysqlProperties)", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/impl/AWSObjectStoreFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "ObjectStore", "body": "@Override\n    public ObjectStore create(PrivateKeyStore keyStore) {\n        \n        rdsUser = System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_USER);\n        rdsIamRole = System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_IAM_ROLE);\n        rdsMaster = System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_MASTER_INSTANCE);\n        rdsReplica = System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_REPLICA_INSTANCE);\n        rdsPort = Integer.parseInt(System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_MASTER_PORT, \"3306\"));\n        \n        final String rdsEngine = System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_ENGINE, \"mysql\");\n        final String rdsDatabase = System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_DATABASE, \"zms_store\");\n        final String jdbcMasterStore = String.format(\"jdbc:%s://%s:%d/%s\", rdsEngine,\n                rdsMaster, rdsPort, rdsDatabase);\n        final String rdsMasterToken = getAuthToken(rdsMaster, rdsPort, rdsUser, rdsIamRole);\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Connecting to master {} with auth token {}\", jdbcMasterStore, rdsMasterToken);\n        }\n        \n        mysqlMasterConnectionProperties.setProperty(ZMSConsts.DB_PROP_VERIFY_SERVER_CERT,\n                System.getProperty(ZMSConsts.ZMS_PROP_JDBC_VERIFY_SERVER_CERT, \"true\"));\n        mysqlMasterConnectionProperties.setProperty(ZMSConsts.DB_PROP_USE_SSL,\n                System.getProperty(ZMSConsts.ZMS_PROP_JDBC_USE_SSL, \"true\"));\n        mysqlMasterConnectionProperties.setProperty(ZMSConsts.DB_PROP_USER, rdsUser);\n        mysqlMasterConnectionProperties.setProperty(ZMSConsts.DB_PROP_PASSWORD, rdsMasterToken);\n        \n        PoolableDataSource dataMasterSource = DataSourceFactory.create(jdbcMasterStore, mysqlMasterConnectionProperties);\n        \n        // now check to see if we also have a read-only replica jdbc store configured\n\n        PoolableDataSource dataReplicaSource = null;\n        if (rdsReplica != null) {\n            \n            final String jdbcReplicaStore = String.format(\"jdbc:%s://%s:%d/%s\", rdsEngine,\n                    rdsReplica, rdsPort, rdsDatabase);\n            final String rdsReplicaToken = getAuthToken(rdsReplica, rdsPort, rdsUser, rdsIamRole);\n            \n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Connecting to replica {} with auth token {}\", jdbcReplicaStore, rdsReplicaToken);\n            }\n            \n            mysqlReplicaConnectionProperties.setProperty(ZMSConsts.DB_PROP_VERIFY_SERVER_CERT,\n                    System.getProperty(ZMSConsts.ZMS_PROP_JDBC_VERIFY_SERVER_CERT, \"true\"));\n            mysqlReplicaConnectionProperties.setProperty(ZMSConsts.DB_PROP_USE_SSL,\n                    System.getProperty(ZMSConsts.ZMS_PROP_JDBC_USE_SSL, \"true\"));\n            mysqlReplicaConnectionProperties.setProperty(ZMSConsts.DB_PROP_USER, rdsUser);\n            mysqlReplicaConnectionProperties.setProperty(ZMSConsts.DB_PROP_PASSWORD, rdsReplicaToken);\n            \n            dataReplicaSource = DataSourceFactory.create(jdbcReplicaStore, mysqlReplicaConnectionProperties);\n        }\n        \n        // start our credentials refresh task\n        \n        long credsRefreshTime = Integer.parseInt(System.getProperty(ZMSConsts.ZMS_PROP_AWS_RDS_CREDS_REFRESH_TIME, \"300\"));\n\n        scheduledThreadPool = Executors.newScheduledThreadPool(1);\n        scheduledThreadPool.scheduleAtFixedRate(new CredentialsUpdater(), credsRefreshTime,\n                credsRefreshTime, TimeUnit.SECONDS);\n        \n        return new JDBCObjectStore(dataMasterSource, dataReplicaSource);\n    }", "signature": "ObjectStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public ObjectStore create(PrivateKeyStore keyStore)", "class_method_signature": "AWSObjectStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "getProperty", "getProperty", "parseInt", "getProperty", "getProperty", "getProperty", "format", "getAuthToken", "isDebugEnabled", "debug", "setProperty", "getProperty", "setProperty", "getProperty", "setProperty", "setProperty", "create", "format", "getAuthToken", "isDebugEnabled", "debug", "setProperty", "getProperty", "setProperty", "getProperty", "setProperty", "setProperty", "create", "parseInt", "getProperty", "newScheduledThreadPool", "scheduleAtFixedRate"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}