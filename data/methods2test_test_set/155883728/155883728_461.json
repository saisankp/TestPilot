{"test_class": {"identifier": "NodeTypeManagerFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/nodetype/NodeTypeManagerFacadeTest.java"}, "test_case": {"identifier": "testRORegisterNodeTypes", "parameters": "()", "modifiers": "@Test(expected = ListenerReadOnlyException.class) public", "return": "void", "body": "@Test(expected = ListenerReadOnlyException.class)\n    public void testRORegisterNodeTypes() throws Exception {\n        NodeTypeManagerFacade facade = getFacade(mock(NodeTypeManager.class));\n        facade.registerNodeTypes(new NodeTypeDefinition[0], true);\n    }", "signature": "void testRORegisterNodeTypes()", "full_signature": "@Test(expected = ListenerReadOnlyException.class) public void testRORegisterNodeTypes()", "class_method_signature": "NodeTypeManagerFacadeTest.testRORegisterNodeTypes()", "testcase": true, "constructor": false, "invocations": ["getFacade", "mock", "registerNodeTypes"]}, "focal_class": {"identifier": "NodeTypeManagerFacade", "superclass": "", "interfaces": "implements NodeTypeManager", "fields": [{"original_string": "private final @NotNull NodeTypeManager delegate;", "modifier": "private final @NotNull", "type": "NodeTypeManager", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "NodeTypeManagerFacade", "parameters": "(final @NotNull NodeTypeManager delegate)", "modifiers": "public", "return": "", "signature": " NodeTypeManagerFacade(final @NotNull NodeTypeManager delegate)", "full_signature": "public  NodeTypeManagerFacade(final @NotNull NodeTypeManager delegate)", "class_method_signature": "NodeTypeManagerFacade.NodeTypeManagerFacade(final @NotNull NodeTypeManager delegate)", "testcase": false, "constructor": true}, {"identifier": "getNodeType", "parameters": "(String nodeTypeName)", "modifiers": "@Override public", "return": "NodeType", "signature": "NodeType getNodeType(String nodeTypeName)", "full_signature": "@Override public NodeType getNodeType(String nodeTypeName)", "class_method_signature": "NodeTypeManagerFacade.getNodeType(String nodeTypeName)", "testcase": false, "constructor": false}, {"identifier": "hasNodeType", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNodeType(String name)", "full_signature": "@Override public boolean hasNodeType(String name)", "class_method_signature": "NodeTypeManagerFacade.hasNodeType(String name)", "testcase": false, "constructor": false}, {"identifier": "getAllNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator getAllNodeTypes()", "full_signature": "@Override public NodeTypeIterator getAllNodeTypes()", "class_method_signature": "NodeTypeManagerFacade.getAllNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "getPrimaryNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator getPrimaryNodeTypes()", "full_signature": "@Override public NodeTypeIterator getPrimaryNodeTypes()", "class_method_signature": "NodeTypeManagerFacade.getPrimaryNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "getMixinNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator getMixinNodeTypes()", "full_signature": "@Override public NodeTypeIterator getMixinNodeTypes()", "class_method_signature": "NodeTypeManagerFacade.getMixinNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "createNodeTypeTemplate", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypeTemplate", "signature": "NodeTypeTemplate createNodeTypeTemplate()", "full_signature": "@Override public NodeTypeTemplate createNodeTypeTemplate()", "class_method_signature": "NodeTypeManagerFacade.createNodeTypeTemplate()", "testcase": false, "constructor": false}, {"identifier": "createNodeTypeTemplate", "parameters": "(NodeTypeDefinition ntd)", "modifiers": "@Override public", "return": "NodeTypeTemplate", "signature": "NodeTypeTemplate createNodeTypeTemplate(NodeTypeDefinition ntd)", "full_signature": "@Override public NodeTypeTemplate createNodeTypeTemplate(NodeTypeDefinition ntd)", "class_method_signature": "NodeTypeManagerFacade.createNodeTypeTemplate(NodeTypeDefinition ntd)", "testcase": false, "constructor": false}, {"identifier": "createNodeDefinitionTemplate", "parameters": "()", "modifiers": "@Override public", "return": "NodeDefinitionTemplate", "signature": "NodeDefinitionTemplate createNodeDefinitionTemplate()", "full_signature": "@Override public NodeDefinitionTemplate createNodeDefinitionTemplate()", "class_method_signature": "NodeTypeManagerFacade.createNodeDefinitionTemplate()", "testcase": false, "constructor": false}, {"identifier": "createPropertyDefinitionTemplate", "parameters": "()", "modifiers": "@Override public", "return": "PropertyDefinitionTemplate", "signature": "PropertyDefinitionTemplate createPropertyDefinitionTemplate()", "full_signature": "@Override public PropertyDefinitionTemplate createPropertyDefinitionTemplate()", "class_method_signature": "NodeTypeManagerFacade.createPropertyDefinitionTemplate()", "testcase": false, "constructor": false}, {"identifier": "registerNodeType", "parameters": "(NodeTypeDefinition ntd, boolean allowUpdate)", "modifiers": "@Override public", "return": "NodeType", "signature": "NodeType registerNodeType(NodeTypeDefinition ntd, boolean allowUpdate)", "full_signature": "@Override public NodeType registerNodeType(NodeTypeDefinition ntd, boolean allowUpdate)", "class_method_signature": "NodeTypeManagerFacade.registerNodeType(NodeTypeDefinition ntd, boolean allowUpdate)", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "(NodeTypeDefinition[] ntds, boolean allowUpdate)", "modifiers": "@Override public", "return": "NodeTypeIterator", "signature": "NodeTypeIterator registerNodeTypes(NodeTypeDefinition[] ntds, boolean allowUpdate)", "full_signature": "@Override public NodeTypeIterator registerNodeTypes(NodeTypeDefinition[] ntds, boolean allowUpdate)", "class_method_signature": "NodeTypeManagerFacade.registerNodeTypes(NodeTypeDefinition[] ntds, boolean allowUpdate)", "testcase": false, "constructor": false}, {"identifier": "unregisterNodeType", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterNodeType(String name)", "full_signature": "@Override public void unregisterNodeType(String name)", "class_method_signature": "NodeTypeManagerFacade.unregisterNodeType(String name)", "testcase": false, "constructor": false}, {"identifier": "unregisterNodeTypes", "parameters": "(String[] names)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterNodeTypes(String[] names)", "full_signature": "@Override public void unregisterNodeTypes(String[] names)", "class_method_signature": "NodeTypeManagerFacade.unregisterNodeTypes(String[] names)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/nodetype/NodeTypeManagerFacade.java"}, "focal_method": {"identifier": "registerNodeTypes", "parameters": "(NodeTypeDefinition[] ntds, boolean allowUpdate)", "modifiers": "@Override public", "return": "NodeTypeIterator", "body": "@Override\n    public NodeTypeIterator registerNodeTypes(NodeTypeDefinition[] ntds, boolean allowUpdate) throws RepositoryException {\n        throw new ListenerReadOnlyException();\n    }", "signature": "NodeTypeIterator registerNodeTypes(NodeTypeDefinition[] ntds, boolean allowUpdate)", "full_signature": "@Override public NodeTypeIterator registerNodeTypes(NodeTypeDefinition[] ntds, boolean allowUpdate)", "class_method_signature": "NodeTypeManagerFacade.registerNodeTypes(NodeTypeDefinition[] ntds, boolean allowUpdate)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}