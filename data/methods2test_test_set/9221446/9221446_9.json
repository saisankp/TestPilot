{"test_class": {"identifier": "TestStorageManager", "superclass": "", "interfaces": "", "fields": [], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/storage/TestStorageManager.java"}, "test_case": {"identifier": "testOracleRewrites", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testOracleRewrites() {\n\n    StorageManager db = StorageManagerFactory.getInstance(\"oracle.jdbc.driver.OracleDriver\", \"sa\", \"\", \"jdbc:oracle:thin:.\", 100);\n    final String sampleQuery1 = \"SELECT * FROM SYSTEM.HELP\";\n    String oracle = db.addLimit( sampleQuery1, 10, 0);\n    assertEquals(\"SELECT * FROM SYSTEM.HELP WHERE ROWNUM <= 10\", oracle.replace(\"  \", \" \"));\n    \n    final String sampleQuery2 = \"SELECT * FROM SYSTEM.HELP ORDER BY TIMED\";\n    oracle = db.addLimit( sampleQuery2, 10, 0);\n    assertEquals(\"SELECT * FROM SYSTEM.HELP WHERE ROWNUM <= 10 ORDER BY TIMED\", oracle.replace(\"  \", \" \"));\n   \n    final String sampleQuery3 = \"SELECT * FROM SYSTEM.HELP GROUP BY TIMED\";\n    oracle = db.addLimit( sampleQuery3, 10, 0);\n    assertEquals(\"SELECT * FROM SYSTEM.HELP WHERE ROWNUM <= 10 GROUP BY TIMED\", oracle.replace(\"  \", \" \"));\n    \n    final String sampleQuery4 = \"SELECT * FROM SYSTEM.HELP WHERE TIMED <0 GROUP BY TIMED\";\n    oracle = db.addLimit( sampleQuery4, 10, 0);\n    assertEquals(\"SELECT * FROM SYSTEM.HELP WHERE ROWNUM <= 10 AND (TIMED <0) GROUP BY TIMED\", oracle.replace(\"  \", \" \"));\n    \n    final String sampleQuery5 = \"SELECT * FROM SYSTEM.HELP WHERE TIMED <0 AND TIMED < 10 OR TIMED >30 GROUP BY TIMED\";\n    oracle = db.addLimit( sampleQuery5, 10, 0);\n    assertEquals(\"SELECT * FROM SYSTEM.HELP WHERE ROWNUM <= 10 AND (TIMED <0 AND TIMED < 10 OR TIMED >30) GROUP BY TIMED\", oracle.replace(\"  \", \" \"));\n    \n    final String sampleQuery6 = \"SELECT * FROM SYSTEM.HELP WHERE TIMED <0 AND TIMED < 10 OR TIMED >30\";\n    oracle = db.addLimit( sampleQuery6, 10, 0);\n    assertEquals(\"SELECT * FROM SYSTEM.HELP WHERE ROWNUM <= 10 AND (TIMED <0 AND TIMED < 10 OR TIMED >30)\", oracle.replace(\"  \", \" \"));\n    \n  }", "signature": "void testOracleRewrites()", "full_signature": "@Test public void testOracleRewrites()", "class_method_signature": "TestStorageManager.testOracleRewrites()", "testcase": true, "constructor": false, "invocations": ["getInstance", "addLimit", "assertEquals", "replace", "addLimit", "assertEquals", "replace", "addLimit", "assertEquals", "replace", "addLimit", "assertEquals", "replace", "addLimit", "assertEquals", "replace", "addLimit", "assertEquals", "replace"]}, "focal_class": {"identifier": "StorageManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final transient Logger logger = Logger.getLogger(StorageManager.class);", "modifier": "private static final transient", "type": "Logger", "declarator": "logger = Logger.getLogger(StorageManager.class)", "var_name": "logger"}, {"original_string": "private String databaseDriver;", "modifier": "private", "type": "String", "declarator": "databaseDriver", "var_name": "databaseDriver"}, {"original_string": "private BasicDataSource pool;", "modifier": "private", "type": "BasicDataSource", "declarator": "pool", "var_name": "pool"}, {"original_string": "private String driver = null;", "modifier": "private", "type": "String", "declarator": "driver = null", "var_name": "driver"}, {"original_string": "protected boolean isH2 ;", "modifier": "protected", "type": "boolean", "declarator": "isH2", "var_name": "isH2"}, {"original_string": "protected boolean isMysql ;", "modifier": "protected", "type": "boolean", "declarator": "isMysql", "var_name": "isMysql"}, {"original_string": "protected boolean isOracle ;", "modifier": "protected", "type": "boolean", "declarator": "isOracle", "var_name": "isOracle"}, {"original_string": "protected boolean isSqlServer ;", "modifier": "protected", "type": "boolean", "declarator": "isSqlServer", "var_name": "isSqlServer"}, {"original_string": "protected boolean isPostgres ;", "modifier": "protected", "type": "boolean", "declarator": "isPostgres", "var_name": "isPostgres"}], "methods": [{"identifier": "init", "parameters": "(String databaseDriver, String username, String password, String databaseURL, int maxDBConnections)", "modifiers": "public", "return": "void", "signature": "void init(String databaseDriver, String username, String password, String databaseURL, int maxDBConnections)", "full_signature": "public void init(String databaseDriver, String username, String password, String databaseURL, int maxDBConnections)", "class_method_signature": "StorageManager.init(String databaseDriver, String username, String password, String databaseURL, int maxDBConnections)", "testcase": false, "constructor": false}, {"identifier": "initDatabaseAccess", "parameters": "(Connection con)", "modifiers": "public", "return": "void", "signature": "void initDatabaseAccess(Connection con)", "full_signature": "public void initDatabaseAccess(Connection con)", "class_method_signature": "StorageManager.initDatabaseAccess(Connection con)", "testcase": false, "constructor": false}, {"identifier": "convertLocalTypeToGSN", "parameters": "(int jdbcType, int precision)", "modifiers": "public abstract", "return": "byte", "signature": "byte convertLocalTypeToGSN(int jdbcType, int precision)", "full_signature": "public abstract byte convertLocalTypeToGSN(int jdbcType, int precision)", "class_method_signature": "StorageManager.convertLocalTypeToGSN(int jdbcType, int precision)", "testcase": false, "constructor": false}, {"identifier": "getStatementDropIndex", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getStatementDropIndex()", "full_signature": "public abstract String getStatementDropIndex()", "class_method_signature": "StorageManager.getStatementDropIndex()", "testcase": false, "constructor": false}, {"identifier": "getStatementDropView", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getStatementDropView()", "full_signature": "public abstract String getStatementDropView()", "class_method_signature": "StorageManager.getStatementDropView()", "testcase": false, "constructor": false}, {"identifier": "getTableNotExistsErrNo", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int getTableNotExistsErrNo()", "full_signature": "public abstract int getTableNotExistsErrNo()", "class_method_signature": "StorageManager.getTableNotExistsErrNo()", "testcase": false, "constructor": false}, {"identifier": "addLimit", "parameters": "(String query, int limit, int offset)", "modifiers": "public abstract", "return": "String", "signature": "String addLimit(String query, int limit, int offset)", "full_signature": "public abstract String addLimit(String query, int limit, int offset)", "class_method_signature": "StorageManager.addLimit(String query, int limit, int offset)", "testcase": false, "constructor": false}, {"identifier": "getStatementUselessDataRemoval", "parameters": "(String virtualSensorName, long storageSize)", "modifiers": "public abstract", "return": "StringBuilder", "signature": "StringBuilder getStatementUselessDataRemoval(String virtualSensorName, long storageSize)", "full_signature": "public abstract StringBuilder getStatementUselessDataRemoval(String virtualSensorName, long storageSize)", "class_method_signature": "StorageManager.getStatementUselessDataRemoval(String virtualSensorName, long storageSize)", "testcase": false, "constructor": false}, {"identifier": "convertLocalTypeToGSN", "parameters": "(int jdbcType)", "modifiers": "public", "return": "byte", "signature": "byte convertLocalTypeToGSN(int jdbcType)", "full_signature": "public byte convertLocalTypeToGSN(int jdbcType)", "class_method_signature": "StorageManager.convertLocalTypeToGSN(int jdbcType)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(CharSequence tableName)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(CharSequence tableName)", "full_signature": "public boolean tableExists(CharSequence tableName)", "class_method_signature": "StorageManager.tableExists(CharSequence tableName)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(CharSequence tableName, Connection connection)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(CharSequence tableName, Connection connection)", "full_signature": "public boolean tableExists(CharSequence tableName, Connection connection)", "class_method_signature": "StorageManager.tableExists(CharSequence tableName, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getStatementRemoveUselessDataCountBased", "parameters": "(String virtualSensorName, long storageSize)", "modifiers": "public abstract", "return": "StringBuilder", "signature": "StringBuilder getStatementRemoveUselessDataCountBased(String virtualSensorName, long storageSize)", "full_signature": "public abstract StringBuilder getStatementRemoveUselessDataCountBased(String virtualSensorName, long storageSize)", "class_method_signature": "StorageManager.getStatementRemoveUselessDataCountBased(String virtualSensorName, long storageSize)", "testcase": false, "constructor": false}, {"identifier": "getStatementRemoveUselessDataTimeBased", "parameters": "(String virtualSensorName, long storageSize)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getStatementRemoveUselessDataTimeBased(String virtualSensorName, long storageSize)", "full_signature": "public StringBuilder getStatementRemoveUselessDataTimeBased(String virtualSensorName, long storageSize)", "class_method_signature": "StorageManager.getStatementRemoveUselessDataTimeBased(String virtualSensorName, long storageSize)", "testcase": false, "constructor": false}, {"identifier": "tableToStructure", "parameters": "(CharSequence tableName, Connection connection)", "modifiers": "public", "return": "DataField[]", "signature": "DataField[] tableToStructure(CharSequence tableName, Connection connection)", "full_signature": "public DataField[] tableToStructure(CharSequence tableName, Connection connection)", "class_method_signature": "StorageManager.tableToStructure(CharSequence tableName, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "tableToStructureByString", "parameters": "(String tableName, Connection connection)", "modifiers": "public", "return": "DataField[]", "signature": "DataField[] tableToStructureByString(String tableName, Connection connection)", "full_signature": "public DataField[] tableToStructureByString(String tableName, Connection connection)", "class_method_signature": "StorageManager.tableToStructureByString(String tableName, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(CharSequence tableName, DataField[] fields, Connection connection)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(CharSequence tableName, DataField[] fields, Connection connection)", "full_signature": "public boolean tableExists(CharSequence tableName, DataField[] fields, Connection connection)", "class_method_signature": "StorageManager.tableExists(CharSequence tableName, DataField[] fields, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "tableExists", "parameters": "(CharSequence tableName, DataField[] fields)", "modifiers": "public", "return": "boolean", "signature": "boolean tableExists(CharSequence tableName, DataField[] fields)", "full_signature": "public boolean tableExists(CharSequence tableName, DataField[] fields)", "class_method_signature": "StorageManager.tableExists(CharSequence tableName, DataField[] fields)", "testcase": false, "constructor": false}, {"identifier": "isThereAnyResult", "parameters": "(StringBuilder sqlQuery)", "modifiers": "public", "return": "boolean", "signature": "boolean isThereAnyResult(StringBuilder sqlQuery)", "full_signature": "public boolean isThereAnyResult(StringBuilder sqlQuery)", "class_method_signature": "StorageManager.isThereAnyResult(StringBuilder sqlQuery)", "testcase": false, "constructor": false}, {"identifier": "getBinaryFieldByQuery", "parameters": "(StringBuilder query,\n                                           String colName, long pk, Connection connection)", "modifiers": "public", "return": "ResultSet", "signature": "ResultSet getBinaryFieldByQuery(StringBuilder query,\n                                           String colName, long pk, Connection connection)", "full_signature": "public ResultSet getBinaryFieldByQuery(StringBuilder query,\n                                           String colName, long pk, Connection connection)", "class_method_signature": "StorageManager.getBinaryFieldByQuery(StringBuilder query,\n                                           String colName, long pk, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "closeStatement", "parameters": "(Statement stmt)", "modifiers": "public", "return": "void", "signature": "void closeStatement(Statement stmt)", "full_signature": "public void closeStatement(Statement stmt)", "class_method_signature": "StorageManager.closeStatement(Statement stmt)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(ResultSet resultSet)", "modifiers": "public", "return": "void", "signature": "void close(ResultSet resultSet)", "full_signature": "public void close(ResultSet resultSet)", "class_method_signature": "StorageManager.close(ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(PreparedStatement preparedStatement)", "modifiers": "public", "return": "void", "signature": "void close(PreparedStatement preparedStatement)", "full_signature": "public void close(PreparedStatement preparedStatement)", "class_method_signature": "StorageManager.close(PreparedStatement preparedStatement)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(Connection conn)", "modifiers": "public", "return": "void", "signature": "void close(Connection conn)", "full_signature": "public void close(Connection conn)", "class_method_signature": "StorageManager.close(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "StorageManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "executeRenameTable", "parameters": "(String oldName, String newName)", "modifiers": "public", "return": "void", "signature": "void executeRenameTable(String oldName, String newName)", "full_signature": "public void executeRenameTable(String oldName, String newName)", "class_method_signature": "StorageManager.executeRenameTable(String oldName, String newName)", "testcase": false, "constructor": false}, {"identifier": "executeRenameTable", "parameters": "(String oldName, String newName, Connection connection)", "modifiers": "public", "return": "void", "signature": "void executeRenameTable(String oldName, String newName, Connection connection)", "full_signature": "public void executeRenameTable(String oldName, String newName, Connection connection)", "class_method_signature": "StorageManager.executeRenameTable(String oldName, String newName, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeDropTable", "parameters": "(CharSequence tableName)", "modifiers": "public", "return": "void", "signature": "void executeDropTable(CharSequence tableName)", "full_signature": "public void executeDropTable(CharSequence tableName)", "class_method_signature": "StorageManager.executeDropTable(CharSequence tableName)", "testcase": false, "constructor": false}, {"identifier": "executeDropTable", "parameters": "(CharSequence tableName, Connection connection)", "modifiers": "public", "return": "void", "signature": "void executeDropTable(CharSequence tableName, Connection connection)", "full_signature": "public void executeDropTable(CharSequence tableName, Connection connection)", "class_method_signature": "StorageManager.executeDropTable(CharSequence tableName, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeDropView", "parameters": "(StringBuilder tableName)", "modifiers": "public", "return": "void", "signature": "void executeDropView(StringBuilder tableName)", "full_signature": "public void executeDropView(StringBuilder tableName)", "class_method_signature": "StorageManager.executeDropView(StringBuilder tableName)", "testcase": false, "constructor": false}, {"identifier": "executeDropView", "parameters": "(StringBuilder tableName, Connection connection)", "modifiers": "public", "return": "void", "signature": "void executeDropView(StringBuilder tableName, Connection connection)", "full_signature": "public void executeDropView(StringBuilder tableName, Connection connection)", "class_method_signature": "StorageManager.executeDropView(StringBuilder tableName, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeCreateTable", "parameters": "(CharSequence tableName, DataField[] structure, boolean unique)", "modifiers": "public", "return": "void", "signature": "void executeCreateTable(CharSequence tableName, DataField[] structure, boolean unique)", "full_signature": "public void executeCreateTable(CharSequence tableName, DataField[] structure, boolean unique)", "class_method_signature": "StorageManager.executeCreateTable(CharSequence tableName, DataField[] structure, boolean unique)", "testcase": false, "constructor": false}, {"identifier": "executeCreateTable", "parameters": "(CharSequence tableName, DataField[] structure, boolean unique, Connection connection)", "modifiers": "public", "return": "void", "signature": "void executeCreateTable(CharSequence tableName, DataField[] structure, boolean unique, Connection connection)", "full_signature": "public void executeCreateTable(CharSequence tableName, DataField[] structure, boolean unique, Connection connection)", "class_method_signature": "StorageManager.executeCreateTable(CharSequence tableName, DataField[] structure, boolean unique, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeQueryWithResultSet", "parameters": "(StringBuilder query,Connection connection)", "modifiers": "public", "return": "ResultSet", "signature": "ResultSet executeQueryWithResultSet(StringBuilder query,Connection connection)", "full_signature": "public ResultSet executeQueryWithResultSet(StringBuilder query,Connection connection)", "class_method_signature": "StorageManager.executeQueryWithResultSet(StringBuilder query,Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeQueryWithResultSet", "parameters": "(AbstractQuery abstractQuery, Connection c)", "modifiers": "public", "return": "ResultSet", "signature": "ResultSet executeQueryWithResultSet(AbstractQuery abstractQuery, Connection c)", "full_signature": "public ResultSet executeQueryWithResultSet(AbstractQuery abstractQuery, Connection c)", "class_method_signature": "StorageManager.executeQueryWithResultSet(AbstractQuery abstractQuery, Connection c)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(StringBuilder query, boolean binaryFieldsLinked, Connection connection)", "modifiers": "public", "return": "DataEnumerator", "signature": "DataEnumerator executeQuery(StringBuilder query, boolean binaryFieldsLinked, Connection connection)", "full_signature": "public DataEnumerator executeQuery(StringBuilder query, boolean binaryFieldsLinked, Connection connection)", "class_method_signature": "StorageManager.executeQuery(StringBuilder query, boolean binaryFieldsLinked, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "modifiers": "public", "return": "DataEnumerator", "signature": "DataEnumerator executeQuery(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "full_signature": "public DataEnumerator executeQuery(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "class_method_signature": "StorageManager.executeQuery(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "streamedExecuteQuery", "parameters": "(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "modifiers": "public", "return": "DataEnumerator", "signature": "DataEnumerator streamedExecuteQuery(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "full_signature": "public DataEnumerator streamedExecuteQuery(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "class_method_signature": "StorageManager.streamedExecuteQuery(AbstractQuery abstractQuery, boolean binaryFieldsLinked, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(StringBuilder query, boolean binaryFieldsLinked)", "modifiers": "public", "return": "DataEnumerator", "signature": "DataEnumerator executeQuery(StringBuilder query, boolean binaryFieldsLinked)", "full_signature": "public DataEnumerator executeQuery(StringBuilder query, boolean binaryFieldsLinked)", "class_method_signature": "StorageManager.executeQuery(StringBuilder query, boolean binaryFieldsLinked)", "testcase": false, "constructor": false}, {"identifier": "streamedExecuteQuery", "parameters": "(String query, boolean binaryFieldsLinked, Connection conn)", "modifiers": "public", "return": "DataEnumerator", "signature": "DataEnumerator streamedExecuteQuery(String query, boolean binaryFieldsLinked, Connection conn)", "full_signature": "public DataEnumerator streamedExecuteQuery(String query, boolean binaryFieldsLinked, Connection conn)", "class_method_signature": "StorageManager.streamedExecuteQuery(String query, boolean binaryFieldsLinked, Connection conn)", "testcase": false, "constructor": false}, {"identifier": "streamedExecuteQuery", "parameters": "(String query, boolean binaryFieldsLinked)", "modifiers": "public", "return": "DataEnumerator", "signature": "DataEnumerator streamedExecuteQuery(String query, boolean binaryFieldsLinked)", "full_signature": "public DataEnumerator streamedExecuteQuery(String query, boolean binaryFieldsLinked)", "class_method_signature": "StorageManager.streamedExecuteQuery(String query, boolean binaryFieldsLinked)", "testcase": false, "constructor": false}, {"identifier": "executeCreateView", "parameters": "(CharSequence viewName, CharSequence selectQuery)", "modifiers": "public", "return": "void", "signature": "void executeCreateView(CharSequence viewName, CharSequence selectQuery)", "full_signature": "public void executeCreateView(CharSequence viewName, CharSequence selectQuery)", "class_method_signature": "StorageManager.executeCreateView(CharSequence viewName, CharSequence selectQuery)", "testcase": false, "constructor": false}, {"identifier": "executeCreateView", "parameters": "(CharSequence viewName, CharSequence selectQuery, Connection connection)", "modifiers": "public", "return": "void", "signature": "void executeCreateView(CharSequence viewName, CharSequence selectQuery, Connection connection)", "full_signature": "public void executeCreateView(CharSequence viewName, CharSequence selectQuery, Connection connection)", "class_method_signature": "StorageManager.executeCreateView(CharSequence viewName, CharSequence selectQuery, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "(String sql, Connection connection)", "modifiers": "public", "return": "void", "signature": "void executeCommand(String sql, Connection connection)", "full_signature": "public void executeCommand(String sql, Connection connection)", "class_method_signature": "StorageManager.executeCommand(String sql, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(String updateStatement, Connection connection)", "modifiers": "public", "return": "int", "signature": "int executeUpdate(String updateStatement, Connection connection)", "full_signature": "public int executeUpdate(String updateStatement, Connection connection)", "class_method_signature": "StorageManager.executeUpdate(String updateStatement, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(StringBuilder updateStatement, Connection connection)", "modifiers": "public", "return": "int", "signature": "int executeUpdate(StringBuilder updateStatement, Connection connection)", "full_signature": "public int executeUpdate(StringBuilder updateStatement, Connection connection)", "class_method_signature": "StorageManager.executeUpdate(StringBuilder updateStatement, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "executeUpdate", "parameters": "(StringBuilder updateStatement)", "modifiers": "public", "return": "int", "signature": "int executeUpdate(StringBuilder updateStatement)", "full_signature": "public int executeUpdate(StringBuilder updateStatement)", "class_method_signature": "StorageManager.executeUpdate(StringBuilder updateStatement)", "testcase": false, "constructor": false}, {"identifier": "executeInsert", "parameters": "(CharSequence tableName, DataField[] fields, StreamElement se)", "modifiers": "public", "return": "void", "signature": "void executeInsert(CharSequence tableName, DataField[] fields, StreamElement se)", "full_signature": "public void executeInsert(CharSequence tableName, DataField[] fields, StreamElement se)", "class_method_signature": "StorageManager.executeInsert(CharSequence tableName, DataField[] fields, StreamElement se)", "testcase": false, "constructor": false}, {"identifier": "executeInsert", "parameters": "(CharSequence tableName, DataField[] fields, StreamElement streamElement, Connection connection)", "modifiers": "public", "return": "void", "signature": "void executeInsert(CharSequence tableName, DataField[] fields, StreamElement streamElement, Connection connection)", "full_signature": "public void executeInsert(CharSequence tableName, DataField[] fields, StreamElement streamElement, Connection connection)", "class_method_signature": "StorageManager.executeInsert(CharSequence tableName, DataField[] fields, StreamElement streamElement, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getStatementInsert", "parameters": "(CharSequence tableName, DataField fields[])", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getStatementInsert(CharSequence tableName, DataField fields[])", "full_signature": "public StringBuilder getStatementInsert(CharSequence tableName, DataField fields[])", "class_method_signature": "StorageManager.getStatementInsert(CharSequence tableName, DataField fields[])", "testcase": false, "constructor": false}, {"identifier": "getStatementRenameTable", "parameters": "(String oldName, String newName)", "modifiers": "public", "return": "String", "signature": "String getStatementRenameTable(String oldName, String newName)", "full_signature": "public String getStatementRenameTable(String oldName, String newName)", "class_method_signature": "StorageManager.getStatementRenameTable(String oldName, String newName)", "testcase": false, "constructor": false}, {"identifier": "getStatementDropTable", "parameters": "(CharSequence tableName, Connection conn)", "modifiers": "public abstract", "return": "StringBuilder", "signature": "StringBuilder getStatementDropTable(CharSequence tableName, Connection conn)", "full_signature": "public abstract StringBuilder getStatementDropTable(CharSequence tableName, Connection conn)", "class_method_signature": "StorageManager.getStatementDropTable(CharSequence tableName, Connection conn)", "testcase": false, "constructor": false}, {"identifier": "getStatementDropIndex", "parameters": "(CharSequence indexName, CharSequence tableName,Connection connection)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getStatementDropIndex(CharSequence indexName, CharSequence tableName,Connection connection)", "full_signature": "public StringBuilder getStatementDropIndex(CharSequence indexName, CharSequence tableName,Connection connection)", "class_method_signature": "StorageManager.getStatementDropIndex(CharSequence indexName, CharSequence tableName,Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getStatementDropView", "parameters": "(CharSequence viewName,Connection connection)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getStatementDropView(CharSequence viewName,Connection connection)", "full_signature": "public StringBuilder getStatementDropView(CharSequence viewName,Connection connection)", "class_method_signature": "StorageManager.getStatementDropView(CharSequence viewName,Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getStatementCreateIndexOnTimed", "parameters": "(\n            CharSequence tableName, boolean unique)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getStatementCreateIndexOnTimed(\n            CharSequence tableName, boolean unique)", "full_signature": "public StringBuilder getStatementCreateIndexOnTimed(\n            CharSequence tableName, boolean unique)", "class_method_signature": "StorageManager.getStatementCreateIndexOnTimed(\n            CharSequence tableName, boolean unique)", "testcase": false, "constructor": false}, {"identifier": "getStatementCreateTable", "parameters": "(CharSequence tableName, DataField[] structure, Connection connection)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getStatementCreateTable(CharSequence tableName, DataField[] structure, Connection connection)", "full_signature": "public StringBuilder getStatementCreateTable(CharSequence tableName, DataField[] structure, Connection connection)", "class_method_signature": "StorageManager.getStatementCreateTable(CharSequence tableName, DataField[] structure, Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getStatementCreateTable", "parameters": "(String tableName, DataField[] structure)", "modifiers": "public abstract", "return": "StringBuilder", "signature": "StringBuilder getStatementCreateTable(String tableName, DataField[] structure)", "full_signature": "public abstract StringBuilder getStatementCreateTable(String tableName, DataField[] structure)", "class_method_signature": "StorageManager.getStatementCreateTable(String tableName, DataField[] structure)", "testcase": false, "constructor": false}, {"identifier": "getStatementCreateView", "parameters": "(CharSequence viewName,CharSequence selectQuery)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getStatementCreateView(CharSequence viewName,CharSequence selectQuery)", "full_signature": "public StringBuilder getStatementCreateView(CharSequence viewName,CharSequence selectQuery)", "class_method_signature": "StorageManager.getStatementCreateView(CharSequence viewName,CharSequence selectQuery)", "testcase": false, "constructor": false}, {"identifier": "getJDBCPrefix", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getJDBCPrefix()", "full_signature": "public abstract String getJDBCPrefix()", "class_method_signature": "StorageManager.getJDBCPrefix()", "testcase": false, "constructor": false}, {"identifier": "getJDBCDriverClass", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getJDBCDriverClass()", "full_signature": "public String getJDBCDriverClass()", "class_method_signature": "StorageManager.getJDBCDriverClass()", "testcase": false, "constructor": false}, {"identifier": "convertGSNTypeToLocalType", "parameters": "(DataField gsnType)", "modifiers": "public abstract", "return": "String", "signature": "String convertGSNTypeToLocalType(DataField gsnType)", "full_signature": "public abstract String convertGSNTypeToLocalType(DataField gsnType)", "class_method_signature": "StorageManager.convertGSNTypeToLocalType(DataField gsnType)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "public Connection getConnection()", "class_method_signature": "StorageManager.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getTimeDifferenceInMillis", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTimeDifferenceInMillis()", "full_signature": "public long getTimeDifferenceInMillis()", "class_method_signature": "StorageManager.getTimeDifferenceInMillis()", "testcase": false, "constructor": false}, {"identifier": "getStatementDifferenceTimeInMillis", "parameters": "()", "modifiers": "public abstract", "return": "String", "signature": "String getStatementDifferenceTimeInMillis()", "full_signature": "public abstract String getStatementDifferenceTimeInMillis()", "class_method_signature": "StorageManager.getStatementDifferenceTimeInMillis()", "testcase": false, "constructor": false}, {"identifier": "getInternalTables", "parameters": "()", "modifiers": "public", "return": "ArrayList<String>", "signature": "ArrayList<String> getInternalTables()", "full_signature": "public ArrayList<String> getInternalTables()", "class_method_signature": "StorageManager.getInternalTables()", "testcase": false, "constructor": false}, {"identifier": "randomTableNameGenerator", "parameters": "( int length )", "modifiers": "public", "return": "String", "signature": "String randomTableNameGenerator( int length )", "full_signature": "public String randomTableNameGenerator( int length )", "class_method_signature": "StorageManager.randomTableNameGenerator( int length )", "testcase": false, "constructor": false}, {"identifier": "tableNameGenerator", "parameters": "( )", "modifiers": "public", "return": "int", "signature": "int tableNameGenerator( )", "full_signature": "public int tableNameGenerator( )", "class_method_signature": "StorageManager.tableNameGenerator( )", "testcase": false, "constructor": false}, {"identifier": "tableNameGeneratorInString", "parameters": "(CharSequence tableName)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder tableNameGeneratorInString(CharSequence tableName)", "full_signature": "public StringBuilder tableNameGeneratorInString(CharSequence tableName)", "class_method_signature": "StorageManager.tableNameGeneratorInString(CharSequence tableName)", "testcase": false, "constructor": false}, {"identifier": "tableNameGeneratorInString", "parameters": "(int code)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder tableNameGeneratorInString(int code)", "full_signature": "public StringBuilder tableNameGeneratorInString(int code)", "class_method_signature": "StorageManager.tableNameGeneratorInString(int code)", "testcase": false, "constructor": false}, {"identifier": "tableNamePostFixAppender", "parameters": "(CharSequence table_name,String postFix)", "modifiers": "public", "return": "String", "signature": "String tableNamePostFixAppender(CharSequence table_name,String postFix)", "full_signature": "public String tableNamePostFixAppender(CharSequence table_name,String postFix)", "class_method_signature": "StorageManager.tableNamePostFixAppender(CharSequence table_name,String postFix)", "testcase": false, "constructor": false}, {"identifier": "isOracle", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOracle()", "full_signature": "public boolean isOracle()", "class_method_signature": "StorageManager.isOracle()", "testcase": false, "constructor": false}, {"identifier": "isH2", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isH2()", "full_signature": "public boolean isH2()", "class_method_signature": "StorageManager.isH2()", "testcase": false, "constructor": false}, {"identifier": "isSqlServer", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSqlServer()", "full_signature": "public boolean isSqlServer()", "class_method_signature": "StorageManager.isSqlServer()", "testcase": false, "constructor": false}, {"identifier": "isMysqlDB", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMysqlDB()", "full_signature": "public boolean isMysqlDB()", "class_method_signature": "StorageManager.isMysqlDB()", "testcase": false, "constructor": false}, {"identifier": "isPostgres", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPostgres()", "full_signature": "public boolean isPostgres()", "class_method_signature": "StorageManager.isPostgres()", "testcase": false, "constructor": false}], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/storage/StorageManager.java"}, "focal_method": {"identifier": "addLimit", "parameters": "(String query, int limit, int offset)", "modifiers": "public abstract", "return": "String", "body": "public abstract String addLimit(String query, int limit, int offset);", "signature": "String addLimit(String query, int limit, int offset)", "full_signature": "public abstract String addLimit(String query, int limit, int offset)", "class_method_signature": "StorageManager.addLimit(String query, int limit, int offset)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9221446, "url": "https://github.com/OpenIotOrg/openiot", "language": "Java", "is_fork": false, "fork_count": 201, "stargazer_count": 417, "size": 101270, "license": "licensed"}}