{"test_class": {"identifier": "SimpleProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "SimpleProvider<Runnable> simpleProvider;", "modifier": "", "type": "SimpleProvider<Runnable>", "declarator": "simpleProvider", "var_name": "simpleProvider"}, {"original_string": "Class<Runnable> type = Runnable.class;", "modifier": "", "type": "Class<Runnable>", "declarator": "type = Runnable.class", "var_name": "type"}, {"original_string": "@Mock\n    ClassInjector instancer;", "modifier": "@Mock", "type": "ClassInjector", "declarator": "instancer", "var_name": "instancer"}, {"original_string": "@Mock\n    Map<String, Class<? extends Runnable>[]> inheritanceTree;", "modifier": "@Mock", "type": "Map<String, Class<? extends Runnable>[]>", "declarator": "inheritanceTree", "var_name": "inheritanceTree"}, {"original_string": "@Mock\n    Annotation qualifier;", "modifier": "@Mock", "type": "Annotation", "declarator": "qualifier", "var_name": "qualifier"}, {"original_string": "@Mock\n    ClassLoader classLoader;", "modifier": "@Mock", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}], "file": "core/src/test/java/com/github/jsr330/instance/SimpleProviderTest.java"}, "test_case": {"identifier": "get", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void get() {\n        simpleProvider.get();\n        verify(instancer).instance(same(type), same(inheritanceTree), same(classLoader), (Class<?>[]) eq(null), same(qualifier));\n    }", "signature": "void get()", "full_signature": "@Test public void get()", "class_method_signature": "SimpleProviderTest.get()", "testcase": true, "constructor": false, "invocations": ["get", "instance", "verify", "same", "same", "same", "eq", "same"]}, "focal_class": {"identifier": "SimpleProvider", "superclass": "", "interfaces": "implements Provider<T>", "fields": [{"original_string": "protected Class<T> type;", "modifier": "protected", "type": "Class<T>", "declarator": "type", "var_name": "type"}, {"original_string": "protected ClassInjector instancer;", "modifier": "protected", "type": "ClassInjector", "declarator": "instancer", "var_name": "instancer"}, {"original_string": "protected Map<String, Class<? extends T>[]> inheritanceTree;", "modifier": "protected", "type": "Map<String, Class<? extends T>[]>", "declarator": "inheritanceTree", "var_name": "inheritanceTree"}, {"original_string": "protected ClassLoader classLoader;", "modifier": "protected", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "protected Annotation qualifier;", "modifier": "protected", "type": "Annotation", "declarator": "qualifier", "var_name": "qualifier"}], "methods": [{"identifier": "SimpleProvider", "parameters": "(Class<T> type, ClassInjector instancer, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " SimpleProvider(Class<T> type, ClassInjector instancer, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "full_signature": "public  SimpleProvider(Class<T> type, ClassInjector instancer, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "class_method_signature": "SimpleProvider.SimpleProvider(Class<T> type, ClassInjector instancer, Map<String, Class<? extends T>[]> inheritanceTree, Annotation qualifier,\n            ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T get()", "full_signature": "@Override public T get()", "class_method_signature": "SimpleProvider.get()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/jsr330/instance/SimpleProvider.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T get() {\n        return instancer.instance(type, inheritanceTree, classLoader, null, qualifier);\n    }", "signature": "T get()", "full_signature": "@Override public T get()", "class_method_signature": "SimpleProvider.get()", "testcase": false, "constructor": false, "invocations": ["instance"]}, "repository": {"repo_id": 4654729, "url": "https://github.com/rstiller/JSR-330", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 10, "size": 747, "license": "licensed"}}