{"test_class": {"identifier": "InMemoryTimeoutManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final HeaderName<String> DEFAULT_HEADER = HeaderName.forName(\"defaultHeaderName\");", "modifier": "private static final", "type": "HeaderName<String>", "declarator": "DEFAULT_HEADER = HeaderName.forName(\"defaultHeaderName\")", "var_name": "DEFAULT_HEADER"}, {"original_string": "private static final String DEFAULT_HEADER_VALUE = \"ContextHeaderValue\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_HEADER_VALUE = \"ContextHeaderValue\"", "var_name": "DEFAULT_HEADER_VALUE"}, {"original_string": "private InMemoryTimeoutManager sut;", "modifier": "private", "type": "InMemoryTimeoutManager", "declarator": "sut", "var_name": "sut"}, {"original_string": "private ScheduledExecutorService executor;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/timeout/InMemoryTimeoutManagerTest.java"}, "test_case": {"identifier": "timeoutTriggered_callbackAdded_callbackTriggered", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void timeoutTriggered_callbackAdded_callbackTriggered() {\n        // given\n        int delayInSec = 5;\n        Object expectedData = new Object();\n        Date expectedTimeoutIn = new Date(clock.now().getTime() + TimeUnit.SECONDS.toMillis(delayInSec));\n        TimeoutExpired expiredCallback = mock(TimeoutExpired.class);\n        sut.addExpiredCallback(expiredCallback);\n        Timeout expected = Timeout.create(UUIDTimeoutId.generateNewId(), \"theSagaId\", \"theTimeoutName\", expectedTimeoutIn, expectedData);\n\n        // when\n        requestAndTriggerTimeout(expected.getSagaId(), expected.getName(), delayInSec, TimeUnit.SECONDS, expectedData);\n\n        // then\n        ArgumentCaptor<Timeout> captor = ArgumentCaptor.forClass(Timeout.class);\n        verify(expiredCallback).expired(captor.capture());\n\n        assertThat(\"Saga id does not match.\", captor.getValue().getSagaId(), equalTo(expected.getSagaId()));\n        assertThat(\"Timeout name does not match.\", captor.getValue().getName(), equalTo(expected.getName()));\n        assertThat(\"Expiration time stamp does not match.\", captor.getValue().getExpiredAt(), equalTo(expected.getExpiredAt()));\n        assertThat(\"Data object does not match.\", captor.getValue().getData(), sameInstance(expectedData));\n    }", "signature": "void timeoutTriggered_callbackAdded_callbackTriggered()", "full_signature": "@Test public void timeoutTriggered_callbackAdded_callbackTriggered()", "class_method_signature": "InMemoryTimeoutManagerTest.timeoutTriggered_callbackAdded_callbackTriggered()", "testcase": true, "constructor": false, "invocations": ["getTime", "now", "toMillis", "mock", "addExpiredCallback", "create", "generateNewId", "requestAndTriggerTimeout", "getSagaId", "getName", "forClass", "expired", "verify", "capture", "assertThat", "getSagaId", "getValue", "equalTo", "getSagaId", "assertThat", "getName", "getValue", "equalTo", "getName", "assertThat", "getExpiredAt", "getValue", "equalTo", "getExpiredAt", "assertThat", "getData", "getValue", "sameInstance"]}, "focal_class": {"identifier": "InMemoryTimeoutManager", "superclass": "", "interfaces": "implements TimeoutManager, AutoCloseable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(InMemoryTimeoutManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(InMemoryTimeoutManager.class)", "var_name": "LOG"}, {"original_string": "private static final int TIMER_THREAD_POOL_SIZE = 2;", "modifier": "private static final", "type": "int", "declarator": "TIMER_THREAD_POOL_SIZE = 2", "var_name": "TIMER_THREAD_POOL_SIZE"}, {"original_string": "private final Object sync = new Object();", "modifier": "private final", "type": "Object", "declarator": "sync = new Object()", "var_name": "sync"}, {"original_string": "private final Collection<TimeoutExpired> callbacks = Collections.synchronizedCollection(new ArrayList<>());", "modifier": "private final", "type": "Collection<TimeoutExpired>", "declarator": "callbacks = Collections.synchronizedCollection(new ArrayList<>())", "var_name": "callbacks"}, {"original_string": "private final Table<TimeoutId, String, ScheduledFuture> openTimeouts = HashBasedTable.create();", "modifier": "private final", "type": "Table<TimeoutId, String, ScheduledFuture>", "declarator": "openTimeouts = HashBasedTable.create()", "var_name": "openTimeouts"}, {"original_string": "private final ScheduledExecutorService scheduledService;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduledService", "var_name": "scheduledService"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "InMemoryTimeoutManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " InMemoryTimeoutManager()", "full_signature": "public  InMemoryTimeoutManager()", "class_method_signature": "InMemoryTimeoutManager.InMemoryTimeoutManager()", "testcase": false, "constructor": true}, {"identifier": "InMemoryTimeoutManager", "parameters": "(final int timerThreadPoolSize)", "modifiers": "public", "return": "", "signature": " InMemoryTimeoutManager(final int timerThreadPoolSize)", "full_signature": "public  InMemoryTimeoutManager(final int timerThreadPoolSize)", "class_method_signature": "InMemoryTimeoutManager.InMemoryTimeoutManager(final int timerThreadPoolSize)", "testcase": false, "constructor": true}, {"identifier": "InMemoryTimeoutManager", "parameters": "(final ScheduledExecutorService scheduledService, final Clock clock)", "modifiers": "public", "return": "", "signature": " InMemoryTimeoutManager(final ScheduledExecutorService scheduledService, final Clock clock)", "full_signature": "public  InMemoryTimeoutManager(final ScheduledExecutorService scheduledService, final Clock clock)", "class_method_signature": "InMemoryTimeoutManager.InMemoryTimeoutManager(final ScheduledExecutorService scheduledService, final Clock clock)", "testcase": false, "constructor": true}, {"identifier": "addExpiredCallback", "parameters": "(final TimeoutExpired callback)", "modifiers": "@Override public", "return": "void", "signature": "void addExpiredCallback(final TimeoutExpired callback)", "full_signature": "@Override public void addExpiredCallback(final TimeoutExpired callback)", "class_method_signature": "InMemoryTimeoutManager.addExpiredCallback(final TimeoutExpired callback)", "testcase": false, "constructor": false}, {"identifier": "requestTimeout", "parameters": "(final ExecutionContext context, final String sagaId, final long delay, final TimeUnit timeUnit, @Nullable final String name,\n                               @Nullable final Object data)", "modifiers": "@Override public", "return": "TimeoutId", "signature": "TimeoutId requestTimeout(final ExecutionContext context, final String sagaId, final long delay, final TimeUnit timeUnit, @Nullable final String name,\n                               @Nullable final Object data)", "full_signature": "@Override public TimeoutId requestTimeout(final ExecutionContext context, final String sagaId, final long delay, final TimeUnit timeUnit, @Nullable final String name,\n                               @Nullable final Object data)", "class_method_signature": "InMemoryTimeoutManager.requestTimeout(final ExecutionContext context, final String sagaId, final long delay, final TimeUnit timeUnit, @Nullable final String name,\n                               @Nullable final Object data)", "testcase": false, "constructor": false}, {"identifier": "cancelTimeouts", "parameters": "(final String sagaId)", "modifiers": "@Override public", "return": "void", "signature": "void cancelTimeouts(final String sagaId)", "full_signature": "@Override public void cancelTimeouts(final String sagaId)", "class_method_signature": "InMemoryTimeoutManager.cancelTimeouts(final String sagaId)", "testcase": false, "constructor": false}, {"identifier": "cancelTimeout", "parameters": "(final TimeoutId id)", "modifiers": "@Override public", "return": "void", "signature": "void cancelTimeout(final TimeoutId id)", "full_signature": "@Override public void cancelTimeout(final TimeoutId id)", "class_method_signature": "InMemoryTimeoutManager.cancelTimeout(final TimeoutId id)", "testcase": false, "constructor": false}, {"identifier": "timeoutExpired", "parameters": "(final Timeout timeout, final TimeoutContext context)", "modifiers": "private", "return": "void", "signature": "void timeoutExpired(final Timeout timeout, final TimeoutContext context)", "full_signature": "private void timeoutExpired(final Timeout timeout, final TimeoutContext context)", "class_method_signature": "InMemoryTimeoutManager.timeoutExpired(final Timeout timeout, final TimeoutContext context)", "testcase": false, "constructor": false}, {"identifier": "removeExpiredTimeout", "parameters": "(final Timeout timeout)", "modifiers": "private", "return": "void", "signature": "void removeExpiredTimeout(final Timeout timeout)", "full_signature": "private void removeExpiredTimeout(final Timeout timeout)", "class_method_signature": "InMemoryTimeoutManager.removeExpiredTimeout(final Timeout timeout)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "InMemoryTimeoutManager.close()", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/timeout/InMemoryTimeoutManager.java"}, "focal_method": {"identifier": "addExpiredCallback", "parameters": "(final TimeoutExpired callback)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addExpiredCallback(final TimeoutExpired callback) {\n        checkNotNull(callback, \"Expired callback not allowed to be null.\");\n\n        callbacks.add(callback);\n    }", "signature": "void addExpiredCallback(final TimeoutExpired callback)", "full_signature": "@Override public void addExpiredCallback(final TimeoutExpired callback)", "class_method_signature": "InMemoryTimeoutManager.addExpiredCallback(final TimeoutExpired callback)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "add"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}