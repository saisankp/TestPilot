{"test_class": {"identifier": "WeakTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String VALUE = \"test\";", "modifier": "static final", "type": "String", "declarator": "VALUE = \"test\"", "var_name": "VALUE"}, {"original_string": "static final Weak<String> WEAK = Weak.of(VALUE);", "modifier": "static final", "type": "Weak<String>", "declarator": "WEAK = Weak.of(VALUE)", "var_name": "WEAK"}], "file": "commons/src/test/java/com/karuslabs/commons/util/WeakTest.java"}, "test_case": {"identifier": "hash", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void hash() {\n        assertEquals(VALUE.hashCode(), Weak.of(\"test\").hashCode());\n    }", "signature": "void hash()", "full_signature": "@Test void hash()", "class_method_signature": "WeakTest.hash()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "hashCode", "hashCode", "of"]}, "focal_class": {"identifier": "WeakValue", "superclass": "extends WeakReference<T>", "interfaces": "implements Weak<T>", "fields": [{"original_string": "static final Weak<?> EMPTY = new WeakValue<>(null);", "modifier": "static final", "type": "Weak<?>", "declarator": "EMPTY = new WeakValue<>(null)", "var_name": "EMPTY"}], "methods": [{"identifier": "WeakValue", "parameters": "(T referent)", "modifiers": "", "return": "", "signature": " WeakValue(T referent)", "full_signature": "  WeakValue(T referent)", "class_method_signature": "WeakValue.WeakValue(T referent)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(Predicate<? super T> predicate)", "modifiers": "@Override public", "return": "Weak<T>", "signature": "Weak<T> filter(Predicate<? super T> predicate)", "full_signature": "@Override public Weak<T> filter(Predicate<? super T> predicate)", "class_method_signature": "WeakValue.filter(Predicate<? super T> predicate)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(Function<? super T, ? extends Weak<? extends U>> mapper)", "modifiers": "@Override public", "return": "Weak<U>", "signature": "Weak<U> flatMap(Function<? super T, ? extends Weak<? extends U>> mapper)", "full_signature": "@Override public Weak<U> flatMap(Function<? super T, ? extends Weak<? extends U>> mapper)", "class_method_signature": "WeakValue.flatMap(Function<? super T, ? extends Weak<? extends U>> mapper)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Function<? super T, ? extends U> mapper)", "modifiers": "@Override public", "return": "Weak<U>", "signature": "Weak<U> map(Function<? super T, ? extends U> mapper)", "full_signature": "@Override public Weak<U> map(Function<? super T, ? extends U> mapper)", "class_method_signature": "WeakValue.map(Function<? super T, ? extends U> mapper)", "testcase": false, "constructor": false}, {"identifier": "orElse", "parameters": "(Supplier<? extends Weak<? extends T>> other)", "modifiers": "@Override public", "return": "Weak<T>", "signature": "Weak<T> orElse(Supplier<? extends Weak<? extends T>> other)", "full_signature": "@Override public Weak<T> orElse(Supplier<? extends Weak<? extends T>> other)", "class_method_signature": "WeakValue.orElse(Supplier<? extends Weak<? extends T>> other)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(T other)", "modifiers": "@Override public", "return": "T", "signature": "T or(T other)", "full_signature": "@Override public T or(T other)", "class_method_signature": "WeakValue.or(T other)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Supplier<T> other)", "modifiers": "@Override public", "return": "T", "signature": "T or(Supplier<T> other)", "full_signature": "@Override public T or(Supplier<T> other)", "class_method_signature": "WeakValue.or(Supplier<T> other)", "testcase": false, "constructor": false}, {"identifier": "orThrow", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T orThrow()", "full_signature": "@Override public T orThrow()", "class_method_signature": "WeakValue.orThrow()", "testcase": false, "constructor": false}, {"identifier": "orThrow", "parameters": "(Supplier<? extends E> exception)", "modifiers": "@Override public", "return": "T", "signature": "T orThrow(Supplier<? extends E> exception)", "full_signature": "@Override public T orThrow(Supplier<? extends E> exception)", "class_method_signature": "WeakValue.orThrow(Supplier<? extends E> exception)", "testcase": false, "constructor": false}, {"identifier": "ifPresent", "parameters": "(Consumer<? super T> action)", "modifiers": "@Override public", "return": "void", "signature": "void ifPresent(Consumer<? super T> action)", "full_signature": "@Override public void ifPresent(Consumer<? super T> action)", "class_method_signature": "WeakValue.ifPresent(Consumer<? super T> action)", "testcase": false, "constructor": false}, {"identifier": "ifPresent", "parameters": "(Consumer<? super T> action, Runnable otherwise)", "modifiers": "@Override public", "return": "void", "signature": "void ifPresent(Consumer<? super T> action, Runnable otherwise)", "full_signature": "@Override public void ifPresent(Consumer<? super T> action, Runnable otherwise)", "class_method_signature": "WeakValue.ifPresent(Consumer<? super T> action, Runnable otherwise)", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPresent()", "full_signature": "@Override public boolean isPresent()", "class_method_signature": "WeakValue.isPresent()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<T>", "signature": "Stream<T> stream()", "full_signature": "@Override public Stream<T> stream()", "class_method_signature": "WeakValue.stream()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "WeakValue.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WeakValue.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WeakValue.toString()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/util/Weak.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return Objects.hashCode(get());\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WeakValue.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "get"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}