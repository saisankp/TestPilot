{"test_class": {"identifier": "ActivitiHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/activiti/ActivitiHelperTest.java"}, "test_case": {"identifier": "testGetExpressionVariableAsBooleanRequiredBlankValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetExpressionVariableAsBooleanRequiredBlankValue()\n    {\n        // Mock dependencies.\n        Expression expression = mock(Expression.class);\n        DelegateExecution execution = mock(DelegateExecution.class);\n        when(expression.getValue(execution)).thenReturn(BLANK_TEXT);\n\n        // Try to call the method under test.\n        try\n        {\n            activitiHelper.getExpressionVariableAsBoolean(expression, execution, VARIABLE_NAME, VARIABLE_REQUIRED, NO_BOOLEAN_DEFAULT_VALUE);\n            fail();\n        }\n        catch (IllegalArgumentException e)\n        {\n            assertEquals(String.format(\"\\\"%s\\\" must be specified.\", VARIABLE_NAME), e.getMessage());\n        }\n    }", "signature": "void testGetExpressionVariableAsBooleanRequiredBlankValue()", "full_signature": "@Test public void testGetExpressionVariableAsBooleanRequiredBlankValue()", "class_method_signature": "ActivitiHelperTest.testGetExpressionVariableAsBooleanRequiredBlankValue()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getValue", "getExpressionVariableAsBoolean", "fail", "assertEquals", "format", "getMessage"]}, "focal_class": {"identifier": "ActivitiHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getProcessIdentifyingInformation", "parameters": "(DelegateExecution execution)", "modifiers": "public", "return": "String", "signature": "String getProcessIdentifyingInformation(DelegateExecution execution)", "full_signature": "public String getProcessIdentifyingInformation(DelegateExecution execution)", "class_method_signature": "ActivitiHelper.getProcessIdentifyingInformation(DelegateExecution execution)", "testcase": false, "constructor": false}, {"identifier": "getExpressionVariable", "parameters": "(Expression expression, DelegateExecution execution)", "modifiers": "public", "return": "Object", "signature": "Object getExpressionVariable(Expression expression, DelegateExecution execution)", "full_signature": "public Object getExpressionVariable(Expression expression, DelegateExecution execution)", "class_method_signature": "ActivitiHelper.getExpressionVariable(Expression expression, DelegateExecution execution)", "testcase": false, "constructor": false}, {"identifier": "getExpressionVariableAsString", "parameters": "(Expression expression, DelegateExecution execution)", "modifiers": "public", "return": "String", "signature": "String getExpressionVariableAsString(Expression expression, DelegateExecution execution)", "full_signature": "public String getExpressionVariableAsString(Expression expression, DelegateExecution execution)", "class_method_signature": "ActivitiHelper.getExpressionVariableAsString(Expression expression, DelegateExecution execution)", "testcase": false, "constructor": false}, {"identifier": "getRequiredExpressionVariableAsString", "parameters": "(Expression expression, DelegateExecution execution, String variableName)", "modifiers": "public", "return": "String", "signature": "String getRequiredExpressionVariableAsString(Expression expression, DelegateExecution execution, String variableName)", "full_signature": "public String getRequiredExpressionVariableAsString(Expression expression, DelegateExecution execution, String variableName)", "class_method_signature": "ActivitiHelper.getRequiredExpressionVariableAsString(Expression expression, DelegateExecution execution, String variableName)", "testcase": false, "constructor": false}, {"identifier": "getExpressionVariableAsInteger", "parameters": "(Expression expression, DelegateExecution execution, String variableName, boolean isRequired)", "modifiers": "public", "return": "Integer", "signature": "Integer getExpressionVariableAsInteger(Expression expression, DelegateExecution execution, String variableName, boolean isRequired)", "full_signature": "public Integer getExpressionVariableAsInteger(Expression expression, DelegateExecution execution, String variableName, boolean isRequired)", "class_method_signature": "ActivitiHelper.getExpressionVariableAsInteger(Expression expression, DelegateExecution execution, String variableName, boolean isRequired)", "testcase": false, "constructor": false}, {"identifier": "getExpressionVariableAsBoolean", "parameters": "(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "modifiers": "public", "return": "Boolean", "signature": "Boolean getExpressionVariableAsBoolean(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "full_signature": "public Boolean getExpressionVariableAsBoolean(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "class_method_signature": "ActivitiHelper.getExpressionVariableAsBoolean(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "constructBpmnModelFromXmlAndValidate", "parameters": "(String xmlString)", "modifiers": "public", "return": "BpmnModel", "signature": "BpmnModel constructBpmnModelFromXmlAndValidate(String xmlString)", "full_signature": "public BpmnModel constructBpmnModelFromXmlAndValidate(String xmlString)", "class_method_signature": "ActivitiHelper.constructBpmnModelFromXmlAndValidate(String xmlString)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/activiti/ActivitiHelper.java"}, "focal_method": {"identifier": "getExpressionVariableAsBoolean", "parameters": "(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "modifiers": "public", "return": "Boolean", "body": "public Boolean getExpressionVariableAsBoolean(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue) throws IllegalArgumentException\n    {\n        Boolean variableBoolean = defaultValue;\n        String variableString = getExpressionVariableAsString(expression, execution);\n\n        if (isRequired && StringUtils.isBlank(variableString))\n        {\n            throw new IllegalArgumentException(\"\\\"\" + variableName + \"\\\" must be specified.\");\n        }\n\n        if (isRequired || StringUtils.isNotBlank(variableString))\n        {\n            String variableStringTrimmed = variableString.trim();\n            if (variableStringTrimmed.equalsIgnoreCase(Boolean.TRUE.toString()) || variableStringTrimmed.equalsIgnoreCase(Boolean.FALSE.toString()))\n            {\n                variableBoolean = Boolean.valueOf(variableStringTrimmed);\n            }\n            else\n            {\n                throw new IllegalArgumentException(\"\\\"\" + variableName + \"\\\" must be a valid boolean value of \\\"true\\\" or \\\"false\\\".\");\n            }\n        }\n\n        return variableBoolean;\n    }", "signature": "Boolean getExpressionVariableAsBoolean(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "full_signature": "public Boolean getExpressionVariableAsBoolean(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "class_method_signature": "ActivitiHelper.getExpressionVariableAsBoolean(Expression expression, DelegateExecution execution, String variableName, boolean isRequired,\n        Boolean defaultValue)", "testcase": false, "constructor": false, "invocations": ["getExpressionVariableAsString", "isBlank", "isNotBlank", "trim", "equalsIgnoreCase", "toString", "equalsIgnoreCase", "toString", "valueOf"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}