{"test_class": {"identifier": "IncrementalWindowSumTest", "superclass": "", "interfaces": "", "fields": [], "file": "contrib/src/test/java/macrobase/analysis/transform/aggregate/IncrementalWindowSumTest.java"}, "test_case": {"identifier": "testWindowUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWindowUpdate() throws Exception {\n        List<Datum> data = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            Datum d = TestUtils.createTimeDatum(i, i);\n            data.add(d);\n        }\n\n        MacroBaseConf conf = new MacroBaseConf().set(MacroBaseConf.TIME_COLUMN, 0);\n        conf.set(AggregateConf.AGGREGATE_TYPE, AggregateConf.AggregateType.SUM);\n        IncrementalWindowSum windowSum = new IncrementalWindowSum(conf);\n        // First window\n        Datum sum = windowSum.updateWindow(data.subList(0, 10), new ArrayList<>());\n        assert(sum.metrics().getEntry(1) == 45);\n        // Update window\n        sum = windowSum.updateWindow(data.subList(10, 11), data.subList(0, 1));\n        assert(sum.metrics().getEntry(1) == 55);\n        sum = windowSum.updateWindow(data.subList(11, 20), data.subList(1, 5));\n        assert(sum.metrics().getEntry(1) == 180);\n        sum = windowSum.updateWindow(new ArrayList<>(), data.subList(5, 10));\n        assert(sum.metrics().getEntry(1) == 145);\n    }", "signature": "void testWindowUpdate()", "full_signature": "@Test public void testWindowUpdate()", "class_method_signature": "IncrementalWindowSumTest.testWindowUpdate()", "testcase": true, "constructor": false, "invocations": ["createTimeDatum", "add", "set", "set", "updateWindow", "subList", "getEntry", "metrics", "updateWindow", "subList", "subList", "getEntry", "metrics", "updateWindow", "subList", "subList", "getEntry", "metrics", "updateWindow", "subList", "getEntry", "metrics"]}, "focal_class": {"identifier": "IncrementalWindowSum", "superclass": "extends IncrementalWindowAggregate", "interfaces": "", "fields": [], "methods": [{"identifier": "IncrementalWindowSum", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " IncrementalWindowSum(MacroBaseConf conf)", "full_signature": "public  IncrementalWindowSum(MacroBaseConf conf)", "class_method_signature": "IncrementalWindowSum.IncrementalWindowSum(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "updateWindow", "parameters": "(List<Datum> new_data, List<Datum> old_data)", "modifiers": "public", "return": "Datum", "signature": "Datum updateWindow(List<Datum> new_data, List<Datum> old_data)", "full_signature": "public Datum updateWindow(List<Datum> new_data, List<Datum> old_data)", "class_method_signature": "IncrementalWindowSum.updateWindow(List<Datum> new_data, List<Datum> old_data)", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/transform/aggregate/IncrementalWindowSum.java"}, "focal_method": {"identifier": "updateWindow", "parameters": "(List<Datum> new_data, List<Datum> old_data)", "modifiers": "public", "return": "Datum", "body": "public Datum updateWindow(List<Datum> new_data, List<Datum> old_data) {\n        if (new_data.isEmpty() && old_data.isEmpty())\n            return currWindow;\n\n        RealVector results;\n        if (currWindow != null) {\n            results = new ArrayRealVector(currWindow.metrics());\n        } else {\n            dim = new_data.get(0).metrics().getDimension();\n            results = new ArrayRealVector(dim);\n        }\n       // Add new data\n        for (Datum d : new_data) {\n            RealVector metrics = d.metrics();\n            for (int i = 0; i < dim; i ++) {\n                if (timeColumn != null && i == timeColumn)\n                    continue;\n                results.setEntry(i, results.getEntry(i) + metrics.getEntry(i));\n            }\n        }\n        // Remove old data\n        for (Datum d : old_data) {\n            RealVector metrics = d.metrics();\n            for (int i = 0; i < dim; i ++) {\n                if (timeColumn != null && i == timeColumn)\n                    continue;\n                results.setEntry(i, results.getEntry(i) - metrics.getEntry(i));\n            }\n        }\n        currWindow = new Datum(new ArrayList<>(), results);\n        return currWindow;\n    }", "signature": "Datum updateWindow(List<Datum> new_data, List<Datum> old_data)", "full_signature": "public Datum updateWindow(List<Datum> new_data, List<Datum> old_data)", "class_method_signature": "IncrementalWindowSum.updateWindow(List<Datum> new_data, List<Datum> old_data)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "metrics", "getDimension", "metrics", "get", "metrics", "setEntry", "getEntry", "getEntry", "metrics", "setEntry", "getEntry", "getEntry"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}