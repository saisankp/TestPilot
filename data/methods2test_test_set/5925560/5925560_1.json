{"test_class": {"identifier": "ClassFileNameHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Charset UTF8 = Charset.forName(\"UTF-8\");", "modifier": "private final", "type": "Charset", "declarator": "UTF8 = Charset.forName(\"UTF-8\")", "var_name": "UTF8"}], "file": "util/src/test/java/org/jf/util/ClassFileNameHandlerTest.java"}, "test_case": {"identifier": "test2ByteEncodings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test2ByteEncodings() {\n        StringBuilder sb = new StringBuilder();\n        for (int i=0x80; i<0x80+100; i++) {\n            sb.append((char)i);\n        }\n\n        // remove a total of 3 2-byte characters, and then add back in the 1-byte '#'\n        String result = ClassFileNameHandler.shortenPathComponent(sb.toString(), 4);\n        Assert.assertEquals(200, sb.toString().getBytes(UTF8).length);\n        Assert.assertEquals(195, result.getBytes(UTF8).length);\n        Assert.assertEquals(98, result.length());\n\n        // remove a total of 3 2-byte characters, and then add back in the 1-byte '#'\n        result = ClassFileNameHandler.shortenPathComponent(sb.toString(), 5);\n        Assert.assertEquals(200, sb.toString().getBytes(UTF8).length);\n        Assert.assertEquals(195, result.getBytes(UTF8).length);\n        Assert.assertEquals(98, result.length());\n    }", "signature": "void test2ByteEncodings()", "full_signature": "@Test public void test2ByteEncodings()", "class_method_signature": "ClassFileNameHandlerTest.test2ByteEncodings()", "testcase": true, "constructor": false, "invocations": ["append", "shortenPathComponent", "toString", "assertEquals", "getBytes", "toString", "assertEquals", "getBytes", "assertEquals", "length", "shortenPathComponent", "toString", "assertEquals", "getBytes", "toString", "assertEquals", "getBytes", "assertEquals", "length"]}, "focal_class": {"identifier": "ClassFileNameHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_FILENAME_LENGTH = 255;", "modifier": "private static final", "type": "int", "declarator": "MAX_FILENAME_LENGTH = 255", "var_name": "MAX_FILENAME_LENGTH"}, {"original_string": "private static final int NUMERIC_SUFFIX_RESERVE = 6;", "modifier": "private static final", "type": "int", "declarator": "NUMERIC_SUFFIX_RESERVE = 6", "var_name": "NUMERIC_SUFFIX_RESERVE"}, {"original_string": "private final int NO_VALUE = -1;", "modifier": "private final", "type": "int", "declarator": "NO_VALUE = -1", "var_name": "NO_VALUE"}, {"original_string": "private final int CASE_INSENSITIVE = 0;", "modifier": "private final", "type": "int", "declarator": "CASE_INSENSITIVE = 0", "var_name": "CASE_INSENSITIVE"}, {"original_string": "private final int CASE_SENSITIVE = 1;", "modifier": "private final", "type": "int", "declarator": "CASE_SENSITIVE = 1", "var_name": "CASE_SENSITIVE"}, {"original_string": "private int forcedCaseSensitivity = NO_VALUE;", "modifier": "private", "type": "int", "declarator": "forcedCaseSensitivity = NO_VALUE", "var_name": "forcedCaseSensitivity"}, {"original_string": "private DirectoryEntry top;", "modifier": "private", "type": "DirectoryEntry", "declarator": "top", "var_name": "top"}, {"original_string": "private String fileExtension;", "modifier": "private", "type": "String", "declarator": "fileExtension", "var_name": "fileExtension"}, {"original_string": "private boolean modifyWindowsReservedFilenames;", "modifier": "private", "type": "boolean", "declarator": "modifyWindowsReservedFilenames", "var_name": "modifyWindowsReservedFilenames"}, {"original_string": "private static Pattern reservedFileNameRegex = Pattern.compile(\"^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\\\..*)?$\",\n            Pattern.CASE_INSENSITIVE);", "modifier": "private static", "type": "Pattern", "declarator": "reservedFileNameRegex = Pattern.compile(\"^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])(\\\\..*)?$\",\n            Pattern.CASE_INSENSITIVE)", "var_name": "reservedFileNameRegex"}], "methods": [{"identifier": "ClassFileNameHandler", "parameters": "(File path, String fileExtension)", "modifiers": "public", "return": "", "signature": " ClassFileNameHandler(File path, String fileExtension)", "full_signature": "public  ClassFileNameHandler(File path, String fileExtension)", "class_method_signature": "ClassFileNameHandler.ClassFileNameHandler(File path, String fileExtension)", "testcase": false, "constructor": true}, {"identifier": "ClassFileNameHandler", "parameters": "(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "modifiers": "public", "return": "", "signature": " ClassFileNameHandler(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "full_signature": "public  ClassFileNameHandler(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "class_method_signature": "ClassFileNameHandler.ClassFileNameHandler(File path, String fileExtension, boolean caseSensitive,\n                                boolean modifyWindowsReservedFilenames)", "testcase": false, "constructor": true}, {"identifier": "getMaxFilenameLength", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getMaxFilenameLength()", "full_signature": "private int getMaxFilenameLength()", "class_method_signature": "ClassFileNameHandler.getMaxFilenameLength()", "testcase": false, "constructor": false}, {"identifier": "getUniqueFilenameForClass", "parameters": "(String className)", "modifiers": "public", "return": "File", "signature": "File getUniqueFilenameForClass(String className)", "full_signature": "public File getUniqueFilenameForClass(String className)", "class_method_signature": "ClassFileNameHandler.getUniqueFilenameForClass(String className)", "testcase": false, "constructor": false}, {"identifier": "addUniqueChild", "parameters": "(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "modifiers": "@Nonnull private", "return": "File", "signature": "File addUniqueChild(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "full_signature": "@Nonnull private File addUniqueChild(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "class_method_signature": "ClassFileNameHandler.addUniqueChild(@Nonnull DirectoryEntry parent, @Nonnull String[] packageElements,\n                                int packageElementIndex)", "testcase": false, "constructor": false}, {"identifier": "utf8Length", "parameters": "(String str)", "modifiers": "private static", "return": "int", "signature": "int utf8Length(String str)", "full_signature": "private static int utf8Length(String str)", "class_method_signature": "ClassFileNameHandler.utf8Length(String str)", "testcase": false, "constructor": false}, {"identifier": "utf8Length", "parameters": "(int codePoint)", "modifiers": "private static", "return": "int", "signature": "int utf8Length(int codePoint)", "full_signature": "private static int utf8Length(int codePoint)", "class_method_signature": "ClassFileNameHandler.utf8Length(int codePoint)", "testcase": false, "constructor": false}, {"identifier": "shortenPathComponent", "parameters": "(@Nonnull String pathComponent, int bytesToRemove)", "modifiers": "@Nonnull static", "return": "String", "signature": "String shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "full_signature": "@Nonnull static String shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "class_method_signature": "ClassFileNameHandler.shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "private static boolean isWindows()", "class_method_signature": "ClassFileNameHandler.isWindows()", "testcase": false, "constructor": false}, {"identifier": "isReservedFileName", "parameters": "(String className)", "modifiers": "private static", "return": "boolean", "signature": "boolean isReservedFileName(String className)", "full_signature": "private static boolean isReservedFileName(String className)", "class_method_signature": "ClassFileNameHandler.isReservedFileName(String className)", "testcase": false, "constructor": false}, {"identifier": "addSuffixBeforeExtension", "parameters": "(String pathElement, String suffix)", "modifiers": "private static", "return": "String", "signature": "String addSuffixBeforeExtension(String pathElement, String suffix)", "full_signature": "private static String addSuffixBeforeExtension(String pathElement, String suffix)", "class_method_signature": "ClassFileNameHandler.addSuffixBeforeExtension(String pathElement, String suffix)", "testcase": false, "constructor": false}], "file": "util/src/main/java/org/jf/util/ClassFileNameHandler.java"}, "focal_method": {"identifier": "shortenPathComponent", "parameters": "(@Nonnull String pathComponent, int bytesToRemove)", "modifiers": "@Nonnull static", "return": "String", "body": "@Nonnull\n    static String shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove) {\n        // We replace the removed part with a #, so we need to remove 1 extra char\n        bytesToRemove++;\n\n        int[] codePoints;\n        try {\n            IntBuffer intBuffer = ByteBuffer.wrap(pathComponent.getBytes(\"UTF-32BE\")).asIntBuffer();\n            codePoints = new int[intBuffer.limit()];\n            intBuffer.get(codePoints);\n        } catch (UnsupportedEncodingException ex) {\n            throw new RuntimeException(ex);\n        }\n\n        int midPoint = codePoints.length/2;\n\n        int firstEnd = midPoint; // exclusive\n        int secondStart = midPoint+1; // inclusive\n        int bytesRemoved = utf8Length(codePoints[midPoint]);\n\n        // if we have an even number of codepoints, start by removing both middle characters,\n        // unless just removing the first already removes enough bytes\n        if (((codePoints.length % 2) == 0) && bytesRemoved < bytesToRemove) {\n            bytesRemoved += utf8Length(codePoints[secondStart]);\n            secondStart++;\n        }\n\n        while ((bytesRemoved < bytesToRemove) &&\n                (firstEnd > 0 || secondStart < codePoints.length)) {\n            if (firstEnd > 0) {\n                firstEnd--;\n                bytesRemoved += utf8Length(codePoints[firstEnd]);\n            }\n\n            if (bytesRemoved < bytesToRemove && secondStart < codePoints.length) {\n                bytesRemoved += utf8Length(codePoints[secondStart]);\n                secondStart++;\n            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for (int i=0; i<firstEnd; i++) {\n            sb.appendCodePoint(codePoints[i]);\n        }\n        sb.append('#');\n        for (int i=secondStart; i<codePoints.length; i++) {\n            sb.appendCodePoint(codePoints[i]);\n        }\n\n        return sb.toString();\n    }", "signature": "String shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "full_signature": "@Nonnull static String shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "class_method_signature": "ClassFileNameHandler.shortenPathComponent(@Nonnull String pathComponent, int bytesToRemove)", "testcase": false, "constructor": false, "invocations": ["asIntBuffer", "wrap", "getBytes", "limit", "get", "utf8Length", "utf8Length", "utf8Length", "utf8Length", "appendCodePoint", "append", "appendCodePoint", "toString"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}