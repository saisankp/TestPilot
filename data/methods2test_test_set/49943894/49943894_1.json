{"test_class": {"identifier": "LocalNfsSecondaryStorageResourceTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static Map<String, Object> testParams;", "modifier": "private static", "type": "Map<String, Object>", "declarator": "testParams", "var_name": "testParams"}, {"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(LocalNfsSecondaryStorageResourceTest.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(LocalNfsSecondaryStorageResourceTest.class.getName())", "var_name": "s_logger"}, {"original_string": "LocalNfsSecondaryStorageResource resource;", "modifier": "", "type": "LocalNfsSecondaryStorageResource", "declarator": "resource", "var_name": "resource"}], "file": "services/secondary-storage/server/src/test/java/org/apache/cloudstack/storage/resource/LocalNfsSecondaryStorageResourceTest.java"}, "test_case": {"identifier": "testExecuteRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteRequest() throws Exception {\n        TemplateObjectTO template = Mockito.mock(TemplateObjectTO.class);\n        NfsTO cacheStore = Mockito.mock(NfsTO.class);\n        Mockito.when(cacheStore.getUrl()).thenReturn(\"nfs://nfs2.lab.vmops.com/export/home/edison/\");\n        SwiftTO swift = Mockito.mock(SwiftTO.class);\n        Mockito.when(swift.getEndPoint()).thenReturn(\"https://objects.dreamhost.com/auth\");\n        Mockito.when(swift.getAccount()).thenReturn(\"cloudstack\");\n        Mockito.when(swift.getUserName()).thenReturn(\"images\");\n        Mockito.when(swift.getKey()).thenReturn(\"oxvELQaOD1U5_VyosGfA-wpZ7uBWEff-CUBGCM0u\");\n\n        Mockito.when(template.getDataStore()).thenReturn(swift);\n        Mockito.when(template.getPath()).thenReturn(\"template/1/1/\");\n        Mockito.when(template.isRequiresHvm()).thenReturn(true);\n        Mockito.when(template.getId()).thenReturn(1L);\n        Mockito.when(template.getFormat()).thenReturn(Storage.ImageFormat.VHD);\n        Mockito.when(template.getOrigUrl()).thenReturn(\"http://nfs1.lab.vmops.com/templates/test.bz2\");\n        Mockito.when(template.getName()).thenReturn(UUID.randomUUID().toString());\n        Mockito.when(template.getObjectType()).thenReturn(DataObjectType.TEMPLATE);\n\n        DownloadCommand cmd = new DownloadCommand(template, 100000L);\n        cmd.setCacheStore(cacheStore);\n        DownloadAnswer answer = (DownloadAnswer)resource.executeRequest(cmd);\n        Assert.assertTrue(answer.getResult());\n\n        Mockito.when(template.getPath()).thenReturn(answer.getInstallPath());\n        Mockito.when(template.getDataStore()).thenReturn(swift);\n        //download swift:\n        Mockito.when(cacheStore.getRole()).thenReturn(DataStoreRole.ImageCache);\n        TemplateObjectTO destTemplate = Mockito.mock(TemplateObjectTO.class);\n        Mockito.when(destTemplate.getPath()).thenReturn(\"template/1/2\");\n        Mockito.when(destTemplate.getDataStore()).thenReturn(cacheStore);\n        Mockito.when(destTemplate.getObjectType()).thenReturn(DataObjectType.TEMPLATE);\n        CopyCommand cpyCmd = new CopyCommand(template, destTemplate, 10000, true);\n        CopyCmdAnswer copyCmdAnswer = (CopyCmdAnswer)resource.executeRequest(cpyCmd);\n        Assert.assertTrue(copyCmdAnswer.getResult());\n\n        //list template\n        ListTemplateCommand listCmd = new ListTemplateCommand(swift);\n        ListTemplateAnswer listAnswer = (ListTemplateAnswer)resource.executeRequest(listCmd);\n\n        Assert.assertTrue(listAnswer.getTemplateInfo().size() > 0);\n    }", "signature": "void testExecuteRequest()", "full_signature": "@Test public void testExecuteRequest()", "class_method_signature": "LocalNfsSecondaryStorageResourceTest.testExecuteRequest()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getUrl", "mock", "thenReturn", "when", "getEndPoint", "thenReturn", "when", "getAccount", "thenReturn", "when", "getUserName", "thenReturn", "when", "getKey", "thenReturn", "when", "getDataStore", "thenReturn", "when", "getPath", "thenReturn", "when", "isRequiresHvm", "thenReturn", "when", "getId", "thenReturn", "when", "getFormat", "thenReturn", "when", "getOrigUrl", "thenReturn", "when", "getName", "toString", "randomUUID", "thenReturn", "when", "getObjectType", "setCacheStore", "executeRequest", "assertTrue", "getResult", "thenReturn", "when", "getPath", "getInstallPath", "thenReturn", "when", "getDataStore", "thenReturn", "when", "getRole", "mock", "thenReturn", "when", "getPath", "thenReturn", "when", "getDataStore", "thenReturn", "when", "getObjectType", "executeRequest", "assertTrue", "getResult", "executeRequest", "assertTrue", "size", "getTemplateInfo"]}, "focal_class": {"identifier": "LocalNfsSecondaryStorageResource", "superclass": "extends NfsSecondaryStorageResource", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(LocalNfsSecondaryStorageResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(LocalNfsSecondaryStorageResource.class)", "var_name": "s_logger"}], "methods": [{"identifier": "LocalNfsSecondaryStorageResource", "parameters": "()", "modifiers": "public", "return": "", "signature": " LocalNfsSecondaryStorageResource()", "full_signature": "public  LocalNfsSecondaryStorageResource()", "class_method_signature": "LocalNfsSecondaryStorageResource.LocalNfsSecondaryStorageResource()", "testcase": false, "constructor": true}, {"identifier": "setParentPath", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void setParentPath(String path)", "full_signature": "@Override public void setParentPath(String path)", "class_method_signature": "LocalNfsSecondaryStorageResource.setParentPath(String path)", "testcase": false, "constructor": false}, {"identifier": "executeRequest", "parameters": "(Command cmd)", "modifiers": "@Override public", "return": "Answer", "signature": "Answer executeRequest(Command cmd)", "full_signature": "@Override public Answer executeRequest(Command cmd)", "class_method_signature": "LocalNfsSecondaryStorageResource.executeRequest(Command cmd)", "testcase": false, "constructor": false}, {"identifier": "getRootDir", "parameters": "(String secUrl)", "modifiers": "@Override synchronized public", "return": "String", "signature": "String getRootDir(String secUrl)", "full_signature": "@Override synchronized public String getRootDir(String secUrl)", "class_method_signature": "LocalNfsSecondaryStorageResource.getRootDir(String secUrl)", "testcase": false, "constructor": false}, {"identifier": "mount", "parameters": "(String localRootPath, String remoteDevice, URI uri)", "modifiers": "@Override protected", "return": "void", "signature": "void mount(String localRootPath, String remoteDevice, URI uri)", "full_signature": "@Override protected void mount(String localRootPath, String remoteDevice, URI uri)", "class_method_signature": "LocalNfsSecondaryStorageResource.mount(String localRootPath, String remoteDevice, URI uri)", "testcase": false, "constructor": false}], "file": "services/secondary-storage/server/src/main/java/org/apache/cloudstack/storage/resource/LocalNfsSecondaryStorageResource.java"}, "focal_method": {"identifier": "executeRequest", "parameters": "(Command cmd)", "modifiers": "@Override public", "return": "Answer", "body": "@Override\n    public Answer executeRequest(Command cmd) {\n        return super.executeRequest(cmd);\n    }", "signature": "Answer executeRequest(Command cmd)", "full_signature": "@Override public Answer executeRequest(Command cmd)", "class_method_signature": "LocalNfsSecondaryStorageResource.executeRequest(Command cmd)", "testcase": false, "constructor": false, "invocations": ["executeRequest"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}