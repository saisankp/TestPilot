{"test_class": {"identifier": "ConditionFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/fluent/ConditionFilterTest.java"}, "test_case": {"identifier": "acceptTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void acceptTest() {\n        Function<Object, ValueWrapper> alwaysMatchFunction = ValueWrapper::of;\n        FactMappingValue factMappingValue = new FactMappingValue(FactIdentifier.DESCRIPTION, ExpressionIdentifier.DESCRIPTION, \"Test\");\n        ScenarioResult scenarioResult = new ScenarioResult(factMappingValue);\n        ConditionFilter conditionFilter = new ConditionFilter(singletonList(new FactCheckerHandle(String.class, alwaysMatchFunction, scenarioResult)));\n\n        Assert.assertFalse(conditionFilter.accept(1));\n        Assert.assertTrue(conditionFilter.accept(\"String\"));\n\n        Function<Object, ValueWrapper> alwaysNotMatchFunction = object -> ValueWrapper.errorWithValidValue(null, null);\n        ConditionFilter conditionFilterFail = new ConditionFilter(singletonList(new FactCheckerHandle(String.class, alwaysNotMatchFunction, scenarioResult)));\n        Assert.assertFalse(conditionFilterFail.accept(\"String\"));\n    }", "signature": "void acceptTest()", "full_signature": "@Test public void acceptTest()", "class_method_signature": "ConditionFilterTest.acceptTest()", "testcase": true, "constructor": false, "invocations": ["singletonList", "assertFalse", "accept", "assertTrue", "accept", "errorWithValidValue", "singletonList", "assertFalse", "accept"]}, "focal_class": {"identifier": "ConditionFilter", "superclass": "", "interfaces": "implements ObjectFilter", "fields": [{"original_string": "private final List<FactCheckerHandle> factToCheck;", "modifier": "private final", "type": "List<FactCheckerHandle>", "declarator": "factToCheck", "var_name": "factToCheck"}], "methods": [{"identifier": "ConditionFilter", "parameters": "(List<FactCheckerHandle> factToCheck)", "modifiers": "public", "return": "", "signature": " ConditionFilter(List<FactCheckerHandle> factToCheck)", "full_signature": "public  ConditionFilter(List<FactCheckerHandle> factToCheck)", "class_method_signature": "ConditionFilter.ConditionFilter(List<FactCheckerHandle> factToCheck)", "testcase": false, "constructor": true}, {"identifier": "accept", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(Object object)", "full_signature": "@Override public boolean accept(Object object)", "class_method_signature": "ConditionFilter.accept(Object object)", "testcase": false, "constructor": false}], "file": "drools-scenario-simulation/drools-scenario-simulation-backend/src/main/java/org/drools/scenariosimulation/backend/fluent/ConditionFilter.java"}, "focal_method": {"identifier": "accept", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean accept(Object object) {\n        return factToCheck.stream()\n                .allMatch(factCheckerHandle ->\n                                  factCheckerHandle.getClazz().isAssignableFrom(object.getClass()) &&\n                                          factCheckerHandle.getCheckFuction().apply(object).isValid());\n    }", "signature": "boolean accept(Object object)", "full_signature": "@Override public boolean accept(Object object)", "class_method_signature": "ConditionFilter.accept(Object object)", "testcase": false, "constructor": false, "invocations": ["allMatch", "stream", "isAssignableFrom", "getClazz", "getClass", "isValid", "apply", "getCheckFuction"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}