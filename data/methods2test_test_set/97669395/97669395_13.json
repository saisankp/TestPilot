{"test_class": {"identifier": "JsParamFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private TsIdentifierFilter identifierFilter;", "modifier": "@Mock private", "type": "TsIdentifierFilter", "declarator": "identifierFilter", "var_name": "identifierFilter"}], "file": "recipe-generator/src/test/java/ca/derekcormier/recipe/generator/filter/JsParamFilterTest.java"}, "test_case": {"identifier": "testApply_outputsEllipsesWhenParamTypeIsVararg", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApply_outputsEllipsesWhenParamTypeIsVararg() {\n    Cookbook cookbook = new Cookbook(\"test\", new ArrayList<>(), new ArrayList<>());\n    Filter filter = new JsParamFilter(cookbook, identifierFilter);\n    when(identifierFilter.apply(\"foo\")).thenReturn(\"foo\");\n\n    assertEquals(\"...foo\", filter.apply(param(\"foo\", \"int...\")));\n  }", "signature": "void testApply_outputsEllipsesWhenParamTypeIsVararg()", "full_signature": "@Test public void testApply_outputsEllipsesWhenParamTypeIsVararg()", "class_method_signature": "JsParamFilterTest.testApply_outputsEllipsesWhenParamTypeIsVararg()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "apply", "assertEquals", "apply", "param"]}, "focal_class": {"identifier": "JsParamFilter", "superclass": "extends RecipeFilter", "interfaces": "", "fields": [{"original_string": "private final Filter identifierFilter;", "modifier": "private final", "type": "Filter", "declarator": "identifierFilter", "var_name": "identifierFilter"}], "methods": [{"identifier": "JsParamFilter", "parameters": "(Cookbook cookbook, Filter identifierFilter)", "modifiers": "public", "return": "", "signature": " JsParamFilter(Cookbook cookbook, Filter identifierFilter)", "full_signature": "public  JsParamFilter(Cookbook cookbook, Filter identifierFilter)", "class_method_signature": "JsParamFilter.JsParamFilter(Cookbook cookbook, Filter identifierFilter)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JsParamFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false}], "file": "recipe-generator/src/main/java/ca/derekcormier/recipe/generator/filter/JsParamFilter.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object apply(Object value, Object... params) {\n    Map<String, String> param = (Map<String, String>) value;\n    String name = param.get(\"name\");\n    ParamType type = CookbookUtils.parseType(param.get(\"type\"), getCookbook());\n\n    return (type.isVararg() ? \"...\" : \"\") + identifierFilter.apply(name);\n  }", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JsParamFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false, "invocations": ["get", "parseType", "get", "getCookbook", "isVararg", "apply"]}, "repository": {"repo_id": 97669395, "url": "https://github.com/kormide/recipe", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 727, "license": "licensed"}}