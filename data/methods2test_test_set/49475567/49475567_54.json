{"test_class": {"identifier": "BoroughsTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoclient-core/src/test/java/gov/nyc/doitt/gis/geoclient/api/BoroughsTest.java"}, "test_case": {"identifier": "testParseInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseInt() {\n        assertThat(Boroughs.parseInt(\"1\")).isEqualTo(1);\n        assertThat(Boroughs.parseInt(\"2\")).isEqualTo(2);\n        assertThat(Boroughs.parseInt(\"3\")).isEqualTo(3);\n        assertThat(Boroughs.parseInt(\"4\")).isEqualTo(4);\n        assertThat(Boroughs.parseInt(\"5\")).isEqualTo(5);\n        assertThat(Boroughs.parseInt(\"12\")).isEqualTo(12);\n        assertThat(Boroughs.parseInt(\"-78\")).isEqualTo(-78);\n        assertThat(Boroughs.parseInt(\"Manhattan\")).isEqualTo(1);\n        assertThat(Boroughs.parseInt(\"MN\")).isEqualTo(1);\n        assertThat(Boroughs.parseInt(\"BRONX\")).isEqualTo(2);\n        assertThat(Boroughs.parseInt(\"bx\")).isEqualTo(2);\n        assertThat(Boroughs.parseInt(\"brooklyn\")).isEqualTo(3);\n        assertThat(Boroughs.parseInt(\"bk\")).isEqualTo(3);\n        assertThat(Boroughs.parseInt(\"qUeeNs\")).isEqualTo(4);\n        assertThat(Boroughs.parseInt(\"qN\")).isEqualTo(4);\n        assertThat(Boroughs.parseInt(\"staten island\")).isEqualTo(5);\n        assertThat(Boroughs.parseInt(\"STATEN IS\")).isEqualTo(5);\n        assertThat(Boroughs.parseInt(\"si\")).isEqualTo(5);\n        assertThat(Boroughs.parseInt(\"man\")).isEqualTo(Boroughs.UNPARSABLE_BOROUGH_CODE_SENTINEL_VALUE);\n    }", "signature": "void testParseInt()", "full_signature": "@Test public void testParseInt()", "class_method_signature": "BoroughsTest.testParseInt()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt", "isEqualTo", "assertThat", "parseInt"]}, "focal_class": {"identifier": "Boroughs", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Borough MANHATTAN = new Manhattan();", "modifier": "public static final", "type": "Borough", "declarator": "MANHATTAN = new Manhattan()", "var_name": "MANHATTAN"}, {"original_string": "public static final Borough BRONX = new Bronx();", "modifier": "public static final", "type": "Borough", "declarator": "BRONX = new Bronx()", "var_name": "BRONX"}, {"original_string": "public static final Borough BROOKLYN = new Brooklyn();", "modifier": "public static final", "type": "Borough", "declarator": "BROOKLYN = new Brooklyn()", "var_name": "BROOKLYN"}, {"original_string": "public static final Borough QUEENS = new Queens();", "modifier": "public static final", "type": "Borough", "declarator": "QUEENS = new Queens()", "var_name": "QUEENS"}, {"original_string": "public static final Borough STATEN_ISLAND = new StatenIsland();", "modifier": "public static final", "type": "Borough", "declarator": "STATEN_ISLAND = new StatenIsland()", "var_name": "STATEN_ISLAND"}, {"original_string": "public static final int UNPARSABLE_BOROUGH_CODE_SENTINEL_VALUE = 0;", "modifier": "public static final", "type": "int", "declarator": "UNPARSABLE_BOROUGH_CODE_SENTINEL_VALUE = 0", "var_name": "UNPARSABLE_BOROUGH_CODE_SENTINEL_VALUE"}, {"original_string": "public static final List<Borough> THE_FIVE_BOROUGHS = Arrays.asList(MANHATTAN, BRONX, BROOKLYN, QUEENS,\n            STATEN_ISLAND);", "modifier": "public static final", "type": "List<Borough>", "declarator": "THE_FIVE_BOROUGHS = Arrays.asList(MANHATTAN, BRONX, BROOKLYN, QUEENS,\n            STATEN_ISLAND)", "var_name": "THE_FIVE_BOROUGHS"}], "methods": [{"identifier": "fromCode", "parameters": "(String code)", "modifiers": "public static final", "return": "Borough", "signature": "Borough fromCode(String code)", "full_signature": "public static final Borough fromCode(String code)", "class_method_signature": "Boroughs.fromCode(String code)", "testcase": false, "constructor": false}, {"identifier": "fromName", "parameters": "(String name)", "modifiers": "public static final", "return": "Borough", "signature": "Borough fromName(String name)", "full_signature": "public static final Borough fromName(String name)", "class_method_signature": "Boroughs.fromName(String name)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String boroughCodeOrName)", "modifiers": "public static", "return": "int", "signature": "int parseInt(String boroughCodeOrName)", "full_signature": "public static int parseInt(String boroughCodeOrName)", "class_method_signature": "Boroughs.parseInt(String boroughCodeOrName)", "testcase": false, "constructor": false}, {"identifier": "findFirst", "parameters": "(Predicate<? super Borough> predicate)", "modifiers": "public static final", "return": "Borough", "signature": "Borough findFirst(Predicate<? super Borough> predicate)", "full_signature": "public static final Borough findFirst(Predicate<? super Borough> predicate)", "class_method_signature": "Boroughs.findFirst(Predicate<? super Borough> predicate)", "testcase": false, "constructor": false}, {"identifier": "Boroughs", "parameters": "()", "modifiers": "private", "return": "", "signature": " Boroughs()", "full_signature": "private  Boroughs()", "class_method_signature": "Boroughs.Boroughs()", "testcase": false, "constructor": true}], "file": "geoclient-core/src/main/java/gov/nyc/doitt/gis/geoclient/api/Boroughs.java"}, "focal_method": {"identifier": "parseInt", "parameters": "(String boroughCodeOrName)", "modifiers": "public static", "return": "int", "body": "public static int parseInt(String boroughCodeOrName)\n    {\n        // TODO revisit this logic?\n        // If argument is a parse-able integer, return it regardless of validity as an actual borough code\n        if (NumberUtils.isParsable(boroughCodeOrName))\n        {\n            return Integer.valueOf(boroughCodeOrName);\n        }\n\n        Borough borough = fromName(boroughCodeOrName);\n\n        if(borough != null) {\n            return Integer.valueOf(borough.getCode());\n        }\n\n        return UNPARSABLE_BOROUGH_CODE_SENTINEL_VALUE;\n    }", "signature": "int parseInt(String boroughCodeOrName)", "full_signature": "public static int parseInt(String boroughCodeOrName)", "class_method_signature": "Boroughs.parseInt(String boroughCodeOrName)", "testcase": false, "constructor": false, "invocations": ["isParsable", "valueOf", "fromName", "valueOf", "getCode"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}