{"test_class": {"identifier": "ConfigurationLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConfigurationLogger configurationLogger;", "modifier": "private", "type": "ConfigurationLogger", "declarator": "configurationLogger", "var_name": "configurationLogger"}, {"original_string": "private Logger logger;", "modifier": "private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/configuration/ConfigurationLoggerTest.java"}, "test_case": {"identifier": "testAliasKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAliasKey() throws Exception {\n\t\tclass Provider extends ConfigurationOptionProvider {\n\t\t\tprivate ConfigurationOption<String> aliasOption = ConfigurationOption.stringOption()\n\t\t\t\t\t.key(\"foo\")\n\t\t\t\t\t.aliasKeys(\"foo.old\")\n\t\t\t\t\t.buildRequired();\n\t\t}\n\t\tfinal ConfigurationRegistry configurationRegistry = ConfigurationRegistry.builder()\n\t\t\t\t.addOptionProvider(new Provider())\n\t\t\t\t.addConfigSource(new SimpleSource().add(\"foo.old\", \"bar\"))\n\t\t\t\t.build();\n\t\tconfigurationLogger.logConfiguration(configurationRegistry);\n\n\t\tverify(logger).warn(eq(\"Detected usage of an old configuration key: '{}'. \" +\n\t\t\t\t\"Please use '{}' instead.\"), eq(\"foo.old\"), eq(\"foo\"));\n\t}", "signature": "void testAliasKey()", "full_signature": "@Test public void testAliasKey()", "class_method_signature": "ConfigurationLoggerTest.testAliasKey()", "testcase": true, "constructor": false, "invocations": ["buildRequired", "aliasKeys", "key", "stringOption", "build", "addConfigSource", "addOptionProvider", "builder", "add", "logConfiguration", "warn", "verify", "eq", "eq", "eq"]}, "focal_class": {"identifier": "ConfigurationLogger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "ConfigurationLogger", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConfigurationLogger()", "full_signature": "public  ConfigurationLogger()", "class_method_signature": "ConfigurationLogger.ConfigurationLogger()", "testcase": false, "constructor": true}, {"identifier": "ConfigurationLogger", "parameters": "(Logger logger)", "modifiers": "public", "return": "", "signature": " ConfigurationLogger(Logger logger)", "full_signature": "public  ConfigurationLogger(Logger logger)", "class_method_signature": "ConfigurationLogger.ConfigurationLogger(Logger logger)", "testcase": false, "constructor": true}, {"identifier": "logConfiguration", "parameters": "(ConfigurationRegistry configuration)", "modifiers": "public", "return": "void", "signature": "void logConfiguration(ConfigurationRegistry configuration)", "full_signature": "public void logConfiguration(ConfigurationRegistry configuration)", "class_method_signature": "ConfigurationLogger.logConfiguration(ConfigurationRegistry configuration)", "testcase": false, "constructor": false}, {"identifier": "prepareOptionValueForLog", "parameters": "(ConfigurationOption<?> option)", "modifiers": "private static", "return": "String", "signature": "String prepareOptionValueForLog(ConfigurationOption<?> option)", "full_signature": "private static String prepareOptionValueForLog(ConfigurationOption<?> option)", "class_method_signature": "ConfigurationLogger.prepareOptionValueForLog(ConfigurationOption<?> option)", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/configuration/ConfigurationLogger.java"}, "focal_method": {"identifier": "logConfiguration", "parameters": "(ConfigurationRegistry configuration)", "modifiers": "public", "return": "void", "body": "public void logConfiguration(ConfigurationRegistry configuration) {\n\t\tlogger.info(\"# stagemonitor configuration, listing non-default values:\");\n\t\tboolean hasOnlyDefaultOptions = true;\n\n\t\tfor (List<ConfigurationOption<?>> options : configuration.getConfigurationOptionsByCategory().values()) {\n\t\t\tfor (ConfigurationOption<?> option : options) {\n\t\t\t\tif (!option.isDefault()) {\n\t\t\t\t\thasOnlyDefaultOptions = false;\n\t\t\t\t\tlogger.info(\"{}: {} (source: {})\",\n\t\t\t\t\t\t\toption.getKey(), prepareOptionValueForLog(option), option.getNameOfCurrentConfigurationSource());\n\t\t\t\t\tif (option.getTags().contains(\"deprecated\")) {\n\t\t\t\t\t\tlogger.warn(\"Detected usage of deprecated configuration option '{}'. \" +\n\t\t\t\t\t\t\t\t\"This option might be removed in the future. \" +\n\t\t\t\t\t\t\t\t\"Please refer to the documentation about alternatives.\", option.getKey());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!option.getKey().equals(option.getUsedKey())) {\n\t\t\t\t\t\tlogger.warn(\"Detected usage of an old configuration key: '{}'. Please use '{}' instead.\",\n\t\t\t\t\t\t\t\toption.getUsedKey(), option.getKey());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (hasOnlyDefaultOptions) {\n\t\t\tlogger.warn(\"stagemonitor has not been configured. Have a look at \" +\n\t\t\t\t\t\"https://github.com/stagemonitor/stagemonitor/wiki/How-should-I-configure-stagemonitor%3F \" +\n\t\t\t\t\t\"and \" +\n\t\t\t\t\t\"https://github.com/stagemonitor/stagemonitor/wiki/Configuration-Options \" +\n\t\t\t\t\t\"for further instructions\");\n\t\t}\n\t}", "signature": "void logConfiguration(ConfigurationRegistry configuration)", "full_signature": "public void logConfiguration(ConfigurationRegistry configuration)", "class_method_signature": "ConfigurationLogger.logConfiguration(ConfigurationRegistry configuration)", "testcase": false, "constructor": false, "invocations": ["info", "values", "getConfigurationOptionsByCategory", "isDefault", "info", "getKey", "prepareOptionValueForLog", "getNameOfCurrentConfigurationSource", "contains", "getTags", "warn", "getKey", "equals", "getKey", "getUsedKey", "warn", "getUsedKey", "getKey", "warn"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}