{"test_class": {"identifier": "WMSCoverageReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/extension/wms/src/test/java/org/geotools/map/WMSCoverageReaderTest.java"}, "test_case": {"identifier": "test4326wms13", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test4326wms13() throws Exception {\n        WMSCoverageReader reader = getReader4326wms13();\n\n        // build a getmap request and check it\n        CoordinateReferenceSystem wgs84 = CRS.decode(\"EPSG:4326\", true);\n        ReferencedEnvelope worldEnvelope = new ReferencedEnvelope(-180, 180, -90, 90, wgs84);\n        GridGeometry2D gg = new GridGeometry2D(new GridEnvelope2D(0, 0, 180, 90), worldEnvelope);\n        final Parameter<GridGeometry2D> ggParam = (Parameter<GridGeometry2D>) AbstractGridFormat.READ_GRIDGEOMETRY2D\n                .createValue();\n        ggParam.setValue(gg);\n        GridCoverage2D coverage = reader.read(new GeneralParameterValue[] { ggParam });\n        assertTrue(CRS.equalsIgnoreMetadata(wgs84, coverage.getCoordinateReferenceSystem()));\n        assertEquals(worldEnvelope, new ReferencedEnvelope(coverage.getEnvelope()));\n    }", "signature": "void test4326wms13()", "full_signature": "@Test public void test4326wms13()", "class_method_signature": "WMSCoverageReaderTest.test4326wms13()", "testcase": true, "constructor": false, "invocations": ["getReader4326wms13", "decode", "createValue", "setValue", "read", "assertTrue", "equalsIgnoreMetadata", "getCoordinateReferenceSystem", "assertEquals", "getEnvelope"]}, "focal_class": {"identifier": "WMSCoverageReader", "superclass": "extends AbstractGridCoverage2DReader", "interfaces": "", "fields": [{"original_string": "static public final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.map\");", "modifier": "static public final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(\"org.geotools.map\")", "var_name": "LOGGER"}, {"original_string": "static GridCoverageFactory gcf = new GridCoverageFactory();", "modifier": "static", "type": "GridCoverageFactory", "declarator": "gcf = new GridCoverageFactory()", "var_name": "gcf"}, {"original_string": "WebMapServer wms;", "modifier": "", "type": "WebMapServer", "declarator": "wms", "var_name": "wms"}, {"original_string": "List<Layer> layers = new ArrayList<Layer>();", "modifier": "", "type": "List<Layer>", "declarator": "layers = new ArrayList<Layer>()", "var_name": "layers"}, {"original_string": "String srsName;", "modifier": "", "type": "String", "declarator": "srsName", "var_name": "srsName"}, {"original_string": "String format;", "modifier": "", "type": "String", "declarator": "format", "var_name": "format"}, {"original_string": "GetMapRequest mapRequest;", "modifier": "", "type": "GetMapRequest", "declarator": "mapRequest", "var_name": "mapRequest"}, {"original_string": "GridCoverage2D grid;", "modifier": "", "type": "GridCoverage2D", "declarator": "grid", "var_name": "grid"}, {"original_string": "Set<String> validSRS;", "modifier": "", "type": "Set<String>", "declarator": "validSRS", "var_name": "validSRS"}, {"original_string": "ReferencedEnvelope bounds;", "modifier": "", "type": "ReferencedEnvelope", "declarator": "bounds", "var_name": "bounds"}, {"original_string": "ReferencedEnvelope requestedEnvelope;", "modifier": "", "type": "ReferencedEnvelope", "declarator": "requestedEnvelope", "var_name": "requestedEnvelope"}, {"original_string": "int width;", "modifier": "", "type": "int", "declarator": "width", "var_name": "width"}, {"original_string": "int height;", "modifier": "", "type": "int", "declarator": "height", "var_name": "height"}, {"original_string": "CoordinateReferenceSystem requestCRS;", "modifier": "", "type": "CoordinateReferenceSystem", "declarator": "requestCRS", "var_name": "requestCRS"}], "methods": [{"identifier": "WMSCoverageReader", "parameters": "(WebMapServer wms, Layer layer)", "modifiers": "public", "return": "", "signature": " WMSCoverageReader(WebMapServer wms, Layer layer)", "full_signature": "public  WMSCoverageReader(WebMapServer wms, Layer layer)", "class_method_signature": "WMSCoverageReader.WMSCoverageReader(WebMapServer wms, Layer layer)", "testcase": false, "constructor": true}, {"identifier": "addLayer", "parameters": "(Layer layer)", "modifiers": "", "return": "void", "signature": "void addLayer(Layer layer)", "full_signature": " void addLayer(Layer layer)", "class_method_signature": "WMSCoverageReader.addLayer(Layer layer)", "testcase": false, "constructor": false}, {"identifier": "getFeatureInfo", "parameters": "(DirectPosition2D pos, String infoFormat, int featureCount, GetMapRequest getmap)", "modifiers": "public", "return": "InputStream", "signature": "InputStream getFeatureInfo(DirectPosition2D pos, String infoFormat, int featureCount, GetMapRequest getmap)", "full_signature": "public InputStream getFeatureInfo(DirectPosition2D pos, String infoFormat, int featureCount, GetMapRequest getmap)", "class_method_signature": "WMSCoverageReader.getFeatureInfo(DirectPosition2D pos, String infoFormat, int featureCount, GetMapRequest getmap)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(GeneralParameterValue[] parameters)", "modifiers": "@Override public", "return": "GridCoverage2D", "signature": "GridCoverage2D read(GeneralParameterValue[] parameters)", "full_signature": "@Override public GridCoverage2D read(GeneralParameterValue[] parameters)", "class_method_signature": "WMSCoverageReader.read(GeneralParameterValue[] parameters)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "(ReferencedEnvelope requestedEnvelope, int width, int height, Color backgroundColor)", "modifiers": "", "return": "GridCoverage2D", "signature": "GridCoverage2D getMap(ReferencedEnvelope requestedEnvelope, int width, int height, Color backgroundColor)", "full_signature": " GridCoverage2D getMap(ReferencedEnvelope requestedEnvelope, int width, int height, Color backgroundColor)", "class_method_signature": "WMSCoverageReader.getMap(ReferencedEnvelope requestedEnvelope, int width, int height, Color backgroundColor)", "testcase": false, "constructor": false}, {"identifier": "initMapRequest", "parameters": "(ReferencedEnvelope bbox, int width, int height, Color backgroundColor)", "modifiers": "", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope initMapRequest(ReferencedEnvelope bbox, int width, int height, Color backgroundColor)", "full_signature": " ReferencedEnvelope initMapRequest(ReferencedEnvelope bbox, int width, int height, Color backgroundColor)", "class_method_signature": "WMSCoverageReader.initMapRequest(ReferencedEnvelope bbox, int width, int height, Color backgroundColor)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "WMSCoverageReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "updateBounds", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateBounds()", "full_signature": "public void updateBounds()", "class_method_signature": "WMSCoverageReader.updateBounds()", "testcase": false, "constructor": false}, {"identifier": "reference", "parameters": "(Envelope envelope)", "modifiers": "", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope reference(Envelope envelope)", "full_signature": " ReferencedEnvelope reference(Envelope envelope)", "class_method_signature": "WMSCoverageReader.reference(Envelope envelope)", "testcase": false, "constructor": false}, {"identifier": "reference", "parameters": "(GeneralEnvelope ge)", "modifiers": "", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope reference(GeneralEnvelope ge)", "full_signature": " ReferencedEnvelope reference(GeneralEnvelope ge)", "class_method_signature": "WMSCoverageReader.reference(GeneralEnvelope ge)", "testcase": false, "constructor": false}, {"identifier": "getMetadataNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getMetadataNames()", "full_signature": "@Override public String[] getMetadataNames()", "class_method_signature": "WMSCoverageReader.getMetadataNames()", "testcase": false, "constructor": false}, {"identifier": "getMetadataValue", "parameters": "(String name)", "modifiers": "@Override public", "return": "String", "signature": "String getMetadataValue(String name)", "full_signature": "@Override public String getMetadataValue(String name)", "class_method_signature": "WMSCoverageReader.getMetadataValue(String name)", "testcase": false, "constructor": false}], "file": "modules/extension/wms/src/main/java/org/geotools/map/WMSCoverageReader.java"}, "focal_method": {"identifier": "read", "parameters": "(GeneralParameterValue[] parameters)", "modifiers": "@Override public", "return": "GridCoverage2D", "body": "@Override\n    public GridCoverage2D read(GeneralParameterValue[] parameters)\n            throws IllegalArgumentException, IOException {\n        // try to get request params from the request\n        Envelope requestedEnvelope = null;\n        int width = -1;\n        int height = -1;\n        Color backgroundColor = null;\n        if (parameters != null) {\n            for (GeneralParameterValue param : parameters) {\n                final ReferenceIdentifier name = param.getDescriptor().getName();\n                if (name.equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName())) {\n                    final GridGeometry2D gg = (GridGeometry2D) ((ParameterValue) param)\n                            .getValue();\n                    requestedEnvelope = gg.getEnvelope();\n                    // the range high value is the highest pixel included in the raster,\n                    // the actual width and height is one more than that\n                    width = gg.getGridRange().getHigh(0) + 1;\n                    height = gg.getGridRange().getHigh(1) + 1;\n                } else if(name.equals(AbstractGridFormat.BACKGROUND_COLOR.getName())) {\n                    backgroundColor = (Color)  ((ParameterValue) param).getValue();\n                }\n            }\n        }\n\n        // fill in a reasonable default if we did not manage to get the params\n        if (requestedEnvelope == null) {\n            requestedEnvelope = getOriginalEnvelope();\n            width = 640;\n            height = (int) Math.round(requestedEnvelope.getSpan(1)\n                    / requestedEnvelope.getSpan(0) * 640);\n        }\n\n        // if the structure did not change reuse the same response\n        if (grid != null && grid.getGridGeometry().getGridRange2D().getWidth() == width\n                && grid.getGridGeometry().getGridRange2D().getHeight() == height\n                && grid.getEnvelope().equals(requestedEnvelope))\n            return grid;\n\n        grid = getMap(reference(requestedEnvelope), width, height, backgroundColor);\n        return grid;\n    }", "signature": "GridCoverage2D read(GeneralParameterValue[] parameters)", "full_signature": "@Override public GridCoverage2D read(GeneralParameterValue[] parameters)", "class_method_signature": "WMSCoverageReader.read(GeneralParameterValue[] parameters)", "testcase": false, "constructor": false, "invocations": ["getName", "getDescriptor", "equals", "getName", "getValue", "getEnvelope", "getHigh", "getGridRange", "getHigh", "getGridRange", "equals", "getName", "getValue", "getOriginalEnvelope", "round", "getSpan", "getSpan", "getWidth", "getGridRange2D", "getGridGeometry", "getHeight", "getGridRange2D", "getGridGeometry", "equals", "getEnvelope", "getMap", "reference"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}