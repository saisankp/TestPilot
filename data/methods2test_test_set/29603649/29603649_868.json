{"test_class": {"identifier": "ClassFilePathAssemblerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PARENT_DIRECTORY = \"config/something\";", "modifier": "private static final", "type": "String", "declarator": "PARENT_DIRECTORY = \"config/something\"", "var_name": "PARENT_DIRECTORY"}, {"original_string": "private static final String SIMPLE_CLASS_NAME = \"ClassName\";", "modifier": "private static final", "type": "String", "declarator": "SIMPLE_CLASS_NAME = \"ClassName\"", "var_name": "SIMPLE_CLASS_NAME"}, {"original_string": "private static final String FILE_NAME = SIMPLE_CLASS_NAME + \".class\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = SIMPLE_CLASS_NAME + \".class\"", "var_name": "FILE_NAME"}, {"original_string": "private static final String EXCEPTION_MESSAGE = \"exception\";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_MESSAGE = \"exception\"", "var_name": "EXCEPTION_MESSAGE"}, {"original_string": "private static final String PACKAGE_NAME = \"com.epam.wilma\";", "modifier": "private static final", "type": "String", "declarator": "PACKAGE_NAME = \"com.epam.wilma\"", "var_name": "PACKAGE_NAME"}, {"original_string": "@Mock\n    private JavaClassFactory javaClassFactory;", "modifier": "@Mock\n    private", "type": "JavaClassFactory", "declarator": "javaClassFactory", "var_name": "javaClassFactory"}, {"original_string": "@Mock\n    private JavaClass javaClass;", "modifier": "@Mock\n    private", "type": "JavaClass", "declarator": "javaClass", "var_name": "javaClass"}, {"original_string": "@Mock\n    private FileFactory fileFactory;", "modifier": "@Mock\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@Mock\n    private InputStream classFile;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "classFile", "var_name": "classFile"}, {"original_string": "@InjectMocks\n    private ClassFilePathAssembler underTest;", "modifier": "@InjectMocks\n    private", "type": "ClassFilePathAssembler", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/stub/upload/helper/ClassFilePathAssemblerTest.java"}, "test_case": {"identifier": "testCreateFilePathShouldReturnProperPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateFilePathShouldReturnProperPath() throws IOException {\n        //GIVEN\n        String expected = PARENT_DIRECTORY + \"/\" + PACKAGE_NAME.replace(\".\", \"/\") + \"/\" + SIMPLE_CLASS_NAME;\n        given(fileFactory.createFile(FILE_NAME)).willReturn(file);\n        given(file.getParent()).willReturn(PARENT_DIRECTORY);\n        given(file.getName()).willReturn(SIMPLE_CLASS_NAME);\n        given(javaClassFactory.createJavaClass(classFile, FILE_NAME)).willReturn(javaClass);\n        given(javaClass.getPackageName()).willReturn(PACKAGE_NAME);\n        given(javaClass.getClassName()).willReturn(PACKAGE_NAME + \".\" + SIMPLE_CLASS_NAME);\n        //WHEN\n        String result = underTest.createFilePath(classFile, FILE_NAME, EXCEPTION_MESSAGE);\n        //THEN\n        assertEquals(result, expected);\n        verify(fileFactory).createFile(FILE_NAME);\n        verify(file).getParent();\n        verify(file).getName();\n        verify(javaClassFactory).createJavaClass(classFile, FILE_NAME);\n        verify(javaClass).getPackageName();\n    }", "signature": "void testCreateFilePathShouldReturnProperPath()", "full_signature": "@Test public void testCreateFilePathShouldReturnProperPath()", "class_method_signature": "ClassFilePathAssemblerTest.testCreateFilePathShouldReturnProperPath()", "testcase": true, "constructor": false, "invocations": ["replace", "willReturn", "given", "createFile", "willReturn", "given", "getParent", "willReturn", "given", "getName", "willReturn", "given", "createJavaClass", "willReturn", "given", "getPackageName", "willReturn", "given", "getClassName", "createFilePath", "assertEquals", "createFile", "verify", "getParent", "verify", "getName", "verify", "createJavaClass", "verify", "getPackageName", "verify"]}, "focal_class": {"identifier": "ClassFilePathAssembler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FORWARDSLASH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "FORWARDSLASH = \"/\"", "var_name": "FORWARDSLASH"}, {"original_string": "private static final String CLASS_FORMAT_EXCEPTION_MESSAGE = \"'%s' has invalid class format.\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_FORMAT_EXCEPTION_MESSAGE = \"'%s' has invalid class format.\"", "var_name": "CLASS_FORMAT_EXCEPTION_MESSAGE"}, {"original_string": "@Autowired\n    private JavaClassFactory javaClassFactory;", "modifier": "@Autowired\n    private", "type": "JavaClassFactory", "declarator": "javaClassFactory", "var_name": "javaClassFactory"}, {"original_string": "@Autowired\n    private FileFactory fileFactory;", "modifier": "@Autowired\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}], "methods": [{"identifier": "createFilePath", "parameters": "(final InputStream classFile, final String fileName, final String exceptionMessage)", "modifiers": "public", "return": "String", "signature": "String createFilePath(final InputStream classFile, final String fileName, final String exceptionMessage)", "full_signature": "public String createFilePath(final InputStream classFile, final String fileName, final String exceptionMessage)", "class_method_signature": "ClassFilePathAssembler.createFilePath(final InputStream classFile, final String fileName, final String exceptionMessage)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/stub/upload/helper/ClassFilePathAssembler.java"}, "focal_method": {"identifier": "createFilePath", "parameters": "(final InputStream classFile, final String fileName, final String exceptionMessage)", "modifiers": "public", "return": "String", "body": "public String createFilePath(final InputStream classFile, final String fileName, final String exceptionMessage) {\n        String filePath = null;\n        File file = fileFactory.createFile(fileName);\n        String folderPart = file.getParent();\n        String filePart = file.getName();\n        String packageName;\n        try {\n            JavaClass javaClass = javaClassFactory.createJavaClass(classFile, fileName);\n            packageName = javaClass.getPackageName();\n            String packageAsFolderName = packageName.replace('.', '/');\n            String folderStructure = folderPart + FORWARDSLASH + packageAsFolderName;\n            filePath = folderStructure + FORWARDSLASH + filePart;\n        } catch (IOException e) {\n            throw new CannotUploadExternalResourceException(exceptionMessage + fileName, e);\n        } catch (ClassFormatException e) {\n            throw new CannotUploadExternalResourceException(exceptionMessage + String.format(CLASS_FORMAT_EXCEPTION_MESSAGE, fileName), e);\n        }\n        return filePath;\n    }", "signature": "String createFilePath(final InputStream classFile, final String fileName, final String exceptionMessage)", "full_signature": "public String createFilePath(final InputStream classFile, final String fileName, final String exceptionMessage)", "class_method_signature": "ClassFilePathAssembler.createFilePath(final InputStream classFile, final String fileName, final String exceptionMessage)", "testcase": false, "constructor": false, "invocations": ["createFile", "getParent", "getName", "createJavaClass", "getPackageName", "replace", "format"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}