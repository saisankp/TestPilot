{"test_class": {"identifier": "ConfigUpdaterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@TempDir\n    public static Path tempDir;", "modifier": "@TempDir\n    public static", "type": "Path", "declarator": "tempDir", "var_name": "tempDir"}, {"original_string": "private static File oldConfig;", "modifier": "private static", "type": "File", "declarator": "oldConfig", "var_name": "oldConfig"}, {"original_string": "private static File oldBungeeConfig;", "modifier": "private static", "type": "File", "declarator": "oldBungeeConfig", "var_name": "oldBungeeConfig"}, {"original_string": "private static Path newConfig;", "modifier": "private static", "type": "Path", "declarator": "newConfig", "var_name": "newConfig"}, {"original_string": "private static Path newBungeeConfig;", "modifier": "private static", "type": "Path", "declarator": "newBungeeConfig", "var_name": "newBungeeConfig"}, {"original_string": "private static ConfigUpdater UNDER_TEST;", "modifier": "private static", "type": "ConfigUpdater", "declarator": "UNDER_TEST", "var_name": "UNDER_TEST"}, {"original_string": "private static ErrorLogger errorLogger;", "modifier": "private static", "type": "ErrorLogger", "declarator": "errorLogger", "var_name": "errorLogger"}], "file": "Plan/common/src/test/java/com/djrapitops/plan/settings/config/changes/ConfigUpdaterTest.java"}, "test_case": {"identifier": "proxyConfigIsPatchedCorrectly", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void proxyConfigIsPatchedCorrectly() throws IOException, IllegalAccessException {\n        Path config = tempDir.resolve(\"oldconfig.yml\");\n        Files.copy(oldBungeeConfig.toPath(), config, StandardCopyOption.REPLACE_EXISTING);\n\n        PlanConfig planConfig = new PlanConfig(config.toFile(), null, null, new TestPluginLogger());\n\n        UNDER_TEST.applyConfigUpdate(planConfig);\n\n        // Ensure that added settings are present\n        copyMissingFrom(planConfig, newBungeeConfig);\n\n        Collection<Setting> settings = ConfigSettingKeyTest.getProxySettings();\n        ConfigSettingKeyTest.assertValidDefaultValuesForAllSettings(planConfig, settings);\n    }", "signature": "void proxyConfigIsPatchedCorrectly()", "full_signature": "@Test void proxyConfigIsPatchedCorrectly()", "class_method_signature": "ConfigUpdaterTest.proxyConfigIsPatchedCorrectly()", "testcase": true, "constructor": false, "invocations": ["resolve", "copy", "toPath", "toFile", "applyConfigUpdate", "copyMissingFrom", "getProxySettings", "assertValidDefaultValuesForAllSettings"]}, "focal_class": {"identifier": "ConfigUpdater", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PluginLogger logger;", "modifier": "private final", "type": "PluginLogger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private final ErrorLogger errorLogger;", "modifier": "private final", "type": "ErrorLogger", "declarator": "errorLogger", "var_name": "errorLogger"}], "methods": [{"identifier": "ConfigUpdater", "parameters": "(\n            PluginLogger logger,\n            ErrorLogger errorLogger\n    )", "modifiers": "@Inject public", "return": "", "signature": " ConfigUpdater(\n            PluginLogger logger,\n            ErrorLogger errorLogger\n    )", "full_signature": "@Inject public  ConfigUpdater(\n            PluginLogger logger,\n            ErrorLogger errorLogger\n    )", "class_method_signature": "ConfigUpdater.ConfigUpdater(\n            PluginLogger logger,\n            ErrorLogger errorLogger\n    )", "testcase": false, "constructor": true}, {"identifier": "applyConfigUpdate", "parameters": "(Config config)", "modifiers": "public", "return": "void", "signature": "void applyConfigUpdate(Config config)", "full_signature": "public void applyConfigUpdate(Config config)", "class_method_signature": "ConfigUpdater.applyConfigUpdate(Config config)", "testcase": false, "constructor": false}, {"identifier": "configEnhancementPatch", "parameters": "()", "modifiers": "", "return": "ConfigChange[]", "signature": "ConfigChange[] configEnhancementPatch()", "full_signature": " ConfigChange[] configEnhancementPatch()", "class_method_signature": "ConfigUpdater.configEnhancementPatch()", "testcase": false, "constructor": false}, {"identifier": "applyChanges", "parameters": "(Config config, ConfigChange[] changes)", "modifiers": "private", "return": "void", "signature": "void applyChanges(Config config, ConfigChange[] changes)", "full_signature": "private void applyChanges(Config config, ConfigChange[] changes)", "class_method_signature": "ConfigUpdater.applyChanges(Config config, ConfigChange[] changes)", "testcase": false, "constructor": false}], "file": "Plan/common/src/main/java/com/djrapitops/plan/settings/config/changes/ConfigUpdater.java"}, "focal_method": {"identifier": "applyConfigUpdate", "parameters": "(Config config)", "modifiers": "public", "return": "void", "body": "public void applyConfigUpdate(Config config) throws IOException {\n        ConfigChange[] configEnhancementsPatch = configEnhancementPatch();\n        applyChanges(config, configEnhancementsPatch);\n        config.save();\n    }", "signature": "void applyConfigUpdate(Config config)", "full_signature": "public void applyConfigUpdate(Config config)", "class_method_signature": "ConfigUpdater.applyConfigUpdate(Config config)", "testcase": false, "constructor": false, "invocations": ["configEnhancementPatch", "applyChanges", "save"]}, "repository": {"repo_id": 75960287, "url": "https://github.com/plan-player-analytics/Plan", "stars": 172, "created": "12/8/2016 5:34:11 PM +00:00", "updates": "2020-01-27T14:34:49+00:00", "fork": "False", "license": "licensed"}}