{"test_class": {"identifier": "ReflectionUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataElement dataElementA;", "modifier": "private", "type": "DataElement", "declarator": "dataElementA", "var_name": "dataElementA"}], "file": "dhis-2/dhis-support/dhis-support-system/src/test/java/org/hisp/dhis/system/util/ReflectionUtilsTest.java"}, "test_case": {"identifier": "testGetProperty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetProperty()\n    {\n        assertEquals( \"NameA\", getProperty( dataElementA, \"name\" ) );\n        assertNull( getProperty( dataElementA, \"color\" ) );\n    }", "signature": "void testGetProperty()", "full_signature": "@Test public void testGetProperty()", "class_method_signature": "ReflectionUtilsTest.testGetProperty()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getProperty", "assertNull", "getProperty"]}, "focal_class": {"identifier": "ReflectionUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final List<String> SHARING_PROPS = Arrays.asList(\n            \"publicAccess\", \"externalAccess\", \"userGroupAccesses\", \"userAccesses\" );", "modifier": "public static final", "type": "List<String>", "declarator": "SHARING_PROPS = Arrays.asList(\n            \"publicAccess\", \"externalAccess\", \"userGroupAccesses\", \"userAccesses\" )", "var_name": "SHARING_PROPS"}], "methods": [{"identifier": "getId", "parameters": "( Object object )", "modifiers": "public static", "return": "long", "signature": "long getId( Object object )", "full_signature": "public static long getId( Object object )", "class_method_signature": "ReflectionUtils.getId( Object object )", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "( Object object, String property )", "modifiers": "public static", "return": "String", "signature": "String getProperty( Object object, String property )", "full_signature": "public static String getProperty( Object object, String property )", "class_method_signature": "ReflectionUtils.getProperty( Object object, String property )", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "( Object object, String name, String value )", "modifiers": "public static", "return": "void", "signature": "void setProperty( Object object, String name, String value )", "full_signature": "public static void setProperty( Object object, String name, String value )", "class_method_signature": "ReflectionUtils.setProperty( Object object, String name, String value )", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "( Object object, String namePrefix, String name, String value )", "modifiers": "public static", "return": "void", "signature": "void setProperty( Object object, String namePrefix, String name, String value )", "full_signature": "public static void setProperty( Object object, String namePrefix, String name, String value )", "class_method_signature": "ReflectionUtils.setProperty( Object object, String namePrefix, String name, String value )", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "( Object object )", "modifiers": "public static", "return": "String", "signature": "String getClassName( Object object )", "full_signature": "public static String getClassName( Object object )", "class_method_signature": "ReflectionUtils.getClassName( Object object )", "testcase": false, "constructor": false}, {"identifier": "isCollection", "parameters": "( Object value )", "modifiers": "public static", "return": "boolean", "signature": "boolean isCollection( Object value )", "full_signature": "public static boolean isCollection( Object value )", "class_method_signature": "ReflectionUtils.isCollection( Object value )", "testcase": false, "constructor": false}, {"identifier": "isCollection", "parameters": "( String fieldName, Object object, Class<?> type )", "modifiers": "public static", "return": "boolean", "signature": "boolean isCollection( String fieldName, Object object, Class<?> type )", "full_signature": "public static boolean isCollection( String fieldName, Object object, Class<?> type )", "class_method_signature": "ReflectionUtils.isCollection( String fieldName, Object object, Class<?> type )", "testcase": false, "constructor": false}, {"identifier": "isCollection", "parameters": "( String fieldName, Object object, Class<?> type, Class<? extends Annotation> annotation )", "modifiers": "public static", "return": "boolean", "signature": "boolean isCollection( String fieldName, Object object, Class<?> type, Class<? extends Annotation> annotation )", "full_signature": "public static boolean isCollection( String fieldName, Object object, Class<?> type, Class<? extends Annotation> annotation )", "class_method_signature": "ReflectionUtils.isCollection( String fieldName, Object object, Class<?> type, Class<? extends Annotation> annotation )", "testcase": false, "constructor": false}, {"identifier": "findGetterMethod", "parameters": "( String fieldName, Object target )", "modifiers": "public static", "return": "Method", "signature": "Method findGetterMethod( String fieldName, Object target )", "full_signature": "public static Method findGetterMethod( String fieldName, Object target )", "class_method_signature": "ReflectionUtils.findGetterMethod( String fieldName, Object target )", "testcase": false, "constructor": false}, {"identifier": "findGetterMethod", "parameters": "( String fieldName, Class<?> clazz )", "modifiers": "public static", "return": "Method", "signature": "Method findGetterMethod( String fieldName, Class<?> clazz )", "full_signature": "public static Method findGetterMethod( String fieldName, Class<?> clazz )", "class_method_signature": "ReflectionUtils.findGetterMethod( String fieldName, Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "invokeGetterMethod", "parameters": "( String fieldName, Object target )", "modifiers": "public static", "return": "T", "signature": "T invokeGetterMethod( String fieldName, Object target )", "full_signature": "public static T invokeGetterMethod( String fieldName, Object target )", "class_method_signature": "ReflectionUtils.invokeGetterMethod( String fieldName, Object target )", "testcase": false, "constructor": false}, {"identifier": "findSetterMethod", "parameters": "( String fieldName, Object target )", "modifiers": "public static", "return": "Method", "signature": "Method findSetterMethod( String fieldName, Object target )", "full_signature": "public static Method findSetterMethod( String fieldName, Object target )", "class_method_signature": "ReflectionUtils.findSetterMethod( String fieldName, Object target )", "testcase": false, "constructor": false}, {"identifier": "invokeSetterMethod", "parameters": "( String fieldName, Object target, Object... args )", "modifiers": "public static", "return": "T", "signature": "T invokeSetterMethod( String fieldName, Object target, Object... args )", "full_signature": "public static T invokeSetterMethod( String fieldName, Object target, Object... args )", "class_method_signature": "ReflectionUtils.invokeSetterMethod( String fieldName, Object target, Object... args )", "testcase": false, "constructor": false}, {"identifier": "isType", "parameters": "( Field field, Class<?> clazz )", "modifiers": "public static", "return": "boolean", "signature": "boolean isType( Field field, Class<?> clazz )", "full_signature": "public static boolean isType( Field field, Class<?> clazz )", "class_method_signature": "ReflectionUtils.isType( Field field, Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "_findField", "parameters": "( Class<?> clazz, String name )", "modifiers": "private static", "return": "Field", "signature": "Field _findField( Class<?> clazz, String name )", "full_signature": "private static Field _findField( Class<?> clazz, String name )", "class_method_signature": "ReflectionUtils._findField( Class<?> clazz, String name )", "testcase": false, "constructor": false}, {"identifier": "_findField", "parameters": "( Class<?> clazz, String name, Class<?> type )", "modifiers": "private static", "return": "Field", "signature": "Field _findField( Class<?> clazz, String name, Class<?> type )", "full_signature": "private static Field _findField( Class<?> clazz, String name, Class<?> type )", "class_method_signature": "ReflectionUtils._findField( Class<?> clazz, String name, Class<?> type )", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "( Class<?> clazz )", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllFields( Class<?> clazz )", "full_signature": "public static List<Field> getAllFields( Class<?> clazz )", "class_method_signature": "ReflectionUtils.getAllFields( Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "getAllFieldNames", "parameters": "( Class<?> klass )", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getAllFieldNames( Class<?> klass )", "full_signature": "public static List<String> getAllFieldNames( Class<?> klass )", "class_method_signature": "ReflectionUtils.getAllFieldNames( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "_findMethod", "parameters": "( Class<?> clazz, String name )", "modifiers": "private static", "return": "Method", "signature": "Method _findMethod( Class<?> clazz, String name )", "full_signature": "private static Method _findMethod( Class<?> clazz, String name )", "class_method_signature": "ReflectionUtils._findMethod( Class<?> clazz, String name )", "testcase": false, "constructor": false}, {"identifier": "_findMethod", "parameters": "( Class<?> clazz, String name, Class<?>... paramTypes )", "modifiers": "private static", "return": "Method", "signature": "Method _findMethod( Class<?> clazz, String name, Class<?>... paramTypes )", "full_signature": "private static Method _findMethod( Class<?> clazz, String name, Class<?>... paramTypes )", "class_method_signature": "ReflectionUtils._findMethod( Class<?> clazz, String name, Class<?>... paramTypes )", "testcase": false, "constructor": false}, {"identifier": "invokeMethod", "parameters": "( Object target, Method method, Object... args )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "T", "signature": "T invokeMethod( Object target, Method method, Object... args )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static T invokeMethod( Object target, Method method, Object... args )", "class_method_signature": "ReflectionUtils.invokeMethod( Object target, Method method, Object... args )", "testcase": false, "constructor": false}, {"identifier": "collectFields", "parameters": "( Class<?> clazz, Predicate<Field> predicate )", "modifiers": "public static", "return": "Collection<Field>", "signature": "Collection<Field> collectFields( Class<?> clazz, Predicate<Field> predicate )", "full_signature": "public static Collection<Field> collectFields( Class<?> clazz, Predicate<Field> predicate )", "class_method_signature": "ReflectionUtils.collectFields( Class<?> clazz, Predicate<Field> predicate )", "testcase": false, "constructor": false}, {"identifier": "newCollectionInstance", "parameters": "( Class<?> clazz )", "modifiers": "public static", "return": "Collection<E>", "signature": "Collection<E> newCollectionInstance( Class<?> clazz )", "full_signature": "public static Collection<E> newCollectionInstance( Class<?> clazz )", "class_method_signature": "ReflectionUtils.newCollectionInstance( Class<?> clazz )", "testcase": false, "constructor": false}, {"identifier": "getRealClass", "parameters": "( Class<?> klass )", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getRealClass( Class<?> klass )", "full_signature": "public static Class<?> getRealClass( Class<?> klass )", "class_method_signature": "ReflectionUtils.getRealClass( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "getMethods", "parameters": "( Class<?> klass )", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getMethods( Class<?> klass )", "full_signature": "public static List<Method> getMethods( Class<?> klass )", "class_method_signature": "ReflectionUtils.getMethods( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "getMethodsMultimap", "parameters": "( Class<?> klass )", "modifiers": "public static", "return": "Multimap<String, Method>", "signature": "Multimap<String, Method> getMethodsMultimap( Class<?> klass )", "full_signature": "public static Multimap<String, Method> getMethodsMultimap( Class<?> klass )", "class_method_signature": "ReflectionUtils.getMethodsMultimap( Class<?> klass )", "testcase": false, "constructor": false}, {"identifier": "isSharingProperty", "parameters": "( Property property )", "modifiers": "public static", "return": "boolean", "signature": "boolean isSharingProperty( Property property )", "full_signature": "public static boolean isSharingProperty( Property property )", "class_method_signature": "ReflectionUtils.isSharingProperty( Property property )", "testcase": false, "constructor": false}, {"identifier": "isTranslationProperty", "parameters": "( Property property )", "modifiers": "public static", "return": "boolean", "signature": "boolean isTranslationProperty( Property property )", "full_signature": "public static boolean isTranslationProperty( Property property )", "class_method_signature": "ReflectionUtils.isTranslationProperty( Property property )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/util/ReflectionUtils.java"}, "focal_method": {"identifier": "getProperty", "parameters": "( Object object, String property )", "modifiers": "public static", "return": "String", "body": "public static String getProperty( Object object, String property )\n    {\n        try\n        {\n            property = property.substring( 0, 1 ).toUpperCase() + property.substring( 1, property.length() );\n\n            Method method = object.getClass().getMethod( \"get\" + property );\n\n            return (String) method.invoke( object );\n        }\n        catch ( NoSuchMethodException ex )\n        {\n            return null;\n        }\n        catch ( InvocationTargetException ex )\n        {\n            return null;\n        }\n        catch ( IllegalAccessException ex )\n        {\n            return null;\n        }\n    }", "signature": "String getProperty( Object object, String property )", "full_signature": "public static String getProperty( Object object, String property )", "class_method_signature": "ReflectionUtils.getProperty( Object object, String property )", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "substring", "substring", "length", "getMethod", "getClass", "invoke"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}