{"test_class": {"identifier": "DefaultTaskExecutionServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultTaskExecutionService victim = new DefaultTaskExecutionService();", "modifier": "private", "type": "DefaultTaskExecutionService", "declarator": "victim = new DefaultTaskExecutionService()", "var_name": "victim"}, {"original_string": "private TestTaskParameter parameters = new TestTaskParameter();", "modifier": "private", "type": "TestTaskParameter", "declarator": "parameters = new TestTaskParameter()", "var_name": "parameters"}, {"original_string": "private SejdaContext context = mock(DefaultSejdaContext.class);", "modifier": "private", "type": "SejdaContext", "declarator": "context = mock(DefaultSejdaContext.class)", "var_name": "context"}, {"original_string": "private Task task = mock(Task.class);", "modifier": "private", "type": "Task", "declarator": "task = mock(Task.class)", "var_name": "task"}], "file": "sejda-core/src/test/java/org/sejda/core/service/DefaultTaskExecutionServiceTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() {\n        TestListenerStart listener = TestListenerFactory.newStartListener();\n        GlobalNotificationContext.getContext().addListener(listener);\n        victim.execute(parameters);\n        assertTrue(listener.isStarted());\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "DefaultTaskExecutionServiceTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["newStartListener", "addListener", "getContext", "execute", "assertTrue", "isStarted"]}, "focal_class": {"identifier": "DefaultTaskExecutionService", "superclass": "", "interfaces": "implements TaskExecutionService", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultTaskExecutionService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultTaskExecutionService.class)", "var_name": "LOG"}, {"original_string": "private final SejdaContext context = new DefaultSejdaContext();", "modifier": "private final", "type": "SejdaContext", "declarator": "context = new DefaultSejdaContext()", "var_name": "context"}], "methods": [{"identifier": "execute", "parameters": "(TaskParameters parameters)", "modifiers": "@Override public", "return": "void", "signature": "void execute(TaskParameters parameters)", "full_signature": "@Override public void execute(TaskParameters parameters)", "class_method_signature": "DefaultTaskExecutionService.execute(TaskParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "executionFailed", "parameters": "(Exception e, TaskExecutionContext executionContext)", "modifiers": "private", "return": "void", "signature": "void executionFailed(Exception e, TaskExecutionContext executionContext)", "full_signature": "private void executionFailed(Exception e, TaskExecutionContext executionContext)", "class_method_signature": "DefaultTaskExecutionService.executionFailed(Exception e, TaskExecutionContext executionContext)", "testcase": false, "constructor": false}, {"identifier": "validateIfRequired", "parameters": "(TaskParameters parameters)", "modifiers": "private", "return": "void", "signature": "void validateIfRequired(TaskParameters parameters)", "full_signature": "private void validateIfRequired(TaskParameters parameters)", "class_method_signature": "DefaultTaskExecutionService.validateIfRequired(TaskParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(TaskParameters parameters)", "modifiers": "public", "return": "void", "signature": "void validate(TaskParameters parameters)", "full_signature": "public void validate(TaskParameters parameters)", "class_method_signature": "DefaultTaskExecutionService.validate(TaskParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "preExecution", "parameters": "(TaskExecutionContext context)", "modifiers": "private", "return": "void", "signature": "void preExecution(TaskExecutionContext context)", "full_signature": "private void preExecution(TaskExecutionContext context)", "class_method_signature": "DefaultTaskExecutionService.preExecution(TaskExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "postExecution", "parameters": "(TaskExecutionContext context)", "modifiers": "private", "return": "void", "signature": "void postExecution(TaskExecutionContext context)", "full_signature": "private void postExecution(TaskExecutionContext context)", "class_method_signature": "DefaultTaskExecutionService.postExecution(TaskExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "actualExecution", "parameters": "(TaskParameters parameters, TaskExecutionContext executionContext)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void actualExecution(TaskParameters parameters, TaskExecutionContext executionContext)", "full_signature": "@SuppressWarnings(\"unchecked\") private void actualExecution(TaskParameters parameters, TaskExecutionContext executionContext)", "class_method_signature": "DefaultTaskExecutionService.actualExecution(TaskParameters parameters, TaskExecutionContext executionContext)", "testcase": false, "constructor": false}], "file": "sejda-core/src/main/java/org/sejda/core/service/DefaultTaskExecutionService.java"}, "focal_method": {"identifier": "execute", "parameters": "(TaskParameters parameters)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(TaskParameters parameters) {\n        TaskExecutionContext executionContext = null;\n        LOG.trace(\"Starting execution for {}\", parameters);\n        try {\n            validateIfRequired(parameters);\n            executionContext = new TaskExecutionContext(context.getTask(parameters), parameters.isLenient());\n            LOG.info(\"Starting task ({}) execution.\", executionContext.task());\n            preExecution(executionContext);\n            actualExecution(parameters, executionContext);\n            postExecution(executionContext);\n        } catch (InvalidTaskParametersException i) {\n            LOG.error(\"Task execution failed due to invalid parameters: \" + String.join(\". \", i.getReasons()), i);\n            executionFailed(i, executionContext);\n        } catch (TaskException e) {\n            LOG.error(String.format(\"Task (%s) execution failed.\",\n                    ofNullable(executionContext).map(c -> c.task().toString()).orElse(\"\")), e);\n            executionFailed(e, executionContext);\n        } catch (RuntimeException e) {\n            executionFailed(e, executionContext);\n            throw e;\n        }\n    }", "signature": "void execute(TaskParameters parameters)", "full_signature": "@Override public void execute(TaskParameters parameters)", "class_method_signature": "DefaultTaskExecutionService.execute(TaskParameters parameters)", "testcase": false, "constructor": false, "invocations": ["trace", "validateIfRequired", "getTask", "isLenient", "info", "task", "preExecution", "actualExecution", "postExecution", "error", "join", "getReasons", "executionFailed", "error", "format", "orElse", "map", "ofNullable", "toString", "task", "executionFailed", "executionFailed"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}