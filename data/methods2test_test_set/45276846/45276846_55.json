{"test_class": {"identifier": "TestQueryFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public boolean isStressTest = false;", "modifier": "public", "type": "boolean", "declarator": "isStressTest = false", "var_name": "isStressTest"}, {"original_string": "final ServiceDocumentDescription description =\n            Builder.create().buildDescription(QueryFilterDocument.class);", "modifier": "final", "type": "ServiceDocumentDescription", "declarator": "description =\n            Builder.create().buildDescription(QueryFilterDocument.class)", "var_name": "description"}], "file": "xenon-common/src/test/java/com/vmware/xenon/services/common/TestQueryFilter.java"}, "test_case": {"identifier": "simpleConjunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleConjunction() {\n        Set<String> dnf = createDisjunctiveNormalForm(createSimpleConjunctionQuery());\n        assertEquals(1, dnf.size());\n        assertTrue(dnf.contains(\"c1=v1 AND c2=v2\"));\n    }", "signature": "void simpleConjunction()", "full_signature": "@Test public void simpleConjunction()", "class_method_signature": "TestQueryFilter.simpleConjunction()", "testcase": true, "constructor": false, "invocations": ["createDisjunctiveNormalForm", "createSimpleConjunctionQuery", "assertEquals", "size", "assertTrue", "contains"]}, "focal_class": {"identifier": "QueryFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final QueryFilter TRUE = new QueryFilter(StaticEvaluator.TRUE);", "modifier": "public static final", "type": "QueryFilter", "declarator": "TRUE = new QueryFilter(StaticEvaluator.TRUE)", "var_name": "TRUE"}, {"original_string": "public static final QueryFilter FALSE = new QueryFilter(StaticEvaluator.FALSE);", "modifier": "public static final", "type": "QueryFilter", "declarator": "FALSE = new QueryFilter(StaticEvaluator.FALSE)", "var_name": "FALSE"}, {"original_string": "private final Evaluator evaluator;", "modifier": "private final", "type": "Evaluator", "declarator": "evaluator", "var_name": "evaluator"}], "methods": [{"identifier": "create", "parameters": "(Query q)", "modifiers": "public static", "return": "QueryFilter", "signature": "QueryFilter create(Query q)", "full_signature": "public static QueryFilter create(Query q)", "class_method_signature": "QueryFilter.create(Query q)", "testcase": false, "constructor": false}, {"identifier": "QueryFilter", "parameters": "(Evaluator evaluator)", "modifiers": "private", "return": "", "signature": " QueryFilter(Evaluator evaluator)", "full_signature": "private  QueryFilter(Evaluator evaluator)", "class_method_signature": "QueryFilter.QueryFilter(Evaluator evaluator)", "testcase": false, "constructor": true}, {"identifier": "evaluate", "parameters": "(ServiceDocument document, ServiceDocumentDescription description)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(ServiceDocument document, ServiceDocumentDescription description)", "full_signature": "public boolean evaluate(ServiceDocument document, ServiceDocumentDescription description)", "class_method_signature": "QueryFilter.evaluate(ServiceDocument document, ServiceDocumentDescription description)", "testcase": false, "constructor": false}, {"identifier": "createDisjunctiveNormalForm", "parameters": "(Query q)", "modifiers": "static", "return": "List<Conjunction>", "signature": "List<Conjunction> createDisjunctiveNormalForm(Query q)", "full_signature": "static List<Conjunction> createDisjunctiveNormalForm(Query q)", "class_method_signature": "QueryFilter.createDisjunctiveNormalForm(Query q)", "testcase": false, "constructor": false}, {"identifier": "createDisjunctiveNormalForm", "parameters": "(Query q, ArrayList<Conjunction> prefixes, boolean negate)", "modifiers": "static", "return": "void", "signature": "void createDisjunctiveNormalForm(Query q, ArrayList<Conjunction> prefixes, boolean negate)", "full_signature": "static void createDisjunctiveNormalForm(Query q, ArrayList<Conjunction> prefixes, boolean negate)", "class_method_signature": "QueryFilter.createDisjunctiveNormalForm(Query q, ArrayList<Conjunction> prefixes, boolean negate)", "testcase": false, "constructor": false}, {"identifier": "findTopPropertyForDispatch", "parameters": "(Collection<Conjunction> dnf)", "modifiers": "private static", "return": "String", "signature": "String findTopPropertyForDispatch(Collection<Conjunction> dnf)", "full_signature": "private static String findTopPropertyForDispatch(Collection<Conjunction> dnf)", "class_method_signature": "QueryFilter.findTopPropertyForDispatch(Collection<Conjunction> dnf)", "testcase": false, "constructor": false}, {"identifier": "isTermNestedProperty", "parameters": "(Term term)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTermNestedProperty(Term term)", "full_signature": "private static boolean isTermNestedProperty(Term term)", "class_method_signature": "QueryFilter.isTermNestedProperty(Term term)", "testcase": false, "constructor": false}, {"identifier": "isTermEligibleForDispatch", "parameters": "(Term term)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTermEligibleForDispatch(Term term)", "full_signature": "private static boolean isTermEligibleForDispatch(Term term)", "class_method_signature": "QueryFilter.isTermEligibleForDispatch(Term term)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/services/common/QueryFilter.java"}, "focal_method": {"identifier": "createDisjunctiveNormalForm", "parameters": "(Query q)", "modifiers": "static", "return": "List<Conjunction>", "body": "static List<Conjunction> createDisjunctiveNormalForm(Query q) {\n        ArrayList<Conjunction> prefixes = new ArrayList<>();\n        createDisjunctiveNormalForm(q, prefixes, false);\n        return prefixes;\n    }", "signature": "List<Conjunction> createDisjunctiveNormalForm(Query q)", "full_signature": "static List<Conjunction> createDisjunctiveNormalForm(Query q)", "class_method_signature": "QueryFilter.createDisjunctiveNormalForm(Query q)", "testcase": false, "constructor": false, "invocations": ["createDisjunctiveNormalForm"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}