{"test_class": {"identifier": "MethodInvokeUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "instrumenter/src/test/java/com/offbynull/coroutines/instrumenter/asm/MethodInvokeUtilsTest.java"}, "test_case": {"identifier": "mustProperlyDetermineStackSizeForStaticMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mustProperlyDetermineStackSizeForStaticMethod() {\n        Type type = Type.getType(MethodUtils.getAccessibleMethod(Integer.class, \"decode\", String.class));\n        MethodInsnNode methodInsnNode = new MethodInsnNode(Opcodes.INVOKESTATIC, \"java/util/Integer\", \"decode\", type.getDescriptor(),\n                false);\n        int reqStackCount = MethodInvokeUtils.getArgumentCountRequiredForInvocation(methodInsnNode);\n\n        assertEquals(1, reqStackCount);\n    }", "signature": "void mustProperlyDetermineStackSizeForStaticMethod()", "full_signature": "@Test public void mustProperlyDetermineStackSizeForStaticMethod()", "class_method_signature": "MethodInvokeUtilsTest.mustProperlyDetermineStackSizeForStaticMethod()", "testcase": true, "constructor": false, "invocations": ["getType", "getAccessibleMethod", "getDescriptor", "getArgumentCountRequiredForInvocation", "assertEquals"]}, "focal_class": {"identifier": "MethodInvokeUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "MethodInvokeUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MethodInvokeUtils()", "full_signature": "private  MethodInvokeUtils()", "class_method_signature": "MethodInvokeUtils.MethodInvokeUtils()", "testcase": false, "constructor": true}, {"identifier": "getArgumentCountRequiredForInvocation", "parameters": "(AbstractInsnNode invokeNode)", "modifiers": "public static", "return": "int", "signature": "int getArgumentCountRequiredForInvocation(AbstractInsnNode invokeNode)", "full_signature": "public static int getArgumentCountRequiredForInvocation(AbstractInsnNode invokeNode)", "class_method_signature": "MethodInvokeUtils.getArgumentCountRequiredForInvocation(AbstractInsnNode invokeNode)", "testcase": false, "constructor": false}, {"identifier": "getReturnTypeOfInvocation", "parameters": "(AbstractInsnNode invokeNode)", "modifiers": "public static", "return": "Type", "signature": "Type getReturnTypeOfInvocation(AbstractInsnNode invokeNode)", "full_signature": "public static Type getReturnTypeOfInvocation(AbstractInsnNode invokeNode)", "class_method_signature": "MethodInvokeUtils.getReturnTypeOfInvocation(AbstractInsnNode invokeNode)", "testcase": false, "constructor": false}], "file": "instrumenter/src/main/java/com/offbynull/coroutines/instrumenter/asm/MethodInvokeUtils.java"}, "focal_method": {"identifier": "getArgumentCountRequiredForInvocation", "parameters": "(AbstractInsnNode invokeNode)", "modifiers": "public static", "return": "int", "body": "public static int getArgumentCountRequiredForInvocation(AbstractInsnNode invokeNode) {\n        Validate.notNull(invokeNode);\n\n        if (invokeNode instanceof MethodInsnNode) {\n            MethodInsnNode methodInsnNode = (MethodInsnNode) invokeNode;\n            int extra;\n            int paramCount;\n            \n            switch (methodInsnNode.getOpcode()) {\n                case Opcodes.INVOKEVIRTUAL:\n                case Opcodes.INVOKESPECIAL:\n                case Opcodes.INVOKEINTERFACE:\n                    extra = 1;\n                    break;\n                case Opcodes.INVOKESTATIC:\n                    extra = 0;\n                    break;\n                default:\n                    throw new IllegalArgumentException(); // unknown invocation type? probably badly generated instruction node\n            }\n            Type methodType = Type.getType(methodInsnNode.desc);\n            paramCount = methodType.getArgumentTypes().length;\n                    \n            return paramCount + extra;\n        } else if (invokeNode instanceof InvokeDynamicInsnNode) {\n            InvokeDynamicInsnNode invokeDynamicInsnNode = (InvokeDynamicInsnNode) invokeNode;\n            int paramCount;\n            \n            Type methodType = Type.getType(invokeDynamicInsnNode.desc);\n            paramCount = methodType.getArgumentTypes().length;\n            \n            return paramCount;\n        } else {\n            throw new IllegalArgumentException();\n        }\n    }", "signature": "int getArgumentCountRequiredForInvocation(AbstractInsnNode invokeNode)", "full_signature": "public static int getArgumentCountRequiredForInvocation(AbstractInsnNode invokeNode)", "class_method_signature": "MethodInvokeUtils.getArgumentCountRequiredForInvocation(AbstractInsnNode invokeNode)", "testcase": false, "constructor": false, "invocations": ["notNull", "getOpcode", "getType", "getArgumentTypes", "getType", "getArgumentTypes"]}, "repository": {"repo_id": 31940141, "url": "https://github.com/offbynull/coroutines", "language": "Java", "is_fork": false, "fork_count": 45, "stargazer_count": 287, "size": 841, "license": "licensed"}}