{"test_class": {"identifier": "AgentManagementNodeDataResolverTest", "superclass": "extends AbstractTaskRelocationTest", "interfaces": "", "fields": [{"original_string": "private final AgentDataReplicator agentDataReplicator = mock(AgentDataReplicator.class);", "modifier": "private final", "type": "AgentDataReplicator", "declarator": "agentDataReplicator = mock(AgentDataReplicator.class)", "var_name": "agentDataReplicator"}, {"original_string": "private final RelocationConfiguration relocationConfiguration = Archaius2Ext.newConfiguration(RelocationConfiguration.class,\n            \"titus.relocation.badNodeConditionPattern\", \".*MemoryFailure\"\n    );", "modifier": "private final", "type": "RelocationConfiguration", "declarator": "relocationConfiguration = Archaius2Ext.newConfiguration(RelocationConfiguration.class,\n            \"titus.relocation.badNodeConditionPattern\", \".*MemoryFailure\"\n    )", "var_name": "relocationConfiguration"}], "file": "titus-supplementary-component/task-relocation/src/test/java/com/netflix/titus/supplementary/relocation/connector/AgentManagementNodeDataResolverTest.java"}, "test_case": {"identifier": "testResolver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolver() {\n        assertThat(agentOperations.getInstanceGroups()).isNotNull();\n        assertThat(agentOperations.getInstanceGroups()).isNotEmpty();\n        AgentInstanceGroup agentInstanceGroup = agentOperations.getInstanceGroups().get(0);\n        List<AgentInstance> agentInstances = agentOperations.getAgentInstances(agentInstanceGroup.getId());\n        assertThat(agentInstances).isNotNull();\n        assertThat(agentInstances).isNotEmpty();\n        String k8sNodeId = agentInstances.get(0).getId();\n        V1Node k8sNode = TestDataFactory.newNode(k8sNodeId);\n        addNodeTaint(k8sNode, KubeConstants.TAINT_SCHEDULER, KubeConstants.TAINT_SCHEDULER_VALUE_FENZO, KubeConstants.TAINT_EFFECT_NO_EXECUTE);\n        addNodeCondition(k8sNode, \"CorrectableMemoryFailure\", \"True\");\n\n        AgentManagementNodeDataResolver resolver = new AgentManagementNodeDataResolver(agentOperations, agentDataReplicator, instance -> true,\n                relocationConfiguration, TestDataFactory.mockKubeApiFacade(k8sNode));\n\n        Map<String, Node> resolved = resolver.resolve();\n\n        int expectedCount = agentOperations.findAgentInstances(pair -> true).stream().mapToInt(p -> p.getRight().size()).sum();\n        assertThat(resolved).hasSize(expectedCount);\n\n        // Nothing is flagged yet\n        String instanceId = CollectionsExt.first(resolved.keySet());\n        assertThat(resolver.resolve().get(instanceId).isRelocationRequired()).isFalse();\n        assertThat(resolver.resolve().get(instanceId).isRelocationRequiredImmediately()).isFalse();\n        assertThat(resolver.resolve().get(instanceId).isRelocationNotAllowed()).isFalse();\n        assertThat(resolver.resolve().get(instanceId).isInBadCondition()).isFalse();\n\n        // Tag one as removable\n        relocationConnectorStubs.addInstanceAttribute(instanceId, RelocationAttributes.RELOCATION_REQUIRED, \"true\");\n        assertThat(resolver.resolve().get(instanceId).isRelocationRequired()).isTrue();\n        assertThat(resolver.resolve().get(instanceId).isRelocationRequiredImmediately()).isFalse();\n        assertThat(resolver.resolve().get(instanceId).isRelocationNotAllowed()).isFalse();\n        assertThat(resolver.resolve().get(instanceId).isInBadCondition()).isFalse();\n\n        // Now removable immediately\n        relocationConnectorStubs.addInstanceAttribute(instanceId, RelocationAttributes.RELOCATION_REQUIRED_IMMEDIATELY, \"true\");\n        assertThat(resolver.resolve().get(instanceId).isRelocationRequiredImmediately()).isTrue();\n        assertThat(resolver.resolve().get(instanceId).isRelocationNotAllowed()).isFalse();\n        assertThat(resolver.resolve().get(instanceId).isInBadCondition()).isFalse();\n\n        // Relocation not allowed\n        relocationConnectorStubs.addInstanceAttribute(instanceId, RelocationAttributes.RELOCATION_NOT_ALLOWED, \"true\");\n        assertThat(resolver.resolve().get(instanceId).isRelocationNotAllowed()).isTrue();\n        assertThat(resolver.resolve().get(instanceId).isInBadCondition()).isFalse();\n\n\n        // Bad Node condition detected on k8s node\n        assertThat(resolver.resolve().get(k8sNodeId).isInBadCondition()).isTrue();\n    }", "signature": "void testResolver()", "full_signature": "@Test public void testResolver()", "class_method_signature": "AgentManagementNodeDataResolverTest.testResolver()", "testcase": true, "constructor": false, "invocations": ["isNotNull", "assertThat", "getInstanceGroups", "isNotEmpty", "assertThat", "getInstanceGroups", "get", "getInstanceGroups", "getAgentInstances", "getId", "isNotNull", "assertThat", "isNotEmpty", "assertThat", "getId", "get", "newNode", "addNodeTaint", "addNodeCondition", "mockKubeApiFacade", "resolve", "sum", "mapToInt", "stream", "findAgentInstances", "size", "getRight", "hasSize", "assertThat", "first", "keySet", "isFalse", "assertThat", "isRelocationRequired", "get", "resolve", "isFalse", "assertThat", "isRelocationRequiredImmediately", "get", "resolve", "isFalse", "assertThat", "isRelocationNotAllowed", "get", "resolve", "isFalse", "assertThat", "isInBadCondition", "get", "resolve", "addInstanceAttribute", "isTrue", "assertThat", "isRelocationRequired", "get", "resolve", "isFalse", "assertThat", "isRelocationRequiredImmediately", "get", "resolve", "isFalse", "assertThat", "isRelocationNotAllowed", "get", "resolve", "isFalse", "assertThat", "isInBadCondition", "get", "resolve", "addInstanceAttribute", "isTrue", "assertThat", "isRelocationRequiredImmediately", "get", "resolve", "isFalse", "assertThat", "isRelocationNotAllowed", "get", "resolve", "isFalse", "assertThat", "isInBadCondition", "get", "resolve", "addInstanceAttribute", "isTrue", "assertThat", "isRelocationNotAllowed", "get", "resolve", "isFalse", "assertThat", "isInBadCondition", "get", "resolve", "isTrue", "assertThat", "isInBadCondition", "get", "resolve"]}, "focal_class": {"identifier": "AgentManagementNodeDataResolver", "superclass": "", "interfaces": "implements NodeDataResolver", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AgentManagementNodeDataResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AgentManagementNodeDataResolver.class)", "var_name": "logger"}, {"original_string": "private final ReadOnlyAgentOperations agentOperations;", "modifier": "private final", "type": "ReadOnlyAgentOperations", "declarator": "agentOperations", "var_name": "agentOperations"}, {"original_string": "private final AgentDataReplicator agentDataReplicator;", "modifier": "private final", "type": "AgentDataReplicator", "declarator": "agentDataReplicator", "var_name": "agentDataReplicator"}, {"original_string": "private final Predicate<AgentInstance> fenzoNodeFilter;", "modifier": "private final", "type": "Predicate<AgentInstance>", "declarator": "fenzoNodeFilter", "var_name": "fenzoNodeFilter"}, {"original_string": "private final RelocationConfiguration relocationConfiguration;", "modifier": "private final", "type": "RelocationConfiguration", "declarator": "relocationConfiguration", "var_name": "relocationConfiguration"}, {"original_string": "private final Indexer<V1Node> k8sNodeIndexer;", "modifier": "private final", "type": "Indexer<V1Node>", "declarator": "k8sNodeIndexer", "var_name": "k8sNodeIndexer"}, {"original_string": "private final Function<String, Matcher> badConditionMatcherFactory;", "modifier": "private final", "type": "Function<String, Matcher>", "declarator": "badConditionMatcherFactory", "var_name": "badConditionMatcherFactory"}], "methods": [{"identifier": "AgentManagementNodeDataResolver", "parameters": "(ReadOnlyAgentOperations agentOperations,\n                                           AgentDataReplicator agentDataReplicator,\n                                           Predicate<AgentInstance> fenzoNodeFilter,\n                                           RelocationConfiguration relocationConfiguration,\n                                           KubeApiFacade kubeApiFacade)", "modifiers": "public", "return": "", "signature": " AgentManagementNodeDataResolver(ReadOnlyAgentOperations agentOperations,\n                                           AgentDataReplicator agentDataReplicator,\n                                           Predicate<AgentInstance> fenzoNodeFilter,\n                                           RelocationConfiguration relocationConfiguration,\n                                           KubeApiFacade kubeApiFacade)", "full_signature": "public  AgentManagementNodeDataResolver(ReadOnlyAgentOperations agentOperations,\n                                           AgentDataReplicator agentDataReplicator,\n                                           Predicate<AgentInstance> fenzoNodeFilter,\n                                           RelocationConfiguration relocationConfiguration,\n                                           KubeApiFacade kubeApiFacade)", "class_method_signature": "AgentManagementNodeDataResolver.AgentManagementNodeDataResolver(ReadOnlyAgentOperations agentOperations,\n                                           AgentDataReplicator agentDataReplicator,\n                                           Predicate<AgentInstance> fenzoNodeFilter,\n                                           RelocationConfiguration relocationConfiguration,\n                                           KubeApiFacade kubeApiFacade)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Node>", "signature": "Map<String, Node> resolve()", "full_signature": "@Override public Map<String, Node> resolve()", "class_method_signature": "AgentManagementNodeDataResolver.resolve()", "testcase": false, "constructor": false}, {"identifier": "getStalenessMs", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getStalenessMs()", "full_signature": "@Override public long getStalenessMs()", "class_method_signature": "AgentManagementNodeDataResolver.getStalenessMs()", "testcase": false, "constructor": false}, {"identifier": "toNode", "parameters": "(AgentInstanceGroup serverGroup, AgentInstance instance)", "modifiers": "private", "return": "Node", "signature": "Node toNode(AgentInstanceGroup serverGroup, AgentInstance instance)", "full_signature": "private Node toNode(AgentInstanceGroup serverGroup, AgentInstance instance)", "class_method_signature": "AgentManagementNodeDataResolver.toNode(AgentInstanceGroup serverGroup, AgentInstance instance)", "testcase": false, "constructor": false}], "file": "titus-supplementary-component/task-relocation/src/main/java/com/netflix/titus/supplementary/relocation/connector/AgentManagementNodeDataResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Node>", "body": "@Override\n    public Map<String, Node> resolve() {\n        List<Pair<AgentInstanceGroup, List<AgentInstance>>> all = agentOperations.findAgentInstances(pair ->\n                fenzoNodeFilter.test(pair.getRight())\n        );\n        Map<String, Node> result = new HashMap<>();\n        all.forEach(pair -> {\n            AgentInstanceGroup serverGroup = pair.getLeft();\n            List<AgentInstance> instances = pair.getRight();\n            instances.forEach(instance -> result.put(instance.getId(), toNode(serverGroup, instance)));\n        });\n        return result;\n    }", "signature": "Map<String, Node> resolve()", "full_signature": "@Override public Map<String, Node> resolve()", "class_method_signature": "AgentManagementNodeDataResolver.resolve()", "testcase": false, "constructor": false, "invocations": ["findAgentInstances", "test", "getRight", "forEach", "getLeft", "getRight", "forEach", "put", "getId", "toNode"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}