{"test_class": {"identifier": "DetectorUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/util/DetectorUtilTest.java"}, "test_case": {"identifier": "testBuildDetectorSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildDetectorSource() {\n        val config = ConfigFactory.load(\"detector-manager.conf\");\n        val source = DetectorUtil.buildDetectorSource(config);\n        assertNotNull(source);\n    }", "signature": "void testBuildDetectorSource()", "full_signature": "@Test public void testBuildDetectorSource()", "class_method_signature": "DetectorUtilTest.testBuildDetectorSource()", "testcase": true, "constructor": false, "invocations": ["load", "buildDetectorSource", "assertNotNull"]}, "focal_class": {"identifier": "DetectorUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CK_MODEL_SERVICE_URI_TEMPLATE = \"model-service-base-uri\";", "modifier": "private static final", "type": "String", "declarator": "CK_MODEL_SERVICE_URI_TEMPLATE = \"model-service-base-uri\"", "var_name": "CK_MODEL_SERVICE_URI_TEMPLATE"}], "methods": [{"identifier": "buildDetectorSource", "parameters": "(Config config)", "modifiers": "public static", "return": "DetectorSource", "signature": "DetectorSource buildDetectorSource(Config config)", "full_signature": "public static DetectorSource buildDetectorSource(Config config)", "class_method_signature": "DetectorUtil.buildDetectorSource(Config config)", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/util/DetectorUtil.java"}, "focal_method": {"identifier": "buildDetectorSource", "parameters": "(Config config)", "modifiers": "public static", "return": "DetectorSource", "body": "public static DetectorSource buildDetectorSource(Config config) {\n        val uriTemplate = config.getString(CK_MODEL_SERVICE_URI_TEMPLATE);\n        val client = new DetectorClient(new HttpClientWrapper(), uriTemplate, new ObjectMapper());\n        val registry = new DetectorFactory();\n        return new DefaultDetectorSource(client, registry);\n    }", "signature": "DetectorSource buildDetectorSource(Config config)", "full_signature": "public static DetectorSource buildDetectorSource(Config config)", "class_method_signature": "DetectorUtil.buildDetectorSource(Config config)", "testcase": false, "constructor": false, "invocations": ["getString"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}