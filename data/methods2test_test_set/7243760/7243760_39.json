{"test_class": {"identifier": "TestDictKey", "superclass": "", "interfaces": "", "fields": [], "file": "base/src/test/java/com/barchart/feed/base/enums/TestDictKey.java"}, "test_case": {"identifier": "testName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testName() {\n\n\t\tValue value = new Value();\n\n\t\tString result1 = value.get(DictOne.TEST);\n\n\t\tInteger result2 = value.get(DictTwo.ONE);\n\t\tInteger result3 = value.get(DictTwo.TWO);\n\n\t\tassertEquals(DictOne.ONE.name(), \"ONE\");\n\t\tassertEquals(DictOne.TEST.name(), \"TEST\");\n\n\t\tSystem.out.println(DictOne.ONE.name() + \" \" + DictOne.ONE.ordinal());\n\t\tSystem.out.println(DictTwo.TWO.name() + \" \" + DictTwo.TWO.ordinal());\n\n\t\tSystem.out.println(\"guid : \" + DictOne.ONE.guid());\n\t\tSystem.out.println(\"guid : \" + DictTwo.TWO.guid());\n\n\t\tSystem.out.println(\"DictOne.TEST.guid() : \" + DictOne.TEST.guid());\n\t\tSystem.out.println(\"DictTwo.TEST.guid() : \" + DictTwo.TEST.guid());\n\n\t\tSystem.out.println(\"DictBase.X1.guid() : \" + DictBase.X1.guid());\n\n\t\tfor (Dict<?> key : DictBase.values()) {\n\n\t\t\tSystem.out.println(\"# 0 # key : \" + key.guid() + \" / \"\n\t\t\t\t\t+ key.ordinal());\n\n\t\t}\n\n\t\tfor (Dict<?> key : DictOne.values()) {\n\n\t\t\tSystem.out.println(\"# 1 # key : \" + key.guid() + \" / \"\n\t\t\t\t\t+ key.ordinal());\n\n\t\t}\n\n\t\tfor (Dict<?> key : DictTwo.values()) {\n\n\t\t\tSystem.out.println(\"# 2 # key : \" + key.guid() + \" / \"\n\t\t\t\t\t+ key.ordinal());\n\n\t\t}\n\n\t}", "signature": "void testName()", "full_signature": "@Test public void testName()", "class_method_signature": "TestDictKey.testName()", "testcase": true, "constructor": false, "invocations": ["get", "get", "get", "assertEquals", "name", "assertEquals", "name", "println", "name", "ordinal", "println", "name", "ordinal", "println", "guid", "println", "guid", "println", "guid", "println", "guid", "println", "guid", "values", "println", "guid", "ordinal", "values", "println", "guid", "ordinal", "values", "println", "guid", "ordinal"]}, "focal_class": {"identifier": "DictKey", "superclass": "", "interfaces": "implements Dict<V>, Comment", "fields": [{"original_string": "private static final AtomicInteger CREATED = new AtomicInteger(0);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "CREATED = new AtomicInteger(0)", "var_name": "CREATED"}, {"original_string": "private static final ConcurrentMap<Integer, Dict<?>> ENUM_MAP = //\n\tnew ConcurrentHashMap<Integer, Dict<?>>();", "modifier": "private static final", "type": "ConcurrentMap<Integer, Dict<?>>", "declarator": "ENUM_MAP = //\n\tnew ConcurrentHashMap<Integer, Dict<?>>()", "var_name": "ENUM_MAP"}, {"original_string": "private static final ConcurrentMap<Class<Dict<?>>, AtomicInteger> INDEX_MAP = //\n\tnew ConcurrentHashMap<Class<Dict<?>>, AtomicInteger>();", "modifier": "private static final", "type": "ConcurrentMap<Class<Dict<?>>, AtomicInteger>", "declarator": "INDEX_MAP = //\n\tnew ConcurrentHashMap<Class<Dict<?>>, AtomicInteger>()", "var_name": "INDEX_MAP"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String guid;", "modifier": "private", "type": "String", "declarator": "guid", "var_name": "guid"}, {"original_string": "private final int ordinal;", "modifier": "private final", "type": "int", "declarator": "ordinal", "var_name": "ordinal"}, {"original_string": "private final int index;", "modifier": "private final", "type": "int", "declarator": "index", "var_name": "index"}, {"original_string": "private final String code;", "modifier": "private final", "type": "String", "declarator": "code", "var_name": "code"}, {"original_string": "private final String comment;", "modifier": "private final", "type": "String", "declarator": "comment", "var_name": "comment"}, {"original_string": "private final static Manager manager = new Manager();", "modifier": "private final static", "type": "Manager", "declarator": "manager = new Manager()", "var_name": "manager"}, {"original_string": "private final Class<?> klaz;", "modifier": "private final", "type": "Class<?>", "declarator": "klaz", "var_name": "klaz"}, {"original_string": "private final AtomicInteger INDEX = new AtomicInteger(0);", "modifier": "private final", "type": "AtomicInteger", "declarator": "INDEX = new AtomicInteger(0)", "var_name": "INDEX"}, {"original_string": "public static final Dict<?> UNKNOWN = NEW(\"default instance for non-existing entry\");", "modifier": "public static final", "type": "Dict<?>", "declarator": "UNKNOWN = NEW(\"default instance for non-existing entry\")", "var_name": "UNKNOWN"}], "methods": [{"identifier": "values", "parameters": "()", "modifiers": "public static final", "return": "Dict<?>[]", "signature": "Dict<?>[] values()", "full_signature": "public static final Dict<?>[] values()", "class_method_signature": "DictKey.values()", "testcase": false, "constructor": false}, {"identifier": "DictKey", "parameters": "()", "modifiers": "protected", "return": "", "signature": " DictKey()", "full_signature": "protected  DictKey()", "class_method_signature": "DictKey.DictKey()", "testcase": false, "constructor": true}, {"identifier": "DictKey", "parameters": "(final String code, final String comment)", "modifiers": "private", "return": "", "signature": " DictKey(final String code, final String comment)", "full_signature": "private  DictKey(final String code, final String comment)", "class_method_signature": "DictKey.DictKey(final String code, final String comment)", "testcase": false, "constructor": true}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String name()", "full_signature": "@Override public final String name()", "class_method_signature": "DictKey.name()", "testcase": false, "constructor": false}, {"identifier": "guid", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String guid()", "full_signature": "@Override public final String guid()", "class_method_signature": "DictKey.guid()", "testcase": false, "constructor": false}, {"identifier": "sequence", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int sequence()", "full_signature": "@Override public final int sequence()", "class_method_signature": "DictKey.sequence()", "testcase": false, "constructor": false}, {"identifier": "ordinal", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int ordinal()", "full_signature": "@Override public final int ordinal()", "class_method_signature": "DictKey.ordinal()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object dict)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(final Object dict)", "full_signature": "@Override public final boolean equals(final Object dict)", "class_method_signature": "DictKey.equals(final Object dict)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "DictKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "fromOrdinal", "parameters": "(final int ordinal)", "modifiers": "public static final", "return": "Dict<?>", "signature": "Dict<?> fromOrdinal(final int ordinal)", "full_signature": "public static final Dict<?> fromOrdinal(final int ordinal)", "class_method_signature": "DictKey.fromOrdinal(final int ordinal)", "testcase": false, "constructor": false}, {"identifier": "code", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String code()", "full_signature": "@Override public final String code()", "class_method_signature": "DictKey.code()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getComment()", "full_signature": "@Override public final String getComment()", "class_method_signature": "DictKey.getComment()", "testcase": false, "constructor": false}, {"identifier": "setComment", "parameters": "(String comment)", "modifiers": "@Override public final", "return": "void", "signature": "void setComment(String comment)", "full_signature": "@Override public final void setComment(String comment)", "class_method_signature": "DictKey.setComment(String comment)", "testcase": false, "constructor": false}, {"identifier": "NEW", "parameters": "(final String comment)", "modifiers": "protected final static", "return": "DictKey<X>", "signature": "DictKey<X> NEW(final String comment)", "full_signature": "protected final static DictKey<X> NEW(final String comment)", "class_method_signature": "DictKey.NEW(final String comment)", "testcase": false, "constructor": false}, {"identifier": "NEW", "parameters": "(final String code,\n\t\t\tfinal String comment)", "modifiers": "protected final static", "return": "DictKey<X>", "signature": "DictKey<X> NEW(final String code,\n\t\t\tfinal String comment)", "full_signature": "protected final static DictKey<X> NEW(final String code,\n\t\t\tfinal String comment)", "class_method_signature": "DictKey.NEW(final String code,\n\t\t\tfinal String comment)", "testcase": false, "constructor": false}], "file": "base/src/main/java/com/barchart/feed/base/enums/DictKey.java"}, "focal_method": {"identifier": "name", "parameters": "()", "modifiers": "@Override public final", "return": "String", "body": "@Override\n\tpublic final String name() {\n\n\t\tif (name == null) {\n\n\t\t\tfinal Field[] fields = klaz.getDeclaredFields();\n\n\t\t\tfor (final Field field : fields) {\n\t\t\t\ttry {\n\t\t\t\t\tif (this == field.get(this)) {\n\t\t\t\t\t\tname = field.getName();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} catch (final Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (name == null) {\n\t\t\t\tname = \"\" + ordinal();\n\t\t\t}\n\n\t\t}\n\n\t\treturn name;\n\n\t}", "signature": "String name()", "full_signature": "@Override public final String name()", "class_method_signature": "DictKey.name()", "testcase": false, "constructor": false, "invocations": ["getDeclaredFields", "get", "getName", "printStackTrace", "ordinal"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}