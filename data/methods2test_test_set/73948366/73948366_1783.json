{"test_class": {"identifier": "ZTSClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private Authority PRINCIPAL_AUTHORITY = new PrincipalAuthority();", "modifier": "final private", "type": "Authority", "declarator": "PRINCIPAL_AUTHORITY = new PrincipalAuthority()", "var_name": "PRINCIPAL_AUTHORITY"}, {"original_string": "private SimpleServiceIdentityProvider siaMockProvider = null;", "modifier": "private", "type": "SimpleServiceIdentityProvider", "declarator": "siaMockProvider = null", "var_name": "siaMockProvider"}, {"original_string": "private final static String crlf = System.getProperty(\"line.separator\");", "modifier": "private final static", "type": "String", "declarator": "crlf = System.getProperty(\"line.separator\")", "var_name": "crlf"}, {"original_string": "private final static String test_cert =\n            \"-----BEGIN CERTIFICATE-----\" + crlf\n                    + \"MIIDRDCCAiwCCQDltWO9Xjhd8DANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJK\" + crlf\n                    + \"UDEOMAwGA1UECBMFVG9reW8xEjAQBgNVBAcTCVN1bWlkYS1rdTEPMA0GA1UEChMG\" + crlf\n                    + \"WUpURVNUMQ8wDQYDVQQLEwZZSlRFU1QxDzANBgNVBAMTBllKVEVTVDAeFw0xNjEx\" + crlf\n                    + \"MTEwODMzMTVaFw0yNjExMDkwODMzMTVaMGQxCzAJBgNVBAYTAkpQMQ4wDAYDVQQI\" + crlf\n                    + \"EwVUb2t5bzESMBAGA1UEBxMJU3VtaWRhLWt1MQ8wDQYDVQQKEwZZSlRFU1QxDzAN\" + crlf\n                    + \"BgNVBAsTBllKVEVTVDEPMA0GA1UEAxMGWUpURVNUMIIBIjANBgkqhkiG9w0BAQEF\" + crlf\n                    + \"AAOCAQ8AMIIBCgKCAQEA1Ssz+hLCTXyMlDH9E0bd9EEm0yNyPH4XhtUkSEDdYE+Z\" + crlf\n                    + \"0m/7BkfrKTRRew8wrfpLkK0wZsoVkEjwd0GktZXnGTRUs42Bd5tSYXV1Z78oqjS4\" + crlf\n                    + \"AGpjkQlQva+f6ANnDhPNxHJ6QlY6DLePIByjepmJS8UZGRuNPiDpbtWWhuCLbn6p\" + crlf\n                    + \"to2SiclLHr6K/5uFYjawS8k3bGmoV9QfeWvY+aiGvuxDsPCxcePpwSA8btubpTsJ\" + crlf\n                    + \"CvC31rJChgN5VQFE26vfhVCwmuhwOCcUThdgaI9LAjLETknrLt/kiFaiIhm5peSG\" + crlf\n                    + \"t0DP89u9fnaUX7P8jc/4V57lnp+ynRpGpHfv4Fi4wQIDAQABMA0GCSqGSIb3DQEB\" + crlf\n                    + \"BQUAA4IBAQARH92fKPsVoCq80ARt70LM8ynaq9dlXcLjr34CWINbGbXG4a0RP1l9\" + crlf\n                    + \"bFZih7rCG96W+fDKxvgR2YwXhRJq5NchOoBB0mtOBG3VwbXFNm6CBHqwtbrNiPzv\" + crlf\n                    + \"BvK7jerZd1g0CgTWzfoPgO/87F2uX5J92CsvXRYrDJsFYHnhmUg3JWCT4q+Xe9J4\" + crlf\n                    + \"/Eyw+C1DgDwWjjBB1Qb3QBO/dpGR+EWv4mtNK8D2o+iEFJLjtNdqIkcrUIXfqI8M\" + crlf\n                    + \"z+7Tph5eLFgI5lEW+Pu/myzLIXCNWoRr7UQute898v/1XZiRS4sSCEQSgXnZflA8\" + crlf\n                    + \"c2KrYjMGSUogzw6+1gKeucygV32rA2B2\" + crlf\n                    + \"-----END CERTIFICATE-----\";", "modifier": "private final static", "type": "String", "declarator": "test_cert =\n            \"-----BEGIN CERTIFICATE-----\" + crlf\n                    + \"MIIDRDCCAiwCCQDltWO9Xjhd8DANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJK\" + crlf\n                    + \"UDEOMAwGA1UECBMFVG9reW8xEjAQBgNVBAcTCVN1bWlkYS1rdTEPMA0GA1UEChMG\" + crlf\n                    + \"WUpURVNUMQ8wDQYDVQQLEwZZSlRFU1QxDzANBgNVBAMTBllKVEVTVDAeFw0xNjEx\" + crlf\n                    + \"MTEwODMzMTVaFw0yNjExMDkwODMzMTVaMGQxCzAJBgNVBAYTAkpQMQ4wDAYDVQQI\" + crlf\n                    + \"EwVUb2t5bzESMBAGA1UEBxMJU3VtaWRhLWt1MQ8wDQYDVQQKEwZZSlRFU1QxDzAN\" + crlf\n                    + \"BgNVBAsTBllKVEVTVDEPMA0GA1UEAxMGWUpURVNUMIIBIjANBgkqhkiG9w0BAQEF\" + crlf\n                    + \"AAOCAQ8AMIIBCgKCAQEA1Ssz+hLCTXyMlDH9E0bd9EEm0yNyPH4XhtUkSEDdYE+Z\" + crlf\n                    + \"0m/7BkfrKTRRew8wrfpLkK0wZsoVkEjwd0GktZXnGTRUs42Bd5tSYXV1Z78oqjS4\" + crlf\n                    + \"AGpjkQlQva+f6ANnDhPNxHJ6QlY6DLePIByjepmJS8UZGRuNPiDpbtWWhuCLbn6p\" + crlf\n                    + \"to2SiclLHr6K/5uFYjawS8k3bGmoV9QfeWvY+aiGvuxDsPCxcePpwSA8btubpTsJ\" + crlf\n                    + \"CvC31rJChgN5VQFE26vfhVCwmuhwOCcUThdgaI9LAjLETknrLt/kiFaiIhm5peSG\" + crlf\n                    + \"t0DP89u9fnaUX7P8jc/4V57lnp+ynRpGpHfv4Fi4wQIDAQABMA0GCSqGSIb3DQEB\" + crlf\n                    + \"BQUAA4IBAQARH92fKPsVoCq80ARt70LM8ynaq9dlXcLjr34CWINbGbXG4a0RP1l9\" + crlf\n                    + \"bFZih7rCG96W+fDKxvgR2YwXhRJq5NchOoBB0mtOBG3VwbXFNm6CBHqwtbrNiPzv\" + crlf\n                    + \"BvK7jerZd1g0CgTWzfoPgO/87F2uX5J92CsvXRYrDJsFYHnhmUg3JWCT4q+Xe9J4\" + crlf\n                    + \"/Eyw+C1DgDwWjjBB1Qb3QBO/dpGR+EWv4mtNK8D2o+iEFJLjtNdqIkcrUIXfqI8M\" + crlf\n                    + \"z+7Tph5eLFgI5lEW+Pu/myzLIXCNWoRr7UQute898v/1XZiRS4sSCEQSgXnZflA8\" + crlf\n                    + \"c2KrYjMGSUogzw6+1gKeucygV32rA2B2\" + crlf\n                    + \"-----END CERTIFICATE-----\"", "var_name": "test_cert"}], "file": "clients/java/zts/core/src/test/java/com/yahoo/athenz/zts/ZTSClientTest.java"}, "test_case": {"identifier": "testGetHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHeader() {\n        assertEquals(ZTSClient.getHeader(), \"Athenz-Role-Auth\");\n    }", "signature": "void testGetHeader()", "full_signature": "@Test public void testGetHeader()", "class_method_signature": "ZTSClientTest.testGetHeader()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getHeader"]}, "focal_class": {"identifier": "ZTSClient", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ZTSClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ZTSClient.class)", "var_name": "LOG"}, {"original_string": "private String ztsUrl = null;", "modifier": "private", "type": "String", "declarator": "ztsUrl = null", "var_name": "ztsUrl"}, {"original_string": "private String proxyUrl = null;", "modifier": "private", "type": "String", "declarator": "proxyUrl = null", "var_name": "proxyUrl"}, {"original_string": "private String domain = null;", "modifier": "private", "type": "String", "declarator": "domain = null", "var_name": "domain"}, {"original_string": "private String service = null;", "modifier": "private", "type": "String", "declarator": "service = null", "var_name": "service"}, {"original_string": "private SSLContext sslContext = null;", "modifier": "private", "type": "SSLContext", "declarator": "sslContext = null", "var_name": "sslContext"}, {"original_string": "private ZTSClientNotificationSender notificationSender = null;", "modifier": "private", "type": "ZTSClientNotificationSender", "declarator": "notificationSender = null", "var_name": "notificationSender"}, {"original_string": "ZTSRDLGeneratedClient ztsClient = null;", "modifier": "", "type": "ZTSRDLGeneratedClient", "declarator": "ztsClient = null", "var_name": "ztsClient"}, {"original_string": "ServiceIdentityProvider siaProvider = null;", "modifier": "", "type": "ServiceIdentityProvider", "declarator": "siaProvider = null", "var_name": "siaProvider"}, {"original_string": "Principal principal = null;", "modifier": "", "type": "Principal", "declarator": "principal = null", "var_name": "principal"}, {"original_string": "ZTSClientCache ztsClientCache = ZTSClientCache.getInstance();", "modifier": "", "type": "ZTSClientCache", "declarator": "ztsClientCache = ZTSClientCache.getInstance()", "var_name": "ztsClientCache"}, {"original_string": "static private boolean cacheDisabled = false;", "modifier": "static private", "type": "boolean", "declarator": "cacheDisabled = false", "var_name": "cacheDisabled"}, {"original_string": "static private int tokenMinExpiryTime = 900;", "modifier": "static private", "type": "int", "declarator": "tokenMinExpiryTime = 900", "var_name": "tokenMinExpiryTime"}, {"original_string": "static private int tokenMaxExpiryOffset = 300;", "modifier": "static private", "type": "int", "declarator": "tokenMaxExpiryOffset = 300", "var_name": "tokenMaxExpiryOffset"}, {"original_string": "static private long prefetchInterval = 60;", "modifier": "static private", "type": "long", "declarator": "prefetchInterval = 60", "var_name": "prefetchInterval"}, {"original_string": "static private boolean prefetchAutoEnable = true;", "modifier": "static private", "type": "boolean", "declarator": "prefetchAutoEnable = true", "var_name": "prefetchAutoEnable"}, {"original_string": "static private String x509CsrDn = null;", "modifier": "static private", "type": "String", "declarator": "x509CsrDn = null", "var_name": "x509CsrDn"}, {"original_string": "static private String x509CsrDomain = null;", "modifier": "static private", "type": "String", "declarator": "x509CsrDomain = null", "var_name": "x509CsrDomain"}, {"original_string": "static private int reqReadTimeout = 30000;", "modifier": "static private", "type": "int", "declarator": "reqReadTimeout = 30000", "var_name": "reqReadTimeout"}, {"original_string": "static private int reqConnectTimeout = 30000;", "modifier": "static private", "type": "int", "declarator": "reqConnectTimeout = 30000", "var_name": "reqConnectTimeout"}, {"original_string": "static private String x509CertDNSName = null;", "modifier": "static private", "type": "String", "declarator": "x509CertDNSName = null", "var_name": "x509CertDNSName"}, {"original_string": "static private String confZtsUrl = null;", "modifier": "static private", "type": "String", "declarator": "confZtsUrl = null", "var_name": "confZtsUrl"}, {"original_string": "static private JwtsSigningKeyResolver resolver = null;", "modifier": "static private", "type": "JwtsSigningKeyResolver", "declarator": "resolver = null", "var_name": "resolver"}, {"original_string": "private boolean enablePrefetch = true;", "modifier": "private", "type": "boolean", "declarator": "enablePrefetch = true", "var_name": "enablePrefetch"}, {"original_string": "private boolean ztsClientOverride = false;", "modifier": "private", "type": "boolean", "declarator": "ztsClientOverride = false", "var_name": "ztsClientOverride"}, {"original_string": "@SuppressWarnings(\"unused\")\n    static private boolean initialized = initConfigValues();", "modifier": "@SuppressWarnings(\"unused\")\n    static private", "type": "boolean", "declarator": "initialized = initConfigValues()", "var_name": "initialized"}, {"original_string": "public static final String ZTS_CLIENT_PROP_ATHENZ_CONF               = \"athenz.athenz_conf\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_ATHENZ_CONF               = \"athenz.athenz_conf\"", "var_name": "ZTS_CLIENT_PROP_ATHENZ_CONF"}, {"original_string": "public static final String ZTS_CLIENT_PROP_TOKEN_MIN_EXPIRY_TIME     = \"athenz.zts.client.token_min_expiry_time\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_TOKEN_MIN_EXPIRY_TIME     = \"athenz.zts.client.token_min_expiry_time\"", "var_name": "ZTS_CLIENT_PROP_TOKEN_MIN_EXPIRY_TIME"}, {"original_string": "public static final String ZTS_CLIENT_PROP_READ_TIMEOUT              = \"athenz.zts.client.read_timeout\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_READ_TIMEOUT              = \"athenz.zts.client.read_timeout\"", "var_name": "ZTS_CLIENT_PROP_READ_TIMEOUT"}, {"original_string": "public static final String ZTS_CLIENT_PROP_CONNECT_TIMEOUT           = \"athenz.zts.client.connect_timeout\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_CONNECT_TIMEOUT           = \"athenz.zts.client.connect_timeout\"", "var_name": "ZTS_CLIENT_PROP_CONNECT_TIMEOUT"}, {"original_string": "public static final String ZTS_CLIENT_PROP_PREFETCH_SLEEP_INTERVAL   = \"athenz.zts.client.prefetch_sleep_interval\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_PREFETCH_SLEEP_INTERVAL   = \"athenz.zts.client.prefetch_sleep_interval\"", "var_name": "ZTS_CLIENT_PROP_PREFETCH_SLEEP_INTERVAL"}, {"original_string": "public static final String ZTS_CLIENT_PROP_PREFETCH_AUTO_ENABLE      = \"athenz.zts.client.prefetch_auto_enable\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_PREFETCH_AUTO_ENABLE      = \"athenz.zts.client.prefetch_auto_enable\"", "var_name": "ZTS_CLIENT_PROP_PREFETCH_AUTO_ENABLE"}, {"original_string": "public static final String ZTS_CLIENT_PROP_X509CERT_DNS_NAME         = \"athenz.zts.client.x509cert_dns_name\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_X509CERT_DNS_NAME         = \"athenz.zts.client.x509cert_dns_name\"", "var_name": "ZTS_CLIENT_PROP_X509CERT_DNS_NAME"}, {"original_string": "public static final String ZTS_CLIENT_PROP_X509CSR_DN                = \"athenz.zts.client.x509csr_dn\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_X509CSR_DN                = \"athenz.zts.client.x509csr_dn\"", "var_name": "ZTS_CLIENT_PROP_X509CSR_DN"}, {"original_string": "public static final String ZTS_CLIENT_PROP_X509CSR_DOMAIN            = \"athenz.zts.client.x509csr_domain\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_X509CSR_DOMAIN            = \"athenz.zts.client.x509csr_domain\"", "var_name": "ZTS_CLIENT_PROP_X509CSR_DOMAIN"}, {"original_string": "public static final String ZTS_CLIENT_PROP_DISABLE_CACHE             = \"athenz.zts.client.disable_cache\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_DISABLE_CACHE             = \"athenz.zts.client.disable_cache\"", "var_name": "ZTS_CLIENT_PROP_DISABLE_CACHE"}, {"original_string": "public static final String ZTS_CLIENT_PROP_CERT_ALIAS                       = \"athenz.zts.client.cert_alias\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_CERT_ALIAS                       = \"athenz.zts.client.cert_alias\"", "var_name": "ZTS_CLIENT_PROP_CERT_ALIAS"}, {"original_string": "public static final String ZTS_CLIENT_PROP_KEYSTORE_PATH                    = \"athenz.zts.client.keystore_path\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_KEYSTORE_PATH                    = \"athenz.zts.client.keystore_path\"", "var_name": "ZTS_CLIENT_PROP_KEYSTORE_PATH"}, {"original_string": "public static final String ZTS_CLIENT_PROP_KEYSTORE_TYPE                    = \"athenz.zts.client.keystore_type\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_KEYSTORE_TYPE                    = \"athenz.zts.client.keystore_type\"", "var_name": "ZTS_CLIENT_PROP_KEYSTORE_TYPE"}, {"original_string": "public static final String ZTS_CLIENT_PROP_KEYSTORE_PASSWORD                = \"athenz.zts.client.keystore_password\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_KEYSTORE_PASSWORD                = \"athenz.zts.client.keystore_password\"", "var_name": "ZTS_CLIENT_PROP_KEYSTORE_PASSWORD"}, {"original_string": "public static final String ZTS_CLIENT_PROP_KEYSTORE_PWD_APP_NAME            = \"athenz.zts.client.keystore_pwd_app_name\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_KEYSTORE_PWD_APP_NAME            = \"athenz.zts.client.keystore_pwd_app_name\"", "var_name": "ZTS_CLIENT_PROP_KEYSTORE_PWD_APP_NAME"}, {"original_string": "public static final String ZTS_CLIENT_PROP_KEY_MANAGER_PASSWORD             = \"athenz.zts.client.keymanager_password\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_KEY_MANAGER_PASSWORD             = \"athenz.zts.client.keymanager_password\"", "var_name": "ZTS_CLIENT_PROP_KEY_MANAGER_PASSWORD"}, {"original_string": "public static final String ZTS_CLIENT_PROP_KEY_MANAGER_PWD_APP_NAME         = \"athenz.zts.client.keymanager_pwd_app_name\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_KEY_MANAGER_PWD_APP_NAME         = \"athenz.zts.client.keymanager_pwd_app_name\"", "var_name": "ZTS_CLIENT_PROP_KEY_MANAGER_PWD_APP_NAME"}, {"original_string": "public static final String ZTS_CLIENT_PROP_TRUSTSTORE_PATH                  = \"athenz.zts.client.truststore_path\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_TRUSTSTORE_PATH                  = \"athenz.zts.client.truststore_path\"", "var_name": "ZTS_CLIENT_PROP_TRUSTSTORE_PATH"}, {"original_string": "public static final String ZTS_CLIENT_PROP_TRUSTSTORE_TYPE                  = \"athenz.zts.client.truststore_type\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_TRUSTSTORE_TYPE                  = \"athenz.zts.client.truststore_type\"", "var_name": "ZTS_CLIENT_PROP_TRUSTSTORE_TYPE"}, {"original_string": "public static final String ZTS_CLIENT_PROP_TRUSTSTORE_PASSWORD              = \"athenz.zts.client.truststore_password\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_TRUSTSTORE_PASSWORD              = \"athenz.zts.client.truststore_password\"", "var_name": "ZTS_CLIENT_PROP_TRUSTSTORE_PASSWORD"}, {"original_string": "public static final String ZTS_CLIENT_PROP_TRUSTSTORE_PWD_APP_NAME          = \"athenz.zts.client.truststore_pwd_app_name\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_TRUSTSTORE_PWD_APP_NAME          = \"athenz.zts.client.truststore_pwd_app_name\"", "var_name": "ZTS_CLIENT_PROP_TRUSTSTORE_PWD_APP_NAME"}, {"original_string": "public static final String ZTS_CLIENT_PROP_POOL_MAX_PER_ROUTE               = \"athenz.zts.client.http_pool_max_per_route\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_POOL_MAX_PER_ROUTE               = \"athenz.zts.client.http_pool_max_per_route\"", "var_name": "ZTS_CLIENT_PROP_POOL_MAX_PER_ROUTE"}, {"original_string": "public static final String ZTS_CLIENT_PROP_POOL_MAX_TOTAL                   = \"athenz.zts.client.http_pool_max_total\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_POOL_MAX_TOTAL                   = \"athenz.zts.client.http_pool_max_total\"", "var_name": "ZTS_CLIENT_PROP_POOL_MAX_TOTAL"}, {"original_string": "public static final String ZTS_CLIENT_PROP_PRIVATE_KEY_STORE_FACTORY_CLASS  = \"athenz.zts.client.private_keystore_factory_class\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_PRIVATE_KEY_STORE_FACTORY_CLASS  = \"athenz.zts.client.private_keystore_factory_class\"", "var_name": "ZTS_CLIENT_PROP_PRIVATE_KEY_STORE_FACTORY_CLASS"}, {"original_string": "public static final String ZTS_CLIENT_PROP_CLIENT_PROTOCOL                  = \"athenz.zts.client.client_ssl_protocol\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PROP_CLIENT_PROTOCOL                  = \"athenz.zts.client.client_ssl_protocol\"", "var_name": "ZTS_CLIENT_PROP_CLIENT_PROTOCOL"}, {"original_string": "public static final String ZTS_CLIENT_PKEY_STORE_FACTORY_CLASS              = \"com.yahoo.athenz.auth.impl.FilePrivateKeyStoreFactory\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_PKEY_STORE_FACTORY_CLASS              = \"com.yahoo.athenz.auth.impl.FilePrivateKeyStoreFactory\"", "var_name": "ZTS_CLIENT_PKEY_STORE_FACTORY_CLASS"}, {"original_string": "public static final String ZTS_CLIENT_DEFAULT_CLIENT_SSL_PROTOCOL           = \"TLSv1.2\";", "modifier": "public static final", "type": "String", "declarator": "ZTS_CLIENT_DEFAULT_CLIENT_SSL_PROTOCOL           = \"TLSv1.2\"", "var_name": "ZTS_CLIENT_DEFAULT_CLIENT_SSL_PROTOCOL"}, {"original_string": "public static final String ROLE_TOKEN_HEADER = System.getProperty(RoleAuthority.ATHENZ_PROP_ROLE_HEADER,\n            RoleAuthority.HTTP_HEADER);", "modifier": "public static final", "type": "String", "declarator": "ROLE_TOKEN_HEADER = System.getProperty(RoleAuthority.ATHENZ_PROP_ROLE_HEADER,\n            RoleAuthority.HTTP_HEADER)", "var_name": "ROLE_TOKEN_HEADER"}, {"original_string": "final static ConcurrentHashMap<String, RoleToken> ROLE_TOKEN_CACHE = new ConcurrentHashMap<>();", "modifier": "final static", "type": "ConcurrentHashMap<String, RoleToken>", "declarator": "ROLE_TOKEN_CACHE = new ConcurrentHashMap<>()", "var_name": "ROLE_TOKEN_CACHE"}, {"original_string": "final static ConcurrentHashMap<String, AccessTokenResponseCacheEntry> ACCESS_TOKEN_CACHE = new ConcurrentHashMap<>();", "modifier": "final static", "type": "ConcurrentHashMap<String, AccessTokenResponseCacheEntry>", "declarator": "ACCESS_TOKEN_CACHE = new ConcurrentHashMap<>()", "var_name": "ACCESS_TOKEN_CACHE"}, {"original_string": "final static ConcurrentHashMap<String, AWSTemporaryCredentials> AWS_CREDS_CACHE = new ConcurrentHashMap<>();", "modifier": "final static", "type": "ConcurrentHashMap<String, AWSTemporaryCredentials>", "declarator": "AWS_CREDS_CACHE = new ConcurrentHashMap<>()", "var_name": "AWS_CREDS_CACHE"}, {"original_string": "private static final Queue<PrefetchTokenScheduledItem> PREFETCH_SCHEDULED_ITEMS = new ConcurrentLinkedQueue<>();", "modifier": "private static final", "type": "Queue<PrefetchTokenScheduledItem>", "declarator": "PREFETCH_SCHEDULED_ITEMS = new ConcurrentLinkedQueue<>()", "var_name": "PREFETCH_SCHEDULED_ITEMS"}, {"original_string": "private static Timer FETCH_TIMER;", "modifier": "private static", "type": "Timer", "declarator": "FETCH_TIMER", "var_name": "FETCH_TIMER"}, {"original_string": "private static final Object TIMER_LOCK = new Object();", "modifier": "private static final", "type": "Object", "declarator": "TIMER_LOCK = new Object()", "var_name": "TIMER_LOCK"}, {"original_string": "static AtomicLong FETCHER_LAST_RUN_AT = new AtomicLong(-1);", "modifier": "static", "type": "AtomicLong", "declarator": "FETCHER_LAST_RUN_AT = new AtomicLong(-1)", "var_name": "FETCHER_LAST_RUN_AT"}, {"original_string": "static final ClientKeyRefresherListener KEY_REFRESHER_LISTENER = new ClientKeyRefresherListener();", "modifier": "static final", "type": "ClientKeyRefresherListener", "declarator": "KEY_REFRESHER_LISTENER = new ClientKeyRefresherListener()", "var_name": "KEY_REFRESHER_LISTENER"}, {"original_string": "private static ServiceLoader<ZTSClientService> ztsTokenProviders;", "modifier": "private static", "type": "ServiceLoader<ZTSClientService>", "declarator": "ztsTokenProviders", "var_name": "ztsTokenProviders"}, {"original_string": "private static AtomicReference<Set<String>> svcLoaderCacheKeys;", "modifier": "private static", "type": "AtomicReference<Set<String>>", "declarator": "svcLoaderCacheKeys", "var_name": "svcLoaderCacheKeys"}, {"original_string": "private static PrivateKeyStore PRIVATE_KEY_STORE = loadServicePrivateKey();", "modifier": "private static", "type": "PrivateKeyStore", "declarator": "PRIVATE_KEY_STORE = loadServicePrivateKey()", "var_name": "PRIVATE_KEY_STORE"}, {"original_string": "private static ZTSAccessTokenFileLoader ztsAccessTokenFileLoader;", "modifier": "private static", "type": "ZTSAccessTokenFileLoader", "declarator": "ztsAccessTokenFileLoader", "var_name": "ztsAccessTokenFileLoader"}], "methods": [{"identifier": "initConfigValues", "parameters": "()", "modifiers": "static", "return": "boolean", "signature": "boolean initConfigValues()", "full_signature": "static boolean initConfigValues()", "class_method_signature": "ZTSClient.initConfigValues()", "testcase": false, "constructor": false}, {"identifier": "setX509CertDnsName", "parameters": "(final String dnsName)", "modifiers": "public static", "return": "void", "signature": "void setX509CertDnsName(final String dnsName)", "full_signature": "public static void setX509CertDnsName(final String dnsName)", "class_method_signature": "ZTSClient.setX509CertDnsName(final String dnsName)", "testcase": false, "constructor": false}, {"identifier": "setConnectionTimeouts", "parameters": "(int connectTimeout, int readTimeout)", "modifiers": "public static", "return": "void", "signature": "void setConnectionTimeouts(int connectTimeout, int readTimeout)", "full_signature": "public static void setConnectionTimeouts(int connectTimeout, int readTimeout)", "class_method_signature": "ZTSClient.setConnectionTimeouts(int connectTimeout, int readTimeout)", "testcase": false, "constructor": false}, {"identifier": "setX509CsrDetails", "parameters": "(final String csrDn, final String csrDomain)", "modifiers": "public static", "return": "void", "signature": "void setX509CsrDetails(final String csrDn, final String csrDomain)", "full_signature": "public static void setX509CsrDetails(final String csrDn, final String csrDomain)", "class_method_signature": "ZTSClient.setX509CsrDetails(final String csrDn, final String csrDomain)", "testcase": false, "constructor": false}, {"identifier": "setCacheDisable", "parameters": "(boolean cacheState)", "modifiers": "public static", "return": "void", "signature": "void setCacheDisable(boolean cacheState)", "full_signature": "public static void setCacheDisable(boolean cacheState)", "class_method_signature": "ZTSClient.setCacheDisable(boolean cacheState)", "testcase": false, "constructor": false}, {"identifier": "setPrefetchAutoEnable", "parameters": "(boolean fetchState)", "modifiers": "public static", "return": "void", "signature": "void setPrefetchAutoEnable(boolean fetchState)", "full_signature": "public static void setPrefetchAutoEnable(boolean fetchState)", "class_method_signature": "ZTSClient.setPrefetchAutoEnable(boolean fetchState)", "testcase": false, "constructor": false}, {"identifier": "setPrefetchInterval", "parameters": "(int interval)", "modifiers": "public static", "return": "void", "signature": "void setPrefetchInterval(int interval)", "full_signature": "public static void setPrefetchInterval(int interval)", "class_method_signature": "ZTSClient.setPrefetchInterval(int interval)", "testcase": false, "constructor": false}, {"identifier": "setTokenMinExpiryTime", "parameters": "(int minExpiryTime)", "modifiers": "public static", "return": "void", "signature": "void setTokenMinExpiryTime(int minExpiryTime)", "full_signature": "public static void setTokenMinExpiryTime(int minExpiryTime)", "class_method_signature": "ZTSClient.setTokenMinExpiryTime(int minExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "lookupZTSUrl", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void lookupZTSUrl()", "full_signature": "public static void lookupZTSUrl()", "class_method_signature": "ZTSClient.lookupZTSUrl()", "testcase": false, "constructor": false}, {"identifier": "initZTSAccessTokenFileLoader", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void initZTSAccessTokenFileLoader()", "full_signature": "public static void initZTSAccessTokenFileLoader()", "class_method_signature": "ZTSClient.initZTSAccessTokenFileLoader()", "testcase": false, "constructor": false}, {"identifier": "setAccessTokenSignKeyResolver", "parameters": "(JwtsSigningKeyResolver jwtsSigningKeyResolver)", "modifiers": "public static", "return": "void", "signature": "void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver)", "full_signature": "public static void setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver)", "class_method_signature": "ZTSClient.setAccessTokenSignKeyResolver(JwtsSigningKeyResolver jwtsSigningKeyResolver)", "testcase": false, "constructor": false}, {"identifier": "ZTSClient", "parameters": "()", "modifiers": "public", "return": "", "signature": " ZTSClient()", "full_signature": "public  ZTSClient()", "class_method_signature": "ZTSClient.ZTSClient()", "testcase": false, "constructor": true}, {"identifier": "ZTSClient", "parameters": "(String ztsUrl)", "modifiers": "public", "return": "", "signature": " ZTSClient(String ztsUrl)", "full_signature": "public  ZTSClient(String ztsUrl)", "class_method_signature": "ZTSClient.ZTSClient(String ztsUrl)", "testcase": false, "constructor": true}, {"identifier": "ZTSClient", "parameters": "(Principal identity)", "modifiers": "public", "return": "", "signature": " ZTSClient(Principal identity)", "full_signature": "public  ZTSClient(Principal identity)", "class_method_signature": "ZTSClient.ZTSClient(Principal identity)", "testcase": false, "constructor": true}, {"identifier": "ZTSClient", "parameters": "(String ztsUrl, Principal identity)", "modifiers": "public", "return": "", "signature": " ZTSClient(String ztsUrl, Principal identity)", "full_signature": "public  ZTSClient(String ztsUrl, Principal identity)", "class_method_signature": "ZTSClient.ZTSClient(String ztsUrl, Principal identity)", "testcase": false, "constructor": true}, {"identifier": "ZTSClient", "parameters": "(String ztsUrl, SSLContext sslContext)", "modifiers": "public", "return": "", "signature": " ZTSClient(String ztsUrl, SSLContext sslContext)", "full_signature": "public  ZTSClient(String ztsUrl, SSLContext sslContext)", "class_method_signature": "ZTSClient.ZTSClient(String ztsUrl, SSLContext sslContext)", "testcase": false, "constructor": true}, {"identifier": "ZTSClient", "parameters": "(String ztsUrl, String proxyUrl, SSLContext sslContext)", "modifiers": "public", "return": "", "signature": " ZTSClient(String ztsUrl, String proxyUrl, SSLContext sslContext)", "full_signature": "public  ZTSClient(String ztsUrl, String proxyUrl, SSLContext sslContext)", "class_method_signature": "ZTSClient.ZTSClient(String ztsUrl, String proxyUrl, SSLContext sslContext)", "testcase": false, "constructor": true}, {"identifier": "ZTSClient", "parameters": "(String domainName, String serviceName, ServiceIdentityProvider siaProvider)", "modifiers": "public", "return": "", "signature": " ZTSClient(String domainName, String serviceName, ServiceIdentityProvider siaProvider)", "full_signature": "public  ZTSClient(String domainName, String serviceName, ServiceIdentityProvider siaProvider)", "class_method_signature": "ZTSClient.ZTSClient(String domainName, String serviceName, ServiceIdentityProvider siaProvider)", "testcase": false, "constructor": true}, {"identifier": "ZTSClient", "parameters": "(String ztsUrl, String domainName, String serviceName,\n                     ServiceIdentityProvider siaProvider)", "modifiers": "public", "return": "", "signature": " ZTSClient(String ztsUrl, String domainName, String serviceName,\n                     ServiceIdentityProvider siaProvider)", "full_signature": "public  ZTSClient(String ztsUrl, String domainName, String serviceName,\n                     ServiceIdentityProvider siaProvider)", "class_method_signature": "ZTSClient.ZTSClient(String ztsUrl, String domainName, String serviceName,\n                     ServiceIdentityProvider siaProvider)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ZTSClient.close()", "testcase": false, "constructor": false}, {"identifier": "setEnablePrefetch", "parameters": "(boolean state)", "modifiers": "public", "return": "void", "signature": "void setEnablePrefetch(boolean state)", "full_signature": "public void setEnablePrefetch(boolean state)", "class_method_signature": "ZTSClient.setEnablePrefetch(boolean state)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String name, Object value)", "modifiers": "public", "return": "void", "signature": "void setProperty(String name, Object value)", "full_signature": "public void setProperty(String name, Object value)", "class_method_signature": "ZTSClient.setProperty(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "setNotificationSender", "parameters": "(ZTSClientNotificationSender notificationSender)", "modifiers": "public", "return": "void", "signature": "void setNotificationSender(ZTSClientNotificationSender notificationSender)", "full_signature": "public void setNotificationSender(ZTSClientNotificationSender notificationSender)", "class_method_signature": "ZTSClient.setNotificationSender(ZTSClientNotificationSender notificationSender)", "testcase": false, "constructor": false}, {"identifier": "cancelPrefetch", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void cancelPrefetch()", "full_signature": "public static void cancelPrefetch()", "class_method_signature": "ZTSClient.cancelPrefetch()", "testcase": false, "constructor": false}, {"identifier": "getZTSUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getZTSUrl()", "full_signature": "public String getZTSUrl()", "class_method_signature": "ZTSClient.getZTSUrl()", "testcase": false, "constructor": false}, {"identifier": "setZTSRDLGeneratedClient", "parameters": "(ZTSRDLGeneratedClient client)", "modifiers": "public", "return": "void", "signature": "void setZTSRDLGeneratedClient(ZTSRDLGeneratedClient client)", "full_signature": "public void setZTSRDLGeneratedClient(ZTSRDLGeneratedClient client)", "class_method_signature": "ZTSClient.setZTSRDLGeneratedClient(ZTSRDLGeneratedClient client)", "testcase": false, "constructor": false}, {"identifier": "setZTSClientCache", "parameters": "(ZTSClientCache ztsClientCache)", "modifiers": "public", "return": "void", "signature": "void setZTSClientCache(ZTSClientCache ztsClientCache)", "full_signature": "public void setZTSClientCache(ZTSClientCache ztsClientCache)", "class_method_signature": "ZTSClient.setZTSClientCache(ZTSClientCache ztsClientCache)", "testcase": false, "constructor": false}, {"identifier": "createSSLContext", "parameters": "(final String trustStorePath, final char[] trustStorePassword,\n                 final String publicCertFile, final String privateKeyFile, boolean monitorKeyCertUpdates)", "modifiers": "public", "return": "SSLContext", "signature": "SSLContext createSSLContext(final String trustStorePath, final char[] trustStorePassword,\n                 final String publicCertFile, final String privateKeyFile, boolean monitorKeyCertUpdates)", "full_signature": "public SSLContext createSSLContext(final String trustStorePath, final char[] trustStorePassword,\n                 final String publicCertFile, final String privateKeyFile, boolean monitorKeyCertUpdates)", "class_method_signature": "ZTSClient.createSSLContext(final String trustStorePath, final char[] trustStorePassword,\n                 final String publicCertFile, final String privateKeyFile, boolean monitorKeyCertUpdates)", "testcase": false, "constructor": false}, {"identifier": "createSSLContext", "parameters": "()", "modifiers": "private", "return": "SSLContext", "signature": "SSLContext createSSLContext()", "full_signature": "private SSLContext createSSLContext()", "class_method_signature": "ZTSClient.createSSLContext()", "testcase": false, "constructor": false}, {"identifier": "loadServicePrivateKey", "parameters": "()", "modifiers": "static", "return": "PrivateKeyStore", "signature": "PrivateKeyStore loadServicePrivateKey()", "full_signature": "static PrivateKeyStore loadServicePrivateKey()", "class_method_signature": "ZTSClient.loadServicePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "getClientBuilder", "parameters": "()", "modifiers": "", "return": "ClientBuilder", "signature": "ClientBuilder getClientBuilder()", "full_signature": " ClientBuilder getClientBuilder()", "class_method_signature": "ZTSClient.getClientBuilder()", "testcase": false, "constructor": false}, {"identifier": "initClient", "parameters": "(final String serverUrl, Principal identity,\n            final String domainName, final String serviceName,\n            final ServiceIdentityProvider siaProvider)", "modifiers": "private", "return": "void", "signature": "void initClient(final String serverUrl, Principal identity,\n            final String domainName, final String serviceName,\n            final ServiceIdentityProvider siaProvider)", "full_signature": "private void initClient(final String serverUrl, Principal identity,\n            final String domainName, final String serviceName,\n            final ServiceIdentityProvider siaProvider)", "class_method_signature": "ZTSClient.initClient(final String serverUrl, Principal identity,\n            final String domainName, final String serviceName,\n            final ServiceIdentityProvider siaProvider)", "testcase": false, "constructor": false}, {"identifier": "createConnectionManager", "parameters": "(SSLContext sslContext, HostnameVerifier hostnameVerifier)", "modifiers": "", "return": "PoolingHttpClientConnectionManager", "signature": "PoolingHttpClientConnectionManager createConnectionManager(SSLContext sslContext, HostnameVerifier hostnameVerifier)", "full_signature": " PoolingHttpClientConnectionManager createConnectionManager(SSLContext sslContext, HostnameVerifier hostnameVerifier)", "class_method_signature": "ZTSClient.createConnectionManager(SSLContext sslContext, HostnameVerifier hostnameVerifier)", "testcase": false, "constructor": false}, {"identifier": "setPrefetchInterval", "parameters": "(long interval)", "modifiers": "", "return": "void", "signature": "void setPrefetchInterval(long interval)", "full_signature": " void setPrefetchInterval(long interval)", "class_method_signature": "ZTSClient.setPrefetchInterval(long interval)", "testcase": false, "constructor": false}, {"identifier": "getPrefetchInterval", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getPrefetchInterval()", "full_signature": " long getPrefetchInterval()", "class_method_signature": "ZTSClient.getPrefetchInterval()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getHeader()", "full_signature": "public static String getHeader()", "class_method_signature": "ZTSClient.getHeader()", "testcase": false, "constructor": false}, {"identifier": "addCredentials", "parameters": "(Principal identity)", "modifiers": "public", "return": "ZTSClient", "signature": "ZTSClient addCredentials(Principal identity)", "full_signature": "public ZTSClient addCredentials(Principal identity)", "class_method_signature": "ZTSClient.addCredentials(Principal identity)", "testcase": false, "constructor": false}, {"identifier": "addCredentials", "parameters": "(String credHeader, String credToken)", "modifiers": "public", "return": "void", "signature": "void addCredentials(String credHeader, String credToken)", "full_signature": "public void addCredentials(String credHeader, String credToken)", "class_method_signature": "ZTSClient.addCredentials(String credHeader, String credToken)", "testcase": false, "constructor": false}, {"identifier": "clearCredentials", "parameters": "()", "modifiers": "public", "return": "ZTSClient", "signature": "ZTSClient clearCredentials()", "full_signature": "public ZTSClient clearCredentials()", "class_method_signature": "ZTSClient.clearCredentials()", "testcase": false, "constructor": false}, {"identifier": "addPrincipalCredentials", "parameters": "(Principal identity, boolean resetServiceDetails)", "modifiers": "", "return": "ZTSClient", "signature": "ZTSClient addPrincipalCredentials(Principal identity, boolean resetServiceDetails)", "full_signature": " ZTSClient addPrincipalCredentials(Principal identity, boolean resetServiceDetails)", "class_method_signature": "ZTSClient.addPrincipalCredentials(Principal identity, boolean resetServiceDetails)", "testcase": false, "constructor": false}, {"identifier": "sameCredentialsAsBefore", "parameters": "(Principal svcPrincipal)", "modifiers": "", "return": "boolean", "signature": "boolean sameCredentialsAsBefore(Principal svcPrincipal)", "full_signature": " boolean sameCredentialsAsBefore(Principal svcPrincipal)", "class_method_signature": "ZTSClient.sameCredentialsAsBefore(Principal svcPrincipal)", "testcase": false, "constructor": false}, {"identifier": "updateServicePrincipal", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean updateServicePrincipal()", "full_signature": " boolean updateServicePrincipal()", "class_method_signature": "ZTSClient.updateServicePrincipal()", "testcase": false, "constructor": false}, {"identifier": "getHostServices", "parameters": "(String host)", "modifiers": "public", "return": "HostServices", "signature": "HostServices getHostServices(String host)", "full_signature": "public HostServices getHostServices(String host)", "class_method_signature": "ZTSClient.getHostServices(String host)", "testcase": false, "constructor": false}, {"identifier": "getJWKList", "parameters": "(boolean rfcCurveNames)", "modifiers": "public", "return": "JWKList", "signature": "JWKList getJWKList(boolean rfcCurveNames)", "full_signature": "public JWKList getJWKList(boolean rfcCurveNames)", "class_method_signature": "ZTSClient.getJWKList(boolean rfcCurveNames)", "testcase": false, "constructor": false}, {"identifier": "getJWKList", "parameters": "()", "modifiers": "public", "return": "JWKList", "signature": "JWKList getJWKList()", "full_signature": "public JWKList getJWKList()", "class_method_signature": "ZTSClient.getJWKList()", "testcase": false, "constructor": false}, {"identifier": "getRoleToken", "parameters": "(String domainName)", "modifiers": "public", "return": "RoleToken", "signature": "RoleToken getRoleToken(String domainName)", "full_signature": "public RoleToken getRoleToken(String domainName)", "class_method_signature": "ZTSClient.getRoleToken(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getRoleToken", "parameters": "(String domainName, String roleNames)", "modifiers": "public", "return": "RoleToken", "signature": "RoleToken getRoleToken(String domainName, String roleNames)", "full_signature": "public RoleToken getRoleToken(String domainName, String roleNames)", "class_method_signature": "ZTSClient.getRoleToken(String domainName, String roleNames)", "testcase": false, "constructor": false}, {"identifier": "getRoleToken", "parameters": "(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache)", "modifiers": "public", "return": "RoleToken", "signature": "RoleToken getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache)", "full_signature": "public RoleToken getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache)", "class_method_signature": "ZTSClient.getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache)", "testcase": false, "constructor": false}, {"identifier": "getRoleToken", "parameters": "(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache, String proxyForPrincipal)", "modifiers": "public", "return": "RoleToken", "signature": "RoleToken getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache, String proxyForPrincipal)", "full_signature": "public RoleToken getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache, String proxyForPrincipal)", "class_method_signature": "ZTSClient.getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache, String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getAccessToken", "parameters": "(String domainName, List<String> roleNames, long expiryTime)", "modifiers": "public", "return": "AccessTokenResponse", "signature": "AccessTokenResponse getAccessToken(String domainName, List<String> roleNames, long expiryTime)", "full_signature": "public AccessTokenResponse getAccessToken(String domainName, List<String> roleNames, long expiryTime)", "class_method_signature": "ZTSClient.getAccessToken(String domainName, List<String> roleNames, long expiryTime)", "testcase": false, "constructor": false}, {"identifier": "getAccessToken", "parameters": "(String domainName, List<String> roleNames,\n            String idTokenServiceName, long expiryTime, boolean ignoreCache)", "modifiers": "public", "return": "AccessTokenResponse", "signature": "AccessTokenResponse getAccessToken(String domainName, List<String> roleNames,\n            String idTokenServiceName, long expiryTime, boolean ignoreCache)", "full_signature": "public AccessTokenResponse getAccessToken(String domainName, List<String> roleNames,\n            String idTokenServiceName, long expiryTime, boolean ignoreCache)", "class_method_signature": "ZTSClient.getAccessToken(String domainName, List<String> roleNames,\n            String idTokenServiceName, long expiryTime, boolean ignoreCache)", "testcase": false, "constructor": false}, {"identifier": "getAccessToken", "parameters": "(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal, long expiryTime, boolean ignoreCache)", "modifiers": "public", "return": "AccessTokenResponse", "signature": "AccessTokenResponse getAccessToken(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal, long expiryTime, boolean ignoreCache)", "full_signature": "public AccessTokenResponse getAccessToken(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal, long expiryTime, boolean ignoreCache)", "class_method_signature": "ZTSClient.getAccessToken(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal, long expiryTime, boolean ignoreCache)", "testcase": false, "constructor": false}, {"identifier": "generateAccessTokenRequestBody", "parameters": "(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "modifiers": "", "return": "String", "signature": "String generateAccessTokenRequestBody(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "full_signature": " String generateAccessTokenRequestBody(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "class_method_signature": "ZTSClient.generateAccessTokenRequestBody(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "testcase": false, "constructor": false}, {"identifier": "postRoleCertificateRequest", "parameters": "(String domainName, String roleName,\n            RoleCertificateRequest req)", "modifiers": "public", "return": "RoleToken", "signature": "RoleToken postRoleCertificateRequest(String domainName, String roleName,\n            RoleCertificateRequest req)", "full_signature": "public RoleToken postRoleCertificateRequest(String domainName, String roleName,\n            RoleCertificateRequest req)", "class_method_signature": "ZTSClient.postRoleCertificateRequest(String domainName, String roleName,\n            RoleCertificateRequest req)", "testcase": false, "constructor": false}, {"identifier": "generateRoleCertificateRequest", "parameters": "(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            PrivateKey privateKey, final String csrDn, final String csrDomain, int expiryTime)", "modifiers": "static public", "return": "RoleCertificateRequest", "signature": "RoleCertificateRequest generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            PrivateKey privateKey, final String csrDn, final String csrDomain, int expiryTime)", "full_signature": "static public RoleCertificateRequest generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            PrivateKey privateKey, final String csrDn, final String csrDomain, int expiryTime)", "class_method_signature": "ZTSClient.generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            PrivateKey privateKey, final String csrDn, final String csrDomain, int expiryTime)", "testcase": false, "constructor": false}, {"identifier": "generateRoleCertificateRequest", "parameters": "(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            final PrivateKey privateKey, final String cloud, int expiryTime)", "modifiers": "static public", "return": "RoleCertificateRequest", "signature": "RoleCertificateRequest generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            final PrivateKey privateKey, final String cloud, int expiryTime)", "full_signature": "static public RoleCertificateRequest generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            final PrivateKey privateKey, final String cloud, int expiryTime)", "class_method_signature": "ZTSClient.generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            final PrivateKey privateKey, final String cloud, int expiryTime)", "testcase": false, "constructor": false}, {"identifier": "generateInstanceRefreshRequest", "parameters": "(final String principalDomain,\n            final String principalService, PrivateKey privateKey, final String csrDn,\n            final String csrDomain, int expiryTime)", "modifiers": "static public", "return": "InstanceRefreshRequest", "signature": "InstanceRefreshRequest generateInstanceRefreshRequest(final String principalDomain,\n            final String principalService, PrivateKey privateKey, final String csrDn,\n            final String csrDomain, int expiryTime)", "full_signature": "static public InstanceRefreshRequest generateInstanceRefreshRequest(final String principalDomain,\n            final String principalService, PrivateKey privateKey, final String csrDn,\n            final String csrDomain, int expiryTime)", "class_method_signature": "ZTSClient.generateInstanceRefreshRequest(final String principalDomain,\n            final String principalService, PrivateKey privateKey, final String csrDn,\n            final String csrDomain, int expiryTime)", "testcase": false, "constructor": false}, {"identifier": "generateInstanceRefreshRequest", "parameters": "(String principalDomain,\n            String principalService, PrivateKey privateKey, String cloud, int expiryTime)", "modifiers": "static public", "return": "InstanceRefreshRequest", "signature": "InstanceRefreshRequest generateInstanceRefreshRequest(String principalDomain,\n            String principalService, PrivateKey privateKey, String cloud, int expiryTime)", "full_signature": "static public InstanceRefreshRequest generateInstanceRefreshRequest(String principalDomain,\n            String principalService, PrivateKey privateKey, String cloud, int expiryTime)", "class_method_signature": "ZTSClient.generateInstanceRefreshRequest(String principalDomain,\n            String principalService, PrivateKey privateKey, String cloud, int expiryTime)", "testcase": false, "constructor": false}, {"identifier": "processPrefetchTask", "parameters": "(PrefetchTokenScheduledItem item, ZTSClient itemZtsClient,\n            Set<String> svcLoaderCache, long currentTime)", "modifiers": "static", "return": "void", "signature": "void processPrefetchTask(PrefetchTokenScheduledItem item, ZTSClient itemZtsClient,\n            Set<String> svcLoaderCache, long currentTime)", "full_signature": "static void processPrefetchTask(PrefetchTokenScheduledItem item, ZTSClient itemZtsClient,\n            Set<String> svcLoaderCache, long currentTime)", "class_method_signature": "ZTSClient.processPrefetchTask(PrefetchTokenScheduledItem item, ZTSClient itemZtsClient,\n            Set<String> svcLoaderCache, long currentTime)", "testcase": false, "constructor": false}, {"identifier": "getScheduledItemsSize", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getScheduledItemsSize()", "full_signature": " int getScheduledItemsSize()", "class_method_signature": "ZTSClient.getScheduledItemsSize()", "testcase": false, "constructor": false}, {"identifier": "prefetchRoleToken", "parameters": "(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime)", "modifiers": "", "return": "boolean", "signature": "boolean prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime)", "full_signature": " boolean prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime)", "class_method_signature": "ZTSClient.prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "prefetchRoleToken", "parameters": "(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "modifiers": "", "return": "boolean", "signature": "boolean prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "full_signature": " boolean prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "class_method_signature": "ZTSClient.prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "prefetchAwsCreds", "parameters": "(String domainName, String roleName, String externalId,\n            Integer minExpiryTime, Integer maxExpiryTime)", "modifiers": "", "return": "boolean", "signature": "boolean prefetchAwsCreds(String domainName, String roleName, String externalId,\n            Integer minExpiryTime, Integer maxExpiryTime)", "full_signature": " boolean prefetchAwsCreds(String domainName, String roleName, String externalId,\n            Integer minExpiryTime, Integer maxExpiryTime)", "class_method_signature": "ZTSClient.prefetchAwsCreds(String domainName, String roleName, String externalId,\n            Integer minExpiryTime, Integer maxExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "prefetchAccessToken", "parameters": "(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "modifiers": "public", "return": "boolean", "signature": "boolean prefetchAccessToken(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "full_signature": "public boolean prefetchAccessToken(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "class_method_signature": "ZTSClient.prefetchAccessToken(String domainName, List<String> roleNames,\n            String idTokenServiceName, String proxyForPrincipal, long expiryTime)", "testcase": false, "constructor": false}, {"identifier": "prefetchToken", "parameters": "(String domainName, String roleName, List<String> roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal,\n            String externalId, String idTokenServiceName, long expiryTimeUTC, TokenType tokenType)", "modifiers": "", "return": "boolean", "signature": "boolean prefetchToken(String domainName, String roleName, List<String> roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal,\n            String externalId, String idTokenServiceName, long expiryTimeUTC, TokenType tokenType)", "full_signature": " boolean prefetchToken(String domainName, String roleName, List<String> roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal,\n            String externalId, String idTokenServiceName, long expiryTimeUTC, TokenType tokenType)", "class_method_signature": "ZTSClient.prefetchToken(String domainName, String roleName, List<String> roleNames,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal,\n            String externalId, String idTokenServiceName, long expiryTimeUTC, TokenType tokenType)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenCacheKey", "parameters": "(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal)", "modifiers": "", "return": "String", "signature": "String getAccessTokenCacheKey(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal)", "full_signature": " String getAccessTokenCacheKey(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal)", "class_method_signature": "ZTSClient.getAccessTokenCacheKey(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getAccessTokenCacheKey", "parameters": "(String tenantDomain, String tenantService, String domainName,\n            List<String> roleNames, String idTokenServiceName, String proxyForPrincipal)", "modifiers": "", "return": "String", "signature": "String getAccessTokenCacheKey(String tenantDomain, String tenantService, String domainName,\n            List<String> roleNames, String idTokenServiceName, String proxyForPrincipal)", "full_signature": " String getAccessTokenCacheKey(String tenantDomain, String tenantService, String domainName,\n            List<String> roleNames, String idTokenServiceName, String proxyForPrincipal)", "class_method_signature": "ZTSClient.getAccessTokenCacheKey(String tenantDomain, String tenantService, String domainName,\n            List<String> roleNames, String idTokenServiceName, String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getRoleTokenCacheKey", "parameters": "(String domainName, String roleName, String proxyForPrincipal)", "modifiers": "", "return": "String", "signature": "String getRoleTokenCacheKey(String domainName, String roleName, String proxyForPrincipal)", "full_signature": " String getRoleTokenCacheKey(String domainName, String roleName, String proxyForPrincipal)", "class_method_signature": "ZTSClient.getRoleTokenCacheKey(String domainName, String roleName, String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getRoleTokenCacheKey", "parameters": "(String tenantDomain, String tenantService, String domainName,\n            String roleName, String proxyForPrincipal)", "modifiers": "static", "return": "String", "signature": "String getRoleTokenCacheKey(String tenantDomain, String tenantService, String domainName,\n            String roleName, String proxyForPrincipal)", "full_signature": "static String getRoleTokenCacheKey(String tenantDomain, String tenantService, String domainName,\n            String roleName, String proxyForPrincipal)", "class_method_signature": "ZTSClient.getRoleTokenCacheKey(String tenantDomain, String tenantService, String domainName,\n            String roleName, String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "isExpiredToken", "parameters": "(long expiryTime, Integer minExpiryTime, Integer maxExpiryTime,\n            int tokenMinExpiryTime)", "modifiers": "static", "return": "boolean", "signature": "boolean isExpiredToken(long expiryTime, Integer minExpiryTime, Integer maxExpiryTime,\n            int tokenMinExpiryTime)", "full_signature": "static boolean isExpiredToken(long expiryTime, Integer minExpiryTime, Integer maxExpiryTime,\n            int tokenMinExpiryTime)", "class_method_signature": "ZTSClient.isExpiredToken(long expiryTime, Integer minExpiryTime, Integer maxExpiryTime,\n            int tokenMinExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "lookupRoleTokenInCache", "parameters": "(String cacheKey, Integer minExpiryTime, Integer maxExpiryTime, int serverMinExpiryTime)", "modifiers": "", "return": "RoleToken", "signature": "RoleToken lookupRoleTokenInCache(String cacheKey, Integer minExpiryTime, Integer maxExpiryTime, int serverMinExpiryTime)", "full_signature": " RoleToken lookupRoleTokenInCache(String cacheKey, Integer minExpiryTime, Integer maxExpiryTime, int serverMinExpiryTime)", "class_method_signature": "ZTSClient.lookupRoleTokenInCache(String cacheKey, Integer minExpiryTime, Integer maxExpiryTime, int serverMinExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "lookupAccessTokenResponseInCache", "parameters": "(String cacheKey, long expiryTime)", "modifiers": "", "return": "AccessTokenResponse", "signature": "AccessTokenResponse lookupAccessTokenResponseInCache(String cacheKey, long expiryTime)", "full_signature": " AccessTokenResponse lookupAccessTokenResponseInCache(String cacheKey, long expiryTime)", "class_method_signature": "ZTSClient.lookupAccessTokenResponseInCache(String cacheKey, long expiryTime)", "testcase": false, "constructor": false}, {"identifier": "lookupAwsCredInCache", "parameters": "(String cacheKey, Integer minExpiryTime,\n            Integer maxExpiryTime)", "modifiers": "", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials lookupAwsCredInCache(String cacheKey, Integer minExpiryTime,\n            Integer maxExpiryTime)", "full_signature": " AWSTemporaryCredentials lookupAwsCredInCache(String cacheKey, Integer minExpiryTime,\n            Integer maxExpiryTime)", "class_method_signature": "ZTSClient.lookupAwsCredInCache(String cacheKey, Integer minExpiryTime,\n            Integer maxExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "getRoleAccess", "parameters": "(String domainName, String principal)", "modifiers": "public", "return": "RoleAccess", "signature": "RoleAccess getRoleAccess(String domainName, String principal)", "full_signature": "public RoleAccess getRoleAccess(String domainName, String principal)", "class_method_signature": "ZTSClient.getRoleAccess(String domainName, String principal)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentity", "parameters": "(String domainName, String serviceName)", "modifiers": "public", "return": "ServiceIdentity", "signature": "ServiceIdentity getServiceIdentity(String domainName, String serviceName)", "full_signature": "public ServiceIdentity getServiceIdentity(String domainName, String serviceName)", "class_method_signature": "ZTSClient.getServiceIdentity(String domainName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "getPublicKeyEntry", "parameters": "(String domainName, String serviceName, String keyId)", "modifiers": "public", "return": "PublicKeyEntry", "signature": "PublicKeyEntry getPublicKeyEntry(String domainName, String serviceName, String keyId)", "full_signature": "public PublicKeyEntry getPublicKeyEntry(String domainName, String serviceName, String keyId)", "class_method_signature": "ZTSClient.getPublicKeyEntry(String domainName, String serviceName, String keyId)", "testcase": false, "constructor": false}, {"identifier": "getServiceIdentityList", "parameters": "(String domainName)", "modifiers": "public", "return": "ServiceIdentityList", "signature": "ServiceIdentityList getServiceIdentityList(String domainName)", "full_signature": "public ServiceIdentityList getServiceIdentityList(String domainName)", "class_method_signature": "ZTSClient.getServiceIdentityList(String domainName)", "testcase": false, "constructor": false}, {"identifier": "getTenantDomains", "parameters": "(String providerDomainName, String userName,\n            String roleName, String serviceName)", "modifiers": "public", "return": "TenantDomains", "signature": "TenantDomains getTenantDomains(String providerDomainName, String userName,\n            String roleName, String serviceName)", "full_signature": "public TenantDomains getTenantDomains(String providerDomainName, String userName,\n            String roleName, String serviceName)", "class_method_signature": "ZTSClient.getTenantDomains(String providerDomainName, String userName,\n            String roleName, String serviceName)", "testcase": false, "constructor": false}, {"identifier": "postInstanceRefreshRequest", "parameters": "(String domain, String service, InstanceRefreshRequest req)", "modifiers": "public", "return": "Identity", "signature": "Identity postInstanceRefreshRequest(String domain, String service, InstanceRefreshRequest req)", "full_signature": "public Identity postInstanceRefreshRequest(String domain, String service, InstanceRefreshRequest req)", "class_method_signature": "ZTSClient.postInstanceRefreshRequest(String domain, String service, InstanceRefreshRequest req)", "testcase": false, "constructor": false}, {"identifier": "getAWSLambdaServiceCertificate", "parameters": "(String domainName,\n            String serviceName, String account, String provider)", "modifiers": "public", "return": "AWSLambdaIdentity", "signature": "AWSLambdaIdentity getAWSLambdaServiceCertificate(String domainName,\n            String serviceName, String account, String provider)", "full_signature": "public AWSLambdaIdentity getAWSLambdaServiceCertificate(String domainName,\n            String serviceName, String account, String provider)", "class_method_signature": "ZTSClient.getAWSLambdaServiceCertificate(String domainName,\n            String serviceName, String account, String provider)", "testcase": false, "constructor": false}, {"identifier": "getAWSLambdaAttestationData", "parameters": "(final String athenzService, final String account)", "modifiers": "", "return": "String", "signature": "String getAWSLambdaAttestationData(final String athenzService, final String account)", "full_signature": " String getAWSLambdaAttestationData(final String athenzService, final String account)", "class_method_signature": "ZTSClient.getAWSLambdaAttestationData(final String athenzService, final String account)", "testcase": false, "constructor": false}, {"identifier": "getAssumeRoleRequest", "parameters": "(String account, String roleName)", "modifiers": "", "return": "AssumeRoleRequest", "signature": "AssumeRoleRequest getAssumeRoleRequest(String account, String roleName)", "full_signature": " AssumeRoleRequest getAssumeRoleRequest(String account, String roleName)", "class_method_signature": "ZTSClient.getAssumeRoleRequest(String account, String roleName)", "testcase": false, "constructor": false}, {"identifier": "assumeAWSRole", "parameters": "(String account, String roleName)", "modifiers": "", "return": "Credentials", "signature": "Credentials assumeAWSRole(String account, String roleName)", "full_signature": " Credentials assumeAWSRole(String account, String roleName)", "class_method_signature": "ZTSClient.assumeAWSRole(String account, String roleName)", "testcase": false, "constructor": false}, {"identifier": "getAWSCredentialProvider", "parameters": "(String domainName, String roleName)", "modifiers": "public", "return": "AWSCredentialsProvider", "signature": "AWSCredentialsProvider getAWSCredentialProvider(String domainName, String roleName)", "full_signature": "public AWSCredentialsProvider getAWSCredentialProvider(String domainName, String roleName)", "class_method_signature": "ZTSClient.getAWSCredentialProvider(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "getAWSCredentialProvider", "parameters": "(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "modifiers": "public", "return": "AWSCredentialsProvider", "signature": "AWSCredentialsProvider getAWSCredentialProvider(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "full_signature": "public AWSCredentialsProvider getAWSCredentialProvider(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "class_method_signature": "ZTSClient.getAWSCredentialProvider(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "getAWSTemporaryCredentials", "parameters": "(String domainName, String roleName)", "modifiers": "public", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName)", "full_signature": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName)", "class_method_signature": "ZTSClient.getAWSTemporaryCredentials(String domainName, String roleName)", "testcase": false, "constructor": false}, {"identifier": "getAWSTemporaryCredentials", "parameters": "(String domainName, String roleName,\n            boolean ignoreCache)", "modifiers": "public", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            boolean ignoreCache)", "full_signature": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            boolean ignoreCache)", "class_method_signature": "ZTSClient.getAWSTemporaryCredentials(String domainName, String roleName,\n            boolean ignoreCache)", "testcase": false, "constructor": false}, {"identifier": "getAWSTemporaryCredentials", "parameters": "(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "modifiers": "public", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "full_signature": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "class_method_signature": "ZTSClient.getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime)", "testcase": false, "constructor": false}, {"identifier": "getAWSTemporaryCredentials", "parameters": "(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime, boolean ignoreCache)", "modifiers": "public", "return": "AWSTemporaryCredentials", "signature": "AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime, boolean ignoreCache)", "full_signature": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime, boolean ignoreCache)", "class_method_signature": "ZTSClient.getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime, boolean ignoreCache)", "testcase": false, "constructor": false}, {"identifier": "getDomainSignedPolicyData", "parameters": "(String domainName, String matchingTag,\n            Map<String, List<String>> responseHeaders)", "modifiers": "public", "return": "DomainSignedPolicyData", "signature": "DomainSignedPolicyData getDomainSignedPolicyData(String domainName, String matchingTag,\n            Map<String, List<String>> responseHeaders)", "full_signature": "public DomainSignedPolicyData getDomainSignedPolicyData(String domainName, String matchingTag,\n            Map<String, List<String>> responseHeaders)", "class_method_signature": "ZTSClient.getDomainSignedPolicyData(String domainName, String matchingTag,\n            Map<String, List<String>> responseHeaders)", "testcase": false, "constructor": false}, {"identifier": "getAccess", "parameters": "(String domainName, String roleName, String principal)", "modifiers": "public", "return": "Access", "signature": "Access getAccess(String domainName, String roleName, String principal)", "full_signature": "public Access getAccess(String domainName, String roleName, String principal)", "class_method_signature": "ZTSClient.getAccess(String domainName, String roleName, String principal)", "testcase": false, "constructor": false}, {"identifier": "getResourceAccess", "parameters": "(String action, String resource, String trustDomain, String principal)", "modifiers": "public", "return": "ResourceAccess", "signature": "ResourceAccess getResourceAccess(String action, String resource, String trustDomain, String principal)", "full_signature": "public ResourceAccess getResourceAccess(String action, String resource, String trustDomain, String principal)", "class_method_signature": "ZTSClient.getResourceAccess(String action, String resource, String trustDomain, String principal)", "testcase": false, "constructor": false}, {"identifier": "getResourceAccessExt", "parameters": "(String action, String resource, String trustDomain, String principal)", "modifiers": "public", "return": "ResourceAccess", "signature": "ResourceAccess getResourceAccessExt(String action, String resource, String trustDomain, String principal)", "full_signature": "public ResourceAccess getResourceAccessExt(String action, String resource, String trustDomain, String principal)", "class_method_signature": "ZTSClient.getResourceAccessExt(String action, String resource, String trustDomain, String principal)", "testcase": false, "constructor": false}, {"identifier": "postDomainMetrics", "parameters": "(String domainName, DomainMetrics req)", "modifiers": "public", "return": "void", "signature": "void postDomainMetrics(String domainName, DomainMetrics req)", "full_signature": "public void postDomainMetrics(String domainName, DomainMetrics req)", "class_method_signature": "ZTSClient.postDomainMetrics(String domainName, DomainMetrics req)", "testcase": false, "constructor": false}, {"identifier": "postInstanceRegisterInformation", "parameters": "(InstanceRegisterInformation info,\n            Map<String, List<String>> responseHeaders)", "modifiers": "public", "return": "InstanceIdentity", "signature": "InstanceIdentity postInstanceRegisterInformation(InstanceRegisterInformation info,\n            Map<String, List<String>> responseHeaders)", "full_signature": "public InstanceIdentity postInstanceRegisterInformation(InstanceRegisterInformation info,\n            Map<String, List<String>> responseHeaders)", "class_method_signature": "ZTSClient.postInstanceRegisterInformation(InstanceRegisterInformation info,\n            Map<String, List<String>> responseHeaders)", "testcase": false, "constructor": false}, {"identifier": "postInstanceRefreshInformation", "parameters": "(String provider, String domain,\n            String service, String instanceId, InstanceRefreshInformation info)", "modifiers": "public", "return": "InstanceIdentity", "signature": "InstanceIdentity postInstanceRefreshInformation(String provider, String domain,\n            String service, String instanceId, InstanceRefreshInformation info)", "full_signature": "public InstanceIdentity postInstanceRefreshInformation(String provider, String domain,\n            String service, String instanceId, InstanceRefreshInformation info)", "class_method_signature": "ZTSClient.postInstanceRefreshInformation(String provider, String domain,\n            String service, String instanceId, InstanceRefreshInformation info)", "testcase": false, "constructor": false}, {"identifier": "deleteInstanceIdentity", "parameters": "(String provider, String domain,\n            String service, String instanceId)", "modifiers": "public", "return": "void", "signature": "void deleteInstanceIdentity(String provider, String domain,\n            String service, String instanceId)", "full_signature": "public void deleteInstanceIdentity(String provider, String domain,\n            String service, String instanceId)", "class_method_signature": "ZTSClient.deleteInstanceIdentity(String provider, String domain,\n            String service, String instanceId)", "testcase": false, "constructor": false}, {"identifier": "getCertificateAuthorityBundle", "parameters": "(String bundleName)", "modifiers": "public", "return": "CertificateAuthorityBundle", "signature": "CertificateAuthorityBundle getCertificateAuthorityBundle(String bundleName)", "full_signature": "public CertificateAuthorityBundle getCertificateAuthorityBundle(String bundleName)", "class_method_signature": "ZTSClient.getCertificateAuthorityBundle(String bundleName)", "testcase": false, "constructor": false}, {"identifier": "loadSvcProviderTokens", "parameters": "()", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> loadSvcProviderTokens()", "full_signature": "private static Set<String> loadSvcProviderTokens()", "class_method_signature": "ZTSClient.loadSvcProviderTokens()", "testcase": false, "constructor": false}, {"identifier": "multipleRoleKey", "parameters": "(List<String> roles)", "modifiers": "static", "return": "String", "signature": "String multipleRoleKey(List<String> roles)", "full_signature": "static String multipleRoleKey(List<String> roles)", "class_method_signature": "ZTSClient.multipleRoleKey(List<String> roles)", "testcase": false, "constructor": false}, {"identifier": "cacheSvcProvRoleToken", "parameters": "(ZTSClientService.RoleTokenDescriptor desc)", "modifiers": "static", "return": "String", "signature": "String cacheSvcProvRoleToken(ZTSClientService.RoleTokenDescriptor desc)", "full_signature": "static String cacheSvcProvRoleToken(ZTSClientService.RoleTokenDescriptor desc)", "class_method_signature": "ZTSClient.cacheSvcProvRoleToken(ZTSClientService.RoleTokenDescriptor desc)", "testcase": false, "constructor": false}, {"identifier": "prefetchSvcProvTokens", "parameters": "(String domain, String service, String domainName,\n            String cacheKey, String roleName, Integer minExpiryTime, Integer maxExpiryTime,\n            Long expiryTimeUTC, String proxyForPrincipal)", "modifiers": "static", "return": "void", "signature": "void prefetchSvcProvTokens(String domain, String service, String domainName,\n            String cacheKey, String roleName, Integer minExpiryTime, Integer maxExpiryTime,\n            Long expiryTimeUTC, String proxyForPrincipal)", "full_signature": "static void prefetchSvcProvTokens(String domain, String service, String domainName,\n            String cacheKey, String roleName, Integer minExpiryTime, Integer maxExpiryTime,\n            Long expiryTimeUTC, String proxyForPrincipal)", "class_method_signature": "ZTSClient.prefetchSvcProvTokens(String domain, String service, String domainName,\n            String cacheKey, String roleName, Integer minExpiryTime, Integer maxExpiryTime,\n            Long expiryTimeUTC, String proxyForPrincipal)", "testcase": false, "constructor": false}, {"identifier": "startPrefetch", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void startPrefetch()", "full_signature": "static void startPrefetch()", "class_method_signature": "ZTSClient.startPrefetch()", "testcase": false, "constructor": false}], "file": "clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java"}, "focal_method": {"identifier": "getHeader", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String getHeader() {\n        return ROLE_TOKEN_HEADER;\n    }", "signature": "String getHeader()", "full_signature": "public static String getHeader()", "class_method_signature": "ZTSClient.getHeader()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}