{"test_class": {"identifier": "RangeAssignorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RangeAssignor assignor = new RangeAssignor();", "modifier": "private", "type": "RangeAssignor", "declarator": "assignor = new RangeAssignor()", "var_name": "assignor"}], "file": "clients/src/test/java/org/apache/kafka/clients/consumer/RangeAssignorTest.java"}, "test_case": {"identifier": "testOneConsumerMultipleTopics", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOneConsumerMultipleTopics() {\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n        String consumerId = \"consumer\";\n\n        Map<String, Integer> partitionsPerTopic = new HashMap<>();\n        partitionsPerTopic.put(topic1, 1);\n        partitionsPerTopic.put(topic2, 2);\n\n        Map<String, List<TopicPartition>> assignment = assignor.assign(partitionsPerTopic,\n                Collections.singletonMap(consumerId, Arrays.asList(topic1, topic2)));\n\n        assertEquals(Collections.singleton(consumerId), assignment.keySet());\n        assertAssignment(Arrays.asList(\n                new TopicPartition(topic1, 0),\n                new TopicPartition(topic2, 0),\n                new TopicPartition(topic2, 1)), assignment.get(consumerId));\n    }", "signature": "void testOneConsumerMultipleTopics()", "full_signature": "@Test public void testOneConsumerMultipleTopics()", "class_method_signature": "RangeAssignorTest.testOneConsumerMultipleTopics()", "testcase": true, "constructor": false, "invocations": ["put", "put", "assign", "singletonMap", "asList", "assertEquals", "singleton", "keySet", "assertAssignment", "asList", "get"]}, "focal_class": {"identifier": "RangeAssignor", "superclass": "extends AbstractPartitionAssignor", "interfaces": "", "fields": [], "methods": [{"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "RangeAssignor.name()", "testcase": false, "constructor": false}, {"identifier": "consumersPerTopic", "parameters": "(Map<String/* memberId */, List<String/* topic */>> consumerMetadata)", "modifiers": "private", "return": "Map<String/* topic */, List<String/* memberId */>>", "signature": "Map<String/* topic */, List<String/* memberId */>> consumersPerTopic(Map<String/* memberId */, List<String/* topic */>> consumerMetadata)", "full_signature": "private Map<String/* topic */, List<String/* memberId */>> consumersPerTopic(Map<String/* memberId */, List<String/* topic */>> consumerMetadata)", "class_method_signature": "RangeAssignor.consumersPerTopic(Map<String/* memberId */, List<String/* topic */>> consumerMetadata)", "testcase": false, "constructor": false}, {"identifier": "assign", "parameters": "(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "modifiers": "@Override public", "return": "Map<String/* memberId */, List<TopicPartition>>", "signature": "Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "full_signature": "@Override public Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "class_method_signature": "RangeAssignor.assign(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/consumer/RangeAssignor.java"}, "focal_method": {"identifier": "assign", "parameters": "(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "modifiers": "@Override public", "return": "Map<String/* memberId */, List<TopicPartition>>", "body": "@Override\n    public Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions) {\n\n        // \u5c06\u539f\u672c\u7684 member\u8ba2\u9605\u4e86\u54ea\u51e0\u4e2atopic\uff0c\u8f6c\u6362\u4e3atopic \u88ab\u54ea\u51e0\u4e2amember\u8ba2\u9605\u4e86 topicPerConsumer => consumerPerTopic\n        Map<String/* topic */, List<String/* memberId */>> consumersPerTopic = consumersPerTopic(subscriptions);\n\n        // \u4e3a\u6bcf\u4e2a member new\u4e00\u4e2a\u7a7a\u7684TopicPartition\u8ba2\u9605\u96c6\u5408\n        Map<String/* memberId */, List<TopicPartition>> assignment = new HashMap<>();\n        for (String memberId : subscriptions.keySet())\n            assignment.put(memberId, new ArrayList<TopicPartition>());\n\n        // \u5f00\u59cb\u5206\u914d\n        for (Map.Entry<String, List<String>> topicEntry : consumersPerTopic.entrySet()) {\n            String topic = topicEntry.getKey();\n            List<String/* memberId */> consumersForTopic = topicEntry.getValue();\n\n            // \u6839\u636etopic\u540d\u5b57\u4ece partitionsPerTopic \u5230partition\u4e0b\u6709\u591a\u5c11\u4e2atopic\n            Integer numPartitionsForTopic = partitionsPerTopic.get(topic);\n            if (numPartitionsForTopic == null) {\n                continue;\n            }\n\n            Collections.sort(consumersForTopic);\n\n            int numConsumersForConsumer = consumersForTopic.size();\n\n            int N_numPartitionsPerConsumer = numPartitionsForTopic / numConsumersForConsumer;\n            int M_consumersWithExtraPartition = numPartitionsForTopic % numConsumersForConsumer;\n\n            List<TopicPartition> partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic);\n\n            // n = \u5206\u533a\u6570/\u6d88\u8d39\u8005\uff0cm = \u5206\u533a\u6570%\u6d88\u8d39\u8005\uff0c\u524dm\u4e2a\u6d88\u8d39\u8005\u5206\u914dn+1\u4e2a\u5206\u533a\uff08\u6bcf\u6709\u4e00\u4e2a\u4f59\u6570\uff0c\u5206\u914d\u591a\u4e00\u4e2a\uff09\uff0c\n            // \u540e\u9762\u7684\u6d88\u8d39\u8005\u6d88\u8d39n\u4e2a\u5206\u533a\n            for (int i = 0, n = consumersForTopic.size(); i < n; i++) {\n                int start = N_numPartitionsPerConsumer * i + Math.min(i, M_consumersWithExtraPartition);\n                int length = N_numPartitionsPerConsumer + (i + 1 > M_consumersWithExtraPartition ? 0 : 1);\n                assignment.get(consumersForTopic.get(i))\n                          .addAll(partitions.subList(start, start + length));\n            }\n        }\n        return assignment;\n    }", "signature": "Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "full_signature": "@Override public Map<String/* memberId */, List<TopicPartition>> assign(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "class_method_signature": "RangeAssignor.assign(Map<String/* topic */, Integer> partitionsPerTopic,\n        Map<String/* memberId */, List<String/* topic */>> subscriptions)", "testcase": false, "constructor": false, "invocations": ["consumersPerTopic", "keySet", "put", "entrySet", "getKey", "getValue", "get", "sort", "size", "partitions", "size", "min", "addAll", "get", "get", "subList"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}