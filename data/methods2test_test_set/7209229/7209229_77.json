{"test_class": {"identifier": "TestDbusEventBufferMult", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = Logger.getLogger(TestDbusEventBufferMult.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(TestDbusEventBufferMult.class)", "var_name": "LOG"}, {"original_string": "DbusEventBuffer.StaticConfig _config;", "modifier": "", "type": "DbusEventBuffer.StaticConfig", "declarator": "_config", "var_name": "_config"}, {"original_string": "PhysicalSourceStaticConfig [] _pConfigs;", "modifier": "", "type": "PhysicalSourceStaticConfig []", "declarator": "_pConfigs", "var_name": "_pConfigs"}, {"original_string": "DbusEventBufferMult _eventBufferMult;", "modifier": "", "type": "DbusEventBufferMult", "declarator": "_eventBufferMult", "var_name": "_eventBufferMult"}, {"original_string": "TestDbusEvent [] _events;", "modifier": "", "type": "TestDbusEvent []", "declarator": "_events", "var_name": "_events"}, {"original_string": "PhysicalSource _phSource;", "modifier": "", "type": "PhysicalSource", "declarator": "_phSource", "var_name": "_phSource"}, {"original_string": "PhysicalPartition _phPartition;", "modifier": "", "type": "PhysicalPartition", "declarator": "_phPartition", "var_name": "_phPartition"}, {"original_string": "ObjectMapper _mapper;", "modifier": "", "type": "ObjectMapper", "declarator": "_mapper", "var_name": "_mapper"}, {"original_string": "static final String _configSource1 = \"{\\n\" +\n  \"    \\\"name\\\" : \\\"multBufferTest1\\\",\\n\" +\n  \"    \\\"id\\\" : 100,\\n\" +\n  \"    \\\"uri\\\" : \\\"uri1\\\",\\n\" +\n  \"        \\\"slowSourceQueryThreshold\\\" : 2000,\\n\" +\n  \"        \\\"sources\\\" :\\n\" +\n  \"        [\\n\" +\n  \"                {\\\"id\\\" : 1, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName1\\\",\\n\" +\n  \"                 \\\"uri\\\": \\\"member2.member_profile\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 2, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName2\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 2, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName2\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 1 \\n\" +\n  \"                }\\n\" +\n  \"        ]\\n\" +\n  \"}\";", "modifier": "static final", "type": "String", "declarator": "_configSource1 = \"{\\n\" +\n  \"    \\\"name\\\" : \\\"multBufferTest1\\\",\\n\" +\n  \"    \\\"id\\\" : 100,\\n\" +\n  \"    \\\"uri\\\" : \\\"uri1\\\",\\n\" +\n  \"        \\\"slowSourceQueryThreshold\\\" : 2000,\\n\" +\n  \"        \\\"sources\\\" :\\n\" +\n  \"        [\\n\" +\n  \"                {\\\"id\\\" : 1, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName1\\\",\\n\" +\n  \"                 \\\"uri\\\": \\\"member2.member_profile\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 2, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName2\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 2, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName2\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 1 \\n\" +\n  \"                }\\n\" +\n  \"        ]\\n\" +\n  \"}\"", "var_name": "_configSource1"}, {"original_string": "static final String _configSource2 = \"{\\n\" +\n  \"    \\\"name\\\" : \\\"multBufferTest2\\\",\\n\" +\n  \"    \\\"id\\\" : 101,\\n\" +\n  \"    \\\"uri\\\" : \\\"uri2\\\",\\n\" +\n  \"        \\\"slowSourceQueryThreshold\\\" : 2000,\\n\" +\n  \"        \\\"sources\\\" :\\n\" +\n  \"        [\\n\" +\n  \"                {\\\"id\\\" : 11, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName11\\\",\\n\" +\n  \"                 \\\"uri\\\": \\\"member2.member_profile\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\",\\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 12, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName12\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\",\\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 12, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName12\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\"\\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 2, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName2\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 2 \\n\" +\n  \"                }\\n\" +\n  \"        ]\\n\" +\n  \"}\";", "modifier": "static final", "type": "String", "declarator": "_configSource2 = \"{\\n\" +\n  \"    \\\"name\\\" : \\\"multBufferTest2\\\",\\n\" +\n  \"    \\\"id\\\" : 101,\\n\" +\n  \"    \\\"uri\\\" : \\\"uri2\\\",\\n\" +\n  \"        \\\"slowSourceQueryThreshold\\\" : 2000,\\n\" +\n  \"        \\\"sources\\\" :\\n\" +\n  \"        [\\n\" +\n  \"                {\\\"id\\\" : 11, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName11\\\",\\n\" +\n  \"                 \\\"uri\\\": \\\"member2.member_profile\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\",\\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 12, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName12\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\",\\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 12, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName12\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\"\\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 2, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName2\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 2 \\n\" +\n  \"                }\\n\" +\n  \"        ]\\n\" +\n  \"}\"", "var_name": "_configSource2"}, {"original_string": "static final String _configSource3 = \"{\\n\" +\n  \"    \\\"name\\\" : \\\"multBufferTest3\\\",\\n\" +\n  \"    \\\"id\\\" : 102,\\n\" +\n  \"    \\\"uri\\\" : \\\"uri3\\\",\\n\" +\n  \"        \\\"slowSourceQueryThreshold\\\" : 2000,\\n\" +\n  \"        \\\"sources\\\" :\\n\" +\n  \"        [\\n\" +\n  \"                {\\\"id\\\" : 21, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName21\\\",\\n\" +\n  \"                 \\\"uri\\\": \\\"member2.member_profile\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 22, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName22\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 23, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName23\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                }\\n\" +\n  \"        ]\\n\" +\n  \"}\";", "modifier": "static final", "type": "String", "declarator": "_configSource3 = \"{\\n\" +\n  \"    \\\"name\\\" : \\\"multBufferTest3\\\",\\n\" +\n  \"    \\\"id\\\" : 102,\\n\" +\n  \"    \\\"uri\\\" : \\\"uri3\\\",\\n\" +\n  \"        \\\"slowSourceQueryThreshold\\\" : 2000,\\n\" +\n  \"        \\\"sources\\\" :\\n\" +\n  \"        [\\n\" +\n  \"                {\\\"id\\\" : 21, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName21\\\",\\n\" +\n  \"                 \\\"uri\\\": \\\"member2.member_profile\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 22, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName22\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                },\\n\" +\n  \"                {\\\"id\\\" : 23, \\n\" +\n  \"                 \\\"name\\\" : \\\"srcName23\\\",\\n\" +\n  \"                 \\\"uri\\\" : \\\"member2.member_account\\\", \\n\" +\n  \"                 \\\"partitionFunction\\\" : \\\"constant:1\\\", \\n\" +\n  \"                 \\\"partition\\\" : 0 \\n\" +\n  \"                }\\n\" +\n  \"        ]\\n\" +\n  \"}\"", "var_name": "_configSource3"}], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/TestDbusEventBufferMult.java"}, "test_case": {"identifier": "testConstructFilters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConstructFilters() throws Exception\n  {\n    TestSetup t = new TestSetup();\n\n    //test single Physical Partition subscription\n    DatabusSubscription sub1 =\n        DatabusSubscription.createPhysicalPartitionReplicationSubscription(new PhysicalPartition(100, \"multBufferTest1\"));\n\n    DbusFilter filter1 = t._eventBuffer.constructFilters(Arrays.asList(sub1));\n    assertNotNull(filter1);\n    assertTrue(filter1 instanceof PhysicalPartitionDbusFilter);\n    PhysicalPartitionDbusFilter ppfilter1 = (PhysicalPartitionDbusFilter)filter1;\n    assertEquals(ppfilter1.getPhysicalPartition(), new PhysicalPartition(100, \"multBufferTest1\"));\n    assertNull(ppfilter1.getNestedFilter());\n\n    DatabusSubscription sub2 =\n        DatabusSubscription.createPhysicalPartitionReplicationSubscription(new PhysicalPartition(101, \"multBufferTest2\"));\n\n    //test two Physical Partition subscriptions\n    DbusFilter filter2 = t._eventBuffer.constructFilters(Arrays.asList(sub1, sub2));\n    assertNotNull(filter2);\n    assertTrue(filter2 instanceof ConjunctionDbusFilter);\n    ConjunctionDbusFilter conjFilter2 = (ConjunctionDbusFilter)filter2;\n    boolean hasPP100 = false;\n    boolean hasPP101 = false;\n    assertEquals(conjFilter2.getFilterList().size(), 2);\n    for (DbusFilter f: conjFilter2.getFilterList())\n    {\n      assertTrue(f instanceof PhysicalPartitionDbusFilter);\n      PhysicalPartitionDbusFilter ppf = (PhysicalPartitionDbusFilter)f;\n      if (ppf.getPhysicalPartition().getId() == 100) hasPP100 = true;\n      else if (ppf.getPhysicalPartition().getId() == 101) hasPP101 = true;\n      else fail(\"unknown physical partition filter:\" + ppf.getPhysicalPartition());\n    }\n    assertTrue(hasPP100);\n    assertTrue(hasPP101);\n\n    //test a subcription with a logical source\n    DatabusSubscription sub3 =\n        DatabusSubscription.createSimpleSourceSubscription(new LogicalSource(2, \"srcName2\"));\n\n    DbusFilter filter3 = t._eventBuffer.constructFilters(Arrays.asList(sub3));\n    assertNotNull(filter3);\n    assertTrue(filter3 instanceof PhysicalPartitionDbusFilter);\n    PhysicalPartitionDbusFilter ppfilter3 = (PhysicalPartitionDbusFilter)filter3;\n    assertEquals(ppfilter3.getPhysicalPartition(), PhysicalPartition.ANY_PHYSICAL_PARTITION);\n    DbusFilter ppfilter3_child = ppfilter3.getNestedFilter();\n    assertNotNull(ppfilter3_child);\n    assertTrue(ppfilter3_child instanceof LogicalSourceAndPartitionDbusFilter);\n    LogicalSourceAndPartitionDbusFilter lsourceFilter3 = (LogicalSourceAndPartitionDbusFilter)ppfilter3_child;\n    LogicalSourceAndPartitionDbusFilter.LogicalPartitionDbusFilter lpartFilter3_1 =\n        lsourceFilter3.getSourceFilter(2);\n    assertNotNull(lpartFilter3_1);\n    assertTrue(lpartFilter3_1.isAllPartitionsWildcard());\n\n    //test a subcription with a physical and logical partition\n    DatabusSubscription sub4 =\n        new DatabusSubscription(PhysicalSource.MASTER_PHISYCAL_SOURCE,\n                                new PhysicalPartition(101, \"multBufferTest2\"),\n                                new LogicalSourceId(new LogicalSource(2, \"srcName2\"), (short)2)\n                                );\n\n    DbusFilter filter4 = t._eventBuffer.constructFilters(Arrays.asList(sub4));\n    assertNotNull(filter4);\n    assertTrue(filter4 instanceof PhysicalPartitionDbusFilter);\n    PhysicalPartitionDbusFilter ppfilter4 = (PhysicalPartitionDbusFilter)filter4;\n    assertEquals(ppfilter4.getPhysicalPartition(), new PhysicalPartition(101, \"multBufferTest2\"));\n    DbusFilter ppfilter4_child = ppfilter4.getNestedFilter();\n    assertNotNull(ppfilter4_child);\n    assertTrue(ppfilter4_child instanceof LogicalSourceAndPartitionDbusFilter);\n    LogicalSourceAndPartitionDbusFilter lsourceFilter4 = (LogicalSourceAndPartitionDbusFilter)ppfilter4_child;\n    LogicalSourceAndPartitionDbusFilter.LogicalPartitionDbusFilter lpartFilter4_1 =\n        lsourceFilter4.getSourceFilter(2);\n    assertNotNull(lpartFilter4_1);\n    assertTrue(lpartFilter4_1.getPartitionsMask().contains(2));\n  }", "signature": "void testConstructFilters()", "full_signature": "@Test public void testConstructFilters()", "class_method_signature": "TestDbusEventBufferMult.testConstructFilters()", "testcase": true, "constructor": false, "invocations": ["createPhysicalPartitionReplicationSubscription", "constructFilters", "asList", "assertNotNull", "assertTrue", "assertEquals", "getPhysicalPartition", "assertNull", "getNestedFilter", "createPhysicalPartitionReplicationSubscription", "constructFilters", "asList", "assertNotNull", "assertTrue", "assertEquals", "size", "getFilterList", "getFilterList", "assertTrue", "getId", "getPhysicalPartition", "getId", "getPhysicalPartition", "fail", "getPhysicalPartition", "assertTrue", "assertTrue", "createSimpleSourceSubscription", "constructFilters", "asList", "assertNotNull", "assertTrue", "assertEquals", "getPhysicalPartition", "getNestedFilter", "assertNotNull", "assertTrue", "getSourceFilter", "assertNotNull", "assertTrue", "isAllPartitionsWildcard", "constructFilters", "asList", "assertNotNull", "assertTrue", "assertEquals", "getPhysicalPartition", "getNestedFilter", "assertNotNull", "assertTrue", "getSourceFilter", "assertNotNull", "assertTrue", "contains", "getPartitionsMask"]}, "focal_class": {"identifier": "DbusEventBufferMult", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODULE = DbusEventBufferMult.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = DbusEventBufferMult.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "public static final String PERF_MODULE = MODULE + \"Perf\";", "modifier": "public static final", "type": "String", "declarator": "PERF_MODULE = MODULE + \"Perf\"", "var_name": "PERF_MODULE"}, {"original_string": "public static final Logger PERF_LOG = Logger.getLogger(PERF_MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "PERF_LOG = Logger.getLogger(PERF_MODULE)", "var_name": "PERF_LOG"}, {"original_string": "final private Set<DbusEventBuffer> _uniqBufs = new HashSet<DbusEventBuffer>();", "modifier": "final private", "type": "Set<DbusEventBuffer>", "declarator": "_uniqBufs = new HashSet<DbusEventBuffer>()", "var_name": "_uniqBufs"}, {"original_string": "final private TreeMap<PhysicalPartitionKey, DbusEventBuffer> _bufsMap =\n    new TreeMap<PhysicalPartitionKey, DbusEventBuffer>();", "modifier": "final private", "type": "TreeMap<PhysicalPartitionKey, DbusEventBuffer>", "declarator": "_bufsMap =\n    new TreeMap<PhysicalPartitionKey, DbusEventBuffer>()", "var_name": "_bufsMap"}, {"original_string": "final private Map<PhysicalPartitionKey, Set<PhysicalSource>> _partKey2PhysiscalSources =\n      new HashMap<PhysicalPartitionKey, Set<PhysicalSource>>();", "modifier": "final private", "type": "Map<PhysicalPartitionKey, Set<PhysicalSource>>", "declarator": "_partKey2PhysiscalSources =\n      new HashMap<PhysicalPartitionKey, Set<PhysicalSource>>()", "var_name": "_partKey2PhysiscalSources"}, {"original_string": "final private Map<LogicalPartitionKey, PhysicalPartitionKey> _logicalPKey2PhysicalPKey =\n    new HashMap<LogicalPartitionKey, PhysicalPartitionKey>();", "modifier": "final private", "type": "Map<LogicalPartitionKey, PhysicalPartitionKey>", "declarator": "_logicalPKey2PhysicalPKey =\n    new HashMap<LogicalPartitionKey, PhysicalPartitionKey>()", "var_name": "_logicalPKey2PhysicalPKey"}, {"original_string": "final private Map<Integer, LogicalSource> _logicalId2LogicalSource =\n    new HashMap<Integer, LogicalSource>();", "modifier": "final private", "type": "Map<Integer, LogicalSource>", "declarator": "_logicalId2LogicalSource =\n    new HashMap<Integer, LogicalSource>()", "var_name": "_logicalId2LogicalSource"}, {"original_string": "private File _mmapDirectory = null;", "modifier": "private", "type": "File", "declarator": "_mmapDirectory = null", "var_name": "_mmapDirectory"}, {"original_string": "private DbusEventFactory _eventFactory;", "modifier": "private", "type": "DbusEventFactory", "declarator": "_eventFactory", "var_name": "_eventFactory"}, {"original_string": "boolean _dropOldEvents = false;", "modifier": "", "type": "boolean", "declarator": "_dropOldEvents = false", "var_name": "_dropOldEvents"}, {"original_string": "private final double _nanoSecsInMSec = 1000000.0;", "modifier": "private final", "type": "double", "declarator": "_nanoSecsInMSec = 1000000.0", "var_name": "_nanoSecsInMSec"}, {"original_string": "public static final String BAK_DIRNAME_SUFFIX = \".BAK\";", "modifier": "public static final", "type": "String", "declarator": "BAK_DIRNAME_SUFFIX = \".BAK\"", "var_name": "BAK_DIRNAME_SUFFIX"}], "methods": [{"identifier": "DbusEventBufferMult", "parameters": "()", "modifiers": "public", "return": "", "signature": " DbusEventBufferMult()", "full_signature": "public  DbusEventBufferMult()", "class_method_signature": "DbusEventBufferMult.DbusEventBufferMult()", "testcase": false, "constructor": true}, {"identifier": "DbusEventBufferMult", "parameters": "(PhysicalSourceStaticConfig [] pConfigs,\n                             DbusEventBuffer.StaticConfig config,\n                             DbusEventFactory eventFactory)", "modifiers": "public", "return": "", "signature": " DbusEventBufferMult(PhysicalSourceStaticConfig [] pConfigs,\n                             DbusEventBuffer.StaticConfig config,\n                             DbusEventFactory eventFactory)", "full_signature": "public  DbusEventBufferMult(PhysicalSourceStaticConfig [] pConfigs,\n                             DbusEventBuffer.StaticConfig config,\n                             DbusEventFactory eventFactory)", "class_method_signature": "DbusEventBufferMult.DbusEventBufferMult(PhysicalSourceStaticConfig [] pConfigs,\n                             DbusEventBuffer.StaticConfig config,\n                             DbusEventFactory eventFactory)", "testcase": false, "constructor": true}, {"identifier": "getOneBuffer", "parameters": "(LogicalSource lSource,\n                                       LogicalPartition lPartition)", "modifiers": "public", "return": "DbusEventBuffer", "signature": "DbusEventBuffer getOneBuffer(LogicalSource lSource,\n                                       LogicalPartition lPartition)", "full_signature": "public DbusEventBuffer getOneBuffer(LogicalSource lSource,\n                                       LogicalPartition lPartition)", "class_method_signature": "DbusEventBufferMult.getOneBuffer(LogicalSource lSource,\n                                       LogicalPartition lPartition)", "testcase": false, "constructor": false}, {"identifier": "getOneBuffer", "parameters": "( PhysicalPartition pPartition)", "modifiers": "public", "return": "DbusEventBuffer", "signature": "DbusEventBuffer getOneBuffer( PhysicalPartition pPartition)", "full_signature": "public DbusEventBuffer getOneBuffer( PhysicalPartition pPartition)", "class_method_signature": "DbusEventBufferMult.getOneBuffer( PhysicalPartition pPartition)", "testcase": false, "constructor": false}, {"identifier": "resetBuffer", "parameters": "(PhysicalPartition pPartition, long prevScn)", "modifiers": "public", "return": "void", "signature": "void resetBuffer(PhysicalPartition pPartition, long prevScn)", "full_signature": "public void resetBuffer(PhysicalPartition pPartition, long prevScn)", "class_method_signature": "DbusEventBufferMult.resetBuffer(PhysicalPartition pPartition, long prevScn)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBufferAppendable", "parameters": "(PhysicalPartition pPartition)", "modifiers": "public", "return": "DbusEventBufferAppendable", "signature": "DbusEventBufferAppendable getDbusEventBufferAppendable(PhysicalPartition pPartition)", "full_signature": "public DbusEventBufferAppendable getDbusEventBufferAppendable(PhysicalPartition pPartition)", "class_method_signature": "DbusEventBufferMult.getDbusEventBufferAppendable(PhysicalPartition pPartition)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBufferAppendable", "parameters": "(int lSrcId)", "modifiers": "public", "return": "DbusEventBufferAppendable", "signature": "DbusEventBufferAppendable getDbusEventBufferAppendable(int lSrcId)", "full_signature": "public DbusEventBufferAppendable getDbusEventBufferAppendable(int lSrcId)", "class_method_signature": "DbusEventBufferMult.getDbusEventBufferAppendable(int lSrcId)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBufferAppendable", "parameters": "(LogicalSource lSource)", "modifiers": "public", "return": "DbusEventBufferAppendable", "signature": "DbusEventBufferAppendable getDbusEventBufferAppendable(LogicalSource lSource)", "full_signature": "public DbusEventBufferAppendable getDbusEventBufferAppendable(LogicalSource lSource)", "class_method_signature": "DbusEventBufferMult.getDbusEventBufferAppendable(LogicalSource lSource)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBufferAppendable", "parameters": "(LogicalSource lSource,\n                                                                LogicalPartition lPartition)", "modifiers": "public", "return": "DbusEventBufferAppendable", "signature": "DbusEventBufferAppendable getDbusEventBufferAppendable(LogicalSource lSource,\n                                                                LogicalPartition lPartition)", "full_signature": "public DbusEventBufferAppendable getDbusEventBufferAppendable(LogicalSource lSource,\n                                                                LogicalPartition lPartition)", "class_method_signature": "DbusEventBufferMult.getDbusEventBufferAppendable(LogicalSource lSource,\n                                                                LogicalPartition lPartition)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBuffer", "parameters": "(LogicalSource lSource)", "modifiers": "public", "return": "DbusEventBuffer", "signature": "DbusEventBuffer getDbusEventBuffer(LogicalSource lSource)", "full_signature": "public DbusEventBuffer getDbusEventBuffer(LogicalSource lSource)", "class_method_signature": "DbusEventBufferMult.getDbusEventBuffer(LogicalSource lSource)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBufferBatchReadable", "parameters": "(CheckpointMult cpMult,\n            Set<PhysicalPartitionKey> ppartKeys, StatsCollectors<DbusEventsStatisticsCollector> statsCollectors)", "modifiers": "public", "return": "DbusEventBufferBatchReadable", "signature": "DbusEventBufferBatchReadable getDbusEventBufferBatchReadable(CheckpointMult cpMult,\n            Set<PhysicalPartitionKey> ppartKeys, StatsCollectors<DbusEventsStatisticsCollector> statsCollectors)", "full_signature": "public DbusEventBufferBatchReadable getDbusEventBufferBatchReadable(CheckpointMult cpMult,\n            Set<PhysicalPartitionKey> ppartKeys, StatsCollectors<DbusEventsStatisticsCollector> statsCollectors)", "class_method_signature": "DbusEventBufferMult.getDbusEventBufferBatchReadable(CheckpointMult cpMult,\n            Set<PhysicalPartitionKey> ppartKeys, StatsCollectors<DbusEventsStatisticsCollector> statsCollectors)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBufferBatchReadable", "parameters": "(Collection<Integer> ids,\n\t\t  CheckpointMult cpMult, StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "modifiers": "public", "return": "DbusEventBufferBatchReadable", "signature": "DbusEventBufferBatchReadable getDbusEventBufferBatchReadable(Collection<Integer> ids,\n\t\t  CheckpointMult cpMult, StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "full_signature": "public DbusEventBufferBatchReadable getDbusEventBufferBatchReadable(Collection<Integer> ids,\n\t\t  CheckpointMult cpMult, StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "class_method_signature": "DbusEventBufferMult.getDbusEventBufferBatchReadable(Collection<Integer> ids,\n\t\t  CheckpointMult cpMult, StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "testcase": false, "constructor": false}, {"identifier": "getDbusEventBufferBatchReadable", "parameters": "(\n         CheckpointMult cpMult,\n         Collection<PhysicalPartitionKey> physicalPartitions,\n         StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "modifiers": "public", "return": "DbusEventBufferBatchReadable", "signature": "DbusEventBufferBatchReadable getDbusEventBufferBatchReadable(\n         CheckpointMult cpMult,\n         Collection<PhysicalPartitionKey> physicalPartitions,\n         StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "full_signature": "public DbusEventBufferBatchReadable getDbusEventBufferBatchReadable(\n         CheckpointMult cpMult,\n         Collection<PhysicalPartitionKey> physicalPartitions,\n         StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "class_method_signature": "DbusEventBufferMult.getDbusEventBufferBatchReadable(\n         CheckpointMult cpMult,\n         Collection<PhysicalPartitionKey> physicalPartitions,\n         StatsCollectors<DbusEventsStatisticsCollector> statsCollector)", "testcase": false, "constructor": false}, {"identifier": "getPhysicalPartition", "parameters": "(int srcId )", "modifiers": "public", "return": "PhysicalPartition", "signature": "PhysicalPartition getPhysicalPartition(int srcId )", "full_signature": "public PhysicalPartition getPhysicalPartition(int srcId )", "class_method_signature": "DbusEventBufferMult.getPhysicalPartition(int srcId )", "testcase": false, "constructor": false}, {"identifier": "getPhysicalPartition", "parameters": "(int srcId, LogicalPartition lPartition )", "modifiers": "public", "return": "PhysicalPartition", "signature": "PhysicalPartition getPhysicalPartition(int srcId, LogicalPartition lPartition )", "full_signature": "public PhysicalPartition getPhysicalPartition(int srcId, LogicalPartition lPartition )", "class_method_signature": "DbusEventBufferMult.getPhysicalPartition(int srcId, LogicalPartition lPartition )", "testcase": false, "constructor": false}, {"identifier": "bufIterable", "parameters": "()", "modifiers": "public", "return": "Iterable<DbusEventBuffer>", "signature": "Iterable<DbusEventBuffer> bufIterable()", "full_signature": "public Iterable<DbusEventBuffer> bufIterable()", "class_method_signature": "DbusEventBufferMult.bufIterable()", "testcase": false, "constructor": false}, {"identifier": "addNewBuffer", "parameters": "(PhysicalSourceStaticConfig pConfig,\n                                                   DbusEventBuffer.StaticConfig config)", "modifiers": "public synchronized", "return": "DbusEventBuffer", "signature": "DbusEventBuffer addNewBuffer(PhysicalSourceStaticConfig pConfig,\n                                                   DbusEventBuffer.StaticConfig config)", "full_signature": "public synchronized DbusEventBuffer addNewBuffer(PhysicalSourceStaticConfig pConfig,\n                                                   DbusEventBuffer.StaticConfig config)", "class_method_signature": "DbusEventBufferMult.addNewBuffer(PhysicalSourceStaticConfig pConfig,\n                                                   DbusEventBuffer.StaticConfig config)", "testcase": false, "constructor": false}, {"identifier": "removeBuffer", "parameters": "(PhysicalPartitionKey pKey, PhysicalSource pSource)", "modifiers": "public synchronized", "return": "void", "signature": "void removeBuffer(PhysicalPartitionKey pKey, PhysicalSource pSource)", "full_signature": "public synchronized void removeBuffer(PhysicalPartitionKey pKey, PhysicalSource pSource)", "class_method_signature": "DbusEventBufferMult.removeBuffer(PhysicalPartitionKey pKey, PhysicalSource pSource)", "testcase": false, "constructor": false}, {"identifier": "removeBuffer", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "public synchronized", "return": "void", "signature": "void removeBuffer(PhysicalSourceStaticConfig pConfig)", "full_signature": "public synchronized void removeBuffer(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DbusEventBufferMult.removeBuffer(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "deallocateRemovedBuffers", "parameters": "(boolean now)", "modifiers": "public synchronized", "return": "void", "signature": "void deallocateRemovedBuffers(boolean now)", "full_signature": "public synchronized void deallocateRemovedBuffers(boolean now)", "class_method_signature": "DbusEventBufferMult.deallocateRemovedBuffers(boolean now)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void close()", "full_signature": "public synchronized void close()", "class_method_signature": "DbusEventBufferMult.close()", "testcase": false, "constructor": false}, {"identifier": "moveUnusedSessionDirs", "parameters": "(File bakDir)", "modifiers": "private", "return": "void", "signature": "void moveUnusedSessionDirs(File bakDir)", "full_signature": "private void moveUnusedSessionDirs(File bakDir)", "class_method_signature": "DbusEventBufferMult.moveUnusedSessionDirs(File bakDir)", "testcase": false, "constructor": false}, {"identifier": "moveFile", "parameters": "(File element, File bakDir)", "modifiers": "private", "return": "boolean", "signature": "boolean moveFile(File element, File bakDir)", "full_signature": "private boolean moveFile(File element, File bakDir)", "class_method_signature": "DbusEventBufferMult.moveFile(File element, File bakDir)", "testcase": false, "constructor": false}, {"identifier": "removeAuxMapping", "parameters": "(PhysicalPartitionKey key)", "modifiers": "private", "return": "void", "signature": "void removeAuxMapping(PhysicalPartitionKey key)", "full_signature": "private void removeAuxMapping(PhysicalPartitionKey key)", "class_method_signature": "DbusEventBufferMult.removeAuxMapping(PhysicalPartitionKey key)", "testcase": false, "constructor": false}, {"identifier": "assertBuffers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void assertBuffers()", "full_signature": "public void assertBuffers()", "class_method_signature": "DbusEventBufferMult.assertBuffers()", "testcase": false, "constructor": false}, {"identifier": "addBuffer", "parameters": "(PhysicalSourceStaticConfig pConfig, DbusEventBuffer buf)", "modifiers": "public synchronized", "return": "void", "signature": "void addBuffer(PhysicalSourceStaticConfig pConfig, DbusEventBuffer buf)", "full_signature": "public synchronized void addBuffer(PhysicalSourceStaticConfig pConfig, DbusEventBuffer buf)", "class_method_signature": "DbusEventBufferMult.addBuffer(PhysicalSourceStaticConfig pConfig, DbusEventBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "getPhysicalSourcesForPartition", "parameters": "(PhysicalPartition pPart)", "modifiers": "public", "return": "Set<PhysicalSource>", "signature": "Set<PhysicalSource> getPhysicalSourcesForPartition(PhysicalPartition pPart)", "full_signature": "public Set<PhysicalSource> getPhysicalSourcesForPartition(PhysicalPartition pPart)", "class_method_signature": "DbusEventBufferMult.getPhysicalSourcesForPartition(PhysicalPartition pPart)", "testcase": false, "constructor": false}, {"identifier": "constructFilters", "parameters": "(Collection<DatabusSubscription> subs)", "modifiers": "public", "return": "DbusFilter", "signature": "DbusFilter constructFilters(Collection<DatabusSubscription> subs)", "full_signature": "public DbusFilter constructFilters(Collection<DatabusSubscription> subs)", "class_method_signature": "DbusEventBufferMult.constructFilters(Collection<DatabusSubscription> subs)", "testcase": false, "constructor": false}, {"identifier": "getAllPhysicalPartitionKeys", "parameters": "()", "modifiers": "public", "return": "NavigableSet<PhysicalPartitionKey>", "signature": "NavigableSet<PhysicalPartitionKey> getAllPhysicalPartitionKeys()", "full_signature": "public NavigableSet<PhysicalPartitionKey> getAllPhysicalPartitionKeys()", "class_method_signature": "DbusEventBufferMult.getAllPhysicalPartitionKeys()", "testcase": false, "constructor": false}, {"identifier": "updateLogicalSourceMapping", "parameters": "(PhysicalPartitionKey pKey,\n                                           LogicalSource lSource, LogicalPartition lPartition)", "modifiers": "private", "return": "void", "signature": "void updateLogicalSourceMapping(PhysicalPartitionKey pKey,\n                                           LogicalSource lSource, LogicalPartition lPartition)", "full_signature": "private void updateLogicalSourceMapping(PhysicalPartitionKey pKey,\n                                           LogicalSource lSource, LogicalPartition lPartition)", "class_method_signature": "DbusEventBufferMult.updateLogicalSourceMapping(PhysicalPartitionKey pKey,\n                                           LogicalSource lSource, LogicalPartition lPartition)", "testcase": false, "constructor": false}, {"identifier": "setDropOldEvents", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setDropOldEvents(boolean val)", "full_signature": "public void setDropOldEvents(boolean val)", "class_method_signature": "DbusEventBufferMult.setDropOldEvents(boolean val)", "testcase": false, "constructor": false}, {"identifier": "bufsNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int bufsNum()", "full_signature": "public int bufsNum()", "class_method_signature": "DbusEventBufferMult.bufsNum()", "testcase": false, "constructor": false}, {"identifier": "startAllEvents", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startAllEvents()", "full_signature": "public void startAllEvents()", "class_method_signature": "DbusEventBufferMult.startAllEvents()", "testcase": false, "constructor": false}, {"identifier": "endAllEvents", "parameters": "(long seq, long nTime, DbusEventsStatisticsCollector stats)", "modifiers": "public", "return": "void", "signature": "void endAllEvents(long seq, long nTime, DbusEventsStatisticsCollector stats)", "full_signature": "public void endAllEvents(long seq, long nTime, DbusEventsStatisticsCollector stats)", "class_method_signature": "DbusEventBufferMult.endAllEvents(long seq, long nTime, DbusEventsStatisticsCollector stats)", "testcase": false, "constructor": false}, {"identifier": "clearAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearAll()", "full_signature": "public void clearAll()", "class_method_signature": "DbusEventBufferMult.clearAll()", "testcase": false, "constructor": false}, {"identifier": "saveBufferMetaInfo", "parameters": "(boolean infoOnly)", "modifiers": "public synchronized", "return": "void", "signature": "void saveBufferMetaInfo(boolean infoOnly)", "full_signature": "public synchronized void saveBufferMetaInfo(boolean infoOnly)", "class_method_signature": "DbusEventBufferMult.saveBufferMetaInfo(boolean infoOnly)", "testcase": false, "constructor": false}, {"identifier": "validateRelayBuffers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void validateRelayBuffers()", "full_signature": "public void validateRelayBuffers()", "class_method_signature": "DbusEventBufferMult.validateRelayBuffers()", "testcase": false, "constructor": false}, {"identifier": "rollbackAllBuffers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rollbackAllBuffers()", "full_signature": "public void rollbackAllBuffers()", "class_method_signature": "DbusEventBufferMult.rollbackAllBuffers()", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/DbusEventBufferMult.java"}, "focal_method": {"identifier": "constructFilters", "parameters": "(Collection<DatabusSubscription> subs)", "modifiers": "public", "return": "DbusFilter", "body": "public DbusFilter constructFilters(Collection<DatabusSubscription> subs) throws DatabusException\n  {\n    HashMap<PhysicalPartition, PhysicalPartitionDbusFilter> filterMap = null;\n    for (DatabusSubscription sub: subs)\n    {\n      PhysicalPartition ppart = sub.getPhysicalPartition();\n      if (sub.getLogicalSource().isWildcard())\n      {\n        if (!ppart.isWildcard())\n        {\n          if (null == filterMap) filterMap = new HashMap<PhysicalPartition, PhysicalPartitionDbusFilter>(10);\n          filterMap.put(ppart, new PhysicalPartitionDbusFilter(ppart, null));\n        }\n        else\n        {\n          LOG.warn(\"ignoring subscription with both physical partition and logical source wildcards\");\n        }\n      }\n      else\n      {\n        PhysicalPartitionDbusFilter ppartFilter = null != filterMap ? filterMap.get(ppart) : null;\n        LogicalSourceAndPartitionDbusFilter logFilter = null;\n        if (null == ppartFilter)\n        {\n          logFilter = new LogicalSourceAndPartitionDbusFilter();\n          ppartFilter = new PhysicalPartitionDbusFilter(ppart, logFilter);\n          if (null == filterMap) filterMap = new HashMap<PhysicalPartition, PhysicalPartitionDbusFilter>(10);\n          filterMap.put(ppart, ppartFilter);\n        }\n        else\n        {\n          logFilter = (LogicalSourceAndPartitionDbusFilter)ppartFilter.getNestedFilter();\n        }\n\n        if (null != logFilter) logFilter.addSourceCondition(sub.getLogicalPartition());\n        else LOG.error(\"unexpected null filter for logical source\");\n      }\n    }\n\n    if (0 == filterMap.size()) return AllowAllDbusFilter.THE_INSTANCE;\n    else if (1 == filterMap.size())\n    {\n      DbusFilter result = filterMap.entrySet().iterator().next().getValue();\n      return result;\n    }\n    else {\n      ConjunctionDbusFilter result = new ConjunctionDbusFilter();\n      for (Map.Entry<PhysicalPartition, PhysicalPartitionDbusFilter> filterEntry: filterMap.entrySet())\n      {\n        result.addFilter(filterEntry.getValue());\n      }\n      return result;\n    }\n  }", "signature": "DbusFilter constructFilters(Collection<DatabusSubscription> subs)", "full_signature": "public DbusFilter constructFilters(Collection<DatabusSubscription> subs)", "class_method_signature": "DbusEventBufferMult.constructFilters(Collection<DatabusSubscription> subs)", "testcase": false, "constructor": false, "invocations": ["getPhysicalPartition", "isWildcard", "getLogicalSource", "isWildcard", "put", "warn", "get", "put", "getNestedFilter", "addSourceCondition", "getLogicalPartition", "error", "size", "size", "getValue", "next", "iterator", "entrySet", "entrySet", "addFilter", "getValue"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}