{"test_class": {"identifier": "NormalizedKeySorterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long SEED = 649180756312423613L;", "modifier": "private static final", "type": "long", "declarator": "SEED = 649180756312423613L", "var_name": "SEED"}, {"original_string": "private static final long SEED2 = 97652436586326573L;", "modifier": "private static final", "type": "long", "declarator": "SEED2 = 97652436586326573L", "var_name": "SEED2"}, {"original_string": "private static final int KEY_MAX = Integer.MAX_VALUE;", "modifier": "private static final", "type": "int", "declarator": "KEY_MAX = Integer.MAX_VALUE", "var_name": "KEY_MAX"}, {"original_string": "private static final int VALUE_LENGTH = 118;", "modifier": "private static final", "type": "int", "declarator": "VALUE_LENGTH = 118", "var_name": "VALUE_LENGTH"}, {"original_string": "private static final int MEMORY_SIZE = 1024 * 1024 * 64;", "modifier": "private static final", "type": "int", "declarator": "MEMORY_SIZE = 1024 * 1024 * 64", "var_name": "MEMORY_SIZE"}, {"original_string": "private static final int MEMORY_PAGE_SIZE = 32 * 1024;", "modifier": "private static final", "type": "int", "declarator": "MEMORY_PAGE_SIZE = 32 * 1024", "var_name": "MEMORY_PAGE_SIZE"}, {"original_string": "private MemoryManager memoryManager;", "modifier": "private", "type": "MemoryManager", "declarator": "memoryManager", "var_name": "memoryManager"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/sort/NormalizedKeySorterTest.java"}, "test_case": {"identifier": "testReset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReset() throws Exception {\n\t\tfinal int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE;\n\t\tfinal List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments);\n\t\t\n\t\tNormalizedKeySorter<Tuple2<Integer, String>> sorter = newSortBuffer(memory);\n\t\tTestData.TupleGenerator generator = new TestData.TupleGenerator(SEED, KEY_MAX, VALUE_LENGTH, KeyMode.RANDOM, ValueMode.FIX_LENGTH);\n\t\t\n\t\t// write the buffer full with the first set of records\n\t\tTuple2<Integer, String> record = new Tuple2<>();\n\t\tint num = -1;\n\t\tdo {\n\t\t\tgenerator.next(record);\n\t\t\tnum++;\n\t\t}\n\t\twhile (sorter.write(record));\n\t\t\n\t\tsorter.reset();\n\t\t\n\t\t// write a second sequence of records. since the values are of fixed length, we must be able to write an equal number\n\t\tgenerator = new TestData.TupleGenerator(SEED2, KEY_MAX, VALUE_LENGTH, KeyMode.RANDOM, ValueMode.FIX_LENGTH);\n\t\t\n\t\t// write the buffer full with the first set of records\n\t\tint num2 = -1;\n\t\tdo {\n\t\t\tgenerator.next(record);\n\t\t\tnum2++;\n\t\t}\n\t\twhile (sorter.write(record));\n\t\t\n\t\tAssert.assertEquals(\"The number of records written after the reset was not the same as before.\", num, num2);\n\t\t\n\t\t// re-read the records\n\t\tgenerator.reset();\n\t\tTuple2<Integer, String> readTarget = new Tuple2<>();\n\t\t\n\t\tint i = 0;\n\t\twhile (i < num) {\n\t\t\tgenerator.next(record);\n\t\t\treadTarget = sorter.getRecord(readTarget, i++);\n\t\t\t\n\t\t\tint rk = readTarget.f0;\n\t\t\tint gk = record.f0;\n\t\t\t\n\t\t\tString rv = readTarget.f1;\n\t\t\tString gv = record.f1;\n\t\t\t\n\t\t\tAssert.assertEquals(\"The re-read key is wrong\", gk, rk);\n\t\t\tAssert.assertEquals(\"The re-read value is wrong\", gv, rv);\n\t\t}\n\t\t\n\t\t// release the memory occupied by the buffers\n\t\tsorter.dispose();\n\t\tthis.memoryManager.release(memory);\n\t}", "signature": "void testReset()", "full_signature": "@Test public void testReset()", "class_method_signature": "NormalizedKeySorterTest.testReset()", "testcase": true, "constructor": false, "invocations": ["allocatePages", "newSortBuffer", "next", "write", "reset", "next", "write", "assertEquals", "reset", "next", "getRecord", "assertEquals", "assertEquals", "dispose", "release"]}, "focal_class": {"identifier": "NormalizedKeySorter", "superclass": "", "interfaces": "implements InMemorySorter<T>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NormalizedKeySorter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NormalizedKeySorter.class)", "var_name": "LOG"}, {"original_string": "private static final int OFFSET_LEN = 8;", "modifier": "private static final", "type": "int", "declarator": "OFFSET_LEN = 8", "var_name": "OFFSET_LEN"}, {"original_string": "private static final int DEFAULT_MAX_NORMALIZED_KEY_LEN = 16;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_NORMALIZED_KEY_LEN = 16", "var_name": "DEFAULT_MAX_NORMALIZED_KEY_LEN"}, {"original_string": "private static final int MAX_NORMALIZED_KEY_LEN_PER_ELEMENT = 8;", "modifier": "private static final", "type": "int", "declarator": "MAX_NORMALIZED_KEY_LEN_PER_ELEMENT = 8", "var_name": "MAX_NORMALIZED_KEY_LEN_PER_ELEMENT"}, {"original_string": "private static final int MIN_REQUIRED_BUFFERS = 3;", "modifier": "private static final", "type": "int", "declarator": "MIN_REQUIRED_BUFFERS = 3", "var_name": "MIN_REQUIRED_BUFFERS"}, {"original_string": "private static final int LARGE_RECORD_THRESHOLD = 10 * 1024 * 1024;", "modifier": "private static final", "type": "int", "declarator": "LARGE_RECORD_THRESHOLD = 10 * 1024 * 1024", "var_name": "LARGE_RECORD_THRESHOLD"}, {"original_string": "private static final long LARGE_RECORD_TAG = 1L << 63;", "modifier": "private static final", "type": "long", "declarator": "LARGE_RECORD_TAG = 1L << 63", "var_name": "LARGE_RECORD_TAG"}, {"original_string": "private static final long POINTER_MASK = LARGE_RECORD_TAG - 1;", "modifier": "private static final", "type": "long", "declarator": "POINTER_MASK = LARGE_RECORD_TAG - 1", "var_name": "POINTER_MASK"}, {"original_string": "private final byte[] swapBuffer;", "modifier": "private final", "type": "byte[]", "declarator": "swapBuffer", "var_name": "swapBuffer"}, {"original_string": "private final TypeSerializer<T> serializer;", "modifier": "private final", "type": "TypeSerializer<T>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private final TypeComparator<T> comparator;", "modifier": "private final", "type": "TypeComparator<T>", "declarator": "comparator", "var_name": "comparator"}, {"original_string": "private final SimpleCollectingOutputView recordCollector;", "modifier": "private final", "type": "SimpleCollectingOutputView", "declarator": "recordCollector", "var_name": "recordCollector"}, {"original_string": "private final RandomAccessInputView recordBuffer;", "modifier": "private final", "type": "RandomAccessInputView", "declarator": "recordBuffer", "var_name": "recordBuffer"}, {"original_string": "private final RandomAccessInputView recordBufferForComparison;", "modifier": "private final", "type": "RandomAccessInputView", "declarator": "recordBufferForComparison", "var_name": "recordBufferForComparison"}, {"original_string": "private MemorySegment currentSortIndexSegment;", "modifier": "private", "type": "MemorySegment", "declarator": "currentSortIndexSegment", "var_name": "currentSortIndexSegment"}, {"original_string": "private final ArrayList<MemorySegment> freeMemory;", "modifier": "private final", "type": "ArrayList<MemorySegment>", "declarator": "freeMemory", "var_name": "freeMemory"}, {"original_string": "private final ArrayList<MemorySegment> sortIndex;", "modifier": "private final", "type": "ArrayList<MemorySegment>", "declarator": "sortIndex", "var_name": "sortIndex"}, {"original_string": "private final ArrayList<MemorySegment> recordBufferSegments;", "modifier": "private final", "type": "ArrayList<MemorySegment>", "declarator": "recordBufferSegments", "var_name": "recordBufferSegments"}, {"original_string": "private long currentDataBufferOffset;", "modifier": "private", "type": "long", "declarator": "currentDataBufferOffset", "var_name": "currentDataBufferOffset"}, {"original_string": "private long sortIndexBytes;", "modifier": "private", "type": "long", "declarator": "sortIndexBytes", "var_name": "sortIndexBytes"}, {"original_string": "private int currentSortIndexOffset;", "modifier": "private", "type": "int", "declarator": "currentSortIndexOffset", "var_name": "currentSortIndexOffset"}, {"original_string": "private int numRecords;", "modifier": "private", "type": "int", "declarator": "numRecords", "var_name": "numRecords"}, {"original_string": "private final int numKeyBytes;", "modifier": "private final", "type": "int", "declarator": "numKeyBytes", "var_name": "numKeyBytes"}, {"original_string": "private final int indexEntrySize;", "modifier": "private final", "type": "int", "declarator": "indexEntrySize", "var_name": "indexEntrySize"}, {"original_string": "private final int indexEntriesPerSegment;", "modifier": "private final", "type": "int", "declarator": "indexEntriesPerSegment", "var_name": "indexEntriesPerSegment"}, {"original_string": "private final int lastIndexEntryOffset;", "modifier": "private final", "type": "int", "declarator": "lastIndexEntryOffset", "var_name": "lastIndexEntryOffset"}, {"original_string": "private final int segmentSize;", "modifier": "private final", "type": "int", "declarator": "segmentSize", "var_name": "segmentSize"}, {"original_string": "private final int totalNumBuffers;", "modifier": "private final", "type": "int", "declarator": "totalNumBuffers", "var_name": "totalNumBuffers"}, {"original_string": "private final boolean normalizedKeyFullyDetermines;", "modifier": "private final", "type": "boolean", "declarator": "normalizedKeyFullyDetermines", "var_name": "normalizedKeyFullyDetermines"}, {"original_string": "private final boolean useNormKeyUninverted;", "modifier": "private final", "type": "boolean", "declarator": "useNormKeyUninverted", "var_name": "useNormKeyUninverted"}], "methods": [{"identifier": "NormalizedKeySorter", "parameters": "(TypeSerializer<T> serializer, TypeComparator<T> comparator, List<MemorySegment> memory)", "modifiers": "public", "return": "", "signature": " NormalizedKeySorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, List<MemorySegment> memory)", "full_signature": "public  NormalizedKeySorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, List<MemorySegment> memory)", "class_method_signature": "NormalizedKeySorter.NormalizedKeySorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, List<MemorySegment> memory)", "testcase": false, "constructor": true}, {"identifier": "NormalizedKeySorter", "parameters": "(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory, int maxNormalizedKeyBytes)", "modifiers": "public", "return": "", "signature": " NormalizedKeySorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory, int maxNormalizedKeyBytes)", "full_signature": "public  NormalizedKeySorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory, int maxNormalizedKeyBytes)", "class_method_signature": "NormalizedKeySorter.NormalizedKeySorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory, int maxNormalizedKeyBytes)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "NormalizedKeySorter.reset()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "NormalizedKeySorter.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "NormalizedKeySorter.dispose()", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCapacity()", "full_signature": "@Override public long getCapacity()", "class_method_signature": "NormalizedKeySorter.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "getOccupancy", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getOccupancy()", "full_signature": "@Override public long getOccupancy()", "class_method_signature": "NormalizedKeySorter.getOccupancy()", "testcase": false, "constructor": false}, {"identifier": "getRecord", "parameters": "(int logicalPosition)", "modifiers": "@Override public", "return": "T", "signature": "T getRecord(int logicalPosition)", "full_signature": "@Override public T getRecord(int logicalPosition)", "class_method_signature": "NormalizedKeySorter.getRecord(int logicalPosition)", "testcase": false, "constructor": false}, {"identifier": "getRecord", "parameters": "(T reuse, int logicalPosition)", "modifiers": "@Override public", "return": "T", "signature": "T getRecord(T reuse, int logicalPosition)", "full_signature": "@Override public T getRecord(T reuse, int logicalPosition)", "class_method_signature": "NormalizedKeySorter.getRecord(T reuse, int logicalPosition)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(T record)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(T record)", "full_signature": "@Override public boolean write(T record)", "class_method_signature": "NormalizedKeySorter.write(T record)", "testcase": false, "constructor": false}, {"identifier": "readPointer", "parameters": "(int logicalPosition)", "modifiers": "private", "return": "long", "signature": "long readPointer(int logicalPosition)", "full_signature": "private long readPointer(int logicalPosition)", "class_method_signature": "NormalizedKeySorter.readPointer(int logicalPosition)", "testcase": false, "constructor": false}, {"identifier": "getRecordFromBuffer", "parameters": "(T reuse, long pointer)", "modifiers": "private", "return": "T", "signature": "T getRecordFromBuffer(T reuse, long pointer)", "full_signature": "private T getRecordFromBuffer(T reuse, long pointer)", "class_method_signature": "NormalizedKeySorter.getRecordFromBuffer(T reuse, long pointer)", "testcase": false, "constructor": false}, {"identifier": "getRecordFromBuffer", "parameters": "(long pointer)", "modifiers": "private", "return": "T", "signature": "T getRecordFromBuffer(long pointer)", "full_signature": "private T getRecordFromBuffer(long pointer)", "class_method_signature": "NormalizedKeySorter.getRecordFromBuffer(long pointer)", "testcase": false, "constructor": false}, {"identifier": "compareRecords", "parameters": "(long pointer1, long pointer2)", "modifiers": "private", "return": "int", "signature": "int compareRecords(long pointer1, long pointer2)", "full_signature": "private int compareRecords(long pointer1, long pointer2)", "class_method_signature": "NormalizedKeySorter.compareRecords(long pointer1, long pointer2)", "testcase": false, "constructor": false}, {"identifier": "memoryAvailable", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean memoryAvailable()", "full_signature": "private boolean memoryAvailable()", "class_method_signature": "NormalizedKeySorter.memoryAvailable()", "testcase": false, "constructor": false}, {"identifier": "nextMemorySegment", "parameters": "()", "modifiers": "private", "return": "MemorySegment", "signature": "MemorySegment nextMemorySegment()", "full_signature": "private MemorySegment nextMemorySegment()", "class_method_signature": "NormalizedKeySorter.nextMemorySegment()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(int i, int j)", "modifiers": "@Override public", "return": "int", "signature": "int compare(int i, int j)", "full_signature": "@Override public int compare(int i, int j)", "class_method_signature": "NormalizedKeySorter.compare(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int i, int j)", "modifiers": "@Override public", "return": "void", "signature": "void swap(int i, int j)", "full_signature": "@Override public void swap(int i, int j)", "class_method_signature": "NormalizedKeySorter.swap(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "NormalizedKeySorter.size()", "testcase": false, "constructor": false}, {"identifier": "getIterator", "parameters": "()", "modifiers": "@Override public final", "return": "MutableObjectIterator<T>", "signature": "MutableObjectIterator<T> getIterator()", "full_signature": "@Override public final MutableObjectIterator<T> getIterator()", "class_method_signature": "NormalizedKeySorter.getIterator()", "testcase": false, "constructor": false}, {"identifier": "writeToOutput", "parameters": "(ChannelWriterOutputView output)", "modifiers": "@Override public", "return": "void", "signature": "void writeToOutput(ChannelWriterOutputView output)", "full_signature": "@Override public void writeToOutput(ChannelWriterOutputView output)", "class_method_signature": "NormalizedKeySorter.writeToOutput(ChannelWriterOutputView output)", "testcase": false, "constructor": false}, {"identifier": "writeToOutput", "parameters": "(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "modifiers": "@Override public", "return": "void", "signature": "void writeToOutput(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "full_signature": "@Override public void writeToOutput(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "class_method_signature": "NormalizedKeySorter.writeToOutput(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "testcase": false, "constructor": false}, {"identifier": "writeToOutput", "parameters": "(final ChannelWriterOutputView output, final int start, int num)", "modifiers": "@Override public", "return": "void", "signature": "void writeToOutput(final ChannelWriterOutputView output, final int start, int num)", "full_signature": "@Override public void writeToOutput(final ChannelWriterOutputView output, final int start, int num)", "class_method_signature": "NormalizedKeySorter.writeToOutput(final ChannelWriterOutputView output, final int start, int num)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/sort/NormalizedKeySorter.java"}, "focal_method": {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void reset() {\n\t\t// reset all offsets\n\t\tthis.numRecords = 0;\n\t\tthis.currentSortIndexOffset = 0;\n\t\tthis.currentDataBufferOffset = 0;\n\t\tthis.sortIndexBytes = 0;\n\t\t\n\t\t// return all memory\n\t\tthis.freeMemory.addAll(this.sortIndex);\n\t\tthis.freeMemory.addAll(this.recordBufferSegments);\n\t\tthis.sortIndex.clear();\n\t\tthis.recordBufferSegments.clear();\n\t\t\n\t\t// grab first buffers\n\t\tthis.currentSortIndexSegment = nextMemorySegment();\n\t\tthis.sortIndex.add(this.currentSortIndexSegment);\n\t\tthis.recordCollector.reset();\n\t}", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "NormalizedKeySorter.reset()", "testcase": false, "constructor": false, "invocations": ["addAll", "addAll", "clear", "clear", "nextMemorySegment", "add", "reset"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}