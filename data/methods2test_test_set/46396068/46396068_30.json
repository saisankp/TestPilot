{"test_class": {"identifier": "AssignTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-manager-0.98/src/test/java/com/kakao/hbase/manager/command/AssignTest.java"}, "test_case": {"identifier": "testExportWithRS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExportWithRS() throws Exception {\n        ArrayList<ServerName> serverNameList;\n        List<HRegionInfo> regionInfoList;\n        ServerName rs1, rs2;\n        List<String> assignmentList;\n\n        String expFileName = \"export_test.exp\";\n\n        splitTable(\"a\".getBytes());\n        splitTable(\"b\".getBytes());\n\n        serverNameList = getServerNameList();\n        rs1 = serverNameList.get(0);\n        rs2 = serverNameList.get(1);\n\n        // move all regions to rs1 except 1\n        regionInfoList = getRegionInfoList(tableName);\n        for (HRegionInfo hRegionInfo : regionInfoList)\n            move(hRegionInfo, rs1);\n        HRegionInfo firstRegion = regionInfoList.get(0);\n        move(firstRegion, rs2);\n        assertEquals(regionInfoList.size() - 1, getRegionInfoList(rs1, tableName).size());\n        assertEquals(1, getRegionInfoList(rs2, tableName).size());\n\n        boolean balancerRunning = false;\n        try {\n            String[] argsParam;\n            Args args;\n            Assign command;\n\n            balancerRunning = admin.setBalancerRunning(false, true);\n\n            // export with full RS name\n            argsParam = new String[]{\"zookeeper\", \"export\", expFileName, \"--rs=\" + rs1.getServerName()};\n            args = new ManagerArgs(argsParam);\n            command = new Assign(admin, args);\n            command.run();\n\n            assignmentList = readExportFile(expFileName);\n            assertEquals(AssignAction.getProcessedCount(), assignmentList.size());\n            for (String assignment : assignmentList) {\n                assertFalse(firstRegion.getEncodedName() + \" must not be exported.\",\n                    assignment.contains(firstRegion.getEncodedName()));\n            }\n\n            // export with regex RS name\n            String regex = rs2.getServerName().substring(0, rs2.getServerName().indexOf(',')) + \".*\";\n            argsParam = new String[]{\"zookeeper\", \"export\", expFileName, \"--rs=\" + regex};\n            args = new ManagerArgs(argsParam);\n            command = new Assign(admin, args);\n            command.run();\n\n            assignmentList = readExportFile(expFileName);\n            assertEquals(AssignAction.getProcessedCount(), assignmentList.size());\n            int actual = 0;\n            for (String assignment : assignmentList) {\n                if (assignment.contains(firstRegion.getEncodedName()))\n                    actual++;\n            }\n            assertEquals(firstRegion.getEncodedName() + \" must be exported.\", 1, actual);\n        } finally {\n            if (balancerRunning)\n                admin.setBalancerRunning(true, true);\n            Files.delete(Paths.get(expFileName));\n        }\n    }", "signature": "void testExportWithRS()", "full_signature": "@Test public void testExportWithRS()", "class_method_signature": "AssignTest.testExportWithRS()", "testcase": true, "constructor": false, "invocations": ["splitTable", "getBytes", "splitTable", "getBytes", "getServerNameList", "get", "get", "getRegionInfoList", "move", "get", "move", "assertEquals", "size", "size", "getRegionInfoList", "assertEquals", "size", "getRegionInfoList", "setBalancerRunning", "getServerName", "run", "readExportFile", "assertEquals", "getProcessedCount", "size", "assertFalse", "getEncodedName", "contains", "getEncodedName", "substring", "getServerName", "indexOf", "getServerName", "run", "readExportFile", "assertEquals", "getProcessedCount", "size", "contains", "getEncodedName", "assertEquals", "getEncodedName", "setBalancerRunning", "delete", "get"]}, "focal_class": {"identifier": "Assign", "superclass": "", "interfaces": "implements Command", "fields": [{"original_string": "private final HBaseAdmin admin;", "modifier": "private final", "type": "HBaseAdmin", "declarator": "admin", "var_name": "admin"}, {"original_string": "private final Args args;", "modifier": "private final", "type": "Args", "declarator": "args", "var_name": "args"}], "methods": [{"identifier": "Assign", "parameters": "(HBaseAdmin admin, Args args)", "modifiers": "public", "return": "", "signature": " Assign(HBaseAdmin admin, Args args)", "full_signature": "public  Assign(HBaseAdmin admin, Args args)", "class_method_signature": "Assign.Assign(HBaseAdmin admin, Args args)", "testcase": false, "constructor": true}, {"identifier": "usage", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") public static", "return": "String", "signature": "String usage()", "full_signature": "@SuppressWarnings(\"unused\") public static String usage()", "class_method_signature": "Assign.usage()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Assign.run()", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-manager-0.98/src/main/java/com/kakao/hbase/manager/command/Assign.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() throws Exception {\n        String actionStr = ((String) args.getOptionSet().nonOptionArguments().get(1)).toUpperCase();\n        AssignAction assignAction = AssignAction.valueOf(actionStr);\n        assignAction.run(admin, args);\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Assign.run()", "testcase": false, "constructor": false, "invocations": ["toUpperCase", "get", "nonOptionArguments", "getOptionSet", "valueOf", "run"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}