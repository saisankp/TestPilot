{"test_class": {"identifier": "HtmlDetectorTest", "superclass": "extends AbstractSchemaTestUtils", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private HtmlDetector htmlDetector;", "modifier": "@Autowired\n    private", "type": "HtmlDetector", "declarator": "htmlDetector", "var_name": "htmlDetector"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/html/HtmlDetectorTest.java"}, "test_case": {"identifier": "guess_html_format_fail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void guess_html_format_fail() throws Exception {\n\n        String fileName = \"foo.html\";\n\n        Format actual = htmlDetector.detect(this.getClass().getResourceAsStream(fileName));\n        assertNull(actual);\n    }", "signature": "void guess_html_format_fail()", "full_signature": "@Test public void guess_html_format_fail()", "class_method_signature": "HtmlDetectorTest.guess_html_format_fail()", "testcase": true, "constructor": false, "invocations": ["detect", "getResourceAsStream", "getClass", "assertNull"]}, "focal_class": {"identifier": "HtmlDetector", "superclass": "", "interfaces": "implements Detector", "fields": [{"original_string": "private HtmlEncodingDetector htmlEncodingDetector = new HtmlEncodingDetector();", "modifier": "private", "type": "HtmlEncodingDetector", "declarator": "htmlEncodingDetector = new HtmlEncodingDetector()", "var_name": "htmlEncodingDetector"}, {"original_string": "@Autowired\n    private HtmlFormatFamily htmlFormatFamily;", "modifier": "@Autowired\n    private", "type": "HtmlFormatFamily", "declarator": "htmlFormatFamily", "var_name": "htmlFormatFamily"}], "methods": [{"identifier": "detect", "parameters": "(Metadata metadata, TikaInputStream inputStream)", "modifiers": "@Override public", "return": "Format", "signature": "Format detect(Metadata metadata, TikaInputStream inputStream)", "full_signature": "@Override public Format detect(Metadata metadata, TikaInputStream inputStream)", "class_method_signature": "HtmlDetector.detect(Metadata metadata, TikaInputStream inputStream)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/html/HtmlDetector.java"}, "focal_method": {"identifier": "detect", "parameters": "(Metadata metadata, TikaInputStream inputStream)", "modifiers": "@Override public", "return": "Format", "body": "@Override\n    public Format detect(Metadata metadata, TikaInputStream inputStream) throws IOException {\n        if (inputStream == null) {\n            return null;\n        } else {\n            inputStream.mark(FormatUtils.META_TAG_BUFFER_SIZE);\n            byte[] buffer = new byte[FormatUtils.META_TAG_BUFFER_SIZE];\n            int n = 0;\n\n            for (int m = inputStream.read(buffer); m != -1 && n < buffer.length; m =\n                    inputStream.read(buffer, n, buffer.length - n)) {\n                n += m;\n            }\n\n            inputStream.reset();\n            String head = FormatUtils.readFromBuffer(buffer, 0, n);\n            try (InputStream stream = TikaInputStream.get(IOUtils.toInputStream(head))) {\n                Charset charset = htmlEncodingDetector.detect(stream, metadata);\n\n                if (charset != null) {\n                    return new Format(htmlFormatFamily, charset.name());\n                }\n            }\n            return null;\n        }\n\n    }", "signature": "Format detect(Metadata metadata, TikaInputStream inputStream)", "full_signature": "@Override public Format detect(Metadata metadata, TikaInputStream inputStream)", "class_method_signature": "HtmlDetector.detect(Metadata metadata, TikaInputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["mark", "read", "read", "reset", "readFromBuffer", "get", "toInputStream", "detect", "name"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}