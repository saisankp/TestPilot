{"test_class": {"identifier": "DefaultRightResolverTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "xwiki-security-rightservice/src/test/java/org/xwiki/security/internal/DefaultRightResolverTest.java"}, "test_case": {"identifier": "testRightResolver", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRightResolver()\n    {\n        try {\n            wiki.add(new MockDocument(docRefResolver.resolve(\"wikiY:SpaceX.DocY\"), \"wikiY:XWiki.UserY\"));\n\n            Right[] rights = {ADMIN, PROGRAM };\n            DocumentReference[] groups = { uResolver.resolve(\"GroupX\", \"wikiY\"), uResolver.resolve(\"SpaceY.GroupY\") };\n            DocumentReference[] users  = { uResolver.resolve(\"UserX\", \"wikiY\") };\n\n            RightsObject o = new MockRightsObject(new HashSet(asList(rights)),\n                                                  ALLOW,\n                                                  new HashSet(asList(users)),\n                                                  new HashSet(asList(groups)));\n\n            final DocumentReference doc = docRefResolver.resolve(\"wikiY:SpaceX.DocY\");\n            DocumentReference userX = uResolver.resolve(\"UserX\", \"wikiY\");\n            DocumentReference userY = uResolver.resolve(\"UserY\", \"wikiY\");\n            \n            RightCacheKey key = new RightCacheKey() { public EntityReference getEntityReference() { return doc; }};\n\n            List<Collection<RightsObject>> docLevel = new LinkedList();\n            docLevel.add(new LinkedList());\n            docLevel.add(new LinkedList());\n            Collection<RightsObject> pageRights = new LinkedList();\n            pageRights.add(o);\n            docLevel.add(pageRights);\n\n            AccessLevel level = resolver.resolve(userX, doc, key, new LinkedList(), docLevel);\n            assertTrue(level.equals(AccessLevel.DEFAULT_ACCESS_LEVEL));\n\n            level = resolver.resolve(userY, doc, key, asList(groups), docLevel);\n            AccessLevel delete = AccessLevel.DEFAULT_ACCESS_LEVEL.clone();\n            delete.allow(DELETE);\n            assertTrue(level.equals(delete));\n\n            level = resolver.resolve(userY, doc, key, new LinkedList(), docLevel);\n            assertTrue(level.equals(delete));\n\n            List<Collection<RightsObject>> spaceLevel = new LinkedList();\n            spaceLevel.add(new LinkedList());\n            Collection<RightsObject> spaceRights = new LinkedList();\n            spaceRights.add(o);\n            spaceLevel.add(spaceRights);\n            spaceLevel.add(new LinkedList());\n            \n            \n            level = resolver.resolve(userX, doc, key, new LinkedList(), spaceLevel);\n            AccessLevel expected = AccessLevel.DEFAULT_ACCESS_LEVEL.clone();\n            expected.allow(ADMIN);\n            expected.allow(DELETE);\n            assertTrue(level.equals(expected));\n\n            level = resolver.resolve(userY, doc, key, asList(groups), spaceLevel);\n            assertTrue(level.equals(expected));\n\n            level = resolver.resolve(userY, doc, key, new LinkedList(), spaceLevel);\n            assertTrue(level.equals(delete));\n\n            List<Collection<RightsObject>> wikiLevel = new LinkedList();\n            Collection<RightsObject> wikiRights = new LinkedList();\n            wikiRights.add(o);\n            wikiLevel.add(wikiRights);\n            wikiLevel.add(new LinkedList());\n            wikiLevel.add(new LinkedList());\n            \n            level = resolver.resolve(userX, doc, key, new LinkedList(), wikiLevel);\n            expected.allow(PROGRAM);\n            assertTrue(level.equals(expected));\n\n            level = resolver.resolve(userY, doc, key, asList(groups), wikiLevel);\n            assertTrue(level.equals(expected));\n\n            level = resolver.resolve(userY, doc, key, new LinkedList(), wikiLevel);\n            assertTrue(level.equals(delete));\n        } catch (Exception e) {\n            LOG.error(\"Caught exception!\", e);\n            assert false;\n        }\n    }", "signature": "void testRightResolver()", "full_signature": "@Test public void testRightResolver()", "class_method_signature": "DefaultRightResolverTest.testRightResolver()", "testcase": true, "constructor": false, "invocations": ["add", "resolve", "resolve", "resolve", "resolve", "asList", "asList", "asList", "resolve", "resolve", "resolve", "add", "add", "add", "add", "resolve", "assertTrue", "equals", "resolve", "asList", "clone", "allow", "assertTrue", "equals", "resolve", "assertTrue", "equals", "add", "add", "add", "add", "resolve", "clone", "allow", "allow", "assertTrue", "equals", "resolve", "asList", "assertTrue", "equals", "resolve", "assertTrue", "equals", "add", "add", "add", "add", "resolve", "allow", "assertTrue", "equals", "resolve", "asList", "assertTrue", "equals", "resolve", "assertTrue", "equals", "error"]}, "focal_class": {"identifier": "DefaultRightResolver", "superclass": "extends AbstractRightResolver", "interfaces": "", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "modifiers": "@Override public", "return": "AccessLevel", "signature": "AccessLevel resolve(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "full_signature": "@Override public AccessLevel resolve(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "class_method_signature": "DefaultRightResolver.resolve(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(DocumentReference user, EntityReference entity, AccessLevel accessLevel)", "modifiers": "private", "return": "void", "signature": "void postProcess(DocumentReference user, EntityReference entity, AccessLevel accessLevel)", "full_signature": "private void postProcess(DocumentReference user, EntityReference entity, AccessLevel accessLevel)", "class_method_signature": "DefaultRightResolver.postProcess(DocumentReference user, EntityReference entity, AccessLevel accessLevel)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(DocumentReference user,\n                         Collection<DocumentReference> groups,\n                         Collection<RightsObject> rightsObjects,\n                         EntityReference ref,\n                         AccessLevel accessLevel)", "modifiers": "private", "return": "void", "signature": "void resolve(DocumentReference user,\n                         Collection<DocumentReference> groups,\n                         Collection<RightsObject> rightsObjects,\n                         EntityReference ref,\n                         AccessLevel accessLevel)", "full_signature": "private void resolve(DocumentReference user,\n                         Collection<DocumentReference> groups,\n                         Collection<RightsObject> rightsObjects,\n                         EntityReference ref,\n                         AccessLevel accessLevel)", "class_method_signature": "DefaultRightResolver.resolve(DocumentReference user,\n                         Collection<DocumentReference> groups,\n                         Collection<RightsObject> rightsObjects,\n                         EntityReference ref,\n                         AccessLevel accessLevel)", "testcase": false, "constructor": false}, {"identifier": "resolveLevel", "parameters": "(Right right,\n                              DocumentReference user,\n                              Collection<DocumentReference> groups,\n                              RightsObject obj,\n                              EntityReference ref,\n                              AccessLevel accessLevel)", "modifiers": "private", "return": "void", "signature": "void resolveLevel(Right right,\n                              DocumentReference user,\n                              Collection<DocumentReference> groups,\n                              RightsObject obj,\n                              EntityReference ref,\n                              AccessLevel accessLevel)", "full_signature": "private void resolveLevel(Right right,\n                              DocumentReference user,\n                              Collection<DocumentReference> groups,\n                              RightsObject obj,\n                              EntityReference ref,\n                              AccessLevel accessLevel)", "class_method_signature": "DefaultRightResolver.resolveLevel(Right right,\n                              DocumentReference user,\n                              Collection<DocumentReference> groups,\n                              RightsObject obj,\n                              EntityReference ref,\n                              AccessLevel accessLevel)", "testcase": false, "constructor": false}, {"identifier": "resolveConflict", "parameters": "(RightState state, Right right, AccessLevel accessLevel)", "modifiers": "private", "return": "void", "signature": "void resolveConflict(RightState state, Right right, AccessLevel accessLevel)", "full_signature": "private void resolveConflict(RightState state, Right right, AccessLevel accessLevel)", "class_method_signature": "DefaultRightResolver.resolveConflict(RightState state, Right right, AccessLevel accessLevel)", "testcase": false, "constructor": false}, {"identifier": "mergeLevels", "parameters": "(AccessLevel currentLevel,\n                             AccessLevel accessLevel,\n                             EntityReference ref)", "modifiers": "private", "return": "void", "signature": "void mergeLevels(AccessLevel currentLevel,\n                             AccessLevel accessLevel,\n                             EntityReference ref)", "full_signature": "private void mergeLevels(AccessLevel currentLevel,\n                             AccessLevel accessLevel,\n                             EntityReference ref)", "class_method_signature": "DefaultRightResolver.mergeLevels(AccessLevel currentLevel,\n                             AccessLevel accessLevel,\n                             EntityReference ref)", "testcase": false, "constructor": false}], "file": "xwiki-security-rightservice/src/main/java/org/xwiki/security/internal/DefaultRightResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "modifiers": "@Override public", "return": "AccessLevel", "body": "@Override\n    public AccessLevel resolve(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)\n    {\n        AccessLevel accessLevel = new AccessLevel();\n\n        /*\n         * Allow everything for superadmin.\n         */\n        if (isSuperAdmin(user)) {\n            for (Right right : Right.values()) {\n                accessLevel.allow(right);\n            }\n            return accessLevel.getExistingInstance();\n        }\n\n        /*\n         * Creator is granted delete-rights.\n         */\n        if (isCreator(user, entity)) {\n            accessLevel.allow(DELETE);\n        }\n\n        /*\n         * Wiki owner is granted admin rights.\n         */\n        if (isWikiOwner(user, entity)) {\n            accessLevel.allow(ADMIN);\n        }\n\n        ListIterator<Collection<RightsObject>> iterator\n            = rightsObjects.listIterator(rightsObjects.size());\n        EntityReference ref = entityKey.getEntityReference();\n        while (iterator.hasPrevious() && ref != null) {\n            resolve(user, groups, iterator.previous(), ref, accessLevel);\n            ref = ref.getParent();\n        }\n\n        assert (!iterator.hasPrevious() && ref == null);\n\n        postProcess(user, entity, accessLevel);\n\n        return accessLevel.getExistingInstance();\n    }", "signature": "AccessLevel resolve(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "full_signature": "@Override public AccessLevel resolve(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "class_method_signature": "DefaultRightResolver.resolve(DocumentReference user,\n                               EntityReference entity,\n                               RightCacheKey entityKey,\n                               Collection<DocumentReference> groups,\n                               List<Collection<RightsObject>> rightsObjects)", "testcase": false, "constructor": false, "invocations": ["isSuperAdmin", "values", "allow", "getExistingInstance", "isCreator", "allow", "isWikiOwner", "allow", "listIterator", "size", "getEntityReference", "hasPrevious", "resolve", "previous", "getParent", "hasPrevious", "postProcess", "getExistingInstance"]}, "repository": {"repo_id": 2199098, "url": "https://github.com/xwiki-contrib/sandbox", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 14798, "license": "licensed"}}