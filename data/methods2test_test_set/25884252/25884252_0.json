{"test_class": {"identifier": "UIMAXMLConverterHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JCas testCas;", "modifier": "private", "type": "JCas", "declarator": "testCas", "var_name": "testCas"}, {"original_string": "private UIMAXMLConverterHelper converterHelper;", "modifier": "private", "type": "UIMAXMLConverterHelper", "declarator": "converterHelper", "var_name": "converterHelper"}], "file": "core/src/test/java/edu/tuberlin/dima/textmining/jedi/core/util/UIMAXMLConverterHelperTest.java"}, "test_case": {"identifier": "testConvert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvert() throws Exception {\n\n        testCas.reset();\n\n\t\tURL input = Resources.getResource(\"sampleCAS/websitesamplecas.xml\");\n\n\t\tconverterHelper.deserialize(Resources.toString(input, Charsets.UTF_8), testCas);\n\n        Collection<NamedEntity> namedEntities = JCasUtil.select(testCas, NamedEntity.class);\n\n        for (NamedEntity namedEntity : namedEntities) {\n            System.out.println(namedEntity.getType() + \" \" + namedEntity.getCoveredText());\n        }\n        System.out.println(Joiner.on(\"\").join(namedEntities));\n\n\t\tAssert.assertThat(namedEntities, is(not(empty())));\n\t}", "signature": "void testConvert()", "full_signature": "@Test public void testConvert()", "class_method_signature": "UIMAXMLConverterHelperTest.testConvert()", "testcase": true, "constructor": false, "invocations": ["reset", "getResource", "deserialize", "toString", "select", "println", "getType", "getCoveredText", "println", "join", "on", "assertThat", "is", "not", "empty"]}, "focal_class": {"identifier": "UIMAXMLConverterHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(UIMAXMLConverterHelper.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(UIMAXMLConverterHelper.class)", "var_name": "LOG"}, {"original_string": "private final XCASSerializer ser;", "modifier": "private final", "type": "XCASSerializer", "declarator": "ser", "var_name": "ser"}, {"original_string": "private final boolean formattedOutput;", "modifier": "private final", "type": "boolean", "declarator": "formattedOutput", "var_name": "formattedOutput"}], "methods": [{"identifier": "UIMAXMLConverterHelper", "parameters": "(boolean formattedOutput)", "modifiers": "public", "return": "", "signature": " UIMAXMLConverterHelper(boolean formattedOutput)", "full_signature": "public  UIMAXMLConverterHelper(boolean formattedOutput)", "class_method_signature": "UIMAXMLConverterHelper.UIMAXMLConverterHelper(boolean formattedOutput)", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(JCas jCas)", "modifiers": "public", "return": "String", "signature": "String serialize(JCas jCas)", "full_signature": "public String serialize(JCas jCas)", "class_method_signature": "UIMAXMLConverterHelper.serialize(JCas jCas)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(JCas jCas, OutputStream outputStream)", "modifiers": "public", "return": "boolean", "signature": "boolean serialize(JCas jCas, OutputStream outputStream)", "full_signature": "public boolean serialize(JCas jCas, OutputStream outputStream)", "class_method_signature": "UIMAXMLConverterHelper.serialize(JCas jCas, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(InputStream inputStream, JCas newElement)", "modifiers": "public", "return": "JCas", "signature": "JCas deserialize(InputStream inputStream, JCas newElement)", "full_signature": "public JCas deserialize(InputStream inputStream, JCas newElement)", "class_method_signature": "UIMAXMLConverterHelper.deserialize(InputStream inputStream, JCas newElement)", "testcase": false, "constructor": false}, {"identifier": "sanitizeString", "parameters": "(String input)", "modifiers": "public static", "return": "String", "signature": "String sanitizeString(String input)", "full_signature": "public static String sanitizeString(String input)", "class_method_signature": "UIMAXMLConverterHelper.sanitizeString(String input)", "testcase": false, "constructor": false}, {"identifier": "replaceInvalidXmlChars", "parameters": "(char[] aChars)", "modifiers": "private static", "return": "void", "signature": "void replaceInvalidXmlChars(char[] aChars)", "full_signature": "private static void replaceInvalidXmlChars(char[] aChars)", "class_method_signature": "UIMAXMLConverterHelper.replaceInvalidXmlChars(char[] aChars)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(String input, JCas newElement)", "modifiers": "public", "return": "JCas", "signature": "JCas deserialize(String input, JCas newElement)", "full_signature": "public JCas deserialize(String input, JCas newElement)", "class_method_signature": "UIMAXMLConverterHelper.deserialize(String input, JCas newElement)", "testcase": false, "constructor": false}], "file": "core/src/main/java/edu/tuberlin/dima/textmining/jedi/core/util/UIMAXMLConverterHelper.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(InputStream inputStream, JCas newElement)", "modifiers": "public", "return": "JCas", "body": "public JCas deserialize(InputStream inputStream, JCas newElement) throws IOException, UIMAException, InterruptedException, SAXException {\n\n        try {\n            newElement.reset();\n            // deserialize CAS\n            XCASDeserializer.deserialize(inputStream, newElement.getCas());\n            //XmiCasDeserializer.deserialize(inputStream, newElement.getCas());\n            return newElement;\n        } finally {\n            IOUtils.closeQuietly(inputStream);\n        }\n\n    }", "signature": "JCas deserialize(InputStream inputStream, JCas newElement)", "full_signature": "public JCas deserialize(InputStream inputStream, JCas newElement)", "class_method_signature": "UIMAXMLConverterHelper.deserialize(InputStream inputStream, JCas newElement)", "testcase": false, "constructor": false, "invocations": ["reset", "deserialize", "getCas", "closeQuietly"]}, "repository": {"repo_id": 25884252, "url": "https://github.com/jkirsch/jedi", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 759, "license": "licensed"}}