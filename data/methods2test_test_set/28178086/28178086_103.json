{"test_class": {"identifier": "OptionalTsDataTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/OptionalTsDataTest.java"}, "test_case": {"identifier": "testBuilderByDate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuilderByDate() {\n        CustomFactory<Date> factory = new CustomFactory<Date>() {\n            @Override\n            public Builder2<Date> builderOf(ObsGathering gathering) {\n                return builderByDate(new GregorianCalendar(), gathering);\n            }\n\n            @Override\n            public Date dateOf(int year, int month, int dayOfMonth) {\n                return new GregorianCalendar(year, month - 1, dayOfMonth).getTime();\n            }\n        };\n        testBuilderAdd(factory);\n        testBuilderPresent(factory);\n        testBuilderAbsent(factory);\n    }", "signature": "void testBuilderByDate()", "full_signature": "@Test public void testBuilderByDate()", "class_method_signature": "OptionalTsDataTest.testBuilderByDate()", "testcase": true, "constructor": false, "invocations": ["builderByDate", "getTime", "testBuilderAdd", "testBuilderPresent", "testBuilderAbsent"]}, "focal_class": {"identifier": "OptionalTsData", "superclass": "", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    static final OptionalTsData NO_DATA = new Absent(\"No data available\");", "modifier": "@VisibleForTesting\n    static final", "type": "OptionalTsData", "declarator": "NO_DATA = new Absent(\"No data available\")", "var_name": "NO_DATA"}, {"original_string": "@VisibleForTesting\n    static final OptionalTsData INVALID_AGGREGATION = new Absent(\"Invalid aggregation mode\");", "modifier": "@VisibleForTesting\n    static final", "type": "OptionalTsData", "declarator": "INVALID_AGGREGATION = new Absent(\"Invalid aggregation mode\")", "var_name": "INVALID_AGGREGATION"}, {"original_string": "@VisibleForTesting\n    static final OptionalTsData GUESS_SINGLE = new Absent(\"Cannot guess frequency with a single observation\");", "modifier": "@VisibleForTesting\n    static final", "type": "OptionalTsData", "declarator": "GUESS_SINGLE = new Absent(\"Cannot guess frequency with a single observation\")", "var_name": "GUESS_SINGLE"}, {"original_string": "@VisibleForTesting\n    static final OptionalTsData GUESS_DUPLICATION = new Absent(\"Cannot guess frequency with duplicated periods\");", "modifier": "@VisibleForTesting\n    static final", "type": "OptionalTsData", "declarator": "GUESS_DUPLICATION = new Absent(\"Cannot guess frequency with duplicated periods\")", "var_name": "GUESS_DUPLICATION"}, {"original_string": "@VisibleForTesting\n    static final OptionalTsData DUPLICATION_WITHOUT_AGGREGATION = new Absent(\"Duplicated observations without aggregation\");", "modifier": "@VisibleForTesting\n    static final", "type": "OptionalTsData", "declarator": "DUPLICATION_WITHOUT_AGGREGATION = new Absent(\"Duplicated observations without aggregation\")", "var_name": "DUPLICATION_WITHOUT_AGGREGATION"}, {"original_string": "@VisibleForTesting\n    static final OptionalTsData UNKNOWN = new Absent(\"Unexpected error\");", "modifier": "@VisibleForTesting\n    static final", "type": "OptionalTsData", "declarator": "UNKNOWN = new Absent(\"Unexpected error\")", "var_name": "UNKNOWN"}], "methods": [{"identifier": "present", "parameters": "(@NonNull TsData data)", "modifiers": "@NonNull public static", "return": "OptionalTsData", "signature": "OptionalTsData present(@NonNull TsData data)", "full_signature": "@NonNull public static OptionalTsData present(@NonNull TsData data)", "class_method_signature": "OptionalTsData.present(@NonNull TsData data)", "testcase": false, "constructor": false}, {"identifier": "present", "parameters": "(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull TsData data)", "modifiers": "@Deprecated @NonNull public static", "return": "OptionalTsData", "signature": "OptionalTsData present(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull TsData data)", "full_signature": "@Deprecated @NonNull public static OptionalTsData present(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull TsData data)", "class_method_signature": "OptionalTsData.present(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull TsData data)", "testcase": false, "constructor": false}, {"identifier": "absent", "parameters": "(@NonNull String cause)", "modifiers": "@NonNull public static", "return": "OptionalTsData", "signature": "OptionalTsData absent(@NonNull String cause)", "full_signature": "@NonNull public static OptionalTsData absent(@NonNull String cause)", "class_method_signature": "OptionalTsData.absent(@NonNull String cause)", "testcase": false, "constructor": false}, {"identifier": "absent", "parameters": "(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull String cause)", "modifiers": "@Deprecated @NonNull public static", "return": "OptionalTsData", "signature": "OptionalTsData absent(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull String cause)", "full_signature": "@Deprecated @NonNull public static OptionalTsData absent(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull String cause)", "class_method_signature": "OptionalTsData.absent(@NonNegative int nbrRows, @NonNegative int nbrUselessRows, @NonNull String cause)", "testcase": false, "constructor": false}, {"identifier": "builderByDate", "parameters": "(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "modifiers": "@NonNull public static", "return": "Builder2<Date>", "signature": "Builder2<Date> builderByDate(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "full_signature": "@NonNull public static Builder2<Date> builderByDate(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "class_method_signature": "OptionalTsData.builderByDate(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "testcase": false, "constructor": false}, {"identifier": "builderByLocalDate", "parameters": "(@NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "modifiers": "@NonNull public static", "return": "Builder2<LocalDate>", "signature": "Builder2<LocalDate> builderByLocalDate(@NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "full_signature": "@NonNull public static Builder2<LocalDate> builderByLocalDate(@NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "class_method_signature": "OptionalTsData.builderByLocalDate(@NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "testcase": false, "constructor": false}, {"identifier": "getNbrRows", "parameters": "()", "modifiers": "@Deprecated @NonNegative public", "return": "int", "signature": "int getNbrRows()", "full_signature": "@Deprecated @NonNegative public int getNbrRows()", "class_method_signature": "OptionalTsData.getNbrRows()", "testcase": false, "constructor": false}, {"identifier": "getNbrUselessRows", "parameters": "()", "modifiers": "@Deprecated @NonNegative public", "return": "int", "signature": "int getNbrUselessRows()", "full_signature": "@Deprecated @NonNegative public int getNbrUselessRows()", "class_method_signature": "OptionalTsData.getNbrUselessRows()", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "()", "modifiers": "abstract public", "return": "boolean", "signature": "boolean isPresent()", "full_signature": "abstract public boolean isPresent()", "class_method_signature": "OptionalTsData.isPresent()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@NonNull @NewObject abstract public", "return": "TsData", "signature": "TsData get()", "full_signature": "@NonNull @NewObject abstract public TsData get()", "class_method_signature": "OptionalTsData.get()", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(@NonNull TsData defaultValue)", "modifiers": "@NonNull public", "return": "TsData", "signature": "TsData or(@NonNull TsData defaultValue)", "full_signature": "@NonNull public TsData or(@NonNull TsData defaultValue)", "class_method_signature": "OptionalTsData.or(@NonNull TsData defaultValue)", "testcase": false, "constructor": false}, {"identifier": "orNull", "parameters": "()", "modifiers": "@Nullable abstract public", "return": "TsData", "signature": "TsData orNull()", "full_signature": "@Nullable abstract public TsData orNull()", "class_method_signature": "OptionalTsData.orNull()", "testcase": false, "constructor": false}, {"identifier": "getCause", "parameters": "()", "modifiers": "@NonNull abstract public", "return": "String", "signature": "String getCause()", "full_signature": "@NonNull abstract public String getCause()", "class_method_signature": "OptionalTsData.getCause()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(\n            ObsGathering gathering, @NonNull Set<ObsCharacteristics> characteristics,\n            ToLongFunction<T> periodFunc, ObjLongToIntFunction<TsFrequency> tsPeriodIdFunc)", "modifiers": "private static", "return": "Builder2<T>", "signature": "Builder2<T> builder(\n            ObsGathering gathering, @NonNull Set<ObsCharacteristics> characteristics,\n            ToLongFunction<T> periodFunc, ObjLongToIntFunction<TsFrequency> tsPeriodIdFunc)", "full_signature": "private static Builder2<T> builder(\n            ObsGathering gathering, @NonNull Set<ObsCharacteristics> characteristics,\n            ToLongFunction<T> periodFunc, ObjLongToIntFunction<TsFrequency> tsPeriodIdFunc)", "class_method_signature": "OptionalTsData.builder(\n            ObsGathering gathering, @NonNull Set<ObsCharacteristics> characteristics,\n            ToLongFunction<T> periodFunc, ObjLongToIntFunction<TsFrequency> tsPeriodIdFunc)", "testcase": false, "constructor": false}, {"identifier": "makeFromUnknownFrequency", "parameters": "(ObsList obs)", "modifiers": "private static", "return": "OptionalTsData", "signature": "OptionalTsData makeFromUnknownFrequency(ObsList obs)", "full_signature": "private static OptionalTsData makeFromUnknownFrequency(ObsList obs)", "class_method_signature": "OptionalTsData.makeFromUnknownFrequency(ObsList obs)", "testcase": false, "constructor": false}, {"identifier": "makeWithoutAggregation", "parameters": "(ObsList obs, TsFrequency freq)", "modifiers": "private static", "return": "OptionalTsData", "signature": "OptionalTsData makeWithoutAggregation(ObsList obs, TsFrequency freq)", "full_signature": "private static OptionalTsData makeWithoutAggregation(ObsList obs, TsFrequency freq)", "class_method_signature": "OptionalTsData.makeWithoutAggregation(ObsList obs, TsFrequency freq)", "testcase": false, "constructor": false}, {"identifier": "makeWithAggregation", "parameters": "(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "modifiers": "private static", "return": "OptionalTsData", "signature": "OptionalTsData makeWithAggregation(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "full_signature": "private static OptionalTsData makeWithAggregation(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "class_method_signature": "OptionalTsData.makeWithAggregation(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "testcase": false, "constructor": false}, {"identifier": "getIdFromTimeInMillis", "parameters": "(Calendar cal, TsFrequency freq, long period)", "modifiers": "private static", "return": "int", "signature": "int getIdFromTimeInMillis(Calendar cal, TsFrequency freq, long period)", "full_signature": "private static int getIdFromTimeInMillis(Calendar cal, TsFrequency freq, long period)", "class_method_signature": "OptionalTsData.getIdFromTimeInMillis(Calendar cal, TsFrequency freq, long period)", "testcase": false, "constructor": false}, {"identifier": "getYearMonthDay", "parameters": "(LocalDate date)", "modifiers": "private static", "return": "long", "signature": "long getYearMonthDay(LocalDate date)", "full_signature": "private static long getYearMonthDay(LocalDate date)", "class_method_signature": "OptionalTsData.getYearMonthDay(LocalDate date)", "testcase": false, "constructor": false}, {"identifier": "getIdFromYearMonthDay", "parameters": "(TsFrequency freq, long period)", "modifiers": "private static", "return": "int", "signature": "int getIdFromYearMonthDay(TsFrequency freq, long period)", "full_signature": "private static int getIdFromYearMonthDay(TsFrequency freq, long period)", "class_method_signature": "OptionalTsData.getIdFromYearMonthDay(TsFrequency freq, long period)", "testcase": false, "constructor": false}, {"identifier": "calcTsPeriodId", "parameters": "(int freq, int year, int month)", "modifiers": "private static", "return": "int", "signature": "int calcTsPeriodId(int freq, int year, int month)", "full_signature": "private static int calcTsPeriodId(int freq, int year, int month)", "class_method_signature": "OptionalTsData.calcTsPeriodId(int freq, int year, int month)", "testcase": false, "constructor": false}, {"identifier": "toEnumSet", "parameters": "(ObsCharacteristics[] items)", "modifiers": "private static", "return": "EnumSet<ObsCharacteristics>", "signature": "EnumSet<ObsCharacteristics> toEnumSet(ObsCharacteristics[] items)", "full_signature": "private static EnumSet<ObsCharacteristics> toEnumSet(ObsCharacteristics[] items)", "class_method_signature": "OptionalTsData.toEnumSet(ObsCharacteristics[] items)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/OptionalTsData.java"}, "focal_method": {"identifier": "builderByDate", "parameters": "(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "modifiers": "@NonNull public static", "return": "Builder2<Date>", "body": "@NonNull\n    public static Builder2<Date> builderByDate(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics) {\n        return builder(gathering, toEnumSet(characteristics), Date::getTime, (f, p) -> getIdFromTimeInMillis(resource, f, p));\n    }", "signature": "Builder2<Date> builderByDate(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "full_signature": "@NonNull public static Builder2<Date> builderByDate(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "class_method_signature": "OptionalTsData.builderByDate(@NonNull Calendar resource, @NonNull ObsGathering gathering, @NonNull ObsCharacteristics... characteristics)", "testcase": false, "constructor": false, "invocations": ["builder", "toEnumSet", "getIdFromTimeInMillis"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}