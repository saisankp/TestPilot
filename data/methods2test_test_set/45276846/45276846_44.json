{"test_class": {"identifier": "TestFieldInfoCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Field fiValues;", "modifier": "private static final", "type": "Field", "declarator": "fiValues", "var_name": "fiValues"}], "file": "xenon-common/src/test/java/com/vmware/xenon/services/common/TestFieldInfoCache.java"}, "test_case": {"identifier": "testSparse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSparse() throws NoSuchFieldException, IllegalAccessException {\n        FieldInfo[] infosArray = new FieldInfo[3];\n        infosArray[0] = makeFieldInfo(1);\n        infosArray[1] = makeFieldInfo(1000);\n        infosArray[2] = makeFieldInfo(5000);\n\n        FieldInfos orig = new FieldInfos(infosArray);\n        Collection<Object> values = extractValues(orig);\n        assertSame(Collections.unmodifiableCollection(new TreeMap<String, Object>().values()).getClass(),\n                values.getClass());\n\n        FieldInfoCache cache = new FieldInfoCache();\n        FieldInfos fixedFieldInfo = cache.dedupFieldInfos(infosArray);\n        values = extractValues(fixedFieldInfo);\n        assertSame(Collections.unmodifiableCollection(new TreeMap<String, Object>().values()).getClass(),\n                values.getClass());\n    }", "signature": "void testSparse()", "full_signature": "@Test public void testSparse()", "class_method_signature": "TestFieldInfoCache.testSparse()", "testcase": true, "constructor": false, "invocations": ["makeFieldInfo", "makeFieldInfo", "makeFieldInfo", "extractValues", "assertSame", "getClass", "unmodifiableCollection", "values", "getClass", "dedupFieldInfos", "extractValues", "assertSame", "getClass", "unmodifiableCollection", "values", "getClass"]}, "focal_class": {"identifier": "FieldInfoCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_FIELD_INFO_COUNT = 1500;", "modifier": "private static final", "type": "int", "declarator": "MAX_FIELD_INFO_COUNT = 1500", "var_name": "MAX_FIELD_INFO_COUNT"}, {"original_string": "private static final int MAX_INFOS_COUNT = 500;", "modifier": "private static final", "type": "int", "declarator": "MAX_INFOS_COUNT = 500", "var_name": "MAX_INFOS_COUNT"}, {"original_string": "private final ConcurrentMap<FieldInfoKey, FieldInfo> infoCache;", "modifier": "private final", "type": "ConcurrentMap<FieldInfoKey, FieldInfo>", "declarator": "infoCache", "var_name": "infoCache"}, {"original_string": "private final ConcurrentMap<FieldInfosKey, FieldInfos> infosCache;", "modifier": "private final", "type": "ConcurrentMap<FieldInfosKey, FieldInfos>", "declarator": "infosCache", "var_name": "infosCache"}], "methods": [{"identifier": "hashCode", "parameters": "(FieldInfo fi)", "modifiers": "public static", "return": "int", "signature": "int hashCode(FieldInfo fi)", "full_signature": "public static int hashCode(FieldInfo fi)", "class_method_signature": "FieldInfoCache.hashCode(FieldInfo fi)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(FieldInfo a, FieldInfo b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(FieldInfo a, FieldInfo b)", "full_signature": "public static boolean equals(FieldInfo a, FieldInfo b)", "class_method_signature": "FieldInfoCache.equals(FieldInfo a, FieldInfo b)", "testcase": false, "constructor": false}, {"identifier": "FieldInfoCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " FieldInfoCache()", "full_signature": "public  FieldInfoCache()", "class_method_signature": "FieldInfoCache.FieldInfoCache()", "testcase": false, "constructor": true}, {"identifier": "dedupFieldInfos", "parameters": "(FieldInfo[] infos)", "modifiers": "public", "return": "FieldInfos", "signature": "FieldInfos dedupFieldInfos(FieldInfo[] infos)", "full_signature": "public FieldInfos dedupFieldInfos(FieldInfo[] infos)", "class_method_signature": "FieldInfoCache.dedupFieldInfos(FieldInfo[] infos)", "testcase": false, "constructor": false}, {"identifier": "dedupFieldInfo", "parameters": "(String name, int fieldNumber, boolean storeTermVector, boolean omitNorms,\n            boolean storePayloads, IndexOptions indexOptions, DocValuesType docValuesType, long dvGen,\n            Map<String, String> attributes, int pointDimensionCount, int pointNumBytes)", "modifiers": "public", "return": "FieldInfo", "signature": "FieldInfo dedupFieldInfo(String name, int fieldNumber, boolean storeTermVector, boolean omitNorms,\n            boolean storePayloads, IndexOptions indexOptions, DocValuesType docValuesType, long dvGen,\n            Map<String, String> attributes, int pointDimensionCount, int pointNumBytes)", "full_signature": "public FieldInfo dedupFieldInfo(String name, int fieldNumber, boolean storeTermVector, boolean omitNorms,\n            boolean storePayloads, IndexOptions indexOptions, DocValuesType docValuesType, long dvGen,\n            Map<String, String> attributes, int pointDimensionCount, int pointNumBytes)", "class_method_signature": "FieldInfoCache.dedupFieldInfo(String name, int fieldNumber, boolean storeTermVector, boolean omitNorms,\n            boolean storePayloads, IndexOptions indexOptions, DocValuesType docValuesType, long dvGen,\n            Map<String, String> attributes, int pointDimensionCount, int pointNumBytes)", "testcase": false, "constructor": false}, {"identifier": "handleMaintenance", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void handleMaintenance()", "full_signature": "public void handleMaintenance()", "class_method_signature": "FieldInfoCache.handleMaintenance()", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/services/common/FieldInfoCache.java"}, "focal_method": {"identifier": "dedupFieldInfos", "parameters": "(FieldInfo[] infos)", "modifiers": "public", "return": "FieldInfos", "body": "public FieldInfos dedupFieldInfos(FieldInfo[] infos) {\n        FieldInfosKey key = new FieldInfosKey(infos);\n        return this.infosCache.computeIfAbsent(key, (FieldInfosKey k) -> new FieldInfos(k.infos));\n    }", "signature": "FieldInfos dedupFieldInfos(FieldInfo[] infos)", "full_signature": "public FieldInfos dedupFieldInfos(FieldInfo[] infos)", "class_method_signature": "FieldInfoCache.dedupFieldInfos(FieldInfo[] infos)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}