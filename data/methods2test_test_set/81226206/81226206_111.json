{"test_class": {"identifier": "DriverOptionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "karate-core/src/test/java/com/intuit/karate/driver/DriverOptionsTest.java"}, "test_case": {"identifier": "testRetry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRetry() {\n        DriverOptions options = new DriverOptions(getContext(), Collections.EMPTY_MAP, null, 0, null);\n        options.retry(() -> 1, x -> x < 5, \"not 5\", false);        \n    }", "signature": "void testRetry()", "full_signature": "@Test public void testRetry()", "class_method_signature": "DriverOptionsTest.testRetry()", "testcase": true, "constructor": false, "invocations": ["getContext", "retry"]}, "focal_class": {"identifier": "DriverOptions", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final Map<String, Object> options;", "modifier": "public final", "type": "Map<String, Object>", "declarator": "options", "var_name": "options"}, {"original_string": "public final int timeout;", "modifier": "public final", "type": "int", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "public final boolean start;", "modifier": "public final", "type": "boolean", "declarator": "start", "var_name": "start"}, {"original_string": "public final String executable;", "modifier": "public final", "type": "String", "declarator": "executable", "var_name": "executable"}, {"original_string": "public final String type;", "modifier": "public final", "type": "String", "declarator": "type", "var_name": "type"}, {"original_string": "public final int port;", "modifier": "public final", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "public final String host;", "modifier": "public final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "public final int pollAttempts;", "modifier": "public final", "type": "int", "declarator": "pollAttempts", "var_name": "pollAttempts"}, {"original_string": "public final int pollInterval;", "modifier": "public final", "type": "int", "declarator": "pollInterval", "var_name": "pollInterval"}, {"original_string": "public final boolean headless;", "modifier": "public final", "type": "boolean", "declarator": "headless", "var_name": "headless"}, {"original_string": "public final boolean showProcessLog;", "modifier": "public final", "type": "boolean", "declarator": "showProcessLog", "var_name": "showProcessLog"}, {"original_string": "public final boolean showDriverLog;", "modifier": "public final", "type": "boolean", "declarator": "showDriverLog", "var_name": "showDriverLog"}, {"original_string": "public final Logger logger;", "modifier": "public final", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "public final LogAppender appender;", "modifier": "public final", "type": "LogAppender", "declarator": "appender", "var_name": "appender"}, {"original_string": "public final Logger processLogger;", "modifier": "public final", "type": "Logger", "declarator": "processLogger", "var_name": "processLogger"}, {"original_string": "public final Logger driverLogger;", "modifier": "public final", "type": "Logger", "declarator": "driverLogger", "var_name": "driverLogger"}, {"original_string": "public final String uniqueName;", "modifier": "public final", "type": "String", "declarator": "uniqueName", "var_name": "uniqueName"}, {"original_string": "public final File workingDir;", "modifier": "public final", "type": "File", "declarator": "workingDir", "var_name": "workingDir"}, {"original_string": "public final boolean disableNotifications;", "modifier": "public final", "type": "boolean", "declarator": "disableNotifications", "var_name": "disableNotifications"}, {"original_string": "public final String userAgent;", "modifier": "public final", "type": "String", "declarator": "userAgent", "var_name": "userAgent"}, {"original_string": "public final String userDataDir;", "modifier": "public final", "type": "String", "declarator": "userDataDir", "var_name": "userDataDir"}, {"original_string": "public final String processLogFile;", "modifier": "public final", "type": "String", "declarator": "processLogFile", "var_name": "processLogFile"}, {"original_string": "public final int maxPayloadSize;", "modifier": "public final", "type": "int", "declarator": "maxPayloadSize", "var_name": "maxPayloadSize"}, {"original_string": "public final List<String> addOptions;", "modifier": "public final", "type": "List<String>", "declarator": "addOptions", "var_name": "addOptions"}, {"original_string": "public final List<String> args = new ArrayList<>();", "modifier": "public final", "type": "List<String>", "declarator": "args = new ArrayList<>()", "var_name": "args"}, {"original_string": "public final String webDriverUrl;", "modifier": "public final", "type": "String", "declarator": "webDriverUrl", "var_name": "webDriverUrl"}, {"original_string": "public final String webDriverPath;", "modifier": "public final", "type": "String", "declarator": "webDriverPath", "var_name": "webDriverPath"}, {"original_string": "public final Map<String, Object> webDriverSession;", "modifier": "public final", "type": "Map<String, Object>", "declarator": "webDriverSession", "var_name": "webDriverSession"}, {"original_string": "public final Map<String, Object> httpConfig;", "modifier": "public final", "type": "Map<String, Object>", "declarator": "httpConfig", "var_name": "httpConfig"}, {"original_string": "public final Target target;", "modifier": "public final", "type": "Target", "declarator": "target", "var_name": "target"}, {"original_string": "public final String beforeStart;", "modifier": "public final", "type": "String", "declarator": "beforeStart", "var_name": "beforeStart"}, {"original_string": "public final String afterStop;", "modifier": "public final", "type": "String", "declarator": "afterStop", "var_name": "afterStop"}, {"original_string": "public final String videoFile;", "modifier": "public final", "type": "String", "declarator": "videoFile", "var_name": "videoFile"}, {"original_string": "public final boolean highlight;", "modifier": "public final", "type": "boolean", "declarator": "highlight", "var_name": "highlight"}, {"original_string": "public final int highlightDuration;", "modifier": "public final", "type": "int", "declarator": "highlightDuration", "var_name": "highlightDuration"}, {"original_string": "public final String attach;", "modifier": "public final", "type": "String", "declarator": "attach", "var_name": "attach"}, {"original_string": "private boolean retryEnabled;", "modifier": "private", "type": "boolean", "declarator": "retryEnabled", "var_name": "retryEnabled"}, {"original_string": "private Integer retryInterval = null;", "modifier": "private", "type": "Integer", "declarator": "retryInterval = null", "var_name": "retryInterval"}, {"original_string": "private Integer retryCount = null;", "modifier": "private", "type": "Integer", "declarator": "retryCount = null", "var_name": "retryCount"}, {"original_string": "private String preSubmitHash = null;", "modifier": "private", "type": "String", "declarator": "preSubmitHash = null", "var_name": "preSubmitHash"}, {"original_string": "private Integer timeoutOverride;", "modifier": "private", "type": "Integer", "declarator": "timeoutOverride", "var_name": "timeoutOverride"}, {"original_string": "private ScenarioContext context;", "modifier": "private", "type": "ScenarioContext", "declarator": "context", "var_name": "context"}, {"original_string": "public static final String SCROLL_JS_FUNCTION = \"function(e){ var d = window.getComputedStyle(e).display;\"\n            + \" while(d == 'none'){ e = e.parentElement; d = window.getComputedStyle(e).display }\"\n            + \" e.scrollIntoView({block: 'center'}) }\";", "modifier": "public static final", "type": "String", "declarator": "SCROLL_JS_FUNCTION = \"function(e){ var d = window.getComputedStyle(e).display;\"\n            + \" while(d == 'none'){ e = e.parentElement; d = window.getComputedStyle(e).display }\"\n            + \" e.scrollIntoView({block: 'center'}) }\"", "var_name": "SCROLL_JS_FUNCTION"}, {"original_string": "public static final String KARATE_REF_GENERATOR = \"function(e){\"\n            + \" if (!document._karate) document._karate = { seq: (new Date()).getTime() };\"\n            + \" var ref = 'ref' + document._karate.seq++; document._karate[ref] = e; return ref }\";", "modifier": "public static final", "type": "String", "declarator": "KARATE_REF_GENERATOR = \"function(e){\"\n            + \" if (!document._karate) document._karate = { seq: (new Date()).getTime() };\"\n            + \" var ref = 'ref' + document._karate.seq++; document._karate[ref] = e; return ref }\"", "var_name": "KARATE_REF_GENERATOR"}, {"original_string": "private static final String DOCUMENT = \"document\";", "modifier": "private static final", "type": "String", "declarator": "DOCUMENT = \"document\"", "var_name": "DOCUMENT"}, {"original_string": "private static final String HIGHLIGHT_FN = \"function(e){ var old = e.getAttribute('style');\"\n            + \" e.setAttribute('style', 'background: yellow; border: 2px solid red;');\"\n            + \" setTimeout(function(){ e.setAttribute('style', old) }, %d) }\";", "modifier": "private static final", "type": "String", "declarator": "HIGHLIGHT_FN = \"function(e){ var old = e.getAttribute('style');\"\n            + \" e.setAttribute('style', 'background: yellow; border: 2px solid red;');\"\n            + \" setTimeout(function(){ e.setAttribute('style', old) }, %d) }\"", "var_name": "HIGHLIGHT_FN"}], "methods": [{"identifier": "setContext", "parameters": "(ScenarioContext context)", "modifiers": "public", "return": "void", "signature": "void setContext(ScenarioContext context)", "full_signature": "public void setContext(ScenarioContext context)", "class_method_signature": "DriverOptions.setContext(ScenarioContext context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "public", "return": "ScenarioContext", "signature": "ScenarioContext getContext()", "full_signature": "public ScenarioContext getContext()", "class_method_signature": "DriverOptions.getContext()", "testcase": false, "constructor": false}, {"identifier": "isRetryEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRetryEnabled()", "full_signature": "public boolean isRetryEnabled()", "class_method_signature": "DriverOptions.isRetryEnabled()", "testcase": false, "constructor": false}, {"identifier": "getPreSubmitHash", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPreSubmitHash()", "full_signature": "public String getPreSubmitHash()", "class_method_signature": "DriverOptions.getPreSubmitHash()", "testcase": false, "constructor": false}, {"identifier": "setPreSubmitHash", "parameters": "(String preSubmitHash)", "modifiers": "public", "return": "void", "signature": "void setPreSubmitHash(String preSubmitHash)", "full_signature": "public void setPreSubmitHash(String preSubmitHash)", "class_method_signature": "DriverOptions.setPreSubmitHash(String preSubmitHash)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key, T defaultValue)", "modifiers": "private", "return": "T", "signature": "T get(String key, T defaultValue)", "full_signature": "private T get(String key, T defaultValue)", "class_method_signature": "DriverOptions.get(String key, T defaultValue)", "testcase": false, "constructor": false}, {"identifier": "DriverOptions", "parameters": "(ScenarioContext context, Map<String, Object> options, LogAppender appender, int defaultPort, String defaultExecutable)", "modifiers": "public", "return": "", "signature": " DriverOptions(ScenarioContext context, Map<String, Object> options, LogAppender appender, int defaultPort, String defaultExecutable)", "full_signature": "public  DriverOptions(ScenarioContext context, Map<String, Object> options, LogAppender appender, int defaultPort, String defaultExecutable)", "class_method_signature": "DriverOptions.DriverOptions(ScenarioContext context, Map<String, Object> options, LogAppender appender, int defaultPort, String defaultExecutable)", "testcase": false, "constructor": true}, {"identifier": "resolvePort", "parameters": "(int defaultPort)", "modifiers": "private", "return": "int", "signature": "int resolvePort(int defaultPort)", "full_signature": "private int resolvePort(int defaultPort)", "class_method_signature": "DriverOptions.resolvePort(int defaultPort)", "testcase": false, "constructor": false}, {"identifier": "getHttp", "parameters": "()", "modifiers": "public", "return": "Http", "signature": "Http getHttp()", "full_signature": "public Http getHttp()", "class_method_signature": "DriverOptions.getHttp()", "testcase": false, "constructor": false}, {"identifier": "getUrlBase", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getUrlBase()", "full_signature": "private String getUrlBase()", "class_method_signature": "DriverOptions.getUrlBase()", "testcase": false, "constructor": false}, {"identifier": "arg", "parameters": "(String arg)", "modifiers": "public", "return": "void", "signature": "void arg(String arg)", "full_signature": "public void arg(String arg)", "class_method_signature": "DriverOptions.arg(String arg)", "testcase": false, "constructor": false}, {"identifier": "startProcess", "parameters": "()", "modifiers": "public", "return": "Command", "signature": "Command startProcess()", "full_signature": "public Command startProcess()", "class_method_signature": "DriverOptions.startProcess()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(ScenarioContext context, Map<String, Object> options, LogAppender appender)", "modifiers": "public static", "return": "Driver", "signature": "Driver start(ScenarioContext context, Map<String, Object> options, LogAppender appender)", "full_signature": "public static Driver start(ScenarioContext context, Map<String, Object> options, LogAppender appender)", "class_method_signature": "DriverOptions.start(ScenarioContext context, Map<String, Object> options, LogAppender appender)", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "(String browserName)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> getSession(String browserName)", "full_signature": "private Map<String, Object> getSession(String browserName)", "class_method_signature": "DriverOptions.getSession(String browserName)", "testcase": false, "constructor": false}, {"identifier": "getWebDriverSessionPayload", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getWebDriverSessionPayload()", "full_signature": "public Map<String, Object> getWebDriverSessionPayload()", "class_method_signature": "DriverOptions.getWebDriverSessionPayload()", "testcase": false, "constructor": false}, {"identifier": "preProcessWildCard", "parameters": "(String locator)", "modifiers": "public static", "return": "String", "signature": "String preProcessWildCard(String locator)", "full_signature": "public static String preProcessWildCard(String locator)", "class_method_signature": "DriverOptions.preProcessWildCard(String locator)", "testcase": false, "constructor": false}, {"identifier": "selector", "parameters": "(String locator)", "modifiers": "public static", "return": "String", "signature": "String selector(String locator)", "full_signature": "public static String selector(String locator)", "class_method_signature": "DriverOptions.selector(String locator)", "testcase": false, "constructor": false}, {"identifier": "selector", "parameters": "(String locator, String contextNode)", "modifiers": "public static", "return": "String", "signature": "String selector(String locator, String contextNode)", "full_signature": "public static String selector(String locator, String contextNode)", "class_method_signature": "DriverOptions.selector(String locator, String contextNode)", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(Integer timeout)", "modifiers": "public", "return": "void", "signature": "void setTimeout(Integer timeout)", "full_signature": "public void setTimeout(Integer timeout)", "class_method_signature": "DriverOptions.setTimeout(Integer timeout)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimeout()", "full_signature": "public int getTimeout()", "class_method_signature": "DriverOptions.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "setRetryInterval", "parameters": "(Integer retryInterval)", "modifiers": "public", "return": "void", "signature": "void setRetryInterval(Integer retryInterval)", "full_signature": "public void setRetryInterval(Integer retryInterval)", "class_method_signature": "DriverOptions.setRetryInterval(Integer retryInterval)", "testcase": false, "constructor": false}, {"identifier": "getRetryInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRetryInterval()", "full_signature": "public int getRetryInterval()", "class_method_signature": "DriverOptions.getRetryInterval()", "testcase": false, "constructor": false}, {"identifier": "getRetryCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRetryCount()", "full_signature": "public int getRetryCount()", "class_method_signature": "DriverOptions.getRetryCount()", "testcase": false, "constructor": false}, {"identifier": "retry", "parameters": "(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "modifiers": "public", "return": "T", "signature": "T retry(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "full_signature": "public T retry(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "class_method_signature": "DriverOptions.retry(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "testcase": false, "constructor": false}, {"identifier": "wrapInFunctionInvoke", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String wrapInFunctionInvoke(String text)", "full_signature": "public static String wrapInFunctionInvoke(String text)", "class_method_signature": "DriverOptions.wrapInFunctionInvoke(String text)", "testcase": false, "constructor": false}, {"identifier": "highlightFn", "parameters": "(int millis)", "modifiers": "private static", "return": "String", "signature": "String highlightFn(int millis)", "full_signature": "private static String highlightFn(int millis)", "class_method_signature": "DriverOptions.highlightFn(int millis)", "testcase": false, "constructor": false}, {"identifier": "highlight", "parameters": "(String locator, int millis)", "modifiers": "public", "return": "String", "signature": "String highlight(String locator, int millis)", "full_signature": "public String highlight(String locator, int millis)", "class_method_signature": "DriverOptions.highlight(String locator, int millis)", "testcase": false, "constructor": false}, {"identifier": "highlightAll", "parameters": "(String locator, int millis)", "modifiers": "public", "return": "String", "signature": "String highlightAll(String locator, int millis)", "full_signature": "public String highlightAll(String locator, int millis)", "class_method_signature": "DriverOptions.highlightAll(String locator, int millis)", "testcase": false, "constructor": false}, {"identifier": "optionSelector", "parameters": "(String locator, String text)", "modifiers": "public", "return": "String", "signature": "String optionSelector(String locator, String text)", "full_signature": "public String optionSelector(String locator, String text)", "class_method_signature": "DriverOptions.optionSelector(String locator, String text)", "testcase": false, "constructor": false}, {"identifier": "optionSelector", "parameters": "(String id, int index)", "modifiers": "public", "return": "String", "signature": "String optionSelector(String id, int index)", "full_signature": "public String optionSelector(String id, int index)", "class_method_signature": "DriverOptions.optionSelector(String id, int index)", "testcase": false, "constructor": false}, {"identifier": "fun", "parameters": "(String expression)", "modifiers": "private", "return": "String", "signature": "String fun(String expression)", "full_signature": "private String fun(String expression)", "class_method_signature": "DriverOptions.fun(String expression)", "testcase": false, "constructor": false}, {"identifier": "scriptSelector", "parameters": "(String locator, String expression)", "modifiers": "public", "return": "String", "signature": "String scriptSelector(String locator, String expression)", "full_signature": "public String scriptSelector(String locator, String expression)", "class_method_signature": "DriverOptions.scriptSelector(String locator, String expression)", "testcase": false, "constructor": false}, {"identifier": "scriptSelector", "parameters": "(String locator, String expression, String contextNode)", "modifiers": "public", "return": "String", "signature": "String scriptSelector(String locator, String expression, String contextNode)", "full_signature": "public String scriptSelector(String locator, String expression, String contextNode)", "class_method_signature": "DriverOptions.scriptSelector(String locator, String expression, String contextNode)", "testcase": false, "constructor": false}, {"identifier": "scriptAllSelector", "parameters": "(String locator, String expression)", "modifiers": "public", "return": "String", "signature": "String scriptAllSelector(String locator, String expression)", "full_signature": "public String scriptAllSelector(String locator, String expression)", "class_method_signature": "DriverOptions.scriptAllSelector(String locator, String expression)", "testcase": false, "constructor": false}, {"identifier": "scriptAllSelector", "parameters": "(String locator, String expression, String contextNode)", "modifiers": "public", "return": "String", "signature": "String scriptAllSelector(String locator, String expression, String contextNode)", "full_signature": "public String scriptAllSelector(String locator, String expression, String contextNode)", "class_method_signature": "DriverOptions.scriptAllSelector(String locator, String expression, String contextNode)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sleep()", "full_signature": "public void sleep()", "class_method_signature": "DriverOptions.sleep()", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(int millis)", "modifiers": "public", "return": "void", "signature": "void sleep(int millis)", "full_signature": "public void sleep(int millis)", "class_method_signature": "DriverOptions.sleep(int millis)", "testcase": false, "constructor": false}, {"identifier": "waitForPort", "parameters": "(String host, int port)", "modifiers": "private", "return": "boolean", "signature": "boolean waitForPort(String host, int port)", "full_signature": "private boolean waitForPort(String host, int port)", "class_method_signature": "DriverOptions.waitForPort(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "newMapWithSelectedKeys", "parameters": "(Map<String, Object> map, String... keys)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> newMapWithSelectedKeys(Map<String, Object> map, String... keys)", "full_signature": "public Map<String, Object> newMapWithSelectedKeys(Map<String, Object> map, String... keys)", "class_method_signature": "DriverOptions.newMapWithSelectedKeys(Map<String, Object> map, String... keys)", "testcase": false, "constructor": false}, {"identifier": "embedPngImage", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "void", "signature": "void embedPngImage(byte[] bytes)", "full_signature": "public void embedPngImage(byte[] bytes)", "class_method_signature": "DriverOptions.embedPngImage(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "embedContent", "parameters": "(Embed embed)", "modifiers": "public", "return": "void", "signature": "void embedContent(Embed embed)", "full_signature": "public void embedContent(Embed embed)", "class_method_signature": "DriverOptions.embedContent(Embed embed)", "testcase": false, "constructor": false}, {"identifier": "disableRetry", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disableRetry()", "full_signature": "public void disableRetry()", "class_method_signature": "DriverOptions.disableRetry()", "testcase": false, "constructor": false}, {"identifier": "enableRetry", "parameters": "(Integer count, Integer interval)", "modifiers": "public", "return": "void", "signature": "void enableRetry(Integer count, Integer interval)", "full_signature": "public void enableRetry(Integer count, Integer interval)", "class_method_signature": "DriverOptions.enableRetry(Integer count, Integer interval)", "testcase": false, "constructor": false}, {"identifier": "waitUntil", "parameters": "(Driver driver, String locator, String expression)", "modifiers": "public", "return": "Element", "signature": "Element waitUntil(Driver driver, String locator, String expression)", "full_signature": "public Element waitUntil(Driver driver, String locator, String expression)", "class_method_signature": "DriverOptions.waitUntil(Driver driver, String locator, String expression)", "testcase": false, "constructor": false}, {"identifier": "waitForUrl", "parameters": "(Driver driver, String expected)", "modifiers": "public", "return": "String", "signature": "String waitForUrl(Driver driver, String expected)", "full_signature": "public String waitForUrl(Driver driver, String expected)", "class_method_signature": "DriverOptions.waitForUrl(Driver driver, String expected)", "testcase": false, "constructor": false}, {"identifier": "waitForAny", "parameters": "(Driver driver, String... locators)", "modifiers": "public", "return": "Element", "signature": "Element waitForAny(Driver driver, String... locators)", "full_signature": "public Element waitForAny(Driver driver, String... locators)", "class_method_signature": "DriverOptions.waitForAny(Driver driver, String... locators)", "testcase": false, "constructor": false}, {"identifier": "optional", "parameters": "(Driver driver, String locator)", "modifiers": "public", "return": "Element", "signature": "Element optional(Driver driver, String locator)", "full_signature": "public Element optional(Driver driver, String locator)", "class_method_signature": "DriverOptions.optional(Driver driver, String locator)", "testcase": false, "constructor": false}, {"identifier": "karateLocator", "parameters": "(String karateRef)", "modifiers": "public static", "return": "String", "signature": "String karateLocator(String karateRef)", "full_signature": "public static String karateLocator(String karateRef)", "class_method_signature": "DriverOptions.karateLocator(String karateRef)", "testcase": false, "constructor": false}, {"identifier": "focusJs", "parameters": "(String locator)", "modifiers": "public", "return": "String", "signature": "String focusJs(String locator)", "full_signature": "public String focusJs(String locator)", "class_method_signature": "DriverOptions.focusJs(String locator)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Driver driver, String locator)", "modifiers": "public", "return": "List<Element>", "signature": "List<Element> findAll(Driver driver, String locator)", "full_signature": "public List<Element> findAll(Driver driver, String locator)", "class_method_signature": "DriverOptions.findAll(Driver driver, String locator)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/driver/DriverOptions.java"}, "focal_method": {"identifier": "retry", "parameters": "(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "modifiers": "public", "return": "T", "body": "public <T> T retry(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException) {\n        long startTime = System.currentTimeMillis();\n        int count = 0, max = getRetryCount();\n        T result;\n        boolean success;\n        do {\n            if (count > 0) {\n                logger.debug(\"{} - retry #{}\", logDescription, count);\n                sleep();\n            }\n            result = action.get();\n            success = condition.test(result);\n        } while (!success && count++ < max);\n        if (!success) {\n            long elapsedTime = System.currentTimeMillis() - startTime;\n            String message = logDescription + \": failed after \" + (count - 1) + \" retries and \" + elapsedTime + \" milliseconds\";\n            logger.warn(message);\n            if (failWithException) {\n                throw new RuntimeException(message);\n            }\n        }\n        return result;\n    }", "signature": "T retry(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "full_signature": "public T retry(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "class_method_signature": "DriverOptions.retry(Supplier<T> action, Predicate<T> condition, String logDescription, boolean failWithException)", "testcase": false, "constructor": false, "invocations": ["currentTimeMillis", "getRetryCount", "debug", "sleep", "get", "test", "currentTimeMillis", "warn"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}