{"test_class": {"identifier": "SwingTextboxTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Document doc = null;", "modifier": "", "type": "Document", "declarator": "doc = null", "var_name": "doc"}, {"original_string": "XulDomContainer container;", "modifier": "", "type": "XulDomContainer", "declarator": "container", "var_name": "container"}], "file": "swing/src/test/java/org/pentaho/ui/xul/swing/tags/SwingTextboxTest.java"}, "test_case": {"identifier": "getValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getValue() throws Exception {\n\n    XulTextbox txt = (XulTextbox) doc.getElementById( \"textbox1\" );\n    assertEquals( \"default\", txt.getValue() );\n\n  }", "signature": "void getValue()", "full_signature": "@Test public void getValue()", "class_method_signature": "SwingTextboxTest.getValue()", "testcase": true, "constructor": false, "invocations": ["getElementById", "assertEquals", "getValue"]}, "focal_class": {"identifier": "SwingTextbox", "superclass": "extends SwingElement", "interfaces": "implements XulTextbox", "fields": [{"original_string": "private JTextField textField;", "modifier": "private", "type": "JTextField", "declarator": "textField", "var_name": "textField"}, {"original_string": "private boolean multiline = false;", "modifier": "private", "type": "boolean", "declarator": "multiline = false", "var_name": "multiline"}, {"original_string": "private JTextArea textArea;", "modifier": "private", "type": "JTextArea", "declarator": "textArea", "var_name": "textArea"}, {"original_string": "boolean disabled = false;", "modifier": "", "type": "boolean", "declarator": "disabled = false", "var_name": "disabled"}, {"original_string": "private String value = \"\";", "modifier": "private", "type": "String", "declarator": "value = \"\"", "var_name": "value"}, {"original_string": "private JScrollPane scrollPane;", "modifier": "private", "type": "JScrollPane", "declarator": "scrollPane", "var_name": "scrollPane"}, {"original_string": "private static final Log logger = LogFactory.getLog( SwingTextbox.class );", "modifier": "private static final", "type": "Log", "declarator": "logger = LogFactory.getLog( SwingTextbox.class )", "var_name": "logger"}, {"original_string": "private boolean readonly = false;", "modifier": "private", "type": "boolean", "declarator": "readonly = false", "var_name": "readonly"}, {"original_string": "private TextType type = TextType.NORMAL;", "modifier": "private", "type": "TextType", "declarator": "type = TextType.NORMAL", "var_name": "type"}, {"original_string": "private JTextComponent textComp = null;", "modifier": "private", "type": "JTextComponent", "declarator": "textComp = null", "var_name": "textComp"}, {"original_string": "private String onInput;", "modifier": "private", "type": "String", "declarator": "onInput", "var_name": "onInput"}, {"original_string": "private int min = -1;", "modifier": "private", "type": "int", "declarator": "min = -1", "var_name": "min"}, {"original_string": "private int max = -1;", "modifier": "private", "type": "int", "declarator": "max = -1", "var_name": "max"}, {"original_string": "private int maxlength = -1;", "modifier": "private", "type": "int", "declarator": "maxlength = -1", "var_name": "maxlength"}, {"original_string": "private String oldValue = null;", "modifier": "private", "type": "String", "declarator": "oldValue = null", "var_name": "oldValue"}], "methods": [{"identifier": "SwingTextbox", "parameters": "( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "modifiers": "public", "return": "", "signature": " SwingTextbox( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "full_signature": "public  SwingTextbox( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "class_method_signature": "SwingTextbox.SwingTextbox( Element self, XulComponent parent, XulDomContainer domContainer, String tagName )", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "SwingTextbox.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "( String text )", "modifiers": "public", "return": "void", "signature": "void setValue( String text )", "full_signature": "public void setValue( String text )", "class_method_signature": "SwingTextbox.setValue( String text )", "testcase": false, "constructor": false}, {"identifier": "layout", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void layout()", "full_signature": "@Override public void layout()", "class_method_signature": "SwingTextbox.layout()", "testcase": false, "constructor": false}, {"identifier": "getMaxlength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxlength()", "full_signature": "public int getMaxlength()", "class_method_signature": "SwingTextbox.getMaxlength()", "testcase": false, "constructor": false}, {"identifier": "isDisabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDisabled()", "full_signature": "public boolean isDisabled()", "class_method_signature": "SwingTextbox.isDisabled()", "testcase": false, "constructor": false}, {"identifier": "setDisabled", "parameters": "( boolean dis )", "modifiers": "public", "return": "void", "signature": "void setDisabled( boolean dis )", "full_signature": "public void setDisabled( boolean dis )", "class_method_signature": "SwingTextbox.setDisabled( boolean dis )", "testcase": false, "constructor": false}, {"identifier": "setMaxlength", "parameters": "( int length )", "modifiers": "public", "return": "void", "signature": "void setMaxlength( int length )", "full_signature": "public void setMaxlength( int length )", "class_method_signature": "SwingTextbox.setMaxlength( int length )", "testcase": false, "constructor": false}, {"identifier": "isMultiline", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMultiline()", "full_signature": "public boolean isMultiline()", "class_method_signature": "SwingTextbox.isMultiline()", "testcase": false, "constructor": false}, {"identifier": "setMultiline", "parameters": "( boolean multi )", "modifiers": "public", "return": "void", "signature": "void setMultiline( boolean multi )", "full_signature": "public void setMultiline( boolean multi )", "class_method_signature": "SwingTextbox.setMultiline( boolean multi )", "testcase": false, "constructor": false}, {"identifier": "isReadonly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReadonly()", "full_signature": "public boolean isReadonly()", "class_method_signature": "SwingTextbox.isReadonly()", "testcase": false, "constructor": false}, {"identifier": "setReadonly", "parameters": "( boolean readOnly )", "modifiers": "public", "return": "void", "signature": "void setReadonly( boolean readOnly )", "full_signature": "public void setReadonly( boolean readOnly )", "class_method_signature": "SwingTextbox.setReadonly( boolean readOnly )", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getType()", "full_signature": "public String getType()", "class_method_signature": "SwingTextbox.getType()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "( String type )", "modifiers": "public", "return": "void", "signature": "void setType( String type )", "full_signature": "public void setType( String type )", "class_method_signature": "SwingTextbox.setType( String type )", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "( TextType type )", "modifiers": "public", "return": "void", "signature": "void setType( TextType type )", "full_signature": "public void setType( TextType type )", "class_method_signature": "SwingTextbox.setType( TextType type )", "testcase": false, "constructor": false}, {"identifier": "selectAll", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void selectAll()", "full_signature": "public void selectAll()", "class_method_signature": "SwingTextbox.selectAll()", "testcase": false, "constructor": false}, {"identifier": "setFocus", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setFocus()", "full_signature": "public void setFocus()", "class_method_signature": "SwingTextbox.setFocus()", "testcase": false, "constructor": false}, {"identifier": "getTextControl", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getTextControl()", "full_signature": "public Object getTextControl()", "class_method_signature": "SwingTextbox.getTextControl()", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getWidth()", "full_signature": "@Override public int getWidth()", "class_method_signature": "SwingTextbox.getWidth()", "testcase": false, "constructor": false}, {"identifier": "setWidth", "parameters": "( int width )", "modifiers": "@Override public", "return": "void", "signature": "void setWidth( int width )", "full_signature": "@Override public void setWidth( int width )", "class_method_signature": "SwingTextbox.setWidth( int width )", "testcase": false, "constructor": false}, {"identifier": "getManagedObject", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getManagedObject()", "full_signature": "@Override public Object getManagedObject()", "class_method_signature": "SwingTextbox.getManagedObject()", "testcase": false, "constructor": false}, {"identifier": "setOninput", "parameters": "( final String method )", "modifiers": "public", "return": "void", "signature": "void setOninput( final String method )", "full_signature": "public void setOninput( final String method )", "class_method_signature": "SwingTextbox.setOninput( final String method )", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMin()", "full_signature": "public String getMin()", "class_method_signature": "SwingTextbox.getMin()", "testcase": false, "constructor": false}, {"identifier": "setMin", "parameters": "( String min )", "modifiers": "public", "return": "void", "signature": "void setMin( String min )", "full_signature": "public void setMin( String min )", "class_method_signature": "SwingTextbox.setMin( String min )", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMax()", "full_signature": "public String getMax()", "class_method_signature": "SwingTextbox.getMax()", "testcase": false, "constructor": false}, {"identifier": "setMax", "parameters": "( String max )", "modifiers": "public", "return": "void", "signature": "void setMax( String max )", "full_signature": "public void setMax( String max )", "class_method_signature": "SwingTextbox.setMax( String max )", "testcase": false, "constructor": false}, {"identifier": "setCommand", "parameters": "( String command )", "modifiers": "public", "return": "void", "signature": "void setCommand( String command )", "full_signature": "public void setCommand( String command )", "class_method_signature": "SwingTextbox.setCommand( String command )", "testcase": false, "constructor": false}], "file": "swing/src/main/java/org/pentaho/ui/xul/swing/tags/SwingTextbox.java"}, "focal_method": {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getValue() {\n    if ( textComp != null ) {\n      return textComp.getText();\n    } else {\n      logger.error( \"Attempt to get Textbox's value before it's instantiated\" );\n      return null;\n    }\n  }", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "SwingTextbox.getValue()", "testcase": false, "constructor": false, "invocations": ["getText", "error"]}, "repository": {"repo_id": 4597349, "url": "https://github.com/pentaho/pentaho-commons-xul", "language": "Java", "is_fork": false, "fork_count": 108, "stargazer_count": 5, "size": 24225, "license": "licensed"}}