{"test_class": {"identifier": "VarFromValTest", "superclass": "", "interfaces": "", "fields": [], "file": "reactfx/src/test/java/org/reactfx/value/VarFromValTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        IntegerProperty src = new SimpleIntegerProperty(0);\n        IntegerBinding twice = src.multiply(2);\n        Var<Number> twiceVar = Var.fromVal(twice, n -> src.set(n.intValue() / 2));\n\n        List<Number> values = new ArrayList<>();\n        EventStreams.valuesOf(twiceVar).subscribe(values::add);\n\n        src.set(1);\n        twiceVar.setValue(4);\n        twiceVar.setValue(5); // no effect\n        twiceVar.setValue(7); // will become 6\n\n        assertEquals(Arrays.asList(0, 2, 4, 6), values);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "VarFromValTest.test()", "testcase": true, "constructor": false, "invocations": ["multiply", "fromVal", "set", "intValue", "subscribe", "valuesOf", "set", "setValue", "setValue", "setValue", "assertEquals", "asList"]}, "focal_class": {"identifier": "VarFromVal", "superclass": "extends ProxyVal<T, T>", "interfaces": "implements Var<T>", "fields": [{"original_string": "private final Consumer<T> setter;", "modifier": "private final", "type": "Consumer<T>", "declarator": "setter", "var_name": "setter"}, {"original_string": "private Subscription binding = null;", "modifier": "private", "type": "Subscription", "declarator": "binding = null", "var_name": "binding"}], "methods": [{"identifier": "VarFromVal", "parameters": "(Val<T> underlying, Consumer<T> setter)", "modifiers": "", "return": "", "signature": " VarFromVal(Val<T> underlying, Consumer<T> setter)", "full_signature": "  VarFromVal(Val<T> underlying, Consumer<T> setter)", "class_method_signature": "VarFromVal.VarFromVal(Val<T> underlying, Consumer<T> setter)", "testcase": false, "constructor": true}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T getValue()", "full_signature": "@Override public T getValue()", "class_method_signature": "VarFromVal.getValue()", "testcase": false, "constructor": false}, {"identifier": "adaptObserver", "parameters": "(Consumer<? super T> observer)", "modifiers": "@Override protected", "return": "Consumer<? super T>", "signature": "Consumer<? super T> adaptObserver(Consumer<? super T> observer)", "full_signature": "@Override protected Consumer<? super T> adaptObserver(Consumer<? super T> observer)", "class_method_signature": "VarFromVal.adaptObserver(Consumer<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(ObservableValue<? extends T> observable)", "modifiers": "@Override public", "return": "void", "signature": "void bind(ObservableValue<? extends T> observable)", "full_signature": "@Override public void bind(ObservableValue<? extends T> observable)", "class_method_signature": "VarFromVal.bind(ObservableValue<? extends T> observable)", "testcase": false, "constructor": false}, {"identifier": "unbind", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unbind()", "full_signature": "@Override public void unbind()", "class_method_signature": "VarFromVal.unbind()", "testcase": false, "constructor": false}, {"identifier": "isBound", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBound()", "full_signature": "@Override public boolean isBound()", "class_method_signature": "VarFromVal.isBound()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(T value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(T value)", "full_signature": "@Override public void setValue(T value)", "class_method_signature": "VarFromVal.setValue(T value)", "testcase": false, "constructor": false}], "file": "reactfx/src/main/java/org/reactfx/value/VarFromVal.java"}, "focal_method": {"identifier": "setValue", "parameters": "(T value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setValue(T value) {\n        setter.accept(value);\n    }", "signature": "void setValue(T value)", "full_signature": "@Override public void setValue(T value)", "class_method_signature": "VarFromVal.setValue(T value)", "testcase": false, "constructor": false, "invocations": ["accept"]}, "repository": {"repo_id": 15197084, "url": "https://github.com/TomasMikula/ReactFX", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 326, "size": 891, "license": "licensed"}}