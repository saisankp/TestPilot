{"test_class": {"identifier": "BinaryAbstractOutputStreamTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [], "file": "modules/core/src/test/java/org/apache/ignite/internal/binary/streams/BinaryAbstractOutputStreamTest.java"}, "test_case": {"identifier": "testCapacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCapacity() {\n        assertEquals(256, BinaryAbstractOutputStream.capacity(0, 1));\n\n        assertEquals(256, BinaryAbstractOutputStream.capacity(256, 1));\n\n        assertEquals(256, BinaryAbstractOutputStream.capacity(256, 256));\n\n        assertEquals(512, BinaryAbstractOutputStream.capacity(256, 257));\n\n        assertEquals(512, BinaryAbstractOutputStream.capacity(512, 256));\n\n        assertEquals(1024, BinaryAbstractOutputStream.capacity(512, 513));\n\n        assertEquals(2048, BinaryAbstractOutputStream.capacity(1024, 1025));\n\n        assertEquals(4096, BinaryAbstractOutputStream.capacity(2048, 2049));\n\n        assertEquals(8192, BinaryAbstractOutputStream.capacity(4096, 4097));\n\n        assertEquals(16384, BinaryAbstractOutputStream.capacity(8192, 8193));\n\n        assertEquals(32768, BinaryAbstractOutputStream.capacity(16384, 16385));\n\n        assertEquals(65536, BinaryAbstractOutputStream.capacity(32768, 32769));\n\n        assertEquals(131072, BinaryAbstractOutputStream.capacity(65536, 65537));\n\n        assertEquals(262144, BinaryAbstractOutputStream.capacity(131072, 131073));\n\n        assertEquals(524288, BinaryAbstractOutputStream.capacity(262144, 262145));\n\n        assertEquals(1048576, BinaryAbstractOutputStream.capacity(524288, 524289));\n\n        assertEquals(2097152, BinaryAbstractOutputStream.capacity(1048576, 1048577));\n\n        assertEquals(4194304, BinaryAbstractOutputStream.capacity(2097152, 2097153));\n\n        assertEquals(8388608, BinaryAbstractOutputStream.capacity(4194304, 4194305));\n\n        assertEquals(16777216, BinaryAbstractOutputStream.capacity(8388608, 8388609));\n\n        assertEquals(33554432, BinaryAbstractOutputStream.capacity(16777216, 16777217));\n\n        assertEquals(67108864, BinaryAbstractOutputStream.capacity(33554432, 33554433));\n\n        assertEquals(134217728, BinaryAbstractOutputStream.capacity(67108864, 67108865));\n\n        assertEquals(268435456, BinaryAbstractOutputStream.capacity(134217728, 134217729));\n\n        assertEquals(536870912, BinaryAbstractOutputStream.capacity(268435456, 268435457));\n\n        assertEquals(1073741824, BinaryAbstractOutputStream.capacity(536870912, 536870913));\n\n        final int MAX_SIZE = BinaryAbstractOutputStream.MAX_ARRAY_SIZE;\n\n        assertEquals(MAX_SIZE, BinaryAbstractOutputStream.capacity(1073741824, 1073741825));\n\n        assertEquals(MAX_SIZE, BinaryAbstractOutputStream.capacity(0, 1073741825));\n\n        assertEquals(MAX_SIZE, BinaryAbstractOutputStream.capacity(1073741824, 1500000000));\n\n        assertEquals(MAX_SIZE, BinaryAbstractOutputStream.capacity(1073741824, 2000000000));\n\n        assertEquals(MAX_SIZE, BinaryAbstractOutputStream.capacity(1073741824, Integer.MAX_VALUE - 9));\n\n        assertEquals(MAX_SIZE, BinaryAbstractOutputStream.capacity(1073741824, Integer.MAX_VALUE - 8));\n\n        try {\n            assertEquals(MAX_SIZE, BinaryAbstractOutputStream.capacity(0, Integer.MAX_VALUE - 7));\n\n            fail();\n        }\n        catch (IllegalArgumentException ignored) {\n            // Expected exception.\n        }\n    }", "signature": "void testCapacity()", "full_signature": "@Test public void testCapacity()", "class_method_signature": "BinaryAbstractOutputStreamTest.testCapacity()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "assertEquals", "capacity", "fail"]}, "focal_class": {"identifier": "BinaryAbstractOutputStream", "superclass": "extends BinaryAbstractStream", "interfaces": "implements BinaryOutputStream", "fields": [{"original_string": "private static final int MIN_CAP = 256;", "modifier": "private static final", "type": "int", "declarator": "MIN_CAP = 256", "var_name": "MIN_CAP"}, {"original_string": "protected static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;", "modifier": "protected static final", "type": "int", "declarator": "MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8", "var_name": "MAX_ARRAY_SIZE"}], "methods": [{"identifier": "writeByte", "parameters": "(byte val)", "modifiers": "@Override public", "return": "void", "signature": "void writeByte(byte val)", "full_signature": "@Override public void writeByte(byte val)", "class_method_signature": "BinaryAbstractOutputStream.writeByte(byte val)", "testcase": false, "constructor": false}, {"identifier": "writeByteArray", "parameters": "(byte[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeByteArray(byte[] val)", "full_signature": "@Override public void writeByteArray(byte[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeByteArray(byte[] val)", "testcase": false, "constructor": false}, {"identifier": "writeBoolean", "parameters": "(boolean val)", "modifiers": "@Override public", "return": "void", "signature": "void writeBoolean(boolean val)", "full_signature": "@Override public void writeBoolean(boolean val)", "class_method_signature": "BinaryAbstractOutputStream.writeBoolean(boolean val)", "testcase": false, "constructor": false}, {"identifier": "writeBooleanArray", "parameters": "(boolean[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeBooleanArray(boolean[] val)", "full_signature": "@Override public void writeBooleanArray(boolean[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeBooleanArray(boolean[] val)", "testcase": false, "constructor": false}, {"identifier": "writeShort", "parameters": "(short val)", "modifiers": "@Override public", "return": "void", "signature": "void writeShort(short val)", "full_signature": "@Override public void writeShort(short val)", "class_method_signature": "BinaryAbstractOutputStream.writeShort(short val)", "testcase": false, "constructor": false}, {"identifier": "writeShortArray", "parameters": "(short[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeShortArray(short[] val)", "full_signature": "@Override public void writeShortArray(short[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeShortArray(short[] val)", "testcase": false, "constructor": false}, {"identifier": "writeChar", "parameters": "(char val)", "modifiers": "@Override public", "return": "void", "signature": "void writeChar(char val)", "full_signature": "@Override public void writeChar(char val)", "class_method_signature": "BinaryAbstractOutputStream.writeChar(char val)", "testcase": false, "constructor": false}, {"identifier": "writeCharArray", "parameters": "(char[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeCharArray(char[] val)", "full_signature": "@Override public void writeCharArray(char[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeCharArray(char[] val)", "testcase": false, "constructor": false}, {"identifier": "writeInt", "parameters": "(int val)", "modifiers": "@Override public", "return": "void", "signature": "void writeInt(int val)", "full_signature": "@Override public void writeInt(int val)", "class_method_signature": "BinaryAbstractOutputStream.writeInt(int val)", "testcase": false, "constructor": false}, {"identifier": "writeShort", "parameters": "(int pos, short val)", "modifiers": "@Override public", "return": "void", "signature": "void writeShort(int pos, short val)", "full_signature": "@Override public void writeShort(int pos, short val)", "class_method_signature": "BinaryAbstractOutputStream.writeShort(int pos, short val)", "testcase": false, "constructor": false}, {"identifier": "writeInt", "parameters": "(int pos, int val)", "modifiers": "@Override public", "return": "void", "signature": "void writeInt(int pos, int val)", "full_signature": "@Override public void writeInt(int pos, int val)", "class_method_signature": "BinaryAbstractOutputStream.writeInt(int pos, int val)", "testcase": false, "constructor": false}, {"identifier": "writeIntArray", "parameters": "(int[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeIntArray(int[] val)", "full_signature": "@Override public void writeIntArray(int[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeIntArray(int[] val)", "testcase": false, "constructor": false}, {"identifier": "writeFloat", "parameters": "(float val)", "modifiers": "@Override public", "return": "void", "signature": "void writeFloat(float val)", "full_signature": "@Override public void writeFloat(float val)", "class_method_signature": "BinaryAbstractOutputStream.writeFloat(float val)", "testcase": false, "constructor": false}, {"identifier": "writeFloatArray", "parameters": "(float[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeFloatArray(float[] val)", "full_signature": "@Override public void writeFloatArray(float[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeFloatArray(float[] val)", "testcase": false, "constructor": false}, {"identifier": "writeLong", "parameters": "(long val)", "modifiers": "@Override public", "return": "void", "signature": "void writeLong(long val)", "full_signature": "@Override public void writeLong(long val)", "class_method_signature": "BinaryAbstractOutputStream.writeLong(long val)", "testcase": false, "constructor": false}, {"identifier": "writeLongArray", "parameters": "(long[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeLongArray(long[] val)", "full_signature": "@Override public void writeLongArray(long[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeLongArray(long[] val)", "testcase": false, "constructor": false}, {"identifier": "writeDouble", "parameters": "(double val)", "modifiers": "@Override public", "return": "void", "signature": "void writeDouble(double val)", "full_signature": "@Override public void writeDouble(double val)", "class_method_signature": "BinaryAbstractOutputStream.writeDouble(double val)", "testcase": false, "constructor": false}, {"identifier": "writeDoubleArray", "parameters": "(double[] val)", "modifiers": "@Override public", "return": "void", "signature": "void writeDoubleArray(double[] val)", "full_signature": "@Override public void writeDoubleArray(double[] val)", "class_method_signature": "BinaryAbstractOutputStream.writeDoubleArray(double[] val)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(byte[] arr, int off, int len)", "modifiers": "@Override public", "return": "void", "signature": "void write(byte[] arr, int off, int len)", "full_signature": "@Override public void write(byte[] arr, int off, int len)", "class_method_signature": "BinaryAbstractOutputStream.write(byte[] arr, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(long addr, int cnt)", "modifiers": "@Override public", "return": "void", "signature": "void write(long addr, int cnt)", "full_signature": "@Override public void write(long addr, int cnt)", "class_method_signature": "BinaryAbstractOutputStream.write(long addr, int cnt)", "testcase": false, "constructor": false}, {"identifier": "position", "parameters": "(int pos)", "modifiers": "@Override public", "return": "void", "signature": "void position(int pos)", "full_signature": "@Override public void position(int pos)", "class_method_signature": "BinaryAbstractOutputStream.position(int pos)", "testcase": false, "constructor": false}, {"identifier": "offheapPointer", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long offheapPointer()", "full_signature": "@Override public long offheapPointer()", "class_method_signature": "BinaryAbstractOutputStream.offheapPointer()", "testcase": false, "constructor": false}, {"identifier": "rawOffheapPointer", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long rawOffheapPointer()", "full_signature": "@Override public long rawOffheapPointer()", "class_method_signature": "BinaryAbstractOutputStream.rawOffheapPointer()", "testcase": false, "constructor": false}, {"identifier": "unsafeEnsure", "parameters": "(int cap)", "modifiers": "@Override public", "return": "void", "signature": "void unsafeEnsure(int cap)", "full_signature": "@Override public void unsafeEnsure(int cap)", "class_method_signature": "BinaryAbstractOutputStream.unsafeEnsure(int cap)", "testcase": false, "constructor": false}, {"identifier": "unsafePosition", "parameters": "(int pos)", "modifiers": "@Override public", "return": "void", "signature": "void unsafePosition(int pos)", "full_signature": "@Override public void unsafePosition(int pos)", "class_method_signature": "BinaryAbstractOutputStream.unsafePosition(int pos)", "testcase": false, "constructor": false}, {"identifier": "unsafeWriteBoolean", "parameters": "(boolean val)", "modifiers": "@Override public", "return": "void", "signature": "void unsafeWriteBoolean(boolean val)", "full_signature": "@Override public void unsafeWriteBoolean(boolean val)", "class_method_signature": "BinaryAbstractOutputStream.unsafeWriteBoolean(boolean val)", "testcase": false, "constructor": false}, {"identifier": "unsafeWriteFloat", "parameters": "(float val)", "modifiers": "@Override public", "return": "void", "signature": "void unsafeWriteFloat(float val)", "full_signature": "@Override public void unsafeWriteFloat(float val)", "class_method_signature": "BinaryAbstractOutputStream.unsafeWriteFloat(float val)", "testcase": false, "constructor": false}, {"identifier": "unsafeWriteDouble", "parameters": "(double val)", "modifiers": "@Override public", "return": "void", "signature": "void unsafeWriteDouble(double val)", "full_signature": "@Override public void unsafeWriteDouble(double val)", "class_method_signature": "BinaryAbstractOutputStream.unsafeWriteDouble(double val)", "testcase": false, "constructor": false}, {"identifier": "capacity", "parameters": "(int curCap, int reqCap)", "modifiers": "protected static", "return": "int", "signature": "int capacity(int curCap, int reqCap)", "full_signature": "protected static int capacity(int curCap, int reqCap)", "class_method_signature": "BinaryAbstractOutputStream.capacity(int curCap, int reqCap)", "testcase": false, "constructor": false}, {"identifier": "writeByteAndShift", "parameters": "(byte val)", "modifiers": "protected abstract", "return": "void", "signature": "void writeByteAndShift(byte val)", "full_signature": "protected abstract void writeByteAndShift(byte val)", "class_method_signature": "BinaryAbstractOutputStream.writeByteAndShift(byte val)", "testcase": false, "constructor": false}, {"identifier": "copyAndShift", "parameters": "(Object src, long off, int len)", "modifiers": "protected abstract", "return": "void", "signature": "void copyAndShift(Object src, long off, int len)", "full_signature": "protected abstract void copyAndShift(Object src, long off, int len)", "class_method_signature": "BinaryAbstractOutputStream.copyAndShift(Object src, long off, int len)", "testcase": false, "constructor": false}, {"identifier": "writeShortFast", "parameters": "(short val)", "modifiers": "protected abstract", "return": "void", "signature": "void writeShortFast(short val)", "full_signature": "protected abstract void writeShortFast(short val)", "class_method_signature": "BinaryAbstractOutputStream.writeShortFast(short val)", "testcase": false, "constructor": false}, {"identifier": "writeCharFast", "parameters": "(char val)", "modifiers": "protected abstract", "return": "void", "signature": "void writeCharFast(char val)", "full_signature": "protected abstract void writeCharFast(char val)", "class_method_signature": "BinaryAbstractOutputStream.writeCharFast(char val)", "testcase": false, "constructor": false}, {"identifier": "writeIntFast", "parameters": "(int val)", "modifiers": "protected abstract", "return": "void", "signature": "void writeIntFast(int val)", "full_signature": "protected abstract void writeIntFast(int val)", "class_method_signature": "BinaryAbstractOutputStream.writeIntFast(int val)", "testcase": false, "constructor": false}, {"identifier": "writeLongFast", "parameters": "(long val)", "modifiers": "protected abstract", "return": "void", "signature": "void writeLongFast(long val)", "full_signature": "protected abstract void writeLongFast(long val)", "class_method_signature": "BinaryAbstractOutputStream.writeLongFast(long val)", "testcase": false, "constructor": false}, {"identifier": "ensureCapacity", "parameters": "(int cnt)", "modifiers": "protected abstract", "return": "void", "signature": "void ensureCapacity(int cnt)", "full_signature": "protected abstract void ensureCapacity(int cnt)", "class_method_signature": "BinaryAbstractOutputStream.ensureCapacity(int cnt)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/binary/streams/BinaryAbstractOutputStream.java"}, "focal_method": {"identifier": "capacity", "parameters": "(int curCap, int reqCap)", "modifiers": "protected static", "return": "int", "body": "protected static int capacity(int curCap, int reqCap) {\n        int newCap;\n\n        if (reqCap < MIN_CAP)\n            newCap = MIN_CAP;\n        else if (reqCap > MAX_ARRAY_SIZE)\n            throw new IllegalArgumentException(\"Required capacity exceeds allowed. Required:\" + reqCap);\n        else {\n            newCap = Math.max(curCap, MIN_CAP);\n\n            while (newCap < reqCap) {\n                newCap = newCap << 1;\n\n                if (newCap < 0)\n                    newCap = MAX_ARRAY_SIZE;\n            }\n        }\n\n        return newCap;\n    }", "signature": "int capacity(int curCap, int reqCap)", "full_signature": "protected static int capacity(int curCap, int reqCap)", "class_method_signature": "BinaryAbstractOutputStream.capacity(int curCap, int reqCap)", "testcase": false, "constructor": false, "invocations": ["max"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}