{"test_class": {"identifier": "KDTreeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KDTreeTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KDTreeTest.class)", "var_name": "log"}, {"original_string": "private DataIngester loader;", "modifier": "private", "type": "DataIngester", "declarator": "loader", "var_name": "loader"}, {"original_string": "private List<Datum> data;", "modifier": "private", "type": "List<Datum>", "declarator": "data", "var_name": "data"}], "file": "contrib/src/test/java/macrobase/analysis/index/KDTreeTest.java"}, "test_case": {"identifier": "testIsOutsideBoundaries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsOutsideBoundaries() throws Exception {\n        this.setUpVerySimpleCsv();\n        KDTree node = new KDTree(data, 2);\n\n        double[] metrics = {-1, -1, -1};\n        Datum newdatum = new Datum(data.get(0), new ArrayRealVector(metrics));\n        assertFalse(node.isInsideBoundaries(newdatum));\n    }", "signature": "void testIsOutsideBoundaries()", "full_signature": "@Test public void testIsOutsideBoundaries()", "class_method_signature": "KDTreeTest.testIsOutsideBoundaries()", "testcase": true, "constructor": false, "invocations": ["setUpVerySimpleCsv", "get", "assertFalse", "isInsideBoundaries"]}, "focal_class": {"identifier": "KDTree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int leafCapacity;", "modifier": "private", "type": "int", "declarator": "leafCapacity", "var_name": "leafCapacity"}, {"original_string": "protected KDTree loChild;", "modifier": "protected", "type": "KDTree", "declarator": "loChild", "var_name": "loChild"}, {"original_string": "protected KDTree hiChild;", "modifier": "protected", "type": "KDTree", "declarator": "hiChild", "var_name": "hiChild"}, {"original_string": "protected int k;", "modifier": "protected", "type": "int", "declarator": "k", "var_name": "k"}, {"original_string": "protected List<Datum> items;", "modifier": "protected", "type": "List<Datum>", "declarator": "items", "var_name": "items"}, {"original_string": "protected int nBelow;", "modifier": "protected", "type": "int", "declarator": "nBelow", "var_name": "nBelow"}, {"original_string": "protected RealVector mean;", "modifier": "protected", "type": "RealVector", "declarator": "mean", "var_name": "mean"}, {"original_string": "private int splitDimension;", "modifier": "private", "type": "int", "declarator": "splitDimension", "var_name": "splitDimension"}, {"original_string": "private double splitValue;", "modifier": "private", "type": "double", "declarator": "splitValue", "var_name": "splitValue"}, {"original_string": "private double[][] boundaries;", "modifier": "private", "type": "double[][]", "declarator": "boundaries", "var_name": "boundaries"}], "methods": [{"identifier": "KDTree", "parameters": "(List<Datum> data, int leafCapacity)", "modifiers": "public", "return": "", "signature": " KDTree(List<Datum> data, int leafCapacity)", "full_signature": "public  KDTree(List<Datum> data, int leafCapacity)", "class_method_signature": "KDTree.KDTree(List<Datum> data, int leafCapacity)", "testcase": false, "constructor": true}, {"identifier": "getMinMaxDistanceVectors", "parameters": "(Datum queryDatum)", "modifiers": "public", "return": "RealVector[]", "signature": "RealVector[] getMinMaxDistanceVectors(Datum queryDatum)", "full_signature": "public RealVector[] getMinMaxDistanceVectors(Datum queryDatum)", "class_method_signature": "KDTree.getMinMaxDistanceVectors(Datum queryDatum)", "testcase": false, "constructor": false}, {"identifier": "estimateL2DistanceSquared", "parameters": "(Datum queryDatum)", "modifiers": "public", "return": "double[]", "signature": "double[] estimateL2DistanceSquared(Datum queryDatum)", "full_signature": "public double[] estimateL2DistanceSquared(Datum queryDatum)", "class_method_signature": "KDTree.estimateL2DistanceSquared(Datum queryDatum)", "testcase": false, "constructor": false}, {"identifier": "isInsideBoundaries", "parameters": "(Datum queryDatum)", "modifiers": "public", "return": "boolean", "signature": "boolean isInsideBoundaries(Datum queryDatum)", "full_signature": "public boolean isInsideBoundaries(Datum queryDatum)", "class_method_signature": "KDTree.isInsideBoundaries(Datum queryDatum)", "testcase": false, "constructor": false}, {"identifier": "getItems", "parameters": "()", "modifiers": "public", "return": "List<Datum>", "signature": "List<Datum> getItems()", "full_signature": "public List<Datum> getItems()", "class_method_signature": "KDTree.getItems()", "testcase": false, "constructor": false}, {"identifier": "getMean", "parameters": "()", "modifiers": "public", "return": "RealVector", "signature": "RealVector getMean()", "full_signature": "public RealVector getMean()", "class_method_signature": "KDTree.getMean()", "testcase": false, "constructor": false}, {"identifier": "getBoundaries", "parameters": "()", "modifiers": "public", "return": "double[][]", "signature": "double[][] getBoundaries()", "full_signature": "public double[][] getBoundaries()", "class_method_signature": "KDTree.getBoundaries()", "testcase": false, "constructor": false}, {"identifier": "getLoChild", "parameters": "()", "modifiers": "public", "return": "KDTree", "signature": "KDTree getLoChild()", "full_signature": "public KDTree getLoChild()", "class_method_signature": "KDTree.getLoChild()", "testcase": false, "constructor": false}, {"identifier": "getHiChild", "parameters": "()", "modifiers": "public", "return": "KDTree", "signature": "KDTree getHiChild()", "full_signature": "public KDTree getHiChild()", "class_method_signature": "KDTree.getHiChild()", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "public boolean isLeaf()", "class_method_signature": "KDTree.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "getnBelow", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getnBelow()", "full_signature": "public int getnBelow()", "class_method_signature": "KDTree.getnBelow()", "testcase": false, "constructor": false}, {"identifier": "getSplitDimension", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSplitDimension()", "full_signature": "public int getSplitDimension()", "class_method_signature": "KDTree.getSplitDimension()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(int indent)", "modifiers": "public", "return": "String", "signature": "String toString(int indent)", "full_signature": "public String toString(int indent)", "class_method_signature": "KDTree.toString(int indent)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "KDTree.toString()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/index/KDTree.java"}, "focal_method": {"identifier": "isInsideBoundaries", "parameters": "(Datum queryDatum)", "modifiers": "public", "return": "boolean", "body": "public boolean isInsideBoundaries(Datum queryDatum) {\n        RealVector vector = queryDatum.metrics();\n        for (int i=0; i<k; i++) {\n            if (vector.getEntry(i) < this.boundaries[i][0] || vector.getEntry(i) > this.boundaries[i][1]) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean isInsideBoundaries(Datum queryDatum)", "full_signature": "public boolean isInsideBoundaries(Datum queryDatum)", "class_method_signature": "KDTree.isInsideBoundaries(Datum queryDatum)", "testcase": false, "constructor": false, "invocations": ["metrics", "getEntry", "getEntry"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}