{"test_class": {"identifier": "PatternSuggesterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private HistoryObserver history;", "modifier": "private", "type": "HistoryObserver", "declarator": "history", "var_name": "history"}, {"original_string": "private PatternSuggester patterns;", "modifier": "private", "type": "PatternSuggester", "declarator": "patterns", "var_name": "patterns"}], "file": "src/edu/lclark/orego/feature/PatternSuggesterTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tString[] diagram = {\n\t\t\t\t\"O....\",\n\t\t\t\t\".....\",\n\t\t\t\t\"O....\",\n\t\t\t\t\".....\",\n\t\t\t\t\".....\",\n\t\t};\n\t\tboard.setUpProblem(diagram, BLACK);\n\t\tboard.play(\"b4\");\n\t\tassertTrue(patterns.getMoves().contains(board.getCoordinateSystem().at(\"a4\")));\n\t\tboard.play(\"c3\");\n\t\tboard.play(\"c1\");\n\t\tassertFalse(patterns.getMoves().contains(board.getCoordinateSystem().at(\"b2\")));\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "PatternSuggesterTest.test()", "testcase": true, "constructor": false, "invocations": ["setUpProblem", "play", "assertTrue", "contains", "getMoves", "at", "getCoordinateSystem", "play", "play", "assertFalse", "contains", "getMoves", "at", "getCoordinateSystem"]}, "focal_class": {"identifier": "PatternSuggester", "superclass": "", "interfaces": "implements Suggester", "fields": [{"original_string": "private static final float THRESHOLD = 0.8f;", "modifier": "private static final", "type": "float", "declarator": "THRESHOLD = 0.8f", "var_name": "THRESHOLD"}, {"original_string": "private final int bias;", "modifier": "private final", "type": "int", "declarator": "bias", "var_name": "bias"}, {"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final CoordinateSystem coords;", "modifier": "private final", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private BitVector goodPatterns;", "modifier": "private", "type": "BitVector", "declarator": "goodPatterns", "var_name": "goodPatterns"}, {"original_string": "private final HistoryObserver history;", "modifier": "private final", "type": "HistoryObserver", "declarator": "history", "var_name": "history"}, {"original_string": "private final ShortSet moves;", "modifier": "private final", "type": "ShortSet", "declarator": "moves", "var_name": "moves"}], "methods": [{"identifier": "PatternSuggester", "parameters": "(Board board, HistoryObserver history)", "modifiers": "public", "return": "", "signature": " PatternSuggester(Board board, HistoryObserver history)", "full_signature": "public  PatternSuggester(Board board, HistoryObserver history)", "class_method_signature": "PatternSuggester.PatternSuggester(Board board, HistoryObserver history)", "testcase": false, "constructor": true}, {"identifier": "PatternSuggester", "parameters": "(Board board, HistoryObserver history, int bias)", "modifiers": "public", "return": "", "signature": " PatternSuggester(Board board, HistoryObserver history, int bias)", "full_signature": "public  PatternSuggester(Board board, HistoryObserver history, int bias)", "class_method_signature": "PatternSuggester.PatternSuggester(Board board, HistoryObserver history, int bias)", "testcase": false, "constructor": true}, {"identifier": "calculatePattern", "parameters": "(short p)", "modifiers": "private", "return": "char", "signature": "char calculatePattern(short p)", "full_signature": "private char calculatePattern(short p)", "class_method_signature": "PatternSuggester.calculatePattern(short p)", "testcase": false, "constructor": false}, {"identifier": "getBias", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBias()", "full_signature": "@Override public int getBias()", "class_method_signature": "PatternSuggester.getBias()", "testcase": false, "constructor": false}, {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "PatternSuggester.getMoves()", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/feature/PatternSuggester.java"}, "focal_method": {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "body": "@Override\n\tpublic ShortSet getMoves() {\n\t\tmoves.clear();\n\t\tfinal int turn = board.getTurn();\n\t\tif (turn == 0) {\n\t\t\treturn moves;\n\t\t}\n\t\tfinal short p = history.get(turn - 1);\n\t\tif (p == CoordinateSystem.PASS) {\n\t\t\treturn moves;\n\t\t}\n\t\tfinal short[] neighbors = coords.getNeighbors(p);\n\t\tfor (final short n : neighbors) {\n\t\t\tif (board.getColorAt(n) == VACANT) {\n\t\t\t\tfinal char pattern = calculatePattern(n);\n\t\t\t\tif (goodPatterns.get(pattern)) {\n\t\t\t\t\tmoves.add(n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t}", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "PatternSuggester.getMoves()", "testcase": false, "constructor": false, "invocations": ["clear", "getTurn", "get", "getNeighbors", "getColorAt", "calculatePattern", "get", "add"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}