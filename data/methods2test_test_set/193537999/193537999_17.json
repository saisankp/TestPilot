{"test_class": {"identifier": "NetcdfDataReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "vortex-api/src/test/java/mil/army/usace/hec/vortex/io/NetcdfDataReaderTest.java"}, "test_case": {"identifier": "Sresa1bPrecipRateImport", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void Sresa1bPrecipRateImport(){\n        String inFile = new File(getClass().getResource(\"/sresa1b_ncar_ccsm3-example.nc\").getFile()).toString();\n        String variableName = \"pr\";\n\n        DataReader reader = DataReader.builder()\n                .path(inFile)\n                .variable(variableName)\n                .build();\n\n        List<VortexGrid> dtos = reader.getDtos().stream().map(grid -> (VortexGrid) grid).collect(Collectors.toList());\n        assertEquals(1, dtos.size());\n        assertEquals(32768, dtos.get(0).data().length);\n    }", "signature": "void Sresa1bPrecipRateImport()", "full_signature": "@Test void Sresa1bPrecipRateImport()", "class_method_signature": "NetcdfDataReaderTest.Sresa1bPrecipRateImport()", "testcase": true, "constructor": false, "invocations": ["toString", "getFile", "getResource", "getClass", "build", "variable", "path", "builder", "collect", "map", "stream", "getDtos", "toList", "assertEquals", "size", "assertEquals", "data", "get"]}, "focal_class": {"identifier": "NetcdfDataReader", "superclass": "extends DataReader", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(NetcdfDataReader.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(NetcdfDataReader.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "NetcdfDataReader", "parameters": "(DataReaderBuilder builder)", "modifiers": "", "return": "", "signature": " NetcdfDataReader(DataReaderBuilder builder)", "full_signature": "  NetcdfDataReader(DataReaderBuilder builder)", "class_method_signature": "NetcdfDataReader.NetcdfDataReader(DataReaderBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "getDtos", "parameters": "()", "modifiers": "@Override public", "return": "List<VortexData>", "signature": "List<VortexData> getDtos()", "full_signature": "@Override public List<VortexData> getDtos()", "class_method_signature": "NetcdfDataReader.getDtos()", "testcase": false, "constructor": false}, {"identifier": "getDto", "parameters": "(int idx)", "modifiers": "@Override public", "return": "VortexData", "signature": "VortexData getDto(int idx)", "full_signature": "@Override public VortexData getDto(int idx)", "class_method_signature": "NetcdfDataReader.getDto(int idx)", "testcase": false, "constructor": false}, {"identifier": "getDtoCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDtoCount()", "full_signature": "@Override public int getDtoCount()", "class_method_signature": "NetcdfDataReader.getDtoCount()", "testcase": false, "constructor": false}, {"identifier": "getVariables", "parameters": "(String path)", "modifiers": "public static", "return": "Set<String>", "signature": "Set<String> getVariables(String path)", "full_signature": "public static Set<String> getVariables(String path)", "class_method_signature": "NetcdfDataReader.getVariables(String path)", "testcase": false, "constructor": false}, {"identifier": "getFloatArray", "parameters": "(Array array)", "modifiers": "private", "return": "float[]", "signature": "float[] getFloatArray(Array array)", "full_signature": "private float[] getFloatArray(Array array)", "class_method_signature": "NetcdfDataReader.getFloatArray(Array array)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(GridDataset dataset, String variable)", "modifiers": "private", "return": "List<VortexData>", "signature": "List<VortexData> getData(GridDataset dataset, String variable)", "full_signature": "private List<VortexData> getData(GridDataset dataset, String variable)", "class_method_signature": "NetcdfDataReader.getData(GridDataset dataset, String variable)", "testcase": false, "constructor": false}, {"identifier": "getWkt", "parameters": "(Projection projection)", "modifiers": "private static", "return": "String", "signature": "String getWkt(Projection projection)", "full_signature": "private static String getWkt(Projection projection)", "class_method_signature": "NetcdfDataReader.getWkt(Projection projection)", "testcase": false, "constructor": false}, {"identifier": "getTimeBounds", "parameters": "(GridCoordSystem gcs)", "modifiers": "private", "return": "List<ZonedDateTime[]>", "signature": "List<ZonedDateTime[]> getTimeBounds(GridCoordSystem gcs)", "full_signature": "private List<ZonedDateTime[]> getTimeBounds(GridCoordSystem gcs)", "class_method_signature": "NetcdfDataReader.getTimeBounds(GridCoordSystem gcs)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(CalendarDate date)", "modifiers": "private static", "return": "ZonedDateTime", "signature": "ZonedDateTime convert(CalendarDate date)", "full_signature": "private static ZonedDateTime convert(CalendarDate date)", "class_method_signature": "NetcdfDataReader.convert(CalendarDate date)", "testcase": false, "constructor": false}, {"identifier": "getGrid", "parameters": "(GridCoordSystem coordinateSystem)", "modifiers": "private static", "return": "Grid", "signature": "Grid getGrid(GridCoordSystem coordinateSystem)", "full_signature": "private static Grid getGrid(GridCoordSystem coordinateSystem)", "class_method_signature": "NetcdfDataReader.getGrid(GridCoordSystem coordinateSystem)", "testcase": false, "constructor": false}, {"identifier": "shiftGrid", "parameters": "(Grid grid)", "modifiers": "private static", "return": "Grid", "signature": "Grid shiftGrid(Grid grid)", "full_signature": "private static Grid shiftGrid(Grid grid)", "class_method_signature": "NetcdfDataReader.shiftGrid(Grid grid)", "testcase": false, "constructor": false}, {"identifier": "scaleGrid", "parameters": "(Grid grid, Unit<?> cellUnits, Unit<?> csUnits)", "modifiers": "private static", "return": "Grid", "signature": "Grid scaleGrid(Grid grid, Unit<?> cellUnits, Unit<?> csUnits)", "full_signature": "private static Grid scaleGrid(Grid grid, Unit<?> cellUnits, Unit<?> csUnits)", "class_method_signature": "NetcdfDataReader.scaleGrid(Grid grid, Unit<?> cellUnits, Unit<?> csUnits)", "testcase": false, "constructor": false}, {"identifier": "getDtoCount", "parameters": "(GridDataset dataset, String variable)", "modifiers": "private", "return": "int", "signature": "int getDtoCount(GridDataset dataset, String variable)", "full_signature": "private int getDtoCount(GridDataset dataset, String variable)", "class_method_signature": "NetcdfDataReader.getDtoCount(GridDataset dataset, String variable)", "testcase": false, "constructor": false}, {"identifier": "getDtoCount", "parameters": "(VariableDS variableDS)", "modifiers": "private", "return": "int", "signature": "int getDtoCount(VariableDS variableDS)", "full_signature": "private int getDtoCount(VariableDS variableDS)", "class_method_signature": "NetcdfDataReader.getDtoCount(VariableDS variableDS)", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(GridDataset dataset, String variable, int idx)", "modifiers": "private", "return": "VortexData", "signature": "VortexData getData(GridDataset dataset, String variable, int idx)", "full_signature": "private VortexData getData(GridDataset dataset, String variable, int idx)", "class_method_signature": "NetcdfDataReader.getData(GridDataset dataset, String variable, int idx)", "testcase": false, "constructor": false}], "file": "vortex-api/src/main/java/mil/army/usace/hec/vortex/io/NetcdfDataReader.java"}, "focal_method": {"identifier": "getDtos", "parameters": "()", "modifiers": "@Override public", "return": "List<VortexData>", "body": "@Override\n    public List<VortexData> getDtos() {\n        try (NetcdfDataset ncd = NetcdfDatasets.openDataset(path);  Formatter errlog = new Formatter()) {\n            FeatureDataset dataset = FeatureDatasetFactoryManager.wrap(FeatureType.GRID, ncd, null, errlog);\n            if (dataset != null) {\n                FeatureType ftype = dataset.getFeatureType();\n                if (ftype == FeatureType.GRID) {\n                    assert (dataset instanceof GridDataset);\n                    GridDataset gridDataset = (GridDataset) dataset;\n                    return getData(gridDataset, variableName);\n                }\n            } else {\n                List<Variable> variables = ncd.getVariables();\n                for (Variable variable : variables) {\n                    if (variable.getShortName().equals(variableName) && variable instanceof VariableDS) {\n                        VariableDS variableDS = (VariableDS) variable;\n                        int count = getDtoCount(variableDS);\n\n                        VariableDsReader reader = VariableDsReader.builder()\n                                .setNetcdfFile(ncd)\n                                .setVariableName(variableName)\n                                .build();\n\n                        List<VortexData> dataList = new ArrayList<>();\n                        for (int i = 0; i < count; i++) {\n                            VortexData data = reader.read(i);\n                            dataList.add(data);\n                        }\n                        return dataList;\n                    }\n                }\n            }\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, e, e::getMessage);\n            return Collections.emptyList();\n        }\n        return Collections.emptyList();\n    }", "signature": "List<VortexData> getDtos()", "full_signature": "@Override public List<VortexData> getDtos()", "class_method_signature": "NetcdfDataReader.getDtos()", "testcase": false, "constructor": false, "invocations": ["openDataset", "wrap", "getFeatureType", "getData", "getVariables", "equals", "getShortName", "getDtoCount", "build", "setVariableName", "setNetcdfFile", "builder", "read", "add", "log", "emptyList", "emptyList"]}, "repository": {"repo_id": 193537999, "url": "https://github.com/HydrologicEngineeringCenter/Vortex", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 448543, "license": "licensed"}}