{"test_class": {"identifier": "X509CertUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509CertUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509CertUtilsTest.class)", "var_name": "LOGGER"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/X509CertUtilsTest.java"}, "test_case": {"identifier": "testLogRecord", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogRecord() {\n\n        File file = new File(\"src/test/resources/cert_log.pem\");\n        String pem = null;\n        try {\n            pem = new String(Files.readAllBytes(file.toPath()));\n        } catch (IOException ex) {\n            fail();\n        }\n        X509Certificate cert = Crypto.loadX509Certificate(pem);\n\n        Principal principal = SimplePrincipal.create(\"user\", \"joe\", \"creds\");\n        String logLine = X509CertUtils.logRecord(principal, \"10.11.12.13\", \"athenz.provider\",\n                \"instance-id-1234\", cert);\n        assertEquals(logLine, \"10.11.12.13 user.joe athenz.provider \\\"instance-id-1234\\\" \\\"CN=athenz.api,O=Athenz,ST=CA,C=US\\\" \\\"CN=AthenzTestCA,O=AthenzTest,ST=CA,C=US\\\" 11380750808733699965 1629005177000\");\n\n        logLine = X509CertUtils.logRecord(null, \"10.11.12.13\", \"athenz.provider\", null, cert);\n        assertEquals(logLine, \"10.11.12.13 - athenz.provider - \\\"CN=athenz.api,O=Athenz,ST=CA,C=US\\\" \\\"CN=AthenzTestCA,O=AthenzTest,ST=CA,C=US\\\" 11380750808733699965 1629005177000\");\n    }", "signature": "void testLogRecord()", "full_signature": "@Test public void testLogRecord()", "class_method_signature": "X509CertUtilsTest.testLogRecord()", "testcase": true, "constructor": false, "invocations": ["readAllBytes", "toPath", "fail", "loadX509Certificate", "create", "logRecord", "assertEquals", "logRecord", "assertEquals"]}, "focal_class": {"identifier": "X509CertUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class)", "var_name": "LOGGER"}, {"original_string": "private static final ThreadLocal<StringBuilder> TLS_BUILDER = ThreadLocal.withInitial(() -> new StringBuilder(256));", "modifier": "private static final", "type": "ThreadLocal<StringBuilder>", "declarator": "TLS_BUILDER = ThreadLocal.withInitial(() -> new StringBuilder(256))", "var_name": "TLS_BUILDER"}], "methods": [{"identifier": "extractRequestInstanceIdFromURI", "parameters": "(final List<String> uriList)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceIdFromURI(final List<String> uriList)", "full_signature": "public static String extractRequestInstanceIdFromURI(final List<String> uriList)", "class_method_signature": "X509CertUtils.extractRequestInstanceIdFromURI(final List<String> uriList)", "testcase": false, "constructor": false}, {"identifier": "extractItemFromURI", "parameters": "(final List<String> uriList, final String item)", "modifiers": "public static", "return": "String", "signature": "String extractItemFromURI(final List<String> uriList, final String item)", "full_signature": "public static String extractItemFromURI(final List<String> uriList, final String item)", "class_method_signature": "X509CertUtils.extractItemFromURI(final List<String> uriList, final String item)", "testcase": false, "constructor": false}, {"identifier": "extractRequestInstanceIdFromDnsNames", "parameters": "(final List<String> dnsNames)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "full_signature": "public static String extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "class_method_signature": "X509CertUtils.extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "testcase": false, "constructor": false}, {"identifier": "extractRequestInstanceId", "parameters": "(X509Certificate cert)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceId(X509Certificate cert)", "full_signature": "public static String extractRequestInstanceId(X509Certificate cert)", "class_method_signature": "X509CertUtils.extractRequestInstanceId(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "logCert", "parameters": "(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "modifiers": "public static", "return": "void", "signature": "void logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "full_signature": "public static void logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "class_method_signature": "X509CertUtils.logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "logSSH", "parameters": "(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "modifiers": "public static", "return": "void", "signature": "void logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "full_signature": "public static void logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "class_method_signature": "X509CertUtils.logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "testcase": false, "constructor": false}, {"identifier": "logRecord", "parameters": "(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "full_signature": "public static String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "class_method_signature": "X509CertUtils.logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509CertUtils.java"}, "focal_method": {"identifier": "logRecord", "parameters": "(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "body": "public static String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert) {\n\n        StringBuilder buf = TLS_BUILDER.get();\n        buf.setLength(0);\n\n        // our format is going to be as follows\n        // <ip> <principal> <provider> <instance-id> <subject> <issuer> <serial> <expiry-date>\n\n        buf.append(ip);\n        buf.append(' ');\n\n        // now append our principal. if this is an instance register\n        // operation then we have no principal so we're going to\n        // just use - to indicate no principal\n\n        if (principal != null) {\n            buf.append(principal.getFullName());\n        } else {\n            buf.append('-');\n        }\n        buf.append(' ');\n\n        // next our provider\n\n        buf.append(provider);\n        buf.append(' ');\n\n        // next our instance id\n\n        if (instanceId != null) {\n            buf.append('\"');\n            buf.append(instanceId);\n            buf.append('\"');\n        } else {\n            buf.append('-');\n        }\n        buf.append(' ');\n\n        // next our subject\n\n        buf.append('\"');\n        buf.append(x509Cert.getSubjectX500Principal().getName());\n        buf.append('\"');\n        buf.append(' ');\n\n        // next we have our issuer\n\n        buf.append('\"');\n        buf.append(x509Cert.getIssuerX500Principal().getName());\n        buf.append('\"');\n        buf.append(' ');\n\n        // next we have our serial number\n\n        buf.append(x509Cert.getSerialNumber().toString());\n        buf.append(' ');\n\n        // finally we have our expiry date in milliseconds\n\n        buf.append(x509Cert.getNotAfter().getTime());\n\n        return buf.toString();\n    }", "signature": "String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "full_signature": "public static String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "class_method_signature": "X509CertUtils.logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "testcase": false, "constructor": false, "invocations": ["get", "setLength", "append", "append", "append", "getFullName", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "getName", "getSubjectX500Principal", "append", "append", "append", "append", "getName", "getIssuerX500Principal", "append", "append", "append", "toString", "getSerialNumber", "append", "append", "getTime", "getNotAfter", "toString"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}