{"test_class": {"identifier": "ArgsParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "mapreduce/src/test/java/io/github/innofang/util/ArgsParserTest.java"}, "test_case": {"identifier": "parse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parse() {\n        ArrayList<String[]> args = new ArrayList<>();\n        args.add(new String[]{\"-h\"});\n        args.add(new String[]{\"-s/home/source\"});\n        args.add(new String[]{\"-s\", \"/home/source\", \"-t\", \"/home/innofang/target\", \"-o\", \"/output\"});\n        args.add(new String[]{\"-s=/home/source\", \"-t=/home/innofang/target\", \"-o=/output\"});\n\n        ArgsParser parser = ArgsParser.parse(args.get(2));\n        System.out.println(parser.getSourceGraphFilePath());\n        System.out.println(parser.getTargetGraphFilePath());\n        System.out.println(parser.getOutputFolderPath());\n    }", "signature": "void parse()", "full_signature": "@Test public void parse()", "class_method_signature": "ArgsParserTest.parse()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "parse", "get", "println", "getSourceGraphFilePath", "println", "getTargetGraphFilePath", "println", "getOutputFolderPath"]}, "focal_class": {"identifier": "ArgsParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HashMap<String, String> arguments = new HashMap<>();", "modifier": "private static", "type": "HashMap<String, String>", "declarator": "arguments = new HashMap<>()", "var_name": "arguments"}, {"original_string": "private static final String SOURCE = \"source\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE = \"source\"", "var_name": "SOURCE"}, {"original_string": "private static final String TARGET = \"target\";", "modifier": "private static final", "type": "String", "declarator": "TARGET = \"target\"", "var_name": "TARGET"}, {"original_string": "private static final String OUTPUT = \"output\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT = \"output\"", "var_name": "OUTPUT"}], "methods": [{"identifier": "ArgsParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " ArgsParser()", "full_signature": "private  ArgsParser()", "class_method_signature": "ArgsParser.ArgsParser()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String[] args)", "modifiers": "public static", "return": "ArgsParser", "signature": "ArgsParser parse(String[] args)", "full_signature": "public static ArgsParser parse(String[] args)", "class_method_signature": "ArgsParser.parse(String[] args)", "testcase": false, "constructor": false}, {"identifier": "getSourceGraphFilePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSourceGraphFilePath()", "full_signature": "public String getSourceGraphFilePath()", "class_method_signature": "ArgsParser.getSourceGraphFilePath()", "testcase": false, "constructor": false}, {"identifier": "getTargetGraphFilePath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTargetGraphFilePath()", "full_signature": "public String getTargetGraphFilePath()", "class_method_signature": "ArgsParser.getTargetGraphFilePath()", "testcase": false, "constructor": false}, {"identifier": "getOutputFolderPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOutputFolderPath()", "full_signature": "public String getOutputFolderPath()", "class_method_signature": "ArgsParser.getOutputFolderPath()", "testcase": false, "constructor": false}], "file": "mapreduce/src/main/java/io/github/innofang/util/ArgsParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String[] args)", "modifiers": "public static", "return": "ArgsParser", "body": "public static ArgsParser parse(String[] args) {\n\n        // commons-cli 1.2\n\n        Options options = new Options();\n\n        Option source = new Option(\"s\", \"source\", true,\n                \"the source graph file path on HDFS (Required)\");\n        source.setRequired(true);\n\n        Option target = new Option(\"t\", \"target\", true,\n                \"the target graph file path on HDFS (Required)\");\n        target.setRequired(true);\n\n        Option output = new Option(\"o\", \"output\", true,\n                \"the output folder path of MapReduce result on HDFS (Required)\");\n        output.setRequired(true);\n\n        Option help = new Option(\"h\", \"help\", false,\n                \"show this help message and exit program\");\n\n        options.addOption(source)\n                .addOption(target)\n                .addOption(output)\n                .addOption(help);\n\n        CommandLineParser parser = new BasicParser();\n        HelpFormatter formatter = new HelpFormatter();\n        CommandLine cmd = null;\n\n        try {\n            cmd = parser.parse(options, args);\n            arguments.put(SOURCE, cmd.getOptionValue(\"s\"));\n            arguments.put(TARGET, cmd.getOptionValue(\"t\"));\n            arguments.put(OUTPUT, cmd.getOptionValue(\"o\"));\n        } catch (ParseException e) {\n            System.out.println(e.getMessage());\n            formatter.printHelp(\"sub-Graph Isomorphism\", options, true);\n            System.exit(1);\n        }\n\n        if (cmd.hasOption(\"h\")) {\n            formatter.printHelp(\"sub-Graph Isomorphism\", options, true);\n            System.exit(0);\n        }\n\n        return new ArgsParser();\n    }", "signature": "ArgsParser parse(String[] args)", "full_signature": "public static ArgsParser parse(String[] args)", "class_method_signature": "ArgsParser.parse(String[] args)", "testcase": false, "constructor": false, "invocations": ["setRequired", "setRequired", "setRequired", "addOption", "addOption", "addOption", "addOption", "parse", "put", "getOptionValue", "put", "getOptionValue", "put", "getOptionValue", "println", "getMessage", "printHelp", "exit", "hasOption", "printHelp", "exit"]}, "repository": {"repo_id": 164308818, "url": "https://github.com/InnoFang/subgraph-isomorphism", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 7, "size": 20493, "license": "licensed"}}