{"test_class": {"identifier": "TestExtensionWebSocketClient", "superclass": "extends ExtjsdkTestBase", "interfaces": "", "fields": [{"original_string": "OpenExtensionWebSocketClient client;", "modifier": "", "type": "OpenExtensionWebSocketClient", "declarator": "client", "var_name": "client"}, {"original_string": "String srcName;", "modifier": "", "type": "String", "declarator": "srcName", "var_name": "srcName"}, {"original_string": "String queryAddress;", "modifier": "", "type": "String", "declarator": "queryAddress", "var_name": "queryAddress"}, {"original_string": "FalseWebSocket socket;", "modifier": "", "type": "FalseWebSocket", "declarator": "socket", "var_name": "socket"}], "file": "extjsdk/src/test/java/io/vantiq/extjsdk/TestExtensionWebSocketClient.java"}, "test_case": {"identifier": "testBadNotificationArguments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBadNotificationArguments() {\n        markSourceConnected(true);\n\n        Integer[] intArray = new Integer[3];\n        intArray[0] = 1;\n        intArray[1] = 2;\n        intArray[2] = 3;\n\n        try {\n            client.sendNotification(intArray);\n            fail(\"Send of Array should fail.\");\n        } catch (IllegalArgumentException iae) {\n            // Expected\n        } // Other invalid exceptions will escape & cause failure.\n\n        List<String> stringList = new ArrayList<>();\n        stringList.add(\"This \");\n        stringList.add(\"should \");\n        stringList.add(\"not \");\n        stringList.add(\"work.\");\n\n        try {\n            client.sendNotification(stringList);\n            fail(\"Send of List should fail.\");\n        } catch (IllegalArgumentException iae) {\n            // Expected\n        } // Other invalid exceptions will escape & cause failure.\n    }", "signature": "void testBadNotificationArguments()", "full_signature": "@Test public void testBadNotificationArguments()", "class_method_signature": "TestExtensionWebSocketClient.testBadNotificationArguments()", "testcase": true, "constructor": false, "invocations": ["markSourceConnected", "sendNotification", "fail", "add", "add", "add", "add", "sendNotification", "fail"]}, "focal_class": {"identifier": "ExtensionWebSocketClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int QUERY_CHUNK_CODE    = 100;", "modifier": "public static final", "type": "int", "declarator": "QUERY_CHUNK_CODE    = 100", "var_name": "QUERY_CHUNK_CODE"}, {"original_string": "public static final int QUERY_DATA_CODE     = 200;", "modifier": "public static final", "type": "int", "declarator": "QUERY_DATA_CODE     = 200", "var_name": "QUERY_DATA_CODE"}, {"original_string": "public static final int QUERY_NODATA_CODE   = 204;", "modifier": "public static final", "type": "int", "declarator": "QUERY_NODATA_CODE   = 204", "var_name": "QUERY_NODATA_CODE"}, {"original_string": "private ObjectMapper mapper = new ObjectMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "WebSocket webSocket = null;", "modifier": "", "type": "WebSocket", "declarator": "webSocket = null", "var_name": "webSocket"}, {"original_string": "Semaphore outstandingNotifications = null;", "modifier": "", "type": "Semaphore", "declarator": "outstandingNotifications = null", "var_name": "outstandingNotifications"}, {"original_string": "private String sourceName;", "modifier": "private", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "ExtensionWebSocketListener listener;", "modifier": "", "type": "ExtensionWebSocketListener", "declarator": "listener", "var_name": "listener"}, {"original_string": "CompletableFuture<Boolean> webSocketFuture;", "modifier": "", "type": "CompletableFuture<Boolean>", "declarator": "webSocketFuture", "var_name": "webSocketFuture"}, {"original_string": "CompletableFuture<Boolean> authFuture;", "modifier": "", "type": "CompletableFuture<Boolean>", "declarator": "authFuture", "var_name": "authFuture"}, {"original_string": "CompletableFuture<Boolean> sourceFuture;", "modifier": "", "type": "CompletableFuture<Boolean>", "declarator": "sourceFuture", "var_name": "sourceFuture"}, {"original_string": "boolean autoReconnect = false;", "modifier": "", "type": "boolean", "declarator": "autoReconnect = false", "var_name": "autoReconnect"}, {"original_string": "Object authData;", "modifier": "", "type": "Object", "declarator": "authData", "var_name": "authData"}, {"original_string": "Handler<ExtensionWebSocketClient> closeHandler;", "modifier": "", "type": "Handler<ExtensionWebSocketClient>", "declarator": "closeHandler", "var_name": "closeHandler"}], "methods": [{"identifier": "getListener", "parameters": "()", "modifiers": "public", "return": "ExtensionWebSocketListener", "signature": "ExtensionWebSocketListener getListener()", "full_signature": "public ExtensionWebSocketListener getListener()", "class_method_signature": "ExtensionWebSocketClient.getListener()", "testcase": false, "constructor": false}, {"identifier": "getSourceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSourceName()", "full_signature": "public String getSourceName()", "class_method_signature": "ExtensionWebSocketClient.getSourceName()", "testcase": false, "constructor": false}, {"identifier": "ExtensionWebSocketClient", "parameters": "(String sourceName)", "modifiers": "public", "return": "", "signature": " ExtensionWebSocketClient(String sourceName)", "full_signature": "public  ExtensionWebSocketClient(String sourceName)", "class_method_signature": "ExtensionWebSocketClient.ExtensionWebSocketClient(String sourceName)", "testcase": false, "constructor": true}, {"identifier": "initiateFullConnection", "parameters": "(String url, String token)", "modifiers": "public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> initiateFullConnection(String url, String token)", "full_signature": "public CompletableFuture<Boolean> initiateFullConnection(String url, String token)", "class_method_signature": "ExtensionWebSocketClient.initiateFullConnection(String url, String token)", "testcase": false, "constructor": false}, {"identifier": "initiateWebsocketConnection", "parameters": "(String url)", "modifiers": "synchronized public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> initiateWebsocketConnection(String url)", "full_signature": "synchronized public CompletableFuture<Boolean> initiateWebsocketConnection(String url)", "class_method_signature": "ExtensionWebSocketClient.initiateWebsocketConnection(String url)", "testcase": false, "constructor": false}, {"identifier": "getWebsocketConnectionFuture", "parameters": "()", "modifiers": "public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> getWebsocketConnectionFuture()", "full_signature": "public CompletableFuture<Boolean> getWebsocketConnectionFuture()", "class_method_signature": "ExtensionWebSocketClient.getWebsocketConnectionFuture()", "testcase": false, "constructor": false}, {"identifier": "validifyUrl", "parameters": "(String url)", "modifiers": "protected", "return": "String", "signature": "String validifyUrl(String url)", "full_signature": "protected String validifyUrl(String url)", "class_method_signature": "ExtensionWebSocketClient.validifyUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "sendNotification", "parameters": "(Object data)", "modifiers": "public", "return": "void", "signature": "void sendNotification(Object data)", "full_signature": "public void sendNotification(Object data)", "class_method_signature": "ExtensionWebSocketClient.sendNotification(Object data)", "testcase": false, "constructor": false}, {"identifier": "acknowledgeNotification", "parameters": "()", "modifiers": "", "return": "void", "signature": "void acknowledgeNotification()", "full_signature": " void acknowledgeNotification()", "class_method_signature": "ExtensionWebSocketClient.acknowledgeNotification()", "testcase": false, "constructor": false}, {"identifier": "sendQueryResponseEmpty", "parameters": "(String replyAddress)", "modifiers": "public", "return": "void", "signature": "void sendQueryResponseEmpty(String replyAddress)", "full_signature": "public void sendQueryResponseEmpty(String replyAddress)", "class_method_signature": "ExtensionWebSocketClient.sendQueryResponseEmpty(String replyAddress)", "testcase": false, "constructor": false}, {"identifier": "sendQueryResponse", "parameters": "(int httpCode, String replyAddress, Map body)", "modifiers": "public", "return": "void", "signature": "void sendQueryResponse(int httpCode, String replyAddress, Map body)", "full_signature": "public void sendQueryResponse(int httpCode, String replyAddress, Map body)", "class_method_signature": "ExtensionWebSocketClient.sendQueryResponse(int httpCode, String replyAddress, Map body)", "testcase": false, "constructor": false}, {"identifier": "sendQueryResponse", "parameters": "(int httpCode, String replyAddress, Map[] body)", "modifiers": "public", "return": "void", "signature": "void sendQueryResponse(int httpCode, String replyAddress, Map[] body)", "full_signature": "public void sendQueryResponse(int httpCode, String replyAddress, Map[] body)", "class_method_signature": "ExtensionWebSocketClient.sendQueryResponse(int httpCode, String replyAddress, Map[] body)", "testcase": false, "constructor": false}, {"identifier": "sendQueryError", "parameters": "(String replyAddress, String messageCode, String messageTemplate, Object[] parameters)", "modifiers": "public", "return": "void", "signature": "void sendQueryError(String replyAddress, String messageCode, String messageTemplate, Object[] parameters)", "full_signature": "public void sendQueryError(String replyAddress, String messageCode, String messageTemplate, Object[] parameters)", "class_method_signature": "ExtensionWebSocketClient.sendQueryError(String replyAddress, String messageCode, String messageTemplate, Object[] parameters)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Object obj)", "modifiers": "public", "return": "void", "signature": "void send(Object obj)", "full_signature": "public void send(Object obj)", "class_method_signature": "ExtensionWebSocketClient.send(Object obj)", "testcase": false, "constructor": false}, {"identifier": "doAuthentication", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void doAuthentication()", "full_signature": "protected void doAuthentication()", "class_method_signature": "ExtensionWebSocketClient.doAuthentication()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String user, String pass)", "modifiers": "synchronized public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> authenticate(String user, String pass)", "full_signature": "synchronized public CompletableFuture<Boolean> authenticate(String user, String pass)", "class_method_signature": "ExtensionWebSocketClient.authenticate(String user, String pass)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String token)", "modifiers": "synchronized public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> authenticate(String token)", "full_signature": "synchronized public CompletableFuture<Boolean> authenticate(String token)", "class_method_signature": "ExtensionWebSocketClient.authenticate(String token)", "testcase": false, "constructor": false}, {"identifier": "getAuthenticationFuture", "parameters": "()", "modifiers": "public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> getAuthenticationFuture()", "full_signature": "public CompletableFuture<Boolean> getAuthenticationFuture()", "class_method_signature": "ExtensionWebSocketClient.getAuthenticationFuture()", "testcase": false, "constructor": false}, {"identifier": "doConnectionToSource", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void doConnectionToSource()", "full_signature": "protected void doConnectionToSource()", "class_method_signature": "ExtensionWebSocketClient.doConnectionToSource()", "testcase": false, "constructor": false}, {"identifier": "connectToSource", "parameters": "()", "modifiers": "synchronized public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> connectToSource()", "full_signature": "synchronized public CompletableFuture<Boolean> connectToSource()", "class_method_signature": "ExtensionWebSocketClient.connectToSource()", "testcase": false, "constructor": false}, {"identifier": "getSourceConnectionFuture", "parameters": "()", "modifiers": "public", "return": "CompletableFuture<Boolean>", "signature": "CompletableFuture<Boolean> getSourceConnectionFuture()", "full_signature": "public CompletableFuture<Boolean> getSourceConnectionFuture()", "class_method_signature": "ExtensionWebSocketClient.getSourceConnectionFuture()", "testcase": false, "constructor": false}, {"identifier": "sourceHasDisconnected", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sourceHasDisconnected()", "full_signature": "public void sourceHasDisconnected()", "class_method_signature": "ExtensionWebSocketClient.sourceHasDisconnected()", "testcase": false, "constructor": false}, {"identifier": "setAutoReconnect", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setAutoReconnect(boolean value)", "full_signature": "public void setAutoReconnect(boolean value)", "class_method_signature": "ExtensionWebSocketClient.setAutoReconnect(boolean value)", "testcase": false, "constructor": false}, {"identifier": "isOpen", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOpen()", "full_signature": "public boolean isOpen()", "class_method_signature": "ExtensionWebSocketClient.isOpen()", "testcase": false, "constructor": false}, {"identifier": "isAuthed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAuthed()", "full_signature": "public boolean isAuthed()", "class_method_signature": "ExtensionWebSocketClient.isAuthed()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "public boolean isConnected()", "class_method_signature": "ExtensionWebSocketClient.isConnected()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ExtensionWebSocketClient.close()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "ExtensionWebSocketClient.stop()", "testcase": false, "constructor": false}, {"identifier": "useHandlersFrom", "parameters": "(ExtensionWebSocketListener listener)", "modifiers": "public", "return": "void", "signature": "void useHandlersFrom(ExtensionWebSocketListener listener)", "full_signature": "public void useHandlersFrom(ExtensionWebSocketListener listener)", "class_method_signature": "ExtensionWebSocketClient.useHandlersFrom(ExtensionWebSocketListener listener)", "testcase": false, "constructor": false}, {"identifier": "useHandlersFrom", "parameters": "(ExtensionWebSocketClient client)", "modifiers": "public", "return": "void", "signature": "void useHandlersFrom(ExtensionWebSocketClient client)", "full_signature": "public void useHandlersFrom(ExtensionWebSocketClient client)", "class_method_signature": "ExtensionWebSocketClient.useHandlersFrom(ExtensionWebSocketClient client)", "testcase": false, "constructor": false}, {"identifier": "setCloseHandler", "parameters": "(Handler<ExtensionWebSocketClient> closeHandler)", "modifiers": "public", "return": "void", "signature": "void setCloseHandler(Handler<ExtensionWebSocketClient> closeHandler)", "full_signature": "public void setCloseHandler(Handler<ExtensionWebSocketClient> closeHandler)", "class_method_signature": "ExtensionWebSocketClient.setCloseHandler(Handler<ExtensionWebSocketClient> closeHandler)", "testcase": false, "constructor": false}, {"identifier": "setHttpHandler", "parameters": "(Handler<Response> httpHandler)", "modifiers": "public", "return": "void", "signature": "void setHttpHandler(Handler<Response> httpHandler)", "full_signature": "public void setHttpHandler(Handler<Response> httpHandler)", "class_method_signature": "ExtensionWebSocketClient.setHttpHandler(Handler<Response> httpHandler)", "testcase": false, "constructor": false}, {"identifier": "setPublishHandler", "parameters": "(Handler<ExtensionServiceMessage> publishHandler)", "modifiers": "public", "return": "void", "signature": "void setPublishHandler(Handler<ExtensionServiceMessage> publishHandler)", "full_signature": "public void setPublishHandler(Handler<ExtensionServiceMessage> publishHandler)", "class_method_signature": "ExtensionWebSocketClient.setPublishHandler(Handler<ExtensionServiceMessage> publishHandler)", "testcase": false, "constructor": false}, {"identifier": "setQueryHandler", "parameters": "(Handler<ExtensionServiceMessage> queryHandler)", "modifiers": "public", "return": "void", "signature": "void setQueryHandler(Handler<ExtensionServiceMessage> queryHandler)", "full_signature": "public void setQueryHandler(Handler<ExtensionServiceMessage> queryHandler)", "class_method_signature": "ExtensionWebSocketClient.setQueryHandler(Handler<ExtensionServiceMessage> queryHandler)", "testcase": false, "constructor": false}, {"identifier": "setConfigHandler", "parameters": "(Handler<ExtensionServiceMessage> configHandler)", "modifiers": "public", "return": "void", "signature": "void setConfigHandler(Handler<ExtensionServiceMessage> configHandler)", "full_signature": "public void setConfigHandler(Handler<ExtensionServiceMessage> configHandler)", "class_method_signature": "ExtensionWebSocketClient.setConfigHandler(Handler<ExtensionServiceMessage> configHandler)", "testcase": false, "constructor": false}, {"identifier": "setAuthHandler", "parameters": "(Handler<Response> authHandler)", "modifiers": "public", "return": "void", "signature": "void setAuthHandler(Handler<Response> authHandler)", "full_signature": "public void setAuthHandler(Handler<Response> authHandler)", "class_method_signature": "ExtensionWebSocketClient.setAuthHandler(Handler<Response> authHandler)", "testcase": false, "constructor": false}, {"identifier": "setReconnectHandler", "parameters": "(Handler<ExtensionServiceMessage> reconnectHandler)", "modifiers": "public", "return": "void", "signature": "void setReconnectHandler(Handler<ExtensionServiceMessage> reconnectHandler)", "full_signature": "public void setReconnectHandler(Handler<ExtensionServiceMessage> reconnectHandler)", "class_method_signature": "ExtensionWebSocketClient.setReconnectHandler(Handler<ExtensionServiceMessage> reconnectHandler)", "testcase": false, "constructor": false}], "file": "extjsdk/src/main/java/io/vantiq/extjsdk/ExtensionWebSocketClient.java"}, "focal_method": {"identifier": "sendNotification", "parameters": "(Object data)", "modifiers": "public", "return": "void", "body": "public void sendNotification(Object data) {\n\n        if (data != null && (data.getClass().isArray() || data instanceof List)) {\n            throw new IllegalArgumentException(\"Notifications cannot be lists or arrays.\");\n        }\n        if (isConnected()) {\n            Map<String,Object> m = new LinkedHashMap<>();\n            m.put(\"op\", ExtensionServiceMessage.OP_NOTIFICATION);\n            m.put(\"resourceId\", sourceName);\n            m.put(\"resourceName\", ExtensionServiceMessage.RESOURCE_NAME_SOURCES);\n            m.put(\"object\", data);\n            ExtensionServiceMessage msg = new ExtensionServiceMessage(\"\");\n            msg.fromMap(m);\n            try {\n                outstandingNotifications.acquire();\n                this.send(msg);\n            } catch (InterruptedException ie) {\n                log.warn(\"Obtaining space to sent notifications was interrupted.\", ie);\n            } catch (Exception e) {\n                // If we get an exception during the send, we're unlikely to get a response so release now.\n                outstandingNotifications.release();\n                throw e;\n            }\n        }\n    }", "signature": "void sendNotification(Object data)", "full_signature": "public void sendNotification(Object data)", "class_method_signature": "ExtensionWebSocketClient.sendNotification(Object data)", "testcase": false, "constructor": false, "invocations": ["isArray", "getClass", "isConnected", "put", "put", "put", "put", "fromMap", "acquire", "send", "warn", "release"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}