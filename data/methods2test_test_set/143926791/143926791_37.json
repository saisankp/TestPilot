{"test_class": {"identifier": "AccountServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tAccountService service;", "modifier": "@InjectMocks", "type": "AccountService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tAccountRepository repo;", "modifier": "@Mock", "type": "AccountRepository", "declarator": "repo", "var_name": "repo"}], "file": "accounts-service/src/test/java/io/pivotal/accounts/service/AccountServiceTest.java"}, "test_case": {"identifier": "doFindAccountsByType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void doFindAccountsByType() {\n\t\twhen(repo.findByUseridAndType(ServiceTestConfiguration.USER_ID,AccountType.CURRENT)).thenReturn(ServiceTestConfiguration.accountList());\n\t\tList<Account> accounts = service.findAccountsByType(ServiceTestConfiguration.USER_ID,AccountType.CURRENT);\n\t\tassertEquals(accounts.size(),1);\n\t\tassertEquals(accounts.get(0),ServiceTestConfiguration.account());\n\t}", "signature": "void doFindAccountsByType()", "full_signature": "@Test public void doFindAccountsByType()", "class_method_signature": "AccountServiceTest.doFindAccountsByType()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByUseridAndType", "accountList", "findAccountsByType", "assertEquals", "size", "assertEquals", "get", "account"]}, "focal_class": {"identifier": "AccountService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AccountService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AccountService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tAccountRepository accounts;", "modifier": "@Autowired", "type": "AccountRepository", "declarator": "accounts", "var_name": "accounts"}], "methods": [{"identifier": "findAccount", "parameters": "(Integer id)", "modifiers": "public", "return": "Account", "signature": "Account findAccount(Integer id)", "full_signature": "public Account findAccount(Integer id)", "class_method_signature": "AccountService.findAccount(Integer id)", "testcase": false, "constructor": false}, {"identifier": "findAccounts", "parameters": "(String user)", "modifiers": "public", "return": "List<Account>", "signature": "List<Account> findAccounts(String user)", "full_signature": "public List<Account> findAccounts(String user)", "class_method_signature": "AccountService.findAccounts(String user)", "testcase": false, "constructor": false}, {"identifier": "findAccountsByType", "parameters": "(String id, AccountType type)", "modifiers": "public", "return": "List<Account>", "signature": "List<Account> findAccountsByType(String id, AccountType type)", "full_signature": "public List<Account> findAccountsByType(String id, AccountType type)", "class_method_signature": "AccountService.findAccountsByType(String id, AccountType type)", "testcase": false, "constructor": false}, {"identifier": "saveAccount", "parameters": "(Account accountRequest)", "modifiers": "public", "return": "Integer", "signature": "Integer saveAccount(Account accountRequest)", "full_signature": "public Integer saveAccount(Account accountRequest)", "class_method_signature": "AccountService.saveAccount(Account accountRequest)", "testcase": false, "constructor": false}], "file": "accounts-service/src/main/java/io/pivotal/accounts/service/AccountService.java"}, "focal_method": {"identifier": "findAccountsByType", "parameters": "(String id, AccountType type)", "modifiers": "public", "return": "List<Account>", "body": "public List<Account> findAccountsByType(String id, AccountType type) {\n\n\t\tlogger.debug(\"AccountService.findAccount: id=\" + id + \" and type: \" + type.toString());\n\n\t\tList<Account> account = accounts.findByUseridAndType(id,type);\n\t\t\n\t\tlogger.debug(\"Found \" + account.size() + \" account(s).\");\n\t\t\n\t\tlogger.info(String.format(\"AccountService.findAccount - retrieved account with id: %s. Payload is: %s\", id, account));\n\n\t\treturn account;\n\t}", "signature": "List<Account> findAccountsByType(String id, AccountType type)", "full_signature": "public List<Account> findAccountsByType(String id, AccountType type)", "class_method_signature": "AccountService.findAccountsByType(String id, AccountType type)", "testcase": false, "constructor": false, "invocations": ["debug", "toString", "findByUseridAndType", "debug", "size", "info", "format"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}