{"test_class": {"identifier": "HasTransitionsValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HasTransitionsValidator victim = new HasTransitionsValidator();", "modifier": "private", "type": "HasTransitionsValidator", "declarator": "victim = new HasTransitionsValidator()", "var_name": "victim"}, {"original_string": "private SetPagesTransitionParameters params = mock(SetPagesTransitionParameters.class);", "modifier": "private", "type": "SetPagesTransitionParameters", "declarator": "params = mock(SetPagesTransitionParameters.class)", "var_name": "params"}, {"original_string": "private PdfPageTransition mockTransition = PdfPageTransition.newInstance(PdfPageTransitionStyle.BLINDS_HORIZONTAL,\n            1, 1);", "modifier": "private", "type": "PdfPageTransition", "declarator": "mockTransition = PdfPageTransition.newInstance(PdfPageTransitionStyle.BLINDS_HORIZONTAL,\n            1, 1)", "var_name": "mockTransition"}], "file": "sejda-model/src/test/java/org/sejda/model/validation/validator/HasTransitionsValidatorTest.java"}, "test_case": {"identifier": "testHasBoth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasBoth() {\n        when(params.getDefaultTransition()).thenReturn(mockTransition);\n        when(params.getTransitions()).thenReturn(Collections.singletonMap(Integer.MAX_VALUE, mockTransition));\n        assertTrue(victim.isValid(params, null));\n    }", "signature": "void testHasBoth()", "full_signature": "@Test public void testHasBoth()", "class_method_signature": "HasTransitionsValidatorTest.testHasBoth()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDefaultTransition", "thenReturn", "when", "getTransitions", "singletonMap", "assertTrue", "isValid"]}, "focal_class": {"identifier": "HasTransitionsValidator", "superclass": "", "interfaces": "implements ConstraintValidator<HasTransitions, SetPagesTransitionParameters>", "fields": [], "methods": [{"identifier": "initialize", "parameters": "(HasTransitions constraintAnnotation)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(HasTransitions constraintAnnotation)", "full_signature": "@Override public void initialize(HasTransitions constraintAnnotation)", "class_method_signature": "HasTransitionsValidator.initialize(HasTransitions constraintAnnotation)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "class_method_signature": "HasTransitionsValidator.isValid(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/validation/validator/HasTransitionsValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(SetPagesTransitionParameters value, ConstraintValidatorContext context) {\n        if (value != null) {\n            return value.getDefaultTransition() != null || !value.getTransitions().isEmpty();\n        }\n        return true;\n    }", "signature": "boolean isValid(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "class_method_signature": "HasTransitionsValidator.isValid(SetPagesTransitionParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["getDefaultTransition", "isEmpty", "getTransitions"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}