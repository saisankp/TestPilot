{"test_class": {"identifier": "DXSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "private DXProject testProject;", "modifier": "private", "type": "DXProject", "declarator": "testProject", "var_name": "testProject"}], "file": "src/java/src/test/java/com/dnanexus/DXSearchTest.java"}, "test_case": {"identifier": "testFindDataObjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindDataObjects() {\n        DXRecord moo = DXRecord.newRecord().setProject(testProject).setName(\"Moo\")\n                .putProperty(\"sampleId\", \"1\").putProperty(\"process\", \"a\")\n                .addTypes(ImmutableList.of(\"genome\", \"report\")).build().close();\n        sleep(1500); // sleep to break \"created\" timestamp ties\n        DXRecord foo = DXRecord.newRecord().setProject(testProject).setName(\"foo\")\n                .putProperty(\"sampleId\", \"2\").addTags(ImmutableList.of(\"mytag\"))\n                .addTypes(ImmutableList.of(\"genome\")).build().close();\n        sleep(1500);\n        DXRecord food = DXRecord.newRecord().setProject(testProject).setName(\"food\")\n                .putProperty(\"process\", \"a\").setFolder(\"/subfolder\", true)\n                .addTypes(ImmutableList.of(\"report\")).build().close();\n        sleep(1500);\n        DXRecord open = DXRecord.newRecord().setProject(testProject).setName(\"open\")\n                .addTypes(ImmutableList.of(\"type\")).build();\n        DXRecord invisible =\n                DXRecord.newRecord().setProject(testProject).setName(\"invisible\")\n                        .setVisibility(false).build().close();\n\n        // nameMatches*\n\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().nameMatchesExactly(\"foo\").inProject(testProject)\n                        .execute().asList(), foo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().nameMatchesGlob(\"foo*\").inProject(testProject).execute()\n                        .asList(), foo, food);\n        assertEqualsAnyOrder(DXSearch.findDataObjects().nameMatchesRegexp(\"[a-m]oo[^x]?\")\n                .inProject(testProject).execute().asList(), foo, food);\n        assertEqualsAnyOrder(DXSearch.findDataObjects().nameMatchesRegexp(\"[a-m]oo[^x]?\", true)\n                .inProject(testProject).execute().asList(), moo, foo, food);\n\n        // {created,modified}{Before,After}\n\n        // We rely on the fact that\n        // moo.created <= foo.created <= food.created <= open.created\n        // with equality possible since the creation timestamp is encoded at\n        // 1-sec resolution\n\n        List<DXDataObject> createdBeforeResults =\n                DXSearch.findDataObjects().inProject(testProject)\n                        .createdBefore(moo.describe().getCreationDate()).execute().asList();\n        Assert.assertTrue(1 <= createdBeforeResults.size() && createdBeforeResults.size() <= 4);\n        Assert.assertTrue(createdBeforeResults.contains(moo));\n\n        List<DXDataObject> createdAfterResults =\n                DXSearch.findDataObjects().inProject(testProject)\n                        .createdAfter(food.describe().getCreationDate()).execute().asList();\n        Assert.assertTrue(2 <= createdAfterResults.size() && createdAfterResults.size() <= 4);\n        Assert.assertTrue(createdAfterResults.contains(food));\n        Assert.assertTrue(createdAfterResults.contains(open));\n\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .modifiedBefore(foo.describe().getModificationDate()).execute().asList(),\n                moo, foo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .modifiedAfter(foo.describe().getModificationDate()).execute().asList(),\n                foo, food, open);\n\n        // inFolder and friends\n\n        assertEqualsAnyOrder(DXSearch.findDataObjects().inFolder(testProject, \"/\").execute()\n                .asList(), moo, foo, open);\n        assertEqualsAnyOrder(DXSearch.findDataObjects().inFolderOrSubfolders(testProject, \"/\")\n                .execute().asList(), moo, foo, food, open);\n\n        // sortBy\n\n        assertEqualsOrdered(DXSearch.findDataObjects().inFolder(testProject, \"/\")\n                .withSortBy(\"created\", DXSearch.Ordering.ASCENDING)\n                .execute().asList(), moo, foo, open);\n        assertEqualsAnyOrder(DXSearch.findDataObjects().inFolderOrSubfolders(testProject, \"/\")\n                .withSortBy(\"created\", DXSearch.Ordering.DESCENDING)\n                .execute().asList(), open, foo, food, moo);\n\n        // withProperty\n\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject).withProperty(\"sampleId\")\n                        .execute().asList(), moo, foo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject).withProperty(\"sampleId\", \"2\")\n                        .execute().asList(), foo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects()\n                        .inProject(testProject)\n                        .withProperties(\n                                PropertiesQuery.allOf(PropertiesQuery.withKey(\"sampleId\"),\n                                        PropertiesQuery.withKeyAndValue(\"process\", \"a\"))).execute()\n                        .asList(), moo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects()\n                        .inProject(testProject)\n                        .withProperties(\n                                PropertiesQuery.anyOf(PropertiesQuery.withKey(\"sampleId\"),\n                                        PropertiesQuery.withKeyAndValue(\"process\", \"a\"))).execute()\n                        .asList(), moo, foo, food);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withProperty(\"sampleId\", false)\n                        .execute().asList(), open, food);\n\n        Map<String, String> notEqualMap = new HashMap<String, String>() {{ put(\"$ne\", \"1\"); }};\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withProperty(\"sampleId\", notEqualMap)\n                        .execute().asList(), foo);\n\n        Map<String, String> notEqual1 = new HashMap<String, String>() {{ put(\"$ne\", \"1\"); }};\n        Map<String, String> notEqual2 = new HashMap<String, String>() {{ put(\"$ne\", \"2\"); }};\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withProperties(\n                                PropertiesQuery.allOf(PropertiesQuery.withKeyAndMapValue(\"sampleId\", notEqual1),\n                                                      PropertiesQuery.withKeyAndMapValue(\"sampleId\", notEqual2))\n                        )\n                        .execute().asList());\n\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withProperties(\n                                PropertiesQuery.anyOf(PropertiesQuery.withKeyAndBoolean(\"sampleId\", true),\n                                                      PropertiesQuery.withKeyAndBoolean(\"process\", false))\n                        )\n                        .execute().asList(), moo, foo, open);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withProperties(\n                                PropertiesQuery.allOf(PropertiesQuery.withKeyAndBoolean(\"sampleId\", true),\n                                                      PropertiesQuery.withKeyAndBoolean(\"sampleId\", false))\n                        )\n                        .execute().asList());\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withProperty(\"xyzxyzxyz\", false)\n                        .execute().asList(), moo, foo, food, open);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inFolderOrSubfolders(testProject, \"/subfolder\")\n                        .withProperty(\"process\", true)\n                        .execute().asList(), food);\n\n        // withState\n\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject).withState(DataObjectState.CLOSED)\n                        .execute().asList(), moo, foo, food);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject).withState(DataObjectState.OPEN)\n                        .execute().asList(), open);\n\n        // withTags\n\n        assertEqualsAnyOrder(DXSearch.findDataObjects().inProject(testProject).withTag(\"mytag\")\n                .execute().asList(), foo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withTags(DXSearch.TagsQuery.anyOf(\"mytag\", \"zyzzx\")).execute().asList(),\n                foo);\n\n        // withTypes\n\n        assertEqualsAnyOrder(DXSearch.findDataObjects().inProject(testProject).withType(\"genome\")\n                .execute().asList(), moo, foo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withTypes(TypeQuery.allOf(\"genome\", \"report\")).execute().asList(), moo);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withTypes(TypeQuery.anyOf(\"genome\", \"report\")).execute().asList(), moo,\n                foo, food);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects()\n                        .inProject(testProject)\n                        .withTypes(\n                                TypeQuery.anyOf(TypeQuery.allOf(\"genome\", \"report\"),\n                                        TypeQuery.of(\"type\"))).execute().asList(), moo, open);\n\n        // withVisibility\n\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withVisibility(DXSearch.VisibilityQuery.HIDDEN).execute().asList(),\n                invisible);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withVisibility(DXSearch.VisibilityQuery.VISIBLE).execute().asList(), moo,\n                foo, food, open);\n        assertEqualsAnyOrder(\n                DXSearch.findDataObjects().inProject(testProject)\n                        .withVisibility(DXSearch.VisibilityQuery.EITHER).execute().asList(), moo,\n                foo, food, open, invisible);\n\n        // withIdsIn\n\n        assertEqualsAnyOrder(DXSearch.findDataObjects().withIdsIn(ImmutableList.of(moo, foo))\n                .execute().asList(), moo, foo);\n        // Hidden objects don't get returned unless specifically requested\n        assertEqualsAnyOrder(DXSearch.findDataObjects().withIdsIn(ImmutableList.of(moo, invisible))\n                .execute().asList(), moo);\n        assertEqualsAnyOrder(DXSearch.findDataObjects().withIdsIn(ImmutableList.of(moo, invisible))\n                .withVisibility(VisibilityQuery.EITHER).execute().asList(), moo, invisible);\n\n        // TODO: withLinkTo, withMinimumAccessLevel\n\n    }", "signature": "void testFindDataObjects()", "full_signature": "@Test public void testFindDataObjects()", "class_method_signature": "DXSearchTest.testFindDataObjects()", "testcase": true, "constructor": false, "invocations": ["close", "build", "addTypes", "putProperty", "putProperty", "setName", "setProject", "newRecord", "of", "sleep", "close", "build", "addTypes", "addTags", "putProperty", "setName", "setProject", "newRecord", "of", "of", "sleep", "close", "build", "addTypes", "setFolder", "putProperty", "setName", "setProject", "newRecord", "of", "sleep", "build", "addTypes", "setName", "setProject", "newRecord", "of", "close", "build", "setVisibility", "setName", "setProject", "newRecord", "assertEqualsAnyOrder", "asList", "execute", "inProject", "nameMatchesExactly", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "inProject", "nameMatchesGlob", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "inProject", "nameMatchesRegexp", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "inProject", "nameMatchesRegexp", "findDataObjects", "asList", "execute", "createdBefore", "inProject", "findDataObjects", "getCreationDate", "describe", "assertTrue", "size", "size", "assertTrue", "contains", "asList", "execute", "createdAfter", "inProject", "findDataObjects", "getCreationDate", "describe", "assertTrue", "size", "size", "assertTrue", "contains", "assertTrue", "contains", "assertEqualsAnyOrder", "asList", "execute", "modifiedBefore", "inProject", "findDataObjects", "getModificationDate", "describe", "assertEqualsAnyOrder", "asList", "execute", "modifiedAfter", "inProject", "findDataObjects", "getModificationDate", "describe", "assertEqualsAnyOrder", "asList", "execute", "inFolder", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "inFolderOrSubfolders", "findDataObjects", "assertEqualsOrdered", "asList", "execute", "withSortBy", "inFolder", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withSortBy", "inFolderOrSubfolders", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withProperties", "inProject", "findDataObjects", "allOf", "withKey", "withKeyAndValue", "assertEqualsAnyOrder", "asList", "execute", "withProperties", "inProject", "findDataObjects", "anyOf", "withKey", "withKeyAndValue", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findDataObjects", "put", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findDataObjects", "put", "put", "assertEqualsAnyOrder", "asList", "execute", "withProperties", "inProject", "findDataObjects", "allOf", "withKeyAndMapValue", "withKeyAndMapValue", "assertEqualsAnyOrder", "asList", "execute", "withProperties", "inProject", "findDataObjects", "anyOf", "withKeyAndBoolean", "withKeyAndBoolean", "assertEqualsAnyOrder", "asList", "execute", "withProperties", "inProject", "findDataObjects", "allOf", "withKeyAndBoolean", "withKeyAndBoolean", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withProperty", "inFolderOrSubfolders", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withState", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withState", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withTag", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withTags", "inProject", "findDataObjects", "anyOf", "assertEqualsAnyOrder", "asList", "execute", "withType", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withTypes", "inProject", "findDataObjects", "allOf", "assertEqualsAnyOrder", "asList", "execute", "withTypes", "inProject", "findDataObjects", "anyOf", "assertEqualsAnyOrder", "asList", "execute", "withTypes", "inProject", "findDataObjects", "anyOf", "allOf", "of", "assertEqualsAnyOrder", "asList", "execute", "withVisibility", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withVisibility", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withVisibility", "inProject", "findDataObjects", "assertEqualsAnyOrder", "asList", "execute", "withIdsIn", "findDataObjects", "of", "assertEqualsAnyOrder", "asList", "execute", "withIdsIn", "findDataObjects", "of", "assertEqualsAnyOrder", "asList", "execute", "withVisibility", "withIdsIn", "findDataObjects", "of"]}, "focal_class": {"identifier": "DXSearch", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper MAPPER = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "MAPPER = new ObjectMapper()", "var_name": "MAPPER"}], "methods": [{"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false}, {"identifier": "findDataObjectsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjectsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findDataObjectsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findExecutions", "parameters": "()", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutions()", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutions()", "class_method_signature": "DXSearch.findExecutions()", "testcase": false, "constructor": false}, {"identifier": "findExecutionsWithEnvironment", "parameters": "(\n            DXEnvironment env)", "modifiers": "public static", "return": "FindExecutionsRequestBuilder<DXExecution>", "signature": "FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "full_signature": "public static FindExecutionsRequestBuilder<DXExecution> findExecutionsWithEnvironment(\n            DXEnvironment env)", "class_method_signature": "DXSearch.findExecutionsWithEnvironment(\n            DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "findJobs", "parameters": "()", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobs()", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobs()", "class_method_signature": "DXSearch.findJobs()", "testcase": false, "constructor": false}, {"identifier": "findJobsWithEnvironment", "parameters": "(DXEnvironment env)", "modifiers": "@Deprecated public static", "return": "FindExecutionsRequestBuilder<DXJob>", "signature": "FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "full_signature": "@Deprecated public static FindExecutionsRequestBuilder<DXJob> findJobsWithEnvironment(DXEnvironment env)", "class_method_signature": "DXSearch.findJobsWithEnvironment(DXEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "serializeCompoundQuery", "parameters": "(String operator, List<? extends Object> operands)", "modifiers": "private static", "return": "JsonNode", "signature": "JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "full_signature": "private static JsonNode serializeCompoundQuery(String operator, List<? extends Object> operands)", "class_method_signature": "DXSearch.serializeCompoundQuery(String operator, List<? extends Object> operands)", "testcase": false, "constructor": false}, {"identifier": "DXSearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " DXSearch()", "full_signature": "private  DXSearch()", "class_method_signature": "DXSearch.DXSearch()", "testcase": false, "constructor": true}], "file": "src/java/src/main/java/com/dnanexus/DXSearch.java"}, "focal_method": {"identifier": "findDataObjects", "parameters": "()", "modifiers": "public static", "return": "FindDataObjectsRequestBuilder<DXDataObject>", "body": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects() {\n        return new FindDataObjectsRequestBuilder<DXDataObject>();\n    }", "signature": "FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "full_signature": "public static FindDataObjectsRequestBuilder<DXDataObject> findDataObjects()", "class_method_signature": "DXSearch.findDataObjects()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 4802269, "url": "https://github.com/dnanexus/dx-toolkit", "stars": 59, "created": "6/27/2012 12:23:47 AM +00:00", "updates": "2020-01-21T16:35:18+00:00", "fork": "False", "license": "licensed"}}