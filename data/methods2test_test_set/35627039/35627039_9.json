{"test_class": {"identifier": "AmbariMetricsServiceWithStormQuerierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST_COLLECTOR_API_PATH = \"/ws/v1/timeline/metrics\";", "modifier": "private final", "type": "String", "declarator": "TEST_COLLECTOR_API_PATH = \"/ws/v1/timeline/metrics\"", "var_name": "TEST_COLLECTOR_API_PATH"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(18089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(18089)", "var_name": "wireMockRule"}, {"original_string": "private AmbariMetricsServiceWithStormQuerier querier;", "modifier": "private", "type": "AmbariMetricsServiceWithStormQuerier", "declarator": "querier", "var_name": "querier"}], "file": "streams/runners/storm/metrics/src/test/java/com/hortonworks/streamline/streams/metrics/storm/ambari/AmbariMetricsServiceWithStormQuerierTest.java"}, "test_case": {"identifier": "getMetricsWithStreamAggregation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getMetricsWithStreamAggregation() throws Exception {\n        stubMetricUrl();\n\n        String topologyName = \"testTopology\";\n        String componentId = \"testComponent\";\n        // this is one of metric which needs stream aggregation\n        String metricName = \"__emit-count\";\n        TimeSeriesQuerier.AggregateFunction aggrFunction = TimeSeriesQuerier.AggregateFunction.SUM;\n        long from = 1234L;\n        long to = 5678L;\n\n        Map<Long, Double> metrics = querier.getMetrics(topologyName, componentId, metricName, aggrFunction, from, to);\n        assertResult(metrics, aggrFunction);\n\n        verify(getRequestedFor(urlPathEqualTo(TEST_COLLECTOR_API_PATH))\n                .withQueryParam(\"appId\", equalTo(DEFAULT_APP_ID))\n                .withQueryParam(\"hostname\", equalTo(\"\"))\n                .withQueryParam(\"metricNames\", equalTo(\"topology.testTopology.testComponent.%.--emit-count.%\"))\n                .withQueryParam(\"startTime\", equalTo(\"1234\"))\n                .withQueryParam(\"endTime\", equalTo(\"5678\")));\n    }", "signature": "void getMetricsWithStreamAggregation()", "full_signature": "@Test public void getMetricsWithStreamAggregation()", "class_method_signature": "AmbariMetricsServiceWithStormQuerierTest.getMetricsWithStreamAggregation()", "testcase": true, "constructor": false, "invocations": ["stubMetricUrl", "getMetrics", "assertResult", "verify", "withQueryParam", "withQueryParam", "withQueryParam", "withQueryParam", "withQueryParam", "getRequestedFor", "urlPathEqualTo", "equalTo", "equalTo", "equalTo", "equalTo", "equalTo"]}, "focal_class": {"identifier": "AmbariMetricsServiceWithStormQuerier", "superclass": "extends AbstractTimeSeriesQuerier", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AmbariMetricsServiceWithStormQuerier.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AmbariMetricsServiceWithStormQuerier.class)", "var_name": "log"}, {"original_string": "public static final String METRIC_NAME_PREFIX_KAFKA_OFFSET = \"kafkaOffset.\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_NAME_PREFIX_KAFKA_OFFSET = \"kafkaOffset.\"", "var_name": "METRIC_NAME_PREFIX_KAFKA_OFFSET"}, {"original_string": "static final String COLLECTOR_API_URL = \"collectorApiUrl\";", "modifier": "static final", "type": "String", "declarator": "COLLECTOR_API_URL = \"collectorApiUrl\"", "var_name": "COLLECTOR_API_URL"}, {"original_string": "static final String APP_ID = \"appId\";", "modifier": "static final", "type": "String", "declarator": "APP_ID = \"appId\"", "var_name": "APP_ID"}, {"original_string": "private static final List<String> METRICS_NEED_AGGREGATION_ON_STREAMS = ImmutableList.<String>builder().add(\n            \"__complete-latency\", \"__emit-count\", \"__ack-count\", \"__fail-count\",\n            \"__process-latency\", \"__execute-count\", \"__execute-latency\"\n    ).build();", "modifier": "private static final", "type": "List<String>", "declarator": "METRICS_NEED_AGGREGATION_ON_STREAMS = ImmutableList.<String>builder().add(\n            \"__complete-latency\", \"__emit-count\", \"__ack-count\", \"__fail-count\",\n            \"__process-latency\", \"__execute-count\", \"__execute-latency\"\n    ).build()", "var_name": "METRICS_NEED_AGGREGATION_ON_STREAMS"}, {"original_string": "private static final Map<String, String> METRICS_APPLY_WEIGHTED_AVERAGE_PAIR =\n            ImmutableMap.<String, String>builder()\n                    .put(\"--complete-latency\", \"--ack-count\")\n                    .put(\"--process-latency\", \"--execute-count\")\n                    .put(\"--execute-latency\", \"--execute-count\")\n                    .build();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "METRICS_APPLY_WEIGHTED_AVERAGE_PAIR =\n            ImmutableMap.<String, String>builder()\n                    .put(\"--complete-latency\", \"--ack-count\")\n                    .put(\"--process-latency\", \"--execute-count\")\n                    .put(\"--execute-latency\", \"--execute-count\")\n                    .build()", "var_name": "METRICS_APPLY_WEIGHTED_AVERAGE_PAIR"}, {"original_string": "private static final List<String> SYSTEM_STREAM_PREFIX = ImmutableList.<String>builder()\n            .add(\"--metric\", \"--ack-init\", \"--ack-ack\", \"--ack-fail\", \"--ack-reset-timeout\", \"--system\").build();", "modifier": "private static final", "type": "List<String>", "declarator": "SYSTEM_STREAM_PREFIX = ImmutableList.<String>builder()\n            .add(\"--metric\", \"--ack-init\", \"--ack-ack\", \"--ack-fail\", \"--ack-reset-timeout\", \"--system\").build()", "var_name": "SYSTEM_STREAM_PREFIX"}, {"original_string": "static final String DEFAULT_APP_ID = \"nimbus\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_APP_ID = \"nimbus\"", "var_name": "DEFAULT_APP_ID"}, {"original_string": "private static final String WILDCARD_ALL_COMPONENTS = \"%\";", "modifier": "private static final", "type": "String", "declarator": "WILDCARD_ALL_COMPONENTS = \"%\"", "var_name": "WILDCARD_ALL_COMPONENTS"}, {"original_string": "private Client client;", "modifier": "private", "type": "Client", "declarator": "client", "var_name": "client"}, {"original_string": "private URI collectorApiUri;", "modifier": "private", "type": "URI", "declarator": "collectorApiUri", "var_name": "collectorApiUri"}, {"original_string": "private String appId;", "modifier": "private", "type": "String", "declarator": "appId", "var_name": "appId"}], "methods": [{"identifier": "AmbariMetricsServiceWithStormQuerier", "parameters": "()", "modifiers": "public", "return": "", "signature": " AmbariMetricsServiceWithStormQuerier()", "full_signature": "public  AmbariMetricsServiceWithStormQuerier()", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.AmbariMetricsServiceWithStormQuerier()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Map<String, String> conf)", "modifiers": "@Override public", "return": "void", "signature": "void init(Map<String, String> conf)", "full_signature": "@Override public void init(Map<String, String> conf)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.init(Map<String, String> conf)", "testcase": false, "constructor": false}, {"identifier": "getTopologyLevelMetrics", "parameters": "(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getTopologyLevelMetrics(String topologyName, String metricName,\n                                                     AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "signature": "Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getRawMetrics", "parameters": "(String metricName, String parameters, long from, long to)", "modifiers": "@Override public", "return": "Map<String, Map<Long, Double>>", "signature": "Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "full_signature": "@Override public Map<String, Map<Long, Double>> getRawMetrics(String metricName, String parameters, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getRawMetrics(String metricName, String parameters, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "composeRawQueryParameters", "parameters": "(String metricName, Map<String, String> queryParams, long from, long to)", "modifiers": "private", "return": "URI", "signature": "URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "full_signature": "private URI composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.composeRawQueryParameters(String metricName, Map<String, String> queryParams, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "composeQueryParameters", "parameters": "(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "modifiers": "private", "return": "URI", "signature": "URI composeQueryParameters(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "full_signature": "private URI composeQueryParameters(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.composeQueryParameters(String topologyName, String componentId, String metricName,\n                                       long from, long to)", "testcase": false, "constructor": false}, {"identifier": "buildMetricName", "parameters": "(String topologyName, String componentId, String metricName)", "modifiers": "private", "return": "String", "signature": "String buildMetricName(String topologyName, String componentId, String metricName)", "full_signature": "private String buildMetricName(String topologyName, String componentId, String metricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.buildMetricName(String topologyName, String componentId, String metricName)", "testcase": false, "constructor": false}, {"identifier": "createKafkaOffsetMetricName", "parameters": "(String topologyName, String kafkaOffsetMetricName)", "modifiers": "private", "return": "String", "signature": "String createKafkaOffsetMetricName(String topologyName, String kafkaOffsetMetricName)", "full_signature": "private String createKafkaOffsetMetricName(String topologyName, String kafkaOffsetMetricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.createKafkaOffsetMetricName(String topologyName, String kafkaOffsetMetricName)", "testcase": false, "constructor": false}, {"identifier": "aggregateWithApplyingWeightedAverage", "parameters": "(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "modifiers": "@VisibleForTesting", "return": "Map<Long, Double>", "signature": "Map<Long, Double> aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "full_signature": "@VisibleForTesting Map<Long, Double> aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.aggregateWithApplyingWeightedAverage(Map<Long, List<Pair<String, Double>>> keyMetric,\n                                                                   Map<Long, List<Pair<String, Double>>> weightMetric)", "testcase": false, "constructor": false}, {"identifier": "findWeightMetric", "parameters": "(String metricName)", "modifiers": "private", "return": "Optional<String>", "signature": "Optional<String> findWeightMetric(String metricName)", "full_signature": "private Optional<String> findWeightMetric(String metricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.findWeightMetric(String metricName)", "testcase": false, "constructor": false}, {"identifier": "aggregateStreamsForMetricsValues", "parameters": "(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "modifiers": "private", "return": "Map<Long, Double>", "signature": "Map<Long, Double> aggregateStreamsForMetricsValues(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "full_signature": "private Map<Long, Double> aggregateStreamsForMetricsValues(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.aggregateStreamsForMetricsValues(Map<Long, List<Pair<String, Double>>> ret, AggregateFunction aggrFunction)", "testcase": false, "constructor": false}, {"identifier": "getMetricsStreamToValueMap", "parameters": "(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "modifiers": "private", "return": "Map<Long, List<Pair<String, Double>>>", "signature": "Map<Long, List<Pair<String, Double>>> getMetricsStreamToValueMap(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "full_signature": "private Map<Long, List<Pair<String, Double>>> getMetricsStreamToValueMap(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getMetricsStreamToValueMap(String topologyName, String componentId,\n                                                                             String metricName, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "getMetricsMap", "parameters": "(String topologyName, String componentId, String metricName, long from, long to)", "modifiers": "private", "return": "List<Map<String, ?>>", "signature": "List<Map<String, ?>> getMetricsMap(String topologyName, String componentId, String metricName, long from, long to)", "full_signature": "private List<Map<String, ?>> getMetricsMap(String topologyName, String componentId, String metricName, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getMetricsMap(String topologyName, String componentId, String metricName, long from, long to)", "testcase": false, "constructor": false}, {"identifier": "isMetricFromSystemStream", "parameters": "(String metricName)", "modifiers": "private", "return": "boolean", "signature": "boolean isMetricFromSystemStream(String metricName)", "full_signature": "private boolean isMetricFromSystemStream(String metricName)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.isMetricFromSystemStream(String metricName)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/metrics/src/main/java/com/hortonworks/streamline/streams/metrics/storm/ambari/AmbariMetricsServiceWithStormQuerier.java"}, "focal_method": {"identifier": "getMetrics", "parameters": "(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "modifiers": "@Override public", "return": "Map<Long, Double>", "body": "@Override\n    public Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to) {\n\n        Optional<String> weightMetric = findWeightMetric(metricName);\n\n        if (weightMetric.isPresent()) {\n            Map<Long, List<Pair<String, Double>>> keyMetrics = getMetricsStreamToValueMap(topologyName, componentId,\n                    metricName, from, to);\n            Map<Long, List<Pair<String, Double>>> weightMetrics = getMetricsStreamToValueMap(topologyName, componentId,\n                    weightMetric.get(), from, to);\n            return aggregateWithApplyingWeightedAverage(keyMetrics, weightMetrics);\n        } else {\n            Map<Long, List<Pair<String, Double>>> ret = getMetricsStreamToValueMap(topologyName, componentId, metricName, from, to);\n            return aggregateStreamsForMetricsValues(ret, aggrFunction);\n        }\n    }", "signature": "Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "full_signature": "@Override public Map<Long, Double> getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "class_method_signature": "AmbariMetricsServiceWithStormQuerier.getMetrics(String topologyName, String componentId, String metricName,\n                                        AggregateFunction aggrFunction, long from, long to)", "testcase": false, "constructor": false, "invocations": ["findWeightMetric", "isPresent", "getMetricsStreamToValueMap", "getMetricsStreamToValueMap", "get", "aggregateWithApplyingWeightedAverage", "getMetricsStreamToValueMap", "aggregateStreamsForMetricsValues"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}