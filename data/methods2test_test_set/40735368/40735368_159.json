{"test_class": {"identifier": "EmfAppSchemaReaderTest", "superclass": "extends AppSchemaTestSupport", "interfaces": "", "fields": [{"original_string": "private static final String NS_URI = \"http://online.socialchange.net.au\";", "modifier": "private static final", "type": "String", "declarator": "NS_URI = \"http://online.socialchange.net.au\"", "var_name": "NS_URI"}], "file": "modules/extension/app-schema/app-schema/src/test/java/org/geotools/data/complex/config/EmfAppSchemaReaderTest.java"}, "test_case": {"identifier": "testSimpleAttributeFromComplexDeclaration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimpleAttributeFromComplexDeclaration() throws Exception {\n        String res = \"/test-data/complexFeature.xsd\";\n        URL resource = getClass().getResource(res);\n        SchemaIndex schemaIndex = EmfAppSchemaReader.newInstance().parse(resource);\n\n        AppSchemaFeatureTypeRegistry registry = new AppSchemaFeatureTypeRegistry();\n        try {\n            registry.addSchemas(schemaIndex);\n    \n            Name tcl = Types.typeName(NS_URI, \"TypedCategoryListType\");\n            AttributeType typedCategoryListType = registry.getAttributeType(tcl);\n            Assert.assertNotNull(typedCategoryListType);\n            Assert.assertTrue(typedCategoryListType instanceof ComplexType);\n    \n            AttributeType superType = typedCategoryListType.getSuper();\n            Assert.assertNotNull(superType);\n            Name superName = superType.getName();\n            Assert.assertEquals(XS.STRING.getNamespaceURI(), superName.getNamespaceURI());\n            Assert.assertEquals(XS.STRING.getLocalPart(), superName.getLocalPart());\n    \n            Assert.assertNotNull(typedCategoryListType.getUserData().get(XSDTypeDefinition.class));\n        }\n        finally {\n            registry.disposeSchemaIndexes();\n        }\n    }", "signature": "void testSimpleAttributeFromComplexDeclaration()", "full_signature": "@Test public void testSimpleAttributeFromComplexDeclaration()", "class_method_signature": "EmfAppSchemaReaderTest.testSimpleAttributeFromComplexDeclaration()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "parse", "newInstance", "addSchemas", "typeName", "getAttributeType", "assertNotNull", "assertTrue", "getSuper", "assertNotNull", "getName", "assertEquals", "getNamespaceURI", "getNamespaceURI", "assertEquals", "getLocalPart", "getLocalPart", "assertNotNull", "get", "getUserData", "disposeSchemaIndexes"]}, "focal_class": {"identifier": "EmfAppSchemaReader", "superclass": "extends EmfComplexFeatureReader", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"serial\")\n    private static final Map<QName, Class<? extends Configuration>> SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP //\n    = new LinkedHashMap<QName, Class<? extends Configuration>>() {\n        {\n            // GML 3.1\n            put(GML.AbstractFeatureType, GMLConfiguration.class);\n            // GML 3.2\n            put(org.geotools.gml3.v3_2.GML.AbstractFeatureType,\n                    org.geotools.gml3.v3_2.GMLConfiguration.class);\n        }\n    };", "modifier": "@SuppressWarnings(\"serial\")\n    private static final", "type": "Map<QName, Class<? extends Configuration>>", "declarator": "SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP //\n    = new LinkedHashMap<QName, Class<? extends Configuration>>() {\n        {\n            // GML 3.1\n            put(GML.AbstractFeatureType, GMLConfiguration.class);\n            // GML 3.2\n            put(org.geotools.gml3.v3_2.GML.AbstractFeatureType,\n                    org.geotools.gml3.v3_2.GMLConfiguration.class);\n        }\n    }", "var_name": "SUPPORTED_GML_KNOWN_TYPE_TO_CONFIGURATION_MAP"}], "methods": [{"identifier": "EmfAppSchemaReader", "parameters": "()", "modifiers": "private", "return": "", "signature": " EmfAppSchemaReader()", "full_signature": "private  EmfAppSchemaReader()", "class_method_signature": "EmfAppSchemaReader.EmfAppSchemaReader()", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "EmfAppSchemaReader", "signature": "EmfAppSchemaReader newInstance()", "full_signature": "public static EmfAppSchemaReader newInstance()", "class_method_signature": "EmfAppSchemaReader.newInstance()", "testcase": false, "constructor": false}, {"identifier": "findGmlConfiguration", "parameters": "(AppSchemaConfiguration configuration)", "modifiers": "public static", "return": "Configuration", "signature": "Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "full_signature": "public static Configuration findGmlConfiguration(AppSchemaConfiguration configuration)", "class_method_signature": "EmfAppSchemaReader.findGmlConfiguration(AppSchemaConfiguration configuration)", "testcase": false, "constructor": false}], "file": "modules/extension/app-schema/app-schema/src/main/java/org/geotools/data/complex/config/EmfAppSchemaReader.java"}, "focal_method": {"identifier": "newInstance", "parameters": "()", "modifiers": "public static", "return": "EmfAppSchemaReader", "body": "public static EmfAppSchemaReader newInstance() {\n        return new EmfAppSchemaReader();\n    }", "signature": "EmfAppSchemaReader newInstance()", "full_signature": "public static EmfAppSchemaReader newInstance()", "class_method_signature": "EmfAppSchemaReader.newInstance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}