{"test_class": {"identifier": "QueryStatementSplitterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private QueryStatementSplitter splitter;", "modifier": "private", "type": "QueryStatementSplitter", "declarator": "splitter", "var_name": "splitter"}], "file": "dbdeploy-core/src/test/java/com/dbdeploy/database/QueryStatementSplitterTest.java"}, "test_case": {"identifier": "shouldSplitStatementsOnASemicolonAtTheEndOfALineIgnoringWhitespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSplitStatementsOnASemicolonAtTheEndOfALineIgnoringWhitespace() throws Exception {\n        List<String> result = splitter.split(\"SELECT 1;  \\nSELECT 2;  \");\n        assertThat(result, hasItems(\"SELECT 1\", \"SELECT 2\"));\n        assertThat(result.size(), is(2));\n    }", "signature": "void shouldSplitStatementsOnASemicolonAtTheEndOfALineIgnoringWhitespace()", "full_signature": "@Test public void shouldSplitStatementsOnASemicolonAtTheEndOfALineIgnoringWhitespace()", "class_method_signature": "QueryStatementSplitterTest.shouldSplitStatementsOnASemicolonAtTheEndOfALineIgnoringWhitespace()", "testcase": true, "constructor": false, "invocations": ["split", "assertThat", "hasItems", "assertThat", "size", "is"]}, "focal_class": {"identifier": "QueryStatementSplitter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String delimiter = \";\";", "modifier": "private", "type": "String", "declarator": "delimiter = \";\"", "var_name": "delimiter"}, {"original_string": "private DelimiterType delimiterType = DelimiterType.normal;", "modifier": "private", "type": "DelimiterType", "declarator": "delimiterType = DelimiterType.normal", "var_name": "delimiterType"}, {"original_string": "private LineEnding lineEnding = LineEnding.platform;", "modifier": "private", "type": "LineEnding", "declarator": "lineEnding = LineEnding.platform", "var_name": "lineEnding"}], "methods": [{"identifier": "QueryStatementSplitter", "parameters": "()", "modifiers": "public", "return": "", "signature": " QueryStatementSplitter()", "full_signature": "public  QueryStatementSplitter()", "class_method_signature": "QueryStatementSplitter.QueryStatementSplitter()", "testcase": false, "constructor": true}, {"identifier": "split", "parameters": "(String input)", "modifiers": "public", "return": "List<String>", "signature": "List<String> split(String input)", "full_signature": "public List<String> split(String input)", "class_method_signature": "QueryStatementSplitter.split(String input)", "testcase": false, "constructor": false}, {"identifier": "getDelimiter", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDelimiter()", "full_signature": "public String getDelimiter()", "class_method_signature": "QueryStatementSplitter.getDelimiter()", "testcase": false, "constructor": false}, {"identifier": "setDelimiter", "parameters": "(String delimiter)", "modifiers": "public", "return": "void", "signature": "void setDelimiter(String delimiter)", "full_signature": "public void setDelimiter(String delimiter)", "class_method_signature": "QueryStatementSplitter.setDelimiter(String delimiter)", "testcase": false, "constructor": false}, {"identifier": "getDelimiterType", "parameters": "()", "modifiers": "public", "return": "DelimiterType", "signature": "DelimiterType getDelimiterType()", "full_signature": "public DelimiterType getDelimiterType()", "class_method_signature": "QueryStatementSplitter.getDelimiterType()", "testcase": false, "constructor": false}, {"identifier": "setDelimiterType", "parameters": "(DelimiterType delimiterType)", "modifiers": "public", "return": "void", "signature": "void setDelimiterType(DelimiterType delimiterType)", "full_signature": "public void setDelimiterType(DelimiterType delimiterType)", "class_method_signature": "QueryStatementSplitter.setDelimiterType(DelimiterType delimiterType)", "testcase": false, "constructor": false}, {"identifier": "setOutputLineEnding", "parameters": "(LineEnding lineEnding)", "modifiers": "public", "return": "void", "signature": "void setOutputLineEnding(LineEnding lineEnding)", "full_signature": "public void setOutputLineEnding(LineEnding lineEnding)", "class_method_signature": "QueryStatementSplitter.setOutputLineEnding(LineEnding lineEnding)", "testcase": false, "constructor": false}], "file": "dbdeploy-core/src/main/java/com/dbdeploy/database/QueryStatementSplitter.java"}, "focal_method": {"identifier": "split", "parameters": "(String input)", "modifiers": "public", "return": "List<String>", "body": "public List<String> split(String input) {\n        List<String> statements = new ArrayList<String>();\n        StrBuilder currentSql = new StrBuilder();\n\n        StrTokenizer lineTokenizer = new StrTokenizer(input);\n        lineTokenizer.setDelimiterMatcher(StrMatcher.charSetMatcher(\"\\r\\n\"));\n\n        for (String line : lineTokenizer.getTokenArray()) {\n\t        String strippedLine = StringUtils.stripEnd(line, null);\n            if (!currentSql.isEmpty()) {\n                currentSql.append(lineEnding.get());\n            }\n\n            currentSql.append(strippedLine);\n\n           if (delimiterType.matches(strippedLine, delimiter)) {\n                statements.add(currentSql.substring(0, currentSql.length() - delimiter.length()));\n                currentSql.clear();\n            }\n        }\n\n        if (!currentSql.isEmpty()) {\n            statements.add(currentSql.toString());\n        }\n        \n        return statements;\n    }", "signature": "List<String> split(String input)", "full_signature": "public List<String> split(String input)", "class_method_signature": "QueryStatementSplitter.split(String input)", "testcase": false, "constructor": false, "invocations": ["setDelimiterMatcher", "charSetMatcher", "getTokenArray", "stripEnd", "isEmpty", "append", "get", "append", "matches", "add", "substring", "length", "length", "clear", "isEmpty", "add", "toString"]}, "repository": {"repo_id": 145875, "url": "https://github.com/tackley/dbdeploy", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 64, "size": 7295, "license": "licensed"}}