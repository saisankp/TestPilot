{"test_class": {"identifier": "JolokiaActivatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HTTP_SERVICE_FILTER = \"(objectClass=org.osgi.service.http.HttpService)\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_SERVICE_FILTER = \"(objectClass=org.osgi.service.http.HttpService)\"", "var_name": "HTTP_SERVICE_FILTER"}, {"original_string": "private static final String CONFIG_SERVICE_FILTER = \"(objectClass=org.osgi.service.cm.ConfigurationAdmin)\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_SERVICE_FILTER = \"(objectClass=org.osgi.service.cm.ConfigurationAdmin)\"", "var_name": "CONFIG_SERVICE_FILTER"}, {"original_string": "private static final String AUTHENTICATOR_SERVICE_FILTER =\n        \"(objectClass=\" + Authenticator.class.getName() + \")\";", "modifier": "private static final", "type": "String", "declarator": "AUTHENTICATOR_SERVICE_FILTER =\n        \"(objectClass=\" + Authenticator.class.getName() + \")\"", "var_name": "AUTHENTICATOR_SERVICE_FILTER"}, {"original_string": "private BundleContext context;", "modifier": "private", "type": "BundleContext", "declarator": "context", "var_name": "context"}, {"original_string": "private JolokiaActivator activator;", "modifier": "private", "type": "JolokiaActivator", "declarator": "activator", "var_name": "activator"}, {"original_string": "private ServiceListener httpServiceListener;", "modifier": "private", "type": "ServiceListener", "declarator": "httpServiceListener", "var_name": "httpServiceListener"}, {"original_string": "private ServiceRegistration registration;", "modifier": "private", "type": "ServiceRegistration", "declarator": "registration", "var_name": "registration"}, {"original_string": "private HttpService httpService;", "modifier": "private", "type": "HttpService", "declarator": "httpService", "var_name": "httpService"}, {"original_string": "private ServiceReference httpServiceReference;", "modifier": "private", "type": "ServiceReference", "declarator": "httpServiceReference", "var_name": "httpServiceReference"}, {"original_string": "private ServiceReference configAdminRef;", "modifier": "private", "type": "ServiceReference", "declarator": "configAdminRef", "var_name": "configAdminRef"}, {"original_string": "private ServiceListener configAdminServiceListener;", "modifier": "private", "type": "ServiceListener", "declarator": "configAdminServiceListener", "var_name": "configAdminServiceListener"}, {"original_string": "private ServiceListener authenticationServiceListener;", "modifier": "private", "type": "ServiceListener", "declarator": "authenticationServiceListener", "var_name": "authenticationServiceListener"}], "file": "agent/osgi/src/test/java/org/jolokia/osgi/JolokiaActivatorTest.java"}, "test_case": {"identifier": "testNoServiceAvailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoServiceAvailable() throws Exception {\n        final HttpServletRequest request = createMock(HttpServletRequest.class);\n        final HttpServletResponse response = createNiceMock(HttpServletResponse.class);\n        final Dictionary<String, String> dict = new Hashtable<String, String>();\n        dict.put(\"org.jolokia.authMode\", \"service-all\");\n        startActivator(true, AUTHENTICATOR_SERVICE_FILTER, dict);\n        startupHttpServiceWithConfigAdminProps(true);\n\n        expect(request.getHeader(\"Authorization\")).andReturn(\"Basic cm9sYW5kOnMhY3IhdA==\");\n        request.setAttribute(HttpContext.AUTHENTICATION_TYPE, HttpServletRequest.BASIC_AUTH);\n        request.setAttribute(HttpContext.REMOTE_USER, \"roland\");\n        replay(request, response);\n\n        // w/o an Authenticator Service registered, requests should always be denied.\n\n        final HttpContext httpContext = activator.getHttpContext();\n        assertFalse(httpContext.handleSecurity(request, response));\n\n        unregisterJolokiaServlet();\n        stopActivator(true);\n    }", "signature": "void testNoServiceAvailable()", "full_signature": "@Test public void testNoServiceAvailable()", "class_method_signature": "JolokiaActivatorTest.testNoServiceAvailable()", "testcase": true, "constructor": false, "invocations": ["createMock", "createNiceMock", "put", "startActivator", "startupHttpServiceWithConfigAdminProps", "andReturn", "expect", "getHeader", "setAttribute", "setAttribute", "replay", "getHttpContext", "assertFalse", "handleSecurity", "unregisterJolokiaServlet", "stopActivator"]}, "focal_class": {"identifier": "JolokiaActivator", "superclass": "", "interfaces": "implements BundleActivator, JolokiaContext", "fields": [{"original_string": "public static final String HTTP_SERVICE_FILTER_BASE =\n            \"(\" + Constants.OBJECTCLASS + \"=\" + HttpService.class.getName() + \")\";", "modifier": "public static final", "type": "String", "declarator": "HTTP_SERVICE_FILTER_BASE =\n            \"(\" + Constants.OBJECTCLASS + \"=\" + HttpService.class.getName() + \")\"", "var_name": "HTTP_SERVICE_FILTER_BASE"}, {"original_string": "private BundleContext bundleContext;", "modifier": "private", "type": "BundleContext", "declarator": "bundleContext", "var_name": "bundleContext"}, {"original_string": "private ServiceTracker httpServiceTracker;", "modifier": "private", "type": "ServiceTracker", "declarator": "httpServiceTracker", "var_name": "httpServiceTracker"}, {"original_string": "private ServiceTracker configAdminTracker;", "modifier": "private", "type": "ServiceTracker", "declarator": "configAdminTracker", "var_name": "configAdminTracker"}, {"original_string": "private static final String CONFIG_PREFIX = \"org.jolokia\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_PREFIX = \"org.jolokia\"", "var_name": "CONFIG_PREFIX"}, {"original_string": "private static final String CONFIG_ADMIN_PID = \"org.jolokia.osgi\";", "modifier": "private static final", "type": "String", "declarator": "CONFIG_ADMIN_PID = \"org.jolokia.osgi\"", "var_name": "CONFIG_ADMIN_PID"}, {"original_string": "private HttpContext jolokiaHttpContext;", "modifier": "private", "type": "HttpContext", "declarator": "jolokiaHttpContext", "var_name": "jolokiaHttpContext"}, {"original_string": "private ServiceRegistration jolokiaServiceRegistration;", "modifier": "private", "type": "ServiceRegistration", "declarator": "jolokiaServiceRegistration", "var_name": "jolokiaServiceRegistration"}, {"original_string": "private Restrictor restrictor = null;", "modifier": "private", "type": "Restrictor", "declarator": "restrictor = null", "var_name": "restrictor"}], "methods": [{"identifier": "start", "parameters": "(BundleContext pBundleContext)", "modifiers": "public", "return": "void", "signature": "void start(BundleContext pBundleContext)", "full_signature": "public void start(BundleContext pBundleContext)", "class_method_signature": "JolokiaActivator.start(BundleContext pBundleContext)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(BundleContext pBundleContext)", "modifiers": "public", "return": "void", "signature": "void stop(BundleContext pBundleContext)", "full_signature": "public void stop(BundleContext pBundleContext)", "class_method_signature": "JolokiaActivator.stop(BundleContext pBundleContext)", "testcase": false, "constructor": false}, {"identifier": "getHttpContext", "parameters": "()", "modifiers": "public synchronized", "return": "HttpContext", "signature": "HttpContext getHttpContext()", "full_signature": "public synchronized HttpContext getHttpContext()", "class_method_signature": "JolokiaActivator.getHttpContext()", "testcase": false, "constructor": false}, {"identifier": "getServletAlias", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServletAlias()", "full_signature": "public String getServletAlias()", "class_method_signature": "JolokiaActivator.getServletAlias()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "private", "return": "Dictionary<String,String>", "signature": "Dictionary<String,String> getConfiguration()", "full_signature": "private Dictionary<String,String> getConfiguration()", "class_method_signature": "JolokiaActivator.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "(ConfigKey pKey)", "modifiers": "private", "return": "String", "signature": "String getConfiguration(ConfigKey pKey)", "full_signature": "private String getConfiguration(ConfigKey pKey)", "class_method_signature": "JolokiaActivator.getConfiguration(ConfigKey pKey)", "testcase": false, "constructor": false}, {"identifier": "getConfigurationFromConfigAdmin", "parameters": "(ConfigKey pkey)", "modifiers": "private", "return": "String", "signature": "String getConfigurationFromConfigAdmin(ConfigKey pkey)", "full_signature": "private String getConfigurationFromConfigAdmin(ConfigKey pkey)", "class_method_signature": "JolokiaActivator.getConfigurationFromConfigAdmin(ConfigKey pkey)", "testcase": false, "constructor": false}, {"identifier": "buildHttpServiceFilter", "parameters": "(BundleContext pBundleContext)", "modifiers": "private", "return": "Filter", "signature": "Filter buildHttpServiceFilter(BundleContext pBundleContext)", "full_signature": "private Filter buildHttpServiceFilter(BundleContext pBundleContext)", "class_method_signature": "JolokiaActivator.buildHttpServiceFilter(BundleContext pBundleContext)", "testcase": false, "constructor": false}, {"identifier": "createAuthenticator", "parameters": "(String authMode)", "modifiers": "private", "return": "Authenticator", "signature": "Authenticator createAuthenticator(String authMode)", "full_signature": "private Authenticator createAuthenticator(String authMode)", "class_method_signature": "JolokiaActivator.createAuthenticator(String authMode)", "testcase": false, "constructor": false}, {"identifier": "createCustomAuthenticator", "parameters": "()", "modifiers": "private", "return": "Authenticator", "signature": "Authenticator createCustomAuthenticator()", "full_signature": "private Authenticator createCustomAuthenticator()", "class_method_signature": "JolokiaActivator.createCustomAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "lookupAuthenticator", "parameters": "(final Class<?> pAuthClass)", "modifiers": "private", "return": "Authenticator", "signature": "Authenticator lookupAuthenticator(final Class<?> pAuthClass)", "full_signature": "private Authenticator lookupAuthenticator(final Class<?> pAuthClass)", "class_method_signature": "JolokiaActivator.lookupAuthenticator(final Class<?> pAuthClass)", "testcase": false, "constructor": false}, {"identifier": "lookupAuthenticatorWithDefaultConstructor", "parameters": "(final Class<?> pAuthClass, final NoSuchMethodException ignore)", "modifiers": "private", "return": "Authenticator", "signature": "Authenticator lookupAuthenticatorWithDefaultConstructor(final Class<?> pAuthClass, final NoSuchMethodException ignore)", "full_signature": "private Authenticator lookupAuthenticatorWithDefaultConstructor(final Class<?> pAuthClass, final NoSuchMethodException ignore)", "class_method_signature": "JolokiaActivator.lookupAuthenticatorWithDefaultConstructor(final Class<?> pAuthClass, final NoSuchMethodException ignore)", "testcase": false, "constructor": false}, {"identifier": "createAuthenticatorFromAuthMode", "parameters": "(String pAuthMode)", "modifiers": "private", "return": "Authenticator", "signature": "Authenticator createAuthenticatorFromAuthMode(String pAuthMode)", "full_signature": "private Authenticator createAuthenticatorFromAuthMode(String pAuthMode)", "class_method_signature": "JolokiaActivator.createAuthenticatorFromAuthMode(String pAuthMode)", "testcase": false, "constructor": false}], "file": "agent/osgi/src/main/java/org/jolokia/osgi/JolokiaActivator.java"}, "focal_method": {"identifier": "getHttpContext", "parameters": "()", "modifiers": "public synchronized", "return": "HttpContext", "body": "public synchronized HttpContext getHttpContext() {\n        if (jolokiaHttpContext == null) {\n            final String user = getConfiguration(USER);\n            final String authMode = getConfiguration(AUTH_MODE);\n            if (user == null) {\n                if (ServiceAuthenticationHttpContext.shouldBeUsed(authMode)) {\n                    jolokiaHttpContext = new ServiceAuthenticationHttpContext(bundleContext, authMode);\n                } else {\n                    jolokiaHttpContext = new DefaultHttpContext();\n                }\n            } else {\n                jolokiaHttpContext =\n                    new BasicAuthenticationHttpContext(getConfiguration(REALM),\n                                                       createAuthenticator(authMode));\n            }\n        }\n        return jolokiaHttpContext;\n    }", "signature": "HttpContext getHttpContext()", "full_signature": "public synchronized HttpContext getHttpContext()", "class_method_signature": "JolokiaActivator.getHttpContext()", "testcase": false, "constructor": false, "invocations": ["getConfiguration", "getConfiguration", "shouldBeUsed", "getConfiguration", "createAuthenticator"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}