{"test_class": {"identifier": "AuthzHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "AuthzHelper.GroupMembersFetcher nullFetcher = groupName -> null;", "modifier": "", "type": "AuthzHelper.GroupMembersFetcher", "declarator": "nullFetcher = groupName -> null", "var_name": "nullFetcher"}, {"original_string": "AuthzHelper.GroupMembersFetcher devTeamFetcher = new AuthzHelper.GroupMembersFetcher() {\n        List<GroupMember> groupMembers;\n\n        {\n            groupMembers = new ArrayList<>();\n            groupMembers.add(new GroupMember().setMemberName(\"user.valid\"));\n            groupMembers.add(new GroupMember().setMemberName(\"user.disabled\").setSystemDisabled(1));\n            groupMembers.add(new GroupMember().setMemberName(\"user.expired\").setExpiration(Timestamp.fromMillis(100)));\n        }\n\n        @Override\n        public List<GroupMember> getGroupMembers(String groupName) {\n            return groupMembers;\n        }\n    };", "modifier": "", "type": "AuthzHelper.GroupMembersFetcher", "declarator": "devTeamFetcher = new AuthzHelper.GroupMembersFetcher() {\n        List<GroupMember> groupMembers;\n\n        {\n            groupMembers = new ArrayList<>();\n            groupMembers.add(new GroupMember().setMemberName(\"user.valid\"));\n            groupMembers.add(new GroupMember().setMemberName(\"user.disabled\").setSystemDisabled(1));\n            groupMembers.add(new GroupMember().setMemberName(\"user.expired\").setExpiration(Timestamp.fromMillis(100)));\n        }\n\n        @Override\n        public List<GroupMember> getGroupMembers(String groupName) {\n            return groupMembers;\n        }\n    }", "var_name": "devTeamFetcher"}], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/util/AuthzHelperTest.java"}, "test_case": {"identifier": "testMemberNameMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMemberNameMatch() {\n        assertTrue(AuthzHelper.memberNameMatch(\"*\", \"user.joe\"));\n        assertTrue(AuthzHelper.memberNameMatch(\"*\", \"athenz.service.storage\"));\n        assertTrue(AuthzHelper.memberNameMatch(\"user.*\", \"user.joe\"));\n        assertTrue(AuthzHelper.memberNameMatch(\"athenz.*\", \"athenz.service.storage\"));\n        assertTrue(AuthzHelper.memberNameMatch(\"athenz.service*\", \"athenz.service.storage\"));\n        assertTrue(AuthzHelper.memberNameMatch(\"athenz.service*\", \"athenz.service-storage\"));\n        assertTrue(AuthzHelper.memberNameMatch(\"athenz.service*\", \"athenz.service\"));\n        assertTrue(AuthzHelper.memberNameMatch(\"user.joe\", \"user.joe\"));\n\n        assertFalse(AuthzHelper.memberNameMatch(\"user.*\", \"athenz.joe\"));\n        assertFalse(AuthzHelper.memberNameMatch(\"athenz.*\", \"athenztest.joe\"));\n        assertFalse(AuthzHelper.memberNameMatch(\"athenz.service*\", \"athenz.servic\"));\n        assertFalse(AuthzHelper.memberNameMatch(\"athenz.service*\", \"athenz.servictag\"));\n        assertFalse(AuthzHelper.memberNameMatch(\"user.joe\", \"user.joel\"));\n    }", "signature": "void testMemberNameMatch()", "full_signature": "@Test public void testMemberNameMatch()", "class_method_signature": "AuthzHelperTest.testMemberNameMatch()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "memberNameMatch", "assertTrue", "memberNameMatch", "assertTrue", "memberNameMatch", "assertTrue", "memberNameMatch", "assertTrue", "memberNameMatch", "assertTrue", "memberNameMatch", "assertTrue", "memberNameMatch", "assertTrue", "memberNameMatch", "assertFalse", "memberNameMatch", "assertFalse", "memberNameMatch", "assertFalse", "memberNameMatch", "assertFalse", "memberNameMatch", "assertFalse", "memberNameMatch"]}, "focal_class": {"identifier": "AuthzHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ASSUME_ROLE = \"assume_role\";", "modifier": "private static final", "type": "String", "declarator": "ASSUME_ROLE = \"assume_role\"", "var_name": "ASSUME_ROLE"}], "methods": [{"identifier": "removeRoleMembers", "parameters": "(List<RoleMember> originalRoleMembers, List<RoleMember> removeRoleMembers)", "modifiers": "public static", "return": "void", "signature": "void removeRoleMembers(List<RoleMember> originalRoleMembers, List<RoleMember> removeRoleMembers)", "full_signature": "public static void removeRoleMembers(List<RoleMember> originalRoleMembers, List<RoleMember> removeRoleMembers)", "class_method_signature": "AuthzHelper.removeRoleMembers(List<RoleMember> originalRoleMembers, List<RoleMember> removeRoleMembers)", "testcase": false, "constructor": false}, {"identifier": "removeGroupMembers", "parameters": "(List<GroupMember> originalGroupMembers, List<GroupMember> removeGroupMembers)", "modifiers": "public static", "return": "void", "signature": "void removeGroupMembers(List<GroupMember> originalGroupMembers, List<GroupMember> removeGroupMembers)", "full_signature": "public static void removeGroupMembers(List<GroupMember> originalGroupMembers, List<GroupMember> removeGroupMembers)", "class_method_signature": "AuthzHelper.removeGroupMembers(List<GroupMember> originalGroupMembers, List<GroupMember> removeGroupMembers)", "testcase": false, "constructor": false}, {"identifier": "isMemberDisabled", "parameters": "(Integer systemDisabled)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMemberDisabled(Integer systemDisabled)", "full_signature": "public static boolean isMemberDisabled(Integer systemDisabled)", "class_method_signature": "AuthzHelper.isMemberDisabled(Integer systemDisabled)", "testcase": false, "constructor": false}, {"identifier": "isMemberExpired", "parameters": "(Timestamp expiration, long currentTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMemberExpired(Timestamp expiration, long currentTime)", "full_signature": "public static boolean isMemberExpired(Timestamp expiration, long currentTime)", "class_method_signature": "AuthzHelper.isMemberExpired(Timestamp expiration, long currentTime)", "testcase": false, "constructor": false}, {"identifier": "shouldSkipGroupMember", "parameters": "(GroupMember member, long currentTime)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldSkipGroupMember(GroupMember member, long currentTime)", "full_signature": "public static boolean shouldSkipGroupMember(GroupMember member, long currentTime)", "class_method_signature": "AuthzHelper.shouldSkipGroupMember(GroupMember member, long currentTime)", "testcase": false, "constructor": false}, {"identifier": "isMemberOfGroup", "parameters": "(List<GroupMember> groupMembers, final String member)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMemberOfGroup(List<GroupMember> groupMembers, final String member)", "full_signature": "public static boolean isMemberOfGroup(List<GroupMember> groupMembers, final String member)", "class_method_signature": "AuthzHelper.isMemberOfGroup(List<GroupMember> groupMembers, final String member)", "testcase": false, "constructor": false}, {"identifier": "checkGroupMemberValidity", "parameters": "(List<GroupMember> groupMembers, final String member)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkGroupMemberValidity(List<GroupMember> groupMembers, final String member)", "full_signature": "public static boolean checkGroupMemberValidity(List<GroupMember> groupMembers, final String member)", "class_method_signature": "AuthzHelper.checkGroupMemberValidity(List<GroupMember> groupMembers, final String member)", "testcase": false, "constructor": false}, {"identifier": "memberNameMatch", "parameters": "(final String memberName, final  String matchName)", "modifiers": "public static", "return": "boolean", "signature": "boolean memberNameMatch(final String memberName, final  String matchName)", "full_signature": "public static boolean memberNameMatch(final String memberName, final  String matchName)", "class_method_signature": "AuthzHelper.memberNameMatch(final String memberName, final  String matchName)", "testcase": false, "constructor": false}, {"identifier": "shouldRunDelegatedTrustCheck", "parameters": "(final String trust, final String trustDomain)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldRunDelegatedTrustCheck(final String trust, final String trustDomain)", "full_signature": "public static boolean shouldRunDelegatedTrustCheck(final String trust, final String trustDomain)", "class_method_signature": "AuthzHelper.shouldRunDelegatedTrustCheck(final String trust, final String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "retrieveResourceDomain", "parameters": "(String resource, String op, String trustDomain)", "modifiers": "public static", "return": "String", "signature": "String retrieveResourceDomain(String resource, String op, String trustDomain)", "full_signature": "public static String retrieveResourceDomain(String resource, String op, String trustDomain)", "class_method_signature": "AuthzHelper.retrieveResourceDomain(String resource, String op, String trustDomain)", "testcase": false, "constructor": false}, {"identifier": "extractResourceDomainName", "parameters": "(final String resource)", "modifiers": "public static", "return": "String", "signature": "String extractResourceDomainName(final String resource)", "full_signature": "public static String extractResourceDomainName(final String resource)", "class_method_signature": "AuthzHelper.extractResourceDomainName(final String resource)", "testcase": false, "constructor": false}, {"identifier": "authorityAuthorizationAllowed", "parameters": "(Principal principal)", "modifiers": "public static", "return": "boolean", "signature": "boolean authorityAuthorizationAllowed(Principal principal)", "full_signature": "public static boolean authorityAuthorizationAllowed(Principal principal)", "class_method_signature": "AuthzHelper.authorityAuthorizationAllowed(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "checkRoleMemberValidity", "parameters": "(List<RoleMember> roleMembers, final String member,\n                                                  GroupMembersFetcher groupMembersFetcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkRoleMemberValidity(List<RoleMember> roleMembers, final String member,\n                                                  GroupMembersFetcher groupMembersFetcher)", "full_signature": "public static boolean checkRoleMemberValidity(List<RoleMember> roleMembers, final String member,\n                                                  GroupMembersFetcher groupMembersFetcher)", "class_method_signature": "AuthzHelper.checkRoleMemberValidity(List<RoleMember> roleMembers, final String member,\n                                                  GroupMembersFetcher groupMembersFetcher)", "testcase": false, "constructor": false}, {"identifier": "isMemberOfRole", "parameters": "(Role role, final String member, GroupMembersFetcher groupMembersFetcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMemberOfRole(Role role, final String member, GroupMembersFetcher groupMembersFetcher)", "full_signature": "public static boolean isMemberOfRole(Role role, final String member, GroupMembersFetcher groupMembersFetcher)", "class_method_signature": "AuthzHelper.isMemberOfRole(Role role, final String member, GroupMembersFetcher groupMembersFetcher)", "testcase": false, "constructor": false}, {"identifier": "assumeRoleResourceMatch", "parameters": "(String roleName, Assertion assertion)", "modifiers": "public static", "return": "boolean", "signature": "boolean assumeRoleResourceMatch(String roleName, Assertion assertion)", "full_signature": "public static boolean assumeRoleResourceMatch(String roleName, Assertion assertion)", "class_method_signature": "AuthzHelper.assumeRoleResourceMatch(String roleName, Assertion assertion)", "testcase": false, "constructor": false}, {"identifier": "matchDelegatedTrustPolicy", "parameters": "(Policy policy, final String roleName, final String roleMember,\n                                                    List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchDelegatedTrustPolicy(Policy policy, final String roleName, final String roleMember,\n                                                    List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "full_signature": "public static boolean matchDelegatedTrustPolicy(Policy policy, final String roleName, final String roleMember,\n                                                    List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "class_method_signature": "AuthzHelper.matchDelegatedTrustPolicy(Policy policy, final String roleName, final String roleMember,\n                                                    List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "testcase": false, "constructor": false}, {"identifier": "matchDelegatedTrustAssertion", "parameters": "(Assertion assertion, final String roleName, final String roleMember,\n                                                       List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchDelegatedTrustAssertion(Assertion assertion, final String roleName, final String roleMember,\n                                                       List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "full_signature": "public static boolean matchDelegatedTrustAssertion(Assertion assertion, final String roleName, final String roleMember,\n                                                       List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "class_method_signature": "AuthzHelper.matchDelegatedTrustAssertion(Assertion assertion, final String roleName, final String roleMember,\n                                                       List<Role> roles, GroupMembersFetcher groupMembersFetcher)", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/util/AuthzHelper.java"}, "focal_method": {"identifier": "memberNameMatch", "parameters": "(final String memberName, final  String matchName)", "modifiers": "public static", "return": "boolean", "body": "public static boolean memberNameMatch(final String memberName, final  String matchName) {\n\n        // we are supporting 4 formats for role members\n        // *, <domain>.[user]*, <domain>.<user>, and <domain>:group.<group-name>\n        // special handling for wildcards only\n\n        if (memberName.equals(\"*\")) {\n            return true;\n        } else if (memberName.endsWith(\"*\")) {\n            return matchName.startsWith(memberName.substring(0, memberName.length() - 1));\n        } else {\n            return memberName.equals(matchName);\n        }\n    }", "signature": "boolean memberNameMatch(final String memberName, final  String matchName)", "full_signature": "public static boolean memberNameMatch(final String memberName, final  String matchName)", "class_method_signature": "AuthzHelper.memberNameMatch(final String memberName, final  String matchName)", "testcase": false, "constructor": false, "invocations": ["equals", "endsWith", "startsWith", "substring", "length", "equals"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}