{"test_class": {"identifier": "PluginSortStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/io/nuun/kernel/core/internal/PluginSortStrategyTest.java"}, "test_case": {"identifier": "test_sort_plugins_with_dependencies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_sort_plugins_with_dependencies()\n    {\n        Plugin1 plugin1 = new Plugin1(); // declare P2 as dependent\n        Plugin2 plugin2 = new Plugin2();\n        Plugin3 plugin3 = new Plugin3(); // declare P2 as required and declare P4 as dependent\n        Plugin4 plugin4 = new Plugin4();\n\n        List<Plugin> plugins = Lists.newArrayList(plugin4, plugin2, plugin3, plugin1);\n        FacetRegistry facetRegistry = new FacetRegistry(plugins);\n        PluginSortStrategy strategy = new PluginSortStrategy(facetRegistry, plugins);\n        List<Plugin> orderedPlugins = strategy.sortPlugins();\n\n        // Assert the old order\n        assertThat(plugins).containsSequence(plugin4, plugin2, plugin3, plugin1);\n        // Assert the new order\n        assertThat(orderedPlugins).containsSequence(plugin1, plugin2, plugin3, plugin4);\n    }", "signature": "void test_sort_plugins_with_dependencies()", "full_signature": "@Test public void test_sort_plugins_with_dependencies()", "class_method_signature": "PluginSortStrategyTest.test_sort_plugins_with_dependencies()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "sortPlugins", "containsSequence", "assertThat", "containsSequence", "assertThat"]}, "focal_class": {"identifier": "PluginSortStrategy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FacetRegistry facetRegistry;", "modifier": "private final", "type": "FacetRegistry", "declarator": "facetRegistry", "var_name": "facetRegistry"}, {"original_string": "private final List<Plugin> plugins;", "modifier": "private final", "type": "List<Plugin>", "declarator": "plugins", "var_name": "plugins"}, {"original_string": "private Graph graph;", "modifier": "private", "type": "Graph", "declarator": "graph", "var_name": "graph"}, {"original_string": "private Vertices vertices;", "modifier": "private", "type": "Vertices", "declarator": "vertices", "var_name": "vertices"}], "methods": [{"identifier": "PluginSortStrategy", "parameters": "(FacetRegistry facetRegistry, List<Plugin> unOrderedPlugins)", "modifiers": "public", "return": "", "signature": " PluginSortStrategy(FacetRegistry facetRegistry, List<Plugin> unOrderedPlugins)", "full_signature": "public  PluginSortStrategy(FacetRegistry facetRegistry, List<Plugin> unOrderedPlugins)", "class_method_signature": "PluginSortStrategy.PluginSortStrategy(FacetRegistry facetRegistry, List<Plugin> unOrderedPlugins)", "testcase": false, "constructor": true}, {"identifier": "sortPlugins", "parameters": "()", "modifiers": "public", "return": "List<Plugin>", "signature": "List<Plugin> sortPlugins()", "full_signature": "public List<Plugin> sortPlugins()", "class_method_signature": "PluginSortStrategy.sortPlugins()", "testcase": false, "constructor": false}, {"identifier": "addVertices", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addVertices()", "full_signature": "private void addVertices()", "class_method_signature": "PluginSortStrategy.addVertices()", "testcase": false, "constructor": false}, {"identifier": "addEdges", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addEdges()", "full_signature": "private void addEdges()", "class_method_signature": "PluginSortStrategy.addEdges()", "testcase": false, "constructor": false}, {"identifier": "sortGraph", "parameters": "()", "modifiers": "private", "return": "ArrayList<Plugin>", "signature": "ArrayList<Plugin> sortGraph()", "full_signature": "private ArrayList<Plugin> sortGraph()", "class_method_signature": "PluginSortStrategy.sortGraph()", "testcase": false, "constructor": false}, {"identifier": "addEdgesForRequiredPlugins", "parameters": "(Plugin source)", "modifiers": "private", "return": "void", "signature": "void addEdgesForRequiredPlugins(Plugin source)", "full_signature": "private void addEdgesForRequiredPlugins(Plugin source)", "class_method_signature": "PluginSortStrategy.addEdgesForRequiredPlugins(Plugin source)", "testcase": false, "constructor": false}, {"identifier": "addEdgesForDependentPlugins", "parameters": "(Plugin source)", "modifiers": "private", "return": "void", "signature": "void addEdgesForDependentPlugins(Plugin source)", "full_signature": "private void addEdgesForDependentPlugins(Plugin source)", "class_method_signature": "PluginSortStrategy.addEdgesForDependentPlugins(Plugin source)", "testcase": false, "constructor": false}, {"identifier": "getCompleteDependencies", "parameters": "(Class<?> declaredDependency)", "modifiers": "private", "return": "List<Class<?>>", "signature": "List<Class<?>> getCompleteDependencies(Class<?> declaredDependency)", "full_signature": "private List<Class<?>> getCompleteDependencies(Class<?> declaredDependency)", "class_method_signature": "PluginSortStrategy.getCompleteDependencies(Class<?> declaredDependency)", "testcase": false, "constructor": false}], "file": "core/src/main/java/io/nuun/kernel/core/internal/PluginSortStrategy.java"}, "focal_method": {"identifier": "sortPlugins", "parameters": "()", "modifiers": "public", "return": "List<Plugin>", "body": "public List<Plugin> sortPlugins() {\n        addVertices();\n        addEdges();\n        return sortGraph();\n    }", "signature": "List<Plugin> sortPlugins()", "full_signature": "public List<Plugin> sortPlugins()", "class_method_signature": "PluginSortStrategy.sortPlugins()", "testcase": false, "constructor": false, "invocations": ["addVertices", "addEdges", "sortGraph"]}, "repository": {"repo_id": 23086156, "url": "https://github.com/nuun-io/kernel", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 1114, "license": "licensed"}}