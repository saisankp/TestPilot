{"test_class": {"identifier": "ProgramOrgUnitCheckTest", "superclass": "extends BaseValidationTest", "interfaces": "", "fields": [{"original_string": "private ProgramOrgUnitCheck rule;", "modifier": "private", "type": "ProgramOrgUnitCheck", "declarator": "rule", "var_name": "rule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheckTest.java"}, "test_case": {"identifier": "failWhenProgramHasNoOrgUnitMatchingEventOrgUnit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()\n    {\n        // assign a UID to the event's org unit\n        event.setOrgUnit( CodeGenerator.generateUid() );\n\n        // Prepare data\n        Program program = createProgram( 'P' );\n        // make sure that one of the generate Org Units, has the event's UID\n        program.setOrganisationUnits( create( 5, CodeGenerator.generateUid(), IdScheme.UID ) );\n        ProgramInstance pi = new ProgramInstance();\n        pi.setProgram( program );\n\n        Map<String, ProgramInstance> programInstanceMap = new HashMap<>();\n        programInstanceMap.put( event.getUid(), pi );\n        when( workContext.getProgramInstanceMap() ).thenReturn( programInstanceMap );\n\n        // method under test\n        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n\n        assertHasError( summary, event, \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit() );\n    }", "signature": "void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()", "full_signature": "@Test public void failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()", "class_method_signature": "ProgramOrgUnitCheckTest.failWhenProgramHasNoOrgUnitMatchingEventOrgUnit()", "testcase": true, "constructor": false, "invocations": ["setOrgUnit", "generateUid", "createProgram", "setOrganisationUnits", "create", "generateUid", "setProgram", "put", "getUid", "thenReturn", "when", "getProgramInstanceMap", "check", "assertHasError", "getOrgUnit"]}, "focal_class": {"identifier": "ProgramOrgUnitCheck", "superclass": "", "interfaces": "implements Checker", "fields": [{"original_string": "private final static Map<IdScheme, BiFunction<OrganisationUnit, ImmutableEvent, Boolean>> functionMap = ImmutableMap\n        .<IdScheme, BiFunction<OrganisationUnit, ImmutableEvent, Boolean>> builder()\n        .put( IdScheme.UID, ( ou, ev ) -> ou.getUid().equals( ev.getOrgUnit() ) )\n        .put( IdScheme.CODE, ( ou, ev ) -> ou.getCode().equals( ev.getOrgUnit() ) )\n        .put( IdScheme.ID, ( ou, ev ) -> String.valueOf( ou.getId() ).equals( ev.getOrgUnit() ) )\n        .put( IdScheme.NAME, ( ou, ev ) -> ou.getName().equals( ev.getOrgUnit() ) )\n        .build();", "modifier": "private final static", "type": "Map<IdScheme, BiFunction<OrganisationUnit, ImmutableEvent, Boolean>>", "declarator": "functionMap = ImmutableMap\n        .<IdScheme, BiFunction<OrganisationUnit, ImmutableEvent, Boolean>> builder()\n        .put( IdScheme.UID, ( ou, ev ) -> ou.getUid().equals( ev.getOrgUnit() ) )\n        .put( IdScheme.CODE, ( ou, ev ) -> ou.getCode().equals( ev.getOrgUnit() ) )\n        .put( IdScheme.ID, ( ou, ev ) -> String.valueOf( ou.getId() ).equals( ev.getOrgUnit() ) )\n        .put( IdScheme.NAME, ( ou, ev ) -> ou.getName().equals( ev.getOrgUnit() ) )\n        .build()", "var_name": "functionMap"}, {"original_string": "private final static BiFunction<OrganisationUnit, ImmutableEvent, Boolean> DEFAULT_FUNCTION = ( ou, ev ) -> false;", "modifier": "private final static", "type": "BiFunction<OrganisationUnit, ImmutableEvent, Boolean>", "declarator": "DEFAULT_FUNCTION = ( ou, ev ) -> false", "var_name": "DEFAULT_FUNCTION"}], "methods": [{"identifier": "check", "parameters": "( ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "signature": "ImportSummary check( ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramOrgUnitCheck.check( ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false}, {"identifier": "getByAttributeScheme", "parameters": "( OrganisationUnit ou, ImmutableEvent event,\n        IdScheme orgUnitIdScheme )", "modifiers": "private", "return": "Optional<OrganisationUnit>", "signature": "Optional<OrganisationUnit> getByAttributeScheme( OrganisationUnit ou, ImmutableEvent event,\n        IdScheme orgUnitIdScheme )", "full_signature": "private Optional<OrganisationUnit> getByAttributeScheme( OrganisationUnit ou, ImmutableEvent event,\n        IdScheme orgUnitIdScheme )", "class_method_signature": "ProgramOrgUnitCheck.getByAttributeScheme( OrganisationUnit ou, ImmutableEvent event,\n        IdScheme orgUnitIdScheme )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/validation/ProgramOrgUnitCheck.java"}, "focal_method": {"identifier": "check", "parameters": "( ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "body": "@Override\n    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n    {\n        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n\n        if ( programInstance != null )\n        {\n            final IdScheme orgUnitIdScheme = ctx.getImportOptions().getIdSchemes().getOrgUnitIdScheme();\n\n            OrganisationUnit orgUnit = null;\n\n            final Set<OrganisationUnit> organisationUnits = programInstance.getProgram().getOrganisationUnits();\n\n            for ( OrganisationUnit ou : organisationUnits )\n            {\n                if ( orgUnitIdScheme.isAttribute() )\n                {\n                    final Optional<OrganisationUnit> ouByAttributeScheme = getByAttributeScheme( ou, event,\n                        orgUnitIdScheme );\n                    if ( ouByAttributeScheme.isPresent() )\n                    {\n                        orgUnit = ouByAttributeScheme.get();\n                        break;\n                    }\n                }\n                else\n                {\n                    if ( functionMap.getOrDefault( orgUnitIdScheme, DEFAULT_FUNCTION ).apply( ou, event ) )\n                    {\n                        orgUnit = ou;\n                        break;\n                    }\n                }\n            }\n\n            if ( orgUnit == null )\n            {\n                return error( \"Program is not assigned to this Organisation Unit: \" + event.getOrgUnit(),\n                    event.getEvent() );\n            }\n        }\n\n        return success();\n    }", "signature": "ImportSummary check( ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramOrgUnitCheck.check( ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false, "invocations": ["get", "getProgramInstanceMap", "getUid", "getOrgUnitIdScheme", "getIdSchemes", "getImportOptions", "getOrganisationUnits", "getProgram", "isAttribute", "getByAttributeScheme", "isPresent", "get", "apply", "getOrDefault", "error", "getOrgUnit", "getEvent", "success"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}