{"test_class": {"identifier": "SheetsHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SheetsHelper.SheetsService sheetsService;", "modifier": "@Mock\n    private", "type": "SheetsHelper.SheetsService", "declarator": "sheetsService", "var_name": "sheetsService"}, {"original_string": "private SheetsHelper sheetsHelper;", "modifier": "private", "type": "SheetsHelper", "declarator": "sheetsHelper", "var_name": "sheetsHelper"}], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/gdrive/SheetsHelperTest.java"}, "test_case": {"identifier": "resizeSpreadsheetShouldThrowErrorWhenColumnSizeLessThanOne", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void resizeSpreadsheetShouldThrowErrorWhenColumnSizeLessThanOne() throws IOException {\n        sheetsHelper.resizeSpreadSheet(\"spreadsheet_id\", 0, 0);\n        assertBatchUpdateCalled(0);\n    }", "signature": "void resizeSpreadsheetShouldThrowErrorWhenColumnSizeLessThanOne()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void resizeSpreadsheetShouldThrowErrorWhenColumnSizeLessThanOne()", "class_method_signature": "SheetsHelperTest.resizeSpreadsheetShouldThrowErrorWhenColumnSizeLessThanOne()", "testcase": true, "constructor": false, "invocations": ["resizeSpreadSheet", "assertBatchUpdateCalled"]}, "focal_class": {"identifier": "SheetsHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SheetsService sheetsService;", "modifier": "private final", "type": "SheetsService", "declarator": "sheetsService", "var_name": "sheetsService"}], "methods": [{"identifier": "SheetsHelper", "parameters": "(GoogleAccountCredential credential, HttpTransport transport, JsonFactory jsonFactory)", "modifiers": "", "return": "", "signature": " SheetsHelper(GoogleAccountCredential credential, HttpTransport transport, JsonFactory jsonFactory)", "full_signature": "  SheetsHelper(GoogleAccountCredential credential, HttpTransport transport, JsonFactory jsonFactory)", "class_method_signature": "SheetsHelper.SheetsHelper(GoogleAccountCredential credential, HttpTransport transport, JsonFactory jsonFactory)", "testcase": false, "constructor": true}, {"identifier": "SheetsHelper", "parameters": "(@NonNull SheetsService sheetsService)", "modifiers": "", "return": "", "signature": " SheetsHelper(@NonNull SheetsService sheetsService)", "full_signature": "  SheetsHelper(@NonNull SheetsService sheetsService)", "class_method_signature": "SheetsHelper.SheetsHelper(@NonNull SheetsService sheetsService)", "testcase": false, "constructor": true}, {"identifier": "resizeSpreadSheet", "parameters": "(String spreadsheetId, int sheetId, int columnSize)", "modifiers": "public", "return": "void", "signature": "void resizeSpreadSheet(String spreadsheetId, int sheetId, int columnSize)", "full_signature": "public void resizeSpreadSheet(String spreadsheetId, int sheetId, int columnSize)", "class_method_signature": "SheetsHelper.resizeSpreadSheet(String spreadsheetId, int sheetId, int columnSize)", "testcase": false, "constructor": false}, {"identifier": "insertRow", "parameters": "(String spreadsheetId, String sheetName, ValueRange row)", "modifiers": "public", "return": "void", "signature": "void insertRow(String spreadsheetId, String sheetName, ValueRange row)", "full_signature": "public void insertRow(String spreadsheetId, String sheetName, ValueRange row)", "class_method_signature": "SheetsHelper.insertRow(String spreadsheetId, String sheetName, ValueRange row)", "testcase": false, "constructor": false}, {"identifier": "updateRow", "parameters": "(String spreadsheetId, String sheetName, ValueRange row)", "modifiers": "public", "return": "void", "signature": "void updateRow(String spreadsheetId, String sheetName, ValueRange row)", "full_signature": "public void updateRow(String spreadsheetId, String sheetName, ValueRange row)", "class_method_signature": "SheetsHelper.updateRow(String spreadsheetId, String sheetName, ValueRange row)", "testcase": false, "constructor": false}, {"identifier": "addSheet", "parameters": "(String spreadsheetId, String sheetName)", "modifiers": "public", "return": "void", "signature": "void addSheet(String spreadsheetId, String sheetName)", "full_signature": "public void addSheet(String spreadsheetId, String sheetName)", "class_method_signature": "SheetsHelper.addSheet(String spreadsheetId, String sheetName)", "testcase": false, "constructor": false}, {"identifier": "getSheetCells", "parameters": "(String spreadsheetId, String sheetName)", "modifiers": "public", "return": "List<List<Object>>", "signature": "List<List<Object>> getSheetCells(String spreadsheetId, String sheetName)", "full_signature": "public List<List<Object>> getSheetCells(String spreadsheetId, String sheetName)", "class_method_signature": "SheetsHelper.getSheetCells(String spreadsheetId, String sheetName)", "testcase": false, "constructor": false}, {"identifier": "getSpreadsheet", "parameters": "(String spreadsheetId)", "modifiers": "public", "return": "Spreadsheet", "signature": "Spreadsheet getSpreadsheet(String spreadsheetId)", "full_signature": "public Spreadsheet getSpreadsheet(String spreadsheetId)", "class_method_signature": "SheetsHelper.getSpreadsheet(String spreadsheetId)", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/gdrive/SheetsHelper.java"}, "focal_method": {"identifier": "resizeSpreadSheet", "parameters": "(String spreadsheetId, int sheetId, int columnSize)", "modifiers": "public", "return": "void", "body": "public void resizeSpreadSheet(String spreadsheetId, int sheetId, int columnSize) throws IllegalArgumentException, IOException {\n        if (sheetId < 0) {\n            throw new IllegalArgumentException(\"Sheet Id should be greater than or equal to 0\");\n        }\n\n        if (columnSize < 1) {\n            throw new IllegalArgumentException(\"Column size should be greater than 0\");\n        }\n\n        // create grid properties with the new column size\n        GridProperties gridProperties = new GridProperties().setColumnCount(columnSize);\n\n        // create sheet properties for the first sheet in the spreadsheet\n        SheetProperties sheetProperties = new SheetProperties()\n                .setSheetId(sheetId)\n                .setGridProperties(gridProperties);\n\n        // Updates properties of the sheet with the specified sheetId\n        UpdateSheetPropertiesRequest updateSheetPropertyRequest = new UpdateSheetPropertiesRequest()\n                .setProperties(sheetProperties)\n                .setFields(\"gridProperties.columnCount\");\n\n        // generate request\n        List<Request> requests = new ArrayList<>();\n        requests.add(new Request().setUpdateSheetProperties(updateSheetPropertyRequest));\n\n        // send the API request\n        sheetsService.batchUpdate(spreadsheetId, requests);\n    }", "signature": "void resizeSpreadSheet(String spreadsheetId, int sheetId, int columnSize)", "full_signature": "public void resizeSpreadSheet(String spreadsheetId, int sheetId, int columnSize)", "class_method_signature": "SheetsHelper.resizeSpreadSheet(String spreadsheetId, int sheetId, int columnSize)", "testcase": false, "constructor": false, "invocations": ["setColumnCount", "setGridProperties", "setSheetId", "setFields", "setProperties", "add", "setUpdateSheetProperties", "batchUpdate"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}