{"test_class": {"identifier": "SchemaProviderServletTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SCHEMA = \"StubConfig.xsd\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMA = \"StubConfig.xsd\"", "var_name": "SCHEMA"}, {"original_string": "@Mock\n    private BufferedReaderFactory bufferedReaderFactory;", "modifier": "@Mock\n    private", "type": "BufferedReaderFactory", "declarator": "bufferedReaderFactory", "var_name": "bufferedReaderFactory"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private PrintWriter writer;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "@Mock\n    private BufferedReader reader;", "modifier": "@Mock\n    private", "type": "BufferedReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "@InjectMocks\n    private SchemaProviderServlet underTest;", "modifier": "@InjectMocks\n    private", "type": "SchemaProviderServlet", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/SchemaProviderServletTest.java"}, "test_case": {"identifier": "testDoGetWhenIOExceptionShouldLogError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoGetWhenIOExceptionShouldLogError() throws ServletException, IOException {\n        //GIVEN\n        given(bufferedReaderFactory.createBufferedReader(SCHEMA)).willReturn(reader);\n        IOException exception = new IOException();\n        given(reader.readLine()).willThrow(exception);\n        //WHEN\n        underTest.doGet(request, response);\n        //THEN\n        verify(logger).error(SCHEMA + \" could not be read!\", exception);\n    }", "signature": "void testDoGetWhenIOExceptionShouldLogError()", "full_signature": "@Test public void testDoGetWhenIOExceptionShouldLogError()", "class_method_signature": "SchemaProviderServletTest.testDoGetWhenIOExceptionShouldLogError()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createBufferedReader", "willThrow", "given", "readLine", "doGet", "error", "verify"]}, "focal_class": {"identifier": "SchemaProviderServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(SchemaProviderServlet.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SchemaProviderServlet.class)", "var_name": "logger"}, {"original_string": "@Qualifier(\"stubConfigSchemaLocation\")\n    private final String stubConfigSchemaLocation;", "modifier": "@Qualifier(\"stubConfigSchemaLocation\")\n    private final", "type": "String", "declarator": "stubConfigSchemaLocation", "var_name": "stubConfigSchemaLocation"}, {"original_string": "private final BufferedReaderFactory bufferedReaderFactory;", "modifier": "private final", "type": "BufferedReaderFactory", "declarator": "bufferedReaderFactory", "var_name": "bufferedReaderFactory"}], "methods": [{"identifier": "SchemaProviderServlet", "parameters": "(String stubConfigSchemaLocation, BufferedReaderFactory bufferedReaderFactory)", "modifiers": "@Autowired public", "return": "", "signature": " SchemaProviderServlet(String stubConfigSchemaLocation, BufferedReaderFactory bufferedReaderFactory)", "full_signature": "@Autowired public  SchemaProviderServlet(String stubConfigSchemaLocation, BufferedReaderFactory bufferedReaderFactory)", "class_method_signature": "SchemaProviderServlet.SchemaProviderServlet(String stubConfigSchemaLocation, BufferedReaderFactory bufferedReaderFactory)", "testcase": false, "constructor": true}, {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "SchemaProviderServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "doPost", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doPost(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "SchemaProviderServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "writeSchemaFile", "parameters": "(final PrintWriter out)", "modifiers": "private", "return": "void", "signature": "void writeSchemaFile(final PrintWriter out)", "full_signature": "private void writeSchemaFile(final PrintWriter out)", "class_method_signature": "SchemaProviderServlet.writeSchemaFile(final PrintWriter out)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/SchemaProviderServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(final HttpServletRequest req, final HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {\n        PrintWriter out = resp.getWriter();\n        resp.setContentType(\"application/xml\");\n        writeSchemaFile(out);\n        out.flush();\n        out.close();\n    }", "signature": "void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "full_signature": "@Override protected void doGet(final HttpServletRequest req, final HttpServletResponse resp)", "class_method_signature": "SchemaProviderServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["getWriter", "setContentType", "writeSchemaFile", "flush", "close"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}