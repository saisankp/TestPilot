{"test_class": {"identifier": "EpsilonNeighborhoodCouplerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static EpsilonAdaptation mockAdaption = mock(EpsilonAdaptationDelta.class);", "modifier": "protected static", "type": "EpsilonAdaptation", "declarator": "mockAdaption = mock(EpsilonAdaptationDelta.class)", "var_name": "mockAdaption"}, {"original_string": "protected static Objective firstObj = new Objective(\"first\", Sign.MAX);", "modifier": "protected static", "type": "Objective", "declarator": "firstObj = new Objective(\"first\", Sign.MAX)", "var_name": "firstObj"}, {"original_string": "protected static Objective secondObj = new Objective(\"second\", Sign.MAX);", "modifier": "protected static", "type": "Objective", "declarator": "secondObj = new Objective(\"second\", Sign.MAX)", "var_name": "secondObj"}, {"original_string": "protected static Individual first = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "first = mock(Individual.class)", "var_name": "first"}, {"original_string": "protected static Individual second = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "second = mock(Individual.class)", "var_name": "second"}, {"original_string": "protected static Individual third = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "third = mock(Individual.class)", "var_name": "third"}, {"original_string": "protected static Individual fourth = mock(Individual.class);", "modifier": "protected static", "type": "Individual", "declarator": "fourth = mock(Individual.class)", "var_name": "fourth"}], "file": "opt4j-optimizers/src/test/java/org/opt4j/optimizers/ea/aeseh/EpsilonNeighborhoodCouplerTest.java"}, "test_case": {"identifier": "testGetCouple", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetCouple() {\n\t\tEpsilonNeighborhoodCoupler coupler = makeDefaultCoupler();\n\t\tIndividual first = mock(Individual.class);\n\t\tIndividual second = mock(Individual.class);\n\t\tSet<Individual> indiSet = new HashSet<>();\n\t\tindiSet.add(first);\n\t\tindiSet.add(second);\n\t\tPair<Individual> couple = coupler.pickCouple(indiSet);\n\t\tassertTrue(couple.getFirst().equals(first) || couple.getSecond().equals(first));\n\t\tassertTrue(couple.getFirst().equals(second) || couple.getSecond().equals(second));\n\t\tindiSet.remove(first);\n\t\tcouple = coupler.pickCouple(indiSet);\n\t\tassertTrue(couple.getFirst().equals(second));\n\t\tassertTrue(couple.getSecond().equals(second));\n\t}", "signature": "void testGetCouple()", "full_signature": "@Test public void testGetCouple()", "class_method_signature": "EpsilonNeighborhoodCouplerTest.testGetCouple()", "testcase": true, "constructor": false, "invocations": ["makeDefaultCoupler", "mock", "mock", "add", "add", "pickCouple", "assertTrue", "equals", "getFirst", "equals", "getSecond", "assertTrue", "equals", "getFirst", "equals", "getSecond", "remove", "pickCouple", "assertTrue", "equals", "getFirst", "assertTrue", "equals", "getSecond"]}, "focal_class": {"identifier": "EpsilonNeighborhoodCoupler", "superclass": "", "interfaces": "implements Coupler", "fields": [{"original_string": "protected final EpsilonAdaptation epsilonAdaption;", "modifier": "protected final", "type": "EpsilonAdaptation", "declarator": "epsilonAdaption", "var_name": "epsilonAdaption"}, {"original_string": "protected final EpsilonMapping epsilonMapping;", "modifier": "protected final", "type": "EpsilonMapping", "declarator": "epsilonMapping", "var_name": "epsilonMapping"}, {"original_string": "protected final Random random;", "modifier": "protected final", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "protected final int plannedNeighborhoodNumber;", "modifier": "protected final", "type": "int", "declarator": "plannedNeighborhoodNumber", "var_name": "plannedNeighborhoodNumber"}, {"original_string": "protected final AdaptiveEpsilon adaptiveEpsilonNeighborhood;", "modifier": "protected final", "type": "AdaptiveEpsilon", "declarator": "adaptiveEpsilonNeighborhood", "var_name": "adaptiveEpsilonNeighborhood"}], "methods": [{"identifier": "EpsilonNeighborhoodCoupler", "parameters": "(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "modifiers": "@Inject public", "return": "", "signature": " EpsilonNeighborhoodCoupler(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "full_signature": "@Inject public  EpsilonNeighborhoodCoupler(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "class_method_signature": "EpsilonNeighborhoodCoupler.EpsilonNeighborhoodCoupler(EpsilonMapping epsilonMapping, EpsilonAdaptation epsilonAdaption, Random random,\n\t\t\t@Constant(value = \"neighborhoodNumber\", namespace = EpsilonNeighborhoodCoupler.class) int plannedNeighborhoodNumber,\n\t\t\t@Constant(value = \"epsilonNeighborhood\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhood,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDelta\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDelta,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMax\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMax,\n\t\t\t@Constant(value = \"epsilonNeighborhoodDeltaMin\", namespace = EpsilonNeighborhoodCoupler.class) double epsilonNeighborhoodDeltaMin)", "testcase": false, "constructor": true}, {"identifier": "getCouples", "parameters": "(int size, List<Individual> survivors)", "modifiers": "@Override public", "return": "Collection<Pair<Individual>>", "signature": "Collection<Pair<Individual>> getCouples(int size, List<Individual> survivors)", "full_signature": "@Override public Collection<Pair<Individual>> getCouples(int size, List<Individual> survivors)", "class_method_signature": "EpsilonNeighborhoodCoupler.getCouples(int size, List<Individual> survivors)", "testcase": false, "constructor": false}, {"identifier": "pickCouple", "parameters": "(Set<Individual> neighborhood)", "modifiers": "protected", "return": "Pair<Individual>", "signature": "Pair<Individual> pickCouple(Set<Individual> neighborhood)", "full_signature": "protected Pair<Individual> pickCouple(Set<Individual> neighborhood)", "class_method_signature": "EpsilonNeighborhoodCoupler.pickCouple(Set<Individual> neighborhood)", "testcase": false, "constructor": false}, {"identifier": "createNeighborhoods", "parameters": "(List<Individual> survivorPool)", "modifiers": "protected", "return": "List<Set<Individual>>", "signature": "List<Set<Individual>> createNeighborhoods(List<Individual> survivorPool)", "full_signature": "protected List<Set<Individual>> createNeighborhoods(List<Individual> survivorPool)", "class_method_signature": "EpsilonNeighborhoodCoupler.createNeighborhoods(List<Individual> survivorPool)", "testcase": false, "constructor": false}], "file": "opt4j-optimizers/src/main/java/org/opt4j/optimizers/ea/aeseh/EpsilonNeighborhoodCoupler.java"}, "focal_method": {"identifier": "pickCouple", "parameters": "(Set<Individual> neighborhood)", "modifiers": "protected", "return": "Pair<Individual>", "body": "protected Pair<Individual> pickCouple(Set<Individual> neighborhood) {\n\t\tif (neighborhood.size() == 1) {\n\t\t\tIndividual hermit = neighborhood.iterator().next();\n\t\t\treturn new Pair<>(hermit, hermit);\n\t\t}\n\t\tList<Individual> individualList = new ArrayList<>(neighborhood);\n\t\tIndividual first = individualList.remove(random.nextInt(individualList.size()));\n\t\tIndividual second = individualList.remove(random.nextInt(individualList.size()));\n\t\treturn new Pair<>(first, second);\n\t}", "signature": "Pair<Individual> pickCouple(Set<Individual> neighborhood)", "full_signature": "protected Pair<Individual> pickCouple(Set<Individual> neighborhood)", "class_method_signature": "EpsilonNeighborhoodCoupler.pickCouple(Set<Individual> neighborhood)", "testcase": false, "constructor": false, "invocations": ["size", "next", "iterator", "remove", "nextInt", "size", "remove", "nextInt", "size"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}