{"test_class": {"identifier": "StandardBondGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/standard/StandardBondGeneratorTest.java"}, "test_case": {"identifier": "adenineRingPreference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void adenineRingPreference() throws Exception {\n\n        IAtomContainer adenine = TestMoleculeFactory.makeAdenine();\n        Map<IBond, IAtomContainer> ringMap = StandardBondGenerator.ringPreferenceMap(adenine);\n\n        int nSize5 = 0, nSize6 = 0;\n        for (IBond bond : adenine.bonds()) {\n            IAtomContainer ring = ringMap.get(bond);\n            // exocyclic bond\n            if (ring == null) continue;\n            int size = ring.getAtomCount();\n            if (size == 5) nSize5++;\n            if (size == 6) nSize6++;\n        }\n\n        // 6 bonds should point to the six member ring\n        // 4 bonds should point to the five member ring\n        assertThat(nSize5, is(4));\n        assertThat(nSize6, is(6));\n    }", "signature": "void adenineRingPreference()", "full_signature": "@Test public void adenineRingPreference()", "class_method_signature": "StandardBondGeneratorTest.adenineRingPreference()", "testcase": true, "constructor": false, "invocations": ["makeAdenine", "ringPreferenceMap", "bonds", "get", "getAtomCount", "assertThat", "is", "assertThat", "is"]}, "focal_class": {"identifier": "StandardBondGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IAtomContainer         container;", "modifier": "private final", "type": "IAtomContainer", "declarator": "container", "var_name": "container"}, {"original_string": "private final AtomSymbol[]           symbols;", "modifier": "private final", "type": "AtomSymbol[]", "declarator": "symbols", "var_name": "symbols"}, {"original_string": "private final RendererModel          parameters;", "modifier": "private final", "type": "RendererModel", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private final StandardDonutGenerator donutGenerator;", "modifier": "private final", "type": "StandardDonutGenerator", "declarator": "donutGenerator", "var_name": "donutGenerator"}, {"original_string": "private final ILoggingTool               logger       = LoggingToolFactory.createLoggingTool(getClass());", "modifier": "private final", "type": "ILoggingTool", "declarator": "logger       = LoggingToolFactory.createLoggingTool(getClass())", "var_name": "logger"}, {"original_string": "private final Map<IAtom, Integer>        atomIndexMap = new HashMap<IAtom, Integer>();", "modifier": "private final", "type": "Map<IAtom, Integer>", "declarator": "atomIndexMap = new HashMap<IAtom, Integer>()", "var_name": "atomIndexMap"}, {"original_string": "private final Map<IBond, IAtomContainer> ringMap;", "modifier": "private final", "type": "Map<IBond, IAtomContainer>", "declarator": "ringMap", "var_name": "ringMap"}, {"original_string": "private final double                     scale;", "modifier": "private final", "type": "double", "declarator": "scale", "var_name": "scale"}, {"original_string": "private final double                     stroke;", "modifier": "private final", "type": "double", "declarator": "stroke", "var_name": "stroke"}, {"original_string": "private final double                     separation;", "modifier": "private final", "type": "double", "declarator": "separation", "var_name": "separation"}, {"original_string": "private final double                     backOff;", "modifier": "private final", "type": "double", "declarator": "backOff", "var_name": "backOff"}, {"original_string": "private final double                     wedgeWidth;", "modifier": "private final", "type": "double", "declarator": "wedgeWidth", "var_name": "wedgeWidth"}, {"original_string": "private final double                     hashSpacing;", "modifier": "private final", "type": "double", "declarator": "hashSpacing", "var_name": "hashSpacing"}, {"original_string": "private final double                     waveSpacing;", "modifier": "private final", "type": "double", "declarator": "waveSpacing", "var_name": "waveSpacing"}, {"original_string": "private final Color                      foreground, annotationColor;", "modifier": "private final", "type": "Color", "declarator": "foreground", "var_name": "foreground"}, {"original_string": "private final boolean                    fancyBoldWedges, fancyHashedWedges;", "modifier": "private final", "type": "boolean", "declarator": "fancyBoldWedges", "var_name": "fancyBoldWedges"}, {"original_string": "private final double                     annotationDistance, annotationScale;", "modifier": "private final", "type": "double", "declarator": "annotationDistance", "var_name": "annotationDistance"}, {"original_string": "private final Font         font;", "modifier": "private final", "type": "Font", "declarator": "font", "var_name": "font"}, {"original_string": "private final ElementGroup annotations;", "modifier": "private final", "type": "ElementGroup", "declarator": "annotations", "var_name": "annotations"}, {"original_string": "private final boolean      forceDelocalised;", "modifier": "private final", "type": "boolean", "declarator": "forceDelocalised", "var_name": "forceDelocalised"}], "methods": [{"identifier": "StandardBondGenerator", "parameters": "(IAtomContainer container,\n                                  AtomSymbol[] symbols,\n                                  RendererModel parameters,\n                                  ElementGroup annotations,\n                                  Font font,\n                                  double stroke,\n                                  StandardDonutGenerator donutGen)", "modifiers": "private", "return": "", "signature": " StandardBondGenerator(IAtomContainer container,\n                                  AtomSymbol[] symbols,\n                                  RendererModel parameters,\n                                  ElementGroup annotations,\n                                  Font font,\n                                  double stroke,\n                                  StandardDonutGenerator donutGen)", "full_signature": "private  StandardBondGenerator(IAtomContainer container,\n                                  AtomSymbol[] symbols,\n                                  RendererModel parameters,\n                                  ElementGroup annotations,\n                                  Font font,\n                                  double stroke,\n                                  StandardDonutGenerator donutGen)", "class_method_signature": "StandardBondGenerator.StandardBondGenerator(IAtomContainer container,\n                                  AtomSymbol[] symbols,\n                                  RendererModel parameters,\n                                  ElementGroup annotations,\n                                  Font font,\n                                  double stroke,\n                                  StandardDonutGenerator donutGen)", "testcase": false, "constructor": true}, {"identifier": "generateBonds", "parameters": "(IAtomContainer container,\n                                             AtomSymbol[] symbols,\n                                             RendererModel parameters,\n                                             double stroke,\n                                             Font font,\n                                             ElementGroup annotations,\n                                             StandardDonutGenerator donutGen)", "modifiers": "static", "return": "IRenderingElement[]", "signature": "IRenderingElement[] generateBonds(IAtomContainer container,\n                                             AtomSymbol[] symbols,\n                                             RendererModel parameters,\n                                             double stroke,\n                                             Font font,\n                                             ElementGroup annotations,\n                                             StandardDonutGenerator donutGen)", "full_signature": "static IRenderingElement[] generateBonds(IAtomContainer container,\n                                             AtomSymbol[] symbols,\n                                             RendererModel parameters,\n                                             double stroke,\n                                             Font font,\n                                             ElementGroup annotations,\n                                             StandardDonutGenerator donutGen)", "class_method_signature": "StandardBondGenerator.generateBonds(IAtomContainer container,\n                                             AtomSymbol[] symbols,\n                                             RendererModel parameters,\n                                             double stroke,\n                                             Font font,\n                                             ElementGroup annotations,\n                                             StandardDonutGenerator donutGen)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IBond bond)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generate(IBond bond)", "full_signature": " IRenderingElement generate(IBond bond)", "class_method_signature": "StandardBondGenerator.generate(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "generateSingleBond", "parameters": "(IBond bond, IAtom from, IAtom to)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateSingleBond(IBond bond, IAtom from, IAtom to)", "full_signature": "private IRenderingElement generateSingleBond(IBond bond, IAtom from, IAtom to)", "class_method_signature": "StandardBondGenerator.generateSingleBond(IBond bond, IAtom from, IAtom to)", "testcase": false, "constructor": false}, {"identifier": "generatePlainSingleBond", "parameters": "(final IAtom from, final IAtom to)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generatePlainSingleBond(final IAtom from, final IAtom to)", "full_signature": " IRenderingElement generatePlainSingleBond(final IAtom from, final IAtom to)", "class_method_signature": "StandardBondGenerator.generatePlainSingleBond(final IAtom from, final IAtom to)", "testcase": false, "constructor": false}, {"identifier": "generateBoldWedgeBond", "parameters": "(IAtom from, IAtom to, List<IBond> toBonds)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateBoldWedgeBond(IAtom from, IAtom to, List<IBond> toBonds)", "full_signature": " IRenderingElement generateBoldWedgeBond(IAtom from, IAtom to, List<IBond> toBonds)", "class_method_signature": "StandardBondGenerator.generateBoldWedgeBond(IAtom from, IAtom to, List<IBond> toBonds)", "testcase": false, "constructor": false}, {"identifier": "generateHashedWedgeBond", "parameters": "(IAtom from, IAtom to, List<IBond> toBonds)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateHashedWedgeBond(IAtom from, IAtom to, List<IBond> toBonds)", "full_signature": " IRenderingElement generateHashedWedgeBond(IAtom from, IAtom to, List<IBond> toBonds)", "class_method_signature": "StandardBondGenerator.generateHashedWedgeBond(IAtom from, IAtom to, List<IBond> toBonds)", "testcase": false, "constructor": false}, {"identifier": "canDrawFancyHashedWedge", "parameters": "(IAtom to, List<IBond> toBonds, double length)", "modifiers": "private", "return": "boolean", "signature": "boolean canDrawFancyHashedWedge(IAtom to, List<IBond> toBonds, double length)", "full_signature": "private boolean canDrawFancyHashedWedge(IAtom to, List<IBond> toBonds, double length)", "class_method_signature": "StandardBondGenerator.canDrawFancyHashedWedge(IAtom to, List<IBond> toBonds, double length)", "testcase": false, "constructor": false}, {"identifier": "generateWavyBond", "parameters": "(final IAtom from, final IAtom to)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateWavyBond(final IAtom from, final IAtom to)", "full_signature": " IRenderingElement generateWavyBond(final IAtom from, final IAtom to)", "class_method_signature": "StandardBondGenerator.generateWavyBond(final IAtom from, final IAtom to)", "testcase": false, "constructor": false}, {"identifier": "generateDoubleBond", "parameters": "(IBond bond, boolean arom)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateDoubleBond(IBond bond, boolean arom)", "full_signature": "private IRenderingElement generateDoubleBond(IBond bond, boolean arom)", "class_method_signature": "StandardBondGenerator.generateDoubleBond(IBond bond, boolean arom)", "testcase": false, "constructor": false}, {"identifier": "specialOffsetBondNextToWedge", "parameters": "(IAtom atom, List<IBond> bonds)", "modifiers": "private", "return": "boolean", "signature": "boolean specialOffsetBondNextToWedge(IAtom atom, List<IBond> bonds)", "full_signature": "private boolean specialOffsetBondNextToWedge(IAtom atom, List<IBond> bonds)", "class_method_signature": "StandardBondGenerator.specialOffsetBondNextToWedge(IAtom atom, List<IBond> bonds)", "testcase": false, "constructor": false}, {"identifier": "selectPlainSingleBond", "parameters": "(List<IBond> bonds)", "modifiers": "private", "return": "IBond", "signature": "IBond selectPlainSingleBond(List<IBond> bonds)", "full_signature": "private IBond selectPlainSingleBond(List<IBond> bonds)", "class_method_signature": "StandardBondGenerator.selectPlainSingleBond(List<IBond> bonds)", "testcase": false, "constructor": false}, {"identifier": "isPlainBond", "parameters": "(IBond bond)", "modifiers": "private static", "return": "boolean", "signature": "boolean isPlainBond(IBond bond)", "full_signature": "private static boolean isPlainBond(IBond bond)", "class_method_signature": "StandardBondGenerator.isPlainBond(IBond bond)", "testcase": false, "constructor": false}, {"identifier": "atWideEndOfWedge", "parameters": "(final IAtom atom, final IBond bond)", "modifiers": "private", "return": "boolean", "signature": "boolean atWideEndOfWedge(final IAtom atom, final IBond bond)", "full_signature": "private boolean atWideEndOfWedge(final IAtom atom, final IBond bond)", "class_method_signature": "StandardBondGenerator.atWideEndOfWedge(final IAtom atom, final IBond bond)", "testcase": false, "constructor": false}, {"identifier": "generateOffsetDoubleBond", "parameters": "(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean dashed)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateOffsetDoubleBond(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean dashed)", "full_signature": "private IRenderingElement generateOffsetDoubleBond(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean dashed)", "class_method_signature": "StandardBondGenerator.generateOffsetDoubleBond(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean dashed)", "testcase": false, "constructor": false}, {"identifier": "generateOffsetDoubleBond", "parameters": "(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean invert, boolean dashed)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateOffsetDoubleBond(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean invert, boolean dashed)", "full_signature": "private IRenderingElement generateOffsetDoubleBond(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean invert, boolean dashed)", "class_method_signature": "StandardBondGenerator.generateOffsetDoubleBond(IBond bond, IAtom atom1, IAtom atom2, IBond atom1Bond,\n            List<IBond> atom2Bonds, boolean invert, boolean dashed)", "testcase": false, "constructor": false}, {"identifier": "generateCenteredDoubleBond", "parameters": "(IBond bond, IAtom atom1, IAtom atom2, List<IBond> atom1Bonds,\n            List<IBond> atom2Bonds)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateCenteredDoubleBond(IBond bond, IAtom atom1, IAtom atom2, List<IBond> atom1Bonds,\n            List<IBond> atom2Bonds)", "full_signature": "private IRenderingElement generateCenteredDoubleBond(IBond bond, IAtom atom1, IAtom atom2, List<IBond> atom1Bonds,\n            List<IBond> atom2Bonds)", "class_method_signature": "StandardBondGenerator.generateCenteredDoubleBond(IBond bond, IAtom atom1, IAtom atom2, List<IBond> atom1Bonds,\n            List<IBond> atom2Bonds)", "testcase": false, "constructor": false}, {"identifier": "generateCrossedDoubleBond", "parameters": "(IAtom from, IAtom to)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateCrossedDoubleBond(IAtom from, IAtom to)", "full_signature": "private IRenderingElement generateCrossedDoubleBond(IAtom from, IAtom to)", "class_method_signature": "StandardBondGenerator.generateCrossedDoubleBond(IAtom from, IAtom to)", "testcase": false, "constructor": false}, {"identifier": "generateTripleBond", "parameters": "(IBond bond, IAtom atom1, IAtom atom2)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateTripleBond(IBond bond, IAtom atom1, IAtom atom2)", "full_signature": "private IRenderingElement generateTripleBond(IBond bond, IAtom atom1, IAtom atom2)", "class_method_signature": "StandardBondGenerator.generateTripleBond(IBond bond, IAtom atom1, IAtom atom2)", "testcase": false, "constructor": false}, {"identifier": "generateAttachPoint", "parameters": "(IAtom atom, IBond bond)", "modifiers": "private", "return": "IRenderingElement", "signature": "IRenderingElement generateAttachPoint(IAtom atom, IBond bond)", "full_signature": "private IRenderingElement generateAttachPoint(IAtom atom, IBond bond)", "class_method_signature": "StandardBondGenerator.generateAttachPoint(IAtom atom, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "isAttachPoint", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean isAttachPoint(IAtom atom)", "full_signature": "private boolean isAttachPoint(IAtom atom)", "class_method_signature": "StandardBondGenerator.isAttachPoint(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "addAnnotation", "parameters": "(IAtom atom1, IAtom atom2, String label)", "modifiers": "private", "return": "void", "signature": "void addAnnotation(IAtom atom1, IAtom atom2, String label)", "full_signature": "private void addAnnotation(IAtom atom1, IAtom atom2, String label)", "class_method_signature": "StandardBondGenerator.addAnnotation(IAtom atom1, IAtom atom2, String label)", "testcase": false, "constructor": false}, {"identifier": "addAnnotation", "parameters": "(IAtom atom1, IAtom atom2, String label, Vector2d perpendicular)", "modifiers": "private", "return": "void", "signature": "void addAnnotation(IAtom atom1, IAtom atom2, String label, Vector2d perpendicular)", "full_signature": "private void addAnnotation(IAtom atom1, IAtom atom2, String label, Vector2d perpendicular)", "class_method_signature": "StandardBondGenerator.addAnnotation(IAtom atom1, IAtom atom2, String label, Vector2d perpendicular)", "testcase": false, "constructor": false}, {"identifier": "generateDashedBond", "parameters": "(Point2d fromPoint, Point2d toPoint, double start, double end)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateDashedBond(Point2d fromPoint, Point2d toPoint, double start, double end)", "full_signature": " IRenderingElement generateDashedBond(Point2d fromPoint, Point2d toPoint, double start, double end)", "class_method_signature": "StandardBondGenerator.generateDashedBond(Point2d fromPoint, Point2d toPoint, double start, double end)", "testcase": false, "constructor": false}, {"identifier": "generateDashedBond", "parameters": "(IAtom from, IAtom to)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateDashedBond(IAtom from, IAtom to)", "full_signature": " IRenderingElement generateDashedBond(IAtom from, IAtom to)", "class_method_signature": "StandardBondGenerator.generateDashedBond(IAtom from, IAtom to)", "testcase": false, "constructor": false}, {"identifier": "generateArrowBond", "parameters": "(IAtom from, IAtom to)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateArrowBond(IAtom from, IAtom to)", "full_signature": " IRenderingElement generateArrowBond(IAtom from, IAtom to)", "class_method_signature": "StandardBondGenerator.generateArrowBond(IAtom from, IAtom to)", "testcase": false, "constructor": false}, {"identifier": "generateBoldBond", "parameters": "(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateBoldBond(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "full_signature": " IRenderingElement generateBoldBond(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "class_method_signature": "StandardBondGenerator.generateBoldBond(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "testcase": false, "constructor": false}, {"identifier": "generateHashBond", "parameters": "(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateHashBond(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "full_signature": " IRenderingElement generateHashBond(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "class_method_signature": "StandardBondGenerator.generateHashBond(IAtom from, IAtom to,\n                                       List<IBond> fromBonds,\n                                       List<IBond> toBonds)", "testcase": false, "constructor": false}, {"identifier": "generateDotBond", "parameters": "(IAtom from, IAtom to)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement generateDotBond(IAtom from, IAtom to)", "full_signature": " IRenderingElement generateDotBond(IAtom from, IAtom to)", "class_method_signature": "StandardBondGenerator.generateDotBond(IAtom from, IAtom to)", "testcase": false, "constructor": false}, {"identifier": "newLineElement", "parameters": "(Tuple2d a, Tuple2d b)", "modifiers": "", "return": "IRenderingElement", "signature": "IRenderingElement newLineElement(Tuple2d a, Tuple2d b)", "full_signature": " IRenderingElement newLineElement(Tuple2d a, Tuple2d b)", "class_method_signature": "StandardBondGenerator.newLineElement(Tuple2d a, Tuple2d b)", "testcase": false, "constructor": false}, {"identifier": "newPolygon", "parameters": "(Color c, Tuple2d ... points)", "modifiers": "", "return": "GeneralPath", "signature": "GeneralPath newPolygon(Color c, Tuple2d ... points)", "full_signature": " GeneralPath newPolygon(Color c, Tuple2d ... points)", "class_method_signature": "StandardBondGenerator.newPolygon(Color c, Tuple2d ... points)", "testcase": false, "constructor": false}, {"identifier": "backOffPoint", "parameters": "(IAtom from, IAtom to)", "modifiers": "", "return": "Point2d", "signature": "Point2d backOffPoint(IAtom from, IAtom to)", "full_signature": " Point2d backOffPoint(IAtom from, IAtom to)", "class_method_signature": "StandardBondGenerator.backOffPoint(IAtom from, IAtom to)", "testcase": false, "constructor": false}, {"identifier": "hasDisplayedSymbol", "parameters": "(IAtom atom)", "modifiers": "", "return": "boolean", "signature": "boolean hasDisplayedSymbol(IAtom atom)", "full_signature": " boolean hasDisplayedSymbol(IAtom atom)", "class_method_signature": "StandardBondGenerator.hasDisplayedSymbol(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "backOffPointOf", "parameters": "(AtomSymbol symbol, Point2d fromPoint, Point2d toPoint, double backOff)", "modifiers": "static", "return": "Point2d", "signature": "Point2d backOffPointOf(AtomSymbol symbol, Point2d fromPoint, Point2d toPoint, double backOff)", "full_signature": "static Point2d backOffPointOf(AtomSymbol symbol, Point2d fromPoint, Point2d toPoint, double backOff)", "class_method_signature": "StandardBondGenerator.backOffPointOf(AtomSymbol symbol, Point2d fromPoint, Point2d toPoint, double backOff)", "testcase": false, "constructor": false}, {"identifier": "winding", "parameters": "(IBond bond1, IBond bond2)", "modifiers": "static", "return": "int", "signature": "int winding(IBond bond1, IBond bond2)", "full_signature": "static int winding(IBond bond1, IBond bond2)", "class_method_signature": "StandardBondGenerator.winding(IBond bond1, IBond bond2)", "testcase": false, "constructor": false}, {"identifier": "ringPreferenceMap", "parameters": "(IAtomContainer container,\n                                                        IRingSet smallest)", "modifiers": "static", "return": "Map<IBond, IAtomContainer>", "signature": "Map<IBond, IAtomContainer> ringPreferenceMap(IAtomContainer container,\n                                                        IRingSet smallest)", "full_signature": "static Map<IBond, IAtomContainer> ringPreferenceMap(IAtomContainer container,\n                                                        IRingSet smallest)", "class_method_signature": "StandardBondGenerator.ringPreferenceMap(IAtomContainer container,\n                                                        IRingSet smallest)", "testcase": false, "constructor": false}, {"identifier": "ringPreferenceMap", "parameters": "(IAtomContainer container)", "modifiers": "static", "return": "Map<IBond, IAtomContainer>", "signature": "Map<IBond, IAtomContainer> ringPreferenceMap(IAtomContainer container)", "full_signature": "static Map<IBond, IAtomContainer> ringPreferenceMap(IAtomContainer container)", "class_method_signature": "StandardBondGenerator.ringPreferenceMap(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "normalizeRingWinding", "parameters": "(IAtomContainer container)", "modifiers": "static", "return": "void", "signature": "void normalizeRingWinding(IAtomContainer container)", "full_signature": "static void normalizeRingWinding(IAtomContainer container)", "class_method_signature": "StandardBondGenerator.normalizeRingWinding(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "winding", "parameters": "(Point2d a, Point2d b, Point2d c)", "modifiers": "static", "return": "int", "signature": "int winding(Point2d a, Point2d b, Point2d c)", "full_signature": "static int winding(Point2d a, Point2d b, Point2d c)", "class_method_signature": "StandardBondGenerator.winding(Point2d a, Point2d b, Point2d c)", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/standard/StandardBondGenerator.java"}, "focal_method": {"identifier": "ringPreferenceMap", "parameters": "(IAtomContainer container,\n                                                        IRingSet smallest)", "modifiers": "static", "return": "Map<IBond, IAtomContainer>", "body": "static Map<IBond, IAtomContainer> ringPreferenceMap(IAtomContainer container,\n                                                        IRingSet smallest) {\n\n        if (smallest == null)\n            smallest = Cycles.edgeShort(container).toRingSet();\n\n        final List<IAtomContainer> rings = AtomContainerSetManipulator.getAllAtomContainers(smallest);\n\n        Collections.sort(rings, new RingBondOffsetComparator(container));\n\n        final Map<IBond, IAtomContainer> ringMap = new HashMap<IBond, IAtomContainer>();\n\n        // index bond -> ring based on the first encountered bond\n        for (IAtomContainer ring : rings) {\n            normalizeRingWinding(ring);\n            for (IBond bond : ring.bonds()) {\n                if (ringMap.containsKey(bond)) continue;\n                ringMap.put(bond, ring);\n            }\n        }\n\n        return Collections.unmodifiableMap(ringMap);\n    }", "signature": "Map<IBond, IAtomContainer> ringPreferenceMap(IAtomContainer container,\n                                                        IRingSet smallest)", "full_signature": "static Map<IBond, IAtomContainer> ringPreferenceMap(IAtomContainer container,\n                                                        IRingSet smallest)", "class_method_signature": "StandardBondGenerator.ringPreferenceMap(IAtomContainer container,\n                                                        IRingSet smallest)", "testcase": false, "constructor": false, "invocations": ["toRingSet", "edgeShort", "getAllAtomContainers", "sort", "normalizeRingWinding", "bonds", "containsKey", "put", "unmodifiableMap"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}