{"test_class": {"identifier": "CommentNotificationEventListenerTest", "superclass": "", "interfaces": "", "fields": [], "file": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/test/java/org/jbpm/casemgmt/impl/event/CommentNotificationEventListenerTest.java"}, "test_case": {"identifier": "testFindMentionsSingleMentionsInComment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindMentionsSingleMentionsInComment() {\n        String commentText = \"just a plain text mentioning @owner only\";\n        CommentNotificationEventListener listener = new CommentNotificationEventListener();\n        \n        List<String> found = listener.extractMentionedRoles(commentText);\n        assertThat(found).hasSize(1);\n        assertThat(found).contains(\"owner\");\n    }", "signature": "void testFindMentionsSingleMentionsInComment()", "full_signature": "@Test public void testFindMentionsSingleMentionsInComment()", "class_method_signature": "CommentNotificationEventListenerTest.testFindMentionsSingleMentionsInComment()", "testcase": true, "constructor": false, "invocations": ["extractMentionedRoles", "hasSize", "assertThat", "contains", "assertThat"]}, "focal_class": {"identifier": "CommentNotificationEventListener", "superclass": "", "interfaces": "implements CaseEventListener, Cacheable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(CommentNotificationEventListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CommentNotificationEventListener.class)", "var_name": "logger"}, {"original_string": "public static final String DEFAULT_SENDER = \"cases@jbpm.org\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SENDER = \"cases@jbpm.org\"", "var_name": "DEFAULT_SENDER"}, {"original_string": "public static final String DEFAULT_TEMPLATE = \"mentioned-in-comment\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_TEMPLATE = \"mentioned-in-comment\"", "var_name": "DEFAULT_TEMPLATE"}, {"original_string": "public static final String DEFAULT_SUBJECT = \"You have been mentioned in case ({0}) comment\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SUBJECT = \"You have been mentioned in case ({0}) comment\"", "var_name": "DEFAULT_SUBJECT"}, {"original_string": "public static final String CASE_ID_PARAM = \"_CASE_ID_\";", "modifier": "public static final", "type": "String", "declarator": "CASE_ID_PARAM = \"_CASE_ID_\"", "var_name": "CASE_ID_PARAM"}, {"original_string": "public static final String AUTHOR_PARAM = \"_AUTHOR_\";", "modifier": "public static final", "type": "String", "declarator": "AUTHOR_PARAM = \"_AUTHOR_\"", "var_name": "AUTHOR_PARAM"}, {"original_string": "public static final String COMMENT_PARAM = \"_COMMENT_\";", "modifier": "public static final", "type": "String", "declarator": "COMMENT_PARAM = \"_COMMENT_\"", "var_name": "COMMENT_PARAM"}, {"original_string": "public static final String COMMENT_ID_PARAM = \"_COMMENT_ID_\";", "modifier": "public static final", "type": "String", "declarator": "COMMENT_ID_PARAM = \"_COMMENT_ID_\"", "var_name": "COMMENT_ID_PARAM"}, {"original_string": "public static final String CREATED_AT_PARAM = \"_CREATED_AT_\";", "modifier": "public static final", "type": "String", "declarator": "CREATED_AT_PARAM = \"_CREATED_AT_\"", "var_name": "CREATED_AT_PARAM"}, {"original_string": "private final Pattern mentionPattern = Pattern.compile(\"(?<=^|(?<=[^a-zA-Z0-9-_\\\\\\\\.]))@([A-Za-z][A-Za-z0-9_]+)\");", "modifier": "private final", "type": "Pattern", "declarator": "mentionPattern = Pattern.compile(\"(?<=^|(?<=[^a-zA-Z0-9-_\\\\\\\\.]))@([A-Za-z][A-Za-z0-9_]+)\")", "var_name": "mentionPattern"}, {"original_string": "private final ServiceLoader<NotificationPublisher> discoveredPublishers = ServiceLoader.load(NotificationPublisher.class);", "modifier": "private final", "type": "ServiceLoader<NotificationPublisher>", "declarator": "discoveredPublishers = ServiceLoader.load(NotificationPublisher.class)", "var_name": "discoveredPublishers"}, {"original_string": "private final String sender;", "modifier": "private final", "type": "String", "declarator": "sender", "var_name": "sender"}, {"original_string": "private final String template;", "modifier": "private final", "type": "String", "declarator": "template", "var_name": "template"}, {"original_string": "private final String subject;", "modifier": "private final", "type": "String", "declarator": "subject", "var_name": "subject"}, {"original_string": "private final List<NotificationPublisher> publishers = new ArrayList<>();", "modifier": "private final", "type": "List<NotificationPublisher>", "declarator": "publishers = new ArrayList<>()", "var_name": "publishers"}], "methods": [{"identifier": "CommentNotificationEventListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " CommentNotificationEventListener()", "full_signature": "public  CommentNotificationEventListener()", "class_method_signature": "CommentNotificationEventListener.CommentNotificationEventListener()", "testcase": false, "constructor": true}, {"identifier": "CommentNotificationEventListener", "parameters": "(String sender, String template, String subject)", "modifiers": "public", "return": "", "signature": " CommentNotificationEventListener(String sender, String template, String subject)", "full_signature": "public  CommentNotificationEventListener(String sender, String template, String subject)", "class_method_signature": "CommentNotificationEventListener.CommentNotificationEventListener(String sender, String template, String subject)", "testcase": false, "constructor": true}, {"identifier": "afterCaseCommentAdded", "parameters": "(CaseCommentEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseCommentAdded(CaseCommentEvent event)", "full_signature": "@Override public void afterCaseCommentAdded(CaseCommentEvent event)", "class_method_signature": "CommentNotificationEventListener.afterCaseCommentAdded(CaseCommentEvent event)", "testcase": false, "constructor": false}, {"identifier": "afterCaseCommentUpdated", "parameters": "(CaseCommentEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void afterCaseCommentUpdated(CaseCommentEvent event)", "full_signature": "@Override public void afterCaseCommentUpdated(CaseCommentEvent event)", "class_method_signature": "CommentNotificationEventListener.afterCaseCommentUpdated(CaseCommentEvent event)", "testcase": false, "constructor": false}, {"identifier": "buildAndPublishNotification", "parameters": "(CaseCommentEvent event)", "modifiers": "protected", "return": "void", "signature": "void buildAndPublishNotification(CaseCommentEvent event)", "full_signature": "protected void buildAndPublishNotification(CaseCommentEvent event)", "class_method_signature": "CommentNotificationEventListener.buildAndPublishNotification(CaseCommentEvent event)", "testcase": false, "constructor": false}, {"identifier": "extractMentionedRoles", "parameters": "(String commentText)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> extractMentionedRoles(String commentText)", "full_signature": "protected List<String> extractMentionedRoles(String commentText)", "class_method_signature": "CommentNotificationEventListener.extractMentionedRoles(String commentText)", "testcase": false, "constructor": false}, {"identifier": "collectOrgEntitiesByRole", "parameters": "(List<String> mentionedRoles, CaseCommentEvent event, StringBuilder commentContent)", "modifiers": "protected", "return": "Set<OrganizationalEntity>", "signature": "Set<OrganizationalEntity> collectOrgEntitiesByRole(List<String> mentionedRoles, CaseCommentEvent event, StringBuilder commentContent)", "full_signature": "protected Set<OrganizationalEntity> collectOrgEntitiesByRole(List<String> mentionedRoles, CaseCommentEvent event, StringBuilder commentContent)", "class_method_signature": "CommentNotificationEventListener.collectOrgEntitiesByRole(List<String> mentionedRoles, CaseCommentEvent event, StringBuilder commentContent)", "testcase": false, "constructor": false}, {"identifier": "buildParams", "parameters": "(CaseCommentEvent event, StringBuilder commentContent)", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> buildParams(CaseCommentEvent event, StringBuilder commentContent)", "full_signature": "protected Map<String, Object> buildParams(CaseCommentEvent event, StringBuilder commentContent)", "class_method_signature": "CommentNotificationEventListener.buildParams(CaseCommentEvent event, StringBuilder commentContent)", "testcase": false, "constructor": false}, {"identifier": "addPublisher", "parameters": "(NotificationPublisher publisher)", "modifiers": "public", "return": "void", "signature": "void addPublisher(NotificationPublisher publisher)", "full_signature": "public void addPublisher(NotificationPublisher publisher)", "class_method_signature": "CommentNotificationEventListener.addPublisher(NotificationPublisher publisher)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CommentNotificationEventListener.close()", "testcase": false, "constructor": false}], "file": "jbpm-case-mgmt/jbpm-case-mgmt-impl/src/main/java/org/jbpm/casemgmt/impl/event/CommentNotificationEventListener.java"}, "focal_method": {"identifier": "extractMentionedRoles", "parameters": "(String commentText)", "modifiers": "protected", "return": "List<String>", "body": "protected List<String> extractMentionedRoles(String commentText) {\n        List<String> foundMentions = new ArrayList<>();\n        Matcher matcher = mentionPattern.matcher(commentText);\n        while (matcher.find()) {\n            String mention = matcher.group(0).substring(1);\n            foundMentions.add(mention);\n        }\n        \n        return foundMentions;\n    }", "signature": "List<String> extractMentionedRoles(String commentText)", "full_signature": "protected List<String> extractMentionedRoles(String commentText)", "class_method_signature": "CommentNotificationEventListener.extractMentionedRoles(String commentText)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "substring", "group", "add"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}