{"test_class": {"identifier": "TypesTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/TypesTest.java"}, "test_case": {"identifier": "testGenericTypeLost", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenericTypeLost() throws Exception {\n        Method list = SubSub.class.getMethod(\"list\");\n        assertEquals(String.class, Types.getActualTypeArgument(SubSub.class, list.getGenericReturnType()));\n\n    }", "signature": "void testGenericTypeLost()", "full_signature": "@Test public void testGenericTypeLost()", "class_method_signature": "TypesTest.testGenericTypeLost()", "testcase": true, "constructor": false, "invocations": ["getMethod", "assertEquals", "getActualTypeArgument", "getGenericReturnType"]}, "focal_class": {"identifier": "Types", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Type[] EMPTY_TYPES = new Type[] {};", "modifier": "protected static final", "type": "Type[]", "declarator": "EMPTY_TYPES = new Type[] {}", "var_name": "EMPTY_TYPES"}], "methods": [{"identifier": "getTypeInfo", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "TypeInfo", "signature": "TypeInfo getTypeInfo(Class<?> type)", "full_signature": "public static TypeInfo getTypeInfo(Class<?> type)", "class_method_signature": "Types.getTypeInfo(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "getTypeInfo", "parameters": "(Class<?> type,Type genericType)", "modifiers": "public static", "return": "TypeInfo", "signature": "TypeInfo getTypeInfo(Class<?> type,Type genericType)", "full_signature": "public static TypeInfo getTypeInfo(Class<?> type,Type genericType)", "class_method_signature": "Types.getTypeInfo(Class<?> type,Type genericType)", "testcase": false, "constructor": false}, {"identifier": "isSimpleType", "parameters": "(Class<?> type,Type genericType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSimpleType(Class<?> type,Type genericType)", "full_signature": "public static boolean isSimpleType(Class<?> type,Type genericType)", "class_method_signature": "Types.isSimpleType(Class<?> type,Type genericType)", "testcase": false, "constructor": false}, {"identifier": "isCollectionType", "parameters": "(Class<?> type, Type genericType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCollectionType(Class<?> type, Type genericType)", "full_signature": "public static boolean isCollectionType(Class<?> type, Type genericType)", "class_method_signature": "Types.isCollectionType(Class<?> type, Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getElementType", "parameters": "(Class<?> type, Type genericType)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getElementType(Class<?> type, Type genericType)", "full_signature": "public static Class<?> getElementType(Class<?> type, Type genericType)", "class_method_signature": "Types.getElementType(Class<?> type, Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getTypeArgument", "parameters": "(Type genericType)", "modifiers": "public static", "return": "Type", "signature": "Type getTypeArgument(Type genericType)", "full_signature": "public static Type getTypeArgument(Type genericType)", "class_method_signature": "Types.getTypeArgument(Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(Type genericType)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getTypeArguments(Type genericType)", "full_signature": "public static Type[] getTypeArguments(Type genericType)", "class_method_signature": "Types.getTypeArguments(Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getActualTypeArgument", "parameters": "(Class<?> declaringClass, Type genericType)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getActualTypeArgument(Class<?> declaringClass, Type genericType)", "full_signature": "public static Class<?> getActualTypeArgument(Class<?> declaringClass, Type genericType)", "class_method_signature": "Types.getActualTypeArgument(Class<?> declaringClass, Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getActualType", "parameters": "(Class<?> declaringClass, Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getActualType(Class<?> declaringClass, Type type)", "full_signature": "public static Class<?> getActualType(Class<?> declaringClass, Type type)", "class_method_signature": "Types.getActualType(Class<?> declaringClass, Type type)", "testcase": false, "constructor": false}, {"identifier": "getActualType", "parameters": "(Type type, TypeVariable var)", "modifiers": "protected static", "return": "Class<?>", "signature": "Class<?> getActualType(Type type, TypeVariable var)", "full_signature": "protected static Class<?> getActualType(Type type, TypeVariable var)", "class_method_signature": "Types.getActualType(Type type, TypeVariable var)", "testcase": false, "constructor": false}, {"identifier": "getActualTypeArgument", "parameters": "(Type genericType)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getActualTypeArgument(Type genericType)", "full_signature": "public static Class<?> getActualTypeArgument(Type genericType)", "class_method_signature": "Types.getActualTypeArgument(Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getActualTypeArguments", "parameters": "(Type genericType)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getActualTypeArguments(Type genericType)", "full_signature": "public static Class<?>[] getActualTypeArguments(Type genericType)", "class_method_signature": "Types.getActualTypeArguments(Type genericType)", "testcase": false, "constructor": false}, {"identifier": "getActualType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getActualType(Type type)", "full_signature": "public static Class<?> getActualType(Type type)", "class_method_signature": "Types.getActualType(Type type)", "testcase": false, "constructor": false}, {"identifier": "getActualTypes", "parameters": "(Type[] types)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getActualTypes(Type[] types)", "full_signature": "public static Class<?>[] getActualTypes(Type[] types)", "class_method_signature": "Types.getActualTypes(Type[] types)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, Type toType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignable(Type type, Type toType)", "full_signature": "public static boolean isAssignable(Type type, Type toType)", "class_method_signature": "Types.isAssignable(Type type, Type toType)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(Type type, Class<?> toClass)", "modifiers": "static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass)", "full_signature": "static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass)", "class_method_signature": "Types.getTypeArguments(Type type, Class<?> toClass)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "(Type type, Type assigningType)", "modifiers": "static", "return": "Class<?>", "signature": "Class<?> getRawType(Type type, Type assigningType)", "full_signature": "static Class<?> getRawType(Type type, Type assigningType)", "class_method_signature": "Types.getRawType(Type type, Type assigningType)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(Type type, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "modifiers": "private static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "full_signature": "private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "class_method_signature": "Types.getTypeArguments(Type type, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(ParameterizedType parameterizedType, Class<?> toClass,\n\t        Map<TypeVariable<?>, Type> subtypeVarAssigns)", "modifiers": "private static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType parameterizedType, Class<?> toClass,\n\t        Map<TypeVariable<?>, Type> subtypeVarAssigns)", "full_signature": "private static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType parameterizedType, Class<?> toClass,\n\t        Map<TypeVariable<?>, Type> subtypeVarAssigns)", "class_method_signature": "Types.getTypeArguments(ParameterizedType parameterizedType, Class<?> toClass,\n\t        Map<TypeVariable<?>, Type> subtypeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getTypeArguments", "parameters": "(Class<?> cls, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "modifiers": "private static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "full_signature": "private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "class_method_signature": "Types.getTypeArguments(Class<?> cls, Class<?> toClass, Map<TypeVariable<?>, Type> subtypeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "determineTypeArguments", "parameters": "(Class<?> cls, ParameterizedType superType)", "modifiers": "public static", "return": "Map<TypeVariable<?>, Type>", "signature": "Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType)", "full_signature": "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType)", "class_method_signature": "Types.determineTypeArguments(Class<?> cls, ParameterizedType superType)", "testcase": false, "constructor": false}, {"identifier": "mapTypeVariablesToArguments", "parameters": "(Class<T> cls, ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "void", "signature": "void mapTypeVariablesToArguments(Class<T> cls, ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static void mapTypeVariablesToArguments(Class<T> cls, ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "Types.mapTypeVariablesToArguments(Class<T> cls, ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getClosestParentType", "parameters": "(Class<?> cls, Class<?> superClass)", "modifiers": "private static", "return": "Type", "signature": "Type getClosestParentType(Class<?> cls, Class<?> superClass)", "full_signature": "private static Type getClosestParentType(Class<?> cls, Class<?> superClass)", "class_method_signature": "Types.getClosestParentType(Class<?> cls, Class<?> superClass)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, Type toType, Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(Type type, Type toType, Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(Type type, Type toType, Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "Types.isAssignable(Type type, Type toType, Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, Class<?> toClass)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(Type type, Class<?> toClass)", "full_signature": "private static boolean isAssignable(Type type, Class<?> toClass)", "class_method_signature": "Types.isAssignable(Type type, Class<?> toClass)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, ParameterizedType toParameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(Type type, ParameterizedType toParameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(Type type, ParameterizedType toParameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "Types.isAssignable(Type type, ParameterizedType toParameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, GenericArrayType toGenericArrayType, Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(Type type, GenericArrayType toGenericArrayType, Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType, Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "Types.isAssignable(Type type, GenericArrayType toGenericArrayType, Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, WildcardType toWildcardType, Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(Type type, WildcardType toWildcardType, Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(Type type, WildcardType toWildcardType, Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "Types.isAssignable(Type type, WildcardType toWildcardType, Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "isAssignable", "parameters": "(Type type, TypeVariable<?> toTypeVariable, Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAssignable(Type type, TypeVariable<?> toTypeVariable, Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static boolean isAssignable(Type type, TypeVariable<?> toTypeVariable, Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "Types.isAssignable(Type type, TypeVariable<?> toTypeVariable, Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "substituteTypeVariables", "parameters": "(Type type, Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "private static", "return": "Type", "signature": "Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "Types.substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false}, {"identifier": "getImplicitBounds", "parameters": "(TypeVariable<?> typeVariable)", "modifiers": "static", "return": "Type[]", "signature": "Type[] getImplicitBounds(TypeVariable<?> typeVariable)", "full_signature": "static Type[] getImplicitBounds(TypeVariable<?> typeVariable)", "class_method_signature": "Types.getImplicitBounds(TypeVariable<?> typeVariable)", "testcase": false, "constructor": false}, {"identifier": "getImplicitUpperBounds", "parameters": "(WildcardType wildcardType)", "modifiers": "static", "return": "Type[]", "signature": "Type[] getImplicitUpperBounds(WildcardType wildcardType)", "full_signature": "static Type[] getImplicitUpperBounds(WildcardType wildcardType)", "class_method_signature": "Types.getImplicitUpperBounds(WildcardType wildcardType)", "testcase": false, "constructor": false}, {"identifier": "getImplicitLowerBounds", "parameters": "(WildcardType wildcardType)", "modifiers": "static", "return": "Type[]", "signature": "Type[] getImplicitLowerBounds(WildcardType wildcardType)", "full_signature": "static Type[] getImplicitLowerBounds(WildcardType wildcardType)", "class_method_signature": "Types.getImplicitLowerBounds(WildcardType wildcardType)", "testcase": false, "constructor": false}, {"identifier": "normalizeUpperBounds", "parameters": "(Type[] bounds)", "modifiers": "static", "return": "Type[]", "signature": "Type[] normalizeUpperBounds(Type[] bounds)", "full_signature": "static Type[] normalizeUpperBounds(Type[] bounds)", "class_method_signature": "Types.normalizeUpperBounds(Type[] bounds)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "(ParameterizedType parameterizedType)", "modifiers": "private static", "return": "Class<?>", "signature": "Class<?> getRawType(ParameterizedType parameterizedType)", "full_signature": "private static Class<?> getRawType(ParameterizedType parameterizedType)", "class_method_signature": "Types.getRawType(ParameterizedType parameterizedType)", "testcase": false, "constructor": false}, {"identifier": "Types", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Types()", "full_signature": "protected  Types()", "class_method_signature": "Types.Types()", "testcase": false, "constructor": true}], "file": "base/lang/src/main/java/leap/lang/Types.java"}, "focal_method": {"identifier": "getActualTypeArgument", "parameters": "(Class<?> declaringClass, Type genericType)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getActualTypeArgument(Class<?> declaringClass, Type genericType) {\n        if(null == declaringClass) {\n            return getActualTypeArgument(genericType);\n        }else{\n            return getActualType(declaringClass, getTypeArgument(genericType));\n        }\n    }", "signature": "Class<?> getActualTypeArgument(Class<?> declaringClass, Type genericType)", "full_signature": "public static Class<?> getActualTypeArgument(Class<?> declaringClass, Type genericType)", "class_method_signature": "Types.getActualTypeArgument(Class<?> declaringClass, Type genericType)", "testcase": false, "constructor": false, "invocations": ["getActualTypeArgument", "getActualType", "getTypeArgument"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}