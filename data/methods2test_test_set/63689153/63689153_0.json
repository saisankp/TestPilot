{"test_class": {"identifier": "ValidatorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "rocketmq-client/src/test/java/com/alibaba/rocketmq/client/ValidatorsTest.java"}, "test_case": {"identifier": "topicValidatorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void topicValidatorTest() {\n        try {\n            Validators.checkTopic(\"Hello\");\n            Validators.checkTopic(\"%RETRY%Hello\");\n            Validators.checkTopic(\"_%RETRY%Hello\");\n            Validators.checkTopic(\"-%RETRY%Hello\");\n            Validators.checkTopic(\"223-%RETRY%Hello\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            Assert.assertTrue(false);\n        }\n    }", "signature": "void topicValidatorTest()", "full_signature": "@Test public void topicValidatorTest()", "class_method_signature": "ValidatorsTest.topicValidatorTest()", "testcase": true, "constructor": false, "invocations": ["checkTopic", "checkTopic", "checkTopic", "checkTopic", "checkTopic", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "Validators", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String VALID_PATTERN_STR = \"^[%|a-zA-Z0-9_-]+$\";", "modifier": "public static final", "type": "String", "declarator": "VALID_PATTERN_STR = \"^[%|a-zA-Z0-9_-]+$\"", "var_name": "VALID_PATTERN_STR"}, {"original_string": "public static final Pattern PATTERN = Pattern.compile(VALID_PATTERN_STR);", "modifier": "public static final", "type": "Pattern", "declarator": "PATTERN = Pattern.compile(VALID_PATTERN_STR)", "var_name": "PATTERN"}, {"original_string": "public static final int CHARACTER_MAX_LENGTH = 255;", "modifier": "public static final", "type": "int", "declarator": "CHARACTER_MAX_LENGTH = 255", "var_name": "CHARACTER_MAX_LENGTH"}], "methods": [{"identifier": "regularExpressionMatcher", "parameters": "(String origin, Pattern pattern)", "modifiers": "public static", "return": "boolean", "signature": "boolean regularExpressionMatcher(String origin, Pattern pattern)", "full_signature": "public static boolean regularExpressionMatcher(String origin, Pattern pattern)", "class_method_signature": "Validators.regularExpressionMatcher(String origin, Pattern pattern)", "testcase": false, "constructor": false}, {"identifier": "getGroupWithRegularExpression", "parameters": "(String origin, String patternStr)", "modifiers": "public static", "return": "String", "signature": "String getGroupWithRegularExpression(String origin, String patternStr)", "full_signature": "public static String getGroupWithRegularExpression(String origin, String patternStr)", "class_method_signature": "Validators.getGroupWithRegularExpression(String origin, String patternStr)", "testcase": false, "constructor": false}, {"identifier": "checkTopic", "parameters": "(String topic)", "modifiers": "public static", "return": "void", "signature": "void checkTopic(String topic)", "full_signature": "public static void checkTopic(String topic)", "class_method_signature": "Validators.checkTopic(String topic)", "testcase": false, "constructor": false}, {"identifier": "checkGroup", "parameters": "(String group)", "modifiers": "public static", "return": "void", "signature": "void checkGroup(String group)", "full_signature": "public static void checkGroup(String group)", "class_method_signature": "Validators.checkGroup(String group)", "testcase": false, "constructor": false}, {"identifier": "checkMessage", "parameters": "(Message msg, DefaultMQProducer defaultMQProducer)", "modifiers": "public static", "return": "void", "signature": "void checkMessage(Message msg, DefaultMQProducer defaultMQProducer)", "full_signature": "public static void checkMessage(Message msg, DefaultMQProducer defaultMQProducer)", "class_method_signature": "Validators.checkMessage(Message msg, DefaultMQProducer defaultMQProducer)", "testcase": false, "constructor": false}], "file": "rocketmq-client/src/main/java/com/alibaba/rocketmq/client/Validators.java"}, "focal_method": {"identifier": "checkTopic", "parameters": "(String topic)", "modifiers": "public static", "return": "void", "body": "public static void checkTopic(String topic) throws MQClientException {\n        if (UtilAll.isBlank(topic)) {\n            throw new MQClientException(\"the specified topic is blank\", null);\n        }\n\n        if (!regularExpressionMatcher(topic, PATTERN)) {\n            throw new MQClientException(String.format(\n                    \"the specified topic[%s] contains illegal characters, allowing only %s\", topic,\n                    VALID_PATTERN_STR), null);\n        }\n\n        if (topic.length() > CHARACTER_MAX_LENGTH) {\n            throw new MQClientException(\"the specified topic is longer than topic max length 255.\", null);\n        }\n\n        //whether the same with system reserved keyword\n        if (topic.equals(MixAll.DEFAULT_TOPIC)) {\n            throw new MQClientException(\n                    String.format(\"the topic[%s] is conflict with default topic.\", topic), null);\n        }\n    }", "signature": "void checkTopic(String topic)", "full_signature": "public static void checkTopic(String topic)", "class_method_signature": "Validators.checkTopic(String topic)", "testcase": false, "constructor": false, "invocations": ["isBlank", "regularExpressionMatcher", "format", "length", "equals", "format"]}, "repository": {"repo_id": 63689153, "url": "https://github.com/medusar/rocketmq-comment", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 1685, "license": "licensed"}}