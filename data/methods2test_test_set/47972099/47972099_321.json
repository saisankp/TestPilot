{"test_class": {"identifier": "BufferTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/buffer/BufferTest.java"}, "test_case": {"identifier": "testgetNioBufferThreadSafe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testgetNioBufferThreadSafe() {\n\t\tfinal MemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(1024);\n\t\tfinal BufferRecycler recycler = Mockito.mock(BufferRecycler.class);\n\n\t\tBuffer buffer = new Buffer(segment, recycler);\n\n\t\tByteBuffer buf1 = buffer.getNioBuffer();\n\t\tByteBuffer buf2 = buffer.getNioBuffer();\n\n\t\tassertNotNull(buf1);\n\t\tassertNotNull(buf2);\n\n\t\tassertTrue(\"Repeated call to getNioBuffer() returns the same nio buffer\", buf1 != buf2);\n\t}", "signature": "void testgetNioBufferThreadSafe()", "full_signature": "@Test public void testgetNioBufferThreadSafe()", "class_method_signature": "BufferTest.testgetNioBufferThreadSafe()", "testcase": true, "constructor": false, "invocations": ["allocateUnpooledSegment", "mock", "getNioBuffer", "getNioBuffer", "assertNotNull", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "Buffer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MemorySegment memorySegment;", "modifier": "private final", "type": "MemorySegment", "declarator": "memorySegment", "var_name": "memorySegment"}, {"original_string": "private final Object recycleLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "recycleLock = new Object()", "var_name": "recycleLock"}, {"original_string": "private final BufferRecycler recycler;", "modifier": "private final", "type": "BufferRecycler", "declarator": "recycler", "var_name": "recycler"}, {"original_string": "private boolean isBuffer;", "modifier": "private", "type": "boolean", "declarator": "isBuffer", "var_name": "isBuffer"}, {"original_string": "private int referenceCount = 1;", "modifier": "private", "type": "int", "declarator": "referenceCount = 1", "var_name": "referenceCount"}, {"original_string": "private int currentSize;", "modifier": "private", "type": "int", "declarator": "currentSize", "var_name": "currentSize"}], "methods": [{"identifier": "Buffer", "parameters": "(MemorySegment memorySegment, BufferRecycler recycler)", "modifiers": "public", "return": "", "signature": " Buffer(MemorySegment memorySegment, BufferRecycler recycler)", "full_signature": "public  Buffer(MemorySegment memorySegment, BufferRecycler recycler)", "class_method_signature": "Buffer.Buffer(MemorySegment memorySegment, BufferRecycler recycler)", "testcase": false, "constructor": true}, {"identifier": "Buffer", "parameters": "(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer)", "modifiers": "public", "return": "", "signature": " Buffer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer)", "full_signature": "public  Buffer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer)", "class_method_signature": "Buffer.Buffer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer)", "testcase": false, "constructor": true}, {"identifier": "isBuffer", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBuffer()", "full_signature": "public boolean isBuffer()", "class_method_signature": "Buffer.isBuffer()", "testcase": false, "constructor": false}, {"identifier": "tagAsEvent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void tagAsEvent()", "full_signature": "public void tagAsEvent()", "class_method_signature": "Buffer.tagAsEvent()", "testcase": false, "constructor": false}, {"identifier": "getMemorySegment", "parameters": "()", "modifiers": "public", "return": "MemorySegment", "signature": "MemorySegment getMemorySegment()", "full_signature": "public MemorySegment getMemorySegment()", "class_method_signature": "Buffer.getMemorySegment()", "testcase": false, "constructor": false}, {"identifier": "getNioBuffer", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "signature": "ByteBuffer getNioBuffer()", "full_signature": "public ByteBuffer getNioBuffer()", "class_method_signature": "Buffer.getNioBuffer()", "testcase": false, "constructor": false}, {"identifier": "getRecycler", "parameters": "()", "modifiers": "public", "return": "BufferRecycler", "signature": "BufferRecycler getRecycler()", "full_signature": "public BufferRecycler getRecycler()", "class_method_signature": "Buffer.getRecycler()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "Buffer.getSize()", "testcase": false, "constructor": false}, {"identifier": "setSize", "parameters": "(int newSize)", "modifiers": "public", "return": "void", "signature": "void setSize(int newSize)", "full_signature": "public void setSize(int newSize)", "class_method_signature": "Buffer.setSize(int newSize)", "testcase": false, "constructor": false}, {"identifier": "recycle", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void recycle()", "full_signature": "public void recycle()", "class_method_signature": "Buffer.recycle()", "testcase": false, "constructor": false}, {"identifier": "retain", "parameters": "()", "modifiers": "public", "return": "Buffer", "signature": "Buffer retain()", "full_signature": "public Buffer retain()", "class_method_signature": "Buffer.retain()", "testcase": false, "constructor": false}, {"identifier": "isRecycled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRecycled()", "full_signature": "public boolean isRecycled()", "class_method_signature": "Buffer.isRecycled()", "testcase": false, "constructor": false}, {"identifier": "ensureNotRecycled", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureNotRecycled()", "full_signature": "private void ensureNotRecycled()", "class_method_signature": "Buffer.ensureNotRecycled()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Buffer.toString()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java"}, "focal_method": {"identifier": "getNioBuffer", "parameters": "()", "modifiers": "public", "return": "ByteBuffer", "body": "public ByteBuffer getNioBuffer() {\n\t\tsynchronized (recycleLock) {\n\t\t\tensureNotRecycled();\n\t\t\t// the memory segment returns a distinct buffer every time\n\t\t\treturn memorySegment.wrap(0, currentSize);\n\t\t}\n\t}", "signature": "ByteBuffer getNioBuffer()", "full_signature": "public ByteBuffer getNioBuffer()", "class_method_signature": "Buffer.getNioBuffer()", "testcase": false, "constructor": false, "invocations": ["ensureNotRecycled", "wrap"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}