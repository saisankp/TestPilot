{"test_class": {"identifier": "LicenseInfoParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private User dummyUser = new User().setEmail(\"dummy@some.domain\");", "modifier": "private", "type": "User", "declarator": "dummyUser = new User().setEmail(\"dummy@some.domain\")", "var_name": "dummyUser"}], "file": "backend/src/src-licenseinfo/src/test/java/org/eclipse/sw360/licenseinfo/parsers/LicenseInfoParserTest.java"}, "test_case": {"identifier": "testIsApplicableTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsApplicableTo() throws Exception {\n        LicenseInfoParser parser = new LicenseInfoParser(null, null) {\n            @Override\n            public List<String> getApplicableFileExtensions() {\n                return Arrays.asList(\".ext1\", \".ext2\");\n            }\n\n            @Override\n            public <T> List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context) throws TException {\n                return null;\n            }\n        };\n        Arrays.stream(AttachmentType.values()).filter(SW360Constants.LICENSE_INFO_ATTACHMENT_TYPES::contains)\n                .forEach(attachmentType -> parser.getApplicableFileExtensions().stream().forEach(extension -> {\n                    String filename = \"filename\" + extension;\n                    Attachment attachment = makeAttachment(filename, attachmentType);\n                    try {\n                        assertThat(\n                                parser.isApplicableTo(attachment, dummyUser,\n                                        new Project().setVisbility(Visibility.ME_AND_MODERATORS).setCreatedBy(dummyUser.getEmail())\n                                                .setAttachments(Collections.singleton(\n                                                        new Attachment().setAttachmentContentId(attachment.getAttachmentContentId())))),\n                                is(true));\n                    } catch (TException e) {\n                        e.printStackTrace();\n                    }\n                }));\n    }", "signature": "void testIsApplicableTo()", "full_signature": "@Test public void testIsApplicableTo()", "class_method_signature": "LicenseInfoParserTest.testIsApplicableTo()", "testcase": true, "constructor": false, "invocations": ["asList", "forEach", "filter", "stream", "values", "forEach", "stream", "getApplicableFileExtensions", "makeAttachment", "assertThat", "isApplicableTo", "setAttachments", "setCreatedBy", "setVisbility", "getEmail", "singleton", "setAttachmentContentId", "getAttachmentContentId", "is", "printStackTrace"]}, "focal_class": {"identifier": "LicenseInfoParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final AttachmentConnector attachmentConnector;", "modifier": "protected final", "type": "AttachmentConnector", "declarator": "attachmentConnector", "var_name": "attachmentConnector"}, {"original_string": "protected AttachmentContentProvider attachmentContentProvider;", "modifier": "protected", "type": "AttachmentContentProvider", "declarator": "attachmentContentProvider", "var_name": "attachmentContentProvider"}], "methods": [{"identifier": "LicenseInfoParser", "parameters": "(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "modifiers": "protected", "return": "", "signature": " LicenseInfoParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "full_signature": "protected  LicenseInfoParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "class_method_signature": "LicenseInfoParser.LicenseInfoParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "testcase": false, "constructor": true}, {"identifier": "getApplicableFileExtensions", "parameters": "()", "modifiers": "public abstract", "return": "List<String>", "signature": "List<String> getApplicableFileExtensions()", "full_signature": "public abstract List<String> getApplicableFileExtensions()", "class_method_signature": "LicenseInfoParser.getApplicableFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "isApplicableTo", "parameters": "(Attachment attachmentContent, User user, T context)", "modifiers": "public", "return": "boolean", "signature": "boolean isApplicableTo(Attachment attachmentContent, User user, T context)", "full_signature": "public boolean isApplicableTo(Attachment attachmentContent, User user, T context)", "class_method_signature": "LicenseInfoParser.isApplicableTo(Attachment attachmentContent, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "getLicenseInfos", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "public abstract", "return": "List<LicenseInfoParsingResult>", "signature": "List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "full_signature": "public abstract List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "class_method_signature": "LicenseInfoParser.getLicenseInfos(Attachment attachment, User user, T context)", "testcase": false, "constructor": false}], "file": "backend/src/src-licenseinfo/src/main/java/org/eclipse/sw360/licenseinfo/parsers/LicenseInfoParser.java"}, "focal_method": {"identifier": "isApplicableTo", "parameters": "(Attachment attachmentContent, User user, T context)", "modifiers": "public", "return": "boolean", "body": "public <T> boolean isApplicableTo(Attachment attachmentContent, User user, T context) throws TException {\n        List<String> applicableFileExtensions = getApplicableFileExtensions();\n        if(applicableFileExtensions.size() == 0){\n            return true;\n        }\n        String lowerFileName = attachmentContent.getFilename().toLowerCase();\n        return applicableFileExtensions.stream()\n                .anyMatch(extension -> lowerFileName.endsWith(extension.toLowerCase()));\n    }", "signature": "boolean isApplicableTo(Attachment attachmentContent, User user, T context)", "full_signature": "public boolean isApplicableTo(Attachment attachmentContent, User user, T context)", "class_method_signature": "LicenseInfoParser.isApplicableTo(Attachment attachmentContent, User user, T context)", "testcase": false, "constructor": false, "invocations": ["getApplicableFileExtensions", "size", "toLowerCase", "getFilename", "anyMatch", "stream", "endsWith", "toLowerCase"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}