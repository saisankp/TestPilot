{"test_class": {"identifier": "CachedAnnotationScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-core/src/test/java/step/core/scanner/CachedAnnotationScannerTest.java"}, "test_case": {"identifier": "testMethod1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMethod1() {\n\t\tMethod method1 = CachedAnnotationScanner.getMethodsWithAnnotation(TestAnnotation.class).stream().findFirst().get();\n\t\tassertEquals(\"testMethod\", method1.getName());\n\t}", "signature": "void testMethod1()", "full_signature": "@Test public void testMethod1()", "class_method_signature": "CachedAnnotationScannerTest.testMethod1()", "testcase": true, "constructor": false, "invocations": ["get", "findFirst", "stream", "getMethodsWithAnnotation", "assertEquals", "getName"]}, "focal_class": {"identifier": "CachedAnnotationScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentHashMap<Key, AnnotationScanner> annotationScanners = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentHashMap<Key, AnnotationScanner>", "declarator": "annotationScanners = new ConcurrentHashMap<>()", "var_name": "annotationScanners"}, {"original_string": "private static final String ALLPACKAGES_PREFIXES = \"\";", "modifier": "private static final", "type": "String", "declarator": "ALLPACKAGES_PREFIXES = \"\"", "var_name": "ALLPACKAGES_PREFIXES"}], "methods": [{"identifier": "getClassesWithAnnotation", "parameters": "(Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getClassesWithAnnotation(Class<? extends Annotation> annotationClass)", "full_signature": "public static Set<Class<?>> getClassesWithAnnotation(Class<? extends Annotation> annotationClass)", "class_method_signature": "CachedAnnotationScanner.getClassesWithAnnotation(Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getClassesWithAnnotation", "parameters": "(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getClassesWithAnnotation(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "full_signature": "public static Set<Class<?>> getClassesWithAnnotation(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "class_method_signature": "CachedAnnotationScanner.getClassesWithAnnotation(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "testcase": false, "constructor": false}, {"identifier": "getClassesWithAnnotation", "parameters": "(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getClassesWithAnnotation(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "full_signature": "public static Set<Class<?>> getClassesWithAnnotation(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "class_method_signature": "CachedAnnotationScanner.getClassesWithAnnotation(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "testcase": false, "constructor": false}, {"identifier": "getMethodsWithAnnotation", "parameters": "(Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "Set<Method>", "signature": "Set<Method> getMethodsWithAnnotation(Class<? extends Annotation> annotationClass)", "full_signature": "public static Set<Method> getMethodsWithAnnotation(Class<? extends Annotation> annotationClass)", "class_method_signature": "CachedAnnotationScanner.getMethodsWithAnnotation(Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getMethodsWithAnnotation", "parameters": "(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "modifiers": "public static", "return": "Set<Method>", "signature": "Set<Method> getMethodsWithAnnotation(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "full_signature": "public static Set<Method> getMethodsWithAnnotation(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "class_method_signature": "CachedAnnotationScanner.getMethodsWithAnnotation(Class<? extends Annotation> annotationClass,\n\t\t\tClassLoader classloader)", "testcase": false, "constructor": false}, {"identifier": "getMethodsWithAnnotation", "parameters": "(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "modifiers": "public static", "return": "Set<Method>", "signature": "Set<Method> getMethodsWithAnnotation(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "full_signature": "public static Set<Method> getMethodsWithAnnotation(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "class_method_signature": "CachedAnnotationScanner.getMethodsWithAnnotation(String packagePrefix,\n\t\t\tClass<? extends Annotation> annotationClass, ClassLoader classloader)", "testcase": false, "constructor": false}, {"identifier": "getAnnotationScannerInstance", "parameters": "(String packagePrefix, ClassLoader classLoader)", "modifiers": "private static", "return": "AnnotationScanner", "signature": "AnnotationScanner getAnnotationScannerInstance(String packagePrefix, ClassLoader classLoader)", "full_signature": "private static AnnotationScanner getAnnotationScannerInstance(String packagePrefix, ClassLoader classLoader)", "class_method_signature": "CachedAnnotationScanner.getAnnotationScannerInstance(String packagePrefix, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "clearCache", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearCache()", "full_signature": "public static void clearCache()", "class_method_signature": "CachedAnnotationScanner.clearCache()", "testcase": false, "constructor": false}], "file": "step-core/src/main/java/step/core/scanner/CachedAnnotationScanner.java"}, "focal_method": {"identifier": "getMethodsWithAnnotation", "parameters": "(Class<? extends Annotation> annotationClass)", "modifiers": "public static", "return": "Set<Method>", "body": "public static Set<Method> getMethodsWithAnnotation(Class<? extends Annotation> annotationClass) {\n\t\treturn getMethodsWithAnnotation(annotationClass, Thread.currentThread().getContextClassLoader());\n\t}", "signature": "Set<Method> getMethodsWithAnnotation(Class<? extends Annotation> annotationClass)", "full_signature": "public static Set<Method> getMethodsWithAnnotation(Class<? extends Annotation> annotationClass)", "class_method_signature": "CachedAnnotationScanner.getMethodsWithAnnotation(Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false, "invocations": ["getMethodsWithAnnotation", "getContextClassLoader", "currentThread"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}