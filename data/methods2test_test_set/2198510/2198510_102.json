{"test_class": {"identifier": "TestLoadBalancingRpcClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TestLoadBalancingRpcClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TestLoadBalancingRpcClient.class)", "var_name": "LOGGER"}], "file": "flume-ng-sdk/src/test/java/org/apache/flume/api/TestLoadBalancingRpcClient.java"}, "test_case": {"identifier": "testRoundRobinBackoffFailureRecovery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRoundRobinBackoffFailureRecovery()\n      throws EventDeliveryException, InterruptedException {\n    Properties p = new Properties();\n    List<LoadBalancedAvroHandler> hosts =\n        new ArrayList<LoadBalancedAvroHandler>();\n    List<Server> servers = new ArrayList<Server>();\n    StringBuilder hostList = new StringBuilder(\"\");\n    for (int i = 0; i < 3; i++) {\n      LoadBalancedAvroHandler s = new LoadBalancedAvroHandler();\n      hosts.add(s);\n      if (i == 1) {\n        s.setFailed();\n      }\n      Server srv = RpcTestUtils.startServer(s);\n      servers.add(srv);\n      String name = \"h\" + i;\n      p.put(\"hosts.\" + name, \"127.0.0.1:\" + srv.getPort());\n      hostList.append(name).append(\" \");\n    }\n    p.put(\"hosts\", hostList.toString().trim());\n    p.put(\"client.type\", \"default_loadbalance\");\n    p.put(\"host-selector\", \"round_robin\");\n    p.put(\"backoff\", \"true\");\n\n    RpcClient c = RpcClientFactory.getInstance(p);\n    Assert.assertTrue(c instanceof LoadBalancingRpcClient);\n\n\n    for (int i = 0; i < 3; i++) {\n      c.append(EventBuilder.withBody(\"recovery test\".getBytes()));\n    }\n    hosts.get(1).setOK();\n    Thread.sleep(3000);\n    int numEvents = 60;\n\n    for (int i = 0; i < numEvents; i++) {\n      c.append(EventBuilder.withBody(\"testing\".getBytes()));\n    }\n\n    Assert.assertEquals(2 + (numEvents / 3), hosts.get(0).getAppendCount());\n    Assert.assertEquals(0 + (numEvents / 3), hosts.get(1).getAppendCount());\n    Assert.assertEquals(1 + (numEvents / 3), hosts.get(2).getAppendCount());\n  }", "signature": "void testRoundRobinBackoffFailureRecovery()", "full_signature": "@Test public void testRoundRobinBackoffFailureRecovery()", "class_method_signature": "TestLoadBalancingRpcClient.testRoundRobinBackoffFailureRecovery()", "testcase": true, "constructor": false, "invocations": ["add", "setFailed", "startServer", "add", "put", "getPort", "append", "append", "put", "trim", "toString", "put", "put", "put", "getInstance", "assertTrue", "append", "withBody", "getBytes", "setOK", "get", "sleep", "append", "withBody", "getBytes", "assertEquals", "getAppendCount", "get", "assertEquals", "getAppendCount", "get", "assertEquals", "getAppendCount", "get"]}, "focal_class": {"identifier": "LoadBalancingRpcClient", "superclass": "extends AbstractRpcClient", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory\n      .getLogger(LoadBalancingRpcClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory\n      .getLogger(LoadBalancingRpcClient.class)", "var_name": "LOGGER"}, {"original_string": "private List<HostInfo> hosts;", "modifier": "private", "type": "List<HostInfo>", "declarator": "hosts", "var_name": "hosts"}, {"original_string": "private HostSelector selector;", "modifier": "private", "type": "HostSelector", "declarator": "selector", "var_name": "selector"}, {"original_string": "private Map<String, RpcClient> clientMap;", "modifier": "private", "type": "Map<String, RpcClient>", "declarator": "clientMap", "var_name": "clientMap"}, {"original_string": "private Properties configurationProperties;", "modifier": "private", "type": "Properties", "declarator": "configurationProperties", "var_name": "configurationProperties"}, {"original_string": "private volatile boolean isOpen = false;", "modifier": "private volatile", "type": "boolean", "declarator": "isOpen = false", "var_name": "isOpen"}], "methods": [{"identifier": "append", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "signature": "void append(Event event)", "full_signature": "@Override public void append(Event event)", "class_method_signature": "LoadBalancingRpcClient.append(Event event)", "testcase": false, "constructor": false}, {"identifier": "appendBatch", "parameters": "(List<Event> events)", "modifiers": "@Override public", "return": "void", "signature": "void appendBatch(List<Event> events)", "full_signature": "@Override public void appendBatch(List<Event> events)", "class_method_signature": "LoadBalancingRpcClient.appendBatch(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "@Override public boolean isActive()", "class_method_signature": "LoadBalancingRpcClient.isActive()", "testcase": false, "constructor": false}, {"identifier": "throwIfClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void throwIfClosed()", "full_signature": "private void throwIfClosed()", "class_method_signature": "LoadBalancingRpcClient.throwIfClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LoadBalancingRpcClient.close()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Properties properties)", "modifiers": "@Override protected", "return": "void", "signature": "void configure(Properties properties)", "full_signature": "@Override protected void configure(Properties properties)", "class_method_signature": "LoadBalancingRpcClient.configure(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getClient", "parameters": "(HostInfo info)", "modifiers": "private synchronized", "return": "RpcClient", "signature": "RpcClient getClient(HostInfo info)", "full_signature": "private synchronized RpcClient getClient(HostInfo info)", "class_method_signature": "LoadBalancingRpcClient.getClient(HostInfo info)", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(String referenceName)", "modifiers": "private", "return": "RpcClient", "signature": "RpcClient createClient(String referenceName)", "full_signature": "private RpcClient createClient(String referenceName)", "class_method_signature": "LoadBalancingRpcClient.createClient(String referenceName)", "testcase": false, "constructor": false}, {"identifier": "getClientConfigurationProperties", "parameters": "(String referenceName)", "modifiers": "private", "return": "Properties", "signature": "Properties getClientConfigurationProperties(String referenceName)", "full_signature": "private Properties getClientConfigurationProperties(String referenceName)", "class_method_signature": "LoadBalancingRpcClient.getClientConfigurationProperties(String referenceName)", "testcase": false, "constructor": false}], "file": "flume-ng-sdk/src/main/java/org/apache/flume/api/LoadBalancingRpcClient.java"}, "focal_method": {"identifier": "append", "parameters": "(Event event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void append(Event event) throws EventDeliveryException {\n    throwIfClosed();\n    boolean eventSent = false;\n    Iterator<HostInfo> it = selector.createHostIterator();\n\n    while (it.hasNext()) {\n      HostInfo host = it.next();\n      try {\n        RpcClient client = getClient(host);\n        client.append(event);\n        eventSent = true;\n        break;\n      } catch (Exception ex) {\n        selector.informFailure(host);\n        LOGGER.warn(\"Failed to send event to host \" + host, ex);\n      }\n    }\n\n    if (!eventSent) {\n      throw new EventDeliveryException(\"Unable to send event to any host\");\n    }\n  }", "signature": "void append(Event event)", "full_signature": "@Override public void append(Event event)", "class_method_signature": "LoadBalancingRpcClient.append(Event event)", "testcase": false, "constructor": false, "invocations": ["throwIfClosed", "createHostIterator", "hasNext", "next", "getClient", "append", "informFailure", "warn"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}