{"test_class": {"identifier": "RepositoryUserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String USER_ID = \"user\";", "modifier": "private final", "type": "String", "declarator": "USER_ID = \"user\"", "var_name": "USER_ID"}, {"original_string": "@Mock\n    private UserRepository userRepoMock;", "modifier": "@Mock\n    private", "type": "UserRepository", "declarator": "userRepoMock", "var_name": "userRepoMock"}, {"original_string": "@Mock\n    private UserDataRepository userDataRepoMock;", "modifier": "@Mock\n    private", "type": "UserDataRepository", "declarator": "userDataRepoMock", "var_name": "userDataRepoMock"}, {"original_string": "@Mock\n    private LdapAdapter ldapAdapterMock;", "modifier": "@Mock\n    private", "type": "LdapAdapter", "declarator": "ldapAdapterMock", "var_name": "ldapAdapterMock"}, {"original_string": "@Mock\n    private HierarchyTreeNodeRepository hierarchyTreeNodeRepoMock;", "modifier": "@Mock\n    private", "type": "HierarchyTreeNodeRepository", "declarator": "hierarchyTreeNodeRepoMock", "var_name": "hierarchyTreeNodeRepoMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private User otherUserMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "otherUserMock", "var_name": "otherUserMock"}, {"original_string": "@Mock\n    private HierarchyTreeNode hierarchyTreeNodeMock;", "modifier": "@Mock\n    private", "type": "HierarchyTreeNode", "declarator": "hierarchyTreeNodeMock", "var_name": "hierarchyTreeNodeMock"}, {"original_string": "@Mock\n    private HierarchyTreeNode otherHierarchyTreeNodeMock;", "modifier": "@Mock\n    private", "type": "HierarchyTreeNode", "declarator": "otherHierarchyTreeNodeMock", "var_name": "otherHierarchyTreeNodeMock"}, {"original_string": "@Mock\n    private UserData userDataMock;", "modifier": "@Mock\n    private", "type": "UserData", "declarator": "userDataMock", "var_name": "userDataMock"}, {"original_string": "@Mock\n    private HibernateSearchService hibernateSearchServiceMock;", "modifier": "@Mock\n    private", "type": "HibernateSearchService", "declarator": "hibernateSearchServiceMock", "var_name": "hibernateSearchServiceMock"}, {"original_string": "private RepositoryUserService repoUserService;", "modifier": "private", "type": "RepositoryUserService", "declarator": "repoUserService", "var_name": "repoUserService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/user/RepositoryUserServiceTest.java"}, "test_case": {"identifier": "getHierarchyForUserReturnsHierarchyWhenPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getHierarchyForUserReturnsHierarchyWhenPresent() {\n        // given\n        given(hierarchyTreeNodeRepoMock.findByUser(userMock)).willReturn(Optional.of(hierarchyTreeNodeMock));\n\n        // when\n        var actualHierarchy = repoUserService.getHierarchyForUser(userMock);\n\n        // then\n        assertThat(actualHierarchy).isEqualTo(hierarchyTreeNodeMock);\n    }", "signature": "void getHierarchyForUserReturnsHierarchyWhenPresent()", "full_signature": "@Test public void getHierarchyForUserReturnsHierarchyWhenPresent()", "class_method_signature": "RepositoryUserServiceTest.getHierarchyForUserReturnsHierarchyWhenPresent()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "findByUser", "of", "getHierarchyForUser", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "RepositoryUserService", "superclass": "", "interfaces": "implements UserService", "fields": [{"original_string": "private final UserRepository userRepo;", "modifier": "private final", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "private final UserDataRepository dataRepo;", "modifier": "private final", "type": "UserDataRepository", "declarator": "dataRepo", "var_name": "dataRepo"}, {"original_string": "private final LdapAdapter ldapAdapter;", "modifier": "private final", "type": "LdapAdapter", "declarator": "ldapAdapter", "var_name": "ldapAdapter"}, {"original_string": "private final HierarchyTreeNodeRepository hierarchyTreeNodeRepo;", "modifier": "private final", "type": "HierarchyTreeNodeRepository", "declarator": "hierarchyTreeNodeRepo", "var_name": "hierarchyTreeNodeRepo"}, {"original_string": "private final HibernateSearchService hibernateSearchService;", "modifier": "private final", "type": "HibernateSearchService", "declarator": "hibernateSearchService", "var_name": "hibernateSearchService"}], "methods": [{"identifier": "RepositoryUserService", "parameters": "(UserRepository userRepo,\n                                 UserDataRepository dataRepo,\n                                 LdapAdapter ldapAdapter,\n                                 HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                                 HibernateSearchService hibernateSearchService)", "modifiers": "public", "return": "", "signature": " RepositoryUserService(UserRepository userRepo,\n                                 UserDataRepository dataRepo,\n                                 LdapAdapter ldapAdapter,\n                                 HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                                 HibernateSearchService hibernateSearchService)", "full_signature": "public  RepositoryUserService(UserRepository userRepo,\n                                 UserDataRepository dataRepo,\n                                 LdapAdapter ldapAdapter,\n                                 HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                                 HibernateSearchService hibernateSearchService)", "class_method_signature": "RepositoryUserService.RepositoryUserService(UserRepository userRepo,\n                                 UserDataRepository dataRepo,\n                                 LdapAdapter ldapAdapter,\n                                 HierarchyTreeNodeRepository hierarchyTreeNodeRepo,\n                                 HibernateSearchService hibernateSearchService)", "testcase": false, "constructor": true}, {"identifier": "userExists", "parameters": "(@NonNull String userId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userExists(@NonNull String userId)", "full_signature": "@Override public boolean userExists(@NonNull String userId)", "class_method_signature": "RepositoryUserService.userExists(@NonNull String userId)", "testcase": false, "constructor": false}, {"identifier": "userIsManager", "parameters": "(@NonNull User user)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userIsManager(@NonNull User user)", "full_signature": "@Override public boolean userIsManager(@NonNull User user)", "class_method_signature": "RepositoryUserService.userIsManager(@NonNull User user)", "testcase": false, "constructor": false}, {"identifier": "getHierarchyForUser", "parameters": "(@NonNull User user)", "modifiers": "@Override public", "return": "HierarchyTreeNode", "signature": "HierarchyTreeNode getHierarchyForUser(@NonNull User user)", "full_signature": "@Override public HierarchyTreeNode getHierarchyForUser(@NonNull User user)", "class_method_signature": "RepositoryUserService.getHierarchyForUser(@NonNull User user)", "testcase": false, "constructor": false}, {"identifier": "getUserData", "parameters": "(@NonNull User user)", "modifiers": "@Override public", "return": "UserData", "signature": "UserData getUserData(@NonNull User user)", "full_signature": "@Override public UserData getUserData(@NonNull User user)", "class_method_signature": "RepositoryUserService.getUserData(@NonNull User user)", "testcase": false, "constructor": false}, {"identifier": "getUserById", "parameters": "(@NonNull String userId)", "modifiers": "@Override public", "return": "User", "signature": "User getUserById(@NonNull String userId)", "full_signature": "@Override public User getUserById(@NonNull String userId)", "class_method_signature": "RepositoryUserService.getUserById(@NonNull String userId)", "testcase": false, "constructor": false}, {"identifier": "userHasStaffMember", "parameters": "(@NonNull User user, @NonNull User staffMember)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userHasStaffMember(@NonNull User user, @NonNull User staffMember)", "full_signature": "@Override public boolean userHasStaffMember(@NonNull User user, @NonNull User staffMember)", "class_method_signature": "RepositoryUserService.userHasStaffMember(@NonNull User user, @NonNull User staffMember)", "testcase": false, "constructor": false}, {"identifier": "getManagerOfUser", "parameters": "(@NonNull User user)", "modifiers": "@Override public", "return": "User", "signature": "User getManagerOfUser(@NonNull User user)", "full_signature": "@Override public User getManagerOfUser(@NonNull User user)", "class_method_signature": "RepositoryUserService.getManagerOfUser(@NonNull User user)", "testcase": false, "constructor": false}, {"identifier": "getStaffMemberUserDataOfUser", "parameters": "(@NonNull User user, @NonNull Sort sort)", "modifiers": "@Override public", "return": "List<UserData>", "signature": "List<UserData> getStaffMemberUserDataOfUser(@NonNull User user, @NonNull Sort sort)", "full_signature": "@Override public List<UserData> getStaffMemberUserDataOfUser(@NonNull User user, @NonNull Sort sort)", "class_method_signature": "RepositoryUserService.getStaffMemberUserDataOfUser(@NonNull User user, @NonNull Sort sort)", "testcase": false, "constructor": false}, {"identifier": "searchStaffMemberDataOfUser", "parameters": "(User user, String query, Sort sort)", "modifiers": "@Override public", "return": "List<UserData>", "signature": "List<UserData> searchStaffMemberDataOfUser(User user, String query, Sort sort)", "full_signature": "@Override public List<UserData> searchStaffMemberDataOfUser(User user, String query, Sort sort)", "class_method_signature": "RepositoryUserService.searchStaffMemberDataOfUser(User user, String query, Sort sort)", "testcase": false, "constructor": false}, {"identifier": "getStaffMembersOfUser", "parameters": "(@NonNull User user)", "modifiers": "@Override public", "return": "List<User>", "signature": "List<User> getStaffMembersOfUser(@NonNull User user)", "full_signature": "@Override public List<User> getStaffMembersOfUser(@NonNull User user)", "class_method_signature": "RepositoryUserService.getStaffMembersOfUser(@NonNull User user)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(@NonNull User user)", "modifiers": "@Override public", "return": "User", "signature": "User save(@NonNull User user)", "full_signature": "@Override public User save(@NonNull User user)", "class_method_signature": "RepositoryUserService.save(@NonNull User user)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void delete(User user)", "full_signature": "@Override public void delete(User user)", "class_method_signature": "RepositoryUserService.delete(User user)", "testcase": false, "constructor": false}, {"identifier": "deleteUserById", "parameters": "(String userId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteUserById(String userId)", "full_signature": "@Override public void deleteUserById(String userId)", "class_method_signature": "RepositoryUserService.deleteUserById(String userId)", "testcase": false, "constructor": false}, {"identifier": "usersAreManagers", "parameters": "(@NonNull Set<User> users)", "modifiers": "@Override public", "return": "Map<User, Boolean>", "signature": "Map<User, Boolean> usersAreManagers(@NonNull Set<User> users)", "full_signature": "@Override public Map<User, Boolean> usersAreManagers(@NonNull Set<User> users)", "class_method_signature": "RepositoryUserService.usersAreManagers(@NonNull Set<User> users)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateUserById", "parameters": "(@NonNull String userId)", "modifiers": "public", "return": "User", "signature": "User getOrCreateUserById(@NonNull String userId)", "full_signature": "public User getOrCreateUserById(@NonNull String userId)", "class_method_signature": "RepositoryUserService.getOrCreateUserById(@NonNull String userId)", "testcase": false, "constructor": false}, {"identifier": "initializeThumbnailPhotos", "parameters": "(@NonNull List<UserData> userData)", "modifiers": "", "return": "List<UserData>", "signature": "List<UserData> initializeThumbnailPhotos(@NonNull List<UserData> userData)", "full_signature": " List<UserData> initializeThumbnailPhotos(@NonNull List<UserData> userData)", "class_method_signature": "RepositoryUserService.initializeThumbnailPhotos(@NonNull List<UserData> userData)", "testcase": false, "constructor": false}, {"identifier": "copyAndSetThumbnailPhoto", "parameters": "(@NonNull UserData userData, byte[] thumbnailPhoto)", "modifiers": "", "return": "UserData", "signature": "UserData copyAndSetThumbnailPhoto(@NonNull UserData userData, byte[] thumbnailPhoto)", "full_signature": " UserData copyAndSetThumbnailPhoto(@NonNull UserData userData, byte[] thumbnailPhoto)", "class_method_signature": "RepositoryUserService.copyAndSetThumbnailPhoto(@NonNull UserData userData, byte[] thumbnailPhoto)", "testcase": false, "constructor": false}, {"identifier": "removeAllApplicationsOfUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "void", "signature": "void removeAllApplicationsOfUser(User user)", "full_signature": "@Override public void removeAllApplicationsOfUser(User user)", "class_method_signature": "RepositoryUserService.removeAllApplicationsOfUser(User user)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/user/RepositoryUserService.java"}, "focal_method": {"identifier": "getHierarchyForUser", "parameters": "(@NonNull User user)", "modifiers": "@Override public", "return": "HierarchyTreeNode", "body": "@Override\n    public HierarchyTreeNode getHierarchyForUser(@NonNull User user) {\n        return hierarchyTreeNodeRepo.findByUser(user)\n                .orElseThrow(() -> new HierarchyNotFoundException(user.getId()));\n    }", "signature": "HierarchyTreeNode getHierarchyForUser(@NonNull User user)", "full_signature": "@Override public HierarchyTreeNode getHierarchyForUser(@NonNull User user)", "class_method_signature": "RepositoryUserService.getHierarchyForUser(@NonNull User user)", "testcase": false, "constructor": false, "invocations": ["orElseThrow", "findByUser", "getId"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}