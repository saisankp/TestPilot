{"test_class": {"identifier": "ButterflyFacadeImplTest", "superclass": "extends PowerMockTestCase", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private ButterflyFacadeImpl butterflyFacadeImpl;", "modifier": "@InjectMocks\n    private", "type": "ButterflyFacadeImpl", "declarator": "butterflyFacadeImpl", "var_name": "butterflyFacadeImpl"}, {"original_string": "@Mock\n    private ExtensionRegistry extensionRegistry;", "modifier": "@Mock\n    private", "type": "ExtensionRegistry", "declarator": "extensionRegistry", "var_name": "extensionRegistry"}, {"original_string": "@Mock\n    private TransformationEngine transformationEngine;", "modifier": "@Mock\n    private", "type": "TransformationEngine", "declarator": "transformationEngine", "var_name": "transformationEngine"}, {"original_string": "private ExtensionRegistry extensionRegistry_test = new ExtensionRegistry();", "modifier": "private", "type": "ExtensionRegistry", "declarator": "extensionRegistry_test = new ExtensionRegistry()", "var_name": "extensionRegistry_test"}, {"original_string": "private File applicationFolder = new File(this.getClass().getClassLoader().getResource(\"test-app-2\").getFile());", "modifier": "private", "type": "File", "declarator": "applicationFolder = new File(this.getClass().getClassLoader().getResource(\"test-app-2\").getFile())", "var_name": "applicationFolder"}], "file": "butterfly-core/src/test/java/com/paypal/butterfly/core/ButterflyFacadeImplTest.java"}, "test_case": {"identifier": "newConfigurationTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newConfigurationTest() {\n        assertNull(butterflyFacadeImpl.newConfiguration(null).getProperties());\n        assertNull(butterflyFacadeImpl.newConfiguration(new Properties()).getProperties());\n\n        try {\n            Properties properties = new Properties();\n            properties.put(\"\", \"v1\");\n            properties.put(\" \", \"v2\");\n            properties.put(\"a\", new Object());\n            properties.put(\"b%\", \"v4\");\n            butterflyFacadeImpl.newConfiguration(properties);\n            fail(\"IllegalArgumentException was supposed to be thrown due to invalid properties\");\n        } catch (IllegalArgumentException e) {\n            assertEquals(e.getMessage(), \"The following properties are invalid: [ , a, b%]\");\n        }\n\n        Properties properties = new Properties();\n        properties.put(\"a\", \"1\");\n        properties.put(\"b\", \"2\");\n\n        Configuration c1 = butterflyFacadeImpl.newConfiguration(properties);\n        assertEquals(c1.getProperties(), properties);\n        assertNull(c1.getOutputFolder());\n        assertTrue(c1.isModifyOriginalFolder());\n        assertFalse(c1.isZipOutput());\n\n        Configuration c2 = butterflyFacadeImpl.newConfiguration(null, false);\n        assertNull(c2.getProperties());\n        assertNull(c2.getOutputFolder());\n        assertFalse(c2.isModifyOriginalFolder());\n        assertFalse(c2.isZipOutput());\n\n        Configuration c3 = butterflyFacadeImpl.newConfiguration(null, true);\n        assertNull(c3.getProperties());\n        assertNull(c3.getOutputFolder());\n        assertFalse(c3.isModifyOriginalFolder());\n        assertTrue(c3.isZipOutput());\n\n        File file = new File(\".\");\n\n        Configuration c4 = butterflyFacadeImpl.newConfiguration(null, file, false);\n        assertNull(c4.getProperties());\n        assertEquals(c4.getOutputFolder(), file);\n        assertFalse(c4.isModifyOriginalFolder());\n        assertFalse(c4.isZipOutput());\n\n        Configuration c5 = butterflyFacadeImpl.newConfiguration(null, file, true);\n        assertNull(c5.getProperties());\n        assertEquals(c5.getOutputFolder(), file);\n        assertFalse(c5.isModifyOriginalFolder());\n        assertTrue(c5.isZipOutput());\n    }", "signature": "void newConfigurationTest()", "full_signature": "@Test public void newConfigurationTest()", "class_method_signature": "ButterflyFacadeImplTest.newConfigurationTest()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getProperties", "newConfiguration", "assertNull", "getProperties", "newConfiguration", "put", "put", "put", "put", "newConfiguration", "fail", "assertEquals", "getMessage", "put", "put", "newConfiguration", "assertEquals", "getProperties", "assertNull", "getOutputFolder", "assertTrue", "isModifyOriginalFolder", "assertFalse", "isZipOutput", "newConfiguration", "assertNull", "getProperties", "assertNull", "getOutputFolder", "assertFalse", "isModifyOriginalFolder", "assertFalse", "isZipOutput", "newConfiguration", "assertNull", "getProperties", "assertNull", "getOutputFolder", "assertFalse", "isModifyOriginalFolder", "assertTrue", "isZipOutput", "newConfiguration", "assertNull", "getProperties", "assertEquals", "getOutputFolder", "assertFalse", "isModifyOriginalFolder", "assertFalse", "isZipOutput", "newConfiguration", "assertNull", "getProperties", "assertEquals", "getOutputFolder", "assertFalse", "isModifyOriginalFolder", "assertTrue", "isZipOutput"]}, "focal_class": {"identifier": "ButterflyFacadeImpl", "superclass": "", "interfaces": "implements ButterflyFacade", "fields": [{"original_string": "private static final String VERSION = ButterflyProperties.getString(\"butterfly.version\");", "modifier": "private static final", "type": "String", "declarator": "VERSION = ButterflyProperties.getString(\"butterfly.version\")", "var_name": "VERSION"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(ButterflyFacadeImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ButterflyFacadeImpl.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private ExtensionRegistry extensionRegistry;", "modifier": "@Autowired\n    private", "type": "ExtensionRegistry", "declarator": "extensionRegistry", "var_name": "extensionRegistry"}, {"original_string": "@Autowired\n    private TransformationEngine transformationEngine;", "modifier": "@Autowired\n    private", "type": "TransformationEngine", "declarator": "transformationEngine", "var_name": "transformationEngine"}, {"original_string": "@Autowired\n    private CompressionHandler compressionHandler;", "modifier": "@Autowired\n    private", "type": "CompressionHandler", "declarator": "compressionHandler", "var_name": "compressionHandler"}], "methods": [{"identifier": "getButterflyVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getButterflyVersion()", "full_signature": "@Override public String getButterflyVersion()", "class_method_signature": "ButterflyFacadeImpl.getButterflyVersion()", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "()", "modifiers": "@Override public", "return": "List<Extension>", "signature": "List<Extension> getExtensions()", "full_signature": "@Override public List<Extension> getExtensions()", "class_method_signature": "ButterflyFacadeImpl.getExtensions()", "testcase": false, "constructor": false}, {"identifier": "automaticResolution", "parameters": "(File applicationFolder)", "modifiers": "@Override public", "return": "Optional<Class<? extends TransformationTemplate>>", "signature": "Optional<Class<? extends TransformationTemplate>> automaticResolution(File applicationFolder)", "full_signature": "@Override public Optional<Class<? extends TransformationTemplate>> automaticResolution(File applicationFolder)", "class_method_signature": "ButterflyFacadeImpl.automaticResolution(File applicationFolder)", "testcase": false, "constructor": false}, {"identifier": "newConfiguration", "parameters": "(Properties properties)", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration newConfiguration(Properties properties)", "full_signature": "@Override public Configuration newConfiguration(Properties properties)", "class_method_signature": "ButterflyFacadeImpl.newConfiguration(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "newConfiguration", "parameters": "(Properties properties, boolean zipOutput)", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration newConfiguration(Properties properties, boolean zipOutput)", "full_signature": "@Override public Configuration newConfiguration(Properties properties, boolean zipOutput)", "class_method_signature": "ButterflyFacadeImpl.newConfiguration(Properties properties, boolean zipOutput)", "testcase": false, "constructor": false}, {"identifier": "newConfiguration", "parameters": "(Properties properties, File outputFolder, boolean zipOutput)", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration newConfiguration(Properties properties, File outputFolder, boolean zipOutput)", "full_signature": "@Override public Configuration newConfiguration(Properties properties, File outputFolder, boolean zipOutput)", "class_method_signature": "ButterflyFacadeImpl.newConfiguration(Properties properties, File outputFolder, boolean zipOutput)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(File applicationFolder, Class<? extends TransformationTemplate> templateClass)", "modifiers": "@Override public", "return": "CompletableFuture<TransformationResult>", "signature": "CompletableFuture<TransformationResult> transform(File applicationFolder, Class<? extends TransformationTemplate> templateClass)", "full_signature": "@Override public CompletableFuture<TransformationResult> transform(File applicationFolder, Class<? extends TransformationTemplate> templateClass)", "class_method_signature": "ButterflyFacadeImpl.transform(File applicationFolder, Class<? extends TransformationTemplate> templateClass)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(File applicationFolder, Class<? extends TransformationTemplate> templateClass, String version, Configuration configuration)", "modifiers": "@Override public", "return": "CompletableFuture<TransformationResult>", "signature": "CompletableFuture<TransformationResult> transform(File applicationFolder, Class<? extends TransformationTemplate> templateClass, String version, Configuration configuration)", "full_signature": "@Override public CompletableFuture<TransformationResult> transform(File applicationFolder, Class<? extends TransformationTemplate> templateClass, String version, Configuration configuration)", "class_method_signature": "ButterflyFacadeImpl.transform(File applicationFolder, Class<? extends TransformationTemplate> templateClass, String version, Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getUpgradePath", "parameters": "(Class<? extends TransformationTemplate> transformationTemplate, String version)", "modifiers": "private", "return": "UpgradePath", "signature": "UpgradePath getUpgradePath(Class<? extends TransformationTemplate> transformationTemplate, String version)", "full_signature": "private UpgradePath getUpgradePath(Class<? extends TransformationTemplate> transformationTemplate, String version)", "class_method_signature": "ButterflyFacadeImpl.getUpgradePath(Class<? extends TransformationTemplate> transformationTemplate, String version)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(TransformationRequest transformationRequest)", "modifiers": "private", "return": "CompletableFuture<TransformationResult>", "signature": "CompletableFuture<TransformationResult> transform(TransformationRequest transformationRequest)", "full_signature": "private CompletableFuture<TransformationResult> transform(TransformationRequest transformationRequest)", "class_method_signature": "ButterflyFacadeImpl.transform(TransformationRequest transformationRequest)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "(Class<? extends TransformationTemplate> templateClass)", "modifiers": "private", "return": "TransformationTemplate", "signature": "TransformationTemplate getTemplate(Class<? extends TransformationTemplate> templateClass)", "full_signature": "private TransformationTemplate getTemplate(Class<? extends TransformationTemplate> templateClass)", "class_method_signature": "ButterflyFacadeImpl.getTemplate(Class<? extends TransformationTemplate> templateClass)", "testcase": false, "constructor": false}], "file": "butterfly-core/src/main/java/com/paypal/butterfly/core/ButterflyFacadeImpl.java"}, "focal_method": {"identifier": "newConfiguration", "parameters": "(Properties properties)", "modifiers": "@Override public", "return": "Configuration", "body": "@Override\n    public Configuration newConfiguration(Properties properties) {\n        return new ConfigurationImpl(properties);\n    }", "signature": "Configuration newConfiguration(Properties properties)", "full_signature": "@Override public Configuration newConfiguration(Properties properties)", "class_method_signature": "ButterflyFacadeImpl.newConfiguration(Properties properties)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}