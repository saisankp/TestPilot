{"test_class": {"identifier": "EffectiveAtomPolarizabilityDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/EffectiveAtomPolarizabilityDescriptorTest.java"}, "test_case": {"identifier": "testPolarizabilityDescriptor_Allyl_bromide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPolarizabilityDescriptor_Allyl_bromide() throws Exception {\n        double testResult = 6.1745; /*\n                                     * from Petra online:\n                                     * http://www2.chemie.uni-\n                                     * erlangen.de/services/petra/smiles.phtml\n                                     */\n        EffectiveAtomPolarizabilityDescriptor descriptor = new EffectiveAtomPolarizabilityDescriptor();\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"C=CCBr\");\n        addExplicitHydrogens(mol);\n\n        double result = ((DoubleResult) descriptor.calculate(mol.getAtom(3), mol).getValue()).doubleValue();\n        Assert.assertEquals(testResult, result, 0.01);\n    }", "signature": "void testPolarizabilityDescriptor_Allyl_bromide()", "full_signature": "@Test public void testPolarizabilityDescriptor_Allyl_bromide()", "class_method_signature": "EffectiveAtomPolarizabilityDescriptorTest.testPolarizabilityDescriptor_Allyl_bromide()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "addExplicitHydrogens", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "EffectiveAtomPolarizabilityDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "private Polarizability pol;", "modifier": "private", "type": "Polarizability", "declarator": "pol", "var_name": "pol"}], "methods": [{"identifier": "EffectiveAtomPolarizabilityDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " EffectiveAtomPolarizabilityDescriptor()", "full_signature": "public  EffectiveAtomPolarizabilityDescriptor()", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.EffectiveAtomPolarizabilityDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/EffectiveAtomPolarizabilityDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer ac)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer ac) {\n        double polarizability;\n        try {\n            // FIXME: for now I'll cache a few modified atomic properties, and restore them at the end of this method\n            String originalAtomtypeName = atom.getAtomTypeName();\n            Integer originalNeighborCount = atom.getFormalNeighbourCount();\n            Integer originalHCount = atom.getImplicitHydrogenCount();\n            Integer originalValency = atom.getValency();\n            IAtomType.Hybridization originalHybridization = atom.getHybridization();\n            boolean originalFlag = atom.getFlag(CDKConstants.VISITED);\n            Double originalBondOrderSum = atom.getBondOrderSum();\n            Order originalMaxBondOrder = atom.getMaxBondOrder();\n            polarizability = pol.calculateGHEffectiveAtomPolarizability(ac, atom, 100, true);\n            // restore original props\n            atom.setAtomTypeName(originalAtomtypeName);\n            atom.setFormalNeighbourCount(originalNeighborCount);\n            atom.setValency(originalValency);\n            atom.setImplicitHydrogenCount(originalHCount);\n            atom.setFlag(CDKConstants.VISITED, originalFlag);\n            atom.setHybridization(originalHybridization);\n            atom.setMaxBondOrder(originalMaxBondOrder);\n            atom.setBondOrderSum(originalBondOrderSum);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    polarizability), getDescriptorNames());\n        } catch (Exception ex1) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), getDescriptorNames(), ex1);\n        }\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer ac)", "class_method_signature": "EffectiveAtomPolarizabilityDescriptor.calculate(IAtom atom, IAtomContainer ac)", "testcase": false, "constructor": false, "invocations": ["getAtomTypeName", "getFormalNeighbourCount", "getImplicitHydrogenCount", "getValency", "getHybridization", "getFlag", "getBondOrderSum", "getMaxBondOrder", "calculateGHEffectiveAtomPolarizability", "setAtomTypeName", "setFormalNeighbourCount", "setValency", "setImplicitHydrogenCount", "setFlag", "setHybridization", "setMaxBondOrder", "setBondOrderSum", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}