{"test_class": {"identifier": "DefaultMetadataSyncServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MetadataSyncService metadataSyncService;", "modifier": "private", "type": "MetadataSyncService", "declarator": "metadataSyncService", "var_name": "metadataSyncService"}, {"original_string": "@Mock\n    private MetadataVersionDelegate metadataVersionDelegate;", "modifier": "@Mock\n    private", "type": "MetadataVersionDelegate", "declarator": "metadataVersionDelegate", "var_name": "metadataVersionDelegate"}, {"original_string": "@Mock\n    private MetadataSyncDelegate metadataSyncDelegate;", "modifier": "@Mock\n    private", "type": "MetadataSyncDelegate", "declarator": "metadataSyncDelegate", "var_name": "metadataSyncDelegate"}, {"original_string": "@Mock\n    private MetadataVersionService metadataVersionService;", "modifier": "@Mock\n    private", "type": "MetadataVersionService", "declarator": "metadataVersionService", "var_name": "metadataVersionService"}, {"original_string": "@Mock\n    private MetadataSyncImportHandler metadataSyncImportHandler;", "modifier": "@Mock\n    private", "type": "MetadataSyncImportHandler", "declarator": "metadataSyncImportHandler", "var_name": "metadataSyncImportHandler"}, {"original_string": "private Map<String, List<String>> parameters;", "modifier": "private", "type": "Map<String, List<String>>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/sync/DefaultMetadataSyncServiceTest.java"}, "test_case": {"identifier": "testShouldVerifyImportParamsAtomicTypeForTheGivenBestEffortVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldVerifyImportParamsAtomicTypeForTheGivenBestEffortVersion()\n        throws DhisVersionMismatchException\n    {\n        MetadataSyncParams syncParams = new MetadataSyncParams();\n\n        MetadataVersion metadataVersion = new MetadataVersion( \"testVersion\", VersionType.BEST_EFFORT );\n        MetadataImportParams metadataImportParams = new MetadataImportParams();\n\n        syncParams.setVersion( metadataVersion );\n        syncParams.setImportParams( metadataImportParams );\n\n        MetadataSyncSummary metadataSyncSummary = new MetadataSyncSummary();\n        metadataSyncSummary.setMetadataVersion( metadataVersion );\n        String expectedMetadataSnapshot = \"{\\\"date\\\":\\\"2016-05-24T05:27:25.128+0000\\\"}\";\n\n        when( metadataVersionService.getVersionData( \"testVersion\" ) ).thenReturn( expectedMetadataSnapshot );\n\n        metadataSyncService.doMetadataSync( syncParams );\n\n        verify( metadataSyncImportHandler, times( 1 ) ).importMetadata(\n            (argThat( metadataSyncParams -> syncParams.getImportParams().getAtomicMode().equals( AtomicMode.NONE ) )),\n            eq( expectedMetadataSnapshot ) );\n\n        verify( metadataVersionService, never() ).createMetadataVersionInDataStore( metadataVersion.getName(),\n            expectedMetadataSnapshot );\n        verify( metadataVersionDelegate, never() ).downloadMetadataVersionSnapshot( metadataVersion );\n\n    }", "signature": "void testShouldVerifyImportParamsAtomicTypeForTheGivenBestEffortVersion()", "full_signature": "@Test public void testShouldVerifyImportParamsAtomicTypeForTheGivenBestEffortVersion()", "class_method_signature": "DefaultMetadataSyncServiceTest.testShouldVerifyImportParamsAtomicTypeForTheGivenBestEffortVersion()", "testcase": true, "constructor": false, "invocations": ["setVersion", "setImportParams", "setMetadataVersion", "thenReturn", "when", "getVersionData", "doMetadataSync", "importMetadata", "verify", "times", "argThat", "equals", "getAtomicMode", "getImportParams", "eq", "createMetadataVersionInDataStore", "verify", "never", "getName", "downloadMetadataVersionSnapshot", "verify", "never"]}, "focal_class": {"identifier": "DefaultMetadataSyncService", "superclass": "", "interfaces": "implements MetadataSyncService", "fields": [{"original_string": "private MetadataVersionDelegate metadataVersionDelegate;", "modifier": "private", "type": "MetadataVersionDelegate", "declarator": "metadataVersionDelegate", "var_name": "metadataVersionDelegate"}, {"original_string": "private MetadataVersionService metadataVersionService;", "modifier": "private", "type": "MetadataVersionService", "declarator": "metadataVersionService", "var_name": "metadataVersionService"}, {"original_string": "private MetadataSyncDelegate metadataSyncDelegate;", "modifier": "private", "type": "MetadataSyncDelegate", "declarator": "metadataSyncDelegate", "var_name": "metadataSyncDelegate"}, {"original_string": "private MetadataSyncImportHandler metadataSyncImportHandler;", "modifier": "private", "type": "MetadataSyncImportHandler", "declarator": "metadataSyncImportHandler", "var_name": "metadataSyncImportHandler"}], "methods": [{"identifier": "DefaultMetadataSyncService", "parameters": "( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "modifiers": "public", "return": "", "signature": " DefaultMetadataSyncService( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "full_signature": "public  DefaultMetadataSyncService( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "class_method_signature": "DefaultMetadataSyncService.DefaultMetadataSyncService( MetadataVersionDelegate metadataVersionDelegate,\n        MetadataVersionService metadataVersionService, MetadataSyncDelegate metadataSyncDelegate,\n        MetadataSyncImportHandler metadataSyncImportHandler )", "testcase": false, "constructor": true}, {"identifier": "getParamsFromMap", "parameters": "( Map<String, List<String>> parameters )", "modifiers": "@Override public", "return": "MetadataSyncParams", "signature": "MetadataSyncParams getParamsFromMap( Map<String, List<String>> parameters )", "full_signature": "@Override public MetadataSyncParams getParamsFromMap( Map<String, List<String>> parameters )", "class_method_signature": "DefaultMetadataSyncService.getParamsFromMap( Map<String, List<String>> parameters )", "testcase": false, "constructor": false}, {"identifier": "doMetadataSync", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "@Override public synchronized", "return": "MetadataSyncSummary", "signature": "MetadataSyncSummary doMetadataSync( MetadataSyncParams syncParams )", "full_signature": "@Override public synchronized MetadataSyncSummary doMetadataSync( MetadataSyncParams syncParams )", "class_method_signature": "DefaultMetadataSyncService.doMetadataSync( MetadataSyncParams syncParams )", "testcase": false, "constructor": false}, {"identifier": "isSyncRequired", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSyncRequired( MetadataSyncParams syncParams )", "full_signature": "@Override public boolean isSyncRequired( MetadataSyncParams syncParams )", "class_method_signature": "DefaultMetadataSyncService.isSyncRequired( MetadataSyncParams syncParams )", "testcase": false, "constructor": false}, {"identifier": "saveMetadataVersionSnapshotLocally", "parameters": "( MetadataVersion version, String metadataVersionSnapshot )", "modifiers": "private", "return": "void", "signature": "void saveMetadataVersionSnapshotLocally( MetadataVersion version, String metadataVersionSnapshot )", "full_signature": "private void saveMetadataVersionSnapshotLocally( MetadataVersion version, String metadataVersionSnapshot )", "class_method_signature": "DefaultMetadataSyncService.saveMetadataVersionSnapshotLocally( MetadataVersion version, String metadataVersionSnapshot )", "testcase": false, "constructor": false}, {"identifier": "getMetadataVersionSnapshot", "parameters": "( MetadataVersion version )", "modifiers": "private", "return": "String", "signature": "String getMetadataVersionSnapshot( MetadataVersion version )", "full_signature": "private String getMetadataVersionSnapshot( MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.getMetadataVersionSnapshot( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "getMetadataVersionSnapshotFromRemote", "parameters": "( MetadataVersion version )", "modifiers": "private", "return": "String", "signature": "String getMetadataVersionSnapshotFromRemote( MetadataVersion version )", "full_signature": "private String getMetadataVersionSnapshotFromRemote( MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.getMetadataVersionSnapshotFromRemote( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "setMetadataImportMode", "parameters": "( MetadataSyncParams syncParams, MetadataVersion version )", "modifiers": "private", "return": "void", "signature": "void setMetadataImportMode( MetadataSyncParams syncParams, MetadataVersion version )", "full_signature": "private void setMetadataImportMode( MetadataSyncParams syncParams, MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.setMetadataImportMode( MetadataSyncParams syncParams, MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "getLocalVersionSnapshot", "parameters": "( MetadataVersion version )", "modifiers": "private", "return": "String", "signature": "String getLocalVersionSnapshot( MetadataVersion version )", "full_signature": "private String getLocalVersionSnapshot( MetadataVersion version )", "class_method_signature": "DefaultMetadataSyncService.getLocalVersionSnapshot( MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "getVersionsFromParams", "parameters": "( Map<String, List<String>> parameters )", "modifiers": "private", "return": "List<String>", "signature": "List<String> getVersionsFromParams( Map<String, List<String>> parameters )", "full_signature": "private List<String> getVersionsFromParams( Map<String, List<String>> parameters )", "class_method_signature": "DefaultMetadataSyncService.getVersionsFromParams( Map<String, List<String>> parameters )", "testcase": false, "constructor": false}, {"identifier": "getMetadataVersion", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "private", "return": "MetadataVersion", "signature": "MetadataVersion getMetadataVersion( MetadataSyncParams syncParams )", "full_signature": "private MetadataVersion getMetadataVersion( MetadataSyncParams syncParams )", "class_method_signature": "DefaultMetadataSyncService.getMetadataVersion( MetadataSyncParams syncParams )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/sync/DefaultMetadataSyncService.java"}, "focal_method": {"identifier": "doMetadataSync", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "@Override public synchronized", "return": "MetadataSyncSummary", "body": "@Override\n    public synchronized MetadataSyncSummary doMetadataSync( MetadataSyncParams syncParams )\n        throws MetadataSyncServiceException, DhisVersionMismatchException\n    {\n        MetadataVersion version = getMetadataVersion( syncParams );\n\n        setMetadataImportMode( syncParams, version );\n        String metadataVersionSnapshot = getMetadataVersionSnapshot( version );\n\n        if ( metadataSyncDelegate.shouldStopSync( metadataVersionSnapshot ) )\n        {\n            throw new DhisVersionMismatchException( \"Metadata sync failed because your version of DHIS does not match the master version\" );\n        }\n\n        saveMetadataVersionSnapshotLocally( version, metadataVersionSnapshot );\n        MetadataSyncSummary metadataSyncSummary = metadataSyncImportHandler.importMetadata( syncParams, metadataVersionSnapshot );\n\n        log.info( \"Metadata Sync Summary: \" + metadataSyncSummary );\n\n        return metadataSyncSummary;\n    }", "signature": "MetadataSyncSummary doMetadataSync( MetadataSyncParams syncParams )", "full_signature": "@Override public synchronized MetadataSyncSummary doMetadataSync( MetadataSyncParams syncParams )", "class_method_signature": "DefaultMetadataSyncService.doMetadataSync( MetadataSyncParams syncParams )", "testcase": false, "constructor": false, "invocations": ["getMetadataVersion", "setMetadataImportMode", "getMetadataVersionSnapshot", "shouldStopSync", "saveMetadataVersionSnapshotLocally", "importMetadata", "info"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}