{"test_class": {"identifier": "ByteUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/de/slackspace/openkeepass/util/ByteUtilsTest.java"}, "test_case": {"identifier": "shouldReadInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReadInt() throws IOException {\n        int i = 200;\n        byte[] bytes = new byte[] { (byte) i };\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(bytes);\n\n        int readInt = ByteUtils.readInt(inputStream);\n\n        assertEquals(200, readInt);\n    }", "signature": "void shouldReadInt()", "full_signature": "@Test public void shouldReadInt()", "class_method_signature": "ByteUtilsTest.shouldReadInt()", "testcase": true, "constructor": false, "invocations": ["readInt", "assertEquals"]}, "focal_class": {"identifier": "ByteUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ByteUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteUtils()", "full_signature": "private  ByteUtils()", "class_method_signature": "ByteUtils.ByteUtils()", "testcase": false, "constructor": true}, {"identifier": "hexStringToByteArray", "parameters": "(String s)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hexStringToByteArray(String s)", "full_signature": "public static byte[] hexStringToByteArray(String s)", "class_method_signature": "ByteUtils.hexStringToByteArray(String s)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] bytes)", "full_signature": "public static String toHexString(byte[] bytes)", "class_method_signature": "ByteUtils.toHexString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toUnsignedInt", "parameters": "(int value)", "modifiers": "public static", "return": "int", "signature": "int toUnsignedInt(int value)", "full_signature": "public static int toUnsignedInt(int value)", "class_method_signature": "ByteUtils.toUnsignedInt(int value)", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "int", "signature": "int readInt(InputStream inputStream)", "full_signature": "public static int readInt(InputStream inputStream)", "class_method_signature": "ByteUtils.readInt(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "bytesToUUID", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "UUID", "signature": "UUID bytesToUUID(byte[] bytes)", "full_signature": "public static UUID bytesToUUID(byte[] bytes)", "class_method_signature": "ByteUtils.bytesToUUID(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "uuidToBytes", "parameters": "(UUID uuid)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] uuidToBytes(UUID uuid)", "full_signature": "public static byte[] uuidToBytes(UUID uuid)", "class_method_signature": "ByteUtils.uuidToBytes(UUID uuid)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(byte[] array1, byte[] array2)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concat(byte[] array1, byte[] array2)", "full_signature": "public static byte[] concat(byte[] array1, byte[] array2)", "class_method_signature": "ByteUtils.concat(byte[] array1, byte[] array2)", "testcase": false, "constructor": false}], "file": "src/de/slackspace/openkeepass/util/ByteUtils.java"}, "focal_method": {"identifier": "readInt", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "int", "body": "public static int readInt(InputStream inputStream) throws IOException {\n        byte[] bytesToRead = new byte[4];\n        int readBytes = inputStream.read(bytesToRead);\n        if (readBytes == -1) {\n            return -1;\n        }\n\n        ByteBuffer buffer = ByteBuffer.wrap(bytesToRead);\n        buffer.order(ByteOrder.LITTLE_ENDIAN);\n\n        return buffer.getInt();\n    }", "signature": "int readInt(InputStream inputStream)", "full_signature": "public static int readInt(InputStream inputStream)", "class_method_signature": "ByteUtils.readInt(InputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["read", "wrap", "order", "getInt"]}, "repository": {"repo_id": 102137829, "url": "https://github.com/privacyint/ThornSec", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 10, "size": 20604, "license": "licensed"}}