{"test_class": {"identifier": "RequireOsgiCompatibleVersionRuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "jetty-build-support/src/test/java/org/eclipse/jetty/toolchain/enforcer/rules/RequireOsgiCompatibleVersionRuleTest.java"}, "test_case": {"identifier": "testValidOsgiVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidOsgiVersion()\n        throws EnforcerRuleException\n    {\n        RequireOsgiCompatibleVersionRule rule = new RequireOsgiCompatibleVersionRule();\n        // The most basic\n        rule.ensureValidOsgiVersion( \"1.0.0\" );\n        // The second most basic\n        rule.ensureValidOsgiVersion( \"1.2.3.4\" );\n        // A long form classifier\n        rule.ensureValidOsgiVersion( \"12.0.0.v20100511-114423\" );\n        // A SNAPSHOT version\n        rule.ensureValidOsgiVersion( \"4.0.2.SNAPSHOT\" );\n        // Some creative versions found \"in the wild\"\n        rule.ensureValidOsgiVersion( \"3.4.2.r342_v20081028-0800\" );\n        rule.ensureValidOsgiVersion( \"3.4.3.R34x_v20081215-1030\" );\n        rule.ensureValidOsgiVersion( \"3.0.5.v20090218-1800-e3x\" );\n        rule.ensureValidOsgiVersion( \"1.1.1.M20080827-0800b\" );\n        rule.ensureValidOsgiVersion( \"0.1.37.v200803061811\" );\n    }", "signature": "void testValidOsgiVersion()", "full_signature": "@Test public void testValidOsgiVersion()", "class_method_signature": "RequireOsgiCompatibleVersionRuleTest.testValidOsgiVersion()", "testcase": true, "constructor": false, "invocations": ["ensureValidOsgiVersion", "ensureValidOsgiVersion", "ensureValidOsgiVersion", "ensureValidOsgiVersion", "ensureValidOsgiVersion", "ensureValidOsgiVersion", "ensureValidOsgiVersion", "ensureValidOsgiVersion", "ensureValidOsgiVersion"]}, "focal_class": {"identifier": "RequireOsgiCompatibleVersionRule", "superclass": "", "interfaces": "implements EnforcerRule", "fields": [], "methods": [{"identifier": "execute", "parameters": "(EnforcerRuleHelper helper)", "modifiers": "public", "return": "void", "signature": "void execute(EnforcerRuleHelper helper)", "full_signature": "public void execute(EnforcerRuleHelper helper)", "class_method_signature": "RequireOsgiCompatibleVersionRule.execute(EnforcerRuleHelper helper)", "testcase": false, "constructor": false}, {"identifier": "ensureValidOsgiVersion", "parameters": "(String version)", "modifiers": "public", "return": "void", "signature": "void ensureValidOsgiVersion(String version)", "full_signature": "public void ensureValidOsgiVersion(String version)", "class_method_signature": "RequireOsgiCompatibleVersionRule.ensureValidOsgiVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "getCacheId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCacheId()", "full_signature": "public String getCacheId()", "class_method_signature": "RequireOsgiCompatibleVersionRule.getCacheId()", "testcase": false, "constructor": false}, {"identifier": "isCacheable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCacheable()", "full_signature": "public boolean isCacheable()", "class_method_signature": "RequireOsgiCompatibleVersionRule.isCacheable()", "testcase": false, "constructor": false}, {"identifier": "isResultValid", "parameters": "(EnforcerRule rule)", "modifiers": "public", "return": "boolean", "signature": "boolean isResultValid(EnforcerRule rule)", "full_signature": "public boolean isResultValid(EnforcerRule rule)", "class_method_signature": "RequireOsgiCompatibleVersionRule.isResultValid(EnforcerRule rule)", "testcase": false, "constructor": false}], "file": "jetty-build-support/src/main/java/org/eclipse/jetty/toolchain/enforcer/rules/RequireOsgiCompatibleVersionRule.java"}, "focal_method": {"identifier": "ensureValidOsgiVersion", "parameters": "(String version)", "modifiers": "public", "return": "void", "body": "public void ensureValidOsgiVersion(String version) throws EnforcerRuleException\n    {\n        if (version.endsWith(\"SNAPSHOT\"))\n        {\n            // Skip check on SNAPSHOT versions.\n            return;\n        }\n        \n        String parts[] = version.split(\"\\\\.\");\n        if (parts.length > 4)\n        {\n            throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the OSGi version requirements.  \"\n                    + \"It can't have more than 4 parts (#.#.#.*)\" + \" - The '.' character has a special meaning\");\n        }\n\n        if (parts.length < 3)\n        {\n            throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the OSGi version requirements.  \"\n                    + \"It must have 3 (or 4) parts (#.#.#.*)\");\n        }\n\n        for (int i = 0; i < 3; i++)\n        {\n            if (!StringUtils.isNumeric(parts[i]))\n            {\n                throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the OSGi version requirements.  \" + \"Part #\" + (i + 1)\n                        + \" \\\"\" + parts[i] + \"\\\" of an OSGi version must be a non-negative number (#.#.#.*).\");\n            }\n            if (Integer.parseInt(parts[i]) < 0)\n            {\n                throw new EnforcerRuleException(\"The version \\\"\" + version + \"\\\" does not conform to the OSGi version requirements.  \" + \"Part #\" + (i + 1)\n                        + \" \\\"\" + parts[i] + \"\\\" of an OSGi version must be a non-negative number (#.#.#.*).\");\n            }\n        }\n\n        if (parts.length == 4)\n        {\n            for (char c : parts[3].toCharArray())\n            {\n                if ((c >= '0') && (c <= '9'))\n                {\n                    continue; // numbers are acceptable\n                }\n                if ((c >= 'A') && (c <= 'Z'))\n                {\n                    continue; // upper case letters are acceptable\n                }\n                if ((c >= 'a') && (c <= 'z'))\n                {\n                    continue; // lower case letters are acceptable\n                }\n                if ((c == '-') || (c == '_'))\n                {\n                    continue; // underscore and dash are also acceptable\n                }\n                // All other characters are invalid for the qualifier\n                throw new EnforcerRuleException(\"The OSGi qualifier of \\\"\" + version + \"\\\" does not conform to the OSGi version requirements.  \" + \n                        \"Only Letters (upper and lower), numbers, dash '-', and underscore '_' are allowed.\");\n            }\n        }\n    }", "signature": "void ensureValidOsgiVersion(String version)", "full_signature": "public void ensureValidOsgiVersion(String version)", "class_method_signature": "RequireOsgiCompatibleVersionRule.ensureValidOsgiVersion(String version)", "testcase": false, "constructor": false, "invocations": ["endsWith", "split", "isNumeric", "parseInt", "toCharArray"]}, "repository": {"repo_id": 2045140, "url": "https://github.com/eclipse/jetty.toolchain", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 10, "size": 2094, "license": "licensed"}}