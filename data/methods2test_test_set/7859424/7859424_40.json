{"test_class": {"identifier": "McRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Player player;", "modifier": "private", "type": "Player", "declarator": "player", "var_name": "player"}, {"original_string": "private McRunnable runnable;", "modifier": "private", "type": "McRunnable", "declarator": "runnable", "var_name": "runnable"}], "file": "src/edu/lclark/orego/mcts/McRunnableTest.java"}, "test_case": {"identifier": "testCopyDataFrom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopyDataFrom() {\n\t\tplayer.acceptMove(at(\"c3\"));\n\t\tplayer.acceptMove(at(\"d2\"));\n\t\trunnable.performMcRun();\n\t\trunnable.copyDataFrom(player.getBoard());\n\t\tassertEquals(player.getBoard().toString(), runnable.getBoard().toString());\n\t}", "signature": "void testCopyDataFrom()", "full_signature": "@Test public void testCopyDataFrom()", "class_method_signature": "McRunnableTest.testCopyDataFrom()", "testcase": true, "constructor": false, "invocations": ["acceptMove", "at", "acceptMove", "at", "performMcRun", "copyDataFrom", "getBoard", "assertEquals", "toString", "getBoard", "toString", "getBoard"]}, "focal_class": {"identifier": "McRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final ShortList candidates;", "modifier": "private final", "type": "ShortList", "declarator": "candidates", "var_name": "candidates"}, {"original_string": "private final CoordinateSystem coords;", "modifier": "private final", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private final long[] fancyHashes;", "modifier": "private final", "type": "long[]", "declarator": "fancyHashes", "var_name": "fancyHashes"}, {"original_string": "private final Predicate filter;", "modifier": "private final", "type": "Predicate", "declarator": "filter", "var_name": "filter"}, {"original_string": "private final HistoryObserver historyObserver;", "modifier": "private final", "type": "HistoryObserver", "declarator": "historyObserver", "var_name": "historyObserver"}, {"original_string": "private final StoneCountObserver mercyObserver;", "modifier": "private final", "type": "StoneCountObserver", "declarator": "mercyObserver", "var_name": "mercyObserver"}, {"original_string": "private final Mover mover;", "modifier": "private final", "type": "Mover", "declarator": "mover", "var_name": "mover"}, {"original_string": "private final ShortSet playedPoints;", "modifier": "private final", "type": "ShortSet", "declarator": "playedPoints", "var_name": "playedPoints"}, {"original_string": "private final Player player;", "modifier": "private final", "type": "Player", "declarator": "player", "var_name": "player"}, {"original_string": "private long playoutsCompleted;", "modifier": "private", "type": "long", "declarator": "playoutsCompleted", "var_name": "playoutsCompleted"}, {"original_string": "private final MersenneTwisterFast random;", "modifier": "private final", "type": "MersenneTwisterFast", "declarator": "random", "var_name": "random"}, {"original_string": "private final PlayoutScorer scorer;", "modifier": "private final", "type": "PlayoutScorer", "declarator": "scorer", "var_name": "scorer"}, {"original_string": "private Suggester[] suggesters;", "modifier": "private", "type": "Suggester[]", "declarator": "suggesters", "var_name": "suggesters"}, {"original_string": "private Rater[] raters;", "modifier": "private", "type": "Rater[]", "declarator": "raters", "var_name": "raters"}], "methods": [{"identifier": "McRunnable", "parameters": "(Player player, CopiableStructure stuff)", "modifiers": "public", "return": "", "signature": " McRunnable(Player player, CopiableStructure stuff)", "full_signature": "public  McRunnable(Player player, CopiableStructure stuff)", "class_method_signature": "McRunnable.McRunnable(Player player, CopiableStructure stuff)", "testcase": false, "constructor": true}, {"identifier": "acceptMove", "parameters": "(short p)", "modifiers": "public", "return": "void", "signature": "void acceptMove(short p)", "full_signature": "public void acceptMove(short p)", "class_method_signature": "McRunnable.acceptMove(short p)", "testcase": false, "constructor": false}, {"identifier": "copyDataFrom", "parameters": "(Board that)", "modifiers": "public", "return": "void", "signature": "void copyDataFrom(Board that)", "full_signature": "public void copyDataFrom(Board that)", "class_method_signature": "McRunnable.copyDataFrom(Board that)", "testcase": false, "constructor": false}, {"identifier": "getBoard", "parameters": "()", "modifiers": "public", "return": "Board", "signature": "Board getBoard()", "full_signature": "public Board getBoard()", "class_method_signature": "McRunnable.getBoard()", "testcase": false, "constructor": false}, {"identifier": "getFancyHashes", "parameters": "()", "modifiers": "public", "return": "long[]", "signature": "long[] getFancyHashes()", "full_signature": "public long[] getFancyHashes()", "class_method_signature": "McRunnable.getFancyHashes()", "testcase": false, "constructor": false}, {"identifier": "getHistoryObserver", "parameters": "()", "modifiers": "public", "return": "HistoryObserver", "signature": "HistoryObserver getHistoryObserver()", "full_signature": "public HistoryObserver getHistoryObserver()", "class_method_signature": "McRunnable.getHistoryObserver()", "testcase": false, "constructor": false}, {"identifier": "getPlayedPoints", "parameters": "()", "modifiers": "public", "return": "ShortSet", "signature": "ShortSet getPlayedPoints()", "full_signature": "public ShortSet getPlayedPoints()", "class_method_signature": "McRunnable.getPlayedPoints()", "testcase": false, "constructor": false}, {"identifier": "getPlayer", "parameters": "()", "modifiers": "public", "return": "Player", "signature": "Player getPlayer()", "full_signature": "public Player getPlayer()", "class_method_signature": "McRunnable.getPlayer()", "testcase": false, "constructor": false}, {"identifier": "getPlayoutsCompleted", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getPlayoutsCompleted()", "full_signature": "public long getPlayoutsCompleted()", "class_method_signature": "McRunnable.getPlayoutsCompleted()", "testcase": false, "constructor": false}, {"identifier": "getRandom", "parameters": "()", "modifiers": "public", "return": "MersenneTwisterFast", "signature": "MersenneTwisterFast getRandom()", "full_signature": "public MersenneTwisterFast getRandom()", "class_method_signature": "McRunnable.getRandom()", "testcase": false, "constructor": false}, {"identifier": "getSuggesters", "parameters": "()", "modifiers": "public", "return": "Suggester[]", "signature": "Suggester[] getSuggesters()", "full_signature": "public Suggester[] getSuggesters()", "class_method_signature": "McRunnable.getSuggesters()", "testcase": false, "constructor": false}, {"identifier": "getTurn", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTurn()", "full_signature": "public int getTurn()", "class_method_signature": "McRunnable.getTurn()", "testcase": false, "constructor": false}, {"identifier": "isFeasible", "parameters": "(short p)", "modifiers": "public", "return": "boolean", "signature": "boolean isFeasible(short p)", "full_signature": "public boolean isFeasible(short p)", "class_method_signature": "McRunnable.isFeasible(short p)", "testcase": false, "constructor": false}, {"identifier": "performMcRun", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color performMcRun()", "full_signature": "public Color performMcRun()", "class_method_signature": "McRunnable.performMcRun()", "testcase": false, "constructor": false}, {"identifier": "performMcRun", "parameters": "(boolean mercy)", "modifiers": "public", "return": "Color", "signature": "Color performMcRun(boolean mercy)", "full_signature": "public Color performMcRun(boolean mercy)", "class_method_signature": "McRunnable.performMcRun(boolean mercy)", "testcase": false, "constructor": false}, {"identifier": "playout", "parameters": "(boolean mercy)", "modifiers": "public", "return": "Color", "signature": "Color playout(boolean mercy)", "full_signature": "public Color playout(boolean mercy)", "class_method_signature": "McRunnable.playout(boolean mercy)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "McRunnable.run()", "testcase": false, "constructor": false}, {"identifier": "selectAndPlayOneMove", "parameters": "(boolean fast)", "modifiers": "private", "return": "short", "signature": "short selectAndPlayOneMove(boolean fast)", "full_signature": "private short selectAndPlayOneMove(boolean fast)", "class_method_signature": "McRunnable.selectAndPlayOneMove(boolean fast)", "testcase": false, "constructor": false}, {"identifier": "getRaters", "parameters": "()", "modifiers": "public", "return": "Rater[]", "signature": "Rater[] getRaters()", "full_signature": "public Rater[] getRaters()", "class_method_signature": "McRunnable.getRaters()", "testcase": false, "constructor": false}, {"identifier": "getCandidates", "parameters": "()", "modifiers": "public", "return": "ShortList", "signature": "ShortList getCandidates()", "full_signature": "public ShortList getCandidates()", "class_method_signature": "McRunnable.getCandidates()", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/mcts/McRunnable.java"}, "focal_method": {"identifier": "copyDataFrom", "parameters": "(Board that)", "modifiers": "public", "return": "void", "body": "public void copyDataFrom(Board that) {\n\t\tboard.copyDataFrom(that);\n\t\tfancyHashes[board.getTurn()] = board.getFancyHash();\n\t}", "signature": "void copyDataFrom(Board that)", "full_signature": "public void copyDataFrom(Board that)", "class_method_signature": "McRunnable.copyDataFrom(Board that)", "testcase": false, "constructor": false, "invocations": ["copyDataFrom", "getTurn", "getFancyHash"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}