{"test_class": {"identifier": "DBSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File javadocLocation = getFile(System.getProperty(\"j2d-sample-javadoc\"));", "modifier": "private static final", "type": "File", "declarator": "javadocLocation = getFile(System.getProperty(\"j2d-sample-javadoc\"))", "var_name": "javadocLocation"}, {"original_string": "private static final String QUERY = \"SELECT COUNT(*) FROM searchIndex WHERE type = ?\";", "modifier": "private static final", "type": "String", "declarator": "QUERY = \"SELECT COUNT(*) FROM searchIndex WHERE type = ?\"", "var_name": "QUERY"}, {"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}], "file": "javadoc2dash-api/src/test/java/com/megatome/j2d/support/DBSupportTest.java"}, "test_case": {"identifier": "testCreateIndexDB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateIndexDB() throws Exception {\n        assertThat(javadocLocation, notNullValue());\n        final IndexData indexData = JavadocSupport.findIndexFile(javadocLocation);\n        final List<SearchIndexValue> indexValues = JavadocSupport.findSearchIndexValues(indexData.getFilesToIndex());\n        final String docFileRoot = FilenameUtils.concat(temporaryFolder.getRoot().getPath(), \"Foo\");\n        final String dbDirName = DocSetSupport.getDBDir(docFileRoot);\n        final File dbDir = getFile(dbDirName);\n        FileUtils.forceMkdir(dbDir);\n        DBSupport.createIndex(indexValues, dbDirName);\n        final File dbFile = getFile(dbDir, \"docSet.dsidx\");\n        assertTrue(\"DB file does not exist\", dbFile.exists());\n\n        final Map<String, Integer> expectedTypes = ExpectedDataUtil.getExpectedData().getExpectedDataBaseTypes();\n        try (final Connection connection = DriverManager.getConnection(\"jdbc:sqlite:\" + dbFile);\n             final PreparedStatement stmt = connection.prepareStatement(QUERY)){\n\n            for (Map.Entry<String, Integer> expectedEntry : expectedTypes.entrySet()) {\n                stmt.setString(1, expectedEntry.getKey());\n                try (final ResultSet rs = stmt.executeQuery()) {\n                    while (rs.next()) {\n                        final int count = rs.getInt(1);\n                        assertThat(expectedEntry.getValue().intValue(), is(count));\n                    }\n                }\n            }\n        }\n    }", "signature": "void testCreateIndexDB()", "full_signature": "@Test public void testCreateIndexDB()", "class_method_signature": "DBSupportTest.testCreateIndexDB()", "testcase": true, "constructor": false, "invocations": ["assertThat", "notNullValue", "findIndexFile", "findSearchIndexValues", "getFilesToIndex", "concat", "getPath", "getRoot", "getDBDir", "getFile", "forceMkdir", "createIndex", "getFile", "assertTrue", "exists", "getExpectedDataBaseTypes", "getExpectedData", "getConnection", "prepareStatement", "entrySet", "setString", "getKey", "executeQuery", "next", "getInt", "assertThat", "intValue", "getValue", "is"]}, "focal_class": {"identifier": "DBSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DB_FILE = \"docSet.dsidx\";", "modifier": "private static final", "type": "String", "declarator": "DB_FILE = \"docSet.dsidx\"", "var_name": "DB_FILE"}, {"original_string": "private static final String CREATE_INDEX_SQL = \"CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT)\";", "modifier": "private static final", "type": "String", "declarator": "CREATE_INDEX_SQL = \"CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT)\"", "var_name": "CREATE_INDEX_SQL"}, {"original_string": "private static final String INSERT_INDEX_SQL = \"INSERT INTO searchIndex(name, type, path) VALUES (?, ?, ?)\";", "modifier": "private static final", "type": "String", "declarator": "INSERT_INDEX_SQL = \"INSERT INTO searchIndex(name, type, path) VALUES (?, ?, ?)\"", "var_name": "INSERT_INDEX_SQL"}], "methods": [{"identifier": "DBSupport", "parameters": "()", "modifiers": "private", "return": "", "signature": " DBSupport()", "full_signature": "private  DBSupport()", "class_method_signature": "DBSupport.DBSupport()", "testcase": false, "constructor": true}, {"identifier": "createIndex", "parameters": "(List<SearchIndexValue> indexValues, String dbFileDir)", "modifiers": "public static", "return": "void", "signature": "void createIndex(List<SearchIndexValue> indexValues, String dbFileDir)", "full_signature": "public static void createIndex(List<SearchIndexValue> indexValues, String dbFileDir)", "class_method_signature": "DBSupport.createIndex(List<SearchIndexValue> indexValues, String dbFileDir)", "testcase": false, "constructor": false}], "file": "javadoc2dash-api/src/main/java/com/megatome/j2d/support/DBSupport.java"}, "focal_method": {"identifier": "createIndex", "parameters": "(List<SearchIndexValue> indexValues, String dbFileDir)", "modifiers": "public static", "return": "void", "body": "public static void createIndex(List<SearchIndexValue> indexValues, String dbFileDir) throws BuilderException {\n\n        final String dbFile = concat(dbFileDir, DB_FILE);\n        // Create DB file\n        try (final Connection connection = DriverManager.getConnection(\"jdbc:sqlite:\" + dbFile);\n             final Statement stmt = connection.createStatement()){\n            stmt.execute(CREATE_INDEX_SQL);\n            // Update DB\n            try (final PreparedStatement pst = connection.prepareStatement(INSERT_INDEX_SQL)) {\n                for (final SearchIndexValue value : indexValues) {\n                    pst.setString(1, value.getName());\n                    pst.setString(2, value.getType().getTypeName());\n                    pst.setString(3, value.getPath());\n                    pst.execute();\n                }\n            }\n        } catch (SQLException e) {\n            throw new BuilderException(\"Error writing to SQLite DB\", e);\n        }\n        logVerbose(\"Created the SQLite search index\");\n    }", "signature": "void createIndex(List<SearchIndexValue> indexValues, String dbFileDir)", "full_signature": "public static void createIndex(List<SearchIndexValue> indexValues, String dbFileDir)", "class_method_signature": "DBSupport.createIndex(List<SearchIndexValue> indexValues, String dbFileDir)", "testcase": false, "constructor": false, "invocations": ["concat", "getConnection", "createStatement", "execute", "prepareStatement", "setString", "getName", "setString", "getTypeName", "getType", "setString", "getPath", "execute", "logVerbose"]}, "repository": {"repo_id": 34531285, "url": "https://github.com/iamthechad/javadoc2dash", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 17, "size": 396, "license": "licensed"}}