{"test_class": {"identifier": "TriangleVerticesCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final float[] verticalBlackBars = new float[] {\n            //  X,      Y,     Z,     U,     V\n            -1.00f, -0.75f, 0.00f, 0.00f, 0.00f,\n            1.00f, -0.75f, 0.00f, 1.00f, 0.00f,\n            -1.00f, 0.75f, 0.00f, 0.00f, 1.00f,\n            1.00f, 0.75f, 0.00f, 1.00f, 1.00f,\n    };", "modifier": "private final", "type": "float[]", "declarator": "verticalBlackBars = new float[] {\n            //  X,      Y,     Z,     U,     V\n            -1.00f, -0.75f, 0.00f, 0.00f, 0.00f,\n            1.00f, -0.75f, 0.00f, 1.00f, 0.00f,\n            -1.00f, 0.75f, 0.00f, 0.00f, 1.00f,\n            1.00f, 0.75f, 0.00f, 1.00f, 1.00f,\n    }", "var_name": "verticalBlackBars"}, {"original_string": "private final float[] horizontalBlackBars = new float[] {\n        //  X,      Y,     Z,     U,     V\n        -0.75f, -1.00f, 0.00f, 0.00f, 0.00f,\n        0.75f, -1.00f, 0.00f, 1.00f, 0.00f,\n        -0.75f, 1.00f, 0.00f, 0.00f, 1.00f,\n        0.75f, 1.00f, 0.00f, 1.00f, 1.00f,\n    };", "modifier": "private final", "type": "float[]", "declarator": "horizontalBlackBars = new float[] {\n        //  X,      Y,     Z,     U,     V\n        -0.75f, -1.00f, 0.00f, 0.00f, 0.00f,\n        0.75f, -1.00f, 0.00f, 1.00f, 0.00f,\n        -0.75f, 1.00f, 0.00f, 0.00f, 1.00f,\n        0.75f, 1.00f, 0.00f, 1.00f, 1.00f,\n    }", "var_name": "horizontalBlackBars"}, {"original_string": "private final float[] defaultData = new float[] {\n        //  X,     Y,    Z,    U,     V\n        -1.0f, -1.0f, 0.0f, 0.00f, 0.00f,\n        1.0f, -1.0f, 0.0f, 1.00f, 0.00f,\n        -1.0f, 1.0f, 0.0f, 0.00f, 1.00f,\n        1.0f, 1.0f, 0.0f, 1.00f, 1.00f,\n    };", "modifier": "private final", "type": "float[]", "declarator": "defaultData = new float[] {\n        //  X,     Y,    Z,    U,     V\n        -1.0f, -1.0f, 0.0f, 0.00f, 0.00f,\n        1.0f, -1.0f, 0.0f, 1.00f, 0.00f,\n        -1.0f, 1.0f, 0.0f, 0.00f, 1.00f,\n        1.0f, 1.0f, 0.0f, 1.00f, 1.00f,\n    }", "var_name": "defaultData"}, {"original_string": "private final float[] verticalBlackBarsRotated90 = new float[] {\n          //    X,     Y,  Z,   U,   V\n            -1.0f,  1.0f, 0, 0.f, 0.f,\n            -1.0f, -1.0f, 0, 1.f, 0.f,\n             1.0f,  1.0f, 0, 0.f, 1.f,\n             1.0f, -1.0f, 0, 1.f, 1.f,\n    };", "modifier": "private final", "type": "float[]", "declarator": "verticalBlackBarsRotated90 = new float[] {\n          //    X,     Y,  Z,   U,   V\n            -1.0f,  1.0f, 0, 0.f, 0.f,\n            -1.0f, -1.0f, 0, 1.f, 0.f,\n             1.0f,  1.0f, 0, 0.f, 1.f,\n             1.0f, -1.0f, 0, 1.f, 1.f,\n    }", "var_name": "verticalBlackBarsRotated90"}, {"original_string": "private final float[] verticalBlackBarsRotated90ArCorrected = new float[] {\n            //    X,     Y,  Z,   U,   V\n           -0.5f,  1.0f, 0, 0.f, 0.f,\n           -0.5f, -1.0f, 0, 1.f, 0.f,\n            0.5f,  1.0f, 0, 0.f, 1.f,\n            0.5f, -1.0f, 0, 1.f, 1.f,\n    };", "modifier": "private final", "type": "float[]", "declarator": "verticalBlackBarsRotated90ArCorrected = new float[] {\n            //    X,     Y,  Z,   U,   V\n           -0.5f,  1.0f, 0, 0.f, 0.f,\n           -0.5f, -1.0f, 0, 1.f, 0.f,\n            0.5f,  1.0f, 0, 0.f, 1.f,\n            0.5f, -1.0f, 0, 1.f, 1.f,\n    }", "var_name": "verticalBlackBarsRotated90ArCorrected"}], "file": "domain/src/test/java/org/m4m/domain/pipeline/TriangleVerticesCalculatorTest.java"}, "test_case": {"identifier": "testScaleVertically", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScaleVertically() {\n        int inWidth = 10;\n        int inheight = 5;\n\n        int outWidth = 5;\n        int outheight = 20;\n\n        TriangleVerticesCalculator calculator = new TriangleVerticesCalculator();\n        float scale [] = calculator.getScale_PreserveAspectFit(0, inWidth, inheight, outWidth, outheight);\n        assertAlmostEqual(scale, new float[] {1f, 0.125f}, 1e-7);\n    }", "signature": "void testScaleVertically()", "full_signature": "@Test public void testScaleVertically()", "class_method_signature": "TriangleVerticesCalculatorTest.testScaleVertically()", "testcase": true, "constructor": false, "invocations": ["getScale_PreserveAspectFit", "assertAlmostEqual"]}, "focal_class": {"identifier": "TriangleVerticesCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "static int stride = 5;", "modifier": "static", "type": "int", "declarator": "stride = 5", "var_name": "stride"}, {"original_string": "private final float[] triangleVerticesData;", "modifier": "private final", "type": "float[]", "declarator": "triangleVerticesData", "var_name": "triangleVerticesData"}, {"original_string": "private final float[] defaultTriangleVerticesData ;", "modifier": "private final", "type": "float[]", "declarator": "defaultTriangleVerticesData", "var_name": "defaultTriangleVerticesData"}, {"original_string": "private final float[] scale = {1, 1};", "modifier": "private final", "type": "float[]", "declarator": "scale = {1, 1}", "var_name": "scale"}], "methods": [{"identifier": "TriangleVerticesCalculator", "parameters": "()", "modifiers": "public", "return": "", "signature": " TriangleVerticesCalculator()", "full_signature": "public  TriangleVerticesCalculator()", "class_method_signature": "TriangleVerticesCalculator.TriangleVerticesCalculator()", "testcase": false, "constructor": true}, {"identifier": "TriangleVerticesCalculator", "parameters": "(float[] triangleVerticesData)", "modifiers": "public", "return": "", "signature": " TriangleVerticesCalculator(float[] triangleVerticesData)", "full_signature": "public  TriangleVerticesCalculator(float[] triangleVerticesData)", "class_method_signature": "TriangleVerticesCalculator.TriangleVerticesCalculator(float[] triangleVerticesData)", "testcase": false, "constructor": true}, {"identifier": "getScale_PreserveAspectFit", "parameters": "(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "modifiers": "public", "return": "float[]", "signature": "float[] getScale_PreserveAspectFit(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "full_signature": "public float[] getScale_PreserveAspectFit(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "class_method_signature": "TriangleVerticesCalculator.getScale_PreserveAspectFit(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "testcase": false, "constructor": false}, {"identifier": "getScale_PreserveAspectCrop", "parameters": "(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "modifiers": "public", "return": "float[]", "signature": "float[] getScale_PreserveAspectCrop(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "full_signature": "public float[] getScale_PreserveAspectCrop(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "class_method_signature": "TriangleVerticesCalculator.getScale_PreserveAspectCrop(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "testcase": false, "constructor": false}, {"identifier": "getAspectRatioVerticesData", "parameters": "(int widthIn, int heightIn, int widthOut, int heightOut)", "modifiers": "public", "return": "float[]", "signature": "float[] getAspectRatioVerticesData(int widthIn, int heightIn, int widthOut, int heightOut)", "full_signature": "public float[] getAspectRatioVerticesData(int widthIn, int heightIn, int widthOut, int heightOut)", "class_method_signature": "TriangleVerticesCalculator.getAspectRatioVerticesData(int widthIn, int heightIn, int widthOut, int heightOut)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTriangleVerticesData", "parameters": "()", "modifiers": "public static", "return": "float[]", "signature": "float[] getDefaultTriangleVerticesData()", "full_signature": "public static float[] getDefaultTriangleVerticesData()", "class_method_signature": "TriangleVerticesCalculator.getDefaultTriangleVerticesData()", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/pipeline/TriangleVerticesCalculator.java"}, "focal_method": {"identifier": "getScale_PreserveAspectFit", "parameters": "(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "modifiers": "public", "return": "float[]", "body": "public float[] getScale_PreserveAspectFit(int angle, int widthIn, int heightIn, int widthOut, int heightOut) {\n        scale[0] = scale[1] = 1;\n        if (angle == 90 || angle == 270) {\n            int cx = widthIn;\n            widthIn = heightIn;\n            heightIn = cx;\n        }\n\n        float aspectRatioIn = (float) widthIn / (float) heightIn;\n        float heightOutCalculated = (float) widthOut / aspectRatioIn;\n\n        if (heightOutCalculated < heightOut) {\n            scale[1] = heightOutCalculated / heightOut;\n        } else {\n            scale[0] = heightOut * aspectRatioIn / widthOut;\n        }\n\n        return scale;\n    }", "signature": "float[] getScale_PreserveAspectFit(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "full_signature": "public float[] getScale_PreserveAspectFit(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "class_method_signature": "TriangleVerticesCalculator.getScale_PreserveAspectFit(int angle, int widthIn, int heightIn, int widthOut, int heightOut)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}