{"test_class": {"identifier": "ParameterTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/ParameterTokenResolverTest.java"}, "test_case": {"identifier": "testAttributeWithDefaultValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testAttributeWithDefaultValue() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT, \"${user-id}\");\n      Readset<?> readset = UserEntity.READSET_FULL;\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, readset);\n\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"?\", ctx.getSqlStatement());\n      Assert.assertEquals(0L, getParameterValue(ctx, 0));\n   }", "signature": "void testAttributeWithDefaultValue()", "full_signature": "@Test public void testAttributeWithDefaultValue()", "class_method_signature": "ParameterTokenResolverTest.testAttributeWithDefaultValue()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "getParameterValue"]}, "focal_class": {"identifier": "ParameterTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [{"original_string": "@Inject\n   private DataObjectAccessor m_accessor;", "modifier": "@Inject\n   private", "type": "DataObjectAccessor", "declarator": "m_accessor", "var_name": "m_accessor"}], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "ParameterTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/ParameterTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.PARAM) {\n         throw new DalRuntimeException(\"Internal error: only PARAM token is supported by \" + getClass());\n      }\n\n      ParameterToken parameter = (ParameterToken) token;\n      String fieldName = parameter.getParameterName();\n      DataField dataField = ctx.getEntityInfo().getFieldByName(fieldName);\n\n      if (parameter.isIn()) { // IN\n         Object value = m_accessor.getFieldValue(ctx.getProto(), dataField);\n\n         if (ctx.isWithinInToken() && value != null && value.getClass().isArray()) {\n            int length = Array.getLength(value);\n            StringBuilder sb = new StringBuilder();\n\n            if (length > 0) {\n               ctx.addParameter(new Parameter(dataField).setType(Parameter.TYPE_ARRAY));\n\n               for (int i = 0; i < length; i++) {\n                  if (i > 0) {\n                     sb.append(',');\n                  }\n\n                  sb.append('?');\n               }\n            } else {\n               sb.append(\"null\"); // to avoid SQL exception\n            }\n\n            return sb.toString();\n         } else if (ctx.isWithinInToken() && value instanceof Iterable) {\n            Iterable<?> iterable = (Iterable<?>) value;\n            Iterator<?> i = iterable.iterator();\n            StringBuilder sb = new StringBuilder();\n\n            if (i.hasNext()) {\n               ctx.addParameter(new Parameter(dataField).setType(Parameter.TYPE_ITERABLE));\n\n               for (; i.hasNext(); i.next()) {\n                  if (sb.length() > 0) {\n                     sb.append(',');\n                  }\n\n                  sb.append('?');\n               }\n            } else {\n               sb.append(\"null\"); // to avoid SQL exception\n            }\n\n            return sb.toString();\n         } else {\n            ctx.addParameter(new Parameter(dataField).setType(Parameter.TYPE_SINGLE_VALUE));\n            return \"?\";\n         }\n      } else if (parameter.isInOut()) { // IN_OUT\n         Variable variable = ctx.getEntityInfo().getVariable(dataField);\n\n         ctx.addParameter(new Parameter(dataField, variable.sqlType(), variable.scale(), true).setType(Parameter.TYPE_SINGLE_VALUE));\n         return \"?\";\n      } else { // OUT\n         Variable variable = ctx.getEntityInfo().getVariable(dataField);\n\n         ctx.addParameter(new Parameter(dataField, variable.sqlType(), variable.scale()).setType(Parameter.TYPE_SINGLE_VALUE));\n         return \"?\";\n      }\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "ParameterTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getParameterName", "getFieldByName", "getEntityInfo", "isIn", "getFieldValue", "getProto", "isWithinInToken", "isArray", "getClass", "getLength", "addParameter", "setType", "append", "append", "append", "toString", "isWithinInToken", "iterator", "hasNext", "addParameter", "setType", "hasNext", "next", "length", "append", "append", "append", "toString", "addParameter", "setType", "isInOut", "getVariable", "getEntityInfo", "addParameter", "setType", "sqlType", "scale", "getVariable", "getEntityInfo", "addParameter", "setType", "sqlType", "scale"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}