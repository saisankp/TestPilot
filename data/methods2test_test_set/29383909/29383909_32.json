{"test_class": {"identifier": "ChefJsonGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-core/src/test/java/se/kth/karamel/backend/converter/ChefJsonGeneratorTest.java"}, "test_case": {"identifier": "testGenerateClusterChefJsonsForInstallation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateClusterChefJsonsForInstallation() throws KaramelException {\n    Settings.CB_CLASSPATH_MODE = true;\n    String jsonString = \"  {\\\"name\\\":\\\"MySqlCluster\\\",\"\n        + \"\\\"cookbooks\\\":[{\\\"id\\\":\\\"https://github.com/testorg/testrepo/tree/master/cookbooks/hopshadoop/ndb-chef\\\",\"\n        + \"\\\"attrs\\\":{\\\"ndb/DataMemory\\\":\"\n        + \"\\\"111\\\"}}],\\\"groups\\\":[{\\\"name\\\":\\\"datanodes\\\",\"\n        + \"\\\"cookbooks\\\":[{\\\"id\\\":\\\"https://github.com/testorg/testrepo/tree/master/cookbooks/hopshadoop/ndb-chef\\\",\"\n        + \"\\\"attrs\\\":{},\"\n        + \"\\\"recipes\\\":[{\\\"name\\\":\\\"ndb::ndbd\\\"}]}],\\\"size\\\":2,\\\"provider\\\":null},{\\\"name\\\":\\\"mgmnodes\\\",\\\"cookbooks\\\":\"\n        + \"[{\\\"id\\\":\\\"https://github.com/testorg/testrepo/tree/master/cookbooks/hopshadoop/ndb-chef\\\",\"\n        + \"\\\"attrs\\\":{},\\\"recipes\\\":\"\n        + \"[{\\\"name\\\":\\\"ndb::mgmd\\\"},{\\\"name\\\":\\\"ndb::mysqld\\\"},{\\\"name\\\":\\\"ndb::memcached\\\"}]}],\\\"size\\\":\"\n        + \"1,\\\"provider\\\":null}],\\\"ec2\\\":{\\\"type\\\":\\\"m3.medium\\\",\\\"ami\\\":null,\\\"region\\\":\\\"eu-west-1\\\",\\\"price\\\":\"\n        + \"null,\\\"vpc\\\":null,\\\"subnet\\\":null}}\";\n    //Workaround for https://github.com/karamelchef/karamel/issues/28\n    String yaml = ClusterDefinitionService.jsonToYaml(jsonString);\n    JsonCluster definition = ClusterDefinitionService.yamlToJsonObject(yaml);\n//    JsonCluster definition = ClusterDefinitionService.jsonToJsonObject(jsonString);\n    List<JsonCookbook> cookbooks = definition.getCookbooks();\n    JsonCookbook ndb = null;\n    for (JsonCookbook jc : cookbooks) {\n      if (jc.getName().equals(\"ndb\")) {\n        ndb = jc;\n      }\n    }\n    ClusterRuntime clusterRuntime = MockingUtil.dummyRuntime(definition);\n    Map<String, JsonObject> chefJsons = ChefJsonGenerator.generateClusterChefJsonsForInstallation(definition, clusterRuntime);\n    JsonObject jsonObject = chefJsons.get(\"mgmnodes1ndb::mgmd\");\n    String st = jsonObject.toString();\n    Assert.assertTrue(st.contains(\"\\\"DataMemory\\\":\\\"111\\\"\"));\n  }", "signature": "void testGenerateClusterChefJsonsForInstallation()", "full_signature": "@Test public void testGenerateClusterChefJsonsForInstallation()", "class_method_signature": "ChefJsonGeneratorTest.testGenerateClusterChefJsonsForInstallation()", "testcase": true, "constructor": false, "invocations": ["jsonToYaml", "yamlToJsonObject", "getCookbooks", "equals", "getName", "dummyRuntime", "generateClusterChefJsonsForInstallation", "get", "toString", "assertTrue", "contains"]}, "focal_class": {"identifier": "ChefJsonGenerator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generateClusterChefJsonsForPurge", "parameters": "(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "modifiers": "public static", "return": "Map<String, JsonObject>", "signature": "Map<String, JsonObject> generateClusterChefJsonsForPurge(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "full_signature": "public static Map<String, JsonObject> generateClusterChefJsonsForPurge(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "class_method_signature": "ChefJsonGenerator.generateClusterChefJsonsForPurge(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "testcase": false, "constructor": false}, {"identifier": "generateClusterChefJsonsForInstallation", "parameters": "(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "modifiers": "public static", "return": "Map<String, JsonObject>", "signature": "Map<String, JsonObject> generateClusterChefJsonsForInstallation(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "full_signature": "public static Map<String, JsonObject> generateClusterChefJsonsForInstallation(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "class_method_signature": "ChefJsonGenerator.generateClusterChefJsonsForInstallation(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "testcase": false, "constructor": false}, {"identifier": "generatePurgeChefJsons", "parameters": "(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "modifiers": "public static", "return": "Map<String, JsonObject>", "signature": "Map<String, JsonObject> generatePurgeChefJsons(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "full_signature": "public static Map<String, JsonObject> generatePurgeChefJsons(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "class_method_signature": "ChefJsonGenerator.generatePurgeChefJsons(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "testcase": false, "constructor": false}, {"identifier": "generateRecipesChefJsons", "parameters": "(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "modifiers": "public static", "return": "Map<String, JsonObject>", "signature": "Map<String, JsonObject> generateRecipesChefJsons(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "full_signature": "public static Map<String, JsonObject> generateRecipesChefJsons(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "class_method_signature": "ChefJsonGenerator.generateRecipesChefJsons(JsonObject json, JsonCookbook cb,\n      GroupRuntime groupEntity)", "testcase": false, "constructor": false}, {"identifier": "addMachineNRecipeToJson", "parameters": "(JsonObject json, MachineRuntime me, String recipeName)", "modifiers": "public static", "return": "JsonObject", "signature": "JsonObject addMachineNRecipeToJson(JsonObject json, MachineRuntime me, String recipeName)", "full_signature": "public static JsonObject addMachineNRecipeToJson(JsonObject json, MachineRuntime me, String recipeName)", "class_method_signature": "ChefJsonGenerator.addMachineNRecipeToJson(JsonObject json, MachineRuntime me, String recipeName)", "testcase": false, "constructor": false}, {"identifier": "addRunListForRecipe", "parameters": "(JsonObject chefJson, String recipeName)", "modifiers": "public static", "return": "void", "signature": "void addRunListForRecipe(JsonObject chefJson, String recipeName)", "full_signature": "public static void addRunListForRecipe(JsonObject chefJson, String recipeName)", "class_method_signature": "ChefJsonGenerator.addRunListForRecipe(JsonObject chefJson, String recipeName)", "testcase": false, "constructor": false}, {"identifier": "addMachineIps", "parameters": "(JsonObject json, MachineRuntime machineEntity)", "modifiers": "public static", "return": "void", "signature": "void addMachineIps(JsonObject json, MachineRuntime machineEntity)", "full_signature": "public static void addMachineIps(JsonObject json, MachineRuntime machineEntity)", "class_method_signature": "ChefJsonGenerator.addMachineIps(JsonObject json, MachineRuntime machineEntity)", "testcase": false, "constructor": false}, {"identifier": "addCookbookAttributes", "parameters": "(JsonCookbook jc, JsonObject root)", "modifiers": "public static", "return": "void", "signature": "void addCookbookAttributes(JsonCookbook jc, JsonObject root)", "full_signature": "public static void addCookbookAttributes(JsonCookbook jc, JsonObject root)", "class_method_signature": "ChefJsonGenerator.addCookbookAttributes(JsonCookbook jc, JsonObject root)", "testcase": false, "constructor": false}, {"identifier": "aggregateIpAddresses", "parameters": "(JsonObject json, JsonCluster definition, ClusterRuntime clusterEntity)", "modifiers": "public static", "return": "void", "signature": "void aggregateIpAddresses(JsonObject json, JsonCluster definition, ClusterRuntime clusterEntity)", "full_signature": "public static void aggregateIpAddresses(JsonObject json, JsonCluster definition, ClusterRuntime clusterEntity)", "class_method_signature": "ChefJsonGenerator.aggregateIpAddresses(JsonObject json, JsonCluster definition, ClusterRuntime clusterEntity)", "testcase": false, "constructor": false}, {"identifier": "attrMap2Json", "parameters": "(JsonObject root, Map<String, Map<String, String>> attrs)", "modifiers": "public static", "return": "void", "signature": "void attrMap2Json(JsonObject root, Map<String, Map<String, String>> attrs)", "full_signature": "public static void attrMap2Json(JsonObject root, Map<String, Map<String, String>> attrs)", "class_method_signature": "ChefJsonGenerator.attrMap2Json(JsonObject root, Map<String, Map<String, String>> attrs)", "testcase": false, "constructor": false}, {"identifier": "attr2Json", "parameters": "(JsonObject root,\n      Map<String, List<String>> attrs)", "modifiers": "public static", "return": "void", "signature": "void attr2Json(JsonObject root,\n      Map<String, List<String>> attrs)", "full_signature": "public static void attr2Json(JsonObject root,\n      Map<String, List<String>> attrs)", "class_method_signature": "ChefJsonGenerator.attr2Json(JsonObject root,\n      Map<String, List<String>> attrs)", "testcase": false, "constructor": false}, {"identifier": "cloneJsonObject", "parameters": "(JsonObject jo)", "modifiers": "public static", "return": "JsonObject", "signature": "JsonObject cloneJsonObject(JsonObject jo)", "full_signature": "public static JsonObject cloneJsonObject(JsonObject jo)", "class_method_signature": "ChefJsonGenerator.cloneJsonObject(JsonObject jo)", "testcase": false, "constructor": false}], "file": "karamel-core/src/main/java/se/kth/karamel/backend/converter/ChefJsonGenerator.java"}, "focal_method": {"identifier": "generateClusterChefJsonsForInstallation", "parameters": "(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "modifiers": "public static", "return": "Map<String, JsonObject>", "body": "public static Map<String, JsonObject> generateClusterChefJsonsForInstallation(JsonCluster definition,\n      ClusterRuntime clusterEntity) throws KaramelException {\n    Map<String, JsonObject> chefJsons = new HashMap<>();\n    JsonObject root = new JsonObject();\n    aggregateIpAddresses(root, definition, clusterEntity);\n\n    // Add global attributes\n    for (JsonCookbook cb : definition.getCookbooks()) {\n      addCookbookAttributes(cb, root);\n    }\n\n    for (GroupRuntime groupEntity : clusterEntity.getGroups()) {\n      JsonObject clone = cloneJsonObject(root);\n      JsonGroup jsonGroup = UserClusterDataExtractor.findGroup(definition, groupEntity.getName());\n      //Adding all attribtues to all chef-jsons\n      for (JsonCookbook cb : jsonGroup.getCookbooks()) {\n        addCookbookAttributes(cb, clone);\n      }\n      for (JsonCookbook cb : jsonGroup.getCookbooks()) {\n        Map<String, JsonObject> gj = generateRecipesChefJsons(clone, cb, groupEntity);\n        chefJsons.putAll(gj);\n      }\n    }\n    return chefJsons;\n  }", "signature": "Map<String, JsonObject> generateClusterChefJsonsForInstallation(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "full_signature": "public static Map<String, JsonObject> generateClusterChefJsonsForInstallation(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "class_method_signature": "ChefJsonGenerator.generateClusterChefJsonsForInstallation(JsonCluster definition,\n      ClusterRuntime clusterEntity)", "testcase": false, "constructor": false, "invocations": ["aggregateIpAddresses", "getCookbooks", "addCookbookAttributes", "getGroups", "cloneJsonObject", "findGroup", "getName", "getCookbooks", "addCookbookAttributes", "getCookbooks", "generateRecipesChefJsons", "putAll"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}