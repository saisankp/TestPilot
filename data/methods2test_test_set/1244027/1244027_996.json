{"test_class": {"identifier": "CndImporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CND_FILE_PATH = \"src/test/resources/cnd/\";", "modifier": "public static final", "type": "String", "declarator": "CND_FILE_PATH = \"src/test/resources/cnd/\"", "var_name": "CND_FILE_PATH"}, {"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private CndImporter importer;", "modifier": "private", "type": "CndImporter", "declarator": "importer", "var_name": "importer"}, {"original_string": "private SimpleProblems problems;", "modifier": "private", "type": "SimpleProblems", "declarator": "problems", "var_name": "problems"}, {"original_string": "public static final String[] NO_DEFAULTS = {};", "modifier": "public static final", "type": "String[]", "declarator": "NO_DEFAULTS = {}", "var_name": "NO_DEFAULTS"}, {"original_string": "public static final String[] NO_SUPERTYPES = {};", "modifier": "public static final", "type": "String[]", "declarator": "NO_SUPERTYPES = {}", "var_name": "NO_SUPERTYPES"}, {"original_string": "public static final String[] NO_VALUE_CONSTRAINTS = {};", "modifier": "public static final", "type": "String[]", "declarator": "NO_VALUE_CONSTRAINTS = {}", "var_name": "NO_VALUE_CONSTRAINTS"}, {"original_string": "public static final String NO_PRIMARY_NAME = null;", "modifier": "public static final", "type": "String", "declarator": "NO_PRIMARY_NAME = null", "var_name": "NO_PRIMARY_NAME"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/CndImporterTest.java"}, "test_case": {"identifier": "shouldImportJcrBuiltinNodeTypesForJSR283", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldImportJcrBuiltinNodeTypesForJSR283() throws Exception {\n        importer.importFrom(openCndFile(\"jcr-builtins-283-early-draft.cnd\"), problems);\n        if (problems.size() != 0) printProblems();\n        registerImportedNamespaces();\n        assertThat(problems.size(), is(0));\n\n        // [nt:base]\n        // - jcr:primaryType (name) mandatory autocreated protected compute\n        // - jcr:mixinTypes (name) protected multiple compute\n        assertNodeType(\"nt:base\", new String[] {\"mode:defined\"}, NO_PRIMARY_NAME, NodeOptions.Abstract, NodeOptions.Queryable);\n        assertProperty(\"nt:base\", \"jcr:primaryType\", \"Name\", NO_DEFAULTS, new PropertyOptions[] {PropertyOptions.Mandatory,\n            PropertyOptions.Autocreated, PropertyOptions.Protected, PropertyOptions.FullTextSearchable,\n            PropertyOptions.QueryOrderable}, OnParentVersion.Compute);\n        assertProperty(\"nt:base\",\n                       \"jcr:mixinTypes\",\n                       \"Name\",\n                       NO_DEFAULTS,\n                       new PropertyOptions[] {PropertyOptions.Multiple, PropertyOptions.Protected,\n                           PropertyOptions.FullTextSearchable, PropertyOptions.QueryOrderable},\n                       OnParentVersion.Compute);\n\n        // [nt:unstructured]\n        // orderable\n        // - * (undefined) multiple\n        // - * (undefined)\n        // + * (nt:base) = nt:unstructured multiple version\n        assertNodeType(\"nt:unstructured\", NO_SUPERTYPES, NO_PRIMARY_NAME, NodeOptions.Ordered, NodeOptions.Queryable);\n        assertProperty(\"nt:unstructured\",\n                       \"*\",\n                       \"Undefined\",\n                       NO_DEFAULTS,\n                       PropertyOptions.Multiple,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        // We should test for this, but we'd have to rewrite node() to look more like\n        // RepositoryNodeTypeManager.findChildNodeDefinition\n        // assertProperty(\"nt:unstructured\", \"*\", \"Undefined\", NO_DEFAULTS);\n        assertChild(\"nt:unstructured\",\n                    \"*\",\n                    \"nt:base\",\n                    \"nt:unstructured\",\n                    OnParentVersion.Version,\n                    ChildOptions.Multiple,\n                    ChildOptions.Sns);\n\n        // [mix:referenceable]\n        // mixin\n        // - jcr:uuid (string) mandatory autocreated protected initialize\n        assertNodeType(\"mix:referenceable\", NO_SUPERTYPES, NO_PRIMARY_NAME, NodeOptions.Mixin, NodeOptions.Queryable);\n        assertProperty(\"mix:referenceable\",\n                       \"jcr:uuid\",\n                       \"String\",\n                       NO_DEFAULTS,\n                       OnParentVersion.Initialize,\n                       PropertyOptions.Mandatory,\n                       PropertyOptions.Autocreated,\n                       PropertyOptions.Protected,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n\n        // [mix:lockable]\n        // mixin\n        // - jcr:lockOwner (string) protected ignore\n        // - jcr:lockIsDeep (boolean) protected ignore\n        assertNodeType(\"mix:lockable\", NO_SUPERTYPES, NO_PRIMARY_NAME, NodeOptions.Mixin, NodeOptions.Queryable);\n        assertProperty(\"mix:lockable\",\n                       \"jcr:lockOwner\",\n                       \"String\",\n                       NO_DEFAULTS,\n                       OnParentVersion.Ignore,\n                       PropertyOptions.Protected,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        assertProperty(\"mix:lockable\",\n                       \"jcr:lockIsDeep\",\n                       \"Boolean\",\n                       NO_DEFAULTS,\n                       OnParentVersion.Ignore,\n                       PropertyOptions.Protected,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n\n        // [nt:propertyDefinition]\n        // - jcr:name (name)\n        // - jcr:autoCreated (boolean) mandatory\n        // - jcr:mandatory (boolean) mandatory\n        // - jcr:onParentVersion (string) mandatory\n        // < 'COPY', 'VERSION', 'INITIALIZE', 'COMPUTE', 'IGNORE', 'ABORT'\n        // - jcr:protected (boolean) mandatory\n        // - jcr:requiredType (string) mandatory\n        // < 'STRING', 'BINARY', 'LONG', 'DOUBLE', 'BOOLEAN', 'DATE', 'NAME', 'PATH', 'REFERENCE', 'UNDEFINED'\n        // - jcr:valueConstraints (string) multiple\n        // - jcr:defaultValues (undefined) multiple\n        // - jcr:multiple (boolean) mandatory\n        assertNodeType(\"nt:propertyDefinition\", NO_SUPERTYPES, NO_PRIMARY_NAME, NodeOptions.Queryable);\n        assertProperty(\"nt:propertyDefinition\",\n                       \"jcr:name\",\n                       \"Name\",\n                       NO_DEFAULTS,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        assertProperty(\"nt:propertyDefinition\",\n                       \"jcr:autoCreated\",\n                       \"Boolean\",\n                       NO_DEFAULTS,\n                       PropertyOptions.Mandatory,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        assertProperty(\"nt:propertyDefinition\",\n                       \"jcr:mandatory\",\n                       \"Boolean\",\n                       NO_DEFAULTS,\n                       PropertyOptions.Mandatory,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        assertProperty(\"nt:propertyDefinition\", \"jcr:onParentVersion\", \"String\", NO_DEFAULTS, new PropertyOptions[] {\n            PropertyOptions.Mandatory, PropertyOptions.FullTextSearchable, PropertyOptions.QueryOrderable}, null, new String[] {\n            \"COPY\", \"VERSION\", \"INITIALIZE\", \"COMPUTE\", \"IGNORE\", \"ABORT\"});\n        assertProperty(\"nt:propertyDefinition\",\n                       \"jcr:protected\",\n                       \"Boolean\",\n                       NO_DEFAULTS,\n                       PropertyOptions.Mandatory,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        assertProperty(\"nt:propertyDefinition\", \"jcr:requiredType\", \"String\", NO_DEFAULTS, new PropertyOptions[] {\n            PropertyOptions.Mandatory, PropertyOptions.FullTextSearchable, PropertyOptions.QueryOrderable}, null, new String[] {\n            \"STRING\", \"BINARY\", \"LONG\", \"DOUBLE\", \"BOOLEAN\", \"DATE\", \"NAME\", \"PATH\", \"REFERENCE\", \"UNDEFINED\"});\n        assertProperty(\"nt:propertyDefinition\",\n                       \"jcr:valueConstraints\",\n                       \"String\",\n                       NO_DEFAULTS,\n                       PropertyOptions.Multiple,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        assertProperty(\"nt:propertyDefinition\",\n                       \"jcr:defaultValues\",\n                       \"Undefined\",\n                       NO_DEFAULTS,\n                       PropertyOptions.Multiple,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n        assertProperty(\"nt:propertyDefinition\",\n                       \"jcr:multiple\",\n                       \"Boolean\",\n                       NO_DEFAULTS,\n                       PropertyOptions.Mandatory,\n                       PropertyOptions.FullTextSearchable,\n                       PropertyOptions.QueryOrderable);\n    }", "signature": "void shouldImportJcrBuiltinNodeTypesForJSR283()", "full_signature": "@Test public void shouldImportJcrBuiltinNodeTypesForJSR283()", "class_method_signature": "CndImporterTest.shouldImportJcrBuiltinNodeTypesForJSR283()", "testcase": true, "constructor": false, "invocations": ["importFrom", "openCndFile", "size", "printProblems", "registerImportedNamespaces", "assertThat", "size", "is", "assertNodeType", "assertProperty", "assertProperty", "assertNodeType", "assertProperty", "assertChild", "assertNodeType", "assertProperty", "assertNodeType", "assertProperty", "assertProperty", "assertNodeType", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty"]}, "focal_class": {"identifier": "CndImporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final List<String> VALID_PROPERTY_TYPES = Collections.unmodifiableList(Arrays.asList(\"STRING\",\n                                                                                                   \"BINARY\", \"LONG\", \"DOUBLE\",\n                                                                                                   \"BOOLEAN\", \"DATE\", \"NAME\",\n                                                                                                   \"PATH\", \"REFERENCE\",\n                                                                                                   \"WEAKREFERENCE\",\n                                                                                                   \"SIMPLEREFERENCE\",\n                                                                                                   \"DECIMAL\", \"URI\", \"UNDEFINED\",\n                                                                                                   \"*\", \"?\"));", "modifier": "protected final", "type": "List<String>", "declarator": "VALID_PROPERTY_TYPES = Collections.unmodifiableList(Arrays.asList(\"STRING\",\n                                                                                                   \"BINARY\", \"LONG\", \"DOUBLE\",\n                                                                                                   \"BOOLEAN\", \"DATE\", \"NAME\",\n                                                                                                   \"PATH\", \"REFERENCE\",\n                                                                                                   \"WEAKREFERENCE\",\n                                                                                                   \"SIMPLEREFERENCE\",\n                                                                                                   \"DECIMAL\", \"URI\", \"UNDEFINED\",\n                                                                                                   \"*\", \"?\"))", "var_name": "VALID_PROPERTY_TYPES"}, {"original_string": "protected final List<String> VALID_ON_PARENT_VERSION = Collections.unmodifiableList(Arrays.asList(\"COPY\",\n                                                                                                      \"VERSION\", \"INITIALIZE\",\n                                                                                                      \"COMPUTE\", \"IGNORE\",\n                                                                                                      \"ABORT\"));", "modifier": "protected final", "type": "List<String>", "declarator": "VALID_ON_PARENT_VERSION = Collections.unmodifiableList(Arrays.asList(\"COPY\",\n                                                                                                      \"VERSION\", \"INITIALIZE\",\n                                                                                                      \"COMPUTE\", \"IGNORE\",\n                                                                                                      \"ABORT\"))", "var_name": "VALID_ON_PARENT_VERSION"}, {"original_string": "protected final Set<String> VALID_QUERY_OPERATORS = Collections.unmodifiableSet(new HashSet<String>(\n                                                                                                        Arrays.asList(new String[] {\n                                                                                                            \"=\", \"<>\", \"<\", \"<=\",\n                                                                                                            \">\", \">=\", \"LIKE\"})));", "modifier": "protected final", "type": "Set<String>", "declarator": "VALID_QUERY_OPERATORS = Collections.unmodifiableSet(new HashSet<String>(\n                                                                                                        Arrays.asList(new String[] {\n                                                                                                            \"=\", \"<>\", \"<\", \"<=\",\n                                                                                                            \">\", \">=\", \"LIKE\"})))", "var_name": "VALID_QUERY_OPERATORS"}, {"original_string": "protected static final String MODESHAPE_BUILT_INS = \"org/modeshape/jcr/modeshape_builtins.cnd\";", "modifier": "protected static final", "type": "String", "declarator": "MODESHAPE_BUILT_INS = \"org/modeshape/jcr/modeshape_builtins.cnd\"", "var_name": "MODESHAPE_BUILT_INS"}, {"original_string": "protected static final String JSR283_BUILTINS = \"org/modeshape/jcr/jsr_283_builtins.cnd\";", "modifier": "protected static final", "type": "String", "declarator": "JSR283_BUILTINS = \"org/modeshape/jcr/jsr_283_builtins.cnd\"", "var_name": "JSR283_BUILTINS"}, {"original_string": "protected final List<String> BUILT_INS = Collections.unmodifiableList(Arrays.asList(JSR283_BUILTINS, MODESHAPE_BUILT_INS));", "modifier": "protected final", "type": "List<String>", "declarator": "BUILT_INS = Collections.unmodifiableList(Arrays.asList(JSR283_BUILTINS, MODESHAPE_BUILT_INS))", "var_name": "BUILT_INS"}, {"original_string": "public static final boolean DEFAULT_USE_VENDOR_EXTENSIONS = true;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_USE_VENDOR_EXTENSIONS = true", "var_name": "DEFAULT_USE_VENDOR_EXTENSIONS"}, {"original_string": "public static final boolean DEFAULT_COMPATIBLE_WITH_PREJCR2 = true;", "modifier": "public static final", "type": "boolean", "declarator": "DEFAULT_COMPATIBLE_WITH_PREJCR2 = true", "var_name": "DEFAULT_COMPATIBLE_WITH_PREJCR2"}, {"original_string": "protected final String VENDOR_PATTERN_STRING = \"([^\\\\s]+)(\\\\s+(.*))\";", "modifier": "protected final", "type": "String", "declarator": "VENDOR_PATTERN_STRING = \"([^\\\\s]+)(\\\\s+(.*))\"", "var_name": "VENDOR_PATTERN_STRING"}, {"original_string": "protected final Pattern VENDOR_PATTERN = Pattern.compile(VENDOR_PATTERN_STRING);", "modifier": "protected final", "type": "Pattern", "declarator": "VENDOR_PATTERN = Pattern.compile(VENDOR_PATTERN_STRING)", "var_name": "VENDOR_PATTERN"}, {"original_string": "protected final ExecutionContext context;", "modifier": "protected final", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "protected final LocalNamespaceRegistry localRegistry;", "modifier": "protected final", "type": "LocalNamespaceRegistry", "declarator": "localRegistry", "var_name": "localRegistry"}, {"original_string": "protected final NameFactory nameFactory;", "modifier": "protected final", "type": "NameFactory", "declarator": "nameFactory", "var_name": "nameFactory"}, {"original_string": "protected final org.modeshape.jcr.value.ValueFactory<String> stringFactory;", "modifier": "protected final", "type": "org.modeshape.jcr.value.ValueFactory<String>", "declarator": "stringFactory", "var_name": "stringFactory"}, {"original_string": "protected final ValueFactory valueFactory;", "modifier": "protected final", "type": "ValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "protected final List<NodeTypeDefinition> nodeTypes;", "modifier": "protected final", "type": "List<NodeTypeDefinition>", "declarator": "nodeTypes", "var_name": "nodeTypes"}], "methods": [{"identifier": "CndImporter", "parameters": "( ExecutionContext context )", "modifiers": "public", "return": "", "signature": " CndImporter( ExecutionContext context )", "full_signature": "public  CndImporter( ExecutionContext context )", "class_method_signature": "CndImporter.CndImporter( ExecutionContext context )", "testcase": false, "constructor": true}, {"identifier": "importFrom", "parameters": "( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "modifiers": "public", "return": "void", "signature": "void importFrom( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "full_signature": "public void importFrom( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "class_method_signature": "CndImporter.importFrom( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "testcase": false, "constructor": false}, {"identifier": "importFrom", "parameters": "( File file,\n                            Problems problems )", "modifiers": "public", "return": "void", "signature": "void importFrom( File file,\n                            Problems problems )", "full_signature": "public void importFrom( File file,\n                            Problems problems )", "class_method_signature": "CndImporter.importFrom( File file,\n                            Problems problems )", "testcase": false, "constructor": false}, {"identifier": "importFrom", "parameters": "( String content,\n                            Problems problems,\n                            String resourceName )", "modifiers": "public", "return": "void", "signature": "void importFrom( String content,\n                            Problems problems,\n                            String resourceName )", "full_signature": "public void importFrom( String content,\n                            Problems problems,\n                            String resourceName )", "class_method_signature": "CndImporter.importFrom( String content,\n                            Problems problems,\n                            String resourceName )", "testcase": false, "constructor": false}, {"identifier": "importBuiltIns", "parameters": "( Problems problems )", "modifiers": "public", "return": "void", "signature": "void importBuiltIns( Problems problems )", "full_signature": "public void importBuiltIns( Problems problems )", "class_method_signature": "CndImporter.importBuiltIns( Problems problems )", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "public", "return": "Set<NamespaceRegistry.Namespace>", "signature": "Set<NamespaceRegistry.Namespace> getNamespaces()", "full_signature": "public Set<NamespaceRegistry.Namespace> getNamespaces()", "class_method_signature": "CndImporter.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "getNodeTypeDefinitions", "parameters": "()", "modifiers": "public", "return": "List<NodeTypeDefinition>", "signature": "List<NodeTypeDefinition> getNodeTypeDefinitions()", "full_signature": "public List<NodeTypeDefinition> getNodeTypeDefinitions()", "class_method_signature": "CndImporter.getNodeTypeDefinitions()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "( String content )", "modifiers": "protected", "return": "void", "signature": "void parse( String content )", "full_signature": "protected void parse( String content )", "class_method_signature": "CndImporter.parse( String content )", "testcase": false, "constructor": false}, {"identifier": "parseNamespaceMapping", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "void", "signature": "void parseNamespaceMapping( TokenStream tokens )", "full_signature": "protected void parseNamespaceMapping( TokenStream tokens )", "class_method_signature": "CndImporter.parseNamespaceMapping( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNodeTypeDefinition", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "void", "signature": "void parseNodeTypeDefinition( TokenStream tokens )", "full_signature": "protected void parseNodeTypeDefinition( TokenStream tokens )", "class_method_signature": "CndImporter.parseNodeTypeDefinition( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNodeTypeName", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Name", "signature": "Name parseNodeTypeName( TokenStream tokens )", "full_signature": "protected Name parseNodeTypeName( TokenStream tokens )", "class_method_signature": "CndImporter.parseNodeTypeName( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseSupertypes", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "List<Name>", "signature": "List<Name> parseSupertypes( TokenStream tokens )", "full_signature": "protected List<Name> parseSupertypes( TokenStream tokens )", "class_method_signature": "CndImporter.parseSupertypes( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseStringList", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "List<String>", "signature": "List<String> parseStringList( TokenStream tokens )", "full_signature": "protected List<String> parseStringList( TokenStream tokens )", "class_method_signature": "CndImporter.parseStringList( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNameList", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "List<Name>", "signature": "List<Name> parseNameList( TokenStream tokens )", "full_signature": "protected List<Name> parseNameList( TokenStream tokens )", "class_method_signature": "CndImporter.parseNameList( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNodeTypeOptions", "parameters": "( TokenStream tokens,\n                                         JcrNodeTypeTemplate nodeType )", "modifiers": "protected", "return": "void", "signature": "void parseNodeTypeOptions( TokenStream tokens,\n                                         JcrNodeTypeTemplate nodeType )", "full_signature": "protected void parseNodeTypeOptions( TokenStream tokens,\n                                         JcrNodeTypeTemplate nodeType )", "class_method_signature": "CndImporter.parseNodeTypeOptions( TokenStream tokens,\n                                         JcrNodeTypeTemplate nodeType )", "testcase": false, "constructor": false}, {"identifier": "parsePropertyOrChildNodeDefinitions", "parameters": "( TokenStream tokens,\n                                                        JcrNodeTypeTemplate nodeType )", "modifiers": "protected", "return": "void", "signature": "void parsePropertyOrChildNodeDefinitions( TokenStream tokens,\n                                                        JcrNodeTypeTemplate nodeType )", "full_signature": "protected void parsePropertyOrChildNodeDefinitions( TokenStream tokens,\n                                                        JcrNodeTypeTemplate nodeType )", "class_method_signature": "CndImporter.parsePropertyOrChildNodeDefinitions( TokenStream tokens,\n                                                        JcrNodeTypeTemplate nodeType )", "testcase": false, "constructor": false}, {"identifier": "parsePropertyDefinition", "parameters": "( TokenStream tokens,\n                                            JcrNodeTypeTemplate nodeType )", "modifiers": "protected", "return": "void", "signature": "void parsePropertyDefinition( TokenStream tokens,\n                                            JcrNodeTypeTemplate nodeType )", "full_signature": "protected void parsePropertyDefinition( TokenStream tokens,\n                                            JcrNodeTypeTemplate nodeType )", "class_method_signature": "CndImporter.parsePropertyDefinition( TokenStream tokens,\n                                            JcrNodeTypeTemplate nodeType )", "testcase": false, "constructor": false}, {"identifier": "parsePropertyType", "parameters": "( TokenStream tokens,\n                                      JcrPropertyDefinitionTemplate propDefn,\n                                      String defaultPropertyType )", "modifiers": "protected", "return": "void", "signature": "void parsePropertyType( TokenStream tokens,\n                                      JcrPropertyDefinitionTemplate propDefn,\n                                      String defaultPropertyType )", "full_signature": "protected void parsePropertyType( TokenStream tokens,\n                                      JcrPropertyDefinitionTemplate propDefn,\n                                      String defaultPropertyType )", "class_method_signature": "CndImporter.parsePropertyType( TokenStream tokens,\n                                      JcrPropertyDefinitionTemplate propDefn,\n                                      String defaultPropertyType )", "testcase": false, "constructor": false}, {"identifier": "parseDefaultValues", "parameters": "( TokenStream tokens,\n                                       JcrPropertyDefinitionTemplate propDefn )", "modifiers": "protected", "return": "void", "signature": "void parseDefaultValues( TokenStream tokens,\n                                       JcrPropertyDefinitionTemplate propDefn )", "full_signature": "protected void parseDefaultValues( TokenStream tokens,\n                                       JcrPropertyDefinitionTemplate propDefn )", "class_method_signature": "CndImporter.parseDefaultValues( TokenStream tokens,\n                                       JcrPropertyDefinitionTemplate propDefn )", "testcase": false, "constructor": false}, {"identifier": "parseValueConstraints", "parameters": "( TokenStream tokens,\n                                          JcrPropertyDefinitionTemplate propDefn )", "modifiers": "protected", "return": "void", "signature": "void parseValueConstraints( TokenStream tokens,\n                                          JcrPropertyDefinitionTemplate propDefn )", "full_signature": "protected void parseValueConstraints( TokenStream tokens,\n                                          JcrPropertyDefinitionTemplate propDefn )", "class_method_signature": "CndImporter.parseValueConstraints( TokenStream tokens,\n                                          JcrPropertyDefinitionTemplate propDefn )", "testcase": false, "constructor": false}, {"identifier": "parsePropertyAttributes", "parameters": "( TokenStream tokens,\n                                            JcrPropertyDefinitionTemplate propDefn,\n                                            JcrNodeTypeTemplate nodeType )", "modifiers": "protected", "return": "void", "signature": "void parsePropertyAttributes( TokenStream tokens,\n                                            JcrPropertyDefinitionTemplate propDefn,\n                                            JcrNodeTypeTemplate nodeType )", "full_signature": "protected void parsePropertyAttributes( TokenStream tokens,\n                                            JcrPropertyDefinitionTemplate propDefn,\n                                            JcrNodeTypeTemplate nodeType )", "class_method_signature": "CndImporter.parsePropertyAttributes( TokenStream tokens,\n                                            JcrPropertyDefinitionTemplate propDefn,\n                                            JcrNodeTypeTemplate nodeType )", "testcase": false, "constructor": false}, {"identifier": "parseQueryOperators", "parameters": "( TokenStream tokens,\n                                        JcrPropertyDefinitionTemplate propDefn )", "modifiers": "protected", "return": "void", "signature": "void parseQueryOperators( TokenStream tokens,\n                                        JcrPropertyDefinitionTemplate propDefn )", "full_signature": "protected void parseQueryOperators( TokenStream tokens,\n                                        JcrPropertyDefinitionTemplate propDefn )", "class_method_signature": "CndImporter.parseQueryOperators( TokenStream tokens,\n                                        JcrPropertyDefinitionTemplate propDefn )", "testcase": false, "constructor": false}, {"identifier": "parseChildNodeDefinition", "parameters": "( TokenStream tokens,\n                                             JcrNodeTypeTemplate nodeType )", "modifiers": "protected", "return": "void", "signature": "void parseChildNodeDefinition( TokenStream tokens,\n                                             JcrNodeTypeTemplate nodeType )", "full_signature": "protected void parseChildNodeDefinition( TokenStream tokens,\n                                             JcrNodeTypeTemplate nodeType )", "class_method_signature": "CndImporter.parseChildNodeDefinition( TokenStream tokens,\n                                             JcrNodeTypeTemplate nodeType )", "testcase": false, "constructor": false}, {"identifier": "parseRequiredPrimaryTypes", "parameters": "( TokenStream tokens,\n                                              JcrNodeDefinitionTemplate childDefn )", "modifiers": "protected", "return": "void", "signature": "void parseRequiredPrimaryTypes( TokenStream tokens,\n                                              JcrNodeDefinitionTemplate childDefn )", "full_signature": "protected void parseRequiredPrimaryTypes( TokenStream tokens,\n                                              JcrNodeDefinitionTemplate childDefn )", "class_method_signature": "CndImporter.parseRequiredPrimaryTypes( TokenStream tokens,\n                                              JcrNodeDefinitionTemplate childDefn )", "testcase": false, "constructor": false}, {"identifier": "parseDefaultType", "parameters": "( TokenStream tokens,\n                                     JcrNodeDefinitionTemplate childDefn )", "modifiers": "protected", "return": "void", "signature": "void parseDefaultType( TokenStream tokens,\n                                     JcrNodeDefinitionTemplate childDefn )", "full_signature": "protected void parseDefaultType( TokenStream tokens,\n                                     JcrNodeDefinitionTemplate childDefn )", "class_method_signature": "CndImporter.parseDefaultType( TokenStream tokens,\n                                     JcrNodeDefinitionTemplate childDefn )", "testcase": false, "constructor": false}, {"identifier": "parseNodeAttributes", "parameters": "( TokenStream tokens,\n                                        JcrNodeDefinitionTemplate childDefn,\n                                        JcrNodeTypeTemplate nodeType )", "modifiers": "protected", "return": "void", "signature": "void parseNodeAttributes( TokenStream tokens,\n                                        JcrNodeDefinitionTemplate childDefn,\n                                        JcrNodeTypeTemplate nodeType )", "full_signature": "protected void parseNodeAttributes( TokenStream tokens,\n                                        JcrNodeDefinitionTemplate childDefn,\n                                        JcrNodeTypeTemplate nodeType )", "class_method_signature": "CndImporter.parseNodeAttributes( TokenStream tokens,\n                                        JcrNodeDefinitionTemplate childDefn,\n                                        JcrNodeTypeTemplate nodeType )", "testcase": false, "constructor": false}, {"identifier": "parseName", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Name", "signature": "Name parseName( TokenStream tokens )", "full_signature": "protected Name parseName( TokenStream tokens )", "class_method_signature": "CndImporter.parseName( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "removeQuotes", "parameters": "( String text )", "modifiers": "protected final", "return": "String", "signature": "String removeQuotes( String text )", "full_signature": "protected final String removeQuotes( String text )", "class_method_signature": "CndImporter.removeQuotes( String text )", "testcase": false, "constructor": false}, {"identifier": "parseVendorExtensions", "parameters": "( TokenStream tokens,\n                                                List<Property> properties )", "modifiers": "protected final", "return": "void", "signature": "void parseVendorExtensions( TokenStream tokens,\n                                                List<Property> properties )", "full_signature": "protected final void parseVendorExtensions( TokenStream tokens,\n                                                List<Property> properties )", "class_method_signature": "CndImporter.parseVendorExtensions( TokenStream tokens,\n                                                List<Property> properties )", "testcase": false, "constructor": false}, {"identifier": "parseVendorExtension", "parameters": "( String vendorExtension )", "modifiers": "protected final", "return": "Property", "signature": "Property parseVendorExtension( String vendorExtension )", "full_signature": "protected final Property parseVendorExtension( String vendorExtension )", "class_method_signature": "CndImporter.parseVendorExtension( String vendorExtension )", "testcase": false, "constructor": false}, {"identifier": "parseVendorExtensionContent", "parameters": "( String vendorExtension )", "modifiers": "protected final", "return": "Property", "signature": "Property parseVendorExtensionContent( String vendorExtension )", "full_signature": "protected final Property parseVendorExtensionContent( String vendorExtension )", "class_method_signature": "CndImporter.parseVendorExtensionContent( String vendorExtension )", "testcase": false, "constructor": false}, {"identifier": "applyVendorExtensions", "parameters": "( JcrNodeTypeTemplate nodeType,\n                                          List<Property> extensions )", "modifiers": "protected", "return": "void", "signature": "void applyVendorExtensions( JcrNodeTypeTemplate nodeType,\n                                          List<Property> extensions )", "full_signature": "protected void applyVendorExtensions( JcrNodeTypeTemplate nodeType,\n                                          List<Property> extensions )", "class_method_signature": "CndImporter.applyVendorExtensions( JcrNodeTypeTemplate nodeType,\n                                          List<Property> extensions )", "testcase": false, "constructor": false}, {"identifier": "applyVendorExtensions", "parameters": "( JcrNodeDefinitionTemplate childDefn,\n                                          List<Property> extensions )", "modifiers": "protected", "return": "void", "signature": "void applyVendorExtensions( JcrNodeDefinitionTemplate childDefn,\n                                          List<Property> extensions )", "full_signature": "protected void applyVendorExtensions( JcrNodeDefinitionTemplate childDefn,\n                                          List<Property> extensions )", "class_method_signature": "CndImporter.applyVendorExtensions( JcrNodeDefinitionTemplate childDefn,\n                                          List<Property> extensions )", "testcase": false, "constructor": false}, {"identifier": "applyVendorExtensions", "parameters": "( JcrPropertyDefinitionTemplate propDefn,\n                                          List<Property> extensions )", "modifiers": "protected", "return": "void", "signature": "void applyVendorExtensions( JcrPropertyDefinitionTemplate propDefn,\n                                          List<Property> extensions )", "full_signature": "protected void applyVendorExtensions( JcrPropertyDefinitionTemplate propDefn,\n                                          List<Property> extensions )", "class_method_signature": "CndImporter.applyVendorExtensions( JcrPropertyDefinitionTemplate propDefn,\n                                          List<Property> extensions )", "testcase": false, "constructor": false}, {"identifier": "string", "parameters": "( Object name )", "modifiers": "protected final", "return": "String", "signature": "String string( Object name )", "full_signature": "protected final String string( Object name )", "class_method_signature": "CndImporter.string( Object name )", "testcase": false, "constructor": false}, {"identifier": "names", "parameters": "( Collection<Name> names )", "modifiers": "protected final", "return": "String[]", "signature": "String[] names( Collection<Name> names )", "full_signature": "protected final String[] names( Collection<Name> names )", "class_method_signature": "CndImporter.names( Collection<Name> names )", "testcase": false, "constructor": false}, {"identifier": "strings", "parameters": "( Collection<String> values )", "modifiers": "protected final", "return": "String[]", "signature": "String[] strings( Collection<String> values )", "full_signature": "protected final String[] strings( Collection<String> values )", "class_method_signature": "CndImporter.strings( Collection<String> values )", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "( Collection<String> values )", "modifiers": "protected final", "return": "Value[]", "signature": "Value[] values( Collection<String> values )", "full_signature": "protected final Value[] values( Collection<String> values )", "class_method_signature": "CndImporter.values( Collection<String> values )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/CndImporter.java"}, "focal_method": {"identifier": "importFrom", "parameters": "( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "modifiers": "public", "return": "void", "body": "public void importFrom( InputStream stream,\n                            Problems problems,\n                            String resourceName ) throws IOException {\n        importFrom(IoUtil.read(stream), problems, resourceName);\n    }", "signature": "void importFrom( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "full_signature": "public void importFrom( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "class_method_signature": "CndImporter.importFrom( InputStream stream,\n                            Problems problems,\n                            String resourceName )", "testcase": false, "constructor": false, "invocations": ["importFrom", "read"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}