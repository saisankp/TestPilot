{"test_class": {"identifier": "UniformDeterministicSelectionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected UniformDeterministicSelectionOperator operator;", "modifier": "protected", "type": "UniformDeterministicSelectionOperator", "declarator": "operator", "var_name": "operator"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/UniformDeterministicSelectionOperatorTest.java"}, "test_case": {"identifier": "testSelect1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSelect1() throws Exception {\n        SimplePopulation popIn1 = new SimplePopulation();\n        SimplePopulation popIn2 = new SimplePopulation();\n        Individual[] allIndividuals = new SimpleIndividual[10];\n        for (int i = 0; i < allIndividuals.length; i++){\n            allIndividuals[i] = new SimpleIndividual(0, i, new SimplePhenotypeRepresentation());\n        }\n        Individual[] ind1 = new Individual[]{allIndividuals[0], allIndividuals[1], allIndividuals[2]};\n        popIn1.setIndividuals(ind1);\n        Individual[] ind2 = new Individual[]{allIndividuals[3], allIndividuals[4]};\n        popIn2.setIndividuals(ind2);\n\n        Population[] popsIn = new Population[]{popIn1, popIn2};\n\n        this.operator.setInputArity(1);\n        this.operator.setIndividualsPerPopulation(6);\n        this.operator.setOutputArity(1);\n\n        Population[] popsOut = operator.select(popsIn);\n\n        assertTrue(popsOut != null);\n        assertTrue(popsOut.length == 1);\n        Individual[] indOut1 = popsOut[0].getIndividuals();\n        assertTrue(indOut1.length == 6);\n        assertSame(allIndividuals[0], indOut1[0]);\n        assertSame(allIndividuals[0], indOut1[1]);\n        assertSame(allIndividuals[1], indOut1[2]);\n        assertSame(allIndividuals[1], indOut1[3]);\n        assertSame(allIndividuals[2], indOut1[4]);\n        assertSame(allIndividuals[2], indOut1[5]);\n    }", "signature": "void testSelect1()", "full_signature": "@Test public void testSelect1()", "class_method_signature": "UniformDeterministicSelectionOperatorTest.testSelect1()", "testcase": true, "constructor": false, "invocations": ["setIndividuals", "setIndividuals", "setInputArity", "setIndividualsPerPopulation", "setOutputArity", "select", "assertTrue", "assertTrue", "getIndividuals", "assertTrue", "assertSame", "assertSame", "assertSame", "assertSame", "assertSame", "assertSame"]}, "focal_class": {"identifier": "UniformDeterministicSelectionOperator", "superclass": "extends AbstractSelectionOperator", "interfaces": "", "fields": [{"original_string": "protected int broodSize;", "modifier": "protected", "type": "int", "declarator": "broodSize", "var_name": "broodSize"}], "methods": [{"identifier": "UniformDeterministicSelectionOperator", "parameters": "()", "modifiers": "public", "return": "", "signature": " UniformDeterministicSelectionOperator()", "full_signature": "public  UniformDeterministicSelectionOperator()", "class_method_signature": "UniformDeterministicSelectionOperator.UniformDeterministicSelectionOperator()", "testcase": false, "constructor": true}, {"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "UniformDeterministicSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "checkConsistency", "parameters": "(Population[] inputPopulations)", "modifiers": "@Override public", "return": "void", "signature": "void checkConsistency(Population[] inputPopulations)", "full_signature": "@Override public void checkConsistency(Population[] inputPopulations)", "class_method_signature": "UniformDeterministicSelectionOperator.checkConsistency(Population[] inputPopulations)", "testcase": false, "constructor": false}, {"identifier": "checkAlignmentPredicate", "parameters": "(int inputIndividuals)", "modifiers": "protected", "return": "void", "signature": "void checkAlignmentPredicate(int inputIndividuals)", "full_signature": "protected void checkAlignmentPredicate(int inputIndividuals)", "class_method_signature": "UniformDeterministicSelectionOperator.checkAlignmentPredicate(int inputIndividuals)", "testcase": false, "constructor": false}, {"identifier": "getResultsSizesCore", "parameters": "(int[] parentPopulationSizes)", "modifiers": "protected", "return": "int[]", "signature": "int[] getResultsSizesCore(int[] parentPopulationSizes)", "full_signature": "protected int[] getResultsSizesCore(int[] parentPopulationSizes)", "class_method_signature": "UniformDeterministicSelectionOperator.getResultsSizesCore(int[] parentPopulationSizes)", "testcase": false, "constructor": false}, {"identifier": "setRandomGenerator", "parameters": "(RandomGenerator randomGenerator)", "modifiers": "public", "return": "void", "signature": "void setRandomGenerator(RandomGenerator randomGenerator)", "full_signature": "public void setRandomGenerator(RandomGenerator randomGenerator)", "class_method_signature": "UniformDeterministicSelectionOperator.setRandomGenerator(RandomGenerator randomGenerator)", "testcase": false, "constructor": false}, {"identifier": "resetGenerationCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetGenerationCount()", "full_signature": "public void resetGenerationCount()", "class_method_signature": "UniformDeterministicSelectionOperator.resetGenerationCount()", "testcase": false, "constructor": false}, {"identifier": "nextGeneration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nextGeneration()", "full_signature": "public void nextGeneration()", "class_method_signature": "UniformDeterministicSelectionOperator.nextGeneration()", "testcase": false, "constructor": false}, {"identifier": "setGeneration", "parameters": "(int currentGeneration)", "modifiers": "public", "return": "void", "signature": "void setGeneration(int currentGeneration)", "full_signature": "public void setGeneration(int currentGeneration)", "class_method_signature": "UniformDeterministicSelectionOperator.setGeneration(int currentGeneration)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/UniformDeterministicSelectionOperator.java"}, "focal_method": {"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "body": "public Population[] select(Population[] populations) {\n        this.checkConsistency(populations);\n\n        // unify populations for easy linear access to all input Individuals\n        Individual[] inputIndividuals = this.concatenateIndividualsFromPopulations(populations, this.inputArity);\n\n        int totalOutput = inputIndividuals.length * this.broodSize;\n        List<Individual> outputList = new ArrayList<Individual>();\n        // each Individual will be selected exactly broodSize times\n        for (Individual individual : inputIndividuals){\n            for (int i = 0; i < this.broodSize; i++){\n                outputList.add(individual);\n            }\n        }\n        // preparation of output\n        this.individualsPerPopulation = totalOutput / this.outputArity;\n        Population[] outputPopulations = this.createOutputPopulations();\n        Individual[][] outputIndividuals = this.createOutputIndividuals();\n        this.mapByColumns(outputList, outputIndividuals);\n        this.assignIndividualsToPopulations(outputIndividuals, outputPopulations);\n\n        return outputPopulations;\n    }", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "UniformDeterministicSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false, "invocations": ["checkConsistency", "concatenateIndividualsFromPopulations", "add", "createOutputPopulations", "createOutputIndividuals", "mapByColumns", "assignIndividualsToPopulations"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}