{"test_class": {"identifier": "SQLParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Attribute<Car, Boolean> IS_BLUE = new SimpleAttribute<Car, Boolean>(\"is_blue\") {\n        @Override\n        public Boolean getValue(Car object, QueryOptions queryOptions) {\n            return object.getColor().equals(Car.Color.BLUE);\n        }\n    };", "modifier": "static final", "type": "Attribute<Car, Boolean>", "declarator": "IS_BLUE = new SimpleAttribute<Car, Boolean>(\"is_blue\") {\n        @Override\n        public Boolean getValue(Car object, QueryOptions queryOptions) {\n            return object.getColor().equals(Car.Color.BLUE);\n        }\n    }", "var_name": "IS_BLUE"}, {"original_string": "final SQLParser<Car> parser = new SQLParser<Car>(Car.class){{\n        registerAttribute(Car.CAR_ID);\n        registerAttribute(Car.MANUFACTURER);\n        registerAttribute(Car.MODEL);\n        registerAttribute(Car.COLOR);\n        registerAttribute(Car.DOORS);\n        registerAttribute(Car.PRICE);\n        registerAttribute(Car.FEATURES);\n        registerAttribute(IS_BLUE);\n    }};", "modifier": "final", "type": "SQLParser<Car>", "declarator": "parser = new SQLParser<Car>(Car.class){{\n        registerAttribute(Car.CAR_ID);\n        registerAttribute(Car.MANUFACTURER);\n        registerAttribute(Car.MODEL);\n        registerAttribute(Car.COLOR);\n        registerAttribute(Car.DOORS);\n        registerAttribute(Car.PRICE);\n        registerAttribute(Car.FEATURES);\n        registerAttribute(IS_BLUE);\n    }}", "var_name": "parser"}], "file": "code/src/test/java/com/googlecode/cqengine/query/parser/sql/SQLParserTest.java"}, "test_case": {"identifier": "testOrderBy_AscIsOptional", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOrderBy_AscIsOptional() {\n        ParseResult<Car> parseResult = parser.parse(\"SELECT * FROM cars WHERE 'manufacturer' = 'Ford' ORDER BY manufacturer, carId DESC\");\n        assertQueriesEquals(equal(Car.MANUFACTURER, \"Ford\"), parseResult.getQuery());\n        Assert.assertEquals(queryOptions(orderBy(ascending(Car.MANUFACTURER), descending(Car.CAR_ID))), parseResult.getQueryOptions());\n    }", "signature": "void testOrderBy_AscIsOptional()", "full_signature": "@Test public void testOrderBy_AscIsOptional()", "class_method_signature": "SQLParserTest.testOrderBy_AscIsOptional()", "testcase": true, "constructor": false, "invocations": ["parse", "assertQueriesEquals", "equal", "getQuery", "assertEquals", "queryOptions", "orderBy", "ascending", "descending", "getQueryOptions"]}, "focal_class": {"identifier": "SQLParser", "superclass": "extends QueryParser<O>", "interfaces": "", "fields": [], "methods": [{"identifier": "SQLParser", "parameters": "(Class<O> objectType)", "modifiers": "public", "return": "", "signature": " SQLParser(Class<O> objectType)", "full_signature": "public  SQLParser(Class<O> objectType)", "class_method_signature": "SQLParser.SQLParser(Class<O> objectType)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String query)", "modifiers": "@Override public", "return": "ParseResult<O>", "signature": "ParseResult<O> parse(String query)", "full_signature": "@Override public ParseResult<O> parse(String query)", "class_method_signature": "SQLParser.parse(String query)", "testcase": false, "constructor": false}, {"identifier": "forPojo", "parameters": "(Class<O> pojoClass)", "modifiers": "public static", "return": "SQLParser<O>", "signature": "SQLParser<O> forPojo(Class<O> pojoClass)", "full_signature": "public static SQLParser<O> forPojo(Class<O> pojoClass)", "class_method_signature": "SQLParser.forPojo(Class<O> pojoClass)", "testcase": false, "constructor": false}, {"identifier": "forPojoWithAttributes", "parameters": "(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "modifiers": "public static", "return": "SQLParser<O>", "signature": "SQLParser<O> forPojoWithAttributes(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "full_signature": "public static SQLParser<O> forPojoWithAttributes(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "class_method_signature": "SQLParser.forPojoWithAttributes(Class<O> pojoClass, Map<String, ? extends Attribute<O, ?>> attributes)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/parser/sql/SQLParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String query)", "modifiers": "@Override public", "return": "ParseResult<O>", "body": "@Override\n    public ParseResult<O> parse(String query) {\n        try {\n            if (query == null) {\n                throw new IllegalArgumentException(\"Query was null\");\n            }\n            SQLGrammarLexer lexer = new SQLGrammarLexer(new ANTLRInputStream(query));\n            lexer.removeErrorListeners();\n            lexer.addErrorListener(SYNTAX_ERROR_LISTENER);\n\n            CommonTokenStream tokens = new CommonTokenStream(lexer);\n\n            SQLGrammarParser parser = new SQLGrammarParser(tokens);\n            parser.removeErrorListeners();\n            parser.addErrorListener(SYNTAX_ERROR_LISTENER);\n\n            SQLGrammarParser.StartContext queryContext = parser.start();\n\n            ParseTreeWalker walker = new ParseTreeWalker();\n            SQLAntlrListener<O> listener = new SQLAntlrListener<O>(this);\n            walker.walk(listener, queryContext);\n            return new ParseResult<O>(listener.getParsedQuery(), listener.getQueryOptions());\n        }\n        catch (InvalidQueryException e) {\n            throw e;\n        }\n        catch (Exception e) {\n            throw new InvalidQueryException(\"Failed to parse query\", e);\n        }\n    }", "signature": "ParseResult<O> parse(String query)", "full_signature": "@Override public ParseResult<O> parse(String query)", "class_method_signature": "SQLParser.parse(String query)", "testcase": false, "constructor": false, "invocations": ["removeErrorListeners", "addErrorListener", "removeErrorListeners", "addErrorListener", "start", "walk", "getParsedQuery", "getQueryOptions"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}