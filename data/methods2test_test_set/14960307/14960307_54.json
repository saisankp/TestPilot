{"test_class": {"identifier": "GsmUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GsmUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GsmUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-gsm/src/test/java/com/cloudhopper/commons/gsm/GsmUtilTest.java"}, "test_case": {"identifier": "createConcatenatedBinaryShortMessages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createConcatenatedBinaryShortMessages() {\n        Assert.assertNull(GsmUtil.createConcatenatedBinaryShortMessages(null, (byte)0));\n        // these don't need concatenated\n        Assert.assertNull(GsmUtil.createConcatenatedBinaryShortMessages(new byte[0], (byte)0));\n        Assert.assertNull(GsmUtil.createConcatenatedBinaryShortMessages(HexUtil.toByteArray(\"00\"), (byte)0));\n        Assert.assertNull(GsmUtil.createConcatenatedBinaryShortMessages(HexUtil.toByteArray(\"0001\"), (byte)0));\n        // full 140 bytes (boundary)\n        Assert.assertNull(GsmUtil.createConcatenatedBinaryShortMessages(HexUtil.toByteArray(\"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B\"), (byte)0));\n\n        // start of concatenated sms\n        byte[][] smsParts = null;\n\n        // 141 bytes (2 sms)\n        smsParts = GsmUtil.createConcatenatedBinaryShortMessages(HexUtil.toByteArray(\"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C\"), (byte)2);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003020201000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485\"), smsParts[0]);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003020202868788898A8B8C\"), smsParts[1]);\n\n        // 268 bytes (exactly 2 sms)\n        smsParts = GsmUtil.createConcatenatedBinaryShortMessages(HexUtil.toByteArray(\"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B\"), (byte)2);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003020201000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485\"), smsParts[0]);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003020202868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B\"), smsParts[1]);\n\n        // 269 bytes (3 sms)\n        smsParts = GsmUtil.createConcatenatedBinaryShortMessages(HexUtil.toByteArray(\"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B0C\"), (byte)2);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003020301000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485\"), smsParts[0]);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003020302868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A0B\"), smsParts[1]);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"0500030203030C\"), smsParts[2]);\n\n        // 267 bytes (2 sms)\n        smsParts = GsmUtil.createConcatenatedBinaryShortMessages(HexUtil.toByteArray(\"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A\"), (byte)0xFF);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003FF0201000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485\"), smsParts[0]);\n        Assert.assertArrayEquals(HexUtil.toByteArray(\"050003FF0202868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF000102030405060708090A\"), smsParts[1]);\n\n\n        /**\n        int size = (134*2) + 1;\n        byte[] d = new byte[size];\n        for (int i = 0; i < size; i++) {\n            d[i] = (byte)i;\n        }\n        logger.debug(size + \": \" + HexUtil.toHexString(d));\n         */\n        \n    }", "signature": "void createConcatenatedBinaryShortMessages()", "full_signature": "@Test public void createConcatenatedBinaryShortMessages()", "class_method_signature": "GsmUtilTest.createConcatenatedBinaryShortMessages()", "testcase": true, "constructor": false, "invocations": ["assertNull", "createConcatenatedBinaryShortMessages", "assertNull", "createConcatenatedBinaryShortMessages", "assertNull", "createConcatenatedBinaryShortMessages", "toByteArray", "assertNull", "createConcatenatedBinaryShortMessages", "toByteArray", "assertNull", "createConcatenatedBinaryShortMessages", "toByteArray", "createConcatenatedBinaryShortMessages", "toByteArray", "assertArrayEquals", "toByteArray", "assertArrayEquals", "toByteArray", "createConcatenatedBinaryShortMessages", "toByteArray", "assertArrayEquals", "toByteArray", "assertArrayEquals", "toByteArray", "createConcatenatedBinaryShortMessages", "toByteArray", "assertArrayEquals", "toByteArray", "assertArrayEquals", "toByteArray", "assertArrayEquals", "toByteArray", "createConcatenatedBinaryShortMessages", "toByteArray", "assertArrayEquals", "toByteArray", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "GsmUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toBcd", "parameters": "(String address)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toBcd(String address)", "full_signature": "public static byte[] toBcd(String address)", "class_method_signature": "GsmUtil.toBcd(String address)", "testcase": false, "constructor": false}, {"identifier": "toSubmitInfo", "parameters": "(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "modifiers": "public static", "return": "byte", "signature": "byte toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "full_signature": "public static byte toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "class_method_signature": "GsmUtil.toSubmitInfo(boolean replyPath, boolean udhIndicator,\n            boolean deliveryReceipt, int validityPeriodFormat, boolean rejectDuplicates)", "testcase": false, "constructor": false}, {"identifier": "removeUserDataHeader", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] removeUserDataHeader(byte[] shortMessage)", "full_signature": "static public byte[] removeUserDataHeader(byte[] shortMessage)", "class_method_signature": "GsmUtil.removeUserDataHeader(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "getShortMessageUserData", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] getShortMessageUserData(byte[] shortMessage)", "full_signature": "static public byte[] getShortMessageUserData(byte[] shortMessage)", "class_method_signature": "GsmUtil.getShortMessageUserData(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "getShortMessageUserDataHeader", "parameters": "(byte[] shortMessage)", "modifiers": "static public", "return": "byte[]", "signature": "byte[] getShortMessageUserDataHeader(byte[] shortMessage)", "full_signature": "static public byte[] getShortMessageUserDataHeader(byte[] shortMessage)", "class_method_signature": "GsmUtil.getShortMessageUserDataHeader(byte[] shortMessage)", "testcase": false, "constructor": false}, {"identifier": "createConcatenatedBinaryShortMessages", "parameters": "(byte[] binaryShortMessage, byte referenceNum)", "modifiers": "static public", "return": "byte[][]", "signature": "byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "full_signature": "static public byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "class_method_signature": "GsmUtil.createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "testcase": false, "constructor": false}], "file": "ch-commons-gsm/src/main/java/com/cloudhopper/commons/gsm/GsmUtil.java"}, "focal_method": {"identifier": "createConcatenatedBinaryShortMessages", "parameters": "(byte[] binaryShortMessage, byte referenceNum)", "modifiers": "static public", "return": "byte[][]", "body": "static public byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum) throws IllegalArgumentException {\n        if (binaryShortMessage == null) {\n            return null;\n        }\n        // if the short message does not need to be concatenated\n        if (binaryShortMessage.length <= 140) {\n            return null;\n        }\n\n        // since the UDH will be 6 bytes, we'll split the data into chunks of 134\n        int numParts = (int) (binaryShortMessage.length / 134) + (binaryShortMessage.length % 134 != 0 ? 1 : 0);\n        //logger.debug(\"numParts=\" + numParts);\n\n        byte[][] shortMessageParts = new byte[numParts][];\n\n        for (int i = 0; i < numParts; i++) {\n            // default this part length to max of 134\n            int shortMessagePartLength = 134;\n            if ((i + 1) == numParts) {\n                // last part (only need to add remainder)\n                shortMessagePartLength = binaryShortMessage.length - (i * 134);\n            }\n\n            //logger.debug(\"part \" + i + \" len: \" + shortMessagePartLength);\n\n            // part will be UDH (6 bytes) + length of part\n            byte[] shortMessagePart = new byte[6 + shortMessagePartLength];\n            // Field 1 (1 octet): Length of User Data Header, in this case 05.\n            shortMessagePart[0] = (byte) 0x05;\n            // Field 2 (1 octet): Information Element Identifier, equal to 00 (Concatenated short messages, 8-bit reference number)\n            shortMessagePart[1] = (byte) 0x00;\n            // Field 3 (1 octet): Length of the header, excluding the first two fields; equal to 03\n            shortMessagePart[2] = (byte) 0x03;\n            // Field 4 (1 octet): 00-FF, CSMS reference number, must be same for all the SMS parts in the CSMS\n            shortMessagePart[3] = referenceNum;\n            // Field 5 (1 octet): 00-FF, total number of parts. The value shall remain constant for every short message which makes up the concatenated short message. If the value is zero then the receiving entity shall ignore the whole information element\n            shortMessagePart[4] = (byte) numParts;\n            // Field 6 (1 octet): 00-FF, this part's number in the sequence. The value shall start at 1 and increment for every short message which makes up the concatenated short message. If the value is zero or greater than the value in Field 5 then the receiving entity shall ignore the whole information element. [ETSI Specification: GSM 03.40 Version 5.3.0: July 1996]\n            shortMessagePart[5] = (byte) (i + 1);\n\n            // copy this part's user data onto the end\n            System.arraycopy(binaryShortMessage, (i * 134), shortMessagePart, 6, shortMessagePartLength);\n            shortMessageParts[i] = shortMessagePart;\n        }\n\n        return shortMessageParts;\n    }", "signature": "byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "full_signature": "static public byte[][] createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "class_method_signature": "GsmUtil.createConcatenatedBinaryShortMessages(byte[] binaryShortMessage, byte referenceNum)", "testcase": false, "constructor": false, "invocations": ["arraycopy"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}