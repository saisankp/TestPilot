{"test_class": {"identifier": "TypeReflectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "ask-sdk-interaction-model-mapper/src/test/java/com/amazon/ask/interaction/TypeReflectorTest.java"}, "test_case": {"identifier": "testGetPrivate", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testGetPrivate() {\n        TypeReflector<TestPrivateGetter> underTest = new TypeReflector<>(TestPrivateGetter.class);\n        TestPrivateGetter instance = new TestPrivateGetter();\n        underTest.set(instance, \"value\", 1);\n    }", "signature": "void testGetPrivate()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testGetPrivate()", "class_method_signature": "TypeReflectorTest.testGetPrivate()", "testcase": true, "constructor": false, "invocations": ["set"]}, "focal_class": {"identifier": "TypeReflector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JavaType javaType;", "modifier": "private final", "type": "JavaType", "declarator": "javaType", "var_name": "javaType"}, {"original_string": "private final Map<String, PropertyDescriptor> propertyDescriptorIndex;", "modifier": "private final", "type": "Map<String, PropertyDescriptor>", "declarator": "propertyDescriptorIndex", "var_name": "propertyDescriptorIndex"}, {"original_string": "private final List<PropertyDescriptor> propertyDescriptors = new ArrayList<>();", "modifier": "private final", "type": "List<PropertyDescriptor>", "declarator": "propertyDescriptors = new ArrayList<>()", "var_name": "propertyDescriptors"}, {"original_string": "private final Map<String, BiConsumer<T, Object>> setters = new HashMap<>();", "modifier": "private final", "type": "Map<String, BiConsumer<T, Object>>", "declarator": "setters = new HashMap<>()", "var_name": "setters"}, {"original_string": "private final Map<String, Function<T, Object>> getters = new HashMap<>();", "modifier": "private final", "type": "Map<String, Function<T, Object>>", "declarator": "getters = new HashMap<>()", "var_name": "getters"}], "methods": [{"identifier": "TypeReflector", "parameters": "(Class<T> clazz)", "modifiers": "public", "return": "", "signature": " TypeReflector(Class<T> clazz)", "full_signature": "public  TypeReflector(Class<T> clazz)", "class_method_signature": "TypeReflector.TypeReflector(Class<T> clazz)", "testcase": false, "constructor": true}, {"identifier": "TypeReflector", "parameters": "(JavaType javaType)", "modifiers": "public", "return": "", "signature": " TypeReflector(JavaType javaType)", "full_signature": "public  TypeReflector(JavaType javaType)", "class_method_signature": "TypeReflector.TypeReflector(JavaType javaType)", "testcase": false, "constructor": true}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "TypeReflector.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TypeReflector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getJavaType", "parameters": "()", "modifiers": "public", "return": "JavaType", "signature": "JavaType getJavaType()", "full_signature": "public JavaType getJavaType()", "class_method_signature": "TypeReflector.getJavaType()", "testcase": false, "constructor": false}, {"identifier": "getTypeClass", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Class<T>", "signature": "Class<T> getTypeClass()", "full_signature": "@SuppressWarnings(\"unchecked\") public Class<T> getTypeClass()", "class_method_signature": "TypeReflector.getTypeClass()", "testcase": false, "constructor": false}, {"identifier": "makeGetter", "parameters": "(PropertyDescriptor descriptor)", "modifiers": "private", "return": "Function<T, Object>", "signature": "Function<T, Object> makeGetter(PropertyDescriptor descriptor)", "full_signature": "private Function<T, Object> makeGetter(PropertyDescriptor descriptor)", "class_method_signature": "TypeReflector.makeGetter(PropertyDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "makeSetter", "parameters": "(PropertyDescriptor descriptor)", "modifiers": "private", "return": "BiConsumer<T, Object>", "signature": "BiConsumer<T, Object> makeSetter(PropertyDescriptor descriptor)", "full_signature": "private BiConsumer<T, Object> makeSetter(PropertyDescriptor descriptor)", "class_method_signature": "TypeReflector.makeSetter(PropertyDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "instantiate", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T instantiate()", "full_signature": "public T instantiate()", "class_method_signature": "TypeReflector.instantiate()", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptors", "parameters": "()", "modifiers": "public", "return": "List<PropertyDescriptor>", "signature": "List<PropertyDescriptor> getPropertyDescriptors()", "full_signature": "public List<PropertyDescriptor> getPropertyDescriptors()", "class_method_signature": "TypeReflector.getPropertyDescriptors()", "testcase": false, "constructor": false}, {"identifier": "getPropertyDescriptorIndex", "parameters": "()", "modifiers": "public", "return": "Map<String, PropertyDescriptor>", "signature": "Map<String, PropertyDescriptor> getPropertyDescriptorIndex()", "full_signature": "public Map<String, PropertyDescriptor> getPropertyDescriptorIndex()", "class_method_signature": "TypeReflector.getPropertyDescriptorIndex()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(T bean, String name)", "modifiers": "public", "return": "Object", "signature": "Object get(T bean, String name)", "full_signature": "public Object get(T bean, String name)", "class_method_signature": "TypeReflector.get(T bean, String name)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(T bean, String name, Object value)", "modifiers": "public", "return": "void", "signature": "void set(T bean, String name, Object value)", "full_signature": "public void set(T bean, String name, Object value)", "class_method_signature": "TypeReflector.set(T bean, String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(T bean, String name)", "modifiers": "private", "return": "void", "signature": "void validate(T bean, String name)", "full_signature": "private void validate(T bean, String name)", "class_method_signature": "TypeReflector.validate(T bean, String name)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(Class<A> annotationClass)", "modifiers": "public", "return": "A", "signature": "A getAnnotation(Class<A> annotationClass)", "full_signature": "public A getAnnotation(Class<A> annotationClass)", "class_method_signature": "TypeReflector.getAnnotation(Class<A> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(PropertyDescriptor propertyDescriptor, Class<A> annotationClass)", "modifiers": "public", "return": "A", "signature": "A getAnnotation(PropertyDescriptor propertyDescriptor, Class<A> annotationClass)", "full_signature": "public A getAnnotation(PropertyDescriptor propertyDescriptor, Class<A> annotationClass)", "class_method_signature": "TypeReflector.getAnnotation(PropertyDescriptor propertyDescriptor, Class<A> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getAnnotation", "parameters": "(String propertyName, Class<A> annotationClass)", "modifiers": "public", "return": "A", "signature": "A getAnnotation(String propertyName, Class<A> annotationClass)", "full_signature": "public A getAnnotation(String propertyName, Class<A> annotationClass)", "class_method_signature": "TypeReflector.getAnnotation(String propertyName, Class<A> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "findField", "parameters": "(String propertyName)", "modifiers": "private", "return": "Field", "signature": "Field findField(String propertyName)", "full_signature": "private Field findField(String propertyName)", "class_method_signature": "TypeReflector.findField(String propertyName)", "testcase": false, "constructor": false}, {"identifier": "reifyPropertyType", "parameters": "(String property)", "modifiers": "public", "return": "Class", "signature": "Class reifyPropertyType(String property)", "full_signature": "public Class reifyPropertyType(String property)", "class_method_signature": "TypeReflector.reifyPropertyType(String property)", "testcase": false, "constructor": false}, {"identifier": "reifyPropertyType", "parameters": "(PropertyDescriptor property)", "modifiers": "public", "return": "Class", "signature": "Class reifyPropertyType(PropertyDescriptor property)", "full_signature": "public Class reifyPropertyType(PropertyDescriptor property)", "class_method_signature": "TypeReflector.reifyPropertyType(PropertyDescriptor property)", "testcase": false, "constructor": false}], "file": "ask-sdk-interaction-model-mapper/src/main/java/com/amazon/ask/interaction/TypeReflector.java"}, "focal_method": {"identifier": "set", "parameters": "(T bean, String name, Object value)", "modifiers": "public", "return": "void", "body": "public void set(T bean, String name, Object value) {\n        validate(bean, name);\n        BiConsumer<T, Object> setter = setters.get(name);\n        if (setter == null) {\n            throw new IllegalArgumentException(\"No setter specified for property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");\n        }\n        setter.accept(bean, value);\n    }", "signature": "void set(T bean, String name, Object value)", "full_signature": "public void set(T bean, String name, Object value)", "class_method_signature": "TypeReflector.set(T bean, String name, Object value)", "testcase": false, "constructor": false, "invocations": ["validate", "get", "getClass", "accept"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}