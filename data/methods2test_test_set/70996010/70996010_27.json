{"test_class": {"identifier": "SingleWriterMultipleReaderFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SingleWriterMultipleReaderFile reader;", "modifier": "private", "type": "SingleWriterMultipleReaderFile", "declarator": "reader", "var_name": "reader"}, {"original_string": "private File activeFile;", "modifier": "private", "type": "File", "declarator": "activeFile", "var_name": "activeFile"}, {"original_string": "private File workFile;", "modifier": "private", "type": "File", "declarator": "workFile", "var_name": "workFile"}, {"original_string": "private FileOutputStream fos;", "modifier": "private", "type": "FileOutputStream", "declarator": "fos", "var_name": "fos"}], "file": "app/src/test/java/org/jak_linux/dns66/SingleWriterMultipleReaderFileTest.java"}, "test_case": {"identifier": "testOpenRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOpenRead() throws Exception {\n        when(reader.openRead()).thenCallRealMethod();\n\n\n        System.err.println(\"Foo \" + reader);\n    }", "signature": "void testOpenRead()", "full_signature": "@Test public void testOpenRead()", "class_method_signature": "SingleWriterMultipleReaderFileTest.testOpenRead()", "testcase": true, "constructor": false, "invocations": ["thenCallRealMethod", "when", "openRead", "println"]}, "focal_class": {"identifier": "SingleWriterMultipleReaderFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "File activeFile;", "modifier": "", "type": "File", "declarator": "activeFile", "var_name": "activeFile"}, {"original_string": "File workFile;", "modifier": "", "type": "File", "declarator": "workFile", "var_name": "workFile"}], "methods": [{"identifier": "SingleWriterMultipleReaderFile", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " SingleWriterMultipleReaderFile(File file)", "full_signature": "public  SingleWriterMultipleReaderFile(File file)", "class_method_signature": "SingleWriterMultipleReaderFile.SingleWriterMultipleReaderFile(File file)", "testcase": false, "constructor": true}, {"identifier": "openRead", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream openRead()", "full_signature": "public InputStream openRead()", "class_method_signature": "SingleWriterMultipleReaderFile.openRead()", "testcase": false, "constructor": false}, {"identifier": "startWrite", "parameters": "()", "modifiers": "public", "return": "FileOutputStream", "signature": "FileOutputStream startWrite()", "full_signature": "public FileOutputStream startWrite()", "class_method_signature": "SingleWriterMultipleReaderFile.startWrite()", "testcase": false, "constructor": false}, {"identifier": "finishWrite", "parameters": "(FileOutputStream stream)", "modifiers": "public", "return": "void", "signature": "void finishWrite(FileOutputStream stream)", "full_signature": "public void finishWrite(FileOutputStream stream)", "class_method_signature": "SingleWriterMultipleReaderFile.finishWrite(FileOutputStream stream)", "testcase": false, "constructor": false}, {"identifier": "failWrite", "parameters": "(FileOutputStream stream)", "modifiers": "public", "return": "void", "signature": "void failWrite(FileOutputStream stream)", "full_signature": "public void failWrite(FileOutputStream stream)", "class_method_signature": "SingleWriterMultipleReaderFile.failWrite(FileOutputStream stream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/SingleWriterMultipleReaderFile.java"}, "focal_method": {"identifier": "openRead", "parameters": "()", "modifiers": "public", "return": "InputStream", "body": "public InputStream openRead() throws FileNotFoundException {\n        return new FileInputStream(activeFile);\n    }", "signature": "InputStream openRead()", "full_signature": "public InputStream openRead()", "class_method_signature": "SingleWriterMultipleReaderFile.openRead()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}