{"test_class": {"identifier": "MimeTypeHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/apache/abdera/util/MimeTypeHelperTest.java"}, "test_case": {"identifier": "testGetCharset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCharset() {\n        String charsetIso = MimeTypeHelper.getCharset(\"text/html; charset=utf-8\");\n        assertEquals(\"utf-8\", charsetIso);\n\n        String charsetEmpty = MimeTypeHelper.getCharset(\"text/plain\");\n        assertNull(charsetEmpty);\n    }", "signature": "void testGetCharset()", "full_signature": "@Test public void testGetCharset()", "class_method_signature": "MimeTypeHelperTest.testGetCharset()", "testcase": true, "constructor": false, "invocations": ["getCharset", "assertEquals", "getCharset", "assertNull"]}, "focal_class": {"identifier": "MimeTypeHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final MimeType WILDCARD = createWildcard();", "modifier": "private static final", "type": "MimeType", "declarator": "WILDCARD = createWildcard()", "var_name": "WILDCARD"}], "methods": [{"identifier": "getCharset", "parameters": "(String mediatype)", "modifiers": "public static", "return": "String", "signature": "String getCharset(String mediatype)", "full_signature": "public static String getCharset(String mediatype)", "class_method_signature": "MimeTypeHelper.getCharset(String mediatype)", "testcase": false, "constructor": false}, {"identifier": "createWildcard", "parameters": "()", "modifiers": "private static", "return": "MimeType", "signature": "MimeType createWildcard()", "full_signature": "private static MimeType createWildcard()", "class_method_signature": "MimeTypeHelper.createWildcard()", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(String a, String b)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatch(String a, String b)", "full_signature": "public static boolean isMatch(String a, String b)", "class_method_signature": "MimeTypeHelper.isMatch(String a, String b)", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(MimeType a, MimeType b)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMatch(MimeType a, MimeType b)", "full_signature": "public static boolean isMatch(MimeType a, MimeType b)", "class_method_signature": "MimeTypeHelper.isMatch(MimeType a, MimeType b)", "testcase": false, "constructor": false}, {"identifier": "isMatch", "parameters": "(MimeType a, MimeType b, boolean includeparams)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "boolean", "signature": "boolean isMatch(MimeType a, MimeType b, boolean includeparams)", "full_signature": "@SuppressWarnings(\"unchecked\") public static boolean isMatch(MimeType a, MimeType b, boolean includeparams)", "class_method_signature": "MimeTypeHelper.isMatch(MimeType a, MimeType b, boolean includeparams)", "testcase": false, "constructor": false}, {"identifier": "isMatchType", "parameters": "(String actual, String expected)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMatchType(String actual, String expected)", "full_signature": "private static boolean isMatchType(String actual, String expected)", "class_method_signature": "MimeTypeHelper.isMatchType(String actual, String expected)", "testcase": false, "constructor": false}, {"identifier": "isApp", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isApp(String a)", "full_signature": "public static boolean isApp(String a)", "class_method_signature": "MimeTypeHelper.isApp(String a)", "testcase": false, "constructor": false}, {"identifier": "isAtom", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAtom(String a)", "full_signature": "public static boolean isAtom(String a)", "class_method_signature": "MimeTypeHelper.isAtom(String a)", "testcase": false, "constructor": false}, {"identifier": "isEntry", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEntry(String a)", "full_signature": "public static boolean isEntry(String a)", "class_method_signature": "MimeTypeHelper.isEntry(String a)", "testcase": false, "constructor": false}, {"identifier": "isFeed", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFeed(String a)", "full_signature": "public static boolean isFeed(String a)", "class_method_signature": "MimeTypeHelper.isFeed(String a)", "testcase": false, "constructor": false}, {"identifier": "isXml", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isXml(String a)", "full_signature": "public static boolean isXml(String a)", "class_method_signature": "MimeTypeHelper.isXml(String a)", "testcase": false, "constructor": false}, {"identifier": "isText", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isText(String a)", "full_signature": "public static boolean isText(String a)", "class_method_signature": "MimeTypeHelper.isText(String a)", "testcase": false, "constructor": false}, {"identifier": "isMimeType", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMimeType(String a)", "full_signature": "public static boolean isMimeType(String a)", "class_method_signature": "MimeTypeHelper.isMimeType(String a)", "testcase": false, "constructor": false}, {"identifier": "getMimeType", "parameters": "(T base)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "String", "signature": "String getMimeType(T base)", "full_signature": "@SuppressWarnings(\"unchecked\") public static String getMimeType(T base)", "class_method_signature": "MimeTypeHelper.getMimeType(T base)", "testcase": false, "constructor": false}, {"identifier": "condense", "parameters": "(String... types)", "modifiers": "public static", "return": "String[]", "signature": "String[] condense(String... types)", "full_signature": "public static String[] condense(String... types)", "class_method_signature": "MimeTypeHelper.condense(String... types)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String t1, List<String> t, boolean self)", "modifiers": "private static", "return": "boolean", "signature": "boolean contains(String t1, List<String> t, boolean self)", "full_signature": "private static boolean contains(String t1, List<String> t, boolean self)", "class_method_signature": "MimeTypeHelper.contains(String t1, List<String> t, boolean self)", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "()", "modifiers": "public static", "return": "Comparator<String>", "signature": "Comparator<String> getComparator()", "full_signature": "public static Comparator<String> getComparator()", "class_method_signature": "MimeTypeHelper.getComparator()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(MimeType mt1, MimeType mt2)", "modifiers": "public static", "return": "int", "signature": "int compare(MimeType mt1, MimeType mt2)", "full_signature": "public static int compare(MimeType mt1, MimeType mt2)", "class_method_signature": "MimeTypeHelper.compare(MimeType mt1, MimeType mt2)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(String t1, String t2)", "modifiers": "public static", "return": "int", "signature": "int compare(String t1, String t2)", "full_signature": "public static int compare(String t1, String t2)", "class_method_signature": "MimeTypeHelper.compare(String t1, String t2)", "testcase": false, "constructor": false}, {"identifier": "isMultipart", "parameters": "(String a)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMultipart(String a)", "full_signature": "public static boolean isMultipart(String a)", "class_method_signature": "MimeTypeHelper.isMultipart(String a)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/apache/abdera/util/MimeTypeHelper.java"}, "focal_method": {"identifier": "getCharset", "parameters": "(String mediatype)", "modifiers": "public static", "return": "String", "body": "public static String getCharset(String mediatype) {\n        try {\n            MimeType mt = new MimeType(mediatype);\n            return mt.getParameter(\"charset\");\n        } catch (Exception e) {\n            return null;\n        }\n    }", "signature": "String getCharset(String mediatype)", "full_signature": "public static String getCharset(String mediatype)", "class_method_signature": "MimeTypeHelper.getCharset(String mediatype)", "testcase": false, "constructor": false, "invocations": ["getParameter"]}, "repository": {"repo_id": 206482, "url": "https://github.com/apache/abdera", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 15, "size": 12255, "license": "licensed"}}