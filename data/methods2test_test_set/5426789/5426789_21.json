{"test_class": {"identifier": "CrescentIndexerExecutorTest", "superclass": "extends CrescentTestCaseUtil", "interfaces": "", "fields": [], "file": "crescent_core_web/src/test/java/com/tistory/devyongsik/crescent/index/indexer/CrescentIndexerExecutorTest.java"}, "test_case": {"identifier": "deleteDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void deleteDocument() throws CorruptIndexException, IOException {\n\t\t\n\t\tCrescentCollections crescentCollections = collectionHandler.getCrescentCollections();\n\t\tMap<String, CrescentCollection> collections = crescentCollections.getCrescentCollectionsMap();\n\n\t\tCrescentCollection sampleCollection = collections.get(\"sample\");\n\n\t\tHandler handler = new JsonDataHandler();\n\t\tIndexingRequestForm indexingRequestForm = handler.handledData(FormattedTextBuilder.getDeleteDocBulkJsonForm());\n\t\t\n\t\tString returnMessage = executor.indexing(sampleCollection, indexingRequestForm);\n\t\t\n\t\tAssert.assertEquals(\"creuser:test\uc5d0 \ub300\ud55c delete\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\", returnMessage);\n\t}", "signature": "void deleteDocument()", "full_signature": "@Test public void deleteDocument()", "class_method_signature": "CrescentIndexerExecutorTest.deleteDocument()", "testcase": true, "constructor": false, "invocations": ["getCrescentCollections", "getCrescentCollectionsMap", "get", "handledData", "getDeleteDocBulkJsonForm", "indexing", "assertEquals"]}, "focal_class": {"identifier": "CrescentIndexerExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(CrescentIndexerExecutor.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CrescentIndexerExecutor.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\t@Qualifier(\"crescentIndexer\")\n\tprivate CrescentIndexer crescentIndexer;", "modifier": "@Autowired\n\t@Qualifier(\"crescentIndexer\")\n\tprivate", "type": "CrescentIndexer", "declarator": "crescentIndexer", "var_name": "crescentIndexer"}], "methods": [{"identifier": "indexing", "parameters": "(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "modifiers": "public", "return": "String", "signature": "String indexing(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "full_signature": "public String indexing(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "class_method_signature": "CrescentIndexerExecutor.indexing(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "testcase": false, "constructor": false}], "file": "crescent_core_web/src/main/java/com/tistory/devyongsik/crescent/index/indexer/CrescentIndexerExecutor.java"}, "focal_method": {"identifier": "indexing", "parameters": "(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "modifiers": "public", "return": "String", "body": "public String indexing(CrescentCollection collection, IndexingRequestForm indexingRequestForm) {\n\t\t\n\t\tlogger.info(\"indexingRequestForm : {}\", indexingRequestForm);\n\t\t\n\t\tIndexingType indexingType = IndexingType.valueOf(indexingRequestForm.getIndexingType().toUpperCase());\n\t\tIndexingCommand indexingCommand = IndexingCommand.valueOf(indexingRequestForm.getCommand().toUpperCase());\n\t\tString query = indexingRequestForm.getQuery();\n\t\t\n\t\tlogger.info(\"Indexing type : {} , Indexing command : {} \", indexingType, indexingCommand);\n\t\tlogger.info(\"Query : {}\", query);\n\t\t\n\t\tString resultMessage = \"Nothing To Execute...\";\n\t\t\n\t\t//CrescentIndexer crescentIndexer = new CrescentIndexer(collection.getName());\n\t\t\n\t\tif(IndexingCommand.ADD == indexingCommand) {\n\t\t\tList<Document> documentList = LuceneDocumentBuilder.buildDocumentList(indexingRequestForm.getDocumentList(), collection.getCrescentFieldByName());\n\t\t\tcrescentIndexer.addDocument(documentList, collection.getName());\n\t\t\n\t\t\tresultMessage = documentList.size() + \"\uac74\uc758 \uc0c9\uc778\uc774 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\";\n\t\t\t\n\t\t} else if (IndexingCommand.UPDATE == indexingCommand) {\n\t\t\t\n\t\t\tList<Document> documentList = LuceneDocumentBuilder.buildDocumentList(indexingRequestForm.getDocumentList(), collection.getCrescentFieldByName());\n\t\t\t\n\t\t\tif(documentList.size() == 0) {\n\t\t\t\tlogger.error(\"\uc5c5\ub370\uc774\ud2b8 \ud560 document\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\");\n\t\t\t\tthrow new IllegalStateException(\"\uc5c5\ub370\uc774\ud2b8 \ud560 document\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\");\n\t\t\t}\n\t\t\t\n\t\t\t//Document updateDoc = documentList.get(0);\n\t\t\t\n\t\t\tString[] splitQuery = query.split(\":\");\n\t\t\tif(splitQuery.length != 2) {\n\t\t\t\tlogger.error(\"Update \ub300\uc0c1 \ubb38\uc11c\ub97c \ucc3e\uc744 Query\uc2dd\uc774 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4. [{}]\", query);\n\t\t\t\tthrow new IllegalStateException(\"Update \ub300\uc0c1 \ubb38\uc11c\ub97c \ucc3e\uc744 Query\uc2dd\uc774 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4. [\"+query+\"]\");\n\t\t\t}\n\t\t\tString field = query.split(\":\")[0];\n\t\t\tString value = query.split(\":\")[1];\n\t\t\t\n\t\t\tlogger.info(\"field : {}, value : {}\", field, value);\n\t\t\t\n\t\t\tTerm updateTerm = new Term(field, value);\n\t\t\t\n\t\t\tcrescentIndexer.updateDocuments(updateTerm, documentList, collection.getName());\n\t\t\t\n\t\t\tresultMessage = updateTerm.toString() + \"\uc5d0 \ub300\ud55c update\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\";\n\t\t\t\n\t\t} else if (IndexingCommand.UPDATE_BY_FIELD_VALUE == indexingCommand) {\n\t\t\t\n\t\t\tList<Document> documentList = LuceneDocumentBuilder.buildDocumentList(indexingRequestForm.getDocumentList(), collection.getCrescentFieldByName());\n\t\t\t\n\t\t\tif(documentList.size() == 0) {\n\t\t\t\tlogger.error(\"\uc5c5\ub370\uc774\ud2b8 \ud560 document\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\");\n\t\t\t\tthrow new IllegalStateException(\"\uc5c5\ub370\uc774\ud2b8 \ud560 document\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\");\n\t\t\t}\n\t\t\t\n\t\t\tString field = query.split(\":\")[0];\n\t\t\tString value = query.split(\":\")[1];\n\t\t\t\n\t\t\tlogger.info(\"field : {}, value : {}\", field, value);\n\t\t\t\n\t\t\tfor(Document document : documentList) {\n\t\t\t\tvalue = document.get(field);\n\t\t\t\t\n\t\t\t\tif(value == null || value.length() == 0) {\n\t\t\t\t\tlogger.error(\"Update \ub300\uc0c1 \ubb38\uc11c\ub97c \ucc3e\uc744 field\uc9c0\uc774 \uc798\ubabb\ub418\uc5c8\uac70\ub098 field : [{}], value\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. value : [{}]\", field, value);\n\t\t\t\t\tthrow new IllegalStateException(\"pdate \ub300\uc0c1 \ubb38\uc11c\ub97c \ucc3e\uc744 field\uc9c0\uc774 \uc798\ubabb\ub418\uc5c8\uac70\ub098 field : [\"+field+\"], value\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. value : [\"+value+\"]\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tTerm updateTerm = new Term(field, value);\n\t\t\t\tcrescentIndexer.updateDocument(updateTerm, document, collection.getName());\n\t\t\t}\n\t\t\t\n\t\t\tresultMessage = query + \"\uc5d0 \ub300\ud55c update\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\";\n\t\t\t\n\t\t} else if (IndexingCommand.DELETE == indexingCommand) {\n\t\t\t\n\t\t\tString[] splitQuery = query.split(\":\");\n\t\t\tif(splitQuery.length != 2) {\n\t\t\t\tlogger.error(\"Delete \ub300\uc0c1 \ubb38\uc11c\ub97c \ucc3e\uc744 Query\uc2dd\uc774 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4. [{}]\", query);\n\t\t\t\tthrow new IllegalStateException(\"Delete \ub300\uc0c1 \ubb38\uc11c\ub97c \ucc3e\uc744 Query\uc2dd\uc774 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4. [\"+query+\"]\");\n\t\t\t}\n\t\t\tString field = query.split(\":\")[0];\n\t\t\tString value = query.split(\":\")[1];\n\t\t\t\n\t\t\tlogger.info(\"field : {}, value : {}\", field, value);\n\t\t\t\n\t\t\tTerm deleteTerm = new Term(field, value);\n\t\t\tQuery deleteTermQuery = new TermQuery(deleteTerm);\n\t\t\t\n\t\t\tcrescentIndexer.deleteDocument(deleteTermQuery, collection.getName());\n\t\t\t\n\t\t\tresultMessage = deleteTerm.toString() + \"\uc5d0 \ub300\ud55c delete\uac00 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\";\n\t\t}\n\t\t\n\t\tif(IndexingType.BULK == indexingType) {\n\t\t\tcrescentIndexer.commit(collection.getName());\n\t\t}\n\t\t\n\t\treturn resultMessage;\n\t}", "signature": "String indexing(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "full_signature": "public String indexing(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "class_method_signature": "CrescentIndexerExecutor.indexing(CrescentCollection collection, IndexingRequestForm indexingRequestForm)", "testcase": false, "constructor": false, "invocations": ["info", "valueOf", "toUpperCase", "getIndexingType", "valueOf", "toUpperCase", "getCommand", "getQuery", "info", "info", "buildDocumentList", "getDocumentList", "getCrescentFieldByName", "addDocument", "getName", "size", "buildDocumentList", "getDocumentList", "getCrescentFieldByName", "size", "error", "split", "error", "split", "split", "info", "updateDocuments", "getName", "toString", "buildDocumentList", "getDocumentList", "getCrescentFieldByName", "size", "error", "split", "split", "info", "get", "length", "error", "updateDocument", "getName", "split", "error", "split", "split", "info", "deleteDocument", "getName", "toString", "commit", "getName"]}, "repository": {"repo_id": 5426789, "url": "https://github.com/need4spd/crescent", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 15, "size": 50982, "license": "licensed"}}