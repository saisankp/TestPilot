{"test_class": {"identifier": "TableInfoTest", "superclass": "", "interfaces": "", "fields": [], "file": "mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/config/po/TableInfoTest.java"}, "test_case": {"identifier": "getFileNameTest", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getFileNameTest() {\n        TableInfo tableInfo = new TableInfo();\n        Assertions.assertEquals(\"UserEntity\", tableInfo.getFileName(\"User\", \"\", () -> \"UserEntity\"));\n        Assertions.assertEquals(\"UserEntity\", tableInfo.getFileName(\"User\", null, () -> \"UserEntity\"));\n        Assertions.assertEquals(\"UserTable\", tableInfo.getFileName(\"User\", \"%sTable\", () -> \"UserEntity\"));\n        Assertions.assertEquals(\"UserTable\", tableInfo.getFileName(\"User\", \"UserTable\", () -> \"UserEntity\"));\n    }", "signature": "void getFileNameTest()", "full_signature": "@Test void getFileNameTest()", "class_method_signature": "TableInfoTest.getFileNameTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getFileName", "assertEquals", "getFileName", "assertEquals", "getFileName", "assertEquals", "getFileName"]}, "focal_class": {"identifier": "TableInfo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<String> importPackages = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "importPackages = new HashSet<>()", "var_name": "importPackages"}, {"original_string": "private boolean convert;", "modifier": "private", "type": "boolean", "declarator": "convert", "var_name": "convert"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String comment;", "modifier": "private", "type": "String", "declarator": "comment", "var_name": "comment"}, {"original_string": "private String entityName;", "modifier": "private", "type": "String", "declarator": "entityName", "var_name": "entityName"}, {"original_string": "private String mapperName;", "modifier": "private", "type": "String", "declarator": "mapperName", "var_name": "mapperName"}, {"original_string": "private String xmlName;", "modifier": "private", "type": "String", "declarator": "xmlName", "var_name": "xmlName"}, {"original_string": "private String serviceName;", "modifier": "private", "type": "String", "declarator": "serviceName", "var_name": "serviceName"}, {"original_string": "private String serviceImplName;", "modifier": "private", "type": "String", "declarator": "serviceImplName", "var_name": "serviceImplName"}, {"original_string": "private String controllerName;", "modifier": "private", "type": "String", "declarator": "controllerName", "var_name": "controllerName"}, {"original_string": "private final List<TableField> fields = new ArrayList<>();", "modifier": "private final", "type": "List<TableField>", "declarator": "fields = new ArrayList<>()", "var_name": "fields"}, {"original_string": "private boolean havePrimaryKey;", "modifier": "private", "type": "boolean", "declarator": "havePrimaryKey", "var_name": "havePrimaryKey"}, {"original_string": "private final List<TableField> commonFields = new ArrayList<>();", "modifier": "private final", "type": "List<TableField>", "declarator": "commonFields = new ArrayList<>()", "var_name": "commonFields"}, {"original_string": "private String fieldNames;", "modifier": "private", "type": "String", "declarator": "fieldNames", "var_name": "fieldNames"}], "methods": [{"identifier": "setConvert", "parameters": "(boolean convert)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setConvert(boolean convert)", "full_signature": "@Deprecated public TableInfo setConvert(boolean convert)", "class_method_signature": "TableInfo.setConvert(boolean convert)", "testcase": false, "constructor": false}, {"identifier": "setConvert", "parameters": "(StrategyConfig strategyConfig)", "modifiers": "protected", "return": "TableInfo", "signature": "TableInfo setConvert(StrategyConfig strategyConfig)", "full_signature": "protected TableInfo setConvert(StrategyConfig strategyConfig)", "class_method_signature": "TableInfo.setConvert(StrategyConfig strategyConfig)", "testcase": false, "constructor": false}, {"identifier": "getEntityPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEntityPath()", "full_signature": "public String getEntityPath()", "class_method_signature": "TableInfo.getEntityPath()", "testcase": false, "constructor": false}, {"identifier": "setEntityName", "parameters": "(String entityName)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setEntityName(String entityName)", "full_signature": "@Deprecated public TableInfo setEntityName(String entityName)", "class_method_signature": "TableInfo.setEntityName(String entityName)", "testcase": false, "constructor": false}, {"identifier": "setEntityName", "parameters": "(StrategyConfig strategyConfig, String entityName)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo setEntityName(StrategyConfig strategyConfig, String entityName)", "full_signature": "public TableInfo setEntityName(StrategyConfig strategyConfig, String entityName)", "class_method_signature": "TableInfo.setEntityName(StrategyConfig strategyConfig, String entityName)", "testcase": false, "constructor": false}, {"identifier": "setFields", "parameters": "(List<TableField> fields)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setFields(List<TableField> fields)", "full_signature": "@Deprecated public TableInfo setFields(List<TableField> fields)", "class_method_signature": "TableInfo.setFields(List<TableField> fields)", "testcase": false, "constructor": false}, {"identifier": "addFields", "parameters": "(List<TableField> fields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addFields(List<TableField> fields)", "full_signature": "public TableInfo addFields(List<TableField> fields)", "class_method_signature": "TableInfo.addFields(List<TableField> fields)", "testcase": false, "constructor": false}, {"identifier": "addFields", "parameters": "(TableField... fields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addFields(TableField... fields)", "full_signature": "public TableInfo addFields(TableField... fields)", "class_method_signature": "TableInfo.addFields(TableField... fields)", "testcase": false, "constructor": false}, {"identifier": "setImportPackages", "parameters": "(String pkg)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setImportPackages(String pkg)", "full_signature": "@Deprecated public TableInfo setImportPackages(String pkg)", "class_method_signature": "TableInfo.setImportPackages(String pkg)", "testcase": false, "constructor": false}, {"identifier": "addImportPackages", "parameters": "(String... pkgs)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addImportPackages(String... pkgs)", "full_signature": "public TableInfo addImportPackages(String... pkgs)", "class_method_signature": "TableInfo.addImportPackages(String... pkgs)", "testcase": false, "constructor": false}, {"identifier": "isLogicDelete", "parameters": "(String logicDeletePropertyName)", "modifiers": "public", "return": "boolean", "signature": "boolean isLogicDelete(String logicDeletePropertyName)", "full_signature": "public boolean isLogicDelete(String logicDeletePropertyName)", "class_method_signature": "TableInfo.isLogicDelete(String logicDeletePropertyName)", "testcase": false, "constructor": false}, {"identifier": "setFieldNames", "parameters": "(String fieldNames)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setFieldNames(String fieldNames)", "full_signature": "@Deprecated public TableInfo setFieldNames(String fieldNames)", "class_method_signature": "TableInfo.setFieldNames(String fieldNames)", "testcase": false, "constructor": false}, {"identifier": "getFieldNames", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldNames()", "full_signature": "public String getFieldNames()", "class_method_signature": "TableInfo.getFieldNames()", "testcase": false, "constructor": false}, {"identifier": "setCommonFields", "parameters": "(List<TableField> commonFields)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setCommonFields(List<TableField> commonFields)", "full_signature": "@Deprecated public TableInfo setCommonFields(List<TableField> commonFields)", "class_method_signature": "TableInfo.setCommonFields(List<TableField> commonFields)", "testcase": false, "constructor": false}, {"identifier": "addCommonFields", "parameters": "(TableField... commonFields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addCommonFields(TableField... commonFields)", "full_signature": "public TableInfo addCommonFields(TableField... commonFields)", "class_method_signature": "TableInfo.addCommonFields(TableField... commonFields)", "testcase": false, "constructor": false}, {"identifier": "addCommonFields", "parameters": "(List<TableField> commonFields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addCommonFields(List<TableField> commonFields)", "full_signature": "public TableInfo addCommonFields(List<TableField> commonFields)", "class_method_signature": "TableInfo.addCommonFields(List<TableField> commonFields)", "testcase": false, "constructor": false}, {"identifier": "importPackage", "parameters": "(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "modifiers": "public", "return": "void", "signature": "void importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "full_signature": "public void importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "class_method_signature": "TableInfo.importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "testcase": false, "constructor": false}, {"identifier": "processTable", "parameters": "(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "modifiers": "public", "return": "void", "signature": "void processTable(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "full_signature": "public void processTable(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "class_method_signature": "TableInfo.processTable(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(String entityName, String value, Supplier<String> defaultValue)", "modifiers": "public", "return": "String", "signature": "String getFileName(String entityName, String value, Supplier<String> defaultValue)", "full_signature": "public String getFileName(String entityName, String value, Supplier<String> defaultValue)", "class_method_signature": "TableInfo.getFileName(String entityName, String value, Supplier<String> defaultValue)", "testcase": false, "constructor": false}], "file": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java"}, "focal_method": {"identifier": "getFileName", "parameters": "(String entityName, String value, Supplier<String> defaultValue)", "modifiers": "public", "return": "String", "body": "public String getFileName(String entityName, String value, Supplier<String> defaultValue) {\n        return StringUtils.isNotBlank(value) ? String.format(value, entityName) : defaultValue.get();\n    }", "signature": "String getFileName(String entityName, String value, Supplier<String> defaultValue)", "full_signature": "public String getFileName(String entityName, String value, Supplier<String> defaultValue)", "class_method_signature": "TableInfo.getFileName(String entityName, String value, Supplier<String> defaultValue)", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "format", "get"]}, "repository": {"repo_id": 65987043, "url": "https://github.com/baomidou/mybatis-plus", "stars": 7720, "created": "8/18/2016 10:06:53 AM +00:00", "updates": "2020-01-27T08:09:51+00:00", "fork": "False", "license": "licensed"}}