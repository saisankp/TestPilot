{"test_class": {"identifier": "BackgroundThreadPosterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int TEST_TIMEOUT_MS = 1000;", "modifier": "private static final", "type": "int", "declarator": "TEST_TIMEOUT_MS = 1000", "var_name": "TEST_TIMEOUT_MS"}, {"original_string": "@ClassRule\n    public final static Timeout TIMEOUT = Timeout.millis(TEST_TIMEOUT_MS);", "modifier": "@ClassRule\n    public final static", "type": "Timeout", "declarator": "TIMEOUT = Timeout.millis(TEST_TIMEOUT_MS)", "var_name": "TIMEOUT"}, {"original_string": "private BackgroundThreadPoster SUT;", "modifier": "private", "type": "BackgroundThreadPoster", "declarator": "SUT", "var_name": "SUT"}], "file": "threadposter/src/test/java/com/techyourchance/threadposter/BackgroundThreadPosterTest.java"}, "test_case": {"identifier": "execute_multipleRunnablesInterdependent_executionSuccessful", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void execute_multipleRunnablesInterdependent_executionSuccessful() throws Exception {\n        // Arrange\n        final Semaphore semaphore1 = new Semaphore(0);\n        final Semaphore semaphore2 = new Semaphore(0);\n        Runnable runnable1 = new Runnable() {\n            @Override\n            public void run() {\n                semaphore1.acquireUninterruptibly();\n                semaphore2.release();\n            }\n        };\n        Runnable runnable2 = new Runnable() {\n            @Override\n            public void run() {\n                semaphore1.release();\n            }\n        };\n        // Act\n        SUT.post(runnable1);\n        SUT.post(runnable2);\n        // Assert\n        semaphore2.acquireUninterruptibly();\n    }", "signature": "void execute_multipleRunnablesInterdependent_executionSuccessful()", "full_signature": "@Test public void execute_multipleRunnablesInterdependent_executionSuccessful()", "class_method_signature": "BackgroundThreadPosterTest.execute_multipleRunnablesInterdependent_executionSuccessful()", "testcase": true, "constructor": false, "invocations": ["acquireUninterruptibly", "release", "release", "post", "post", "acquireUninterruptibly"]}, "focal_class": {"identifier": "BackgroundThreadPoster", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CORE_THREADS = 3;", "modifier": "private static final", "type": "int", "declarator": "CORE_THREADS = 3", "var_name": "CORE_THREADS"}, {"original_string": "private static final long KEEP_ALIVE_SECONDS = 60L;", "modifier": "private static final", "type": "long", "declarator": "KEEP_ALIVE_SECONDS = 60L", "var_name": "KEEP_ALIVE_SECONDS"}, {"original_string": "private final ThreadPoolExecutor mThreadPoolExecutor;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "mThreadPoolExecutor", "var_name": "mThreadPoolExecutor"}], "methods": [{"identifier": "BackgroundThreadPoster", "parameters": "()", "modifiers": "public", "return": "", "signature": " BackgroundThreadPoster()", "full_signature": "public  BackgroundThreadPoster()", "class_method_signature": "BackgroundThreadPoster.BackgroundThreadPoster()", "testcase": false, "constructor": true}, {"identifier": "post", "parameters": "(Runnable runnable)", "modifiers": "public", "return": "void", "signature": "void post(Runnable runnable)", "full_signature": "public void post(Runnable runnable)", "class_method_signature": "BackgroundThreadPoster.post(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolExecutor", "parameters": "()", "modifiers": "protected final", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor getThreadPoolExecutor()", "full_signature": "protected final ThreadPoolExecutor getThreadPoolExecutor()", "class_method_signature": "BackgroundThreadPoster.getThreadPoolExecutor()", "testcase": false, "constructor": false}, {"identifier": "getThreadFactory", "parameters": "()", "modifiers": "protected final", "return": "ThreadFactory", "signature": "ThreadFactory getThreadFactory()", "full_signature": "protected final ThreadFactory getThreadFactory()", "class_method_signature": "BackgroundThreadPoster.getThreadFactory()", "testcase": false, "constructor": false}, {"identifier": "newThreadPoolExecutor", "parameters": "()", "modifiers": "protected", "return": "ThreadPoolExecutor", "signature": "ThreadPoolExecutor newThreadPoolExecutor()", "full_signature": "protected ThreadPoolExecutor newThreadPoolExecutor()", "class_method_signature": "BackgroundThreadPoster.newThreadPoolExecutor()", "testcase": false, "constructor": false}], "file": "threadposter/src/main/java/com/techyourchance/threadposter/BackgroundThreadPoster.java"}, "focal_method": {"identifier": "post", "parameters": "(Runnable runnable)", "modifiers": "public", "return": "void", "body": "public void post(Runnable runnable) {\n        mThreadPoolExecutor.execute(runnable);\n    }", "signature": "void post(Runnable runnable)", "full_signature": "public void post(Runnable runnable)", "class_method_signature": "BackgroundThreadPoster.post(Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 104691408, "url": "https://github.com/techyourchance/thread-poster", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 74, "size": 189, "license": "licensed"}}