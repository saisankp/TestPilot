{"test_class": {"identifier": "SendHtmlTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SendHtmlTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SendHtmlTest.class)", "var_name": "logger"}, {"original_string": "private Wiser wiser;", "modifier": "private", "type": "Wiser", "declarator": "wiser", "var_name": "wiser"}, {"original_string": "private String emailHost;", "modifier": "private", "type": "String", "declarator": "emailHost", "var_name": "emailHost"}, {"original_string": "private String emailPort;", "modifier": "private", "type": "String", "declarator": "emailPort", "var_name": "emailPort"}, {"original_string": "private static String authUsername = \"cpark\";", "modifier": "private static", "type": "String", "declarator": "authUsername = \"cpark\"", "var_name": "authUsername"}, {"original_string": "private static String authPassword = \"yourbehindwhat?\";", "modifier": "private static", "type": "String", "declarator": "authPassword = \"yourbehindwhat?\"", "var_name": "authPassword"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private int uniqueTestNum = -1;", "modifier": "private", "type": "int", "declarator": "uniqueTestNum = -1", "var_name": "uniqueTestNum"}, {"original_string": "private EmailWorkItemHandler emailWorkItemHandler = new EmailWorkItemHandler();", "modifier": "private", "type": "EmailWorkItemHandler", "declarator": "emailWorkItemHandler = new EmailWorkItemHandler()", "var_name": "emailWorkItemHandler"}], "file": "jbpm-workitems/jbpm-workitems-email/src/test/java/org/jbpm/process/workitem/email/SendHtmlTest.java"}, "test_case": {"identifier": "sendHtmlWithAuthenticationAndAttachments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sendHtmlWithAuthenticationAndAttachments() throws Exception {\n        // Add authentication to Wiser SMTP server\n        wiser.getServer().setAuthenticationHandlerFactory(new TestAuthHandlerFactory());\n\n        // Input\n        String testMethodName = Thread.currentThread().getStackTrace()[1].getMethodName();\n        String toAddress = \"rgivens@kty.us.gov\";\n        String fromAddress = \"whawkins@kty.us.gov\";\n\n        // Setup email\n        WorkItemImpl workItem = createEmailWorkItemWithAttachment(toAddress, fromAddress, testMethodName);\n        Connection connection = new Connection(emailHost, emailPort, authUsername, authPassword);\n\n        // send email\n        Email email = emailWorkItemHandler.createEmail(workItem, connection);\n        SendHtml.sendHtml(email, connection);\n\n        List<WiserMessage> messages = wiser.getMessages();\n        assertEquals(1, messages.size());\n\n        MimeMessage message = messages.get(0).getMimeMessage();\n        assertEquals(workItem.getParameter(\"Subject\"), message.getSubject());\n        assertTrue(Arrays.equals(InternetAddress.parse((String) workItem.getParameter(\"To\")),\n                                 message.getRecipients(RecipientType.TO)));\n\n        assertTrue(message.getContent() instanceof Multipart);\n\n        Multipart multipart = (Multipart) message.getContent();\n        assertEquals(2, multipart.getCount());\n        for (int i = 0; i < multipart.getCount(); i++) {\n            BodyPart bodyPart = multipart.getBodyPart(i);\n            if (!Part.ATTACHMENT.equalsIgnoreCase(bodyPart.getDisposition())) {\n                continue; // dealing with attachments only\n            }\n\n            assertEquals(\"email.png\", bodyPart.getFileName());\n        }\n\n\n    }", "signature": "void sendHtmlWithAuthenticationAndAttachments()", "full_signature": "@Test public void sendHtmlWithAuthenticationAndAttachments()", "class_method_signature": "SendHtmlTest.sendHtmlWithAuthenticationAndAttachments()", "testcase": true, "constructor": false, "invocations": ["setAuthenticationHandlerFactory", "getServer", "getMethodName", "getStackTrace", "currentThread", "createEmailWorkItemWithAttachment", "createEmail", "sendHtml", "getMessages", "assertEquals", "size", "getMimeMessage", "get", "assertEquals", "getParameter", "getSubject", "assertTrue", "equals", "parse", "getParameter", "getRecipients", "assertTrue", "getContent", "getContent", "assertEquals", "getCount", "getCount", "getBodyPart", "equalsIgnoreCase", "getDisposition", "assertEquals", "getFileName"]}, "focal_class": {"identifier": "SendHtml", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MAIL_JNDI_KEY = System.getProperty(\"org.kie.mail.session\",\n                                                                   \"mail/jbpmMailSession\");", "modifier": "private static final", "type": "String", "declarator": "MAIL_JNDI_KEY = System.getProperty(\"org.kie.mail.session\",\n                                                                   \"mail/jbpmMailSession\")", "var_name": "MAIL_JNDI_KEY"}, {"original_string": "private static boolean debug = Boolean.parseBoolean(System.getProperty(\"org.kie.mail.debug\",\n                                                                           \"false\"));", "modifier": "private static", "type": "boolean", "declarator": "debug = Boolean.parseBoolean(System.getProperty(\"org.kie.mail.debug\",\n                                                                           \"false\"))", "var_name": "debug"}], "methods": [{"identifier": "sendHtml", "parameters": "(Email email)", "modifiers": "public static", "return": "void", "signature": "void sendHtml(Email email)", "full_signature": "public static void sendHtml(Email email)", "class_method_signature": "SendHtml.sendHtml(Email email)", "testcase": false, "constructor": false}, {"identifier": "sendHtml", "parameters": "(Email email,\n                                boolean debug)", "modifiers": "public static", "return": "void", "signature": "void sendHtml(Email email,\n                                boolean debug)", "full_signature": "public static void sendHtml(Email email,\n                                boolean debug)", "class_method_signature": "SendHtml.sendHtml(Email email,\n                                boolean debug)", "testcase": false, "constructor": false}, {"identifier": "sendHtml", "parameters": "(Email email,\n                                Connection connection)", "modifiers": "public static", "return": "void", "signature": "void sendHtml(Email email,\n                                Connection connection)", "full_signature": "public static void sendHtml(Email email,\n                                Connection connection)", "class_method_signature": "SendHtml.sendHtml(Email email,\n                                Connection connection)", "testcase": false, "constructor": false}, {"identifier": "sendHtml", "parameters": "(Email email,\n                                Connection connection,\n                                boolean debug)", "modifiers": "public static", "return": "void", "signature": "void sendHtml(Email email,\n                                Connection connection,\n                                boolean debug)", "full_signature": "public static void sendHtml(Email email,\n                                Connection connection,\n                                boolean debug)", "class_method_signature": "SendHtml.sendHtml(Email email,\n                                Connection connection,\n                                boolean debug)", "testcase": false, "constructor": false}, {"identifier": "fillMessage", "parameters": "(Email email,\n                                       Session session)", "modifiers": "private static", "return": "Message", "signature": "Message fillMessage(Email email,\n                                       Session session)", "full_signature": "private static Message fillMessage(Email email,\n                                       Session session)", "class_method_signature": "SendHtml.fillMessage(Email email,\n                                       Session session)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(String body,\n                               Message msg)", "modifiers": "public static", "return": "void", "signature": "void collect(String body,\n                               Message msg)", "full_signature": "public static void collect(String body,\n                               Message msg)", "class_method_signature": "SendHtml.collect(String body,\n                               Message msg)", "testcase": false, "constructor": false}, {"identifier": "getSession", "parameters": "(Connection connection)", "modifiers": "private static", "return": "Session", "signature": "Session getSession(Connection connection)", "full_signature": "private static Session getSession(Connection connection)", "class_method_signature": "SendHtml.getSession(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getAttachemntURL", "parameters": "(String attachment)", "modifiers": "protected static", "return": "URL", "signature": "URL getAttachemntURL(String attachment)", "full_signature": "protected static URL getAttachemntURL(String attachment)", "class_method_signature": "SendHtml.getAttachemntURL(String attachment)", "testcase": false, "constructor": false}], "file": "jbpm-workitems/jbpm-workitems-email/src/main/java/org/jbpm/process/workitem/email/SendHtml.java"}, "focal_method": {"identifier": "sendHtml", "parameters": "(Email email)", "modifiers": "public static", "return": "void", "body": "public static void sendHtml(Email email) {\n        sendHtml(email,\n                 email.getConnection());\n    }", "signature": "void sendHtml(Email email)", "full_signature": "public static void sendHtml(Email email)", "class_method_signature": "SendHtml.sendHtml(Email email)", "testcase": false, "constructor": false, "invocations": ["sendHtml", "getConnection"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}