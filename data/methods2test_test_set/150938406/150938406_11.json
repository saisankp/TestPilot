{"test_class": {"identifier": "BucketizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Row[] rows = new Row[] {\n        Row.of(-999.9, -999.9),\n        Row.of(-0.5, -0.2),\n        Row.of(-0.3, -0.1),\n        Row.of(0.0, 0.0),\n        Row.of(0.2, 0.4),\n        Row.of(999.9, 999.9)\n    };", "modifier": "private", "type": "Row[]", "declarator": "rows = new Row[] {\n        Row.of(-999.9, -999.9),\n        Row.of(-0.5, -0.2),\n        Row.of(-0.3, -0.1),\n        Row.of(0.0, 0.0),\n        Row.of(0.2, 0.4),\n        Row.of(999.9, 999.9)\n    }", "var_name": "rows"}, {"original_string": "private Table data = MLEnvironmentFactory.getDefault().createBatchTable(rows, new String[]{\"features1\", \"features2\"});", "modifier": "private", "type": "Table", "declarator": "data = MLEnvironmentFactory.getDefault().createBatchTable(rows, new String[]{\"features1\", \"features2\"})", "var_name": "data"}, {"original_string": "private Table dataStream = MLEnvironmentFactory.getDefault().createStreamTable(rows, new String[]{\"features1\", \"features2\"});", "modifier": "private", "type": "Table", "declarator": "dataStream = MLEnvironmentFactory.getDefault().createStreamTable(rows, new String[]{\"features1\", \"features2\"})", "var_name": "dataStream"}, {"original_string": "private static double[][] cutsArray = new double[][]{{-0.5, 0.0, 0.5}, {-0.3, 0.0, 0.3, 0.4}};", "modifier": "private static", "type": "double[][]", "declarator": "cutsArray = new double[][]{{-0.5, 0.0, 0.5}, {-0.3, 0.0, 0.3, 0.4}}", "var_name": "cutsArray"}], "file": "core/src/test/java/com/alibaba/alink/pipeline/feature/BucketizerTest.java"}, "test_case": {"identifier": "testBucketizer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBucketizer() throws Exception{\n        Bucketizer op = new Bucketizer()\n            .setSelectedCols(new String[]{\"features1\", \"features2\"})\n            .setOutputCols(new String[]{\"bucket1\", \"bucket2\"})\n            .setCutsArray(cutsArray);\n\n        Table res = op.transform(data);\n\n        List<Long> list = MLEnvironmentFactory.getDefault().getBatchTableEnvironment().toDataSet(res.select(\"bucket1\"), Long.class).collect();\n        Assert.assertArrayEquals(list.toArray(new Long[0]), new Long[]{0L, 0L, 1L, 1L, 2L, 3L});\n\n        res = op.transform(dataStream);\n\n        DataStreamConversionUtil.fromTable(MLEnvironmentFactory.DEFAULT_ML_ENVIRONMENT_ID,res).print();\n\n        MLEnvironmentFactory.getDefault().getStreamExecutionEnvironment().execute();\n    }", "signature": "void testBucketizer()", "full_signature": "@Test public void testBucketizer()", "class_method_signature": "BucketizerTest.testBucketizer()", "testcase": true, "constructor": false, "invocations": ["setCutsArray", "setOutputCols", "setSelectedCols", "transform", "collect", "toDataSet", "getBatchTableEnvironment", "getDefault", "select", "assertArrayEquals", "toArray", "transform", "print", "fromTable", "execute", "getStreamExecutionEnvironment", "getDefault"]}, "focal_class": {"identifier": "Bucketizer", "superclass": "extends MapTransformer<Bucketizer>", "interfaces": "implements BucketizerParams <Bucketizer>", "fields": [], "methods": [{"identifier": "Bucketizer", "parameters": "()", "modifiers": "public", "return": "", "signature": " Bucketizer()", "full_signature": "public  Bucketizer()", "class_method_signature": "Bucketizer.Bucketizer()", "testcase": false, "constructor": true}, {"identifier": "Bucketizer", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " Bucketizer(Params params)", "full_signature": "public  Bucketizer(Params params)", "class_method_signature": "Bucketizer.Bucketizer(Params params)", "testcase": false, "constructor": true}], "file": "core/src/main/java/com/alibaba/alink/pipeline/feature/Bucketizer.java"}, "focal_method": {"identifier": "Bucketizer", "parameters": "()", "modifiers": "public", "return": "", "body": "public Bucketizer() {\n\t\tthis(null);\n\t}", "signature": " Bucketizer()", "full_signature": "public  Bucketizer()", "class_method_signature": "Bucketizer.Bucketizer()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}