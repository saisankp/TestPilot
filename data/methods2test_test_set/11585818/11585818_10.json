{"test_class": {"identifier": "SpanSinkRegistryTest", "superclass": "", "interfaces": "", "fields": [], "file": "telemetry-lib/src/test/java/com/yammer/telemetry/tracing/SpanSinkRegistryTest.java"}, "test_case": {"identifier": "testStartsEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartsEmpty() {\n        assertFalse(SpanSinkRegistry.getSpanSinks().iterator().hasNext());\n    }", "signature": "void testStartsEmpty()", "full_signature": "@Test public void testStartsEmpty()", "class_method_signature": "SpanSinkRegistryTest.testStartsEmpty()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "hasNext", "iterator", "getSpanSinks"]}, "focal_class": {"identifier": "SpanSinkRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static AtomicReference<ImmutableList<SpanSink>> spanSinks = new AtomicReference<>(ImmutableList.<SpanSink>of());", "modifier": "private static", "type": "AtomicReference<ImmutableList<SpanSink>>", "declarator": "spanSinks = new AtomicReference<>(ImmutableList.<SpanSink>of())", "var_name": "spanSinks"}], "methods": [{"identifier": "register", "parameters": "(SpanSink sink)", "modifiers": "public static", "return": "void", "signature": "void register(SpanSink sink)", "full_signature": "public static void register(SpanSink sink)", "class_method_signature": "SpanSinkRegistry.register(SpanSink sink)", "testcase": false, "constructor": false}, {"identifier": "getSpanSinks", "parameters": "()", "modifiers": "public static", "return": "Iterable<SpanSink>", "signature": "Iterable<SpanSink> getSpanSinks()", "full_signature": "public static Iterable<SpanSink> getSpanSinks()", "class_method_signature": "SpanSinkRegistry.getSpanSinks()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "SpanSinkRegistry.clear()", "testcase": false, "constructor": false}], "file": "telemetry-lib/src/main/java/com/yammer/telemetry/tracing/SpanSinkRegistry.java"}, "focal_method": {"identifier": "getSpanSinks", "parameters": "()", "modifiers": "public static", "return": "Iterable<SpanSink>", "body": "public static Iterable<SpanSink> getSpanSinks() {\n        return spanSinks.get();\n    }", "signature": "Iterable<SpanSink> getSpanSinks()", "full_signature": "public static Iterable<SpanSink> getSpanSinks()", "class_method_signature": "SpanSinkRegistry.getSpanSinks()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 11585818, "url": "https://github.com/yammer/telemetry", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 20, "size": 990, "license": "licensed"}}