{"test_class": {"identifier": "OutlineDistillerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private LookupTable<PDPage> mapping = new LookupTable<>();", "modifier": "private", "type": "LookupTable<PDPage>", "declarator": "mapping = new LookupTable<>()", "var_name": "mapping"}], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/OutlineDistillerTest.java"}, "test_case": {"identifier": "rootIsKeptChildIsStripped", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void rootIsKeptChildIsStripped() {\n        PDPage page1 = new PDPage();\n        PDPage page2 = new PDPage();\n        PDDocument document = new PDDocument();\n        document.addPage(page1);\n        document.addPage(page2);\n        PDDocumentOutline outlines = new PDDocumentOutline();\n        PDOutlineItem root = new PDOutlineItem();\n        root.setTitle(\"title\");\n        root.setDestination(page1);\n        PDOutlineItem child = new PDOutlineItem();\n        child.setTitle(\"child\");\n        child.setDestination(page2);\n        root.addFirst(child);\n        outlines.addFirst(root);\n        document.getDocumentCatalog().setDocumentOutline(outlines);\n        mapping.addLookupEntry(document.getPage(0), new PDPage());\n        PDDocumentOutline outline = new PDDocumentOutline();\n        new OutlineDistiller(document).appendRelevantOutlineTo(outline, mapping);\n        assertTrue(outline.hasChildren());\n        assertEquals(1, outline.getOpenCount());\n    }", "signature": "void rootIsKeptChildIsStripped()", "full_signature": "@Test public void rootIsKeptChildIsStripped()", "class_method_signature": "OutlineDistillerTest.rootIsKeptChildIsStripped()", "testcase": true, "constructor": false, "invocations": ["addPage", "addPage", "setTitle", "setDestination", "setTitle", "setDestination", "addFirst", "addFirst", "setDocumentOutline", "getDocumentCatalog", "addLookupEntry", "getPage", "appendRelevantOutlineTo", "assertTrue", "hasChildren", "assertEquals", "getOpenCount"]}, "focal_class": {"identifier": "OutlineDistiller", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OutlineDistiller.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OutlineDistiller.class)", "var_name": "LOG"}, {"original_string": "private PDDocument document;", "modifier": "private", "type": "PDDocument", "declarator": "document", "var_name": "document"}], "methods": [{"identifier": "OutlineDistiller", "parameters": "(PDDocument document)", "modifiers": "public", "return": "", "signature": " OutlineDistiller(PDDocument document)", "full_signature": "public  OutlineDistiller(PDDocument document)", "class_method_signature": "OutlineDistiller.OutlineDistiller(PDDocument document)", "testcase": false, "constructor": true}, {"identifier": "appendRelevantOutlineTo", "parameters": "(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "modifiers": "public", "return": "void", "signature": "void appendRelevantOutlineTo(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "full_signature": "public void appendRelevantOutlineTo(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "class_method_signature": "OutlineDistiller.appendRelevantOutlineTo(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "testcase": false, "constructor": false}, {"identifier": "cloneNode", "parameters": "(PDOutlineItem node, LookupTable<PDPage> pagesLookup)", "modifiers": "private", "return": "Optional<PDOutlineItem>", "signature": "Optional<PDOutlineItem> cloneNode(PDOutlineItem node, LookupTable<PDPage> pagesLookup)", "full_signature": "private Optional<PDOutlineItem> cloneNode(PDOutlineItem node, LookupTable<PDPage> pagesLookup)", "class_method_signature": "OutlineDistiller.cloneNode(PDOutlineItem node, LookupTable<PDPage> pagesLookup)", "testcase": false, "constructor": false}, {"identifier": "cloneLeafIfNeeded", "parameters": "(PDOutlineItem origin, LookupTable<PDPage> pagesLookup)", "modifiers": "private", "return": "Optional<PDOutlineItem>", "signature": "Optional<PDOutlineItem> cloneLeafIfNeeded(PDOutlineItem origin, LookupTable<PDPage> pagesLookup)", "full_signature": "private Optional<PDOutlineItem> cloneLeafIfNeeded(PDOutlineItem origin, LookupTable<PDPage> pagesLookup)", "class_method_signature": "OutlineDistiller.cloneLeafIfNeeded(PDOutlineItem origin, LookupTable<PDPage> pagesLookup)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/OutlineDistiller.java"}, "focal_method": {"identifier": "appendRelevantOutlineTo", "parameters": "(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "modifiers": "public", "return": "void", "body": "public void appendRelevantOutlineTo(PDOutlineNode to, LookupTable<PDPage> pagesLookup) {\n        requireNonNull(to, \"Unable to merge relevant outline items to a null outline.\");\n        if (!pagesLookup.isEmpty()) {\n            ofNullable(document.getDocumentCatalog().getDocumentOutline()).ifPresent(outline -> {\n                for (PDOutlineItem child : outline.children()) {\n                    cloneNode(child, pagesLookup).ifPresent(c -> to.addLast(c));\n                }\n                LOG.debug(\"Appended relevant outline items\");\n            });\n        }\n    }", "signature": "void appendRelevantOutlineTo(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "full_signature": "public void appendRelevantOutlineTo(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "class_method_signature": "OutlineDistiller.appendRelevantOutlineTo(PDOutlineNode to, LookupTable<PDPage> pagesLookup)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "isEmpty", "ifPresent", "ofNullable", "getDocumentOutline", "getDocumentCatalog", "children", "ifPresent", "cloneNode", "addLast", "debug"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}