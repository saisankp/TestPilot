{"test_class": {"identifier": "KafkaUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KafkaTestBroker broker;", "modifier": "private", "type": "KafkaTestBroker", "declarator": "broker", "var_name": "broker"}, {"original_string": "private SimpleConsumer simpleConsumer;", "modifier": "private", "type": "SimpleConsumer", "declarator": "simpleConsumer", "var_name": "simpleConsumer"}, {"original_string": "private KafkaConfig config;", "modifier": "private", "type": "KafkaConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private BrokerHosts brokerHosts;", "modifier": "private", "type": "BrokerHosts", "declarator": "brokerHosts", "var_name": "brokerHosts"}], "file": "storm/storm-app/src/test/java/storm/kafka/KafkaUtilsTest.java"}, "test_case": {"identifier": "getOffsetFromConfigAndDontForceFromStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getOffsetFromConfigAndDontForceFromStart() {\n        config.forceFromStart = false;\n        config.startOffsetTime = OffsetRequest.EarliestTime();\n        createTopicAndSendMessage();\n        long latestOffset = KafkaUtils.getOffset(simpleConsumer, config.topic, 0, OffsetRequest.LatestTime());\n        long offsetFromConfig = KafkaUtils.getOffset(simpleConsumer, config.topic, 0, config);\n        assertThat(latestOffset, is(equalTo(offsetFromConfig)));\n    }", "signature": "void getOffsetFromConfigAndDontForceFromStart()", "full_signature": "@Test public void getOffsetFromConfigAndDontForceFromStart()", "class_method_signature": "KafkaUtilsTest.getOffsetFromConfigAndDontForceFromStart()", "testcase": true, "constructor": false, "invocations": ["EarliestTime", "createTopicAndSendMessage", "getOffset", "LatestTime", "getOffset", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "KafkaUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger(KafkaUtils.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(KafkaUtils.class)", "var_name": "LOG"}, {"original_string": "private static final int NO_OFFSET = -5;", "modifier": "private static final", "type": "int", "declarator": "NO_OFFSET = -5", "var_name": "NO_OFFSET"}], "methods": [{"identifier": "makeBrokerReader", "parameters": "(Map stormConf, KafkaConfig conf)", "modifiers": "public static", "return": "IBrokerReader", "signature": "IBrokerReader makeBrokerReader(Map stormConf, KafkaConfig conf)", "full_signature": "public static IBrokerReader makeBrokerReader(Map stormConf, KafkaConfig conf)", "class_method_signature": "KafkaUtils.makeBrokerReader(Map stormConf, KafkaConfig conf)", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "modifiers": "public static", "return": "long", "signature": "long getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "full_signature": "public static long getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "class_method_signature": "KafkaUtils.getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "modifiers": "public static", "return": "long", "signature": "long getOffset(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "full_signature": "public static long getOffset(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "class_method_signature": "KafkaUtils.getOffset(SimpleConsumer consumer, String topic, int partition, long startOffsetTime)", "testcase": false, "constructor": false}, {"identifier": "fetchMessages", "parameters": "(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "modifiers": "public static", "return": "ByteBufferMessageSet", "signature": "ByteBufferMessageSet fetchMessages(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "full_signature": "public static ByteBufferMessageSet fetchMessages(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "class_method_signature": "KafkaUtils.fetchMessages(KafkaConfig config, SimpleConsumer consumer, Partition partition, long offset)", "testcase": false, "constructor": false}, {"identifier": "generateTuples", "parameters": "(KafkaConfig kafkaConfig, Message msg)", "modifiers": "public static", "return": "Iterable<List<Object>>", "signature": "Iterable<List<Object>> generateTuples(KafkaConfig kafkaConfig, Message msg)", "full_signature": "public static Iterable<List<Object>> generateTuples(KafkaConfig kafkaConfig, Message msg)", "class_method_signature": "KafkaUtils.generateTuples(KafkaConfig kafkaConfig, Message msg)", "testcase": false, "constructor": false}, {"identifier": "calculatePartitionsForTask", "parameters": "(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "modifiers": "public static", "return": "List<Partition>", "signature": "List<Partition> calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "full_signature": "public static List<Partition> calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "class_method_signature": "KafkaUtils.calculatePartitionsForTask(GlobalPartitionInformation partitionInformation, int totalTasks, int taskIndex)", "testcase": false, "constructor": false}, {"identifier": "logPartitionMapping", "parameters": "(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "modifiers": "private static", "return": "void", "signature": "void logPartitionMapping(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "full_signature": "private static void logPartitionMapping(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "class_method_signature": "KafkaUtils.logPartitionMapping(int totalTasks, int taskIndex, List<Partition> taskPartitions)", "testcase": false, "constructor": false}, {"identifier": "taskId", "parameters": "(int taskIndex, int totalTasks)", "modifiers": "public static", "return": "String", "signature": "String taskId(int taskIndex, int totalTasks)", "full_signature": "public static String taskId(int taskIndex, int totalTasks)", "class_method_signature": "KafkaUtils.taskId(int taskIndex, int totalTasks)", "testcase": false, "constructor": false}], "file": "storm/storm-app/src/main/java/storm/kafka/KafkaUtils.java"}, "focal_method": {"identifier": "getOffset", "parameters": "(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "modifiers": "public static", "return": "long", "body": "public static long getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config) {\n        long startOffsetTime = kafka.api.OffsetRequest.LatestTime();\n        if ( config.forceFromStart ) {\n            startOffsetTime = config.startOffsetTime;\n        }\n        return getOffset(consumer, topic, partition, startOffsetTime);\n    }", "signature": "long getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "full_signature": "public static long getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "class_method_signature": "KafkaUtils.getOffset(SimpleConsumer consumer, String topic, int partition, KafkaConfig config)", "testcase": false, "constructor": false, "invocations": ["LatestTime", "getOffset"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}