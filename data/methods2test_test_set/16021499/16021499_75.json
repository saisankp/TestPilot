{"test_class": {"identifier": "MergeLimitationsValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MergeLimitationsValidator validator;", "modifier": "private", "type": "MergeLimitationsValidator", "declarator": "validator", "var_name": "validator"}], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/spi/impl/MergeLimitationsValidatorTest.java"}, "test_case": {"identifier": "testWithAggregateAtWrongLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithAggregateAtWrongLevel() {\n        Map<String, DocViewProperty> props = new HashMap<>();\n        props.put(\"prop1\", new DocViewProperty(\"prop1\", new String[] { \"value1\" } , false, PropertyType.STRING));\n\n        DocViewNode node = new DocViewNode(\"somename\", \"somename\", null, props, null, \"nt:unstructured\");\n        Collection<ValidationMessage> messages = validator.validate(node, \"/apps/test/deep\", Paths.get(\".content.xml\"), false);\n        ValidationExecutorTest.assertViolation(messages,\n                new ValidationMessage(ValidationMessageSeverity.ERROR, String.format(MergeLimitationsValidator.PACKAGE_NON_ROOT_NODE_MERGED, \"/apps/test/deep\")));\n    }", "signature": "void testWithAggregateAtWrongLevel()", "full_signature": "@Test public void testWithAggregateAtWrongLevel()", "class_method_signature": "MergeLimitationsValidatorTest.testWithAggregateAtWrongLevel()", "testcase": true, "constructor": false, "invocations": ["put", "validate", "get", "assertViolation", "format"]}, "focal_class": {"identifier": "MergeLimitationsValidator", "superclass": "", "interfaces": "implements DocumentViewXmlValidator", "fields": [{"original_string": "protected static final String PACKAGE_NON_ROOT_NODE_MERGED = \"Non-empty Node '%s' is supposed to be imported with mode 'merge' but it is not the aggregator's root node. This is currently not supported by FileVault (https://issues.apache.org/jira/browse/JCRVLT-255).\";", "modifier": "protected static final", "type": "String", "declarator": "PACKAGE_NON_ROOT_NODE_MERGED = \"Non-empty Node '%s' is supposed to be imported with mode 'merge' but it is not the aggregator's root node. This is currently not supported by FileVault (https://issues.apache.org/jira/browse/JCRVLT-255).\"", "var_name": "PACKAGE_NON_ROOT_NODE_MERGED"}, {"original_string": "private final ValidationMessageSeverity severity;", "modifier": "private final", "type": "ValidationMessageSeverity", "declarator": "severity", "var_name": "severity"}, {"original_string": "private final Collection<String> rootNodePathsOfMergeRules;", "modifier": "private final", "type": "Collection<String>", "declarator": "rootNodePathsOfMergeRules", "var_name": "rootNodePathsOfMergeRules"}], "methods": [{"identifier": "MergeLimitationsValidator", "parameters": "(ValidationMessageSeverity severity, WorkspaceFilter filter)", "modifiers": "public", "return": "", "signature": " MergeLimitationsValidator(ValidationMessageSeverity severity, WorkspaceFilter filter)", "full_signature": "public  MergeLimitationsValidator(ValidationMessageSeverity severity, WorkspaceFilter filter)", "class_method_signature": "MergeLimitationsValidator.MergeLimitationsValidator(ValidationMessageSeverity severity, WorkspaceFilter filter)", "testcase": false, "constructor": true}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> done()", "full_signature": "@Override public Collection<ValidationMessage> done()", "class_method_signature": "MergeLimitationsValidator.done()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "full_signature": "@Override public Collection<ValidationMessage> validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "class_method_signature": "MergeLimitationsValidator.validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/MergeLimitationsValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "body": "@Override\n    public Collection<ValidationMessage> validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot) {\n        // find out if one of the filter roots is pointing to any of the aggregator's non-root nodes\n        if (!isRoot && !node.props.isEmpty() && rootNodePathsOfMergeRules.contains(nodePath)) {\n            return Collections.singleton(new ValidationMessage(severity, String.format(PACKAGE_NON_ROOT_NODE_MERGED, nodePath)));\n        }\n        return null;\n    }", "signature": "Collection<ValidationMessage> validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "full_signature": "@Override public Collection<ValidationMessage> validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "class_method_signature": "MergeLimitationsValidator.validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "contains", "singleton", "format"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}