{"test_class": {"identifier": "XmlNodeValueCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ELEMENT = \"ns56:AnyID\";", "modifier": "private static final", "type": "String", "declarator": "ELEMENT = \"ns56:AnyID\"", "var_name": "ELEMENT"}, {"original_string": "private static final String ELEMENT_VALUE = \"179\";", "modifier": "private static final", "type": "String", "declarator": "ELEMENT_VALUE = \"179\"", "var_name": "ELEMENT_VALUE"}, {"original_string": "private static final String REQUEST = \"request\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST = \"request\"", "var_name": "REQUEST"}, {"original_string": "private static final String XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\";", "modifier": "private static final", "type": "String", "declarator": "XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"", "var_name": "XML_DECLARATION"}, {"original_string": "private static final String CONTENT_TYPE_HEADER = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER"}, {"original_string": "private static final String XML_CONTENT = \"application/xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_CONTENT = \"application/xml\"", "var_name": "XML_CONTENT"}, {"original_string": "private static final String FASTINFOSET_CONTENT = \"application/fastinfoset\";", "modifier": "private static final", "type": "String", "declarator": "FASTINFOSET_CONTENT = \"application/fastinfoset\"", "var_name": "FASTINFOSET_CONTENT"}, {"original_string": "private ParameterList parameterList;", "modifier": "private", "type": "ParameterList", "declarator": "parameterList", "var_name": "parameterList"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private XQueryExpressionEvaluator queryExpressionEvaluator;", "modifier": "@Mock\n    private", "type": "XQueryExpressionEvaluator", "declarator": "queryExpressionEvaluator", "var_name": "queryExpressionEvaluator"}, {"original_string": "@InjectMocks\n    private XmlNodeValueChecker underTest;", "modifier": "@InjectMocks\n    private", "type": "XmlNodeValueChecker", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/xml/XmlNodeValueCheckerTest.java"}, "test_case": {"identifier": "testCheckConditionWhenContentIsFastinfosetShouldReturnTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckConditionWhenContentIsFastinfosetShouldReturnTrue() throws SaxonApiException {\n        //GIVEN\n        parameterList.addParameter(new Parameter(ELEMENT, ELEMENT_VALUE));\n        String query = \"(//*[name()='\" + ELEMENT + \"'])='\" + ELEMENT_VALUE + \"'\";\n        given(queryExpressionEvaluator.evaluateXQuery(REQUEST, query)).willReturn(XML_DECLARATION + \"true\");\n        given(request.getBody()).willReturn(REQUEST);\n        given(request.getHeader(CONTENT_TYPE_HEADER)).willReturn(FASTINFOSET_CONTENT);\n        //WHEN\n        boolean actual = underTest.checkCondition(request, parameterList);\n        //THEN\n        assertEquals(actual, true);\n    }", "signature": "void testCheckConditionWhenContentIsFastinfosetShouldReturnTrue()", "full_signature": "@Test public void testCheckConditionWhenContentIsFastinfosetShouldReturnTrue()", "class_method_signature": "XmlNodeValueCheckerTest.testCheckConditionWhenContentIsFastinfosetShouldReturnTrue()", "testcase": true, "constructor": false, "invocations": ["addParameter", "willReturn", "given", "evaluateXQuery", "willReturn", "given", "getBody", "willReturn", "given", "getHeader", "checkCondition", "assertEquals"]}, "focal_class": {"identifier": "XmlNodeValueChecker", "superclass": "", "interfaces": "implements ConditionChecker", "fields": [{"original_string": "private static final String FASTINFOSET_CONTENT = \"application/fastinfoset\";", "modifier": "private static final", "type": "String", "declarator": "FASTINFOSET_CONTENT = \"application/fastinfoset\"", "var_name": "FASTINFOSET_CONTENT"}, {"original_string": "private static final String XML_CONTENT = \"xml\";", "modifier": "private static final", "type": "String", "declarator": "XML_CONTENT = \"xml\"", "var_name": "XML_CONTENT"}, {"original_string": "private static final String CONTENT_TYPE_HEADER = \"Content-Type\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE_HEADER = \"Content-Type\"", "var_name": "CONTENT_TYPE_HEADER"}, {"original_string": "private static final String XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\";", "modifier": "private static final", "type": "String", "declarator": "XML_DECLARATION = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"", "var_name": "XML_DECLARATION"}, {"original_string": "@Autowired\n    private XQueryExpressionEvaluator queryExpressionEvaluator;", "modifier": "@Autowired\n    private", "type": "XQueryExpressionEvaluator", "declarator": "queryExpressionEvaluator", "var_name": "queryExpressionEvaluator"}], "methods": [{"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterList)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "class_method_signature": "XmlNodeValueChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "testcase": false, "constructor": false}, {"identifier": "evaluateCondition", "parameters": "(final String xml, final String element, final String value)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateCondition(final String xml, final String element, final String value)", "full_signature": "private boolean evaluateCondition(final String xml, final String element, final String value)", "class_method_signature": "XmlNodeValueChecker.evaluateCondition(final String xml, final String element, final String value)", "testcase": false, "constructor": false}, {"identifier": "removeXmlDecTagFromXQueryResult", "parameters": "(final String xml)", "modifiers": "private", "return": "String", "signature": "String removeXmlDecTagFromXQueryResult(final String xml)", "full_signature": "private String removeXmlDecTagFromXQueryResult(final String xml)", "class_method_signature": "XmlNodeValueChecker.removeXmlDecTagFromXQueryResult(final String xml)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/xml/XmlNodeValueChecker.java"}, "focal_method": {"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameterList)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList) {\n        boolean result = false;\n        List<Parameter> params = parameterList.getAllParameters();\n        if (params.size() == 1) {\n            String contentType = request.getHeader(CONTENT_TYPE_HEADER);\n            if (contentType != null && (contentType.contains(XML_CONTENT) || FASTINFOSET_CONTENT.equals(contentType))) {\n\n                try {\n                    Parameter paramater = params.iterator().next();\n                    String element = paramater.getName();\n                    String value = paramater.getValue();\n                    result = evaluateCondition(request.getBody(), element, value);\n                } catch (SaxonApiException e) {\n                    throw new ConditionEvaluationFailedException(\"XQuery evaluation failed at request: \" + request.getWilmaMessageLoggerId(), e);\n                }\n            }\n        } else {\n            throw new ConditionEvaluationFailedException(\"Please provide exactly one parameter in Stub Configuration!\");\n        }\n        return result;\n    }", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "class_method_signature": "XmlNodeValueChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameterList)", "testcase": false, "constructor": false, "invocations": ["getAllParameters", "size", "getHeader", "contains", "equals", "next", "iterator", "getName", "getValue", "evaluateCondition", "getBody", "getWilmaMessageLoggerId"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}