{"test_class": {"identifier": "ProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static List<String[]> httpProxyList = new ArrayList<String[]>();", "modifier": "private static", "type": "List<String[]>", "declarator": "httpProxyList = new ArrayList<String[]>()", "var_name": "httpProxyList"}], "file": "webmagic-core/src/test/java/us/codecraft/webmagic/proxy/ProxyTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n        Proxy proxy = Proxy.create(URI.create(\"//127.0.0.1:8080\"));\n        assertNull(proxy.getScheme());\n        assertNull(proxy.getUsername());\n        assertNull(proxy.getPassword());\n        assertEquals(\"127.0.0.1\", proxy.getHost());\n        assertEquals(8080, proxy.getPort());\n\n        proxy = Proxy.create(URI.create(\"http://127.0.0.1:8080\"));\n        assertEquals(\"http\", proxy.getScheme());\n        assertNull(proxy.getUsername());\n        assertNull(proxy.getPassword());\n        assertEquals(\"127.0.0.1\", proxy.getHost());\n        assertEquals(8080, proxy.getPort());\n\n        proxy = Proxy.create(URI.create(\"//username:password@127.0.0.1:8080\"));\n        assertNull(proxy.getScheme());\n        assertEquals(\"username\", proxy.getUsername());\n        assertEquals(\"password\", proxy.getPassword());\n        assertEquals(\"127.0.0.1\", proxy.getHost());\n        assertEquals(8080, proxy.getPort());\n\n        proxy = Proxy.create(URI.create(\"//username@127.0.0.1:8080\"));\n        assertNull(proxy.getScheme());\n        assertEquals(\"username\", proxy.getUsername());\n        assertNull(proxy.getPassword());\n        assertEquals(\"127.0.0.1\", proxy.getHost());\n        assertEquals(8080, proxy.getPort());\n\n        proxy = Proxy.create(URI.create(\"//:password@127.0.0.1:8080\"));\n        assertNull(proxy.getScheme());\n        assertNull(proxy.getUsername());\n        assertEquals(\"password\", proxy.getPassword());\n        assertEquals(\"127.0.0.1\", proxy.getHost());\n        assertEquals(8080, proxy.getPort());\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "ProxyTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["create", "create", "assertNull", "getScheme", "assertNull", "getUsername", "assertNull", "getPassword", "assertEquals", "getHost", "assertEquals", "getPort", "create", "create", "assertEquals", "getScheme", "assertNull", "getUsername", "assertNull", "getPassword", "assertEquals", "getHost", "assertEquals", "getPort", "create", "create", "assertNull", "getScheme", "assertEquals", "getUsername", "assertEquals", "getPassword", "assertEquals", "getHost", "assertEquals", "getPort", "create", "create", "assertNull", "getScheme", "assertEquals", "getUsername", "assertNull", "getPassword", "assertEquals", "getHost", "assertEquals", "getPort", "create", "create", "assertNull", "getScheme", "assertNull", "getUsername", "assertEquals", "getPassword", "assertEquals", "getHost", "assertEquals", "getPort"]}, "focal_class": {"identifier": "Proxy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String scheme;", "modifier": "private", "type": "String", "declarator": "scheme", "var_name": "scheme"}, {"original_string": "private String host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private int port;", "modifier": "private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}], "methods": [{"identifier": "create", "parameters": "(final URI uri)", "modifiers": "public static", "return": "Proxy", "signature": "Proxy create(final URI uri)", "full_signature": "public static Proxy create(final URI uri)", "class_method_signature": "Proxy.create(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "Proxy", "parameters": "(String host, int port)", "modifiers": "public", "return": "", "signature": " Proxy(String host, int port)", "full_signature": "public  Proxy(String host, int port)", "class_method_signature": "Proxy.Proxy(String host, int port)", "testcase": false, "constructor": true}, {"identifier": "Proxy", "parameters": "(String host, int port, String scheme)", "modifiers": "public", "return": "", "signature": " Proxy(String host, int port, String scheme)", "full_signature": "public  Proxy(String host, int port, String scheme)", "class_method_signature": "Proxy.Proxy(String host, int port, String scheme)", "testcase": false, "constructor": true}, {"identifier": "Proxy", "parameters": "(String host, int port, String username, String password)", "modifiers": "public", "return": "", "signature": " Proxy(String host, int port, String username, String password)", "full_signature": "public  Proxy(String host, int port, String username, String password)", "class_method_signature": "Proxy.Proxy(String host, int port, String username, String password)", "testcase": false, "constructor": true}, {"identifier": "getScheme", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScheme()", "full_signature": "public String getScheme()", "class_method_signature": "Proxy.getScheme()", "testcase": false, "constructor": false}, {"identifier": "setScheme", "parameters": "(String scheme)", "modifiers": "public", "return": "void", "signature": "void setScheme(String scheme)", "full_signature": "public void setScheme(String scheme)", "class_method_signature": "Proxy.setScheme(String scheme)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHost()", "full_signature": "public String getHost()", "class_method_signature": "Proxy.getHost()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPort()", "full_signature": "public int getPort()", "class_method_signature": "Proxy.getPort()", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsername()", "full_signature": "public String getUsername()", "class_method_signature": "Proxy.getUsername()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "Proxy.getPassword()", "testcase": false, "constructor": false}, {"identifier": "toURI", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI toURI()", "full_signature": "public URI toURI()", "class_method_signature": "Proxy.toURI()", "testcase": false, "constructor": false}, {"identifier": "urlencode", "parameters": "(String s)", "modifiers": "private", "return": "String", "signature": "String urlencode(String s)", "full_signature": "private String urlencode(String s)", "class_method_signature": "Proxy.urlencode(String s)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Proxy.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Proxy.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Proxy.toString()", "testcase": false, "constructor": false}], "file": "webmagic-core/src/main/java/us/codecraft/webmagic/proxy/Proxy.java"}, "focal_method": {"identifier": "create", "parameters": "(final URI uri)", "modifiers": "public static", "return": "Proxy", "body": "public static Proxy create(final URI uri) {\n        Proxy proxy = new Proxy(uri.getHost(), uri.getPort(), uri.getScheme());\n        String userInfo = uri.getUserInfo();\n        if (userInfo != null) {\n            String[] up = userInfo.split(\":\");\n            if (up.length == 1) {\n                proxy.username = up[0].isEmpty() ? null : up[0];\n            } else {\n                proxy.username = up[0].isEmpty() ? null : up[0];\n                proxy.password = up[1].isEmpty() ? null : up[1];\n            }\n        }\n        return proxy;\n    }", "signature": "Proxy create(final URI uri)", "full_signature": "public static Proxy create(final URI uri)", "class_method_signature": "Proxy.create(final URI uri)", "testcase": false, "constructor": false, "invocations": ["getHost", "getPort", "getScheme", "getUserInfo", "split", "isEmpty", "isEmpty", "isEmpty"]}, "repository": {"repo_id": 9623064, "url": "https://github.com/code4craft/webmagic", "language": "Java", "is_fork": false, "fork_count": 3804, "stargazer_count": 9136, "size": 17041, "license": "licensed"}}