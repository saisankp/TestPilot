{"test_class": {"identifier": "UploadQuestionGroupControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UploadQuestionGroupController controller;", "modifier": "private", "type": "UploadQuestionGroupController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Mock\n    private QuestionnaireServiceFacade questionnaireServiceFacade;", "modifier": "@Mock\n    private", "type": "QuestionnaireServiceFacade", "declarator": "questionnaireServiceFacade", "var_name": "questionnaireServiceFacade"}, {"original_string": "@Mock\n    private RequestContext requestContext;", "modifier": "@Mock\n    private", "type": "RequestContext", "declarator": "requestContext", "var_name": "requestContext"}, {"original_string": "@Mock\n    private MessageContext messageContext;", "modifier": "@Mock\n    private", "type": "MessageContext", "declarator": "messageContext", "var_name": "messageContext"}], "file": "questionnaire/src/test/java/org/mifos/platform/questionnaire/ui/controller/UploadQuestionGroupControllerTest.java"}, "test_case": {"identifier": "testUploadQuestionGroup_UploadFailureDuringPPIProcessing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUploadQuestionGroup_UploadFailureDuringPPIProcessing() {\n        when(requestContext.getMessageContext()).thenReturn(messageContext);\n        doThrow(new SystemException(FETCH_PPI_COUNTRY_XML_FAILED)).when(questionnaireServiceFacade).uploadPPIQuestionGroup(\"INDIA\");\n        UploadQuestionGroupForm form = new UploadQuestionGroupForm();\n        form.setSelectedCountry(\"INDIA\");\n        String result = controller.upload(form, requestContext);\n        assertThat(result, is(\"failure\"));\n        verify(requestContext).getMessageContext();\n        verify(messageContext).addMessage(argThat(new MessageMatcher(FETCH_PPI_COUNTRY_XML_FAILED)));\n    }", "signature": "void testUploadQuestionGroup_UploadFailureDuringPPIProcessing()", "full_signature": "@Test public void testUploadQuestionGroup_UploadFailureDuringPPIProcessing()", "class_method_signature": "UploadQuestionGroupControllerTest.testUploadQuestionGroup_UploadFailureDuringPPIProcessing()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getMessageContext", "uploadPPIQuestionGroup", "when", "doThrow", "setSelectedCountry", "upload", "assertThat", "is", "getMessageContext", "verify", "addMessage", "verify", "argThat"]}, "focal_class": {"identifier": "UploadQuestionGroupController", "superclass": "extends QuestionnaireController", "interfaces": "", "fields": [], "methods": [{"identifier": "UploadQuestionGroupController", "parameters": "()", "modifiers": "public", "return": "", "signature": " UploadQuestionGroupController()", "full_signature": "public  UploadQuestionGroupController()", "class_method_signature": "UploadQuestionGroupController.UploadQuestionGroupController()", "testcase": false, "constructor": true}, {"identifier": "UploadQuestionGroupController", "parameters": "(QuestionnaireServiceFacade questionnaireServiceFacade)", "modifiers": "public", "return": "", "signature": " UploadQuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "full_signature": "public  UploadQuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "class_method_signature": "UploadQuestionGroupController.UploadQuestionGroupController(QuestionnaireServiceFacade questionnaireServiceFacade)", "testcase": false, "constructor": true}, {"identifier": "getAllCountriesForPPI", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllCountriesForPPI()", "full_signature": "public List<String> getAllCountriesForPPI()", "class_method_signature": "UploadQuestionGroupController.getAllCountriesForPPI()", "testcase": false, "constructor": false}, {"identifier": "upload", "parameters": "(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "modifiers": "public", "return": "String", "signature": "String upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "full_signature": "public String upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "class_method_signature": "UploadQuestionGroupController.upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "handleValidationException", "parameters": "(ValidationException validationException, RequestContext requestContext)", "modifiers": "private", "return": "void", "signature": "void handleValidationException(ValidationException validationException, RequestContext requestContext)", "full_signature": "private void handleValidationException(ValidationException validationException, RequestContext requestContext)", "class_method_signature": "UploadQuestionGroupController.handleValidationException(ValidationException validationException, RequestContext requestContext)", "testcase": false, "constructor": false}, {"identifier": "selectedCountryNotPresent", "parameters": "(String selectedCountry)", "modifiers": "private", "return": "boolean", "signature": "boolean selectedCountryNotPresent(String selectedCountry)", "full_signature": "private boolean selectedCountryNotPresent(String selectedCountry)", "class_method_signature": "UploadQuestionGroupController.selectedCountryNotPresent(String selectedCountry)", "testcase": false, "constructor": false}], "file": "questionnaire/src/main/java/org/mifos/platform/questionnaire/ui/controller/UploadQuestionGroupController.java"}, "focal_method": {"identifier": "upload", "parameters": "(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "modifiers": "public", "return": "String", "body": "public String upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext) {\n        String result = \"success\";\n        if (selectedCountryNotPresent(uploadQuestionGroupForm.getSelectedCountry())) {\n            constructErrorMessage(requestContext.getMessageContext(), \"questionnaire.error.ppi.country\", \"selectedCountry\", \"Please specify the Country\");\n            result = \"failure\";\n        } else {\n            try {\n                questionnaireServiceFacade.uploadPPIQuestionGroup(uploadQuestionGroupForm.getSelectedCountry());\n            } catch(ValidationException e) {\n                handleValidationException(e, requestContext);\n                result = \"failure\";\n            } catch (SystemException e) {\n                constructErrorMessage(requestContext.getMessageContext(), e.getKey(), \"selectedCountry\", e.getKey());\n                result = \"failure\";\n            } catch (Exception e) {\n                constructAndLogSystemError(requestContext.getMessageContext(), new SystemException(e.getMessage(), e));\n                result = \"failure\";\n            }\n        }\n        return result;\n    }", "signature": "String upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "full_signature": "public String upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "class_method_signature": "UploadQuestionGroupController.upload(UploadQuestionGroupForm uploadQuestionGroupForm, RequestContext requestContext)", "testcase": false, "constructor": false, "invocations": ["selectedCountryNotPresent", "getSelectedCountry", "constructErrorMessage", "getMessageContext", "uploadPPIQuestionGroup", "getSelectedCountry", "handleValidationException", "constructErrorMessage", "getMessageContext", "getKey", "getKey", "constructAndLogSystemError", "getMessageContext", "getMessage"]}, "repository": {"repo_id": 1348716, "url": "https://github.com/mifos/head", "language": "Java", "is_fork": false, "fork_count": 91, "stargazer_count": 55, "size": 532732, "license": "licensed"}}