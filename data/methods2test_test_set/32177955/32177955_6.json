{"test_class": {"identifier": "TestSnapshot", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectMapper objectMapper = new ObjectMapper().findAndRegisterModules();", "modifier": "private", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper().findAndRegisterModules()", "var_name": "objectMapper"}], "file": "Processor/src/test/java/org/ulyssis/ipp/snapshot/TestSnapshot.java"}, "test_case": {"identifier": "testPredictedSpeedWhenStartedThenFirstEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPredictedSpeedWhenStartedThenFirstEvent() throws Exception {\n        TagId tag = new TagId(\"DCBA\");\n        Snapshot snapshot = new Snapshot(Instant.EPOCH);\n        AddTagEvent addTagEvent = new AddTagEvent(Instant.EPOCH, tag, 3);\n        snapshot = addTagEvent.doApply(snapshot);\n        StartEvent startEvent = new StartEvent(Instant.EPOCH);\n        snapshot = startEvent.doApply(snapshot);\n        TagSeenEvent tagSeenEvent =\n                new TagSeenEvent(Instant.EPOCH.plus(10, ChronoUnit.SECONDS), tag, 0, 0L);\n        snapshot = tagSeenEvent.doApply(snapshot);\n        TagSeenEvent tagSeenEvent2 =\n                new TagSeenEvent(Instant.EPOCH.plus(50, ChronoUnit.SECONDS), tag, 1, 1L);\n        snapshot = tagSeenEvent2.doApply(snapshot);\n        double speedShouldBe = 100D / (50D - 10D);\n        MatcherAssert.assertThat(snapshot.getTeamStates().getStateForTeam(3).get()\n            .getPredictedSpeed(), Matchers.equalTo(speedShouldBe));\n        MatcherAssert.assertThat(snapshot.getTeamStates().getStateForTeam(3).get()\n                .getSpeed(), Matchers.equalTo(speedShouldBe));\n    }", "signature": "void testPredictedSpeedWhenStartedThenFirstEvent()", "full_signature": "@Test public void testPredictedSpeedWhenStartedThenFirstEvent()", "class_method_signature": "TestSnapshot.testPredictedSpeedWhenStartedThenFirstEvent()", "testcase": true, "constructor": false, "invocations": ["doApply", "doApply", "plus", "doApply", "plus", "doApply", "assertThat", "getPredictedSpeed", "get", "getStateForTeam", "getTeamStates", "equalTo", "assertThat", "getSpeed", "get", "getStateForTeam", "getTeamStates", "equalTo"]}, "focal_class": {"identifier": "Snapshot", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LogManager.getLogger(Snapshot.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LogManager.getLogger(Snapshot.class)", "var_name": "LOG"}, {"original_string": "@JsonIgnore\n    private long id = -1;", "modifier": "@JsonIgnore\n    private", "type": "long", "declarator": "id = -1", "var_name": "id"}, {"original_string": "@JsonIgnore\n    long eventId = -1;", "modifier": "@JsonIgnore", "type": "long", "declarator": "eventId = -1", "var_name": "eventId"}, {"original_string": "private Instant snapshotTime = Instant.MIN;", "modifier": "private", "type": "Instant", "declarator": "snapshotTime = Instant.MIN", "var_name": "snapshotTime"}, {"original_string": "private Instant startTime = Instant.MAX;", "modifier": "private", "type": "Instant", "declarator": "startTime = Instant.MAX", "var_name": "startTime"}, {"original_string": "private Instant endTime = Instant.MAX;", "modifier": "private", "type": "Instant", "declarator": "endTime = Instant.MAX", "var_name": "endTime"}, {"original_string": "private TeamTagMap teamTagMap = new TeamTagMap();", "modifier": "private", "type": "TeamTagMap", "declarator": "teamTagMap = new TeamTagMap()", "var_name": "teamTagMap"}, {"original_string": "private TeamStates teamStates;", "modifier": "private", "type": "TeamStates", "declarator": "teamStates", "var_name": "teamStates"}, {"original_string": "private TeamStates publicTeamStates;", "modifier": "private", "type": "TeamStates", "declarator": "publicTeamStates", "var_name": "publicTeamStates"}, {"original_string": "private String statusMessage = \"\";", "modifier": "private", "type": "String", "declarator": "statusMessage = \"\"", "var_name": "statusMessage"}, {"original_string": "private Status status = Status.NoResults;", "modifier": "private", "type": "Status", "declarator": "status = Status.NoResults", "var_name": "status"}, {"original_string": "private int updateFrequency = 3;", "modifier": "private", "type": "int", "declarator": "updateFrequency = 3", "var_name": "updateFrequency"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "Optional<Long>", "signature": "Optional<Long> getId()", "full_signature": "public Optional<Long> getId()", "class_method_signature": "Snapshot.getId()", "testcase": false, "constructor": false}, {"identifier": "getEventId", "parameters": "()", "modifiers": "public", "return": "Optional<Long>", "signature": "Optional<Long> getEventId()", "full_signature": "public Optional<Long> getEventId()", "class_method_signature": "Snapshot.getEventId()", "testcase": false, "constructor": false}, {"identifier": "Snapshot", "parameters": "()", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " Snapshot()", "full_signature": "@SuppressWarnings(\"unused\") private  Snapshot()", "class_method_signature": "Snapshot.Snapshot()", "testcase": false, "constructor": true}, {"identifier": "Snapshot", "parameters": "(Instant time)", "modifiers": "public", "return": "", "signature": " Snapshot(Instant time)", "full_signature": "public  Snapshot(Instant time)", "class_method_signature": "Snapshot.Snapshot(Instant time)", "testcase": false, "constructor": true}, {"identifier": "getSnapshotTime", "parameters": "()", "modifiers": "public", "return": "Instant", "signature": "Instant getSnapshotTime()", "full_signature": "public Instant getSnapshotTime()", "class_method_signature": "Snapshot.getSnapshotTime()", "testcase": false, "constructor": false}, {"identifier": "getTeamTagMap", "parameters": "()", "modifiers": "public", "return": "TeamTagMap", "signature": "TeamTagMap getTeamTagMap()", "full_signature": "public TeamTagMap getTeamTagMap()", "class_method_signature": "Snapshot.getTeamTagMap()", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "public", "return": "Instant", "signature": "Instant getStartTime()", "full_signature": "public Instant getStartTime()", "class_method_signature": "Snapshot.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "getEndTime", "parameters": "()", "modifiers": "public", "return": "Instant", "signature": "Instant getEndTime()", "full_signature": "public Instant getEndTime()", "class_method_signature": "Snapshot.getEndTime()", "testcase": false, "constructor": false}, {"identifier": "getTeamStates", "parameters": "()", "modifiers": "public", "return": "TeamStates", "signature": "TeamStates getTeamStates()", "full_signature": "public TeamStates getTeamStates()", "class_method_signature": "Snapshot.getTeamStates()", "testcase": false, "constructor": false}, {"identifier": "getPublicTeamStates", "parameters": "()", "modifiers": "public", "return": "TeamStates", "signature": "TeamStates getPublicTeamStates()", "full_signature": "public TeamStates getPublicTeamStates()", "class_method_signature": "Snapshot.getPublicTeamStates()", "testcase": false, "constructor": false}, {"identifier": "getStatusMessage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStatusMessage()", "full_signature": "public String getStatusMessage()", "class_method_signature": "Snapshot.getStatusMessage()", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "public", "return": "Status", "signature": "Status getStatus()", "full_signature": "public Status getStatus()", "class_method_signature": "Snapshot.getStatus()", "testcase": false, "constructor": false}, {"identifier": "getUpdateFrequency", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getUpdateFrequency()", "full_signature": "public int getUpdateFrequency()", "class_method_signature": "Snapshot.getUpdateFrequency()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(Instant time, Snapshot other)", "modifiers": "public static", "return": "Builder", "signature": "Builder builder(Instant time, Snapshot other)", "full_signature": "public static Builder builder(Instant time, Snapshot other)", "class_method_signature": "Snapshot.builder(Instant time, Snapshot other)", "testcase": false, "constructor": false}, {"identifier": "loadForEvent", "parameters": "(Connection connection, Event event)", "modifiers": "public static", "return": "Optional<Snapshot>", "signature": "Optional<Snapshot> loadForEvent(Connection connection, Event event)", "full_signature": "public static Optional<Snapshot> loadForEvent(Connection connection, Event event)", "class_method_signature": "Snapshot.loadForEvent(Connection connection, Event event)", "testcase": false, "constructor": false}, {"identifier": "loadLatest", "parameters": "(Connection connection)", "modifiers": "public static", "return": "Optional<Snapshot>", "signature": "Optional<Snapshot> loadLatest(Connection connection)", "full_signature": "public static Optional<Snapshot> loadLatest(Connection connection)", "class_method_signature": "Snapshot.loadLatest(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "loadBefore", "parameters": "(Connection connection, Instant time)", "modifiers": "public static", "return": "Optional<Snapshot>", "signature": "Optional<Snapshot> loadBefore(Connection connection, Instant time)", "full_signature": "public static Optional<Snapshot> loadBefore(Connection connection, Instant time)", "class_method_signature": "Snapshot.loadBefore(Connection connection, Instant time)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Connection connection)", "modifiers": "public", "return": "void", "signature": "void save(Connection connection)", "full_signature": "public void save(Connection connection)", "class_method_signature": "Snapshot.save(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "deleteAfter", "parameters": "(Connection connection, Snapshot snapshot)", "modifiers": "public static", "return": "void", "signature": "void deleteAfter(Connection connection, Snapshot snapshot)", "full_signature": "public static void deleteAfter(Connection connection, Snapshot snapshot)", "class_method_signature": "Snapshot.deleteAfter(Connection connection, Snapshot snapshot)", "testcase": false, "constructor": false}], "file": "Processor/src/main/java/org/ulyssis/ipp/snapshot/Snapshot.java"}, "focal_method": {"identifier": "getTeamStates", "parameters": "()", "modifiers": "public", "return": "TeamStates", "body": "public TeamStates getTeamStates() {\n        return teamStates;\n    }", "signature": "TeamStates getTeamStates()", "full_signature": "public TeamStates getTeamStates()", "class_method_signature": "Snapshot.getTeamStates()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 32177955, "url": "https://github.com/ULYSSIS-KUL/ipp", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 11, "size": 4814, "license": "licensed"}}