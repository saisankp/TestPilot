{"test_class": {"identifier": "Arrays2Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double NO_DELTA = 0;", "modifier": "static final", "type": "double", "declarator": "NO_DELTA = 0", "var_name": "NO_DELTA"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/utilities/Arrays2Test.java"}, "test_case": {"identifier": "testArrayEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testArrayEquals() {\n        assertTrue(Arrays2.arrayEquals(new int[]{1, 2, 3}, new int[]{1, 2, 3}));\n        assertFalse(Arrays2.arrayEquals(new int[]{1, 2, 3}, new int[]{1, 2}));\n    }", "signature": "void testArrayEquals()", "full_signature": "@Test public void testArrayEquals()", "class_method_signature": "Arrays2Test.testArrayEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "arrayEquals", "assertFalse", "arrayEquals"]}, "focal_class": {"identifier": "Arrays2", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "public static final int[] EMPTY_INT_ARRAY = new int[0];", "modifier": "public static final", "type": "int[]", "declarator": "EMPTY_INT_ARRAY = new int[0]", "var_name": "EMPTY_INT_ARRAY"}, {"original_string": "public static final long[] EMPTY_LONG_ARRAY = new long[0];", "modifier": "public static final", "type": "long[]", "declarator": "EMPTY_LONG_ARRAY = new long[0]", "var_name": "EMPTY_LONG_ARRAY"}, {"original_string": "public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];", "modifier": "public static final", "type": "double[]", "declarator": "EMPTY_DOUBLE_ARRAY = new double[0]", "var_name": "EMPTY_DOUBLE_ARRAY"}, {"original_string": "public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];", "modifier": "public static final", "type": "boolean[]", "declarator": "EMPTY_BOOLEAN_ARRAY = new boolean[0]", "var_name": "EMPTY_BOOLEAN_ARRAY"}], "methods": [{"identifier": "copy", "parameters": "(final double[] sourceArray,\n            final double[] destinationArray, final int length)", "modifiers": "public static", "return": "void", "signature": "void copy(final double[] sourceArray,\n            final double[] destinationArray, final int length)", "full_signature": "public static void copy(final double[] sourceArray,\n            final double[] destinationArray, final int length)", "class_method_signature": "Arrays2.copy(final double[] sourceArray,\n            final double[] destinationArray, final int length)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(final double[] array)", "modifiers": "public static", "return": "void", "signature": "void reverse(final double[] array)", "full_signature": "public static void reverse(final double[] array)", "class_method_signature": "Arrays2.reverse(final double[] array)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(final double[] array, final int start, final int n)", "modifiers": "public static", "return": "void", "signature": "void reverse(final double[] array, final int start, final int n)", "full_signature": "public static void reverse(final double[] array, final int start, final int n)", "class_method_signature": "Arrays2.reverse(final double[] array, final int start, final int n)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(final int[] array)", "modifiers": "public static", "return": "void", "signature": "void reverse(final int[] array)", "full_signature": "public static void reverse(final int[] array)", "class_method_signature": "Arrays2.reverse(final int[] array)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(final int[] array, final int start, final int n)", "modifiers": "public static", "return": "void", "signature": "void reverse(final int[] array, final int start, final int n)", "full_signature": "public static void reverse(final int[] array, final int start, final int n)", "class_method_signature": "Arrays2.reverse(final int[] array, final int start, final int n)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(final Object[] array)", "modifiers": "public static", "return": "void", "signature": "void reverse(final Object[] array)", "full_signature": "public static void reverse(final Object[] array)", "class_method_signature": "Arrays2.reverse(final Object[] array)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(final Object[] array, final int start, final int n)", "modifiers": "public static", "return": "void", "signature": "void reverse(final Object[] array, final int start, final int n)", "full_signature": "public static void reverse(final Object[] array, final int start, final int n)", "class_method_signature": "Arrays2.reverse(final Object[] array, final int start, final int n)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(double array[], int a, int b)", "modifiers": "public static", "return": "void", "signature": "void swap(double array[], int a, int b)", "full_signature": "public static void swap(double array[], int a, int b)", "class_method_signature": "Arrays2.swap(double array[], int a, int b)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int array[], int a, int b)", "modifiers": "public static", "return": "void", "signature": "void swap(int array[], int a, int b)", "full_signature": "public static void swap(int array[], int a, int b)", "class_method_signature": "Arrays2.swap(int array[], int a, int b)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(Object array[], int a, int b)", "modifiers": "public static", "return": "void", "signature": "void swap(Object array[], int a, int b)", "full_signature": "public static void swap(Object array[], int a, int b)", "class_method_signature": "Arrays2.swap(Object array[], int a, int b)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(Object[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(Object[] array)", "full_signature": "public static boolean isNullOrEmpty(Object[] array)", "class_method_signature": "Arrays2.isNullOrEmpty(Object[] array)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(double[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(double[] array)", "full_signature": "public static boolean isNullOrEmpty(double[] array)", "class_method_signature": "Arrays2.isNullOrEmpty(double[] array)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmpty", "parameters": "(int[] array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmpty(int[] array)", "full_signature": "public static boolean isNullOrEmpty(int[] array)", "class_method_signature": "Arrays2.isNullOrEmpty(int[] array)", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(T[] original)", "modifiers": "public static", "return": "T[]", "signature": "T[] copyOf(T[] original)", "full_signature": "public static T[] copyOf(T[] original)", "class_method_signature": "Arrays2.copyOf(T[] original)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(T[] first, T[] second)", "modifiers": "public static", "return": "T[]", "signature": "T[] concat(T[] first, T[] second)", "full_signature": "public static T[] concat(T[] first, T[] second)", "class_method_signature": "Arrays2.concat(T[] first, T[] second)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(double[]... arrays)", "modifiers": "public static", "return": "double[]", "signature": "double[] concat(double[]... arrays)", "full_signature": "public static double[] concat(double[]... arrays)", "class_method_signature": "Arrays2.concat(double[]... arrays)", "testcase": false, "constructor": false}, {"identifier": "compact", "parameters": "(final double[] array)", "modifiers": "public static", "return": "double[]", "signature": "double[] compact(final double[] array)", "full_signature": "public static double[] compact(final double[] array)", "class_method_signature": "Arrays2.compact(final double[] array)", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(double[] array, int shiftsize)", "modifiers": "public static", "return": "void", "signature": "void shift(double[] array, int shiftsize)", "full_signature": "public static void shift(double[] array, int shiftsize)", "class_method_signature": "Arrays2.shift(double[] array, int shiftsize)", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(double[] array, int shiftsize, int fromIndex, int toIndex)", "modifiers": "public static", "return": "void", "signature": "void shift(double[] array, int shiftsize, int fromIndex, int toIndex)", "full_signature": "public static void shift(double[] array, int shiftsize, int fromIndex, int toIndex)", "class_method_signature": "Arrays2.shift(double[] array, int shiftsize, int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(Object o)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArray(Object o)", "full_signature": "public static boolean isArray(Object o)", "class_method_signature": "Arrays2.isArray(Object o)", "testcase": false, "constructor": false}, {"identifier": "arrayEquals", "parameters": "(T oldValue, T newValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean arrayEquals(T oldValue, T newValue)", "full_signature": "public static boolean arrayEquals(T oldValue, T newValue)", "class_method_signature": "Arrays2.arrayEquals(T oldValue, T newValue)", "testcase": false, "constructor": false}, {"identifier": "unmodifiableList", "parameters": "(T... array)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> unmodifiableList(T... array)", "full_signature": "public static List<T> unmodifiableList(T... array)", "class_method_signature": "Arrays2.unmodifiableList(T... array)", "testcase": false, "constructor": false}, {"identifier": "Arrays2", "parameters": "()", "modifiers": "private", "return": "", "signature": " Arrays2()", "full_signature": "private  Arrays2()", "class_method_signature": "Arrays2.Arrays2()", "testcase": false, "constructor": true}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/utilities/Arrays2.java"}, "focal_method": {"identifier": "arrayEquals", "parameters": "(T oldValue, T newValue)", "modifiers": "public static", "return": "boolean", "body": "public static <T> boolean arrayEquals(T oldValue, T newValue) {\n        if (isArray(oldValue) && isArray(newValue) && oldValue.getClass().getComponentType().equals(newValue.getClass().getComponentType())) {\n            Class<?> type = oldValue.getClass().getComponentType();\n            if (type.equals(long.class)) {\n                return Arrays.equals((long[]) oldValue, (long[]) newValue);\n            } else if (type.equals(int.class)) {\n                return Arrays.equals((int[]) oldValue, (int[]) newValue);\n            } else if (type.equals(short.class)) {\n                return Arrays.equals((short[]) oldValue, (short[]) newValue);\n            } else if (type.equals(char.class)) {\n                return Arrays.equals((char[]) oldValue, (char[]) newValue);\n            } else if (type.equals(byte.class)) {\n                return Arrays.equals((byte[]) oldValue, (byte[]) newValue);\n            } else if (type.equals(boolean.class)) {\n                return Arrays.equals((boolean[]) oldValue, (boolean[]) newValue);\n            } else if (type.equals(double.class)) {\n                return Arrays.equals((double[]) oldValue, (double[]) newValue);\n            } else if (type.equals(float.class)) {\n                return Arrays.equals((float[]) oldValue, (float[]) newValue);\n            } else {\n                return Arrays.equals((Object[]) oldValue, (Object[]) newValue);\n            }\n        }\n        return false;\n    }", "signature": "boolean arrayEquals(T oldValue, T newValue)", "full_signature": "public static boolean arrayEquals(T oldValue, T newValue)", "class_method_signature": "Arrays2.arrayEquals(T oldValue, T newValue)", "testcase": false, "constructor": false, "invocations": ["isArray", "isArray", "equals", "getComponentType", "getClass", "getComponentType", "getClass", "getComponentType", "getClass", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}