{"test_class": {"identifier": "TestSessionHelpers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServletContext servletContext;", "modifier": "private", "type": "ServletContext", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private SessionHelpers sessionHelpers;", "modifier": "private", "type": "SessionHelpers", "declarator": "sessionHelpers", "var_name": "sessionHelpers"}, {"original_string": "private SessionManager sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private SessionConfiguration sessionConfiguration;", "modifier": "private", "type": "SessionConfiguration", "declarator": "sessionConfiguration", "var_name": "sessionConfiguration"}], "file": "session-replacement/src/test/java/com/amadeus/session/servlet/TestSessionHelpers.java"}, "test_case": {"identifier": "testInitConfFromServletContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testInitConfFromServletContext() {\n    SessionConfiguration sc = new SessionConfiguration();\n    when(servletContext.getAttribute(SessionHelpers.SESSION_CONFIGURATION)).thenReturn(sc);\n    SessionConfiguration configuration = SessionHelpers.initConf(servletContext);\n    assertEquals(sc, configuration);\n    verify(servletContext, never()).setAttribute(Mockito.eq(SessionHelpers.SESSION_CONFIGURATION), any());\n  }", "signature": "void testInitConfFromServletContext()", "full_signature": "@Test public void testInitConfFromServletContext()", "class_method_signature": "TestSessionHelpers.testInitConfFromServletContext()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAttribute", "initConf", "assertEquals", "setAttribute", "verify", "never", "eq", "any"]}, "focal_class": {"identifier": "SessionHelpers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SessionHelpers.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SessionHelpers.class)", "var_name": "logger"}, {"original_string": "static final String DUMMY_ATTRIBUTE = \"com.amadeus.session.dummy\";", "modifier": "static final", "type": "String", "declarator": "DUMMY_ATTRIBUTE = \"com.amadeus.session.dummy\"", "var_name": "DUMMY_ATTRIBUTE"}, {"original_string": "static final String SESSION_HELPER_METHODS = \"com.amadeus.session.servlet.SessionHelpers.methods\";", "modifier": "static final", "type": "String", "declarator": "SESSION_HELPER_METHODS = \"com.amadeus.session.servlet.SessionHelpers.methods\"", "var_name": "SESSION_HELPER_METHODS"}, {"original_string": "static final String DEFAULT_REPOSITORY_FACTORY = \"com.amadeus.session.repository.inmemory.InMemoryRepositoryFactory\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_REPOSITORY_FACTORY = \"com.amadeus.session.repository.inmemory.InMemoryRepositoryFactory\"", "var_name": "DEFAULT_REPOSITORY_FACTORY"}, {"original_string": "static final String INTROSPECTING_LISTENERS = \"com.amadeus.session.introspected.listeners\";", "modifier": "static final", "type": "String", "declarator": "INTROSPECTING_LISTENERS = \"com.amadeus.session.introspected.listeners\"", "var_name": "INTROSPECTING_LISTENERS"}, {"original_string": "static final String REQUEST_WRAPPED_ATTRIBUTE = HttpRequestWrapper.class.getName();", "modifier": "static final", "type": "String", "declarator": "REQUEST_WRAPPED_ATTRIBUTE = HttpRequestWrapper.class.getName()", "var_name": "REQUEST_WRAPPED_ATTRIBUTE"}, {"original_string": "static final String SESSION_CONFIGURATION = SessionConfiguration.class.getName();", "modifier": "static final", "type": "String", "declarator": "SESSION_CONFIGURATION = SessionConfiguration.class.getName()", "var_name": "SESSION_CONFIGURATION"}, {"original_string": "static final String SESSION_HELPERS = SessionHelpers.class.getName();", "modifier": "static final", "type": "String", "declarator": "SESSION_HELPERS = SessionHelpers.class.getName()", "var_name": "SESSION_HELPERS"}, {"original_string": "private boolean interceptListeners;", "modifier": "private", "type": "boolean", "declarator": "interceptListeners", "var_name": "interceptListeners"}], "methods": [{"identifier": "prepareRequest", "parameters": "(ServletRequest request, ServletResponse response,\n      ServletContext originalServletContext)", "modifiers": "public", "return": "ServletRequest", "signature": "ServletRequest prepareRequest(ServletRequest request, ServletResponse response,\n      ServletContext originalServletContext)", "full_signature": "public ServletRequest prepareRequest(ServletRequest request, ServletResponse response,\n      ServletContext originalServletContext)", "class_method_signature": "SessionHelpers.prepareRequest(ServletRequest request, ServletResponse response,\n      ServletContext originalServletContext)", "testcase": false, "constructor": false}, {"identifier": "wrapResponse", "parameters": "(ServletResponse response, HttpRequestWrapper wrappedRequest)", "modifiers": "private static", "return": "HttpResponseWrapper", "signature": "HttpResponseWrapper wrapResponse(ServletResponse response, HttpRequestWrapper wrappedRequest)", "full_signature": "private static HttpResponseWrapper wrapResponse(ServletResponse response, HttpRequestWrapper wrappedRequest)", "class_method_signature": "SessionHelpers.wrapResponse(ServletResponse response, HttpRequestWrapper wrappedRequest)", "testcase": false, "constructor": false}, {"identifier": "wrapRequest", "parameters": "(ServletRequest request, ServletContext servletContext)", "modifiers": "private static", "return": "HttpRequestWrapper", "signature": "HttpRequestWrapper wrapRequest(ServletRequest request, ServletContext servletContext)", "full_signature": "private static HttpRequestWrapper wrapRequest(ServletRequest request, ServletContext servletContext)", "class_method_signature": "SessionHelpers.wrapRequest(ServletRequest request, ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "prepareResponse", "parameters": "(ServletRequest request, ServletResponse response)", "modifiers": "public", "return": "ServletResponse", "signature": "ServletResponse prepareResponse(ServletRequest request, ServletResponse response)", "full_signature": "public ServletResponse prepareResponse(ServletRequest request, ServletResponse response)", "class_method_signature": "SessionHelpers.prepareResponse(ServletRequest request, ServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "initSessionManagement", "parameters": "(ServletContext servletContext)", "modifiers": "public", "return": "MethodHandle[]", "signature": "MethodHandle[] initSessionManagement(ServletContext servletContext)", "full_signature": "public MethodHandle[] initSessionManagement(ServletContext servletContext)", "class_method_signature": "SessionHelpers.initSessionManagement(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initSessionManagement", "parameters": "(ServletContext servletContext, boolean reset)", "modifiers": "public", "return": "MethodHandle[]", "signature": "MethodHandle[] initSessionManagement(ServletContext servletContext, boolean reset)", "full_signature": "public MethodHandle[] initSessionManagement(ServletContext servletContext, boolean reset)", "class_method_signature": "SessionHelpers.initSessionManagement(ServletContext servletContext, boolean reset)", "testcase": false, "constructor": false}, {"identifier": "prepareMethodCalls", "parameters": "(ServletContext servletContext)", "modifiers": "private", "return": "MethodHandle[]", "signature": "MethodHandle[] prepareMethodCalls(ServletContext servletContext)", "full_signature": "private MethodHandle[] prepareMethodCalls(ServletContext servletContext)", "class_method_signature": "SessionHelpers.prepareMethodCalls(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "getTracking", "parameters": "(ServletContext servletContext, SessionConfiguration sessionConfiguration)", "modifiers": "static", "return": "SessionTracking", "signature": "SessionTracking getTracking(ServletContext servletContext, SessionConfiguration sessionConfiguration)", "full_signature": "static SessionTracking getTracking(ServletContext servletContext, SessionConfiguration sessionConfiguration)", "class_method_signature": "SessionHelpers.getTracking(ServletContext servletContext, SessionConfiguration sessionConfiguration)", "testcase": false, "constructor": false}, {"identifier": "trackingFromEnum", "parameters": "(String sessionTracking)", "modifiers": "static", "return": "SessionTracking", "signature": "SessionTracking trackingFromEnum(String sessionTracking)", "full_signature": "static SessionTracking trackingFromEnum(String sessionTracking)", "class_method_signature": "SessionHelpers.trackingFromEnum(String sessionTracking)", "testcase": false, "constructor": false}, {"identifier": "repository", "parameters": "(ServletContext servletContext, SessionConfiguration conf)", "modifiers": "static", "return": "SessionRepository", "signature": "SessionRepository repository(ServletContext servletContext, SessionConfiguration conf)", "full_signature": "static SessionRepository repository(ServletContext servletContext, SessionConfiguration conf)", "class_method_signature": "SessionHelpers.repository(ServletContext servletContext, SessionConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "repositoryOrDefault", "parameters": "(String repositoryFactory, ServletContext context,\n      SessionConfiguration conf)", "modifiers": "static", "return": "SessionRepository", "signature": "SessionRepository repositoryOrDefault(String repositoryFactory, ServletContext context,\n      SessionConfiguration conf)", "full_signature": "static SessionRepository repositoryOrDefault(String repositoryFactory, ServletContext context,\n      SessionConfiguration conf)", "class_method_signature": "SessionHelpers.repositoryOrDefault(String repositoryFactory, ServletContext context,\n      SessionConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(ServletContext servletContext, String implementationClass)", "modifiers": "private static", "return": "Object", "signature": "Object newInstance(ServletContext servletContext, String implementationClass)", "full_signature": "private static Object newInstance(ServletContext servletContext, String implementationClass)", "class_method_signature": "SessionHelpers.newInstance(ServletContext servletContext, String implementationClass)", "testcase": false, "constructor": false}, {"identifier": "classLoader", "parameters": "(ServletContext servletContext)", "modifiers": "private static", "return": "ClassLoader", "signature": "ClassLoader classLoader(ServletContext servletContext)", "full_signature": "private static ClassLoader classLoader(ServletContext servletContext)", "class_method_signature": "SessionHelpers.classLoader(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "initConf", "parameters": "(final ServletContext context)", "modifiers": "static", "return": "SessionConfiguration", "signature": "SessionConfiguration initConf(final ServletContext context)", "full_signature": "static SessionConfiguration initConf(final ServletContext context)", "class_method_signature": "SessionHelpers.initConf(final ServletContext context)", "testcase": false, "constructor": false}, {"identifier": "commitRequest", "parameters": "(ServletRequest request, ServletRequest oldRequest)", "modifiers": "public", "return": "void", "signature": "void commitRequest(ServletRequest request, ServletRequest oldRequest)", "full_signature": "public void commitRequest(ServletRequest request, ServletRequest oldRequest)", "class_method_signature": "SessionHelpers.commitRequest(ServletRequest request, ServletRequest oldRequest)", "testcase": false, "constructor": false}, {"identifier": "findListenersByIntercepting", "parameters": "(ServletContext context, HttpServletRequest request)", "modifiers": "static", "return": "void", "signature": "void findListenersByIntercepting(ServletContext context, HttpServletRequest request)", "full_signature": "static void findListenersByIntercepting(ServletContext context, HttpServletRequest request)", "class_method_signature": "SessionHelpers.findListenersByIntercepting(ServletContext context, HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "interceptHttpListener", "parameters": "(EventListener caller, HttpSessionEvent event)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void interceptHttpListener(EventListener caller, HttpSessionEvent event)", "full_signature": "@SuppressWarnings(\"unchecked\") public void interceptHttpListener(EventListener caller, HttpSessionEvent event)", "class_method_signature": "SessionHelpers.interceptHttpListener(EventListener caller, HttpSessionEvent event)", "testcase": false, "constructor": false}, {"identifier": "getDescriptor", "parameters": "(ServletContext servletContext)", "modifiers": "private", "return": "ServletContextDescriptor", "signature": "ServletContextDescriptor getDescriptor(ServletContext servletContext)", "full_signature": "private ServletContextDescriptor getDescriptor(ServletContext servletContext)", "class_method_signature": "SessionHelpers.getDescriptor(ServletContext servletContext)", "testcase": false, "constructor": false}, {"identifier": "onAddListener", "parameters": "(ServletContext servletContext, Object listener)", "modifiers": "public", "return": "void", "signature": "void onAddListener(ServletContext servletContext, Object listener)", "full_signature": "public void onAddListener(ServletContext servletContext, Object listener)", "class_method_signature": "SessionHelpers.onAddListener(ServletContext servletContext, Object listener)", "testcase": false, "constructor": false}, {"identifier": "setupContext", "parameters": "(ServletContext context)", "modifiers": "static", "return": "void", "signature": "void setupContext(ServletContext context)", "full_signature": "static void setupContext(ServletContext context)", "class_method_signature": "SessionHelpers.setupContext(ServletContext context)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/servlet/SessionHelpers.java"}, "focal_method": {"identifier": "initConf", "parameters": "(final ServletContext context)", "modifiers": "static", "return": "SessionConfiguration", "body": "static SessionConfiguration initConf(final ServletContext context) {\n    SessionConfiguration sessionConfiguration = (SessionConfiguration)context.getAttribute(SESSION_CONFIGURATION);\n    if (sessionConfiguration == null) {\n      sessionConfiguration = new SessionConfiguration();\n      context.setAttribute(SESSION_CONFIGURATION, sessionConfiguration);\n      WebXmlParser.parseWebXml(sessionConfiguration, context);\n      sessionConfiguration.initializeFrom(new SessionConfiguration.AttributeProvider() {\n        @Override\n        public String getAttribute(String key) {\n          return context.getInitParameter(key);\n        }\n\n        @Override\n        public Object source() {\n          return context.getContextPath();\n        }\n      });\n      // If namespace was not available, set namespace to context path of the\n      // webapp.\n      if (sessionConfiguration.getTrueNamespace() == null) {\n        sessionConfiguration.setNamespace(context.getContextPath());\n      }\n    }\n    return sessionConfiguration;\n  }", "signature": "SessionConfiguration initConf(final ServletContext context)", "full_signature": "static SessionConfiguration initConf(final ServletContext context)", "class_method_signature": "SessionHelpers.initConf(final ServletContext context)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "setAttribute", "parseWebXml", "initializeFrom", "getInitParameter", "getContextPath", "getTrueNamespace", "setNamespace", "getContextPath"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}