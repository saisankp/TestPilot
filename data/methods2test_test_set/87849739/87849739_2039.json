{"test_class": {"identifier": "QueryThingsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KNOWN_FIELDS = \"thingId\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_FIELDS = \"thingId\"", "var_name": "KNOWN_FIELDS"}, {"original_string": "private static final String JSON_ALL_FIELDS_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, QueryThings.TYPE)\n            .set(QueryThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(QueryThings.JSON_OPTIONS, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_OPT_1)\n                    .add(TestConstants.KNOWN_OPT_2)\n                    .build())\n            .set(QueryThings.JSON_FIELDS, KNOWN_FIELDS)\n            .set(QueryThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build()\n            .toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_ALL_FIELDS_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, QueryThings.TYPE)\n            .set(QueryThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(QueryThings.JSON_OPTIONS, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_OPT_1)\n                    .add(TestConstants.KNOWN_OPT_2)\n                    .build())\n            .set(QueryThings.JSON_FIELDS, KNOWN_FIELDS)\n            .set(QueryThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build()\n            .toString()", "var_name": "JSON_ALL_FIELDS_V2"}, {"original_string": "private static final String JSON_ALL_FIELDS_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, QueryThings.NAME)\n            .set(QueryThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(QueryThings.JSON_OPTIONS, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_OPT_1)\n                    .add(TestConstants.KNOWN_OPT_2)\n                    .build())\n            .set(QueryThings.JSON_FIELDS, KNOWN_FIELDS)\n            .set(QueryThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build()\n            .toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_ALL_FIELDS_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, QueryThings.NAME)\n            .set(QueryThings.JSON_FILTER, TestConstants.KNOWN_FILTER_STR)\n            .set(QueryThings.JSON_OPTIONS, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_OPT_1)\n                    .add(TestConstants.KNOWN_OPT_2)\n                    .build())\n            .set(QueryThings.JSON_FIELDS, KNOWN_FIELDS)\n            .set(QueryThings.JSON_NAMESPACES, JsonFactory.newArrayBuilder()\n                    .add(TestConstants.KNOWN_NAMESPACE)\n                    .build())\n            .build()\n            .toString()", "var_name": "JSON_ALL_FIELDS_V1"}, {"original_string": "private static final String JSON_MINIMAL_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, QueryThings.TYPE)\n            .build().toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_MINIMAL_V2 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.TYPE, QueryThings.TYPE)\n            .build().toString()", "var_name": "JSON_MINIMAL_V2"}, {"original_string": "private static final String JSON_MINIMAL_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, QueryThings.NAME)\n            .build().toString();", "modifier": "private static final", "type": "String", "declarator": "JSON_MINIMAL_V1 = JsonFactory.newObjectBuilder()\n            .set(ThingSearchCommand.JsonFields.ID, QueryThings.NAME)\n            .build().toString()", "var_name": "JSON_MINIMAL_V1"}], "file": "signals/commands/thingsearch/src/test/java/org/eclipse/ditto/signals/commands/thingsearch/query/QueryThingsTest.java"}, "test_case": {"identifier": "toJsonWithAllFieldsSetV1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toJsonWithAllFieldsSetV1() {\n        final QueryThings command = QueryThings.of(TestConstants.KNOWN_FILTER_STR,\n                Arrays.asList(TestConstants.KNOWN_OPT_1, TestConstants.KNOWN_OPT_2),\n                JsonFactory.newFieldSelector(KNOWN_FIELDS, TestConstants.JSON_PARSE_OPTIONS),\n                TestConstants.KNOWN_NAMESPACES_SET,\n                DittoHeaders.empty());\n\n        final String json = command.toJsonString(JsonSchemaVersion.V_1, FieldType.regularOrSpecial());\n        assertThat(json).isEqualTo(JSON_ALL_FIELDS_V1);\n    }", "signature": "void toJsonWithAllFieldsSetV1()", "full_signature": "@Test public void toJsonWithAllFieldsSetV1()", "class_method_signature": "QueryThingsTest.toJsonWithAllFieldsSetV1()", "testcase": true, "constructor": false, "invocations": ["of", "asList", "newFieldSelector", "empty", "toJsonString", "regularOrSpecial", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "QueryThings", "superclass": "extends AbstractCommand<QueryThings>", "interfaces": "implements ThingSearchQueryCommand<QueryThings>", "fields": [{"original_string": "public static final String NAME = \"queryThings\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"queryThings\"", "var_name": "NAME"}, {"original_string": "public static final String TYPE = TYPE_PREFIX + NAME;", "modifier": "public static final", "type": "String", "declarator": "TYPE = TYPE_PREFIX + NAME", "var_name": "TYPE"}, {"original_string": "static final JsonFieldDefinition<String> JSON_FILTER =\n            JsonFactory.newStringFieldDefinition(\"filter\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<String>", "declarator": "JSON_FILTER =\n            JsonFactory.newStringFieldDefinition(\"filter\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2)", "var_name": "JSON_FILTER"}, {"original_string": "static final JsonFieldDefinition<JsonArray> JSON_OPTIONS =\n            JsonFactory.newJsonArrayFieldDefinition(\"options\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<JsonArray>", "declarator": "JSON_OPTIONS =\n            JsonFactory.newJsonArrayFieldDefinition(\"options\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2)", "var_name": "JSON_OPTIONS"}, {"original_string": "static final JsonFieldDefinition<String> JSON_FIELDS =\n            JsonFactory.newStringFieldDefinition(\"fields\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<String>", "declarator": "JSON_FIELDS =\n            JsonFactory.newStringFieldDefinition(\"fields\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2)", "var_name": "JSON_FIELDS"}, {"original_string": "static final JsonFieldDefinition<JsonArray> JSON_NAMESPACES =\n            JsonFactory.newJsonArrayFieldDefinition(\"namespaces\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<JsonArray>", "declarator": "JSON_NAMESPACES =\n            JsonFactory.newJsonArrayFieldDefinition(\"namespaces\", FieldType.REGULAR, JsonSchemaVersion.V_1,\n                    JsonSchemaVersion.V_2)", "var_name": "JSON_NAMESPACES"}, {"original_string": "@Nullable private final String filter;", "modifier": "@Nullable private final", "type": "String", "declarator": "filter", "var_name": "filter"}, {"original_string": "@Nullable private final List<String> options;", "modifier": "@Nullable private final", "type": "List<String>", "declarator": "options", "var_name": "options"}, {"original_string": "@Nullable private final JsonFieldSelector fields;", "modifier": "@Nullable private final", "type": "JsonFieldSelector", "declarator": "fields", "var_name": "fields"}, {"original_string": "@Nullable private final Set<String> namespaces;", "modifier": "@Nullable private final", "type": "Set<String>", "declarator": "namespaces", "var_name": "namespaces"}], "methods": [{"identifier": "QueryThings", "parameters": "(final DittoHeaders dittoHeaders,\n            @Nullable final String filter,\n            @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields,\n            @Nullable final Collection<String> namespaces)", "modifiers": "private", "return": "", "signature": " QueryThings(final DittoHeaders dittoHeaders,\n            @Nullable final String filter,\n            @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields,\n            @Nullable final Collection<String> namespaces)", "full_signature": "private  QueryThings(final DittoHeaders dittoHeaders,\n            @Nullable final String filter,\n            @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields,\n            @Nullable final Collection<String> namespaces)", "class_method_signature": "QueryThings.QueryThings(final DittoHeaders dittoHeaders,\n            @Nullable final String filter,\n            @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields,\n            @Nullable final Collection<String> namespaces)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "QueryThings", "signature": "QueryThings of(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static QueryThings of(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "QueryThings.of(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "QueryThings", "signature": "QueryThings of(final DittoHeaders dittoHeaders)", "full_signature": "public static QueryThings of(final DittoHeaders dittoHeaders)", "class_method_signature": "QueryThings.of(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final String jsonString, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "QueryThings", "signature": "QueryThings fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "full_signature": "public static QueryThings fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "class_method_signature": "QueryThings.fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "QueryThings", "signature": "QueryThings fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "full_signature": "public static QueryThings fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "class_method_signature": "QueryThings.fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "()", "modifiers": "@Override public", "return": "Optional<String>", "signature": "Optional<String> getFilter()", "full_signature": "@Override public Optional<String> getFilter()", "class_method_signature": "QueryThings.getFilter()", "testcase": false, "constructor": false}, {"identifier": "getOptions", "parameters": "()", "modifiers": "public", "return": "Optional<List<String>>", "signature": "Optional<List<String>> getOptions()", "full_signature": "public Optional<List<String>> getOptions()", "class_method_signature": "QueryThings.getOptions()", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "public", "return": "Optional<JsonFieldSelector>", "signature": "Optional<JsonFieldSelector> getFields()", "full_signature": "public Optional<JsonFieldSelector> getFields()", "class_method_signature": "QueryThings.getFields()", "testcase": false, "constructor": false}, {"identifier": "getNamespaces", "parameters": "()", "modifiers": "@Override public", "return": "Optional<Set<String>>", "signature": "Optional<Set<String>> getNamespaces()", "full_signature": "@Override public Optional<Set<String>> getNamespaces()", "class_method_signature": "QueryThings.getNamespaces()", "testcase": false, "constructor": false}, {"identifier": "setNamespaces", "parameters": "(@Nullable final Collection<String> namespaces)", "modifiers": "@Override public", "return": "QueryThings", "signature": "QueryThings setNamespaces(@Nullable final Collection<String> namespaces)", "full_signature": "@Override public QueryThings setNamespaces(@Nullable final Collection<String> namespaces)", "class_method_signature": "QueryThings.setNamespaces(@Nullable final Collection<String> namespaces)", "testcase": false, "constructor": false}, {"identifier": "appendPayload", "parameters": "(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "modifiers": "@Override protected", "return": "void", "signature": "void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "full_signature": "@Override protected void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "class_method_signature": "QueryThings.appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "QueryThings", "signature": "QueryThings setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public QueryThings setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "QueryThings.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "QueryThings.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "QueryThings.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "QueryThings.toString()", "testcase": false, "constructor": false}], "file": "signals/commands/thingsearch/src/main/java/org/eclipse/ditto/signals/commands/thingsearch/query/QueryThings.java"}, "focal_method": {"identifier": "of", "parameters": "(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "QueryThings", "body": "public static QueryThings of(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders) {\n        return new QueryThings(dittoHeaders, filter, options, fields, namespaces);\n    }", "signature": "QueryThings of(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static QueryThings of(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "QueryThings.of(@Nullable final String filter, @Nullable final List<String> options,\n            @Nullable final JsonFieldSelector fields, @Nullable final Set<String> namespaces,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}