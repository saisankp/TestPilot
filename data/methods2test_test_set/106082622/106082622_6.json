{"test_class": {"identifier": "UploadManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/plugin/UploadManagerTest.java"}, "test_case": {"identifier": "testHandleFilterUpload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleFilterUpload() throws IOException {\n        // Make a temp directory\n        final Path tempDirectory = Files.createTempDirectory(null);\n\n        // Create a \"multi-part\" file\n        final String mockContent = \"test content\";\n        final MockMultipartFile myFile = new MockMultipartFile(\n            \"data\",\n            \"filename.txt\",\n            \"text/plain\",\n            mockContent.getBytes(StandardCharsets.UTF_8)\n        );\n\n        final String outputFilename = \"MyUpload.jar\";\n        final String expectedUploadedPath = tempDirectory.toString() + \"/filters/\" + outputFilename;\n\n        // Create manager\n        final UploadManager uploadManager = new UploadManager(tempDirectory.toString());\n\n        // Handle the \"upload\"\n        final String result = uploadManager.handleFilterUpload(myFile, outputFilename);\n\n        // Validate\n        assertEquals(\"Has expected result filename\", expectedUploadedPath, result);\n\n        // Validate contents\n        final byte[] contentBytes = Files.readAllBytes(new File(result).toPath());\n        final String contentString = new String(contentBytes, StandardCharsets.UTF_8);\n        assertEquals(\"Contents are expected\", mockContent, contentString);\n    }", "signature": "void testHandleFilterUpload()", "full_signature": "@Test public void testHandleFilterUpload()", "class_method_signature": "UploadManagerTest.testHandleFilterUpload()", "testcase": true, "constructor": false, "invocations": ["createTempDirectory", "getBytes", "toString", "toString", "handleFilterUpload", "assertEquals", "readAllBytes", "toPath", "assertEquals"]}, "focal_class": {"identifier": "UploadManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(UploadManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(UploadManager.class)", "var_name": "logger"}, {"original_string": "private final String deserializerUploadPath;", "modifier": "private final", "type": "String", "declarator": "deserializerUploadPath", "var_name": "deserializerUploadPath"}, {"original_string": "private final String filterUploadPath;", "modifier": "private final", "type": "String", "declarator": "filterUploadPath", "var_name": "filterUploadPath"}, {"original_string": "private final String keyStoreUploadPath;", "modifier": "private final", "type": "String", "declarator": "keyStoreUploadPath", "var_name": "keyStoreUploadPath"}], "methods": [{"identifier": "UploadManager", "parameters": "(final String uploadPath)", "modifiers": "public", "return": "", "signature": " UploadManager(final String uploadPath)", "full_signature": "public  UploadManager(final String uploadPath)", "class_method_signature": "UploadManager.UploadManager(final String uploadPath)", "testcase": false, "constructor": true}, {"identifier": "getDeserializerUploadPath", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getDeserializerUploadPath()", "full_signature": " String getDeserializerUploadPath()", "class_method_signature": "UploadManager.getDeserializerUploadPath()", "testcase": false, "constructor": false}, {"identifier": "getFilterUploadPath", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getFilterUploadPath()", "full_signature": " String getFilterUploadPath()", "class_method_signature": "UploadManager.getFilterUploadPath()", "testcase": false, "constructor": false}, {"identifier": "getKeyStoreUploadPath", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getKeyStoreUploadPath()", "full_signature": " String getKeyStoreUploadPath()", "class_method_signature": "UploadManager.getKeyStoreUploadPath()", "testcase": false, "constructor": false}, {"identifier": "handleDeserializerUpload", "parameters": "(final MultipartFile file, final String outFileName)", "modifiers": "public", "return": "String", "signature": "String handleDeserializerUpload(final MultipartFile file, final String outFileName)", "full_signature": "public String handleDeserializerUpload(final MultipartFile file, final String outFileName)", "class_method_signature": "UploadManager.handleDeserializerUpload(final MultipartFile file, final String outFileName)", "testcase": false, "constructor": false}, {"identifier": "handleFilterUpload", "parameters": "(final MultipartFile file, final String outFileName)", "modifiers": "public", "return": "String", "signature": "String handleFilterUpload(final MultipartFile file, final String outFileName)", "full_signature": "public String handleFilterUpload(final MultipartFile file, final String outFileName)", "class_method_signature": "UploadManager.handleFilterUpload(final MultipartFile file, final String outFileName)", "testcase": false, "constructor": false}, {"identifier": "handleKeystoreUpload", "parameters": "(final MultipartFile file, final String outFileName)", "modifiers": "public", "return": "String", "signature": "String handleKeystoreUpload(final MultipartFile file, final String outFileName)", "full_signature": "public String handleKeystoreUpload(final MultipartFile file, final String outFileName)", "class_method_signature": "UploadManager.handleKeystoreUpload(final MultipartFile file, final String outFileName)", "testcase": false, "constructor": false}, {"identifier": "deleteKeyStore", "parameters": "(final String keyStoreFile)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteKeyStore(final String keyStoreFile)", "full_signature": "public boolean deleteKeyStore(final String keyStoreFile)", "class_method_signature": "UploadManager.deleteKeyStore(final String keyStoreFile)", "testcase": false, "constructor": false}, {"identifier": "deleteFile", "parameters": "(final String filename, final String rootPath)", "modifiers": "private", "return": "boolean", "signature": "boolean deleteFile(final String filename, final String rootPath)", "full_signature": "private boolean deleteFile(final String filename, final String rootPath)", "class_method_signature": "UploadManager.deleteFile(final String filename, final String rootPath)", "testcase": false, "constructor": false}, {"identifier": "handleFileUpload", "parameters": "(final MultipartFile file, final String outFileName, final String rootPath)", "modifiers": "private", "return": "String", "signature": "String handleFileUpload(final MultipartFile file, final String outFileName, final String rootPath)", "full_signature": "private String handleFileUpload(final MultipartFile file, final String outFileName, final String rootPath)", "class_method_signature": "UploadManager.handleFileUpload(final MultipartFile file, final String outFileName, final String rootPath)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/plugin/UploadManager.java"}, "focal_method": {"identifier": "handleFilterUpload", "parameters": "(final MultipartFile file, final String outFileName)", "modifiers": "public", "return": "String", "body": "public String handleFilterUpload(final MultipartFile file, final String outFileName) throws IOException {\n        return handleFileUpload(file, outFileName, getFilterUploadPath());\n    }", "signature": "String handleFilterUpload(final MultipartFile file, final String outFileName)", "full_signature": "public String handleFilterUpload(final MultipartFile file, final String outFileName)", "class_method_signature": "UploadManager.handleFilterUpload(final MultipartFile file, final String outFileName)", "testcase": false, "constructor": false, "invocations": ["handleFileUpload", "getFilterUploadPath"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}