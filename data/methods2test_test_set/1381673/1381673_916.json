{"test_class": {"identifier": "ModelBuilderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ReleaseId RELEASE_ID = new ReleaseIdImpl(\"group:artifact:version\");", "modifier": "private static final", "type": "ReleaseId", "declarator": "RELEASE_ID = new ReleaseIdImpl(\"group:artifact:version\")", "var_name": "RELEASE_ID"}, {"original_string": "private  static final  KnowledgeBuilderConfigurationImpl CONFIGURATION = new KnowledgeBuilderConfigurationImpl(ModelBuilderImplTest.class.getClassLoader());", "modifier": "private  static final", "type": "KnowledgeBuilderConfigurationImpl", "declarator": "CONFIGURATION = new KnowledgeBuilderConfigurationImpl(ModelBuilderImplTest.class.getClassLoader())", "var_name": "CONFIGURATION"}, {"original_string": "private InternalKnowledgePackage internalKnowledgePackage;", "modifier": "private", "type": "InternalKnowledgePackage", "declarator": "internalKnowledgePackage", "var_name": "internalKnowledgePackage"}, {"original_string": "private PackageRegistry packageRegistry;", "modifier": "private", "type": "PackageRegistry", "declarator": "packageRegistry", "var_name": "packageRegistry"}, {"original_string": "private ModelBuilderImpl<PackageSources> modelBuilder;", "modifier": "private", "type": "ModelBuilderImpl<PackageSources>", "declarator": "modelBuilder", "var_name": "modelBuilder"}], "file": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/builder/ModelBuilderImplTest.java"}, "test_case": {"identifier": "getPackageModelWithPkgUUID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPackageModelWithPkgUUID() {\n        String pkgUUID = generateUUID();\n        PackageDescr packageDescr = getPackageDescr(pkgUUID);\n        PackageModel retrieved =  modelBuilder.getPackageModel(packageDescr, packageRegistry, internalKnowledgePackage.getName());\n        assertNotNull(retrieved);\n        assertEquals(pkgUUID, retrieved.getPackageUUID());\n    }", "signature": "void getPackageModelWithPkgUUID()", "full_signature": "@Test public void getPackageModelWithPkgUUID()", "class_method_signature": "ModelBuilderImplTest.getPackageModelWithPkgUUID()", "testcase": true, "constructor": false, "invocations": ["generateUUID", "getPackageDescr", "getPackageModel", "getName", "assertNotNull", "assertEquals", "getPackageUUID"]}, "focal_class": {"identifier": "ModelBuilderImpl", "superclass": "extends KnowledgeBuilderImpl", "interfaces": "", "fields": [{"original_string": "private final DRLIdGenerator exprIdGenerator = new DRLIdGenerator();", "modifier": "private final", "type": "DRLIdGenerator", "declarator": "exprIdGenerator = new DRLIdGenerator()", "var_name": "exprIdGenerator"}, {"original_string": "private final Function<PackageModel, T> sourcesGenerator;", "modifier": "private final", "type": "Function<PackageModel, T>", "declarator": "sourcesGenerator", "var_name": "sourcesGenerator"}, {"original_string": "private final Map<String, PackageModel> packageModels = new HashMap<>();", "modifier": "private final", "type": "Map<String, PackageModel>", "declarator": "packageModels = new HashMap<>()", "var_name": "packageModels"}, {"original_string": "private final ReleaseId releaseId;", "modifier": "private final", "type": "ReleaseId", "declarator": "releaseId", "var_name": "releaseId"}, {"original_string": "private final boolean isPattern;", "modifier": "private final", "type": "boolean", "declarator": "isPattern", "var_name": "isPattern"}, {"original_string": "private final boolean oneClassPerRule;", "modifier": "private final", "type": "boolean", "declarator": "oneClassPerRule", "var_name": "oneClassPerRule"}, {"original_string": "private final Collection<T> packageSources = new ArrayList<>();", "modifier": "private final", "type": "Collection<T>", "declarator": "packageSources = new ArrayList<>()", "var_name": "packageSources"}, {"original_string": "private Collection<CompositePackageDescr> compositePackages;", "modifier": "private", "type": "Collection<CompositePackageDescr>", "declarator": "compositePackages", "var_name": "compositePackages"}, {"original_string": "private Map<String, CompositePackageDescr> compositePackagesMap;", "modifier": "private", "type": "Map<String, CompositePackageDescr>", "declarator": "compositePackagesMap", "var_name": "compositePackagesMap"}], "methods": [{"identifier": "ModelBuilderImpl", "parameters": "(Function<PackageModel, T> sourcesGenerator, KnowledgeBuilderConfigurationImpl configuration, ReleaseId releaseId, boolean isPattern, boolean oneClassPerRule)", "modifiers": "public", "return": "", "signature": " ModelBuilderImpl(Function<PackageModel, T> sourcesGenerator, KnowledgeBuilderConfigurationImpl configuration, ReleaseId releaseId, boolean isPattern, boolean oneClassPerRule)", "full_signature": "public  ModelBuilderImpl(Function<PackageModel, T> sourcesGenerator, KnowledgeBuilderConfigurationImpl configuration, ReleaseId releaseId, boolean isPattern, boolean oneClassPerRule)", "class_method_signature": "ModelBuilderImpl.ModelBuilderImpl(Function<PackageModel, T> sourcesGenerator, KnowledgeBuilderConfigurationImpl configuration, ReleaseId releaseId, boolean isPattern, boolean oneClassPerRule)", "testcase": false, "constructor": true}, {"identifier": "buildPackages", "parameters": "(Collection<CompositePackageDescr> packages)", "modifiers": "@Override public", "return": "void", "signature": "void buildPackages(Collection<CompositePackageDescr> packages)", "full_signature": "@Override public void buildPackages(Collection<CompositePackageDescr> packages)", "class_method_signature": "ModelBuilderImpl.buildPackages(Collection<CompositePackageDescr> packages)", "testcase": false, "constructor": false}, {"identifier": "addPackage", "parameters": "(final PackageDescr packageDescr)", "modifiers": "@Override public", "return": "void", "signature": "void addPackage(final PackageDescr packageDescr)", "full_signature": "@Override public void addPackage(final PackageDescr packageDescr)", "class_method_signature": "ModelBuilderImpl.addPackage(final PackageDescr packageDescr)", "testcase": false, "constructor": false}, {"identifier": "postBuild", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void postBuild()", "full_signature": "@Override public void postBuild()", "class_method_signature": "ModelBuilderImpl.postBuild()", "testcase": false, "constructor": false}, {"identifier": "processOtherDeclarations", "parameters": "(PackageRegistry pkgRegistry, PackageDescr packageDescr)", "modifiers": "protected", "return": "void", "signature": "void processOtherDeclarations(PackageRegistry pkgRegistry, PackageDescr packageDescr)", "full_signature": "protected void processOtherDeclarations(PackageRegistry pkgRegistry, PackageDescr packageDescr)", "class_method_signature": "ModelBuilderImpl.processOtherDeclarations(PackageRegistry pkgRegistry, PackageDescr packageDescr)", "testcase": false, "constructor": false}, {"identifier": "findPackages", "parameters": "()", "modifiers": "private", "return": "Collection<CompositePackageDescr>", "signature": "Collection<CompositePackageDescr> findPackages()", "full_signature": "private Collection<CompositePackageDescr> findPackages()", "class_method_signature": "ModelBuilderImpl.findPackages()", "testcase": false, "constructor": false}, {"identifier": "initPackageRegistries", "parameters": "(Collection<CompositePackageDescr> packages)", "modifiers": "@Override protected", "return": "void", "signature": "void initPackageRegistries(Collection<CompositePackageDescr> packages)", "full_signature": "@Override protected void initPackageRegistries(Collection<CompositePackageDescr> packages)", "class_method_signature": "ModelBuilderImpl.initPackageRegistries(Collection<CompositePackageDescr> packages)", "testcase": false, "constructor": false}, {"identifier": "registerTypeDeclarations", "parameters": "( Collection<CompositePackageDescr> packages )", "modifiers": "private", "return": "void", "signature": "void registerTypeDeclarations( Collection<CompositePackageDescr> packages )", "full_signature": "private void registerTypeDeclarations( Collection<CompositePackageDescr> packages )", "class_method_signature": "ModelBuilderImpl.registerTypeDeclarations( Collection<CompositePackageDescr> packages )", "testcase": false, "constructor": false}, {"identifier": "processTypeDeclarationDescr", "parameters": "(InternalKnowledgePackage pkg, AbstractClassTypeDeclarationDescr typeDescr)", "modifiers": "private", "return": "void", "signature": "void processTypeDeclarationDescr(InternalKnowledgePackage pkg, AbstractClassTypeDeclarationDescr typeDescr)", "full_signature": "private void processTypeDeclarationDescr(InternalKnowledgePackage pkg, AbstractClassTypeDeclarationDescr typeDescr)", "class_method_signature": "ModelBuilderImpl.processTypeDeclarationDescr(InternalKnowledgePackage pkg, AbstractClassTypeDeclarationDescr typeDescr)", "testcase": false, "constructor": false}, {"identifier": "deregisterTypeDeclarations", "parameters": "( Collection<CompositePackageDescr> packages )", "modifiers": "private", "return": "void", "signature": "void deregisterTypeDeclarations( Collection<CompositePackageDescr> packages )", "full_signature": "private void deregisterTypeDeclarations( Collection<CompositePackageDescr> packages )", "class_method_signature": "ModelBuilderImpl.deregisterTypeDeclarations( Collection<CompositePackageDescr> packages )", "testcase": false, "constructor": false}, {"identifier": "buildRules", "parameters": "(Collection<CompositePackageDescr> packages)", "modifiers": "protected", "return": "void", "signature": "void buildRules(Collection<CompositePackageDescr> packages)", "full_signature": "protected void buildRules(Collection<CompositePackageDescr> packages)", "class_method_signature": "ModelBuilderImpl.buildRules(Collection<CompositePackageDescr> packages)", "testcase": false, "constructor": false}, {"identifier": "buildDeclaredTypes", "parameters": "( Collection<CompositePackageDescr> packages )", "modifiers": "private", "return": "void", "signature": "void buildDeclaredTypes( Collection<CompositePackageDescr> packages )", "full_signature": "private void buildDeclaredTypes( Collection<CompositePackageDescr> packages )", "class_method_signature": "ModelBuilderImpl.buildDeclaredTypes( Collection<CompositePackageDescr> packages )", "testcase": false, "constructor": false}, {"identifier": "isInPackage", "parameters": "(InternalKnowledgePackage pkg, GeneratedClassWithPackage pojo)", "modifiers": "private", "return": "boolean", "signature": "boolean isInPackage(InternalKnowledgePackage pkg, GeneratedClassWithPackage pojo)", "full_signature": "private boolean isInPackage(InternalKnowledgePackage pkg, GeneratedClassWithPackage pojo)", "class_method_signature": "ModelBuilderImpl.isInPackage(InternalKnowledgePackage pkg, GeneratedClassWithPackage pojo)", "testcase": false, "constructor": false}, {"identifier": "hasImport", "parameters": "( ImportDeclaration imp, GeneratedClassWithPackage pojo )", "modifiers": "private", "return": "boolean", "signature": "boolean hasImport( ImportDeclaration imp, GeneratedClassWithPackage pojo )", "full_signature": "private boolean hasImport( ImportDeclaration imp, GeneratedClassWithPackage pojo )", "class_method_signature": "ModelBuilderImpl.hasImport( ImportDeclaration imp, GeneratedClassWithPackage pojo )", "testcase": false, "constructor": false}, {"identifier": "registerType", "parameters": "( TypeResolver typeResolver, Class<?> clazz)", "modifiers": "public static", "return": "void", "signature": "void registerType( TypeResolver typeResolver, Class<?> clazz)", "full_signature": "public static void registerType( TypeResolver typeResolver, Class<?> clazz)", "class_method_signature": "ModelBuilderImpl.registerType( TypeResolver typeResolver, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "generatePOJOs", "parameters": "(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "modifiers": "protected", "return": "void", "signature": "void generatePOJOs(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "full_signature": "protected void generatePOJOs(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "class_method_signature": "ModelBuilderImpl.generatePOJOs(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "testcase": false, "constructor": false}, {"identifier": "compileKnowledgePackages", "parameters": "(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "modifiers": "@Override protected", "return": "void", "signature": "void compileKnowledgePackages(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "full_signature": "@Override protected void compileKnowledgePackages(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "class_method_signature": "ModelBuilderImpl.compileKnowledgePackages(PackageDescr packageDescr, PackageRegistry pkgRegistry)", "testcase": false, "constructor": false}, {"identifier": "getPackageModel", "parameters": "(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "modifiers": "protected", "return": "PackageModel", "signature": "PackageModel getPackageModel(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "full_signature": "protected PackageModel getPackageModel(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "class_method_signature": "ModelBuilderImpl.getPackageModel(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "testcase": false, "constructor": false}, {"identifier": "getPackageSources", "parameters": "()", "modifiers": "public", "return": "Collection<T>", "signature": "Collection<T> getPackageSources()", "full_signature": "public Collection<T> getPackageSources()", "class_method_signature": "ModelBuilderImpl.getPackageSources()", "testcase": false, "constructor": false}], "file": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/ModelBuilderImpl.java"}, "focal_method": {"identifier": "getPackageModel", "parameters": "(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "modifiers": "protected", "return": "PackageModel", "body": "protected PackageModel getPackageModel(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName) {\n        return packageModels.computeIfAbsent(pkgName, s -> {\n            final DialectCompiletimeRegistry dialectCompiletimeRegistry = pkgRegistry.getDialectCompiletimeRegistry();\n            return packageDescr.getPreferredPkgUUID()\n                    .map(pkgUUI -> new PackageModel(pkgName, this.getBuilderConfiguration(), isPattern, dialectCompiletimeRegistry, exprIdGenerator, pkgUUI))\n                    .orElse(new PackageModel(releaseId, pkgName, this.getBuilderConfiguration(), isPattern, dialectCompiletimeRegistry, exprIdGenerator));\n        });\n    }", "signature": "PackageModel getPackageModel(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "full_signature": "protected PackageModel getPackageModel(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "class_method_signature": "ModelBuilderImpl.getPackageModel(PackageDescr packageDescr, PackageRegistry pkgRegistry,  String pkgName)", "testcase": false, "constructor": false, "invocations": ["computeIfAbsent", "getDialectCompiletimeRegistry", "orElse", "map", "getPreferredPkgUUID", "getBuilderConfiguration", "getBuilderConfiguration"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}