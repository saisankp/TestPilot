{"test_class": {"identifier": "HashesTest", "superclass": "", "interfaces": "", "fields": [], "file": "eddsa/src/test/java/io/moatwel/crypto/HashesTest.java"}, "test_case": {"identifier": "success_1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_1() {\n        String data = \"demo\";\n        byte[] sha512 = Hashes.hash(HashAlgorithm.SHA_512, data.getBytes());\n        byte[] keccakHash512 = Hashes.hash(HashAlgorithm.KECCAK_512, data.getBytes());\n        byte[] keccakHash256 = Hashes.hash(HashAlgorithm.KECCAK_256, data.getBytes());\n        byte[] emptyByteArray = Hashes.hash(HashAlgorithm.KECCAK_512, new byte[32]);\n        byte[] emptySha512 = Hashes.hash(HashAlgorithm.SHA_512, new byte[32]);\n\n        assertThat(HexEncoder.getString(sha512), is(\"26c669cd0814ac40e5328752b21c4aa6450d16295e4eec30356a06a911c23983aaebe12d5da38eeebfc1b213be650498df8419194d5a26c7e0a50af156853c79\"));\n        assertThat(HexEncoder.getString(keccakHash512), is(\"fbf3b9980951aa921b8e30b782317a77a0dcc855551fd86720b1050bf8d40d30a07404021379a7bc8dbbcf8a4506c1c84db02e2e7a4441b80d154d1e7addb2fd\"));\n        assertThat(HexEncoder.getString(keccakHash256), is(\"3a784687a2b2ff9a2c72e22b001d33d9f2e2155a7858ff663b0990d35f14745d\"));\n        assertThat(HexEncoder.getString(emptyByteArray), is(\"0f6f7226432c21d4dfa2a1538a1fdc72ee1faf405a60e5f408b344a2f5aab2ddff0f9c172b6f7e2259b7929bce06388ecf84a51605bc48cd0b3c51d0eb12e3fa\"));\n        assertThat(HexEncoder.getString(emptySha512), is(\"5046adc1dba838867b2bbbfdd0c3423e58b57970b5267a90f57960924a87f1960a6a85eaa642dac835424b5d7c8d637c00408c7a73da672b7f498521420b6dd3\"));\n    }", "signature": "void success_1()", "full_signature": "@Test public void success_1()", "class_method_signature": "HashesTest.success_1()", "testcase": true, "constructor": false, "invocations": ["hash", "getBytes", "hash", "getBytes", "hash", "getBytes", "hash", "hash", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is", "assertThat", "getString", "is"]}, "focal_class": {"identifier": "Hashes", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "hash", "parameters": "(HashAlgorithm algorithm, byte[]... inputs)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "full_signature": "public static byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "class_method_signature": "Hashes.hash(HashAlgorithm algorithm, byte[]... inputs)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hash(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "full_signature": "public static byte[] hash(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "class_method_signature": "Hashes.hash(HashAlgorithm algorithm, int outputByteLength, byte[]... inputs)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(String algorithm, byte[]... inputs)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] hash(String algorithm, byte[]... inputs)", "full_signature": "private static byte[] hash(String algorithm, byte[]... inputs)", "class_method_signature": "Hashes.hash(String algorithm, byte[]... inputs)", "testcase": false, "constructor": false}, {"identifier": "hashVariableOutput", "parameters": "(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] hashVariableOutput(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "full_signature": "private static byte[] hashVariableOutput(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "class_method_signature": "Hashes.hashVariableOutput(HashAlgorithm algorithm, int byteLength, byte[]... inputs)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/Hashes.java"}, "focal_method": {"identifier": "hash", "parameters": "(HashAlgorithm algorithm, byte[]... inputs)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] hash(HashAlgorithm algorithm, byte[]... inputs) {\n        return hash(algorithm, algorithm.getDefaultBitLength() / 8, inputs);\n    }", "signature": "byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "full_signature": "public static byte[] hash(HashAlgorithm algorithm, byte[]... inputs)", "class_method_signature": "Hashes.hash(HashAlgorithm algorithm, byte[]... inputs)", "testcase": false, "constructor": false, "invocations": ["hash", "getDefaultBitLength"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}