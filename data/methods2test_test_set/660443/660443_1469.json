{"test_class": {"identifier": "HBondDonorCountDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/HBondDonorCountDescriptorTest.java"}, "test_case": {"identifier": "testCID9257", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCID9257() {\n        IChemObjectBuilder builder = DefaultChemObjectBuilder.getInstance();\n        IAtomContainer mol = builder.newInstance(IAtomContainer.class);\n        IAtom a1 = builder.newInstance(IAtom.class, \"N\");\n        a1.setFormalCharge(0);\n        a1.setPoint3d(new Point3d(0.5509, 0.9639, 0.0));\n        mol.addAtom(a1);\n        IAtom a2 = builder.newInstance(IAtom.class, \"N\");\n        a2.setFormalCharge(0);\n        a2.setPoint3d(new Point3d(1.1852, -0.2183, 1.0E-4));\n        mol.addAtom(a2);\n        IAtom a3 = builder.newInstance(IAtom.class, \"N\");\n        a3.setFormalCharge(0);\n        a3.setPoint3d(new Point3d(-1.087, -0.4827, 2.0E-4));\n        mol.addAtom(a3);\n        IAtom a4 = builder.newInstance(IAtom.class, \"C\");\n        a4.setFormalCharge(0);\n        a4.setPoint3d(new Point3d(-0.7991, 0.7981, -1.0E-4));\n        mol.addAtom(a4);\n        IAtom a5 = builder.newInstance(IAtom.class, \"C\");\n        a5.setFormalCharge(0);\n        a5.setPoint3d(new Point3d(0.15, -1.0609, -2.0E-4));\n        mol.addAtom(a5);\n        IAtom a6 = builder.newInstance(IAtom.class, \"H\");\n        a6.setFormalCharge(0);\n        a6.setPoint3d(new Point3d(1.094, 1.8191, 1.0E-4));\n        mol.addAtom(a6);\n        IAtom a7 = builder.newInstance(IAtom.class, \"H\");\n        a7.setFormalCharge(0);\n        a7.setPoint3d(new Point3d(-1.4981, 1.6215, -2.0E-4));\n        mol.addAtom(a7);\n        IAtom a8 = builder.newInstance(IAtom.class, \"H\");\n        a8.setFormalCharge(0);\n        a8.setPoint3d(new Point3d(0.3019, -2.13, -2.0E-4));\n        mol.addAtom(a8);\n        IBond b1 = builder.newInstance(IBond.class, a1, a2, IBond.Order.SINGLE);\n        mol.addBond(b1);\n        IBond b2 = builder.newInstance(IBond.class, a1, a4, IBond.Order.SINGLE);\n        mol.addBond(b2);\n        IBond b3 = builder.newInstance(IBond.class, a1, a6, IBond.Order.SINGLE);\n        mol.addBond(b3);\n        IBond b4 = builder.newInstance(IBond.class, a2, a5, IBond.Order.DOUBLE);\n        mol.addBond(b4);\n        IBond b5 = builder.newInstance(IBond.class, a3, a4, IBond.Order.DOUBLE);\n        mol.addBond(b5);\n        IBond b6 = builder.newInstance(IBond.class, a3, a5, IBond.Order.SINGLE);\n        mol.addBond(b6);\n        IBond b7 = builder.newInstance(IBond.class, a4, a7, IBond.Order.SINGLE);\n        mol.addBond(b7);\n        IBond b8 = builder.newInstance(IBond.class, a5, a8, IBond.Order.SINGLE);\n        mol.addBond(b8);\n\n        Assert.assertEquals(1, ((IntegerResult) descriptor.calculate(mol).getValue()).intValue());\n    }", "signature": "void testCID9257()", "full_signature": "@Test public void testCID9257()", "class_method_signature": "HBondDonorCountDescriptorTest.testCID9257()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newInstance", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "setFormalCharge", "setPoint3d", "addAtom", "newInstance", "addBond", "newInstance", "addBond", "newInstance", "addBond", "newInstance", "addBond", "newInstance", "addBond", "newInstance", "addBond", "newInstance", "addBond", "newInstance", "addBond", "assertEquals", "intValue", "getValue", "calculate"]}, "focal_class": {"identifier": "HBondDonorCountDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"nHBDon\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"nHBDon\"}", "var_name": "NAMES"}], "methods": [{"identifier": "HBondDonorCountDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " HBondDonorCountDescriptor()", "full_signature": "public  HBondDonorCountDescriptor()", "class_method_signature": "HBondDonorCountDescriptor.HBondDonorCountDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "HBondDonorCountDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "HBondDonorCountDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "HBondDonorCountDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "HBondDonorCountDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "HBondDonorCountDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "HBondDonorCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "HBondDonorCountDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "HBondDonorCountDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "HBondDonorCountDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/HBondDonorCountDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        int hBondDonors = 0;\n\n        IAtomContainer ac;\n        try {\n            ac = (IAtomContainer) atomContainer.clone();\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(e);\n        }\n\n        //org.openscience.cdk.interfaces.IAtom[] atoms = ac.getAtoms();\n        // iterate over all atoms of this AtomContainer; use label atomloop to allow for labelled continue\n        atomloop: for (int atomIndex = 0; atomIndex < ac.getAtomCount(); atomIndex++) {\n            IAtom atom = (IAtom) ac.getAtom(atomIndex);\n            // checking for O and N atoms where the formal charge is >= 0\n            if ((atom.getAtomicNumber() == IElement.O || atom.getAtomicNumber() == IElement.N) && atom.getFormalCharge() >= 0) {\n                // implicit hydrogens\n                Integer implicitH = atom.getImplicitHydrogenCount();\n                if (implicitH == CDKConstants.UNSET) implicitH = 0;\n                if (implicitH > 0) {\n                    hBondDonors++;\n                    continue atomloop; // we skip the explicit hydrogens part cause we found implicit hydrogens\n                }\n                // explicit hydrogens\n                java.util.List neighbours = ac.getConnectedAtomsList(atom);\n                for (Object neighbour : neighbours) {\n                    if (((IAtom) neighbour).getAtomicNumber() == IElement.H) {\n                        hBondDonors++;\n                        continue atomloop;\n                    }\n                }\n            }\n        }\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new IntegerResult(\n                hBondDonors), getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "HBondDonorCountDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "getDummyDescriptorValue", "getAtomCount", "getAtom", "getAtomicNumber", "getAtomicNumber", "getFormalCharge", "getImplicitHydrogenCount", "getConnectedAtomsList", "getAtomicNumber", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}