{"test_class": {"identifier": "DataSourceFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ATHENZ_DBPOOL_PROP1 = \"athenz.zms.db_pool_test_prop\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_DBPOOL_PROP1 = \"athenz.zms.db_pool_test_prop\"", "var_name": "ATHENZ_DBPOOL_PROP1"}], "file": "libs/java/server_common/src/test/java/com/yahoo/athenz/common/server/db/DataSourceFactoryTest.java"}, "test_case": {"identifier": "testPoolConfigZeroValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPoolConfigZeroValues() {\n       \n        System.setProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MAX_TOTAL, \"0\");\n        System.setProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MAX_IDLE, \"0\");\n        System.setProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MIN_IDLE, \"0\");\n        System.setProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MAX_WAIT, \"0\");\n        System.setProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_EVICT_IDLE_TIMEOUT, \"0\");\n        System.setProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_EVICT_IDLE_INTERVAL, \"0\");\n        \n        GenericObjectPoolConfig config = DataSourceFactory.setupPoolConfig();\n        assertNotNull(config);\n        \n        // MaxTotal and MaxIdle are set to -1 if the value is 0\n        assertEquals(config.getMaxTotal(), -1);\n        assertEquals(config.getMaxIdle(), -1);\n        assertEquals(config.getMinIdle(), 0);\n        assertEquals(config.getMaxWaitMillis(), 0);\n        assertEquals(config.getMinEvictableIdleTimeMillis(), 0);\n        assertEquals(config.getTimeBetweenEvictionRunsMillis(), 0);\n        assertTrue(config.getTestWhileIdle());\n        assertTrue(config.getTestOnBorrow());\n        \n        System.clearProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MAX_TOTAL);\n        System.clearProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MAX_IDLE);\n        System.clearProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MIN_IDLE);\n        System.clearProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_MAX_WAIT);\n        System.clearProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_EVICT_IDLE_TIMEOUT);\n        System.clearProperty(DataSourceFactory.ATHENZ_PROP_DBPOOL_EVICT_IDLE_INTERVAL);\n    }", "signature": "void testPoolConfigZeroValues()", "full_signature": "@Test public void testPoolConfigZeroValues()", "class_method_signature": "DataSourceFactoryTest.testPoolConfigZeroValues()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setProperty", "setupPoolConfig", "assertNotNull", "assertEquals", "getMaxTotal", "assertEquals", "getMaxIdle", "assertEquals", "getMinIdle", "assertEquals", "getMaxWaitMillis", "assertEquals", "getMinEvictableIdleTimeMillis", "assertEquals", "getTimeBetweenEvictionRunsMillis", "assertTrue", "getTestWhileIdle", "assertTrue", "getTestOnBorrow", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "clearProperty", "clearProperty"]}, "focal_class": {"identifier": "DataSourceFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataSourceFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataSourceFactory.class)", "var_name": "LOG"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_MAX_TOTAL           = \"athenz.db.pool_max_total\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_MAX_TOTAL           = \"athenz.db.pool_max_total\"", "var_name": "ATHENZ_PROP_DBPOOL_MAX_TOTAL"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_MAX_IDLE            = \"athenz.db.pool_max_idle\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_MAX_IDLE            = \"athenz.db.pool_max_idle\"", "var_name": "ATHENZ_PROP_DBPOOL_MAX_IDLE"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_MIN_IDLE            = \"athenz.db.pool_min_idle\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_MIN_IDLE            = \"athenz.db.pool_min_idle\"", "var_name": "ATHENZ_PROP_DBPOOL_MIN_IDLE"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_MAX_WAIT            = \"athenz.db.pool_max_wait\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_MAX_WAIT            = \"athenz.db.pool_max_wait\"", "var_name": "ATHENZ_PROP_DBPOOL_MAX_WAIT"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_EVICT_IDLE_TIMEOUT  = \"athenz.db.pool_evict_idle_timeout\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_EVICT_IDLE_TIMEOUT  = \"athenz.db.pool_evict_idle_timeout\"", "var_name": "ATHENZ_PROP_DBPOOL_EVICT_IDLE_TIMEOUT"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_EVICT_IDLE_INTERVAL = \"athenz.db.pool_evict_idle_interval\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_EVICT_IDLE_INTERVAL = \"athenz.db.pool_evict_idle_interval\"", "var_name": "ATHENZ_PROP_DBPOOL_EVICT_IDLE_INTERVAL"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_MAX_TTL             = \"athenz.db.pool_max_ttl\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_MAX_TTL             = \"athenz.db.pool_max_ttl\"", "var_name": "ATHENZ_PROP_DBPOOL_MAX_TTL"}, {"original_string": "static final String ATHENZ_PROP_DBPOOL_VALIDATION_QUERY    = \"athenz.db.pool_validation_query\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_DBPOOL_VALIDATION_QUERY    = \"athenz.db.pool_validation_query\"", "var_name": "ATHENZ_PROP_DBPOOL_VALIDATION_QUERY"}, {"original_string": "static final long MAX_TTL_CONN_MS = TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES);", "modifier": "static final", "type": "long", "declarator": "MAX_TTL_CONN_MS = TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)", "var_name": "MAX_TTL_CONN_MS"}, {"original_string": "static final String MYSQL_VALIDATION_QUERY = \"/* ping */ SELECT 1\";", "modifier": "static final", "type": "String", "declarator": "MYSQL_VALIDATION_QUERY = \"/* ping */ SELECT 1\"", "var_name": "MYSQL_VALIDATION_QUERY"}, {"original_string": "static final String DRIVER_CLASS_NAME = \"athenz.db.driver.class\";", "modifier": "static final", "type": "String", "declarator": "DRIVER_CLASS_NAME = \"athenz.db.driver.class\"", "var_name": "DRIVER_CLASS_NAME"}], "methods": [{"identifier": "create", "parameters": "(String url, Properties mysqlConnectionProperties)", "modifiers": "public static", "return": "PoolableDataSource", "signature": "PoolableDataSource create(String url, Properties mysqlConnectionProperties)", "full_signature": "public static PoolableDataSource create(String url, Properties mysqlConnectionProperties)", "class_method_signature": "DataSourceFactory.create(String url, Properties mysqlConnectionProperties)", "testcase": false, "constructor": false}, {"identifier": "retrieveConfigSetting", "parameters": "(String propName, long defaultValue)", "modifiers": "static", "return": "long", "signature": "long retrieveConfigSetting(String propName, long defaultValue)", "full_signature": "static long retrieveConfigSetting(String propName, long defaultValue)", "class_method_signature": "DataSourceFactory.retrieveConfigSetting(String propName, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "retrieveConfigSetting", "parameters": "(String propName, int defaultValue)", "modifiers": "static", "return": "int", "signature": "int retrieveConfigSetting(String propName, int defaultValue)", "full_signature": "static int retrieveConfigSetting(String propName, int defaultValue)", "class_method_signature": "DataSourceFactory.retrieveConfigSetting(String propName, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "setupPoolConfig", "parameters": "()", "modifiers": "public static", "return": "GenericObjectPoolConfig", "signature": "GenericObjectPoolConfig setupPoolConfig()", "full_signature": "public static GenericObjectPoolConfig setupPoolConfig()", "class_method_signature": "DataSourceFactory.setupPoolConfig()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ConnectionFactory connectionFactory)", "modifiers": "static", "return": "PoolableDataSource", "signature": "PoolableDataSource create(ConnectionFactory connectionFactory)", "full_signature": "static PoolableDataSource create(ConnectionFactory connectionFactory)", "class_method_signature": "DataSourceFactory.create(ConnectionFactory connectionFactory)", "testcase": false, "constructor": false}], "file": "libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/db/DataSourceFactory.java"}, "focal_method": {"identifier": "setupPoolConfig", "parameters": "()", "modifiers": "public static", "return": "GenericObjectPoolConfig", "body": "public static GenericObjectPoolConfig setupPoolConfig() {\n        \n        // setup config vars for the object pool\n        // ie. min and max idle instances, and max total instances of arbitrary objects\n        \n        GenericObjectPoolConfig config = new GenericObjectPoolConfig();\n\n        // The maximum number of active connections that can be allocated from\n        // this pool at the same time, or negative for no limit. Default: 8\n        config.setMaxTotal(retrieveConfigSetting(ATHENZ_PROP_DBPOOL_MAX_TOTAL,\n                GenericObjectPoolConfig.DEFAULT_MAX_TOTAL));\n        if (config.getMaxTotal() == 0) {\n            config.setMaxTotal(-1); // -1 means no limit\n        }\n        \n        //  The maximum number of connections that can remain idle in the pool,\n        // without extra ones being released, or negative for no limit. Default 8\n        config.setMaxIdle(retrieveConfigSetting(ATHENZ_PROP_DBPOOL_MAX_IDLE,\n                GenericObjectPoolConfig.DEFAULT_MAX_IDLE));\n        if (config.getMaxIdle() == 0) {\n            config.setMaxIdle(-1); // -1 means no limit\n        }\n        \n        // The minimum number of connections that can remain idle in the pool,\n        // without extra ones being created, or zero to create none. Default 0\n        config.setMinIdle(retrieveConfigSetting(ATHENZ_PROP_DBPOOL_MIN_IDLE,\n                GenericObjectPoolConfig.DEFAULT_MIN_IDLE));\n        \n        // The maximum number of milliseconds that the pool will wait (when\n        // there are no available connections) for a connection to be returned\n        // before throwing an exception, or -1 to wait indefinitely. Default -1\n        config.setMaxWaitMillis(retrieveConfigSetting(ATHENZ_PROP_DBPOOL_MAX_WAIT,\n                GenericObjectPoolConfig.DEFAULT_MAX_WAIT_MILLIS));\n        \n        // setup the configuration to cleanup idle connections\n        //\n        // Minimum time an object can be idle in the pool before being eligible\n        // for eviction by the idle object evictor.\n        // The default value is 30 minutes (1000 * 60 * 30).\n        config.setMinEvictableIdleTimeMillis(retrieveConfigSetting(ATHENZ_PROP_DBPOOL_EVICT_IDLE_TIMEOUT,\n                BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS));\n        \n        // Number of milliseconds to sleep between runs of idle object evictor thread.\n        // Not using DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS since it is -1\n        // meaning it will not run the evictor thread and instead we're using\n        // the default min value for evictable idle connections (Default 30 minutes)\n        config.setTimeBetweenEvictionRunsMillis(retrieveConfigSetting(ATHENZ_PROP_DBPOOL_EVICT_IDLE_INTERVAL,\n                BaseObjectPoolConfig.DEFAULT_MIN_EVICTABLE_IDLE_TIME_MILLIS));\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Config settings for idle object eviction: \" +\n                    \"time interval between eviction thread runs (\" +\n                    config.getTimeBetweenEvictionRunsMillis() +\n                    \" millis): minimum timeout for idle objects (\" +\n                    config.getMinEvictableIdleTimeMillis() + \" millis)\");\n        }\n        \n        // Validate objects by the idle object evictor. If invalid, gets dropped\n        // from the pool.\n        config.setTestWhileIdle(true);\n        \n        // Validate object before borrowing from pool and returning to the pool.\n        // If invalid, gets dropped from the pool and an attempt to borrow\n        // another one will occur.\n        config.setTestOnBorrow(true);\n        config.setTestOnReturn(true);\n        return config;\n    }", "signature": "GenericObjectPoolConfig setupPoolConfig()", "full_signature": "public static GenericObjectPoolConfig setupPoolConfig()", "class_method_signature": "DataSourceFactory.setupPoolConfig()", "testcase": false, "constructor": false, "invocations": ["setMaxTotal", "retrieveConfigSetting", "getMaxTotal", "setMaxTotal", "setMaxIdle", "retrieveConfigSetting", "getMaxIdle", "setMaxIdle", "setMinIdle", "retrieveConfigSetting", "setMaxWaitMillis", "retrieveConfigSetting", "setMinEvictableIdleTimeMillis", "retrieveConfigSetting", "setTimeBetweenEvictionRunsMillis", "retrieveConfigSetting", "isDebugEnabled", "debug", "getTimeBetweenEvictionRunsMillis", "getMinEvictableIdleTimeMillis", "setTestWhileIdle", "setTestOnBorrow", "setTestOnReturn"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}