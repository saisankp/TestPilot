{"test_class": {"identifier": "LegacyHoltWintersDetectorFactoryProviderTest", "superclass": "extends AbstractDetectorFactoryTest", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/forecasting/LegacyHoltWintersDetectorFactoryProviderTest.java"}, "test_case": {"identifier": "testBuildDetector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildDetector() {\n        val factoryUnderTest = new LegacyHoltWintersDetectorFactoryProvider();\n        val document = readDocument(\"holt-winters\");\n        val detector = factoryUnderTest.buildDetector(document);\n        val hw = (HoltWintersPointForecaster) detector.getPointForecaster();\n        val hwParams = hw.getParams();\n        val welford = (ExponentialWelfordIntervalForecaster) detector.getIntervalForecaster();\n        val welfordParams = welford.getParams();\n\n        assertEquals(ForecastingDetector.class, detector.getClass());\n        assertEquals(\"a63c2128-113a-8fd7-942d-f8ae228b61b0\", detector.getUuid().toString());\n        assertEquals(AnomalyType.RIGHT_TAILED, detector.getAnomalyType());\n        assertEquals(2016, hwParams.getFrequency());\n        assertEquals(0.15, hwParams.getAlpha(), TOLERANCE);\n        assertEquals(0.10, hwParams.getBeta(), TOLERANCE);\n        assertEquals(0.20, hwParams.getGamma(), TOLERANCE);\n        assertEquals(0, hwParams.getWarmUpPeriod());\n        assertEquals(HoltWintersSeasonalityType.MULTIPLICATIVE, hwParams.getSeasonalityType());\n        assertEquals(HoltWintersTrainingMethod.NONE, hwParams.getInitTrainingMethod());\n        assertEquals(0.0, hwParams.getInitBaseEstimate(), TOLERANCE);\n        assertEquals(0.0, hwParams.getInitLevelEstimate(), TOLERANCE);\n        assertEquals(0, hwParams.getInitSeasonalEstimates().length);\n        assertEquals(3.0, welfordParams.getWeakSigmas(), TOLERANCE);\n        assertEquals(4.0, welfordParams.getStrongSigmas(), TOLERANCE);\n    }", "signature": "void testBuildDetector()", "full_signature": "@Test public void testBuildDetector()", "class_method_signature": "LegacyHoltWintersDetectorFactoryProviderTest.testBuildDetector()", "testcase": true, "constructor": false, "invocations": ["readDocument", "buildDetector", "getPointForecaster", "getParams", "getIntervalForecaster", "getParams", "assertEquals", "getClass", "assertEquals", "toString", "getUuid", "assertEquals", "getAnomalyType", "assertEquals", "getFrequency", "assertEquals", "getAlpha", "assertEquals", "getBeta", "assertEquals", "getGamma", "assertEquals", "getWarmUpPeriod", "assertEquals", "getSeasonalityType", "assertEquals", "getInitTrainingMethod", "assertEquals", "getInitBaseEstimate", "assertEquals", "getInitLevelEstimate", "assertEquals", "getInitSeasonalEstimates", "assertEquals", "getWeakSigmas", "assertEquals", "getStrongSigmas"]}, "focal_class": {"identifier": "LegacyHoltWintersDetectorFactoryProvider", "superclass": "", "interfaces": "implements DetectorFactoryProvider<ForecastingDetector>", "fields": [{"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "methods": [{"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "ForecastingDetector", "signature": "ForecastingDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public ForecastingDetector buildDetector(DetectorDocument document)", "class_method_signature": "LegacyHoltWintersDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/forecasting/LegacyHoltWintersDetectorFactoryProvider.java"}, "focal_method": {"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "ForecastingDetector", "body": "@Override\n    public ForecastingDetector buildDetector(DetectorDocument document) {\n        val uuid = document.getUuid();\n\n        val config = document.getConfig();\n        val type = AnomalyType.valueOf((String) config.get(\"type\"));\n        val paramsMap = config.get(\"params\");\n        val legacyParams = objectMapper.convertValue(paramsMap, LegacyHoltWintersDetectorParams.class);\n        val holtWintersParams = legacyParams.toHoltWintersParams();\n        val welfordParams = legacyParams.toWelfordParams();\n\n        val holtWinters = new HoltWintersPointForecaster(holtWintersParams);\n        val welford = new ExponentialWelfordIntervalForecaster(welfordParams);\n\n        val trusted = document.isTrusted();\n\n        return new ForecastingDetector(uuid, holtWinters, welford, type, trusted, \"holtwinters\");\n    }", "signature": "ForecastingDetector buildDetector(DetectorDocument document)", "full_signature": "@Override public ForecastingDetector buildDetector(DetectorDocument document)", "class_method_signature": "LegacyHoltWintersDetectorFactoryProvider.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["getUuid", "getConfig", "valueOf", "get", "get", "convertValue", "toHoltWintersParams", "toWelfordParams", "isTrusted"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}