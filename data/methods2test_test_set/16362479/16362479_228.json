{"test_class": {"identifier": "LeaderTest", "superclass": "extends AbstractLeaderTest<Leader>", "interfaces": "", "fields": [{"original_string": "static final String FOLLOWER_ID = \"follower\";", "modifier": "static final", "type": "String", "declarator": "FOLLOWER_ID = \"follower\"", "var_name": "FOLLOWER_ID"}, {"original_string": "public static final String LEADER_ID = \"leader\";", "modifier": "public static final", "type": "String", "declarator": "LEADER_ID = \"leader\"", "var_name": "LEADER_ID"}, {"original_string": "private final TestActorRef<ForwardMessageToBehaviorActor> leaderActor = actorFactory.createTestActor(\n            Props.create(ForwardMessageToBehaviorActor.class), actorFactory.generateActorId(\"leader\"));", "modifier": "private final", "type": "TestActorRef<ForwardMessageToBehaviorActor>", "declarator": "leaderActor = actorFactory.createTestActor(\n            Props.create(ForwardMessageToBehaviorActor.class), actorFactory.generateActorId(\"leader\"))", "var_name": "leaderActor"}, {"original_string": "private final TestActorRef<ForwardMessageToBehaviorActor> followerActor = actorFactory.createTestActor(\n            Props.create(ForwardMessageToBehaviorActor.class), actorFactory.generateActorId(\"follower\"));", "modifier": "private final", "type": "TestActorRef<ForwardMessageToBehaviorActor>", "declarator": "followerActor = actorFactory.createTestActor(\n            Props.create(ForwardMessageToBehaviorActor.class), actorFactory.generateActorId(\"follower\"))", "var_name": "followerActor"}, {"original_string": "private Leader leader;", "modifier": "private", "type": "Leader", "declarator": "leader", "var_name": "leader"}, {"original_string": "private final short payloadVersion = 5;", "modifier": "private final", "type": "short", "declarator": "payloadVersion = 5", "var_name": "payloadVersion"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/behaviors/LeaderTest.java"}, "test_case": {"identifier": "testReplicationWithPayloadSizeThatExceedsThreshold", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReplicationWithPayloadSizeThatExceedsThreshold() {\n        logStart(\"testReplicationWithPayloadSizeThatExceedsThreshold\");\n\n        final int serializedSize = SerializationUtils.serialize(new AppendEntries(1, LEADER_ID, -1, -1,\n                Arrays.asList(new SimpleReplicatedLogEntry(0, 1,\n                        new MockRaftActorContext.MockPayload(\"large\"))), 0, -1, (short)0)).length;\n        final MockRaftActorContext.MockPayload largePayload =\n                new MockRaftActorContext.MockPayload(\"large\", serializedSize);\n\n        MockRaftActorContext leaderActorContext = createActorContextWithFollower();\n        ((DefaultConfigParamsImpl)leaderActorContext.getConfigParams()).setHeartBeatInterval(\n                new FiniteDuration(300, TimeUnit.MILLISECONDS));\n        ((DefaultConfigParamsImpl)leaderActorContext.getConfigParams()).setSnapshotChunkSize(serializedSize - 50);\n        leaderActorContext.setReplicatedLog(new MockRaftActorContext.MockReplicatedLogBuilder().build());\n        leaderActorContext.setCommitIndex(-1);\n        leaderActorContext.setLastApplied(-1);\n\n        leader = new Leader(leaderActorContext);\n        leaderActorContext.setCurrentBehavior(leader);\n\n        // Send initial heartbeat reply so follower is marked active\n        MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class);\n        leader.handleMessage(followerActor, new AppendEntriesReply(FOLLOWER_ID, -1, true, -1, -1, (short)0));\n        MessageCollectorActor.clearMessages(followerActor);\n\n        // Send normal payload first to prime commit index.\n        final long term = leaderActorContext.getTermInformation().getCurrentTerm();\n        sendReplicate(leaderActorContext, term, 0);\n\n        AppendEntries appendEntries = MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class);\n        assertEquals(\"Entries size\", 1, appendEntries.getEntries().size());\n        assertEquals(\"Entry getIndex\", 0, appendEntries.getEntries().get(0).getIndex());\n\n        leader.handleMessage(followerActor, new AppendEntriesReply(FOLLOWER_ID, term, true, 0, term, (short)0));\n        assertEquals(\"getCommitIndex\", 0, leaderActorContext.getCommitIndex());\n        MessageCollectorActor.clearMessages(followerActor);\n\n        // Now send a large payload that exceeds the maximum size for a single AppendEntries - it should be sliced.\n        sendReplicate(leaderActorContext, term, 1, largePayload);\n\n        MessageSlice messageSlice = MessageCollectorActor.expectFirstMatching(followerActor, MessageSlice.class);\n        assertEquals(\"getSliceIndex\", 1, messageSlice.getSliceIndex());\n        assertEquals(\"getTotalSlices\", 2, messageSlice.getTotalSlices());\n\n        final Identifier slicingId = messageSlice.getIdentifier();\n\n        appendEntries = MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class);\n        assertEquals(\"getPrevLogIndex\", 0, appendEntries.getPrevLogIndex());\n        assertEquals(\"getPrevLogTerm\", term, appendEntries.getPrevLogTerm());\n        assertEquals(\"getLeaderCommit\", -1, appendEntries.getLeaderCommit());\n        assertEquals(\"Entries size\", 0, appendEntries.getEntries().size());\n        MessageCollectorActor.clearMessages(followerActor);\n\n        // Initiate a heartbeat - it should send an empty AppendEntries since slicing is in progress.\n\n        // Sleep for the heartbeat interval so AppendEntries is sent.\n        Uninterruptibles.sleepUninterruptibly(leaderActorContext.getConfigParams()\n                .getHeartBeatInterval().toMillis(), TimeUnit.MILLISECONDS);\n\n        leader.handleMessage(leaderActor, SendHeartBeat.INSTANCE);\n\n        appendEntries = MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class);\n        assertEquals(\"getLeaderCommit\", -1, appendEntries.getLeaderCommit());\n        assertEquals(\"Entries size\", 0, appendEntries.getEntries().size());\n        MessageCollectorActor.clearMessages(followerActor);\n\n        // Simulate the MessageSliceReply's and AppendEntriesReply from the follower.\n\n        leader.handleMessage(followerActor, MessageSliceReply.success(slicingId, 1, followerActor));\n        messageSlice = MessageCollectorActor.expectFirstMatching(followerActor, MessageSlice.class);\n        assertEquals(\"getSliceIndex\", 2, messageSlice.getSliceIndex());\n\n        leader.handleMessage(followerActor, MessageSliceReply.success(slicingId, 2, followerActor));\n\n        leader.handleMessage(followerActor, new AppendEntriesReply(FOLLOWER_ID, term, true, 1, term, (short)0));\n\n        MessageCollectorActor.clearMessages(followerActor);\n\n        // Send another normal payload.\n\n        sendReplicate(leaderActorContext, term, 2);\n\n        appendEntries = MessageCollectorActor.expectFirstMatching(followerActor, AppendEntries.class);\n        assertEquals(\"Entries size\", 1, appendEntries.getEntries().size());\n        assertEquals(\"Entry getIndex\", 2, appendEntries.getEntries().get(0).getIndex());\n        assertEquals(\"getLeaderCommit\", 1, appendEntries.getLeaderCommit());\n    }", "signature": "void testReplicationWithPayloadSizeThatExceedsThreshold()", "full_signature": "@Test public void testReplicationWithPayloadSizeThatExceedsThreshold()", "class_method_signature": "LeaderTest.testReplicationWithPayloadSizeThatExceedsThreshold()", "testcase": true, "constructor": false, "invocations": ["logStart", "serialize", "asList", "createActorContextWithFollower", "setHeartBeatInterval", "getConfigParams", "setSnapshotChunkSize", "getConfigParams", "setReplicatedLog", "build", "setCommitIndex", "setLastApplied", "setCurrentBehavior", "expectFirstMatching", "handleMessage", "clearMessages", "getCurrentTerm", "getTermInformation", "sendReplicate", "expectFirstMatching", "assertEquals", "size", "getEntries", "assertEquals", "getIndex", "get", "getEntries", "handleMessage", "assertEquals", "getCommitIndex", "clearMessages", "sendReplicate", "expectFirstMatching", "assertEquals", "getSliceIndex", "assertEquals", "getTotalSlices", "getIdentifier", "expectFirstMatching", "assertEquals", "getPrevLogIndex", "assertEquals", "getPrevLogTerm", "assertEquals", "getLeaderCommit", "assertEquals", "size", "getEntries", "clearMessages", "sleepUninterruptibly", "toMillis", "getHeartBeatInterval", "getConfigParams", "handleMessage", "expectFirstMatching", "assertEquals", "getLeaderCommit", "assertEquals", "size", "getEntries", "clearMessages", "handleMessage", "success", "expectFirstMatching", "assertEquals", "getSliceIndex", "handleMessage", "success", "handleMessage", "clearMessages", "sendReplicate", "expectFirstMatching", "assertEquals", "size", "getEntries", "assertEquals", "getIndex", "get", "getEntries", "assertEquals", "getLeaderCommit"]}, "focal_class": {"identifier": "Leader", "superclass": "extends AbstractLeader", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    static final Object ISOLATED_LEADER_CHECK = new Object();", "modifier": "@VisibleForTesting\n    static final", "type": "Object", "declarator": "ISOLATED_LEADER_CHECK = new Object()", "var_name": "ISOLATED_LEADER_CHECK"}, {"original_string": "private final Stopwatch isolatedLeaderCheck = Stopwatch.createStarted();", "modifier": "private final", "type": "Stopwatch", "declarator": "isolatedLeaderCheck = Stopwatch.createStarted()", "var_name": "isolatedLeaderCheck"}, {"original_string": "private @Nullable LeadershipTransferContext leadershipTransferContext;", "modifier": "private @Nullable", "type": "LeadershipTransferContext", "declarator": "leadershipTransferContext", "var_name": "leadershipTransferContext"}], "methods": [{"identifier": "Leader", "parameters": "(final RaftActorContext context, @Nullable final AbstractLeader initializeFromLeader)", "modifiers": "", "return": "", "signature": " Leader(final RaftActorContext context, @Nullable final AbstractLeader initializeFromLeader)", "full_signature": "  Leader(final RaftActorContext context, @Nullable final AbstractLeader initializeFromLeader)", "class_method_signature": "Leader.Leader(final RaftActorContext context, @Nullable final AbstractLeader initializeFromLeader)", "testcase": false, "constructor": true}, {"identifier": "Leader", "parameters": "(final RaftActorContext context)", "modifiers": "public", "return": "", "signature": " Leader(final RaftActorContext context)", "full_signature": "public  Leader(final RaftActorContext context)", "class_method_signature": "Leader.Leader(final RaftActorContext context)", "testcase": false, "constructor": true}, {"identifier": "handleMessage", "parameters": "(final ActorRef sender, final Object originalMessage)", "modifiers": "@Override public", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleMessage(final ActorRef sender, final Object originalMessage)", "full_signature": "@Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object originalMessage)", "class_method_signature": "Leader.handleMessage(final ActorRef sender, final Object originalMessage)", "testcase": false, "constructor": false}, {"identifier": "beforeSendHeartbeat", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void beforeSendHeartbeat()", "full_signature": "@Override protected void beforeSendHeartbeat()", "class_method_signature": "Leader.beforeSendHeartbeat()", "testcase": false, "constructor": false}, {"identifier": "handleAppendEntriesReply", "parameters": "(final ActorRef sender,\n            final AppendEntriesReply appendEntriesReply)", "modifiers": "@Override protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleAppendEntriesReply(final ActorRef sender,\n            final AppendEntriesReply appendEntriesReply)", "full_signature": "@Override protected RaftActorBehavior handleAppendEntriesReply(final ActorRef sender,\n            final AppendEntriesReply appendEntriesReply)", "class_method_signature": "Leader.handleAppendEntriesReply(final ActorRef sender,\n            final AppendEntriesReply appendEntriesReply)", "testcase": false, "constructor": false}, {"identifier": "transferLeadership", "parameters": "(@NonNull final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "modifiers": "public", "return": "void", "signature": "void transferLeadership(@NonNull final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "full_signature": "public void transferLeadership(@NonNull final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "class_method_signature": "Leader.transferLeadership(@NonNull final RaftActorLeadershipTransferCohort leadershipTransferCohort)", "testcase": false, "constructor": false}, {"identifier": "tryToCompleteLeadershipTransfer", "parameters": "(final String followerId)", "modifiers": "private", "return": "void", "signature": "void tryToCompleteLeadershipTransfer(final String followerId)", "full_signature": "private void tryToCompleteLeadershipTransfer(final String followerId)", "class_method_signature": "Leader.tryToCompleteLeadershipTransfer(final String followerId)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "Leader.close()", "testcase": false, "constructor": false}, {"identifier": "markFollowerActive", "parameters": "(final String followerId)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void markFollowerActive(final String followerId)", "full_signature": "@VisibleForTesting void markFollowerActive(final String followerId)", "class_method_signature": "Leader.markFollowerActive(final String followerId)", "testcase": false, "constructor": false}, {"identifier": "markFollowerInActive", "parameters": "(final String followerId)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void markFollowerInActive(final String followerId)", "full_signature": "@VisibleForTesting void markFollowerInActive(final String followerId)", "class_method_signature": "Leader.markFollowerInActive(final String followerId)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/behaviors/Leader.java"}, "focal_method": {"identifier": "handleMessage", "parameters": "(final ActorRef sender, final Object originalMessage)", "modifiers": "@Override public", "return": "RaftActorBehavior", "body": "@Override\n    public RaftActorBehavior handleMessage(final ActorRef sender, final Object originalMessage) {\n        requireNonNull(sender, \"sender should not be null\");\n\n        if (ISOLATED_LEADER_CHECK.equals(originalMessage)) {\n            if (isLeaderIsolated()) {\n                log.warn(\"{}: At least {} followers need to be active, Switching {} from Leader to IsolatedLeader\",\n                    context.getId(), getMinIsolatedLeaderPeerCount(), getLeaderId());\n                return internalSwitchBehavior(new IsolatedLeader(context, this));\n            } else {\n                return this;\n            }\n        } else {\n            return super.handleMessage(sender, originalMessage);\n        }\n    }", "signature": "RaftActorBehavior handleMessage(final ActorRef sender, final Object originalMessage)", "full_signature": "@Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object originalMessage)", "class_method_signature": "Leader.handleMessage(final ActorRef sender, final Object originalMessage)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "equals", "isLeaderIsolated", "warn", "getId", "getMinIsolatedLeaderPeerCount", "getLeaderId", "internalSwitchBehavior", "handleMessage"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}