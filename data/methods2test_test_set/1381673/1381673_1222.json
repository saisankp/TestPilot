{"test_class": {"identifier": "KiePMMLDescrLhsFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PACKAGE_NAME = \"package\";", "modifier": "private static final", "type": "String", "declarator": "PACKAGE_NAME = \"package\"", "var_name": "PACKAGE_NAME"}, {"original_string": "private static final String CURRENT_RULE = \"currentRule\";", "modifier": "private static final", "type": "String", "declarator": "CURRENT_RULE = \"currentRule\"", "var_name": "CURRENT_RULE"}, {"original_string": "private CEDescrBuilder<RuleDescrBuilder, AndDescr> lhsBuilder;", "modifier": "private", "type": "CEDescrBuilder<RuleDescrBuilder, AndDescr>", "declarator": "lhsBuilder", "var_name": "lhsBuilder"}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/test/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrLhsFactoryTest.java"}, "test_case": {"identifier": "declareLhs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void declareLhs() {\n        String name = \"NAME\";\n        String statusToSet = \"STATUS_TO_SET\";\n        KiePMMLDroolsRule rule = KiePMMLDroolsRule.builder(name, statusToSet, Collections.emptyList()).build();\n        KiePMMLDescrLhsFactory.factory(lhsBuilder).declareLhs(rule);\n        assertNotNull(lhsBuilder.getDescr());\n        assertNotNull(lhsBuilder.getDescr().getDescrs());\n        assertEquals(1, lhsBuilder.getDescr().getDescrs().size());\n        assertTrue(lhsBuilder.getDescr().getDescrs().get(0) instanceof PatternDescr);\n        PatternDescr patternDescr = (PatternDescr) lhsBuilder.getDescr().getDescrs().get(0);\n        assertEquals(KiePMMLStatusHolder.class.getSimpleName(), patternDescr.getObjectType());\n        assertEquals(STATUS_HOLDER, patternDescr.getIdentifier());\n        assertTrue(patternDescr.getConstraint() instanceof AndDescr);\n        AndDescr andDescr = (AndDescr) patternDescr.getConstraint();\n        assertTrue(andDescr.getDescrs().isEmpty());\n    }", "signature": "void declareLhs()", "full_signature": "@Test public void declareLhs()", "class_method_signature": "KiePMMLDescrLhsFactoryTest.declareLhs()", "testcase": true, "constructor": false, "invocations": ["build", "builder", "emptyList", "declareLhs", "factory", "assertNotNull", "getDescr", "assertNotNull", "getDescrs", "getDescr", "assertEquals", "size", "getDescrs", "getDescr", "assertTrue", "get", "getDescrs", "getDescr", "get", "getDescrs", "getDescr", "assertEquals", "getSimpleName", "getObjectType", "assertEquals", "getIdentifier", "assertTrue", "getConstraint", "getConstraint", "assertTrue", "isEmpty", "getDescrs"]}, "focal_class": {"identifier": "KiePMMLDescrLhsFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String INPUT_FIELD = \"$inputField\";", "modifier": "static final", "type": "String", "declarator": "INPUT_FIELD = \"$inputField\"", "var_name": "INPUT_FIELD"}, {"original_string": "static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";", "modifier": "static final", "type": "String", "declarator": "INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\"", "var_name": "INPUT_FIELD_CONDITIONAL"}, {"original_string": "static final String VALUE_PATTERN = \"value %s %s\";", "modifier": "static final", "type": "String", "declarator": "VALUE_PATTERN = \"value %s %s\"", "var_name": "VALUE_PATTERN"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName())", "var_name": "logger"}, {"original_string": "final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;", "modifier": "final", "type": "CEDescrBuilder<RuleDescrBuilder, AndDescr>", "declarator": "builder", "var_name": "builder"}], "methods": [{"identifier": "KiePMMLDescrLhsFactory", "parameters": "(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "modifiers": "private", "return": "", "signature": " KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "full_signature": "private  KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "class_method_signature": "KiePMMLDescrLhsFactory.KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "testcase": false, "constructor": true}, {"identifier": "factory", "parameters": "(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "modifiers": "public static", "return": "KiePMMLDescrLhsFactory", "signature": "KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "full_signature": "public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "class_method_signature": "KiePMMLDescrLhsFactory.factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder)", "testcase": false, "constructor": false}, {"identifier": "declareLhs", "parameters": "(final KiePMMLDroolsRule rule)", "modifiers": "public", "return": "void", "signature": "void declareLhs(final KiePMMLDroolsRule rule)", "full_signature": "public void declareLhs(final KiePMMLDroolsRule rule)", "class_method_signature": "KiePMMLDescrLhsFactory.declareLhs(final KiePMMLDroolsRule rule)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintsAndOr", "parameters": "(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintsAndOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "full_signature": "protected void declareConstraintsAndOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintsAndOr(final List<KiePMMLFieldOperatorValue> orConstraints, final CEDescrBuilder<?, ?> andOrBuilder)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintsXor", "parameters": "(final List<KiePMMLFieldOperatorValue> xorConstraints)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "full_signature": "protected void declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintsXor(final List<KiePMMLFieldOperatorValue> xorConstraints)", "testcase": false, "constructor": false}, {"identifier": "declareNotConstraints", "parameters": "(final List<KiePMMLFieldOperatorValue> notConstraints)", "modifiers": "protected", "return": "void", "signature": "void declareNotConstraints(final List<KiePMMLFieldOperatorValue> notConstraints)", "full_signature": "protected void declareNotConstraints(final List<KiePMMLFieldOperatorValue> notConstraints)", "class_method_signature": "KiePMMLDescrLhsFactory.declareNotConstraints(final List<KiePMMLFieldOperatorValue> notConstraints)", "testcase": false, "constructor": false}, {"identifier": "commonDeclarePatternWithConstraint", "parameters": "(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "modifiers": "protected", "return": "void", "signature": "void commonDeclarePatternWithConstraint(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "full_signature": "protected void commonDeclarePatternWithConstraint(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "class_method_signature": "KiePMMLDescrLhsFactory.commonDeclarePatternWithConstraint(final CEDescrBuilder<?, ?> descrBuilder, final String patternType, final String constraintString)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintIn", "parameters": "(final String patternType, final List<Object> values)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintIn(final String patternType, final List<Object> values)", "full_signature": "protected void declareConstraintIn(final String patternType, final List<Object> values)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintIn(final String patternType, final List<Object> values)", "testcase": false, "constructor": false}, {"identifier": "declareConstraintNotIn", "parameters": "(final String patternType, final List<Object> values)", "modifiers": "protected", "return": "void", "signature": "void declareConstraintNotIn(final String patternType, final List<Object> values)", "full_signature": "protected void declareConstraintNotIn(final String patternType, final List<Object> values)", "class_method_signature": "KiePMMLDescrLhsFactory.declareConstraintNotIn(final String patternType, final List<Object> values)", "testcase": false, "constructor": false}, {"identifier": "declareIfBreak", "parameters": "(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "modifiers": "protected", "return": "void", "signature": "void declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "full_signature": "protected void declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "class_method_signature": "KiePMMLDescrLhsFactory.declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue)", "testcase": false, "constructor": false}, {"identifier": "getInNotInConstraint", "parameters": "(final List<Object> values)", "modifiers": "protected", "return": "String", "signature": "String getInNotInConstraint(final List<Object> values)", "full_signature": "protected String getInNotInConstraint(final List<Object> values)", "class_method_signature": "KiePMMLDescrLhsFactory.getInNotInConstraint(final List<Object> values)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/commons/factories/KiePMMLDescrLhsFactory.java"}, "focal_method": {"identifier": "declareLhs", "parameters": "(final KiePMMLDroolsRule rule)", "modifiers": "public", "return": "void", "body": "public void declareLhs(final KiePMMLDroolsRule rule) {\n        logger.trace(\"declareLhs {}\", rule);\n        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n        if (rule.getStatusConstraint() != null) {\n            patternDescrBuilder.constraint(rule.getStatusConstraint());\n        }\n        if (rule.getAndConstraints() != null) {\n            declareConstraintsAndOr(rule.getAndConstraints(), builder.and());\n        }\n        if (rule.getOrConstraints() != null) {\n            declareConstraintsAndOr(rule.getOrConstraints(), builder.or());\n        }\n        if (rule.getXorConstraints() != null) {\n            declareConstraintsXor(rule.getXorConstraints());\n        }\n        if (rule.getNotConstraints() != null) {\n            declareNotConstraints(rule.getNotConstraints());\n        }\n        if (rule.getInConstraints() != null) {\n            rule.getInConstraints().forEach(this::declareConstraintIn);\n        }\n        if (rule.getNotInConstraints() != null) {\n            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n        }\n        if (rule.getIfBreakField() != null) {\n            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n        }\n    }", "signature": "void declareLhs(final KiePMMLDroolsRule rule)", "full_signature": "public void declareLhs(final KiePMMLDroolsRule rule)", "class_method_signature": "KiePMMLDescrLhsFactory.declareLhs(final KiePMMLDroolsRule rule)", "testcase": false, "constructor": false, "invocations": ["trace", "id", "pattern", "getSimpleName", "getStatusConstraint", "constraint", "getStatusConstraint", "getAndConstraints", "declareConstraintsAndOr", "getAndConstraints", "and", "getOrConstraints", "declareConstraintsAndOr", "getOrConstraints", "or", "getXorConstraints", "declareConstraintsXor", "getXorConstraints", "getNotConstraints", "declareNotConstraints", "getNotConstraints", "getInConstraints", "forEach", "getInConstraints", "getNotInConstraints", "forEach", "getNotInConstraints", "getIfBreakField", "declareIfBreak", "getIfBreakField", "getIfBreakOperator", "getIfBreakValue"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}