{"test_class": {"identifier": "PTableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private DataContext myContext;", "modifier": "@Mock\n  private", "type": "DataContext", "declarator": "myContext", "var_name": "myContext"}, {"original_string": "@Mock\n  private CopyPasteManager myCopyPasteManager;", "modifier": "@Mock\n  private", "type": "CopyPasteManager", "declarator": "myCopyPasteManager", "var_name": "myCopyPasteManager"}, {"original_string": "private SimpleItem mySimpleItem;", "modifier": "private", "type": "SimpleItem", "declarator": "mySimpleItem", "var_name": "mySimpleItem"}, {"original_string": "private SimpleItem myEmptyItem;", "modifier": "private", "type": "SimpleItem", "declarator": "myEmptyItem", "var_name": "myEmptyItem"}, {"original_string": "private SimpleItem myItem1;", "modifier": "private", "type": "SimpleItem", "declarator": "myItem1", "var_name": "myItem1"}, {"original_string": "private SimpleItem myItem2;", "modifier": "private", "type": "SimpleItem", "declarator": "myItem2", "var_name": "myItem2"}, {"original_string": "private SimpleItem myItem3;", "modifier": "private", "type": "SimpleItem", "declarator": "myItem3", "var_name": "myItem3"}, {"original_string": "private PTable myTable;", "modifier": "private", "type": "PTable", "declarator": "myTable", "var_name": "myTable"}], "file": "layout-ui/src/test/java/com/android/tools/property/ptable/PTableTest.java"}, "test_case": {"identifier": "testRestoreSelection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRestoreSelection() {\n    assertThat(myTable.getSelectedItem()).isNull();\n    myTable.restoreSelection(1, myEmptyItem);\n    assertThat(myTable.getSelectedItem()).isSameAs(myEmptyItem);\n  }", "signature": "void testRestoreSelection()", "full_signature": "@Test public void testRestoreSelection()", "class_method_signature": "PTableTest.testRestoreSelection()", "testcase": true, "constructor": false, "invocations": ["isNull", "assertThat", "getSelectedItem", "restoreSelection", "isSameAs", "assertThat", "getSelectedItem"]}, "focal_class": {"identifier": "PTable", "superclass": "extends JBTable", "interfaces": "implements DataProvider, DeleteProvider, CutProvider, CopyProvider, PasteProvider", "fields": [{"original_string": "private final CopyPasteManager myCopyPasteManager;", "modifier": "private final", "type": "CopyPasteManager", "declarator": "myCopyPasteManager", "var_name": "myCopyPasteManager"}, {"original_string": "private PTableModel myModel;", "modifier": "private", "type": "PTableModel", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "private PTableCellRendererProvider myRendererProvider;", "modifier": "private", "type": "PTableCellRendererProvider", "declarator": "myRendererProvider", "var_name": "myRendererProvider"}, {"original_string": "private PTableCellEditorProvider myEditorProvider;", "modifier": "private", "type": "PTableCellEditorProvider", "declarator": "myEditorProvider", "var_name": "myEditorProvider"}, {"original_string": "private int myMouseHoverRow;", "modifier": "private", "type": "int", "declarator": "myMouseHoverRow", "var_name": "myMouseHoverRow"}, {"original_string": "private int myMouseHoverCol;", "modifier": "private", "type": "int", "declarator": "myMouseHoverCol", "var_name": "myMouseHoverCol"}, {"original_string": "private Point myMouseHoverPoint;", "modifier": "private", "type": "Point", "declarator": "myMouseHoverPoint", "var_name": "myMouseHoverPoint"}], "methods": [{"identifier": "PTable", "parameters": "(@NotNull PTableModel model)", "modifiers": "public", "return": "", "signature": " PTable(@NotNull PTableModel model)", "full_signature": "public  PTable(@NotNull PTableModel model)", "class_method_signature": "PTable.PTable(@NotNull PTableModel model)", "testcase": false, "constructor": true}, {"identifier": "PTable", "parameters": "(@NotNull PTableModel model, @NotNull CopyPasteManager copyPasteManager)", "modifiers": "public", "return": "", "signature": " PTable(@NotNull PTableModel model, @NotNull CopyPasteManager copyPasteManager)", "full_signature": "public  PTable(@NotNull PTableModel model, @NotNull CopyPasteManager copyPasteManager)", "class_method_signature": "PTable.PTable(@NotNull PTableModel model, @NotNull CopyPasteManager copyPasteManager)", "testcase": false, "constructor": true}, {"identifier": "setModel", "parameters": "(@NotNull TableModel model)", "modifiers": "@Override public", "return": "void", "signature": "void setModel(@NotNull TableModel model)", "full_signature": "@Override public void setModel(@NotNull TableModel model)", "class_method_signature": "PTable.setModel(@NotNull TableModel model)", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "@Override public", "return": "PTableModel", "signature": "PTableModel getModel()", "full_signature": "@Override public PTableModel getModel()", "class_method_signature": "PTable.getModel()", "testcase": false, "constructor": false}, {"identifier": "setRendererProvider", "parameters": "(@NotNull PTableCellRendererProvider rendererProvider)", "modifiers": "public", "return": "void", "signature": "void setRendererProvider(@NotNull PTableCellRendererProvider rendererProvider)", "full_signature": "public void setRendererProvider(@NotNull PTableCellRendererProvider rendererProvider)", "class_method_signature": "PTable.setRendererProvider(@NotNull PTableCellRendererProvider rendererProvider)", "testcase": false, "constructor": false}, {"identifier": "setEditorProvider", "parameters": "(PTableCellEditorProvider editorProvider)", "modifiers": "public", "return": "void", "signature": "void setEditorProvider(PTableCellEditorProvider editorProvider)", "full_signature": "public void setEditorProvider(PTableCellEditorProvider editorProvider)", "class_method_signature": "PTable.setEditorProvider(PTableCellEditorProvider editorProvider)", "testcase": false, "constructor": false}, {"identifier": "surrendersFocusOnKeyStroke", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean surrendersFocusOnKeyStroke()", "full_signature": "@Override public boolean surrendersFocusOnKeyStroke()", "class_method_signature": "PTable.surrendersFocusOnKeyStroke()", "testcase": false, "constructor": false}, {"identifier": "prepareEditor", "parameters": "(TableCellEditor editor, int row, int column)", "modifiers": "@Override public", "return": "Component", "signature": "Component prepareEditor(TableCellEditor editor, int row, int column)", "full_signature": "@Override public Component prepareEditor(TableCellEditor editor, int row, int column)", "class_method_signature": "PTable.prepareEditor(TableCellEditor editor, int row, int column)", "testcase": false, "constructor": false}, {"identifier": "getCellRenderer", "parameters": "(int row, int column)", "modifiers": "@Override public", "return": "TableCellRenderer", "signature": "TableCellRenderer getCellRenderer(int row, int column)", "full_signature": "@Override public TableCellRenderer getCellRenderer(int row, int column)", "class_method_signature": "PTable.getCellRenderer(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "getCellEditor", "parameters": "(int row, int column)", "modifiers": "@Override public", "return": "PTableCellEditor", "signature": "PTableCellEditor getCellEditor(int row, int column)", "full_signature": "@Override public PTableCellEditor getCellEditor(int row, int column)", "class_method_signature": "PTable.getCellEditor(int row, int column)", "testcase": false, "constructor": false}, {"identifier": "isHover", "parameters": "(int row, int col)", "modifiers": "public", "return": "boolean", "signature": "boolean isHover(int row, int col)", "full_signature": "public boolean isHover(int row, int col)", "class_method_signature": "PTable.isHover(int row, int col)", "testcase": false, "constructor": false}, {"identifier": "getHoverPosition", "parameters": "()", "modifiers": "@NotNull public", "return": "Point", "signature": "Point getHoverPosition()", "full_signature": "@NotNull public Point getHoverPosition()", "class_method_signature": "PTable.getHoverPosition()", "testcase": false, "constructor": false}, {"identifier": "setUI", "parameters": "(TableUI ui)", "modifiers": "@Override public", "return": "void", "signature": "void setUI(TableUI ui)", "full_signature": "@Override public void setUI(TableUI ui)", "class_method_signature": "PTable.setUI(TableUI ui)", "testcase": false, "constructor": false}, {"identifier": "toggleTreeNode", "parameters": "(int row)", "modifiers": "private", "return": "void", "signature": "void toggleTreeNode(int row)", "full_signature": "private void toggleTreeNode(int row)", "class_method_signature": "PTable.toggleTreeNode(int row)", "testcase": false, "constructor": false}, {"identifier": "toggleStar", "parameters": "(int row)", "modifiers": "private", "return": "void", "signature": "void toggleStar(int row)", "full_signature": "private void toggleStar(int row)", "class_method_signature": "PTable.toggleStar(int row)", "testcase": false, "constructor": false}, {"identifier": "selectRow", "parameters": "(int row)", "modifiers": "private", "return": "void", "signature": "void selectRow(int row)", "full_signature": "private void selectRow(int row)", "class_method_signature": "PTable.selectRow(int row)", "testcase": false, "constructor": false}, {"identifier": "quickEdit", "parameters": "(int row)", "modifiers": "private", "return": "void", "signature": "void quickEdit(int row)", "full_signature": "private void quickEdit(int row)", "class_method_signature": "PTable.quickEdit(int row)", "testcase": false, "constructor": false}, {"identifier": "startEditing", "parameters": "(int row, @Nullable Runnable afterActivation)", "modifiers": "private", "return": "void", "signature": "void startEditing(int row, @Nullable Runnable afterActivation)", "full_signature": "private void startEditing(int row, @Nullable Runnable afterActivation)", "class_method_signature": "PTable.startEditing(int row, @Nullable Runnable afterActivation)", "testcase": false, "constructor": false}, {"identifier": "getComponentToFocus", "parameters": "(PTableCellEditor editor)", "modifiers": "@Nullable private", "return": "JComponent", "signature": "JComponent getComponentToFocus(PTableCellEditor editor)", "full_signature": "@Nullable private JComponent getComponentToFocus(PTableCellEditor editor)", "class_method_signature": "PTable.getComponentToFocus(PTableCellEditor editor)", "testcase": false, "constructor": false}, {"identifier": "restoreSelection", "parameters": "(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "modifiers": "public", "return": "void", "signature": "void restoreSelection(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "full_signature": "public void restoreSelection(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "class_method_signature": "PTable.restoreSelection(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "testcase": false, "constructor": false}, {"identifier": "getSelectedItem", "parameters": "()", "modifiers": "@Nullable public", "return": "PTableItem", "signature": "PTableItem getSelectedItem()", "full_signature": "@Nullable public PTableItem getSelectedItem()", "class_method_signature": "PTable.getSelectedItem()", "testcase": false, "constructor": false}, {"identifier": "getItemAt", "parameters": "(int rowIndex)", "modifiers": "@Nullable public", "return": "PTableItem", "signature": "PTableItem getItemAt(int rowIndex)", "full_signature": "@Nullable public PTableItem getItemAt(int rowIndex)", "class_method_signature": "PTable.getItemAt(int rowIndex)", "testcase": false, "constructor": false}, {"identifier": "getSelectedNonGroupItem", "parameters": "()", "modifiers": "@Nullable private", "return": "PTableItem", "signature": "PTableItem getSelectedNonGroupItem()", "full_signature": "@Nullable private PTableItem getSelectedNonGroupItem()", "class_method_signature": "PTable.getSelectedNonGroupItem()", "testcase": false, "constructor": false}, {"identifier": "getData", "parameters": "(@NotNull @NonNls String dataId)", "modifiers": "@Override public", "return": "Object", "signature": "Object getData(@NotNull @NonNls String dataId)", "full_signature": "@Override public Object getData(@NotNull @NonNls String dataId)", "class_method_signature": "PTable.getData(@NotNull @NonNls String dataId)", "testcase": false, "constructor": false}, {"identifier": "isCopyEnabled", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCopyEnabled(@NotNull DataContext dataContext)", "full_signature": "@Override public boolean isCopyEnabled(@NotNull DataContext dataContext)", "class_method_signature": "PTable.isCopyEnabled(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "isCopyVisible", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCopyVisible(@NotNull DataContext dataContext)", "full_signature": "@Override public boolean isCopyVisible(@NotNull DataContext dataContext)", "class_method_signature": "PTable.isCopyVisible(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "performCopy", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "void", "signature": "void performCopy(@NotNull DataContext dataContext)", "full_signature": "@Override public void performCopy(@NotNull DataContext dataContext)", "class_method_signature": "PTable.performCopy(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "isCutEnabled", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCutEnabled(@NotNull DataContext dataContext)", "full_signature": "@Override public boolean isCutEnabled(@NotNull DataContext dataContext)", "class_method_signature": "PTable.isCutEnabled(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "isCutVisible", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCutVisible(@NotNull DataContext dataContext)", "full_signature": "@Override public boolean isCutVisible(@NotNull DataContext dataContext)", "class_method_signature": "PTable.isCutVisible(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "performCut", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "void", "signature": "void performCut(@NotNull DataContext dataContext)", "full_signature": "@Override public void performCut(@NotNull DataContext dataContext)", "class_method_signature": "PTable.performCut(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "canDeleteElement", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canDeleteElement(@NotNull DataContext dataContext)", "full_signature": "@Override public boolean canDeleteElement(@NotNull DataContext dataContext)", "class_method_signature": "PTable.canDeleteElement(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "deleteElement", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "void", "signature": "void deleteElement(@NotNull DataContext dataContext)", "full_signature": "@Override public void deleteElement(@NotNull DataContext dataContext)", "class_method_signature": "PTable.deleteElement(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "isPastePossible", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPastePossible(@NotNull DataContext dataContext)", "full_signature": "@Override public boolean isPastePossible(@NotNull DataContext dataContext)", "class_method_signature": "PTable.isPastePossible(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "isPasteEnabled", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isPasteEnabled(@NotNull DataContext dataContext)", "full_signature": "@Override public boolean isPasteEnabled(@NotNull DataContext dataContext)", "class_method_signature": "PTable.isPasteEnabled(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}, {"identifier": "performPaste", "parameters": "(@NotNull DataContext dataContext)", "modifiers": "@Override public", "return": "void", "signature": "void performPaste(@NotNull DataContext dataContext)", "full_signature": "@Override public void performPaste(@NotNull DataContext dataContext)", "class_method_signature": "PTable.performPaste(@NotNull DataContext dataContext)", "testcase": false, "constructor": false}], "file": "layout-ui/src/main/java/com/android/tools/property/ptable/PTable.java"}, "focal_method": {"identifier": "restoreSelection", "parameters": "(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "modifiers": "public", "return": "void", "body": "public void restoreSelection(int previousSelectedRow, @Nullable PTableItem previousSelectedItem) {\n    int selectedRow = 0;\n    if (previousSelectedItem != null) {\n      PTableItem item =\n        previousSelectedRow >= 0 && previousSelectedRow < getRowCount() ? (PTableItem)getValueAt(previousSelectedRow, 0) : null;\n      if (Objects.equals(item, previousSelectedItem)) {\n        selectedRow = previousSelectedRow;\n      }\n      else {\n        for (int row = 0; row < getRowCount(); row++) {\n          item = (PTableItem)getValueAt(row, 0);\n          if (item.equals(previousSelectedItem)) {\n            selectedRow = row;\n            break;\n          }\n        }\n      }\n    }\n    if (selectedRow < getRowCount()) {\n      addRowSelectionInterval(selectedRow, selectedRow);\n    }\n  }", "signature": "void restoreSelection(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "full_signature": "public void restoreSelection(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "class_method_signature": "PTable.restoreSelection(int previousSelectedRow, @Nullable PTableItem previousSelectedItem)", "testcase": false, "constructor": false, "invocations": ["getRowCount", "getValueAt", "equals", "getRowCount", "getValueAt", "equals", "getRowCount", "addRowSelectionInterval"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}