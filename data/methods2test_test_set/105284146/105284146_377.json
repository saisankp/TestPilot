{"test_class": {"identifier": "PsseImporterTest", "superclass": "extends AbstractConverterTest", "interfaces": "", "fields": [], "file": "psse/psse-converter/src/test/java/com/powsybl/psse/converter/PsseImporterTest.java"}, "test_case": {"identifier": "badVersionTest", "parameters": "()", "modifiers": "@Test(expected = PsseException.class) public", "return": "void", "body": "@Test(expected = PsseException.class)\n    public void badVersionTest() {\n        ReadOnlyDataSource dataSource = new ResourceDataSource(\"case-flag-not-supported\", new ResourceSet(\"/\", \"case-flag-not-supported.raw\"));\n        new PsseImporter().importData(dataSource, new NetworkFactoryImpl(), null);\n    }", "signature": "void badVersionTest()", "full_signature": "@Test(expected = PsseException.class) public void badVersionTest()", "class_method_signature": "PsseImporterTest.badVersionTest()", "testcase": true, "constructor": false, "invocations": ["importData"]}, "focal_class": {"identifier": "PsseImporter", "superclass": "", "interfaces": "implements Importer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PsseImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PsseImporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String FORMAT = \"PSS/E\";", "modifier": "private static final", "type": "String", "declarator": "FORMAT = \"PSS/E\"", "var_name": "FORMAT"}, {"original_string": "private static final String[] EXTS = {\"raw\", \"RAW\"};", "modifier": "private static final", "type": "String[]", "declarator": "EXTS = {\"raw\", \"RAW\"}", "var_name": "EXTS"}, {"original_string": "private static final Parameter IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"psse.import.ignore-base-voltage\",\n            ParameterType.BOOLEAN,\n            \"Ignore base voltage specified in the file\",\n            Boolean.FALSE);", "modifier": "private static final", "type": "Parameter", "declarator": "IGNORE_BASE_VOLTAGE_PARAMETER = new Parameter(\"psse.import.ignore-base-voltage\",\n            ParameterType.BOOLEAN,\n            \"Ignore base voltage specified in the file\",\n            Boolean.FALSE)", "var_name": "IGNORE_BASE_VOLTAGE_PARAMETER"}, {"original_string": "private static final String V_PROPERTY = \"v\";", "modifier": "private static final", "type": "String", "declarator": "V_PROPERTY = \"v\"", "var_name": "V_PROPERTY"}, {"original_string": "private static final String ANGLE_PROPERTY = \"angle\";", "modifier": "private static final", "type": "String", "declarator": "ANGLE_PROPERTY = \"angle\"", "var_name": "ANGLE_PROPERTY"}], "methods": [{"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFormat()", "full_signature": "@Override public String getFormat()", "class_method_signature": "PsseImporter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<Parameter>", "signature": "List<Parameter> getParameters()", "full_signature": "@Override public List<Parameter> getParameters()", "class_method_signature": "PsseImporter.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getComment()", "full_signature": "@Override public String getComment()", "class_method_signature": "PsseImporter.getComment()", "testcase": false, "constructor": false}, {"identifier": "findExtension", "parameters": "(ReadOnlyDataSource dataSource, boolean throwException)", "modifiers": "private", "return": "String", "signature": "String findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "full_signature": "private String findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "class_method_signature": "PsseImporter.findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(ReadOnlyDataSource dataSource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(ReadOnlyDataSource dataSource)", "full_signature": "@Override public boolean exists(ReadOnlyDataSource dataSource)", "class_method_signature": "PsseImporter.exists(ReadOnlyDataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "modifiers": "@Override public", "return": "void", "signature": "void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "full_signature": "@Override public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "class_method_signature": "PsseImporter.copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "testcase": false, "constructor": false}, {"identifier": "getBusId", "parameters": "(int busNum)", "modifiers": "private static", "return": "String", "signature": "String getBusId(int busNum)", "full_signature": "private static String getBusId(int busNum)", "class_method_signature": "PsseImporter.getBusId(int busNum)", "testcase": false, "constructor": false}, {"identifier": "createBus", "parameters": "(PsseBus psseBus, VoltageLevel voltageLevel)", "modifiers": "private static", "return": "Bus", "signature": "Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel)", "full_signature": "private static Bus createBus(PsseBus psseBus, VoltageLevel voltageLevel)", "class_method_signature": "PsseImporter.createBus(PsseBus psseBus, VoltageLevel voltageLevel)", "testcase": false, "constructor": false}, {"identifier": "createSubstation", "parameters": "(Network network, String substationId)", "modifiers": "private static", "return": "Substation", "signature": "Substation createSubstation(Network network, String substationId)", "full_signature": "private static Substation createSubstation(Network network, String substationId)", "class_method_signature": "PsseImporter.createSubstation(Network network, String substationId)", "testcase": false, "constructor": false}, {"identifier": "createVoltageLevel", "parameters": "(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "modifiers": "private static", "return": "VoltageLevel", "signature": "VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "full_signature": "private static VoltageLevel createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "class_method_signature": "PsseImporter.createVoltageLevel(PsseBus psseBus, PerUnitContext perUnitContext,\n                                                   String voltageLevelId, Substation substation, Network network)", "testcase": false, "constructor": false}, {"identifier": "createLoad", "parameters": "(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "modifiers": "private static", "return": "void", "signature": "void createLoad(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "full_signature": "private static void createLoad(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "class_method_signature": "PsseImporter.createLoad(PsseLoad psseLoad, ContainersMapping containerMapping, Network network)", "testcase": false, "constructor": false}, {"identifier": "createShuntCompensator", "parameters": "(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "modifiers": "private static", "return": "void", "signature": "void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "full_signature": "private static void createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "class_method_signature": "PsseImporter.createShuntCompensator(PsseFixedShunt psseShunt, ContainersMapping containerMapping, Network network)", "testcase": false, "constructor": false}, {"identifier": "createSwitchedShuntBlockMap", "parameters": "(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "modifiers": "private", "return": "void", "signature": "void createSwitchedShuntBlockMap(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "full_signature": "private void createSwitchedShuntBlockMap(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "class_method_signature": "PsseImporter.createSwitchedShuntBlockMap(PsseRawModel psseModel, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "testcase": false, "constructor": false}, {"identifier": "createSwitchedShunt", "parameters": "(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "modifiers": "private static", "return": "void", "signature": "void createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "full_signature": "private static void createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "class_method_signature": "PsseImporter.createSwitchedShunt(PsseSwitchedShunt psseSwShunt, PerUnitContext perUnitContext, ContainersMapping containerMapping, Network network, Map<PsseSwitchedShunt, ShuntBlockTab> stoBlockiTab)", "testcase": false, "constructor": false}, {"identifier": "createGenerator", "parameters": "(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "modifiers": "private static", "return": "void", "signature": "void createGenerator(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "full_signature": "private static void createGenerator(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "class_method_signature": "PsseImporter.createGenerator(PsseGenerator psseGen, PsseBus psseBus, ContainersMapping containerMapping, Network network)", "testcase": false, "constructor": false}, {"identifier": "createBuses", "parameters": "(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "modifiers": "private static", "return": "void", "signature": "void createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "full_signature": "private static void createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "class_method_signature": "PsseImporter.createBuses(PsseRawModel psseModel, ContainersMapping containerMapping, PerUnitContext perUnitContext,\n                                    Network network, Map<Integer, PsseBus> busNumToPsseBus)", "testcase": false, "constructor": false}, {"identifier": "createLine", "parameters": "(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "modifiers": "private static", "return": "void", "signature": "void createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "full_signature": "private static void createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "class_method_signature": "PsseImporter.createLine(PsseNonTransformerBranch psseLine, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network)", "testcase": false, "constructor": false}, {"identifier": "createTransformer", "parameters": "(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "modifiers": "private static", "return": "void", "signature": "void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "full_signature": "private static void createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "class_method_signature": "PsseImporter.createTransformer(PsseTransformer psseTfo, ContainersMapping containerMapping, PerUnitContext perUnitContext, Network network, Map<Integer, PsseBus> busNumToPsseBus, double sbase)", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "PsseImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false}], "file": "psse/psse-converter/src/main/java/com/powsybl/psse/converter/PsseImporter.java"}, "focal_method": {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "body": "@Override\n    public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters) {\n        Objects.requireNonNull(dataSource);\n        Objects.requireNonNull(networkFactory);\n\n        Network network = networkFactory.createNetwork(dataSource.getBaseName(), FORMAT);\n\n        try {\n            String ext = findExtension(dataSource, true);\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n\n                // parse file\n                PsseRawModel psseModel = new PsseRawReader().read(reader);\n\n                // check version\n                if (psseModel.getCaseIdentification().getRev() > PsseConstants.SUPPORTED_VERSION) {\n                    throw new PsseException(\"PSS/E version higher than \" + PsseConstants.SUPPORTED_VERSION + \" not supported\");\n                }\n                if (psseModel.getCaseIdentification().getIc() == 1) {\n                    throw new PsseException(\"Incremental load of PSS/E data option (IC = 1) not supported\");\n                }\n\n                // set date and time\n                // TODO\n\n                // build container to fit IIDM requirements\n                List<Object> branches = ImmutableList.builder()\n                        .addAll(psseModel.getNonTransformerBranches())\n                        .addAll(psseModel.getTransformers())\n                        .build();\n                ToIntFunction<Object> branchToNum1 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getI() : ((PsseTransformer) branch).getFirstRecord().getI();\n                ToIntFunction<Object> branchToNum2 = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getJ() : ((PsseTransformer) branch).getFirstRecord().getJ();\n                ToIntFunction<Object> branchToNum3 = branch -> branch instanceof PsseNonTransformerBranch ? 0 : ((PsseTransformer) branch).getFirstRecord().getK();\n                ToDoubleFunction<Object> branchToResistance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getR() : ((PsseTransformer) branch).getSecondRecord().getR12();\n                ToDoubleFunction<Object> branchToReactance = branch -> branch instanceof PsseNonTransformerBranch ? ((PsseNonTransformerBranch) branch).getX() : ((PsseTransformer) branch).getSecondRecord().getX12();\n                Predicate<Object> branchToIsTransformer = branch -> branch instanceof PsseTransformer;\n                ContainersMapping containerMapping = ContainersMapping.create(psseModel.getBuses(), branches, PsseBus::getI, branchToNum1,\n                    branchToNum2, branchToNum3, branchToResistance, branchToReactance, branchToIsTransformer,\n                    busNums -> \"VL\" + busNums.iterator().next(), substationNum -> \"S\" + substationNum++);\n\n                boolean ignoreBaseVoltage = ConversionParameters.readBooleanParameter(FORMAT, parameters, IGNORE_BASE_VOLTAGE_PARAMETER,\n                        ParameterDefaultValueConfig.INSTANCE);\n                PerUnitContext perUnitContext = new PerUnitContext(psseModel.getCaseIdentification().getSbase(), ignoreBaseVoltage);\n\n                //The map gives access to PsseBus object with the int bus Number\n                Map<Integer, PsseBus> busNumToPsseBus = new HashMap<>();\n\n                // create buses\n                createBuses(psseModel, containerMapping, perUnitContext, network, busNumToPsseBus);\n\n                //Create loads\n                for (PsseLoad psseLoad : psseModel.getLoads()) {\n                    createLoad(psseLoad, containerMapping, network);\n                }\n\n                //Create fixed shunts\n                for (PsseFixedShunt psseShunt : psseModel.getFixedShunts()) {\n                    createShuntCompensator(psseShunt, containerMapping, network);\n                }\n\n                //Create switched shunts\n                Map<PsseSwitchedShunt, ShuntBlockTab > stoBlockiTab = new HashMap<>();\n                createSwitchedShuntBlockMap(psseModel, stoBlockiTab);\n                for (PsseSwitchedShunt psseSwShunt : psseModel.getSwitchedShunts()) {\n                    createSwitchedShunt(psseSwShunt, perUnitContext, containerMapping, network, stoBlockiTab);\n                }\n\n                for (PsseGenerator psseGen : psseModel.getGenerators()) {\n                    createGenerator(psseGen, busNumToPsseBus.get(psseGen.getI()), containerMapping, network);\n                }\n\n                for (PsseNonTransformerBranch psseLine : psseModel.getNonTransformerBranches()) {\n                    createLine(psseLine, containerMapping, perUnitContext, network);\n                }\n\n                for (PsseTransformer psseTfo : psseModel.getTransformers()) {\n                    createTransformer(psseTfo, containerMapping, perUnitContext, network, busNumToPsseBus, psseModel.getCaseIdentification().getSbase());\n                }\n\n                // Attach a slack bus\n                for (PsseArea psseArea : psseModel.getAreas()) {\n                    if (psseArea.getIsw() != 0) {\n                        String busId = getBusId(psseArea.getIsw());\n                        Bus bus = network.getBusBreakerView().getBus(busId);\n                        SlackTerminal.attach(bus);\n                    }\n                }\n\n                return network;\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "PsseImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "createNetwork", "getBaseName", "findExtension", "newInputStream", "read", "getRev", "getCaseIdentification", "getIc", "getCaseIdentification", "build", "addAll", "addAll", "builder", "getNonTransformerBranches", "getTransformers", "getI", "getI", "getFirstRecord", "getJ", "getJ", "getFirstRecord", "getK", "getFirstRecord", "getR", "getR12", "getSecondRecord", "getX", "getX12", "getSecondRecord", "create", "getBuses", "next", "iterator", "readBooleanParameter", "getSbase", "getCaseIdentification", "createBuses", "getLoads", "createLoad", "getFixedShunts", "createShuntCompensator", "createSwitchedShuntBlockMap", "getSwitchedShunts", "createSwitchedShunt", "getGenerators", "createGenerator", "get", "getI", "getNonTransformerBranches", "createLine", "getTransformers", "createTransformer", "getSbase", "getCaseIdentification", "getAreas", "getIsw", "getBusId", "getIsw", "getBus", "getBusBreakerView", "attach"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}