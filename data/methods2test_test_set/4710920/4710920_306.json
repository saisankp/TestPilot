{"test_class": {"identifier": "NacosDynamicConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SESSION_TIMEOUT_KEY = \"session\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_TIMEOUT_KEY = \"session\"", "var_name": "SESSION_TIMEOUT_KEY"}, {"original_string": "private static NacosDynamicConfiguration config;", "modifier": "private static", "type": "NacosDynamicConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private static ConfigService nacosClient;", "modifier": "private static", "type": "ConfigService", "declarator": "nacosClient", "var_name": "nacosClient"}], "file": "dubbo-configcenter/dubbo-configcenter-nacos/src/test/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfigurationTest.java"}, "test_case": {"identifier": "testAddListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddListener() throws Exception {\n        CountDownLatch latch = new CountDownLatch(4);\n        TestListener listener1 = new TestListener(latch);\n        TestListener listener2 = new TestListener(latch);\n        TestListener listener3 = new TestListener(latch);\n        TestListener listener4 = new TestListener(latch);\n\n\n        config.addListener(\"AService.configurators\", listener1);\n        config.addListener(\"AService.configurators\", listener2);\n        config.addListener(\"testapp.tag-router\", listener3);\n        config.addListener(\"testapp.tag-router\", listener4);\n\n        put(\"AService.configurators\", \"new value1\");\n        Thread.sleep(200);\n        put(\"testapp.tag-router\", \"new value2\");\n        Thread.sleep(200);\n        put(\"testapp\", \"new value3\");\n        Thread.sleep(5000);\n\n        latch.await();\n\n        Assertions.assertEquals(1, listener1.getCount(\"AService.configurators\"));\n        Assertions.assertEquals(1, listener2.getCount(\"AService.configurators\"));\n        Assertions.assertEquals(1, listener3.getCount(\"testapp.tag-router\"));\n        Assertions.assertEquals(1, listener4.getCount(\"testapp.tag-router\"));\n\n        Assertions.assertEquals(\"new value1\", listener1.getValue());\n        Assertions.assertEquals(\"new value1\", listener2.getValue());\n        Assertions.assertEquals(\"new value2\", listener3.getValue());\n        Assertions.assertEquals(\"new value2\", listener4.getValue());\n\n    }", "signature": "void testAddListener()", "full_signature": "@Test public void testAddListener()", "class_method_signature": "NacosDynamicConfigurationTest.testAddListener()", "testcase": true, "constructor": false, "invocations": ["addListener", "addListener", "addListener", "addListener", "put", "sleep", "put", "sleep", "put", "sleep", "await", "assertEquals", "getCount", "assertEquals", "getCount", "assertEquals", "getCount", "assertEquals", "getCount", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "NacosDynamicConfiguration", "superclass": "", "interfaces": "implements DynamicConfiguration", "fields": [{"original_string": "private static final String GET_CONFIG_KEYS_PATH = \"/v1/cs/configs\";", "modifier": "private static final", "type": "String", "declarator": "GET_CONFIG_KEYS_PATH = \"/v1/cs/configs\"", "var_name": "GET_CONFIG_KEYS_PATH"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private static final long DEFAULT_TIMEOUT = 5000L;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_TIMEOUT = 5000L", "var_name": "DEFAULT_TIMEOUT"}, {"original_string": "private Properties nacosProperties;", "modifier": "private", "type": "Properties", "declarator": "nacosProperties", "var_name": "nacosProperties"}, {"original_string": "private final ConfigService configService;", "modifier": "private final", "type": "ConfigService", "declarator": "configService", "var_name": "configService"}, {"original_string": "private HttpAgent httpAgent;", "modifier": "private", "type": "HttpAgent", "declarator": "httpAgent", "var_name": "httpAgent"}, {"original_string": "private final ConcurrentMap<String, NacosConfigListener> watchListenerMap;", "modifier": "private final", "type": "ConcurrentMap<String, NacosConfigListener>", "declarator": "watchListenerMap", "var_name": "watchListenerMap"}], "methods": [{"identifier": "NacosDynamicConfiguration", "parameters": "(URL url)", "modifiers": "", "return": "", "signature": " NacosDynamicConfiguration(URL url)", "full_signature": "  NacosDynamicConfiguration(URL url)", "class_method_signature": "NacosDynamicConfiguration.NacosDynamicConfiguration(URL url)", "testcase": false, "constructor": true}, {"identifier": "buildConfigService", "parameters": "(URL url)", "modifiers": "private", "return": "ConfigService", "signature": "ConfigService buildConfigService(URL url)", "full_signature": "private ConfigService buildConfigService(URL url)", "class_method_signature": "NacosDynamicConfiguration.buildConfigService(URL url)", "testcase": false, "constructor": false}, {"identifier": "getHttpAgent", "parameters": "(ConfigService configService)", "modifiers": "private", "return": "HttpAgent", "signature": "HttpAgent getHttpAgent(ConfigService configService)", "full_signature": "private HttpAgent getHttpAgent(ConfigService configService)", "class_method_signature": "NacosDynamicConfiguration.getHttpAgent(ConfigService configService)", "testcase": false, "constructor": false}, {"identifier": "buildNacosProperties", "parameters": "(URL url)", "modifiers": "private", "return": "Properties", "signature": "Properties buildNacosProperties(URL url)", "full_signature": "private Properties buildNacosProperties(URL url)", "class_method_signature": "NacosDynamicConfiguration.buildNacosProperties(URL url)", "testcase": false, "constructor": false}, {"identifier": "setServerAddr", "parameters": "(URL url, Properties properties)", "modifiers": "private", "return": "void", "signature": "void setServerAddr(URL url, Properties properties)", "full_signature": "private void setServerAddr(URL url, Properties properties)", "class_method_signature": "NacosDynamicConfiguration.setServerAddr(URL url, Properties properties)", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(URL url, Properties properties)", "modifiers": "private static", "return": "void", "signature": "void setProperties(URL url, Properties properties)", "full_signature": "private static void setProperties(URL url, Properties properties)", "class_method_signature": "NacosDynamicConfiguration.setProperties(URL url, Properties properties)", "testcase": false, "constructor": false}, {"identifier": "putPropertyIfAbsent", "parameters": "(URL url, Properties properties, String propertyName)", "modifiers": "private static", "return": "void", "signature": "void putPropertyIfAbsent(URL url, Properties properties, String propertyName)", "full_signature": "private static void putPropertyIfAbsent(URL url, Properties properties, String propertyName)", "class_method_signature": "NacosDynamicConfiguration.putPropertyIfAbsent(URL url, Properties properties, String propertyName)", "testcase": false, "constructor": false}, {"identifier": "putPropertyIfAbsent", "parameters": "(URL url, Properties properties, String propertyName, String defaultValue)", "modifiers": "private static", "return": "void", "signature": "void putPropertyIfAbsent(URL url, Properties properties, String propertyName, String defaultValue)", "full_signature": "private static void putPropertyIfAbsent(URL url, Properties properties, String propertyName, String defaultValue)", "class_method_signature": "NacosDynamicConfiguration.putPropertyIfAbsent(URL url, Properties properties, String propertyName, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "createTargetListener", "parameters": "(String key, String group)", "modifiers": "private", "return": "NacosConfigListener", "signature": "NacosConfigListener createTargetListener(String key, String group)", "full_signature": "private NacosConfigListener createTargetListener(String key, String group)", "class_method_signature": "NacosDynamicConfiguration.createTargetListener(String key, String group)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void addListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "NacosDynamicConfiguration.addListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void removeListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "NacosDynamicConfiguration.removeListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "(String key, String group, long timeout)", "modifiers": "@Override public", "return": "String", "signature": "String getConfig(String key, String group, long timeout)", "full_signature": "@Override public String getConfig(String key, String group, long timeout)", "class_method_signature": "NacosDynamicConfiguration.getConfig(String key, String group, long timeout)", "testcase": false, "constructor": false}, {"identifier": "getInternalProperty", "parameters": "(String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object getInternalProperty(String key)", "full_signature": "@Override public Object getInternalProperty(String key)", "class_method_signature": "NacosDynamicConfiguration.getInternalProperty(String key)", "testcase": false, "constructor": false}, {"identifier": "publishConfig", "parameters": "(String key, String group, String content)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean publishConfig(String key, String group, String content)", "full_signature": "@Override public boolean publishConfig(String key, String group, String content)", "class_method_signature": "NacosDynamicConfiguration.publishConfig(String key, String group, String content)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTimeout", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getDefaultTimeout()", "full_signature": "@Override public long getDefaultTimeout()", "class_method_signature": "NacosDynamicConfiguration.getDefaultTimeout()", "testcase": false, "constructor": false}, {"identifier": "getConfigKeys", "parameters": "(String group)", "modifiers": "@Override public", "return": "SortedSet<String>", "signature": "SortedSet<String> getConfigKeys(String group)", "full_signature": "@Override public SortedSet<String> getConfigKeys(String group)", "class_method_signature": "NacosDynamicConfiguration.getConfigKeys(String group)", "testcase": false, "constructor": false}, {"identifier": "removeConfig", "parameters": "(String key, String group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeConfig(String key, String group)", "full_signature": "@Override public boolean removeConfig(String key, String group)", "class_method_signature": "NacosDynamicConfiguration.removeConfig(String key, String group)", "testcase": false, "constructor": false}, {"identifier": "toKeysStream", "parameters": "(String content)", "modifiers": "private", "return": "Stream<String>", "signature": "Stream<String> toKeysStream(String content)", "full_signature": "private Stream<String> toKeysStream(String content)", "class_method_signature": "NacosDynamicConfiguration.toKeysStream(String content)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name, String defaultValue)", "modifiers": "private", "return": "String", "signature": "String getProperty(String name, String defaultValue)", "full_signature": "private String getProperty(String name, String defaultValue)", "class_method_signature": "NacosDynamicConfiguration.getProperty(String name, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "buildListenerKey", "parameters": "(String key, String group)", "modifiers": "protected", "return": "String", "signature": "String buildListenerKey(String key, String group)", "full_signature": "protected String buildListenerKey(String key, String group)", "class_method_signature": "NacosDynamicConfiguration.buildListenerKey(String key, String group)", "testcase": false, "constructor": false}, {"identifier": "resolveGroup", "parameters": "(String group)", "modifiers": "protected", "return": "String", "signature": "String resolveGroup(String group)", "full_signature": "protected String resolveGroup(String group)", "class_method_signature": "NacosDynamicConfiguration.resolveGroup(String group)", "testcase": false, "constructor": false}], "file": "dubbo-configcenter/dubbo-configcenter-nacos/src/main/java/org/apache/dubbo/configcenter/support/nacos/NacosDynamicConfiguration.java"}, "focal_method": {"identifier": "addListener", "parameters": "(String key, String group, ConfigurationListener listener)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addListener(String key, String group, ConfigurationListener listener) {\n        String resolvedGroup = resolveGroup(group);\n        String listenerKey = buildListenerKey(key, group);\n        NacosConfigListener nacosConfigListener = watchListenerMap.computeIfAbsent(listenerKey, k -> createTargetListener(key, resolvedGroup));\n        nacosConfigListener.addListener(listener);\n        try {\n            configService.addListener(key, resolvedGroup, nacosConfigListener);\n        } catch (NacosException e) {\n            logger.error(e.getMessage());\n        }\n    }", "signature": "void addListener(String key, String group, ConfigurationListener listener)", "full_signature": "@Override public void addListener(String key, String group, ConfigurationListener listener)", "class_method_signature": "NacosDynamicConfiguration.addListener(String key, String group, ConfigurationListener listener)", "testcase": false, "constructor": false, "invocations": ["resolveGroup", "buildListenerKey", "computeIfAbsent", "createTargetListener", "addListener", "addListener", "error", "getMessage"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}