{"test_class": {"identifier": "BasicSceneGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "private BasicSceneGenerator generator;", "modifier": "private", "type": "BasicSceneGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/BasicSceneGeneratorTest.java"}, "test_case": {"identifier": "testSingleAtom", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSingleAtom() {\n        IAtomContainer singleAtom = makeSingleAtom();\n\n        // nothing should be made\n        IRenderingElement root = generator.generate(singleAtom, model);\n        List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root);\n        Assert.assertEquals(0, elements.size());\n    }", "signature": "void testSingleAtom()", "full_signature": "@Test public void testSingleAtom()", "class_method_signature": "BasicSceneGeneratorTest.testSingleAtom()", "testcase": true, "constructor": false, "invocations": ["makeSingleAtom", "generate", "getAllSimpleElements", "assertEquals", "size"]}, "focal_class": {"identifier": "BasicSceneGenerator", "superclass": "", "interfaces": "implements IGenerator<IAtomContainer>", "fields": [{"original_string": "private IGeneratorParameter<Double> arrowHeadWidth = new ArrowHeadWidth();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "arrowHeadWidth = new ArrowHeadWidth()", "var_name": "arrowHeadWidth"}, {"original_string": "private ShowTooltip showTooltip = new ShowTooltip();", "modifier": "private", "type": "ShowTooltip", "declarator": "showTooltip = new ShowTooltip()", "var_name": "showTooltip"}, {"original_string": "private ShowMoleculeTitle showMoleculeTitle = new ShowMoleculeTitle();", "modifier": "private", "type": "ShowMoleculeTitle", "declarator": "showMoleculeTitle = new ShowMoleculeTitle()", "var_name": "showMoleculeTitle"}, {"original_string": "private FitToScreen fitToScreen = new FitToScreen();", "modifier": "private", "type": "FitToScreen", "declarator": "fitToScreen = new FitToScreen()", "var_name": "fitToScreen"}, {"original_string": "private IGeneratorParameter<Double> scale = new Scale();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "scale = new Scale()", "var_name": "scale"}, {"original_string": "private IGeneratorParameter<Double> bondLength      = new BondLength();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "bondLength      = new BondLength()", "var_name": "bondLength"}, {"original_string": "private IGeneratorParameter<Color>  backgroundColor = new BackgroundColor();", "modifier": "private", "type": "IGeneratorParameter<Color>", "declarator": "backgroundColor = new BackgroundColor()", "var_name": "backgroundColor"}, {"original_string": "private IGeneratorParameter<Color> foregroundColor = new ForegroundColor();", "modifier": "private", "type": "IGeneratorParameter<Color>", "declarator": "foregroundColor = new ForegroundColor()", "var_name": "foregroundColor"}, {"original_string": "private IGeneratorParameter<Boolean> useAntiAliasing = new UseAntiAliasing();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "useAntiAliasing = new UseAntiAliasing()", "var_name": "useAntiAliasing"}, {"original_string": "private IGeneratorParameter<Double> margin = new Margin();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "margin = new Margin()", "var_name": "margin"}, {"original_string": "private IGeneratorParameter<FontStyle> fontStyle = new UsedFontStyle();", "modifier": "private", "type": "IGeneratorParameter<FontStyle>", "declarator": "fontStyle = new UsedFontStyle()", "var_name": "fontStyle"}, {"original_string": "private IGeneratorParameter<String> fontName = new FontName();", "modifier": "private", "type": "IGeneratorParameter<String>", "declarator": "fontName = new FontName()", "var_name": "fontName"}, {"original_string": "private IGeneratorParameter<Double> zoomFactor = new ZoomFactor();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "zoomFactor = new ZoomFactor()", "var_name": "zoomFactor"}], "methods": [{"identifier": "BasicSceneGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicSceneGenerator()", "full_signature": "public  BasicSceneGenerator()", "class_method_signature": "BasicSceneGenerator.BasicSceneGenerator()", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer ac, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IAtomContainer ac, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer ac, RendererModel model)", "class_method_signature": "BasicSceneGenerator.generate(IAtomContainer ac, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "BasicSceneGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/BasicSceneGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer ac, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "body": "@Override\n    public IRenderingElement generate(IAtomContainer ac, RendererModel model) {\n        return new ElementGroup();\n    }", "signature": "IRenderingElement generate(IAtomContainer ac, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer ac, RendererModel model)", "class_method_signature": "BasicSceneGenerator.generate(IAtomContainer ac, RendererModel model)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}