{"test_class": {"identifier": "AttributeServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TEST_ID = 17;", "modifier": "private static final", "type": "long", "declarator": "TEST_ID = 17", "var_name": "TEST_ID"}, {"original_string": "private static final String TEST_STRING = \"test\";", "modifier": "private static final", "type": "String", "declarator": "TEST_STRING = \"test\"", "var_name": "TEST_STRING"}, {"original_string": "private static final int TEST_INTEGER = 37;", "modifier": "private static final", "type": "int", "declarator": "TEST_INTEGER = 37", "var_name": "TEST_INTEGER"}, {"original_string": "private static final String TEST_STRING2 = \"m2oLinked\";", "modifier": "private static final", "type": "String", "declarator": "TEST_STRING2 = \"m2oLinked\"", "var_name": "TEST_STRING2"}, {"original_string": "private static final String TEST_STRING3 = \"o2mLinked\";", "modifier": "private static final", "type": "String", "declarator": "TEST_STRING3 = \"o2mLinked\"", "var_name": "TEST_STRING3"}, {"original_string": "private FeatureBean featureBean;", "modifier": "private", "type": "FeatureBean", "declarator": "featureBean", "var_name": "featureBean"}, {"original_string": "@Autowired\n\t@Qualifier(\"beans\")\n\tprivate VectorLayer layerBeans;", "modifier": "@Autowired\n\t@Qualifier(\"beans\")\n\tprivate", "type": "VectorLayer", "declarator": "layerBeans", "var_name": "layerBeans"}, {"original_string": "private VectorLayer lazyLayerBeans;", "modifier": "private", "type": "VectorLayer", "declarator": "lazyLayerBeans", "var_name": "lazyLayerBeans"}, {"original_string": "@Autowired\n\tprivate AttributeService attributeService;", "modifier": "@Autowired\n\tprivate", "type": "AttributeService", "declarator": "attributeService", "var_name": "attributeService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService dtoConverter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "dtoConverter", "var_name": "dtoConverter"}, {"original_string": "@Autowired\n\tprivate org.geomajas.security.SecurityManager securityManager;", "modifier": "@Autowired\n\tprivate", "type": "org.geomajas.security.SecurityManager", "declarator": "securityManager", "var_name": "securityManager"}], "file": "impl/src/test/java/org/geomajas/internal/layer/feature/AttributeServiceTest.java"}, "test_case": {"identifier": "testNormal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNormal() throws Exception {\n\t\tInternalFeature feature = new InternalFeatureImpl();\n\t\tAssert.assertNotNull(attributeService.getAttributes(layerBeans, feature, featureBean));\n\t\tAttribute attribute;\n\t\tAttribute linked;\n\t\tattribute = feature.getAttributes().get(\"stringAttr\");\n\t\tassertThat(attribute.getValue()).isEqualTo(TEST_STRING);\n\t\tassertThat(attribute.isEditable()).isTrue(); // AllowAll -> all editable\n\t\tattribute = feature.getAttributes().get(\"integerAttr\");\n\t\tassertThat(attribute.getValue()).isEqualTo(TEST_INTEGER);\n\t\tassertThat(attribute.isEditable()).isTrue(); // AllowAll -> all editable\n\t\tattribute = feature.getAttributes().get(\"booleanAttr\");\n\t\tassertThat(attribute.getValue()).isEqualTo(Boolean.TRUE);\n\t\tassertThat(attribute.isEditable()).isTrue(); // AllowAll -> all editable\n\n\t\tassertThat(containsLazy(feature.getAttributes())).isFalse();\n\t\tFeature dto = dtoConverter.toDto(feature);\n\t\tassertThat(containsLazy(dto.getAttributes())).isFalse();\n\n\t\t// verify rights on many-to-one attributes\n\t\tattribute = feature.getAttributes().get(\"manyToOneAttr\");\n\t\tassertThat(attribute.isEditable()).isTrue(); // AllowAll -> all editable\n\t\tlinked = ((ManyToOneAttribute) attribute).getValue().getAllAttributes().get(\"stringAttr\");\n\t\tassertThat(linked.getValue()).isEqualTo(TEST_STRING2);\n\t\tassertThat(linked.isEditable()).isTrue(); // AllowAll -> all editable\n\n\t\t// verify rights on one-to-many attributes\n\t\tattribute = feature.getAttributes().get(\"oneToManyAttr\");\n\t\tassertThat(attribute.isEditable()).isTrue(); // AllowAll -> all editable\n\t\tlinked = ((OneToManyAttribute) attribute).getValue().get(0).getAllAttributes().get(\"stringAttr\");\n\t\tassertThat(linked.getValue()).isEqualTo(TEST_STRING3);\n\t\tassertThat(linked.isEditable()).isTrue(); // AllowAll -> all editable\n\t}", "signature": "void testNormal()", "full_signature": "@Test public void testNormal()", "class_method_signature": "AttributeServiceTest.testNormal()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "getAttributes", "get", "getAttributes", "isEqualTo", "assertThat", "getValue", "isTrue", "assertThat", "isEditable", "get", "getAttributes", "isEqualTo", "assertThat", "getValue", "isTrue", "assertThat", "isEditable", "get", "getAttributes", "isEqualTo", "assertThat", "getValue", "isTrue", "assertThat", "isEditable", "isFalse", "assertThat", "containsLazy", "getAttributes", "toDto", "isFalse", "assertThat", "containsLazy", "getAttributes", "get", "getAttributes", "isTrue", "assertThat", "isEditable", "get", "getAllAttributes", "getValue", "isEqualTo", "assertThat", "getValue", "isTrue", "assertThat", "isEditable", "get", "getAttributes", "isTrue", "assertThat", "isEditable", "get", "getAllAttributes", "get", "getValue", "isEqualTo", "assertThat", "getValue", "isTrue", "assertThat", "isEditable"]}, "focal_class": {"identifier": "AttributeService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(AttributeService.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AttributeService.class)", "var_name": "log"}, {"original_string": "@Autowired\n\tprivate SecurityContext securityContext;", "modifier": "@Autowired\n\tprivate", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}, {"original_string": "@Autowired\n\tprivate FeatureExpressionService expressionService;", "modifier": "@Autowired\n\tprivate", "type": "FeatureExpressionService", "declarator": "expressionService", "var_name": "expressionService"}], "methods": [{"identifier": "getAttributes", "parameters": "(VectorLayer layer, InternalFeature feature, Object featureBean)", "modifiers": "public", "return": "InternalFeature", "signature": "InternalFeature getAttributes(VectorLayer layer, InternalFeature feature, Object featureBean)", "full_signature": "public InternalFeature getAttributes(VectorLayer layer, InternalFeature feature, Object featureBean)", "class_method_signature": "AttributeService.getAttributes(VectorLayer layer, InternalFeature feature, Object featureBean)", "testcase": false, "constructor": false}, {"identifier": "filterAttributes", "parameters": "(String layerId, Map<String, AbstractAttributeInfo> attributeInfo,\n\t\t\tInternalFeature feature, Map<String, Attribute> featureAttributes)", "modifiers": "private", "return": "Map<String, Attribute>", "signature": "Map<String, Attribute> filterAttributes(String layerId, Map<String, AbstractAttributeInfo> attributeInfo,\n\t\t\tInternalFeature feature, Map<String, Attribute> featureAttributes)", "full_signature": "private Map<String, Attribute> filterAttributes(String layerId, Map<String, AbstractAttributeInfo> attributeInfo,\n\t\t\tInternalFeature feature, Map<String, Attribute> featureAttributes)", "class_method_signature": "AttributeService.filterAttributes(String layerId, Map<String, AbstractAttributeInfo> attributeInfo,\n\t\t\tInternalFeature feature, Map<String, Attribute> featureAttributes)", "testcase": false, "constructor": false}, {"identifier": "setAttributeEditable", "parameters": "(Attribute attribute, boolean editable)", "modifiers": "public", "return": "void", "signature": "void setAttributeEditable(Attribute attribute, boolean editable)", "full_signature": "public void setAttributeEditable(Attribute attribute, boolean editable)", "class_method_signature": "AttributeService.setAttributeEditable(Attribute attribute, boolean editable)", "testcase": false, "constructor": false}, {"identifier": "setAttributeEditable", "parameters": "(AssociationValue association, boolean editable)", "modifiers": "private", "return": "void", "signature": "void setAttributeEditable(AssociationValue association, boolean editable)", "full_signature": "private void setAttributeEditable(AssociationValue association, boolean editable)", "class_method_signature": "AttributeService.setAttributeEditable(AssociationValue association, boolean editable)", "testcase": false, "constructor": false}, {"identifier": "getRealAttributes", "parameters": "(VectorLayer layer, Object featureBean)", "modifiers": "private", "return": "Map<String, Attribute>", "signature": "Map<String, Attribute> getRealAttributes(VectorLayer layer, Object featureBean)", "full_signature": "private Map<String, Attribute> getRealAttributes(VectorLayer layer, Object featureBean)", "class_method_signature": "AttributeService.getRealAttributes(VectorLayer layer, Object featureBean)", "testcase": false, "constructor": false}, {"identifier": "addSyntheticAttributes", "parameters": "(InternalFeature feature, Map<String, Attribute> featureAttributes,\n\t\t\tVectorLayer layer)", "modifiers": "private", "return": "void", "signature": "void addSyntheticAttributes(InternalFeature feature, Map<String, Attribute> featureAttributes,\n\t\t\tVectorLayer layer)", "full_signature": "private void addSyntheticAttributes(InternalFeature feature, Map<String, Attribute> featureAttributes,\n\t\t\tVectorLayer layer)", "class_method_signature": "AttributeService.addSyntheticAttributes(InternalFeature feature, Map<String, Attribute> featureAttributes,\n\t\t\tVectorLayer layer)", "testcase": false, "constructor": false}], "file": "impl/src/main/java/org/geomajas/internal/layer/feature/AttributeService.java"}, "focal_method": {"identifier": "getAttributes", "parameters": "(VectorLayer layer, InternalFeature feature, Object featureBean)", "modifiers": "public", "return": "InternalFeature", "body": "public InternalFeature getAttributes(VectorLayer layer, InternalFeature feature, Object featureBean)\n\t\t\tthrows LayerException {\n\t\tString layerId = layer.getId();\n\n\t\tMap<String, Attribute> featureAttributes = getRealAttributes(layer, featureBean);\n\t\tfeature.setAttributes(featureAttributes); // to allow isAttributeReadable to see full object\n\t\taddSyntheticAttributes(feature, featureAttributes, layer);\n\t\tif (securityContext.isFeatureVisible(layerId, feature)) {\n\n\t\t\tfeature.setAttributes(filterAttributes(layerId, layer.getLayerInfo().getFeatureInfo().getAttributesMap(),\n\t\t\t\t\tfeature, featureAttributes));\n\n\t\t\tfeature.setEditable(securityContext.isFeatureUpdateAuthorized(layerId, feature));\n\t\t\tfeature.setDeletable(securityContext.isFeatureDeleteAuthorized(layerId, feature));\n\n\t\t\treturn feature;\n\t\t}\n\t\treturn null;\n\t}", "signature": "InternalFeature getAttributes(VectorLayer layer, InternalFeature feature, Object featureBean)", "full_signature": "public InternalFeature getAttributes(VectorLayer layer, InternalFeature feature, Object featureBean)", "class_method_signature": "AttributeService.getAttributes(VectorLayer layer, InternalFeature feature, Object featureBean)", "testcase": false, "constructor": false, "invocations": ["getId", "getRealAttributes", "setAttributes", "addSyntheticAttributes", "isFeatureVisible", "setAttributes", "filterAttributes", "getAttributesMap", "getFeatureInfo", "getLayerInfo", "setEditable", "isFeatureUpdateAuthorized", "setDeletable", "isFeatureDeleteAuthorized"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}