{"test_class": {"identifier": "FleeingAlgorithmTest", "superclass": "extends AbstractMathTestCase", "interfaces": "", "fields": [{"original_string": "private FleeingAlgorithm flee;", "modifier": "private", "type": "FleeingAlgorithm", "declarator": "flee", "var_name": "flee"}], "file": "advanced/agentmotion/src/test/java/org/arakhne/afc/agentmotion/common/FleeingAlgorithmTest.java"}, "test_case": {"identifier": "calculate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void calculate() {\n\t\tassertFpVectorEquals(-3.42997, -2.05798, this.flee.calculate(new Point2d(1, 2),  3, 4, new Point2d(6, 5)));\n\t}", "signature": "void calculate()", "full_signature": "@Test public void calculate()", "class_method_signature": "FleeingAlgorithmTest.calculate()", "testcase": true, "constructor": false, "invocations": ["assertFpVectorEquals", "calculate"]}, "focal_class": {"identifier": "FleeingAlgorithm", "superclass": "", "interfaces": "implements FleeingMotionAlgorithm, Serializable, Cloneable", "fields": [{"original_string": "private static final long serialVersionUID = -8318025671219960417L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8318025671219960417L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "clone", "parameters": "()", "modifiers": "@Pure @Override public", "return": "FleeingAlgorithm", "signature": "FleeingAlgorithm clone()", "full_signature": "@Pure @Override public FleeingAlgorithm clone()", "class_method_signature": "FleeingAlgorithm.clone()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "modifiers": "@Override public", "return": "Vector2D<?, ?>", "signature": "Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "full_signature": "@Override public Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "class_method_signature": "FleeingAlgorithm.calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "testcase": false, "constructor": false}], "file": "advanced/agentmotion/src/main/java/org/arakhne/afc/agentmotion/common/FleeingAlgorithm.java"}, "focal_method": {"identifier": "calculate", "parameters": "(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "modifiers": "@Override public", "return": "Vector2D<?, ?>", "body": "@Override\n\tpublic Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target) {\n\t\tfinal Vector2d direction = new Vector2d(\n\t\t\t\tposition.getX() - target.getX(),\n\t\t\t\tposition.getY() - target.getY());\n\t\tdirection.setLength(maxLinear);\n\t\treturn direction;\n\t}", "signature": "Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "full_signature": "@Override public Vector2D<?, ?> calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "class_method_signature": "FleeingAlgorithm.calculate(Point2D<?, ?> position, double linearSpeed, double maxLinear,\n\t\t\tPoint2D<?, ?> target)", "testcase": false, "constructor": false, "invocations": ["getX", "getX", "getY", "getY", "setLength"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}