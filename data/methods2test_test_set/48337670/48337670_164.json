{"test_class": {"identifier": "ConfigDispatcherFileWatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestConfigDispatcherFileWatcher configDispatcherFileWatcher;", "modifier": "private", "type": "TestConfigDispatcherFileWatcher", "declarator": "configDispatcherFileWatcher", "var_name": "configDispatcherFileWatcher"}, {"original_string": "private @Mock ConfigDispatcher configDispatcher;", "modifier": "private @Mock", "type": "ConfigDispatcher", "declarator": "configDispatcher", "var_name": "configDispatcher"}], "file": "bundles/org.openhab.core.config.dispatch/src/test/java/org/openhab/core/config/dispatch/internal/ConfigDispatcherFileWatcherTest.java"}, "test_case": {"identifier": "nonConfigurationFileCreated", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nonConfigurationFileCreated() {\n        String path = \"myPath\";\n        configDispatcherFileWatcher.processWatchEvent(null, StandardWatchEventKinds.ENTRY_CREATE,\n                new File(path).toPath());\n\n        verifyNoInteractions(configDispatcher);\n    }", "signature": "void nonConfigurationFileCreated()", "full_signature": "@Test public void nonConfigurationFileCreated()", "class_method_signature": "ConfigDispatcherFileWatcherTest.nonConfigurationFileCreated()", "testcase": true, "constructor": false, "invocations": ["processWatchEvent", "toPath", "verifyNoInteractions"]}, "focal_class": {"identifier": "ConfigDispatcherFileWatcher", "superclass": "extends AbstractWatchService", "interfaces": "", "fields": [{"original_string": "public static final String SERVICEDIR_PROG_ARGUMENT = \"openhab.servicedir\";", "modifier": "public static final", "type": "String", "declarator": "SERVICEDIR_PROG_ARGUMENT = \"openhab.servicedir\"", "var_name": "SERVICEDIR_PROG_ARGUMENT"}, {"original_string": "public static final String SERVICES_FOLDER = \"services\";", "modifier": "public static final", "type": "String", "declarator": "SERVICES_FOLDER = \"services\"", "var_name": "SERVICES_FOLDER"}, {"original_string": "private final ConfigDispatcher configDispatcher;", "modifier": "private final", "type": "ConfigDispatcher", "declarator": "configDispatcher", "var_name": "configDispatcher"}], "methods": [{"identifier": "ConfigDispatcherFileWatcher", "parameters": "(final @Reference ConfigDispatcher configDispatcher)", "modifiers": "@Activate public", "return": "", "signature": " ConfigDispatcherFileWatcher(final @Reference ConfigDispatcher configDispatcher)", "full_signature": "@Activate public  ConfigDispatcherFileWatcher(final @Reference ConfigDispatcher configDispatcher)", "class_method_signature": "ConfigDispatcherFileWatcher.ConfigDispatcherFileWatcher(final @Reference ConfigDispatcher configDispatcher)", "testcase": false, "constructor": true}, {"identifier": "getPathToWatch", "parameters": "()", "modifiers": "private static", "return": "String", "signature": "String getPathToWatch()", "full_signature": "private static String getPathToWatch()", "class_method_signature": "ConfigDispatcherFileWatcher.getPathToWatch()", "testcase": false, "constructor": false}, {"identifier": "activate", "parameters": "()", "modifiers": "@Activate @Override public", "return": "void", "signature": "void activate()", "full_signature": "@Activate @Override public void activate()", "class_method_signature": "ConfigDispatcherFileWatcher.activate()", "testcase": false, "constructor": false}, {"identifier": "deactivate", "parameters": "()", "modifiers": "@Deactivate @Override public", "return": "void", "signature": "void deactivate()", "full_signature": "@Deactivate @Override public void deactivate()", "class_method_signature": "ConfigDispatcherFileWatcher.deactivate()", "testcase": false, "constructor": false}, {"identifier": "watchSubDirectories", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean watchSubDirectories()", "full_signature": "@Override protected boolean watchSubDirectories()", "class_method_signature": "ConfigDispatcherFileWatcher.watchSubDirectories()", "testcase": false, "constructor": false}, {"identifier": "getWatchEventKinds", "parameters": "(Path subDir)", "modifiers": "@Override protected", "return": "Kind<?>[]", "signature": "Kind<?>[] getWatchEventKinds(Path subDir)", "full_signature": "@Override protected Kind<?>[] getWatchEventKinds(Path subDir)", "class_method_signature": "ConfigDispatcherFileWatcher.getWatchEventKinds(Path subDir)", "testcase": false, "constructor": false}, {"identifier": "processWatchEvent", "parameters": "(WatchEvent<?> event, Kind<?> kind, Path path)", "modifiers": "@Override protected", "return": "void", "signature": "void processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path)", "full_signature": "@Override protected void processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path)", "class_method_signature": "ConfigDispatcherFileWatcher.processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.config.dispatch/src/main/java/org/openhab/core/config/dispatch/internal/ConfigDispatcherFileWatcher.java"}, "focal_method": {"identifier": "processWatchEvent", "parameters": "(WatchEvent<?> event, Kind<?> kind, Path path)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path) {\n        if (kind == ENTRY_CREATE || kind == ENTRY_MODIFY) {\n            File f = path.toFile();\n            if (!f.isHidden() && f.getName().endsWith(\".cfg\")) {\n                configDispatcher.processConfigFile(f);\n            }\n        } else if (kind == ENTRY_DELETE) {\n            // Detect if a service specific configuration file was removed. We want to\n            // notify the service in this case with an updated empty configuration.\n            File configFile = path.toFile();\n            if (configFile.isHidden() || configFile.isDirectory() || !configFile.getName().endsWith(\".cfg\")) {\n                return;\n            }\n            configDispatcher.fileRemoved(configFile.getAbsolutePath());\n        }\n    }", "signature": "void processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path)", "full_signature": "@Override protected void processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path)", "class_method_signature": "ConfigDispatcherFileWatcher.processWatchEvent(WatchEvent<?> event, Kind<?> kind, Path path)", "testcase": false, "constructor": false, "invocations": ["toFile", "isHidden", "endsWith", "getName", "processConfigFile", "toFile", "isHidden", "isDirectory", "endsWith", "getName", "fileRemoved", "getAbsolutePath"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}