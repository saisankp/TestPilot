{"test_class": {"identifier": "BinaryTournamentSelectionOperatorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected BinaryTournamentSelectionOperator operator;", "modifier": "protected", "type": "BinaryTournamentSelectionOperator", "declarator": "operator", "var_name": "operator"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/BinaryTournamentSelectionOperatorTest.java"}, "test_case": {"identifier": "testSelect1", "parameters": "()", "modifiers": "@Test // test whether majority of selected Individuals is the fittest public", "return": "void", "body": "@Test\n    // test whether majority of selected Individuals is the fittest\n    public void testSelect1() throws Exception {\n        Individual ind1 = new SimpleIndividual(0, 0.0, new SimplePhenotypeRepresentation());\n        ind1.setFitness(10.0);\n        Individual ind2 = new SimpleIndividual(0, 0.0, new SimplePhenotypeRepresentation());\n        ind1.setFitness(1.0);\n        Population popIn1 = new SimplePopulation(new Individual[]{ind2, ind1});\n        this.operator.setInputArity(1);\n        this.operator.setIndividualsPerPopulation(100);\n        this.operator.setOutputArity(1);\n        Population[] popsOut = this.operator.select(new Population[]{popIn1});\n\n        assertTrue(popsOut != null);\n        assertTrue(popsOut.length == 1);\n        Population outPop = popsOut[0];\n        assertTrue(outPop.getIndividuals().length == 100);\n        int fittestCount = 0;\n        for (Individual ind : outPop.getIndividuals()){\n            if (ind == ind1){\n                fittestCount++;\n            }\n        }\n        assertTrue(((double)fittestCount/100) > 0.65);\n    }", "signature": "void testSelect1()", "full_signature": "@Test // test whether majority of selected Individuals is the fittest public void testSelect1()", "class_method_signature": "BinaryTournamentSelectionOperatorTest.testSelect1()", "testcase": true, "constructor": false, "invocations": ["setFitness", "setFitness", "setInputArity", "setIndividualsPerPopulation", "setOutputArity", "select", "assertTrue", "assertTrue", "assertTrue", "getIndividuals", "getIndividuals", "assertTrue"]}, "focal_class": {"identifier": "BinaryTournamentSelectionOperator", "superclass": "extends AbstractSelectionOperator", "interfaces": "", "fields": [{"original_string": "protected RandomGenerator randomGenerator;", "modifier": "protected", "type": "RandomGenerator", "declarator": "randomGenerator", "var_name": "randomGenerator"}], "methods": [{"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "BinaryTournamentSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false}, {"identifier": "checkConsistency", "parameters": "(Population[] inputPopulations)", "modifiers": "@Override public", "return": "void", "signature": "void checkConsistency(Population[] inputPopulations)", "full_signature": "@Override public void checkConsistency(Population[] inputPopulations)", "class_method_signature": "BinaryTournamentSelectionOperator.checkConsistency(Population[] inputPopulations)", "testcase": false, "constructor": false}, {"identifier": "checkMinIndividualsPredicate", "parameters": "(int sumSizes)", "modifiers": "protected", "return": "void", "signature": "void checkMinIndividualsPredicate(int sumSizes)", "full_signature": "protected void checkMinIndividualsPredicate(int sumSizes)", "class_method_signature": "BinaryTournamentSelectionOperator.checkMinIndividualsPredicate(int sumSizes)", "testcase": false, "constructor": false}, {"identifier": "getResultsSizesCore", "parameters": "(int[] parentPopulationSizes)", "modifiers": "@Override protected", "return": "int[]", "signature": "int[] getResultsSizesCore(int[] parentPopulationSizes)", "full_signature": "@Override protected int[] getResultsSizesCore(int[] parentPopulationSizes)", "class_method_signature": "BinaryTournamentSelectionOperator.getResultsSizesCore(int[] parentPopulationSizes)", "testcase": false, "constructor": false}, {"identifier": "setRandomGenerator", "parameters": "(RandomGenerator randomGenerator)", "modifiers": "public", "return": "void", "signature": "void setRandomGenerator(RandomGenerator randomGenerator)", "full_signature": "public void setRandomGenerator(RandomGenerator randomGenerator)", "class_method_signature": "BinaryTournamentSelectionOperator.setRandomGenerator(RandomGenerator randomGenerator)", "testcase": false, "constructor": false}, {"identifier": "resetGenerationCount", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetGenerationCount()", "full_signature": "public void resetGenerationCount()", "class_method_signature": "BinaryTournamentSelectionOperator.resetGenerationCount()", "testcase": false, "constructor": false}, {"identifier": "nextGeneration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void nextGeneration()", "full_signature": "public void nextGeneration()", "class_method_signature": "BinaryTournamentSelectionOperator.nextGeneration()", "testcase": false, "constructor": false}, {"identifier": "setGeneration", "parameters": "(int currentGeneration)", "modifiers": "public", "return": "void", "signature": "void setGeneration(int currentGeneration)", "full_signature": "public void setGeneration(int currentGeneration)", "class_method_signature": "BinaryTournamentSelectionOperator.setGeneration(int currentGeneration)", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/operators/selection/BinaryTournamentSelectionOperator.java"}, "focal_method": {"identifier": "select", "parameters": "(Population[] populations)", "modifiers": "public", "return": "Population[]", "body": "public Population[] select(Population[] populations) {\n        checkConsistency(populations);\n\n        Individual[] inputIndividuals = this.concatenateIndividualsFromPopulations(populations, this.inputArity);\n        int resultSize = this.individualsPerPopulation * this.outputArity;\n        List<Individual> resultingIndividuals = new ArrayList<Individual>(resultSize);\n\n        // competing couple\n        Individual individual1;\n        Individual individual2;\n        // competition between randomly chosen couples\n        for (int i = 0; i < resultSize; i++){\n            individual1 = inputIndividuals[this.randomGenerator.nextInt(inputIndividuals.length)];\n            individual2 = inputIndividuals[this.randomGenerator.nextInt(inputIndividuals.length)];\n            resultingIndividuals.add(individual1.getFitness() > individual2.getFitness() ? individual1 : individual2);\n        }\n\n        // making resulting array\n        Population[] outputPopulations = this.createOutputPopulations();\n        Individual[][] outputIndividuals = this.createOutputIndividuals();\n        this.assignIndividualsToPopulations(outputIndividuals, outputPopulations);\n        this.mapByColumns(resultingIndividuals, outputIndividuals);\n\n        return outputPopulations;\n    }", "signature": "Population[] select(Population[] populations)", "full_signature": "public Population[] select(Population[] populations)", "class_method_signature": "BinaryTournamentSelectionOperator.select(Population[] populations)", "testcase": false, "constructor": false, "invocations": ["checkConsistency", "concatenateIndividualsFromPopulations", "nextInt", "nextInt", "add", "getFitness", "getFitness", "createOutputPopulations", "createOutputIndividuals", "assignIndividualsToPopulations", "mapByColumns"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}