{"test_class": {"identifier": "ErrorPagesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String webXmlWithErrorPages = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                                          \"<web-app id=\\\"WebApp_ID\\\" version=\\\"3.0\\\" xmlns=\\\"http://java.sun.com/xml/ns/j2ee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n                                          \"         xsi:schemaLocation=\\\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_3_0.xsd\\\">\\n\" +\n                                          \"    <error-page>\\n\" +\n                                          \"        <error-code>400</error-code>\\n\" +\n                                          \"        <location>/Error400.html</location>\\n\" +\n                                          \"    </error-page>\\n\" +\n                                          \"    <error-page>\\n\" +\n                                          \"        <exception-type>org.test.SomeException</exception-type>\\n\" +\n                                          \"        <location>/SomeError.jsp</location>\\n\" +\n                                          \"    </error-page>\\n\" +\n                                          \"</web-app>\\n\";", "modifier": "private", "type": "String", "declarator": "webXmlWithErrorPages = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                                          \"<web-app id=\\\"WebApp_ID\\\" version=\\\"3.0\\\" xmlns=\\\"http://java.sun.com/xml/ns/j2ee\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n                                          \"         xsi:schemaLocation=\\\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_3_0.xsd\\\">\\n\" +\n                                          \"    <error-page>\\n\" +\n                                          \"        <error-code>400</error-code>\\n\" +\n                                          \"        <location>/Error400.html</location>\\n\" +\n                                          \"    </error-page>\\n\" +\n                                          \"    <error-page>\\n\" +\n                                          \"        <exception-type>org.test.SomeException</exception-type>\\n\" +\n                                          \"        <location>/SomeError.jsp</location>\\n\" +\n                                          \"    </error-page>\\n\" +\n                                          \"</web-app>\\n\"", "var_name": "webXmlWithErrorPages"}, {"original_string": "private ErrorPages errorPages;", "modifier": "private", "type": "ErrorPages", "declarator": "errorPages", "var_name": "errorPages"}], "file": "everrest-core/src/test/java/org/everrest/core/tools/ErrorPagesTest.java"}, "test_case": {"identifier": "containsErrorPageForErrorCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void containsErrorPageForErrorCode() {\n        assertTrue(\"Expected to have configured error page for status 400\", errorPages.hasErrorPage(400));\n    }", "signature": "void containsErrorPageForErrorCode()", "full_signature": "@Test public void containsErrorPageForErrorCode()", "class_method_signature": "ErrorPagesTest.containsErrorPageForErrorCode()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "hasErrorPage"]}, "focal_class": {"identifier": "ErrorPages", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ErrorPages.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ErrorPages.class)", "var_name": "LOG"}, {"original_string": "private final        Map<Integer, String> errorCodes     = new HashMap<>();", "modifier": "private final", "type": "Map<Integer, String>", "declarator": "errorCodes     = new HashMap<>()", "var_name": "errorCodes"}, {"original_string": "private final        Map<String, String>  exceptionTypes = new HashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "exceptionTypes = new HashMap<>()", "var_name": "exceptionTypes"}], "methods": [{"identifier": "ErrorPages", "parameters": "(ServletContext servletContext)", "modifiers": "public", "return": "", "signature": " ErrorPages(ServletContext servletContext)", "full_signature": "public  ErrorPages(ServletContext servletContext)", "class_method_signature": "ErrorPages.ErrorPages(ServletContext servletContext)", "testcase": false, "constructor": true}, {"identifier": "hasErrorPage", "parameters": "(int errorCode)", "modifiers": "public", "return": "boolean", "signature": "boolean hasErrorPage(int errorCode)", "full_signature": "public boolean hasErrorPage(int errorCode)", "class_method_signature": "ErrorPages.hasErrorPage(int errorCode)", "testcase": false, "constructor": false}, {"identifier": "hasErrorPage", "parameters": "(String exceptionType)", "modifiers": "public", "return": "boolean", "signature": "boolean hasErrorPage(String exceptionType)", "full_signature": "public boolean hasErrorPage(String exceptionType)", "class_method_signature": "ErrorPages.hasErrorPage(String exceptionType)", "testcase": false, "constructor": false}, {"identifier": "hasErrorPage", "parameters": "(Throwable exception)", "modifiers": "public", "return": "boolean", "signature": "boolean hasErrorPage(Throwable exception)", "full_signature": "public boolean hasErrorPage(Throwable exception)", "class_method_signature": "ErrorPages.hasErrorPage(Throwable exception)", "testcase": false, "constructor": false}, {"identifier": "loadErrorPages", "parameters": "(ServletContext servletContext, Map<Integer, String> errorCodes, Map<String, String> exceptionTypes)", "modifiers": "protected", "return": "void", "signature": "void loadErrorPages(ServletContext servletContext, Map<Integer, String> errorCodes, Map<String, String> exceptionTypes)", "full_signature": "protected void loadErrorPages(ServletContext servletContext, Map<Integer, String> errorCodes, Map<String, String> exceptionTypes)", "class_method_signature": "ErrorPages.loadErrorPages(ServletContext servletContext, Map<Integer, String> errorCodes, Map<String, String> exceptionTypes)", "testcase": false, "constructor": false}, {"identifier": "createFeaturedDocumentBuilderFactory", "parameters": "()", "modifiers": "private", "return": "DocumentBuilderFactory", "signature": "DocumentBuilderFactory createFeaturedDocumentBuilderFactory()", "full_signature": "private DocumentBuilderFactory createFeaturedDocumentBuilderFactory()", "class_method_signature": "ErrorPages.createFeaturedDocumentBuilderFactory()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/tools/ErrorPages.java"}, "focal_method": {"identifier": "hasErrorPage", "parameters": "(int errorCode)", "modifiers": "public", "return": "boolean", "body": "public boolean hasErrorPage(int errorCode) {\n        return errorCodes.get(errorCode) != null;\n    }", "signature": "boolean hasErrorPage(int errorCode)", "full_signature": "public boolean hasErrorPage(int errorCode)", "class_method_signature": "ErrorPages.hasErrorPage(int errorCode)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}