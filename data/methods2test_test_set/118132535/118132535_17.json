{"test_class": {"identifier": "DiscardAfterDisposeConnectableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RecordingConsumer<String> recordingConsumer;", "modifier": "private", "type": "RecordingConsumer<String>", "declarator": "recordingConsumer", "var_name": "recordingConsumer"}, {"original_string": "private Connection<Integer> connection;", "modifier": "private", "type": "Connection<Integer>", "declarator": "connection", "var_name": "connection"}, {"original_string": "private TestConnection testConnection;", "modifier": "private", "type": "TestConnection", "declarator": "testConnection", "var_name": "testConnection"}, {"original_string": "private DiscardAfterDisposeConnectable<Integer, String> underTest;", "modifier": "private", "type": "DiscardAfterDisposeConnectable<Integer, String>", "declarator": "underTest", "var_name": "underTest"}], "file": "mobius-rx2/src/test/java/com/spotify/mobius/rx2/DiscardAfterDisposeConnectableTest.java"}, "test_case": {"identifier": "discardsEventsAfterDisposal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void discardsEventsAfterDisposal() throws Exception {\n    // given a disposed connection\n    connection = underTest.connect(recordingConsumer);\n    connection.dispose();\n\n    // when a message arrives\n    connection.accept(1);\n\n    // it is discarded\n    recordingConsumer.assertValues();\n  }", "signature": "void discardsEventsAfterDisposal()", "full_signature": "@Test public void discardsEventsAfterDisposal()", "class_method_signature": "DiscardAfterDisposeConnectableTest.discardsEventsAfterDisposal()", "testcase": true, "constructor": false, "invocations": ["connect", "dispose", "accept", "assertValues"]}, "focal_class": {"identifier": "DiscardAfterDisposeConnectable", "superclass": "", "interfaces": "implements Connectable<I, O>", "fields": [{"original_string": "private final Connectable<I, O> actual;", "modifier": "private final", "type": "Connectable<I, O>", "declarator": "actual", "var_name": "actual"}], "methods": [{"identifier": "DiscardAfterDisposeConnectable", "parameters": "(Connectable<I, O> actual)", "modifiers": "", "return": "", "signature": " DiscardAfterDisposeConnectable(Connectable<I, O> actual)", "full_signature": "  DiscardAfterDisposeConnectable(Connectable<I, O> actual)", "class_method_signature": "DiscardAfterDisposeConnectable.DiscardAfterDisposeConnectable(Connectable<I, O> actual)", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "(Consumer<O> output)", "modifiers": "@Nonnull @Override public", "return": "Connection<I>", "signature": "Connection<I> connect(Consumer<O> output)", "full_signature": "@Nonnull @Override public Connection<I> connect(Consumer<O> output)", "class_method_signature": "DiscardAfterDisposeConnectable.connect(Consumer<O> output)", "testcase": false, "constructor": false}], "file": "mobius-rx2/src/main/java/com/spotify/mobius/rx2/DiscardAfterDisposeConnectable.java"}, "focal_method": {"identifier": "connect", "parameters": "(Consumer<O> output)", "modifiers": "@Nonnull @Override public", "return": "Connection<I>", "body": "@Nonnull\n  @Override\n  public Connection<I> connect(Consumer<O> output) {\n    final DiscardAfterDisposeWrapper<O> safeOutput = wrapConsumer(output);\n    final Connection<I> input = actual.connect(safeOutput);\n    final DiscardAfterDisposeWrapper<I> safeInput = wrapConnection(input);\n\n    final Disposable disposable = CompositeDisposable.from(safeInput, safeOutput);\n\n    return new Connection<I>() {\n      @Override\n      public void accept(I effect) {\n        safeInput.accept(effect);\n      }\n\n      @Override\n      public void dispose() {\n        disposable.dispose();\n      }\n    };\n  }", "signature": "Connection<I> connect(Consumer<O> output)", "full_signature": "@Nonnull @Override public Connection<I> connect(Consumer<O> output)", "class_method_signature": "DiscardAfterDisposeConnectable.connect(Consumer<O> output)", "testcase": false, "constructor": false, "invocations": ["wrapConsumer", "connect", "wrapConnection", "from", "accept", "dispose"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}