{"test_class": {"identifier": "OptionSelectorWeightedTest", "superclass": "", "interfaces": "", "fields": [], "file": "outland-feature-java/src/test/java/outland/feature/OptionSelectorWeightedTest.java"}, "test_case": {"identifier": "testBaseCases", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBaseCases() {\n\n    final ArrayList<FeatureOption> itemList1 = Lists.newArrayList(\n        FeatureOption.newBuilder().setWeight(0).build(),\n        FeatureOption.newBuilder().setWeight(10000).build()\n    );\n    OptionSelectorWeighted or1 = new OptionSelectorWeighted(itemList1);\n    IntStream.range(0, 10000).forEach(i -> assertTrue(10000 == or1.select().getWeight()));\n\n    final ArrayList<FeatureOption> itemList2 = Lists.newArrayList(\n        FeatureOption.newBuilder().setWeight(10000).build()\n    );\n    OptionSelectorWeighted or2 = new OptionSelectorWeighted(itemList2);\n    IntStream.range(0, 10000).forEach(i -> assertTrue(10000 == or2.select().getWeight()));\n  }", "signature": "void testBaseCases()", "full_signature": "@Test public void testBaseCases()", "class_method_signature": "OptionSelectorWeightedTest.testBaseCases()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "build", "setWeight", "newBuilder", "build", "setWeight", "newBuilder", "forEach", "range", "assertTrue", "getWeight", "select", "newArrayList", "build", "setWeight", "newBuilder", "forEach", "range", "assertTrue", "getWeight", "select"]}, "focal_class": {"identifier": "OptionSelectorWeighted", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final double[] wheel;", "modifier": "private final", "type": "double[]", "declarator": "wheel", "var_name": "wheel"}, {"original_string": "private final FeatureOption[] values;", "modifier": "private final", "type": "FeatureOption[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "OptionSelectorWeighted", "parameters": "(List<FeatureOption> options)", "modifiers": "", "return": "", "signature": " OptionSelectorWeighted(List<FeatureOption> options)", "full_signature": "  OptionSelectorWeighted(List<FeatureOption> options)", "class_method_signature": "OptionSelectorWeighted.OptionSelectorWeighted(List<FeatureOption> options)", "testcase": false, "constructor": true}, {"identifier": "select", "parameters": "()", "modifiers": "", "return": "FeatureOption", "signature": "FeatureOption select()", "full_signature": " FeatureOption select()", "class_method_signature": "OptionSelectorWeighted.select()", "testcase": false, "constructor": false}, {"identifier": "buildValues", "parameters": "(List<FeatureOption> options)", "modifiers": "private", "return": "FeatureOption[]", "signature": "FeatureOption[] buildValues(List<FeatureOption> options)", "full_signature": "private FeatureOption[] buildValues(List<FeatureOption> options)", "class_method_signature": "OptionSelectorWeighted.buildValues(List<FeatureOption> options)", "testcase": false, "constructor": false}, {"identifier": "buildWheel", "parameters": "(List<FeatureOption> options)", "modifiers": "private", "return": "double[]", "signature": "double[] buildWheel(List<FeatureOption> options)", "full_signature": "private double[] buildWheel(List<FeatureOption> options)", "class_method_signature": "OptionSelectorWeighted.buildWheel(List<FeatureOption> options)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(int weight)", "modifiers": "private", "return": "double", "signature": "double normalize(int weight)", "full_signature": "private double normalize(int weight)", "class_method_signature": "OptionSelectorWeighted.normalize(int weight)", "testcase": false, "constructor": false}], "file": "outland-feature-java/src/main/java/outland/feature/OptionSelectorWeighted.java"}, "focal_method": {"identifier": "select", "parameters": "()", "modifiers": "", "return": "FeatureOption", "body": "FeatureOption select() {\n    final double randomValue = Math.random();\n    int idx = Arrays.binarySearch(wheel, randomValue);\n    if (idx < 0) {\n      idx = -idx - 1;\n    }\n    return values[idx];\n  }", "signature": "FeatureOption select()", "full_signature": " FeatureOption select()", "class_method_signature": "OptionSelectorWeighted.select()", "testcase": false, "constructor": false, "invocations": ["random", "binarySearch"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}