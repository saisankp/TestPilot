{"test_class": {"identifier": "AccountServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tAccountService service;", "modifier": "@InjectMocks", "type": "AccountService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tAccountRepository repo;", "modifier": "@Mock", "type": "AccountRepository", "declarator": "repo", "var_name": "repo"}], "file": "accounts-service/src/test/java/io/pivotal/accounts/service/AccountServiceTest.java"}, "test_case": {"identifier": "doFindAccount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void doFindAccount() {\n\t\twhen(repo.findById(ServiceTestConfiguration.PROFILE_ID)).thenReturn(Optional.of(ServiceTestConfiguration.account()));\n\t\tassertEquals(service.findAccount(ServiceTestConfiguration.PROFILE_ID).toString(),ServiceTestConfiguration.account().toString());\n\t}", "signature": "void doFindAccount()", "full_signature": "@Test public void doFindAccount()", "class_method_signature": "AccountServiceTest.doFindAccount()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findById", "of", "account", "assertEquals", "toString", "findAccount", "toString", "account"]}, "focal_class": {"identifier": "AccountService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AccountService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AccountService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tAccountRepository accounts;", "modifier": "@Autowired", "type": "AccountRepository", "declarator": "accounts", "var_name": "accounts"}], "methods": [{"identifier": "findAccount", "parameters": "(Integer id)", "modifiers": "public", "return": "Account", "signature": "Account findAccount(Integer id)", "full_signature": "public Account findAccount(Integer id)", "class_method_signature": "AccountService.findAccount(Integer id)", "testcase": false, "constructor": false}, {"identifier": "findAccounts", "parameters": "(String user)", "modifiers": "public", "return": "List<Account>", "signature": "List<Account> findAccounts(String user)", "full_signature": "public List<Account> findAccounts(String user)", "class_method_signature": "AccountService.findAccounts(String user)", "testcase": false, "constructor": false}, {"identifier": "findAccountsByType", "parameters": "(String id, AccountType type)", "modifiers": "public", "return": "List<Account>", "signature": "List<Account> findAccountsByType(String id, AccountType type)", "full_signature": "public List<Account> findAccountsByType(String id, AccountType type)", "class_method_signature": "AccountService.findAccountsByType(String id, AccountType type)", "testcase": false, "constructor": false}, {"identifier": "saveAccount", "parameters": "(Account accountRequest)", "modifiers": "public", "return": "Integer", "signature": "Integer saveAccount(Account accountRequest)", "full_signature": "public Integer saveAccount(Account accountRequest)", "class_method_signature": "AccountService.saveAccount(Account accountRequest)", "testcase": false, "constructor": false}], "file": "accounts-service/src/main/java/io/pivotal/accounts/service/AccountService.java"}, "focal_method": {"identifier": "findAccount", "parameters": "(Integer id)", "modifiers": "public", "return": "Account", "body": "public Account findAccount(Integer id) {\n\n\t\tlogger.debug(\"AccountService.findAccount: id=\" + id);\n\n\t\tOptional<Account> account = accounts.findById(id);\n\t\tif (!account.isPresent()) {\n\t\t\tlogger.warn(\"AccountService.findAccount: could not find account with id: \" + id);\n\t\t\tthrow new NoRecordsFoundException();\n\t\t}\n\n\t\tlogger.info(String.format(\"AccountService.findAccount - retrieved account with id: %s. Payload is: %s\", id, account.get()));\n\n\t\treturn account.get();\n\t}", "signature": "Account findAccount(Integer id)", "full_signature": "public Account findAccount(Integer id)", "class_method_signature": "AccountService.findAccount(Integer id)", "testcase": false, "constructor": false, "invocations": ["debug", "findById", "isPresent", "warn", "info", "format", "get", "get"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}