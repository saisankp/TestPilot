{"test_class": {"identifier": "SubpackagesTest", "superclass": "extends ProgressCheckTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/SubpackagesTest.java"}, "test_case": {"identifier": "testPatterns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPatterns() throws Exception {\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new Subpackages().newInstance(key(\"rules\", arr()).get());\n            CheckReport report = scanWithCheck(check, \"subtest_with_content.zip\");\n            logViolations(\"testPatterns:[]\", report);\n            Assert.assertEquals(\"no violations\", 0, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new Subpackages().newInstance(\n                    key(\"rules\", arr(key(\"type\", \"deny\").key(\"pattern\", \"my_packages:sub_.*\"))).get());\n            CheckReport report = scanWithCheck(check, \"subtest_with_content.zip\");\n            logViolations(\"testPatterns:sub_.*\", report);\n            Assert.assertEquals(\"two violations\", 2, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new Subpackages().newInstance(\n                    key(\"rules\", arr()\n                            .val(key(\"type\", \"deny\").key(\"pattern\", \"my_packages:sub_.*\"))\n                            .val(key(\"type\", \"allow\").key(\"pattern\", \"my_packages:sub_a\"))\n                    ).get());\n            CheckReport report = scanWithCheck(check, \"subtest_with_content.zip\");\n            logViolations(\"testPatterns:sub_.* - sub_a\", report);\n            Assert.assertEquals(\"one violation\", 1, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new Subpackages().newInstance(\n                    key(\"rules\", arr(key(\"type\", \"deny\").key(\"pattern\", \"my_packages:sub_a\"))).get());\n            CheckReport report = scanWithCheck(check, \"subtest_with_content.zip\");\n            logViolations(\"testPatterns:sub_a\", report);\n            Assert.assertEquals(\"one violation\", 1, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new Subpackages().newInstance(\n                    key(\"rules\", arr(key(\"type\", \"deny\").key(\"pattern\", \"my_packages:sub_b\"))).get());\n            CheckReport report = scanWithCheck(check, \"subtest_with_content.zip\");\n            logViolations(\"testPatterns:sub_b\", report);\n            Assert.assertEquals(\"one violation\", 1, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n        TestUtil.testBlock(() -> {\n            ProgressCheck check = new Subpackages().newInstance(\n                    key(\"rules\", arr(key(\"type\", \"deny\").key(\"pattern\", \"my_packages:sub_c\"))).get());\n            CheckReport report = scanWithCheck(check, \"subtest_with_content.zip\");\n            logViolations(\"testPatterns:sub_c\", report);\n            Assert.assertEquals(\"one violation\", 0, report.getViolations().size());\n            assertTrue(\"all violations have packageIds\", report.getViolations().stream()\n                    .allMatch(viol -> !viol.getPackages().isEmpty()));\n        });\n    }", "signature": "void testPatterns()", "full_signature": "@Test public void testPatterns()", "class_method_signature": "SubpackagesTest.testPatterns()", "testcase": true, "constructor": false, "invocations": ["testBlock", "newInstance", "get", "key", "arr", "scanWithCheck", "logViolations", "assertEquals", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages", "testBlock", "newInstance", "get", "key", "arr", "key", "key", "scanWithCheck", "logViolations", "assertEquals", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages", "testBlock", "newInstance", "get", "key", "val", "val", "arr", "key", "key", "key", "key", "scanWithCheck", "logViolations", "assertEquals", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages", "testBlock", "newInstance", "get", "key", "arr", "key", "key", "scanWithCheck", "logViolations", "assertEquals", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages", "testBlock", "newInstance", "get", "key", "arr", "key", "key", "scanWithCheck", "logViolations", "assertEquals", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages", "testBlock", "newInstance", "get", "key", "arr", "key", "key", "scanWithCheck", "logViolations", "assertEquals", "size", "getViolations", "assertTrue", "allMatch", "stream", "getViolations", "isEmpty", "getPackages"]}, "focal_class": {"identifier": "Subpackages", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String rules() {\n            return \"rules\";\n        }\n\n        @Override\n        public String denyAll() {\n            return \"denyAll\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String rules() {\n            return \"rules\";\n        }\n\n        @Override\n        public String denyAll() {\n            return \"denyAll\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_RULES = keys().rules();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_RULES = keys().rules()", "var_name": "CONFIG_RULES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_DENY_ALL = keys().denyAll();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_DENY_ALL = keys().denyAll()", "var_name": "CONFIG_DENY_ALL"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "Subpackages.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "Subpackages.newInstance(final JsonObject config)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/Subpackages.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "body": "@Override\n    public ProgressCheck newInstance(final JsonObject config) {\n        List<Rule> rules = Rules.fromJsonArray(arrayOrEmpty(config, keys().rules()));\n\n        final boolean denyAll = hasNonNull(config, keys().denyAll()) && config.getBoolean(keys().denyAll());\n\n        return new Check(rules, denyAll);\n    }", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "Subpackages.newInstance(final JsonObject config)", "testcase": false, "constructor": false, "invocations": ["fromJsonArray", "arrayOrEmpty", "rules", "keys", "hasNonNull", "denyAll", "keys", "getBoolean", "denyAll", "keys"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}