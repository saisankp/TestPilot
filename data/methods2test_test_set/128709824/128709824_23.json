{"test_class": {"identifier": "NacosRegistryHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "registry/registry-nacos/src/test/java/com/alipay/sofa/rpc/registry/nacos/NacosRegistryHelperTest.java"}, "test_case": {"identifier": "buildServiceName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void buildServiceName() {\n        ServerConfig serverConfig = new ServerConfig()\n            .setProtocol(\"bolt\")\n            .setHost(\"0.0.0.0\")\n            .setPort(12200);\n\n        ProviderConfig<?> provider = new ProviderConfig();\n        provider.setInterfaceId(\"com.alipay.xxx.TestService\")\n            .setApplication(new ApplicationConfig().setAppName(\"test-server\"))\n            .setUniqueId(\"nacos-test\")\n            .setProxy(\"javassist\")\n            .setRegister(true)\n            .setSerialization(\"hessian2\")\n            .setServer(serverConfig)\n            .setWeight(222)\n            .setTimeout(3000);\n        String serviceName = NacosRegistryHelper.buildServiceName(provider, RpcConstants.PROTOCOL_TYPE_BOLT);\n        assertEquals(serviceName, \"com.alipay.xxx.TestService:nacos-test:DEFAULT\");\n\n        serviceName = NacosRegistryHelper.buildServiceName(provider, RpcConstants.PROTOCOL_TYPE_TR);\n        assertEquals(serviceName, \"com.alipay.xxx.TestService:nacos-test:DEFAULT\");\n\n        serviceName = NacosRegistryHelper.buildServiceName(provider, RpcConstants.PROTOCOL_TYPE_TRIPLE);\n        assertEquals(serviceName, \"com.alipay.xxx.TestService:nacos-test:\" + RpcConstants.PROTOCOL_TYPE_TRIPLE);\n\n        serviceName = NacosRegistryHelper.buildServiceName(provider, RpcConstants.PROTOCOL_TYPE_REST);\n        assertEquals(serviceName, \"com.alipay.xxx.TestService:nacos-test:\" + RpcConstants.PROTOCOL_TYPE_REST);\n    }", "signature": "void buildServiceName()", "full_signature": "@Test public void buildServiceName()", "class_method_signature": "NacosRegistryHelperTest.buildServiceName()", "testcase": true, "constructor": false, "invocations": ["setPort", "setHost", "setProtocol", "setTimeout", "setWeight", "setServer", "setSerialization", "setRegister", "setProxy", "setUniqueId", "setApplication", "setInterfaceId", "setAppName", "buildServiceName", "assertEquals", "buildServiceName", "assertEquals", "buildServiceName", "assertEquals", "buildServiceName", "assertEquals"]}, "focal_class": {"identifier": "NacosRegistryHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String DEFAULT_CLUSTER = \"default-cluster\";", "modifier": "static final", "type": "String", "declarator": "DEFAULT_CLUSTER = \"default-cluster\"", "var_name": "DEFAULT_CLUSTER"}], "methods": [{"identifier": "buildServiceName", "parameters": "(AbstractInterfaceConfig config, String protocol)", "modifiers": "static", "return": "String", "signature": "String buildServiceName(AbstractInterfaceConfig config, String protocol)", "full_signature": "static String buildServiceName(AbstractInterfaceConfig config, String protocol)", "class_method_signature": "NacosRegistryHelper.buildServiceName(AbstractInterfaceConfig config, String protocol)", "testcase": false, "constructor": false}, {"identifier": "convertProviderToInstances", "parameters": "(ProviderConfig providerConfig)", "modifiers": "static", "return": "List<Instance>", "signature": "List<Instance> convertProviderToInstances(ProviderConfig providerConfig)", "full_signature": "static List<Instance> convertProviderToInstances(ProviderConfig providerConfig)", "class_method_signature": "NacosRegistryHelper.convertProviderToInstances(ProviderConfig providerConfig)", "testcase": false, "constructor": false}, {"identifier": "convertInstancesToProviders", "parameters": "(List<Instance> allInstances)", "modifiers": "static", "return": "List<ProviderInfo>", "signature": "List<ProviderInfo> convertInstancesToProviders(List<Instance> allInstances)", "full_signature": "static List<ProviderInfo> convertInstancesToProviders(List<Instance> allInstances)", "class_method_signature": "NacosRegistryHelper.convertInstancesToProviders(List<Instance> allInstances)", "testcase": false, "constructor": false}, {"identifier": "convertInstanceToUrl", "parameters": "(Instance instance)", "modifiers": "private static", "return": "String", "signature": "String convertInstanceToUrl(Instance instance)", "full_signature": "private static String convertInstanceToUrl(Instance instance)", "class_method_signature": "NacosRegistryHelper.convertInstanceToUrl(Instance instance)", "testcase": false, "constructor": false}], "file": "registry/registry-nacos/src/main/java/com/alipay/sofa/rpc/registry/nacos/NacosRegistryHelper.java"}, "focal_method": {"identifier": "buildServiceName", "parameters": "(AbstractInterfaceConfig config, String protocol)", "modifiers": "static", "return": "String", "body": "static String buildServiceName(AbstractInterfaceConfig config, String protocol) {\n        if (RpcConstants.PROTOCOL_TYPE_BOLT.equals(protocol)\n            || RpcConstants.PROTOCOL_TYPE_TR.equals(protocol)) {\n            return ConfigUniqueNameGenerator.getServiceName(config) + \":DEFAULT\";\n        } else {\n            return ConfigUniqueNameGenerator.getServiceName(config) + \":\" + protocol;\n        }\n    }", "signature": "String buildServiceName(AbstractInterfaceConfig config, String protocol)", "full_signature": "static String buildServiceName(AbstractInterfaceConfig config, String protocol)", "class_method_signature": "NacosRegistryHelper.buildServiceName(AbstractInterfaceConfig config, String protocol)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "getServiceName", "getServiceName"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}