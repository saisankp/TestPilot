{"test_class": {"identifier": "JavassistProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = LoggerFactory.getLogger(JavassistProxyTest.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JavassistProxyTest.class)", "var_name": "LOGGER"}], "file": "core-impl/proxy/src/test/java/com/alipay/sofa/rpc/proxy/javassist/JavassistProxyTest.java"}, "test_case": {"identifier": "getProxy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getProxy() throws Exception {\n        JavassistProxy proxy = new JavassistProxy();\n        AbstractTestClass testClass = null;\n        try {\n            testClass = proxy.getProxy(AbstractTestClass.class, new TestInvoker());\n        } catch (Exception e) {\n            LOGGER.info(e.getMessage());\n        }\n        Assert.assertNull(testClass);\n\n        TestInvoker invoker = new TestInvoker();\n        TestInterface testInterface = proxy.getProxy(TestInterface.class, invoker);\n        Assert.assertNotNull(testInterface);\n\n        Class clazz = testInterface.getClass().getInterfaces()[0];\n        Assert.assertEquals(TestInterface.class, clazz);\n\n        Assert.assertTrue(Proxy.class.isAssignableFrom(testInterface.getClass()));\n        Assert.assertFalse(Proxy.isProxyClass(testInterface.getClass()));\n\n        Assert.assertEquals(proxy.getInvoker(testInterface).getClass(), TestInvoker.class);\n        Assert.assertEquals(testInterface.toString(), invoker.toString());\n        Assert.assertEquals(testInterface.hashCode(), invoker.hashCode());\n\n        TestInterface another1 = proxy.getProxy(TestInterface.class, invoker);\n        TestInterface another2 = proxy.getProxy(TestInterface.class, new TestInvoker());\n        Assert.assertFalse(testInterface.equals(invoker));\n        Assert.assertFalse(testInterface.equals(another2));\n        Assert.assertEquals(testInterface, another1);\n\n        Assert.assertEquals(678, another1.sayNum(true));\n        SofaRequest request = invoker.getRequest();\n        Assert.assertEquals(TestInterface.class.getCanonicalName(), request.getInterfaceName());\n        Assert.assertEquals(\"sayNum\", request.getMethodName());\n        Assert.assertEquals(\"boolean\", request.getMethodArgSigs()[0]);\n        Assert.assertEquals(true, request.getMethodArgs()[0]);\n        Assert.assertNotNull(request.getMethod());\n\n        Assert.assertEquals(\"sayHello\", another1.sayHello(\"xxxx\"));\n        another1.sayNoting();\n        Assert.assertArrayEquals(new int[] { 6, 7, 8 }, another1.sayNums(null, new HashMap()));\n        Assert.assertNull(another1.sayNum2(1.2D));\n\n        boolean error = false;\n        try {\n            another1.throwbiz1();\n        } catch (Throwable e) {\n            error = true;\n        }\n        Assert.assertFalse(error);\n\n        error = false;\n        try {\n            another1.throwbiz2();\n        } catch (Throwable e) {\n            error = true;\n        }\n        Assert.assertFalse(error);\n\n        try {\n            another1.throwRPC();\n        } catch (Throwable e) {\n            error = true;\n        }\n        Assert.assertTrue(error);\n    }", "signature": "void getProxy()", "full_signature": "@Test public void getProxy()", "class_method_signature": "JavassistProxyTest.getProxy()", "testcase": true, "constructor": false, "invocations": ["getProxy", "info", "getMessage", "assertNull", "getProxy", "assertNotNull", "getInterfaces", "getClass", "assertEquals", "assertTrue", "isAssignableFrom", "getClass", "assertFalse", "isProxyClass", "getClass", "assertEquals", "getClass", "getInvoker", "assertEquals", "toString", "toString", "assertEquals", "hashCode", "hashCode", "getProxy", "getProxy", "assertFalse", "equals", "assertFalse", "equals", "assertEquals", "assertEquals", "sayNum", "getRequest", "assertEquals", "getCanonicalName", "getInterfaceName", "assertEquals", "getMethodName", "assertEquals", "getMethodArgSigs", "assertEquals", "getMethodArgs", "assertNotNull", "getMethod", "assertEquals", "sayHello", "sayNoting", "assertArrayEquals", "sayNums", "assertNull", "sayNum2", "throwbiz1", "assertFalse", "throwbiz2", "assertFalse", "throwRPC", "assertTrue"]}, "focal_class": {"identifier": "JavassistProxy", "superclass": "", "interfaces": "implements Proxy", "fields": [{"original_string": "private static final Logger            LOGGER          = LoggerFactory.getLogger(JavassistProxy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER          = LoggerFactory.getLogger(JavassistProxy.class)", "var_name": "LOGGER"}, {"original_string": "private static AtomicInteger           counter         = new AtomicInteger();", "modifier": "private static", "type": "AtomicInteger", "declarator": "counter         = new AtomicInteger()", "var_name": "counter"}, {"original_string": "private static final Map<Class, Class> PROXY_CLASS_MAP = new ConcurrentHashMap<Class, Class>();", "modifier": "private static final", "type": "Map<Class, Class>", "declarator": "PROXY_CLASS_MAP = new ConcurrentHashMap<Class, Class>()", "var_name": "PROXY_CLASS_MAP"}], "methods": [{"identifier": "getProxy", "parameters": "(Class<T> interfaceClass, Invoker proxyInvoker)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "class_method_signature": "JavassistProxy.getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "testcase": false, "constructor": false}, {"identifier": "createMethod", "parameters": "(Class<?> interfaceClass, List<String> fieldList, List<String> resultList)", "modifiers": "private", "return": "void", "signature": "void createMethod(Class<?> interfaceClass, List<String> fieldList, List<String> resultList)", "full_signature": "private void createMethod(Class<?> interfaceClass, List<String> fieldList, List<String> resultList)", "class_method_signature": "JavassistProxy.createMethod(Class<?> interfaceClass, List<String> fieldList, List<String> resultList)", "testcase": false, "constructor": false}, {"identifier": "asArgument", "parameters": "(Class<?> cl, String name)", "modifiers": "private", "return": "String", "signature": "String asArgument(Class<?> cl, String name)", "full_signature": "private String asArgument(Class<?> cl, String name)", "class_method_signature": "JavassistProxy.asArgument(Class<?> cl, String name)", "testcase": false, "constructor": false}, {"identifier": "getInvoker", "parameters": "(Object proxyObject)", "modifiers": "@Override public", "return": "Invoker", "signature": "Invoker getInvoker(Object proxyObject)", "full_signature": "@Override public Invoker getInvoker(Object proxyObject)", "class_method_signature": "JavassistProxy.getInvoker(Object proxyObject)", "testcase": false, "constructor": false}, {"identifier": "parseInvoker", "parameters": "(Object proxyObject)", "modifiers": "public static", "return": "Invoker", "signature": "Invoker parseInvoker(Object proxyObject)", "full_signature": "public static Invoker parseInvoker(Object proxyObject)", "class_method_signature": "JavassistProxy.parseInvoker(Object proxyObject)", "testcase": false, "constructor": false}], "file": "core-impl/proxy/src/main/java/com/alipay/sofa/rpc/proxy/javassist/JavassistProxy.java"}, "focal_method": {"identifier": "getProxy", "parameters": "(Class<T> interfaceClass, Invoker proxyInvoker)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T getProxy(Class<T> interfaceClass, Invoker proxyInvoker) {\n        StringBuilder debug = null;\n        if (LOGGER.isDebugEnabled()) {\n            debug = new StringBuilder();\n        }\n        try {\n            Class clazz = PROXY_CLASS_MAP.get(interfaceClass);\n            if (clazz == null) {\n                //\u751f\u6210\u4ee3\u7406\u7c7b\n                String interfaceName = ClassTypeUtils.getTypeStr(interfaceClass);\n                ClassPool mPool = ClassPool.getDefault();\n                mPool.appendClassPath(new LoaderClassPath(ClassLoaderUtils.getClassLoader(JavassistProxy.class)));\n                CtClass mCtc = mPool.makeClass(interfaceName + \"_proxy_\" + counter.getAndIncrement());\n                if (interfaceClass.isInterface()) {\n                    mCtc.addInterface(mPool.get(interfaceName));\n                } else {\n                    throw new IllegalArgumentException(interfaceClass.getName() + \" is not an interface\");\n                }\n\n                // \u7ee7\u627f java.lang.reflect.Proxy\n                mCtc.setSuperclass(mPool.get(java.lang.reflect.Proxy.class.getName()));\n                CtConstructor constructor = new CtConstructor(null, mCtc);\n                constructor.setModifiers(Modifier.PUBLIC);\n                constructor.setBody(\"{super(new \" + UselessInvocationHandler.class.getName() + \"());}\");\n                mCtc.addConstructor(constructor);\n\n                List<String> fieldList = new ArrayList<String>();\n                List<String> methodList = new ArrayList<String>();\n\n                fieldList.add(\"public \" + Invoker.class.getCanonicalName() + \" proxyInvoker = null;\");\n                createMethod(interfaceClass, fieldList, methodList);\n\n                for (String fieldStr : fieldList) {\n                    if (LOGGER.isDebugEnabled()) {\n                        debug.append(fieldStr).append(\"\\n\");\n                    }\n                    mCtc.addField(CtField.make(fieldStr, mCtc));\n                }\n                for (String methodStr : methodList) {\n                    if (LOGGER.isDebugEnabled()) {\n                        debug.append(methodStr).append(\"\\n\");\n                    }\n                    mCtc.addMethod(CtMethod.make(methodStr, mCtc));\n                }\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug(\"javassist proxy of interface: {} \\r\\n{}\", interfaceClass,\n                        debug != null ? debug.toString() : \"\");\n                }\n                clazz = mCtc.toClass();\n                PROXY_CLASS_MAP.put(interfaceClass, clazz);\n            }\n            Object instance = clazz.newInstance();\n            clazz.getField(\"proxyInvoker\").set(instance, proxyInvoker);\n            return (T) instance;\n        } catch (Exception e) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"javassist proxy of interface: {} \\r\\n{}\", interfaceClass,\n                    debug != null ? debug.toString() : \"\");\n            }\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_PROXY_CONSTRUCT, \"javassist\"), e);\n        }\n    }", "signature": "T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public T getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "class_method_signature": "JavassistProxy.getProxy(Class<T> interfaceClass, Invoker proxyInvoker)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "get", "getTypeStr", "getDefault", "appendClassPath", "getClassLoader", "makeClass", "getAndIncrement", "isInterface", "addInterface", "get", "getName", "setSuperclass", "get", "getName", "setModifiers", "setBody", "getName", "addConstructor", "add", "getCanonicalName", "createMethod", "isDebugEnabled", "append", "append", "addField", "make", "isDebugEnabled", "append", "append", "addMethod", "make", "isDebugEnabled", "debug", "toString", "toClass", "put", "newInstance", "set", "getField", "isDebugEnabled", "debug", "toString", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}