{"test_class": {"identifier": "DataTableUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/excel/DataTableUtilsTest.java"}, "test_case": {"identifier": "areComplementary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void areComplementary() {\n        assertThat(DataTableUtils.areComplementary(\n                Arrays.asList(\"Header\", \"\", \" \"),\n                Arrays.asList(\"\", \"Value1\", \"Value2\")\n        ), is(true));\n\n        assertThat(DataTableUtils.areComplementary(\n                Arrays.asList(\"Header1\", \"ValueA\", \"\"),\n                Arrays.asList(\"Header2\", \"\", \"Value2\")\n        ), is(false));\n    }", "signature": "void areComplementary()", "full_signature": "@Test public void areComplementary()", "class_method_signature": "DataTableUtilsTest.areComplementary()", "testcase": true, "constructor": false, "invocations": ["assertThat", "areComplementary", "asList", "asList", "is", "assertThat", "areComplementary", "asList", "asList", "is"]}, "focal_class": {"identifier": "DataTableUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataTableUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataTableUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "DataTableUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataTableUtils()", "full_signature": "private  DataTableUtils()", "class_method_signature": "DataTableUtils.DataTableUtils()", "testcase": false, "constructor": true}, {"identifier": "mergeTablesSpanningMultiplePages", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "signature": "List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "testcase": false, "constructor": false}, {"identifier": "mergeComplementaryColumns", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "signature": "List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeComplementaryColumns(List<DataTable> dataTables)", "testcase": false, "constructor": false}, {"identifier": "addBlankColumnsToMatchHeaders", "parameters": "(DataTable a, DataTable b)", "modifiers": "public static", "return": "void", "signature": "void addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "full_signature": "public static void addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "class_method_signature": "DataTableUtils.addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "testcase": false, "constructor": false}, {"identifier": "mergeComplementaryColumns", "parameters": "(DataTable dataTable)", "modifiers": "static", "return": "DataTable", "signature": "DataTable mergeComplementaryColumns(DataTable dataTable)", "full_signature": "static DataTable mergeComplementaryColumns(DataTable dataTable)", "class_method_signature": "DataTableUtils.mergeComplementaryColumns(DataTable dataTable)", "testcase": false, "constructor": false}, {"identifier": "areComplementary", "parameters": "(List<String> column1, List<String> column2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areComplementary(List<String> column1, List<String> column2)", "full_signature": "public static boolean areComplementary(List<String> column1, List<String> column2)", "class_method_signature": "DataTableUtils.areComplementary(List<String> column1, List<String> column2)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/excel/DataTableUtils.java"}, "focal_method": {"identifier": "areComplementary", "parameters": "(List<String> column1, List<String> column2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean areComplementary(List<String> column1, List<String> column2) {\n        if(column1.size() != column2.size()) {\n            return false;\n        }\n\n        for(int i = 0; i < column1.size(); i++) {\n            String v1 = column1.get(i);\n            String v2 = column2.get(i);\n\n            if(!v1.trim().isEmpty() && !v2.trim().isEmpty()) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "signature": "boolean areComplementary(List<String> column1, List<String> column2)", "full_signature": "public static boolean areComplementary(List<String> column1, List<String> column2)", "class_method_signature": "DataTableUtils.areComplementary(List<String> column1, List<String> column2)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "get", "get", "isEmpty", "trim", "isEmpty", "trim"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}