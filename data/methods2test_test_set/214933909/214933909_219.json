{"test_class": {"identifier": "DatabaseControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private DataBaseDao dataBaseDao;", "modifier": "@MockBean\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@MockBean\n    private DatabaseService databaseService;", "modifier": "@MockBean\n    private", "type": "DatabaseService", "declarator": "databaseService", "var_name": "databaseService"}, {"original_string": "@MockBean\n    private GroupDao groupDao;", "modifier": "@MockBean\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/DatabaseControllerTest.java"}, "test_case": {"identifier": "syncdb", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void syncdb() throws Exception {\n        String requestJson = JSONObject.toJSONString(DataBaseInfo.builder().id(1L).dbname(\"name\").build());\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/db/syncdb\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void syncdb()", "full_signature": "@Test public void syncdb()", "class_method_signature": "DatabaseControllerTest.syncdb()", "testcase": true, "constructor": false, "invocations": ["toJSONString", "build", "dbname", "id", "builder", "andDo", "andExpect", "perform", "accept", "content", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "DatabaseController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private Message message;", "modifier": "@Resource\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private DataBaseDao dataBaseDao;", "modifier": "@Autowired\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@Autowired\n    private DatabaseService databaseService;", "modifier": "@Autowired\n    private", "type": "DatabaseService", "declarator": "databaseService", "var_name": "databaseService"}, {"original_string": "@Autowired\n    private GroupDao groupDao;", "modifier": "@Autowired\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}], "methods": [{"identifier": "list", "parameters": "(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<DataBaseView>>", "signature": "ServiceResult<ListResult<DataBaseView>> list(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<DataBaseView>> list(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "class_method_signature": "DatabaseController.list(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "testcase": false, "constructor": false}, {"identifier": "getDBListByGroupId", "parameters": "(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "modifiers": "@RequestMapping(value = \"/page/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<DataBaseView>>", "signature": "ServiceResult<ListResult<DataBaseView>> getDBListByGroupId(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "full_signature": "@RequestMapping(value = \"/page/list\", method = RequestMethod.POST) public ServiceResult<ListResult<DataBaseView>> getDBListByGroupId(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "class_method_signature": "DatabaseController.getDBListByGroupId(@RequestBody Paging<DataBaseInfo> paging, @CurrentUser LoginUser loginUser)", "testcase": false, "constructor": false}, {"identifier": "connectionTest", "parameters": "(@RequestBody ConnectionRequest connectionRequest)", "modifiers": "@RequestMapping(value = \"/connectionTest\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult connectionTest(@RequestBody ConnectionRequest connectionRequest)", "full_signature": "@RequestMapping(value = \"/connectionTest\", method = RequestMethod.POST) public ServiceResult connectionTest(@RequestBody ConnectionRequest connectionRequest)", "class_method_signature": "DatabaseController.connectionTest(@RequestBody ConnectionRequest connectionRequest)", "testcase": false, "constructor": false}, {"identifier": "getTableAttributes", "parameters": "(@RequestParam(value = \"id\", defaultValue = \"0\") Long id, @RequestParam(value = \"name\", defaultValue = \"\") String name)", "modifiers": "@RequestMapping(value = \"/getTableAttributes\") public", "return": "ServiceResult", "signature": "ServiceResult getTableAttributes(@RequestParam(value = \"id\", defaultValue = \"0\") Long id, @RequestParam(value = \"name\", defaultValue = \"\") String name)", "full_signature": "@RequestMapping(value = \"/getTableAttributes\") public ServiceResult getTableAttributes(@RequestParam(value = \"id\", defaultValue = \"0\") Long id, @RequestParam(value = \"name\", defaultValue = \"\") String name)", "class_method_signature": "DatabaseController.getTableAttributes(@RequestParam(value = \"id\", defaultValue = \"0\") Long id, @RequestParam(value = \"name\", defaultValue = \"\") String name)", "testcase": false, "constructor": false}, {"identifier": "isExist", "parameters": "(@RequestBody List<String> db_names)", "modifiers": "@RequestMapping(value = \"/isExist\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult isExist(@RequestBody List<String> db_names)", "full_signature": "@RequestMapping(value = \"/isExist\", method = RequestMethod.POST) public ServiceResult isExist(@RequestBody List<String> db_names)", "class_method_signature": "DatabaseController.isExist(@RequestBody List<String> db_names)", "testcase": false, "constructor": false}, {"identifier": "getUsers", "parameters": "(@RequestParam(value = \"name\", defaultValue = \"\") String name, @RequestParam(value = \"groupId\", defaultValue = \"\") Long groupId)", "modifiers": "@RequestMapping(value = \"/dbs\") public", "return": "ServiceResult<List<DataBaseInfo>>", "signature": "ServiceResult<List<DataBaseInfo>> getUsers(@RequestParam(value = \"name\", defaultValue = \"\") String name, @RequestParam(value = \"groupId\", defaultValue = \"\") Long groupId)", "full_signature": "@RequestMapping(value = \"/dbs\") public ServiceResult<List<DataBaseInfo>> getUsers(@RequestParam(value = \"name\", defaultValue = \"\") String name, @RequestParam(value = \"groupId\", defaultValue = \"\") Long groupId)", "class_method_signature": "DatabaseController.getUsers(@RequestParam(value = \"name\", defaultValue = \"\") String name, @RequestParam(value = \"groupId\", defaultValue = \"\") Long groupId)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseController.add(@RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "addDbs", "parameters": "(@RequestBody List<DataBaseInfo> list, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/addDbs\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDbs(@RequestBody List<DataBaseInfo> list, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/addDbs\", method = RequestMethod.POST) public ServiceResult<String> addDbs(@RequestBody List<DataBaseInfo> list, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseController.addDbs(@RequestBody List<DataBaseInfo> list, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseController.update(@Validated(UpdateDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseController.delete(@Validated(DeleteDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "getDBCatalogs", "parameters": "(@RequestParam(\"dbset_id\") Long dbsetId)", "modifiers": "@RequestMapping(value = \"/catalogs\") public", "return": "ServiceResult<List<String>>", "signature": "ServiceResult<List<String>> getDBCatalogs(@RequestParam(\"dbset_id\") Long dbsetId)", "full_signature": "@RequestMapping(value = \"/catalogs\") public ServiceResult<List<String>> getDBCatalogs(@RequestParam(\"dbset_id\") Long dbsetId)", "class_method_signature": "DatabaseController.getDBCatalogs(@RequestParam(\"dbset_id\") Long dbsetId)", "testcase": false, "constructor": false}, {"identifier": "getDBCatalogsByDbId", "parameters": "(@RequestParam(\"dbId\") Long dbId)", "modifiers": "@RequestMapping(value = \"/catalogsByDbId\") public", "return": "ServiceResult<List<String>>", "signature": "ServiceResult<List<String>> getDBCatalogsByDbId(@RequestParam(\"dbId\") Long dbId)", "full_signature": "@RequestMapping(value = \"/catalogsByDbId\") public ServiceResult<List<String>> getDBCatalogsByDbId(@RequestParam(\"dbId\") Long dbId)", "class_method_signature": "DatabaseController.getDBCatalogsByDbId(@RequestParam(\"dbId\") Long dbId)", "testcase": false, "constructor": false}, {"identifier": "validateSQL", "parameters": "(@RequestBody SqlValidateRequest sqlValidateRequest)", "modifiers": "@RequestMapping(value = \"/sqlValidate\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult validateSQL(@RequestBody SqlValidateRequest sqlValidateRequest)", "full_signature": "@RequestMapping(value = \"/sqlValidate\", method = RequestMethod.POST) public ServiceResult validateSQL(@RequestBody SqlValidateRequest sqlValidateRequest)", "class_method_signature": "DatabaseController.validateSQL(@RequestBody SqlValidateRequest sqlValidateRequest)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "DatabaseController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "getdbnames", "parameters": "(@RequestParam(\"appid\") String appid)", "modifiers": "@RequestMapping(value = \"/getdbnames\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> getdbnames(@RequestParam(\"appid\") String appid)", "full_signature": "@RequestMapping(value = \"/getdbnames\") public ServiceResult<String> getdbnames(@RequestParam(\"appid\") String appid)", "class_method_signature": "DatabaseController.getdbnames(@RequestParam(\"appid\") String appid)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/check\") public", "return": "ConfigCkeckResult", "signature": "ConfigCkeckResult check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/check\") public ConfigCkeckResult check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "DatabaseController.check(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "syncdb", "parameters": "(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/syncdb\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncdb(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/syncdb\") public ServiceResult<String> syncdb(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseController.syncdb(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "addDataBase", "parameters": "(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "private", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataBase(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "private ServiceResult<String> addDataBase(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseController.addDataBase(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "getDataBaseButton", "parameters": "(@CurrentUser LoginUser user)", "modifiers": "@RequestMapping(\"/buttons\") public", "return": "ServiceResult", "signature": "ServiceResult getDataBaseButton(@CurrentUser LoginUser user)", "full_signature": "@RequestMapping(\"/buttons\") public ServiceResult getDataBaseButton(@CurrentUser LoginUser user)", "class_method_signature": "DatabaseController.getDataBaseButton(@CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/DatabaseController.java"}, "focal_method": {"identifier": "syncdb", "parameters": "(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/syncdb\") public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/syncdb\")\n    public ServiceResult<String> syncdb(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors) throws Exception {\n        DasGroup dasGroup = groupDao.getGroupByName(dataBaseInfo.getGroup_name());\n        if (dasGroup == null) {\n            return ServiceResult.fail(\"\u8bf7\u5148\u540c\u6b65\u7ec4\uff01\" + dataBaseInfo.getGroup_name());\n        }\n        dataBaseInfo.setDal_group_id(dasGroup.getId());\n        return addDataBase(dataBaseInfo, user, errors);\n    }", "signature": "ServiceResult<String> syncdb(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/syncdb\") public ServiceResult<String> syncdb(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "DatabaseController.syncdb(@Validated(AddDataBase.class) @RequestBody DataBaseInfo dataBaseInfo, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["getGroupByName", "getGroup_name", "fail", "e());", "setDal_group_id", "getId", "addDataBase"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}