{"test_class": {"identifier": "StandaloneYAMLTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filer filer = mock(Filer.class);", "modifier": "", "type": "Filer", "declarator": "filer = mock(Filer.class)", "var_name": "filer"}, {"original_string": "Messager messager = mock(Messager.class);", "modifier": "", "type": "Messager", "declarator": "messager = mock(Messager.class)", "var_name": "messager"}, {"original_string": "StandaloneYAML yaml = new StandaloneYAML(filer, messager);", "modifier": "", "type": "StandaloneYAML", "declarator": "yaml = new StandaloneYAML(filer, messager)", "var_name": "yaml"}], "file": "scribe/standalone/src/test/java/com/karuslabs/scribe/standalone/StandaloneYAMLTest.java"}, "test_case": {"identifier": "writer", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void writer() throws IOException {\n        var writer = mock(Writer.class);\n        FileObject object = when(mock(FileObject.class).openWriter()).thenReturn(writer).getMock();\n        when(filer.createResource(any(), any(), any())).thenReturn(object);\n        \n        assertEquals(writer, yaml.writer());\n        verify(filer).createResource(StandardLocation.CLASS_OUTPUT, \"\", \"plugin.yml\");\n        verify(object).openWriter();\n    }", "signature": "void writer()", "full_signature": "@Test void writer()", "class_method_signature": "StandaloneYAMLTest.writer()", "testcase": true, "constructor": false, "invocations": ["mock", "getMock", "thenReturn", "when", "openWriter", "mock", "thenReturn", "when", "createResource", "any", "any", "any", "assertEquals", "writer", "createResource", "verify", "openWriter", "verify"]}, "focal_class": {"identifier": "StandaloneYAML", "superclass": "extends YAML", "interfaces": "", "fields": [{"original_string": "Filer filer;", "modifier": "", "type": "Filer", "declarator": "filer", "var_name": "filer"}, {"original_string": "Messager messager;", "modifier": "", "type": "Messager", "declarator": "messager", "var_name": "messager"}], "methods": [{"identifier": "StandaloneYAML", "parameters": "(Filer filer, Messager messager)", "modifiers": "public", "return": "", "signature": " StandaloneYAML(Filer filer, Messager messager)", "full_signature": "public  StandaloneYAML(Filer filer, Messager messager)", "class_method_signature": "StandaloneYAML.StandaloneYAML(Filer filer, Messager messager)", "testcase": false, "constructor": true}, {"identifier": "writer", "parameters": "()", "modifiers": "@Override protected", "return": "Writer", "signature": "Writer writer()", "full_signature": "@Override protected Writer writer()", "class_method_signature": "StandaloneYAML.writer()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(IOException e)", "modifiers": "@Override protected", "return": "void", "signature": "void handle(IOException e)", "full_signature": "@Override protected void handle(IOException e)", "class_method_signature": "StandaloneYAML.handle(IOException e)", "testcase": false, "constructor": false}], "file": "scribe/standalone/src/main/java/com/karuslabs/scribe/standalone/StandaloneYAML.java"}, "focal_method": {"identifier": "writer", "parameters": "()", "modifiers": "@Override protected", "return": "Writer", "body": "@Override\n    protected Writer writer() throws IOException {\n        return filer.createResource(StandardLocation.CLASS_OUTPUT, \"\", \"plugin.yml\").openWriter();\n    }", "signature": "Writer writer()", "full_signature": "@Override protected Writer writer()", "class_method_signature": "StandaloneYAML.writer()", "testcase": false, "constructor": false, "invocations": ["openWriter", "createResource"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}