{"test_class": {"identifier": "AggregatingLoadBalancerServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JOB_1 = \"job1\";", "modifier": "private static final", "type": "String", "declarator": "JOB_1 = \"job1\"", "var_name": "JOB_1"}, {"original_string": "private static final String JOB_2 = \"job2\";", "modifier": "private static final", "type": "String", "declarator": "JOB_2 = \"job2\"", "var_name": "JOB_2"}, {"original_string": "private static final String LB_1 = \"loadBalancer1\";", "modifier": "private static final", "type": "String", "declarator": "LB_1 = \"loadBalancer1\"", "var_name": "LB_1"}, {"original_string": "private static final String LB_2 = \"loadBalancer2\";", "modifier": "private static final", "type": "String", "declarator": "LB_2 = \"loadBalancer2\"", "var_name": "LB_2"}, {"original_string": "private static final String LB_3 = \"loadBalancer3\";", "modifier": "private static final", "type": "String", "declarator": "LB_3 = \"loadBalancer3\"", "var_name": "LB_3"}, {"original_string": "@Rule\n    public final GrpcServerRule cellOne = new GrpcServerRule().directExecutor();", "modifier": "@Rule\n    public final", "type": "GrpcServerRule", "declarator": "cellOne = new GrpcServerRule().directExecutor()", "var_name": "cellOne"}, {"original_string": "@Rule\n    public final GrpcServerRule cellTwo = new GrpcServerRule().directExecutor();", "modifier": "@Rule\n    public final", "type": "GrpcServerRule", "declarator": "cellTwo = new GrpcServerRule().directExecutor()", "var_name": "cellTwo"}, {"original_string": "AggregatingLoadbalancerService service;", "modifier": "", "type": "AggregatingLoadbalancerService", "declarator": "service", "var_name": "service"}], "file": "titus-server-federation/src/test/java/com/netflix/titus/federation/service/AggregatingLoadBalancerServiceTest.java"}, "test_case": {"identifier": "getLoadBalancersWithTwoFailingCell", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getLoadBalancersWithTwoFailingCell() {\n        cellOne.getServiceRegistry().addService(new CellWithFailingLoadBalancers(Status.UNAVAILABLE));\n        cellTwo.getServiceRegistry().addService(new CellWithFailingLoadBalancers(Status.INTERNAL));\n\n        final AssertableSubscriber<GetAllLoadBalancersResult> resultSubscriber = service.getAllLoadBalancers(\n                GetAllLoadBalancersRequest.newBuilder().setPage(Page.newBuilder().setPageSize(10)).build(),\n                JUNIT_REST_CALL_METADATA\n        ).test();\n        resultSubscriber.awaitTerminalEvent(1, TimeUnit.SECONDS);\n        resultSubscriber.assertNoValues();\n        final List<Throwable> onErrorEvents = resultSubscriber.getOnErrorEvents();\n        assertThat(onErrorEvents).hasSize(1);\n        assertThat(Status.fromThrowable(onErrorEvents.get(0))).isEqualTo(Status.INTERNAL);\n    }", "signature": "void getLoadBalancersWithTwoFailingCell()", "full_signature": "@Test public void getLoadBalancersWithTwoFailingCell()", "class_method_signature": "AggregatingLoadBalancerServiceTest.getLoadBalancersWithTwoFailingCell()", "testcase": true, "constructor": false, "invocations": ["addService", "getServiceRegistry", "addService", "getServiceRegistry", "test", "getAllLoadBalancers", "build", "setPage", "newBuilder", "setPageSize", "newBuilder", "awaitTerminalEvent", "assertNoValues", "getOnErrorEvents", "hasSize", "assertThat", "isEqualTo", "assertThat", "fromThrowable", "get"]}, "focal_class": {"identifier": "AggregatingLoadbalancerService", "superclass": "", "interfaces": "implements LoadBalancerService", "fields": [{"original_string": "private final AggregatingCellClient aggregatingClient;", "modifier": "private final", "type": "AggregatingCellClient", "declarator": "aggregatingClient", "var_name": "aggregatingClient"}, {"original_string": "private final AggregatingJobManagementServiceHelper jobManagementServiceHelper;", "modifier": "private final", "type": "AggregatingJobManagementServiceHelper", "declarator": "jobManagementServiceHelper", "var_name": "jobManagementServiceHelper"}, {"original_string": "private final CellConnector connector;", "modifier": "private final", "type": "CellConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private final GrpcConfiguration grpcConfiguration;", "modifier": "private final", "type": "GrpcConfiguration", "declarator": "grpcConfiguration", "var_name": "grpcConfiguration"}], "methods": [{"identifier": "AggregatingLoadbalancerService", "parameters": "(CellConnector connector,\n                                          CallMetadataResolver callMetadataResolver,\n                                          GrpcConfiguration grpcConfiguration,\n                                          AggregatingCellClient aggregatingClient,\n                                          AggregatingJobManagementServiceHelper jobManagementServiceHelper)", "modifiers": "@Inject public", "return": "", "signature": " AggregatingLoadbalancerService(CellConnector connector,\n                                          CallMetadataResolver callMetadataResolver,\n                                          GrpcConfiguration grpcConfiguration,\n                                          AggregatingCellClient aggregatingClient,\n                                          AggregatingJobManagementServiceHelper jobManagementServiceHelper)", "full_signature": "@Inject public  AggregatingLoadbalancerService(CellConnector connector,\n                                          CallMetadataResolver callMetadataResolver,\n                                          GrpcConfiguration grpcConfiguration,\n                                          AggregatingCellClient aggregatingClient,\n                                          AggregatingJobManagementServiceHelper jobManagementServiceHelper)", "class_method_signature": "AggregatingLoadbalancerService.AggregatingLoadbalancerService(CellConnector connector,\n                                          CallMetadataResolver callMetadataResolver,\n                                          GrpcConfiguration grpcConfiguration,\n                                          AggregatingCellClient aggregatingClient,\n                                          AggregatingJobManagementServiceHelper jobManagementServiceHelper)", "testcase": false, "constructor": true}, {"identifier": "getAllLoadBalancers", "parameters": "(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<GetAllLoadBalancersResult>", "signature": "Observable<GetAllLoadBalancersResult> getAllLoadBalancers(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "full_signature": "@Override public Observable<GetAllLoadBalancersResult> getAllLoadBalancers(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.getAllLoadBalancers(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getLoadBalancers", "parameters": "(JobId jobId, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<GetJobLoadBalancersResult>", "signature": "Observable<GetJobLoadBalancersResult> getLoadBalancers(JobId jobId, CallMetadata callMetadata)", "full_signature": "@Override public Observable<GetJobLoadBalancersResult> getLoadBalancers(JobId jobId, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.getLoadBalancers(JobId jobId, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "addLoadBalancer", "parameters": "(AddLoadBalancerRequest request, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Completable", "signature": "Completable addLoadBalancer(AddLoadBalancerRequest request, CallMetadata callMetadata)", "full_signature": "@Override public Completable addLoadBalancer(AddLoadBalancerRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.addLoadBalancer(AddLoadBalancerRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "removeLoadBalancer", "parameters": "(RemoveLoadBalancerRequest removeLoadBalancerRequest, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Completable", "signature": "Completable removeLoadBalancer(RemoveLoadBalancerRequest removeLoadBalancerRequest, CallMetadata callMetadata)", "full_signature": "@Override public Completable removeLoadBalancer(RemoveLoadBalancerRequest removeLoadBalancerRequest, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.removeLoadBalancer(RemoveLoadBalancerRequest removeLoadBalancerRequest, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(STUB stub, CallMetadata callMetadata)", "modifiers": "private", "return": "STUB", "signature": "STUB wrap(STUB stub, CallMetadata callMetadata)", "full_signature": "private STUB wrap(STUB stub, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.wrap(STUB stub, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "singleCellCall", "parameters": "(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "modifiers": "private", "return": "Observable<T>", "signature": "Observable<T> singleCellCall(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "full_signature": "private Observable<T> singleCellCall(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.singleCellCall(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getAllLoadBalancersInCell", "parameters": "(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "modifiers": "private", "return": "ClientCall<GetAllLoadBalancersResult>", "signature": "ClientCall<GetAllLoadBalancersResult> getAllLoadBalancersInCell(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "full_signature": "private ClientCall<GetAllLoadBalancersResult> getAllLoadBalancersInCell(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.getAllLoadBalancersInCell(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "findLoadBalancersWithCursorPagination", "parameters": "(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "modifiers": "private", "return": "Observable<GetAllLoadBalancersResult>", "signature": "Observable<GetAllLoadBalancersResult> findLoadBalancersWithCursorPagination(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "full_signature": "private Observable<GetAllLoadBalancersResult> findLoadBalancersWithCursorPagination(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.findLoadBalancersWithCursorPagination(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "combineGetAllJobLoadBalancersResult", "parameters": "(GetAllLoadBalancersResult one,\n                                                                          GetAllLoadBalancersResult other)", "modifiers": "private", "return": "GetAllLoadBalancersResult", "signature": "GetAllLoadBalancersResult combineGetAllJobLoadBalancersResult(GetAllLoadBalancersResult one,\n                                                                          GetAllLoadBalancersResult other)", "full_signature": "private GetAllLoadBalancersResult combineGetAllJobLoadBalancersResult(GetAllLoadBalancersResult one,\n                                                                          GetAllLoadBalancersResult other)", "class_method_signature": "AggregatingLoadbalancerService.combineGetAllJobLoadBalancersResult(GetAllLoadBalancersResult one,\n                                                                          GetAllLoadBalancersResult other)", "testcase": false, "constructor": false}, {"identifier": "toListOfJobLoadBalancer", "parameters": "(GetAllLoadBalancersResult result)", "modifiers": "private", "return": "List<JobLoadBalancer>", "signature": "List<JobLoadBalancer> toListOfJobLoadBalancer(GetAllLoadBalancersResult result)", "full_signature": "private List<JobLoadBalancer> toListOfJobLoadBalancer(GetAllLoadBalancersResult result)", "class_method_signature": "AggregatingLoadbalancerService.toListOfJobLoadBalancer(GetAllLoadBalancersResult result)", "testcase": false, "constructor": false}], "file": "titus-server-federation/src/main/java/com/netflix/titus/federation/service/AggregatingLoadbalancerService.java"}, "focal_method": {"identifier": "getAllLoadBalancers", "parameters": "(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<GetAllLoadBalancersResult>", "body": "@Override\n    public Observable<GetAllLoadBalancersResult> getAllLoadBalancers(GetAllLoadBalancersRequest request, CallMetadata callMetadata) {\n        if (request.getPage().getPageSize() <= 0) {\n            return Observable.just(GetAllLoadBalancersResult.newBuilder()\n                    .setPagination(emptyGrpcPagination(request.getPage()))\n                    .build());\n        }\n        if (StringExt.isNotEmpty(request.getPage().getCursor()) || request.getPage().getPageNumber() == 0) {\n            return findLoadBalancersWithCursorPagination(request, callMetadata);\n        }\n        return Observable.error(TitusServiceException.invalidArgument(\"pageNumbers are not supported, please use cursors\"));\n    }", "signature": "Observable<GetAllLoadBalancersResult> getAllLoadBalancers(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "full_signature": "@Override public Observable<GetAllLoadBalancersResult> getAllLoadBalancers(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingLoadbalancerService.getAllLoadBalancers(GetAllLoadBalancersRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false, "invocations": ["getPageSize", "getPage", "just", "build", "setPagination", "newBuilder", "emptyGrpcPagination", "getPage", "isNotEmpty", "getCursor", "getPage", "getPageNumber", "getPage", "findLoadBalancersWithCursorPagination", "error", "invalidArgument"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}