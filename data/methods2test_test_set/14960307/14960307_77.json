{"test_class": {"identifier": "SxmpWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SxmpWriterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SxmpWriterTest.class)", "var_name": "logger"}], "file": "ch-sxmp/src/test/java/com/cloudhopper/sxmp/SxmpWriterTest.java"}, "test_case": {"identifier": "writeDeliveryReportRequest0", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeDeliveryReportRequest0() throws Exception {\n        DeliveryReportRequest request = new DeliveryReportRequest();\n        request.setAccount(new Account(\"customer1\", \"test1\"));\n        //request.setOperatorId(20);\n        request.setReferenceId(\"TESTREF\");\n        request.setStatus(new DeliveryStatus(5, \"Expired\"));\n        request.setTicketId(\"000:20090118002220948:000\");\n        //request.setSourceAddress(new MobileAddress(MobileAddress.Type.NETWORK, \"40404\"));\n        //request.setDestinationAddress(new MobileAddress(MobileAddress.Type.INTERNATIONAL, \"+13135551212\"));\n        //request.setText(\"Hello World\");\n\n        StringWriter sw = new StringWriter();\n        SxmpWriter.write(sw, request);\n\n        logger.debug(sw.toString());\n\n        StringBuilder expectedXML = new StringBuilder(200)\n            .append(\"<?xml version=\\\"1.0\\\"?>\\n\")\n            .append(\"<operation type=\\\"deliveryReport\\\">\\n\")\n            .append(\" <account username=\\\"customer1\\\" password=\\\"test1\\\"/>\\n\")\n            .append(\" <deliveryReportRequest referenceId=\\\"TESTREF\\\">\\n\")\n            .append(\"   <status code=\\\"5\\\" message=\\\"Expired\\\"/>\\n\")\n            .append(\"   <ticketId>000:20090118002220948:000</ticketId>\\n\")\n            .append(\" </deliveryReportRequest>\\n\")\n            .append(\"</operation>\\n\")\n            .append(\"\");\n\n        // compare to actual correct submit response\n        XMLUnit.setIgnoreWhitespace(true);\n        Diff myDiff = new Diff(expectedXML.toString(), sw.toString());\n        DetailedDiff myDetailedDiff = new DetailedDiff(myDiff);\n        Assert.assertTrue(\"XML are similar \" + myDetailedDiff, myDetailedDiff.similar());\n    }", "signature": "void writeDeliveryReportRequest0()", "full_signature": "@Test public void writeDeliveryReportRequest0()", "class_method_signature": "SxmpWriterTest.writeDeliveryReportRequest0()", "testcase": true, "constructor": false, "invocations": ["setAccount", "setReferenceId", "setStatus", "setTicketId", "write", "debug", "toString", "append", "append", "append", "append", "append", "append", "append", "append", "append", "setIgnoreWhitespace", "toString", "toString", "assertTrue", "similar"]}, "focal_class": {"identifier": "SxmpWriter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "writeXmlHeader", "parameters": "(Writer out, Operation operation)", "modifiers": "static private", "return": "void", "signature": "void writeXmlHeader(Writer out, Operation operation)", "full_signature": "static private void writeXmlHeader(Writer out, Operation operation)", "class_method_signature": "SxmpWriter.writeXmlHeader(Writer out, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "writeOperationStartTag", "parameters": "(Writer out, Operation.Type type)", "modifiers": "static private", "return": "void", "signature": "void writeOperationStartTag(Writer out, Operation.Type type)", "full_signature": "static private void writeOperationStartTag(Writer out, Operation.Type type)", "class_method_signature": "SxmpWriter.writeOperationStartTag(Writer out, Operation.Type type)", "testcase": false, "constructor": false}, {"identifier": "writeOperationEndTag", "parameters": "(Writer out)", "modifiers": "static private", "return": "void", "signature": "void writeOperationEndTag(Writer out)", "full_signature": "static private void writeOperationEndTag(Writer out)", "class_method_signature": "SxmpWriter.writeOperationEndTag(Writer out)", "testcase": false, "constructor": false}, {"identifier": "writeRequestResponseTag", "parameters": "(Writer out, Operation operation)", "modifiers": "static private", "return": "void", "signature": "void writeRequestResponseTag(Writer out, Operation operation)", "full_signature": "static private void writeRequestResponseTag(Writer out, Operation operation)", "class_method_signature": "SxmpWriter.writeRequestResponseTag(Writer out, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "writeRequestResponseStartTag", "parameters": "(Writer out, Operation operation)", "modifiers": "static private", "return": "void", "signature": "void writeRequestResponseStartTag(Writer out, Operation operation)", "full_signature": "static private void writeRequestResponseStartTag(Writer out, Operation operation)", "class_method_signature": "SxmpWriter.writeRequestResponseStartTag(Writer out, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "writeRequestResponseEndTag", "parameters": "(Writer out, Operation operation)", "modifiers": "static private", "return": "void", "signature": "void writeRequestResponseEndTag(Writer out, Operation operation)", "full_signature": "static private void writeRequestResponseEndTag(Writer out, Operation operation)", "class_method_signature": "SxmpWriter.writeRequestResponseEndTag(Writer out, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "writeErrorElement", "parameters": "(Writer out, Response response)", "modifiers": "static private", "return": "void", "signature": "void writeErrorElement(Writer out, Response response)", "full_signature": "static private void writeErrorElement(Writer out, Response response)", "class_method_signature": "SxmpWriter.writeErrorElement(Writer out, Response response)", "testcase": false, "constructor": false}, {"identifier": "createString", "parameters": "(Operation operation)", "modifiers": "static public", "return": "String", "signature": "String createString(Operation operation)", "full_signature": "static public String createString(Operation operation)", "class_method_signature": "SxmpWriter.createString(Operation operation)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Writer out, Operation operation)", "modifiers": "static public", "return": "void", "signature": "void write(Writer out, Operation operation)", "full_signature": "static public void write(Writer out, Operation operation)", "class_method_signature": "SxmpWriter.write(Writer out, Operation operation)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Writer out, Operation operation, boolean withXmlHeader)", "modifiers": "static public", "return": "void", "signature": "void write(Writer out, Operation operation, boolean withXmlHeader)", "full_signature": "static public void write(Writer out, Operation operation, boolean withXmlHeader)", "class_method_signature": "SxmpWriter.write(Writer out, Operation operation, boolean withXmlHeader)", "testcase": false, "constructor": false}], "file": "ch-sxmp/src/main/java/com/cloudhopper/sxmp/SxmpWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(Writer out, Operation operation)", "modifiers": "static public", "return": "void", "body": "static public void write(Writer out, Operation operation) throws SxmpErrorException, IOException {\n\twrite(out, operation, true);\n    }", "signature": "void write(Writer out, Operation operation)", "full_signature": "static public void write(Writer out, Operation operation)", "class_method_signature": "SxmpWriter.write(Writer out, Operation operation)", "testcase": false, "constructor": false, "invocations": ["write"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}