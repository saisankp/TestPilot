{"test_class": {"identifier": "KubeNotificationProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Job<BatchJobExt> JOB = JobGenerator.oneBatchJob();", "modifier": "private static final", "type": "Job<BatchJobExt>", "declarator": "JOB = JobGenerator.oneBatchJob()", "var_name": "JOB"}, {"original_string": "private static final BatchJobTask TASK = JobGenerator.oneBatchTask().toBuilder()\n            .withTaskContext(CollectionsExt.asMap(TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\"))\n            .build();", "modifier": "private static final", "type": "BatchJobTask", "declarator": "TASK = JobGenerator.oneBatchTask().toBuilder()\n            .withTaskContext(CollectionsExt.asMap(TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\"))\n            .build()", "var_name": "TASK"}, {"original_string": "private DirectProcessor<PodEvent> podEvents;", "modifier": "private", "type": "DirectProcessor<PodEvent>", "declarator": "podEvents", "var_name": "podEvents"}, {"original_string": "private DirectProcessor<PodEvent> reconcilerPodEvents;", "modifier": "private", "type": "DirectProcessor<PodEvent>", "declarator": "reconcilerPodEvents", "var_name": "reconcilerPodEvents"}, {"original_string": "private DirectProcessor<ContainerEvent> reconcilerContainerEvents;", "modifier": "private", "type": "DirectProcessor<ContainerEvent>", "declarator": "reconcilerContainerEvents", "var_name": "reconcilerContainerEvents"}, {"original_string": "private KubeNotificationProcessor processor;", "modifier": "private", "type": "KubeNotificationProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mock\n    private V3JobOperations jobOperations;", "modifier": "@Mock\n    private", "type": "V3JobOperations", "declarator": "jobOperations", "var_name": "jobOperations"}, {"original_string": "@Mock\n    private ContainerResultCodeResolver containerResultCodeResolver;", "modifier": "@Mock\n    private", "type": "ContainerResultCodeResolver", "declarator": "containerResultCodeResolver", "var_name": "containerResultCodeResolver"}, {"original_string": "@Captor\n    private ArgumentCaptor<Function<Task, Optional<Task>>> changeFunctionCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Function<Task, Optional<Task>>>", "declarator": "changeFunctionCaptor", "var_name": "changeFunctionCaptor"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessorTest.java"}, "test_case": {"identifier": "testUpdateTaskStatusVK", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateTaskStatusVK() {\n        when(containerResultCodeResolver.resolve(any(), any())).thenReturn(Optional.of(\"testUpdatedReasonCode\"));\n        V1Pod pod = new V1Pod()\n                .metadata(new V1ObjectMeta()\n                        .name(TASK.getId())\n                )\n                .status(new V1PodStatus()\n                        .addContainerStatusesItem(new V1ContainerStatus()\n                                .containerID(TASK.getId())\n                                .state(new V1ContainerState()\n                                        .running(new V1ContainerStateRunning().startedAt(DateTime.now()))\n                                )\n                        )\n                );\n        V1Node node = new V1Node()\n                .metadata(new V1ObjectMeta()\n                        .annotations(CollectionsExt.asMap(\n                                TITUS_NODE_DOMAIN + \"ami\", \"ami123\",\n                                TITUS_NODE_DOMAIN + \"stack\", \"myStack\"\n                        ))\n                )\n                .status(new V1NodeStatus()\n                        .addresses(Collections.singletonList(\n                                new V1NodeAddress().address(\"2.2.2.2\").type(KubeUtil.TYPE_INTERNAL_IP)\n                        ))\n                );\n        Task updatedTask = KubeNotificationProcessor.updateTaskStatus(\n                new PodWrapper(pod),\n                TaskState.Started,\n                Optional.of(new TitusExecutorDetails(Collections.emptyMap(), new TitusExecutorDetails.NetworkConfiguration(\n                        true,\n                        \"1.2.3.4\",\n                        \"\",\n                        \"1.2.3.4\",\n                        \"eniId123\",\n                        \"resourceId123\"\n                ))),\n                Optional.of(node),\n                TASK,\n                containerResultCodeResolver\n        );\n\n        Set<TaskState> pastStates = updatedTask.getStatusHistory().stream().map(ExecutableStatus::getState).collect(Collectors.toSet());\n        assertThat(pastStates).contains(TaskState.Accepted, TaskState.Launched, TaskState.StartInitiated);\n        assertThat(updatedTask.getStatus().getReasonCode()).isEqualTo(\"testUpdatedReasonCode\");\n        assertThat(updatedTask.getTaskContext()).containsEntry(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, \"2.2.2.2\");\n        assertThat(updatedTask.getTaskContext()).containsEntry(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP, \"1.2.3.4\");\n        assertThat(updatedTask.getTaskContext()).containsEntry(TaskAttributes.TASK_ATTRIBUTES_AGENT_AMI, \"ami123\");\n        assertThat(updatedTask.getTaskContext()).containsEntry(TaskAttributes.TASK_ATTRIBUTES_AGENT_STACK, \"myStack\");\n    }", "signature": "void testUpdateTaskStatusVK()", "full_signature": "@Test public void testUpdateTaskStatusVK()", "class_method_signature": "KubeNotificationProcessorTest.testUpdateTaskStatusVK()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "resolve", "any", "any", "of", "status", "metadata", "name", "getId", "addContainerStatusesItem", "state", "containerID", "getId", "running", "startedAt", "now", "status", "metadata", "annotations", "asMap", "addresses", "singletonList", "type", "address", "updateTaskStatus", "of", "emptyMap", "of", "collect", "map", "stream", "getStatusHistory", "toSet", "contains", "assertThat", "isEqualTo", "assertThat", "getReasonCode", "getStatus", "containsEntry", "assertThat", "getTaskContext", "containsEntry", "assertThat", "getTaskContext", "containsEntry", "assertThat", "getTaskContext", "containsEntry", "assertThat", "getTaskContext"]}, "focal_class": {"identifier": "KubeNotificationProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(KubeNotificationProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(KubeNotificationProcessor.class)", "var_name": "logger"}, {"original_string": "private static final CallMetadata KUBE_CALL_METADATA = CallMetadata.newBuilder().withCallerId(\"Kube\").build();", "modifier": "private static final", "type": "CallMetadata", "declarator": "KUBE_CALL_METADATA = CallMetadata.newBuilder().withCallerId(\"Kube\").build()", "var_name": "KUBE_CALL_METADATA"}, {"original_string": "private final JobManagerConfiguration configuration;", "modifier": "private final", "type": "JobManagerConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final DirectKubeApiServerIntegrator kubeApiServerIntegrator;", "modifier": "private final", "type": "DirectKubeApiServerIntegrator", "declarator": "kubeApiServerIntegrator", "var_name": "kubeApiServerIntegrator"}, {"original_string": "private final KubeJobManagementReconciler kubeJobManagementReconciler;", "modifier": "private final", "type": "KubeJobManagementReconciler", "declarator": "kubeJobManagementReconciler", "var_name": "kubeJobManagementReconciler"}, {"original_string": "private final V3JobOperations v3JobOperations;", "modifier": "private final", "type": "V3JobOperations", "declarator": "v3JobOperations", "var_name": "v3JobOperations"}, {"original_string": "private final ContainerResultCodeResolver containerResultCodeResolver;", "modifier": "private final", "type": "ContainerResultCodeResolver", "declarator": "containerResultCodeResolver", "var_name": "containerResultCodeResolver"}, {"original_string": "private Disposable subscription;", "modifier": "private", "type": "Disposable", "declarator": "subscription", "var_name": "subscription"}], "methods": [{"identifier": "KubeNotificationProcessor", "parameters": "(JobManagerConfiguration configuration,\n                                     DirectKubeApiServerIntegrator kubeApiServerIntegrator,\n                                     KubeJobManagementReconciler kubeJobManagementReconciler,\n                                     V3JobOperations v3JobOperations,\n                                     ContainerResultCodeResolver containerResultCodeResolver)", "modifiers": "@Inject public", "return": "", "signature": " KubeNotificationProcessor(JobManagerConfiguration configuration,\n                                     DirectKubeApiServerIntegrator kubeApiServerIntegrator,\n                                     KubeJobManagementReconciler kubeJobManagementReconciler,\n                                     V3JobOperations v3JobOperations,\n                                     ContainerResultCodeResolver containerResultCodeResolver)", "full_signature": "@Inject public  KubeNotificationProcessor(JobManagerConfiguration configuration,\n                                     DirectKubeApiServerIntegrator kubeApiServerIntegrator,\n                                     KubeJobManagementReconciler kubeJobManagementReconciler,\n                                     V3JobOperations v3JobOperations,\n                                     ContainerResultCodeResolver containerResultCodeResolver)", "class_method_signature": "KubeNotificationProcessor.KubeNotificationProcessor(JobManagerConfiguration configuration,\n                                     DirectKubeApiServerIntegrator kubeApiServerIntegrator,\n                                     KubeJobManagementReconciler kubeJobManagementReconciler,\n                                     V3JobOperations v3JobOperations,\n                                     ContainerResultCodeResolver containerResultCodeResolver)", "testcase": false, "constructor": true}, {"identifier": "enterActiveMode", "parameters": "()", "modifiers": "@Activator public", "return": "void", "signature": "void enterActiveMode()", "full_signature": "@Activator public void enterActiveMode()", "class_method_signature": "KubeNotificationProcessor.enterActiveMode()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "KubeNotificationProcessor.shutdown()", "testcase": false, "constructor": false}, {"identifier": "handlePodUpdatedEvent", "parameters": "(PodEvent event, Job job, Task task)", "modifiers": "private", "return": "Mono<Void>", "signature": "Mono<Void> handlePodUpdatedEvent(PodEvent event, Job job, Task task)", "full_signature": "private Mono<Void> handlePodUpdatedEvent(PodEvent event, Job job, Task task)", "class_method_signature": "KubeNotificationProcessor.handlePodUpdatedEvent(PodEvent event, Job job, Task task)", "testcase": false, "constructor": false}, {"identifier": "handlePodNotFoundEvent", "parameters": "(PodNotFoundEvent event)", "modifiers": "private", "return": "Mono<Void>", "signature": "Mono<Void> handlePodNotFoundEvent(PodNotFoundEvent event)", "full_signature": "private Mono<Void> handlePodNotFoundEvent(PodNotFoundEvent event)", "class_method_signature": "KubeNotificationProcessor.handlePodNotFoundEvent(PodNotFoundEvent event)", "testcase": false, "constructor": false}, {"identifier": "handleTerminalPodPhaseWithoutContainer", "parameters": "(PodWrapper podWrapper, Job job, Task task)", "modifiers": "private", "return": "Mono<Void>", "signature": "Mono<Void> handleTerminalPodPhaseWithoutContainer(PodWrapper podWrapper, Job job, Task task)", "full_signature": "private Mono<Void> handleTerminalPodPhaseWithoutContainer(PodWrapper podWrapper, Job job, Task task)", "class_method_signature": "KubeNotificationProcessor.handleTerminalPodPhaseWithoutContainer(PodWrapper podWrapper, Job job, Task task)", "testcase": false, "constructor": false}, {"identifier": "updateTaskStatus", "parameters": "(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "modifiers": "private", "return": "Mono<Void>", "signature": "Mono<Void> updateTaskStatus(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "full_signature": "private Mono<Void> updateTaskStatus(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "class_method_signature": "KubeNotificationProcessor.updateTaskStatus(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "testcase": false, "constructor": false}, {"identifier": "updateTaskStatus", "parameters": "(PodWrapper podWrapper,\n                                 TaskState newTaskState,\n                                 Optional<TitusExecutorDetails> executorDetailsOpt,\n                                 Optional<V1Node> node,\n                                 Task currentTask,\n                                 ContainerResultCodeResolver containerResultCodeResolver)", "modifiers": "@VisibleForTesting static", "return": "Task", "signature": "Task updateTaskStatus(PodWrapper podWrapper,\n                                 TaskState newTaskState,\n                                 Optional<TitusExecutorDetails> executorDetailsOpt,\n                                 Optional<V1Node> node,\n                                 Task currentTask,\n                                 ContainerResultCodeResolver containerResultCodeResolver)", "full_signature": "@VisibleForTesting static Task updateTaskStatus(PodWrapper podWrapper,\n                                 TaskState newTaskState,\n                                 Optional<TitusExecutorDetails> executorDetailsOpt,\n                                 Optional<V1Node> node,\n                                 Task currentTask,\n                                 ContainerResultCodeResolver containerResultCodeResolver)", "class_method_signature": "KubeNotificationProcessor.updateTaskStatus(PodWrapper podWrapper,\n                                 TaskState newTaskState,\n                                 Optional<TitusExecutorDetails> executorDetailsOpt,\n                                 Optional<V1Node> node,\n                                 Task currentTask,\n                                 ContainerResultCodeResolver containerResultCodeResolver)", "testcase": false, "constructor": false}, {"identifier": "attachNodeMetadata", "parameters": "(Task task, V1Node node)", "modifiers": "private static", "return": "Task", "signature": "Task attachNodeMetadata(Task task, V1Node node)", "full_signature": "private static Task attachNodeMetadata(Task task, V1Node node)", "class_method_signature": "KubeNotificationProcessor.attachNodeMetadata(Task task, V1Node node)", "testcase": false, "constructor": false}, {"identifier": "fillInMissingStates", "parameters": "(PodWrapper podWrapper, Task task)", "modifiers": "private static", "return": "Task", "signature": "Task fillInMissingStates(PodWrapper podWrapper, Task task)", "full_signature": "private static Task fillInMissingStates(PodWrapper podWrapper, Task task)", "class_method_signature": "KubeNotificationProcessor.fillInMissingStates(PodWrapper podWrapper, Task task)", "testcase": false, "constructor": false}, {"identifier": "fillInMissingStatesForContainerSetupFailure", "parameters": "(PodWrapper podWrapper, Task task)", "modifiers": "private static", "return": "Task", "signature": "Task fillInMissingStatesForContainerSetupFailure(PodWrapper podWrapper, Task task)", "full_signature": "private static Task fillInMissingStatesForContainerSetupFailure(PodWrapper podWrapper, Task task)", "class_method_signature": "KubeNotificationProcessor.fillInMissingStatesForContainerSetupFailure(PodWrapper podWrapper, Task task)", "testcase": false, "constructor": false}, {"identifier": "addIfMissing", "parameters": "(Task task, TaskState expectedState, TaskStatus.Builder statusTemplate)", "modifiers": "private static", "return": "Optional<TaskStatus>", "signature": "Optional<TaskStatus> addIfMissing(Task task, TaskState expectedState, TaskStatus.Builder statusTemplate)", "full_signature": "private static Optional<TaskStatus> addIfMissing(Task task, TaskState expectedState, TaskStatus.Builder statusTemplate)", "class_method_signature": "KubeNotificationProcessor.addIfMissing(Task task, TaskState expectedState, TaskStatus.Builder statusTemplate)", "testcase": false, "constructor": false}, {"identifier": "addMissingAttributes", "parameters": "(PodWrapper podWrapper, Task updatedTask)", "modifiers": "private static", "return": "Task", "signature": "Task addMissingAttributes(PodWrapper podWrapper, Task updatedTask)", "full_signature": "private static Task addMissingAttributes(PodWrapper podWrapper, Task updatedTask)", "class_method_signature": "KubeNotificationProcessor.addMissingAttributes(PodWrapper podWrapper, Task updatedTask)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java"}, "focal_method": {"identifier": "updateTaskStatus", "parameters": "(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "modifiers": "private", "return": "Mono<Void>", "body": "private Mono<Void> updateTaskStatus(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node) {\n        return ReactorExt.toMono(v3JobOperations.updateTask(\n                task.getId(),\n                currentTask -> Optional.of(updateTaskStatus(pod, newTaskState, executorDetailsOpt, node, currentTask, containerResultCodeResolver)),\n                V3JobOperations.Trigger.Kube,\n                \"Kube pod notification\",\n                KUBE_CALL_METADATA\n        ));\n    }", "signature": "Mono<Void> updateTaskStatus(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "full_signature": "private Mono<Void> updateTaskStatus(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "class_method_signature": "KubeNotificationProcessor.updateTaskStatus(PodWrapper pod,\n                                        Task task,\n                                        TaskState newTaskState,\n                                        Optional<TitusExecutorDetails> executorDetailsOpt,\n                                        Optional<V1Node> node)", "testcase": false, "constructor": false, "invocations": ["toMono", "updateTask", "getId", "of", "updateTaskStatus"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}