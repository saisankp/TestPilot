{"test_class": {"identifier": "TestTranspose", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Method doSanityCheck;", "modifier": "private", "type": "Method", "declarator": "doSanityCheck", "var_name": "doSanityCheck"}], "file": "tools/ot/src/test/java/dk/alexandra/fresco/tools/ot/otextension/TestTranspose.java"}, "test_case": {"identifier": "testWrongAmountOfRows", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWrongAmountOfRows() {\n    boolean thrown;\n    List<StrictBitVector> matrix = getSquareMatrix();\n    matrix.remove(0);\n    thrown = false;\n    try {\n      Transpose.transpose(matrix);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"The amount rows in the matrix is not 8*2^x for some x > 1\",\n          e.getMessage());\n      thrown = true;\n    }\n    assertEquals(true, thrown);\n    matrix = new ArrayList<>();\n    // Notice 24 is a product of 8, but not a 2 power\n    for (int i = 0; i < 24; i++) {\n      matrix.add(new StrictBitVector(24));\n    }\n    thrown = false;\n    try {\n      Transpose.transpose(matrix);\n    } catch (IllegalArgumentException e) {\n      assertEquals(\"The amount rows in the matrix is not 8*2^x for some x > 1\",\n          e.getMessage());\n      thrown = true;\n    }\n    assertEquals(true, thrown);\n  }", "signature": "void testWrongAmountOfRows()", "full_signature": "@Test public void testWrongAmountOfRows()", "class_method_signature": "TestTranspose.testWrongAmountOfRows()", "testcase": true, "constructor": false, "invocations": ["getSquareMatrix", "remove", "transpose", "assertEquals", "getMessage", "assertEquals", "add", "transpose", "assertEquals", "getMessage", "assertEquals"]}, "focal_class": {"identifier": "Transpose", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Transpose", "parameters": "()", "modifiers": "private", "return": "", "signature": " Transpose()", "full_signature": "private  Transpose()", "class_method_signature": "Transpose.Transpose()", "testcase": false, "constructor": true}, {"identifier": "transpose", "parameters": "(List<StrictBitVector> input)", "modifiers": "public static", "return": "List<StrictBitVector>", "signature": "List<StrictBitVector> transpose(List<StrictBitVector> input)", "full_signature": "public static List<StrictBitVector> transpose(List<StrictBitVector> input)", "class_method_signature": "Transpose.transpose(List<StrictBitVector> input)", "testcase": false, "constructor": false}, {"identifier": "insertSquare", "parameters": "(byte[][] matrix, List<byte[]> square, int minDim, boolean wide,\n      int i)", "modifiers": "private static", "return": "void", "signature": "void insertSquare(byte[][] matrix, List<byte[]> square, int minDim, boolean wide,\n      int i)", "full_signature": "private static void insertSquare(byte[][] matrix, List<byte[]> square, int minDim, boolean wide,\n      int i)", "class_method_signature": "Transpose.insertSquare(byte[][] matrix, List<byte[]> square, int minDim, boolean wide,\n      int i)", "testcase": false, "constructor": false}, {"identifier": "extractSquare", "parameters": "(List<StrictBitVector> matrix, int minDim, boolean tall,\n      int i)", "modifiers": "private static", "return": "List<byte[]>", "signature": "List<byte[]> extractSquare(List<StrictBitVector> matrix, int minDim, boolean tall,\n      int i)", "full_signature": "private static List<byte[]> extractSquare(List<StrictBitVector> matrix, int minDim, boolean tall,\n      int i)", "class_method_signature": "Transpose.extractSquare(List<StrictBitVector> matrix, int minDim, boolean tall,\n      int i)", "testcase": false, "constructor": false}, {"identifier": "doEklundh", "parameters": "(List<byte[]> input)", "modifiers": "private static", "return": "void", "signature": "void doEklundh(List<byte[]> input)", "full_signature": "private static void doEklundh(List<byte[]> input)", "class_method_signature": "Transpose.doEklundh(List<byte[]> input)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(List<byte[]> input, int row, int column, int blockSize)", "modifiers": "private static", "return": "void", "signature": "void swap(List<byte[]> input, int row, int column, int blockSize)", "full_signature": "private static void swap(List<byte[]> input, int row, int column, int blockSize)", "class_method_signature": "Transpose.swap(List<byte[]> input, int row, int column, int blockSize)", "testcase": false, "constructor": false}, {"identifier": "doSanityCheck", "parameters": "(List<StrictBitVector> input)", "modifiers": "private static", "return": "void", "signature": "void doSanityCheck(List<StrictBitVector> input)", "full_signature": "private static void doSanityCheck(List<StrictBitVector> input)", "class_method_signature": "Transpose.doSanityCheck(List<StrictBitVector> input)", "testcase": false, "constructor": false}, {"identifier": "transposeAllByteBlocks", "parameters": "(List<byte[]> input)", "modifiers": "private static", "return": "void", "signature": "void transposeAllByteBlocks(List<byte[]> input)", "full_signature": "private static void transposeAllByteBlocks(List<byte[]> input)", "class_method_signature": "Transpose.transposeAllByteBlocks(List<byte[]> input)", "testcase": false, "constructor": false}, {"identifier": "transposeByteBlock", "parameters": "(List<byte[]> input, int rowOffset, int columnOffset)", "modifiers": "private static", "return": "void", "signature": "void transposeByteBlock(List<byte[]> input, int rowOffset, int columnOffset)", "full_signature": "private static void transposeByteBlock(List<byte[]> input, int rowOffset, int columnOffset)", "class_method_signature": "Transpose.transposeByteBlock(List<byte[]> input, int rowOffset, int columnOffset)", "testcase": false, "constructor": false}], "file": "tools/ot/src/main/java/dk/alexandra/fresco/tools/ot/otextension/Transpose.java"}, "focal_method": {"identifier": "Transpose", "parameters": "()", "modifiers": "private", "return": "", "body": "private Transpose() {\n    // This class is meant to only contain static helper methods.\n  }", "signature": " Transpose()", "full_signature": "private  Transpose()", "class_method_signature": "Transpose.Transpose()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}