{"test_class": {"identifier": "SdrAlgorithmTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NEURAL_NET_RESOURCE_PATH = \"run05_100.nna\";", "modifier": "private static final", "type": "String", "declarator": "NEURAL_NET_RESOURCE_PATH = \"run05_100.nna\"", "var_name": "NEURAL_NET_RESOURCE_PATH"}, {"original_string": "private static final String TEST_PIXEL_RESOURCE_PATH = \"run05_100_test_pixel.dat\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PIXEL_RESOURCE_PATH = \"run05_100_test_pixel.dat\"", "var_name": "TEST_PIXEL_RESOURCE_PATH"}, {"original_string": "private static final double EPS = 1e-5;", "modifier": "private static final", "type": "double", "declarator": "EPS = 1e-5", "var_name": "EPS"}], "file": "s3tbx-meris-sdr/src/test/java/org/esa/s3tbx/meris/sdr/SdrAlgorithmTest.java"}, "test_case": {"identifier": "testNeuralNetFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNeuralNetFunction() throws IOException, JnnException {\n        final JnnNet neuralNet = readNeuralNet();\n        final SdrAlgorithm algorithm = new SdrAlgorithm(neuralNet);\n        final double[][] testVectors = readTestPixels();\n        for (double[] testVector : testVectors) {\n            double[] input = new double[testVector.length - 1];\n            double[] actualOutput = new double[1];\n            double[] expectedOutput = new double[1];\n            System.arraycopy(testVector, 0, input, 0, input.length);\n            expectedOutput[0] = testVector[testVector.length - 1];\n            algorithm.computeSdr(input, actualOutput);\n            assertEquals(expectedOutput[0], actualOutput[0], EPS);\n        }\n    }", "signature": "void testNeuralNetFunction()", "full_signature": "@Test public void testNeuralNetFunction()", "class_method_signature": "SdrAlgorithmTest.testNeuralNetFunction()", "testcase": true, "constructor": false, "invocations": ["readNeuralNet", "readTestPixels", "arraycopy", "computeSdr", "assertEquals"]}, "focal_class": {"identifier": "SdrAlgorithm", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "public final JnnNet _neuralNet;", "modifier": "public final", "type": "JnnNet", "declarator": "_neuralNet", "var_name": "_neuralNet"}], "methods": [{"identifier": "SdrAlgorithm", "parameters": "(JnnNet neuralNet)", "modifiers": "public", "return": "", "signature": " SdrAlgorithm(JnnNet neuralNet)", "full_signature": "public  SdrAlgorithm(JnnNet neuralNet)", "class_method_signature": "SdrAlgorithm.SdrAlgorithm(JnnNet neuralNet)", "testcase": false, "constructor": true}, {"identifier": "computeSdr", "parameters": "(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "modifiers": "public", "return": "double", "signature": "double computeSdr(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "full_signature": "public double computeSdr(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "class_method_signature": "SdrAlgorithm.computeSdr(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "testcase": false, "constructor": false}, {"identifier": "computeSdr", "parameters": "(final double[] inputVector, final double[] outputVector)", "modifiers": "public", "return": "void", "signature": "void computeSdr(final double[] inputVector, final double[] outputVector)", "full_signature": "public void computeSdr(final double[] inputVector, final double[] outputVector)", "class_method_signature": "SdrAlgorithm.computeSdr(final double[] inputVector, final double[] outputVector)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override protected", "return": "SdrAlgorithm", "signature": "SdrAlgorithm clone()", "full_signature": "@Override protected SdrAlgorithm clone()", "class_method_signature": "SdrAlgorithm.clone()", "testcase": false, "constructor": false}], "file": "s3tbx-meris-sdr/src/main/java/org/esa/s3tbx/meris/sdr/SdrAlgorithm.java"}, "focal_method": {"identifier": "computeSdr", "parameters": "(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "modifiers": "public", "return": "double", "body": "public double computeSdr(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang) {\n        final double[] input = new double[9];\n        final double[] output = new double[1];\n\n        sza *= MathUtils.DTOR;\n        vza *= MathUtils.DTOR;\n        ada *= MathUtils.DTOR;\n\n        input[0] = rhoNorm;\n        input[1] = wavelength;\n        input[2] = Math.cos(sza);\n        input[3] = Math.sin(vza) * Math.cos(ada);\n        input[4] = Math.sin(vza) * Math.sin(ada);\n        input[5] = Math.cos(vza);\n        input[6] = aot470;\n        input[7] = aot660;\n        input[8] = ang;\n        computeSdr(input, output);\n        return output[0];\n    }", "signature": "double computeSdr(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "full_signature": "public double computeSdr(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "class_method_signature": "SdrAlgorithm.computeSdr(double rhoNorm,\n                             double wavelength,\n                             double vza,\n                             double sza,\n                             double ada,\n                             double aot470,\n                             double aot660,\n                             double ang)", "testcase": false, "constructor": false, "invocations": ["cos", "sin", "cos", "sin", "sin", "cos", "computeSdr"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}