{"test_class": {"identifier": "Slf4jLoggerFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "webbeans-slf4j/src/test/java/org/apache/openwebbeans/slf4j/Slf4jLoggerFactoryTest.java"}, "test_case": {"identifier": "ensureLogGoesOnSlf4j", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ensureLogGoesOnSlf4j() {\n        final Logger logger = WebBeansLoggerFacade.getLogger(Slf4jLoggerFactoryTest.class);\n        assertTrue(logger.getClass().getName(), Slf4jLogger.class.isInstance(logger));\n\n        final PrintStream original = System.err;\n        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        System.setErr(new PrintStream(new OutputStream() {\n\n            @Override\n            public void write(final int b) {\n                buffer.write(b);\n                original.write(b);\n            }\n\n            @Override\n            public void write(final byte[] b) throws IOException {\n                buffer.write(b);\n                original.write(b);\n            }\n\n            @Override\n            public void write(final byte[] b, final int off, final int len) {\n                buffer.write(b, off, len);\n                original.write(b, off, len);\n            }\n        }));\n        try {\n            logger.info(\"test log\");\n        } finally {\n            System.setErr(original);\n        }\n        assertEquals(\n                \"[main] INFO \" + getClass().getName() + \" - test log\\n\",\n                new String(buffer.toByteArray(), StandardCharsets.UTF_8));\n    }", "signature": "void ensureLogGoesOnSlf4j()", "full_signature": "@Test public void ensureLogGoesOnSlf4j()", "class_method_signature": "Slf4jLoggerFactoryTest.ensureLogGoesOnSlf4j()", "testcase": true, "constructor": false, "invocations": ["getLogger", "assertTrue", "getName", "getClass", "isInstance", "setErr", "write", "write", "write", "write", "write", "write", "info", "setErr", "assertEquals", "getName", "getClass", "toByteArray"]}, "focal_class": {"identifier": "Slf4jLoggerFactory", "superclass": "", "interfaces": "implements WebBeansLoggerFactory", "fields": [], "methods": [{"identifier": "getLogger", "parameters": "(final Class<?> clazz, final Locale desiredLocale)", "modifiers": "@Override public", "return": "Logger", "signature": "Logger getLogger(final Class<?> clazz, final Locale desiredLocale)", "full_signature": "@Override public Logger getLogger(final Class<?> clazz, final Locale desiredLocale)", "class_method_signature": "Slf4jLoggerFactory.getLogger(final Class<?> clazz, final Locale desiredLocale)", "testcase": false, "constructor": false}, {"identifier": "getLogger", "parameters": "(final Class<?> clazz)", "modifiers": "@Override public", "return": "Logger", "signature": "Logger getLogger(final Class<?> clazz)", "full_signature": "@Override public Logger getLogger(final Class<?> clazz)", "class_method_signature": "Slf4jLoggerFactory.getLogger(final Class<?> clazz)", "testcase": false, "constructor": false}], "file": "webbeans-slf4j/src/main/java/org/apache/openwebbeans/slf4j/Slf4jLoggerFactory.java"}, "focal_method": {"identifier": "getLogger", "parameters": "(final Class<?> clazz, final Locale desiredLocale)", "modifiers": "@Override public", "return": "Logger", "body": "@Override\n    public Logger getLogger(final Class<?> clazz, final Locale desiredLocale)\n    {\n        return new Slf4jLogger(clazz.getName(), ResourceBundle.getBundle(\"openwebbeans/Messages\", desiredLocale).toString());\n    }", "signature": "Logger getLogger(final Class<?> clazz, final Locale desiredLocale)", "full_signature": "@Override public Logger getLogger(final Class<?> clazz, final Locale desiredLocale)", "class_method_signature": "Slf4jLoggerFactory.getLogger(final Class<?> clazz, final Locale desiredLocale)", "testcase": false, "constructor": false, "invocations": ["getName", "toString", "getBundle"]}, "repository": {"repo_id": 1302095, "url": "https://github.com/apache/openwebbeans", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 45, "size": 23214, "license": "licensed"}}