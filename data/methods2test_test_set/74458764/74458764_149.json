{"test_class": {"identifier": "TestJdkSerializerDeserializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JdkSerializerDeserializer serializer;", "modifier": "private", "type": "JdkSerializerDeserializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private SessionManager sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private byte[] serializedString;", "modifier": "private", "type": "byte[]", "declarator": "serializedString", "var_name": "serializedString"}, {"original_string": "private Date now;", "modifier": "private", "type": "Date", "declarator": "now", "var_name": "now"}, {"original_string": "private byte[] serializedDate;", "modifier": "private", "type": "byte[]", "declarator": "serializedDate", "var_name": "serializedDate"}], "file": "session-replacement/src/test/java/com/amadeus/session/TestJdkSerializerDeserializer.java"}, "test_case": {"identifier": "testDeserializeWithClassNotFoundException", "parameters": "()", "modifiers": "@Test(expected=IllegalStateException.class) public", "return": "void", "body": "@Test(expected=IllegalStateException.class)\n  public void testDeserializeWithClassNotFoundException() throws ClassNotFoundException {\n    ClassLoader cl = mock(ClassLoader.class);\n    when(sessionManager.getSessionClassLoader()).thenReturn(cl);\n    assertEquals(now, serializer.deserialize(serializedDate));\n  }", "signature": "void testDeserializeWithClassNotFoundException()", "full_signature": "@Test(expected=IllegalStateException.class) public void testDeserializeWithClassNotFoundException()", "class_method_signature": "TestJdkSerializerDeserializer.testDeserializeWithClassNotFoundException()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSessionClassLoader", "assertEquals", "deserialize"]}, "focal_class": {"identifier": "JdkSerializerDeserializer", "superclass": "", "interfaces": "implements SerializerDeserializer", "fields": [{"original_string": "private SessionManager sessionManager;", "modifier": "private", "type": "SessionManager", "declarator": "sessionManager", "var_name": "sessionManager"}, {"original_string": "private Counter serializedData;", "modifier": "private", "type": "Counter", "declarator": "serializedData", "var_name": "serializedData"}, {"original_string": "private Counter deserializedData;", "modifier": "private", "type": "Counter", "declarator": "deserializedData", "var_name": "deserializedData"}, {"original_string": "private Histogram serializedHistogram;", "modifier": "private", "type": "Histogram", "declarator": "serializedHistogram", "var_name": "serializedHistogram"}, {"original_string": "private Histogram deserializedHistogram;", "modifier": "private", "type": "Histogram", "declarator": "deserializedHistogram", "var_name": "deserializedHistogram"}], "methods": [{"identifier": "serialize", "parameters": "(Object value)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize(Object value)", "full_signature": "@Override public byte[] serialize(Object value)", "class_method_signature": "JdkSerializerDeserializer.serialize(Object value)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data)", "modifiers": "@Override public", "return": "Object", "signature": "Object deserialize(byte[] data)", "full_signature": "@Override public Object deserialize(byte[] data)", "class_method_signature": "JdkSerializerDeserializer.deserialize(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "setSessionManager", "parameters": "(SessionManager sessionManager)", "modifiers": "@Override public", "return": "void", "signature": "void setSessionManager(SessionManager sessionManager)", "full_signature": "@Override public void setSessionManager(SessionManager sessionManager)", "class_method_signature": "JdkSerializerDeserializer.setSessionManager(SessionManager sessionManager)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/JdkSerializerDeserializer.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] data)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object deserialize(byte[] data) {\n    if (data == null) {\n      return null;\n    }\n    // For deserializing objects we use specific class loader of\n    // the session manager to insure it was the same one used\n    // when creating serialized objects.\n    ClassLoader classLoader = sessionManager.getSessionClassLoader();\n    if (classLoader == null) {\n      classLoader = Thread.currentThread().getContextClassLoader();\n    }\n    try (ByteArrayInputStream in = new ByteArrayInputStream(data);\n        ObjectInputStream is = new ClassLoaderObjectInputStream(classLoader, in)) {\n      Object obj = is.readObject();\n      // Incrementing metrics\n      deserializedData.inc(data.length);\n      deserializedHistogram.update(data.length);\n      return obj;\n    } catch (IOException | ClassNotFoundException e) {\n      throw new IllegalStateException(\"Unable to deserialize object. See stacktrace for more information.\", e);\n    }\n  }", "signature": "Object deserialize(byte[] data)", "full_signature": "@Override public Object deserialize(byte[] data)", "class_method_signature": "JdkSerializerDeserializer.deserialize(byte[] data)", "testcase": false, "constructor": false, "invocations": ["getSessionClassLoader", "getContextClassLoader", "currentThread", "readObject", "inc", "update"]}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}