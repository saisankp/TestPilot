{"test_class": {"identifier": "NodeTemplateResourceTest", "superclass": "extends AbstractResourceTest", "interfaces": "", "fields": [], "file": "org.eclipse.winery.repository.rest/src/test/java/org/eclipse/winery/repository/rest/resources/servicetemplates/topologytemplates/NodeTemplateResourceTest.java"}, "test_case": {"identifier": "addStateArtifactToNodeTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addStateArtifactToNodeTemplate() throws Exception {\n        this.setRevisionTo(\"origin/plain\");\n\n        Path filePath = MavenTestingUtils.getProjectFilePath(\"src/test/resources/servicetemplates/plan.zip\");\n        this.assertNoContentPost(\"servicetemplates/http%253A%252F%252Fplain.winery.opentosca.org%252Fservicetemplates/ServiceTemplateWithOneNodeTemplate_w1-wip1/\"\n                + \"topologytemplate/nodetemplates/NodeTypeWith5Versions_0_3.4-w3-wip1/state\",\n            filePath);\n\n        TNodeTemplate nodeTemplate = getObjectFromGetRequest(\"servicetemplates/\" +\n                \"http%253A%252F%252Fplain.winery.opentosca.org%252Fservicetemplates/ServiceTemplateWithOneNodeTemplate_w1-wip1/\" +\n                \"topologytemplate/nodetemplates/NodeTypeWith5Versions_0_3.4-w3-wip1\",\n            TNodeTemplate.class\n        );\n\n        TDeploymentArtifacts deploymentArtifacts = nodeTemplate.getDeploymentArtifacts();\n        assertNonNull(deploymentArtifacts);\n        TDeploymentArtifact deploymentArtifact = deploymentArtifacts.getDeploymentArtifact(\"state\");\n        assertNonNull(deploymentArtifact);\n        assertEquals(OpenToscaBaseTypes.stateArtifactType, deploymentArtifact.getArtifactType());\n    }", "signature": "void addStateArtifactToNodeTemplate()", "full_signature": "@Test public void addStateArtifactToNodeTemplate()", "class_method_signature": "NodeTemplateResourceTest.addStateArtifactToNodeTemplate()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "getProjectFilePath", "assertNoContentPost", "getObjectFromGetRequest", "getDeploymentArtifacts", "assertNonNull", "getDeploymentArtifact", "assertNonNull", "assertEquals", "getArtifactType"]}, "focal_class": {"identifier": "NodeTemplateResource", "superclass": "extends TEntityTemplateResource<TNodeTemplate>", "interfaces": "implements INodeTemplateResourceOrNodeTypeImplementationResource", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(NodeTemplateResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(NodeTemplateResource.class)", "var_name": "LOGGER"}, {"original_string": "private final QName qnameX = new QName(Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE, \"x\");", "modifier": "private final", "type": "QName", "declarator": "qnameX = new QName(Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE, \"x\")", "var_name": "qnameX"}, {"original_string": "private final QName qnameY = new QName(Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE, \"y\");", "modifier": "private final", "type": "QName", "declarator": "qnameY = new QName(Namespaces.TOSCA_WINERY_EXTENSIONS_NAMESPACE, \"y\")", "var_name": "qnameY"}, {"original_string": "private final TNodeTemplate nodeTemplate;", "modifier": "private final", "type": "TNodeTemplate", "declarator": "nodeTemplate", "var_name": "nodeTemplate"}], "methods": [{"identifier": "NodeTemplateResource", "parameters": "(IIdDetermination<TNodeTemplate> idDetermination, TNodeTemplate o, int idx, List<TNodeTemplate> list, IPersistable res)", "modifiers": "public", "return": "", "signature": " NodeTemplateResource(IIdDetermination<TNodeTemplate> idDetermination, TNodeTemplate o, int idx, List<TNodeTemplate> list, IPersistable res)", "full_signature": "public  NodeTemplateResource(IIdDetermination<TNodeTemplate> idDetermination, TNodeTemplate o, int idx, List<TNodeTemplate> list, IPersistable res)", "class_method_signature": "NodeTemplateResource.NodeTemplateResource(IIdDetermination<TNodeTemplate> idDetermination, TNodeTemplate o, int idx, List<TNodeTemplate> list, IPersistable res)", "testcase": false, "constructor": true}, {"identifier": "getDeploymentArtifacts", "parameters": "()", "modifiers": "@Path(\"deploymentartifacts/\") public", "return": "DeploymentArtifactsResource", "signature": "DeploymentArtifactsResource getDeploymentArtifacts()", "full_signature": "@Path(\"deploymentartifacts/\") public DeploymentArtifactsResource getDeploymentArtifacts()", "class_method_signature": "NodeTemplateResource.getDeploymentArtifacts()", "testcase": false, "constructor": false}, {"identifier": "postYamlArtifactFile", "parameters": "(@PathParam(\"artifactId\") String id)", "modifiers": "@Path(\"yamlartifacts/{artifactId}\") public", "return": "GenericFileResource", "signature": "GenericFileResource postYamlArtifactFile(@PathParam(\"artifactId\") String id)", "full_signature": "@Path(\"yamlartifacts/{artifactId}\") public GenericFileResource postYamlArtifactFile(@PathParam(\"artifactId\") String id)", "class_method_signature": "NodeTemplateResource.postYamlArtifactFile(@PathParam(\"artifactId\") String id)", "testcase": false, "constructor": false}, {"identifier": "getMinInstances", "parameters": "()", "modifiers": "@GET @Path(\"minInstances\") public", "return": "String", "signature": "String getMinInstances()", "full_signature": "@GET @Path(\"minInstances\") public String getMinInstances()", "class_method_signature": "NodeTemplateResource.getMinInstances()", "testcase": false, "constructor": false}, {"identifier": "setMinInstances", "parameters": "(@FormParam(value = \"minInstances\") String minInstances)", "modifiers": "@PUT @Path(\"minInstances\") public", "return": "Response", "signature": "Response setMinInstances(@FormParam(value = \"minInstances\") String minInstances)", "full_signature": "@PUT @Path(\"minInstances\") public Response setMinInstances(@FormParam(value = \"minInstances\") String minInstances)", "class_method_signature": "NodeTemplateResource.setMinInstances(@FormParam(value = \"minInstances\") String minInstances)", "testcase": false, "constructor": false}, {"identifier": "getMaxInstances", "parameters": "()", "modifiers": "@GET @Path(\"maxInstances\") public", "return": "String", "signature": "String getMaxInstances()", "full_signature": "@GET @Path(\"maxInstances\") public String getMaxInstances()", "class_method_signature": "NodeTemplateResource.getMaxInstances()", "testcase": false, "constructor": false}, {"identifier": "setMaxInstances", "parameters": "(@FormParam(value = \"maxInstances\") String maxInstances)", "modifiers": "@PUT @Path(\"maxInstances\") public", "return": "Response", "signature": "Response setMaxInstances(@FormParam(value = \"maxInstances\") String maxInstances)", "full_signature": "@PUT @Path(\"maxInstances\") public Response setMaxInstances(@FormParam(value = \"maxInstances\") String maxInstances)", "class_method_signature": "NodeTemplateResource.setMaxInstances(@FormParam(value = \"maxInstances\") String maxInstances)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "@Path(\"x\") @GET @ApiOperation(value = \"@return the x coordinate of the node template\") public", "return": "String", "signature": "String getX()", "full_signature": "@Path(\"x\") @GET @ApiOperation(value = \"@return the x coordinate of the node template\") public String getX()", "class_method_signature": "NodeTemplateResource.getX()", "testcase": false, "constructor": false}, {"identifier": "setX", "parameters": "(String x)", "modifiers": "@Path(\"x\") @PUT public", "return": "Response", "signature": "Response setX(String x)", "full_signature": "@Path(\"x\") @PUT public Response setX(String x)", "class_method_signature": "NodeTemplateResource.setX(String x)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "()", "modifiers": "@Path(\"y\") @GET @ApiOperation(value = \"@return the y coordinate of the node template\") public", "return": "String", "signature": "String getY()", "full_signature": "@Path(\"y\") @GET @ApiOperation(value = \"@return the y coordinate of the node template\") public String getY()", "class_method_signature": "NodeTemplateResource.getY()", "testcase": false, "constructor": false}, {"identifier": "setY", "parameters": "(String y)", "modifiers": "@Path(\"y\") @PUT public", "return": "Response", "signature": "Response setY(String y)", "full_signature": "@Path(\"y\") @PUT public Response setY(String y)", "class_method_signature": "NodeTemplateResource.setY(String y)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "@Override public", "return": "Namespace", "signature": "Namespace getNamespace()", "full_signature": "@Override public Namespace getNamespace()", "class_method_signature": "NodeTemplateResource.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "createStateElement", "parameters": "(@FormDataParam(\"file\") InputStream uploadedInputStream, @FormDataParam(\"file\")\n        FormDataContentDisposition fileDetail, @FormDataParam(\"file\") FormDataBodyPart body, @Context UriInfo uriInfo)", "modifiers": "@POST @Path(\"state\") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.MULTIPART_FORM_DATA) public", "return": "Response", "signature": "Response createStateElement(@FormDataParam(\"file\") InputStream uploadedInputStream, @FormDataParam(\"file\")\n        FormDataContentDisposition fileDetail, @FormDataParam(\"file\") FormDataBodyPart body, @Context UriInfo uriInfo)", "full_signature": "@POST @Path(\"state\") @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.MULTIPART_FORM_DATA) public Response createStateElement(@FormDataParam(\"file\") InputStream uploadedInputStream, @FormDataParam(\"file\")\n        FormDataContentDisposition fileDetail, @FormDataParam(\"file\") FormDataBodyPart body, @Context UriInfo uriInfo)", "class_method_signature": "NodeTemplateResource.createStateElement(@FormDataParam(\"file\") InputStream uploadedInputStream, @FormDataParam(\"file\")\n        FormDataContentDisposition fileDetail, @FormDataParam(\"file\") FormDataBodyPart body, @Context UriInfo uriInfo)", "testcase": false, "constructor": false}, {"identifier": "getServiceTemplateResource", "parameters": "()", "modifiers": "public", "return": "ServiceTemplateResource", "signature": "ServiceTemplateResource getServiceTemplateResource()", "full_signature": "public ServiceTemplateResource getServiceTemplateResource()", "class_method_signature": "NodeTemplateResource.getServiceTemplateResource()", "testcase": false, "constructor": false}, {"identifier": "getHEAD", "parameters": "()", "modifiers": "@HEAD public", "return": "Response", "signature": "Response getHEAD()", "full_signature": "@HEAD public Response getHEAD()", "class_method_signature": "NodeTemplateResource.getHEAD()", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository.rest/src/main/java/org/eclipse/winery/repository/rest/resources/servicetemplates/topologytemplates/NodeTemplateResource.java"}, "focal_method": {"identifier": "getDeploymentArtifacts", "parameters": "()", "modifiers": "@Path(\"deploymentartifacts/\") public", "return": "DeploymentArtifactsResource", "body": "@Path(\"deploymentartifacts/\")\n    public DeploymentArtifactsResource getDeploymentArtifacts() {\n        return new DeploymentArtifactsResource(this.o, this);\n    }", "signature": "DeploymentArtifactsResource getDeploymentArtifacts()", "full_signature": "@Path(\"deploymentartifacts/\") public DeploymentArtifactsResource getDeploymentArtifacts()", "class_method_signature": "NodeTemplateResource.getDeploymentArtifacts()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}