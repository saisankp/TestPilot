{"test_class": {"identifier": "SlstrPduStitcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File targetDirectory;", "modifier": "private", "type": "File", "declarator": "targetDirectory", "var_name": "targetDirectory"}], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/SlstrPduStitcherTest.java"}, "test_case": {"identifier": "testDecomposeSlstrName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecomposeSlstrName() throws URISyntaxException, PDUStitchingException {\n        final SlstrPduStitcher.SlstrNameDecomposition firstSlstrNameDecomposition =\n                SlstrPduStitcher.decomposeSlstrName(TestUtils.getFirstSlstrFile().getParentFile().getName());\n\n        Date startTime = new GregorianCalendar(2013, Calendar.JULY, 7, 15, 32, 52).getTime();\n        Date stopTime = new GregorianCalendar(2013, Calendar.JULY, 7, 15, 37, 52).getTime();\n        assertEquals(startTime, firstSlstrNameDecomposition.startTime);\n        assertEquals(stopTime, firstSlstrNameDecomposition.stopTime);\n        assertEquals(\"0299\", firstSlstrNameDecomposition.duration);\n        assertEquals(\"158\", firstSlstrNameDecomposition.cycleNumber);\n        assertEquals(\"182\", firstSlstrNameDecomposition.relativeOrbitNumber);\n        assertEquals(\"____\", firstSlstrNameDecomposition.frameAlongTrackCoordinate);\n        assertEquals(\"SVL\", firstSlstrNameDecomposition.fileGeneratingCentre);\n        assertEquals(\"O\", firstSlstrNameDecomposition.platform);\n        assertEquals(\"NR\", firstSlstrNameDecomposition.timelinessOfProcessingWorkflow);\n        assertEquals(\"001\", firstSlstrNameDecomposition.baselineCollectionOrDataUsage);\n    }", "signature": "void testDecomposeSlstrName()", "full_signature": "@Test public void testDecomposeSlstrName()", "class_method_signature": "SlstrPduStitcherTest.testDecomposeSlstrName()", "testcase": true, "constructor": false, "invocations": ["decomposeSlstrName", "getName", "getParentFile", "getFirstSlstrFile", "getTime", "getTime", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "SlstrPduStitcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateFormatConverter SLSTR_DATE_FORMAT_CONVERTER =\n            new DateFormatConverter(new SimpleDateFormat(\"yyyyMMdd'T'HHmmss\"));", "modifier": "private static final", "type": "DateFormatConverter", "declarator": "SLSTR_DATE_FORMAT_CONVERTER =\n            new DateFormatConverter(new SimpleDateFormat(\"yyyyMMdd'T'HHmmss\"))", "var_name": "SLSTR_DATE_FORMAT_CONVERTER"}, {"original_string": "private static final ImageSize NULL_IMAGE_SIZE = new ImageSize(\"null\", 0, 0, 0, 0);", "modifier": "private static final", "type": "ImageSize", "declarator": "NULL_IMAGE_SIZE = new ImageSize(\"null\", 0, 0, 0, 0)", "var_name": "NULL_IMAGE_SIZE"}], "methods": [{"identifier": "createStitchedSlstrL1BFile", "parameters": "(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "modifiers": "public static", "return": "File", "signature": "File createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "full_signature": "public static File createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "class_method_signature": "SlstrPduStitcher.createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "createManifestFile", "parameters": "(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "modifiers": "private static", "return": "File", "signature": "File createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "full_signature": "private static File createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "class_method_signature": "SlstrPduStitcher.createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "testcase": false, "constructor": false}, {"identifier": "collectFiles", "parameters": "(List<String> ncFileNames, Document manifestDocument)", "modifiers": "static", "return": "void", "signature": "void collectFiles(List<String> ncFileNames, Document manifestDocument)", "full_signature": "static void collectFiles(List<String> ncFileNames, Document manifestDocument)", "class_method_signature": "SlstrPduStitcher.collectFiles(List<String> ncFileNames, Document manifestDocument)", "testcase": false, "constructor": false}, {"identifier": "createXmlDocument", "parameters": "(InputStream inputStream)", "modifiers": "static", "return": "Document", "signature": "Document createXmlDocument(InputStream inputStream)", "full_signature": "static Document createXmlDocument(InputStream inputStream)", "class_method_signature": "SlstrPduStitcher.createXmlDocument(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "createParentDirectoryNameOfStitchedFile", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "modifiers": "static", "return": "String", "signature": "String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "full_signature": "static String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "class_method_signature": "SlstrPduStitcher.createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "testcase": false, "constructor": false}, {"identifier": "extractStartTime", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions)", "modifiers": "private static", "return": "Date", "signature": "Date extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "full_signature": "private static Date extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "class_method_signature": "SlstrPduStitcher.extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "testcase": false, "constructor": false}, {"identifier": "extractStopTime", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions)", "modifiers": "private static", "return": "Date", "signature": "Date extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "full_signature": "private static Date extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "class_method_signature": "SlstrPduStitcher.extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "testcase": false, "constructor": false}, {"identifier": "decomposeSlstrName", "parameters": "(String slstrName)", "modifiers": "static", "return": "SlstrNameDecomposition", "signature": "SlstrNameDecomposition decomposeSlstrName(String slstrName)", "full_signature": "static SlstrNameDecomposition decomposeSlstrName(String slstrName)", "class_method_signature": "SlstrPduStitcher.decomposeSlstrName(String slstrName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/SlstrPduStitcher.java"}, "focal_method": {"identifier": "decomposeSlstrName", "parameters": "(String slstrName)", "modifiers": "static", "return": "SlstrNameDecomposition", "body": "static SlstrNameDecomposition decomposeSlstrName(String slstrName) throws PDUStitchingException {\n        final SlstrNameDecomposition slstrNameDecomposition = new SlstrNameDecomposition();\n        try {\n            slstrNameDecomposition.startTime = SLSTR_DATE_FORMAT_CONVERTER.parse(slstrName.substring(16, 31));\n            slstrNameDecomposition.stopTime = SLSTR_DATE_FORMAT_CONVERTER.parse(slstrName.substring(32, 47));\n        } catch (ConversionException e) {\n            throw new PDUStitchingException(e.getMessage());\n        }\n        slstrNameDecomposition.duration = slstrName.substring(64, 68);\n        slstrNameDecomposition.cycleNumber = slstrName.substring(69, 72);\n        slstrNameDecomposition.relativeOrbitNumber = slstrName.substring(73, 76);\n        slstrNameDecomposition.frameAlongTrackCoordinate = slstrName.substring(77, 81);\n        slstrNameDecomposition.fileGeneratingCentre = slstrName.substring(82, 85);\n        slstrNameDecomposition.platform = slstrName.substring(86, 87);\n        slstrNameDecomposition.timelinessOfProcessingWorkflow = slstrName.substring(88, 90);\n        slstrNameDecomposition.baselineCollectionOrDataUsage = slstrName.substring(91, 94);\n        return slstrNameDecomposition;\n    }", "signature": "SlstrNameDecomposition decomposeSlstrName(String slstrName)", "full_signature": "static SlstrNameDecomposition decomposeSlstrName(String slstrName)", "class_method_signature": "SlstrPduStitcher.decomposeSlstrName(String slstrName)", "testcase": false, "constructor": false, "invocations": ["parse", "substring", "parse", "substring", "getMessage", "substring", "substring", "substring", "substring", "substring", "substring", "substring", "substring"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}