{"test_class": {"identifier": "Swagger2MarkupConfigBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "swagger2markup/src/test/java/io/github/swagger2markup/builder/Swagger2MarkupConfigBuilderTest.java"}, "test_case": {"identifier": "testConfigOfProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigOfProperties() throws IOException {\n\n        Properties properties = new Properties();\n        properties.load(Swagger2MarkupConfigBuilderTest.class.getResourceAsStream(\"/config/config.properties\"));\n\n        Swagger2MarkupConfig config = new Swagger2MarkupConfigBuilder(properties).build();\n\n        assertThat(config.getAnchorPrefix()).isEqualTo(\"anchorPrefix\");\n        assertThat(config.getDefinitionOrderBy()).isEqualTo(OrderBy.AS_IS);\n        assertThat(config.getDefinitionOrdering()).isNull();\n        assertThat(config.getDefinitionsDocument()).isEqualTo(\"definitionsTest\");\n        assertThat(config.isGeneratedExamplesEnabled()).isTrue();\n        assertThat(config.isHostnameEnabled()).isEqualTo(false);\n        assertThat(config.isInlineSchemaEnabled()).isEqualTo(false);\n        assertThat(config.getInterDocumentCrossReferencesPrefix()).isEqualTo(\"xrefPrefix\");\n        assertThat(config.getMarkupLanguage().name()).isEqualTo(MarkupLanguage.MARKDOWN.name());\n        assertThat(config.getOperationOrderBy()).isEqualTo(OrderBy.NATURAL);\n        assertThat(config.getOperationOrdering()).isEqualTo(Swagger2MarkupConfigBuilder.OPERATION_PATH_NATURAL_ORDERING.compound(Swagger2MarkupConfigBuilder.OPERATION_METHOD_NATURAL_ORDERING));\n        assertThat(config.getLanguage()).isEqualTo(Language.RU);\n        assertThat(config.getOverviewDocument()).isEqualTo(\"overviewTest\");\n        assertThat(config.getParameterOrderBy()).isEqualTo(OrderBy.AS_IS);\n        assertThat(config.getParameterOrdering()).isNull();\n        assertThat(config.getPathsDocument()).isEqualTo(\"pathsTest\");\n        assertThat(config.getPathsGroupedBy()).isEqualTo(GroupBy.TAGS);\n        assertThat(config.getPropertyOrderBy()).isEqualTo(OrderBy.AS_IS);\n        assertThat(config.getPropertyOrdering()).isNull();\n        assertThat(config.getResponseOrderBy()).isEqualTo(OrderBy.AS_IS);\n        assertThat(config.getResponseOrdering()).isNull();\n        assertThat(config.getSecurityDocument()).isEqualTo(\"securityTest\");\n        assertThat(config.getSeparatedDefinitionsFolder()).isEqualTo(\"definitionsTest\");\n        assertThat(config.getSeparatedOperationsFolder()).isEqualTo(\"operationsTest\");\n        assertThat(config.isListDelimiterEnabled()).isEqualTo(true);\n        assertThat(config.getListDelimiter()).isEqualTo(Character.valueOf('|'));\n        assertThat(config.getTagOrderBy()).isEqualTo(OrderBy.AS_IS);\n        assertThat(config.getTagOrdering()).isNull();\n        assertThat(config.isFlatBodyEnabled()).isTrue();\n        assertThat(config.isPathSecuritySectionEnabled()).isFalse();\n        assertThat(config.isInterDocumentCrossReferencesEnabled()).isTrue();\n        assertThat(config.isSeparatedDefinitionsEnabled()).isTrue();\n        assertThat(config.isSeparatedOperationsEnabled()).isTrue();\n        assertThat(config.getExtensionsProperties().getKeys()).hasSize(5)\n        .containsOnly(\"uniqueId1.customProperty1\",\n                \"uniqueId1.customProperty2\",\n                \"uniqueId2.customProperty1\",\n                \"uniqueId2.customProperty2\",\n                \"uniqueId2.customPropertyList1\"\n                );\n        assertThat(config.getExtensionsProperties().getPathList(\"uniqueId2.customPropertyList1\")).hasSize(2)\n        .containsOnly(Paths.get(\"123\"), Paths.get(\"456\"));\n    }", "signature": "void testConfigOfProperties()", "full_signature": "@Test public void testConfigOfProperties()", "class_method_signature": "Swagger2MarkupConfigBuilderTest.testConfigOfProperties()", "testcase": true, "constructor": false, "invocations": ["load", "getResourceAsStream", "build", "isEqualTo", "assertThat", "getAnchorPrefix", "isEqualTo", "assertThat", "getDefinitionOrderBy", "isNull", "assertThat", "getDefinitionOrdering", "isEqualTo", "assertThat", "getDefinitionsDocument", "isTrue", "assertThat", "isGeneratedExamplesEnabled", "isEqualTo", "assertThat", "isHostnameEnabled", "isEqualTo", "assertThat", "isInlineSchemaEnabled", "isEqualTo", "assertThat", "getInterDocumentCrossReferencesPrefix", "isEqualTo", "assertThat", "name", "getMarkupLanguage", "name", "isEqualTo", "assertThat", "getOperationOrderBy", "isEqualTo", "assertThat", "getOperationOrdering", "compound", "isEqualTo", "assertThat", "getLanguage", "isEqualTo", "assertThat", "getOverviewDocument", "isEqualTo", "assertThat", "getParameterOrderBy", "isNull", "assertThat", "getParameterOrdering", "isEqualTo", "assertThat", "getPathsDocument", "isEqualTo", "assertThat", "getPathsGroupedBy", "isEqualTo", "assertThat", "getPropertyOrderBy", "isNull", "assertThat", "getPropertyOrdering", "isEqualTo", "assertThat", "getResponseOrderBy", "isNull", "assertThat", "getResponseOrdering", "isEqualTo", "assertThat", "getSecurityDocument", "isEqualTo", "assertThat", "getSeparatedDefinitionsFolder", "isEqualTo", "assertThat", "getSeparatedOperationsFolder", "isEqualTo", "assertThat", "isListDelimiterEnabled", "isEqualTo", "assertThat", "getListDelimiter", "valueOf", "isEqualTo", "assertThat", "getTagOrderBy", "isNull", "assertThat", "getTagOrdering", "isTrue", "assertThat", "isFlatBodyEnabled", "isFalse", "assertThat", "isPathSecuritySectionEnabled", "isTrue", "assertThat", "isInterDocumentCrossReferencesEnabled", "isTrue", "assertThat", "isSeparatedDefinitionsEnabled", "isTrue", "assertThat", "isSeparatedOperationsEnabled", "containsOnly", "hasSize", "assertThat", "getKeys", "getExtensionsProperties", "containsOnly", "hasSize", "assertThat", "getPathList", "getExtensionsProperties", "get", "get"]}, "focal_class": {"identifier": "Swagger2MarkupConfigBuilder", "superclass": "extends Schema2MarkupConfigBuilder<Swagger2MarkupConfigBuilder, Swagger2MarkupConfig>", "interfaces": "", "fields": [], "methods": [{"identifier": "Swagger2MarkupConfigBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder()", "full_signature": "public  Swagger2MarkupConfigBuilder()", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder()", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Properties properties)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Properties properties)", "full_signature": "public  Swagger2MarkupConfigBuilder(Properties properties)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Properties properties)", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Map<String, String> map)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Map<String, String> map)", "full_signature": "public  Swagger2MarkupConfigBuilder(Map<String, String> map)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Map<String, String> map)", "testcase": false, "constructor": true}, {"identifier": "Swagger2MarkupConfigBuilder", "parameters": "(Configuration configuration)", "modifiers": "public", "return": "", "signature": " Swagger2MarkupConfigBuilder(Configuration configuration)", "full_signature": "public  Swagger2MarkupConfigBuilder(Configuration configuration)", "class_method_signature": "Swagger2MarkupConfigBuilder.Swagger2MarkupConfigBuilder(Configuration configuration)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Swagger2MarkupConfig", "signature": "Swagger2MarkupConfig build()", "full_signature": "@Override public Swagger2MarkupConfig build()", "class_method_signature": "Swagger2MarkupConfigBuilder.build()", "testcase": false, "constructor": false}], "file": "swagger2markup/src/main/java/io/github/swagger2markup/builder/Swagger2MarkupConfigBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "()", "modifiers": "@Override public", "return": "Swagger2MarkupConfig", "body": "@Override\n    public Swagger2MarkupConfig build() {\n        buildNaturalOrdering();\n        return config;\n    }", "signature": "Swagger2MarkupConfig build()", "full_signature": "@Override public Swagger2MarkupConfig build()", "class_method_signature": "Swagger2MarkupConfigBuilder.build()", "testcase": false, "constructor": false, "invocations": ["buildNaturalOrdering"]}, "repository": {"repo_id": 30644093, "url": "https://github.com/Swagger2Markup/swagger2markup", "language": "Java", "is_fork": false, "fork_count": 340, "stargazer_count": 2130, "size": 5225, "license": "licensed"}}