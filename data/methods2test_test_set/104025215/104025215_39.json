{"test_class": {"identifier": "RxRoomTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JunitTaskExecutorRule mExecutor = new JunitTaskExecutorRule(1, false);", "modifier": "@Rule\n    public", "type": "JunitTaskExecutorRule", "declarator": "mExecutor = new JunitTaskExecutorRule(1, false)", "var_name": "mExecutor"}, {"original_string": "private RoomDatabase mDatabase;", "modifier": "private", "type": "RoomDatabase", "declarator": "mDatabase", "var_name": "mDatabase"}, {"original_string": "private InvalidationTracker mInvalidationTracker;", "modifier": "private", "type": "InvalidationTracker", "declarator": "mInvalidationTracker", "var_name": "mInvalidationTracker"}, {"original_string": "private List<InvalidationTracker.Observer> mAddedObservers = new ArrayList<>();", "modifier": "private", "type": "List<InvalidationTracker.Observer>", "declarator": "mAddedObservers = new ArrayList<>()", "var_name": "mAddedObservers"}], "file": "room/rxjava2/src/test/java/android/arch/persistence/room/RxRoomTest.java"}, "test_case": {"identifier": "basicAddRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void basicAddRemove() {\n        Flowable<Object> flowable = RxRoom.createFlowable(mDatabase, \"a\", \"b\");\n        verify(mInvalidationTracker, never()).addObserver(any(InvalidationTracker.Observer.class));\n        Disposable disposable = flowable.subscribe();\n        verify(mInvalidationTracker).addObserver(any(InvalidationTracker.Observer.class));\n        assertThat(mAddedObservers.size(), CoreMatchers.is(1));\n\n        InvalidationTracker.Observer observer = mAddedObservers.get(0);\n        disposable.dispose();\n\n        verify(mInvalidationTracker).removeObserver(observer);\n\n        disposable = flowable.subscribe();\n        verify(mInvalidationTracker, times(2))\n                .addObserver(any(InvalidationTracker.Observer.class));\n        assertThat(mAddedObservers.size(), CoreMatchers.is(2));\n        assertThat(mAddedObservers.get(1), CoreMatchers.not(CoreMatchers.sameInstance(observer)));\n        InvalidationTracker.Observer observer2 = mAddedObservers.get(1);\n        disposable.dispose();\n        verify(mInvalidationTracker).removeObserver(observer2);\n    }", "signature": "void basicAddRemove()", "full_signature": "@Test public void basicAddRemove()", "class_method_signature": "RxRoomTest.basicAddRemove()", "testcase": true, "constructor": false, "invocations": ["createFlowable", "addObserver", "verify", "never", "any", "subscribe", "addObserver", "verify", "any", "assertThat", "size", "is", "get", "dispose", "removeObserver", "verify", "subscribe", "addObserver", "verify", "times", "any", "assertThat", "size", "is", "assertThat", "get", "not", "sameInstance", "get", "dispose", "removeObserver", "verify"]}, "focal_class": {"identifier": "RxRoom", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Object NOTHING = new Object();", "modifier": "public static final", "type": "Object", "declarator": "NOTHING = new Object()", "var_name": "NOTHING"}, {"original_string": "private static Scheduler sAppToolkitIOScheduler = new Scheduler() {\n        @Override\n        public Worker createWorker() {\n            final AtomicBoolean mDisposed = new AtomicBoolean(false);\n            return new Worker() {\n                @Override\n                public Disposable schedule(@NonNull Runnable run, long delay,\n                        @NonNull TimeUnit unit) {\n                    DisposableRunnable disposable = new DisposableRunnable(run, mDisposed);\n                    AppToolkitTaskExecutor.getInstance().executeOnDiskIO(run);\n                    return disposable;\n                }\n\n                @Override\n                public void dispose() {\n                    mDisposed.set(true);\n                }\n\n                @Override\n                public boolean isDisposed() {\n                    return mDisposed.get();\n                }\n            };\n        }\n    };", "modifier": "private static", "type": "Scheduler", "declarator": "sAppToolkitIOScheduler = new Scheduler() {\n        @Override\n        public Worker createWorker() {\n            final AtomicBoolean mDisposed = new AtomicBoolean(false);\n            return new Worker() {\n                @Override\n                public Disposable schedule(@NonNull Runnable run, long delay,\n                        @NonNull TimeUnit unit) {\n                    DisposableRunnable disposable = new DisposableRunnable(run, mDisposed);\n                    AppToolkitTaskExecutor.getInstance().executeOnDiskIO(run);\n                    return disposable;\n                }\n\n                @Override\n                public void dispose() {\n                    mDisposed.set(true);\n                }\n\n                @Override\n                public boolean isDisposed() {\n                    return mDisposed.get();\n                }\n            };\n        }\n    }", "var_name": "sAppToolkitIOScheduler"}], "methods": [{"identifier": "createFlowable", "parameters": "(final RoomDatabase database,\n            final String... tableNames)", "modifiers": "public static", "return": "Flowable<Object>", "signature": "Flowable<Object> createFlowable(final RoomDatabase database,\n            final String... tableNames)", "full_signature": "public static Flowable<Object> createFlowable(final RoomDatabase database,\n            final String... tableNames)", "class_method_signature": "RxRoom.createFlowable(final RoomDatabase database,\n            final String... tableNames)", "testcase": false, "constructor": false}, {"identifier": "createFlowable", "parameters": "(final RoomDatabase database,\n            final String[] tableNames, final Callable<T> callable)", "modifiers": "@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) public static", "return": "Flowable<T>", "signature": "Flowable<T> createFlowable(final RoomDatabase database,\n            final String[] tableNames, final Callable<T> callable)", "full_signature": "@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) public static Flowable<T> createFlowable(final RoomDatabase database,\n            final String[] tableNames, final Callable<T> callable)", "class_method_signature": "RxRoom.createFlowable(final RoomDatabase database,\n            final String[] tableNames, final Callable<T> callable)", "testcase": false, "constructor": false}], "file": "room/rxjava2/src/main/java/android/arch/persistence/room/RxRoom.java"}, "focal_method": {"identifier": "createFlowable", "parameters": "(final RoomDatabase database,\n            final String... tableNames)", "modifiers": "public static", "return": "Flowable<Object>", "body": "public static Flowable<Object> createFlowable(final RoomDatabase database,\n            final String... tableNames) {\n        return Flowable.create(new FlowableOnSubscribe<Object>() {\n            @Override\n            public void subscribe(final FlowableEmitter<Object> emitter) throws Exception {\n                final InvalidationTracker.Observer observer = new InvalidationTracker.Observer(\n                        tableNames) {\n                    @Override\n                    public void onInvalidated(\n                            @android.support.annotation.NonNull Set<String> tables) {\n                        if (!emitter.isCancelled()) {\n                            emitter.onNext(NOTHING);\n                        }\n                    }\n                };\n                if (!emitter.isCancelled()) {\n                    database.getInvalidationTracker().addObserver(observer);\n                    emitter.setDisposable(Disposables.fromAction(new Action() {\n                        @Override\n                        public void run() throws Exception {\n                            database.getInvalidationTracker().removeObserver(observer);\n                        }\n                    }));\n                }\n\n                // emit once to avoid missing any data and also easy chaining\n                if (!emitter.isCancelled()) {\n                    emitter.onNext(NOTHING);\n                }\n            }\n        }, BackpressureStrategy.LATEST);\n    }", "signature": "Flowable<Object> createFlowable(final RoomDatabase database,\n            final String... tableNames)", "full_signature": "public static Flowable<Object> createFlowable(final RoomDatabase database,\n            final String... tableNames)", "class_method_signature": "RxRoom.createFlowable(final RoomDatabase database,\n            final String... tableNames)", "testcase": false, "constructor": false, "invocations": ["create", "isCancelled", "onNext", "isCancelled", "addObserver", "getInvalidationTracker", "setDisposable", "fromAction", "removeObserver", "getInvalidationTracker", "isCancelled", "onNext"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}