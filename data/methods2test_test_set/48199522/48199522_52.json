{"test_class": {"identifier": "DPGMMTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DPGMMTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DPGMMTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/mixture/DPGMMTest.java"}, "test_case": {"identifier": "bivariateWellSeparatedNormalTest", "parameters": "()", "modifiers": "@Test /** * Tests Bayesian Gaussian Mixture Model on a three well separated clusters. */ public", "return": "void", "body": "@Test\n    /**\n     * Tests Bayesian Gaussian Mixture Model on a three well separated clusters.\n     */\n    public void bivariateWellSeparatedNormalTest() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.RANDOM_SEED, 40)\n                .set(MacroBaseConf.TRANSFORM_TYPE, \"VARIATIONAL_DPMM\")\n                .set(GMMConf.DPM_TRUNCATING_PARAMETER, 10)\n                .set(ScoreDumper.SCORED_DATA_FILE, \"tmp.csv\")\n                .set(GMMConf.MAX_ITERATIONS_TO_CONVERGE, 15)\n                .set(GMMConf.DPM_CONCENTRATION_PARAMETER, 0.2)\n                .set(MacroBaseConf.DATA_LOADER_TYPE, \"CSV_LOADER\")\n                .set(MacroBaseConf.CSV_COMPRESSION, CSVIngester.Compression.GZIP)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/3gaussians-700points.csv.gz\")\n                .set(MacroBaseConf.METRICS, \"XX, YY\")\n                .set(MacroBaseConf.ATTRIBUTES, \"\");\n        List<Datum> data = conf.constructIngester().getStream().drain();\n        assertEquals(700, data.size());\n\n        DPGMM variationalDPGM = new DPGMM(conf);\n        variationalDPGM.train(data);\n\n        log.debug(\"clusters : {}\", variationalDPGM.getClusterCenters());\n        log.debug(\"weights: {}\", variationalDPGM.getClusterProportions());\n\n        double[][] boundaries = {\n                {-1, 13.01},\n                {-1, 13.01},\n        };\n\n        JsonUtils.dumpAsJson(variationalDPGM.getClusterCovariances(), \"DPGMMTest-bivariateWellSeparatedNormalTest-covariances.json\");\n        JsonUtils.dumpAsJson(variationalDPGM.getClusterCenters(), \"DPGMMTest-bivariateWellSeparatedNormalTest-means.json\");\n        JsonUtils.dumpAsJson(variationalDPGM.getClusterProportions(), \"DPGMMTest-bivariateWellSeparatedNormalTest-weights.json\");\n\n        conf.set(GMMConf.SCORE_DUMP_FILE_CONFIG_PARAM, \"3gaussians-700-grid.json\");\n        ScoreDumper dumper = new ScoreDumper(conf);\n        dumper.dumpScores(variationalDPGM, boundaries, 0.05);\n\n        conf.set(GMMConf.SCORE_DUMP_FILE_CONFIG_PARAM, \"3gaussians-700-data.json\");\n        dumper = new ScoreDumper(conf);\n        dumper.dumpScores(variationalDPGM, data);\n\n\n        double[][] clusterMeans = {\n                {2, 11},\n                {1, 1},\n                {10, 3},\n        };\n        double[] clusterPoints = {\n                200,\n                200,\n                300,\n        };\n        List<RealVector> vectorClusterMeans = new ArrayList<>(3);\n        for (int k = 0; k < 3; k++) {\n            vectorClusterMeans.add(new ArrayRealVector(clusterMeans[k]));\n        }\n\n        List<RealVector> calculatedCenters = variationalDPGM.getClusterCenters();\n        double[] weights = variationalDPGM.getClusterProportions();\n\n        List<List<Integer>> lists = new ArrayList<>();\n        lists.add(new ArrayList<>());\n        lists.add(new ArrayList<>());\n        lists.add(new ArrayList<>());\n\n        double[] inferedWeights = new double[3];\n        for (int i = 0 ; i < calculatedCenters.size(); i++ ) {\n            if (weights[i] < 0.001) {\n                continue;\n            }\n            for (int j=0 ; j < 3 ; j++) {\n                if (calculatedCenters.get(i).getDistance(vectorClusterMeans.get(j)) < 2) {\n                    log.debug(\"identified cluster {} to be close to {} (weight = {})\", calculatedCenters.get(i), vectorClusterMeans.get(j), weights[i]);\n                    inferedWeights[j] += weights[i];\n                    lists.get(j).add(i);\n                    break;\n                }\n            }\n        }\n\n        for (int j=0 ; j < 3 ; j++) {\n            assertEquals(clusterPoints[j], inferedWeights[j] * 700, 3);\n        }\n        // Make sure centers belong to only one cluster.\n        double[] maxProbas = {0, 0, 0};\n        for (int i = 0; i < 3; i++) {\n            double[] probas = variationalDPGM.getClusterProbabilities(new Datum(new ArrayList<Integer>(), vectorClusterMeans.get(i)));\n            log.debug(\"probas = {}\", probas);\n            for (int j=0; j< 3; j++) {\n                double p = 0;\n                for (int ii : lists.get(j)) {\n                    p += probas[ii];\n                }\n                maxProbas[j] = Math.max(p, maxProbas[j]);\n            }\n        }\n        for (int j=0; j< 3; j++) {\n            assertEquals(1, maxProbas[j], 0.01);\n        }\n    }", "signature": "void bivariateWellSeparatedNormalTest()", "full_signature": "@Test /** * Tests Bayesian Gaussian Mixture Model on a three well separated clusters. */ public void bivariateWellSeparatedNormalTest()", "class_method_signature": "DPGMMTest.bivariateWellSeparatedNormalTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "drain", "getStream", "constructIngester", "assertEquals", "size", "train", "debug", "getClusterCenters", "debug", "getClusterProportions", "dumpAsJson", "getClusterCovariances", "dumpAsJson", "getClusterCenters", "dumpAsJson", "getClusterProportions", "set", "dumpScores", "set", "dumpScores", "add", "getClusterCenters", "getClusterProportions", "add", "add", "add", "size", "getDistance", "get", "get", "debug", "get", "get", "add", "get", "assertEquals", "getClusterProbabilities", "get", "debug", "get", "max", "assertEquals"]}, "focal_class": {"identifier": "DPGMM", "superclass": "extends VarGMM", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DPGMM.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DPGMM.class)", "var_name": "log"}, {"original_string": "protected DPComponents mixingComponents;", "modifier": "protected", "type": "DPComponents", "declarator": "mixingComponents", "var_name": "mixingComponents"}, {"original_string": "protected final int T;", "modifier": "protected final", "type": "int", "declarator": "T", "var_name": "T"}], "methods": [{"identifier": "DPGMM", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " DPGMM(MacroBaseConf conf)", "full_signature": "public  DPGMM(MacroBaseConf conf)", "class_method_signature": "DPGMM.DPGMM(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "trainTest", "parameters": "(List<Datum> trainData, List<Datum> testData)", "modifiers": "public", "return": "void", "signature": "void trainTest(List<Datum> trainData, List<Datum> testData)", "full_signature": "public void trainTest(List<Datum> trainData, List<Datum> testData)", "class_method_signature": "DPGMM.trainTest(List<Datum> trainData, List<Datum> testData)", "testcase": false, "constructor": false}, {"identifier": "getClusterProportions", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getClusterProportions()", "full_signature": "@Override public double[] getClusterProportions()", "class_method_signature": "DPGMM.getClusterProportions()", "testcase": false, "constructor": false}, {"identifier": "getNormClusterContrib", "parameters": "()", "modifiers": "@Override protected", "return": "double[]", "signature": "double[] getNormClusterContrib()", "full_signature": "@Override protected double[] getNormClusterContrib()", "class_method_signature": "DPGMM.getNormClusterContrib()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/mixture/DPGMM.java"}, "focal_method": {"identifier": "getClusterProportions", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] getClusterProportions() {\n        return mixingComponents.getNormalizedClusterProportions();\n    }", "signature": "double[] getClusterProportions()", "full_signature": "@Override public double[] getClusterProportions()", "class_method_signature": "DPGMM.getClusterProportions()", "testcase": false, "constructor": false, "invocations": ["getNormalizedClusterProportions"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}