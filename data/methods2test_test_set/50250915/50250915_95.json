{"test_class": {"identifier": "JiraSCMListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JenkinsRule j = new JenkinsRule();", "modifier": "@Rule\n    public", "type": "JenkinsRule", "declarator": "j = new JenkinsRule()", "var_name": "j"}], "file": "blueocean-jira/src/test/java/io/jenkins/blueocean/service/embedded/jira/JiraSCMListenerTest.java"}, "test_case": {"identifier": "constructJQLQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void constructJQLQuery() throws Exception {\n        Assert.assertEquals(\"key in ('JENKINS-123')\",\n                            JiraSCMListener.constructJQLQuery(Collections.singletonList(\"JENKINS-123\")));\n        Assert.assertEquals(\"key in ('JENKINS-123','FOO-123','VIVEK-123')\",\n                            JiraSCMListener.constructJQLQuery( Arrays.asList(\"JENKINS-123\", \"FOO-123\", \"VIVEK-123\")));\n    }", "signature": "void constructJQLQuery()", "full_signature": "@Test public void constructJQLQuery()", "class_method_signature": "JiraSCMListenerTest.constructJQLQuery()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "constructJQLQuery", "singletonList", "assertEquals", "constructJQLQuery", "asList"]}, "focal_class": {"identifier": "JiraSCMListener", "superclass": "extends SCMListener", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger( JiraSCMListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger( JiraSCMListener.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "onChangeLogParsed", "parameters": "(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "modifiers": "@Override public", "return": "void", "signature": "void onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "full_signature": "@Override public void onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "class_method_signature": "JiraSCMListener.onChangeLogParsed(Run<?, ?> run, SCM scm, TaskListener listener, ChangeLogSet<?> changelog)", "testcase": false, "constructor": false}, {"identifier": "constructJQLQuery", "parameters": "( Collection<String> issueKeys)", "modifiers": "static", "return": "String", "signature": "String constructJQLQuery( Collection<String> issueKeys)", "full_signature": "static String constructJQLQuery( Collection<String> issueKeys)", "class_method_signature": "JiraSCMListener.constructJQLQuery( Collection<String> issueKeys)", "testcase": false, "constructor": false}, {"identifier": "getIssueKeys", "parameters": "(ChangeLogSet<?> changelog, Pattern issuePattern)", "modifiers": "static", "return": "Collection<String>", "signature": "Collection<String> getIssueKeys(ChangeLogSet<?> changelog, Pattern issuePattern)", "full_signature": "static Collection<String> getIssueKeys(ChangeLogSet<?> changelog, Pattern issuePattern)", "class_method_signature": "JiraSCMListener.getIssueKeys(ChangeLogSet<?> changelog, Pattern issuePattern)", "testcase": false, "constructor": false}], "file": "blueocean-jira/src/main/java/io/jenkins/blueocean/service/embedded/jira/JiraSCMListener.java"}, "focal_method": {"identifier": "constructJQLQuery", "parameters": "( Collection<String> issueKeys)", "modifiers": "static", "return": "String", "body": "static String constructJQLQuery( Collection<String> issueKeys) {\n        StringBuilder jql = new StringBuilder();\n        jql.append(\"key in (\");\n        Iterator<String> iterator = issueKeys.iterator();\n        while ( iterator.hasNext() ) {\n            String key = iterator.next();\n            jql.append(\"'\");\n            jql.append(key);\n            jql.append(\"'\");\n            if (iterator.hasNext()) {\n                jql.append(\",\");\n            }\n        }\n        jql.append(\")\");\n        return jql.toString();\n    }", "signature": "String constructJQLQuery( Collection<String> issueKeys)", "full_signature": "static String constructJQLQuery( Collection<String> issueKeys)", "class_method_signature": "JiraSCMListener.constructJQLQuery( Collection<String> issueKeys)", "testcase": false, "constructor": false, "invocations": ["append", "iterator", "hasNext", "next", "append", "append", "append", "hasNext", "append", "append", "toString"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}