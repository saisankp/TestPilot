{"test_class": {"identifier": "InteractionRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private EventContext<org.jboss.arquillian.test.spi.event.suite.Test> eventContext;", "modifier": "@Mock\n    private", "type": "EventContext<org.jboss.arquillian.test.spi.event.suite.Test>", "declarator": "eventContext", "var_name": "eventContext"}, {"original_string": "@Mock\n    private org.jboss.arquillian.test.spi.event.suite.Test test;", "modifier": "@Mock\n    private", "type": "org.jboss.arquillian.test.spi.event.suite.Test", "declarator": "test", "var_name": "test"}, {"original_string": "@Mock\n    private Target target;", "modifier": "@Mock\n    private", "type": "Target", "declarator": "target", "var_name": "target"}, {"original_string": "@Mock\n    private RequestResponseInteraction requestResponseInteraction;", "modifier": "@Mock\n    private", "type": "RequestResponseInteraction", "declarator": "requestResponseInteraction", "var_name": "requestResponseInteraction"}, {"original_string": "@Mock\n    private Instance algeronConfiguration;", "modifier": "@Mock\n    private", "type": "Instance", "declarator": "algeronConfiguration", "var_name": "algeronConfiguration"}, {"original_string": "private Instance<Pacts> pactsInstance;", "modifier": "private", "type": "Instance<Pacts>", "declarator": "pactsInstance", "var_name": "pactsInstance"}], "file": "pact/provider/core/src/test/java/org/arquillian/algeron/pact/provider/core/InteractionRunnerTest.java"}, "test_case": {"identifier": "should_execute_test_for_each_interaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_execute_test_for_each_interaction() {\n        when(test.getTestClass()).thenReturn(new TestClass(PactProvider.class));\n        PactProvider pactDefinition = new PactProvider();\n        when(test.getTestInstance()).thenReturn(pactDefinition);\n\n        InteractionRunner interactionRunner = new InteractionRunner();\n        interactionRunner.pactsInstance = pactsInstance;\n        interactionRunner.targetInstance = () -> target;\n        interactionRunner.executePacts(eventContext);\n\n        assertThat(pactDefinition.consumer).isEqualTo(new Consumer(\"planets_consumer\"));\n        assertThat(pactDefinition.interaction).isNotNull();\n\n        verify(eventContext, times(2)).proceed();\n    }", "signature": "void should_execute_test_for_each_interaction()", "full_signature": "@Test public void should_execute_test_for_each_interaction()", "class_method_signature": "InteractionRunnerTest.should_execute_test_for_each_interaction()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getTestClass", "thenReturn", "when", "getTestInstance", "executePacts", "isEqualTo", "assertThat", "isNotNull", "assertThat", "proceed", "verify", "times"]}, "focal_class": {"identifier": "InteractionRunner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = Logger.getLogger(InteractionRunner.class.getName());", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(InteractionRunner.class.getName())", "var_name": "logger"}, {"original_string": "@Inject\n    Instance<Pacts> pactsInstance;", "modifier": "@Inject", "type": "Instance<Pacts>", "declarator": "pactsInstance", "var_name": "pactsInstance"}, {"original_string": "@Inject\n    Instance<Target> targetInstance;", "modifier": "@Inject", "type": "Instance<Target>", "declarator": "targetInstance", "var_name": "targetInstance"}], "methods": [{"identifier": "executePacts", "parameters": "(@Observes EventContext<Test> test)", "modifiers": "public", "return": "void", "signature": "void executePacts(@Observes EventContext<Test> test)", "full_signature": "public void executePacts(@Observes EventContext<Test> test)", "class_method_signature": "InteractionRunner.executePacts(@Observes EventContext<Test> test)", "testcase": false, "constructor": false}, {"identifier": "executePacts", "parameters": "(EventContext<Test> test, final Pacts pacts, final Field interactionField,\n        final Field consumerField)", "modifiers": "private", "return": "void", "signature": "void executePacts(EventContext<Test> test, final Pacts pacts, final Field interactionField,\n        final Field consumerField)", "full_signature": "private void executePacts(EventContext<Test> test, final Pacts pacts, final Field interactionField,\n        final Field consumerField)", "class_method_signature": "InteractionRunner.executePacts(EventContext<Test> test, final Pacts pacts, final Field interactionField,\n        final Field consumerField)", "testcase": false, "constructor": false}, {"identifier": "setField", "parameters": "(Object testInstance, Field fieldTarget, Object pact)", "modifiers": "private", "return": "void", "signature": "void setField(Object testInstance, Field fieldTarget, Object pact)", "full_signature": "private void setField(Object testInstance, Field fieldTarget, Object pact)", "class_method_signature": "InteractionRunner.setField(Object testInstance, Field fieldTarget, Object pact)", "testcase": false, "constructor": false}, {"identifier": "validateState", "parameters": "(final TestClass testClass, final List<Throwable> errors)", "modifiers": "private", "return": "void", "signature": "void validateState(final TestClass testClass, final List<Throwable> errors)", "full_signature": "private void validateState(final TestClass testClass, final List<Throwable> errors)", "class_method_signature": "InteractionRunner.validateState(final TestClass testClass, final List<Throwable> errors)", "testcase": false, "constructor": false}, {"identifier": "validateTargetRequestFilters", "parameters": "(final TestClass testClass, final List<Throwable> errors)", "modifiers": "private", "return": "void", "signature": "void validateTargetRequestFilters(final TestClass testClass, final List<Throwable> errors)", "full_signature": "private void validateTargetRequestFilters(final TestClass testClass, final List<Throwable> errors)", "class_method_signature": "InteractionRunner.validateTargetRequestFilters(final TestClass testClass, final List<Throwable> errors)", "testcase": false, "constructor": false}, {"identifier": "validateTestTarget", "parameters": "(TestClass testClass, final List<Throwable> errors)", "modifiers": "private", "return": "void", "signature": "void validateTestTarget(TestClass testClass, final List<Throwable> errors)", "full_signature": "private void validateTestTarget(TestClass testClass, final List<Throwable> errors)", "class_method_signature": "InteractionRunner.validateTestTarget(TestClass testClass, final List<Throwable> errors)", "testcase": false, "constructor": false}, {"identifier": "validatePublicVoidMethods", "parameters": "(Method method, final List<Throwable> errors)", "modifiers": "private", "return": "void", "signature": "void validatePublicVoidMethods(Method method, final List<Throwable> errors)", "full_signature": "private void validatePublicVoidMethods(Method method, final List<Throwable> errors)", "class_method_signature": "InteractionRunner.validatePublicVoidMethods(Method method, final List<Throwable> errors)", "testcase": false, "constructor": false}, {"identifier": "validateAndGetResourceField", "parameters": "(TestClass testClass, Class<?> fieldType,\n        Class<? extends Annotation> annotation, List<Throwable> errors)", "modifiers": "private", "return": "Field", "signature": "Field validateAndGetResourceField(TestClass testClass, Class<?> fieldType,\n        Class<? extends Annotation> annotation, List<Throwable> errors)", "full_signature": "private Field validateAndGetResourceField(TestClass testClass, Class<?> fieldType,\n        Class<? extends Annotation> annotation, List<Throwable> errors)", "class_method_signature": "InteractionRunner.validateAndGetResourceField(TestClass testClass, Class<?> fieldType,\n        Class<? extends Annotation> annotation, List<Throwable> errors)", "testcase": false, "constructor": false}, {"identifier": "executeStateChanges", "parameters": "(final RequestResponseInteraction interaction, final TestClass testClass,\n        final Object target)", "modifiers": "protected", "return": "void", "signature": "void executeStateChanges(final RequestResponseInteraction interaction, final TestClass testClass,\n        final Object target)", "full_signature": "protected void executeStateChanges(final RequestResponseInteraction interaction, final TestClass testClass,\n        final Object target)", "class_method_signature": "InteractionRunner.executeStateChanges(final RequestResponseInteraction interaction, final TestClass testClass,\n        final Object target)", "testcase": false, "constructor": false}, {"identifier": "executeStateMethodWithRegExp", "parameters": "(Method stateMethod, ProviderState state, Object target)", "modifiers": "private", "return": "void", "signature": "void executeStateMethodWithRegExp(Method stateMethod, ProviderState state, Object target)", "full_signature": "private void executeStateMethodWithRegExp(Method stateMethod, ProviderState state, Object target)", "class_method_signature": "InteractionRunner.executeStateMethodWithRegExp(Method stateMethod, ProviderState state, Object target)", "testcase": false, "constructor": false}, {"identifier": "isStateMethodWithMapParameter", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean isStateMethodWithMapParameter(Method method)", "full_signature": "private boolean isStateMethodWithMapParameter(Method method)", "class_method_signature": "InteractionRunner.isStateMethodWithMapParameter(Method method)", "testcase": false, "constructor": false}, {"identifier": "executeMethod", "parameters": "(Method method, Object target, Object... params)", "modifiers": "private", "return": "void", "signature": "void executeMethod(Method method, Object target, Object... params)", "full_signature": "private void executeMethod(Method method, Object target, Object... params)", "class_method_signature": "InteractionRunner.executeMethod(Method method, Object target, Object... params)", "testcase": false, "constructor": false}, {"identifier": "getFieldsWithAnnotation", "parameters": "(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "modifiers": "private", "return": "List<Field>", "signature": "List<Field> getFieldsWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "full_signature": "private List<Field> getFieldsWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "class_method_signature": "InteractionRunner.getFieldsWithAnnotation(final Class<?> source,\n        final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "isPublic", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean isPublic(Method method)", "full_signature": "private boolean isPublic(Method method)", "class_method_signature": "InteractionRunner.isPublic(Method method)", "testcase": false, "constructor": false}, {"identifier": "returnsVoid", "parameters": "(Method method)", "modifiers": "private", "return": "boolean", "signature": "boolean returnsVoid(Method method)", "full_signature": "private boolean returnsVoid(Method method)", "class_method_signature": "InteractionRunner.returnsVoid(Method method)", "testcase": false, "constructor": false}], "file": "pact/provider/core/src/main/java/org/arquillian/algeron/pact/provider/core/InteractionRunner.java"}, "focal_method": {"identifier": "executePacts", "parameters": "(@Observes EventContext<Test> test)", "modifiers": "public", "return": "void", "body": "public void executePacts(@Observes EventContext<Test> test) {\n        final Pacts pacts = pactsInstance.get();\n        if (pacts == null) {\n            test.proceed();\n            return;\n        }\n\n        TestClass testClass = test.getEvent().getTestClass();\n\n        final List<Throwable> errors = new ArrayList<>();\n        validateState(testClass, errors);\n        validateTargetRequestFilters(testClass, errors);\n        validateTestTarget(testClass, errors);\n\n        Field interactionField =\n            validateAndGetResourceField(testClass, RequestResponseInteraction.class, CurrentInteraction.class, errors);\n        Field consumerField = validateAndGetResourceField(testClass, Consumer.class, CurrentConsumer.class, errors);\n\n        if (errors.size() != 0) {\n            String errorMessage = errors.stream()\n                .map(Throwable::getMessage)\n                .collect(Collectors.joining(\" * \"));\n            throw new IllegalArgumentException(errorMessage);\n        }\n\n        executePacts(test, pacts, interactionField, consumerField);\n    }", "signature": "void executePacts(@Observes EventContext<Test> test)", "full_signature": "public void executePacts(@Observes EventContext<Test> test)", "class_method_signature": "InteractionRunner.executePacts(@Observes EventContext<Test> test)", "testcase": false, "constructor": false, "invocations": ["get", "proceed", "getTestClass", "getEvent", "validateState", "validateTargetRequestFilters", "validateTestTarget", "validateAndGetResourceField", "validateAndGetResourceField", "size", "collect", "map", "stream", "joining", "executePacts"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}