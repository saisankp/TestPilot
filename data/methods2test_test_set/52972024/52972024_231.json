{"test_class": {"identifier": "FieldNamePluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FieldNamePlugin plugin;", "modifier": "private", "type": "FieldNamePlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}, {"original_string": "private String bootstrapArgument;", "modifier": "private", "type": "String", "declarator": "bootstrapArgument", "var_name": "bootstrapArgument"}], "file": "CoreFeatures/IObject-plugins/PluginFieldName/src/test/java/info/smart_tools/smartactors/iobject_plugins/fieldname_plugin/FieldNamePluginTest.java"}, "test_case": {"identifier": "MustInCorrectExecuteActionWhenIOCRegisterThrowException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustInCorrectExecuteActionWhenIOCRegisterThrowException () throws Exception {\n\n        BootstrapItem item = mock(BootstrapItem.class);\n        whenNew(BootstrapItem.class).withArguments(bootstrapArgument).thenReturn(item);\n\n        when(item.after(anyString())).thenReturn(item);\n\n        plugin.load();\n\n        verifyNew(BootstrapItem.class).withArguments(bootstrapArgument);\n\n        verify(item).after(\"IOC\");\n\n        ArgumentCaptor<IPoorAction> iPoorActionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n        verify(item).process(iPoorActionArgumentCaptor.capture());\n\n        verify(bootstrap).add(item);\n\n        IKey fieldNameKey = mock(IKey.class);\n        when(Keys.getOrAdd(FieldName.class.getCanonicalName())).thenReturn(fieldNameKey);\n\n        ArgumentCaptor<ResolveByNameIocStrategy> resolveByNameIocStrategyArgumentCaptor =\n                ArgumentCaptor.forClass(ResolveByNameIocStrategy.class);\n\n        doThrow(new RegistrationException(\"\")).when(IOC.class);\n        IOC.register(eq(fieldNameKey), any());\n        try {\n            iPoorActionArgumentCaptor.getValue().execute();\n        } catch (ActionExecuteException e) {\n\n            verifyStatic();\n            Keys.getOrAdd(FieldName.class.getCanonicalName());\n\n            verifyStatic();\n            IOC.register(eq(fieldNameKey), resolveByNameIocStrategyArgumentCaptor.capture());\n\n            String exampleFieldName = \"exampleField\";\n            FieldName newFieldName = mock(FieldName.class);\n            whenNew(FieldName.class).withArguments(exampleFieldName).thenReturn(newFieldName);\n\n            assertTrue(\"Must return correct value\",\n                    resolveByNameIocStrategyArgumentCaptor.getValue().resolve(exampleFieldName) == newFieldName);\n\n            verifyNew(FieldName.class).withArguments(exampleFieldName);\n            return;\n        }\n        assertTrue(\"Must throw exception\", false);\n    }", "signature": "void MustInCorrectExecuteActionWhenIOCRegisterThrowException()", "full_signature": "@Test public void MustInCorrectExecuteActionWhenIOCRegisterThrowException()", "class_method_signature": "FieldNamePluginTest.MustInCorrectExecuteActionWhenIOCRegisterThrowException()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "anyString", "load", "withArguments", "verifyNew", "after", "verify", "forClass", "process", "verify", "capture", "add", "verify", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "forClass", "when", "doThrow", "register", "eq", "any", "execute", "getValue", "verifyStatic", "getOrAdd", "getCanonicalName", "verifyStatic", "register", "eq", "capture", "mock", "thenReturn", "withArguments", "whenNew", "assertTrue", "resolve", "getValue", "withArguments", "verifyNew", "assertTrue"]}, "focal_class": {"identifier": "FieldNamePlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "FieldNamePlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " FieldNamePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  FieldNamePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "FieldNamePlugin.FieldNamePlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "FieldNamePlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/IObject-plugins/PluginFieldName/src/main/java/info/smart_tools/smartactors/iobject_plugins/fieldname_plugin/FieldNamePlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n\n            IBootstrapItem<String> item = new BootstrapItem(\"FieldNamePlugin\");\n\n            item\n                    .after(\"IOC\")\n                    .process(() -> {\n                        try {\n                            IKey iFieldNameKey = Keys.getOrAdd(FieldName.class.getCanonicalName());\n                            IOC.register(iFieldNameKey,\n                                    new ResolveByNameIocStrategy(\n                                            (args) -> {\n                                                try {\n                                                    String nameOfFieldName = (String) args[0];\n                                                    return new FieldName(nameOfFieldName);\n                                                } catch (ClassCastException e) {\n                                                    throw new RuntimeException(\"Can't cast object to String: \" + args[0],\n                                                            e);\n                                                } catch (ArrayIndexOutOfBoundsException e) {\n                                                    throw new RuntimeException(\n                                                            \"Can't get args: args must contain one or more elements \" +\n                                                                    \"and first element must be String\",\n                                                            e);\n                                                } catch (InvalidArgumentException e) {\n                                                    throw new RuntimeException(\n                                                            \"Can't create new field name with this name: \" + args[0],\n                                                            e);\n                                                }\n                                            }\n                                    )\n                            );\n                            IOC.register(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"),\n                                    new ResolveByNameIocStrategy(\n                                            (args) -> {\n                                                try {\n                                                    String nameOfFieldName = (String) args[0];\n                                                    return new FieldName(nameOfFieldName);\n                                                } catch (ClassCastException e) {\n                                                    throw new RuntimeException(\"Can't cast object to String: \" + args[0],\n                                                            e);\n                                                } catch (ArrayIndexOutOfBoundsException e) {\n                                                    throw new RuntimeException(\n                                                            \"Can't get args: args must contain one or more elements \" +\n                                                                    \"and first element must be String\",\n                                                            e);\n                                                } catch (InvalidArgumentException e) {\n                                                    throw new RuntimeException(\n                                                            \"Can't create new field name with this name: \" + args[0],\n                                                            e);\n                                                }\n                                            }\n                                    )\n                            );\n                        } catch (ResolutionException e) {\n                            throw new ActionExecuteException(\"FieldName plugin can't load: can't get FieldName key\");\n                        } catch (InvalidArgumentException e) {\n                            throw new ActionExecuteException(\"FieldName plugin can't load: can't create strategy\");\n                        } catch (RegistrationException e) {\n                            throw new ActionExecuteException(\"FieldName plugin can't load: can't register new strategy\");\n                        }\n                    });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't get BootstrapItem from one of reason\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "FieldNamePlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "getOrAdd", "getCanonicalName", "register", "register", "getOrAdd", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}