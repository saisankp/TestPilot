{"test_class": {"identifier": "ModifyAttributesOperationRecorderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LdapOperations ldapOperationsMock;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperationsMock", "var_name": "ldapOperationsMock"}, {"original_string": "private IncrementalAttributesMapper attributesMapperMock;", "modifier": "private", "type": "IncrementalAttributesMapper", "declarator": "attributesMapperMock", "var_name": "attributesMapperMock"}, {"original_string": "private ModifyAttributesOperationRecorder tested;", "modifier": "private", "type": "ModifyAttributesOperationRecorder", "declarator": "tested", "var_name": "tested"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/ModifyAttributesOperationRecorderTest.java"}, "test_case": {"identifier": "testRecordOperation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRecordOperation() {\n        final ModificationItem incomingItem = new ModificationItem(\n                DirContext.ADD_ATTRIBUTE, new BasicAttribute(\"attribute1\"));\n        ModificationItem[] incomingMods = new ModificationItem[]{incomingItem};\n        final ModificationItem compensatingItem = new ModificationItem(\n                DirContext.ADD_ATTRIBUTE, new BasicAttribute(\"attribute2\"));\n\n        final Attributes expectedAttributes = new BasicAttributes();\n\n        tested = new ModifyAttributesOperationRecorder(ldapOperationsMock) {\n            IncrementalAttributesMapper getAttributesMapper(String[] attributeNames) {\n                return attributesMapperMock;\n            }\n\n            protected ModificationItem getCompensatingModificationItem(\n                    Attributes originalAttributes,\n                    ModificationItem modificationItem) {\n                assertThat(originalAttributes).isSameAs(expectedAttributes);\n                assertThat(modificationItem).isSameAs(incomingItem);\n                return compensatingItem;\n            }\n        };\n\n        LdapName expectedName = LdapUtils.newLdapName(\"cn=john doe\");\n\n        when(attributesMapperMock.hasMore()).thenReturn(true, false);\n        when(attributesMapperMock.getAttributesForLookup())\n                .thenReturn(new String[]{\"attribute1\"});\n        when(ldapOperationsMock.lookup(expectedName, new String[]{\"attribute1\"}, attributesMapperMock))\n                .thenReturn(expectedAttributes);\n        when(attributesMapperMock.getCollectedAttributes())\n                .thenReturn(expectedAttributes);\n\n        // Perform test\n        CompensatingTransactionOperationExecutor operation = tested\n                .recordOperation(new Object[]{expectedName, incomingMods});\n\n        // Verify outcome\n        assertThat(operation instanceof ModifyAttributesOperationExecutor).isTrue();\n        ModifyAttributesOperationExecutor rollbackOperation = (ModifyAttributesOperationExecutor) operation;\n        assertThat(rollbackOperation.getDn()).isSameAs(expectedName);\n        assertThat(rollbackOperation.getLdapOperations()).isSameAs(ldapOperationsMock);\n        ModificationItem[] actualModifications = rollbackOperation.getActualModifications();\n        assertThat(actualModifications.length).isEqualTo(incomingMods.length);\n        assertThat(actualModifications[0]).isEqualTo(incomingMods[0]);\n        assertThat(rollbackOperation.getCompensatingModifications().length).isEqualTo(1);\n        assertThat(rollbackOperation.getCompensatingModifications()[0]).isSameAs(compensatingItem);\n    }", "signature": "void testRecordOperation()", "full_signature": "@Test public void testRecordOperation()", "class_method_signature": "ModifyAttributesOperationRecorderTest.testRecordOperation()", "testcase": true, "constructor": false, "invocations": ["isSameAs", "assertThat", "isSameAs", "assertThat", "newLdapName", "thenReturn", "when", "hasMore", "thenReturn", "when", "getAttributesForLookup", "thenReturn", "when", "lookup", "thenReturn", "when", "getCollectedAttributes", "recordOperation", "isTrue", "assertThat", "isSameAs", "assertThat", "getDn", "isSameAs", "assertThat", "getLdapOperations", "getActualModifications", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "getCompensatingModifications", "isSameAs", "assertThat", "getCompensatingModifications"]}, "focal_class": {"identifier": "ModifyAttributesOperationRecorder", "superclass": "", "interfaces": "implements\n        CompensatingTransactionOperationRecorder", "fields": [{"original_string": "private LdapOperations ldapOperations;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperations", "var_name": "ldapOperations"}], "methods": [{"identifier": "ModifyAttributesOperationRecorder", "parameters": "(LdapOperations ldapOperations)", "modifiers": "public", "return": "", "signature": " ModifyAttributesOperationRecorder(LdapOperations ldapOperations)", "full_signature": "public  ModifyAttributesOperationRecorder(LdapOperations ldapOperations)", "class_method_signature": "ModifyAttributesOperationRecorder.ModifyAttributesOperationRecorder(LdapOperations ldapOperations)", "testcase": false, "constructor": true}, {"identifier": "recordOperation", "parameters": "(\n            Object[] args)", "modifiers": "public", "return": "CompensatingTransactionOperationExecutor", "signature": "CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "full_signature": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "class_method_signature": "ModifyAttributesOperationRecorder.recordOperation(\n            Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getAttributesMapper", "parameters": "(String[] attributeNames)", "modifiers": "", "return": "IncrementalAttributesMapper<?>", "signature": "IncrementalAttributesMapper<?> getAttributesMapper(String[] attributeNames)", "full_signature": " IncrementalAttributesMapper<?> getAttributesMapper(String[] attributeNames)", "class_method_signature": "ModifyAttributesOperationRecorder.getAttributesMapper(String[] attributeNames)", "testcase": false, "constructor": false}, {"identifier": "getCompensatingModificationItem", "parameters": "(\n            Attributes originalAttributes, ModificationItem modificationItem)", "modifiers": "protected", "return": "ModificationItem", "signature": "ModificationItem getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "full_signature": "protected ModificationItem getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "class_method_signature": "ModifyAttributesOperationRecorder.getCompensatingModificationItem(\n            Attributes originalAttributes, ModificationItem modificationItem)", "testcase": false, "constructor": false}, {"identifier": "getLdapOperations", "parameters": "()", "modifiers": "", "return": "LdapOperations", "signature": "LdapOperations getLdapOperations()", "full_signature": " LdapOperations getLdapOperations()", "class_method_signature": "ModifyAttributesOperationRecorder.getLdapOperations()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/ModifyAttributesOperationRecorder.java"}, "focal_method": {"identifier": "recordOperation", "parameters": "(\n            Object[] args)", "modifiers": "public", "return": "CompensatingTransactionOperationExecutor", "body": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args) {\n        Assert.notNull(args);\n        Name dn = LdapTransactionUtils.getFirstArgumentAsName(args);\n        if (args.length != 2 || !(args[1] instanceof ModificationItem[])) {\n            throw new IllegalArgumentException(\n                    \"Unexpected arguments to ModifyAttributes operation\");\n        }\n\n        ModificationItem[] incomingModifications = (ModificationItem[]) args[1];\n\n        Set<String> set = new HashSet<String>();\n        for (ModificationItem incomingModification : incomingModifications) {\n            set.add(incomingModification.getAttribute().getID());\n        }\n\n        // Get the current values of all referred Attributes.\n        String[] attributeNameArray = set.toArray(new String[set.size()]);\n\n        // LDAP-234: We need to explicitly an IncrementalAttributesMapper in\n        // case we're working against AD and there are too many attribute values to be returned\n        // by one query.\n        IncrementalAttributesMapper<?> attributesMapper = getAttributesMapper(attributeNameArray);\n        while (attributesMapper.hasMore()) {\n            ldapOperations.lookup(dn, attributesMapper.getAttributesForLookup(), attributesMapper);\n        }\n\n        Attributes currentAttributes = attributesMapper.getCollectedAttributes();\n\n        // Get a compensating ModificationItem for each of the incoming\n        // modification.\n        ModificationItem[] rollbackItems = new ModificationItem[incomingModifications.length];\n        for (int i = 0; i < incomingModifications.length; i++) {\n            rollbackItems[i] = getCompensatingModificationItem(\n                    currentAttributes, incomingModifications[i]);\n        }\n\n        return new ModifyAttributesOperationExecutor(ldapOperations, dn,\n                incomingModifications, rollbackItems);\n    }", "signature": "CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "full_signature": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "class_method_signature": "ModifyAttributesOperationRecorder.recordOperation(\n            Object[] args)", "testcase": false, "constructor": false, "invocations": ["notNull", "getFirstArgumentAsName", "add", "getID", "getAttribute", "toArray", "size", "getAttributesMapper", "hasMore", "lookup", "getAttributesForLookup", "getCollectedAttributes", "getCompensatingModificationItem"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}