{"test_class": {"identifier": "FStatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPS_DELTA = 0.00001;", "modifier": "private static final", "type": "double", "declarator": "EPS_DELTA = 0.00001", "var_name": "EPS_DELTA"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/quality/FStatTest.java"}, "test_case": {"identifier": "assessQualityTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void assessQualityTest() {\n\t\tFStat fStat = new FStat();\n\n\t\tList<Double> distances = Arrays.asList(2d, 4d, 3d);\n\t\tint[] classValues = new int[] { 0, 0, 1 };\n\t\t\n\t\t// D_0^bar = 3, D_1^bar = 3, D^bar = 3\n\t\t// Therefore, the assessed quality has to be 0\n\t\tAssert.assertEquals(0, fStat.assessQuality(distances, classValues), EPS_DELTA);\n\n\t\tdistances = Arrays.asList(1d, 4d, 3d);\n\t\tclassValues = new int[] { 0, 0, 1 };\n\n\t\t// D_0^bar = 2.5, D_1^bar = 3, D^bar = 8/3\n\t\t// Therefore, the assessed quality has to be (5/36) / (9/2)\n\t\tAssert.assertEquals((5d / 36d) / (9d / 2d), fStat.assessQuality(distances, classValues), EPS_DELTA);\n\t}", "signature": "void assessQualityTest()", "full_signature": "@Test public void assessQualityTest()", "class_method_signature": "FStatTest.assessQualityTest()", "testcase": true, "constructor": false, "invocations": ["asList", "assertEquals", "assessQuality", "asList", "assertEquals", "assessQuality"]}, "focal_class": {"identifier": "FStat", "superclass": "", "interfaces": "implements IQualityMeasure", "fields": [{"original_string": "private static final long serialVersionUID = 6991529180002046551L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6991529180002046551L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "assessQuality", "parameters": "(final List<Double> distances, final int[] classValues)", "modifiers": "@Override public", "return": "double", "signature": "double assessQuality(final List<Double> distances, final int[] classValues)", "full_signature": "@Override public double assessQuality(final List<Double> distances, final int[] classValues)", "class_method_signature": "FStat.assessQuality(final List<Double> distances, final int[] classValues)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/quality/FStat.java"}, "focal_method": {"identifier": "assessQuality", "parameters": "(final List<Double> distances, final int[] classValues)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double assessQuality(final List<Double> distances, final int[] classValues) {\n\t\t// Order class distances\n\t\tHashMap<Integer, List<Double>> classDistances = new HashMap<>();\n\t\tfor (int i = 0; i < distances.size(); i++) {\n\t\t\tif (!classDistances.containsKey(classValues[i])) {\n\t\t\t\tclassDistances.put(classValues[i], new ArrayList<>());\n\t\t\t}\n\n\t\t\tclassDistances.get(classValues[i]).add(distances.get(i));\n\t\t}\n\t\tint numClasses = classDistances.size();\n\n\t\t// Calculate class and overall means\n\t\tHashMap<Integer, Double> classMeans = new HashMap<>();\n\t\tfor (Entry<Integer, List<Double>> entry : classDistances.entrySet()) {\n\t\t\tInteger clazz = entry.getKey();\n\t\t\tclassMeans.put(clazz, entry.getValue().stream().mapToDouble(a -> a).average().getAsDouble());\n\t\t}\n\t\tdouble completeMean = distances.stream().mapToDouble(a -> a).average().getAsDouble();\n\t\tdouble denominator = 0;\n\n\t\t// Calculate actual F score\n\t\tdouble result = 0;\n\t\tfor (Entry<Integer, Double> entry : classMeans.entrySet()) {\n\t\t\tInteger clazz = entry.getKey();\n\t\t\tdouble mean = entry.getValue();\n\t\t\tresult += Math.pow(mean - completeMean, 2);\n\n\t\t\tfor (Double dist : classDistances.get(clazz)) {\n\t\t\t\tdenominator += Math.pow(dist - mean, 2);\n\t\t\t}\n\t\t}\n\t\tresult /= numClasses - 1;\n\t\tdenominator /= distances.size() - numClasses;\n\t\tif (denominator == 0) {\n\t\t\tthrow new IllegalArgumentException(\"Given arguments yield a 0 \" + denominator);\n\t\t}\n\t\tresult /= denominator;\n\n\t\treturn result;\n\t}", "signature": "double assessQuality(final List<Double> distances, final int[] classValues)", "full_signature": "@Override public double assessQuality(final List<Double> distances, final int[] classValues)", "class_method_signature": "FStat.assessQuality(final List<Double> distances, final int[] classValues)", "testcase": false, "constructor": false, "invocations": ["size", "containsKey", "put", "add", "get", "get", "size", "entrySet", "getKey", "put", "getAsDouble", "average", "mapToDouble", "stream", "getValue", "getAsDouble", "average", "mapToDouble", "stream", "entrySet", "getKey", "getValue", "pow", "get", "pow", "size"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}