{"test_class": {"identifier": "KafkaConsumerFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}, {"original_string": "private final KafkaConsumerFactory kafkaConsumerFactory = new KafkaConsumerFactory(\n        new KafkaClientConfigUtil(\n            \"not/used\",\n            \"TestPrefix\"\n        )\n    );", "modifier": "private final", "type": "KafkaConsumerFactory", "declarator": "kafkaConsumerFactory = new KafkaConsumerFactory(\n        new KafkaClientConfigUtil(\n            \"not/used\",\n            \"TestPrefix\"\n        )\n    )", "var_name": "kafkaConsumerFactory"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaConsumerFactoryTest.java"}, "test_case": {"identifier": "testDeserializerOptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserializerOptions() {\n        // Reset state on our Test Deserializer\n        TestDeserializer.reset();\n\n        // Create a topic with 1 partitions, (partitionId 0)\n        final String topicName = \"TestTopic\" + System.currentTimeMillis();\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(topicName, 1, (short) 1);\n\n        // Create cluster Config\n        final ClusterConfig clusterConfig = ClusterConfig.newBuilder()\n            .withBrokerHosts(sharedKafkaTestResource.getKafkaConnectString())\n            .build();\n\n        // Create Deserializer Config\n        final DeserializerConfig deserializerConfig = DeserializerConfig.newBuilder()\n            .withKeyDeserializerClass(TestDeserializer.class)\n            .withKeyDeserializerOption(\"key.option\", \"key.value\")\n            .withKeyDeserializerOption(\"key.option2\", \"key.value2\")\n\n            // Attempt to override a real setting, it should get filtered\n            .withKeyDeserializerOption(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \"MadeUpValue\")\n\n            .withValueDeserializerClass(TestDeserializer.class)\n            .withValueDeserializerOption(\"value.option\", \"value.value\")\n            .withValueDeserializerOption(\"value.option2\", \"value.value2\")\n\n            // Attempt to override a real setting, it should get filtered\n            .withValueDeserializerOption(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, \"MadeUpValue\")\n            .build();\n\n        // Create Topic Config\n        final TopicConfig topicConfig = new TopicConfig(clusterConfig, deserializerConfig, topicName);\n\n        // Create FilterConfig\n        final FilterConfig filterConfig = FilterConfig.withNoFilters();\n\n        // Create ClientConfig, instructing to start from tail.\n        final ClientConfig clientConfig = ClientConfig.newBuilder()\n            .withConsumerId(\"MyConsumerId\")\n            .withFilterConfig(filterConfig)\n            .withAllPartitions()\n            .withStartingPosition(StartingPosition.newTailPosition())\n            .withMaxResultsPerPartition(100)\n            .withTopicConfig(topicConfig)\n            .build();\n\n        // Create consumer\n        try (final KafkaConsumer<String, String> consumer = kafkaConsumerFactory.createConsumerAndSubscribe(clientConfig)) {\n            // We don't actually care to consume anything.  We want to inspect options passed to deserializer.\n            final Map<String, Object> passedConfig = TestDeserializer.getConfig();\n\n            // Validate values got passed\n            assertEquals(\"Should have expected value\", \"key.value\", passedConfig.get(\"key.option\"));\n            assertEquals(\"Should have expected value\", \"key.value2\", passedConfig.get(\"key.option2\"));\n            assertEquals(\"Should have expected value\", \"value.value\", passedConfig.get(\"value.option\"));\n            assertEquals(\"Should have expected value\", \"value.value2\", passedConfig.get(\"value.option2\"));\n\n            // Validate didn't overwrite others\n            assertNotEquals(\n                \"Should not have overridden config\",\n                \"MadeUpValue\",\n                passedConfig.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG));\n            assertNotEquals(\n                \"Should not have overridden config\",\n                \"MadeUpValue\",\n                passedConfig.get(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG));\n        }\n\n        // Reset state\n        TestDeserializer.reset();\n    }", "signature": "void testDeserializerOptions()", "full_signature": "@Test public void testDeserializerOptions()", "class_method_signature": "KafkaConsumerFactoryTest.testDeserializerOptions()", "testcase": true, "constructor": false, "invocations": ["reset", "currentTimeMillis", "createTopic", "getKafkaTestUtils", "build", "withBrokerHosts", "newBuilder", "getKafkaConnectString", "build", "withValueDeserializerOption", "withValueDeserializerOption", "withValueDeserializerOption", "withValueDeserializerClass", "withKeyDeserializerOption", "withKeyDeserializerOption", "withKeyDeserializerOption", "withKeyDeserializerClass", "newBuilder", "withNoFilters", "build", "withTopicConfig", "withMaxResultsPerPartition", "withStartingPosition", "withAllPartitions", "withFilterConfig", "withConsumerId", "newBuilder", "newTailPosition", "createConsumerAndSubscribe", "getConfig", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertNotEquals", "get", "assertNotEquals", "get", "reset"]}, "focal_class": {"identifier": "KafkaConsumerFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KafkaClientConfigUtil configUtil;", "modifier": "private final", "type": "KafkaClientConfigUtil", "declarator": "configUtil", "var_name": "configUtil"}], "methods": [{"identifier": "KafkaConsumerFactory", "parameters": "(final KafkaClientConfigUtil configUtil)", "modifiers": "public", "return": "", "signature": " KafkaConsumerFactory(final KafkaClientConfigUtil configUtil)", "full_signature": "public  KafkaConsumerFactory(final KafkaClientConfigUtil configUtil)", "class_method_signature": "KafkaConsumerFactory.KafkaConsumerFactory(final KafkaClientConfigUtil configUtil)", "testcase": false, "constructor": true}, {"identifier": "createConsumer", "parameters": "(final ClientConfig clientConfig)", "modifiers": "public", "return": "KafkaConsumer", "signature": "KafkaConsumer createConsumer(final ClientConfig clientConfig)", "full_signature": "public KafkaConsumer createConsumer(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.createConsumer(final ClientConfig clientConfig)", "testcase": false, "constructor": false}, {"identifier": "createConsumerAndSubscribe", "parameters": "(final ClientConfig clientConfig)", "modifiers": "public", "return": "KafkaConsumer", "signature": "KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "full_signature": "public KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.createConsumerAndSubscribe(final ClientConfig clientConfig)", "testcase": false, "constructor": false}, {"identifier": "buildConsumerConfig", "parameters": "(final ClientConfig clientConfig)", "modifiers": "private", "return": "Map<String, Object>", "signature": "Map<String, Object> buildConsumerConfig(final ClientConfig clientConfig)", "full_signature": "private Map<String, Object> buildConsumerConfig(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.buildConsumerConfig(final ClientConfig clientConfig)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/kafka/KafkaConsumerFactory.java"}, "focal_method": {"identifier": "createConsumerAndSubscribe", "parameters": "(final ClientConfig clientConfig)", "modifiers": "public", "return": "KafkaConsumer", "body": "public KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig) {\n        final KafkaConsumer kafkaConsumer = createConsumer(clientConfig);\n\n        // Determine which partitions to subscribe to, for now do all\n        final List<PartitionInfo> partitionInfos = kafkaConsumer.partitionsFor(clientConfig.getTopicConfig().getTopicName());\n\n        // Pull out partitions, convert to topic partitions\n        final Collection<TopicPartition> topicPartitions = new ArrayList<>();\n        for (final PartitionInfo partitionInfo: partitionInfos) {\n            // Skip filtered partitions\n            if (!clientConfig.isPartitionFiltered(partitionInfo.partition())) {\n                topicPartitions.add(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()));\n            }\n        }\n\n        // Assign them.\n        kafkaConsumer.assign(topicPartitions);\n\n        // Return the kafka consumer.\n        return kafkaConsumer;\n    }", "signature": "KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "full_signature": "public KafkaConsumer createConsumerAndSubscribe(final ClientConfig clientConfig)", "class_method_signature": "KafkaConsumerFactory.createConsumerAndSubscribe(final ClientConfig clientConfig)", "testcase": false, "constructor": false, "invocations": ["createConsumer", "partitionsFor", "getTopicName", "getTopicConfig", "isPartitionFiltered", "partition", "add", "topic", "partition", "assign"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}