{"test_class": {"identifier": "WARCRecordTest", "superclass": "", "interfaces": "", "fields": [], "file": "dkpro-c4corpus-warc-io/src/test/java/de/tudarmstadt/ukp/dkpro/c4corpus/warc/io/WARCRecordTest.java"}, "test_case": {"identifier": "testParseWARCInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseWARCInfo()\n            throws IOException\n    {\n        DataInputStream stream = new DataInputStream(new ByteArrayInputStream(\n                (\"WARC/1.0\\r\\n\" + \"WARC-Type: warcinfo\\r\\n\" + \"WARC-Date: 2014-03-18T17:47:38Z\\r\\n\"\n                        + \"WARC-Record-ID: <urn:uuid:d9bbb325-c09f-473c-8600-1c9dbd4ec443>\\r\\n\"\n                        + \"Content-Length: 371\\r\\n\" + \"Content-Type: application/warc-fields\\r\\n\"\n                        + \"WARC-Filename: CC-MAIN-20140313024455-00000-ip-10-183-142-35.ec2.internal.warc.gz\\r\\n\"\n                        + \"\\r\\n\" + \"robots: classic\\r\\n\"\n                        + \"hostname: ip-10-183-142-35.ec2.internal\\r\\n\"\n                        + \"software: Nutch 1.6 (CC)/CC WarcExport 1.0\\r\\n\"\n                        + \"isPartOf: CC-MAIN-2014-10\\r\\n\" + \"operator: CommonCrawl Admin\\r\\n\"\n                        + \"description: Wide crawl of the web with URLs provided by Blekko for March 2014\\r\\n\"\n                        + \"publisher: CommonCrawl\\r\\n\" + \"format: WARC File Format 1.0\\r\\n\"\n                        + \"conformsTo: http://bibnum.bnf.fr/WARC/WARC_ISO_28500_version1_latestdraft.pdf\\r\\n\"\n                        + \"\\r\\n\" + \"\\r\\n\" + \"\\r\\n\").getBytes(\"UTF-8\")));\n        WARCRecord record = new WARCRecord(stream);\n        assertEquals(371, record.getHeader().getContentLength());\n        assertEquals(\"warcinfo\", record.getHeader().getRecordType());\n        assertEquals(\"2014-03-18T17:47:38Z\", record.getHeader().getDateString());\n        assertEquals(\"<urn:uuid:d9bbb325-c09f-473c-8600-1c9dbd4ec443>\",\n                record.getHeader().getRecordID());\n        assertEquals(\"application/warc-fields\", record.getHeader().getContentType());\n        assertNull(record.getHeader().getTargetURI());\n    }", "signature": "void testParseWARCInfo()", "full_signature": "@Test public void testParseWARCInfo()", "class_method_signature": "WARCRecordTest.testParseWARCInfo()", "testcase": true, "constructor": false, "invocations": ["getBytes", "assertEquals", "getContentLength", "getHeader", "assertEquals", "getRecordType", "getHeader", "assertEquals", "getDateString", "getHeader", "assertEquals", "getRecordID", "getHeader", "assertEquals", "getContentType", "getHeader", "assertNull", "getTargetURI", "getHeader"]}, "focal_class": {"identifier": "WARCRecord", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String WARC_VERSION = \"WARC/1.0\";", "modifier": "public static final", "type": "String", "declarator": "WARC_VERSION = \"WARC/1.0\"", "var_name": "WARC_VERSION"}, {"original_string": "private static final int MAX_LINE_LENGTH = 10000;", "modifier": "private static final", "type": "int", "declarator": "MAX_LINE_LENGTH = 10000", "var_name": "MAX_LINE_LENGTH"}, {"original_string": "private static final Pattern VERSION_PATTERN = Pattern.compile(\"WARC/[0-9\\\\.]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "VERSION_PATTERN = Pattern.compile(\"WARC/[0-9\\\\.]+\")", "var_name": "VERSION_PATTERN"}, {"original_string": "private static final Pattern CONTINUATION_PATTERN = Pattern.compile(\"^[\\\\t ]+.*\");", "modifier": "private static final", "type": "Pattern", "declarator": "CONTINUATION_PATTERN = Pattern.compile(\"^[\\\\t ]+.*\")", "var_name": "CONTINUATION_PATTERN"}, {"original_string": "private static final String CR_LF = \"\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "CR_LF = \"\\r\\n\"", "var_name": "CR_LF"}, {"original_string": "private static final byte[] CR_LF_BYTES = { 13, 10 };", "modifier": "private static final", "type": "byte[]", "declarator": "CR_LF_BYTES = { 13, 10 }", "var_name": "CR_LF_BYTES"}, {"original_string": "private final Header header;", "modifier": "private final", "type": "Header", "declarator": "header", "var_name": "header"}, {"original_string": "private byte[] content;", "modifier": "private", "type": "byte[]", "declarator": "content", "var_name": "content"}, {"original_string": "private static final Pattern CONTENT_TYPE_PATTERN = Pattern\n            .compile(\"Content-Type:\\\\s*([^\\\\s;]+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "CONTENT_TYPE_PATTERN = Pattern\n            .compile(\"Content-Type:\\\\s*([^\\\\s;]+)\")", "var_name": "CONTENT_TYPE_PATTERN"}, {"original_string": "private static final Pattern CHARSET_PATTERN = Pattern\n            .compile(\"Content-Type:.*charset=\\\\s*([^\\\\s;]+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "CHARSET_PATTERN = Pattern\n            .compile(\"Content-Type:.*charset=\\\\s*([^\\\\s;]+)\")", "var_name": "CHARSET_PATTERN"}], "methods": [{"identifier": "WARCRecord", "parameters": "(DataInput in)", "modifiers": "public", "return": "", "signature": " WARCRecord(DataInput in)", "full_signature": "public  WARCRecord(DataInput in)", "class_method_signature": "WARCRecord.WARCRecord(DataInput in)", "testcase": false, "constructor": true}, {"identifier": "WARCRecord", "parameters": "(WARCRecord other)", "modifiers": "public", "return": "", "signature": " WARCRecord(WARCRecord other)", "full_signature": "public  WARCRecord(WARCRecord other)", "class_method_signature": "WARCRecord.WARCRecord(WARCRecord other)", "testcase": false, "constructor": true}, {"identifier": "readHeader", "parameters": "(DataInput in)", "modifiers": "private static", "return": "Header", "signature": "Header readHeader(DataInput in)", "full_signature": "private static Header readHeader(DataInput in)", "class_method_signature": "WARCRecord.readHeader(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "readLine", "parameters": "(DataInput in)", "modifiers": "private static", "return": "String", "signature": "String readLine(DataInput in)", "full_signature": "private static String readLine(DataInput in)", "class_method_signature": "WARCRecord.readLine(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "readSeparator", "parameters": "(DataInput in)", "modifiers": "private static", "return": "void", "signature": "void readSeparator(DataInput in)", "full_signature": "private static void readSeparator(DataInput in)", "class_method_signature": "WARCRecord.readSeparator(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "isContentApplicationHttpResponse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isContentApplicationHttpResponse()", "full_signature": "public boolean isContentApplicationHttpResponse()", "class_method_signature": "WARCRecord.isContentApplicationHttpResponse()", "testcase": false, "constructor": false}, {"identifier": "getHTTPHeaders", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHTTPHeaders()", "full_signature": "public String getHTTPHeaders()", "class_method_signature": "WARCRecord.getHTTPHeaders()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "public", "return": "Header", "signature": "Header getHeader()", "full_signature": "public Header getHeader()", "class_method_signature": "WARCRecord.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getContent()", "full_signature": "public byte[] getContent()", "class_method_signature": "WARCRecord.getContent()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(DataOutput out)", "modifiers": "public", "return": "void", "signature": "void write(DataOutput out)", "full_signature": "public void write(DataOutput out)", "class_method_signature": "WARCRecord.write(DataOutput out)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WARCRecord.toString()", "testcase": false, "constructor": false}, {"identifier": "setContent", "parameters": "(String newContent)", "modifiers": "public", "return": "void", "signature": "void setContent(String newContent)", "full_signature": "public void setContent(String newContent)", "class_method_signature": "WARCRecord.setContent(String newContent)", "testcase": false, "constructor": false}, {"identifier": "extractHTTPHeaderContentType", "parameters": "(String httpHeaderText)", "modifiers": "public static", "return": "String", "signature": "String extractHTTPHeaderContentType(String httpHeaderText)", "full_signature": "public static String extractHTTPHeaderContentType(String httpHeaderText)", "class_method_signature": "WARCRecord.extractHTTPHeaderContentType(String httpHeaderText)", "testcase": false, "constructor": false}, {"identifier": "extractHTTPHeaderCharset", "parameters": "(String httpHeaderText)", "modifiers": "public static", "return": "String", "signature": "String extractHTTPHeaderCharset(String httpHeaderText)", "full_signature": "public static String extractHTTPHeaderCharset(String httpHeaderText)", "class_method_signature": "WARCRecord.extractHTTPHeaderCharset(String httpHeaderText)", "testcase": false, "constructor": false}], "file": "dkpro-c4corpus-warc-io/src/main/java/de/tudarmstadt/ukp/dkpro/c4corpus/warc/io/WARCRecord.java"}, "focal_method": {"identifier": "getHeader", "parameters": "()", "modifiers": "public", "return": "Header", "body": "public Header getHeader()\n    {\n        return header;\n    }", "signature": "Header getHeader()", "full_signature": "public Header getHeader()", "class_method_signature": "WARCRecord.getHeader()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 51843899, "url": "https://github.com/dkpro/dkpro-c4corpus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 33, "size": 13280, "license": "licensed"}}