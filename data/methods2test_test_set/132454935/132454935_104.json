{"test_class": {"identifier": "CommandLinesInterpretorTest", "superclass": "", "interfaces": "", "fields": [], "file": "elrond-api/src/test/java/network/elrond/api/CommandLinesInterpretorTest.java"}, "test_case": {"identifier": "testInterpretWithConfigOK2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInterpretWithConfigOK2() throws IOException {\n        FileWriter fileWriter = new FileWriter(\"test.config\", false);\n\n        fileWriter.append(\"node_name=AUTO\\n\" +\n                \"port=4001\\n\" +\n                \"master_peer_port=4000\\n\" +\n                \"peer_ip=127.0.0.1\\n\" +\n                \"node_private_key=AUTO\\n\" +\n                \"startup_type=START_FROM_SCRATCH\\n\" +\n                \"blockchain_path=AUTO\\n\" +\n                \"blockchain_restore_path=AUTO\");\n        fileWriter.close();\n\n        ResponseObject result = CommandLinesInterpretor.interpretCommandLines(new String[]{\"--config=test.config\"});\n\n        ThreadUtil.sleep(1000);\n        FileUtils.forceDelete(new File(\"test.config\"));\n\n        TestCase.assertTrue(result.isSuccess());\n        TestCase.assertNotNull(result.getPayload());\n\n        @SuppressWarnings(\"unchecked\")\n\t\tMap<String, Object> data = (Map<String, Object>)result.getPayload();\n\n        for (String key : data.keySet()){\n            System.out.println(key + \": \" + data.get(key).toString());\n        }\n    }", "signature": "void testInterpretWithConfigOK2()", "full_signature": "@Test public void testInterpretWithConfigOK2()", "class_method_signature": "CommandLinesInterpretorTest.testInterpretWithConfigOK2()", "testcase": true, "constructor": false, "invocations": ["append", "close", "interpretCommandLines", "sleep", "forceDelete", "assertTrue", "isSuccess", "assertNotNull", "getPayload", "getPayload", "keySet", "println", "toString", "get"]}, "focal_class": {"identifier": "CommandLinesInterpretor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LogManager.getLogger(CommandLinesInterpretor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LogManager.getLogger(CommandLinesInterpretor.class)", "var_name": "logger"}], "methods": [{"identifier": "interpretCommandLines", "parameters": "(String[] args)", "modifiers": "public static", "return": "ResponseObject", "signature": "ResponseObject interpretCommandLines(String[] args)", "full_signature": "public static ResponseObject interpretCommandLines(String[] args)", "class_method_signature": "CommandLinesInterpretor.interpretCommandLines(String[] args)", "testcase": false, "constructor": false}, {"identifier": "GenerateCommandFile", "parameters": "(List<String> configs)", "modifiers": "private static", "return": "String", "signature": "String GenerateCommandFile(List<String> configs)", "full_signature": "private static String GenerateCommandFile(List<String> configs)", "class_method_signature": "CommandLinesInterpretor.GenerateCommandFile(List<String> configs)", "testcase": false, "constructor": false}, {"identifier": "GenerateConfigFiles", "parameters": "(Map<Integer,List<String>> shardPrivateKeys)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> GenerateConfigFiles(Map<Integer,List<String>> shardPrivateKeys)", "full_signature": "private static List<String> GenerateConfigFiles(Map<Integer,List<String>> shardPrivateKeys)", "class_method_signature": "CommandLinesInterpretor.GenerateConfigFiles(Map<Integer,List<String>> shardPrivateKeys)", "testcase": false, "constructor": false}, {"identifier": "GeneratePrivateKeysPerShard", "parameters": "(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "modifiers": "public static", "return": "void", "signature": "void GeneratePrivateKeysPerShard(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "full_signature": "public static void GeneratePrivateKeysPerShard(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "class_method_signature": "CommandLinesInterpretor.GeneratePrivateKeysPerShard(Integer nrShards, Integer nodesPerShard, Map<Integer, List<String>> shardPrivateKeys)", "testcase": false, "constructor": false}, {"identifier": "isHelpArgument", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isHelpArgument(String arg)", "full_signature": "static boolean isHelpArgument(String arg)", "class_method_signature": "CommandLinesInterpretor.isHelpArgument(String arg)", "testcase": false, "constructor": false}, {"identifier": "isConfig", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isConfig(String arg)", "full_signature": "static boolean isConfig(String arg)", "class_method_signature": "CommandLinesInterpretor.isConfig(String arg)", "testcase": false, "constructor": false}, {"identifier": "isGenerate", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isGenerate(String arg)", "full_signature": "static boolean isGenerate(String arg)", "class_method_signature": "CommandLinesInterpretor.isGenerate(String arg)", "testcase": false, "constructor": false}, {"identifier": "isKeyValuePair", "parameters": "(String arg)", "modifiers": "static", "return": "boolean", "signature": "boolean isKeyValuePair(String arg)", "full_signature": "static boolean isKeyValuePair(String arg)", "class_method_signature": "CommandLinesInterpretor.isKeyValuePair(String arg)", "testcase": false, "constructor": false}, {"identifier": "displayHelp", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void displayHelp()", "full_signature": "static void displayHelp()", "class_method_signature": "CommandLinesInterpretor.displayHelp()", "testcase": false, "constructor": false}, {"identifier": "parseFileProperties", "parameters": "(String configFileName)", "modifiers": "static", "return": "Map<String, Object>", "signature": "Map<String, Object> parseFileProperties(String configFileName)", "full_signature": "static Map<String, Object> parseFileProperties(String configFileName)", "class_method_signature": "CommandLinesInterpretor.parseFileProperties(String configFileName)", "testcase": false, "constructor": false}], "file": "elrond-api/src/main/java/network/elrond/api/CommandLinesInterpretor.java"}, "focal_method": {"identifier": "interpretCommandLines", "parameters": "(String[] args)", "modifiers": "public static", "return": "ResponseObject", "body": "public static ResponseObject interpretCommandLines(String[] args){\n        logger.traceEntry(\"params: {}\", args);\n\n        if (args == null){\n            return logger.traceExit(new ResponseObject(true, \"null arguments!\", null));\n        }\n\n        if (args.length == 0){\n            return logger.traceExit(new ResponseObject(true, \"empty arguments\", null));\n        }\n\n        boolean isHelp = false;\n        String configFileName = null;\n        String generateFor = \"\";\n\n        for (int i = 0; i < args.length; i++){\n            isHelp = isHelp || isHelpArgument(args[i]);\n\n            if (isConfig(args[i])){\n                configFileName = args[i].substring(args[i].indexOf(\"=\") + 1);\n            }\n\n            if(isGenerate(args[i])){\n                generateFor = args[i].substring(args[i].indexOf(\"=\") + 1);\n            }\n        }\n\n        if (isHelp){\n            displayHelp();\n            return logger.traceExit(new ResponseObject(false, \"displayed help\", null));\n        }\n\n        if (configFileName == null){\n            return logger.traceExit(new ResponseObject(true, \"no file specified\", null));\n        } else {\n            //read config and parse the properties\n            Map<String, Object> properties = parseFileProperties(configFileName);\n\n            if (properties == null) {\n                System.out.println(\"Error parsing file! Can not start!\");\n                return logger.traceExit(new ResponseObject(false, \"config file parse error\", null));\n            }\n\n            if(generateFor == null || generateFor.isEmpty()){\n\n                return logger.traceExit(new ResponseObject(true, \"autostart\", properties));\n            }\n            else{\n\n                String[] generateSplit = generateFor.split(\";\");\n                if(generateSplit.length !=3){\n                    System.out.println(\"Error generating! Can not start!\");\n                    return logger.traceExit(new ResponseObject(false, \"Error generating!\", null));\n                }\n\n                Integer nrShards = Integer.parseInt(generateSplit[0]);\n                Integer nodesPerShard = Integer.parseInt(generateSplit[1]);\n\n                Boolean shouldStartAutomatically = Boolean.parseBoolean(generateSplit[2]);\n\n                Map<Integer, List<String>> shardPrivateKeys = new HashMap<>();\n\n                GeneratePrivateKeysPerShard(nrShards, nodesPerShard, shardPrivateKeys);\n\n                List<String> configs = GenerateConfigFiles(shardPrivateKeys);\n\n                String fileName = GenerateCommandFile(configs);\n\n                if(shouldStartAutomatically) {\n                    try {\n                        Runtime.getRuntime().exec(\"cmd /c start \" + fileName);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                return logger.traceExit(new ResponseObject(false, \"generate\", properties));\n            }\n        }\n    }", "signature": "ResponseObject interpretCommandLines(String[] args)", "full_signature": "public static ResponseObject interpretCommandLines(String[] args)", "class_method_signature": "CommandLinesInterpretor.interpretCommandLines(String[] args)", "testcase": false, "constructor": false, "invocations": ["traceEntry", "traceExit", "traceExit", "isHelpArgument", "isConfig", "substring", "indexOf", "isGenerate", "substring", "indexOf", "displayHelp", "traceExit", "traceExit", "parseFileProperties", "println", "traceExit", "isEmpty", "traceExit", "split", "println", "traceExit", "parseInt", "parseInt", "parseBoolean", "GeneratePrivateKeysPerShard", "GenerateConfigFiles", "GenerateCommandFile", "exec", "getRuntime", "printStackTrace", "traceExit"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}