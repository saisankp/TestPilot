{"test_class": {"identifier": "SvnPropertiesValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "qulice-maven-plugin/src/test/java/com/qulice/maven/SvnPropertiesValidatorTest.java"}, "test_case": {"identifier": "testSimulatesSvnPropgetRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSimulatesSvnPropgetRequest() throws Exception {\n        final MavenValidator validator = new SvnPropertiesValidator();\n        final MavenEnvironment env = new MavenEnvironmentMocker().mock();\n        validator.validate(env);\n    }", "signature": "void testSimulatesSvnPropgetRequest()", "full_signature": "@Test public void testSimulatesSvnPropgetRequest()", "class_method_signature": "SvnPropertiesValidatorTest.testSimulatesSvnPropgetRequest()", "testcase": true, "constructor": false, "invocations": ["mock", "validate"]}, "focal_class": {"identifier": "SvnPropertiesValidator", "superclass": "", "interfaces": "implements MavenValidator", "fields": [], "methods": [{"identifier": "validate", "parameters": "(final MavenEnvironment env)", "modifiers": "@Override public", "return": "void", "signature": "void validate(final MavenEnvironment env)", "full_signature": "@Override public void validate(final MavenEnvironment env)", "class_method_signature": "SvnPropertiesValidator.validate(final MavenEnvironment env)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final File dir)", "modifiers": "private", "return": "void", "signature": "void validate(final File dir)", "full_signature": "private void validate(final File dir)", "class_method_signature": "SvnPropertiesValidator.validate(final File dir)", "testcase": false, "constructor": false}, {"identifier": "isSvn", "parameters": "(final MavenProject project)", "modifiers": "private static", "return": "boolean", "signature": "boolean isSvn(final MavenProject project)", "full_signature": "private static boolean isSvn(final MavenProject project)", "class_method_signature": "SvnPropertiesValidator.isSvn(final MavenProject project)", "testcase": false, "constructor": false}, {"identifier": "valid", "parameters": "(final File file)", "modifiers": "private", "return": "boolean", "signature": "boolean valid(final File file)", "full_signature": "private boolean valid(final File file)", "class_method_signature": "SvnPropertiesValidator.valid(final File file)", "testcase": false, "constructor": false}, {"identifier": "propget", "parameters": "(final File file, final String name)", "modifiers": "private static", "return": "String", "signature": "String propget(final File file, final String name)", "full_signature": "private static String propget(final File file, final String name)", "class_method_signature": "SvnPropertiesValidator.propget(final File file, final String name)", "testcase": false, "constructor": false}], "file": "qulice-maven-plugin/src/main/java/com/qulice/maven/SvnPropertiesValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(final MavenEnvironment env)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(final MavenEnvironment env)\n        throws ValidationException {\n        if (SvnPropertiesValidator.isSvn(env.project())) {\n            final File dir = new File(env.project().getBasedir(), \"src\");\n            if (dir.exists()) {\n                this.validate(dir);\n            } else {\n                Logger.info(\n                    this,\n                    \"%s directory is absent, no need to check SVN properties\",\n                    dir\n                );\n            }\n        } else {\n            Logger.info(this, \"This is not an SVN project\");\n        }\n    }", "signature": "void validate(final MavenEnvironment env)", "full_signature": "@Override public void validate(final MavenEnvironment env)", "class_method_signature": "SvnPropertiesValidator.validate(final MavenEnvironment env)", "testcase": false, "constructor": false, "invocations": ["isSvn", "project", "getBasedir", "project", "exists", "validate", "info", "info"]}, "repository": {"repo_id": 9580168, "url": "https://github.com/teamed/qulice", "language": "Java", "is_fork": false, "fork_count": 87, "stargazer_count": 240, "size": 17854, "license": "licensed"}}