{"test_class": {"identifier": "NetUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/util/NetUtilsTest.java"}, "test_case": {"identifier": "testIPv4toURL", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testIPv4toURL() {\n\t\ttry {\n\t\t\tfinal String addressString = \"192.168.0.1\";\n\n\t\t\tInetAddress address = InetAddress.getByName(addressString);\n\t\t\tassertEquals(addressString, NetUtils.ipAddressToUrlString(address));\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage());\n\t\t}\n\t}", "signature": "void testIPv4toURL()", "full_signature": "@Test public void testIPv4toURL()", "class_method_signature": "NetUtilsTest.testIPv4toURL()", "testcase": true, "constructor": false, "invocations": ["getByName", "assertEquals", "ipAddressToUrlString", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "NetUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NetUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NetUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "getHostnameFromFQDN", "parameters": "(String fqdn)", "modifiers": "public static", "return": "String", "signature": "String getHostnameFromFQDN(String fqdn)", "full_signature": "public static String getHostnameFromFQDN(String fqdn)", "class_method_signature": "NetUtils.getHostnameFromFQDN(String fqdn)", "testcase": false, "constructor": false}, {"identifier": "getCorrectHostnamePort", "parameters": "(String hostPort)", "modifiers": "public static", "return": "URL", "signature": "URL getCorrectHostnamePort(String hostPort)", "full_signature": "public static URL getCorrectHostnamePort(String hostPort)", "class_method_signature": "NetUtils.getCorrectHostnamePort(String hostPort)", "testcase": false, "constructor": false}, {"identifier": "getAvailablePort", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getAvailablePort()", "full_signature": "public static int getAvailablePort()", "class_method_signature": "NetUtils.getAvailablePort()", "testcase": false, "constructor": false}, {"identifier": "ipAddressToUrlString", "parameters": "(InetAddress address)", "modifiers": "public static", "return": "String", "signature": "String ipAddressToUrlString(InetAddress address)", "full_signature": "public static String ipAddressToUrlString(InetAddress address)", "class_method_signature": "NetUtils.ipAddressToUrlString(InetAddress address)", "testcase": false, "constructor": false}, {"identifier": "ipAddressAndPortToUrlString", "parameters": "(InetAddress address, int port)", "modifiers": "public static", "return": "String", "signature": "String ipAddressAndPortToUrlString(InetAddress address, int port)", "full_signature": "public static String ipAddressAndPortToUrlString(InetAddress address, int port)", "class_method_signature": "NetUtils.ipAddressAndPortToUrlString(InetAddress address, int port)", "testcase": false, "constructor": false}, {"identifier": "socketAddressToUrlString", "parameters": "(InetSocketAddress address)", "modifiers": "public static", "return": "String", "signature": "String socketAddressToUrlString(InetSocketAddress address)", "full_signature": "public static String socketAddressToUrlString(InetSocketAddress address)", "class_method_signature": "NetUtils.socketAddressToUrlString(InetSocketAddress address)", "testcase": false, "constructor": false}, {"identifier": "hostAndPortToUrlString", "parameters": "(String host, int port)", "modifiers": "public static", "return": "String", "signature": "String hostAndPortToUrlString(String host, int port)", "full_signature": "public static String hostAndPortToUrlString(String host, int port)", "class_method_signature": "NetUtils.hostAndPortToUrlString(String host, int port)", "testcase": false, "constructor": false}, {"identifier": "getPortRangeFromString", "parameters": "(String rangeDefinition)", "modifiers": "public static", "return": "Iterator<Integer>", "signature": "Iterator<Integer> getPortRangeFromString(String rangeDefinition)", "full_signature": "public static Iterator<Integer> getPortRangeFromString(String rangeDefinition)", "class_method_signature": "NetUtils.getPortRangeFromString(String rangeDefinition)", "testcase": false, "constructor": false}, {"identifier": "createSocketFromPorts", "parameters": "(Iterator<Integer> portsIterator, SocketFactory factory)", "modifiers": "public static", "return": "ServerSocket", "signature": "ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory)", "full_signature": "public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory)", "class_method_signature": "NetUtils.createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/util/NetUtils.java"}, "focal_method": {"identifier": "ipAddressToUrlString", "parameters": "(InetAddress address)", "modifiers": "public static", "return": "String", "body": "public static String ipAddressToUrlString(InetAddress address) {\n\t\tif (address == null) {\n\t\t\tthrow new NullPointerException(\"address is null\");\n\t\t}\n\t\telse if (address instanceof Inet4Address) {\n\t\t\treturn address.getHostAddress();\n\t\t}\n\t\telse if (address instanceof Inet6Address) {\n\t\t\treturn '[' + InetAddresses.toAddrString(address) + ']';\n\t\t}\n\t\telse {\n\t\t\tthrow new IllegalArgumentException(\"Unrecognized type of InetAddress: \" + address);\n\t\t}\n\t}", "signature": "String ipAddressToUrlString(InetAddress address)", "full_signature": "public static String ipAddressToUrlString(InetAddress address)", "class_method_signature": "NetUtils.ipAddressToUrlString(InetAddress address)", "testcase": false, "constructor": false, "invocations": ["getHostAddress", "toAddrString"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}