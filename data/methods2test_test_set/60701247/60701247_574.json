{"test_class": {"identifier": "LineChartTest", "superclass": "", "interfaces": "", "fields": [], "file": "adt-ui/src/test/java/com/android/tools/adtui/chart/linechart/LineChartTest.java"}, "test_case": {"identifier": "testAdjustDashPhaseForSteppedConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAdjustDashPhaseForSteppedConfig() throws Exception {\n    LineChartModel model = new LineChartModel();\n    Range xRange = new Range(0, 15);\n    Range yRange = new Range(0, 15);\n\n    DefaultDataSeries<Long> testSeries = new DefaultDataSeries<>();\n    testSeries.add(3, 0L);\n    testSeries.add(3, 3L);  // stepped length relative to previous point = 3\n    testSeries.add(6, 7L);  // stepped length relative to previous point = 7\n    testSeries.add(9, 11L);  // stepped length relative to previous point = 7\n    testSeries.add(15, 15L);\n\n    RangedContinuousSeries rangedSeries = new RangedContinuousSeries(\"test\", xRange, yRange, testSeries);\n    model.add(rangedSeries);\n\n    LineChart chart = new LineChart(model);\n    // Set dimension to match the ranges, so each range unit is 1 pixel.\n    chart.setSize(15, 15);\n\n    // Create a dash pattern of total length 3\n    BasicStroke stroke = new BasicStroke(1f, CAP_SQUARE, JOIN_MITER, 10.0f, new float[]{1.0f, 2.0f}, 0.0f);\n    LineConfig config = new LineConfig(Color.BLACK).setStroke(stroke).setStepped(true);\n\n    chart.configure(rangedSeries, config);\n    Assert.assertTrue(config.isAdjustDash());\n    Assert.assertEquals(3, config.getDashLength(), 0);\n    Assert.assertEquals(0, config.getAdjustedDashPhase(), 0);\n\n    // First point == {3,0}\n    Graphics2D fakeGraphics = mock(Graphics2D.class);\n    when(fakeGraphics.create()).thenReturn(fakeGraphics);\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, 0);\n    Assert.assertEquals(0, config.getAdjustedDashPhase(), LineChart.EPSILON);\n\n    // The new first point would be same as last. Dash phase should not have changed.\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, 4);\n    Assert.assertEquals(0, config.getAdjustedDashPhase(), LineChart.EPSILON);\n\n    // The new first point would now be {6,7}, which for a stepped line is 10 pixels ahead relative to the previous first point {3,0}\n    // New dash phase would be: (0 + 10) % 3\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, 4);\n    Assert.assertEquals(1, config.getAdjustedDashPhase(), LineChart.EPSILON);\n\n    // The new first point would now be {9,11}, which for a stepped line is another 7 pixels ahead of the previous point\n    // New dash phase would be: (1 + 7) % 3\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, 4);\n    Assert.assertEquals(2, config.getAdjustedDashPhase(), LineChart.EPSILON);\n\n    // Shifts backward to ensure we get back the previous dash phases.\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, -4);\n    Assert.assertEquals(1, config.getAdjustedDashPhase(), LineChart.EPSILON);\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, -4);\n    Assert.assertEquals(0, config.getAdjustedDashPhase(), LineChart.EPSILON);\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, -4);\n    Assert.assertEquals(0, config.getAdjustedDashPhase(), LineChart.EPSILON);\n\n    // Test that shifting by more than half would not update the dash phase.\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, 8);\n    Assert.assertEquals(0, config.getAdjustedDashPhase(), LineChart.EPSILON);\n    shiftRangeAndRepaintChart(chart, model, xRange, fakeGraphics, -8);\n    Assert.assertEquals(0, config.getAdjustedDashPhase(), LineChart.EPSILON);\n  }", "signature": "void testAdjustDashPhaseForSteppedConfig()", "full_signature": "@Test public void testAdjustDashPhaseForSteppedConfig()", "class_method_signature": "LineChartTest.testAdjustDashPhaseForSteppedConfig()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "setSize", "setStepped", "setStroke", "configure", "assertTrue", "isAdjustDash", "assertEquals", "getDashLength", "assertEquals", "getAdjustedDashPhase", "mock", "thenReturn", "when", "create", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase", "shiftRangeAndRepaintChart", "assertEquals", "getAdjustedDashPhase"]}, "focal_class": {"identifier": "LineChart", "superclass": "extends AnimatedComponent", "interfaces": "", "fields": [{"original_string": "static final float EPSILON = 1e-4f;", "modifier": "static final", "type": "float", "declarator": "EPSILON = 1e-4f", "var_name": "EPSILON"}, {"original_string": "private static final double BUCKET_BAR_PERCENTAGE = 0.7;", "modifier": "private static final", "type": "double", "declarator": "BUCKET_BAR_PERCENTAGE = 0.7", "var_name": "BUCKET_BAR_PERCENTAGE"}, {"original_string": "@NotNull final LineChartModel myModel;", "modifier": "@NotNull final", "type": "LineChartModel", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "@NotNull\n  private final Map<RangedContinuousSeries, LineConfig> myLinesConfig = new LinkedHashMap<>();", "modifier": "@NotNull\n  private final", "type": "Map<RangedContinuousSeries, LineConfig>", "declarator": "myLinesConfig = new LinkedHashMap<>()", "var_name": "myLinesConfig"}, {"original_string": "@NotNull\n  private final ArrayList<Path2D> myLinePaths;", "modifier": "@NotNull\n  private final", "type": "ArrayList<Path2D>", "declarator": "myLinePaths", "var_name": "myLinePaths"}, {"original_string": "@NotNull\n  private final ArrayList<RangedContinuousSeries> myLinePathSeries;", "modifier": "@NotNull\n  private final", "type": "ArrayList<RangedContinuousSeries>", "declarator": "myLinePathSeries", "var_name": "myLinePathSeries"}, {"original_string": "@NotNull\n  private final List<LineChartCustomRenderer> myCustomRenderers = new ArrayList<>();", "modifier": "@NotNull\n  private final", "type": "List<LineChartCustomRenderer>", "declarator": "myCustomRenderers = new ArrayList<>()", "var_name": "myCustomRenderers"}, {"original_string": "@NotNull\n  private Color myMaxLineColor = Color.BLACK;", "modifier": "@NotNull\n  private", "type": "Color", "declarator": "myMaxLineColor = Color.BLACK", "var_name": "myMaxLineColor"}, {"original_string": "private int myMaxLineMargin;", "modifier": "private", "type": "int", "declarator": "myMaxLineMargin", "var_name": "myMaxLineMargin"}, {"original_string": "private boolean myShowMaxLine;", "modifier": "private", "type": "boolean", "declarator": "myShowMaxLine", "var_name": "myShowMaxLine"}, {"original_string": "private int myXOffset = 0;", "modifier": "private", "type": "int", "declarator": "myXOffset = 0", "var_name": "myXOffset"}, {"original_string": "private int myYOffset = 0;", "modifier": "private", "type": "int", "declarator": "myYOffset = 0", "var_name": "myYOffset"}, {"original_string": "private int myTopPadding = 0;", "modifier": "private", "type": "int", "declarator": "myTopPadding = 0", "var_name": "myTopPadding"}, {"original_string": "private int mNextLineColorIndex;", "modifier": "private", "type": "int", "declarator": "mNextLineColorIndex", "var_name": "mNextLineColorIndex"}, {"original_string": "private boolean myRedraw;", "modifier": "private", "type": "boolean", "declarator": "myRedraw", "var_name": "myRedraw"}, {"original_string": "private boolean myFillEndGap;", "modifier": "private", "type": "boolean", "declarator": "myFillEndGap", "var_name": "myFillEndGap"}, {"original_string": "@NotNull\n  private final LineChartReducer myReducer;", "modifier": "@NotNull\n  private final", "type": "LineChartReducer", "declarator": "myReducer", "var_name": "myReducer"}, {"original_string": "private long myRedraws;", "modifier": "private", "type": "long", "declarator": "myRedraws", "var_name": "myRedraws"}, {"original_string": "private long myDraws;", "modifier": "private", "type": "long", "declarator": "myDraws", "var_name": "myDraws"}, {"original_string": "private long myLastCount;", "modifier": "private", "type": "long", "declarator": "myLastCount", "var_name": "myLastCount"}, {"original_string": "private long myLastDraws;", "modifier": "private", "type": "long", "declarator": "myLastDraws", "var_name": "myLastDraws"}, {"original_string": "private long myLastRedraws;", "modifier": "private", "type": "long", "declarator": "myLastRedraws", "var_name": "myLastRedraws"}, {"original_string": "private Map<LineConfig, DashInfo> myDashInfoCache = new HashMap<>();", "modifier": "private", "type": "Map<LineConfig, DashInfo>", "declarator": "myDashInfoCache = new HashMap<>()", "var_name": "myDashInfoCache"}], "methods": [{"identifier": "LineChart", "parameters": "(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " LineChart(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "full_signature": "@VisibleForTesting public  LineChart(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "class_method_signature": "LineChart.LineChart(@NotNull LineChartModel model, @NotNull LineChartReducer reducer)", "testcase": false, "constructor": true}, {"identifier": "LineChart", "parameters": "(@NotNull LineChartModel model)", "modifiers": "public", "return": "", "signature": " LineChart(@NotNull LineChartModel model)", "full_signature": "public  LineChart(@NotNull LineChartModel model)", "class_method_signature": "LineChart.LineChart(@NotNull LineChartModel model)", "testcase": false, "constructor": true}, {"identifier": "LineChart", "parameters": "(@NotNull List<RangedContinuousSeries> data)", "modifiers": "public", "return": "", "signature": " LineChart(@NotNull List<RangedContinuousSeries> data)", "full_signature": "public  LineChart(@NotNull List<RangedContinuousSeries> data)", "class_method_signature": "LineChart.LineChart(@NotNull List<RangedContinuousSeries> data)", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "modifiers": "public", "return": "void", "signature": "void configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "full_signature": "public void configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "class_method_signature": "LineChart.configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "addCustomRenderer", "parameters": "(@NotNull LineChartCustomRenderer renderer)", "modifiers": "public", "return": "void", "signature": "void addCustomRenderer(@NotNull LineChartCustomRenderer renderer)", "full_signature": "public void addCustomRenderer(@NotNull LineChartCustomRenderer renderer)", "class_method_signature": "LineChart.addCustomRenderer(@NotNull LineChartCustomRenderer renderer)", "testcase": false, "constructor": false}, {"identifier": "getLineConfig", "parameters": "(RangedContinuousSeries rangedContinuousSeries)", "modifiers": "@NotNull public", "return": "LineConfig", "signature": "LineConfig getLineConfig(RangedContinuousSeries rangedContinuousSeries)", "full_signature": "@NotNull public LineConfig getLineConfig(RangedContinuousSeries rangedContinuousSeries)", "class_method_signature": "LineChart.getLineConfig(RangedContinuousSeries rangedContinuousSeries)", "testcase": false, "constructor": false}, {"identifier": "modelChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void modelChanged()", "full_signature": "private void modelChanged()", "class_method_signature": "LineChart.modelChanged()", "testcase": false, "constructor": false}, {"identifier": "redraw", "parameters": "(@NotNull Dimension dim)", "modifiers": "private", "return": "void", "signature": "void redraw(@NotNull Dimension dim)", "full_signature": "private void redraw(@NotNull Dimension dim)", "class_method_signature": "LineChart.redraw(@NotNull Dimension dim)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2d, Dimension dim)", "modifiers": "@Override protected", "return": "void", "signature": "void draw(Graphics2D g2d, Dimension dim)", "full_signature": "@Override protected void draw(Graphics2D g2d, Dimension dim)", "class_method_signature": "LineChart.draw(Graphics2D g2d, Dimension dim)", "testcase": false, "constructor": false}, {"identifier": "drawLine", "parameters": "(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "modifiers": "public static", "return": "void", "signature": "void drawLine(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "full_signature": "public static void drawLine(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "class_method_signature": "LineChart.drawLine(@NotNull Graphics2D g2d,\n                              @NotNull Path2D path,\n                              @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "setShowMaxLine", "parameters": "(boolean showMaxLine)", "modifiers": "public", "return": "void", "signature": "void setShowMaxLine(boolean showMaxLine)", "full_signature": "public void setShowMaxLine(boolean showMaxLine)", "class_method_signature": "LineChart.setShowMaxLine(boolean showMaxLine)", "testcase": false, "constructor": false}, {"identifier": "setMaxLineColor", "parameters": "(@NotNull Color maxLineColor)", "modifiers": "public", "return": "void", "signature": "void setMaxLineColor(@NotNull Color maxLineColor)", "full_signature": "public void setMaxLineColor(@NotNull Color maxLineColor)", "class_method_signature": "LineChart.setMaxLineColor(@NotNull Color maxLineColor)", "testcase": false, "constructor": false}, {"identifier": "setMaxLineMargin", "parameters": "(int maxLineMargin)", "modifiers": "public", "return": "void", "signature": "void setMaxLineMargin(int maxLineMargin)", "full_signature": "public void setMaxLineMargin(int maxLineMargin)", "class_method_signature": "LineChart.setMaxLineMargin(int maxLineMargin)", "testcase": false, "constructor": false}, {"identifier": "computeAdjustedDashPhase", "parameters": "(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "modifiers": "private", "return": "void", "signature": "void computeAdjustedDashPhase(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "full_signature": "private void computeAdjustedDashPhase(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "class_method_signature": "LineChart.computeAdjustedDashPhase(@NotNull DashInfo dashInfo,\n                                        @NotNull LineConfig config,\n                                        @NotNull Path2D path,\n                                        @NotNull Dimension dim,\n                                        double firstX,\n                                        double xMin,\n                                        double xLength,\n                                        double yLength)", "testcase": false, "constructor": false}, {"identifier": "setRenderOffset", "parameters": "(int xOffset, int yOffset)", "modifiers": "public", "return": "void", "signature": "void setRenderOffset(int xOffset, int yOffset)", "full_signature": "public void setRenderOffset(int xOffset, int yOffset)", "class_method_signature": "LineChart.setRenderOffset(int xOffset, int yOffset)", "testcase": false, "constructor": false}, {"identifier": "setTopPadding", "parameters": "(int padding)", "modifiers": "public", "return": "void", "signature": "void setTopPadding(int padding)", "full_signature": "public void setTopPadding(int padding)", "class_method_signature": "LineChart.setTopPadding(int padding)", "testcase": false, "constructor": false}, {"identifier": "setFillEndGap", "parameters": "(boolean fillEndGap)", "modifiers": "public", "return": "void", "signature": "void setFillEndGap(boolean fillEndGap)", "full_signature": "public void setFillEndGap(boolean fillEndGap)", "class_method_signature": "LineChart.setFillEndGap(boolean fillEndGap)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/chart/linechart/LineChart.java"}, "focal_method": {"identifier": "configure", "parameters": "(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "modifiers": "public", "return": "void", "body": "public void configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config) {\n    myLinesConfig.put(series, config);\n  }", "signature": "void configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "full_signature": "public void configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "class_method_signature": "LineChart.configure(@NotNull RangedContinuousSeries series, @NotNull LineConfig config)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}