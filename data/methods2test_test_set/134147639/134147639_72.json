{"test_class": {"identifier": "SignatureAlgorithmTest", "superclass": "", "interfaces": "", "fields": [], "file": "webauthn4j-core/src/test/java/com/webauthn4j/data/SignatureAlgorithmTest.java"}, "test_case": {"identifier": "create_test", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void create_test(){\n        assertAll(\n                () -> assertThat(SignatureAlgorithm.create(\"SHA256withECDSA\")).isEqualTo(SignatureAlgorithm.ES256),\n                () -> assertThat(SignatureAlgorithm.create(\"SHA384withECDSA\")).isEqualTo(SignatureAlgorithm.ES384),\n                () -> assertThat(SignatureAlgorithm.create(\"SHA512withECDSA\")).isEqualTo(SignatureAlgorithm.ES512),\n                () -> assertThat(SignatureAlgorithm.create(\"SHA1withRSA\")).isEqualTo(SignatureAlgorithm.RS1),\n                () -> assertThat(SignatureAlgorithm.create(\"SHA256withRSA\")).isEqualTo(SignatureAlgorithm.RS256),\n                () -> assertThat(SignatureAlgorithm.create(\"SHA384withRSA\")).isEqualTo(SignatureAlgorithm.RS384),\n                () -> assertThat(SignatureAlgorithm.create(\"SHA512withRSA\")).isEqualTo(SignatureAlgorithm.RS512)\n        );\n    }", "signature": "void create_test()", "full_signature": "@Test void create_test()", "class_method_signature": "SignatureAlgorithmTest.create_test()", "testcase": true, "constructor": false, "invocations": ["assertAll", "isEqualTo", "assertThat", "create", "isEqualTo", "assertThat", "create", "isEqualTo", "assertThat", "create", "isEqualTo", "assertThat", "create", "isEqualTo", "assertThat", "create", "isEqualTo", "assertThat", "create", "isEqualTo", "assertThat", "create"]}, "focal_class": {"identifier": "SignatureAlgorithm", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final SignatureAlgorithm ES256 = new SignatureAlgorithm(\"SHA256withECDSA\", SHA256);", "modifier": "public static final", "type": "SignatureAlgorithm", "declarator": "ES256 = new SignatureAlgorithm(\"SHA256withECDSA\", SHA256)", "var_name": "ES256"}, {"original_string": "public static final SignatureAlgorithm ES384 = new SignatureAlgorithm(\"SHA384withECDSA\", SHA384);", "modifier": "public static final", "type": "SignatureAlgorithm", "declarator": "ES384 = new SignatureAlgorithm(\"SHA384withECDSA\", SHA384)", "var_name": "ES384"}, {"original_string": "public static final SignatureAlgorithm ES512 = new SignatureAlgorithm(\"SHA512withECDSA\", SHA512);", "modifier": "public static final", "type": "SignatureAlgorithm", "declarator": "ES512 = new SignatureAlgorithm(\"SHA512withECDSA\", SHA512)", "var_name": "ES512"}, {"original_string": "public static final SignatureAlgorithm RS1   = new SignatureAlgorithm(\"SHA1withRSA\",     SHA1);", "modifier": "public static final", "type": "SignatureAlgorithm", "declarator": "RS1   = new SignatureAlgorithm(\"SHA1withRSA\",     SHA1)", "var_name": "RS1"}, {"original_string": "public static final SignatureAlgorithm RS256 = new SignatureAlgorithm(\"SHA256withRSA\", SHA256);", "modifier": "public static final", "type": "SignatureAlgorithm", "declarator": "RS256 = new SignatureAlgorithm(\"SHA256withRSA\", SHA256)", "var_name": "RS256"}, {"original_string": "public static final SignatureAlgorithm RS384 = new SignatureAlgorithm(\"SHA384withRSA\", SHA384);", "modifier": "public static final", "type": "SignatureAlgorithm", "declarator": "RS384 = new SignatureAlgorithm(\"SHA384withRSA\", SHA384)", "var_name": "RS384"}, {"original_string": "public static final SignatureAlgorithm RS512 = new SignatureAlgorithm(\"SHA512withRSA\", SHA512);", "modifier": "public static final", "type": "SignatureAlgorithm", "declarator": "RS512 = new SignatureAlgorithm(\"SHA512withRSA\", SHA512)", "var_name": "RS512"}, {"original_string": "private final String jcaName;", "modifier": "private final", "type": "String", "declarator": "jcaName", "var_name": "jcaName"}, {"original_string": "private final MessageDigestAlgorithm messageDigestAlgorithm;", "modifier": "private final", "type": "MessageDigestAlgorithm", "declarator": "messageDigestAlgorithm", "var_name": "messageDigestAlgorithm"}], "methods": [{"identifier": "SignatureAlgorithm", "parameters": "(String jcaName, MessageDigestAlgorithm messageDigestAlgorithm)", "modifiers": "private", "return": "", "signature": " SignatureAlgorithm(String jcaName, MessageDigestAlgorithm messageDigestAlgorithm)", "full_signature": "private  SignatureAlgorithm(String jcaName, MessageDigestAlgorithm messageDigestAlgorithm)", "class_method_signature": "SignatureAlgorithm.SignatureAlgorithm(String jcaName, MessageDigestAlgorithm messageDigestAlgorithm)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(String jcaName)", "modifiers": "@JsonCreator public static", "return": "SignatureAlgorithm", "signature": "SignatureAlgorithm create(String jcaName)", "full_signature": "@JsonCreator public static SignatureAlgorithm create(String jcaName)", "class_method_signature": "SignatureAlgorithm.create(String jcaName)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String jcaName, String messageDigestJcaName)", "modifiers": "public static", "return": "SignatureAlgorithm", "signature": "SignatureAlgorithm create(String jcaName, String messageDigestJcaName)", "full_signature": "public static SignatureAlgorithm create(String jcaName, String messageDigestJcaName)", "class_method_signature": "SignatureAlgorithm.create(String jcaName, String messageDigestJcaName)", "testcase": false, "constructor": false}, {"identifier": "getJcaName", "parameters": "()", "modifiers": "@JsonValue public", "return": "String", "signature": "String getJcaName()", "full_signature": "@JsonValue public String getJcaName()", "class_method_signature": "SignatureAlgorithm.getJcaName()", "testcase": false, "constructor": false}, {"identifier": "getMessageDigestAlgorithm", "parameters": "()", "modifiers": "public", "return": "MessageDigestAlgorithm", "signature": "MessageDigestAlgorithm getMessageDigestAlgorithm()", "full_signature": "public MessageDigestAlgorithm getMessageDigestAlgorithm()", "class_method_signature": "SignatureAlgorithm.getMessageDigestAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SignatureAlgorithm.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SignatureAlgorithm.hashCode()", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/data/SignatureAlgorithm.java"}, "focal_method": {"identifier": "create", "parameters": "(String jcaName)", "modifiers": "@JsonCreator public static", "return": "SignatureAlgorithm", "body": "@JsonCreator\n    public static SignatureAlgorithm create(String jcaName){\n        switch (jcaName){\n            case \"SHA256withECDSA\":\n                return ES256;\n            case \"SHA384withECDSA\":\n                return ES384;\n            case \"SHA512withECDSA\":\n                return ES512;\n            case \"SHA1withRSA\":\n                return RS1;\n            case \"SHA256withRSA\":\n                return RS256;\n            case \"SHA384withRSA\":\n                return RS384;\n            case \"SHA512withRSA\":\n                return RS512;\n            default:\n                throw new IllegalArgumentException(String.format(\"jcaName %s is not supported.\", jcaName));\n        }\n    }", "signature": "SignatureAlgorithm create(String jcaName)", "full_signature": "@JsonCreator public static SignatureAlgorithm create(String jcaName)", "class_method_signature": "SignatureAlgorithm.create(String jcaName)", "testcase": false, "constructor": false, "invocations": ["format"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}