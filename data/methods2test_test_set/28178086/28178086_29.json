{"test_class": {"identifier": "TramoSeatsXmlProcessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/demetra/xml/sa/tramoseats/TramoSeatsXmlProcessorTest.java"}, "test_case": {"identifier": "testTramoRequests", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTramoRequests() {\n//        long t0 = System.currentTimeMillis();\n        int N = 10;\n        XmlTramoRequests requests = new XmlTramoRequests();\n        for (int i = 0; i < N; ++i) {\n            XmlTramoAtomicRequest cur = new XmlTramoAtomicRequest();\n            cur.defaultSpecification = \"TRfull\";\n            cur.series = new XmlTs();\n            XmlTsData.MARSHALLER.marshal(Data.P, cur.series);\n            cur.series.setName(\"P\"+i);\n            requests.getItems().add(cur);\n        }\n        //requests.getOutputFilter().add(\"arima.*\");\n        requests.getOutputFilter().add(\"likelihood.*\");\n        //requests.getOutputFilter().add(\"residuals.*\");\n        //requests.getOutputFilter().add(\"*_f\");\n        TramoSeatsXmlProcessor processor = new TramoSeatsXmlProcessor();\n        XmlInformationSet rslt = processor.process(requests);\n//        long t1 = System.currentTimeMillis();\n//        System.out.println(t1 - t0);\n\n        InformationSet all = rslt.create();\n        for (int i = 0; i < N; ++i) {\n            assertTrue(null != all.search(\"P\" + i + \".likelihood.aic\", Double.class));\n        }\n    }", "signature": "void testTramoRequests()", "full_signature": "@Test public void testTramoRequests()", "class_method_signature": "TramoSeatsXmlProcessorTest.testTramoRequests()", "testcase": true, "constructor": false, "invocations": ["marshal", "setName", "add", "getItems", "add", "getOutputFilter", "process", "create", "assertTrue", "search"]}, "focal_class": {"identifier": "TramoSeatsXmlProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] DEF_SA = new String[]{\"final.y\", \"final.t\", \"final.s\", \"final.i\", \"final.sa\", \"final.ycal\", \"final.y_f\", \"final.t_f\", \"final.s_f\", \"final.i_f\", \"final.sa_f\"};", "modifier": "private static final", "type": "String[]", "declarator": "DEF_SA = new String[]{\"final.y\", \"final.t\", \"final.s\", \"final.i\", \"final.sa\", \"final.ycal\", \"final.y_f\", \"final.t_f\", \"final.s_f\", \"final.i_f\", \"final.sa_f\"}", "var_name": "DEF_SA"}], "methods": [{"identifier": "process", "parameters": "(XmlTramoRequest request)", "modifiers": "public", "return": "XmlInformationSet", "signature": "XmlInformationSet process(XmlTramoRequest request)", "full_signature": "public XmlInformationSet process(XmlTramoRequest request)", "class_method_signature": "TramoSeatsXmlProcessor.process(XmlTramoRequest request)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(XmlTramoSeatsRequest request)", "modifiers": "public", "return": "XmlInformationSet", "signature": "XmlInformationSet process(XmlTramoSeatsRequest request)", "full_signature": "public XmlInformationSet process(XmlTramoSeatsRequest request)", "class_method_signature": "TramoSeatsXmlProcessor.process(XmlTramoSeatsRequest request)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final XmlTramoRequests request)", "modifiers": "public", "return": "XmlInformationSet", "signature": "XmlInformationSet process(final XmlTramoRequests request)", "full_signature": "public XmlInformationSet process(final XmlTramoRequests request)", "class_method_signature": "TramoSeatsXmlProcessor.process(final XmlTramoRequests request)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(XmlTramoSeatsRequests request)", "modifiers": "public", "return": "XmlInformationSet", "signature": "XmlInformationSet process(XmlTramoSeatsRequests request)", "full_signature": "public XmlInformationSet process(XmlTramoSeatsRequests request)", "class_method_signature": "TramoSeatsXmlProcessor.process(XmlTramoSeatsRequests request)", "testcase": false, "constructor": false}, {"identifier": "specification", "parameters": "(XmlTramoAtomicRequest request)", "modifiers": "public static", "return": "TramoSpecification", "signature": "TramoSpecification specification(XmlTramoAtomicRequest request)", "full_signature": "public static TramoSpecification specification(XmlTramoAtomicRequest request)", "class_method_signature": "TramoSeatsXmlProcessor.specification(XmlTramoAtomicRequest request)", "testcase": false, "constructor": false}, {"identifier": "context", "parameters": "(XmlProcessingContext ctx)", "modifiers": "public static", "return": "ProcessingContext", "signature": "ProcessingContext context(XmlProcessingContext ctx)", "full_signature": "public static ProcessingContext context(XmlProcessingContext ctx)", "class_method_signature": "TramoSeatsXmlProcessor.context(XmlProcessingContext ctx)", "testcase": false, "constructor": false}, {"identifier": "specification", "parameters": "(XmlTramoSeatsAtomicRequest request)", "modifiers": "public static", "return": "TramoSeatsSpecification", "signature": "TramoSeatsSpecification specification(XmlTramoSeatsAtomicRequest request)", "full_signature": "public static TramoSeatsSpecification specification(XmlTramoSeatsAtomicRequest request)", "class_method_signature": "TramoSeatsXmlProcessor.specification(XmlTramoSeatsAtomicRequest request)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/demetra/xml/sa/tramoseats/TramoSeatsXmlProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(XmlTramoRequest request)", "modifiers": "public", "return": "XmlInformationSet", "body": "public XmlInformationSet process(XmlTramoRequest request) {\n        // specification\n        TramoSpecification spec = specification(request);\n        Ts s = XmlTs.TS_UNMARSHALLER.unmarshal(request.series);\n        if (s == null) {\n            return null;\n        }\n        if (s.hasData() == TsStatus.Undefined) {\n            s.load(TsInformationType.Data);\n        }\n        if (spec == null || s.getTsData() == null) {\n            return null;\n        }\n        ProcessingContext ctx = context(request.context);\n        IProcessing<TsData, PreprocessingModel> processing = TramoProcessingFactory.instance.generateProcessing(spec, ctx);\n        PreprocessingModel model = processing.process(s.getTsData());\n        TreeSet<String> set = new TreeSet<>();\n        List<String> items = request.getOutputFilter();\n        set.addAll(items);\n        InformationSet info = InformationSetHelper.fromProcResults(model, set);\n        XmlInformationSet xinfo = new XmlInformationSet();\n        if (request.getFlat()) {\n            xinfo.flatCopy(info);\n        } else {\n            xinfo.copy(info);\n        }\n        return xinfo;\n    }", "signature": "XmlInformationSet process(XmlTramoRequest request)", "full_signature": "public XmlInformationSet process(XmlTramoRequest request)", "class_method_signature": "TramoSeatsXmlProcessor.process(XmlTramoRequest request)", "testcase": false, "constructor": false, "invocations": ["specification", "unmarshal", "hasData", "load", "getTsData", "context", "generateProcessing", "process", "getTsData", "getOutputFilter", "addAll", "fromProcResults", "getFlat", "flatCopy", "copy"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}