{"test_class": {"identifier": "SimpleMongoLockTest", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "@Autowired\n  private MongoTemplate mongoTemplate;", "modifier": "@Autowired\n  private", "type": "MongoTemplate", "declarator": "mongoTemplate", "var_name": "mongoTemplate"}, {"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}], "file": "distributed-lock-mongo/src/test/java/com/github/alturkovic/lock/mongo/impl/SimpleMongoLockTest.java"}, "test_case": {"identifier": "shouldRelease", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldRelease() {\n    mongoTemplate.insert(new LockDocument(\"1\", LocalDateTime.now().plusMinutes(1), \"abc\"), \"locks\");\n\n    final var released = lock.release(Collections.singletonList(\"1\"), \"locks\", \"abc\");\n    assertThat(released).isTrue();\n    assertThat(mongoTemplate.findById(\"1\", LockDocument.class, \"locks\")).isNull();\n  }", "signature": "void shouldRelease()", "full_signature": "@Test public void shouldRelease()", "class_method_signature": "SimpleMongoLockTest.shouldRelease()", "testcase": true, "constructor": false, "invocations": ["insert", "plusMinutes", "now", "release", "singletonList", "isTrue", "assertThat", "isNull", "assertThat", "findById"]}, "focal_class": {"identifier": "SimpleMongoLock", "superclass": "extends AbstractSimpleLock", "interfaces": "", "fields": [{"original_string": "private final MongoTemplate mongoTemplate;", "modifier": "private final", "type": "MongoTemplate", "declarator": "mongoTemplate", "var_name": "mongoTemplate"}], "methods": [{"identifier": "SimpleMongoLock", "parameters": "(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "modifiers": "public", "return": "", "signature": " SimpleMongoLock(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "full_signature": "public  SimpleMongoLock(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "class_method_signature": "SimpleMongoLock.SimpleMongoLock(final Supplier<String> tokenSupplier, final MongoTemplate mongoTemplate)", "testcase": false, "constructor": true}, {"identifier": "acquire", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "String", "signature": "String acquire(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected String acquire(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleMongoLock.acquire(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final String key, final String storeId, final String token)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean release(final String key, final String storeId, final String token)", "full_signature": "@Override protected boolean release(final String key, final String storeId, final String token)", "class_method_signature": "SimpleMongoLock.release(final String key, final String storeId, final String token)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean refresh(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected boolean refresh(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleMongoLock.refresh(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}], "file": "distributed-lock-mongo/src/main/java/com/github/alturkovic/lock/mongo/impl/SimpleMongoLock.java"}, "focal_method": {"identifier": "release", "parameters": "(final String key, final String storeId, final String token)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n  protected boolean release(final String key, final String storeId, final String token) {\n    final var deleted = mongoTemplate.remove(Query.query(Criteria.where(\"_id\").is(key).and(\"token\").is(token)), storeId);\n    final var released = deleted.getDeletedCount() == 1;\n    if (released) {\n      log.debug(\"Remove query successfully affected 1 record for key {} with token {} in store {}\", key, token, storeId);\n    } else if (deleted.getDeletedCount() > 0) {\n      log.error(\"Unexpected result from release for key {} with token {} in store {}, released {}\", key, token, storeId, deleted);\n    } else {\n      log.error(\"Remove query did not affect any records for key {} with token {} in store {}\", key, token, storeId);\n    }\n\n    return released;\n  }", "signature": "boolean release(final String key, final String storeId, final String token)", "full_signature": "@Override protected boolean release(final String key, final String storeId, final String token)", "class_method_signature": "SimpleMongoLock.release(final String key, final String storeId, final String token)", "testcase": false, "constructor": false, "invocations": ["remove", "query", "is", "and", "is", "where", "getDeletedCount", "debug", "getDeletedCount", "error", "error"]}, "repository": {"repo_id": 93310060, "url": "https://github.com/alturkovic/distributed-lock", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 77, "size": 282, "license": "licensed"}}