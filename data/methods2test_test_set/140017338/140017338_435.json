{"test_class": {"identifier": "RequestBuilderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RequestBuilderImpl requestBuilder;", "modifier": "private", "type": "RequestBuilderImpl", "declarator": "requestBuilder", "var_name": "requestBuilder"}], "file": "http-support/src/test/java/org/eclipse/sw360/antenna/http/RequestBuilderImplTest.java"}, "test_case": {"identifier": "testMultipleBodies", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testMultipleBodies() {\n        requestBuilder.body(body -> body.string(\"body1\", HttpConstants.CONTENT_TEXT_PLAIN));\n\n        requestBuilder.body(body -> body.string(\"body12\", HttpConstants.CONTENT_TEXT_PLAIN));\n    }", "signature": "void testMultipleBodies()", "full_signature": "@Test(expected = IllegalStateException.class) public void testMultipleBodies()", "class_method_signature": "RequestBuilderImplTest.testMultipleBodies()", "testcase": true, "constructor": false, "invocations": ["body", "string", "body", "string"]}, "focal_class": {"identifier": "RequestBuilderImpl", "superclass": "", "interfaces": "implements RequestBuilder", "fields": [{"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final Request.Builder requestBuilder;", "modifier": "private final", "type": "Request.Builder", "declarator": "requestBuilder", "var_name": "requestBuilder"}, {"original_string": "private final Headers.Builder headersBuilder;", "modifier": "private final", "type": "Headers.Builder", "declarator": "headersBuilder", "var_name": "headersBuilder"}, {"original_string": "private String httpMethod;", "modifier": "private", "type": "String", "declarator": "httpMethod", "var_name": "httpMethod"}, {"original_string": "private RequestBody body;", "modifier": "private", "type": "RequestBody", "declarator": "body", "var_name": "body"}, {"original_string": "private MultipartBody.Builder multipartBuilder;", "modifier": "private", "type": "MultipartBody.Builder", "declarator": "multipartBuilder", "var_name": "multipartBuilder"}], "methods": [{"identifier": "RequestBuilderImpl", "parameters": "(ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " RequestBuilderImpl(ObjectMapper mapper)", "full_signature": "public  RequestBuilderImpl(ObjectMapper mapper)", "class_method_signature": "RequestBuilderImpl.RequestBuilderImpl(ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "method", "parameters": "(Method method)", "modifiers": "@Override public", "return": "RequestBuilder", "signature": "RequestBuilder method(Method method)", "full_signature": "@Override public RequestBuilder method(Method method)", "class_method_signature": "RequestBuilderImpl.method(Method method)", "testcase": false, "constructor": false}, {"identifier": "uri", "parameters": "(String uri)", "modifiers": "@Override public", "return": "RequestBuilder", "signature": "RequestBuilder uri(String uri)", "full_signature": "@Override public RequestBuilder uri(String uri)", "class_method_signature": "RequestBuilderImpl.uri(String uri)", "testcase": false, "constructor": false}, {"identifier": "header", "parameters": "(String name, String value)", "modifiers": "@Override public", "return": "RequestBuilder", "signature": "RequestBuilder header(String name, String value)", "full_signature": "@Override public RequestBuilder header(String name, String value)", "class_method_signature": "RequestBuilderImpl.header(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "body", "parameters": "(Consumer<RequestBodyBuilder> bodyProducer)", "modifiers": "@Override public", "return": "RequestBuilder", "signature": "RequestBuilder body(Consumer<RequestBodyBuilder> bodyProducer)", "full_signature": "@Override public RequestBuilder body(Consumer<RequestBodyBuilder> bodyProducer)", "class_method_signature": "RequestBuilderImpl.body(Consumer<RequestBodyBuilder> bodyProducer)", "testcase": false, "constructor": false}, {"identifier": "multiPart", "parameters": "(String name, Consumer<RequestBodyBuilder> partProducer)", "modifiers": "@Override public", "return": "RequestBuilder", "signature": "RequestBuilder multiPart(String name, Consumer<RequestBodyBuilder> partProducer)", "full_signature": "@Override public RequestBuilder multiPart(String name, Consumer<RequestBodyBuilder> partProducer)", "class_method_signature": "RequestBuilderImpl.multiPart(String name, Consumer<RequestBodyBuilder> partProducer)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "()", "modifiers": "public", "return": "Request", "signature": "Request build()", "full_signature": "public Request build()", "class_method_signature": "RequestBuilderImpl.build()", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "()", "modifiers": "", "return": "Headers", "signature": "Headers getHeaders()", "full_signature": " Headers getHeaders()", "class_method_signature": "RequestBuilderImpl.getHeaders()", "testcase": false, "constructor": false}, {"identifier": "getBody", "parameters": "()", "modifiers": "", "return": "RequestBody", "signature": "RequestBody getBody()", "full_signature": " RequestBody getBody()", "class_method_signature": "RequestBuilderImpl.getBody()", "testcase": false, "constructor": false}], "file": "http-support/src/main/java/org/eclipse/sw360/antenna/http/RequestBuilderImpl.java"}, "focal_method": {"identifier": "body", "parameters": "(Consumer<RequestBodyBuilder> bodyProducer)", "modifiers": "@Override public", "return": "RequestBuilder", "body": "@Override\n    public RequestBuilder body(Consumer<RequestBodyBuilder> bodyProducer) {\n        if (multipartBuilder != null) {\n            throw new IllegalStateException(\"A normal body cannot be added to a multipart request\");\n        }\n        if (getBody() != null) {\n            throw new IllegalStateException(\"A request can only have a single body\");\n        }\n\n        RequestBodyBuilderImpl bodyBuilder = new RequestBodyBuilderImpl(mapper);\n        bodyProducer.accept(bodyBuilder);\n\n        body = bodyBuilder.getBody();\n        return this;\n    }", "signature": "RequestBuilder body(Consumer<RequestBodyBuilder> bodyProducer)", "full_signature": "@Override public RequestBuilder body(Consumer<RequestBodyBuilder> bodyProducer)", "class_method_signature": "RequestBuilderImpl.body(Consumer<RequestBodyBuilder> bodyProducer)", "testcase": false, "constructor": false, "invocations": ["getBody", "accept", "getBody"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}