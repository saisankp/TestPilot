{"test_class": {"identifier": "PolynomialTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final double NO_DELTA = 0;", "modifier": "static final", "type": "double", "declarator": "NO_DELTA = 0", "var_name": "NO_DELTA"}, {"original_string": "static final double A = 123.456, B = 654.123, C = 741.963;", "modifier": "static final", "type": "double", "declarator": "A = 123.456", "var_name": "A"}, {"original_string": "static final double EPS = Polynomial.getEpsilon();", "modifier": "static final", "type": "double", "declarator": "EPS = Polynomial.getEpsilon()", "var_name": "EPS"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/polynomials/PolynomialTest.java"}, "test_case": {"identifier": "testValueOf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValueOf() {\n        assertCoefficientsEquals(new double[]{0}, valueOf(0));\n        assertCoefficientsEquals(new double[]{1}, valueOf(1));\n        assertCoefficientsEquals(new double[]{1}, valueOf(1, 0));\n        assertCoefficientsEquals(new double[]{A, B, C}, valueOf(A, B, C));\n        assertCoefficientsEquals(new double[]{A}, valueOf(A));\n        assertCoefficientsEquals(new double[]{EPS}, valueOf(EPS));\n    }", "signature": "void testValueOf()", "full_signature": "@Test public void testValueOf()", "class_method_signature": "PolynomialTest.testValueOf()", "testcase": true, "constructor": false, "invocations": ["assertCoefficientsEquals", "valueOf", "assertCoefficientsEquals", "valueOf", "assertCoefficientsEquals", "valueOf", "assertCoefficientsEquals", "valueOf", "assertCoefficientsEquals", "valueOf", "assertCoefficientsEquals", "valueOf"]}, "focal_class": {"identifier": "Polynomial", "superclass": "", "interfaces": "implements IReadDataBlock", "fields": [{"original_string": "public static final Polynomial ZERO = new Polynomial(Polynomial.Doubles.zero(), 0);", "modifier": "public static final", "type": "Polynomial", "declarator": "ZERO = new Polynomial(Polynomial.Doubles.zero(), 0)", "var_name": "ZERO"}, {"original_string": "public static final Polynomial ONE = new Polynomial(Polynomial.Doubles.one(), 0);", "modifier": "public static final", "type": "Polynomial", "declarator": "ONE = new Polynomial(Polynomial.Doubles.one(), 0)", "var_name": "ONE"}, {"original_string": "private final double[] m_c;", "modifier": "private final", "type": "double[]", "declarator": "m_c", "var_name": "m_c"}, {"original_string": "private final int degree;", "modifier": "private final", "type": "int", "declarator": "degree", "var_name": "degree"}, {"original_string": "private final AtomicReference<Complex[]> defRoots = new AtomicReference<>();", "modifier": "private final", "type": "AtomicReference<Complex[]>", "declarator": "defRoots = new AtomicReference<>()", "var_name": "defRoots"}, {"original_string": "private static double EPSILON = 1e-9;", "modifier": "private static", "type": "double", "declarator": "EPSILON = 1e-9", "var_name": "EPSILON"}, {"original_string": "private static final AtomicReference<IRootsSolver> defSolver= new AtomicReference<>(new MullerNewtonSolver());", "modifier": "private static final", "type": "AtomicReference<IRootsSolver>", "declarator": "defSolver= new AtomicReference<>(new MullerNewtonSolver())", "var_name": "defSolver"}], "methods": [{"identifier": "divide", "parameters": "(final Polynomial num, final Polynomial denom)", "modifiers": "public static", "return": "Division", "signature": "Division divide(final Polynomial num, final Polynomial denom)", "full_signature": "public static Division divide(final Polynomial num, final Polynomial denom)", "class_method_signature": "Polynomial.divide(final Polynomial num, final Polynomial denom)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final double[] num, int numdegree, final double[] denom, int denumdegree)", "modifiers": "static", "return": "double[]", "signature": "double[] divide(final double[] num, int numdegree, final double[] denom, int denumdegree)", "full_signature": "static double[] divide(final double[] num, int numdegree, final double[] denom, int denumdegree)", "class_method_signature": "Polynomial.divide(final double[] num, int numdegree, final double[] denom, int denumdegree)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(double[] buffer, int start)", "modifiers": "@Override public", "return": "void", "signature": "void copyTo(double[] buffer, int start)", "full_signature": "@Override public void copyTo(double[] buffer, int start)", "class_method_signature": "Polynomial.copyTo(double[] buffer, int start)", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLength()", "full_signature": "@Override public int getLength()", "class_method_signature": "Polynomial.getLength()", "testcase": false, "constructor": false}, {"identifier": "rextract", "parameters": "(int start, int length)", "modifiers": "@Override public", "return": "IReadDataBlock", "signature": "IReadDataBlock rextract(int start, int length)", "full_signature": "@Override public IReadDataBlock rextract(int start, int length)", "class_method_signature": "Polynomial.rextract(int start, int length)", "testcase": false, "constructor": false}, {"identifier": "isSymmetric", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isSymmetric()", "full_signature": " boolean isSymmetric()", "class_method_signature": "Polynomial.isSymmetric()", "testcase": false, "constructor": false}, {"identifier": "checkRoots", "parameters": "(final Complex[] roots)", "modifiers": "public static", "return": "Complex[]", "signature": "Complex[] checkRoots(final Complex[] roots)", "full_signature": "public static Complex[] checkRoots(final Complex[] roots)", "class_method_signature": "Polynomial.checkRoots(final Complex[] roots)", "testcase": false, "constructor": false}, {"identifier": "getEpsilon", "parameters": "()", "modifiers": "public static", "return": "double", "signature": "double getEpsilon()", "full_signature": "public static double getEpsilon()", "class_method_signature": "Polynomial.getEpsilon()", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(double[] coefficients)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial of(double[] coefficients)", "full_signature": "public static Polynomial of(double[] coefficients)", "class_method_signature": "Polynomial.of(double[] coefficients)", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(double[] coefficients)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial copyOf(double[] coefficients)", "full_signature": "public static Polynomial copyOf(double[] coefficients)", "class_method_signature": "Polynomial.copyOf(double[] coefficients)", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(double[] coefficients, int start, int end)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial copyOf(double[] coefficients, int start, int end)", "full_signature": "public static Polynomial copyOf(double[] coefficients, int start, int end)", "class_method_signature": "Polynomial.copyOf(double[] coefficients, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(double firstCoefficient, double... nextCoefficients)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial valueOf(double firstCoefficient, double... nextCoefficients)", "full_signature": "public static Polynomial valueOf(double firstCoefficient, double... nextCoefficients)", "class_method_signature": "Polynomial.valueOf(double firstCoefficient, double... nextCoefficients)", "testcase": false, "constructor": false}, {"identifier": "fromComplexRoots", "parameters": "(Complex[] roots)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial fromComplexRoots(Complex[] roots)", "full_signature": "public static Polynomial fromComplexRoots(Complex[] roots)", "class_method_signature": "Polynomial.fromComplexRoots(Complex[] roots)", "testcase": false, "constructor": false}, {"identifier": "fromComplexRoots", "parameters": "(final Complex[] roots, final double c)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial fromComplexRoots(final Complex[] roots, final double c)", "full_signature": "public static Polynomial fromComplexRoots(final Complex[] roots, final double c)", "class_method_signature": "Polynomial.fromComplexRoots(final Complex[] roots, final double c)", "testcase": false, "constructor": false}, {"identifier": "fromData", "parameters": "(IReadDataBlock data)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial fromData(IReadDataBlock data)", "full_signature": "public static Polynomial fromData(IReadDataBlock data)", "class_method_signature": "Polynomial.fromData(IReadDataBlock data)", "testcase": false, "constructor": false}, {"identifier": "factor", "parameters": "(double c, int n)", "modifiers": "public static", "return": "Polynomial", "signature": "Polynomial factor(double c, int n)", "full_signature": "public static Polynomial factor(double c, int n)", "class_method_signature": "Polynomial.factor(double c, int n)", "testcase": false, "constructor": false}, {"identifier": "setEpsilon", "parameters": "(final double value)", "modifiers": "public static", "return": "void", "signature": "void setEpsilon(final double value)", "full_signature": "public static void setEpsilon(final double value)", "class_method_signature": "Polynomial.setEpsilon(final double value)", "testcase": false, "constructor": false}, {"identifier": "smooth", "parameters": "(final Complex c)", "modifiers": "private static", "return": "Complex", "signature": "Complex smooth(final Complex c)", "full_signature": "private static Complex smooth(final Complex c)", "class_method_signature": "Polynomial.smooth(final Complex c)", "testcase": false, "constructor": false}, {"identifier": "getDefRootsSearcher", "parameters": "()", "modifiers": "public static", "return": "IRootsSolver", "signature": "IRootsSolver getDefRootsSearcher()", "full_signature": "public static IRootsSolver getDefRootsSearcher()", "class_method_signature": "Polynomial.getDefRootsSearcher()", "testcase": false, "constructor": false}, {"identifier": "setDefRootsSearcher", "parameters": "(final IRootsSolver value)", "modifiers": "public static", "return": "void", "signature": "void setDefRootsSearcher(final IRootsSolver value)", "full_signature": "public static void setDefRootsSearcher(final IRootsSolver value)", "class_method_signature": "Polynomial.setDefRootsSearcher(final IRootsSolver value)", "testcase": false, "constructor": false}, {"identifier": "Polynomial", "parameters": "(final double[] coefficients, final int degree)", "modifiers": "private", "return": "", "signature": " Polynomial(final double[] coefficients, final int degree)", "full_signature": "private  Polynomial(final double[] coefficients, final int degree)", "class_method_signature": "Polynomial.Polynomial(final double[] coefficients, final int degree)", "testcase": false, "constructor": true}, {"identifier": "adjustDegree", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial adjustDegree()", "full_signature": "public Polynomial adjustDegree()", "class_method_signature": "Polynomial.adjustDegree()", "testcase": false, "constructor": false}, {"identifier": "derivate", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial derivate()", "full_signature": "public Polynomial derivate()", "class_method_signature": "Polynomial.derivate()", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final double d)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial divide(final double d)", "full_signature": "public Polynomial divide(final double d)", "class_method_signature": "Polynomial.divide(final double d)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final Polynomial r)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial divide(final Polynomial r)", "full_signature": "public Polynomial divide(final Polynomial r)", "class_method_signature": "Polynomial.divide(final Polynomial r)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "Polynomial.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Polynomial other, double epsilon)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Polynomial other, double epsilon)", "full_signature": "public boolean equals(Polynomial other, double epsilon)", "class_method_signature": "Polynomial.equals(Polynomial other, double epsilon)", "testcase": false, "constructor": false}, {"identifier": "evaluateAt", "parameters": "(final Complex x)", "modifiers": "public", "return": "Complex", "signature": "Complex evaluateAt(final Complex x)", "full_signature": "public Complex evaluateAt(final Complex x)", "class_method_signature": "Polynomial.evaluateAt(final Complex x)", "testcase": false, "constructor": false}, {"identifier": "evaluateAt", "parameters": "(final double x)", "modifiers": "public", "return": "double", "signature": "double evaluateAt(final double x)", "full_signature": "public double evaluateAt(final double x)", "class_method_signature": "Polynomial.evaluateAt(final double x)", "testcase": false, "constructor": false}, {"identifier": "revaluate", "parameters": "(final double[] c, final double x)", "modifiers": "public static", "return": "double", "signature": "double revaluate(final double[] c, final double x)", "full_signature": "public static double revaluate(final double[] c, final double x)", "class_method_signature": "Polynomial.revaluate(final double[] c, final double x)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final double[] c, final double x)", "modifiers": "public static", "return": "double", "signature": "double evaluate(final double[] c, final double x)", "full_signature": "public static double evaluate(final double[] c, final double x)", "class_method_signature": "Polynomial.evaluate(final double[] c, final double x)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final int degree, IntToDoubleFunction fn, final double x)", "modifiers": "public static", "return": "double", "signature": "double evaluate(final int degree, IntToDoubleFunction fn, final double x)", "full_signature": "public static double evaluate(final int degree, IntToDoubleFunction fn, final double x)", "class_method_signature": "Polynomial.evaluate(final int degree, IntToDoubleFunction fn, final double x)", "testcase": false, "constructor": false}, {"identifier": "evaluateAtFrequency", "parameters": "(final double w)", "modifiers": "public", "return": "Complex", "signature": "Complex evaluateAtFrequency(final double w)", "full_signature": "public Complex evaluateAtFrequency(final double w)", "class_method_signature": "Polynomial.evaluateAtFrequency(final double w)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int idx)", "modifiers": "@Override public", "return": "double", "signature": "double get(final int idx)", "full_signature": "@Override public double get(final int idx)", "class_method_signature": "Polynomial.get(final int idx)", "testcase": false, "constructor": false}, {"identifier": "getCoefficients", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCoefficients()", "full_signature": "public double[] getCoefficients()", "class_method_signature": "Polynomial.getCoefficients()", "testcase": false, "constructor": false}, {"identifier": "getDegree", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDegree()", "full_signature": "public int getDegree()", "class_method_signature": "Polynomial.getDegree()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Polynomial.hashCode()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "Polynomial.isZero()", "testcase": false, "constructor": false}, {"identifier": "isIdentity", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIdentity()", "full_signature": "public boolean isIdentity()", "class_method_signature": "Polynomial.isIdentity()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(double d)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial minus(double d)", "full_signature": "public Polynomial minus(double d)", "class_method_signature": "Polynomial.minus(double d)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final Polynomial r)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial minus(final Polynomial r)", "full_signature": "public Polynomial minus(final Polynomial r)", "class_method_signature": "Polynomial.minus(final Polynomial r)", "testcase": false, "constructor": false}, {"identifier": "mirror", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial mirror()", "full_signature": "public Polynomial mirror()", "class_method_signature": "Polynomial.mirror()", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial negate()", "full_signature": "public Polynomial negate()", "class_method_signature": "Polynomial.negate()", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final double d)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial plus(final double d)", "full_signature": "public Polynomial plus(final double d)", "class_method_signature": "Polynomial.plus(final double d)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final Polynomial r)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial plus(final Polynomial r)", "full_signature": "public Polynomial plus(final Polynomial r)", "class_method_signature": "Polynomial.plus(final Polynomial r)", "testcase": false, "constructor": false}, {"identifier": "roots", "parameters": "()", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] roots()", "full_signature": "public Complex[] roots()", "class_method_signature": "Polynomial.roots()", "testcase": false, "constructor": false}, {"identifier": "setRoots", "parameters": "(Complex[] roots)", "modifiers": "", "return": "void", "signature": "void setRoots(Complex[] roots)", "full_signature": " void setRoots(Complex[] roots)", "class_method_signature": "Polynomial.setRoots(Complex[] roots)", "testcase": false, "constructor": false}, {"identifier": "roots", "parameters": "(IRootsSolver searcher)", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] roots(IRootsSolver searcher)", "full_signature": "public Complex[] roots(IRootsSolver searcher)", "class_method_signature": "Polynomial.roots(IRootsSolver searcher)", "testcase": false, "constructor": false}, {"identifier": "smooth", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial smooth()", "full_signature": "public Polynomial smooth()", "class_method_signature": "Polynomial.smooth()", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final double d)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial times(final double d)", "full_signature": "public Polynomial times(final double d)", "class_method_signature": "Polynomial.times(final double d)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final Polynomial r)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial times(final Polynomial r)", "full_signature": "public Polynomial times(final Polynomial r)", "class_method_signature": "Polynomial.times(final Polynomial r)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final Polynomial r, boolean computeroots)", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial times(final Polynomial r, boolean computeroots)", "full_signature": "public Polynomial times(final Polynomial r, boolean computeroots)", "class_method_signature": "Polynomial.times(final Polynomial r, boolean computeroots)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Polynomial.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final char var, final boolean bSmooth)", "modifiers": "public", "return": "String", "signature": "String toString(final char var, final boolean bSmooth)", "full_signature": "public String toString(final char var, final boolean bSmooth)", "class_method_signature": "Polynomial.toString(final char var, final boolean bSmooth)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final String fmt, final char var,\n            final boolean bSmooth)", "modifiers": "public", "return": "String", "signature": "String toString(final String fmt, final char var,\n            final boolean bSmooth)", "full_signature": "public String toString(final String fmt, final char var,\n            final boolean bSmooth)", "class_method_signature": "Polynomial.toString(final String fmt, final char var,\n            final boolean bSmooth)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/polynomials/Polynomial.java"}, "focal_method": {"identifier": "valueOf", "parameters": "(double firstCoefficient, double... nextCoefficients)", "modifiers": "public static", "return": "Polynomial", "body": "public static Polynomial valueOf(double firstCoefficient, double... nextCoefficients) {\n        if (Arrays2.isNullOrEmpty(nextCoefficients)) {\n            if (firstCoefficient == 0.0) {\n                return Polynomial.ZERO;\n            }\n            if (firstCoefficient == 1.0) {\n                return Polynomial.ONE;\n            }\n            return new Polynomial(new double[]{firstCoefficient}, 0);\n        }\n        double[] result = Doubles.fromDegree(nextCoefficients.length);\n        result[0] = firstCoefficient;\n        System.arraycopy(nextCoefficients, 0, result, 1, nextCoefficients.length);\n        return new Polynomial(result, Doubles.getUsedDegree(result));\n    }", "signature": "Polynomial valueOf(double firstCoefficient, double... nextCoefficients)", "full_signature": "public static Polynomial valueOf(double firstCoefficient, double... nextCoefficients)", "class_method_signature": "Polynomial.valueOf(double firstCoefficient, double... nextCoefficients)", "testcase": false, "constructor": false, "invocations": ["isNullOrEmpty", "fromDegree", "arraycopy", "getUsedDegree"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}