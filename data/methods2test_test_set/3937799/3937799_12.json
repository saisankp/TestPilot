{"test_class": {"identifier": "TestStreamFile", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Configuration CONF = new Configuration();", "modifier": "private", "type": "Configuration", "declarator": "CONF = new Configuration()", "var_name": "CONF"}, {"original_string": "private DFSClient clientMock = Mockito.mock(DFSClient.class);", "modifier": "private", "type": "DFSClient", "declarator": "clientMock = Mockito.mock(DFSClient.class)", "var_name": "clientMock"}, {"original_string": "private HttpServletRequest mockHttpServletRequest = \n    Mockito.mock(HttpServletRequest.class);", "modifier": "private", "type": "HttpServletRequest", "declarator": "mockHttpServletRequest = \n    Mockito.mock(HttpServletRequest.class)", "var_name": "mockHttpServletRequest"}, {"original_string": "private HttpServletResponse mockHttpServletResponse = \n    Mockito.mock(HttpServletResponse.class);", "modifier": "private", "type": "HttpServletResponse", "declarator": "mockHttpServletResponse = \n    Mockito.mock(HttpServletResponse.class)", "var_name": "mockHttpServletResponse"}, {"original_string": "private final ServletContext mockServletContext = \n    Mockito.mock(ServletContext.class);", "modifier": "private final", "type": "ServletContext", "declarator": "mockServletContext = \n    Mockito.mock(ServletContext.class)", "var_name": "mockServletContext"}, {"original_string": "StreamFile sfile = new StreamFile() {\n    private static final long serialVersionUID = -5513776238875189473L;\n  \n    public ServletContext getServletContext() {\n      return mockServletContext;\n    }\n  \n    @Override\n    protected DFSClient getDFSClient(HttpServletRequest request)\n      throws IOException, InterruptedException {\n      return clientMock;\n    }\n  };", "modifier": "", "type": "StreamFile", "declarator": "sfile = new StreamFile() {\n    private static final long serialVersionUID = -5513776238875189473L;\n  \n    public ServletContext getServletContext() {\n      return mockServletContext;\n    }\n  \n    @Override\n    protected DFSClient getDFSClient(HttpServletRequest request)\n      throws IOException, InterruptedException {\n      return clientMock;\n    }\n  }", "var_name": "sfile"}], "file": "adfs-hdfs-project/adfs-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestStreamFile.java"}, "test_case": {"identifier": "testDoGetShouldWriteTheFileContentIntoServletOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDoGetShouldWriteTheFileContentIntoServletOutputStream()\n      throws Exception {\n\n    MiniDFSCluster cluster = new MiniDFSCluster(CONF, 1, true, null);\n    try {\n      Path testFile = createFile();\n      setUpForDoGetTest(cluster, testFile);\n      ServletOutputStreamExtn outStream = new ServletOutputStreamExtn();\n      Mockito.doReturn(outStream).when(mockHttpServletResponse)\n          .getOutputStream();\n      StreamFile sfile = new StreamFile() {\n\n        private static final long serialVersionUID = 7715590481809562722L;\n\n        public ServletContext getServletContext() {\n          return mockServletContext;\n        }\n      };\n      StreamFile.nameNodeAddr = NameNode.getServiceAddress(CONF, true);\n      sfile.doGet(mockHttpServletRequest, mockHttpServletResponse);\n      assertEquals(\"Not writing the file data into ServletOutputStream\",\n          outStream.getResult(), \"test\");\n    } finally {\n      cluster.shutdown();\n    }\n  }", "signature": "void testDoGetShouldWriteTheFileContentIntoServletOutputStream()", "full_signature": "@Test public void testDoGetShouldWriteTheFileContentIntoServletOutputStream()", "class_method_signature": "TestStreamFile.testDoGetShouldWriteTheFileContentIntoServletOutputStream()", "testcase": true, "constructor": false, "invocations": ["createFile", "setUpForDoGetTest", "getOutputStream", "when", "doReturn", "getServiceAddress", "doGet", "assertEquals", "getResult", "shutdown"]}, "focal_class": {"identifier": "StreamFile", "superclass": "extends DfsServlet", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final String CONTENT_LENGTH = \"Content-Length\";", "modifier": "public static final", "type": "String", "declarator": "CONTENT_LENGTH = \"Content-Length\"", "var_name": "CONTENT_LENGTH"}, {"original_string": "static InetSocketAddress nameNodeAddr;", "modifier": "static", "type": "InetSocketAddress", "declarator": "nameNodeAddr", "var_name": "nameNodeAddr"}, {"original_string": "static DataNode datanode = null;", "modifier": "static", "type": "DataNode", "declarator": "datanode = null", "var_name": "datanode"}], "methods": [{"identifier": "getDFSClient", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "DFSClient", "signature": "DFSClient getDFSClient(HttpServletRequest request)", "full_signature": "protected DFSClient getDFSClient(HttpServletRequest request)", "class_method_signature": "StreamFile.getDFSClient(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void doGet(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@SuppressWarnings(\"unchecked\") public void doGet(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "StreamFile.doGet(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "sendPartialData", "parameters": "(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "modifiers": "static", "return": "void", "signature": "void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "full_signature": "static void sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "class_method_signature": "StreamFile.sendPartialData(FSInputStream in,\n                              OutputStream out,\n                              HttpServletResponse response,\n                              long contentLength,\n                              List<InclusiveByteRange> ranges)", "testcase": false, "constructor": false}, {"identifier": "copyFromOffset", "parameters": "(FSInputStream in, OutputStream out, long offset,\n      long count)", "modifiers": "static", "return": "void", "signature": "void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "full_signature": "static void copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "class_method_signature": "StreamFile.copyFromOffset(FSInputStream in, OutputStream out, long offset,\n      long count)", "testcase": false, "constructor": false}], "file": "adfs-hdfs-project/adfs-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/StreamFile.java"}, "focal_method": {"identifier": "doGet", "parameters": "(HttpServletRequest request, HttpServletResponse response)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  public void doGet(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException {\n    final String filename = ServletUtil.getDecodedPath(request, \"/streamFile\");\n    final String rawFilename = ServletUtil.getRawPath(request, \"/streamFile\");\n\n    if (filename == null || filename.length() == 0) {\n      response.setContentType(\"text/plain\");\n      PrintWriter out = response.getWriter();\n      out.print(\"Invalid input\");\n      return;\n    }\n    \n    DFSClient dfs;\n    try {\n      dfs = getDFSClient(request);\n    } catch (InterruptedException e) {\n      response.sendError(400, e.getMessage());\n      return;\n    }\n\n    Enumeration<String> reqRanges = request.getHeaders(\"Range\");\n    if (reqRanges != null && !reqRanges.hasMoreElements()) {\n      reqRanges = null;\n    }\n\n    DFSInputStream in = null;\n    OutputStream out = null;\n\n    try {\n      in = dfs.open(filename);\n      out = response.getOutputStream();\n      final long fileLen = in.getFileLength();\n\n      if (reqRanges != null) {\n        List<InclusiveByteRange> ranges =\n          InclusiveByteRange.satisfiableRanges(reqRanges, fileLen);\n        StreamFile.sendPartialData(in, out, response, fileLen, ranges);\n      } else {\n        // No ranges, so send entire file\n        response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\"\" + \n                           rawFilename + \"\\\"\");\n        response.setContentType(\"application/octet-stream\");\n        response.setHeader(CONTENT_LENGTH, \"\" + in.getFileLength());\n        StreamFile.copyFromOffset(in, out, 0L, fileLen);\n      }\n      in.close();\n      in = null;\n      out.close();\n      out = null;\n      dfs.close();\n      dfs = null;\n    } catch (IOException ioe) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"response.isCommitted()=\" + response.isCommitted(), ioe);\n      }\n      throw ioe;\n    } finally {\n      IOUtils.cleanup(LOG, in);\n      IOUtils.cleanup(LOG, out);\n      IOUtils.cleanup(LOG, dfs);\n    }\n  }", "signature": "void doGet(HttpServletRequest request, HttpServletResponse response)", "full_signature": "@SuppressWarnings(\"unchecked\") public void doGet(HttpServletRequest request, HttpServletResponse response)", "class_method_signature": "StreamFile.doGet(HttpServletRequest request, HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["getDecodedPath", "getRawPath", "length", "setContentType", "getWriter", "print", "getDFSClient", "sendError", "getMessage", "getHeaders", "hasMoreElements", "open", "getOutputStream", "getFileLength", "satisfiableRanges", "sendPartialData", "setHeader", "setContentType", "setHeader", "getFileLength", "copyFromOffset", "close", "close", "close", "isDebugEnabled", "debug", "isCommitted", "cleanup", "cleanup", "cleanup"]}, "repository": {"repo_id": 3937799, "url": "https://github.com/taobao/ADFS", "language": "Java", "is_fork": false, "fork_count": 50, "stargazer_count": 108, "size": 53300, "license": "licensed"}}