{"test_class": {"identifier": "PdfScalerTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/PdfScalerTest.java"}, "test_case": {"identifier": "expandPagesYesBoxes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void expandPagesYesBoxes() throws IOException, TaskIOException {\n        try (PDDocument document = PDFParser.parse(SeekableSources\n                .inMemorySeekableSourceFrom(getClass().getClassLoader().getResourceAsStream(\"pdf/one_page.pdf\")))) {\n            PDPage page = document.getPage(0);\n            PDRectangle yesBox = new PDRectangle(0, 0, 200, 400);\n            PDRectangle cropBox = new PDRectangle(0, 0, 400, 800);\n            page.setCropBox(cropBox);\n            page.setArtBox(yesBox);\n            page.setTrimBox(yesBox);\n            page.setBleedBox(yesBox);\n            PdfScaler scaler = new PdfScaler(ScaleType.PAGE);\n            scaler.scale(document, 1.5);\n\n            assertEquals(new PDRectangle(0, 0, 892.5f, 1263f), page.getMediaBox());\n            assertEquals(new PDRectangle(0, 0, 600, 1200), page.getCropBox());\n            assertEquals(new PDRectangle(0, 0, 300, 600), page.getArtBox());\n            assertEquals(new PDRectangle(0, 0, 300, 600), page.getBleedBox());\n            assertEquals(new PDRectangle(0, 0, 300, 600), page.getTrimBox());\n        }\n    }", "signature": "void expandPagesYesBoxes()", "full_signature": "@Test public void expandPagesYesBoxes()", "class_method_signature": "PdfScalerTest.expandPagesYesBoxes()", "testcase": true, "constructor": false, "invocations": ["parse", "inMemorySeekableSourceFrom", "getResourceAsStream", "getClassLoader", "getClass", "getPage", "setCropBox", "setArtBox", "setTrimBox", "setBleedBox", "scale", "assertEquals", "getMediaBox", "assertEquals", "getCropBox", "assertEquals", "getArtBox", "assertEquals", "getBleedBox", "assertEquals", "getTrimBox"]}, "focal_class": {"identifier": "PdfScaler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PdfScaler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PdfScaler.class)", "var_name": "LOG"}, {"original_string": "private ScaleType type;", "modifier": "private", "type": "ScaleType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "PdfScaler", "parameters": "(ScaleType type)", "modifiers": "public", "return": "", "signature": " PdfScaler(ScaleType type)", "full_signature": "public  PdfScaler(ScaleType type)", "class_method_signature": "PdfScaler.PdfScaler(ScaleType type)", "testcase": false, "constructor": true}, {"identifier": "scalePages", "parameters": "(PDDocument doc)", "modifiers": "public", "return": "void", "signature": "void scalePages(PDDocument doc)", "full_signature": "public void scalePages(PDDocument doc)", "class_method_signature": "PdfScaler.scalePages(PDDocument doc)", "testcase": false, "constructor": false}, {"identifier": "scalePages", "parameters": "(PDDocument doc, Iterable<PDPage> pages, PDRectangle targetBox)", "modifiers": "public", "return": "void", "signature": "void scalePages(PDDocument doc, Iterable<PDPage> pages, PDRectangle targetBox)", "full_signature": "public void scalePages(PDDocument doc, Iterable<PDPage> pages, PDRectangle targetBox)", "class_method_signature": "PdfScaler.scalePages(PDDocument doc, Iterable<PDPage> pages, PDRectangle targetBox)", "testcase": false, "constructor": false}, {"identifier": "changePageSize", "parameters": "(PDDocument doc, Iterable<PDPage> pages, PDRectangle desiredPageSize)", "modifiers": "public", "return": "void", "signature": "void changePageSize(PDDocument doc, Iterable<PDPage> pages, PDRectangle desiredPageSize)", "full_signature": "public void changePageSize(PDDocument doc, Iterable<PDPage> pages, PDRectangle desiredPageSize)", "class_method_signature": "PdfScaler.changePageSize(PDDocument doc, Iterable<PDPage> pages, PDRectangle desiredPageSize)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(PDDocument doc, double scale)", "modifiers": "public", "return": "void", "signature": "void scale(PDDocument doc, double scale)", "full_signature": "public void scale(PDDocument doc, double scale)", "class_method_signature": "PdfScaler.scale(PDDocument doc, double scale)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(PDDocument doc, PDPage page, double scale)", "modifiers": "public", "return": "void", "signature": "void scale(PDDocument doc, PDPage page, double scale)", "full_signature": "public void scale(PDDocument doc, PDPage page, double scale)", "class_method_signature": "PdfScaler.scale(PDDocument doc, PDPage page, double scale)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(PDDocument doc, Iterable<PDPage> pages, double scale)", "modifiers": "public", "return": "void", "signature": "void scale(PDDocument doc, Iterable<PDPage> pages, double scale)", "full_signature": "public void scale(PDDocument doc, Iterable<PDPage> pages, double scale)", "class_method_signature": "PdfScaler.scale(PDDocument doc, Iterable<PDPage> pages, double scale)", "testcase": false, "constructor": false}, {"identifier": "changePageSize", "parameters": "(PDDocument doc, PDPage page, PDRectangle desiredPageSize)", "modifiers": "public", "return": "void", "signature": "void changePageSize(PDDocument doc, PDPage page, PDRectangle desiredPageSize)", "full_signature": "public void changePageSize(PDDocument doc, PDPage page, PDRectangle desiredPageSize)", "class_method_signature": "PdfScaler.changePageSize(PDDocument doc, PDPage page, PDRectangle desiredPageSize)", "testcase": false, "constructor": false}, {"identifier": "doScale", "parameters": "(PDDocument doc, Iterable<PDPage> pages, double scale)", "modifiers": "private", "return": "void", "signature": "void doScale(PDDocument doc, Iterable<PDPage> pages, double scale)", "full_signature": "private void doScale(PDDocument doc, Iterable<PDPage> pages, double scale)", "class_method_signature": "PdfScaler.doScale(PDDocument doc, Iterable<PDPage> pages, double scale)", "testcase": false, "constructor": false}, {"identifier": "transformAnnotations", "parameters": "(PDPage page, Matrix transform, Set<COSDictionary> processedAnnots)", "modifiers": "private static", "return": "void", "signature": "void transformAnnotations(PDPage page, Matrix transform, Set<COSDictionary> processedAnnots)", "full_signature": "private static void transformAnnotations(PDPage page, Matrix transform, Set<COSDictionary> processedAnnots)", "class_method_signature": "PdfScaler.transformAnnotations(PDPage page, Matrix transform, Set<COSDictionary> processedAnnots)", "testcase": false, "constructor": false}, {"identifier": "transformPoints", "parameters": "(float[] points, Matrix transform)", "modifiers": "private static", "return": "COSArray", "signature": "COSArray transformPoints(float[] points, Matrix transform)", "full_signature": "private static COSArray transformPoints(float[] points, Matrix transform)", "class_method_signature": "PdfScaler.transformPoints(float[] points, Matrix transform)", "testcase": false, "constructor": false}, {"identifier": "margin", "parameters": "(PDDocument doc, Iterable<PDPage> pages, Margins margins)", "modifiers": "public static", "return": "void", "signature": "void margin(PDDocument doc, Iterable<PDPage> pages, Margins margins)", "full_signature": "public static void margin(PDDocument doc, Iterable<PDPage> pages, Margins margins)", "class_method_signature": "PdfScaler.margin(PDDocument doc, Iterable<PDPage> pages, Margins margins)", "testcase": false, "constructor": false}, {"identifier": "addMargins", "parameters": "(PDRectangle rect, Margins margins)", "modifiers": "private static", "return": "PDRectangle", "signature": "PDRectangle addMargins(PDRectangle rect, Margins margins)", "full_signature": "private static PDRectangle addMargins(PDRectangle rect, Margins margins)", "class_method_signature": "PdfScaler.addMargins(PDRectangle rect, Margins margins)", "testcase": false, "constructor": false}, {"identifier": "getMatrix", "parameters": "(double scale, PDRectangle crop, PDRectangle toScale)", "modifiers": "private", "return": "Matrix", "signature": "Matrix getMatrix(double scale, PDRectangle crop, PDRectangle toScale)", "full_signature": "private Matrix getMatrix(double scale, PDRectangle crop, PDRectangle toScale)", "class_method_signature": "PdfScaler.getMatrix(double scale, PDRectangle crop, PDRectangle toScale)", "testcase": false, "constructor": false}, {"identifier": "scaleContentBoxes", "parameters": "(double scale, PDPage page)", "modifiers": "private", "return": "void", "signature": "void scaleContentBoxes(double scale, PDPage page)", "full_signature": "private void scaleContentBoxes(double scale, PDPage page)", "class_method_signature": "PdfScaler.scaleContentBoxes(double scale, PDPage page)", "testcase": false, "constructor": false}, {"identifier": "scalePageBoxes", "parameters": "(double scale, PDPage page)", "modifiers": "private", "return": "void", "signature": "void scalePageBoxes(double scale, PDPage page)", "full_signature": "private void scalePageBoxes(double scale, PDPage page)", "class_method_signature": "PdfScaler.scalePageBoxes(double scale, PDPage page)", "testcase": false, "constructor": false}, {"identifier": "getScalingFactorMatchWidth", "parameters": "(PDRectangle targetBox, PDRectangle pageBox)", "modifiers": "private", "return": "double", "signature": "double getScalingFactorMatchWidth(PDRectangle targetBox, PDRectangle pageBox)", "full_signature": "private double getScalingFactorMatchWidth(PDRectangle targetBox, PDRectangle pageBox)", "class_method_signature": "PdfScaler.getScalingFactorMatchWidth(PDRectangle targetBox, PDRectangle pageBox)", "testcase": false, "constructor": false}, {"identifier": "getScalingFactorMatchWidthOrHeight", "parameters": "(PDRectangle targetBox, PDRectangle pageBox)", "modifiers": "private", "return": "double", "signature": "double getScalingFactorMatchWidthOrHeight(PDRectangle targetBox, PDRectangle pageBox)", "full_signature": "private double getScalingFactorMatchWidthOrHeight(PDRectangle targetBox, PDRectangle pageBox)", "class_method_signature": "PdfScaler.getScalingFactorMatchWidthOrHeight(PDRectangle targetBox, PDRectangle pageBox)", "testcase": false, "constructor": false}, {"identifier": "isLandscape", "parameters": "(PDRectangle box)", "modifiers": "private", "return": "boolean", "signature": "boolean isLandscape(PDRectangle box)", "full_signature": "private boolean isLandscape(PDRectangle box)", "class_method_signature": "PdfScaler.isLandscape(PDRectangle box)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/PdfScaler.java"}, "focal_method": {"identifier": "scale", "parameters": "(PDDocument doc, double scale)", "modifiers": "public", "return": "void", "body": "public void scale(PDDocument doc, double scale) throws TaskIOException {\n        scale(doc, doc.getPages(), scale);\n    }", "signature": "void scale(PDDocument doc, double scale)", "full_signature": "public void scale(PDDocument doc, double scale)", "class_method_signature": "PdfScaler.scale(PDDocument doc, double scale)", "testcase": false, "constructor": false, "invocations": ["scale", "getPages"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}