{"test_class": {"identifier": "ClassAliasIdResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassAliasIdResolver resolver;", "modifier": "private", "type": "ClassAliasIdResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private JavaType baseType;", "modifier": "private", "type": "JavaType", "declarator": "baseType", "var_name": "baseType"}, {"original_string": "private TypeFactory typeFactory;", "modifier": "private", "type": "TypeFactory", "declarator": "typeFactory", "var_name": "typeFactory"}], "file": "simple-spring-memcached/src/test/java/com/google/code/ssm/json/ClassAliasIdResolverTest.java"}, "test_case": {"identifier": "invalidAddClassToIdMapNullAlias", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void invalidAddClassToIdMapNullAlias() {\n        resolver.addClassToId(ClassAliasIdResolverTest.class, null);\n    }", "signature": "void invalidAddClassToIdMapNullAlias()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void invalidAddClassToIdMapNullAlias()", "class_method_signature": "ClassAliasIdResolverTest.invalidAddClassToIdMapNullAlias()", "testcase": true, "constructor": false, "invocations": ["addClassToId"]}, "focal_class": {"identifier": "ClassAliasIdResolver", "superclass": "extends ClassNameIdResolver", "interfaces": "", "fields": [{"original_string": "private final Map<String, Class<?>> idToClass = new HashMap<String, Class<?>>();", "modifier": "private final", "type": "Map<String, Class<?>>", "declarator": "idToClass = new HashMap<String, Class<?>>()", "var_name": "idToClass"}, {"original_string": "private final Map<Class<?>, String> classToId = new HashMap<Class<?>, String>();", "modifier": "private final", "type": "Map<Class<?>, String>", "declarator": "classToId = new HashMap<Class<?>, String>()", "var_name": "classToId"}], "methods": [{"identifier": "ClassAliasIdResolver", "parameters": "(final JavaType baseType, final TypeFactory typeFactory, final Map<String, Class<?>> idToClass,\n            final Map<Class<?>, String> classToId)", "modifiers": "public", "return": "", "signature": " ClassAliasIdResolver(final JavaType baseType, final TypeFactory typeFactory, final Map<String, Class<?>> idToClass,\n            final Map<Class<?>, String> classToId)", "full_signature": "public  ClassAliasIdResolver(final JavaType baseType, final TypeFactory typeFactory, final Map<String, Class<?>> idToClass,\n            final Map<Class<?>, String> classToId)", "class_method_signature": "ClassAliasIdResolver.ClassAliasIdResolver(final JavaType baseType, final TypeFactory typeFactory, final Map<String, Class<?>> idToClass,\n            final Map<Class<?>, String> classToId)", "testcase": false, "constructor": true}, {"identifier": "idFromValue", "parameters": "(final Object value)", "modifiers": "@Override public", "return": "String", "signature": "String idFromValue(final Object value)", "full_signature": "@Override public String idFromValue(final Object value)", "class_method_signature": "ClassAliasIdResolver.idFromValue(final Object value)", "testcase": false, "constructor": false}, {"identifier": "idFromValueAndType", "parameters": "(final Object value, final Class<?> type)", "modifiers": "@Override public", "return": "String", "signature": "String idFromValueAndType(final Object value, final Class<?> type)", "full_signature": "@Override public String idFromValueAndType(final Object value, final Class<?> type)", "class_method_signature": "ClassAliasIdResolver.idFromValueAndType(final Object value, final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "_typeFromId", "parameters": "(final String id, final DatabindContext ctxt)", "modifiers": "@Override protected", "return": "JavaType", "signature": "JavaType _typeFromId(final String id, final DatabindContext ctxt)", "full_signature": "@Override protected JavaType _typeFromId(final String id, final DatabindContext ctxt)", "class_method_signature": "ClassAliasIdResolver._typeFromId(final String id, final DatabindContext ctxt)", "testcase": false, "constructor": false}, {"identifier": "addClassToId", "parameters": "(final Class<?> clazz, final String id)", "modifiers": "public", "return": "void", "signature": "void addClassToId(final Class<?> clazz, final String id)", "full_signature": "public void addClassToId(final Class<?> clazz, final String id)", "class_method_signature": "ClassAliasIdResolver.addClassToId(final Class<?> clazz, final String id)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "ClassAliasIdResolver.init()", "testcase": false, "constructor": false}], "file": "simple-spring-memcached/src/main/java/com/google/code/ssm/json/ClassAliasIdResolver.java"}, "focal_method": {"identifier": "addClassToId", "parameters": "(final Class<?> clazz, final String id)", "modifiers": "public", "return": "void", "body": "public void addClassToId(final Class<?> clazz, final String id) {\n        Assert.notNull(clazz, \"Class cannot be null\");\n        Assert.hasText(id, \"Alias (id) cannot be null or contain only whitespaces\");\n\n        if (classToId.containsKey(clazz)) {\n            throw new IllegalArgumentException(\"Class \" + clazz + \" has already defined alias (id) \" + classToId.get(clazz)\n                    + \" cannot set another alias \" + id);\n        }\n\n        if (idToClass.containsKey(id)) {\n            throw new IllegalArgumentException(\"Alias (id) \" + id + \" is used by another class \" + idToClass.get(id)\n                    + \" and cannot be used by \" + clazz);\n        }\n\n        classToId.put(clazz, id);\n        idToClass.put(id, clazz);\n    }", "signature": "void addClassToId(final Class<?> clazz, final String id)", "full_signature": "public void addClassToId(final Class<?> clazz, final String id)", "class_method_signature": "ClassAliasIdResolver.addClassToId(final Class<?> clazz, final String id)", "testcase": false, "constructor": false, "invocations": ["notNull", "hasText", "containsKey", "get", "containsKey", "get", "put", "put"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}