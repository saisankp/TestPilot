{"test_class": {"identifier": "AsyncHealthCheckDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long CURRENT_TIME = 1551002401000L;", "modifier": "private static final", "type": "long", "declarator": "CURRENT_TIME = 1551002401000L", "var_name": "CURRENT_TIME"}, {"original_string": "private static final Clock FIXED_CLOCK = clockWithFixedTime(CURRENT_TIME);", "modifier": "private static final", "type": "Clock", "declarator": "FIXED_CLOCK = clockWithFixedTime(CURRENT_TIME)", "var_name": "FIXED_CLOCK"}, {"original_string": "private static final HealthCheck.Result EXPECTED_EXPIRED_RESULT = HealthCheck.Result\n            .builder()\n            .usingClock(FIXED_CLOCK)\n            .unhealthy()\n            .withMessage(\"Result was healthy but it expired 1 milliseconds ago\")\n            .build();", "modifier": "private static final", "type": "HealthCheck.Result", "declarator": "EXPECTED_EXPIRED_RESULT = HealthCheck.Result\n            .builder()\n            .usingClock(FIXED_CLOCK)\n            .unhealthy()\n            .withMessage(\"Result was healthy but it expired 1 milliseconds ago\")\n            .build()", "var_name": "EXPECTED_EXPIRED_RESULT"}, {"original_string": "private final HealthCheck mockHealthCheck = mock(HealthCheck.class);", "modifier": "private final", "type": "HealthCheck", "declarator": "mockHealthCheck = mock(HealthCheck.class)", "var_name": "mockHealthCheck"}, {"original_string": "private final ScheduledExecutorService mockExecutorService = mock(ScheduledExecutorService.class);", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "mockExecutorService = mock(ScheduledExecutorService.class)", "var_name": "mockExecutorService"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    private final ScheduledFuture mockFuture = mock(ScheduledFuture.class);", "modifier": "@SuppressWarnings(\"rawtypes\")\n    private final", "type": "ScheduledFuture", "declarator": "mockFuture = mock(ScheduledFuture.class)", "var_name": "mockFuture"}], "file": "metrics-healthchecks/src/test/java/com/codahale/metrics/health/AsyncHealthCheckDecoratorTest.java"}, "test_case": {"identifier": "unhealthyAsyncHealthCheckTriggersSuccessfulInstantiationWithUnhealthyState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unhealthyAsyncHealthCheckTriggersSuccessfulInstantiationWithUnhealthyState() throws Exception {\n        HealthCheck asyncHealthCheck = new UnhealthyAsyncHealthCheck();\n        AsyncHealthCheckDecorator asyncDecorator = new AsyncHealthCheckDecorator(asyncHealthCheck, mockExecutorService);\n\n        assertThat(asyncDecorator.check().isHealthy()).isFalse();\n    }", "signature": "void unhealthyAsyncHealthCheckTriggersSuccessfulInstantiationWithUnhealthyState()", "full_signature": "@Test public void unhealthyAsyncHealthCheckTriggersSuccessfulInstantiationWithUnhealthyState()", "class_method_signature": "AsyncHealthCheckDecoratorTest.unhealthyAsyncHealthCheckTriggersSuccessfulInstantiationWithUnhealthyState()", "testcase": true, "constructor": false, "invocations": ["isFalse", "assertThat", "isHealthy", "check"]}, "focal_class": {"identifier": "AsyncHealthCheckDecorator", "superclass": "extends HealthCheck", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final String NO_RESULT_YET_MESSAGE = \"Waiting for first asynchronous check result.\";", "modifier": "private static final", "type": "String", "declarator": "NO_RESULT_YET_MESSAGE = \"Waiting for first asynchronous check result.\"", "var_name": "NO_RESULT_YET_MESSAGE"}, {"original_string": "private final HealthCheck healthCheck;", "modifier": "private final", "type": "HealthCheck", "declarator": "healthCheck", "var_name": "healthCheck"}, {"original_string": "private final ScheduledFuture<?> future;", "modifier": "private final", "type": "ScheduledFuture<?>", "declarator": "future", "var_name": "future"}, {"original_string": "private final long healthyTtl;", "modifier": "private final", "type": "long", "declarator": "healthyTtl", "var_name": "healthyTtl"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private volatile Result result;", "modifier": "private volatile", "type": "Result", "declarator": "result", "var_name": "result"}], "methods": [{"identifier": "AsyncHealthCheckDecorator", "parameters": "(HealthCheck healthCheck, ScheduledExecutorService executorService, Clock clock)", "modifiers": "", "return": "", "signature": " AsyncHealthCheckDecorator(HealthCheck healthCheck, ScheduledExecutorService executorService, Clock clock)", "full_signature": "  AsyncHealthCheckDecorator(HealthCheck healthCheck, ScheduledExecutorService executorService, Clock clock)", "class_method_signature": "AsyncHealthCheckDecorator.AsyncHealthCheckDecorator(HealthCheck healthCheck, ScheduledExecutorService executorService, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "AsyncHealthCheckDecorator", "parameters": "(HealthCheck healthCheck, ScheduledExecutorService executorService)", "modifiers": "", "return": "", "signature": " AsyncHealthCheckDecorator(HealthCheck healthCheck, ScheduledExecutorService executorService)", "full_signature": "  AsyncHealthCheckDecorator(HealthCheck healthCheck, ScheduledExecutorService executorService)", "class_method_signature": "AsyncHealthCheckDecorator.AsyncHealthCheckDecorator(HealthCheck healthCheck, ScheduledExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AsyncHealthCheckDecorator.run()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "()", "modifiers": "@Override protected", "return": "Result", "signature": "Result check()", "full_signature": "@Override protected Result check()", "class_method_signature": "AsyncHealthCheckDecorator.check()", "testcase": false, "constructor": false}, {"identifier": "tearDown", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean tearDown()", "full_signature": " boolean tearDown()", "class_method_signature": "AsyncHealthCheckDecorator.tearDown()", "testcase": false, "constructor": false}, {"identifier": "getHealthCheck", "parameters": "()", "modifiers": "public", "return": "HealthCheck", "signature": "HealthCheck getHealthCheck()", "full_signature": "public HealthCheck getHealthCheck()", "class_method_signature": "AsyncHealthCheckDecorator.getHealthCheck()", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(boolean expression, String message)", "modifiers": "private static", "return": "void", "signature": "void check(boolean expression, String message)", "full_signature": "private static void check(boolean expression, String message)", "class_method_signature": "AsyncHealthCheckDecorator.check(boolean expression, String message)", "testcase": false, "constructor": false}], "file": "metrics-healthchecks/src/main/java/com/codahale/metrics/health/AsyncHealthCheckDecorator.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "@Override protected", "return": "Result", "body": "@Override\n    protected Result check() throws Exception {\n        long expiration = clock.getTime() - result.getTime() - healthyTtl;\n        if (expiration > 0) {\n            return Result.builder()\n                    .unhealthy()\n                    .usingClock(clock)\n                    .withMessage(\"Result was %s but it expired %d milliseconds ago\",\n                            result.isHealthy() ? \"healthy\" : \"unhealthy\",\n                            expiration)\n                    .build();\n        }\n\n        return result;\n    }", "signature": "Result check()", "full_signature": "@Override protected Result check()", "class_method_signature": "AsyncHealthCheckDecorator.check()", "testcase": false, "constructor": false, "invocations": ["getTime", "getTime", "build", "withMessage", "usingClock", "unhealthy", "builder", "isHealthy"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}