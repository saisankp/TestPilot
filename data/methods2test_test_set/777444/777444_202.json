{"test_class": {"identifier": "ListExtractorTest", "superclass": "extends AbstractExtractorTest", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/jolokia/converter/json/ListExtractorTest.java"}, "test_case": {"identifier": "testSetValueInvalidIndex", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expectedExceptions = IllegalArgumentException.class)\n    public void testSetValueInvalidIndex() throws Exception {\n        List list = Arrays.asList(\"null\", \"bla\");\n        extractor.setObjectValue(stringToObjectConverter, list, \"NaN\", \"blub\");\n    }", "signature": "void testSetValueInvalidIndex()", "full_signature": "@Test(expectedExceptions = IllegalArgumentException.class) public void testSetValueInvalidIndex()", "class_method_signature": "ListExtractorTest.testSetValueInvalidIndex()", "testcase": true, "constructor": false, "invocations": ["asList", "setObjectValue"]}, "focal_class": {"identifier": "ListExtractor", "superclass": "", "interfaces": "implements Extractor", "fields": [], "methods": [{"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class", "signature": "Class getType()", "full_signature": "public Class getType()", "class_method_signature": "ListExtractor.getType()", "testcase": false, "constructor": false}, {"identifier": "extractObject", "parameters": "(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts,boolean jsonify)", "modifiers": "public", "return": "Object", "signature": "Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts,boolean jsonify)", "full_signature": "public Object extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts,boolean jsonify)", "class_method_signature": "ListExtractor.extractObject(ObjectToJsonConverter pConverter, Object pValue, Stack<String> pPathParts,boolean jsonify)", "testcase": false, "constructor": false}, {"identifier": "setObjectValue", "parameters": "(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "modifiers": "public", "return": "Object", "signature": "Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "full_signature": "public Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "class_method_signature": "ListExtractor.setObjectValue(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "testcase": false, "constructor": false}, {"identifier": "canSetValue", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canSetValue()", "full_signature": "public boolean canSetValue()", "class_method_signature": "ListExtractor.canSetValue()", "testcase": false, "constructor": false}, {"identifier": "extractWithPath", "parameters": "(ObjectToJsonConverter pConverter, List pList, Stack<String> pStack, boolean jsonify, String pPathPart)", "modifiers": "private", "return": "Object", "signature": "Object extractWithPath(ObjectToJsonConverter pConverter, List pList, Stack<String> pStack, boolean jsonify, String pPathPart)", "full_signature": "private Object extractWithPath(ObjectToJsonConverter pConverter, List pList, Stack<String> pStack, boolean jsonify, String pPathPart)", "class_method_signature": "ListExtractor.extractWithPath(ObjectToJsonConverter pConverter, List pList, Stack<String> pStack, boolean jsonify, String pPathPart)", "testcase": false, "constructor": false}, {"identifier": "extractListAsJson", "parameters": "(ObjectToJsonConverter pConverter, List pList, Stack<String> pPath, int pLength)", "modifiers": "private", "return": "Object", "signature": "Object extractListAsJson(ObjectToJsonConverter pConverter, List pList, Stack<String> pPath, int pLength)", "full_signature": "private Object extractListAsJson(ObjectToJsonConverter pConverter, List pList, Stack<String> pPath, int pLength)", "class_method_signature": "ListExtractor.extractListAsJson(ObjectToJsonConverter pConverter, List pList, Stack<String> pPath, int pLength)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/json/ListExtractor.java"}, "focal_method": {"identifier": "setObjectValue", "parameters": "(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "modifiers": "public", "return": "Object", "body": "public Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)\n            throws IllegalAccessException, InvocationTargetException {\n        List list = (List) pInner;\n        int idx;\n        try {\n            idx = Integer.parseInt(pIndex);\n        } catch (NumberFormatException exp) {\n            throw new IllegalArgumentException(\"Non-numeric index for accessing collection \" + pInner +\n                    \". (index = \" + pIndex + \", value to set = \" +  pValue + \")\",exp);\n        }\n\n        // For a collection, we can infer the type within the collection. We are trying to fetch\n        // the old value, and if set, we use its type. Otherwise, we simply use string as value.\n        Object oldValue = list.get(idx);\n        Object value =\n                oldValue != null ?\n                        pConverter.prepareValue(oldValue.getClass().getName(), pValue) :\n                        pValue;\n        list.set(idx,value);\n        return oldValue;\n    }", "signature": "Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "full_signature": "public Object setObjectValue(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "class_method_signature": "ListExtractor.setObjectValue(StringToObjectConverter pConverter, Object pInner, String pIndex, Object  pValue)", "testcase": false, "constructor": false, "invocations": ["parseInt", "get", "prepareValue", "getName", "getClass", "set"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}