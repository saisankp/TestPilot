{"test_class": {"identifier": "RightsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@SpyBean\n    private RightsService rightsService;", "modifier": "@SpyBean\n    private", "type": "RightsService", "declarator": "rightsService", "var_name": "rightsService"}, {"original_string": "@MockBean\n    private ModulesService modulesService;", "modifier": "@MockBean\n    private", "type": "ModulesService", "declarator": "modulesService", "var_name": "modulesService"}, {"original_string": "@MockBean\n    private DiscoveryUtils discoveryUtils;", "modifier": "@MockBean\n    private", "type": "DiscoveryUtils", "declarator": "discoveryUtils", "var_name": "discoveryUtils"}, {"original_string": "@MockBean\n    private EurekaClient discoveryClient;", "modifier": "@MockBean\n    private", "type": "EurekaClient", "declarator": "discoveryClient", "var_name": "discoveryClient"}, {"original_string": "@Mock\n    private InstanceInfo instanceInfo;", "modifier": "@Mock\n    private", "type": "InstanceInfo", "declarator": "instanceInfo", "var_name": "instanceInfo"}, {"original_string": "@Mock\n    private InstanceInfo instanceInfo1;", "modifier": "@Mock\n    private", "type": "InstanceInfo", "declarator": "instanceInfo1", "var_name": "instanceInfo1"}, {"original_string": "@Mock\n    private Application application;", "modifier": "@Mock\n    private", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(8089);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(8089)", "var_name": "wireMockRule"}], "file": "api-gateway/src/test/java/fr/sictiam/stela/apigateway/service/RightsServiceTest.java"}, "test_case": {"identifier": "getRightsWithoutPESModuleInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getRightsWithoutPESModuleInstance() {\n        InstanceInfo instanceInfoActe = this.instanceInfo(\"acte\", \"acte-service\", \"BUSINESS\");\n        InstanceInfo instanceInfoConvocation = this.instanceInfo(\"convocation\", \"convocation-service\", \"BUSINESS\");\n\n        Application applicationActe = this.application(instanceInfoActe, \"acte-service\");\n        Application applicationConvocation = this.application(instanceInfoConvocation, \"convocation-service\");\n\n\n        List<Application> applications = new ArrayList<>();\n\n        applications.add(applicationActe);\n        applications.add(applicationConvocation);\n\n        given(modulesService.activeBusinessApplications()).willReturn(applications);\n\n        List<String> rights = rightsService.getRights();\n\n        WireMock.verify(2, getRequestedFor(urlPathMatching(\"/api/(acte|convocation)/rights\")));\n\n        Assert.assertEquals(5, rights.size());\n    }", "signature": "void getRightsWithoutPESModuleInstance()", "full_signature": "@Test public void getRightsWithoutPESModuleInstance()", "class_method_signature": "RightsServiceTest.getRightsWithoutPESModuleInstance()", "testcase": true, "constructor": false, "invocations": ["instanceInfo", "instanceInfo", "application", "application", "add", "add", "willReturn", "given", "activeBusinessApplications", "getRights", "verify", "getRequestedFor", "urlPathMatching", "assertEquals", "size"]}, "focal_class": {"identifier": "RightsService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RightsService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RightsService.class)", "var_name": "LOGGER"}, {"original_string": "private final RestTemplate restTemplate;", "modifier": "private final", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "private final DiscoveryUtils discoveryUtils;", "modifier": "private final", "type": "DiscoveryUtils", "declarator": "discoveryUtils", "var_name": "discoveryUtils"}, {"original_string": "private final ModulesService modulesService;", "modifier": "private final", "type": "ModulesService", "declarator": "modulesService", "var_name": "modulesService"}], "methods": [{"identifier": "RightsService", "parameters": "(RestTemplateBuilder builder, ModulesService modulesService, DiscoveryUtils discoveryUtils)", "modifiers": "@Autowired public", "return": "", "signature": " RightsService(RestTemplateBuilder builder, ModulesService modulesService, DiscoveryUtils discoveryUtils)", "full_signature": "@Autowired public  RightsService(RestTemplateBuilder builder, ModulesService modulesService, DiscoveryUtils discoveryUtils)", "class_method_signature": "RightsService.RightsService(RestTemplateBuilder builder, ModulesService modulesService, DiscoveryUtils discoveryUtils)", "testcase": false, "constructor": true}, {"identifier": "getRights", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRights()", "full_signature": "public List<String> getRights()", "class_method_signature": "RightsService.getRights()", "testcase": false, "constructor": false}, {"identifier": "buildRightsEndpointUrl", "parameters": "(String applicationName)", "modifiers": "private", "return": "String", "signature": "String buildRightsEndpointUrl(String applicationName)", "full_signature": "private String buildRightsEndpointUrl(String applicationName)", "class_method_signature": "RightsService.buildRightsEndpointUrl(String applicationName)", "testcase": false, "constructor": false}], "file": "api-gateway/src/main/java/fr/sictiam/stela/apigateway/service/RightsService.java"}, "focal_method": {"identifier": "getRights", "parameters": "()", "modifiers": "public", "return": "List<String>", "body": "public List<String> getRights() {\n        List<String> rights = new ArrayList<>();\n\n        modulesService.activeBusinessApplications().forEach(application -> {\n            InstanceInfo instanceInfo = application.getInstances().get(0);\n            String serviceName = modulesService.extractServiceName(application.getName());\n            try {\n                String[] response =\n                        restTemplate.getForObject(this.buildRightsEndpointUrl(serviceName), String[].class);\n                rights.addAll(Arrays.asList(Objects.requireNonNull(response)));\n            } catch(RestClientException e) {\n                LOGGER.warn(\"[getRights] An error occured in module {} : {}\", application.getName(), e.getMessage());\n            }\n        });\n\n        return rights;\n    }", "signature": "List<String> getRights()", "full_signature": "public List<String> getRights()", "class_method_signature": "RightsService.getRights()", "testcase": false, "constructor": false, "invocations": ["forEach", "activeBusinessApplications", "get", "getInstances", "extractServiceName", "getName", "getForObject", "buildRightsEndpointUrl", "addAll", "asList", "requireNonNull", "warn", "getName", "getMessage"]}, "repository": {"repo_id": 180337008, "url": "https://github.com/SICTIAM/stela", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 7714, "license": "licensed"}}