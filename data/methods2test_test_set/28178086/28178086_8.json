{"test_class": {"identifier": "LegacyIndexerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static FileSystem JIM_FS;", "modifier": "private static", "type": "FileSystem", "declarator": "JIM_FS", "var_name": "JIM_FS"}, {"original_string": "private final Index sampleIndex = Index.builder()\n            .name(\"\")\n            .item(new Index.Key(UTIL_CAL, \"Calendars\"), new Index.Value(\"Calendars\", false, null))\n            .item(new Index.Key(UTIL_VAR, \"Variables\"), new Index.Value(\"Variables\", false, null))\n            .item(new Index.Key(SA_MULTI, \"SAProcessing-1\"), new Index.Value(\"SAProcessing-1\", false, null))\n            .item(new Index.Key(SA_DOC_TRAMOSEATS, \"TramoSeats [1]\"), new Index.Value(\"TramoSeats [1]\", false, null))\n            .item(new Index.Key(SA_SPEC_TRAMOSEATS, \"TramoSeatsSpec-1\"), new Index.Value(\"TramoSeatsSpec-1\", false, null))\n            .item(new Index.Key(SA_DOC_X13, \"X12 [1]\"), new Index.Value(\"X12 [1]\", false, null))\n            .item(new Index.Key(SA_SPEC_X13, \"X12Spec-1\"), new Index.Value(\"X12Spec-1\", false, null))\n            .build();", "modifier": "private final", "type": "Index", "declarator": "sampleIndex = Index.builder()\n            .name(\"\")\n            .item(new Index.Key(UTIL_CAL, \"Calendars\"), new Index.Value(\"Calendars\", false, null))\n            .item(new Index.Key(UTIL_VAR, \"Variables\"), new Index.Value(\"Variables\", false, null))\n            .item(new Index.Key(SA_MULTI, \"SAProcessing-1\"), new Index.Value(\"SAProcessing-1\", false, null))\n            .item(new Index.Key(SA_DOC_TRAMOSEATS, \"TramoSeats [1]\"), new Index.Value(\"TramoSeats [1]\", false, null))\n            .item(new Index.Key(SA_SPEC_TRAMOSEATS, \"TramoSeatsSpec-1\"), new Index.Value(\"TramoSeatsSpec-1\", false, null))\n            .item(new Index.Key(SA_DOC_X13, \"X12 [1]\"), new Index.Value(\"X12 [1]\", false, null))\n            .item(new Index.Key(SA_SPEC_X13, \"X12Spec-1\"), new Index.Value(\"X12Spec-1\", false, null))\n            .build()", "var_name": "sampleIndex"}], "file": "demetra-workspace/src/test/java/internal/workspace/file/LegacyIndexerTest.java"}, "test_case": {"identifier": "testLoad", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoad() throws IOException {\n        Path sampleFile = newLegacySample();\n        Index expectedIndex = sampleIndex.withName(MoreFiles.getNameWithoutExtension(sampleFile));\n        try (Indexer indexer = new LegacyIndexer(sampleFile)) {\n            assertThat(indexer.loadIndex()).isEqualTo(expectedIndex);\n        }\n    }", "signature": "void testLoad()", "full_signature": "@Test public void testLoad()", "class_method_signature": "LegacyIndexerTest.testLoad()", "testcase": true, "constructor": false, "invocations": ["newLegacySample", "withName", "getNameWithoutExtension", "isEqualTo", "assertThat", "loadIndex"]}, "focal_class": {"identifier": "LegacyIndexer", "superclass": "", "interfaces": "implements Indexer", "fields": [{"original_string": "private final Path file;", "modifier": "private final", "type": "Path", "declarator": "file", "var_name": "file"}, {"original_string": "private static final Xml.Parser<XmlLegacyWorkspace> PARSER;", "modifier": "private static final", "type": "Xml.Parser<XmlLegacyWorkspace>", "declarator": "PARSER", "var_name": "PARSER"}, {"original_string": "private static final Xml.Formatter<XmlLegacyWorkspace> FORMATTER;", "modifier": "private static final", "type": "Xml.Formatter<XmlLegacyWorkspace>", "declarator": "FORMATTER", "var_name": "FORMATTER"}], "methods": [{"identifier": "isValid", "parameters": "(Path file)", "modifiers": "static", "return": "boolean", "signature": "boolean isValid(Path file)", "full_signature": "static boolean isValid(Path file)", "class_method_signature": "LegacyIndexer.isValid(Path file)", "testcase": false, "constructor": false}, {"identifier": "LegacyIndexer", "parameters": "(Path file)", "modifiers": "", "return": "", "signature": " LegacyIndexer(Path file)", "full_signature": "  LegacyIndexer(Path file)", "class_method_signature": "LegacyIndexer.LegacyIndexer(Path file)", "testcase": false, "constructor": true}, {"identifier": "checkId", "parameters": "(Index.Key key)", "modifiers": "@Override public", "return": "void", "signature": "void checkId(Index.Key key)", "full_signature": "@Override public void checkId(Index.Key key)", "class_method_signature": "LegacyIndexer.checkId(Index.Key key)", "testcase": false, "constructor": false}, {"identifier": "loadIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index", "signature": "Index loadIndex()", "full_signature": "@Override public Index loadIndex()", "class_method_signature": "LegacyIndexer.loadIndex()", "testcase": false, "constructor": false}, {"identifier": "storeIndex", "parameters": "(Index index)", "modifiers": "@Override public", "return": "void", "signature": "void storeIndex(Index index)", "full_signature": "@Override public void storeIndex(Index index)", "class_method_signature": "LegacyIndexer.storeIndex(Index index)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "LegacyIndexer.close()", "testcase": false, "constructor": false}, {"identifier": "xmlToIndex", "parameters": "(XmlLegacyWorkspace xml, String name)", "modifiers": "private static", "return": "Index", "signature": "Index xmlToIndex(XmlLegacyWorkspace xml, String name)", "full_signature": "private static Index xmlToIndex(XmlLegacyWorkspace xml, String name)", "class_method_signature": "LegacyIndexer.xmlToIndex(XmlLegacyWorkspace xml, String name)", "testcase": false, "constructor": false}, {"identifier": "pusher", "parameters": "(Index.Builder result, WorkspaceFamily family)", "modifiers": "private static", "return": "Consumer<XmlLegacyWorkspaceItem>", "signature": "Consumer<XmlLegacyWorkspaceItem> pusher(Index.Builder result, WorkspaceFamily family)", "full_signature": "private static Consumer<XmlLegacyWorkspaceItem> pusher(Index.Builder result, WorkspaceFamily family)", "class_method_signature": "LegacyIndexer.pusher(Index.Builder result, WorkspaceFamily family)", "testcase": false, "constructor": false}, {"identifier": "getIndexKey", "parameters": "(XmlLegacyWorkspaceItem xml, WorkspaceFamily family)", "modifiers": "private static", "return": "Index.Key", "signature": "Index.Key getIndexKey(XmlLegacyWorkspaceItem xml, WorkspaceFamily family)", "full_signature": "private static Index.Key getIndexKey(XmlLegacyWorkspaceItem xml, WorkspaceFamily family)", "class_method_signature": "LegacyIndexer.getIndexKey(XmlLegacyWorkspaceItem xml, WorkspaceFamily family)", "testcase": false, "constructor": false}, {"identifier": "getIndexValue", "parameters": "(XmlLegacyWorkspaceItem xml)", "modifiers": "private static", "return": "Index.Value", "signature": "Index.Value getIndexValue(XmlLegacyWorkspaceItem xml)", "full_signature": "private static Index.Value getIndexValue(XmlLegacyWorkspaceItem xml)", "class_method_signature": "LegacyIndexer.getIndexValue(XmlLegacyWorkspaceItem xml)", "testcase": false, "constructor": false}, {"identifier": "indexToXml", "parameters": "(Index index)", "modifiers": "private static", "return": "XmlLegacyWorkspace", "signature": "XmlLegacyWorkspace indexToXml(Index index)", "full_signature": "private static XmlLegacyWorkspace indexToXml(Index index)", "class_method_signature": "LegacyIndexer.indexToXml(Index index)", "testcase": false, "constructor": false}, {"identifier": "toSingleItem", "parameters": "(Index index, WorkspaceFamily family)", "modifiers": "private static", "return": "XmlLegacyWorkspaceItem", "signature": "XmlLegacyWorkspaceItem toSingleItem(Index index, WorkspaceFamily family)", "full_signature": "private static XmlLegacyWorkspaceItem toSingleItem(Index index, WorkspaceFamily family)", "class_method_signature": "LegacyIndexer.toSingleItem(Index index, WorkspaceFamily family)", "testcase": false, "constructor": false}, {"identifier": "toEachItem", "parameters": "(Index index, WorkspaceFamily family)", "modifiers": "private static", "return": "XmlLegacyWorkspaceItem[]", "signature": "XmlLegacyWorkspaceItem[] toEachItem(Index index, WorkspaceFamily family)", "full_signature": "private static XmlLegacyWorkspaceItem[] toEachItem(Index index, WorkspaceFamily family)", "class_method_signature": "LegacyIndexer.toEachItem(Index index, WorkspaceFamily family)", "testcase": false, "constructor": false}, {"identifier": "filterOnFamily", "parameters": "(WorkspaceFamily family)", "modifiers": "private static", "return": "Predicate<Entry<Index.Key, Index.Value>>", "signature": "Predicate<Entry<Index.Key, Index.Value>> filterOnFamily(WorkspaceFamily family)", "full_signature": "private static Predicate<Entry<Index.Key, Index.Value>> filterOnFamily(WorkspaceFamily family)", "class_method_signature": "LegacyIndexer.filterOnFamily(WorkspaceFamily family)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Entry<Index.Key, Index.Value> o)", "modifiers": "private static", "return": "XmlLegacyWorkspaceItem", "signature": "XmlLegacyWorkspaceItem map(Entry<Index.Key, Index.Value> o)", "full_signature": "private static XmlLegacyWorkspaceItem map(Entry<Index.Key, Index.Value> o)", "class_method_signature": "LegacyIndexer.map(Entry<Index.Key, Index.Value> o)", "testcase": false, "constructor": false}, {"identifier": "unmarshalIndex", "parameters": "(Path file)", "modifiers": "private static", "return": "XmlLegacyWorkspace", "signature": "XmlLegacyWorkspace unmarshalIndex(Path file)", "full_signature": "private static XmlLegacyWorkspace unmarshalIndex(Path file)", "class_method_signature": "LegacyIndexer.unmarshalIndex(Path file)", "testcase": false, "constructor": false}, {"identifier": "marshalIndex", "parameters": "(Path file, XmlLegacyWorkspace jaxbElement)", "modifiers": "private static", "return": "void", "signature": "void marshalIndex(Path file, XmlLegacyWorkspace jaxbElement)", "full_signature": "private static void marshalIndex(Path file, XmlLegacyWorkspace jaxbElement)", "class_method_signature": "LegacyIndexer.marshalIndex(Path file, XmlLegacyWorkspace jaxbElement)", "testcase": false, "constructor": false}], "file": "demetra-workspace/src/main/java/internal/workspace/file/LegacyIndexer.java"}, "focal_method": {"identifier": "loadIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index", "body": "@Override\n    public Index loadIndex() throws IOException {\n        return xmlToIndex(unmarshalIndex(file), MoreFiles.getNameWithoutExtension(file));\n    }", "signature": "Index loadIndex()", "full_signature": "@Override public Index loadIndex()", "class_method_signature": "LegacyIndexer.loadIndex()", "testcase": false, "constructor": false, "invocations": ["xmlToIndex", "unmarshalIndex", "getNameWithoutExtension"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}