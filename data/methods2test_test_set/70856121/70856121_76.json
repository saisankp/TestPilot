{"test_class": {"identifier": "RepairUnitServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String STCS = \"SizeTieredCompactionStrategy\";", "modifier": "private static final", "type": "String", "declarator": "STCS = \"SizeTieredCompactionStrategy\"", "var_name": "STCS"}, {"original_string": "private static final String TWCS = \"TimeWindowCompactionStrategy\";", "modifier": "private static final", "type": "String", "declarator": "TWCS = \"TimeWindowCompactionStrategy\"", "var_name": "TWCS"}, {"original_string": "private AppContext context;", "modifier": "private", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private RepairUnitService service;", "modifier": "private", "type": "RepairUnitService", "declarator": "service", "var_name": "service"}, {"original_string": "private final Cluster cluster = Cluster.builder()\n      .withName(\"testcluster_\" + RandomStringUtils.randomAlphabetic(6))\n      .withPartitioner(\"murmur3\")\n      .withSeedHosts(Sets.newHashSet(\"127.0.0.1\"))\n      .withJmxPort(7199)\n      .build();", "modifier": "private final", "type": "Cluster", "declarator": "cluster = Cluster.builder()\n      .withName(\"testcluster_\" + RandomStringUtils.randomAlphabetic(6))\n      .withPartitioner(\"murmur3\")\n      .withSeedHosts(Sets.newHashSet(\"127.0.0.1\"))\n      .withJmxPort(7199)\n      .build()", "var_name": "cluster"}], "file": "src/server/src/test/java/io/cassandrareaper/service/RepairUnitServiceTest.java"}, "test_case": {"identifier": "getTablesToRepairRemoveAllFromListFailingTest", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n  public void getTablesToRepairRemoveAllFromListFailingTest() throws ReaperException {\n    JmxProxy proxy = JmxProxyTest.mockJmxProxyImpl();\n    when(proxy.getCassandraVersion()).thenReturn(\"3.11.4\");\n    when(context.jmxConnectionFactory.connectAny(Mockito.any(Collection.class))).thenReturn(proxy);\n\n    when(proxy.getTablesForKeyspace(Mockito.anyString()))\n        .thenReturn(Sets.newHashSet(\n                Table.builder().withName(\"table1\").withCompactionStrategy(STCS).build(),\n                Table.builder().withName(\"table2\").withCompactionStrategy(STCS).build(),\n                Table.builder().withName(\"table3\").withCompactionStrategy(STCS).build(),\n                Table.builder().withName(\"table4\").withCompactionStrategy(STCS).build()));\n\n    RepairUnit unit = RepairUnit.builder()\n        .clusterName(cluster.getName())\n        .keyspaceName(\"test\")\n        .columnFamilies(Sets.newHashSet(\"table1\", \"table2\", \"table3\"))\n        .blacklistedTables(Sets.newHashSet(\"table1\", \"table2\", \"table3\"))\n        .incrementalRepair(false)\n        .repairThreadCount(4)\n        .build(UUIDs.timeBased());\n\n    service.getTablesToRepair(cluster, unit);\n  }", "signature": "void getTablesToRepairRemoveAllFromListFailingTest()", "full_signature": "@Test(expected = IllegalStateException.class) public void getTablesToRepairRemoveAllFromListFailingTest()", "class_method_signature": "RepairUnitServiceTest.getTablesToRepairRemoveAllFromListFailingTest()", "testcase": true, "constructor": false, "invocations": ["mockJmxProxyImpl", "thenReturn", "when", "getCassandraVersion", "thenReturn", "when", "connectAny", "any", "thenReturn", "when", "getTablesForKeyspace", "anyString", "newHashSet", "build", "withCompactionStrategy", "withName", "builder", "build", "withCompactionStrategy", "withName", "builder", "build", "withCompactionStrategy", "withName", "builder", "build", "withCompactionStrategy", "withName", "builder", "build", "repairThreadCount", "incrementalRepair", "blacklistedTables", "columnFamilies", "keyspaceName", "clusterName", "builder", "getName", "newHashSet", "newHashSet", "timeBased", "getTablesToRepair"]}, "focal_class": {"identifier": "RepairUnitService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RepairUnitService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RepairUnitService.class)", "var_name": "LOG"}, {"original_string": "private static final Set<String> BLACKLISTED_STRATEGEIS\n      = ImmutableSet.of(\"TimeWindowCompactionStrategy\", \"DateTieredCompactionStrategy\");", "modifier": "private static final", "type": "Set<String>", "declarator": "BLACKLISTED_STRATEGEIS\n      = ImmutableSet.of(\"TimeWindowCompactionStrategy\", \"DateTieredCompactionStrategy\")", "var_name": "BLACKLISTED_STRATEGEIS"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "RepairUnitService", "parameters": "(AppContext context)", "modifiers": "private", "return": "", "signature": " RepairUnitService(AppContext context)", "full_signature": "private  RepairUnitService(AppContext context)", "class_method_signature": "RepairUnitService.RepairUnitService(AppContext context)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(AppContext context)", "modifiers": "public static", "return": "RepairUnitService", "signature": "RepairUnitService create(AppContext context)", "full_signature": "public static RepairUnitService create(AppContext context)", "class_method_signature": "RepairUnitService.create(AppContext context)", "testcase": false, "constructor": false}, {"identifier": "getOrCreateRepairUnit", "parameters": "(Cluster cluster, RepairUnit.Builder params)", "modifiers": "public", "return": "RepairUnit", "signature": "RepairUnit getOrCreateRepairUnit(Cluster cluster, RepairUnit.Builder params)", "full_signature": "public RepairUnit getOrCreateRepairUnit(Cluster cluster, RepairUnit.Builder params)", "class_method_signature": "RepairUnitService.getOrCreateRepairUnit(Cluster cluster, RepairUnit.Builder params)", "testcase": false, "constructor": false}, {"identifier": "getTablesToRepair", "parameters": "(Cluster cluster, RepairUnit repairUnit)", "modifiers": "", "return": "Set<String>", "signature": "Set<String> getTablesToRepair(Cluster cluster, RepairUnit repairUnit)", "full_signature": " Set<String> getTablesToRepair(Cluster cluster, RepairUnit repairUnit)", "class_method_signature": "RepairUnitService.getTablesToRepair(Cluster cluster, RepairUnit repairUnit)", "testcase": false, "constructor": false}, {"identifier": "findBlacklistedCompactionStrategyTables", "parameters": "(Cluster clstr, Set<Table> tables)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> findBlacklistedCompactionStrategyTables(Cluster clstr, Set<Table> tables)", "full_signature": "public Set<String> findBlacklistedCompactionStrategyTables(Cluster clstr, Set<Table> tables)", "class_method_signature": "RepairUnitService.findBlacklistedCompactionStrategyTables(Cluster clstr, Set<Table> tables)", "testcase": false, "constructor": false}, {"identifier": "versionCompare", "parameters": "(String str1, String str2)", "modifiers": "private static", "return": "Integer", "signature": "Integer versionCompare(String str1, String str2)", "full_signature": "private static Integer versionCompare(String str1, String str2)", "class_method_signature": "RepairUnitService.versionCompare(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "isBlackListedCompactionStrategy", "parameters": "(Table table)", "modifiers": "private static", "return": "boolean", "signature": "boolean isBlackListedCompactionStrategy(Table table)", "full_signature": "private static boolean isBlackListedCompactionStrategy(Table table)", "class_method_signature": "RepairUnitService.isBlackListedCompactionStrategy(Table table)", "testcase": false, "constructor": false}, {"identifier": "createRepairUnit", "parameters": "(Cluster cluster, RepairUnit.Builder builder)", "modifiers": "private", "return": "RepairUnit", "signature": "RepairUnit createRepairUnit(Cluster cluster, RepairUnit.Builder builder)", "full_signature": "private RepairUnit createRepairUnit(Cluster cluster, RepairUnit.Builder builder)", "class_method_signature": "RepairUnitService.createRepairUnit(Cluster cluster, RepairUnit.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "unitConflicts", "parameters": "(Cluster cluster, RepairUnit.Builder builder)", "modifiers": "private", "return": "boolean", "signature": "boolean unitConflicts(Cluster cluster, RepairUnit.Builder builder)", "full_signature": "private boolean unitConflicts(Cluster cluster, RepairUnit.Builder builder)", "class_method_signature": "RepairUnitService.unitConflicts(Cluster cluster, RepairUnit.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "conflictingUnits", "parameters": "(Cluster cluster, RepairUnit unit, RepairUnit.Builder builder)", "modifiers": "", "return": "boolean", "signature": "boolean conflictingUnits(Cluster cluster, RepairUnit unit, RepairUnit.Builder builder)", "full_signature": " boolean conflictingUnits(Cluster cluster, RepairUnit unit, RepairUnit.Builder builder)", "class_method_signature": "RepairUnitService.conflictingUnits(Cluster cluster, RepairUnit unit, RepairUnit.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "getTableNamesForKeyspace", "parameters": "(Cluster cluster, String keyspace)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getTableNamesForKeyspace(Cluster cluster, String keyspace)", "full_signature": "public Set<String> getTableNamesForKeyspace(Cluster cluster, String keyspace)", "class_method_signature": "RepairUnitService.getTableNamesForKeyspace(Cluster cluster, String keyspace)", "testcase": false, "constructor": false}, {"identifier": "listRepairTables", "parameters": "(RepairUnit.Builder builder, Set<String> allTables)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> listRepairTables(RepairUnit.Builder builder, Set<String> allTables)", "full_signature": "private static Set<String> listRepairTables(RepairUnit.Builder builder, Set<String> allTables)", "class_method_signature": "RepairUnitService.listRepairTables(RepairUnit.Builder builder, Set<String> allTables)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/RepairUnitService.java"}, "focal_method": {"identifier": "getTablesToRepair", "parameters": "(Cluster cluster, RepairUnit repairUnit)", "modifiers": "", "return": "Set<String>", "body": "Set<String> getTablesToRepair(Cluster cluster, RepairUnit repairUnit) throws ReaperException {\n    String keyspace = repairUnit.getKeyspaceName();\n    Set<String> result;\n\n    if (repairUnit.getColumnFamilies().isEmpty()) {\n      Set<Table> tables = ClusterFacade.create(context).getTablesForKeyspace(cluster, keyspace);\n      Set<String> twcsBlacklisted = findBlacklistedCompactionStrategyTables(cluster, tables);\n\n      result = tables.stream()\n          .map(Table::getName)\n          .filter(tableName -> !repairUnit.getBlacklistedTables().contains(tableName))\n          .filter(tableName -> !twcsBlacklisted.contains(tableName))\n          .collect(Collectors.toSet());\n    } else {\n      // if tables have been specified then don't apply the twcsBlacklisting\n      result = repairUnit.getColumnFamilies().stream()\n            .filter(tableName -> !repairUnit.getBlacklistedTables().contains(tableName))\n            .collect(Collectors.toSet());\n    }\n\n    Preconditions.checkState(\n        repairUnit.getBlacklistedTables().isEmpty() || !result.isEmpty(),\n        \"Invalid blacklist definition. It filtered out all tables in the keyspace.\");\n\n    return result;\n  }", "signature": "Set<String> getTablesToRepair(Cluster cluster, RepairUnit repairUnit)", "full_signature": " Set<String> getTablesToRepair(Cluster cluster, RepairUnit repairUnit)", "class_method_signature": "RepairUnitService.getTablesToRepair(Cluster cluster, RepairUnit repairUnit)", "testcase": false, "constructor": false, "invocations": ["getKeyspaceName", "isEmpty", "getColumnFamilies", "getTablesForKeyspace", "create", "findBlacklistedCompactionStrategyTables", "collect", "filter", "filter", "map", "stream", "contains", "getBlacklistedTables", "contains", "toSet", "collect", "filter", "stream", "getColumnFamilies", "contains", "getBlacklistedTables", "toSet", "checkState", "isEmpty", "getBlacklistedTables", "isEmpty"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}