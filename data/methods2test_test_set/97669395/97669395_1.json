{"test_class": {"identifier": "JavaParamFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private JavaTypeFilter javaTypeFilter;", "modifier": "@Mock private", "type": "JavaTypeFilter", "declarator": "javaTypeFilter", "var_name": "javaTypeFilter"}, {"original_string": "@Mock private JavaIdentifierFilter javaIdentifierFilter;", "modifier": "@Mock private", "type": "JavaIdentifierFilter", "declarator": "javaIdentifierFilter", "var_name": "javaIdentifierFilter"}], "file": "recipe-generator/src/test/java/ca/derekcormier/recipe/generator/filter/JavaParamFilterTest.java"}, "test_case": {"identifier": "testApply_passesCollapseVarargOptionToTypeFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApply_passesCollapseVarargOptionToTypeFilter() {\n    Cookbook cookbook = new Cookbook(\"test\", new ArrayList<>(), new ArrayList<>());\n    Filter filter = new JavaParamFilter(cookbook, javaTypeFilter, javaIdentifierFilter);\n\n    Map param = new HashMap();\n    param.put(\"name\", \"foo\");\n    param.put(\"type\", \"int[]\");\n\n    filter.apply(param, true);\n    verify(javaTypeFilter).apply(param.get(\"type\"), true);\n  }", "signature": "void testApply_passesCollapseVarargOptionToTypeFilter()", "full_signature": "@Test public void testApply_passesCollapseVarargOptionToTypeFilter()", "class_method_signature": "JavaParamFilterTest.testApply_passesCollapseVarargOptionToTypeFilter()", "testcase": true, "constructor": false, "invocations": ["put", "put", "apply", "apply", "verify", "get"]}, "focal_class": {"identifier": "JavaParamFilter", "superclass": "extends RecipeFilter", "interfaces": "", "fields": [{"original_string": "private final Filter typeFilter;", "modifier": "private final", "type": "Filter", "declarator": "typeFilter", "var_name": "typeFilter"}, {"original_string": "private final Filter identifierFilter;", "modifier": "private final", "type": "Filter", "declarator": "identifierFilter", "var_name": "identifierFilter"}], "methods": [{"identifier": "JavaParamFilter", "parameters": "(Cookbook cookbook, Filter typeFilter, Filter identifierFilter)", "modifiers": "public", "return": "", "signature": " JavaParamFilter(Cookbook cookbook, Filter typeFilter, Filter identifierFilter)", "full_signature": "public  JavaParamFilter(Cookbook cookbook, Filter typeFilter, Filter identifierFilter)", "class_method_signature": "JavaParamFilter.JavaParamFilter(Cookbook cookbook, Filter typeFilter, Filter identifierFilter)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaParamFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false}], "file": "recipe-generator/src/main/java/ca/derekcormier/recipe/generator/filter/JavaParamFilter.java"}, "focal_method": {"identifier": "apply", "parameters": "(Object value, Object... params)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object apply(Object value, Object... params) {\n    Map<String, Object> param = (Map<String, Object>) value;\n    String name = (String) param.get(\"name\");\n\n    boolean varargAsArray = params.length > 0 && super.asBoolean(params[0]);\n    return typeFilter.apply(param.get(\"type\"), varargAsArray) + \" \" + identifierFilter.apply(name);\n  }", "signature": "Object apply(Object value, Object... params)", "full_signature": "@Override public Object apply(Object value, Object... params)", "class_method_signature": "JavaParamFilter.apply(Object value, Object... params)", "testcase": false, "constructor": false, "invocations": ["get", "asBoolean", "apply", "get", "apply"]}, "repository": {"repo_id": 97669395, "url": "https://github.com/kormide/recipe", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 727, "license": "licensed"}}