{"test_class": {"identifier": "BitBufferHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "packethandler/implementation/src/test/java/org/opendaylight/l2switch/packethandler/decoders/utils/BitBufferHelperTest.java"}, "test_case": {"identifier": "testGetBits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBits() throws Exception {\n        byte[] data = { 10, 12, 14, 20, 55, 69, 82, 97, 109, 117, 127, -50 };\n        byte[] bits;\n\n        bits = BitBufferHelper.getBits(data, 88, 8); // BYTE extraOffsetBits = extranumBits = 0\n        Assert.assertTrue(bits[0] == -50);\n\n        bits = BitBufferHelper.getBits(data, 8, 16); // Short\n        Assert.assertTrue(bits[0] == 12);\n        Assert.assertTrue(bits[1] == 14);\n\n        bits = BitBufferHelper.getBits(data, 32, 32); // Int\n        Assert.assertTrue(bits[0] == 55);\n        Assert.assertTrue(bits[1] == 69);\n        Assert.assertTrue(bits[2] == 82);\n        Assert.assertTrue(bits[3] == 97);\n\n        bits = BitBufferHelper.getBits(data, 16, 48); // Long\n        Assert.assertTrue(bits[0] == 14);\n        Assert.assertTrue(bits[1] == 20);\n        Assert.assertTrue(bits[2] == 55);\n        Assert.assertTrue(bits[3] == 69);\n        Assert.assertTrue(bits[4] == 82);\n        Assert.assertTrue(bits[5] == 97);\n\n        bits = BitBufferHelper.getBits(data, 40, 7); // BYTE extraOffsetBits = extranumBits != 0\n        Assert.assertTrue(bits[0] == 34);\n\n        bits = BitBufferHelper.getBits(data, 8, 13); // Short\n        Assert.assertTrue(bits[0] == 1);\n        Assert.assertTrue(bits[1] == -127);\n\n        bits = BitBufferHelper.getBits(data, 32, 28); // Int\n        Assert.assertTrue(bits[0] == 3);\n        Assert.assertTrue(bits[1] == 116);\n        Assert.assertTrue(bits[2] == 85);\n        Assert.assertTrue(bits[3] == 38);\n\n        bits = BitBufferHelper.getBits(data, 16, 41); // Long\n        Assert.assertTrue(bits[0] == 0);\n        Assert.assertTrue(bits[1] == 28);\n        Assert.assertTrue(bits[2] == 40);\n        Assert.assertTrue(bits[3] == 110);\n        Assert.assertTrue(bits[4] == -118);\n        Assert.assertTrue(bits[5] == -92);\n\n        bits = BitBufferHelper.getBits(data, 3, 7); // BYTE extraOffsetBits != 0; extranumBits == 0\n        Assert.assertTrue(bits[0] == 40);\n\n        bits = BitBufferHelper.getBits(data, 13, 16); // Short\n        Assert.assertTrue(bits[0] == -127);\n        Assert.assertTrue(bits[1] == -62);\n\n        bits = BitBufferHelper.getBits(data, 5, 32); // Int\n        Assert.assertTrue(bits[0] == 65);\n        Assert.assertTrue(bits[1] == -127);\n        Assert.assertTrue(bits[2] == -62);\n        Assert.assertTrue(bits[3] == -122);\n\n        bits = BitBufferHelper.getBits(data, 23, 48); // Long\n        Assert.assertTrue(bits[0] == 10);\n        Assert.assertTrue(bits[1] == 27);\n        Assert.assertTrue(bits[2] == -94);\n        Assert.assertTrue(bits[3] == -87);\n        Assert.assertTrue(bits[4] == 48);\n        Assert.assertTrue(bits[5] == -74);\n\n        bits = BitBufferHelper.getBits(data, 66, 9); // BYTE extraOffsetBits != 0; extranumBits != 0\n        Assert.assertTrue(bits[0] == 1);\n        Assert.assertTrue(bits[1] == 107);\n\n        bits = BitBufferHelper.getBits(data, 13, 15); // Short\n        Assert.assertTrue(bits[0] == 64);\n        Assert.assertTrue(bits[1] == -31);\n\n        bits = BitBufferHelper.getBits(data, 5, 29); // Int\n        Assert.assertTrue(bits[0] == 8);\n        Assert.assertTrue(bits[1] == 48);\n        Assert.assertTrue(bits[2] == 56);\n        Assert.assertTrue(bits[3] == 80);\n\n        bits = BitBufferHelper.getBits(data, 31, 43); // Long\n        Assert.assertTrue(bits[0] == 0);\n        Assert.assertTrue(bits[1] == -35);\n        Assert.assertTrue(bits[2] == 21);\n        Assert.assertTrue(bits[3] == 73);\n        Assert.assertTrue(bits[4] == -123);\n        Assert.assertTrue(bits[5] == -75);\n\n        bits = BitBufferHelper.getBits(data, 4, 12); // Short\n        Assert.assertTrue(bits[0] == 10);\n        Assert.assertTrue(bits[1] == 12);\n\n        byte[] data1 = { 0, 8 };\n        bits = BitBufferHelper.getBits(data1, 7, 9); // Short\n        Assert.assertTrue(bits[0] == 0);\n        Assert.assertTrue(bits[1] == 8);\n\n        byte[] data2 = { 2, 8 };\n        bits = BitBufferHelper.getBits(data2, 0, 7); // Short\n        Assert.assertTrue(bits[0] == 1);\n\n        bits = BitBufferHelper.getBits(data2, 7, 9); // Short\n        Assert.assertTrue(bits[0] == 0);\n        Assert.assertTrue(bits[1] == 8);\n    }", "signature": "void testGetBits()", "full_signature": "@Test public void testGetBits()", "class_method_signature": "BitBufferHelperTest.testGetBits()", "testcase": true, "constructor": false, "invocations": ["getBits", "assertTrue", "getBits", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "getBits", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "getBits", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "getBits", "assertTrue", "assertTrue", "getBits", "assertTrue", "getBits", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "BitBufferHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BitBufferHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BitBufferHelper.class)", "var_name": "LOG"}, {"original_string": "public static final long BYTE_MASK = 0xFF;", "modifier": "public static final", "type": "long", "declarator": "BYTE_MASK = 0xFF", "var_name": "BYTE_MASK"}], "methods": [{"identifier": "BitBufferHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " BitBufferHelper()", "full_signature": "private  BitBufferHelper()", "class_method_signature": "BitBufferHelper.BitBufferHelper()", "testcase": false, "constructor": true}, {"identifier": "getByte", "parameters": "(byte[] data)", "modifiers": "public static", "return": "byte", "signature": "byte getByte(byte[] data)", "full_signature": "public static byte getByte(byte[] data)", "class_method_signature": "BitBufferHelper.getByte(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(byte[] data, int numBits)", "modifiers": "public static", "return": "short", "signature": "short getShort(byte[] data, int numBits)", "full_signature": "public static short getShort(byte[] data, int numBits)", "class_method_signature": "BitBufferHelper.getShort(byte[] data, int numBits)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(byte[] data)", "modifiers": "public static", "return": "short", "signature": "short getShort(byte[] data)", "full_signature": "public static short getShort(byte[] data)", "class_method_signature": "BitBufferHelper.getShort(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(byte[] data, int numBits)", "modifiers": "public static", "return": "int", "signature": "int getInt(byte[] data, int numBits)", "full_signature": "public static int getInt(byte[] data, int numBits)", "class_method_signature": "BitBufferHelper.getInt(byte[] data, int numBits)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(byte[] data)", "modifiers": "public static", "return": "int", "signature": "int getInt(byte[] data)", "full_signature": "public static int getInt(byte[] data)", "class_method_signature": "BitBufferHelper.getInt(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(byte[] data, int numBits)", "modifiers": "public static", "return": "long", "signature": "long getLong(byte[] data, int numBits)", "full_signature": "public static long getLong(byte[] data, int numBits)", "class_method_signature": "BitBufferHelper.getLong(byte[] data, int numBits)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(byte[] data)", "modifiers": "public static", "return": "long", "signature": "long getLong(byte[] data)", "full_signature": "public static long getLong(byte[] data)", "class_method_signature": "BitBufferHelper.getLong(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "getBits", "parameters": "(byte[] data, int startOffset, int numBits)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBits(byte[] data, int startOffset, int numBits)", "full_signature": "public static byte[] getBits(byte[] data, int startOffset, int numBits)", "class_method_signature": "BitBufferHelper.getBits(byte[] data, int startOffset, int numBits)", "testcase": false, "constructor": false}, {"identifier": "setByte", "parameters": "(byte[] data, byte input, int startOffset, int numBits)", "modifiers": "public static", "return": "void", "signature": "void setByte(byte[] data, byte input, int startOffset, int numBits)", "full_signature": "public static void setByte(byte[] data, byte input, int startOffset, int numBits)", "class_method_signature": "BitBufferHelper.setByte(byte[] data, byte input, int startOffset, int numBits)", "testcase": false, "constructor": false}, {"identifier": "setBytes", "parameters": "(byte[] data, byte[] input, int startOffset, int numBits)", "modifiers": "public static", "return": "void", "signature": "void setBytes(byte[] data, byte[] input, int startOffset, int numBits)", "full_signature": "public static void setBytes(byte[] data, byte[] input, int startOffset, int numBits)", "class_method_signature": "BitBufferHelper.setBytes(byte[] data, byte[] input, int startOffset, int numBits)", "testcase": false, "constructor": false}, {"identifier": "getMSBMask", "parameters": "(int numBits)", "modifiers": "public static", "return": "int", "signature": "int getMSBMask(int numBits)", "full_signature": "public static int getMSBMask(int numBits)", "class_method_signature": "BitBufferHelper.getMSBMask(int numBits)", "testcase": false, "constructor": false}, {"identifier": "getLSBMask", "parameters": "(int numBits)", "modifiers": "public static", "return": "int", "signature": "int getLSBMask(int numBits)", "full_signature": "public static int getLSBMask(int numBits)", "class_method_signature": "BitBufferHelper.getLSBMask(int numBits)", "testcase": false, "constructor": false}, {"identifier": "toNumber", "parameters": "(byte[] array)", "modifiers": "public static", "return": "long", "signature": "long toNumber(byte[] array)", "full_signature": "public static long toNumber(byte[] array)", "class_method_signature": "BitBufferHelper.toNumber(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "toNumber", "parameters": "(@Nonnull byte[] array, int numBits)", "modifiers": "public static", "return": "long", "signature": "long toNumber(@Nonnull byte[] array, int numBits)", "full_signature": "public static long toNumber(@Nonnull byte[] array, int numBits)", "class_method_signature": "BitBufferHelper.toNumber(@Nonnull byte[] array, int numBits)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(Number input)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(Number input)", "full_signature": "public static byte[] toByteArray(Number input)", "class_method_signature": "BitBufferHelper.toByteArray(Number input)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(Number input, int numBits)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(Number input, int numBits)", "full_signature": "public static byte[] toByteArray(Number input, int numBits)", "class_method_signature": "BitBufferHelper.toByteArray(Number input, int numBits)", "testcase": false, "constructor": false}, {"identifier": "shiftBitsToMSB", "parameters": "(byte[] inputBytes, int numBits)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] shiftBitsToMSB(byte[] inputBytes, int numBits)", "full_signature": "public static byte[] shiftBitsToMSB(byte[] inputBytes, int numBits)", "class_method_signature": "BitBufferHelper.shiftBitsToMSB(byte[] inputBytes, int numBits)", "testcase": false, "constructor": false}, {"identifier": "shiftBitsToLSB", "parameters": "(byte[] inputBytes, int numBits)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] shiftBitsToLSB(byte[] inputBytes, int numBits)", "full_signature": "public static byte[] shiftBitsToLSB(byte[] inputBytes, int numBits)", "class_method_signature": "BitBufferHelper.shiftBitsToLSB(byte[] inputBytes, int numBits)", "testcase": false, "constructor": false}, {"identifier": "insertBits", "parameters": "(byte[] data, byte[] inputdataLSB, int startOffset, int numBits)", "modifiers": "public static", "return": "void", "signature": "void insertBits(byte[] data, byte[] inputdataLSB, int startOffset, int numBits)", "full_signature": "public static void insertBits(byte[] data, byte[] inputdataLSB, int startOffset, int numBits)", "class_method_signature": "BitBufferHelper.insertBits(byte[] data, byte[] inputdataLSB, int startOffset, int numBits)", "testcase": false, "constructor": false}, {"identifier": "checkExceptions", "parameters": "(byte[] data, int startOffset, int numBits)", "modifiers": "public static", "return": "void", "signature": "void checkExceptions(byte[] data, int startOffset, int numBits)", "full_signature": "public static void checkExceptions(byte[] data, int startOffset, int numBits)", "class_method_signature": "BitBufferHelper.checkExceptions(byte[] data, int startOffset, int numBits)", "testcase": false, "constructor": false}], "file": "packethandler/implementation/src/main/java/org/opendaylight/l2switch/packethandler/decoders/utils/BitBufferHelper.java"}, "focal_method": {"identifier": "getBits", "parameters": "(byte[] data, int startOffset, int numBits)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] getBits(byte[] data, int startOffset, int numBits) throws BufferException {\n\n        int startByteOffset = 0;\n        int extranumBits = numBits % NetUtils.NUM_BITS_IN_A_BYTE;\n        final int extraOffsetBits = startOffset % NetUtils.NUM_BITS_IN_A_BYTE;\n        int numBytes = numBits % NetUtils.NUM_BITS_IN_A_BYTE != 0 ? 1 + numBits / NetUtils.NUM_BITS_IN_A_BYTE\n                : numBits / NetUtils.NUM_BITS_IN_A_BYTE;\n        startByteOffset = startOffset / NetUtils.NUM_BITS_IN_A_BYTE;\n        byte[] bytes = new byte[numBytes];\n        if (numBits == 0) {\n            return bytes;\n        }\n\n        checkExceptions(data, startOffset, numBits);\n\n        if (extraOffsetBits == 0) {\n            if (extranumBits == 0) {\n                System.arraycopy(data, startByteOffset, bytes, 0, numBytes);\n                return bytes;\n            } else {\n                System.arraycopy(data, startByteOffset, bytes, 0, numBytes - 1);\n                bytes[numBytes - 1] = (byte) (data[startByteOffset + numBytes - 1] & getMSBMask(extranumBits));\n            }\n        } else {\n            int index;\n            int valfromnext;\n            for (index = 0; index < numBits / NetUtils.NUM_BITS_IN_A_BYTE; index++) {\n                // Reading numBytes starting from offset\n                int valfromcurr = data[startByteOffset + index]\n                        & getLSBMask(NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits);\n                valfromnext = data[startByteOffset + index + 1] & getMSBMask(extraOffsetBits);\n                bytes[index] = (byte) (valfromcurr << extraOffsetBits\n                        | valfromnext >> NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits);\n            }\n            // Now adding the rest of the bits if any\n            if (extranumBits != 0) {\n                if (extranumBits < NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits) {\n                    valfromnext = (byte) (data[startByteOffset + index]\n                            & getMSBMask(extranumBits) >> extraOffsetBits);\n                    bytes[index] = (byte) (valfromnext << extraOffsetBits);\n                } else if (extranumBits == NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits) {\n                    int valfromcurr = data[startByteOffset + index]\n                            & getLSBMask(NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits);\n                    bytes[index] = (byte) (valfromcurr << extraOffsetBits);\n                } else {\n                    int valfromcurr = data[startByteOffset + index]\n                            & getLSBMask(NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits);\n                    valfromnext = data[startByteOffset + index + 1]\n                            & getMSBMask(extranumBits - (NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits));\n                    bytes[index] = (byte) (valfromcurr << extraOffsetBits\n                            | valfromnext >> NetUtils.NUM_BITS_IN_A_BYTE - extraOffsetBits);\n                }\n\n            }\n        }\n        // Aligns the bits to LSB\n        return shiftBitsToLSB(bytes, numBits);\n    }", "signature": "byte[] getBits(byte[] data, int startOffset, int numBits)", "full_signature": "public static byte[] getBits(byte[] data, int startOffset, int numBits)", "class_method_signature": "BitBufferHelper.getBits(byte[] data, int startOffset, int numBits)", "testcase": false, "constructor": false, "invocations": ["checkExceptions", "arraycopy", "arraycopy", "getMSBMask", "getLSBMask", "getMSBMask", "getMSBMask", "getLSBMask", "getLSBMask", "getMSBMask", "shiftBitsToLSB"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}