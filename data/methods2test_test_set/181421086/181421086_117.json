{"test_class": {"identifier": "SPUDTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/packet/SPUDTest.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserialize() throws PacketParsingException {\n        byte[] spudPacket =  {\n                (byte) 0xd8, 0x00, 0x00, (byte) 0xd8, (byte) 0xb6,\n                0x40, 0x17, (byte) 0x88, 0x0a, 0x51, 0x01, 0x07,\n                0x00, (byte) 0xa1, 0x00, (byte) 0xa2, 0x68, 0x75,\n                0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x65,\n                0x4a, 0x61, 0x63, 0x6f, 0x62, 0x67, 0x6d, 0x65,\n                0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x68, 0x61,\n                0x73, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,\n                0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6f,\n                0x6d\n        };\n        SPUD packet = new SPUD();\n        packet.deserialize(spudPacket, 0, spudPacket.length);\n        byte[] packetSerialized = packet.serialize();\n        assertTrue(Arrays.equals(spudPacket, packetSerialized));\n    }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "SPUDTest.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["deserialize", "serialize", "assertTrue", "equals"]}, "focal_class": {"identifier": "SPUD", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "public static final byte[] MAGIC_CONSTANT =\n        { (byte) 0xd8, 0x00, 0x00, (byte) 0xd8 };", "modifier": "public static final", "type": "byte[]", "declarator": "MAGIC_CONSTANT =\n        { (byte) 0xd8, 0x00, 0x00, (byte) 0xd8 }", "var_name": "MAGIC_CONSTANT"}, {"original_string": "public static final int HEADER_LENGTH = 13;", "modifier": "public static final", "type": "int", "declarator": "HEADER_LENGTH = 13", "var_name": "HEADER_LENGTH"}, {"original_string": "public static final byte COMMAND_DATA = 0x0;", "modifier": "public static final", "type": "byte", "declarator": "COMMAND_DATA = 0x0", "var_name": "COMMAND_DATA"}, {"original_string": "public static final byte COMMAND_OPEN = 0x1;", "modifier": "public static final", "type": "byte", "declarator": "COMMAND_OPEN = 0x1", "var_name": "COMMAND_OPEN"}, {"original_string": "public static final byte COMMAND_CLOSE = 0x2;", "modifier": "public static final", "type": "byte", "declarator": "COMMAND_CLOSE = 0x2", "var_name": "COMMAND_CLOSE"}, {"original_string": "public static final byte COMMAND_ACK = 0x3;", "modifier": "public static final", "type": "byte", "declarator": "COMMAND_ACK = 0x3", "var_name": "COMMAND_ACK"}, {"original_string": "protected long tubeID;", "modifier": "protected", "type": "long", "declarator": "tubeID", "var_name": "tubeID"}, {"original_string": "protected byte command;", "modifier": "protected", "type": "byte", "declarator": "command", "var_name": "command"}, {"original_string": "protected boolean adec;", "modifier": "protected", "type": "boolean", "declarator": "adec", "var_name": "adec"}, {"original_string": "protected boolean pdec;", "modifier": "protected", "type": "boolean", "declarator": "pdec", "var_name": "pdec"}, {"original_string": "protected byte reserved;", "modifier": "protected", "type": "byte", "declarator": "reserved", "var_name": "reserved"}], "methods": [{"identifier": "getTubeID", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTubeID()", "full_signature": "public long getTubeID()", "class_method_signature": "SPUD.getTubeID()", "testcase": false, "constructor": false}, {"identifier": "setTubeID", "parameters": "(long tubeID)", "modifiers": "public", "return": "SPUD", "signature": "SPUD setTubeID(long tubeID)", "full_signature": "public SPUD setTubeID(long tubeID)", "class_method_signature": "SPUD.setTubeID(long tubeID)", "testcase": false, "constructor": false}, {"identifier": "getCommand", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getCommand()", "full_signature": "public byte getCommand()", "class_method_signature": "SPUD.getCommand()", "testcase": false, "constructor": false}, {"identifier": "setCommand", "parameters": "(byte command)", "modifiers": "public", "return": "SPUD", "signature": "SPUD setCommand(byte command)", "full_signature": "public SPUD setCommand(byte command)", "class_method_signature": "SPUD.setCommand(byte command)", "testcase": false, "constructor": false}, {"identifier": "getADEC", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getADEC()", "full_signature": "public boolean getADEC()", "class_method_signature": "SPUD.getADEC()", "testcase": false, "constructor": false}, {"identifier": "setADEC", "parameters": "(boolean adec)", "modifiers": "public", "return": "SPUD", "signature": "SPUD setADEC(boolean adec)", "full_signature": "public SPUD setADEC(boolean adec)", "class_method_signature": "SPUD.setADEC(boolean adec)", "testcase": false, "constructor": false}, {"identifier": "getPDEC", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getPDEC()", "full_signature": "public boolean getPDEC()", "class_method_signature": "SPUD.getPDEC()", "testcase": false, "constructor": false}, {"identifier": "setPDEC", "parameters": "(boolean pdec)", "modifiers": "public", "return": "SPUD", "signature": "SPUD setPDEC(boolean pdec)", "full_signature": "public SPUD setPDEC(boolean pdec)", "class_method_signature": "SPUD.setPDEC(boolean pdec)", "testcase": false, "constructor": false}, {"identifier": "getReserved", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getReserved()", "full_signature": "public byte getReserved()", "class_method_signature": "SPUD.getReserved()", "testcase": false, "constructor": false}, {"identifier": "setReserved", "parameters": "(byte reserved)", "modifiers": "public", "return": "SPUD", "signature": "SPUD setReserved(byte reserved)", "full_signature": "public SPUD setReserved(byte reserved)", "class_method_signature": "SPUD.setReserved(byte reserved)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "@Override public byte[] serialize()", "class_method_signature": "SPUD.serialize()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "SPUD.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SPUD.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SPUD.equals(Object obj)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/packet/SPUD.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "body": "@Override\n    public IPacket deserialize(byte[] data, int offset, int length)\n            throws PacketParsingException {\n        ByteBuffer bb = ByteBuffer.wrap(data, offset, length);\n        byte[] magicConstant = new byte[MAGIC_CONSTANT.length];\n        bb.get(magicConstant, 0, MAGIC_CONSTANT.length);\n        if (!Arrays.equals(magicConstant, MAGIC_CONSTANT)) {\n            throw new PacketParsingException(\"Magic constant is incorrect.\");\n        }\n        tubeID = bb.getLong();\n        byte lastByte = bb.get();\n        command = (byte) ((lastByte & 0xc0) >>> 6);\n        adec = ((lastByte & 0x20) != 0);\n        pdec = ((lastByte & 0x10) != 0);\n        reserved = (byte) (lastByte & 0xF);\n        // TODO: make sure reserved bits are 0 for this version.\n        this.payload = new Data();\n        this.payload = payload.deserialize(data, bb.position(), bb.limit()-bb.position());\n        this.payload.setParent(this);\n        return this;\n    }", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "SPUD.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["wrap", "get", "equals", "getLong", "get", "deserialize", "position", "limit", "position", "setParent"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}