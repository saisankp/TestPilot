{"test_class": {"identifier": "BrowserMobResponseInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private BrowserMobResponseInterceptor underTest;", "modifier": "@InjectMocks\n    private", "type": "BrowserMobResponseInterceptor", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private BrowserMobHttpResponse response;", "modifier": "@Mock\n    private", "type": "BrowserMobHttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private WilmaHttpResponse wilmaResponse;", "modifier": "@Mock\n    private", "type": "WilmaHttpResponse", "declarator": "wilmaResponse", "var_name": "wilmaResponse"}, {"original_string": "@Mock\n    private HttpResponseTransformer responseTransformer;", "modifier": "@Mock\n    private", "type": "HttpResponseTransformer", "declarator": "responseTransformer", "var_name": "responseTransformer"}, {"original_string": "@Mock\n    private WilmaHttpResponseProcessor responseHandler;", "modifier": "@Mock\n    private", "type": "WilmaHttpResponseProcessor", "declarator": "responseHandler", "var_name": "responseHandler"}, {"original_string": "@Mock\n    private BrowserMobResponseUpdater browserMobResponseUpdater;", "modifier": "@Mock\n    private", "type": "BrowserMobResponseUpdater", "declarator": "browserMobResponseUpdater", "var_name": "browserMobResponseUpdater"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "file": "wilma-application/modules/wilma-browsermob-integration/src/test/java/com/epam/wilma/browsermob/interceptor/BrowserMobResponseInterceptorTest.java"}, "test_case": {"identifier": "testProcessWhenApplicationExceptionIsThrownShouldLogError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessWhenApplicationExceptionIsThrownShouldLogError() throws ApplicationException {\n        // GIVEN\n        ApplicationException e = new ApplicationException(\"exception\");\n        given(responseTransformer.transformResponse(response)).willReturn(wilmaResponse);\n        BDDMockito.willThrow(e).given(responseHandler).processResponse(wilmaResponse);\n        // WHEN\n        underTest.process(response);\n        // THEN\n        verify(logger).error(\"exception\", e);\n    }", "signature": "void testProcessWhenApplicationExceptionIsThrownShouldLogError()", "full_signature": "@Test public void testProcessWhenApplicationExceptionIsThrownShouldLogError()", "class_method_signature": "BrowserMobResponseInterceptorTest.testProcessWhenApplicationExceptionIsThrownShouldLogError()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "transformResponse", "processResponse", "given", "willThrow", "process", "error", "verify"]}, "focal_class": {"identifier": "BrowserMobResponseInterceptor", "superclass": "", "interfaces": "implements ResponseInterceptor", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(BrowserMobResponseInterceptor.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BrowserMobResponseInterceptor.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private HttpResponseTransformer responseTransformer;", "modifier": "@Autowired\n    private", "type": "HttpResponseTransformer", "declarator": "responseTransformer", "var_name": "responseTransformer"}, {"original_string": "@Autowired\n    private BrowserMobResponseUpdater browserMobResponseUpdater;", "modifier": "@Autowired\n    private", "type": "BrowserMobResponseUpdater", "declarator": "browserMobResponseUpdater", "var_name": "browserMobResponseUpdater"}, {"original_string": "@Autowired\n    private WilmaHttpResponseProcessor responseProcessor;", "modifier": "@Autowired\n    private", "type": "WilmaHttpResponseProcessor", "declarator": "responseProcessor", "var_name": "responseProcessor"}], "methods": [{"identifier": "process", "parameters": "(final BrowserMobHttpResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void process(final BrowserMobHttpResponse response)", "full_signature": "@Override public void process(final BrowserMobHttpResponse response)", "class_method_signature": "BrowserMobResponseInterceptor.process(final BrowserMobHttpResponse response)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-browsermob-integration/src/main/java/com/epam/wilma/browsermob/interceptor/BrowserMobResponseInterceptor.java"}, "focal_method": {"identifier": "process", "parameters": "(final BrowserMobHttpResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process(final BrowserMobHttpResponse response) {\n        try {\n            WilmaHttpResponse wilmaResponse = responseTransformer.transformResponse(response);\n            responseProcessor.processResponse(wilmaResponse);\n            browserMobResponseUpdater.updateResponse(response, wilmaResponse);\n        } catch (ApplicationException e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "signature": "void process(final BrowserMobHttpResponse response)", "full_signature": "@Override public void process(final BrowserMobHttpResponse response)", "class_method_signature": "BrowserMobResponseInterceptor.process(final BrowserMobHttpResponse response)", "testcase": false, "constructor": false, "invocations": ["transformResponse", "processResponse", "updateResponse", "error", "getMessage"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}