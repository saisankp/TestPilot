{"test_class": {"identifier": "DatabaseConnectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DatabaseConnector connector;", "modifier": "", "type": "DatabaseConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "MapperFactory factory;", "modifier": "", "type": "MapperFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "TestObject object;", "modifier": "", "type": "TestObject", "declarator": "object", "var_name": "object"}, {"original_string": "String id;", "modifier": "", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "String rev;", "modifier": "", "type": "String", "declarator": "rev", "var_name": "rev"}], "file": "libraries/lib-datahandler/src/test/java/org/eclipse/sw360/datahandler/couchdb/DatabaseConnectorTest.java"}, "test_case": {"identifier": "testGetDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDocument() throws Exception {\n        TestObject object1 = connector.get(TestObject.class, id);\n        assertEquals(object, object1);\n    }", "signature": "void testGetDocument()", "full_signature": "@Test public void testGetDocument()", "class_method_signature": "DatabaseConnectorTest.testGetDocument()", "testcase": true, "constructor": false, "invocations": ["get", "assertEquals"]}, "focal_class": {"identifier": "DatabaseConnector", "superclass": "extends StdCouchDbConnector", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(DatabaseConnector.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(DatabaseConnector.class)", "var_name": "log"}, {"original_string": "private final String dbName;", "modifier": "private final", "type": "String", "declarator": "dbName", "var_name": "dbName"}, {"original_string": "private final DatabaseInstance instance;", "modifier": "private final", "type": "DatabaseInstance", "declarator": "instance", "var_name": "instance"}, {"original_string": "private String adminRole = \"_admin\";", "modifier": "private", "type": "String", "declarator": "adminRole = \"_admin\"", "var_name": "adminRole"}], "methods": [{"identifier": "DatabaseConnector", "parameters": "(HttpClient httpClient, String dbName)", "modifiers": "public", "return": "", "signature": " DatabaseConnector(HttpClient httpClient, String dbName)", "full_signature": "public  DatabaseConnector(HttpClient httpClient, String dbName)", "class_method_signature": "DatabaseConnector.DatabaseConnector(HttpClient httpClient, String dbName)", "testcase": false, "constructor": true}, {"identifier": "DatabaseConnector", "parameters": "(Supplier<HttpClient> httpClient, String dbName)", "modifiers": "public", "return": "", "signature": " DatabaseConnector(Supplier<HttpClient> httpClient, String dbName)", "full_signature": "public  DatabaseConnector(Supplier<HttpClient> httpClient, String dbName)", "class_method_signature": "DatabaseConnector.DatabaseConnector(Supplier<HttpClient> httpClient, String dbName)", "testcase": false, "constructor": true}, {"identifier": "DatabaseConnector", "parameters": "(HttpClient httpClient, String dbName, MapperFactory mapperFactory)", "modifiers": "public", "return": "", "signature": " DatabaseConnector(HttpClient httpClient, String dbName, MapperFactory mapperFactory)", "full_signature": "public  DatabaseConnector(HttpClient httpClient, String dbName, MapperFactory mapperFactory)", "class_method_signature": "DatabaseConnector.DatabaseConnector(HttpClient httpClient, String dbName, MapperFactory mapperFactory)", "testcase": false, "constructor": true}, {"identifier": "DatabaseConnector", "parameters": "(String dbName, DatabaseInstance instance, MapperFactory mapperFactory)", "modifiers": "private", "return": "", "signature": " DatabaseConnector(String dbName, DatabaseInstance instance, MapperFactory mapperFactory)", "full_signature": "private  DatabaseConnector(String dbName, DatabaseInstance instance, MapperFactory mapperFactory)", "class_method_signature": "DatabaseConnector.DatabaseConnector(String dbName, DatabaseInstance instance, MapperFactory mapperFactory)", "testcase": false, "constructor": true}, {"identifier": "restrictAccessToAdmins", "parameters": "()", "modifiers": "public", "return": "Optional<Status>", "signature": "Optional<Status> restrictAccessToAdmins()", "full_signature": "public Optional<Status> restrictAccessToAdmins()", "class_method_signature": "DatabaseConnector.restrictAccessToAdmins()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(T document)", "modifiers": "public", "return": "boolean", "signature": "boolean add(T document)", "full_signature": "public boolean add(T document)", "class_method_signature": "DatabaseConnector.add(T document)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> type, String id)", "modifiers": "public", "return": "T", "signature": "T get(Class<T> type, String id)", "full_signature": "public T get(Class<T> type, String id)", "class_method_signature": "DatabaseConnector.get(Class<T> type, String id)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> type, Collection<String> ids, boolean ignoreNotFound)", "modifiers": "public", "return": "List<T>", "signature": "List<T> get(Class<T> type, Collection<String> ids, boolean ignoreNotFound)", "full_signature": "public List<T> get(Class<T> type, Collection<String> ids, boolean ignoreNotFound)", "class_method_signature": "DatabaseConnector.get(Class<T> type, Collection<String> ids, boolean ignoreNotFound)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> type, Collection<String> ids)", "modifiers": "public", "return": "List<T>", "signature": "List<T> get(Class<T> type, Collection<String> ids)", "full_signature": "public List<T> get(Class<T> type, Collection<String> ids)", "class_method_signature": "DatabaseConnector.get(Class<T> type, Collection<String> ids)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Object document)", "modifiers": "@Override public", "return": "void", "signature": "void update(Object document)", "full_signature": "@Override public void update(Object document)", "class_method_signature": "DatabaseConnector.update(Object document)", "testcase": false, "constructor": false}, {"identifier": "getDocumentWrapper", "parameters": "(Object document, Class documentClass)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "DocumentWrapper", "signature": "DocumentWrapper getDocumentWrapper(Object document, Class documentClass)", "full_signature": "@SuppressWarnings(\"unchecked\") private DocumentWrapper getDocumentWrapper(Object document, Class documentClass)", "class_method_signature": "DatabaseConnector.getDocumentWrapper(Object document, Class documentClass)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(String id)", "full_signature": "public boolean contains(String id)", "class_method_signature": "DatabaseConnector.contains(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteById", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteById(String id)", "full_signature": "public boolean deleteById(String id)", "class_method_signature": "DatabaseConnector.deleteById(String id)", "testcase": false, "constructor": false}, {"identifier": "getDbName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDbName()", "full_signature": "public String getDbName()", "class_method_signature": "DatabaseConnector.getDbName()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public", "return": "DatabaseInstance", "signature": "DatabaseInstance getInstance()", "full_signature": "public DatabaseInstance getInstance()", "class_method_signature": "DatabaseConnector.getInstance()", "testcase": false, "constructor": false}, {"identifier": "deleteBulk", "parameters": "(Collection<?> deletionCandidates)", "modifiers": "protected", "return": "List<DocumentOperationResult>", "signature": "List<DocumentOperationResult> deleteBulk(Collection<?> deletionCandidates)", "full_signature": "protected List<DocumentOperationResult> deleteBulk(Collection<?> deletionCandidates)", "class_method_signature": "DatabaseConnector.deleteBulk(Collection<?> deletionCandidates)", "testcase": false, "constructor": false}, {"identifier": "deleteIds", "parameters": "(Collection<String> ids, Class<T> type)", "modifiers": "public", "return": "List<DocumentOperationResult>", "signature": "List<DocumentOperationResult> deleteIds(Collection<String> ids, Class<T> type)", "full_signature": "public List<DocumentOperationResult> deleteIds(Collection<String> ids, Class<T> type)", "class_method_signature": "DatabaseConnector.deleteIds(Collection<String> ids, Class<T> type)", "testcase": false, "constructor": false}], "file": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/couchdb/DatabaseConnector.java"}, "focal_method": {"identifier": "get", "parameters": "(Class<T> type, String id)", "modifiers": "public", "return": "T", "body": "public <T> T get(Class<T> type, String id) {\n        try {\n            return super.get(type, id);\n        } catch (DocumentNotFoundException e) {\n            log.info(\"Document not found for ID: \" + id);\n            return null;\n        } catch (DbAccessException e) {\n            log.error(\"Document ID \" + id + \" could not be successfully converted to \" + type.getName(), e);\n            return null;\n        }\n    }", "signature": "T get(Class<T> type, String id)", "full_signature": "public T get(Class<T> type, String id)", "class_method_signature": "DatabaseConnector.get(Class<T> type, String id)", "testcase": false, "constructor": false, "invocations": ["get", "info", "error", "getName"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}