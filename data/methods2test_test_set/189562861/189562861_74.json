{"test_class": {"identifier": "PortTelnetHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TelnetHandler port = new PortTelnetHandler();", "modifier": "private static", "type": "TelnetHandler", "declarator": "port = new PortTelnetHandler()", "var_name": "port"}, {"original_string": "private static Invoker<DemoService> mockInvoker;", "modifier": "private static", "type": "Invoker<DemoService>", "declarator": "mockInvoker", "var_name": "mockInvoker"}], "file": "dubbo-rpc/dubbo-rpc-dubbo/src/test/java/com/alibaba/dubbo/rpc/protocol/dubbo/telnet/PortTelnetHandlerTest.java"}, "test_case": {"identifier": "testListDetail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListDetail() throws RemotingException {\n        String result = port.telnet(null, \"-l\");\n        assertEquals(\"dubbo://127.0.0.1:20887\", result);\n    }", "signature": "void testListDetail()", "full_signature": "@Test public void testListDetail()", "class_method_signature": "PortTelnetHandlerTest.testListDetail()", "testcase": true, "constructor": false, "invocations": ["telnet", "assertEquals"]}, "focal_class": {"identifier": "PortTelnetHandler", "superclass": "", "interfaces": "implements TelnetHandler", "fields": [], "methods": [{"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "PortTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-dubbo/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/telnet/PortTelnetHandler.java"}, "focal_method": {"identifier": "telnet", "parameters": "(Channel channel, String message)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String telnet(Channel channel, String message) {\n        StringBuilder buf = new StringBuilder();\n        String port = null;\n        boolean detail = false;\n        if (message.length() > 0) {\n            String[] parts = message.split(\"\\\\s+\");\n            for (String part : parts) {\n                if (\"-l\".equals(part)) {\n                    detail = true;\n                } else {\n                    if (!StringUtils.isInteger(part)) {\n                        return \"Illegal port \" + part + \", must be integer.\";\n                    }\n                    port = part;\n                }\n            }\n        }\n        if (port == null || port.length() == 0) {\n            for (ExchangeServer server : DubboProtocol.getDubboProtocol().getServers()) {\n                if (buf.length() > 0) {\n                    buf.append(\"\\r\\n\");\n                }\n                if (detail) {\n                    buf.append(server.getUrl().getProtocol() + \"://\" + server.getUrl().getAddress());\n                } else {\n                    buf.append(server.getUrl().getPort());\n                }\n            }\n        } else {\n            int p = Integer.parseInt(port);\n            ExchangeServer server = null;\n            for (ExchangeServer s : DubboProtocol.getDubboProtocol().getServers()) {\n                if (p == s.getUrl().getPort()) {\n                    server = s;\n                    break;\n                }\n            }\n            if (server != null) {\n                Collection<ExchangeChannel> channels = server.getExchangeChannels();\n                for (ExchangeChannel c : channels) {\n                    if (buf.length() > 0) {\n                        buf.append(\"\\r\\n\");\n                    }\n                    if (detail) {\n                        buf.append(c.getRemoteAddress() + \" -> \" + c.getLocalAddress());\n                    } else {\n                        buf.append(c.getRemoteAddress());\n                    }\n                }\n            } else {\n                buf.append(\"No such port \" + port);\n            }\n        }\n        return buf.toString();\n    }", "signature": "String telnet(Channel channel, String message)", "full_signature": "@Override public String telnet(Channel channel, String message)", "class_method_signature": "PortTelnetHandler.telnet(Channel channel, String message)", "testcase": false, "constructor": false, "invocations": ["length", "split", "equals", "isInteger", "length", "getServers", "getDubboProtocol", "length", "append", "append", "getProtocol", "getUrl", "getAddress", "getUrl", "append", "getPort", "getUrl", "parseInt", "getServers", "getDubboProtocol", "getPort", "getUrl", "getExchangeChannels", "length", "append", "append", "getRemoteAddress", "getLocalAddress", "append", "getRemoteAddress", "append", "toString"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}