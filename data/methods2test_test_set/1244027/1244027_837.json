{"test_class": {"identifier": "XPathParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TypeSystem typeSystem;", "modifier": "private", "type": "TypeSystem", "declarator": "typeSystem", "var_name": "typeSystem"}, {"original_string": "private XPathParser parser;", "modifier": "private", "type": "XPathParser", "declarator": "parser", "var_name": "parser"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/xpath/XPathParserTest.java"}, "test_case": {"identifier": "shouldParseAxisStepFromNameWithNoPrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseAxisStepFromNameWithNoPrefix() {\n        assertThat(parser.parseAxisStep(tokenize(\"foo\")), is(axisStep(nameTest(\"foo\"))));\n    }", "signature": "void shouldParseAxisStepFromNameWithNoPrefix()", "full_signature": "@Test public void shouldParseAxisStepFromNameWithNoPrefix()", "class_method_signature": "XPathParserTest.shouldParseAxisStepFromNameWithNoPrefix()", "testcase": true, "constructor": false, "invocations": ["assertThat", "parseAxisStep", "tokenize", "is", "axisStep", "nameTest"]}, "focal_class": {"identifier": "XPathParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TypeSystem typeSystem;", "modifier": "private final", "type": "TypeSystem", "declarator": "typeSystem", "var_name": "typeSystem"}, {"original_string": "private final XmlNameEncoder decoder = new XmlNameEncoder();", "modifier": "private final", "type": "XmlNameEncoder", "declarator": "decoder = new XmlNameEncoder()", "var_name": "decoder"}], "methods": [{"identifier": "XPathParser", "parameters": "( TypeSystem context )", "modifiers": "public", "return": "", "signature": " XPathParser( TypeSystem context )", "full_signature": "public  XPathParser( TypeSystem context )", "class_method_signature": "XPathParser.XPathParser( TypeSystem context )", "testcase": false, "constructor": true}, {"identifier": "parseXPath", "parameters": "( String xpath )", "modifiers": "public", "return": "Component", "signature": "Component parseXPath( String xpath )", "full_signature": "public Component parseXPath( String xpath )", "class_method_signature": "XPathParser.parseXPath( String xpath )", "testcase": false, "constructor": false}, {"identifier": "parseXPath", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseXPath( TokenStream tokens )", "full_signature": "protected Component parseXPath( TokenStream tokens )", "class_method_signature": "XPathParser.parseXPath( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseExpr( TokenStream tokens )", "full_signature": "protected Component parseExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseExprSingle", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseExprSingle( TokenStream tokens )", "full_signature": "protected Component parseExprSingle( TokenStream tokens )", "class_method_signature": "XPathParser.parseExprSingle( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseOrExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseOrExpr( TokenStream tokens )", "full_signature": "protected Component parseOrExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseOrExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseAndExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseAndExpr( TokenStream tokens )", "full_signature": "protected Component parseAndExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseAndExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseInstanceofExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseInstanceofExpr( TokenStream tokens )", "full_signature": "protected Component parseInstanceofExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseInstanceofExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseTreatExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseTreatExpr( TokenStream tokens )", "full_signature": "protected Component parseTreatExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseTreatExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseCastableExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseCastableExpr( TokenStream tokens )", "full_signature": "protected Component parseCastableExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseCastableExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseCastExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseCastExpr( TokenStream tokens )", "full_signature": "protected Component parseCastExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseCastExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseComparisonExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseComparisonExpr( TokenStream tokens )", "full_signature": "protected Component parseComparisonExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseComparisonExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseValueComp", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseValueComp( TokenStream tokens )", "full_signature": "protected Component parseValueComp( TokenStream tokens )", "class_method_signature": "XPathParser.parseValueComp( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNodeComp", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "NodeComparisonOperator", "signature": "NodeComparisonOperator parseNodeComp( TokenStream tokens )", "full_signature": "protected NodeComparisonOperator parseNodeComp( TokenStream tokens )", "class_method_signature": "XPathParser.parseNodeComp( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseRangeExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseRangeExpr( TokenStream tokens )", "full_signature": "protected Component parseRangeExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseRangeExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseAdditiveExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseAdditiveExpr( TokenStream tokens )", "full_signature": "protected Component parseAdditiveExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseAdditiveExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseMultiplicativeExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseMultiplicativeExpr( TokenStream tokens )", "full_signature": "protected Component parseMultiplicativeExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseMultiplicativeExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseUnaryExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseUnaryExpr( TokenStream tokens )", "full_signature": "protected Component parseUnaryExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseUnaryExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseUnionExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseUnionExpr( TokenStream tokens )", "full_signature": "protected Component parseUnionExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseUnionExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseIntersectExceptExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseIntersectExceptExpr( TokenStream tokens )", "full_signature": "protected Component parseIntersectExceptExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseIntersectExceptExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseValueExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parseValueExpr( TokenStream tokens )", "full_signature": "protected Component parseValueExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseValueExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parsePathExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "PathExpression", "signature": "PathExpression parsePathExpr( TokenStream tokens )", "full_signature": "protected PathExpression parsePathExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parsePathExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseRelativePathExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "PathExpression", "signature": "PathExpression parseRelativePathExpr( TokenStream tokens )", "full_signature": "protected PathExpression parseRelativePathExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseRelativePathExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseStepExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "StepExpression", "signature": "StepExpression parseStepExpr( TokenStream tokens )", "full_signature": "protected StepExpression parseStepExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseStepExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseAxisStep", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "AxisStep", "signature": "AxisStep parseAxisStep( TokenStream tokens )", "full_signature": "protected AxisStep parseAxisStep( TokenStream tokens )", "class_method_signature": "XPathParser.parseAxisStep( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parsePredicates", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "List<Component>", "signature": "List<Component> parsePredicates( TokenStream tokens )", "full_signature": "protected List<Component> parsePredicates( TokenStream tokens )", "class_method_signature": "XPathParser.parsePredicates( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseFilterExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "FilterStep", "signature": "FilterStep parseFilterExpr( TokenStream tokens )", "full_signature": "protected FilterStep parseFilterExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseFilterExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parsePrimaryExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Component", "signature": "Component parsePrimaryExpr( TokenStream tokens )", "full_signature": "protected Component parsePrimaryExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parsePrimaryExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseContextItemExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "ContextItem", "signature": "ContextItem parseContextItemExpr( TokenStream tokens )", "full_signature": "protected ContextItem parseContextItemExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseContextItemExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseParenthesizedExpr", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "ParenthesizedExpression", "signature": "ParenthesizedExpression parseParenthesizedExpr( TokenStream tokens )", "full_signature": "protected ParenthesizedExpression parseParenthesizedExpr( TokenStream tokens )", "class_method_signature": "XPathParser.parseParenthesizedExpr( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNumericLiteral", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Literal", "signature": "Literal parseNumericLiteral( TokenStream tokens )", "full_signature": "protected Literal parseNumericLiteral( TokenStream tokens )", "class_method_signature": "XPathParser.parseNumericLiteral( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseStringLiteral", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Literal", "signature": "Literal parseStringLiteral( TokenStream tokens )", "full_signature": "protected Literal parseStringLiteral( TokenStream tokens )", "class_method_signature": "XPathParser.parseStringLiteral( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseFunctionCall", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "FunctionCall", "signature": "FunctionCall parseFunctionCall( TokenStream tokens )", "full_signature": "protected FunctionCall parseFunctionCall( TokenStream tokens )", "class_method_signature": "XPathParser.parseFunctionCall( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseGeneralComp", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "Operator", "signature": "Operator parseGeneralComp( TokenStream tokens )", "full_signature": "protected Operator parseGeneralComp( TokenStream tokens )", "class_method_signature": "XPathParser.parseGeneralComp( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNodeTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "NodeTest", "signature": "NodeTest parseNodeTest( TokenStream tokens )", "full_signature": "protected NodeTest parseNodeTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseNodeTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseNameTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "NameTest", "signature": "NameTest parseNameTest( TokenStream tokens )", "full_signature": "protected NameTest parseNameTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseNameTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseQName", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "NameTest", "signature": "NameTest parseQName( TokenStream tokens )", "full_signature": "protected NameTest parseQName( TokenStream tokens )", "class_method_signature": "XPathParser.parseQName( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "( String string )", "modifiers": "protected", "return": "String", "signature": "String decode( String string )", "full_signature": "protected String decode( String string )", "class_method_signature": "XPathParser.decode( String string )", "testcase": false, "constructor": false}, {"identifier": "parseNCName", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "String", "signature": "String parseNCName( TokenStream tokens )", "full_signature": "protected String parseNCName( TokenStream tokens )", "class_method_signature": "XPathParser.parseNCName( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseWildcard", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "NameTest", "signature": "NameTest parseWildcard( TokenStream tokens )", "full_signature": "protected NameTest parseWildcard( TokenStream tokens )", "class_method_signature": "XPathParser.parseWildcard( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseItemType", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "NameTest", "signature": "NameTest parseItemType( TokenStream tokens )", "full_signature": "protected NameTest parseItemType( TokenStream tokens )", "class_method_signature": "XPathParser.parseItemType( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseAtomicType", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "NameTest", "signature": "NameTest parseAtomicType( TokenStream tokens )", "full_signature": "protected NameTest parseAtomicType( TokenStream tokens )", "class_method_signature": "XPathParser.parseAtomicType( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseKindTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "KindTest", "signature": "KindTest parseKindTest( TokenStream tokens )", "full_signature": "protected KindTest parseKindTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseKindTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseAnyKindTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "AnyKindTest", "signature": "AnyKindTest parseAnyKindTest( TokenStream tokens )", "full_signature": "protected AnyKindTest parseAnyKindTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseAnyKindTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parsePITest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "ProcessingInstructionTest", "signature": "ProcessingInstructionTest parsePITest( TokenStream tokens )", "full_signature": "protected ProcessingInstructionTest parsePITest( TokenStream tokens )", "class_method_signature": "XPathParser.parsePITest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseCommentTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "CommentTest", "signature": "CommentTest parseCommentTest( TokenStream tokens )", "full_signature": "protected CommentTest parseCommentTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseCommentTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseTextTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "TextTest", "signature": "TextTest parseTextTest( TokenStream tokens )", "full_signature": "protected TextTest parseTextTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseTextTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseDocumentTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "DocumentTest", "signature": "DocumentTest parseDocumentTest( TokenStream tokens )", "full_signature": "protected DocumentTest parseDocumentTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseDocumentTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseElementTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "ElementTest", "signature": "ElementTest parseElementTest( TokenStream tokens )", "full_signature": "protected ElementTest parseElementTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseElementTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseSchemaElementTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "SchemaElementTest", "signature": "SchemaElementTest parseSchemaElementTest( TokenStream tokens )", "full_signature": "protected SchemaElementTest parseSchemaElementTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseSchemaElementTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseAttributeTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "AttributeTest", "signature": "AttributeTest parseAttributeTest( TokenStream tokens )", "full_signature": "protected AttributeTest parseAttributeTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseAttributeTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseSchemaAttributeTest", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "SchemaAttributeTest", "signature": "SchemaAttributeTest parseSchemaAttributeTest( TokenStream tokens )", "full_signature": "protected SchemaAttributeTest parseSchemaAttributeTest( TokenStream tokens )", "class_method_signature": "XPathParser.parseSchemaAttributeTest( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseSingleType", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "void", "signature": "void parseSingleType( TokenStream tokens )", "full_signature": "protected void parseSingleType( TokenStream tokens )", "class_method_signature": "XPathParser.parseSingleType( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseSequenceType", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "void", "signature": "void parseSequenceType( TokenStream tokens )", "full_signature": "protected void parseSequenceType( TokenStream tokens )", "class_method_signature": "XPathParser.parseSequenceType( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseOrderBy", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "OrderBy", "signature": "OrderBy parseOrderBy( TokenStream tokens )", "full_signature": "protected OrderBy parseOrderBy( TokenStream tokens )", "class_method_signature": "XPathParser.parseOrderBy( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "parseOrderBySpec", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "OrderBySpec", "signature": "OrderBySpec parseOrderBySpec( TokenStream tokens )", "full_signature": "protected OrderBySpec parseOrderBySpec( TokenStream tokens )", "class_method_signature": "XPathParser.parseOrderBySpec( TokenStream tokens )", "testcase": false, "constructor": false}, {"identifier": "removeQuotes", "parameters": "( String text )", "modifiers": "protected", "return": "String", "signature": "String removeQuotes( String text )", "full_signature": "protected String removeQuotes( String text )", "class_method_signature": "XPathParser.removeQuotes( String text )", "testcase": false, "constructor": false}, {"identifier": "collapse", "parameters": "( Component component )", "modifiers": "protected", "return": "Component", "signature": "Component collapse( Component component )", "full_signature": "protected Component collapse( Component component )", "class_method_signature": "XPathParser.collapse( Component component )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/xpath/XPathParser.java"}, "focal_method": {"identifier": "parseAxisStep", "parameters": "( TokenStream tokens )", "modifiers": "protected", "return": "AxisStep", "body": "protected AxisStep parseAxisStep( TokenStream tokens ) {\n        NodeTest nodeTest = null;\n        if (tokens.canConsume('@')) {\n            // Abbreviated forward step with an attribute...\n            nodeTest = new AttributeNameTest(parseNameTest(tokens));\n        } else if (tokens.matches('*')) {\n            // Abbreviated forward step with an wildcard element ...\n            nodeTest = parseNodeTest(tokens);\n\n        } else if (tokens.matches(\"child\", \":\", \":\") || tokens.matches(\"attribute\", \":\", \":\") || tokens.matches(\"self\", \":\", \":\")\n                   || tokens.matches(\"descendant\", \":\", \":\") || tokens.matches(\"descendant-or-self\", \":\", \":\")\n                   || tokens.matches(\"following-sibling\", \":\", \":\") || tokens.matches(\"following\", \":\", \":\")\n                   || tokens.matches(\"namespace\", \":\", \":\")) {\n            // No non-abbreviated forward steps allowed\n            throw new ParsingException(\n                                       tokens.nextPosition(),\n                                       \"XPath non-abbreviated forward steps (e.g., 'child::', 'attribute::', 'self::', 'descendant::', 'descendant-or-self::', 'following-sibling::', 'following::', or 'namespace::') are not supported\");\n        } else if (tokens.matches(\"..\")) {\n            // No abbreviated reverse steps allowed ...\n            throw new ParsingException(tokens.nextPosition(), \"XPath abbreviated reverse steps (e.g., '..') are not supported\");\n        } else if (tokens.matches(\"parent\", \":\", \":\") || tokens.matches(\"ancestor-or-self\", \":\", \":\")\n                   || tokens.matches(\"preceding-sibling\", \":\", \":\") || tokens.matches(\"preceding\", \":\", \":\")\n                   || tokens.matches(\"ancestor\", \":\", \":\")) {\n            // No non-abbreviated reverse steps allowed ...\n            throw new ParsingException(\n                                       tokens.nextPosition(),\n                                       \"XPath non-abbreviated reverse steps (e.g., 'parent::', 'ancestor::', 'ancestor-or-self::', 'preceding-or-sibling::', or 'preceding::') are not supported\");\n        } else if (tokens.matches(ANY_VALUE, \":\", ANY_VALUE)\n                   && tokens.matches(XPathTokenizer.NAME, XPathTokenizer.SYMBOL, XPathTokenizer.NAME)) {\n            // This is probably a forward step with a (qualified) name test ...\n            nodeTest = parseQName(tokens);\n        } else if (tokens.matches(XPathTokenizer.NAME)) {\n            // This is probably a forward step with an unqualified name test ...\n            nodeTest = parseNodeTest(tokens);\n        } else {\n            return null;\n        }\n\n        // Parse the predicates\n        List<Component> predicates = parsePredicates(tokens);\n        return new AxisStep(nodeTest, predicates);\n    }", "signature": "AxisStep parseAxisStep( TokenStream tokens )", "full_signature": "protected AxisStep parseAxisStep( TokenStream tokens )", "class_method_signature": "XPathParser.parseAxisStep( TokenStream tokens )", "testcase": false, "constructor": false, "invocations": ["canConsume", "parseNameTest", "matches", "parseNodeTest", "matches", "matches", "matches", "matches", "matches", "matches", "matches", "matches", "nextPosition", "matches", "nextPosition", "matches", "matches", "matches", "matches", "matches", "nextPosition", "matches", "matches", "parseQName", "matches", "parseNodeTest", "parsePredicates"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}