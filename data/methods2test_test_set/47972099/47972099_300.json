{"test_class": {"identifier": "FieldFromTupleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String[] testStrings;", "modifier": "private", "type": "String[]", "declarator": "testStrings", "var_name": "testStrings"}, {"original_string": "private static final Class<?>[] CLASSES = new Class<?>[] { Tuple1.class, Tuple2.class,\n\t\t\tTuple3.class, Tuple4.class, Tuple5.class, Tuple6.class, Tuple7.class, Tuple8.class,\n\t\t\tTuple9.class, Tuple10.class, Tuple11.class, Tuple12.class, Tuple13.class,\n\t\t\tTuple14.class, Tuple15.class, Tuple16.class, Tuple17.class, Tuple18.class,\n\t\t\tTuple19.class, Tuple20.class, Tuple21.class, Tuple22.class, Tuple23.class,\n\t\t\tTuple24.class, Tuple25.class };", "modifier": "private static final", "type": "Class<?>[]", "declarator": "CLASSES = new Class<?>[] { Tuple1.class, Tuple2.class,\n\t\t\tTuple3.class, Tuple4.class, Tuple5.class, Tuple6.class, Tuple7.class, Tuple8.class,\n\t\t\tTuple9.class, Tuple10.class, Tuple11.class, Tuple12.class, Tuple13.class,\n\t\t\tTuple14.class, Tuple15.class, Tuple16.class, Tuple17.class, Tuple18.class,\n\t\t\tTuple19.class, Tuple20.class, Tuple21.class, Tuple22.class, Tuple23.class,\n\t\t\tTuple24.class, Tuple25.class }", "var_name": "CLASSES"}], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/FieldFromTupleTest.java"}, "test_case": {"identifier": "testSingleFieldExtraction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSingleFieldExtraction() throws InstantiationException, IllegalAccessException {\n\t\t// extract single fields\n\t\tfor (int i = 0; i < Tuple.MAX_ARITY; i++) {\n\t\t\tTuple current = (Tuple) CLASSES[i].newInstance();\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tcurrent.setField(testStrings[j], j);\n\t\t\t}\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tassertEquals(testStrings[j], new FieldFromTuple<String>(j).extract(current));\n\t\t\t}\n\t\t}\n\t}", "signature": "void testSingleFieldExtraction()", "full_signature": "@Test public void testSingleFieldExtraction()", "class_method_signature": "FieldFromTupleTest.testSingleFieldExtraction()", "testcase": true, "constructor": false, "invocations": ["newInstance", "setField", "assertEquals", "extract"]}, "focal_class": {"identifier": "FieldFromTuple", "superclass": "", "interfaces": "implements Extractor<Tuple, OUT>", "fields": [{"original_string": "private static final long serialVersionUID = -5161386546695574359L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -5161386546695574359L", "var_name": "serialVersionUID"}, {"original_string": "private int fieldId = 0;", "modifier": "private", "type": "int", "declarator": "fieldId = 0", "var_name": "fieldId"}], "methods": [{"identifier": "FieldFromTuple", "parameters": "()", "modifiers": "public", "return": "", "signature": " FieldFromTuple()", "full_signature": "public  FieldFromTuple()", "class_method_signature": "FieldFromTuple.FieldFromTuple()", "testcase": false, "constructor": true}, {"identifier": "FieldFromTuple", "parameters": "(int fieldId)", "modifiers": "public", "return": "", "signature": " FieldFromTuple(int fieldId)", "full_signature": "public  FieldFromTuple(int fieldId)", "class_method_signature": "FieldFromTuple.FieldFromTuple(int fieldId)", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(Tuple in)", "modifiers": "@Override public", "return": "OUT", "signature": "OUT extract(Tuple in)", "full_signature": "@Override public OUT extract(Tuple in)", "class_method_signature": "FieldFromTuple.extract(Tuple in)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/FieldFromTuple.java"}, "focal_method": {"identifier": "extract", "parameters": "(Tuple in)", "modifiers": "@Override public", "return": "OUT", "body": "@Override\n\tpublic OUT extract(Tuple in) {\n\t\treturn in.getField(fieldId);\n\t}", "signature": "OUT extract(Tuple in)", "full_signature": "@Override public OUT extract(Tuple in)", "class_method_signature": "FieldFromTuple.extract(Tuple in)", "testcase": false, "constructor": false, "invocations": ["getField"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}