{"test_class": {"identifier": "PhysicsUtilTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/maths/mathphysics/src/test/java/org/arakhne/afc/math/physics/PhysicsUtilTest.java"}, "test_case": {"identifier": "acceleration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void acceleration() {\n\t\tassertInlineParameterUsage(PhysicsUtil.class, \"acceleration\", double.class, double.class, double.class); //$NON-NLS-1$\n\t}", "signature": "void acceleration()", "full_signature": "@Test public void acceleration()", "class_method_signature": "PhysicsUtilTest.acceleration()", "testcase": true, "constructor": false, "invocations": ["assertInlineParameterUsage"]}, "focal_class": {"identifier": "PhysicsUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static PhysicsEngine engine = new JavaPhysicsEngine();", "modifier": "private static", "type": "PhysicsEngine", "declarator": "engine = new JavaPhysicsEngine()", "var_name": "engine"}], "methods": [{"identifier": "PhysicsUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " PhysicsUtil()", "full_signature": "private  PhysicsUtil()", "class_method_signature": "PhysicsUtil.PhysicsUtil()", "testcase": false, "constructor": true}, {"identifier": "getPhysicsEngine", "parameters": "()", "modifiers": "@Pure public static", "return": "PhysicsEngine", "signature": "PhysicsEngine getPhysicsEngine()", "full_signature": "@Pure public static PhysicsEngine getPhysicsEngine()", "class_method_signature": "PhysicsUtil.getPhysicsEngine()", "testcase": false, "constructor": false}, {"identifier": "setPhysicsEngine", "parameters": "(PhysicsEngine newEngine)", "modifiers": "public static", "return": "PhysicsEngine", "signature": "PhysicsEngine setPhysicsEngine(PhysicsEngine newEngine)", "full_signature": "public static PhysicsEngine setPhysicsEngine(PhysicsEngine newEngine)", "class_method_signature": "PhysicsUtil.setPhysicsEngine(PhysicsEngine newEngine)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonLaw", "parameters": "(\n\t\t\tdouble speed,\n\t\t\tdouble acceleration,\n\t\t\tdouble dt)", "modifiers": "@Pure @Inline(value = \"$4.getPhysicsEngine().motionNewtonLaw(($1), ($2), ($3))\", imported = {PhysicsUtil.class}) public static", "return": "double", "signature": "double motionNewtonLaw(\n\t\t\tdouble speed,\n\t\t\tdouble acceleration,\n\t\t\tdouble dt)", "full_signature": "@Pure @Inline(value = \"$4.getPhysicsEngine().motionNewtonLaw(($1), ($2), ($3))\", imported = {PhysicsUtil.class}) public static double motionNewtonLaw(\n\t\t\tdouble speed,\n\t\t\tdouble acceleration,\n\t\t\tdouble dt)", "class_method_signature": "PhysicsUtil.motionNewtonLaw(\n\t\t\tdouble speed,\n\t\t\tdouble acceleration,\n\t\t\tdouble dt)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonLaw1D", "parameters": "(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt)", "modifiers": "@Pure @Inline(value = \"$8.getPhysicsEngine().motionNewtonLaw1D(($1), ($2), ($3), ($4), ($5), ($6), ($7))\", imported = {PhysicsUtil.class}) public static", "return": "double", "signature": "double motionNewtonLaw1D(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt)", "full_signature": "@Pure @Inline(value = \"$8.getPhysicsEngine().motionNewtonLaw1D(($1), ($2), ($3), ($4), ($5), ($6), ($7))\", imported = {PhysicsUtil.class}) public static double motionNewtonLaw1D(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt)", "class_method_signature": "PhysicsUtil.motionNewtonLaw1D(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonLaw1D5", "parameters": "(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "modifiers": "@Deprecated(since = \"16.0\", forRemoval = true) @Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw1D5(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonLaw1D5(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "full_signature": "@Deprecated(since = \"16.0\", forRemoval = true) @Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw1D5(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static void motionNewtonLaw1D5(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonLaw1D5(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonLaw1D5", "parameters": "(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector1D<?, ?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "modifiers": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw1D5(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonLaw1D5(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector1D<?, ?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "full_signature": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw1D5(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static void motionNewtonLaw1D5(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector1D<?, ?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonLaw1D5(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector1D<?, ?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonLaw2D", "parameters": "(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "modifiers": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw2D(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonLaw2D(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "full_signature": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw2D(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static void motionNewtonLaw2D(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonLaw2D(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector2D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonLaw2D5", "parameters": "(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "modifiers": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw2D5(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonLaw2D5(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "full_signature": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw2D5(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static void motionNewtonLaw2D5(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonLaw2D5(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonLaw3D", "parameters": "(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "modifiers": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw3D(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonLaw3D(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "full_signature": "@Pure @Inline(value = \"$9.getPhysicsEngine().motionNewtonLaw3D(($1), ($2), ($3), ($4), ($5), ($6), ($7), ($8))\", imported = {PhysicsUtil.class}) public static void motionNewtonLaw3D(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonLaw3D(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tVector3D<?, ?> acceleration,\n\t\t\tdouble minAcceleration,\n\t\t\tdouble maxAcceleration,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonEuler1Law", "parameters": "(\n\t\t\tdouble speed,\n\t\t\tdouble dt)", "modifiers": "@Pure @Inline(value = \"$3.getPhysicsEngine().motionNewtonEuler1Law(($1), ($2))\", imported = {PhysicsUtil.class}) public static", "return": "double", "signature": "double motionNewtonEuler1Law(\n\t\t\tdouble speed,\n\t\t\tdouble dt)", "full_signature": "@Pure @Inline(value = \"$3.getPhysicsEngine().motionNewtonEuler1Law(($1), ($2))\", imported = {PhysicsUtil.class}) public static double motionNewtonEuler1Law(\n\t\t\tdouble speed,\n\t\t\tdouble dt)", "class_method_signature": "PhysicsUtil.motionNewtonEuler1Law(\n\t\t\tdouble speed,\n\t\t\tdouble dt)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonEuler1Law1D", "parameters": "(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt)", "modifiers": "@Pure @Inline(value = \"$5.getPhysicsEngine().motionNewtonEuler1Law1D(($1), ($2), ($3), ($4))\", imported = {PhysicsUtil.class}) public static", "return": "double", "signature": "double motionNewtonEuler1Law1D(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt)", "full_signature": "@Pure @Inline(value = \"$5.getPhysicsEngine().motionNewtonEuler1Law1D(($1), ($2), ($3), ($4))\", imported = {PhysicsUtil.class}) public static double motionNewtonEuler1Law1D(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt)", "class_method_signature": "PhysicsUtil.motionNewtonEuler1Law1D(\n\t\t\tdouble velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonEuler1Law1D5", "parameters": "(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "modifiers": "@Deprecated(since = \"16.0\", forRemoval = true) @Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law1D5(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonEuler1Law1D5(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "full_signature": "@Deprecated(since = \"16.0\", forRemoval = true) @Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law1D5(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static void motionNewtonEuler1Law1D5(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonEuler1Law1D5(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonEuler1Law1D5", "parameters": "(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "modifiers": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law1D5(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonEuler1Law1D5(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "full_signature": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law1D5(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static void motionNewtonEuler1Law1D5(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonEuler1Law1D5(\n\t\t\tVector1D<?, ?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector1D<?, ?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonEuler1Law2D", "parameters": "(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "modifiers": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law2D(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonEuler1Law2D(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "full_signature": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law2D(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static void motionNewtonEuler1Law2D(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonEuler1Law2D(\n\t\t\tVector2D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector2D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonEuler1Law2D5", "parameters": "(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "modifiers": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law2D5(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonEuler1Law2D5(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "full_signature": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law2D5(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static void motionNewtonEuler1Law2D5(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonEuler1Law2D5(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "motionNewtonEuler1Law3D", "parameters": "(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "modifiers": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law3D(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static", "return": "void", "signature": "void motionNewtonEuler1Law3D(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "full_signature": "@Pure @Inline(value = \"$6.getPhysicsEngine().motionNewtonEuler1Law3D(($1), ($2), ($3), ($4), ($5))\", imported = {PhysicsUtil.class}) public static void motionNewtonEuler1Law3D(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "class_method_signature": "PhysicsUtil.motionNewtonEuler1Law3D(\n\t\t\tVector3D<?, ?> velocity,\n\t\t\tdouble minSpeed,\n\t\t\tdouble maxSpeed,\n\t\t\tdouble dt,\n\t\t\tVector3D<?, ?> result)", "testcase": false, "constructor": false}, {"identifier": "speed", "parameters": "(double movement, double dt)", "modifiers": "@Pure @Inline(value = \"$3.getPhysicsEngine().speed(($1), ($2))\", imported = {PhysicsUtil.class}) public static", "return": "double", "signature": "double speed(double movement, double dt)", "full_signature": "@Pure @Inline(value = \"$3.getPhysicsEngine().speed(($1), ($2))\", imported = {PhysicsUtil.class}) public static double speed(double movement, double dt)", "class_method_signature": "PhysicsUtil.speed(double movement, double dt)", "testcase": false, "constructor": false}, {"identifier": "acceleration", "parameters": "(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "modifiers": "@Pure @Inline(value = \"$4.getPhysicsEngine().acceleration(($1), ($2), ($3))\", imported = {PhysicsUtil.class}) public static", "return": "double", "signature": "double acceleration(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "full_signature": "@Pure @Inline(value = \"$4.getPhysicsEngine().acceleration(($1), ($2), ($3))\", imported = {PhysicsUtil.class}) public static double acceleration(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "class_method_signature": "PhysicsUtil.acceleration(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "testcase": false, "constructor": false}], "file": "core/maths/mathphysics/src/main/java/org/arakhne/afc/math/physics/PhysicsUtil.java"}, "focal_method": {"identifier": "acceleration", "parameters": "(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "modifiers": "@Pure @Inline(value = \"$4.getPhysicsEngine().acceleration(($1), ($2), ($3))\", imported = {PhysicsUtil.class}) public static", "return": "double", "body": "@Pure\n\t@Inline(value = \"$4.getPhysicsEngine().acceleration(($1), ($2), ($3))\",\n\t\t\timported = {PhysicsUtil.class})\n\tpublic static double acceleration(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt) {\n\t\treturn engine.acceleration(previousSpeed, currentSpeed, dt);\n\t}", "signature": "double acceleration(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "full_signature": "@Pure @Inline(value = \"$4.getPhysicsEngine().acceleration(($1), ($2), ($3))\", imported = {PhysicsUtil.class}) public static double acceleration(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "class_method_signature": "PhysicsUtil.acceleration(\n\t\t\tdouble previousSpeed,\n\t\t\tdouble currentSpeed,\n\t\t\tdouble dt)", "testcase": false, "constructor": false, "invocations": ["acceleration"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}