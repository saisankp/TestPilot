{"test_class": {"identifier": "ThreadDumpTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ThreadMXBean threadMXBean = mock(ThreadMXBean.class);", "modifier": "private final", "type": "ThreadMXBean", "declarator": "threadMXBean = mock(ThreadMXBean.class)", "var_name": "threadMXBean"}, {"original_string": "private final ThreadDump threadDump = new ThreadDump(threadMXBean);", "modifier": "private final", "type": "ThreadDump", "declarator": "threadDump = new ThreadDump(threadMXBean)", "var_name": "threadDump"}, {"original_string": "private final ThreadInfo runnable = mock(ThreadInfo.class);", "modifier": "private final", "type": "ThreadInfo", "declarator": "runnable = mock(ThreadInfo.class)", "var_name": "runnable"}], "file": "metrics-jvm/src/test/java/com/codahale/metrics/jvm/ThreadDumpTest.java"}, "test_case": {"identifier": "dumpsAllThreads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dumpsAllThreads() {\n        final ByteArrayOutputStream output = new ByteArrayOutputStream();\n        threadDump.dump(output);\n\n        assertThat(output.toString())\n            .isEqualTo(String.format(\"\\\"runnable\\\" id=100 state=RUNNABLE%n\" +\n                \"    at Blah.blee(Blah.java:100)%n\" +\n                \"%n\" +\n                \"%n\"));\n    }", "signature": "void dumpsAllThreads()", "full_signature": "@Test public void dumpsAllThreads()", "class_method_signature": "ThreadDumpTest.dumpsAllThreads()", "testcase": true, "constructor": false, "invocations": ["dump", "isEqualTo", "assertThat", "toString", "format"]}, "focal_class": {"identifier": "ThreadDump", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ThreadMXBean threadMXBean;", "modifier": "private final", "type": "ThreadMXBean", "declarator": "threadMXBean", "var_name": "threadMXBean"}], "methods": [{"identifier": "ThreadDump", "parameters": "(ThreadMXBean threadMXBean)", "modifiers": "public", "return": "", "signature": " ThreadDump(ThreadMXBean threadMXBean)", "full_signature": "public  ThreadDump(ThreadMXBean threadMXBean)", "class_method_signature": "ThreadDump.ThreadDump(ThreadMXBean threadMXBean)", "testcase": false, "constructor": true}, {"identifier": "dump", "parameters": "(OutputStream out)", "modifiers": "public", "return": "void", "signature": "void dump(OutputStream out)", "full_signature": "public void dump(OutputStream out)", "class_method_signature": "ThreadDump.dump(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(boolean lockedMonitors, boolean lockedSynchronizers, OutputStream out)", "modifiers": "public", "return": "void", "signature": "void dump(boolean lockedMonitors, boolean lockedSynchronizers, OutputStream out)", "full_signature": "public void dump(boolean lockedMonitors, boolean lockedSynchronizers, OutputStream out)", "class_method_signature": "ThreadDump.dump(boolean lockedMonitors, boolean lockedSynchronizers, OutputStream out)", "testcase": false, "constructor": false}], "file": "metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadDump.java"}, "focal_method": {"identifier": "dump", "parameters": "(OutputStream out)", "modifiers": "public", "return": "void", "body": "public void dump(OutputStream out) {\n        dump(true, true, out);\n    }", "signature": "void dump(OutputStream out)", "full_signature": "public void dump(OutputStream out)", "class_method_signature": "ThreadDump.dump(OutputStream out)", "testcase": false, "constructor": false, "invocations": ["dump"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}