{"test_class": {"identifier": "UploaderWebClientTest", "superclass": "extends AbstractUploaderTest", "interfaces": "", "fields": [], "file": "herd-code/herd-tools/herd-uploader/src/test/java/org/finra/herd/tools/uploader/UploaderWebClientTest.java"}, "test_case": {"identifier": "testGetBusinessObjectDataUploadCredential1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetBusinessObjectDataUploadCredential1() throws Exception\n    {\n        DataBridgeBaseManifestDto manifest = new DataBridgeBaseManifestDto();\n        manifest.setNamespace(\"test1\");\n        manifest.setBusinessObjectDefinitionName(\"test2\");\n        manifest.setBusinessObjectFormatUsage(\"test3\");\n        manifest.setBusinessObjectFormatFileType(\"test4\");\n        manifest.setBusinessObjectFormatVersion(\"test5\");\n        manifest.setPartitionValue(\"test6\");\n        manifest.setSubPartitionValues(Arrays.asList(\"test7\", \"test8\"));\n        String storageName = \"test8\";\n        Integer businessObjectDataVersion = 1234;\n        Boolean createNewVersion = false;\n        uploaderWebClient.getRegServerAccessParamsDto().setUseSsl(false);\n        BusinessObjectDataUploadCredential businessObjectDataUploadCredential =\n            uploaderWebClient.getBusinessObjectDataUploadCredential(manifest, storageName, businessObjectDataVersion, createNewVersion);\n        Assert.assertNotNull(businessObjectDataUploadCredential);\n        AwsCredential awsCredential = businessObjectDataUploadCredential.getAwsCredential();\n        Assert.assertNotNull(awsCredential);\n        Assert.assertEquals(\"http://testWebServiceHostname:1234/herd-app/rest/businessObjectData/upload/credential/namespaces/test1\" +\n                \"/businessObjectDefinitionNames/test2/businessObjectFormatUsages/test3/businessObjectFormatFileTypes/test4/businessObjectFormatVersions/test5\" +\n                \"/partitionValues/test6?storageName=test8&subPartitionValues=test7%7Ctest8&businessObjectDataVersion=1234&createNewVersion=false\",\n            awsCredential.getAwsAccessKey());\n    }", "signature": "void testGetBusinessObjectDataUploadCredential1()", "full_signature": "@Test public void testGetBusinessObjectDataUploadCredential1()", "class_method_signature": "UploaderWebClientTest.testGetBusinessObjectDataUploadCredential1()", "testcase": true, "constructor": false, "invocations": ["setNamespace", "setBusinessObjectDefinitionName", "setBusinessObjectFormatUsage", "setBusinessObjectFormatFileType", "setBusinessObjectFormatVersion", "setPartitionValue", "setSubPartitionValues", "asList", "setUseSsl", "getRegServerAccessParamsDto", "getBusinessObjectDataUploadCredential", "assertNotNull", "getAwsCredential", "assertNotNull", "assertEquals", "getAwsAccessKey"]}, "focal_class": {"identifier": "UploaderWebClient", "superclass": "extends DataBridgeWebClient", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UploaderWebClient.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UploaderWebClient.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}], "methods": [{"identifier": "getBusinessObjectDataUploadCredential", "parameters": "(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "modifiers": "public", "return": "BusinessObjectDataUploadCredential", "signature": "BusinessObjectDataUploadCredential getBusinessObjectDataUploadCredential(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "full_signature": "public BusinessObjectDataUploadCredential getBusinessObjectDataUploadCredential(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "class_method_signature": "UploaderWebClient.getBusinessObjectDataUploadCredential(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "testcase": false, "constructor": false}, {"identifier": "getBusinessObjectDataVersions", "parameters": "(BusinessObjectDataKey businessObjectDataKey)", "modifiers": "public", "return": "BusinessObjectDataVersions", "signature": "BusinessObjectDataVersions getBusinessObjectDataVersions(BusinessObjectDataKey businessObjectDataKey)", "full_signature": "public BusinessObjectDataVersions getBusinessObjectDataVersions(BusinessObjectDataKey businessObjectDataKey)", "class_method_signature": "UploaderWebClient.getBusinessObjectDataVersions(BusinessObjectDataKey businessObjectDataKey)", "testcase": false, "constructor": false}, {"identifier": "updateBusinessObjectDataStatusIgnoreException", "parameters": "(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "modifiers": "public", "return": "void", "signature": "void updateBusinessObjectDataStatusIgnoreException(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "full_signature": "public void updateBusinessObjectDataStatusIgnoreException(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "class_method_signature": "UploaderWebClient.updateBusinessObjectDataStatusIgnoreException(BusinessObjectDataKey businessObjectDataKey, String businessObjectDataStatus)", "testcase": false, "constructor": false}, {"identifier": "getBusinessObjectDataVersions", "parameters": "(CloseableHttpResponse httpResponse)", "modifiers": "protected", "return": "BusinessObjectDataVersions", "signature": "BusinessObjectDataVersions getBusinessObjectDataVersions(CloseableHttpResponse httpResponse)", "full_signature": "protected BusinessObjectDataVersions getBusinessObjectDataVersions(CloseableHttpResponse httpResponse)", "class_method_signature": "UploaderWebClient.getBusinessObjectDataVersions(CloseableHttpResponse httpResponse)", "testcase": false, "constructor": false}, {"identifier": "getBusinessObjectDataUploadCredential", "parameters": "(CloseableHttpResponse response)", "modifiers": "private", "return": "BusinessObjectDataUploadCredential", "signature": "BusinessObjectDataUploadCredential getBusinessObjectDataUploadCredential(CloseableHttpResponse response)", "full_signature": "private BusinessObjectDataUploadCredential getBusinessObjectDataUploadCredential(CloseableHttpResponse response)", "class_method_signature": "UploaderWebClient.getBusinessObjectDataUploadCredential(CloseableHttpResponse response)", "testcase": false, "constructor": false}], "file": "herd-code/herd-tools/herd-uploader/src/main/java/org/finra/herd/tools/uploader/UploaderWebClient.java"}, "focal_method": {"identifier": "getBusinessObjectDataUploadCredential", "parameters": "(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "modifiers": "public", "return": "BusinessObjectDataUploadCredential", "body": "public BusinessObjectDataUploadCredential getBusinessObjectDataUploadCredential(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)\n        throws URISyntaxException, IOException, JAXBException, NoSuchAlgorithmException, KeyStoreException, KeyManagementException\n    {\n        URIBuilder uriBuilder =\n            new URIBuilder().setScheme(getUriScheme()).setHost(regServerAccessParamsDto.getRegServerHost()).setPort(regServerAccessParamsDto.getRegServerPort())\n                .setPath(String.join(\"/\", HERD_APP_REST_URI_PREFIX, \"businessObjectData\", \"upload\", \"credential\", \"namespaces\", manifest.getNamespace(),\n                    \"businessObjectDefinitionNames\", manifest.getBusinessObjectDefinitionName(), \"businessObjectFormatUsages\",\n                    manifest.getBusinessObjectFormatUsage(), \"businessObjectFormatFileTypes\", manifest.getBusinessObjectFormatFileType(),\n                    \"businessObjectFormatVersions\", manifest.getBusinessObjectFormatVersion(), \"partitionValues\", manifest.getPartitionValue()))\n                .setParameter(\"storageName\", storageName);\n        if (manifest.getSubPartitionValues() != null)\n        {\n            uriBuilder.setParameter(\"subPartitionValues\", herdStringHelper.join(manifest.getSubPartitionValues(), \"|\", \"\\\\\"));\n        }\n        if (businessObjectDataVersion != null)\n        {\n            uriBuilder.setParameter(\"businessObjectDataVersion\", businessObjectDataVersion.toString());\n        }\n        if (createNewVersion != null)\n        {\n            uriBuilder.setParameter(\"createNewVersion\", createNewVersion.toString());\n        }\n        HttpGet httpGet = new HttpGet(uriBuilder.build());\n        httpGet.addHeader(\"Accepts\", DEFAULT_ACCEPT);\n        if (regServerAccessParamsDto.isUseSsl())\n        {\n            httpGet.addHeader(getAuthorizationHeader());\n        }\n        try (CloseableHttpClient httpClient = httpClientHelper\n            .createHttpClient(regServerAccessParamsDto.isTrustSelfSignedCertificate(), regServerAccessParamsDto.isDisableHostnameVerification()))\n        {\n            LOGGER.info(\"Retrieving upload credentials from registration server...\");\n            return getBusinessObjectDataUploadCredential(httpClientOperations.execute(httpClient, httpGet));\n        }\n    }", "signature": "BusinessObjectDataUploadCredential getBusinessObjectDataUploadCredential(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "full_signature": "public BusinessObjectDataUploadCredential getBusinessObjectDataUploadCredential(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "class_method_signature": "UploaderWebClient.getBusinessObjectDataUploadCredential(DataBridgeBaseManifestDto manifest, String storageName,\n        Integer businessObjectDataVersion, Boolean createNewVersion)", "testcase": false, "constructor": false, "invocations": ["setParameter", "setPath", "setPort", "setHost", "setScheme", "getUriScheme", "getRegServerHost", "getRegServerPort", "join", "getNamespace", "getBusinessObjectDefinitionName", "getBusinessObjectFormatUsage", "getBusinessObjectFormatFileType", "getBusinessObjectFormatVersion", "getPartitionValue", "getSubPartitionValues", "setParameter", "join", "getSubPartitionValues", "setParameter", "toString", "setParameter", "toString", "build", "addHeader", "isUseSsl", "addHeader", "getAuthorizationHeader", "createHttpClient", "isTrustSelfSignedCertificate", "isDisableHostnameVerification", "info", "getBusinessObjectDataUploadCredential", "execute"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}