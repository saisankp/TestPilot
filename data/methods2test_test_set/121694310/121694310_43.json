{"test_class": {"identifier": "SpecificationTransformerTypeBasedTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendse-optimization/src/test/java/net/sf/opendse/optimization/io/SpecificationTransformerTypeBasedTest.java"}, "test_case": {"identifier": "generateMappingsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void generateMappingsTest() {\n\n\t\tResource r1 = new Resource(\"type1\");\n\t\tResource r2 = new Resource(\"type2\");\n\n\t\tResourceTypes<Resource> types = new ResourceTypes<Resource>();\n\t\ttypes.put(\"r1\", r1);\n\t\ttypes.put(\"r2\", r2);\n\n\t\tLink l1 = new Link(\"linkType1\");\n\n\t\tLinkTypes<Link> linkTypes = new LinkTypes<Link>();\n\t\tlinkTypes.put(\"l1\", l1);\n\n\t\tTask t1 = new Task(\"t1\");\n\t\tTask t2 = new Task(\"t2\");\n\n\t\tMappings<Task, Resource> typeMappings = new Mappings<Task, Resource>();\n\n\t\tMapping<Task, Resource> m1 = new Mapping<Task, Resource>(\"m1\", t1, r1);\n\t\tMapping<Task, Resource> m2 = new Mapping<Task, Resource>(\"m2\", t1, r2);\n\t\tMapping<Task, Resource> m3 = new Mapping<Task, Resource>(\"m3\", t2, r1);\n\t\tm3.setAttribute(\"M1\", 0);\n\n\t\ttypeMappings.add(m1);\n\t\ttypeMappings.add(m2);\n\t\ttypeMappings.add(m3);\n\n\t\tSpecificationTransformerTypeBased<SpecificationTypeBased, Specification> transformer = new SpecificationTransformerTypeBased<SpecificationTypeBased, Specification>();\n\t\tArchitecture<Resource, Link> arch = transformer.generateArchitecture(types, linkTypes);\n\n\t\tMappings<Task, Resource> mappings = transformer.generateMappings(typeMappings, arch);\n\n\t\tAssert.assertNotNull(mappings);\n\t\tAssert.assertEquals(mappings.size(), 3);\n\n\t\tAssert.assertEquals(mappings.get(t1).size(), 2);\n\t\tAssert.assertEquals(mappings.get(t2).size(), 1);\n\t\tAssert.assertEquals(mappings.get(t2).iterator().next().getAttribute(\"M1\"), 0);\n\t}", "signature": "void generateMappingsTest()", "full_signature": "@Test public void generateMappingsTest()", "class_method_signature": "SpecificationTransformerTypeBasedTest.generateMappingsTest()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "setAttribute", "add", "add", "add", "generateArchitecture", "generateMappings", "assertNotNull", "assertEquals", "size", "assertEquals", "size", "get", "assertEquals", "size", "get", "assertEquals", "getAttribute", "next", "iterator", "get"]}, "focal_class": {"identifier": "SpecificationTransformerTypeBased", "superclass": "", "interfaces": "implements Transformer<T, S>", "fields": [{"original_string": "protected final String CONNECTOR = \"_\";", "modifier": "protected final", "type": "String", "declarator": "CONNECTOR = \"_\"", "var_name": "CONNECTOR"}, {"original_string": "protected Map<Resource, List<Resource>> typeMap;", "modifier": "protected", "type": "Map<Resource, List<Resource>>", "declarator": "typeMap", "var_name": "typeMap"}], "methods": [{"identifier": "transform", "parameters": "(T typeBasedSpec)", "modifiers": "@Override public", "return": "S", "signature": "S transform(T typeBasedSpec)", "full_signature": "@Override public S transform(T typeBasedSpec)", "class_method_signature": "SpecificationTransformerTypeBased.transform(T typeBasedSpec)", "testcase": false, "constructor": false}, {"identifier": "generateArchitecture", "parameters": "(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "modifiers": "protected", "return": "Architecture<Resource, Link>", "signature": "Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "full_signature": "protected Architecture<Resource, Link> generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "class_method_signature": "SpecificationTransformerTypeBased.generateArchitecture(ResourceTypes<Resource> resourceTypes,\n\t\t\tLinkTypes<?> linkTypes)", "testcase": false, "constructor": false}, {"identifier": "generateMappings", "parameters": "(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "modifiers": "protected", "return": "Mappings<Task, Resource>", "signature": "Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "full_signature": "protected Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "class_method_signature": "SpecificationTransformerTypeBased.generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "testcase": false, "constructor": false}], "file": "opendse-optimization/src/main/java/net/sf/opendse/optimization/io/SpecificationTransformerTypeBased.java"}, "focal_method": {"identifier": "generateMappings", "parameters": "(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "modifiers": "protected", "return": "Mappings<Task, Resource>", "body": "protected Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture) {\n\n\t\tMappings<Task, Resource> mappings = new Mappings<Task, Resource>();\n\n\t\t// generate concrete mappings from type-mappings\n\t\tfor (Mapping<Task, Resource> typeMapping : typeMappings) {\n\n\t\t\tTask source = typeMapping.getSource();\n\t\t\tResource target = typeMapping.getTarget();\n\n\t\t\tResource instance = architecture.getVertex(\"r\" + CONNECTOR + target.getId());\n\n\t\t\tMapping<Task, Resource> mapping = new Mapping<Task, Resource>(\n\t\t\t\t\t\"m\" + source.getId() + CONNECTOR + instance.getId(), source, instance);\n\n\t\t\tAttributes attributes = typeMapping.getAttributes();\n\t\t\tfor (String key : attributes.keySet()) {\n\t\t\t\tmapping.setAttribute(key, attributes.getAttribute(key));\n\t\t\t}\n\t\t\tmappings.add(mapping);\n\t\t}\n\t\treturn mappings;\n\t}", "signature": "Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "full_signature": "protected Mappings<Task, Resource> generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "class_method_signature": "SpecificationTransformerTypeBased.generateMappings(Mappings<Task, Resource> typeMappings,\n\t\t\tArchitecture<Resource, Link> architecture)", "testcase": false, "constructor": false, "invocations": ["getSource", "getTarget", "getVertex", "getId", "getId", "getId", "getAttributes", "keySet", "setAttribute", "getAttribute", "add"]}, "repository": {"repo_id": 121694310, "url": "https://github.com/felixreimann/opendse", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 7, "size": 2024, "license": "licensed"}}