{"test_class": {"identifier": "InventoryUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String nodeId;", "modifier": "private static", "type": "String", "declarator": "nodeId", "var_name": "nodeId"}, {"original_string": "private Map<String, ServerNode> nodeMap;", "modifier": "private", "type": "Map<String, ServerNode>", "declarator": "nodeMap", "var_name": "nodeMap"}], "file": "modules/hms-aggregator/src/test/java/com/vmware/vrack/hms/aggregator/util/InventoryUtilTest.java"}, "test_case": {"identifier": "testRefreshInventoryOnOutOfBand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRefreshInventoryOnOutOfBand()\n        throws Exception\n    {\n\n        PowerMockito.mockStatic( SpringContextHelper.class );\n        when( SpringContextHelper.getIbInventoryLocaiton() ).thenReturn( \"dummy.json\" );\n        ResponseEntity<Object> response = new ResponseEntity<>( HttpStatus.OK );\n        HmsOobAgentRestTemplate<?> restTemplateMock = mock( HmsOobAgentRestTemplate.class );\n        whenNew( HmsOobAgentRestTemplate.class ).withAnyArguments().thenReturn( restTemplateMock );\n        when( restTemplateMock.exchange( HttpMethod.PUT, Constants.HMS_OOB_INVENTORY_RELOAD,\n                                         Object.class ) ).thenReturn( response );\n\n        boolean status = InventoryUtil.refreshInventoryOnOutOfBand();\n        assertTrue( status );\n    }", "signature": "void testRefreshInventoryOnOutOfBand()", "full_signature": "@Test public void testRefreshInventoryOnOutOfBand()", "class_method_signature": "InventoryUtilTest.testRefreshInventoryOnOutOfBand()", "testcase": true, "constructor": false, "invocations": ["mockStatic", "thenReturn", "when", "getIbInventoryLocaiton", "mock", "thenReturn", "withAnyArguments", "whenNew", "thenReturn", "when", "exchange", "refreshInventoryOnOutOfBand", "assertTrue"]}, "focal_class": {"identifier": "InventoryUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger( InventoryUtil.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( InventoryUtil.class )", "var_name": "logger"}, {"original_string": "public static final String NODE_ID = \"nodeID\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ID = \"nodeID\"", "var_name": "NODE_ID"}, {"original_string": "public static final String IB_IP_ADDRESS = \"ibIpAddress\";", "modifier": "public static final", "type": "String", "declarator": "IB_IP_ADDRESS = \"ibIpAddress\"", "var_name": "IB_IP_ADDRESS"}, {"original_string": "public static final String USERNAME = \"osUserName\";", "modifier": "public static final", "type": "String", "declarator": "USERNAME = \"osUserName\"", "var_name": "USERNAME"}, {"original_string": "public static final String PASSWORD = \"osPassword\";", "modifier": "public static final", "type": "String", "declarator": "PASSWORD = \"osPassword\"", "var_name": "PASSWORD"}, {"original_string": "private static boolean inventoryLoaded = false;", "modifier": "private static", "type": "boolean", "declarator": "inventoryLoaded = false", "var_name": "inventoryLoaded"}], "methods": [{"identifier": "initializeInventory", "parameters": "( String inventoryFilePath, String path )", "modifiers": "public static", "return": "boolean", "signature": "boolean initializeInventory( String inventoryFilePath, String path )", "full_signature": "public static boolean initializeInventory( String inventoryFilePath, String path )", "class_method_signature": "InventoryUtil.initializeInventory( String inventoryFilePath, String path )", "testcase": false, "constructor": false}, {"identifier": "initializeInventory", "parameters": "( String inventoryFilePath )", "modifiers": "public static", "return": "Map<String, Object[]>", "signature": "Map<String, Object[]> initializeInventory( String inventoryFilePath )", "full_signature": "public static Map<String, Object[]> initializeInventory( String inventoryFilePath )", "class_method_signature": "InventoryUtil.initializeInventory( String inventoryFilePath )", "testcase": false, "constructor": false}, {"identifier": "getInventoryOOB", "parameters": "( String path, String contentType )", "modifiers": "public static", "return": "ResponseEntity<HashMap<String, Object[]>>", "signature": "ResponseEntity<HashMap<String, Object[]>> getInventoryOOB( String path, String contentType )", "full_signature": "public static ResponseEntity<HashMap<String, Object[]>> getInventoryOOB( String path, String contentType )", "class_method_signature": "InventoryUtil.getInventoryOOB( String path, String contentType )", "testcase": false, "constructor": false}, {"identifier": "putInventoryOOB", "parameters": "( String path, String contentType, HmsInventoryConfiguration conf )", "modifiers": "public static", "return": "void", "signature": "void putInventoryOOB( String path, String contentType, HmsInventoryConfiguration conf )", "full_signature": "public static void putInventoryOOB( String path, String contentType, HmsInventoryConfiguration conf )", "class_method_signature": "InventoryUtil.putInventoryOOB( String path, String contentType, HmsInventoryConfiguration conf )", "testcase": false, "constructor": false}, {"identifier": "getOOBSupportedOperations", "parameters": "( String path, String contentType )", "modifiers": "public static", "return": "HashMap<String, List<HmsApi>>", "signature": "HashMap<String, List<HmsApi>> getOOBSupportedOperations( String path, String contentType )", "full_signature": "public static HashMap<String, List<HmsApi>> getOOBSupportedOperations( String path, String contentType )", "class_method_signature": "InventoryUtil.getOOBSupportedOperations( String path, String contentType )", "testcase": false, "constructor": false}, {"identifier": "getUpdatedServerInfos", "parameters": "( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getUpdatedServerInfos( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static Map<String, Object> getUpdatedServerInfos( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "class_method_signature": "InventoryUtil.getUpdatedServerInfos( Object[] hostsToBeUpdated,\n                                                             List<ServerInfo> requestServerInfoList )", "testcase": false, "constructor": false}, {"identifier": "getInvalidHostsinRequest", "parameters": "( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "modifiers": "@SuppressWarnings( \"unchecked\" ) public static", "return": "List<String>", "signature": "List<String> getInvalidHostsinRequest( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "full_signature": "@SuppressWarnings( \"unchecked\" ) public static List<String> getInvalidHostsinRequest( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "class_method_signature": "InventoryUtil.getInvalidHostsinRequest( Object[] inventoryHosts,\n                                                         List<ServerInfo> requestServerInfoList )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateInventoryFile", "parameters": "( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "modifiers": "public static", "return": "boolean", "signature": "boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "full_signature": "public static boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "class_method_signature": "InventoryUtil.createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent )", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateInventoryFile", "parameters": "( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "modifiers": "public static", "return": "boolean", "signature": "boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "full_signature": "public static boolean createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "class_method_signature": "InventoryUtil.createOrUpdateInventoryFile( final String inventoryFilePath,\n                                                       final String inventoryFileContent, final boolean createBackup )", "testcase": false, "constructor": false}, {"identifier": "removeServer", "parameters": "( final String inventoryFilePath, final String hostId )", "modifiers": "public static", "return": "boolean", "signature": "boolean removeServer( final String inventoryFilePath, final String hostId )", "full_signature": "public static boolean removeServer( final String inventoryFilePath, final String hostId )", "class_method_signature": "InventoryUtil.removeServer( final String inventoryFilePath, final String hostId )", "testcase": false, "constructor": false}, {"identifier": "updateInventoryNodeMap", "parameters": "( final String inventoryFileAbsPath )", "modifiers": "public static", "return": "boolean", "signature": "boolean updateInventoryNodeMap( final String inventoryFileAbsPath )", "full_signature": "public static boolean updateInventoryNodeMap( final String inventoryFileAbsPath )", "class_method_signature": "InventoryUtil.updateInventoryNodeMap( final String inventoryFileAbsPath )", "testcase": false, "constructor": false}, {"identifier": "isOobAgentInventoryLoaded", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isOobAgentInventoryLoaded()", "full_signature": "public static boolean isOobAgentInventoryLoaded()", "class_method_signature": "InventoryUtil.isOobAgentInventoryLoaded()", "testcase": false, "constructor": false}, {"identifier": "isInventoryLoaded", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isInventoryLoaded()", "full_signature": "public static boolean isInventoryLoaded()", "class_method_signature": "InventoryUtil.isInventoryLoaded()", "testcase": false, "constructor": false}, {"identifier": "refreshInventoryOnOutOfBand", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean refreshInventoryOnOutOfBand()", "full_signature": "public static boolean refreshInventoryOnOutOfBand()", "class_method_signature": "InventoryUtil.refreshInventoryOnOutOfBand()", "testcase": false, "constructor": false}], "file": "modules/hms-aggregator/src/main/java/com/vmware/vrack/hms/aggregator/util/InventoryUtil.java"}, "focal_method": {"identifier": "refreshInventoryOnOutOfBand", "parameters": "()", "modifiers": "public static", "return": "boolean", "body": "public static boolean refreshInventoryOnOutOfBand()\n    {\n        logger.debug( \"push inventory to Out of band starts\" );\n\n        String hmsIbInventoryLocation = SpringContextHelper.getIbInventoryLocaiton();\n        if ( hmsIbInventoryLocation != null )\n        {\n            try\n            {\n                Map<String, Object[]> inventoryMap = InventoryUtil.initializeInventory( hmsIbInventoryLocation );\n                AggregatorUtil.populatePlainTextPasswords( inventoryMap );\n\n                HmsOobAgentRestTemplate<Map<String, Object[]>> restTemplate =\n                    new HmsOobAgentRestTemplate<Map<String, Object[]>>( inventoryMap );\n\n                ResponseEntity<Object> response =\n                    restTemplate.exchange( HttpMethod.PUT, Constants.HMS_OOB_INVENTORY_RELOAD, Object.class );\n\n                if ( response != null && response.getStatusCode() == HttpStatus.OK )\n                {\n                    logger.info( \"push inventory to Out of band ends successfully\" );\n                    return true;\n                }\n\n                String exceptionMsg =\n                    String.format( \"Unsuccessful response: {} from: %s, , can't complete inventory refresh on Out of band\",\n                                   response, Constants.HMS_OOB_INVENTORY_RELOAD );\n\n                logger.error( exceptionMsg );\n\n            }\n            catch ( Throwable e )\n            {\n                logger.error( \"Exception occured while loading the inventory on Hms oob agent: {}\", e );\n            }\n        }\n        else\n        {\n            String err =\n                String.format( \"invalid inventory location: %s, can't complete inventory refresh on Out of band\",\n                               hmsIbInventoryLocation );\n            logger.error( err );\n        }\n        return false;\n    }", "signature": "boolean refreshInventoryOnOutOfBand()", "full_signature": "public static boolean refreshInventoryOnOutOfBand()", "class_method_signature": "InventoryUtil.refreshInventoryOnOutOfBand()", "testcase": false, "constructor": false, "invocations": ["debug", "getIbInventoryLocaiton", "initializeInventory", "populatePlainTextPasswords", "exchange", "getStatusCode", "info", "format", "error", "error", "format", "error"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}