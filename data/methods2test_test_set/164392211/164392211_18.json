{"test_class": {"identifier": "IntArraySeriesTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/series/IntArraySeriesTest.java"}, "test_case": {"identifier": "testGetInt_Offset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInt_Offset() {\n        IntArraySeries s = new IntArraySeries(new int[]{1, 2, 3, 4}, 1, 2);\n        assertEquals(2, s.getInt(0));\n        assertEquals(3, s.getInt(1));\n    }", "signature": "void testGetInt_Offset()", "full_signature": "@Test public void testGetInt_Offset()", "class_method_signature": "IntArraySeriesTest.testGetInt_Offset()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getInt", "assertEquals", "getInt"]}, "focal_class": {"identifier": "IntArraySeries", "superclass": "extends IntBaseSeries", "interfaces": "", "fields": [{"original_string": "private int[] data;", "modifier": "private", "type": "int[]", "declarator": "data", "var_name": "data"}, {"original_string": "private int offset;", "modifier": "private", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "IntArraySeries", "parameters": "(int... data)", "modifiers": "public", "return": "", "signature": " IntArraySeries(int... data)", "full_signature": "public  IntArraySeries(int... data)", "class_method_signature": "IntArraySeries.IntArraySeries(int... data)", "testcase": false, "constructor": true}, {"identifier": "IntArraySeries", "parameters": "(int[] data, int offset, int size)", "modifiers": "public", "return": "", "signature": " IntArraySeries(int[] data, int offset, int size)", "full_signature": "public  IntArraySeries(int[] data, int offset, int size)", "class_method_signature": "IntArraySeries.IntArraySeries(int[] data, int offset, int size)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "IntArraySeries.size()", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(int index)", "modifiers": "@Override public", "return": "int", "signature": "int getInt(int index)", "full_signature": "@Override public int getInt(int index)", "class_method_signature": "IntArraySeries.getInt(int index)", "testcase": false, "constructor": false}, {"identifier": "copyToInt", "parameters": "(int[] to, int fromOffset, int toOffset, int len)", "modifiers": "@Override public", "return": "void", "signature": "void copyToInt(int[] to, int fromOffset, int toOffset, int len)", "full_signature": "@Override public void copyToInt(int[] to, int fromOffset, int toOffset, int len)", "class_method_signature": "IntArraySeries.copyToInt(int[] to, int fromOffset, int toOffset, int len)", "testcase": false, "constructor": false}, {"identifier": "headInt", "parameters": "(int len)", "modifiers": "@Override public", "return": "IntSeries", "signature": "IntSeries headInt(int len)", "full_signature": "@Override public IntSeries headInt(int len)", "class_method_signature": "IntArraySeries.headInt(int len)", "testcase": false, "constructor": false}, {"identifier": "tailInt", "parameters": "(int len)", "modifiers": "@Override public", "return": "IntSeries", "signature": "IntSeries tailInt(int len)", "full_signature": "@Override public IntSeries tailInt(int len)", "class_method_signature": "IntArraySeries.tailInt(int len)", "testcase": false, "constructor": false}, {"identifier": "rangeOpenClosedInt", "parameters": "(int fromInclusive, int toExclusive)", "modifiers": "@Override public", "return": "IntSeries", "signature": "IntSeries rangeOpenClosedInt(int fromInclusive, int toExclusive)", "full_signature": "@Override public IntSeries rangeOpenClosedInt(int fromInclusive, int toExclusive)", "class_method_signature": "IntArraySeries.rangeOpenClosedInt(int fromInclusive, int toExclusive)", "testcase": false, "constructor": false}, {"identifier": "materializeInt", "parameters": "()", "modifiers": "@Override public", "return": "IntSeries", "signature": "IntSeries materializeInt()", "full_signature": "@Override public IntSeries materializeInt()", "class_method_signature": "IntArraySeries.materializeInt()", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int max()", "full_signature": "@Override public int max()", "class_method_signature": "IntArraySeries.max()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int min()", "full_signature": "@Override public int min()", "class_method_signature": "IntArraySeries.min()", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long sum()", "full_signature": "@Override public long sum()", "class_method_signature": "IntArraySeries.sum()", "testcase": false, "constructor": false}, {"identifier": "average", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double average()", "full_signature": "@Override public double average()", "class_method_signature": "IntArraySeries.average()", "testcase": false, "constructor": false}, {"identifier": "median", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double median()", "full_signature": "@Override public double median()", "class_method_signature": "IntArraySeries.median()", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/series/IntArraySeries.java"}, "focal_method": {"identifier": "getInt", "parameters": "(int index)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getInt(int index) {\n        if (index >= size) {\n            throw new ArrayIndexOutOfBoundsException(index);\n        }\n\n        return data[offset + index];\n    }", "signature": "int getInt(int index)", "full_signature": "@Override public int getInt(int index)", "class_method_signature": "IntArraySeries.getInt(int index)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}