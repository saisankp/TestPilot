{"test_class": {"identifier": "IssuesSizeTokenMacroTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/tokens/IssuesSizeTokenMacroTest.java"}, "test_case": {"identifier": "shouldExpandTokenOfTwoActions", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldExpandTokenOfTwoActions() {\n        IssuesSizeTokenMacro macro = new IssuesSizeTokenMacro();\n\n        Run<?, ?> run = createBuildWithActions(\n                createAction(\"first\", \"first name\", 1),\n                createAction(\"second\", \"second name\", 2));\n        assertThat(expandMacro(macro, run)).isEqualTo(\"3\");\n\n        macro.setTool(\"first\");\n        assertThat(expandMacro(macro, run)).isEqualTo(\"1\");\n        \n        macro.setTool(\"second\");\n        assertThat(expandMacro(macro, run)).isEqualTo(\"2\");\n        \n        macro.setTool(\"other\");\n        assertThat(expandMacro(macro, run)).isEqualTo(\"0\");\n    }", "signature": "void shouldExpandTokenOfTwoActions()", "full_signature": "@Test void shouldExpandTokenOfTwoActions()", "class_method_signature": "IssuesSizeTokenMacroTest.shouldExpandTokenOfTwoActions()", "testcase": true, "constructor": false, "invocations": ["createBuildWithActions", "createAction", "createAction", "isEqualTo", "assertThat", "expandMacro", "setTool", "isEqualTo", "assertThat", "expandMacro", "setTool", "isEqualTo", "assertThat", "expandMacro", "setTool", "isEqualTo", "assertThat", "expandMacro"]}, "focal_class": {"identifier": "IssuesSizeTokenMacro", "superclass": "extends DataBoundTokenMacro", "interfaces": "", "fields": [{"original_string": "private String tool;", "modifier": "private", "type": "String", "declarator": "tool", "var_name": "tool"}, {"original_string": "private StatisticProperties type = StatisticProperties.TOTAL;", "modifier": "private", "type": "StatisticProperties", "declarator": "type = StatisticProperties.TOTAL", "var_name": "type"}], "methods": [{"identifier": "setTool", "parameters": "(final String tool)", "modifiers": "@Parameter public", "return": "void", "signature": "void setTool(final String tool)", "full_signature": "@Parameter public void setTool(final String tool)", "class_method_signature": "IssuesSizeTokenMacro.setTool(final String tool)", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(final String type)", "modifiers": "@Parameter public", "return": "void", "signature": "void setType(final String type)", "full_signature": "@Parameter public void setType(final String type)", "class_method_signature": "IssuesSizeTokenMacro.setType(final String type)", "testcase": false, "constructor": false}, {"identifier": "acceptsMacroName", "parameters": "(final String macroName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean acceptsMacroName(final String macroName)", "full_signature": "@Override public boolean acceptsMacroName(final String macroName)", "class_method_signature": "IssuesSizeTokenMacro.acceptsMacroName(final String macroName)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final AbstractBuild<?, ?> abstractBuild, final TaskListener taskListener,\n            final String macroName)", "modifiers": "@Override public", "return": "String", "signature": "String evaluate(final AbstractBuild<?, ?> abstractBuild, final TaskListener taskListener,\n            final String macroName)", "full_signature": "@Override public String evaluate(final AbstractBuild<?, ?> abstractBuild, final TaskListener taskListener,\n            final String macroName)", "class_method_signature": "IssuesSizeTokenMacro.evaluate(final AbstractBuild<?, ?> abstractBuild, final TaskListener taskListener,\n            final String macroName)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final Run<?, ?> run, final FilePath workspace, final TaskListener listener,\n            final String macroName)", "modifiers": "@Override public", "return": "String", "signature": "String evaluate(final Run<?, ?> run, final FilePath workspace, final TaskListener listener,\n            final String macroName)", "full_signature": "@Override public String evaluate(final Run<?, ?> run, final FilePath workspace, final TaskListener listener,\n            final String macroName)", "class_method_signature": "IssuesSizeTokenMacro.evaluate(final Run<?, ?> run, final FilePath workspace, final TaskListener listener,\n            final String macroName)", "testcase": false, "constructor": false}, {"identifier": "extractSelectedTotals", "parameters": "(final Run<?, ?> run)", "modifiers": "private", "return": "String", "signature": "String extractSelectedTotals(final Run<?, ?> run)", "full_signature": "private String extractSelectedTotals(final Run<?, ?> run)", "class_method_signature": "IssuesSizeTokenMacro.extractSelectedTotals(final Run<?, ?> run)", "testcase": false, "constructor": false}, {"identifier": "createToolFilter", "parameters": "()", "modifiers": "private", "return": "Predicate<ResultAction>", "signature": "Predicate<ResultAction> createToolFilter()", "full_signature": "private Predicate<ResultAction> createToolFilter()", "class_method_signature": "IssuesSizeTokenMacro.createToolFilter()", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/tokens/IssuesSizeTokenMacro.java"}, "focal_method": {"identifier": "setTool", "parameters": "(final String tool)", "modifiers": "@Parameter public", "return": "void", "body": "@Parameter\n    public void setTool(final String tool) {\n        this.tool = tool;\n    }", "signature": "void setTool(final String tool)", "full_signature": "@Parameter public void setTool(final String tool)", "class_method_signature": "IssuesSizeTokenMacro.setTool(final String tool)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}