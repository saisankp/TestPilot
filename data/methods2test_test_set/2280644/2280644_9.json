{"test_class": {"identifier": "ReflectionUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "aesh/src/test/java/org/aesh/util/ReflectionUtilTest.java"}, "test_case": {"identifier": "testNewInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNewInstance() {\n\n        String foo = ReflectionUtil.newInstance(String.class);\n\n        assertNotNull(foo);\n\n        Foo1 foo1 = ReflectionUtil.newInstance(Foo1.class);\n        assertNotNull(foo1);\n\n        Foo2 foo2 = ReflectionUtil.newInstance(Foo2.class);\n        assertNotNull(foo2);\n\n        Foo3 foo3 = ReflectionUtil.newInstance(Foo3.class);\n        assertNotNull(foo3);\n\n        class FooConverter implements Converter<FooConverter, ConverterInvocation> {\n\n            @Override\n            public FooConverter convert(ConverterInvocation input) {\n                return this;\n            }\n        }\n\n        FooConverter foo4 = ReflectionUtil.newInstance(FooConverter.class);\n        assertNotNull(foo4);\n\n    }", "signature": "void testNewInstance()", "full_signature": "@Test public void testNewInstance()", "class_method_signature": "ReflectionUtilTest.testNewInstance()", "testcase": true, "constructor": false, "invocations": ["newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull", "newInstance", "assertNotNull"]}, "focal_class": {"identifier": "ReflectionUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "newInstance", "parameters": "(final Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T newInstance(final Class<T> clazz)", "full_signature": "public static T newInstance(final Class<T> clazz)", "class_method_signature": "ReflectionUtil.newInstance(final Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "isValidInstance", "parameters": "(T instance)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidInstance(T instance)", "full_signature": "private static boolean isValidInstance(T instance)", "class_method_signature": "ReflectionUtil.isValidInstance(T instance)", "testcase": false, "constructor": false}, {"identifier": "instantiateWithConstructor", "parameters": "(Constructor<T> constructor)", "modifiers": "private static", "return": "T", "signature": "T instantiateWithConstructor(Constructor<T> constructor)", "full_signature": "private static T instantiateWithConstructor(Constructor<T> constructor)", "class_method_signature": "ReflectionUtil.instantiateWithConstructor(Constructor<T> constructor)", "testcase": false, "constructor": false}, {"identifier": "newInstanceWithoutParameterTypes", "parameters": "(Constructor<T> constructor)", "modifiers": "private static", "return": "T", "signature": "T newInstanceWithoutParameterTypes(Constructor<T> constructor)", "full_signature": "private static T newInstanceWithoutParameterTypes(Constructor<T> constructor)", "class_method_signature": "ReflectionUtil.newInstanceWithoutParameterTypes(Constructor<T> constructor)", "testcase": false, "constructor": false}, {"identifier": "newInstanceWithParameterTypes", "parameters": "(Constructor<T> constructor)", "modifiers": "private static", "return": "T", "signature": "T newInstanceWithParameterTypes(Constructor<T> constructor)", "full_signature": "private static T newInstanceWithParameterTypes(Constructor<T> constructor)", "class_method_signature": "ReflectionUtil.newInstanceWithParameterTypes(Constructor<T> constructor)", "testcase": false, "constructor": false}, {"identifier": "setAccessible", "parameters": "(Constructor<T> constructor)", "modifiers": "private static", "return": "void", "signature": "void setAccessible(Constructor<T> constructor)", "full_signature": "private static void setAccessible(Constructor<T> constructor)", "class_method_signature": "ReflectionUtil.setAccessible(Constructor<T> constructor)", "testcase": false, "constructor": false}, {"identifier": "getConstructorWithNoParams", "parameters": "(Class clazz)", "modifiers": "private static", "return": "Constructor", "signature": "Constructor getConstructorWithNoParams(Class clazz)", "full_signature": "private static Constructor getConstructorWithNoParams(Class clazz)", "class_method_signature": "ReflectionUtil.getConstructorWithNoParams(Class clazz)", "testcase": false, "constructor": false}], "file": "aesh/src/main/java/org/aesh/util/ReflectionUtil.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final Class<T> clazz)", "modifiers": "public static", "return": "T", "body": "public static <T> T newInstance(final Class<T> clazz) {\n        if(clazz.isAnonymousClass() || clazz.isInterface() || clazz.isAnnotation()) {\n            throw new RuntimeException(\"Can not build new instance of an \" + clazz.getName());\n        }\n\n        T instance = null;\n        for(Constructor<?> constructor : clazz.getConstructors()) {\n            instance = (T) instantiateWithConstructor(constructor);\n            if (isValidInstance(instance)) return instance;\n        }\n\n        for(Constructor<?> constructor : clazz.getDeclaredConstructors()) {\n            instance = (T) instantiateWithConstructor(constructor);\n            if (isValidInstance(instance)) return instance;\n        }\n\n        throw new RuntimeException(\"Could not instantiate class: \"+clazz+\", no access to constructors.\");\n    }", "signature": "T newInstance(final Class<T> clazz)", "full_signature": "public static T newInstance(final Class<T> clazz)", "class_method_signature": "ReflectionUtil.newInstance(final Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["isAnonymousClass", "isInterface", "isAnnotation", "getName", "getConstructors", "instantiateWithConstructor", "isValidInstance", "getDeclaredConstructors", "instantiateWithConstructor", "isValidInstance"]}, "repository": {"repo_id": 2280644, "url": "https://github.com/aeshell/aesh", "language": "Java", "is_fork": false, "fork_count": 62, "stargazer_count": 83, "size": 6068, "license": "licensed"}}