{"test_class": {"identifier": "KeyValueConfigSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private KeyValueConfigRepository repository;", "modifier": "@Mock private", "type": "KeyValueConfigRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private KeyValueConfigSource configSource;", "modifier": "private", "type": "KeyValueConfigSource", "declarator": "configSource", "var_name": "configSource"}, {"original_string": "private String collectionName;", "modifier": "private", "type": "String", "declarator": "collectionName", "var_name": "collectionName"}, {"original_string": "private String g1;", "modifier": "private", "type": "String", "declarator": "g1", "var_name": "g1"}, {"original_string": "private String g2;", "modifier": "private", "type": "String", "declarator": "g2", "var_name": "g2"}], "file": "config/src/test/java/io/scalecube/config/keyvalue/KeyValueConfigSourceTest.java"}, "test_case": {"identifier": "testKeyValueLoadConfigFindAllGettingLong", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testKeyValueLoadConfigFindAllGettingLong() throws Exception {\n    KeyValueConfigName n1 = new KeyValueConfigName(g1, collectionName);\n    KeyValueConfigName n2 = new KeyValueConfigName(g2, collectionName);\n    KeyValueConfigName root = new KeyValueConfigName(null, collectionName);\n    KeyValueConfigEntity entity1 = new KeyValueConfigEntity(\"p1\", \"v1\", n1);\n    KeyValueConfigEntity entity2 = new KeyValueConfigEntity(\"p2\", \"v2\", n2);\n\n    doAnswer(\n            (Answer<ImmutableList<KeyValueConfigEntity>>)\n                invocation -> {\n                  Thread.sleep(100);\n                  return ImmutableList.of(entity1);\n                })\n        .when(repository)\n        .findAll(n1);\n\n    doAnswer(\n            (Answer<ImmutableList<KeyValueConfigEntity>>)\n                invocation -> {\n                  Thread.sleep(100);\n                  return ImmutableList.of(entity2);\n                })\n        .when(repository)\n        .findAll(n2);\n\n    doThrow(new RuntimeException(\"some exception\")).when(repository).findAll(root);\n\n    Map<String, ConfigProperty> config = configSource.loadConfig();\n\n    assertEquals(2, config.size());\n    assertEquals(\"v1\", config.get(\"p1\").valueAsString().get());\n    assertEquals(\"v2\", config.get(\"p2\").valueAsString().get());\n  }", "signature": "void testKeyValueLoadConfigFindAllGettingLong()", "full_signature": "@Test void testKeyValueLoadConfigFindAllGettingLong()", "class_method_signature": "KeyValueConfigSourceTest.testKeyValueLoadConfigFindAllGettingLong()", "testcase": true, "constructor": false, "invocations": ["findAll", "when", "doAnswer", "sleep", "of", "findAll", "when", "doAnswer", "sleep", "of", "findAll", "when", "doThrow", "loadConfig", "assertEquals", "size", "assertEquals", "get", "valueAsString", "get", "assertEquals", "get", "valueAsString", "get"]}, "focal_class": {"identifier": "KeyValueConfigSource", "superclass": "", "interfaces": "implements ConfigSource", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(KeyValueConfigSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KeyValueConfigSource.class)", "var_name": "LOGGER"}, {"original_string": "private static final ThreadFactory threadFactory;", "modifier": "private static final", "type": "ThreadFactory", "declarator": "threadFactory", "var_name": "threadFactory"}, {"original_string": "private static final Executor executor = Executors.newCachedThreadPool(threadFactory);", "modifier": "private static final", "type": "Executor", "declarator": "executor = Executors.newCachedThreadPool(threadFactory)", "var_name": "executor"}, {"original_string": "private final KeyValueConfigRepository repository;", "modifier": "private final", "type": "KeyValueConfigRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final Duration repositoryTimeout;", "modifier": "private final", "type": "Duration", "declarator": "repositoryTimeout", "var_name": "repositoryTimeout"}, {"original_string": "private final List<KeyValueConfigName> configNames;", "modifier": "private final", "type": "List<KeyValueConfigName>", "declarator": "configNames", "var_name": "configNames"}], "methods": [{"identifier": "KeyValueConfigSource", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " KeyValueConfigSource(Builder builder)", "full_signature": "private  KeyValueConfigSource(Builder builder)", "class_method_signature": "KeyValueConfigSource.KeyValueConfigSource(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "configureConfigNames", "parameters": "(\n      List<String> groupList, String collectionName)", "modifiers": "private static", "return": "List<KeyValueConfigName>", "signature": "List<KeyValueConfigName> configureConfigNames(\n      List<String> groupList, String collectionName)", "full_signature": "private static List<KeyValueConfigName> configureConfigNames(\n      List<String> groupList, String collectionName)", "class_method_signature": "KeyValueConfigSource.configureConfigNames(\n      List<String> groupList, String collectionName)", "testcase": false, "constructor": false}, {"identifier": "withRepository", "parameters": "(KeyValueConfigRepository repository)", "modifiers": "public static", "return": "Builder", "signature": "Builder withRepository(KeyValueConfigRepository repository)", "full_signature": "public static Builder withRepository(KeyValueConfigRepository repository)", "class_method_signature": "KeyValueConfigSource.withRepository(KeyValueConfigRepository repository)", "testcase": false, "constructor": false}, {"identifier": "withRepository", "parameters": "(KeyValueConfigRepository repository, String collectionName)", "modifiers": "public static", "return": "Builder", "signature": "Builder withRepository(KeyValueConfigRepository repository, String collectionName)", "full_signature": "public static Builder withRepository(KeyValueConfigRepository repository, String collectionName)", "class_method_signature": "KeyValueConfigSource.withRepository(KeyValueConfigRepository repository, String collectionName)", "testcase": false, "constructor": false}, {"identifier": "loadConfig", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, ConfigProperty>", "signature": "Map<String, ConfigProperty> loadConfig()", "full_signature": "@Override public Map<String, ConfigProperty> loadConfig()", "class_method_signature": "KeyValueConfigSource.loadConfig()", "testcase": false, "constructor": false}, {"identifier": "loadConfig", "parameters": "(KeyValueConfigName configName)", "modifiers": "private", "return": "CompletableFuture<List<KeyValueConfigEntity>>", "signature": "CompletableFuture<List<KeyValueConfigEntity>> loadConfig(KeyValueConfigName configName)", "full_signature": "private CompletableFuture<List<KeyValueConfigEntity>> loadConfig(KeyValueConfigName configName)", "class_method_signature": "KeyValueConfigSource.loadConfig(KeyValueConfigName configName)", "testcase": false, "constructor": false}], "file": "config/src/main/java/io/scalecube/config/keyvalue/KeyValueConfigSource.java"}, "focal_method": {"identifier": "loadConfig", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, ConfigProperty>", "body": "@Override\n  public Map<String, ConfigProperty> loadConfig() {\n    List<CompletableFuture<List<KeyValueConfigEntity>>> futureList =\n        configNames.stream().map(this::loadConfig).collect(Collectors.toList());\n\n    CompletableFuture<Void> allResults =\n        CompletableFuture.allOf(futureList.toArray(new CompletableFuture[futureList.size()]));\n\n    CompletableFuture<List<List<KeyValueConfigEntity>>> joinedFuture =\n        allResults.thenApply(\n            input -> futureList.stream().map(CompletableFuture::join).collect(Collectors.toList()));\n\n    List<List<KeyValueConfigEntity>> resultList;\n    try {\n      resultList = joinedFuture.get(repositoryTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    } catch (ExecutionException e) {\n      throw ThrowableUtil.propagate(e.getCause());\n    } catch (TimeoutException e) {\n      String message =\n          String.format(\"TimeoutException after '%s' millis\", repositoryTimeout.toMillis());\n      throw new ConfigSourceNotAvailableException(message, e);\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw ThrowableUtil.propagate(e);\n    }\n\n    return resultList\n        .stream()\n        .flatMap(Collection::stream)\n        .filter(i -> !i.getDisabled())\n        .collect(\n            Collector.of(\n                (Supplier<TreeMap<String, ConfigProperty>>) TreeMap::new,\n                (map, i) -> {\n                  String origin = i.getConfigName().getQualifiedName();\n                  String name = i.getPropName();\n                  String value = i.getPropValue();\n                  map.putIfAbsent(\n                      name,\n                      LoadedConfigProperty.withNameAndValue(name, value).origin(origin).build());\n                },\n                (map1, map2) -> map1));\n  }", "signature": "Map<String, ConfigProperty> loadConfig()", "full_signature": "@Override public Map<String, ConfigProperty> loadConfig()", "class_method_signature": "KeyValueConfigSource.loadConfig()", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "toList", "allOf", "toArray", "size", "thenApply", "collect", "map", "stream", "toList", "get", "toMillis", "propagate", "getCause", "format", "toMillis", "interrupted", "propagate", "collect", "filter", "flatMap", "stream", "getDisabled", "of", "getQualifiedName", "getConfigName", "getPropName", "getPropValue", "putIfAbsent", "build", "origin", "withNameAndValue"]}, "repository": {"repo_id": 100394760, "url": "https://github.com/scalecube/scalecube-config", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 14, "size": 777, "license": "licensed"}}