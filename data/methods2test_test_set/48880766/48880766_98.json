{"test_class": {"identifier": "DataFrameReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem fs;", "modifier": "private", "type": "FileSystem", "declarator": "fs", "var_name": "fs"}], "file": "core/src/test/java/tech/tablesaw/io/DataFrameReaderTest.java"}, "test_case": {"identifier": "readCsvUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void readCsvUrl() throws Exception {\n    URL url =\n        mockUrlHelper(\n            \"http://something.other.com/file\", ImmutableList.of(\"region\", \"canada\", \"us\"));\n    Table expected = Table.create(StringColumn.create(\"region\", new String[] {\"canada\", \"us\"}));\n    Table actual = Table.read().csv(url);\n    assertEquals(expected.columnNames(), actual.columnNames());\n    assertEquals(expected.stringColumn(0).asList(), actual.stringColumn(0).asList());\n  }", "signature": "void readCsvUrl()", "full_signature": "@Test public void readCsvUrl()", "class_method_signature": "DataFrameReaderTest.readCsvUrl()", "testcase": true, "constructor": false, "invocations": ["mockUrlHelper", "of", "create", "create", "csv", "read", "assertEquals", "columnNames", "columnNames", "assertEquals", "asList", "stringColumn", "asList", "stringColumn"]}, "focal_class": {"identifier": "DataFrameReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ReaderRegistry registry;", "modifier": "private final", "type": "ReaderRegistry", "declarator": "registry", "var_name": "registry"}], "methods": [{"identifier": "DataFrameReader", "parameters": "(ReaderRegistry registry)", "modifiers": "public", "return": "", "signature": " DataFrameReader(ReaderRegistry registry)", "full_signature": "public  DataFrameReader(ReaderRegistry registry)", "class_method_signature": "DataFrameReader.DataFrameReader(ReaderRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "url", "parameters": "(String url)", "modifiers": "public", "return": "Table", "signature": "Table url(String url)", "full_signature": "public Table url(String url)", "class_method_signature": "DataFrameReader.url(String url)", "testcase": false, "constructor": false}, {"identifier": "url", "parameters": "(URL url)", "modifiers": "public", "return": "Table", "signature": "Table url(URL url)", "full_signature": "public Table url(URL url)", "class_method_signature": "DataFrameReader.url(URL url)", "testcase": false, "constructor": false}, {"identifier": "url", "parameters": "(URL url, Charset charset, String mimeType)", "modifiers": "private", "return": "Table", "signature": "Table url(URL url, Charset charset, String mimeType)", "full_signature": "private Table url(URL url, Charset charset, String mimeType)", "class_method_signature": "DataFrameReader.url(URL url, Charset charset, String mimeType)", "testcase": false, "constructor": false}, {"identifier": "readUrl", "parameters": "(URL url, Charset charset, DataReader<?> reader)", "modifiers": "private", "return": "Table", "signature": "Table readUrl(URL url, Charset charset, DataReader<?> reader)", "full_signature": "private Table readUrl(URL url, Charset charset, DataReader<?> reader)", "class_method_signature": "DataFrameReader.readUrl(URL url, Charset charset, DataReader<?> reader)", "testcase": false, "constructor": false}, {"identifier": "getMimeType", "parameters": "(String contentType)", "modifiers": "private", "return": "String", "signature": "String getMimeType(String contentType)", "full_signature": "private String getMimeType(String contentType)", "class_method_signature": "DataFrameReader.getMimeType(String contentType)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "(String contentType)", "modifiers": "private", "return": "Charset", "signature": "Charset getCharset(String contentType)", "full_signature": "private Charset getCharset(String contentType)", "class_method_signature": "DataFrameReader.getCharset(String contentType)", "testcase": false, "constructor": false}, {"identifier": "getExtension", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String getExtension(URL url)", "full_signature": "private String getExtension(URL url)", "class_method_signature": "DataFrameReader.getExtension(URL url)", "testcase": false, "constructor": false}, {"identifier": "string", "parameters": "(String s, String fileExtension)", "modifiers": "public", "return": "Table", "signature": "Table string(String s, String fileExtension)", "full_signature": "public Table string(String s, String fileExtension)", "class_method_signature": "DataFrameReader.string(String s, String fileExtension)", "testcase": false, "constructor": false}, {"identifier": "file", "parameters": "(String file)", "modifiers": "public", "return": "Table", "signature": "Table file(String file)", "full_signature": "public Table file(String file)", "class_method_signature": "DataFrameReader.file(String file)", "testcase": false, "constructor": false}, {"identifier": "file", "parameters": "(File file)", "modifiers": "public", "return": "Table", "signature": "Table file(File file)", "full_signature": "public Table file(File file)", "class_method_signature": "DataFrameReader.file(File file)", "testcase": false, "constructor": false}, {"identifier": "usingOptions", "parameters": "(T options)", "modifiers": "public", "return": "Table", "signature": "Table usingOptions(T options)", "full_signature": "public Table usingOptions(T options)", "class_method_signature": "DataFrameReader.usingOptions(T options)", "testcase": false, "constructor": false}, {"identifier": "usingOptions", "parameters": "(ReadOptions.Builder builder)", "modifiers": "public", "return": "Table", "signature": "Table usingOptions(ReadOptions.Builder builder)", "full_signature": "public Table usingOptions(ReadOptions.Builder builder)", "class_method_signature": "DataFrameReader.usingOptions(ReadOptions.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "db", "parameters": "(ResultSet resultSet)", "modifiers": "public", "return": "Table", "signature": "Table db(ResultSet resultSet)", "full_signature": "public Table db(ResultSet resultSet)", "class_method_signature": "DataFrameReader.db(ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "db", "parameters": "(ResultSet resultSet, String tableName)", "modifiers": "public", "return": "Table", "signature": "Table db(ResultSet resultSet, String tableName)", "full_signature": "public Table db(ResultSet resultSet, String tableName)", "class_method_signature": "DataFrameReader.db(ResultSet resultSet, String tableName)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(String file)", "modifiers": "public", "return": "Table", "signature": "Table csv(String file)", "full_signature": "public Table csv(String file)", "class_method_signature": "DataFrameReader.csv(String file)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(String contents, String tableName)", "modifiers": "public", "return": "Table", "signature": "Table csv(String contents, String tableName)", "full_signature": "public Table csv(String contents, String tableName)", "class_method_signature": "DataFrameReader.csv(String contents, String tableName)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(File file)", "modifiers": "public", "return": "Table", "signature": "Table csv(File file)", "full_signature": "public Table csv(File file)", "class_method_signature": "DataFrameReader.csv(File file)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(InputStream stream)", "modifiers": "public", "return": "Table", "signature": "Table csv(InputStream stream)", "full_signature": "public Table csv(InputStream stream)", "class_method_signature": "DataFrameReader.csv(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(URL url)", "modifiers": "public", "return": "Table", "signature": "Table csv(URL url)", "full_signature": "public Table csv(URL url)", "class_method_signature": "DataFrameReader.csv(URL url)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(InputStream stream, String name)", "modifiers": "public", "return": "Table", "signature": "Table csv(InputStream stream, String name)", "full_signature": "public Table csv(InputStream stream, String name)", "class_method_signature": "DataFrameReader.csv(InputStream stream, String name)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(Reader reader)", "modifiers": "public", "return": "Table", "signature": "Table csv(Reader reader)", "full_signature": "public Table csv(Reader reader)", "class_method_signature": "DataFrameReader.csv(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(CsvReadOptions.Builder options)", "modifiers": "public", "return": "Table", "signature": "Table csv(CsvReadOptions.Builder options)", "full_signature": "public Table csv(CsvReadOptions.Builder options)", "class_method_signature": "DataFrameReader.csv(CsvReadOptions.Builder options)", "testcase": false, "constructor": false}, {"identifier": "csv", "parameters": "(CsvReadOptions options)", "modifiers": "public", "return": "Table", "signature": "Table csv(CsvReadOptions options)", "full_signature": "public Table csv(CsvReadOptions options)", "class_method_signature": "DataFrameReader.csv(CsvReadOptions options)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/io/DataFrameReader.java"}, "focal_method": {"identifier": "csv", "parameters": "(String file)", "modifiers": "public", "return": "Table", "body": "public Table csv(String file) throws IOException {\n    return csv(CsvReadOptions.builder(file));\n  }", "signature": "Table csv(String file)", "full_signature": "public Table csv(String file)", "class_method_signature": "DataFrameReader.csv(String file)", "testcase": false, "constructor": false, "invocations": ["csv", "builder"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}