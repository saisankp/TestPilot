{"test_class": {"identifier": "TemplateHandlerTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "public boolean                           standAlone = false;", "modifier": "public", "type": "boolean", "declarator": "standAlone = false", "var_name": "standAlone"}, {"original_string": "private static ILoggingTool              logger     = LoggingToolFactory\n                                                                .createLoggingTool(TemplateHandlerTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger     = LoggingToolFactory\n                                                                .createLoggingTool(TemplateHandlerTest.class)", "var_name": "logger"}, {"original_string": "private static SmilesParser              sp         = null;", "modifier": "private static", "type": "SmilesParser", "declarator": "sp         = null", "var_name": "sp"}, {"original_string": "private static StructureDiagramGenerator sdg        = null;", "modifier": "private static", "type": "StructureDiagramGenerator", "declarator": "sdg        = null", "var_name": "sdg"}], "file": "tool/sdg/src/test/java/org/openscience/cdk/layout/TemplateHandlerTest.java"}, "test_case": {"identifier": "convert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void convert() throws IOException {\n        TemplateHandler templateHandler = new TemplateHandler(SilentChemObjectBuilder.getInstance());\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        templateHandler.toIdentityTemplateLibrary().store(bout);\n        assertThat(new String(bout.toByteArray()), is(\"C1C2CC3CC1CC(C2)C3 |(-1.07,-1.59,;.38,-1.21,;1.82,-1.59,;1.07,-.29,;-.38,-.67,;-1.82,-.29,;-1.82,1.21,;-.37,1.59,;.38,.29,;1.07,1.21,)|\\n\"\n                                                      + \"C12C3C4C1C5C2C3C45 |(.62,-.99,;-.88,-1.12,;-1.23,.43,;.26,.57,;.88,1.12,;1.23,-.43,;-.26,-.57,;-.62,.98,)|\\n\"\n                                                      + \"C1C2CC3C4CC5CC(C14)C(C2)C3C5 |(-1.82,2.15,;-.37,2.53,;1.07,2.15,;1.07,.65,;-.38,.27,;-.38,-1.23,;.37,-2.53,;-1.07,-2.15,;-1.07,-.65,;-1.82,.65,;.38,-.27,;.38,1.23,;1.82,-.65,;1.82,-2.15,)|\\n\"\n                                                      + \"C1CCC2C(C1)CCC3C4CCCC4CCC23 |(-6.51,.72,;-6.51,-.78,;-5.22,-1.53,;-3.92,-.78,;-3.92,.72,;-5.22,1.47,;-2.62,1.47,;-1.32,.72,;-1.32,-.78,;-.02,-1.53,;1.41,-1.07,;2.29,-2.28,;1.41,-3.49,;-.02,-3.03,;-1.32,-3.78,;-2.62,-3.03,;-2.62,-1.53,)|\\n\"\n                                                      + \"C1CCCCCCCCCCCCC1 |(-.04,1.51,;1.26,.76,;1.26,-.74,;2.56,-1.49,;2.56,-2.99,;1.29,-3.72,;1.31,-5.29,;-.09,-5.89,;-1.34,-5.24,;-1.34,-3.74,;-2.63,-2.99,;-2.63,-1.49,;-1.34,-.74,;-1.34,.76,)|\\n\"));\n    }", "signature": "void convert()", "full_signature": "@Test public void convert()", "class_method_signature": "TemplateHandlerTest.convert()", "testcase": true, "constructor": false, "invocations": ["getInstance", "store", "toIdentityTemplateLibrary", "assertThat", "toByteArray", "is"]}, "focal_class": {"identifier": "TemplateHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ILoggingTool         LOGGER       = LoggingToolFactory.createLoggingTool(TemplateHandler.class);", "modifier": "private final static", "type": "ILoggingTool", "declarator": "LOGGER       = LoggingToolFactory.createLoggingTool(TemplateHandler.class)", "var_name": "LOGGER"}, {"original_string": "private final        List<IAtomContainer> templates    = new ArrayList<>();", "modifier": "private final", "type": "List<IAtomContainer>", "declarator": "templates    = new ArrayList<>()", "var_name": "templates"}, {"original_string": "private final        List<Pattern>        anonPatterns = new ArrayList<>();", "modifier": "private final", "type": "List<Pattern>", "declarator": "anonPatterns = new ArrayList<>()", "var_name": "anonPatterns"}, {"original_string": "private final        List<Pattern>        elemPatterns = new ArrayList<>();", "modifier": "private final", "type": "List<Pattern>", "declarator": "elemPatterns = new ArrayList<>()", "var_name": "elemPatterns"}, {"original_string": "private final AtomMatcher elemAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return a.getAtomicNumber().equals(b.getAtomicNumber());\n        }\n    };", "modifier": "private final", "type": "AtomMatcher", "declarator": "elemAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return a.getAtomicNumber().equals(b.getAtomicNumber());\n        }\n    }", "var_name": "elemAtomMatcher"}, {"original_string": "private final AtomMatcher anonAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return true;\n        }\n    };", "modifier": "private final", "type": "AtomMatcher", "declarator": "anonAtomMatcher = new AtomMatcher() {\n        @Override\n        public boolean matches(IAtom a, IAtom b) {\n            return true;\n        }\n    }", "var_name": "anonAtomMatcher"}, {"original_string": "private final BondMatcher anonBondMatcher = new BondMatcher() {\n        @Override\n        public boolean matches(IBond a, IBond b) {\n            return true;\n        }\n    };", "modifier": "private final", "type": "BondMatcher", "declarator": "anonBondMatcher = new BondMatcher() {\n        @Override\n        public boolean matches(IBond a, IBond b) {\n            return true;\n        }\n    }", "var_name": "anonBondMatcher"}], "methods": [{"identifier": "TemplateHandler", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "", "signature": " TemplateHandler(IChemObjectBuilder builder)", "full_signature": "public  TemplateHandler(IChemObjectBuilder builder)", "class_method_signature": "TemplateHandler.TemplateHandler(IChemObjectBuilder builder)", "testcase": false, "constructor": true}, {"identifier": "TemplateHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " TemplateHandler()", "full_signature": "public  TemplateHandler()", "class_method_signature": "TemplateHandler.TemplateHandler()", "testcase": false, "constructor": true}, {"identifier": "loadTemplates", "parameters": "(IChemObjectBuilder builder)", "modifiers": "public", "return": "void", "signature": "void loadTemplates(IChemObjectBuilder builder)", "full_signature": "public void loadTemplates(IChemObjectBuilder builder)", "class_method_signature": "TemplateHandler.loadTemplates(IChemObjectBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "addMolecule", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "void", "signature": "void addMolecule(IAtomContainer molecule)", "full_signature": "public void addMolecule(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.addMolecule(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "removeMolecule", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer removeMolecule(IAtomContainer molecule)", "full_signature": "public IAtomContainer removeMolecule(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.removeMolecule(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "mapTemplateExact", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "boolean", "signature": "boolean mapTemplateExact(IAtomContainer molecule)", "full_signature": "public boolean mapTemplateExact(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.mapTemplateExact(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "mapTemplates", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "boolean", "signature": "boolean mapTemplates(IAtomContainer molecule)", "full_signature": "public boolean mapTemplates(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.mapTemplates(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "getTemplateCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTemplateCount()", "full_signature": "public int getTemplateCount()", "class_method_signature": "TemplateHandler.getTemplateCount()", "testcase": false, "constructor": false}, {"identifier": "getTemplateAt", "parameters": "(int position)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer getTemplateAt(int position)", "full_signature": "public IAtomContainer getTemplateAt(int position)", "class_method_signature": "TemplateHandler.getTemplateAt(int position)", "testcase": false, "constructor": false}, {"identifier": "getMappedSubstructures", "parameters": "(IAtomContainer molecule)", "modifiers": "public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getMappedSubstructures(IAtomContainer molecule)", "full_signature": "public IAtomContainerSet getMappedSubstructures(IAtomContainer molecule)", "class_method_signature": "TemplateHandler.getMappedSubstructures(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "createSingleton", "parameters": "(IAtomContainer template)", "modifiers": "public static", "return": "TemplateHandler", "signature": "TemplateHandler createSingleton(IAtomContainer template)", "full_signature": "public static TemplateHandler createSingleton(IAtomContainer template)", "class_method_signature": "TemplateHandler.createSingleton(IAtomContainer template)", "testcase": false, "constructor": false}, {"identifier": "createFromSubstructure", "parameters": "(Pattern ptrn, Iterable<IAtomContainer> mols)", "modifiers": "public static", "return": "TemplateHandler", "signature": "TemplateHandler createFromSubstructure(Pattern ptrn, Iterable<IAtomContainer> mols)", "full_signature": "public static TemplateHandler createFromSubstructure(Pattern ptrn, Iterable<IAtomContainer> mols)", "class_method_signature": "TemplateHandler.createFromSubstructure(Pattern ptrn, Iterable<IAtomContainer> mols)", "testcase": false, "constructor": false}, {"identifier": "createFromSubstructure", "parameters": "(Pattern ptrn, IAtomContainer mol)", "modifiers": "public static", "return": "TemplateHandler", "signature": "TemplateHandler createFromSubstructure(Pattern ptrn, IAtomContainer mol)", "full_signature": "public static TemplateHandler createFromSubstructure(Pattern ptrn, IAtomContainer mol)", "class_method_signature": "TemplateHandler.createFromSubstructure(Pattern ptrn, IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "toIdentityTemplateLibrary", "parameters": "()", "modifiers": "", "return": "IdentityTemplateLibrary", "signature": "IdentityTemplateLibrary toIdentityTemplateLibrary()", "full_signature": " IdentityTemplateLibrary toIdentityTemplateLibrary()", "class_method_signature": "TemplateHandler.toIdentityTemplateLibrary()", "testcase": false, "constructor": false}], "file": "tool/sdg/src/main/java/org/openscience/cdk/layout/TemplateHandler.java"}, "focal_method": {"identifier": "toIdentityTemplateLibrary", "parameters": "()", "modifiers": "", "return": "IdentityTemplateLibrary", "body": "IdentityTemplateLibrary toIdentityTemplateLibrary() {\n        IdentityTemplateLibrary lib = IdentityTemplateLibrary.empty();\n        for (IAtomContainer mol : templates) {\n            lib.add(AtomContainerManipulator.anonymise(mol));\n        }\n        return lib;\n    }", "signature": "IdentityTemplateLibrary toIdentityTemplateLibrary()", "full_signature": " IdentityTemplateLibrary toIdentityTemplateLibrary()", "class_method_signature": "TemplateHandler.toIdentityTemplateLibrary()", "testcase": false, "constructor": false, "invocations": ["empty", "add", "anonymise"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}