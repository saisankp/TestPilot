{"test_class": {"identifier": "TestRegexExtractorInterceptorMillisSerializer", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/interceptor/TestRegexExtractorInterceptorMillisSerializer.java"}, "test_case": {"identifier": "shouldRequireValidPatternInConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldRequireValidPatternInConfiguration() {\n    try {\n      RegexExtractorInterceptorMillisSerializer fixture =\n          new RegexExtractorInterceptorMillisSerializer();\n      Context context = new Context();\n      context.put(\"pattern\", \"ABCDEFG\");\n      fixture.configure(context);\n      Assert.fail();\n    } catch (IllegalArgumentException ex) {\n      // Expected...\n    }\n  }", "signature": "void shouldRequireValidPatternInConfiguration()", "full_signature": "@Test public void shouldRequireValidPatternInConfiguration()", "class_method_signature": "TestRegexExtractorInterceptorMillisSerializer.shouldRequireValidPatternInConfiguration()", "testcase": true, "constructor": false, "invocations": ["put", "configure", "fail"]}, "focal_class": {"identifier": "RegexExtractorInterceptorMillisSerializer", "superclass": "", "interfaces": "implements\n    RegexExtractorInterceptorSerializer", "fields": [{"original_string": "private DateTimeFormatter formatter;", "modifier": "private", "type": "DateTimeFormatter", "declarator": "formatter", "var_name": "formatter"}], "methods": [{"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "RegexExtractorInterceptorMillisSerializer.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(String value)", "modifiers": "@Override public", "return": "String", "signature": "String serialize(String value)", "full_signature": "@Override public String serialize(String value)", "class_method_signature": "RegexExtractorInterceptorMillisSerializer.serialize(String value)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(ComponentConfiguration conf)", "modifiers": "@Override public", "return": "void", "signature": "void configure(ComponentConfiguration conf)", "full_signature": "@Override public void configure(ComponentConfiguration conf)", "class_method_signature": "RegexExtractorInterceptorMillisSerializer.configure(ComponentConfiguration conf)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/interceptor/RegexExtractorInterceptorMillisSerializer.java"}, "focal_method": {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void configure(Context context) {\n    String pattern = context.getString(\"pattern\");\n    Preconditions.checkArgument(!StringUtils.isEmpty(pattern),\n        \"Must configure with a valid pattern\");\n    formatter = DateTimeFormat.forPattern(pattern);\n  }", "signature": "void configure(Context context)", "full_signature": "@Override public void configure(Context context)", "class_method_signature": "RegexExtractorInterceptorMillisSerializer.configure(Context context)", "testcase": false, "constructor": false, "invocations": ["getString", "checkArgument", "isEmpty", "forPattern"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}