{"test_class": {"identifier": "TestResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  SerialPort serialPort;", "modifier": "@Mock", "type": "SerialPort", "declarator": "serialPort", "var_name": "serialPort"}], "file": "dexcom-receiver/src/test/java/org/glukit/dexcom/sync/TestResponseReader.java"}, "test_case": {"identifier": "readUserEventsDatabasePagesShouldSucceed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void readUserEventsDatabasePagesShouldSucceed() throws Exception {\n    when(serialPort.readBytes(HEADER_SIZE)).thenReturn(fromHexString(\"01 26 04 01\"));\n    byte[] payload = fromHexString(\"6D 0B 00 00 19 00 00 00 0B 01 75 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 CB 20 DB B8 D4 08 91 56 D4 08 02 00 54 56 D4 08 5E 01 00 00 E9 9D 0D BA D4 08 C3 57 D4 08 01 00 BC 57 D4 08 0A 00 00 00 E8 E3 FA 06 D5 08 B0 A4 D4 08 02 00 9C A4 D4 08 5E 01 00 00 40 E5 AF 13 D5 08 65 B1 D4 08 01 00 44 B1 D4 08 0D 00 00 00 AE C5 67 3B D5 08 1D D9 D4 08 01 00 E0 D8 D4 08 04 00 00 00 78 96 BD 50 D5 08 73 EE D4 08 02 00 70 EE D4 08 F4 01 00 00 9C 0D 2D BE D5 08 E3 5B D5 08 02 00 A8 5B D5 08 58 02 00 00 38 0F 37 BE D5 08 ED 5B D5 08 02 00 E4 5B D5 08 2C 01 00 00 54 2A 41 CA D5 08 F7 67 D5 08 01 00 CC 64 D5 08 01 00 00 00 14 1F D9 DD D5 08 8F 7B D5 08 02 00 88 7B D5 08 FA 00 00 00 29 60 5C 05 D6 08 12 A3 D5 08 02 00 E8 A2 D5 08 2C 01 00 00 F8 2F D9 05 D6 08 8F A3 D5 08 01 00 60 A3 D5 08 02 00 00 00 86 7C 52 08 D6 08 08 A6 D5 08 01 00 F4 A5 D5 08 0A 00 00 00 F6 32 CB 22 D6 08 81 C0 D5 08 01 00 70 C0 D5 08 02 00 00 00 AB 3E AA 2C D6 08 60 CA D5 08 01 00 48 CA D5 08 02 00 00 00 3D 95 EA 2E D6 08 A0 CC D5 08 01 00 64 CC D5 08 02 00 00 00 36 77 BE 35 D6 08 74 D3 D5 08 01 00 6C D3 D5 08 02 00 00 00 FB 15 1B 53 D6 08 D1 F0 D5 08 02 00 B8 F0 D5 08 2C 01 00 00 48 13 90 59 D6 08 46 F7 D5 08 01 00 0C F7 D5 08 0A 00 00 00 45 B3 E1 6C D6 08 97 0A D6 08 01 00 80 0A D6 08 04 00 00 00 4C D0 A1 93 D6 08 57 31 D6 08 02 00 2C 31 D6 08 64 00 00 00 61 9A DE 93 D6 08 94 31 D6 08 02 00 68 31 D6 08 F4 01 00 00 14 9E DE 9C D6 08 94 3A D6 08 02 00 8C 3A D6 08 64 00 00 00 81 6A BB 12 D7 08 71 B0 D6 08 02 00 70 B0 D6 08 2C 01 00 00 33 52 10 13 D7 08 C6 B0 D6 08 02 00 AC B0 D6 08 58 02 00 00 CA 2B 86 0B 00 00 0A 00 00 00 0B 01 76 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 C9 5D E3 1B D7 08 99 B9 D6 08 01 00 94 B9 D6 08 01 00 00 00 3D A5 3A 2A D7 08 F0 C7 D6 08 01 00 E0 C7 D6 08 02 00 00 00 EE 29 2C 2B D7 08 E2 C8 D6 08 01 00 D0 C8 D6 08 02 00 00 00 45 F6 A6 5F D7 08 5C FD D6 08 02 00 50 FD D6 08 5E 01 00 00 FC FF AC 62 D7 08 62 00 D7 08 01 00 5C 00 D7 08 0A 00 00 00 60 87 1C 8E D7 08 D2 2B D7 08 01 00 B8 2B D7 08 02 00 00 00 56 2D 0F 8F D7 08 C5 2C D7 08 01 00 A8 2C D7 08 01 00 00 00 EC 0C 6A B8 D7 08 20 56 D7 08 02 00 E8 55 D7 08 5E 01 00 00 9A AB A6 BB D7 08 5C 59 D7 08 01 00 30 59 D7 08 0D 00 00 00 A3 32 35 C2 D7 08 EB 5F D7 08 02 00 C0 5F D7 08 96 00 00 00 08 9C FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF\");\n    when(serialPort.readBytes(payload.length)).thenReturn(payload);\n    when(serialPort.readBytes(TRAILER_SIZE)).thenReturn(fromHexString(\"24 5F\"));\n\n    ResponseReader responseReader = new ResponseReader(new LittleEndianDataInputFactory());\n    UserEventsDatabasePagesResponse pagesResponse =\n        responseReader.read(UserEventsDatabasePagesResponse.class, this.serialPort);\n\n    assertThat(pagesResponse, not(nullValue()));\n    assertThat(pagesResponse.getRecords().size(), is(35));\n  }", "signature": "void readUserEventsDatabasePagesShouldSucceed()", "full_signature": "@Test public void readUserEventsDatabasePagesShouldSucceed()", "class_method_signature": "TestResponseReader.readUserEventsDatabasePagesShouldSucceed()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "readBytes", "fromHexString", "fromHexString", "thenReturn", "when", "readBytes", "thenReturn", "when", "readBytes", "fromHexString", "read", "assertThat", "not", "nullValue", "assertThat", "size", "getRecords", "is"]}, "focal_class": {"identifier": "ResponseReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger LOGGER = LoggerFactory.getLogger(ResponseReader.class);", "modifier": "private static", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ResponseReader.class)", "var_name": "LOGGER"}, {"original_string": "static final int HEADER_SIZE = 4;", "modifier": "static final", "type": "int", "declarator": "HEADER_SIZE = 4", "var_name": "HEADER_SIZE"}, {"original_string": "public static final int TRAILER_SIZE = 2;", "modifier": "public static final", "type": "int", "declarator": "TRAILER_SIZE = 2", "var_name": "TRAILER_SIZE"}, {"original_string": "private DataInputFactory dataInputFactory;", "modifier": "private", "type": "DataInputFactory", "declarator": "dataInputFactory", "var_name": "dataInputFactory"}], "methods": [{"identifier": "ResponseReader", "parameters": "(DataInputFactory dataInputFactory)", "modifiers": "@Inject public", "return": "", "signature": " ResponseReader(DataInputFactory dataInputFactory)", "full_signature": "@Inject public  ResponseReader(DataInputFactory dataInputFactory)", "class_method_signature": "ResponseReader.ResponseReader(DataInputFactory dataInputFactory)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false}, {"identifier": "validateCrc", "parameters": "(byte[] packet, byte[] crcBytes)", "modifiers": "private", "return": "void", "signature": "void validateCrc(byte[] packet, byte[] crcBytes)", "full_signature": "private void validateCrc(byte[] packet, byte[] crcBytes)", "class_method_signature": "ResponseReader.validateCrc(byte[] packet, byte[] crcBytes)", "testcase": false, "constructor": false}, {"identifier": "readHeader", "parameters": "(byte[] headerBytes)", "modifiers": "private", "return": "ResponseHeader", "signature": "ResponseHeader readHeader(byte[] headerBytes)", "full_signature": "private ResponseHeader readHeader(byte[] headerBytes)", "class_method_signature": "ResponseReader.readHeader(byte[] headerBytes)", "testcase": false, "constructor": false}], "file": "dexcom-receiver/src/main/java/org/glukit/dexcom/sync/ResponseReader.java"}, "focal_method": {"identifier": "read", "parameters": "(Class<T> type, SerialPort serialPort)", "modifiers": "public", "return": "T", "body": "public <T extends Response> T read(Class<T> type, SerialPort serialPort) {\n    try {\n      T response = type.getConstructor(DataInputFactory.class).newInstance(this.dataInputFactory);\n      byte[] header = serialPort.readBytes(HEADER_SIZE);\n      LOGGER.debug(format(\"Read header from port: %s\", toHexString(header)));\n      ResponseHeader responseHeader = readHeader(header);\n\n      int expectedPayloadSize = responseHeader.getPacketSize() - (HEADER_SIZE + TRAILER_SIZE);\n      LOGGER.debug(format(\"Expected payload of [%d] bytes\", expectedPayloadSize));\n\n      byte[] payload = new byte[0];\n      if (expectedPayloadSize > 0) {\n        payload = serialPort.readBytes(expectedPayloadSize);\n        LOGGER.debug(format(\"Read payload from port: %s\", toHexString(payload)));\n        response.fromBytes(payload);\n      } else {\n        LOGGER.debug(\"No payload expected, skipping to trailer...\");\n      }\n\n      byte[] crc16 = serialPort.readBytes(TRAILER_SIZE);\n      LOGGER.debug(format(\"Read crc16 from port: %s\", toHexString(crc16)));\n      validateCrc(Bytes.concat(header, payload, crc16), crc16);\n\n      return response;\n    } catch (Exception e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "T read(Class<T> type, SerialPort serialPort)", "full_signature": "public T read(Class<T> type, SerialPort serialPort)", "class_method_signature": "ResponseReader.read(Class<T> type, SerialPort serialPort)", "testcase": false, "constructor": false, "invocations": ["newInstance", "getConstructor", "readBytes", "debug", "format", "toHexString", "readHeader", "getPacketSize", "debug", "format", "readBytes", "debug", "format", "toHexString", "fromBytes", "debug", "readBytes", "debug", "format", "toHexString", "validateCrc", "concat", "propagate"]}, "repository": {"repo_id": 13185812, "url": "https://github.com/alexandre-normand/blood-shepherd", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 408, "license": "licensed"}}