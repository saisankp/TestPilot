{"test_class": {"identifier": "KiePMMLRegressionTableClassificationFactoryTest", "superclass": "extends AbstractKiePMMLRegressionTableRegressionFactoryTest", "interfaces": "", "fields": [{"original_string": "private final static List<RegressionModel.NormalizationMethod> SUPPORTED_NORMALIZATION_METHODS =\n            Arrays.asList(RegressionModel.NormalizationMethod.SOFTMAX,\n                          RegressionModel.NormalizationMethod.SIMPLEMAX,\n                          RegressionModel.NormalizationMethod.NONE,\n                          RegressionModel.NormalizationMethod.LOGIT,\n                          RegressionModel.NormalizationMethod.PROBIT,\n                          RegressionModel.NormalizationMethod.CLOGLOG,\n                          RegressionModel.NormalizationMethod.CAUCHIT);", "modifier": "private final static", "type": "List<RegressionModel.NormalizationMethod>", "declarator": "SUPPORTED_NORMALIZATION_METHODS =\n            Arrays.asList(RegressionModel.NormalizationMethod.SOFTMAX,\n                          RegressionModel.NormalizationMethod.SIMPLEMAX,\n                          RegressionModel.NormalizationMethod.NONE,\n                          RegressionModel.NormalizationMethod.LOGIT,\n                          RegressionModel.NormalizationMethod.PROBIT,\n                          RegressionModel.NormalizationMethod.CLOGLOG,\n                          RegressionModel.NormalizationMethod.CAUCHIT)", "var_name": "SUPPORTED_NORMALIZATION_METHODS"}, {"original_string": "private final static List<RegressionModel.NormalizationMethod> UNSUPPORTED_NORMALIZATION_METHODS =\n            Arrays.asList(RegressionModel.NormalizationMethod.EXP,\n                          RegressionModel.NormalizationMethod.LOGLOG);", "modifier": "private final static", "type": "List<RegressionModel.NormalizationMethod>", "declarator": "UNSUPPORTED_NORMALIZATION_METHODS =\n            Arrays.asList(RegressionModel.NormalizationMethod.EXP,\n                          RegressionModel.NormalizationMethod.LOGLOG)", "var_name": "UNSUPPORTED_NORMALIZATION_METHODS"}, {"original_string": "private CompilationUnit compilationUnit;", "modifier": "private", "type": "CompilationUnit", "declarator": "compilationUnit", "var_name": "compilationUnit"}, {"original_string": "private ClassOrInterfaceDeclaration modelTemplate;", "modifier": "private", "type": "ClassOrInterfaceDeclaration", "declarator": "modelTemplate", "var_name": "modelTemplate"}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/test/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableClassificationFactoryTest.java"}, "test_case": {"identifier": "populateOutputFieldsMapWithProbability", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void populateOutputFieldsMapWithProbability() {\n        final List<KiePMMLOutputField> outputFields = IntStream.range(0, 2)\n                .mapToObj(index -> getOutputField(\"KOF-PROB-\" + index, RESULT_FEATURE.PROBABILITY, \"PROB-\" + index))\n                .collect(Collectors.toList());\n        final MethodDeclaration methodDeclaration =\n                modelTemplate.getMethodsByName(\"populateOutputFieldsMapWithProbability\").get(0);\n        final BlockStmt body = methodDeclaration.getBody().get();\n        KiePMMLRegressionTableClassificationFactory.populateOutputFieldsMapWithProbability(body, outputFields);\n        NodeList<Statement> retrieved = body.getStatements();\n        assertEquals(outputFields.size(), retrieved.size());\n        retrieved.forEach(statement -> {\n            assertTrue(statement instanceof ExpressionStmt);\n            assertTrue(((ExpressionStmt) statement).getExpression() instanceof MethodCallExpr);\n            MethodCallExpr methodCallExpr = (MethodCallExpr) ((ExpressionStmt) statement).getExpression();\n            assertEquals(\"outputFieldsMap\", methodCallExpr.getScope().get().asNameExpr().toString());\n            assertEquals(\"put\", methodCallExpr.getName().asString());\n            assertTrue(methodCallExpr.getArguments().get(1) instanceof MethodCallExpr);\n            MethodCallExpr nestedMethodCallExpr = (MethodCallExpr) methodCallExpr.getArguments().get(1);\n            assertEquals(\"probabilityMap\", nestedMethodCallExpr.getScope().get().asNameExpr().toString());\n            assertEquals(\"get\", nestedMethodCallExpr.getName().asString());\n        });\n        List<MethodCallExpr> methodCallExprs = retrieved.stream()\n                .map(statement -> (MethodCallExpr) ((ExpressionStmt) statement).getExpression())\n                .collect(Collectors.toList());\n        outputFields.forEach(outputField -> assertTrue(methodCallExprs.stream()\n                                                               .anyMatch(methodCallExpr -> {\n                                                                   StringLiteralExpr stringLiteralExpr =\n                                                                           (StringLiteralExpr) methodCallExpr.getArguments().get(0);\n                                                                   MethodCallExpr nestedMethodCallExpr =\n                                                                           (MethodCallExpr) methodCallExpr.getArguments().get(1);\n                                                                   StringLiteralExpr nestedStringLiteralExpr =\n                                                                           (StringLiteralExpr) nestedMethodCallExpr.getArguments().get(0);\n                                                                   return outputField.getName().equals(stringLiteralExpr.getValue())\n                                                                           && outputField.getTargetField().get().equals(nestedStringLiteralExpr.getValue());\n                                                               })));\n    }", "signature": "void populateOutputFieldsMapWithProbability()", "full_signature": "@Test public void populateOutputFieldsMapWithProbability()", "class_method_signature": "KiePMMLRegressionTableClassificationFactoryTest.populateOutputFieldsMapWithProbability()", "testcase": true, "constructor": false, "invocations": ["collect", "mapToObj", "range", "getOutputField", "toList", "get", "getMethodsByName", "get", "getBody", "populateOutputFieldsMapWithProbability", "getStatements", "assertEquals", "size", "size", "forEach", "assertTrue", "assertTrue", "getExpression", "getExpression", "assertEquals", "toString", "asNameExpr", "get", "getScope", "assertEquals", "asString", "getName", "assertTrue", "get", "getArguments", "get", "getArguments", "assertEquals", "toString", "asNameExpr", "get", "getScope", "assertEquals", "asString", "getName", "collect", "map", "stream", "getExpression", "toList", "forEach", "assertTrue", "anyMatch", "stream", "get", "getArguments", "get", "getArguments", "get", "getArguments", "equals", "getName", "getValue", "equals", "get", "getTargetField", "getValue"]}, "focal_class": {"identifier": "KiePMMLRegressionTableClassificationFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE_JAVA =\n            \"KiePMMLRegressionTableClassificationTemplate.tmpl\";", "modifier": "public static final", "type": "String", "declarator": "KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE_JAVA =\n            \"KiePMMLRegressionTableClassificationTemplate.tmpl\"", "var_name": "KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE_JAVA"}, {"original_string": "public static final String KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE =\n            \"KiePMMLRegressionTableClassificationTemplate\";", "modifier": "public static final", "type": "String", "declarator": "KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE =\n            \"KiePMMLRegressionTableClassificationTemplate\"", "var_name": "KIE_PMML_REGRESSION_TABLE_CLASSIFICATION_TEMPLATE"}, {"original_string": "private static final Logger logger =\n            LoggerFactory.getLogger(KiePMMLRegressionTableClassificationFactory.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n            LoggerFactory.getLogger(KiePMMLRegressionTableClassificationFactory.class.getName())", "var_name": "logger"}, {"original_string": "private static final String MAIN_CLASS_NOT_FOUND = \"Main class not found\";", "modifier": "private static final", "type": "String", "declarator": "MAIN_CLASS_NOT_FOUND = \"Main class not found\"", "var_name": "MAIN_CLASS_NOT_FOUND"}, {"original_string": "private static final String KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE_JAVA =\n            \"KiePMMLGetProbabilityMapMethodTemplate.tmpl\";", "modifier": "private static final", "type": "String", "declarator": "KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE_JAVA =\n            \"KiePMMLGetProbabilityMapMethodTemplate.tmpl\"", "var_name": "KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE_JAVA"}, {"original_string": "private static final String KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE = \"KiePMMLGetProbabilityMapMethodTemplate\";", "modifier": "private static final", "type": "String", "declarator": "KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE = \"KiePMMLGetProbabilityMapMethodTemplate\"", "var_name": "KIE_PMML_GET_PROBABILITY_MAP_METHOD_TEMPLATE"}, {"original_string": "private static AtomicInteger classArity = new AtomicInteger(0);", "modifier": "private static", "type": "AtomicInteger", "declarator": "classArity = new AtomicInteger(0)", "var_name": "classArity"}, {"original_string": "private static CompilationUnit templateEvaluate;", "modifier": "private static", "type": "CompilationUnit", "declarator": "templateEvaluate", "var_name": "templateEvaluate"}, {"original_string": "private static CompilationUnit cloneEvaluate;", "modifier": "private static", "type": "CompilationUnit", "declarator": "cloneEvaluate", "var_name": "cloneEvaluate"}], "methods": [{"identifier": "KiePMMLRegressionTableClassificationFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " KiePMMLRegressionTableClassificationFactory()", "full_signature": "private  KiePMMLRegressionTableClassificationFactory()", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.KiePMMLRegressionTableClassificationFactory()", "testcase": false, "constructor": true}, {"identifier": "getRegressionTables", "parameters": "(final List<RegressionTable> regressionTables, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "modifiers": "public static", "return": "Map<String, KiePMMLTableSourceCategory>", "signature": "Map<String, KiePMMLTableSourceCategory> getRegressionTables(final List<RegressionTable> regressionTables, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "full_signature": "public static Map<String, KiePMMLTableSourceCategory> getRegressionTables(final List<RegressionTable> regressionTables, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.getRegressionTables(final List<RegressionTable> regressionTables, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "testcase": false, "constructor": false}, {"identifier": "getRegressionTable", "parameters": "(final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "modifiers": "public static", "return": "Map.Entry<String, String>", "signature": "Map.Entry<String, String> getRegressionTable(final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "full_signature": "public static Map.Entry<String, String> getRegressionTable(final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.getRegressionTable(final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap, final RegressionModel.NormalizationMethod normalizationMethod, final OpType opType, final List<KiePMMLOutputField> outputFields, final String targetField, final String packageName)", "testcase": false, "constructor": false}, {"identifier": "setConstructor", "parameters": "(final ConstructorDeclaration constructorDeclaration,\n                               final SimpleName generatedClassName, final String targetField,\n                               final REGRESSION_NORMALIZATION_METHOD regressionNormalizationMethod,\n                               final OP_TYPE opType)", "modifiers": "static", "return": "void", "signature": "void setConstructor(final ConstructorDeclaration constructorDeclaration,\n                               final SimpleName generatedClassName, final String targetField,\n                               final REGRESSION_NORMALIZATION_METHOD regressionNormalizationMethod,\n                               final OP_TYPE opType)", "full_signature": "static void setConstructor(final ConstructorDeclaration constructorDeclaration,\n                               final SimpleName generatedClassName, final String targetField,\n                               final REGRESSION_NORMALIZATION_METHOD regressionNormalizationMethod,\n                               final OP_TYPE opType)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.setConstructor(final ConstructorDeclaration constructorDeclaration,\n                               final SimpleName generatedClassName, final String targetField,\n                               final REGRESSION_NORMALIZATION_METHOD regressionNormalizationMethod,\n                               final OP_TYPE opType)", "testcase": false, "constructor": false}, {"identifier": "addMapPopulation", "parameters": "(final BlockStmt body,\n                                 final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap)", "modifiers": "static", "return": "void", "signature": "void addMapPopulation(final BlockStmt body,\n                                 final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap)", "full_signature": "static void addMapPopulation(final BlockStmt body,\n                                 final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.addMapPopulation(final BlockStmt body,\n                                 final LinkedHashMap<String, KiePMMLTableSourceCategory> regressionTablesMap)", "testcase": false, "constructor": false}, {"identifier": "populateOutputFieldsMap", "parameters": "(final ClassOrInterfaceDeclaration tableTemplate,\n                                                final List<KiePMMLOutputField> outputFields)", "modifiers": "static", "return": "void", "signature": "void populateOutputFieldsMap(final ClassOrInterfaceDeclaration tableTemplate,\n                                                final List<KiePMMLOutputField> outputFields)", "full_signature": "static void populateOutputFieldsMap(final ClassOrInterfaceDeclaration tableTemplate,\n                                                final List<KiePMMLOutputField> outputFields)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.populateOutputFieldsMap(final ClassOrInterfaceDeclaration tableTemplate,\n                                                final List<KiePMMLOutputField> outputFields)", "testcase": false, "constructor": false}, {"identifier": "populateOutputFieldsMapWithProbability", "parameters": "(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "modifiers": "static", "return": "void", "signature": "void populateOutputFieldsMapWithProbability(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "full_signature": "static void populateOutputFieldsMapWithProbability(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.populateOutputFieldsMapWithProbability(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "testcase": false, "constructor": false}, {"identifier": "populateGetProbabilityMapMethod", "parameters": "(final RegressionModel.NormalizationMethod normalizationMethod,\n                                                final ClassOrInterfaceDeclaration tableTemplate)", "modifiers": "static", "return": "void", "signature": "void populateGetProbabilityMapMethod(final RegressionModel.NormalizationMethod normalizationMethod,\n                                                final ClassOrInterfaceDeclaration tableTemplate)", "full_signature": "static void populateGetProbabilityMapMethod(final RegressionModel.NormalizationMethod normalizationMethod,\n                                                final ClassOrInterfaceDeclaration tableTemplate)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.populateGetProbabilityMapMethod(final RegressionModel.NormalizationMethod normalizationMethod,\n                                                final ClassOrInterfaceDeclaration tableTemplate)", "testcase": false, "constructor": false}, {"identifier": "populateIsBinaryMethod", "parameters": "(final OpType opType, int size,\n                                               final ClassOrInterfaceDeclaration tableTemplate)", "modifiers": "static", "return": "void", "signature": "void populateIsBinaryMethod(final OpType opType, int size,\n                                               final ClassOrInterfaceDeclaration tableTemplate)", "full_signature": "static void populateIsBinaryMethod(final OpType opType, int size,\n                                               final ClassOrInterfaceDeclaration tableTemplate)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.populateIsBinaryMethod(final OpType opType, int size,\n                                               final ClassOrInterfaceDeclaration tableTemplate)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-compiler/src/main/java/org/kie/pmml/models/regression/compiler/factories/KiePMMLRegressionTableClassificationFactory.java"}, "focal_method": {"identifier": "populateOutputFieldsMapWithProbability", "parameters": "(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "modifiers": "static", "return": "void", "body": "static void populateOutputFieldsMapWithProbability(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields) {\n        outputFields.stream()\n                .filter(outputField -> PROBABILITY.equals(outputField.getResultFeature()))\n                .forEach(outputField -> {\n                    StringLiteralExpr key = new StringLiteralExpr(outputField.getName());\n                    Expression value = null;\n                    if (outputField.getValue() != null) {\n                        NodeList<Expression> expressions =\n                                NodeList.nodeList(new StringLiteralExpr(outputField.getValue().toString()));\n                        value = new MethodCallExpr(new NameExpr(\"probabilityMap\"), \"get\", expressions);\n                    } else if (outputField.getTargetField().isPresent()) {\n                        NodeList<Expression> expressions =\n                                NodeList.nodeList(new StringLiteralExpr(outputField.getTargetField().get()));\n                        value = new MethodCallExpr(new NameExpr(\"probabilityMap\"), \"get\", expressions);\n                    }\n                    if (value != null) {\n                        NodeList<Expression> expressions = NodeList.nodeList(key, value);\n                        body.addStatement(new MethodCallExpr(new NameExpr(\"outputFieldsMap\"), \"put\", expressions));\n                    }\n                });\n    }", "signature": "void populateOutputFieldsMapWithProbability(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "full_signature": "static void populateOutputFieldsMapWithProbability(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "class_method_signature": "KiePMMLRegressionTableClassificationFactory.populateOutputFieldsMapWithProbability(final BlockStmt body,\n                                                               final List<KiePMMLOutputField> outputFields)", "testcase": false, "constructor": false, "invocations": ["forEach", "filter", "stream", "equals", "getResultFeature", "getName", "getValue", "nodeList", "toString", "getValue", "isPresent", "getTargetField", "nodeList", "get", "getTargetField", "nodeList", "addStatement"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}