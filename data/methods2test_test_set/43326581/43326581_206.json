{"test_class": {"identifier": "ProjectPortletUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ResourceRequest request;", "modifier": "@Mock\n    private", "type": "ResourceRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private PortletSession portletSession;", "modifier": "@Mock\n    private", "type": "PortletSession", "declarator": "portletSession", "var_name": "portletSession"}], "file": "frontend/sw360-portlet/src/test/java/org/eclipse/sw360/portal/portlets/projects/ProjectPortletUtilsTest.java"}, "test_case": {"identifier": "testGetExcludedLicensesPerAttachmantIdFromRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetExcludedLicensesPerAttachmantIdFromRequest() {\n        // checkboxes (note: checked boxes mark licenses NOT to be excluded :-))\n        Mockito.when(request.getParameterValues(\"a1\")).thenReturn(new String[] { \"1\", \"2\" });\n        Mockito.when(request.getParameterValues(\"a2\")).thenReturn(new String[] {});\n        Mockito.when(request.getParameterValues(\"a3\")).thenReturn(new String[] { \"0\", \"1\", \"2\", \"3\", \"4\" });\n        // temporary keys (the key are always completely transmitted, the selection is\n        // done by the checkboxes\n\n        // which attachment id has which keys\n        Mockito.when(request.getParameterValues(\"a1_key\")).thenReturn(new String[] { \"a1l1\", \"a1l2\", \"a1l3\", \"a1l4\" });\n        Mockito.when(request.getParameterValues(\"a2_key\")).thenReturn(new String[] { \"a2l1\", \"a2l2\", \"a2l3\" });\n        Mockito.when(request.getParameterValues(\"a3_key\")).thenReturn(new String[] { \"a3l1\", \"a3l2\", \"a3l3\", \"a3l4\", \"a3l5\" });\n\n        // @formatter:off\n        // example of the temporary mapping to keys\n        Mockito.when(request.getPortletSession()).thenReturn(portletSession);\n        Mockito.when(portletSession.getAttribute(\"license-store-a1\")).thenReturn(ImmutableMap.of(\n                \"a1l1\", createLicense(\"a1l1\", \"a1l1_t\"),\n                \"a1l2\", createLicense(\"a1l2\", \"a1l2_t\"),\n                \"a1l3\", createLicense(\"a1l3\", \"a1l3_t\"),\n                \"a1l4\", createLicense(\"a1l4\", \"a1l4_t\")\n        ));\n        Mockito.when(portletSession.getAttribute(\"license-store-a2\")).thenReturn(ImmutableMap.of(\n                \"a2l1\", createLicense(\"a2l1\", \"a2l1_t\"),\n                \"a2l2\", createLicense(\"a2l2\", \"a2l2_t\"),\n                \"a2l3\", createLicense(\"a2l3\", \"a2l3_t\")\n        ));\n        Mockito.when(portletSession.getAttribute(\"license-store-a3\")).thenReturn(ImmutableMap.of(\n                \"a3l1\", createLicense(\"a3l1\", \"a3l1_t\"),\n                \"a3l2\", createLicense(\"a3l2\", \"a3l2_t\"),\n                \"a3l3\", createLicense(\"a3l3\", \"a3l3_t\"),\n                \"a3l4\", createLicense(\"a3l4\", \"a3l4_t\"),\n                \"a3l5\", createLicense(\"a3l5\", \"a3l5_t\")\n        ));\n        // @formatter:on\n\n        Map<String, Set<LicenseNameWithText>> excludedLicenses = ProjectPortletUtils\n                .getExcludedLicensesPerAttachmentIdFromRequest(ImmutableSet.of(\"a1\", \"a2\", \"a3\"), request);\n\n        // Every license not checked is excluded now\n        Assert.assertThat(excludedLicenses.keySet(), Matchers.containsInAnyOrder(\"a1\", \"a2\", \"a3\"));\n        Assert.assertThat(excludedLicenses.get(\"a1\"),\n                Matchers.containsInAnyOrder(createLicense(\"a1l1\", \"a1l1_t\"), createLicense(\"a1l4\", \"a1l4_t\")));\n        Assert.assertThat(excludedLicenses.get(\"a2\"), Matchers.containsInAnyOrder(createLicense(\"a2l1\", \"a2l1_t\"),\n                createLicense(\"a2l2\", \"a2l2_t\"), createLicense(\"a2l3\", \"a2l3_t\")));\n        Assert.assertTrue(excludedLicenses.get(\"a3\").isEmpty());\n    }", "signature": "void testGetExcludedLicensesPerAttachmantIdFromRequest()", "full_signature": "@Test public void testGetExcludedLicensesPerAttachmantIdFromRequest()", "class_method_signature": "ProjectPortletUtilsTest.testGetExcludedLicensesPerAttachmantIdFromRequest()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getParameterValues", "thenReturn", "when", "getParameterValues", "thenReturn", "when", "getParameterValues", "thenReturn", "when", "getParameterValues", "thenReturn", "when", "getParameterValues", "thenReturn", "when", "getParameterValues", "thenReturn", "when", "getPortletSession", "thenReturn", "when", "getAttribute", "of", "createLicense", "createLicense", "createLicense", "createLicense", "thenReturn", "when", "getAttribute", "of", "createLicense", "createLicense", "createLicense", "thenReturn", "when", "getAttribute", "of", "createLicense", "createLicense", "createLicense", "createLicense", "createLicense", "getExcludedLicensesPerAttachmentIdFromRequest", "of", "assertThat", "keySet", "containsInAnyOrder", "assertThat", "get", "containsInAnyOrder", "createLicense", "createLicense", "assertThat", "get", "containsInAnyOrder", "createLicense", "createLicense", "createLicense", "assertTrue", "isEmpty", "get"]}, "focal_class": {"identifier": "ProjectPortletUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(ProjectPortletUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(ProjectPortletUtils.class)", "var_name": "log"}], "methods": [{"identifier": "ProjectPortletUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ProjectPortletUtils()", "full_signature": "private  ProjectPortletUtils()", "class_method_signature": "ProjectPortletUtils.ProjectPortletUtils()", "testcase": false, "constructor": true}, {"identifier": "updateProjectFromRequest", "parameters": "(PortletRequest request, Project project)", "modifiers": "public static", "return": "void", "signature": "void updateProjectFromRequest(PortletRequest request, Project project)", "full_signature": "public static void updateProjectFromRequest(PortletRequest request, Project project)", "class_method_signature": "ProjectPortletUtils.updateProjectFromRequest(PortletRequest request, Project project)", "testcase": false, "constructor": false}, {"identifier": "updateLinkedReleasesFromRequest", "parameters": "(PortletRequest request, Map<String, ProjectReleaseRelationship> releaseUsage)", "modifiers": "private static", "return": "void", "signature": "void updateLinkedReleasesFromRequest(PortletRequest request, Map<String, ProjectReleaseRelationship> releaseUsage)", "full_signature": "private static void updateLinkedReleasesFromRequest(PortletRequest request, Map<String, ProjectReleaseRelationship> releaseUsage)", "class_method_signature": "ProjectPortletUtils.updateLinkedReleasesFromRequest(PortletRequest request, Map<String, ProjectReleaseRelationship> releaseUsage)", "testcase": false, "constructor": false}, {"identifier": "updateLinkedProjectsFromRequest", "parameters": "(PortletRequest request, Map<String, ProjectRelationship> linkedProjects)", "modifiers": "private static", "return": "void", "signature": "void updateLinkedProjectsFromRequest(PortletRequest request, Map<String, ProjectRelationship> linkedProjects)", "full_signature": "private static void updateLinkedProjectsFromRequest(PortletRequest request, Map<String, ProjectRelationship> linkedProjects)", "class_method_signature": "ProjectPortletUtils.updateLinkedProjectsFromRequest(PortletRequest request, Map<String, ProjectRelationship> linkedProjects)", "testcase": false, "constructor": false}, {"identifier": "setFieldValue", "parameters": "(PortletRequest request, Project project, Project._Fields field)", "modifiers": "private static", "return": "void", "signature": "void setFieldValue(PortletRequest request, Project project, Project._Fields field)", "full_signature": "private static void setFieldValue(PortletRequest request, Project project, Project._Fields field)", "class_method_signature": "ProjectPortletUtils.setFieldValue(PortletRequest request, Project project, Project._Fields field)", "testcase": false, "constructor": false}, {"identifier": "updateProjectVulnerabilityRatingFromRequest", "parameters": "(Optional<ProjectVulnerabilityRating> projectVulnerabilityRatings, ResourceRequest request)", "modifiers": "public static", "return": "ProjectVulnerabilityRating", "signature": "ProjectVulnerabilityRating updateProjectVulnerabilityRatingFromRequest(Optional<ProjectVulnerabilityRating> projectVulnerabilityRatings, ResourceRequest request)", "full_signature": "public static ProjectVulnerabilityRating updateProjectVulnerabilityRatingFromRequest(Optional<ProjectVulnerabilityRating> projectVulnerabilityRatings, ResourceRequest request)", "class_method_signature": "ProjectPortletUtils.updateProjectVulnerabilityRatingFromRequest(Optional<ProjectVulnerabilityRating> projectVulnerabilityRatings, ResourceRequest request)", "testcase": false, "constructor": false}, {"identifier": "newVulnerabilityCheckStatusFromRequest", "parameters": "(ResourceRequest request)", "modifiers": "private static", "return": "VulnerabilityCheckStatus", "signature": "VulnerabilityCheckStatus newVulnerabilityCheckStatusFromRequest(ResourceRequest request)", "full_signature": "private static VulnerabilityCheckStatus newVulnerabilityCheckStatusFromRequest(ResourceRequest request)", "class_method_signature": "ProjectPortletUtils.newVulnerabilityCheckStatusFromRequest(ResourceRequest request)", "testcase": false, "constructor": false}, {"identifier": "saveStickyProjectGroup", "parameters": "(PortletRequest request, User user, String groupFilterValue)", "modifiers": "static", "return": "void", "signature": "void saveStickyProjectGroup(PortletRequest request, User user, String groupFilterValue)", "full_signature": "static void saveStickyProjectGroup(PortletRequest request, User user, String groupFilterValue)", "class_method_signature": "ProjectPortletUtils.saveStickyProjectGroup(PortletRequest request, User user, String groupFilterValue)", "testcase": false, "constructor": false}, {"identifier": "loadStickyProjectGroup", "parameters": "(PortletRequest request, User user)", "modifiers": "static", "return": "String", "signature": "String loadStickyProjectGroup(PortletRequest request, User user)", "full_signature": "static String loadStickyProjectGroup(PortletRequest request, User user)", "class_method_signature": "ProjectPortletUtils.loadStickyProjectGroup(PortletRequest request, User user)", "testcase": false, "constructor": false}, {"identifier": "getSelectedReleaseAndAttachmentIdsFromRequest", "parameters": "(ResourceRequest request)", "modifiers": "public static", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> getSelectedReleaseAndAttachmentIdsFromRequest(ResourceRequest request)", "full_signature": "public static Map<String, Set<String>> getSelectedReleaseAndAttachmentIdsFromRequest(ResourceRequest request)", "class_method_signature": "ProjectPortletUtils.getSelectedReleaseAndAttachmentIdsFromRequest(ResourceRequest request)", "testcase": false, "constructor": false}, {"identifier": "getExcludedLicensesPerAttachmentIdFromRequest", "parameters": "(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "modifiers": "public static", "return": "Map<String, Set<LicenseNameWithText>>", "signature": "Map<String, Set<LicenseNameWithText>> getExcludedLicensesPerAttachmentIdFromRequest(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "full_signature": "public static Map<String, Set<LicenseNameWithText>> getExcludedLicensesPerAttachmentIdFromRequest(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "class_method_signature": "ProjectPortletUtils.getExcludedLicensesPerAttachmentIdFromRequest(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "testcase": false, "constructor": false}, {"identifier": "makeAttachmentUsages", "parameters": "(Project project, Map<String, Set<String>> selectedReleaseAndAttachmentIds,\n            Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachmentId)", "modifiers": "public static", "return": "List<AttachmentUsage>", "signature": "List<AttachmentUsage> makeAttachmentUsages(Project project, Map<String, Set<String>> selectedReleaseAndAttachmentIds,\n            Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachmentId)", "full_signature": "public static List<AttachmentUsage> makeAttachmentUsages(Project project, Map<String, Set<String>> selectedReleaseAndAttachmentIds,\n            Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachmentId)", "class_method_signature": "ProjectPortletUtils.makeAttachmentUsages(Project project, Map<String, Set<String>> selectedReleaseAndAttachmentIds,\n            Map<String, Set<LicenseNameWithText>> excludedLicensesPerAttachmentId)", "testcase": false, "constructor": false}, {"identifier": "extractContainedAttachments", "parameters": "(Collection<ProjectLink> projectLinks)", "modifiers": "public static", "return": "Map<Source, Set<String>>", "signature": "Map<Source, Set<String>> extractContainedAttachments(Collection<ProjectLink> projectLinks)", "full_signature": "public static Map<Source, Set<String>> extractContainedAttachments(Collection<ProjectLink> projectLinks)", "class_method_signature": "ProjectPortletUtils.extractContainedAttachments(Collection<ProjectLink> projectLinks)", "testcase": false, "constructor": false}], "file": "frontend/sw360-portlet/src/main/java/org/eclipse/sw360/portal/portlets/projects/ProjectPortletUtils.java"}, "focal_method": {"identifier": "getExcludedLicensesPerAttachmentIdFromRequest", "parameters": "(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "modifiers": "public static", "return": "Map<String, Set<LicenseNameWithText>>", "body": "public static Map<String, Set<LicenseNameWithText>> getExcludedLicensesPerAttachmentIdFromRequest(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request) {\n        Map<String, Set<LicenseNameWithText>> excludedLicenses = Maps.newHashMap();\n\n        for (String attachmentContentId : attachmentContentIds) {\n            String[] checkboxes = request.getParameterValues(attachmentContentId);\n            String[] keys = request.getParameterValues(attachmentContentId + \"_key\");\n\n            if (checkboxes == null) {\n                // no details present\n                continue;\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            Map<String, LicenseNameWithText> licenseStore = (Map<String, LicenseNameWithText>) request.getPortletSession()\n                    .getAttribute(ProjectPortlet.LICENSE_STORE_KEY_PREFIX + attachmentContentId);\n            if (licenseStore == null) {\n                throw new IllegalStateException(\"No license store found for attachment content id \" + attachmentContentId);\n            }\n\n            Set<Integer> includedIds = Arrays.stream(checkboxes).map(s -> Integer.valueOf(s)).collect(Collectors.toSet());\n            Set<LicenseNameWithText> licenseNameWithTexts = Sets.newHashSet();\n            for (int index = 0; index < keys.length; index++) {\n                if (includedIds.contains(index)) {\n                    // a request will only contain selected ids because unselected checkboxes are\n                    // not transferred. Due to that we have to exclude everything that was NOT\n                    // transferred\n                    continue;\n                }\n\n                LicenseNameWithText licenseNameWithText = licenseStore.get(keys[index]);\n                if (licenseNameWithText == null) {\n                    throw new IllegalStateException(\"No license found for key \" + keys[index]);\n                }\n\n                licenseNameWithTexts.add(licenseNameWithText);\n            }\n\n            excludedLicenses.put(attachmentContentId, licenseNameWithTexts);\n        }\n\n        return excludedLicenses;\n    }", "signature": "Map<String, Set<LicenseNameWithText>> getExcludedLicensesPerAttachmentIdFromRequest(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "full_signature": "public static Map<String, Set<LicenseNameWithText>> getExcludedLicensesPerAttachmentIdFromRequest(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "class_method_signature": "ProjectPortletUtils.getExcludedLicensesPerAttachmentIdFromRequest(Set<String> attachmentContentIds,\n                                                                                                      ResourceRequest request)", "testcase": false, "constructor": false, "invocations": ["newHashMap", "getParameterValues", "getParameterValues", "getAttribute", "getPortletSession", "collect", "map", "stream", "valueOf", "toSet", "newHashSet", "contains", "get", "add", "put"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}