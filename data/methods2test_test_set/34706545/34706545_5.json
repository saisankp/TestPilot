{"test_class": {"identifier": "ConvertTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/org/coniks/util/ConvertTest.java"}, "test_case": {"identifier": "testLongToBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLongToBytes() {\n\n        // test positive long\n        long num = 42;\n        byte[] bytes = Convert.longToBytes(num);\n\n        assertTrue(\"Bad length of long byte array\", bytes.length == 8);\n\n        // need to flip the bytes to get right endianness back\n        long l = ByteBuffer.wrap(bytes).getLong();\n        assertTrue(\"Conversion of non-neg long to bytes failed: l = \"+l,\n                   num == l);\n\n        // test negative long\n        num = -42;\n        bytes = Convert.longToBytes(num);\n\n        l = ByteBuffer.wrap(bytes).getLong();\n        assertTrue(\"Conversion of negative long to bytes failed: l = \"+l,\n                   num == l);\n    }", "signature": "void testLongToBytes()", "full_signature": "@Test public void testLongToBytes()", "class_method_signature": "ConvertTest.testLongToBytes()", "testcase": true, "constructor": false, "invocations": ["longToBytes", "assertTrue", "getLong", "wrap", "assertTrue", "longToBytes", "getLong", "wrap", "assertTrue"]}, "focal_class": {"identifier": "Convert", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] hexArray = \"0123456789ABCDEF\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "hexArray = \"0123456789ABCDEF\".toCharArray()", "var_name": "hexArray"}], "methods": [{"identifier": "bytesToHex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String bytesToHex(byte[] bytes)", "full_signature": "public static String bytesToHex(byte[] bytes)", "class_method_signature": "Convert.bytesToHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "strToBytes", "parameters": "(String str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] strToBytes(String str)", "full_signature": "public static byte[] strToBytes(String str)", "class_method_signature": "Convert.strToBytes(String str)", "testcase": false, "constructor": false}, {"identifier": "longToBytes", "parameters": "(long val)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToBytes(long val)", "full_signature": "public static byte[] longToBytes(long val)", "class_method_signature": "Convert.longToBytes(long val)", "testcase": false, "constructor": false}, {"identifier": "getNthBit", "parameters": "(byte[] arr, int offset)", "modifiers": "public static", "return": "boolean", "signature": "boolean getNthBit(byte[] arr, int offset)", "full_signature": "public static boolean getNthBit(byte[] arr, int offset)", "class_method_signature": "Convert.getNthBit(byte[] arr, int offset)", "testcase": false, "constructor": false}, {"identifier": "getPrefixBytes", "parameters": "(byte[] arr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getPrefixBytes(byte[] arr)", "full_signature": "public static byte[] getPrefixBytes(byte[] arr)", "class_method_signature": "Convert.getPrefixBytes(byte[] arr)", "testcase": false, "constructor": false}], "file": "util/src/main/java/org/coniks/util/Convert.java"}, "focal_method": {"identifier": "longToBytes", "parameters": "(long val)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] longToBytes(long val) {\n        byte[] byteArr = new byte[8];\n\n        for(int i = 7; i >= 0; i--) {\n            byteArr[i] = (byte)(val & 0xFF);\n            val >>= 8;\n        }\n\n        return byteArr;\n    }", "signature": "byte[] longToBytes(long val)", "full_signature": "public static byte[] longToBytes(long val)", "class_method_signature": "Convert.longToBytes(long val)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 34706545, "url": "https://github.com/coniks-sys/coniks-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 60, "size": 2990, "license": "licensed"}}