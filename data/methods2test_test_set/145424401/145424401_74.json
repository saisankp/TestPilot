{"test_class": {"identifier": "PythonFileAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "lang-python/src/test/java/org/eclipse/steady/python/PythonFileAnalyzerTest.java"}, "test_case": {"identifier": "testPython2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPython2() throws FileAnalysisException {\n    final FileAnalyzer fa =\n        PythonFileAnalyzer.createAnalyzer(new File(\"src/test/resources/python2_syntax.py\"));\n    assertTrue(fa instanceof org.eclipse.steady.python.Python335FileAnalyzer);\n  }", "signature": "void testPython2()", "full_signature": "@Test public void testPython2()", "class_method_signature": "PythonFileAnalyzerTest.testPython2()", "testcase": true, "constructor": false, "invocations": ["createAnalyzer", "assertTrue"]}, "focal_class": {"identifier": "PythonFileAnalyzer", "superclass": "", "interfaces": "implements FileAnalyzer", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private FileAnalyzer analyzer = null;", "modifier": "private", "type": "FileAnalyzer", "declarator": "analyzer = null", "var_name": "analyzer"}, {"original_string": "private File file = null;", "modifier": "private", "type": "File", "declarator": "file = null", "var_name": "file"}, {"original_string": "private Map<ConstructId, Construct> constructs = null;", "modifier": "private", "type": "Map<ConstructId, Construct>", "declarator": "constructs = null", "var_name": "constructs"}, {"original_string": "static final Pattern[] PY2_PATTERNS =\n      new Pattern[] {Pattern.compile(\"^\\\\s*print\\\\s+\\\".*$\"), Pattern.compile(\"^.*raw_input\\\\(.*$\")};", "modifier": "static final", "type": "Pattern[]", "declarator": "PY2_PATTERNS =\n      new Pattern[] {Pattern.compile(\"^\\\\s*print\\\\s+\\\".*$\"), Pattern.compile(\"^.*raw_input\\\\(.*$\")}", "var_name": "PY2_PATTERNS"}, {"original_string": "static final Pattern[] PY35_ASYNC_PATTERNS =\n      new Pattern[] {Pattern.compile(\"^.*async\\\\s*def.*$\")};", "modifier": "static final", "type": "Pattern[]", "declarator": "PY35_ASYNC_PATTERNS =\n      new Pattern[] {Pattern.compile(\"^.*async\\\\s*def.*$\")}", "var_name": "PY35_ASYNC_PATTERNS"}, {"original_string": "static final Pattern[] COMMENT_PATTERNS = new Pattern[] {Pattern.compile(\"^\\\\s*#.*$\")};", "modifier": "static final", "type": "Pattern[]", "declarator": "COMMENT_PATTERNS = new Pattern[] {Pattern.compile(\"^\\\\s*#.*$\")}", "var_name": "COMMENT_PATTERNS"}], "methods": [{"identifier": "getSupportedFileExtensions", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getSupportedFileExtensions()", "full_signature": "@Override public String[] getSupportedFileExtensions()", "class_method_signature": "PythonFileAnalyzer.getSupportedFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "canAnalyze", "parameters": "(File _file)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canAnalyze(File _file)", "full_signature": "@Override public boolean canAnalyze(File _file)", "class_method_signature": "PythonFileAnalyzer.canAnalyze(File _file)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "(final File _file)", "modifiers": "@Override public", "return": "void", "signature": "void analyze(final File _file)", "full_signature": "@Override public void analyze(final File _file)", "class_method_signature": "PythonFileAnalyzer.analyze(final File _file)", "testcase": false, "constructor": false}, {"identifier": "isTopOfType", "parameters": "(Stack<PythonId> _context, PythonId.Type _type)", "modifiers": "static", "return": "boolean", "signature": "boolean isTopOfType(Stack<PythonId> _context, PythonId.Type _type)", "full_signature": "static boolean isTopOfType(Stack<PythonId> _context, PythonId.Type _type)", "class_method_signature": "PythonFileAnalyzer.isTopOfType(Stack<PythonId> _context, PythonId.Type _type)", "testcase": false, "constructor": false}, {"identifier": "isTopOfType", "parameters": "(Stack<PythonId> _context, PythonId.Type[] _types)", "modifiers": "static", "return": "boolean", "signature": "boolean isTopOfType(Stack<PythonId> _context, PythonId.Type[] _types)", "full_signature": "static boolean isTopOfType(Stack<PythonId> _context, PythonId.Type[] _types)", "class_method_signature": "PythonFileAnalyzer.isTopOfType(Stack<PythonId> _context, PythonId.Type[] _types)", "testcase": false, "constructor": false}, {"identifier": "getConstructs", "parameters": "()", "modifiers": "@Override public", "return": "Map<ConstructId, Construct>", "signature": "Map<ConstructId, Construct> getConstructs()", "full_signature": "@Override public Map<ConstructId, Construct> getConstructs()", "class_method_signature": "PythonFileAnalyzer.getConstructs()", "testcase": false, "constructor": false}, {"identifier": "containsConstruct", "parameters": "(ConstructId _id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsConstruct(ConstructId _id)", "full_signature": "@Override public boolean containsConstruct(ConstructId _id)", "class_method_signature": "PythonFileAnalyzer.containsConstruct(ConstructId _id)", "testcase": false, "constructor": false}, {"identifier": "getConstruct", "parameters": "(ConstructId _id)", "modifiers": "@Override public", "return": "Construct", "signature": "Construct getConstruct(ConstructId _id)", "full_signature": "@Override public Construct getConstruct(ConstructId _id)", "class_method_signature": "PythonFileAnalyzer.getConstruct(ConstructId _id)", "testcase": false, "constructor": false}, {"identifier": "hasChilds", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChilds()", "full_signature": "@Override public boolean hasChilds()", "class_method_signature": "PythonFileAnalyzer.hasChilds()", "testcase": false, "constructor": false}, {"identifier": "getChilds", "parameters": "(boolean _recursive)", "modifiers": "@Override public", "return": "Set<FileAnalyzer>", "signature": "Set<FileAnalyzer> getChilds(boolean _recursive)", "full_signature": "@Override public Set<FileAnalyzer> getChilds(boolean _recursive)", "class_method_signature": "PythonFileAnalyzer.getChilds(boolean _recursive)", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "(File _file)", "modifiers": "public static", "return": "PythonId", "signature": "PythonId getModule(File _file)", "full_signature": "public static PythonId getModule(File _file)", "class_method_signature": "PythonFileAnalyzer.getModule(File _file)", "testcase": false, "constructor": false}, {"identifier": "createAnalyzer", "parameters": "(final File _file)", "modifiers": "public static", "return": "FileAnalyzer", "signature": "FileAnalyzer createAnalyzer(final File _file)", "full_signature": "public static FileAnalyzer createAnalyzer(final File _file)", "class_method_signature": "PythonFileAnalyzer.createAnalyzer(final File _file)", "testcase": false, "constructor": false}, {"identifier": "createAnalyzer", "parameters": "(InputStream _is)", "modifiers": "public static", "return": "FileAnalyzer", "signature": "FileAnalyzer createAnalyzer(InputStream _is)", "full_signature": "public static FileAnalyzer createAnalyzer(InputStream _is)", "class_method_signature": "PythonFileAnalyzer.createAnalyzer(InputStream _is)", "testcase": false, "constructor": false}], "file": "lang-python/src/main/java/org/eclipse/steady/python/PythonFileAnalyzer.java"}, "focal_method": {"identifier": "createAnalyzer", "parameters": "(final File _file)", "modifiers": "public static", "return": "FileAnalyzer", "body": "public static FileAnalyzer createAnalyzer(final File _file) {\n    try (final InputStream is = new FileInputStream(_file)) {\n      return PythonFileAnalyzer.createAnalyzer(is);\n    } catch (IOException e) {\n      log.error(\n          e.getClass().getSimpleName()\n              + \" when creating analyzer for file [\"\n              + _file.toPath().toAbsolutePath()\n              + \"]: \"\n              + e.getMessage(),\n          e);\n    }\n    return null;\n  }", "signature": "FileAnalyzer createAnalyzer(final File _file)", "full_signature": "public static FileAnalyzer createAnalyzer(final File _file)", "class_method_signature": "PythonFileAnalyzer.createAnalyzer(final File _file)", "testcase": false, "constructor": false, "invocations": ["createAnalyzer", "error", "getSimpleName", "getClass", "toAbsolutePath", "toPath", "getMessage"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}