{"test_class": {"identifier": "EsClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ExecutionContext context = new ExecutionContext();", "modifier": "private final static", "type": "ExecutionContext", "declarator": "context = new ExecutionContext()", "var_name": "context"}, {"original_string": "private final static EsIndexColumn def1 = new EsIndexColumn(context, \"field1\", PropertyType.STRING);", "modifier": "private final static", "type": "EsIndexColumn", "declarator": "def1 = new EsIndexColumn(context, \"field1\", PropertyType.STRING)", "var_name": "def1"}, {"original_string": "private final static EsIndexColumn def2 = new EsIndexColumn(context, \"field2\", PropertyType.DECIMAL);", "modifier": "private final static", "type": "EsIndexColumn", "declarator": "def2 = new EsIndexColumn(context, \"field2\", PropertyType.DECIMAL)", "var_name": "def2"}, {"original_string": "private final static EsIndexColumn def3 = new EsIndexColumn(context, \"field3\", PropertyType.STRING);", "modifier": "private final static", "type": "EsIndexColumn", "declarator": "def3 = new EsIndexColumn(context, \"field3\", PropertyType.STRING)", "var_name": "def3"}, {"original_string": "private final static EsIndexColumn def4 = new EsIndexColumn(context, \"mixinTypes\", PropertyType.NAME);", "modifier": "private final static", "type": "EsIndexColumn", "declarator": "def4 = new EsIndexColumn(context, \"mixinTypes\", PropertyType.NAME)", "var_name": "def4"}, {"original_string": "private final static EsIndexColumn def5 = new EsIndexColumn(context, \"myfield\", PropertyType.STRING);", "modifier": "private final static", "type": "EsIndexColumn", "declarator": "def5 = new EsIndexColumn(context, \"myfield\", PropertyType.STRING)", "var_name": "def5"}, {"original_string": "private final static EsIndexColumns columns = new EsIndexColumns(def1, def2, def3, def4, def5);", "modifier": "private final static", "type": "EsIndexColumns", "declarator": "columns = new EsIndexColumns(def1, def2, def3, def4, def5)", "var_name": "columns"}, {"original_string": "private static Node esNode;", "modifier": "private static", "type": "Node", "declarator": "esNode", "var_name": "esNode"}, {"original_string": "private final EsClient client = new EsClient(\"localhost\", 9200);", "modifier": "private final", "type": "EsClient", "declarator": "client = new EsClient(\"localhost\", 9200)", "var_name": "client"}, {"original_string": "private final static String INDEX_NAME = \"test-index\";", "modifier": "private final static", "type": "String", "declarator": "INDEX_NAME = \"test-index\"", "var_name": "INDEX_NAME"}, {"original_string": "private final static String TYPE_NAME = \"test-type\";", "modifier": "private final static", "type": "String", "declarator": "TYPE_NAME = \"test-type\"", "var_name": "TYPE_NAME"}], "file": "index-providers/modeshape-elasticsearch-index-provider/src/test/java/org/modeshape/jcr/index/elasticsearch/client/EsClientTest.java"}, "test_case": {"identifier": "testCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCount() throws Exception {\n        EsRequest doc = new EsRequest();\n        doc.put(\"field1\", \"value1\");\n        assertTrue(client.storeDocument(INDEX_NAME, TYPE_NAME, \"10\", doc));\n        Thread.sleep(1500);\n        long count = client.count(INDEX_NAME, TYPE_NAME);\n        assertEquals(1, count);\n    }", "signature": "void testCount()", "full_signature": "@Test public void testCount()", "class_method_signature": "EsClientTest.testCount()", "testcase": true, "constructor": false, "invocations": ["put", "assertTrue", "storeDocument", "sleep", "count", "assertEquals"]}, "focal_class": {"identifier": "EsClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String host;", "modifier": "private final", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private final int port;", "modifier": "private final", "type": "int", "declarator": "port", "var_name": "port"}], "methods": [{"identifier": "EsClient", "parameters": "(String host, int port)", "modifiers": "public", "return": "", "signature": " EsClient(String host, int port)", "full_signature": "public  EsClient(String host, int port)", "class_method_signature": "EsClient.EsClient(String host, int port)", "testcase": false, "constructor": true}, {"identifier": "indexExists", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean indexExists(String name)", "full_signature": "public boolean indexExists(String name)", "class_method_signature": "EsClient.indexExists(String name)", "testcase": false, "constructor": false}, {"identifier": "createIndex", "parameters": "(String name, String type, EsRequest mappings)", "modifiers": "public", "return": "boolean", "signature": "boolean createIndex(String name, String type, EsRequest mappings)", "full_signature": "public boolean createIndex(String name, String type, EsRequest mappings)", "class_method_signature": "EsClient.createIndex(String name, String type, EsRequest mappings)", "testcase": false, "constructor": false}, {"identifier": "deleteIndex", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteIndex(String name)", "full_signature": "public boolean deleteIndex(String name)", "class_method_signature": "EsClient.deleteIndex(String name)", "testcase": false, "constructor": false}, {"identifier": "storeDocument", "parameters": "(String name, String type, String id,\n            EsRequest doc)", "modifiers": "public", "return": "boolean", "signature": "boolean storeDocument(String name, String type, String id,\n            EsRequest doc)", "full_signature": "public boolean storeDocument(String name, String type, String id,\n            EsRequest doc)", "class_method_signature": "EsClient.storeDocument(String name, String type, String id,\n            EsRequest doc)", "testcase": false, "constructor": false}, {"identifier": "getDocument", "parameters": "(String name, String type, String id)", "modifiers": "public", "return": "EsRequest", "signature": "EsRequest getDocument(String name, String type, String id)", "full_signature": "public EsRequest getDocument(String name, String type, String id)", "class_method_signature": "EsClient.getDocument(String name, String type, String id)", "testcase": false, "constructor": false}, {"identifier": "deleteDocument", "parameters": "(String name, String type, String id)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteDocument(String name, String type, String id)", "full_signature": "public boolean deleteDocument(String name, String type, String id)", "class_method_signature": "EsClient.deleteDocument(String name, String type, String id)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(String name, String type)", "modifiers": "public", "return": "void", "signature": "void deleteAll(String name, String type)", "full_signature": "public void deleteAll(String name, String type)", "class_method_signature": "EsClient.deleteAll(String name, String type)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void flush(String name)", "full_signature": "public void flush(String name)", "class_method_signature": "EsClient.flush(String name)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void refresh(String name)", "full_signature": "public void refresh(String name)", "class_method_signature": "EsClient.refresh(String name)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(String name, String type, EsRequest query)", "modifiers": "public", "return": "EsResponse", "signature": "EsResponse search(String name, String type, EsRequest query)", "full_signature": "public EsResponse search(String name, String type, EsRequest query)", "class_method_signature": "EsClient.search(String name, String type, EsRequest query)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String name, String type)", "modifiers": "public", "return": "long", "signature": "long count(String name, String type)", "full_signature": "public long count(String name, String type)", "class_method_signature": "EsClient.count(String name, String type)", "testcase": false, "constructor": false}], "file": "index-providers/modeshape-elasticsearch-index-provider/src/main/java/org/modeshape/jcr/index/elasticsearch/client/EsClient.java"}, "focal_method": {"identifier": "count", "parameters": "(String name, String type)", "modifiers": "public", "return": "long", "body": "public long count(String name, String type) throws IOException {\n        CloseableHttpClient client = HttpClients.createDefault();\n        HttpPost method = new HttpPost(String.format(\"http://%s:%d/%s/%s/_count\", host, port, name, type));\n        try {\n            EsRequest query = new EsRequest();\n            query.put(\"query\", new MatchAllQuery().build());\n            StringEntity requestEntity = new StringEntity(query.toString(), ContentType.APPLICATION_JSON);\n            method.setEntity(requestEntity);\n\n            CloseableHttpResponse resp = client.execute(method);\n            int status = resp.getStatusLine().getStatusCode();\n            if (status != HttpStatus.SC_OK) {\n                throw new IOException(resp.getStatusLine().getReasonPhrase());\n            }\n            return (Integer) EsResponse.read(resp.getEntity().getContent()).get(\"count\");\n        } finally {\n            method.releaseConnection();\n        }\n    }", "signature": "long count(String name, String type)", "full_signature": "public long count(String name, String type)", "class_method_signature": "EsClient.count(String name, String type)", "testcase": false, "constructor": false, "invocations": ["createDefault", "format", "put", "build", "toString", "setEntity", "execute", "getStatusCode", "getStatusLine", "getReasonPhrase", "getStatusLine", "get", "read", "getContent", "getEntity", "releaseConnection"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}