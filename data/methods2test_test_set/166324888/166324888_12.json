{"test_class": {"identifier": "UnlockWithPasswordPresenterTest", "superclass": "extends BaseTestCase", "interfaces": "", "fields": [{"original_string": "@Mock\n    UnlockWithPasswordContract.View view;", "modifier": "@Mock", "type": "UnlockWithPasswordContract.View", "declarator": "view", "var_name": "view"}, {"original_string": "UnlockWithPasswordPresenter presenter;", "modifier": "", "type": "UnlockWithPasswordPresenter", "declarator": "presenter", "var_name": "presenter"}], "file": "wallet/src/test/java/com/platon/aton/component/ui/presenter/UnlockWithPasswordPresenterTest.java"}, "test_case": {"identifier": "setSelectWallet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setSelectWallet(){\n       Wallet wallet = new Wallet();\n       Bech32Address bech32Address = new Bech32Address(\"lat1jxeg784p2vuemglc7cy59mzgq50heg3gjt7fca\",\"lax1jxeg784p2vuemglc7cy59mzgq50heg3gawvxkj\");\n       wallet.setBech32Address(bech32Address);\n       wallet.setKeystorePath(\"UTC--2020-07-13T14-46-35.629--2fe04afd39ac4bfd9374ee50ee5d3315b33038c81c618e19477d1ecf38d047162c0ca1bb640c864d730a5e1ef09630cb7704c1f564b2b0dd41fc79cf690adfdc.json\");\n       wallet.setName(\"\u6709\u94b1\");\n       wallet.setChainId(\"101\");\n       String key = \"\\\"{\\\"address\\\":{\\\"mainnet\\\":\\\"lat1jxeg784p2vuemglc7cy59mzgq50heg3gjt7fca\\\",\\\"testnet\\\":\\\"lax1jxeg784p2vuemglc7cy59mzgq50heg3gawvxkj\\\"},\\\"id\\\":\\\"d04685eb-8374-40e4-91f2-f7bbad28e83d\\\",\\\"version\\\":3,\\\"crypto\\\":{\\\"cipher\\\":\\\"aes-128-ctr\\\",\\\"cipherparams\\\":{\\\"iv\\\":\\\"2e3868606fff20dd9382c41a52dbd76c\\\"},\\\"ciphertext\\\":\\\"c867aea0d7619cd776419d6973a1250f8cd643787aeb6b707ad8acaf0ac099ec\\\",\\\"kdf\\\":\\\"scrypt\\\",\\\"kdfparams\\\":{\\\"dklen\\\":32,\\\"n\\\":16384,\\\"p\\\":1,\\\"r\\\":8,\\\"salt\\\":\\\"253bf6760852211172ca68f3f01fb7196a7643c5a887385dff3454a6f4da895f\\\"},\\\"mac\\\":\\\"390b4330a3317e7e1f65c12797c874ef73d35c372d36274e70fa6dbe96765c5d\\\"}}\\\"\";\n       wallet.setKey(key);\n       wallet.setUuid(\"d04685eb-8374-40e4-91f2-f7bbad28e83d\");\n       presenter.setSelectWallet(wallet);\n       Mockito.verify(view).updateWalletInfo(Mockito.any());\n    }", "signature": "void setSelectWallet()", "full_signature": "@Test public void setSelectWallet()", "class_method_signature": "UnlockWithPasswordPresenterTest.setSelectWallet()", "testcase": true, "constructor": false, "invocations": ["setBech32Address", "setKeystorePath", "setName", "setChainId", "setKey", "setUuid", "setSelectWallet", "updateWalletInfo", "verify", "any"]}, "focal_class": {"identifier": "UnlockWithPasswordPresenter", "superclass": "extends BasePresenter<UnlockWithPasswordContract.View>", "interfaces": "implements UnlockWithPasswordContract.Presenter", "fields": [{"original_string": "private Wallet mWallet;", "modifier": "private", "type": "Wallet", "declarator": "mWallet", "var_name": "mWallet"}, {"original_string": "private static final int MSG_PASSWORD_FAILED = -1;", "modifier": "private static final", "type": "int", "declarator": "MSG_PASSWORD_FAILED = -1", "var_name": "MSG_PASSWORD_FAILED"}, {"original_string": "private static final int MSG_OK = 1;", "modifier": "private static final", "type": "int", "declarator": "MSG_OK = 1", "var_name": "MSG_OK"}, {"original_string": "private Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_OK:\n                    if (!BiometricPromptCompat.supportBiometricPromptCompat(currentActivity())) {\n                        PreferenceTool.putBoolean(Constants.Preference.KEY_FACE_TOUCH_ID_FLAG, false);\n                    }\n                    dismissLoadingDialogImmediately();\n                    BaseActivity activity = currentActivity();\n                    activity.setResult(Activity.RESULT_OK);\n                    activity.finish();\n                    break;\n                default:\n                    break;\n            }\n        }\n    };", "modifier": "private", "type": "Handler", "declarator": "mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            super.handleMessage(msg);\n            switch (msg.what) {\n                case MSG_PASSWORD_FAILED:\n                    dismissLoadingDialogImmediately();\n                    showLongToast(string(R.string.validPasswordError));\n                    break;\n                case MSG_OK:\n                    if (!BiometricPromptCompat.supportBiometricPromptCompat(currentActivity())) {\n                        PreferenceTool.putBoolean(Constants.Preference.KEY_FACE_TOUCH_ID_FLAG, false);\n                    }\n                    dismissLoadingDialogImmediately();\n                    BaseActivity activity = currentActivity();\n                    activity.setResult(Activity.RESULT_OK);\n                    activity.finish();\n                    break;\n                default:\n                    break;\n            }\n        }\n    }", "var_name": "mHandler"}], "methods": [{"identifier": "setSelectWallet", "parameters": "(Wallet wallet)", "modifiers": "@Override public", "return": "void", "signature": "void setSelectWallet(Wallet wallet)", "full_signature": "@Override public void setSelectWallet(Wallet wallet)", "class_method_signature": "UnlockWithPasswordPresenter.setSelectWallet(Wallet wallet)", "testcase": false, "constructor": false}, {"identifier": "getSelectedWallet", "parameters": "()", "modifiers": "@Override public", "return": "Wallet", "signature": "Wallet getSelectedWallet()", "full_signature": "@Override public Wallet getSelectedWallet()", "class_method_signature": "UnlockWithPasswordPresenter.getSelectedWallet()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "UnlockWithPasswordPresenter.init()", "testcase": false, "constructor": false}, {"identifier": "unlock", "parameters": "(String password)", "modifiers": "@Override public", "return": "void", "signature": "void unlock(String password)", "full_signature": "@Override public void unlock(String password)", "class_method_signature": "UnlockWithPasswordPresenter.unlock(String password)", "testcase": false, "constructor": false}, {"identifier": "getFirstWalletExceptObserverWallet", "parameters": "(List<Wallet> walletList)", "modifiers": "private", "return": "Wallet", "signature": "Wallet getFirstWalletExceptObserverWallet(List<Wallet> walletList)", "full_signature": "private Wallet getFirstWalletExceptObserverWallet(List<Wallet> walletList)", "class_method_signature": "UnlockWithPasswordPresenter.getFirstWalletExceptObserverWallet(List<Wallet> walletList)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/component/ui/presenter/UnlockWithPasswordPresenter.java"}, "focal_method": {"identifier": "setSelectWallet", "parameters": "(Wallet wallet)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setSelectWallet(Wallet wallet) {\n        mWallet = wallet;\n        getView().updateWalletInfo(wallet);\n    }", "signature": "void setSelectWallet(Wallet wallet)", "full_signature": "@Override public void setSelectWallet(Wallet wallet)", "class_method_signature": "UnlockWithPasswordPresenter.setSelectWallet(Wallet wallet)", "testcase": false, "constructor": false, "invocations": ["updateWalletInfo", "getView"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}