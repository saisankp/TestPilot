{"test_class": {"identifier": "MiscBigIntegerGeneratorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/common/src/test/java/dk/alexandra/fresco/lib/common/compare/MiscBigIntegerGeneratorsTest.java"}, "test_case": {"identifier": "getPolyResultNotNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getPolyResultNotNull() {\n    HashMap<Integer, BigInteger[]> mockMap = new HashMap<>();\n    BigInteger[] mockEntry = new BigInteger[] {};\n    mockMap.put(2, mockEntry);\n\n    MiscBigIntegerGenerators generators =\n        new MiscBigIntegerGenerators(BigInteger.valueOf(5), mockMap);\n\n    Assert.assertArrayEquals(mockEntry, generators.getPoly(2));\n  }", "signature": "void getPolyResultNotNull()", "full_signature": "@Test public void getPolyResultNotNull()", "class_method_signature": "MiscBigIntegerGeneratorsTest.getPolyResultNotNull()", "testcase": true, "constructor": false, "invocations": ["put", "valueOf", "assertArrayEquals", "getPoly"]}, "focal_class": {"identifier": "MiscBigIntegerGenerators", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<Integer, BigInteger[]> coefficientsOfPolynomiums;", "modifier": "private", "type": "Map<Integer, BigInteger[]>", "declarator": "coefficientsOfPolynomiums", "var_name": "coefficientsOfPolynomiums"}, {"original_string": "private List<BigInteger> twoPowersList;", "modifier": "private", "type": "List<BigInteger>", "declarator": "twoPowersList", "var_name": "twoPowersList"}, {"original_string": "private BigInteger modulus;", "modifier": "private", "type": "BigInteger", "declarator": "modulus", "var_name": "modulus"}, {"original_string": "private ModularReductionAlgorithm reducer;", "modifier": "private", "type": "ModularReductionAlgorithm", "declarator": "reducer", "var_name": "reducer"}], "methods": [{"identifier": "MiscBigIntegerGenerators", "parameters": "(BigInteger modulus)", "modifiers": "public", "return": "", "signature": " MiscBigIntegerGenerators(BigInteger modulus)", "full_signature": "public  MiscBigIntegerGenerators(BigInteger modulus)", "class_method_signature": "MiscBigIntegerGenerators.MiscBigIntegerGenerators(BigInteger modulus)", "testcase": false, "constructor": true}, {"identifier": "MiscBigIntegerGenerators", "parameters": "(BigInteger modulus, HashMap<Integer, BigInteger[]> coefficientsOfPolynomiums)", "modifiers": "protected", "return": "", "signature": " MiscBigIntegerGenerators(BigInteger modulus, HashMap<Integer, BigInteger[]> coefficientsOfPolynomiums)", "full_signature": "protected  MiscBigIntegerGenerators(BigInteger modulus, HashMap<Integer, BigInteger[]> coefficientsOfPolynomiums)", "class_method_signature": "MiscBigIntegerGenerators.MiscBigIntegerGenerators(BigInteger modulus, HashMap<Integer, BigInteger[]> coefficientsOfPolynomiums)", "testcase": false, "constructor": true}, {"identifier": "getPoly", "parameters": "(int l)", "modifiers": "public", "return": "BigInteger[]", "signature": "BigInteger[] getPoly(int l)", "full_signature": "public BigInteger[] getPoly(int l)", "class_method_signature": "MiscBigIntegerGenerators.getPoly(int l)", "testcase": false, "constructor": false}, {"identifier": "constructPolynomial", "parameters": "(int l)", "modifiers": "private", "return": "BigInteger[]", "signature": "BigInteger[] constructPolynomial(int l)", "full_signature": "private BigInteger[] constructPolynomial(int l)", "class_method_signature": "MiscBigIntegerGenerators.constructPolynomial(int l)", "testcase": false, "constructor": false}, {"identifier": "getTwoPowersList", "parameters": "(int length)", "modifiers": "public", "return": "List<BigInteger>", "signature": "List<BigInteger> getTwoPowersList(int length)", "full_signature": "public List<BigInteger> getTwoPowersList(int length)", "class_method_signature": "MiscBigIntegerGenerators.getTwoPowersList(int length)", "testcase": false, "constructor": false}, {"identifier": "getExpFromOInt", "parameters": "(BigInteger value, int maxBitSize)", "modifiers": "public", "return": "BigInteger[]", "signature": "BigInteger[] getExpFromOInt(BigInteger value, int maxBitSize)", "full_signature": "public BigInteger[] getExpFromOInt(BigInteger value, int maxBitSize)", "class_method_signature": "MiscBigIntegerGenerators.getExpFromOInt(BigInteger value, int maxBitSize)", "testcase": false, "constructor": false}], "file": "lib/common/src/main/java/dk/alexandra/fresco/lib/common/compare/MiscBigIntegerGenerators.java"}, "focal_method": {"identifier": "getPoly", "parameters": "(int l)", "modifiers": "public", "return": "BigInteger[]", "body": "public BigInteger[] getPoly(int l) {\n    // check that l is positive\n    Integer lInt = l;\n    BigInteger[] result = coefficientsOfPolynomiums.get(lInt);\n    if (result == null) {\n      // Generate a new set of OInts and store them...\n      result = new BigInteger[l + 1];\n\n      BigInteger[] coefficients = constructPolynomial(l);\n      for (int i = 0; i <= l; i++) {\n        result[i] = coefficients[coefficients.length - 1 - i];\n      }\n\n      coefficientsOfPolynomiums.put(lInt, result);\n    }\n    return result;\n  }", "signature": "BigInteger[] getPoly(int l)", "full_signature": "public BigInteger[] getPoly(int l)", "class_method_signature": "MiscBigIntegerGenerators.getPoly(int l)", "testcase": false, "constructor": false, "invocations": ["get", "constructPolynomial", "put"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}