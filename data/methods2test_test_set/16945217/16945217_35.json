{"test_class": {"identifier": "FilterSpliterTest", "superclass": "extends BaseOptimizerTest", "interfaces": "", "fields": [], "file": "tddl-optimizer/src/test/java/com/taobao/tddl/optimizer/costbased/FilterSpliterTest.java"}, "test_case": {"identifier": "test_", "parameters": "", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_\u4e8c\u7ea7\u7d22\u5f15\u6761\u4ef6() {\n        TableNode table = new TableNode(\"TABLE1\");\n        table.query(\"NAME = 1\");\n        build(table);\n\n        Map<FilterType, IFilter> result = FilterSpliter.splitByIndex(FilterUtils.toDNFNode(table.getWhereFilter()),\n            table);\n        Assert.assertEquals(\"TABLE1.NAME = 1\", result.get(FilterType.IndexQueryKeyFilter).toString());\n        Assert.assertEquals(null, result.get(FilterType.IndexQueryValueFilter));\n        Assert.assertEquals(null, result.get(FilterType.ResultFilter));\n    }", "signature": "void test_", "full_signature": "@Test public void test_", "class_method_signature": "FilterSpliterTest.test_", "testcase": true, "constructor": false, "invocations": ["query", "build", "splitByIndex", "toDNFNode", "getWhereFilter", "assertEquals", "toString", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "FilterSpliter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "splitByDNF", "parameters": "(TableNode node, Map<String, Object> extraCmd)", "modifiers": "public static", "return": "List<QueryTreeNode>", "signature": "List<QueryTreeNode> splitByDNF(TableNode node, Map<String, Object> extraCmd)", "full_signature": "public static List<QueryTreeNode> splitByDNF(TableNode node, Map<String, Object> extraCmd)", "class_method_signature": "FilterSpliter.splitByDNF(TableNode node, Map<String, Object> extraCmd)", "testcase": false, "constructor": false}, {"identifier": "splitByIndex", "parameters": "(List<IFilter> DNFNode, TableNode table)", "modifiers": "public static", "return": "Map<FilterType, IFilter>", "signature": "Map<FilterType, IFilter> splitByIndex(List<IFilter> DNFNode, TableNode table)", "full_signature": "public static Map<FilterType, IFilter> splitByIndex(List<IFilter> DNFNode, TableNode table)", "class_method_signature": "FilterSpliter.splitByIndex(List<IFilter> DNFNode, TableNode table)", "testcase": false, "constructor": false}, {"identifier": "isOptimizeIndexMerge", "parameters": "(Map<String, Object> extraCmd)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOptimizeIndexMerge(Map<String, Object> extraCmd)", "full_signature": "private static boolean isOptimizeIndexMerge(Map<String, Object> extraCmd)", "class_method_signature": "FilterSpliter.isOptimizeIndexMerge(Map<String, Object> extraCmd)", "testcase": false, "constructor": false}], "file": "tddl-optimizer/src/main/java/com/taobao/tddl/optimizer/costbased/FilterSpliter.java"}, "focal_method": {"identifier": "splitByIndex", "parameters": "(List<IFilter> DNFNode, TableNode table)", "modifiers": "public static", "return": "Map<FilterType, IFilter>", "body": "public static Map<FilterType, IFilter> splitByIndex(List<IFilter> DNFNode, TableNode table) {\n        Map<FilterType, IFilter> filters = new HashMap();\n        Map<Object, List<IFilter>> columnAndItsFilters = FilterUtils.toColumnFiltersMap(DNFNode);\n        IndexMeta index = table.getIndexUsed();\n        if (index == null) { // \u9ed8\u8ba4\u9009\u62e9\u4e3b\u952e\n            index = table.getTableMeta().getPrimaryIndex();\n        }\n\n        List<ISelectable> indexKeyColumns = new ArrayList(0);\n        List<ISelectable> indexValueColumns = new ArrayList(0);\n        if (index != null) {\n            indexKeyColumns = OptimizerUtils.columnMetaListToIColumnList(index.getKeyColumns(), table.getTableName());\n            indexValueColumns = OptimizerUtils.columnMetaListToIColumnList(index.getValueColumns(),\n                table.getTableName());\n        }\n\n        List<IFilter> indexQueryKeyFilters = new LinkedList();\n        List<IFilter> indexQueryValueFilters = new LinkedList();\n        List<IFilter> resultFilters = new LinkedList(DNFNode);\n        for (int i = 0; i < indexKeyColumns.size(); i++) {\n            // \u4e0d\u7b49\u4e8e,is null, is not null, like \u5e94\u8be5\u6309\u7167valueFilter\u5904\u7406\n            List<IFilter> fs = columnAndItsFilters.get(indexKeyColumns.get(i));\n            if (fs != null) {\n                for (IFilter f : fs) {\n                    // filter\u53f3\u8fb9\u4e0d\u662f\u5e38\u91cf\u7684\uff0c\u4e0d\u80fd\u8d70\u7d22\u5f15\n                    if (((IBooleanFilter) f).getValue() != null\n                        && (((IBooleanFilter) f).getValue() instanceof ISelectable)) {\n                        continue;\n                    }\n\n                    if (f != null && f.getOperation() != OPERATION.NOT_EQ && f.getOperation() != OPERATION.IS_NOT_NULL\n                        && f.getOperation() != OPERATION.IS_NULL && f.getOperation() != OPERATION.LIKE) {\n                        indexQueryKeyFilters.add(f);\n                    } else {\n                        indexQueryValueFilters.add(f);\n                    }\n                }\n                fs.clear();\n            }\n        }\n\n        for (int i = 0; i < indexValueColumns.size(); i++) {\n            // \u4e0d\u7b49\u4e8e,is null, is not null, like \u5e94\u8be5\u6309\u7167valueFilter\u5904\u7406\n            List<IFilter> fs = columnAndItsFilters.get(indexValueColumns.get(i));\n            if (fs != null) {\n                for (IFilter f : fs) {\n                    // filter\u53f3\u8fb9\u4e0d\u662f\u5e38\u91cf\u7684\uff0c\u4e0d\u80fd\u8d70\u7d22\u5f15\n                    if (((IBooleanFilter) f).getValue() != null\n                        && (((IBooleanFilter) f).getValue() instanceof ISelectable)) {\n                        continue;\n                    }\n\n                    indexQueryValueFilters.add(f);\n                }\n                fs.clear();\n            }\n\n        }\n        resultFilters.removeAll(indexQueryKeyFilters);\n        resultFilters.removeAll(indexQueryValueFilters);\n\n        IFilter indexQueryKeyTree = FilterUtils.DNFToAndLogicTree(indexQueryKeyFilters);\n        IFilter indexQueryValueTree = FilterUtils.DNFToAndLogicTree(indexQueryValueFilters);\n        IFilter resultTree = FilterUtils.DNFToAndLogicTree(resultFilters);\n        filters.put(FilterType.IndexQueryKeyFilter, indexQueryKeyTree);\n        filters.put(FilterType.IndexQueryValueFilter, indexQueryValueTree);\n        filters.put(FilterType.ResultFilter, resultTree);\n        return filters;\n    }", "signature": "Map<FilterType, IFilter> splitByIndex(List<IFilter> DNFNode, TableNode table)", "full_signature": "public static Map<FilterType, IFilter> splitByIndex(List<IFilter> DNFNode, TableNode table)", "class_method_signature": "FilterSpliter.splitByIndex(List<IFilter> DNFNode, TableNode table)", "testcase": false, "constructor": false, "invocations": ["toColumnFiltersMap", "getIndexUsed", "getPrimaryIndex", "getTableMeta", "columnMetaListToIColumnList", "getKeyColumns", "getTableName", "columnMetaListToIColumnList", "getValueColumns", "getTableName", "size", "get", "get", "getValue", "getValue", "getOperation", "getOperation", "getOperation", "getOperation", "add", "add", "clear", "size", "get", "get", "getValue", "getValue", "add", "clear", "removeAll", "removeAll", "DNFToAndLogicTree", "DNFToAndLogicTree", "DNFToAndLogicTree", "put", "put", "put"]}, "repository": {"repo_id": 16945217, "url": "https://github.com/cpsing/tddl", "language": "Java", "is_fork": false, "fork_count": 126, "stargazer_count": 31, "size": 3247, "license": "licensed"}}