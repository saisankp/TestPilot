{"test_class": {"identifier": "PdfVersionValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PdfVersionValidator victim = new PdfVersionValidator();", "modifier": "private", "type": "PdfVersionValidator", "declarator": "victim = new PdfVersionValidator()", "var_name": "victim"}, {"original_string": "private AbstractPdfOutputParameters params;", "modifier": "private", "type": "AbstractPdfOutputParameters", "declarator": "params", "var_name": "params"}], "file": "sejda-model/src/test/java/org/sejda/model/validation/validator/PdfVersionValidatorTest.java"}, "test_case": {"identifier": "testInvalidValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidValue() {\n        ConstraintValidatorContext context = mock(ConstraintValidatorContext.class);\n        ConstraintViolationBuilder builder = mock(ConstraintViolationBuilder.class);\n        when(context.buildConstraintViolationWithTemplate(anyString())).thenReturn(builder);\n        NodeBuilderDefinedContext nodeBuilderContext = mock(NodeBuilderDefinedContext.class);\n        when(builder.addNode(anyString())).thenReturn(nodeBuilderContext);\n        when(params.getVersion()).thenReturn(PdfVersion.VERSION_1_2);\n        when(params.getMinRequiredPdfVersion()).thenReturn(PdfVersion.VERSION_1_5);\n        assertFalse(victim.isValid(params, context));\n        verify(context).buildConstraintViolationWithTemplate(anyString());\n    }", "signature": "void testInvalidValue()", "full_signature": "@Test public void testInvalidValue()", "class_method_signature": "PdfVersionValidatorTest.testInvalidValue()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "buildConstraintViolationWithTemplate", "anyString", "mock", "thenReturn", "when", "addNode", "anyString", "thenReturn", "when", "getVersion", "thenReturn", "when", "getMinRequiredPdfVersion", "assertFalse", "isValid", "buildConstraintViolationWithTemplate", "verify", "anyString"]}, "focal_class": {"identifier": "PdfVersionValidator", "superclass": "", "interfaces": "implements ConstraintValidator<ValidPdfVersion, AbstractPdfOutputParameters>", "fields": [], "methods": [{"identifier": "initialize", "parameters": "(ValidPdfVersion constraintAnnotation)", "modifiers": "@Override public", "return": "void", "signature": "void initialize(ValidPdfVersion constraintAnnotation)", "full_signature": "@Override public void initialize(ValidPdfVersion constraintAnnotation)", "class_method_signature": "PdfVersionValidator.initialize(ValidPdfVersion constraintAnnotation)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "class_method_signature": "PdfVersionValidator.isValid(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/validation/validator/PdfVersionValidator.java"}, "focal_method": {"identifier": "isValid", "parameters": "(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isValid(AbstractPdfOutputParameters value, ConstraintValidatorContext context) {\n        boolean isValid = value == null || value.getVersion() == null\n                || value.getVersion().compareTo(value.getMinRequiredPdfVersion()) >= 0;\n        if (!isValid) {\n            context.disableDefaultConstraintViolation();\n            context.buildConstraintViolationWithTemplate(\n                    String.format(\"Invalid version %s. Minimum version required is %s.\", value.getVersion(),\n                            value.getMinRequiredPdfVersion())).addNode(\"parameters\").addConstraintViolation();\n        }\n        return isValid;\n    }", "signature": "boolean isValid(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "full_signature": "@Override public boolean isValid(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "class_method_signature": "PdfVersionValidator.isValid(AbstractPdfOutputParameters value, ConstraintValidatorContext context)", "testcase": false, "constructor": false, "invocations": ["getVersion", "compareTo", "getVersion", "getMinRequiredPdfVersion", "disableDefaultConstraintViolation", "addConstraintViolation", "addNode", "buildConstraintViolationWithTemplate", "format", "getVersion", "getMinRequiredPdfVersion"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}