{"test_class": {"identifier": "UidGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UidGenerator subject;", "modifier": "private", "type": "UidGenerator", "declarator": "subject", "var_name": "subject"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/context/UidGeneratorTest.java"}, "test_case": {"identifier": "verifyEventsGetUidAssigned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyEventsGetUidAssigned()\n    {\n        final String uid = CodeGenerator.generateUid();\n        // Given\n\n        Event event1 = new Event();\n        Event event2 = new Event();\n        Event event3 = new Event();\n        Event event4 = new Event();\n        event4.setEvent( uid );\n\n        // When\n        List<Event> events = subject.assignUidToEvents( Lists.newArrayList( event1, event2, event3, event4 ) );\n\n        // Then\n        assertThat( events, hasSize( 4 ) );\n        events.forEach( e -> assertNotNull( e.getUid() ) );\n        // make sure we got 4 distinct UIDs\n        assertThat( events.stream().collect( Collectors.toMap( Event::getUid, Function.identity() ) ).keySet(),\n            hasSize( 4 ) );\n        // make sure Event4 has retained the original UID\n        assertThat( event4.getUid(), is( uid ) );\n        assertThat( event4.getEvent(), is( uid ) );\n    }", "signature": "void verifyEventsGetUidAssigned()", "full_signature": "@Test public void verifyEventsGetUidAssigned()", "class_method_signature": "UidGeneratorTest.verifyEventsGetUidAssigned()", "testcase": true, "constructor": false, "invocations": ["generateUid", "setEvent", "assignUidToEvents", "newArrayList", "assertThat", "hasSize", "forEach", "assertNotNull", "getUid", "assertThat", "keySet", "collect", "stream", "toMap", "identity", "hasSize", "assertThat", "getUid", "is", "assertThat", "getEvent", "is"]}, "focal_class": {"identifier": "UidGenerator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "assignUidToEvents", "parameters": "(List<Event> events )", "modifiers": "public", "return": "List<Event>", "signature": "List<Event> assignUidToEvents(List<Event> events )", "full_signature": "public List<Event> assignUidToEvents(List<Event> events )", "class_method_signature": "UidGenerator.assignUidToEvents(List<Event> events )", "testcase": false, "constructor": false}, {"identifier": "assignUidToEvent", "parameters": "( Event event )", "modifiers": "public", "return": "Event", "signature": "Event assignUidToEvent( Event event )", "full_signature": "public Event assignUidToEvent( Event event )", "class_method_signature": "UidGenerator.assignUidToEvent( Event event )", "testcase": false, "constructor": false}, {"identifier": "doAssignUid", "parameters": "( Event event )", "modifiers": "private", "return": "void", "signature": "void doAssignUid( Event event )", "full_signature": "private void doAssignUid( Event event )", "class_method_signature": "UidGenerator.doAssignUid( Event event )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/context/UidGenerator.java"}, "focal_method": {"identifier": "assignUidToEvents", "parameters": "(List<Event> events )", "modifiers": "public", "return": "List<Event>", "body": "public List<Event> assignUidToEvents(List<Event> events )\n    {\n        for ( Event event : events )\n        {\n            doAssignUid( event );\n        }\n        return events;\n    }", "signature": "List<Event> assignUidToEvents(List<Event> events )", "full_signature": "public List<Event> assignUidToEvents(List<Event> events )", "class_method_signature": "UidGenerator.assignUidToEvents(List<Event> events )", "testcase": false, "constructor": false, "invocations": ["doAssignUid"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}