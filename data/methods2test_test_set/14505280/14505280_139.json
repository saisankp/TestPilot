{"test_class": {"identifier": "RefreshConfigurationCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "@Autowired\n\tprivate TestRecorder recorder;", "modifier": "@Autowired\n\tprivate", "type": "TestRecorder", "declarator": "recorder", "var_name": "recorder"}], "file": "command/src/test/java/org/geomajas/command/configuration/RefreshConfigurationCommandTest.java"}, "test_case": {"identifier": "testRefreshConfiguration", "parameters": "()", "modifiers": "@Test @DirtiesContext public", "return": "void", "body": "@Test\n\t@DirtiesContext\n\tpublic void testRefreshConfiguration() throws Exception {\n\t\tAssert.assertEquals(\"\", recorder.matches(\"test\", \"postConstruct\"));\n\t\trecorder.clear();\n\n\t\tRefreshConfigurationRequest request = new RefreshConfigurationRequest();\n\t\trequest.setConfigLocations(new String[] {});\n\t\tRefreshConfigurationResponse response = (RefreshConfigurationResponse) dispatcher.execute(\n\t\t\t\tRefreshConfigurationRequest.COMMAND, request, null, \"en\");\n\t\t/* @todo test commented because test runner does not build a ReconfigurableApplicationContext\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tAssert.assertEquals(\"\", recorder.matches(\"test\", \"postConstruct\"));\n\t\t*/\n\t}", "signature": "void testRefreshConfiguration()", "full_signature": "@Test @DirtiesContext public void testRefreshConfiguration()", "class_method_signature": "RefreshConfigurationCommandTest.testRefreshConfiguration()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "matches", "clear", "setConfigLocations", "execute"]}, "focal_class": {"identifier": "RefreshConfigurationCommand", "superclass": "", "interfaces": "implements CommandHasRequest<RefreshConfigurationRequest, RefreshConfigurationResponse>", "fields": [{"original_string": "@Autowired\n\tprivate ApplicationContext context;", "modifier": "@Autowired\n\tprivate", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(RefreshConfigurationCommand.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RefreshConfigurationCommand.class)", "var_name": "log"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "RefreshConfigurationRequest", "signature": "RefreshConfigurationRequest getEmptyCommandRequest()", "full_signature": "@Override public RefreshConfigurationRequest getEmptyCommandRequest()", "class_method_signature": "RefreshConfigurationCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "RefreshConfigurationResponse", "signature": "RefreshConfigurationResponse getEmptyCommandResponse()", "full_signature": "@Override public RefreshConfigurationResponse getEmptyCommandResponse()", "class_method_signature": "RefreshConfigurationCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "full_signature": "@Override public void execute(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "class_method_signature": "RefreshConfigurationCommand.execute(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/configuration/RefreshConfigurationCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(RefreshConfigurationRequest request, RefreshConfigurationResponse response) throws Exception {\n\t\tif (context instanceof ReconfigurableApplicationContext) {\n\t\t\tReconfigurableApplicationContext rollback = (ReconfigurableApplicationContext) context;\n\t\t\tif (request.getConfigLocations() != null) {\n\t\t\t\tArrayList<String> configLocations = new ArrayList<String>();\n\t\t\t\tconfigLocations.add(\"org/geomajas/spring/geomajasContext.xml\");\n\n\t\t\t\tconfigLocations.addAll(Arrays.asList(request.getConfigLocations()));\n\t\t\t\ttry {\n\t\t\t\t\trollback.refresh(configLocations.toArray(new String[configLocations.size()]));\n\t\t\t\t} catch (GeomajasException e) {\n\t\t\t\t\tlog.error(\"Could not refresh context\", e);\n\t\t\t\t\trollback.rollback();\n\t\t\t\t\tresponse.setApplicationNames(context.getBeanNamesForType(ClientApplicationInfo.class));\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t\tresponse.setApplicationNames(context.getBeanNamesForType(ClientApplicationInfo.class));\n\t\t\t}\n\t\t} else {\n\t\t\tresponse.setApplicationNames(context.getBeanNamesForType(ClientApplicationInfo.class));\n\t\t\tthrow new GeomajasException(ExceptionCode.REFRESH_CONFIGURATION_FAILED);\n\t\t}\n\t}", "signature": "void execute(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "full_signature": "@Override public void execute(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "class_method_signature": "RefreshConfigurationCommand.execute(RefreshConfigurationRequest request, RefreshConfigurationResponse response)", "testcase": false, "constructor": false, "invocations": ["getConfigLocations", "add", "addAll", "asList", "getConfigLocations", "refresh", "toArray", "size", "error", "rollback", "setApplicationNames", "getBeanNamesForType", "setApplicationNames", "getBeanNamesForType", "setApplicationNames", "getBeanNamesForType"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}