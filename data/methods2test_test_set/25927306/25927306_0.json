{"test_class": {"identifier": "BeanGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "beans/src/test/java/org/ldaptive/beans/generate/BeanGeneratorTest.java"}, "test_case": {"identifier": "generate", "parameters": "(final Schema schema, final String packageName, final String[] objectClasses)", "modifiers": "@Test(groups = \"beans\", dataProvider = \"schemas\") public", "return": "void", "body": "@Test(groups = \"beans\", dataProvider = \"schemas\")\n  public void generate(final Schema schema, final String packageName, final String[] objectClasses)\n    throws Exception\n  {\n    final BeanGenerator generator = new BeanGenerator();\n    generator.setSchema(schema);\n    generator.setObjectClasses(objectClasses);\n    generator.setPackageName(packageName);\n    generator.setUseOperationalAttributes(true);\n    generator.setUseOptionalAttributes(true);\n    generator.setIncludeSuperiorClasses(true);\n    generator.generate();\n    generator.write(\"target/generated-test-sources/ldaptive\");\n  }", "signature": "void generate(final Schema schema, final String packageName, final String[] objectClasses)", "full_signature": "@Test(groups = \"beans\", dataProvider = \"schemas\") public void generate(final Schema schema, final String packageName, final String[] objectClasses)", "class_method_signature": "BeanGeneratorTest.generate(final Schema schema, final String packageName, final String[] objectClasses)", "testcase": true, "constructor": false, "invocations": ["setSchema", "setObjectClasses", "setPackageName", "setUseOperationalAttributes", "setUseOptionalAttributes", "setIncludeSuperiorClasses", "generate", "write"]}, "focal_class": {"identifier": "BeanGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JCodeModel codeModel = new JCodeModel();", "modifier": "private final", "type": "JCodeModel", "declarator": "codeModel = new JCodeModel()", "var_name": "codeModel"}, {"original_string": "private Schema schema;", "modifier": "private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private String packageName;", "modifier": "private", "type": "String", "declarator": "packageName", "var_name": "packageName"}, {"original_string": "private String[] objectClasses;", "modifier": "private", "type": "String[]", "declarator": "objectClasses", "var_name": "objectClasses"}, {"original_string": "private boolean useOptionalAttributes = true;", "modifier": "private", "type": "boolean", "declarator": "useOptionalAttributes = true", "var_name": "useOptionalAttributes"}, {"original_string": "private boolean useOperationalAttributes;", "modifier": "private", "type": "boolean", "declarator": "useOperationalAttributes", "var_name": "useOperationalAttributes"}, {"original_string": "private boolean includeSuperiorClasses;", "modifier": "private", "type": "boolean", "declarator": "includeSuperiorClasses", "var_name": "includeSuperiorClasses"}, {"original_string": "private Map<String, Class<?>> typeMappings = getDefaultTypeMappings();", "modifier": "private", "type": "Map<String, Class<?>>", "declarator": "typeMappings = getDefaultTypeMappings()", "var_name": "typeMappings"}, {"original_string": "private Map<String, String> nameMappings = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "nameMappings = new HashMap<>()", "var_name": "nameMappings"}, {"original_string": "private String[] excludedNames = new String[0];", "modifier": "private", "type": "String[]", "declarator": "excludedNames = new String[0]", "var_name": "excludedNames"}], "methods": [{"identifier": "BeanGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " BeanGenerator()", "full_signature": "public  BeanGenerator()", "class_method_signature": "BeanGenerator.BeanGenerator()", "testcase": false, "constructor": true}, {"identifier": "BeanGenerator", "parameters": "(final Schema s, final String name, final String[] oc)", "modifiers": "public", "return": "", "signature": " BeanGenerator(final Schema s, final String name, final String[] oc)", "full_signature": "public  BeanGenerator(final Schema s, final String name, final String[] oc)", "class_method_signature": "BeanGenerator.BeanGenerator(final Schema s, final String name, final String[] oc)", "testcase": false, "constructor": true}, {"identifier": "getSchema", "parameters": "()", "modifiers": "public", "return": "Schema", "signature": "Schema getSchema()", "full_signature": "public Schema getSchema()", "class_method_signature": "BeanGenerator.getSchema()", "testcase": false, "constructor": false}, {"identifier": "setSchema", "parameters": "(final Schema s)", "modifiers": "public", "return": "void", "signature": "void setSchema(final Schema s)", "full_signature": "public void setSchema(final Schema s)", "class_method_signature": "BeanGenerator.setSchema(final Schema s)", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPackageName()", "full_signature": "public String getPackageName()", "class_method_signature": "BeanGenerator.getPackageName()", "testcase": false, "constructor": false}, {"identifier": "setPackageName", "parameters": "(final String name)", "modifiers": "public", "return": "void", "signature": "void setPackageName(final String name)", "full_signature": "public void setPackageName(final String name)", "class_method_signature": "BeanGenerator.setPackageName(final String name)", "testcase": false, "constructor": false}, {"identifier": "getObjectClasses", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getObjectClasses()", "full_signature": "public String[] getObjectClasses()", "class_method_signature": "BeanGenerator.getObjectClasses()", "testcase": false, "constructor": false}, {"identifier": "setObjectClasses", "parameters": "(final String... oc)", "modifiers": "public", "return": "void", "signature": "void setObjectClasses(final String... oc)", "full_signature": "public void setObjectClasses(final String... oc)", "class_method_signature": "BeanGenerator.setObjectClasses(final String... oc)", "testcase": false, "constructor": false}, {"identifier": "isUseOptionalAttributes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUseOptionalAttributes()", "full_signature": "public boolean isUseOptionalAttributes()", "class_method_signature": "BeanGenerator.isUseOptionalAttributes()", "testcase": false, "constructor": false}, {"identifier": "setUseOptionalAttributes", "parameters": "(final boolean b)", "modifiers": "public", "return": "void", "signature": "void setUseOptionalAttributes(final boolean b)", "full_signature": "public void setUseOptionalAttributes(final boolean b)", "class_method_signature": "BeanGenerator.setUseOptionalAttributes(final boolean b)", "testcase": false, "constructor": false}, {"identifier": "isUseOperationalAttributes", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUseOperationalAttributes()", "full_signature": "public boolean isUseOperationalAttributes()", "class_method_signature": "BeanGenerator.isUseOperationalAttributes()", "testcase": false, "constructor": false}, {"identifier": "setUseOperationalAttributes", "parameters": "(final boolean b)", "modifiers": "public", "return": "void", "signature": "void setUseOperationalAttributes(final boolean b)", "full_signature": "public void setUseOperationalAttributes(final boolean b)", "class_method_signature": "BeanGenerator.setUseOperationalAttributes(final boolean b)", "testcase": false, "constructor": false}, {"identifier": "isIncludeSuperiorClasses", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIncludeSuperiorClasses()", "full_signature": "public boolean isIncludeSuperiorClasses()", "class_method_signature": "BeanGenerator.isIncludeSuperiorClasses()", "testcase": false, "constructor": false}, {"identifier": "setIncludeSuperiorClasses", "parameters": "(final boolean b)", "modifiers": "public", "return": "void", "signature": "void setIncludeSuperiorClasses(final boolean b)", "full_signature": "public void setIncludeSuperiorClasses(final boolean b)", "class_method_signature": "BeanGenerator.setIncludeSuperiorClasses(final boolean b)", "testcase": false, "constructor": false}, {"identifier": "getTypeMappings", "parameters": "()", "modifiers": "public", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> getTypeMappings()", "full_signature": "public Map<String, Class<?>> getTypeMappings()", "class_method_signature": "BeanGenerator.getTypeMappings()", "testcase": false, "constructor": false}, {"identifier": "setTypeMappings", "parameters": "(final Map<String, Class<?>> m)", "modifiers": "public", "return": "void", "signature": "void setTypeMappings(final Map<String, Class<?>> m)", "full_signature": "public void setTypeMappings(final Map<String, Class<?>> m)", "class_method_signature": "BeanGenerator.setTypeMappings(final Map<String, Class<?>> m)", "testcase": false, "constructor": false}, {"identifier": "getNameMappings", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getNameMappings()", "full_signature": "public Map<String, String> getNameMappings()", "class_method_signature": "BeanGenerator.getNameMappings()", "testcase": false, "constructor": false}, {"identifier": "setNameMappings", "parameters": "(final Map<String, String> m)", "modifiers": "public", "return": "void", "signature": "void setNameMappings(final Map<String, String> m)", "full_signature": "public void setNameMappings(final Map<String, String> m)", "class_method_signature": "BeanGenerator.setNameMappings(final Map<String, String> m)", "testcase": false, "constructor": false}, {"identifier": "getExcludedNames", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getExcludedNames()", "full_signature": "public String[] getExcludedNames()", "class_method_signature": "BeanGenerator.getExcludedNames()", "testcase": false, "constructor": false}, {"identifier": "setExcludedNames", "parameters": "(final String... names)", "modifiers": "public", "return": "void", "signature": "void setExcludedNames(final String... names)", "full_signature": "public void setExcludedNames(final String... names)", "class_method_signature": "BeanGenerator.setExcludedNames(final String... names)", "testcase": false, "constructor": false}, {"identifier": "getDefaultTypeMappings", "parameters": "()", "modifiers": "protected static", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> getDefaultTypeMappings()", "full_signature": "protected static Map<String, Class<?>> getDefaultTypeMappings()", "class_method_signature": "BeanGenerator.getDefaultTypeMappings()", "testcase": false, "constructor": false}, {"identifier": "getSyntaxType", "parameters": "(final AttributeType type, final Syntax syntax)", "modifiers": "protected", "return": "Class<?>", "signature": "Class<?> getSyntaxType(final AttributeType type, final Syntax syntax)", "full_signature": "protected Class<?> getSyntaxType(final AttributeType type, final Syntax syntax)", "class_method_signature": "BeanGenerator.getSyntaxType(final AttributeType type, final Syntax syntax)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void generate()", "full_signature": "public void generate()", "class_method_signature": "BeanGenerator.generate()", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "(final ObjectClass objectClass)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAttributeNames(final ObjectClass objectClass)", "full_signature": "private Set<String> getAttributeNames(final ObjectClass objectClass)", "class_method_signature": "BeanGenerator.getAttributeNames(final ObjectClass objectClass)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "(final ObjectClass objectClass, final Set<ObjectClass> processed)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAttributeNames(final ObjectClass objectClass, final Set<ObjectClass> processed)", "full_signature": "private Set<String> getAttributeNames(final ObjectClass objectClass, final Set<ObjectClass> processed)", "class_method_signature": "BeanGenerator.getAttributeNames(final ObjectClass objectClass, final Set<ObjectClass> processed)", "testcase": false, "constructor": false}, {"identifier": "formatAttributeName", "parameters": "(final String name)", "modifiers": "private", "return": "String", "signature": "String formatAttributeName(final String name)", "full_signature": "private String formatAttributeName(final String name)", "class_method_signature": "BeanGenerator.formatAttributeName(final String name)", "testcase": false, "constructor": false}, {"identifier": "isNameExcluded", "parameters": "(final AttributeType type)", "modifiers": "private", "return": "boolean", "signature": "boolean isNameExcluded(final AttributeType type)", "full_signature": "private boolean isNameExcluded(final AttributeType type)", "class_method_signature": "BeanGenerator.isNameExcluded(final AttributeType type)", "testcase": false, "constructor": false}, {"identifier": "createClass", "parameters": "(final String classPackage, final String className)", "modifiers": "protected", "return": "JDefinedClass", "signature": "JDefinedClass createClass(final String classPackage, final String className)", "full_signature": "protected JDefinedClass createClass(final String classPackage, final String className)", "class_method_signature": "BeanGenerator.createClass(final String classPackage, final String className)", "testcase": false, "constructor": false}, {"identifier": "createMutators", "parameters": "(\n    final JDefinedClass clazz,\n    final String name,\n    final Class<?> syntaxType,\n    final boolean multivalue)", "modifiers": "protected", "return": "void", "signature": "void createMutators(\n    final JDefinedClass clazz,\n    final String name,\n    final Class<?> syntaxType,\n    final boolean multivalue)", "full_signature": "protected void createMutators(\n    final JDefinedClass clazz,\n    final String name,\n    final Class<?> syntaxType,\n    final boolean multivalue)", "class_method_signature": "BeanGenerator.createMutators(\n    final JDefinedClass clazz,\n    final String name,\n    final Class<?> syntaxType,\n    final boolean multivalue)", "testcase": false, "constructor": false}, {"identifier": "createHashCode", "parameters": "(final JDefinedClass clazz)", "modifiers": "private", "return": "void", "signature": "void createHashCode(final JDefinedClass clazz)", "full_signature": "private void createHashCode(final JDefinedClass clazz)", "class_method_signature": "BeanGenerator.createHashCode(final JDefinedClass clazz)", "testcase": false, "constructor": false}, {"identifier": "createEquals", "parameters": "(final JDefinedClass clazz)", "modifiers": "private", "return": "void", "signature": "void createEquals(final JDefinedClass clazz)", "full_signature": "private void createEquals(final JDefinedClass clazz)", "class_method_signature": "BeanGenerator.createEquals(final JDefinedClass clazz)", "testcase": false, "constructor": false}, {"identifier": "createToString", "parameters": "(final JDefinedClass clazz)", "modifiers": "private", "return": "void", "signature": "void createToString(final JDefinedClass clazz)", "full_signature": "private void createToString(final JDefinedClass clazz)", "class_method_signature": "BeanGenerator.createToString(final JDefinedClass clazz)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void write()", "full_signature": "public void write()", "class_method_signature": "BeanGenerator.write()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final String path)", "modifiers": "public", "return": "void", "signature": "void write(final String path)", "full_signature": "public void write(final String path)", "class_method_signature": "BeanGenerator.write(final String path)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(final String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(final String[] args)", "full_signature": "public static void main(final String[] args)", "class_method_signature": "BeanGenerator.main(final String[] args)", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "BeanGenerator.builder()", "testcase": false, "constructor": false}], "file": "beans/src/main/java/org/ldaptive/beans/generate/BeanGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void generate()\n  {\n    for (String objectClass : objectClasses) {\n      final JDefinedClass definedClass = createClass(packageName, objectClass);\n      final JDocComment jDocComment = definedClass.javadoc();\n      jDocComment.add(String.format(\"Ldaptive generated bean for objectClass '%s'\", objectClass));\n\n      final ObjectClass oc = schema.getObjectClass(objectClass);\n      final Set<String> attributeNames = getAttributeNames(oc);\n      if (useOperationalAttributes) {\n        attributeNames.addAll(\n          schema.getAttributeTypes().stream().filter(\n            type -> AttributeUsage.DIRECTORY_OPERATION.equals(type.getUsage())).map(\n            AttributeType::getName).collect(Collectors.toList()));\n      }\n\n      final Map<String, AttributeType> mutators = new TreeMap<>();\n      for (String name : attributeNames) {\n        final AttributeType type = schema.getAttributeType(name);\n        if (!isNameExcluded(type)) {\n          if (nameMappings.containsKey(type.getName())) {\n            mutators.put(nameMappings.get(type.getName()), type);\n          } else {\n            mutators.put(formatAttributeName(type.getName()), type);\n          }\n        }\n      }\n\n      // add entry annotation\n      final JAnnotationUse entryAnnotation = definedClass.annotate(codeModel.ref(org.ldaptive.beans.Entry.class));\n      entryAnnotation.param(\"dn\", \"dn\");\n\n      final JAnnotationArrayMember attrArray = entryAnnotation.paramArray(\"attributes\");\n\n      // add mutator for the DN\n      createMutators(definedClass, \"dn\", String.class, false);\n\n      // add mutators for each attribute\n      for (Map.Entry<String, AttributeType> mutator : mutators.entrySet()) {\n        final Class<?> syntaxType = getSyntaxType(\n          mutator.getValue(),\n          schema.getSyntax(mutator.getValue().getSyntaxOID(false)));\n        createMutators(definedClass, mutator.getKey(), syntaxType, !mutator.getValue().isSingleValued());\n\n        // add attribute annotation\n        final JAnnotationUse attrAnnotation = attrArray.annotate(org.ldaptive.beans.Attribute.class);\n        attrAnnotation.param(\"name\", mutator.getValue().getName());\n        if (!mutator.getKey().equals(mutator.getValue().getName())) {\n          attrAnnotation.param(\"property\", mutator.getKey());\n        }\n        if (byte[].class.equals(syntaxType)) {\n          attrAnnotation.param(\"binary\", true);\n        }\n      }\n\n      // create additional methods\n      createHashCode(definedClass);\n      createEquals(definedClass);\n      createToString(definedClass);\n    }\n  }", "signature": "void generate()", "full_signature": "public void generate()", "class_method_signature": "BeanGenerator.generate()", "testcase": false, "constructor": false, "invocations": ["createClass", "javadoc", "add", "format", "getObjectClass", "getAttributeNames", "addAll", "collect", "map", "filter", "stream", "getAttributeTypes", "equals", "getUsage", "toList", "getAttributeType", "isNameExcluded", "containsKey", "getName", "put", "get", "getName", "put", "formatAttributeName", "getName", "annotate", "ref", "param", "paramArray", "createMutators", "entrySet", "getSyntaxType", "getValue", "getSyntax", "getSyntaxOID", "getValue", "createMutators", "getKey", "isSingleValued", "getValue", "annotate", "param", "getName", "getValue", "equals", "getKey", "getName", "getValue", "param", "getKey", "equals", "param", "createHashCode", "createEquals", "createToString"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}