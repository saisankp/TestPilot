{"test_class": {"identifier": "EurekaLoadBalancingExchangeFilterFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final InstanceInfo INSTANCE_1 = newInstanceInfo(\"id1\", \"myservice\", \"1.0.0.1\", InstanceInfo.InstanceStatus.UP);", "modifier": "private static final", "type": "InstanceInfo", "declarator": "INSTANCE_1 = newInstanceInfo(\"id1\", \"myservice\", \"1.0.0.1\", InstanceInfo.InstanceStatus.UP)", "var_name": "INSTANCE_1"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.internal();", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.internal()", "var_name": "titusRuntime"}, {"original_string": "private final EurekaServerStub eurekaServer = new EurekaServerStub();", "modifier": "private final", "type": "EurekaServerStub", "declarator": "eurekaServer = new EurekaServerStub()", "var_name": "eurekaServer"}], "file": "titus-ext/eureka/src/test/java/com/netflix/titus/ext/eureka/spring/EurekaLoadBalancingExchangeFilterFunctionTest.java"}, "test_case": {"identifier": "testUriRewrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUriRewrite() throws URISyntaxException {\n        assertThat(rewrite(new URI(\"eureka://myservice:7001\"), INSTANCE_1)).isEqualTo(new URI(\"http://1.0.0.1:7001\"));\n        assertThat(rewrite(new URI(\"eureka://myservice:7001/mypath?k=v\"), INSTANCE_1)).isEqualTo(new URI(\"http://1.0.0.1:7001/mypath?k=v\"));\n        assertThat(rewrite(new URI(\"eureka://myservice:7001?secure=true\"), INSTANCE_1)).isEqualTo(new URI(\"https://1.0.0.1:7001?secure=true\"));\n        assertThat(rewrite(new URI(\"eureka://myservice:7001/mypath?k=v&secure=true\"), INSTANCE_1)).isEqualTo(new URI(\"https://1.0.0.1:7001/mypath?k=v&secure=true\"));\n    }", "signature": "void testUriRewrite()", "full_signature": "@Test public void testUriRewrite()", "class_method_signature": "EurekaLoadBalancingExchangeFilterFunctionTest.testUriRewrite()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "rewrite", "isEqualTo", "assertThat", "rewrite", "isEqualTo", "assertThat", "rewrite", "isEqualTo", "assertThat", "rewrite"]}, "focal_class": {"identifier": "EurekaLoadBalancingExchangeFilterFunction", "superclass": "", "interfaces": "implements ExchangeFilterFunction", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(EurekaLoadBalancingExchangeFilterFunction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EurekaLoadBalancingExchangeFilterFunction.class)", "var_name": "logger"}, {"original_string": "private static final String EUREKA_SCHEMA = \"eureka\";", "modifier": "private static final", "type": "String", "declarator": "EUREKA_SCHEMA = \"eureka\"", "var_name": "EUREKA_SCHEMA"}, {"original_string": "private final EurekaLoadBalancer loadBalancer;", "modifier": "private final", "type": "EurekaLoadBalancer", "declarator": "loadBalancer", "var_name": "loadBalancer"}], "methods": [{"identifier": "EurekaLoadBalancingExchangeFilterFunction", "parameters": "(EurekaClient eurekaClient,\n                                                     Function<URI, String> vipExtractor,\n                                                     TitusRuntime titusRuntime)", "modifiers": "public", "return": "", "signature": " EurekaLoadBalancingExchangeFilterFunction(EurekaClient eurekaClient,\n                                                     Function<URI, String> vipExtractor,\n                                                     TitusRuntime titusRuntime)", "full_signature": "public  EurekaLoadBalancingExchangeFilterFunction(EurekaClient eurekaClient,\n                                                     Function<URI, String> vipExtractor,\n                                                     TitusRuntime titusRuntime)", "class_method_signature": "EurekaLoadBalancingExchangeFilterFunction.EurekaLoadBalancingExchangeFilterFunction(EurekaClient eurekaClient,\n                                                     Function<URI, String> vipExtractor,\n                                                     TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(ClientRequest request, ExchangeFunction next)", "modifiers": "@Override public", "return": "Mono<ClientResponse>", "signature": "Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)", "full_signature": "@Override public Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)", "class_method_signature": "EurekaLoadBalancingExchangeFilterFunction.filter(ClientRequest request, ExchangeFunction next)", "testcase": false, "constructor": false}, {"identifier": "doExecute", "parameters": "(InstanceInfo instance, ClientRequest request, ExchangeFunction next)", "modifiers": "private", "return": "Mono<ClientResponse>", "signature": "Mono<ClientResponse> doExecute(InstanceInfo instance, ClientRequest request, ExchangeFunction next)", "full_signature": "private Mono<ClientResponse> doExecute(InstanceInfo instance, ClientRequest request, ExchangeFunction next)", "class_method_signature": "EurekaLoadBalancingExchangeFilterFunction.doExecute(InstanceInfo instance, ClientRequest request, ExchangeFunction next)", "testcase": false, "constructor": false}, {"identifier": "doFailOnNoInstance", "parameters": "(URI eurekaUri)", "modifiers": "private", "return": "Mono<ClientResponse>", "signature": "Mono<ClientResponse> doFailOnNoInstance(URI eurekaUri)", "full_signature": "private Mono<ClientResponse> doFailOnNoInstance(URI eurekaUri)", "class_method_signature": "EurekaLoadBalancingExchangeFilterFunction.doFailOnNoInstance(URI eurekaUri)", "testcase": false, "constructor": false}, {"identifier": "rewrite", "parameters": "(URI original, InstanceInfo instance)", "modifiers": "@VisibleForTesting static", "return": "URI", "signature": "URI rewrite(URI original, InstanceInfo instance)", "full_signature": "@VisibleForTesting static URI rewrite(URI original, InstanceInfo instance)", "class_method_signature": "EurekaLoadBalancingExchangeFilterFunction.rewrite(URI original, InstanceInfo instance)", "testcase": false, "constructor": false}], "file": "titus-ext/eureka/src/main/java/com/netflix/titus/ext/eureka/spring/EurekaLoadBalancingExchangeFilterFunction.java"}, "focal_method": {"identifier": "rewrite", "parameters": "(URI original, InstanceInfo instance)", "modifiers": "@VisibleForTesting static", "return": "URI", "body": "@VisibleForTesting\n    static URI rewrite(URI original, InstanceInfo instance) {\n        URI effectiveUri;\n        if (original.getScheme().equals(EUREKA_SCHEMA)) {\n            boolean secure = StringExt.isNotEmpty(original.getQuery()) && asList(original.getQuery().split(\"&\")).contains(\"secure=true\");\n            try {\n                effectiveUri = new URI((secure ? \"https\" : \"http\") + original.toString().substring(EUREKA_SCHEMA.length()));\n            } catch (URISyntaxException e) {\n                effectiveUri = original;\n            }\n        } else {\n            effectiveUri = original;\n        }\n        return UriBuilder.fromUri(effectiveUri).host(instance.getIPAddr()).build();\n    }", "signature": "URI rewrite(URI original, InstanceInfo instance)", "full_signature": "@VisibleForTesting static URI rewrite(URI original, InstanceInfo instance)", "class_method_signature": "EurekaLoadBalancingExchangeFilterFunction.rewrite(URI original, InstanceInfo instance)", "testcase": false, "constructor": false, "invocations": ["equals", "getScheme", "isNotEmpty", "getQuery", "contains", "asList", "split", "getQuery", "substring", "toString", "length", "build", "host", "fromUri", "getIPAddr"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}