{"test_class": {"identifier": "CancelStageFactoryTest", "superclass": "extends StageTestBase", "interfaces": "", "fields": [{"original_string": "private final CancelStageFactory factory = new CancelStageFactory();", "modifier": "private final", "type": "CancelStageFactory", "declarator": "factory = new CancelStageFactory()", "var_name": "factory"}], "file": "implementation/src/test/java/io/smallrye/reactive/streams/stages/CancelStageFactoryTest.java"}, "test_case": {"identifier": "create", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void create() throws ExecutionException, InterruptedException {\n        TerminalStage<Long, Void> terminal = factory.create(null, new Stage.Cancel() {\n        });\n        AtomicBoolean cancelled = new AtomicBoolean();\n        List<Long> list = new ArrayList<>();\n        Flowable<Long> flowable = Flowable.interval(1000, TimeUnit.MILLISECONDS)\n                .observeOn(Schedulers.io())\n                .doOnNext(list::add)\n                .doOnCancel(() -> cancelled.set(true));\n        CompletionStage<Void> stage = terminal.apply(flowable);\n        stage.toCompletableFuture().get();\n\n        await().untilAtomic(cancelled, is(true));\n        assertThat(list).isEmpty();\n        assertThat(cancelled).isTrue();\n    }", "signature": "void create()", "full_signature": "@Test public void create()", "class_method_signature": "CancelStageFactoryTest.create()", "testcase": true, "constructor": false, "invocations": ["create", "doOnCancel", "doOnNext", "observeOn", "interval", "io", "set", "apply", "get", "toCompletableFuture", "untilAtomic", "await", "is", "isEmpty", "assertThat", "isTrue", "assertThat"]}, "focal_class": {"identifier": "CancelStageFactory", "superclass": "", "interfaces": "implements TerminalStageFactory<Stage.Cancel>", "fields": [], "methods": [{"identifier": "create", "parameters": "(Engine engine, Stage.Cancel stage)", "modifiers": "@Override public", "return": "TerminalStage<I, O>", "signature": "TerminalStage<I, O> create(Engine engine, Stage.Cancel stage)", "full_signature": "@Override public TerminalStage<I, O> create(Engine engine, Stage.Cancel stage)", "class_method_signature": "CancelStageFactory.create(Engine engine, Stage.Cancel stage)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/stages/CancelStageFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Engine engine, Stage.Cancel stage)", "modifiers": "@Override public", "return": "TerminalStage<I, O>", "body": "@Override\n    public <I, O> TerminalStage<I, O> create(Engine engine, Stage.Cancel stage) {\n        Objects.requireNonNull(stage);\n        return (Flowable<I> flow) -> {\n            flow.subscribe(new Subscriber<I>() {\n\n                @Override\n                public void onSubscribe(Subscription s) {\n                    s.cancel();\n                }\n\n                @Override\n                public void onNext(I in) {\n                    // Do nothing.\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    // Do nothing.\n                }\n\n                @Override\n                public void onComplete() {\n                    // Do nothing.\n                }\n            });\n            return CompletableFuture.completedFuture(null);\n        };\n    }", "signature": "TerminalStage<I, O> create(Engine engine, Stage.Cancel stage)", "full_signature": "@Override public TerminalStage<I, O> create(Engine engine, Stage.Cancel stage)", "class_method_signature": "CancelStageFactory.create(Engine engine, Stage.Cancel stage)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "subscribe", "cancel", "completedFuture"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}