{"test_class": {"identifier": "PathsTest", "superclass": "extends ProgressCheckTestBase", "interfaces": "", "fields": [{"original_string": "private static final Rule denyEtc = new Rule(RuleType.DENY, Pattern.compile(\"/etc(/.*)?\"));", "modifier": "private static final", "type": "Rule", "declarator": "denyEtc = new Rule(RuleType.DENY, Pattern.compile(\"/etc(/.*)?\"))", "var_name": "denyEtc"}], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/PathsTest.java"}, "test_case": {"identifier": "testBadSeverity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBadSeverity() throws Exception {\n        TestUtil.testBlock(() -> {\n            boolean threw = false;\n            try {\n                ProgressCheck check = new Paths().newInstance(key(\"severity\", \"whoops\").key(\"rules\", arr(denyEtc)).get());\n            } catch (IllegalArgumentException e) {\n                threw = true;\n            }\n            assertTrue(\"bad severity should cause exception on construction.\", threw);\n        });\n    }", "signature": "void testBadSeverity()", "full_signature": "@Test public void testBadSeverity()", "class_method_signature": "PathsTest.testBadSeverity()", "testcase": true, "constructor": false, "invocations": ["testBlock", "newInstance", "get", "key", "key", "arr", "assertTrue"]}, "focal_class": {"identifier": "Paths", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String rules() {\n            return \"rules\";\n        }\n\n        @Override\n        public String denyAllDeletes() {\n            return \"denyAllDeletes\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String rules() {\n            return \"rules\";\n        }\n\n        @Override\n        public String denyAllDeletes() {\n            return \"denyAllDeletes\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_RULES = keys().rules();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_RULES = keys().rules()", "var_name": "CONFIG_RULES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_DENY_ALL_DELETES = keys().denyAllDeletes();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_DENY_ALL_DELETES = keys().denyAllDeletes()", "var_name": "CONFIG_DENY_ALL_DELETES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_SEVERITY = keys().severity();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_SEVERITY = keys().severity()", "var_name": "CONFIG_SEVERITY"}, {"original_string": "public static final Severity DEFAULT_SEVERITY = Severity.MAJOR;", "modifier": "public static final", "type": "Severity", "declarator": "DEFAULT_SEVERITY = Severity.MAJOR", "var_name": "DEFAULT_SEVERITY"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "Paths.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "Paths.newInstance(final JsonObject config)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/Paths.java"}, "focal_method": {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "body": "@Override\n    public ProgressCheck newInstance(final JsonObject config) {\n        List<Rule> rules = Rules.fromJsonArray(arrayOrEmpty(config, keys().rules()));\n\n        final boolean denyAllDeletes = hasNonNull(config, keys().denyAllDeletes())\n                && config.getBoolean(keys().denyAllDeletes());\n\n        final Severity severity = Severity.valueOf(\n                config.getString(keys().severity(), DEFAULT_SEVERITY.name()).toUpperCase());\n\n        return new Check(rules, denyAllDeletes, severity);\n    }", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "Paths.newInstance(final JsonObject config)", "testcase": false, "constructor": false, "invocations": ["fromJsonArray", "arrayOrEmpty", "rules", "keys", "hasNonNull", "denyAllDeletes", "keys", "getBoolean", "denyAllDeletes", "keys", "valueOf", "toUpperCase", "getString", "severity", "keys", "name"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}