{"test_class": {"identifier": "PortofolioServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Offset<Double> PERCENT_OFFSET = offset(0.000000000001d);", "modifier": "private static final", "type": "Offset<Double>", "declarator": "PERCENT_OFFSET = offset(0.000000000001d)", "var_name": "PERCENT_OFFSET"}, {"original_string": "@Autowired\n\tprivate PortofolioService portofolioService;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioService", "declarator": "portofolioService", "var_name": "portofolioService"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/portofolio/PortofolioServiceTest.java"}, "test_case": {"identifier": "testGetOrderInfo_withSymbolNotOwned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetOrderInfo_withSymbolNotOwned() {\n\t\tString login = \"seller\";\n\t\tString symbol = GBP;\n\n\t\tOrderInfo info = portofolioService.getOrderInfo(login, symbol, 1);\n\n\t\tassertThat(info.getSelected().getSymbol().getCode()).isEqualTo(symbol);\n\t\tassertThat(info.getSelectedCurrency().getSymbol().getCode()).isEqualTo(EUR);\n\t\tassertThat(info.getGainCost()).isEqualByComparingTo(\"1.2664838478\");\n\t}", "signature": "void testGetOrderInfo_withSymbolNotOwned()", "full_signature": "@Test public void testGetOrderInfo_withSymbolNotOwned()", "class_method_signature": "PortofolioServiceTest.testGetOrderInfo_withSymbolNotOwned()", "testcase": true, "constructor": false, "invocations": ["getOrderInfo", "isEqualTo", "assertThat", "getCode", "getSymbol", "getSelected", "isEqualTo", "assertThat", "getCode", "getSymbol", "getSelectedCurrency", "isEqualByComparingTo", "assertThat", "getGainCost"]}, "focal_class": {"identifier": "PortofolioService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate UserRepository userRepo;", "modifier": "@Autowired\n\tprivate", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}, {"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate SymbolMapper symbolMapper;", "modifier": "@Autowired\n\tprivate", "type": "SymbolMapper", "declarator": "symbolMapper", "var_name": "symbolMapper"}], "methods": [{"identifier": "createPortofolio", "parameters": "(String login, String baseCurrencyCode, int baseCurrencyAmount)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "full_signature": "public Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "class_method_signature": "PortofolioService.createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "testcase": false, "constructor": false}, {"identifier": "getBaseCurrency", "parameters": "(String login)", "modifiers": "public", "return": "AssetInfo", "signature": "AssetInfo getBaseCurrency(String login)", "full_signature": "public AssetInfo getBaseCurrency(String login)", "class_method_signature": "PortofolioService.getBaseCurrency(String login)", "testcase": false, "constructor": false}, {"identifier": "getPortofolio", "parameters": "(String login)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio getPortofolio(String login)", "full_signature": "public Portofolio getPortofolio(String login)", "class_method_signature": "PortofolioService.getPortofolio(String login)", "testcase": false, "constructor": false}, {"identifier": "getAsset", "parameters": "(AssetEntity ae)", "modifiers": "protected", "return": "AssetInfo", "signature": "AssetInfo getAsset(AssetEntity ae)", "full_signature": "protected AssetInfo getAsset(AssetEntity ae)", "class_method_signature": "PortofolioService.getAsset(AssetEntity ae)", "testcase": false, "constructor": false}, {"identifier": "getOrderInfo", "parameters": "(String login, String symbolCode, double quantity)", "modifiers": "public", "return": "OrderInfo", "signature": "OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "full_signature": "public OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "class_method_signature": "PortofolioService.getOrderInfo(String login, String symbolCode, double quantity)", "testcase": false, "constructor": false}, {"identifier": "getAvailableSymbols", "parameters": "(String login)", "modifiers": "public", "return": "List<Symbol>", "signature": "List<Symbol> getAvailableSymbols(String login)", "full_signature": "public List<Symbol> getAvailableSymbols(String login)", "class_method_signature": "PortofolioService.getAvailableSymbols(String login)", "testcase": false, "constructor": false}, {"identifier": "buy", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order buy(String login, String code, double quantity)", "full_signature": "public Order buy(String login, String code, double quantity)", "class_method_signature": "PortofolioService.buy(String login, String code, double quantity)", "testcase": false, "constructor": false}, {"identifier": "sell", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order sell(String login, String code, double quantity)", "full_signature": "public Order sell(String login, String code, double quantity)", "class_method_signature": "PortofolioService.sell(String login, String code, double quantity)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/portofolio/PortofolioService.java"}, "focal_method": {"identifier": "getOrderInfo", "parameters": "(String login, String symbolCode, double quantity)", "modifiers": "public", "return": "OrderInfo", "body": "public OrderInfo getOrderInfo(String login, String symbolCode, double quantity) {\n\n\t\tObjects.requireNonNull(symbolCode, \"symbolCode is null\");\n\n\t\tSymbolEntity selectedSymbol = symbolRepo.findById(symbolCode).get();\n\n\t\tif (selectedSymbol == null) {\n\t\t\tthrow SymbolException.UNKNOWN(symbolCode);\n\t\t}\n\n\t\tPortofolioEntity portofolio = portofolioRepo.findByUserUsername(login);\n\n\t\tAssetEntity selectedAssetEntity = portofolio.getAsset(selectedSymbol.getCode());\n\n\t\tif (selectedAssetEntity == null) {\n\t\t\tselectedAssetEntity = new AssetEntity(portofolio, selectedSymbol, ZERO, portofolio.getCurrencyFor(selectedSymbol), ZERO);\n\t\t}\n\n\t\tString currencyCode = selectedAssetEntity.getCurrency().getCode();\n\n\t\tRate q = rateService.getLatest(selectedSymbol.getCode(), currencyCode);\n\n\t\tAssetInfo selectedAsset = new AssetInfo(selectedAssetEntity.getSymbol(), selectedAssetEntity.getCurrency(),\n\t\t\t\tselectedAssetEntity.getQuantity().doubleValue());\n\n\t\tselectedAsset.setCurrentRate(q.getValue().doubleValue());\n\n\t\tfinal AssetInfo selectedCurrency;\n\n\t\tif (selectedAssetEntity.getCurrency().equals(portofolio.getBaseCurrency())) {\n\t\t\tselectedCurrency = new AssetInfo(portofolio.getBaseCurrency(), null, portofolio.getAmount().doubleValue());\n\t\t} else {\n\t\t\tAssetEntity currencyAE = portofolio.getAsset(selectedAssetEntity.getCurrency().getCode());\n\t\t\tselectedCurrency = new AssetInfo(currencyAE.getSymbol(), currencyAE.getCurrency(), currencyAE.getQuantity().doubleValue());\n\t\t}\n\n\t\tBigDecimal gainCost = null;\n\n\t\tif (quantity != 0) {\n\t\t\tgainCost = q.getValue().multiply(BigDecimal.valueOf(quantity));\n\t\t}\n\n\t\treturn new OrderInfo(selectedAsset, selectedCurrency, gainCost);\n\t}", "signature": "OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "full_signature": "public OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "class_method_signature": "PortofolioService.getOrderInfo(String login, String symbolCode, double quantity)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "get", "findById", "UNKNOWN", "findByUserUsername", "getAsset", "getCode", "getCurrencyFor", "getCode", "getCurrency", "getLatest", "getCode", "getSymbol", "getCurrency", "doubleValue", "getQuantity", "setCurrentRate", "doubleValue", "getValue", "equals", "getCurrency", "getBaseCurrency", "getBaseCurrency", "doubleValue", "getAmount", "getAsset", "getCode", "getCurrency", "getSymbol", "getCurrency", "doubleValue", "getQuantity", "multiply", "getValue", "valueOf"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}