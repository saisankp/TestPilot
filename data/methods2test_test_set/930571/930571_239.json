{"test_class": {"identifier": "GetUserTaskCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String USER_ID = \"user\";", "modifier": "public static final", "type": "String", "declarator": "USER_ID = \"user\"", "var_name": "USER_ID"}, {"original_string": "public static final Long TASK_ID = 1L;", "modifier": "public static final", "type": "Long", "declarator": "TASK_ID = 1L", "var_name": "TASK_ID"}, {"original_string": "@Mock\n    private TaskContext taskContext;", "modifier": "@Mock\n    private", "type": "TaskContext", "declarator": "taskContext", "var_name": "taskContext"}, {"original_string": "@Mock\n    private TaskQueryService taskQueryService;", "modifier": "@Mock\n    private", "type": "TaskQueryService", "declarator": "taskQueryService", "var_name": "taskQueryService"}, {"original_string": "@Mock\n    private UserGroupCallback userGroupCallback;", "modifier": "@Mock\n    private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "@Mock\n    private Task task;", "modifier": "@Mock\n    private", "type": "Task", "declarator": "task", "var_name": "task"}, {"original_string": "@Mock\n    private PeopleAssignments peopleAssignments;", "modifier": "@Mock\n    private", "type": "PeopleAssignments", "declarator": "peopleAssignments", "var_name": "peopleAssignments"}, {"original_string": "private GetUserTaskCommand command;", "modifier": "private", "type": "GetUserTaskCommand", "declarator": "command", "var_name": "command"}], "file": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/commands/GetUserTaskCommandTest.java"}, "test_case": {"identifier": "testUserOnBusinessAdministratorGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUserOnBusinessAdministratorGroups() {\n        List<String> userGroups = new ArrayList<>();\n        userGroups.add(\"admin\");\n        when(userGroupCallback.getGroupsForUser(USER_ID)).thenReturn(userGroups);\n\n        List<OrganizationalEntity> admins = new ArrayList<>();\n        admins.add(new GroupImpl(\"admin\"));\n\n        when(peopleAssignments.getBusinessAdministrators()).thenReturn(admins);\n\n        Task commandTask = command.execute(taskContext);\n\n        assertEquals(task,\n                     commandTask);\n    }", "signature": "void testUserOnBusinessAdministratorGroups()", "full_signature": "@Test public void testUserOnBusinessAdministratorGroups()", "class_method_signature": "GetUserTaskCommandTest.testUserOnBusinessAdministratorGroups()", "testcase": true, "constructor": false, "invocations": ["add", "thenReturn", "when", "getGroupsForUser", "add", "thenReturn", "when", "getBusinessAdministrators", "execute", "assertEquals"]}, "focal_class": {"identifier": "GetUserTaskCommand", "superclass": "extends TaskCommand<Task>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -3066272693452263188L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3066272693452263188L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "GetUserTaskCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " GetUserTaskCommand()", "full_signature": "public  GetUserTaskCommand()", "class_method_signature": "GetUserTaskCommand.GetUserTaskCommand()", "testcase": false, "constructor": true}, {"identifier": "GetUserTaskCommand", "parameters": "(String userId,\n                              long taskId)", "modifiers": "public", "return": "", "signature": " GetUserTaskCommand(String userId,\n                              long taskId)", "full_signature": "public  GetUserTaskCommand(String userId,\n                              long taskId)", "class_method_signature": "GetUserTaskCommand.GetUserTaskCommand(String userId,\n                              long taskId)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Context cntxt)", "modifiers": "@Override public", "return": "Task", "signature": "Task execute(Context cntxt)", "full_signature": "@Override public Task execute(Context cntxt)", "class_method_signature": "GetUserTaskCommand.execute(Context cntxt)", "testcase": false, "constructor": false}, {"identifier": "checkUserPermissions", "parameters": "(String userId,\n                                           Task task,\n                                           TaskContext context)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkUserPermissions(String userId,\n                                           Task task,\n                                           TaskContext context)", "full_signature": "protected boolean checkUserPermissions(String userId,\n                                           Task task,\n                                           TaskContext context)", "class_method_signature": "GetUserTaskCommand.checkUserPermissions(String userId,\n                                           Task task,\n                                           TaskContext context)", "testcase": false, "constructor": false}, {"identifier": "checkUserPermissions", "parameters": "(List<String> userGroups,\n                                           List<OrganizationalEntity> organizationalEntities)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkUserPermissions(List<String> userGroups,\n                                           List<OrganizationalEntity> organizationalEntities)", "full_signature": "protected boolean checkUserPermissions(List<String> userGroups,\n                                           List<OrganizationalEntity> organizationalEntities)", "class_method_signature": "GetUserTaskCommand.checkUserPermissions(List<String> userGroups,\n                                           List<OrganizationalEntity> organizationalEntities)", "testcase": false, "constructor": false}], "file": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/commands/GetUserTaskCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(Context cntxt)", "modifiers": "@Override public", "return": "Task", "body": "@Override\n    public Task execute(Context cntxt) {\n        TaskContext context = (TaskContext) cntxt;\n\n        Task task = context.getTaskQueryService().getTaskInstanceById(taskId);\n\n        if (task == null) {\n            throw new IllegalStateException(\"Unable to find task with id \" + taskId);\n        }\n\n        if (!checkUserPermissions(userId,\n                                  task,\n                                  context)) {\n            throw new PermissionDeniedException(\"User \" + userId + \" isn't allowed to see the task \" + taskId);\n        }\n\n        return task;\n    }", "signature": "Task execute(Context cntxt)", "full_signature": "@Override public Task execute(Context cntxt)", "class_method_signature": "GetUserTaskCommand.execute(Context cntxt)", "testcase": false, "constructor": false, "invocations": ["getTaskInstanceById", "getTaskQueryService", "checkUserPermissions"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}