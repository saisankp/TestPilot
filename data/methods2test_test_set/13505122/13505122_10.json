{"test_class": {"identifier": "ThreadsProcessingItemTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested private ThreadsProcessingItem pi;", "modifier": "@Tested private", "type": "ThreadsProcessingItem", "declarator": "pi", "var_name": "pi"}, {"original_string": "@Mocked private ThreadsEngine unused;", "modifier": "@Mocked private", "type": "ThreadsEngine", "declarator": "unused", "var_name": "unused"}, {"original_string": "@Mocked private ExecutorService threadPool;", "modifier": "@Mocked private", "type": "ExecutorService", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "@Mocked private ThreadsEventRunnable task;", "modifier": "@Mocked private", "type": "ThreadsEventRunnable", "declarator": "task", "var_name": "task"}, {"original_string": "@Mocked private Processor processor, processorReplica;", "modifier": "@Mocked private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mocked private ThreadsStream stream;", "modifier": "@Mocked private", "type": "ThreadsStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "@Mocked private StreamDestination destination;", "modifier": "@Mocked private", "type": "StreamDestination", "declarator": "destination", "var_name": "destination"}, {"original_string": "@Mocked private ContentEvent event;", "modifier": "@Mocked private", "type": "ContentEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private final int parallelism = 4;", "modifier": "private final", "type": "int", "declarator": "parallelism = 4", "var_name": "parallelism"}, {"original_string": "private final int counter = 2;", "modifier": "private final", "type": "int", "declarator": "counter = 2", "var_name": "counter"}, {"original_string": "private ThreadsProcessingItemInstance instance;", "modifier": "private", "type": "ThreadsProcessingItemInstance", "declarator": "instance", "var_name": "instance"}], "file": "samoa-threads/src/test/java/com/yahoo/labs/samoa/topology/impl/ThreadsProcessingItemTest.java"}, "test_case": {"identifier": "testProcessEventError", "parameters": "()", "modifiers": "@Test(expected=IllegalStateException.class) public", "return": "void", "body": "@Test(expected=IllegalStateException.class)\n\tpublic void testProcessEventError() {\n\t\tpi.processEvent(event, counter);\n\t}", "signature": "void testProcessEventError()", "full_signature": "@Test(expected=IllegalStateException.class) public void testProcessEventError()", "class_method_signature": "ThreadsProcessingItemTest.testProcessEventError()", "testcase": true, "constructor": false, "invocations": ["processEvent"]}, "focal_class": {"identifier": "ThreadsProcessingItem", "superclass": "extends AbstractProcessingItem", "interfaces": "", "fields": [{"original_string": "private List<ThreadsProcessingItemInstance> piInstances;", "modifier": "private", "type": "List<ThreadsProcessingItemInstance>", "declarator": "piInstances", "var_name": "piInstances"}, {"original_string": "private int offset;", "modifier": "private", "type": "int", "declarator": "offset", "var_name": "offset"}], "methods": [{"identifier": "ThreadsProcessingItem", "parameters": "(Processor processor, int parallelismHint)", "modifiers": "public", "return": "", "signature": " ThreadsProcessingItem(Processor processor, int parallelismHint)", "full_signature": "public  ThreadsProcessingItem(Processor processor, int parallelismHint)", "class_method_signature": "ThreadsProcessingItem.ThreadsProcessingItem(Processor processor, int parallelismHint)", "testcase": false, "constructor": true}, {"identifier": "getProcessingItemInstances", "parameters": "()", "modifiers": "public", "return": "List<ThreadsProcessingItemInstance>", "signature": "List<ThreadsProcessingItemInstance> getProcessingItemInstances()", "full_signature": "public List<ThreadsProcessingItemInstance> getProcessingItemInstances()", "class_method_signature": "ThreadsProcessingItem.getProcessingItemInstances()", "testcase": false, "constructor": false}, {"identifier": "addInputStream", "parameters": "(Stream inputStream, PartitioningScheme scheme)", "modifiers": "@Override protected", "return": "ProcessingItem", "signature": "ProcessingItem addInputStream(Stream inputStream, PartitioningScheme scheme)", "full_signature": "@Override protected ProcessingItem addInputStream(Stream inputStream, PartitioningScheme scheme)", "class_method_signature": "ThreadsProcessingItem.addInputStream(Stream inputStream, PartitioningScheme scheme)", "testcase": false, "constructor": false}, {"identifier": "processEvent", "parameters": "(ContentEvent event, int counter)", "modifiers": "public", "return": "void", "signature": "void processEvent(ContentEvent event, int counter)", "full_signature": "public void processEvent(ContentEvent event, int counter)", "class_method_signature": "ThreadsProcessingItem.processEvent(ContentEvent event, int counter)", "testcase": false, "constructor": false}, {"identifier": "setupInstances", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void setupInstances()", "full_signature": "public void setupInstances()", "class_method_signature": "ThreadsProcessingItem.setupInstances()", "testcase": false, "constructor": false}], "file": "samoa-threads/src/main/java/com/yahoo/labs/samoa/topology/impl/ThreadsProcessingItem.java"}, "focal_method": {"identifier": "processEvent", "parameters": "(ContentEvent event, int counter)", "modifiers": "public", "return": "void", "body": "public void processEvent(ContentEvent event, int counter) {\n\t\tif (this.piInstances == null || this.piInstances.size() < this.getParallelism())\n\t\t\tthrow new IllegalStateException(\"ThreadsWorkerProcessingItem(s) need to be setup before process any event (i.e. in ThreadsTopology.start()).\");\n\t\t\n\t\tThreadsProcessingItemInstance piInstance = this.piInstances.get(counter);\n\t\tThreadsEventRunnable runnable = new ThreadsEventRunnable(piInstance, event);\n\t\tThreadsEngine.getThreadWithIndex(piInstance.getThreadIndex()).submit(runnable);\n\t}", "signature": "void processEvent(ContentEvent event, int counter)", "full_signature": "public void processEvent(ContentEvent event, int counter)", "class_method_signature": "ThreadsProcessingItem.processEvent(ContentEvent event, int counter)", "testcase": false, "constructor": false, "invocations": ["size", "getParallelism", "get", "submit", "getThreadWithIndex", "getThreadIndex"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}