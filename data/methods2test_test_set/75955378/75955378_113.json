{"test_class": {"identifier": "HttpTransportFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "transporters/src/test/java/com/nextdoor/bender/ipc/http/HttpTransportFactoryTest.java"}, "test_case": {"identifier": "testBasicAuthHeaders", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBasicAuthHeaders() {\n    HttpTransportConfig config = new HttpTransportConfig();\n    config.addHttpHeader(\"foo\", \"bar\");\n\n    BasicHttpAuthConfig auth = new BasicHttpAuthConfig();\n    auth.setUsername(\"foo\");\n    auth.setPassword(new StringValueConfig(\"bar\"));\n    config.setBasicHttpAuth(auth);\n\n    HttpTransportFactory factory = spy(new HttpTransportFactory());\n    factory.setConf(config);\n\n    ArgumentCaptor<Map> captor = ArgumentCaptor.forClass(Map.class);\n    verify(factory, times(1)).getClient(anyBoolean(), anyString(), captor.capture(), anyInt());\n\n    Map<String, String> expected = new HashMap<String, String>();\n    expected.put(\"foo\", \"bar\");\n    expected.put(\"Authorization\", \"Basic Zm9vOmJhcg==\");\n\n    assertEquals(expected, captor.getValue());\n  }", "signature": "void testBasicAuthHeaders()", "full_signature": "@Test public void testBasicAuthHeaders()", "class_method_signature": "HttpTransportFactoryTest.testBasicAuthHeaders()", "testcase": true, "constructor": false, "invocations": ["addHttpHeader", "setUsername", "setPassword", "setBasicHttpAuth", "spy", "setConf", "forClass", "getClient", "verify", "times", "anyBoolean", "anyString", "capture", "anyInt", "put", "put", "assertEquals", "getValue"]}, "focal_class": {"identifier": "HttpTransportFactory", "superclass": "extends BaseHttpTransportFactory", "interfaces": "", "fields": [], "methods": [{"identifier": "getPath", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getPath()", "full_signature": "@Override protected String getPath()", "class_method_signature": "HttpTransportFactory.getPath()", "testcase": false, "constructor": false}, {"identifier": "getSerializer", "parameters": "()", "modifiers": "@Override protected", "return": "TransportSerializer", "signature": "TransportSerializer getSerializer()", "full_signature": "@Override protected TransportSerializer getSerializer()", "class_method_signature": "HttpTransportFactory.getSerializer()", "testcase": false, "constructor": false}, {"identifier": "setConf", "parameters": "(AbstractConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void setConf(AbstractConfig config)", "full_signature": "@Override public void setConf(AbstractConfig config)", "class_method_signature": "HttpTransportFactory.setConf(AbstractConfig config)", "testcase": false, "constructor": false}], "file": "transporters/src/main/java/com/nextdoor/bender/ipc/http/HttpTransportFactory.java"}, "focal_method": {"identifier": "setConf", "parameters": "(AbstractConfig config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void setConf(AbstractConfig config) {\n    HttpTransportConfig httpConfig = (HttpTransportConfig) config;\n\n    BasicHttpAuthConfig auth = (BasicHttpAuthConfig) httpConfig.getBasicHttpAuth();\n    if (auth != null) {\n      byte[] encodedAuth =\n          Base64.encodeBase64((auth.getUsername() + \":\" + auth.getPassword()).getBytes());\n\n      httpConfig.addHttpHeader(HttpHeaders.AUTHORIZATION, \"Basic \" + new String(encodedAuth));\n    }\n\n    super.setConf(config);\n  }", "signature": "void setConf(AbstractConfig config)", "full_signature": "@Override public void setConf(AbstractConfig config)", "class_method_signature": "HttpTransportFactory.setConf(AbstractConfig config)", "testcase": false, "constructor": false, "invocations": ["getBasicHttpAuth", "encodeBase64", "getBytes", "getUsername", "getPassword", "addHttpHeader", "setConf"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}