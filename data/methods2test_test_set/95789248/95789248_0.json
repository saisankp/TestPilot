{"test_class": {"identifier": "TracingHandlerTest", "superclass": "extends WebTestBase", "interfaces": "", "fields": [{"original_string": "protected MockTracer mockTracer = new MockTracer(new ThreadLocalScopeManager(), MockTracer.Propagator.TEXT_MAP);", "modifier": "protected", "type": "MockTracer", "declarator": "mockTracer = new MockTracer(new ThreadLocalScopeManager(), MockTracer.Propagator.TEXT_MAP)", "var_name": "mockTracer"}], "file": "opentracing-vertx-web/src/test/java/io/opentracing/contrib/vertx/ext/web/TracingHandlerTest.java"}, "test_case": {"identifier": "testLocalSpan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocalSpan() throws Exception {\n        {\n            router.route(\"/localSpan\").handler(routingContext -> {\n                SpanContext serverSpanContext = TracingHandler.serverSpanContext(routingContext);\n                io.opentracing.Tracer.SpanBuilder spanBuilder = mockTracer.buildSpan(\"localSpan\");\n\n                spanBuilder.asChildOf(serverSpanContext)\n                        .start()\n                        .finish();\n\n                routingContext.response()\n                        .setStatusCode(202)\n                        .end();\n            });\n\n            request(\"/localSpan\", HttpMethod.GET, 202);\n            Awaitility.await().until(reportedSpansSize(), IsEqual.equalTo(2));\n        }\n        List<MockSpan> mockSpans = mockTracer.finishedSpans();\n        Assert.assertEquals(2, mockSpans.size());\n\n        Assert.assertEquals(mockSpans.get(0).parentId(), mockSpans.get(1).context().spanId());\n        Assert.assertEquals(mockSpans.get(0).context().traceId(), mockSpans.get(1).context().traceId());\n    }", "signature": "void testLocalSpan()", "full_signature": "@Test public void testLocalSpan()", "class_method_signature": "TracingHandlerTest.testLocalSpan()", "testcase": true, "constructor": false, "invocations": ["handler", "route", "serverSpanContext", "buildSpan", "finish", "start", "asChildOf", "end", "setStatusCode", "response", "request", "until", "await", "reportedSpansSize", "equalTo", "finishedSpans", "assertEquals", "size", "assertEquals", "parentId", "get", "spanId", "context", "get", "assertEquals", "traceId", "context", "get", "traceId", "context", "get"]}, "focal_class": {"identifier": "TracingHandler", "superclass": "", "interfaces": "implements Handler<RoutingContext>", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TracingHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TracingHandler.class)", "var_name": "log"}, {"original_string": "public static final String CURRENT_SPAN = TracingHandler.class.getName() + \".severSpan\";", "modifier": "public static final", "type": "String", "declarator": "CURRENT_SPAN = TracingHandler.class.getName() + \".severSpan\"", "var_name": "CURRENT_SPAN"}, {"original_string": "private final Tracer tracer;", "modifier": "private final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private final List<WebSpanDecorator> decorators;", "modifier": "private final", "type": "List<WebSpanDecorator>", "declarator": "decorators", "var_name": "decorators"}], "methods": [{"identifier": "TracingHandler", "parameters": "(Tracer tracer)", "modifiers": "public", "return": "", "signature": " TracingHandler(Tracer tracer)", "full_signature": "public  TracingHandler(Tracer tracer)", "class_method_signature": "TracingHandler.TracingHandler(Tracer tracer)", "testcase": false, "constructor": true}, {"identifier": "TracingHandler", "parameters": "(Tracer tracer, List<WebSpanDecorator> decorators)", "modifiers": "public", "return": "", "signature": " TracingHandler(Tracer tracer, List<WebSpanDecorator> decorators)", "full_signature": "public  TracingHandler(Tracer tracer, List<WebSpanDecorator> decorators)", "class_method_signature": "TracingHandler.TracingHandler(Tracer tracer, List<WebSpanDecorator> decorators)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(RoutingContext routingContext)", "modifiers": "@Override public", "return": "void", "signature": "void handle(RoutingContext routingContext)", "full_signature": "@Override public void handle(RoutingContext routingContext)", "class_method_signature": "TracingHandler.handle(RoutingContext routingContext)", "testcase": false, "constructor": false}, {"identifier": "handlerNormal", "parameters": "(RoutingContext routingContext)", "modifiers": "protected", "return": "void", "signature": "void handlerNormal(RoutingContext routingContext)", "full_signature": "protected void handlerNormal(RoutingContext routingContext)", "class_method_signature": "TracingHandler.handlerNormal(RoutingContext routingContext)", "testcase": false, "constructor": false}, {"identifier": "handlerFailure", "parameters": "(RoutingContext routingContext)", "modifiers": "protected", "return": "void", "signature": "void handlerFailure(RoutingContext routingContext)", "full_signature": "protected void handlerFailure(RoutingContext routingContext)", "class_method_signature": "TracingHandler.handlerFailure(RoutingContext routingContext)", "testcase": false, "constructor": false}, {"identifier": "finishEndHandler", "parameters": "(RoutingContext routingContext, Span span)", "modifiers": "private", "return": "Handler<Void>", "signature": "Handler<Void> finishEndHandler(RoutingContext routingContext, Span span)", "full_signature": "private Handler<Void> finishEndHandler(RoutingContext routingContext, Span span)", "class_method_signature": "TracingHandler.finishEndHandler(RoutingContext routingContext, Span span)", "testcase": false, "constructor": false}, {"identifier": "serverSpanContext", "parameters": "(RoutingContext routingContext)", "modifiers": "public static", "return": "SpanContext", "signature": "SpanContext serverSpanContext(RoutingContext routingContext)", "full_signature": "public static SpanContext serverSpanContext(RoutingContext routingContext)", "class_method_signature": "TracingHandler.serverSpanContext(RoutingContext routingContext)", "testcase": false, "constructor": false}], "file": "opentracing-vertx-web/src/main/java/io/opentracing/contrib/vertx/ext/web/TracingHandler.java"}, "focal_method": {"identifier": "serverSpanContext", "parameters": "(RoutingContext routingContext)", "modifiers": "public static", "return": "SpanContext", "body": "public static SpanContext serverSpanContext(RoutingContext routingContext) {\n        SpanContext serverContext = null;\n\n        Object object = routingContext.get(CURRENT_SPAN);\n        if (object instanceof Span) {\n            Span span = (Span) object;\n            serverContext = span.context();\n        } else {\n            log.error(\"Sever SpanContext is null or not an instance of SpanContext\");\n        }\n\n        return serverContext;\n    }", "signature": "SpanContext serverSpanContext(RoutingContext routingContext)", "full_signature": "public static SpanContext serverSpanContext(RoutingContext routingContext)", "class_method_signature": "TracingHandler.serverSpanContext(RoutingContext routingContext)", "testcase": false, "constructor": false, "invocations": ["get", "context", "error"]}, "repository": {"repo_id": 95789248, "url": "https://github.com/opentracing-contrib/java-vertx-web", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 19, "size": 81, "license": "licensed"}}