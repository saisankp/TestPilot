{"test_class": {"identifier": "DataFetchingUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String SAMPLE_NAME = \"Axway Enterprise\";", "modifier": "private final", "type": "String", "declarator": "SAMPLE_NAME = \"Axway Enterprise\"", "var_name": "SAMPLE_NAME"}, {"original_string": "private final String SAMPLE_VERSION = \"4.5.9\";", "modifier": "private final", "type": "String", "declarator": "SAMPLE_VERSION = \"4.5.9\"", "var_name": "SAMPLE_VERSION"}], "file": "server/src/test/java/org/axway/grapes/server/reports/utils/DataFetchingUtilsTest.java"}, "test_case": {"identifier": "getDDMultipleModulesJoinDeps", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDDMultipleModulesJoinDeps() {\n        final Delivery delivery = DataModelFactory.createDelivery(\n                SAMPLE_NAME,\n                SAMPLE_VERSION,\n                LocalDate.now().toString(),\n                Arrays.asList(\"one\", \"two\", \"three\"));\n\n        final DbModule m1 = makeModule(\"one\");\n        final DbModule m2 = makeModule(\"two\");\n        final DbModule m3 = makeModule(\"three\");\n\n        final RepositoryHandler repoHandler = makeRepoHandler(m1, m2, m3);\n        final DependencyHandler depHandler = mock(DependencyHandler.class);\n\n        withDeps(depHandler, \"one\", \"one_a\");\n        withDeps(depHandler, \"two\", \"two_a\", \"two_b\");\n        withDeps(depHandler, \"three\", \"three_a\", \"three_b\", \"three_c\");\n\n        final DataFetchingUtils sut = new DataFetchingUtils();\n\n        // Act\n        final Set<String> deliveryDependencies = sut.getDeliveryDependencies(repoHandler, depHandler, delivery);\n\n        // Assert\n        assertEquals(1 + 2 + 3, deliveryDependencies.size());\n        assertTrue(deliveryDependencies.contains(makeGAVC(\"one_a\")));\n        assertTrue(deliveryDependencies.contains(makeGAVC(\"two_a\")));\n        assertTrue(deliveryDependencies.contains(makeGAVC(\"two_b\")));\n        assertTrue(deliveryDependencies.contains(makeGAVC(\"three_a\")));\n        assertTrue(deliveryDependencies.contains(makeGAVC(\"three_b\")));\n        assertTrue(deliveryDependencies.contains(makeGAVC(\"three_c\")));\n    }", "signature": "void getDDMultipleModulesJoinDeps()", "full_signature": "@Test public void getDDMultipleModulesJoinDeps()", "class_method_signature": "DataFetchingUtilsTest.getDDMultipleModulesJoinDeps()", "testcase": true, "constructor": false, "invocations": ["createDelivery", "toString", "now", "asList", "makeModule", "makeModule", "makeModule", "makeRepoHandler", "mock", "withDeps", "withDeps", "withDeps", "getDeliveryDependencies", "assertEquals", "size", "assertTrue", "contains", "makeGAVC", "assertTrue", "contains", "makeGAVC", "assertTrue", "contains", "makeGAVC", "assertTrue", "contains", "makeGAVC", "assertTrue", "contains", "makeGAVC", "assertTrue", "contains", "makeGAVC"]}, "focal_class": {"identifier": "DataFetchingUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataFetchingUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataFetchingUtils.class)", "var_name": "LOG"}, {"original_string": "private final List<String> corporateIds = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "corporateIds = new ArrayList<>()", "var_name": "corporateIds"}], "methods": [{"identifier": "getProductWithCommercialDeliveries", "parameters": "(final RepositoryHandler repoHandler)", "modifiers": "public", "return": "List<DbProduct>", "signature": "List<DbProduct> getProductWithCommercialDeliveries(final RepositoryHandler repoHandler)", "full_signature": "public List<DbProduct> getProductWithCommercialDeliveries(final RepositoryHandler repoHandler)", "class_method_signature": "DataFetchingUtils.getProductWithCommercialDeliveries(final RepositoryHandler repoHandler)", "testcase": false, "constructor": false}, {"identifier": "getCommercialDelivery", "parameters": "(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "modifiers": "public", "return": "Optional<Delivery>", "signature": "Optional<Delivery> getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "full_signature": "public Optional<Delivery> getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "class_method_signature": "DataFetchingUtils.getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "testcase": false, "constructor": false}, {"identifier": "getDeliveryDependencies", "parameters": "(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "full_signature": "public Set<String> getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "class_method_signature": "DataFetchingUtils.getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "testcase": false, "constructor": false}, {"identifier": "initCorporateIDs", "parameters": "(final RepositoryHandler repoHandler,\n                                 final String orgName)", "modifiers": "public", "return": "void", "signature": "void initCorporateIDs(final RepositoryHandler repoHandler,\n                                 final String orgName)", "full_signature": "public void initCorporateIDs(final RepositoryHandler repoHandler,\n                                 final String orgName)", "class_method_signature": "DataFetchingUtils.initCorporateIDs(final RepositoryHandler repoHandler,\n                                 final String orgName)", "testcase": false, "constructor": false}, {"identifier": "isThirdParty", "parameters": "(final DbArtifact artifact)", "modifiers": "public", "return": "boolean", "signature": "boolean isThirdParty(final DbArtifact artifact)", "full_signature": "public boolean isThirdParty(final DbArtifact artifact)", "class_method_signature": "DataFetchingUtils.isThirdParty(final DbArtifact artifact)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/reports/utils/DataFetchingUtils.java"}, "focal_method": {"identifier": "getDeliveryDependencies", "parameters": "(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery) {\n\n        final FiltersHolder filters = new FiltersHolder();\n        filters.getDecorator().setShowCorporate(Boolean.FALSE);\n        filters.getDecorator().setShowThirdparty(Boolean.TRUE);\n\n        Set<String> deps = new HashSet<>();\n\n        delivery.getDependencies().forEach(d -> {\n            final DbModule module = repoHandler.getModule(d);\n            if (module != null) {\n                final List<Dependency> allDependencies = depHandler.getModuleDependencies(module.getId(), filters);\n                allDependencies.forEach(dep -> deps.add(dep.getTarget().getGavc()));\n            } else {\n                //\n                // This stripping occurs because the dep.getTarget().getGavc() returns the\n                // \"short form\" of the artifact group_id:artifact_id:version\n                //\n                if(isFullGAVC(d)) {\n                    deps.add(strip(d, 2));\n                } else {\n                    deps.add(d);\n                }\n            }\n        });\n\n        return deps;\n    }", "signature": "Set<String> getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "full_signature": "public Set<String> getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "class_method_signature": "DataFetchingUtils.getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "testcase": false, "constructor": false, "invocations": ["setShowCorporate", "getDecorator", "setShowThirdparty", "getDecorator", "forEach", "getDependencies", "getModule", "getModuleDependencies", "getId", "forEach", "add", "getGavc", "getTarget", "isFullGAVC", "add", "strip", "add"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}