{"test_class": {"identifier": "DefaultLoadBalancerReconcilerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long TEST_TIMEOUT_MS = 10_0000;", "modifier": "private static final", "type": "long", "declarator": "TEST_TIMEOUT_MS = 10_0000", "var_name": "TEST_TIMEOUT_MS"}, {"original_string": "private String loadBalancerId;", "modifier": "private", "type": "String", "declarator": "loadBalancerId", "var_name": "loadBalancerId"}, {"original_string": "private String jobId;", "modifier": "private", "type": "String", "declarator": "jobId", "var_name": "jobId"}, {"original_string": "private long delayMs;", "modifier": "private", "type": "long", "declarator": "delayMs", "var_name": "delayMs"}, {"original_string": "private LoadBalancerStore store;", "modifier": "private", "type": "LoadBalancerStore", "declarator": "store", "var_name": "store"}, {"original_string": "private LoadBalancerConnector connector;", "modifier": "private", "type": "LoadBalancerConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private V3JobOperations v3JobOperations;", "modifier": "private", "type": "V3JobOperations", "declarator": "v3JobOperations", "var_name": "v3JobOperations"}, {"original_string": "private TestScheduler testScheduler;", "modifier": "private", "type": "TestScheduler", "declarator": "testScheduler", "var_name": "testScheduler"}, {"original_string": "private LoadBalancerReconciler reconciler;", "modifier": "private", "type": "LoadBalancerReconciler", "declarator": "reconciler", "var_name": "reconciler"}, {"original_string": "private AtomicLong reconciliationCount;", "modifier": "private", "type": "AtomicLong", "declarator": "reconciliationCount", "var_name": "reconciliationCount"}, {"original_string": "private AssertableSubscriber<TargetStateBatchable> subscriber;", "modifier": "private", "type": "AssertableSubscriber<TargetStateBatchable>", "declarator": "subscriber", "var_name": "subscriber"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/loadbalancer/service/DefaultLoadBalancerReconcilerTest.java"}, "test_case": {"identifier": "updatesAreIgnoredWhileCooldownIsActive", "parameters": "()", "modifiers": "@Test(timeout = TEST_TIMEOUT_MS) public", "return": "void", "body": "@Test(timeout = TEST_TIMEOUT_MS)\n    public void updatesAreIgnoredWhileCooldownIsActive() {\n        long cooldownPeriodMs = 5 * delayMs;\n        List<Task> tasks = LoadBalancerTests.buildTasksStarted(5, jobId);\n        JobLoadBalancer jobLoadBalancer = new JobLoadBalancer(jobId, loadBalancerId);\n        JobLoadBalancerState association = new JobLoadBalancerState(jobLoadBalancer, State.ASSOCIATED);\n        when(v3JobOperations.getTasks(jobId)).thenReturn(tasks);\n        store.addOrUpdateLoadBalancer(association.getJobLoadBalancer(), association.getState()).await();\n\n        for (Task task : tasks) {\n            String ipAddress = task.getTaskContext().get(TaskAttributes.TASK_ATTRIBUTES_CONTAINER_IP);\n            LoadBalancerTarget target = new LoadBalancerTarget(loadBalancerId, task.getId(), ipAddress);\n            reconciler.activateCooldownFor(target, cooldownPeriodMs, TimeUnit.MILLISECONDS);\n        }\n\n        testScheduler.triggerActions();\n        subscriber.assertNotCompleted().assertNoValues();\n\n        // no updates while cooldown is active in the first iteration\n        awaitReconciliationRuns(1);\n        subscriber.assertNotCompleted().assertNoValues();\n\n        awaitReconciliationRuns(4);\n        subscriber.assertNotCompleted().assertValueCount(5);\n        subscriber.getOnNextEvents().forEach(update -> {\n            assertThat(update.getState()).isEqualTo(LoadBalancerTarget.State.REGISTERED);\n            assertThat(update.getPriority()).isEqualTo(Priority.LOW);\n            assertThat(update.getLoadBalancerId()).isEqualTo(loadBalancerId);\n        });\n\n        // try again since it still can't see updates applied on the connector\n        awaitReconciliationRuns(1);\n        subscriber.assertNotCompleted().assertValueCount(10);\n    }", "signature": "void updatesAreIgnoredWhileCooldownIsActive()", "full_signature": "@Test(timeout = TEST_TIMEOUT_MS) public void updatesAreIgnoredWhileCooldownIsActive()", "class_method_signature": "DefaultLoadBalancerReconcilerTest.updatesAreIgnoredWhileCooldownIsActive()", "testcase": true, "constructor": false, "invocations": ["buildTasksStarted", "thenReturn", "when", "getTasks", "await", "addOrUpdateLoadBalancer", "getJobLoadBalancer", "getState", "get", "getTaskContext", "getId", "activateCooldownFor", "triggerActions", "assertNoValues", "assertNotCompleted", "awaitReconciliationRuns", "assertNoValues", "assertNotCompleted", "awaitReconciliationRuns", "assertValueCount", "assertNotCompleted", "forEach", "getOnNextEvents", "isEqualTo", "assertThat", "getState", "isEqualTo", "assertThat", "getPriority", "isEqualTo", "assertThat", "getLoadBalancerId", "awaitReconciliationRuns", "assertValueCount", "assertNotCompleted"]}, "focal_class": {"identifier": "DefaultLoadBalancerReconciler", "superclass": "", "interfaces": "implements LoadBalancerReconciler", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultLoadBalancerReconciler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultLoadBalancerReconciler.class)", "var_name": "logger"}, {"original_string": "private static final String METRIC_RECONCILER = METRIC_LOADBALANCER + \"reconciliation\";", "modifier": "private static final", "type": "String", "declarator": "METRIC_RECONCILER = METRIC_LOADBALANCER + \"reconciliation\"", "var_name": "METRIC_RECONCILER"}, {"original_string": "private static final Runnable NOOP = () -> {\n    };", "modifier": "private static final", "type": "Runnable", "declarator": "NOOP = () -> {\n    }", "var_name": "NOOP"}, {"original_string": "private static final int MAX_ORPHAN_CLEANUP_CONCURRENCY = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_ORPHAN_CLEANUP_CONCURRENCY = 100", "var_name": "MAX_ORPHAN_CLEANUP_CONCURRENCY"}, {"original_string": "private final ConcurrentMap<LoadBalancerTarget, Instant> ignored = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<LoadBalancerTarget, Instant>", "declarator": "ignored = new ConcurrentHashMap<>()", "var_name": "ignored"}, {"original_string": "private final Set<JobLoadBalancer> markedAsOrphan = ConcurrentHashMap.newKeySet();", "modifier": "private final", "type": "Set<JobLoadBalancer>", "declarator": "markedAsOrphan = ConcurrentHashMap.newKeySet()", "var_name": "markedAsOrphan"}, {"original_string": "private final LoadBalancerStore store;", "modifier": "private final", "type": "LoadBalancerStore", "declarator": "store", "var_name": "store"}, {"original_string": "private final LoadBalancerConnector connector;", "modifier": "private final", "type": "LoadBalancerConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private final LoadBalancerJobOperations jobOperations;", "modifier": "private final", "type": "LoadBalancerJobOperations", "declarator": "jobOperations", "var_name": "jobOperations"}, {"original_string": "private final long delayMs;", "modifier": "private final", "type": "long", "declarator": "delayMs", "var_name": "delayMs"}, {"original_string": "private final Supplier<Long> timeoutMs;", "modifier": "private final", "type": "Supplier<Long>", "declarator": "timeoutMs", "var_name": "timeoutMs"}, {"original_string": "private final Runnable afterReconciliation;", "modifier": "private final", "type": "Runnable", "declarator": "afterReconciliation", "var_name": "afterReconciliation"}, {"original_string": "private final Registry registry;", "modifier": "private final", "type": "Registry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final Counter registerCounter;", "modifier": "private final", "type": "Counter", "declarator": "registerCounter", "var_name": "registerCounter"}, {"original_string": "private final Counter deregisterCounter;", "modifier": "private final", "type": "Counter", "declarator": "deregisterCounter", "var_name": "deregisterCounter"}, {"original_string": "private final Counter removeCounter;", "modifier": "private final", "type": "Counter", "declarator": "removeCounter", "var_name": "removeCounter"}, {"original_string": "private final ContinuousSubscriptionMetrics fullReconciliationMetrics;", "modifier": "private final", "type": "ContinuousSubscriptionMetrics", "declarator": "fullReconciliationMetrics", "var_name": "fullReconciliationMetrics"}, {"original_string": "private final ContinuousSubscriptionMetrics orphanUpdateMetrics;", "modifier": "private final", "type": "ContinuousSubscriptionMetrics", "declarator": "orphanUpdateMetrics", "var_name": "orphanUpdateMetrics"}, {"original_string": "private final ContinuousSubscriptionMetrics removeMetrics;", "modifier": "private final", "type": "ContinuousSubscriptionMetrics", "declarator": "removeMetrics", "var_name": "removeMetrics"}, {"original_string": "private final ContinuousSubscriptionMetrics removeTargetsMetrics;", "modifier": "private final", "type": "ContinuousSubscriptionMetrics", "declarator": "removeTargetsMetrics", "var_name": "removeTargetsMetrics"}, {"original_string": "private final ContinuousSubscriptionMetrics registeredIpsMetrics;", "modifier": "private final", "type": "ContinuousSubscriptionMetrics", "declarator": "registeredIpsMetrics", "var_name": "registeredIpsMetrics"}, {"original_string": "private final Id ignoredMetricsId;", "modifier": "private final", "type": "Id", "declarator": "ignoredMetricsId", "var_name": "ignoredMetricsId"}, {"original_string": "private final Id orphanMetricsId;", "modifier": "private final", "type": "Id", "declarator": "orphanMetricsId", "var_name": "orphanMetricsId"}], "methods": [{"identifier": "DefaultLoadBalancerReconciler", "parameters": "(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Registry registry,\n                                  Scheduler scheduler)", "modifiers": "", "return": "", "signature": " DefaultLoadBalancerReconciler(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Registry registry,\n                                  Scheduler scheduler)", "full_signature": "  DefaultLoadBalancerReconciler(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Registry registry,\n                                  Scheduler scheduler)", "class_method_signature": "DefaultLoadBalancerReconciler.DefaultLoadBalancerReconciler(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Registry registry,\n                                  Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "DefaultLoadBalancerReconciler", "parameters": "(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Runnable afterReconciliation,\n                                  Registry registry,\n                                  Scheduler scheduler)", "modifiers": "", "return": "", "signature": " DefaultLoadBalancerReconciler(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Runnable afterReconciliation,\n                                  Registry registry,\n                                  Scheduler scheduler)", "full_signature": "  DefaultLoadBalancerReconciler(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Runnable afterReconciliation,\n                                  Registry registry,\n                                  Scheduler scheduler)", "class_method_signature": "DefaultLoadBalancerReconciler.DefaultLoadBalancerReconciler(LoadBalancerConfiguration configuration,\n                                  LoadBalancerStore store,\n                                  LoadBalancerConnector connector,\n                                  LoadBalancerJobOperations loadBalancerJobOperations,\n                                  Runnable afterReconciliation,\n                                  Registry registry,\n                                  Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "activateCooldownFor", "parameters": "(LoadBalancerTarget target, long period, TimeUnit unit)", "modifiers": "@Override public", "return": "void", "signature": "void activateCooldownFor(LoadBalancerTarget target, long period, TimeUnit unit)", "full_signature": "@Override public void activateCooldownFor(LoadBalancerTarget target, long period, TimeUnit unit)", "class_method_signature": "DefaultLoadBalancerReconciler.activateCooldownFor(LoadBalancerTarget target, long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "DefaultLoadBalancerReconciler.shutdown()", "testcase": false, "constructor": false}, {"identifier": "events", "parameters": "()", "modifiers": "@Override public", "return": "Observable<TargetStateBatchable>", "signature": "Observable<TargetStateBatchable> events()", "full_signature": "@Override public Observable<TargetStateBatchable> events()", "class_method_signature": "DefaultLoadBalancerReconciler.events()", "testcase": false, "constructor": false}, {"identifier": "reconcile", "parameters": "(String loadBalancerId, List<JobLoadBalancerState> associations)", "modifiers": "private", "return": "Observable<TargetStateBatchable>", "signature": "Observable<TargetStateBatchable> reconcile(String loadBalancerId, List<JobLoadBalancerState> associations)", "full_signature": "private Observable<TargetStateBatchable> reconcile(String loadBalancerId, List<JobLoadBalancerState> associations)", "class_method_signature": "DefaultLoadBalancerReconciler.reconcile(String loadBalancerId, List<JobLoadBalancerState> associations)", "testcase": false, "constructor": false}, {"identifier": "updatesFor", "parameters": "(LoadBalancerWithKnownTargets loadBalancer,\n                                                        List<JobLoadBalancerState> associations)", "modifiers": "private", "return": "Observable<TargetStateBatchable>", "signature": "Observable<TargetStateBatchable> updatesFor(LoadBalancerWithKnownTargets loadBalancer,\n                                                        List<JobLoadBalancerState> associations)", "full_signature": "private Observable<TargetStateBatchable> updatesFor(LoadBalancerWithKnownTargets loadBalancer,\n                                                        List<JobLoadBalancerState> associations)", "class_method_signature": "DefaultLoadBalancerReconciler.updatesFor(LoadBalancerWithKnownTargets loadBalancer,\n                                                        List<JobLoadBalancerState> associations)", "testcase": false, "constructor": false}, {"identifier": "updatesForActiveLoadBalancer", "parameters": "(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "modifiers": "private", "return": "ReconciliationUpdates", "signature": "ReconciliationUpdates updatesForActiveLoadBalancer(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "full_signature": "private ReconciliationUpdates updatesForActiveLoadBalancer(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "class_method_signature": "DefaultLoadBalancerReconciler.updatesForActiveLoadBalancer(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "testcase": false, "constructor": false}, {"identifier": "updatesForRemovedLoadBalancer", "parameters": "(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "modifiers": "private", "return": "ReconciliationUpdates", "signature": "ReconciliationUpdates updatesForRemovedLoadBalancer(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "full_signature": "private ReconciliationUpdates updatesForRemovedLoadBalancer(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "class_method_signature": "DefaultLoadBalancerReconciler.updatesForRemovedLoadBalancer(LoadBalancerWithKnownTargets loadBalancer, List<JobLoadBalancerState> associations)", "testcase": false, "constructor": false}, {"identifier": "isNotIgnored", "parameters": "(TargetStateBatchable update)", "modifiers": "private", "return": "boolean", "signature": "boolean isNotIgnored(TargetStateBatchable update)", "full_signature": "private boolean isNotIgnored(TargetStateBatchable update)", "class_method_signature": "DefaultLoadBalancerReconciler.isNotIgnored(TargetStateBatchable update)", "testcase": false, "constructor": false}, {"identifier": "targetsForJobSafe", "parameters": "(JobLoadBalancerState association)", "modifiers": "private", "return": "List<LoadBalancerTarget>", "signature": "List<LoadBalancerTarget> targetsForJobSafe(JobLoadBalancerState association)", "full_signature": "private List<LoadBalancerTarget> targetsForJobSafe(JobLoadBalancerState association)", "class_method_signature": "DefaultLoadBalancerReconciler.targetsForJobSafe(JobLoadBalancerState association)", "testcase": false, "constructor": false}, {"identifier": "removeAllDissociated", "parameters": "(List<JobLoadBalancerState> associations)", "modifiers": "private", "return": "Observable<Completable>", "signature": "Observable<Completable> removeAllDissociated(List<JobLoadBalancerState> associations)", "full_signature": "private Observable<Completable> removeAllDissociated(List<JobLoadBalancerState> associations)", "class_method_signature": "DefaultLoadBalancerReconciler.removeAllDissociated(List<JobLoadBalancerState> associations)", "testcase": false, "constructor": false}, {"identifier": "withState", "parameters": "(Instant instant, Collection<LoadBalancerTarget> targets, State state)", "modifiers": "private", "return": "List<TargetStateBatchable>", "signature": "List<TargetStateBatchable> withState(Instant instant, Collection<LoadBalancerTarget> targets, State state)", "full_signature": "private List<TargetStateBatchable> withState(Instant instant, Collection<LoadBalancerTarget> targets, State state)", "class_method_signature": "DefaultLoadBalancerReconciler.withState(Instant instant, Collection<LoadBalancerTarget> targets, State state)", "testcase": false, "constructor": false}, {"identifier": "snapshotAssociationsByLoadBalancer", "parameters": "()", "modifiers": "private", "return": "Observable<Map.Entry<String, List<JobLoadBalancerState>>>", "signature": "Observable<Map.Entry<String, List<JobLoadBalancerState>>> snapshotAssociationsByLoadBalancer()", "full_signature": "private Observable<Map.Entry<String, List<JobLoadBalancerState>>> snapshotAssociationsByLoadBalancer()", "class_method_signature": "DefaultLoadBalancerReconciler.snapshotAssociationsByLoadBalancer()", "testcase": false, "constructor": false}, {"identifier": "cleanupExpiredIgnored", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cleanupExpiredIgnored()", "full_signature": "private void cleanupExpiredIgnored()", "class_method_signature": "DefaultLoadBalancerReconciler.cleanupExpiredIgnored()", "testcase": false, "constructor": false}, {"identifier": "updateOrphanAssociations", "parameters": "()", "modifiers": "private", "return": "Completable", "signature": "Completable updateOrphanAssociations()", "full_signature": "private Completable updateOrphanAssociations()", "class_method_signature": "DefaultLoadBalancerReconciler.updateOrphanAssociations()", "testcase": false, "constructor": false}, {"identifier": "now", "parameters": "()", "modifiers": "private", "return": "Instant", "signature": "Instant now()", "full_signature": "private Instant now()", "class_method_signature": "DefaultLoadBalancerReconciler.now()", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/loadbalancer/service/DefaultLoadBalancerReconciler.java"}, "focal_method": {"identifier": "activateCooldownFor", "parameters": "(LoadBalancerTarget target, long period, TimeUnit unit)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void activateCooldownFor(LoadBalancerTarget target, long period, TimeUnit unit) {\n        Duration periodDuration = Duration.ofMillis(unit.toMillis(period));\n        logger.debug(\"Setting a cooldown of {} for target {}\", periodDuration, target);\n        Instant untilWhen = Instant.ofEpochMilli(scheduler.now()).plus(periodDuration);\n        ignored.put(target, untilWhen);\n    }", "signature": "void activateCooldownFor(LoadBalancerTarget target, long period, TimeUnit unit)", "full_signature": "@Override public void activateCooldownFor(LoadBalancerTarget target, long period, TimeUnit unit)", "class_method_signature": "DefaultLoadBalancerReconciler.activateCooldownFor(LoadBalancerTarget target, long period, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["ofMillis", "toMillis", "debug", "plus", "ofEpochMilli", "now", "put"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}