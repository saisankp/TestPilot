{"test_class": {"identifier": "ServiceRegistrationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mocked\n    private CloseableHttpResponse response;", "modifier": "@Mocked\n    private", "type": "CloseableHttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mocked\n    private CloseableHttpClient client;", "modifier": "@Mocked\n    private", "type": "CloseableHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "@Mocked\n    private HttpClientBuilder builder;", "modifier": "@Mocked\n    private", "type": "HttpClientBuilder", "declarator": "builder", "var_name": "builder"}], "file": "framework/application/src/test/java/org/koenighotze/jee7hotel/framework/application/registry/ServiceRegistrationTest.java"}, "test_case": {"identifier": "the_reservation_url_is_returned_if_available", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void the_reservation_url_is_returned_if_available() throws IOException {\n        prepareExpectations(SC_OK);\n\n        assertThat(new ServiceRegistration().getAddNewReservationUrl()).isNotEmpty();\n    }", "signature": "void the_reservation_url_is_returned_if_available()", "full_signature": "@Test public void the_reservation_url_is_returned_if_available()", "class_method_signature": "ServiceRegistrationTest.the_reservation_url_is_returned_if_available()", "testcase": true, "constructor": false, "invocations": ["prepareExpectations", "isNotEmpty", "assertThat", "getAddNewReservationUrl"]}, "focal_class": {"identifier": "ServiceRegistration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(ServiceRegistration.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(ServiceRegistration.class.getName())", "var_name": "LOGGER"}, {"original_string": "private static final String ADD_NEW_RESERVATION_URL = \"http://localhost:8080/booking/add_new_reservation.html\";", "modifier": "private static final", "type": "String", "declarator": "ADD_NEW_RESERVATION_URL = \"http://localhost:8080/booking/add_new_reservation.html\"", "var_name": "ADD_NEW_RESERVATION_URL"}, {"original_string": "private static final String HOST_URL = \"http://localhost:8080\";", "modifier": "private static final", "type": "String", "declarator": "HOST_URL = \"http://localhost:8080\"", "var_name": "HOST_URL"}, {"original_string": "private final long MINUTES_PER_CHECK = 1L;", "modifier": "private final", "type": "long", "declarator": "MINUTES_PER_CHECK = 1L", "var_name": "MINUTES_PER_CHECK"}, {"original_string": "private boolean available = false;", "modifier": "private", "type": "boolean", "declarator": "available = false", "var_name": "available"}, {"original_string": "private LocalDateTime lastCheck = now().minusDays(1L);", "modifier": "private", "type": "LocalDateTime", "declarator": "lastCheck = now().minusDays(1L)", "var_name": "lastCheck"}], "methods": [{"identifier": "getAddNewReservationUrl", "parameters": "()", "modifiers": "@Produces @AddReservationUrl public", "return": "String", "signature": "String getAddNewReservationUrl()", "full_signature": "@Produces @AddReservationUrl public String getAddNewReservationUrl()", "class_method_signature": "ServiceRegistration.getAddNewReservationUrl()", "testcase": false, "constructor": false}], "file": "framework/application/src/main/java/org/koenighotze/jee7hotel/framework/application/registry/ServiceRegistration.java"}, "focal_method": {"identifier": "getAddNewReservationUrl", "parameters": "()", "modifiers": "@Produces @AddReservationUrl public", "return": "String", "body": "@Produces\n    @AddReservationUrl\n    public String getAddNewReservationUrl() {\n        if (lastCheck.isBefore(now().minusMinutes(MINUTES_PER_CHECK))) {\n            available = false;\n\n            // this is obviously bad...but ok for our example\n            LOGGER.info(() -> \"Checking availability of \" + ADD_NEW_RESERVATION_URL);\n            SocketConfig socketConfig = copy(DEFAULT).setSoTimeout(2000).build();\n            try (CloseableHttpClient client = HttpClientBuilder.create().setDefaultSocketConfig(socketConfig).build(); CloseableHttpResponse response = client.execute(HttpHost.create(HOST_URL), new HttpGet(ADD_NEW_RESERVATION_URL))) {\n                available = SC_OK == response.getStatusLine().getStatusCode();\n\n                if (SC_OK != response.getStatusLine().getStatusCode()) {\n                    LOGGER.log(WARNING, () -> \"Cannot access url for new reservations!\");\n                }\n            } catch (IOException e) {\n                LOGGER.log(SEVERE, e, () -> \"Cannot access url for new reservations!\");\n            }\n        }\n\n        return available ? ADD_NEW_RESERVATION_URL : null;\n    }", "signature": "String getAddNewReservationUrl()", "full_signature": "@Produces @AddReservationUrl public String getAddNewReservationUrl()", "class_method_signature": "ServiceRegistration.getAddNewReservationUrl()", "testcase": false, "constructor": false, "invocations": ["isBefore", "minusMinutes", "now", "info", "build", "setSoTimeout", "copy", "build", "setDefaultSocketConfig", "create", "execute", "create", "getStatusCode", "getStatusLine", "getStatusCode", "getStatusLine", "log", "log"]}, "repository": {"repo_id": 26170170, "url": "https://github.com/koenighotze/Hotel-Reservation-Tool", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 1659, "license": "licensed"}}