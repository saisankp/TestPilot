{"test_class": {"identifier": "FieldCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FieldCache cache;", "modifier": "private", "type": "FieldCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private int fieldSize;", "modifier": "private", "type": "int", "declarator": "fieldSize", "var_name": "fieldSize"}, {"original_string": "private int instanceFieldSize;", "modifier": "private", "type": "int", "declarator": "instanceFieldSize", "var_name": "instanceFieldSize"}], "file": "concurrency/src/test/java/com/baidu/unbiz/common/cache/FieldCacheTest.java"}, "test_case": {"identifier": "getInstanceFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getInstanceFields() {\n        Field[] result = cache.getInstanceFields(String.class);\n        Field[] fields = ReflectionUtil.getAllInstanceFields(String.class);\n\n        assertArrayEquals(result, fields);\n        instanceFieldSize = result.length;\n\n        result = cache.getInstanceFields(AnnotationClass.class);\n        fields = ReflectionUtil.getAllInstanceFields(AnnotationClass.class);\n        assertArrayEquals(result, fields);\n        getFields();\n        assertTrue(fieldSize > 0);\n        assertTrue(instanceFieldSize > 0);\n        assertTrue(fieldSize > instanceFieldSize);\n    }", "signature": "void getInstanceFields()", "full_signature": "@Test public void getInstanceFields()", "class_method_signature": "FieldCacheTest.getInstanceFields()", "testcase": true, "constructor": false, "invocations": ["getInstanceFields", "getAllInstanceFields", "assertArrayEquals", "getInstanceFields", "getAllInstanceFields", "assertArrayEquals", "getFields", "assertTrue", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "FieldCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FieldCache instance = new FieldCache();", "modifier": "private static final", "type": "FieldCache", "declarator": "instance = new FieldCache()", "var_name": "instance"}, {"original_string": "private final Computable<String, Field[]> cache = new ConcurrentCache<String, Field[]>();", "modifier": "private final", "type": "Computable<String, Field[]>", "declarator": "cache = new ConcurrentCache<String, Field[]>()", "var_name": "cache"}, {"original_string": "private final Computable<String, Map<String, Field>> cachedMap = new ConcurrentCache<String, Map<String, Field>>();", "modifier": "private final", "type": "Computable<String, Map<String, Field>>", "declarator": "cachedMap = new ConcurrentCache<String, Map<String, Field>>()", "var_name": "cachedMap"}], "methods": [{"identifier": "FieldCache", "parameters": "()", "modifiers": "private", "return": "", "signature": " FieldCache()", "full_signature": "private  FieldCache()", "class_method_signature": "FieldCache.FieldCache()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "FieldCache", "signature": "FieldCache getInstance()", "full_signature": "public static FieldCache getInstance()", "class_method_signature": "FieldCache.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "Field[]", "signature": "Field[] getFields(final Class<?> clazz)", "full_signature": "public Field[] getFields(final Class<?> clazz)", "class_method_signature": "FieldCache.getFields(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getInstanceFields", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "Field[]", "signature": "Field[] getInstanceFields(final Class<?> clazz)", "full_signature": "public Field[] getInstanceFields(final Class<?> clazz)", "class_method_signature": "FieldCache.getInstanceFields(final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "modifiers": "public", "return": "Field[]", "signature": "Field[] getFields(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "full_signature": "public Field[] getFields(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "class_method_signature": "FieldCache.getFields(final Class<?> clazz, final Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(final Class<?> clazz, String fieldName)", "modifiers": "public", "return": "Field", "signature": "Field getField(final Class<?> clazz, String fieldName)", "full_signature": "public Field getField(final Class<?> clazz, String fieldName)", "class_method_signature": "FieldCache.getField(final Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getInstanceField", "parameters": "(final Class<?> clazz, String fieldName)", "modifiers": "public", "return": "Field", "signature": "Field getInstanceField(final Class<?> clazz, String fieldName)", "full_signature": "public Field getInstanceField(final Class<?> clazz, String fieldName)", "class_method_signature": "FieldCache.getInstanceField(final Class<?> clazz, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getField", "parameters": "(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String fieldName)", "modifiers": "public", "return": "Field", "signature": "Field getField(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String fieldName)", "full_signature": "public Field getField(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String fieldName)", "class_method_signature": "FieldCache.getField(final Class<?> clazz, final Class<? extends Annotation> annotationClass, String fieldName)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/cache/FieldCache.java"}, "focal_method": {"identifier": "getInstanceFields", "parameters": "(final Class<?> clazz)", "modifiers": "public", "return": "Field[]", "body": "public Field[] getInstanceFields(final Class<?> clazz) {\n        if (clazz == null) {\n            return null;\n        }\n\n        return cache.get(ClassUtil.getFriendlyClassName(clazz) + \".instance\", new Callable<Field[]>() {\n            @Override\n            public Field[] call() throws Exception {\n                return ReflectionUtil.getAllInstanceFields(clazz, true);\n            }\n        });\n    }", "signature": "Field[] getInstanceFields(final Class<?> clazz)", "full_signature": "public Field[] getInstanceFields(final Class<?> clazz)", "class_method_signature": "FieldCache.getInstanceFields(final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["get", "getFriendlyClassName", "getAllInstanceFields"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}