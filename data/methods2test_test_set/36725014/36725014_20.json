{"test_class": {"identifier": "DeleteTest", "superclass": "", "interfaces": "", "fields": [], "file": "squel/src/test/java/com/github/gchudnov/squel/DeleteTest.java"}, "test_case": {"identifier": "from", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void from() {\n        QueryBuilder sql = Squel.delete()\n                .from(\"table\");\n\n        String actual = sql.toString();\n        String expected = \"DELETE FROM table\";\n        assertEquals(expected, actual);\n    }", "signature": "void from()", "full_signature": "@Test public void from()", "class_method_signature": "DeleteTest.from()", "testcase": true, "constructor": false, "invocations": ["from", "delete", "toString", "assertEquals"]}, "focal_class": {"identifier": "Delete", "superclass": "extends QueryBuilder", "interfaces": "", "fields": [], "methods": [{"identifier": "Delete", "parameters": "(QueryBuilderOptions options)", "modifiers": "", "return": "", "signature": " Delete(QueryBuilderOptions options)", "full_signature": "  Delete(QueryBuilderOptions options)", "class_method_signature": "Delete.Delete(QueryBuilderOptions options)", "testcase": false, "constructor": true}, {"identifier": "from", "parameters": "(String table, String alias)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder from(String table, String alias)", "full_signature": "@Override public QueryBuilder from(String table, String alias)", "class_method_signature": "Delete.from(String table, String alias)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(String condition, P param)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder where(String condition, P param)", "full_signature": "@Override public QueryBuilder where(String condition, P param)", "class_method_signature": "Delete.where(String condition, P param)", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Expression condition, P param)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder where(Expression condition, P param)", "full_signature": "@Override public QueryBuilder where(Expression condition, P param)", "class_method_signature": "Delete.where(Expression condition, P param)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String table, String alias, String condition, JoinType type)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder join(String table, String alias, String condition, JoinType type)", "full_signature": "@Override public QueryBuilder join(String table, String alias, String condition, JoinType type)", "class_method_signature": "Delete.join(String table, String alias, String condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(QueryBuilder table, String alias, String condition, JoinType type)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder join(QueryBuilder table, String alias, String condition, JoinType type)", "full_signature": "@Override public QueryBuilder join(QueryBuilder table, String alias, String condition, JoinType type)", "class_method_signature": "Delete.join(QueryBuilder table, String alias, String condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String table, String alias, Expression condition, JoinType type)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder join(String table, String alias, Expression condition, JoinType type)", "full_signature": "@Override public QueryBuilder join(String table, String alias, Expression condition, JoinType type)", "class_method_signature": "Delete.join(String table, String alias, Expression condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(QueryBuilder table, String alias, Expression condition, JoinType type)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder join(QueryBuilder table, String alias, Expression condition, JoinType type)", "full_signature": "@Override public QueryBuilder join(QueryBuilder table, String alias, Expression condition, JoinType type)", "class_method_signature": "Delete.join(QueryBuilder table, String alias, Expression condition, JoinType type)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String field, SortOrder dir)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder order(String field, SortOrder dir)", "full_signature": "@Override public QueryBuilder order(String field, SortOrder dir)", "class_method_signature": "Delete.order(String field, SortOrder dir)", "testcase": false, "constructor": false}, {"identifier": "limit", "parameters": "(int value)", "modifiers": "@Override public", "return": "QueryBuilder", "signature": "QueryBuilder limit(int value)", "full_signature": "@Override public QueryBuilder limit(int value)", "class_method_signature": "Delete.limit(int value)", "testcase": false, "constructor": false}], "file": "squel/src/main/java/com/github/gchudnov/squel/Delete.java"}, "focal_method": {"identifier": "from", "parameters": "(String table, String alias)", "modifiers": "@Override public", "return": "QueryBuilder", "body": "@Override\n    public QueryBuilder from(String table, String alias) {\n        FromTableBlock block = (FromTableBlock) mBlocks.get(1);\n        block.setFrom(table, alias);\n        return this;\n    }", "signature": "QueryBuilder from(String table, String alias)", "full_signature": "@Override public QueryBuilder from(String table, String alias)", "class_method_signature": "Delete.from(String table, String alias)", "testcase": false, "constructor": false, "invocations": ["get", "setFrom"]}, "repository": {"repo_id": 36725014, "url": "https://github.com/gchudnov/squel-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 456, "license": "licensed"}}