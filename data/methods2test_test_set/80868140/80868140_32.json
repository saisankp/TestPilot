{"test_class": {"identifier": "LoessInterpolatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "stl-decomp-4j/src/test/java/com/github/servicenow/ds/stats/stl/LoessInterpolatorTest.java"}, "test_case": {"identifier": "quadraticSmoothingWithLargeWidthGivesQuadraticFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void quadraticSmoothingWithLargeWidthGivesQuadraticFit() {\n\n\t\t// Half-period of sine plus noise, generated in Python with\n\t\t//\n\t\t// >>> x = np.arange(0, 100)\n\t\t// >>> y = 100 * np.sin(x * np.pi / 100.0)\n\t\t// >>> y = y + 20*np.random.randn(100)\n\t\t//\n\t\t// Quadratic fit:\n\t\t//\n\t\t// >>> np.polyfit(x, y, 2)\n\t\t// array([-0.042576513162, 4.318963328925, -9.80856523083 ])\n\n\t\tfinal double[] data = { -10.073853166025, -47.578434834077, 9.969567309914, 13.607475640614,\n\t\t\t\t26.336724862687, 20.24315196619, 8.522203731921, 40.879813612701, 20.348936031958, 34.851420490978,\n\t\t\t\t23.004883874872, 54.308938782219, 15.829781536312, 48.719668671254, 8.119311766507, 1.318458454996,\n\t\t\t\t47.063368648646, 53.312795063592, 83.823883969792, 59.110160316898, 77.957952679217, 27.187112586324,\n\t\t\t\t58.265304568637, 58.51100724642, 66.008865742665, 72.672400306629, 81.552532336694, 49.790263630259,\n\t\t\t\t97.490016206155, 100.088531750104, 67.022085750862, 101.72944638112, 76.523955444828, 109.879122870237,\n\t\t\t\t103.156426935471, 97.440990018768, 96.326853943821, 100.002052764625, 97.901908920881, 81.907764661345,\n\t\t\t\t104.608286357414, 70.096952411082, 87.900737922771, 123.466069349253, 86.36343272932, 96.898061547722,\n\t\t\t\t105.2409423246, 84.473529980995, 87.589406762096, 107.145948743204, 103.924243272493, 86.327435697654,\n\t\t\t\t122.078243981121, 82.664603304996, 90.610134349843, 94.333055790992, 130.280210790056, 106.70486524105,\n\t\t\t\t76.506903917192, 81.412062643472, 93.910953769154, 106.832729589699, 115.642049987031, 84.975670522389,\n\t\t\t\t97.761576968675, 111.855362368863, 72.717525044868, 81.957250239574, 61.808571079313, 70.85792217601,\n\t\t\t\t40.898527454521, 97.782149960766, 97.913155063949, 101.714088071105, 86.227528826015, 67.255531559075,\n\t\t\t\t80.13052355131, 74.988502831106, 96.560985475347, 65.285104731415, 62.127365337288, 28.616465130641,\n\t\t\t\t82.768020843782, 52.291991098773, 64.194294668567, 38.225290216514, 20.662635351816, 26.091102513734,\n\t\t\t\t24.5632772509, 23.281240785751, 23.800117109909, 52.816749904647, 33.332347686135, 28.2914005902,\n\t\t\t\t14.683404049683, 53.212854193497, 1.829566520138, 18.404833513506, -9.019769796879, 9.006983482915 };\n\n\t\tLoessInterpolator loess = new LoessInterpolator.Builder().setWidth(500000).setDegree(2).interpolate(data);\n\n\t\tfor (int i = 0; i < data.length; ++i) {\n\t\t\tDouble y = loess.smoothOnePoint(i, 0, data.length - 1);\n\t\t\tassertNotNull(y);\n\t\t\tdouble y0 = -0.042576513162 * i * i + 4.318963328925 * i - 9.80856523083;\n\t\t\tassertEquals(String.format(\"Bad value at %d\", i), y0, y, 1.0e-8);\n\t\t}\n\t}", "signature": "void quadraticSmoothingWithLargeWidthGivesQuadraticFit()", "full_signature": "@Test public void quadraticSmoothingWithLargeWidthGivesQuadraticFit()", "class_method_signature": "LoessInterpolatorTest.quadraticSmoothingWithLargeWidthGivesQuadraticFit()", "testcase": true, "constructor": false, "invocations": ["interpolate", "setDegree", "setWidth", "smoothOnePoint", "assertNotNull", "assertEquals", "format"]}, "focal_class": {"identifier": "LoessInterpolator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int fWidth;", "modifier": "private final", "type": "int", "declarator": "fWidth", "var_name": "fWidth"}, {"original_string": "private final double[] fExternalWeights;", "modifier": "private final", "type": "double[]", "declarator": "fExternalWeights", "var_name": "fExternalWeights"}, {"original_string": "final double[] fData;", "modifier": "final", "type": "double[]", "declarator": "fData", "var_name": "fData"}, {"original_string": "final double[] fWeights;", "modifier": "final", "type": "double[]", "declarator": "fWeights", "var_name": "fWeights"}], "methods": [{"identifier": "smoothOnePoint", "parameters": "(final double x, final int left, final int right)", "modifiers": "", "return": "Double", "signature": "Double smoothOnePoint(final double x, final int left, final int right)", "full_signature": " Double smoothOnePoint(final double x, final int left, final int right)", "class_method_signature": "LoessInterpolator.smoothOnePoint(final double x, final int left, final int right)", "testcase": false, "constructor": false}, {"identifier": "updateWeights", "parameters": "(double x, int left, int right)", "modifiers": "abstract", "return": "void", "signature": "void updateWeights(double x, int left, int right)", "full_signature": "abstract void updateWeights(double x, int left, int right)", "class_method_signature": "LoessInterpolator.updateWeights(double x, int left, int right)", "testcase": false, "constructor": false}, {"identifier": "computeNeighborhoodWeights", "parameters": "(double x, int left, int right)", "modifiers": "private", "return": "State", "signature": "State computeNeighborhoodWeights(double x, int left, int right)", "full_signature": "private State computeNeighborhoodWeights(double x, int left, int right)", "class_method_signature": "LoessInterpolator.computeNeighborhoodWeights(double x, int left, int right)", "testcase": false, "constructor": false}, {"identifier": "LoessInterpolator", "parameters": "(int width, double[] data, double[] externalWeights)", "modifiers": "", "return": "", "signature": " LoessInterpolator(int width, double[] data, double[] externalWeights)", "full_signature": "  LoessInterpolator(int width, double[] data, double[] externalWeights)", "class_method_signature": "LoessInterpolator.LoessInterpolator(int width, double[] data, double[] externalWeights)", "testcase": false, "constructor": true}], "file": "stl-decomp-4j/src/main/java/com/github/servicenow/ds/stats/stl/LoessInterpolator.java"}, "focal_method": {"identifier": "smoothOnePoint", "parameters": "(final double x, final int left, final int right)", "modifiers": "", "return": "Double", "body": "Double smoothOnePoint(final double x, final int left, final int right) {\n\n\t\t// Ordinarily, one doesn't do linear regression one x-value at a time, but LOESS does since\n\t\t// each x-value will typically have a different window. As a result, the weighted linear regression\n\t\t// is recast as a linear operation on the input data, weighted by this.fWeights.\n\n\t\tState state = computeNeighborhoodWeights(x, left, right);\n\n\t\tif (state == State.WEIGHTS_FAILED)\n\t\t\treturn null;\n\n\t\tif (state == State.LINEAR_OK)\n\t\t\tupdateWeights(x, left, right);\n\n\t\tdouble ys = 0.0;\n\t\tfor (int i = left; i <= right; ++i)\n\t\t\tys += fWeights[i] * fData[i];\n\n\t\treturn ys;\n\t}", "signature": "Double smoothOnePoint(final double x, final int left, final int right)", "full_signature": " Double smoothOnePoint(final double x, final int left, final int right)", "class_method_signature": "LoessInterpolator.smoothOnePoint(final double x, final int left, final int right)", "testcase": false, "constructor": false, "invocations": ["computeNeighborhoodWeights", "updateWeights"]}, "repository": {"repo_id": 80868140, "url": "https://github.com/ServiceNow/stl-decomp-4j", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 79, "size": 3949, "license": "licensed"}}