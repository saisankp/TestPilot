{"test_class": {"identifier": "TemplateResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TemplateResource instance;", "modifier": "private", "type": "TemplateResource", "declarator": "instance", "var_name": "instance"}, {"original_string": "private ItemManager mockItemMan;", "modifier": "private", "type": "ItemManager", "declarator": "mockItemMan", "var_name": "mockItemMan"}, {"original_string": "private AliasManager mockAliasMan;", "modifier": "private", "type": "AliasManager", "declarator": "mockAliasMan", "var_name": "mockAliasMan"}], "file": "coastal-hazards-portal/src/test/java/gov/usgs/cida/coastalhazards/rest/data/TemplateResourceTest.java"}, "test_case": {"identifier": "testThatOnlyStormsAreOrphaned", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testThatOnlyStormsAreOrphaned() {\n\t\tString id = \"foo\";\n\t\tItem item = new Item();\n\t\titem.setType(Type.vulnerability);\n\t\t\n\t\t//simulate Item being present in DB\n\t\twhen(mockItemMan.load(id)).thenReturn(item);\n\t\t\n\t\tinstance.orphanOriginalStormTemplate(id, mockItemMan);\n\t\tverify(mockItemMan, never()).orphan(any());\n\t}", "signature": "void testThatOnlyStormsAreOrphaned()", "full_signature": "@Test public void testThatOnlyStormsAreOrphaned()", "class_method_signature": "TemplateResourceTest.testThatOnlyStormsAreOrphaned()", "testcase": true, "constructor": false, "invocations": ["setType", "thenReturn", "when", "load", "orphanOriginalStormTemplate", "orphan", "verify", "never", "any"]}, "focal_class": {"identifier": "TemplateResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TemplateResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TemplateResource.class)", "var_name": "log"}], "methods": [{"identifier": "getTemplate", "parameters": "(@PathParam(\"id\") String id, @Context Request request)", "modifiers": "@GET @Path(\"/item/{id}\") @Produces(MediaType.APPLICATION_JSON) public", "return": "Response", "signature": "Response getTemplate(@PathParam(\"id\") String id, @Context Request request)", "full_signature": "@GET @Path(\"/item/{id}\") @Produces(MediaType.APPLICATION_JSON) public Response getTemplate(@PathParam(\"id\") String id, @Context Request request)", "class_method_signature": "TemplateResource.getTemplate(@PathParam(\"id\") String id, @Context Request request)", "testcase": false, "constructor": false}, {"identifier": "instantiateTemplate", "parameters": "(Document metadataXml, ParsedMetadata parsedMetadata, String id, String content)", "modifiers": "public", "return": "Response", "signature": "Response instantiateTemplate(Document metadataXml, ParsedMetadata parsedMetadata, String id, String content)", "full_signature": "public Response instantiateTemplate(Document metadataXml, ParsedMetadata parsedMetadata, String id, String content)", "class_method_signature": "TemplateResource.instantiateTemplate(Document metadataXml, ParsedMetadata parsedMetadata, String id, String content)", "testcase": false, "constructor": false}, {"identifier": "updateStormAlias", "parameters": "(String alias, AliasManager aliasMan, String templateId)", "modifiers": "protected", "return": "String", "signature": "String updateStormAlias(String alias, AliasManager aliasMan, String templateId)", "full_signature": "protected String updateStormAlias(String alias, AliasManager aliasMan, String templateId)", "class_method_signature": "TemplateResource.updateStormAlias(String alias, AliasManager aliasMan, String templateId)", "testcase": false, "constructor": false}, {"identifier": "instantiateStormAndHandleResponse", "parameters": "(Document metadataXml, ParsedMetadata parsedMetadata, String templateId, String childJson, String alias, boolean active, AliasManager aliasMan, ItemManager itemMan)", "modifiers": "protected", "return": "Response", "signature": "Response instantiateStormAndHandleResponse(Document metadataXml, ParsedMetadata parsedMetadata, String templateId, String childJson, String alias, boolean active, AliasManager aliasMan, ItemManager itemMan)", "full_signature": "protected Response instantiateStormAndHandleResponse(Document metadataXml, ParsedMetadata parsedMetadata, String templateId, String childJson, String alias, boolean active, AliasManager aliasMan, ItemManager itemMan)", "class_method_signature": "TemplateResource.instantiateStormAndHandleResponse(Document metadataXml, ParsedMetadata parsedMetadata, String templateId, String childJson, String alias, boolean active, AliasManager aliasMan, ItemManager itemMan)", "testcase": false, "constructor": false}, {"identifier": "hoistNewTemplateToTopLevel", "parameters": "(String newTemplateId, ItemManager itemMan)", "modifiers": "protected", "return": "void", "signature": "void hoistNewTemplateToTopLevel(String newTemplateId, ItemManager itemMan)", "full_signature": "protected void hoistNewTemplateToTopLevel(String newTemplateId, ItemManager itemMan)", "class_method_signature": "TemplateResource.hoistNewTemplateToTopLevel(String newTemplateId, ItemManager itemMan)", "testcase": false, "constructor": false}, {"identifier": "orphanOriginalStormTemplate", "parameters": "(String originalTemplateId, ItemManager itemMan)", "modifiers": "protected", "return": "void", "signature": "void orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan)", "full_signature": "protected void orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan)", "class_method_signature": "TemplateResource.orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan)", "testcase": false, "constructor": false}, {"identifier": "getCopyOfServices", "parameters": "(Layer layer)", "modifiers": "protected", "return": "List<Service>", "signature": "List<Service> getCopyOfServices(Layer layer)", "full_signature": "protected List<Service> getCopyOfServices(Layer layer)", "class_method_signature": "TemplateResource.getCopyOfServices(Layer layer)", "testcase": false, "constructor": false}, {"identifier": "instantiateStormTemplate", "parameters": "(\n\t\t\t@FormDataParam(\"layerId\") String layerId,\n\t\t\t@FormDataParam(\"activeStorm\") String active,\n\t\t\t@FormDataParam(\"alias\") String alias,\n\t\t\t@FormDataParam(\"copyType\") String copyType,\n\t\t\t@FormDataParam(\"copyVal\") String copyVal,\n\t\t\t@FormDataParam(\"trackId\") String trackId,\n\t\t\t@FormDataParam(\"file\") String metadataFile)", "modifiers": "@POST @Path(\"/storm\") @Produces(MediaType.APPLICATION_JSON) @ConfiguredRolesAllowed(ConfiguredRolesAllowedDynamicFeature.CCH_ADMIN_USER_PROP) public", "return": "Response", "signature": "Response instantiateStormTemplate(\n\t\t\t@FormDataParam(\"layerId\") String layerId,\n\t\t\t@FormDataParam(\"activeStorm\") String active,\n\t\t\t@FormDataParam(\"alias\") String alias,\n\t\t\t@FormDataParam(\"copyType\") String copyType,\n\t\t\t@FormDataParam(\"copyVal\") String copyVal,\n\t\t\t@FormDataParam(\"trackId\") String trackId,\n\t\t\t@FormDataParam(\"file\") String metadataFile)", "full_signature": "@POST @Path(\"/storm\") @Produces(MediaType.APPLICATION_JSON) @ConfiguredRolesAllowed(ConfiguredRolesAllowedDynamicFeature.CCH_ADMIN_USER_PROP) public Response instantiateStormTemplate(\n\t\t\t@FormDataParam(\"layerId\") String layerId,\n\t\t\t@FormDataParam(\"activeStorm\") String active,\n\t\t\t@FormDataParam(\"alias\") String alias,\n\t\t\t@FormDataParam(\"copyType\") String copyType,\n\t\t\t@FormDataParam(\"copyVal\") String copyVal,\n\t\t\t@FormDataParam(\"trackId\") String trackId,\n\t\t\t@FormDataParam(\"file\") String metadataFile)", "class_method_signature": "TemplateResource.instantiateStormTemplate(\n\t\t\t@FormDataParam(\"layerId\") String layerId,\n\t\t\t@FormDataParam(\"activeStorm\") String active,\n\t\t\t@FormDataParam(\"alias\") String alias,\n\t\t\t@FormDataParam(\"copyType\") String copyType,\n\t\t\t@FormDataParam(\"copyVal\") String copyVal,\n\t\t\t@FormDataParam(\"trackId\") String trackId,\n\t\t\t@FormDataParam(\"file\") String metadataFile)", "testcase": false, "constructor": false}, {"identifier": "baseTemplateItem", "parameters": "(boolean active, Bbox bbox, List<Service> serviceCopies, Summary summary)", "modifiers": "private", "return": "Item", "signature": "Item baseTemplateItem(boolean active, Bbox bbox, List<Service> serviceCopies, Summary summary)", "full_signature": "private Item baseTemplateItem(boolean active, Bbox bbox, List<Service> serviceCopies, Summary summary)", "class_method_signature": "TemplateResource.baseTemplateItem(boolean active, Bbox bbox, List<Service> serviceCopies, Summary summary)", "testcase": false, "constructor": false}, {"identifier": "copyExistingSummary", "parameters": "(String copyType, String copyVal, ItemManager itemMan, AliasManager aliasMan)", "modifiers": "private", "return": "Summary", "signature": "Summary copyExistingSummary(String copyType, String copyVal, ItemManager itemMan, AliasManager aliasMan)", "full_signature": "private Summary copyExistingSummary(String copyType, String copyVal, ItemManager itemMan, AliasManager aliasMan)", "class_method_signature": "TemplateResource.copyExistingSummary(String copyType, String copyVal, ItemManager itemMan, AliasManager aliasMan)", "testcase": false, "constructor": false}, {"identifier": "parseAllAttribute", "parameters": "(JsonObject parent)", "modifiers": "private", "return": "boolean", "signature": "boolean parseAllAttribute(JsonObject parent)", "full_signature": "private boolean parseAllAttribute(JsonObject parent)", "class_method_signature": "TemplateResource.parseAllAttribute(JsonObject parent)", "testcase": false, "constructor": false}, {"identifier": "retainAggregations", "parameters": "(JsonObject parent)", "modifiers": "private", "return": "boolean", "signature": "boolean retainAggregations(JsonObject parent)", "full_signature": "private boolean retainAggregations(JsonObject parent)", "class_method_signature": "TemplateResource.retainAggregations(JsonObject parent)", "testcase": false, "constructor": false}, {"identifier": "makeItemsFromDocument", "parameters": "(Document metadataXml, ParsedMetadata parsedMetadata, Item template, JsonArray children, Map<String, Item> childMap, ItemManager itemMan, LayerManager layerMan)", "modifiers": "private", "return": "List<Item>", "signature": "List<Item> makeItemsFromDocument(Document metadataXml, ParsedMetadata parsedMetadata, Item template, JsonArray children, Map<String, Item> childMap, ItemManager itemMan, LayerManager layerMan)", "full_signature": "private List<Item> makeItemsFromDocument(Document metadataXml, ParsedMetadata parsedMetadata, Item template, JsonArray children, Map<String, Item> childMap, ItemManager itemMan, LayerManager layerMan)", "class_method_signature": "TemplateResource.makeItemsFromDocument(Document metadataXml, ParsedMetadata parsedMetadata, Item template, JsonArray children, Map<String, Item> childMap, ItemManager itemMan, LayerManager layerMan)", "testcase": false, "constructor": false}, {"identifier": "makeItemsFromLayer", "parameters": "(Document metadataXml, ParsedMetadata parsedMetadata, Item template, String layerId, LayerManager layerMan)", "modifiers": "private", "return": "List<Item>", "signature": "List<Item> makeItemsFromLayer(Document metadataXml, ParsedMetadata parsedMetadata, Item template, String layerId, LayerManager layerMan)", "full_signature": "private List<Item> makeItemsFromLayer(Document metadataXml, ParsedMetadata parsedMetadata, Item template, String layerId, LayerManager layerMan)", "class_method_signature": "TemplateResource.makeItemsFromLayer(Document metadataXml, ParsedMetadata parsedMetadata, Item template, String layerId, LayerManager layerMan)", "testcase": false, "constructor": false}, {"identifier": "templateItem", "parameters": "(Item template, String attr, Layer layer, Summary summary)", "modifiers": "private", "return": "Item", "signature": "Item templateItem(Item template, String attr, Layer layer, Summary summary)", "full_signature": "private Item templateItem(Item template, String attr, Layer layer, Summary summary)", "class_method_signature": "TemplateResource.templateItem(Item template, String attr, Layer layer, Summary summary)", "testcase": false, "constructor": false}, {"identifier": "makeChildSummary", "parameters": "(Document metadataXml, ParsedMetadata parsedMetadata, String attr)", "modifiers": "private", "return": "Summary", "signature": "Summary makeChildSummary(Document metadataXml, ParsedMetadata parsedMetadata, String attr)", "full_signature": "private Summary makeChildSummary(Document metadataXml, ParsedMetadata parsedMetadata, String attr)", "class_method_signature": "TemplateResource.makeChildSummary(Document metadataXml, ParsedMetadata parsedMetadata, String attr)", "testcase": false, "constructor": false}, {"identifier": "makeChildItemMap", "parameters": "(List<Item> children)", "modifiers": "private", "return": "Map<String, Item>", "signature": "Map<String, Item> makeChildItemMap(List<Item> children)", "full_signature": "private Map<String, Item> makeChildItemMap(List<Item> children)", "class_method_signature": "TemplateResource.makeChildItemMap(List<Item> children)", "testcase": false, "constructor": false}, {"identifier": "makeDisplayedChildren", "parameters": "(List<Item> children)", "modifiers": "private", "return": "List<String>", "signature": "List<String> makeDisplayedChildren(List<Item> children)", "full_signature": "private List<String> makeDisplayedChildren(List<Item> children)", "class_method_signature": "TemplateResource.makeDisplayedChildren(List<Item> children)", "testcase": false, "constructor": false}, {"identifier": "gatherTemplateSummary", "parameters": "(Summary previousSummary, List<Item> children)", "modifiers": "protected", "return": "Summary", "signature": "Summary gatherTemplateSummary(Summary previousSummary, List<Item> children)", "full_signature": "protected Summary gatherTemplateSummary(Summary previousSummary, List<Item> children)", "class_method_signature": "TemplateResource.gatherTemplateSummary(Summary previousSummary, List<Item> children)", "testcase": false, "constructor": false}, {"identifier": "keywordsFromString", "parameters": "(String keywords)", "modifiers": "protected", "return": "Set<String>", "signature": "Set<String> keywordsFromString(String keywords)", "full_signature": "protected Set<String> keywordsFromString(String keywords)", "class_method_signature": "TemplateResource.keywordsFromString(String keywords)", "testcase": false, "constructor": false}, {"identifier": "findItemsToRetain", "parameters": "(Item template, boolean retainAggregations)", "modifiers": "private", "return": "List<Item>", "signature": "List<Item> findItemsToRetain(Item template, boolean retainAggregations)", "full_signature": "private List<Item> findItemsToRetain(Item template, boolean retainAggregations)", "class_method_signature": "TemplateResource.findItemsToRetain(Item template, boolean retainAggregations)", "testcase": false, "constructor": false}, {"identifier": "visibleItems", "parameters": "(JsonArray children, List<Item> items, Map<String, Item> existing)", "modifiers": "private", "return": "List<String>", "signature": "List<String> visibleItems(JsonArray children, List<Item> items, Map<String, Item> existing)", "full_signature": "private List<String> visibleItems(JsonArray children, List<Item> items, Map<String, Item> existing)", "class_method_signature": "TemplateResource.visibleItems(JsonArray children, List<Item> items, Map<String, Item> existing)", "testcase": false, "constructor": false}], "file": "coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/rest/data/TemplateResource.java"}, "focal_method": {"identifier": "orphanOriginalStormTemplate", "parameters": "(String originalTemplateId, ItemManager itemMan)", "modifiers": "protected", "return": "void", "body": "protected void orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan) {\n\t\t//can only orphan the original if there was an original\n\t\tif (!StringUtils.isEmpty(originalTemplateId)) {\n\t\t\tItem originalTemplate = itemMan.load(originalTemplateId);\n\t\t\tif (null == originalTemplate) {\n\t\t\t\tthrow new EntityNotFoundException(String.format(\n\t\t\t\t\t\"Could not find template with ID '%s'. \"\n\t\t\t\t\t+ \"Perhaps the template Item was deleted \"\n\t\t\t\t\t+ \"between the time it was persisted and the time it was read?\",\n\t\t\t\t\toriginalTemplateId));\n\t\t\t} else {\n\t\t\t\t//only orphan original template if it was a storm template\n\t\t\t\tif (Type.storms.equals(originalTemplate.getType())) {\n\t\t\t\t\tboolean success = itemMan.orphan(originalTemplate);\n\t\t\t\t\tif (!success) {\n\t\t\t\t\t\tthrow new PersistenceException(\n\t\t\t\t\t\t\tString.format(\n\t\t\t\t\t\t\t\t\"Could not orphan template with ID '%s'\",\n\t\t\t\t\t\t\t\toriginalTemplateId\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan)", "full_signature": "protected void orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan)", "class_method_signature": "TemplateResource.orphanOriginalStormTemplate(String originalTemplateId, ItemManager itemMan)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "load", "format", "equals", "getType", "orphan", "format"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}