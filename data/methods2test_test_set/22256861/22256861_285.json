{"test_class": {"identifier": "SolarFluxLazyLookupTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SolarFluxLazyLookup lookup;", "modifier": "private", "type": "SolarFluxLazyLookup", "declarator": "lookup", "var_name": "lookup"}], "file": "s3tbx-c2rcc/src/test/java/org/esa/s3tbx/c2rcc/util/SolarFluxLazyLookupTest.java"}, "test_case": {"identifier": "testEqualValuesForDifferentLeapYears", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEqualValuesForDifferentLeapYears() {\n        assertArrayEquals(lookup.getCorrectedFluxFor(0, 2008), lookup.getCorrectedFluxFor(0, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(23, 2008), lookup.getCorrectedFluxFor(23, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(50, 2008), lookup.getCorrectedFluxFor(50, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(77, 2008), lookup.getCorrectedFluxFor(77, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(100, 2012), lookup.getCorrectedFluxFor(100, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(119, 2012), lookup.getCorrectedFluxFor(119, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(150, 2012), lookup.getCorrectedFluxFor(150, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(176, 2012), lookup.getCorrectedFluxFor(176, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(200, 2012), lookup.getCorrectedFluxFor(200, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(250, 2012), lookup.getCorrectedFluxFor(250, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(300, 2012), lookup.getCorrectedFluxFor(300, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(325, 2012), lookup.getCorrectedFluxFor(325, 2004), 1e-12);\n        assertArrayEquals(lookup.getCorrectedFluxFor(365, 2012), lookup.getCorrectedFluxFor(365, 2004), 1e-12);\n    }", "signature": "void testEqualValuesForDifferentLeapYears()", "full_signature": "@Test public void testEqualValuesForDifferentLeapYears()", "class_method_signature": "SolarFluxLazyLookupTest.testEqualValuesForDifferentLeapYears()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor", "assertArrayEquals", "getCorrectedFluxFor", "getCorrectedFluxFor"]}, "focal_class": {"identifier": "SolarFluxLazyLookup", "superclass": "", "interfaces": "", "fields": [{"original_string": "final double[] solFlux;", "modifier": "final", "type": "double[]", "declarator": "solFlux", "var_name": "solFlux"}, {"original_string": "private double[][][] correctedSolFluxForADay;", "modifier": "private", "type": "double[][][]", "declarator": "correctedSolFluxForADay", "var_name": "correctedSolFluxForADay"}], "methods": [{"identifier": "SolarFluxLazyLookup", "parameters": "(double[] solFlux)", "modifiers": "public", "return": "", "signature": " SolarFluxLazyLookup(double[] solFlux)", "full_signature": "public  SolarFluxLazyLookup(double[] solFlux)", "class_method_signature": "SolarFluxLazyLookup.SolarFluxLazyLookup(double[] solFlux)", "testcase": false, "constructor": true}, {"identifier": "getCorrectedFluxFor", "parameters": "(int doy, int year)", "modifiers": "public", "return": "double[]", "signature": "double[] getCorrectedFluxFor(int doy, int year)", "full_signature": "public double[] getCorrectedFluxFor(int doy, int year)", "class_method_signature": "SolarFluxLazyLookup.getCorrectedFluxFor(int doy, int year)", "testcase": false, "constructor": false}], "file": "s3tbx-c2rcc/src/main/java/org/esa/s3tbx/c2rcc/util/SolarFluxLazyLookup.java"}, "focal_method": {"identifier": "getCorrectedFluxFor", "parameters": "(int doy, int year)", "modifiers": "public", "return": "double[]", "body": "public double[] getCorrectedFluxFor(int doy, int year) {\n        final int yearDays = SolarFluxCorrectionFactorCalculator.getNumDaysInTheYear(year);\n        int yearIndex = yearDays - 365; // can be 0 if it is a 365 days year or 1 if it is a leap year with 366 days\n        double[] corrected = correctedSolFluxForADay[yearIndex][doy];\n        if (corrected != null) {\n            return corrected;\n        }\n        final double correctionFactor = SolarFluxCorrectionFactorCalculator.getDayCorrectionFactorFor(doy, year);\n        corrected = new double[solFlux.length];\n        for (int i = 0; i < solFlux.length; i++) {\n            corrected[i] = solFlux[i] * correctionFactor;\n        }\n        correctedSolFluxForADay[yearIndex][doy] = corrected;\n        return corrected;\n    }", "signature": "double[] getCorrectedFluxFor(int doy, int year)", "full_signature": "public double[] getCorrectedFluxFor(int doy, int year)", "class_method_signature": "SolarFluxLazyLookup.getCorrectedFluxFor(int doy, int year)", "testcase": false, "constructor": false, "invocations": ["getNumDaysInTheYear", "getDayCorrectionFactorFor"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}