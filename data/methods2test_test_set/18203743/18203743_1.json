{"test_class": {"identifier": "LogstashEventFormatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LoggingEventFormat format = new LogstashEventFormat();", "modifier": "private final", "type": "LoggingEventFormat", "declarator": "format = new LogstashEventFormat()", "var_name": "format"}], "file": "logging/jms-appender/src/test/java/org/apache/servicemix/logging/jms/LogstashEventFormatTest.java"}, "test_case": {"identifier": "testBasicLogstashFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasicLogstashFormat() throws JsonException {\n        PaxLoggingEvent event = MockEvents.createInfoEvent();\n\n        JsonObject object = Json.createReader(new StringReader(format.toString(event))).readObject();\n        assertEquals(MockEvents.LOG_MESSAGE, object.getString(LogstashEventFormat.MESSAGE));\n        assertEquals(MockEvents.LOGGER_NAME, object.getString(LogstashEventFormat.SOURCE));\n        assertEquals(\"INFO\", object.getJsonArray(LogstashEventFormat.TAGS).getString(0));\n        assertEquals(MockEvents.LOG_PROPERTY_VALUE,\n                     object.getJsonObject(LogstashEventFormat.FIELDS).getString(MockEvents.LOG_PROPERTY_ID));\n        assertNotNull(object.get(LogstashEventFormat.TIMESTAMP));\n\n        System.out.println(object);\n    }", "signature": "void testBasicLogstashFormat()", "full_signature": "@Test public void testBasicLogstashFormat()", "class_method_signature": "LogstashEventFormatTest.testBasicLogstashFormat()", "testcase": true, "constructor": false, "invocations": ["createInfoEvent", "readObject", "createReader", "toString", "assertEquals", "getString", "assertEquals", "getString", "assertEquals", "getString", "getJsonArray", "assertEquals", "getString", "getJsonObject", "assertNotNull", "get", "println"]}, "focal_class": {"identifier": "LogstashEventFormat", "superclass": "", "interfaces": "implements LoggingEventFormat", "fields": [{"original_string": "protected static final DateFormat TIMESTAMP_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\");", "modifier": "protected static final", "type": "DateFormat", "declarator": "TIMESTAMP_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\")", "var_name": "TIMESTAMP_FORMAT"}, {"original_string": "protected static final String FIELDS = \"@fields\";", "modifier": "protected static final", "type": "String", "declarator": "FIELDS = \"@fields\"", "var_name": "FIELDS"}, {"original_string": "protected static final String MESSAGE = \"@message\";", "modifier": "protected static final", "type": "String", "declarator": "MESSAGE = \"@message\"", "var_name": "MESSAGE"}, {"original_string": "protected static final String SOURCE = \"@source\";", "modifier": "protected static final", "type": "String", "declarator": "SOURCE = \"@source\"", "var_name": "SOURCE"}, {"original_string": "protected static final String TAGS = \"@tags\";", "modifier": "protected static final", "type": "String", "declarator": "TAGS = \"@tags\"", "var_name": "TAGS"}, {"original_string": "protected static final String TIMESTAMP = \"@timestamp\";", "modifier": "protected static final", "type": "String", "declarator": "TIMESTAMP = \"@timestamp\"", "var_name": "TIMESTAMP"}], "methods": [{"identifier": "toString", "parameters": "(PaxLoggingEvent event)", "modifiers": "public", "return": "String", "signature": "String toString(PaxLoggingEvent event)", "full_signature": "public String toString(PaxLoggingEvent event)", "class_method_signature": "LogstashEventFormat.toString(PaxLoggingEvent event)", "testcase": false, "constructor": false}], "file": "logging/jms-appender/src/main/java/org/apache/servicemix/logging/jms/LogstashEventFormat.java"}, "focal_method": {"identifier": "toString", "parameters": "(PaxLoggingEvent event)", "modifiers": "public", "return": "String", "body": "public String toString(PaxLoggingEvent event) {\n        JsonObjectBuilder object = Json.createObjectBuilder();\n        try {\n            object.add(MESSAGE, event.getMessage());\n            object.add(SOURCE, event.getLoggerName());\n            object.add(TIMESTAMP, TIMESTAMP_FORMAT.format(new Date(event.getTimeStamp())));\n\n            JsonObjectBuilder fields = Json.createObjectBuilder();\n            for (Object property : event.getProperties().entrySet()) {\n                Map.Entry<String, Object> entry = (Map.Entry<String, Object>) property;\n                fields.add(entry.getKey(), entry.getValue().toString());\n            }\n\n            object.add(FIELDS, fields);\n\n            JsonArrayBuilder tags = Json.createArrayBuilder();\n            tags.add(event.getLevel().toString());\n            object.add(TAGS, tags);\n        } catch (JsonException e) {\n            // let's return a minimal, String-based message representation instead\n            return \"{ \\\"\" + MESSAGE + \"\\\" : \" + event.getMessage() + \"}\";\n        }\n        return object.build().toString();\n    }", "signature": "String toString(PaxLoggingEvent event)", "full_signature": "public String toString(PaxLoggingEvent event)", "class_method_signature": "LogstashEventFormat.toString(PaxLoggingEvent event)", "testcase": false, "constructor": false, "invocations": ["createObjectBuilder", "add", "getMessage", "add", "getLoggerName", "add", "format", "getTimeStamp", "createObjectBuilder", "entrySet", "getProperties", "add", "getKey", "toString", "getValue", "add", "createArrayBuilder", "add", "toString", "getLevel", "add", "getMessage", "toString", "build"]}, "repository": {"repo_id": 18203743, "url": "https://github.com/apache/servicemix", "language": "Java", "is_fork": false, "fork_count": 149, "stargazer_count": 124, "size": 4543, "license": "licensed"}}