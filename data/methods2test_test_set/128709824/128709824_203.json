{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/StringUtilsTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        Assert.assertTrue(StringUtils.equals(null, null));\n        Assert.assertFalse(StringUtils.equals(null, \"\"));\n        Assert.assertFalse(StringUtils.equals(\"\", null));\n        Assert.assertTrue(StringUtils.equals(\"\", \"\"));\n        Assert.assertFalse(StringUtils.equals(\"1\", \"2\"));\n        Assert.assertTrue(StringUtils.equals(\"1\", \"1\"));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "StringUtilsTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "assertFalse", "equals", "assertTrue", "equals"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String   EMPTY              = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY              = \"\"", "var_name": "EMPTY"}, {"original_string": "public static final String   CONTEXT_SEP        = \"/\";", "modifier": "public static final", "type": "String", "declarator": "CONTEXT_SEP        = \"/\"", "var_name": "CONTEXT_SEP"}, {"original_string": "public static final String   ALL                = \"*\";", "modifier": "public static final", "type": "String", "declarator": "ALL                = \"*\"", "var_name": "ALL"}, {"original_string": "public static final String   DEFAULT            = \"default\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT            = \"default\"", "var_name": "DEFAULT"}, {"original_string": "public static final String   TRUE               = \"true\";", "modifier": "public static final", "type": "String", "declarator": "TRUE               = \"true\"", "var_name": "TRUE"}, {"original_string": "public static final String   FALSE              = \"false\";", "modifier": "public static final", "type": "String", "declarator": "FALSE              = \"false\"", "var_name": "FALSE"}, {"original_string": "public static final String   NULL               = \"null\";", "modifier": "public static final", "type": "String", "declarator": "NULL               = \"null\"", "var_name": "NULL"}, {"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}], "methods": [{"identifier": "isEmpty", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(CharSequence cs)", "full_signature": "public static boolean isEmpty(CharSequence cs)", "class_method_signature": "StringUtils.isEmpty(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(CharSequence cs)", "full_signature": "public static boolean isNotEmpty(CharSequence cs)", "class_method_signature": "StringUtils.isNotEmpty(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(CharSequence cs)", "full_signature": "public static boolean isBlank(CharSequence cs)", "class_method_signature": "StringUtils.isBlank(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "isNotBlank", "parameters": "(CharSequence cs)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotBlank(CharSequence cs)", "full_signature": "public static boolean isNotBlank(CharSequence cs)", "class_method_signature": "StringUtils.isNotBlank(CharSequence cs)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trim(String str)", "full_signature": "public static String trim(String str)", "class_method_signature": "StringUtils.trim(String str)", "testcase": false, "constructor": false}, {"identifier": "trimToNull", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trimToNull(String str)", "full_signature": "public static String trimToNull(String str)", "class_method_signature": "StringUtils.trimToNull(String str)", "testcase": false, "constructor": false}, {"identifier": "trimToEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trimToEmpty(String str)", "full_signature": "public static String trimToEmpty(String str)", "class_method_signature": "StringUtils.trimToEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(byte[] bytes, String charsetName)", "modifiers": "public static", "return": "String", "signature": "String toString(byte[] bytes, String charsetName)", "full_signature": "public static String toString(byte[] bytes, String charsetName)", "class_method_signature": "StringUtils.toString(byte[] bytes, String charsetName)", "testcase": false, "constructor": false}, {"identifier": "defaultString", "parameters": "(final Object str)", "modifiers": "public static", "return": "String", "signature": "String defaultString(final Object str)", "full_signature": "public static String defaultString(final Object str)", "class_method_signature": "StringUtils.defaultString(final Object str)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object o, String defaultVal)", "modifiers": "public static", "return": "String", "signature": "String toString(Object o, String defaultVal)", "full_signature": "public static String toString(Object o, String defaultVal)", "class_method_signature": "StringUtils.toString(Object o, String defaultVal)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object o)", "modifiers": "public static", "return": "String", "signature": "String toString(Object o)", "full_signature": "public static String toString(Object o)", "class_method_signature": "StringUtils.toString(Object o)", "testcase": false, "constructor": false}, {"identifier": "objectsToString", "parameters": "(Object[] args)", "modifiers": "public static", "return": "String", "signature": "String objectsToString(Object[] args)", "full_signature": "public static String objectsToString(Object[] args)", "class_method_signature": "StringUtils.objectsToString(Object[] args)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(CharSequence s1, CharSequence s2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(CharSequence s1, CharSequence s2)", "full_signature": "public static boolean equals(CharSequence s1, CharSequence s2)", "class_method_signature": "StringUtils.equals(CharSequence s1, CharSequence s2)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String src, String separator)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String src, String separator)", "full_signature": "public static String[] split(String src, String separator)", "class_method_signature": "StringUtils.split(String src, String separator)", "testcase": false, "constructor": false}, {"identifier": "splitWithCommaOrSemicolon", "parameters": "(String src)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitWithCommaOrSemicolon(String src)", "full_signature": "public static String[] splitWithCommaOrSemicolon(String src)", "class_method_signature": "StringUtils.splitWithCommaOrSemicolon(String src)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String[] strings, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(String[] strings, String separator)", "full_signature": "public static String join(String[] strings, String separator)", "class_method_signature": "StringUtils.join(String[] strings, String separator)", "testcase": false, "constructor": false}, {"identifier": "joinWithComma", "parameters": "(String... strings)", "modifiers": "public static", "return": "String", "signature": "String joinWithComma(String... strings)", "full_signature": "public static String joinWithComma(String... strings)", "class_method_signature": "StringUtils.joinWithComma(String... strings)", "testcase": false, "constructor": false}, {"identifier": "substringAfter", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String", "signature": "String substringAfter(String str, String separator)", "full_signature": "public static String substringAfter(String str, String separator)", "class_method_signature": "StringUtils.substringAfter(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "substringBefore", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String", "signature": "String substringBefore(String str, String separator)", "full_signature": "public static String substringBefore(String str, String separator)", "class_method_signature": "StringUtils.substringBefore(String str, String separator)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/StringUtils.java"}, "focal_method": {"identifier": "equals", "parameters": "(CharSequence s1, CharSequence s2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equals(CharSequence s1, CharSequence s2) {\n        return s1 == null ? s2 == null : s1.equals(s2);\n    }", "signature": "boolean equals(CharSequence s1, CharSequence s2)", "full_signature": "public static boolean equals(CharSequence s1, CharSequence s2)", "class_method_signature": "StringUtils.equals(CharSequence s1, CharSequence s2)", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}