{"test_class": {"identifier": "EncryptionProviderFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private EncryptionKeyProvider provider;", "modifier": "@Mock\n  private", "type": "EncryptionKeyProvider", "declarator": "provider", "var_name": "provider"}], "file": "components/encryption/src/test/java/org/cloudfoundry/credhub/services/EncryptionProviderFactoryTest.java"}, "test_case": {"identifier": "getEncryptionService_whenEncryptionServiceIsAlreadyInitialized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getEncryptionService_whenEncryptionServiceIsAlreadyInitialized() throws Exception {\n    final EncryptionProviderFactory subject = new EncryptionProviderFactory(\n      mock(EncryptionKeysConfiguration.class),\n      mock(TimedRetry.class),\n      mock(PasswordKeyProxyFactory.class)\n    );\n\n    when(provider.getProviderType()).thenReturn(ProviderType.INTERNAL);\n\n    final InternalEncryptionService internal = (InternalEncryptionService) subject.getEncryptionService(provider);\n    final InternalEncryptionService internalAgain = (InternalEncryptionService) subject.getEncryptionService(provider);\n    assertThat(internal, sameInstance(internalAgain));\n    assertThat(internal, instanceOf(PasswordEncryptionService.class));\n  }", "signature": "void getEncryptionService_whenEncryptionServiceIsAlreadyInitialized()", "full_signature": "@Test public void getEncryptionService_whenEncryptionServiceIsAlreadyInitialized()", "class_method_signature": "EncryptionProviderFactoryTest.getEncryptionService_whenEncryptionServiceIsAlreadyInitialized()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getProviderType", "getEncryptionService", "getEncryptionService", "assertThat", "sameInstance", "assertThat", "instanceOf"]}, "focal_class": {"identifier": "EncryptionProviderFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EncryptionKeysConfiguration encryptionKeysConfiguration;", "modifier": "private final", "type": "EncryptionKeysConfiguration", "declarator": "encryptionKeysConfiguration", "var_name": "encryptionKeysConfiguration"}, {"original_string": "private final TimedRetry timedRetry;", "modifier": "private final", "type": "TimedRetry", "declarator": "timedRetry", "var_name": "timedRetry"}, {"original_string": "private final PasswordKeyProxyFactory passwordKeyProxyFactory;", "modifier": "private final", "type": "PasswordKeyProxyFactory", "declarator": "passwordKeyProxyFactory", "var_name": "passwordKeyProxyFactory"}, {"original_string": "private final Map<String, EncryptionProvider> map;", "modifier": "private final", "type": "Map<String, EncryptionProvider>", "declarator": "map", "var_name": "map"}], "methods": [{"identifier": "EncryptionProviderFactory", "parameters": "(final EncryptionKeysConfiguration keysConfiguration, final TimedRetry timedRetry,\n                                   final PasswordKeyProxyFactory passwordKeyProxyFactory)", "modifiers": "@Autowired public", "return": "", "signature": " EncryptionProviderFactory(final EncryptionKeysConfiguration keysConfiguration, final TimedRetry timedRetry,\n                                   final PasswordKeyProxyFactory passwordKeyProxyFactory)", "full_signature": "@Autowired public  EncryptionProviderFactory(final EncryptionKeysConfiguration keysConfiguration, final TimedRetry timedRetry,\n                                   final PasswordKeyProxyFactory passwordKeyProxyFactory)", "class_method_signature": "EncryptionProviderFactory.EncryptionProviderFactory(final EncryptionKeysConfiguration keysConfiguration, final TimedRetry timedRetry,\n                                   final PasswordKeyProxyFactory passwordKeyProxyFactory)", "testcase": false, "constructor": true}, {"identifier": "getEncryptionService", "parameters": "(final EncryptionKeyProvider provider)", "modifiers": "public", "return": "EncryptionProvider", "signature": "EncryptionProvider getEncryptionService(final EncryptionKeyProvider provider)", "full_signature": "public EncryptionProvider getEncryptionService(final EncryptionKeyProvider provider)", "class_method_signature": "EncryptionProviderFactory.getEncryptionService(final EncryptionKeyProvider provider)", "testcase": false, "constructor": false}], "file": "components/encryption/src/main/java/org/cloudfoundry/credhub/services/EncryptionProviderFactory.java"}, "focal_method": {"identifier": "getEncryptionService", "parameters": "(final EncryptionKeyProvider provider)", "modifiers": "public", "return": "EncryptionProvider", "body": "public EncryptionProvider getEncryptionService(final EncryptionKeyProvider provider) throws Exception {\n    final EncryptionProvider encryptionService;\n\n    if (map.containsKey(provider.getProviderName())) {\n      return map.get(provider.getProviderName());\n    } else {\n      switch (provider.getProviderType()) {\n        case HSM:\n          encryptionService = new LunaEncryptionService(new LunaConnection(provider.getConfiguration()),\n            encryptionKeysConfiguration.isKeyCreationEnabled(),\n            timedRetry);\n          break;\n        case KMS_PLUGIN:\n          encryptionService = new KMSEncryptionProvider(provider.getConfiguration());\n          break;\n        default:\n          encryptionService = new PasswordEncryptionService(passwordKeyProxyFactory);\n          break;\n      }\n      map.put(provider.getProviderName(), encryptionService);\n      return encryptionService;\n    }\n  }", "signature": "EncryptionProvider getEncryptionService(final EncryptionKeyProvider provider)", "full_signature": "public EncryptionProvider getEncryptionService(final EncryptionKeyProvider provider)", "class_method_signature": "EncryptionProviderFactory.getEncryptionService(final EncryptionKeyProvider provider)", "testcase": false, "constructor": false, "invocations": ["containsKey", "getProviderName", "get", "getProviderName", "getProviderType", "getConfiguration", "isKeyCreationEnabled", "getConfiguration", "put", "getProviderName"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}