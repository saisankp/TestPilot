{"test_class": {"identifier": "AgentLauncherTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/jvm/src/test/java/org/jolokia/jvmagent/client/AgentLauncherTest.java"}, "test_case": {"identifier": "simple", "parameters": "()", "modifiers": "@Test(enabled = false) public", "return": "void", "body": "@Test(enabled = false)\n    public void simple() {\n        forbidSystemExitCall();\n        try {\n            AgentLauncher.main();\n        } catch (ExitTrappedException exp) {\n\n        } finally {\n            enableSystemExitCall();\n        }\n    }", "signature": "void simple()", "full_signature": "@Test(enabled = false) public void simple()", "class_method_signature": "AgentLauncherTest.simple()", "testcase": true, "constructor": false, "invocations": ["forbidSystemExitCall", "main", "enableSystemExitCall"]}, "focal_class": {"identifier": "AgentLauncher", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "AgentLauncher", "parameters": "()", "modifiers": "private", "return": "", "signature": " AgentLauncher()", "full_signature": "private  AgentLauncher()", "class_method_signature": "AgentLauncher.AgentLauncher()", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String... args)", "modifiers": "@SuppressWarnings(\"PMD.ExceptionAsFlowControl\") public static", "return": "void", "signature": "void main(String... args)", "full_signature": "@SuppressWarnings(\"PMD.ExceptionAsFlowControl\") public static void main(String... args)", "class_method_signature": "AgentLauncher.main(String... args)", "testcase": false, "constructor": false}], "file": "agent/jvm/src/main/java/org/jolokia/jvmagent/client/AgentLauncher.java"}, "focal_method": {"identifier": "main", "parameters": "(String... args)", "modifiers": "@SuppressWarnings(\"PMD.ExceptionAsFlowControl\") public static", "return": "void", "body": "@SuppressWarnings(\"PMD.ExceptionAsFlowControl\")\n    public static void main(String... args) {\n        OptionsAndArgs options;\n        try {\n            options = new OptionsAndArgs(CommandDispatcher.getAvailableCommands(),args);\n            VirtualMachineHandler vmHandler = new VirtualMachineHandler(options);\n            CommandDispatcher dispatcher = new CommandDispatcher(options);\n\n            // Attach a VirtualMachine to a given PID (if PID is given)\n            Object vm = options.needsVm() ? vmHandler.attachVirtualMachine() : null;\n\n            // Dispatch command\n            int exitCode = 0;\n            try {\n                exitCode = dispatcher.dispatchCommand(vm,vmHandler);\n            } catch (InvocationTargetException e) {\n                throw new ProcessingException(\"InvocationTargetException\",e,options);\n            } catch (NoSuchMethodException e) {\n                throw new ProcessingException(\"Internal: NoSuchMethod\",e,options);\n            } catch (IllegalAccessException e) {\n                throw new ProcessingException(\"IllegalAccess\",e,options);\n            } finally {\n                if (vm != null) {\n                    vmHandler.detachAgent(vm);\n                }\n            }\n            System.exit(exitCode);\n\n        } catch (IllegalArgumentException exp) {\n            System.err.println(\"Error: \" + exp.getMessage() + \"\\n\");\n            CommandDispatcher.printHelp();\n            System.exit(1);\n        } catch (ProcessingException exp) {\n            exp.printErrorMessage();\n            System.exit(1);\n        }\n    }", "signature": "void main(String... args)", "full_signature": "@SuppressWarnings(\"PMD.ExceptionAsFlowControl\") public static void main(String... args)", "class_method_signature": "AgentLauncher.main(String... args)", "testcase": false, "constructor": false, "invocations": ["getAvailableCommands", "needsVm", "attachVirtualMachine", "dispatchCommand", "detachAgent", "exit", "println", "getMessage", "printHelp", "exit", "printErrorMessage", "exit"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}