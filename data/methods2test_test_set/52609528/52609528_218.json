{"test_class": {"identifier": "HttpServerRequestUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/util/HttpServerRequestUtilTest.java"}, "test_case": {"identifier": "testIncreaseRequestHops", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIncreaseRequestHops(TestContext context){\n        IncreaseHopsRequest request = new IncreaseHopsRequest(new CaseInsensitiveHeaders());\n\n        context.assertFalse(HttpRequestHeader.containsHeader(request.headers(), HttpRequestHeader.X_HOPS),\n                \"x-hops header should not be present yet\");\n\n        HttpServerRequestUtil.increaseRequestHops(request);\n\n        context.assertTrue(HttpRequestHeader.containsHeader(request.headers(), HttpRequestHeader.X_HOPS),\n                \"x-hops header should be present\");\n        context.assertEquals(1, HttpRequestHeader.getInteger(request.headers(), HttpRequestHeader.X_HOPS));\n\n        HttpServerRequestUtil.increaseRequestHops(request);\n        context.assertEquals(2, HttpRequestHeader.getInteger(request.headers(), HttpRequestHeader.X_HOPS));\n\n        for (int i = 0; i < 500; i++) {\n            HttpServerRequestUtil.increaseRequestHops(request);\n        }\n\n        context.assertEquals(502, HttpRequestHeader.getInteger(request.headers(), HttpRequestHeader.X_HOPS));\n    }", "signature": "void testIncreaseRequestHops(TestContext context)", "full_signature": "@Test public void testIncreaseRequestHops(TestContext context)", "class_method_signature": "HttpServerRequestUtilTest.testIncreaseRequestHops(TestContext context)", "testcase": true, "constructor": false, "invocations": ["assertFalse", "containsHeader", "headers", "increaseRequestHops", "assertTrue", "containsHeader", "headers", "assertEquals", "getInteger", "headers", "increaseRequestHops", "assertEquals", "getInteger", "headers", "increaseRequestHops", "assertEquals", "getInteger", "headers"]}, "focal_class": {"identifier": "HttpServerRequestUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "HttpServerRequestUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " HttpServerRequestUtil()", "full_signature": "private  HttpServerRequestUtil()", "class_method_signature": "HttpServerRequestUtil.HttpServerRequestUtil()", "testcase": false, "constructor": true}, {"identifier": "isRemoteAddressLoopbackAddress", "parameters": "(HttpServerRequest request)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRemoteAddressLoopbackAddress(HttpServerRequest request)", "full_signature": "public static boolean isRemoteAddressLoopbackAddress(HttpServerRequest request)", "class_method_signature": "HttpServerRequestUtil.isRemoteAddressLoopbackAddress(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "increaseRequestHops", "parameters": "(HttpServerRequest request)", "modifiers": "public static", "return": "void", "signature": "void increaseRequestHops(HttpServerRequest request)", "full_signature": "public static void increaseRequestHops(HttpServerRequest request)", "class_method_signature": "HttpServerRequestUtil.increaseRequestHops(HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "isRequestHopsLimitExceeded", "parameters": "(HttpServerRequest request, Integer hopsLimit)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRequestHopsLimitExceeded(HttpServerRequest request, Integer hopsLimit)", "full_signature": "public static boolean isRequestHopsLimitExceeded(HttpServerRequest request, Integer hopsLimit)", "class_method_signature": "HttpServerRequestUtil.isRequestHopsLimitExceeded(HttpServerRequest request, Integer hopsLimit)", "testcase": false, "constructor": false}, {"identifier": "prepareResponse", "parameters": "(HttpServerRequest request, HttpClientResponse response)", "modifiers": "public static", "return": "void", "signature": "void prepareResponse(HttpServerRequest request, HttpClientResponse response)", "full_signature": "public static void prepareResponse(HttpServerRequest request, HttpClientResponse response)", "class_method_signature": "HttpServerRequestUtil.prepareResponse(HttpServerRequest request, HttpClientResponse response)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/util/HttpServerRequestUtil.java"}, "focal_method": {"identifier": "increaseRequestHops", "parameters": "(HttpServerRequest request)", "modifiers": "public static", "return": "void", "body": "public static void increaseRequestHops(HttpServerRequest request){\n        Integer hops = HttpRequestHeader.getInteger(request.headers(), HttpRequestHeader.X_HOPS, 0);\n        hops = hops + 1;\n        request.headers().set(HttpRequestHeader.X_HOPS.getName(), String.valueOf(hops));\n    }", "signature": "void increaseRequestHops(HttpServerRequest request)", "full_signature": "public static void increaseRequestHops(HttpServerRequest request)", "class_method_signature": "HttpServerRequestUtil.increaseRequestHops(HttpServerRequest request)", "testcase": false, "constructor": false, "invocations": ["getInteger", "headers", "set", "headers", "getName", "valueOf"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}