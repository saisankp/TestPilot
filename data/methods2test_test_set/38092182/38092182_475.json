{"test_class": {"identifier": "MraidNativeCommandHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String IMAGE_URI_VALUE = \"file://tmp/expectedFile.jpg\";", "modifier": "private static final", "type": "String", "declarator": "IMAGE_URI_VALUE = \"file://tmp/expectedFile.jpg\"", "var_name": "IMAGE_URI_VALUE"}, {"original_string": "private static final int TIME_TO_PAUSE_FOR_NETWORK = 300;", "modifier": "private static final", "type": "int", "declarator": "TIME_TO_PAUSE_FOR_NETWORK = 300", "var_name": "TIME_TO_PAUSE_FOR_NETWORK"}, {"original_string": "private static final String FAKE_IMAGE_DATA = \"imageFileData\";", "modifier": "private static final", "type": "String", "declarator": "FAKE_IMAGE_DATA = \"imageFileData\"", "var_name": "FAKE_IMAGE_DATA"}, {"original_string": "private static final String CALENDAR_START_TIME = \"2013-08-14T20:00:00-0000\";", "modifier": "private static final", "type": "String", "declarator": "CALENDAR_START_TIME = \"2013-08-14T20:00:00-0000\"", "var_name": "CALENDAR_START_TIME"}, {"original_string": "@Mock MraidCommandFailureListener mraidCommandFailureListener;", "modifier": "@Mock", "type": "MraidCommandFailureListener", "declarator": "mraidCommandFailureListener", "var_name": "mraidCommandFailureListener"}, {"original_string": "private MraidNativeCommandHandler subject;", "modifier": "private", "type": "MraidNativeCommandHandler", "declarator": "subject", "var_name": "subject"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private Map<String, String> params;", "modifier": "private", "type": "Map<String, String>", "declarator": "params", "var_name": "params"}, {"original_string": "private File expectedFile;", "modifier": "private", "type": "File", "declarator": "expectedFile", "var_name": "expectedFile"}, {"original_string": "private File pictureDirectory;", "modifier": "private", "type": "File", "declarator": "pictureDirectory", "var_name": "pictureDirectory"}, {"original_string": "private File fileWithoutExtension;", "modifier": "private", "type": "File", "declarator": "fileWithoutExtension", "var_name": "fileWithoutExtension"}, {"original_string": "private TestHttpResponseWithHeaders response;", "modifier": "private", "type": "TestHttpResponseWithHeaders", "declarator": "response", "var_name": "response"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java"}, "test_case": {"identifier": "createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent", "parameters": "()", "modifiers": "@Ignore(\"Mraid 2.0\") @Test public", "return": "void", "body": "@Ignore(\"Mraid 2.0\")\n    @Test\n    public void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent() throws Exception {\n        setupCalendarParams();\n        params.put(\"frequency\", \"monthly\");\n        params.put(\"daysInMonth\", \"55\");\n\n        subject.createCalendarEvent(context, params);\n\n        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();\n\n        assertThat(intent).isNull();\n        assertThat(ShadowLog.getLogs().size()).isEqualTo(1);\n    }", "signature": "void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent()", "full_signature": "@Ignore(\"Mraid 2.0\") @Test public void createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent()", "class_method_signature": "MraidNativeCommandHandlerTest.createCalendarEvent_withMonthlyRecurrence_withInvalidDaysOfMonth_shouldNotCreateCalendarIntent()", "testcase": true, "constructor": false, "invocations": ["setupCalendarParams", "put", "put", "createCalendarEvent", "getNextStartedActivity", "getShadowApplication", "isNull", "assertThat", "isEqualTo", "assertThat", "size", "getLogs"]}, "focal_class": {"identifier": "MraidNativeCommandHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "@VisibleForTesting\n    static final String MIME_TYPE_HEADER = \"Content-Type\";", "modifier": "@VisibleForTesting\n    static final", "type": "String", "declarator": "MIME_TYPE_HEADER = \"Content-Type\"", "var_name": "MIME_TYPE_HEADER"}, {"original_string": "private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;", "modifier": "private static final", "type": "int", "declarator": "MAX_NUMBER_DAYS_IN_MONTH = 31", "var_name": "MAX_NUMBER_DAYS_IN_MONTH"}, {"original_string": "private static final String[] DATE_FORMATS = {\n            \"yyyy-MM-dd'T'HH:mm:ssZZZZZ\",\n            \"yyyy-MM-dd'T'HH:mmZZZZZ\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "DATE_FORMATS = {\n            \"yyyy-MM-dd'T'HH:mm:ssZZZZZ\",\n            \"yyyy-MM-dd'T'HH:mmZZZZZ\"\n    }", "var_name": "DATE_FORMATS"}, {"original_string": "public static final String ANDROID_CALENDAR_CONTENT_TYPE = \"vnd.android.cursor.item/event\";", "modifier": "public static final", "type": "String", "declarator": "ANDROID_CALENDAR_CONTENT_TYPE = \"vnd.android.cursor.item/event\"", "var_name": "ANDROID_CALENDAR_CONTENT_TYPE"}], "methods": [{"identifier": "createCalendarEvent", "parameters": "(final Context context, final Map<String, String> params)", "modifiers": "", "return": "void", "signature": "void createCalendarEvent(final Context context, final Map<String, String> params)", "full_signature": " void createCalendarEvent(final Context context, final Map<String, String> params)", "class_method_signature": "MraidNativeCommandHandler.createCalendarEvent(final Context context, final Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "storePicture", "parameters": "(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "modifiers": "", "return": "void", "signature": "void storePicture(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "full_signature": " void storePicture(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "class_method_signature": "MraidNativeCommandHandler.storePicture(@NonNull final Context context,\n            @NonNull final String imageUrl,\n            @NonNull MraidCommandFailureListener failureListener)", "testcase": false, "constructor": false}, {"identifier": "isTelAvailable", "parameters": "(Context context)", "modifiers": "", "return": "boolean", "signature": "boolean isTelAvailable(Context context)", "full_signature": " boolean isTelAvailable(Context context)", "class_method_signature": "MraidNativeCommandHandler.isTelAvailable(Context context)", "testcase": false, "constructor": false}, {"identifier": "isSmsAvailable", "parameters": "(Context context)", "modifiers": "", "return": "boolean", "signature": "boolean isSmsAvailable(Context context)", "full_signature": " boolean isSmsAvailable(Context context)", "class_method_signature": "MraidNativeCommandHandler.isSmsAvailable(Context context)", "testcase": false, "constructor": false}, {"identifier": "isStorePictureSupported", "parameters": "(Context context)", "modifiers": "public", "return": "boolean", "signature": "boolean isStorePictureSupported(Context context)", "full_signature": "public boolean isStorePictureSupported(Context context)", "class_method_signature": "MraidNativeCommandHandler.isStorePictureSupported(Context context)", "testcase": false, "constructor": false}, {"identifier": "isCalendarAvailable", "parameters": "(Context context)", "modifiers": "", "return": "boolean", "signature": "boolean isCalendarAvailable(Context context)", "full_signature": " boolean isCalendarAvailable(Context context)", "class_method_signature": "MraidNativeCommandHandler.isCalendarAvailable(Context context)", "testcase": false, "constructor": false}, {"identifier": "isInlineVideoAvailable", "parameters": "(@NonNull Activity activity, @NonNull View view)", "modifiers": "@TargetApi(11)", "return": "boolean", "signature": "boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "full_signature": "@TargetApi(11) boolean isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "class_method_signature": "MraidNativeCommandHandler.isInlineVideoAvailable(@NonNull Activity activity, @NonNull View view)", "testcase": false, "constructor": false}, {"identifier": "translateJSParamsToAndroidCalendarEventMapping", "parameters": "(Map<String, String> params)", "modifiers": "@TargetApi(VERSION_CODES.ICE_CREAM_SANDWICH) private", "return": "Map<String, Object>", "signature": "Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params)", "full_signature": "@TargetApi(VERSION_CODES.ICE_CREAM_SANDWICH) private Map<String, Object> translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params)", "class_method_signature": "MraidNativeCommandHandler.translateJSParamsToAndroidCalendarEventMapping(Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(String dateTime)", "modifiers": "private", "return": "Date", "signature": "Date parseDate(String dateTime)", "full_signature": "private Date parseDate(String dateTime)", "class_method_signature": "MraidNativeCommandHandler.parseDate(String dateTime)", "testcase": false, "constructor": false}, {"identifier": "parseRecurrenceRule", "parameters": "(Map<String, String> params)", "modifiers": "private", "return": "String", "signature": "String parseRecurrenceRule(Map<String, String> params)", "full_signature": "private String parseRecurrenceRule(Map<String, String> params)", "class_method_signature": "MraidNativeCommandHandler.parseRecurrenceRule(Map<String, String> params)", "testcase": false, "constructor": false}, {"identifier": "translateWeekIntegersToDays", "parameters": "(String expression)", "modifiers": "private", "return": "String", "signature": "String translateWeekIntegersToDays(String expression)", "full_signature": "private String translateWeekIntegersToDays(String expression)", "class_method_signature": "MraidNativeCommandHandler.translateWeekIntegersToDays(String expression)", "testcase": false, "constructor": false}, {"identifier": "translateMonthIntegersToDays", "parameters": "(String expression)", "modifiers": "private", "return": "String", "signature": "String translateMonthIntegersToDays(String expression)", "full_signature": "private String translateMonthIntegersToDays(String expression)", "class_method_signature": "MraidNativeCommandHandler.translateMonthIntegersToDays(String expression)", "testcase": false, "constructor": false}, {"identifier": "dayNumberToDayOfWeekString", "parameters": "(int number)", "modifiers": "private", "return": "String", "signature": "String dayNumberToDayOfWeekString(int number)", "full_signature": "private String dayNumberToDayOfWeekString(int number)", "class_method_signature": "MraidNativeCommandHandler.dayNumberToDayOfWeekString(int number)", "testcase": false, "constructor": false}, {"identifier": "dayNumberToDayOfMonthString", "parameters": "(int number)", "modifiers": "private", "return": "String", "signature": "String dayNumberToDayOfMonthString(int number)", "full_signature": "private String dayNumberToDayOfMonthString(int number)", "class_method_signature": "MraidNativeCommandHandler.dayNumberToDayOfMonthString(int number)", "testcase": false, "constructor": false}, {"identifier": "downloadImage", "parameters": "(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "modifiers": "", "return": "void", "signature": "void downloadImage(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "full_signature": " void downloadImage(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "class_method_signature": "MraidNativeCommandHandler.downloadImage(final Context context, final String uriString,\n            final MraidCommandFailureListener failureListener)", "testcase": false, "constructor": false}, {"identifier": "showUserDialog", "parameters": "(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "modifiers": "private", "return": "void", "signature": "void showUserDialog(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "full_signature": "private void showUserDialog(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "class_method_signature": "MraidNativeCommandHandler.showUserDialog(final Context context, final String imageUrl,\n            final MraidCommandFailureListener failureListener)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java"}, "focal_method": {"identifier": "createCalendarEvent", "parameters": "(final Context context, final Map<String, String> params)", "modifiers": "", "return": "void", "body": "void createCalendarEvent(final Context context, final Map<String, String> params)\n            throws MraidCommandException {\n        if (isCalendarAvailable(context)) {\n            try {\n                Map<String, Object> calendarParams = translateJSParamsToAndroidCalendarEventMapping(params);\n                Intent intent = new Intent(Intent.ACTION_INSERT).setType(ANDROID_CALENDAR_CONTENT_TYPE);\n                for (String key : calendarParams.keySet()) {\n                    Object value = calendarParams.get(key);\n                    if (value instanceof Long) {\n                        intent.putExtra(key, ((Long) value).longValue());\n                    } else if (value instanceof Integer) {\n                        intent.putExtra(key, ((Integer) value).intValue());\n                    } else {\n                        intent.putExtra(key, (String) value);\n                    }\n                }\n                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n                context.startActivity(intent);\n            } catch (ActivityNotFoundException e) {\n                MoPubLog.d(\"no calendar app installed\");\n                throw new MraidCommandException(\n                        \"Action is unsupported on this device - no calendar app installed\");\n            } catch (IllegalArgumentException e) {\n                MoPubLog.d(\"create calendar: invalid parameters \" + e.getMessage());\n                throw new MraidCommandException(e);\n            } catch (Exception e) {\n                MoPubLog.d(\"could not create calendar event\");\n                throw new MraidCommandException(e);\n            }\n        } else {\n            MoPubLog.d(\"unsupported action createCalendarEvent for devices pre-ICS\");\n            throw new MraidCommandException(\"Action is \" +\n                    \"unsupported on this device (need Android version Ice Cream Sandwich or \" +\n                    \"above)\");\n        }\n    }", "signature": "void createCalendarEvent(final Context context, final Map<String, String> params)", "full_signature": " void createCalendarEvent(final Context context, final Map<String, String> params)", "class_method_signature": "MraidNativeCommandHandler.createCalendarEvent(final Context context, final Map<String, String> params)", "testcase": false, "constructor": false, "invocations": ["isCalendarAvailable", "translateJSParamsToAndroidCalendarEventMapping", "setType", "keySet", "get", "putExtra", "longValue", "putExtra", "intValue", "putExtra", "setFlags", "startActivity", "d", "d", "getMessage", "d", "d"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}