{"test_class": {"identifier": "GasteigerMarsiliPartialChargesTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "tool/charges/src/test/java/org/openscience/cdk/charges/GasteigerMarsiliPartialChargesTest.java"}, "test_case": {"identifier": "testAssignGasteigerMarsiliSigmaPartialCharges_IAtomContainer_Boolean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAssignGasteigerMarsiliSigmaPartialCharges_IAtomContainer_Boolean() throws Exception {\n        double[] testResult = {0.07915, -0.25264, 0.05783, 0.05783, 0.05783};\n\n        GasteigerMarsiliPartialCharges peoe = new GasteigerMarsiliPartialCharges();\n\n        IAtomContainer molecule = builder.newInstance(IAtomContainer.class);\n        molecule.addAtom(new Atom(\"C\"));\n        molecule.addAtom(new Atom(\"F\"));\n        molecule.addBond(0, 1, IBond.Order.SINGLE);\n\n        addExplicitHydrogens(molecule);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        lpcheck.saturate(molecule);\n\n        peoe.assignGasteigerMarsiliSigmaPartialCharges(molecule, true);\n        for (int i = 0; i < molecule.getAtomCount(); i++) {\n            //logger.debug(\"Charge for atom:\"+i+\" S:\"+mol.getAtomAt(i).getSymbol()+\" Charge:\"+mol.getAtomAt(i).getCharge());\n            Assert.assertEquals(testResult[i], molecule.getAtom(i).getCharge(), 0.01);\n        }\n\n    }", "signature": "void testAssignGasteigerMarsiliSigmaPartialCharges_IAtomContainer_Boolean()", "full_signature": "@Test public void testAssignGasteigerMarsiliSigmaPartialCharges_IAtomContainer_Boolean()", "class_method_signature": "GasteigerMarsiliPartialChargesTest.testAssignGasteigerMarsiliSigmaPartialCharges_IAtomContainer_Boolean()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "addAtom", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "assignGasteigerMarsiliSigmaPartialCharges", "getAtomCount", "assertEquals", "getCharge", "getAtom"]}, "focal_class": {"identifier": "GasteigerMarsiliPartialCharges", "superclass": "", "interfaces": "implements IChargeCalculator", "fields": [{"original_string": "private double DEOC_HYDROGEN = 20.02;", "modifier": "private", "type": "double", "declarator": "DEOC_HYDROGEN = 20.02", "var_name": "DEOC_HYDROGEN"}, {"original_string": "private double MX_DAMP       = 0.5;", "modifier": "private", "type": "double", "declarator": "MX_DAMP       = 0.5", "var_name": "MX_DAMP"}, {"original_string": "private double MX_ITERATIONS = 20;", "modifier": "private", "type": "double", "declarator": "MX_ITERATIONS = 20", "var_name": "MX_ITERATIONS"}, {"original_string": "private int    STEP_SIZE     = 5;", "modifier": "private", "type": "int", "declarator": "STEP_SIZE     = 5", "var_name": "STEP_SIZE"}], "methods": [{"identifier": "GasteigerMarsiliPartialCharges", "parameters": "()", "modifiers": "public", "return": "", "signature": " GasteigerMarsiliPartialCharges()", "full_signature": "public  GasteigerMarsiliPartialCharges()", "class_method_signature": "GasteigerMarsiliPartialCharges.GasteigerMarsiliPartialCharges()", "testcase": false, "constructor": true}, {"identifier": "setChiCatHydrogen", "parameters": "(double chiCat)", "modifiers": "public", "return": "void", "signature": "void setChiCatHydrogen(double chiCat)", "full_signature": "public void setChiCatHydrogen(double chiCat)", "class_method_signature": "GasteigerMarsiliPartialCharges.setChiCatHydrogen(double chiCat)", "testcase": false, "constructor": false}, {"identifier": "setMaxGasteigerDamp", "parameters": "(double damp)", "modifiers": "public", "return": "void", "signature": "void setMaxGasteigerDamp(double damp)", "full_signature": "public void setMaxGasteigerDamp(double damp)", "class_method_signature": "GasteigerMarsiliPartialCharges.setMaxGasteigerDamp(double damp)", "testcase": false, "constructor": false}, {"identifier": "setMaxGasteigerIters", "parameters": "(double iters)", "modifiers": "public", "return": "void", "signature": "void setMaxGasteigerIters(double iters)", "full_signature": "public void setMaxGasteigerIters(double iters)", "class_method_signature": "GasteigerMarsiliPartialCharges.setMaxGasteigerIters(double iters)", "testcase": false, "constructor": false}, {"identifier": "getChiCatHydrogen", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getChiCatHydrogen()", "full_signature": "public double getChiCatHydrogen()", "class_method_signature": "GasteigerMarsiliPartialCharges.getChiCatHydrogen()", "testcase": false, "constructor": false}, {"identifier": "getMaxGasteigerDamp", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaxGasteigerDamp()", "full_signature": "public double getMaxGasteigerDamp()", "class_method_signature": "GasteigerMarsiliPartialCharges.getMaxGasteigerDamp()", "testcase": false, "constructor": false}, {"identifier": "getMaxGasteigerIters", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMaxGasteigerIters()", "full_signature": "public double getMaxGasteigerIters()", "class_method_signature": "GasteigerMarsiliPartialCharges.getMaxGasteigerIters()", "testcase": false, "constructor": false}, {"identifier": "assignGasteigerMarsiliSigmaPartialCharges", "parameters": "(IAtomContainer ac, boolean setCharge)", "modifiers": "public", "return": "IAtomContainer", "signature": "IAtomContainer assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "full_signature": "public IAtomContainer assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "class_method_signature": "GasteigerMarsiliPartialCharges.assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "testcase": false, "constructor": false}, {"identifier": "calculateCharges", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void calculateCharges(IAtomContainer container)", "full_signature": "@Override public void calculateCharges(IAtomContainer container)", "class_method_signature": "GasteigerMarsiliPartialCharges.calculateCharges(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getStepSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStepSize()", "full_signature": "public int getStepSize()", "class_method_signature": "GasteigerMarsiliPartialCharges.getStepSize()", "testcase": false, "constructor": false}, {"identifier": "setStepSize", "parameters": "(int step)", "modifiers": "public", "return": "void", "signature": "void setStepSize(int step)", "full_signature": "public void setStepSize(int step)", "class_method_signature": "GasteigerMarsiliPartialCharges.setStepSize(int step)", "testcase": false, "constructor": false}, {"identifier": "assignGasteigerSigmaMarsiliFactors", "parameters": "(IAtomContainer ac)", "modifiers": "public", "return": "double[]", "signature": "double[] assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "full_signature": "public double[] assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "class_method_signature": "GasteigerMarsiliPartialCharges.assignGasteigerSigmaMarsiliFactors(IAtomContainer ac)", "testcase": false, "constructor": false}], "file": "tool/charges/src/main/java/org/openscience/cdk/charges/GasteigerMarsiliPartialCharges.java"}, "focal_method": {"identifier": "assignGasteigerMarsiliSigmaPartialCharges", "parameters": "(IAtomContainer ac, boolean setCharge)", "modifiers": "public", "return": "IAtomContainer", "body": "public IAtomContainer assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)\n            throws Exception {\n\n        //\t\tif (setCharge) {\n        //\t\t\tatomTypeCharges.setCharges(ac); // not necessary initial charge\n        //\t\t}\n        /* add the initial charge to 0. According results of Gasteiger */\n        for (int i = 0; i < ac.getAtomCount(); i++)\n            ac.getAtom(i).setCharge(0.0);\n        double[] gasteigerFactors = assignGasteigerSigmaMarsiliFactors(ac);//a,b,c,deoc,chi,q\n        double alpha = 1.0;\n        double q;\n        double deoc;\n\n        IAtom[] atoms = null;\n        int atom1 = 0;\n        int atom2 = 0;\n\n        double[] q_old = new double[ac.getAtomCount()];\n        for (int i = 0; i < q_old.length; i++)\n            q_old[0] = 20.0;\n\n        out: for (int i = 0; i < MX_ITERATIONS; i++) {\n            alpha *= MX_DAMP;\n            boolean isDifferent = false;\n            for (int j = 0; j < ac.getAtomCount(); j++) {\n                q = gasteigerFactors[STEP_SIZE * j + j + 5];\n                double difference = Math.abs(q_old[j]) - Math.abs(q);\n                if (Math.abs(difference) > 0.001) isDifferent = true;\n                q_old[j] = q;\n\n                gasteigerFactors[STEP_SIZE * j + j + 4] = gasteigerFactors[STEP_SIZE * j + j + 2] * q * q\n                        + gasteigerFactors[STEP_SIZE * j + j + 1] * q + gasteigerFactors[STEP_SIZE * j + j];\n                //\t\t\t\tlogger.debug(\"g4: \"+gasteigerFactors[STEP_SIZE * j + j + 4]);\n            }\n            if (!isDifferent) /* automatically break the maximum iterations */\n            break out;\n\n            //            bonds = ac.getBonds();\n            Iterator<IBond> bonds = ac.bonds().iterator();\n            while (bonds.hasNext()) {\n                IBond bond = (IBond) bonds.next();\n\n                atom1 = ac.indexOf(bond.getBegin());\n                atom2 = ac.indexOf(bond.getEnd());\n\n                if (gasteigerFactors[STEP_SIZE * atom1 + atom1 + 4] >= gasteigerFactors[STEP_SIZE * atom2 + atom2 + 4]) {\n                    if (ac.getAtom(atom2).getSymbol().equals(\"H\")) {\n                        deoc = DEOC_HYDROGEN;\n                    } else {\n                        deoc = gasteigerFactors[STEP_SIZE * atom2 + atom2 + 3];\n                    }\n                } else {\n                    if (ac.getAtom(atom1).getSymbol().equals(\"H\")) {\n                        deoc = DEOC_HYDROGEN;\n                    } else {\n                        deoc = gasteigerFactors[STEP_SIZE * atom1 + atom1 + 3];\n                    }\n                }\n\n                q = (gasteigerFactors[STEP_SIZE * atom1 + atom1 + 4] - gasteigerFactors[STEP_SIZE * atom2 + atom2 + 4])\n                        / deoc;\n                //\t\t\t\tlogger.debug(\"qq: \"+q);\n                gasteigerFactors[STEP_SIZE * atom1 + atom1 + 5] -= (q * alpha);\n                gasteigerFactors[STEP_SIZE * atom2 + atom2 + 5] += (q * alpha);\n            }\n        }\n\n        for (int i = 0; i < ac.getAtomCount(); i++) {\n            ac.getAtom(i).setCharge(gasteigerFactors[STEP_SIZE * i + i + 5]);\n        }\n        return ac;\n    }", "signature": "IAtomContainer assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "full_signature": "public IAtomContainer assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "class_method_signature": "GasteigerMarsiliPartialCharges.assignGasteigerMarsiliSigmaPartialCharges(IAtomContainer ac, boolean setCharge)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "setCharge", "getAtom", "assignGasteigerSigmaMarsiliFactors", "getAtomCount", "getAtomCount", "abs", "abs", "abs", "iterator", "bonds", "hasNext", "next", "indexOf", "getBegin", "indexOf", "getEnd", "equals", "getSymbol", "getAtom", "equals", "getSymbol", "getAtom", "getAtomCount", "setCharge", "getAtom"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}