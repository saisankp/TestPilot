{"test_class": {"identifier": "PoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Pool<ListNode<Integer>> pool;", "modifier": "private", "type": "Pool<ListNode<Integer>>", "declarator": "pool", "var_name": "pool"}], "file": "src/edu/lclark/orego/util/PoolTest.java"}, "test_case": {"identifier": "testAllocate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAllocate() {\n\t\t// There should be 5 available nodes\n\t\tassertEquals(5, pool.size());\n\t\t// Ask for 5 nodes; they should all be different\n\t\tListNode<Integer> previous = null;\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tassertFalse(pool.isEmpty());\n\t\t\tListNode<Integer> node = pool.allocate();\n\t\t\tassertNotSame(node, previous);\n\t\t\tassertNotNull(node);\n\t\t\tprevious = node;\n\t\t}\n\t\t// The pool should now be empty\n\t\tassertTrue(pool.isEmpty());\n\t\tassertNull(pool.allocate());\n\t}", "signature": "void testAllocate()", "full_signature": "@Test public void testAllocate()", "class_method_signature": "PoolTest.testAllocate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "assertFalse", "isEmpty", "allocate", "assertNotSame", "assertNotNull", "assertTrue", "isEmpty", "assertNull", "allocate"]}, "focal_class": {"identifier": "Pool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private T free;", "modifier": "private", "type": "T", "declarator": "free", "var_name": "free"}], "methods": [{"identifier": "allocate", "parameters": "()", "modifiers": "public synchronized", "return": "T", "signature": "T allocate()", "full_signature": "public synchronized T allocate()", "class_method_signature": "Pool.allocate()", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "(T element)", "modifiers": "public", "return": "T", "signature": "T free(T element)", "full_signature": "public T free(T element)", "class_method_signature": "Pool.free(T element)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "Pool.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Pool.size()", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/util/Pool.java"}, "focal_method": {"identifier": "allocate", "parameters": "()", "modifiers": "public synchronized", "return": "T", "body": "public synchronized T allocate() {\n\t\tif (free == null) {\n\t\t\treturn null;\n\t\t}\n\t\tfinal T result = free;\n\t\tfree = free.getNext();\n\t\treturn result;\n\t}", "signature": "T allocate()", "full_signature": "public synchronized T allocate()", "class_method_signature": "Pool.allocate()", "testcase": false, "constructor": false, "invocations": ["getNext"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}