{"test_class": {"identifier": "ThreadPoolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ThreadPool threadPool;", "modifier": "private", "type": "ThreadPool", "declarator": "threadPool", "var_name": "threadPool"}], "file": "CoreFeatures/Task/ThreadPool/src/test/java/info/smart_tools/smartactors/task/thread_pool/ThreadPoolTest.java"}, "test_case": {"identifier": "Should_executeTasksOnDifferentThreads", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_executeTasksOnDifferentThreads()\n            throws Exception {\n        ITask sleepTask = new SleepingTask();\n\n        ITask task1 = spy(sleepTask), task2 = spy(sleepTask);\n        ITask task3 = mock(ITask.class);\n\n        assertTrue(threadPool.tryExecute(task1));\n        assertTrue(threadPool.tryExecute(task2));\n        // Now there is no more free threads.\n        assertFalse(threadPool.tryExecute(task3));\n\n        verify(task1, timeout(200)).execute();\n        verify(task1, timeout(100)).execute();\n    }", "signature": "void Should_executeTasksOnDifferentThreads()", "full_signature": "@Test public void Should_executeTasksOnDifferentThreads()", "class_method_signature": "ThreadPoolTest.Should_executeTasksOnDifferentThreads()", "testcase": true, "constructor": false, "invocations": ["spy", "spy", "mock", "assertTrue", "tryExecute", "assertTrue", "tryExecute", "assertFalse", "tryExecute", "execute", "verify", "timeout", "execute", "verify", "timeout"]}, "focal_class": {"identifier": "ThreadPool", "superclass": "", "interfaces": "implements IThreadPool", "fields": [{"original_string": "private final Queue<ThreadImpl> threadsQueue;", "modifier": "private final", "type": "Queue<ThreadImpl>", "declarator": "threadsQueue", "var_name": "threadsQueue"}, {"original_string": "private IScope scope;", "modifier": "private", "type": "IScope", "declarator": "scope", "var_name": "scope"}, {"original_string": "private boolean terminating = false;", "modifier": "private", "type": "boolean", "declarator": "terminating = false", "var_name": "terminating"}], "methods": [{"identifier": "ThreadPool", "parameters": "(final int threadCount)", "modifiers": "public", "return": "", "signature": " ThreadPool(final int threadCount)", "full_signature": "public  ThreadPool(final int threadCount)", "class_method_signature": "ThreadPool.ThreadPool(final int threadCount)", "testcase": false, "constructor": true}, {"identifier": "tryExecute", "parameters": "(final ITask task)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean tryExecute(final ITask task)", "full_signature": "@Override public boolean tryExecute(final ITask task)", "class_method_signature": "ThreadPool.tryExecute(final ITask task)", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void terminate()", "full_signature": "@Override public void terminate()", "class_method_signature": "ThreadPool.terminate()", "testcase": false, "constructor": false}, {"identifier": "returnThread", "parameters": "(final ThreadImpl thread)", "modifiers": "", "return": "void", "signature": "void returnThread(final ThreadImpl thread)", "full_signature": " void returnThread(final ThreadImpl thread)", "class_method_signature": "ThreadPool.returnThread(final ThreadImpl thread)", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "", "return": "IScope", "signature": "IScope getScope()", "full_signature": " IScope getScope()", "class_method_signature": "ThreadPool.getScope()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Task/ThreadPool/src/main/java/info/smart_tools/smartactors/task/thread_pool/ThreadPool.java"}, "focal_method": {"identifier": "tryExecute", "parameters": "(final ITask task)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean tryExecute(final ITask task)\n            throws TaskExecutionException {\n        ThreadImpl thread = threadsQueue.poll();\n\n        if (null != thread) {\n            thread.execute(task);\n            return true;\n        }\n\n        return false;\n    }", "signature": "boolean tryExecute(final ITask task)", "full_signature": "@Override public boolean tryExecute(final ITask task)", "class_method_signature": "ThreadPool.tryExecute(final ITask task)", "testcase": false, "constructor": false, "invocations": ["poll", "execute"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}