{"test_class": {"identifier": "TransformDistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "JAICore/jaicore-basic/src/test/java/ai/libs/jaicore/basic/metric/TransformDistanceTest.java"}, "test_case": {"identifier": "testCorrectnessForDistanceCalculation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCorrectnessForDistanceCalculation() {\n\t\t// Input.\n\t\tdouble[] timeSeries1 = { 1, 1, 1, 1, 1, 1 };\n\t\tdouble[] timeSeries2 = { 1, 1, 1, 1, 1, 1 };\n\t\t// Expectation.\n\t\tdouble expectation = 0;\n\n\t\tTransformDistance td = new TransformDistance(0.5, new DynamicTimeWarping());\n\t\tdouble distance = td.distance(timeSeries1, timeSeries2);\n\n\t\tassertEquals(expectation, distance, 0);\n\t}", "signature": "void testCorrectnessForDistanceCalculation()", "full_signature": "@Test public void testCorrectnessForDistanceCalculation()", "class_method_signature": "TransformDistanceTest.testCorrectnessForDistanceCalculation()", "testcase": true, "constructor": false, "invocations": ["distance", "assertEquals"]}, "focal_class": {"identifier": "TransformDistance", "superclass": "extends AWeightedTrigometricDistance", "interfaces": "", "fields": [{"original_string": "private IVectorTransform transform;", "modifier": "private", "type": "IVectorTransform", "declarator": "transform", "var_name": "transform"}, {"original_string": "private IDistanceMetric timeSeriesDistance;", "modifier": "private", "type": "IDistanceMetric", "declarator": "timeSeriesDistance", "var_name": "timeSeriesDistance"}, {"original_string": "private IDistanceMetric baseTransformDistance;", "modifier": "private", "type": "IDistanceMetric", "declarator": "baseTransformDistance", "var_name": "baseTransformDistance"}], "methods": [{"identifier": "TransformDistance", "parameters": "(final double alpha, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "modifiers": "public", "return": "", "signature": " TransformDistance(final double alpha, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "full_signature": "public  TransformDistance(final double alpha, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "class_method_signature": "TransformDistance.TransformDistance(final double alpha, final IVectorTransform transform, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "testcase": false, "constructor": true}, {"identifier": "TransformDistance", "parameters": "(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "modifiers": "public", "return": "", "signature": " TransformDistance(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "full_signature": "public  TransformDistance(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "class_method_signature": "TransformDistance.TransformDistance(final double alpha, final IDistanceMetric timeSeriesDistance, final IDistanceMetric transformDistance)", "testcase": false, "constructor": true}, {"identifier": "TransformDistance", "parameters": "(final double alpha, final IVectorTransform transform, final IDistanceMetric distance)", "modifiers": "public", "return": "", "signature": " TransformDistance(final double alpha, final IVectorTransform transform, final IDistanceMetric distance)", "full_signature": "public  TransformDistance(final double alpha, final IVectorTransform transform, final IDistanceMetric distance)", "class_method_signature": "TransformDistance.TransformDistance(final double alpha, final IVectorTransform transform, final IDistanceMetric distance)", "testcase": false, "constructor": true}, {"identifier": "TransformDistance", "parameters": "(final double alpha, final IDistanceMetric distance)", "modifiers": "public", "return": "", "signature": " TransformDistance(final double alpha, final IDistanceMetric distance)", "full_signature": "public  TransformDistance(final double alpha, final IDistanceMetric distance)", "class_method_signature": "TransformDistance.TransformDistance(final double alpha, final IDistanceMetric distance)", "testcase": false, "constructor": true}, {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "TransformDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-basic/src/main/java/ai/libs/jaicore/basic/metric/TransformDistance.java"}, "focal_method": {"identifier": "distance", "parameters": "(final double[] a, final double[] b)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double distance(final double[] a, final double[] b) {\n\t\tdouble[] transformA = this.transform.transform(a);\n\t\tdouble[] transformB = this.transform.transform(b);\n\t\treturn this.getA() * this.timeSeriesDistance.distance(a, b) + this.getB() * this.baseTransformDistance.distance(transformA, transformB);\n\t}", "signature": "double distance(final double[] a, final double[] b)", "full_signature": "@Override public double distance(final double[] a, final double[] b)", "class_method_signature": "TransformDistance.distance(final double[] a, final double[] b)", "testcase": false, "constructor": false, "invocations": ["transform", "transform", "getA", "distance", "getB", "distance"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}