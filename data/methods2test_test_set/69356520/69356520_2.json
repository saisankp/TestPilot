{"test_class": {"identifier": "UPSTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PATCH_CORRUPTED = \"The patch file is corrupted.\";", "modifier": "private static final", "type": "String", "declarator": "PATCH_CORRUPTED = \"The patch file is corrupted.\"", "var_name": "PATCH_CORRUPTED"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Mock\n    Context mockContext;", "modifier": "@Mock", "type": "Context", "declarator": "mockContext", "var_name": "mockContext"}], "file": "app/src/test/java/org/emunix/unipatcher/patcher/UPSTest.java"}, "test_case": {"identifier": "testReadUpsCrc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadUpsCrc() throws Exception {\n        File patch = new File(this.getClass().getResource(\"/ups/readUpsCrc.ups\").getPath());\n        UPS.UpsCrc pCrc = null;\n        try {\n            pCrc = UPS.readUpsCrc(mockContext, patch);\n        } catch (PatchException e) {\n            fail(\"Patch exception\");\n        }\n        assertEquals(pCrc.getPatchFileCRC(), pCrc.getRealPatchCRC());\n    }", "signature": "void testReadUpsCrc()", "full_signature": "@Test public void testReadUpsCrc()", "class_method_signature": "UPSTest.testReadUpsCrc()", "testcase": true, "constructor": false, "invocations": ["getPath", "getResource", "getClass", "readUpsCrc", "fail", "assertEquals", "getPatchFileCRC", "getRealPatchCRC"]}, "focal_class": {"identifier": "UPS", "superclass": "extends Patcher", "interfaces": "", "fields": [{"original_string": "private static final byte[] MAGIC_NUMBER = {0x55, 0x50, 0x53, 0x31};", "modifier": "private static final", "type": "byte[]", "declarator": "MAGIC_NUMBER = {0x55, 0x50, 0x53, 0x31}", "var_name": "MAGIC_NUMBER"}], "methods": [{"identifier": "UPS", "parameters": "(Context context, File patch, File rom, File output)", "modifiers": "public", "return": "", "signature": " UPS(Context context, File patch, File rom, File output)", "full_signature": "public  UPS(Context context, File patch, File rom, File output)", "class_method_signature": "UPS.UPS(Context context, File patch, File rom, File output)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(boolean ignoreChecksum)", "modifiers": "@Override public", "return": "void", "signature": "void apply(boolean ignoreChecksum)", "full_signature": "@Override public void apply(boolean ignoreChecksum)", "class_method_signature": "UPS.apply(boolean ignoreChecksum)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(BufferedInputStream stream)", "modifiers": "private", "return": "Pair", "signature": "Pair decode(BufferedInputStream stream)", "full_signature": "private Pair decode(BufferedInputStream stream)", "class_method_signature": "UPS.decode(BufferedInputStream stream)", "testcase": false, "constructor": false}, {"identifier": "checkMagic", "parameters": "(File f)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkMagic(File f)", "full_signature": "public static boolean checkMagic(File f)", "class_method_signature": "UPS.checkMagic(File f)", "testcase": false, "constructor": false}, {"identifier": "readUpsCrc", "parameters": "(Context context, File f)", "modifiers": "public static", "return": "UpsCrc", "signature": "UpsCrc readUpsCrc(Context context, File f)", "full_signature": "public static UpsCrc readUpsCrc(Context context, File f)", "class_method_signature": "UPS.readUpsCrc(Context context, File f)", "testcase": false, "constructor": false}, {"identifier": "readLong", "parameters": "(BufferedInputStream stream)", "modifiers": "private static", "return": "long", "signature": "long readLong(BufferedInputStream stream)", "full_signature": "private static long readLong(BufferedInputStream stream)", "class_method_signature": "UPS.readLong(BufferedInputStream stream)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/emunix/unipatcher/patcher/UPS.java"}, "focal_method": {"identifier": "readUpsCrc", "parameters": "(Context context, File f)", "modifiers": "public static", "return": "UpsCrc", "body": "public static UpsCrc readUpsCrc(Context context, File f) throws PatchException, IOException {\n        BufferedInputStream stream = null;\n        try {\n            stream = new BufferedInputStream(new FileInputStream(f));\n            CRC32 crc = new CRC32();\n            int x;\n            for (long i = f.length() - 12; i != 0; i--) {\n                x = stream.read();\n                if (x == -1)\n                    throw new PatchException(context.getString(R.string.notify_error_patch_corrupted));\n                crc.update(x);\n            }\n\n            long inputCrc = 0;\n            for (int i = 0; i < 4; i++) {\n                x = stream.read();\n                if (x == -1)\n                    throw new PatchException(context.getString(R.string.notify_error_patch_corrupted));\n                crc.update(x);\n                inputCrc += ((long) x) << (i * 8);\n            }\n\n            long outputCrc = 0;\n            for (int i = 0; i < 4; i++) {\n                x = stream.read();\n                if (x == -1)\n                    throw new PatchException(context.getString(R.string.notify_error_patch_corrupted));\n                crc.update(x);\n                outputCrc += ((long) x) << (i * 8);\n            }\n\n            long realPatchCrc = crc.getValue();\n            long patchCrc = readLong(stream);\n            if (patchCrc == -1)\n                throw new PatchException(context.getString(R.string.notify_error_patch_corrupted));\n            return new UpsCrc(inputCrc, outputCrc, patchCrc, realPatchCrc);\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n    }", "signature": "UpsCrc readUpsCrc(Context context, File f)", "full_signature": "public static UpsCrc readUpsCrc(Context context, File f)", "class_method_signature": "UPS.readUpsCrc(Context context, File f)", "testcase": false, "constructor": false, "invocations": ["length", "read", "getString", "update", "read", "getString", "update", "read", "getString", "update", "getValue", "readLong", "getString", "closeQuietly"]}, "repository": {"repo_id": 69356520, "url": "https://github.com/btimofeev/UniPatcher", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 34, "size": 1720, "license": "licensed"}}