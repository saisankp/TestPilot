{"test_class": {"identifier": "GuavaTemplateCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "handlebars-guava-cache/src/test/java/com/github/jknack/handlebars/cache/GuavaTemplateCacheTest.java"}, "test_case": {"identifier": "executionExceptionWithCheckedException", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test(expected = HandlebarsException.class) public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Test(expected = HandlebarsException.class)\n  public void executionExceptionWithCheckedException() throws IOException, ExecutionException {\n    TemplateSource source = createMock(TemplateSource.class);\n\n    Parser parser = createMock(Parser.class);\n\n    Cache<TemplateSource, Template> cache = createMock(Cache.class);\n    expect(cache.get(eq(source), isA(Callable.class))).andThrow(\n        new ExecutionException(new IOException()));\n\n    replay(cache, source, parser);\n\n    new GuavaTemplateCache(cache).get(source, parser);\n\n    verify(cache, source, parser);\n  }", "signature": "void executionExceptionWithCheckedException()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test(expected = HandlebarsException.class) public void executionExceptionWithCheckedException()", "class_method_signature": "GuavaTemplateCacheTest.executionExceptionWithCheckedException()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "createMock", "andThrow", "expect", "get", "eq", "isA", "replay", "get", "verify"]}, "focal_class": {"identifier": "GuavaTemplateCache", "superclass": "", "interfaces": "implements TemplateCache", "fields": [{"original_string": "private final Cache<TemplateSource, Template> cache;", "modifier": "private final", "type": "Cache<TemplateSource, Template>", "declarator": "cache", "var_name": "cache"}, {"original_string": "private boolean reload;", "modifier": "private", "type": "boolean", "declarator": "reload", "var_name": "reload"}], "methods": [{"identifier": "GuavaTemplateCache", "parameters": "(final Cache<TemplateSource, Template> cache)", "modifiers": "public", "return": "", "signature": " GuavaTemplateCache(final Cache<TemplateSource, Template> cache)", "full_signature": "public  GuavaTemplateCache(final Cache<TemplateSource, Template> cache)", "class_method_signature": "GuavaTemplateCache.GuavaTemplateCache(final Cache<TemplateSource, Template> cache)", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "GuavaTemplateCache.clear()", "testcase": false, "constructor": false}, {"identifier": "evict", "parameters": "(final TemplateSource source)", "modifiers": "@Override public", "return": "void", "signature": "void evict(final TemplateSource source)", "full_signature": "@Override public void evict(final TemplateSource source)", "class_method_signature": "GuavaTemplateCache.evict(final TemplateSource source)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final TemplateSource source, final Parser parser)", "modifiers": "@Override public", "return": "Template", "signature": "Template get(final TemplateSource source, final Parser parser)", "full_signature": "@Override public Template get(final TemplateSource source, final Parser parser)", "class_method_signature": "GuavaTemplateCache.get(final TemplateSource source, final Parser parser)", "testcase": false, "constructor": false}, {"identifier": "setReload", "parameters": "(final boolean reload)", "modifiers": "@Override public", "return": "GuavaTemplateCache", "signature": "GuavaTemplateCache setReload(final boolean reload)", "full_signature": "@Override public GuavaTemplateCache setReload(final boolean reload)", "class_method_signature": "GuavaTemplateCache.setReload(final boolean reload)", "testcase": false, "constructor": false}, {"identifier": "launderThrowable", "parameters": "(final TemplateSource source, final Throwable cause)", "modifiers": "private", "return": "RuntimeException", "signature": "RuntimeException launderThrowable(final TemplateSource source, final Throwable cause)", "full_signature": "private RuntimeException launderThrowable(final TemplateSource source, final Throwable cause)", "class_method_signature": "GuavaTemplateCache.launderThrowable(final TemplateSource source, final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "(final TemplateSource source)", "modifiers": "private", "return": "TemplateSource", "signature": "TemplateSource key(final TemplateSource source)", "full_signature": "private TemplateSource key(final TemplateSource source)", "class_method_signature": "GuavaTemplateCache.key(final TemplateSource source)", "testcase": false, "constructor": false}], "file": "handlebars-guava-cache/src/main/java/com/github/jknack/handlebars/cache/GuavaTemplateCache.java"}, "focal_method": {"identifier": "get", "parameters": "(final TemplateSource source, final Parser parser)", "modifiers": "@Override public", "return": "Template", "body": "@Override\n  public Template get(final TemplateSource source, final Parser parser) throws IOException {\n    requireNonNull(source, \"The source is required.\");\n    requireNonNull(parser, \"The parser is required.\");\n    try {\n      return cache.get(key(source), () -> parser.parse(source));\n    } catch (ExecutionException ex) {\n      throw launderThrowable(source, ex.getCause());\n    }\n  }", "signature": "Template get(final TemplateSource source, final Parser parser)", "full_signature": "@Override public Template get(final TemplateSource source, final Parser parser)", "class_method_signature": "GuavaTemplateCache.get(final TemplateSource source, final Parser parser)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "get", "key", "parse", "launderThrowable", "getCause"]}, "repository": {"repo_id": 4459604, "url": "https://github.com/jknack/handlebars.java", "stars": 1107, "created": "5/27/2012 3:22:22 AM +00:00", "updates": "2020-01-24T06:58:31+00:00", "fork": "False", "license": "licensed"}}