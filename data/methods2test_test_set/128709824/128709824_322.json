{"test_class": {"identifier": "WeightConsistentHashLoadBalancerTest", "superclass": "extends BaseLoadBalancerTest", "interfaces": "", "fields": [], "file": "core-impl/client/src/test/java/com/alipay/sofa/rpc/client/lb/WeightConsistentHashLoadBalancerTest.java"}, "test_case": {"identifier": "doSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doSelect() throws Exception {\n\n        WeightConsistentHashLoadBalancer loadBalancer = new WeightConsistentHashLoadBalancer(null);\n\n        Map<Integer, Integer> cnt = new HashMap<Integer, Integer>(40);\n        int size = 20;\n        int total = 100000;\n        SofaRequest request = new SofaRequest();\n        request.setInterfaceName(ConsistentHashLoadBalancerTest.class.getName());\n        request.setMethod(ConsistentHashLoadBalancerTest.class.getMethod(\"doSelect\"));\n        for (int i = 0; i < size; i++) {\n            cnt.put(9000 + i, 0);\n        }\n        List<ProviderInfo> providers = buildDiffWeightProviderList(size);\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < total; i++) {\n            ProviderInfo provider = loadBalancer.doSelect(request, providers);\n            int port = provider.getPort();\n            cnt.put(port, cnt.get(port) + 1);\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"elapsed\" + (end - start) + \"ms\");\n        System.out.println(\"avg \" + (end - start) * 1000 * 1000 / total + \"ns\");\n\n        int count = 0;\n        for (int i = 0; i < size; i++) {\n            if (cnt.get(9000 + i) > 0) {\n                count++;\n            }\n        }\n        // \u5e94\u8be5\u843d\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\n        Assert.assertTrue(count == 1);\n\n    }", "signature": "void doSelect()", "full_signature": "@Test public void doSelect()", "class_method_signature": "WeightConsistentHashLoadBalancerTest.doSelect()", "testcase": true, "constructor": false, "invocations": ["setInterfaceName", "getName", "setMethod", "getMethod", "put", "buildDiffWeightProviderList", "currentTimeMillis", "doSelect", "getPort", "put", "get", "currentTimeMillis", "println", "println", "get", "assertTrue"]}, "focal_class": {"identifier": "WeightConsistentHashLoadBalancer", "superclass": "extends AbstractLoadBalancer", "interfaces": "", "fields": [{"original_string": "private final ConcurrentHashMap<String, Selector> selectorCache = new ConcurrentHashMap<String, Selector>();", "modifier": "private final", "type": "ConcurrentHashMap<String, Selector>", "declarator": "selectorCache = new ConcurrentHashMap<String, Selector>()", "var_name": "selectorCache"}], "methods": [{"identifier": "WeightConsistentHashLoadBalancer", "parameters": "(ConsumerBootstrap consumerBootstrap)", "modifiers": "public", "return": "", "signature": " WeightConsistentHashLoadBalancer(ConsumerBootstrap consumerBootstrap)", "full_signature": "public  WeightConsistentHashLoadBalancer(ConsumerBootstrap consumerBootstrap)", "class_method_signature": "WeightConsistentHashLoadBalancer.WeightConsistentHashLoadBalancer(ConsumerBootstrap consumerBootstrap)", "testcase": false, "constructor": true}, {"identifier": "doSelect", "parameters": "(SofaRequest request, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "signature": "ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "class_method_signature": "WeightConsistentHashLoadBalancer.doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false}], "file": "core-impl/client/src/main/java/com/alipay/sofa/rpc/client/lb/WeightConsistentHashLoadBalancer.java"}, "focal_method": {"identifier": "doSelect", "parameters": "(SofaRequest request, List<ProviderInfo> providerInfos)", "modifiers": "@Override public", "return": "ProviderInfo", "body": "@Override\n    public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos) {\n        String interfaceId = request.getInterfaceName();\n        String method = request.getMethodName();\n        String key = interfaceId + \"#\" + method;\n        // \u5224\u65ad\u662f\u5426\u540c\u6837\u7684\u670d\u52a1\u5217\u8868\n        int hashcode = providerInfos.hashCode();\n        Selector selector = selectorCache.get(key);\n        // \u539f\u6765\u6ca1\u6709\n        if (selector == null ||\n            // \u6216\u8005\u670d\u52a1\u5217\u8868\u5df2\u7ecf\u53d8\u5316\n            selector.getHashCode() != hashcode) {\n            selector = new Selector(interfaceId, method, providerInfos, hashcode);\n            selectorCache.put(key, selector);\n        }\n        return selector.select(request);\n    }", "signature": "ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "full_signature": "@Override public ProviderInfo doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "class_method_signature": "WeightConsistentHashLoadBalancer.doSelect(SofaRequest request, List<ProviderInfo> providerInfos)", "testcase": false, "constructor": false, "invocations": ["getInterfaceName", "getMethodName", "hashCode", "get", "getHashCode", "put", "select"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}