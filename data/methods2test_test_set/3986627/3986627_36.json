{"test_class": {"identifier": "PropertiesResourceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PropertiesResourceImpl fixture;", "modifier": "private", "type": "PropertiesResourceImpl", "declarator": "fixture", "var_name": "fixture"}], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/util/PropertiesResourceImplTest.java"}, "test_case": {"identifier": "testReadLicenseHeaderAndComment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadLicenseHeaderAndComment()\n        throws IOException\n    {\n        URI uri = URI.createFileURI(\"src/test/resources/licenseHeader.properties\");\n        getFixture().setURI(uri);\n        getFixture().load(null);\n        PropertyFile file = (PropertyFile)getFixture().getContents().get(0);\n        EList<Property> properties = file.getProperties();\n        assertEquals(1, properties.size());\n\n        Property property = properties.get(0);\n        assertEquals(\"key\", property.getKey());\n        assertEquals(\"value\", property.getValue());\n        assertEquals(\"licensed under\\napache license\\nv3\", file.getLicenseHeader());\n    }", "signature": "void testReadLicenseHeaderAndComment()", "full_signature": "@Test public void testReadLicenseHeaderAndComment()", "class_method_signature": "PropertiesResourceImplTest.testReadLicenseHeaderAndComment()", "testcase": true, "constructor": false, "invocations": ["createFileURI", "setURI", "getFixture", "load", "getFixture", "get", "getContents", "getFixture", "getProperties", "assertEquals", "size", "get", "assertEquals", "getKey", "assertEquals", "getValue", "assertEquals", "getLicenseHeader"]}, "focal_class": {"identifier": "PropertiesResourceImpl", "superclass": "extends ResourceImpl", "interfaces": "", "fields": [{"original_string": "private int savedProperties;", "modifier": "private", "type": "int", "declarator": "savedProperties", "var_name": "savedProperties"}, {"original_string": "public static final String OPTION_FILEMODE = \"file.mode\";", "modifier": "public static final", "type": "String", "declarator": "OPTION_FILEMODE = \"file.mode\"", "var_name": "OPTION_FILEMODE"}, {"original_string": "public static final String OPTION_ENCODING = \"encoding\";", "modifier": "public static final", "type": "String", "declarator": "OPTION_ENCODING = \"encoding\"", "var_name": "OPTION_ENCODING"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PropertiesResourceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PropertiesResourceImpl.class)", "var_name": "LOG"}, {"original_string": "private static final LoadingCache<String, ReentrantReadWriteLock> LOCKS = CacheBuilder.newBuilder().maximumSize(10000).build(new CacheLoader<String, ReentrantReadWriteLock>() {\n\n\t\t@Override\n\t\tpublic ReentrantReadWriteLock load(String key) throws Exception {\n\t\t\treturn new ReentrantReadWriteLock();\n\t\t}\n\t});", "modifier": "private static final", "type": "LoadingCache<String, ReentrantReadWriteLock>", "declarator": "LOCKS = CacheBuilder.newBuilder().maximumSize(10000).build(new CacheLoader<String, ReentrantReadWriteLock>() {\n\n\t\t@Override\n\t\tpublic ReentrantReadWriteLock load(String key) throws Exception {\n\t\t\treturn new ReentrantReadWriteLock();\n\t\t}\n\t})", "var_name": "LOCKS"}], "methods": [{"identifier": "PropertiesResourceImpl", "parameters": "(URI uri)", "modifiers": "public", "return": "", "signature": " PropertiesResourceImpl(URI uri)", "full_signature": "public  PropertiesResourceImpl(URI uri)", "class_method_signature": "PropertiesResourceImpl.PropertiesResourceImpl(URI uri)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "(Map<?, ?> options)", "modifiers": "@Override public", "return": "void", "signature": "void load(Map<?, ?> options)", "full_signature": "@Override public void load(Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.load(Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "doLoad", "parameters": "(InputStream inputStream, Map<?, ?> options)", "modifiers": "@Override protected", "return": "void", "signature": "void doLoad(InputStream inputStream, Map<?, ?> options)", "full_signature": "@Override protected void doLoad(InputStream inputStream, Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.doLoad(InputStream inputStream, Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "getPropertyType", "parameters": "(Map<?, ?> options)", "modifiers": "private", "return": "String", "signature": "String getPropertyType(Map<?, ?> options)", "full_signature": "private String getPropertyType(Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.getPropertyType(Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Map<?, ?> options)", "modifiers": "@Override public", "return": "void", "signature": "void save(Map<?, ?> options)", "full_signature": "@Override public void save(Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.save(Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "doSave", "parameters": "(OutputStream outputStream, Map<?, ?> options)", "modifiers": "@Override protected", "return": "void", "signature": "void doSave(OutputStream outputStream, Map<?, ?> options)", "full_signature": "@Override protected void doSave(OutputStream outputStream, Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.doSave(OutputStream outputStream, Map<?, ?> options)", "testcase": false, "constructor": false}, {"identifier": "getSavedProperties", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSavedProperties()", "full_signature": "public int getSavedProperties()", "class_method_signature": "PropertiesResourceImpl.getSavedProperties()", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/util/PropertiesResourceImpl.java"}, "focal_method": {"identifier": "load", "parameters": "(Map<?, ?> options)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void load(Map<?, ?> options) throws IOException {\n\n\t\tReentrantReadWriteLock lock = LOCKS\n\t\t\t\t.getUnchecked(getURI() == null ? \"temp\" : getURI()\n\t\t\t\t\t\t.toFileString());\n\n\t\tReadLock readLock = lock.readLock();\n\t\ttry {\n\t\t\tif (!readLock.tryLock(2, TimeUnit.MINUTES)) {\n\t\t\t\tLOG.warn(\"Failed to aquire read lock for {}\", getURI());\n\t\t\t\treadLock = null;\n\t\t\t\tthrow new IOException(\"Could not load \" + getURI());\n\t\t\t}\n\t\t\tsuper.load(options);\n\t\t} catch (InterruptedException e) {\n\t\t\tLOG.warn(\"Interrupted while trying to aquire read lock for {}\",\n\t\t\t\t\tgetURI());\n\t\t\tthrow new IOException(\"Could not load \" + getURI());\n\t\t} finally {\n\t\t\tif (readLock != null)\n\t\t\t\treadLock.unlock();\n\t\t}\n\t}", "signature": "void load(Map<?, ?> options)", "full_signature": "@Override public void load(Map<?, ?> options)", "class_method_signature": "PropertiesResourceImpl.load(Map<?, ?> options)", "testcase": false, "constructor": false, "invocations": ["getUnchecked", "getURI", "toFileString", "getURI", "readLock", "tryLock", "warn", "getURI", "getURI", "load", "warn", "getURI", "getURI", "unlock"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}