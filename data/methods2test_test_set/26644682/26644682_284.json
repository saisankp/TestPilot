{"test_class": {"identifier": "ClassPathManifestInfoProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/info/ClassPathManifestInfoProviderTest.java"}, "test_case": {"identifier": "shouldReadFromFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReadFromFile() throws Exception {\n        // given\n        final ClassPathManifestInfoProvider provider = new ClassPathManifestInfoProvider(\"/git.properties\", \"source1\");\n\n        // when\n        final ManifestInfo manifestInfo = provider.getManifestInfo();\n\n        // then\n        assertEquals(\"1.0.0\", manifestInfo.getVersionId());\n        assertEquals(\"abcd1234\", manifestInfo.getBuildId());\n    }", "signature": "void shouldReadFromFile()", "full_signature": "@Test public void shouldReadFromFile()", "class_method_signature": "ClassPathManifestInfoProviderTest.shouldReadFromFile()", "testcase": true, "constructor": false, "invocations": ["getManifestInfo", "assertEquals", "getVersionId", "assertEquals", "getBuildId"]}, "focal_class": {"identifier": "ClassPathManifestInfoProvider", "superclass": "", "interfaces": "implements ManifestInfoProvider", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ClassPathManifestInfoProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ClassPathManifestInfoProvider.class)", "var_name": "LOGGER"}, {"original_string": "private final String resource;", "modifier": "private final", "type": "String", "declarator": "resource", "var_name": "resource"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "ClassPathManifestInfoProvider", "parameters": "(String resource, String name)", "modifiers": "public", "return": "", "signature": " ClassPathManifestInfoProvider(String resource, String name)", "full_signature": "public  ClassPathManifestInfoProvider(String resource, String name)", "class_method_signature": "ClassPathManifestInfoProvider.ClassPathManifestInfoProvider(String resource, String name)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ClassPathManifestInfoProvider.getName()", "testcase": false, "constructor": false}, {"identifier": "getManifestInfo", "parameters": "()", "modifiers": "@Override public", "return": "ManifestInfo", "signature": "ManifestInfo getManifestInfo()", "full_signature": "@Override public ManifestInfo getManifestInfo()", "class_method_signature": "ClassPathManifestInfoProvider.getManifestInfo()", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/info/ClassPathManifestInfoProvider.java"}, "focal_method": {"identifier": "getManifestInfo", "parameters": "()", "modifiers": "@Override public", "return": "ManifestInfo", "body": "@Override\n    public ManifestInfo getManifestInfo() {\n        final Properties properties = new Properties();\n        final InputStream gitProperties = ClassPathManifestInfoProvider.class.getResourceAsStream(resource);\n        if (gitProperties != null) {\n            try {\n                properties.load(gitProperties);\n            } catch (IOException e) {\n                LOGGER.debug(\"Unable to read from resource '{}'.\", resource, e);\n            }\n        } else {\n            LOGGER.debug(\"Resource '{}' does not exist.\", resource);\n        }\n        final String versionId = Optional.ofNullable(properties.getProperty(\"git.build.version\")).orElse(\"N/A\");\n        final String buildId = Optional.ofNullable(properties.getProperty(\"git.commit.id.abbrev\")).orElse(\"N/A\");\n        return new ManifestInfo(versionId, buildId);\n    }", "signature": "ManifestInfo getManifestInfo()", "full_signature": "@Override public ManifestInfo getManifestInfo()", "class_method_signature": "ClassPathManifestInfoProvider.getManifestInfo()", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "load", "debug", "debug", "orElse", "ofNullable", "getProperty", "orElse", "ofNullable", "getProperty"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}