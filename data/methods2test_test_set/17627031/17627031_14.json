{"test_class": {"identifier": "GzipModuleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TXT_GZIP_SAMPLE_FILE = \"src/test/resources/gzip/sample.txt.gz\";", "modifier": "private static final", "type": "String", "declarator": "TXT_GZIP_SAMPLE_FILE = \"src/test/resources/gzip/sample.txt.gz\"", "var_name": "TXT_GZIP_SAMPLE_FILE"}, {"original_string": "private static final String RECORDS = \"Records\";", "modifier": "private static final", "type": "String", "declarator": "RECORDS = \"Records\"", "var_name": "RECORDS"}, {"original_string": "private static final String THREE_FILES_GZIP_SAMPLE_FILE = \"src/test/resources/gzip/three-files.gz\";", "modifier": "private static final", "type": "String", "declarator": "THREE_FILES_GZIP_SAMPLE_FILE = \"src/test/resources/gzip/three-files.gz\"", "var_name": "THREE_FILES_GZIP_SAMPLE_FILE"}], "file": "jhove-ext-modules/src/test/java/edu/harvard/hul/ois/jhove/module/GzipModuleTest.java"}, "test_case": {"identifier": "parseInvalidEmptyGzipFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseInvalidEmptyGzipFile() throws Exception {\n        File gzipFile = new File(\"src/test/resources/gzip/invalid-empty.gzip\");\n        assertTrue( gzipFile.isFile() );\n        \n        GzipModule gzm = new GzipModule();\n        RepInfo info = new RepInfo(gzipFile.getAbsolutePath());\n        gzm.parse(new FileInputStream(gzipFile), info, 0);\n        \n        assertEquals(RepInfo.FALSE, info.getWellFormed());\n        assertEquals(RepInfo.FALSE, info.getValid());\n        assertTrue(info.getSigMatch().isEmpty());\n\n        // Validate the failures.\n        assertEquals(1, info.getMessage().size());\n        Map<String, Integer> messages = extractMessages(info.getMessage());\n        assertEquals(1, messages.size());\n        assertEquals(1, messages.get(DiagnosisType.ERROR_EXPECTED.name()).intValue());\n    }", "signature": "void parseInvalidEmptyGzipFile()", "full_signature": "@Test public void parseInvalidEmptyGzipFile()", "class_method_signature": "GzipModuleTest.parseInvalidEmptyGzipFile()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isFile", "getAbsolutePath", "parse", "assertEquals", "getWellFormed", "assertEquals", "getValid", "assertTrue", "isEmpty", "getSigMatch", "assertEquals", "size", "getMessage", "extractMessages", "getMessage", "assertEquals", "size", "assertEquals", "intValue", "get", "name"]}, "focal_class": {"identifier": "GzipModule", "superclass": "extends ModuleBase", "interfaces": "", "fields": [{"original_string": "private static final Agent KB_AGENT = new Builder(\n            \"Royal Library of Denmark\", AgentType.STANDARD)\n    .address(\"S\u00f8ren Kierkegaards Plads 1, 1219 K\u00f8benhavn K, Denmark\")\n    .fax(\"+45 3393 2218\")\n    .web(\"http://kb.dk\").build();", "modifier": "private static final", "type": "Agent", "declarator": "KB_AGENT = new Builder(\n            \"Royal Library of Denmark\", AgentType.STANDARD)\n    .address(\"S\u00f8ren Kierkegaards Plads 1, 1219 K\u00f8benhavn K, Denmark\")\n    .fax(\"+45 3393 2218\")\n    .web(\"http://kb.dk\").build()", "var_name": "KB_AGENT"}, {"original_string": "private static final String NAME = \"GZIP-kb\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"GZIP-kb\"", "var_name": "NAME"}, {"original_string": "private static final String RELEASE = \"0.1\";", "modifier": "private static final", "type": "String", "declarator": "RELEASE = \"0.1\"", "var_name": "RELEASE"}, {"original_string": "private static final int[] DATE = {2015, 12, 8};", "modifier": "private static final", "type": "int[]", "declarator": "DATE = {2015, 12, 8}", "var_name": "DATE"}, {"original_string": "private static final String[] FORMAT = {\"GZIP\"};", "modifier": "private static final", "type": "String[]", "declarator": "FORMAT = {\"GZIP\"}", "var_name": "FORMAT"}, {"original_string": "private static final String COVERAGE = \"GZIP, https://tools.ietf.org/html/rfc1952\";", "modifier": "private static final", "type": "String", "declarator": "COVERAGE = \"GZIP, https://tools.ietf.org/html/rfc1952\"", "var_name": "COVERAGE"}, {"original_string": "private static final String[] MIMETYPE = {\"application/gzip\", \"application/x-gzip\"};", "modifier": "private static final", "type": "String[]", "declarator": "MIMETYPE = {\"application/gzip\", \"application/x-gzip\"}", "var_name": "MIMETYPE"}, {"original_string": "private static final String WELLFORMED = \"\";", "modifier": "private static final", "type": "String", "declarator": "WELLFORMED = \"\"", "var_name": "WELLFORMED"}, {"original_string": "private static final String VALIDITY = \"The file is well-formed\";", "modifier": "private static final", "type": "String", "declarator": "VALIDITY = \"The file is well-formed\"", "var_name": "VALIDITY"}, {"original_string": "private static final String REPINFO = \"\";", "modifier": "private static final", "type": "String", "declarator": "REPINFO = \"\"", "var_name": "REPINFO"}, {"original_string": "private static final String NOTE = \"\";", "modifier": "private static final", "type": "String", "declarator": "NOTE = \"\"", "var_name": "NOTE"}, {"original_string": "private static final String RIGHTS = \"Copyright 2015 by The Royal Library of Denmark. \" +\n            \"Released under the GNU Lesser General Public License.\";", "modifier": "private static final", "type": "String", "declarator": "RIGHTS = \"Copyright 2015 by The Royal Library of Denmark. \" +\n            \"Released under the GNU Lesser General Public License.\"", "var_name": "RIGHTS"}, {"original_string": "private static final String EXTENSION = \".gz\";", "modifier": "private static final", "type": "String", "declarator": "EXTENSION = \".gz\"", "var_name": "EXTENSION"}, {"original_string": "private List<Property> entryProperties;", "modifier": "private", "type": "List<Property>", "declarator": "entryProperties", "var_name": "entryProperties"}], "methods": [{"identifier": "GzipModule", "parameters": "()", "modifiers": "public", "return": "", "signature": " GzipModule()", "full_signature": "public  GzipModule()", "class_method_signature": "GzipModule.GzipModule()", "testcase": false, "constructor": true}, {"identifier": "setVendorAndSpecification", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setVendorAndSpecification()", "full_signature": "private void setVendorAndSpecification()", "class_method_signature": "GzipModule.setVendorAndSpecification()", "testcase": false, "constructor": false}, {"identifier": "initialiseVariables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialiseVariables()", "full_signature": "private void initialiseVariables()", "class_method_signature": "GzipModule.initialiseVariables()", "testcase": false, "constructor": false}, {"identifier": "resetParams", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetParams()", "full_signature": "@Override public void resetParams()", "class_method_signature": "GzipModule.resetParams()", "testcase": false, "constructor": false}, {"identifier": "checkSignatures", "parameters": "(File file,\n            InputStream stream, \n            RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void checkSignatures(File file,\n            InputStream stream, \n            RepInfo info)", "full_signature": "@Override public void checkSignatures(File file,\n            InputStream stream, \n            RepInfo info)", "class_method_signature": "GzipModule.checkSignatures(File file,\n            InputStream stream, \n            RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "checkSignatures", "parameters": "(File file,\n            RandomAccessFile raf, \n            RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void checkSignatures(File file,\n            RandomAccessFile raf, \n            RepInfo info)", "full_signature": "@Override public void checkSignatures(File file,\n            RandomAccessFile raf, \n            RepInfo info)", "class_method_signature": "GzipModule.checkSignatures(File file,\n            RandomAccessFile raf, \n            RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(RandomAccessFile file, RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void parse(RandomAccessFile file, RepInfo info)", "full_signature": "@Override public void parse(RandomAccessFile file, RepInfo info)", "class_method_signature": "GzipModule.parse(RandomAccessFile file, RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream stream, RepInfo info, int parseIndex)", "modifiers": "@Override public", "return": "int", "signature": "int parse(InputStream stream, RepInfo info, int parseIndex)", "full_signature": "@Override public int parse(InputStream stream, RepInfo info, int parseIndex)", "class_method_signature": "GzipModule.parse(InputStream stream, RepInfo info, int parseIndex)", "testcase": false, "constructor": false}, {"identifier": "parseRecords", "parameters": "(GzipReader reader)", "modifiers": "protected", "return": "void", "signature": "void parseRecords(GzipReader reader)", "full_signature": "protected void parseRecords(GzipReader reader)", "class_method_signature": "GzipModule.parseRecords(GzipReader reader)", "testcase": false, "constructor": false}, {"identifier": "processEntry", "parameters": "(GzipEntry entry)", "modifiers": "protected", "return": "void", "signature": "void processEntry(GzipEntry entry)", "full_signature": "protected void processEntry(GzipEntry entry)", "class_method_signature": "GzipModule.processEntry(GzipEntry entry)", "testcase": false, "constructor": false}, {"identifier": "reportResults", "parameters": "(GzipReader reader, RepInfo repInfo)", "modifiers": "private", "return": "void", "signature": "void reportResults(GzipReader reader, RepInfo repInfo)", "full_signature": "private void reportResults(GzipReader reader, RepInfo repInfo)", "class_method_signature": "GzipModule.reportResults(GzipReader reader, RepInfo repInfo)", "testcase": false, "constructor": false}, {"identifier": "extractDiagnosisType", "parameters": "(Diagnosis d)", "modifiers": "private static", "return": "String", "signature": "String extractDiagnosisType(Diagnosis d)", "full_signature": "private static String extractDiagnosisType(Diagnosis d)", "class_method_signature": "GzipModule.extractDiagnosisType(Diagnosis d)", "testcase": false, "constructor": false}, {"identifier": "extractDiagnosisMessage", "parameters": "(Diagnosis d)", "modifiers": "private static", "return": "String", "signature": "String extractDiagnosisMessage(Diagnosis d)", "full_signature": "private static String extractDiagnosisMessage(Diagnosis d)", "class_method_signature": "GzipModule.extractDiagnosisMessage(Diagnosis d)", "testcase": false, "constructor": false}], "file": "jhove-ext-modules/src/main/java/edu/harvard/hul/ois/jhove/module/GzipModule.java"}, "focal_method": {"identifier": "parse", "parameters": "(RandomAccessFile file, RepInfo info)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void parse(RandomAccessFile file, RepInfo info) {\n        InputStream stream = new RandomAccessFileInputStream(file);\n        parse(stream, info, 0);\n    }", "signature": "void parse(RandomAccessFile file, RepInfo info)", "full_signature": "@Override public void parse(RandomAccessFile file, RepInfo info)", "class_method_signature": "GzipModule.parse(RandomAccessFile file, RepInfo info)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 17627031, "url": "https://github.com/openpreserve/jhove", "stars": 91, "created": "3/11/2014 10:47:10 AM +00:00", "updates": "2020-01-24T19:19:11+00:00", "fork": "False", "license": "licensed"}}