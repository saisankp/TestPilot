{"test_class": {"identifier": "OrgExternalServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CassandraOperation cassandraOperation;", "modifier": "private", "type": "CassandraOperation", "declarator": "cassandraOperation", "var_name": "cassandraOperation"}, {"original_string": "private final String ORG_EXTERNAL_IDENTITY = \"org_external_identity\";", "modifier": "private final", "type": "String", "declarator": "ORG_EXTERNAL_IDENTITY = \"org_external_identity\"", "var_name": "ORG_EXTERNAL_IDENTITY"}, {"original_string": "private OrgExternalService orgExternalService;", "modifier": "private", "type": "OrgExternalService", "declarator": "orgExternalService", "var_name": "orgExternalService"}], "file": "actors/common/src/test/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalServiceTest.java"}, "test_case": {"identifier": "testGetOrgIdFromOrgExtIdFailure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOrgIdFromOrgExtIdFailure() {\n        try {\n\n            Map<String, Object> dbRequestMap = new HashMap<>();\n            dbRequestMap.put(JsonKey.EXTERNAL_ID, \"anyorgextid\");\n            dbRequestMap.put(JsonKey.PROVIDER, \"anyprovider\");\n            Response response = new Response();\n            List<Map<String, Object>> orgList =new ArrayList<>();\n            Map<String,Object>map=new HashMap<>();\n            orgList.add(map);\n            response.put(JsonKey.RESPONSE, orgList);\n            when(cassandraOperation.getRecordsByCompositeKey(Util.KEY_SPACE_NAME, ORG_EXTERNAL_IDENTITY, dbRequestMap)).thenReturn(response);\n            String resp = orgExternalService.getOrgIdFromOrgExternalIdAndProvider(\"anyOrgExtid\", \"anyprovider\");\n            Assert.assertEquals(null, resp);\n\n        } catch (Exception e) {\n            Assert.assertTrue(false);\n        }\n    }", "signature": "void testGetOrgIdFromOrgExtIdFailure()", "full_signature": "@Test public void testGetOrgIdFromOrgExtIdFailure()", "class_method_signature": "OrgExternalServiceTest.testGetOrgIdFromOrgExtIdFailure()", "testcase": true, "constructor": false, "invocations": ["put", "put", "add", "put", "thenReturn", "when", "getRecordsByCompositeKey", "getOrgIdFromOrgExternalIdAndProvider", "assertEquals", "assertTrue"]}, "focal_class": {"identifier": "OrgExternalService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String KEYSPACE_NAME = \"sunbird\";", "modifier": "private final", "type": "String", "declarator": "KEYSPACE_NAME = \"sunbird\"", "var_name": "KEYSPACE_NAME"}, {"original_string": "private final String ORG_EXTERNAL_IDENTITY = \"org_external_identity\";", "modifier": "private final", "type": "String", "declarator": "ORG_EXTERNAL_IDENTITY = \"org_external_identity\"", "var_name": "ORG_EXTERNAL_IDENTITY"}], "methods": [{"identifier": "getOrgIdFromOrgExternalIdAndProvider", "parameters": "(String externalId, String provider)", "modifiers": "public", "return": "String", "signature": "String getOrgIdFromOrgExternalIdAndProvider(String externalId, String provider)", "full_signature": "public String getOrgIdFromOrgExternalIdAndProvider(String externalId, String provider)", "class_method_signature": "OrgExternalService.getOrgIdFromOrgExternalIdAndProvider(String externalId, String provider)", "testcase": false, "constructor": false}, {"identifier": "getCassandraOperation", "parameters": "()", "modifiers": "private", "return": "CassandraOperation", "signature": "CassandraOperation getCassandraOperation()", "full_signature": "private CassandraOperation getCassandraOperation()", "class_method_signature": "OrgExternalService.getCassandraOperation()", "testcase": false, "constructor": false}], "file": "actors/common/src/main/java/org/sunbird/learner/organisation/external/identity/service/OrgExternalService.java"}, "focal_method": {"identifier": "getOrgIdFromOrgExternalIdAndProvider", "parameters": "(String externalId, String provider)", "modifiers": "public", "return": "String", "body": "public String getOrgIdFromOrgExternalIdAndProvider(String externalId, String provider) {\n    Map<String, Object> dbRequestMap = new HashMap<>();\n    dbRequestMap.put(JsonKey.EXTERNAL_ID, externalId.toLowerCase());\n    dbRequestMap.put(JsonKey.PROVIDER, provider.toLowerCase());\n    Response response =\n        getCassandraOperation().getRecordsByCompositeKey(\n            KEYSPACE_NAME, ORG_EXTERNAL_IDENTITY, dbRequestMap);\n    List<Map<String, Object>> orgList =\n        (List<Map<String, Object>>) response.getResult().get(JsonKey.RESPONSE);\n    if (CollectionUtils.isNotEmpty(orgList)) {\n      Map<String, Object> orgExternalMap = orgList.get(0);\n      if (MapUtils.isNotEmpty(orgExternalMap)) {\n        return (String) orgExternalMap.get(JsonKey.ORG_ID);\n      }\n    }\n    return null;\n  }", "signature": "String getOrgIdFromOrgExternalIdAndProvider(String externalId, String provider)", "full_signature": "public String getOrgIdFromOrgExternalIdAndProvider(String externalId, String provider)", "class_method_signature": "OrgExternalService.getOrgIdFromOrgExternalIdAndProvider(String externalId, String provider)", "testcase": false, "constructor": false, "invocations": ["put", "toLowerCase", "put", "toLowerCase", "getRecordsByCompositeKey", "getCassandraOperation", "get", "getResult", "isNotEmpty", "get", "isNotEmpty", "get"]}, "repository": {"repo_id": 96122408, "url": "https://github.com/project-sunbird/sunbird-lms-mw", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 5, "size": 15380, "license": "licensed"}}