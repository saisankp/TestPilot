{"test_class": {"identifier": "JobExecutionEventFeServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JobExecutionEventFeService jobExecutionEventFeService;", "modifier": "private", "type": "JobExecutionEventFeService", "declarator": "jobExecutionEventFeService", "var_name": "jobExecutionEventFeService"}, {"original_string": "@Mock\n    private RegistrationBean registrationBean;", "modifier": "@Mock\n    private", "type": "RegistrationBean", "declarator": "registrationBean", "var_name": "registrationBean"}, {"original_string": "@Mock\n    private EventService eventService;", "modifier": "@Mock\n    private", "type": "EventService", "declarator": "eventService", "var_name": "eventService"}], "file": "spring-batch-lightmin-server/spring-batch-lightmin-server-fe/src/test/java/org/tuxdevelop/spring/batch/lightmin/server/fe/service/JobExecutionEventFeServiceTest.java"}, "test_case": {"identifier": "testGetJobExecutionEventModels", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetJobExecutionEventModels() {\n        final int pageSize = 5;\n        final List<JobExecutionEventInfo> jobExecutionEventInfos =\n                ServiceTestHelper.createJobExecutionEvents(pageSize, \"test_application\");\n        when(this.eventService.getAllJobExecutionEvents(0, pageSize)).thenReturn(jobExecutionEventInfos);\n\n        final ContentPageModel<List<JobExecutionEventModel>> result =\n                this.jobExecutionEventFeService.getJobExecutionEventModels(0, pageSize);\n\n        BDDAssertions.then(result).isNotNull();\n        BDDAssertions.then(result.getValue()).isNotNull();\n        BDDAssertions.then(result.getValue().size()).isEqualTo(pageSize);\n    }", "signature": "void testGetJobExecutionEventModels()", "full_signature": "@Test public void testGetJobExecutionEventModels()", "class_method_signature": "JobExecutionEventFeServiceTest.testGetJobExecutionEventModels()", "testcase": true, "constructor": false, "invocations": ["createJobExecutionEvents", "thenReturn", "when", "getAllJobExecutionEvents", "getJobExecutionEventModels", "isNotNull", "then", "isNotNull", "then", "getValue", "isEqualTo", "then", "size", "getValue"]}, "focal_class": {"identifier": "JobExecutionEventFeService", "superclass": "extends CommonFeService", "interfaces": "", "fields": [{"original_string": "private final EventService eventService;", "modifier": "private final", "type": "EventService", "declarator": "eventService", "var_name": "eventService"}], "methods": [{"identifier": "JobExecutionEventFeService", "parameters": "(final RegistrationBean registrationBean,\n                                      final EventService eventService)", "modifiers": "public", "return": "", "signature": " JobExecutionEventFeService(final RegistrationBean registrationBean,\n                                      final EventService eventService)", "full_signature": "public  JobExecutionEventFeService(final RegistrationBean registrationBean,\n                                      final EventService eventService)", "class_method_signature": "JobExecutionEventFeService.JobExecutionEventFeService(final RegistrationBean registrationBean,\n                                      final EventService eventService)", "testcase": false, "constructor": true}, {"identifier": "getJobExecutionEventModels", "parameters": "(final Integer startIndex,\n                                                                                     final Integer pageSize)", "modifiers": "public", "return": "ContentPageModel<List<JobExecutionEventModel>>", "signature": "ContentPageModel<List<JobExecutionEventModel>> getJobExecutionEventModels(final Integer startIndex,\n                                                                                     final Integer pageSize)", "full_signature": "public ContentPageModel<List<JobExecutionEventModel>> getJobExecutionEventModels(final Integer startIndex,\n                                                                                     final Integer pageSize)", "class_method_signature": "JobExecutionEventFeService.getJobExecutionEventModels(final Integer startIndex,\n                                                                                     final Integer pageSize)", "testcase": false, "constructor": false}], "file": "spring-batch-lightmin-server/spring-batch-lightmin-server-fe/src/main/java/org/tuxdevelop/spring/batch/lightmin/server/fe/service/JobExecutionEventFeService.java"}, "focal_method": {"identifier": "getJobExecutionEventModels", "parameters": "(final Integer startIndex,\n                                                                                     final Integer pageSize)", "modifiers": "public", "return": "ContentPageModel<List<JobExecutionEventModel>>", "body": "public ContentPageModel<List<JobExecutionEventModel>> getJobExecutionEventModels(final Integer startIndex,\n                                                                                     final Integer pageSize) {\n\n        final List<JobExecutionEventInfo> events = this.eventService.getAllJobExecutionEvents(startIndex, pageSize);\n        final Integer totalCount = this.eventService.getJobExecutionEventInfoCount();\n\n        final ContentPageModel<List<JobExecutionEventModel>> contentPageModel =\n                new ContentPageModel<>(startIndex, pageSize, totalCount);\n\n        final List<JobExecutionEventModel> models = new ArrayList<>();\n\n        for (final JobExecutionEventInfo event : events) {\n            final JobExecutionEventModel model = new JobExecutionEventModel();\n            model.setApplicationName(event.getApplicationName());\n            model.setJobName(event.getJobName());\n            model.setId(event.getJobExecutionId());\n            model.setStartTime(event.getStartDate());\n            model.setEndTime(event.getEndDate());\n            model.setExitStatus(event.getExitStatus() != null ? event.getExitStatus().getExitCode().toLowerCase() : \"\");\n            models.add(model);\n            final String applicationInstanceId = this.getApplicationInstanceIdByName(event.getApplicationName());\n            model.setApplicationInstanceId(applicationInstanceId);\n        }\n\n        contentPageModel.setValue(models);\n\n        return contentPageModel;\n\n    }", "signature": "ContentPageModel<List<JobExecutionEventModel>> getJobExecutionEventModels(final Integer startIndex,\n                                                                                     final Integer pageSize)", "full_signature": "public ContentPageModel<List<JobExecutionEventModel>> getJobExecutionEventModels(final Integer startIndex,\n                                                                                     final Integer pageSize)", "class_method_signature": "JobExecutionEventFeService.getJobExecutionEventModels(final Integer startIndex,\n                                                                                     final Integer pageSize)", "testcase": false, "constructor": false, "invocations": ["getAllJobExecutionEvents", "getJobExecutionEventInfoCount", "setApplicationName", "getApplicationName", "setJobName", "getJobName", "setId", "getJobExecutionId", "setStartTime", "getStartDate", "setEndTime", "getEndDate", "setExitStatus", "getExitStatus", "toLowerCase", "getExitCode", "getExitStatus", "add", "getApplicationInstanceIdByName", "getApplicationName", "setApplicationInstanceId", "setValue"]}, "repository": {"repo_id": 29479059, "url": "https://github.com/tuxdevelop/spring-batch-lightmin", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 109, "size": 12355, "license": "licensed"}}