{"test_class": {"identifier": "MockFunctionServiceHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "gemfire-utils/gemfire-mock/src/test/java/io/pivotal/bds/gemfire/mock/MockFunctionServiceHelperTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() {\n        TestFunction function = new TestFunction();\n        MockRegion<Object, Object> mockRegion = new MockRegion<>(\"mock\");\n        MockFunctionServiceHelper helper = new MockFunctionServiceHelper(function);\n\n        Object result = helper.onRegion(mockRegion).withArgs(\"args\").withFilter(Collections.singleton(\"filter\")).execute(function\n                .getId()).getResult();\n\n        assertNotNull(result);\n        assertTrue(result instanceof List);\n\n        List<Object> list = (List<Object>)result;\n\n        assertFalse(list.isEmpty());\n\n        assertEquals(\"args\", list.get(0));\n        assertEquals(function.getId(), list.get(1));\n        assertTrue(list.get(2) == mockRegion);\n        assertTrue(list.get(3) instanceof Set);\n\n        Set<Object> filter = (Set<Object>) list.get(3);\n        assertNotNull(filter);\n        assertEquals(1,filter.size());\n        assertEquals(\"filter\",filter.iterator().next());\n\n        assertTrue(list.get(4) instanceof Exception);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "MockFunctionServiceHelperTest.test()", "testcase": true, "constructor": false, "invocations": ["getResult", "execute", "withFilter", "withArgs", "onRegion", "singleton", "getId", "assertNotNull", "assertTrue", "assertFalse", "isEmpty", "assertEquals", "get", "assertEquals", "getId", "get", "assertTrue", "get", "assertTrue", "get", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "next", "iterator", "assertTrue", "get"]}, "focal_class": {"identifier": "MockFunctionServiceHelper", "superclass": "", "interfaces": "implements FunctionServiceHelper", "fields": [{"original_string": "private Map<String,Function> functions = new HashMap<>();", "modifier": "private", "type": "Map<String,Function>", "declarator": "functions = new HashMap<>()", "var_name": "functions"}], "methods": [{"identifier": "MockFunctionServiceHelper", "parameters": "()", "modifiers": "public", "return": "", "signature": " MockFunctionServiceHelper()", "full_signature": "public  MockFunctionServiceHelper()", "class_method_signature": "MockFunctionServiceHelper.MockFunctionServiceHelper()", "testcase": false, "constructor": true}, {"identifier": "MockFunctionServiceHelper", "parameters": "(Function function)", "modifiers": "public", "return": "", "signature": " MockFunctionServiceHelper(Function function)", "full_signature": "public  MockFunctionServiceHelper(Function function)", "class_method_signature": "MockFunctionServiceHelper.MockFunctionServiceHelper(Function function)", "testcase": false, "constructor": true}, {"identifier": "onRegion", "parameters": "(Region region)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onRegion(Region region)", "full_signature": "@Override public Execution onRegion(Region region)", "class_method_signature": "MockFunctionServiceHelper.onRegion(Region region)", "testcase": false, "constructor": false}, {"identifier": "onServer", "parameters": "(Pool pool)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onServer(Pool pool)", "full_signature": "@Override public Execution onServer(Pool pool)", "class_method_signature": "MockFunctionServiceHelper.onServer(Pool pool)", "testcase": false, "constructor": false}, {"identifier": "onServers", "parameters": "(Pool pool)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onServers(Pool pool)", "full_signature": "@Override public Execution onServers(Pool pool)", "class_method_signature": "MockFunctionServiceHelper.onServers(Pool pool)", "testcase": false, "constructor": false}, {"identifier": "onServer", "parameters": "(RegionService regionService)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onServer(RegionService regionService)", "full_signature": "@Override public Execution onServer(RegionService regionService)", "class_method_signature": "MockFunctionServiceHelper.onServer(RegionService regionService)", "testcase": false, "constructor": false}, {"identifier": "onServers", "parameters": "(RegionService regionService)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onServers(RegionService regionService)", "full_signature": "@Override public Execution onServers(RegionService regionService)", "class_method_signature": "MockFunctionServiceHelper.onServers(RegionService regionService)", "testcase": false, "constructor": false}, {"identifier": "onMember", "parameters": "(DistributedMember distributedMember)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onMember(DistributedMember distributedMember)", "full_signature": "@Override public Execution onMember(DistributedMember distributedMember)", "class_method_signature": "MockFunctionServiceHelper.onMember(DistributedMember distributedMember)", "testcase": false, "constructor": false}, {"identifier": "onMembers", "parameters": "(String... groups)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onMembers(String... groups)", "full_signature": "@Override public Execution onMembers(String... groups)", "class_method_signature": "MockFunctionServiceHelper.onMembers(String... groups)", "testcase": false, "constructor": false}, {"identifier": "onMembers", "parameters": "(Set<DistributedMember> distributedMembers)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onMembers(Set<DistributedMember> distributedMembers)", "full_signature": "@Override public Execution onMembers(Set<DistributedMember> distributedMembers)", "class_method_signature": "MockFunctionServiceHelper.onMembers(Set<DistributedMember> distributedMembers)", "testcase": false, "constructor": false}, {"identifier": "onMember", "parameters": "(String... groups)", "modifiers": "@Override public", "return": "Execution", "signature": "Execution onMember(String... groups)", "full_signature": "@Override public Execution onMember(String... groups)", "class_method_signature": "MockFunctionServiceHelper.onMember(String... groups)", "testcase": false, "constructor": false}, {"identifier": "getFunction", "parameters": "(String functionId)", "modifiers": "@Override public", "return": "Function", "signature": "Function getFunction(String functionId)", "full_signature": "@Override public Function getFunction(String functionId)", "class_method_signature": "MockFunctionServiceHelper.getFunction(String functionId)", "testcase": false, "constructor": false}, {"identifier": "registerFunction", "parameters": "(Function function)", "modifiers": "@Override public", "return": "void", "signature": "void registerFunction(Function function)", "full_signature": "@Override public void registerFunction(Function function)", "class_method_signature": "MockFunctionServiceHelper.registerFunction(Function function)", "testcase": false, "constructor": false}, {"identifier": "unregisterFunction", "parameters": "(String functionId)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterFunction(String functionId)", "full_signature": "@Override public void unregisterFunction(String functionId)", "class_method_signature": "MockFunctionServiceHelper.unregisterFunction(String functionId)", "testcase": false, "constructor": false}, {"identifier": "isRegistered", "parameters": "(String functionId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRegistered(String functionId)", "full_signature": "@Override public boolean isRegistered(String functionId)", "class_method_signature": "MockFunctionServiceHelper.isRegistered(String functionId)", "testcase": false, "constructor": false}, {"identifier": "getRegisteredFunctions", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Function>", "signature": "Map<String, Function> getRegisteredFunctions()", "full_signature": "@Override public Map<String, Function> getRegisteredFunctions()", "class_method_signature": "MockFunctionServiceHelper.getRegisteredFunctions()", "testcase": false, "constructor": false}], "file": "gemfire-utils/gemfire-mock/src/main/java/io/pivotal/bds/gemfire/mock/MockFunctionServiceHelper.java"}, "focal_method": {"identifier": "onRegion", "parameters": "(Region region)", "modifiers": "@Override public", "return": "Execution", "body": "@Override\n    public Execution onRegion(Region region) {\n        MockExecution mockExecution = new MockExecution(this);\n        mockExecution.setRegion(region);\n        return mockExecution;\n    }", "signature": "Execution onRegion(Region region)", "full_signature": "@Override public Execution onRegion(Region region)", "class_method_signature": "MockFunctionServiceHelper.onRegion(Region region)", "testcase": false, "constructor": false, "invocations": ["setRegion"]}, "repository": {"repo_id": 44442208, "url": "https://github.com/Pivotal-Field-Engineering/gemfire-fe", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 20, "size": 75522, "license": "licensed"}}