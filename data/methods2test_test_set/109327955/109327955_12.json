{"test_class": {"identifier": "QuickFixJTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n\tpublic MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n\tpublic", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Mock\n\tprivate SessionLookupHandler sessionLookupHandler;", "modifier": "@Mock\n\tprivate", "type": "SessionLookupHandler", "declarator": "sessionLookupHandler", "var_name": "sessionLookupHandler"}, {"original_string": "@Mock\n\tprivate Session session;", "modifier": "@Mock\n\tprivate", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n\tprivate Message message;", "modifier": "@Mock\n\tprivate", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Mock\n\tprivate DataDictionary applicationDataDictionary;", "modifier": "@Mock\n\tprivate", "type": "DataDictionary", "declarator": "applicationDataDictionary", "var_name": "applicationDataDictionary"}, {"original_string": "@Mock\n\tprivate DataDictionaryProvider dataDictionaryProvider;", "modifier": "@Mock\n\tprivate", "type": "DataDictionaryProvider", "declarator": "dataDictionaryProvider", "var_name": "dataDictionaryProvider"}, {"original_string": "private QuickFixJTemplate quickFixJTemplate;", "modifier": "private", "type": "QuickFixJTemplate", "declarator": "quickFixJTemplate", "var_name": "quickFixJTemplate"}, {"original_string": "private String expectedBeginString;", "modifier": "private", "type": "String", "declarator": "expectedBeginString", "var_name": "expectedBeginString"}, {"original_string": "private String expectedSender;", "modifier": "private", "type": "String", "declarator": "expectedSender", "var_name": "expectedSender"}, {"original_string": "private String expectedTarget;", "modifier": "private", "type": "String", "declarator": "expectedTarget", "var_name": "expectedTarget"}, {"original_string": "private String expectedQualifier;", "modifier": "private", "type": "String", "declarator": "expectedQualifier", "var_name": "expectedQualifier"}], "file": "quickfixj-spring-boot-starter/src/test/java/io/allune/quickfixj/spring/boot/starter/template/QuickFixJTemplateTest.java"}, "test_case": {"identifier": "shouldSendMessageWithQualifier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldSendMessageWithQualifier() throws FieldNotFound {\n\t\t// Given\n\t\tmockMessage(expectedBeginString, expectedSender, expectedTarget);\n\t\tmockSessionFound();\n\n\t\tSessionID expectedSessionID = new SessionID(expectedBeginString, expectedSender, expectedTarget, expectedQualifier);\n\t\tgiven(session.send(message)).willReturn(true);\n\n\t\t// When\n\t\tboolean sent = quickFixJTemplate.send(message, expectedQualifier);\n\n\t\t// Then\n\t\tassertThat(sent).isTrue();\n\t\tassertSessionID(expectedSessionID);\n\t\tassertMessageSent(expectedSender, expectedTarget);\n\t}", "signature": "void shouldSendMessageWithQualifier()", "full_signature": "@Test public void shouldSendMessageWithQualifier()", "class_method_signature": "QuickFixJTemplateTest.shouldSendMessageWithQualifier()", "testcase": true, "constructor": false, "invocations": ["mockMessage", "mockSessionFound", "willReturn", "given", "send", "send", "isTrue", "assertThat", "assertSessionID", "assertMessageSent"]}, "focal_class": {"identifier": "QuickFixJTemplate", "superclass": "", "interfaces": "implements QuickFixJOperations", "fields": [{"original_string": "private SessionLookupHandler sessionLookupHandler;", "modifier": "private", "type": "SessionLookupHandler", "declarator": "sessionLookupHandler", "var_name": "sessionLookupHandler"}, {"original_string": "private boolean doValidation;", "modifier": "private", "type": "boolean", "declarator": "doValidation", "var_name": "doValidation"}], "methods": [{"identifier": "QuickFixJTemplate", "parameters": "()", "modifiers": "public", "return": "", "signature": " QuickFixJTemplate()", "full_signature": "public  QuickFixJTemplate()", "class_method_signature": "QuickFixJTemplate.QuickFixJTemplate()", "testcase": false, "constructor": true}, {"identifier": "QuickFixJTemplate", "parameters": "(SessionLookupHandler sessionLookupHandler)", "modifiers": "public", "return": "", "signature": " QuickFixJTemplate(SessionLookupHandler sessionLookupHandler)", "full_signature": "public  QuickFixJTemplate(SessionLookupHandler sessionLookupHandler)", "class_method_signature": "QuickFixJTemplate.QuickFixJTemplate(SessionLookupHandler sessionLookupHandler)", "testcase": false, "constructor": true}, {"identifier": "setSessionLookupHandler", "parameters": "(SessionLookupHandler sessionLookupHandler)", "modifiers": "public", "return": "void", "signature": "void setSessionLookupHandler(SessionLookupHandler sessionLookupHandler)", "full_signature": "public void setSessionLookupHandler(SessionLookupHandler sessionLookupHandler)", "class_method_signature": "QuickFixJTemplate.setSessionLookupHandler(SessionLookupHandler sessionLookupHandler)", "testcase": false, "constructor": false}, {"identifier": "setDoValidation", "parameters": "(boolean doValidation)", "modifiers": "public", "return": "void", "signature": "void setDoValidation(boolean doValidation)", "full_signature": "public void setDoValidation(boolean doValidation)", "class_method_signature": "QuickFixJTemplate.setDoValidation(boolean doValidation)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Message message)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean send(Message message)", "full_signature": "@Override public boolean send(Message message)", "class_method_signature": "QuickFixJTemplate.send(Message message)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Message message, String qualifier)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean send(Message message, String qualifier)", "full_signature": "@Override public boolean send(Message message, String qualifier)", "class_method_signature": "QuickFixJTemplate.send(Message message, String qualifier)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Message message, String senderCompID, String targetCompID)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean send(Message message, String senderCompID, String targetCompID)", "full_signature": "@Override public boolean send(Message message, String senderCompID, String targetCompID)", "class_method_signature": "QuickFixJTemplate.send(Message message, String senderCompID, String targetCompID)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Message message, String senderCompID, String targetCompID, String qualifier)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean send(Message message, String senderCompID, String targetCompID, String qualifier)", "full_signature": "@Override public boolean send(Message message, String senderCompID, String targetCompID, String qualifier)", "class_method_signature": "QuickFixJTemplate.send(Message message, String senderCompID, String targetCompID, String qualifier)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Message message, SessionID sessionID)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean send(Message message, SessionID sessionID)", "full_signature": "@Override public boolean send(Message message, SessionID sessionID)", "class_method_signature": "QuickFixJTemplate.send(Message message, SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "doSend", "parameters": "(Message message, SessionID sessionID)", "modifiers": "protected", "return": "boolean", "signature": "boolean doSend(Message message, SessionID sessionID)", "full_signature": "protected boolean doSend(Message message, SessionID sessionID)", "class_method_signature": "QuickFixJTemplate.doSend(Message message, SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "validateMessage", "parameters": "(Message message, SessionID sessionID, Session session)", "modifiers": "private", "return": "void", "signature": "void validateMessage(Message message, SessionID sessionID, Session session)", "full_signature": "private void validateMessage(Message message, SessionID sessionID, Session session)", "class_method_signature": "QuickFixJTemplate.validateMessage(Message message, SessionID sessionID, Session session)", "testcase": false, "constructor": false}, {"identifier": "getApplicationVersionID", "parameters": "(Message message, Session session)", "modifiers": "private static", "return": "ApplVerID", "signature": "ApplVerID getApplicationVersionID(Message message, Session session)", "full_signature": "private static ApplVerID getApplicationVersionID(Message message, Session session)", "class_method_signature": "QuickFixJTemplate.getApplicationVersionID(Message message, Session session)", "testcase": false, "constructor": false}, {"identifier": "getDefaultApplVerID", "parameters": "(Session session)", "modifiers": "private static", "return": "ApplVerID", "signature": "ApplVerID getDefaultApplVerID(Session session)", "full_signature": "private static ApplVerID getDefaultApplVerID(Session session)", "class_method_signature": "QuickFixJTemplate.getDefaultApplVerID(Session session)", "testcase": false, "constructor": false}], "file": "quickfixj-spring-boot-starter/src/main/java/io/allune/quickfixj/spring/boot/starter/template/QuickFixJTemplate.java"}, "focal_method": {"identifier": "send", "parameters": "(Message message)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean send(Message message) {\n\t\tAssert.notNull(message, \"'message' must not be null\");\n\n\t\tSessionID sessionID = QuickFixJSessionID.quickFixJSessionIDBuilder()\n\t\t\t\t.message(message)\n\t\t\t\t.build().toSessionID();\n\t\treturn doSend(message, sessionID);\n\t}", "signature": "boolean send(Message message)", "full_signature": "@Override public boolean send(Message message)", "class_method_signature": "QuickFixJTemplate.send(Message message)", "testcase": false, "constructor": false, "invocations": ["notNull", "toSessionID", "build", "message", "quickFixJSessionIDBuilder", "doSend"]}, "repository": {"repo_id": 109327955, "url": "https://github.com/esanchezros/quickfixj-spring-boot-starter", "stars": 27, "created": "11/2/2017 11:06:07 PM +00:00", "updates": "2020-01-15T15:51:21+00:00", "fork": "False", "license": "licensed"}}