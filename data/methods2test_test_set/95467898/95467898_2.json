{"test_class": {"identifier": "ConfigurationCommandsTest", "superclass": "", "interfaces": "", "fields": [], "file": "com.effectiveosgi.rt.config/src/test/java/com/effectiveosgi/rt/config/impl/ConfigurationCommandsTest.java"}, "test_case": {"identifier": "testCompareConfigs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCompareConfigs() {\n\t\t// factory before non-factory\n\t\tassertEquals(1, ConfigurationCommands.compareConfigurations(createMockConfig(null, \"\"), createMockConfig(\"\", \"\"))); \n\t\tassertEquals(-1, ConfigurationCommands.compareConfigurations(createMockConfig(\"\", \"\"), createMockConfig(null, \"\"))); \n\t\tassertEquals(0, ConfigurationCommands.compareConfigurations(createMockConfig(null, \"\"), createMockConfig(null, \"\")));\n\t\t\n\t\t// compare factory first\n\t\tassertEquals(-1, ConfigurationCommands.compareConfigurations(createMockConfig(\"aaa\", \"yyy\"), createMockConfig(\"bbb\", \"xxx\"))); \n\t\tassertEquals(1, ConfigurationCommands.compareConfigurations(createMockConfig(\"bbb\", \"xxx\"), createMockConfig(\"aaa\", \"yyy\")));\n\t\t\n\t\t// compare pid second\n\t\tassertEquals(-1, ConfigurationCommands.compareConfigurations(createMockConfig(\"aaa\", \"xxx\"), createMockConfig(\"aaa\", \"yyy\")));\n\t\tassertEquals(1, ConfigurationCommands.compareConfigurations(createMockConfig(\"aaa\", \"yyy\"), createMockConfig(\"aaa\", \"xxx\")));\n\t\tassertEquals(0, ConfigurationCommands.compareConfigurations(createMockConfig(\"aaa\", \"xxx\"), createMockConfig(\"aaa\", \"xxx\")));\n\t}", "signature": "void testCompareConfigs()", "full_signature": "@Test public void testCompareConfigs()", "class_method_signature": "ConfigurationCommandsTest.testCompareConfigs()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig", "assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig", "assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig", "assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig", "assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig", "assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig", "assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig", "assertEquals", "compareConfigurations", "createMockConfig", "createMockConfig"]}, "focal_class": {"identifier": "ConfigurationCommands", "superclass": "", "interfaces": "implements Converter", "fields": [{"original_string": "private final ConfigurationAdmin configAdmin;", "modifier": "private final", "type": "ConfigurationAdmin", "declarator": "configAdmin", "var_name": "configAdmin"}, {"original_string": "private static final String UNKNOWN_TYPE_NAME = \"?\";", "modifier": "private static final", "type": "String", "declarator": "UNKNOWN_TYPE_NAME = \"?\"", "var_name": "UNKNOWN_TYPE_NAME"}], "methods": [{"identifier": "ConfigurationCommands", "parameters": "(ConfigurationAdmin configAdmin)", "modifiers": "public", "return": "", "signature": " ConfigurationCommands(ConfigurationAdmin configAdmin)", "full_signature": "public  ConfigurationCommands(ConfigurationAdmin configAdmin)", "class_method_signature": "ConfigurationCommands.ConfigurationCommands(ConfigurationAdmin configAdmin)", "testcase": false, "constructor": true}, {"identifier": "list", "parameters": "()", "modifiers": "@Descriptor(\"List configurations\") public", "return": "Configuration[]", "signature": "Configuration[] list()", "full_signature": "@Descriptor(\"List configurations\") public Configuration[] list()", "class_method_signature": "ConfigurationCommands.list()", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(@Descriptor(\"PID prefix\") String prefix)", "modifiers": "@Descriptor(\"List confgurations\") public", "return": "Configuration[]", "signature": "Configuration[] list(@Descriptor(\"PID prefix\") String prefix)", "full_signature": "@Descriptor(\"List confgurations\") public Configuration[] list(@Descriptor(\"PID prefix\") String prefix)", "class_method_signature": "ConfigurationCommands.list(@Descriptor(\"PID prefix\") String prefix)", "testcase": false, "constructor": false}, {"identifier": "info", "parameters": "(String pid)", "modifiers": "public", "return": "Object", "signature": "Object info(String pid)", "full_signature": "public Object info(String pid)", "class_method_signature": "ConfigurationCommands.info(String pid)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Class<?> desiredType, Object in)", "modifiers": "@Override public", "return": "Object", "signature": "Object convert(Class<?> desiredType, Object in)", "full_signature": "@Override public Object convert(Class<?> desiredType, Object in)", "class_method_signature": "ConfigurationCommands.convert(Class<?> desiredType, Object in)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Object target, int level, Converter escape)", "modifiers": "@Override public", "return": "CharSequence", "signature": "CharSequence format(Object target, int level, Converter escape)", "full_signature": "@Override public CharSequence format(Object target, int level, Converter escape)", "class_method_signature": "ConfigurationCommands.format(Object target, int level, Converter escape)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Configuration[] configs, int level, Converter escape)", "modifiers": "private", "return": "CharSequence", "signature": "CharSequence format(Configuration[] configs, int level, Converter escape)", "full_signature": "private CharSequence format(Configuration[] configs, int level, Converter escape)", "class_method_signature": "ConfigurationCommands.format(Configuration[] configs, int level, Converter escape)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Configuration config, int level, Converter escape)", "modifiers": "private", "return": "CharSequence", "signature": "CharSequence format(Configuration config, int level, Converter escape)", "full_signature": "private CharSequence format(Configuration config, int level, Converter escape)", "class_method_signature": "ConfigurationCommands.format(Configuration config, int level, Converter escape)", "testcase": false, "constructor": false}, {"identifier": "formatType", "parameters": "(Object value)", "modifiers": "private", "return": "String", "signature": "String formatType(Object value)", "full_signature": "private String formatType(Object value)", "class_method_signature": "ConfigurationCommands.formatType(Object value)", "testcase": false, "constructor": false}, {"identifier": "compareConfigurations", "parameters": "(Configuration a, Configuration b)", "modifiers": "static", "return": "int", "signature": "int compareConfigurations(Configuration a, Configuration b)", "full_signature": "static int compareConfigurations(Configuration a, Configuration b)", "class_method_signature": "ConfigurationCommands.compareConfigurations(Configuration a, Configuration b)", "testcase": false, "constructor": false}], "file": "com.effectiveosgi.rt.config/src/main/java/com/effectiveosgi/rt/config/impl/ConfigurationCommands.java"}, "focal_method": {"identifier": "compareConfigurations", "parameters": "(Configuration a, Configuration b)", "modifiers": "static", "return": "int", "body": "static int compareConfigurations(Configuration a, Configuration b) {\n\t\tString factoryA = a.getFactoryPid();\n\t\tString factoryB = b.getFactoryPid();\n\n\t\tint result = 0;\n\n\t\tif (factoryA != null) {\n\t\t\tif (factoryB == null)\n\t\t\t\tresult = -1;\n\t\t\telse\n\t\t\t\tresult = factoryA.compareTo(factoryB);\n\t\t} else {\n\t\t\tif (factoryB == null)\n\t\t\t\tresult = 0;\n\t\t\telse\n\t\t\t\tresult = 1;\n\t\t}\n\n\t\tif (result == 0)\n\t\t\tresult = a.getPid().compareTo(b.getPid());\n\n\t\treturn result;\n\t}", "signature": "int compareConfigurations(Configuration a, Configuration b)", "full_signature": "static int compareConfigurations(Configuration a, Configuration b)", "class_method_signature": "ConfigurationCommands.compareConfigurations(Configuration a, Configuration b)", "testcase": false, "constructor": false, "invocations": ["getFactoryPid", "getFactoryPid", "compareTo", "compareTo", "getPid", "getPid"]}, "repository": {"repo_id": 95467898, "url": "https://github.com/effectiveosgi/eosgi-runtime", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 5656, "license": "licensed"}}