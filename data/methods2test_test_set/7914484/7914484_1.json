{"test_class": {"identifier": "XmppConnectionFactoryBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private XmppConnectionFactoryBean factoryBean;", "modifier": "private", "type": "XmppConnectionFactoryBean", "declarator": "factoryBean", "var_name": "factoryBean"}], "file": "spring-ws-support/src/test/java/org/springframework/ws/transport/xmpp/support/XmppConnectionFactoryBeanTest.java"}, "test_case": {"identifier": "wrongPort", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void wrongPort() throws XMPPException {\n\t\tfactoryBean.setPort(-10);\n\t}", "signature": "void wrongPort()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void wrongPort()", "class_method_signature": "XmppConnectionFactoryBeanTest.wrongPort()", "testcase": true, "constructor": false, "invocations": ["setPort"]}, "focal_class": {"identifier": "XmppConnectionFactoryBean", "superclass": "", "interfaces": "implements FactoryBean<XMPPTCPConnection>, InitializingBean, DisposableBean", "fields": [{"original_string": "private static final int DEFAULT_PORT = 5222;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PORT = 5222", "var_name": "DEFAULT_PORT"}, {"original_string": "private XMPPTCPConnection connection;", "modifier": "private", "type": "XMPPTCPConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private String host;", "modifier": "private", "type": "String", "declarator": "host", "var_name": "host"}, {"original_string": "private int port = DEFAULT_PORT;", "modifier": "private", "type": "int", "declarator": "port = DEFAULT_PORT", "var_name": "port"}, {"original_string": "private String serviceName;", "modifier": "private", "type": "String", "declarator": "serviceName", "var_name": "serviceName"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private String resource;", "modifier": "private", "type": "String", "declarator": "resource", "var_name": "resource"}], "methods": [{"identifier": "setHost", "parameters": "(String host)", "modifiers": "public", "return": "void", "signature": "void setHost(String host)", "full_signature": "public void setHost(String host)", "class_method_signature": "XmppConnectionFactoryBean.setHost(String host)", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(int port)", "modifiers": "public", "return": "void", "signature": "void setPort(int port)", "full_signature": "public void setPort(int port)", "class_method_signature": "XmppConnectionFactoryBean.setPort(int port)", "testcase": false, "constructor": false}, {"identifier": "setServiceName", "parameters": "(String serviceName)", "modifiers": "public", "return": "void", "signature": "void setServiceName(String serviceName)", "full_signature": "public void setServiceName(String serviceName)", "class_method_signature": "XmppConnectionFactoryBean.setServiceName(String serviceName)", "testcase": false, "constructor": false}, {"identifier": "setUsername", "parameters": "(String username)", "modifiers": "public", "return": "void", "signature": "void setUsername(String username)", "full_signature": "public void setUsername(String username)", "class_method_signature": "XmppConnectionFactoryBean.setUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setPassword(String password)", "full_signature": "public void setPassword(String password)", "class_method_signature": "XmppConnectionFactoryBean.setPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "setResource", "parameters": "(String resource)", "modifiers": "public", "return": "void", "signature": "void setResource(String resource)", "full_signature": "public void setResource(String resource)", "class_method_signature": "XmppConnectionFactoryBean.setResource(String resource)", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "XmppConnectionFactoryBean.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "XmppConnectionFactoryBean.destroy()", "testcase": false, "constructor": false}, {"identifier": "getObject", "parameters": "()", "modifiers": "@Override public", "return": "XMPPTCPConnection", "signature": "XMPPTCPConnection getObject()", "full_signature": "@Override public XMPPTCPConnection getObject()", "class_method_signature": "XmppConnectionFactoryBean.getObject()", "testcase": false, "constructor": false}, {"identifier": "getObjectType", "parameters": "()", "modifiers": "@Override public", "return": "Class<XMPPTCPConnection>", "signature": "Class<XMPPTCPConnection> getObjectType()", "full_signature": "@Override public Class<XMPPTCPConnection> getObjectType()", "class_method_signature": "XmppConnectionFactoryBean.getObjectType()", "testcase": false, "constructor": false}, {"identifier": "isSingleton", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSingleton()", "full_signature": "@Override public boolean isSingleton()", "class_method_signature": "XmppConnectionFactoryBean.isSingleton()", "testcase": false, "constructor": false}, {"identifier": "createConnectionConfiguration", "parameters": "(String host, int port, String serviceName)", "modifiers": "protected", "return": "XMPPTCPConnectionConfiguration", "signature": "XMPPTCPConnectionConfiguration createConnectionConfiguration(String host, int port, String serviceName)", "full_signature": "protected XMPPTCPConnectionConfiguration createConnectionConfiguration(String host, int port, String serviceName)", "class_method_signature": "XmppConnectionFactoryBean.createConnectionConfiguration(String host, int port, String serviceName)", "testcase": false, "constructor": false}], "file": "spring-ws-support/src/main/java/org/springframework/ws/transport/xmpp/support/XmppConnectionFactoryBean.java"}, "focal_method": {"identifier": "setPort", "parameters": "(int port)", "modifiers": "public", "return": "void", "body": "public void setPort(int port) {\n\t\tAssert.isTrue(port > 0, \"'port' must be larger than 0\");\n\t\tthis.port = port;\n\t}", "signature": "void setPort(int port)", "full_signature": "public void setPort(int port)", "class_method_signature": "XmppConnectionFactoryBean.setPort(int port)", "testcase": false, "constructor": false, "invocations": ["isTrue"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}