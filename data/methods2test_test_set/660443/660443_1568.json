{"test_class": {"identifier": "ChiChainDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/ChiChainDescriptorTest.java"}, "test_case": {"identifier": "testCovalentPlatinum", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void testCovalentPlatinum() throws Exception {\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"CC1CN[Pt]2(N1)OC(=O)C(C)P(=O)(O)O2\");\n        descriptor.calculate(mol).getValue();\n    }", "signature": "void testCovalentPlatinum()", "full_signature": "@Test(expected = NullPointerException.class) public void testCovalentPlatinum()", "class_method_signature": "ChiChainDescriptorTest.testCovalentPlatinum()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "getValue", "calculate"]}, "focal_class": {"identifier": "ChiChainDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static ILoggingTool   logger = LoggingToolFactory.createLoggingTool(ChiChainDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(ChiChainDescriptor.class)", "var_name": "logger"}, {"original_string": "private SmilesParser          sp;", "modifier": "private", "type": "SmilesParser", "declarator": "sp", "var_name": "sp"}, {"original_string": "private static final String[] NAMES  = {\"SCH-3\", \"SCH-4\", \"SCH-5\", \"SCH-6\", \"SCH-7\", \"VCH-3\", \"VCH-4\", \"VCH-5\",\n            \"VCH-6\", \"VCH-7\"             };", "modifier": "private static final", "type": "String[]", "declarator": "NAMES  = {\"SCH-3\", \"SCH-4\", \"SCH-5\", \"SCH-6\", \"SCH-7\", \"VCH-3\", \"VCH-4\", \"VCH-5\",\n            \"VCH-6\", \"VCH-7\"             }", "var_name": "NAMES"}], "methods": [{"identifier": "ChiChainDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChiChainDescriptor()", "full_signature": "public  ChiChainDescriptor()", "class_method_signature": "ChiChainDescriptor.ChiChainDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "ChiChainDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "ChiChainDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "ChiChainDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "ChiChainDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "ChiChainDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "ChiChainDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "ChiChainDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "ChiChainDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "ChiChainDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "order3", "parameters": "(IAtomContainer container)", "modifiers": "private", "return": "List", "signature": "List order3(IAtomContainer container)", "full_signature": "private List order3(IAtomContainer container)", "class_method_signature": "ChiChainDescriptor.order3(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "order4", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List", "signature": "List order4(IAtomContainer atomContainer)", "full_signature": "private List order4(IAtomContainer atomContainer)", "class_method_signature": "ChiChainDescriptor.order4(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order5", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List", "signature": "List order5(IAtomContainer atomContainer)", "full_signature": "private List order5(IAtomContainer atomContainer)", "class_method_signature": "ChiChainDescriptor.order5(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order6", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List", "signature": "List order6(IAtomContainer atomContainer)", "full_signature": "private List order6(IAtomContainer atomContainer)", "class_method_signature": "ChiChainDescriptor.order6(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "order7", "parameters": "(IAtomContainer atomContainer)", "modifiers": "private", "return": "List", "signature": "List order7(IAtomContainer atomContainer)", "full_signature": "private List order7(IAtomContainer atomContainer)", "class_method_signature": "ChiChainDescriptor.order7(IAtomContainer atomContainer)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/ChiChainDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        if (sp == null) sp = new SmilesParser(container.getBuilder());\n\n        // we don't make a clone, since removeHydrogens returns a deep copy\n        IAtomContainer localAtomContainer = AtomContainerManipulator.removeHydrogens(container);\n        CDKAtomTypeMatcher matcher = CDKAtomTypeMatcher.getInstance(container.getBuilder());\n        Iterator<IAtom> atoms = localAtomContainer.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            IAtomType type;\n            try {\n                type = matcher.findMatchingAtomType(localAtomContainer, atom);\n                AtomTypeManipulator.configure(atom, type);\n            } catch (Exception e) {\n                return getDummyDescriptorValue(new CDKException(\"Error in atom typing: \" + atom));\n            }\n        }\n        CDKHydrogenAdder hAdder = CDKHydrogenAdder.getInstance(container.getBuilder());\n        try {\n            hAdder.addImplicitHydrogens(localAtomContainer);\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(new CDKException(\"Error in adding hydrogens: \" + e.getMessage()));\n        }\n\n        List subgraph3 = order3(localAtomContainer);\n        List subgraph4 = order4(localAtomContainer);\n        List subgraph5 = order5(localAtomContainer);\n        List subgraph6 = order6(localAtomContainer);\n        List subgraph7 = order7(localAtomContainer);\n\n        double order3s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph3);\n        double order4s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph4);\n        double order5s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph5);\n        double order6s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph6);\n        double order7s = ChiIndexUtils.evalSimpleIndex(localAtomContainer, subgraph7);\n\n        double order3v, order4v, order5v, order6v, order7v;\n        try {\n            order3v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph3);\n            order4v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph4);\n            order5v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph5);\n            order6v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph6);\n            order7v = ChiIndexUtils.evalValenceIndex(localAtomContainer, subgraph7);\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(new CDKException(\"Error in substructure search: \" + e.getMessage()));\n        }\n\n        DoubleArrayResult retval = new DoubleArrayResult();\n        retval.add(order3s);\n        retval.add(order4s);\n        retval.add(order5s);\n        retval.add(order6s);\n        retval.add(order7s);\n\n        retval.add(order3v);\n        retval.add(order4v);\n        retval.add(order5v);\n        retval.add(order6v);\n        retval.add(order7v);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames());\n\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "ChiChainDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getBuilder", "removeHydrogens", "getInstance", "getBuilder", "iterator", "atoms", "hasNext", "next", "findMatchingAtomType", "configure", "getDummyDescriptorValue", "getInstance", "getBuilder", "addImplicitHydrogens", "getDummyDescriptorValue", "getMessage", "order3", "order4", "order5", "order6", "order7", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalSimpleIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "evalValenceIndex", "getDummyDescriptorValue", "getMessage", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}