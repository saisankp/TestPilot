{"test_class": {"identifier": "WindowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WindowTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WindowTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/windowing/WindowTest.java"}, "test_case": {"identifier": "simulatedMultithreadedProcessing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simulatedMultithreadedProcessing() throws Exception {\n        final Window<Integer,String,String> window = new Window<Integer,String,String>(5);\n\n        final int requestThreadCount = 8;\n        final int requestsPerThread = 10000;\n        final BlockingQueue<Integer> requestQueue = new LinkedBlockingQueue<Integer>();\n\n        RequestThread[] requestThreads = new RequestThread[requestThreadCount];\n        for (int i = 0; i < requestThreadCount; i++) {\n            requestThreads[i] = new RequestThread(window, requestQueue, i, requestsPerThread);\n        }\n\n        ResponseThread responseThread = new ResponseThread(window, requestQueue, requestThreadCount*requestsPerThread);\n\n        // start 'em\n        for (RequestThread requestThread : requestThreads) {\n            requestThread.start();\n        }\n        responseThread.start();\n\n        // wait for them to finish\n        for (RequestThread requestThread : requestThreads) {\n            requestThread.join();\n        }\n        responseThread.join();\n\n        \n        // make sure everything was successful\n        for (int i = 0; i < requestThreadCount; i++) {\n            if (requestThreads[i].throwable != null) {\n                logger.error(\"\", requestThreads[i].throwable);\n            }\n            Assert.assertNull(\"RequestThread \" + i + \" throwable wasn't null: \" + requestThreads[i].throwable, requestThreads[i].throwable);\n        }\n\n        if (responseThread.throwable != null) {\n            logger.error(\"\", responseThread.throwable);\n        }\n        Assert.assertNull(\"ResponseThread throwable wasn't null\", responseThread.throwable);\n\n        Assert.assertEquals(0, window.getSize());\n    }", "signature": "void simulatedMultithreadedProcessing()", "full_signature": "@Test public void simulatedMultithreadedProcessing()", "class_method_signature": "WindowTest.simulatedMultithreadedProcessing()", "testcase": true, "constructor": false, "invocations": ["start", "start", "join", "join", "error", "assertNull", "error", "assertNull", "assertEquals", "getSize"]}, "focal_class": {"identifier": "Window", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Window.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Window.class)", "var_name": "logger"}, {"original_string": "private final int maxSize;", "modifier": "private final", "type": "int", "declarator": "maxSize", "var_name": "maxSize"}, {"original_string": "private final ConcurrentHashMap<K,DefaultWindowFuture<K,R,P>> futures;", "modifier": "private final", "type": "ConcurrentHashMap<K,DefaultWindowFuture<K,R,P>>", "declarator": "futures", "var_name": "futures"}, {"original_string": "private final ReentrantLock lock;", "modifier": "private final", "type": "ReentrantLock", "declarator": "lock", "var_name": "lock"}, {"original_string": "private final Condition completedCondition;", "modifier": "private final", "type": "Condition", "declarator": "completedCondition", "var_name": "completedCondition"}, {"original_string": "private AtomicInteger pendingOffers;", "modifier": "private", "type": "AtomicInteger", "declarator": "pendingOffers", "var_name": "pendingOffers"}, {"original_string": "private AtomicBoolean pendingOffersAborted;", "modifier": "private", "type": "AtomicBoolean", "declarator": "pendingOffersAborted", "var_name": "pendingOffersAborted"}, {"original_string": "private final ScheduledExecutorService executor;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private ScheduledFuture<?> monitorHandle;", "modifier": "private", "type": "ScheduledFuture<?>", "declarator": "monitorHandle", "var_name": "monitorHandle"}, {"original_string": "private final WindowMonitor monitor;", "modifier": "private final", "type": "WindowMonitor", "declarator": "monitor", "var_name": "monitor"}, {"original_string": "private final long monitorInterval;", "modifier": "private final", "type": "long", "declarator": "monitorInterval", "var_name": "monitorInterval"}, {"original_string": "private final CopyOnWriteArrayList<UnwrappedWeakReference<WindowListener<K,R,P>>> listeners;", "modifier": "private final", "type": "CopyOnWriteArrayList<UnwrappedWeakReference<WindowListener<K,R,P>>>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "Window", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " Window(int size)", "full_signature": "public  Window(int size)", "class_method_signature": "Window.Window(int size)", "testcase": false, "constructor": true}, {"identifier": "Window", "parameters": "(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener)", "modifiers": "public", "return": "", "signature": " Window(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener)", "full_signature": "public  Window(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener)", "class_method_signature": "Window.Window(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener)", "testcase": false, "constructor": true}, {"identifier": "Window", "parameters": "(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener, String monitorThreadName)", "modifiers": "public", "return": "", "signature": " Window(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener, String monitorThreadName)", "full_signature": "public  Window(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener, String monitorThreadName)", "class_method_signature": "Window.Window(int size, ScheduledExecutorService executor, long monitorInterval, WindowListener<K,R,P> listener, String monitorThreadName)", "testcase": false, "constructor": true}, {"identifier": "getMaxSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxSize()", "full_signature": "public int getMaxSize()", "class_method_signature": "Window.getMaxSize()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "Window.getSize()", "testcase": false, "constructor": false}, {"identifier": "getFreeSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFreeSize()", "full_signature": "public int getFreeSize()", "class_method_signature": "Window.getFreeSize()", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "public", "return": "boolean", "signature": "boolean containsKey(K key)", "full_signature": "public boolean containsKey(K key)", "class_method_signature": "Window.containsKey(K key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(K key)", "modifiers": "public", "return": "WindowFuture<K,R,P>", "signature": "WindowFuture<K,R,P> get(K key)", "full_signature": "public WindowFuture<K,R,P> get(K key)", "class_method_signature": "Window.get(K key)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(WindowListener<K,R,P> listener)", "modifiers": "public", "return": "void", "signature": "void addListener(WindowListener<K,R,P> listener)", "full_signature": "public void addListener(WindowListener<K,R,P> listener)", "class_method_signature": "Window.addListener(WindowListener<K,R,P> listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(WindowListener<K,R,P> listener)", "modifiers": "public", "return": "void", "signature": "void removeListener(WindowListener<K,R,P> listener)", "full_signature": "public void removeListener(WindowListener<K,R,P> listener)", "class_method_signature": "Window.removeListener(WindowListener<K,R,P> listener)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "()", "modifiers": "", "return": "List<UnwrappedWeakReference<WindowListener<K,R,P>>>", "signature": "List<UnwrappedWeakReference<WindowListener<K,R,P>>> getListeners()", "full_signature": " List<UnwrappedWeakReference<WindowListener<K,R,P>>> getListeners()", "class_method_signature": "Window.getListeners()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void destroy()", "full_signature": "public synchronized void destroy()", "class_method_signature": "Window.destroy()", "testcase": false, "constructor": false}, {"identifier": "startMonitor", "parameters": "()", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean startMonitor()", "full_signature": "public synchronized boolean startMonitor()", "class_method_signature": "Window.startMonitor()", "testcase": false, "constructor": false}, {"identifier": "stopMonitor", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void stopMonitor()", "full_signature": "public synchronized void stopMonitor()", "class_method_signature": "Window.stopMonitor()", "testcase": false, "constructor": false}, {"identifier": "createSortedSnapshot", "parameters": "()", "modifiers": "public", "return": "Map<K,WindowFuture<K,R,P>>", "signature": "Map<K,WindowFuture<K,R,P>> createSortedSnapshot()", "full_signature": "public Map<K,WindowFuture<K,R,P>> createSortedSnapshot()", "class_method_signature": "Window.createSortedSnapshot()", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(K key, R request, long offerTimeoutMillis)", "modifiers": "public", "return": "WindowFuture", "signature": "WindowFuture offer(K key, R request, long offerTimeoutMillis)", "full_signature": "public WindowFuture offer(K key, R request, long offerTimeoutMillis)", "class_method_signature": "Window.offer(K key, R request, long offerTimeoutMillis)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis)", "modifiers": "public", "return": "WindowFuture", "signature": "WindowFuture offer(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis)", "full_signature": "public WindowFuture offer(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis)", "class_method_signature": "Window.offer(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis, boolean callerWaitingHint)", "modifiers": "public", "return": "WindowFuture", "signature": "WindowFuture offer(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis, boolean callerWaitingHint)", "full_signature": "public WindowFuture offer(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis, boolean callerWaitingHint)", "class_method_signature": "Window.offer(K key, R request, long offerTimeoutMillis, long expireTimeoutMillis, boolean callerWaitingHint)", "testcase": false, "constructor": false}, {"identifier": "getPendingOfferCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPendingOfferCount()", "full_signature": "public int getPendingOfferCount()", "class_method_signature": "Window.getPendingOfferCount()", "testcase": false, "constructor": false}, {"identifier": "beginPendingOffer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void beginPendingOffer()", "full_signature": "private void beginPendingOffer()", "class_method_signature": "Window.beginPendingOffer()", "testcase": false, "constructor": false}, {"identifier": "endPendingOffer", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean endPendingOffer()", "full_signature": "private boolean endPendingOffer()", "class_method_signature": "Window.endPendingOffer()", "testcase": false, "constructor": false}, {"identifier": "abortPendingOffers", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean abortPendingOffers()", "full_signature": "public boolean abortPendingOffers()", "class_method_signature": "Window.abortPendingOffers()", "testcase": false, "constructor": false}, {"identifier": "complete", "parameters": "(K key, P response)", "modifiers": "public", "return": "WindowFuture<K,R,P>", "signature": "WindowFuture<K,R,P> complete(K key, P response)", "full_signature": "public WindowFuture<K,R,P> complete(K key, P response)", "class_method_signature": "Window.complete(K key, P response)", "testcase": false, "constructor": false}, {"identifier": "fail", "parameters": "(K key, Throwable t)", "modifiers": "public", "return": "WindowFuture<K,R,P>", "signature": "WindowFuture<K,R,P> fail(K key, Throwable t)", "full_signature": "public WindowFuture<K,R,P> fail(K key, Throwable t)", "class_method_signature": "Window.fail(K key, Throwable t)", "testcase": false, "constructor": false}, {"identifier": "failAll", "parameters": "(Throwable t)", "modifiers": "public", "return": "List<WindowFuture<K,R,P>>", "signature": "List<WindowFuture<K,R,P>> failAll(Throwable t)", "full_signature": "public List<WindowFuture<K,R,P>> failAll(Throwable t)", "class_method_signature": "Window.failAll(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(K key)", "modifiers": "public", "return": "WindowFuture<K,R,P>", "signature": "WindowFuture<K,R,P> cancel(K key)", "full_signature": "public WindowFuture<K,R,P> cancel(K key)", "class_method_signature": "Window.cancel(K key)", "testcase": false, "constructor": false}, {"identifier": "cancelAll", "parameters": "()", "modifiers": "public", "return": "List<WindowFuture<K,R,P>>", "signature": "List<WindowFuture<K,R,P>> cancelAll()", "full_signature": "public List<WindowFuture<K,R,P>> cancelAll()", "class_method_signature": "Window.cancelAll()", "testcase": false, "constructor": false}, {"identifier": "cancelAllExpired", "parameters": "()", "modifiers": "public", "return": "List<WindowFuture<K,R,P>>", "signature": "List<WindowFuture<K,R,P>> cancelAllExpired()", "full_signature": "public List<WindowFuture<K,R,P>> cancelAllExpired()", "class_method_signature": "Window.cancelAllExpired()", "testcase": false, "constructor": false}, {"identifier": "removeHelper", "parameters": "(K key)", "modifiers": "", "return": "void", "signature": "void removeHelper(K key)", "full_signature": " void removeHelper(K key)", "class_method_signature": "Window.removeHelper(K key)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/windowing/Window.java"}, "focal_method": {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getSize() {\n        return this.futures.size();\n    }", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "Window.getSize()", "testcase": false, "constructor": false, "invocations": ["size"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}