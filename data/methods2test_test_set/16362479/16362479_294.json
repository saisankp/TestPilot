{"test_class": {"identifier": "ClientBackedWriteTransactionTest", "superclass": "extends ClientBackedTransactionTest<ClientBackedWriteTransaction>", "interfaces": "", "fields": [{"original_string": "private ClientBackedWriteTransaction object;", "modifier": "private", "type": "ClientBackedWriteTransaction", "declarator": "object", "var_name": "object"}, {"original_string": "@Mock\n    private ClientTransaction delegate;", "modifier": "@Mock\n    private", "type": "ClientTransaction", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "@Mock\n    private NormalizedNode<?, ?> data;", "modifier": "@Mock\n    private", "type": "NormalizedNode<?, ?>", "declarator": "data", "var_name": "data"}, {"original_string": "@Mock\n    private YangInstanceIdentifier path;", "modifier": "@Mock\n    private", "type": "YangInstanceIdentifier", "declarator": "path", "var_name": "path"}, {"original_string": "@Mock\n    private DOMStoreThreePhaseCommitCohort readyCohort;", "modifier": "@Mock\n    private", "type": "DOMStoreThreePhaseCommitCohort", "declarator": "readyCohort", "var_name": "readyCohort"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/ClientBackedWriteTransactionTest.java"}, "test_case": {"identifier": "testDelete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDelete() {\n        object().delete(path);\n        Mockito.verify(delegate).delete(path);\n    }", "signature": "void testDelete()", "full_signature": "@Test public void testDelete()", "class_method_signature": "ClientBackedWriteTransactionTest.testDelete()", "testcase": true, "constructor": false, "invocations": ["delete", "object", "delete", "verify"]}, "focal_class": {"identifier": "ClientBackedWriteTransaction", "superclass": "extends ClientBackedTransaction<ClientTransaction>", "interfaces": "implements DOMStoreWriteTransaction", "fields": [], "methods": [{"identifier": "ClientBackedWriteTransaction", "parameters": "(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "modifiers": "", "return": "", "signature": " ClientBackedWriteTransaction(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "full_signature": "  ClientBackedWriteTransaction(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "class_method_signature": "ClientBackedWriteTransaction.ClientBackedWriteTransaction(final ClientTransaction delegate, final @Nullable Throwable allocationContext)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override public final", "return": "void", "signature": "void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override public final void write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "ClientBackedWriteTransaction.write(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "modifiers": "@Override public final", "return": "void", "signature": "void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "full_signature": "@Override public final void merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "class_method_signature": "ClientBackedWriteTransaction.merge(final YangInstanceIdentifier path, final NormalizedNode<?, ?> data)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public final", "return": "void", "signature": "void delete(final YangInstanceIdentifier path)", "full_signature": "@Override public final void delete(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedWriteTransaction.delete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "()", "modifiers": "@Override public final", "return": "DOMStoreThreePhaseCommitCohort", "signature": "DOMStoreThreePhaseCommitCohort ready()", "full_signature": "@Override public final DOMStoreThreePhaseCommitCohort ready()", "class_method_signature": "ClientBackedWriteTransaction.ready()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/ClientBackedWriteTransaction.java"}, "focal_method": {"identifier": "delete", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n    public final void delete(final YangInstanceIdentifier path) {\n        delegate().delete(path);\n    }", "signature": "void delete(final YangInstanceIdentifier path)", "full_signature": "@Override public final void delete(final YangInstanceIdentifier path)", "class_method_signature": "ClientBackedWriteTransaction.delete(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["delete", "delegate"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}