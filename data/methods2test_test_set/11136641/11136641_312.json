{"test_class": {"identifier": "DefaultCompensatingTransactionOperationManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CompensatingTransactionOperationExecutor operationExecutorMock;", "modifier": "private", "type": "CompensatingTransactionOperationExecutor", "declarator": "operationExecutorMock", "var_name": "operationExecutorMock"}, {"original_string": "private CompensatingTransactionOperationFactory operationFactoryMock;", "modifier": "private", "type": "CompensatingTransactionOperationFactory", "declarator": "operationFactoryMock", "var_name": "operationFactoryMock"}, {"original_string": "private CompensatingTransactionOperationRecorder operationRecorderMock;", "modifier": "private", "type": "CompensatingTransactionOperationRecorder", "declarator": "operationRecorderMock", "var_name": "operationRecorderMock"}], "file": "core/src/test/java/org/springframework/transaction/compensating/support/DefaultCompensatingTransactionOperationManagerTest.java"}, "test_case": {"identifier": "testCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommit() {\n        DefaultCompensatingTransactionOperationManager tested = new DefaultCompensatingTransactionOperationManager(\n                operationFactoryMock);\n        tested.getOperationExecutors().push(operationExecutorMock);\n\n        tested.commit();\n        verify(operationExecutorMock).commit();\n    }", "signature": "void testCommit()", "full_signature": "@Test public void testCommit()", "class_method_signature": "DefaultCompensatingTransactionOperationManagerTest.testCommit()", "testcase": true, "constructor": false, "invocations": ["push", "getOperationExecutors", "commit", "commit", "verify"]}, "focal_class": {"identifier": "DefaultCompensatingTransactionOperationManager", "superclass": "", "interfaces": "implements\n        CompensatingTransactionOperationManager", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(DefaultCompensatingTransactionOperationManager.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultCompensatingTransactionOperationManager.class)", "var_name": "log"}, {"original_string": "private Stack<CompensatingTransactionOperationExecutor> operationExecutors =\n            new Stack<CompensatingTransactionOperationExecutor>();", "modifier": "private", "type": "Stack<CompensatingTransactionOperationExecutor>", "declarator": "operationExecutors =\n            new Stack<CompensatingTransactionOperationExecutor>()", "var_name": "operationExecutors"}, {"original_string": "private CompensatingTransactionOperationFactory operationFactory;", "modifier": "private", "type": "CompensatingTransactionOperationFactory", "declarator": "operationFactory", "var_name": "operationFactory"}], "methods": [{"identifier": "DefaultCompensatingTransactionOperationManager", "parameters": "(\n            CompensatingTransactionOperationFactory operationFactory)", "modifiers": "public", "return": "", "signature": " DefaultCompensatingTransactionOperationManager(\n            CompensatingTransactionOperationFactory operationFactory)", "full_signature": "public  DefaultCompensatingTransactionOperationManager(\n            CompensatingTransactionOperationFactory operationFactory)", "class_method_signature": "DefaultCompensatingTransactionOperationManager.DefaultCompensatingTransactionOperationManager(\n            CompensatingTransactionOperationFactory operationFactory)", "testcase": false, "constructor": true}, {"identifier": "performOperation", "parameters": "(Object resource, String operation,\n            Object[] args)", "modifiers": "public", "return": "void", "signature": "void performOperation(Object resource, String operation,\n            Object[] args)", "full_signature": "public void performOperation(Object resource, String operation,\n            Object[] args)", "class_method_signature": "DefaultCompensatingTransactionOperationManager.performOperation(Object resource, String operation,\n            Object[] args)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rollback()", "full_signature": "public void rollback()", "class_method_signature": "DefaultCompensatingTransactionOperationManager.rollback()", "testcase": false, "constructor": false}, {"identifier": "getOperationExecutors", "parameters": "()", "modifiers": "protected", "return": "Stack<CompensatingTransactionOperationExecutor>", "signature": "Stack<CompensatingTransactionOperationExecutor> getOperationExecutors()", "full_signature": "protected Stack<CompensatingTransactionOperationExecutor> getOperationExecutors()", "class_method_signature": "DefaultCompensatingTransactionOperationManager.getOperationExecutors()", "testcase": false, "constructor": false}, {"identifier": "setOperationExecutors", "parameters": "(Stack<CompensatingTransactionOperationExecutor> operationExecutors)", "modifiers": "", "return": "void", "signature": "void setOperationExecutors(Stack<CompensatingTransactionOperationExecutor> operationExecutors)", "full_signature": " void setOperationExecutors(Stack<CompensatingTransactionOperationExecutor> operationExecutors)", "class_method_signature": "DefaultCompensatingTransactionOperationManager.setOperationExecutors(Stack<CompensatingTransactionOperationExecutor> operationExecutors)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void commit()", "full_signature": "public void commit()", "class_method_signature": "DefaultCompensatingTransactionOperationManager.commit()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/transaction/compensating/support/DefaultCompensatingTransactionOperationManager.java"}, "focal_method": {"identifier": "commit", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void commit() {\n        log.debug(\"Performing commit\");\n        for (CompensatingTransactionOperationExecutor operationExecutor : operationExecutors) {\n            try {\n                operationExecutor.commit();\n            } catch (Exception e) {\n                throw new TransactionSystemException(\n                        \"Error occurred during commit\", e);\n            }\n        }\n    }", "signature": "void commit()", "full_signature": "public void commit()", "class_method_signature": "DefaultCompensatingTransactionOperationManager.commit()", "testcase": false, "constructor": false, "invocations": ["debug", "commit"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}