{"test_class": {"identifier": "StringHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "olat7.8/src/test/java/org/olat/system/commons/StringHelperTest.java"}, "test_case": {"identifier": "testContainsNonWhitespace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContainsNonWhitespace() {\n        // positive tests\n        assertTrue(StringHelper.containsNonWhitespace(\"asdf\"));\n        assertTrue(StringHelper.containsNonWhitespace(\"  asdf\"));\n        assertTrue(StringHelper.containsNonWhitespace(\"asdf  \"));\n        assertTrue(StringHelper.containsNonWhitespace(\"asdf  t\\r\"));\n        assertTrue(StringHelper.containsNonWhitespace(\"hello world\"));\n        // negative tests\n        assertFalse(StringHelper.containsNonWhitespace(null));\n        assertFalse(StringHelper.containsNonWhitespace(\"\"));\n        assertFalse(StringHelper.containsNonWhitespace(\" \"));\n        assertFalse(StringHelper.containsNonWhitespace(\"             \"));\n        assertFalse(StringHelper.containsNonWhitespace(\"  \\t  \\r\"));\n    }", "signature": "void testContainsNonWhitespace()", "full_signature": "@Test public void testContainsNonWhitespace()", "class_method_signature": "StringHelperTest.testContainsNonWhitespace()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "containsNonWhitespace", "assertTrue", "containsNonWhitespace", "assertTrue", "containsNonWhitespace", "assertTrue", "containsNonWhitespace", "assertTrue", "containsNonWhitespace", "assertFalse", "containsNonWhitespace", "assertFalse", "containsNonWhitespace", "assertFalse", "containsNonWhitespace", "assertFalse", "containsNonWhitespace", "assertFalse", "containsNonWhitespace"]}, "focal_class": {"identifier": "StringHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerHelper.getLogger()", "var_name": "LOG"}, {"original_string": "private static final NumberFormat numFormatter;", "modifier": "private static final", "type": "NumberFormat", "declarator": "numFormatter", "var_name": "numFormatter"}, {"original_string": "private static final String WHITESPACE_REGEXP = \"^\\\\s*$\";", "modifier": "private static final", "type": "String", "declarator": "WHITESPACE_REGEXP = \"^\\\\s*$\"", "var_name": "WHITESPACE_REGEXP"}, {"original_string": "private static final Pattern WHITESPACE_PATTERN = Pattern.compile(WHITESPACE_REGEXP);", "modifier": "private static final", "type": "Pattern", "declarator": "WHITESPACE_PATTERN = Pattern.compile(WHITESPACE_REGEXP)", "var_name": "WHITESPACE_PATTERN"}, {"original_string": "private static final Pattern p1 = Pattern.compile(\"\\\\+\");", "modifier": "private static final", "type": "Pattern", "declarator": "p1 = Pattern.compile(\"\\\\+\")", "var_name": "p1"}, {"original_string": "private static final Pattern p2 = Pattern.compile(\"%2F\");", "modifier": "private static final", "type": "Pattern", "declarator": "p2 = Pattern.compile(\"%2F\")", "var_name": "p2"}, {"original_string": "public static final String ALL_WITHOUT_COMMA_2POINT_STRPNT = \"^[^,;:]*$\";", "modifier": "public static final", "type": "String", "declarator": "ALL_WITHOUT_COMMA_2POINT_STRPNT = \"^[^,;:]*$\"", "var_name": "ALL_WITHOUT_COMMA_2POINT_STRPNT"}, {"original_string": "private static final Pattern ALL_WITHOUT_COMMA_2POINT_STRPNT_PATTERN = Pattern.compile(ALL_WITHOUT_COMMA_2POINT_STRPNT);", "modifier": "private static final", "type": "Pattern", "declarator": "ALL_WITHOUT_COMMA_2POINT_STRPNT_PATTERN = Pattern.compile(ALL_WITHOUT_COMMA_2POINT_STRPNT)", "var_name": "ALL_WITHOUT_COMMA_2POINT_STRPNT_PATTERN"}, {"original_string": "private static final String X_MAC_ENC = \"x-mac-\";", "modifier": "private static final", "type": "String", "declarator": "X_MAC_ENC = \"x-mac-\"", "var_name": "X_MAC_ENC"}, {"original_string": "private static final String MAC_ENC = \"mac\";", "modifier": "private static final", "type": "String", "declarator": "MAC_ENC = \"mac\"", "var_name": "MAC_ENC"}], "methods": [{"identifier": "getParts", "parameters": "(String in, String delim)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getParts(String in, String delim)", "full_signature": "public static List<String> getParts(String in, String delim)", "class_method_signature": "StringHelper.getParts(String in, String delim)", "testcase": false, "constructor": false}, {"identifier": "formatLocaleDate", "parameters": "(long date, Locale locale)", "modifiers": "public static", "return": "String", "signature": "String formatLocaleDate(long date, Locale locale)", "full_signature": "public static String formatLocaleDate(long date, Locale locale)", "class_method_signature": "StringHelper.formatLocaleDate(long date, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "formatLocaleDateFull", "parameters": "(long date, Locale locale)", "modifiers": "public static", "return": "String", "signature": "String formatLocaleDateFull(long date, Locale locale)", "full_signature": "public static String formatLocaleDateFull(long date, Locale locale)", "class_method_signature": "StringHelper.formatLocaleDateFull(long date, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "formatLocaleDateTime", "parameters": "(long date, Locale locale)", "modifiers": "public static", "return": "String", "signature": "String formatLocaleDateTime(long date, Locale locale)", "full_signature": "public static String formatLocaleDateTime(long date, Locale locale)", "class_method_signature": "StringHelper.formatLocaleDateTime(long date, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "formatLocaleTime", "parameters": "(long time, Locale locale)", "modifiers": "public static", "return": "String", "signature": "String formatLocaleTime(long time, Locale locale)", "full_signature": "public static String formatLocaleTime(long time, Locale locale)", "class_method_signature": "StringHelper.formatLocaleTime(long time, Locale locale)", "testcase": false, "constructor": false}, {"identifier": "formatMemory", "parameters": "(long mem)", "modifiers": "public static", "return": "String", "signature": "String formatMemory(long mem)", "full_signature": "public static String formatMemory(long mem)", "class_method_signature": "StringHelper.formatMemory(long mem)", "testcase": false, "constructor": false}, {"identifier": "formatFloat", "parameters": "(float f, int fractionDigits)", "modifiers": "public static", "return": "String", "signature": "String formatFloat(float f, int fractionDigits)", "full_signature": "public static String formatFloat(float f, int fractionDigits)", "class_method_signature": "StringHelper.formatFloat(float f, int fractionDigits)", "testcase": false, "constructor": false}, {"identifier": "urlEncodeISO88591", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String urlEncodeISO88591(String url)", "full_signature": "public static String urlEncodeISO88591(String url)", "class_method_signature": "StringHelper.urlEncodeISO88591(String url)", "testcase": false, "constructor": false}, {"identifier": "urlEncodeUTF8", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String urlEncodeUTF8(String url)", "full_signature": "public static String urlEncodeUTF8(String url)", "class_method_signature": "StringHelper.urlEncodeUTF8(String url)", "testcase": false, "constructor": false}, {"identifier": "getMapKeysAsStringArray", "parameters": "(Map m)", "modifiers": "public static", "return": "String[]", "signature": "String[] getMapKeysAsStringArray(Map m)", "full_signature": "public static String[] getMapKeysAsStringArray(Map m)", "class_method_signature": "StringHelper.getMapKeysAsStringArray(Map m)", "testcase": false, "constructor": false}, {"identifier": "getMapValuesAsStringArray", "parameters": "(Map m)", "modifiers": "public static", "return": "String[]", "signature": "String[] getMapValuesAsStringArray(Map m)", "full_signature": "public static String[] getMapValuesAsStringArray(Map m)", "class_method_signature": "StringHelper.getMapValuesAsStringArray(Map m)", "testcase": false, "constructor": false}, {"identifier": "containsNoneOfCoDouSemi", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsNoneOfCoDouSemi(String s)", "full_signature": "public static boolean containsNoneOfCoDouSemi(String s)", "class_method_signature": "StringHelper.containsNoneOfCoDouSemi(String s)", "testcase": false, "constructor": false}, {"identifier": "containsNonWhitespace", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsNonWhitespace(String s)", "full_signature": "public static boolean containsNonWhitespace(String s)", "class_method_signature": "StringHelper.containsNonWhitespace(String s)", "testcase": false, "constructor": false}, {"identifier": "stripLineBreaks", "parameters": "(String cellValue)", "modifiers": "public static", "return": "String", "signature": "String stripLineBreaks(String cellValue)", "full_signature": "public static String stripLineBreaks(String cellValue)", "class_method_signature": "StringHelper.stripLineBreaks(String cellValue)", "testcase": false, "constructor": false}, {"identifier": "convertLineBreaksToHTML", "parameters": "(String plainText)", "modifiers": "public static", "return": "String", "signature": "String convertLineBreaksToHTML(String plainText)", "full_signature": "public static String convertLineBreaksToHTML(String plainText)", "class_method_signature": "StringHelper.convertLineBreaksToHTML(String plainText)", "testcase": false, "constructor": false}, {"identifier": "transformDisplayNameToFileSystemName", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String transformDisplayNameToFileSystemName(String s)", "full_signature": "public static String transformDisplayNameToFileSystemName(String s)", "class_method_signature": "StringHelper.transformDisplayNameToFileSystemName(String s)", "testcase": false, "constructor": false}, {"identifier": "check4xMacRoman", "parameters": "(String extractedCharset)", "modifiers": "public static", "return": "String", "signature": "String check4xMacRoman(String extractedCharset)", "full_signature": "public static String check4xMacRoman(String extractedCharset)", "class_method_signature": "StringHelper.check4xMacRoman(String extractedCharset)", "testcase": false, "constructor": false}, {"identifier": "formatAsCSVString", "parameters": "(Set<String> entries)", "modifiers": "public static", "return": "String", "signature": "String formatAsCSVString(Set<String> entries)", "full_signature": "public static String formatAsCSVString(Set<String> entries)", "class_method_signature": "StringHelper.formatAsCSVString(Set<String> entries)", "testcase": false, "constructor": false}, {"identifier": "formatAsCSVString", "parameters": "(List<String> entries)", "modifiers": "public static", "return": "String", "signature": "String formatAsCSVString(List<String> entries)", "full_signature": "public static String formatAsCSVString(List<String> entries)", "class_method_signature": "StringHelper.formatAsCSVString(List<String> entries)", "testcase": false, "constructor": false}, {"identifier": "formatAsSortUniqCSVString", "parameters": "(List<String> s)", "modifiers": "public static", "return": "String", "signature": "String formatAsSortUniqCSVString(List<String> s)", "full_signature": "public static String formatAsSortUniqCSVString(List<String> s)", "class_method_signature": "StringHelper.formatAsSortUniqCSVString(List<String> s)", "testcase": false, "constructor": false}, {"identifier": "formatAsSortUniqCSVString", "parameters": "(Set<String> s)", "modifiers": "public static", "return": "String", "signature": "String formatAsSortUniqCSVString(Set<String> s)", "full_signature": "public static String formatAsSortUniqCSVString(Set<String> s)", "class_method_signature": "StringHelper.formatAsSortUniqCSVString(Set<String> s)", "testcase": false, "constructor": false}, {"identifier": "escapeHtml", "parameters": "(String str)", "modifiers": "public static final", "return": "String", "signature": "String escapeHtml(String str)", "full_signature": "public static final String escapeHtml(String str)", "class_method_signature": "StringHelper.escapeHtml(String str)", "testcase": false, "constructor": false}, {"identifier": "escapeHtml", "parameters": "(Writer writer, String str)", "modifiers": "public static final", "return": "void", "signature": "void escapeHtml(Writer writer, String str)", "full_signature": "public static final void escapeHtml(Writer writer, String str)", "class_method_signature": "StringHelper.escapeHtml(Writer writer, String str)", "testcase": false, "constructor": false}, {"identifier": "escapeJavaScript", "parameters": "(String str)", "modifiers": "public static final", "return": "String", "signature": "String escapeJavaScript(String str)", "full_signature": "public static final String escapeJavaScript(String str)", "class_method_signature": "StringHelper.escapeJavaScript(String str)", "testcase": false, "constructor": false}, {"identifier": "escapeHtmlAttribute", "parameters": "(String str)", "modifiers": "public static final", "return": "String", "signature": "String escapeHtmlAttribute(String str)", "full_signature": "public static final String escapeHtmlAttribute(String str)", "class_method_signature": "StringHelper.escapeHtmlAttribute(String str)", "testcase": false, "constructor": false}, {"identifier": "escapeXml", "parameters": "(String str)", "modifiers": "public static final", "return": "String", "signature": "String escapeXml(String str)", "full_signature": "public static final String escapeXml(String str)", "class_method_signature": "StringHelper.escapeXml(String str)", "testcase": false, "constructor": false}, {"identifier": "unescapeHtml", "parameters": "(String str)", "modifiers": "public static final", "return": "String", "signature": "String unescapeHtml(String str)", "full_signature": "public static final String unescapeHtml(String str)", "class_method_signature": "StringHelper.unescapeHtml(String str)", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/system/commons/StringHelper.java"}, "focal_method": {"identifier": "containsNonWhitespace", "parameters": "(String s)", "modifiers": "public static", "return": "boolean", "body": "public static boolean containsNonWhitespace(String s) {\n        if (s == null)\n            return false;\n\n        Matcher matcher = WHITESPACE_PATTERN.matcher(s);\n\n        // if string matches whitespace pattern then string does not\n        // contain non-whitespace\n        return !matcher.find();\n    }", "signature": "boolean containsNonWhitespace(String s)", "full_signature": "public static boolean containsNonWhitespace(String s)", "class_method_signature": "StringHelper.containsNonWhitespace(String s)", "testcase": false, "constructor": false, "invocations": ["matcher", "find"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}