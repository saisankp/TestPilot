{"test_class": {"identifier": "SimpleRuntimeEnvironmentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    KnowledgeBuilder kbuilder;", "modifier": "@Mock", "type": "KnowledgeBuilder", "declarator": "kbuilder", "var_name": "kbuilder"}, {"original_string": "@InjectMocks\n    SimpleRuntimeEnvironment environment;", "modifier": "@InjectMocks", "type": "SimpleRuntimeEnvironment", "declarator": "environment", "var_name": "environment"}], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/SimpleRuntimeEnvironmentTest.java"}, "test_case": {"identifier": "addAssetCsvXlsReplaceConfigTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addAssetCsvXlsReplaceConfigTest() {\n        // config preserved\n        ArgumentCaptor<ResourceConfiguration> resourceConfigCaptor = ArgumentCaptor.forClass(ResourceConfiguration.class);\n        doThrow(new IllegalStateException(\"XLS resource not handled correctly!\")).when(this.kbuilder).add(any(Resource.class), any(ResourceType.class));\n        Resource resource = ResourceFactory.newClassPathResource(\"/data/resource.xls\", getClass());\n        DecisionTableConfigurationImpl config = new DecisionTableConfigurationImpl();\n        config.setInputType(DecisionTableInputType.CSV);\n        String worksheetName = \"test-worksheet-name\";\n        config.setWorksheetName(worksheetName);\n        resource.setConfiguration(config);\n\n        // do method\n        environment.addAsset(resource, ResourceType.DTABLE);\n\n        verify(this.kbuilder).add(any(Resource.class), any(ResourceType.class), resourceConfigCaptor.capture());\n        ResourceConfiguration replacedConfig = resourceConfigCaptor.getValue();\n        assertTrue(\"Not a DecisionTableConfiguration, but a \" + replacedConfig.getClass().getSimpleName(),\n                replacedConfig instanceof DecisionTableConfiguration);\n        assertEquals(\"Incorrect file type\", DecisionTableInputType.XLS, ((DecisionTableConfiguration) replacedConfig).getInputType());\n        assertEquals(\"Worksheet name not preserved\", worksheetName, ((DecisionTableConfiguration) replacedConfig).getWorksheetName());\n    }", "signature": "void addAssetCsvXlsReplaceConfigTest()", "full_signature": "@Test public void addAssetCsvXlsReplaceConfigTest()", "class_method_signature": "SimpleRuntimeEnvironmentTest.addAssetCsvXlsReplaceConfigTest()", "testcase": true, "constructor": false, "invocations": ["forClass", "add", "when", "doThrow", "any", "any", "newClassPathResource", "getClass", "setInputType", "setWorksheetName", "setConfiguration", "addAsset", "add", "verify", "any", "any", "capture", "getValue", "assertTrue", "getSimpleName", "getClass", "assertEquals", "getInputType", "assertEquals", "getWorksheetName"]}, "focal_class": {"identifier": "SimpleRuntimeEnvironment", "superclass": "", "interfaces": "implements RuntimeEnvironment, SchedulerProvider", "fields": [{"original_string": "protected boolean usePersistence;", "modifier": "protected", "type": "boolean", "declarator": "usePersistence", "var_name": "usePersistence"}, {"original_string": "protected EntityManagerFactory emf;", "modifier": "protected", "type": "EntityManagerFactory", "declarator": "emf", "var_name": "emf"}, {"original_string": "protected Map<String, Object> environmentEntries;", "modifier": "protected", "type": "Map<String, Object>", "declarator": "environmentEntries", "var_name": "environmentEntries"}, {"original_string": "protected Environment environment;", "modifier": "protected", "type": "Environment", "declarator": "environment", "var_name": "environment"}, {"original_string": "protected KieSessionConfiguration configuration;", "modifier": "protected", "type": "KieSessionConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "protected KieBase kbase;", "modifier": "protected", "type": "KieBase", "declarator": "kbase", "var_name": "kbase"}, {"original_string": "protected KnowledgeBuilder kbuilder;", "modifier": "protected", "type": "KnowledgeBuilder", "declarator": "kbuilder", "var_name": "kbuilder"}, {"original_string": "protected RegisterableItemsFactory registerableItemsFactory;", "modifier": "protected", "type": "RegisterableItemsFactory", "declarator": "registerableItemsFactory", "var_name": "registerableItemsFactory"}, {"original_string": "protected Mapper mapper;", "modifier": "protected", "type": "Mapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "protected UserGroupCallback userGroupCallback;", "modifier": "protected", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "protected UserInfo userInfo;", "modifier": "protected", "type": "UserInfo", "declarator": "userInfo", "var_name": "userInfo"}, {"original_string": "protected GlobalSchedulerService schedulerService;", "modifier": "protected", "type": "GlobalSchedulerService", "declarator": "schedulerService", "var_name": "schedulerService"}, {"original_string": "protected ClassLoader classLoader;", "modifier": "protected", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "protected Properties sessionConfigProperties;", "modifier": "protected", "type": "Properties", "declarator": "sessionConfigProperties", "var_name": "sessionConfigProperties"}], "methods": [{"identifier": "SimpleRuntimeEnvironment", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleRuntimeEnvironment()", "full_signature": "public  SimpleRuntimeEnvironment()", "class_method_signature": "SimpleRuntimeEnvironment.SimpleRuntimeEnvironment()", "testcase": false, "constructor": true}, {"identifier": "SimpleRuntimeEnvironment", "parameters": "(RegisterableItemsFactory registerableItemsFactory)", "modifiers": "public", "return": "", "signature": " SimpleRuntimeEnvironment(RegisterableItemsFactory registerableItemsFactory)", "full_signature": "public  SimpleRuntimeEnvironment(RegisterableItemsFactory registerableItemsFactory)", "class_method_signature": "SimpleRuntimeEnvironment.SimpleRuntimeEnvironment(RegisterableItemsFactory registerableItemsFactory)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "SimpleRuntimeEnvironment.init()", "testcase": false, "constructor": false}, {"identifier": "addAsset", "parameters": "(Resource resource, ResourceType type)", "modifiers": "public", "return": "void", "signature": "void addAsset(Resource resource, ResourceType type)", "full_signature": "public void addAsset(Resource resource, ResourceType type)", "class_method_signature": "SimpleRuntimeEnvironment.addAsset(Resource resource, ResourceType type)", "testcase": false, "constructor": false}, {"identifier": "addToEnvironment", "parameters": "(String name, Object value)", "modifiers": "public", "return": "void", "signature": "void addToEnvironment(String name, Object value)", "full_signature": "public void addToEnvironment(String name, Object value)", "class_method_signature": "SimpleRuntimeEnvironment.addToEnvironment(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "addToConfiguration", "parameters": "(String name, String value)", "modifiers": "public", "return": "void", "signature": "void addToConfiguration(String name, String value)", "full_signature": "public void addToConfiguration(String name, String value)", "class_method_signature": "SimpleRuntimeEnvironment.addToConfiguration(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "getKieBase", "parameters": "()", "modifiers": "@Override public", "return": "KieBase", "signature": "KieBase getKieBase()", "full_signature": "@Override public KieBase getKieBase()", "class_method_signature": "SimpleRuntimeEnvironment.getKieBase()", "testcase": false, "constructor": false}, {"identifier": "getEnvironmentTemplate", "parameters": "()", "modifiers": "public", "return": "Environment", "signature": "Environment getEnvironmentTemplate()", "full_signature": "public Environment getEnvironmentTemplate()", "class_method_signature": "SimpleRuntimeEnvironment.getEnvironmentTemplate()", "testcase": false, "constructor": false}, {"identifier": "getEnvironment", "parameters": "()", "modifiers": "@Override public", "return": "Environment", "signature": "Environment getEnvironment()", "full_signature": "@Override public Environment getEnvironment()", "class_method_signature": "SimpleRuntimeEnvironment.getEnvironment()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "KieSessionConfiguration", "signature": "KieSessionConfiguration getConfiguration()", "full_signature": "@Override public KieSessionConfiguration getConfiguration()", "class_method_signature": "SimpleRuntimeEnvironment.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "usePersistence", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean usePersistence()", "full_signature": "@Override public boolean usePersistence()", "class_method_signature": "SimpleRuntimeEnvironment.usePersistence()", "testcase": false, "constructor": false}, {"identifier": "getRegisterableItemsFactory", "parameters": "()", "modifiers": "@Override public", "return": "RegisterableItemsFactory", "signature": "RegisterableItemsFactory getRegisterableItemsFactory()", "full_signature": "@Override public RegisterableItemsFactory getRegisterableItemsFactory()", "class_method_signature": "SimpleRuntimeEnvironment.getRegisterableItemsFactory()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SimpleRuntimeEnvironment.close()", "testcase": false, "constructor": false}, {"identifier": "addIfPresent", "parameters": "(String name, Environment copy)", "modifiers": "protected", "return": "void", "signature": "void addIfPresent(String name, Environment copy)", "full_signature": "protected void addIfPresent(String name, Environment copy)", "class_method_signature": "SimpleRuntimeEnvironment.addIfPresent(String name, Environment copy)", "testcase": false, "constructor": false}, {"identifier": "copyEnvironment", "parameters": "()", "modifiers": "protected", "return": "Environment", "signature": "Environment copyEnvironment()", "full_signature": "protected Environment copyEnvironment()", "class_method_signature": "SimpleRuntimeEnvironment.copyEnvironment()", "testcase": false, "constructor": false}, {"identifier": "getMapper", "parameters": "()", "modifiers": "@Override public", "return": "Mapper", "signature": "Mapper getMapper()", "full_signature": "@Override public Mapper getMapper()", "class_method_signature": "SimpleRuntimeEnvironment.getMapper()", "testcase": false, "constructor": false}, {"identifier": "getUserGroupCallback", "parameters": "()", "modifiers": "@Override public", "return": "UserGroupCallback", "signature": "UserGroupCallback getUserGroupCallback()", "full_signature": "@Override public UserGroupCallback getUserGroupCallback()", "class_method_signature": "SimpleRuntimeEnvironment.getUserGroupCallback()", "testcase": false, "constructor": false}, {"identifier": "setUserGroupCallback", "parameters": "(UserGroupCallback userGroupCallback)", "modifiers": "public", "return": "void", "signature": "void setUserGroupCallback(UserGroupCallback userGroupCallback)", "full_signature": "public void setUserGroupCallback(UserGroupCallback userGroupCallback)", "class_method_signature": "SimpleRuntimeEnvironment.setUserGroupCallback(UserGroupCallback userGroupCallback)", "testcase": false, "constructor": false}, {"identifier": "getUserInfo", "parameters": "()", "modifiers": "@Override public", "return": "UserInfo", "signature": "UserInfo getUserInfo()", "full_signature": "@Override public UserInfo getUserInfo()", "class_method_signature": "SimpleRuntimeEnvironment.getUserInfo()", "testcase": false, "constructor": false}, {"identifier": "setUserInfo", "parameters": "(UserInfo userInfo)", "modifiers": "public", "return": "void", "signature": "void setUserInfo(UserInfo userInfo)", "full_signature": "public void setUserInfo(UserInfo userInfo)", "class_method_signature": "SimpleRuntimeEnvironment.setUserInfo(UserInfo userInfo)", "testcase": false, "constructor": false}, {"identifier": "getSessionConfigProperties", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getSessionConfigProperties()", "full_signature": "public Properties getSessionConfigProperties()", "class_method_signature": "SimpleRuntimeEnvironment.getSessionConfigProperties()", "testcase": false, "constructor": false}, {"identifier": "setSessionConfigProperties", "parameters": "(Properties sessionConfigProperties)", "modifiers": "public", "return": "void", "signature": "void setSessionConfigProperties(Properties sessionConfigProperties)", "full_signature": "public void setSessionConfigProperties(Properties sessionConfigProperties)", "class_method_signature": "SimpleRuntimeEnvironment.setSessionConfigProperties(Properties sessionConfigProperties)", "testcase": false, "constructor": false}, {"identifier": "setUsePersistence", "parameters": "(boolean usePersistence)", "modifiers": "public", "return": "void", "signature": "void setUsePersistence(boolean usePersistence)", "full_signature": "public void setUsePersistence(boolean usePersistence)", "class_method_signature": "SimpleRuntimeEnvironment.setUsePersistence(boolean usePersistence)", "testcase": false, "constructor": false}, {"identifier": "setKieBase", "parameters": "(KieBase kbase)", "modifiers": "public", "return": "void", "signature": "void setKieBase(KieBase kbase)", "full_signature": "public void setKieBase(KieBase kbase)", "class_method_signature": "SimpleRuntimeEnvironment.setKieBase(KieBase kbase)", "testcase": false, "constructor": false}, {"identifier": "setMapper", "parameters": "(Mapper mapper)", "modifiers": "public", "return": "void", "signature": "void setMapper(Mapper mapper)", "full_signature": "public void setMapper(Mapper mapper)", "class_method_signature": "SimpleRuntimeEnvironment.setMapper(Mapper mapper)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerService", "parameters": "()", "modifiers": "@Override public", "return": "GlobalSchedulerService", "signature": "GlobalSchedulerService getSchedulerService()", "full_signature": "@Override public GlobalSchedulerService getSchedulerService()", "class_method_signature": "SimpleRuntimeEnvironment.getSchedulerService()", "testcase": false, "constructor": false}, {"identifier": "setSchedulerService", "parameters": "(GlobalSchedulerService schedulerService)", "modifiers": "public", "return": "void", "signature": "void setSchedulerService(GlobalSchedulerService schedulerService)", "full_signature": "public void setSchedulerService(GlobalSchedulerService schedulerService)", "class_method_signature": "SimpleRuntimeEnvironment.setSchedulerService(GlobalSchedulerService schedulerService)", "testcase": false, "constructor": false}, {"identifier": "setRegisterableItemsFactory", "parameters": "(RegisterableItemsFactory registerableItemsFactory)", "modifiers": "public", "return": "void", "signature": "void setRegisterableItemsFactory(RegisterableItemsFactory registerableItemsFactory)", "full_signature": "public void setRegisterableItemsFactory(RegisterableItemsFactory registerableItemsFactory)", "class_method_signature": "SimpleRuntimeEnvironment.setRegisterableItemsFactory(RegisterableItemsFactory registerableItemsFactory)", "testcase": false, "constructor": false}, {"identifier": "getEmf", "parameters": "()", "modifiers": "public", "return": "EntityManagerFactory", "signature": "EntityManagerFactory getEmf()", "full_signature": "public EntityManagerFactory getEmf()", "class_method_signature": "SimpleRuntimeEnvironment.getEmf()", "testcase": false, "constructor": false}, {"identifier": "setEmf", "parameters": "(EntityManagerFactory emf)", "modifiers": "public", "return": "void", "signature": "void setEmf(EntityManagerFactory emf)", "full_signature": "public void setEmf(EntityManagerFactory emf)", "class_method_signature": "SimpleRuntimeEnvironment.setEmf(EntityManagerFactory emf)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "()", "modifiers": "public", "return": "ClassLoader", "signature": "ClassLoader getClassLoader()", "full_signature": "public ClassLoader getClassLoader()", "class_method_signature": "SimpleRuntimeEnvironment.getClassLoader()", "testcase": false, "constructor": false}, {"identifier": "setClassLoader", "parameters": "(ClassLoader classLoader)", "modifiers": "public", "return": "void", "signature": "void setClassLoader(ClassLoader classLoader)", "full_signature": "public void setClassLoader(ClassLoader classLoader)", "class_method_signature": "SimpleRuntimeEnvironment.setClassLoader(ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/SimpleRuntimeEnvironment.java"}, "focal_method": {"identifier": "addAsset", "parameters": "(Resource resource, ResourceType type)", "modifiers": "public", "return": "void", "body": "public void addAsset(Resource resource, ResourceType type) {\n        /**\n         * The code below (CSV/XLS) was added because of timelines related to switchyard/fuse.\n         *  \n         * However, it is an ugly hack: As soon as is possible, the code below should be removed or refactored. \n         * - an \"addAsset(Resource, ResourceType, ResourceConfiguration)\" method should be added to this implementation\n         * - or the kbuilder code should be refactored so that there are two ResourceTypes: CSV and XLS\n         * \n         * (refactoring the kbuilder code is probably a better idea.)\n         */\n        boolean replaced = false;\n        if (resource.getSourcePath() != null ) { \n            String path = resource.getSourcePath();\n          \n            String typeStr = null;\n            if( path.toLowerCase().endsWith(\".csv\") ) { \n                typeStr = DecisionTableInputType.CSV.toString();\n            } else if( path.toLowerCase().endsWith(\".xls\") ) { \n                typeStr = DecisionTableInputType.XLS.toString();\n            } \n           \n            if( typeStr != null ) { \n                String worksheetName = null;\n                boolean replaceConfig = true;\n                ResourceConfiguration config = resource.getConfiguration();\n                if( config != null && config instanceof DecisionTableConfiguration ) { \n                    DecisionTableInputType realType = DecisionTableInputType.valueOf(typeStr);\n                    if( ((DecisionTableConfiguration) config).getInputType().equals(realType) ) { \n                       replaceConfig = false;\n                    } else { \n                        worksheetName = ((DecisionTableConfiguration) config).getWorksheetName();\n                    }\n                }\n\n                if( replaceConfig ) { \n                    Properties prop = new Properties();\n                    prop.setProperty(ResourceTypeImpl.KIE_RESOURCE_CONF_CLASS, DecisionTableConfigurationImpl.class.getName());\n                    prop.setProperty(DecisionTableConfigurationImpl.DROOLS_DT_TYPE, typeStr);\n                    if( worksheetName != null ) { \n                        prop.setProperty(DecisionTableConfigurationImpl.DROOLS_DT_WORKSHEET, worksheetName);\n                    }\n                    ResourceConfiguration conf = ResourceTypeImpl.fromProperties(prop);\n                    this.kbuilder.add(resource, type, conf);\n                    replaced = true;\n                }\n            } \n        } \n        \n        if( ! replaced ) { \n            this.kbuilder.add(resource, type);\n        }\n\n        if (this.kbuilder.hasErrors()) {\n            StringBuffer errorMessage = new StringBuffer();\n            for( KnowledgeBuilderError error : kbuilder.getErrors()) {\n                errorMessage.append(error.getMessage() + \",\");\n            }\n            this.kbuilder.undo();\n            throw new IllegalArgumentException(\"Cannot add asset: \" + errorMessage.toString());\n        }\n    }", "signature": "void addAsset(Resource resource, ResourceType type)", "full_signature": "public void addAsset(Resource resource, ResourceType type)", "class_method_signature": "SimpleRuntimeEnvironment.addAsset(Resource resource, ResourceType type)", "testcase": false, "constructor": false, "invocations": ["getSourcePath", "getSourcePath", "endsWith", "toLowerCase", "toString", "endsWith", "toLowerCase", "toString", "getConfiguration", "valueOf", "equals", "getInputType", "getWorksheetName", "setProperty", "getName", "setProperty", "setProperty", "fromProperties", "add", "add", "hasErrors", "getErrors", "append", "getMessage", "undo", "toString"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}