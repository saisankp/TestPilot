{"test_class": {"identifier": "MoreFilesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "restx-common/src/test/java/restx/common/MoreFilesTest.java"}, "test_case": {"identifier": "should_extract_zip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_extract_zip() throws Exception {\n        File dest = folder.newFolder(\"dest\");\n\n        extractZip(new File(\"src/test/resources/restx/common/test.zip\"), dest);\n\n        assertThat(new File(dest, \"A.txt\")).exists();\n        assertThat(new File(dest, \"1/B.txt\")).exists();\n        assertThat(new File(dest, \"1/C.txt\")).exists();\n        assertThat(new File(dest, \"2/D.txt\")).exists();\n        assertThat(new File(dest, \"2/E.txt\")).exists().hasContent(\"hello\");\n    }", "signature": "void should_extract_zip()", "full_signature": "@Test public void should_extract_zip()", "class_method_signature": "MoreFilesTest.should_extract_zip()", "testcase": true, "constructor": false, "invocations": ["newFolder", "extractZip", "exists", "assertThat", "exists", "assertThat", "exists", "assertThat", "exists", "assertThat", "hasContent", "exists", "assertThat"]}, "focal_class": {"identifier": "MoreFiles", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Function<? super Path, ? extends File> pathToFile = new Function<Path, File>() {\n        @Override\n        public File apply(Path input) {\n            return input.toFile();\n        }\n    };", "modifier": "public static final", "type": "Function<? super Path, ? extends File>", "declarator": "pathToFile = new Function<Path, File>() {\n        @Override\n        public File apply(Path input) {\n            return input.toFile();\n        }\n    }", "var_name": "pathToFile"}, {"original_string": "public static final Function<String, Path> strToPath = new Function<String, Path>() {\n        @Override\n        public Path apply(String input) {\n            return FileSystems.getDefault().getPath(input);\n        }\n    };", "modifier": "public static final", "type": "Function<String, Path>", "declarator": "strToPath = new Function<String, Path>() {\n        @Override\n        public Path apply(String input) {\n            return FileSystems.getDefault().getPath(input);\n        }\n    }", "var_name": "strToPath"}], "methods": [{"identifier": "delete", "parameters": "(Path path)", "modifiers": "public static", "return": "void", "signature": "void delete(Path path)", "full_signature": "public static void delete(Path path)", "class_method_signature": "MoreFiles.delete(Path path)", "testcase": false, "constructor": false}, {"identifier": "watch", "parameters": "(Path dir, EventBus eventBus,\n                             ExecutorService executor, WatcherSettings watcherSettings)", "modifiers": "public static", "return": "Closeable", "signature": "Closeable watch(Path dir, EventBus eventBus,\n                             ExecutorService executor, WatcherSettings watcherSettings)", "full_signature": "public static Closeable watch(Path dir, EventBus eventBus,\n                             ExecutorService executor, WatcherSettings watcherSettings)", "class_method_signature": "MoreFiles.watch(Path dir, EventBus eventBus,\n                             ExecutorService executor, WatcherSettings watcherSettings)", "testcase": false, "constructor": false}, {"identifier": "copyDir", "parameters": "(final Path sourceDir, final Path targetDir)", "modifiers": "public static", "return": "void", "signature": "void copyDir(final Path sourceDir, final Path targetDir)", "full_signature": "public static void copyDir(final Path sourceDir, final Path targetDir)", "class_method_signature": "MoreFiles.copyDir(final Path sourceDir, final Path targetDir)", "testcase": false, "constructor": false}, {"identifier": "checkFileExists", "parameters": "(String location)", "modifiers": "public static", "return": "void", "signature": "void checkFileExists(String location)", "full_signature": "public static void checkFileExists(String location)", "class_method_signature": "MoreFiles.checkFileExists(String location)", "testcase": false, "constructor": false}, {"identifier": "extractZip", "parameters": "(File zip, File toDir)", "modifiers": "public static", "return": "void", "signature": "void extractZip(File zip, File toDir)", "full_signature": "public static void extractZip(File zip, File toDir)", "class_method_signature": "MoreFiles.extractZip(File zip, File toDir)", "testcase": false, "constructor": false}, {"identifier": "removeWindowsCarriageReturnsBeforeLF", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String removeWindowsCarriageReturnsBeforeLF(String str)", "full_signature": "public static String removeWindowsCarriageReturnsBeforeLF(String str)", "class_method_signature": "MoreFiles.removeWindowsCarriageReturnsBeforeLF(String str)", "testcase": false, "constructor": false}], "file": "restx-common/src/main/java/restx/common/MoreFiles.java"}, "focal_method": {"identifier": "extractZip", "parameters": "(File zip, File toDir)", "modifiers": "public static", "return": "void", "body": "public static void extractZip(File zip, File toDir) throws IOException {\n        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zip))) {\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                if (!entry.isDirectory()) {\n                    File file = new File(toDir, entry.getName());\n                    createParentDirs(file);\n                    Files.copy(zis, file.toPath());\n                    zis.closeEntry();\n                }\n            }\n        }\n    }", "signature": "void extractZip(File zip, File toDir)", "full_signature": "public static void extractZip(File zip, File toDir)", "class_method_signature": "MoreFiles.extractZip(File zip, File toDir)", "testcase": false, "constructor": false, "invocations": ["getNextEntry", "isDirectory", "getName", "createParentDirs", "copy", "toPath", "closeEntry"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}