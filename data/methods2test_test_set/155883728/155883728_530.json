{"test_class": {"identifier": "JackrabbitAccessControlManagerFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/security/JackrabbitAccessControlManagerFacadeTest.java"}, "test_case": {"identifier": "testGetPrivileges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetPrivileges() throws Exception {\n        JackrabbitAccessControlManager delegate = mock(JackrabbitAccessControlManager.class);\n        JackrabbitAccessControlManagerFacade facade = getFacade(delegate);\n        final Set<Principal> principals = Collections.singleton(EveryonePrincipal.getInstance());\n        final Privilege[] privileges = new Privilege[0];\n        when(delegate.getPrivileges(\"/foo\", principals)).thenReturn(privileges);\n        assertNull(\"should be null in wrong path\", facade.getPrivileges(\"\", principals));\n        assertSame(\"should hasPrivileges\", privileges, facade.getPrivileges(\"/foo\", principals));\n    }", "signature": "void testGetPrivileges()", "full_signature": "@Test public void testGetPrivileges()", "class_method_signature": "JackrabbitAccessControlManagerFacadeTest.testGetPrivileges()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "singleton", "getInstance", "thenReturn", "when", "getPrivileges", "assertNull", "getPrivileges", "assertSame", "getPrivileges"]}, "focal_class": {"identifier": "JackrabbitAccessControlManagerFacade", "superclass": "extends AccessControlManagerFacade<JackrabbitAccessControlManager>", "interfaces": "implements JackrabbitAccessControlManager", "fields": [], "methods": [{"identifier": "JackrabbitAccessControlManagerFacade", "parameters": "(final @NotNull JackrabbitAccessControlManager delegate)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "", "signature": " JackrabbitAccessControlManagerFacade(final @NotNull JackrabbitAccessControlManager delegate)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public  JackrabbitAccessControlManagerFacade(final @NotNull JackrabbitAccessControlManager delegate)", "class_method_signature": "JackrabbitAccessControlManagerFacade.JackrabbitAccessControlManagerFacade(final @NotNull JackrabbitAccessControlManager delegate)", "testcase": false, "constructor": true}, {"identifier": "getApplicablePolicies", "parameters": "(Principal principal)", "modifiers": "@Override public", "return": "JackrabbitAccessControlPolicy[]", "signature": "JackrabbitAccessControlPolicy[] getApplicablePolicies(Principal principal)", "full_signature": "@Override public JackrabbitAccessControlPolicy[] getApplicablePolicies(Principal principal)", "class_method_signature": "JackrabbitAccessControlManagerFacade.getApplicablePolicies(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getPolicies", "parameters": "(Principal principal)", "modifiers": "@Override public", "return": "JackrabbitAccessControlPolicy[]", "signature": "JackrabbitAccessControlPolicy[] getPolicies(Principal principal)", "full_signature": "@Override public JackrabbitAccessControlPolicy[] getPolicies(Principal principal)", "class_method_signature": "JackrabbitAccessControlManagerFacade.getPolicies(Principal principal)", "testcase": false, "constructor": false}, {"identifier": "getEffectivePolicies", "parameters": "(Set<Principal> principals)", "modifiers": "@Override public", "return": "AccessControlPolicy[]", "signature": "AccessControlPolicy[] getEffectivePolicies(Set<Principal> principals)", "full_signature": "@Override public AccessControlPolicy[] getEffectivePolicies(Set<Principal> principals)", "class_method_signature": "JackrabbitAccessControlManagerFacade.getEffectivePolicies(Set<Principal> principals)", "testcase": false, "constructor": false}, {"identifier": "hasPrivileges", "parameters": "(String absPath, Set<Principal> principals, Privilege[] privileges)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPrivileges(String absPath, Set<Principal> principals, Privilege[] privileges)", "full_signature": "@Override public boolean hasPrivileges(String absPath, Set<Principal> principals, Privilege[] privileges)", "class_method_signature": "JackrabbitAccessControlManagerFacade.hasPrivileges(String absPath, Set<Principal> principals, Privilege[] privileges)", "testcase": false, "constructor": false}, {"identifier": "getPrivileges", "parameters": "(String absPath, Set<Principal> principals)", "modifiers": "@Override public", "return": "Privilege[]", "signature": "Privilege[] getPrivileges(String absPath, Set<Principal> principals)", "full_signature": "@Override public Privilege[] getPrivileges(String absPath, Set<Principal> principals)", "class_method_signature": "JackrabbitAccessControlManagerFacade.getPrivileges(String absPath, Set<Principal> principals)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/security/JackrabbitAccessControlManagerFacade.java"}, "focal_method": {"identifier": "getPrivileges", "parameters": "(String absPath, Set<Principal> principals)", "modifiers": "@Override public", "return": "Privilege[]", "body": "@Override\n    public Privilege[] getPrivileges(String absPath, Set<Principal> principals) throws RepositoryException {\n        return delegate.getPrivileges(absPath, principals);\n    }", "signature": "Privilege[] getPrivileges(String absPath, Set<Principal> principals)", "full_signature": "@Override public Privilege[] getPrivileges(String absPath, Set<Principal> principals)", "class_method_signature": "JackrabbitAccessControlManagerFacade.getPrivileges(String absPath, Set<Principal> principals)", "testcase": false, "constructor": false, "invocations": ["getPrivileges"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}