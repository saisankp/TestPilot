{"test_class": {"identifier": "ESRIPointTest", "superclass": "extends AbstractIoShapeTest", "interfaces": "", "fields": [{"original_string": "private double x, y, z, m;", "modifier": "private", "type": "double", "declarator": "x", "var_name": "x"}, {"original_string": "private ESRIPoint pts;", "modifier": "private", "type": "ESRIPoint", "declarator": "pts", "var_name": "pts"}], "file": "advanced/shapefile/src/test/java/org/arakhne/afc/io/shape/ESRIPointTest.java"}, "test_case": {"identifier": "testGetM", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetM() {\n\t\tassertEpsilonEquals(this.m, this.pts.getM());\n\t}", "signature": "void testGetM()", "full_signature": "@Test public void testGetM()", "class_method_signature": "ESRIPointTest.testGetM()", "testcase": true, "constructor": false, "invocations": ["assertEpsilonEquals", "getM"]}, "focal_class": {"identifier": "ESRIPoint", "superclass": "extends Point3d", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -6733000156946667895L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -6733000156946667895L", "var_name": "serialVersionUID"}, {"original_string": "private double mesure;", "modifier": "private", "type": "double", "declarator": "mesure", "var_name": "mesure"}], "methods": [{"identifier": "ESRIPoint", "parameters": "()", "modifiers": "public", "return": "", "signature": " ESRIPoint()", "full_signature": "public  ESRIPoint()", "class_method_signature": "ESRIPoint.ESRIPoint()", "testcase": false, "constructor": true}, {"identifier": "ESRIPoint", "parameters": "(double x, double y)", "modifiers": "public", "return": "", "signature": " ESRIPoint(double x, double y)", "full_signature": "public  ESRIPoint(double x, double y)", "class_method_signature": "ESRIPoint.ESRIPoint(double x, double y)", "testcase": false, "constructor": true}, {"identifier": "ESRIPoint", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "", "signature": " ESRIPoint(double x, double y, double z)", "full_signature": "public  ESRIPoint(double x, double y, double z)", "class_method_signature": "ESRIPoint.ESRIPoint(double x, double y, double z)", "testcase": false, "constructor": true}, {"identifier": "ESRIPoint", "parameters": "(Tuple2D<?> point)", "modifiers": "public", "return": "", "signature": " ESRIPoint(Tuple2D<?> point)", "full_signature": "public  ESRIPoint(Tuple2D<?> point)", "class_method_signature": "ESRIPoint.ESRIPoint(Tuple2D<?> point)", "testcase": false, "constructor": true}, {"identifier": "ESRIPoint", "parameters": "(Tuple3D<?> point)", "modifiers": "public", "return": "", "signature": " ESRIPoint(Tuple3D<?> point)", "full_signature": "public  ESRIPoint(Tuple3D<?> point)", "class_method_signature": "ESRIPoint.ESRIPoint(Tuple3D<?> point)", "testcase": false, "constructor": true}, {"identifier": "ESRIPoint", "parameters": "(ESRIPoint point)", "modifiers": "public", "return": "", "signature": " ESRIPoint(ESRIPoint point)", "full_signature": "public  ESRIPoint(ESRIPoint point)", "class_method_signature": "ESRIPoint.ESRIPoint(ESRIPoint point)", "testcase": false, "constructor": true}, {"identifier": "ESRIPoint", "parameters": "(double x, double y, double z, double measure)", "modifiers": "public", "return": "", "signature": " ESRIPoint(double x, double y, double z, double measure)", "full_signature": "public  ESRIPoint(double x, double y, double z, double measure)", "class_method_signature": "ESRIPoint.ESRIPoint(double x, double y, double z, double measure)", "testcase": false, "constructor": true}, {"identifier": "getM", "parameters": "()", "modifiers": "@Pure public", "return": "double", "signature": "double getM()", "full_signature": "@Pure public double getM()", "class_method_signature": "ESRIPoint.getM()", "testcase": false, "constructor": false}, {"identifier": "setM", "parameters": "(double mesure)", "modifiers": "public", "return": "void", "signature": "void setM(double mesure)", "full_signature": "public void setM(double mesure)", "class_method_signature": "ESRIPoint.setM(double mesure)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override @Pure public", "return": "String", "signature": "String toString()", "full_signature": "@Override @Pure public String toString()", "class_method_signature": "ESRIPoint.toString()", "testcase": false, "constructor": false}], "file": "advanced/shapefile/src/main/java/org/arakhne/afc/io/shape/ESRIPoint.java"}, "focal_method": {"identifier": "getM", "parameters": "()", "modifiers": "@Pure public", "return": "double", "body": "@Pure\n\tpublic double getM() {\n\t\treturn this.mesure;\n\t}", "signature": "double getM()", "full_signature": "@Pure public double getM()", "class_method_signature": "ESRIPoint.getM()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}