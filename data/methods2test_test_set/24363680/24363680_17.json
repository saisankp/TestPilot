{"test_class": {"identifier": "ScriptTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String sigProg = \"473    04402202b4da291cc39faf8433911988f9f49fc5c995812ca2f94db61468839c228c3e90220628bff3ff32ec95825092fa051cba28558a981fcf59ce184b14f2e215e69106701410414b38f4be3bb9fa0f4f32b74af07152b2f2f630bc02122a491137b6c523e46f18a0d5034418966f93dfc37cc3739ef7b2007213a302b7fba161557f4ad644a1c\";", "modifier": "static final", "type": "String", "declarator": "sigProg = \"473    04402202b4da291cc39faf8433911988f9f49fc5c995812ca2f94db61468839c228c3e90220628bff3ff32ec95825092fa051cba28558a981fcf59ce184b14f2e215e69106701410414b38f4be3bb9fa0f4f32b74af07152b2f2f630bc02122a491137b6c523e46f18a0d5034418966f93dfc37cc3739ef7b2007213a302b7fba161557f4ad644a1c\"", "var_name": "sigProg"}, {"original_string": "static final String pubkeyProg = \"76a91433e81a941e64cda12c6a299ed322ddbdd03f8d0e88ac\";", "modifier": "static final", "type": "String", "declarator": "pubkeyProg = \"76a91433e81a941e64cda12c6a299ed322ddbdd03f8d0e88ac\"", "var_name": "pubkeyProg"}, {"original_string": "static final NetworkParameters params = TestNet3Params.get();", "modifier": "static final", "type": "NetworkParameters", "declarator": "params = TestNet3Params.get()", "var_name": "params"}], "file": "core/src/test/java/com/google/bitcoin/script/ScriptTest.java"}, "test_case": {"identifier": "testP2SHOutputScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testP2SHOutputScript() throws Exception {\n      Address p2shAddress = new Address(MainNetParams.get(), \"35b9vsyH1KoFT5a5KtrKusaCcPLkiSo1tU\");\n      assertTrue(ScriptBuilder.createOutputScript(p2shAddress).isSentToP2SH());\n    }", "signature": "void testP2SHOutputScript()", "full_signature": "@Test public void testP2SHOutputScript()", "class_method_signature": "ScriptTest.testP2SHOutputScript()", "testcase": true, "constructor": false, "invocations": ["get", "assertTrue", "isSentToP2SH", "createOutputScript"]}, "focal_class": {"identifier": "Script", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Script.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Script.class)", "var_name": "log"}, {"original_string": "public static final long MAX_SCRIPT_ELEMENT_SIZE = 520;", "modifier": "public static final", "type": "long", "declarator": "MAX_SCRIPT_ELEMENT_SIZE = 520", "var_name": "MAX_SCRIPT_ELEMENT_SIZE"}, {"original_string": "protected List<ScriptChunk> chunks;", "modifier": "protected", "type": "List<ScriptChunk>", "declarator": "chunks", "var_name": "chunks"}, {"original_string": "protected byte[] program;", "modifier": "protected", "type": "byte[]", "declarator": "program", "var_name": "program"}, {"original_string": "private long creationTimeSeconds;", "modifier": "private", "type": "long", "declarator": "creationTimeSeconds", "var_name": "creationTimeSeconds"}, {"original_string": "private static final ScriptChunk INTERN_TABLE[];", "modifier": "private static final", "type": "ScriptChunk", "declarator": "INTERN_TABLE[]", "var_name": "INTERN_TABLE"}], "methods": [{"identifier": "Script", "parameters": "()", "modifiers": "private", "return": "", "signature": " Script()", "full_signature": "private  Script()", "class_method_signature": "Script.Script()", "testcase": false, "constructor": true}, {"identifier": "Script", "parameters": "(List<ScriptChunk> chunks)", "modifiers": "", "return": "", "signature": " Script(List<ScriptChunk> chunks)", "full_signature": "  Script(List<ScriptChunk> chunks)", "class_method_signature": "Script.Script(List<ScriptChunk> chunks)", "testcase": false, "constructor": true}, {"identifier": "Script", "parameters": "(byte[] programBytes)", "modifiers": "public", "return": "", "signature": " Script(byte[] programBytes)", "full_signature": "public  Script(byte[] programBytes)", "class_method_signature": "Script.Script(byte[] programBytes)", "testcase": false, "constructor": true}, {"identifier": "Script", "parameters": "(byte[] programBytes, long creationTimeSeconds)", "modifiers": "public", "return": "", "signature": " Script(byte[] programBytes, long creationTimeSeconds)", "full_signature": "public  Script(byte[] programBytes, long creationTimeSeconds)", "class_method_signature": "Script.Script(byte[] programBytes, long creationTimeSeconds)", "testcase": false, "constructor": true}, {"identifier": "getCreationTimeSeconds", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCreationTimeSeconds()", "full_signature": "public long getCreationTimeSeconds()", "class_method_signature": "Script.getCreationTimeSeconds()", "testcase": false, "constructor": false}, {"identifier": "setCreationTimeSeconds", "parameters": "(long creationTimeSeconds)", "modifiers": "public", "return": "void", "signature": "void setCreationTimeSeconds(long creationTimeSeconds)", "full_signature": "public void setCreationTimeSeconds(long creationTimeSeconds)", "class_method_signature": "Script.setCreationTimeSeconds(long creationTimeSeconds)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Script.toString()", "testcase": false, "constructor": false}, {"identifier": "getProgram", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getProgram()", "full_signature": "public byte[] getProgram()", "class_method_signature": "Script.getProgram()", "testcase": false, "constructor": false}, {"identifier": "getChunks", "parameters": "()", "modifiers": "public", "return": "List<ScriptChunk>", "signature": "List<ScriptChunk> getChunks()", "full_signature": "public List<ScriptChunk> getChunks()", "class_method_signature": "Script.getChunks()", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(byte[] program)", "modifiers": "private", "return": "void", "signature": "void parse(byte[] program)", "full_signature": "private void parse(byte[] program)", "class_method_signature": "Script.parse(byte[] program)", "testcase": false, "constructor": false}, {"identifier": "isSentToRawPubKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSentToRawPubKey()", "full_signature": "public boolean isSentToRawPubKey()", "class_method_signature": "Script.isSentToRawPubKey()", "testcase": false, "constructor": false}, {"identifier": "isSentToAddress", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSentToAddress()", "full_signature": "public boolean isSentToAddress()", "class_method_signature": "Script.isSentToAddress()", "testcase": false, "constructor": false}, {"identifier": "isSentToP2SH", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSentToP2SH()", "full_signature": "public boolean isSentToP2SH()", "class_method_signature": "Script.isSentToP2SH()", "testcase": false, "constructor": false}, {"identifier": "getPubKeyHash", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPubKeyHash()", "full_signature": "public byte[] getPubKeyHash()", "class_method_signature": "Script.getPubKeyHash()", "testcase": false, "constructor": false}, {"identifier": "getPubKey", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPubKey()", "full_signature": "public byte[] getPubKey()", "class_method_signature": "Script.getPubKey()", "testcase": false, "constructor": false}, {"identifier": "getFromAddress", "parameters": "(NetworkParameters params)", "modifiers": "@Deprecated public", "return": "Address", "signature": "Address getFromAddress(NetworkParameters params)", "full_signature": "@Deprecated public Address getFromAddress(NetworkParameters params)", "class_method_signature": "Script.getFromAddress(NetworkParameters params)", "testcase": false, "constructor": false}, {"identifier": "getToAddress", "parameters": "(NetworkParameters params)", "modifiers": "public", "return": "Address", "signature": "Address getToAddress(NetworkParameters params)", "full_signature": "public Address getToAddress(NetworkParameters params)", "class_method_signature": "Script.getToAddress(NetworkParameters params)", "testcase": false, "constructor": false}, {"identifier": "writeBytes", "parameters": "(OutputStream os, byte[] buf)", "modifiers": "public static", "return": "void", "signature": "void writeBytes(OutputStream os, byte[] buf)", "full_signature": "public static void writeBytes(OutputStream os, byte[] buf)", "class_method_signature": "Script.writeBytes(OutputStream os, byte[] buf)", "testcase": false, "constructor": false}, {"identifier": "createMultiSigOutputScript", "parameters": "(int threshold, List<ECKey> pubkeys)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] createMultiSigOutputScript(int threshold, List<ECKey> pubkeys)", "full_signature": "public static byte[] createMultiSigOutputScript(int threshold, List<ECKey> pubkeys)", "class_method_signature": "Script.createMultiSigOutputScript(int threshold, List<ECKey> pubkeys)", "testcase": false, "constructor": false}, {"identifier": "createInputScript", "parameters": "(byte[] signature, byte[] pubkey)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] createInputScript(byte[] signature, byte[] pubkey)", "full_signature": "public static byte[] createInputScript(byte[] signature, byte[] pubkey)", "class_method_signature": "Script.createInputScript(byte[] signature, byte[] pubkey)", "testcase": false, "constructor": false}, {"identifier": "createInputScript", "parameters": "(byte[] signature)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] createInputScript(byte[] signature)", "full_signature": "public static byte[] createInputScript(byte[] signature)", "class_method_signature": "Script.createInputScript(byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "getSigOpCount", "parameters": "(List<ScriptChunk> chunks, boolean accurate)", "modifiers": "private static", "return": "int", "signature": "int getSigOpCount(List<ScriptChunk> chunks, boolean accurate)", "full_signature": "private static int getSigOpCount(List<ScriptChunk> chunks, boolean accurate)", "class_method_signature": "Script.getSigOpCount(List<ScriptChunk> chunks, boolean accurate)", "testcase": false, "constructor": false}, {"identifier": "decodeFromOpN", "parameters": "(byte opcode)", "modifiers": "public static", "return": "int", "signature": "int decodeFromOpN(byte opcode)", "full_signature": "public static int decodeFromOpN(byte opcode)", "class_method_signature": "Script.decodeFromOpN(byte opcode)", "testcase": false, "constructor": false}, {"identifier": "decodeFromOpN", "parameters": "(int opcode)", "modifiers": "static", "return": "int", "signature": "int decodeFromOpN(int opcode)", "full_signature": "static int decodeFromOpN(int opcode)", "class_method_signature": "Script.decodeFromOpN(int opcode)", "testcase": false, "constructor": false}, {"identifier": "encodeToOpN", "parameters": "(int value)", "modifiers": "static", "return": "int", "signature": "int encodeToOpN(int value)", "full_signature": "static int encodeToOpN(int value)", "class_method_signature": "Script.encodeToOpN(int value)", "testcase": false, "constructor": false}, {"identifier": "getSigOpCount", "parameters": "(byte[] program)", "modifiers": "public static", "return": "int", "signature": "int getSigOpCount(byte[] program)", "full_signature": "public static int getSigOpCount(byte[] program)", "class_method_signature": "Script.getSigOpCount(byte[] program)", "testcase": false, "constructor": false}, {"identifier": "getP2SHSigOpCount", "parameters": "(byte[] scriptSig)", "modifiers": "public static", "return": "long", "signature": "long getP2SHSigOpCount(byte[] scriptSig)", "full_signature": "public static long getP2SHSigOpCount(byte[] scriptSig)", "class_method_signature": "Script.getP2SHSigOpCount(byte[] scriptSig)", "testcase": false, "constructor": false}, {"identifier": "isPayToScriptHash", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPayToScriptHash()", "full_signature": "public boolean isPayToScriptHash()", "class_method_signature": "Script.isPayToScriptHash()", "testcase": false, "constructor": false}, {"identifier": "isSentToMultiSig", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSentToMultiSig()", "full_signature": "public boolean isSentToMultiSig()", "class_method_signature": "Script.isSentToMultiSig()", "testcase": false, "constructor": false}, {"identifier": "equalsRange", "parameters": "(byte[] a, int start, byte[] b)", "modifiers": "private static", "return": "boolean", "signature": "boolean equalsRange(byte[] a, int start, byte[] b)", "full_signature": "private static boolean equalsRange(byte[] a, int start, byte[] b)", "class_method_signature": "Script.equalsRange(byte[] a, int start, byte[] b)", "testcase": false, "constructor": false}, {"identifier": "removeAllInstancesOf", "parameters": "(byte[] inputScript, byte[] chunkToRemove)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] removeAllInstancesOf(byte[] inputScript, byte[] chunkToRemove)", "full_signature": "public static byte[] removeAllInstancesOf(byte[] inputScript, byte[] chunkToRemove)", "class_method_signature": "Script.removeAllInstancesOf(byte[] inputScript, byte[] chunkToRemove)", "testcase": false, "constructor": false}, {"identifier": "removeAllInstancesOfOp", "parameters": "(byte[] inputScript, int opCode)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] removeAllInstancesOfOp(byte[] inputScript, int opCode)", "full_signature": "public static byte[] removeAllInstancesOfOp(byte[] inputScript, int opCode)", "class_method_signature": "Script.removeAllInstancesOfOp(byte[] inputScript, int opCode)", "testcase": false, "constructor": false}, {"identifier": "castToBool", "parameters": "(byte[] data)", "modifiers": "private static", "return": "boolean", "signature": "boolean castToBool(byte[] data)", "full_signature": "private static boolean castToBool(byte[] data)", "class_method_signature": "Script.castToBool(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "castToBigInteger", "parameters": "(byte[] chunk)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger castToBigInteger(byte[] chunk)", "full_signature": "private static BigInteger castToBigInteger(byte[] chunk)", "class_method_signature": "Script.castToBigInteger(byte[] chunk)", "testcase": false, "constructor": false}, {"identifier": "executeScript", "parameters": "(Transaction txContainingThis, long index,\n                                      Script script, LinkedList<byte[]> stack)", "modifiers": "private static", "return": "void", "signature": "void executeScript(Transaction txContainingThis, long index,\n                                      Script script, LinkedList<byte[]> stack)", "full_signature": "private static void executeScript(Transaction txContainingThis, long index,\n                                      Script script, LinkedList<byte[]> stack)", "class_method_signature": "Script.executeScript(Transaction txContainingThis, long index,\n                                      Script script, LinkedList<byte[]> stack)", "testcase": false, "constructor": false}, {"identifier": "executeCheckSig", "parameters": "(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                        int lastCodeSepLocation, int opcode)", "modifiers": "private static", "return": "void", "signature": "void executeCheckSig(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                        int lastCodeSepLocation, int opcode)", "full_signature": "private static void executeCheckSig(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                        int lastCodeSepLocation, int opcode)", "class_method_signature": "Script.executeCheckSig(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                        int lastCodeSepLocation, int opcode)", "testcase": false, "constructor": false}, {"identifier": "executeMultiSig", "parameters": "(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                       int opCount, int lastCodeSepLocation, int opcode)", "modifiers": "private static", "return": "int", "signature": "int executeMultiSig(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                       int opCount, int lastCodeSepLocation, int opcode)", "full_signature": "private static int executeMultiSig(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                       int opCount, int lastCodeSepLocation, int opcode)", "class_method_signature": "Script.executeMultiSig(Transaction txContainingThis, int index, Script script, LinkedList<byte[]> stack,\n                                       int opCount, int lastCodeSepLocation, int opcode)", "testcase": false, "constructor": false}, {"identifier": "correctlySpends", "parameters": "(Transaction txContainingThis, long scriptSigIndex, Script scriptPubKey,\n                                boolean enforceP2SH)", "modifiers": "public", "return": "void", "signature": "void correctlySpends(Transaction txContainingThis, long scriptSigIndex, Script scriptPubKey,\n                                boolean enforceP2SH)", "full_signature": "public void correctlySpends(Transaction txContainingThis, long scriptSigIndex, Script scriptPubKey,\n                                boolean enforceP2SH)", "class_method_signature": "Script.correctlySpends(Transaction txContainingThis, long scriptSigIndex, Script scriptPubKey,\n                                boolean enforceP2SH)", "testcase": false, "constructor": false}, {"identifier": "getQuickProgram", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] getQuickProgram()", "full_signature": "private byte[] getQuickProgram()", "class_method_signature": "Script.getQuickProgram()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Script.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Script.hashCode()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/google/bitcoin/script/Script.java"}, "focal_method": {"identifier": "isSentToP2SH", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isSentToP2SH() {\n        return chunks.size() == 3 &&\n               chunks.get(0).equalsOpCode(OP_HASH160) &&\n               chunks.get(1).data.length == Address.LENGTH &&\n               chunks.get(2).equalsOpCode(OP_EQUAL);\n    }", "signature": "boolean isSentToP2SH()", "full_signature": "public boolean isSentToP2SH()", "class_method_signature": "Script.isSentToP2SH()", "testcase": false, "constructor": false, "invocations": ["size", "equalsOpCode", "get", "get", "equalsOpCode", "get"]}, "repository": {"repo_id": 24363680, "url": "https://github.com/cannabiscoindev/cannabiscoinj", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 10126, "license": "licensed"}}