{"test_class": {"identifier": "EthernetTest", "superclass": "", "interfaces": "", "fields": [], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/packet/EthernetTest.java"}, "test_case": {"identifier": "testToLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToLong() {\n        assertEquals(\n                281474976710655L,\n                Ethernet.toLong(new byte[] { (byte) 0xff, (byte) 0xff,\n                        (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }));\n\n        assertEquals(\n                1103823438081L,\n                Ethernet.toLong(new byte[] { (byte) 0x01, (byte) 0x01,\n                        (byte) 0x01, (byte) 0x01, (byte) 0x01, (byte) 0x01 }));\n\n        assertEquals(\n                141289400074368L,\n                Ethernet.toLong(new byte[] { (byte) 0x80, (byte) 0x80,\n                        (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80 }));\n    }", "signature": "void testToLong()", "full_signature": "@Test public void testToLong()", "class_method_signature": "EthernetTest.testToLong()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toLong", "assertEquals", "toLong", "assertEquals", "toLong"]}, "focal_class": {"identifier": "Ethernet", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "private static String HEXES = \"0123456789ABCDEF\";", "modifier": "private static", "type": "String", "declarator": "HEXES = \"0123456789ABCDEF\"", "var_name": "HEXES"}, {"original_string": "public static final short TYPE_ARP = 0x0806;", "modifier": "public static final", "type": "short", "declarator": "TYPE_ARP = 0x0806", "var_name": "TYPE_ARP"}, {"original_string": "public static final short TYPE_RARP = (short) 0x8035;", "modifier": "public static final", "type": "short", "declarator": "TYPE_RARP = (short) 0x8035", "var_name": "TYPE_RARP"}, {"original_string": "public static final short TYPE_IPv4 = 0x0800;", "modifier": "public static final", "type": "short", "declarator": "TYPE_IPv4 = 0x0800", "var_name": "TYPE_IPv4"}, {"original_string": "public static final short TYPE_LLDP = (short) 0x88cc;", "modifier": "public static final", "type": "short", "declarator": "TYPE_LLDP = (short) 0x88cc", "var_name": "TYPE_LLDP"}, {"original_string": "public static final short TYPE_BSN = (short) 0x8942;", "modifier": "public static final", "type": "short", "declarator": "TYPE_BSN = (short) 0x8942", "var_name": "TYPE_BSN"}, {"original_string": "public static final short VLAN_UNTAGGED = (short)0xffff;", "modifier": "public static final", "type": "short", "declarator": "VLAN_UNTAGGED = (short)0xffff", "var_name": "VLAN_UNTAGGED"}, {"original_string": "public static final short DATALAYER_ADDRESS_LENGTH = 6;", "modifier": "public static final", "type": "short", "declarator": "DATALAYER_ADDRESS_LENGTH = 6", "var_name": "DATALAYER_ADDRESS_LENGTH"}, {"original_string": "public static Map<Short, Class<? extends IPacket>> etherTypeClassMap;", "modifier": "public static", "type": "Map<Short, Class<? extends IPacket>>", "declarator": "etherTypeClassMap", "var_name": "etherTypeClassMap"}, {"original_string": "protected MACAddress destinationMACAddress;", "modifier": "protected", "type": "MACAddress", "declarator": "destinationMACAddress", "var_name": "destinationMACAddress"}, {"original_string": "protected MACAddress sourceMACAddress;", "modifier": "protected", "type": "MACAddress", "declarator": "sourceMACAddress", "var_name": "sourceMACAddress"}, {"original_string": "protected byte priorityCode;", "modifier": "protected", "type": "byte", "declarator": "priorityCode", "var_name": "priorityCode"}, {"original_string": "protected short vlanID;", "modifier": "protected", "type": "short", "declarator": "vlanID", "var_name": "vlanID"}, {"original_string": "protected short etherType;", "modifier": "protected", "type": "short", "declarator": "etherType", "var_name": "etherType"}, {"original_string": "protected boolean pad = false;", "modifier": "protected", "type": "boolean", "declarator": "pad = false", "var_name": "pad"}], "methods": [{"identifier": "Ethernet", "parameters": "()", "modifiers": "public", "return": "", "signature": " Ethernet()", "full_signature": "public  Ethernet()", "class_method_signature": "Ethernet.Ethernet()", "testcase": false, "constructor": true}, {"identifier": "getDestinationMACAddress", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getDestinationMACAddress()", "full_signature": "public byte[] getDestinationMACAddress()", "class_method_signature": "Ethernet.getDestinationMACAddress()", "testcase": false, "constructor": false}, {"identifier": "getDestinationMAC", "parameters": "()", "modifiers": "public", "return": "MACAddress", "signature": "MACAddress getDestinationMAC()", "full_signature": "public MACAddress getDestinationMAC()", "class_method_signature": "Ethernet.getDestinationMAC()", "testcase": false, "constructor": false}, {"identifier": "setDestinationMACAddress", "parameters": "(byte[] destinationMACAddress)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setDestinationMACAddress(byte[] destinationMACAddress)", "full_signature": "public Ethernet setDestinationMACAddress(byte[] destinationMACAddress)", "class_method_signature": "Ethernet.setDestinationMACAddress(byte[] destinationMACAddress)", "testcase": false, "constructor": false}, {"identifier": "setDestinationMACAddress", "parameters": "(String destinationMACAddress)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setDestinationMACAddress(String destinationMACAddress)", "full_signature": "public Ethernet setDestinationMACAddress(String destinationMACAddress)", "class_method_signature": "Ethernet.setDestinationMACAddress(String destinationMACAddress)", "testcase": false, "constructor": false}, {"identifier": "getSourceMACAddress", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getSourceMACAddress()", "full_signature": "public byte[] getSourceMACAddress()", "class_method_signature": "Ethernet.getSourceMACAddress()", "testcase": false, "constructor": false}, {"identifier": "getSourceMAC", "parameters": "()", "modifiers": "public", "return": "MACAddress", "signature": "MACAddress getSourceMAC()", "full_signature": "public MACAddress getSourceMAC()", "class_method_signature": "Ethernet.getSourceMAC()", "testcase": false, "constructor": false}, {"identifier": "setSourceMACAddress", "parameters": "(byte[] sourceMACAddress)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setSourceMACAddress(byte[] sourceMACAddress)", "full_signature": "public Ethernet setSourceMACAddress(byte[] sourceMACAddress)", "class_method_signature": "Ethernet.setSourceMACAddress(byte[] sourceMACAddress)", "testcase": false, "constructor": false}, {"identifier": "setSourceMACAddress", "parameters": "(String sourceMACAddress)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setSourceMACAddress(String sourceMACAddress)", "full_signature": "public Ethernet setSourceMACAddress(String sourceMACAddress)", "class_method_signature": "Ethernet.setSourceMACAddress(String sourceMACAddress)", "testcase": false, "constructor": false}, {"identifier": "getPriorityCode", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getPriorityCode()", "full_signature": "public byte getPriorityCode()", "class_method_signature": "Ethernet.getPriorityCode()", "testcase": false, "constructor": false}, {"identifier": "setPriorityCode", "parameters": "(byte priorityCode)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setPriorityCode(byte priorityCode)", "full_signature": "public Ethernet setPriorityCode(byte priorityCode)", "class_method_signature": "Ethernet.setPriorityCode(byte priorityCode)", "testcase": false, "constructor": false}, {"identifier": "getVlanID", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getVlanID()", "full_signature": "public short getVlanID()", "class_method_signature": "Ethernet.getVlanID()", "testcase": false, "constructor": false}, {"identifier": "setVlanID", "parameters": "(short vlanID)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setVlanID(short vlanID)", "full_signature": "public Ethernet setVlanID(short vlanID)", "class_method_signature": "Ethernet.setVlanID(short vlanID)", "testcase": false, "constructor": false}, {"identifier": "getEtherType", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short getEtherType()", "full_signature": "public short getEtherType()", "class_method_signature": "Ethernet.getEtherType()", "testcase": false, "constructor": false}, {"identifier": "setEtherType", "parameters": "(short etherType)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setEtherType(short etherType)", "full_signature": "public Ethernet setEtherType(short etherType)", "class_method_signature": "Ethernet.setEtherType(short etherType)", "testcase": false, "constructor": false}, {"identifier": "isBroadcast", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBroadcast()", "full_signature": "public boolean isBroadcast()", "class_method_signature": "Ethernet.isBroadcast()", "testcase": false, "constructor": false}, {"identifier": "isMulticast", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMulticast()", "full_signature": "public boolean isMulticast()", "class_method_signature": "Ethernet.isMulticast()", "testcase": false, "constructor": false}, {"identifier": "isPad", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPad()", "full_signature": "public boolean isPad()", "class_method_signature": "Ethernet.isPad()", "testcase": false, "constructor": false}, {"identifier": "setPad", "parameters": "(boolean pad)", "modifiers": "public", "return": "Ethernet", "signature": "Ethernet setPad(boolean pad)", "full_signature": "public Ethernet setPad(boolean pad)", "class_method_signature": "Ethernet.setPad(boolean pad)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "public byte[] serialize()", "class_method_signature": "Ethernet.serialize()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "Ethernet.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "isMACAddress", "parameters": "(String macAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMACAddress(String macAddress)", "full_signature": "public static boolean isMACAddress(String macAddress)", "class_method_signature": "Ethernet.isMACAddress(String macAddress)", "testcase": false, "constructor": false}, {"identifier": "toMACAddress", "parameters": "(String macAddress)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toMACAddress(String macAddress)", "full_signature": "public static byte[] toMACAddress(String macAddress)", "class_method_signature": "Ethernet.toMACAddress(String macAddress)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(byte[] macAddress)", "modifiers": "public static", "return": "long", "signature": "long toLong(byte[] macAddress)", "full_signature": "public static long toLong(byte[] macAddress)", "class_method_signature": "Ethernet.toLong(byte[] macAddress)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(long macAddress)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(long macAddress)", "full_signature": "public static byte[] toByteArray(long macAddress)", "class_method_signature": "Ethernet.toByteArray(long macAddress)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Ethernet.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Ethernet.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Ethernet.toString()", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/packet/Ethernet.java"}, "focal_method": {"identifier": "toLong", "parameters": "(byte[] macAddress)", "modifiers": "public static", "return": "long", "body": "public static long toLong(byte[] macAddress) {\n        return MACAddress.valueOf(macAddress).toLong();\n    }", "signature": "long toLong(byte[] macAddress)", "full_signature": "public static long toLong(byte[] macAddress)", "class_method_signature": "Ethernet.toLong(byte[] macAddress)", "testcase": false, "constructor": false, "invocations": ["toLong", "valueOf"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}