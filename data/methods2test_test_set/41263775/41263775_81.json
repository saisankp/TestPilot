{"test_class": {"identifier": "ReflectiveAttributeTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/attribute/ReflectiveAttributeTest.java"}, "test_case": {"identifier": "testReflectiveAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReflectiveAttribute() {\n        // Create an indexed collection (note: could alternatively use CQEngine.copyFrom() existing collection)...\n        IndexedCollection<Car> cars = new ConcurrentIndexedCollection<Car>();\n\n        // Define an attribute which will use reflection...\n        Attribute<Car, String> NAME = ReflectiveAttribute.forField(Car.class, String.class, \"name\");\n\n        cars.addIndex(HashIndex.onAttribute(NAME));\n        // Add some objects to the collection...\n        cars.add(new Car(1, \"ford focus\", \"great condition, low mileage\", Arrays.asList(\"spare tyre\", \"sunroof\")));\n        cars.add(new Car(2, \"ford taurus\", \"dirty and unreliable, flat tyre\", Arrays.asList(\"spare tyre\", \"radio\")));\n        cars.add(new Car(3, \"honda civic\", \"has a flat tyre and high mileage\", Arrays.asList(\"radio\")));\n\n        Assert.assertEquals(cars.retrieve(equal(NAME, \"honda civic\")).size(), 1);\n    }", "signature": "void testReflectiveAttribute()", "full_signature": "@Test public void testReflectiveAttribute()", "class_method_signature": "ReflectiveAttributeTest.testReflectiveAttribute()", "testcase": true, "constructor": false, "invocations": ["forField", "addIndex", "onAttribute", "add", "asList", "add", "asList", "add", "asList", "assertEquals", "size", "retrieve", "equal"]}, "focal_class": {"identifier": "ReflectiveAttribute", "superclass": "extends SimpleAttribute<O, A>", "interfaces": "", "fields": [{"original_string": "final Field field;", "modifier": "final", "type": "Field", "declarator": "field", "var_name": "field"}], "methods": [{"identifier": "ReflectiveAttribute", "parameters": "(Class<O> objectType, Class<A> fieldType, String fieldName)", "modifiers": "public", "return": "", "signature": " ReflectiveAttribute(Class<O> objectType, Class<A> fieldType, String fieldName)", "full_signature": "public  ReflectiveAttribute(Class<O> objectType, Class<A> fieldType, String fieldName)", "class_method_signature": "ReflectiveAttribute.ReflectiveAttribute(Class<O> objectType, Class<A> fieldType, String fieldName)", "testcase": false, "constructor": true}, {"identifier": "getField", "parameters": "(Class<?> cls, String fieldName)", "modifiers": "static", "return": "Field", "signature": "Field getField(Class<?> cls, String fieldName)", "full_signature": "static Field getField(Class<?> cls, String fieldName)", "class_method_signature": "ReflectiveAttribute.getField(Class<?> cls, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(O object, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "A", "signature": "A getValue(O object, QueryOptions queryOptions)", "full_signature": "@Override public A getValue(O object, QueryOptions queryOptions)", "class_method_signature": "ReflectiveAttribute.getValue(O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ReflectiveAttribute.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object other)", "full_signature": "@Override public boolean canEqual(Object other)", "class_method_signature": "ReflectiveAttribute.canEqual(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ReflectiveAttribute.hashCode()", "testcase": false, "constructor": false}, {"identifier": "forField", "parameters": "(Class<O> objectType, Class<A> fieldType, String fieldName)", "modifiers": "public static", "return": "ReflectiveAttribute<O, A>", "signature": "ReflectiveAttribute<O, A> forField(Class<O> objectType, Class<A> fieldType, String fieldName)", "full_signature": "public static ReflectiveAttribute<O, A> forField(Class<O> objectType, Class<A> fieldType, String fieldName)", "class_method_signature": "ReflectiveAttribute.forField(Class<O> objectType, Class<A> fieldType, String fieldName)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/attribute/ReflectiveAttribute.java"}, "focal_method": {"identifier": "ReflectiveAttribute", "parameters": "(Class<O> objectType, Class<A> fieldType, String fieldName)", "modifiers": "public", "return": "", "body": "public ReflectiveAttribute(Class<O> objectType, Class<A> fieldType, String fieldName) {\n        super(objectType, fieldType, fieldName);\n        Field field;\n        try {\n            field = getField(objectType, fieldName);\n            if (!field.isAccessible()) {\n                field.setAccessible(true);\n            }\n        }\n        catch (Exception e) {\n            throw new IllegalStateException(\"Invalid attribute definition: No such field '\" + fieldName + \"' in object '\" + objectType.getName() + \"'\");\n        }\n        if (!fieldType.isAssignableFrom(field.getType())) {\n            throw new IllegalStateException(\"Invalid attribute definition: The type of field '\" + fieldName + \"', type '\" + field.getType() + \"', in object '\" + objectType.getName() + \"', is not assignable to the type indicated: \" + fieldType.getName());\n        }\n        this.field = field;\n    }", "signature": " ReflectiveAttribute(Class<O> objectType, Class<A> fieldType, String fieldName)", "full_signature": "public  ReflectiveAttribute(Class<O> objectType, Class<A> fieldType, String fieldName)", "class_method_signature": "ReflectiveAttribute.ReflectiveAttribute(Class<O> objectType, Class<A> fieldType, String fieldName)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}