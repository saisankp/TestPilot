{"test_class": {"identifier": "TimeRangeTest", "superclass": "", "interfaces": "", "fields": [], "file": "tsfile/src/test/java/org/apache/iotdb/tsfile/read/common/TimeRangeTest.java"}, "test_case": {"identifier": "getRemainsTest1", "parameters": "()", "modifiers": "@Test /* * previous ranges contains current ranges */ public", "return": "void", "body": "@Test\n  /*\n   * previous ranges contains current ranges\n   */\n  public void getRemainsTest1() {\n    TimeRange r = new TimeRange(1, 10);\n\n    ArrayList<TimeRange> prevRanges = new ArrayList<>();\n    prevRanges.add(new TimeRange(0, 10));\n\n    ArrayList<TimeRange> remainRanges = new ArrayList<>(r.getRemains(prevRanges));\n    assertEquals(0, remainRanges.size());\n  }", "signature": "void getRemainsTest1()", "full_signature": "@Test /* * previous ranges contains current ranges */ public void getRemainsTest1()", "class_method_signature": "TimeRangeTest.getRemainsTest1()", "testcase": true, "constructor": false, "invocations": ["add", "getRemains", "assertEquals", "size"]}, "focal_class": {"identifier": "TimeRange", "superclass": "", "interfaces": "implements Comparable<TimeRange>", "fields": [{"original_string": "private long min = 0;", "modifier": "private", "type": "long", "declarator": "min = 0", "var_name": "min"}, {"original_string": "private long max = 0;", "modifier": "private", "type": "long", "declarator": "max = 0", "var_name": "max"}, {"original_string": "private boolean leftClose = true;", "modifier": "private", "type": "boolean", "declarator": "leftClose = true", "var_name": "leftClose"}, {"original_string": "private boolean rightClose = true;", "modifier": "private", "type": "boolean", "declarator": "rightClose = true", "var_name": "rightClose"}], "methods": [{"identifier": "TimeRange", "parameters": "(long min, long max)", "modifiers": "public", "return": "", "signature": " TimeRange(long min, long max)", "full_signature": "public  TimeRange(long min, long max)", "class_method_signature": "TimeRange.TimeRange(long min, long max)", "testcase": false, "constructor": true}, {"identifier": "compareTo", "parameters": "(TimeRange r)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(TimeRange r)", "full_signature": "@Override public int compareTo(TimeRange r)", "class_method_signature": "TimeRange.compareTo(TimeRange r)", "testcase": false, "constructor": false}, {"identifier": "setMin", "parameters": "(long min)", "modifiers": "public", "return": "void", "signature": "void setMin(long min)", "full_signature": "public void setMin(long min)", "class_method_signature": "TimeRange.setMin(long min)", "testcase": false, "constructor": false}, {"identifier": "setMax", "parameters": "(long max)", "modifiers": "public", "return": "void", "signature": "void setMax(long max)", "full_signature": "public void setMax(long max)", "class_method_signature": "TimeRange.setMax(long max)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(TimeRange r)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(TimeRange r)", "full_signature": "public boolean contains(TimeRange r)", "class_method_signature": "TimeRange.contains(TimeRange r)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(long min, long max)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(long min, long max)", "full_signature": "public boolean contains(long min, long max)", "class_method_signature": "TimeRange.contains(long min, long max)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(long time)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(long time)", "full_signature": "public boolean contains(long time)", "class_method_signature": "TimeRange.contains(long time)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(long min, long max)", "modifiers": "public", "return": "void", "signature": "void set(long min, long max)", "full_signature": "public void set(long min, long max)", "class_method_signature": "TimeRange.set(long min, long max)", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMin()", "full_signature": "public long getMin()", "class_method_signature": "TimeRange.getMin()", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getMax()", "full_signature": "public long getMax()", "class_method_signature": "TimeRange.getMax()", "testcase": false, "constructor": false}, {"identifier": "intersects", "parameters": "(TimeRange r)", "modifiers": "public", "return": "boolean", "signature": "boolean intersects(TimeRange r)", "full_signature": "public boolean intersects(TimeRange r)", "class_method_signature": "TimeRange.intersects(TimeRange r)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "TimeRange.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TimeRange.hashCode()", "testcase": false, "constructor": false}, {"identifier": "overlaps", "parameters": "(TimeRange rhs)", "modifiers": "public", "return": "boolean", "signature": "boolean overlaps(TimeRange rhs)", "full_signature": "public boolean overlaps(TimeRange rhs)", "class_method_signature": "TimeRange.overlaps(TimeRange rhs)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TimeRange.toString()", "testcase": false, "constructor": false}, {"identifier": "setLeftClose", "parameters": "(boolean leftClose)", "modifiers": "public", "return": "void", "signature": "void setLeftClose(boolean leftClose)", "full_signature": "public void setLeftClose(boolean leftClose)", "class_method_signature": "TimeRange.setLeftClose(boolean leftClose)", "testcase": false, "constructor": false}, {"identifier": "setRightClose", "parameters": "(boolean rightClose)", "modifiers": "public", "return": "void", "signature": "void setRightClose(boolean rightClose)", "full_signature": "public void setRightClose(boolean rightClose)", "class_method_signature": "TimeRange.setRightClose(boolean rightClose)", "testcase": false, "constructor": false}, {"identifier": "getLeftClose", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getLeftClose()", "full_signature": "public boolean getLeftClose()", "class_method_signature": "TimeRange.getLeftClose()", "testcase": false, "constructor": false}, {"identifier": "getRightClose", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getRightClose()", "full_signature": "public boolean getRightClose()", "class_method_signature": "TimeRange.getRightClose()", "testcase": false, "constructor": false}, {"identifier": "sortAndMerge", "parameters": "(List<TimeRange> unionCandidates)", "modifiers": "public static", "return": "List<TimeRange>", "signature": "List<TimeRange> sortAndMerge(List<TimeRange> unionCandidates)", "full_signature": "public static List<TimeRange> sortAndMerge(List<TimeRange> unionCandidates)", "class_method_signature": "TimeRange.sortAndMerge(List<TimeRange> unionCandidates)", "testcase": false, "constructor": false}, {"identifier": "getRemains", "parameters": "(List<TimeRange> timeRangesPrev)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public", "return": "List<TimeRange>", "signature": "List<TimeRange> getRemains(List<TimeRange> timeRangesPrev)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public List<TimeRange> getRemains(List<TimeRange> timeRangesPrev)", "class_method_signature": "TimeRange.getRemains(List<TimeRange> timeRangesPrev)", "testcase": false, "constructor": false}, {"identifier": "getExpression", "parameters": "()", "modifiers": "public", "return": "IExpression", "signature": "IExpression getExpression()", "full_signature": "public IExpression getExpression()", "class_method_signature": "TimeRange.getExpression()", "testcase": false, "constructor": false}], "file": "tsfile/src/main/java/org/apache/iotdb/tsfile/read/common/TimeRange.java"}, "focal_method": {"identifier": "getRemains", "parameters": "(List<TimeRange> timeRangesPrev)", "modifiers": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public", "return": "List<TimeRange>", "body": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n  public List<TimeRange> getRemains(List<TimeRange> timeRangesPrev) {\n    List<TimeRange> remains = new ArrayList<>();\n\n    for (TimeRange prev : timeRangesPrev) {\n      // +2 is to keep consistent with the definition of `intersects` of two closed intervals\n      if (prev.min >= max + 2) {\n        // break early since timeRangesPrev is sorted\n        break;\n      }\n\n      if (intersects(prev)) {\n        if (prev.contains(this)) {\n          // e.g., this=[3,5], prev=[1,10]\n          // e.g., this=[3,5], prev=[3,5] Note that in this case, prev contains this and vice versa.\n          return remains;\n        } else if (this.contains(prev)) {\n          if (prev.min > this.min && prev.max == this.max) {\n            // e.g., this=[1,6], prev=[3,6]\n            this.setMax(prev.min);\n            this.setRightClose(false);\n            remains.add(this);\n            // return the final result because timeRangesPrev is sorted\n            return remains;\n          } else if (prev.min == this.min) {\n            // Note prev.max < this.max e.g., this=[1,10], prev=[1,4]\n            min = prev.max;\n            leftClose = false;\n          } else {\n            // e.g., prev=[3,6], this=[1,10]\n            TimeRange r = new TimeRange(this.min, prev.min);\n            r.setLeftClose(this.leftClose);\n            r.setRightClose(false);\n            remains.add(r);\n            min = prev.max;\n            leftClose = false;\n          }\n        } else {\n          // intersect without one containing the other\n          if (prev.min < this.min) {\n            // e.g., this=[3,10], prev=[1,6]\n            min = prev.max;\n            leftClose = false;\n          } else {\n            // e.g., this=[1,8], prev=[5,12]\n            this.setMax(prev.min);\n            this.setRightClose(false);\n            remains.add(this);\n            // return the final result because timeRangesPrev is sorted\n            return remains;\n          }\n        }\n      }\n    }\n\n    remains.add(this);\n    return remains;\n  }", "signature": "List<TimeRange> getRemains(List<TimeRange> timeRangesPrev)", "full_signature": "@SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning public List<TimeRange> getRemains(List<TimeRange> timeRangesPrev)", "class_method_signature": "TimeRange.getRemains(List<TimeRange> timeRangesPrev)", "testcase": false, "constructor": false, "invocations": ["intersects", "contains", "contains", "setMax", "setRightClose", "add", "setLeftClose", "setRightClose", "add", "setMax", "setRightClose", "add", "add"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}