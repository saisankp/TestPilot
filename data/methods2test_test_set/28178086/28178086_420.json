{"test_class": {"identifier": "TsDataCollectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Date JAN2010 = new GregorianCalendar(2010, Calendar.JANUARY, 1).getTime();", "modifier": "private static final", "type": "Date", "declarator": "JAN2010 = new GregorianCalendar(2010, Calendar.JANUARY, 1).getTime()", "var_name": "JAN2010"}, {"original_string": "private static final Date FEB2010 = new GregorianCalendar(2010, Calendar.FEBRUARY, 1).getTime();", "modifier": "private static final", "type": "Date", "declarator": "FEB2010 = new GregorianCalendar(2010, Calendar.FEBRUARY, 1).getTime()", "var_name": "FEB2010"}, {"original_string": "private static final Date APR2010 = new GregorianCalendar(2010, Calendar.APRIL, 1).getTime();", "modifier": "private static final", "type": "Date", "declarator": "APR2010 = new GregorianCalendar(2010, Calendar.APRIL, 1).getTime()", "var_name": "APR2010"}, {"original_string": "private static final Date MAY2010 = new GregorianCalendar(2010, Calendar.MAY, 1).getTime();", "modifier": "private static final", "type": "Date", "declarator": "MAY2010 = new GregorianCalendar(2010, Calendar.MAY, 1).getTime()", "var_name": "MAY2010"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/simplets/TsDataCollectorTest.java"}, "test_case": {"identifier": "testMake", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMake() {\n        TsDataCollector dc = new TsDataCollector();\n        EnumSet<TsFrequency> defined = complementOf(of(Undefined));\n\n        // defined with single value\n        dc.clear();\n        dc.addObservation(JAN2010, 10);\n        defined.forEach(o -> assertThat(dc.make(o, None)).isEqualTo(data(o, 2010, 0, 10)));\n\n        // monthly with missing values\n        dc.clear();\n        dc.addObservation(JAN2010, 10);\n        dc.addObservation(APR2010, 40);\n        assertThat(dc.make(Monthly, None)).isEqualTo(data(Monthly, 2010, 0, 10, Double.NaN, Double.NaN, 40));\n\n        // quarterly\n        dc.clear();\n        dc.addObservation(JAN2010, 10);\n        dc.addObservation(APR2010, 40);\n        assertThat(dc.make(Quarterly, None)).isEqualTo(data(Quarterly, 2010, 0, 10, 40));\n\n        // undefined to monthly\n        dc.clear();\n        dc.addObservation(JAN2010, 10);\n        dc.addObservation(FEB2010, 20);\n        assertThat(dc.make(Undefined, None)).isEqualTo(data(Monthly, 2010, 0, 10, 20));\n\n        // undefined to monthly with missing values\n        dc.clear();\n        dc.addObservation(JAN2010, 10);\n        dc.addObservation(FEB2010, 20);\n        dc.addObservation(MAY2010, 50);\n        assertThat(dc.make(Undefined, None)).isEqualTo(data(Monthly, 2010, 0, 10, 20, Double.NaN, Double.NaN, 50));\n\n        // undefined to quarterly\n        dc.clear();\n        dc.addObservation(JAN2010, 10);\n        dc.addObservation(APR2010, 40);\n        assertThat(dc.make(Undefined, None)).isEqualTo(data(Quarterly, 2010, 0, 10, 40));\n\n        // defined with aggregation\n        dc.clear();\n        dc.addObservation(JAN2010, 12);\n        dc.addObservation(JAN2010, 13);\n        dc.addObservation(JAN2010, 10);\n        dc.addObservation(JAN2010, 11);\n        defined.forEach(o -> {\n            assertThat(dc.make(o, First)).isEqualTo(data(o, 2010, 0, 12));\n            assertThat(dc.make(o, Last)).isEqualTo(data(o, 2010, 0, 11));\n            assertThat(dc.make(o, Min)).isEqualTo(data(o, 2010, 0, 10));\n            assertThat(dc.make(o, Max)).isEqualTo(data(o, 2010, 0, 13));\n            assertThat(dc.make(o, Average)).isEqualTo(data(o, 2010, 0, 46d / 4));\n            assertThat(dc.make(o, Sum)).isEqualTo(data(o, 2010, 0, 46));\n        });\n\n        // unordered daily to monthly\n        dc.clear();\n        dc.addObservation(asDate(LocalDate.of(2010, 2, 1)), 20);\n        dc.addObservation(asDate(LocalDate.of(2010, 1, 3)), 10);\n        dc.addObservation(asDate(LocalDate.of(2010, 1, 4)), 11);\n        dc.addObservation(asDate(LocalDate.of(2010, 1, 1)), 12);\n        dc.addObservation(asDate(LocalDate.of(2010, 1, 2)), 13);\n        assertThat(dc.make(Monthly, First)).isEqualTo(data(Monthly, 2010, 0, 12, 20));\n        assertThat(dc.make(Monthly, Last)).isEqualTo(data(Monthly, 2010, 0, 11, 20));\n        assertThat(dc.make(Monthly, Min)).isEqualTo(data(Monthly, 2010, 0, 10, 20));\n        assertThat(dc.make(Monthly, Max)).isEqualTo(data(Monthly, 2010, 0, 13, 20));\n        assertThat(dc.make(Monthly, Average)).isEqualTo(data(Monthly, 2010, 0, 46d / 4, 20));\n        assertThat(dc.make(Monthly, Sum)).isEqualTo(data(Monthly, 2010, 0, 46, 20));\n    }", "signature": "void testMake()", "full_signature": "@Test public void testMake()", "class_method_signature": "TsDataCollectorTest.testMake()", "testcase": true, "constructor": false, "invocations": ["complementOf", "of", "clear", "addObservation", "forEach", "isEqualTo", "assertThat", "make", "data", "clear", "addObservation", "addObservation", "isEqualTo", "assertThat", "make", "data", "clear", "addObservation", "addObservation", "isEqualTo", "assertThat", "make", "data", "clear", "addObservation", "addObservation", "isEqualTo", "assertThat", "make", "data", "clear", "addObservation", "addObservation", "addObservation", "isEqualTo", "assertThat", "make", "data", "clear", "addObservation", "addObservation", "isEqualTo", "assertThat", "make", "data", "clear", "addObservation", "addObservation", "addObservation", "addObservation", "forEach", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "clear", "addObservation", "asDate", "of", "addObservation", "asDate", "of", "addObservation", "asDate", "of", "addObservation", "asDate", "of", "addObservation", "asDate", "of", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data", "isEqualTo", "assertThat", "make", "data"]}, "focal_class": {"identifier": "TsDataCollector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LongObsList m_obs;", "modifier": "private final", "type": "LongObsList", "declarator": "m_obs", "var_name": "m_obs"}, {"original_string": "private double missing;", "modifier": "private", "type": "double", "declarator": "missing", "var_name": "missing"}], "methods": [{"identifier": "TsDataCollector", "parameters": "()", "modifiers": "public", "return": "", "signature": " TsDataCollector()", "full_signature": "public  TsDataCollector()", "class_method_signature": "TsDataCollector.TsDataCollector()", "testcase": false, "constructor": true}, {"identifier": "addMissingValue", "parameters": "(Date date)", "modifiers": "public", "return": "void", "signature": "void addMissingValue(Date date)", "full_signature": "public void addMissingValue(Date date)", "class_method_signature": "TsDataCollector.addMissingValue(Date date)", "testcase": false, "constructor": false}, {"identifier": "addObservation", "parameters": "(Date date, double value)", "modifiers": "public", "return": "void", "signature": "void addObservation(Date date, double value)", "full_signature": "public void addObservation(Date date, double value)", "class_method_signature": "TsDataCollector.addObservation(Date date, double value)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "TsDataCollector.clear()", "testcase": false, "constructor": false}, {"identifier": "data", "parameters": "()", "modifiers": "@NewObject public", "return": "double[]", "signature": "double[] data()", "full_signature": "@NewObject public double[] data()", "class_method_signature": "TsDataCollector.data()", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCount()", "full_signature": "public int getCount()", "class_method_signature": "TsDataCollector.getCount()", "testcase": false, "constructor": false}, {"identifier": "getMissingValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMissingValue()", "full_signature": "public double getMissingValue()", "class_method_signature": "TsDataCollector.getMissingValue()", "testcase": false, "constructor": false}, {"identifier": "setMissingValue", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setMissingValue(double value)", "full_signature": "public void setMissingValue(double value)", "class_method_signature": "TsDataCollector.setMissingValue(double value)", "testcase": false, "constructor": false}, {"identifier": "make", "parameters": "(TsFrequency frequency, TsAggregationType convMode)", "modifiers": "public", "return": "TsData", "signature": "TsData make(TsFrequency frequency, TsAggregationType convMode)", "full_signature": "public TsData make(TsFrequency frequency, TsAggregationType convMode)", "class_method_signature": "TsDataCollector.make(TsFrequency frequency, TsAggregationType convMode)", "testcase": false, "constructor": false}, {"identifier": "makeWithAggregation", "parameters": "(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "modifiers": "@Internal public static", "return": "TsData", "signature": "TsData makeWithAggregation(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "full_signature": "@Internal public static TsData makeWithAggregation(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "class_method_signature": "TsDataCollector.makeWithAggregation(ObsList obs, TsFrequency freq, TsAggregationType convMode)", "testcase": false, "constructor": false}, {"identifier": "isNewPeriod", "parameters": "(int ncur, int curid, int[] ids)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNewPeriod(int ncur, int curid, int[] ids)", "full_signature": "private static boolean isNewPeriod(int ncur, int curid, int[] ids)", "class_method_signature": "TsDataCollector.isNewPeriod(int ncur, int curid, int[] ids)", "testcase": false, "constructor": false}, {"identifier": "makeFromUnknownFrequency", "parameters": "(ObsList obs)", "modifiers": "@Internal public static", "return": "TsData", "signature": "TsData makeFromUnknownFrequency(ObsList obs)", "full_signature": "@Internal public static TsData makeFromUnknownFrequency(ObsList obs)", "class_method_signature": "TsDataCollector.makeFromUnknownFrequency(ObsList obs)", "testcase": false, "constructor": false}, {"identifier": "makeIdsFromFrequency", "parameters": "(ObsList obs, TsFrequency frequency, int[] ids)", "modifiers": "private static", "return": "boolean", "signature": "boolean makeIdsFromFrequency(ObsList obs, TsFrequency frequency, int[] ids)", "full_signature": "private static boolean makeIdsFromFrequency(ObsList obs, TsFrequency frequency, int[] ids)", "class_method_signature": "TsDataCollector.makeIdsFromFrequency(ObsList obs, TsFrequency frequency, int[] ids)", "testcase": false, "constructor": false}, {"identifier": "makeWithoutAggregation", "parameters": "(ObsList obs, TsFrequency freq)", "modifiers": "@Internal public static", "return": "TsData", "signature": "TsData makeWithoutAggregation(ObsList obs, TsFrequency freq)", "full_signature": "@Internal public static TsData makeWithoutAggregation(ObsList obs, TsFrequency freq)", "class_method_signature": "TsDataCollector.makeWithoutAggregation(ObsList obs, TsFrequency freq)", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(int currentSize, int expectedSize, int[] ids, IntToDoubleFunction valueFunc)", "modifiers": "private static", "return": "double[]", "signature": "double[] expand(int currentSize, int expectedSize, int[] ids, IntToDoubleFunction valueFunc)", "full_signature": "private static double[] expand(int currentSize, int expectedSize, int[] ids, IntToDoubleFunction valueFunc)", "class_method_signature": "TsDataCollector.expand(int currentSize, int expectedSize, int[] ids, IntToDoubleFunction valueFunc)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/simplets/TsDataCollector.java"}, "focal_method": {"identifier": "make", "parameters": "(TsFrequency frequency, TsAggregationType convMode)", "modifiers": "public", "return": "TsData", "body": "public TsData make(TsFrequency frequency, TsAggregationType convMode) {\n        if (frequency == TsFrequency.Undefined) {\n            if (convMode != TsAggregationType.None) {\n                throw new TsException(TsException.INVALID_AGGREGATIONMODE);\n            }\n            return makeFromUnknownFrequency(m_obs);\n        }\n        if (convMode != TsAggregationType.None) {\n            return makeWithAggregation(m_obs, frequency, convMode);\n        }\n        return makeWithoutAggregation(m_obs, frequency);\n    }", "signature": "TsData make(TsFrequency frequency, TsAggregationType convMode)", "full_signature": "public TsData make(TsFrequency frequency, TsAggregationType convMode)", "class_method_signature": "TsDataCollector.make(TsFrequency frequency, TsAggregationType convMode)", "testcase": false, "constructor": false, "invocations": ["makeFromUnknownFrequency", "makeWithAggregation", "makeWithoutAggregation"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}