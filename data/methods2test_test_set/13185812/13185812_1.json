{"test_class": {"identifier": "TestXmlDataExporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BloodShepherdProperties bloodShepherdProperties = new BloodShepherdProperties();", "modifier": "private", "type": "BloodShepherdProperties", "declarator": "bloodShepherdProperties = new BloodShepherdProperties()", "var_name": "bloodShepherdProperties"}, {"original_string": "private File tempDirectory;", "modifier": "private", "type": "File", "declarator": "tempDirectory", "var_name": "tempDirectory"}], "file": "blood-shepherd-exporters/src/test/java/org/glukit/export/TestXmlDataExporter.java"}, "test_case": {"identifier": "testEventSort", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEventSort() throws Exception {\n    XmlDataExporter xmlDataExporter = new XmlDataExporter(this.bloodShepherdProperties);\n\n    List<InsulinInjection> injections = Collections.emptyList();\n    List<FoodEvent> foods = newArrayList();\n    foods.add(new FoodEvent(Instant.ofEpochSecond(2000), LocalDateTime.now(), LocalDateTime.now(), 10.25f, 0));\n    foods.add(new FoodEvent(Instant.ofEpochSecond(100), LocalDateTime.now(), LocalDateTime.now(), 12.5f, 0));\n    List<ExerciseSession> exerciseSessions = Collections.emptyList();\n    List<GlucoseRead> emptyGlucoseReads = Collections.emptyList();\n\n    // TODO: Assert that the content is as expected\n    xmlDataExporter.exportData(new SyncData(emptyGlucoseReads, injections,\n            foods, exerciseSessions, new DeviceInfo(\"serialNumber\", \"hId\", \"hRv\"), Instant.now()));\n  }", "signature": "void testEventSort()", "full_signature": "@Test public void testEventSort()", "class_method_signature": "TestXmlDataExporter.testEventSort()", "testcase": true, "constructor": false, "invocations": ["emptyList", "newArrayList", "add", "ofEpochSecond", "now", "now", "add", "ofEpochSecond", "now", "now", "emptyList", "emptyList", "exportData", "now"]}, "focal_class": {"identifier": "XmlDataExporter", "superclass": "", "interfaces": "implements DataExporter", "fields": [{"original_string": "private static DateTimeFormatter dateTimeFormatter;", "modifier": "private static", "type": "DateTimeFormatter", "declarator": "dateTimeFormatter", "var_name": "dateTimeFormatter"}, {"original_string": "private BloodShepherdProperties properties;", "modifier": "private", "type": "BloodShepherdProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private Function<GlucoseRead, Timestamped> GLUCOSE_READ_TO_TIMESTAMPED_VALUE =\n          new Function<GlucoseRead, Timestamped>() {\n            @Override\n            public Timestamped apply(@javax.annotation.Nullable GlucoseRead glucoseRead) {\n              checkNotNull(glucoseRead, \"glucoseRead should be non-null\");\n\n              return new TimestampedValue(dateTimeFormatter.format(glucoseRead.getInternalTime()),\n                      dateTimeFormatter.format(glucoseRead.getLocalTime()), format(\"%.0f\", glucoseRead.getValue()));\n            }\n          };", "modifier": "private", "type": "Function<GlucoseRead, Timestamped>", "declarator": "GLUCOSE_READ_TO_TIMESTAMPED_VALUE =\n          new Function<GlucoseRead, Timestamped>() {\n            @Override\n            public Timestamped apply(@javax.annotation.Nullable GlucoseRead glucoseRead) {\n              checkNotNull(glucoseRead, \"glucoseRead should be non-null\");\n\n              return new TimestampedValue(dateTimeFormatter.format(glucoseRead.getInternalTime()),\n                      dateTimeFormatter.format(glucoseRead.getLocalTime()), format(\"%.0f\", glucoseRead.getValue()));\n            }\n          }", "var_name": "GLUCOSE_READ_TO_TIMESTAMPED_VALUE"}, {"original_string": "private Function<FoodEvent, EventMarker> FOOD_EVENT_TO_EVENT_MARKER =\n          new Function<FoodEvent, EventMarker>() {\n            @Override\n            public EventMarker apply(@Nullable FoodEvent foodEvent) {\n              checkNotNull(foodEvent, \"foodEvent should be non-null\");\n\n              String formattedValue = format(\"%.2f\", foodEvent.getCarbohydrates());\n              return new EventMarker(\n                      dateTimeFormatter.format(foodEvent.getInternalTime()),\n                      dateTimeFormatter.format(foodEvent.getLocalTime()),\n                      dateTimeFormatter.format(foodEvent.getEventLocalTime()), \"Carbs\",\n                      format(\"Carbs %s grams\", formattedValue));\n            }\n          };", "modifier": "private", "type": "Function<FoodEvent, EventMarker>", "declarator": "FOOD_EVENT_TO_EVENT_MARKER =\n          new Function<FoodEvent, EventMarker>() {\n            @Override\n            public EventMarker apply(@Nullable FoodEvent foodEvent) {\n              checkNotNull(foodEvent, \"foodEvent should be non-null\");\n\n              String formattedValue = format(\"%.2f\", foodEvent.getCarbohydrates());\n              return new EventMarker(\n                      dateTimeFormatter.format(foodEvent.getInternalTime()),\n                      dateTimeFormatter.format(foodEvent.getLocalTime()),\n                      dateTimeFormatter.format(foodEvent.getEventLocalTime()), \"Carbs\",\n                      format(\"Carbs %s grams\", formattedValue));\n            }\n          }", "var_name": "FOOD_EVENT_TO_EVENT_MARKER"}, {"original_string": "private Function<InsulinInjection, EventMarker> INSULIN_INJECTION_TO_EVENT_MARKER =\n          new Function<InsulinInjection, EventMarker>() {\n            @Override\n            public EventMarker apply(@javax.annotation.Nullable InsulinInjection insulinInjection) {\n              checkNotNull(insulinInjection, \"insulinInjection should be non-null\");\n\n              String formattedValue = format(\"%.2f\", insulinInjection.getUnitValue());\n              return new EventMarker(\n                      dateTimeFormatter.format(insulinInjection.getInternalTime()),\n                      dateTimeFormatter.format(insulinInjection.getLocalTime()),\n                      dateTimeFormatter.format(insulinInjection.getEventLocalTime()), \"Insulin\",\n                      format(\"Insulin %s units\", formattedValue));\n            }\n          };", "modifier": "private", "type": "Function<InsulinInjection, EventMarker>", "declarator": "INSULIN_INJECTION_TO_EVENT_MARKER =\n          new Function<InsulinInjection, EventMarker>() {\n            @Override\n            public EventMarker apply(@javax.annotation.Nullable InsulinInjection insulinInjection) {\n              checkNotNull(insulinInjection, \"insulinInjection should be non-null\");\n\n              String formattedValue = format(\"%.2f\", insulinInjection.getUnitValue());\n              return new EventMarker(\n                      dateTimeFormatter.format(insulinInjection.getInternalTime()),\n                      dateTimeFormatter.format(insulinInjection.getLocalTime()),\n                      dateTimeFormatter.format(insulinInjection.getEventLocalTime()), \"Insulin\",\n                      format(\"Insulin %s units\", formattedValue));\n            }\n          }", "var_name": "INSULIN_INJECTION_TO_EVENT_MARKER"}, {"original_string": "private Function<ExerciseSession.Intensity, String> EXERCISE_INTENSITY_TO_EVENT_TYPE =\n          new Function<ExerciseSession.Intensity, String>() {\n            @Nullable\n            @Override\n            public String apply(@Nullable ExerciseSession.Intensity intensity) {\n              checkNotNull(intensity, \"intensity must be non-null\");\n              return StringUtils.capitalize(StringUtils.lowerCase(intensity.name()));\n            }\n          };", "modifier": "private", "type": "Function<ExerciseSession.Intensity, String>", "declarator": "EXERCISE_INTENSITY_TO_EVENT_TYPE =\n          new Function<ExerciseSession.Intensity, String>() {\n            @Nullable\n            @Override\n            public String apply(@Nullable ExerciseSession.Intensity intensity) {\n              checkNotNull(intensity, \"intensity must be non-null\");\n              return StringUtils.capitalize(StringUtils.lowerCase(intensity.name()));\n            }\n          }", "var_name": "EXERCISE_INTENSITY_TO_EVENT_TYPE"}, {"original_string": "private Function<ExerciseSession, EventMarker> EXERCISE_SESSION_TO_EVENT_MARKER =\n          new Function<ExerciseSession, EventMarker>() {\n            @Override\n            public EventMarker apply(@javax.annotation.Nullable ExerciseSession exerciseSession) {\n              checkNotNull(exerciseSession, \"exerciseSession should be non-null\");\n\n              String intensityLabel = EXERCISE_INTENSITY_TO_EVENT_TYPE.apply(exerciseSession.getIntensity());\n              return new EventMarker(\n                      dateTimeFormatter.format(exerciseSession.getInternalTime()),\n                      dateTimeFormatter.format(exerciseSession.getLocalTime()),\n                      dateTimeFormatter.format(exerciseSession.getEventLocalTime()),\n                      format(\"Exercise%s\", intensityLabel),\n                      format(\"Exercise %s (%d minutes)\", intensityLabel,\n                              exerciseSession.getDuration().toMinutes()));\n            }\n          };", "modifier": "private", "type": "Function<ExerciseSession, EventMarker>", "declarator": "EXERCISE_SESSION_TO_EVENT_MARKER =\n          new Function<ExerciseSession, EventMarker>() {\n            @Override\n            public EventMarker apply(@javax.annotation.Nullable ExerciseSession exerciseSession) {\n              checkNotNull(exerciseSession, \"exerciseSession should be non-null\");\n\n              String intensityLabel = EXERCISE_INTENSITY_TO_EVENT_TYPE.apply(exerciseSession.getIntensity());\n              return new EventMarker(\n                      dateTimeFormatter.format(exerciseSession.getInternalTime()),\n                      dateTimeFormatter.format(exerciseSession.getLocalTime()),\n                      dateTimeFormatter.format(exerciseSession.getEventLocalTime()),\n                      format(\"Exercise%s\", intensityLabel),\n                      format(\"Exercise %s (%d minutes)\", intensityLabel,\n                              exerciseSession.getDuration().toMinutes()));\n            }\n          }", "var_name": "EXERCISE_SESSION_TO_EVENT_MARKER"}], "methods": [{"identifier": "XmlDataExporter", "parameters": "(BloodShepherdProperties properties)", "modifiers": "@Inject public", "return": "", "signature": " XmlDataExporter(BloodShepherdProperties properties)", "full_signature": "@Inject public  XmlDataExporter(BloodShepherdProperties properties)", "class_method_signature": "XmlDataExporter.XmlDataExporter(BloodShepherdProperties properties)", "testcase": false, "constructor": true}, {"identifier": "exportData", "parameters": "(SyncData syncData)", "modifiers": "@Override public", "return": "void", "signature": "void exportData(SyncData syncData)", "full_signature": "@Override public void exportData(SyncData syncData)", "class_method_signature": "XmlDataExporter.exportData(SyncData syncData)", "testcase": false, "constructor": false}, {"identifier": "getOutputStream", "parameters": "(File destinationDirectory, SyncData syncData)", "modifiers": "private", "return": "OutputStream", "signature": "OutputStream getOutputStream(File destinationDirectory, SyncData syncData)", "full_signature": "private OutputStream getOutputStream(File destinationDirectory, SyncData syncData)", "class_method_signature": "XmlDataExporter.getOutputStream(File destinationDirectory, SyncData syncData)", "testcase": false, "constructor": false}], "file": "blood-shepherd-exporters/src/main/java/org/glukit/export/XmlDataExporter.java"}, "focal_method": {"identifier": "exportData", "parameters": "(SyncData syncData)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void exportData(SyncData syncData) {\n    String outputPath = properties.getProperty(OUTPUT_PATH);\n    checkNotNull(outputPath, \"Missing %s in properties\", OUTPUT_PATH);\n    File outputDirectory = new File(outputPath);\n    checkState(outputDirectory.exists(), \"Invalid destination: %s doesn't exist\", outputPath);\n    checkState(outputDirectory.isDirectory(), \"Invalid destination: %s is not a directory\", outputPath);\n\n    XmlMapper xmlMapper = new XmlMapper();\n    ObjectWriter objectWriter = xmlMapper.writerWithDefaultPrettyPrinter();\n\n    Patient patient = new Patient();\n    patient.SerialNumber = syncData.getDeviceInfo().getSerialNumber();\n    sort(syncData.getGlucoseReads());\n    patient.Glucose = newArrayList(Collections2.transform(syncData.getGlucoseReads(),\n            GLUCOSE_READ_TO_TIMESTAMPED_VALUE));\n    List<EventMarker> eventMarkers = newArrayList(\n            Collections2.transform(syncData.getExerciseSessions(), EXERCISE_SESSION_TO_EVENT_MARKER));\n    eventMarkers.addAll(Collections2.transform(syncData.getFoodEvents(), FOOD_EVENT_TO_EVENT_MARKER));\n    eventMarkers.addAll(Collections2.transform(syncData.getInsulinInjections(), INSULIN_INJECTION_TO_EVENT_MARKER));\n    sort(eventMarkers);\n    patient.Event = eventMarkers;\n\n    try {\n      OutputStream outputStream = getOutputStream(outputDirectory, syncData);\n      objectWriter.writeValue(outputStream, patient);\n      outputStream.close();\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "void exportData(SyncData syncData)", "full_signature": "@Override public void exportData(SyncData syncData)", "class_method_signature": "XmlDataExporter.exportData(SyncData syncData)", "testcase": false, "constructor": false, "invocations": ["getProperty", "checkNotNull", "checkState", "exists", "checkState", "isDirectory", "writerWithDefaultPrettyPrinter", "getSerialNumber", "getDeviceInfo", "sort", "getGlucoseReads", "newArrayList", "transform", "getGlucoseReads", "newArrayList", "transform", "getExerciseSessions", "addAll", "transform", "getFoodEvents", "addAll", "transform", "getInsulinInjections", "sort", "getOutputStream", "writeValue", "close", "propagate"]}, "repository": {"repo_id": 13185812, "url": "https://github.com/alexandre-normand/blood-shepherd", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 408, "license": "licensed"}}