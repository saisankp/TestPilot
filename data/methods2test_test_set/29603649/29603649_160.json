{"test_class": {"identifier": "CircuitBreakerInformationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CircuitBreakerInformation underTest;", "modifier": "private", "type": "CircuitBreakerInformation", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-extras/circuit.breaker/src/test/java/com/epam/wilma/extras/circuitBreaker/CircuitBreakerInformationTest.java"}, "test_case": {"identifier": "increaseErrorLevel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void increaseErrorLevel() throws Exception {\n        int originalValue = underTest.getActualErrorLevel();\n        underTest.increaseErrorLevel();\n        int newValue = underTest.getActualErrorLevel();\n        Assert.assertTrue(originalValue + 1 == newValue);\n    }", "signature": "void increaseErrorLevel()", "full_signature": "@Test public void increaseErrorLevel()", "class_method_signature": "CircuitBreakerInformationTest.increaseErrorLevel()", "testcase": true, "constructor": false, "invocations": ["getActualErrorLevel", "increaseErrorLevel", "getActualErrorLevel", "assertTrue"]}, "focal_class": {"identifier": "CircuitBreakerInformation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ONE_SECOND = 1000;", "modifier": "private static final", "type": "int", "declarator": "ONE_SECOND = 1000", "var_name": "ONE_SECOND"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(CircuitBreakerInformation.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CircuitBreakerInformation.class)", "var_name": "logger"}, {"original_string": "private String identifier;", "modifier": "private", "type": "String", "declarator": "identifier", "var_name": "identifier"}, {"original_string": "private boolean isValid;", "modifier": "private", "type": "boolean", "declarator": "isValid", "var_name": "isValid"}, {"original_string": "private String path;", "modifier": "private", "type": "String", "declarator": "path", "var_name": "path"}, {"original_string": "private Integer timeoutInSec;", "modifier": "private", "type": "Integer", "declarator": "timeoutInSec", "var_name": "timeoutInSec"}, {"original_string": "private Integer[] successCodes;", "modifier": "private", "type": "Integer[]", "declarator": "successCodes", "var_name": "successCodes"}, {"original_string": "private Integer maxErrorCount;", "modifier": "private", "type": "Integer", "declarator": "maxErrorCount", "var_name": "maxErrorCount"}, {"original_string": "private int actualErrorLevel;", "modifier": "private", "type": "int", "declarator": "actualErrorLevel", "var_name": "actualErrorLevel"}, {"original_string": "private boolean isActive;", "modifier": "private", "type": "boolean", "declarator": "isActive", "var_name": "isActive"}, {"original_string": "private long timeout;", "modifier": "private", "type": "long", "declarator": "timeout", "var_name": "timeout"}], "methods": [{"identifier": "CircuitBreakerInformation", "parameters": "(final String identifier, final ParameterList parameters)", "modifiers": "", "return": "", "signature": " CircuitBreakerInformation(final String identifier, final ParameterList parameters)", "full_signature": "  CircuitBreakerInformation(final String identifier, final ParameterList parameters)", "class_method_signature": "CircuitBreakerInformation.CircuitBreakerInformation(final String identifier, final ParameterList parameters)", "testcase": false, "constructor": true}, {"identifier": "parseSuccessCodes", "parameters": "(String successCodesString)", "modifiers": "private", "return": "void", "signature": "void parseSuccessCodes(String successCodesString)", "full_signature": "private void parseSuccessCodes(String successCodesString)", "class_method_signature": "CircuitBreakerInformation.parseSuccessCodes(String successCodesString)", "testcase": false, "constructor": false}, {"identifier": "turnCircuitBreakerOn", "parameters": "()", "modifiers": "", "return": "void", "signature": "void turnCircuitBreakerOn()", "full_signature": " void turnCircuitBreakerOn()", "class_method_signature": "CircuitBreakerInformation.turnCircuitBreakerOn()", "testcase": false, "constructor": false}, {"identifier": "turnCircuitBreakerOff", "parameters": "()", "modifiers": "", "return": "void", "signature": "void turnCircuitBreakerOff()", "full_signature": " void turnCircuitBreakerOff()", "class_method_signature": "CircuitBreakerInformation.turnCircuitBreakerOff()", "testcase": false, "constructor": false}, {"identifier": "checkValidity", "parameters": "()", "modifiers": "", "return": "void", "signature": "void checkValidity()", "full_signature": " void checkValidity()", "class_method_signature": "CircuitBreakerInformation.checkValidity()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "CircuitBreakerInformation.toString()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isValid()", "full_signature": " boolean isValid()", "class_method_signature": "CircuitBreakerInformation.isValid()", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isActive()", "full_signature": " boolean isActive()", "class_method_signature": "CircuitBreakerInformation.isActive()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getPath()", "full_signature": " String getPath()", "class_method_signature": "CircuitBreakerInformation.getPath()", "testcase": false, "constructor": false}, {"identifier": "getSuccessCodes", "parameters": "()", "modifiers": "", "return": "Integer[]", "signature": "Integer[] getSuccessCodes()", "full_signature": " Integer[] getSuccessCodes()", "class_method_signature": "CircuitBreakerInformation.getSuccessCodes()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getTimeout()", "full_signature": " long getTimeout()", "class_method_signature": "CircuitBreakerInformation.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "resetErrorLevel", "parameters": "()", "modifiers": "", "return": "void", "signature": "void resetErrorLevel()", "full_signature": " void resetErrorLevel()", "class_method_signature": "CircuitBreakerInformation.resetErrorLevel()", "testcase": false, "constructor": false}, {"identifier": "getActualErrorLevel", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getActualErrorLevel()", "full_signature": " int getActualErrorLevel()", "class_method_signature": "CircuitBreakerInformation.getActualErrorLevel()", "testcase": false, "constructor": false}, {"identifier": "increaseErrorLevel", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean increaseErrorLevel()", "full_signature": " boolean increaseErrorLevel()", "class_method_signature": "CircuitBreakerInformation.increaseErrorLevel()", "testcase": false, "constructor": false}], "file": "wilma-extras/circuit.breaker/src/main/java/com/epam/wilma/extras/circuitBreaker/CircuitBreakerInformation.java"}, "focal_method": {"identifier": "increaseErrorLevel", "parameters": "()", "modifiers": "", "return": "boolean", "body": "boolean increaseErrorLevel() {\n        actualErrorLevel++;\n        return actualErrorLevel >= maxErrorCount;\n    }", "signature": "boolean increaseErrorLevel()", "full_signature": " boolean increaseErrorLevel()", "class_method_signature": "CircuitBreakerInformation.increaseErrorLevel()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}