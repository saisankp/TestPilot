{"test_class": {"identifier": "BlockchainPersistenceUnitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Random r;", "modifier": "", "type": "Random", "declarator": "r", "var_name": "r"}, {"original_string": "BlockchainPersistenceUnit<String, String> blockchainPersistenceUnit;", "modifier": "", "type": "BlockchainPersistenceUnit<String, String>", "declarator": "blockchainPersistenceUnit", "var_name": "blockchainPersistenceUnit"}], "file": "elrond-core/src/test/java/network/elrond/blockchain/BlockchainPersistenceUnitTest.java"}, "test_case": {"identifier": "testBlockchainPersistenceUnitWithNullPathShouldThrowException", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testBlockchainPersistenceUnitWithNullPathShouldThrowException() throws IOException {\n        blockchainPersistenceUnit.put(null, new byte[3]);\n    }", "signature": "void testBlockchainPersistenceUnitWithNullPathShouldThrowException()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testBlockchainPersistenceUnitWithNullPathShouldThrowException()", "class_method_signature": "BlockchainPersistenceUnitTest.testBlockchainPersistenceUnitWithNullPathShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["put"]}, "focal_class": {"identifier": "BlockchainPersistenceUnit", "superclass": "extends AbstractPersistenceUnit<K, V>", "interfaces": "", "fields": [{"original_string": "final Class<V> clazz;", "modifier": "final", "type": "Class<V>", "declarator": "clazz", "var_name": "clazz"}], "methods": [{"identifier": "BlockchainPersistenceUnit", "parameters": "(String databasePath, Class<V> clazz)", "modifiers": "", "return": "", "signature": " BlockchainPersistenceUnit(String databasePath, Class<V> clazz)", "full_signature": "  BlockchainPersistenceUnit(String databasePath, Class<V> clazz)", "class_method_signature": "BlockchainPersistenceUnit.BlockchainPersistenceUnit(String databasePath, Class<V> clazz)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(byte[] key, byte[] val)", "modifiers": "@Override public", "return": "void", "signature": "void put(byte[] key, byte[] val)", "full_signature": "@Override public void put(byte[] key, byte[] val)", "class_method_signature": "BlockchainPersistenceUnit.put(byte[] key, byte[] val)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(byte[] key)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] get(byte[] key)", "full_signature": "@Override public byte[] get(byte[] key)", "class_method_signature": "BlockchainPersistenceUnit.get(byte[] key)", "testcase": false, "constructor": false}], "file": "elrond-core/src/main/java/network/elrond/blockchain/BlockchainPersistenceUnit.java"}, "focal_method": {"identifier": "put", "parameters": "(byte[] key, byte[] val)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void put(byte[] key, byte[] val) {\n        Util.check(key!=null, \"key!=null\");\n        Util.check(val!=null, \"val!=null\");\n        database.put(key, val);\n    }", "signature": "void put(byte[] key, byte[] val)", "full_signature": "@Override public void put(byte[] key, byte[] val)", "class_method_signature": "BlockchainPersistenceUnit.put(byte[] key, byte[] val)", "testcase": false, "constructor": false, "invocations": ["check", "check", "put"]}, "repository": {"repo_id": 132454935, "url": "https://github.com/ElrondNetwork/elrond-node-prototype", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 16635, "license": "licensed"}}