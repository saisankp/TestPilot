{"test_class": {"identifier": "JavaImageIOIdentifyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String wsdlLoc = \"/pserv-pa-java-se/JavaImageIOIdentify?wsdl\";", "modifier": "", "type": "String", "declarator": "wsdlLoc = \"/pserv-pa-java-se/JavaImageIOIdentify?wsdl\"", "var_name": "wsdlLoc"}, {"original_string": "Identify ids = null;", "modifier": "", "type": "Identify", "declarator": "ids = null", "var_name": "ids"}], "file": "services/java-se/src/test/java/eu/planets_project/services/java_se/image/JavaImageIOIdentifyTest.java"}, "test_case": {"identifier": "testDescribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDescribe() {\n        ServiceDescription desc = ids.describe();\n        assertTrue(\"The ServiceDescription should not be NULL.\", desc != null );\n        System.out.println(\"Recieved service description: \" + desc.toXmlFormatted());\n    }", "signature": "void testDescribe()", "full_signature": "@Test public void testDescribe()", "class_method_signature": "JavaImageIOIdentifyTest.testDescribe()", "testcase": true, "constructor": false, "invocations": ["describe", "assertTrue", "println", "toXmlFormatted"]}, "focal_class": {"identifier": "JavaImageIOIdentify", "superclass": "", "interfaces": "implements Identify", "fields": [{"original_string": "public static final String NAME = \"JavaImageIOIdentify\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"JavaImageIOIdentify\"", "var_name": "NAME"}, {"original_string": "private static final Logger log = Logger.getLogger(JavaImageIOIdentify.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(JavaImageIOIdentify.class.getName())", "var_name": "log"}, {"original_string": "static Tool tool = null;", "modifier": "static", "type": "Tool", "declarator": "tool = null", "var_name": "tool"}], "methods": [{"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "JavaImageIOIdentify.describe()", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(DigitalObject dob, List<Parameter> parameters )", "modifiers": "public", "return": "IdentifyResult", "signature": "IdentifyResult identify(DigitalObject dob, List<Parameter> parameters )", "full_signature": "public IdentifyResult identify(DigitalObject dob, List<Parameter> parameters )", "class_method_signature": "JavaImageIOIdentify.identify(DigitalObject dob, List<Parameter> parameters )", "testcase": false, "constructor": false}, {"identifier": "returnWithErrorMessage", "parameters": "(ServiceReport report)", "modifiers": "private", "return": "IdentifyResult", "signature": "IdentifyResult returnWithErrorMessage(ServiceReport report)", "full_signature": "private IdentifyResult returnWithErrorMessage(ServiceReport report)", "class_method_signature": "JavaImageIOIdentify.returnWithErrorMessage(ServiceReport report)", "testcase": false, "constructor": false}, {"identifier": "getFormatName", "parameters": "(Object o)", "modifiers": "private static", "return": "ImageReader", "signature": "ImageReader getFormatName(Object o)", "full_signature": "private static ImageReader getFormatName(Object o)", "class_method_signature": "JavaImageIOIdentify.getFormatName(Object o)", "testcase": false, "constructor": false}, {"identifier": "unique", "parameters": "(String[] strings)", "modifiers": "public static", "return": "String[]", "signature": "String[] unique(String[] strings)", "full_signature": "public static String[] unique(String[] strings)", "class_method_signature": "JavaImageIOIdentify.unique(String[] strings)", "testcase": false, "constructor": false}, {"identifier": "sanitize", "parameters": "( String format )", "modifiers": "public static", "return": "String", "signature": "String sanitize( String format )", "full_signature": "public static String sanitize( String format )", "class_method_signature": "JavaImageIOIdentify.sanitize( String format )", "testcase": false, "constructor": false}], "file": "services/java-se/src/main/java/eu/planets_project/services/java_se/image/JavaImageIOIdentify.java"}, "focal_method": {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "body": "public ServiceDescription describe() {\n        ServiceDescription.Builder mds = new ServiceDescription.Builder(NAME, Identify.class.getCanonicalName());\n        mds.description(\"A DigitalObject Identification Service based on the Java SE built-in ImageIO library.\");\n        mds.author(\"Andrew Jackson <Andrew.Jackson@bl.uk>\");\n        mds.classname(this.getClass().getCanonicalName());\n        mds.version(\"1.0.1\");\n        mds.tool(JavaImageIOIdentify.tool);\n        \n        // FIXME Do This!\n        \n        // Get list of unique supported read formats\n           String[] formatNames = ImageIO.getReaderFormatNames();\n           formatNames = unique(formatNames);\n           // e.g. png jpeg gif jpg\n           \n           // Get list of unique supported write formats\n           formatNames = ImageIO.getWriterFormatNames();\n           formatNames = unique(formatNames);\n           // e.g. png jpeg jpg\n           \n           // Get list of unique MIME types that can be read\n           formatNames = ImageIO.getReaderMIMETypes();\n           formatNames = unique(formatNames);\n           // e.g image/jpeg image/png image/x-png image/gif\n           \n           // Get list of unique MIME types that can be written\n           formatNames = ImageIO.getWriterMIMETypes();\n           formatNames = unique(formatNames);\n           // e.g. image/jpeg image/png image/x-png\n        \n        List<URI> ifs = new ArrayList<URI>();\n        for( String fmt_name : unique( ImageIO.getReaderFormatNames() ) ) {\n            ifs.add( FormatRegistryFactory.getFormatRegistry().createExtensionUri( fmt_name ) );\n        }\n        mds.inputFormats(ifs.toArray(new URI[]{}));\n\n        return mds.build();\n    }", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "JavaImageIOIdentify.describe()", "testcase": false, "constructor": false, "invocations": ["getCanonicalName", "description", "author", "classname", "getCanonicalName", "getClass", "version", "tool", "getReaderFormatNames", "unique", "getWriterFormatNames", "unique", "getReaderMIMETypes", "unique", "getWriterMIMETypes", "unique", "unique", "getReaderFormatNames", "add", "createExtensionUri", "getFormatRegistry", "inputFormats", "toArray", "build"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}