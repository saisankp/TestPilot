{"test_class": {"identifier": "HexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "dexlib2/src/test/java/org/jf/util/HexTest.java"}, "test_case": {"identifier": "testDump", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDump() {\n        byte[] bytes1 = new byte[]{17, 16, 17, 17, 17};\n        byte[] bytes2 = new byte[]{1, 1, 1, 1, 1, 1, 1, 0, 1, 1};\n\n        Assert.assertEquals(\"\", Hex.dump(bytes1, 5, 0, 0, 1, 3));\n        Assert.assertEquals(\"ba: 0101 00\\nbd: 0101\\n\",\n                Hex.dump(bytes2, 5, 5, 186, 3, 2));\n        Assert.assertEquals(\"00: 10\\n\",\n                Hex.dump(new byte[]{16}, 0, 1, 0, 1, 2));\n        Assert.assertEquals(\"00000000: 10\\n\",\n                Hex.dump(new byte[]{16}, 0, 1, 0, 0, 3));\n        Assert.assertEquals(\"0000: 10\\n\",\n                Hex.dump(new byte[]{16}, 0, 1, 0, 0, 4));\n        Assert.assertEquals(\"000000: 10\\n\",\n                Hex.dump(new byte[]{16}, 0, 1, 0, 1, 6));\n    }", "signature": "void testDump()", "full_signature": "@Test public void testDump()", "class_method_signature": "HexTest.testDump()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "dump", "assertEquals", "dump", "assertEquals", "dump", "assertEquals", "dump", "assertEquals", "dump", "assertEquals", "dump"]}, "focal_class": {"identifier": "Hex", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Hex", "parameters": "()", "modifiers": "private", "return": "", "signature": " Hex()", "full_signature": "private  Hex()", "class_method_signature": "Hex.Hex()", "testcase": false, "constructor": true}, {"identifier": "u8", "parameters": "(long v)", "modifiers": "public static", "return": "String", "signature": "String u8(long v)", "full_signature": "public static String u8(long v)", "class_method_signature": "Hex.u8(long v)", "testcase": false, "constructor": false}, {"identifier": "u4", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String u4(int v)", "full_signature": "public static String u4(int v)", "class_method_signature": "Hex.u4(int v)", "testcase": false, "constructor": false}, {"identifier": "u3", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String u3(int v)", "full_signature": "public static String u3(int v)", "class_method_signature": "Hex.u3(int v)", "testcase": false, "constructor": false}, {"identifier": "u2", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String u2(int v)", "full_signature": "public static String u2(int v)", "class_method_signature": "Hex.u2(int v)", "testcase": false, "constructor": false}, {"identifier": "u2or4", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String u2or4(int v)", "full_signature": "public static String u2or4(int v)", "class_method_signature": "Hex.u2or4(int v)", "testcase": false, "constructor": false}, {"identifier": "u1", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String u1(int v)", "full_signature": "public static String u1(int v)", "class_method_signature": "Hex.u1(int v)", "testcase": false, "constructor": false}, {"identifier": "uNibble", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String uNibble(int v)", "full_signature": "public static String uNibble(int v)", "class_method_signature": "Hex.uNibble(int v)", "testcase": false, "constructor": false}, {"identifier": "s8", "parameters": "(long v)", "modifiers": "public static", "return": "String", "signature": "String s8(long v)", "full_signature": "public static String s8(long v)", "class_method_signature": "Hex.s8(long v)", "testcase": false, "constructor": false}, {"identifier": "s4", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String s4(int v)", "full_signature": "public static String s4(int v)", "class_method_signature": "Hex.s4(int v)", "testcase": false, "constructor": false}, {"identifier": "s2", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String s2(int v)", "full_signature": "public static String s2(int v)", "class_method_signature": "Hex.s2(int v)", "testcase": false, "constructor": false}, {"identifier": "s1", "parameters": "(int v)", "modifiers": "public static", "return": "String", "signature": "String s1(int v)", "full_signature": "public static String s1(int v)", "class_method_signature": "Hex.s1(int v)", "testcase": false, "constructor": false}, {"identifier": "dump", "parameters": "(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "modifiers": "public static", "return": "String", "signature": "String dump(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "full_signature": "public static String dump(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "class_method_signature": "Hex.dump(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "testcase": false, "constructor": false}], "file": "dexlib2/src/main/java/org/jf/util/Hex.java"}, "focal_method": {"identifier": "dump", "parameters": "(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "modifiers": "public static", "return": "String", "body": "public static String dump(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength) {\n        int end = offset + length;\n\n        // twos-complement math trick: ((x < 0) || (y < 0)) <=> ((x|y) < 0)\n        if (((offset | length | end) < 0) || (end > arr.length)) {\n            throw new IndexOutOfBoundsException(\"arr.length \" +\n                                                arr.length + \"; \" +\n                                                offset + \"..!\" + end);\n        }\n\n        if (outOffset < 0) {\n            throw new IllegalArgumentException(\"outOffset < 0\");\n        }\n\n        if (length == 0) {\n            return \"\";\n        }\n\n        StringBuffer sb = new StringBuffer(length * 4 + 6);\n        boolean bol = true;\n        int col = 0;\n\n        while (length > 0) {\n            if (col == 0) {\n                String astr;\n                switch (addressLength) {\n                    case 2:  astr = Hex.u1(outOffset); break;\n                    case 4:  astr = Hex.u2(outOffset); break;\n                    case 6:  astr = Hex.u3(outOffset); break;\n                    default: astr = Hex.u4(outOffset); break;\n                }\n                sb.append(astr);\n                sb.append(\": \");\n            } else if ((col & 1) == 0) {\n                sb.append(' ');\n            }\n            sb.append(Hex.u1(arr[offset]));\n            outOffset++;\n            offset++;\n            col++;\n            if (col == bpl) {\n                sb.append('\\n');\n                col = 0;\n            }\n            length--;\n        }\n\n        if (col != 0) {\n            sb.append('\\n');\n        }\n\n        return sb.toString();\n    }", "signature": "String dump(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "full_signature": "public static String dump(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "class_method_signature": "Hex.dump(byte[] arr, int offset, int length,\n                              int outOffset, int bpl, int addressLength)", "testcase": false, "constructor": false, "invocations": ["u1", "u2", "u3", "u4", "append", "append", "append", "append", "u1", "append", "append", "toString"]}, "repository": {"repo_id": 5925560, "url": "https://github.com/JesusFreke/smali", "language": "Java", "is_fork": false, "fork_count": 875, "stargazer_count": 4465, "size": 9375, "license": "licensed"}}