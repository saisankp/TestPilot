{"test_class": {"identifier": "FilterManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONTENT_NAME = \"The Big Bang Theory\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_NAME = \"The Big Bang Theory\"", "var_name": "CONTENT_NAME"}, {"original_string": "private FilterManager filterManager;", "modifier": "private", "type": "FilterManager", "declarator": "filterManager", "var_name": "filterManager"}, {"original_string": "@Mock\n\tprivate ContentManager contentManager;", "modifier": "@Mock\n\tprivate", "type": "ContentManager", "declarator": "contentManager", "var_name": "contentManager"}, {"original_string": "@Mock\n\tprivate TvShowFilter contentFilter;", "modifier": "@Mock\n\tprivate", "type": "TvShowFilter", "declarator": "contentFilter", "var_name": "contentFilter"}, {"original_string": "@Mock\n\tprivate Content parsedContent;", "modifier": "@Mock\n\tprivate", "type": "Content", "declarator": "parsedContent", "var_name": "parsedContent"}, {"original_string": "@Mock\n\tprivate User user1, user2;", "modifier": "@Mock\n\tprivate", "type": "User", "declarator": "user1", "var_name": "user1"}, {"original_string": "private TvShow content1, content2;", "modifier": "private", "type": "TvShow", "declarator": "content1", "var_name": "content1"}], "file": "seedboxer-core/src/test/java/net/seedboxer/sources/filter/FilterManagerTest.java"}, "test_case": {"identifier": "shouldNotAddContentWhenUsersDoesntHaveContentWithName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldNotAddContentWhenUsersDoesntHaveContentWithName() throws Exception {\n\t\twhen(contentManager.getAllContentOfTypeAndName(eq(CONTENT_NAME), eq(TvShow.class))).thenReturn(Collections.<Content> emptyList());\n\t\tMap<Content, List<User>> res = filterManager.filterContent(Collections.singletonList(parsedContent));\n\t\tAssert.assertTrue(res.isEmpty());\n\t}", "signature": "void shouldNotAddContentWhenUsersDoesntHaveContentWithName()", "full_signature": "@Test public void shouldNotAddContentWhenUsersDoesntHaveContentWithName()", "class_method_signature": "FilterManagerTest.shouldNotAddContentWhenUsersDoesntHaveContentWithName()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAllContentOfTypeAndName", "eq", "eq", "emptyList", "filterContent", "singletonList", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "FilterManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FilterManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FilterManager.class)", "var_name": "LOGGER"}, {"original_string": "private ContentManager contentManager;", "modifier": "private", "type": "ContentManager", "declarator": "contentManager", "var_name": "contentManager"}, {"original_string": "private List<ContentFilter> filters;", "modifier": "private", "type": "List<ContentFilter>", "declarator": "filters", "var_name": "filters"}, {"original_string": "private Cache<Content, List<User>> cache;", "modifier": "private", "type": "Cache<Content, List<User>>", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Value(\"${filter.cache.timeToLive}\")\n  private int cacheTimeToLive = 10;", "modifier": "@Value(\"${filter.cache.timeToLive}\")\n  private", "type": "int", "declarator": "cacheTimeToLive = 10", "var_name": "cacheTimeToLive"}], "methods": [{"identifier": "setFilters", "parameters": "(List<ContentFilter> filters)", "modifiers": "@Autowired public", "return": "void", "signature": "void setFilters(List<ContentFilter> filters)", "full_signature": "@Autowired public void setFilters(List<ContentFilter> filters)", "class_method_signature": "FilterManager.setFilters(List<ContentFilter> filters)", "testcase": false, "constructor": false}, {"identifier": "setContentManager", "parameters": "(ContentManager contentManager)", "modifiers": "@Autowired public", "return": "void", "signature": "void setContentManager(ContentManager contentManager)", "full_signature": "@Autowired public void setContentManager(ContentManager contentManager)", "class_method_signature": "FilterManager.setContentManager(ContentManager contentManager)", "testcase": false, "constructor": false}, {"identifier": "setCacheTimeToLive", "parameters": "(int cacheTimeToLive)", "modifiers": "public", "return": "void", "signature": "void setCacheTimeToLive(int cacheTimeToLive)", "full_signature": "public void setCacheTimeToLive(int cacheTimeToLive)", "class_method_signature": "FilterManager.setCacheTimeToLive(int cacheTimeToLive)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "FilterManager.init()", "testcase": false, "constructor": false}, {"identifier": "filterContent", "parameters": "(List<Content> parsedContentList)", "modifiers": "public synchronized", "return": "Map<Content, List<User>>", "signature": "Map<Content, List<User>> filterContent(List<Content> parsedContentList)", "full_signature": "public synchronized Map<Content, List<User>> filterContent(List<Content> parsedContentList)", "class_method_signature": "FilterManager.filterContent(List<Content> parsedContentList)", "testcase": false, "constructor": false}, {"identifier": "mapContentWithUsers", "parameters": "(List<Content> parsedContentList)", "modifiers": "private", "return": "Map<Content, List<User>>", "signature": "Map<Content, List<User>> mapContentWithUsers(List<Content> parsedContentList)", "full_signature": "private Map<Content, List<User>> mapContentWithUsers(List<Content> parsedContentList)", "class_method_signature": "FilterManager.mapContentWithUsers(List<Content> parsedContentList)", "testcase": false, "constructor": false}, {"identifier": "findUsersWantingThisContent", "parameters": "(Content parsedContent)", "modifiers": "private", "return": "List<User>", "signature": "List<User> findUsersWantingThisContent(Content parsedContent)", "full_signature": "private List<User> findUsersWantingThisContent(Content parsedContent)", "class_method_signature": "FilterManager.findUsersWantingThisContent(Content parsedContent)", "testcase": false, "constructor": false}, {"identifier": "getContentWithName", "parameters": "(String name, ContentFilter<?> filter)", "modifiers": "private", "return": "List<Content>", "signature": "List<Content> getContentWithName(String name, ContentFilter<?> filter)", "full_signature": "private List<Content> getContentWithName(String name, ContentFilter<?> filter)", "class_method_signature": "FilterManager.getContentWithName(String name, ContentFilter<?> filter)", "testcase": false, "constructor": false}, {"identifier": "filterContentWithHistory", "parameters": "(\n      Map<Content, List<User>> mappedContents)", "modifiers": "private", "return": "Map<Content, List<User>>", "signature": "Map<Content, List<User>> filterContentWithHistory(\n      Map<Content, List<User>> mappedContents)", "full_signature": "private Map<Content, List<User>> filterContentWithHistory(\n      Map<Content, List<User>> mappedContents)", "class_method_signature": "FilterManager.filterContentWithHistory(\n      Map<Content, List<User>> mappedContents)", "testcase": false, "constructor": false}, {"identifier": "filterContentWithCache", "parameters": "(Map<Content, List<User>> mappedContents)", "modifiers": "private", "return": "Map<Content, List<User>>", "signature": "Map<Content, List<User>> filterContentWithCache(Map<Content, List<User>> mappedContents)", "full_signature": "private Map<Content, List<User>> filterContentWithCache(Map<Content, List<User>> mappedContents)", "class_method_signature": "FilterManager.filterContentWithCache(Map<Content, List<User>> mappedContents)", "testcase": false, "constructor": false}], "file": "seedboxer-core/src/main/java/net/seedboxer/sources/filter/FilterManager.java"}, "focal_method": {"identifier": "filterContent", "parameters": "(List<Content> parsedContentList)", "modifiers": "public synchronized", "return": "Map<Content, List<User>>", "body": "public synchronized Map<Content, List<User>> filterContent(List<Content> parsedContentList) {\n    Map<Content, List<User>> mappedContent = mapContentWithUsers(parsedContentList);\n    return filterContentWithHistory(filterContentWithCache(mappedContent));\n  }", "signature": "Map<Content, List<User>> filterContent(List<Content> parsedContentList)", "full_signature": "public synchronized Map<Content, List<User>> filterContent(List<Content> parsedContentList)", "class_method_signature": "FilterManager.filterContent(List<Content> parsedContentList)", "testcase": false, "constructor": false, "invocations": ["mapContentWithUsers", "filterContentWithHistory", "filterContentWithCache"]}, "repository": {"repo_id": 5342001, "url": "https://github.com/jdavisonc/seedboxer", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 15845, "license": "licensed"}}