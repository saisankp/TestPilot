{"test_class": {"identifier": "TestBitSetUtils", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestBitSetUtils.java"}, "test_case": {"identifier": "testToList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToList() {\n    int[] indices = new int[] { 0, 1, 4, 10, 6, 9, 11 };\n    BitSet bitSet = new BitSet(20);\n    for (int i: indices) {\n      bitSet.set(i);\n    }\n    List<Boolean> list = BitSetUtils.toList(bitSet, bitSet.size());\n    Assert.assertEquals(bitSet.size(), list.size());\n    for (int i = 0; i < bitSet.size(); i++) {\n      Assert.assertEquals(bitSet.get(i), list.get(i));\n    }\n    List<Boolean> shortList = BitSetUtils.toList(bitSet, 5);\n    Assert.assertEquals(5, shortList.size());\n    for (int i = 0; i < 5; i++) {\n      Assert.assertEquals(bitSet.get(i), shortList.get(i));\n    }\n    List<Boolean> longList = BitSetUtils.toList(bitSet, bitSet.size() + 10);\n    Assert.assertEquals(bitSet.size() + 10, longList.size());\n    for (int i = 0; i < bitSet.size() + 10; i++) {\n      Assert.assertEquals(bitSet.get(i), longList.get(i));\n    }\n    boolean exception = false;\n    try {\n      BitSetUtils.toList(bitSet, -2);\n    } catch (IllegalArgumentException e) {\n      exception = true;\n    }\n    Assert.assertTrue(exception);\n  }", "signature": "void testToList()", "full_signature": "@Test public void testToList()", "class_method_signature": "TestBitSetUtils.testToList()", "testcase": true, "constructor": false, "invocations": ["set", "toList", "size", "assertEquals", "size", "size", "size", "assertEquals", "get", "get", "toList", "assertEquals", "size", "assertEquals", "get", "get", "toList", "size", "assertEquals", "size", "size", "size", "assertEquals", "get", "get", "toList", "assertTrue"]}, "focal_class": {"identifier": "BitSetUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BitSetUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " BitSetUtils()", "full_signature": "private  BitSetUtils()", "class_method_signature": "BitSetUtils.BitSetUtils()", "testcase": false, "constructor": true}, {"identifier": "copy", "parameters": "(BitSet b)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet copy(BitSet b)", "full_signature": "public static BitSet copy(BitSet b)", "class_method_signature": "BitSetUtils.copy(BitSet b)", "testcase": false, "constructor": false}, {"identifier": "getRandomBits", "parameters": "(int n, Random random)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet getRandomBits(int n, Random random)", "full_signature": "public static BitSet getRandomBits(int n, Random random)", "class_method_signature": "BitSetUtils.getRandomBits(int n, Random random)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(BitSet bits, int n)", "modifiers": "public static", "return": "String", "signature": "String toString(BitSet bits, int n)", "full_signature": "public static String toString(BitSet bits, int n)", "class_method_signature": "BitSetUtils.toString(BitSet bits, int n)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(BitSet bits)", "modifiers": "public static", "return": "String", "signature": "String toString(BitSet bits)", "full_signature": "public static String toString(BitSet bits)", "class_method_signature": "BitSetUtils.toString(BitSet bits)", "testcase": false, "constructor": false}, {"identifier": "innerProduct", "parameters": "(BitSet a, BitSet b)", "modifiers": "public static", "return": "boolean", "signature": "boolean innerProduct(BitSet a, BitSet b)", "full_signature": "public static boolean innerProduct(BitSet a, BitSet b)", "class_method_signature": "BitSetUtils.innerProduct(BitSet a, BitSet b)", "testcase": false, "constructor": false}, {"identifier": "isOdd", "parameters": "(int n)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOdd(int n)", "full_signature": "private static boolean isOdd(int n)", "class_method_signature": "BitSetUtils.isOdd(int n)", "testcase": false, "constructor": false}, {"identifier": "fromList", "parameters": "(List<Boolean> list)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet fromList(List<Boolean> list)", "full_signature": "public static BitSet fromList(List<Boolean> list)", "class_method_signature": "BitSetUtils.fromList(List<Boolean> list)", "testcase": false, "constructor": false}, {"identifier": "fromArray", "parameters": "(boolean[] array)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet fromArray(boolean[] array)", "full_signature": "public static BitSet fromArray(boolean[] array)", "class_method_signature": "BitSetUtils.fromArray(boolean[] array)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(BitSet bitset, int length)", "modifiers": "public static", "return": "boolean[]", "signature": "boolean[] toArray(BitSet bitset, int length)", "full_signature": "public static boolean[] toArray(BitSet bitset, int length)", "class_method_signature": "BitSetUtils.toArray(BitSet bitset, int length)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "(BitSet bitset, int n)", "modifiers": "public static", "return": "List<Boolean>", "signature": "List<Boolean> toList(BitSet bitset, int n)", "full_signature": "public static List<Boolean> toList(BitSet bitset, int n)", "class_method_signature": "BitSetUtils.toList(BitSet bitset, int n)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/BitSetUtils.java"}, "focal_method": {"identifier": "toList", "parameters": "(BitSet bitset, int n)", "modifiers": "public static", "return": "List<Boolean>", "body": "public static List<Boolean> toList(BitSet bitset, int n) {\n    if (n < 0) {\n      throw new IllegalArgumentException(\"Size of list must not be negative but was + \" + n);\n    }\n    List<Boolean> list = new ArrayList<>(n);\n    for (int i = 0; i < n; i++) {\n      list.add(bitset.get(i));\n    }\n    return list;\n  }", "signature": "List<Boolean> toList(BitSet bitset, int n)", "full_signature": "public static List<Boolean> toList(BitSet bitset, int n)", "class_method_signature": "BitSetUtils.toList(BitSet bitset, int n)", "testcase": false, "constructor": false, "invocations": ["add", "get"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}