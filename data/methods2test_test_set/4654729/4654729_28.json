{"test_class": {"identifier": "InheritanceAnalyserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "InheritanceAnalyser inheritanceAnalyser;", "modifier": "", "type": "InheritanceAnalyser", "declarator": "inheritanceAnalyser", "var_name": "inheritanceAnalyser"}], "file": "core/src/test/java/com/github/jsr330/analysis/InheritanceAnalyserTest.java"}, "test_case": {"identifier": "analyse_NoInheritances", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void analyse_NoInheritances() {\n        Map<String, Class<?>> classes = new HashMap<String, Class<?>>();\n        Map<String, Class<?>[]> inheritances;\n        \n        classes.put(Object.class.getName(), Object.class);\n        classes.put(CharSequence.class.getName(), CharSequence.class);\n        classes.put(Runnable.class.getName(), Runnable.class);\n        \n        inheritances = inheritanceAnalyser.analyse(classes);\n        \n        assertNotNull(inheritances);\n        assertEquals(0, inheritances.size());\n    }", "signature": "void analyse_NoInheritances()", "full_signature": "@Test public void analyse_NoInheritances()", "class_method_signature": "InheritanceAnalyserTest.analyse_NoInheritances()", "testcase": true, "constructor": false, "invocations": ["put", "getName", "put", "getName", "put", "getName", "analyse", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "InheritanceAnalyser", "superclass": "", "interfaces": "implements ClassAnalyser<Map<String, Class<?>[]>>", "fields": [{"original_string": "private static final String[] EMPTY_STRING_ARRAY = new String[] {};", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[] {}", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[] {};", "modifier": "private static final", "type": "Class<?>[]", "declarator": "EMPTY_CLASS_ARRAY = new Class<?>[] {}", "var_name": "EMPTY_CLASS_ARRAY"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InheritanceAnalyser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InheritanceAnalyser.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "analyse", "parameters": "(Map<String, Class<?>> classes)", "modifiers": "@Override public", "return": "Map<String, Class<?>[]>", "signature": "Map<String, Class<?>[]> analyse(Map<String, Class<?>> classes)", "full_signature": "@Override public Map<String, Class<?>[]> analyse(Map<String, Class<?>> classes)", "class_method_signature": "InheritanceAnalyser.analyse(Map<String, Class<?>> classes)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/jsr330/analysis/InheritanceAnalyser.java"}, "focal_method": {"identifier": "analyse", "parameters": "(Map<String, Class<?>> classes)", "modifiers": "@Override public", "return": "Map<String, Class<?>[]>", "body": "@Override\n    public Map<String, Class<?>[]> analyse(Map<String, Class<?>> classes) {\n        Map<String, Class<?>[]> inheritances = new TreeMap<String, Class<?>[]>();\n        List<Class<?>> classList = new ArrayList<Class<?>>();\n        String[] classNames = classes.keySet().toArray(EMPTY_STRING_ARRAY);\n        Class<?> type;\n        \n        for (Map.Entry<String, Class<?>> entry : classes.entrySet()) {\n            classList.clear();\n            LOGGER.debug(\"analyse - looking for {}\", entry.getKey());\n            for (String className : classNames) {\n                if (!entry.getKey().equals(className)) {\n                    type = classes.get(className);\n                    if (entry.getValue().isAssignableFrom(type) && !type.isInterface() && !Modifier.isAbstract(type.getModifiers())) {\n                        classList.add(type);\n                        LOGGER.debug(\"analyse - found {}\", type);\n                    }\n                }\n            }\n            if (!classList.isEmpty()) {\n                inheritances.put(entry.getKey(), classList.toArray(EMPTY_CLASS_ARRAY));\n            }\n        }\n        \n        return inheritances;\n    }", "signature": "Map<String, Class<?>[]> analyse(Map<String, Class<?>> classes)", "full_signature": "@Override public Map<String, Class<?>[]> analyse(Map<String, Class<?>> classes)", "class_method_signature": "InheritanceAnalyser.analyse(Map<String, Class<?>> classes)", "testcase": false, "constructor": false, "invocations": ["toArray", "keySet", "entrySet", "clear", "debug", "getKey", "equals", "getKey", "get", "isAssignableFrom", "getValue", "isInterface", "isAbstract", "getModifiers", "add", "debug", "isEmpty", "put", "getKey", "toArray"]}, "repository": {"repo_id": 4654729, "url": "https://github.com/rstiller/JSR-330", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 10, "size": 747, "license": "licensed"}}