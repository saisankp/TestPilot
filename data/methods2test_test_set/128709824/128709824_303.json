{"test_class": {"identifier": "PressureMarkTransformFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final EmptyInvoker invoker = new EmptyInvoker(null);", "modifier": "public static final", "type": "EmptyInvoker", "declarator": "invoker = new EmptyInvoker(null)", "var_name": "invoker"}, {"original_string": "public static final SofaRequest  request = null;", "modifier": "public static final", "type": "SofaRequest", "declarator": "request = null", "var_name": "request"}, {"original_string": "public static final SofaTracer   tracer  = new SofaTracer.Builder(\"TEST\").build();", "modifier": "public static final", "type": "SofaTracer", "declarator": "tracer  = new SofaTracer.Builder(\"TEST\").build()", "var_name": "tracer"}], "file": "remoting/remoting-triple/src/test/java/com/alipay/sofa/rpc/filter/PressureMarkTransformFilterTest.java"}, "test_case": {"identifier": "testConsumerPressure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConsumerPressure() {\n        //consumer side\n        SofaTracerSpan currentSpan = SofaTraceContextHolder.getSofaTraceContext().getCurrentSpan();\n        Map<String, String> bizBaggage = currentSpan.getSofaTracerSpanContext().getBizBaggage();\n        bizBaggage.put(\"mark\", \"T\");\n        Assert.assertTrue(TracerUtils.isLoadTest(currentSpan));\n\n        PressureMarkTransformFilter filter = new PressureMarkTransformFilter();\n        filter.invoke(invoker, request);\n\n        Assert.assertEquals(PRESSURE, invoker.getMetaHolder().get(HEAD_KEY_TRAFFIC_TYPE.name()));\n    }", "signature": "void testConsumerPressure()", "full_signature": "@Test public void testConsumerPressure()", "class_method_signature": "PressureMarkTransformFilterTest.testConsumerPressure()", "testcase": true, "constructor": false, "invocations": ["getCurrentSpan", "getSofaTraceContext", "getBizBaggage", "getSofaTracerSpanContext", "put", "assertTrue", "isLoadTest", "invoke", "assertEquals", "get", "getMetaHolder", "name"]}, "focal_class": {"identifier": "PressureMarkTransformFilter", "superclass": "extends Filter", "interfaces": "", "fields": [{"original_string": "public static final String PRESSURE = \"pressure\";", "modifier": "public static final", "type": "String", "declarator": "PRESSURE = \"pressure\"", "var_name": "PRESSURE"}, {"original_string": "public static final String MARK     = \"mark\";", "modifier": "public static final", "type": "String", "declarator": "MARK     = \"mark\"", "var_name": "MARK"}, {"original_string": "public static final String T        = \"T\";", "modifier": "public static final", "type": "String", "declarator": "T        = \"T\"", "var_name": "T"}], "methods": [{"identifier": "invoke", "parameters": "(FilterInvoker invoker, SofaRequest request)", "modifiers": "@Override public", "return": "SofaResponse", "signature": "SofaResponse invoke(FilterInvoker invoker, SofaRequest request)", "full_signature": "@Override public SofaResponse invoke(FilterInvoker invoker, SofaRequest request)", "class_method_signature": "PressureMarkTransformFilter.invoke(FilterInvoker invoker, SofaRequest request)", "testcase": false, "constructor": false}], "file": "remoting/remoting-triple/src/main/java/com/alipay/sofa/rpc/filter/PressureMarkTransformFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(FilterInvoker invoker, SofaRequest request)", "modifiers": "@Override public", "return": "SofaResponse", "body": "@Override\n    public SofaResponse invoke(FilterInvoker invoker, SofaRequest request) throws SofaRpcException {\n        // consumer side, if in provider side,loadTest always false\n        SofaTracerSpan currentSpan = SofaTraceContextHolder.getSofaTraceContext().getCurrentSpan();\n        boolean loadTest = TracerUtils.isLoadTest(currentSpan);\n        if (loadTest) {\n            Map<String, String> metaHolder = MetadataHolder.getMetaHolder();\n            metaHolder.put(HEAD_KEY_TRAFFIC_TYPE.name(), PRESSURE);\n        }\n\n        // provider side ,if in consumer side, metadata == null\n        Metadata metadata = TracingContextKey.getKeyMetadata().get();\n        if (metadata != null) {\n            String s = metadata.get(HEAD_KEY_TRAFFIC_TYPE);\n            if (PRESSURE.equals(s)) {\n                currentSpan.getSofaTracerSpanContext().setBizBaggageItem(MARK, T);\n            }\n        }\n        try {\n            return invoker.invoke(request);\n        } finally {\n            MetadataHolder.clear();\n        }\n    }", "signature": "SofaResponse invoke(FilterInvoker invoker, SofaRequest request)", "full_signature": "@Override public SofaResponse invoke(FilterInvoker invoker, SofaRequest request)", "class_method_signature": "PressureMarkTransformFilter.invoke(FilterInvoker invoker, SofaRequest request)", "testcase": false, "constructor": false, "invocations": ["getCurrentSpan", "getSofaTraceContext", "isLoadTest", "getMetaHolder", "put", "name", "get", "getKeyMetadata", "get", "equals", "setBizBaggageItem", "getSofaTracerSpanContext", "invoke", "clear"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}