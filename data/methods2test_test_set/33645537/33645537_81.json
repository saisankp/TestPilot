{"test_class": {"identifier": "BitsCounterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BitsCounter bitsCounter;", "modifier": "private", "type": "BitsCounter", "declarator": "bitsCounter", "var_name": "bitsCounter"}], "file": "algs/src/test/java/com/github/pedrovgs/problem1/BitsCounterTest.java"}, "test_case": {"identifier": "numberOfBitsIn1990IsSevenBasedOnBinaryOperator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void numberOfBitsIn1990IsSevenBasedOnBinaryOperator() {\n    assertEquals(7, bitsCounter.countBitsToOneBasedOnBinaryOperators(1990));\n  }", "signature": "void numberOfBitsIn1990IsSevenBasedOnBinaryOperator()", "full_signature": "@Test public void numberOfBitsIn1990IsSevenBasedOnBinaryOperator()", "class_method_signature": "BitsCounterTest.numberOfBitsIn1990IsSevenBasedOnBinaryOperator()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "countBitsToOneBasedOnBinaryOperators"]}, "focal_class": {"identifier": "BitsCounter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "countBitsToOneBasedOnString", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int countBitsToOneBasedOnString(int n)", "full_signature": "public int countBitsToOneBasedOnString(int n)", "class_method_signature": "BitsCounter.countBitsToOneBasedOnString(int n)", "testcase": false, "constructor": false}, {"identifier": "countBitsToOneBasedOnBinaryOperators", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int countBitsToOneBasedOnBinaryOperators(int n)", "full_signature": "public int countBitsToOneBasedOnBinaryOperators(int n)", "class_method_signature": "BitsCounter.countBitsToOneBasedOnBinaryOperators(int n)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem1/BitsCounter.java"}, "focal_method": {"identifier": "countBitsToOneBasedOnBinaryOperators", "parameters": "(int n)", "modifiers": "public", "return": "int", "body": "public int countBitsToOneBasedOnBinaryOperators(int n) {\n    int result = 0;\n    while (n > 0) {\n      result += (n & 1) == 1 ? 1 : 0;\n      n = n >> 1;\n    }\n    return result;\n  }", "signature": "int countBitsToOneBasedOnBinaryOperators(int n)", "full_signature": "public int countBitsToOneBasedOnBinaryOperators(int n)", "class_method_signature": "BitsCounter.countBitsToOneBasedOnBinaryOperators(int n)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}