{"test_class": {"identifier": "FeatureTypesTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/main/src/test/java/org/geotools/feature/FeatureTypesTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();\n        builder.setName(\"SomeFeature\");\n        builder.setCRS(null);\n        builder.add(\"name\", String.class);\n        builder.add(\"geom1\", Point.class);\n        builder.add(\"geom2\", Point.class);\n        builder.setDefaultGeometry(\"geom1\");\n        SimpleFeatureType ft1 = builder.buildFeatureType();\n        builder.setName(\"SomeFeature\");\n        builder.setCRS(null);\n        builder.add(\"name\", String.class);\n        builder.add(\"geom1\", Point.class);\n        builder.add(\"geom2\", Point.class);\n        builder.setDefaultGeometry(\"geom1\");\n        SimpleFeatureType ft2 = builder.buildFeatureType();\n        assertTrue(FeatureTypes.equalsExact(ft1, ft2));\n        \n        builder.setName(\"SomeFeature\");\n        builder.setCRS(null);\n        builder.add(\"name\", String.class);\n        builder.add(\"geom1\", Point.class);\n        builder.add(\"geom2\", Point.class);\n        builder.setDefaultGeometry(\"geom2\");\n        ft2 = builder.buildFeatureType();\n        assertFalse(FeatureTypes.equalsExact(ft1, ft2));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "FeatureTypesTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["setName", "setCRS", "add", "add", "add", "setDefaultGeometry", "buildFeatureType", "setName", "setCRS", "add", "add", "add", "setDefaultGeometry", "buildFeatureType", "assertTrue", "equalsExact", "setName", "setCRS", "add", "add", "add", "setDefaultGeometry", "buildFeatureType", "assertFalse", "equalsExact"]}, "focal_class": {"identifier": "FeatureTypes", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final URI DEFAULT_NAMESPACE;", "modifier": "public static final", "type": "URI", "declarator": "DEFAULT_NAMESPACE", "var_name": "DEFAULT_NAMESPACE"}, {"original_string": "public final static SimpleFeatureType ABSTRACT_FEATURE_TYPE;", "modifier": "public final static", "type": "SimpleFeatureType", "declarator": "ABSTRACT_FEATURE_TYPE", "var_name": "ABSTRACT_FEATURE_TYPE"}, {"original_string": "final public static NameImpl DEFAULT_TYPENAME =\n\t\tnew NameImpl( \"AbstractFeatureCollectionType\", DEFAULT_NAMESPACE.toString() );", "modifier": "final public static", "type": "NameImpl", "declarator": "DEFAULT_TYPENAME =\n\t\tnew NameImpl( \"AbstractFeatureCollectionType\", DEFAULT_NAMESPACE.toString() )", "var_name": "DEFAULT_TYPENAME"}, {"original_string": "final public static int ANY_LENGTH = -1;", "modifier": "final public static", "type": "int", "declarator": "ANY_LENGTH = -1", "var_name": "ANY_LENGTH"}, {"original_string": "public static final SimpleFeatureType EMPTY = new SimpleFeatureTypeImpl(\n        new NameImpl( \"Empty\" ), Collections.EMPTY_LIST, null, false, Collections.EMPTY_LIST, null, null\n    );", "modifier": "public static final", "type": "SimpleFeatureType", "declarator": "EMPTY = new SimpleFeatureTypeImpl(\n        new NameImpl( \"Empty\" ), Collections.EMPTY_LIST, null, false, Collections.EMPTY_LIST, null, null\n    )", "var_name": "EMPTY"}], "methods": [{"identifier": "getFieldLength", "parameters": "( PropertyDescriptor descriptor )", "modifiers": "public static", "return": "int", "signature": "int getFieldLength( PropertyDescriptor descriptor )", "full_signature": "public static int getFieldLength( PropertyDescriptor descriptor )", "class_method_signature": "FeatureTypes.getFieldLength( PropertyDescriptor descriptor )", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "( SimpleFeatureType schema, CoordinateReferenceSystem crs )", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType transform( SimpleFeatureType schema, CoordinateReferenceSystem crs )", "full_signature": "public static SimpleFeatureType transform( SimpleFeatureType schema, CoordinateReferenceSystem crs )", "class_method_signature": "FeatureTypes.transform( SimpleFeatureType schema, CoordinateReferenceSystem crs )", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "( SimpleFeatureType schema, CoordinateReferenceSystem crs, boolean forceOnlyMissing)", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType transform( SimpleFeatureType schema, CoordinateReferenceSystem crs, boolean forceOnlyMissing)", "full_signature": "public static SimpleFeatureType transform( SimpleFeatureType schema, CoordinateReferenceSystem crs, boolean forceOnlyMissing)", "class_method_signature": "FeatureTypes.transform( SimpleFeatureType schema, CoordinateReferenceSystem crs, boolean forceOnlyMissing)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "( SimpleFeature feature, SimpleFeatureType schema, MathTransform transform )", "modifiers": "public static", "return": "SimpleFeature", "signature": "SimpleFeature transform( SimpleFeature feature, SimpleFeatureType schema, MathTransform transform )", "full_signature": "public static SimpleFeature transform( SimpleFeature feature, SimpleFeatureType schema, MathTransform transform )", "class_method_signature": "FeatureTypes.transform( SimpleFeature feature, SimpleFeatureType schema, MathTransform transform )", "testcase": false, "constructor": false}, {"identifier": "newFeatureType", "parameters": "( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes )", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes )", "full_signature": "public static SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes )", "class_method_signature": "FeatureTypes.newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes )", "testcase": false, "constructor": false}, {"identifier": "newFeatureType", "parameters": "( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, AttributeDescriptor defaultGeometry )", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, AttributeDescriptor defaultGeometry )", "full_signature": "public static SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, AttributeDescriptor defaultGeometry )", "class_method_signature": "FeatureTypes.newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, AttributeDescriptor defaultGeometry )", "testcase": false, "constructor": false}, {"identifier": "newFeatureType", "parameters": "( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, GeometryDescriptor   defaultGeometry )", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, GeometryDescriptor   defaultGeometry )", "full_signature": "public static SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, GeometryDescriptor   defaultGeometry )", "class_method_signature": "FeatureTypes.newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract, SimpleFeatureType[] superTypes, GeometryDescriptor   defaultGeometry )", "testcase": false, "constructor": false}, {"identifier": "newFeatureType", "parameters": "( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract )", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract )", "full_signature": "public static SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract )", "class_method_signature": "FeatureTypes.newFeatureType( AttributeDescriptor[] types, String name, URI ns,\n            boolean isAbstract )", "testcase": false, "constructor": false}, {"identifier": "newFeatureType", "parameters": "( AttributeDescriptor[] types, String name, URI ns )", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns )", "full_signature": "public static SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name, URI ns )", "class_method_signature": "FeatureTypes.newFeatureType( AttributeDescriptor[] types, String name, URI ns )", "testcase": false, "constructor": false}, {"identifier": "newFeatureType", "parameters": "( AttributeDescriptor[] types, String name )", "modifiers": "public static", "return": "SimpleFeatureType", "signature": "SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name )", "full_signature": "public static SimpleFeatureType newFeatureType( AttributeDescriptor[] types, String name )", "class_method_signature": "FeatureTypes.newFeatureType( AttributeDescriptor[] types, String name )", "testcase": false, "constructor": false}, {"identifier": "getAncestors", "parameters": "(FeatureType featureType)", "modifiers": "public static", "return": "List<FeatureType>", "signature": "List<FeatureType> getAncestors(FeatureType featureType)", "full_signature": "public static List<FeatureType> getAncestors(FeatureType featureType)", "class_method_signature": "FeatureTypes.getAncestors(FeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "isDecendedFrom", "parameters": "(FeatureType featureType, URI namespace, String typeName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDecendedFrom(FeatureType featureType, URI namespace, String typeName)", "full_signature": "public static boolean isDecendedFrom(FeatureType featureType, URI namespace, String typeName)", "class_method_signature": "FeatureTypes.isDecendedFrom(FeatureType featureType, URI namespace, String typeName)", "testcase": false, "constructor": false}, {"identifier": "isDecendedFrom", "parameters": "(FeatureType featureType, FeatureType isParentType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDecendedFrom(FeatureType featureType, FeatureType isParentType)", "full_signature": "public static boolean isDecendedFrom(FeatureType featureType, FeatureType isParentType)", "class_method_signature": "FeatureTypes.isDecendedFrom(FeatureType featureType, FeatureType isParentType)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( SimpleFeatureType typeA, SimpleFeatureType typeB )", "modifiers": "public static", "return": "boolean", "signature": "boolean equals( SimpleFeatureType typeA, SimpleFeatureType typeB )", "full_signature": "public static boolean equals( SimpleFeatureType typeA, SimpleFeatureType typeB )", "class_method_signature": "FeatureTypes.equals( SimpleFeatureType typeA, SimpleFeatureType typeB )", "testcase": false, "constructor": false}, {"identifier": "equalsExact", "parameters": "( SimpleFeatureType typeA, SimpleFeatureType typeB )", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsExact( SimpleFeatureType typeA, SimpleFeatureType typeB )", "full_signature": "public static boolean equalsExact( SimpleFeatureType typeA, SimpleFeatureType typeB )", "class_method_signature": "FeatureTypes.equalsExact( SimpleFeatureType typeA, SimpleFeatureType typeB )", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( SimpleFeatureType typeA, SimpleFeatureType typeB, boolean compareUserMaps)", "modifiers": "static", "return": "boolean", "signature": "boolean equals( SimpleFeatureType typeA, SimpleFeatureType typeB, boolean compareUserMaps)", "full_signature": "static boolean equals( SimpleFeatureType typeA, SimpleFeatureType typeB, boolean compareUserMaps)", "class_method_signature": "FeatureTypes.equals( SimpleFeatureType typeA, SimpleFeatureType typeB, boolean compareUserMaps)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( List attributesA, List attributesB, boolean compareUserMaps)", "modifiers": "static", "return": "boolean", "signature": "boolean equals( List attributesA, List attributesB, boolean compareUserMaps)", "full_signature": "static boolean equals( List attributesA, List attributesB, boolean compareUserMaps)", "class_method_signature": "FeatureTypes.equals( List attributesA, List attributesB, boolean compareUserMaps)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( List attributesA, List attributesB)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals( List attributesA, List attributesB)", "full_signature": "public static boolean equals( List attributesA, List attributesB)", "class_method_signature": "FeatureTypes.equals( List attributesA, List attributesB)", "testcase": false, "constructor": false}, {"identifier": "equalsExact", "parameters": "( List attributesA, List attributesB)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsExact( List attributesA, List attributesB)", "full_signature": "public static boolean equalsExact( List attributesA, List attributesB)", "class_method_signature": "FeatureTypes.equalsExact( List attributesA, List attributesB)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "modifiers": "public static", "return": "boolean", "signature": "boolean equals( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "full_signature": "public static boolean equals( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "class_method_signature": "FeatureTypes.equals( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "testcase": false, "constructor": false}, {"identifier": "equalsExact", "parameters": "( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsExact( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "full_signature": "public static boolean equalsExact( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "class_method_signature": "FeatureTypes.equalsExact( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[] )", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[], boolean compareUserMaps )", "modifiers": "static", "return": "boolean", "signature": "boolean equals( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[], boolean compareUserMaps )", "full_signature": "static boolean equals( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[], boolean compareUserMaps )", "class_method_signature": "FeatureTypes.equals( AttributeDescriptor attributesA[], AttributeDescriptor attributesB[], boolean compareUserMaps )", "testcase": false, "constructor": false}, {"identifier": "equalsAncestors", "parameters": "( SimpleFeatureType typeA, SimpleFeatureType typeB )", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsAncestors( SimpleFeatureType typeA, SimpleFeatureType typeB )", "full_signature": "public static boolean equalsAncestors( SimpleFeatureType typeA, SimpleFeatureType typeB )", "class_method_signature": "FeatureTypes.equalsAncestors( SimpleFeatureType typeA, SimpleFeatureType typeB )", "testcase": false, "constructor": false}, {"identifier": "ancestors", "parameters": "( SimpleFeatureType featureType )", "modifiers": "public static", "return": "Set", "signature": "Set ancestors( SimpleFeatureType featureType )", "full_signature": "public static Set ancestors( SimpleFeatureType featureType )", "class_method_signature": "FeatureTypes.ancestors( SimpleFeatureType featureType )", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( AttributeDescriptor a, AttributeDescriptor b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals( AttributeDescriptor a, AttributeDescriptor b)", "full_signature": "public static boolean equals( AttributeDescriptor a, AttributeDescriptor b)", "class_method_signature": "FeatureTypes.equals( AttributeDescriptor a, AttributeDescriptor b)", "testcase": false, "constructor": false}, {"identifier": "equalsExact", "parameters": "( AttributeDescriptor a, AttributeDescriptor b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsExact( AttributeDescriptor a, AttributeDescriptor b)", "full_signature": "public static boolean equalsExact( AttributeDescriptor a, AttributeDescriptor b)", "class_method_signature": "FeatureTypes.equalsExact( AttributeDescriptor a, AttributeDescriptor b)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( AttributeDescriptor a, AttributeDescriptor b, boolean compareUserMaps)", "modifiers": "static", "return": "boolean", "signature": "boolean equals( AttributeDescriptor a, AttributeDescriptor b, boolean compareUserMaps)", "full_signature": "static boolean equals( AttributeDescriptor a, AttributeDescriptor b, boolean compareUserMaps)", "class_method_signature": "FeatureTypes.equals( AttributeDescriptor a, AttributeDescriptor b, boolean compareUserMaps)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Map a, Map b)", "modifiers": "static", "return": "boolean", "signature": "boolean equals(Map a, Map b)", "full_signature": "static boolean equals(Map a, Map b)", "class_method_signature": "FeatureTypes.equals(Map a, Map b)", "testcase": false, "constructor": false}, {"identifier": "equalsId", "parameters": "( SimpleFeatureType typeA, SimpleFeatureType typeB )", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsId( SimpleFeatureType typeA, SimpleFeatureType typeB )", "full_signature": "public static boolean equalsId( SimpleFeatureType typeA, SimpleFeatureType typeB )", "class_method_signature": "FeatureTypes.equalsId( SimpleFeatureType typeA, SimpleFeatureType typeB )", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/feature/FeatureTypes.java"}, "focal_method": {"identifier": "equals", "parameters": "( SimpleFeatureType typeA, SimpleFeatureType typeB )", "modifiers": "public static", "return": "boolean", "body": "public static boolean equals( SimpleFeatureType typeA, SimpleFeatureType typeB ) {\n        return equals(typeA, typeB, false);\n    }", "signature": "boolean equals( SimpleFeatureType typeA, SimpleFeatureType typeB )", "full_signature": "public static boolean equals( SimpleFeatureType typeA, SimpleFeatureType typeB )", "class_method_signature": "FeatureTypes.equals( SimpleFeatureType typeA, SimpleFeatureType typeB )", "testcase": false, "constructor": false, "invocations": ["equals"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}