{"test_class": {"identifier": "ClientSnapshotTest", "superclass": "extends AbstractClientHandleTest<ClientSnapshot>", "interfaces": "", "fields": [{"original_string": "private static final YangInstanceIdentifier PATH = YangInstanceIdentifier.empty();", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "PATH = YangInstanceIdentifier.empty()", "var_name": "PATH"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/ClientSnapshotTest.java"}, "test_case": {"identifier": "testRead", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRead() throws Exception {\n        final ListenableFuture<Optional<NormalizedNode<?, ?>>> exists = getHandle().read(PATH);\n        verify(getDataTreeSnapshot()).readNode(PATH);\n        assertFalse(getWithTimeout(exists).isPresent());\n    }", "signature": "void testRead()", "full_signature": "@Test public void testRead()", "class_method_signature": "ClientSnapshotTest.testRead()", "testcase": true, "constructor": false, "invocations": ["read", "getHandle", "readNode", "verify", "getDataTreeSnapshot", "assertFalse", "isPresent", "getWithTimeout"]}, "focal_class": {"identifier": "ClientSnapshot", "superclass": "extends AbstractClientHandle<AbstractProxyTransaction>", "interfaces": "", "fields": [], "methods": [{"identifier": "ClientSnapshot", "parameters": "(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "modifiers": "", "return": "", "signature": " ClientSnapshot(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "full_signature": "  ClientSnapshot(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "class_method_signature": "ClientSnapshot.ClientSnapshot(final AbstractClientHistory parent, final TransactionIdentifier transactionId)", "testcase": false, "constructor": true}, {"identifier": "exists", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "FluentFuture<Boolean>", "signature": "FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "full_signature": "public FluentFuture<Boolean> exists(final YangInstanceIdentifier path)", "class_method_signature": "ClientSnapshot.exists(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "full_signature": "public FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "class_method_signature": "ClientSnapshot.read(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "createProxy", "parameters": "(final Long shard)", "modifiers": "@Override final", "return": "AbstractProxyTransaction", "signature": "AbstractProxyTransaction createProxy(final Long shard)", "full_signature": "@Override final AbstractProxyTransaction createProxy(final Long shard)", "class_method_signature": "ClientSnapshot.createProxy(final Long shard)", "testcase": false, "constructor": false}, {"identifier": "ensureSnapshotProxy", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "private", "return": "AbstractProxyTransaction", "signature": "AbstractProxyTransaction ensureSnapshotProxy(final YangInstanceIdentifier path)", "full_signature": "private AbstractProxyTransaction ensureSnapshotProxy(final YangInstanceIdentifier path)", "class_method_signature": "ClientSnapshot.ensureSnapshotProxy(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/ClientSnapshot.java"}, "focal_method": {"identifier": "read", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "FluentFuture<Optional<NormalizedNode<?, ?>>>", "body": "public FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path) {\n        return ensureSnapshotProxy(path).read(path);\n    }", "signature": "FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "full_signature": "public FluentFuture<Optional<NormalizedNode<?, ?>>> read(final YangInstanceIdentifier path)", "class_method_signature": "ClientSnapshot.read(final YangInstanceIdentifier path)", "testcase": false, "constructor": false, "invocations": ["read", "ensureSnapshotProxy"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}