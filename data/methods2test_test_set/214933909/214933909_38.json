{"test_class": {"identifier": "TableDaoTest", "superclass": "extends DataPreparer", "interfaces": "", "fields": [{"original_string": "private final static String DATABASE_LOGIC_NAME_MYSQL = \"MySqlSimple\";", "modifier": "private final static", "type": "String", "declarator": "DATABASE_LOGIC_NAME_MYSQL = \"MySqlSimple\"", "var_name": "DATABASE_LOGIC_NAME_MYSQL"}, {"original_string": "private final static String DATABASE_LOGIC_NAME_SQLSVR = \"SqlSvrSimple\";", "modifier": "private final static", "type": "String", "declarator": "DATABASE_LOGIC_NAME_SQLSVR = \"SqlSvrSimple\"", "var_name": "DATABASE_LOGIC_NAME_SQLSVR"}, {"original_string": "private static PersonDefinition p = Person.PERSON;", "modifier": "private static", "type": "PersonDefinition", "declarator": "p = Person.PERSON", "var_name": "p"}, {"original_string": "private final static Integer DELETED = 0;", "modifier": "private final static", "type": "Integer", "declarator": "DELETED = 0", "var_name": "DELETED"}, {"original_string": "private final static Integer ACTIVE = 1;", "modifier": "private final static", "type": "Integer", "declarator": "ACTIVE = 1", "var_name": "ACTIVE"}, {"original_string": "private TableDao<Person> dao;", "modifier": "private", "type": "TableDao<Person>", "declarator": "dao", "var_name": "dao"}, {"original_string": "private boolean allowLogicDeletion;", "modifier": "private", "type": "boolean", "declarator": "allowLogicDeletion", "var_name": "allowLogicDeletion"}, {"original_string": "private LogicDeletionDao<Person> logicDelDao;", "modifier": "private", "type": "LogicDeletionDao<Person>", "declarator": "logicDelDao", "var_name": "logicDelDao"}], "file": "das-client/src/test/java/com/ppdai/das/client/TableDaoTest.java"}, "test_case": {"identifier": "testBatchInsert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBatchInsert() throws Exception {\n        List<Person> pl = new ArrayList<>();\n        for(int k = 0; k < TABLE_MODE;k++) {\n            Person p = new Person();\n            p.setName(\"jerry\");\n            p.setCountryID(k);\n            p.setCityID(k);\n            pl.add(p);\n        }\n        int[] ret = dao.batchInsert(pl);\n        for(int x: ret)\n            assertEquals(batchRet, x);\n        \n        assertEquals(TABLE_MODE, ret.length);\n        \n        Person p = new Person();\n        p.setName(\"jerry\");\n\n        List<Person> plist = dao.queryBySample(p);\n        assertNotNull(plist);\n        assertEquals(TABLE_MODE, plist.size());\n        \n        for(Person p1: plist)\n            assertNotNull(p1.getPeopleID());\n    }", "signature": "void testBatchInsert()", "full_signature": "@Test public void testBatchInsert()", "class_method_signature": "TableDaoTest.testBatchInsert()", "testcase": true, "constructor": false, "invocations": ["setName", "setCountryID", "setCityID", "add", "batchInsert", "assertEquals", "assertEquals", "setName", "queryBySample", "assertNotNull", "assertEquals", "size", "assertNotNull", "getPeopleID"]}, "focal_class": {"identifier": "TableDao", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final DasClient client;", "modifier": "protected final", "type": "DasClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "TableDao", "parameters": "(String logicDbName, Class<T> entityType)", "modifiers": "public", "return": "", "signature": " TableDao(String logicDbName, Class<T> entityType)", "full_signature": "public  TableDao(String logicDbName, Class<T> entityType)", "class_method_signature": "TableDao.TableDao(String logicDbName, Class<T> entityType)", "testcase": false, "constructor": true}, {"identifier": "queryByPk", "parameters": "(T pk, Hints...hints)", "modifiers": "public", "return": "T", "signature": "T queryByPk(T pk, Hints...hints)", "full_signature": "public T queryByPk(T pk, Hints...hints)", "class_method_signature": "TableDao.queryByPk(T pk, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "queryBySample", "parameters": "(T sample, Hints...hints)", "modifiers": "public", "return": "List<T>", "signature": "List<T> queryBySample(T sample, Hints...hints)", "full_signature": "public List<T> queryBySample(T sample, Hints...hints)", "class_method_signature": "TableDao.queryBySample(T sample, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "queryBySample", "parameters": "(T sample, PageRange range, Hints...hints)", "modifiers": "public", "return": "List<T>", "signature": "List<T> queryBySample(T sample, PageRange range, Hints...hints)", "full_signature": "public List<T> queryBySample(T sample, PageRange range, Hints...hints)", "class_method_signature": "TableDao.queryBySample(T sample, PageRange range, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "countBySample", "parameters": "(T sample, Hints...hints)", "modifiers": "public", "return": "long", "signature": "long countBySample(T sample, Hints...hints)", "full_signature": "public long countBySample(T sample, Hints...hints)", "class_method_signature": "TableDao.countBySample(T sample, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(T entity, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int insert(T entity, Hints...hints)", "full_signature": "public int insert(T entity, Hints...hints)", "class_method_signature": "TableDao.insert(T entity, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int insert(List<T> entities, Hints...hints)", "full_signature": "public int insert(List<T> entities, Hints...hints)", "class_method_signature": "TableDao.insert(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "batchInsert", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int[]", "signature": "int[] batchInsert(List<T> entities, Hints...hints)", "full_signature": "public int[] batchInsert(List<T> entities, Hints...hints)", "class_method_signature": "TableDao.batchInsert(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "deleteByPk", "parameters": "(T pk, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int deleteByPk(T pk, Hints...hints)", "full_signature": "public int deleteByPk(T pk, Hints...hints)", "class_method_signature": "TableDao.deleteByPk(T pk, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "deleteBySample", "parameters": "(T sample, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int deleteBySample(T sample, Hints...hints)", "full_signature": "public int deleteBySample(T sample, Hints...hints)", "class_method_signature": "TableDao.deleteBySample(T sample, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "batchDelete", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int[]", "signature": "int[] batchDelete(List<T> entities, Hints...hints)", "full_signature": "public int[] batchDelete(List<T> entities, Hints...hints)", "class_method_signature": "TableDao.batchDelete(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(T entity, Hints...hints)", "modifiers": "public", "return": "int", "signature": "int update(T entity, Hints...hints)", "full_signature": "public int update(T entity, Hints...hints)", "class_method_signature": "TableDao.update(T entity, Hints...hints)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int[]", "signature": "int[] batchUpdate(List<T> entities, Hints...hints)", "full_signature": "public int[] batchUpdate(List<T> entities, Hints...hints)", "class_method_signature": "TableDao.batchUpdate(List<T> entities, Hints...hints)", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/client/TableDao.java"}, "focal_method": {"identifier": "batchInsert", "parameters": "(List<T> entities, Hints...hints)", "modifiers": "public", "return": "int[]", "body": "public int[] batchInsert(List<T> entities, Hints...hints) throws SQLException {\n        return client.batchInsert(entities, hints);\n    }", "signature": "int[] batchInsert(List<T> entities, Hints...hints)", "full_signature": "public int[] batchInsert(List<T> entities, Hints...hints)", "class_method_signature": "TableDao.batchInsert(List<T> entities, Hints...hints)", "testcase": false, "constructor": false, "invocations": ["batchInsert"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}