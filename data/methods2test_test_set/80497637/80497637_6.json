{"test_class": {"identifier": "SwarmScannerTest", "superclass": "extends MercatorIntegrationTest", "interfaces": "", "fields": [{"original_string": "ObjectMapper mapper = new ObjectMapper();", "modifier": "", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "mercator-docker/src/test/java/org/lendingclub/mercator/docker/SwarmScannerTest.java"}, "test_case": {"identifier": "testFlattenTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFlattenTask() throws Exception {\n\t\tString taskJson = \" {\\n\" + \"  \\\"ID\\\" : \\\"kz0xbugh9xnf4bqcxjqc97lo3\\\",\\n\" + \"  \\\"Version\\\" : {\\n\"\n\t\t\t\t+ \"    \\\"Index\\\" : 112\\n\" + \"  },\\n\" + \"  \\\"CreatedAt\\\" : \\\"2017-09-08T21:24:42.408242959Z\\\",\\n\"\n\t\t\t\t+ \"  \\\"UpdatedAt\\\" : \\\"2017-09-09T02:12:26.443758461Z\\\",\\n\" + \"  \\\"Labels\\\" : { },\\n\"\n\t\t\t\t+ \"  \\\"Spec\\\" : {\\n\" + \"    \\\"ContainerSpec\\\" : {\\n\"\n\t\t\t\t+ \"      \\\"Image\\\" : \\\"trident-echo:latest@sha256:8c850603e5b67909da2409003454d91a154b5dacb2d9add580355f8a42ea2ae0\\\",\\n\"\n\t\t\t\t+ \"      \\\"Env\\\" : [ \\\"path=/api/foo\\\", \\\"app=foo\\\" ],\\n\" + \"      \\\"DNSConfig\\\" : { }\\n\" + \"    },\\n\"\n\t\t\t\t+ \"    \\\"Resources\\\" : {\\n\" + \"      \\\"Limits\\\" : { },\\n\" + \"      \\\"Reservations\\\" : { }\\n\"\n\t\t\t\t+ \"    },\\n\" + \"    \\\"Placement\\\" : {\\n\" + \"      \\\"Platforms\\\" : [ {\\n\"\n\t\t\t\t+ \"        \\\"Architecture\\\" : \\\"amd64\\\",\\n\" + \"        \\\"OS\\\" : \\\"linux\\\"\\n\" + \"      } ]\\n\"\n\t\t\t\t+ \"    },\\n\" + \"    \\\"ForceUpdate\\\" : 0\\n\" + \"  },\\n\"\n\t\t\t\t+ \"  \\\"ServiceID\\\" : \\\"sx6r9h4zsyosjqgfx2x66zv7a\\\",\\n\" + \"  \\\"Slot\\\" : 2,\\n\"\n\t\t\t\t+ \"  \\\"NodeID\\\" : \\\"un7e89zvlnb4c2l11yvmsvlio\\\",\\n\" + \"  \\\"Status\\\" : {\\n\"\n\t\t\t\t+ \"    \\\"Timestamp\\\" : \\\"2017-09-09T02:12:26.350558639Z\\\",\\n\" + \"    \\\"State\\\" : \\\"shutdown\\\",\\n\"\n\t\t\t\t+ \"    \\\"Message\\\" : \\\"shutdown\\\",\\n\" + \"    \\\"ContainerStatus\\\" : {\\n\"\n\t\t\t\t+ \"      \\\"ContainerID\\\" : \\\"1812bf07dea79f54c22313d4fe3de263abfc0bfebee9014b09a748208c00aa39\\\",\\n\"\n\t\t\t\t+ \"      \\\"ExitCode\\\" : 143\\n\" + \"    },\\n\" + \"    \\\"PortStatus\\\" : { }\\n\" + \"  },\\n\"\n\t\t\t\t+ \"  \\\"DesiredState\\\" : \\\"shutdown\\\"\\n\" + \"}\";\n\t\tObjectNode n = (ObjectNode) mapper.readTree(taskJson);\n\t\tSwarmScanner scanner = new SwarmScanner(null);\n\t\tscanner.swarmClusterId = \"abcd123\";\n\t\tJsonNode flattened = scanner.flattenTask(n);\n\n\t\tJsonLogger.logInfo(\"foo\", flattened);\n\t\tAssertions.assertThat(flattened.get(\"swarmClusterId\").asText()).isEqualTo(\"abcd123\");\n\t\tAssertions.assertThat(flattened.get(\"taskId\").asText()).isEqualTo(\"kz0xbugh9xnf4bqcxjqc97lo3\");\n\t\tAssertions.assertThat(flattened.get(\"serviceId\").asText()).isEqualTo(\"sx6r9h4zsyosjqgfx2x66zv7a\");\n\t\tAssertions.assertThat(flattened.get(\"swarmNodeId\").asText()).isEqualTo(\"un7e89zvlnb4c2l11yvmsvlio\");\n\t\tAssertions.assertThat(flattened.get(\"state\").asText()).isEqualTo(\"shutdown\");\n\t\tAssertions.assertThat(flattened.get(\"message\").asText()).isEqualTo(\"shutdown\");\n\t\tAssertions.assertThat(flattened.get(\"desiredState\").asText()).isEqualTo(\"shutdown\");\n\t\tAssertions.assertThat(flattened.get(\"containerId\").asText())\n\t\t\t\t.isEqualTo(\"1812bf07dea79f54c22313d4fe3de263abfc0bfebee9014b09a748208c00aa39\");\n\n\t}", "signature": "void testFlattenTask()", "full_signature": "@Test public void testFlattenTask()", "class_method_signature": "SwarmScannerTest.testFlattenTask()", "testcase": true, "constructor": false, "invocations": ["readTree", "flattenTask", "logInfo", "isEqualTo", "assertThat", "asText", "get", "isEqualTo", "assertThat", "asText", "get", "isEqualTo", "assertThat", "asText", "get", "isEqualTo", "assertThat", "asText", "get", "isEqualTo", "assertThat", "asText", "get", "isEqualTo", "assertThat", "asText", "get", "isEqualTo", "assertThat", "asText", "get", "isEqualTo", "assertThat", "asText", "get"]}, "focal_class": {"identifier": "SwarmScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "ObjectMapper mapper = new ObjectMapper();", "modifier": "", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "Logger logger = LoggerFactory.getLogger(SwarmScanner.class);", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SwarmScanner.class)", "var_name": "logger"}, {"original_string": "DockerScanner dockerScanner;", "modifier": "", "type": "DockerScanner", "declarator": "dockerScanner", "var_name": "dockerScanner"}, {"original_string": "String swarmClusterId = null;", "modifier": "", "type": "String", "declarator": "swarmClusterId = null", "var_name": "swarmClusterId"}], "methods": [{"identifier": "SwarmScanner", "parameters": "(DockerScanner ds)", "modifiers": "", "return": "", "signature": " SwarmScanner(DockerScanner ds)", "full_signature": "  SwarmScanner(DockerScanner ds)", "class_method_signature": "SwarmScanner.SwarmScanner(DockerScanner ds)", "testcase": false, "constructor": true}, {"identifier": "getRestClient", "parameters": "()", "modifiers": "public", "return": "DockerRestClient", "signature": "DockerRestClient getRestClient()", "full_signature": "public DockerRestClient getRestClient()", "class_method_signature": "SwarmScanner.getRestClient()", "testcase": false, "constructor": false}, {"identifier": "saveDockerNode", "parameters": "(String swarmClusterId, JsonNode n)", "modifiers": "", "return": "long", "signature": "long saveDockerNode(String swarmClusterId, JsonNode n)", "full_signature": " long saveDockerNode(String swarmClusterId, JsonNode n)", "class_method_signature": "SwarmScanner.saveDockerNode(String swarmClusterId, JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "flattenSwarmNode", "parameters": "(JsonNode n)", "modifiers": "", "return": "JsonNode", "signature": "JsonNode flattenSwarmNode(JsonNode n)", "full_signature": " JsonNode flattenSwarmNode(JsonNode n)", "class_method_signature": "SwarmScanner.flattenSwarmNode(JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "extractWebTarget", "parameters": "(DockerClient c)", "modifiers": "public static", "return": "WebTarget", "signature": "WebTarget extractWebTarget(DockerClient c)", "full_signature": "public static WebTarget extractWebTarget(DockerClient c)", "class_method_signature": "SwarmScanner.extractWebTarget(DockerClient c)", "testcase": false, "constructor": false}, {"identifier": "isUnixDomainScoket", "parameters": "(String jerseyUri)", "modifiers": "protected", "return": "boolean", "signature": "boolean isUnixDomainScoket(String jerseyUri)", "full_signature": "protected boolean isUnixDomainScoket(String jerseyUri)", "class_method_signature": "SwarmScanner.isUnixDomainScoket(String jerseyUri)", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void scan()", "full_signature": "public void scan()", "class_method_signature": "SwarmScanner.scan()", "testcase": false, "constructor": false}, {"identifier": "formatLabelKey", "parameters": "(String key)", "modifiers": "protected", "return": "String", "signature": "String formatLabelKey(String key)", "full_signature": "protected String formatLabelKey(String key)", "class_method_signature": "SwarmScanner.formatLabelKey(String key)", "testcase": false, "constructor": false}, {"identifier": "flattenService", "parameters": "(JsonNode n)", "modifiers": "", "return": "ObjectNode", "signature": "ObjectNode flattenService(JsonNode n)", "full_signature": " ObjectNode flattenService(JsonNode n)", "class_method_signature": "SwarmScanner.flattenService(JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "flattenTask", "parameters": "(JsonNode n)", "modifiers": "protected", "return": "ObjectNode", "signature": "ObjectNode flattenTask(JsonNode n)", "full_signature": "protected ObjectNode flattenTask(JsonNode n)", "class_method_signature": "SwarmScanner.flattenTask(JsonNode n)", "testcase": false, "constructor": false}, {"identifier": "scanServicesForSwarm", "parameters": "(String swarmClusterId)", "modifiers": "public", "return": "void", "signature": "void scanServicesForSwarm(String swarmClusterId)", "full_signature": "public void scanServicesForSwarm(String swarmClusterId)", "class_method_signature": "SwarmScanner.scanServicesForSwarm(String swarmClusterId)", "testcase": false, "constructor": false}, {"identifier": "scanNode", "parameters": "(String nodeId)", "modifiers": "public", "return": "void", "signature": "void scanNode(String nodeId)", "full_signature": "public void scanNode(String nodeId)", "class_method_signature": "SwarmScanner.scanNode(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "scanTask", "parameters": "(String taskId)", "modifiers": "public", "return": "void", "signature": "void scanTask(String taskId)", "full_signature": "public void scanTask(String taskId)", "class_method_signature": "SwarmScanner.scanTask(String taskId)", "testcase": false, "constructor": false}, {"identifier": "deleteTask", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void deleteTask(String id)", "full_signature": "public void deleteTask(String id)", "class_method_signature": "SwarmScanner.deleteTask(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteNode", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void deleteNode(String id)", "full_signature": "public void deleteNode(String id)", "class_method_signature": "SwarmScanner.deleteNode(String id)", "testcase": false, "constructor": false}, {"identifier": "checkNotEmpty", "parameters": "(String val, String msg)", "modifiers": "private", "return": "void", "signature": "void checkNotEmpty(String val, String msg)", "full_signature": "private void checkNotEmpty(String val, String msg)", "class_method_signature": "SwarmScanner.checkNotEmpty(String val, String msg)", "testcase": false, "constructor": false}, {"identifier": "saveTask", "parameters": "(JsonNode it)", "modifiers": "protected", "return": "long", "signature": "long saveTask(JsonNode it)", "full_signature": "protected long saveTask(JsonNode it)", "class_method_signature": "SwarmScanner.saveTask(JsonNode it)", "testcase": false, "constructor": false}, {"identifier": "scanTasksForSwarm", "parameters": "(String swarmClusterId)", "modifiers": "public", "return": "void", "signature": "void scanTasksForSwarm(String swarmClusterId)", "full_signature": "public void scanTasksForSwarm(String swarmClusterId)", "class_method_signature": "SwarmScanner.scanTasksForSwarm(String swarmClusterId)", "testcase": false, "constructor": false}, {"identifier": "getSwarmClusterId", "parameters": "()", "modifiers": "public", "return": "Optional<String>", "signature": "Optional<String> getSwarmClusterId()", "full_signature": "public Optional<String> getSwarmClusterId()", "class_method_signature": "SwarmScanner.getSwarmClusterId()", "testcase": false, "constructor": false}, {"identifier": "scanService", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void scanService(String id)", "full_signature": "public void scanService(String id)", "class_method_signature": "SwarmScanner.scanService(String id)", "testcase": false, "constructor": false}, {"identifier": "deleteService", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void deleteService(String id)", "full_signature": "public void deleteService(String id)", "class_method_signature": "SwarmScanner.deleteService(String id)", "testcase": false, "constructor": false}, {"identifier": "removeDockerLabels", "parameters": "(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "modifiers": "protected", "return": "void", "signature": "void removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "full_signature": "protected void removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "class_method_signature": "SwarmScanner.removeDockerLabels(String neo4jLabel, String idName, String idVal, JsonNode intended,\n\t\t\tJsonNode actual)", "testcase": false, "constructor": false}, {"identifier": "isNotFound", "parameters": "(Throwable e)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNotFound(Throwable e)", "full_signature": "protected boolean isNotFound(Throwable e)", "class_method_signature": "SwarmScanner.isNotFound(Throwable e)", "testcase": false, "constructor": false}], "file": "mercator-docker/src/main/java/org/lendingclub/mercator/docker/SwarmScanner.java"}, "focal_method": {"identifier": "flattenTask", "parameters": "(JsonNode n)", "modifiers": "protected", "return": "ObjectNode", "body": "protected ObjectNode flattenTask(JsonNode n) {\n\n\t\tObjectNode out = new ObjectMapper().createObjectNode();\n\t\tout.put(\"swarmClusterId\", getSwarmClusterId().get());\n\t\tout.put(\"taskId\", n.path(\"ID\").asText());\n\t\tout.put(\"versionIndex\", n.path(\"Version\").path(\"Index\").asText());\n\t\tout.put(\"createdAt\", n.path(\"CreatedAt\").asText());\n\t\tout.put(\"updatedAt\", n.path(\"UpdatedAt\").asText());\n\t\tn.path(\"Labels\").fields().forEachRemaining(it -> {\n\t\t\tout.put(formatLabelKey(it.getKey()), it.getValue().asText());\n\t\t});\n\t\tn.path(\"Spec\").path(\"ContainerSepc\");\n\t\tout.put(\"serviceId\", n.path(\"ServiceID\").asText());\n\n\t\tout.put(\"swarmNodeId\", n.path(\"NodeID\").asText());\n\t\tout.put(\"state\", n.path(\"Status\").path(\"State\").asText());\n\t\tout.put(\"message\", n.path(\"Status\").path(\"Message\").asText());\n\t\tout.put(\"containerId\", n.path(\"Status\").path(\"ContainerStatus\").path(\"ContainerID\").asText());\n\t\tout.put(\"desiredState\", n.path(\"DesiredState\").asText());\n\n\t\tn.path(\"Status\").path(\"PortStatus\").path(\"Ports\").forEach(it -> {\n\n\t\t\tString mode = it.path(\"PublishMode\").asText();\n\t\t\tString protocol = it.path(\"Protocol\").asText();\n\t\t\tif (mode.equals(\"host\") && protocol.equals(\"tcp\")) {\n\n\t\t\t\tint targetPort = it.path(\"TargetPort\").asInt();\n\t\t\t\tint publishedPort = it.path(\"PublishedPort\").asInt();\n\t\t\t\tString key = String.format(\"hostTcpPortMap_%d\", targetPort);\n\t\t\t\tout.put(key, publishedPort);\n\t\t\t}\n\n\t\t});\n\t\t;\n\n\t\treturn out;\n\t}", "signature": "ObjectNode flattenTask(JsonNode n)", "full_signature": "protected ObjectNode flattenTask(JsonNode n)", "class_method_signature": "SwarmScanner.flattenTask(JsonNode n)", "testcase": false, "constructor": false, "invocations": ["createObjectNode", "put", "get", "getSwarmClusterId", "put", "asText", "path", "put", "asText", "path", "path", "put", "asText", "path", "put", "asText", "path", "forEachRemaining", "fields", "path", "put", "formatLabelKey", "getKey", "asText", "getValue", "path", "path", "put", "asText", "path", "put", "asText", "path", "put", "asText", "path", "path", "put", "asText", "path", "path", "put", "asText", "path", "path", "path", "put", "asText", "path", "forEach", "path", "path", "path", "asText", "path", "asText", "path", "equals", "equals", "asInt", "path", "asInt", "path", "format", "put"]}, "repository": {"repo_id": 80497637, "url": "https://github.com/LendingClub/mercator", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 64, "size": 646, "license": "licensed"}}