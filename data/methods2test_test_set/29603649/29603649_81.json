{"test_class": {"identifier": "LuceneIndexEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FOLDER_PATH = \"src/test/resources/test-folder1\";", "modifier": "private static final", "type": "String", "declarator": "FOLDER_PATH = \"src/test/resources/test-folder1\"", "var_name": "FOLDER_PATH"}, {"original_string": "private File docDir;", "modifier": "private", "type": "File", "declarator": "docDir", "var_name": "docDir"}, {"original_string": "@Mock\n    private FolderIndexer folderIndexer;", "modifier": "@Mock\n    private", "type": "FolderIndexer", "declarator": "folderIndexer", "var_name": "folderIndexer"}, {"original_string": "@Mock\n    private FileFactory fileFactory;", "modifier": "@Mock\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private File mockFolder;", "modifier": "@Mock\n    private", "type": "File", "declarator": "mockFolder", "var_name": "mockFolder"}, {"original_string": "@Mock\n    private File file;", "modifier": "@Mock\n    private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "@InjectMocks\n    private LuceneIndexEngine underTest;", "modifier": "@InjectMocks\n    private", "type": "LuceneIndexEngine", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-lucene/src/test/java/com/epam/wilma/message/search/lucene/index/LuceneIndexEngineTest.java"}, "test_case": {"identifier": "testCreateIndexWhenDocDirDoesNotExistShouldLogError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateIndexWhenDocDirDoesNotExistShouldLogError() {\n        //GIVEN\n        given(fileFactory.createFile(FOLDER_PATH)).willReturn(mockFolder);\n        //WHEN\n        underTest.createIndex(FOLDER_PATH);\n        //THEN\n        verify(logger).error(Mockito.anyString());\n    }", "signature": "void testCreateIndexWhenDocDirDoesNotExistShouldLogError()", "full_signature": "@Test public void testCreateIndexWhenDocDirDoesNotExistShouldLogError()", "class_method_signature": "LuceneIndexEngineTest.testCreateIndexWhenDocDirDoesNotExistShouldLogError()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "createFile", "createIndex", "error", "verify", "anyString"]}, "focal_class": {"identifier": "LuceneIndexEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(LuceneIndexEngine.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LuceneIndexEngine.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private FolderIndexer folderIndexer;", "modifier": "@Autowired\n    private", "type": "FolderIndexer", "declarator": "folderIndexer", "var_name": "folderIndexer"}, {"original_string": "@Autowired\n    private FileFactory fileFactory;", "modifier": "@Autowired\n    private", "type": "FileFactory", "declarator": "fileFactory", "var_name": "fileFactory"}], "methods": [{"identifier": "createIndex", "parameters": "(final String docsPath)", "modifiers": "public", "return": "void", "signature": "void createIndex(final String docsPath)", "full_signature": "public void createIndex(final String docsPath)", "class_method_signature": "LuceneIndexEngine.createIndex(final String docsPath)", "testcase": false, "constructor": false}, {"identifier": "addFileToIndex", "parameters": "(final String fileName)", "modifiers": "public", "return": "void", "signature": "void addFileToIndex(final String fileName)", "full_signature": "public void addFileToIndex(final String fileName)", "class_method_signature": "LuceneIndexEngine.addFileToIndex(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "indexFolder", "parameters": "(final File docDir)", "modifiers": "private", "return": "void", "signature": "void indexFolder(final File docDir)", "full_signature": "private void indexFolder(final File docDir)", "class_method_signature": "LuceneIndexEngine.indexFolder(final File docDir)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-lucene/src/main/java/com/epam/wilma/message/search/lucene/index/LuceneIndexEngine.java"}, "focal_method": {"identifier": "createIndex", "parameters": "(final String docsPath)", "modifiers": "public", "return": "void", "body": "public void createIndex(final String docsPath) {\n        final File docDir = fileFactory.createFile(docsPath);\n        if (!docDir.exists() || !docDir.canRead()) {\n            logger.error(\"Document directory '\" + docDir.getAbsolutePath() + \"' does not exist or is not readable, please check the path\");\n        } else {\n            indexFolder(docDir);\n        }\n    }", "signature": "void createIndex(final String docsPath)", "full_signature": "public void createIndex(final String docsPath)", "class_method_signature": "LuceneIndexEngine.createIndex(final String docsPath)", "testcase": false, "constructor": false, "invocations": ["createFile", "exists", "canRead", "error", "getAbsolutePath", "indexFolder"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}