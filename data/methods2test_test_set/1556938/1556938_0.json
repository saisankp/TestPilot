{"test_class": {"identifier": "ErectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public Erector erector;", "modifier": "public", "type": "Erector", "declarator": "erector", "var_name": "erector"}, {"original_string": "public DefaultField defaultField;", "modifier": "public", "type": "DefaultField", "declarator": "defaultField", "var_name": "defaultField"}, {"original_string": "public CarBlueprint carBlueprint = new CarBlueprint();", "modifier": "public", "type": "CarBlueprint", "declarator": "carBlueprint = new CarBlueprint()", "var_name": "carBlueprint"}], "file": "core/src/test/java/com/tobedevoured/modelcitizen/ErectorTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() throws BlueprintTemplateException {\n        Car car = new Car();\n        car.setMileage(new Float(123.456));\n        Float val = (Float) erector.getTemplate().get(car, \"mileage\");\n        assertEquals(new Float(123.456), val);\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "ErectorTest.testGet()", "testcase": true, "constructor": false, "invocations": ["setMileage", "get", "getTemplate", "assertEquals"]}, "focal_class": {"identifier": "Erector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<Command> EMPTY_SET = new HashSet<Command>();", "modifier": "private static final", "type": "Set<Command>", "declarator": "EMPTY_SET = new HashSet<Command>()", "var_name": "EMPTY_SET"}, {"original_string": "private Object blueprint;", "modifier": "private", "type": "Object", "declarator": "blueprint", "var_name": "blueprint"}, {"original_string": "private Map<String,ModelField> modelFields;", "modifier": "private", "type": "Map<String,ModelField>", "declarator": "modelFields", "var_name": "modelFields"}, {"original_string": "private Map<ModelField,Set<Command>> modelFieldCommands = new HashMap<ModelField,Set<Command>>();", "modifier": "private", "type": "Map<ModelField,Set<Command>>", "declarator": "modelFieldCommands = new HashMap<ModelField,Set<Command>>()", "var_name": "modelFieldCommands"}, {"original_string": "private BlueprintTemplate blueprintTemplate;", "modifier": "private", "type": "BlueprintTemplate", "declarator": "blueprintTemplate", "var_name": "blueprintTemplate"}, {"original_string": "private Class target;", "modifier": "private", "type": "Class", "declarator": "target", "var_name": "target"}, {"original_string": "private Constructable newInstance;", "modifier": "private", "type": "Constructable", "declarator": "newInstance", "var_name": "newInstance"}, {"original_string": "private Object reference;", "modifier": "private", "type": "Object", "declarator": "reference", "var_name": "reference"}, {"original_string": "private Map<String, List<Callback>> callbacks;", "modifier": "private", "type": "Map<String, List<Callback>>", "declarator": "callbacks", "var_name": "callbacks"}], "methods": [{"identifier": "Erector", "parameters": "()", "modifiers": "public", "return": "", "signature": " Erector()", "full_signature": "public  Erector()", "class_method_signature": "Erector.Erector()", "testcase": false, "constructor": true}, {"identifier": "createNewInstance", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object createNewInstance()", "full_signature": "public Object createNewInstance()", "class_method_signature": "Erector.createNewInstance()", "testcase": false, "constructor": false}, {"identifier": "addCommands", "parameters": "(ModelField modelField, Set<Command> commands)", "modifiers": "public", "return": "void", "signature": "void addCommands(ModelField modelField, Set<Command> commands)", "full_signature": "public void addCommands(ModelField modelField, Set<Command> commands)", "class_method_signature": "Erector.addCommands(ModelField modelField, Set<Command> commands)", "testcase": false, "constructor": false}, {"identifier": "addCommand", "parameters": "( ModelField modelField, Command command )", "modifiers": "public", "return": "void", "signature": "void addCommand( ModelField modelField, Command command )", "full_signature": "public void addCommand( ModelField modelField, Command command )", "class_method_signature": "Erector.addCommand( ModelField modelField, Command command )", "testcase": false, "constructor": false}, {"identifier": "getCommands", "parameters": "( ModelField modelField )", "modifiers": "public", "return": "Set<Command>", "signature": "Set<Command> getCommands( ModelField modelField )", "full_signature": "public Set<Command> getCommands( ModelField modelField )", "class_method_signature": "Erector.getCommands( ModelField modelField )", "testcase": false, "constructor": false}, {"identifier": "clearCommands", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearCommands()", "full_signature": "public void clearCommands()", "class_method_signature": "Erector.clearCommands()", "testcase": false, "constructor": false}, {"identifier": "getBlueprint", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getBlueprint()", "full_signature": "public Object getBlueprint()", "class_method_signature": "Erector.getBlueprint()", "testcase": false, "constructor": false}, {"identifier": "setBlueprint", "parameters": "(Object blueprint)", "modifiers": "public", "return": "void", "signature": "void setBlueprint(Object blueprint)", "full_signature": "public void setBlueprint(Object blueprint)", "class_method_signature": "Erector.setBlueprint(Object blueprint)", "testcase": false, "constructor": false}, {"identifier": "getModelFields", "parameters": "()", "modifiers": "public", "return": "Collection<ModelField>", "signature": "Collection<ModelField> getModelFields()", "full_signature": "public Collection<ModelField> getModelFields()", "class_method_signature": "Erector.getModelFields()", "testcase": false, "constructor": false}, {"identifier": "getModelField", "parameters": "(String name)", "modifiers": "public", "return": "ModelField", "signature": "ModelField getModelField(String name)", "full_signature": "public ModelField getModelField(String name)", "class_method_signature": "Erector.getModelField(String name)", "testcase": false, "constructor": false}, {"identifier": "setModelFields", "parameters": "(Collection<ModelField> modelFields)", "modifiers": "public", "return": "void", "signature": "void setModelFields(Collection<ModelField> modelFields)", "full_signature": "public void setModelFields(Collection<ModelField> modelFields)", "class_method_signature": "Erector.setModelFields(Collection<ModelField> modelFields)", "testcase": false, "constructor": false}, {"identifier": "addModelField", "parameters": "(ModelField modelField)", "modifiers": "public", "return": "void", "signature": "void addModelField(ModelField modelField)", "full_signature": "public void addModelField(ModelField modelField)", "class_method_signature": "Erector.addModelField(ModelField modelField)", "testcase": false, "constructor": false}, {"identifier": "getTemplate", "parameters": "()", "modifiers": "public", "return": "BlueprintTemplate", "signature": "BlueprintTemplate getTemplate()", "full_signature": "public BlueprintTemplate getTemplate()", "class_method_signature": "Erector.getTemplate()", "testcase": false, "constructor": false}, {"identifier": "setTemplate", "parameters": "(BlueprintTemplate blueprintTemplate)", "modifiers": "public", "return": "void", "signature": "void setTemplate(BlueprintTemplate blueprintTemplate)", "full_signature": "public void setTemplate(BlueprintTemplate blueprintTemplate)", "class_method_signature": "Erector.setTemplate(BlueprintTemplate blueprintTemplate)", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "public", "return": "Class", "signature": "Class getTarget()", "full_signature": "public Class getTarget()", "class_method_signature": "Erector.getTarget()", "testcase": false, "constructor": false}, {"identifier": "setTarget", "parameters": "(Class target)", "modifiers": "public", "return": "void", "signature": "void setTarget(Class target)", "full_signature": "public void setTarget(Class target)", "class_method_signature": "Erector.setTarget(Class target)", "testcase": false, "constructor": false}, {"identifier": "getReference", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getReference()", "full_signature": "public Object getReference()", "class_method_signature": "Erector.getReference()", "testcase": false, "constructor": false}, {"identifier": "setReference", "parameters": "(Object reference)", "modifiers": "public", "return": "void", "signature": "void setReference(Object reference)", "full_signature": "public void setReference(Object reference)", "class_method_signature": "Erector.setReference(Object reference)", "testcase": false, "constructor": false}, {"identifier": "getNewInstance", "parameters": "()", "modifiers": "public", "return": "Constructable", "signature": "Constructable getNewInstance()", "full_signature": "public Constructable getNewInstance()", "class_method_signature": "Erector.getNewInstance()", "testcase": false, "constructor": false}, {"identifier": "setNewInstance", "parameters": "(Constructable newInstance)", "modifiers": "public", "return": "void", "signature": "void setNewInstance(Constructable newInstance)", "full_signature": "public void setNewInstance(Constructable newInstance)", "class_method_signature": "Erector.setNewInstance(Constructable newInstance)", "testcase": false, "constructor": false}, {"identifier": "setCallbacks", "parameters": "(String type, List<Callback> callbacks)", "modifiers": "public", "return": "void", "signature": "void setCallbacks(String type, List<Callback> callbacks)", "full_signature": "public void setCallbacks(String type, List<Callback> callbacks)", "class_method_signature": "Erector.setCallbacks(String type, List<Callback> callbacks)", "testcase": false, "constructor": false}, {"identifier": "getCallbacks", "parameters": "(String type)", "modifiers": "public", "return": "List<Callback>", "signature": "List<Callback> getCallbacks(String type)", "full_signature": "public List<Callback> getCallbacks(String type)", "class_method_signature": "Erector.getCallbacks(String type)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Erector.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tobedevoured/modelcitizen/Erector.java"}, "focal_method": {"identifier": "getTemplate", "parameters": "()", "modifiers": "public", "return": "BlueprintTemplate", "body": "public BlueprintTemplate getTemplate() {\n\t\treturn blueprintTemplate;\n\t}", "signature": "BlueprintTemplate getTemplate()", "full_signature": "public BlueprintTemplate getTemplate()", "class_method_signature": "Erector.getTemplate()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1556938, "url": "https://github.com/mguymon/model-citizen", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 85, "size": 1653, "license": "licensed"}}