{"test_class": {"identifier": "SingleInputSemanticPropertiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/common/operators/SingleInputSemanticPropertiesTest.java"}, "test_case": {"identifier": "testAllForwardedSingleInputSemPropsInvalidIndex1", "parameters": "()", "modifiers": "@Test(expected = IndexOutOfBoundsException.class) public", "return": "void", "body": "@Test(expected = IndexOutOfBoundsException.class)\n\tpublic void testAllForwardedSingleInputSemPropsInvalidIndex1() {\n\n\t\tSingleInputSemanticProperties sp = new SingleInputSemanticProperties.AllFieldsForwardedProperties();\n\t\tsp.getForwardingSourceField(1, 0);\n\t}", "signature": "void testAllForwardedSingleInputSemPropsInvalidIndex1()", "full_signature": "@Test(expected = IndexOutOfBoundsException.class) public void testAllForwardedSingleInputSemPropsInvalidIndex1()", "class_method_signature": "SingleInputSemanticPropertiesTest.testAllForwardedSingleInputSemPropsInvalidIndex1()", "testcase": true, "constructor": false, "invocations": ["getForwardingSourceField"]}, "focal_class": {"identifier": "SingleInputSemanticProperties", "superclass": "", "interfaces": "implements SemanticProperties", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private Map<Integer,FieldSet> fieldMapping;", "modifier": "private", "type": "Map<Integer,FieldSet>", "declarator": "fieldMapping", "var_name": "fieldMapping"}, {"original_string": "private FieldSet readFields;", "modifier": "private", "type": "FieldSet", "declarator": "readFields", "var_name": "readFields"}], "methods": [{"identifier": "SingleInputSemanticProperties", "parameters": "()", "modifiers": "public", "return": "", "signature": " SingleInputSemanticProperties()", "full_signature": "public  SingleInputSemanticProperties()", "class_method_signature": "SingleInputSemanticProperties.SingleInputSemanticProperties()", "testcase": false, "constructor": true}, {"identifier": "getForwardingTargetFields", "parameters": "(int input, int sourceField)", "modifiers": "@Override public", "return": "FieldSet", "signature": "FieldSet getForwardingTargetFields(int input, int sourceField)", "full_signature": "@Override public FieldSet getForwardingTargetFields(int input, int sourceField)", "class_method_signature": "SingleInputSemanticProperties.getForwardingTargetFields(int input, int sourceField)", "testcase": false, "constructor": false}, {"identifier": "getForwardingSourceField", "parameters": "(int input, int targetField)", "modifiers": "@Override public", "return": "int", "signature": "int getForwardingSourceField(int input, int targetField)", "full_signature": "@Override public int getForwardingSourceField(int input, int targetField)", "class_method_signature": "SingleInputSemanticProperties.getForwardingSourceField(int input, int targetField)", "testcase": false, "constructor": false}, {"identifier": "getReadFields", "parameters": "(int input)", "modifiers": "@Override public", "return": "FieldSet", "signature": "FieldSet getReadFields(int input)", "full_signature": "@Override public FieldSet getReadFields(int input)", "class_method_signature": "SingleInputSemanticProperties.getReadFields(int input)", "testcase": false, "constructor": false}, {"identifier": "addForwardedField", "parameters": "(int sourceField, int targetField)", "modifiers": "public", "return": "void", "signature": "void addForwardedField(int sourceField, int targetField)", "full_signature": "public void addForwardedField(int sourceField, int targetField)", "class_method_signature": "SingleInputSemanticProperties.addForwardedField(int sourceField, int targetField)", "testcase": false, "constructor": false}, {"identifier": "isTargetFieldPresent", "parameters": "(int targetField)", "modifiers": "private", "return": "boolean", "signature": "boolean isTargetFieldPresent(int targetField)", "full_signature": "private boolean isTargetFieldPresent(int targetField)", "class_method_signature": "SingleInputSemanticProperties.isTargetFieldPresent(int targetField)", "testcase": false, "constructor": false}, {"identifier": "addReadFields", "parameters": "(FieldSet readFields)", "modifiers": "public", "return": "void", "signature": "void addReadFields(FieldSet readFields)", "full_signature": "public void addReadFields(FieldSet readFields)", "class_method_signature": "SingleInputSemanticProperties.addReadFields(FieldSet readFields)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SingleInputSemanticProperties.toString()", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/common/operators/SingleInputSemanticProperties.java"}, "focal_method": {"identifier": "getForwardingSourceField", "parameters": "(int input, int targetField)", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int getForwardingSourceField(int input, int targetField) {\n\t\tif (input != 0) {\n\t\t\tthrow new IndexOutOfBoundsException();\n\t\t}\n\n\t\tfor (Map.Entry<Integer, FieldSet> e : fieldMapping.entrySet()) {\n\t\t\tif (e.getValue().contains(targetField)) {\n\t\t\t\treturn e.getKey();\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}", "signature": "int getForwardingSourceField(int input, int targetField)", "full_signature": "@Override public int getForwardingSourceField(int input, int targetField)", "class_method_signature": "SingleInputSemanticProperties.getForwardingSourceField(int input, int targetField)", "testcase": false, "constructor": false, "invocations": ["entrySet", "contains", "getValue", "getKey"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}