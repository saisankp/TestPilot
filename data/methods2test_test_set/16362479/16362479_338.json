{"test_class": {"identifier": "ClientTransactionCommitCohortTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PERSISTENCE_ID = \"per-1\";", "modifier": "private static final", "type": "String", "declarator": "PERSISTENCE_ID = \"per-1\"", "var_name": "PERSISTENCE_ID"}, {"original_string": "private static final int TRANSACTIONS = 3;", "modifier": "private static final", "type": "int", "declarator": "TRANSACTIONS = 3", "var_name": "TRANSACTIONS"}, {"original_string": "@Mock\n    private AbstractClientHistory history;", "modifier": "@Mock\n    private", "type": "AbstractClientHistory", "declarator": "history", "var_name": "history"}, {"original_string": "private ActorSystem system;", "modifier": "private", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "private List<TransactionTester<RemoteProxyTransaction>> transactions;", "modifier": "private", "type": "List<TransactionTester<RemoteProxyTransaction>>", "declarator": "transactions", "var_name": "transactions"}, {"original_string": "private ClientTransactionCommitCohort cohort;", "modifier": "private", "type": "ClientTransactionCommitCohort", "declarator": "cohort", "var_name": "cohort"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/databroker/actors/dds/ClientTransactionCommitCohortTest.java"}, "test_case": {"identifier": "testCanCommit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCanCommit() throws Exception {\n        testOpSuccess(ClientTransactionCommitCohort::canCommit, this::expectCanCommit,\n                this::replyCanCommitSuccess, Boolean.TRUE);\n    }", "signature": "void testCanCommit()", "full_signature": "@Test public void testCanCommit()", "class_method_signature": "ClientTransactionCommitCohortTest.testCanCommit()", "testcase": true, "constructor": false, "invocations": ["testOpSuccess"]}, "focal_class": {"identifier": "ClientTransactionCommitCohort", "superclass": "extends AbstractTransactionCommitCohort", "interfaces": "", "fields": [{"original_string": "private final Collection<AbstractProxyTransaction> proxies;", "modifier": "private final", "type": "Collection<AbstractProxyTransaction>", "declarator": "proxies", "var_name": "proxies"}], "methods": [{"identifier": "ClientTransactionCommitCohort", "parameters": "(final AbstractClientHistory parent, final TransactionIdentifier txId,\n            final Collection<AbstractProxyTransaction> proxies)", "modifiers": "", "return": "", "signature": " ClientTransactionCommitCohort(final AbstractClientHistory parent, final TransactionIdentifier txId,\n            final Collection<AbstractProxyTransaction> proxies)", "full_signature": "  ClientTransactionCommitCohort(final AbstractClientHistory parent, final TransactionIdentifier txId,\n            final Collection<AbstractProxyTransaction> proxies)", "class_method_signature": "ClientTransactionCommitCohort.ClientTransactionCommitCohort(final AbstractClientHistory parent, final TransactionIdentifier txId,\n            final Collection<AbstractProxyTransaction> proxies)", "testcase": false, "constructor": true}, {"identifier": "canCommit", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Boolean>", "signature": "ListenableFuture<Boolean> canCommit()", "full_signature": "@Override public ListenableFuture<Boolean> canCommit()", "class_method_signature": "ClientTransactionCommitCohort.canCommit()", "testcase": false, "constructor": false}, {"identifier": "addComplete", "parameters": "(final ListenableFuture<Void> future)", "modifiers": "private", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> addComplete(final ListenableFuture<Void> future)", "full_signature": "private ListenableFuture<Void> addComplete(final ListenableFuture<Void> future)", "class_method_signature": "ClientTransactionCommitCohort.addComplete(final ListenableFuture<Void> future)", "testcase": false, "constructor": false}, {"identifier": "preCommit", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> preCommit()", "full_signature": "@Override public ListenableFuture<Void> preCommit()", "class_method_signature": "ClientTransactionCommitCohort.preCommit()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> commit()", "full_signature": "@Override public ListenableFuture<Void> commit()", "class_method_signature": "ClientTransactionCommitCohort.commit()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> abort()", "full_signature": "@Override public ListenableFuture<Void> abort()", "class_method_signature": "ClientTransactionCommitCohort.abort()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/databroker/actors/dds/ClientTransactionCommitCohort.java"}, "focal_method": {"identifier": "canCommit", "parameters": "()", "modifiers": "@Override public", "return": "ListenableFuture<Boolean>", "body": "@Override\n    public ListenableFuture<Boolean> canCommit() {\n        /*\n         * Issue the request to commit for all participants. We will track the results and report them.\n         */\n        final VotingFuture<Boolean> ret = new VotingFuture<>(Boolean.TRUE, proxies.size());\n        for (AbstractProxyTransaction proxy : proxies) {\n            proxy.canCommit(ret);\n        }\n\n        return ret;\n    }", "signature": "ListenableFuture<Boolean> canCommit()", "full_signature": "@Override public ListenableFuture<Boolean> canCommit()", "class_method_signature": "ClientTransactionCommitCohort.canCommit()", "testcase": false, "constructor": false, "invocations": ["size", "canCommit"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}