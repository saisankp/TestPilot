{"test_class": {"identifier": "ConstraintTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/constraints/ConstraintTest.java"}, "test_case": {"identifier": "testCanProgressExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCanProgressExists() {\n    List<Result> resList = new ArrayList<Result>();\n    for (char c = 'a'; c <= 'z'; c++) {\n      List<CKeyValue> ckv = new ArrayList<CKeyValue>();\n      for (int i = 1; i < 10; i++) {\n        for (char C = 'A'; C <= 'Z'; C++) {\n          ckv.add(new CKeyValue(Bytes.toBytes(String.format(\"%c\", c)), Bytes\n              .toBytes(String.format(\"%d\", i)), Bytes.toBytes(String.format(\n              \"%c\", C))));\n        }\n      }\n      resList.add(new Result(ckv));\n    }\n    SeekingCurrentIterator ci = new DecoratingCurrentIterator(\n        resList.iterator());\n    Assert.assertTrue(ExposingConstraint.progressUntil(Bytes.toBytes(\"c\"), ci));\n  }", "signature": "void testCanProgressExists()", "full_signature": "@Test public void testCanProgressExists()", "class_method_signature": "ConstraintTest.testCanProgressExists()", "testcase": true, "constructor": false, "invocations": ["add", "toBytes", "format", "toBytes", "format", "toBytes", "format", "add", "iterator", "assertTrue", "progressUntil", "toBytes"]}, "focal_class": {"identifier": "Constraint", "superclass": "", "interfaces": "implements Writable", "fields": [{"original_string": "private static final byte[] EMPTY_START_ROW = new byte[0];", "modifier": "private static final", "type": "byte[]", "declarator": "EMPTY_START_ROW = new byte[0]", "var_name": "EMPTY_START_ROW"}], "methods": [{"identifier": "getResultIterator", "parameters": "()", "modifiers": "public abstract", "return": "SeekingCurrentIterator", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "public abstract SeekingCurrentIterator getResultIterator()", "class_method_signature": "Constraint.getResultIterator()", "testcase": false, "constructor": false}, {"identifier": "progressUntil", "parameters": "(byte[] key,\n      SeekingCurrentIterator resultIterator)", "modifiers": "protected static", "return": "boolean", "signature": "boolean progressUntil(byte[] key,\n      SeekingCurrentIterator resultIterator)", "full_signature": "protected static boolean progressUntil(byte[] key,\n      SeekingCurrentIterator resultIterator)", "class_method_signature": "Constraint.progressUntil(byte[] key,\n      SeekingCurrentIterator resultIterator)", "testcase": false, "constructor": false}, {"identifier": "writeToTable", "parameters": "(TableAdapter outputTable)", "modifiers": "public", "return": "void", "signature": "void writeToTable(TableAdapter outputTable)", "full_signature": "public void writeToTable(TableAdapter outputTable)", "class_method_signature": "Constraint.writeToTable(TableAdapter outputTable)", "testcase": false, "constructor": false}, {"identifier": "writeToTable", "parameters": "(TableAdapter outputTable, Handler filter)", "modifiers": "public", "return": "void", "signature": "void writeToTable(TableAdapter outputTable, Handler filter)", "full_signature": "public void writeToTable(TableAdapter outputTable, Handler filter)", "class_method_signature": "Constraint.writeToTable(TableAdapter outputTable, Handler filter)", "testcase": false, "constructor": false}, {"identifier": "readFromStream", "parameters": "(DataInput in)", "modifiers": "public static", "return": "Constraint", "signature": "Constraint readFromStream(DataInput in)", "full_signature": "public static Constraint readFromStream(DataInput in)", "class_method_signature": "Constraint.readFromStream(DataInput in)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Constraint constraint, DataOutput out)", "modifiers": "public static", "return": "void", "signature": "void write(Constraint constraint, DataOutput out)", "full_signature": "public static void write(Constraint constraint, DataOutput out)", "class_method_signature": "Constraint.write(Constraint constraint, DataOutput out)", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/constraints/Constraint.java"}, "focal_method": {"identifier": "progressUntil", "parameters": "(byte[] key,\n      SeekingCurrentIterator resultIterator)", "modifiers": "protected static", "return": "boolean", "body": "protected static boolean progressUntil(byte[] key,\n      SeekingCurrentIterator resultIterator) {\n    if (!resultIterator.isMarkedDoneWith()) {\n      // load up the current result from the iterator\n      Result current = resultIterator.current();\n      byte[] currentKey = current == null ? EMPTY_START_ROW : current\n          .getRecordId();\n\n      int comparison = Bytes.compareTo(currentKey, key);\n      // first check if we're already there.\n      if (comparison == 0) {\n        return true;\n      } else if (comparison < 0)\n      // if not and we're less, then seek and check again\n      {\n        resultIterator.seek(key);\n        Result seeked = resultIterator.current();\n        // if we went to the end, we now get a null\n        if (seeked == null) {\n          return false;\n        }\n        // if the current key is greater, we overshot\n        else if ((comparison = Bytes.compareTo(seeked.getRecordId(), key)) > 0) {\n          return false;\n        }\n        // if its equal we're good (we assume seek works)\n        else {\n          assert (comparison == 0);\n          return true;\n        }\n      } else\n      // otherwise we've overshot it and its not here.\n      {\n        return false;\n      }\n    }\n\n    return false;\n  }", "signature": "boolean progressUntil(byte[] key,\n      SeekingCurrentIterator resultIterator)", "full_signature": "protected static boolean progressUntil(byte[] key,\n      SeekingCurrentIterator resultIterator)", "class_method_signature": "Constraint.progressUntil(byte[] key,\n      SeekingCurrentIterator resultIterator)", "testcase": false, "constructor": false, "invocations": ["isMarkedDoneWith", "current", "getRecordId", "compareTo", "seek", "current", "compareTo", "getRecordId"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}