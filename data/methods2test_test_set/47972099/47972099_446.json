{"test_class": {"identifier": "SpoutCollectorTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "flink-contrib/flink-storm/src/test/java/org/apache/flink/storm/wrappers/SpoutCollectorTest.java"}, "test_case": {"identifier": "testSpoutStormCollector", "parameters": "()", "modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @Test public", "return": "void", "body": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Test\n\tpublic void testSpoutStormCollector() throws InstantiationException, IllegalAccessException {\n\t\tfor (int numberOfAttributes = -1; numberOfAttributes < 26; ++numberOfAttributes) {\n\t\t\tfinal SourceContext flinkCollector = mock(SourceContext.class);\n\t\t\tTuple flinkTuple = null;\n\t\t\tfinal Values tuple = new Values();\n\n\t\t\tSpoutCollector<?> collector;\n\n\t\t\tfinal String streamId = \"streamId\";\n\t\t\tHashMap<String, Integer> attributes = new HashMap<String, Integer>();\n\t\t\tattributes.put(streamId, numberOfAttributes);\n\n\t\t\tif (numberOfAttributes == -1) {\n\t\t\t\tcollector = new SpoutCollector(attributes, -1, flinkCollector);\n\t\t\t\ttuple.add(new Integer(this.r.nextInt()));\n\t\t\t} else {\n\t\t\t\tcollector = new SpoutCollector(attributes, -1, flinkCollector);\n\t\t\t\tflinkTuple = Tuple.getTupleClass(numberOfAttributes).newInstance();\n\n\t\t\t\tfor (int i = 0; i < numberOfAttributes; ++i) {\n\t\t\t\t\ttuple.add(new Integer(this.r.nextInt()));\n\t\t\t\t\tflinkTuple.setField(tuple.get(i), i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfinal List<Integer> taskIds;\n\t\t\tfinal Object messageId = new Integer(this.r.nextInt());\n\n\t\t\ttaskIds = collector.emit(streamId, tuple, messageId);\n\n\t\t\tAssert.assertNull(taskIds);\n\n\t\t\tif (numberOfAttributes == -1) {\n\t\t\t\tverify(flinkCollector).collect(tuple.get(0));\n\t\t\t} else {\n\t\t\t\tverify(flinkCollector).collect(flinkTuple);\n\t\t\t}\n\t\t}\n\t}", "signature": "void testSpoutStormCollector()", "full_signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) @Test public void testSpoutStormCollector()", "class_method_signature": "SpoutCollectorTest.testSpoutStormCollector()", "testcase": true, "constructor": false, "invocations": ["mock", "put", "add", "nextInt", "newInstance", "getTupleClass", "add", "nextInt", "setField", "get", "nextInt", "emit", "assertNull", "collect", "verify", "get", "collect", "verify"]}, "focal_class": {"identifier": "SpoutCollector", "superclass": "extends AbstractStormCollector<OUT>", "interfaces": "implements ISpoutOutputCollector", "fields": [{"original_string": "private final SourceContext<OUT> flinkContext;", "modifier": "private final", "type": "SourceContext<OUT>", "declarator": "flinkContext", "var_name": "flinkContext"}], "methods": [{"identifier": "SpoutCollector", "parameters": "(final HashMap<String, Integer> numberOfAttributes, final int taskId,\n\t\t\tfinal SourceContext<OUT> flinkContext)", "modifiers": "", "return": "", "signature": " SpoutCollector(final HashMap<String, Integer> numberOfAttributes, final int taskId,\n\t\t\tfinal SourceContext<OUT> flinkContext)", "full_signature": "  SpoutCollector(final HashMap<String, Integer> numberOfAttributes, final int taskId,\n\t\t\tfinal SourceContext<OUT> flinkContext)", "class_method_signature": "SpoutCollector.SpoutCollector(final HashMap<String, Integer> numberOfAttributes, final int taskId,\n\t\t\tfinal SourceContext<OUT> flinkContext)", "testcase": false, "constructor": true}, {"identifier": "doEmit", "parameters": "(final OUT flinkTuple)", "modifiers": "@Override protected", "return": "List<Integer>", "signature": "List<Integer> doEmit(final OUT flinkTuple)", "full_signature": "@Override protected List<Integer> doEmit(final OUT flinkTuple)", "class_method_signature": "SpoutCollector.doEmit(final OUT flinkTuple)", "testcase": false, "constructor": false}, {"identifier": "reportError", "parameters": "(final Throwable error)", "modifiers": "@Override public", "return": "void", "signature": "void reportError(final Throwable error)", "full_signature": "@Override public void reportError(final Throwable error)", "class_method_signature": "SpoutCollector.reportError(final Throwable error)", "testcase": false, "constructor": false}, {"identifier": "emit", "parameters": "(final String streamId, final List<Object> tuple, final Object messageId)", "modifiers": "@Override public", "return": "List<Integer>", "signature": "List<Integer> emit(final String streamId, final List<Object> tuple, final Object messageId)", "full_signature": "@Override public List<Integer> emit(final String streamId, final List<Object> tuple, final Object messageId)", "class_method_signature": "SpoutCollector.emit(final String streamId, final List<Object> tuple, final Object messageId)", "testcase": false, "constructor": false}, {"identifier": "emitDirect", "parameters": "(final int taskId, final String streamId, final List<Object> tuple, final Object messageId)", "modifiers": "@Override public", "return": "void", "signature": "void emitDirect(final int taskId, final String streamId, final List<Object> tuple, final Object messageId)", "full_signature": "@Override public void emitDirect(final int taskId, final String streamId, final List<Object> tuple, final Object messageId)", "class_method_signature": "SpoutCollector.emitDirect(final int taskId, final String streamId, final List<Object> tuple, final Object messageId)", "testcase": false, "constructor": false}], "file": "flink-contrib/flink-storm/src/main/java/org/apache/flink/storm/wrappers/SpoutCollector.java"}, "focal_method": {"identifier": "emit", "parameters": "(final String streamId, final List<Object> tuple, final Object messageId)", "modifiers": "@Override public", "return": "List<Integer>", "body": "@Override\n\tpublic List<Integer> emit(final String streamId, final List<Object> tuple, final Object messageId) {\n\t\treturn this.tansformAndEmit(streamId, tuple);\n\t}", "signature": "List<Integer> emit(final String streamId, final List<Object> tuple, final Object messageId)", "full_signature": "@Override public List<Integer> emit(final String streamId, final List<Object> tuple, final Object messageId)", "class_method_signature": "SpoutCollector.emit(final String streamId, final List<Object> tuple, final Object messageId)", "testcase": false, "constructor": false, "invocations": ["tansformAndEmit"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}