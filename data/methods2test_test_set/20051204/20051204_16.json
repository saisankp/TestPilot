{"test_class": {"identifier": "TestComponentTagProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Logger log =\n      LoggerFactory.getLogger(TestComponentTagProvider.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n      LoggerFactory.getLogger(TestComponentTagProvider.class)", "var_name": "log"}], "file": "slider-core/src/test/java/org/apache/slider/providers/agent/TestComponentTagProvider.java"}, "test_case": {"identifier": "testTagProviderWithThread", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTagProviderWithThread() throws Exception {\n    ComponentTagProvider ctp = new ComponentTagProvider();\n    Thread thread = new Thread(new Taggged(ctp));\n    Thread thread2 = new Thread(new Taggged(ctp));\n    Thread thread3 = new Thread(new Taggged(ctp));\n    thread.start();\n    thread2.start();\n    thread3.start();\n    ctp.getTag(\"comp1\", \"cid50\");\n    thread.join();\n    thread2.join();\n    thread3.join();\n    Assert.assertEquals(\"101\", ctp.getTag(\"comp1\", \"cid101\"));\n  }", "signature": "void testTagProviderWithThread()", "full_signature": "@Test public void testTagProviderWithThread()", "class_method_signature": "TestComponentTagProvider.testTagProviderWithThread()", "testcase": true, "constructor": false, "invocations": ["start", "start", "start", "getTag", "join", "join", "join", "assertEquals", "getTag"]}, "focal_class": {"identifier": "ComponentTagProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ComponentTagProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ComponentTagProvider.class)", "var_name": "log"}, {"original_string": "private static String FREE = \"free\";", "modifier": "private static", "type": "String", "declarator": "FREE = \"free\"", "var_name": "FREE"}, {"original_string": "private final ConcurrentHashMap<String, ConcurrentHashMap<String, String>> allTags;", "modifier": "private final", "type": "ConcurrentHashMap<String, ConcurrentHashMap<String, String>>", "declarator": "allTags", "var_name": "allTags"}], "methods": [{"identifier": "ComponentTagProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " ComponentTagProvider()", "full_signature": "public  ComponentTagProvider()", "class_method_signature": "ComponentTagProvider.ComponentTagProvider()", "testcase": false, "constructor": true}, {"identifier": "recordAssignedTag", "parameters": "(String component, String containerId, String tag)", "modifiers": "public", "return": "void", "signature": "void recordAssignedTag(String component, String containerId, String tag)", "full_signature": "public void recordAssignedTag(String component, String containerId, String tag)", "class_method_signature": "ComponentTagProvider.recordAssignedTag(String component, String containerId, String tag)", "testcase": false, "constructor": false}, {"identifier": "getTag", "parameters": "(String component, String containerId)", "modifiers": "public", "return": "String", "signature": "String getTag(String component, String containerId)", "full_signature": "public String getTag(String component, String containerId)", "class_method_signature": "ComponentTagProvider.getTag(String component, String containerId)", "testcase": false, "constructor": false}, {"identifier": "releaseTag", "parameters": "(String component, String containerId)", "modifiers": "public", "return": "void", "signature": "void releaseTag(String component, String containerId)", "full_signature": "public void releaseTag(String component, String containerId)", "class_method_signature": "ComponentTagProvider.releaseTag(String component, String containerId)", "testcase": false, "constructor": false}, {"identifier": "getComponentSpecificTags", "parameters": "(String component)", "modifiers": "private", "return": "ConcurrentHashMap<String, String>", "signature": "ConcurrentHashMap<String, String> getComponentSpecificTags(String component)", "full_signature": "private ConcurrentHashMap<String, String> getComponentSpecificTags(String component)", "class_method_signature": "ComponentTagProvider.getComponentSpecificTags(String component)", "testcase": false, "constructor": false}], "file": "slider-core/src/main/java/org/apache/slider/providers/agent/ComponentTagProvider.java"}, "focal_method": {"identifier": "getTag", "parameters": "(String component, String containerId)", "modifiers": "public", "return": "String", "body": "public String getTag(String component, String containerId) {\n    if (SliderUtils.isSet(component) && SliderUtils.isSet(containerId)) {\n      ConcurrentHashMap<String, String> compTags = getComponentSpecificTags(component);\n      synchronized (compTags) {\n        for (String key : compTags.keySet()) {\n          if (compTags.get(key).equals(containerId)) {\n            return key;\n          }\n        }\n        for (String key : compTags.keySet()) {\n          if (compTags.get(key).equals(FREE)) {\n            compTags.put(key, containerId);\n            return key;\n          }\n        }\n        String newKey = new Integer(compTags.size() + 1).toString();\n        compTags.put(newKey, containerId);\n        return newKey;\n      }\n    }\n    return \"\";\n  }", "signature": "String getTag(String component, String containerId)", "full_signature": "public String getTag(String component, String containerId)", "class_method_signature": "ComponentTagProvider.getTag(String component, String containerId)", "testcase": false, "constructor": false, "invocations": ["isSet", "isSet", "getComponentSpecificTags", "keySet", "equals", "get", "keySet", "equals", "get", "put", "toString", "size", "put"]}, "repository": {"repo_id": 20051204, "url": "https://github.com/apache/incubator-retired-slider", "language": "Java", "is_fork": false, "fork_count": 73, "stargazer_count": 74, "size": 16472, "license": "licensed"}}