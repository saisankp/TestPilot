{"test_class": {"identifier": "LinearRegressionModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double PRECISION = 1e-6;", "modifier": "private static final", "type": "double", "declarator": "PRECISION = 1e-6", "var_name": "PRECISION"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/regressions/linear/LinearRegressionModelTest.java"}, "test_case": {"identifier": "testPredict", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPredict() {\n        Vector weights = new DenseVector(new double[]{2.0, 3.0});\n        LinearRegressionModel mdl = new LinearRegressionModel(weights, 1.0);\n\n        assertTrue(!mdl.toString().isEmpty());\n        assertTrue(!mdl.toString(true).isEmpty());\n        assertTrue(!mdl.toString(false).isEmpty());\n\n        Vector observation = new DenseVector(new double[]{1.0, 1.0});\n        TestUtils.assertEquals(1.0 + 2.0 * 1.0 + 3.0 * 1.0, mdl.predict(observation), PRECISION);\n\n        observation = new DenseVector(new double[]{2.0, 1.0});\n        TestUtils.assertEquals(1.0 + 2.0 * 2.0 + 3.0 * 1.0, mdl.predict(observation), PRECISION);\n\n        observation = new DenseVector(new double[]{1.0, 2.0});\n        TestUtils.assertEquals(1.0 + 2.0 * 1.0 + 3.0 * 2.0, mdl.predict(observation), PRECISION);\n\n        observation = new DenseVector(new double[]{-2.0, 1.0});\n        TestUtils.assertEquals(1.0 - 2.0 * 2.0 + 3.0 * 1.0, mdl.predict(observation), PRECISION);\n\n        observation = new DenseVector(new double[]{1.0, -2.0});\n        TestUtils.assertEquals(1.0 + 2.0 * 1.0 - 3.0 * 2.0, mdl.predict(observation), PRECISION);\n    }", "signature": "void testPredict()", "full_signature": "@Test public void testPredict()", "class_method_signature": "LinearRegressionModelTest.testPredict()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEmpty", "toString", "assertTrue", "isEmpty", "toString", "assertTrue", "isEmpty", "toString", "assertEquals", "predict", "assertEquals", "predict", "assertEquals", "predict", "assertEquals", "predict", "assertEquals", "predict"]}, "focal_class": {"identifier": "LinearRegressionModel", "superclass": "", "interfaces": "implements IgniteModel<Vector, Double>, Exportable<LinearRegressionModel>, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -105984600091550226L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -105984600091550226L", "var_name": "serialVersionUID"}, {"original_string": "private final Vector weights;", "modifier": "private final", "type": "Vector", "declarator": "weights", "var_name": "weights"}, {"original_string": "private final double intercept;", "modifier": "private final", "type": "double", "declarator": "intercept", "var_name": "intercept"}], "methods": [{"identifier": "LinearRegressionModel", "parameters": "(Vector weights, double intercept)", "modifiers": "public", "return": "", "signature": " LinearRegressionModel(Vector weights, double intercept)", "full_signature": "public  LinearRegressionModel(Vector weights, double intercept)", "class_method_signature": "LinearRegressionModel.LinearRegressionModel(Vector weights, double intercept)", "testcase": false, "constructor": true}, {"identifier": "getWeights", "parameters": "()", "modifiers": "public", "return": "Vector", "signature": "Vector getWeights()", "full_signature": "public Vector getWeights()", "class_method_signature": "LinearRegressionModel.getWeights()", "testcase": false, "constructor": false}, {"identifier": "getIntercept", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getIntercept()", "full_signature": "public double getIntercept()", "class_method_signature": "LinearRegressionModel.getIntercept()", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(Vector input)", "modifiers": "@Override public", "return": "Double", "signature": "Double predict(Vector input)", "full_signature": "@Override public Double predict(Vector input)", "class_method_signature": "LinearRegressionModel.predict(Vector input)", "testcase": false, "constructor": false}, {"identifier": "saveModel", "parameters": "(Exporter<LinearRegressionModel, P> exporter, P path)", "modifiers": "@Override public", "return": "void", "signature": "void saveModel(Exporter<LinearRegressionModel, P> exporter, P path)", "full_signature": "@Override public void saveModel(Exporter<LinearRegressionModel, P> exporter, P path)", "class_method_signature": "LinearRegressionModel.saveModel(Exporter<LinearRegressionModel, P> exporter, P path)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "LinearRegressionModel.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LinearRegressionModel.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LinearRegressionModel.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(boolean pretty)", "modifiers": "@Override public", "return": "String", "signature": "String toString(boolean pretty)", "full_signature": "@Override public String toString(boolean pretty)", "class_method_signature": "LinearRegressionModel.toString(boolean pretty)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/regressions/linear/LinearRegressionModel.java"}, "focal_method": {"identifier": "predict", "parameters": "(Vector input)", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double predict(Vector input) {\n        return input.dot(weights) + intercept;\n    }", "signature": "Double predict(Vector input)", "full_signature": "@Override public Double predict(Vector input)", "class_method_signature": "LinearRegressionModel.predict(Vector input)", "testcase": false, "constructor": false, "invocations": ["dot"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}