{"test_class": {"identifier": "IPAtomicHOSEDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "IPAtomicHOSEDescriptor  descriptor;", "modifier": "", "type": "IPAtomicHOSEDescriptor", "declarator": "descriptor", "var_name": "descriptor"}, {"original_string": "private SmilesParser    sp      = new SmilesParser(DefaultChemObjectBuilder.getInstance());", "modifier": "private", "type": "SmilesParser", "declarator": "sp      = new SmilesParser(DefaultChemObjectBuilder.getInstance())", "var_name": "sp"}, {"original_string": "LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/IPAtomicHOSEDescriptorTest.java"}, "test_case": {"identifier": "testIPDescriptor2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIPDescriptor2() throws Exception {\n\n        IAtomContainer mol = sp.parseSmiles(\"CC(CC)Cl\"); // not in db\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        addExplicitHydrogens(mol);\n        lpcheck.saturate(mol);\n\n        double result = ((DoubleResult) descriptor.calculate(mol.getAtom(4), mol).getValue()).doubleValue();\n        double resultAccordingNIST = 10.57; //value for CC(C)Cl\n\n        Assert.assertEquals(resultAccordingNIST, result, 0.00001);\n    }", "signature": "void testIPDescriptor2()", "full_signature": "@Test public void testIPDescriptor2()", "class_method_signature": "IPAtomicHOSEDescriptorTest.testIPDescriptor2()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "IPAtomicHOSEDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "", "fields": [{"original_string": "private static final String[] NAMES = {\"ipAtomicHOSE\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"ipAtomicHOSE\"}", "var_name": "NAMES"}, {"original_string": "int                           maxSpheresToUse = 10;", "modifier": "", "type": "int", "declarator": "maxSpheresToUse = 10", "var_name": "maxSpheresToUse"}, {"original_string": "private IPdb                  db              = new IPdb();", "modifier": "private", "type": "IPdb", "declarator": "db              = new IPdb()", "var_name": "db"}], "methods": [{"identifier": "IPAtomicHOSEDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " IPAtomicHOSEDescriptor()", "full_signature": "public  IPAtomicHOSEDescriptor()", "class_method_signature": "IPAtomicHOSEDescriptor.IPAtomicHOSEDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "IPAtomicHOSEDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "IPAtomicHOSEDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "IPAtomicHOSEDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "IPAtomicHOSEDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "IPAtomicHOSEDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "familyHalogen", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean familyHalogen(IAtom atom)", "full_signature": "private boolean familyHalogen(IAtom atom)", "class_method_signature": "IPAtomicHOSEDescriptor.familyHalogen(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "IPAtomicHOSEDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "IPAtomicHOSEDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "extractInfo", "parameters": "(String str)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> extractInfo(String str)", "full_signature": "private static List<String> extractInfo(String str)", "class_method_signature": "IPAtomicHOSEDescriptor.extractInfo(String str)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/IPAtomicHOSEDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer container) {\n        double value;\n        // FIXME: for now I'll cache a few modified atomic properties, and restore them at the end of this method\n        String originalAtomtypeName = atom.getAtomTypeName();\n        Integer originalNeighborCount = atom.getFormalNeighbourCount();\n        Integer originalValency = atom.getValency();\n        Double originalBondOrderSum = atom.getBondOrderSum();\n        Order originalMaxBondOrder = atom.getMaxBondOrder();\n        IAtomType.Hybridization originalHybridization = atom.getHybridization();\n\n        if (!isCachedAtomContainer(container)) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(container);\n                LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n                lpcheck.saturate(container);\n            } catch (CDKException e) {\n                return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                        Double.NaN), NAMES, e);\n            }\n\n        }\n        value = db.extractIP(container, atom);\n        // restore original props\n        atom.setAtomTypeName(originalAtomtypeName);\n        atom.setFormalNeighbourCount(originalNeighborCount);\n        atom.setValency(originalValency);\n        atom.setHybridization(originalHybridization);\n        atom.setMaxBondOrder(originalMaxBondOrder);\n        atom.setBondOrderSum(originalBondOrderSum);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(value),\n                                   NAMES);\n\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "IPAtomicHOSEDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getAtomTypeName", "getFormalNeighbourCount", "getValency", "getBondOrderSum", "getMaxBondOrder", "getHybridization", "isCachedAtomContainer", "percieveAtomTypesAndConfigureAtoms", "saturate", "getSpecification", "getParameterNames", "getParameters", "extractIP", "setAtomTypeName", "setFormalNeighbourCount", "setValency", "setHybridization", "setMaxBondOrder", "setBondOrderSum", "getSpecification", "getParameterNames", "getParameters"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}