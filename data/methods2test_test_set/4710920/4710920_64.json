{"test_class": {"identifier": "AccessKeyAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/AccessKeyAuthenticatorTest.java"}, "test_case": {"identifier": "testAuthenticateRequestNoSignature", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testAuthenticateRequestNoSignature() {\n        URL url = URL.valueOf(\"dubbo://10.10.10.10:2181\")\n                .addParameter(Constants.ACCESS_KEY_ID_KEY, \"ak\")\n                .addParameter(CommonConstants.APPLICATION_KEY, \"test\")\n                .addParameter(Constants.SECRET_ACCESS_KEY_KEY, \"sk\");\n        Invocation invocation = new RpcInvocation();\n        AccessKeyAuthenticator helper = new AccessKeyAuthenticator();\n        assertThrows(RpcAuthenticationException.class, () -> helper.authenticate(invocation, url));\n    }", "signature": "void testAuthenticateRequestNoSignature()", "full_signature": "@Test void testAuthenticateRequestNoSignature()", "class_method_signature": "AccessKeyAuthenticatorTest.testAuthenticateRequestNoSignature()", "testcase": true, "constructor": false, "invocations": ["addParameter", "addParameter", "addParameter", "valueOf", "assertThrows", "authenticate"]}, "focal_class": {"identifier": "AccessKeyAuthenticator", "superclass": "", "interfaces": "implements Authenticator", "fields": [], "methods": [{"identifier": "sign", "parameters": "(Invocation invocation, URL url)", "modifiers": "@Override public", "return": "void", "signature": "void sign(Invocation invocation, URL url)", "full_signature": "@Override public void sign(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.sign(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(Invocation invocation, URL url)", "modifiers": "@Override public", "return": "void", "signature": "void authenticate(Invocation invocation, URL url)", "full_signature": "@Override public void authenticate(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.authenticate(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "getAccessKeyPair", "parameters": "(Invocation invocation, URL url)", "modifiers": "", "return": "AccessKeyPair", "signature": "AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "full_signature": " AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.getAccessKeyPair(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "(URL url, Invocation invocation, String secretKey, String time)", "modifiers": "", "return": "String", "signature": "String getSignature(URL url, Invocation invocation, String secretKey, String time)", "full_signature": " String getSignature(URL url, Invocation invocation, String secretKey, String time)", "class_method_signature": "AccessKeyAuthenticator.getSignature(URL url, Invocation invocation, String secretKey, String time)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/AccessKeyAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(Invocation invocation, URL url)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void authenticate(Invocation invocation, URL url) throws RpcAuthenticationException {\n        String accessKeyId = String.valueOf(invocation.getAttachment(Constants.AK_KEY));\n        String requestTimestamp = String.valueOf(invocation.getAttachment(Constants.REQUEST_TIMESTAMP_KEY));\n        String originSignature = String.valueOf(invocation.getAttachment(Constants.REQUEST_SIGNATURE_KEY));\n        String consumer = String.valueOf(invocation.getAttachment(CommonConstants.CONSUMER));\n\n        if (StringUtils.isEmpty(accessKeyId) || StringUtils.isEmpty(consumer)\n                || StringUtils.isEmpty(requestTimestamp) || StringUtils.isEmpty(originSignature)) {\n            throw new RpcAuthenticationException(\"Failed to authenticate, maybe consumer not enable the auth\");\n        }\n        AccessKeyPair accessKeyPair = null;\n        try {\n            accessKeyPair = getAccessKeyPair(invocation, url);\n        } catch (Exception e) {\n            throw new RpcAuthenticationException(\"Failed to authenticate , can't load the accessKeyPair\", e);\n        }\n\n        String computeSignature = getSignature(url, invocation, accessKeyPair.getSecretKey(), requestTimestamp);\n        boolean success = computeSignature.equals(originSignature);\n        if (!success) {\n            throw new RpcAuthenticationException(\"Failed to authenticate, signature is not correct\");\n        }\n    }", "signature": "void authenticate(Invocation invocation, URL url)", "full_signature": "@Override public void authenticate(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.authenticate(Invocation invocation, URL url)", "testcase": false, "constructor": false, "invocations": ["valueOf", "getAttachment", "valueOf", "getAttachment", "valueOf", "getAttachment", "valueOf", "getAttachment", "isEmpty", "isEmpty", "isEmpty", "isEmpty", "getAccessKeyPair", "getSignature", "getSecretKey", "equals"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}