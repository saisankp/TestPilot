{"test_class": {"identifier": "CertificationRevocationListImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static CertificateFactory cf;", "modifier": "private static", "type": "CertificateFactory", "declarator": "cf", "var_name": "cf"}, {"original_string": "private static X509Certificate testCertificate;", "modifier": "private static", "type": "X509Certificate", "declarator": "testCertificate", "var_name": "testCertificate"}, {"original_string": "private static Set<X509Certificate> masterList;", "modifier": "private static", "type": "Set<X509Certificate>", "declarator": "masterList", "var_name": "masterList"}], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/eidserver/crl/CertificationRevocationListImplTest.java"}, "test_case": {"identifier": "crlThrowsAnExceptionWhenSignatureCertificateIsFalse", "parameters": "()", "modifiers": "@Test @DisplayName(\"throws exception when the signature certificate is false\")", "return": "void", "body": "@Test\n  @DisplayName(\"throws exception when the signature certificate is false\")\n  void crlThrowsAnExceptionWhenSignatureCertificateIsFalse() throws Exception\n  {\n    X509Certificate certificate = (X509Certificate)cf.generateCertificate(CertificationRevocationListImplTest.class.getResourceAsStream(\"/csca-root-cert.cer\"));\n    Set<X509Certificate> masterList = new HashSet<>();\n    masterList.add(certificate);\n    CrlFetcher fetcher = getCrlFetcher(certificate);\n    IllegalStateException illegalStateException = Assertions.assertThrows(IllegalStateException.class,\n                                                                          () -> CertificationRevocationListImpl.initialize(masterList,\n                                                                                                                           certificate,\n                                                                                                                           fetcher));\n\n    Assert.assertEquals(\"Exception during initial retrieval of CRL\", illegalStateException.getMessage());\n    Throwable certificateValidationException = illegalStateException.getCause();\n    Assertions.assertTrue(certificateValidationException instanceof CertificateValidationException);\n    Assertions.assertEquals(\"Could not verify CRL\", certificateValidationException.getMessage());\n  }", "signature": "void crlThrowsAnExceptionWhenSignatureCertificateIsFalse()", "full_signature": "@Test @DisplayName(\"throws exception when the signature certificate is false\") void crlThrowsAnExceptionWhenSignatureCertificateIsFalse()", "class_method_signature": "CertificationRevocationListImplTest.crlThrowsAnExceptionWhenSignatureCertificateIsFalse()", "testcase": true, "constructor": false, "invocations": ["generateCertificate", "getResourceAsStream", "add", "getCrlFetcher", "assertThrows", "initialize", "assertEquals", "getMessage", "getCause", "assertTrue", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "CertificationRevocationListImpl", "superclass": "", "interfaces": "implements CertificationRevocationList", "fields": [{"original_string": "private static CertificationRevocationListImpl crl = null;", "modifier": "private static", "type": "CertificationRevocationListImpl", "declarator": "crl = null", "var_name": "crl"}, {"original_string": "private final X509Certificate cscaRootCertificate;", "modifier": "private final", "type": "X509Certificate", "declarator": "cscaRootCertificate", "var_name": "cscaRootCertificate"}, {"original_string": "private final Set<X509Certificate> trustSet;", "modifier": "private final", "type": "Set<X509Certificate>", "declarator": "trustSet", "var_name": "trustSet"}, {"original_string": "private final CrlFetcher crlFetcher;", "modifier": "private final", "type": "CrlFetcher", "declarator": "crlFetcher", "var_name": "crlFetcher"}, {"original_string": "@Getter\n  private static boolean isInitialized;", "modifier": "@Getter\n  private static", "type": "boolean", "declarator": "isInitialized", "var_name": "isInitialized"}, {"original_string": "@Getter\n  private final CrlCache crlCache;", "modifier": "@Getter\n  private final", "type": "CrlCache", "declarator": "crlCache", "var_name": "crlCache"}], "methods": [{"identifier": "CertificationRevocationListImpl", "parameters": "(Set<X509Certificate> masterList,\n                                          X509Certificate cscaRootCertificate,\n                                          CrlFetcher crlFetcher)", "modifiers": "private", "return": "", "signature": " CertificationRevocationListImpl(Set<X509Certificate> masterList,\n                                          X509Certificate cscaRootCertificate,\n                                          CrlFetcher crlFetcher)", "full_signature": "private  CertificationRevocationListImpl(Set<X509Certificate> masterList,\n                                          X509Certificate cscaRootCertificate,\n                                          CrlFetcher crlFetcher)", "class_method_signature": "CertificationRevocationListImpl.CertificationRevocationListImpl(Set<X509Certificate> masterList,\n                                          X509Certificate cscaRootCertificate,\n                                          CrlFetcher crlFetcher)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(Set<X509Certificate> masterList)", "modifiers": "public static synchronized", "return": "void", "signature": "void initialize(Set<X509Certificate> masterList)", "full_signature": "public static synchronized void initialize(Set<X509Certificate> masterList)", "class_method_signature": "CertificationRevocationListImpl.initialize(Set<X509Certificate> masterList)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "(Set<X509Certificate> masterList,\n                                      X509Certificate certificate,\n                                      CrlFetcher crlFetcher)", "modifiers": "static synchronized", "return": "void", "signature": "void initialize(Set<X509Certificate> masterList,\n                                      X509Certificate certificate,\n                                      CrlFetcher crlFetcher)", "full_signature": "static synchronized void initialize(Set<X509Certificate> masterList,\n                                      X509Certificate certificate,\n                                      CrlFetcher crlFetcher)", "class_method_signature": "CertificationRevocationListImpl.initialize(Set<X509Certificate> masterList,\n                                      X509Certificate certificate,\n                                      CrlFetcher crlFetcher)", "testcase": false, "constructor": false}, {"identifier": "fetchCrlForRoot", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void fetchCrlForRoot()", "full_signature": "private void fetchCrlForRoot()", "class_method_signature": "CertificationRevocationListImpl.fetchCrlForRoot()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static synchronized", "return": "CertificationRevocationListImpl", "signature": "CertificationRevocationListImpl getInstance()", "full_signature": "public static synchronized CertificationRevocationListImpl getInstance()", "class_method_signature": "CertificationRevocationListImpl.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getCrlDistributionPoints", "parameters": "(X509Certificate certificate)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getCrlDistributionPoints(X509Certificate certificate)", "full_signature": "public static List<String> getCrlDistributionPoints(X509Certificate certificate)", "class_method_signature": "CertificationRevocationListImpl.getCrlDistributionPoints(X509Certificate certificate)", "testcase": false, "constructor": false}, {"identifier": "renewCrls", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void renewCrls()", "full_signature": "public void renewCrls()", "class_method_signature": "CertificationRevocationListImpl.renewCrls()", "testcase": false, "constructor": false}, {"identifier": "getX509CRL", "parameters": "(String url)", "modifiers": "@Override public", "return": "X509CRL", "signature": "X509CRL getX509CRL(String url)", "full_signature": "@Override public X509CRL getX509CRL(String url)", "class_method_signature": "CertificationRevocationListImpl.getX509CRL(String url)", "testcase": false, "constructor": false}, {"identifier": "fetchAndSaveCrl", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean fetchAndSaveCrl(String url)", "full_signature": "private boolean fetchAndSaveCrl(String url)", "class_method_signature": "CertificationRevocationListImpl.fetchAndSaveCrl(String url)", "testcase": false, "constructor": false}, {"identifier": "isTimeForNextUpdate", "parameters": "(X509CRL crl)", "modifiers": "private", "return": "boolean", "signature": "boolean isTimeForNextUpdate(X509CRL crl)", "full_signature": "private boolean isTimeForNextUpdate(X509CRL crl)", "class_method_signature": "CertificationRevocationListImpl.isTimeForNextUpdate(X509CRL crl)", "testcase": false, "constructor": false}, {"identifier": "isOnCRL", "parameters": "(X509Certificate x509CertificateToCheck)", "modifiers": "public", "return": "boolean", "signature": "boolean isOnCRL(X509Certificate x509CertificateToCheck)", "full_signature": "public boolean isOnCRL(X509Certificate x509CertificateToCheck)", "class_method_signature": "CertificationRevocationListImpl.isOnCRL(X509Certificate x509CertificateToCheck)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void reset()", "full_signature": "public static void reset()", "class_method_signature": "CertificationRevocationListImpl.reset()", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/eidserver/crl/CertificationRevocationListImpl.java"}, "focal_method": {"identifier": "initialize", "parameters": "(Set<X509Certificate> masterList)", "modifiers": "public static synchronized", "return": "void", "body": "public static synchronized void initialize(Set<X509Certificate> masterList)\n  {\n    initialize(masterList, null, null);\n  }", "signature": "void initialize(Set<X509Certificate> masterList)", "full_signature": "public static synchronized void initialize(Set<X509Certificate> masterList)", "class_method_signature": "CertificationRevocationListImpl.initialize(Set<X509Certificate> masterList)", "testcase": false, "constructor": false, "invocations": ["initialize"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}