{"test_class": {"identifier": "HttpUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/HttpUtilsTest.java"}, "test_case": {"identifier": "findCookieTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findCookieTest() {\n        Cookie[] cookies = null;\n        String cookieName = null;\n\n        // null test\n        assertNull(HttpUtils.findCookie(cookies, cookieName));\n        cookieName = \"\";\n        assertNull(HttpUtils.findCookie(cookies, cookieName));\n\n        // value test\n        cookieName = \"daakuBandar\";\n        cookies = new Cookie[]{new Cookie(cookieName, \"someValue\")};\n        assertNull(HttpUtils.findCookie(cookies, \"aalasiLangur\"));\n        assertNotNull(HttpUtils.findCookie(cookies, cookieName));\n    }", "signature": "void findCookieTest()", "full_signature": "@Test public void findCookieTest()", "class_method_signature": "HttpUtilsTest.findCookieTest()", "testcase": true, "constructor": false, "invocations": ["assertNull", "findCookie", "assertNull", "findCookie", "assertNull", "findCookie", "assertNotNull", "findCookie"]}, "focal_class": {"identifier": "HttpUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(HttpUtils.class);", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(HttpUtils.class)", "var_name": "s_logger"}, {"original_string": "public static final String UTF_8 = \"UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "UTF_8 = \"UTF-8\"", "var_name": "UTF_8"}, {"original_string": "public static final String RESPONSE_TYPE_JSON = \"json\";", "modifier": "public static final", "type": "String", "declarator": "RESPONSE_TYPE_JSON = \"json\"", "var_name": "RESPONSE_TYPE_JSON"}, {"original_string": "public static final String RESPONSE_TYPE_XML = \"xml\";", "modifier": "public static final", "type": "String", "declarator": "RESPONSE_TYPE_XML = \"xml\"", "var_name": "RESPONSE_TYPE_XML"}, {"original_string": "public static final String JSON_CONTENT_TYPE = \"application/json; charset=UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "JSON_CONTENT_TYPE = \"application/json; charset=UTF-8\"", "var_name": "JSON_CONTENT_TYPE"}, {"original_string": "public static final String XML_CONTENT_TYPE = \"text/xml; charset=UTF-8\";", "modifier": "public static final", "type": "String", "declarator": "XML_CONTENT_TYPE = \"text/xml; charset=UTF-8\"", "var_name": "XML_CONTENT_TYPE"}], "methods": [{"identifier": "addSecurityHeaders", "parameters": "(final HttpServletResponse resp)", "modifiers": "public static", "return": "void", "signature": "void addSecurityHeaders(final HttpServletResponse resp)", "full_signature": "public static void addSecurityHeaders(final HttpServletResponse resp)", "class_method_signature": "HttpUtils.addSecurityHeaders(final HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "writeHttpResponse", "parameters": "(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "modifiers": "public static", "return": "void", "signature": "void writeHttpResponse(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "full_signature": "public static void writeHttpResponse(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "class_method_signature": "HttpUtils.writeHttpResponse(final HttpServletResponse resp, final String response,\n                                         final Integer responseCode, final String responseType, final String jsonContentType)", "testcase": false, "constructor": false}, {"identifier": "findCookie", "parameters": "(final Cookie[] cookies, final String key)", "modifiers": "public static", "return": "String", "signature": "String findCookie(final Cookie[] cookies, final String key)", "full_signature": "public static String findCookie(final Cookie[] cookies, final String key)", "class_method_signature": "HttpUtils.findCookie(final Cookie[] cookies, final String key)", "testcase": false, "constructor": false}, {"identifier": "validateSessionKey", "parameters": "(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "full_signature": "public static boolean validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "class_method_signature": "HttpUtils.validateSessionKey(final HttpSession session, final Map<String, Object[]> params, final Cookie[] cookies, final String sessionKeyString)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/HttpUtils.java"}, "focal_method": {"identifier": "findCookie", "parameters": "(final Cookie[] cookies, final String key)", "modifiers": "public static", "return": "String", "body": "public static String findCookie(final Cookie[] cookies, final String key) {\n        if (cookies == null || key == null || key.isEmpty()) {\n            return null;\n        }\n        for (Cookie cookie: cookies) {\n            if (cookie != null && cookie.getName().equals(key)) {\n                return cookie.getValue();\n            }\n        }\n        return null;\n    }", "signature": "String findCookie(final Cookie[] cookies, final String key)", "full_signature": "public static String findCookie(final Cookie[] cookies, final String key)", "class_method_signature": "HttpUtils.findCookie(final Cookie[] cookies, final String key)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "equals", "getName", "getValue"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}