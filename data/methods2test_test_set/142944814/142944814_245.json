{"test_class": {"identifier": "AbstractConfigurationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameter(0)\n  public String input;", "modifier": "@Parameter(0)\n  public", "type": "String", "declarator": "input", "var_name": "input"}, {"original_string": "@Parameter(1)\n  public Object[] expected;", "modifier": "@Parameter(1)\n  public", "type": "Object[]", "declarator": "expected", "var_name": "expected"}, {"original_string": "protected AbstractConfiguration configuration = spy(AbstractConfiguration.class);", "modifier": "protected", "type": "AbstractConfiguration", "declarator": "configuration = spy(AbstractConfiguration.class)", "var_name": "configuration"}], "file": "core/util/src/test/java/hera/util/conf/AbstractConfigurationTest.java"}, "test_case": {"identifier": "testGetFragments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetFragments() {\n    final String[] fragments = configuration.getFragments(input);\n    assertArrayEquals(expected, fragments);\n  }", "signature": "void testGetFragments()", "full_signature": "@Test public void testGetFragments()", "class_method_signature": "AbstractConfigurationTest.testGetFragments()", "testcase": true, "constructor": false, "invocations": ["getFragments", "assertArrayEquals"]}, "focal_class": {"identifier": "AbstractConfiguration", "superclass": "", "interfaces": "implements Configuration", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "@Getter\n  protected final boolean readOnly;", "modifier": "@Getter\n  protected final", "type": "boolean", "declarator": "readOnly", "var_name": "readOnly"}], "methods": [{"identifier": "AbstractConfiguration", "parameters": "()", "modifiers": "public", "return": "", "signature": " AbstractConfiguration()", "full_signature": "public  AbstractConfiguration()", "class_method_signature": "AbstractConfiguration.AbstractConfiguration()", "testcase": false, "constructor": true}, {"identifier": "AbstractConfiguration", "parameters": "(final boolean readOnly)", "modifiers": "public", "return": "", "signature": " AbstractConfiguration(final boolean readOnly)", "full_signature": "public  AbstractConfiguration(final boolean readOnly)", "class_method_signature": "AbstractConfiguration.AbstractConfiguration(final boolean readOnly)", "testcase": false, "constructor": true}, {"identifier": "getFragments", "parameters": "(final String qualifiedName)", "modifiers": "protected", "return": "String[]", "signature": "String[] getFragments(final String qualifiedName)", "full_signature": "protected String[] getFragments(final String qualifiedName)", "class_method_signature": "AbstractConfiguration.getFragments(final String qualifiedName)", "testcase": false, "constructor": false}, {"identifier": "getSubconfiguration", "parameters": "(String key)", "modifiers": "public", "return": "Configuration", "signature": "Configuration getSubconfiguration(String key)", "full_signature": "public Configuration getSubconfiguration(String key)", "class_method_signature": "AbstractConfiguration.getSubconfiguration(String key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String key)", "modifiers": "protected abstract", "return": "Object", "signature": "Object getValue(String key)", "full_signature": "protected abstract Object getValue(String key)", "class_method_signature": "AbstractConfiguration.getValue(String key)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final String key)", "modifiers": "public", "return": "Object", "signature": "Object get(final String key)", "full_signature": "public Object get(final String key)", "class_method_signature": "AbstractConfiguration.get(final String key)", "testcase": false, "constructor": false}, {"identifier": "getAsString", "parameters": "(final String key, final String defaultValue)", "modifiers": "@Override public", "return": "String", "signature": "String getAsString(final String key, final String defaultValue)", "full_signature": "@Override public String getAsString(final String key, final String defaultValue)", "class_method_signature": "AbstractConfiguration.getAsString(final String key, final String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAsBoolean", "parameters": "(final String key, final boolean defaultValue)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getAsBoolean(final String key, final boolean defaultValue)", "full_signature": "@Override public boolean getAsBoolean(final String key, final boolean defaultValue)", "class_method_signature": "AbstractConfiguration.getAsBoolean(final String key, final boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAsInt", "parameters": "(final String key, final int defaultValue)", "modifiers": "@Override public", "return": "int", "signature": "int getAsInt(final String key, final int defaultValue)", "full_signature": "@Override public int getAsInt(final String key, final int defaultValue)", "class_method_signature": "AbstractConfiguration.getAsInt(final String key, final int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAsLong", "parameters": "(final String key, final long defaultValue)", "modifiers": "@Override public", "return": "long", "signature": "long getAsLong(final String key, final long defaultValue)", "full_signature": "@Override public long getAsLong(final String key, final long defaultValue)", "class_method_signature": "AbstractConfiguration.getAsLong(final String key, final long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAsDouble", "parameters": "(final String key, final double defaultValue)", "modifiers": "@Override public", "return": "double", "signature": "double getAsDouble(final String key, final double defaultValue)", "full_signature": "@Override public double getAsDouble(final String key, final double defaultValue)", "class_method_signature": "AbstractConfiguration.getAsDouble(final String key, final double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getAsList", "parameters": "(final String key)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAsList(final String key)", "full_signature": "@Override public List<String> getAsList(final String key)", "class_method_signature": "AbstractConfiguration.getAsList(final String key)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String value)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "List<String>", "signature": "List<String> parse(final String value)", "full_signature": "@SuppressWarnings(\"unchecked\") protected List<String> parse(final String value)", "class_method_signature": "AbstractConfiguration.parse(final String value)", "testcase": false, "constructor": false}, {"identifier": "checkReadOnly", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkReadOnly()", "full_signature": "protected void checkReadOnly()", "class_method_signature": "AbstractConfiguration.checkReadOnly()", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/conf/AbstractConfiguration.java"}, "focal_method": {"identifier": "getFragments", "parameters": "(final String qualifiedName)", "modifiers": "protected", "return": "String[]", "body": "protected String[] getFragments(final String qualifiedName) {\n    final String[] splits = qualifiedName.split(\"\\\\.\");\n    for (final String split : splits) {\n      if (split.isEmpty()) {\n        assertFalse(true, \"Value must not empty\");\n      }\n    }\n    return splits;\n  }", "signature": "String[] getFragments(final String qualifiedName)", "full_signature": "protected String[] getFragments(final String qualifiedName)", "class_method_signature": "AbstractConfiguration.getFragments(final String qualifiedName)", "testcase": false, "constructor": false, "invocations": ["split", "isEmpty", "assertFalse"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}