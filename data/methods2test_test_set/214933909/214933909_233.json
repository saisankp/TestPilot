{"test_class": {"identifier": "GroupControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private GroupService groupService;", "modifier": "@MockBean\n    private", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}, {"original_string": "@MockBean\n    private GroupDao groupDao;", "modifier": "@MockBean\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private ProjectDao projectDao;", "modifier": "@MockBean\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@MockBean\n    private DataBaseDao dataBaseDao;", "modifier": "@MockBean\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@MockBean\n    private LoginUserDao lLoginUserDao;", "modifier": "@MockBean\n    private", "type": "LoginUserDao", "declarator": "lLoginUserDao", "var_name": "lLoginUserDao"}, {"original_string": "@MockBean\n    private DatabaseSetDao databaseSetDao;", "modifier": "@MockBean\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@MockBean\n    private UserGroupDao userGroupDao;", "modifier": "@MockBean\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/GroupControllerTest.java"}, "test_case": {"identifier": "sync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void sync() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/group/sync\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .param(\"id\", \"1\")\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void sync()", "full_signature": "@Test public void sync()", "class_method_signature": "GroupControllerTest.sync()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "param", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "GroupController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Resource\n    private GroupService groupService;", "modifier": "@Resource\n    private", "type": "GroupService", "declarator": "groupService", "var_name": "groupService"}, {"original_string": "@Autowired\n    private GroupDao groupDao;", "modifier": "@Autowired\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private ProjectDao projectDao;", "modifier": "@Autowired\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Autowired\n    private DataBaseDao dataBaseDao;", "modifier": "@Autowired\n    private", "type": "DataBaseDao", "declarator": "dataBaseDao", "var_name": "dataBaseDao"}, {"original_string": "@Autowired\n    private LoginUserDao loginUserDao;", "modifier": "@Autowired\n    private", "type": "LoginUserDao", "declarator": "loginUserDao", "var_name": "loginUserDao"}, {"original_string": "@Autowired\n    private DatabaseSetDao databaseSetDao;", "modifier": "@Autowired\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@Autowired\n    private UserGroupDao userGroupDao;", "modifier": "@Autowired\n    private", "type": "UserGroupDao", "declarator": "userGroupDao", "var_name": "userGroupDao"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}], "methods": [{"identifier": "getGroups", "parameters": "(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid, @CurrentUser LoginUser loginUser)", "modifiers": "@RequestMapping(value = \"/tree\") public", "return": "ServiceResult<List<DasGroup>>", "signature": "ServiceResult<List<DasGroup>> getGroups(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid, @CurrentUser LoginUser loginUser)", "full_signature": "@RequestMapping(value = \"/tree\") public ServiceResult<List<DasGroup>> getGroups(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid, @CurrentUser LoginUser loginUser)", "class_method_signature": "GroupController.getGroups(@RequestParam(value = \"appid\", defaultValue = \"0\") String appid, @CurrentUser LoginUser loginUser)", "testcase": false, "constructor": false}, {"identifier": "getMemberGroups", "parameters": "(@CurrentUser LoginUser loginUser)", "modifiers": "@RequestMapping(value = \"/member/tree\") public", "return": "ServiceResult<List<DasGroup>>", "signature": "ServiceResult<List<DasGroup>> getMemberGroups(@CurrentUser LoginUser loginUser)", "full_signature": "@RequestMapping(value = \"/member/tree\") public ServiceResult<List<DasGroup>> getMemberGroups(@CurrentUser LoginUser loginUser)", "class_method_signature": "GroupController.getMemberGroups(@CurrentUser LoginUser loginUser)", "testcase": false, "constructor": false}, {"identifier": "getUserGroups", "parameters": "(@CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/userGroups\") public", "return": "ServiceResult<UserGroup>", "signature": "ServiceResult<UserGroup> getUserGroups(@CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/userGroups\") public ServiceResult<UserGroup> getUserGroups(@CurrentUser LoginUser user)", "class_method_signature": "GroupController.getUserGroups(@CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "getAllGroup", "parameters": "(@RequestBody Paging<DasGroup> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<DalGroupView>>", "signature": "ServiceResult<ListResult<DalGroupView>> getAllGroup(@RequestBody Paging<DasGroup> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<DalGroupView>> getAllGroup(@RequestBody Paging<DasGroup> paging)", "class_method_signature": "GroupController.getAllGroup(@RequestBody Paging<DasGroup> paging)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = {\"\", \"/\", \"/add\"}, method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = {\"\", \"/\", \"/add\"}, method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupController.add(@Validated(AddDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = {\"\", \"/\", \"/update\"}, method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = {\"\", \"/\", \"/update\"}, method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupController.update(@Validated(UpdateDalGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = {\"\", \"/\", \"/delete\"}, method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = {\"\", \"/\", \"/delete\"}, method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "GroupController.delete(@Validated(DeleteGroup.class) @RequestBody DasGroup group, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "GroupController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/GroupController.java"}, "focal_method": {"identifier": "sync", "parameters": "(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/sync\") public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/sync\")\n    public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user) throws Exception {\n        return ServiceResult.success();\n        // TODO return apolloGroup.sync(user, id);\n    }", "signature": "ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/sync\") public ServiceResult<String> sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "class_method_signature": "GroupController.sync(@RequestParam(\"id\") Long id, @CurrentUser LoginUser user)", "testcase": false, "constructor": false, "invocations": ["success"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}