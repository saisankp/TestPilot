{"test_class": {"identifier": "MannholdLogPDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/MannholdLogPDescriptorTest.java"}, "test_case": {"identifier": "testMethane", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMethane() {\n        IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();\n        IAtomContainer methane = builder.newInstance(IAtomContainer.class);\n        methane.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        IDescriptorResult result = descriptor.calculate(methane).getValue();\n        Assert.assertTrue(result instanceof DoubleResult);\n        Assert.assertEquals(1.57, ((DoubleResult) result).doubleValue(), 0.01);\n    }", "signature": "void testMethane()", "full_signature": "@Test public void testMethane()", "class_method_signature": "MannholdLogPDescriptorTest.testMethane()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newInstance", "addAtom", "newInstance", "getValue", "calculate", "assertTrue", "assertEquals", "doubleValue"]}, "focal_class": {"identifier": "MannholdLogPDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"MLogP\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"MLogP\"}", "var_name": "NAMES"}], "methods": [{"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "MannholdLogPDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "MannholdLogPDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "MannholdLogPDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "MannholdLogPDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "MannholdLogPDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "MannholdLogPDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "MannholdLogPDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "MannholdLogPDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "MannholdLogPDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/MannholdLogPDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        IAtomContainer ac = null;\n        try {\n            ac = (IAtomContainer) atomContainer.clone();\n        } catch (CloneNotSupportedException e) {\n            return getDummyDescriptorValue(e);\n        }\n\n        int carbonCount = 0;\n        int heteroCount = 0;\n        for (IAtom atom : ac.atoms()) {\n            if (atom.getAtomicNumber() != IElement.H) {\n                if (atom.getAtomicNumber() == IElement.C) {\n                    carbonCount++;\n                } else {\n                    heteroCount++;\n                }\n            }\n        }\n        double mLogP = 1.46 + 0.11 * carbonCount - 0.11 * heteroCount;\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(mLogP),\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "MannholdLogPDescriptor.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "getDummyDescriptorValue", "atoms", "getAtomicNumber", "getAtomicNumber", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}