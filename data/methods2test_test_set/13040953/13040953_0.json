{"test_class": {"identifier": "LicenseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LicenseTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LicenseTest.class)", "var_name": "LOG"}], "file": "rome-modules/src/test/java/com/rometools/modules/cc/types/LicenseTest.java"}, "test_case": {"identifier": "testConcurrent", "parameters": "()", "modifiers": "@Test(timeout = 1000) public", "return": "void", "body": "@Test(timeout = 1000)\n    public void testConcurrent() throws InterruptedException {\n        final AtomicBoolean run = new AtomicBoolean(true);\n        final AtomicLong type = new AtomicLong(0);\n        // Tracking any problems.\n        final AtomicBoolean hadProblem = new AtomicBoolean(false);\n        final AtomicBoolean hadException = new AtomicBoolean(false);\n\n        // This thread keeps on adding new licenses (not very realistic but shows the bug)\n        final Thread addNew = new Thread() {\n            @Override\n            public void run() {\n                try {\n                    while (run.get()) {\n                        final License license = License.findByValue(\"http://creativecommons.org/licenses/\" + type.incrementAndGet() + \"/1\");\n                        if (license == null) {\n                            hadProblem.set(true);\n                        }\n                    }\n                } catch (final Exception e) {\n                    LOG.error(\"Exception in add-new thread\", e);\n                    hadException.set(true);\n                }\n            }\n        };\n\n        // This thread attempts to get ones we know have already been put in.\n        final Thread getExisting = new Thread() {\n            @Override\n            public void run() {\n                final Random rnd = new Random();\n                try {\n                    while (run.get()) {\n                        if (type.intValue() == 0) {\n                            continue;\n                        }\n\n                        final License license = License.findByValue(\"http://creativecommons.org/licenses/\" + rnd.nextInt(type.intValue()) + \"/1\");\n                        if (license == null) {\n                            hadProblem.set(true);\n                        }\n                    }\n                } catch (final Exception e) {\n                    LOG.error(\"Exception in get-existing thread\", e);\n                    hadException.set(true);\n                }\n            }\n        };\n\n        addNew.start();\n        getExisting.start();\n        // Let them do some stuff.\n        Thread.sleep(400);\n        // Get them to both stop.\n        run.set(false);\n        // Allow them a little time to stop.\n        addNew.join(50);\n        getExisting.join(50);\n        // Check we didn't have any problems and they have both stopped.\n        assertFalse(hadProblem.get());\n        assertFalse(hadException.get());\n        assertFalse(addNew.isAlive());\n        assertFalse(getExisting.isAlive());\n    }", "signature": "void testConcurrent()", "full_signature": "@Test(timeout = 1000) public void testConcurrent()", "class_method_signature": "LicenseTest.testConcurrent()", "testcase": true, "constructor": false, "invocations": ["get", "findByValue", "incrementAndGet", "set", "error", "set", "get", "intValue", "findByValue", "nextInt", "intValue", "set", "error", "set", "start", "start", "sleep", "set", "join", "join", "assertFalse", "get", "assertFalse", "get", "assertFalse", "isAlive", "assertFalse", "isAlive"]}, "focal_class": {"identifier": "License", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CC_START = \"http://creativecommons.org/licenses/\";", "modifier": "private static final", "type": "String", "declarator": "CC_START = \"http://creativecommons.org/licenses/\"", "var_name": "CC_START"}, {"original_string": "private static final Map<String, License> lookupLicense = new ConcurrentHashMap<String, License>();", "modifier": "private static final", "type": "Map<String, License>", "declarator": "lookupLicense = new ConcurrentHashMap<String, License>()", "var_name": "lookupLicense"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(License.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(License.class)", "var_name": "LOG"}, {"original_string": "public static final License NO_DERIVS = new License(\"http://creativecommons.org/licenses/nd/1.0/\", new Behaviour[0], new Behaviour[] {\n            Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "NO_DERIVS = new License(\"http://creativecommons.org/licenses/nd/1.0/\", new Behaviour[0], new Behaviour[] {\n            Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "NO_DERIVS"}, {"original_string": "public static final License NO_DERIVS_NONCOMMERCIAL = new License(\"http://creativecommons.org/licenses/nd-nc/1.0/\",\n            new Behaviour[] {Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "NO_DERIVS_NONCOMMERCIAL = new License(\"http://creativecommons.org/licenses/nd-nc/1.0/\",\n            new Behaviour[] {Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "NO_DERIVS_NONCOMMERCIAL"}, {"original_string": "public static final License NONCOMMERCIAL = new License(\"http://creativecommons.org/licenses/nc/1.0/\", new Behaviour[] {Behaviour.NONCOMMERCIAL},\n            new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "NONCOMMERCIAL = new License(\"http://creativecommons.org/licenses/nc/1.0/\", new Behaviour[] {Behaviour.NONCOMMERCIAL},\n            new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "NONCOMMERCIAL"}, {"original_string": "public static final License SHARE_ALIKE = new License(\"http://creativecommons.org/licenses/sa/1.0/\", new Behaviour[] {Behaviour.COPYLEFT}, new Behaviour[] {\n            Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "SHARE_ALIKE = new License(\"http://creativecommons.org/licenses/sa/1.0/\", new Behaviour[] {Behaviour.COPYLEFT}, new Behaviour[] {\n            Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "SHARE_ALIKE"}, {"original_string": "public static final License SHARE_ALIKE_NONCOMMERCIAL = new License(\"http://creativecommons.org/licenses/nc-sa/1.0/\", new Behaviour[] {Behaviour.COPYLEFT,\n            Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "SHARE_ALIKE_NONCOMMERCIAL = new License(\"http://creativecommons.org/licenses/nc-sa/1.0/\", new Behaviour[] {Behaviour.COPYLEFT,\n            Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "SHARE_ALIKE_NONCOMMERCIAL"}, {"original_string": "public static final License SHARE_ALIKE_ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by-sa/2.5/\", new Behaviour[] {Behaviour.COPYLEFT,\n            Behaviour.ATTRIBUTION}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "SHARE_ALIKE_ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by-sa/2.5/\", new Behaviour[] {Behaviour.COPYLEFT,\n            Behaviour.ATTRIBUTION}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "SHARE_ALIKE_ATTRIBUTION"}, {"original_string": "public static final License SHARE_ALIKE_NONCOMMERCIAL_ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by-nc-sa/2.5/\", new Behaviour[] {\n            Behaviour.COPYLEFT, Behaviour.ATTRIBUTION, Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION,\n            Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "SHARE_ALIKE_NONCOMMERCIAL_ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by-nc-sa/2.5/\", new Behaviour[] {\n            Behaviour.COPYLEFT, Behaviour.ATTRIBUTION, Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION,\n            Behaviour.REPRODUCTION})", "var_name": "SHARE_ALIKE_NONCOMMERCIAL_ATTRIBUTION"}, {"original_string": "public static final License NONCOMMERCIAL_ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by-nc/2.5/\", new Behaviour[] {\n            Behaviour.ATTRIBUTION, Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "NONCOMMERCIAL_ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by-nc/2.5/\", new Behaviour[] {\n            Behaviour.ATTRIBUTION, Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "NONCOMMERCIAL_ATTRIBUTION"}, {"original_string": "public static final License NONCOMMERCIAL_ATTRIBUTION_NO_DERIVS = new License(\"http://creativecommons.org/licenses/by-nc-nd/2.5/\", new Behaviour[] {\n            Behaviour.ATTRIBUTION, Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "NONCOMMERCIAL_ATTRIBUTION_NO_DERIVS = new License(\"http://creativecommons.org/licenses/by-nc-nd/2.5/\", new Behaviour[] {\n            Behaviour.ATTRIBUTION, Behaviour.NONCOMMERCIAL}, new Behaviour[] {Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "NONCOMMERCIAL_ATTRIBUTION_NO_DERIVS"}, {"original_string": "public static final License ATTRIBUTION_NO_DERIVS = new License(\"http://creativecommons.org/licenses/by-nd/2.5/\", new Behaviour[] {Behaviour.ATTRIBUTION},\n            new Behaviour[] {Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "ATTRIBUTION_NO_DERIVS = new License(\"http://creativecommons.org/licenses/by-nd/2.5/\", new Behaviour[] {Behaviour.ATTRIBUTION},\n            new Behaviour[] {Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "ATTRIBUTION_NO_DERIVS"}, {"original_string": "public static final License ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by/2.5/\", new Behaviour[] {Behaviour.ATTRIBUTION},\n            new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION});", "modifier": "public static final", "type": "License", "declarator": "ATTRIBUTION = new License(\"http://creativecommons.org/licenses/by/2.5/\", new Behaviour[] {Behaviour.ATTRIBUTION},\n            new Behaviour[] {Behaviour.DERIVATIVE, Behaviour.DISTRIBUTION, Behaviour.REPRODUCTION})", "var_name": "ATTRIBUTION"}, {"original_string": "private final String uri;", "modifier": "private final", "type": "String", "declarator": "uri", "var_name": "uri"}, {"original_string": "private final Behaviour[] permits;", "modifier": "private final", "type": "Behaviour[]", "declarator": "permits", "var_name": "permits"}, {"original_string": "private final Behaviour[] requires;", "modifier": "private final", "type": "Behaviour[]", "declarator": "requires", "var_name": "requires"}], "methods": [{"identifier": "License", "parameters": "(final String uri, final Behaviour[] requires, final Behaviour[] permits)", "modifiers": "public", "return": "", "signature": " License(final String uri, final Behaviour[] requires, final Behaviour[] permits)", "full_signature": "public  License(final String uri, final Behaviour[] requires, final Behaviour[] permits)", "class_method_signature": "License.License(final String uri, final Behaviour[] requires, final Behaviour[] permits)", "testcase": false, "constructor": true}, {"identifier": "findByValue", "parameters": "(final String uri)", "modifiers": "public static", "return": "License", "signature": "License findByValue(final String uri)", "full_signature": "public static License findByValue(final String uri)", "class_method_signature": "License.findByValue(final String uri)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void clear()", "full_signature": "static void clear()", "class_method_signature": "License.clear()", "testcase": false, "constructor": false}, {"identifier": "getPermits", "parameters": "()", "modifiers": "public", "return": "Behaviour[]", "signature": "Behaviour[] getPermits()", "full_signature": "public Behaviour[] getPermits()", "class_method_signature": "License.getPermits()", "testcase": false, "constructor": false}, {"identifier": "getRequires", "parameters": "()", "modifiers": "public", "return": "Behaviour[]", "signature": "Behaviour[] getRequires()", "full_signature": "public Behaviour[] getRequires()", "class_method_signature": "License.getRequires()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "License.toString()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getValue()", "full_signature": "public String getValue()", "class_method_signature": "License.getValue()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "License.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "License.hashCode()", "testcase": false, "constructor": false}], "file": "rome-modules/src/main/java/com/rometools/modules/cc/types/License.java"}, "focal_method": {"identifier": "findByValue", "parameters": "(final String uri)", "modifiers": "public static", "return": "License", "body": "public static License findByValue(final String uri) {\n        License found = License.lookupLicense.get(uri);\n\n        // No I am going to try an guess about unknown licenses\n        // This is try and match known CC licenses of other versions or various URLs to\n        // current licenses, then make a new one with the same permissions.\n        if (found == null && uri.startsWith(\"http://\") && uri.toLowerCase().indexOf(\"creativecommons.org\") != -1) {\n            final Iterator<String> it = License.lookupLicense.keySet().iterator();\n            while (it.hasNext() && found == null) {\n                final String key = it.next();\n                try {\n                    if (key.startsWith(CC_START)) {\n                        final String licensePath = key.substring(CC_START.length(), key.length());\n                        final StringTokenizer tok = new StringTokenizer(licensePath, \"/\");\n                        final String license = tok.nextToken();\n                        // final String version = tok.nextToken();\n                        if (uri.toLowerCase().indexOf(\"creativecommons.org/licenses/\" + license) != -1) {\n                            final License current = lookupLicense.get(key);\n                            found = new License(uri, current.getRequires(), current.getPermits());\n                        }\n                    }\n                } catch (final Exception e) {\n                    LOG.error(\"Error\", e);\n                }\n            }\n        }\n        // OK, we got here. If we haven't found a match, return a new License with unknown\n        // permissions.\n        if (found == null) {\n            found = new License(uri, null, null);\n        }\n        return found;\n    }", "signature": "License findByValue(final String uri)", "full_signature": "public static License findByValue(final String uri)", "class_method_signature": "License.findByValue(final String uri)", "testcase": false, "constructor": false, "invocations": ["get", "startsWith", "indexOf", "toLowerCase", "iterator", "keySet", "hasNext", "next", "startsWith", "substring", "length", "length", "nextToken", "indexOf", "toLowerCase", "get", "getRequires", "getPermits", "error"]}, "repository": {"repo_id": 13040953, "url": "https://github.com/rometools/rome", "stars": 594, "created": "9/23/2013 4:35:35 PM +00:00", "updates": "2020-01-16T10:28:05+00:00", "fork": "False", "license": "licensed"}}