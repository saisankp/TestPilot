{"test_class": {"identifier": "HeaderFunctionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/http/HeaderFunctionsTest.java"}, "test_case": {"identifier": "testUnresolvableHeaderName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnresolvableHeaderName() {\n        Consumer<EvalScope> c = setAlways(\"gugus\",\"{no-exist}\");\n        MultiMap headers = new CaseInsensitiveHeaders();\n        EvalScope evalScope = new EvalScope(headers);\n        c.accept(evalScope);\n        Assert.assertNotNull(\"eval error message present\", evalScope.getErrorMessage());\n    }", "signature": "void testUnresolvableHeaderName()", "full_signature": "@Test public void testUnresolvableHeaderName()", "class_method_signature": "HeaderFunctionsTest.testUnresolvableHeaderName()", "testcase": true, "constructor": false, "invocations": ["setAlways", "accept", "assertNotNull", "getErrorMessage"]}, "focal_class": {"identifier": "HeaderFunctions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(HeaderFunctions.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(HeaderFunctions.class)", "var_name": "LOG"}, {"original_string": "private static final EvalScope NO_ERROR_SCOPE = new EvalScope(null);", "modifier": "private static final", "type": "EvalScope", "declarator": "NO_ERROR_SCOPE = new EvalScope(null)", "var_name": "NO_ERROR_SCOPE"}, {"original_string": "public static final HeaderFunction DO_NOTHING = (headers) -> NO_ERROR_SCOPE;", "modifier": "public static final", "type": "HeaderFunction", "declarator": "DO_NOTHING = (headers) -> NO_ERROR_SCOPE", "var_name": "DO_NOTHING"}, {"original_string": "private static final Pattern VARIABLE_PATTERN = Pattern.compile(\"[{](.+?)[}]\");", "modifier": "private static final", "type": "Pattern", "declarator": "VARIABLE_PATTERN = Pattern.compile(\"[{](.+?)[}]\")", "var_name": "VARIABLE_PATTERN"}], "methods": [{"identifier": "parseFromJson", "parameters": "(JsonArray config)", "modifiers": "public static", "return": "HeaderFunction", "signature": "HeaderFunction parseFromJson(JsonArray config)", "full_signature": "public static HeaderFunction parseFromJson(JsonArray config)", "class_method_signature": "HeaderFunctions.parseFromJson(JsonArray config)", "testcase": false, "constructor": false}, {"identifier": "parseStaticHeadersFromJson", "parameters": "(JsonObject staticHeaders)", "modifiers": "@Deprecated public static", "return": "HeaderFunction", "signature": "HeaderFunction parseStaticHeadersFromJson(JsonObject staticHeaders)", "full_signature": "@Deprecated public static HeaderFunction parseStaticHeadersFromJson(JsonObject staticHeaders)", "class_method_signature": "HeaderFunctions.parseStaticHeadersFromJson(JsonObject staticHeaders)", "testcase": false, "constructor": false}, {"identifier": "wrapConsumerChain", "parameters": "(Consumer<EvalScope> chain)", "modifiers": "private static", "return": "HeaderFunction", "signature": "HeaderFunction wrapConsumerChain(Consumer<EvalScope> chain)", "full_signature": "private static HeaderFunction wrapConsumerChain(Consumer<EvalScope> chain)", "class_method_signature": "HeaderFunctions.wrapConsumerChain(Consumer<EvalScope> chain)", "testcase": false, "constructor": false}, {"identifier": "parseOneFromJason", "parameters": "(JsonArray config, JsonObject rule)", "modifiers": "private static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> parseOneFromJason(JsonArray config, JsonObject rule)", "full_signature": "private static Consumer<EvalScope> parseOneFromJason(JsonArray config, JsonObject rule)", "class_method_signature": "HeaderFunctions.parseOneFromJason(JsonArray config, JsonObject rule)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String headerName)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> remove(String headerName)", "full_signature": "public static Consumer<EvalScope> remove(String headerName)", "class_method_signature": "HeaderFunctions.remove(String headerName)", "testcase": false, "constructor": false}, {"identifier": "setAlways", "parameters": "(String headerName, String expression)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> setAlways(String headerName, String expression)", "full_signature": "public static Consumer<EvalScope> setAlways(String headerName, String expression)", "class_method_signature": "HeaderFunctions.setAlways(String headerName, String expression)", "testcase": false, "constructor": false}, {"identifier": "setIfAbsent", "parameters": "(String headerName, String expression)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> setIfAbsent(String headerName, String expression)", "full_signature": "public static Consumer<EvalScope> setIfAbsent(String headerName, String expression)", "class_method_signature": "HeaderFunctions.setIfAbsent(String headerName, String expression)", "testcase": false, "constructor": false}, {"identifier": "setIfPresent", "parameters": "(String headerName, String expression)", "modifiers": "public static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> setIfPresent(String headerName, String expression)", "full_signature": "public static Consumer<EvalScope> setIfPresent(String headerName, String expression)", "class_method_signature": "HeaderFunctions.setIfPresent(String headerName, String expression)", "testcase": false, "constructor": false}, {"identifier": "newExpressionEvaluator", "parameters": "(String expression)", "modifiers": "private static", "return": "Function<EvalScope, String>", "signature": "Function<EvalScope, String> newExpressionEvaluator(String expression)", "full_signature": "private static Function<EvalScope, String> newExpressionEvaluator(String expression)", "class_method_signature": "HeaderFunctions.newExpressionEvaluator(String expression)", "testcase": false, "constructor": false}, {"identifier": "andThenFix", "parameters": "(Consumer<EvalScope> c, String fix)", "modifiers": "private static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> andThenFix(Consumer<EvalScope> c, String fix)", "full_signature": "private static Consumer<EvalScope> andThenFix(Consumer<EvalScope> c, String fix)", "class_method_signature": "HeaderFunctions.andThenFix(Consumer<EvalScope> c, String fix)", "testcase": false, "constructor": false}, {"identifier": "andThenVar", "parameters": "(Consumer<EvalScope> c, String varName, String expression)", "modifiers": "private static", "return": "Consumer<EvalScope>", "signature": "Consumer<EvalScope> andThenVar(Consumer<EvalScope> c, String varName, String expression)", "full_signature": "private static Consumer<EvalScope> andThenVar(Consumer<EvalScope> c, String varName, String expression)", "class_method_signature": "HeaderFunctions.andThenVar(Consumer<EvalScope> c, String varName, String expression)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/http/HeaderFunctions.java"}, "focal_method": {"identifier": "setAlways", "parameters": "(String headerName, String expression)", "modifiers": "public static", "return": "Consumer<EvalScope>", "body": "public static Consumer<EvalScope> setAlways(String headerName, String expression) {\n        final Function<EvalScope, String> exprEval = newExpressionEvaluator(expression);\n        return (scope) -> {\n            String value = exprEval.apply(scope);\n            scope.headers.set(headerName, value);\n        };\n    }", "signature": "Consumer<EvalScope> setAlways(String headerName, String expression)", "full_signature": "public static Consumer<EvalScope> setAlways(String headerName, String expression)", "class_method_signature": "HeaderFunctions.setAlways(String headerName, String expression)", "testcase": false, "constructor": false, "invocations": ["newExpressionEvaluator", "apply", "set"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}