{"test_class": {"identifier": "ApiControllerTest", "superclass": "extends AbstractMvcTest", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static SharedKafkaTestResource sharedKafkaTestResource = new SharedKafkaTestResource();", "modifier": "@ClassRule\n    public static", "type": "SharedKafkaTestResource", "declarator": "sharedKafkaTestResource = new SharedKafkaTestResource()", "var_name": "sharedKafkaTestResource"}, {"original_string": "@Autowired\n    private ClusterTestTools clusterTestTools;", "modifier": "@Autowired\n    private", "type": "ClusterTestTools", "declarator": "clusterTestTools", "var_name": "clusterTestTools"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/controller/api/ApiControllerTest.java"}, "test_case": {"identifier": "test_listTopics_noSearchString", "parameters": "()", "modifiers": "@Test @Transactional public", "return": "void", "body": "@Test\n    @Transactional\n    public void test_listTopics_noSearchString() throws Exception {\n        // Create a cluster.\n        final Cluster cluster = clusterTestTools.createCluster(\n            \"Test Cluster\",\n            sharedKafkaTestResource.getKafkaConnectString()\n        );\n\n        // Create some topics\n        final String expectedTopic1 = \"A-ExpectedTopic1-\" + System.currentTimeMillis();\n        final String expectedTopic2= \"C-ExpectedTopic2-\" + System.currentTimeMillis();\n        final String expectedTopic3 = \"B-ExpectedTopic3-\" + System.currentTimeMillis();\n\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(expectedTopic1, 1, (short) 1);\n\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(expectedTopic2, 1, (short) 1);\n\n        sharedKafkaTestResource\n            .getKafkaTestUtils()\n            .createTopic(expectedTopic3, 1, (short) 1);\n\n        // Hit end point\n        mockMvc\n            .perform(get(\"/api/cluster/\" + cluster.getId() + \"/topics/list\")\n                .with(user(nonAdminUserDetails))\n                .with(csrf())\n                .contentType(MediaType.APPLICATION_JSON)\n            )\n            .andDo(print())\n            .andExpect(status().isOk())\n\n            // Validate all topics show up.\n            .andExpect(content().string(containsString(expectedTopic1)))\n            .andExpect(content().string(containsString(expectedTopic2)))\n            .andExpect(content().string(containsString(expectedTopic3)));\n    }", "signature": "void test_listTopics_noSearchString()", "full_signature": "@Test @Transactional public void test_listTopics_noSearchString()", "class_method_signature": "ApiControllerTest.test_listTopics_noSearchString()", "testcase": true, "constructor": false, "invocations": ["createCluster", "getKafkaConnectString", "currentTimeMillis", "currentTimeMillis", "currentTimeMillis", "createTopic", "getKafkaTestUtils", "createTopic", "getKafkaTestUtils", "createTopic", "getKafkaTestUtils", "andExpect", "andExpect", "andExpect", "andExpect", "andDo", "perform", "contentType", "with", "with", "get", "getId", "user", "csrf", "print", "isOk", "status", "string", "content", "containsString", "string", "content", "containsString", "string", "content", "containsString"]}, "focal_class": {"identifier": "ApiController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ViewRepository viewRepository;", "modifier": "@Autowired\n    private", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}, {"original_string": "@Autowired\n    private ClusterRepository clusterRepository;", "modifier": "@Autowired\n    private", "type": "ClusterRepository", "declarator": "clusterRepository", "var_name": "clusterRepository"}, {"original_string": "@Autowired\n    private FilterRepository filterRepository;", "modifier": "@Autowired\n    private", "type": "FilterRepository", "declarator": "filterRepository", "var_name": "filterRepository"}, {"original_string": "@Autowired\n    private WebKafkaConsumerFactory webKafkaConsumerFactory;", "modifier": "@Autowired\n    private", "type": "WebKafkaConsumerFactory", "declarator": "webKafkaConsumerFactory", "var_name": "webKafkaConsumerFactory"}, {"original_string": "@Autowired\n    private KafkaOperationsFactory kafkaOperationsFactory;", "modifier": "@Autowired\n    private", "type": "KafkaOperationsFactory", "declarator": "kafkaOperationsFactory", "var_name": "kafkaOperationsFactory"}], "methods": [{"identifier": "consume", "parameters": "(\n        @PathVariable final Long id,\n        @RequestBody final ConsumeRequest consumeRequest)", "modifiers": "@ResponseBody @RequestMapping(path = \"/consumer/view/{id}\", method = RequestMethod.POST, produces = \"application/json\") public", "return": "KafkaResults", "signature": "KafkaResults consume(\n        @PathVariable final Long id,\n        @RequestBody final ConsumeRequest consumeRequest)", "full_signature": "@ResponseBody @RequestMapping(path = \"/consumer/view/{id}\", method = RequestMethod.POST, produces = \"application/json\") public KafkaResults consume(\n        @PathVariable final Long id,\n        @RequestBody final ConsumeRequest consumeRequest)", "class_method_signature": "ApiController.consume(\n        @PathVariable final Long id,\n        @RequestBody final ConsumeRequest consumeRequest)", "testcase": false, "constructor": false}, {"identifier": "setConsumerOffsets", "parameters": "(\n        @PathVariable final Long id,\n        @RequestBody final Map<Integer, Long> partitionOffsetMap\n    )", "modifiers": "@ResponseBody @RequestMapping( path = \"/consumer/view/{id}/offsets\", method = RequestMethod.POST, produces = \"application/json\" ) public", "return": "ConsumerState", "signature": "ConsumerState setConsumerOffsets(\n        @PathVariable final Long id,\n        @RequestBody final Map<Integer, Long> partitionOffsetMap\n    )", "full_signature": "@ResponseBody @RequestMapping( path = \"/consumer/view/{id}/offsets\", method = RequestMethod.POST, produces = \"application/json\" ) public ConsumerState setConsumerOffsets(\n        @PathVariable final Long id,\n        @RequestBody final Map<Integer, Long> partitionOffsetMap\n    )", "class_method_signature": "ApiController.setConsumerOffsets(\n        @PathVariable final Long id,\n        @RequestBody final Map<Integer, Long> partitionOffsetMap\n    )", "testcase": false, "constructor": false}, {"identifier": "setConsumerOffsetsByTimestamp", "parameters": "(\n        @PathVariable final Long id,\n        @PathVariable final Long timestamp\n    )", "modifiers": "@ResponseBody @RequestMapping( path = \"/consumer/view/{id}/timestamp/{timestamp}\", method = RequestMethod.POST, produces = \"application/json\" ) public", "return": "ConsumerState", "signature": "ConsumerState setConsumerOffsetsByTimestamp(\n        @PathVariable final Long id,\n        @PathVariable final Long timestamp\n    )", "full_signature": "@ResponseBody @RequestMapping( path = \"/consumer/view/{id}/timestamp/{timestamp}\", method = RequestMethod.POST, produces = \"application/json\" ) public ConsumerState setConsumerOffsetsByTimestamp(\n        @PathVariable final Long id,\n        @PathVariable final Long timestamp\n    )", "class_method_signature": "ApiController.setConsumerOffsetsByTimestamp(\n        @PathVariable final Long id,\n        @PathVariable final Long timestamp\n    )", "testcase": false, "constructor": false}, {"identifier": "getPartitionsForView", "parameters": "(@PathVariable final Long id)", "modifiers": "@ResponseBody @RequestMapping(path = \"/view/{id}/partitions\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "Collection<Integer>", "signature": "Collection<Integer> getPartitionsForView(@PathVariable final Long id)", "full_signature": "@ResponseBody @RequestMapping(path = \"/view/{id}/partitions\", method = RequestMethod.GET, produces = \"application/json\") public Collection<Integer> getPartitionsForView(@PathVariable final Long id)", "class_method_signature": "ApiController.getPartitionsForView(@PathVariable final Long id)", "testcase": false, "constructor": false}, {"identifier": "getTopics", "parameters": "(@PathVariable final Long id, @RequestParam(required = false) final String search)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topics/list\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "List<TopicListing>", "signature": "List<TopicListing> getTopics(@PathVariable final Long id, @RequestParam(required = false) final String search)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topics/list\", method = RequestMethod.GET, produces = \"application/json\") public List<TopicListing> getTopics(@PathVariable final Long id, @RequestParam(required = false) final String search)", "class_method_signature": "ApiController.getTopics(@PathVariable final Long id, @RequestParam(required = false) final String search)", "testcase": false, "constructor": false}, {"identifier": "getTopicDetails", "parameters": "(@PathVariable final Long id, @PathVariable final String topic)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topic/{topic}/details\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "TopicDetails", "signature": "TopicDetails getTopicDetails(@PathVariable final Long id, @PathVariable final String topic)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topic/{topic}/details\", method = RequestMethod.GET, produces = \"application/json\") public TopicDetails getTopicDetails(@PathVariable final Long id, @PathVariable final String topic)", "class_method_signature": "ApiController.getTopicDetails(@PathVariable final Long id, @PathVariable final String topic)", "testcase": false, "constructor": false}, {"identifier": "getTopicConfig", "parameters": "(@PathVariable final Long id, @PathVariable final String topic)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topic/{topic}/config\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "List<ConfigItem>", "signature": "List<ConfigItem> getTopicConfig(@PathVariable final Long id, @PathVariable final String topic)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topic/{topic}/config\", method = RequestMethod.GET, produces = \"application/json\") public List<ConfigItem> getTopicConfig(@PathVariable final Long id, @PathVariable final String topic)", "class_method_signature": "ApiController.getTopicConfig(@PathVariable final Long id, @PathVariable final String topic)", "testcase": false, "constructor": false}, {"identifier": "getBrokerConfig", "parameters": "(@PathVariable final Long id, @PathVariable final String brokerId)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/broker/{brokerId}/config\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "List<ConfigItem>", "signature": "List<ConfigItem> getBrokerConfig(@PathVariable final Long id, @PathVariable final String brokerId)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/broker/{brokerId}/config\", method = RequestMethod.GET, produces = \"application/json\") public List<ConfigItem> getBrokerConfig(@PathVariable final Long id, @PathVariable final String brokerId)", "class_method_signature": "ApiController.getBrokerConfig(@PathVariable final Long id, @PathVariable final String brokerId)", "testcase": false, "constructor": false}, {"identifier": "getAllTopicsDetails", "parameters": "(@PathVariable final Long id)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topics/details\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "Collection<TopicDetails>", "signature": "Collection<TopicDetails> getAllTopicsDetails(@PathVariable final Long id)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/topics/details\", method = RequestMethod.GET, produces = \"application/json\") public Collection<TopicDetails> getAllTopicsDetails(@PathVariable final Long id)", "class_method_signature": "ApiController.getAllTopicsDetails(@PathVariable final Long id)", "testcase": false, "constructor": false}, {"identifier": "createTopic", "parameters": "(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/create/topic\", method = RequestMethod.POST, produces = \"application/json\") public", "return": "ResultResponse", "signature": "ResultResponse createTopic(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/create/topic\", method = RequestMethod.POST, produces = \"application/json\") public ResultResponse createTopic(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "class_method_signature": "ApiController.createTopic(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "testcase": false, "constructor": false}, {"identifier": "modifyTopicConfig", "parameters": "(\n        @PathVariable final Long id,\n        @RequestBody final ModifyTopicConfigRequest modifyTopicConfigRequest\n    )", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/modify/topic\", method = RequestMethod.POST, produces = \"application/json\") public", "return": "List<ConfigItem>", "signature": "List<ConfigItem> modifyTopicConfig(\n        @PathVariable final Long id,\n        @RequestBody final ModifyTopicConfigRequest modifyTopicConfigRequest\n    )", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/modify/topic\", method = RequestMethod.POST, produces = \"application/json\") public List<ConfigItem> modifyTopicConfig(\n        @PathVariable final Long id,\n        @RequestBody final ModifyTopicConfigRequest modifyTopicConfigRequest\n    )", "class_method_signature": "ApiController.modifyTopicConfig(\n        @PathVariable final Long id,\n        @RequestBody final ModifyTopicConfigRequest modifyTopicConfigRequest\n    )", "testcase": false, "constructor": false}, {"identifier": "deleteTopic", "parameters": "(@PathVariable final Long id, @RequestBody final DeleteTopicRequest deleteTopicRequest)", "modifiers": "public", "return": "ResultResponse", "signature": "ResultResponse deleteTopic(@PathVariable final Long id, @RequestBody final DeleteTopicRequest deleteTopicRequest)", "full_signature": "public ResultResponse deleteTopic(@PathVariable final Long id, @RequestBody final DeleteTopicRequest deleteTopicRequest)", "class_method_signature": "ApiController.deleteTopic(@PathVariable final Long id, @RequestBody final DeleteTopicRequest deleteTopicRequest)", "testcase": false, "constructor": false}, {"identifier": "getClusterNodes", "parameters": "(@PathVariable final Long id)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/nodes\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "List<NodeDetails>", "signature": "List<NodeDetails> getClusterNodes(@PathVariable final Long id)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/nodes\", method = RequestMethod.GET, produces = \"application/json\") public List<NodeDetails> getClusterNodes(@PathVariable final Long id)", "class_method_signature": "ApiController.getClusterNodes(@PathVariable final Long id)", "testcase": false, "constructor": false}, {"identifier": "getFilterOptions", "parameters": "(@PathVariable final Long id)", "modifiers": "@ResponseBody @RequestMapping(path = \"/filter/{id}/options\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "String[]", "signature": "String[] getFilterOptions(@PathVariable final Long id)", "full_signature": "@ResponseBody @RequestMapping(path = \"/filter/{id}/options\", method = RequestMethod.GET, produces = \"application/json\") public String[] getFilterOptions(@PathVariable final Long id)", "class_method_signature": "ApiController.getFilterOptions(@PathVariable final Long id)", "testcase": false, "constructor": false}, {"identifier": "listConsumers", "parameters": "(@PathVariable final Long id)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/consumers\", method = RequestMethod.GET, produces = \"application/json\") public", "return": "List<ConsumerGroupIdentifier>", "signature": "List<ConsumerGroupIdentifier> listConsumers(@PathVariable final Long id)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/consumers\", method = RequestMethod.GET, produces = \"application/json\") public List<ConsumerGroupIdentifier> listConsumers(@PathVariable final Long id)", "class_method_signature": "ApiController.listConsumers(@PathVariable final Long id)", "testcase": false, "constructor": false}, {"identifier": "listConsumersAndDetails", "parameters": "(@PathVariable final Long id)", "modifiers": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumersAndDetails\", method = RequestMethod.GET, produces = \"application/json\" ) public", "return": "List<ConsumerGroupDetails>", "signature": "List<ConsumerGroupDetails> listConsumersAndDetails(@PathVariable final Long id)", "full_signature": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumersAndDetails\", method = RequestMethod.GET, produces = \"application/json\" ) public List<ConsumerGroupDetails> listConsumersAndDetails(@PathVariable final Long id)", "class_method_signature": "ApiController.listConsumersAndDetails(@PathVariable final Long id)", "testcase": false, "constructor": false}, {"identifier": "getConsumerDetails", "parameters": "(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "modifiers": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumer/{consumerGroupId}/details\", method = RequestMethod.GET, produces = \"application/json\" ) public", "return": "ConsumerGroupDetails", "signature": "ConsumerGroupDetails getConsumerDetails(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "full_signature": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumer/{consumerGroupId}/details\", method = RequestMethod.GET, produces = \"application/json\" ) public ConsumerGroupDetails getConsumerDetails(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "class_method_signature": "ApiController.getConsumerDetails(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "testcase": false, "constructor": false}, {"identifier": "getConsumerOffsets", "parameters": "(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "modifiers": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumer/{consumerGroupId}/offsets\", method = RequestMethod.GET, produces = \"application/json\" ) public", "return": "ConsumerGroupOffsets", "signature": "ConsumerGroupOffsets getConsumerOffsets(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "full_signature": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumer/{consumerGroupId}/offsets\", method = RequestMethod.GET, produces = \"application/json\" ) public ConsumerGroupOffsets getConsumerOffsets(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "class_method_signature": "ApiController.getConsumerOffsets(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "testcase": false, "constructor": false}, {"identifier": "getConsumerOffsetsWithTailPositions", "parameters": "(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "modifiers": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumer/{consumerGroupId}/offsetsAndTailPositions\", method = RequestMethod.GET, produces = \"application/json\" ) public", "return": "ConsumerGroupOffsetsWithTailPositions", "signature": "ConsumerGroupOffsetsWithTailPositions getConsumerOffsetsWithTailPositions(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "full_signature": "@ResponseBody @RequestMapping( path = \"/cluster/{id}/consumer/{consumerGroupId}/offsetsAndTailPositions\", method = RequestMethod.GET, produces = \"application/json\" ) public ConsumerGroupOffsetsWithTailPositions getConsumerOffsetsWithTailPositions(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "class_method_signature": "ApiController.getConsumerOffsetsWithTailPositions(\n        @PathVariable final Long id,\n        @PathVariable final String consumerGroupId\n    )", "testcase": false, "constructor": false}, {"identifier": "removeConsumer", "parameters": "(\n        @PathVariable final Long id,\n        @RequestBody final ConsumerRemoveRequest consumerRemoveRequest)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/consumer/remove\", method = RequestMethod.POST, produces = \"application/json\") public", "return": "boolean", "signature": "boolean removeConsumer(\n        @PathVariable final Long id,\n        @RequestBody final ConsumerRemoveRequest consumerRemoveRequest)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/consumer/remove\", method = RequestMethod.POST, produces = \"application/json\") public boolean removeConsumer(\n        @PathVariable final Long id,\n        @RequestBody final ConsumerRemoveRequest consumerRemoveRequest)", "class_method_signature": "ApiController.removeConsumer(\n        @PathVariable final Long id,\n        @RequestBody final ConsumerRemoveRequest consumerRemoveRequest)", "testcase": false, "constructor": false}, {"identifier": "handleApiException", "parameters": "(final ApiException exception)", "modifiers": "@ResponseBody @ExceptionHandler(ApiException.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public", "return": "ApiErrorResponse", "signature": "ApiErrorResponse handleApiException(final ApiException exception)", "full_signature": "@ResponseBody @ExceptionHandler(ApiException.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public ApiErrorResponse handleApiException(final ApiException exception)", "class_method_signature": "ApiController.handleApiException(final ApiException exception)", "testcase": false, "constructor": false}, {"identifier": "createOperationsClient", "parameters": "(final Cluster cluster)", "modifiers": "private", "return": "KafkaOperations", "signature": "KafkaOperations createOperationsClient(final Cluster cluster)", "full_signature": "private KafkaOperations createOperationsClient(final Cluster cluster)", "class_method_signature": "ApiController.createOperationsClient(final Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "(final View view, final Collection<FilterDefinition> filterDefinitions)", "modifiers": "private", "return": "WebKafkaConsumer", "signature": "WebKafkaConsumer setup(final View view, final Collection<FilterDefinition> filterDefinitions)", "full_signature": "private WebKafkaConsumer setup(final View view, final Collection<FilterDefinition> filterDefinitions)", "class_method_signature": "ApiController.setup(final View view, final Collection<FilterDefinition> filterDefinitions)", "testcase": false, "constructor": false}, {"identifier": "addAttributes", "parameters": "(final Model model)", "modifiers": "@Override @ModelAttribute public", "return": "void", "signature": "void addAttributes(final Model model)", "full_signature": "@Override @ModelAttribute public void addAttributes(final Model model)", "class_method_signature": "ApiController.addAttributes(final Model model)", "testcase": false, "constructor": false}, {"identifier": "retrieveClusterById", "parameters": "(final Long id)", "modifiers": "private", "return": "Cluster", "signature": "Cluster retrieveClusterById(final Long id)", "full_signature": "private Cluster retrieveClusterById(final Long id)", "class_method_signature": "ApiController.retrieveClusterById(final Long id)", "testcase": false, "constructor": false}, {"identifier": "retrieveViewById", "parameters": "(final Long id)", "modifiers": "private", "return": "View", "signature": "View retrieveViewById(final Long id)", "full_signature": "private View retrieveViewById(final Long id)", "class_method_signature": "ApiController.retrieveViewById(final Long id)", "testcase": false, "constructor": false}, {"identifier": "retrieveFilterById", "parameters": "(final Long id)", "modifiers": "private", "return": "Filter", "signature": "Filter retrieveFilterById(final Long id)", "full_signature": "private Filter retrieveFilterById(final Long id)", "class_method_signature": "ApiController.retrieveFilterById(final Long id)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/controller/api/ApiController.java"}, "focal_method": {"identifier": "createTopic", "parameters": "(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "modifiers": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/create/topic\", method = RequestMethod.POST, produces = \"application/json\") public", "return": "ResultResponse", "body": "@ResponseBody\n    @RequestMapping(path = \"/cluster/{id}/create/topic\", method = RequestMethod.POST, produces = \"application/json\")\n    public ResultResponse createTopic(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest) {\n        // Retrieve cluster\n        final Cluster cluster = retrieveClusterById(id);\n\n        final String name = createTopicRequest.getName();\n        if (name == null || name.trim().isEmpty()) {\n            throw new ApiException(\"CreateTopic\", \"Invalid topic name\");\n        }\n\n        final Integer partitions = createTopicRequest.getPartitions();\n        if (partitions == null || partitions < 1) {\n            throw new ApiException(\"CreateTopic\", \"Invalid partitions value\");\n        }\n\n        final Short replicas = createTopicRequest.getReplicas();\n        if (replicas == null || replicas < 1) {\n            throw new ApiException(\"CreateTopic\", \"Invalid replicas value\");\n        }\n\n        final CreateTopic createTopic = new CreateTopic(name, partitions, replicas);\n\n        // Create new Operational Client\n        try (final KafkaOperations operations = createOperationsClient(cluster)) {\n            final boolean result = operations.createTopic(createTopic);\n\n            // Quick n dirty json response\n            return new ResultResponse(\"CreateTopic\", result, \"Created topic '\" + createTopicRequest.getName() + \"'\");\n        } catch (final Exception e) {\n            throw new ApiException(\"CreateTopic\", e);\n        }\n    }", "signature": "ResultResponse createTopic(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "full_signature": "@ResponseBody @RequestMapping(path = \"/cluster/{id}/create/topic\", method = RequestMethod.POST, produces = \"application/json\") public ResultResponse createTopic(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "class_method_signature": "ApiController.createTopic(@PathVariable final Long id, @RequestBody final CreateTopicRequest createTopicRequest)", "testcase": false, "constructor": false, "invocations": ["retrieveClusterById", "getName", "isEmpty", "trim", "getPartitions", "getReplicas", "createOperationsClient", "createTopic", "getName"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}