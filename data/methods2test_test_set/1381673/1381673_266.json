{"test_class": {"identifier": "EvalHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/util/EvalHelperTest.java"}, "test_case": {"identifier": "testNormalizeSpace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNormalizeSpace() {\n        assertNull(normalizeVariableName(null));\n        assertEquals(\"\", normalizeVariableName(\"\"));\n        assertEquals(\"\", normalizeVariableName(\" \"));\n        assertEquals(\"\", normalizeVariableName(\"\\t\"));\n        assertEquals(\"\", normalizeVariableName(\"\\n\"));\n        assertEquals(\"\", normalizeVariableName(\"\\u0009\"));\n        assertEquals(\"\", normalizeVariableName(\"\\u000B\"));\n        assertEquals(\"\", normalizeVariableName(\"\\u000C\"));\n        assertEquals(\"\", normalizeVariableName(\"\\u001C\"));\n        assertEquals(\"\", normalizeVariableName(\"\\u001D\"));\n        assertEquals(\"\", normalizeVariableName(\"\\u001E\"));\n        assertEquals(\"\", normalizeVariableName(\"\\u001F\"));\n        assertEquals(\"\", normalizeVariableName(\"\\f\"));\n        assertEquals(\"\", normalizeVariableName(\"\\r\"));\n        assertEquals(\"a\", normalizeVariableName(\"  a  \"));\n        assertEquals(\"a b c\", normalizeVariableName(\"  a  b   c  \"));\n        assertEquals(\"a b c\", normalizeVariableName(\"a\\t\\f\\r  b\\u000B   c\\n\"));\n        assertEquals(\"a b c\", normalizeVariableName(\"a\\t\\f\\r  \\u00A0\\u00A0b\\u000B   c\\n\"));\n        assertEquals(\"b\", normalizeVariableName(\" b\"));\n        assertEquals(\"b\", normalizeVariableName(\"b \"));\n        assertEquals(\"ab c\", normalizeVariableName(\"ab c  \"));\n        assertEquals(\"a b\", normalizeVariableName(\"a\\u00A0b\"));\n    }", "signature": "void testNormalizeSpace()", "full_signature": "@Test public void testNormalizeSpace()", "class_method_signature": "EvalHelperTest.testNormalizeSpace()", "testcase": true, "constructor": false, "invocations": ["assertNull", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName", "assertEquals", "normalizeVariableName"]}, "focal_class": {"identifier": "EvalHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = LoggerFactory.getLogger( EvalHelper.class );", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger( EvalHelper.class )", "var_name": "LOG"}, {"original_string": "private static final Map<String, Method> accessorCache = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<String, Method>", "declarator": "accessorCache = new ConcurrentHashMap<>()", "var_name": "accessorCache"}], "methods": [{"identifier": "normalizeVariableName", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String normalizeVariableName(String name)", "full_signature": "public static String normalizeVariableName(String name)", "class_method_signature": "EvalHelper.normalizeVariableName(String name)", "testcase": false, "constructor": false}, {"identifier": "isValidChar", "parameters": "(char c)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValidChar(char c)", "full_signature": "private static boolean isValidChar(char c)", "class_method_signature": "EvalHelper.isValidChar(char c)", "testcase": false, "constructor": false}, {"identifier": "getBigDecimalOrNull", "parameters": "(Object value)", "modifiers": "public static", "return": "BigDecimal", "signature": "BigDecimal getBigDecimalOrNull(Object value)", "full_signature": "public static BigDecimal getBigDecimalOrNull(Object value)", "class_method_signature": "EvalHelper.getBigDecimalOrNull(Object value)", "testcase": false, "constructor": false}, {"identifier": "coerceNumber", "parameters": "(Object value)", "modifiers": "public static", "return": "Object", "signature": "Object coerceNumber(Object value)", "full_signature": "public static Object coerceNumber(Object value)", "class_method_signature": "EvalHelper.coerceNumber(Object value)", "testcase": false, "constructor": false}, {"identifier": "getBooleanOrNull", "parameters": "(Object value)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean getBooleanOrNull(Object value)", "full_signature": "public static Boolean getBooleanOrNull(Object value)", "class_method_signature": "EvalHelper.getBooleanOrNull(Object value)", "testcase": false, "constructor": false}, {"identifier": "unescapeString", "parameters": "(String text)", "modifiers": "public static", "return": "String", "signature": "String unescapeString(String text)", "full_signature": "public static String unescapeString(String text)", "class_method_signature": "EvalHelper.unescapeString(String text)", "testcase": false, "constructor": false}, {"identifier": "getDefinedValue", "parameters": "(final Object current, final String property)", "modifiers": "public static", "return": "PropertyValueResult", "signature": "PropertyValueResult getDefinedValue(final Object current, final String property)", "full_signature": "public static PropertyValueResult getDefinedValue(final Object current, final String property)", "class_method_signature": "EvalHelper.getDefinedValue(final Object current, final String property)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final Object current, final String property)", "modifiers": "public static", "return": "Object", "signature": "Object getValue(final Object current, final String property)", "full_signature": "public static Object getValue(final Object current, final String property)", "class_method_signature": "EvalHelper.getValue(final Object current, final String property)", "testcase": false, "constructor": false}, {"identifier": "getGenericAccessor", "parameters": "(Class<?> clazz, String field)", "modifiers": "public static", "return": "Method", "signature": "Method getGenericAccessor(Class<?> clazz, String field)", "full_signature": "public static Method getGenericAccessor(Class<?> clazz, String field)", "class_method_signature": "EvalHelper.getGenericAccessor(Class<?> clazz, String field)", "testcase": false, "constructor": false}, {"identifier": "clearGenericAccessorCache", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearGenericAccessorCache()", "full_signature": "public static void clearGenericAccessorCache()", "class_method_signature": "EvalHelper.clearGenericAccessorCache()", "testcase": false, "constructor": false}, {"identifier": "getAccessor", "parameters": "(Class<?> clazz, String field)", "modifiers": "public static", "return": "Method", "signature": "Method getAccessor(Class<?> clazz, String field)", "full_signature": "public static Method getAccessor(Class<?> clazz, String field)", "class_method_signature": "EvalHelper.getAccessor(Class<?> clazz, String field)", "testcase": false, "constructor": false}, {"identifier": "propertyFromAccessor", "parameters": "(Method accessor)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> propertyFromAccessor(Method accessor)", "full_signature": "public static Optional<String> propertyFromAccessor(Method accessor)", "class_method_signature": "EvalHelper.propertyFromAccessor(Method accessor)", "testcase": false, "constructor": false}, {"identifier": "ucFirst", "parameters": "(final String name)", "modifiers": "public static", "return": "String", "signature": "String ucFirst(final String name)", "full_signature": "public static String ucFirst(final String name)", "class_method_signature": "EvalHelper.ucFirst(final String name)", "testcase": false, "constructor": false}, {"identifier": "lcFirst", "parameters": "(final String name)", "modifiers": "public static", "return": "String", "signature": "String lcFirst(final String name)", "full_signature": "public static String lcFirst(final String name)", "class_method_signature": "EvalHelper.lcFirst(final String name)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object left, Object right, EvaluationContext ctx, BiPredicate<Comparable, Comparable> op)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean compare(Object left, Object right, EvaluationContext ctx, BiPredicate<Comparable, Comparable> op)", "full_signature": "public static Boolean compare(Object left, Object right, EvaluationContext ctx, BiPredicate<Comparable, Comparable> op)", "class_method_signature": "EvalHelper.compare(Object left, Object right, EvaluationContext ctx, BiPredicate<Comparable, Comparable> op)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(Object left, Object right, EvaluationContext ctx )", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isEqual(Object left, Object right, EvaluationContext ctx )", "full_signature": "public static Boolean isEqual(Object left, Object right, EvaluationContext ctx )", "class_method_signature": "EvalHelper.isEqual(Object left, Object right, EvaluationContext ctx )", "testcase": false, "constructor": false}, {"identifier": "valuedt", "parameters": "(TemporalAccessor datetime, ZoneId otherTimezoneOffset)", "modifiers": "private static", "return": "long", "signature": "long valuedt(TemporalAccessor datetime, ZoneId otherTimezoneOffset)", "full_signature": "private static long valuedt(TemporalAccessor datetime, ZoneId otherTimezoneOffset)", "class_method_signature": "EvalHelper.valuedt(TemporalAccessor datetime, ZoneId otherTimezoneOffset)", "testcase": false, "constructor": false}, {"identifier": "valuet", "parameters": "(TemporalAccessor time)", "modifiers": "private static", "return": "long", "signature": "long valuet(TemporalAccessor time)", "full_signature": "private static long valuet(TemporalAccessor time)", "class_method_signature": "EvalHelper.valuet(TemporalAccessor time)", "testcase": false, "constructor": false}, {"identifier": "isEqualDateTimeInSemanticD", "parameters": "(TemporalAccessor left, TemporalAccessor right)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isEqualDateTimeInSemanticD(TemporalAccessor left, TemporalAccessor right)", "full_signature": "public static Boolean isEqualDateTimeInSemanticD(TemporalAccessor left, TemporalAccessor right)", "class_method_signature": "EvalHelper.isEqualDateTimeInSemanticD(TemporalAccessor left, TemporalAccessor right)", "testcase": false, "constructor": false}, {"identifier": "isEqualTimeInSemanticD", "parameters": "(TemporalAccessor left, TemporalAccessor right)", "modifiers": "public static", "return": "Boolean", "signature": "Boolean isEqualTimeInSemanticD(TemporalAccessor left, TemporalAccessor right)", "full_signature": "public static Boolean isEqualTimeInSemanticD(TemporalAccessor left, TemporalAccessor right)", "class_method_signature": "EvalHelper.isEqualTimeInSemanticD(TemporalAccessor left, TemporalAccessor right)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(Range left, Range right)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean isEqual(Range left, Range right)", "full_signature": "private static Boolean isEqual(Range left, Range right)", "class_method_signature": "EvalHelper.isEqual(Range left, Range right)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(Iterable left, Iterable right)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean isEqual(Iterable left, Iterable right)", "full_signature": "private static Boolean isEqual(Iterable left, Iterable right)", "class_method_signature": "EvalHelper.isEqual(Iterable left, Iterable right)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(Map<?,?> left, Map<?,?> right)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean isEqual(Map<?,?> left, Map<?,?> right)", "full_signature": "private static Boolean isEqual(Map<?,?> left, Map<?,?> right)", "class_method_signature": "EvalHelper.isEqual(Map<?,?> left, Map<?,?> right)", "testcase": false, "constructor": false}, {"identifier": "isEqual", "parameters": "(Object l, Object r)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean isEqual(Object l, Object r)", "full_signature": "private static Boolean isEqual(Object l, Object r)", "class_method_signature": "EvalHelper.isEqual(Object l, Object r)", "testcase": false, "constructor": false}, {"identifier": "removeTrailingZeros", "parameters": "(final String stringNumber)", "modifiers": "private static", "return": "String", "signature": "String removeTrailingZeros(final String stringNumber)", "full_signature": "private static String removeTrailingZeros(final String stringNumber)", "class_method_signature": "EvalHelper.removeTrailingZeros(final String stringNumber)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/util/EvalHelper.java"}, "focal_method": {"identifier": "normalizeVariableName", "parameters": "(String name)", "modifiers": "public static", "return": "String", "body": "public static String normalizeVariableName(String name) {\n        // private static final Pattern SPACES_PATTERN = Pattern.compile( \"[\\\\s\\u00A0]+\" );\n        // return SPACES_PATTERN.matcher( name.trim() ).replaceAll( \" \" );\n\n        // The above code was refactored for performance reasons\n        // Check org.drools.benchmarks.dmn.runtime.DMNEvaluateDecisionNameLengthBenchmark\n        // This method tries to return the original String whenever possible to avoid allocation of char[]\n\n        if (name == null || name.isEmpty()) {\n            return name;\n        }\n\n        // Find the first valid char, used to skip leading spaces\n        int firstValid = 0, size = name.length();\n\n        for (; firstValid < size; firstValid++) {\n            if (isValidChar(name.charAt(firstValid))) {\n                break;\n            }\n        }\n        if (firstValid == size) {\n            return \"\";\n        }\n\n        // Finds the last valid char, either before a non-regular space, the first of multiple spaces or the last char\n        int lastValid = 0, trailing = 0;\n        boolean inWhitespace = false;\n\n        for (int i = firstValid; i < size; i++) {\n            if (isValidChar(name.charAt(i))) {\n                lastValid = i + 1;\n                inWhitespace = false;\n            } else {\n                if (inWhitespace) {\n                    break;\n                }\n                inWhitespace = true;\n                if (name.charAt(i) != ' ') {\n                    break;\n                }\n            }\n        }\n\n        // Counts the number of spaces after 'lastValid' (to remove possible trailing spaces)\n        for (int i = lastValid; i < size && !isValidChar(name.charAt(i)); i++) {\n            trailing++;\n        }\n        if (lastValid + trailing == size) {\n            return firstValid != 0 || trailing != 0 ? name.substring(firstValid, lastValid) : name;\n        }\n\n        // There are valid chars after 'lastValid' and substring won't do (full normalization is required)\n        int pos = 0;\n        char[] target = new char[size-firstValid];\n\n        // Copy the chars know to be valid to the new array\n        for (int i = firstValid; i < lastValid; i++) {\n            target[pos++] = name.charAt(i);\n        }\n\n        // Copy valid chars after 'lastValid' to new array\n        // Many whitespaces are collapsed into one and trailing spaces are ignored\n        for (int i = lastValid + 1; i < size; i++) {\n            char c = name.charAt(i);\n            if (isValidChar(c)) {\n                if (inWhitespace) {\n                    target[pos++] = ' ';\n                }\n                target[pos++] = c;\n                inWhitespace = false;\n            } else {\n                inWhitespace = true;\n            }\n        }\n        return new String(target, 0, pos);\n    }", "signature": "String normalizeVariableName(String name)", "full_signature": "public static String normalizeVariableName(String name)", "class_method_signature": "EvalHelper.normalizeVariableName(String name)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "length", "isValidChar", "charAt", "isValidChar", "charAt", "charAt", "isValidChar", "charAt", "substring", "charAt", "charAt", "isValidChar"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}