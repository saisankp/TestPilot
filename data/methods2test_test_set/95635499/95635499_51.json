{"test_class": {"identifier": "SFATest", "superclass": "", "interfaces": "", "fields": [{"original_string": "double[] timeseries1;", "modifier": "", "type": "double[]", "declarator": "timeseries1", "var_name": "timeseries1"}, {"original_string": "double[] timeseries2;", "modifier": "", "type": "double[]", "declarator": "timeseries2", "var_name": "timeseries2"}, {"original_string": "TimeSeriesDataset2 dataset;", "modifier": "", "type": "TimeSeriesDataset2", "declarator": "dataset", "var_name": "dataset"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/filter/SFATest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tSFA testSFA = new SFA(new double[] { 1, 2, 3 }, 4);\n\t\tSlidingWindowBuilder builder = new SlidingWindowBuilder();\n\t\tbuilder.setDefaultWindowSize(3);\n\t\tfor (double[][] matrix : this.dataset.getValueMatrices()) {\n\t\t\tfor (double[] instance : matrix) {\n\t\t\t\tTimeSeriesDataset2 tmp = testSFA.fitTransform((builder.specialFitTransform(instance)));\n\t\t\t\tfor (double[][] m : tmp.getValueMatrices()) {\n\t\t\t\t\tfor (double[] i : m) {\n\t\t\t\t\t\tfail(\"This fail is just here to announce that this test does not really test anything at all. Insert a meaningful check. Output to prevent SQ to fire: \" + i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tTimeSeriesDataset2 output = testSFA.fitTransform(this.dataset);\n\t\tassertEquals(2, output.getValues(0)[0][0], 1.0E-5);\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SFATest.test()", "testcase": true, "constructor": false, "invocations": ["setDefaultWindowSize", "getValueMatrices", "fitTransform", "specialFitTransform", "getValueMatrices", "fail", "fitTransform", "assertEquals", "getValues"]}, "focal_class": {"identifier": "SFA", "superclass": "", "interfaces": "implements IFilter", "fields": [{"original_string": "private static final String MSG_NOEMPTYDS = \"This method can not work with an empty dataset.\";", "modifier": "private static final", "type": "String", "declarator": "MSG_NOEMPTYDS = \"This method can not work with an empty dataset.\"", "var_name": "MSG_NOEMPTYDS"}, {"original_string": "private static final String MSG_NOSINGLEINSTANCE = \"To build a SFA word the full dataset has to be considerd therefore it is not reasonable in this context to perform this operation on a single Instance.\";", "modifier": "private static final", "type": "String", "declarator": "MSG_NOSINGLEINSTANCE = \"To build a SFA word the full dataset has to be considerd therefore it is not reasonable in this context to perform this operation on a single Instance.\"", "var_name": "MSG_NOSINGLEINSTANCE"}, {"original_string": "private double[] alphabet;", "modifier": "private", "type": "double[]", "declarator": "alphabet", "var_name": "alphabet"}, {"original_string": "private boolean meanCorrected;", "modifier": "private", "type": "boolean", "declarator": "meanCorrected", "var_name": "meanCorrected"}, {"original_string": "private boolean fitted = false;", "modifier": "private", "type": "boolean", "declarator": "fitted = false", "var_name": "fitted"}, {"original_string": "private boolean fittedMatrix = false;", "modifier": "private", "type": "boolean", "declarator": "fittedMatrix = false", "var_name": "fittedMatrix"}, {"original_string": "private TimeSeriesDataset2 dFTDataset = null;", "modifier": "private", "type": "TimeSeriesDataset2", "declarator": "dFTDataset = null", "var_name": "dFTDataset"}, {"original_string": "private double[][] dftMatrix = null;", "modifier": "private", "type": "double[][]", "declarator": "dftMatrix = null", "var_name": "dftMatrix"}, {"original_string": "private int numberOfDesieredDFTCoefficients;", "modifier": "private", "type": "int", "declarator": "numberOfDesieredDFTCoefficients", "var_name": "numberOfDesieredDFTCoefficients"}, {"original_string": "private List<double[][]> lookupTable = new ArrayList<>();", "modifier": "private", "type": "List<double[][]>", "declarator": "lookupTable = new ArrayList<>()", "var_name": "lookupTable"}, {"original_string": "private double[][] lookUpTableMatrix = null;", "modifier": "private", "type": "double[][]", "declarator": "lookUpTableMatrix = null", "var_name": "lookUpTableMatrix"}, {"original_string": "private boolean rekursiv;", "modifier": "private", "type": "boolean", "declarator": "rekursiv", "var_name": "rekursiv"}], "methods": [{"identifier": "setNumberOfDesieredDFTCoefficients", "parameters": "(final int numberOfDesieredDFTCoefficients)", "modifiers": "public", "return": "void", "signature": "void setNumberOfDesieredDFTCoefficients(final int numberOfDesieredDFTCoefficients)", "full_signature": "public void setNumberOfDesieredDFTCoefficients(final int numberOfDesieredDFTCoefficients)", "class_method_signature": "SFA.setNumberOfDesieredDFTCoefficients(final int numberOfDesieredDFTCoefficients)", "testcase": false, "constructor": false}, {"identifier": "disableRekursiv", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void disableRekursiv()", "full_signature": "public void disableRekursiv()", "class_method_signature": "SFA.disableRekursiv()", "testcase": false, "constructor": false}, {"identifier": "enableRekursiv", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void enableRekursiv()", "full_signature": "public void enableRekursiv()", "class_method_signature": "SFA.enableRekursiv()", "testcase": false, "constructor": false}, {"identifier": "SFA", "parameters": "(final double[] alphabet, final int wordLength)", "modifiers": "public", "return": "", "signature": " SFA(final double[] alphabet, final int wordLength)", "full_signature": "public  SFA(final double[] alphabet, final int wordLength)", "class_method_signature": "SFA.SFA(final double[] alphabet, final int wordLength)", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "@Override public", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 transform(final TimeSeriesDataset2 input)", "full_signature": "@Override public TimeSeriesDataset2 transform(final TimeSeriesDataset2 input)", "class_method_signature": "SFA.transform(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "@Override public", "return": "void", "signature": "void fit(final TimeSeriesDataset2 input)", "full_signature": "@Override public void fit(final TimeSeriesDataset2 input)", "class_method_signature": "SFA.fit(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false}, {"identifier": "fitTransform", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "@Override public", "return": "TimeSeriesDataset2", "signature": "TimeSeriesDataset2 fitTransform(final TimeSeriesDataset2 input)", "full_signature": "@Override public TimeSeriesDataset2 fitTransform(final TimeSeriesDataset2 input)", "class_method_signature": "SFA.fitTransform(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] transform(final double[] input)", "full_signature": "@Override public double[] transform(final double[] input)", "class_method_signature": "SFA.transform(final double[] input)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "void", "signature": "void fit(final double[] input)", "full_signature": "@Override public void fit(final double[] input)", "class_method_signature": "SFA.fit(final double[] input)", "testcase": false, "constructor": false}, {"identifier": "fitTransform", "parameters": "(final double[] input)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] fitTransform(final double[] input)", "full_signature": "@Override public double[] fitTransform(final double[] input)", "class_method_signature": "SFA.fitTransform(final double[] input)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final double[][] input)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] transform(final double[][] input)", "full_signature": "@Override public double[][] transform(final double[][] input)", "class_method_signature": "SFA.transform(final double[][] input)", "testcase": false, "constructor": false}, {"identifier": "fit", "parameters": "(final double[][] input)", "modifiers": "@Override public", "return": "void", "signature": "void fit(final double[][] input)", "full_signature": "@Override public void fit(final double[][] input)", "class_method_signature": "SFA.fit(final double[][] input)", "testcase": false, "constructor": false}, {"identifier": "fitTransform", "parameters": "(final double[][] input)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] fitTransform(final double[][] input)", "full_signature": "@Override public double[][] fitTransform(final double[][] input)", "class_method_signature": "SFA.fitTransform(final double[][] input)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/filter/SFA.java"}, "focal_method": {"identifier": "fitTransform", "parameters": "(final TimeSeriesDataset2 input)", "modifiers": "@Override public", "return": "TimeSeriesDataset2", "body": "@Override\n\tpublic TimeSeriesDataset2 fitTransform(final TimeSeriesDataset2 input) {\n\t\tthis.fit(input);\n\t\treturn this.transform(input);\n\t}", "signature": "TimeSeriesDataset2 fitTransform(final TimeSeriesDataset2 input)", "full_signature": "@Override public TimeSeriesDataset2 fitTransform(final TimeSeriesDataset2 input)", "class_method_signature": "SFA.fitTransform(final TimeSeriesDataset2 input)", "testcase": false, "constructor": false, "invocations": ["fit", "transform"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}