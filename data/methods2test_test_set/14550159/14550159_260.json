{"test_class": {"identifier": "JAXBElementEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_XML_CONTENT = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n                                                   + \"<book send-by-post=\\\"true\\\">\"\n                                                   + \"  <title>Java and XML Data Binding</title>\"\n                                                   + \"  <author>Brett McLaughlin</author>\"\n                                                   + \"  <price currency=\\\"USD\\\">34.95</price>\"\n                                                   + \"  <member-price currency=\\\"USD\\\">26.56</member-price>\"\n                                                   + \"</book>\";", "modifier": "private static final", "type": "String", "declarator": "TEST_XML_CONTENT = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n                                                   + \"<book send-by-post=\\\"true\\\">\"\n                                                   + \"  <title>Java and XML Data Binding</title>\"\n                                                   + \"  <author>Brett McLaughlin</author>\"\n                                                   + \"  <price currency=\\\"USD\\\">34.95</price>\"\n                                                   + \"  <member-price currency=\\\"USD\\\">26.56</member-price>\"\n                                                   + \"</book>\"", "var_name": "TEST_XML_CONTENT"}, {"original_string": "private static final byte[] TEST_XML_CONTENT_BYTES = TEST_XML_CONTENT.getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_XML_CONTENT_BYTES = TEST_XML_CONTENT.getBytes()", "var_name": "TEST_XML_CONTENT_BYTES"}, {"original_string": "private MessageBodyReader   reader;", "modifier": "private", "type": "MessageBodyReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private MessageBodyWriter   writer;", "modifier": "private", "type": "MessageBodyWriter", "declarator": "writer", "var_name": "writer"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/JAXBElementEntityProviderTest.java"}, "test_case": {"identifier": "writesJAXBElementToOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writesJAXBElementToOutputStream() throws Exception {\n        Class<?> type = JAXBElement.class;\n        Type genericType = newParameterizedType(JAXBElement.class, Book.class);\n        JAXBElement<Book> bookJAXBElement = unmarshalJAXBElement(TEST_XML_CONTENT_BYTES);\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n\n        writer.writeTo(bookJAXBElement, type, genericType, null, APPLICATION_XML_TYPE, null, out);\n\n        JAXBElement<Book> writtenBookJAXBElement = unmarshalJAXBElement(out.toByteArray());\n        Book book = writtenBookJAXBElement.getValue();\n        assertEquals(\"Java and XML Data Binding\", book.getTitle());\n        assertTrue(book.isSendByPost());\n        assertEquals(\"Brett McLaughlin\", book.getAuthor());\n        assertEquals(\"USD\", book.getPrice().getCurrency());\n        assertEquals(new BigDecimal(\"34.95\"), book.getPrice().getValue());\n        assertEquals(\"USD\", book.getMemberPrice().getCurrency());\n        assertEquals(new BigDecimal(\"26.56\"), book.getMemberPrice().getValue());\n    }", "signature": "void writesJAXBElementToOutputStream()", "full_signature": "@Test public void writesJAXBElementToOutputStream()", "class_method_signature": "JAXBElementEntityProviderTest.writesJAXBElementToOutputStream()", "testcase": true, "constructor": false, "invocations": ["newParameterizedType", "unmarshalJAXBElement", "writeTo", "unmarshalJAXBElement", "toByteArray", "getValue", "assertEquals", "getTitle", "assertTrue", "isSendByPost", "assertEquals", "getAuthor", "assertEquals", "getCurrency", "getPrice", "assertEquals", "getValue", "getPrice", "assertEquals", "getCurrency", "getMemberPrice", "assertEquals", "getValue", "getMemberPrice"]}, "focal_class": {"identifier": "JAXBElementEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<JAXBElement<?>>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JAXBElementEntityProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JAXBElementEntityProvider.class)", "var_name": "LOG"}, {"original_string": "private Providers providers;", "modifier": "private", "type": "Providers", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "JAXBElementEntityProvider", "parameters": "(@Context Providers providers)", "modifiers": "public", "return": "", "signature": " JAXBElementEntityProvider(@Context Providers providers)", "full_signature": "public  JAXBElementEntityProvider(@Context Providers providers)", "class_method_signature": "JAXBElementEntityProvider.JAXBElementEntityProvider(@Context Providers providers)", "testcase": false, "constructor": true}, {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JAXBElementEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<JAXBElement<?>> type,\n                                   Type genericType,\n                                   Annotation[] annotations,\n                                   MediaType mediaType,\n                                   MultivaluedMap<String, String> httpHeaders,\n                                   InputStream entityStream)", "modifiers": "@Override public", "return": "JAXBElement<?>", "signature": "JAXBElement<?> readFrom(Class<JAXBElement<?>> type,\n                                   Type genericType,\n                                   Annotation[] annotations,\n                                   MediaType mediaType,\n                                   MultivaluedMap<String, String> httpHeaders,\n                                   InputStream entityStream)", "full_signature": "@Override public JAXBElement<?> readFrom(Class<JAXBElement<?>> type,\n                                   Type genericType,\n                                   Annotation[] annotations,\n                                   MediaType mediaType,\n                                   MultivaluedMap<String, String> httpHeaders,\n                                   InputStream entityStream)", "class_method_signature": "JAXBElementEntityProvider.readFrom(Class<JAXBElement<?>> type,\n                                   Type genericType,\n                                   Annotation[] annotations,\n                                   MediaType mediaType,\n                                   MultivaluedMap<String, String> httpHeaders,\n                                   InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(JAXBElement<?> t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(JAXBElement<?> t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(JAXBElement<?> t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JAXBElementEntityProvider.getSize(JAXBElement<?> t, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "JAXBElementEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "JAXBElementEntityProvider.writeTo(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "(MediaType mediaType)", "modifiers": "private", "return": "String", "signature": "String getCharset(MediaType mediaType)", "full_signature": "private String getCharset(MediaType mediaType)", "class_method_signature": "JAXBElementEntityProvider.getCharset(MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "getJAXBContext", "parameters": "(Class<?> type, MediaType mediaType)", "modifiers": "protected", "return": "JAXBContext", "signature": "JAXBContext getJAXBContext(Class<?> type, MediaType mediaType)", "full_signature": "protected JAXBContext getJAXBContext(Class<?> type, MediaType mediaType)", "class_method_signature": "JAXBElementEntityProvider.getJAXBContext(Class<?> type, MediaType mediaType)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/JAXBElementEntityProvider.java"}, "focal_method": {"identifier": "writeTo", "parameters": "(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeTo(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream) throws IOException {\n        Class<?> declaredType = t.getDeclaredType();\n        try {\n            JAXBContext jaxbContext = getJAXBContext(declaredType, mediaType);\n            Marshaller marshaller = jaxbContext.createMarshaller();\n            String charset = getCharset(mediaType);\n            if (!isNullOrEmpty(charset)) {\n                marshaller.setProperty(Marshaller.JAXB_ENCODING, charset);\n            }\n\n            marshaller.marshal(t, entityStream);\n        } catch (JAXBException e) {\n            throw new IOException(String.format(\"Can't write to output stream, %s\", e));\n        }\n    }", "signature": "void writeTo(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "JAXBElementEntityProvider.writeTo(JAXBElement<?> t,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["getDeclaredType", "getJAXBContext", "createMarshaller", "getCharset", "isNullOrEmpty", "setProperty", "marshal", "format"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}