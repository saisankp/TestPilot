{"test_class": {"identifier": "FileSystemDataSetMetadataRepositoryTest", "superclass": "extends DataSetBaseTest", "interfaces": "", "fields": [{"original_string": "@Value(\"${dataset.metadata.store.file.location}\")\n    private String storeLocation;", "modifier": "@Value(\"${dataset.metadata.store.file.location}\")\n    private", "type": "String", "declarator": "storeLocation", "var_name": "storeLocation"}, {"original_string": "@Autowired\n    private FileSystemDataSetMetadataRepository repository;", "modifier": "@Autowired\n    private", "type": "FileSystemDataSetMetadataRepository", "declarator": "repository", "var_name": "repository"}], "file": "dataprep-dataset/src/test/java/org/talend/dataprep/dataset/store/metadata/file/FileSystemDataSetMetadataRepositoryTest.java"}, "test_case": {"identifier": "shouldList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldList() throws IOException {\n\n        // list nothing\n        final Iterator<DataSetMetadata> emptyList = repository.list().iterator();\n        assertFalse(emptyList.hasNext());\n\n        // given\n        int expected = 26;\n        for (int i = 1; i <= expected; i++) {\n            repository.save(getMetadata(String.valueOf(i)));\n        }\n\n        // when\n        final Iterator<DataSetMetadata> actual = repository.list().iterator();\n\n        // then\n        final AtomicInteger count = new AtomicInteger(0); // need of a final object that can be incremented in the\n                                                          // following lambda expression\n        actual.forEachRemaining(dataSetMetadata -> {\n            assertTrue(Integer.valueOf(dataSetMetadata.getId()) <= expected);\n            count.addAndGet(1);\n\n            /*assertFalse(dataSetMetadata.isSharedDataSet());\n            assertNotNull(dataSetMetadata.getOwner());\n            assertEquals(dataSetMetadata.getAuthor(), dataSetMetadata.getOwner().getFirstName());*/\n        });\n\n        assertEquals(expected, count.intValue());\n    }", "signature": "void shouldList()", "full_signature": "@Test public void shouldList()", "class_method_signature": "FileSystemDataSetMetadataRepositoryTest.shouldList()", "testcase": true, "constructor": false, "invocations": ["iterator", "list", "assertFalse", "hasNext", "save", "getMetadata", "valueOf", "iterator", "list", "forEachRemaining", "assertTrue", "valueOf", "getId", "addAndGet", "assertEquals", "intValue"]}, "focal_class": {"identifier": "FileSystemDataSetMetadataRepository", "superclass": "extends ObjectDataSetMetadataRepository", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FileSystemDataSetMetadataRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FileSystemDataSetMetadataRepository.class)", "var_name": "LOG"}, {"original_string": "private final ReentrantReadWriteLockGroup locks = new ReentrantReadWriteLockGroup(true, 100);", "modifier": "private final", "type": "ReentrantReadWriteLockGroup", "declarator": "locks = new ReentrantReadWriteLockGroup(true, 100)", "var_name": "locks"}, {"original_string": "@Autowired\n    private ObjectMapper mapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Value(\"${dataset.metadata.store.file.location}\")\n    private String storeLocation;", "modifier": "@Value(\"${dataset.metadata.store.file.location}\")\n    private", "type": "String", "declarator": "storeLocation", "var_name": "storeLocation"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct private", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct private void init()", "class_method_signature": "FileSystemDataSetMetadataRepository.init()", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(DataSetMetadata metadata)", "modifiers": "@Override public", "return": "void", "signature": "void save(DataSetMetadata metadata)", "full_signature": "@Override public void save(DataSetMetadata metadata)", "class_method_signature": "FileSystemDataSetMetadataRepository.save(DataSetMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String id)", "modifiers": "@Override public", "return": "DataSetMetadata", "signature": "DataSetMetadata get(String id)", "full_signature": "@Override public DataSetMetadata get(String id)", "class_method_signature": "FileSystemDataSetMetadataRepository.get(String id)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String id)", "modifiers": "@Override public", "return": "void", "signature": "void remove(String id)", "full_signature": "@Override public void remove(String id)", "class_method_signature": "FileSystemDataSetMetadataRepository.remove(String id)", "testcase": false, "constructor": false}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "Stream<DataSetMetadata>", "signature": "Stream<DataSetMetadata> source()", "full_signature": "@Override public Stream<DataSetMetadata> source()", "class_method_signature": "FileSystemDataSetMetadataRepository.source()", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String metadataId)", "modifiers": "private", "return": "File", "signature": "File getFile(String metadataId)", "full_signature": "private File getFile(String metadataId)", "class_method_signature": "FileSystemDataSetMetadataRepository.getFile(String metadataId)", "testcase": false, "constructor": false}, {"identifier": "getRootFolder", "parameters": "()", "modifiers": "private", "return": "File", "signature": "File getRootFolder()", "full_signature": "private File getRootFolder()", "class_method_signature": "FileSystemDataSetMetadataRepository.getRootFolder()", "testcase": false, "constructor": false}], "file": "dataprep-dataset/src/main/java/org/talend/dataprep/dataset/store/metadata/file/FileSystemDataSetMetadataRepository.java"}, "focal_method": {"identifier": "save", "parameters": "(DataSetMetadata metadata)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void save(DataSetMetadata metadata) {\n\n        String id = metadata.getId();\n\n        ReentrantReadWriteLock lock = locks.getLock(id);\n        final File file = getFile(id);\n\n        lock.writeLock().lock();\n        try (GZIPOutputStream output = new GZIPOutputStream(new FileOutputStream(file))) {\n            mapper.writer().writeValue(output, metadata);\n        } catch (IOException e) {\n            LOG.error(\"Error saving {}\", metadata, e);\n            throw new TDPException(DataSetErrorCodes.UNABLE_TO_STORE_DATASET_METADATA, e,\n                    ExceptionContext.build().put(\"id\", metadata.getId()));\n        } finally {\n            lock.writeLock().unlock();\n        }\n    }", "signature": "void save(DataSetMetadata metadata)", "full_signature": "@Override public void save(DataSetMetadata metadata)", "class_method_signature": "FileSystemDataSetMetadataRepository.save(DataSetMetadata metadata)", "testcase": false, "constructor": false, "invocations": ["getId", "getLock", "getFile", "lock", "writeLock", "writeValue", "writer", "error", "put", "build", "getId", "unlock", "writeLock"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}