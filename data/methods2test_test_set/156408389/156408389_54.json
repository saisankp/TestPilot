{"test_class": {"identifier": "FederationServerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private final String successResponse =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\"}\";", "modifier": "private final", "type": "String", "declarator": "successResponse =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\"}\"", "var_name": "successResponse"}, {"original_string": "private final String successResponseWithMemo =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\", \\\"memo_type\\\": \\\"text\\\", \\\"memo\\\": \\\"test\\\"}\";", "modifier": "private final", "type": "String", "declarator": "successResponseWithMemo =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\", \\\"memo_type\\\": \\\"text\\\", \\\"memo\\\": \\\"test\\\"}\"", "var_name": "successResponseWithMemo"}, {"original_string": "private final String notFoundResponse =\n            \"{\\\"code\\\":\\\"not_found\\\",\\\"message\\\":\\\"Account not found\\\"}\";", "modifier": "private final", "type": "String", "declarator": "notFoundResponse =\n            \"{\\\"code\\\":\\\"not_found\\\",\\\"message\\\":\\\"Account not found\\\"}\"", "var_name": "notFoundResponse"}, {"original_string": "private final String stellarToml =\n            \"FEDERATION_SERVER = \\\"https://api.stellar.org/federation\\\"\";", "modifier": "private final", "type": "String", "declarator": "stellarToml =\n            \"FEDERATION_SERVER = \\\"https://api.stellar.org/federation\\\"\"", "var_name": "stellarToml"}, {"original_string": "private OkHttpClient fakeClient;", "modifier": "private", "type": "OkHttpClient", "declarator": "fakeClient", "var_name": "fakeClient"}, {"original_string": "private MockWebServer mockWebServer;", "modifier": "private", "type": "MockWebServer", "declarator": "mockWebServer", "var_name": "mockWebServer"}, {"original_string": "private FederationServer server;", "modifier": "private", "type": "FederationServer", "declarator": "server", "var_name": "server"}], "file": "kin-sdk/kin-base/src/test/java/kin/base/federation/FederationServerTest.java"}, "test_case": {"identifier": "testCreateForDomain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateForDomain() throws IOException {\n        OkHttpClient mockClient = mock(OkHttpClient.class);\n        FederationServer.setHttpClient(mockClient);\n        Call mockCall = mock(Call.class);\n        when(mockClient.newCall((Request) any())).thenReturn(mockCall);\n        Response mockResponseSuccess = new Response.Builder()\n                .code(200)\n                .message(\"OK\")\n                .protocol(Protocol.HTTP_1_1)\n                .body(ResponseBody.create(MediaType.parse(\"application/json\"), stellarToml))\n                .request(new Request.Builder()\n                        .url(\"http://www.test.com\")\n                        .get()\n                        .build())\n                .build();\n\n        when(mockCall.execute()).thenReturn(mockResponseSuccess);\n\n        FederationServer server = FederationServer.createForDomain(\"stellar.org\");\n        assertEquals(server.getServerUri().toString(), \"https://api.stellar.org/federation\");\n        assertEquals(server.getDomain(), \"stellar.org\");\n\n        ArgumentCaptor<Request> argument = ArgumentCaptor.forClass(Request.class);\n        verify(mockClient).newCall(argument.capture());\n\n        assertEquals(URI.create(\"https://stellar.org/.well-known/stellar.toml\"), argument.getValue().url().uri());\n    }", "signature": "void testCreateForDomain()", "full_signature": "@Test public void testCreateForDomain()", "class_method_signature": "FederationServerTest.testCreateForDomain()", "testcase": true, "constructor": false, "invocations": ["mock", "setHttpClient", "mock", "thenReturn", "when", "newCall", "any", "build", "request", "body", "protocol", "message", "code", "create", "parse", "build", "get", "url", "thenReturn", "when", "execute", "createForDomain", "assertEquals", "toString", "getServerUri", "assertEquals", "getDomain", "forClass", "newCall", "verify", "capture", "assertEquals", "create", "uri", "url", "getValue"]}, "focal_class": {"identifier": "FederationServer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final URL serverUri;", "modifier": "private final", "type": "URL", "declarator": "serverUri", "var_name": "serverUri"}, {"original_string": "private final String domain;", "modifier": "private final", "type": "String", "declarator": "domain", "var_name": "domain"}, {"original_string": "private static OkHttpClient httpClient = new OkHttpClient();", "modifier": "private static", "type": "OkHttpClient", "declarator": "httpClient = new OkHttpClient()", "var_name": "httpClient"}], "methods": [{"identifier": "FederationServer", "parameters": "(URL serverUri, String domain)", "modifiers": "public", "return": "", "signature": " FederationServer(URL serverUri, String domain)", "full_signature": "public  FederationServer(URL serverUri, String domain)", "class_method_signature": "FederationServer.FederationServer(URL serverUri, String domain)", "testcase": false, "constructor": true}, {"identifier": "FederationServer", "parameters": "(String serverUri, String domain)", "modifiers": "public", "return": "", "signature": " FederationServer(String serverUri, String domain)", "full_signature": "public  FederationServer(String serverUri, String domain)", "class_method_signature": "FederationServer.FederationServer(String serverUri, String domain)", "testcase": false, "constructor": true}, {"identifier": "createForDomain", "parameters": "(String domain)", "modifiers": "public static", "return": "FederationServer", "signature": "FederationServer createForDomain(String domain)", "full_signature": "public static FederationServer createForDomain(String domain)", "class_method_signature": "FederationServer.createForDomain(String domain)", "testcase": false, "constructor": false}, {"identifier": "resolveAddress", "parameters": "(String address)", "modifiers": "public", "return": "FederationResponse", "signature": "FederationResponse resolveAddress(String address)", "full_signature": "public FederationResponse resolveAddress(String address)", "class_method_signature": "FederationServer.resolveAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "getServerUri", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getServerUri()", "full_signature": "public URL getServerUri()", "class_method_signature": "FederationServer.getServerUri()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDomain()", "full_signature": "public String getDomain()", "class_method_signature": "FederationServer.getDomain()", "testcase": false, "constructor": false}, {"identifier": "setHttpClient", "parameters": "(OkHttpClient httpClient)", "modifiers": "static", "return": "void", "signature": "void setHttpClient(OkHttpClient httpClient)", "full_signature": "static void setHttpClient(OkHttpClient httpClient)", "class_method_signature": "FederationServer.setHttpClient(OkHttpClient httpClient)", "testcase": false, "constructor": false}], "file": "kin-sdk/kin-base/src/main/java/kin/base/federation/FederationServer.java"}, "focal_method": {"identifier": "createForDomain", "parameters": "(String domain)", "modifiers": "public static", "return": "FederationServer", "body": "public static FederationServer createForDomain(String domain) {\n        URI stellarTomlUri;\n        try {\n            StringBuilder uriBuilder = new StringBuilder();\n            uriBuilder.append(\"https://\");\n            uriBuilder.append(domain);\n            uriBuilder.append(\"/.well-known/stellar.toml\");\n            stellarTomlUri = new URI(uriBuilder.toString());\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n        Toml stellarToml = null;\n        try {\n            Request request = new Request.Builder().get()\n                    .url(stellarTomlUri.toString())\n                    .build();\n            Response response = httpClient.newCall(request)\n                    .execute();\n            if (response.code() >= 300) {\n                throw new StellarTomlNotFoundInvalidException();\n            }\n            ResponseBody body = response.body();\n            if (body == null) {\n                throw new StellarTomlNotFoundInvalidException();\n            }\n            stellarToml = new Toml().read(body.string());\n        } catch (IOException e) {\n            throw new ConnectionErrorException();\n        }\n\n        String federationServer = stellarToml.getString(\"FEDERATION_SERVER\");\n        if (federationServer == null) {\n            throw new NoFederationServerException();\n        }\n\n        return new FederationServer(federationServer, domain);\n    }", "signature": "FederationServer createForDomain(String domain)", "full_signature": "public static FederationServer createForDomain(String domain)", "class_method_signature": "FederationServer.createForDomain(String domain)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "toString", "build", "url", "get", "toString", "execute", "newCall", "code", "body", "read", "string", "getString"]}, "repository": {"repo_id": 156408389, "url": "https://github.com/kinecosystem/kin-sdk-android", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 3232, "license": "licensed"}}