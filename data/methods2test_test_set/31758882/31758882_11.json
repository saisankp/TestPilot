{"test_class": {"identifier": "KVMessageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "KVMessage k;", "modifier": "", "type": "KVMessage", "declarator": "k", "var_name": "k"}], "file": "src/main/java/edu/berkeley/cs162/KVMessageTest.java"}, "test_case": {"identifier": "test3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test3() throws Exception {\n\t\tFakeSocket fake = new FakeSocket(k.toXML());\n\t\tKVMessage q = new KVMessage(fake, 100);\n\t\tassertEquals(\n\t\t\t\tq.toXML(),\n\t\t\t\t\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<KVMessage type=\\\"putreq\\\">\\n<Key>I like pie</Key>\\n<Value>I like cake</Value>\\n</KVMessage>\\n\");\n\t}", "signature": "void test3()", "full_signature": "@Test public void test3()", "class_method_signature": "KVMessageTest.test3()", "testcase": true, "constructor": false, "invocations": ["toXML", "assertEquals", "toXML"]}, "focal_class": {"identifier": "KVMessage", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "public static final long serialVersionUID = 6473128480951955693L;", "modifier": "public static final", "type": "long", "declarator": "serialVersionUID = 6473128480951955693L", "var_name": "serialVersionUID"}, {"original_string": "public String tpcOpId = null;", "modifier": "public", "type": "String", "declarator": "tpcOpId = null", "var_name": "tpcOpId"}, {"original_string": "private String msgType = null;", "modifier": "private", "type": "String", "declarator": "msgType = null", "var_name": "msgType"}, {"original_string": "private String key = null;", "modifier": "private", "type": "String", "declarator": "key = null", "var_name": "key"}, {"original_string": "private String value = null;", "modifier": "private", "type": "String", "declarator": "value = null", "var_name": "value"}, {"original_string": "private String message = null;", "modifier": "private", "type": "String", "declarator": "message = null", "var_name": "message"}, {"original_string": "private Document duck;", "modifier": "private", "type": "Document", "declarator": "duck", "var_name": "duck"}], "methods": [{"identifier": "getTpcOpId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTpcOpId()", "full_signature": "public String getTpcOpId()", "class_method_signature": "KVMessage.getTpcOpId()", "testcase": false, "constructor": false}, {"identifier": "setTpcOpId", "parameters": "(String tpcOpId)", "modifiers": "public", "return": "void", "signature": "void setTpcOpId(String tpcOpId)", "full_signature": "public void setTpcOpId(String tpcOpId)", "class_method_signature": "KVMessage.setTpcOpId(String tpcOpId)", "testcase": false, "constructor": false}, {"identifier": "getDuck", "parameters": "()", "modifiers": "public", "return": "Document", "signature": "Document getDuck()", "full_signature": "public Document getDuck()", "class_method_signature": "KVMessage.getDuck()", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getKey()", "full_signature": "public final String getKey()", "class_method_signature": "KVMessage.getKey()", "testcase": false, "constructor": false}, {"identifier": "setKey", "parameters": "(String key)", "modifiers": "public final", "return": "void", "signature": "void setKey(String key)", "full_signature": "public final void setKey(String key)", "class_method_signature": "KVMessage.setKey(String key)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getValue()", "full_signature": "public final String getValue()", "class_method_signature": "KVMessage.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(String value)", "modifiers": "public final", "return": "void", "signature": "void setValue(String value)", "full_signature": "public final void setValue(String value)", "class_method_signature": "KVMessage.setValue(String value)", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "public final", "return": "String", "signature": "String getMessage()", "full_signature": "public final String getMessage()", "class_method_signature": "KVMessage.getMessage()", "testcase": false, "constructor": false}, {"identifier": "setMessage", "parameters": "(String message)", "modifiers": "public final", "return": "void", "signature": "void setMessage(String message)", "full_signature": "public final void setMessage(String message)", "class_method_signature": "KVMessage.setMessage(String message)", "testcase": false, "constructor": false}, {"identifier": "getMsgType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMsgType()", "full_signature": "public String getMsgType()", "class_method_signature": "KVMessage.getMsgType()", "testcase": false, "constructor": false}, {"identifier": "KVMessage", "parameters": "(KVMessage kvm)", "modifiers": "public", "return": "", "signature": " KVMessage(KVMessage kvm)", "full_signature": "public  KVMessage(KVMessage kvm)", "class_method_signature": "KVMessage.KVMessage(KVMessage kvm)", "testcase": false, "constructor": true}, {"identifier": "KVMessage", "parameters": "(String msgType)", "modifiers": "public", "return": "", "signature": " KVMessage(String msgType)", "full_signature": "public  KVMessage(String msgType)", "class_method_signature": "KVMessage.KVMessage(String msgType)", "testcase": false, "constructor": true}, {"identifier": "KVMessage", "parameters": "(String msgType, String message)", "modifiers": "public", "return": "", "signature": " KVMessage(String msgType, String message)", "full_signature": "public  KVMessage(String msgType, String message)", "class_method_signature": "KVMessage.KVMessage(String msgType, String message)", "testcase": false, "constructor": true}, {"identifier": "KVMessage", "parameters": "(Socket sock)", "modifiers": "public", "return": "", "signature": " KVMessage(Socket sock)", "full_signature": "public  KVMessage(Socket sock)", "class_method_signature": "KVMessage.KVMessage(Socket sock)", "testcase": false, "constructor": true}, {"identifier": "KVMessage", "parameters": "(Socket sock, int timeout)", "modifiers": "public", "return": "", "signature": " KVMessage(Socket sock, int timeout)", "full_signature": "public  KVMessage(Socket sock, int timeout)", "class_method_signature": "KVMessage.KVMessage(Socket sock, int timeout)", "testcase": false, "constructor": true}, {"identifier": "toXML", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toXML()", "full_signature": "public String toXML()", "class_method_signature": "KVMessage.toXML()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Socket sock)", "modifiers": "public", "return": "void", "signature": "void sendMessage(Socket sock)", "full_signature": "public void sendMessage(Socket sock)", "class_method_signature": "KVMessage.sendMessage(Socket sock)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "KVMessage.toString()", "testcase": false, "constructor": false}], "file": "src/main/java/edu/berkeley/cs162/KVMessage.java"}, "focal_method": {"identifier": "toXML", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String toXML() throws KVException {\n\t\tif (msgType == null || (msgType.equals(\"delreq\") && key == null)\n\t\t\t\t|| (msgType.equals(\"putreq\") && (value == null || key == null))\n\t\t\t\t|| (msgType.equals(\"resp\") && key != null && value == null)) {\n\t\t\tthrow new KVException(new KVMessage(\"resp\",\n\t\t\t\t\t\"Message format incorrect\"));\n\t\t}\n\n\t\tDocumentBuilder db = null;\n\t\ttry {\n\t\t\tdb = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t\t} catch (ParserConfigurationException e) {\n\t\t\tthrow new KVException(new KVMessage(\"resp\",\n\t\t\t\t\t\"Message format incorrect\"));\n\t\t}\n\t\tDocument doc = db.newDocument();\n\t\tElement kv = doc.createElement(\"KVMessage\");\n\t\tElement keey, valoo, massage, toy;\n\t\tkv.setAttribute(\"type\", msgType);\n\t\tif (key != null) {\n\t\t\tkeey = doc.createElement(\"Key\");\n\t\t\tkeey.setTextContent(key);\n\t\t\tkv.appendChild(keey);\n\t\t}\n\t\tif (value != null) {\n\t\t\tvaloo = doc.createElement(\"Value\");\n\t\t\tvaloo.setTextContent(value);\n\t\t\tkv.appendChild(valoo);\n\t\t}\n\t\tif (message != null) {\n\t\t\tmassage = doc.createElement(\"Message\");\n\t\t\tmassage.setTextContent(message);\n\t\t\tkv.appendChild(massage);\n\t\t}\n\t\tif (tpcOpId != null) {\n\t\t\ttoy = doc.createElement(\"TPCOpId\");\n\t\t\ttoy.setTextContent(tpcOpId);\n\t\t\tkv.appendChild(toy);\n\t\t}\n\t\tdoc.appendChild(kv);\n\t\tduck = doc;\n\t\t// adapted from\n\t\t// http://stackoverflow.com/questions/5456680/xml-document-to-string\n\t\tdoc.setXmlStandalone(true);\n\t\tTransformerFactory tf = TransformerFactory.newInstance();\n\t\tTransformer transformer = null;\n\t\ttry {\n\t\t\ttransformer = tf.newTransformer();\n\t\t} catch (TransformerConfigurationException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n\n\t\tStringWriter writer = new StringWriter();\n\t\ttry {\n\t\t\ttransformer.transform(new DOMSource(doc), new StreamResult(writer));\n\t\t} catch (TransformerException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tString output = writer.getBuffer().toString();\n\t\treturn output;\n\t}", "signature": "String toXML()", "full_signature": "public String toXML()", "class_method_signature": "KVMessage.toXML()", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "newDocumentBuilder", "newInstance", "newDocument", "createElement", "setAttribute", "createElement", "setTextContent", "appendChild", "createElement", "setTextContent", "appendChild", "createElement", "setTextContent", "appendChild", "createElement", "setTextContent", "appendChild", "appendChild", "setXmlStandalone", "newInstance", "newTransformer", "printStackTrace", "setOutputProperty", "transform", "printStackTrace", "toString", "getBuffer"]}, "repository": {"repo_id": 31758882, "url": "https://github.com/zqhxuyuan/zava", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 10325, "license": "licensed"}}