{"test_class": {"identifier": "ContactFormControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Identity theFromIdentity;", "modifier": "private", "type": "Identity", "declarator": "theFromIdentity", "var_name": "theFromIdentity"}, {"original_string": "private ContactMessage contactMessage;", "modifier": "private", "type": "ContactMessage", "declarator": "contactMessage", "var_name": "contactMessage"}, {"original_string": "private ContactList contactList;", "modifier": "private", "type": "ContactList", "declarator": "contactList", "var_name": "contactList"}, {"original_string": "private UserRequest ureq;", "modifier": "private", "type": "UserRequest", "declarator": "ureq", "var_name": "ureq"}, {"original_string": "private ContactUIModel contactUIModel;", "modifier": "private", "type": "ContactUIModel", "declarator": "contactUIModel", "var_name": "contactUIModel"}, {"original_string": "private WindowControl wControl;", "modifier": "private", "type": "WindowControl", "declarator": "wControl", "var_name": "wControl"}, {"original_string": "private ContactFormView contactFormView;", "modifier": "private", "type": "ContactFormView", "declarator": "contactFormView", "var_name": "contactFormView"}, {"original_string": "private Controller source;", "modifier": "private", "type": "Controller", "declarator": "source", "var_name": "source"}, {"original_string": "private Component initialComponent;", "modifier": "private", "type": "Component", "declarator": "initialComponent", "var_name": "initialComponent"}, {"original_string": "private MessageSendStatus sendStatus;", "modifier": "private", "type": "MessageSendStatus", "declarator": "sendStatus", "var_name": "sendStatus"}, {"original_string": "private ArgumentCaptor<String> wControlMessageCaptor;", "modifier": "private", "type": "ArgumentCaptor<String>", "declarator": "wControlMessageCaptor", "var_name": "wControlMessageCaptor"}, {"original_string": "private List<ContactList> toContactLists;", "modifier": "private", "type": "List<ContactList>", "declarator": "toContactLists", "var_name": "toContactLists"}, {"original_string": "@DataPoint public static SendStatusWithErrorMessage messageFailed = \n\t\t\tnew SendStatusWithErrorMessage(ExceptionHandlingMailSendingTemplate.handleMessagingException());", "modifier": "@DataPoint public static", "type": "SendStatusWithErrorMessage", "declarator": "messageFailed = \n\t\t\tnew SendStatusWithErrorMessage(ExceptionHandlingMailSendingTemplate.handleMessagingException())", "var_name": "messageFailed"}, {"original_string": "@DataPoint public static SendStatusWithErrorMessage addressFailedOne = \n\t\t\tnew SendStatusWithErrorMessage(ExceptionHandlingMailSendingTemplate.createSendProblemsCausedByAddresses(false));", "modifier": "@DataPoint public static", "type": "SendStatusWithErrorMessage", "declarator": "addressFailedOne = \n\t\t\tnew SendStatusWithErrorMessage(ExceptionHandlingMailSendingTemplate.createSendProblemsCausedByAddresses(false))", "var_name": "addressFailedOne"}, {"original_string": "@DataPoint public static SendStatusWithErrorMessage addressFailedTwo = \n\t\t\tnew SendStatusWithErrorMessage(ExceptionHandlingMailSendingTemplate.createPartialyNotSentMessageSendStatus(false));", "modifier": "@DataPoint public static", "type": "SendStatusWithErrorMessage", "declarator": "addressFailedTwo = \n\t\t\tnew SendStatusWithErrorMessage(ExceptionHandlingMailSendingTemplate.createPartialyNotSentMessageSendStatus(false))", "var_name": "addressFailedTwo"}, {"original_string": "@DataPoint public static SendStatusWithInfoMessage couldNotConnect = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createCouldNotConnectToSmtpHostMessageSendStatus());", "modifier": "@DataPoint public static", "type": "SendStatusWithInfoMessage", "declarator": "couldNotConnect = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createCouldNotConnectToSmtpHostMessageSendStatus())", "var_name": "couldNotConnect"}, {"original_string": "@DataPoint public static SendStatusWithInfoMessage unknownSmtp = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createUnknownSMTPHost());", "modifier": "@DataPoint public static", "type": "SendStatusWithInfoMessage", "declarator": "unknownSmtp = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createUnknownSMTPHost())", "var_name": "unknownSmtp"}, {"original_string": "@DataPoint public static SendStatusWithInfoMessage noRecipients = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createNoRecipientMessageSendStatus());", "modifier": "@DataPoint public static", "type": "SendStatusWithInfoMessage", "declarator": "noRecipients = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createNoRecipientMessageSendStatus())", "var_name": "noRecipients"}, {"original_string": "private static Address[] invalidAddresses = null;", "modifier": "private static", "type": "Address[]", "declarator": "invalidAddresses = null", "var_name": "invalidAddresses"}, {"original_string": "@DataPoint public static SendStatusWithInfoMessage invalidAddr = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createInvalidAddressesMessageSendStatus(invalidAddresses));", "modifier": "@DataPoint public static", "type": "SendStatusWithInfoMessage", "declarator": "invalidAddr = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createInvalidAddressesMessageSendStatus(invalidAddresses))", "var_name": "invalidAddr"}, {"original_string": "@DataPoint public static SendStatusWithInfoMessage invalidDomain = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createInvalidDomainMessageSendStatus());", "modifier": "@DataPoint public static", "type": "SendStatusWithInfoMessage", "declarator": "invalidDomain = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createInvalidDomainMessageSendStatus())", "var_name": "invalidDomain"}, {"original_string": "@DataPoint public static SendStatusWithInfoMessage smtpAuthFailed = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createAuthenticationFailedMessageSendStatus());", "modifier": "@DataPoint public static", "type": "SendStatusWithInfoMessage", "declarator": "smtpAuthFailed = \n\t\t\tnew SendStatusWithInfoMessage(ExceptionHandlingMailSendingTemplate.createAuthenticationFailedMessageSendStatus())", "var_name": "smtpAuthFailed"}], "file": "OLAT-LMS/src/test/java/org/olat/presentation/contactform/ContactFormControllerTest.java"}, "test_case": {"identifier": "shouldSendMailToRecipientsAndCopyToSenderWithoutException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldSendMailToRecipientsAndCopyToSenderWithoutException() {\n\t\t//setup\n\t\tconfigureViewForSuccessfullSentMessage();\n\t\tsetCopyToSenderCheckbox(true);\n\t\t\n\t\t//exercise\n\t\tContactFormController contactFormController = new ContactFormController(contactFormView, contactUIModel);\t\n\t\tcontactFormController.event(ureq, source, Event.DONE_EVENT);\n\n\t\t//verify\n\t\tverifySendingToRecipientsAndCopyToSender();\n\t\tverifySuccessFullSendingInfoMessageSet();\n\t}", "signature": "void shouldSendMailToRecipientsAndCopyToSenderWithoutException()", "full_signature": "@Test public void shouldSendMailToRecipientsAndCopyToSenderWithoutException()", "class_method_signature": "ContactFormControllerTest.shouldSendMailToRecipientsAndCopyToSenderWithoutException()", "testcase": true, "constructor": false, "invocations": ["configureViewForSuccessfullSentMessage", "setCopyToSenderCheckbox", "event", "verifySendingToRecipientsAndCopyToSender", "verifySuccessFullSendingInfoMessageSet"]}, "focal_class": {"identifier": "ContactFormController", "superclass": "extends BasicController", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "private DialogBoxController noUsersErrorCtr;", "modifier": "private", "type": "DialogBoxController", "declarator": "noUsersErrorCtr", "var_name": "noUsersErrorCtr"}, {"original_string": "private ArrayList<String> myButtons;", "modifier": "private", "type": "ArrayList<String>", "declarator": "myButtons", "var_name": "myButtons"}, {"original_string": "private ContactFormView contactView;", "modifier": "private", "type": "ContactFormView", "declarator": "contactView", "var_name": "contactView"}, {"original_string": "private ContactUIModel contactUIModel;", "modifier": "private", "type": "ContactUIModel", "declarator": "contactUIModel", "var_name": "contactUIModel"}], "methods": [{"identifier": "ContactFormController", "parameters": "(final UserRequest ureq, final WindowControl windowControl, final boolean useDefaultTitle, final boolean isCanceable,\n            final boolean isReadonly, final boolean hasRecipientsEditable, final ContactMessage cmsg)", "modifiers": "public", "return": "", "signature": " ContactFormController(final UserRequest ureq, final WindowControl windowControl, final boolean useDefaultTitle, final boolean isCanceable,\n            final boolean isReadonly, final boolean hasRecipientsEditable, final ContactMessage cmsg)", "full_signature": "public  ContactFormController(final UserRequest ureq, final WindowControl windowControl, final boolean useDefaultTitle, final boolean isCanceable,\n            final boolean isReadonly, final boolean hasRecipientsEditable, final ContactMessage cmsg)", "class_method_signature": "ContactFormController.ContactFormController(final UserRequest ureq, final WindowControl windowControl, final boolean useDefaultTitle, final boolean isCanceable,\n            final boolean isReadonly, final boolean hasRecipientsEditable, final ContactMessage cmsg)", "testcase": false, "constructor": true}, {"identifier": "ContactFormController", "parameters": "(final ContactFormView contactFormView, final ContactUIModel contactUIModel)", "modifiers": "public", "return": "", "signature": " ContactFormController(final ContactFormView contactFormView, final ContactUIModel contactUIModel)", "full_signature": "public  ContactFormController(final ContactFormView contactFormView, final ContactUIModel contactUIModel)", "class_method_signature": "ContactFormController.ContactFormController(final ContactFormView contactFormView, final ContactUIModel contactUIModel)", "testcase": false, "constructor": true}, {"identifier": "initDisplay", "parameters": "(final UserRequest ureq, final boolean hasAtLeastOneAddress, List<OLATPrincipal> disabledIdentities)", "modifiers": "private", "return": "void", "signature": "void initDisplay(final UserRequest ureq, final boolean hasAtLeastOneAddress, List<OLATPrincipal> disabledIdentities)", "full_signature": "private void initDisplay(final UserRequest ureq, final boolean hasAtLeastOneAddress, List<OLATPrincipal> disabledIdentities)", "class_method_signature": "ContactFormController.initDisplay(final UserRequest ureq, final boolean hasAtLeastOneAddress, List<OLATPrincipal> disabledIdentities)", "testcase": false, "constructor": false}, {"identifier": "showErrorThatNoEmailCouldBeSent", "parameters": "(final UserRequest ureq, List<OLATPrincipal> disabledIdentities)", "modifiers": "private", "return": "void", "signature": "void showErrorThatNoEmailCouldBeSent(final UserRequest ureq, List<OLATPrincipal> disabledIdentities)", "full_signature": "private void showErrorThatNoEmailCouldBeSent(final UserRequest ureq, List<OLATPrincipal> disabledIdentities)", "class_method_signature": "ContactFormController.showErrorThatNoEmailCouldBeSent(final UserRequest ureq, List<OLATPrincipal> disabledIdentities)", "testcase": false, "constructor": false}, {"identifier": "event", "parameters": "(final UserRequest ureq, final Controller source, final Event event)", "modifiers": "@Override public", "return": "void", "signature": "void event(final UserRequest ureq, final Controller source, final Event event)", "full_signature": "@Override public void event(final UserRequest ureq, final Controller source, final Event event)", "class_method_signature": "ContactFormController.event(final UserRequest ureq, final Controller source, final Event event)", "testcase": false, "constructor": false}, {"identifier": "showFeedbackToUserAndAddToLogFile", "parameters": "(boolean isWarn, boolean isError, MessageSendStatus messageStatus)", "modifiers": "private", "return": "void", "signature": "void showFeedbackToUserAndAddToLogFile(boolean isWarn, boolean isError, MessageSendStatus messageStatus)", "full_signature": "private void showFeedbackToUserAndAddToLogFile(boolean isWarn, boolean isError, MessageSendStatus messageStatus)", "class_method_signature": "ContactFormController.showFeedbackToUserAndAddToLogFile(boolean isWarn, boolean isError, MessageSendStatus messageStatus)", "testcase": false, "constructor": false}, {"identifier": "createContactMessageFromViewData", "parameters": "()", "modifiers": "private", "return": "ContactMessage", "signature": "ContactMessage createContactMessageFromViewData()", "full_signature": "private ContactMessage createContactMessageFromViewData()", "class_method_signature": "ContactFormController.createContactMessageFromViewData()", "testcase": false, "constructor": false}, {"identifier": "event", "parameters": "(final UserRequest ureq, final Component source, final Event event)", "modifiers": "@Override public", "return": "void", "signature": "void event(final UserRequest ureq, final Component source, final Event event)", "full_signature": "@Override public void event(final UserRequest ureq, final Component source, final Event event)", "class_method_signature": "ContactFormController.event(final UserRequest ureq, final Component source, final Event event)", "testcase": false, "constructor": false}, {"identifier": "doDispose", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doDispose()", "full_signature": "@Override protected void doDispose()", "class_method_signature": "ContactFormController.doDispose()", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/presentation/contactform/ContactFormController.java"}, "focal_method": {"identifier": "event", "parameters": "(final UserRequest ureq, final Controller source, final Event event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void event(final UserRequest ureq, final Controller source, final Event event) {\n        if (source == noUsersErrorCtr) {\n            if (event.equals(Event.CANCELLED_EVENT)) {\n                // user has clicked the close button in the top-right corner\n                fireEvent(ureq, Event.CANCELLED_EVENT);\n            } else {\n                // user has clicked the cancel button\n                final int pos = DialogBoxUIFactory.getButtonPos(event);\n                if (pos == 0) {\n                    // cancel button has been pressed, fire event to parent\n                    fireEvent(ureq, Event.CANCELLED_EVENT);\n                }\n            }\n        } else if (contactView.is(source)) {\n            if (event == Event.DONE_EVENT) {\n\n                ContactMessage newContactMessage = createContactMessageFromViewData();\n\n                contactUIModel.setContactMessage(newContactMessage);\n                contactUIModel.setAttachements(contactView.getAttachments());\n\n                MessageSendStatus sendMessageStatus = contactUIModel.sendCurrentMessageToRecipients();\n                if (contactView.isTcpFrom()) {\n                    // TODO:Discuss: if copy to sender is checked, the sendMessageStatus of the recipient sending is cleared\n                    sendMessageStatus = contactUIModel.sendCurrentMessageAsCopyToSender();\n                }\n\n                MessageSendStatusCode sendMessageStatusCode = sendMessageStatus.getStatusCode();\n                boolean isAddressFailure = sendMessageStatusCode.isAddressFailedCase();\n                boolean isSendFailed = sendMessageStatusCode.isSendFailedCase();\n                boolean isMessageContentProblem = sendMessageStatusCode.isMessageFailedCase();\n                boolean isWarn = sendMessageStatus.isSeverityWarn();\n                boolean isError = sendMessageStatus.isSeverityError();\n                //\n                if (isAddressFailure) {\n                    showFeedbackToUserAndAddToLogFile(isWarn, isError, sendMessageStatus);\n                    // continue and send events depending on success\n                } else if (isSendFailed) {\n                    showFeedbackToUserAndAddToLogFile(isWarn, isError, sendMessageStatus);\n                    fireEvent(ureq, Event.FAILED_EVENT);\n                    return;\n                } else if (isMessageContentProblem) {\n                    showFeedbackToUserAndAddToLogFile(isWarn, isError, sendMessageStatus);\n                    return;\n                }\n\n                boolean success = sendMessageStatusCode.isSuccessfullSentMails();\n                contactView.setDisplayOnly(true);\n                if (success) {\n                    showInfo(\"msg.send.ok\");\n                    // do logging\n                    ThreadLocalUserActivityLogger.log(MailLoggingAction.MAIL_SENT, getClass());\n                    fireEvent(ureq, Event.DONE_EVENT);\n                } else {\n                    showInfo(\"error.msg.send.nok\");\n                    fireEvent(ureq, Event.FAILED_EVENT);\n                }\n            } else if (event == Event.CANCELLED_EVENT) {\n                fireEvent(ureq, Event.CANCELLED_EVENT);\n            }\n        }\n    }", "signature": "void event(final UserRequest ureq, final Controller source, final Event event)", "full_signature": "@Override public void event(final UserRequest ureq, final Controller source, final Event event)", "class_method_signature": "ContactFormController.event(final UserRequest ureq, final Controller source, final Event event)", "testcase": false, "constructor": false, "invocations": ["equals", "fireEvent", "getButtonPos", "fireEvent", "is", "createContactMessageFromViewData", "setContactMessage", "setAttachements", "getAttachments", "sendCurrentMessageToRecipients", "isTcpFrom", "sendCurrentMessageAsCopyToSender", "getStatusCode", "isAddressFailedCase", "isSendFailedCase", "isMessageFailedCase", "isSeverityWarn", "isSeverityError", "showFeedbackToUserAndAddToLogFile", "showFeedbackToUserAndAddToLogFile", "fireEvent", "showFeedbackToUserAndAddToLogFile", "isSuccessfullSentMails", "setDisplayOnly", "showInfo", "log", "getClass", "fireEvent", "showInfo", "fireEvent", "fireEvent"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}