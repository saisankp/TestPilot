{"test_class": {"identifier": "DynamoDBClientFetcherImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcherImplTest.java"}, "test_case": {"identifier": "testGetAWSRegion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAWSRegion() {\n\n        DynamoDBClientFetcherImpl dynamoDBClientFetcher = new DynamoDBClientFetcherImpl();\n        assertEquals(dynamoDBClientFetcher.getAWSRegion(\"us-west-2\"), \"us-west-2\");\n\n        dynamoDBClientFetcher = new DynamoDBClientFetcherImpl(\"us-east-1\");\n        assertEquals(dynamoDBClientFetcher.getAWSRegion(\"us-west-2\"), \"us-west-2\");\n        assertEquals(dynamoDBClientFetcher.getAWSRegion(\"\"), \"us-east-1\");\n        assertEquals(dynamoDBClientFetcher.getAWSRegion(null), \"us-east-1\");\n\n        // if this test is running in aws, then we'll get a valid region\n        // value. if running on-prem, then we'll get an exception when ec2 meta\n        // api is called. so we'll get a null value back\n\n        dynamoDBClientFetcher = new DynamoDBClientFetcherImpl();\n        dynamoDBClientFetcher.getAWSRegion(null);\n    }", "signature": "void testGetAWSRegion()", "full_signature": "@Test public void testGetAWSRegion()", "class_method_signature": "DynamoDBClientFetcherImplTest.testGetAWSRegion()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getAWSRegion", "assertEquals", "getAWSRegion", "assertEquals", "getAWSRegion", "assertEquals", "getAWSRegion", "getAWSRegion"]}, "focal_class": {"identifier": "DynamoDBClientFetcherImpl", "superclass": "", "interfaces": "implements DynamoDBClientFetcher", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcherImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DynamoDBClientFetcherImpl.class)", "var_name": "LOGGER"}, {"original_string": "private String defaultAwsRegion;", "modifier": "private", "type": "String", "declarator": "defaultAwsRegion", "var_name": "defaultAwsRegion"}], "methods": [{"identifier": "DynamoDBClientFetcherImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " DynamoDBClientFetcherImpl()", "full_signature": "public  DynamoDBClientFetcherImpl()", "class_method_signature": "DynamoDBClientFetcherImpl.DynamoDBClientFetcherImpl()", "testcase": false, "constructor": true}, {"identifier": "DynamoDBClientFetcherImpl", "parameters": "(String defaultAwsRegion)", "modifiers": "public", "return": "", "signature": " DynamoDBClientFetcherImpl(String defaultAwsRegion)", "full_signature": "public  DynamoDBClientFetcherImpl(String defaultAwsRegion)", "class_method_signature": "DynamoDBClientFetcherImpl.DynamoDBClientFetcherImpl(String defaultAwsRegion)", "testcase": false, "constructor": true}, {"identifier": "getDynamoDBClient", "parameters": "(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "DynamoDBClientAndCredentials", "signature": "DynamoDBClientAndCredentials getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "full_signature": "@Override public DynamoDBClientAndCredentials getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "class_method_signature": "DynamoDBClientFetcherImpl.getDynamoDBClient(ZTSClientNotificationSender ztsClientNotificationSender, PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getAWSRegion", "parameters": "(final String settingRegion)", "modifiers": "", "return": "String", "signature": "String getAWSRegion(final String settingRegion)", "full_signature": " String getAWSRegion(final String settingRegion)", "class_method_signature": "DynamoDBClientFetcherImpl.getAWSRegion(final String settingRegion)", "testcase": false, "constructor": false}, {"identifier": "getAuthenticatedDynamoDBClient", "parameters": "(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "modifiers": "private", "return": "DynamoDBClientAndCredentials", "signature": "DynamoDBClientAndCredentials getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "full_signature": "private DynamoDBClientAndCredentials getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "class_method_signature": "DynamoDBClientFetcherImpl.getAuthenticatedDynamoDBClient(DynamoDBClientSettings dynamoDBClientSettings,\n                                                          ZTSClientNotificationSender ztsClientNotificationSender)", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "modifiers": "private", "return": "AWSCredentialsProviderImpl", "signature": "AWSCredentialsProviderImpl getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "full_signature": "private AWSCredentialsProviderImpl getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "class_method_signature": "DynamoDBClientFetcherImpl.getCredentials(DynamoDBClientSettings dynamoDBClientSettings,\n                                                      ZTSClientNotificationSender ztsClientNotificationSender)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/DynamoDBClientFetcherImpl.java"}, "focal_method": {"identifier": "getAWSRegion", "parameters": "(final String settingRegion)", "modifiers": "", "return": "String", "body": "String getAWSRegion(final String settingRegion) {\n        if (StringUtil.isEmpty(settingRegion)) {\n            if (defaultAwsRegion == null) {\n                defaultAwsRegion = EC2MetadataUtils.getEC2InstanceRegion();\n            }\n            return defaultAwsRegion;\n        } else {\n            return settingRegion;\n        }\n    }", "signature": "String getAWSRegion(final String settingRegion)", "full_signature": " String getAWSRegion(final String settingRegion)", "class_method_signature": "DynamoDBClientFetcherImpl.getAWSRegion(final String settingRegion)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getEC2InstanceRegion"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}