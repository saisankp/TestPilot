{"test_class": {"identifier": "GetFirstNotNullRulePluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GetFirstNotNullRulePlugin targetPlugin;", "modifier": "private", "type": "GetFirstNotNullRulePlugin", "declarator": "targetPlugin", "var_name": "targetPlugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "OldModules/PluginGetFirstNotNullRule/src/test/java/info/smart_tools/smartactors/plugin/get_first_not_null_rule/GetFirstNotNullRulePluginTest.java"}, "test_case": {"identifier": "MustCorrectLoadPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustCorrectLoadPlugin() throws Exception {\n        BootstrapItem bootstrapItem = mock(BootstrapItem.class);\n        whenNew(BootstrapItem.class).withArguments(\"GetFirstNotNullRulePlugin\").thenReturn(bootstrapItem);\n\n        when(bootstrapItem.after(anyString())).thenReturn(bootstrapItem);\n        when(bootstrapItem.before(anyString())).thenReturn(bootstrapItem);\n\n        targetPlugin.load();\n\n        verifyNew(BootstrapItem.class).withArguments(\"GetFirstNotNullRulePlugin\");\n\n        ArgumentCaptor<IPoorAction> actionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n\n        verify(bootstrapItem).after(\"IOC\");\n        verify(bootstrapItem).after(\"wds_object\");\n        verify(bootstrapItem).before(\"starter\");\n        verify(bootstrapItem).process(actionArgumentCaptor.capture());\n\n        verify(bootstrap).add(bootstrapItem);\n\n        IKey strategyKey = mock(IKey.class);\n        when(Keys.getOrAdd(IResolveDependencyStrategy.class.getCanonicalName())).thenReturn(strategyKey);\n\n        GetFirstNotNullRule targetObject = mock(GetFirstNotNullRule.class);\n        whenNew(GetFirstNotNullRule.class).withNoArguments().thenReturn(targetObject);\n\n        actionArgumentCaptor.getValue().execute();\n\n        verifyStatic();\n        Keys.getOrAdd(IResolveDependencyStrategy.class.getCanonicalName());\n\n        verifyNew(GetFirstNotNullRule.class).withNoArguments();\n\n        verifyStatic();\n        IOC.resolve(strategyKey, \"getFirstNotNullRule\", targetObject);\n    }", "signature": "void MustCorrectLoadPlugin()", "full_signature": "@Test public void MustCorrectLoadPlugin()", "class_method_signature": "GetFirstNotNullRulePluginTest.MustCorrectLoadPlugin()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "anyString", "thenReturn", "when", "before", "anyString", "load", "withArguments", "verifyNew", "forClass", "after", "verify", "after", "verify", "before", "verify", "process", "verify", "capture", "add", "verify", "mock", "thenReturn", "when", "getOrAdd", "getCanonicalName", "mock", "thenReturn", "withNoArguments", "whenNew", "execute", "getValue", "verifyStatic", "getOrAdd", "getCanonicalName", "withNoArguments", "verifyNew", "verifyStatic", "resolve"]}, "focal_class": {"identifier": "GetFirstNotNullRulePlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "GetFirstNotNullRulePlugin", "parameters": "(IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " GetFirstNotNullRulePlugin(IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  GetFirstNotNullRulePlugin(IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "GetFirstNotNullRulePlugin.GetFirstNotNullRulePlugin(IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "GetFirstNotNullRulePlugin.load()", "testcase": false, "constructor": false}], "file": "OldModules/PluginGetFirstNotNullRule/src/main/java/info/smart_tools/smartactors/plugin/get_first_not_null_rule/GetFirstNotNullRulePlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"GetFirstNotNullRulePlugin\");\n\n            item\n                    .after(\"IOC\")\n                    .after(\"wds_object\")\n                    .before(\"starter\")\n                    .process(() -> {\n                        try {\n                            IOC.resolve(\n                                    Keys.getOrAdd(IResolveDependencyStrategy.class.getCanonicalName()),\n                                    \"getFirstNotNullRule\",\n                                    new GetFirstNotNullRule()\n                            );\n                        } catch (ResolutionException e) {\n                            throw new ActionExecuteException(\n                                    \"GetFirstNotNullRule plugin can't load: can't get GetFirstNotNullRule key\", e\n                            );\n                        }\n                    });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't create BootstrapItem\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "GetFirstNotNullRulePlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "before", "after", "after", "resolve", "getOrAdd", "getCanonicalName", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}