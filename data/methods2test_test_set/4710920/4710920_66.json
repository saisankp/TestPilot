{"test_class": {"identifier": "AccessKeyAuthenticatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-auth/src/test/java/org/apache/dubbo/auth/AccessKeyAuthenticatorTest.java"}, "test_case": {"identifier": "testGetSignatureNoParameter", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetSignatureNoParameter() {\n        URL url = mock(URL.class);\n        Invocation invocation = mock(Invocation.class);\n        String secretKey = \"123456\";\n        AccessKeyAuthenticator helper = new AccessKeyAuthenticator();\n        String signature = helper.getSignature(url, invocation, secretKey, String.valueOf(System.currentTimeMillis()));\n        assertNotNull(signature);\n    }", "signature": "void testGetSignatureNoParameter()", "full_signature": "@Test void testGetSignatureNoParameter()", "class_method_signature": "AccessKeyAuthenticatorTest.testGetSignatureNoParameter()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getSignature", "valueOf", "currentTimeMillis", "assertNotNull"]}, "focal_class": {"identifier": "AccessKeyAuthenticator", "superclass": "", "interfaces": "implements Authenticator", "fields": [], "methods": [{"identifier": "sign", "parameters": "(Invocation invocation, URL url)", "modifiers": "@Override public", "return": "void", "signature": "void sign(Invocation invocation, URL url)", "full_signature": "@Override public void sign(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.sign(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(Invocation invocation, URL url)", "modifiers": "@Override public", "return": "void", "signature": "void authenticate(Invocation invocation, URL url)", "full_signature": "@Override public void authenticate(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.authenticate(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "getAccessKeyPair", "parameters": "(Invocation invocation, URL url)", "modifiers": "", "return": "AccessKeyPair", "signature": "AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "full_signature": " AccessKeyPair getAccessKeyPair(Invocation invocation, URL url)", "class_method_signature": "AccessKeyAuthenticator.getAccessKeyPair(Invocation invocation, URL url)", "testcase": false, "constructor": false}, {"identifier": "getSignature", "parameters": "(URL url, Invocation invocation, String secretKey, String time)", "modifiers": "", "return": "String", "signature": "String getSignature(URL url, Invocation invocation, String secretKey, String time)", "full_signature": " String getSignature(URL url, Invocation invocation, String secretKey, String time)", "class_method_signature": "AccessKeyAuthenticator.getSignature(URL url, Invocation invocation, String secretKey, String time)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-auth/src/main/java/org/apache/dubbo/auth/AccessKeyAuthenticator.java"}, "focal_method": {"identifier": "getSignature", "parameters": "(URL url, Invocation invocation, String secretKey, String time)", "modifiers": "", "return": "String", "body": "String getSignature(URL url, Invocation invocation, String secretKey, String time) {\n        boolean parameterEncrypt = url.getParameter(Constants.PARAMETER_SIGNATURE_ENABLE_KEY, false);\n        String signature;\n        String requestString = String.format(Constants.SIGNATURE_STRING_FORMAT,\n                url.getColonSeparatedKey(), invocation.getMethodName(), secretKey, time);\n        if (parameterEncrypt) {\n            signature = SignatureUtils.sign(invocation.getArguments(), requestString, secretKey);\n        } else {\n            signature = SignatureUtils.sign(requestString, secretKey);\n        }\n        return signature;\n    }", "signature": "String getSignature(URL url, Invocation invocation, String secretKey, String time)", "full_signature": " String getSignature(URL url, Invocation invocation, String secretKey, String time)", "class_method_signature": "AccessKeyAuthenticator.getSignature(URL url, Invocation invocation, String secretKey, String time)", "testcase": false, "constructor": false, "invocations": ["getParameter", "format", "getColonSeparatedKey", "getMethodName", "sign", "getArguments", "sign"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}