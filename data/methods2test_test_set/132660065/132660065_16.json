{"test_class": {"identifier": "ConverterUtilsTest", "superclass": "extends AbstractCodecTest", "interfaces": "", "fields": [], "file": "lighty-core/lighty-codecs/src/test/java/io/lighty/codecs/api/ConverterUtilsTest.java"}, "test_case": {"identifier": "testRpcAsOutput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRpcAsOutput() throws Exception {\n        XmlElement makeToastRpc = XmlElement.fromString(loadResourceAsString(\"make-toast-input_rev.xml\"));\n        XmlElement rpcAsOutput =\n                ConverterUtils.rpcAsOutput(makeToastRpc, \"http://netconfcentral.org/ns/toaster?revision=2009-11-20\");\n        Assert.assertNotNull(rpcAsOutput);\n        Assert.assertTrue(rpcAsOutput.getName().equals(\"output\"));\n        rpcAsOutput = ConverterUtils.rpcAsOutput(makeToastRpc);\n        Assert.assertNotNull(rpcAsOutput);\n        Assert.assertTrue(rpcAsOutput.getName().equals(\"output\"));\n    }", "signature": "void testRpcAsOutput()", "full_signature": "@Test public void testRpcAsOutput()", "class_method_signature": "ConverterUtilsTest.testRpcAsOutput()", "testcase": true, "constructor": false, "invocations": ["fromString", "loadResourceAsString", "rpcAsOutput", "assertNotNull", "assertTrue", "equals", "getName", "rpcAsOutput", "assertNotNull", "assertTrue", "equals", "getName"]}, "focal_class": {"identifier": "ConverterUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ConverterUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConverterUtils()", "full_signature": "private  ConverterUtils()", "class_method_signature": "ConverterUtils.ConverterUtils()", "testcase": false, "constructor": true}, {"identifier": "loadRpc", "parameters": "(final SchemaContext schemaContext, final QName rpcQName)", "modifiers": "public static", "return": "Optional<RpcDefinition>", "signature": "Optional<RpcDefinition> loadRpc(final SchemaContext schemaContext, final QName rpcQName)", "full_signature": "public static Optional<RpcDefinition> loadRpc(final SchemaContext schemaContext, final QName rpcQName)", "class_method_signature": "ConverterUtils.loadRpc(final SchemaContext schemaContext, final QName rpcQName)", "testcase": false, "constructor": false}, {"identifier": "loadNotification", "parameters": "(final SchemaContext schemaContext,\n            final QName notificationQname)", "modifiers": "public static", "return": "Optional<NotificationDefinition>", "signature": "Optional<NotificationDefinition> loadNotification(final SchemaContext schemaContext,\n            final QName notificationQname)", "full_signature": "public static Optional<NotificationDefinition> loadNotification(final SchemaContext schemaContext,\n            final QName notificationQname)", "class_method_signature": "ConverterUtils.loadNotification(final SchemaContext schemaContext,\n            final QName notificationQname)", "testcase": false, "constructor": false}, {"identifier": "getRpcQName", "parameters": "(final XmlElement xmlElement)", "modifiers": "public static", "return": "Optional<QName>", "signature": "Optional<QName> getRpcQName(final XmlElement xmlElement)", "full_signature": "public static Optional<QName> getRpcQName(final XmlElement xmlElement)", "class_method_signature": "ConverterUtils.getRpcQName(final XmlElement xmlElement)", "testcase": false, "constructor": false}, {"identifier": "getRpcQName", "parameters": "(final String inputString)", "modifiers": "public static", "return": "Optional<QName>", "signature": "Optional<QName> getRpcQName(final String inputString)", "full_signature": "public static Optional<QName> getRpcQName(final String inputString)", "class_method_signature": "ConverterUtils.getRpcQName(final String inputString)", "testcase": false, "constructor": false}, {"identifier": "rpcAsInput", "parameters": "(final XmlElement inputXmlElement)", "modifiers": "public static", "return": "XmlElement", "signature": "XmlElement rpcAsInput(final XmlElement inputXmlElement)", "full_signature": "public static XmlElement rpcAsInput(final XmlElement inputXmlElement)", "class_method_signature": "ConverterUtils.rpcAsInput(final XmlElement inputXmlElement)", "testcase": false, "constructor": false}, {"identifier": "rpcAsInput", "parameters": "(final XmlElement inputXmlElement, final String namespace)", "modifiers": "public static", "return": "XmlElement", "signature": "XmlElement rpcAsInput(final XmlElement inputXmlElement, final String namespace)", "full_signature": "public static XmlElement rpcAsInput(final XmlElement inputXmlElement, final String namespace)", "class_method_signature": "ConverterUtils.rpcAsInput(final XmlElement inputXmlElement, final String namespace)", "testcase": false, "constructor": false}, {"identifier": "rpcAsOutput", "parameters": "(final XmlElement inputXmlElement)", "modifiers": "public static", "return": "XmlElement", "signature": "XmlElement rpcAsOutput(final XmlElement inputXmlElement)", "full_signature": "public static XmlElement rpcAsOutput(final XmlElement inputXmlElement)", "class_method_signature": "ConverterUtils.rpcAsOutput(final XmlElement inputXmlElement)", "testcase": false, "constructor": false}, {"identifier": "rpcAsOutput", "parameters": "(final XmlElement inputXmlElement, final String namespace)", "modifiers": "public static", "return": "XmlElement", "signature": "XmlElement rpcAsOutput(final XmlElement inputXmlElement, final String namespace)", "full_signature": "public static XmlElement rpcAsOutput(final XmlElement inputXmlElement, final String namespace)", "class_method_signature": "ConverterUtils.rpcAsOutput(final XmlElement inputXmlElement, final String namespace)", "testcase": false, "constructor": false}, {"identifier": "getSchemaNode", "parameters": "(final SchemaContext schemaContext, final QName qname)", "modifiers": "public static", "return": "SchemaNode", "signature": "SchemaNode getSchemaNode(final SchemaContext schemaContext, final QName qname)", "full_signature": "public static SchemaNode getSchemaNode(final SchemaContext schemaContext, final QName qname)", "class_method_signature": "ConverterUtils.getSchemaNode(final SchemaContext schemaContext, final QName qname)", "testcase": false, "constructor": false}, {"identifier": "getSchemaNode", "parameters": "(final SchemaContext schemaContext,\n            final YangInstanceIdentifier yangInstanceIdentifier)", "modifiers": "public static", "return": "SchemaNode", "signature": "SchemaNode getSchemaNode(final SchemaContext schemaContext,\n            final YangInstanceIdentifier yangInstanceIdentifier)", "full_signature": "public static SchemaNode getSchemaNode(final SchemaContext schemaContext,\n            final YangInstanceIdentifier yangInstanceIdentifier)", "class_method_signature": "ConverterUtils.getSchemaNode(final SchemaContext schemaContext,\n            final YangInstanceIdentifier yangInstanceIdentifier)", "testcase": false, "constructor": false}, {"identifier": "getSchemaNode", "parameters": "(final SchemaContext schemaContext, final String namespace,\n            final String revision, final String localName)", "modifiers": "public static", "return": "SchemaNode", "signature": "SchemaNode getSchemaNode(final SchemaContext schemaContext, final String namespace,\n            final String revision, final String localName)", "full_signature": "public static SchemaNode getSchemaNode(final SchemaContext schemaContext, final String namespace,\n            final String revision, final String localName)", "class_method_signature": "ConverterUtils.getSchemaNode(final SchemaContext schemaContext, final String namespace,\n            final String revision, final String localName)", "testcase": false, "constructor": false}, {"identifier": "wrapNodes", "parameters": "(final String nodeName, final String namespace,\n            final Collection<XmlElement> children)", "modifiers": "private static", "return": "XmlElement", "signature": "XmlElement wrapNodes(final String nodeName, final String namespace,\n            final Collection<XmlElement> children)", "full_signature": "private static XmlElement wrapNodes(final String nodeName, final String namespace,\n            final Collection<XmlElement> children)", "class_method_signature": "ConverterUtils.wrapNodes(final String nodeName, final String namespace,\n            final Collection<XmlElement> children)", "testcase": false, "constructor": false}, {"identifier": "findModule", "parameters": "(final SchemaContext schemaContext, final QName qname)", "modifiers": "private static", "return": "Optional<Module>", "signature": "Optional<Module> findModule(final SchemaContext schemaContext, final QName qname)", "full_signature": "private static Optional<Module> findModule(final SchemaContext schemaContext, final QName qname)", "class_method_signature": "ConverterUtils.findModule(final SchemaContext schemaContext, final QName qname)", "testcase": false, "constructor": false}, {"identifier": "findDefinition", "parameters": "(final QName qname, final Collection<T> nodes)", "modifiers": "private static", "return": "Optional<T>", "signature": "Optional<T> findDefinition(final QName qname, final Collection<T> nodes)", "full_signature": "private static Optional<T> findDefinition(final QName qname, final Collection<T> nodes)", "class_method_signature": "ConverterUtils.findDefinition(final QName qname, final Collection<T> nodes)", "testcase": false, "constructor": false}], "file": "lighty-core/lighty-codecs/src/main/java/io/lighty/codecs/api/ConverterUtils.java"}, "focal_method": {"identifier": "rpcAsOutput", "parameters": "(final XmlElement inputXmlElement)", "modifiers": "public static", "return": "XmlElement", "body": "public static XmlElement rpcAsOutput(final XmlElement inputXmlElement) {\n        return rpcAsOutput(inputXmlElement, \"\");\n    }", "signature": "XmlElement rpcAsOutput(final XmlElement inputXmlElement)", "full_signature": "public static XmlElement rpcAsOutput(final XmlElement inputXmlElement)", "class_method_signature": "ConverterUtils.rpcAsOutput(final XmlElement inputXmlElement)", "testcase": false, "constructor": false, "invocations": ["rpcAsOutput"]}, "repository": {"repo_id": 132660065, "url": "https://github.com/PantheonTechnologies/lighty-core", "stars": 45, "created": "5/8/2018 8:16:54 PM +00:00", "updates": "2020-01-22T13:46:21+00:00", "fork": "False", "license": "licensed"}}