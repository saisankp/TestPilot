{"test_class": {"identifier": "StringUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/StringUtilTest.java"}, "test_case": {"identifier": "bytesToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bytesToString() {\n        assertEquals(\"0\", StringUtil.bytesToString(null));\n        assertEquals(\"0\", StringUtil.bytesToString(new byte[] {}));\n        assertEquals(\"0\", StringUtil.bytesToString(new byte[] { 0, 0, 0, 0, 0, 0 }));\n        assertEquals(\"1\", StringUtil.bytesToString(new byte[] { 0, 0, 0, 0, 0, 1 }));\n        assertEquals(\"GWO823H\", StringUtil.bytesToString(new byte[] { 1, 0, 0, 0, 0, 0 }));\n        assertEquals(\"cIx81\", StringUtil.bytesToString(new byte[] { 0, 1, 2, 10, 62 }));\n        assertEquals(\"cIx8QaO8KjH\", StringUtil.bytesToString(new byte[] { 0, 1, 2, 10, 62, 0, 1, 2, 10, 62 }));\n\n        assertEquals(\"IJG2Y0YVRQ5V2\", StringUtil.bytesToString(new byte[] { 0, 1, 2, 10, 62, 0, 1, 2, 10, 62 }, true));\n    }", "signature": "void bytesToString()", "full_signature": "@Test public void bytesToString()", "class_method_signature": "StringUtilTest.bytesToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "bytesToString", "assertEquals", "bytesToString", "assertEquals", "bytesToString", "assertEquals", "bytesToString", "assertEquals", "bytesToString", "assertEquals", "bytesToString", "assertEquals", "bytesToString", "assertEquals", "bytesToString"]}, "focal_class": {"identifier": "StringUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] DIGITS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "DIGITS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\".toCharArray()", "var_name": "DIGITS"}, {"original_string": "private static final char[] DIGITS_NOCASE = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "DIGITS_NOCASE = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray()", "var_name": "DIGITS_NOCASE"}], "methods": [{"identifier": "isEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(String str)", "full_signature": "public static boolean isEmpty(String str)", "class_method_signature": "StringUtil.isEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "isAllEmpty", "parameters": "(String...strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAllEmpty(String...strings)", "full_signature": "public static boolean isAllEmpty(String...strings)", "class_method_signature": "StringUtil.isAllEmpty(String...strings)", "testcase": false, "constructor": false}, {"identifier": "isAnyEmpty", "parameters": "(String...strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAnyEmpty(String...strings)", "full_signature": "public static boolean isAnyEmpty(String...strings)", "class_method_signature": "StringUtil.isAnyEmpty(String...strings)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(String str)", "full_signature": "public static boolean isNotEmpty(String str)", "class_method_signature": "StringUtil.isNotEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(String str)", "full_signature": "public static boolean isBlank(String str)", "class_method_signature": "StringUtil.isBlank(String str)", "testcase": false, "constructor": false}, {"identifier": "isAllBlank", "parameters": "(String...strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAllBlank(String...strings)", "full_signature": "public static boolean isAllBlank(String...strings)", "class_method_signature": "StringUtil.isAllBlank(String...strings)", "testcase": false, "constructor": false}, {"identifier": "isAnyBlank", "parameters": "(String...strings)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAnyBlank(String...strings)", "full_signature": "public static boolean isAnyBlank(String...strings)", "class_method_signature": "StringUtil.isAnyBlank(String...strings)", "testcase": false, "constructor": false}, {"identifier": "isNotBlank", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotBlank(String str)", "full_signature": "public static boolean isNotBlank(String str)", "class_method_signature": "StringUtil.isNotBlank(String str)", "testcase": false, "constructor": false}, {"identifier": "defaultIfNull", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String defaultIfNull(String str)", "full_signature": "public static String defaultIfNull(String str)", "class_method_signature": "StringUtil.defaultIfNull(String str)", "testcase": false, "constructor": false}, {"identifier": "defaultIfNull", "parameters": "(String str, String defaultStr)", "modifiers": "public static", "return": "String", "signature": "String defaultIfNull(String str, String defaultStr)", "full_signature": "public static String defaultIfNull(String str, String defaultStr)", "class_method_signature": "StringUtil.defaultIfNull(String str, String defaultStr)", "testcase": false, "constructor": false}, {"identifier": "defaultIfEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String defaultIfEmpty(String str)", "full_signature": "public static String defaultIfEmpty(String str)", "class_method_signature": "StringUtil.defaultIfEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "defaultIfEmpty", "parameters": "(String str, String defaultStr)", "modifiers": "public static", "return": "String", "signature": "String defaultIfEmpty(String str, String defaultStr)", "full_signature": "public static String defaultIfEmpty(String str, String defaultStr)", "class_method_signature": "StringUtil.defaultIfEmpty(String str, String defaultStr)", "testcase": false, "constructor": false}, {"identifier": "defaultIfBlank", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String defaultIfBlank(String str)", "full_signature": "public static String defaultIfBlank(String str)", "class_method_signature": "StringUtil.defaultIfBlank(String str)", "testcase": false, "constructor": false}, {"identifier": "defaultIfBlank", "parameters": "(String str, String defaultStr)", "modifiers": "public static", "return": "String", "signature": "String defaultIfBlank(String str, String defaultStr)", "full_signature": "public static String defaultIfBlank(String str, String defaultStr)", "class_method_signature": "StringUtil.defaultIfBlank(String str, String defaultStr)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trim(String str)", "full_signature": "public static String trim(String str)", "class_method_signature": "StringUtil.trim(String str)", "testcase": false, "constructor": false}, {"identifier": "trimAll", "parameters": "(String[] strings)", "modifiers": "public static", "return": "void", "signature": "void trimAll(String[] strings)", "full_signature": "public static void trimAll(String[] strings)", "class_method_signature": "StringUtil.trimAll(String[] strings)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str, String stripChars)", "modifiers": "public static", "return": "String", "signature": "String trim(String str, String stripChars)", "full_signature": "public static String trim(String str, String stripChars)", "class_method_signature": "StringUtil.trim(String str, String stripChars)", "testcase": false, "constructor": false}, {"identifier": "trimStart", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trimStart(String str)", "full_signature": "public static String trimStart(String str)", "class_method_signature": "StringUtil.trimStart(String str)", "testcase": false, "constructor": false}, {"identifier": "trimStart", "parameters": "(String str, String stripChars)", "modifiers": "public static", "return": "String", "signature": "String trimStart(String str, String stripChars)", "full_signature": "public static String trimStart(String str, String stripChars)", "class_method_signature": "StringUtil.trimStart(String str, String stripChars)", "testcase": false, "constructor": false}, {"identifier": "trimEnd", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trimEnd(String str)", "full_signature": "public static String trimEnd(String str)", "class_method_signature": "StringUtil.trimEnd(String str)", "testcase": false, "constructor": false}, {"identifier": "trimEnd", "parameters": "(String str, String stripChars)", "modifiers": "public static", "return": "String", "signature": "String trimEnd(String str, String stripChars)", "full_signature": "public static String trimEnd(String str, String stripChars)", "class_method_signature": "StringUtil.trimEnd(String str, String stripChars)", "testcase": false, "constructor": false}, {"identifier": "trimToNull", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trimToNull(String str)", "full_signature": "public static String trimToNull(String str)", "class_method_signature": "StringUtil.trimToNull(String str)", "testcase": false, "constructor": false}, {"identifier": "trimToNull", "parameters": "(String str, String stripChars)", "modifiers": "public static", "return": "String", "signature": "String trimToNull(String str, String stripChars)", "full_signature": "public static String trimToNull(String str, String stripChars)", "class_method_signature": "StringUtil.trimToNull(String str, String stripChars)", "testcase": false, "constructor": false}, {"identifier": "trimToEmpty", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String trimToEmpty(String str)", "full_signature": "public static String trimToEmpty(String str)", "class_method_signature": "StringUtil.trimToEmpty(String str)", "testcase": false, "constructor": false}, {"identifier": "trimToEmpty", "parameters": "(String str, String stripChars)", "modifiers": "public static", "return": "String", "signature": "String trimToEmpty(String str, String stripChars)", "full_signature": "public static String trimToEmpty(String str, String stripChars)", "class_method_signature": "StringUtil.trimToEmpty(String str, String stripChars)", "testcase": false, "constructor": false}, {"identifier": "trim", "parameters": "(String str, String stripChars, int mode)", "modifiers": "private static", "return": "String", "signature": "String trim(String str, String stripChars, int mode)", "full_signature": "private static String trim(String str, String stripChars, int mode)", "class_method_signature": "StringUtil.trim(String str, String stripChars, int mode)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(String str1, String str2)", "full_signature": "public static boolean equals(String str1, String str2)", "class_method_signature": "StringUtil.equals(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreCase", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsIgnoreCase(String str1, String str2)", "full_signature": "public static boolean equalsIgnoreCase(String str1, String str2)", "class_method_signature": "StringUtil.equalsIgnoreCase(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "equalsOne", "parameters": "(String src, String[] dest)", "modifiers": "public static", "return": "int", "signature": "int equalsOne(String src, String[] dest)", "full_signature": "public static int equalsOne(String src, String[] dest)", "class_method_signature": "StringUtil.equalsOne(String src, String[] dest)", "testcase": false, "constructor": false}, {"identifier": "equalsOneIgnoreCase", "parameters": "(String src, String[] dest)", "modifiers": "public static", "return": "int", "signature": "int equalsOneIgnoreCase(String src, String[] dest)", "full_signature": "public static int equalsOneIgnoreCase(String src, String[] dest)", "class_method_signature": "StringUtil.equalsOneIgnoreCase(String src, String[] dest)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreCase", "parameters": "(String as[], String as1[])", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsIgnoreCase(String as[], String as1[])", "full_signature": "public static boolean equalsIgnoreCase(String as[], String as1[])", "class_method_signature": "StringUtil.equalsIgnoreCase(String as[], String as1[])", "testcase": false, "constructor": false}, {"identifier": "isAlpha", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAlpha(String str)", "full_signature": "public static boolean isAlpha(String str)", "class_method_signature": "StringUtil.isAlpha(String str)", "testcase": false, "constructor": false}, {"identifier": "isAlphaSpace", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAlphaSpace(String str)", "full_signature": "public static boolean isAlphaSpace(String str)", "class_method_signature": "StringUtil.isAlphaSpace(String str)", "testcase": false, "constructor": false}, {"identifier": "isAlphanumeric", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAlphanumeric(String str)", "full_signature": "public static boolean isAlphanumeric(String str)", "class_method_signature": "StringUtil.isAlphanumeric(String str)", "testcase": false, "constructor": false}, {"identifier": "isAlphanumericSpace", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAlphanumericSpace(String str)", "full_signature": "public static boolean isAlphanumericSpace(String str)", "class_method_signature": "StringUtil.isAlphanumericSpace(String str)", "testcase": false, "constructor": false}, {"identifier": "isNumeric", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumeric(String str)", "full_signature": "public static boolean isNumeric(String str)", "class_method_signature": "StringUtil.isNumeric(String str)", "testcase": false, "constructor": false}, {"identifier": "isNumericSpace", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumericSpace(String str)", "full_signature": "public static boolean isNumericSpace(String str)", "class_method_signature": "StringUtil.isNumericSpace(String str)", "testcase": false, "constructor": false}, {"identifier": "isWhitespace", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWhitespace(String str)", "full_signature": "public static boolean isWhitespace(String str)", "class_method_signature": "StringUtil.isWhitespace(String str)", "testcase": false, "constructor": false}, {"identifier": "toUpperCase", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toUpperCase(String str)", "full_signature": "public static String toUpperCase(String str)", "class_method_signature": "StringUtil.toUpperCase(String str)", "testcase": false, "constructor": false}, {"identifier": "toLowerCase", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toLowerCase(String str)", "full_signature": "public static String toLowerCase(String str)", "class_method_signature": "StringUtil.toLowerCase(String str)", "testcase": false, "constructor": false}, {"identifier": "capitalize", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String capitalize(String str)", "full_signature": "public static String capitalize(String str)", "class_method_signature": "StringUtil.capitalize(String str)", "testcase": false, "constructor": false}, {"identifier": "uncapitalize", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String uncapitalize(String str)", "full_signature": "public static String uncapitalize(String str)", "class_method_signature": "StringUtil.uncapitalize(String str)", "testcase": false, "constructor": false}, {"identifier": "decapitalize", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String decapitalize(String str)", "full_signature": "public static String decapitalize(String str)", "class_method_signature": "StringUtil.decapitalize(String str)", "testcase": false, "constructor": false}, {"identifier": "swapCase", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String swapCase(String str)", "full_signature": "public static String swapCase(String str)", "class_method_signature": "StringUtil.swapCase(String str)", "testcase": false, "constructor": false}, {"identifier": "fromCamelCase", "parameters": "(String str, char separator)", "modifiers": "public static", "return": "String", "signature": "String fromCamelCase(String str, char separator)", "full_signature": "public static String fromCamelCase(String str, char separator)", "class_method_signature": "StringUtil.fromCamelCase(String str, char separator)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str)", "full_signature": "public static String[] split(String str)", "class_method_signature": "StringUtil.split(String str)", "testcase": false, "constructor": false}, {"identifier": "parseStringToLongList", "parameters": "(String source, String token)", "modifiers": "public static", "return": "List<Long>", "signature": "List<Long> parseStringToLongList(String source, String token)", "full_signature": "public static List<Long> parseStringToLongList(String source, String token)", "class_method_signature": "StringUtil.parseStringToLongList(String source, String token)", "testcase": false, "constructor": false}, {"identifier": "splitNoCompress", "parameters": "(String src, String delimiter)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitNoCompress(String src, String delimiter)", "full_signature": "public static String[] splitNoCompress(String src, String delimiter)", "class_method_signature": "StringUtil.splitNoCompress(String src, String delimiter)", "testcase": false, "constructor": false}, {"identifier": "splitc", "parameters": "(String src, String d)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitc(String src, String d)", "full_signature": "public static String[] splitc(String src, String d)", "class_method_signature": "StringUtil.splitc(String src, String d)", "testcase": false, "constructor": false}, {"identifier": "splitc", "parameters": "(String src, char delimiter)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitc(String src, char delimiter)", "full_signature": "public static String[] splitc(String src, char delimiter)", "class_method_signature": "StringUtil.splitc(String src, char delimiter)", "testcase": false, "constructor": false}, {"identifier": "splitc", "parameters": "(String src, char[] delimiters)", "modifiers": "public static", "return": "String[]", "signature": "String[] splitc(String src, char[] delimiters)", "full_signature": "public static String[] splitc(String src, char[] delimiters)", "class_method_signature": "StringUtil.splitc(String src, char[] delimiters)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, char separatorChar)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str, char separatorChar)", "full_signature": "public static String[] split(String str, char separatorChar)", "class_method_signature": "StringUtil.split(String str, char separatorChar)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, String separatorChars)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str, String separatorChars)", "full_signature": "public static String[] split(String str, String separatorChars)", "class_method_signature": "StringUtil.split(String str, String separatorChars)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String str, String separatorChars, int max)", "modifiers": "public static", "return": "String[]", "signature": "String[] split(String str, String separatorChars, int max)", "full_signature": "public static String[] split(String str, String separatorChars, int max)", "class_method_signature": "StringUtil.split(String str, String separatorChars, int max)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(T...array)", "modifiers": "public static", "return": "String", "signature": "String join(T...array)", "full_signature": "public static String join(T...array)", "class_method_signature": "StringUtil.join(T...array)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(T[] array, char separator)", "modifiers": "public static", "return": "String", "signature": "String join(T[] array, char separator)", "full_signature": "public static String join(T[] array, char separator)", "class_method_signature": "StringUtil.join(T[] array, char separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(T[] array, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(T[] array, String separator)", "full_signature": "public static String join(T[] array, String separator)", "class_method_signature": "StringUtil.join(T[] array, String separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterator<?> iterator, char separator)", "modifiers": "public static", "return": "String", "signature": "String join(Iterator<?> iterator, char separator)", "full_signature": "public static String join(Iterator<?> iterator, char separator)", "class_method_signature": "StringUtil.join(Iterator<?> iterator, char separator)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Iterator<?> iterator, String separator)", "modifiers": "public static", "return": "String", "signature": "String join(Iterator<?> iterator, String separator)", "full_signature": "public static String join(Iterator<?> iterator, String separator)", "class_method_signature": "StringUtil.join(Iterator<?> iterator, String separator)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(String str, char searchChar)", "modifiers": "public static", "return": "int", "signature": "int indexOf(String str, char searchChar)", "full_signature": "public static int indexOf(String str, char searchChar)", "class_method_signature": "StringUtil.indexOf(String str, char searchChar)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(String str, char searchChar, int startPos)", "modifiers": "public static", "return": "int", "signature": "int indexOf(String str, char searchChar, int startPos)", "full_signature": "public static int indexOf(String str, char searchChar, int startPos)", "class_method_signature": "StringUtil.indexOf(String str, char searchChar, int startPos)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(String str, String searchStr)", "modifiers": "public static", "return": "int", "signature": "int indexOf(String str, String searchStr)", "full_signature": "public static int indexOf(String str, String searchStr)", "class_method_signature": "StringUtil.indexOf(String str, String searchStr)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(String str, String searchStr, int startPos)", "modifiers": "public static", "return": "int", "signature": "int indexOf(String str, String searchStr, int startPos)", "full_signature": "public static int indexOf(String str, String searchStr, int startPos)", "class_method_signature": "StringUtil.indexOf(String str, String searchStr, int startPos)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(int num, String str, String searchStr)", "modifiers": "public static", "return": "int", "signature": "int indexOf(int num, String str, String searchStr)", "full_signature": "public static int indexOf(int num, String str, String searchStr)", "class_method_signature": "StringUtil.indexOf(int num, String str, String searchStr)", "testcase": false, "constructor": false}, {"identifier": "indexOfAny", "parameters": "(String str, char[] searchChars)", "modifiers": "public static", "return": "int", "signature": "int indexOfAny(String str, char[] searchChars)", "full_signature": "public static int indexOfAny(String str, char[] searchChars)", "class_method_signature": "StringUtil.indexOfAny(String str, char[] searchChars)", "testcase": false, "constructor": false}, {"identifier": "indexOfAny", "parameters": "(String str, char[] searchChars, int startIndex)", "modifiers": "public static", "return": "int", "signature": "int indexOfAny(String str, char[] searchChars, int startIndex)", "full_signature": "public static int indexOfAny(String str, char[] searchChars, int startIndex)", "class_method_signature": "StringUtil.indexOfAny(String str, char[] searchChars, int startIndex)", "testcase": false, "constructor": false}, {"identifier": "indexOfAny", "parameters": "(String str, String searchChars)", "modifiers": "public static", "return": "int", "signature": "int indexOfAny(String str, String searchChars)", "full_signature": "public static int indexOfAny(String str, String searchChars)", "class_method_signature": "StringUtil.indexOfAny(String str, String searchChars)", "testcase": false, "constructor": false}, {"identifier": "indexOfAny", "parameters": "(String str, String searchChars, int startIndex)", "modifiers": "public static", "return": "int", "signature": "int indexOfAny(String str, String searchChars, int startIndex)", "full_signature": "public static int indexOfAny(String str, String searchChars, int startIndex)", "class_method_signature": "StringUtil.indexOfAny(String str, String searchChars, int startIndex)", "testcase": false, "constructor": false}, {"identifier": "indexOfAny", "parameters": "(String str, String[] searchStrs)", "modifiers": "public static", "return": "int", "signature": "int indexOfAny(String str, String[] searchStrs)", "full_signature": "public static int indexOfAny(String str, String[] searchStrs)", "class_method_signature": "StringUtil.indexOfAny(String str, String[] searchStrs)", "testcase": false, "constructor": false}, {"identifier": "indexOfAny", "parameters": "(String str, String[] searchStrs, int startIndex)", "modifiers": "public static", "return": "int", "signature": "int indexOfAny(String str, String[] searchStrs, int startIndex)", "full_signature": "public static int indexOfAny(String str, String[] searchStrs, int startIndex)", "class_method_signature": "StringUtil.indexOfAny(String str, String[] searchStrs, int startIndex)", "testcase": false, "constructor": false}, {"identifier": "indexOfAnyBut", "parameters": "(String str, char[] searchChars)", "modifiers": "public static", "return": "int", "signature": "int indexOfAnyBut(String str, char[] searchChars)", "full_signature": "public static int indexOfAnyBut(String str, char[] searchChars)", "class_method_signature": "StringUtil.indexOfAnyBut(String str, char[] searchChars)", "testcase": false, "constructor": false}, {"identifier": "indexOfAnyBut", "parameters": "(String str, String searchChars)", "modifiers": "public static", "return": "int", "signature": "int indexOfAnyBut(String str, String searchChars)", "full_signature": "public static int indexOfAnyBut(String str, String searchChars)", "class_method_signature": "StringUtil.indexOfAnyBut(String str, String searchChars)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(String str, char searchChar)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOf(String str, char searchChar)", "full_signature": "public static int lastIndexOf(String str, char searchChar)", "class_method_signature": "StringUtil.lastIndexOf(String str, char searchChar)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(String str, char searchChar, int startPos)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOf(String str, char searchChar, int startPos)", "full_signature": "public static int lastIndexOf(String str, char searchChar, int startPos)", "class_method_signature": "StringUtil.lastIndexOf(String str, char searchChar, int startPos)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(String str, String searchStr)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOf(String str, String searchStr)", "full_signature": "public static int lastIndexOf(String str, String searchStr)", "class_method_signature": "StringUtil.lastIndexOf(String str, String searchStr)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(String str, String searchStr, int startPos)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOf(String str, String searchStr, int startPos)", "full_signature": "public static int lastIndexOf(String str, String searchStr, int startPos)", "class_method_signature": "StringUtil.lastIndexOf(String str, String searchStr, int startPos)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOfAny", "parameters": "(String str, String[] searchStrs)", "modifiers": "public static", "return": "int", "signature": "int lastIndexOfAny(String str, String[] searchStrs)", "full_signature": "public static int lastIndexOfAny(String str, String[] searchStrs)", "class_method_signature": "StringUtil.lastIndexOfAny(String str, String[] searchStrs)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String str, char searchChar)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(String str, char searchChar)", "full_signature": "public static boolean contains(String str, char searchChar)", "class_method_signature": "StringUtil.contains(String str, char searchChar)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String str, String searchStr)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(String str, String searchStr)", "full_signature": "public static boolean contains(String str, String searchStr)", "class_method_signature": "StringUtil.contains(String str, String searchStr)", "testcase": false, "constructor": false}, {"identifier": "containsOnly", "parameters": "(String str, char[] valid)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsOnly(String str, char[] valid)", "full_signature": "public static boolean containsOnly(String str, char[] valid)", "class_method_signature": "StringUtil.containsOnly(String str, char[] valid)", "testcase": false, "constructor": false}, {"identifier": "containsOnly", "parameters": "(String str, String valid)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsOnly(String str, String valid)", "full_signature": "public static boolean containsOnly(String str, String valid)", "class_method_signature": "StringUtil.containsOnly(String str, String valid)", "testcase": false, "constructor": false}, {"identifier": "containsNone", "parameters": "(String str, char[] invalid)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsNone(String str, char[] invalid)", "full_signature": "public static boolean containsNone(String str, char[] invalid)", "class_method_signature": "StringUtil.containsNone(String str, char[] invalid)", "testcase": false, "constructor": false}, {"identifier": "containsNone", "parameters": "(String str, String invalidChars)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsNone(String str, String invalidChars)", "full_signature": "public static boolean containsNone(String str, String invalidChars)", "class_method_signature": "StringUtil.containsNone(String str, String invalidChars)", "testcase": false, "constructor": false}, {"identifier": "countMatches", "parameters": "(String str, String subStr)", "modifiers": "public static", "return": "int", "signature": "int countMatches(String str, String subStr)", "full_signature": "public static int countMatches(String str, String subStr)", "class_method_signature": "StringUtil.countMatches(String str, String subStr)", "testcase": false, "constructor": false}, {"identifier": "substring", "parameters": "(String str, int start)", "modifiers": "public static", "return": "String", "signature": "String substring(String str, int start)", "full_signature": "public static String substring(String str, int start)", "class_method_signature": "StringUtil.substring(String str, int start)", "testcase": false, "constructor": false}, {"identifier": "substring", "parameters": "(String str, int start, int end)", "modifiers": "public static", "return": "String", "signature": "String substring(String str, int start, int end)", "full_signature": "public static String substring(String str, int start, int end)", "class_method_signature": "StringUtil.substring(String str, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "left", "parameters": "(String str, int len)", "modifiers": "public static", "return": "String", "signature": "String left(String str, int len)", "full_signature": "public static String left(String str, int len)", "class_method_signature": "StringUtil.left(String str, int len)", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "(String str, int len)", "modifiers": "public static", "return": "String", "signature": "String right(String str, int len)", "full_signature": "public static String right(String str, int len)", "class_method_signature": "StringUtil.right(String str, int len)", "testcase": false, "constructor": false}, {"identifier": "mid", "parameters": "(String str, int pos, int len)", "modifiers": "public static", "return": "String", "signature": "String mid(String str, int pos, int len)", "full_signature": "public static String mid(String str, int pos, int len)", "class_method_signature": "StringUtil.mid(String str, int pos, int len)", "testcase": false, "constructor": false}, {"identifier": "substringBefore", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String", "signature": "String substringBefore(String str, String separator)", "full_signature": "public static String substringBefore(String str, String separator)", "class_method_signature": "StringUtil.substringBefore(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "substringAfter", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String", "signature": "String substringAfter(String str, String separator)", "full_signature": "public static String substringAfter(String str, String separator)", "class_method_signature": "StringUtil.substringAfter(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "substringBeforeLast", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String", "signature": "String substringBeforeLast(String str, String separator)", "full_signature": "public static String substringBeforeLast(String str, String separator)", "class_method_signature": "StringUtil.substringBeforeLast(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "substringAfterLast", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String", "signature": "String substringAfterLast(String str, String separator)", "full_signature": "public static String substringAfterLast(String str, String separator)", "class_method_signature": "StringUtil.substringAfterLast(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "substringBetween", "parameters": "(String str, String tag)", "modifiers": "public static", "return": "String", "signature": "String substringBetween(String str, String tag)", "full_signature": "public static String substringBetween(String str, String tag)", "class_method_signature": "StringUtil.substringBetween(String str, String tag)", "testcase": false, "constructor": false}, {"identifier": "substringBetween", "parameters": "(String str, String open, String close)", "modifiers": "public static", "return": "String", "signature": "String substringBetween(String str, String open, String close)", "full_signature": "public static String substringBetween(String str, String open, String close)", "class_method_signature": "StringUtil.substringBetween(String str, String open, String close)", "testcase": false, "constructor": false}, {"identifier": "substringBetween", "parameters": "(String str, String open, String close, int fromIndex)", "modifiers": "public static", "return": "String", "signature": "String substringBetween(String str, String open, String close, int fromIndex)", "full_signature": "public static String substringBetween(String str, String open, String close, int fromIndex)", "class_method_signature": "StringUtil.substringBetween(String str, String open, String close, int fromIndex)", "testcase": false, "constructor": false}, {"identifier": "deleteWhitespace", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String deleteWhitespace(String str)", "full_signature": "public static String deleteWhitespace(String str)", "class_method_signature": "StringUtil.deleteWhitespace(String str)", "testcase": false, "constructor": false}, {"identifier": "replaceOnce", "parameters": "(String text, String repl, String with)", "modifiers": "public static", "return": "String", "signature": "String replaceOnce(String text, String repl, String with)", "full_signature": "public static String replaceOnce(String text, String repl, String with)", "class_method_signature": "StringUtil.replaceOnce(String text, String repl, String with)", "testcase": false, "constructor": false}, {"identifier": "replaceOnce", "parameters": "(String str, char searchChar, char replaceChar)", "modifiers": "public static", "return": "String", "signature": "String replaceOnce(String str, char searchChar, char replaceChar)", "full_signature": "public static String replaceOnce(String str, char searchChar, char replaceChar)", "class_method_signature": "StringUtil.replaceOnce(String str, char searchChar, char replaceChar)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String text, String repl, String with)", "modifiers": "public static", "return": "String", "signature": "String replace(String text, String repl, String with)", "full_signature": "public static String replace(String text, String repl, String with)", "class_method_signature": "StringUtil.replace(String text, String repl, String with)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String text, String repl, String with, int max)", "modifiers": "public static", "return": "String", "signature": "String replace(String text, String repl, String with, int max)", "full_signature": "public static String replace(String text, String repl, String with, int max)", "class_method_signature": "StringUtil.replace(String text, String repl, String with, int max)", "testcase": false, "constructor": false}, {"identifier": "replaceOnce", "parameters": "(int startPos, String text, String repl, String with)", "modifiers": "public static", "return": "String", "signature": "String replaceOnce(int startPos, String text, String repl, String with)", "full_signature": "public static String replaceOnce(int startPos, String text, String repl, String with)", "class_method_signature": "StringUtil.replaceOnce(int startPos, String text, String repl, String with)", "testcase": false, "constructor": false}, {"identifier": "replaceChars", "parameters": "(String str, char searchChar, char replaceChar)", "modifiers": "public static", "return": "String", "signature": "String replaceChars(String str, char searchChar, char replaceChar)", "full_signature": "public static String replaceChars(String str, char searchChar, char replaceChar)", "class_method_signature": "StringUtil.replaceChars(String str, char searchChar, char replaceChar)", "testcase": false, "constructor": false}, {"identifier": "replaceChars", "parameters": "(String s, char[] sub, char[] with)", "modifiers": "public static", "return": "String", "signature": "String replaceChars(String s, char[] sub, char[] with)", "full_signature": "public static String replaceChars(String s, char[] sub, char[] with)", "class_method_signature": "StringUtil.replaceChars(String s, char[] sub, char[] with)", "testcase": false, "constructor": false}, {"identifier": "replaceChars", "parameters": "(String str, String searchChars, String replaceChars)", "modifiers": "public static", "return": "String", "signature": "String replaceChars(String str, String searchChars, String replaceChars)", "full_signature": "public static String replaceChars(String str, String searchChars, String replaceChars)", "class_method_signature": "StringUtil.replaceChars(String str, String searchChars, String replaceChars)", "testcase": false, "constructor": false}, {"identifier": "replaceLast", "parameters": "(String text, String sub, String with)", "modifiers": "public static", "return": "String", "signature": "String replaceLast(String text, String sub, String with)", "full_signature": "public static String replaceLast(String text, String sub, String with)", "class_method_signature": "StringUtil.replaceLast(String text, String sub, String with)", "testcase": false, "constructor": false}, {"identifier": "replaceLast", "parameters": "(String text, char sub, char with)", "modifiers": "public static", "return": "String", "signature": "String replaceLast(String text, char sub, char with)", "full_signature": "public static String replaceLast(String text, char sub, char with)", "class_method_signature": "StringUtil.replaceLast(String text, char sub, char with)", "testcase": false, "constructor": false}, {"identifier": "overlay", "parameters": "(String str, String overlay, int start, int end)", "modifiers": "public static", "return": "String", "signature": "String overlay(String str, String overlay, int start, int end)", "full_signature": "public static String overlay(String str, String overlay, int start, int end)", "class_method_signature": "StringUtil.overlay(String str, String overlay, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "chomp", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String chomp(String str)", "full_signature": "public static String chomp(String str)", "class_method_signature": "StringUtil.chomp(String str)", "testcase": false, "constructor": false}, {"identifier": "chomp", "parameters": "(String str, String separator)", "modifiers": "public static", "return": "String", "signature": "String chomp(String str, String separator)", "full_signature": "public static String chomp(String str, String separator)", "class_method_signature": "StringUtil.chomp(String str, String separator)", "testcase": false, "constructor": false}, {"identifier": "chop", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String chop(String str)", "full_signature": "public static String chop(String str)", "class_method_signature": "StringUtil.chop(String str)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(String str, int repeat)", "modifiers": "public static", "return": "String", "signature": "String repeat(String str, int repeat)", "full_signature": "public static String repeat(String str, int repeat)", "class_method_signature": "StringUtil.repeat(String str, int repeat)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(char c, int count)", "modifiers": "public static", "return": "String", "signature": "String repeat(char c, int count)", "full_signature": "public static String repeat(char c, int count)", "class_method_signature": "StringUtil.repeat(char c, int count)", "testcase": false, "constructor": false}, {"identifier": "alignLeft", "parameters": "(String str, int size)", "modifiers": "public static", "return": "String", "signature": "String alignLeft(String str, int size)", "full_signature": "public static String alignLeft(String str, int size)", "class_method_signature": "StringUtil.alignLeft(String str, int size)", "testcase": false, "constructor": false}, {"identifier": "alignLeft", "parameters": "(String str, int size, char padChar)", "modifiers": "public static", "return": "String", "signature": "String alignLeft(String str, int size, char padChar)", "full_signature": "public static String alignLeft(String str, int size, char padChar)", "class_method_signature": "StringUtil.alignLeft(String str, int size, char padChar)", "testcase": false, "constructor": false}, {"identifier": "alignLeft", "parameters": "(String str, int size, String padStr)", "modifiers": "public static", "return": "String", "signature": "String alignLeft(String str, int size, String padStr)", "full_signature": "public static String alignLeft(String str, int size, String padStr)", "class_method_signature": "StringUtil.alignLeft(String str, int size, String padStr)", "testcase": false, "constructor": false}, {"identifier": "alignRight", "parameters": "(String str, int size)", "modifiers": "public static", "return": "String", "signature": "String alignRight(String str, int size)", "full_signature": "public static String alignRight(String str, int size)", "class_method_signature": "StringUtil.alignRight(String str, int size)", "testcase": false, "constructor": false}, {"identifier": "alignRight", "parameters": "(String str, int size, char padChar)", "modifiers": "public static", "return": "String", "signature": "String alignRight(String str, int size, char padChar)", "full_signature": "public static String alignRight(String str, int size, char padChar)", "class_method_signature": "StringUtil.alignRight(String str, int size, char padChar)", "testcase": false, "constructor": false}, {"identifier": "alignRight", "parameters": "(String str, int size, String padStr)", "modifiers": "public static", "return": "String", "signature": "String alignRight(String str, int size, String padStr)", "full_signature": "public static String alignRight(String str, int size, String padStr)", "class_method_signature": "StringUtil.alignRight(String str, int size, String padStr)", "testcase": false, "constructor": false}, {"identifier": "center", "parameters": "(String str, int size)", "modifiers": "public static", "return": "String", "signature": "String center(String str, int size)", "full_signature": "public static String center(String str, int size)", "class_method_signature": "StringUtil.center(String str, int size)", "testcase": false, "constructor": false}, {"identifier": "center", "parameters": "(String str, int size, char padChar)", "modifiers": "public static", "return": "String", "signature": "String center(String str, int size, char padChar)", "full_signature": "public static String center(String str, int size, char padChar)", "class_method_signature": "StringUtil.center(String str, int size, char padChar)", "testcase": false, "constructor": false}, {"identifier": "center", "parameters": "(String str, int size, String padStr)", "modifiers": "public static", "return": "String", "signature": "String center(String str, int size, String padStr)", "full_signature": "public static String center(String str, int size, String padStr)", "class_method_signature": "StringUtil.center(String str, int size, String padStr)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String reverse(String str)", "full_signature": "public static String reverse(String str)", "class_method_signature": "StringUtil.reverse(String str)", "testcase": false, "constructor": false}, {"identifier": "reverseDelimited", "parameters": "(String str, char separatorChar)", "modifiers": "public static", "return": "String", "signature": "String reverseDelimited(String str, char separatorChar)", "full_signature": "public static String reverseDelimited(String str, char separatorChar)", "class_method_signature": "StringUtil.reverseDelimited(String str, char separatorChar)", "testcase": false, "constructor": false}, {"identifier": "reverseDelimited", "parameters": "(String str, String separatorChars, String separator)", "modifiers": "public static", "return": "String", "signature": "String reverseDelimited(String str, String separatorChars, String separator)", "full_signature": "public static String reverseDelimited(String str, String separatorChars, String separator)", "class_method_signature": "StringUtil.reverseDelimited(String str, String separatorChars, String separator)", "testcase": false, "constructor": false}, {"identifier": "abbreviate", "parameters": "(String str, int maxWidth)", "modifiers": "public static", "return": "String", "signature": "String abbreviate(String str, int maxWidth)", "full_signature": "public static String abbreviate(String str, int maxWidth)", "class_method_signature": "StringUtil.abbreviate(String str, int maxWidth)", "testcase": false, "constructor": false}, {"identifier": "abbreviate", "parameters": "(String str, int offset, int maxWidth)", "modifiers": "public static", "return": "String", "signature": "String abbreviate(String str, int offset, int maxWidth)", "full_signature": "public static String abbreviate(String str, int offset, int maxWidth)", "class_method_signature": "StringUtil.abbreviate(String str, int offset, int maxWidth)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "String", "signature": "String difference(String str1, String str2)", "full_signature": "public static String difference(String str1, String str2)", "class_method_signature": "StringUtil.difference(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "indexOfDifference", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "int", "signature": "int indexOfDifference(String str1, String str2)", "full_signature": "public static int indexOfDifference(String str1, String str2)", "class_method_signature": "StringUtil.indexOfDifference(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "getLevenshteinDistance", "parameters": "(String s, String t)", "modifiers": "public static", "return": "int", "signature": "int getLevenshteinDistance(String s, String t)", "full_signature": "public static int getLevenshteinDistance(String s, String t)", "class_method_signature": "StringUtil.getLevenshteinDistance(String s, String t)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(int a, int b, int c)", "modifiers": "private static", "return": "int", "signature": "int min(int a, int b, int c)", "full_signature": "private static int min(int a, int b, int c)", "class_method_signature": "StringUtil.min(int a, int b, int c)", "testcase": false, "constructor": false}, {"identifier": "STAM", "parameters": "(String str, String wadChar, int length)", "modifiers": "public static", "return": "String", "signature": "String STAM(String str, String wadChar, int length)", "full_signature": "public static String STAM(String str, String wadChar, int length)", "class_method_signature": "StringUtil.STAM(String str, String wadChar, int length)", "testcase": false, "constructor": false}, {"identifier": "toUpperCase4First", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toUpperCase4First(String str)", "full_signature": "public static String toUpperCase4First(String str)", "class_method_signature": "StringUtil.toUpperCase4First(String str)", "testcase": false, "constructor": false}, {"identifier": "toLowerCase4First", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toLowerCase4First(String str)", "full_signature": "public static String toLowerCase4First(String str)", "class_method_signature": "StringUtil.toLowerCase4First(String str)", "testcase": false, "constructor": false}, {"identifier": "getASCII", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String getASCII(String str)", "full_signature": "public static String getASCII(String str)", "class_method_signature": "StringUtil.getASCII(String str)", "testcase": false, "constructor": false}, {"identifier": "toCamelCase", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toCamelCase(String str)", "full_signature": "public static String toCamelCase(String str)", "class_method_signature": "StringUtil.toCamelCase(String str)", "testcase": false, "constructor": false}, {"identifier": "toPascalCase", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toPascalCase(String str)", "full_signature": "public static String toPascalCase(String str)", "class_method_signature": "StringUtil.toPascalCase(String str)", "testcase": false, "constructor": false}, {"identifier": "toUpperCaseWithUnderscores", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toUpperCaseWithUnderscores(String str)", "full_signature": "public static String toUpperCaseWithUnderscores(String str)", "class_method_signature": "StringUtil.toUpperCaseWithUnderscores(String str)", "testcase": false, "constructor": false}, {"identifier": "toLowerCaseWithUnderscores", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String toLowerCaseWithUnderscores(String str)", "full_signature": "public static String toLowerCaseWithUnderscores(String str)", "class_method_signature": "StringUtil.toLowerCaseWithUnderscores(String str)", "testcase": false, "constructor": false}, {"identifier": "longToString", "parameters": "(long longValue)", "modifiers": "public static", "return": "String", "signature": "String longToString(long longValue)", "full_signature": "public static String longToString(long longValue)", "class_method_signature": "StringUtil.longToString(long longValue)", "testcase": false, "constructor": false}, {"identifier": "longToString", "parameters": "(long longValue, boolean noCase)", "modifiers": "public static", "return": "String", "signature": "String longToString(long longValue, boolean noCase)", "full_signature": "public static String longToString(long longValue, boolean noCase)", "class_method_signature": "StringUtil.longToString(long longValue, boolean noCase)", "testcase": false, "constructor": false}, {"identifier": "bytesToString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String bytesToString(byte[] bytes)", "full_signature": "public static String bytesToString(byte[] bytes)", "class_method_signature": "StringUtil.bytesToString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "bytesToString", "parameters": "(byte[] bytes, boolean noCase)", "modifiers": "public static", "return": "String", "signature": "String bytesToString(byte[] bytes, boolean noCase)", "full_signature": "public static String bytesToString(byte[] bytes, boolean noCase)", "class_method_signature": "StringUtil.bytesToString(byte[] bytes, boolean noCase)", "testcase": false, "constructor": false}, {"identifier": "endsWithChar", "parameters": "(String str, char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWithChar(String str, char ch)", "full_signature": "public static boolean endsWithChar(String str, char ch)", "class_method_signature": "StringUtil.endsWithChar(String str, char ch)", "testcase": false, "constructor": false}, {"identifier": "startsWithChar", "parameters": "(String str, char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWithChar(String str, char ch)", "full_signature": "public static boolean startsWithChar(String str, char ch)", "class_method_signature": "StringUtil.startsWithChar(String str, char ch)", "testcase": false, "constructor": false}, {"identifier": "indexOfChars", "parameters": "(String string, String chars)", "modifiers": "public static", "return": "int", "signature": "int indexOfChars(String string, String chars)", "full_signature": "public static int indexOfChars(String string, String chars)", "class_method_signature": "StringUtil.indexOfChars(String string, String chars)", "testcase": false, "constructor": false}, {"identifier": "indexOfChars", "parameters": "(String string, String chars, int startindex)", "modifiers": "public static", "return": "int", "signature": "int indexOfChars(String string, String chars, int startindex)", "full_signature": "public static int indexOfChars(String string, String chars, int startindex)", "class_method_signature": "StringUtil.indexOfChars(String string, String chars, int startindex)", "testcase": false, "constructor": false}, {"identifier": "indexOfChars", "parameters": "(String string, char[] chars)", "modifiers": "public static", "return": "int", "signature": "int indexOfChars(String string, char[] chars)", "full_signature": "public static int indexOfChars(String string, char[] chars)", "class_method_signature": "StringUtil.indexOfChars(String string, char[] chars)", "testcase": false, "constructor": false}, {"identifier": "indexOfChars", "parameters": "(String string, char[] chars, int startindex)", "modifiers": "public static", "return": "int", "signature": "int indexOfChars(String string, char[] chars, int startindex)", "full_signature": "public static int indexOfChars(String string, char[] chars, int startindex)", "class_method_signature": "StringUtil.indexOfChars(String string, char[] chars, int startindex)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object value)", "modifiers": "public static", "return": "String", "signature": "String toString(Object value)", "full_signature": "public static String toString(Object value)", "class_method_signature": "StringUtil.toString(Object value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Collection<String> collection)", "modifiers": "public static", "return": "String", "signature": "String toString(Collection<String> collection)", "full_signature": "public static String toString(Collection<String> collection)", "class_method_signature": "StringUtil.toString(Collection<String> collection)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Collection<String> collection, String split)", "modifiers": "public static", "return": "String", "signature": "String toString(Collection<String> collection, String split)", "full_signature": "public static String toString(Collection<String> collection, String split)", "class_method_signature": "StringUtil.toString(Collection<String> collection, String split)", "testcase": false, "constructor": false}, {"identifier": "isDigits", "parameters": "(String string)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigits(String string)", "full_signature": "public static boolean isDigits(String string)", "class_method_signature": "StringUtil.isDigits(String string)", "testcase": false, "constructor": false}, {"identifier": "endsWithIgnoreCase", "parameters": "(String str, String suffix)", "modifiers": "public static", "return": "boolean", "signature": "boolean endsWithIgnoreCase(String str, String suffix)", "full_signature": "public static boolean endsWithIgnoreCase(String str, String suffix)", "class_method_signature": "StringUtil.endsWithIgnoreCase(String str, String suffix)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(String str, String suffix, boolean ignoreCase)", "modifiers": "private static", "return": "boolean", "signature": "boolean endsWith(String str, String suffix, boolean ignoreCase)", "full_signature": "private static boolean endsWith(String str, String suffix, boolean ignoreCase)", "class_method_signature": "StringUtil.endsWith(String str, String suffix, boolean ignoreCase)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/StringUtil.java"}, "focal_method": {"identifier": "bytesToString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "body": "public static String bytesToString(byte[] bytes) {\n        return bytesToString(bytes, false);\n    }", "signature": "String bytesToString(byte[] bytes)", "full_signature": "public static String bytesToString(byte[] bytes)", "class_method_signature": "StringUtil.bytesToString(byte[] bytes)", "testcase": false, "constructor": false, "invocations": ["bytesToString"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}