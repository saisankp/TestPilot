{"test_class": {"identifier": "LogFileProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String LOG_EXTENSION = \"txt\";", "modifier": "private static final", "type": "String", "declarator": "LOG_EXTENSION = \"txt\"", "var_name": "LOG_EXTENSION"}, {"original_string": "private static final String LOG_PATH = \"log\";", "modifier": "private static final", "type": "String", "declarator": "LOG_PATH = \"log\"", "var_name": "LOG_PATH"}, {"original_string": "private static final String FILE_NOT_FOUND_MESSAGE = \"File not found!\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NOT_FOUND_MESSAGE = \"File not found!\"", "var_name": "FILE_NOT_FOUND_MESSAGE"}, {"original_string": "private static final String ERROR_MESSAGE = \"Error occurred while reading file!\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE = \"Error occurred while reading file!\"", "var_name": "ERROR_MESSAGE"}, {"original_string": "@Mock\n    private FileUtils fileUtils;", "modifier": "@Mock\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "@InjectMocks\n    private LogFileProvider underTest;", "modifier": "@InjectMocks\n    private", "type": "LogFileProvider", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/test/java/com/epam/wilma/message/search/web/service/LogFileProviderTest.java"}, "test_case": {"identifier": "testGetLogContentWhenFileDoesNotExistShouldReturnFileNotFoundMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLogContentWhenFileDoesNotExistShouldReturnFileNotFoundMessage() {\n        //GIVEN\n        Collection<File> files = getFileCollection();\n        String fileName = \"non-existent-file\";\n        given(fileUtils.getFilesWithExtension(LOG_PATH, LOG_EXTENSION)).willReturn(files);\n        //WHEN\n        String result = underTest.getLogContent(fileName);\n        //THEN\n        assertEquals(FILE_NOT_FOUND_MESSAGE, result);\n    }", "signature": "void testGetLogContentWhenFileDoesNotExistShouldReturnFileNotFoundMessage()", "full_signature": "@Test public void testGetLogContentWhenFileDoesNotExistShouldReturnFileNotFoundMessage()", "class_method_signature": "LogFileProviderTest.testGetLogContentWhenFileDoesNotExistShouldReturnFileNotFoundMessage()", "testcase": true, "constructor": false, "invocations": ["getFileCollection", "willReturn", "given", "getFilesWithExtension", "getLogContent", "assertEquals"]}, "focal_class": {"identifier": "LogFileProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ERROR_MESSAGE = \"Error occurred while reading file!\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_MESSAGE = \"Error occurred while reading file!\"", "var_name": "ERROR_MESSAGE"}, {"original_string": "private static final String FILE_NOT_FOUND_MESSAGE = \"File not found!\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NOT_FOUND_MESSAGE = \"File not found!\"", "var_name": "FILE_NOT_FOUND_MESSAGE"}, {"original_string": "private static final String LOG_PATH = \"log\";", "modifier": "private static final", "type": "String", "declarator": "LOG_PATH = \"log\"", "var_name": "LOG_PATH"}, {"original_string": "@Autowired\n    private FileUtils fileUtils;", "modifier": "@Autowired\n    private", "type": "FileUtils", "declarator": "fileUtils", "var_name": "fileUtils"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(LogFileProvider.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LogFileProvider.class)", "var_name": "logger"}], "methods": [{"identifier": "getLogFileNames", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getLogFileNames()", "full_signature": "public Collection<String> getLogFileNames()", "class_method_signature": "LogFileProvider.getLogFileNames()", "testcase": false, "constructor": false}, {"identifier": "getLogContent", "parameters": "(final String fileName)", "modifiers": "public", "return": "String", "signature": "String getLogContent(final String fileName)", "full_signature": "public String getLogContent(final String fileName)", "class_method_signature": "LogFileProvider.getLogContent(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "getLogFiles", "parameters": "(final String logPath)", "modifiers": "private", "return": "Collection<File>", "signature": "Collection<File> getLogFiles(final String logPath)", "full_signature": "private Collection<File> getLogFiles(final String logPath)", "class_method_signature": "LogFileProvider.getLogFiles(final String logPath)", "testcase": false, "constructor": false}, {"identifier": "createFileNames", "parameters": "(final Collection<File> files)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> createFileNames(final Collection<File> files)", "full_signature": "private Collection<String> createFileNames(final Collection<File> files)", "class_method_signature": "LogFileProvider.createFileNames(final Collection<File> files)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(final File file)", "modifiers": "private", "return": "String", "signature": "String getContent(final File file)", "full_signature": "private String getContent(final File file)", "class_method_signature": "LogFileProvider.getContent(final File file)", "testcase": false, "constructor": false}, {"identifier": "findFile", "parameters": "(final String fileName, final Collection<File> files)", "modifiers": "private", "return": "File", "signature": "File findFile(final String fileName, final Collection<File> files)", "full_signature": "private File findFile(final String fileName, final Collection<File> files)", "class_method_signature": "LogFileProvider.findFile(final String fileName, final Collection<File> files)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-webapp/src/main/java/com/epam/wilma/message/search/web/service/LogFileProvider.java"}, "focal_method": {"identifier": "getLogContent", "parameters": "(final String fileName)", "modifiers": "public", "return": "String", "body": "public String getLogContent(final String fileName) {\n        Collection<File> files = getLogFiles(LOG_PATH);\n        File file = findFile(fileName, files);\n        return getContent(file);\n    }", "signature": "String getLogContent(final String fileName)", "full_signature": "public String getLogContent(final String fileName)", "class_method_signature": "LogFileProvider.getLogContent(final String fileName)", "testcase": false, "constructor": false, "invocations": ["getLogFiles", "findFile", "getContent"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}