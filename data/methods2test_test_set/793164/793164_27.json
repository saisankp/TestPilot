{"test_class": {"identifier": "ValidationExceptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/core/src/test/java/org/openehealth/ipf/commons/core/modules/api/ValidationExceptionTest.java"}, "test_case": {"identifier": "testMessages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMessages() {\n        String s;\n        String message = \"exception message 12345\";\n        Throwable[] causes;\n\n        // ----------------- \n        causes = new Throwable[] {new RuntimeException(\"12345\"), new RuntimeException(\"abcd\") };\n        \n        s = new ValidationException(message, causes).getMessage();\n        assertTrue(s.startsWith(message));\n        assertTrue(s.contains(\"\\n12345\"));\n        assertTrue(s.contains(\"\\nabcd\"));\n        \n        s = new ValidationException(causes).getMessage();\n        assertTrue(s.startsWith(\"12345\\n\"));\n        assertTrue(s.endsWith(\"\\nabcd\"));\n\n        // -----------------\n        causes = new Throwable[] { new RuntimeException(), new RuntimeException() };\n\n        s = new ValidationException(message, causes).getMessage();\n        assertTrue(s.startsWith(message));\n        assertTrue(s.indexOf(\"java.lang.RuntimeException\") != s.lastIndexOf(\"java.lang.RuntimeException\")); \n        \n        s = new ValidationException(causes).getMessage();\n        assertEquals(\"java.lang.RuntimeException\\njava.lang.RuntimeException\", s); \n\n        // -----------------\n        causes = new Throwable[] { new RuntimeException(), new RuntimeException(\"67890\") };\n\n        s = new ValidationException(message, causes).getMessage();\n        assertTrue(s.startsWith(message));\n        assertTrue(s.contains(\"\\njava.lang.RuntimeException\"));\n        assertTrue(s.contains(\"\\n67890\"));\n\n        s = new ValidationException(causes).getMessage();\n        assertTrue(s.startsWith(\"java.lang.RuntimeException\\n\"));\n        assertTrue(s.endsWith(\"\\n67890\"));\n\n        // -----------------\n        causes = new Throwable[] {};\n        s = new ValidationException(message, causes).getMessage();\n        assertEquals(s, message);\n\n        s = new ValidationException(causes).getMessage();\n        assertEquals(s, ValidationException.class.getName());\n\n        // -----------------\n        causes = null;\n        s = new ValidationException(message, causes).getMessage();\n        assertEquals(s, message);\n\n        s = new ValidationException(causes).getMessage();\n        assertEquals(s, ValidationException.class.getName());\n    \n        // -----------------\n        Throwable cause = null;\n        s = new ValidationException(message, cause).getMessage();\n        assertEquals(s, message);\n\n        s = new ValidationException(cause).getMessage();\n        assertEquals(s, ValidationException.class.getName());\n    }", "signature": "void testMessages()", "full_signature": "@Test public void testMessages()", "class_method_signature": "ValidationExceptionTest.testMessages()", "testcase": true, "constructor": false, "invocations": ["getMessage", "assertTrue", "startsWith", "assertTrue", "contains", "assertTrue", "contains", "getMessage", "assertTrue", "startsWith", "assertTrue", "endsWith", "getMessage", "assertTrue", "startsWith", "assertTrue", "indexOf", "lastIndexOf", "getMessage", "assertEquals", "getMessage", "assertTrue", "startsWith", "assertTrue", "contains", "assertTrue", "contains", "getMessage", "assertTrue", "startsWith", "assertTrue", "endsWith", "getMessage", "assertEquals", "getMessage", "assertEquals", "getName", "getMessage", "assertEquals", "getMessage", "assertEquals", "getName", "getMessage", "assertEquals", "getMessage", "assertEquals", "getName"]}, "focal_class": {"identifier": "ValidationException", "superclass": "extends RuntimeException", "interfaces": "", "fields": [{"original_string": "private Throwable[] causes;", "modifier": "private", "type": "Throwable[]", "declarator": "causes", "var_name": "causes"}], "methods": [{"identifier": "ValidationException", "parameters": "(Throwable cause)", "modifiers": "public", "return": "", "signature": " ValidationException(Throwable cause)", "full_signature": "public  ValidationException(Throwable cause)", "class_method_signature": "ValidationException.ValidationException(Throwable cause)", "testcase": false, "constructor": true}, {"identifier": "ValidationException", "parameters": "(String message, Throwable cause)", "modifiers": "public", "return": "", "signature": " ValidationException(String message, Throwable cause)", "full_signature": "public  ValidationException(String message, Throwable cause)", "class_method_signature": "ValidationException.ValidationException(String message, Throwable cause)", "testcase": false, "constructor": true}, {"identifier": "ValidationException", "parameters": "(String message, Throwable[] causes)", "modifiers": "public", "return": "", "signature": " ValidationException(String message, Throwable[] causes)", "full_signature": "public  ValidationException(String message, Throwable[] causes)", "class_method_signature": "ValidationException.ValidationException(String message, Throwable[] causes)", "testcase": false, "constructor": true}, {"identifier": "ValidationException", "parameters": "(String message, List<? extends Throwable> causes)", "modifiers": "public", "return": "", "signature": " ValidationException(String message, List<? extends Throwable> causes)", "full_signature": "public  ValidationException(String message, List<? extends Throwable> causes)", "class_method_signature": "ValidationException.ValidationException(String message, List<? extends Throwable> causes)", "testcase": false, "constructor": true}, {"identifier": "ValidationException", "parameters": "(String message)", "modifiers": "public", "return": "", "signature": " ValidationException(String message)", "full_signature": "public  ValidationException(String message)", "class_method_signature": "ValidationException.ValidationException(String message)", "testcase": false, "constructor": true}, {"identifier": "ValidationException", "parameters": "(Throwable[] causes)", "modifiers": "public", "return": "", "signature": " ValidationException(Throwable[] causes)", "full_signature": "public  ValidationException(Throwable[] causes)", "class_method_signature": "ValidationException.ValidationException(Throwable[] causes)", "testcase": false, "constructor": true}, {"identifier": "ValidationException", "parameters": "(List<? extends Throwable> causes)", "modifiers": "public", "return": "", "signature": " ValidationException(List<? extends Throwable> causes)", "full_signature": "public  ValidationException(List<? extends Throwable> causes)", "class_method_signature": "ValidationException.ValidationException(List<? extends Throwable> causes)", "testcase": false, "constructor": true}, {"identifier": "getCauses", "parameters": "()", "modifiers": "public", "return": "Throwable[]", "signature": "Throwable[] getCauses()", "full_signature": "public Throwable[] getCauses()", "class_method_signature": "ValidationException.getCauses()", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMessage()", "full_signature": "@Override public String getMessage()", "class_method_signature": "ValidationException.getMessage()", "testcase": false, "constructor": false}], "file": "commons/core/src/main/java/org/openehealth/ipf/commons/core/modules/api/ValidationException.java"}, "focal_method": {"identifier": "getMessage", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getMessage() {\n        StringBuilder sb = new StringBuilder();\n        \n        String msg = super.getMessage();\n        if(msg != null) {\n            sb.append(msg).append('\\n');\n        }\n\n        if(causes != null) {\n            for(Throwable t : causes) {\n                if(t != null) {\n                    msg = t.getMessage();\n                    sb.append((msg == null) ? t.getClass().getName() : msg).append('\\n');\n                }\n            }\n        }\n\n        int len = sb.length(); \n        return (len == 0) ? getClass().getName() : sb.deleteCharAt(len - 1).toString();\n    }", "signature": "String getMessage()", "full_signature": "@Override public String getMessage()", "class_method_signature": "ValidationException.getMessage()", "testcase": false, "constructor": false, "invocations": ["getMessage", "append", "append", "getMessage", "append", "append", "getName", "getClass", "length", "getName", "getClass", "toString", "deleteCharAt"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}