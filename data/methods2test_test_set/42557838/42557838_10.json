{"test_class": {"identifier": "CookieHeaderSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static CookieHeaderSerializer cookieHeaderSerializer;", "modifier": "private static", "type": "CookieHeaderSerializer", "declarator": "cookieHeaderSerializer", "var_name": "cookieHeaderSerializer"}, {"original_string": "private static DateProvider dateProvider;", "modifier": "private static", "type": "DateProvider", "declarator": "dateProvider", "var_name": "dateProvider"}], "file": "http/src/test/java/ro/polak/http/protocol/serializer/impl/CookieHeaderSerializerTest.java"}, "test_case": {"identifier": "shouldSerializeCookieWithUrlEncode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSerializeCookieWithUrlEncode() {\n        String value = \"= &\";\n        Cookie cookie = new Cookie(\"name\", value);\n        String serializedCookie = cookieHeaderSerializer.serialize(cookie);\n        assertThat(serializedCookie, is(\"name=\" + StringUtilities.urlEncode(value)));\n    }", "signature": "void shouldSerializeCookieWithUrlEncode()", "full_signature": "@Test public void shouldSerializeCookieWithUrlEncode()", "class_method_signature": "CookieHeaderSerializerTest.shouldSerializeCookieWithUrlEncode()", "testcase": true, "constructor": false, "invocations": ["serialize", "assertThat", "is", "urlEncode"]}, "focal_class": {"identifier": "CookieHeaderSerializer", "superclass": "", "interfaces": "implements Serializer<Cookie>", "fields": [{"original_string": "private static final String SEPARATOR = \"; \";", "modifier": "private static final", "type": "String", "declarator": "SEPARATOR = \"; \"", "var_name": "SEPARATOR"}, {"original_string": "private static final String EQUALS = \"=\";", "modifier": "private static final", "type": "String", "declarator": "EQUALS = \"=\"", "var_name": "EQUALS"}, {"original_string": "private static final long MILLISECONDS_IN_SECOND = 1000L;", "modifier": "private static final", "type": "long", "declarator": "MILLISECONDS_IN_SECOND = 1000L", "var_name": "MILLISECONDS_IN_SECOND"}, {"original_string": "private final DateProvider dateProvider;", "modifier": "private final", "type": "DateProvider", "declarator": "dateProvider", "var_name": "dateProvider"}], "methods": [{"identifier": "CookieHeaderSerializer", "parameters": "(final DateProvider dateProvider)", "modifiers": "public", "return": "", "signature": " CookieHeaderSerializer(final DateProvider dateProvider)", "full_signature": "public  CookieHeaderSerializer(final DateProvider dateProvider)", "class_method_signature": "CookieHeaderSerializer.CookieHeaderSerializer(final DateProvider dateProvider)", "testcase": false, "constructor": true}, {"identifier": "serialize", "parameters": "(final Cookie cookie)", "modifiers": "@Override public", "return": "String", "signature": "String serialize(final Cookie cookie)", "full_signature": "@Override public String serialize(final Cookie cookie)", "class_method_signature": "CookieHeaderSerializer.serialize(final Cookie cookie)", "testcase": false, "constructor": false}, {"identifier": "getExpires", "parameters": "(final long maxAge)", "modifiers": "private", "return": "String", "signature": "String getExpires(final long maxAge)", "full_signature": "private String getExpires(final long maxAge)", "class_method_signature": "CookieHeaderSerializer.getExpires(final long maxAge)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/serializer/impl/CookieHeaderSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(final Cookie cookie)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String serialize(final Cookie cookie) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(cookie.getName())\n                .append(EQUALS)\n                .append(StringUtilities.urlEncode(cookie.getValue()));\n\n        if (cookie.getMaxAge() != -1) {\n            sb.append(SEPARATOR)\n                    .append(\"Expires\")\n                    .append(EQUALS)\n                    .append(getExpires(cookie.getMaxAge()));\n        }\n        if (cookie.getPath() != null) {\n            sb.append(SEPARATOR)\n                    .append(\"Path\")\n                    .append(EQUALS)\n                    .append(cookie.getPath());\n        }\n        if (cookie.getDomain() != null) {\n            sb.append(SEPARATOR)\n                    .append(\"Domain\")\n                    .append(EQUALS)\n                    .append(cookie.getDomain());\n        }\n        if (cookie.getComment() != null) {\n            sb.append(SEPARATOR)\n                    .append(\"Comment\")\n                    .append(EQUALS)\n                    .append(cookie.getComment());\n        }\n        if (cookie.isHttpOnly()) {\n            sb.append(SEPARATOR)\n                    .append(\"HttpOnly\");\n        }\n        if (cookie.isSecure()) {\n            sb.append(SEPARATOR)\n                    .append(\"Secure\");\n        }\n\n        return sb.toString();\n    }", "signature": "String serialize(final Cookie cookie)", "full_signature": "@Override public String serialize(final Cookie cookie)", "class_method_signature": "CookieHeaderSerializer.serialize(final Cookie cookie)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "getName", "urlEncode", "getValue", "getMaxAge", "append", "append", "append", "append", "getExpires", "getMaxAge", "getPath", "append", "append", "append", "append", "getPath", "getDomain", "append", "append", "append", "append", "getDomain", "getComment", "append", "append", "append", "append", "getComment", "isHttpOnly", "append", "append", "isSecure", "append", "append", "toString"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}