{"test_class": {"identifier": "ManagerTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-manager-0.98/src/test/java/com/kakao/hbase/manager/ManagerTest.java"}, "test_case": {"identifier": "testManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testManager() throws Exception {\n        String commandName = \"assign\";\n        String[] args = {commandName, \"zookeeper\", \"table\"};\n        Args argsObject = Manager.parseArgs(args);\n        new Manager(argsObject, commandName);\n    }", "signature": "void testManager()", "full_signature": "@Test public void testManager()", "class_method_signature": "ManagerTest.testManager()", "testcase": true, "constructor": false, "invocations": ["parseArgs"]}, "focal_class": {"identifier": "Manager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String INVALID_COMMAND = \"Invalid command\";", "modifier": "public static final", "type": "String", "declarator": "INVALID_COMMAND = \"Invalid command\"", "var_name": "INVALID_COMMAND"}, {"original_string": "public static final String INVALID_ZOOKEEPER = \"Invalid zookeeper quorum\";", "modifier": "public static final", "type": "String", "declarator": "INVALID_ZOOKEEPER = \"Invalid zookeeper quorum\"", "var_name": "INVALID_ZOOKEEPER"}, {"original_string": "private static final Set<Class<? extends Command>> commandSet;", "modifier": "private static final", "type": "Set<Class<? extends Command>>", "declarator": "commandSet", "var_name": "commandSet"}, {"original_string": "private final Args args;", "modifier": "private final", "type": "Args", "declarator": "args", "var_name": "args"}, {"original_string": "private final String commandName;", "modifier": "private final", "type": "String", "declarator": "commandName", "var_name": "commandName"}], "methods": [{"identifier": "Manager", "parameters": "(Args args, String commandName)", "modifiers": "public", "return": "", "signature": " Manager(Args args, String commandName)", "full_signature": "public  Manager(Args args, String commandName)", "class_method_signature": "Manager.Manager(Args args, String commandName)", "testcase": false, "constructor": true}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "Manager.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "printError", "parameters": "(String message)", "modifiers": "private static", "return": "void", "signature": "void printError(String message)", "full_signature": "private static void printError(String message)", "class_method_signature": "Manager.printError(String message)", "testcase": false, "constructor": false}, {"identifier": "createReflections", "parameters": "()", "modifiers": "private static", "return": "Reflections", "signature": "Reflections createReflections()", "full_signature": "private static Reflections createReflections()", "class_method_signature": "Manager.createReflections()", "testcase": false, "constructor": false}, {"identifier": "getCommandSet", "parameters": "()", "modifiers": "@VisibleForTesting static", "return": "Set<Class<? extends Command>>", "signature": "Set<Class<? extends Command>> getCommandSet()", "full_signature": "@VisibleForTesting static Set<Class<? extends Command>> getCommandSet()", "class_method_signature": "Manager.getCommandSet()", "testcase": false, "constructor": false}, {"identifier": "getCommandUsage", "parameters": "(String commandName)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String getCommandUsage(String commandName)", "full_signature": "@VisibleForTesting static String getCommandUsage(String commandName)", "class_method_signature": "Manager.getCommandUsage(String commandName)", "testcase": false, "constructor": false}, {"identifier": "commandExists", "parameters": "(String commandName)", "modifiers": "private static", "return": "boolean", "signature": "boolean commandExists(String commandName)", "full_signature": "private static boolean commandExists(String commandName)", "class_method_signature": "Manager.commandExists(String commandName)", "testcase": false, "constructor": false}, {"identifier": "getCommandNames", "parameters": "()", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getCommandNames()", "full_signature": "private static List<String> getCommandNames()", "class_method_signature": "Manager.getCommandNames()", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printUsage()", "full_signature": "private static void printUsage()", "class_method_signature": "Manager.printUsage()", "testcase": false, "constructor": false}, {"identifier": "parseArgs", "parameters": "(String[] argsParam)", "modifiers": "@VisibleForTesting static", "return": "Args", "signature": "Args parseArgs(String[] argsParam)", "full_signature": "@VisibleForTesting static Args parseArgs(String[] argsParam)", "class_method_signature": "Manager.parseArgs(String[] argsParam)", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "(String commandName)", "modifiers": "private static", "return": "void", "signature": "void printUsage(String commandName)", "full_signature": "private static void printUsage(String commandName)", "class_method_signature": "Manager.printUsage(String commandName)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "Manager.run()", "testcase": false, "constructor": false}, {"identifier": "createCommand", "parameters": "(String commandName, HBaseAdmin admin, Args args)", "modifiers": "private", "return": "Command", "signature": "Command createCommand(String commandName, HBaseAdmin admin, Args args)", "full_signature": "private Command createCommand(String commandName, HBaseAdmin admin, Args args)", "class_method_signature": "Manager.createCommand(String commandName, HBaseAdmin admin, Args args)", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-manager-0.98/src/main/java/com/kakao/hbase/manager/Manager.java"}, "focal_method": {"identifier": "Manager", "parameters": "(Args args, String commandName)", "modifiers": "public", "return": "", "body": "public Manager(Args args, String commandName) throws Exception {\n        this.args = args;\n        this.commandName = commandName;\n    }", "signature": " Manager(Args args, String commandName)", "full_signature": "public  Manager(Args args, String commandName)", "class_method_signature": "Manager.Manager(Args args, String commandName)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}