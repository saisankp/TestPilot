{"test_class": {"identifier": "HierarchyTreeNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private User otherUserMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "otherUserMock", "var_name": "otherUserMock"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/user/persistence/hierarchy/HierarchyTreeNodeTest.java"}, "test_case": {"identifier": "managersEqualReturnsTrueWhenSameManagerInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void managersEqualReturnsTrueWhenSameManagerInstance() {\n        // given\n        var node = new HierarchyTreeNode(userMock);\n\n        // when / then\n        assertThat(node.managersEqual(node)).isTrue();\n    }", "signature": "void managersEqualReturnsTrueWhenSameManagerInstance()", "full_signature": "@Test public void managersEqualReturnsTrueWhenSameManagerInstance()", "class_method_signature": "HierarchyTreeNodeTest.managersEqualReturnsTrueWhenSameManagerInstance()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "managersEqual"]}, "focal_class": {"identifier": "HierarchyTreeNode", "superclass": "", "interfaces": "implements Iterable<HierarchyTreeNode>, Streamable<HierarchyTreeNode>, Serializable", "fields": [{"original_string": "@Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    Long id;", "modifier": "@Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)", "type": "Long", "declarator": "id", "var_name": "id"}, {"original_string": "@ManyToOne\n    @JoinColumn(\n            name = \"MANAGER_NODE_ID\"\n    )\n    HierarchyTreeNode manager;", "modifier": "@ManyToOne\n    @JoinColumn(\n            name = \"MANAGER_NODE_ID\"\n    )", "type": "HierarchyTreeNode", "declarator": "manager", "var_name": "manager"}, {"original_string": "@OneToMany(\n            mappedBy = \"manager\",\n            cascade = CascadeType.PERSIST\n    )\n    List<HierarchyTreeNode> directStaff;", "modifier": "@OneToMany(\n            mappedBy = \"manager\",\n            cascade = CascadeType.PERSIST\n    )", "type": "List<HierarchyTreeNode>", "declarator": "directStaff", "var_name": "directStaff"}, {"original_string": "@ManyToMany\n    @JoinTable(\n            name = \"HIERARCHY_TREE_NODE_ALL_STAFF\",\n            joinColumns = @JoinColumn(name = \"MANAGER_NODE_ID\"),\n            inverseJoinColumns = @JoinColumn(name = \"NODE_ID\")\n    )\n    List<HierarchyTreeNode> staff;", "modifier": "@ManyToMany\n    @JoinTable(\n            name = \"HIERARCHY_TREE_NODE_ALL_STAFF\",\n            joinColumns = @JoinColumn(name = \"MANAGER_NODE_ID\"),\n            inverseJoinColumns = @JoinColumn(name = \"NODE_ID\")\n    )", "type": "List<HierarchyTreeNode>", "declarator": "staff", "var_name": "staff"}, {"original_string": "@OneToOne(optional = false)\n    @JoinColumn(name = \"USER_ID\")\n    User user;", "modifier": "@OneToOne(optional = false)\n    @JoinColumn(name = \"USER_ID\")", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Column(name = \"IS_MANAGING_USER\")\n    boolean managingUser;", "modifier": "@Column(name = \"IS_MANAGING_USER\")", "type": "boolean", "declarator": "managingUser", "var_name": "managingUser"}], "methods": [{"identifier": "HierarchyTreeNode", "parameters": "(User user)", "modifiers": "public", "return": "", "signature": " HierarchyTreeNode(User user)", "full_signature": "public  HierarchyTreeNode(User user)", "class_method_signature": "HierarchyTreeNode.HierarchyTreeNode(User user)", "testcase": false, "constructor": true}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "public boolean isLeaf()", "class_method_signature": "HierarchyTreeNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "public boolean isRoot()", "class_method_signature": "HierarchyTreeNode.isRoot()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "HierarchyTreeNode", "signature": "HierarchyTreeNode getRoot()", "full_signature": "public HierarchyTreeNode getRoot()", "class_method_signature": "HierarchyTreeNode.getRoot()", "testcase": false, "constructor": false}, {"identifier": "addDirectStaffMember", "parameters": "(HierarchyTreeNode staffNode)", "modifiers": "public", "return": "void", "signature": "void addDirectStaffMember(HierarchyTreeNode staffNode)", "full_signature": "public void addDirectStaffMember(HierarchyTreeNode staffNode)", "class_method_signature": "HierarchyTreeNode.addDirectStaffMember(HierarchyTreeNode staffNode)", "testcase": false, "constructor": false}, {"identifier": "addStaffMember", "parameters": "(HierarchyTreeNode staffNode)", "modifiers": "", "return": "void", "signature": "void addStaffMember(HierarchyTreeNode staffNode)", "full_signature": " void addStaffMember(HierarchyTreeNode staffNode)", "class_method_signature": "HierarchyTreeNode.addStaffMember(HierarchyTreeNode staffNode)", "testcase": false, "constructor": false}, {"identifier": "removeDirectStaffMember", "parameters": "(HierarchyTreeNode staffNode)", "modifiers": "public", "return": "void", "signature": "void removeDirectStaffMember(HierarchyTreeNode staffNode)", "full_signature": "public void removeDirectStaffMember(HierarchyTreeNode staffNode)", "class_method_signature": "HierarchyTreeNode.removeDirectStaffMember(HierarchyTreeNode staffNode)", "testcase": false, "constructor": false}, {"identifier": "removeStaffMember", "parameters": "(HierarchyTreeNode staffNode)", "modifiers": "", "return": "void", "signature": "void removeStaffMember(HierarchyTreeNode staffNode)", "full_signature": " void removeStaffMember(HierarchyTreeNode staffNode)", "class_method_signature": "HierarchyTreeNode.removeStaffMember(HierarchyTreeNode staffNode)", "testcase": false, "constructor": false}, {"identifier": "updateIsManagingUser", "parameters": "()", "modifiers": "", "return": "void", "signature": "void updateIsManagingUser()", "full_signature": " void updateIsManagingUser()", "class_method_signature": "HierarchyTreeNode.updateIsManagingUser()", "testcase": false, "constructor": false}, {"identifier": "managersEqual", "parameters": "(HierarchyTreeNode other)", "modifiers": "", "return": "boolean", "signature": "boolean managersEqual(HierarchyTreeNode other)", "full_signature": " boolean managersEqual(HierarchyTreeNode other)", "class_method_signature": "HierarchyTreeNode.managersEqual(HierarchyTreeNode other)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<HierarchyTreeNode>", "signature": "Iterator<HierarchyTreeNode> iterator()", "full_signature": "@Override public Iterator<HierarchyTreeNode> iterator()", "class_method_signature": "HierarchyTreeNode.iterator()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "HierarchyTreeNode.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "HierarchyTreeNode.hashCode()", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/user/persistence/hierarchy/HierarchyTreeNode.java"}, "focal_method": {"identifier": "managersEqual", "parameters": "(HierarchyTreeNode other)", "modifiers": "", "return": "boolean", "body": "boolean managersEqual(HierarchyTreeNode other) {\n        var otherManager = Objects.requireNonNull(other).manager;\n\n        if(manager == otherManager) {\n            return true;\n        } else if(Objects.isNull(manager) || Objects.isNull(otherManager)) {\n            return false;\n        }\n\n        return Objects.equals(manager.id, otherManager.id);\n    }", "signature": "boolean managersEqual(HierarchyTreeNode other)", "full_signature": " boolean managersEqual(HierarchyTreeNode other)", "class_method_signature": "HierarchyTreeNode.managersEqual(HierarchyTreeNode other)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "isNull", "isNull", "equals"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}