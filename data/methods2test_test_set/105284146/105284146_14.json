{"test_class": {"identifier": "BusesValidationTest", "superclass": "extends AbstractValidationTest", "interfaces": "", "fields": [{"original_string": "private final double loadP = 47.2786;", "modifier": "private final", "type": "double", "declarator": "loadP = 47.2786", "var_name": "loadP"}, {"original_string": "private final double loadQ = 163.38244;", "modifier": "private final", "type": "double", "declarator": "loadQ = 163.38244", "var_name": "loadQ"}, {"original_string": "private final double genP = -2020;", "modifier": "private final", "type": "double", "declarator": "genP = -2020", "var_name": "genP"}, {"original_string": "private final double genQ = 91.54;", "modifier": "private final", "type": "double", "declarator": "genQ = 91.54", "var_name": "genQ"}, {"original_string": "private final double batP = -10;", "modifier": "private final", "type": "double", "declarator": "batP = -10", "var_name": "batP"}, {"original_string": "private final double batQ = 11;", "modifier": "private final", "type": "double", "declarator": "batQ = 11", "var_name": "batQ"}, {"original_string": "private final double shuntP = 0.0;", "modifier": "private final", "type": "double", "declarator": "shuntP = 0.0", "var_name": "shuntP"}, {"original_string": "private final double shuntQ = 175.8437;", "modifier": "private final", "type": "double", "declarator": "shuntQ = 175.8437", "var_name": "shuntQ"}, {"original_string": "private final double svcP = 0.0;", "modifier": "private final", "type": "double", "declarator": "svcP = 0.0", "var_name": "svcP"}, {"original_string": "private final double svcQ = 0.0;", "modifier": "private final", "type": "double", "declarator": "svcQ = 0.0", "var_name": "svcQ"}, {"original_string": "private final double vscCSP = 0.0;", "modifier": "private final", "type": "double", "declarator": "vscCSP = 0.0", "var_name": "vscCSP"}, {"original_string": "private final double vscCSQ = 0.0;", "modifier": "private final", "type": "double", "declarator": "vscCSQ = 0.0", "var_name": "vscCSQ"}, {"original_string": "private final double lineP = 1982.7713;", "modifier": "private final", "type": "double", "declarator": "lineP = 1982.7713", "var_name": "lineP"}, {"original_string": "private final double lineQ = -441.7662;", "modifier": "private final", "type": "double", "declarator": "lineQ = -441.7662", "var_name": "lineQ"}, {"original_string": "private final double danglingLineP = 0.0;", "modifier": "private final", "type": "double", "declarator": "danglingLineP = 0.0", "var_name": "danglingLineP"}, {"original_string": "private final double danglingLineQ = 0.0;", "modifier": "private final", "type": "double", "declarator": "danglingLineQ = 0.0", "var_name": "danglingLineQ"}, {"original_string": "private final double twtP = 0.0;", "modifier": "private final", "type": "double", "declarator": "twtP = 0.0", "var_name": "twtP"}, {"original_string": "private final double twtQ = 0.0;", "modifier": "private final", "type": "double", "declarator": "twtQ = 0.0", "var_name": "twtQ"}, {"original_string": "private final double tltP = 0.0;", "modifier": "private final", "type": "double", "declarator": "tltP = 0.0", "var_name": "tltP"}, {"original_string": "private final double tltQ = 0.0;", "modifier": "private final", "type": "double", "declarator": "tltQ = 0.0", "var_name": "tltQ"}, {"original_string": "private boolean mainComponent = true;", "modifier": "private", "type": "boolean", "declarator": "mainComponent = true", "var_name": "mainComponent"}, {"original_string": "private Bus bus;", "modifier": "private", "type": "Bus", "declarator": "bus", "var_name": "bus"}], "file": "loadflow/loadflow-validation/src/test/java/com/powsybl/loadflow/validation/BusesValidationTest.java"}, "test_case": {"identifier": "checkNetworkBuses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkNetworkBuses() throws IOException {\n        Network.BusView networkBusView = Mockito.mock(Network.BusView.class);\n        Mockito.when(networkBusView.getBusStream()).thenAnswer(dummy -> Stream.of(bus));\n        Network network = Mockito.mock(Network.class);\n        Mockito.when(network.getId()).thenReturn(\"network\");\n        Mockito.when(network.getBusView()).thenReturn(networkBusView);\n\n        assertTrue(BusesValidation.INSTANCE.checkBuses(network, looseConfig, data));\n        assertFalse(BusesValidation.INSTANCE.checkBuses(network, strictConfig, data));\n\n        assertTrue(ValidationType.BUSES.check(network, looseConfig, tmpDir));\n        assertFalse(ValidationType.BUSES.check(network, strictConfig, tmpDir));\n\n        ValidationWriter validationWriter = ValidationUtils.createValidationWriter(network.getId(), looseConfig, NullWriter.NULL_WRITER, ValidationType.BUSES);\n        assertTrue(ValidationType.BUSES.check(network, looseConfig, validationWriter));\n    }", "signature": "void checkNetworkBuses()", "full_signature": "@Test public void checkNetworkBuses()", "class_method_signature": "BusesValidationTest.checkNetworkBuses()", "testcase": true, "constructor": false, "invocations": ["mock", "thenAnswer", "when", "getBusStream", "of", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getBusView", "assertTrue", "checkBuses", "assertFalse", "checkBuses", "assertTrue", "check", "assertFalse", "check", "createValidationWriter", "getId", "assertTrue", "check"]}, "focal_class": {"identifier": "BusesValidation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(BusesValidation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(BusesValidation.class)", "var_name": "LOGGER"}, {"original_string": "public static final BusesValidation INSTANCE = new BusesValidation();", "modifier": "public static final", "type": "BusesValidation", "declarator": "INSTANCE = new BusesValidation()", "var_name": "INSTANCE"}], "methods": [{"identifier": "BusesValidation", "parameters": "()", "modifiers": "private", "return": "", "signature": " BusesValidation()", "full_signature": "private  BusesValidation()", "class_method_signature": "BusesValidation.BusesValidation()", "testcase": false, "constructor": true}, {"identifier": "checkBuses", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "signature": "boolean checkBuses(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkBuses(Network network, ValidationConfig config, Path file)", "class_method_signature": "BusesValidation.checkBuses(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false}, {"identifier": "checkBuses", "parameters": "(Network network, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkBuses(Network network, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkBuses(Network network, ValidationConfig config, Writer writer)", "class_method_signature": "BusesValidation.checkBuses(Network network, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkBuses", "parameters": "(Network network, ValidationConfig config, ValidationWriter busesWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkBuses(Network network, ValidationConfig config, ValidationWriter busesWriter)", "full_signature": "public boolean checkBuses(Network network, ValidationConfig config, ValidationWriter busesWriter)", "class_method_signature": "BusesValidation.checkBuses(Network network, ValidationConfig config, ValidationWriter busesWriter)", "testcase": false, "constructor": false}, {"identifier": "checkBuses", "parameters": "(Bus bus, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkBuses(Bus bus, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkBuses(Bus bus, ValidationConfig config, Writer writer)", "class_method_signature": "BusesValidation.checkBuses(Bus bus, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkBuses", "parameters": "(Bus bus, ValidationConfig config, ValidationWriter busesWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkBuses(Bus bus, ValidationConfig config, ValidationWriter busesWriter)", "full_signature": "public boolean checkBuses(Bus bus, ValidationConfig config, ValidationWriter busesWriter)", "class_method_signature": "BusesValidation.checkBuses(Bus bus, ValidationConfig config, ValidationWriter busesWriter)", "testcase": false, "constructor": false}, {"identifier": "getBranchTerminal", "parameters": "(Branch branch, Bus bus)", "modifiers": "private static", "return": "Terminal", "signature": "Terminal getBranchTerminal(Branch branch, Bus bus)", "full_signature": "private static Terminal getBranchTerminal(Branch branch, Bus bus)", "class_method_signature": "BusesValidation.getBranchTerminal(Branch branch, Bus bus)", "testcase": false, "constructor": false}, {"identifier": "getThreeWindingsTransformerTerminal", "parameters": "(ThreeWindingsTransformer tlt, Bus bus)", "modifiers": "private static", "return": "Terminal", "signature": "Terminal getThreeWindingsTransformerTerminal(ThreeWindingsTransformer tlt, Bus bus)", "full_signature": "private static Terminal getThreeWindingsTransformerTerminal(ThreeWindingsTransformer tlt, Bus bus)", "class_method_signature": "BusesValidation.getThreeWindingsTransformerTerminal(ThreeWindingsTransformer tlt, Bus bus)", "testcase": false, "constructor": false}, {"identifier": "checkBuses", "parameters": "(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ,\n                                     double shuntP, double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ,\n                                     double lineP, double lineQ, double danglingLineP, double danglingLineQ,\n                                     double twtP, double twtQ, double tltP, double tltQ, boolean mainComponent, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkBuses(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ,\n                                     double shuntP, double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ,\n                                     double lineP, double lineQ, double danglingLineP, double danglingLineQ,\n                                     double twtP, double twtQ, double tltP, double tltQ, boolean mainComponent, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkBuses(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ,\n                                     double shuntP, double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ,\n                                     double lineP, double lineQ, double danglingLineP, double danglingLineQ,\n                                     double twtP, double twtQ, double tltP, double tltQ, boolean mainComponent, ValidationConfig config, Writer writer)", "class_method_signature": "BusesValidation.checkBuses(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ,\n                                     double shuntP, double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ,\n                                     double lineP, double lineQ, double danglingLineP, double danglingLineQ,\n                                     double twtP, double twtQ, double tltP, double tltQ, boolean mainComponent, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkBuses", "parameters": "(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ, double shuntP,\n                                     double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ, double lineP, double lineQ,\n                                     double danglingLineP, double danglingLineQ, double twtP, double twtQ, double tltP, double tltQ,\n                                     boolean mainComponent, ValidationConfig config, ValidationWriter busesWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkBuses(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ, double shuntP,\n                                     double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ, double lineP, double lineQ,\n                                     double danglingLineP, double danglingLineQ, double twtP, double twtQ, double tltP, double tltQ,\n                                     boolean mainComponent, ValidationConfig config, ValidationWriter busesWriter)", "full_signature": "public boolean checkBuses(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ, double shuntP,\n                                     double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ, double lineP, double lineQ,\n                                     double danglingLineP, double danglingLineQ, double twtP, double twtQ, double tltP, double tltQ,\n                                     boolean mainComponent, ValidationConfig config, ValidationWriter busesWriter)", "class_method_signature": "BusesValidation.checkBuses(String id, double loadP, double loadQ, double genP, double genQ, double batP, double batQ, double shuntP,\n                                     double shuntQ, double svcP, double svcQ, double vscCSP, double vscCSQ, double lineP, double lineQ,\n                                     double danglingLineP, double danglingLineQ, double twtP, double twtQ, double tltP, double tltQ,\n                                     boolean mainComponent, ValidationConfig config, ValidationWriter busesWriter)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/BusesValidation.java"}, "focal_method": {"identifier": "checkBuses", "parameters": "(Network network, ValidationConfig config, Path file)", "modifiers": "public", "return": "boolean", "body": "public boolean checkBuses(Network network, ValidationConfig config, Path file) throws IOException {\n        Objects.requireNonNull(network);\n        Objects.requireNonNull(config);\n        Objects.requireNonNull(file);\n        try (Writer writer = Files.newBufferedWriter(file, StandardCharsets.UTF_8)) {\n            return checkBuses(network, config, writer);\n        }\n    }", "signature": "boolean checkBuses(Network network, ValidationConfig config, Path file)", "full_signature": "public boolean checkBuses(Network network, ValidationConfig config, Path file)", "class_method_signature": "BusesValidation.checkBuses(Network network, ValidationConfig config, Path file)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull", "newBufferedWriter", "checkBuses"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}