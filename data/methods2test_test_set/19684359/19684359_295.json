{"test_class": {"identifier": "CredentialFromAccessTokenProviderClassFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_PROPERTY_PREFIX = \"test.prefix\";", "modifier": "private static final", "type": "String", "declarator": "TEST_PROPERTY_PREFIX = \"test.prefix\"", "var_name": "TEST_PROPERTY_PREFIX"}, {"original_string": "private Configuration config;", "modifier": "private", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "@Mock private Clock clock;", "modifier": "@Mock private", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "file": "util-hadoop/src/test/java/com/google/cloud/hadoop/util/CredentialFromAccessTokenProviderClassFactoryTest.java"}, "test_case": {"identifier": "testCreateCredentialFromProviderClassFactory", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateCredentialFromProviderClassFactory()\n      throws IOException, GeneralSecurityException {\n    Credential credential =\n        CredentialFromAccessTokenProviderClassFactory.credential(\n            config, ImmutableList.of(TEST_PROPERTY_PREFIX), ImmutableList.of());\n\n    assertThat(credential.getAccessToken()).isEqualTo(TestingAccessTokenProvider.FAKE_ACCESS_TOKEN);\n    assertThat(credential.getExpirationTimeMilliseconds())\n        .isEqualTo(TestingAccessTokenProvider.EXPIRATION_TIME_MILLISECONDS);\n  }", "signature": "void testCreateCredentialFromProviderClassFactory()", "full_signature": "@Test public void testCreateCredentialFromProviderClassFactory()", "class_method_signature": "CredentialFromAccessTokenProviderClassFactoryTest.testCreateCredentialFromProviderClassFactory()", "testcase": true, "constructor": false, "invocations": ["credential", "of", "of", "isEqualTo", "assertThat", "getAccessToken", "isEqualTo", "assertThat", "getExpirationTimeMilliseconds"]}, "focal_class": {"identifier": "CredentialFromAccessTokenProviderClassFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}], "methods": [{"identifier": "credential", "parameters": "(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "modifiers": "public static", "return": "Credential", "signature": "Credential credential(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "full_signature": "public static Credential credential(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "class_method_signature": "CredentialFromAccessTokenProviderClassFactory.credential(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "testcase": false, "constructor": false}, {"identifier": "credential", "parameters": "(\n      Configuration config, List<String> keyPrefixes, Collection<String> scopes)", "modifiers": "public static", "return": "Credential", "signature": "Credential credential(\n      Configuration config, List<String> keyPrefixes, Collection<String> scopes)", "full_signature": "public static Credential credential(\n      Configuration config, List<String> keyPrefixes, Collection<String> scopes)", "class_method_signature": "CredentialFromAccessTokenProviderClassFactory.credential(\n      Configuration config, List<String> keyPrefixes, Collection<String> scopes)", "testcase": false, "constructor": false}, {"identifier": "getCredentialFromAccessTokenProvider", "parameters": "(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "modifiers": "private static", "return": "Credential", "signature": "Credential getCredentialFromAccessTokenProvider(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "full_signature": "private static Credential getCredentialFromAccessTokenProvider(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "class_method_signature": "CredentialFromAccessTokenProviderClassFactory.getCredentialFromAccessTokenProvider(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "testcase": false, "constructor": false}], "file": "util-hadoop/src/main/java/com/google/cloud/hadoop/util/CredentialFromAccessTokenProviderClassFactory.java"}, "focal_method": {"identifier": "credential", "parameters": "(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "modifiers": "public static", "return": "Credential", "body": "public static Credential credential(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)\n      throws IOException, GeneralSecurityException {\n    return getCredentialFromAccessTokenProvider(accessTokenProvider, scopes);\n  }", "signature": "Credential credential(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "full_signature": "public static Credential credential(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "class_method_signature": "CredentialFromAccessTokenProviderClassFactory.credential(\n      AccessTokenProvider accessTokenProvider, Collection<String> scopes)", "testcase": false, "constructor": false, "invocations": ["getCredentialFromAccessTokenProvider"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}