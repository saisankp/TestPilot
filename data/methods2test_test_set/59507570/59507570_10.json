{"test_class": {"identifier": "CaseServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    CaseDao caseDao;", "modifier": "@Mock", "type": "CaseDao", "declarator": "caseDao", "var_name": "caseDao"}, {"original_string": "@Mock\n    CasePhotoDao casePhotoDao;", "modifier": "@Mock", "type": "CasePhotoDao", "declarator": "casePhotoDao", "var_name": "casePhotoDao"}, {"original_string": "@Mock\n    IncidentDao incidentDao;", "modifier": "@Mock", "type": "IncidentDao", "declarator": "incidentDao", "var_name": "incidentDao"}, {"original_string": "@InjectMocks\n    CaseService caseService;", "modifier": "@InjectMocks", "type": "CaseService", "declarator": "caseService", "var_name": "caseService"}], "file": "app/src/test/java/org/unicef/rapidreg/service/CaseServiceTest.java"}, "test_case": {"identifier": "should_update_case_when_give_item_values", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_update_case_when_give_item_values() throws Exception {\n        ItemValuesMap itemValues = new ItemValuesMap();\n        itemValues.addStringItem(CASE_ID, \"existedUniqueId\");\n        itemValues.addNumberItem(AGE, 18);\n        itemValues.addStringItem(REGISTRATION_DATE, \"2016/12/25\");\n\n        Case expected = new Case();\n        when(caseDao.getCaseByUniqueId(\"existedUniqueId\")).thenReturn(expected);\n\n        expected.setContent(new Blob(new String(\"\").getBytes()));\n\n        when(caseDao.update(expected)).thenReturn(expected);\n\n        Case actual = caseService.update(itemValues, Collections.EMPTY_LIST);\n\n        verify(caseDao, times(1)).update(actual);\n        verify(casePhotoDao, times(1)).getIdsByCaseId(actual.getId());\n\n        assertFalse(\"Sync status should be false\", actual.isSynced());\n        assertThat(\"Age should be 18\", actual.getAge(), is(18));\n        assertThat(\"Registration date should be 2016/12/25\", actual.getRegistrationDate(), is\n                (Utils.getRegisterDateByYyyyMmDd(\"2016/12/25\")));\n    }", "signature": "void should_update_case_when_give_item_values()", "full_signature": "@Test public void should_update_case_when_give_item_values()", "class_method_signature": "CaseServiceTest.should_update_case_when_give_item_values()", "testcase": true, "constructor": false, "invocations": ["addStringItem", "addNumberItem", "addStringItem", "thenReturn", "when", "getCaseByUniqueId", "setContent", "getBytes", "thenReturn", "when", "update", "update", "update", "verify", "times", "getIdsByCaseId", "verify", "times", "getId", "assertFalse", "isSynced", "assertThat", "getAge", "is", "assertThat", "getRegistrationDate", "is", "getRegisterDateByYyyyMmDd"]}, "focal_class": {"identifier": "CaseService", "superclass": "extends RecordService", "interfaces": "", "fields": [{"original_string": "public static final String TAG = CaseService.class.getSimpleName();", "modifier": "public static final", "type": "String", "declarator": "TAG = CaseService.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "public static final String CASE_DISPLAY_ID = \"case_id_display\";", "modifier": "public static final", "type": "String", "declarator": "CASE_DISPLAY_ID = \"case_id_display\"", "var_name": "CASE_DISPLAY_ID"}, {"original_string": "public static final String CASE_ID = \"case_id\";", "modifier": "public static final", "type": "String", "declarator": "CASE_ID = \"case_id\"", "var_name": "CASE_ID"}, {"original_string": "public static final String CASE_PRIMARY_ID = \"case_primary_id\";", "modifier": "public static final", "type": "String", "declarator": "CASE_PRIMARY_ID = \"case_primary_id\"", "var_name": "CASE_PRIMARY_ID"}, {"original_string": "private CaseDao caseDao;", "modifier": "private", "type": "CaseDao", "declarator": "caseDao", "var_name": "caseDao"}, {"original_string": "private CasePhotoDao casePhotoDao;", "modifier": "private", "type": "CasePhotoDao", "declarator": "casePhotoDao", "var_name": "casePhotoDao"}, {"original_string": "private IncidentDao incidentDao;", "modifier": "private", "type": "IncidentDao", "declarator": "incidentDao", "var_name": "incidentDao"}], "methods": [{"identifier": "CaseService", "parameters": "(CaseDao caseDao, CasePhotoDao casePhotoDao, IncidentDao incidentDao)", "modifiers": "public", "return": "", "signature": " CaseService(CaseDao caseDao, CasePhotoDao casePhotoDao, IncidentDao incidentDao)", "full_signature": "public  CaseService(CaseDao caseDao, CasePhotoDao casePhotoDao, IncidentDao incidentDao)", "class_method_signature": "CaseService.CaseService(CaseDao caseDao, CasePhotoDao casePhotoDao, IncidentDao incidentDao)", "testcase": false, "constructor": true}, {"identifier": "getAll", "parameters": "()", "modifiers": "public", "return": "List<Case>", "signature": "List<Case> getAll()", "full_signature": "public List<Case> getAll()", "class_method_signature": "CaseService.getAll()", "testcase": false, "constructor": false}, {"identifier": "getById", "parameters": "(long caseId)", "modifiers": "public", "return": "Case", "signature": "Case getById(long caseId)", "full_signature": "public Case getById(long caseId)", "class_method_signature": "CaseService.getById(long caseId)", "testcase": false, "constructor": false}, {"identifier": "getByUniqueId", "parameters": "(String uniqueId)", "modifiers": "public", "return": "Case", "signature": "Case getByUniqueId(String uniqueId)", "full_signature": "public Case getByUniqueId(String uniqueId)", "class_method_signature": "CaseService.getByUniqueId(String uniqueId)", "testcase": false, "constructor": false}, {"identifier": "getIncidentsByCaseId", "parameters": "(String caseUniqueId)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getIncidentsByCaseId(String caseUniqueId)", "full_signature": "public List<String> getIncidentsByCaseId(String caseUniqueId)", "class_method_signature": "CaseService.getIncidentsByCaseId(String caseUniqueId)", "testcase": false, "constructor": false}, {"identifier": "getAllOrderByDateASC", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getAllOrderByDateASC()", "full_signature": "public List<Long> getAllOrderByDateASC()", "class_method_signature": "CaseService.getAllOrderByDateASC()", "testcase": false, "constructor": false}, {"identifier": "getAllOrderByDateDES", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getAllOrderByDateDES()", "full_signature": "public List<Long> getAllOrderByDateDES()", "class_method_signature": "CaseService.getAllOrderByDateDES()", "testcase": false, "constructor": false}, {"identifier": "getAllOrderByAgeASC", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getAllOrderByAgeASC()", "full_signature": "public List<Long> getAllOrderByAgeASC()", "class_method_signature": "CaseService.getAllOrderByAgeASC()", "testcase": false, "constructor": false}, {"identifier": "getAllOrderByAgeDES", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getAllOrderByAgeDES()", "full_signature": "public List<Long> getAllOrderByAgeDES()", "class_method_signature": "CaseService.getAllOrderByAgeDES()", "testcase": false, "constructor": false}, {"identifier": "getCPSearchResult", "parameters": "(String shortId, String name, int ageFrom, int ageTo,\n                                        String caregiver, Date date)", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getCPSearchResult(String shortId, String name, int ageFrom, int ageTo,\n                                        String caregiver, Date date)", "full_signature": "public List<Long> getCPSearchResult(String shortId, String name, int ageFrom, int ageTo,\n                                        String caregiver, Date date)", "class_method_signature": "CaseService.getCPSearchResult(String shortId, String name, int ageFrom, int ageTo,\n                                        String caregiver, Date date)", "testcase": false, "constructor": false}, {"identifier": "getAllSyncedRecordsId", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getAllSyncedRecordsId()", "full_signature": "public List<Long> getAllSyncedRecordsId()", "class_method_signature": "CaseService.getAllSyncedRecordsId()", "testcase": false, "constructor": false}, {"identifier": "getGBVSearchResult", "parameters": "(String shortId, String name, String location, Date registrationDate)", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getGBVSearchResult(String shortId, String name, String location, Date registrationDate)", "full_signature": "public List<Long> getGBVSearchResult(String shortId, String name, String location, Date registrationDate)", "class_method_signature": "CaseService.getGBVSearchResult(String shortId, String name, String location, Date registrationDate)", "testcase": false, "constructor": false}, {"identifier": "saveOrUpdate", "parameters": "(ItemValuesMap itemValues, List<String> photoPaths)", "modifiers": "public", "return": "Case", "signature": "Case saveOrUpdate(ItemValuesMap itemValues, List<String> photoPaths)", "full_signature": "public Case saveOrUpdate(ItemValuesMap itemValues, List<String> photoPaths)", "class_method_signature": "CaseService.saveOrUpdate(ItemValuesMap itemValues, List<String> photoPaths)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(ItemValuesMap itemValues, List<String> photoPaths)", "modifiers": "public", "return": "Case", "signature": "Case save(ItemValuesMap itemValues, List<String> photoPaths)", "full_signature": "public Case save(ItemValuesMap itemValues, List<String> photoPaths)", "class_method_signature": "CaseService.save(ItemValuesMap itemValues, List<String> photoPaths)", "testcase": false, "constructor": false}, {"identifier": "savePhoto", "parameters": "(Case child, List<String> photoPaths)", "modifiers": "public", "return": "void", "signature": "void savePhoto(Case child, List<String> photoPaths)", "full_signature": "public void savePhoto(Case child, List<String> photoPaths)", "class_method_signature": "CaseService.savePhoto(Case child, List<String> photoPaths)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ItemValuesMap itemValues, List<String> photoBitPaths)", "modifiers": "public", "return": "Case", "signature": "Case update(ItemValuesMap itemValues, List<String> photoBitPaths)", "full_signature": "public Case update(ItemValuesMap itemValues, List<String> photoBitPaths)", "class_method_signature": "CaseService.update(ItemValuesMap itemValues, List<String> photoBitPaths)", "testcase": false, "constructor": false}, {"identifier": "setCurrentDateIfRegistrationNotExist", "parameters": "(ItemValuesMap itemValues)", "modifiers": "private", "return": "void", "signature": "void setCurrentDateIfRegistrationNotExist(ItemValuesMap itemValues)", "full_signature": "private void setCurrentDateIfRegistrationNotExist(ItemValuesMap itemValues)", "class_method_signature": "CaseService.setCurrentDateIfRegistrationNotExist(ItemValuesMap itemValues)", "testcase": false, "constructor": false}, {"identifier": "updatePhoto", "parameters": "(Case child, List<String> photoPaths)", "modifiers": "public", "return": "void", "signature": "void updatePhoto(Case child, List<String> photoPaths)", "full_signature": "public void updatePhoto(Case child, List<String> photoPaths)", "class_method_signature": "CaseService.updatePhoto(Case child, List<String> photoPaths)", "testcase": false, "constructor": false}, {"identifier": "deleteByRecordId", "parameters": "(long recordId)", "modifiers": "public", "return": "Case", "signature": "Case deleteByRecordId(long recordId)", "full_signature": "public Case deleteByRecordId(long recordId)", "class_method_signature": "CaseService.deleteByRecordId(long recordId)", "testcase": false, "constructor": false}, {"identifier": "generateSavePhoto", "parameters": "(Case child, List<String> photoPaths, int index)", "modifiers": "private", "return": "CasePhoto", "signature": "CasePhoto generateSavePhoto(Case child, List<String> photoPaths, int index)", "full_signature": "private CasePhoto generateSavePhoto(Case child, List<String> photoPaths, int index)", "class_method_signature": "CaseService.generateSavePhoto(Case child, List<String> photoPaths, int index)", "testcase": false, "constructor": false}, {"identifier": "generateUpdatePhoto", "parameters": "(Case child, List<String> photoPaths, int index)", "modifiers": "@NonNull private", "return": "CasePhoto", "signature": "CasePhoto generateUpdatePhoto(Case child, List<String> photoPaths, int index)", "full_signature": "@NonNull private CasePhoto generateUpdatePhoto(Case child, List<String> photoPaths, int index)", "class_method_signature": "CaseService.generateUpdatePhoto(Case child, List<String> photoPaths, int index)", "testcase": false, "constructor": false}, {"identifier": "getAudioBlob", "parameters": "()", "modifiers": "private", "return": "Blob", "signature": "Blob getAudioBlob()", "full_signature": "private Blob getAudioBlob()", "class_method_signature": "CaseService.getAudioBlob()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(ItemValuesMap values)", "modifiers": "private", "return": "String", "signature": "String getName(ItemValuesMap values)", "full_signature": "private String getName(ItemValuesMap values)", "class_method_signature": "CaseService.getName(ItemValuesMap values)", "testcase": false, "constructor": false}, {"identifier": "getByInternalId", "parameters": "(String id)", "modifiers": "public", "return": "Case", "signature": "Case getByInternalId(String id)", "full_signature": "public Case getByInternalId(String id)", "class_method_signature": "CaseService.getByInternalId(String id)", "testcase": false, "constructor": false}, {"identifier": "hasSameRev", "parameters": "(String id, String rev)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSameRev(String id, String rev)", "full_signature": "public boolean hasSameRev(String id, String rev)", "class_method_signature": "CaseService.hasSameRev(String id, String rev)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/unicef/rapidreg/service/CaseService.java"}, "focal_method": {"identifier": "update", "parameters": "(ItemValuesMap itemValues, List<String> photoBitPaths)", "modifiers": "public", "return": "Case", "body": "public Case update(ItemValuesMap itemValues, List<String> photoBitPaths) throws IOException {\n        setCurrentDateIfRegistrationNotExist(itemValues);\n        Gson gson = new Gson();\n        Blob caseBlob = new Blob(gson.toJson(itemValues.getValues()).getBytes());\n        Blob audioFileDefault = getAudioBlob();\n\n        Case child = caseDao.getCaseByUniqueId(itemValues.getAsString(CASE_ID));\n        child.setLastUpdatedDate(new Date(Calendar.getInstance().getTimeInMillis()));\n        child.setContent(caseBlob);\n        child.setName(getName(itemValues));\n        String location = itemValues.has(LOCATION) ? itemValues.getAsString(LOCATION) : \"\";\n        child.setLocation(location);\n        int age = itemValues.getAsInt(AGE) != null ? itemValues.getAsInt(AGE) : EMPTY_AGE;\n        child.setAge(age);\n        child.setCaregiver(getCaregiverName(itemValues));\n        child.setRegistrationDate(Utils.getRegisterDateByYyyyMmDd(itemValues.getAsString(REGISTRATION_DATE)));\n        child.setAudio(audioFileDefault);\n        child.setSynced(false);\n\n        child = caseDao.update(child);\n\n        updatePhoto(child, photoBitPaths);\n\n        return child;\n    }", "signature": "Case update(ItemValuesMap itemValues, List<String> photoBitPaths)", "full_signature": "public Case update(ItemValuesMap itemValues, List<String> photoBitPaths)", "class_method_signature": "CaseService.update(ItemValuesMap itemValues, List<String> photoBitPaths)", "testcase": false, "constructor": false, "invocations": ["setCurrentDateIfRegistrationNotExist", "getBytes", "toJson", "getValues", "getAudioBlob", "getCaseByUniqueId", "getAsString", "setLastUpdatedDate", "getTimeInMillis", "getInstance", "setContent", "setName", "getName", "has", "getAsString", "setLocation", "getAsInt", "getAsInt", "setAge", "setCaregiver", "getCaregiverName", "setRegistrationDate", "getRegisterDateByYyyyMmDd", "getAsString", "setAudio", "setSynced", "update", "updatePhoto"]}, "repository": {"repo_id": 59507570, "url": "https://github.com/UnicefNY/RapidReg", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 10753, "license": "Other"}}