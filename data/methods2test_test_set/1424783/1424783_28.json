{"test_class": {"identifier": "PieRendererTest", "superclass": "extends AndroidplotTest", "interfaces": "", "fields": [{"original_string": "RectF plotArea = new RectF(0, 0, 100, 100);", "modifier": "", "type": "RectF", "declarator": "plotArea = new RectF(0, 0, 100, 100)", "var_name": "plotArea"}, {"original_string": "@Mock\n    LayoutManager layoutManager;", "modifier": "@Mock", "type": "LayoutManager", "declarator": "layoutManager", "var_name": "layoutManager"}, {"original_string": "PieChart pieChart;", "modifier": "", "type": "PieChart", "declarator": "pieChart", "var_name": "pieChart"}, {"original_string": "@Mock\n    TypedArray typedArray;", "modifier": "@Mock", "type": "TypedArray", "declarator": "typedArray", "var_name": "typedArray"}, {"original_string": "@Mock\n    SeriesRegistry seriesRegistry;", "modifier": "@Mock", "type": "SeriesRegistry", "declarator": "seriesRegistry", "var_name": "seriesRegistry"}, {"original_string": "@Mock\n    RenderStack renderStack;", "modifier": "@Mock", "type": "RenderStack", "declarator": "renderStack", "var_name": "renderStack"}, {"original_string": "Canvas canvas;", "modifier": "", "type": "Canvas", "declarator": "canvas", "var_name": "canvas"}], "file": "androidplot-core/src/test/java/com/androidplot/pie/PieRendererTest.java"}, "test_case": {"identifier": "testSetDonutSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetDonutSize() throws Exception {\n\n        Segment segment1 = spy(new Segment(\"s1\", 25));\n        Segment segment2 = spy(new Segment(\"s2\", 25));\n        Segment segment3 = spy(new Segment(\"s3\", 25));\n        Segment segment4 = spy(new Segment(\"s4\", 25));\n\n        SegmentFormatter formatter = spy(\n                new SegmentFormatter(Color.GREEN, Color.GREEN, Color.GREEN, Color.GREEN));\n        PieRenderer renderer = formatter.getRendererInstance(pieChart);\n\n        pieChart.addSegment(segment1, formatter);\n        pieChart.addSegment(segment2, formatter);\n        pieChart.addSegment(segment3, formatter);\n        pieChart.addSegment(segment4, formatter);\n\n        renderer.setDonutSize(0.25f, PieRenderer.DonutMode.PERCENT);\n\n        renderer.onRender(canvas, plotArea, segment1, formatter, renderStack);\n\n        // TODO: verify radials are drown at the correct offsets from center\n        //verify(canvas).drawLine(anyFloat(), anyFloat(), anyFloat(), anyFloat(), any(Paint.class));\n    }", "signature": "void testSetDonutSize()", "full_signature": "@Test public void testSetDonutSize()", "class_method_signature": "PieRendererTest.testSetDonutSize()", "testcase": true, "constructor": false, "invocations": ["spy", "spy", "spy", "spy", "spy", "getRendererInstance", "addSegment", "addSegment", "addSegment", "addSegment", "setDonutSize", "onRender"]}, "focal_class": {"identifier": "PieRenderer", "superclass": "extends SeriesRenderer<PieChart, Segment, SegmentFormatter>", "interfaces": "", "fields": [{"original_string": "private static final float FULL_PIE_DEGS = 360f;", "modifier": "private static final", "type": "float", "declarator": "FULL_PIE_DEGS = 360f", "var_name": "FULL_PIE_DEGS"}, {"original_string": "private static final float HALF_PIE_DEGS = 180f;", "modifier": "private static final", "type": "float", "declarator": "HALF_PIE_DEGS = 180f", "var_name": "HALF_PIE_DEGS"}, {"original_string": "private float startDegs = 0;", "modifier": "private", "type": "float", "declarator": "startDegs = 0", "var_name": "startDegs"}, {"original_string": "private float extentDegs = FULL_PIE_DEGS;", "modifier": "private", "type": "float", "declarator": "extentDegs = FULL_PIE_DEGS", "var_name": "extentDegs"}, {"original_string": "private float donutSize = 0.5f;", "modifier": "private", "type": "float", "declarator": "donutSize = 0.5f", "var_name": "donutSize"}, {"original_string": "private DonutMode donutMode = DonutMode.PERCENT;", "modifier": "private", "type": "DonutMode", "declarator": "donutMode = DonutMode.PERCENT", "var_name": "donutMode"}], "methods": [{"identifier": "PieRenderer", "parameters": "(PieChart plot)", "modifiers": "public", "return": "", "signature": " PieRenderer(PieChart plot)", "full_signature": "public  PieRenderer(PieChart plot)", "class_method_signature": "PieRenderer.PieRenderer(PieChart plot)", "testcase": false, "constructor": true}, {"identifier": "getRadius", "parameters": "(RectF rect)", "modifiers": "public", "return": "float", "signature": "float getRadius(RectF rect)", "full_signature": "public float getRadius(RectF rect)", "class_method_signature": "PieRenderer.getRadius(RectF rect)", "testcase": false, "constructor": false}, {"identifier": "onRender", "parameters": "(Canvas canvas, RectF plotArea, Segment series, SegmentFormatter formatter,\n            RenderStack stack)", "modifiers": "@Override public", "return": "void", "signature": "void onRender(Canvas canvas, RectF plotArea, Segment series, SegmentFormatter formatter,\n            RenderStack stack)", "full_signature": "@Override public void onRender(Canvas canvas, RectF plotArea, Segment series, SegmentFormatter formatter,\n            RenderStack stack)", "class_method_signature": "PieRenderer.onRender(Canvas canvas, RectF plotArea, Segment series, SegmentFormatter formatter,\n            RenderStack stack)", "testcase": false, "constructor": false}, {"identifier": "drawSegment", "parameters": "(Canvas canvas, RectF bounds, Segment seg, SegmentFormatter f,\n            float rad, float startAngle, float sweep)", "modifiers": "protected", "return": "void", "signature": "void drawSegment(Canvas canvas, RectF bounds, Segment seg, SegmentFormatter f,\n            float rad, float startAngle, float sweep)", "full_signature": "protected void drawSegment(Canvas canvas, RectF bounds, Segment seg, SegmentFormatter f,\n            float rad, float startAngle, float sweep)", "class_method_signature": "PieRenderer.drawSegment(Canvas canvas, RectF bounds, Segment seg, SegmentFormatter f,\n            float rad, float startAngle, float sweep)", "testcase": false, "constructor": false}, {"identifier": "drawSegmentLabel", "parameters": "(Canvas canvas, PointF origin,\n            Segment seg, SegmentFormatter f)", "modifiers": "protected", "return": "void", "signature": "void drawSegmentLabel(Canvas canvas, PointF origin,\n            Segment seg, SegmentFormatter f)", "full_signature": "protected void drawSegmentLabel(Canvas canvas, PointF origin,\n            Segment seg, SegmentFormatter f)", "class_method_signature": "PieRenderer.drawSegmentLabel(Canvas canvas, PointF origin,\n            Segment seg, SegmentFormatter f)", "testcase": false, "constructor": false}, {"identifier": "doDrawLegendIcon", "parameters": "(Canvas canvas, RectF rect, SegmentFormatter formatter)", "modifiers": "@Override protected", "return": "void", "signature": "void doDrawLegendIcon(Canvas canvas, RectF rect, SegmentFormatter formatter)", "full_signature": "@Override protected void doDrawLegendIcon(Canvas canvas, RectF rect, SegmentFormatter formatter)", "class_method_signature": "PieRenderer.doDrawLegendIcon(Canvas canvas, RectF rect, SegmentFormatter formatter)", "testcase": false, "constructor": false}, {"identifier": "calculateScale", "parameters": "(double[] values)", "modifiers": "protected", "return": "double", "signature": "double calculateScale(double[] values)", "full_signature": "protected double calculateScale(double[] values)", "class_method_signature": "PieRenderer.calculateScale(double[] values)", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "protected", "return": "double[]", "signature": "double[] getValues()", "full_signature": "protected double[] getValues()", "class_method_signature": "PieRenderer.getValues()", "testcase": false, "constructor": false}, {"identifier": "calculateLineEnd", "parameters": "(float x, float y, float rad, float deg)", "modifiers": "protected", "return": "PointF", "signature": "PointF calculateLineEnd(float x, float y, float rad, float deg)", "full_signature": "protected PointF calculateLineEnd(float x, float y, float rad, float deg)", "class_method_signature": "PieRenderer.calculateLineEnd(float x, float y, float rad, float deg)", "testcase": false, "constructor": false}, {"identifier": "calculateLineEnd", "parameters": "(PointF origin, float rad, float deg)", "modifiers": "protected", "return": "PointF", "signature": "PointF calculateLineEnd(PointF origin, float rad, float deg)", "full_signature": "protected PointF calculateLineEnd(PointF origin, float rad, float deg)", "class_method_signature": "PieRenderer.calculateLineEnd(PointF origin, float rad, float deg)", "testcase": false, "constructor": false}, {"identifier": "setDonutSize", "parameters": "(float size, DonutMode mode)", "modifiers": "public", "return": "void", "signature": "void setDonutSize(float size, DonutMode mode)", "full_signature": "public void setDonutSize(float size, DonutMode mode)", "class_method_signature": "PieRenderer.setDonutSize(float size, DonutMode mode)", "testcase": false, "constructor": false}, {"identifier": "getContainingSegment", "parameters": "(PointF point)", "modifiers": "public", "return": "Segment", "signature": "Segment getContainingSegment(PointF point)", "full_signature": "public Segment getContainingSegment(PointF point)", "class_method_signature": "PieRenderer.getContainingSegment(PointF point)", "testcase": false, "constructor": false}, {"identifier": "degsToScreenDegs", "parameters": "(float degs)", "modifiers": "protected static", "return": "float", "signature": "float degsToScreenDegs(float degs)", "full_signature": "protected static float degsToScreenDegs(float degs)", "class_method_signature": "PieRenderer.degsToScreenDegs(float degs)", "testcase": false, "constructor": false}, {"identifier": "signedDistance", "parameters": "(double angle1, double angle2)", "modifiers": "protected static", "return": "double", "signature": "double signedDistance(double angle1, double angle2)", "full_signature": "protected static double signedDistance(double angle1, double angle2)", "class_method_signature": "PieRenderer.signedDistance(double angle1, double angle2)", "testcase": false, "constructor": false}, {"identifier": "validateInputDegs", "parameters": "(float degs)", "modifiers": "protected static", "return": "void", "signature": "void validateInputDegs(float degs)", "full_signature": "protected static void validateInputDegs(float degs)", "class_method_signature": "PieRenderer.validateInputDegs(float degs)", "testcase": false, "constructor": false}, {"identifier": "setStartDegs", "parameters": "(float degs)", "modifiers": "public", "return": "void", "signature": "void setStartDegs(float degs)", "full_signature": "public void setStartDegs(float degs)", "class_method_signature": "PieRenderer.setStartDegs(float degs)", "testcase": false, "constructor": false}, {"identifier": "getStartDegs", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getStartDegs()", "full_signature": "public float getStartDegs()", "class_method_signature": "PieRenderer.getStartDegs()", "testcase": false, "constructor": false}, {"identifier": "setExtentDegs", "parameters": "(float degs)", "modifiers": "public", "return": "void", "signature": "void setExtentDegs(float degs)", "full_signature": "public void setExtentDegs(float degs)", "class_method_signature": "PieRenderer.setExtentDegs(float degs)", "testcase": false, "constructor": false}, {"identifier": "getExtentDegs", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getExtentDegs()", "full_signature": "public float getExtentDegs()", "class_method_signature": "PieRenderer.getExtentDegs()", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/pie/PieRenderer.java"}, "focal_method": {"identifier": "setDonutSize", "parameters": "(float size, DonutMode mode)", "modifiers": "public", "return": "void", "body": "public void setDonutSize(float size, DonutMode mode) {\n        switch (mode) {\n            case PERCENT:\n                if (size < 0 || size > 1) {\n                    throw new IllegalArgumentException(\n                            \"Size parameter must be between 0 and 1 when operating in PERCENT mode.\");\n                }\n                break;\n            case PIXELS:\n                break;\n            default:\n                throw new UnsupportedOperationException(\"Not yet implemented.\");\n        }\n        donutMode = mode;\n        donutSize = size;\n    }", "signature": "void setDonutSize(float size, DonutMode mode)", "full_signature": "public void setDonutSize(float size, DonutMode mode)", "class_method_signature": "PieRenderer.setDonutSize(float size, DonutMode mode)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}