{"test_class": {"identifier": "TestSyslogParser", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/source/TestSyslogParser.java"}, "test_case": {"identifier": "testRfc5424DateParsing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRfc5424DateParsing() {\n    final String[] examples = {\n      \"1985-04-12T23:20:50.52Z\", \"1985-04-12T19:20:50.52-04:00\",\n      \"2003-10-11T22:14:15.003Z\", \"2003-08-24T05:14:15.000003-07:00\",\n      \"2012-04-13T11:11:11-08:00\", \"2012-04-13T08:08:08.0001+00:00\",\n      \"2012-04-13T08:08:08.251+00:00\"\n    };\n\n    SyslogParser parser = new SyslogParser();\n    DateTimeFormatter jodaParser = ISODateTimeFormat.dateTimeParser();\n\n    for (String ex : examples) {\n      Assert.assertEquals(\n          \"Problem parsing date string: \" + ex,\n          jodaParser.parseMillis(ex),\n          parser.parseRfc5424Date(ex));\n    }\n  }", "signature": "void testRfc5424DateParsing()", "full_signature": "@Test public void testRfc5424DateParsing()", "class_method_signature": "TestSyslogParser.testRfc5424DateParsing()", "testcase": true, "constructor": false, "invocations": ["dateTimeParser", "assertEquals", "parseMillis", "parseRfc5424Date"]}, "focal_class": {"identifier": "SyslogParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(SyslogParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(SyslogParser.class)", "var_name": "logger"}, {"original_string": "private static final int TS_CACHE_MAX = 1000;", "modifier": "private static final", "type": "int", "declarator": "TS_CACHE_MAX = 1000", "var_name": "TS_CACHE_MAX"}, {"original_string": "private static final Pattern TWO_SPACES = Pattern.compile(\"  \");", "modifier": "private static final", "type": "Pattern", "declarator": "TWO_SPACES = Pattern.compile(\"  \")", "var_name": "TWO_SPACES"}, {"original_string": "private static final DateTimeFormatter rfc3164Format =\n      DateTimeFormat.forPattern(\"MMM d HH:mm:ss\").withZoneUTC();", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "rfc3164Format =\n      DateTimeFormat.forPattern(\"MMM d HH:mm:ss\").withZoneUTC()", "var_name": "rfc3164Format"}, {"original_string": "private static final String timePat = \"yyyy-MM-dd'T'HH:mm:ss\";", "modifier": "private static final", "type": "String", "declarator": "timePat = \"yyyy-MM-dd'T'HH:mm:ss\"", "var_name": "timePat"}, {"original_string": "private static final int RFC3164_LEN = 15;", "modifier": "private static final", "type": "int", "declarator": "RFC3164_LEN = 15", "var_name": "RFC3164_LEN"}, {"original_string": "private static final int RFC5424_PREFIX_LEN = 19;", "modifier": "private static final", "type": "int", "declarator": "RFC5424_PREFIX_LEN = 19", "var_name": "RFC5424_PREFIX_LEN"}, {"original_string": "private final DateTimeFormatter timeParser;", "modifier": "private final", "type": "DateTimeFormatter", "declarator": "timeParser", "var_name": "timeParser"}, {"original_string": "private Cache<String, Long> timestampCache;", "modifier": "private", "type": "Cache<String, Long>", "declarator": "timestampCache", "var_name": "timestampCache"}], "methods": [{"identifier": "SyslogParser", "parameters": "()", "modifiers": "public", "return": "", "signature": " SyslogParser()", "full_signature": "public  SyslogParser()", "class_method_signature": "SyslogParser.SyslogParser()", "testcase": false, "constructor": true}, {"identifier": "parseMessage", "parameters": "(String msg, Charset charset, Set<String> keepFields)", "modifiers": "public", "return": "Event", "signature": "Event parseMessage(String msg, Charset charset, Set<String> keepFields)", "full_signature": "public Event parseMessage(String msg, Charset charset, Set<String> keepFields)", "class_method_signature": "SyslogParser.parseMessage(String msg, Charset charset, Set<String> keepFields)", "testcase": false, "constructor": false}, {"identifier": "parseRfc5424Date", "parameters": "(String msg)", "modifiers": "protected", "return": "long", "signature": "long parseRfc5424Date(String msg)", "full_signature": "protected long parseRfc5424Date(String msg)", "class_method_signature": "SyslogParser.parseRfc5424Date(String msg)", "testcase": false, "constructor": false}, {"identifier": "parseRfc3164Time", "parameters": "(String ts)", "modifiers": "protected", "return": "long", "signature": "long parseRfc3164Time(String ts)", "full_signature": "protected long parseRfc3164Time(String ts)", "class_method_signature": "SyslogParser.parseRfc3164Time(String ts)", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/source/SyslogParser.java"}, "focal_method": {"identifier": "parseRfc5424Date", "parameters": "(String msg)", "modifiers": "protected", "return": "long", "body": "protected long parseRfc5424Date(String msg) {\n\n    Long ts = null;\n    int curPos = 0;\n\n    int msgLen = msg.length();\n    Preconditions.checkArgument(msgLen > RFC5424_PREFIX_LEN,\n        \"Bad format: Not a valid RFC5424 timestamp: %s\", msg);\n    String timestampPrefix = msg.substring(curPos, RFC5424_PREFIX_LEN);\n\n    try {\n      ts = timestampCache.get(timestampPrefix);\n    } catch (ExecutionException ex) {\n      throw new IllegalArgumentException(\"bad timestamp format\", ex);\n    }\n\n    curPos += RFC5424_PREFIX_LEN;\n\n    Preconditions.checkArgument(ts != null, \"Parsing error: timestamp is null\");\n\n    // look for the optional fractional seconds\n    if (msg.charAt(curPos) == '.') {\n      // figure out how many numeric digits\n      boolean foundEnd = false;\n      int endMillisPos = curPos + 1;\n\n      if (msgLen <= endMillisPos) {\n        throw new IllegalArgumentException(\"bad timestamp format (no TZ)\");\n      }\n\n      // FIXME: TODO: ensure we handle all bad formatting cases\n      while (!foundEnd) {\n        char curDigit = msg.charAt(endMillisPos);\n        if (curDigit >= '0' && curDigit <= '9') {\n          endMillisPos++;\n        } else {\n          foundEnd = true;\n        }\n      }\n\n      // if they had a valid fractional second, append it rounded to millis\n      final int fractionalPositions = endMillisPos - (curPos + 1);\n      if (fractionalPositions > 0) {\n        long milliseconds = Long.parseLong(msg.substring(curPos + 1, endMillisPos));\n        if (fractionalPositions > 3) {\n          milliseconds /= Math.pow(10, (fractionalPositions - 3));\n        } else if (fractionalPositions < 3) {\n          milliseconds *= Math.pow(10, (3 - fractionalPositions));\n        }\n        ts += milliseconds;\n      } else {\n        throw new IllegalArgumentException(\n            \"Bad format: Invalid timestamp (fractional portion): \" + msg);\n      }\n\n      curPos = endMillisPos;\n    }\n\n    // look for timezone\n    char tzFirst = msg.charAt(curPos);\n\n    // UTC\n    if (tzFirst == 'Z') {\n      // no-op\n    } else if (tzFirst == '+' || tzFirst == '-') {\n\n      Preconditions.checkArgument(msgLen > curPos + 5,\n          \"Bad format: Invalid timezone (%s)\", msg);\n\n      int polarity;\n      if (tzFirst == '+') {\n        polarity = +1;\n      } else {\n        polarity = -1;\n      }\n\n      char[] h = new char[5];\n      for (int i = 0; i < 5; i++) {\n        h[i] = msg.charAt(curPos + 1 + i);\n      }\n\n      if (h[0] >= '0' && h[0] <= '9'\n          && h[1] >= '0' && h[1] <= '9'\n          && h[2] == ':'\n          && h[3] >= '0' && h[3] <= '9'\n          && h[4] >= '0' && h[4] <= '9') {\n        int hourOffset = Integer.parseInt(msg.substring(curPos + 1, curPos + 3));\n        int minOffset = Integer.parseInt(msg.substring(curPos + 4, curPos + 6));\n        ts -= polarity * ((hourOffset * 60) + minOffset) * 60000;\n      } else {\n        throw new IllegalArgumentException(\n            \"Bad format: Invalid timezone: \" + msg);\n      }\n\n    }\n\n\n    return ts;\n  }", "signature": "long parseRfc5424Date(String msg)", "full_signature": "protected long parseRfc5424Date(String msg)", "class_method_signature": "SyslogParser.parseRfc5424Date(String msg)", "testcase": false, "constructor": false, "invocations": ["length", "checkArgument", "substring", "get", "checkArgument", "charAt", "charAt", "parseLong", "substring", "pow", "pow", "charAt", "checkArgument", "charAt", "parseInt", "substring", "parseInt", "substring"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}