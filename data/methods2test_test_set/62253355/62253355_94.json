{"test_class": {"identifier": "PolicyEnforcementRestTest", "superclass": "extends MobiRestTestNg", "interfaces": "", "fields": [{"original_string": "private static final String USER_IRI = \"http://mobi.com/users/tester\";", "modifier": "private static final", "type": "String", "declarator": "USER_IRI = \"http://mobi.com/users/tester\"", "var_name": "USER_IRI"}, {"original_string": "private PolicyEnforcementRest rest;", "modifier": "private", "type": "PolicyEnforcementRest", "declarator": "rest", "var_name": "rest"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private JSONObject json;", "modifier": "private", "type": "JSONObject", "declarator": "json", "var_name": "json"}, {"original_string": "@Mock\n    private EngineManager engineManager;", "modifier": "@Mock\n    private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}, {"original_string": "@Mock\n    private PDP pdp;", "modifier": "@Mock\n    private", "type": "PDP", "declarator": "pdp", "var_name": "pdp"}, {"original_string": "@Mock\n    private User user;", "modifier": "@Mock\n    private", "type": "User", "declarator": "user", "var_name": "user"}, {"original_string": "@Mock\n    private Request request;", "modifier": "@Mock\n    private", "type": "Request", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private com.mobi.security.policy.api.Response response;", "modifier": "@Mock\n    private", "type": "com.mobi.security.policy.api.Response", "declarator": "response", "var_name": "response"}], "file": "com.mobi.security.policy.rest/src/test/java/com/mobi/security/policy/rest/PolicyEnforcementRestTest.java"}, "test_case": {"identifier": "evaluateRequestTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluateRequestTest() {\n        Response response = target().path(\"pep\").request().post(Entity.json(json));\n        assertEquals(response.readEntity(String.class), Decision.PERMIT.toString());\n        assertEquals(response.getStatus(), 200);\n    }", "signature": "void evaluateRequestTest()", "full_signature": "@Test public void evaluateRequestTest()", "class_method_signature": "PolicyEnforcementRestTest.evaluateRequestTest()", "testcase": true, "constructor": false, "invocations": ["post", "request", "path", "target", "json", "assertEquals", "readEntity", "toString", "assertEquals", "getStatus"]}, "focal_class": {"identifier": "PolicyEnforcementRest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(PolicyEnforcementRest.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PolicyEnforcementRest.class)", "var_name": "log"}, {"original_string": "private PDP pdp;", "modifier": "private", "type": "PDP", "declarator": "pdp", "var_name": "pdp"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private EngineManager engineManager;", "modifier": "private", "type": "EngineManager", "declarator": "engineManager", "var_name": "engineManager"}], "methods": [{"identifier": "setPdp", "parameters": "(PDP pdp)", "modifiers": "@Reference", "return": "void", "signature": "void setPdp(PDP pdp)", "full_signature": "@Reference void setPdp(PDP pdp)", "class_method_signature": "PolicyEnforcementRest.setPdp(PDP pdp)", "testcase": false, "constructor": false}, {"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "PolicyEnforcementRest.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setEngineManager", "parameters": "(EngineManager engineManager)", "modifiers": "@Reference", "return": "void", "signature": "void setEngineManager(EngineManager engineManager)", "full_signature": "@Reference void setEngineManager(EngineManager engineManager)", "class_method_signature": "PolicyEnforcementRest.setEngineManager(EngineManager engineManager)", "testcase": false, "constructor": false}, {"identifier": "evaluateRequest", "parameters": "(@Context ContainerRequestContext context, String jsonRequest)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.TEXT_PLAIN) @RolesAllowed(\"user\") @ApiOperation(\"Converts user provided request into XACML and evaluates.\") public", "return": "Response", "signature": "Response evaluateRequest(@Context ContainerRequestContext context, String jsonRequest)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.TEXT_PLAIN) @RolesAllowed(\"user\") @ApiOperation(\"Converts user provided request into XACML and evaluates.\") public Response evaluateRequest(@Context ContainerRequestContext context, String jsonRequest)", "class_method_signature": "PolicyEnforcementRest.evaluateRequest(@Context ContainerRequestContext context, String jsonRequest)", "testcase": false, "constructor": false}, {"identifier": "getMessageOrDefault", "parameters": "(com.mobi.security.policy.api.Response response, String defaultMessage)", "modifiers": "private", "return": "String", "signature": "String getMessageOrDefault(com.mobi.security.policy.api.Response response, String defaultMessage)", "full_signature": "private String getMessageOrDefault(com.mobi.security.policy.api.Response response, String defaultMessage)", "class_method_signature": "PolicyEnforcementRest.getMessageOrDefault(com.mobi.security.policy.api.Response response, String defaultMessage)", "testcase": false, "constructor": false}], "file": "com.mobi.security.policy.rest/src/main/java/com/mobi/security/policy/rest/PolicyEnforcementRest.java"}, "focal_method": {"identifier": "evaluateRequest", "parameters": "(@Context ContainerRequestContext context, String jsonRequest)", "modifiers": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.TEXT_PLAIN) @RolesAllowed(\"user\") @ApiOperation(\"Converts user provided request into XACML and evaluates.\") public", "return": "Response", "body": "@POST\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Produces(MediaType.TEXT_PLAIN)\n    @RolesAllowed(\"user\")\n    @ApiOperation(\"Converts user provided request into XACML and evaluates.\")\n    public Response evaluateRequest(@Context ContainerRequestContext context, String jsonRequest) {\n        log.debug(\"Authorizing...\");\n        long start = System.currentTimeMillis();\n\n        try {\n            JSONObject json = JSONObject.fromObject(jsonRequest);\n            IRI subjectId = (IRI) RestUtils.optActiveUser(context, engineManager).map(User::getResource)\n                    .orElse(vf.createIRI(ANON_USER));\n\n            String actionIdStr = json.optString(\"actionId\");\n            String resourceIdStr = json.optString(\"resourceId\");\n            if (StringUtils.isEmpty(actionIdStr) || StringUtils.isEmpty(resourceIdStr)) {\n                throw ErrorUtils.sendError(\"ID is required.\", Response.Status.BAD_REQUEST);\n            }\n\n            IRI actionId = vf.createIRI(actionIdStr);\n            IRI resourceId = vf.createIRI(resourceIdStr);\n\n            Map<String, String> attributes = json.getJSONObject(\"subjectAttrs\");\n            Map<String, Literal> subjectAttrs = attributes.entrySet().stream().collect(Collectors.toMap(\n                    e -> e.getKey(), e -> vf.createLiteral(e.getValue())));\n            attributes = json.getJSONObject(\"resourceAttrs\");\n            Map<String, Literal> resourceAttrs = attributes.entrySet().stream().collect(Collectors.toMap(\n                    e -> e.getKey(), e -> vf.createLiteral(e.getValue())));\n            attributes = json.getJSONObject(\"actionAttrs\");\n            Map<String, Literal> actionAttrs = attributes.entrySet().stream().collect(Collectors.toMap(\n                    e -> e.getKey(), e -> vf.createLiteral(e.getValue())));\n\n            Request request = pdp.createRequest(subjectId, subjectAttrs, resourceId, resourceAttrs,\n                    actionId, actionAttrs);\n\n            log.debug(request.toString());\n            com.mobi.security.policy.api.Response response = pdp.evaluate(request,\n                    vf.createIRI(POLICY_PERMIT_OVERRIDES));\n            log.debug(response.toString());\n            log.debug(String.format(\"Request Evaluated. %dms\", System.currentTimeMillis() - start));\n\n            return Response.ok(response.getDecision().toString()).build();\n        } catch (IllegalArgumentException | MobiException ex) {\n            throw ErrorUtils.sendError(\"Request could not be evaluated\", Response.Status.INTERNAL_SERVER_ERROR);\n        }\n    }", "signature": "Response evaluateRequest(@Context ContainerRequestContext context, String jsonRequest)", "full_signature": "@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.TEXT_PLAIN) @RolesAllowed(\"user\") @ApiOperation(\"Converts user provided request into XACML and evaluates.\") public Response evaluateRequest(@Context ContainerRequestContext context, String jsonRequest)", "class_method_signature": "PolicyEnforcementRest.evaluateRequest(@Context ContainerRequestContext context, String jsonRequest)", "testcase": false, "constructor": false, "invocations": ["debug", "currentTimeMillis", "fromObject", "orElse", "map", "optActiveUser", "createIRI", "optString", "optString", "isEmpty", "isEmpty", "sendError", "createIRI", "createIRI", "getJSONObject", "collect", "stream", "entrySet", "toMap", "getKey", "createLiteral", "getValue", "getJSONObject", "collect", "stream", "entrySet", "toMap", "getKey", "createLiteral", "getValue", "getJSONObject", "collect", "stream", "entrySet", "toMap", "getKey", "createLiteral", "getValue", "createRequest", "debug", "toString", "evaluate", "createIRI", "debug", "toString", "debug", "format", "currentTimeMillis", "build", "ok", "toString", "getDecision", "sendError"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}