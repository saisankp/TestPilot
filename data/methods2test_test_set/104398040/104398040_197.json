{"test_class": {"identifier": "LogbackLogConfiguratorTest", "superclass": "extends PowerMockTestCase", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private LogbackLogConfigurator logbackVerboseConfigurator;", "modifier": "@InjectMocks\n    private", "type": "LogbackLogConfigurator", "declarator": "logbackVerboseConfigurator", "var_name": "logbackVerboseConfigurator"}, {"original_string": "@Mock\n    private static final LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();", "modifier": "@Mock\n    private static final", "type": "LoggerContext", "declarator": "loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory()", "var_name": "loggerContext"}], "file": "butterfly-cli/src/test/java/com/paypal/butterfly/cli/logging/LogbackLogConfiguratorTest.java"}, "test_case": {"identifier": "testLoggerAsStringAndLogBackLevelAsInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoggerAsStringAndLogBackLevelAsInfo() {\n        Assert.assertNotNull(logbackVerboseConfigurator);\n        Assert.assertNotNull(loggerContext);\n        logbackVerboseConfigurator.setLoggerLevel(\"com.paypal.butterfly.cli\", Level.INFO);\n        Assert.assertTrue(loggerContext.getLogger(\"com.paypal.butterfly.cli\").getLevel() == ch.qos.logback.classic.Level.INFO);\n    }", "signature": "void testLoggerAsStringAndLogBackLevelAsInfo()", "full_signature": "@Test public void testLoggerAsStringAndLogBackLevelAsInfo()", "class_method_signature": "LogbackLogConfiguratorTest.testLoggerAsStringAndLogBackLevelAsInfo()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertNotNull", "setLoggerLevel", "assertTrue", "getLevel", "getLogger"]}, "focal_class": {"identifier": "LogbackLogConfigurator", "superclass": "extends LogConfigurator", "interfaces": "", "fields": [{"original_string": "private static final LoggerContext loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory();", "modifier": "private static final", "type": "LoggerContext", "declarator": "loggerContext = (LoggerContext) LoggerFactory.getILoggerFactory()", "var_name": "loggerContext"}, {"original_string": "private boolean verboseMode = false;", "modifier": "private", "type": "boolean", "declarator": "verboseMode = false", "var_name": "verboseMode"}], "methods": [{"identifier": "setLoggerLevel", "parameters": "(String logger, org.slf4j.event.Level level)", "modifiers": "@Override public", "return": "void", "signature": "void setLoggerLevel(String logger, org.slf4j.event.Level level)", "full_signature": "@Override public void setLoggerLevel(String logger, org.slf4j.event.Level level)", "class_method_signature": "LogbackLogConfigurator.setLoggerLevel(String logger, org.slf4j.event.Level level)", "testcase": false, "constructor": false}, {"identifier": "setLoggerLevel", "parameters": "(Class logger, org.slf4j.event.Level level)", "modifiers": "@Override public", "return": "void", "signature": "void setLoggerLevel(Class logger, org.slf4j.event.Level level)", "full_signature": "@Override public void setLoggerLevel(Class logger, org.slf4j.event.Level level)", "class_method_signature": "LogbackLogConfigurator.setLoggerLevel(Class logger, org.slf4j.event.Level level)", "testcase": false, "constructor": false}, {"identifier": "getLogbackLogLevel", "parameters": "(org.slf4j.event.Level slf4jLevel)", "modifiers": "private", "return": "Level", "signature": "Level getLogbackLogLevel(org.slf4j.event.Level slf4jLevel)", "full_signature": "private Level getLogbackLogLevel(org.slf4j.event.Level slf4jLevel)", "class_method_signature": "LogbackLogConfigurator.getLogbackLogLevel(org.slf4j.event.Level slf4jLevel)", "testcase": false, "constructor": false}, {"identifier": "setVerboseMode", "parameters": "(boolean verboseMode)", "modifiers": "@Override public", "return": "void", "signature": "void setVerboseMode(boolean verboseMode)", "full_signature": "@Override public void setVerboseMode(boolean verboseMode)", "class_method_signature": "LogbackLogConfigurator.setVerboseMode(boolean verboseMode)", "testcase": false, "constructor": false}, {"identifier": "setLogToFile", "parameters": "(boolean on)", "modifiers": "@Override public", "return": "void", "signature": "void setLogToFile(boolean on)", "full_signature": "@Override public void setLogToFile(boolean on)", "class_method_signature": "LogbackLogConfigurator.setLogToFile(boolean on)", "testcase": false, "constructor": false}, {"identifier": "isVerboseMode", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVerboseMode()", "full_signature": "@Override public boolean isVerboseMode()", "class_method_signature": "LogbackLogConfigurator.isVerboseMode()", "testcase": false, "constructor": false}], "file": "butterfly-cli/src/main/java/com/paypal/butterfly/cli/logging/LogbackLogConfigurator.java"}, "focal_method": {"identifier": "setLoggerLevel", "parameters": "(String logger, org.slf4j.event.Level level)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setLoggerLevel(String logger, org.slf4j.event.Level level) {\n        if(level == null) {\n            throw new IllegalArgumentException(\"level argument cannot be null\");\n        }\n        loggerContext.getLogger(logger).setLevel(getLogbackLogLevel(level));\n    }", "signature": "void setLoggerLevel(String logger, org.slf4j.event.Level level)", "full_signature": "@Override public void setLoggerLevel(String logger, org.slf4j.event.Level level)", "class_method_signature": "LogbackLogConfigurator.setLoggerLevel(String logger, org.slf4j.event.Level level)", "testcase": false, "constructor": false, "invocations": ["setLevel", "getLogger", "getLogbackLogLevel"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}