{"test_class": {"identifier": "OutputColsHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TableSchema tableSchema = new TableSchema(\n        new String[]{\"f0\", \"f1\", \"f2\"},\n        new TypeInformation[]{\n            TypeInformation.of(String.class),\n            TypeInformation.of(Long.class),\n            TypeInformation.of(Integer.class)\n        }\n    );", "modifier": "private", "type": "TableSchema", "declarator": "tableSchema = new TableSchema(\n        new String[]{\"f0\", \"f1\", \"f2\"},\n        new TypeInformation[]{\n            TypeInformation.of(String.class),\n            TypeInformation.of(Long.class),\n            TypeInformation.of(Integer.class)\n        }\n    )", "var_name": "tableSchema"}, {"original_string": "private String[] reservedColNames = new String[]{\"f0\"};", "modifier": "private", "type": "String[]", "declarator": "reservedColNames = new String[]{\"f0\"}", "var_name": "reservedColNames"}, {"original_string": "private Row row = Row.of(\"a\", 1L, 1);", "modifier": "private", "type": "Row", "declarator": "row = Row.of(\"a\", 1L, 1)", "var_name": "row"}], "file": "core/src/test/java/com/alibaba/alink/common/utils/OutputColsHelperTest.java"}, "test_case": {"identifier": "testResultSchema", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResultSchema() {\n        TableSchema expectSchema = new TableSchema(\n            new String[]{\"f0\", \"f1\", \"f2\", \"res\"},\n            new TypeInformation[]{\n                TypeInformation.of(String.class),\n                TypeInformation.of(Long.class),\n                TypeInformation.of(Integer.class),\n                TypeInformation.of(String.class)\n            }\n        );\n        OutputColsHelper helper = new OutputColsHelper(\n            tableSchema, \"res\",\n            TypeInformation.of(String.class)\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n\n        expectSchema = new TableSchema(\n            new String[]{\"f0\", \"res\"},\n            new TypeInformation[]{\n                TypeInformation.of(String.class),\n                TypeInformation.of(String.class)\n            }\n        );\n        helper = new OutputColsHelper(\n            tableSchema, \"res\",\n            TypeInformation.of(String.class),\n            reservedColNames\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n\n        expectSchema = new TableSchema(\n            new String[]{\"f0\", \"res1\", \"res2\"},\n            new TypeInformation[]{\n                TypeInformation.of(String.class),\n                TypeInformation.of(String.class),\n                TypeInformation.of(Integer.class)\n            }\n        );\n        helper = new OutputColsHelper(\n            tableSchema,\n            new String[]{\"res1\", \"res2\"},\n            new TypeInformation[]{\n                TypeInformation.of(String.class),\n                TypeInformation.of(Integer.class)},\n            reservedColNames\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n\n        expectSchema = new TableSchema(\n            new String[]{\"f0\", \"f1\", \"f2\", \"res\"},\n            new TypeInformation[]{\n                TypeInformation.of(String.class),\n                TypeInformation.of(Long.class),\n                TypeInformation.of(Integer.class),\n                TypeInformation.of(String.class)\n            }\n        );\n        helper = new OutputColsHelper(\n            tableSchema, \"res\",\n            TypeInformation.of(String.class)\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n\n        expectSchema = new TableSchema(\n            new String[]{\"f0\", \"f1\", \"f2\"},\n            new TypeInformation[]{\n                TypeInformation.of(Integer.class),\n                TypeInformation.of(Long.class),\n                TypeInformation.of(Integer.class)\n            }\n        );\n        helper = new OutputColsHelper(\n            tableSchema, \"f0\",\n            TypeInformation.of(Integer.class)\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n\n        expectSchema = new TableSchema(\n            new String[]{\"f0\", \"f1\", \"f2\"},\n            new TypeInformation[]{\n                TypeInformation.of(Integer.class),\n                TypeInformation.of(Long.class),\n                TypeInformation.of(String.class)\n            }\n        );\n        helper = new OutputColsHelper(\n            tableSchema, new String[]{\"f0\", \"f2\"},\n            new TypeInformation[]{\n                TypeInformation.of(Integer.class),\n                TypeInformation.of(String.class)\n            }\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n\n        expectSchema = new TableSchema(\n            new String[]{\"f0\", \"res\"},\n            new TypeInformation[]{\n                TypeInformation.of(String.class),\n                TypeInformation.of(Integer.class)\n            }\n        );\n        helper = new OutputColsHelper(\n            tableSchema, new String[]{\"res\", \"f0\"},\n            new TypeInformation[]{\n                TypeInformation.of(Integer.class),\n                TypeInformation.of(String.class)\n            },\n            reservedColNames\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n\n        expectSchema = new TableSchema(\n            new String[]{\"f0\", \"f1\", \"res\"},\n            new TypeInformation[]{\n                TypeInformation.of(String.class),\n                TypeInformation.of(Long.class),\n                TypeInformation.of(Integer.class)\n            }\n        );\n        helper = new OutputColsHelper(\n            tableSchema, new String[]{\"res\"},\n            new TypeInformation[]{\n                TypeInformation.of(Integer.class),\n                TypeInformation.of(String.class)},\n            new String[]{\"f1\", \"f0\"}\n        );\n        Assert.assertEquals(helper.getResultSchema(), expectSchema);\n    }", "signature": "void testResultSchema()", "full_signature": "@Test public void testResultSchema()", "class_method_signature": "OutputColsHelperTest.testResultSchema()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "assertEquals", "getResultSchema", "of", "of", "of", "assertEquals", "getResultSchema", "of", "of", "of", "of", "of", "assertEquals", "getResultSchema", "of", "of", "of", "of", "of", "assertEquals", "getResultSchema", "of", "of", "of", "of", "assertEquals", "getResultSchema", "of", "of", "of", "of", "of", "assertEquals", "getResultSchema", "of", "of", "of", "of", "assertEquals", "getResultSchema", "of", "of", "of", "of", "of", "assertEquals", "getResultSchema"]}, "focal_class": {"identifier": "OutputColsHelper", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private String[] inputColNames;", "modifier": "private", "type": "String[]", "declarator": "inputColNames", "var_name": "inputColNames"}, {"original_string": "private TypeInformation[] inputColTypes;", "modifier": "private", "type": "TypeInformation[]", "declarator": "inputColTypes", "var_name": "inputColTypes"}, {"original_string": "private String[] outputColNames;", "modifier": "private", "type": "String[]", "declarator": "outputColNames", "var_name": "outputColNames"}, {"original_string": "private TypeInformation[] outputColTypes;", "modifier": "private", "type": "TypeInformation[]", "declarator": "outputColTypes", "var_name": "outputColTypes"}, {"original_string": "private int[] reservedCols;", "modifier": "private", "type": "int[]", "declarator": "reservedCols", "var_name": "reservedCols"}, {"original_string": "private int[] reservedColsPosInResult;", "modifier": "private", "type": "int[]", "declarator": "reservedColsPosInResult", "var_name": "reservedColsPosInResult"}, {"original_string": "private int[] outputColsPosInResult;", "modifier": "private", "type": "int[]", "declarator": "outputColsPosInResult", "var_name": "outputColsPosInResult"}], "methods": [{"identifier": "OutputColsHelper", "parameters": "(TableSchema inputSchema, String outputColName, TypeInformation outputColType)", "modifiers": "public", "return": "", "signature": " OutputColsHelper(TableSchema inputSchema, String outputColName, TypeInformation outputColType)", "full_signature": "public  OutputColsHelper(TableSchema inputSchema, String outputColName, TypeInformation outputColType)", "class_method_signature": "OutputColsHelper.OutputColsHelper(TableSchema inputSchema, String outputColName, TypeInformation outputColType)", "testcase": false, "constructor": true}, {"identifier": "OutputColsHelper", "parameters": "(TableSchema inputSchema, String outputColName, TypeInformation outputColType,\n                            String[] reservedColNames)", "modifiers": "public", "return": "", "signature": " OutputColsHelper(TableSchema inputSchema, String outputColName, TypeInformation outputColType,\n                            String[] reservedColNames)", "full_signature": "public  OutputColsHelper(TableSchema inputSchema, String outputColName, TypeInformation outputColType,\n                            String[] reservedColNames)", "class_method_signature": "OutputColsHelper.OutputColsHelper(TableSchema inputSchema, String outputColName, TypeInformation outputColType,\n                            String[] reservedColNames)", "testcase": false, "constructor": true}, {"identifier": "OutputColsHelper", "parameters": "(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes)", "modifiers": "public", "return": "", "signature": " OutputColsHelper(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes)", "full_signature": "public  OutputColsHelper(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes)", "class_method_signature": "OutputColsHelper.OutputColsHelper(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes)", "testcase": false, "constructor": true}, {"identifier": "OutputColsHelper", "parameters": "(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes,\n                            String[] reservedColNames)", "modifiers": "public", "return": "", "signature": " OutputColsHelper(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes,\n                            String[] reservedColNames)", "full_signature": "public  OutputColsHelper(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes,\n                            String[] reservedColNames)", "class_method_signature": "OutputColsHelper.OutputColsHelper(TableSchema inputSchema, String[] outputColNames, TypeInformation[] outputColTypes,\n                            String[] reservedColNames)", "testcase": false, "constructor": true}, {"identifier": "getReservedColumns", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getReservedColumns()", "full_signature": "public String[] getReservedColumns()", "class_method_signature": "OutputColsHelper.getReservedColumns()", "testcase": false, "constructor": false}, {"identifier": "getResultSchema", "parameters": "()", "modifiers": "public", "return": "TableSchema", "signature": "TableSchema getResultSchema()", "full_signature": "public TableSchema getResultSchema()", "class_method_signature": "OutputColsHelper.getResultSchema()", "testcase": false, "constructor": false}, {"identifier": "getResultRow", "parameters": "(Row input, Row output)", "modifiers": "public", "return": "Row", "signature": "Row getResultRow(Row input, Row output)", "full_signature": "public Row getResultRow(Row input, Row output)", "class_method_signature": "OutputColsHelper.getResultRow(Row input, Row output)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/utils/OutputColsHelper.java"}, "focal_method": {"identifier": "getResultSchema", "parameters": "()", "modifiers": "public", "return": "TableSchema", "body": "public TableSchema getResultSchema() {\n        int resultLength = reservedCols.length + outputColNames.length;\n        String[] resultColNames = new String[resultLength];\n        TypeInformation[] resultColTypes = new TypeInformation[resultLength];\n        for (int i = 0; i < reservedCols.length; i++) {\n            resultColNames[reservedColsPosInResult[i]] = inputColNames[reservedCols[i]];\n            resultColTypes[reservedColsPosInResult[i]] = inputColTypes[reservedCols[i]];\n        }\n        for (int i = 0; i < outputColsPosInResult.length; i++) {\n            resultColNames[outputColsPosInResult[i]] = outputColNames[i];\n            resultColTypes[outputColsPosInResult[i]] = outputColTypes[i];\n        }\n        return new TableSchema(resultColNames, resultColTypes);\n    }", "signature": "TableSchema getResultSchema()", "full_signature": "public TableSchema getResultSchema()", "class_method_signature": "OutputColsHelper.getResultSchema()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}