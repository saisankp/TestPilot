{"test_class": {"identifier": "PredicateMoverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private Mover mover;", "modifier": "private", "type": "Mover", "declarator": "mover", "var_name": "mover"}], "file": "src/edu/lclark/orego/move/PredicateMoverTest.java"}, "test_case": {"identifier": "testSelectAndPlayOneMove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSelectAndPlayOneMove() {\n\t\tString[] diagram = {\n\t\t\t\t\".###.\",\n\t\t\t\t\"#####\",\n\t\t\t\t\"#O.O#\",\n\t\t\t\t\"OOOOO\",\n\t\t\t\t\"O...O\",\n\t\t};\n\t\tint[] counts = new int[coords.getFirstPointBeyondBoard()];\n\t\tMersenneTwisterFast random = new MersenneTwisterFast();\n\t\tint trials = 1000;\n\t\tfor (int i = 0; i < trials; i++) {\n\t\t\tboard.setUpProblem(diagram, BLACK);\n\t\t\tcounts[mover.selectAndPlayOneMove(random, true)]++;\n\t\t}\n\t\tassertEquals(trials/4.0, counts[at(\"b1\")], trials/20.0);\n\t\tassertEquals(trials/4.0, counts[at(\"c1\")], trials/20.0);\n\t\tassertEquals(trials/4.0, counts[at(\"c3\")], trials/20.0);\n\t\tassertEquals(trials/4.0, counts[at(\"d1\")], trials/20.0);\n\t}", "signature": "void testSelectAndPlayOneMove()", "full_signature": "@Test public void testSelectAndPlayOneMove()", "class_method_signature": "PredicateMoverTest.testSelectAndPlayOneMove()", "testcase": true, "constructor": false, "invocations": ["getFirstPointBeyondBoard", "setUpProblem", "selectAndPlayOneMove", "assertEquals", "at", "assertEquals", "at", "assertEquals", "at", "assertEquals", "at"]}, "focal_class": {"identifier": "PredicateMover", "superclass": "", "interfaces": "implements Mover", "fields": [{"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final ShortList candidates;", "modifier": "private final", "type": "ShortList", "declarator": "candidates", "var_name": "candidates"}, {"original_string": "private final Predicate filter;", "modifier": "private final", "type": "Predicate", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "PredicateMover", "parameters": "(Board board, Predicate filter)", "modifiers": "public", "return": "", "signature": " PredicateMover(Board board, Predicate filter)", "full_signature": "public  PredicateMover(Board board, Predicate filter)", "class_method_signature": "PredicateMover.PredicateMover(Board board, Predicate filter)", "testcase": false, "constructor": true}, {"identifier": "selectAndPlayOneMove", "parameters": "(MersenneTwisterFast random, boolean fast)", "modifiers": "@Override public", "return": "short", "signature": "short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "full_signature": "@Override public short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "class_method_signature": "PredicateMover.selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/move/PredicateMover.java"}, "focal_method": {"identifier": "selectAndPlayOneMove", "parameters": "(MersenneTwisterFast random, boolean fast)", "modifiers": "@Override public", "return": "short", "body": "@Override\n\tpublic short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast) {\n\t\tcandidates.clear();\n\t\tcandidates.addAll(board.getVacantPoints());\n\t\twhile (candidates.size() > 0) {\n\t\t\tfinal short p = candidates.removeRandom(random);\n\t\t\tif (board.getColorAt(p) == VACANT && filter.at(p)) {\n\t\t\t\tLegality legality = fast ? board.playFast(p) : board.play(p);\n\t\t\t\tif (legality == OK) {\n\t\t\t\t\treturn p;\n\t\t\t\t}\n\t\t\t}\t\n\t\t} \n\t\tboard.pass();\n\t\treturn PASS;\n\t}", "signature": "short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "full_signature": "@Override public short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "class_method_signature": "PredicateMover.selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "testcase": false, "constructor": false, "invocations": ["clear", "addAll", "getVacantPoints", "size", "removeRandom", "getColorAt", "at", "playFast", "play", "pass"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}