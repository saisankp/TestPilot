{"test_class": {"identifier": "FilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "framework/db/src/test/java/com/cloud/utils/db/FilterTest.java"}, "test_case": {"identifier": "testAddOrderBy", "parameters": "()", "modifiers": "@Test /* * This test verifies that the Order By clause generated by the filter is correct and it separates each * order by field with a comma. Using DbTestVO to assert it */ public", "return": "void", "body": "@Test\n    /*\n    *  This test verifies that the Order By clause generated by the filter is correct and it separates each\n    *  order by field with a comma. Using DbTestVO to assert it\n    */\n    public void testAddOrderBy() {\n        Filter filter = new Filter(DbTestVO.class, \"fieldString\", true, 1L, 1L);\n\n        Assert.assertTrue(filter.getOrderBy().trim().toLowerCase().equals(\"order by test.fld_string asc\"));\n\n        filter.addOrderBy(DbTestVO.class, \"fieldLong\", true);\n\n        Assert.assertTrue(filter.getOrderBy().contains(\",\"));\n        Assert.assertTrue(filter.getOrderBy().split(\",\")[1].trim().toLowerCase().equals(\"test.fld_long asc\"));\n\n        filter.addOrderBy(DbTestVO.class, \"fieldInt\", true);\n\n        Assert.assertTrue(filter.getOrderBy().split(\",\").length == 3);\n        Assert.assertTrue(filter.getOrderBy().split(\",\")[2].trim().toLowerCase().equals(\"test.fld_int asc\"));\n    }", "signature": "void testAddOrderBy()", "full_signature": "@Test /* * This test verifies that the Order By clause generated by the filter is correct and it separates each * order by field with a comma. Using DbTestVO to assert it */ public void testAddOrderBy()", "class_method_signature": "FilterTest.testAddOrderBy()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "toLowerCase", "trim", "getOrderBy", "addOrderBy", "assertTrue", "contains", "getOrderBy", "assertTrue", "equals", "toLowerCase", "trim", "split", "getOrderBy", "addOrderBy", "assertTrue", "split", "getOrderBy", "assertTrue", "equals", "toLowerCase", "trim", "split", "getOrderBy"]}, "focal_class": {"identifier": "Filter", "superclass": "", "interfaces": "", "fields": [{"original_string": "Long _offset;", "modifier": "", "type": "Long", "declarator": "_offset", "var_name": "_offset"}, {"original_string": "Long _limit;", "modifier": "", "type": "Long", "declarator": "_limit", "var_name": "_limit"}, {"original_string": "String _orderBy;", "modifier": "", "type": "String", "declarator": "_orderBy", "var_name": "_orderBy"}], "methods": [{"identifier": "Filter", "parameters": "(Class<?> clazz, String field, boolean ascending, Long offset, Long limit)", "modifiers": "public", "return": "", "signature": " Filter(Class<?> clazz, String field, boolean ascending, Long offset, Long limit)", "full_signature": "public  Filter(Class<?> clazz, String field, boolean ascending, Long offset, Long limit)", "class_method_signature": "Filter.Filter(Class<?> clazz, String field, boolean ascending, Long offset, Long limit)", "testcase": false, "constructor": true}, {"identifier": "Filter", "parameters": "(long limit)", "modifiers": "public", "return": "", "signature": " Filter(long limit)", "full_signature": "public  Filter(long limit)", "class_method_signature": "Filter.Filter(long limit)", "testcase": false, "constructor": true}, {"identifier": "Filter", "parameters": "(Filter that)", "modifiers": "public", "return": "", "signature": " Filter(Filter that)", "full_signature": "public  Filter(Filter that)", "class_method_signature": "Filter.Filter(Filter that)", "testcase": false, "constructor": true}, {"identifier": "addOrderBy", "parameters": "(Class<?> clazz, String field, boolean ascending)", "modifiers": "public", "return": "void", "signature": "void addOrderBy(Class<?> clazz, String field, boolean ascending)", "full_signature": "public void addOrderBy(Class<?> clazz, String field, boolean ascending)", "class_method_signature": "Filter.addOrderBy(Class<?> clazz, String field, boolean ascending)", "testcase": false, "constructor": false}, {"identifier": "getOrderBy", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOrderBy()", "full_signature": "public String getOrderBy()", "class_method_signature": "Filter.getOrderBy()", "testcase": false, "constructor": false}, {"identifier": "setOffset", "parameters": "(Long offset)", "modifiers": "public", "return": "void", "signature": "void setOffset(Long offset)", "full_signature": "public void setOffset(Long offset)", "class_method_signature": "Filter.setOffset(Long offset)", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getOffset()", "full_signature": "public Long getOffset()", "class_method_signature": "Filter.getOffset()", "testcase": false, "constructor": false}, {"identifier": "getLimit", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getLimit()", "full_signature": "public Long getLimit()", "class_method_signature": "Filter.getLimit()", "testcase": false, "constructor": false}, {"identifier": "setLimit", "parameters": "(Long limit)", "modifiers": "public", "return": "void", "signature": "void setLimit(Long limit)", "full_signature": "public void setLimit(Long limit)", "class_method_signature": "Filter.setLimit(Long limit)", "testcase": false, "constructor": false}], "file": "framework/db/src/main/java/com/cloud/utils/db/Filter.java"}, "focal_method": {"identifier": "addOrderBy", "parameters": "(Class<?> clazz, String field, boolean ascending)", "modifiers": "public", "return": "void", "body": "public void addOrderBy(Class<?> clazz, String field, boolean ascending) {\n        if (field == null) {\n            return;\n        }\n        Field f;\n        Pair<Class<?>, Field> pair = ReflectUtil.getAnyField(clazz, field);\n        assert (pair != null) : \"Can't find field \" + field + \" in \" + clazz.getName();\n        clazz = pair.first();\n        f = pair.second();\n\n        Column column = f.getAnnotation(Column.class);\n        String name = column != null ? column.name() : field;\n\n        StringBuilder order = new StringBuilder();\n        if (column == null || column.table() == null || column.table().length() == 0) {\n            order.append(DbUtil.getTableName(clazz));\n        } else {\n            order.append(column.table());\n        }\n        order.append(\".\").append(name).append(ascending ? \" ASC \" : \" DESC \");\n\n        if (_orderBy == null) {\n            _orderBy = order.insert(0, \" ORDER BY \").toString();\n        } else {\n            _orderBy = order.insert(0, _orderBy + \", \").toString();\n        }\n    }", "signature": "void addOrderBy(Class<?> clazz, String field, boolean ascending)", "full_signature": "public void addOrderBy(Class<?> clazz, String field, boolean ascending)", "class_method_signature": "Filter.addOrderBy(Class<?> clazz, String field, boolean ascending)", "testcase": false, "constructor": false, "invocations": ["getAnyField", "getName", "first", "second", "getAnnotation", "name", "table", "length", "table", "append", "getTableName", "append", "table", "append", "append", "append", "toString", "insert", "toString", "insert"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}