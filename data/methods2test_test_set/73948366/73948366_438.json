{"test_class": {"identifier": "InstanceUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "libs/java/instance_provider/src/test/java/com/yahoo/athenz/instance/provider/impl/InstanceUtilsTest.java"}, "test_case": {"identifier": "testValidateCertRequestHostnamesNullHostnames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateCertRequestHostnamesNullHostnames() {\n        HashMap<String, String> attributes = new HashMap<>();\n        StringBuilder id = new StringBuilder(256);\n        assertFalse(InstanceUtils.validateCertRequestSanDnsNames(attributes, \"athenz\", \"api\", \"athenz.cloud\", id));\n    }", "signature": "void testValidateCertRequestHostnamesNullHostnames()", "full_signature": "@Test public void testValidateCertRequestHostnamesNullHostnames()", "class_method_signature": "InstanceUtilsTest.testValidateCertRequestHostnamesNullHostnames()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "validateCertRequestSanDnsNames"]}, "focal_class": {"identifier": "InstanceUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(InstanceUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(InstanceUtils.class)", "var_name": "LOGGER"}, {"original_string": "static final String ZTS_CERT_INSTANCE_ID        = \".instanceid.athenz.\";", "modifier": "static final", "type": "String", "declarator": "ZTS_CERT_INSTANCE_ID        = \".instanceid.athenz.\"", "var_name": "ZTS_CERT_INSTANCE_ID"}, {"original_string": "static final String ZTS_CERT_INSTANCE_ID_URI    = \"athenz://instanceid/\";", "modifier": "static final", "type": "String", "declarator": "ZTS_CERT_INSTANCE_ID_URI    = \"athenz://instanceid/\"", "var_name": "ZTS_CERT_INSTANCE_ID_URI"}], "methods": [{"identifier": "getInstanceProperty", "parameters": "(final Map<String, String> attributes,\n            final String propertyName)", "modifiers": "public static", "return": "String", "signature": "String getInstanceProperty(final Map<String, String> attributes,\n            final String propertyName)", "full_signature": "public static String getInstanceProperty(final Map<String, String> attributes,\n            final String propertyName)", "class_method_signature": "InstanceUtils.getInstanceProperty(final Map<String, String> attributes,\n            final String propertyName)", "testcase": false, "constructor": false}, {"identifier": "validateCertRequestSanDnsNames", "parameters": "(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateCertRequestSanDnsNames(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "full_signature": "public static boolean validateCertRequestSanDnsNames(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "class_method_signature": "InstanceUtils.validateCertRequestSanDnsNames(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "testcase": false, "constructor": false}, {"identifier": "validateCertRequestUriId", "parameters": "(final Map<String, String> attributes,\n            StringBuilder instanceId)", "modifiers": "public static", "return": "boolean", "signature": "boolean validateCertRequestUriId(final Map<String, String> attributes,\n            StringBuilder instanceId)", "full_signature": "public static boolean validateCertRequestUriId(final Map<String, String> attributes,\n            StringBuilder instanceId)", "class_method_signature": "InstanceUtils.validateCertRequestUriId(final Map<String, String> attributes,\n            StringBuilder instanceId)", "testcase": false, "constructor": false}], "file": "libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/impl/InstanceUtils.java"}, "focal_method": {"identifier": "validateCertRequestSanDnsNames", "parameters": "(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "modifiers": "public static", "return": "boolean", "body": "public static boolean validateCertRequestSanDnsNames(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId) {\n\n        // make sure we have valid dns suffix specified\n\n        if (dnsSuffix == null || dnsSuffix.isEmpty()) {\n            LOGGER.error(\"No AWS DNS suffix specified for validation\");\n            return false;\n        }\n\n        // first check to see if we're given any san dns names to validate\n        // if the list is empty then something is not right thus we'll\n        // reject the request\n\n        final String hostnames = InstanceUtils.getInstanceProperty(attributes, InstanceProvider.ZTS_INSTANCE_SAN_DNS);\n        if (hostnames == null || hostnames.isEmpty()) {\n            LOGGER.error(\"Request contains no SAN DNS entries for validation\");\n            return false;\n        }\n\n        // generate the expected hostname for check\n\n        final String hostNameCheck = service + \".\" + domain.replace('.', '-') + \".\" + dnsSuffix;\n\n        // validate the entries\n\n        boolean hostCheck = false;\n        boolean instanceIdCheck = false;\n\n        String[] hosts = hostnames.split(\",\");\n\n        // we only allow up to two hostnames in our AWS CSR:\n        // service.<domain-with-dashes>.<dns-suffix>\n        // <instance-id>.instanceid.athenz.<dns-suffix>\n        // instance id can be specified as URI\n\n        if (hosts.length > 2) {\n            LOGGER.error(\"Request does not contain expected number of SAN DNS entries: {}\",\n                    hosts.length);\n            return false;\n        }\n\n        for (String host : hosts) {\n\n            int idx = host.indexOf(ZTS_CERT_INSTANCE_ID);\n            if (idx != -1) {\n                instanceId.append(host, 0, idx);\n                if (!dnsSuffix.equals(host.substring(idx + ZTS_CERT_INSTANCE_ID.length()))) {\n                    LOGGER.error(\"Host: {} does not have expected instance id format\", host);\n                    return false;\n                }\n\n                instanceIdCheck = true;\n            } else {\n                if (!hostNameCheck.equals(host)) {\n                    LOGGER.error(\"Unable to verify SAN DNS entry: {}\", host);\n                    return false;\n                }\n                hostCheck = true;\n            }\n        }\n\n        // if we have no host entry that it's a failure\n\n        if (!hostCheck) {\n            LOGGER.error(\"Request does not contain expected host SAN DNS entry\");\n            return false;\n        }\n\n        // if there is no instance id field in dnsName check to\n        // see if it was passed in the uri as expected\n\n        if (!instanceIdCheck && !validateCertRequestUriId(attributes, instanceId)) {\n            LOGGER.error(\"Request does not contain expected instance id entry\");\n            return false;\n        }\n\n        return true;\n    }", "signature": "boolean validateCertRequestSanDnsNames(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "full_signature": "public static boolean validateCertRequestSanDnsNames(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "class_method_signature": "InstanceUtils.validateCertRequestSanDnsNames(final Map<String, String> attributes,\n                                                         final String domain, final String service, final String dnsSuffix,\n                                                         StringBuilder instanceId)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "error", "getInstanceProperty", "isEmpty", "error", "replace", "split", "error", "indexOf", "append", "equals", "substring", "length", "error", "equals", "error", "error", "validateCertRequestUriId", "error"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}