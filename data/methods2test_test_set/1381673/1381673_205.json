{"test_class": {"identifier": "SnippetBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-templates/src/test/java/org/drools/template/model/SnippetBuilderTest.java"}, "test_case": {"identifier": "testMultiPlaceHolderSingle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiPlaceHolderSingle() {\n        final String snippet = \"something.getAnother($1).equals($1);\";\n        final SnippetBuilder snip = new SnippetBuilder(snippet);\n        final String result = snip.build(\"x\");\n        assertEquals(\"something.getAnother(x).equals(x);\",\n                     result);\n\n    }", "signature": "void testMultiPlaceHolderSingle()", "full_signature": "@Test public void testMultiPlaceHolderSingle()", "class_method_signature": "SnippetBuilderTest.testMultiPlaceHolderSingle()", "testcase": true, "constructor": false, "invocations": ["build", "assertEquals"]}, "focal_class": {"identifier": "SnippetBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PARAM_PREFIX = \"$\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_PREFIX = \"$\"", "var_name": "PARAM_PREFIX"}, {"original_string": "public static final String PARAM_SUFFIX = \"param\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_SUFFIX = \"param\"", "var_name": "PARAM_SUFFIX"}, {"original_string": "public static final String PARAM_STRING = PARAM_PREFIX + PARAM_SUFFIX;", "modifier": "public static final", "type": "String", "declarator": "PARAM_STRING = PARAM_PREFIX + PARAM_SUFFIX", "var_name": "PARAM_STRING"}, {"original_string": "public static final String PARAM_FORALL_STRING = \"forall\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_FORALL_STRING = \"forall\"", "var_name": "PARAM_FORALL_STRING"}, {"original_string": "public static final Pattern PARAM_FORALL_PATTERN = Pattern\n            .compile( PARAM_FORALL_STRING + \"\\\\(([^{}]*)\\\\)\\\\{([^{}]+)\\\\}\" );", "modifier": "public static final", "type": "Pattern", "declarator": "PARAM_FORALL_PATTERN = Pattern\n            .compile( PARAM_FORALL_STRING + \"\\\\(([^{}]*)\\\\)\\\\{([^{}]+)\\\\}\" )", "var_name": "PARAM_FORALL_PATTERN"}, {"original_string": "private final String _template;", "modifier": "private final", "type": "String", "declarator": "_template", "var_name": "_template"}, {"original_string": "private final SnippetType type;", "modifier": "private final", "type": "SnippetType", "declarator": "type", "var_name": "type"}, {"original_string": "private final boolean trim;", "modifier": "private final", "type": "boolean", "declarator": "trim", "var_name": "trim"}], "methods": [{"identifier": "SnippetBuilder", "parameters": "( String snippetTemplate )", "modifiers": "public", "return": "", "signature": " SnippetBuilder( String snippetTemplate )", "full_signature": "public  SnippetBuilder( String snippetTemplate )", "class_method_signature": "SnippetBuilder.SnippetBuilder( String snippetTemplate )", "testcase": false, "constructor": true}, {"identifier": "SnippetBuilder", "parameters": "( String snippetTemplate, boolean trim )", "modifiers": "public", "return": "", "signature": " SnippetBuilder( String snippetTemplate, boolean trim )", "full_signature": "public  SnippetBuilder( String snippetTemplate, boolean trim )", "class_method_signature": "SnippetBuilder.SnippetBuilder( String snippetTemplate, boolean trim )", "testcase": false, "constructor": true}, {"identifier": "getType", "parameters": "( String template )", "modifiers": "public static", "return": "SnippetType", "signature": "SnippetType getType( String template )", "full_signature": "public static SnippetType getType( String template )", "class_method_signature": "SnippetBuilder.getType( String template )", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "( final String cellValue )", "modifiers": "public", "return": "String", "signature": "String build( final String cellValue )", "full_signature": "public String build( final String cellValue )", "class_method_signature": "SnippetBuilder.build( final String cellValue )", "testcase": false, "constructor": false}, {"identifier": "buildForAll", "parameters": "( final String cellValue )", "modifiers": "private", "return": "String", "signature": "String buildForAll( final String cellValue )", "full_signature": "private String buildForAll( final String cellValue )", "class_method_signature": "SnippetBuilder.buildForAll( final String cellValue )", "testcase": false, "constructor": false}, {"identifier": "buildMulti", "parameters": "( final String cellValue )", "modifiers": "private", "return": "String", "signature": "String buildMulti( final String cellValue )", "full_signature": "private String buildMulti( final String cellValue )", "class_method_signature": "SnippetBuilder.buildMulti( final String cellValue )", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "( String input )", "modifiers": "private", "return": "String[]", "signature": "String[] split( String input )", "full_signature": "private String[] split( String input )", "class_method_signature": "SnippetBuilder.split( String input )", "testcase": false, "constructor": false}, {"identifier": "buildSingle", "parameters": "( final String cellValue )", "modifiers": "private", "return": "String", "signature": "String buildSingle( final String cellValue )", "full_signature": "private String buildSingle( final String cellValue )", "class_method_signature": "SnippetBuilder.buildSingle( final String cellValue )", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "( final String text,\n                            final String repl,\n                            final String with,\n                            int max )", "modifiers": "private", "return": "String", "signature": "String replace( final String text,\n                            final String repl,\n                            final String with,\n                            int max )", "full_signature": "private String replace( final String text,\n                            final String repl,\n                            final String with,\n                            int max )", "class_method_signature": "SnippetBuilder.replace( final String text,\n                            final String repl,\n                            final String with,\n                            int max )", "testcase": false, "constructor": false}], "file": "drools-templates/src/main/java/org/drools/template/model/SnippetBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "( final String cellValue )", "modifiers": "public", "return": "String", "body": "public String build( final String cellValue ) {\n        switch ( type ) {\n            case FORALL:\n                return buildForAll( cellValue );\n            case INDEXED:\n                return buildMulti( cellValue );\n            default:\n                return buildSingle( cellValue );\n        }\n    }", "signature": "String build( final String cellValue )", "full_signature": "public String build( final String cellValue )", "class_method_signature": "SnippetBuilder.build( final String cellValue )", "testcase": false, "constructor": false, "invocations": ["buildForAll", "buildMulti", "buildSingle"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}