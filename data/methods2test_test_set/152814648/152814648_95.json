{"test_class": {"identifier": "ForensicsModelTest", "superclass": "extends AbstractDetailsModelTest", "interfaces": "", "fields": [{"original_string": "private static final String FILE_NAME = \"/path/to/file-1\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"/path/to/file-1\"", "var_name": "FILE_NAME"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/model/ForensicsModelTest.java"}, "test_case": {"identifier": "shouldShowIssueWithForensics", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldShowIssueWithForensics() {\n        Report report = new Report();\n        Issue issue = createIssue(1);\n        report.add(issue);\n\n        RepositoryStatistics statistics = mock(RepositoryStatistics.class);\n\n        FileStatistics fileStatistics = mock(FileStatistics.class);\n        when(fileStatistics.getNumberOfAuthors()).thenReturn(15);\n        when(fileStatistics.getNumberOfCommits()).thenReturn(20);\n        when(fileStatistics.getLastModificationTime()).thenReturn(25);\n        when(fileStatistics.getCreationTime()).thenReturn(30);\n\n        when(statistics.get(FILE_NAME)).thenReturn(fileStatistics);\n        when(statistics.contains(FILE_NAME)).thenReturn(true);\n\n        ForensicsModel model = createModel(report, statistics);\n\n        ForensicsRow actualRow = model.getRow(issue);\n        assertThat(actualRow).hasDescription(EXPECTED_DESCRIPTION)\n                .hasAge(\"1\")\n                .hasAuthorsSize(\"15\")\n                .hasCommitsSize(\"20\")\n                .hasModifiedAt(25)\n                .hasAddedAt(30);\n\n        assertThatDetailedColumnContains(actualRow.getFileName(),\n                createExpectedFileName(issue), \"/path/to/file-1:0000015\");\n    }", "signature": "void shouldShowIssueWithForensics()", "full_signature": "@Test void shouldShowIssueWithForensics()", "class_method_signature": "ForensicsModelTest.shouldShowIssueWithForensics()", "testcase": true, "constructor": false, "invocations": ["createIssue", "add", "mock", "mock", "thenReturn", "when", "getNumberOfAuthors", "thenReturn", "when", "getNumberOfCommits", "thenReturn", "when", "getLastModificationTime", "thenReturn", "when", "getCreationTime", "thenReturn", "when", "get", "thenReturn", "when", "contains", "createModel", "getRow", "hasAddedAt", "hasModifiedAt", "hasCommitsSize", "hasAuthorsSize", "hasAge", "hasDescription", "assertThat", "assertThatDetailedColumnContains", "getFileName", "createExpectedFileName"]}, "focal_class": {"identifier": "ForensicsModel", "superclass": "extends DetailsTableModel", "interfaces": "", "fields": [{"original_string": "static final String UNDEFINED = \"-\";", "modifier": "static final", "type": "String", "declarator": "UNDEFINED = \"-\"", "var_name": "UNDEFINED"}, {"original_string": "private final RepositoryStatistics statistics;", "modifier": "private final", "type": "RepositoryStatistics", "declarator": "statistics", "var_name": "statistics"}], "methods": [{"identifier": "ForensicsModel", "parameters": "(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider)", "modifiers": "", "return": "", "signature": " ForensicsModel(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider)", "full_signature": "  ForensicsModel(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider)", "class_method_signature": "ForensicsModel.ForensicsModel(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider)", "testcase": false, "constructor": true}, {"identifier": "ForensicsModel", "parameters": "(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider, final JenkinsFacade jenkinsFacade)", "modifiers": "@VisibleForTesting", "return": "", "signature": " ForensicsModel(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider, final JenkinsFacade jenkinsFacade)", "full_signature": "@VisibleForTesting  ForensicsModel(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider, final JenkinsFacade jenkinsFacade)", "class_method_signature": "ForensicsModel.ForensicsModel(final Report report, final RepositoryStatistics statistics,\n            final FileNameRenderer fileNameRenderer, final AgeBuilder ageBuilder,\n            final DescriptionProvider labelProvider, final JenkinsFacade jenkinsFacade)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getId()", "full_signature": "@Override public String getId()", "class_method_signature": "ForensicsModel.getId()", "testcase": false, "constructor": false}, {"identifier": "getColumns", "parameters": "()", "modifiers": "@Override public", "return": "List<TableColumn>", "signature": "List<TableColumn> getColumns()", "full_signature": "@Override public List<TableColumn> getColumns()", "class_method_signature": "ForensicsModel.getColumns()", "testcase": false, "constructor": false}, {"identifier": "getRow", "parameters": "(final Issue issue)", "modifiers": "@Override public", "return": "ForensicsRow", "signature": "ForensicsRow getRow(final Issue issue)", "full_signature": "@Override public ForensicsRow getRow(final Issue issue)", "class_method_signature": "ForensicsModel.getRow(final Issue issue)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/model/ForensicsModel.java"}, "focal_method": {"identifier": "getRow", "parameters": "(final Issue issue)", "modifiers": "@Override public", "return": "ForensicsRow", "body": "@Override\n    public ForensicsRow getRow(final Issue issue) {\n        ForensicsRow row = new ForensicsRow(getAgeBuilder(), getFileNameRenderer(), getDescriptionProvider(),\n                issue, getJenkinsFacade());\n        if (statistics.contains(issue.getFileName())) {\n            FileStatistics result = statistics.get(issue.getFileName());\n            row.setAuthorsSize(String.valueOf(result.getNumberOfAuthors()));\n            row.setCommitsSize(String.valueOf(result.getNumberOfCommits()));\n            row.setModifiedAt(result.getLastModificationTime());\n            row.setAddedAt(result.getCreationTime());\n        }\n        else {\n            row.setAuthorsSize(UNDEFINED);\n            row.setCommitsSize(UNDEFINED);\n            row.setModifiedAt(0);\n            row.setAddedAt(0);\n        }\n        return row;\n    }", "signature": "ForensicsRow getRow(final Issue issue)", "full_signature": "@Override public ForensicsRow getRow(final Issue issue)", "class_method_signature": "ForensicsModel.getRow(final Issue issue)", "testcase": false, "constructor": false, "invocations": ["getAgeBuilder", "getFileNameRenderer", "getDescriptionProvider", "getJenkinsFacade", "contains", "getFileName", "get", "getFileName", "setAuthorsSize", "valueOf", "getNumberOfAuthors", "setCommitsSize", "valueOf", "getNumberOfCommits", "setModifiedAt", "getLastModificationTime", "setAddedAt", "getCreationTime", "setAuthorsSize", "setCommitsSize", "setModifiedAt", "setAddedAt"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}