{"test_class": {"identifier": "DivideThousandTest", "superclass": "", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/access/strategy/DivideThousandTest.java"}, "test_case": {"identifier": "find", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void find() {\n        AccessStrategy strategy = new DivideThousand();\n        String where = strategy.find(1234567890);\n        assertEquals(\"1\\\\1234\\\\1234567\\\\1234567890\".replace(\"\\\\\", File.separator), where);\n\n        where = strategy.find(123456789);\n        assertEquals(\"123\\\\123456\\\\123456789\".replace(\"\\\\\", File.separator), where);\n    }", "signature": "void find()", "full_signature": "@Test public void find()", "class_method_signature": "DivideThousandTest.find()", "testcase": true, "constructor": false, "invocations": ["find", "assertEquals", "replace", "find", "assertEquals", "replace"]}, "focal_class": {"identifier": "DivideThousand", "superclass": "", "interfaces": "implements AccessStrategy", "fields": [{"original_string": "private static final int BASE = 1000;", "modifier": "private static final", "type": "int", "declarator": "BASE = 1000", "var_name": "BASE"}, {"original_string": "private int base = BASE;", "modifier": "private", "type": "int", "declarator": "base = BASE", "var_name": "base"}], "methods": [{"identifier": "DivideThousand", "parameters": "()", "modifiers": "public", "return": "", "signature": " DivideThousand()", "full_signature": "public  DivideThousand()", "class_method_signature": "DivideThousand.DivideThousand()", "testcase": false, "constructor": true}, {"identifier": "DivideThousand", "parameters": "(int base)", "modifiers": "public", "return": "", "signature": " DivideThousand(int base)", "full_signature": "public  DivideThousand(int base)", "class_method_signature": "DivideThousand.DivideThousand(int base)", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(long id)", "modifiers": "@Override public", "return": "String", "signature": "String find(long id)", "full_signature": "@Override public String find(long id)", "class_method_signature": "DivideThousand.find(long id)", "testcase": false, "constructor": false}, {"identifier": "setBase", "parameters": "(int base)", "modifiers": "public", "return": "void", "signature": "void setBase(int base)", "full_signature": "public void setBase(int base)", "class_method_signature": "DivideThousand.setBase(int base)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/access/strategy/DivideThousand.java"}, "focal_method": {"identifier": "find", "parameters": "(long id)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String find(long id) {\n        Stack<Long> stack = new Stack<Long>();\n\n        for (; id * base >= base; id = id / base) {\n            stack.push(id);\n        }\n\n        StringBuilder builder = new StringBuilder();\n\n        for (; !stack.isEmpty();) {\n            builder.append(stack.pop()).append(File.separator);\n        }\n\n        builder.setLength(builder.length() - 1);\n        return builder.toString();\n    }", "signature": "String find(long id)", "full_signature": "@Override public String find(long id)", "class_method_signature": "DivideThousand.find(long id)", "testcase": false, "constructor": false, "invocations": ["push", "isEmpty", "append", "append", "pop", "setLength", "length", "toString"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}