{"test_class": {"identifier": "DPGMMTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DPGMMTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DPGMMTest.class)", "var_name": "log"}], "file": "contrib/src/test/java/macrobase/analysis/stats/mixture/DPGMMTest.java"}, "test_case": {"identifier": "univariateToyBimodalTest", "parameters": "()", "modifiers": "@Test /** * Tests Bayesian Dirichlet Process Gaussian Mixture on a three well separated clusters. */ public", "return": "void", "body": "@Test\n    /**\n     * Tests Bayesian Dirichlet Process Gaussian Mixture on a three well separated clusters.\n     */\n    public void univariateToyBimodalTest() throws Exception {\n        MacroBaseConf conf = new MacroBaseConf()\n                .set(MacroBaseConf.RANDOM_SEED, 4)\n                .set(MacroBaseConf.TRANSFORM_TYPE, \"VARIATIONAL_DPMM\")\n                .set(GMMConf.MAX_ITERATIONS_TO_CONVERGE, 15)\n                .set(GMMConf.DPM_TRUNCATING_PARAMETER, 8)\n                .set(GMMConf.DPM_CONCENTRATION_PARAMETER, 2)\n                .set(MacroBaseConf.DATA_LOADER_TYPE, \"CSV_LOADER\")\n                .set(MacroBaseConf.CSV_COMPRESSION, CSVIngester.Compression.UNCOMPRESSED)\n                .set(MacroBaseConf.CSV_INPUT_FILE, \"src/test/resources/data/toy2gaussians.csv\")\n                .set(MacroBaseConf.METRICS, \"XX\")\n                .set(MacroBaseConf.ATTRIBUTES, \"\");\n        List<Datum> data = conf.constructIngester().getStream().drain();\n        assertEquals(18, data.size());\n\n        DPGMM variationalDPGM = new DPGMM(conf);\n        variationalDPGM.train(data);\n        log.debug(\"{}\",  variationalDPGM.getClusterCenters(), variationalDPGM.getClusterProportions());\n    }", "signature": "void univariateToyBimodalTest()", "full_signature": "@Test /** * Tests Bayesian Dirichlet Process Gaussian Mixture on a three well separated clusters. */ public void univariateToyBimodalTest()", "class_method_signature": "DPGMMTest.univariateToyBimodalTest()", "testcase": true, "constructor": false, "invocations": ["set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "drain", "getStream", "constructIngester", "assertEquals", "size", "train", "debug", "getClusterCenters", "getClusterProportions"]}, "focal_class": {"identifier": "DPGMM", "superclass": "extends VarGMM", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DPGMM.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DPGMM.class)", "var_name": "log"}, {"original_string": "protected DPComponents mixingComponents;", "modifier": "protected", "type": "DPComponents", "declarator": "mixingComponents", "var_name": "mixingComponents"}, {"original_string": "protected final int T;", "modifier": "protected final", "type": "int", "declarator": "T", "var_name": "T"}], "methods": [{"identifier": "DPGMM", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " DPGMM(MacroBaseConf conf)", "full_signature": "public  DPGMM(MacroBaseConf conf)", "class_method_signature": "DPGMM.DPGMM(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "trainTest", "parameters": "(List<Datum> trainData, List<Datum> testData)", "modifiers": "public", "return": "void", "signature": "void trainTest(List<Datum> trainData, List<Datum> testData)", "full_signature": "public void trainTest(List<Datum> trainData, List<Datum> testData)", "class_method_signature": "DPGMM.trainTest(List<Datum> trainData, List<Datum> testData)", "testcase": false, "constructor": false}, {"identifier": "getClusterProportions", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] getClusterProportions()", "full_signature": "@Override public double[] getClusterProportions()", "class_method_signature": "DPGMM.getClusterProportions()", "testcase": false, "constructor": false}, {"identifier": "getNormClusterContrib", "parameters": "()", "modifiers": "@Override protected", "return": "double[]", "signature": "double[] getNormClusterContrib()", "full_signature": "@Override protected double[] getNormClusterContrib()", "class_method_signature": "DPGMM.getNormClusterContrib()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/stats/mixture/DPGMM.java"}, "focal_method": {"identifier": "getClusterProportions", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] getClusterProportions() {\n        return mixingComponents.getNormalizedClusterProportions();\n    }", "signature": "double[] getClusterProportions()", "full_signature": "@Override public double[] getClusterProportions()", "class_method_signature": "DPGMM.getClusterProportions()", "testcase": false, "constructor": false, "invocations": ["getNormalizedClusterProportions"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}