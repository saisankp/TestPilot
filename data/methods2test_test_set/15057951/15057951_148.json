{"test_class": {"identifier": "LevelNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/index/LevelNodeTest.java"}, "test_case": {"identifier": "shouldAddNewNodeValueToLeavesWhenAddingToLastNodeInIndexTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAddNewNodeValueToLeavesWhenAddingToLastNodeInIndexTree() {\n        // given\n        LevelIndex<Integer> levelIndex = levelIndex().withLevelCount(0).build();\n        LevelNode<Integer> node = new LevelNode<Integer>(levelIndex);\n\n        // when\n        int currentLevelNumber = 0;\n        node.add(new String[]{}, 10, currentLevelNumber);\n\n        // then\n        assertThat(node).hasLeaves(1).leavesEqualTo(10);\n    }", "signature": "void shouldAddNewNodeValueToLeavesWhenAddingToLastNodeInIndexTree()", "full_signature": "@Test public void shouldAddNewNodeValueToLeavesWhenAddingToLastNodeInIndexTree()", "class_method_signature": "LevelNodeTest.shouldAddNewNodeValueToLeavesWhenAddingToLastNodeInIndexTree()", "testcase": true, "constructor": false, "invocations": ["build", "withLevelCount", "levelIndex", "add", "leavesEqualTo", "hasLeaves", "assertThat"]}, "focal_class": {"identifier": "LevelNode", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int TO_STRING_INITIAL_LENGTH = 100;", "modifier": "private static final", "type": "int", "declarator": "TO_STRING_INITIAL_LENGTH = 100", "var_name": "TO_STRING_INITIAL_LENGTH"}, {"original_string": "private static final float CHILDREN_MAP_LOAD_FACTOR = 0.8f;", "modifier": "private static final", "type": "float", "declarator": "CHILDREN_MAP_LOAD_FACTOR = 0.8f", "var_name": "CHILDREN_MAP_LOAD_FACTOR"}, {"original_string": "private String level;", "modifier": "private", "type": "String", "declarator": "level", "var_name": "level"}, {"original_string": "private Map<String, LevelNode<T>> children;", "modifier": "private", "type": "Map<String, LevelNode<T>>", "declarator": "children", "var_name": "children"}, {"original_string": "private LevelNode<T> defaultNode;", "modifier": "private", "type": "LevelNode<T>", "declarator": "defaultNode", "var_name": "defaultNode"}, {"original_string": "private List<T> leafList;", "modifier": "private", "type": "List<T>", "declarator": "leafList", "var_name": "leafList"}, {"original_string": "private LevelNode<T> parent;", "modifier": "private", "type": "LevelNode<T>", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final LevelIndex<T> index;", "modifier": "private final", "type": "LevelIndex<T>", "declarator": "index", "var_name": "index"}], "methods": [{"identifier": "LevelNode", "parameters": "(LevelIndex<T> index)", "modifiers": "public", "return": "", "signature": " LevelNode(LevelIndex<T> index)", "full_signature": "public  LevelNode(LevelIndex<T> index)", "class_method_signature": "LevelNode.LevelNode(LevelIndex<T> index)", "testcase": false, "constructor": true}, {"identifier": "LevelNode", "parameters": "(String level, LevelNode<T> parent, LevelIndex<T> index)", "modifiers": "public", "return": "", "signature": " LevelNode(String level, LevelNode<T> parent, LevelIndex<T> index)", "full_signature": "public  LevelNode(String level, LevelNode<T> parent, LevelIndex<T> index)", "class_method_signature": "LevelNode.LevelNode(String level, LevelNode<T> parent, LevelIndex<T> index)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(List<String> levels, T leafValue, int depth)", "modifiers": "", "return": "void", "signature": "void add(List<String> levels, T leafValue, int depth)", "full_signature": " void add(List<String> levels, T leafValue, int depth)", "class_method_signature": "LevelNode.add(List<String> levels, T leafValue, int depth)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String[] levels, T leafValue, int depth)", "modifiers": "", "return": "void", "signature": "void add(String[] levels, T leafValue, int depth)", "full_signature": " void add(String[] levels, T leafValue, int depth)", "class_method_signature": "LevelNode.add(String[] levels, T leafValue, int depth)", "testcase": false, "constructor": false}, {"identifier": "reachedLeafDepth", "parameters": "(int depth)", "modifiers": "private", "return": "boolean", "signature": "boolean reachedLeafDepth(int depth)", "full_signature": "private boolean reachedLeafDepth(int depth)", "class_method_signature": "LevelNode.reachedLeafDepth(int depth)", "testcase": false, "constructor": false}, {"identifier": "ensureChildrenIsReady", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureChildrenIsReady()", "full_signature": "private void ensureChildrenIsReady()", "class_method_signature": "LevelNode.ensureChildrenIsReady()", "testcase": false, "constructor": false}, {"identifier": "hasChildren", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasChildren()", "full_signature": "public boolean hasChildren()", "class_method_signature": "LevelNode.hasChildren()", "testcase": false, "constructor": false}, {"identifier": "isLeaf", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLeaf()", "full_signature": "public boolean isLeaf()", "class_method_signature": "LevelNode.isLeaf()", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "public", "return": "Map<String, LevelNode<T>>", "signature": "Map<String, LevelNode<T>> getChildren()", "full_signature": "public Map<String, LevelNode<T>> getChildren()", "class_method_signature": "LevelNode.getChildren()", "testcase": false, "constructor": false}, {"identifier": "getDefaultNode", "parameters": "()", "modifiers": "public", "return": "LevelNode<T>", "signature": "LevelNode<T> getDefaultNode()", "full_signature": "public LevelNode<T> getDefaultNode()", "class_method_signature": "LevelNode.getDefaultNode()", "testcase": false, "constructor": false}, {"identifier": "getLeafList", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getLeafList()", "full_signature": "public List<T> getLeafList()", "class_method_signature": "LevelNode.getLeafList()", "testcase": false, "constructor": false}, {"identifier": "getLeafValue", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T getLeafValue()", "full_signature": "public T getLeafValue()", "class_method_signature": "LevelNode.getLeafValue()", "testcase": false, "constructor": false}, {"identifier": "printNode", "parameters": "(StringBuilder sb, int level)", "modifiers": "public", "return": "void", "signature": "void printNode(StringBuilder sb, int level)", "full_signature": "public void printNode(StringBuilder sb, int level)", "class_method_signature": "LevelNode.printNode(StringBuilder sb, int level)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LevelNode.toString()", "testcase": false, "constructor": false}, {"identifier": "getLevelPath", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getLevelPath()", "full_signature": "private String getLevelPath()", "class_method_signature": "LevelNode.getLevelPath()", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/index/LevelNode.java"}, "focal_method": {"identifier": "add", "parameters": "(List<String> levels, T leafValue, int depth)", "modifiers": "", "return": "void", "body": "void add(List<String> levels, T leafValue, int depth) {\n        String[] levelsArray = levels.toArray(new String[levels.size()]);\n        add(levelsArray, leafValue, depth);\n    }", "signature": "void add(List<String> levels, T leafValue, int depth)", "full_signature": " void add(List<String> levels, T leafValue, int depth)", "class_method_signature": "LevelNode.add(List<String> levels, T leafValue, int depth)", "testcase": false, "constructor": false, "invocations": ["toArray", "size", "add"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}