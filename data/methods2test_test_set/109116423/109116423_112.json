{"test_class": {"identifier": "LayoutBinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockLayoutBinder mLayoutBinder;", "modifier": "", "type": "MockLayoutBinder", "declarator": "mLayoutBinder", "var_name": "mLayoutBinder"}, {"original_string": "ExprModel mExprModel;", "modifier": "", "type": "ExprModel", "declarator": "mExprModel", "var_name": "mExprModel"}], "file": "android/databinding/tool/LayoutBinderTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse() {\n        int originalSize = mExprModel.size();\n        mLayoutBinder.addVariable(\"user\", \"android.databinding.tool2.LayoutBinderTest.TestUser\",\n                null);\n        mLayoutBinder.parse(\"user.name\", null, null);\n        mLayoutBinder.parse(\"user.lastName\", null, null);\n        assertEquals(originalSize + 3, mExprModel.size());\n        final List<Expr> bindingExprs = mExprModel.getBindingExpressions();\n        assertEquals(2, bindingExprs.size());\n        IdentifierExpr id = mExprModel.identifier(\"user\");\n        assertTrue(bindingExprs.get(0) instanceof FieldAccessExpr);\n        assertTrue(bindingExprs.get(1) instanceof FieldAccessExpr);\n        assertEquals(2, id.getParents().size());\n        assertTrue(bindingExprs.get(0).getChildren().contains(id));\n        assertTrue(bindingExprs.get(1).getChildren().contains(id));\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "LayoutBinderTest.testParse()", "testcase": true, "constructor": false, "invocations": ["size", "addVariable", "parse", "parse", "assertEquals", "size", "getBindingExpressions", "assertEquals", "size", "identifier", "assertTrue", "get", "assertTrue", "get", "assertEquals", "size", "getParents", "assertTrue", "contains", "getChildren", "get", "assertTrue", "contains", "getChildren", "get"]}, "focal_class": {"identifier": "LayoutBinder", "superclass": "", "interfaces": "implements FileScopeProvider", "fields": [{"original_string": "private static final Comparator<BindingTarget> COMPARE_FIELD_NAME = new Comparator<BindingTarget>() {\n        @Override\n        public int compare(BindingTarget first, BindingTarget second) {\n            final String fieldName1 = LayoutBinderWriterKt.getFieldName(first);\n            final String fieldName2 = LayoutBinderWriterKt.getFieldName(second);\n            return fieldName1.compareTo(fieldName2);\n        }\n    };", "modifier": "private static final", "type": "Comparator<BindingTarget>", "declarator": "COMPARE_FIELD_NAME = new Comparator<BindingTarget>() {\n        @Override\n        public int compare(BindingTarget first, BindingTarget second) {\n            final String fieldName1 = LayoutBinderWriterKt.getFieldName(first);\n            final String fieldName2 = LayoutBinderWriterKt.getFieldName(second);\n            return fieldName1.compareTo(fieldName2);\n        }\n    }", "var_name": "COMPARE_FIELD_NAME"}, {"original_string": "private final ExprModel mExprModel;", "modifier": "private final", "type": "ExprModel", "declarator": "mExprModel", "var_name": "mExprModel"}, {"original_string": "private final ExpressionParser mExpressionParser;", "modifier": "private final", "type": "ExpressionParser", "declarator": "mExpressionParser", "var_name": "mExpressionParser"}, {"original_string": "private final List<BindingTarget> mBindingTargets;", "modifier": "private final", "type": "List<BindingTarget>", "declarator": "mBindingTargets", "var_name": "mBindingTargets"}, {"original_string": "private final List<BindingTarget> mSortedBindingTargets;", "modifier": "private final", "type": "List<BindingTarget>", "declarator": "mSortedBindingTargets", "var_name": "mSortedBindingTargets"}, {"original_string": "private String mModulePackage;", "modifier": "private", "type": "String", "declarator": "mModulePackage", "var_name": "mModulePackage"}, {"original_string": "private final HashMap<String, String> mUserDefinedVariables = new HashMap<String, String>();", "modifier": "private final", "type": "HashMap<String, String>", "declarator": "mUserDefinedVariables = new HashMap<String, String>()", "var_name": "mUserDefinedVariables"}, {"original_string": "private LayoutBinderWriter mWriter;", "modifier": "private", "type": "LayoutBinderWriter", "declarator": "mWriter", "var_name": "mWriter"}, {"original_string": "private ResourceBundle.LayoutFileBundle mBundle;", "modifier": "private", "type": "ResourceBundle.LayoutFileBundle", "declarator": "mBundle", "var_name": "mBundle"}, {"original_string": "private static final String[] sJavaLangClasses = {\n            \"Deprecated\",\n            \"Override\",\n            \"SafeVarargs\",\n            \"SuppressWarnings\",\n            \"Appendable\",\n            \"AutoCloseable\",\n            \"CharSequence\",\n            \"Cloneable\",\n            \"Comparable\",\n            \"Iterable\",\n            \"Readable\",\n            \"Runnable\",\n            \"Thread.UncaughtExceptionHandler\",\n            \"Boolean\",\n            \"Byte\",\n            \"Character\",\n            \"Character.Subset\",\n            \"Character.UnicodeBlock\",\n            \"Class\",\n            \"ClassLoader\",\n            \"Compiler\",\n            \"Double\",\n            \"Enum\",\n            \"Float\",\n            \"InheritableThreadLocal\",\n            \"Integer\",\n            \"Long\",\n            \"Math\",\n            \"Number\",\n            \"Object\",\n            \"Package\",\n            \"Process\",\n            \"ProcessBuilder\",\n            \"Runtime\",\n            \"RuntimePermission\",\n            \"SecurityManager\",\n            \"Short\",\n            \"StackTraceElement\",\n            \"StrictMath\",\n            \"String\",\n            \"StringBuffer\",\n            \"StringBuilder\",\n            \"System\",\n            \"Thread\",\n            \"ThreadGroup\",\n            \"ThreadLocal\",\n            \"Throwable\",\n            \"Void\",\n            \"Thread.State\",\n            \"ArithmeticException\",\n            \"ArrayIndexOutOfBoundsException\",\n            \"ArrayStoreException\",\n            \"ClassCastException\",\n            \"ClassNotFoundException\",\n            \"CloneNotSupportedException\",\n            \"EnumConstantNotPresentException\",\n            \"Exception\",\n            \"IllegalAccessException\",\n            \"IllegalArgumentException\",\n            \"IllegalMonitorStateException\",\n            \"IllegalStateException\",\n            \"IllegalThreadStateException\",\n            \"IndexOutOfBoundsException\",\n            \"InstantiationException\",\n            \"InterruptedException\",\n            \"NegativeArraySizeException\",\n            \"NoSuchFieldException\",\n            \"NoSuchMethodException\",\n            \"NullPointerException\",\n            \"NumberFormatException\",\n            \"ReflectiveOperationException\",\n            \"RuntimeException\",\n            \"SecurityException\",\n            \"StringIndexOutOfBoundsException\",\n            \"TypeNotPresentException\",\n            \"UnsupportedOperationException\",\n            \"AbstractMethodError\",\n            \"AssertionError\",\n            \"ClassCircularityError\",\n            \"ClassFormatError\",\n            \"Error\",\n            \"ExceptionInInitializerError\",\n            \"IllegalAccessError\",\n            \"IncompatibleClassChangeError\",\n            \"InstantiationError\",\n            \"InternalError\",\n            \"LinkageError\",\n            \"NoClassDefFoundError\",\n            \"NoSuchFieldError\",\n            \"NoSuchMethodError\",\n            \"OutOfMemoryError\",\n            \"StackOverflowError\",\n            \"ThreadDeath\",\n            \"UnknownError\",\n            \"UnsatisfiedLinkError\",\n            \"UnsupportedClassVersionError\",\n            \"VerifyError\",\n            \"VirtualMachineError\",\n    };", "modifier": "private static final", "type": "String[]", "declarator": "sJavaLangClasses = {\n            \"Deprecated\",\n            \"Override\",\n            \"SafeVarargs\",\n            \"SuppressWarnings\",\n            \"Appendable\",\n            \"AutoCloseable\",\n            \"CharSequence\",\n            \"Cloneable\",\n            \"Comparable\",\n            \"Iterable\",\n            \"Readable\",\n            \"Runnable\",\n            \"Thread.UncaughtExceptionHandler\",\n            \"Boolean\",\n            \"Byte\",\n            \"Character\",\n            \"Character.Subset\",\n            \"Character.UnicodeBlock\",\n            \"Class\",\n            \"ClassLoader\",\n            \"Compiler\",\n            \"Double\",\n            \"Enum\",\n            \"Float\",\n            \"InheritableThreadLocal\",\n            \"Integer\",\n            \"Long\",\n            \"Math\",\n            \"Number\",\n            \"Object\",\n            \"Package\",\n            \"Process\",\n            \"ProcessBuilder\",\n            \"Runtime\",\n            \"RuntimePermission\",\n            \"SecurityManager\",\n            \"Short\",\n            \"StackTraceElement\",\n            \"StrictMath\",\n            \"String\",\n            \"StringBuffer\",\n            \"StringBuilder\",\n            \"System\",\n            \"Thread\",\n            \"ThreadGroup\",\n            \"ThreadLocal\",\n            \"Throwable\",\n            \"Void\",\n            \"Thread.State\",\n            \"ArithmeticException\",\n            \"ArrayIndexOutOfBoundsException\",\n            \"ArrayStoreException\",\n            \"ClassCastException\",\n            \"ClassNotFoundException\",\n            \"CloneNotSupportedException\",\n            \"EnumConstantNotPresentException\",\n            \"Exception\",\n            \"IllegalAccessException\",\n            \"IllegalArgumentException\",\n            \"IllegalMonitorStateException\",\n            \"IllegalStateException\",\n            \"IllegalThreadStateException\",\n            \"IndexOutOfBoundsException\",\n            \"InstantiationException\",\n            \"InterruptedException\",\n            \"NegativeArraySizeException\",\n            \"NoSuchFieldException\",\n            \"NoSuchMethodException\",\n            \"NullPointerException\",\n            \"NumberFormatException\",\n            \"ReflectiveOperationException\",\n            \"RuntimeException\",\n            \"SecurityException\",\n            \"StringIndexOutOfBoundsException\",\n            \"TypeNotPresentException\",\n            \"UnsupportedOperationException\",\n            \"AbstractMethodError\",\n            \"AssertionError\",\n            \"ClassCircularityError\",\n            \"ClassFormatError\",\n            \"Error\",\n            \"ExceptionInInitializerError\",\n            \"IllegalAccessError\",\n            \"IncompatibleClassChangeError\",\n            \"InstantiationError\",\n            \"InternalError\",\n            \"LinkageError\",\n            \"NoClassDefFoundError\",\n            \"NoSuchFieldError\",\n            \"NoSuchMethodError\",\n            \"OutOfMemoryError\",\n            \"StackOverflowError\",\n            \"ThreadDeath\",\n            \"UnknownError\",\n            \"UnsatisfiedLinkError\",\n            \"UnsupportedClassVersionError\",\n            \"VerifyError\",\n            \"VirtualMachineError\",\n    }", "var_name": "sJavaLangClasses"}], "methods": [{"identifier": "LayoutBinder", "parameters": "(ResourceBundle.LayoutFileBundle layoutBundle)", "modifiers": "public", "return": "", "signature": " LayoutBinder(ResourceBundle.LayoutFileBundle layoutBundle)", "full_signature": "public  LayoutBinder(ResourceBundle.LayoutFileBundle layoutBundle)", "class_method_signature": "LayoutBinder.LayoutBinder(ResourceBundle.LayoutFileBundle layoutBundle)", "testcase": false, "constructor": true}, {"identifier": "resolveWhichExpressionsAreUsed", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resolveWhichExpressionsAreUsed()", "full_signature": "public void resolveWhichExpressionsAreUsed()", "class_method_signature": "LayoutBinder.resolveWhichExpressionsAreUsed()", "testcase": false, "constructor": false}, {"identifier": "addVariable", "parameters": "(String name, String type, Location location,\n            boolean declared)", "modifiers": "public", "return": "IdentifierExpr", "signature": "IdentifierExpr addVariable(String name, String type, Location location,\n            boolean declared)", "full_signature": "public IdentifierExpr addVariable(String name, String type, Location location,\n            boolean declared)", "class_method_signature": "LayoutBinder.addVariable(String name, String type, Location location,\n            boolean declared)", "testcase": false, "constructor": false}, {"identifier": "getUserDefinedVariables", "parameters": "()", "modifiers": "public", "return": "HashMap<String, String>", "signature": "HashMap<String, String> getUserDefinedVariables()", "full_signature": "public HashMap<String, String> getUserDefinedVariables()", "class_method_signature": "LayoutBinder.getUserDefinedVariables()", "testcase": false, "constructor": false}, {"identifier": "createBindingTarget", "parameters": "(ResourceBundle.BindingTargetBundle targetBundle)", "modifiers": "public", "return": "BindingTarget", "signature": "BindingTarget createBindingTarget(ResourceBundle.BindingTargetBundle targetBundle)", "full_signature": "public BindingTarget createBindingTarget(ResourceBundle.BindingTargetBundle targetBundle)", "class_method_signature": "LayoutBinder.createBindingTarget(ResourceBundle.BindingTargetBundle targetBundle)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String input, @Nullable Location locationInFile, BindingTarget target)", "modifiers": "public", "return": "Expr", "signature": "Expr parse(String input, @Nullable Location locationInFile, BindingTarget target)", "full_signature": "public Expr parse(String input, @Nullable Location locationInFile, BindingTarget target)", "class_method_signature": "LayoutBinder.parse(String input, @Nullable Location locationInFile, BindingTarget target)", "testcase": false, "constructor": false}, {"identifier": "getBindingTargets", "parameters": "()", "modifiers": "public", "return": "List<BindingTarget>", "signature": "List<BindingTarget> getBindingTargets()", "full_signature": "public List<BindingTarget> getBindingTargets()", "class_method_signature": "LayoutBinder.getBindingTargets()", "testcase": false, "constructor": false}, {"identifier": "getSortedTargets", "parameters": "()", "modifiers": "public", "return": "List<BindingTarget>", "signature": "List<BindingTarget> getSortedTargets()", "full_signature": "public List<BindingTarget> getSortedTargets()", "class_method_signature": "LayoutBinder.getSortedTargets()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "LayoutBinder.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "public", "return": "ExprModel", "signature": "ExprModel getModel()", "full_signature": "public ExprModel getModel()", "class_method_signature": "LayoutBinder.getModel()", "testcase": false, "constructor": false}, {"identifier": "ensureWriter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureWriter()", "full_signature": "private void ensureWriter()", "class_method_signature": "LayoutBinder.ensureWriter()", "testcase": false, "constructor": false}, {"identifier": "sealModel", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sealModel()", "full_signature": "public void sealModel()", "class_method_signature": "LayoutBinder.sealModel()", "testcase": false, "constructor": false}, {"identifier": "writeViewBinderBaseClass", "parameters": "(boolean forLibrary)", "modifiers": "public", "return": "String", "signature": "String writeViewBinderBaseClass(boolean forLibrary)", "full_signature": "public String writeViewBinderBaseClass(boolean forLibrary)", "class_method_signature": "LayoutBinder.writeViewBinderBaseClass(boolean forLibrary)", "testcase": false, "constructor": false}, {"identifier": "writeViewBinder", "parameters": "(int minSdk)", "modifiers": "public", "return": "String", "signature": "String writeViewBinder(int minSdk)", "full_signature": "public String writeViewBinder(int minSdk)", "class_method_signature": "LayoutBinder.writeViewBinder(int minSdk)", "testcase": false, "constructor": false}, {"identifier": "getPackage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPackage()", "full_signature": "public String getPackage()", "class_method_signature": "LayoutBinder.getPackage()", "testcase": false, "constructor": false}, {"identifier": "isMerge", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMerge()", "full_signature": "public boolean isMerge()", "class_method_signature": "LayoutBinder.isMerge()", "testcase": false, "constructor": false}, {"identifier": "getModulePackage", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getModulePackage()", "full_signature": "public String getModulePackage()", "class_method_signature": "LayoutBinder.getModulePackage()", "testcase": false, "constructor": false}, {"identifier": "getLayoutname", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLayoutname()", "full_signature": "public String getLayoutname()", "class_method_signature": "LayoutBinder.getLayoutname()", "testcase": false, "constructor": false}, {"identifier": "getImplementationName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getImplementationName()", "full_signature": "public String getImplementationName()", "class_method_signature": "LayoutBinder.getImplementationName()", "testcase": false, "constructor": false}, {"identifier": "getClassName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClassName()", "full_signature": "public String getClassName()", "class_method_signature": "LayoutBinder.getClassName()", "testcase": false, "constructor": false}, {"identifier": "getTag", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTag()", "full_signature": "public String getTag()", "class_method_signature": "LayoutBinder.getTag()", "testcase": false, "constructor": false}, {"identifier": "hasVariations", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasVariations()", "full_signature": "public boolean hasVariations()", "class_method_signature": "LayoutBinder.hasVariations()", "testcase": false, "constructor": false}, {"identifier": "provideScopeFilePath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String provideScopeFilePath()", "full_signature": "@Override public String provideScopeFilePath()", "class_method_signature": "LayoutBinder.provideScopeFilePath()", "testcase": false, "constructor": false}], "file": "android/databinding/tool/LayoutBinder.java"}, "focal_method": {"identifier": "parse", "parameters": "(String input, @Nullable Location locationInFile, BindingTarget target)", "modifiers": "public", "return": "Expr", "body": "public Expr parse(String input, @Nullable Location locationInFile, BindingTarget target) {\n        final Expr parsed = mExpressionParser.parse(input, locationInFile, target);\n        parsed.setBindingExpression(true);\n        return parsed;\n    }", "signature": "Expr parse(String input, @Nullable Location locationInFile, BindingTarget target)", "full_signature": "public Expr parse(String input, @Nullable Location locationInFile, BindingTarget target)", "class_method_signature": "LayoutBinder.parse(String input, @Nullable Location locationInFile, BindingTarget target)", "testcase": false, "constructor": false, "invocations": ["parse", "setBindingExpression"]}, "repository": {"repo_id": 109116423, "url": "https://github.com/AndroidSDKSources/android-sdk-sources-for-api-level-26", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 29147, "license": "licensed"}}