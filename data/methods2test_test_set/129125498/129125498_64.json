{"test_class": {"identifier": "HoltWintersSimpleTrainingModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/holtwinters/HoltWintersSimpleTrainingModelTest.java"}, "test_case": {"identifier": "testInvalidTrainingMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvalidTrainingMethod() {\n        expectedEx.expect(IllegalArgumentException.class);\n        expectedEx.expectMessage(String.format(\"Expected training method to be %s but was %s\", HoltWintersTrainingMethod.SIMPLE, HoltWintersTrainingMethod.NONE));\n        HoltWintersPointForecasterParams params = HoltWintersAustouristsTestHelper.buildAustouristsParams(HoltWintersSeasonalityType.MULTIPLICATIVE);\n        HoltWintersOnlineComponents components = new HoltWintersOnlineComponents(params);\n        HoltWintersSimpleTrainingModel subject = new HoltWintersSimpleTrainingModel(params);\n        subject.observeAndTrain(0, params, components);\n    }", "signature": "void testInvalidTrainingMethod()", "full_signature": "@Test public void testInvalidTrainingMethod()", "class_method_signature": "HoltWintersSimpleTrainingModelTest.testInvalidTrainingMethod()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "format", "buildAustouristsParams", "observeAndTrain"]}, "focal_class": {"identifier": "HoltWintersSimpleTrainingModel", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int n = 0;", "modifier": "private", "type": "int", "declarator": "n = 0", "var_name": "n"}, {"original_string": "private final double[] firstCycle;", "modifier": "private final", "type": "double[]", "declarator": "firstCycle", "var_name": "firstCycle"}, {"original_string": "private final double[] secondCycle;", "modifier": "private final", "type": "double[]", "declarator": "secondCycle", "var_name": "secondCycle"}], "methods": [{"identifier": "HoltWintersSimpleTrainingModel", "parameters": "(HoltWintersPointForecasterParams params)", "modifiers": "public", "return": "", "signature": " HoltWintersSimpleTrainingModel(HoltWintersPointForecasterParams params)", "full_signature": "public  HoltWintersSimpleTrainingModel(HoltWintersPointForecasterParams params)", "class_method_signature": "HoltWintersSimpleTrainingModel.HoltWintersSimpleTrainingModel(HoltWintersPointForecasterParams params)", "testcase": false, "constructor": true}, {"identifier": "observeAndTrain", "parameters": "(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "modifiers": "public", "return": "void", "signature": "void observeAndTrain(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "full_signature": "public void observeAndTrain(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "class_method_signature": "HoltWintersSimpleTrainingModel.observeAndTrain(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "testcase": false, "constructor": false}, {"identifier": "isTrainingComplete", "parameters": "(HoltWintersPointForecasterParams params)", "modifiers": "public", "return": "boolean", "signature": "boolean isTrainingComplete(HoltWintersPointForecasterParams params)", "full_signature": "public boolean isTrainingComplete(HoltWintersPointForecasterParams params)", "class_method_signature": "HoltWintersSimpleTrainingModel.isTrainingComplete(HoltWintersPointForecasterParams params)", "testcase": false, "constructor": false}, {"identifier": "updateComponentsAndForecast", "parameters": "(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "modifiers": "private", "return": "void", "signature": "void updateComponentsAndForecast(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "full_signature": "private void updateComponentsAndForecast(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "class_method_signature": "HoltWintersSimpleTrainingModel.updateComponentsAndForecast(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "testcase": false, "constructor": false}, {"identifier": "setLevel", "parameters": "(HoltWintersOnlineComponents components)", "modifiers": "private", "return": "void", "signature": "void setLevel(HoltWintersOnlineComponents components)", "full_signature": "private void setLevel(HoltWintersOnlineComponents components)", "class_method_signature": "HoltWintersSimpleTrainingModel.setLevel(HoltWintersOnlineComponents components)", "testcase": false, "constructor": false}, {"identifier": "setBase", "parameters": "(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "modifiers": "private", "return": "void", "signature": "void setBase(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "full_signature": "private void setBase(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "class_method_signature": "HoltWintersSimpleTrainingModel.setBase(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "testcase": false, "constructor": false}, {"identifier": "setSeasonals", "parameters": "(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "modifiers": "private", "return": "void", "signature": "void setSeasonals(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "full_signature": "private void setSeasonals(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "class_method_signature": "HoltWintersSimpleTrainingModel.setSeasonals(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "testcase": false, "constructor": false}, {"identifier": "checkNulls", "parameters": "(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "modifiers": "private", "return": "void", "signature": "void checkNulls(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "full_signature": "private void checkNulls(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "class_method_signature": "HoltWintersSimpleTrainingModel.checkNulls(HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "testcase": false, "constructor": false}, {"identifier": "checkTrainingMethod", "parameters": "(HoltWintersPointForecasterParams params)", "modifiers": "private", "return": "void", "signature": "void checkTrainingMethod(HoltWintersPointForecasterParams params)", "full_signature": "private void checkTrainingMethod(HoltWintersPointForecasterParams params)", "class_method_signature": "HoltWintersSimpleTrainingModel.checkTrainingMethod(HoltWintersPointForecasterParams params)", "testcase": false, "constructor": false}, {"identifier": "checkStillInInitialTraining", "parameters": "(HoltWintersPointForecasterParams params)", "modifiers": "private", "return": "void", "signature": "void checkStillInInitialTraining(HoltWintersPointForecasterParams params)", "full_signature": "private void checkStillInInitialTraining(HoltWintersPointForecasterParams params)", "class_method_signature": "HoltWintersSimpleTrainingModel.checkStillInInitialTraining(HoltWintersPointForecasterParams params)", "testcase": false, "constructor": false}, {"identifier": "isBetween", "parameters": "(int x, int lower, int upper)", "modifiers": "private", "return": "boolean", "signature": "boolean isBetween(int x, int lower, int upper)", "full_signature": "private boolean isBetween(int x, int lower, int upper)", "class_method_signature": "HoltWintersSimpleTrainingModel.isBetween(int x, int lower, int upper)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(double[] values)", "modifiers": "private", "return": "double", "signature": "double mean(double[] values)", "full_signature": "private double mean(double[] values)", "class_method_signature": "HoltWintersSimpleTrainingModel.mean(double[] values)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/holtwinters/HoltWintersSimpleTrainingModel.java"}, "focal_method": {"identifier": "observeAndTrain", "parameters": "(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "modifiers": "public", "return": "void", "body": "public void observeAndTrain(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components) {\n        checkNulls(params, components);\n        checkTrainingMethod(params);\n        checkStillInInitialTraining(params);\n        int frequency = params.getFrequency();\n\n        // Capture data points\n        if (isBetween(n, 0, frequency - 1)) {\n            firstCycle[n] = y;\n        } else {\n            secondCycle[n - frequency] = y;\n        }\n        // Train\n        if (n == params.calculateInitTrainingPeriod() - 1) {\n            setLevel(components);\n            setSeasonals(y, params, components);\n            setBase(params, components);\n            updateComponentsAndForecast(params, components);\n        }\n        n++;\n    }", "signature": "void observeAndTrain(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "full_signature": "public void observeAndTrain(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "class_method_signature": "HoltWintersSimpleTrainingModel.observeAndTrain(double y, HoltWintersPointForecasterParams params, HoltWintersOnlineComponents components)", "testcase": false, "constructor": false, "invocations": ["checkNulls", "checkTrainingMethod", "checkStillInInitialTraining", "getFrequency", "isBetween", "calculateInitTrainingPeriod", "setLevel", "setSeasonals", "setBase", "updateComponentsAndForecast"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}