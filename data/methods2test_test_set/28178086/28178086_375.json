{"test_class": {"identifier": "IntListTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/utilities/IntListTest.java"}, "test_case": {"identifier": "testReplaceAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReplaceAll() {\n        IntList list = new IntList();\n        list.replaceAll(o -> o + 1);\n        assertThat(list.toArray()).isEmpty();\n        list.add(1);\n        list.add(2);\n        list.replaceAll(o -> o + 1);\n        assertThat(list.toArray()).containsExactly(2, 3);\n    }", "signature": "void testReplaceAll()", "full_signature": "@Test public void testReplaceAll()", "class_method_signature": "IntListTest.testReplaceAll()", "testcase": true, "constructor": false, "invocations": ["replaceAll", "isEmpty", "assertThat", "toArray", "add", "add", "replaceAll", "containsExactly", "assertThat", "toArray"]}, "focal_class": {"identifier": "IntList", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_SIZE = 128;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_SIZE = 128", "var_name": "DEFAULT_SIZE"}, {"original_string": "private int[] _array;", "modifier": "private", "type": "int[]", "declarator": "_array", "var_name": "_array"}, {"original_string": "private int _limit;", "modifier": "private", "type": "int", "declarator": "_limit", "var_name": "_limit"}, {"original_string": "private int fillval = 0;", "modifier": "private", "type": "int", "declarator": "fillval = 0", "var_name": "fillval"}], "methods": [{"identifier": "IntList", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntList()", "full_signature": "public  IntList()", "class_method_signature": "IntList.IntList()", "testcase": false, "constructor": true}, {"identifier": "IntList", "parameters": "(final int initialCapacity)", "modifiers": "public", "return": "", "signature": " IntList(final int initialCapacity)", "full_signature": "public  IntList(final int initialCapacity)", "class_method_signature": "IntList.IntList(final int initialCapacity)", "testcase": false, "constructor": true}, {"identifier": "IntList", "parameters": "(final IntList list)", "modifiers": "public", "return": "", "signature": " IntList(final IntList list)", "full_signature": "public  IntList(final IntList list)", "class_method_signature": "IntList.IntList(final IntList list)", "testcase": false, "constructor": true}, {"identifier": "IntList", "parameters": "(final int initialCapacity, int fillvalue)", "modifiers": "public", "return": "", "signature": " IntList(final int initialCapacity, int fillvalue)", "full_signature": "public  IntList(final int initialCapacity, int fillvalue)", "class_method_signature": "IntList.IntList(final int initialCapacity, int fillvalue)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final int index, final int value)", "modifiers": "public", "return": "void", "signature": "void add(final int index, final int value)", "full_signature": "public void add(final int index, final int value)", "class_method_signature": "IntList.add(final int index, final int value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final int value)", "modifiers": "public", "return": "boolean", "signature": "boolean add(final int value)", "full_signature": "public boolean add(final int value)", "class_method_signature": "IntList.add(final int value)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final IntList c)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(final IntList c)", "full_signature": "public boolean addAll(final IntList c)", "class_method_signature": "IntList.addAll(final IntList c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(final int index, final IntList c)", "modifiers": "public", "return": "boolean", "signature": "boolean addAll(final int index, final IntList c)", "full_signature": "public boolean addAll(final int index, final IntList c)", "class_method_signature": "IntList.addAll(final int index, final IntList c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "IntList.clear()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final int o)", "modifiers": "public", "return": "boolean", "signature": "boolean contains(final int o)", "full_signature": "public boolean contains(final int o)", "class_method_signature": "IntList.contains(final int o)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(final IntList c)", "modifiers": "public", "return": "boolean", "signature": "boolean containsAll(final IntList c)", "full_signature": "public boolean containsAll(final IntList c)", "class_method_signature": "IntList.containsAll(final IntList c)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "IntList.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int index)", "modifiers": "public", "return": "int", "signature": "int get(final int index)", "full_signature": "public int get(final int index)", "class_method_signature": "IntList.get(final int index)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "IntList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(final int o)", "modifiers": "public", "return": "int", "signature": "int indexOf(final int o)", "full_signature": "public int indexOf(final int o)", "class_method_signature": "IntList.indexOf(final int o)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "IntList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(final int o)", "modifiers": "public", "return": "int", "signature": "int lastIndexOf(final int o)", "full_signature": "public int lastIndexOf(final int o)", "class_method_signature": "IntList.lastIndexOf(final int o)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final int index)", "modifiers": "public", "return": "int", "signature": "int remove(final int index)", "full_signature": "public int remove(final int index)", "class_method_signature": "IntList.remove(final int index)", "testcase": false, "constructor": false}, {"identifier": "removeValue", "parameters": "(final int value)", "modifiers": "public", "return": "boolean", "signature": "boolean removeValue(final int value)", "full_signature": "public boolean removeValue(final int value)", "class_method_signature": "IntList.removeValue(final int value)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(final IntList c)", "modifiers": "public", "return": "boolean", "signature": "boolean removeAll(final IntList c)", "full_signature": "public boolean removeAll(final IntList c)", "class_method_signature": "IntList.removeAll(final IntList c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(final IntList c)", "modifiers": "public", "return": "boolean", "signature": "boolean retainAll(final IntList c)", "full_signature": "public boolean retainAll(final IntList c)", "class_method_signature": "IntList.retainAll(final IntList c)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final int index, final int element)", "modifiers": "public", "return": "int", "signature": "int set(final int index, final int element)", "full_signature": "public int set(final int index, final int element)", "class_method_signature": "IntList.set(final int index, final int element)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "IntList.size()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] toArray()", "full_signature": "public int[] toArray()", "class_method_signature": "IntList.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(final int[] a)", "modifiers": "public", "return": "int[]", "signature": "int[] toArray(final int[] a)", "full_signature": "public int[] toArray(final int[] a)", "class_method_signature": "IntList.toArray(final int[] a)", "testcase": false, "constructor": false}, {"identifier": "growArray", "parameters": "(final int new_size)", "modifiers": "private", "return": "void", "signature": "void growArray(final int new_size)", "full_signature": "private void growArray(final int new_size)", "class_method_signature": "IntList.growArray(final int new_size)", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "public", "return": "IntStream", "signature": "IntStream stream()", "full_signature": "public IntStream stream()", "class_method_signature": "IntList.stream()", "testcase": false, "constructor": false}, {"identifier": "replaceAll", "parameters": "(IntUnaryOperator operator)", "modifiers": "public", "return": "void", "signature": "void replaceAll(IntUnaryOperator operator)", "full_signature": "public void replaceAll(IntUnaryOperator operator)", "class_method_signature": "IntList.replaceAll(IntUnaryOperator operator)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sort()", "full_signature": "public void sort()", "class_method_signature": "IntList.sort()", "testcase": false, "constructor": false}, {"identifier": "spliterator", "parameters": "()", "modifiers": "public", "return": "Spliterator.OfInt", "signature": "Spliterator.OfInt spliterator()", "full_signature": "public Spliterator.OfInt spliterator()", "class_method_signature": "IntList.spliterator()", "testcase": false, "constructor": false}, {"identifier": "removeIf", "parameters": "(IntPredicate filter)", "modifiers": "public", "return": "boolean", "signature": "boolean removeIf(IntPredicate filter)", "full_signature": "public boolean removeIf(IntPredicate filter)", "class_method_signature": "IntList.removeIf(IntPredicate filter)", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(IntConsumer action)", "modifiers": "public", "return": "void", "signature": "void forEach(IntConsumer action)", "full_signature": "public void forEach(IntConsumer action)", "class_method_signature": "IntList.forEach(IntConsumer action)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/utilities/IntList.java"}, "focal_method": {"identifier": "replaceAll", "parameters": "(IntUnaryOperator operator)", "modifiers": "public", "return": "void", "body": "public void replaceAll(IntUnaryOperator operator) {\n        java.util.Objects.requireNonNull(operator);\n        for (int i = 0; i < _limit; i++) {\n            _array[i] = operator.applyAsInt(_array[i]);\n        }\n    }", "signature": "void replaceAll(IntUnaryOperator operator)", "full_signature": "public void replaceAll(IntUnaryOperator operator)", "class_method_signature": "IntList.replaceAll(IntUnaryOperator operator)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "applyAsInt"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}