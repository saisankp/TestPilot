{"test_class": {"identifier": "ConsistencyCheckerTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [{"original_string": "private ConsistencyChecker consistencyChecker;", "modifier": "private", "type": "ConsistencyChecker", "declarator": "consistencyChecker", "var_name": "consistencyChecker"}], "file": "org.eclipse.winery.repository/src/test/java/org/eclipse/winery/repository/backend/consistencycheck/ConsistencyCheckerTest.java"}, "test_case": {"identifier": "nodeTypeImplementationNamespaceHasNoErrors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nodeTypeImplementationNamespaceHasNoErrors() throws Exception {\n        NodeTypeImplementationId id = new NodeTypeImplementationId(\"http://winery.opentosca.org/test/nodetypeimplementations/fruits\", \"baobab_impl\", false);\n        ConsistencyErrorCollector errorLogger = new ConsistencyErrorCollector();\n        consistencyChecker.checkNamespaceUri(id);\n        assertEquals(Collections.emptyMap(), errorLogger.getErrorList());\n    }", "signature": "void nodeTypeImplementationNamespaceHasNoErrors()", "full_signature": "@Test public void nodeTypeImplementationNamespaceHasNoErrors()", "class_method_signature": "ConsistencyCheckerTest.nodeTypeImplementationNamespaceHasNoErrors()", "testcase": true, "constructor": false, "invocations": ["checkNamespaceUri", "assertEquals", "emptyMap", "getErrorList"]}, "focal_class": {"identifier": "ConsistencyChecker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ConsistencyChecker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ConsistencyChecker.class)", "var_name": "LOGGER"}, {"original_string": "private static final String ARTEFACT_BE = \"artefact\";", "modifier": "private static final", "type": "String", "declarator": "ARTEFACT_BE = \"artefact\"", "var_name": "ARTEFACT_BE"}, {"original_string": "private final ConsistencyCheckerConfiguration configuration;", "modifier": "private final", "type": "ConsistencyCheckerConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private ConsistencyCheckerProgressListener progressListener;", "modifier": "private", "type": "ConsistencyCheckerProgressListener", "declarator": "progressListener", "var_name": "progressListener"}, {"original_string": "private final List<DefinitionsChildId> allDefinitionsChildIds;", "modifier": "private final", "type": "List<DefinitionsChildId>", "declarator": "allDefinitionsChildIds", "var_name": "allDefinitionsChildIds"}, {"original_string": "private final ConsistencyErrorCollector errorCollector = new ConsistencyErrorCollector();", "modifier": "private final", "type": "ConsistencyErrorCollector", "declarator": "errorCollector = new ConsistencyErrorCollector()", "var_name": "errorCollector"}], "methods": [{"identifier": "ConsistencyChecker", "parameters": "(@NonNull ConsistencyCheckerConfiguration configuration)", "modifiers": "public", "return": "", "signature": " ConsistencyChecker(@NonNull ConsistencyCheckerConfiguration configuration)", "full_signature": "public  ConsistencyChecker(@NonNull ConsistencyCheckerConfiguration configuration)", "class_method_signature": "ConsistencyChecker.ConsistencyChecker(@NonNull ConsistencyCheckerConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "ConsistencyChecker", "parameters": "(@NonNull ConsistencyCheckerConfiguration configuration,\n                              @NonNull ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "modifiers": "public", "return": "", "signature": " ConsistencyChecker(@NonNull ConsistencyCheckerConfiguration configuration,\n                              @NonNull ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "full_signature": "public  ConsistencyChecker(@NonNull ConsistencyCheckerConfiguration configuration,\n                              @NonNull ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "class_method_signature": "ConsistencyChecker.ConsistencyChecker(@NonNull ConsistencyCheckerConfiguration configuration,\n                              @NonNull ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "testcase": false, "constructor": true}, {"identifier": "setConsistencyCheckerProgressListener", "parameters": "(ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "modifiers": "public", "return": "void", "signature": "void setConsistencyCheckerProgressListener(ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "full_signature": "public void setConsistencyCheckerProgressListener(ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "class_method_signature": "ConsistencyChecker.setConsistencyCheckerProgressListener(ConsistencyCheckerProgressListener consistencyCheckerProgressListener)", "testcase": false, "constructor": false}, {"identifier": "numberOfDefinitionsToCheck", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numberOfDefinitionsToCheck()", "full_signature": "public int numberOfDefinitionsToCheck()", "class_method_signature": "ConsistencyChecker.numberOfDefinitionsToCheck()", "testcase": false, "constructor": false}, {"identifier": "checkCorruption", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void checkCorruption()", "full_signature": "public void checkCorruption()", "class_method_signature": "ConsistencyChecker.checkCorruption()", "testcase": false, "constructor": false}, {"identifier": "checkDocumentation", "parameters": "(DefinitionsChildId id)", "modifiers": "private", "return": "void", "signature": "void checkDocumentation(DefinitionsChildId id)", "full_signature": "private void checkDocumentation(DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.checkDocumentation(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "checkFileExistenceAndSize", "parameters": "(DefinitionsChildId id, String filename)", "modifiers": "private", "return": "void", "signature": "void checkFileExistenceAndSize(DefinitionsChildId id, String filename)", "full_signature": "private void checkFileExistenceAndSize(DefinitionsChildId id, String filename)", "class_method_signature": "ConsistencyChecker.checkFileExistenceAndSize(DefinitionsChildId id, String filename)", "testcase": false, "constructor": false}, {"identifier": "checkPlainConformance", "parameters": "(DefinitionsChildId id, Path tempCsar)", "modifiers": "private", "return": "void", "signature": "void checkPlainConformance(DefinitionsChildId id, Path tempCsar)", "full_signature": "private void checkPlainConformance(DefinitionsChildId id, Path tempCsar)", "class_method_signature": "ConsistencyChecker.checkPlainConformance(DefinitionsChildId id, Path tempCsar)", "testcase": false, "constructor": false}, {"identifier": "checkServiceTemplate", "parameters": "(ServiceTemplateId id)", "modifiers": "private", "return": "void", "signature": "void checkServiceTemplate(ServiceTemplateId id)", "full_signature": "private void checkServiceTemplate(ServiceTemplateId id)", "class_method_signature": "ConsistencyChecker.checkServiceTemplate(ServiceTemplateId id)", "testcase": false, "constructor": false}, {"identifier": "checkReferencedQNames", "parameters": "(DefinitionsChildId id)", "modifiers": "private", "return": "void", "signature": "void checkReferencedQNames(DefinitionsChildId id)", "full_signature": "private void checkReferencedQNames(DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.checkReferencedQNames(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "checkXmlSchemaValidation", "parameters": "(DefinitionsChildId id)", "modifiers": "private", "return": "void", "signature": "void checkXmlSchemaValidation(DefinitionsChildId id)", "full_signature": "private void checkXmlSchemaValidation(DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.checkXmlSchemaValidation(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(RepositoryFileReference xmlSchemaFileReference, @Nullable Object any, DefinitionsChildId id)", "modifiers": "private", "return": "void", "signature": "void validate(RepositoryFileReference xmlSchemaFileReference, @Nullable Object any, DefinitionsChildId id)", "full_signature": "private void validate(RepositoryFileReference xmlSchemaFileReference, @Nullable Object any, DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.validate(RepositoryFileReference xmlSchemaFileReference, @Nullable Object any, DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "checkPropertiesValidation", "parameters": "(DefinitionsChildId id)", "modifiers": "private", "return": "void", "signature": "void checkPropertiesValidation(DefinitionsChildId id)", "full_signature": "private void checkPropertiesValidation(DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.checkPropertiesValidation(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "checkId", "parameters": "(DefinitionsChildId id)", "modifiers": "private", "return": "void", "signature": "void checkId(DefinitionsChildId id)", "full_signature": "private void checkId(DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.checkId(DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "checkNcname", "parameters": "(DefinitionsChildId id, String ncname)", "modifiers": "private", "return": "void", "signature": "void checkNcname(DefinitionsChildId id, String ncname)", "full_signature": "private void checkNcname(DefinitionsChildId id, String ncname)", "class_method_signature": "ConsistencyChecker.checkNcname(DefinitionsChildId id, String ncname)", "testcase": false, "constructor": false}, {"identifier": "checkNamespaceUri", "parameters": "(@NonNull DefinitionsChildId id)", "modifiers": "public", "return": "void", "signature": "void checkNamespaceUri(@NonNull DefinitionsChildId id)", "full_signature": "public void checkNamespaceUri(@NonNull DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.checkNamespaceUri(@NonNull DefinitionsChildId id)", "testcase": false, "constructor": false}, {"identifier": "checkCsar", "parameters": "(DefinitionsChildId id, Path tempCsar)", "modifiers": "private", "return": "void", "signature": "void checkCsar(DefinitionsChildId id, Path tempCsar)", "full_signature": "private void checkCsar(DefinitionsChildId id, Path tempCsar)", "class_method_signature": "ConsistencyChecker.checkCsar(DefinitionsChildId id, Path tempCsar)", "testcase": false, "constructor": false}, {"identifier": "checkAllDefinitions", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkAllDefinitions()", "full_signature": "private void checkAllDefinitions()", "class_method_signature": "ConsistencyChecker.checkAllDefinitions()", "testcase": false, "constructor": false}, {"identifier": "printAndAddError", "parameters": "(DefinitionsChildId id, String error)", "modifiers": "private", "return": "void", "signature": "void printAndAddError(DefinitionsChildId id, String error)", "full_signature": "private void printAndAddError(DefinitionsChildId id, String error)", "class_method_signature": "ConsistencyChecker.printAndAddError(DefinitionsChildId id, String error)", "testcase": false, "constructor": false}, {"identifier": "printAndAddWarning", "parameters": "(DefinitionsChildId id, String error)", "modifiers": "private", "return": "void", "signature": "void printAndAddWarning(DefinitionsChildId id, String error)", "full_signature": "private void printAndAddWarning(DefinitionsChildId id, String error)", "class_method_signature": "ConsistencyChecker.printAndAddWarning(DefinitionsChildId id, String error)", "testcase": false, "constructor": false}, {"identifier": "printError", "parameters": "(String error)", "modifiers": "private", "return": "void", "signature": "void printError(String error)", "full_signature": "private void printError(String error)", "class_method_signature": "ConsistencyChecker.printError(String error)", "testcase": false, "constructor": false}, {"identifier": "getErrorCollector", "parameters": "()", "modifiers": "public", "return": "ConsistencyErrorCollector", "signature": "ConsistencyErrorCollector getErrorCollector()", "full_signature": "public ConsistencyErrorCollector getErrorCollector()", "class_method_signature": "ConsistencyChecker.getErrorCollector()", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.repository/src/main/java/org/eclipse/winery/repository/backend/consistencycheck/ConsistencyChecker.java"}, "focal_method": {"identifier": "checkNamespaceUri", "parameters": "(@NonNull DefinitionsChildId id)", "modifiers": "public", "return": "void", "body": "public void checkNamespaceUri(@NonNull DefinitionsChildId id) {\n        Objects.requireNonNull(id);\n\n        String uriStr = id.getNamespace().getDecoded();\n        if (!uriStr.trim().equals(uriStr)) {\n            printAndAddError(id, \"Namespace starts or ends with white spaces\");\n        }\n        URI uri;\n        try {\n            uri = new URI(uriStr);\n        } catch (URISyntaxException e) {\n            LOGGER.debug(\"Invalid URI\", e);\n            printAndAddError(id, \"Invalid URI: \" + e.getMessage());\n            return;\n        }\n        if (!uri.isAbsolute()) {\n            printAndAddError(id, \"URI is relative\");\n        }\n        if ((uriStr.startsWith(\"http://www.opentosca.org/\") && (!uriStr.toLowerCase().equals(uriStr)))) {\n            // URI is not lowercase\n            // There are some special URIs, which are OK\n            String[] splitUri = uriStr.split(\"/\");\n            String lastElement = splitUri[splitUri.length - 1];\n            String uriStrWithoutLastElement = uriStr.substring(0, (uriStr.length() - lastElement.length()));\n            if (!(id.getXmlId().toString().startsWith(lastElement)) || (!uriStrWithoutLastElement.toLowerCase().equals(uriStrWithoutLastElement))) {\n                printAndAddError(id, \"opentosca URI is not lowercase\");\n            }\n        }\n        if (uriStr.endsWith(\"/\")) {\n            printAndAddError(id, \"URI ends with a slash\");\n        }\n        if (uriStr.contains(ARTEFACT_BE)) {\n            printAndAddError(id, \"artifact is spelled with i in American English, not artefact as in British English\");\n        }\n        // We could just check OpenTOSCA namespace rule examples. However, this would be too strict\n        // Here, the idea is to check whether a string of another (!) id class appers in the namespace\n        // If this is the case, the namespace is not consistent\n        // For instance, a node type residing in the namespace: http://servicetemplates.example.org should not exist.\n        boolean namespaceUriContainsDifferentType = DefinitionsChildId.ALL_TOSCA_COMPONENT_ID_CLASSES.stream()\n            .filter(definitionsChildIdClass -> !definitionsChildIdClass.isAssignableFrom(id.getClass()))\n            // we have the issue that nodetypeimplementation also contains nodetype\n            // we do the quick hack and check for plural s and /\n            .flatMap(definitionsChildIdClass -> {\n                final String lowerCaseIdClass = Util.getTypeForComponentId(definitionsChildIdClass).toLowerCase();\n                return Stream.of(lowerCaseIdClass + \"s\", lowerCaseIdClass + \"/\");\n            })\n            .anyMatch(definitionsChildName -> uriStr.contains(definitionsChildName));\n        if (namespaceUriContainsDifferentType) {\n            if ((id instanceof ServiceTemplateId) && (id.getNamespace().getDecoded().contains(\"compliance\"))) {\n                // special case, becaue TComplianceRule models a service template, but Compliance Rules are treated as Service Template during modeling\n                // example: class org.eclipse.winery.common.ids.definitions.ServiceTemplateId / {http://www.compliance.opentosca.org/compliancerules}Satisfied_Compliance_Rule_Example_w1\n            } else {\n                printAndAddError(id, \"Namespace URI contains tosca definitions name from other type. E.g., Namespace is ...servicetemplates..., but the type is an artifact template\");\n            }\n        }\n    }", "signature": "void checkNamespaceUri(@NonNull DefinitionsChildId id)", "full_signature": "public void checkNamespaceUri(@NonNull DefinitionsChildId id)", "class_method_signature": "ConsistencyChecker.checkNamespaceUri(@NonNull DefinitionsChildId id)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getDecoded", "getNamespace", "equals", "trim", "printAndAddError", "debug", "printAndAddError", "getMessage", "isAbsolute", "printAndAddError", "startsWith", "equals", "toLowerCase", "split", "substring", "length", "length", "startsWith", "toString", "getXmlId", "equals", "toLowerCase", "printAndAddError", "endsWith", "printAndAddError", "contains", "printAndAddError", "anyMatch", "flatMap", "filter", "stream", "isAssignableFrom", "getClass", "toLowerCase", "getTypeForComponentId", "of", "contains", "contains", "getDecoded", "getNamespace", "printAndAddError"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}