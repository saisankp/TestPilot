{"test_class": {"identifier": "MessageTrapTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/notification/util/MessageTrapTest.java"}, "test_case": {"identifier": "verifyNotificationNotBroadcast_withBroadcast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyNotificationNotBroadcast_withBroadcast() {\n        Assertions.assertThrows(\n                AssertionError.class,\n                () -> MessageTrap.verifyNotificationNotBroadcast(TestNotification.class, () -> NotificationRouter.get().broadcast(new TestNotification()), TestSchedulerType.TEST_SCHEDULER_TYPE));\n    }", "signature": "void verifyNotificationNotBroadcast_withBroadcast()", "full_signature": "@Test public void verifyNotificationNotBroadcast_withBroadcast()", "class_method_signature": "MessageTrapTest.verifyNotificationNotBroadcast_withBroadcast()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "verifyNotificationNotBroadcast", "broadcast", "get"]}, "focal_class": {"identifier": "MessageTrap", "superclass": "", "interfaces": "implements Subscriber", "fields": [{"original_string": "private T trappedNotification;", "modifier": "private", "type": "T", "declarator": "trappedNotification", "var_name": "trappedNotification"}, {"original_string": "private final Class<T> type;", "modifier": "private final", "type": "Class<T>", "declarator": "type", "var_name": "type"}, {"original_string": "private final EventSchedulerType schedulerType;", "modifier": "private final", "type": "EventSchedulerType", "declarator": "schedulerType", "var_name": "schedulerType"}], "methods": [{"identifier": "MessageTrap", "parameters": "(Class<T> type, EventSchedulerType schedulerType)", "modifiers": "private", "return": "", "signature": " MessageTrap(Class<T> type, EventSchedulerType schedulerType)", "full_signature": "private  MessageTrap(Class<T> type, EventSchedulerType schedulerType)", "class_method_signature": "MessageTrap.MessageTrap(Class<T> type, EventSchedulerType schedulerType)", "testcase": false, "constructor": true}, {"identifier": "createAndSubscribe", "parameters": "(Class<T> type, EventSchedulerType schedulerType)", "modifiers": "public static", "return": "MessageTrap<T>", "signature": "MessageTrap<T> createAndSubscribe(Class<T> type, EventSchedulerType schedulerType)", "full_signature": "public static MessageTrap<T> createAndSubscribe(Class<T> type, EventSchedulerType schedulerType)", "class_method_signature": "MessageTrap.createAndSubscribe(Class<T> type, EventSchedulerType schedulerType)", "testcase": false, "constructor": false}, {"identifier": "anyNotificationOfType", "parameters": "(T n)", "modifiers": "@Subscribe public", "return": "void", "signature": "void anyNotificationOfType(T n)", "full_signature": "@Subscribe public void anyNotificationOfType(T n)", "class_method_signature": "MessageTrap.anyNotificationOfType(T n)", "testcase": false, "constructor": false}, {"identifier": "getCapture", "parameters": "()", "modifiers": "public", "return": "Optional<T>", "signature": "Optional<T> getCapture()", "full_signature": "public Optional<T> getCapture()", "class_method_signature": "MessageTrap.getCapture()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "MessageTrap.reset()", "testcase": false, "constructor": false}, {"identifier": "getSchedulerType", "parameters": "()", "modifiers": "@Override public", "return": "EventSchedulerType", "signature": "EventSchedulerType getSchedulerType()", "full_signature": "@Override public EventSchedulerType getSchedulerType()", "class_method_signature": "MessageTrap.getSchedulerType()", "testcase": false, "constructor": false}, {"identifier": "verifyNotificationNotBroadcast", "parameters": "(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "modifiers": "public static", "return": "void", "signature": "void verifyNotificationNotBroadcast(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "full_signature": "public static void verifyNotificationNotBroadcast(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "class_method_signature": "MessageTrap.verifyNotificationNotBroadcast(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/notification/util/MessageTrap.java"}, "focal_method": {"identifier": "verifyNotificationNotBroadcast", "parameters": "(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "modifiers": "public static", "return": "void", "body": "public static <N extends Notification> void verifyNotificationNotBroadcast(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType) {\n        MessageTrap<N> messageTrap = MessageTrap.createAndSubscribe(notificationClass, schedulerType);\n        action.run();\n        messageTrap.getCapture().ifPresent(n -> {\n            throw new AssertionError(\"Unexpected notification of type [\" + notificationClass.getName() + \"] broadcast: \" + n);\n        });\n    }", "signature": "void verifyNotificationNotBroadcast(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "full_signature": "public static void verifyNotificationNotBroadcast(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "class_method_signature": "MessageTrap.verifyNotificationNotBroadcast(Class<N> notificationClass, Runnable action, EventSchedulerType schedulerType)", "testcase": false, "constructor": false, "invocations": ["createAndSubscribe", "run", "ifPresent", "getCapture", "getName"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}