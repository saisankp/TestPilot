{"test_class": {"identifier": "NumberTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NumberType type = new NumberType();", "modifier": "private", "type": "NumberType", "declarator": "type = new NumberType()", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/number/NumberTypeTest.java"}, "test_case": {"identifier": "testDecode__illegalArgument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode__illegalArgument() {\n\n        // przypadki testowe, ktore nie moga zostac zdekodowane do NumberHoldera\n        String[] illegals = {\"aa\", \"1b\"};\n\n        // wykonanie testow, oczekujemy wyjatku\n        for (String text : illegals) {\n            try {\n                type.decode(text);\n                fail();\n            } catch (NumberFormatException nfe) {\n                //ok\n            }\n        }\n    }", "signature": "void testDecode__illegalArgument()", "full_signature": "@Test public void testDecode__illegalArgument()", "class_method_signature": "NumberTypeTest.testDecode__illegalArgument()", "testcase": true, "constructor": false, "invocations": ["decode", "fail"]}, "focal_class": {"identifier": "NumberType", "superclass": "", "interfaces": "implements Type<NumberHolder>", "fields": [{"original_string": "public static final String TYPE_NAME = \"number\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"number\"", "var_name": "TYPE_NAME"}], "methods": [{"identifier": "encode", "parameters": "(NumberHolder value)", "modifiers": "@Override public", "return": "String", "signature": "String encode(NumberHolder value)", "full_signature": "@Override public String encode(NumberHolder value)", "class_method_signature": "NumberType.encode(NumberHolder value)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "NumberHolder", "signature": "NumberHolder decode(String text)", "full_signature": "@Override public NumberHolder decode(String text)", "class_method_signature": "NumberType.decode(String text)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "NumberHolder", "signature": "NumberHolder convert(Object obj)", "full_signature": "@Override public NumberHolder convert(Object obj)", "class_method_signature": "NumberType.convert(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(int size)", "modifiers": "@Override public", "return": "NumberHolder[]", "signature": "NumberHolder[] newArray(int size)", "full_signature": "@Override public NumberHolder[] newArray(int size)", "class_method_signature": "NumberType.newArray(int size)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String str)", "modifiers": "private", "return": "BigDecimal", "signature": "BigDecimal parse(String str)", "full_signature": "private BigDecimal parse(String str)", "class_method_signature": "NumberType.parse(String str)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/number/NumberType.java"}, "focal_method": {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "NumberHolder", "body": "@Override\n    public NumberHolder decode(String text) {\n        BigDecimal value = EngineUtil.hasText(text) ? parse(text) : null;\n        return new NumberHolder(value);\n    }", "signature": "NumberHolder decode(String text)", "full_signature": "@Override public NumberHolder decode(String text)", "class_method_signature": "NumberType.decode(String text)", "testcase": false, "constructor": false, "invocations": ["hasText", "parse"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}