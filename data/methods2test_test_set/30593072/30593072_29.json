{"test_class": {"identifier": "OutboundMessageHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Mockery mockery;", "modifier": "private", "type": "Mockery", "declarator": "mockery", "var_name": "mockery"}, {"original_string": "private WritableByteChannel writableByteChannel;", "modifier": "private", "type": "WritableByteChannel", "declarator": "writableByteChannel", "var_name": "writableByteChannel"}, {"original_string": "private OutboundMessageHandler handler;", "modifier": "private", "type": "OutboundMessageHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private ConnectionObserver connectionObserver;", "modifier": "private", "type": "ConnectionObserver", "declarator": "connectionObserver", "var_name": "connectionObserver"}], "file": "nanofix-client/src/test/java/com/lmax/nanofix/outgoing/OutboundMessageHandlerTest.java"}, "test_case": {"identifier": "shouldPlaceMultipleMessagesInSameBuffer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldPlaceMultipleMessagesInSameBuffer() throws Exception\n    {\n        final FixMessage loginMessage = new FixMessageBuilder().messageType(MsgType.LOGIN).msgSeqNum(1).senderCompID(\"username\").targetCompID(\"LMXBL\").\n                sendingTime(DateTime.parse(\"19981231-23:58:59.000\", DATE_TIME_FORMATTER)).username(\"username\").password(\"password\").heartBtInt(100000).encryptMethod(EncryptMethod.NONE).build();\n        final FixMessage logoutMessage = new FixMessageBuilder().messageType(MsgType.LOGOUT).msgSeqNum(2).senderCompID(\"username\").targetCompID(\"LMXBL\").\n                sendingTime(DateTime.parse(\"19981231-23:59:59.000\", DATE_TIME_FORMATTER)).build();\n        final List<FixMessage> expected = newArrayList(loginMessage, logoutMessage);\n\n        mockery.checking(new Expectations()\n        {\n            {\n                one(writableByteChannel).write(with(new ByteBufferMatcher(expected)));\n            }\n        });\n\n        handler.send(expected);\n    }", "signature": "void shouldPlaceMultipleMessagesInSameBuffer()", "full_signature": "@Test public void shouldPlaceMultipleMessagesInSameBuffer()", "class_method_signature": "OutboundMessageHandlerTest.shouldPlaceMultipleMessagesInSameBuffer()", "testcase": true, "constructor": false, "invocations": ["build", "encryptMethod", "heartBtInt", "password", "username", "sendingTime", "targetCompID", "senderCompID", "msgSeqNum", "messageType", "parse", "build", "sendingTime", "targetCompID", "senderCompID", "msgSeqNum", "messageType", "parse", "newArrayList", "checking", "write", "one", "with", "send"]}, "focal_class": {"identifier": "OutboundMessageHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConnectionObserver connectionObserver;", "modifier": "private final", "type": "ConnectionObserver", "declarator": "connectionObserver", "var_name": "connectionObserver"}, {"original_string": "private volatile WritableByteChannel writableByteChannel;", "modifier": "private volatile", "type": "WritableByteChannel", "declarator": "writableByteChannel", "var_name": "writableByteChannel"}], "methods": [{"identifier": "OutboundMessageHandler", "parameters": "(final ConnectionObserver connectionObserver)", "modifiers": "public", "return": "", "signature": " OutboundMessageHandler(final ConnectionObserver connectionObserver)", "full_signature": "public  OutboundMessageHandler(final ConnectionObserver connectionObserver)", "class_method_signature": "OutboundMessageHandler.OutboundMessageHandler(final ConnectionObserver connectionObserver)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(FixMessage message)", "modifiers": "public", "return": "void", "signature": "void send(FixMessage message)", "full_signature": "public void send(FixMessage message)", "class_method_signature": "OutboundMessageHandler.send(FixMessage message)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(Collection<FixMessage> messages)", "modifiers": "public", "return": "void", "signature": "void send(Collection<FixMessage> messages)", "full_signature": "public void send(Collection<FixMessage> messages)", "class_method_signature": "OutboundMessageHandler.send(Collection<FixMessage> messages)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(final String message)", "modifiers": "public", "return": "void", "signature": "void send(final String message)", "full_signature": "public void send(final String message)", "class_method_signature": "OutboundMessageHandler.send(final String message)", "testcase": false, "constructor": false}, {"identifier": "sendBytes", "parameters": "(final byte[] bytes)", "modifiers": "public", "return": "void", "signature": "void sendBytes(final byte[] bytes)", "full_signature": "public void sendBytes(final byte[] bytes)", "class_method_signature": "OutboundMessageHandler.sendBytes(final byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "initialiseOutboundChannel", "parameters": "(final WritableByteChannel writableByteChannel)", "modifiers": "public", "return": "void", "signature": "void initialiseOutboundChannel(final WritableByteChannel writableByteChannel)", "full_signature": "public void initialiseOutboundChannel(final WritableByteChannel writableByteChannel)", "class_method_signature": "OutboundMessageHandler.initialiseOutboundChannel(final WritableByteChannel writableByteChannel)", "testcase": false, "constructor": false}], "file": "nanofix-client/src/main/java/com/lmax/nanofix/outgoing/OutboundMessageHandler.java"}, "focal_method": {"identifier": "send", "parameters": "(FixMessage message)", "modifiers": "public", "return": "void", "body": "public void send(FixMessage message)\n    {\n        final byte[] bytes = message.toFixString().getBytes();\n        sendBytes(bytes);\n    }", "signature": "void send(FixMessage message)", "full_signature": "public void send(FixMessage message)", "class_method_signature": "OutboundMessageHandler.send(FixMessage message)", "testcase": false, "constructor": false, "invocations": ["getBytes", "toFixString", "sendBytes"]}, "repository": {"repo_id": 30593072, "url": "https://github.com/LMAX-Exchange/nanofix", "language": "Java", "is_fork": false, "fork_count": 18, "stargazer_count": 24, "size": 193, "license": "licensed"}}