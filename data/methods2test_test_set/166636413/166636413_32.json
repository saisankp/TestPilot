{"test_class": {"identifier": "AuditEventLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testInstanceFile = new File(\"/storage/emulated/0/odk/INSTANCES/testForm/testForm.xml\");", "modifier": "private final", "type": "File", "declarator": "testInstanceFile = new File(\"/storage/emulated/0/odk/INSTANCES/testForm/testForm.xml\")", "var_name": "testInstanceFile"}, {"original_string": "private final AuditConfig testAuditConfig = new AuditConfig(\"high-priority\", \"10\", \"60\", false);", "modifier": "private final", "type": "AuditConfig", "declarator": "testAuditConfig = new AuditConfig(\"high-priority\", \"10\", \"60\", false)", "var_name": "testAuditConfig"}, {"original_string": "private final AuditConfig testAuditConfigWithNullValues = new AuditConfig(\"high-priority\", \"10\", null, false);", "modifier": "private final", "type": "AuditConfig", "declarator": "testAuditConfigWithNullValues = new AuditConfig(\"high-priority\", \"10\", null, false)", "var_name": "testAuditConfigWithNullValues"}], "file": "collect_app/src/test/java/org/odk/collect/android/utilities/AuditEventLoggerTest.java"}, "test_case": {"identifier": "logEventTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void logEventTest() {\n        AuditEventLogger auditEventLogger = new AuditEventLogger(testInstanceFile, testAuditConfig);\n\n        auditEventLogger.logEvent(BEGINNING_OF_FORM, false); //shouldn't be logged\n        auditEventLogger.logEvent(QUESTION, false);\n        auditEventLogger.getAuditEvents().get(auditEventLogger.getAuditEvents().size() - 1).setEnd(1548156710000L);\n        auditEventLogger.logEvent(GROUP, false);\n        auditEventLogger.getAuditEvents().get(auditEventLogger.getAuditEvents().size() - 1).setEnd(1548156770000L);\n        auditEventLogger.logEvent(PROMPT_NEW_REPEAT, false);\n        auditEventLogger.getAuditEvents().get(auditEventLogger.getAuditEvents().size() - 1).setEnd(1548156830000L);\n        auditEventLogger.logEvent(REPEAT, false); //shouldn't be logged\n        auditEventLogger.logEvent(END_OF_FORM, false);\n        auditEventLogger.logEvent(FORM_START, false);\n        auditEventLogger.logEvent(FORM_RESUME, false);\n        auditEventLogger.logEvent(FORM_SAVE, false);\n        auditEventLogger.logEvent(FORM_FINALIZE, false);\n        auditEventLogger.logEvent(HIERARCHY, false);\n        auditEventLogger.getAuditEvents().get(auditEventLogger.getAuditEvents().size() - 1).setEnd(1548156890000L);\n        auditEventLogger.logEvent(SAVE_ERROR, false);\n        auditEventLogger.logEvent(FINALIZE_ERROR, false);\n        auditEventLogger.logEvent(CONSTRAINT_ERROR, false);\n        auditEventLogger.logEvent(DELETE_REPEAT, false);\n        auditEventLogger.logEvent(GOOGLE_PLAY_SERVICES_NOT_AVAILABLE, false);\n        auditEventLogger.logEvent(LOCATION_PERMISSIONS_GRANTED, false);\n        auditEventLogger.logEvent(LOCATION_PERMISSIONS_NOT_GRANTED, false);\n        auditEventLogger.logEvent(LOCATION_TRACKING_ENABLED, false);\n        auditEventLogger.logEvent(LOCATION_TRACKING_DISABLED, false);\n        auditEventLogger.logEvent(LOCATION_PROVIDERS_ENABLED, false);\n        auditEventLogger.logEvent(LOCATION_PROVIDERS_DISABLED, false);\n        auditEventLogger.logEvent(UNKNOWN_EVENT_TYPE, false);\n\n        assertEquals(21, auditEventLogger.getAuditEvents().size());\n    }", "signature": "void logEventTest()", "full_signature": "@Test public void logEventTest()", "class_method_signature": "AuditEventLoggerTest.logEventTest()", "testcase": true, "constructor": false, "invocations": ["logEvent", "logEvent", "setEnd", "get", "getAuditEvents", "size", "getAuditEvents", "logEvent", "setEnd", "get", "getAuditEvents", "size", "getAuditEvents", "logEvent", "setEnd", "get", "getAuditEvents", "size", "getAuditEvents", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "setEnd", "get", "getAuditEvents", "size", "getAuditEvents", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "logEvent", "assertEquals", "size", "getAuditEvents"]}, "focal_class": {"identifier": "AuditEventLogger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Location> locations = new ArrayList<>();", "modifier": "private", "type": "List<Location>", "declarator": "locations = new ArrayList<>()", "var_name": "locations"}, {"original_string": "private static AsyncTask saveTask;", "modifier": "private static", "type": "AsyncTask", "declarator": "saveTask", "var_name": "saveTask"}, {"original_string": "private ArrayList<AuditEvent> auditEvents = new ArrayList<>();", "modifier": "private", "type": "ArrayList<AuditEvent>", "declarator": "auditEvents = new ArrayList<>()", "var_name": "auditEvents"}, {"original_string": "private File auditFile;", "modifier": "private", "type": "File", "declarator": "auditFile", "var_name": "auditFile"}, {"original_string": "private long surveyOpenTime;", "modifier": "private", "type": "long", "declarator": "surveyOpenTime", "var_name": "surveyOpenTime"}, {"original_string": "private long surveyOpenElapsedTime;", "modifier": "private", "type": "long", "declarator": "surveyOpenElapsedTime", "var_name": "surveyOpenElapsedTime"}, {"original_string": "private final AuditConfig auditConfig;", "modifier": "private final", "type": "AuditConfig", "declarator": "auditConfig", "var_name": "auditConfig"}], "methods": [{"identifier": "AuditEventLogger", "parameters": "(File instanceFile, AuditConfig auditConfig)", "modifiers": "public", "return": "", "signature": " AuditEventLogger(File instanceFile, AuditConfig auditConfig)", "full_signature": "public  AuditEventLogger(File instanceFile, AuditConfig auditConfig)", "class_method_signature": "AuditEventLogger.AuditEventLogger(File instanceFile, AuditConfig auditConfig)", "testcase": false, "constructor": true}, {"identifier": "logEvent", "parameters": "(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "modifiers": "public", "return": "void", "signature": "void logEvent(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "full_signature": "public void logEvent(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "class_method_signature": "AuditEventLogger.logEvent(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "testcase": false, "constructor": false}, {"identifier": "logEvent", "parameters": "(AuditEvent.AuditEventType eventType, FormIndex formIndex,\n                         boolean writeImmediatelyToDisk, String questionAnswer)", "modifiers": "public", "return": "void", "signature": "void logEvent(AuditEvent.AuditEventType eventType, FormIndex formIndex,\n                         boolean writeImmediatelyToDisk, String questionAnswer)", "full_signature": "public void logEvent(AuditEvent.AuditEventType eventType, FormIndex formIndex,\n                         boolean writeImmediatelyToDisk, String questionAnswer)", "class_method_signature": "AuditEventLogger.logEvent(AuditEvent.AuditEventType eventType, FormIndex formIndex,\n                         boolean writeImmediatelyToDisk, String questionAnswer)", "testcase": false, "constructor": false}, {"identifier": "addLocationCoordinatesToAuditEvent", "parameters": "(AuditEvent auditEvent)", "modifiers": "private", "return": "void", "signature": "void addLocationCoordinatesToAuditEvent(AuditEvent auditEvent)", "full_signature": "private void addLocationCoordinatesToAuditEvent(AuditEvent auditEvent)", "class_method_signature": "AuditEventLogger.addLocationCoordinatesToAuditEvent(AuditEvent auditEvent)", "testcase": false, "constructor": false}, {"identifier": "addNewValueToQuestionAuditEvent", "parameters": "(AuditEvent aev, FormController formController)", "modifiers": "private", "return": "void", "signature": "void addNewValueToQuestionAuditEvent(AuditEvent aev, FormController formController)", "full_signature": "private void addNewValueToQuestionAuditEvent(AuditEvent aev, FormController formController)", "class_method_signature": "AuditEventLogger.addNewValueToQuestionAuditEvent(AuditEvent aev, FormController formController)", "testcase": false, "constructor": false}, {"identifier": "isDuplicateOfLastLocationEvent", "parameters": "(AuditEvent.AuditEventType eventType)", "modifiers": "", "return": "boolean", "signature": "boolean isDuplicateOfLastLocationEvent(AuditEvent.AuditEventType eventType)", "full_signature": " boolean isDuplicateOfLastLocationEvent(AuditEvent.AuditEventType eventType)", "class_method_signature": "AuditEventLogger.isDuplicateOfLastLocationEvent(AuditEvent.AuditEventType eventType)", "testcase": false, "constructor": false}, {"identifier": "isDuplicatedIntervalEvent", "parameters": "(AuditEvent newAuditEvent)", "modifiers": "private", "return": "boolean", "signature": "boolean isDuplicatedIntervalEvent(AuditEvent newAuditEvent)", "full_signature": "private boolean isDuplicatedIntervalEvent(AuditEvent newAuditEvent)", "class_method_signature": "AuditEventLogger.isDuplicatedIntervalEvent(AuditEvent newAuditEvent)", "testcase": false, "constructor": false}, {"identifier": "exitView", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void exitView()", "full_signature": "public void exitView()", "class_method_signature": "AuditEventLogger.exitView()", "testcase": false, "constructor": false}, {"identifier": "manageSavedEvents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void manageSavedEvents()", "full_signature": "private void manageSavedEvents()", "class_method_signature": "AuditEventLogger.manageSavedEvents()", "testcase": false, "constructor": false}, {"identifier": "setIntervalEventFinalParameters", "parameters": "(AuditEvent aev, long end)", "modifiers": "private", "return": "void", "signature": "void setIntervalEventFinalParameters(AuditEvent aev, long end)", "full_signature": "private void setIntervalEventFinalParameters(AuditEvent aev, long end)", "class_method_signature": "AuditEventLogger.setIntervalEventFinalParameters(AuditEvent aev, long end)", "testcase": false, "constructor": false}, {"identifier": "shouldBeIgnored", "parameters": "(AuditEvent.AuditEventType eventType)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldBeIgnored(AuditEvent.AuditEventType eventType)", "full_signature": "private boolean shouldBeIgnored(AuditEvent.AuditEventType eventType)", "class_method_signature": "AuditEventLogger.shouldBeIgnored(AuditEvent.AuditEventType eventType)", "testcase": false, "constructor": false}, {"identifier": "shouldEventBeLogged", "parameters": "(AuditEvent aev)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldEventBeLogged(AuditEvent aev)", "full_signature": "private boolean shouldEventBeLogged(AuditEvent aev)", "class_method_signature": "AuditEventLogger.shouldEventBeLogged(AuditEvent aev)", "testcase": false, "constructor": false}, {"identifier": "writeEvents", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void writeEvents()", "full_signature": "private void writeEvents()", "class_method_signature": "AuditEventLogger.writeEvents()", "testcase": false, "constructor": false}, {"identifier": "getEventTime", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getEventTime()", "full_signature": "private long getEventTime()", "class_method_signature": "AuditEventLogger.getEventTime()", "testcase": false, "constructor": false}, {"identifier": "addLocation", "parameters": "(Location location)", "modifiers": "public", "return": "void", "signature": "void addLocation(Location location)", "full_signature": "public void addLocation(Location location)", "class_method_signature": "AuditEventLogger.addLocation(Location location)", "testcase": false, "constructor": false}, {"identifier": "getMostAccurateLocation", "parameters": "(long currentTime)", "modifiers": "@Nullable", "return": "Location", "signature": "Location getMostAccurateLocation(long currentTime)", "full_signature": "@Nullable Location getMostAccurateLocation(long currentTime)", "class_method_signature": "AuditEventLogger.getMostAccurateLocation(long currentTime)", "testcase": false, "constructor": false}, {"identifier": "removeExpiredLocations", "parameters": "(long currentTime)", "modifiers": "private", "return": "void", "signature": "void removeExpiredLocations(long currentTime)", "full_signature": "private void removeExpiredLocations(long currentTime)", "class_method_signature": "AuditEventLogger.removeExpiredLocations(long currentTime)", "testcase": false, "constructor": false}, {"identifier": "isAuditEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isAuditEnabled()", "full_signature": " boolean isAuditEnabled()", "class_method_signature": "AuditEventLogger.isAuditEnabled()", "testcase": false, "constructor": false}, {"identifier": "getAuditEvents", "parameters": "()", "modifiers": "", "return": "ArrayList<AuditEvent>", "signature": "ArrayList<AuditEvent> getAuditEvents()", "full_signature": " ArrayList<AuditEvent> getAuditEvents()", "class_method_signature": "AuditEventLogger.getAuditEvents()", "testcase": false, "constructor": false}, {"identifier": "getLocations", "parameters": "()", "modifiers": "", "return": "List<Location>", "signature": "List<Location> getLocations()", "full_signature": " List<Location> getLocations()", "class_method_signature": "AuditEventLogger.getLocations()", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/utilities/AuditEventLogger.java"}, "focal_method": {"identifier": "logEvent", "parameters": "(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "modifiers": "public", "return": "void", "body": "public void logEvent(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk) {\n        logEvent(eventType, null, writeImmediatelyToDisk, null);\n    }", "signature": "void logEvent(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "full_signature": "public void logEvent(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "class_method_signature": "AuditEventLogger.logEvent(AuditEvent.AuditEventType eventType, boolean writeImmediatelyToDisk)", "testcase": false, "constructor": false, "invocations": ["logEvent"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}