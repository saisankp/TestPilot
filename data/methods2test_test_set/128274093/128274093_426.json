{"test_class": {"identifier": "BlockingObservableNextTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/BlockingObservableNextTest.java"}, "test_case": {"identifier": "testSynchronousNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSynchronousNext() {\n        assertEquals(1, BehaviorProcessor.createDefault(1).take(1).blockingSingle().intValue());\n        assertEquals(2, BehaviorProcessor.createDefault(2).blockingIterable().iterator().next().intValue());\n        assertEquals(3, BehaviorProcessor.createDefault(3).blockingNext().iterator().next().intValue());\n    }", "signature": "void testSynchronousNext()", "full_signature": "@Test public void testSynchronousNext()", "class_method_signature": "BlockingObservableNextTest.testSynchronousNext()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "intValue", "blockingSingle", "take", "createDefault", "assertEquals", "intValue", "next", "iterator", "blockingIterable", "createDefault", "assertEquals", "intValue", "next", "iterator", "blockingNext", "createDefault"]}, "focal_class": {"identifier": "BlockingObservableNext", "superclass": "", "interfaces": "implements Iterable<T>", "fields": [{"original_string": "final ObservableSource<T> source;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "BlockingObservableNext", "parameters": "(ObservableSource<T> source)", "modifiers": "public", "return": "", "signature": " BlockingObservableNext(ObservableSource<T> source)", "full_signature": "public  BlockingObservableNext(ObservableSource<T> source)", "class_method_signature": "BlockingObservableNext.BlockingObservableNext(ObservableSource<T> source)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "BlockingObservableNext.iterator()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/BlockingObservableNext.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<T>", "body": "@Override\n    public Iterator<T> iterator() {\n        NextObserver<T> nextObserver = new NextObserver<T>();\n        return new NextIterator<T>(source, nextObserver);\n    }", "signature": "Iterator<T> iterator()", "full_signature": "@Override public Iterator<T> iterator()", "class_method_signature": "BlockingObservableNext.iterator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}