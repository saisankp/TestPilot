{"test_class": {"identifier": "ReferenceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EntityIdValue subject = new ItemIdValueImpl(\"Q42\",\n\t\t\t\"http://wikidata.org/entity/\");", "modifier": "private final", "type": "EntityIdValue", "declarator": "subject = new ItemIdValueImpl(\"Q42\",\n\t\t\t\"http://wikidata.org/entity/\")", "var_name": "subject"}, {"original_string": "private final PropertyIdValue property = new PropertyIdValueImpl(\n\t\t\t\"P42\", \"http://wikidata.org/entity/\");", "modifier": "private final", "type": "PropertyIdValue", "declarator": "property = new PropertyIdValueImpl(\n\t\t\t\"P42\", \"http://wikidata.org/entity/\")", "var_name": "property"}, {"original_string": "private final ValueSnak valueSnak = new ValueSnakImpl(property, subject);", "modifier": "private final", "type": "ValueSnak", "declarator": "valueSnak = new ValueSnakImpl(property, subject)", "var_name": "valueSnak"}, {"original_string": "private final SnakGroup snakGroup = new SnakGroupImpl(\n\t\t\tCollections. singletonList(valueSnak));", "modifier": "private final", "type": "SnakGroup", "declarator": "snakGroup = new SnakGroupImpl(\n\t\t\tCollections. singletonList(valueSnak))", "var_name": "snakGroup"}, {"original_string": "private final Reference r1 = new ReferenceImpl(Collections.singletonList(snakGroup));", "modifier": "private final", "type": "Reference", "declarator": "r1 = new ReferenceImpl(Collections.singletonList(snakGroup))", "var_name": "r1"}, {"original_string": "private final Reference r2 = new ReferenceImpl(Collections.singletonList(snakGroup));", "modifier": "private final", "type": "Reference", "declarator": "r2 = new ReferenceImpl(Collections.singletonList(snakGroup))", "var_name": "r2"}], "file": "wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/ReferenceImplTest.java"}, "test_case": {"identifier": "snakListIsCorrect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void snakListIsCorrect() {\n\t\tassertEquals(r1.getSnakGroups(),\n\t\t\t\tCollections.singletonList(snakGroup));\n\t}", "signature": "void snakListIsCorrect()", "full_signature": "@Test public void snakListIsCorrect()", "class_method_signature": "ReferenceImplTest.snakListIsCorrect()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getSnakGroups", "singletonList"]}, "focal_class": {"identifier": "ReferenceImpl", "superclass": "", "interfaces": "implements Reference", "fields": [{"original_string": "private List<SnakGroup> snakGroups;", "modifier": "private", "type": "List<SnakGroup>", "declarator": "snakGroups", "var_name": "snakGroups"}, {"original_string": "private final Map<String, List<Snak>> snaks;", "modifier": "private final", "type": "Map<String, List<Snak>>", "declarator": "snaks", "var_name": "snaks"}, {"original_string": "private final List<String> propertyOrder;", "modifier": "private final", "type": "List<String>", "declarator": "propertyOrder", "var_name": "propertyOrder"}, {"original_string": "private final String hash;", "modifier": "private final", "type": "String", "declarator": "hash", "var_name": "hash"}], "methods": [{"identifier": "ReferenceImpl", "parameters": "(List<SnakGroup> groups)", "modifiers": "public", "return": "", "signature": " ReferenceImpl(List<SnakGroup> groups)", "full_signature": "public  ReferenceImpl(List<SnakGroup> groups)", "class_method_signature": "ReferenceImpl.ReferenceImpl(List<SnakGroup> groups)", "testcase": false, "constructor": true}, {"identifier": "ReferenceImpl", "parameters": "(\n\t\t\t@JsonProperty(\"snaks\") Map<String, List<SnakImpl>> snaks,\n\t\t\t@JsonProperty(\"snaks-order\") List<String> propertyOrder,\n\t\t\t@JsonProperty(\"hash\") String hash)", "modifiers": "@JsonCreator protected", "return": "", "signature": " ReferenceImpl(\n\t\t\t@JsonProperty(\"snaks\") Map<String, List<SnakImpl>> snaks,\n\t\t\t@JsonProperty(\"snaks-order\") List<String> propertyOrder,\n\t\t\t@JsonProperty(\"hash\") String hash)", "full_signature": "@JsonCreator protected  ReferenceImpl(\n\t\t\t@JsonProperty(\"snaks\") Map<String, List<SnakImpl>> snaks,\n\t\t\t@JsonProperty(\"snaks-order\") List<String> propertyOrder,\n\t\t\t@JsonProperty(\"hash\") String hash)", "class_method_signature": "ReferenceImpl.ReferenceImpl(\n\t\t\t@JsonProperty(\"snaks\") Map<String, List<SnakImpl>> snaks,\n\t\t\t@JsonProperty(\"snaks-order\") List<String> propertyOrder,\n\t\t\t@JsonProperty(\"hash\") String hash)", "testcase": false, "constructor": true}, {"identifier": "getSnakGroups", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "List<SnakGroup>", "signature": "List<SnakGroup> getSnakGroups()", "full_signature": "@JsonIgnore @Override public List<SnakGroup> getSnakGroups()", "class_method_signature": "ReferenceImpl.getSnakGroups()", "testcase": false, "constructor": false}, {"identifier": "getSnaks", "parameters": "()", "modifiers": "@JsonProperty(\"snaks\") public", "return": "Map<String, List<Snak>>", "signature": "Map<String, List<Snak>> getSnaks()", "full_signature": "@JsonProperty(\"snaks\") public Map<String, List<Snak>> getSnaks()", "class_method_signature": "ReferenceImpl.getSnaks()", "testcase": false, "constructor": false}, {"identifier": "getHash", "parameters": "()", "modifiers": "@Override @JsonInclude(JsonInclude.Include.NON_NULL) public", "return": "String", "signature": "String getHash()", "full_signature": "@Override @JsonInclude(JsonInclude.Include.NON_NULL) public String getHash()", "class_method_signature": "ReferenceImpl.getHash()", "testcase": false, "constructor": false}, {"identifier": "getPropertyOrder", "parameters": "()", "modifiers": "@JsonProperty(\"snaks-order\") public", "return": "List<String>", "signature": "List<String> getPropertyOrder()", "full_signature": "@JsonProperty(\"snaks-order\") public List<String> getPropertyOrder()", "class_method_signature": "ReferenceImpl.getPropertyOrder()", "testcase": false, "constructor": false}, {"identifier": "getAllSnaks", "parameters": "()", "modifiers": "@Override @JsonIgnore public", "return": "Iterator<Snak>", "signature": "Iterator<Snak> getAllSnaks()", "full_signature": "@Override @JsonIgnore public Iterator<Snak> getAllSnaks()", "class_method_signature": "ReferenceImpl.getAllSnaks()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ReferenceImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ReferenceImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ReferenceImpl.toString()", "testcase": false, "constructor": false}], "file": "wdtk-datamodel/src/main/java/org/wikidata/wdtk/datamodel/implementation/ReferenceImpl.java"}, "focal_method": {"identifier": "getSnakGroups", "parameters": "()", "modifiers": "@JsonIgnore @Override public", "return": "List<SnakGroup>", "body": "@JsonIgnore\n\t@Override\n\tpublic List<SnakGroup> getSnakGroups() {\n\t\tif (this.snakGroups == null) {\n\t\t\tthis.snakGroups = SnakGroupImpl.makeSnakGroups(this.snaks,\n\t\t\t\t\tthis.propertyOrder);\n\t\t}\n\t\treturn this.snakGroups;\n\t}", "signature": "List<SnakGroup> getSnakGroups()", "full_signature": "@JsonIgnore @Override public List<SnakGroup> getSnakGroups()", "class_method_signature": "ReferenceImpl.getSnakGroups()", "testcase": false, "constructor": false, "invocations": ["makeSnakGroups"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}