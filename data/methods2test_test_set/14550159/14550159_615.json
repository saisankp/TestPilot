{"test_class": {"identifier": "SecurityConstraintTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private PermitAll             permitAll;", "modifier": "private", "type": "PermitAll", "declarator": "permitAll", "var_name": "permitAll"}, {"original_string": "private DenyAll               denyAll;", "modifier": "private", "type": "DenyAll", "declarator": "denyAll", "var_name": "denyAll"}, {"original_string": "private RolesAllowed          rolesAllowed;", "modifier": "private", "type": "RolesAllowed", "declarator": "rolesAllowed", "var_name": "rolesAllowed"}, {"original_string": "private GenericResourceMethod resourceMethod;", "modifier": "private", "type": "GenericResourceMethod", "declarator": "resourceMethod", "var_name": "resourceMethod"}, {"original_string": "private SecurityContext       securityContext;", "modifier": "private", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}, {"original_string": "private SecurityConstraint securityConstraint;", "modifier": "private", "type": "SecurityConstraint", "declarator": "securityConstraint", "var_name": "securityConstraint"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/method/filter/SecurityConstraintTest.java"}, "test_case": {"identifier": "allowsAccessWhenPermitAllAnnotationPresents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void allowsAccessWhenPermitAllAnnotationPresents() {\n        when(resourceMethod.getAnnotations()).thenReturn(new Annotation[] {permitAll});\n\n        securityConstraint.accept(resourceMethod, null);\n    }", "signature": "void allowsAccessWhenPermitAllAnnotationPresents()", "full_signature": "@Test public void allowsAccessWhenPermitAllAnnotationPresents()", "class_method_signature": "SecurityConstraintTest.allowsAccessWhenPermitAllAnnotationPresents()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAnnotations", "accept"]}, "focal_class": {"identifier": "SecurityConstraint", "superclass": "", "interfaces": "implements MethodInvokerFilter", "fields": [], "methods": [{"identifier": "accept", "parameters": "(GenericResourceMethod method, Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void accept(GenericResourceMethod method, Object[] params)", "full_signature": "@Override public void accept(GenericResourceMethod method, Object[] params)", "class_method_signature": "SecurityConstraint.accept(GenericResourceMethod method, Object[] params)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/method/filter/SecurityConstraint.java"}, "focal_method": {"identifier": "accept", "parameters": "(GenericResourceMethod method, Object[] params)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void accept(GenericResourceMethod method, Object[] params) throws WebApplicationException {\n        for (Annotation annotation : method.getAnnotations()) {\n            Class<?> annotationType = annotation.annotationType();\n            if (annotationType == PermitAll.class) {\n                return;\n            } else if (annotationType == DenyAll.class) {\n                throw new WebApplicationException(Response.status(FORBIDDEN)\n                                                          .entity(\"User not authorized to call this method\").type(TEXT_PLAIN)\n                                                          .build());\n            } else if (annotationType == RolesAllowed.class) {\n                SecurityContext security = ApplicationContext.getCurrent().getSecurityContext();\n                for (String role : ((RolesAllowed)annotation).value()) {\n                    if (security.isUserInRole(role)) {\n                        return;\n                    }\n                }\n                throw new WebApplicationException(Response.status(FORBIDDEN)\n                                                          .entity(\"User not authorized to call this method\").type(TEXT_PLAIN)\n                                                          .build());\n            }\n        }\n    }", "signature": "void accept(GenericResourceMethod method, Object[] params)", "full_signature": "@Override public void accept(GenericResourceMethod method, Object[] params)", "class_method_signature": "SecurityConstraint.accept(GenericResourceMethod method, Object[] params)", "testcase": false, "constructor": false, "invocations": ["getAnnotations", "annotationType", "build", "type", "entity", "status", "getSecurityContext", "getCurrent", "value", "isUserInRole", "build", "type", "entity", "status"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}