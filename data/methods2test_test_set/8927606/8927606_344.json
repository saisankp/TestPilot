{"test_class": {"identifier": "SoapValidatorTest", "superclass": "extends PipeTestBase<SoapValidator>", "interfaces": "", "fields": [{"original_string": "public String SCHEMALOCATION_SET_GPBDB = ValidatorTestBase.SCHEMA_LOCATION_GPBDB_MESSAGE+\" \"+\n\t\t\tValidatorTestBase.SCHEMA_LOCATION_GPBDB_GPBDB+\" \"+\n\t\t\tValidatorTestBase.SCHEMA_LOCATION_GPBDB_RESPONSE+\" \"+\n\t\t\tValidatorTestBase.SCHEMA_LOCATION_GPBDB_REQUEST;", "modifier": "public", "type": "String", "declarator": "SCHEMALOCATION_SET_GPBDB = ValidatorTestBase.SCHEMA_LOCATION_GPBDB_MESSAGE+\" \"+\n\t\t\tValidatorTestBase.SCHEMA_LOCATION_GPBDB_GPBDB+\" \"+\n\t\t\tValidatorTestBase.SCHEMA_LOCATION_GPBDB_RESPONSE+\" \"+\n\t\t\tValidatorTestBase.SCHEMA_LOCATION_GPBDB_REQUEST", "var_name": "SCHEMALOCATION_SET_GPBDB"}, {"original_string": "public String INPUT_FILE_GPBDB_VALID_SOAP\t\t\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/valid_soap.xml\";", "modifier": "public", "type": "String", "declarator": "INPUT_FILE_GPBDB_VALID_SOAP\t\t\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/valid_soap.xml\"", "var_name": "INPUT_FILE_GPBDB_VALID_SOAP"}, {"original_string": "public String INPUT_FILE_GPBDB_VALID_SOAP_1_2\t\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/valid_soap_1.2.xml\";", "modifier": "public", "type": "String", "declarator": "INPUT_FILE_GPBDB_VALID_SOAP_1_2\t\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/valid_soap_1.2.xml\"", "var_name": "INPUT_FILE_GPBDB_VALID_SOAP_1_2"}, {"original_string": "public String INPUT_FILE_GPBDB_INVALID_SOAP\t\t\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/invalid_soap.xml\";", "modifier": "public", "type": "String", "declarator": "INPUT_FILE_GPBDB_INVALID_SOAP\t\t\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/invalid_soap.xml\"", "var_name": "INPUT_FILE_GPBDB_INVALID_SOAP"}, {"original_string": "public String INPUT_FILE_GPBDB_INVALID_SOAP_BODY\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/invalid_soap_body.xml\";", "modifier": "public", "type": "String", "declarator": "INPUT_FILE_GPBDB_INVALID_SOAP_BODY\t\t\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/invalid_soap_body.xml\"", "var_name": "INPUT_FILE_GPBDB_INVALID_SOAP_BODY"}, {"original_string": "public String INPUT_FILE_GPBDB_UNKNOWN_NAMESPACE_SOAP_BODY\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/unknown_namespace_soap_body.xml\";", "modifier": "public", "type": "String", "declarator": "INPUT_FILE_GPBDB_UNKNOWN_NAMESPACE_SOAP_BODY\t=ValidatorTestBase.BASE_DIR_VALIDATION+\"/Tibco/Soap/unknown_namespace_soap_body.xml\"", "var_name": "INPUT_FILE_GPBDB_UNKNOWN_NAMESPACE_SOAP_BODY"}], "file": "core/src/test/java/nl/nn/adapterframework/soap/SoapValidatorTest.java"}, "test_case": {"identifier": "defaultNamespace", "parameters": "()", "modifiers": "@Test @Ignore(\"Don't know what it should test any more\") public", "return": "void", "body": "@Test\n\t@Ignore(\"Don't know what it should test any more\")\n\tpublic void defaultNamespace() {\n\t\tpipe.setSchemaLocation(\"http://www.ing.com/pim test.xsd\");\n\t\tpipe.setSoapBody(\"a\");\n//\t\tWTF assertEquals(new QName(\"http://www.ing.com/pim\", \"a\"), validator.getSoapBodyTags().iterator().next());\n\t}", "signature": "void defaultNamespace()", "full_signature": "@Test @Ignore(\"Don't know what it should test any more\") public void defaultNamespace()", "class_method_signature": "SoapValidatorTest.defaultNamespace()", "testcase": true, "constructor": false, "invocations": ["setSchemaLocation", "setSoapBody"]}, "focal_class": {"identifier": "SoapValidator", "superclass": "extends Json2XmlValidator", "interfaces": "", "fields": [{"original_string": "private String soapBody = \"\";", "modifier": "private", "type": "String", "declarator": "soapBody = \"\"", "var_name": "soapBody"}, {"original_string": "private String outputSoapBody = \"\";", "modifier": "private", "type": "String", "declarator": "outputSoapBody = \"\"", "var_name": "outputSoapBody"}, {"original_string": "private String soapHeader = \"\";", "modifier": "private", "type": "String", "declarator": "soapHeader = \"\"", "var_name": "soapHeader"}, {"original_string": "private String soapHeaderNamespace = \"\";", "modifier": "private", "type": "String", "declarator": "soapHeaderNamespace = \"\"", "var_name": "soapHeaderNamespace"}, {"original_string": "private SoapVersion soapVersion = SoapVersion.SOAP11;", "modifier": "private", "type": "SoapVersion", "declarator": "soapVersion = SoapVersion.SOAP11", "var_name": "soapVersion"}, {"original_string": "private boolean allowPlainXml = false;", "modifier": "private", "type": "boolean", "declarator": "allowPlainXml = false", "var_name": "allowPlainXml"}, {"original_string": "protected boolean addSoapEnvelopeToSchemaLocation = true;", "modifier": "protected", "type": "boolean", "declarator": "addSoapEnvelopeToSchemaLocation = true", "var_name": "addSoapEnvelopeToSchemaLocation"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "SoapValidator.configure()", "testcase": false, "constructor": false}, {"identifier": "isConfiguredForMixedValidation", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isConfiguredForMixedValidation()", "full_signature": "@Override protected boolean isConfiguredForMixedValidation()", "class_method_signature": "SoapValidator.isConfiguredForMixedValidation()", "testcase": false, "constructor": false}, {"identifier": "setSchema", "parameters": "(String schema)", "modifiers": "@Override public", "return": "void", "signature": "void setSchema(String schema)", "full_signature": "@Override public void setSchema(String schema)", "class_method_signature": "SoapValidator.setSchema(String schema)", "testcase": false, "constructor": false}, {"identifier": "setNoNamespaceSchemaLocation", "parameters": "(String noNamespaceSchemaLocation)", "modifiers": "@Override public", "return": "void", "signature": "void setNoNamespaceSchemaLocation(String noNamespaceSchemaLocation)", "full_signature": "@Override public void setNoNamespaceSchemaLocation(String noNamespaceSchemaLocation)", "class_method_signature": "SoapValidator.setNoNamespaceSchemaLocation(String noNamespaceSchemaLocation)", "testcase": false, "constructor": false}, {"identifier": "getMessageRoot", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMessageRoot()", "full_signature": "@Override public String getMessageRoot()", "class_method_signature": "SoapValidator.getMessageRoot()", "testcase": false, "constructor": false}, {"identifier": "getResponseRoot", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getResponseRoot()", "full_signature": "@Override public String getResponseRoot()", "class_method_signature": "SoapValidator.getResponseRoot()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRoot()", "full_signature": "@Override public String getRoot()", "class_method_signature": "SoapValidator.getRoot()", "testcase": false, "constructor": false}, {"identifier": "setRoot", "parameters": "(String r)", "modifiers": "@IbisDoc({ \"always envelope (not allowed to change)\", \"envelope\" }) @Override public", "return": "void", "signature": "void setRoot(String r)", "full_signature": "@IbisDoc({ \"always envelope (not allowed to change)\", \"envelope\" }) @Override public void setRoot(String r)", "class_method_signature": "SoapValidator.setRoot(String r)", "testcase": false, "constructor": false}, {"identifier": "setSoapBody", "parameters": "(String soapBody)", "modifiers": "@IbisDoc({\"1\", \"name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)\", \"\" }) public", "return": "void", "signature": "void setSoapBody(String soapBody)", "full_signature": "@IbisDoc({\"1\", \"name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)\", \"\" }) public void setSoapBody(String soapBody)", "class_method_signature": "SoapValidator.setSoapBody(String soapBody)", "testcase": false, "constructor": false}, {"identifier": "getSoapBody", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSoapBody()", "full_signature": "public String getSoapBody()", "class_method_signature": "SoapValidator.getSoapBody()", "testcase": false, "constructor": false}, {"identifier": "setOutputSoapBody", "parameters": "(String outputSoapBody)", "modifiers": "@IbisDoc({\"2\", \"identical to the <code>soapbody</code> attribute except that it's used for the output message instead of the input message. for more information see <a href=\\\"#note1\\\">note 1</a>\", \"\" }) public", "return": "void", "signature": "void setOutputSoapBody(String outputSoapBody)", "full_signature": "@IbisDoc({\"2\", \"identical to the <code>soapbody</code> attribute except that it's used for the output message instead of the input message. for more information see <a href=\\\"#note1\\\">note 1</a>\", \"\" }) public void setOutputSoapBody(String outputSoapBody)", "class_method_signature": "SoapValidator.setOutputSoapBody(String outputSoapBody)", "testcase": false, "constructor": false}, {"identifier": "getOutputSoapBody", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOutputSoapBody()", "full_signature": "public String getOutputSoapBody()", "class_method_signature": "SoapValidator.getOutputSoapBody()", "testcase": false, "constructor": false}, {"identifier": "setSoapHeader", "parameters": "(String soapHeader)", "modifiers": "@IbisDoc({\"3\", \"name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)\", \"\" }) public", "return": "void", "signature": "void setSoapHeader(String soapHeader)", "full_signature": "@IbisDoc({\"3\", \"name of the child element of the soap header. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap header, for example to allow element x and an empty soap header use: x,)\", \"\" }) public void setSoapHeader(String soapHeader)", "class_method_signature": "SoapValidator.setSoapHeader(String soapHeader)", "testcase": false, "constructor": false}, {"identifier": "getSoapHeader", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSoapHeader()", "full_signature": "public String getSoapHeader()", "class_method_signature": "SoapValidator.getSoapHeader()", "testcase": false, "constructor": false}, {"identifier": "setSoapHeaderNamespace", "parameters": "(String soapHeaderNamespace)", "modifiers": "@IbisDoc({\"4\", \"can be used when the soap header element exists multiple times\", \"\" }) public", "return": "void", "signature": "void setSoapHeaderNamespace(String soapHeaderNamespace)", "full_signature": "@IbisDoc({\"4\", \"can be used when the soap header element exists multiple times\", \"\" }) public void setSoapHeaderNamespace(String soapHeaderNamespace)", "class_method_signature": "SoapValidator.setSoapHeaderNamespace(String soapHeaderNamespace)", "testcase": false, "constructor": false}, {"identifier": "getSoapHeaderNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSoapHeaderNamespace()", "full_signature": "public String getSoapHeaderNamespace()", "class_method_signature": "SoapValidator.getSoapHeaderNamespace()", "testcase": false, "constructor": false}, {"identifier": "setSoapVersion", "parameters": "(String soapVersion)", "modifiers": "@IbisDoc({\"5\", \"soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2)\", \"1.1\" }) public", "return": "void", "signature": "void setSoapVersion(String soapVersion)", "full_signature": "@IbisDoc({\"5\", \"soap envelope xsd version to use: 1.1, 1.2 or any (both 1.1 and 1.2)\", \"1.1\" }) public void setSoapVersion(String soapVersion)", "class_method_signature": "SoapValidator.setSoapVersion(String soapVersion)", "testcase": false, "constructor": false}, {"identifier": "getSoapVersionEnum", "parameters": "()", "modifiers": "public", "return": "SoapVersion", "signature": "SoapVersion getSoapVersionEnum()", "full_signature": "public SoapVersion getSoapVersionEnum()", "class_method_signature": "SoapValidator.getSoapVersionEnum()", "testcase": false, "constructor": false}, {"identifier": "setAllowPlainXml", "parameters": "(boolean allowPlainXml)", "modifiers": "@IbisDoc({\"6\", \"allow plain xml, without a SOAP Envelope, too\", \"false\"}) public", "return": "void", "signature": "void setAllowPlainXml(boolean allowPlainXml)", "full_signature": "@IbisDoc({\"6\", \"allow plain xml, without a SOAP Envelope, too\", \"false\"}) public void setAllowPlainXml(boolean allowPlainXml)", "class_method_signature": "SoapValidator.setAllowPlainXml(boolean allowPlainXml)", "testcase": false, "constructor": false}, {"identifier": "isAllowPlainXml", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowPlainXml()", "full_signature": "public boolean isAllowPlainXml()", "class_method_signature": "SoapValidator.isAllowPlainXml()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/soap/SoapValidator.java"}, "focal_method": {"identifier": "setSoapBody", "parameters": "(String soapBody)", "modifiers": "@IbisDoc({\"1\", \"name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)\", \"\" }) public", "return": "void", "body": "@IbisDoc({\"1\", \"name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)\", \"\" })\n\tpublic void setSoapBody(String soapBody) {\n\t\tthis.soapBody = soapBody;\n\t}", "signature": "void setSoapBody(String soapBody)", "full_signature": "@IbisDoc({\"1\", \"name of the child element of the soap body. or a comma separated list of names to choose from (only one is allowed) (wsdl generator will use the first element) (use empty value to allow an empty soap body, for example to allow element x and an empty soap body use: x,)\", \"\" }) public void setSoapBody(String soapBody)", "class_method_signature": "SoapValidator.setSoapBody(String soapBody)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}