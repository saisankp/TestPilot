{"test_class": {"identifier": "TopicConfigManagerTest", "superclass": "", "interfaces": "", "fields": [], "file": "rocketmq-broker/src/test/java/com/alibaba/rocketmq/broker/topic/TopicConfigManagerTest.java"}, "test_case": {"identifier": "test_flushTopicConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_flushTopicConfig() throws Exception {\n        BrokerController brokerController = new BrokerController(//\n            new BrokerConfig(), //\n            new NettyServerConfig(), //\n            new NettyClientConfig(), //\n            new MessageStoreConfig());\n        boolean initResult = brokerController.initialize();\n        System.out.println(\"initialize \" + initResult);\n        brokerController.start();\n\n        TopicConfigManager topicConfigManager = new TopicConfigManager(brokerController);\n\n        TopicConfig topicConfig =\n                topicConfigManager.createTopicInSendMessageMethod(\"TestTopic_SEND\", MixAll.DEFAULT_TOPIC,\n                    null, 4, 0);\n        assertTrue(topicConfig != null);\n\n        System.out.println(topicConfig);\n\n        for (int i = 0; i < 10; i++) {\n            String topic = \"UNITTEST-\" + i;\n            topicConfig =\n                    topicConfigManager\n                        .createTopicInSendMessageMethod(topic, MixAll.DEFAULT_TOPIC, null, 4, 0);\n            assertTrue(topicConfig != null);\n        }\n\n        topicConfigManager.persist();\n\n        brokerController.shutdown();\n    }", "signature": "void test_flushTopicConfig()", "full_signature": "@Test public void test_flushTopicConfig()", "class_method_signature": "TopicConfigManagerTest.test_flushTopicConfig()", "testcase": true, "constructor": false, "invocations": ["initialize", "println", "start", "createTopicInSendMessageMethod", "assertTrue", "println", "createTopicInSendMessageMethod", "assertTrue", "persist", "shutdown"]}, "focal_class": {"identifier": "TopicConfigManager", "superclass": "extends ConfigManager", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(LoggerName.BrokerLoggerName);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoggerName.BrokerLoggerName)", "var_name": "log"}, {"original_string": "private static final long LockTimeoutMillis = 3000;", "modifier": "private static final", "type": "long", "declarator": "LockTimeoutMillis = 3000", "var_name": "LockTimeoutMillis"}, {"original_string": "private transient final Lock lockTopicConfigTable = new ReentrantLock();", "modifier": "private transient final", "type": "Lock", "declarator": "lockTopicConfigTable = new ReentrantLock()", "var_name": "lockTopicConfigTable"}, {"original_string": "private transient BrokerController brokerController;", "modifier": "private transient", "type": "BrokerController", "declarator": "brokerController", "var_name": "brokerController"}, {"original_string": "private final ConcurrentHashMap<String, TopicConfig> topicConfigTable = new ConcurrentHashMap<String, TopicConfig>(1024);", "modifier": "private final", "type": "ConcurrentHashMap<String, TopicConfig>", "declarator": "topicConfigTable = new ConcurrentHashMap<String, TopicConfig>(1024)", "var_name": "topicConfigTable"}, {"original_string": "private final DataVersion dataVersion = new DataVersion();", "modifier": "private final", "type": "DataVersion", "declarator": "dataVersion = new DataVersion()", "var_name": "dataVersion"}, {"original_string": "private final Set<String> systemTopicList = new HashSet<String>();", "modifier": "private final", "type": "Set<String>", "declarator": "systemTopicList = new HashSet<String>()", "var_name": "systemTopicList"}], "methods": [{"identifier": "TopicConfigManager", "parameters": "()", "modifiers": "public", "return": "", "signature": " TopicConfigManager()", "full_signature": "public  TopicConfigManager()", "class_method_signature": "TopicConfigManager.TopicConfigManager()", "testcase": false, "constructor": true}, {"identifier": "TopicConfigManager", "parameters": "(BrokerController brokerController)", "modifiers": "public", "return": "", "signature": " TopicConfigManager(BrokerController brokerController)", "full_signature": "public  TopicConfigManager(BrokerController brokerController)", "class_method_signature": "TopicConfigManager.TopicConfigManager(BrokerController brokerController)", "testcase": false, "constructor": true}, {"identifier": "isSystemTopic", "parameters": "(final String topic)", "modifiers": "public", "return": "boolean", "signature": "boolean isSystemTopic(final String topic)", "full_signature": "public boolean isSystemTopic(final String topic)", "class_method_signature": "TopicConfigManager.isSystemTopic(final String topic)", "testcase": false, "constructor": false}, {"identifier": "getSystemTopic", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getSystemTopic()", "full_signature": "public Set<String> getSystemTopic()", "class_method_signature": "TopicConfigManager.getSystemTopic()", "testcase": false, "constructor": false}, {"identifier": "isTopicCanSendMessage", "parameters": "(final String topic)", "modifiers": "public", "return": "boolean", "signature": "boolean isTopicCanSendMessage(final String topic)", "full_signature": "public boolean isTopicCanSendMessage(final String topic)", "class_method_signature": "TopicConfigManager.isTopicCanSendMessage(final String topic)", "testcase": false, "constructor": false}, {"identifier": "selectTopicConfig", "parameters": "(final String topic)", "modifiers": "public", "return": "TopicConfig", "signature": "TopicConfig selectTopicConfig(final String topic)", "full_signature": "public TopicConfig selectTopicConfig(final String topic)", "class_method_signature": "TopicConfigManager.selectTopicConfig(final String topic)", "testcase": false, "constructor": false}, {"identifier": "createTopicInSendMessageMethod", "parameters": "(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "modifiers": "public", "return": "TopicConfig", "signature": "TopicConfig createTopicInSendMessageMethod(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "full_signature": "public TopicConfig createTopicInSendMessageMethod(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "class_method_signature": "TopicConfigManager.createTopicInSendMessageMethod(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "testcase": false, "constructor": false}, {"identifier": "createTopicInSendMessageBackMethod", "parameters": "(//\n                                                          final String topic, //\n                                                          final int clientDefaultTopicQueueNums,//\n                                                          final int perm,//\n                                                          final int topicSysFlag)", "modifiers": "public", "return": "TopicConfig", "signature": "TopicConfig createTopicInSendMessageBackMethod(//\n                                                          final String topic, //\n                                                          final int clientDefaultTopicQueueNums,//\n                                                          final int perm,//\n                                                          final int topicSysFlag)", "full_signature": "public TopicConfig createTopicInSendMessageBackMethod(//\n                                                          final String topic, //\n                                                          final int clientDefaultTopicQueueNums,//\n                                                          final int perm,//\n                                                          final int topicSysFlag)", "class_method_signature": "TopicConfigManager.createTopicInSendMessageBackMethod(//\n                                                          final String topic, //\n                                                          final int clientDefaultTopicQueueNums,//\n                                                          final int perm,//\n                                                          final int topicSysFlag)", "testcase": false, "constructor": false}, {"identifier": "updateTopicUnitFlag", "parameters": "(final String topic, final boolean unit)", "modifiers": "public", "return": "void", "signature": "void updateTopicUnitFlag(final String topic, final boolean unit)", "full_signature": "public void updateTopicUnitFlag(final String topic, final boolean unit)", "class_method_signature": "TopicConfigManager.updateTopicUnitFlag(final String topic, final boolean unit)", "testcase": false, "constructor": false}, {"identifier": "updateTopicUnitSubFlag", "parameters": "(final String topic, final boolean hasUnitSub)", "modifiers": "public", "return": "void", "signature": "void updateTopicUnitSubFlag(final String topic, final boolean hasUnitSub)", "full_signature": "public void updateTopicUnitSubFlag(final String topic, final boolean hasUnitSub)", "class_method_signature": "TopicConfigManager.updateTopicUnitSubFlag(final String topic, final boolean hasUnitSub)", "testcase": false, "constructor": false}, {"identifier": "updateTopicConfig", "parameters": "(final TopicConfig topicConfig)", "modifiers": "public", "return": "void", "signature": "void updateTopicConfig(final TopicConfig topicConfig)", "full_signature": "public void updateTopicConfig(final TopicConfig topicConfig)", "class_method_signature": "TopicConfigManager.updateTopicConfig(final TopicConfig topicConfig)", "testcase": false, "constructor": false}, {"identifier": "updateOrderTopicConfig", "parameters": "(final KVTable orderKVTableFromNs)", "modifiers": "public", "return": "void", "signature": "void updateOrderTopicConfig(final KVTable orderKVTableFromNs)", "full_signature": "public void updateOrderTopicConfig(final KVTable orderKVTableFromNs)", "class_method_signature": "TopicConfigManager.updateOrderTopicConfig(final KVTable orderKVTableFromNs)", "testcase": false, "constructor": false}, {"identifier": "isOrderTopic", "parameters": "(final String topic)", "modifiers": "public", "return": "boolean", "signature": "boolean isOrderTopic(final String topic)", "full_signature": "public boolean isOrderTopic(final String topic)", "class_method_signature": "TopicConfigManager.isOrderTopic(final String topic)", "testcase": false, "constructor": false}, {"identifier": "deleteTopicConfig", "parameters": "(final String topic)", "modifiers": "public", "return": "void", "signature": "void deleteTopicConfig(final String topic)", "full_signature": "public void deleteTopicConfig(final String topic)", "class_method_signature": "TopicConfigManager.deleteTopicConfig(final String topic)", "testcase": false, "constructor": false}, {"identifier": "buildTopicConfigSerializeWrapper", "parameters": "()", "modifiers": "public", "return": "TopicConfigSerializeWrapper", "signature": "TopicConfigSerializeWrapper buildTopicConfigSerializeWrapper()", "full_signature": "public TopicConfigSerializeWrapper buildTopicConfigSerializeWrapper()", "class_method_signature": "TopicConfigManager.buildTopicConfigSerializeWrapper()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String encode()", "full_signature": "@Override public String encode()", "class_method_signature": "TopicConfigManager.encode()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(final boolean prettyFormat)", "modifiers": "public", "return": "String", "signature": "String encode(final boolean prettyFormat)", "full_signature": "public String encode(final boolean prettyFormat)", "class_method_signature": "TopicConfigManager.encode(final boolean prettyFormat)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String jsonString)", "modifiers": "@Override public", "return": "void", "signature": "void decode(String jsonString)", "full_signature": "@Override public void decode(String jsonString)", "class_method_signature": "TopicConfigManager.decode(String jsonString)", "testcase": false, "constructor": false}, {"identifier": "printLoadDataWhenFirstBoot", "parameters": "(final TopicConfigSerializeWrapper tcs)", "modifiers": "private", "return": "void", "signature": "void printLoadDataWhenFirstBoot(final TopicConfigSerializeWrapper tcs)", "full_signature": "private void printLoadDataWhenFirstBoot(final TopicConfigSerializeWrapper tcs)", "class_method_signature": "TopicConfigManager.printLoadDataWhenFirstBoot(final TopicConfigSerializeWrapper tcs)", "testcase": false, "constructor": false}, {"identifier": "configFilePath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String configFilePath()", "full_signature": "@Override public String configFilePath()", "class_method_signature": "TopicConfigManager.configFilePath()", "testcase": false, "constructor": false}, {"identifier": "getDataVersion", "parameters": "()", "modifiers": "public", "return": "DataVersion", "signature": "DataVersion getDataVersion()", "full_signature": "public DataVersion getDataVersion()", "class_method_signature": "TopicConfigManager.getDataVersion()", "testcase": false, "constructor": false}, {"identifier": "getTopicConfigTable", "parameters": "()", "modifiers": "public", "return": "ConcurrentHashMap<String, TopicConfig>", "signature": "ConcurrentHashMap<String, TopicConfig> getTopicConfigTable()", "full_signature": "public ConcurrentHashMap<String, TopicConfig> getTopicConfigTable()", "class_method_signature": "TopicConfigManager.getTopicConfigTable()", "testcase": false, "constructor": false}], "file": "rocketmq-broker/src/main/java/com/alibaba/rocketmq/broker/topic/TopicConfigManager.java"}, "focal_method": {"identifier": "createTopicInSendMessageMethod", "parameters": "(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "modifiers": "public", "return": "TopicConfig", "body": "public TopicConfig createTopicInSendMessageMethod(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag) {\n        TopicConfig topicConfig = null;\n        boolean createNew = false;\n\n        try {\n            if (this.lockTopicConfigTable.tryLock(LockTimeoutMillis, TimeUnit.MILLISECONDS)) {\n                try {\n                    /**\n                     * \u6709Topic\uff0c\u76f4\u63a5\u8fd4\u56de\n                     */\n                    topicConfig = this.topicConfigTable.get(topic);\n                    if (topicConfig != null)\n                        return topicConfig;\n\n                    /**\n                     * \u6839\u636e\u9ed8\u8ba4\u7684Topic\u83b7\u53d6config\n                     */\n                    TopicConfig defaultTopicConfig = this.topicConfigTable.get(defaultTopic);\n                    if (defaultTopicConfig != null) {\n\n                        /**\n                         * \u5982\u679c\u9ed8\u8ba4Topic\u652f\u6301\u7ee7\u627f\n                         */\n                        if (PermName.isInherited(defaultTopicConfig.getPerm())) {\n                            /**\n                             * \u521b\u5efa\u65b0\u7684Topic\uff0c\u7ee7\u627f\u9ed8\u8ba4Topic\u7684\u4e00\u4e9b\u914d\u7f6e\u4fe1\u606f\n                             */\n                            topicConfig = new TopicConfig(topic);\n\n                            int queueNums =\n                                    clientDefaultTopicQueueNums > defaultTopicConfig.getWriteQueueNums() ? defaultTopicConfig\n                                            .getWriteQueueNums() : clientDefaultTopicQueueNums;\n\n                            if (queueNums < 0) {\n                                queueNums = 0;\n                            }\n\n                            topicConfig.setReadQueueNums(queueNums);\n                            topicConfig.setWriteQueueNums(queueNums);\n\n                            /**\n                             * \u5220\u9664\u5b50Topic\u7684\u7ee7\u627f\u6743\u9650\n                             */\n                            int perm = defaultTopicConfig.getPerm();\n                            perm &= ~PermName.PERM_INHERIT;\n\n                            topicConfig.setPerm(perm);\n                            topicConfig.setTopicSysFlag(topicSysFlag);\n                            topicConfig.setTopicFilterType(defaultTopicConfig.getTopicFilterType());\n\n                        } else {\n                            log.warn(\"create new topic failed, because the default topic[\" + defaultTopic\n                                    + \"] no perm, \" + defaultTopicConfig.getPerm() + \" producer: \"\n                                    + remoteAddress);\n                        }\n                    } else {\n                        /**\n                         * \u9ed8\u8ba4\u7684Topic\u4e0d\u5b58\u5728\uff0c\u4e0d\u5141\u8bb8\u81ea\u52a8\u521b\u5efaTopic\n                         */\n                        log.warn(\"create new topic failed, because the default topic[\" + defaultTopic\n                                + \"] not exist.\" + \" producer: \" + remoteAddress);\n                    }\n\n\n                    /**\n                     * \u65b0\u7684Topic\u914d\u7f6e\u521b\u5efa\u6210\u529f\n                     */\n                    if (topicConfig != null) {\n                        log.info(\"create new topic by default topic[\" + defaultTopic + \"], \" + topicConfig\n                                + \" producer: \" + remoteAddress);\n\n                        /**\n                         * \u6dfb\u52a0\u5230\u5185\u5b58\u4fdd\u5b58\n                         */\n                        this.topicConfigTable.put(topic, topicConfig);\n\n                        /**\n                         * \u5f53\u524dTopicConfigManager\u7248\u672c\u66f4\u65b0\n                         */\n                        this.dataVersion.nextVersion();\n\n                        createNew = true;\n\n                        /**\n                         * \u4fdd\u5b58Topic\u914d\u7f6e\u5230\u78c1\u76d8json\u6587\u4ef6\n                         * \u8def\u5f84/${user}/store/config/\u4e0b\n                         */\n                        this.persist();\n                    }\n                } finally {\n                    this.lockTopicConfigTable.unlock();\n                }\n            }\n        } catch (InterruptedException e) {\n            log.error(\"createTopicInSendMessageMethod exception\", e);\n        }\n\n        /**\n         * \u65b0\u521b\u5efa\u4e86Topc\uff0c\u9700\u8981\u91cd\u65b0\u6ce8\u518c\u4e00\u4e0b\uff0c\u628a\u65b0\u7684\u914d\u7f6e\u4fe1\u606f\u66f4\u65b0\u5230NameServer\n         */\n        if (createNew) {\n            this.brokerController.registerBrokerAll(false, true);\n        }\n\n        return topicConfig;\n    }", "signature": "TopicConfig createTopicInSendMessageMethod(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "full_signature": "public TopicConfig createTopicInSendMessageMethod(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "class_method_signature": "TopicConfigManager.createTopicInSendMessageMethod(final String topic, final String defaultTopic,\n                                                      final String remoteAddress, final int clientDefaultTopicQueueNums, final int topicSysFlag)", "testcase": false, "constructor": false, "invocations": ["tryLock", "get", "get", "isInherited", "getPerm", "getWriteQueueNums", "getWriteQueueNums", "setReadQueueNums", "setWriteQueueNums", "getPerm", "setPerm", "setTopicSysFlag", "setTopicFilterType", "getTopicFilterType", "warn", "getPerm", "warn", "info", "put", "nextVersion", "persist", "unlock", "error", "registerBrokerAll"]}, "repository": {"repo_id": 63689153, "url": "https://github.com/medusar/rocketmq-comment", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 8, "size": 1685, "license": "licensed"}}