{"test_class": {"identifier": "RequestLogicalOperatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "request-parameters/src/test/java/eu/neoteric/starter/request/RequestLogicalOperatorTest.java"}, "test_case": {"identifier": "testOfMethodShouldFailWhenIncorrectLogicalOperatorSpecified", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testOfMethodShouldFailWhenIncorrectLogicalOperatorSpecified() throws Exception {\n        RequestLogicalOperator requestLogicalOperator = RequestLogicalOperator.of(\"wrongLogicalOperator\");\n    }", "signature": "void testOfMethodShouldFailWhenIncorrectLogicalOperatorSpecified()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testOfMethodShouldFailWhenIncorrectLogicalOperatorSpecified()", "class_method_signature": "RequestLogicalOperatorTest.testOfMethodShouldFailWhenIncorrectLogicalOperatorSpecified()", "testcase": true, "constructor": false, "invocations": ["of"]}, "focal_class": {"identifier": "RequestLogicalOperator", "superclass": "", "interfaces": "implements RequestObject", "fields": [{"original_string": "private final LogicalOperatorType logicalOperator;", "modifier": "private final", "type": "LogicalOperatorType", "declarator": "logicalOperator", "var_name": "logicalOperator"}], "methods": [{"identifier": "RequestLogicalOperator", "parameters": "(LogicalOperatorType logicalOperator)", "modifiers": "private", "return": "", "signature": " RequestLogicalOperator(LogicalOperatorType logicalOperator)", "full_signature": "private  RequestLogicalOperator(LogicalOperatorType logicalOperator)", "class_method_signature": "RequestLogicalOperator.RequestLogicalOperator(LogicalOperatorType logicalOperator)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(String logicalOperator)", "modifiers": "public static", "return": "RequestLogicalOperator", "signature": "RequestLogicalOperator of(String logicalOperator)", "full_signature": "public static RequestLogicalOperator of(String logicalOperator)", "class_method_signature": "RequestLogicalOperator.of(String logicalOperator)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(LogicalOperatorType logicalOperatorType)", "modifiers": "public static", "return": "RequestLogicalOperator", "signature": "RequestLogicalOperator of(LogicalOperatorType logicalOperatorType)", "full_signature": "public static RequestLogicalOperator of(LogicalOperatorType logicalOperatorType)", "class_method_signature": "RequestLogicalOperator.of(LogicalOperatorType logicalOperatorType)", "testcase": false, "constructor": false}, {"identifier": "getOperator", "parameters": "()", "modifiers": "public", "return": "LogicalOperatorType", "signature": "LogicalOperatorType getOperator()", "full_signature": "public LogicalOperatorType getOperator()", "class_method_signature": "RequestLogicalOperator.getOperator()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "RequestObjectType", "signature": "RequestObjectType getType()", "full_signature": "@Override public RequestObjectType getType()", "class_method_signature": "RequestLogicalOperator.getType()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RequestLogicalOperator.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public final boolean equals(Object obj)", "class_method_signature": "RequestLogicalOperator.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public final", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public final int hashCode()", "class_method_signature": "RequestLogicalOperator.hashCode()", "testcase": false, "constructor": false}], "file": "request-parameters/src/main/java/eu/neoteric/starter/request/RequestLogicalOperator.java"}, "focal_method": {"identifier": "of", "parameters": "(String logicalOperator)", "modifiers": "public static", "return": "RequestLogicalOperator", "body": "public static RequestLogicalOperator of(String logicalOperator) {\n        return of(LogicalOperatorType.fromString(logicalOperator));\n    }", "signature": "RequestLogicalOperator of(String logicalOperator)", "full_signature": "public static RequestLogicalOperator of(String logicalOperator)", "class_method_signature": "RequestLogicalOperator.of(String logicalOperator)", "testcase": false, "constructor": false, "invocations": ["of", "fromString"]}, "repository": {"repo_id": 49945501, "url": "https://github.com/neoteric-eu/neo-starters", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 969, "license": "licensed"}}