{"test_class": {"identifier": "PedersenEqRangeProofTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final EcCurve curve = CommonConfiguration.CURVE;", "modifier": "public static final", "type": "EcCurve", "declarator": "curve = CommonConfiguration.CURVE", "var_name": "curve"}, {"original_string": "public static final EcPoint g = CommonConfiguration.g;", "modifier": "public static final", "type": "EcPoint", "declarator": "g = CommonConfiguration.g", "var_name": "g"}, {"original_string": "public static final EcPoint h = CommonConfiguration.h;", "modifier": "public static final", "type": "EcPoint", "declarator": "h = CommonConfiguration.h", "var_name": "h"}], "file": "pross-common/src/test/java/com/ibm/pross/common/util/crypto/zkp/pedersen/PedersenEqRangeProofTest.java"}, "test_case": {"identifier": "testVerifyPerformance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testVerifyPerformance() {\n\n\t\t// Generate encryption key\n\t\tfinal PaillierKeyGenerator keyGenerator = new PaillierKeyGenerator(2048);\n\t\tfinal PaillierKeyPair keyPair = keyGenerator.generate();\n\t\tfinal PaillierPublicKey publicKey = keyPair.getPublicKey();\n\n\t\tfinal BigInteger share1 = RandomNumberGenerator.generateRandomInteger(curve.getR());\n\t\tfinal BigInteger share2 = RandomNumberGenerator.generateRandomInteger(curve.getR());\n\n\t\t// Encrypt share\n\t\tfinal BigInteger n = publicKey.getN();\n\n\t\t// Encrypt first share\n\t\tfinal BigInteger r1 = RandomNumberGenerator.generateRandomCoprimeInRange(n);\n\t\tfinal BigInteger Ea = PaillierCipher.encrypt(publicKey, share1, r1);\n\n\t\t// Encrypt second share\n\t\tfinal BigInteger r2 = RandomNumberGenerator.generateRandomCoprimeInRange(n);\n\t\tfinal BigInteger Eb = PaillierCipher.encrypt(publicKey, share2, r2);\n\n\t\t// Create commitment\n\t\tfinal EcPoint S = curve.addPoints(curve.multiply(g, share1), curve.multiply(h, share2));\n\n\t\t// Warm up\n\t\tPedersenEqRangeProof proof = null;\n\t\tfor (int i = 0; i < 20; i++) {\n\t\t\tproof = PedersenEqRangeProofGenerator.generate(publicKey, share1, share2, r1, r2, Ea, Eb, S);\n\t\t}\n\t\tSystem.out.println(\"ZKP size: \" + proof.getSize());\n\n\t\t// Do test\n\t\tlong timeNs = 0;\n\t\tfinal int iterations = 1000;\n\t\tfor (int i = 0; i < iterations; i++) {\n\t\t\tproof = PedersenEqRangeProofGenerator.generate(publicKey, share1, share2, r1, r2, Ea, Eb, S);\n\t\t\tfinal long start = System.nanoTime();\n\t\t\tPedersenEqRangeProofVerifier.isValid(proof, Ea, Eb, S, publicKey);\n\t\t\tfinal long end = System.nanoTime();\n\t\t\ttimeNs += (end - start);\n\t\t}\n\n\t\tSystem.out.println(\"Total time (ms): \" + timeNs / (((long) iterations) * 1_000_000.0));\n\t}", "signature": "void testVerifyPerformance()", "full_signature": "@Test public void testVerifyPerformance()", "class_method_signature": "PedersenEqRangeProofTest.testVerifyPerformance()", "testcase": true, "constructor": false, "invocations": ["generate", "getPublicKey", "generateRandomInteger", "getR", "generateRandomInteger", "getR", "getN", "generateRandomCoprimeInRange", "encrypt", "generateRandomCoprimeInRange", "encrypt", "addPoints", "multiply", "multiply", "generate", "println", "getSize", "generate", "nanoTime", "isValid", "nanoTime", "println"]}, "focal_class": {"identifier": "PedersenEqRangeProof", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 4066675352715186273L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4066675352715186273L", "var_name": "serialVersionUID"}, {"original_string": "private final BigInteger Ealpha;", "modifier": "private final", "type": "BigInteger", "declarator": "Ealpha", "var_name": "Ealpha"}, {"original_string": "private final BigInteger Ebeta;", "modifier": "private final", "type": "BigInteger", "declarator": "Ebeta", "var_name": "Ebeta"}, {"original_string": "private final EcPoint S1;", "modifier": "private final", "type": "EcPoint", "declarator": "S1", "var_name": "S1"}, {"original_string": "private final BigInteger z1;", "modifier": "private final", "type": "BigInteger", "declarator": "z1", "var_name": "z1"}, {"original_string": "private final BigInteger z2;", "modifier": "private final", "type": "BigInteger", "declarator": "z2", "var_name": "z2"}, {"original_string": "private final BigInteger e1;", "modifier": "private final", "type": "BigInteger", "declarator": "e1", "var_name": "e1"}, {"original_string": "private final BigInteger e2;", "modifier": "private final", "type": "BigInteger", "declarator": "e2", "var_name": "e2"}], "methods": [{"identifier": "PedersenEqRangeProof", "parameters": "(final BigInteger Ealpha, BigInteger Ebeta, final EcPoint S1, final BigInteger z1,\n\t\t\tfinal BigInteger z2, final BigInteger e1, BigInteger e2)", "modifiers": "public", "return": "", "signature": " PedersenEqRangeProof(final BigInteger Ealpha, BigInteger Ebeta, final EcPoint S1, final BigInteger z1,\n\t\t\tfinal BigInteger z2, final BigInteger e1, BigInteger e2)", "full_signature": "public  PedersenEqRangeProof(final BigInteger Ealpha, BigInteger Ebeta, final EcPoint S1, final BigInteger z1,\n\t\t\tfinal BigInteger z2, final BigInteger e1, BigInteger e2)", "class_method_signature": "PedersenEqRangeProof.PedersenEqRangeProof(final BigInteger Ealpha, BigInteger Ebeta, final EcPoint S1, final BigInteger z1,\n\t\t\tfinal BigInteger z2, final BigInteger e1, BigInteger e2)", "testcase": false, "constructor": true}, {"identifier": "getEalpha", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getEalpha()", "full_signature": "public BigInteger getEalpha()", "class_method_signature": "PedersenEqRangeProof.getEalpha()", "testcase": false, "constructor": false}, {"identifier": "getEbeta", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getEbeta()", "full_signature": "public BigInteger getEbeta()", "class_method_signature": "PedersenEqRangeProof.getEbeta()", "testcase": false, "constructor": false}, {"identifier": "getS1", "parameters": "()", "modifiers": "public", "return": "EcPoint", "signature": "EcPoint getS1()", "full_signature": "public EcPoint getS1()", "class_method_signature": "PedersenEqRangeProof.getS1()", "testcase": false, "constructor": false}, {"identifier": "getZ1", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getZ1()", "full_signature": "public BigInteger getZ1()", "class_method_signature": "PedersenEqRangeProof.getZ1()", "testcase": false, "constructor": false}, {"identifier": "getZ2", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getZ2()", "full_signature": "public BigInteger getZ2()", "class_method_signature": "PedersenEqRangeProof.getZ2()", "testcase": false, "constructor": false}, {"identifier": "getE1", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getE1()", "full_signature": "public BigInteger getE1()", "class_method_signature": "PedersenEqRangeProof.getE1()", "testcase": false, "constructor": false}, {"identifier": "getE2", "parameters": "()", "modifiers": "public", "return": "BigInteger", "signature": "BigInteger getE2()", "full_signature": "public BigInteger getE2()", "class_method_signature": "PedersenEqRangeProof.getE2()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PedersenEqRangeProof.toString()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "PedersenEqRangeProof.getSize()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PedersenEqRangeProof.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PedersenEqRangeProof.equals(Object obj)", "testcase": false, "constructor": false}], "file": "pross-common/src/main/java/com/ibm/pross/common/util/crypto/zkp/pedersen/PedersenEqRangeProof.java"}, "focal_method": {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "long", "body": "public long getSize() {\n\t\treturn Ealpha.toByteArray().length + Ebeta.toByteArray().length + (S1.getX().toByteArray().length + 1)\n\t\t\t\t+ z1.toByteArray().length + z2.toByteArray().length + e1.toByteArray().length + e2.toByteArray().length;\n\t}", "signature": "long getSize()", "full_signature": "public long getSize()", "class_method_signature": "PedersenEqRangeProof.getSize()", "testcase": false, "constructor": false, "invocations": ["toByteArray", "toByteArray", "toByteArray", "getX", "toByteArray", "toByteArray", "toByteArray", "toByteArray"]}, "repository": {"repo_id": 144309611, "url": "https://github.com/jasonkresch/protect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 38, "size": 1932, "license": "licensed"}}