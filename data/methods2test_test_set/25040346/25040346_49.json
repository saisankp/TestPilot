{"test_class": {"identifier": "VideoEncoderTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "domain/src/test/java/org/m4m/domain/VideoEncoderTest.java"}, "test_case": {"identifier": "canConfigure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canConfigure() {\n        IMediaCodec mediaCodec = create.mediaCodec().construct();\n\n        VideoFormat videoFormat = create.videoFormat()\n                .withFrameSize(1024, 768)\n                .withBitRate(100)\n                .withFrameRate(10)\n                .withIFrameInterval(1)\n                .construct();\n        MediaCodecInfo.CodecCapabilities codecCapabilities = new MediaCodecInfo.CodecCapabilities();\n        videoFormat.setColorFormat(codecCapabilities.COLOR_FormatSurface);\n\n        VideoEncoder encoder = new VideoEncoder(mediaCodec);\n        encoder.setMediaFormat(videoFormat);\n        encoder.configure();\n\n        ArgumentCaptor<VideoFormat> actualVideoFormat = ArgumentCaptor.forClass(VideoFormat.class);\n        verify(mediaCodec).configure(actualVideoFormat.capture(), any(ISurfaceWrapper.class), anyInt());\n        assertEquals(100, actualVideoFormat.getValue().getVideoBitRateInKBytes());\n        assertEquals(10, actualVideoFormat.getValue().getVideoFrameRate());\n        assertEquals(1, actualVideoFormat.getValue().getVideoIFrameInterval());\n        assertEquals(2130708361, actualVideoFormat.getValue().getInteger(\"color-format\"));\n    }", "signature": "void canConfigure()", "full_signature": "@Test public void canConfigure()", "class_method_signature": "VideoEncoderTest.canConfigure()", "testcase": true, "constructor": false, "invocations": ["construct", "mediaCodec", "construct", "withIFrameInterval", "withFrameRate", "withBitRate", "withFrameSize", "videoFormat", "setColorFormat", "setMediaFormat", "configure", "forClass", "configure", "verify", "capture", "any", "anyInt", "assertEquals", "getVideoBitRateInKBytes", "getValue", "assertEquals", "getVideoFrameRate", "getValue", "assertEquals", "getVideoIFrameInterval", "getValue", "assertEquals", "getInteger", "getValue"]}, "focal_class": {"identifier": "VideoEncoder", "superclass": "extends Encoder", "interfaces": "implements ITransform", "fields": [], "methods": [{"identifier": "VideoEncoder", "parameters": "(IMediaCodec mediaCodec)", "modifiers": "public", "return": "", "signature": " VideoEncoder(IMediaCodec mediaCodec)", "full_signature": "public  VideoEncoder(IMediaCodec mediaCodec)", "class_method_signature": "VideoEncoder.VideoEncoder(IMediaCodec mediaCodec)", "testcase": false, "constructor": true}, {"identifier": "setMediaFormat", "parameters": "(MediaFormat inputMediaFormat)", "modifiers": "@Override public", "return": "void", "signature": "void setMediaFormat(MediaFormat inputMediaFormat)", "full_signature": "@Override public void setMediaFormat(MediaFormat inputMediaFormat)", "class_method_signature": "VideoEncoder.setMediaFormat(MediaFormat inputMediaFormat)", "testcase": false, "constructor": false}, {"identifier": "setBitRateInKBytes", "parameters": "(int bitRate)", "modifiers": "public", "return": "void", "signature": "void setBitRateInKBytes(int bitRate)", "full_signature": "public void setBitRateInKBytes(int bitRate)", "class_method_signature": "VideoEncoder.setBitRateInKBytes(int bitRate)", "testcase": false, "constructor": false}, {"identifier": "getBitRateInKBytes", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBitRateInKBytes()", "full_signature": "public int getBitRateInKBytes()", "class_method_signature": "VideoEncoder.getBitRateInKBytes()", "testcase": false, "constructor": false}, {"identifier": "setFrameRate", "parameters": "(int frameRate)", "modifiers": "public", "return": "void", "signature": "void setFrameRate(int frameRate)", "full_signature": "public void setFrameRate(int frameRate)", "class_method_signature": "VideoEncoder.setFrameRate(int frameRate)", "testcase": false, "constructor": false}, {"identifier": "getFrameRate", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFrameRate()", "full_signature": "public int getFrameRate()", "class_method_signature": "VideoEncoder.getFrameRate()", "testcase": false, "constructor": false}, {"identifier": "setIFrameInterval", "parameters": "(int iFrameInterval)", "modifiers": "public", "return": "void", "signature": "void setIFrameInterval(int iFrameInterval)", "full_signature": "public void setIFrameInterval(int iFrameInterval)", "class_method_signature": "VideoEncoder.setIFrameInterval(int iFrameInterval)", "testcase": false, "constructor": false}, {"identifier": "getIFrameInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIFrameInterval()", "full_signature": "public int getIFrameInterval()", "class_method_signature": "VideoEncoder.getIFrameInterval()", "testcase": false, "constructor": false}, {"identifier": "getVideoFormat", "parameters": "()", "modifiers": "private", "return": "VideoFormat", "signature": "VideoFormat getVideoFormat()", "full_signature": "private VideoFormat getVideoFormat()", "class_method_signature": "VideoEncoder.getVideoFormat()", "testcase": false, "constructor": false}, {"identifier": "isLastFile", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLastFile()", "full_signature": "@Override public boolean isLastFile()", "class_method_signature": "VideoEncoder.isLastFile()", "testcase": false, "constructor": false}, {"identifier": "setOutputSurface", "parameters": "(ISurface surface)", "modifiers": "@Override public", "return": "void", "signature": "void setOutputSurface(ISurface surface)", "full_signature": "@Override public void setOutputSurface(ISurface surface)", "class_method_signature": "VideoEncoder.setOutputSurface(ISurface surface)", "testcase": false, "constructor": false}, {"identifier": "waitForSurface", "parameters": "(long pts)", "modifiers": "@Override public", "return": "void", "signature": "void waitForSurface(long pts)", "full_signature": "@Override public void waitForSurface(long pts)", "class_method_signature": "VideoEncoder.waitForSurface(long pts)", "testcase": false, "constructor": false}, {"identifier": "drain", "parameters": "(int bufferIndex)", "modifiers": "@Override public", "return": "void", "signature": "void drain(int bufferIndex)", "full_signature": "@Override public void drain(int bufferIndex)", "class_method_signature": "VideoEncoder.drain(int bufferIndex)", "testcase": false, "constructor": false}, {"identifier": "feedMeIfNotDraining", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void feedMeIfNotDraining()", "full_signature": "@Override protected void feedMeIfNotDraining()", "class_method_signature": "VideoEncoder.feedMeIfNotDraining()", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(Frame frame)", "modifiers": "@Override public", "return": "void", "signature": "void push(Frame frame)", "full_signature": "@Override public void push(Frame frame)", "class_method_signature": "VideoEncoder.push(Frame frame)", "testcase": false, "constructor": false}, {"identifier": "notifySurfaceReady", "parameters": "(ISurface surface)", "modifiers": "@Override public", "return": "void", "signature": "void notifySurfaceReady(ISurface surface)", "full_signature": "@Override public void notifySurfaceReady(ISurface surface)", "class_method_signature": "VideoEncoder.notifySurfaceReady(ISurface surface)", "testcase": false, "constructor": false}, {"identifier": "releaseOutputBuffer", "parameters": "(int outputBufferIndex)", "modifiers": "@Override public", "return": "void", "signature": "void releaseOutputBuffer(int outputBufferIndex)", "full_signature": "@Override public void releaseOutputBuffer(int outputBufferIndex)", "class_method_signature": "VideoEncoder.releaseOutputBuffer(int outputBufferIndex)", "testcase": false, "constructor": false}], "file": "domain/src/main/java/org/m4m/domain/VideoEncoder.java"}, "focal_method": {"identifier": "setMediaFormat", "parameters": "(MediaFormat inputMediaFormat)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setMediaFormat(MediaFormat inputMediaFormat) {\n        this.mediaFormat = inputMediaFormat;\n        getVideoFormat().setColorFormat(MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);\n    }", "signature": "void setMediaFormat(MediaFormat inputMediaFormat)", "full_signature": "@Override public void setMediaFormat(MediaFormat inputMediaFormat)", "class_method_signature": "VideoEncoder.setMediaFormat(MediaFormat inputMediaFormat)", "testcase": false, "constructor": false, "invocations": ["setColorFormat", "getVideoFormat"]}, "repository": {"repo_id": 25040346, "url": "https://github.com/INDExOS/media-for-mobile", "language": "Java", "is_fork": false, "fork_count": 167, "stargazer_count": 416, "size": 619, "license": "licensed"}}