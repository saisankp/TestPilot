{"test_class": {"identifier": "RedisCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  Client client;", "modifier": "@Mock", "type": "Client", "declarator": "client", "var_name": "client"}, {"original_string": "Serializer<Object> serializer = new Serializer<Object>() {\n\n    @Override\n    public byte[] serialize(Object value) {\n      int shortValue = (Integer) value;\n      byte[] bytes = new byte[]{(byte) shortValue};\n      return bytes;\n    }\n\n    @Override\n    public Object deserialize(byte[] payload) {\n      if (payload == null) {\n        return null;\n      }\n      return (int) (payload[0]);\n    }\n  };", "modifier": "", "type": "Serializer<Object>", "declarator": "serializer = new Serializer<Object>() {\n\n    @Override\n    public byte[] serialize(Object value) {\n      int shortValue = (Integer) value;\n      byte[] bytes = new byte[]{(byte) shortValue};\n      return bytes;\n    }\n\n    @Override\n    public Object deserialize(byte[] payload) {\n      if (payload == null) {\n        return null;\n      }\n      return (int) (payload[0]);\n    }\n  }", "var_name": "serializer"}, {"original_string": "@Mock\n  CacheLoader<Integer, Integer> cacheLoader;", "modifier": "@Mock", "type": "CacheLoader<Integer, Integer>", "declarator": "cacheLoader", "var_name": "cacheLoader"}, {"original_string": "@Mock\n  EvictionListener<Integer, Integer> evictionListener;", "modifier": "@Mock", "type": "EvictionListener<Integer, Integer>", "declarator": "evictionListener", "var_name": "evictionListener"}, {"original_string": "RedisCache<Integer, Integer> cache;", "modifier": "", "type": "RedisCache<Integer, Integer>", "declarator": "cache", "var_name": "cache"}], "file": "imcache-redis/src/test/java/com/cetsoft/imcache/redis/RedisCacheTest.java"}, "test_case": {"identifier": "putThrowIOException", "parameters": "()", "modifiers": "@Test(expected = RedisCacheException.class) public", "return": "void", "body": "@Test(expected = RedisCacheException.class)\n  public void putThrowIOException() throws ConnectionException, IOException {\n    doThrow(new IOException(\"\")).when(client).set((byte[]) any(), (byte[]) any());\n    cache.put(3, 3);\n  }", "signature": "void putThrowIOException()", "full_signature": "@Test(expected = RedisCacheException.class) public void putThrowIOException()", "class_method_signature": "RedisCacheTest.putThrowIOException()", "testcase": true, "constructor": false, "invocations": ["set", "when", "doThrow", "any", "any", "put"]}, "focal_class": {"identifier": "RedisCache", "superclass": "extends AbstractCache<K, V>", "interfaces": "", "fields": [{"original_string": "final Client client;", "modifier": "final", "type": "Client", "declarator": "client", "var_name": "client"}, {"original_string": "final Serializer<Object> serializer;", "modifier": "final", "type": "Serializer<Object>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "final ConcurrentCacheStats stats = new ConcurrentCacheStats();", "modifier": "final", "type": "ConcurrentCacheStats", "declarator": "stats = new ConcurrentCacheStats()", "var_name": "stats"}], "methods": [{"identifier": "RedisCache", "parameters": "(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      Serializer<Object> serializer, Client client)", "modifiers": "public", "return": "", "signature": " RedisCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      Serializer<Object> serializer, Client client)", "full_signature": "public  RedisCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      Serializer<Object> serializer, Client client)", "class_method_signature": "RedisCache.RedisCache(final String name, final CacheLoader<K, V> cacheLoader,\n      final EvictionListener<K, V> evictionListener,\n      Serializer<Object> serializer, Client client)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(final K key, final V value)", "modifiers": "@Override public", "return": "void", "signature": "void put(final K key, final V value)", "full_signature": "@Override public void put(final K key, final V value)", "class_method_signature": "RedisCache.put(final K key, final V value)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(final K key, final V value, final TimeUnit timeUnit, final long duration)", "modifiers": "@Override public", "return": "void", "signature": "void put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "full_signature": "@Override public void put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "class_method_signature": "RedisCache.put(final K key, final V value, final TimeUnit timeUnit, final long duration)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final K key)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "V", "signature": "V get(final K key)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public V get(final K key)", "class_method_signature": "RedisCache.get(final K key)", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "(final K key)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "V", "signature": "V invalidate(final K key)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public V invalidate(final K key)", "class_method_signature": "RedisCache.invalidate(final K key)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final K key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final K key)", "full_signature": "@Override public boolean contains(final K key)", "class_method_signature": "RedisCache.contains(final K key)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "RedisCache.clear()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long size()", "full_signature": "@Override public long size()", "class_method_signature": "RedisCache.size()", "testcase": false, "constructor": false}, {"identifier": "stats", "parameters": "()", "modifiers": "@Override public", "return": "CacheStats", "signature": "CacheStats stats()", "full_signature": "@Override public CacheStats stats()", "class_method_signature": "RedisCache.stats()", "testcase": false, "constructor": false}], "file": "imcache-redis/src/main/java/com/cetsoft/imcache/redis/RedisCache.java"}, "focal_method": {"identifier": "put", "parameters": "(final K key, final V value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void put(final K key, final V value) {\n    try {\n      client.set(serializer.serialize(key), serializer.serialize(value));\n    } catch (ConnectionException e) {\n      throw new RedisCacheException(e);\n    } catch (IOException e) {\n      throw new RedisCacheException(e);\n    }\n  }", "signature": "void put(final K key, final V value)", "full_signature": "@Override public void put(final K key, final V value)", "class_method_signature": "RedisCache.put(final K key, final V value)", "testcase": false, "constructor": false, "invocations": ["set", "serialize", "serialize"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}