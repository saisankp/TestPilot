{"test_class": {"identifier": "SuggesterMoverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private Mover mover;", "modifier": "private", "type": "Mover", "declarator": "mover", "var_name": "mover"}], "file": "src/edu/lclark/orego/move/SuggesterMoverTest.java"}, "test_case": {"identifier": "testFallback", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFallback() {\n\t\tString[] diagram = {\n\t\t\t\t\".#...\",\n\t\t\t\t\"#....\",\n\t\t\t\t\".....\",\n\t\t\t\t\".....\",\n\t\t\t\t\".....\",\n\t\t};\n\t\tMersenneTwisterFast random = new MersenneTwisterFast();\n\t\tint[] counts = new int[coords.getFirstPointBeyondBoard()];\n\t\tfor(int i = 0; i < 1000; i++){\n\t\t\tboard.setUpProblem(diagram, BLACK);\n\t\t\tshort p = mover.selectAndPlayOneMove(random, true);\n\t\t\tcounts[p]++;\n\t\t}\n\t\tfinal ShortSet invalidPoints = new ShortSet(coords.getFirstPointBeyondBoard());\n\t\tfor (String s : new String[] {\"a4\", \"a5\", \"b5\", \"c1\", \"d1\", \"d2\", \"e1\", \"e2\", \"e3\"}) {\n\t\t\tinvalidPoints.add(at(s));\n\t\t}\n\t\tfor(short p : coords.getAllPointsOnBoard()){\n\t\t\tif(!invalidPoints.contains(p)){\n\t\t\t\tassertTrue(counts[p] > 20);\n\t\t\t}\n\t\t}\n\t\tassertEquals(0, counts[at(\"a5\")]);\n\t\tassertEquals(0, counts[at(\"a4\")]);\n\t\tassertEquals(0, counts[at(\"b5\")]);\n\t}", "signature": "void testFallback()", "full_signature": "@Test public void testFallback()", "class_method_signature": "SuggesterMoverTest.testFallback()", "testcase": true, "constructor": false, "invocations": ["getFirstPointBeyondBoard", "setUpProblem", "selectAndPlayOneMove", "getFirstPointBeyondBoard", "add", "at", "getAllPointsOnBoard", "contains", "assertTrue", "assertEquals", "at", "assertEquals", "at", "assertEquals", "at"]}, "focal_class": {"identifier": "SuggesterMover", "superclass": "", "interfaces": "implements Mover", "fields": [{"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final ShortList candidates;", "modifier": "private final", "type": "ShortList", "declarator": "candidates", "var_name": "candidates"}, {"original_string": "private final Mover fallbackMover;", "modifier": "private final", "type": "Mover", "declarator": "fallbackMover", "var_name": "fallbackMover"}, {"original_string": "private final Suggester suggester;", "modifier": "private final", "type": "Suggester", "declarator": "suggester", "var_name": "suggester"}], "methods": [{"identifier": "SuggesterMover", "parameters": "(Board board, Suggester suggester, Mover fallbackMover)", "modifiers": "public", "return": "", "signature": " SuggesterMover(Board board, Suggester suggester, Mover fallbackMover)", "full_signature": "public  SuggesterMover(Board board, Suggester suggester, Mover fallbackMover)", "class_method_signature": "SuggesterMover.SuggesterMover(Board board, Suggester suggester, Mover fallbackMover)", "testcase": false, "constructor": true}, {"identifier": "selectAndPlayOneMove", "parameters": "(MersenneTwisterFast random, boolean fast)", "modifiers": "@Override public", "return": "short", "signature": "short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "full_signature": "@Override public short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "class_method_signature": "SuggesterMover.selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/move/SuggesterMover.java"}, "focal_method": {"identifier": "selectAndPlayOneMove", "parameters": "(MersenneTwisterFast random, boolean fast)", "modifiers": "@Override public", "return": "short", "body": "@Override\n\tpublic short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast) {\n\t\tcandidates.clear();\n\t\tcandidates.addAll(suggester.getMoves());\n\t\twhile (candidates.size() > 0) {\n\t\t\tfinal short p = candidates.removeRandom(random);\n\t\t\tassert board.getColorAt(p) == VACANT;\n\t\t\tLegality legality = fast ? board.playFast(p) : board.play(p);\n\t\t\tif (legality == OK) {\n\t\t\t\treturn p;\n\t\t\t}\n\t\t} \n\t\treturn fallbackMover.selectAndPlayOneMove(random, fast);\n\t}", "signature": "short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "full_signature": "@Override public short selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "class_method_signature": "SuggesterMover.selectAndPlayOneMove(MersenneTwisterFast random, boolean fast)", "testcase": false, "constructor": false, "invocations": ["clear", "addAll", "getMoves", "size", "removeRandom", "getColorAt", "playFast", "play", "selectAndPlayOneMove"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}