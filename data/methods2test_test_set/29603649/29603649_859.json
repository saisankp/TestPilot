{"test_class": {"identifier": "MultiPartFileProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String APPLICATION_JAVA = \"application/java\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_JAVA = \"application/java\"", "var_name": "APPLICATION_JAVA"}, {"original_string": "private static final String JSON_CONTENT_TYPE = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "JSON_CONTENT_TYPE = \"application/json\"", "var_name": "JSON_CONTENT_TYPE"}, {"original_string": "private static final String OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\";", "modifier": "private static final", "type": "String", "declarator": "OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\"", "var_name": "OCTET_STREAM_CONTENT_TYPE"}, {"original_string": "private static final String EXCEPTION_MESSAGE = \"Could not upload external resource \";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_MESSAGE = \"Could not upload external resource \"", "var_name": "EXCEPTION_MESSAGE"}, {"original_string": "private static final String FILE_PATH = \"proba.file\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PATH = \"proba.file\"", "var_name": "FILE_PATH"}, {"original_string": "private static final String FILE_PATH_W_SLASH = \"proba/proba.file\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PATH_W_SLASH = \"proba/proba.file\"", "var_name": "FILE_PATH_W_SLASH"}, {"original_string": "private static final String FILE_PATH_W_BACK_SLASH = \"proba\\\\proba.file\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PATH_W_BACK_SLASH = \"proba\\\\proba.file\"", "var_name": "FILE_PATH_W_BACK_SLASH"}, {"original_string": "@Mock\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Mock\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Mock\n    private FileWriter fileWriter;", "modifier": "@Mock\n    private", "type": "FileWriter", "declarator": "fileWriter", "var_name": "fileWriter"}, {"original_string": "@Mock\n    private StubDescriptorJsonFactory stubConfigurationJsonBuilder;", "modifier": "@Mock\n    private", "type": "StubDescriptorJsonFactory", "declarator": "stubConfigurationJsonBuilder", "var_name": "stubConfigurationJsonBuilder"}, {"original_string": "@Mock\n    private RoutingService routingService;", "modifier": "@Mock\n    private", "type": "RoutingService", "declarator": "routingService", "var_name": "routingService"}, {"original_string": "@Mock\n    private InputStream resource;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "resource", "var_name": "resource"}, {"original_string": "@Mock\n    private ServiceMap serviceMap;", "modifier": "@Mock\n    private", "type": "ServiceMap", "declarator": "serviceMap", "var_name": "serviceMap"}, {"original_string": "@InjectMocks\n    private MultiPartFileProcessor underTest;", "modifier": "@InjectMocks\n    private", "type": "MultiPartFileProcessor", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/stub/upload/MultiPartFileProcessorTest.java"}, "test_case": {"identifier": "testProcessUploadedFileShouldGetFileNameFromPathWhichContainsSlash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcessUploadedFileShouldGetFileNameFromPathWhichContainsSlash() {\n        //GIVEN\n        given(stubResourcePathProvider.getTemplatesPathAsString()).willReturn(\"\");\n        //WHEN\n        underTest.processUploadedFile(resource, \"some-content-type\", \"stub-template\", FILE_PATH_W_SLASH);\n        //THEN\n        verify(fileWriter).write(resource, \"/\" + FILE_PATH, EXCEPTION_MESSAGE);\n    }", "signature": "void testProcessUploadedFileShouldGetFileNameFromPathWhichContainsSlash()", "full_signature": "@Test public void testProcessUploadedFileShouldGetFileNameFromPathWhichContainsSlash()", "class_method_signature": "MultiPartFileProcessorTest.testProcessUploadedFileShouldGetFileNameFromPathWhichContainsSlash()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getTemplatesPathAsString", "processUploadedFile", "write", "verify"]}, "focal_class": {"identifier": "MultiPartFileProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String APPLICATION_JAVA = \"application/java\";", "modifier": "private static final", "type": "String", "declarator": "APPLICATION_JAVA = \"application/java\"", "var_name": "APPLICATION_JAVA"}, {"original_string": "private static final String OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\";", "modifier": "private static final", "type": "String", "declarator": "OCTET_STREAM_CONTENT_TYPE = \"application/octet-stream\"", "var_name": "OCTET_STREAM_CONTENT_TYPE"}, {"original_string": "private static final String JSON_CONTENT_TYPE = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "JSON_CONTENT_TYPE = \"application/json\"", "var_name": "JSON_CONTENT_TYPE"}, {"original_string": "private static final String EXCEPTION_MESSAGE = \"Could not upload external resource \";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_MESSAGE = \"Could not upload external resource \"", "var_name": "EXCEPTION_MESSAGE"}, {"original_string": "@Autowired\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Autowired\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}, {"original_string": "@Autowired\n    private FileWriter fileWriter;", "modifier": "@Autowired\n    private", "type": "FileWriter", "declarator": "fileWriter", "var_name": "fileWriter"}, {"original_string": "@Autowired\n    private StubDescriptorJsonFactory stubConfigurationJsonBuilder;", "modifier": "@Autowired\n    private", "type": "StubDescriptorJsonFactory", "declarator": "stubConfigurationJsonBuilder", "var_name": "stubConfigurationJsonBuilder"}, {"original_string": "@Autowired\n    private RoutingService routingService;", "modifier": "@Autowired\n    private", "type": "RoutingService", "declarator": "routingService", "var_name": "routingService"}, {"original_string": "@Autowired\n    private SequenceDescriptorHolder sequenceDescriptorHolder;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorHolder", "declarator": "sequenceDescriptorHolder", "var_name": "sequenceDescriptorHolder"}, {"original_string": "@Autowired\n    private ServiceMap serviceMap;", "modifier": "@Autowired\n    private", "type": "ServiceMap", "declarator": "serviceMap", "var_name": "serviceMap"}], "methods": [{"identifier": "processUploadedFile", "parameters": "(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "modifiers": "public", "return": "String", "signature": "String processUploadedFile(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "full_signature": "public String processUploadedFile(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "class_method_signature": "MultiPartFileProcessor.processUploadedFile(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "processUploadedClasses", "parameters": "(final InputStream resource, final String contentType, final String fieldName, final String resFileName)", "modifiers": "private", "return": "String", "signature": "String processUploadedClasses(final InputStream resource, final String contentType, final String fieldName, final String resFileName)", "full_signature": "private String processUploadedClasses(final InputStream resource, final String contentType, final String fieldName, final String resFileName)", "class_method_signature": "MultiPartFileProcessor.processUploadedClasses(final InputStream resource, final String contentType, final String fieldName, final String resFileName)", "testcase": false, "constructor": false}, {"identifier": "extractFileNameFromAbsolutePath", "parameters": "(final String fileName)", "modifiers": "private", "return": "String", "signature": "String extractFileNameFromAbsolutePath(final String fileName)", "full_signature": "private String extractFileNameFromAbsolutePath(final String fileName)", "class_method_signature": "MultiPartFileProcessor.extractFileNameFromAbsolutePath(final String fileName)", "testcase": false, "constructor": false}, {"identifier": "isContentTypeJava", "parameters": "(final String contentType)", "modifiers": "private", "return": "boolean", "signature": "boolean isContentTypeJava(final String contentType)", "full_signature": "private boolean isContentTypeJava(final String contentType)", "class_method_signature": "MultiPartFileProcessor.isContentTypeJava(final String contentType)", "testcase": false, "constructor": false}, {"identifier": "writeResourceToFile", "parameters": "(final InputStream resource, final String fileName, final String path)", "modifiers": "private", "return": "void", "signature": "void writeResourceToFile(final InputStream resource, final String fileName, final String path)", "full_signature": "private void writeResourceToFile(final InputStream resource, final String fileName, final String path)", "class_method_signature": "MultiPartFileProcessor.writeResourceToFile(final InputStream resource, final String fileName, final String path)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/stub/upload/MultiPartFileProcessor.java"}, "focal_method": {"identifier": "processUploadedFile", "parameters": "(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "modifiers": "public", "return": "String", "body": "public String processUploadedFile(final InputStream resource, final String contentType, final String fieldName, final String fileName) {\n        String result;\n        String resFileName = extractFileNameFromAbsolutePath(fileName);\n\n        String classUploadResult = processUploadedClasses(resource, contentType, fieldName, resFileName);\n        if (classUploadResult != null) {\n            result = classUploadResult;\n        } else {\n            if (\"stub-configuration\".equals(fieldName) && JSON_CONTENT_TYPE.equals(contentType)) {\n                try {\n                    routingService.performModification(new NewStubDescriptorCommand(resource, stubConfigurationJsonBuilder, sequenceDescriptorHolder));\n                    serviceMap.detectServices();\n                } catch (ClassNotFoundException e) {\n                    result = \"Uploading \" + fileName + \" failed with ClassNotFoundException.\";\n                    throw new CannotUploadExternalResourceException(result, e);\n                }\n                result = \"New stub configuration was uploaded to Wilma.\";\n            } else if (\"stub-template\".equals(fieldName)) {\n                writeResourceToFile(resource, resFileName, stubResourcePathProvider.getTemplatesPathAsString());\n                result = \"External template '\" + resFileName + \"' was uploaded to Wilma.\";\n            } else {\n                result = \"Uploading \" + fileName + \" failed: wrong content type or tried to upload file from unauthorized form!\";\n                throw new CannotUploadExternalResourceException(result);\n            }\n        }\n        return result;\n    }", "signature": "String processUploadedFile(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "full_signature": "public String processUploadedFile(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "class_method_signature": "MultiPartFileProcessor.processUploadedFile(final InputStream resource, final String contentType, final String fieldName, final String fileName)", "testcase": false, "constructor": false, "invocations": ["extractFileNameFromAbsolutePath", "processUploadedClasses", "equals", "equals", "performModification", "detectServices", "equals", "writeResourceToFile", "getTemplatesPathAsString"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}