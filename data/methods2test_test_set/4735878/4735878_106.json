{"test_class": {"identifier": "VariableOnlineResourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/common/VariableOnlineResourceTest.java"}, "test_case": {"identifier": "testCacheRecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCacheRecode() throws Exception {\n        Map<String,Object> input = new HashMap<String,Object>();\n        input.put(\"field\", \"s\");\n        URL resourceF = VariableOnlineResourceTest.class.getResource(\"3.gif\");\n        URL resourceD = VariableOnlineResourceTest.class.getResource(\"21.gif\");\n        StringLiteral fb = new StringLiteral(resourceF.toString());\n        Recode2String rs = new Recode2String(fb,new StringAttribute(\"field\"));\n        rs.addMapItem(\"s\",new StringLiteral(resourceD.toString()));\n        VariableOnlineResource vor = new VariableOnlineResource(rs);\n        PlanarImage first = vor.getPlanarJAI(input);\n        PlanarImage second = vor.getPlanarJAI(input);\n        assertTrue(first == second);\n        rs.addMapItem(\"s\",new StringLiteral(resourceF.toString()));\n        rs.addMapItem(\"s\",new StringLiteral(resourceD.toString()));\n        PlanarImage third = vor.getPlanarJAI(input);\n        assertFalse(third == second);\n        second = vor.getPlanarJAI(input);\n        fb.setValue(resourceD.toString());\n        third = vor.getPlanarJAI(input);\n        assertFalse(second == third);\n    }", "signature": "void testCacheRecode()", "full_signature": "@Test public void testCacheRecode()", "class_method_signature": "VariableOnlineResourceTest.testCacheRecode()", "testcase": true, "constructor": false, "invocations": ["put", "getResource", "getResource", "toString", "addMapItem", "toString", "getPlanarJAI", "getPlanarJAI", "assertTrue", "addMapItem", "toString", "addMapItem", "toString", "getPlanarJAI", "assertFalse", "getPlanarJAI", "setValue", "toString", "getPlanarJAI", "assertFalse"]}, "focal_class": {"identifier": "VariableOnlineResource", "superclass": "extends AbstractSymbolizerNode", "interfaces": "implements ExternalGraphicSource, MarkGraphicSource", "fields": [{"original_string": "private StringParameter url;", "modifier": "private", "type": "StringParameter", "declarator": "url", "var_name": "url"}, {"original_string": "private Map<URL,PlanarImage> imageCache = new HashMap<URL,PlanarImage>();", "modifier": "private", "type": "Map<URL,PlanarImage>", "declarator": "imageCache = new HashMap<URL,PlanarImage>()", "var_name": "imageCache"}, {"original_string": "private Map<URL,Rectangle2D.Double> jaiBounds = new HashMap<URL,Rectangle2D.Double>();", "modifier": "private", "type": "Map<URL,Rectangle2D.Double>", "declarator": "jaiBounds = new HashMap<URL,Rectangle2D.Double>()", "var_name": "jaiBounds"}, {"original_string": "private Map<URI,SVGIcon> svgCache = new HashMap<URI,SVGIcon>();", "modifier": "private", "type": "Map<URI,SVGIcon>", "declarator": "svgCache = new HashMap<URI,SVGIcon>()", "var_name": "svgCache"}, {"original_string": "private Map<URI,Rectangle2D.Double> svgBounds = new HashMap<URI,Rectangle2D.Double>();", "modifier": "private", "type": "Map<URI,Rectangle2D.Double>", "declarator": "svgBounds = new HashMap<URI,Rectangle2D.Double>()", "var_name": "svgBounds"}], "methods": [{"identifier": "VariableOnlineResource", "parameters": "()", "modifiers": "public", "return": "", "signature": " VariableOnlineResource()", "full_signature": "public  VariableOnlineResource()", "class_method_signature": "VariableOnlineResource.VariableOnlineResource()", "testcase": false, "constructor": true}, {"identifier": "VariableOnlineResource", "parameters": "(StringParameter url)", "modifiers": "public", "return": "", "signature": " VariableOnlineResource(StringParameter url)", "full_signature": "public  VariableOnlineResource(StringParameter url)", "class_method_signature": "VariableOnlineResource.VariableOnlineResource(StringParameter url)", "testcase": false, "constructor": true}, {"identifier": "VariableOnlineResource", "parameters": "(VariableOnlineResourceType onlineResource)", "modifiers": "public", "return": "", "signature": " VariableOnlineResource(VariableOnlineResourceType onlineResource)", "full_signature": "public  VariableOnlineResource(VariableOnlineResourceType onlineResource)", "class_method_signature": "VariableOnlineResource.VariableOnlineResource(VariableOnlineResourceType onlineResource)", "testcase": false, "constructor": true}, {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "StringParameter", "signature": "StringParameter getUrl()", "full_signature": "public StringParameter getUrl()", "class_method_signature": "VariableOnlineResource.getUrl()", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(StringParameter url)", "modifiers": "public", "return": "void", "signature": "void setUrl(StringParameter url)", "full_signature": "public void setUrl(StringParameter url)", "class_method_signature": "VariableOnlineResource.setUrl(StringParameter url)", "testcase": false, "constructor": false}, {"identifier": "getPlanarJAI", "parameters": "(Map<String, Object> map)", "modifiers": "public", "return": "PlanarImage", "signature": "PlanarImage getPlanarJAI(Map<String, Object> map)", "full_signature": "public PlanarImage getPlanarJAI(Map<String, Object> map)", "class_method_signature": "VariableOnlineResource.getPlanarJAI(Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "getJAIBounds", "parameters": "(ViewBox viewBox,\n                                           Map<String, Object> map, MapTransform mt,\n                                           String mimeType)", "modifiers": "public", "return": "Rectangle2D.Double", "signature": "Rectangle2D.Double getJAIBounds(ViewBox viewBox,\n                                           Map<String, Object> map, MapTransform mt,\n                                           String mimeType)", "full_signature": "public Rectangle2D.Double getJAIBounds(ViewBox viewBox,\n                                           Map<String, Object> map, MapTransform mt,\n                                           String mimeType)", "class_method_signature": "VariableOnlineResource.getJAIBounds(ViewBox viewBox,\n                                           Map<String, Object> map, MapTransform mt,\n                                           String mimeType)", "testcase": false, "constructor": false}, {"identifier": "getSVGIcon", "parameters": "(Map<String,Object> map)", "modifiers": "public", "return": "SVGIcon", "signature": "SVGIcon getSVGIcon(Map<String,Object> map)", "full_signature": "public SVGIcon getSVGIcon(Map<String,Object> map)", "class_method_signature": "VariableOnlineResource.getSVGIcon(Map<String,Object> map)", "testcase": false, "constructor": false}, {"identifier": "getSvgBounds", "parameters": "(ViewBox viewBox,\n                                           Map<String,Object> map, MapTransform mt,\n                                           String mimeType)", "modifiers": "public", "return": "Rectangle2D.Double", "signature": "Rectangle2D.Double getSvgBounds(ViewBox viewBox,\n                                           Map<String,Object> map, MapTransform mt,\n                                           String mimeType)", "full_signature": "public Rectangle2D.Double getSvgBounds(ViewBox viewBox,\n                                           Map<String,Object> map, MapTransform mt,\n                                           String mimeType)", "class_method_signature": "VariableOnlineResource.getSvgBounds(ViewBox viewBox,\n                                           Map<String,Object> map, MapTransform mt,\n                                           String mimeType)", "testcase": false, "constructor": false}, {"identifier": "updateCacheAndGetBounds", "parameters": "(ViewBox viewBox,\n                                                      Map<String,Object> map, MapTransform mt,\n                                                      String mimeType)", "modifiers": "@Override public", "return": "Rectangle2D.Double", "signature": "Rectangle2D.Double updateCacheAndGetBounds(ViewBox viewBox,\n                                                      Map<String,Object> map, MapTransform mt,\n                                                      String mimeType)", "full_signature": "@Override public Rectangle2D.Double updateCacheAndGetBounds(ViewBox viewBox,\n                                                      Map<String,Object> map, MapTransform mt,\n                                                      String mimeType)", "class_method_signature": "VariableOnlineResource.updateCacheAndGetBounds(ViewBox viewBox,\n                                                      Map<String,Object> map, MapTransform mt,\n                                                      String mimeType)", "testcase": false, "constructor": false}, {"identifier": "drawSVG", "parameters": "(Graphics2D g2, Map<String,Object> map, AffineTransform at, double opacity)", "modifiers": "public", "return": "void", "signature": "void drawSVG(Graphics2D g2, Map<String,Object> map, AffineTransform at, double opacity)", "full_signature": "public void drawSVG(Graphics2D g2, Map<String,Object> map, AffineTransform at, double opacity)", "class_method_signature": "VariableOnlineResource.drawSVG(Graphics2D g2, Map<String,Object> map, AffineTransform at, double opacity)", "testcase": false, "constructor": false}, {"identifier": "drawJAI", "parameters": "(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                        double opacity)", "modifiers": "public", "return": "void", "signature": "void drawJAI(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                        double opacity)", "full_signature": "public void drawJAI(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                        double opacity)", "class_method_signature": "VariableOnlineResource.drawJAI(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                        double opacity)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                     double opacity, String mimeType)", "modifiers": "@Override public", "return": "void", "signature": "void draw(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                     double opacity, String mimeType)", "full_signature": "@Override public void draw(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                     double opacity, String mimeType)", "class_method_signature": "VariableOnlineResource.draw(Graphics2D g2, Map<String,Object> map, AffineTransform at, MapTransform mt,\n                     double opacity, String mimeType)", "testcase": false, "constructor": false}, {"identifier": "setJAXBSource", "parameters": "(ExternalGraphicType e)", "modifiers": "@Override public", "return": "void", "signature": "void setJAXBSource(ExternalGraphicType e)", "full_signature": "@Override public void setJAXBSource(ExternalGraphicType e)", "class_method_signature": "VariableOnlineResource.setJAXBSource(ExternalGraphicType e)", "testcase": false, "constructor": false}, {"identifier": "getFont", "parameters": "(Map<String,Object> map)", "modifiers": "public", "return": "Font", "signature": "Font getFont(Map<String,Object> map)", "full_signature": "public Font getFont(Map<String,Object> map)", "class_method_signature": "VariableOnlineResource.getFont(Map<String,Object> map)", "testcase": false, "constructor": false}, {"identifier": "getTrueTypeGlyph", "parameters": "(ViewBox viewBox,\n                                   Map<String,Object> map,\n                                   Double scale, Double dpi,\n                                   RealParameter markIndex)", "modifiers": "private", "return": "Shape", "signature": "Shape getTrueTypeGlyph(ViewBox viewBox,\n                                   Map<String,Object> map,\n                                   Double scale, Double dpi,\n                                   RealParameter markIndex)", "full_signature": "private Shape getTrueTypeGlyph(ViewBox viewBox,\n                                   Map<String,Object> map,\n                                   Double scale, Double dpi,\n                                   RealParameter markIndex)", "class_method_signature": "VariableOnlineResource.getTrueTypeGlyph(ViewBox viewBox,\n                                   Map<String,Object> map,\n                                   Double scale, Double dpi,\n                                   RealParameter markIndex)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void update()", "full_signature": "@Override public void update()", "class_method_signature": "VariableOnlineResource.update()", "testcase": false, "constructor": false}, {"identifier": "getShape", "parameters": "(ViewBox viewBox, Map<String,Object> map, Double scale,\n            Double dpi, RealParameter markIndex, String mimeType)", "modifiers": "@Override public", "return": "Shape", "signature": "Shape getShape(ViewBox viewBox, Map<String,Object> map, Double scale,\n            Double dpi, RealParameter markIndex, String mimeType)", "full_signature": "@Override public Shape getShape(ViewBox viewBox, Map<String,Object> map, Double scale,\n            Double dpi, RealParameter markIndex, String mimeType)", "class_method_signature": "VariableOnlineResource.getShape(ViewBox viewBox, Map<String,Object> map, Double scale,\n            Double dpi, RealParameter markIndex, String mimeType)", "testcase": false, "constructor": false}, {"identifier": "setJAXBSource", "parameters": "(MarkGraphicType m)", "modifiers": "public", "return": "void", "signature": "void setJAXBSource(MarkGraphicType m)", "full_signature": "public void setJAXBSource(MarkGraphicType m)", "class_method_signature": "VariableOnlineResource.setJAXBSource(MarkGraphicType m)", "testcase": false, "constructor": false}, {"identifier": "getDefaultMaxWidth", "parameters": "(Map<String,Object> map,\n                                     Double scale, Double dpi,\n                                     RealParameter markIndex, String mimeType)", "modifiers": "@Override public", "return": "double", "signature": "double getDefaultMaxWidth(Map<String,Object> map,\n                                     Double scale, Double dpi,\n                                     RealParameter markIndex, String mimeType)", "full_signature": "@Override public double getDefaultMaxWidth(Map<String,Object> map,\n                                     Double scale, Double dpi,\n                                     RealParameter markIndex, String mimeType)", "class_method_signature": "VariableOnlineResource.getDefaultMaxWidth(Map<String,Object> map,\n                                     Double scale, Double dpi,\n                                     RealParameter markIndex, String mimeType)", "testcase": false, "constructor": false}, {"identifier": "getTrueTypeGlyphMaxSize", "parameters": "(Map<String,Object> map,\n                                           /*Double scale, Double dpi,*/ RealParameter markIndex)", "modifiers": "private", "return": "double", "signature": "double getTrueTypeGlyphMaxSize(Map<String,Object> map,\n                                           /*Double scale, Double dpi,*/ RealParameter markIndex)", "full_signature": "private double getTrueTypeGlyphMaxSize(Map<String,Object> map,\n                                           /*Double scale, Double dpi,*/ RealParameter markIndex)", "class_method_signature": "VariableOnlineResource.getTrueTypeGlyphMaxSize(Map<String,Object> map,\n                                           /*Double scale, Double dpi,*/ RealParameter markIndex)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "()", "modifiers": "@Override public", "return": "List<SymbolizerNode>", "signature": "List<SymbolizerNode> getChildren()", "full_signature": "@Override public List<SymbolizerNode> getChildren()", "class_method_signature": "VariableOnlineResource.getChildren()", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/common/VariableOnlineResource.java"}, "focal_method": {"identifier": "getPlanarJAI", "parameters": "(Map<String, Object> map)", "modifiers": "public", "return": "PlanarImage", "body": "public PlanarImage getPlanarJAI(Map<String, Object> map) throws ParameterException {\n        try {\n            URL link = new URL(url.getValue(map));\n            if (!imageCache.containsKey(link)) {\n                PlanarImage raw = JAI.create(\"url\", link);\n                imageCache.put(link, raw);\n                Logger.getLogger(VariableOnlineResource.class.getName()).log(Level.INFO, \"Download ExternalGraphic from: {0}\", url);\n            }\n            return imageCache.get(link);\n        } catch (Exception ex) {\n            throw new ParameterException(\"Can't process the input URL\",ex);\n        }\n    }", "signature": "PlanarImage getPlanarJAI(Map<String, Object> map)", "full_signature": "public PlanarImage getPlanarJAI(Map<String, Object> map)", "class_method_signature": "VariableOnlineResource.getPlanarJAI(Map<String, Object> map)", "testcase": false, "constructor": false, "invocations": ["getValue", "containsKey", "create", "put", "log", "getLogger", "getName", "get"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}