{"test_class": {"identifier": "XsDateTimeFormatTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/extension/xsd/xsd-core/src/test/java/org/geotools/xml/impl/XsDateTimeFormatTest.java"}, "test_case": {"identifier": "testWrongDateLenientIncompleteMins", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrongDateLenientIncompleteMins() throws ParseException {\n        // Create the parser\n        XsDateTimeFormat format = new XsDateTimeFormat();\n        // Set a date\n        String time = \"2014-10-12T05:0Z\";\n        // Parse the Date\n        Object parseObject = format.parseObject(time, true);\n        assertTrue(parseObject instanceof Calendar);\n\n        // Get the date\n        Calendar cal = (Calendar) parseObject;\n        // Ensure the parsing is correct\n        int year = cal.get(Calendar.YEAR);\n        int month = cal.get(Calendar.MONTH);\n        int day = cal.get(Calendar.DAY_OF_MONTH);\n        int hours = cal.get(Calendar.HOUR);\n        int mins = cal.get(Calendar.MINUTE);\n        int sec = cal.get(Calendar.SECOND);\n        int millis = cal.get(Calendar.MILLISECOND);\n\n        // check\n        assertEquals(year, 2014);\n        assertEquals(month, 9);\n        assertEquals(day, 12);\n        assertEquals(hours, 5);\n        assertEquals(mins, 0);\n        assertEquals(sec, 0);\n        assertEquals(millis, 0);\n    }", "signature": "void testWrongDateLenientIncompleteMins()", "full_signature": "@Test public void testWrongDateLenientIncompleteMins()", "class_method_signature": "XsDateTimeFormatTest.testWrongDateLenientIncompleteMins()", "testcase": true, "constructor": false, "invocations": ["parseObject", "assertTrue", "get", "get", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "XsDateTimeFormat", "superclass": "extends Format", "interfaces": "", "fields": [{"original_string": "final boolean parseDate;", "modifier": "final", "type": "boolean", "declarator": "parseDate", "var_name": "parseDate"}, {"original_string": "final boolean parseTime;", "modifier": "final", "type": "boolean", "declarator": "parseTime", "var_name": "parseTime"}], "methods": [{"identifier": "XsDateTimeFormat", "parameters": "(boolean pParseDate, boolean pParseTime)", "modifiers": "", "return": "", "signature": " XsDateTimeFormat(boolean pParseDate, boolean pParseTime)", "full_signature": "  XsDateTimeFormat(boolean pParseDate, boolean pParseTime)", "class_method_signature": "XsDateTimeFormat.XsDateTimeFormat(boolean pParseDate, boolean pParseTime)", "testcase": false, "constructor": true}, {"identifier": "XsDateTimeFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " XsDateTimeFormat()", "full_signature": "public  XsDateTimeFormat()", "class_method_signature": "XsDateTimeFormat.XsDateTimeFormat()", "testcase": false, "constructor": true}, {"identifier": "parseInt", "parameters": "(String pString, int pOffset, StringBuffer pDigits)", "modifiers": "private", "return": "int", "signature": "int parseInt(String pString, int pOffset, StringBuffer pDigits)", "full_signature": "private int parseInt(String pString, int pOffset, StringBuffer pDigits)", "class_method_signature": "XsDateTimeFormat.parseInt(String pString, int pOffset, StringBuffer pDigits)", "testcase": false, "constructor": false}, {"identifier": "parseObject", "parameters": "(String source, boolean lenient)", "modifiers": "public", "return": "Object", "signature": "Object parseObject(String source, boolean lenient)", "full_signature": "public Object parseObject(String source, boolean lenient)", "class_method_signature": "XsDateTimeFormat.parseObject(String source, boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "parseObject", "parameters": "(String pString, ParsePosition pParsePosition)", "modifiers": "public", "return": "Object", "signature": "Object parseObject(String pString, ParsePosition pParsePosition)", "full_signature": "public Object parseObject(String pString, ParsePosition pParsePosition)", "class_method_signature": "XsDateTimeFormat.parseObject(String pString, ParsePosition pParsePosition)", "testcase": false, "constructor": false}, {"identifier": "parseObject", "parameters": "(String pString, ParsePosition pParsePosition, boolean lenient)", "modifiers": "public", "return": "Object", "signature": "Object parseObject(String pString, ParsePosition pParsePosition, boolean lenient)", "full_signature": "public Object parseObject(String pString, ParsePosition pParsePosition, boolean lenient)", "class_method_signature": "XsDateTimeFormat.parseObject(String pString, ParsePosition pParsePosition, boolean lenient)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuffer pBuffer, int pNum, int pMinLen)", "modifiers": "private", "return": "void", "signature": "void append(StringBuffer pBuffer, int pNum, int pMinLen)", "full_signature": "private void append(StringBuffer pBuffer, int pNum, int pMinLen)", "class_method_signature": "XsDateTimeFormat.append(StringBuffer pBuffer, int pNum, int pMinLen)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Object pCalendar, StringBuffer pBuffer, FieldPosition pPos)", "modifiers": "public", "return": "StringBuffer", "signature": "StringBuffer format(Object pCalendar, StringBuffer pBuffer, FieldPosition pPos)", "full_signature": "public StringBuffer format(Object pCalendar, StringBuffer pBuffer, FieldPosition pPos)", "class_method_signature": "XsDateTimeFormat.format(Object pCalendar, StringBuffer pBuffer, FieldPosition pPos)", "testcase": false, "constructor": false}], "file": "modules/extension/xsd/xsd-core/src/main/java/org/geotools/xml/impl/XsDateTimeFormat.java"}, "focal_method": {"identifier": "parseObject", "parameters": "(String source, boolean lenient)", "modifiers": "public", "return": "Object", "body": "public Object parseObject(String source, boolean lenient) throws ParseException {\n        ParsePosition pos = new ParsePosition(0);\n        Object result = parseObject(source, pos, lenient);\n        if (pos.getIndex() == 0) {\n            throw new ParseException(\"Format.parseObject(String) failed\",\n                pos.getErrorIndex());\n        }\n        return result;\n    }", "signature": "Object parseObject(String source, boolean lenient)", "full_signature": "public Object parseObject(String source, boolean lenient)", "class_method_signature": "XsDateTimeFormat.parseObject(String source, boolean lenient)", "testcase": false, "constructor": false, "invocations": ["parseObject", "getIndex", "getErrorIndex"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}