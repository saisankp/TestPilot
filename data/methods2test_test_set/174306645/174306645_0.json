{"test_class": {"identifier": "DiscoveredServiceWorkItemHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OkHttpClient httpClient;", "modifier": "private", "type": "OkHttpClient", "declarator": "httpClient", "var_name": "httpClient"}], "file": "kogito-cloud-services/kogito-cloud-workitems/src/test/java/org/kie/kogito/cloud/workitems/DiscoveredServiceWorkItemHandlerTest.java"}, "test_case": {"identifier": "testGivenEndpoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGivenEndpoint() throws IOException {\n        DiscoveredServiceWorkItemHandler handler = new TestDiscoveredServiceWorkItemHandler(\"test\", \"http://testhost:9000\"); \n        \n        WorkItem workItem = Mockito.mock(WorkItem.class);\n        when(workItem.getParameters()).thenReturn(Collections.singletonMap(\"service\", \"test\"));\n        \n        Call call = mock(Call.class);\n        ResponseBody body = new ResponseBody() {\n            private String content = \"{\\\"test\\\" : \\\"fake\\\"}\";\n            @Override\n            public BufferedSource source() {\n                Buffer b = new Buffer();\n                b.write(content.getBytes());\n                return b;\n            }\n            \n            @Override\n            public MediaType contentType() {\n                return MediaType.parse(\"application/json\");\n            }\n            \n            @Override\n            public long contentLength() {\n                return content.length();\n            }\n        };\n        Response response = new Response.Builder().body(body).protocol(Protocol.HTTP_1_1).message(\"test\").request(new Request.Builder().url(\"http://localhost:9000\").build()).code(200).build();\n                \n     \n        when(call.execute()).thenReturn(response);\n        when(httpClient.newCall(any())).thenReturn(call);\n        \n        Map<String, Object> results = handler.discoverAndCall(workItem, \"\", \"service\", HttpMethods.POST);\n        \n        assertThat(results).isNotNull().containsKey(\"test\").containsValue(\"fake\");\n    }", "signature": "void testGivenEndpoint()", "full_signature": "@Test public void testGivenEndpoint()", "class_method_signature": "DiscoveredServiceWorkItemHandlerTest.testGivenEndpoint()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getParameters", "singletonMap", "mock", "write", "getBytes", "parse", "length", "build", "code", "request", "message", "protocol", "body", "build", "url", "thenReturn", "when", "execute", "thenReturn", "when", "newCall", "any", "discoverAndCall", "containsValue", "containsKey", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "DiscoveredServiceWorkItemHandler", "superclass": "", "interfaces": "implements WorkItemHandler", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DiscoveredServiceWorkItemHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DiscoveredServiceWorkItemHandler.class)", "var_name": "LOGGER"}, {"original_string": "protected static final MediaType JSON = MediaType.parse(\"application/json; charset=utf-8\");", "modifier": "protected static final", "type": "MediaType", "declarator": "JSON = MediaType.parse(\"application/json; charset=utf-8\")", "var_name": "JSON"}, {"original_string": "protected static final List<String> INTERNAL_FIELDS = Arrays.asList(\"TaskName\", \"ActorId\", \"GroupId\", \"Priority\", \"Comment\", \"Skippable\", \"Content\", \"Model\", \"Namespace\");", "modifier": "protected static final", "type": "List<String>", "declarator": "INTERNAL_FIELDS = Arrays.asList(\"TaskName\", \"ActorId\", \"GroupId\", \"Priority\", \"Comment\", \"Skippable\", \"Content\", \"Model\", \"Namespace\")", "var_name": "INTERNAL_FIELDS"}, {"original_string": "private Map<String, ServiceInfo> serviceEndpoints;", "modifier": "private", "type": "Map<String, ServiceInfo>", "declarator": "serviceEndpoints", "var_name": "serviceEndpoints"}, {"original_string": "private OkHttpClient http;", "modifier": "private", "type": "OkHttpClient", "declarator": "http", "var_name": "http"}, {"original_string": "private ObjectMapper mapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private ServiceDiscovery serviceDiscovery;", "modifier": "private", "type": "ServiceDiscovery", "declarator": "serviceDiscovery", "var_name": "serviceDiscovery"}, {"original_string": "private KogitoKubeClient kubeClient;", "modifier": "private", "type": "KogitoKubeClient", "declarator": "kubeClient", "var_name": "kubeClient"}], "methods": [{"identifier": "DiscoveredServiceWorkItemHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " DiscoveredServiceWorkItemHandler()", "full_signature": "public  DiscoveredServiceWorkItemHandler()", "class_method_signature": "DiscoveredServiceWorkItemHandler.DiscoveredServiceWorkItemHandler()", "testcase": false, "constructor": true}, {"identifier": "DiscoveredServiceWorkItemHandler", "parameters": "(final KogitoKubeClient kubeClient)", "modifiers": "protected", "return": "", "signature": " DiscoveredServiceWorkItemHandler(final KogitoKubeClient kubeClient)", "full_signature": "protected  DiscoveredServiceWorkItemHandler(final KogitoKubeClient kubeClient)", "class_method_signature": "DiscoveredServiceWorkItemHandler.DiscoveredServiceWorkItemHandler(final KogitoKubeClient kubeClient)", "testcase": false, "constructor": true}, {"identifier": "buildServiceDiscovery", "parameters": "()", "modifiers": "protected", "return": "ServiceDiscovery", "signature": "ServiceDiscovery buildServiceDiscovery()", "full_signature": "protected ServiceDiscovery buildServiceDiscovery()", "class_method_signature": "DiscoveredServiceWorkItemHandler.buildServiceDiscovery()", "testcase": false, "constructor": false}, {"identifier": "buildServiceDiscovery", "parameters": "(KogitoKubeClient kubeClient)", "modifiers": "protected", "return": "ServiceDiscovery", "signature": "ServiceDiscovery buildServiceDiscovery(KogitoKubeClient kubeClient)", "full_signature": "protected ServiceDiscovery buildServiceDiscovery(KogitoKubeClient kubeClient)", "class_method_signature": "DiscoveredServiceWorkItemHandler.buildServiceDiscovery(KogitoKubeClient kubeClient)", "testcase": false, "constructor": false}, {"identifier": "buildHttpClient", "parameters": "()", "modifiers": "protected", "return": "OkHttpClient", "signature": "OkHttpClient buildHttpClient()", "full_signature": "protected OkHttpClient buildHttpClient()", "class_method_signature": "DiscoveredServiceWorkItemHandler.buildHttpClient()", "testcase": false, "constructor": false}, {"identifier": "removeService", "parameters": "(String serviceName)", "modifiers": "protected", "return": "boolean", "signature": "boolean removeService(String serviceName)", "full_signature": "protected boolean removeService(String serviceName)", "class_method_signature": "DiscoveredServiceWorkItemHandler.removeService(String serviceName)", "testcase": false, "constructor": false}, {"identifier": "addServices", "parameters": "(String serviceName, ServiceInfo service)", "modifiers": "protected", "return": "void", "signature": "void addServices(String serviceName, ServiceInfo service)", "full_signature": "protected void addServices(String serviceName, ServiceInfo service)", "class_method_signature": "DiscoveredServiceWorkItemHandler.addServices(String serviceName, ServiceInfo service)", "testcase": false, "constructor": false}, {"identifier": "getServices", "parameters": "()", "modifiers": "protected", "return": "Map<String, ServiceInfo>", "signature": "Map<String, ServiceInfo> getServices()", "full_signature": "protected Map<String, ServiceInfo> getServices()", "class_method_signature": "DiscoveredServiceWorkItemHandler.getServices()", "testcase": false, "constructor": false}, {"identifier": "findEndpoint", "parameters": "(String namespace, String service)", "modifiers": "protected", "return": "ServiceInfo", "signature": "ServiceInfo findEndpoint(String namespace, String service)", "full_signature": "protected ServiceInfo findEndpoint(String namespace, String service)", "class_method_signature": "DiscoveredServiceWorkItemHandler.findEndpoint(String namespace, String service)", "testcase": false, "constructor": false}, {"identifier": "discoverAndCall", "parameters": "(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> discoverAndCall(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "full_signature": "protected Map<String, Object> discoverAndCall(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "class_method_signature": "DiscoveredServiceWorkItemHandler.discoverAndCall(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "testcase": false, "constructor": false}, {"identifier": "produceRequestPayload", "parameters": "(Map<String, Object> data)", "modifiers": "protected", "return": "RequestBody", "signature": "RequestBody produceRequestPayload(Map<String, Object> data)", "full_signature": "protected RequestBody produceRequestPayload(Map<String, Object> data)", "class_method_signature": "DiscoveredServiceWorkItemHandler.produceRequestPayload(Map<String, Object> data)", "testcase": false, "constructor": false}, {"identifier": "produceResultsFromResponse", "parameters": "(Response response)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "Map<String, Object>", "signature": "Map<String, Object> produceResultsFromResponse(Response response)", "full_signature": "@SuppressWarnings(\"unchecked\") protected Map<String, Object> produceResultsFromResponse(Response response)", "class_method_signature": "DiscoveredServiceWorkItemHandler.produceResultsFromResponse(Response response)", "testcase": false, "constructor": false}, {"identifier": "producePostRequest", "parameters": "(ServiceInfo endpoint, RequestBody body)", "modifiers": "protected", "return": "Request", "signature": "Request producePostRequest(ServiceInfo endpoint, RequestBody body)", "full_signature": "protected Request producePostRequest(ServiceInfo endpoint, RequestBody body)", "class_method_signature": "DiscoveredServiceWorkItemHandler.producePostRequest(ServiceInfo endpoint, RequestBody body)", "testcase": false, "constructor": false}, {"identifier": "produceGetRequest", "parameters": "(ServiceInfo endpoint)", "modifiers": "protected", "return": "Request", "signature": "Request produceGetRequest(ServiceInfo endpoint)", "full_signature": "protected Request produceGetRequest(ServiceInfo endpoint)", "class_method_signature": "DiscoveredServiceWorkItemHandler.produceGetRequest(ServiceInfo endpoint)", "testcase": false, "constructor": false}, {"identifier": "producePutRequest", "parameters": "(ServiceInfo endpoint, RequestBody body)", "modifiers": "protected", "return": "Request", "signature": "Request producePutRequest(ServiceInfo endpoint, RequestBody body)", "full_signature": "protected Request producePutRequest(ServiceInfo endpoint, RequestBody body)", "class_method_signature": "DiscoveredServiceWorkItemHandler.producePutRequest(ServiceInfo endpoint, RequestBody body)", "testcase": false, "constructor": false}, {"identifier": "produceDeleteRequest", "parameters": "(ServiceInfo endpoint, RequestBody body)", "modifiers": "protected", "return": "Request", "signature": "Request produceDeleteRequest(ServiceInfo endpoint, RequestBody body)", "full_signature": "protected Request produceDeleteRequest(ServiceInfo endpoint, RequestBody body)", "class_method_signature": "DiscoveredServiceWorkItemHandler.produceDeleteRequest(ServiceInfo endpoint, RequestBody body)", "testcase": false, "constructor": false}, {"identifier": "applyHeaders", "parameters": "(ServiceInfo endpoint, Builder builder)", "modifiers": "protected", "return": "void", "signature": "void applyHeaders(ServiceInfo endpoint, Builder builder)", "full_signature": "protected void applyHeaders(ServiceInfo endpoint, Builder builder)", "class_method_signature": "DiscoveredServiceWorkItemHandler.applyHeaders(ServiceInfo endpoint, Builder builder)", "testcase": false, "constructor": false}], "file": "kogito-cloud-services/kogito-cloud-workitems/src/main/java/org/kie/kogito/cloud/workitems/DiscoveredServiceWorkItemHandler.java"}, "focal_method": {"identifier": "discoverAndCall", "parameters": "(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "modifiers": "protected", "return": "Map<String, Object>", "body": "protected Map<String, Object> discoverAndCall(WorkItem workItem, String namespace, String serviceName, HttpMethods method) {\n        Map<String, Object> data = new HashMap<>(workItem.getParameters());\n        String service = (String) data.remove(serviceName);\n\n        // remove all internal fields before sending\n        INTERNAL_FIELDS.forEach(field -> data.remove(field));\n\n        // discover service endpoint\n        ServiceInfo endpoint = serviceEndpoints.computeIfAbsent(service, (s) -> findEndpoint(namespace, s));\n        LOGGER.debug(\"Found endpoint for service {} with location {}\", service, endpoint);\n\n        RequestBody body = produceRequestPayload(data);\n        Request request = null;\n\n        switch (method) {\n            case POST:\n                request = producePostRequest(endpoint, body);\n                break;\n            case GET:\n                request = produceGetRequest(endpoint);\n                break;\n            case PUT:\n                request = producePutRequest(endpoint, body);\n                break;\n            case DELETE:\n                request = produceDeleteRequest(endpoint, body);\n                break;\n            default:\n                break;\n        }\n\n        try (Response response = this.buildHttpClient().newCall(request).execute()) {\n\n            Map<String, Object> results = produceResultsFromResponse(response);\n\n            return results;\n\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "Map<String, Object> discoverAndCall(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "full_signature": "protected Map<String, Object> discoverAndCall(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "class_method_signature": "DiscoveredServiceWorkItemHandler.discoverAndCall(WorkItem workItem, String namespace, String serviceName, HttpMethods method)", "testcase": false, "constructor": false, "invocations": ["getParameters", "remove", "forEach", "remove", "computeIfAbsent", "findEndpoint", "debug", "produceRequestPayload", "producePostRequest", "produceGetRequest", "producePutRequest", "produceDeleteRequest", "execute", "newCall", "buildHttpClient", "produceResultsFromResponse"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}