{"test_class": {"identifier": "XmlSwitchTest", "superclass": "extends PipeTestBase<XmlSwitch>", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/pipes/XmlSwitchTest.java"}, "test_case": {"identifier": "basicXpath3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void basicXpath3() throws Exception {\n\t\tpipe.registerForward(new PipeForward(\"Envelope\",\"Envelope-Path\"));\n\t\tpipe.registerForward(new PipeForward(\"SetRequest\",\"SetRequest-Path\"));\n\t\tpipe.setXpathExpression(\"name(/Envelope/Body/*[name()!='MessageHeader'])\");\n\t\tpipe.setNamespaceAware(false);\n\t\tString input=TestFileUtils.getTestFile(\"/XmlSwitch/in.xml\");\n\t\ttestSwitch(input,\"SetRequest\");\n\t}", "signature": "void basicXpath3()", "full_signature": "@Test public void basicXpath3()", "class_method_signature": "XmlSwitchTest.basicXpath3()", "testcase": true, "constructor": false, "invocations": ["registerForward", "registerForward", "setXpathExpression", "setNamespaceAware", "getTestFile", "testSwitch"]}, "focal_class": {"identifier": "XmlSwitch", "superclass": "extends AbstractPipe", "interfaces": "", "fields": [{"original_string": "public static final String XML_SWITCH_FORWARD_FOUND_MONITOR_EVENT = \"Switch: Forward Found\";", "modifier": "public static final", "type": "String", "declarator": "XML_SWITCH_FORWARD_FOUND_MONITOR_EVENT = \"Switch: Forward Found\"", "var_name": "XML_SWITCH_FORWARD_FOUND_MONITOR_EVENT"}, {"original_string": "public static final String XML_SWITCH_FORWARD_NOT_FOUND_MONITOR_EVENT = \"Switch: Forward Not Found\";", "modifier": "public static final", "type": "String", "declarator": "XML_SWITCH_FORWARD_NOT_FOUND_MONITOR_EVENT = \"Switch: Forward Not Found\"", "var_name": "XML_SWITCH_FORWARD_NOT_FOUND_MONITOR_EVENT"}, {"original_string": "private static final String DEFAULT_SERVICESELECTION_XPATH = XmlUtils.XPATH_GETROOTNODENAME;", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SERVICESELECTION_XPATH = XmlUtils.XPATH_GETROOTNODENAME", "var_name": "DEFAULT_SERVICESELECTION_XPATH"}, {"original_string": "private String serviceSelectionStylesheetFilename=null;", "modifier": "private", "type": "String", "declarator": "serviceSelectionStylesheetFilename=null", "var_name": "serviceSelectionStylesheetFilename"}, {"original_string": "private String xpathExpression=null;", "modifier": "private", "type": "String", "declarator": "xpathExpression=null", "var_name": "xpathExpression"}, {"original_string": "private String namespaceDefs = null;", "modifier": "private", "type": "String", "declarator": "namespaceDefs = null", "var_name": "namespaceDefs"}, {"original_string": "private String sessionKey=null;", "modifier": "private", "type": "String", "declarator": "sessionKey=null", "var_name": "sessionKey"}, {"original_string": "private String notFoundForwardName=null;", "modifier": "private", "type": "String", "declarator": "notFoundForwardName=null", "var_name": "notFoundForwardName"}, {"original_string": "private String emptyForwardName=null;", "modifier": "private", "type": "String", "declarator": "emptyForwardName=null", "var_name": "emptyForwardName"}, {"original_string": "private int xsltVersion=0;", "modifier": "private", "type": "int", "declarator": "xsltVersion=0", "var_name": "xsltVersion"}, {"original_string": "private TransformerPool transformerPool=null;", "modifier": "private", "type": "TransformerPool", "declarator": "transformerPool=null", "var_name": "transformerPool"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "XmlSwitch.configure()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "XmlSwitch.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "XmlSwitch.stop()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "XmlSwitch.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setServiceSelectionStylesheetFilename", "parameters": "(String newServiceSelectionStylesheetFilename)", "modifiers": "@IbisDoc({\"1\", \"stylesheet may return a string representing the forward to look up\", \"<i>a stylesheet that returns the name of the root-element</i>\"}) public", "return": "void", "signature": "void setServiceSelectionStylesheetFilename(String newServiceSelectionStylesheetFilename)", "full_signature": "@IbisDoc({\"1\", \"stylesheet may return a string representing the forward to look up\", \"<i>a stylesheet that returns the name of the root-element</i>\"}) public void setServiceSelectionStylesheetFilename(String newServiceSelectionStylesheetFilename)", "class_method_signature": "XmlSwitch.setServiceSelectionStylesheetFilename(String newServiceSelectionStylesheetFilename)", "testcase": false, "constructor": false}, {"identifier": "getServiceSelectionStylesheetFilename", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServiceSelectionStylesheetFilename()", "full_signature": "public String getServiceSelectionStylesheetFilename()", "class_method_signature": "XmlSwitch.getServiceSelectionStylesheetFilename()", "testcase": false, "constructor": false}, {"identifier": "setXpathExpression", "parameters": "(String xpathExpression)", "modifiers": "@IbisDoc({\"2\", \"xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $\", \"\"}) public", "return": "void", "signature": "void setXpathExpression(String xpathExpression)", "full_signature": "@IbisDoc({\"2\", \"xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $\", \"\"}) public void setXpathExpression(String xpathExpression)", "class_method_signature": "XmlSwitch.setXpathExpression(String xpathExpression)", "testcase": false, "constructor": false}, {"identifier": "getXpathExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getXpathExpression()", "full_signature": "public String getXpathExpression()", "class_method_signature": "XmlSwitch.getXpathExpression()", "testcase": false, "constructor": false}, {"identifier": "setNamespaceDefs", "parameters": "(String namespaceDefs)", "modifiers": "@IbisDoc({\"3\", \"Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.\", \"\"}) public", "return": "void", "signature": "void setNamespaceDefs(String namespaceDefs)", "full_signature": "@IbisDoc({\"3\", \"Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.\", \"\"}) public void setNamespaceDefs(String namespaceDefs)", "class_method_signature": "XmlSwitch.setNamespaceDefs(String namespaceDefs)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceDefs", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespaceDefs()", "full_signature": "public String getNamespaceDefs()", "class_method_signature": "XmlSwitch.getNamespaceDefs()", "testcase": false, "constructor": false}, {"identifier": "setSessionKey", "parameters": "(String sessionKey)", "modifiers": "@IbisDoc({\"4\", \"Name of the key in the <code>PipeLineSession</code> to retrieve the input message from, if a serviceSelectionStylesheetFilename or a xpathExpression is specified. \" + \"If no serviceSelectionStylesheetFilename or xpathExpression is specified, the value of the session variable is used as the name of the forward. \" + \"If none of sessionKey, serviceSelectionStylesheetFilename or xpathExpression are specified, the element name of the root node of the input message is taken as the name of forward.\", \"\"}) public", "return": "void", "signature": "void setSessionKey(String sessionKey)", "full_signature": "@IbisDoc({\"4\", \"Name of the key in the <code>PipeLineSession</code> to retrieve the input message from, if a serviceSelectionStylesheetFilename or a xpathExpression is specified. \" + \"If no serviceSelectionStylesheetFilename or xpathExpression is specified, the value of the session variable is used as the name of the forward. \" + \"If none of sessionKey, serviceSelectionStylesheetFilename or xpathExpression are specified, the element name of the root node of the input message is taken as the name of forward.\", \"\"}) public void setSessionKey(String sessionKey)", "class_method_signature": "XmlSwitch.setSessionKey(String sessionKey)", "testcase": false, "constructor": false}, {"identifier": "getSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSessionKey()", "full_signature": "public String getSessionKey()", "class_method_signature": "XmlSwitch.getSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setNotFoundForwardName", "parameters": "(String notFound)", "modifiers": "@IbisDoc({\"5\", \"Forward returned when the pipename derived from the stylesheet could not be found.\", \"\"}) public", "return": "void", "signature": "void setNotFoundForwardName(String notFound)", "full_signature": "@IbisDoc({\"5\", \"Forward returned when the pipename derived from the stylesheet could not be found.\", \"\"}) public void setNotFoundForwardName(String notFound)", "class_method_signature": "XmlSwitch.setNotFoundForwardName(String notFound)", "testcase": false, "constructor": false}, {"identifier": "getNotFoundForwardName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNotFoundForwardName()", "full_signature": "public String getNotFoundForwardName()", "class_method_signature": "XmlSwitch.getNotFoundForwardName()", "testcase": false, "constructor": false}, {"identifier": "setEmptyForwardName", "parameters": "(String empty)", "modifiers": "@IbisDoc({\"6\", \"Forward returned when the content, on which the switch is performed, is empty. if <code>emptyforwardname</code> is not specified, <code>notfoundforwardname</code> is used.\", \"\"}) public", "return": "void", "signature": "void setEmptyForwardName(String empty)", "full_signature": "@IbisDoc({\"6\", \"Forward returned when the content, on which the switch is performed, is empty. if <code>emptyforwardname</code> is not specified, <code>notfoundforwardname</code> is used.\", \"\"}) public void setEmptyForwardName(String empty)", "class_method_signature": "XmlSwitch.setEmptyForwardName(String empty)", "testcase": false, "constructor": false}, {"identifier": "getEmptyForwardName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEmptyForwardName()", "full_signature": "public String getEmptyForwardName()", "class_method_signature": "XmlSwitch.getEmptyForwardName()", "testcase": false, "constructor": false}, {"identifier": "setXsltVersion", "parameters": "(int xsltVersion)", "modifiers": "@IbisDoc({\"7\", \"If set to <code>2</code> xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). <code>0</code> will auto detect\", \"0\"}) public", "return": "void", "signature": "void setXsltVersion(int xsltVersion)", "full_signature": "@IbisDoc({\"7\", \"If set to <code>2</code> xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan). <code>0</code> will auto detect\", \"0\"}) public void setXsltVersion(int xsltVersion)", "class_method_signature": "XmlSwitch.setXsltVersion(int xsltVersion)", "testcase": false, "constructor": false}, {"identifier": "getXsltVersion", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getXsltVersion()", "full_signature": "public int getXsltVersion()", "class_method_signature": "XmlSwitch.getXsltVersion()", "testcase": false, "constructor": false}, {"identifier": "setXslt2", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when set <code>true</code> xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan)\", \"false\"}) @Deprecated @ConfigurationWarning(\"Its value is now auto detected. If necessary, replace with a setting of xsltVersion\") public", "return": "void", "signature": "void setXslt2(boolean b)", "full_signature": "@IbisDoc({\"when set <code>true</code> xslt processor 2.0 (net.sf.saxon) will be used, otherwise xslt processor 1.0 (org.apache.xalan)\", \"false\"}) @Deprecated @ConfigurationWarning(\"Its value is now auto detected. If necessary, replace with a setting of xsltVersion\") public void setXslt2(boolean b)", "class_method_signature": "XmlSwitch.setXslt2(boolean b)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/XmlSwitch.java"}, "focal_method": {"identifier": "setXpathExpression", "parameters": "(String xpathExpression)", "modifiers": "@IbisDoc({\"2\", \"xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $\", \"\"}) public", "return": "void", "body": "@IbisDoc({\"2\", \"xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $\", \"\"})\n\tpublic void setXpathExpression(String xpathExpression) {\n\t\tthis.xpathExpression = xpathExpression;\n\t}", "signature": "void setXpathExpression(String xpathExpression)", "full_signature": "@IbisDoc({\"2\", \"xpath-expression that returns a string representing the forward to look up. It's possible to refer to a parameter (which e.g. contains a value from a sessionkey) by using the parameter name prefixed with $\", \"\"}) public void setXpathExpression(String xpathExpression)", "class_method_signature": "XmlSwitch.setXpathExpression(String xpathExpression)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}