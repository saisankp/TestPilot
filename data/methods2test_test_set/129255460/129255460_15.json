{"test_class": {"identifier": "FrontServicesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FrontServices frontServices;", "modifier": "@Autowired\n    private", "type": "FrontServices", "declarator": "frontServices", "var_name": "frontServices"}], "file": "backend/src/test/java/com/running/coins/service/FrontServicesTest.java"}, "test_case": {"identifier": "userJoinv2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void userJoinv2() {\n        UserJoinRequest userJoinRequest = new UserJoinRequest();\n        userJoinRequest.setGroupId(1);\n        userJoinRequest.setOpenId(\"otvlM5VATjthdCeLQVfEDAzzBsro\");\n        //userJoinRequest.setOpenId(\"otvlM5Q9wQPdL196IYlwImhBuRYM\");\n        long v1begin = System.currentTimeMillis();\n        ResponseMessage responseMessage = frontServices.userJoin(userJoinRequest);\n        long v1end = System.currentTimeMillis();\n        System.err.println(\"old: \"+ (v1end-v1begin));\n        System.err.println(JSON.toJSON(responseMessage));\n\n        long v2begin = System.currentTimeMillis();\n        ResponseMessage responseMessage2 = frontServices.userJoinv2(userJoinRequest);\n        long v2end = System.currentTimeMillis();\n        System.err.println(v2end-v2begin);\n        System.err.println(JSON.toJSON(responseMessage2));\n\n        long v3begin = System.currentTimeMillis();\n        ResponseMessage responseMessage3 = frontServices.userJoinv3(userJoinRequest);\n        long v3end = System.currentTimeMillis();\n        System.err.println(v3end-v3begin);\n        System.err.println(JSON.toJSON(responseMessage3));\n\n    }", "signature": "void userJoinv2()", "full_signature": "@Test public void userJoinv2()", "class_method_signature": "FrontServicesTest.userJoinv2()", "testcase": true, "constructor": false, "invocations": ["setGroupId", "setOpenId", "currentTimeMillis", "userJoin", "currentTimeMillis", "println", "println", "toJSON", "currentTimeMillis", "userJoinv2", "currentTimeMillis", "println", "println", "toJSON", "currentTimeMillis", "userJoinv3", "currentTimeMillis", "println", "println", "toJSON"]}, "focal_class": {"identifier": "FrontServices", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger logger = LoggerFactory.getLogger(FrontServices.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FrontServices.class)", "var_name": "logger"}, {"original_string": "ImmutableMap<String, Integer> immutableDaysMap = ImmutableMap.<String, Integer>builder()\n            .put(\"MON\", 0)\n            .put(\"TUE\", 1)\n            .put(\"WED\", 2)\n            .put(\"THU\", 3)\n            .put(\"FRI\", 4)\n            .put(\"SAT\", 5)\n            .put(\"SUN\", 6)\n            .put(\"\u661f\u671f\u4e00\", 0)\n            .put(\"\u661f\u671f\u4e8c\", 1)\n            .put(\"\u661f\u671f\u4e09\", 2)\n            .put(\"\u661f\u671f\u56db\", 3)\n            .put(\"\u661f\u671f\u4e94\", 4)\n            .put(\"\u661f\u671f\u516d\", 5)\n            .put(\"\u661f\u671f\u65e5\", 6)\n            .build();", "modifier": "", "type": "ImmutableMap<String, Integer>", "declarator": "immutableDaysMap = ImmutableMap.<String, Integer>builder()\n            .put(\"MON\", 0)\n            .put(\"TUE\", 1)\n            .put(\"WED\", 2)\n            .put(\"THU\", 3)\n            .put(\"FRI\", 4)\n            .put(\"SAT\", 5)\n            .put(\"SUN\", 6)\n            .put(\"\u661f\u671f\u4e00\", 0)\n            .put(\"\u661f\u671f\u4e8c\", 1)\n            .put(\"\u661f\u671f\u4e09\", 2)\n            .put(\"\u661f\u671f\u56db\", 3)\n            .put(\"\u661f\u671f\u4e94\", 4)\n            .put(\"\u661f\u671f\u516d\", 5)\n            .put(\"\u661f\u671f\u65e5\", 6)\n            .build()", "var_name": "immutableDaysMap"}, {"original_string": "private final\n    UserInfoMapper userInfoMapper;", "modifier": "private final", "type": "UserInfoMapper", "declarator": "userInfoMapper", "var_name": "userInfoMapper"}, {"original_string": "private final\n    UserGroupMapper userGroupMapper;", "modifier": "private final", "type": "UserGroupMapper", "declarator": "userGroupMapper", "var_name": "userGroupMapper"}, {"original_string": "private final\n    TargetDistanceMapper targetDistanceMapper;", "modifier": "private final", "type": "TargetDistanceMapper", "declarator": "targetDistanceMapper", "var_name": "targetDistanceMapper"}, {"original_string": "private final\n    RunningRecordMapper runningRecordMapper;", "modifier": "private final", "type": "RunningRecordMapper", "declarator": "runningRecordMapper", "var_name": "runningRecordMapper"}, {"original_string": "private final\n    VoteRecordMapper voteRecordMapper;", "modifier": "private final", "type": "VoteRecordMapper", "declarator": "voteRecordMapper", "var_name": "voteRecordMapper"}], "methods": [{"identifier": "FrontServices", "parameters": "(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "modifiers": "@Autowired public", "return": "", "signature": " FrontServices(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "full_signature": "@Autowired public  FrontServices(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "class_method_signature": "FrontServices.FrontServices(UserInfoMapper userInfoMapper,\n                         UserGroupMapper userGroupMapper,\n                         TargetDistanceMapper targetDistanceMapper,\n                         RunningRecordMapper runningRecordMapper,\n                         VoteRecordMapper voteRecordMapper)", "testcase": false, "constructor": true}, {"identifier": "userJoin", "parameters": "(UserJoinRequest userJoinRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage userJoin(UserJoinRequest userJoinRequest)", "full_signature": "public ResponseMessage userJoin(UserJoinRequest userJoinRequest)", "class_method_signature": "FrontServices.userJoin(UserJoinRequest userJoinRequest)", "testcase": false, "constructor": false}, {"identifier": "userJoinv3", "parameters": "(UserJoinRequest userJoinRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage userJoinv3(UserJoinRequest userJoinRequest)", "full_signature": "public ResponseMessage userJoinv3(UserJoinRequest userJoinRequest)", "class_method_signature": "FrontServices.userJoinv3(UserJoinRequest userJoinRequest)", "testcase": false, "constructor": false}, {"identifier": "currentUserWeekly", "parameters": "(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage currentUserWeekly(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "full_signature": "public ResponseMessage currentUserWeekly(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "class_method_signature": "FrontServices.currentUserWeekly(CurrentUserWeeklyReportRequest currentUserWeeklyReportRequest)", "testcase": false, "constructor": false}, {"identifier": "everyOneWeekly", "parameters": "(WeeklyReportRequest weeklyReportRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "full_signature": "public ResponseMessage everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "class_method_signature": "FrontServices.everyOneWeekly(WeeklyReportRequest weeklyReportRequest)", "testcase": false, "constructor": false}, {"identifier": "everyOneWeekly2", "parameters": "(WeeklyReportRequest weeklyReportRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage everyOneWeekly2(WeeklyReportRequest weeklyReportRequest)", "full_signature": "public ResponseMessage everyOneWeekly2(WeeklyReportRequest weeklyReportRequest)", "class_method_signature": "FrontServices.everyOneWeekly2(WeeklyReportRequest weeklyReportRequest)", "testcase": false, "constructor": false}, {"identifier": "handleWeeklyUserInGroup", "parameters": "(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "modifiers": "private", "return": "void", "signature": "void handleWeeklyUserInGroup(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "full_signature": "private void handleWeeklyUserInGroup(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "class_method_signature": "FrontServices.handleWeeklyUserInGroup(List<UserRecord> userRecords, Date start, Date end, UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "setUserJoinResponse", "parameters": "(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "modifiers": "private", "return": "void", "signature": "void setUserJoinResponse(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "full_signature": "private void setUserJoinResponse(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "class_method_signature": "FrontServices.setUserJoinResponse(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "testcase": false, "constructor": false}, {"identifier": "setUserRecords", "parameters": "(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "modifiers": "private", "return": "UserRecord", "signature": "UserRecord setUserRecords(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "full_signature": "private UserRecord setUserRecords(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "class_method_signature": "FrontServices.setUserRecords(UserGroup userInGroup, UserRecord userRecord, float overallDoneDistance, float distancevalided, float distanceWaitvalided, float distanceRejected, UserInfo userInformation, TargetDistance targetDistance, float lastRecord, int likes, int dislikes, int status)", "testcase": false, "constructor": false}, {"identifier": "setUserGroup", "parameters": "(UserJoinRequest userJoinRequest, UserGroup userGroup)", "modifiers": "private", "return": "void", "signature": "void setUserGroup(UserJoinRequest userJoinRequest, UserGroup userGroup)", "full_signature": "private void setUserGroup(UserJoinRequest userJoinRequest, UserGroup userGroup)", "class_method_signature": "FrontServices.setUserGroup(UserJoinRequest userJoinRequest, UserGroup userGroup)", "testcase": false, "constructor": false}, {"identifier": "setUserInfo", "parameters": "(UserJoinRequest userJoinRequest, UserInfo userInfo)", "modifiers": "private", "return": "void", "signature": "void setUserInfo(UserJoinRequest userJoinRequest, UserInfo userInfo)", "full_signature": "private void setUserInfo(UserJoinRequest userJoinRequest, UserInfo userInfo)", "class_method_signature": "FrontServices.setUserInfo(UserJoinRequest userJoinRequest, UserInfo userInfo)", "testcase": false, "constructor": false}, {"identifier": "userJoinv2", "parameters": "(UserJoinRequest userJoinRequest)", "modifiers": "public", "return": "ResponseMessage", "signature": "ResponseMessage userJoinv2(UserJoinRequest userJoinRequest)", "full_signature": "public ResponseMessage userJoinv2(UserJoinRequest userJoinRequest)", "class_method_signature": "FrontServices.userJoinv2(UserJoinRequest userJoinRequest)", "testcase": false, "constructor": false}, {"identifier": "setUserJoinResponseV2", "parameters": "(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "modifiers": "private", "return": "void", "signature": "void setUserJoinResponseV2(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "full_signature": "private void setUserJoinResponseV2(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "class_method_signature": "FrontServices.setUserJoinResponseV2(UserJoinRequest userJoinRequest, UserInfo userInfo, UserJoinResponse userJoinResponse)", "testcase": false, "constructor": false}, {"identifier": "handleUserRecord", "parameters": "(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "modifiers": "private", "return": "void", "signature": "void handleUserRecord(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "full_signature": "private void handleUserRecord(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "class_method_signature": "FrontServices.handleUserRecord(UserInfo userInfo, UserJoinResponse userJoinResponse, List<UserRecord> userRecords, UserGroup userInGroup)", "testcase": false, "constructor": false}], "file": "backend/src/main/java/com/running/coins/service/FrontServices.java"}, "focal_method": {"identifier": "userJoinv2", "parameters": "(UserJoinRequest userJoinRequest)", "modifiers": "public", "return": "ResponseMessage", "body": "public ResponseMessage userJoinv2(UserJoinRequest userJoinRequest) {\n\n        log.info(userJoinRequest.toString());\n\n        ThisLocalizedWeek thisLocalizedWeek = new ThisLocalizedWeek(Locale.CHINA);\n        List<UserRecord> userRecords = runningRecordMapper.selectDailyUserRecord(thisLocalizedWeek.getFirstDay(), thisLocalizedWeek.getLastDay());\n\n        UserJoinResponse userJoinResponse = new UserJoinResponse();\n\n\n\n        /** \u5bf9 null \u503c\u5904\u7406 */\n        userRecords = userRecords.stream()\n                .map(e -> {\n                    if (e.getDislikes() == null) {\n                        e.setDislikes(0);\n                    }\n                    if (e.getLikes() == null) {\n                        e.setLikes(0);\n                    }\n                    return e;\n                }).collect(Collectors.toList());\n\n\n        List<UserRecord> collectUserRecord = userRecords.stream().filter(e -> e.getUserOpenId().equals(userJoinRequest.getOpenId())).collect(Collectors.toList());\n\n\n        if (collectUserRecord.size() > 0) {\n            userJoinResponse.setUserRecord(collectUserRecord.get(0));\n        } else {\n\n            /** \u5982\u679c\u6211\u8fd9\u5468\u6709\u6253\u5361\uff0c\u90a3\u4e48\u5c31\u62ff\u8fd9\u4e2a\u8fd9\u5468\u6253\u5f00\u7684\u6570\u636e*/\n            UserRecord userRecord1 = runningRecordMapper.selectDailyUserRecordWithOpenId(thisLocalizedWeek.getFirstDay(), thisLocalizedWeek.getLastDay(), userJoinRequest.getOpenId());\n\n            if (userRecord1 != null) {\n                if (userRecord1.getDislikes() == null) {\n                    userRecord1.setDislikes(0);\n                }\n                if (userRecord1.getLikes() == null) {\n                    userRecord1.setLikes(0);\n                }\n                userJoinResponse.setUserRecord(userRecord1);\n            } else {\n                /** sql\u67e5\u8be2\u51fa\u6ca1\u300e\u6211\u300f\u7684\u4fe1\u606f\u7684\u65f6\u5019 \u62fc\u51d1\u51fa0*/\n                UserInfo userInfo = userInfoMapper.selectByOpenId(userJoinRequest.getOpenId());\n                UserGroup userGroup = userGroupMapper.selectByGroupIdAndUserOpenId(1, userJoinRequest.getOpenId());\n                TargetDistance targetDistance = targetDistanceMapper.selectByUserGroupIdAndTimeRange(userGroup.getUserGroupId(), thisLocalizedWeek.getFirstDay(), thisLocalizedWeek.getLastDay());\n                UserRecord userRecord = new UserRecord();\n                userRecord.setCoins(userInfo.getCoins());\n                userRecord.setDislikes(0);\n                userRecord.setLikes(0);\n                userRecord.setCurrent((float) 0);\n                userRecord.setDistanceValided((float) 0);\n                userRecord.setTarget(targetDistance.getTargetDistance());\n                userRecord.setUserGroupId(userGroup.getUserGroupId());\n                userRecord.setIcon(userInfo.getIcon());\n                userRecord.setNickName(userInfo.getUserName());\n                userRecord.setUserOpenId(userInfo.getOpenId());\n                userJoinResponse.setUserRecord(userRecord);\n            }\n\n        }\n\n        List<UserRecord> collectOtherUserRecord = userRecords.stream().filter(e -> !e.getUserOpenId().equals(userJoinRequest.getOpenId())).collect(Collectors.toList());\n        userJoinResponse.setOtherUsersRecord(collectOtherUserRecord);\n\n        return ResultUtils.success(userJoinResponse);\n    }", "signature": "ResponseMessage userJoinv2(UserJoinRequest userJoinRequest)", "full_signature": "public ResponseMessage userJoinv2(UserJoinRequest userJoinRequest)", "class_method_signature": "FrontServices.userJoinv2(UserJoinRequest userJoinRequest)", "testcase": false, "constructor": false, "invocations": ["info", "toString", "selectDailyUserRecord", "getFirstDay", "getLastDay", "collect", "map", "stream", "getDislikes", "setDislikes", "getLikes", "setLikes", "toList", "collect", "filter", "stream", "equals", "getUserOpenId", "getOpenId", "toList", "size", "setUserRecord", "get", "selectDailyUserRecordWithOpenId", "getFirstDay", "getLastDay", "getOpenId", "getDislikes", "setDislikes", "getLikes", "setLikes", "setUserRecord", "selectByOpenId", "getOpenId", "selectByGroupIdAndUserOpenId", "getOpenId", "selectByUserGroupIdAndTimeRange", "getUserGroupId", "getFirstDay", "getLastDay", "setCoins", "getCoins", "setDislikes", "setLikes", "setCurrent", "setDistanceValided", "setTarget", "getTargetDistance", "setUserGroupId", "getUserGroupId", "setIcon", "getIcon", "setNickName", "getUserName", "setUserOpenId", "getOpenId", "setUserRecord", "collect", "filter", "stream", "equals", "getUserOpenId", "getOpenId", "toList", "setOtherUsersRecord", "success"]}, "repository": {"repo_id": 129255460, "url": "https://github.com/artbite008/running_coin", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 5, "size": 3010, "license": "licensed"}}