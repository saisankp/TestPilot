{"test_class": {"identifier": "StringUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String[] raw = new String[] { \"hallo\", \"is 1<2 ?\", \"or 4>5 ?\", \"or 1<>2 ?\", \"\\\"hi\\\" 'there'\" };", "modifier": "private static", "type": "String[]", "declarator": "raw = new String[] { \"hallo\", \"is 1<2 ?\", \"or 4>5 ?\", \"or 1<>2 ?\", \"\\\"hi\\\" 'there'\" }", "var_name": "raw"}, {"original_string": "private static String[] xml = new String[] { \"hallo\", \"is 1&lt;2 ?\", \"or 4&gt;5 ?\", \"or 1&lt;&gt;2 ?\", \"&quot;hi&quot; &apos;there&apos;\" };", "modifier": "private static", "type": "String[]", "declarator": "xml = new String[] { \"hallo\", \"is 1&lt;2 ?\", \"or 4&gt;5 ?\", \"or 1&lt;&gt;2 ?\", \"&quot;hi&quot; &apos;there&apos;\" }", "var_name": "xml"}, {"original_string": "private static String[] jsn = new String[] { \"hallo\", \"is 1<2 ?\", \"or 4>5 ?\", \"or 1<>2 ?\", \"\\\\\\\"hi\\\\\\\" \\\\'there\\\\'\" };", "modifier": "private static", "type": "String[]", "declarator": "jsn = new String[] { \"hallo\", \"is 1<2 ?\", \"or 4>5 ?\", \"or 1<>2 ?\", \"\\\\\\\"hi\\\\\\\" \\\\'there\\\\'\" }", "var_name": "jsn"}], "file": "brouter-util/src/test/java/btools/util/StringUtilsTest.java"}, "test_case": {"identifier": "jsonEncodingTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void jsonEncodingTest()\n  {\n    for( int i=0; i<raw.length; i++ )\n    {\n      Assert.assertEquals( \"json encoding mismatch for raw: \" + raw[i], jsn[i], StringUtils.escapeJson( raw[i] ) );\n    }\n  }", "signature": "void jsonEncodingTest()", "full_signature": "@Test public void jsonEncodingTest()", "class_method_signature": "StringUtilsTest.jsonEncodingTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "escapeJson"]}, "focal_class": {"identifier": "StringUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static char[]   xmlChr = new char[]  { '&',     '<',    '>',    '\\'',     '\"',      '\\t',    '\\n',    '\\r' };", "modifier": "private static", "type": "char[]", "declarator": "xmlChr = new char[]  { '&',     '<',    '>',    '\\'',     '\"',      '\\t',    '\\n',    '\\r' }", "var_name": "xmlChr"}, {"original_string": "private static String[] xmlEsc = new String[]{ \"&amp;\", \"&lt;\", \"&gt;\", \"&apos;\", \"&quot;\", \"&#x9;\", \"&#xA;\", \"&#xD;\" };", "modifier": "private static", "type": "String[]", "declarator": "xmlEsc = new String[]{ \"&amp;\", \"&lt;\", \"&gt;\", \"&apos;\", \"&quot;\", \"&#x9;\", \"&#xA;\", \"&#xD;\" }", "var_name": "xmlEsc"}, {"original_string": "private static char[]   jsnChr = new char[]  { '\\'',  '\"',    '\\\\',   '/' };", "modifier": "private static", "type": "char[]", "declarator": "jsnChr = new char[]  { '\\'',  '\"',    '\\\\',   '/' }", "var_name": "jsnChr"}, {"original_string": "private static String[] jsnEsc = new String[]{ \"\\\\'\", \"\\\\\\\"\", \"\\\\\\\\\", \"\\\\/\" };", "modifier": "private static", "type": "String[]", "declarator": "jsnEsc = new String[]{ \"\\\\'\", \"\\\\\\\"\", \"\\\\\\\\\", \"\\\\/\" }", "var_name": "jsnEsc"}], "methods": [{"identifier": "escapeJson", "parameters": "( String s )", "modifiers": "public static", "return": "String", "signature": "String escapeJson( String s )", "full_signature": "public static String escapeJson( String s )", "class_method_signature": "StringUtils.escapeJson( String s )", "testcase": false, "constructor": false}, {"identifier": "escapeXml10", "parameters": "( String s )", "modifiers": "public static", "return": "String", "signature": "String escapeXml10( String s )", "full_signature": "public static String escapeXml10( String s )", "class_method_signature": "StringUtils.escapeXml10( String s )", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "( String s, char[] chr, String[] esc )", "modifiers": "private static", "return": "String", "signature": "String escape( String s, char[] chr, String[] esc )", "full_signature": "private static String escape( String s, char[] chr, String[] esc )", "class_method_signature": "StringUtils.escape( String s, char[] chr, String[] esc )", "testcase": false, "constructor": false}], "file": "brouter-util/src/main/java/btools/util/StringUtils.java"}, "focal_method": {"identifier": "escapeJson", "parameters": "( String s )", "modifiers": "public static", "return": "String", "body": "public static String escapeJson( String s )\n  {\n    return escape( s, jsnChr, jsnEsc );\n  }", "signature": "String escapeJson( String s )", "full_signature": "public static String escapeJson( String s )", "class_method_signature": "StringUtils.escapeJson( String s )", "testcase": false, "constructor": false, "invocations": ["escape"]}, "repository": {"repo_id": 15870646, "url": "https://github.com/abrensch/brouter", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 172, "size": 3569, "license": "licensed"}}