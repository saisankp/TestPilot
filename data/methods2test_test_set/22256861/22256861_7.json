{"test_class": {"identifier": "CentralWavelengthProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static float DIFF = 0.000001f;", "modifier": "private static", "type": "float", "declarator": "DIFF = 0.000001f", "var_name": "DIFF"}, {"original_string": "private CentralWavelengthProvider provider;", "modifier": "private", "type": "CentralWavelengthProvider", "declarator": "provider", "var_name": "provider"}], "file": "s3tbx-meris-sdr/src/test/java/org/esa/s3tbx/meris/cloud/CentralWavelengthProviderTest.java"}, "test_case": {"identifier": "testIllegalProductType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIllegalProductType() {\n        try {\n            provider.getCentralWavelength(\"MER_TT\");\n            fail(\"Exception expected.\");\n        } catch (IllegalArgumentException ignored) {\n        }\n    }", "signature": "void testIllegalProductType()", "full_signature": "@Test public void testIllegalProductType()", "class_method_signature": "CentralWavelengthProviderTest.testIllegalProductType()", "testcase": true, "constructor": false, "invocations": ["getCentralWavelength", "fail"]}, "focal_class": {"identifier": "CentralWavelengthProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CENTRAL_WAVELENGTH_FILE_NAME = \"central_wvl_rr.txt\";", "modifier": "private static final", "type": "String", "declarator": "CENTRAL_WAVELENGTH_FILE_NAME = \"central_wvl_rr.txt\"", "var_name": "CENTRAL_WAVELENGTH_FILE_NAME"}, {"original_string": "private static final int DETECTOR_LENGTH_RR = 925;", "modifier": "private static final", "type": "int", "declarator": "DETECTOR_LENGTH_RR = 925", "var_name": "DETECTOR_LENGTH_RR"}, {"original_string": "private static final int DETECTOR_LENGTH_FR = 3700;", "modifier": "private static final", "type": "int", "declarator": "DETECTOR_LENGTH_FR = 3700", "var_name": "DETECTOR_LENGTH_FR"}, {"original_string": "private float[] centralWavelenthRr;", "modifier": "private", "type": "float[]", "declarator": "centralWavelenthRr", "var_name": "centralWavelenthRr"}], "methods": [{"identifier": "CentralWavelengthProvider", "parameters": "()", "modifiers": "public", "return": "", "signature": " CentralWavelengthProvider()", "full_signature": "public  CentralWavelengthProvider()", "class_method_signature": "CentralWavelengthProvider.CentralWavelengthProvider()", "testcase": false, "constructor": true}, {"identifier": "readAuxData", "parameters": "(File auxDataDir)", "modifiers": "public", "return": "void", "signature": "void readAuxData(File auxDataDir)", "full_signature": "public void readAuxData(File auxDataDir)", "class_method_signature": "CentralWavelengthProvider.readAuxData(File auxDataDir)", "testcase": false, "constructor": false}, {"identifier": "readCW", "parameters": "(InputStream inputStream)", "modifiers": "public", "return": "void", "signature": "void readCW(InputStream inputStream)", "full_signature": "public void readCW(InputStream inputStream)", "class_method_signature": "CentralWavelengthProvider.readCW(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getCentralWavelength", "parameters": "(final String productType)", "modifiers": "public", "return": "float[]", "signature": "float[] getCentralWavelength(final String productType)", "full_signature": "public float[] getCentralWavelength(final String productType)", "class_method_signature": "CentralWavelengthProvider.getCentralWavelength(final String productType)", "testcase": false, "constructor": false}, {"identifier": "generateCentralWavelengthFr", "parameters": "()", "modifiers": "private", "return": "float[]", "signature": "float[] generateCentralWavelengthFr()", "full_signature": "private float[] generateCentralWavelengthFr()", "class_method_signature": "CentralWavelengthProvider.generateCentralWavelengthFr()", "testcase": false, "constructor": false}], "file": "s3tbx-meris-sdr/src/main/java/org/esa/s3tbx/meris/cloud/CentralWavelengthProvider.java"}, "focal_method": {"identifier": "getCentralWavelength", "parameters": "(final String productType)", "modifiers": "public", "return": "float[]", "body": "public float[] getCentralWavelength(final String productType) {\n        if (productType.startsWith(\"MER_RR\")) {\n            return centralWavelenthRr;\n        } else if (productType.startsWith(\"MER_F\")) {\n            return generateCentralWavelengthFr();\n        } else {\n            throw new IllegalArgumentException(\"'The product has an unsupported product type: \" + productType);\n        }\n    }", "signature": "float[] getCentralWavelength(final String productType)", "full_signature": "public float[] getCentralWavelength(final String productType)", "class_method_signature": "CentralWavelengthProvider.getCentralWavelength(final String productType)", "testcase": false, "constructor": false, "invocations": ["startsWith", "startsWith", "generateCentralWavelengthFr"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}