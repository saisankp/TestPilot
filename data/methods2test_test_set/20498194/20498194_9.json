{"test_class": {"identifier": "TestHttpNotification", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServletTestContext testContext = null;", "modifier": "private", "type": "ServletTestContext", "declarator": "testContext = null", "var_name": "testContext"}, {"original_string": "private String hostport;", "modifier": "private", "type": "String", "declarator": "hostport", "var_name": "hostport"}], "file": "common/src/test/java/org/pig/oink/common/service/impl/TestHttpNotification.java"}, "test_case": {"identifier": "testHttpNotification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHttpNotification() {\n\t\tHttpNotification notification = new HttpNotification(\"http://\" + hostport + \"/regex/aggregate\");\n\t\tnotification.run();\n\t\tAssert.assertEquals(notification.getResponseCode(), \"200\");\n\t\tAssert.assertEquals(notification.getResponseBody(), \"\");\n\t}", "signature": "void testHttpNotification()", "full_signature": "@Test public void testHttpNotification()", "class_method_signature": "TestHttpNotification.testHttpNotification()", "testcase": true, "constructor": false, "invocations": ["run", "assertEquals", "getResponseCode", "assertEquals", "getResponseBody"]}, "focal_class": {"identifier": "HttpNotification", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(HttpNotification.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(HttpNotification.class)", "var_name": "logger"}, {"original_string": "private ClientConfig config = new DefaultClientConfig();", "modifier": "private", "type": "ClientConfig", "declarator": "config = new DefaultClientConfig()", "var_name": "config"}, {"original_string": "private Client client = Client.create(config);", "modifier": "private", "type": "Client", "declarator": "client = Client.create(config)", "var_name": "client"}, {"original_string": "private String url;", "modifier": "private", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "private String responseCode, responseBody;", "modifier": "private", "type": "String", "declarator": "responseCode", "var_name": "responseCode"}], "methods": [{"identifier": "HttpNotification", "parameters": "(String url)", "modifiers": "public", "return": "", "signature": " HttpNotification(String url)", "full_signature": "public  HttpNotification(String url)", "class_method_signature": "HttpNotification.HttpNotification(String url)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "HttpNotification.run()", "testcase": false, "constructor": false}, {"identifier": "getResponseCode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResponseCode()", "full_signature": "public String getResponseCode()", "class_method_signature": "HttpNotification.getResponseCode()", "testcase": false, "constructor": false}, {"identifier": "getResponseBody", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getResponseBody()", "full_signature": "public String getResponseBody()", "class_method_signature": "HttpNotification.getResponseBody()", "testcase": false, "constructor": false}], "file": "common/src/main/java/org/pig/oink/common/service/impl/HttpNotification.java"}, "focal_method": {"identifier": "HttpNotification", "parameters": "(String url)", "modifiers": "public", "return": "", "body": "public HttpNotification(String url) {\n\t\tthis.url = url;\n\t}", "signature": " HttpNotification(String url)", "full_signature": "public  HttpNotification(String url)", "class_method_signature": "HttpNotification.HttpNotification(String url)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 20498194, "url": "https://github.com/eBay/oink", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 25, "size": 8039, "license": "licensed"}}