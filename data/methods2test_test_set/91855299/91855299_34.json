{"test_class": {"identifier": "DataTypesTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/edu/wpi/first/shuffleboard/api/data/DataTypesTest.java"}, "test_case": {"identifier": "testClosestTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testClosestTo() {\n    final List<Class<?>> classes = Lists.newArrayList(C.class, B.class, D.class, A.class);\n\n    classes.sort(closestTo(Object.class));\n    assertEquals(Lists.newArrayList(D.class, C.class, B.class, A.class), classes);\n\n    classes.sort(closestTo(D.class));\n    assertEquals(Lists.newArrayList(A.class, B.class, C.class, D.class), classes);\n  }", "signature": "void testClosestTo()", "full_signature": "@Test public void testClosestTo()", "class_method_signature": "DataTypesTest.testClosestTo()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "sort", "closestTo", "assertEquals", "newArrayList", "sort", "closestTo", "assertEquals", "newArrayList"]}, "focal_class": {"identifier": "DataTypes", "superclass": "extends Registry<DataType>", "interfaces": "", "fields": [{"original_string": "private static DataTypes defaultInstance = null;", "modifier": "private static", "type": "DataTypes", "declarator": "defaultInstance = null", "var_name": "defaultInstance"}, {"original_string": "public static final DataType None = NoneType.Instance;", "modifier": "public static final", "type": "DataType", "declarator": "None = NoneType.Instance", "var_name": "None"}, {"original_string": "public static final DataType All = AllType.Instance;", "modifier": "public static final", "type": "DataType", "declarator": "All = AllType.Instance", "var_name": "All"}, {"original_string": "public static final DataType Unknown = UnknownType.Instance;", "modifier": "public static final", "type": "DataType", "declarator": "Unknown = UnknownType.Instance", "var_name": "Unknown"}, {"original_string": "public static final ComplexDataType<MapData> Map = MapType.Instance;", "modifier": "public static final", "type": "ComplexDataType<MapData>", "declarator": "Map = MapType.Instance", "var_name": "Map"}, {"original_string": "public static final DataType<Boolean> Boolean = BooleanType.Instance;", "modifier": "public static final", "type": "DataType<Boolean>", "declarator": "Boolean = BooleanType.Instance", "var_name": "Boolean"}, {"original_string": "public static final DataType<boolean[]> BooleanArray = BooleanArrayType.Instance;", "modifier": "public static final", "type": "DataType<boolean[]>", "declarator": "BooleanArray = BooleanArrayType.Instance", "var_name": "BooleanArray"}, {"original_string": "public static final DataType<Number> Number = NumberType.Instance;", "modifier": "public static final", "type": "DataType<Number>", "declarator": "Number = NumberType.Instance", "var_name": "Number"}, {"original_string": "public static final DataType<double[]> NumberArray = NumberArrayType.Instance;", "modifier": "public static final", "type": "DataType<double[]>", "declarator": "NumberArray = NumberArrayType.Instance", "var_name": "NumberArray"}, {"original_string": "public static final DataType<String> String = StringType.Instance;", "modifier": "public static final", "type": "DataType<String>", "declarator": "String = StringType.Instance", "var_name": "String"}, {"original_string": "public static final DataType<String[]> StringArray = StringArrayType.Instance;", "modifier": "public static final", "type": "DataType<String[]>", "declarator": "StringArray = StringArrayType.Instance", "var_name": "StringArray"}, {"original_string": "public static final DataType<byte[]> ByteArray = RawByteType.Instance;", "modifier": "public static final", "type": "DataType<byte[]>", "declarator": "ByteArray = RawByteType.Instance", "var_name": "ByteArray"}, {"original_string": "private static final ImmutableCollection<DataType<?>> defaultTypes = ImmutableSet.of(\n      // catchall\n      None,\n      All,\n      Unknown,\n      Map,\n      // primitives\n      Boolean,\n      BooleanArray,\n      Number,\n      NumberArray,\n      String,\n      StringArray,\n      ByteArray\n  );", "modifier": "private static final", "type": "ImmutableCollection<DataType<?>>", "declarator": "defaultTypes = ImmutableSet.of(\n      // catchall\n      None,\n      All,\n      Unknown,\n      Map,\n      // primitives\n      Boolean,\n      BooleanArray,\n      Number,\n      NumberArray,\n      String,\n      StringArray,\n      ByteArray\n  )", "var_name": "defaultTypes"}, {"original_string": "private final Map<String, DataType> dataTypes = new TreeMap<>();", "modifier": "private final", "type": "Map<String, DataType>", "declarator": "dataTypes = new TreeMap<>()", "var_name": "dataTypes"}, {"original_string": "private final Map<Class, Optional<DataType>> typeCache = new HashMap<>();", "modifier": "private final", "type": "Map<Class, Optional<DataType>>", "declarator": "typeCache = new HashMap<>()", "var_name": "typeCache"}], "methods": [{"identifier": "getDefault", "parameters": "()", "modifiers": "public static", "return": "DataTypes", "signature": "DataTypes getDefault()", "full_signature": "public static DataTypes getDefault()", "class_method_signature": "DataTypes.getDefault()", "testcase": false, "constructor": false}, {"identifier": "DataTypes", "parameters": "()", "modifiers": "public", "return": "", "signature": " DataTypes()", "full_signature": "public  DataTypes()", "class_method_signature": "DataTypes.DataTypes()", "testcase": false, "constructor": true}, {"identifier": "setDefault", "parameters": "(DataTypes instance)", "modifiers": "@VisibleForTesting public static", "return": "void", "signature": "void setDefault(DataTypes instance)", "full_signature": "@VisibleForTesting public static void setDefault(DataTypes instance)", "class_method_signature": "DataTypes.setDefault(DataTypes instance)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(DataType dataType)", "modifiers": "@Override public", "return": "void", "signature": "void register(DataType dataType)", "full_signature": "@Override public void register(DataType dataType)", "class_method_signature": "DataTypes.register(DataType dataType)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(DataType dataType)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(DataType dataType)", "full_signature": "@Override public void unregister(DataType dataType)", "class_method_signature": "DataTypes.unregister(DataType dataType)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name)", "modifiers": "public", "return": "Optional<DataType>", "signature": "Optional<DataType> forName(String name)", "full_signature": "public Optional<DataType> forName(String name)", "class_method_signature": "DataTypes.forName(String name)", "testcase": false, "constructor": false}, {"identifier": "forJavaType", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Optional<DataType<T>>", "signature": "Optional<DataType<T>> forJavaType(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public Optional<DataType<T>> forJavaType(Class<T> type)", "class_method_signature": "DataTypes.forJavaType(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "forJavaTypes", "parameters": "(Class<?>... types)", "modifiers": "public", "return": "Set<DataType>", "signature": "Set<DataType> forJavaTypes(Class<?>... types)", "full_signature": "public Set<DataType> forJavaTypes(Class<?>... types)", "class_method_signature": "DataTypes.forJavaTypes(Class<?>... types)", "testcase": false, "constructor": false}, {"identifier": "closestTo", "parameters": "(Class<?> target)", "modifiers": "@VisibleForTesting static", "return": "Comparator<Class<?>>", "signature": "Comparator<Class<?>> closestTo(Class<?> target)", "full_signature": "@VisibleForTesting static Comparator<Class<?>> closestTo(Class<?> target)", "class_method_signature": "DataTypes.closestTo(Class<?> target)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Class<?> first, Class<?> other)", "modifiers": "private static", "return": "int", "signature": "int distance(Class<?> first, Class<?> other)", "full_signature": "private static int distance(Class<?> first, Class<?> other)", "class_method_signature": "DataTypes.distance(Class<?> first, Class<?> other)", "testcase": false, "constructor": false}, {"identifier": "forType", "parameters": "(Class<D> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Optional<D>", "signature": "Optional<D> forType(Class<D> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public Optional<D> forType(Class<D> clazz)", "class_method_signature": "DataTypes.forType(Class<D> clazz)", "testcase": false, "constructor": false}, {"identifier": "forTypes", "parameters": "(Class<? extends DataType>... types)", "modifiers": "public", "return": "Set<DataType>", "signature": "Set<DataType> forTypes(Class<? extends DataType>... types)", "full_signature": "public Set<DataType> forTypes(Class<? extends DataType>... types)", "class_method_signature": "DataTypes.forTypes(Class<? extends DataType>... types)", "testcase": false, "constructor": false}, {"identifier": "isCompatible", "parameters": "(DataType type, Collection<? extends DataType> types)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCompatible(DataType type, Collection<? extends DataType> types)", "full_signature": "public static boolean isCompatible(DataType type, Collection<? extends DataType> types)", "class_method_signature": "DataTypes.isCompatible(DataType type, Collection<? extends DataType> types)", "testcase": false, "constructor": false}], "file": "api/src/main/java/edu/wpi/first/shuffleboard/api/data/DataTypes.java"}, "focal_method": {"identifier": "closestTo", "parameters": "(Class<?> target)", "modifiers": "@VisibleForTesting static", "return": "Comparator<Class<?>>", "body": "@VisibleForTesting\n  static Comparator<Class<?>> closestTo(Class<?> target) {\n    return (o1, o2) -> {\n      if (o1 == o2) {\n        return 0;\n      }\n      if (o1 == null) {\n        return -1;\n      } else if (o2 == null) {\n        return 1;\n      }\n      if (o1 == target) {\n        return 1;\n      } else if (o2 == target) {\n        return -1;\n      }\n      return Integer.compare(distance(o2, target), distance(o1, target));\n    };\n  }", "signature": "Comparator<Class<?>> closestTo(Class<?> target)", "full_signature": "@VisibleForTesting static Comparator<Class<?>> closestTo(Class<?> target)", "class_method_signature": "DataTypes.closestTo(Class<?> target)", "testcase": false, "constructor": false, "invocations": ["compare", "distance", "distance"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}