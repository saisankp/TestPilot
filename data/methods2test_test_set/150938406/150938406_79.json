{"test_class": {"identifier": "JaccardDistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/distance/JaccardDistanceTest.java"}, "test_case": {"identifier": "testContinuousDistance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testContinuousDistance() {\n        DenseVector vec1 = new DenseVector(new double[] {1, 0, 4, 0, 3});\n        DenseVector vec2 = new DenseVector(new double[] {0, 6, 1, 0, 4});\n        SparseVector vec3 = new SparseVector(5, new int[] {1, 3}, new double[] {0.1, 0.4});\n        SparseVector vec4 = new SparseVector(5, new int[] {2, 3}, new double[] {0.4, 0.1});\n\n        ContinuousDistance distance = new JaccardDistance();\n        Assert.assertEquals(distance.calc(vec1, vec2), 0.5, 0.01);\n        Assert.assertEquals(distance.calc(vec1.getData(), vec2.getData()), 0.5, 0.01);\n        Assert.assertEquals(distance.calc(vec1, vec3), 1.0, 0.01);\n        Assert.assertEquals(distance.calc(vec3, vec4), 0.66, 0.01);\n        Assert.assertEquals(distance.calc(vec3, vec1), 1.0, 0.01);\n    }", "signature": "void testContinuousDistance()", "full_signature": "@Test public void testContinuousDistance()", "class_method_signature": "JaccardDistanceTest.testContinuousDistance()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "calc", "assertEquals", "calc", "getData", "getData", "assertEquals", "calc", "assertEquals", "calc", "assertEquals", "calc"]}, "focal_class": {"identifier": "JaccardDistance", "superclass": "extends FastDistance", "interfaces": "", "fields": [], "methods": [{"identifier": "calc", "parameters": "(double[] array1, double[] array2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(double[] array1, double[] array2)", "full_signature": "@Override public double calc(double[] array1, double[] array2)", "class_method_signature": "JaccardDistance.calc(double[] array1, double[] array2)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(Vector vec1, Vector vec2)", "full_signature": "@Override public double calc(Vector vec1, Vector vec2)", "class_method_signature": "JaccardDistance.calc(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(int[] indices1, int[] indices2)", "modifiers": "private static", "return": "int", "signature": "int intersect(int[] indices1, int[] indices2)", "full_signature": "private static int intersect(int[] indices1, int[] indices2)", "class_method_signature": "JaccardDistance.intersect(int[] indices1, int[] indices2)", "testcase": false, "constructor": false}, {"identifier": "intersect", "parameters": "(double[] indices1, double[] indices2)", "modifiers": "private static", "return": "int", "signature": "int intersect(double[] indices1, double[] indices2)", "full_signature": "private static int intersect(double[] indices1, double[] indices2)", "class_method_signature": "JaccardDistance.intersect(double[] indices1, double[] indices2)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "full_signature": "@Override void calc(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "class_method_signature": "JaccardDistance.calc(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "full_signature": "@Override void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "class_method_signature": "JaccardDistance.calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "testcase": false, "constructor": false}, {"identifier": "updateLabel", "parameters": "(FastDistanceData data)", "modifiers": "@Override public", "return": "void", "signature": "void updateLabel(FastDistanceData data)", "full_signature": "@Override public void updateLabel(FastDistanceData data)", "class_method_signature": "JaccardDistance.updateLabel(FastDistanceData data)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData left, FastDistanceVectorData right)", "modifiers": "@Override", "return": "double", "signature": "double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "full_signature": "@Override double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "class_method_signature": "JaccardDistance.calc(FastDistanceVectorData left, FastDistanceVectorData right)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/distance/JaccardDistance.java"}, "focal_method": {"identifier": "calc", "parameters": "(double[] array1, double[] array2)", "modifiers": "@Override public", "return": "double", "body": "@Override\n\tpublic double calc(double[] array1, double[] array2) {\n\t\tif(array1.length > array2.length){\n\t\t\tdouble[] tmp = array1;\n\t\t\tarray1 = array2;\n\t\t\tarray2 = tmp;\n\t\t}\n\t\tint intersect = 0, union = 0;\n\t\tfor(int i = 0; i < array1.length; i++){\n\t\t\tif(array1[i] != 0 && array2[i] != 0){\n\t\t\t\tintersect++;\n\t\t\t\tunion++;\n\t\t\t}else if(array1[i] != 0 || array2[i] != 0){\n\t\t\t\tunion++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = array1.length; i < array2.length; i++){\n\t\t\tif(array2[i] != 0){\n\t\t\t\tunion++;\n\t\t\t}\n\t\t}\n\t\treturn 1 - (double) intersect / union;\n\t}", "signature": "double calc(double[] array1, double[] array2)", "full_signature": "@Override public double calc(double[] array1, double[] array2)", "class_method_signature": "JaccardDistance.calc(double[] array1, double[] array2)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}