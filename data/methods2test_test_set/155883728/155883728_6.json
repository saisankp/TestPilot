{"test_class": {"identifier": "OpearPackageMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\")", "var_name": "testOutBaseDir"}, {"original_string": "private final File srcDir = new File(\"src/test/resources/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "srcDir = new File(\"src/test/resources/OpearPackageMojoTest\")", "var_name": "srcDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojoTest.java"}, "test_case": {"identifier": "testGetOakpalCoreVersionWithCoreAndApi", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOakpalCoreVersionWithCoreAndApi() {\n        final OpearPackageMojo mojo = newMojo();\n        final MavenProject project = mock(MavenProject.class);\n        mojo.project = project;\n        final MavenSession session = mock(MavenSession.class);\n        mojo.session = session;\n        final MavenExecutionRequest executionRequest = mock(MavenExecutionRequest.class);\n        when(session.getRequest()).thenReturn(executionRequest);\n        final String expectApiVersion = \"0.31415926535898\";\n        final String expectCoreVersion = \"1.31415926535898\";\n\n        final RepositorySystem repositorySystem = mock(RepositorySystem.class);\n        mojo.repositorySystem = repositorySystem;\n        final Dependency oakpalApiDep = new DependencyFilter()\n                .withGroupId(OAKPAL_GROUP_ID)\n                .withArtifactId(OAKPAL_API_ARTIFACT_ID)\n                .withVersion(expectApiVersion)\n                .toDependency();\n        final Artifact oakpalApiArt = mock(Artifact.class);\n        when(oakpalApiArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(oakpalApiArt.getArtifactId()).thenReturn(OAKPAL_API_ARTIFACT_ID);\n        when(oakpalApiArt.getVersion()).thenReturn(expectApiVersion);\n        when(repositorySystem.createDependencyArtifact(oakpalApiDep)).thenReturn(oakpalApiArt);\n\n        final Dependency oakpalCoreDep = new DependencyFilter()\n                .withGroupId(OAKPAL_GROUP_ID)\n                .withArtifactId(OAKPAL_CORE_ARTIFACT_ID)\n                .withVersion(expectCoreVersion)\n                .toDependency();\n        final Artifact oakpalCoreArt = mock(Artifact.class);\n        when(oakpalCoreArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(oakpalCoreArt.getArtifactId()).thenReturn(OAKPAL_CORE_ARTIFACT_ID);\n        when(oakpalCoreArt.getVersion()).thenReturn(expectCoreVersion);\n        when(repositorySystem.createDependencyArtifact(oakpalCoreDep)).thenReturn(oakpalCoreArt);\n\n        final Dependency oakpalApiDepTrans = new DependencyFilter()\n                .withGroupId(OAKPAL_GROUP_ID)\n                .withArtifactId(OAKPAL_API_ARTIFACT_ID)\n                .withVersion(expectCoreVersion)\n                .toDependency();\n        final Artifact oakpalApiArtTrans = mock(Artifact.class);\n        when(oakpalApiArtTrans.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(oakpalApiArtTrans.getArtifactId()).thenReturn(OAKPAL_API_ARTIFACT_ID);\n        when(oakpalApiArtTrans.getVersion()).thenReturn(expectCoreVersion);\n        when(repositorySystem.createDependencyArtifact(oakpalApiDepTrans)).thenReturn(oakpalApiArtTrans);\n\n        final ArtifactResolutionResult apiOnlyResult = mock(ArtifactResolutionResult.class);\n        when(apiOnlyResult.getArtifacts()).thenReturn(Collections.singleton(oakpalApiArt));\n        final ArtifactResolutionResult coreOnlyResult = mock(ArtifactResolutionResult.class);\n        when(coreOnlyResult.getArtifacts()).thenReturn(Collections.singleton(oakpalCoreArt));\n        final ArtifactResolutionResult coreTransResult = mock(ArtifactResolutionResult.class);\n        when(coreTransResult.getArtifacts()).thenReturn(new HashSet<>(Arrays.asList(oakpalCoreArt, oakpalApiArtTrans)));\n        final ArtifactResolutionResult apiTransOnlyResult = mock(ArtifactResolutionResult.class);\n        when(apiTransOnlyResult.getArtifacts()).thenReturn(Collections.singleton(oakpalApiArtTrans));\n\n        doAnswer(call -> {\n            final ArtifactResolutionRequest request = call.getArgument(0, ArtifactResolutionRequest.class);\n            if (request.getArtifact() == oakpalApiArt) {\n                return apiOnlyResult;\n            } else if (request.getArtifact() == oakpalApiArtTrans) {\n                return apiTransOnlyResult;\n            } else if (request.getArtifact() == oakpalCoreArt) {\n                if (request.isResolveTransitively()) {\n                    return coreTransResult;\n                } else {\n                    return coreOnlyResult;\n                }\n            } else {\n                return null;\n            }\n        }).when(repositorySystem).resolve(any(ArtifactResolutionRequest.class));\n\n        when(project.getDependencies()).thenReturn(Collections.singletonList(oakpalApiDep));\n        assertEquals(\"expect api version\", expectApiVersion, mojo.getOakpalCoreVersion());\n        when(project.getDependencies()).thenReturn(Collections.singletonList(oakpalCoreDep));\n        assertEquals(\"expect core version\", expectCoreVersion, mojo.getOakpalCoreVersion());\n        when(project.getDependencies()).thenReturn(Arrays.asList(oakpalCoreDep, oakpalApiDepTrans));\n        assertEquals(\"expect core version\", expectCoreVersion, mojo.getOakpalCoreVersion());\n        when(project.getDependencies()).thenReturn(Arrays.asList(oakpalApiDep, oakpalCoreDep, oakpalApiDepTrans));\n        assertEquals(\"expect api version\", expectApiVersion, mojo.getOakpalCoreVersion());\n        when(project.getDependencies()).thenReturn(Arrays.asList(oakpalApiDep, oakpalApiDepTrans));\n        assertEquals(\"expect api version\", expectApiVersion, mojo.getOakpalCoreVersion());\n        when(project.getDependencies()).thenReturn(Arrays.asList(oakpalApiDepTrans, oakpalApiDep));\n        assertEquals(\"expect core version\", expectCoreVersion, mojo.getOakpalCoreVersion());\n    }", "signature": "void testGetOakpalCoreVersionWithCoreAndApi()", "full_signature": "@Test public void testGetOakpalCoreVersionWithCoreAndApi()", "class_method_signature": "OpearPackageMojoTest.testGetOakpalCoreVersionWithCoreAndApi()", "testcase": true, "constructor": false, "invocations": ["newMojo", "mock", "mock", "mock", "thenReturn", "when", "getRequest", "mock", "toDependency", "withVersion", "withArtifactId", "withGroupId", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getVersion", "thenReturn", "when", "createDependencyArtifact", "toDependency", "withVersion", "withArtifactId", "withGroupId", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getVersion", "thenReturn", "when", "createDependencyArtifact", "toDependency", "withVersion", "withArtifactId", "withGroupId", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getVersion", "thenReturn", "when", "createDependencyArtifact", "mock", "thenReturn", "when", "getArtifacts", "singleton", "mock", "thenReturn", "when", "getArtifacts", "singleton", "mock", "thenReturn", "when", "getArtifacts", "asList", "mock", "thenReturn", "when", "getArtifacts", "singleton", "resolve", "when", "doAnswer", "getArgument", "getArtifact", "getArtifact", "getArtifact", "isResolveTransitively", "any", "thenReturn", "when", "getDependencies", "singletonList", "assertEquals", "getOakpalCoreVersion", "thenReturn", "when", "getDependencies", "singletonList", "assertEquals", "getOakpalCoreVersion", "thenReturn", "when", "getDependencies", "asList", "assertEquals", "getOakpalCoreVersion", "thenReturn", "when", "getDependencies", "asList", "assertEquals", "getOakpalCoreVersion", "thenReturn", "when", "getDependencies", "asList", "assertEquals", "getOakpalCoreVersion", "thenReturn", "when", "getDependencies", "asList", "assertEquals", "getOakpalCoreVersion"]}, "focal_class": {"identifier": "OpearPackageMojo", "superclass": "extends AbstractCommonMojo", "interfaces": "", "fields": [{"original_string": "public static final String OPEAR = \"opear\";", "modifier": "public static final", "type": "String", "declarator": "OPEAR = \"opear\"", "var_name": "OPEAR"}, {"original_string": "static final String OAKPAL_GROUP_ID = \"net.adamcin.oakpal\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_GROUP_ID = \"net.adamcin.oakpal\"", "var_name": "OAKPAL_GROUP_ID"}, {"original_string": "static final String OAKPAL_API_ARTIFACT_ID = \"oakpal-api\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_API_ARTIFACT_ID = \"oakpal-api\"", "var_name": "OAKPAL_API_ARTIFACT_ID"}, {"original_string": "static final String OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\"", "var_name": "OAKPAL_CORE_ARTIFACT_ID"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_API"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_CORE"}, {"original_string": "@Component\n    ArtifactHandlerManager artifactHandlerManager;", "modifier": "@Component", "type": "ArtifactHandlerManager", "declarator": "artifactHandlerManager", "var_name": "artifactHandlerManager"}, {"original_string": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)\n    String finalName;", "modifier": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)", "type": "String", "declarator": "finalName", "var_name": "finalName"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)\n    File planFile;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)", "type": "File", "declarator": "planFile", "var_name": "planFile"}, {"original_string": "@Parameter\n    List<File> additionalPlans = new ArrayList<>();", "modifier": "@Parameter", "type": "List<File>", "declarator": "additionalPlans = new ArrayList<>()", "var_name": "additionalPlans"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)\n    File outputDirectory;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPackageMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "attachArtifact", "parameters": "(final @NotNull File finalFile)", "modifiers": "", "return": "Artifact", "signature": "Artifact attachArtifact(final @NotNull File finalFile)", "full_signature": " Artifact attachArtifact(final @NotNull File finalFile)", "class_method_signature": "OpearPackageMojo.attachArtifact(final @NotNull File finalFile)", "testcase": false, "constructor": false}, {"identifier": "getOwnVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOwnVersion()", "full_signature": " String getOwnVersion()", "class_method_signature": "OpearPackageMojo.getOwnVersion()", "testcase": false, "constructor": false}, {"identifier": "getBundleSymbolicName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getBundleSymbolicName()", "full_signature": " String getBundleSymbolicName()", "class_method_signature": "OpearPackageMojo.getBundleSymbolicName()", "testcase": false, "constructor": false}, {"identifier": "getOakpalCoreVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOakpalCoreVersion()", "full_signature": " String getOakpalCoreVersion()", "class_method_signature": "OpearPackageMojo.getOakpalCoreVersion()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedLibraries", "parameters": "()", "modifiers": "", "return": "List<File>", "signature": "List<File> getEmbeddedLibraries()", "full_signature": " List<File> getEmbeddedLibraries()", "class_method_signature": "OpearPackageMojo.getEmbeddedLibraries()", "testcase": false, "constructor": false}, {"identifier": "assembleOpear", "parameters": "()", "modifiers": "", "return": "File", "signature": "File assembleOpear()", "full_signature": " File assembleOpear()", "class_method_signature": "OpearPackageMojo.assembleOpear()", "testcase": false, "constructor": false}, {"identifier": "mapDestFileNames", "parameters": "(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "modifiers": "static", "return": "Map<String, T>", "signature": "Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "full_signature": "static Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "class_method_signature": "OpearPackageMojo.mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "testcase": false, "constructor": false}, {"identifier": "shrinkWrapPlans", "parameters": "(final @NotNull File toDir)", "modifiers": "", "return": "Result<List<String>>", "signature": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "full_signature": " Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "class_method_signature": "OpearPackageMojo.shrinkWrapPlans(final @NotNull File toDir)", "testcase": false, "constructor": false}, {"identifier": "rewritePlan", "parameters": "(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "modifiers": "static", "return": "OakpalPlan", "signature": "OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "full_signature": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "class_method_signature": "OpearPackageMojo.rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "testcase": false, "constructor": false}, {"identifier": "copyPlans", "parameters": "(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "modifiers": "static", "return": "Result<Map<String, OakpalPlan>>", "signature": "Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "full_signature": "static Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "class_method_signature": "OpearPackageMojo.copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "testcase": false, "constructor": false}, {"identifier": "copyUrlStreams", "parameters": "(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "modifiers": "static", "return": "Result<Map<URL, String>>", "signature": "Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "full_signature": "static Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "class_method_signature": "OpearPackageMojo.copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojo.java"}, "focal_method": {"identifier": "getOakpalCoreVersion", "parameters": "()", "modifiers": "", "return": "String", "body": "String getOakpalCoreVersion() {\n        return resolveArtifacts(project.getDependencies(), true).stream()\n                .filter(TEST_IS_OAKPAL_CORE.or(TEST_IS_OAKPAL_API))\n                .findFirst()\n                .map(Artifact::getVersion).orElse(getOwnVersion());\n    }", "signature": "String getOakpalCoreVersion()", "full_signature": " String getOakpalCoreVersion()", "class_method_signature": "OpearPackageMojo.getOakpalCoreVersion()", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "findFirst", "filter", "stream", "resolveArtifacts", "getDependencies", "or", "getOwnVersion"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}