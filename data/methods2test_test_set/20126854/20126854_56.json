{"test_class": {"identifier": "LimitedInputStreamTest", "superclass": "", "interfaces": "", "fields": [], "file": "feya/libraries/archive_diff/diff.applier/src/test/java/com/google/archivepatcher/applier/LimitedInputStreamTest.java"}, "test_case": {"identifier": "testRead_WithLimit0", "parameters": "()", "modifiers": "@SuppressWarnings(\"resource\") @Test public", "return": "void", "body": "@SuppressWarnings(\"resource\")\n  @Test\n  public void testRead_WithLimit0() throws IOException {\n    LimitedInputStream stream = new LimitedInputStream(new ForeverInputStream(), 0);\n    Assert.assertEquals(-1, stream.read());\n  }", "signature": "void testRead_WithLimit0()", "full_signature": "@SuppressWarnings(\"resource\") @Test public void testRead_WithLimit0()", "class_method_signature": "LimitedInputStreamTest.testRead_WithLimit0()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "read"]}, "focal_class": {"identifier": "LimitedInputStream", "superclass": "extends FilterInputStream", "interfaces": "", "fields": [{"original_string": "private long numToRead;", "modifier": "private", "type": "long", "declarator": "numToRead", "var_name": "numToRead"}, {"original_string": "private byte[] ONE_BYTE = new byte[1];", "modifier": "private", "type": "byte[]", "declarator": "ONE_BYTE = new byte[1]", "var_name": "ONE_BYTE"}], "methods": [{"identifier": "LimitedInputStream", "parameters": "(InputStream in, long numToRead)", "modifiers": "public", "return": "", "signature": " LimitedInputStream(InputStream in, long numToRead)", "full_signature": "public  LimitedInputStream(InputStream in, long numToRead)", "class_method_signature": "LimitedInputStream.LimitedInputStream(InputStream in, long numToRead)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "LimitedInputStream.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b)", "full_signature": "@Override public int read(byte[] b)", "class_method_signature": "LimitedInputStream.read(byte[] b)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(byte[] b, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(byte[] b, int off, int len)", "full_signature": "@Override public int read(byte[] b, int off, int len)", "class_method_signature": "LimitedInputStream.read(byte[] b, int off, int len)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.applier/src/main/java/com/google/archivepatcher/applier/LimitedInputStream.java"}, "focal_method": {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int read() throws IOException {\n    if (read(ONE_BYTE, 0, 1) == 1) {\n      return ONE_BYTE[0];\n    }\n    return -1;\n  }", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "LimitedInputStream.read()", "testcase": false, "constructor": false, "invocations": ["read"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}