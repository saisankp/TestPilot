{"test_class": {"identifier": "Base64Test", "superclass": "", "interfaces": "", "fields": [], "file": "py4j-java/src/test/java/py4j/Base64Test.java"}, "test_case": {"identifier": "testEncodeToByte", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEncodeToByte() {\n\t\tbyte[] bytes = new byte[128];\n\t\tfor (int i = 0; i < 128; i++) {\n\t\t\tbytes[i] = (byte) i;\n\t\t}\n\n\t\tbyte[] encoded = Base64.encodeToByte(bytes, true);\n\t\tbyte[] encodedNoSep = Base64.encodeToByte(bytes, false);\n\t\tString encodedString = Base64.encodeToString(bytes, true);\n\t\tString encodedStringNoSep = Base64.encodeToString(bytes, false);\n\t\tchar[] encodedChar = Base64.encodeToChar(bytes, true);\n\t\tchar[] encodedCharNoSep = Base64.encodeToChar(bytes, false);\n\t\tbyte[] decoded = Base64.decode(encoded);\n\t\tbyte[] decodedNoSep = Base64.decode(encodedNoSep);\n\t\tbyte[] fastDecoded = Base64.decodeFast(encoded);\n\t\tbyte[] fastDecodedNoSep = Base64.decodeFast(encodedNoSep);\n\t\tbyte[] decodedString = Base64.decode(encodedString);\n\t\tbyte[] decodedStringNoSep = Base64.decode(encodedStringNoSep);\n\t\tbyte[] decodedStringFast = Base64.decodeFast(encodedString);\n\t\tbyte[] decodedStringFastNoSep = Base64.decodeFast(encodedStringNoSep);\n\t\tbyte[] decodedChar = Base64.decode(encodedChar);\n\t\tbyte[] decodedCharNoSep = Base64.decode(encodedCharNoSep);\n\t\tbyte[] decodedCharFast = Base64.decodeFast(encodedChar);\n\t\tbyte[] decodedCharFastNoSep = Base64.decodeFast(encodedCharNoSep);\n\n\t\tassertFalse(Arrays.equals(encoded, encodedNoSep));\n\t\tassertEquals(bytes.length, decoded.length);\n\t\tassertEquals(bytes.length, decodedNoSep.length);\n\t\tassertArrayEquals(bytes, decoded);\n\t\tassertArrayEquals(bytes, decodedNoSep);\n\t\tassertArrayEquals(bytes, fastDecoded);\n\t\tassertArrayEquals(bytes, fastDecodedNoSep);\n\t\tassertArrayEquals(bytes, decodedString);\n\t\tassertArrayEquals(bytes, decodedStringNoSep);\n\t\tassertArrayEquals(bytes, decodedStringFast);\n\t\tassertArrayEquals(bytes, decodedStringFastNoSep);\n\t\tassertArrayEquals(bytes, decodedChar);\n\t\tassertArrayEquals(bytes, decodedCharNoSep);\n\t\tassertArrayEquals(bytes, decodedCharFast);\n\t\tassertArrayEquals(bytes, decodedCharFastNoSep);\n\n\t}", "signature": "void testEncodeToByte()", "full_signature": "@Test public void testEncodeToByte()", "class_method_signature": "Base64Test.testEncodeToByte()", "testcase": true, "constructor": false, "invocations": ["encodeToByte", "encodeToByte", "encodeToString", "encodeToString", "encodeToChar", "encodeToChar", "decode", "decode", "decodeFast", "decodeFast", "decode", "decode", "decodeFast", "decodeFast", "decode", "decode", "decodeFast", "decodeFast", "assertFalse", "equals", "assertEquals", "assertEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals", "assertArrayEquals"]}, "focal_class": {"identifier": "Base64", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] CA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "CA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".toCharArray()", "var_name": "CA"}, {"original_string": "private static final int[] IA = new int[256];", "modifier": "private static final", "type": "int[]", "declarator": "IA = new int[256]", "var_name": "IA"}], "methods": [{"identifier": "decode", "parameters": "(byte[] sArr)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] decode(byte[] sArr)", "full_signature": "public final static byte[] decode(byte[] sArr)", "class_method_signature": "Base64.decode(byte[] sArr)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] sArr, int sOff, int sLen)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] decode(byte[] sArr, int sOff, int sLen)", "full_signature": "public final static byte[] decode(byte[] sArr, int sOff, int sLen)", "class_method_signature": "Base64.decode(byte[] sArr, int sOff, int sLen)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(char[] sArr)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] decode(char[] sArr)", "full_signature": "public final static byte[] decode(char[] sArr)", "class_method_signature": "Base64.decode(char[] sArr)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String str)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] decode(String str)", "full_signature": "public final static byte[] decode(String str)", "class_method_signature": "Base64.decode(String str)", "testcase": false, "constructor": false}, {"identifier": "decodeFast", "parameters": "(byte[] sArr)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] decodeFast(byte[] sArr)", "full_signature": "public final static byte[] decodeFast(byte[] sArr)", "class_method_signature": "Base64.decodeFast(byte[] sArr)", "testcase": false, "constructor": false}, {"identifier": "decodeFast", "parameters": "(char[] sArr)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] decodeFast(char[] sArr)", "full_signature": "public final static byte[] decodeFast(char[] sArr)", "class_method_signature": "Base64.decodeFast(char[] sArr)", "testcase": false, "constructor": false}, {"identifier": "decodeFast", "parameters": "(String s)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] decodeFast(String s)", "full_signature": "public final static byte[] decodeFast(String s)", "class_method_signature": "Base64.decodeFast(String s)", "testcase": false, "constructor": false}, {"identifier": "encodeToByte", "parameters": "(byte[] sArr, boolean lineSep)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] encodeToByte(byte[] sArr, boolean lineSep)", "full_signature": "public final static byte[] encodeToByte(byte[] sArr, boolean lineSep)", "class_method_signature": "Base64.encodeToByte(byte[] sArr, boolean lineSep)", "testcase": false, "constructor": false}, {"identifier": "encodeToByte", "parameters": "(byte[] sArr, int sOff, int sLen, boolean lineSep)", "modifiers": "public final static", "return": "byte[]", "signature": "byte[] encodeToByte(byte[] sArr, int sOff, int sLen, boolean lineSep)", "full_signature": "public final static byte[] encodeToByte(byte[] sArr, int sOff, int sLen, boolean lineSep)", "class_method_signature": "Base64.encodeToByte(byte[] sArr, int sOff, int sLen, boolean lineSep)", "testcase": false, "constructor": false}, {"identifier": "encodeToChar", "parameters": "(byte[] sArr, boolean lineSep)", "modifiers": "public final static", "return": "char[]", "signature": "char[] encodeToChar(byte[] sArr, boolean lineSep)", "full_signature": "public final static char[] encodeToChar(byte[] sArr, boolean lineSep)", "class_method_signature": "Base64.encodeToChar(byte[] sArr, boolean lineSep)", "testcase": false, "constructor": false}, {"identifier": "encodeToString", "parameters": "(byte[] sArr, boolean lineSep)", "modifiers": "public final static", "return": "String", "signature": "String encodeToString(byte[] sArr, boolean lineSep)", "full_signature": "public final static String encodeToString(byte[] sArr, boolean lineSep)", "class_method_signature": "Base64.encodeToString(byte[] sArr, boolean lineSep)", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/Base64.java"}, "focal_method": {"identifier": "encodeToByte", "parameters": "(byte[] sArr, boolean lineSep)", "modifiers": "public final static", "return": "byte[]", "body": "public final static byte[] encodeToByte(byte[] sArr, boolean lineSep) {\n\t\treturn encodeToByte(sArr, 0, sArr != null ? sArr.length : 0, lineSep);\n\t}", "signature": "byte[] encodeToByte(byte[] sArr, boolean lineSep)", "full_signature": "public final static byte[] encodeToByte(byte[] sArr, boolean lineSep)", "class_method_signature": "Base64.encodeToByte(byte[] sArr, boolean lineSep)", "testcase": false, "constructor": false, "invocations": ["encodeToByte"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}