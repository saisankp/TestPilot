{"test_class": {"identifier": "MemcacheClientFactoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MemcacheClientFactoryImpl factory;", "modifier": "private", "type": "MemcacheClientFactoryImpl", "declarator": "factory", "var_name": "factory"}, {"original_string": "private List<InetSocketAddress> addrs;", "modifier": "private", "type": "List<InetSocketAddress>", "declarator": "addrs", "var_name": "addrs"}], "file": "aws-elasticache-provider/src/test/java/com/google/code/ssm/providers/elasticache/MemcacheClientFactoryImplTest.java"}, "test_case": {"identifier": "createWithSpecificConf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createWithSpecificConf() throws IOException {\n        ElastiCacheConfiguration conf = new ElastiCacheConfiguration();\n        conf.setConsistentHashing(true);\n        conf.setOperationTimeout(100);\n        conf.setUseBinaryProtocol(false);\n        conf.setFailureMode(FailureMode.Retry);\n        conf.setShouldOptimize(true);\n        conf.setMaxReconnectDelay(1000L);\n        conf.setTimeoutExceptionThreshold(100);\n        conf.setUseNagleAlgorithm(false);\n\n        CacheClient client = factory.create(addrs, conf);\n\n        assertNotNull(client);\n        client.shutdown();\n    }", "signature": "void createWithSpecificConf()", "full_signature": "@Test public void createWithSpecificConf()", "class_method_signature": "MemcacheClientFactoryImplTest.createWithSpecificConf()", "testcase": true, "constructor": false, "invocations": ["setConsistentHashing", "setOperationTimeout", "setUseBinaryProtocol", "setFailureMode", "setShouldOptimize", "setMaxReconnectDelay", "setTimeoutExceptionThreshold", "setUseNagleAlgorithm", "create", "assertNotNull", "shutdown"]}, "focal_class": {"identifier": "MemcacheClientFactoryImpl", "superclass": "", "interfaces": "implements CacheClientFactory", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MemcacheClientFactoryImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MemcacheClientFactoryImpl.class)", "var_name": "LOGGER"}, {"original_string": "private ConnectionFactory connectionFactory;", "modifier": "private", "type": "ConnectionFactory", "declarator": "connectionFactory", "var_name": "connectionFactory"}], "methods": [{"identifier": "create", "parameters": "(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "modifiers": "@Override public", "return": "CacheClient", "signature": "CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "full_signature": "@Override public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "setProviderSpecificSettings", "parameters": "(final ConnectionFactoryBuilder builder, final ElastiCacheConfiguration conf)", "modifiers": "private", "return": "void", "signature": "void setProviderSpecificSettings(final ConnectionFactoryBuilder builder, final ElastiCacheConfiguration conf)", "full_signature": "private void setProviderSpecificSettings(final ConnectionFactoryBuilder builder, final ElastiCacheConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.setProviderSpecificSettings(final ConnectionFactoryBuilder builder, final ElastiCacheConfiguration conf)", "testcase": false, "constructor": false}], "file": "aws-elasticache-provider/src/main/java/com/google/code/ssm/providers/elasticache/MemcacheClientFactoryImpl.java"}, "focal_method": {"identifier": "create", "parameters": "(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "modifiers": "@Override public", "return": "CacheClient", "body": "@Override\n    public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf) throws IOException {\n        // currently its works because this factory creates clients with the same connection settings, only memcached\n        // addresses can be changed\n        if (connectionFactory == null) {\n            ElastiCacheConfiguration elasticacheConf = null;\n            if (conf instanceof ElastiCacheConfiguration) {\n                elasticacheConf = (ElastiCacheConfiguration) conf;\n            }\n            \n            if (elasticacheConf != null && Boolean.TRUE.equals(elasticacheConf.getUseAutoDiscovery())) {\n                // there is no way to use custom client settings and auto discovery together\n                LOGGER.info(\"All cache settings will be ignored because useAutoDiscovery is true\");\n                return new MemcacheClientWrapper(new MemcachedClient(addrs));\n            }\n            \n            \n            ConnectionFactoryBuilder builder = new ConnectionFactoryBuilder();\n\n            if (conf.isConsistentHashing()) {\n                builder.setHashAlg(DefaultHashAlgorithm.KETAMA_HASH);\n                builder.setLocatorType(Locator.CONSISTENT);\n            }\n\n            builder.setProtocol(conf.isUseBinaryProtocol() ? Protocol.BINARY : Protocol.TEXT);\n            if (conf.getOperationTimeout() != null) {\n                builder.setOpTimeout(conf.getOperationTimeout());\n            }\n\n            if (elasticacheConf != null) {\n                setProviderSpecificSettings(builder, elasticacheConf);\n            }\n\n            connectionFactory = builder.build();\n        }\n\n        return new MemcacheClientWrapper(new MemcachedClient(connectionFactory, addrs));\n    }", "signature": "CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "full_signature": "@Override public CacheClient create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "class_method_signature": "MemcacheClientFactoryImpl.create(final List<InetSocketAddress> addrs, final CacheConfiguration conf)", "testcase": false, "constructor": false, "invocations": ["equals", "getUseAutoDiscovery", "info", "isConsistentHashing", "setHashAlg", "setLocatorType", "setProtocol", "isUseBinaryProtocol", "getOperationTimeout", "setOpTimeout", "getOperationTimeout", "setProviderSpecificSettings", "build"]}, "repository": {"repo_id": 16611556, "url": "https://github.com/ragnor/simple-spring-memcached", "language": "Java", "is_fork": false, "fork_count": 86, "stargazer_count": 181, "size": 3625, "license": "licensed"}}