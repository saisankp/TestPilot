{"test_class": {"identifier": "FixedResultTest", "superclass": "extends PipeTestBase<FixedResult>", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static TemporaryFolder testFolderSource = new TemporaryFolder();", "modifier": "@ClassRule\n    public static", "type": "TemporaryFolder", "declarator": "testFolderSource = new TemporaryFolder()", "var_name": "testFolderSource"}, {"original_string": "private static String sourceFolderPath;", "modifier": "private static", "type": "String", "declarator": "sourceFolderPath", "var_name": "sourceFolderPath"}, {"original_string": "@Mock\n    private IPipeLineSession session1 = new PipeLineSessionBase();", "modifier": "@Mock\n    private", "type": "IPipeLineSession", "declarator": "session1 = new PipeLineSessionBase()", "var_name": "session1"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/FixedResultTest.java"}, "test_case": {"identifier": "testEmptyFileName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyFileName() throws Exception{\n        exception.expectMessage(\"Pipe [FixedResult under test] has neither fileName nor fileNameSessionKey nor returnString specified\");\n        pipe.configure();\n        fail(\"this should fail\");\n    }", "signature": "void testEmptyFileName()", "full_signature": "@Test public void testEmptyFileName()", "class_method_signature": "FixedResultTest.testEmptyFileName()", "testcase": true, "constructor": false, "invocations": ["expectMessage", "configure", "fail"]}, "focal_class": {"identifier": "FixedResult", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "private final static String FILE_NOT_FOUND_FORWARD = \"filenotfound\";", "modifier": "private final static", "type": "String", "declarator": "FILE_NOT_FOUND_FORWARD = \"filenotfound\"", "var_name": "FILE_NOT_FOUND_FORWARD"}, {"original_string": "AppConstants appConstants;", "modifier": "", "type": "AppConstants", "declarator": "appConstants", "var_name": "appConstants"}, {"original_string": "private String fileName;", "modifier": "private", "type": "String", "declarator": "fileName", "var_name": "fileName"}, {"original_string": "private String fileNameSessionKey;", "modifier": "private", "type": "String", "declarator": "fileNameSessionKey", "var_name": "fileNameSessionKey"}, {"original_string": "private String returnString;", "modifier": "private", "type": "String", "declarator": "returnString", "var_name": "returnString"}, {"original_string": "private boolean substituteVars=false;", "modifier": "private", "type": "boolean", "declarator": "substituteVars=false", "var_name": "substituteVars"}, {"original_string": "private String replaceFrom = null;", "modifier": "private", "type": "String", "declarator": "replaceFrom = null", "var_name": "replaceFrom"}, {"original_string": "private String replaceTo = null;", "modifier": "private", "type": "String", "declarator": "replaceTo = null", "var_name": "replaceTo"}, {"original_string": "private String styleSheetName = null;", "modifier": "private", "type": "String", "declarator": "styleSheetName = null", "var_name": "styleSheetName"}, {"original_string": "private boolean lookupAtRuntime=false;", "modifier": "private", "type": "boolean", "declarator": "lookupAtRuntime=false", "var_name": "lookupAtRuntime"}, {"original_string": "private boolean replaceFixedParams=false;", "modifier": "private", "type": "boolean", "declarator": "replaceFixedParams=false", "var_name": "replaceFixedParams"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "FixedResult.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "FixedResult.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "replace", "parameters": "(String target, String from, String to)", "modifiers": "public static", "return": "String", "signature": "String replace(String target, String from, String to)", "full_signature": "public static String replace(String target, String from, String to)", "class_method_signature": "FixedResult.replace(String target, String from, String to)", "testcase": false, "constructor": false}, {"identifier": "setSubstituteVars", "parameters": "(boolean substitute)", "modifiers": "@IbisDoc({\"should values between ${ and } be resolved from the pipelinesession (search order: 1) system properties 2) pipelinesession variables 3) application properties)\", \"false\"}) public", "return": "void", "signature": "void setSubstituteVars(boolean substitute)", "full_signature": "@IbisDoc({\"should values between ${ and } be resolved from the pipelinesession (search order: 1) system properties 2) pipelinesession variables 3) application properties)\", \"false\"}) public void setSubstituteVars(boolean substitute)", "class_method_signature": "FixedResult.setSubstituteVars(boolean substitute)", "testcase": false, "constructor": false}, {"identifier": "getSubstituteVars", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getSubstituteVars()", "full_signature": "public boolean getSubstituteVars()", "class_method_signature": "FixedResult.getSubstituteVars()", "testcase": false, "constructor": false}, {"identifier": "setFileName", "parameters": "(String fileName)", "modifiers": "@IbisDoc({\"name of the file containing the resultmessage\", \"\"}) public", "return": "void", "signature": "void setFileName(String fileName)", "full_signature": "@IbisDoc({\"name of the file containing the resultmessage\", \"\"}) public void setFileName(String fileName)", "class_method_signature": "FixedResult.setFileName(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileName()", "full_signature": "public String getFileName()", "class_method_signature": "FixedResult.getFileName()", "testcase": false, "constructor": false}, {"identifier": "setFileNameSessionKey", "parameters": "(String filenameSessionKey)", "modifiers": "@IbisDoc({\"name of the session key containing the file name of the file containing the result message\", \"\"}) public", "return": "void", "signature": "void setFileNameSessionKey(String filenameSessionKey)", "full_signature": "@IbisDoc({\"name of the session key containing the file name of the file containing the result message\", \"\"}) public void setFileNameSessionKey(String filenameSessionKey)", "class_method_signature": "FixedResult.setFileNameSessionKey(String filenameSessionKey)", "testcase": false, "constructor": false}, {"identifier": "getFileNameSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFileNameSessionKey()", "full_signature": "public String getFileNameSessionKey()", "class_method_signature": "FixedResult.getFileNameSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setReturnString", "parameters": "(String returnString)", "modifiers": "@IbisDoc({\"returned message\", \"\"}) public", "return": "void", "signature": "void setReturnString(String returnString)", "full_signature": "@IbisDoc({\"returned message\", \"\"}) public void setReturnString(String returnString)", "class_method_signature": "FixedResult.setReturnString(String returnString)", "testcase": false, "constructor": false}, {"identifier": "getReturnString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getReturnString()", "full_signature": "public String getReturnString()", "class_method_signature": "FixedResult.getReturnString()", "testcase": false, "constructor": false}, {"identifier": "getReplaceFrom", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getReplaceFrom()", "full_signature": "public String getReplaceFrom()", "class_method_signature": "FixedResult.getReplaceFrom()", "testcase": false, "constructor": false}, {"identifier": "setReplaceFrom", "parameters": "(String replaceFrom)", "modifiers": "public", "return": "void", "signature": "void setReplaceFrom(String replaceFrom)", "full_signature": "public void setReplaceFrom(String replaceFrom)", "class_method_signature": "FixedResult.setReplaceFrom(String replaceFrom)", "testcase": false, "constructor": false}, {"identifier": "getReplaceTo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getReplaceTo()", "full_signature": "public String getReplaceTo()", "class_method_signature": "FixedResult.getReplaceTo()", "testcase": false, "constructor": false}, {"identifier": "setReplaceTo", "parameters": "(String replaceTo)", "modifiers": "public", "return": "void", "signature": "void setReplaceTo(String replaceTo)", "full_signature": "public void setReplaceTo(String replaceTo)", "class_method_signature": "FixedResult.setReplaceTo(String replaceTo)", "testcase": false, "constructor": false}, {"identifier": "getStyleSheetName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStyleSheetName()", "full_signature": "public String getStyleSheetName()", "class_method_signature": "FixedResult.getStyleSheetName()", "testcase": false, "constructor": false}, {"identifier": "setStyleSheetName", "parameters": "(String styleSheetName)", "modifiers": "public", "return": "void", "signature": "void setStyleSheetName(String styleSheetName)", "full_signature": "public void setStyleSheetName(String styleSheetName)", "class_method_signature": "FixedResult.setStyleSheetName(String styleSheetName)", "testcase": false, "constructor": false}, {"identifier": "setLookupAtRuntime", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when set <code>true</code>, the lookup of the file will be done at runtime instead of at configuration time\", \"false\"}) public", "return": "void", "signature": "void setLookupAtRuntime(boolean b)", "full_signature": "@IbisDoc({\"when set <code>true</code>, the lookup of the file will be done at runtime instead of at configuration time\", \"false\"}) public void setLookupAtRuntime(boolean b)", "class_method_signature": "FixedResult.setLookupAtRuntime(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isLookupAtRuntime", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLookupAtRuntime()", "full_signature": "public boolean isLookupAtRuntime()", "class_method_signature": "FixedResult.isLookupAtRuntime()", "testcase": false, "constructor": false}, {"identifier": "setReplaceFixedParams", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when set <code>true</code>, any parameter is used for replacements but with <code>name-of-parameter</code> and not <code>${name-of-parameter}</code>\", \"false\"}) public", "return": "void", "signature": "void setReplaceFixedParams(boolean b)", "full_signature": "@IbisDoc({\"when set <code>true</code>, any parameter is used for replacements but with <code>name-of-parameter</code> and not <code>${name-of-parameter}</code>\", \"false\"}) public void setReplaceFixedParams(boolean b)", "class_method_signature": "FixedResult.setReplaceFixedParams(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isReplaceFixedParams", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReplaceFixedParams()", "full_signature": "public boolean isReplaceFixedParams()", "class_method_signature": "FixedResult.isReplaceFixedParams()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/FixedResult.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void configure() throws ConfigurationException {\n\t\tsuper.configure();\n\t\tappConstants = AppConstants.getInstance(getConfigurationClassLoader());\n\t\tif (StringUtils.isNotEmpty(getFileName()) && !isLookupAtRuntime()) {\n\t\t\tURL resource = null;\n\t\t\ttry {\n\t\t\t\tresource = ClassUtils.getResourceURL(getConfigurationClassLoader(), getFileName());\n\t\t\t} catch (Throwable e) {\n\t\t\t\tthrow new ConfigurationException(getLogPrefix(null)+\"got exception searching for [\"+getFileName()+\"]\", e);\n\t\t\t}\n\t\t\tif (resource==null) {\n\t\t\t\tthrow new ConfigurationException(getLogPrefix(null)+\"cannot find resource [\"+getFileName()+\"]\");\n\t\t\t}\n            try {\n\t\t\t\treturnString = Misc.resourceToString(resource, SystemUtils.LINE_SEPARATOR);\n            } catch (Throwable e) {\n                throw new ConfigurationException(getLogPrefix(null)+\"got exception loading [\"+getFileName()+\"]\", e);\n            }\n        }\n        if ((StringUtils.isEmpty(fileName)) && (StringUtils.isEmpty(fileNameSessionKey)) && returnString==null) {  // allow an empty returnString to be specified\n            throw new ConfigurationException(getLogPrefix(null)+\"has neither fileName nor fileNameSessionKey nor returnString specified\");\n        }\n\t\tif (StringUtils.isNotEmpty(replaceFrom)) {\n\t\t\treturnString = replace(returnString, replaceFrom, replaceTo );\n\t\t}\n    }", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "FixedResult.configure()", "testcase": false, "constructor": false, "invocations": ["configure", "getInstance", "getConfigurationClassLoader", "isNotEmpty", "getFileName", "isLookupAtRuntime", "getResourceURL", "getConfigurationClassLoader", "getFileName", "getLogPrefix", "getFileName", "getLogPrefix", "getFileName", "resourceToString", "getLogPrefix", "getFileName", "isEmpty", "isEmpty", "getLogPrefix", "isNotEmpty", "replace"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}