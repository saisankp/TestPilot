{"test_class": {"identifier": "LinearRegressionTest", "superclass": "", "interfaces": "", "fields": [], "file": "machine-learning/machine-learning/src/test/java/org/openimaj/ml/regression/LinearRegressionTest.java"}, "test_case": {"identifier": "testLinearRegression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testLinearRegression() throws Exception {\n\t\tdouble[][] xt = new double[][]{new double[]{0,1,2,3,4,5,6,7,8,9}};\n\t\t// function params\n\t\tdouble m = 2;\n\t\tdouble c = -2;\n\t\t\n\t\tdouble[][] perfectyt = new double[1][xt[0].length];\n\t\tfor (int i = 0; i < perfectyt[0].length; i++) {\n\t\t\tperfectyt[0][i] = xt[0][i] * m + c;\n\t\t}\n\t\t\n\t\tMatrix x = new Matrix(xt).transpose();\n\t\tMatrix perfecty = new Matrix(perfectyt).transpose();\n\t\t\n\t\tMatrix noise = new Matrix(RandomData.getRandomDoubleArray(perfecty.getRowDimension(), 1, -1, 1, 1));\n\t\tMatrix y = perfecty.plus(noise);\n\t\t\n\t\tList<IndependentPair<double[], double[]>> ipairs = aspairs(x,y);\n\t\t\n\t\tLinearRegression lr = new LinearRegression();\n\t\tlr.estimate(y, x);\n\t\t\n\t\tLinearRegression lr2 = new LinearRegression();\n\t\tlr2.estimate(ipairs);\n\t\tassertTrue(lr.equals(lr2));\n\t\t\n\t\tSystem.out.println(\"Error: \" + lr.calculateError(ipairs));\n\t\tassertTrue(lr.calculateError(ipairs) < 5);\n\t}", "signature": "void testLinearRegression()", "full_signature": "@Test public void testLinearRegression()", "class_method_signature": "LinearRegressionTest.testLinearRegression()", "testcase": true, "constructor": false, "invocations": ["transpose", "transpose", "getRandomDoubleArray", "getRowDimension", "plus", "aspairs", "estimate", "estimate", "assertTrue", "equals", "println", "calculateError", "assertTrue", "calculateError"]}, "focal_class": {"identifier": "LinearRegression", "superclass": "", "interfaces": "implements Model<double[], double[]>", "fields": [{"original_string": "public static final double DEFAULT_ERROR = 5d;", "modifier": "public static final", "type": "double", "declarator": "DEFAULT_ERROR = 5d", "var_name": "DEFAULT_ERROR"}, {"original_string": "private Matrix weights;", "modifier": "private", "type": "Matrix", "declarator": "weights", "var_name": "weights"}, {"original_string": "private double error;", "modifier": "private", "type": "double", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "LinearRegression", "parameters": "()", "modifiers": "public", "return": "", "signature": " LinearRegression()", "full_signature": "public  LinearRegression()", "class_method_signature": "LinearRegression.LinearRegression()", "testcase": false, "constructor": true}, {"identifier": "LinearRegression", "parameters": "(double error)", "modifiers": "public", "return": "", "signature": " LinearRegression(double error)", "full_signature": "public  LinearRegression(double error)", "class_method_signature": "LinearRegression.LinearRegression(double error)", "testcase": false, "constructor": true}, {"identifier": "estimate", "parameters": "(List<? extends IndependentPair<double[], double[]>> data)", "modifiers": "@Override public", "return": "void", "signature": "void estimate(List<? extends IndependentPair<double[], double[]>> data)", "full_signature": "@Override public void estimate(List<? extends IndependentPair<double[], double[]>> data)", "class_method_signature": "LinearRegression.estimate(List<? extends IndependentPair<double[], double[]>> data)", "testcase": false, "constructor": false}, {"identifier": "estimate", "parameters": "(double[][] yd, double[][] xd)", "modifiers": "public", "return": "void", "signature": "void estimate(double[][] yd, double[][] xd)", "full_signature": "public void estimate(double[][] yd, double[][] xd)", "class_method_signature": "LinearRegression.estimate(double[][] yd, double[][] xd)", "testcase": false, "constructor": false}, {"identifier": "appendConstant", "parameters": "(double[][] xd)", "modifiers": "private", "return": "double[][]", "signature": "double[][] appendConstant(double[][] xd)", "full_signature": "private double[][] appendConstant(double[][] xd)", "class_method_signature": "LinearRegression.appendConstant(double[][] xd)", "testcase": false, "constructor": false}, {"identifier": "estimate", "parameters": "(Matrix y, Matrix x)", "modifiers": "public", "return": "void", "signature": "void estimate(Matrix y, Matrix x)", "full_signature": "public void estimate(Matrix y, Matrix x)", "class_method_signature": "LinearRegression.estimate(Matrix y, Matrix x)", "testcase": false, "constructor": false}, {"identifier": "estimate_internal", "parameters": "(Matrix y, Matrix x)", "modifiers": "private", "return": "void", "signature": "void estimate_internal(Matrix y, Matrix x)", "full_signature": "private void estimate_internal(Matrix y, Matrix x)", "class_method_signature": "LinearRegression.estimate_internal(Matrix y, Matrix x)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(IndependentPair<double[], double[]> data)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "boolean", "signature": "boolean validate(IndependentPair<double[], double[]> data)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public boolean validate(IndependentPair<double[], double[]> data)", "class_method_signature": "LinearRegression.validate(IndependentPair<double[], double[]> data)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(double[] data)", "modifiers": "@Override public", "return": "double[]", "signature": "double[] predict(double[] data)", "full_signature": "@Override public double[] predict(double[] data)", "class_method_signature": "LinearRegression.predict(double[] data)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(Matrix x)", "modifiers": "public", "return": "Matrix", "signature": "Matrix predict(Matrix x)", "full_signature": "public Matrix predict(Matrix x)", "class_method_signature": "LinearRegression.predict(Matrix x)", "testcase": false, "constructor": false}, {"identifier": "numItemsToEstimate", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int numItemsToEstimate()", "full_signature": "@Override public int numItemsToEstimate()", "class_method_signature": "LinearRegression.numItemsToEstimate()", "testcase": false, "constructor": false}, {"identifier": "calculateError", "parameters": "(List<? extends IndependentPair<double[], double[]>> data)", "modifiers": "@Override public", "return": "double", "signature": "double calculateError(List<? extends IndependentPair<double[], double[]>> data)", "full_signature": "@Override public double calculateError(List<? extends IndependentPair<double[], double[]>> data)", "class_method_signature": "LinearRegression.calculateError(List<? extends IndependentPair<double[], double[]>> data)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "LinearRegression", "signature": "LinearRegression clone()", "full_signature": "@Override public LinearRegression clone()", "class_method_signature": "LinearRegression.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "LinearRegression.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LinearRegression.toString()", "testcase": false, "constructor": false}], "file": "machine-learning/machine-learning/src/main/java/org/openimaj/ml/regression/LinearRegression.java"}, "focal_method": {"identifier": "LinearRegression", "parameters": "()", "modifiers": "public", "return": "", "body": "public LinearRegression() {\n\t\tthis(DEFAULT_ERROR);\n\t}", "signature": " LinearRegression()", "full_signature": "public  LinearRegression()", "class_method_signature": "LinearRegression.LinearRegression()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4114800, "url": "https://github.com/sinjax/trendminer-java", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 10, "size": 209307, "license": "licensed"}}