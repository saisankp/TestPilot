{"test_class": {"identifier": "HttpProcessHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/HttpProcessHandlerTest.java"}, "test_case": {"identifier": "test1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test1() throws Exception {\n        ChannelHandlerContext context = mock(ChannelHandlerContext.class);\n        ChannelFuture future = mock(ChannelFuture.class);\n        when(context.writeAndFlush(any(FullHttpResponse.class))).thenReturn(future);\n        HttpRequest message = Mockito.mock(HttpRequest.class);\n        when(message.getUri()).thenReturn(\"test\");\n        HttpProcessHandler handler = new HttpProcessHandler();\n        handler.channelRead0(context, message);\n        verify(future).addListener(ChannelFutureListener.CLOSE);\n        ArgumentCaptor<FullHttpResponse> captor = ArgumentCaptor.forClass(FullHttpResponse.class);\n        verify(context).writeAndFlush(captor.capture());\n        FullHttpResponse response = captor.getValue();\n        assertThat(response.getStatus().code(), equalTo(404));\n    }", "signature": "void test1()", "full_signature": "@Test public void test1()", "class_method_signature": "HttpProcessHandlerTest.test1()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "writeAndFlush", "any", "mock", "thenReturn", "when", "getUri", "channelRead0", "addListener", "verify", "forClass", "writeAndFlush", "verify", "capture", "getValue", "assertThat", "code", "getStatus", "equalTo"]}, "focal_class": {"identifier": "HttpProcessHandler", "superclass": "extends SimpleChannelInboundHandler<HttpRequest>", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(HttpProcessHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(HttpProcessHandler.class)", "var_name": "log"}, {"original_string": "private static CommandExecutor commandExecutor = new DefaultCommandExecutor();", "modifier": "private static", "type": "CommandExecutor", "declarator": "commandExecutor = new DefaultCommandExecutor()", "var_name": "commandExecutor"}], "methods": [{"identifier": "channelRead0", "parameters": "(ChannelHandlerContext ctx, HttpRequest msg)", "modifiers": "@Override protected", "return": "void", "signature": "void channelRead0(ChannelHandlerContext ctx, HttpRequest msg)", "full_signature": "@Override protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg)", "class_method_signature": "HttpProcessHandler.channelRead0(ChannelHandlerContext ctx, HttpRequest msg)", "testcase": false, "constructor": false}, {"identifier": "http200", "parameters": "(String result)", "modifiers": "private static final", "return": "FullHttpResponse", "signature": "FullHttpResponse http200(String result)", "full_signature": "private static final FullHttpResponse http200(String result)", "class_method_signature": "HttpProcessHandler.http200(String result)", "testcase": false, "constructor": false}, {"identifier": "http404", "parameters": "()", "modifiers": "private static final", "return": "FullHttpResponse", "signature": "FullHttpResponse http404()", "full_signature": "private static final FullHttpResponse http404()", "class_method_signature": "HttpProcessHandler.http404()", "testcase": false, "constructor": false}, {"identifier": "http500", "parameters": "(String errorMessage)", "modifiers": "private static final", "return": "FullHttpResponse", "signature": "FullHttpResponse http500(String errorMessage)", "full_signature": "private static final FullHttpResponse http500(String errorMessage)", "class_method_signature": "HttpProcessHandler.http500(String errorMessage)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/HttpProcessHandler.java"}, "focal_method": {"identifier": "channelRead0", "parameters": "(ChannelHandlerContext ctx, HttpRequest msg)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg) throws Exception {\n        CommandContext commandContext = HttpCommandDecoder.decode(msg);\n        // return 404 when fail to construct command context\n        if (commandContext == null) {\n            log.warn(\"can not found commandContext url: \" + msg.getUri());\n            FullHttpResponse response = http404();\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        } else {\n            commandContext.setRemote(ctx.channel());\n            try {\n                String result = commandExecutor.execute(commandContext);\n                FullHttpResponse response = http200(result);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (NoSuchCommandException ex) {\n                log.error(\"can not find commandContext: \" + commandContext, ex);\n                FullHttpResponse response = http404();\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            } catch (Exception qosEx) {\n                log.error(\"execute commandContext: \" + commandContext + \" got exception\", qosEx);\n                FullHttpResponse response = http500(qosEx.getMessage());\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }", "signature": "void channelRead0(ChannelHandlerContext ctx, HttpRequest msg)", "full_signature": "@Override protected void channelRead0(ChannelHandlerContext ctx, HttpRequest msg)", "class_method_signature": "HttpProcessHandler.channelRead0(ChannelHandlerContext ctx, HttpRequest msg)", "testcase": false, "constructor": false, "invocations": ["decode", "warn", "getUri", "http404", "addListener", "writeAndFlush", "setRemote", "channel", "execute", "http200", "addListener", "writeAndFlush", "error", "http404", "addListener", "writeAndFlush", "error", "http500", "getMessage", "addListener", "writeAndFlush"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}