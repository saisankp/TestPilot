{"test_class": {"identifier": "MultiRecordKeyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ERDO_ID = 1;", "modifier": "private static final", "type": "int", "declarator": "ERDO_ID = 1", "var_name": "ERDO_ID"}], "file": "zava/src/test/java/com/github/geophile/erdo/map/mergescan/MultiRecordKeyTest.java"}, "test_case": {"identifier": "testXXXX", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testXXXX()\n    {\n        assertEquals(1, keyRange(10, 20).compareTo(keyRange(5, 9)));\n        assertEquals(1, keyRange(10, 20).compareTo(keyRange(5, 10)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(5, 11)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(9, 19)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(9, 20)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(9, 21)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(10, 19)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(10, 20)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(10, 21)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(11, 19)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(11, 20)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(11, 21)));\n        assertEquals(0, keyRange(10, 20).compareTo(keyRange(19, 30)));\n        assertEquals(-1, keyRange(10, 20).compareTo(keyRange(20, 30)));\n        assertEquals(-1, keyRange(10, 20).compareTo(keyRange(21, 30)));\n    }", "signature": "void testXXXX()", "full_signature": "@Test public void testXXXX()", "class_method_signature": "MultiRecordKeyTest.testXXXX()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange", "assertEquals", "compareTo", "keyRange", "keyRange"]}, "focal_class": {"identifier": "MultiRecordKey", "superclass": "extends AbstractKey", "interfaces": "", "fields": [{"original_string": "private AbstractKey lo;", "modifier": "private", "type": "AbstractKey", "declarator": "lo", "var_name": "lo"}, {"original_string": "private AbstractKey hi;", "modifier": "private", "type": "AbstractKey", "declarator": "hi", "var_name": "hi"}], "methods": [{"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultiRecordKey.toString()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(AbstractKey key)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(AbstractKey key)", "full_signature": "@Override public int compareTo(AbstractKey key)", "class_method_signature": "MultiRecordKey.compareTo(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "void", "signature": "void readFrom(ByteBuffer buffer)", "full_signature": "@Override public void readFrom(ByteBuffer buffer)", "class_method_signature": "MultiRecordKey.readFrom(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(ByteBuffer buffer)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(ByteBuffer buffer)", "full_signature": "@Override public void writeTo(ByteBuffer buffer)", "class_method_signature": "MultiRecordKey.writeTo(ByteBuffer buffer)", "testcase": false, "constructor": false}, {"identifier": "estimatedSizeBytes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int estimatedSizeBytes()", "full_signature": "@Override public int estimatedSizeBytes()", "class_method_signature": "MultiRecordKey.estimatedSizeBytes()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "AbstractKey", "signature": "AbstractKey copy()", "full_signature": "@Override public AbstractKey copy()", "class_method_signature": "MultiRecordKey.copy()", "testcase": false, "constructor": false}, {"identifier": "MultiRecordKey", "parameters": "(AbstractKey lo, AbstractKey hi)", "modifiers": "public", "return": "", "signature": " MultiRecordKey(AbstractKey lo, AbstractKey hi)", "full_signature": "public  MultiRecordKey(AbstractKey lo, AbstractKey hi)", "class_method_signature": "MultiRecordKey.MultiRecordKey(AbstractKey lo, AbstractKey hi)", "testcase": false, "constructor": true}, {"identifier": "lo", "parameters": "()", "modifiers": "public", "return": "AbstractKey", "signature": "AbstractKey lo()", "full_signature": "public AbstractKey lo()", "class_method_signature": "MultiRecordKey.lo()", "testcase": false, "constructor": false}, {"identifier": "hi", "parameters": "()", "modifiers": "public", "return": "AbstractKey", "signature": "AbstractKey hi()", "full_signature": "public AbstractKey hi()", "class_method_signature": "MultiRecordKey.hi()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/geophile/erdo/map/mergescan/MultiRecordKey.java"}, "focal_method": {"identifier": "compareTo", "parameters": "(AbstractKey key)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compareTo(AbstractKey key)\n    {\n        int c = super.compareTo(key);\n        if (c == 0) {\n            MultiRecordKey that = (MultiRecordKey) key;\n            if (this.hi != null && that.lo != null && this.hi.compareTo(that.lo) <= 0) {\n                c = -1;\n            } else if (this.lo != null && that.hi != null && this.lo.compareTo(that.hi) >= 0) {\n                c = 1;\n            }\n        }\n        return c;\n    }", "signature": "int compareTo(AbstractKey key)", "full_signature": "@Override public int compareTo(AbstractKey key)", "class_method_signature": "MultiRecordKey.compareTo(AbstractKey key)", "testcase": false, "constructor": false, "invocations": ["compareTo", "compareTo", "compareTo"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}