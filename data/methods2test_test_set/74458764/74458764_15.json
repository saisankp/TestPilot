{"test_class": {"identifier": "TestRepositoryBackedSession", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SessionManager manager;", "modifier": "private", "type": "SessionManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private SessionRepository repository;", "modifier": "private", "type": "SessionRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private SessionNotifier notifier;", "modifier": "private", "type": "SessionNotifier", "declarator": "notifier", "var_name": "notifier"}, {"original_string": "private SessionConfiguration sessionConfiguration;", "modifier": "private", "type": "SessionConfiguration", "declarator": "sessionConfiguration", "var_name": "sessionConfiguration"}, {"original_string": "private SessionData sessionData;", "modifier": "private", "type": "SessionData", "declarator": "sessionData", "var_name": "sessionData"}, {"original_string": "private SessionFactory factory;", "modifier": "private", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private CommitTransaction transaction;", "modifier": "private", "type": "CommitTransaction", "declarator": "transaction", "var_name": "transaction"}], "file": "session-replacement/src/test/java/com/amadeus/session/TestRepositoryBackedSession.java"}, "test_case": {"identifier": "testIsImmutable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testIsImmutable() {\n    assertTrue(RepositoryBackedSession.isImmutableType(\"\"));\n    assertTrue(RepositoryBackedSession.isImmutableType(Boolean.FALSE));\n    assertTrue(RepositoryBackedSession.isImmutableType(Character.valueOf(' ')));\n    assertTrue(RepositoryBackedSession.isImmutableType(Integer.valueOf(1)));\n    assertTrue(RepositoryBackedSession.isImmutableType(Long.valueOf(2)));\n    assertTrue(RepositoryBackedSession.isImmutableType(Float.valueOf(3)));\n    assertTrue(RepositoryBackedSession.isImmutableType(ReplicationTrigger.SET_AND_NON_PRIMITIVE_GET));\n    assertFalse(RepositoryBackedSession.isImmutableType(new HashSet<>()));\n    assertFalse(RepositoryBackedSession.isImmutableType(mock(Object.class)));\n  }", "signature": "void testIsImmutable()", "full_signature": "@Test public void testIsImmutable()", "class_method_signature": "TestRepositoryBackedSession.testIsImmutable()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isImmutableType", "assertTrue", "isImmutableType", "assertTrue", "isImmutableType", "valueOf", "assertTrue", "isImmutableType", "valueOf", "assertTrue", "isImmutableType", "valueOf", "assertTrue", "isImmutableType", "valueOf", "assertTrue", "isImmutableType", "assertFalse", "isImmutableType", "assertFalse", "isImmutableType", "mock"]}, "focal_class": {"identifier": "RepositoryBackedSession", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RepositoryBackedSession.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RepositoryBackedSession.class)", "var_name": "logger"}, {"original_string": "private boolean invalid;", "modifier": "private", "type": "boolean", "declarator": "invalid", "var_name": "invalid"}, {"original_string": "private boolean invalidateOnCommit;", "modifier": "private", "type": "boolean", "declarator": "invalidateOnCommit", "var_name": "invalidateOnCommit"}, {"original_string": "private final SessionData sessionData;", "modifier": "private final", "type": "SessionData", "declarator": "sessionData", "var_name": "sessionData"}, {"original_string": "private final Committer committer;", "modifier": "private final", "type": "Committer", "declarator": "committer", "var_name": "committer"}, {"original_string": "private final AtomicInteger concurrentUses;", "modifier": "private final", "type": "AtomicInteger", "declarator": "concurrentUses", "var_name": "concurrentUses"}, {"original_string": "private final AtomicBoolean lockedForUse;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "lockedForUse", "var_name": "lockedForUse"}, {"original_string": "private final boolean forceCommit;", "modifier": "private final", "type": "boolean", "declarator": "forceCommit", "var_name": "forceCommit"}, {"original_string": "protected final SessionManager manager;", "modifier": "protected final", "type": "SessionManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private final boolean replicateOnGet;", "modifier": "private final", "type": "boolean", "declarator": "replicateOnGet", "var_name": "replicateOnGet"}, {"original_string": "protected final ConcurrentHashMap<String, Attribute> attrs;", "modifier": "protected final", "type": "ConcurrentHashMap<String, Attribute>", "declarator": "attrs", "var_name": "attrs"}, {"original_string": "private boolean dirty;", "modifier": "private", "type": "boolean", "declarator": "dirty", "var_name": "dirty"}, {"original_string": "private boolean committed;", "modifier": "private", "type": "boolean", "declarator": "committed", "var_name": "committed"}, {"original_string": "private SessionFactory factory;", "modifier": "private", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "RepositoryBackedSession", "parameters": "(SessionData sessionData, SessionManager manager, SessionFactory factory)", "modifiers": "public", "return": "", "signature": " RepositoryBackedSession(SessionData sessionData, SessionManager manager, SessionFactory factory)", "full_signature": "public  RepositoryBackedSession(SessionData sessionData, SessionManager manager, SessionFactory factory)", "class_method_signature": "RepositoryBackedSession.RepositoryBackedSession(SessionData sessionData, SessionManager manager, SessionFactory factory)", "testcase": false, "constructor": true}, {"identifier": "RepositoryBackedSession", "parameters": "(RepositoryBackedSession linked)", "modifiers": "protected", "return": "", "signature": " RepositoryBackedSession(RepositoryBackedSession linked)", "full_signature": "protected  RepositoryBackedSession(RepositoryBackedSession linked)", "class_method_signature": "RepositoryBackedSession.RepositoryBackedSession(RepositoryBackedSession linked)", "testcase": false, "constructor": true}, {"identifier": "setMaxInactiveInterval", "parameters": "(int maxInactiveInterval)", "modifiers": "public", "return": "void", "signature": "void setMaxInactiveInterval(int maxInactiveInterval)", "full_signature": "public void setMaxInactiveInterval(int maxInactiveInterval)", "class_method_signature": "RepositoryBackedSession.setMaxInactiveInterval(int maxInactiveInterval)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String key)", "modifiers": "public", "return": "Object", "signature": "Object getAttribute(String key)", "full_signature": "public Object getAttribute(String key)", "class_method_signature": "RepositoryBackedSession.getAttribute(String key)", "testcase": false, "constructor": false}, {"identifier": "replicateOnGet", "parameters": "(Object obj)", "modifiers": "", "return": "boolean", "signature": "boolean replicateOnGet(Object obj)", "full_signature": " boolean replicateOnGet(Object obj)", "class_method_signature": "RepositoryBackedSession.replicateOnGet(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isImmutableType", "parameters": "(Object obj)", "modifiers": "static", "return": "boolean", "signature": "boolean isImmutableType(Object obj)", "full_signature": "static boolean isImmutableType(Object obj)", "class_method_signature": "RepositoryBackedSession.isImmutableType(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "()", "modifiers": "@SuppressWarnings({ \"rawtypes\" }) public", "return": "Enumeration", "signature": "Enumeration getAttributeNames()", "full_signature": "@SuppressWarnings({ \"rawtypes\" }) public Enumeration getAttributeNames()", "class_method_signature": "RepositoryBackedSession.getAttributeNames()", "testcase": false, "constructor": false}, {"identifier": "getAttributeNamesWithValues", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAttributeNamesWithValues()", "full_signature": "public List<String> getAttributeNamesWithValues()", "class_method_signature": "RepositoryBackedSession.getAttributeNamesWithValues()", "testcase": false, "constructor": false}, {"identifier": "getCreationTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCreationTime()", "full_signature": "public long getCreationTime()", "class_method_signature": "RepositoryBackedSession.getCreationTime()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "RepositoryBackedSession.getId()", "testcase": false, "constructor": false}, {"identifier": "getLastAccessedTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastAccessedTime()", "full_signature": "public long getLastAccessedTime()", "class_method_signature": "RepositoryBackedSession.getLastAccessedTime()", "testcase": false, "constructor": false}, {"identifier": "getMaxInactiveInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxInactiveInterval()", "full_signature": "public int getMaxInactiveInterval()", "class_method_signature": "RepositoryBackedSession.getMaxInactiveInterval()", "testcase": false, "constructor": false}, {"identifier": "invalidate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void invalidate()", "full_signature": "public void invalidate()", "class_method_signature": "RepositoryBackedSession.invalidate()", "testcase": false, "constructor": false}, {"identifier": "doInvalidate", "parameters": "(boolean expired)", "modifiers": "public", "return": "void", "signature": "void doInvalidate(boolean expired)", "full_signature": "public void doInvalidate(boolean expired)", "class_method_signature": "RepositoryBackedSession.doInvalidate(boolean expired)", "testcase": false, "constructor": false}, {"identifier": "invalidateOrNotify", "parameters": "(boolean expired)", "modifiers": "private", "return": "boolean", "signature": "boolean invalidateOrNotify(boolean expired)", "full_signature": "private boolean invalidateOrNotify(boolean expired)", "class_method_signature": "RepositoryBackedSession.invalidateOrNotify(boolean expired)", "testcase": false, "constructor": false}, {"identifier": "isUsed", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isUsed()", "full_signature": "private boolean isUsed()", "class_method_signature": "RepositoryBackedSession.isUsed()", "testcase": false, "constructor": false}, {"identifier": "wipeInvalidSession", "parameters": "()", "modifiers": "", "return": "void", "signature": "void wipeInvalidSession()", "full_signature": " void wipeInvalidSession()", "class_method_signature": "RepositoryBackedSession.wipeInvalidSession()", "testcase": false, "constructor": false}, {"identifier": "finishInvalidation", "parameters": "(boolean canRemove)", "modifiers": "private", "return": "void", "signature": "void finishInvalidation(boolean canRemove)", "full_signature": "private void finishInvalidation(boolean canRemove)", "class_method_signature": "RepositoryBackedSession.finishInvalidation(boolean canRemove)", "testcase": false, "constructor": false}, {"identifier": "getAllRepositoryKeys", "parameters": "()", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAllRepositoryKeys()", "full_signature": "private Set<String> getAllRepositoryKeys()", "class_method_signature": "RepositoryBackedSession.getAllRepositoryKeys()", "testcase": false, "constructor": false}, {"identifier": "loadAllAttributes", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadAllAttributes()", "full_signature": "private void loadAllAttributes()", "class_method_signature": "RepositoryBackedSession.loadAllAttributes()", "testcase": false, "constructor": false}, {"identifier": "retrieveAttribute", "parameters": "(String key, Attribute attribute)", "modifiers": "private", "return": "Attribute", "signature": "Attribute retrieveAttribute(String key, Attribute attribute)", "full_signature": "private Attribute retrieveAttribute(String key, Attribute attribute)", "class_method_signature": "RepositoryBackedSession.retrieveAttribute(String key, Attribute attribute)", "testcase": false, "constructor": false}, {"identifier": "isNew", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNew()", "full_signature": "public boolean isNew()", "class_method_signature": "RepositoryBackedSession.isNew()", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void removeAttribute(String name)", "full_signature": "public void removeAttribute(String name)", "class_method_signature": "RepositoryBackedSession.removeAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFromCache", "parameters": "(String name)", "modifiers": "public", "return": "Attribute", "signature": "Attribute getAttributeFromCache(String name)", "full_signature": "public Attribute getAttributeFromCache(String name)", "class_method_signature": "RepositoryBackedSession.getAttributeFromCache(String name)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String key, Object value)", "modifiers": "public", "return": "void", "signature": "void setAttribute(String key, Object value)", "full_signature": "public void setAttribute(String key, Object value)", "class_method_signature": "RepositoryBackedSession.setAttribute(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "assertValid", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void assertValid()", "full_signature": "private void assertValid()", "class_method_signature": "RepositoryBackedSession.assertValid()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void commit()", "full_signature": "public synchronized void commit()", "class_method_signature": "RepositoryBackedSession.commit()", "testcase": false, "constructor": false}, {"identifier": "checkUsedAndLock", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean checkUsedAndLock()", "full_signature": " boolean checkUsedAndLock()", "class_method_signature": "RepositoryBackedSession.checkUsedAndLock()", "testcase": false, "constructor": false}, {"identifier": "committed", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void committed()", "full_signature": "protected void committed()", "class_method_signature": "RepositoryBackedSession.committed()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "RepositoryBackedSession.isValid()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExpired()", "full_signature": "public boolean isExpired()", "class_method_signature": "RepositoryBackedSession.isExpired()", "testcase": false, "constructor": false}, {"identifier": "isDirty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDirty()", "full_signature": "public boolean isDirty()", "class_method_signature": "RepositoryBackedSession.isDirty()", "testcase": false, "constructor": false}, {"identifier": "getCommitter", "parameters": "()", "modifiers": "public", "return": "Runnable", "signature": "Runnable getCommitter()", "full_signature": "public Runnable getCommitter()", "class_method_signature": "RepositoryBackedSession.getCommitter()", "testcase": false, "constructor": false}, {"identifier": "getSessionData", "parameters": "()", "modifiers": "public", "return": "SessionData", "signature": "SessionData getSessionData()", "full_signature": "public SessionData getSessionData()", "class_method_signature": "RepositoryBackedSession.getSessionData()", "testcase": false, "constructor": false}, {"identifier": "isCommitted", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCommitted()", "full_signature": "public boolean isCommitted()", "class_method_signature": "RepositoryBackedSession.isCommitted()", "testcase": false, "constructor": false}, {"identifier": "setCommitted", "parameters": "(boolean committed)", "modifiers": "public", "return": "void", "signature": "void setCommitted(boolean committed)", "full_signature": "public void setCommitted(boolean committed)", "class_method_signature": "RepositoryBackedSession.setCommitted(boolean committed)", "testcase": false, "constructor": false}, {"identifier": "getSessionManager", "parameters": "()", "modifiers": "public", "return": "SessionManager", "signature": "SessionManager getSessionManager()", "full_signature": "public SessionManager getSessionManager()", "class_method_signature": "RepositoryBackedSession.getSessionManager()", "testcase": false, "constructor": false}, {"identifier": "getConcurrentUses", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getConcurrentUses()", "full_signature": "public int getConcurrentUses()", "class_method_signature": "RepositoryBackedSession.getConcurrentUses()", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/RepositoryBackedSession.java"}, "focal_method": {"identifier": "isImmutableType", "parameters": "(Object obj)", "modifiers": "static", "return": "boolean", "body": "static boolean isImmutableType(Object obj) {\n    return obj instanceof Number || obj instanceof Character || obj instanceof String || obj instanceof Boolean\n        || obj instanceof Enum;\n  }", "signature": "boolean isImmutableType(Object obj)", "full_signature": "static boolean isImmutableType(Object obj)", "class_method_signature": "RepositoryBackedSession.isImmutableType(Object obj)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}