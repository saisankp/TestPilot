{"test_class": {"identifier": "HashIndexTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/index/hash/HashIndexTest.java"}, "test_case": {"identifier": "testOnSemiUniqueAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnSemiUniqueAttribute() throws Exception{\n        HashIndex<Integer, Car> hashIndex = HashIndex.onSemiUniqueAttribute(Car.CAR_ID);\n        // Validate that the HashIndex was configured with CompactValueSetFactory.\n        // We have to use reflection to do this\n        // because the valueSetFactory has protected access in AbstractMapBasedAttributeIndex.\n        // This is a bit hacky, but OTOH we should not break encapsulation of AbstractMapBasedAttributeIndex...\n        Field valueSetFactoryField = AbstractMapBasedAttributeIndex.class.getDeclaredField(\"valueSetFactory\");\n        valueSetFactoryField.setAccessible(true);\n        Assert.assertTrue(\"HashIndex should be configured with CompactValueSetFactory\",\n                valueSetFactoryField.get(hashIndex) instanceof HashIndex.CompactValueSetFactory);\n    }", "signature": "void testOnSemiUniqueAttribute()", "full_signature": "@Test public void testOnSemiUniqueAttribute()", "class_method_signature": "HashIndexTest.testOnSemiUniqueAttribute()", "testcase": true, "constructor": false, "invocations": ["onSemiUniqueAttribute", "getDeclaredField", "setAccessible", "assertTrue", "get"]}, "focal_class": {"identifier": "HashIndex", "superclass": "extends AbstractMapBasedAttributeIndex<A, O, ConcurrentMap<A, StoredResultSet<O>>>", "interfaces": "implements KeyStatisticsAttributeIndex<A, O>, OnHeapTypeIndex", "fields": [{"original_string": "protected static final int INDEX_RETRIEVAL_COST = 30;", "modifier": "protected static final", "type": "int", "declarator": "INDEX_RETRIEVAL_COST = 30", "var_name": "INDEX_RETRIEVAL_COST"}], "methods": [{"identifier": "HashIndex", "parameters": "(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "modifiers": "protected", "return": "", "signature": " HashIndex(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "full_signature": "protected  HashIndex(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "class_method_signature": "HashIndex.HashIndex(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "testcase": false, "constructor": true}, {"identifier": "isMutable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMutable()", "full_signature": "@Override public boolean isMutable()", "class_method_signature": "HashIndex.isMutable()", "testcase": false, "constructor": false}, {"identifier": "getEffectiveIndex", "parameters": "()", "modifiers": "@Override public", "return": "Index<O>", "signature": "Index<O> getEffectiveIndex()", "full_signature": "@Override public Index<O> getEffectiveIndex()", "class_method_signature": "HashIndex.getEffectiveIndex()", "testcase": false, "constructor": false}, {"identifier": "retrieve", "parameters": "(final Query<O> query, final QueryOptions queryOptions)", "modifiers": "@Override public", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "full_signature": "@Override public ResultSet<O> retrieve(final Query<O> query, final QueryOptions queryOptions)", "class_method_signature": "HashIndex.retrieve(final Query<O> query, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveIn", "parameters": "(final In<O, A> in, final QueryOptions queryOptions)", "modifiers": "protected", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveIn(final In<O, A> in, final QueryOptions queryOptions)", "full_signature": "protected ResultSet<O> retrieveIn(final In<O, A> in, final QueryOptions queryOptions)", "class_method_signature": "HashIndex.retrieveIn(final In<O, A> in, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "retrieveEqual", "parameters": "(final Equal<O, A> equal, final QueryOptions queryOptions)", "modifiers": "protected", "return": "ResultSet<O>", "signature": "ResultSet<O> retrieveEqual(final Equal<O, A> equal, final QueryOptions queryOptions)", "full_signature": "protected ResultSet<O> retrieveEqual(final Equal<O, A> equal, final QueryOptions queryOptions)", "class_method_signature": "HashIndex.retrieveEqual(final Equal<O, A> equal, final QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "filterForQuantization", "parameters": "(ResultSet<O> storedResultSet, Query<O> query, QueryOptions queryOptions)", "modifiers": "protected", "return": "ResultSet<O>", "signature": "ResultSet<O> filterForQuantization(ResultSet<O> storedResultSet, Query<O> query, QueryOptions queryOptions)", "full_signature": "protected ResultSet<O> filterForQuantization(ResultSet<O> storedResultSet, Query<O> query, QueryOptions queryOptions)", "class_method_signature": "HashIndex.filterForQuantization(ResultSet<O> storedResultSet, Query<O> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getCountForKey", "parameters": "(A key, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getCountForKey(A key, QueryOptions queryOptions)", "full_signature": "@Override public Integer getCountForKey(A key, QueryOptions queryOptions)", "class_method_signature": "HashIndex.getCountForKey(A key, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeys", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<A>", "signature": "CloseableIterable<A> getDistinctKeys(QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<A> getDistinctKeys(QueryOptions queryOptions)", "class_method_signature": "HashIndex.getDistinctKeys(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getCountOfDistinctKeys", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getCountOfDistinctKeys(QueryOptions queryOptions)", "full_signature": "@Override public Integer getCountOfDistinctKeys(QueryOptions queryOptions)", "class_method_signature": "HashIndex.getCountOfDistinctKeys(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsForDistinctKeys", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyStatistics<A>>", "signature": "CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeys(QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyStatistics<A>> getStatisticsForDistinctKeys(QueryOptions queryOptions)", "class_method_signature": "HashIndex.getStatisticsForDistinctKeys(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValues", "parameters": "(QueryOptions queryOptions)", "modifiers": "@Override public", "return": "CloseableIterable<KeyValue<A, O>>", "signature": "CloseableIterable<KeyValue<A, O>> getKeysAndValues(QueryOptions queryOptions)", "full_signature": "@Override public CloseableIterable<KeyValue<A, O>> getKeysAndValues(QueryOptions queryOptions)", "class_method_signature": "HashIndex.getKeysAndValues(QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "onAttribute", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "HashIndex<A, O>", "signature": "HashIndex<A, O> onAttribute(Attribute<O, A> attribute)", "full_signature": "public static HashIndex<A, O> onAttribute(Attribute<O, A> attribute)", "class_method_signature": "HashIndex.onAttribute(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "onSemiUniqueAttribute", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "HashIndex<A, O>", "signature": "HashIndex<A, O> onSemiUniqueAttribute(Attribute<O, A> attribute)", "full_signature": "public static HashIndex<A, O> onSemiUniqueAttribute(Attribute<O, A> attribute)", "class_method_signature": "HashIndex.onSemiUniqueAttribute(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "onAttribute", "parameters": "(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "modifiers": "public static", "return": "HashIndex<A, O>", "signature": "HashIndex<A, O> onAttribute(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "full_signature": "public static HashIndex<A, O> onAttribute(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "class_method_signature": "HashIndex.onAttribute(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "withQuantizerOnAttribute", "parameters": "(final Quantizer<A> quantizer, Attribute<O, A> attribute)", "modifiers": "public static", "return": "HashIndex<A, O>", "signature": "HashIndex<A, O> withQuantizerOnAttribute(final Quantizer<A> quantizer, Attribute<O, A> attribute)", "full_signature": "public static HashIndex<A, O> withQuantizerOnAttribute(final Quantizer<A> quantizer, Attribute<O, A> attribute)", "class_method_signature": "HashIndex.withQuantizerOnAttribute(final Quantizer<A> quantizer, Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "withQuantizerOnAttribute", "parameters": "(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, final Quantizer<A> quantizer, Attribute<O, A> attribute)", "modifiers": "public static", "return": "HashIndex<A, O>", "signature": "HashIndex<A, O> withQuantizerOnAttribute(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, final Quantizer<A> quantizer, Attribute<O, A> attribute)", "full_signature": "public static HashIndex<A, O> withQuantizerOnAttribute(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, final Quantizer<A> quantizer, Attribute<O, A> attribute)", "class_method_signature": "HashIndex.withQuantizerOnAttribute(Factory<ConcurrentMap<A, StoredResultSet<O>>> indexMapFactory, Factory<StoredResultSet<O>> valueSetFactory, final Quantizer<A> quantizer, Attribute<O, A> attribute)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/hash/HashIndex.java"}, "focal_method": {"identifier": "onSemiUniqueAttribute", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "HashIndex<A, O>", "body": "public static <A, O> HashIndex<A, O> onSemiUniqueAttribute(Attribute<O, A> attribute) {\n        return onAttribute(new DefaultIndexMapFactory<A, O>(), new CompactValueSetFactory<O>(), attribute);\n    }", "signature": "HashIndex<A, O> onSemiUniqueAttribute(Attribute<O, A> attribute)", "full_signature": "public static HashIndex<A, O> onSemiUniqueAttribute(Attribute<O, A> attribute)", "class_method_signature": "HashIndex.onSemiUniqueAttribute(Attribute<O, A> attribute)", "testcase": false, "constructor": false, "invocations": ["onAttribute"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}