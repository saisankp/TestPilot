{"test_class": {"identifier": "EZIDIdentifierProviderTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final String TEST_SHOULDER = \"10.5072/FK2\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SHOULDER = \"10.5072/FK2\"", "var_name": "TEST_SHOULDER"}, {"original_string": "private static final Map<String, String> aCrosswalk = new HashMap<>();", "modifier": "private static final", "type": "Map<String, String>", "declarator": "aCrosswalk = new HashMap<>()", "var_name": "aCrosswalk"}, {"original_string": "private static final Map<String, Transform> crosswalkTransforms = new HashMap();", "modifier": "private static final", "type": "Map<String, Transform>", "declarator": "crosswalkTransforms = new HashMap()", "var_name": "crosswalkTransforms"}, {"original_string": "private static ConfigurationService config = null;", "modifier": "private static", "type": "ConfigurationService", "declarator": "config = null", "var_name": "config"}, {"original_string": "private static Community community;", "modifier": "private static", "type": "Community", "declarator": "community", "var_name": "community"}, {"original_string": "private static Collection collection;", "modifier": "private static", "type": "Collection", "declarator": "collection", "var_name": "collection"}, {"original_string": "protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();", "modifier": "protected", "type": "CommunityService", "declarator": "communityService = ContentServiceFactory.getInstance().getCommunityService()", "var_name": "communityService"}, {"original_string": "protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();", "modifier": "protected", "type": "CollectionService", "declarator": "collectionService = ContentServiceFactory.getInstance().getCollectionService()", "var_name": "collectionService"}, {"original_string": "protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "protected", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}, {"original_string": "protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();", "modifier": "protected", "type": "WorkspaceItemService", "declarator": "workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService()", "var_name": "workspaceItemService"}, {"original_string": "private static Item item;", "modifier": "private static", "type": "Item", "declarator": "item", "var_name": "item"}], "file": "dspace-api/src/test/java/org/dspace/identifier/EZIDIdentifierProviderTest.java"}, "test_case": {"identifier": "testSupports_Class", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSupports_Class()\n    {\n        System.out.println(\"supports Class\");\n\n        EZIDIdentifierProvider instance = DSpaceServicesFactory.getInstance().getServiceManager().getServiceByName(EZIDIdentifierProvider.class.getName(), EZIDIdentifierProvider.class);\n\n        Class<? extends Identifier> identifier = DOI.class;\n        boolean result = instance.supports(identifier);\n        assertTrue(\"DOI is supported\", result);\n    }", "signature": "void testSupports_Class()", "full_signature": "@Test public void testSupports_Class()", "class_method_signature": "EZIDIdentifierProviderTest.testSupports_Class()", "testcase": true, "constructor": false, "invocations": ["println", "getServiceByName", "getServiceManager", "getInstance", "getName", "supports", "assertTrue"]}, "focal_class": {"identifier": "EZIDIdentifierProvider", "superclass": "extends IdentifierProvider", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(EZIDIdentifierProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(EZIDIdentifierProvider.class)", "var_name": "log"}, {"original_string": "static final String CFG_SHOULDER = \"identifier.doi.ezid.shoulder\";", "modifier": "static final", "type": "String", "declarator": "CFG_SHOULDER = \"identifier.doi.ezid.shoulder\"", "var_name": "CFG_SHOULDER"}, {"original_string": "static final String CFG_USER = \"identifier.doi.ezid.user\";", "modifier": "static final", "type": "String", "declarator": "CFG_USER = \"identifier.doi.ezid.user\"", "var_name": "CFG_USER"}, {"original_string": "static final String CFG_PASSWORD = \"identifier.doi.ezid.password\";", "modifier": "static final", "type": "String", "declarator": "CFG_PASSWORD = \"identifier.doi.ezid.password\"", "var_name": "CFG_PASSWORD"}, {"original_string": "static final String CFG_PUBLISHER = \"identifier.doi.ezid.publisher\";", "modifier": "static final", "type": "String", "declarator": "CFG_PUBLISHER = \"identifier.doi.ezid.publisher\"", "var_name": "CFG_PUBLISHER"}, {"original_string": "static final String DATACITE_PUBLISHER = \"datacite.publisher\";", "modifier": "static final", "type": "String", "declarator": "DATACITE_PUBLISHER = \"datacite.publisher\"", "var_name": "DATACITE_PUBLISHER"}, {"original_string": "static final String DATACITE_PUBLICATION_YEAR = \"datacite.publicationyear\";", "modifier": "static final", "type": "String", "declarator": "DATACITE_PUBLICATION_YEAR = \"datacite.publicationyear\"", "var_name": "DATACITE_PUBLICATION_YEAR"}, {"original_string": "public static final String MD_SCHEMA = \"dc\";", "modifier": "public static final", "type": "String", "declarator": "MD_SCHEMA = \"dc\"", "var_name": "MD_SCHEMA"}, {"original_string": "public static final String DOI_ELEMENT = \"identifier\";", "modifier": "public static final", "type": "String", "declarator": "DOI_ELEMENT = \"identifier\"", "var_name": "DOI_ELEMENT"}, {"original_string": "public static final String DOI_QUALIFIER = null;", "modifier": "public static final", "type": "String", "declarator": "DOI_QUALIFIER = null", "var_name": "DOI_QUALIFIER"}, {"original_string": "private static final String DOI_SCHEME = \"doi:\";", "modifier": "private static final", "type": "String", "declarator": "DOI_SCHEME = \"doi:\"", "var_name": "DOI_SCHEME"}, {"original_string": "protected boolean GENERATE_DATACITE_XML = false;", "modifier": "protected", "type": "boolean", "declarator": "GENERATE_DATACITE_XML = false", "var_name": "GENERATE_DATACITE_XML"}, {"original_string": "protected String DATACITE_XML_CROSSWALK = \"DataCite\";", "modifier": "protected", "type": "String", "declarator": "DATACITE_XML_CROSSWALK = \"DataCite\"", "var_name": "DATACITE_XML_CROSSWALK"}, {"original_string": "private Map<String, String> crosswalk = new HashMap<>();", "modifier": "private", "type": "Map<String, String>", "declarator": "crosswalk = new HashMap<>()", "var_name": "crosswalk"}, {"original_string": "private static Map<String, Transform> transforms = new HashMap<>();", "modifier": "private static", "type": "Map<String, Transform>", "declarator": "transforms = new HashMap<>()", "var_name": "transforms"}, {"original_string": "private EZIDRequestFactory requestFactory;", "modifier": "private", "type": "EZIDRequestFactory", "declarator": "requestFactory", "var_name": "requestFactory"}, {"original_string": "@Autowired(required = true)\n    protected ContentServiceFactory contentServiceFactory;", "modifier": "@Autowired(required = true)\n    protected", "type": "ContentServiceFactory", "declarator": "contentServiceFactory", "var_name": "contentServiceFactory"}, {"original_string": "@Autowired(required = true)\n    protected ItemService itemService;", "modifier": "@Autowired(required = true)\n    protected", "type": "ItemService", "declarator": "itemService", "var_name": "itemService"}], "methods": [{"identifier": "supports", "parameters": "(Class<? extends Identifier> identifier)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Class<? extends Identifier> identifier)", "full_signature": "@Override public boolean supports(Class<? extends Identifier> identifier)", "class_method_signature": "EZIDIdentifierProvider.supports(Class<? extends Identifier> identifier)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(String identifier)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(String identifier)", "full_signature": "@Override public boolean supports(String identifier)", "class_method_signature": "EZIDIdentifierProvider.supports(String identifier)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "String", "signature": "String register(Context context, DSpaceObject dso)", "full_signature": "@Override public String register(Context context, DSpaceObject dso)", "class_method_signature": "EZIDIdentifierProvider.register(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Context context, DSpaceObject object, String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void register(Context context, DSpaceObject object, String identifier)", "full_signature": "@Override public void register(Context context, DSpaceObject object, String identifier)", "class_method_signature": "EZIDIdentifierProvider.register(Context context, DSpaceObject object, String identifier)", "testcase": false, "constructor": false}, {"identifier": "reserve", "parameters": "(Context context, DSpaceObject dso, String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void reserve(Context context, DSpaceObject dso, String identifier)", "full_signature": "@Override public void reserve(Context context, DSpaceObject dso, String identifier)", "class_method_signature": "EZIDIdentifierProvider.reserve(Context context, DSpaceObject dso, String identifier)", "testcase": false, "constructor": false}, {"identifier": "mint", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "String", "signature": "String mint(Context context, DSpaceObject dso)", "full_signature": "@Override public String mint(Context context, DSpaceObject dso)", "class_method_signature": "EZIDIdentifierProvider.mint(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Context context, String identifier,\n            String... attributes)", "modifiers": "@Override public", "return": "DSpaceObject", "signature": "DSpaceObject resolve(Context context, String identifier,\n            String... attributes)", "full_signature": "@Override public DSpaceObject resolve(Context context, String identifier,\n            String... attributes)", "class_method_signature": "EZIDIdentifierProvider.resolve(Context context, String identifier,\n            String... attributes)", "testcase": false, "constructor": false}, {"identifier": "lookup", "parameters": "(Context context, DSpaceObject object)", "modifiers": "@Override public", "return": "String", "signature": "String lookup(Context context, DSpaceObject object)", "full_signature": "@Override public String lookup(Context context, DSpaceObject object)", "class_method_signature": "EZIDIdentifierProvider.lookup(Context context, DSpaceObject object)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Context context, DSpaceObject dso)", "full_signature": "@Override public void delete(Context context, DSpaceObject dso)", "class_method_signature": "EZIDIdentifierProvider.delete(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Context context, DSpaceObject dso, String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Context context, DSpaceObject dso, String identifier)", "full_signature": "@Override public void delete(Context context, DSpaceObject dso, String identifier)", "class_method_signature": "EZIDIdentifierProvider.delete(Context context, DSpaceObject dso, String identifier)", "testcase": false, "constructor": false}, {"identifier": "idToDOI", "parameters": "(String id)", "modifiers": "", "return": "String", "signature": "String idToDOI(String id)", "full_signature": " String idToDOI(String id)", "class_method_signature": "EZIDIdentifierProvider.idToDOI(String id)", "testcase": false, "constructor": false}, {"identifier": "DOIToId", "parameters": "(String DOI)", "modifiers": "", "return": "String", "signature": "String DOIToId(String DOI)", "full_signature": " String DOIToId(String DOI)", "class_method_signature": "EZIDIdentifierProvider.DOIToId(String DOI)", "testcase": false, "constructor": false}, {"identifier": "loadUser", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String loadUser()", "full_signature": "private String loadUser()", "class_method_signature": "EZIDIdentifierProvider.loadUser()", "testcase": false, "constructor": false}, {"identifier": "loadPassword", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String loadPassword()", "full_signature": "private String loadPassword()", "class_method_signature": "EZIDIdentifierProvider.loadPassword()", "testcase": false, "constructor": false}, {"identifier": "loadAuthority", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String loadAuthority()", "full_signature": "private String loadAuthority()", "class_method_signature": "EZIDIdentifierProvider.loadAuthority()", "testcase": false, "constructor": false}, {"identifier": "crosswalkMetadata", "parameters": "(Context context, DSpaceObject dso)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> crosswalkMetadata(Context context, DSpaceObject dso)", "full_signature": " Map<String, String> crosswalkMetadata(Context context, DSpaceObject dso)", "class_method_signature": "EZIDIdentifierProvider.crosswalkMetadata(Context context, DSpaceObject dso)", "testcase": false, "constructor": false}, {"identifier": "setCrosswalk", "parameters": "(Map<String, String> aCrosswalk)", "modifiers": "@Required public", "return": "void", "signature": "void setCrosswalk(Map<String, String> aCrosswalk)", "full_signature": "@Required public void setCrosswalk(Map<String, String> aCrosswalk)", "class_method_signature": "EZIDIdentifierProvider.setCrosswalk(Map<String, String> aCrosswalk)", "testcase": false, "constructor": false}, {"identifier": "getCrosswalk", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getCrosswalk()", "full_signature": "public Map<String, String> getCrosswalk()", "class_method_signature": "EZIDIdentifierProvider.getCrosswalk()", "testcase": false, "constructor": false}, {"identifier": "setCrosswalkTransform", "parameters": "(Map<String, Transform> transformMap)", "modifiers": "public", "return": "void", "signature": "void setCrosswalkTransform(Map<String, Transform> transformMap)", "full_signature": "public void setCrosswalkTransform(Map<String, Transform> transformMap)", "class_method_signature": "EZIDIdentifierProvider.setCrosswalkTransform(Map<String, Transform> transformMap)", "testcase": false, "constructor": false}, {"identifier": "setGenerateDataciteXML", "parameters": "(boolean GENERATE_DATACITE_XML)", "modifiers": "public", "return": "void", "signature": "void setGenerateDataciteXML(boolean GENERATE_DATACITE_XML)", "full_signature": "public void setGenerateDataciteXML(boolean GENERATE_DATACITE_XML)", "class_method_signature": "EZIDIdentifierProvider.setGenerateDataciteXML(boolean GENERATE_DATACITE_XML)", "testcase": false, "constructor": false}, {"identifier": "setDisseminationCrosswalkName", "parameters": "(String DATACITE_XML_CROSSWALK)", "modifiers": "public", "return": "void", "signature": "void setDisseminationCrosswalkName(String DATACITE_XML_CROSSWALK)", "full_signature": "public void setDisseminationCrosswalkName(String DATACITE_XML_CROSSWALK)", "class_method_signature": "EZIDIdentifierProvider.setDisseminationCrosswalkName(String DATACITE_XML_CROSSWALK)", "testcase": false, "constructor": false}, {"identifier": "setRequestFactory", "parameters": "(EZIDRequestFactory aRequestFactory)", "modifiers": "@Required public", "return": "void", "signature": "void setRequestFactory(EZIDRequestFactory aRequestFactory)", "full_signature": "@Required public void setRequestFactory(EZIDRequestFactory aRequestFactory)", "class_method_signature": "EZIDIdentifierProvider.setRequestFactory(EZIDRequestFactory aRequestFactory)", "testcase": false, "constructor": false}, {"identifier": "getRequestFactory", "parameters": "()", "modifiers": "public", "return": "EZIDRequestFactory", "signature": "EZIDRequestFactory getRequestFactory()", "full_signature": "public EZIDRequestFactory getRequestFactory()", "class_method_signature": "EZIDIdentifierProvider.getRequestFactory()", "testcase": false, "constructor": false}, {"identifier": "setItemService", "parameters": "(ItemService itemService)", "modifiers": "protected", "return": "void", "signature": "void setItemService(ItemService itemService)", "full_signature": "protected void setItemService(ItemService itemService)", "class_method_signature": "EZIDIdentifierProvider.setItemService(ItemService itemService)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/identifier/EZIDIdentifierProvider.java"}, "focal_method": {"identifier": "supports", "parameters": "(Class<? extends Identifier> identifier)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean supports(Class<? extends Identifier> identifier)\n    {\n        return DOI.class.isAssignableFrom(identifier);\n    }", "signature": "boolean supports(Class<? extends Identifier> identifier)", "full_signature": "@Override public boolean supports(Class<? extends Identifier> identifier)", "class_method_signature": "EZIDIdentifierProvider.supports(Class<? extends Identifier> identifier)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}