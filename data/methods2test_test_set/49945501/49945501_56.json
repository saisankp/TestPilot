{"test_class": {"identifier": "RestExceptionHandlerRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RestExceptionHandlerRegistry registry;", "modifier": "private", "type": "RestExceptionHandlerRegistry", "declarator": "registry", "var_name": "registry"}], "file": "neo-starter/src/test/java/eu/neoteric/starter/mvc/errorhandling/handler/RestExceptionHandlerRegistryTest.java"}, "test_case": {"identifier": "shouldReturnEmpty_IfBindingsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnEmpty_IfBindingsNull() throws Exception {\n        registry = new RestExceptionHandlerRegistry(null);\n        Optional<ExceptionHandlerBinding> binding = registry.findBindingFor(IllegalStateException.class);\n        assertThat(binding).isEmpty();\n    }", "signature": "void shouldReturnEmpty_IfBindingsNull()", "full_signature": "@Test public void shouldReturnEmpty_IfBindingsNull()", "class_method_signature": "RestExceptionHandlerRegistryTest.shouldReturnEmpty_IfBindingsNull()", "testcase": true, "constructor": false, "invocations": ["findBindingFor", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "RestExceptionHandlerRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String BEAN_NAME = \"restExceptionHandlerRegistry\";", "modifier": "public static final", "type": "String", "declarator": "BEAN_NAME = \"restExceptionHandlerRegistry\"", "var_name": "BEAN_NAME"}, {"original_string": "private final Set<ExceptionHandlerBinding> exceptionHandlerBindings;", "modifier": "private final", "type": "Set<ExceptionHandlerBinding>", "declarator": "exceptionHandlerBindings", "var_name": "exceptionHandlerBindings"}], "methods": [{"identifier": "RestExceptionHandlerRegistry", "parameters": "(Set<ExceptionHandlerBinding> bindings)", "modifiers": "public", "return": "", "signature": " RestExceptionHandlerRegistry(Set<ExceptionHandlerBinding> bindings)", "full_signature": "public  RestExceptionHandlerRegistry(Set<ExceptionHandlerBinding> bindings)", "class_method_signature": "RestExceptionHandlerRegistry.RestExceptionHandlerRegistry(Set<ExceptionHandlerBinding> bindings)", "testcase": false, "constructor": true}, {"identifier": "findBindingFor", "parameters": "(Class<? extends Throwable> exceptionClass)", "modifiers": "public", "return": "Optional<ExceptionHandlerBinding>", "signature": "Optional<ExceptionHandlerBinding> findBindingFor(Class<? extends Throwable> exceptionClass)", "full_signature": "public Optional<ExceptionHandlerBinding> findBindingFor(Class<? extends Throwable> exceptionClass)", "class_method_signature": "RestExceptionHandlerRegistry.findBindingFor(Class<? extends Throwable> exceptionClass)", "testcase": false, "constructor": false}, {"identifier": "getDistanceBetweenExceptions", "parameters": "(Class<?> clazz, Class<?> mapperTypeClazz)", "modifiers": "private", "return": "int", "signature": "int getDistanceBetweenExceptions(Class<?> clazz, Class<?> mapperTypeClazz)", "full_signature": "private int getDistanceBetweenExceptions(Class<?> clazz, Class<?> mapperTypeClazz)", "class_method_signature": "RestExceptionHandlerRegistry.getDistanceBetweenExceptions(Class<?> clazz, Class<?> mapperTypeClazz)", "testcase": false, "constructor": false}], "file": "neo-starter/src/main/java/eu/neoteric/starter/mvc/errorhandling/handler/RestExceptionHandlerRegistry.java"}, "focal_method": {"identifier": "findBindingFor", "parameters": "(Class<? extends Throwable> exceptionClass)", "modifiers": "public", "return": "Optional<ExceptionHandlerBinding>", "body": "public Optional<ExceptionHandlerBinding> findBindingFor(Class<? extends Throwable> exceptionClass) {\n        if (exceptionHandlerBindings == null || exceptionHandlerBindings.isEmpty()) {\n            return Optional.empty();\n        }\n        int currentDistance = Integer.MAX_VALUE;\n        ExceptionHandlerBinding closestBinding = null;\n        for (ExceptionHandlerBinding binding : exceptionHandlerBindings) {\n            int tempDistance = getDistanceBetweenExceptions(exceptionClass, binding.getExceptionClass());\n            if (tempDistance < currentDistance) {\n                currentDistance = tempDistance;\n                closestBinding = binding;\n                if (currentDistance == 0) {\n                    break;\n                }\n            }\n        }\n        return Optional.ofNullable(closestBinding);\n    }", "signature": "Optional<ExceptionHandlerBinding> findBindingFor(Class<? extends Throwable> exceptionClass)", "full_signature": "public Optional<ExceptionHandlerBinding> findBindingFor(Class<? extends Throwable> exceptionClass)", "class_method_signature": "RestExceptionHandlerRegistry.findBindingFor(Class<? extends Throwable> exceptionClass)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "empty", "getDistanceBetweenExceptions", "getExceptionClass", "ofNullable"]}, "repository": {"repo_id": 49945501, "url": "https://github.com/neoteric-eu/neo-starters", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 969, "license": "licensed"}}