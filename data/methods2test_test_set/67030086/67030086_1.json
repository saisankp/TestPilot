{"test_class": {"identifier": "ContractsGitLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    GitOperations gitOperations;", "modifier": "@Mock", "type": "GitOperations", "declarator": "gitOperations", "var_name": "gitOperations"}, {"original_string": "@Mock\n    Git git;", "modifier": "@Mock", "type": "Git", "declarator": "git", "var_name": "git"}, {"original_string": "@Mock\n    PullResult pullResult;", "modifier": "@Mock", "type": "PullResult", "declarator": "pullResult", "var_name": "pullResult"}, {"original_string": "@Mock\n    Repository repository;", "modifier": "@Mock", "type": "Repository", "declarator": "repository", "var_name": "repository"}], "file": "provider/git-retriever/src/test/java/org/arquillian/algeron/pact/provider/loader/git/ContractsGitLoaderTest.java"}, "test_case": {"identifier": "should_pull_existing_git_repo_local_branch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_pull_existing_git_repo_local_branch() throws IOException {\n        final Path path = Paths.get(\"/tmp\");\n        when(gitOperations.isValidGitRepository(path)).thenReturn(true);\n        when(gitOperations.openGitRepository(path)).thenReturn(git);\n        when(gitOperations.hasAtLeastOneReference(repository)).thenReturn(true);\n\n        when(gitOperations.pullFromRepository(git, \"origin\", \"master\")).thenReturn(pullResult);\n        when(gitOperations.isLocalBranch(git, \"master\")).thenReturn(true);\n\n        ContractsGitLoader pactGitLoader =\n            new ContractsGitLoader(TestWithPactRepositoryDirectory.class.getAnnotation(ContractsGit.class));\n        pactGitLoader.gitOperations = gitOperations;\n\n        final Path pactsFromGitRepo = pactGitLoader.getContractsFolderFromGitRepo();\n\n        verify(gitOperations).pullFromRepository(git, \"origin\", \"master\");\n        verify(gitOperations).checkoutBranch(git, \"master\");\n        assertThat(pactsFromGitRepo.toString()).isEqualTo(\"/tmp\");\n    }", "signature": "void should_pull_existing_git_repo_local_branch()", "full_signature": "@Test public void should_pull_existing_git_repo_local_branch()", "class_method_signature": "ContractsGitLoaderTest.should_pull_existing_git_repo_local_branch()", "testcase": true, "constructor": false, "invocations": ["get", "thenReturn", "when", "isValidGitRepository", "thenReturn", "when", "openGitRepository", "thenReturn", "when", "hasAtLeastOneReference", "thenReturn", "when", "pullFromRepository", "thenReturn", "when", "isLocalBranch", "getAnnotation", "getContractsFolderFromGitRepo", "pullFromRepository", "verify", "checkoutBranch", "verify", "isEqualTo", "assertThat", "toString"]}, "focal_class": {"identifier": "ContractsGitLoader", "superclass": "", "interfaces": "implements ContractsRetriever", "fields": [{"original_string": "private final static Logger logger = Logger.getLogger(ContractsGitLoader.class.getName());", "modifier": "private final static", "type": "Logger", "declarator": "logger = Logger.getLogger(ContractsGitLoader.class.getName())", "var_name": "logger"}, {"original_string": "private ContractsGit contractsGit;", "modifier": "private", "type": "ContractsGit", "declarator": "contractsGit", "var_name": "contractsGit"}, {"original_string": "GitOperations gitOperations;", "modifier": "", "type": "GitOperations", "declarator": "gitOperations", "var_name": "gitOperations"}], "methods": [{"identifier": "ContractsGitLoader", "parameters": "()", "modifiers": "public", "return": "", "signature": " ContractsGitLoader()", "full_signature": "public  ContractsGitLoader()", "class_method_signature": "ContractsGitLoader.ContractsGitLoader()", "testcase": false, "constructor": true}, {"identifier": "ContractsGitLoader", "parameters": "(ContractsGit contractsGit)", "modifiers": "public", "return": "", "signature": " ContractsGitLoader(ContractsGit contractsGit)", "full_signature": "public  ContractsGitLoader(ContractsGit contractsGit)", "class_method_signature": "ContractsGitLoader.ContractsGitLoader(ContractsGit contractsGit)", "testcase": false, "constructor": true}, {"identifier": "retrieve", "parameters": "()", "modifiers": "@Override public", "return": "List<URI>", "signature": "List<URI> retrieve()", "full_signature": "@Override public List<URI> retrieve()", "class_method_signature": "ContractsGitLoader.retrieve()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "ContractsGitLoader.getName()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, Object> configuration)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, Object> configuration)", "full_signature": "@Override public void configure(Map<String, Object> configuration)", "class_method_signature": "ContractsGitLoader.configure(Map<String, Object> configuration)", "testcase": false, "constructor": false}, {"identifier": "getContractsFolderFromGitRepo", "parameters": "()", "modifiers": "protected", "return": "Path", "signature": "Path getContractsFolderFromGitRepo()", "full_signature": "protected Path getContractsFolderFromGitRepo()", "class_method_signature": "ContractsGitLoader.getContractsFolderFromGitRepo()", "testcase": false, "constructor": false}, {"identifier": "moveToCorrectLocation", "parameters": "(Git git)", "modifiers": "private", "return": "Path", "signature": "Path moveToCorrectLocation(Git git)", "full_signature": "private Path moveToCorrectLocation(Git git)", "class_method_signature": "ContractsGitLoader.moveToCorrectLocation(Git git)", "testcase": false, "constructor": false}, {"identifier": "executeClone", "parameters": "(Path repository)", "modifiers": "private", "return": "Git", "signature": "Git executeClone(Path repository)", "full_signature": "private Git executeClone(Path repository)", "class_method_signature": "ContractsGitLoader.executeClone(Path repository)", "testcase": false, "constructor": false}, {"identifier": "executePull", "parameters": "(Git git)", "modifiers": "private", "return": "PullResult", "signature": "PullResult executePull(Git git)", "full_signature": "private PullResult executePull(Git git)", "class_method_signature": "ContractsGitLoader.executePull(Git git)", "testcase": false, "constructor": false}, {"identifier": "getPrivateKey", "parameters": "()", "modifiers": "private", "return": "Path", "signature": "Path getPrivateKey()", "full_signature": "private Path getPrivateKey()", "class_method_signature": "ContractsGitLoader.getPrivateKey()", "testcase": false, "constructor": false}, {"identifier": "isSet", "parameters": "(String field)", "modifiers": "private", "return": "boolean", "signature": "boolean isSet(String field)", "full_signature": "private boolean isSet(String field)", "class_method_signature": "ContractsGitLoader.isSet(String field)", "testcase": false, "constructor": false}, {"identifier": "getResolvedValue", "parameters": "(String field)", "modifiers": "private", "return": "String", "signature": "String getResolvedValue(String field)", "full_signature": "private String getResolvedValue(String field)", "class_method_signature": "ContractsGitLoader.getResolvedValue(String field)", "testcase": false, "constructor": false}], "file": "provider/git-retriever/src/main/java/org/arquillian/algeron/pact/provider/loader/git/ContractsGitLoader.java"}, "focal_method": {"identifier": "getContractsFolderFromGitRepo", "parameters": "()", "modifiers": "protected", "return": "Path", "body": "protected Path getContractsFolderFromGitRepo() throws IOException {\n        Path location = null;\n        Git git = null;\n        try {\n            if (isSet(this.contractsGit.repository())) {\n\n                Path repository = Paths.get(getResolvedValue(this.contractsGit.repository()));\n\n                if (this.gitOperations.isValidGitRepository(repository)) {\n\n                    git = this.gitOperations.openGitRepository(repository);\n                    if (this.gitOperations.hasAtLeastOneReference(git.getRepository())) {\n\n                        final PullResult pullResult = executePull(git);\n\n                        if (pullResult.isSuccessful()) {\n                            location = moveToCorrectLocation(git);\n                        } else {\n                            // Merge conflicts\n                            throw new IllegalArgumentException(\n                                \"There are merge conflicts into an existing git repo. Provider should not deal with merge conflicts. Correct them or delete the repo and execute again the test.\");\n                        }\n                    } else {\n                        throw new IllegalArgumentException(String.format(\"Git repository %s was not cloned correctly.\",\n                                                                         git.getRepository().getDirectory().getAbsolutePath()));\n                    }\n                } else {\n                    logger.log(Level.INFO, String.format(\n                        \"%s directory is not a git directory or does not exists and it is going to be deleted and cloned\",\n                        repository));\n\n                    Files.deleteIfExists(repository);\n                    Files.createDirectories(repository);\n                    git = executeClone(repository);\n                    location = moveToCorrectLocation(git);\n                }\n            } else {\n                // Put files in a temp directory\n                final Path testGitRepository = Files.createTempDirectory(\"TestGitRepository\");\n\n                logger.log(Level.INFO, String.format(\"Repository is going to be cloned at %s\", testGitRepository));\n\n                git = executeClone(testGitRepository);\n                location = moveToCorrectLocation(git);\n            }\n        } finally {\n            if (git != null) {\n                git.close();\n            }\n        }\n\n        return location;\n    }", "signature": "Path getContractsFolderFromGitRepo()", "full_signature": "protected Path getContractsFolderFromGitRepo()", "class_method_signature": "ContractsGitLoader.getContractsFolderFromGitRepo()", "testcase": false, "constructor": false, "invocations": ["isSet", "repository", "get", "getResolvedValue", "repository", "isValidGitRepository", "openGitRepository", "hasAtLeastOneReference", "getRepository", "executePull", "isSuccessful", "moveToCorrectLocation", "format", "getAbsolutePath", "getDirectory", "getRepository", "log", "format", "deleteIfExists", "createDirectories", "executeClone", "moveToCorrectLocation", "createTempDirectory", "log", "format", "executeClone", "moveToCorrectLocation", "close"]}, "repository": {"repo_id": 67030086, "url": "https://github.com/arquillian/arquillian-algeron", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 10, "size": 661, "license": "licensed"}}