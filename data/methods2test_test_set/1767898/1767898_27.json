{"test_class": {"identifier": "CommunicationTemplateTest", "superclass": "extends AbstractLinkedInApiTest", "interfaces": "", "fields": [], "file": "spring-social-linkedin/src/test/java/org/springframework/social/linkedin/api/impl/CommunicationTemplateTest.java"}, "test_case": {"identifier": "sendInvitation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void sendInvitation() {\n\t\tmockServer.expect(requestTo(CommunicationTemplate.MESSAGING_URL+\"?oauth2_access_token=ACCESS_TOKEN\"))\n\t\t\t.andExpect(method(POST))\n\t\t\t.andExpect(jsonPath(\"body\", is(\"I'd like to add you to my professional network on LinkedIn\")))\n\t\t\t.andExpect(jsonPath(\"subject\", is(\"I'd like to add you to my professional network on LinkedIn\")))\n\t\t\t.andExpect(jsonPath(\"recipients.values\", hasSize(1)))\n\t\t\t.andExpect(jsonPath(\"recipients.values[0].person._path\", is(\"/people/UB2kruYvvv\")))\n\t\t\t.andExpect(jsonPath(\"item-content.invitation-request.authorization.name\", is(\"NAME_SEARCH\")))\n\t\t\t.andExpect(jsonPath(\"item-content.invitation-request.authorization.value\", is(\"aaaa\")))\n\t\t\t.andExpect(jsonPath(\"item-content.invitation-request.connect-type\", is(\"friend\")))\n\t\t\t.andRespond(withSuccess(\"\", MediaType.APPLICATION_JSON));\n\n\t\tlinkedIn.communicationOperations().connectTo(\"I'd like to add you to my professional network on LinkedIn\",\n\t\t\t\t\"I'd like to add you to my professional network on LinkedIn\", \"UB2kruYvvv\", new ConnectionAuthorization(\"blah\", \"NAME_SEARCH:aaaa\"));\n\t}", "signature": "void sendInvitation()", "full_signature": "@Test public void sendInvitation()", "class_method_signature": "CommunicationTemplateTest.sendInvitation()", "testcase": true, "constructor": false, "invocations": ["andRespond", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "andExpect", "expect", "requestTo", "method", "jsonPath", "is", "jsonPath", "is", "jsonPath", "hasSize", "jsonPath", "is", "jsonPath", "is", "jsonPath", "is", "jsonPath", "is", "withSuccess", "connectTo", "communicationOperations"]}, "focal_class": {"identifier": "CommunicationTemplate", "superclass": "", "interfaces": "implements CommunicationOperations", "fields": [{"original_string": "private final RestOperations restOperations;", "modifier": "private final", "type": "RestOperations", "declarator": "restOperations", "var_name": "restOperations"}, {"original_string": "public static final String MESSAGING_URL = BASE_URL + \"~/mailbox\";", "modifier": "public static final", "type": "String", "declarator": "MESSAGING_URL = BASE_URL + \"~/mailbox\"", "var_name": "MESSAGING_URL"}, {"original_string": "public static final String PEOPLE = \"/people/\";", "modifier": "public static final", "type": "String", "declarator": "PEOPLE = \"/people/\"", "var_name": "PEOPLE"}], "methods": [{"identifier": "CommunicationTemplate", "parameters": "(RestOperations restOperations)", "modifiers": "public", "return": "", "signature": " CommunicationTemplate(RestOperations restOperations)", "full_signature": "public  CommunicationTemplate(RestOperations restOperations)", "class_method_signature": "CommunicationTemplate.CommunicationTemplate(RestOperations restOperations)", "testcase": false, "constructor": true}, {"identifier": "sendMessage", "parameters": "(String subject, String body, List<String> recipientIds)", "modifiers": "public", "return": "void", "signature": "void sendMessage(String subject, String body, List<String> recipientIds)", "full_signature": "public void sendMessage(String subject, String body, List<String> recipientIds)", "class_method_signature": "CommunicationTemplate.sendMessage(String subject, String body, List<String> recipientIds)", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(String subject, String body, String... recipientIds)", "modifiers": "public", "return": "void", "signature": "void sendMessage(String subject, String body, String... recipientIds)", "full_signature": "public void sendMessage(String subject, String body, String... recipientIds)", "class_method_signature": "CommunicationTemplate.sendMessage(String subject, String body, String... recipientIds)", "testcase": false, "constructor": false}, {"identifier": "connectTo", "parameters": "(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "modifiers": "public", "return": "void", "signature": "void connectTo(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "full_signature": "public void connectTo(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "class_method_signature": "CommunicationTemplate.connectTo(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "testcase": false, "constructor": false}, {"identifier": "connectTo", "parameters": "(String subject, String body, String email, String firstName, String lastName)", "modifiers": "public", "return": "void", "signature": "void connectTo(String subject, String body, String email, String firstName, String lastName)", "full_signature": "public void connectTo(String subject, String body, String email, String firstName, String lastName)", "class_method_signature": "CommunicationTemplate.connectTo(String subject, String body, String email, String firstName, String lastName)", "testcase": false, "constructor": false}], "file": "spring-social-linkedin/src/main/java/org/springframework/social/linkedin/api/impl/CommunicationTemplate.java"}, "focal_method": {"identifier": "connectTo", "parameters": "(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "modifiers": "public", "return": "void", "body": "public void connectTo(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization) {\n\t\tMap<String, Object> mailboxItem = new HashMap<String,Object>();\n\t\t\n\t\tmailboxItem.put(\"recipients\", new Recipients(Arrays.asList(recipientId)));\n\t\tmailboxItem.put(\"subject\", subject);\n\t\tmailboxItem.put(\"body\", body);\n\t\tString[] nameValue = connectionAuthorization.getValue().split(\":\");\n\t\tmailboxItem.put(\"item-content\", new ItemContent(nameValue[0], nameValue[1]));\n\t\t\n\t\trestOperations.postForLocation(MESSAGING_URL, mailboxItem);\n\t}", "signature": "void connectTo(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "full_signature": "public void connectTo(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "class_method_signature": "CommunicationTemplate.connectTo(String subject, String body, String recipientId, ConnectionAuthorization connectionAuthorization)", "testcase": false, "constructor": false, "invocations": ["put", "asList", "put", "put", "split", "getValue", "put", "postForLocation"]}, "repository": {"repo_id": 1767898, "url": "https://github.com/spring-projects/spring-social-linkedin", "language": "Java", "is_fork": false, "fork_count": 66, "stargazer_count": 71, "size": 12391, "license": "licensed"}}