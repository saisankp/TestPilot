{"test_class": {"identifier": "FriendFileLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "UniversalFriends-core/src/test/java/me/ironexception/universalfriends/json/FriendFileLoaderTest.java"}, "test_case": {"identifier": "load", "parameters": "()", "modifiers": "@Test @DisplayName(\"Default loader works\")", "return": "void", "body": "@Test\n    @DisplayName(\"Default loader works\")\n    void load() throws URISyntaxException, IOException, FriendFileLoaderException {\n        FriendFileLoader<Configuration<Person>, Person> loader = FriendFileLoader.defaultLoader()\n                .withPath(TestUtil.getPath(\"friends.json\"));\n\n        assertDoesNotThrow((Executable) loader::load, \"Loads without exceptions\");\n        Configuration<Person> configuration = loader.load();\n        Set<Person> set = configuration.getFriendList();\n        assertEquals(1, set.size(), \"One person was loaded\");\n\n        Person person = set.stream().findAny().get();\n        assertEquals(\"foo\", person.getName());\n        assertEquals(\"8a2a3ef5-8d27-41b9-a69a-cbb05ac0ed1d\", person.getId().toString());\n        assertEquals(0, person.getValue());\n\n        JsonObject meta = person.getMeta();\n        assertTrue(meta.has(\"displayName\"), \"Meta has displayName\");\n        assertEquals(\"bar\", meta.get(\"displayName\").getAsString());\n    }", "signature": "void load()", "full_signature": "@Test @DisplayName(\"Default loader works\") void load()", "class_method_signature": "FriendFileLoaderTest.load()", "testcase": true, "constructor": false, "invocations": ["withPath", "defaultLoader", "getPath", "assertDoesNotThrow", "load", "getFriendList", "assertEquals", "size", "get", "findAny", "stream", "assertEquals", "getName", "assertEquals", "toString", "getId", "assertEquals", "getValue", "getMeta", "assertTrue", "has", "assertEquals", "getAsString", "get"]}, "focal_class": {"identifier": "FriendFileLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BiFunction<Bounds, Set<S>, T> factory;", "modifier": "private", "type": "BiFunction<Bounds, Set<S>, T>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private Path readPath;", "modifier": "private", "type": "Path", "declarator": "readPath", "var_name": "readPath"}, {"original_string": "private Class<S> personClass;", "modifier": "private", "type": "Class<S>", "declarator": "personClass", "var_name": "personClass"}, {"original_string": "private Supplier<Gson> gsonSupplier = Gson::new;", "modifier": "private", "type": "Supplier<Gson>", "declarator": "gsonSupplier = Gson::new", "var_name": "gsonSupplier"}], "methods": [{"identifier": "FriendFileLoader", "parameters": "(Class<S> personClass)", "modifiers": "private", "return": "", "signature": " FriendFileLoader(Class<S> personClass)", "full_signature": "private  FriendFileLoader(Class<S> personClass)", "class_method_signature": "FriendFileLoader.FriendFileLoader(Class<S> personClass)", "testcase": false, "constructor": true}, {"identifier": "loader", "parameters": "(Class<S> personClass)", "modifiers": "public static", "return": "FriendFileLoader<T, S>", "signature": "FriendFileLoader<T, S> loader(Class<S> personClass)", "full_signature": "public static FriendFileLoader<T, S> loader(Class<S> personClass)", "class_method_signature": "FriendFileLoader.loader(Class<S> personClass)", "testcase": false, "constructor": false}, {"identifier": "defaultLoader", "parameters": "()", "modifiers": "public static", "return": "FriendFileLoader<Configuration<Person>, Person>", "signature": "FriendFileLoader<Configuration<Person>, Person> defaultLoader()", "full_signature": "public static FriendFileLoader<Configuration<Person>, Person> defaultLoader()", "class_method_signature": "FriendFileLoader.defaultLoader()", "testcase": false, "constructor": false}, {"identifier": "withFactory", "parameters": "(BiFunction<Bounds, Set<S>, T> factory)", "modifiers": "public", "return": "FriendFileLoader<T, S>", "signature": "FriendFileLoader<T, S> withFactory(BiFunction<Bounds, Set<S>, T> factory)", "full_signature": "public FriendFileLoader<T, S> withFactory(BiFunction<Bounds, Set<S>, T> factory)", "class_method_signature": "FriendFileLoader.withFactory(BiFunction<Bounds, Set<S>, T> factory)", "testcase": false, "constructor": false}, {"identifier": "withDefaultFactory", "parameters": "()", "modifiers": "public", "return": "FriendFileLoader<Configuration<S>, S>", "signature": "FriendFileLoader<Configuration<S>, S> withDefaultFactory()", "full_signature": "public FriendFileLoader<Configuration<S>, S> withDefaultFactory()", "class_method_signature": "FriendFileLoader.withDefaultFactory()", "testcase": false, "constructor": false}, {"identifier": "withPath", "parameters": "(Path path)", "modifiers": "public", "return": "FriendFileLoader<T, S>", "signature": "FriendFileLoader<T, S> withPath(Path path)", "full_signature": "public FriendFileLoader<T, S> withPath(Path path)", "class_method_signature": "FriendFileLoader.withPath(Path path)", "testcase": false, "constructor": false}, {"identifier": "withDefaultPath", "parameters": "()", "modifiers": "public", "return": "FriendFileLoader<T, S>", "signature": "FriendFileLoader<T, S> withDefaultPath()", "full_signature": "public FriendFileLoader<T, S> withDefaultPath()", "class_method_signature": "FriendFileLoader.withDefaultPath()", "testcase": false, "constructor": false}, {"identifier": "withGson", "parameters": "(Supplier<Gson> gsonSupplier)", "modifiers": "public", "return": "FriendFileLoader<T, S>", "signature": "FriendFileLoader<T, S> withGson(Supplier<Gson> gsonSupplier)", "full_signature": "public FriendFileLoader<T, S> withGson(Supplier<Gson> gsonSupplier)", "class_method_signature": "FriendFileLoader.withGson(Supplier<Gson> gsonSupplier)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T load()", "full_signature": "public T load()", "class_method_signature": "FriendFileLoader.load()", "testcase": false, "constructor": false}, {"identifier": "tryAsObject", "parameters": "(JsonElement element, String exception)", "modifiers": "private", "return": "JsonObject", "signature": "JsonObject tryAsObject(JsonElement element, String exception)", "full_signature": "private JsonObject tryAsObject(JsonElement element, String exception)", "class_method_signature": "FriendFileLoader.tryAsObject(JsonElement element, String exception)", "testcase": false, "constructor": false}, {"identifier": "tryAsArray", "parameters": "(JsonElement element)", "modifiers": "private", "return": "JsonArray", "signature": "JsonArray tryAsArray(JsonElement element)", "full_signature": "private JsonArray tryAsArray(JsonElement element)", "class_method_signature": "FriendFileLoader.tryAsArray(JsonElement element)", "testcase": false, "constructor": false}], "file": "UniversalFriends-core/src/main/java/me/ironexception/universalfriends/json/FriendFileLoader.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "public", "return": "T", "body": "public T load() throws IOException, FriendFileLoaderException {\n        final Gson gson = gsonSupplier.get();\n        JsonObject rootObject = tryAsObject(new JsonParser().parse(new BufferedReader(new InputStreamReader(Files.newInputStream(this.readPath)))), \"Root element of friends file must be a JSON object\");\n        JsonObject boundsObject = tryAsObject(rootObject.get(\"bounds\"), \"Bounds element of friends file must be a JSON object\");\n        Bounds bounds = gson.fromJson(boundsObject, Bounds.class);\n        JsonArray listArray = tryAsArray(rootObject.get(\"list\"));\n        Set<S> persons = new HashSet<>();\n        for (JsonElement element : listArray) {\n            persons.add(gson.fromJson(element, this.personClass));\n        }\n        return this.factory.apply(bounds, persons);\n    }", "signature": "T load()", "full_signature": "public T load()", "class_method_signature": "FriendFileLoader.load()", "testcase": false, "constructor": false, "invocations": ["get", "tryAsObject", "parse", "newInputStream", "tryAsObject", "get", "fromJson", "tryAsArray", "get", "add", "fromJson", "apply"]}, "repository": {"repo_id": 229560773, "url": "https://github.com/minecraft-initiative/UniversalFriends", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 10, "size": 177, "license": "licensed"}}