{"test_class": {"identifier": "ServiceActorThreadTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ProxyFactory mProxyFactory;", "modifier": "@Mock\n    private", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@Mock\n    private FailureHandler mFailureHandler;", "modifier": "@Mock\n    private", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@Mock\n    private Runnable mActorImpl;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mActorImpl", "var_name": "mActorImpl"}, {"original_string": "@Mock\n    private Runnable mProxy;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mProxy", "var_name": "mProxy"}, {"original_string": "@Mock\n    private ActorService.RemoteMessageSender mMessageSender;", "modifier": "@Mock\n    private", "type": "ActorService.RemoteMessageSender", "declarator": "mMessageSender", "var_name": "mMessageSender"}, {"original_string": "private Binder mBinder;", "modifier": "private", "type": "Binder", "declarator": "mBinder", "var_name": "mBinder"}], "file": "actors-library/src/test/java/com/truecaller/androidactors/ServiceActorThreadTest.java"}, "test_case": {"identifier": "deliverMessageTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void deliverMessageTest() {\n        ShadowApplication application = ShadowApplication.getInstance();\n        ServiceActorThread thread = new ServiceActorThread(application.getApplicationContext(), mProxyFactory,\n                mFailureHandler, ActorService.class, 1);\n\n        ActorRef<Runnable> ref = thread.bind(Runnable.class, mActorImpl);\n        Assert.assertSame(mProxy, ref.tell());\n\n        ArgumentCaptor<MessageSender> postmanCaptor = ArgumentCaptor.forClass(MessageSender.class);\n        Mockito.verify(mProxyFactory).newProxy(Mockito.<Class>any(), postmanCaptor.capture());\n\n        MessageSender postman = postmanCaptor.getValue();\n        Assert.assertNotNull(postman);\n\n        // Should try to start service\n        Mockito.doReturn(true).when(mMessageSender).deliver(Mockito.any(Transaction.class));\n        Message message = Mockito.mock(Message.class);\n        postman.deliver(message);\n\n        Intent intent = application.getNextStartedService();\n        Assert.assertNotNull(intent);\n        Assert.assertEquals(new ComponentName(application.getApplicationContext(), ActorService.class),\n                intent.getComponent());\n\n        ArgumentCaptor<Transaction> captor = ArgumentCaptor.forClass(Transaction.class);\n        Mockito.verify(mMessageSender).deliver(captor.capture());\n        Transaction transaction = captor.getValue();\n\n        Assert.assertNotNull(transaction);\n        Assert.assertSame(mActorImpl, transaction.impl);\n        Assert.assertSame(mFailureHandler, transaction.failureHandler);\n        Assert.assertSame(message, transaction.message);\n\n        // Now we bound, but sender will not accept transactions, so we should try to bind again\n        Mockito.reset(mMessageSender);\n        Mockito.doReturn(mBinder).when(mMessageSender).asBinder();\n        Mockito.doReturn(false).when(mMessageSender).deliver(Mockito.any(Transaction.class));\n        application.clearStartedServices();\n        message = Mockito.mock(Message.class);\n        postman.deliver(message);\n\n        intent = application.getNextStartedService();\n        Assert.assertNotNull(intent);\n        Assert.assertEquals(new ComponentName(application.getApplicationContext(), ActorService.class),\n                intent.getComponent());\n\n        captor = ArgumentCaptor.forClass(Transaction.class);\n        // Should be two invocation, one when we tried bound one and another after rebinding\n        Mockito.verify(mMessageSender, Mockito.times(2)).deliver(captor.capture());\n        transaction = captor.getValue();\n\n        Assert.assertNotNull(transaction);\n        Assert.assertSame(mActorImpl, transaction.impl);\n        Assert.assertSame(mFailureHandler, transaction.failureHandler);\n        Assert.assertSame(message, transaction.message);\n\n        // Next one shouldn't try to start service - just do direct call\n        Mockito.reset(mMessageSender);\n        Mockito.doReturn(mBinder).when(mMessageSender).asBinder();\n        Mockito.doReturn(true).when(mMessageSender).deliver(Mockito.<Transaction>any());\n        application.clearStartedServices();\n        message = Mockito.mock(Message.class);\n        postman.deliver(message);\n        Assert.assertNull(application.getNextStartedService());\n\n        Mockito.verify(mMessageSender).deliver(captor.capture());\n        transaction = captor.getValue();\n\n        Assert.assertNotNull(transaction);\n        Assert.assertSame(mActorImpl, transaction.impl);\n        Assert.assertSame(mFailureHandler, transaction.failureHandler);\n        Assert.assertSame(message, transaction.message);\n\n        // Ok, now unbind and try again. We should start service\n        ((ServiceConnection) postman).onServiceDisconnected(null);\n        Mockito.reset(mMessageSender);\n        Mockito.doReturn(mBinder).when(mMessageSender).asBinder();\n        application.clearStartedServices();\n        message = Mockito.mock(Message.class);\n        postman.deliver(message);\n\n        intent = application.getNextStartedService();\n        Assert.assertNotNull(intent);\n        Assert.assertEquals(new ComponentName(application.getApplicationContext(), ActorService.class),\n                intent.getComponent());\n\n        captor = ArgumentCaptor.forClass(Transaction.class);\n        Mockito.verify(mMessageSender).deliver(captor.capture());\n        transaction = captor.getValue();\n\n        Assert.assertNotNull(transaction);\n        Assert.assertSame(mActorImpl, transaction.impl);\n        Assert.assertSame(mFailureHandler, transaction.failureHandler);\n        Assert.assertSame(message, transaction.message);\n    }", "signature": "void deliverMessageTest()", "full_signature": "@Test public void deliverMessageTest()", "class_method_signature": "ServiceActorThreadTest.deliverMessageTest()", "testcase": true, "constructor": false, "invocations": ["getInstance", "getApplicationContext", "bind", "assertSame", "tell", "forClass", "newProxy", "verify", "any", "capture", "getValue", "assertNotNull", "deliver", "when", "doReturn", "any", "mock", "deliver", "getNextStartedService", "assertNotNull", "assertEquals", "getApplicationContext", "getComponent", "forClass", "deliver", "verify", "capture", "getValue", "assertNotNull", "assertSame", "assertSame", "assertSame", "reset", "asBinder", "when", "doReturn", "deliver", "when", "doReturn", "any", "clearStartedServices", "mock", "deliver", "getNextStartedService", "assertNotNull", "assertEquals", "getApplicationContext", "getComponent", "forClass", "deliver", "verify", "times", "capture", "getValue", "assertNotNull", "assertSame", "assertSame", "assertSame", "reset", "asBinder", "when", "doReturn", "deliver", "when", "doReturn", "any", "clearStartedServices", "mock", "deliver", "assertNull", "getNextStartedService", "deliver", "verify", "capture", "getValue", "assertNotNull", "assertSame", "assertSame", "assertSame", "onServiceDisconnected", "reset", "asBinder", "when", "doReturn", "clearStartedServices", "mock", "deliver", "getNextStartedService", "assertNotNull", "assertEquals", "getApplicationContext", "getComponent", "forClass", "deliver", "verify", "capture", "getValue", "assertNotNull", "assertSame", "assertSame", "assertSame"]}, "focal_class": {"identifier": "ServiceActorThread", "superclass": "", "interfaces": "implements ActorThread", "fields": [{"original_string": "private static final SparseArray<WeakReference<ServiceConnection>> sSenders = new SparseArray<>();", "modifier": "private static final", "type": "SparseArray<WeakReference<ServiceConnection>>", "declarator": "sSenders = new SparseArray<>()", "var_name": "sSenders"}, {"original_string": "private final int mJobId;", "modifier": "private final", "type": "int", "declarator": "mJobId", "var_name": "mJobId"}, {"original_string": "@NonNull\n    private final Context mContext;", "modifier": "@NonNull\n    private final", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "@NonNull\n    private final ProxyFactory mProxyFactory;", "modifier": "@NonNull\n    private final", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@NonNull\n    private final FailureHandler mFailureHandler;", "modifier": "@NonNull\n    private final", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@NonNull\n    private final Class<? extends ActorService> mService;", "modifier": "@NonNull\n    private final", "type": "Class<? extends ActorService>", "declarator": "mService", "var_name": "mService"}], "methods": [{"identifier": "ServiceActorThread", "parameters": "(@NonNull Context context, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull Class<? extends ActorService> service,\n                                     int jobId)", "modifiers": "", "return": "", "signature": " ServiceActorThread(@NonNull Context context, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull Class<? extends ActorService> service,\n                                     int jobId)", "full_signature": "  ServiceActorThread(@NonNull Context context, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull Class<? extends ActorService> service,\n                                     int jobId)", "class_method_signature": "ServiceActorThread.ServiceActorThread(@NonNull Context context, @NonNull ProxyFactory proxyFactory,\n                                     @NonNull FailureHandler failureHandler, @NonNull Class<? extends ActorService> service,\n                                     int jobId)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(@NonNull Class<T> cls, @NonNull T impl)", "modifiers": "@NonNull @Override public", "return": "ActorRef<T>", "signature": "ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "full_signature": "@NonNull @Override public ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "class_method_signature": "ServiceActorThread.bind(@NonNull Class<T> cls, @NonNull T impl)", "testcase": false, "constructor": false}, {"identifier": "getConnectionForJob", "parameters": "(int jobId)", "modifiers": "@Nullable /* package */ static", "return": "ServiceConnection", "signature": "ServiceConnection getConnectionForJob(int jobId)", "full_signature": "@Nullable /* package */ static ServiceConnection getConnectionForJob(int jobId)", "class_method_signature": "ServiceActorThread.getConnectionForJob(int jobId)", "testcase": false, "constructor": false}], "file": "actors-library/src/main/java/com/truecaller/androidactors/ServiceActorThread.java"}, "focal_method": {"identifier": "bind", "parameters": "(@NonNull Class<T> cls, @NonNull T impl)", "modifiers": "@NonNull @Override public", "return": "ActorRef<T>", "body": "@NonNull\n    @Override\n    public <T> ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl) {\n        ServiceMessageSenderProxy<T> postman = new ServiceMessageSenderProxy<>(mContext, mFailureHandler, mService, mJobId, impl);\n        T instance = mProxyFactory.newProxy(cls, postman);\n        return new ActorRefImpl<>(instance);\n    }", "signature": "ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "full_signature": "@NonNull @Override public ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "class_method_signature": "ServiceActorThread.bind(@NonNull Class<T> cls, @NonNull T impl)", "testcase": false, "constructor": false, "invocations": ["newProxy"]}, "repository": {"repo_id": 99569378, "url": "https://github.com/truecaller/android-actors-library", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 20, "size": 352, "license": "licensed"}}