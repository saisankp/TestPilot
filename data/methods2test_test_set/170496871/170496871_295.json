{"test_class": {"identifier": "PartitionDataStorageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PartitionDataStorage dataStorage = new PartitionDataStorage(-1);", "modifier": "private", "type": "PartitionDataStorage", "declarator": "dataStorage = new PartitionDataStorage(-1)", "var_name": "dataStorage"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/dataset/impl/cache/util/PartitionDataStorageTest.java"}, "test_case": {"identifier": "testComputeDataIfAbsent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComputeDataIfAbsent() {\n        AtomicLong cnt = new AtomicLong();\n\n        for (int i = 0; i < 10; i++) {\n            Integer res = (Integer) dataStorage.computeDataIfAbsent(0, () -> {\n                cnt.incrementAndGet();\n\n                return 42;\n            });\n\n            assertEquals(42, res.intValue());\n        }\n\n        assertEquals(1, cnt.intValue());\n    }", "signature": "void testComputeDataIfAbsent()", "full_signature": "@Test public void testComputeDataIfAbsent()", "class_method_signature": "PartitionDataStorageTest.testComputeDataIfAbsent()", "testcase": true, "constructor": false, "invocations": ["computeDataIfAbsent", "incrementAndGet", "assertEquals", "intValue", "assertEquals", "intValue"]}, "focal_class": {"identifier": "PartitionDataStorage", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private final ConcurrentMap<Integer, ObjectWithUsageStat> storage = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<Integer, ObjectWithUsageStat>", "declarator": "storage = new ConcurrentHashMap<>()", "var_name": "storage"}, {"original_string": "private final ConcurrentMap<Integer, Lock> locks = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<Integer, Lock>", "declarator": "locks = new ConcurrentHashMap<>()", "var_name": "locks"}, {"original_string": "private final ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1);", "modifier": "private final", "type": "ScheduledThreadPoolExecutor", "declarator": "executor = new ScheduledThreadPoolExecutor(1)", "var_name": "executor"}, {"original_string": "private final long ttl;", "modifier": "private final", "type": "long", "declarator": "ttl", "var_name": "ttl"}], "methods": [{"identifier": "PartitionDataStorage", "parameters": "(long ttl)", "modifiers": "public", "return": "", "signature": " PartitionDataStorage(long ttl)", "full_signature": "public  PartitionDataStorage(long ttl)", "class_method_signature": "PartitionDataStorage.PartitionDataStorage(long ttl)", "testcase": false, "constructor": true}, {"identifier": "computeDataIfAbsent", "parameters": "(int part, Supplier<D> supplier)", "modifiers": "", "return": "D", "signature": "D computeDataIfAbsent(int part, Supplier<D> supplier)", "full_signature": " D computeDataIfAbsent(int part, Supplier<D> supplier)", "class_method_signature": "PartitionDataStorage.computeDataIfAbsent(int part, Supplier<D> supplier)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PartitionDataStorage.close()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/util/PartitionDataStorage.java"}, "focal_method": {"identifier": "computeDataIfAbsent", "parameters": "(int part, Supplier<D> supplier)", "modifiers": "", "return": "D", "body": "<D> D computeDataIfAbsent(int part, Supplier<D> supplier) {\n        ObjectWithUsageStat objWithStat = storage.get(part);\n\n        if (objWithStat == null) {\n            Lock lock = locks.computeIfAbsent(part, p -> new ReentrantLock());\n\n            lock.lock();\n            try {\n                objWithStat = storage.get(part);\n                if (objWithStat == null) {\n                    objWithStat = new ObjectWithUsageStat(supplier.get());\n                    storage.put(part, objWithStat);\n                    if (ttl > -1)\n                        executor.schedule(new Cleaner(part), ttl, TimeUnit.MILLISECONDS);\n                }\n            }\n            finally {\n                lock.unlock();\n            }\n        }\n\n        objWithStat.updateLastAccessTime();\n\n        return (D)objWithStat.data;\n    }", "signature": "D computeDataIfAbsent(int part, Supplier<D> supplier)", "full_signature": " D computeDataIfAbsent(int part, Supplier<D> supplier)", "class_method_signature": "PartitionDataStorage.computeDataIfAbsent(int part, Supplier<D> supplier)", "testcase": false, "constructor": false, "invocations": ["get", "computeIfAbsent", "lock", "get", "get", "put", "schedule", "unlock", "updateLastAccessTime"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}