{"test_class": {"identifier": "JsonXsltSenderTest", "superclass": "extends SenderTestBase<JsonXsltSender>", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/senders/JsonXsltSenderTest.java"}, "test_case": {"identifier": "basic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void basic() throws Exception {\n\t\tsender.setStyleSheetName(\"/Xslt3/orgchart.xslt\");\n\t\tsender.configure();\n\t\tsender.open();\n\t\tString input=TestFileUtils.getTestFile(\"/Xslt3/employees.json\");\n\t\tlog.debug(\"inputfile [\"+input+\"]\");\n\t\tString expectedJson=TestFileUtils.getTestFile(\"/Xslt3/orgchart.json\");\n\t\tMessage message = new Message(input);\n\t\tPipeRunResult prr = sender.sendMessage(message, session, null);\n\t\tString jsonOut=prr.getResult().asString();\n\t\tassertJsonEqual(null,expectedJson,jsonOut);\n\t}", "signature": "void basic()", "full_signature": "@Test public void basic()", "class_method_signature": "JsonXsltSenderTest.basic()", "testcase": true, "constructor": false, "invocations": ["setStyleSheetName", "configure", "open", "getTestFile", "debug", "getTestFile", "sendMessage", "asString", "getResult", "assertJsonEqual"]}, "focal_class": {"identifier": "JsonXsltSender", "superclass": "extends XsltSender", "interfaces": "", "fields": [{"original_string": "private boolean jsonResult=true;", "modifier": "private", "type": "boolean", "declarator": "jsonResult=true", "var_name": "jsonResult"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "JsonXsltSender.configure()", "testcase": false, "constructor": false}, {"identifier": "provideOutputStream", "parameters": "(IPipeLineSession session, IForwardTarget next)", "modifiers": "@Override public", "return": "MessageOutputStream", "signature": "MessageOutputStream provideOutputStream(IPipeLineSession session, IForwardTarget next)", "full_signature": "@Override public MessageOutputStream provideOutputStream(IPipeLineSession session, IForwardTarget next)", "class_method_signature": "JsonXsltSender.provideOutputStream(IPipeLineSession session, IForwardTarget next)", "testcase": false, "constructor": false}, {"identifier": "createHandler", "parameters": "(Message input, IPipeLineSession session, MessageOutputStream target)", "modifiers": "@Override protected", "return": "ContentHandler", "signature": "ContentHandler createHandler(Message input, IPipeLineSession session, MessageOutputStream target)", "full_signature": "@Override protected ContentHandler createHandler(Message input, IPipeLineSession session, MessageOutputStream target)", "class_method_signature": "JsonXsltSender.createHandler(Message input, IPipeLineSession session, MessageOutputStream target)", "testcase": false, "constructor": false}, {"identifier": "getXmlReader", "parameters": "(ContentHandler handler)", "modifiers": "@Override protected", "return": "XMLReader", "signature": "XMLReader getXmlReader(ContentHandler handler)", "full_signature": "@Override protected XMLReader getXmlReader(ContentHandler handler)", "class_method_signature": "JsonXsltSender.getXmlReader(ContentHandler handler)", "testcase": false, "constructor": false}, {"identifier": "setJsonResult", "parameters": "(boolean jsonResult)", "modifiers": "@IbisDoc({\"1\", \"When <code>true</code>, the xml result of the transformation is converted back to json\", \"true\"}) public", "return": "void", "signature": "void setJsonResult(boolean jsonResult)", "full_signature": "@IbisDoc({\"1\", \"When <code>true</code>, the xml result of the transformation is converted back to json\", \"true\"}) public void setJsonResult(boolean jsonResult)", "class_method_signature": "JsonXsltSender.setJsonResult(boolean jsonResult)", "testcase": false, "constructor": false}, {"identifier": "isJsonResult", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isJsonResult()", "full_signature": "public boolean isJsonResult()", "class_method_signature": "JsonXsltSender.isJsonResult()", "testcase": false, "constructor": false}, {"identifier": "setNamespaceDefs", "parameters": "(String namespaceDefs)", "modifiers": "@Override @IbisDoc({\"2\", \"Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions\", \"j=http://www.w3.org/2013/XSL/json\"}) public", "return": "void", "signature": "void setNamespaceDefs(String namespaceDefs)", "full_signature": "@Override @IbisDoc({\"2\", \"Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions\", \"j=http://www.w3.org/2013/XSL/json\"}) public void setNamespaceDefs(String namespaceDefs)", "class_method_signature": "JsonXsltSender.setNamespaceDefs(String namespaceDefs)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/senders/JsonXsltSender.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void configure() throws ConfigurationException {\n\t\tif (StringUtils.isNotEmpty(getXpathExpression()) && StringUtils.isEmpty(getNamespaceDefs())) {\n\t\t\tsetNamespaceDefs(\"j=http://www.w3.org/2013/XSL/json\");\n\t\t}\n\t\tsuper.configure();\n\t}", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "JsonXsltSender.configure()", "testcase": false, "constructor": false, "invocations": ["isNotEmpty", "getXpathExpression", "isEmpty", "getNamespaceDefs", "setNamespaceDefs", "configure"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}