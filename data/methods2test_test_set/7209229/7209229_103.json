{"test_class": {"identifier": "TestDatabusRelayMain", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static Logger LOG = Logger.getLogger(TestDatabusRelayMain.class);", "modifier": "public final static", "type": "Logger", "declarator": "LOG = Logger.getLogger(TestDatabusRelayMain.class)", "var_name": "LOG"}, {"original_string": "public static final String SCHEMA_REGISTRY_DIR = \"TestDatabusRelayMain_schemas\";", "modifier": "public static final", "type": "String", "declarator": "SCHEMA_REGISTRY_DIR = \"TestDatabusRelayMain_schemas\"", "var_name": "SCHEMA_REGISTRY_DIR"}], "file": "databus2-relay/databus2-relay-impl/src/test/java/com/linkedin/databus2/relay/TestDatabusRelayMain.java"}, "test_case": {"identifier": "testRelayChainingSCNRegress", "parameters": "()", "modifiers": "@Test /** * Test regression of SCN of chained relay */ public", "return": "void", "body": "@Test\n\t/**\n\t * Test regression of SCN  of chained relay\n\t */\n\tpublic void testRelayChainingSCNRegress() throws InvalidConfigException, InterruptedException\n\t{\n      final Logger log = Logger.getLogger(\"TestDatabusRelayMain.testRelayChainingSCNRegress\");\n\t\tDatabusRelayTestUtil.RelayRunner r1=null,r2=null,r3 = null;\n\t\tClientRunner cr = null;\n\t\t//log.setLevel(Level.DEBUG);\n\t\tlog.info(\"start\");\n\t\t//DbusEventBuffer.LOG.setLevel(Level.DEBUG);\n\t\ttry\n\t\t{\n\t\t\tString[][] srcNames =\n\t\t\t{\n\t\t\t{ \"com.linkedin.events.example.Account\",\n              \"com.linkedin.events.example.Settings\" }, };\n\n\t\t\t// create main relay with random generator\n\t\t\tPhysicalSourceConfig[] srcConfigs = new PhysicalSourceConfig[srcNames.length];\n\t\t\tint i = 0;\n\t\t\tint eventRatePerSec = 10;\n\t\t\tint largestEventSize = 512*1024;\n\t\t\tlong largestWindowSize = 1*1024*1024;\n\t\t\tfor (String[] srcs : srcNames)\n\t\t\t{\n\n\t\t\t\tPhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder(\n\t\t\t\t\t\t(short) (i + 1),DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]), \"mock\",\n\t\t\t\t\t\t500, eventRatePerSec, srcs);\n\t\t\t\tsrcConfigs[i++] = src1;\n\t\t\t}\n\t\t\tint relayPort = 11993;\n\t\t\tfinal DatabusRelayMain relay1 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1019,\n\t\t\t\t\trelayPort, 10 * 1024 * 1024, srcConfigs, SCHEMA_REGISTRY_DIR);\n\t\t\tfinal DatabusRelayMain relay3 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1020,\n\t\t\t\t\trelayPort, 10 * 1024 * 1024, srcConfigs, SCHEMA_REGISTRY_DIR);\n\t\t\tAssert.assertNotNull(relay1);\n\t\t\tAssert.assertNotNull(relay3);\n\t\t\tr1 = new DatabusRelayTestUtil.RelayRunner(relay1);\n\t\t\tfinal DbusEventsTotalStats stats = relay1.getInboundEventStatisticsCollector().getTotalStats();\n\t\t\tfinal DbusEventsTotalStats stats3 = relay3.getInboundEventStatisticsCollector().getTotalStats();\n\n\t\t\t// create chained relay\n\t\t\tPhysicalSourceConfig[] chainedSrcConfigs = new PhysicalSourceConfig[srcNames.length];\n\t\t\tint j = 0;\n\t\t\tfor (String[] srcs : srcNames)\n\t\t\t{\n\n\t\t\t\tPhysicalSourceConfig src1 = DatabusRelayTestUtil.createPhysicalConfigBuilder(\n\t\t\t\t\t\t(short) (j + 1),DatabusRelayTestUtil.getPhysicalSrcName(srcs[0]),\n\t\t\t\t\t\t\"localhost:\" + relayPort, 500, eventRatePerSec,0,largestEventSize,largestWindowSize,srcs);\n\t\t\t\tchainedSrcConfigs[j++] = src1;\n\t\t\t}\n\t\t\tint chainedRelayPort = relayPort + 1;\n\t\t\tfinal DatabusRelayMain relay2 = DatabusRelayTestUtil.createDatabusRelayWithSchemaReg(1021,\n\t\t\t\t\tchainedRelayPort, 10 * 1024 * 1024, chainedSrcConfigs,SCHEMA_REGISTRY_DIR);\n\t\t\tAssert.assertNotNull(relay2);\n\t\t\tr2 = new DatabusRelayTestUtil.RelayRunner(relay2);\n\n\t\t\tresetSCN(relay2);\n\n\t\t\t// now create client:\n\t\t\tString srcSubscriptionString = TestUtil.join(srcNames[0], \",\");\n\t\t\tString serverName = \"localhost:\" + chainedRelayPort;\n\t\t\tCountingConsumer countingConsumer = new CountingConsumer();\n\t\t\tDatabusSourcesConnection clientConn = RelayEventProducer\n\t\t\t\t\t.createDatabusSourcesConnection(\"testProducer\", serverName,\n\t\t\t\t\t\t\tsrcSubscriptionString, countingConsumer,\n\t\t\t\t\t\t\t1 * 1024 * 1024, largestEventSize, 30 * 1000, 100, 15 * 1000,\n\t\t\t\t\t\t\t1, true,largestEventSize/10);\n\n\t\t\tcr = new ClientRunner(clientConn);\n\n\t\t\t// async starts for all components;\n\t\t\tr1.start();\n\n\t\t\tThread.sleep(10*1000);\n\n\t\t\t// start chained relay\n\t\t\tr2.start();\n\n\t\t\t//start client\n\t\t\tcr.start();\n\t\t\t//Pause r1;\n\t\t\tr1.pause();\n\n\t\t\tThread.sleep(1000);\n\n\t\t\tlong firstGenDataEvents = stats.getNumDataEvents();\n\t\t\tlong firstGenMinScn  = stats.getMinScn();\n\t\t\tlong firstGenWindows = stats.getNumSysEvents();\n\n\t\t\tAssert.assertTrue(stats.getNumSysEvents() > 0);\n\n\n\t\t\tlog.warn(\"relay1:  numDataEvents=\" + firstGenDataEvents\n\t\t\t\t\t+ \" numWindows=\" + firstGenWindows + \" minScn=\"\n\t\t\t\t\t+ firstGenMinScn + \" maxScn=\" + stats.getMaxScn());\n\n\n\t\t\tThread.sleep(4*1000);\n\t\t\t//clear the relay\n\t\t\tboolean s = r1.shutdown(2000);\n\t\t\tAssert.assertTrue(s);\n\n\t\t\tDbusEventsTotalStats stats2 = relay2.getInboundEventStatisticsCollector().getTotalStats();\n\t\t\tlong firstGenChainWindows = stats2.getNumSysEvents();\n\t\t\tlog.warn(\"relay2:  numDataEvents=\" + stats2.getNumDataEvents()\n\t\t\t\t\t+ \" numWindows=\" + firstGenChainWindows + \" minScn=\"\n\t\t\t\t\t+ stats2.getMinScn() + \" maxScn=\" + stats2.getMaxScn());\n\n\t\t\tThread.sleep(2*1000);\n\n\t\t\t//restart relay\n\t\t\tr3 = new DatabusRelayTestUtil.RelayRunner(relay3);\n\t\t\tr3.start();\n\n\t\t\tThread.sleep(15*1000);\n\n\t\t\tr3.pause();\n\n\t\t\tThread.sleep(35*1000);\n\n\t\t\tlog.warn(\"relay3:  numDataEvents=\" + stats3.getNumDataEvents()\n\t\t\t\t\t+ \" numWindows=\" + stats3.getNumSysEvents() + \" minScn=\"\n\t\t\t\t\t+ stats3.getMinScn() + \" maxScn=\" + stats3.getMaxScn());\n\n\t\t\tstats2 = relay2.getInboundEventStatisticsCollector().getTotalStats();\n\t\t\tlog.warn(\"relay2b: numDataEvents=\" + stats2.getNumDataEvents()\n\t\t\t\t\t+ \" numWindows=\" + stats2.getNumSysEvents() + \" minScn=\"\n\t\t\t\t\t+ stats2.getMinScn() + \" maxScn=\" + stats2.getMaxScn());\n\n\t\t\tlog.warn(\"consumer: \" + countingConsumer);\n\n\n\t\t\t//compare chained relays with 2 gens of tier 0 relays\n\t\t\tAssert.assertEquals(stats2.getMinScn(), firstGenMinScn) ;\n\t\t\tAssert.assertEquals(stats2.getMaxScn(), stats3.getMaxScn());\n\t\t\t//the total event windows seen by the chained relay will be state of consumption at first failure of relay1 minus 1 overlap window\n\t\t\tAssert.assertEquals(stats2.getNumSysEvents(), (firstGenChainWindows-1) + stats3.getNumSysEvents());\n\t\t\tAssert.assertTrue(stats2.getNumDataEvents() > stats3.getNumDataEvents());\n\n\t\t\t//compare source to final client\n\t\t\tAssert.assertEquals(countingConsumer.getNumSources(), 2);\n\t\t\tAssert.assertEquals(stats2.getNumSysEvents(), countingConsumer\n\t\t\t\t\t.getNumWindows());\n\n\t\t\tboolean sorted= true;\n\t\t\tlong prev = -1;\n\t\t\tlog.info(\" scn seq on consumer=\");\n\t\t\tfor (Long l: countingConsumer.getEndScns())\n\t\t\t{\n\t\t\t\tsorted = sorted && (l >= prev); prev=l;\n\t\t\t\tlog.info(l+ \" \");\n\t\t\t\tif (!sorted) break;\n\t\t\t}\n\t\t\tAssert.assertTrue(sorted);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tcleanup ( new DatabusRelayTestUtil.RelayRunner[] {r1,r2,r3} , cr);\n\t        log.info(\"end\");\n\t\t}\n\t}", "signature": "void testRelayChainingSCNRegress()", "full_signature": "@Test /** * Test regression of SCN of chained relay */ public void testRelayChainingSCNRegress()", "class_method_signature": "TestDatabusRelayMain.testRelayChainingSCNRegress()", "testcase": true, "constructor": false, "invocations": ["getLogger", "info", "createPhysicalConfigBuilder", "getPhysicalSrcName", "createDatabusRelayWithSchemaReg", "createDatabusRelayWithSchemaReg", "assertNotNull", "assertNotNull", "getTotalStats", "getInboundEventStatisticsCollector", "getTotalStats", "getInboundEventStatisticsCollector", "createPhysicalConfigBuilder", "getPhysicalSrcName", "createDatabusRelayWithSchemaReg", "assertNotNull", "resetSCN", "join", "createDatabusSourcesConnection", "start", "sleep", "start", "start", "pause", "sleep", "getNumDataEvents", "getMinScn", "getNumSysEvents", "assertTrue", "getNumSysEvents", "warn", "getMaxScn", "sleep", "shutdown", "assertTrue", "getTotalStats", "getInboundEventStatisticsCollector", "getNumSysEvents", "warn", "getNumDataEvents", "getMinScn", "getMaxScn", "sleep", "start", "sleep", "pause", "sleep", "warn", "getNumDataEvents", "getNumSysEvents", "getMinScn", "getMaxScn", "getTotalStats", "getInboundEventStatisticsCollector", "warn", "getNumDataEvents", "getNumSysEvents", "getMinScn", "getMaxScn", "warn", "assertEquals", "getMinScn", "assertEquals", "getMaxScn", "getMaxScn", "assertEquals", "getNumSysEvents", "getNumSysEvents", "assertTrue", "getNumDataEvents", "getNumDataEvents", "assertEquals", "getNumSources", "assertEquals", "getNumSysEvents", "getNumWindows", "info", "getEndScns", "info", "assertTrue", "cleanup", "info"]}, "focal_class": {"identifier": "DatabusRelayMain", "superclass": "extends HttpRelay", "interfaces": "", "fields": [{"original_string": "public static final Logger LOG = Logger.getLogger(DatabusRelayMain.class\n\t\t\t.getName());", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(DatabusRelayMain.class\n\t\t\t.getName())", "var_name": "LOG"}, {"original_string": "public static final String DB_RELAY_CONFIG_FILE_OPT_NAME = \"db_relay_config\";", "modifier": "public static final", "type": "String", "declarator": "DB_RELAY_CONFIG_FILE_OPT_NAME = \"db_relay_config\"", "var_name": "DB_RELAY_CONFIG_FILE_OPT_NAME"}, {"original_string": "private final RelayEventProducersRegistry _producersRegistry = RelayEventProducersRegistry.getInstance();", "modifier": "private final", "type": "RelayEventProducersRegistry", "declarator": "_producersRegistry = RelayEventProducersRegistry.getInstance()", "var_name": "_producersRegistry"}, {"original_string": "MultiServerSequenceNumberHandler _maxScnReaderWriters;", "modifier": "", "type": "MultiServerSequenceNumberHandler", "declarator": "_maxScnReaderWriters", "var_name": "_maxScnReaderWriters"}, {"original_string": "protected Map<PhysicalPartition, EventProducer> _producers;", "modifier": "protected", "type": "Map<PhysicalPartition, EventProducer>", "declarator": "_producers", "var_name": "_producers"}, {"original_string": "Map<PhysicalPartition, MonitoringEventProducer> _monitoringProducers;", "modifier": "", "type": "Map<PhysicalPartition, MonitoringEventProducer>", "declarator": "_monitoringProducers", "var_name": "_monitoringProducers"}, {"original_string": "ControlSourceEventsRequestProcessor _csEventRequestProcessor;", "modifier": "", "type": "ControlSourceEventsRequestProcessor", "declarator": "_csEventRequestProcessor", "var_name": "_csEventRequestProcessor"}, {"original_string": "private boolean _dbPullerStart = false;", "modifier": "private", "type": "boolean", "declarator": "_dbPullerStart = false", "var_name": "_dbPullerStart"}], "methods": [{"identifier": "DatabusRelayMain", "parameters": "()", "modifiers": "public", "return": "", "signature": " DatabusRelayMain()", "full_signature": "public  DatabusRelayMain()", "class_method_signature": "DatabusRelayMain.DatabusRelayMain()", "testcase": false, "constructor": true}, {"identifier": "DatabusRelayMain", "parameters": "(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "modifiers": "public", "return": "", "signature": " DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "full_signature": "public  DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "class_method_signature": "DatabusRelayMain.DatabusRelayMain(HttpRelay.Config config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "testcase": false, "constructor": true}, {"identifier": "DatabusRelayMain", "parameters": "(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "modifiers": "public", "return": "", "signature": " DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "full_signature": "public  DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "class_method_signature": "DatabusRelayMain.DatabusRelayMain(HttpRelay.StaticConfig config,\n\t\t\tPhysicalSourceStaticConfig[] pConfigs)", "testcase": false, "constructor": true}, {"identifier": "setDbPullerStart", "parameters": "(boolean s)", "modifiers": "public", "return": "void", "signature": "void setDbPullerStart(boolean s)", "full_signature": "public void setDbPullerStart(boolean s)", "class_method_signature": "DatabusRelayMain.setDbPullerStart(boolean s)", "testcase": false, "constructor": false}, {"identifier": "getDbPullerStart", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDbPullerStart()", "full_signature": "public boolean getDbPullerStart()", "class_method_signature": "DatabusRelayMain.getDbPullerStart()", "testcase": false, "constructor": false}, {"identifier": "removeOneProducer", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "@Override public", "return": "void", "signature": "void removeOneProducer(PhysicalSourceStaticConfig pConfig)", "full_signature": "@Override public void removeOneProducer(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.removeOneProducer(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "addOneProducer", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "@Override public", "return": "void", "signature": "void addOneProducer(PhysicalSourceStaticConfig pConfig)", "full_signature": "@Override public void addOneProducer(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.addOneProducer(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "initProducers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initProducers()", "full_signature": "public void initProducers()", "class_method_signature": "DatabusRelayMain.initProducers()", "testcase": false, "constructor": false}, {"identifier": "getMaxSCNReaderWriter", "parameters": "(PhysicalSourceStaticConfig pConfig)", "modifiers": "public", "return": "MaxSCNReaderWriter", "signature": "MaxSCNReaderWriter getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "full_signature": "public MaxSCNReaderWriter getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "class_method_signature": "DatabusRelayMain.getMaxSCNReaderWriter(PhysicalSourceStaticConfig pConfig)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "DatabusRelayMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "doStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doStart()", "full_signature": "@Override protected void doStart()", "class_method_signature": "DatabusRelayMain.doStart()", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void pause()", "full_signature": "@Override public void pause()", "class_method_signature": "DatabusRelayMain.pause()", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resume()", "full_signature": "@Override public void resume()", "class_method_signature": "DatabusRelayMain.resume()", "testcase": false, "constructor": false}, {"identifier": "doShutdown", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void doShutdown()", "full_signature": "@Override protected void doShutdown()", "class_method_signature": "DatabusRelayMain.doShutdown()", "testcase": false, "constructor": false}, {"identifier": "getProducers", "parameters": "()", "modifiers": "public", "return": "EventProducer[]", "signature": "EventProducer[] getProducers()", "full_signature": "public EventProducer[] getProducers()", "class_method_signature": "DatabusRelayMain.getProducers()", "testcase": false, "constructor": false}, {"identifier": "getMonitoringProducers", "parameters": "()", "modifiers": "public", "return": "MonitoringEventProducer[]", "signature": "MonitoringEventProducer[] getMonitoringProducers()", "full_signature": "public MonitoringEventProducer[] getMonitoringProducers()", "class_method_signature": "DatabusRelayMain.getMonitoringProducers()", "testcase": false, "constructor": false}, {"identifier": "awaitShutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void awaitShutdown()", "full_signature": "@Override public void awaitShutdown()", "class_method_signature": "DatabusRelayMain.awaitShutdown()", "testcase": false, "constructor": false}], "file": "databus2-relay/databus2-relay-impl/src/main/java/com/linkedin/databus2/relay/DatabusRelayMain.java"}, "focal_method": {"identifier": "pause", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void pause() {\n\t\tfor (Entry<PhysicalPartition, EventProducer> entry : _producers\n\t\t\t\t.entrySet()) {\n\t\t\tEventProducer producer = entry.getValue();\n\n\t\t\tif (null != producer) {\n\t\t\t\tif (producer.isRunning()) {\n\t\t\t\t\tproducer.pause();\n\t\t\t\t\tLOG.info(\"EventProducer :\" + producer.getName()\n\t\t\t\t\t\t\t+ \"  pause sent\");\n\t\t\t\t} else if (producer.isPaused()) {\n\t\t\t\t\tLOG.info(\"EventProducer :\" + producer.getName()\n\t\t\t\t\t\t\t+ \"  already paused\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "void pause()", "full_signature": "@Override public void pause()", "class_method_signature": "DatabusRelayMain.pause()", "testcase": false, "constructor": false, "invocations": ["entrySet", "getValue", "isRunning", "pause", "info", "getName", "isPaused", "info", "getName"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}