{"test_class": {"identifier": "SamplePriorityDeterminingSpanEventListenerTest", "superclass": "extends AbstractRequestMonitorTest", "interfaces": "", "fields": [], "file": "stagemonitor-tracing/src/test/java/org/stagemonitor/tracing/sampling/SamplePriorityDeterminingSpanEventListenerTest.java"}, "test_case": {"identifier": "testSetSamplePrioInPreInterceptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetSamplePrioInPreInterceptor() throws Exception {\n\t\twhen(tracingPlugin.isSampled(any())).thenReturn(true);\n\t\tsamplePriorityDeterminingSpanInterceptor.addPreInterceptor(new PreExecutionSpanInterceptor() {\n\t\t\t@Override\n\t\t\tpublic void interceptReport(PreExecutionInterceptorContext context) {\n\t\t\t\tcontext.shouldNotReport(getClass());\n\t\t\t}\n\t\t});\n\n\t\trequestMonitor.monitor(new MonitoredMethodRequest(configuration,\n\t\t\t\t\"testSetSamplePrioInPreInterceptor\", () -> {\n\t\t}));\n\t\tassertThat(mockTracer.finishedSpans()).hasSize(1);\n\t\tassertThat(mockTracer.finishedSpans().get(0).tags()).containsEntry(Tags.SAMPLING_PRIORITY.getKey(), 0);\n\t}", "signature": "void testSetSamplePrioInPreInterceptor()", "full_signature": "@Test public void testSetSamplePrioInPreInterceptor()", "class_method_signature": "SamplePriorityDeterminingSpanEventListenerTest.testSetSamplePrioInPreInterceptor()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isSampled", "any", "addPreInterceptor", "shouldNotReport", "getClass", "monitor", "hasSize", "assertThat", "finishedSpans", "containsEntry", "assertThat", "tags", "get", "finishedSpans", "getKey"]}, "focal_class": {"identifier": "SamplePriorityDeterminingSpanEventListener", "superclass": "extends StatelessSpanEventListener", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SamplePriorityDeterminingSpanEventListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SamplePriorityDeterminingSpanEventListener.class)", "var_name": "logger"}, {"original_string": "private final Collection<PreExecutionSpanInterceptor> preInterceptors =\n\t\t\tnew CopyOnWriteArrayList<PreExecutionSpanInterceptor>();", "modifier": "private final", "type": "Collection<PreExecutionSpanInterceptor>", "declarator": "preInterceptors =\n\t\t\tnew CopyOnWriteArrayList<PreExecutionSpanInterceptor>()", "var_name": "preInterceptors"}, {"original_string": "private final Collection<PostExecutionSpanInterceptor> postInterceptors =\n\t\t\tnew CopyOnWriteArrayList<PostExecutionSpanInterceptor>();", "modifier": "private final", "type": "Collection<PostExecutionSpanInterceptor>", "declarator": "postInterceptors =\n\t\t\tnew CopyOnWriteArrayList<PostExecutionSpanInterceptor>()", "var_name": "postInterceptors"}, {"original_string": "private final ConfigurationRegistry configuration;", "modifier": "private final", "type": "ConfigurationRegistry", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final TracingPlugin tracingPlugin;", "modifier": "private final", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}], "methods": [{"identifier": "SamplePriorityDeterminingSpanEventListener", "parameters": "(ConfigurationRegistry configuration)", "modifiers": "public", "return": "", "signature": " SamplePriorityDeterminingSpanEventListener(ConfigurationRegistry configuration)", "full_signature": "public  SamplePriorityDeterminingSpanEventListener(ConfigurationRegistry configuration)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.SamplePriorityDeterminingSpanEventListener(ConfigurationRegistry configuration)", "testcase": false, "constructor": true}, {"identifier": "SamplePriorityDeterminingSpanEventListener", "parameters": "(ConfigurationRegistry configuration, Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors, Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "modifiers": "public", "return": "", "signature": " SamplePriorityDeterminingSpanEventListener(ConfigurationRegistry configuration, Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors, Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "full_signature": "public  SamplePriorityDeterminingSpanEventListener(ConfigurationRegistry configuration, Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors, Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.SamplePriorityDeterminingSpanEventListener(ConfigurationRegistry configuration, Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors, Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "testcase": false, "constructor": true}, {"identifier": "registerPreInterceptors", "parameters": "(Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors)", "modifiers": "private", "return": "void", "signature": "void registerPreInterceptors(Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors)", "full_signature": "private void registerPreInterceptors(Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.registerPreInterceptors(Iterable<PreExecutionSpanInterceptor> preExecutionSpanInterceptors)", "testcase": false, "constructor": false}, {"identifier": "registerPostInterceptors", "parameters": "(Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "modifiers": "private", "return": "void", "signature": "void registerPostInterceptors(Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "full_signature": "private void registerPostInterceptors(Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.registerPostInterceptors(Iterable<PostExecutionSpanInterceptor> postExecutionSpanInterceptors)", "testcase": false, "constructor": false}, {"identifier": "onStart", "parameters": "(SpanWrapper spanWrapper)", "modifiers": "@Override public", "return": "void", "signature": "void onStart(SpanWrapper spanWrapper)", "full_signature": "@Override public void onStart(SpanWrapper spanWrapper)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.onStart(SpanWrapper spanWrapper)", "testcase": false, "constructor": false}, {"identifier": "onFinish", "parameters": "(SpanWrapper spanWrapper, String operationName, long durationNanos)", "modifiers": "@Override public", "return": "void", "signature": "void onFinish(SpanWrapper spanWrapper, String operationName, long durationNanos)", "full_signature": "@Override public void onFinish(SpanWrapper spanWrapper, String operationName, long durationNanos)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.onFinish(SpanWrapper spanWrapper, String operationName, long durationNanos)", "testcase": false, "constructor": false}, {"identifier": "addPreInterceptor", "parameters": "(PreExecutionSpanInterceptor interceptor)", "modifiers": "public", "return": "void", "signature": "void addPreInterceptor(PreExecutionSpanInterceptor interceptor)", "full_signature": "public void addPreInterceptor(PreExecutionSpanInterceptor interceptor)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.addPreInterceptor(PreExecutionSpanInterceptor interceptor)", "testcase": false, "constructor": false}, {"identifier": "addPostInterceptor", "parameters": "(PostExecutionSpanInterceptor interceptor)", "modifiers": "public", "return": "void", "signature": "void addPostInterceptor(PostExecutionSpanInterceptor interceptor)", "full_signature": "public void addPostInterceptor(PostExecutionSpanInterceptor interceptor)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.addPostInterceptor(PostExecutionSpanInterceptor interceptor)", "testcase": false, "constructor": false}], "file": "stagemonitor-tracing/src/main/java/org/stagemonitor/tracing/sampling/SamplePriorityDeterminingSpanEventListener.java"}, "focal_method": {"identifier": "addPreInterceptor", "parameters": "(PreExecutionSpanInterceptor interceptor)", "modifiers": "public", "return": "void", "body": "public void addPreInterceptor(PreExecutionSpanInterceptor interceptor) {\n\t\tinterceptor.init(configuration);\n\t\tpreInterceptors.add(interceptor);\n\t}", "signature": "void addPreInterceptor(PreExecutionSpanInterceptor interceptor)", "full_signature": "public void addPreInterceptor(PreExecutionSpanInterceptor interceptor)", "class_method_signature": "SamplePriorityDeterminingSpanEventListener.addPreInterceptor(PreExecutionSpanInterceptor interceptor)", "testcase": false, "constructor": false, "invocations": ["init", "add"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}