{"test_class": {"identifier": "InMemoryConnectorTest", "superclass": "extends WeldTestBase", "interfaces": "", "fields": [], "file": "smallrye-reactive-messaging-in-memory/src/test/java/io/smallrye/reactive/messaging/connectors/InMemoryConnectorTest.java"}, "test_case": {"identifier": "testWithUnknownSink", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testWithUnknownSink() {\n        addBeanClass(MyBeanReceivingString.class);\n        initialize();\n        InMemoryConnector bean = container.getBeanManager().createInstance()\n                .select(InMemoryConnector.class, ConnectorLiteral.of(InMemoryConnector.CONNECTOR)).get();\n        assertThat(bean).isNotNull();\n        bean.sink(\"unknown\");\n    }", "signature": "void testWithUnknownSink()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testWithUnknownSink()", "class_method_signature": "InMemoryConnectorTest.testWithUnknownSink()", "testcase": true, "constructor": false, "invocations": ["addBeanClass", "initialize", "get", "select", "createInstance", "getBeanManager", "of", "isNotNull", "assertThat", "sink"]}, "focal_class": {"identifier": "InMemoryConnector", "superclass": "", "interfaces": "implements IncomingConnectorFactory, OutgoingConnectorFactory", "fields": [{"original_string": "public static final String CONNECTOR = \"smallrye-in-memory\";", "modifier": "public static final", "type": "String", "declarator": "CONNECTOR = \"smallrye-in-memory\"", "var_name": "CONNECTOR"}, {"original_string": "private final Map<String, InMemorySourceImpl<?>> sources = new HashMap<>();", "modifier": "private final", "type": "Map<String, InMemorySourceImpl<?>>", "declarator": "sources = new HashMap<>()", "var_name": "sources"}, {"original_string": "private final Map<String, InMemorySinkImpl<?>> sinks = new HashMap<>();", "modifier": "private final", "type": "Map<String, InMemorySinkImpl<?>>", "declarator": "sinks = new HashMap<>()", "var_name": "sinks"}], "methods": [{"identifier": "switchIncomingChannelsToInMemory", "parameters": "(String... channels)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> switchIncomingChannelsToInMemory(String... channels)", "full_signature": "public static Map<String, String> switchIncomingChannelsToInMemory(String... channels)", "class_method_signature": "InMemoryConnector.switchIncomingChannelsToInMemory(String... channels)", "testcase": false, "constructor": false}, {"identifier": "switchOutgoingChannelsToInMemory", "parameters": "(String... channels)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> switchOutgoingChannelsToInMemory(String... channels)", "full_signature": "public static Map<String, String> switchOutgoingChannelsToInMemory(String... channels)", "class_method_signature": "InMemoryConnector.switchOutgoingChannelsToInMemory(String... channels)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clear()", "full_signature": "public static void clear()", "class_method_signature": "InMemoryConnector.clear()", "testcase": false, "constructor": false}, {"identifier": "getPublisherBuilder", "parameters": "(Config config)", "modifiers": "@Override public", "return": "PublisherBuilder<? extends Message<?>>", "signature": "PublisherBuilder<? extends Message<?>> getPublisherBuilder(Config config)", "full_signature": "@Override public PublisherBuilder<? extends Message<?>> getPublisherBuilder(Config config)", "class_method_signature": "InMemoryConnector.getPublisherBuilder(Config config)", "testcase": false, "constructor": false}, {"identifier": "getSubscriberBuilder", "parameters": "(Config config)", "modifiers": "@Override public", "return": "SubscriberBuilder<? extends Message<?>, Void>", "signature": "SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(Config config)", "full_signature": "@Override public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(Config config)", "class_method_signature": "InMemoryConnector.getSubscriberBuilder(Config config)", "testcase": false, "constructor": false}, {"identifier": "source", "parameters": "(String channel)", "modifiers": "public", "return": "InMemorySource<T>", "signature": "InMemorySource<T> source(String channel)", "full_signature": "public InMemorySource<T> source(String channel)", "class_method_signature": "InMemoryConnector.source(String channel)", "testcase": false, "constructor": false}, {"identifier": "sink", "parameters": "(String channel)", "modifiers": "public", "return": "InMemorySink<T>", "signature": "InMemorySink<T> sink(String channel)", "full_signature": "public InMemorySink<T> sink(String channel)", "class_method_signature": "InMemoryConnector.sink(String channel)", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-in-memory/src/main/java/io/smallrye/reactive/messaging/connectors/InMemoryConnector.java"}, "focal_method": {"identifier": "sink", "parameters": "(String channel)", "modifiers": "public", "return": "InMemorySink<T>", "body": "public <T> InMemorySink<T> sink(String channel) {\n        if (channel == null) {\n            throw ex.illegalArgumentChannelMustNotBeNull();\n        }\n        InMemorySink<?> sink = sinks.get(channel);\n        if (sink == null) {\n            throw ex.illegalArgumentUnknownChannel(channel);\n        }\n        //noinspection unchecked\n        return (InMemorySink<T>) sink;\n    }", "signature": "InMemorySink<T> sink(String channel)", "full_signature": "public InMemorySink<T> sink(String channel)", "class_method_signature": "InMemoryConnector.sink(String channel)", "testcase": false, "constructor": false, "invocations": ["illegalArgumentChannelMustNotBeNull", "get", "illegalArgumentUnknownChannel"]}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}