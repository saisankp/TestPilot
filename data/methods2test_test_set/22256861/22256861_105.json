{"test_class": {"identifier": "SlstrPduStitcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File targetDirectory;", "modifier": "private", "type": "File", "declarator": "targetDirectory", "var_name": "targetDirectory"}], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/SlstrPduStitcherTest.java"}, "test_case": {"identifier": "testCollectFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectFiles() throws IOException, URISyntaxException {\n        List<String> ncFiles = new ArrayList<>();\n        final File[] slstrFiles = TestUtils.getSlstrFiles();\n        for (File slstrFile : slstrFiles) {\n            SlstrPduStitcher.collectFiles(ncFiles, createXmlDocument(new FileInputStream(slstrFile)));\n        }\n\n        assertEquals(3, ncFiles.size());\n        assertEquals(\"met_tx.nc\", ncFiles.get(0));\n        assertEquals(\"viscal.nc\", ncFiles.get(1));\n        assertEquals(\"F1_BT_io.nc\", ncFiles.get(2));\n    }", "signature": "void testCollectFiles()", "full_signature": "@Test public void testCollectFiles()", "class_method_signature": "SlstrPduStitcherTest.testCollectFiles()", "testcase": true, "constructor": false, "invocations": ["getSlstrFiles", "collectFiles", "createXmlDocument", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "SlstrPduStitcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateFormatConverter SLSTR_DATE_FORMAT_CONVERTER =\n            new DateFormatConverter(new SimpleDateFormat(\"yyyyMMdd'T'HHmmss\"));", "modifier": "private static final", "type": "DateFormatConverter", "declarator": "SLSTR_DATE_FORMAT_CONVERTER =\n            new DateFormatConverter(new SimpleDateFormat(\"yyyyMMdd'T'HHmmss\"))", "var_name": "SLSTR_DATE_FORMAT_CONVERTER"}, {"original_string": "private static final ImageSize NULL_IMAGE_SIZE = new ImageSize(\"null\", 0, 0, 0, 0);", "modifier": "private static final", "type": "ImageSize", "declarator": "NULL_IMAGE_SIZE = new ImageSize(\"null\", 0, 0, 0, 0)", "var_name": "NULL_IMAGE_SIZE"}], "methods": [{"identifier": "createStitchedSlstrL1BFile", "parameters": "(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "modifiers": "public static", "return": "File", "signature": "File createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "full_signature": "public static File createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "class_method_signature": "SlstrPduStitcher.createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "createManifestFile", "parameters": "(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "modifiers": "private static", "return": "File", "signature": "File createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "full_signature": "private static File createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "class_method_signature": "SlstrPduStitcher.createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "testcase": false, "constructor": false}, {"identifier": "collectFiles", "parameters": "(List<String> ncFileNames, Document manifestDocument)", "modifiers": "static", "return": "void", "signature": "void collectFiles(List<String> ncFileNames, Document manifestDocument)", "full_signature": "static void collectFiles(List<String> ncFileNames, Document manifestDocument)", "class_method_signature": "SlstrPduStitcher.collectFiles(List<String> ncFileNames, Document manifestDocument)", "testcase": false, "constructor": false}, {"identifier": "createXmlDocument", "parameters": "(InputStream inputStream)", "modifiers": "static", "return": "Document", "signature": "Document createXmlDocument(InputStream inputStream)", "full_signature": "static Document createXmlDocument(InputStream inputStream)", "class_method_signature": "SlstrPduStitcher.createXmlDocument(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "createParentDirectoryNameOfStitchedFile", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "modifiers": "static", "return": "String", "signature": "String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "full_signature": "static String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "class_method_signature": "SlstrPduStitcher.createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "testcase": false, "constructor": false}, {"identifier": "extractStartTime", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions)", "modifiers": "private static", "return": "Date", "signature": "Date extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "full_signature": "private static Date extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "class_method_signature": "SlstrPduStitcher.extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "testcase": false, "constructor": false}, {"identifier": "extractStopTime", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions)", "modifiers": "private static", "return": "Date", "signature": "Date extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "full_signature": "private static Date extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "class_method_signature": "SlstrPduStitcher.extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "testcase": false, "constructor": false}, {"identifier": "decomposeSlstrName", "parameters": "(String slstrName)", "modifiers": "static", "return": "SlstrNameDecomposition", "signature": "SlstrNameDecomposition decomposeSlstrName(String slstrName)", "full_signature": "static SlstrNameDecomposition decomposeSlstrName(String slstrName)", "class_method_signature": "SlstrPduStitcher.decomposeSlstrName(String slstrName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/SlstrPduStitcher.java"}, "focal_method": {"identifier": "collectFiles", "parameters": "(List<String> ncFileNames, Document manifestDocument)", "modifiers": "static", "return": "void", "body": "static void collectFiles(List<String> ncFileNames, Document manifestDocument) {\n        final NodeList fileLocationNodes = manifestDocument.getElementsByTagName(\"fileLocation\");\n        for (int i = 0; i < fileLocationNodes.getLength(); i++) {\n            final String ncFileName = fileLocationNodes.item(i).getAttributes().getNamedItem(\"href\").getNodeValue();\n            if (!ncFileNames.contains(ncFileName)) {\n                ncFileNames.add(ncFileName);\n            }\n        }\n    }", "signature": "void collectFiles(List<String> ncFileNames, Document manifestDocument)", "full_signature": "static void collectFiles(List<String> ncFileNames, Document manifestDocument)", "class_method_signature": "SlstrPduStitcher.collectFiles(List<String> ncFileNames, Document manifestDocument)", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getLength", "getNodeValue", "getNamedItem", "getAttributes", "item", "contains", "add"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}