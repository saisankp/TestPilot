{"test_class": {"identifier": "BigIntegerConverterTest", "superclass": "extends Assert", "interfaces": "", "fields": [], "file": "core/src/test/java/com/chillenious/common/util/convert/converter/BigIntegerConverterTest.java"}, "test_case": {"identifier": "negativeLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void negativeLong() {\n        BigIntegerConverter converter = new BigIntegerConverter();\n        BigInteger bigInteger = converter.convertToObject(\"-1234567890987654321\", Locale.GERMAN);\n        assertEquals(-1234567890987654321L, bigInteger.longValue());\n    }", "signature": "void negativeLong()", "full_signature": "@Test public void negativeLong()", "class_method_signature": "BigIntegerConverterTest.negativeLong()", "testcase": true, "constructor": false, "invocations": ["convertToObject", "assertEquals", "longValue"]}, "focal_class": {"identifier": "BigIntegerConverter", "superclass": "extends AbstractIntegerConverter<BigInteger>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "getTargetType", "parameters": "()", "modifiers": "@Override protected", "return": "Class<BigInteger>", "signature": "Class<BigInteger> getTargetType()", "full_signature": "@Override protected Class<BigInteger> getTargetType()", "class_method_signature": "BigIntegerConverter.getTargetType()", "testcase": false, "constructor": false}, {"identifier": "convertToObject", "parameters": "(final String value, final Locale locale)", "modifiers": "@Override public", "return": "BigInteger", "signature": "BigInteger convertToObject(final String value, final Locale locale)", "full_signature": "@Override public BigInteger convertToObject(final String value, final Locale locale)", "class_method_signature": "BigIntegerConverter.convertToObject(final String value, final Locale locale)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/chillenious/common/util/convert/converter/BigIntegerConverter.java"}, "focal_method": {"identifier": "convertToObject", "parameters": "(final String value, final Locale locale)", "modifiers": "@Override public", "return": "BigInteger", "body": "@Override\n    public BigInteger convertToObject(final String value, final Locale locale) {\n        if (Strings.isEmpty(value)) {\n            return null;\n        }\n\n        final Number number = parse(value, -Double.MAX_VALUE, Double.MAX_VALUE, locale);\n\n        if (number instanceof BigInteger) {\n            return (BigInteger) number;\n        } else if (number instanceof Long) {\n            return BigInteger.valueOf(number.longValue());\n        } else if (number instanceof Integer) {\n            return BigInteger.valueOf(number.intValue());\n        } else {\n            return new BigInteger(value);\n        }\n    }", "signature": "BigInteger convertToObject(final String value, final Locale locale)", "full_signature": "@Override public BigInteger convertToObject(final String value, final Locale locale)", "class_method_signature": "BigIntegerConverter.convertToObject(final String value, final Locale locale)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "parse", "valueOf", "longValue", "valueOf", "intValue"]}, "repository": {"repo_id": 27147147, "url": "https://github.com/chillenious/commons", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 248, "license": "licensed"}}