{"test_class": {"identifier": "SingleContextSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ContextSource contextSourceMock;", "modifier": "private", "type": "ContextSource", "declarator": "contextSourceMock", "var_name": "contextSourceMock"}, {"original_string": "private DirContext dirContextMock;", "modifier": "private", "type": "DirContext", "declarator": "dirContextMock", "var_name": "dirContextMock"}], "file": "core/src/test/java/org/springframework/ldap/core/support/SingleContextSourceTest.java"}, "test_case": {"identifier": "testDoWithSingleContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoWithSingleContext() {\n        when(contextSourceMock.getReadWriteContext()).thenReturn(dirContextMock);\n        verifyNoMoreInteractions(contextSourceMock);\n\n        SingleContextSource.doWithSingleContext(contextSourceMock, new LdapOperationsCallback<Object>() {\n            @Override\n            public Object doWithLdapOperations(LdapOperations operations) {\n                operations.executeReadOnly(new ContextExecutor<Object>() {\n                    @Override\n                    public Object executeWithContext(DirContext ctx) throws NamingException {\n                        Object targetContex = Whitebox.getInternalState(Proxy.getInvocationHandler(ctx), \"target\");\n                        assertThat(targetContex).isSameAs(dirContextMock);\n                        return false;\n                    }\n                });\n\n                // Second operation will have retrieved new DirContext from the SingleContextSource.\n                // It should be the same instance.\n                operations.executeReadOnly(new ContextExecutor<Object>() {\n                    @Override\n                    public Object executeWithContext(DirContext ctx) throws NamingException {\n                        Object targetContex = Whitebox.getInternalState(Proxy.getInvocationHandler(ctx), \"target\");\n                        assertThat(targetContex).isSameAs(dirContextMock);\n                        return false;\n                    }\n                });\n\n                return null;\n            }\n        });\n    }", "signature": "void testDoWithSingleContext()", "full_signature": "@Test public void testDoWithSingleContext()", "class_method_signature": "SingleContextSourceTest.testDoWithSingleContext()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getReadWriteContext", "verifyNoMoreInteractions", "doWithSingleContext", "executeReadOnly", "getInternalState", "getInvocationHandler", "isSameAs", "assertThat", "executeReadOnly", "getInternalState", "getInvocationHandler", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "SingleContextSource", "superclass": "", "interfaces": "implements ContextSource, DisposableBean", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SingleContextSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SingleContextSource.class)", "var_name": "LOG"}, {"original_string": "private static final boolean DONT_USE_READ_ONLY = false;", "modifier": "private static final", "type": "boolean", "declarator": "DONT_USE_READ_ONLY = false", "var_name": "DONT_USE_READ_ONLY"}, {"original_string": "private static final boolean DONT_IGNORE_PARTIAL_RESULT = false;", "modifier": "private static final", "type": "boolean", "declarator": "DONT_IGNORE_PARTIAL_RESULT = false", "var_name": "DONT_IGNORE_PARTIAL_RESULT"}, {"original_string": "private static final boolean DONT_IGNORE_NAME_NOT_FOUND = false;", "modifier": "private static final", "type": "boolean", "declarator": "DONT_IGNORE_NAME_NOT_FOUND = false", "var_name": "DONT_IGNORE_NAME_NOT_FOUND"}, {"original_string": "private final DirContext ctx;", "modifier": "private final", "type": "DirContext", "declarator": "ctx", "var_name": "ctx"}], "methods": [{"identifier": "SingleContextSource", "parameters": "(DirContext ctx)", "modifiers": "public", "return": "", "signature": " SingleContextSource(DirContext ctx)", "full_signature": "public  SingleContextSource(DirContext ctx)", "class_method_signature": "SingleContextSource.SingleContextSource(DirContext ctx)", "testcase": false, "constructor": true}, {"identifier": "getReadOnlyContext", "parameters": "()", "modifiers": "public", "return": "DirContext", "signature": "DirContext getReadOnlyContext()", "full_signature": "public DirContext getReadOnlyContext()", "class_method_signature": "SingleContextSource.getReadOnlyContext()", "testcase": false, "constructor": false}, {"identifier": "getReadWriteContext", "parameters": "()", "modifiers": "public", "return": "DirContext", "signature": "DirContext getReadWriteContext()", "full_signature": "public DirContext getReadWriteContext()", "class_method_signature": "SingleContextSource.getReadWriteContext()", "testcase": false, "constructor": false}, {"identifier": "getNonClosingDirContextProxy", "parameters": "(DirContext context)", "modifiers": "private", "return": "DirContext", "signature": "DirContext getNonClosingDirContextProxy(DirContext context)", "full_signature": "private DirContext getNonClosingDirContextProxy(DirContext context)", "class_method_signature": "SingleContextSource.getNonClosingDirContextProxy(DirContext context)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "(String principal, String credentials)", "modifiers": "public", "return": "DirContext", "signature": "DirContext getContext(String principal, String credentials)", "full_signature": "public DirContext getContext(String principal, String credentials)", "class_method_signature": "SingleContextSource.getContext(String principal, String credentials)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "SingleContextSource.destroy()", "testcase": false, "constructor": false}, {"identifier": "doWithSingleContext", "parameters": "(ContextSource contextSource, LdapOperationsCallback<T> callback)", "modifiers": "public static", "return": "T", "signature": "T doWithSingleContext(ContextSource contextSource, LdapOperationsCallback<T> callback)", "full_signature": "public static T doWithSingleContext(ContextSource contextSource, LdapOperationsCallback<T> callback)", "class_method_signature": "SingleContextSource.doWithSingleContext(ContextSource contextSource, LdapOperationsCallback<T> callback)", "testcase": false, "constructor": false}, {"identifier": "doWithSingleContext", "parameters": "(ContextSource contextSource,\n                                            LdapOperationsCallback<T> callback,\n                                            boolean useReadOnly,\n                                            boolean ignorePartialResultException,\n                                            boolean ignoreNameNotFoundException)", "modifiers": "public static", "return": "T", "signature": "T doWithSingleContext(ContextSource contextSource,\n                                            LdapOperationsCallback<T> callback,\n                                            boolean useReadOnly,\n                                            boolean ignorePartialResultException,\n                                            boolean ignoreNameNotFoundException)", "full_signature": "public static T doWithSingleContext(ContextSource contextSource,\n                                            LdapOperationsCallback<T> callback,\n                                            boolean useReadOnly,\n                                            boolean ignorePartialResultException,\n                                            boolean ignoreNameNotFoundException)", "class_method_signature": "SingleContextSource.doWithSingleContext(ContextSource contextSource,\n                                            LdapOperationsCallback<T> callback,\n                                            boolean useReadOnly,\n                                            boolean ignorePartialResultException,\n                                            boolean ignoreNameNotFoundException)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/core/support/SingleContextSource.java"}, "focal_method": {"identifier": "doWithSingleContext", "parameters": "(ContextSource contextSource, LdapOperationsCallback<T> callback)", "modifiers": "public static", "return": "T", "body": "public static <T> T doWithSingleContext(ContextSource contextSource, LdapOperationsCallback<T> callback) {\n        return doWithSingleContext(contextSource, callback, DONT_USE_READ_ONLY, DONT_IGNORE_PARTIAL_RESULT, DONT_IGNORE_NAME_NOT_FOUND);\n\n    }", "signature": "T doWithSingleContext(ContextSource contextSource, LdapOperationsCallback<T> callback)", "full_signature": "public static T doWithSingleContext(ContextSource contextSource, LdapOperationsCallback<T> callback)", "class_method_signature": "SingleContextSource.doWithSingleContext(ContextSource contextSource, LdapOperationsCallback<T> callback)", "testcase": false, "constructor": false, "invocations": ["doWithSingleContext"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}