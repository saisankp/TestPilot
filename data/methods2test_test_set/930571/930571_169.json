{"test_class": {"identifier": "TemplateManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TemplateManagerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TemplateManagerTest.class)", "var_name": "logger"}, {"original_string": "private TrackingTemplateManager templateManager;", "modifier": "private", "type": "TrackingTemplateManager", "declarator": "templateManager", "var_name": "templateManager"}, {"original_string": "private File templateDir = new File(\"src/test/resources/templates\");", "modifier": "private", "type": "File", "declarator": "templateDir = new File(\"src/test/resources/templates\")", "var_name": "templateDir"}, {"original_string": "private String originalTemplate = \"<html><body>Hello ${Name}</body></html>\";", "modifier": "private", "type": "String", "declarator": "originalTemplate = \"<html><body>Hello ${Name}</body></html>\"", "var_name": "originalTemplate"}], "file": "jbpm-workitems/jbpm-workitems-email/src/test/java/org/jbpm/process/workitem/email/TemplateManagerTest.java"}, "test_case": {"identifier": "testLoadUpdatedTemplateFile", "parameters": "()", "modifiers": "@Test(timeout=30000) public", "return": "void", "body": "@Test(timeout=30000)\n    public void testLoadUpdatedTemplateFile() throws Exception {\n        CountDownLatch loadTemplate = new CountDownLatch(1);        \n        configureTemplateManager(loadTemplate, null);\n        \n        String expected = \"<html><body>Hello John</body></html>\";\n        \n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"Name\", \"John\");\n        \n        String rendered = templateManager.render(\"basic-email\", parameters);\n        assertEquals(expected, rendered);\n        \n        String updatedTemplate = \"<html><body>Hello ${Name}, welcome!</body></html>\";\n                  \n        Files.write(new File(templateDir, \"basic-email.html\").toPath(), updatedTemplate.getBytes());\n        \n        loadTemplate.await();\n        \n        assertThat(templateManager.getCreatedOrUpdated()).hasSize(1).contains(\"basic-email\");\n    }", "signature": "void testLoadUpdatedTemplateFile()", "full_signature": "@Test(timeout=30000) public void testLoadUpdatedTemplateFile()", "class_method_signature": "TemplateManagerTest.testLoadUpdatedTemplateFile()", "testcase": true, "constructor": false, "invocations": ["configureTemplateManager", "put", "render", "assertEquals", "write", "toPath", "getBytes", "await", "contains", "hasSize", "assertThat", "getCreatedOrUpdated"]}, "focal_class": {"identifier": "TemplateManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TemplateManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TemplateManager.class)", "var_name": "logger"}, {"original_string": "private static TemplateManager INSTANCE = new TemplateManager();", "modifier": "private static", "type": "TemplateManager", "declarator": "INSTANCE = new TemplateManager()", "var_name": "INSTANCE"}, {"original_string": "private StringTemplateLoader stringLoader = new StringTemplateLoader();", "modifier": "private", "type": "StringTemplateLoader", "declarator": "stringLoader = new StringTemplateLoader()", "var_name": "stringLoader"}, {"original_string": "private Configuration cfg;", "modifier": "private", "type": "Configuration", "declarator": "cfg", "var_name": "cfg"}, {"original_string": "private String templateDirectory = System.getProperty(\"org.jbpm.email.templates.dir\");", "modifier": "private", "type": "String", "declarator": "templateDirectory = System.getProperty(\"org.jbpm.email.templates.dir\")", "var_name": "templateDirectory"}, {"original_string": "private boolean watcherEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.email.templates.watcher.enabled\", \"false\"));", "modifier": "private", "type": "boolean", "declarator": "watcherEnabled = Boolean.parseBoolean(System.getProperty(\"org.jbpm.email.templates.watcher.enabled\", \"false\"))", "var_name": "watcherEnabled"}, {"original_string": "private Integer watcherInterval = Integer.parseInt(System.getProperty(\"org.jbpm.email.templates.watcher.interval\", \"5\"));", "modifier": "private", "type": "Integer", "declarator": "watcherInterval = Integer.parseInt(System.getProperty(\"org.jbpm.email.templates.watcher.interval\", \"5\"))", "var_name": "watcherInterval"}, {"original_string": "private TemplateDirectoryWatcher watcher;", "modifier": "private", "type": "TemplateDirectoryWatcher", "declarator": "watcher", "var_name": "watcher"}], "methods": [{"identifier": "TemplateManager", "parameters": "()", "modifiers": "protected", "return": "", "signature": " TemplateManager()", "full_signature": "protected  TemplateManager()", "class_method_signature": "TemplateManager.TemplateManager()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "public static", "return": "TemplateManager", "signature": "TemplateManager get()", "full_signature": "public static TemplateManager get()", "class_method_signature": "TemplateManager.get()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public static synchronized", "return": "TemplateManager", "signature": "TemplateManager reset()", "full_signature": "public static synchronized TemplateManager reset()", "class_method_signature": "TemplateManager.reset()", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(String templateName, Map<String, Object> parameters)", "modifiers": "public", "return": "String", "signature": "String render(String templateName, Map<String, Object> parameters)", "full_signature": "public String render(String templateName, Map<String, Object> parameters)", "class_method_signature": "TemplateManager.render(String templateName, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "registerTemplate", "parameters": "(String id, Object template)", "modifiers": "public", "return": "void", "signature": "void registerTemplate(String id, Object template)", "full_signature": "public void registerTemplate(String id, Object template)", "class_method_signature": "TemplateManager.registerTemplate(String id, Object template)", "testcase": false, "constructor": false}, {"identifier": "unregisterTemplate", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void unregisterTemplate(String id)", "full_signature": "public void unregisterTemplate(String id)", "class_method_signature": "TemplateManager.unregisterTemplate(String id)", "testcase": false, "constructor": false}, {"identifier": "loadTemplates", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void loadTemplates()", "full_signature": "protected void loadTemplates()", "class_method_signature": "TemplateManager.loadTemplates()", "testcase": false, "constructor": false}, {"identifier": "loadTemplate", "parameters": "(File templateFile)", "modifiers": "protected", "return": "void", "signature": "void loadTemplate(File templateFile)", "full_signature": "protected void loadTemplate(File templateFile)", "class_method_signature": "TemplateManager.loadTemplate(File templateFile)", "testcase": false, "constructor": false}, {"identifier": "removeTemplate", "parameters": "(File templateFile)", "modifiers": "protected", "return": "void", "signature": "void removeTemplate(File templateFile)", "full_signature": "protected void removeTemplate(File templateFile)", "class_method_signature": "TemplateManager.removeTemplate(File templateFile)", "testcase": false, "constructor": false}, {"identifier": "resolveTemplateId", "parameters": "(File templateFile)", "modifiers": "protected", "return": "String", "signature": "String resolveTemplateId(File templateFile)", "full_signature": "protected String resolveTemplateId(File templateFile)", "class_method_signature": "TemplateManager.resolveTemplateId(File templateFile)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InputStream input)", "modifiers": "protected", "return": "String", "signature": "String read(InputStream input)", "full_signature": "protected String read(InputStream input)", "class_method_signature": "TemplateManager.read(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "TemplateManager.close()", "testcase": false, "constructor": false}], "file": "jbpm-workitems/jbpm-workitems-email/src/main/java/org/jbpm/process/workitem/email/TemplateManager.java"}, "focal_method": {"identifier": "render", "parameters": "(String templateName, Map<String, Object> parameters)", "modifiers": "public", "return": "String", "body": "public String render(String templateName, Map<String, Object> parameters) {\n        StringWriter out = new StringWriter();\n        try {\n            Template template = cfg.getTemplate(templateName);\n            \n            template.process(parameters, out);\n        } catch (Exception e) {\n            throw new IllegalArgumentException(\"Template \" + templateName + \" not found\", e);\n        }\n        return out.toString();\n    }", "signature": "String render(String templateName, Map<String, Object> parameters)", "full_signature": "public String render(String templateName, Map<String, Object> parameters)", "class_method_signature": "TemplateManager.render(String templateName, Map<String, Object> parameters)", "testcase": false, "constructor": false, "invocations": ["getTemplate", "process", "toString"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}