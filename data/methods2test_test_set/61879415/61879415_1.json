{"test_class": {"identifier": "IdentityRoleByIdentityDeduplicationExecutorTest", "superclass": "extends AbstractIntegrationTest", "interfaces": "", "fields": [{"original_string": "@Autowired \n\tprivate IdentityRoleByIdentityDeduplicationExecutor reportExecutor;", "modifier": "@Autowired \n\tprivate", "type": "IdentityRoleByIdentityDeduplicationExecutor", "declarator": "reportExecutor", "var_name": "reportExecutor"}, {"original_string": "@Autowired\n\tprivate ObjectMapper mapper;", "modifier": "@Autowired\n\tprivate", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Autowired\n\tprivate AttachmentManager attachmentManager;", "modifier": "@Autowired\n\tprivate", "type": "AttachmentManager", "declarator": "attachmentManager", "var_name": "attachmentManager"}, {"original_string": "@Autowired\n\tprivate IdentityRoleByIdentityDeduplicationXlsxRenderer xlsxRenderer;", "modifier": "@Autowired\n\tprivate", "type": "IdentityRoleByIdentityDeduplicationXlsxRenderer", "declarator": "xlsxRenderer", "var_name": "xlsxRenderer"}], "file": "Realization/backend/rpt/rpt-impl/src/test/java/eu/bcvsolutions/idm/rpt/report/identity/IdentityRoleByIdentityDeduplicationExecutorTest.java"}, "test_case": {"identifier": "testExecuteReportOneContractMoreRoles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testExecuteReportOneContractMoreRoles() throws JsonParseException, JsonMappingException, IOException {\n\t\tString roleCode = \"test-\" + System.currentTimeMillis(); \n\t\tIdmTreeNodeDto treeNode = getHelper().createTreeNode();\n\t\tIdmIdentityDto identity = getHelper().createIdentity(new GuardedString());\n\t\tIdmIdentityContractDto contact = getHelper().createContract(identity, treeNode);\n\t\t\n\t\tIdmRoleDto role = getHelper().createRole(roleCode);\n\n\t\tgetHelper().createIdentityRole(contact, role);\n\t\tgetHelper().createIdentityRole(contact, role);\n\t\tgetHelper().createIdentityRole(contact, role);\n\t\tgetHelper().createIdentityRole(contact, role);\n\n\t\tRptReportDto report = new RptReportDto(UUID.randomUUID());\n\t\treport.setExecutorName(reportExecutor.getName());\n\t\tIdmFormDto filter = new IdmFormDto();\n\t\tIdmFormDefinitionDto definition = reportExecutor.getFormDefinition();\n\t\tIdmFormValueDto treeNodeParameter = new IdmFormValueDto(definition.getMappedAttributeByCode(IdentityRoleByIdentityDeduplicationExecutor.PARAMETER_TREE_NODE));\n\t\ttreeNodeParameter.setValue(treeNode.getId());\n\t\tfilter.getValues().add(treeNodeParameter);\n\t\tfilter.setFormDefinition(definition.getId());\n\t\treport.setFilter(filter);\n\n\t\treport = reportExecutor.generate(report);\n\t\tAssert.assertNotNull(report.getData());\n\t\tList<RptIdentityRoleByRoleDeduplicationDto> reportItems = mapper.readValue(\n\t\t\t\tattachmentManager.getAttachmentData(report.getData()), \n\t\t\t\tnew TypeReference<List<RptIdentityRoleByRoleDeduplicationDto>>(){});\n\n\t\tassertEquals(1, reportItems.size());\n\t\tRptIdentityRoleByRoleDeduplicationDto item = reportItems.get(0);\n\n\t\tList<RptIdentityRoleByRoleDeduplicationDuplicityDto> duplicities = item.getDuplicity();\n\t\tassertEquals(3, duplicities.size());\n\t\tfor (RptIdentityRoleByRoleDeduplicationDuplicityDto duplicity : duplicities) {\n\t\t\tassertEquals(role.getId(), duplicity.getRole().getId());\n\t\t}\n\n\t\tattachmentManager.deleteAttachments(report);\n\t}", "signature": "void testExecuteReportOneContractMoreRoles()", "full_signature": "@Test public void testExecuteReportOneContractMoreRoles()", "class_method_signature": "IdentityRoleByIdentityDeduplicationExecutorTest.testExecuteReportOneContractMoreRoles()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "createTreeNode", "getHelper", "createIdentity", "getHelper", "createContract", "getHelper", "createRole", "getHelper", "createIdentityRole", "getHelper", "createIdentityRole", "getHelper", "createIdentityRole", "getHelper", "createIdentityRole", "getHelper", "randomUUID", "setExecutorName", "getName", "getFormDefinition", "getMappedAttributeByCode", "setValue", "getId", "add", "getValues", "setFormDefinition", "getId", "setFilter", "generate", "assertNotNull", "getData", "readValue", "getAttachmentData", "getData", "assertEquals", "size", "get", "getDuplicity", "assertEquals", "size", "assertEquals", "getId", "getId", "getRole", "deleteAttachments"]}, "focal_class": {"identifier": "IdentityRoleByIdentityDeduplicationExecutor", "superclass": "extends AbstractReportExecutor", "interfaces": "", "fields": [{"original_string": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory\n\t\t\t.getLogger(IdentityRoleByIdentityDeduplicationExecutor.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = org.slf4j.LoggerFactory\n\t\t\t.getLogger(IdentityRoleByIdentityDeduplicationExecutor.class)", "var_name": "LOG"}, {"original_string": "public static final String REPORT_NAME = \"identity-role-by-identity-deduplication-report\";", "modifier": "public static final", "type": "String", "declarator": "REPORT_NAME = \"identity-role-by-identity-deduplication-report\"", "var_name": "REPORT_NAME"}, {"original_string": "public static final String PARAMETER_TREE_NODE = \"treeNode\";", "modifier": "public static final", "type": "String", "declarator": "PARAMETER_TREE_NODE = \"treeNode\"", "var_name": "PARAMETER_TREE_NODE"}, {"original_string": "@Autowired\n\tprivate IdentityRoleByIdentityDeduplicationBulkAction deduplicationBulkAction;", "modifier": "@Autowired\n\tprivate", "type": "IdentityRoleByIdentityDeduplicationBulkAction", "declarator": "deduplicationBulkAction", "var_name": "deduplicationBulkAction"}, {"original_string": "@Autowired\n\tprivate IdmIdentityService identityService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityService", "declarator": "identityService", "var_name": "identityService"}, {"original_string": "@Autowired\n\tprivate IdmIdentityContractService identityContractService;", "modifier": "@Autowired\n\tprivate", "type": "IdmIdentityContractService", "declarator": "identityContractService", "var_name": "identityContractService"}], "methods": [{"identifier": "generateData", "parameters": "(RptReportDto report)", "modifiers": "@Override protected", "return": "IdmAttachmentDto", "signature": "IdmAttachmentDto generateData(RptReportDto report)", "full_signature": "@Override protected IdmAttachmentDto generateData(RptReportDto report)", "class_method_signature": "IdentityRoleByIdentityDeduplicationExecutor.generateData(RptReportDto report)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "IdentityRoleByIdentityDeduplicationExecutor.getName()", "testcase": false, "constructor": false}, {"identifier": "getFormAttributes", "parameters": "()", "modifiers": "@Override public", "return": "List<IdmFormAttributeDto>", "signature": "List<IdmFormAttributeDto> getFormAttributes()", "full_signature": "@Override public List<IdmFormAttributeDto> getFormAttributes()", "class_method_signature": "IdentityRoleByIdentityDeduplicationExecutor.getFormAttributes()", "testcase": false, "constructor": false}, {"identifier": "getTreeNode", "parameters": "(RptReportDto report)", "modifiers": "private", "return": "UUID", "signature": "UUID getTreeNode(RptReportDto report)", "full_signature": "private UUID getTreeNode(RptReportDto report)", "class_method_signature": "IdentityRoleByIdentityDeduplicationExecutor.getTreeNode(RptReportDto report)", "testcase": false, "constructor": false}, {"identifier": "createRecordForContracts", "parameters": "(IdmIdentityContractDto contract)", "modifiers": "private", "return": "RptIdentityRoleByRoleDeduplicationDto", "signature": "RptIdentityRoleByRoleDeduplicationDto createRecordForContracts(IdmIdentityContractDto contract)", "full_signature": "private RptIdentityRoleByRoleDeduplicationDto createRecordForContracts(IdmIdentityContractDto contract)", "class_method_signature": "IdentityRoleByIdentityDeduplicationExecutor.createRecordForContracts(IdmIdentityContractDto contract)", "testcase": false, "constructor": false}], "file": "Realization/backend/rpt/rpt-impl/src/main/java/eu/bcvsolutions/idm/rpt/report/identity/IdentityRoleByIdentityDeduplicationExecutor.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getName() {\n\t\treturn REPORT_NAME;\n\t}", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "IdentityRoleByIdentityDeduplicationExecutor.getName()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}