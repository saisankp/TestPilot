{"test_class": {"identifier": "X25519Test", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/X25519Test.java"}, "test_case": {"identifier": "testPublicFromPrivateWithRfcTestVectors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPublicFromPrivateWithRfcTestVectors() throws Exception {\n    byte[] out =\n        X25519.publicFromPrivate(\n            TestUtil.hexDecode(\"77076d0a7318a57d3c16c17251b26645df4c2f87ebc0992ab177fba51db92c2a\"));\n    assertEquals(\n        \"8520f0098930a754748b7ddcb43ef75a0dbf3a0d26381af4eba4a98eaa9b4e6a\",\n        TestUtil.hexEncode(out));\n\n    out =\n        X25519.publicFromPrivate(\n            TestUtil.hexDecode(\"5dab087e624a8a4b79e17f8b83800ee66f3bb1292618b6fd1c2f8b27ff88e0eb\"));\n    assertEquals(\n        \"de9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f\",\n        TestUtil.hexEncode(out));\n  }", "signature": "void testPublicFromPrivateWithRfcTestVectors()", "full_signature": "@Test public void testPublicFromPrivateWithRfcTestVectors()", "class_method_signature": "X25519Test.testPublicFromPrivateWithRfcTestVectors()", "testcase": true, "constructor": false, "invocations": ["publicFromPrivate", "hexDecode", "assertEquals", "hexEncode", "publicFromPrivate", "hexDecode", "assertEquals", "hexEncode"]}, "focal_class": {"identifier": "X25519", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generatePrivateKey", "parameters": "()", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "signature": "byte[] generatePrivateKey()", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] generatePrivateKey()", "class_method_signature": "X25519.generatePrivateKey()", "testcase": false, "constructor": false}, {"identifier": "computeSharedSecret", "parameters": "(byte[] privateKey, byte[] peersPublicValue)", "modifiers": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static", "return": "byte[]", "signature": "byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "full_signature": "@SuppressWarnings(\"NarrowingCompoundAssignment\") public static byte[] computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "class_method_signature": "X25519.computeSharedSecret(byte[] privateKey, byte[] peersPublicValue)", "testcase": false, "constructor": false}, {"identifier": "publicFromPrivate", "parameters": "(byte[] privateKey)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] publicFromPrivate(byte[] privateKey)", "full_signature": "public static byte[] publicFromPrivate(byte[] privateKey)", "class_method_signature": "X25519.publicFromPrivate(byte[] privateKey)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/X25519.java"}, "focal_method": {"identifier": "publicFromPrivate", "parameters": "(byte[] privateKey)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] publicFromPrivate(byte[] privateKey) throws InvalidKeyException {\n    if (privateKey.length != Field25519.FIELD_LEN) {\n      throw new InvalidKeyException(\"Private key must have 32 bytes.\");\n    }\n    byte[] base = new byte[Field25519.FIELD_LEN];\n    base[0] = 9;\n    return computeSharedSecret(privateKey, base);\n  }", "signature": "byte[] publicFromPrivate(byte[] privateKey)", "full_signature": "public static byte[] publicFromPrivate(byte[] privateKey)", "class_method_signature": "X25519.publicFromPrivate(byte[] privateKey)", "testcase": false, "constructor": false, "invocations": ["computeSharedSecret"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}