{"test_class": {"identifier": "CTMTopicMapReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private final URILocator locator;", "modifier": "private final", "type": "URILocator", "declarator": "locator", "var_name": "locator"}], "file": "ontopia-engine/src/test/java/net/ontopia/topicmaps/utils/ctm/CTMTopicMapReaderTest.java"}, "test_case": {"identifier": "testReadFromFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReadFromFile() throws IOException {\n    TopicMapIF tm = new CTMTopicMapReader(file).read();\n    Assert.assertNotNull(tm);\n    Assert.assertEquals(1, tm.getTopics().size());\n  }", "signature": "void testReadFromFile()", "full_signature": "@Test public void testReadFromFile()", "class_method_signature": "CTMTopicMapReaderTest.testReadFromFile()", "testcase": true, "constructor": false, "invocations": ["read", "assertNotNull", "assertEquals", "size", "getTopics"]}, "focal_class": {"identifier": "CTMTopicMapReader", "superclass": "extends AbstractTopicMapReader", "interfaces": "", "fields": [], "methods": [{"identifier": "CTMTopicMapReader", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " CTMTopicMapReader(URL url)", "full_signature": "public  CTMTopicMapReader(URL url)", "class_method_signature": "CTMTopicMapReader.CTMTopicMapReader(URL url)", "testcase": false, "constructor": true}, {"identifier": "CTMTopicMapReader", "parameters": "(URL url, LocatorIF base_address)", "modifiers": "public", "return": "", "signature": " CTMTopicMapReader(URL url, LocatorIF base_address)", "full_signature": "public  CTMTopicMapReader(URL url, LocatorIF base_address)", "class_method_signature": "CTMTopicMapReader.CTMTopicMapReader(URL url, LocatorIF base_address)", "testcase": false, "constructor": true}, {"identifier": "CTMTopicMapReader", "parameters": "(Reader reader, LocatorIF base_address)", "modifiers": "public", "return": "", "signature": " CTMTopicMapReader(Reader reader, LocatorIF base_address)", "full_signature": "public  CTMTopicMapReader(Reader reader, LocatorIF base_address)", "class_method_signature": "CTMTopicMapReader.CTMTopicMapReader(Reader reader, LocatorIF base_address)", "testcase": false, "constructor": true}, {"identifier": "CTMTopicMapReader", "parameters": "(InputStream stream, LocatorIF base_address)", "modifiers": "public", "return": "", "signature": " CTMTopicMapReader(InputStream stream, LocatorIF base_address)", "full_signature": "public  CTMTopicMapReader(InputStream stream, LocatorIF base_address)", "class_method_signature": "CTMTopicMapReader.CTMTopicMapReader(InputStream stream, LocatorIF base_address)", "testcase": false, "constructor": true}, {"identifier": "CTMTopicMapReader", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " CTMTopicMapReader(File file)", "full_signature": "public  CTMTopicMapReader(File file)", "class_method_signature": "CTMTopicMapReader.CTMTopicMapReader(File file)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(TopicMapStoreFactoryIF store_factory)", "modifiers": "@Override protected", "return": "TopicMapIF", "signature": "TopicMapIF read(TopicMapStoreFactoryIF store_factory)", "full_signature": "@Override protected TopicMapIF read(TopicMapStoreFactoryIF store_factory)", "class_method_signature": "CTMTopicMapReader.read(TopicMapStoreFactoryIF store_factory)", "testcase": false, "constructor": false}, {"identifier": "makeReader", "parameters": "(InputStream stream, String encoding)", "modifiers": "protected", "return": "Reader", "signature": "Reader makeReader(InputStream stream, String encoding)", "full_signature": "protected Reader makeReader(InputStream stream, String encoding)", "class_method_signature": "CTMTopicMapReader.makeReader(InputStream stream, String encoding)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/topicmaps/utils/ctm/CTMTopicMapReader.java"}, "focal_method": {"identifier": "read", "parameters": "(TopicMapStoreFactoryIF store_factory)", "modifiers": "@Override protected", "return": "TopicMapIF", "body": "@Override\n  protected TopicMapIF read(TopicMapStoreFactoryIF store_factory)\n      throws IOException {\n    TopicMapStoreIF store = store_factory.createStore();\n    TopicMapIF topicmap = store.getTopicMap();\n\n    // Set base address on in-memory store\n    if ((store instanceof net.ontopia.topicmaps.impl.utils.AbstractTopicMapStore) &&\n        store.getBaseAddress() == null)\n      ((net.ontopia.topicmaps.impl.utils.AbstractTopicMapStore)store)\n          .setBaseAddress(getBaseAddress());\n\n    // Parse!\n    try (Reader reader = makeReader((String) null, new CTMEncodingSniffer())) {\n      CTMLexer lexer = new CTMLexer(reader);\n      lexer.setDocuri(getBaseAddress().getAddress());\n      CTMParser parser = new CTMParser(lexer);\n      parser.setBase(getBaseAddress());\n      parser.setTopicMap(topicmap, null);\n      parser.init();\n      parser.topicmap();\n      reader.close();\n    } catch (AntlrWrapException ex) {\n      throw (IOException) ex.getException();\n    } catch (RecognitionException ex) {\n      throw new IOException(\"Lexical error at \" + getBaseAddress().getAddress()\n          + \":\" + ex.line + \":\" + ex.column + \": \"+ ex.getMessage());\n    } catch (TokenStreamRecognitionException e) {\n      RecognitionException ex = e.recog;\n      throw new IOException(\"Lexical error at \" + getBaseAddress().getAddress()\n          + \":\" + ex.line + \":\" + ex.column + \": \"+ ex.getMessage());\n    } catch (TokenStreamIOException ex) {\n      throw ex.io;\n    } catch (TokenStreamException ex) {\n      throw new IOException(\"Lexical error: \" + ex.getMessage());\n    } catch (java.io.CharConversionException e) {\n      throw new IOException(\"Problem decoding character encoding.\"\n                            + \"Did you declare the right encoding?\");\n    }\n\n    ClassInstanceUtils.resolveAssociations2(topicmap);\n    return topicmap;\n  }", "signature": "TopicMapIF read(TopicMapStoreFactoryIF store_factory)", "full_signature": "@Override protected TopicMapIF read(TopicMapStoreFactoryIF store_factory)", "class_method_signature": "CTMTopicMapReader.read(TopicMapStoreFactoryIF store_factory)", "testcase": false, "constructor": false, "invocations": ["createStore", "getTopicMap", "getBaseAddress", "setBaseAddress", "getBaseAddress", "makeReader", "setDocuri", "getAddress", "getBaseAddress", "setBase", "getBaseAddress", "setTopicMap", "init", "topicmap", "close", "getException", "getAddress", "getBaseAddress", "getMessage", "getAddress", "getBaseAddress", "getMessage", "getMessage", "resolveAssociations2"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}