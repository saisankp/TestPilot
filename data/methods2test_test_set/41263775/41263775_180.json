{"test_class": {"identifier": "CompoundQueryTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/index/compound/support/CompoundQueryTest.java"}, "test_case": {"identifier": "testFromAndQueryIfSuitable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromAndQueryIfSuitable() {\n        assertNotNull(CompoundQuery.fromAndQueryIfSuitable(and(equal(Car.DOORS, 5), equal(Car.MANUFACTURER, \"Ford\"))));\n        assertNull(CompoundQuery.fromAndQueryIfSuitable(and(equal(Car.DOORS, 5), in(Car.MANUFACTURER, \"Ford\", \"Honda\"))));\n    }", "signature": "void testFromAndQueryIfSuitable()", "full_signature": "@Test public void testFromAndQueryIfSuitable()", "class_method_signature": "CompoundQueryTest.testFromAndQueryIfSuitable()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "fromAndQueryIfSuitable", "and", "equal", "equal", "assertNull", "fromAndQueryIfSuitable", "and", "equal", "in"]}, "focal_class": {"identifier": "CompoundQuery", "superclass": "", "interfaces": "implements Query<O>", "fields": [{"original_string": "private final And<O> andQuery;", "modifier": "private final", "type": "And<O>", "declarator": "andQuery", "var_name": "andQuery"}, {"original_string": "private final CompoundAttribute<O> compoundAttribute;", "modifier": "private final", "type": "CompoundAttribute<O>", "declarator": "compoundAttribute", "var_name": "compoundAttribute"}], "methods": [{"identifier": "CompoundQuery", "parameters": "(And<O> andQuery, CompoundAttribute<O> compoundAttribute)", "modifiers": "public", "return": "", "signature": " CompoundQuery(And<O> andQuery, CompoundAttribute<O> compoundAttribute)", "full_signature": "public  CompoundQuery(And<O> andQuery, CompoundAttribute<O> compoundAttribute)", "class_method_signature": "CompoundQuery.CompoundQuery(And<O> andQuery, CompoundAttribute<O> compoundAttribute)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(O object, QueryOptions queryOptions)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(O object, QueryOptions queryOptions)", "full_signature": "@Override public boolean matches(O object, QueryOptions queryOptions)", "class_method_signature": "CompoundQuery.matches(O object, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "getAndQuery", "parameters": "()", "modifiers": "public", "return": "And<O>", "signature": "And<O> getAndQuery()", "full_signature": "public And<O> getAndQuery()", "class_method_signature": "CompoundQuery.getAndQuery()", "testcase": false, "constructor": false}, {"identifier": "getCompoundAttribute", "parameters": "()", "modifiers": "public", "return": "CompoundAttribute<O>", "signature": "CompoundAttribute<O> getCompoundAttribute()", "full_signature": "public CompoundAttribute<O> getCompoundAttribute()", "class_method_signature": "CompoundQuery.getCompoundAttribute()", "testcase": false, "constructor": false}, {"identifier": "getCompoundValueTuple", "parameters": "()", "modifiers": "public", "return": "CompoundValueTuple<O>", "signature": "CompoundValueTuple<O> getCompoundValueTuple()", "full_signature": "public CompoundValueTuple<O> getCompoundValueTuple()", "class_method_signature": "CompoundQuery.getCompoundValueTuple()", "testcase": false, "constructor": false}, {"identifier": "fromAndQueryIfSuitable", "parameters": "(And<O> andQuery)", "modifiers": "public static", "return": "CompoundQuery<O>", "signature": "CompoundQuery<O> fromAndQueryIfSuitable(And<O> andQuery)", "full_signature": "public static CompoundQuery<O> fromAndQueryIfSuitable(And<O> andQuery)", "class_method_signature": "CompoundQuery.fromAndQueryIfSuitable(And<O> andQuery)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/compound/support/CompoundQuery.java"}, "focal_method": {"identifier": "fromAndQueryIfSuitable", "parameters": "(And<O> andQuery)", "modifiers": "public static", "return": "CompoundQuery<O>", "body": "public static <O> CompoundQuery<O> fromAndQueryIfSuitable(And<O> andQuery) {\n        if (andQuery.hasLogicalQueries() || andQuery.hasComparativeQueries()) {\n            return null;\n        }\n        List<Attribute<O, ?>> attributeList = new ArrayList<Attribute<O, ?>>(andQuery.getSimpleQueries().size());\n        for (SimpleQuery<O, ?> simpleQuery : andQuery.getSimpleQueries()) {\n            if (!(simpleQuery instanceof Equal)) {\n                return null;\n            }\n            attributeList.add(simpleQuery.getAttribute());\n        }\n        CompoundAttribute<O> compoundAttribute = new CompoundAttribute<O>(attributeList);\n\n        return new CompoundQuery<O>(andQuery, compoundAttribute);\n    }", "signature": "CompoundQuery<O> fromAndQueryIfSuitable(And<O> andQuery)", "full_signature": "public static CompoundQuery<O> fromAndQueryIfSuitable(And<O> andQuery)", "class_method_signature": "CompoundQuery.fromAndQueryIfSuitable(And<O> andQuery)", "testcase": false, "constructor": false, "invocations": ["hasLogicalQueries", "hasComparativeQueries", "size", "getSimpleQueries", "getSimpleQueries", "add", "getAttribute"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}