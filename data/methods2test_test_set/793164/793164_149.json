{"test_class": {"identifier": "FlowPurgerMBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    FlowPurgerMBean flowPurgerMBean;", "modifier": "@Autowired", "type": "FlowPurgerMBean", "declarator": "flowPurgerMBean", "var_name": "flowPurgerMBean"}, {"original_string": "@Autowired\n    private TestTransactionManager testTransactionManager;", "modifier": "@Autowired\n    private", "type": "TestTransactionManager", "declarator": "testTransactionManager", "var_name": "testTransactionManager"}, {"original_string": "@Autowired\n    private FlowRepositoryImpl flowRepository;", "modifier": "@Autowired\n    private", "type": "FlowRepositoryImpl", "declarator": "flowRepository", "var_name": "flowRepository"}, {"original_string": "private FlowFinderCriteria allFlows = new FlowFinderCriteria(new Date(0), null, \"test\");", "modifier": "private", "type": "FlowFinderCriteria", "declarator": "allFlows = new FlowFinderCriteria(new Date(0), null, \"test\")", "var_name": "allFlows"}, {"original_string": "private static final String PURGE_SCHEDULE_EXPRESSION = \"0/2 * * * * ?\";", "modifier": "private static final", "type": "String", "declarator": "PURGE_SCHEDULE_EXPRESSION = \"0/2 * * * * ?\"", "var_name": "PURGE_SCHEDULE_EXPRESSION"}, {"original_string": "private static final long EIGHT_DAYS = TimeUnit.DAYS.toMillis(8);", "modifier": "private static final", "type": "long", "declarator": "EIGHT_DAYS = TimeUnit.DAYS.toMillis(8)", "var_name": "EIGHT_DAYS"}, {"original_string": "private static final long WAIT_TIMEOUT = 5;", "modifier": "private static final", "type": "long", "declarator": "WAIT_TIMEOUT = 5", "var_name": "WAIT_TIMEOUT"}, {"original_string": "private CountDownLatch latch = new CountDownLatch(1);", "modifier": "private", "type": "CountDownLatch", "declarator": "latch = new CountDownLatch(1)", "var_name": "latch"}], "file": "commons/flow/src/test/java/org/openehealth/ipf/commons/flow/jmx/FlowPurgerMBeanTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        persistFlowHistory();\n        assertEquals(6, flowRepository.findFlows(allFlows).size());\n        flowPurgerMBean.getScheduler().getListenerManager().addJobListener(new PurgeJobListener(latch));\n        flowPurgerMBean.setDoNotPurgeErrorFlows(false);\n        flowPurgerMBean.setPurgeFlowsOlderThan(\"9d\");\n        flowPurgerMBean.execute();\n        latch.await(WAIT_TIMEOUT, TimeUnit.SECONDS);        \n        assertEquals(1, flowRepository.findFlows(allFlows).size());\n        flowPurgerMBean.unschedule();\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "FlowPurgerMBeanTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["persistFlowHistory", "assertEquals", "size", "findFlows", "addJobListener", "getListenerManager", "getScheduler", "setDoNotPurgeErrorFlows", "setPurgeFlowsOlderThan", "execute", "await", "assertEquals", "size", "findFlows", "unschedule"]}, "focal_class": {"identifier": "FlowPurgerMBean", "superclass": "", "interfaces": "implements InitializingBean, DisposableBean", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FlowPurgerMBean.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FlowPurgerMBean.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    private FlowManager flowManager;", "modifier": "@Autowired\n    private", "type": "FlowManager", "declarator": "flowManager", "var_name": "flowManager"}, {"original_string": "private String application;", "modifier": "private", "type": "String", "declarator": "application", "var_name": "application"}, {"original_string": "private Scheduler scheduler;", "modifier": "private", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final Map<String, FlowPurgeJob> flowPurgeJobs;", "modifier": "private final", "type": "Map<String, FlowPurgeJob>", "declarator": "flowPurgeJobs", "var_name": "flowPurgeJobs"}], "methods": [{"identifier": "FlowPurgerMBean", "parameters": "()", "modifiers": "public", "return": "", "signature": " FlowPurgerMBean()", "full_signature": "public  FlowPurgerMBean()", "class_method_signature": "FlowPurgerMBean.FlowPurgerMBean()", "testcase": false, "constructor": true}, {"identifier": "getApplication", "parameters": "()", "modifiers": "@ManagedAttribute(description=\"Application name\") public", "return": "String", "signature": "String getApplication()", "full_signature": "@ManagedAttribute(description=\"Application name\") public String getApplication()", "class_method_signature": "FlowPurgerMBean.getApplication()", "testcase": false, "constructor": false}, {"identifier": "setApplication", "parameters": "(String application)", "modifiers": "@ManagedAttribute(description=\"Application name\") public", "return": "void", "signature": "void setApplication(String application)", "full_signature": "@ManagedAttribute(description=\"Application name\") public void setApplication(String application)", "class_method_signature": "FlowPurgerMBean.setApplication(String application)", "testcase": false, "constructor": false}, {"identifier": "getPurgeFlowsOlderThan", "parameters": "()", "modifiers": "@ManagedAttribute(description=\"Purge flows older than given duration \" + \"(e.g. \\\"30d\\\" will purge flows older than 30 days)\") public", "return": "String", "signature": "String getPurgeFlowsOlderThan()", "full_signature": "@ManagedAttribute(description=\"Purge flows older than given duration \" + \"(e.g. \\\"30d\\\" will purge flows older than 30 days)\") public String getPurgeFlowsOlderThan()", "class_method_signature": "FlowPurgerMBean.getPurgeFlowsOlderThan()", "testcase": false, "constructor": false}, {"identifier": "isDoNotPurgeErrorFlows", "parameters": "()", "modifiers": "@ManagedAttribute(description=\"Set to true to exclude ERROR flows from being purged. \" + \"Set to false to purge CLEAN and ERROR flows\") public", "return": "boolean", "signature": "boolean isDoNotPurgeErrorFlows()", "full_signature": "@ManagedAttribute(description=\"Set to true to exclude ERROR flows from being purged. \" + \"Set to false to purge CLEAN and ERROR flows\") public boolean isDoNotPurgeErrorFlows()", "class_method_signature": "FlowPurgerMBean.isDoNotPurgeErrorFlows()", "testcase": false, "constructor": false}, {"identifier": "getPurgeSchedule", "parameters": "()", "modifiers": "@ManagedAttribute(description=\"Cron expression for purge schedule\") public", "return": "String", "signature": "String getPurgeSchedule()", "full_signature": "@ManagedAttribute(description=\"Cron expression for purge schedule\") public String getPurgeSchedule()", "class_method_signature": "FlowPurgerMBean.getPurgeSchedule()", "testcase": false, "constructor": false}, {"identifier": "isPurgeScheduled", "parameters": "()", "modifiers": "@ManagedAttribute(description=\"Purge job status for current application\") public", "return": "boolean", "signature": "boolean isPurgeScheduled()", "full_signature": "@ManagedAttribute(description=\"Purge job status for current application\") public boolean isPurgeScheduled()", "class_method_signature": "FlowPurgerMBean.isPurgeScheduled()", "testcase": false, "constructor": false}, {"identifier": "setPurgeFlowsOlderThan", "parameters": "(String purgeFlowsOlderThan)", "modifiers": "@ManagedAttribute(description=\"Purge flows older than given duration \" + \"(e.g. \\\"30d\\\" will purge flows older than 30 days)\") public", "return": "void", "signature": "void setPurgeFlowsOlderThan(String purgeFlowsOlderThan)", "full_signature": "@ManagedAttribute(description=\"Purge flows older than given duration \" + \"(e.g. \\\"30d\\\" will purge flows older than 30 days)\") public void setPurgeFlowsOlderThan(String purgeFlowsOlderThan)", "class_method_signature": "FlowPurgerMBean.setPurgeFlowsOlderThan(String purgeFlowsOlderThan)", "testcase": false, "constructor": false}, {"identifier": "setDoNotPurgeErrorFlows", "parameters": "(boolean doNotPurgeErrorFlows)", "modifiers": "@ManagedAttribute(description=\"Set to true to exclude ERROR flows from being purged. \" + \"Set to false to purge CLEAN and ERROR flows\") public", "return": "void", "signature": "void setDoNotPurgeErrorFlows(boolean doNotPurgeErrorFlows)", "full_signature": "@ManagedAttribute(description=\"Set to true to exclude ERROR flows from being purged. \" + \"Set to false to purge CLEAN and ERROR flows\") public void setDoNotPurgeErrorFlows(boolean doNotPurgeErrorFlows)", "class_method_signature": "FlowPurgerMBean.setDoNotPurgeErrorFlows(boolean doNotPurgeErrorFlows)", "testcase": false, "constructor": false}, {"identifier": "setPurgeSchedule", "parameters": "(String purgeSchedule)", "modifiers": "@ManagedAttribute(description=\"Cron expression for purge schedule\") public", "return": "void", "signature": "void setPurgeSchedule(String purgeSchedule)", "full_signature": "@ManagedAttribute(description=\"Cron expression for purge schedule\") public void setPurgeSchedule(String purgeSchedule)", "class_method_signature": "FlowPurgerMBean.setPurgeSchedule(String purgeSchedule)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@ManagedOperation(description = \"Executes a purge job once for current application\") public", "return": "void", "signature": "void execute()", "full_signature": "@ManagedOperation(description = \"Executes a purge job once for current application\") public void execute()", "class_method_signature": "FlowPurgerMBean.execute()", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "()", "modifiers": "@ManagedOperation(description = \"Schedules or reschedules a purge job for current application and schedule\") public", "return": "void", "signature": "void schedule()", "full_signature": "@ManagedOperation(description = \"Schedules or reschedules a purge job for current application and schedule\") public void schedule()", "class_method_signature": "FlowPurgerMBean.schedule()", "testcase": false, "constructor": false}, {"identifier": "unschedule", "parameters": "()", "modifiers": "@ManagedOperation(description = \"Unschedules a purge job for current application and schedule\") public", "return": "void", "signature": "void unschedule()", "full_signature": "@ManagedOperation(description = \"Unschedules a purge job for current application and schedule\") public void unschedule()", "class_method_signature": "FlowPurgerMBean.unschedule()", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "@Override public void afterPropertiesSet()", "class_method_signature": "FlowPurgerMBean.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "FlowPurgerMBean.destroy()", "testcase": false, "constructor": false}, {"identifier": "executeJob", "parameters": "(ApplicationConfig config)", "modifiers": "private", "return": "void", "signature": "void executeJob(ApplicationConfig config)", "full_signature": "private void executeJob(ApplicationConfig config)", "class_method_signature": "FlowPurgerMBean.executeJob(ApplicationConfig config)", "testcase": false, "constructor": false}, {"identifier": "scheduleJob", "parameters": "(ApplicationConfig config)", "modifiers": "private", "return": "void", "signature": "void scheduleJob(ApplicationConfig config)", "full_signature": "private void scheduleJob(ApplicationConfig config)", "class_method_signature": "FlowPurgerMBean.scheduleJob(ApplicationConfig config)", "testcase": false, "constructor": false}, {"identifier": "unscheduleJob", "parameters": "(ApplicationConfig config)", "modifiers": "private", "return": "void", "signature": "void unscheduleJob(ApplicationConfig config)", "full_signature": "private void unscheduleJob(ApplicationConfig config)", "class_method_signature": "FlowPurgerMBean.unscheduleJob(ApplicationConfig config)", "testcase": false, "constructor": false}, {"identifier": "initJobs", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initJobs()", "full_signature": "private void initJobs()", "class_method_signature": "FlowPurgerMBean.initJobs()", "testcase": false, "constructor": false}, {"identifier": "formatInput", "parameters": "(String input)", "modifiers": "private static", "return": "String", "signature": "String formatInput(String input)", "full_signature": "private static String formatInput(String input)", "class_method_signature": "FlowPurgerMBean.formatInput(String input)", "testcase": false, "constructor": false}, {"identifier": "getFlowPurgeJob", "parameters": "(ApplicationConfig config)", "modifiers": "private", "return": "FlowPurgeJob", "signature": "FlowPurgeJob getFlowPurgeJob(ApplicationConfig config)", "full_signature": "private FlowPurgeJob getFlowPurgeJob(ApplicationConfig config)", "class_method_signature": "FlowPurgerMBean.getFlowPurgeJob(ApplicationConfig config)", "testcase": false, "constructor": false}, {"identifier": "getScheduler", "parameters": "()", "modifiers": "public", "return": "Scheduler", "signature": "Scheduler getScheduler()", "full_signature": "public Scheduler getScheduler()", "class_method_signature": "FlowPurgerMBean.getScheduler()", "testcase": false, "constructor": false}, {"identifier": "setScheduler", "parameters": "(Scheduler scheduler)", "modifiers": "public", "return": "void", "signature": "void setScheduler(Scheduler scheduler)", "full_signature": "public void setScheduler(Scheduler scheduler)", "class_method_signature": "FlowPurgerMBean.setScheduler(Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerMetaData", "parameters": "()", "modifiers": "@ManagedAttribute(description=\"Schedulers metadata\") public", "return": "Map<String, String>", "signature": "Map<String, String> getSchedulerMetaData()", "full_signature": "@ManagedAttribute(description=\"Schedulers metadata\") public Map<String, String> getSchedulerMetaData()", "class_method_signature": "FlowPurgerMBean.getSchedulerMetaData()", "testcase": false, "constructor": false}], "file": "commons/flow/src/main/java/org/openehealth/ipf/commons/flow/jmx/FlowPurgerMBean.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@ManagedOperation(description = \"Executes a purge job once for current application\") public", "return": "void", "body": "@ManagedOperation(description = \"Executes a purge job once for current application\")\n    public void execute() {\n        executeJob(flowManager.getApplicationConfig(application));\n    }", "signature": "void execute()", "full_signature": "@ManagedOperation(description = \"Executes a purge job once for current application\") public void execute()", "class_method_signature": "FlowPurgerMBean.execute()", "testcase": false, "constructor": false, "invocations": ["executeJob", "getApplicationConfig"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}