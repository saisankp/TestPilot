{"test_class": {"identifier": "WalletManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Rule\n    public RxJavaTestSchedulerRule rule = new RxJavaTestSchedulerRule();", "modifier": "@Rule\n    public", "type": "RxJavaTestSchedulerRule", "declarator": "rule = new RxJavaTestSchedulerRule()", "var_name": "rule"}, {"original_string": "@Mock\n    public NodeManager nodeManager;", "modifier": "@Mock\n    public", "type": "NodeManager", "declarator": "nodeManager", "var_name": "nodeManager"}, {"original_string": "@Mock\n    public Node node;", "modifier": "@Mock\n    public", "type": "Node", "declarator": "node", "var_name": "node"}], "file": "wallet/src/test/java/com/platon/aton/engine/WalletManagerTest.java"}, "test_case": {"identifier": "isWalletAddressExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isWalletAddressExists() {\n        List<Wallet> list = new ArrayList<>();\n\n        Wallet wallet = new Wallet();\n        wallet.setCreateTime(1115448481);\n        wallet.setName(\"001\");\n        wallet.setAddress(\"0xfb1b74328f936973a59620d683e1b1acb487d9e7\");\n        AccountBalance balance = new AccountBalance();\n        balance.setFree(\"10000000084489\");\n        balance.setLock(\"0\");\n        wallet.setAccountBalance(balance);\n        list.add(wallet);\n\n        Wallet wallet2 = new Wallet();\n        wallet2.setCreateTime(1115448485);\n        wallet2.setName(\"002\");\n        wallet2.setAddress(\"0x2e95e3ce0a54951eb9a99152a6d5827872dfb4fd\");\n        AccountBalance balance2 = new AccountBalance();\n        balance2.setFree(\"1000000005655655\");\n        balance2.setLock(\"0\");\n        wallet2.setAccountBalance(balance2);\n        list.add(wallet2);\n\n        Wallet wallet3 = new Wallet();\n        wallet3.setName(\"003\");\n        wallet3.setAddress(\"0xca4b151b0b100ae53c9d78dd136905e681622ee7\");\n        wallet3.setCreateTime(1115448483);\n        AccountBalance balance3 = new AccountBalance();\n        balance3.setFree(\"10000000056556584855\");\n        balance3.setLock(\"0\");\n        wallet3.setAccountBalance(balance3);\n        list.add(wallet3);\n\n\n        Wallet wallet4 = new Wallet();\n        wallet4.setName(\"004\");\n        wallet4.setCreateTime(1115448486);\n        AccountBalance balance4 = new AccountBalance();\n        balance4.setFree(\"1000000001156584855\");\n        balance4.setLock(\"0\");\n        wallet4.setAccountBalance(balance4);\n        list.add(wallet4);\n\n        String address = \"0x2e95e3ce0a54951eb9a99152a6d5827872dfb4fd\";\n\n        boolean isExitAddress = Flowable\n                .fromIterable(list)\n                .map(new Function<Wallet, Boolean>() {\n                    @Override\n                    public Boolean apply(Wallet walletEntity) throws Exception {\n                        return walletEntity.getPrefixAddress().toLowerCase().equalsIgnoreCase(address.toLowerCase());\n                    }\n                })\n                .filter(new Predicate<Boolean>() {\n                    @Override\n                    public boolean test(Boolean aBoolean) throws Exception {\n                        return aBoolean;\n                    }\n                })\n                .firstElement()\n                .defaultIfEmpty(false)\n                .blockingGet();\n\n        Log.d(\"=========\", \"\u5730\u5740\u662f\u5426\u5b58\u5728\" + \"====>\" + isExitAddress);\n\n    }", "signature": "void isWalletAddressExists()", "full_signature": "@Test public void isWalletAddressExists()", "class_method_signature": "WalletManagerTest.isWalletAddressExists()", "testcase": true, "constructor": false, "invocations": ["setCreateTime", "setName", "setAddress", "setFree", "setLock", "setAccountBalance", "add", "setCreateTime", "setName", "setAddress", "setFree", "setLock", "setAccountBalance", "add", "setName", "setAddress", "setCreateTime", "setFree", "setLock", "setAccountBalance", "add", "setName", "setCreateTime", "setFree", "setLock", "setAccountBalance", "add", "blockingGet", "defaultIfEmpty", "firstElement", "filter", "map", "fromIterable", "equalsIgnoreCase", "toLowerCase", "getPrefixAddress", "toLowerCase", "d"]}, "focal_class": {"identifier": "WalletManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int CODE_OK = 0;", "modifier": "public static final", "type": "int", "declarator": "CODE_OK = 0", "var_name": "CODE_OK"}, {"original_string": "public static final int CODE_ERROR_NAME = -1;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_NAME = -1", "var_name": "CODE_ERROR_NAME"}, {"original_string": "public static final int CODE_ERROR_PASSWORD = -2;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_PASSWORD = -2", "var_name": "CODE_ERROR_PASSWORD"}, {"original_string": "public static final int CODE_ERROR_KEYSTORE = -3;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_KEYSTORE = -3", "var_name": "CODE_ERROR_KEYSTORE"}, {"original_string": "public static final int CODE_ERROR_PRIVATEKEY = -4;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_PRIVATEKEY = -4", "var_name": "CODE_ERROR_PRIVATEKEY"}, {"original_string": "public static final int CODE_ERROR_MNEMONIC = -5;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_MNEMONIC = -5", "var_name": "CODE_ERROR_MNEMONIC"}, {"original_string": "public static final int CODE_ERROR_WALLET_EXISTS = -200;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_WALLET_EXISTS = -200", "var_name": "CODE_ERROR_WALLET_EXISTS"}, {"original_string": "public static final int CODE_ERROR_UNKNOW = -999;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_UNKNOW = -999", "var_name": "CODE_ERROR_UNKNOW"}, {"original_string": "private List<Wallet> mWalletList = new ArrayList<>();", "modifier": "private", "type": "List<Wallet>", "declarator": "mWalletList = new ArrayList<>()", "var_name": "mWalletList"}, {"original_string": "public static final int CODE_ERROR_INVALIA_ADDRESS = -5;", "modifier": "public static final", "type": "int", "declarator": "CODE_ERROR_INVALIA_ADDRESS = -5", "var_name": "CODE_ERROR_INVALIA_ADDRESS"}, {"original_string": "private BigDecimal mSumAccountBalance = BigDecimal.ZERO;", "modifier": "private", "type": "BigDecimal", "declarator": "mSumAccountBalance = BigDecimal.ZERO", "var_name": "mSumAccountBalance"}], "methods": [{"identifier": "WalletManager", "parameters": "()", "modifiers": "private", "return": "", "signature": " WalletManager()", "full_signature": "private  WalletManager()", "class_method_signature": "WalletManager.WalletManager()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "WalletManager", "signature": "WalletManager getInstance()", "full_signature": "public static WalletManager getInstance()", "class_method_signature": "WalletManager.getInstance()", "testcase": false, "constructor": false}, {"identifier": "initWalletNet", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initWalletNet()", "full_signature": "public void initWalletNet()", "class_method_signature": "WalletManager.initWalletNet()", "testcase": false, "constructor": false}, {"identifier": "isMainNetWalletAddress", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isMainNetWalletAddress()", "full_signature": "public boolean isMainNetWalletAddress()", "class_method_signature": "WalletManager.isMainNetWalletAddress()", "testcase": false, "constructor": false}, {"identifier": "getSumAccountBalance", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getSumAccountBalance()", "full_signature": "public BigDecimal getSumAccountBalance()", "class_method_signature": "WalletManager.getSumAccountBalance()", "testcase": false, "constructor": false}, {"identifier": "setSumAccountBalance", "parameters": "(BigDecimal sumAccountBalance)", "modifiers": "public", "return": "void", "signature": "void setSumAccountBalance(BigDecimal sumAccountBalance)", "full_signature": "public void setSumAccountBalance(BigDecimal sumAccountBalance)", "class_method_signature": "WalletManager.setSumAccountBalance(BigDecimal sumAccountBalance)", "testcase": false, "constructor": false}, {"identifier": "getSelectedWallet", "parameters": "()", "modifiers": "public", "return": "Wallet", "signature": "Wallet getSelectedWallet()", "full_signature": "public Wallet getSelectedWallet()", "class_method_signature": "WalletManager.getSelectedWallet()", "testcase": false, "constructor": false}, {"identifier": "getSelectedWalletFromWalletList", "parameters": "()", "modifiers": "private", "return": "Wallet", "signature": "Wallet getSelectedWalletFromWalletList()", "full_signature": "private Wallet getSelectedWalletFromWalletList()", "class_method_signature": "WalletManager.getSelectedWalletFromWalletList()", "testcase": false, "constructor": false}, {"identifier": "addAndSelectedWalletStatusNotice", "parameters": "(Wallet selectedWallet)", "modifiers": "public", "return": "void", "signature": "void addAndSelectedWalletStatusNotice(Wallet selectedWallet)", "full_signature": "public void addAndSelectedWalletStatusNotice(Wallet selectedWallet)", "class_method_signature": "WalletManager.addAndSelectedWalletStatusNotice(Wallet selectedWallet)", "testcase": false, "constructor": false}, {"identifier": "setWalletList", "parameters": "(List<Wallet> walletList)", "modifiers": "public", "return": "void", "signature": "void setWalletList(List<Wallet> walletList)", "full_signature": "public void setWalletList(List<Wallet> walletList)", "class_method_signature": "WalletManager.setWalletList(List<Wallet> walletList)", "testcase": false, "constructor": false}, {"identifier": "getSelectedWalletAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSelectedWalletAddress()", "full_signature": "public String getSelectedWalletAddress()", "class_method_signature": "WalletManager.getSelectedWalletAddress()", "testcase": false, "constructor": false}, {"identifier": "perInit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void perInit()", "full_signature": "public void perInit()", "class_method_signature": "WalletManager.perInit()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "WalletManager.init()", "testcase": false, "constructor": false}, {"identifier": "getWalletListFromDB", "parameters": "()", "modifiers": "public", "return": "Single<List<Wallet>>", "signature": "Single<List<Wallet>> getWalletListFromDB()", "full_signature": "public Single<List<Wallet>> getWalletListFromDB()", "class_method_signature": "WalletManager.getWalletListFromDB()", "testcase": false, "constructor": false}, {"identifier": "getWalletInfoListByOrdinaryAndSubWallet", "parameters": "()", "modifiers": "public", "return": "Single<List<Wallet>>", "signature": "Single<List<Wallet>> getWalletInfoListByOrdinaryAndSubWallet()", "full_signature": "public Single<List<Wallet>> getWalletInfoListByOrdinaryAndSubWallet()", "class_method_signature": "WalletManager.getWalletInfoListByOrdinaryAndSubWallet()", "testcase": false, "constructor": false}, {"identifier": "getWalletListFromDBByOrdinaryAndHD", "parameters": "()", "modifiers": "public", "return": "Single<List<Wallet>>", "signature": "Single<List<Wallet>> getWalletListFromDBByOrdinaryAndHD()", "full_signature": "public Single<List<Wallet>> getWalletListFromDBByOrdinaryAndHD()", "class_method_signature": "WalletManager.getWalletListFromDBByOrdinaryAndHD()", "testcase": false, "constructor": false}, {"identifier": "getHDWalletListDBByParentId", "parameters": "(String parendId)", "modifiers": "public", "return": "Single<List<Wallet>>", "signature": "Single<List<Wallet>> getHDWalletListDBByParentId(String parendId)", "full_signature": "public Single<List<Wallet>> getHDWalletListDBByParentId(String parendId)", "class_method_signature": "WalletManager.getHDWalletListDBByParentId(String parendId)", "testcase": false, "constructor": false}, {"identifier": "getWalletInfoByUuid", "parameters": "(String uuid)", "modifiers": "public", "return": "Wallet", "signature": "Wallet getWalletInfoByUuid(String uuid)", "full_signature": "public Wallet getWalletInfoByUuid(String uuid)", "class_method_signature": "WalletManager.getWalletInfoByUuid(String uuid)", "testcase": false, "constructor": false}, {"identifier": "getWalletInfoByAddress", "parameters": "(String address)", "modifiers": "public", "return": "Wallet", "signature": "Wallet getWalletInfoByAddress(String address)", "full_signature": "public Wallet getWalletInfoByAddress(String address)", "class_method_signature": "WalletManager.getWalletInfoByAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "getTransactionWalletData", "parameters": "()", "modifiers": "public", "return": "List<TransactionWallet>", "signature": "List<TransactionWallet> getTransactionWalletData()", "full_signature": "public List<TransactionWallet> getTransactionWalletData()", "class_method_signature": "WalletManager.getTransactionWalletData()", "testcase": false, "constructor": false}, {"identifier": "getWalletInfoListByOrdinaryAndSubWalletNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWalletInfoListByOrdinaryAndSubWalletNum()", "full_signature": "public int getWalletInfoListByOrdinaryAndSubWalletNum()", "class_method_signature": "WalletManager.getWalletInfoListByOrdinaryAndSubWalletNum()", "testcase": false, "constructor": false}, {"identifier": "getWalletListByOrdinaryAndHD", "parameters": "()", "modifiers": "public", "return": "List<Wallet>", "signature": "List<Wallet> getWalletListByOrdinaryAndHD()", "full_signature": "public List<Wallet> getWalletListByOrdinaryAndHD()", "class_method_signature": "WalletManager.getWalletListByOrdinaryAndHD()", "testcase": false, "constructor": false}, {"identifier": "getHDWalletListByParentId", "parameters": "(String parentId)", "modifiers": "public", "return": "List<Wallet>", "signature": "List<Wallet> getHDWalletListByParentId(String parentId)", "full_signature": "public List<Wallet> getHDWalletListByParentId(String parentId)", "class_method_signature": "WalletManager.getHDWalletListByParentId(String parentId)", "testcase": false, "constructor": false}, {"identifier": "getMnemonicByUuid", "parameters": "(String uuid)", "modifiers": "public", "return": "String", "signature": "String getMnemonicByUuid(String uuid)", "full_signature": "public String getMnemonicByUuid(String uuid)", "class_method_signature": "WalletManager.getMnemonicByUuid(String uuid)", "testcase": false, "constructor": false}, {"identifier": "getWalletListByAddressAndNameAndType", "parameters": "(@WalletTypeSearch int walletType,String name,String address)", "modifiers": "public", "return": "List<Wallet>", "signature": "List<Wallet> getWalletListByAddressAndNameAndType(@WalletTypeSearch int walletType,String name,String address)", "full_signature": "public List<Wallet> getWalletListByAddressAndNameAndType(@WalletTypeSearch int walletType,String name,String address)", "class_method_signature": "WalletManager.getWalletListByAddressAndNameAndType(@WalletTypeSearch int walletType,String name,String address)", "testcase": false, "constructor": false}, {"identifier": "addWallet", "parameters": "(Wallet wallet)", "modifiers": "public", "return": "void", "signature": "void addWallet(Wallet wallet)", "full_signature": "public void addWallet(Wallet wallet)", "class_method_signature": "WalletManager.addWallet(Wallet wallet)", "testcase": false, "constructor": false}, {"identifier": "updateAccountBalance", "parameters": "(AccountBalance accountBalance)", "modifiers": "public", "return": "void", "signature": "void updateAccountBalance(AccountBalance accountBalance)", "full_signature": "public void updateAccountBalance(AccountBalance accountBalance)", "class_method_signature": "WalletManager.updateAccountBalance(AccountBalance accountBalance)", "testcase": false, "constructor": false}, {"identifier": "updateSubWalletIsShowByUuid", "parameters": "(Wallet oldWallet, Wallet newWallet)", "modifiers": "public", "return": "boolean", "signature": "boolean updateSubWalletIsShowByUuid(Wallet oldWallet, Wallet newWallet)", "full_signature": "public boolean updateSubWalletIsShowByUuid(Wallet oldWallet, Wallet newWallet)", "class_method_signature": "WalletManager.updateSubWalletIsShowByUuid(Wallet oldWallet, Wallet newWallet)", "testcase": false, "constructor": false}, {"identifier": "updateDBSelectedWalletByUuid", "parameters": "(String uuid)", "modifiers": "public", "return": "Boolean", "signature": "Boolean updateDBSelectedWalletByUuid(String uuid)", "full_signature": "public Boolean updateDBSelectedWalletByUuid(String uuid)", "class_method_signature": "WalletManager.updateDBSelectedWalletByUuid(String uuid)", "testcase": false, "constructor": false}, {"identifier": "updateDBWalletSortIndexByUuid", "parameters": "(Wallet wallet, int sortIndex)", "modifiers": "public", "return": "Boolean", "signature": "Boolean updateDBWalletSortIndexByUuid(Wallet wallet, int sortIndex)", "full_signature": "public Boolean updateDBWalletSortIndexByUuid(Wallet wallet, int sortIndex)", "class_method_signature": "WalletManager.updateDBWalletSortIndexByUuid(Wallet wallet, int sortIndex)", "testcase": false, "constructor": false}, {"identifier": "getAccountBalance", "parameters": "(String address)", "modifiers": "public", "return": "AccountBalance", "signature": "AccountBalance getAccountBalance(String address)", "full_signature": "public AccountBalance getAccountBalance(String address)", "class_method_signature": "WalletManager.getAccountBalance(String address)", "testcase": false, "constructor": false}, {"identifier": "getAddressListFromDB", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAddressListFromDB()", "full_signature": "public List<String> getAddressListFromDB()", "class_method_signature": "WalletManager.getAddressListFromDB()", "testcase": false, "constructor": false}, {"identifier": "getAddressList", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAddressList()", "full_signature": "public List<String> getAddressList()", "class_method_signature": "WalletManager.getAddressList()", "testcase": false, "constructor": false}, {"identifier": "getWalletNameFromAddress", "parameters": "(String address)", "modifiers": "public", "return": "Single<String>", "signature": "Single<String> getWalletNameFromAddress(String address)", "full_signature": "public Single<String> getWalletNameFromAddress(String address)", "class_method_signature": "WalletManager.getWalletNameFromAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "isObservedWallet", "parameters": "(String walletAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean isObservedWallet(String walletAddress)", "full_signature": "public boolean isObservedWallet(String walletAddress)", "class_method_signature": "WalletManager.isObservedWallet(String walletAddress)", "testcase": false, "constructor": false}, {"identifier": "getWalletNameByWalletAddress", "parameters": "(String walletAddress)", "modifiers": "public", "return": "String", "signature": "String getWalletNameByWalletAddress(String walletAddress)", "full_signature": "public String getWalletNameByWalletAddress(String walletAddress)", "class_method_signature": "WalletManager.getWalletNameByWalletAddress(String walletAddress)", "testcase": false, "constructor": false}, {"identifier": "getWalletIconByWalletAddress", "parameters": "(String walletAddress)", "modifiers": "public", "return": "String", "signature": "String getWalletIconByWalletAddress(String walletAddress)", "full_signature": "public String getWalletIconByWalletAddress(String walletAddress)", "class_method_signature": "WalletManager.getWalletIconByWalletAddress(String walletAddress)", "testcase": false, "constructor": false}, {"identifier": "getWalletList", "parameters": "()", "modifiers": "public", "return": "List<Wallet>", "signature": "List<Wallet> getWalletList()", "full_signature": "public List<Wallet> getWalletList()", "class_method_signature": "WalletManager.getWalletList()", "testcase": false, "constructor": false}, {"identifier": "generateMnemonic", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateMnemonic()", "full_signature": "public String generateMnemonic()", "class_method_signature": "WalletManager.generateMnemonic()", "testcase": false, "constructor": false}, {"identifier": "exportPrivateKey", "parameters": "(String mnemonic)", "modifiers": "public", "return": "String", "signature": "String exportPrivateKey(String mnemonic)", "full_signature": "public String exportPrivateKey(String mnemonic)", "class_method_signature": "WalletManager.exportPrivateKey(String mnemonic)", "testcase": false, "constructor": false}, {"identifier": "isExistSelectedWallet", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isExistSelectedWallet()", "full_signature": "private boolean isExistSelectedWallet()", "class_method_signature": "WalletManager.isExistSelectedWallet()", "testcase": false, "constructor": false}, {"identifier": "createMnemonic", "parameters": "()", "modifiers": "private", "return": "Single<String>", "signature": "Single<String> createMnemonic()", "full_signature": "private Single<String> createMnemonic()", "class_method_signature": "WalletManager.createMnemonic()", "testcase": false, "constructor": false}, {"identifier": "createWallet", "parameters": "(String name, String password)", "modifiers": "public", "return": "Single<Wallet>", "signature": "Single<Wallet> createWallet(String name, String password)", "full_signature": "public Single<Wallet> createWallet(String name, String password)", "class_method_signature": "WalletManager.createWallet(String name, String password)", "testcase": false, "constructor": false}, {"identifier": "createWalletList", "parameters": "(String name, String password)", "modifiers": "public", "return": "Single<List<Wallet>>", "signature": "Single<List<Wallet>> createWalletList(String name, String password)", "full_signature": "public Single<List<Wallet>> createWalletList(String name, String password)", "class_method_signature": "WalletManager.createWalletList(String name, String password)", "testcase": false, "constructor": false}, {"identifier": "importKeystore", "parameters": "(String store, String name, String password)", "modifiers": "public", "return": "int", "signature": "int importKeystore(String store, String name, String password)", "full_signature": "public int importKeystore(String store, String name, String password)", "class_method_signature": "WalletManager.importKeystore(String store, String name, String password)", "testcase": false, "constructor": false}, {"identifier": "importWalletAddress", "parameters": "(String walletAddress)", "modifiers": "public", "return": "int", "signature": "int importWalletAddress(String walletAddress)", "full_signature": "public int importWalletAddress(String walletAddress)", "class_method_signature": "WalletManager.importWalletAddress(String walletAddress)", "testcase": false, "constructor": false}, {"identifier": "importPrivateKey", "parameters": "(String privateKey, String name, String password)", "modifiers": "public", "return": "int", "signature": "int importPrivateKey(String privateKey, String name, String password)", "full_signature": "public int importPrivateKey(String privateKey, String name, String password)", "class_method_signature": "WalletManager.importPrivateKey(String privateKey, String name, String password)", "testcase": false, "constructor": false}, {"identifier": "importMnemonicGenerateWallet", "parameters": "(String mnemonic, String name, String password, int... index)", "modifiers": "public", "return": "Single<Wallet>", "signature": "Single<Wallet> importMnemonicGenerateWallet(String mnemonic, String name, String password, int... index)", "full_signature": "public Single<Wallet> importMnemonicGenerateWallet(String mnemonic, String name, String password, int... index)", "class_method_signature": "WalletManager.importMnemonicGenerateWallet(String mnemonic, String name, String password, int... index)", "testcase": false, "constructor": false}, {"identifier": "importMnemonic", "parameters": "(String mnemonic, String name, String password)", "modifiers": "private", "return": "Single<Wallet>", "signature": "Single<Wallet> importMnemonic(String mnemonic, String name, String password)", "full_signature": "private Single<Wallet> importMnemonic(String mnemonic, String name, String password)", "class_method_signature": "WalletManager.importMnemonic(String mnemonic, String name, String password)", "testcase": false, "constructor": false}, {"identifier": "importMnemonicWalletList", "parameters": "(String mnemonic, String name, String password)", "modifiers": "private", "return": "Single<List<Wallet>>", "signature": "Single<List<Wallet>> importMnemonicWalletList(String mnemonic, String name, String password)", "full_signature": "private Single<List<Wallet>> importMnemonicWalletList(String mnemonic, String name, String password)", "class_method_signature": "WalletManager.importMnemonicWalletList(String mnemonic, String name, String password)", "testcase": false, "constructor": false}, {"identifier": "importMnemonic", "parameters": "(String mnemonic, String name, String password, @WalletType int walletType)", "modifiers": "public", "return": "int", "signature": "int importMnemonic(String mnemonic, String name, String password, @WalletType int walletType)", "full_signature": "public int importMnemonic(String mnemonic, String name, String password, @WalletType int walletType)", "class_method_signature": "WalletManager.importMnemonic(String mnemonic, String name, String password, @WalletType int walletType)", "testcase": false, "constructor": false}, {"identifier": "updateWalletName", "parameters": "(Wallet wallet, String newName)", "modifiers": "public", "return": "boolean", "signature": "boolean updateWalletName(Wallet wallet, String newName)", "full_signature": "public boolean updateWalletName(Wallet wallet, String newName)", "class_method_signature": "WalletManager.updateWalletName(Wallet wallet, String newName)", "testcase": false, "constructor": false}, {"identifier": "updateBackedUpWithUuid", "parameters": "(Wallet wallet, boolean backedUp)", "modifiers": "public", "return": "boolean", "signature": "boolean updateBackedUpWithUuid(Wallet wallet, boolean backedUp)", "full_signature": "public boolean updateBackedUpWithUuid(Wallet wallet, boolean backedUp)", "class_method_signature": "WalletManager.updateBackedUpWithUuid(Wallet wallet, boolean backedUp)", "testcase": false, "constructor": false}, {"identifier": "updateWalletBackedUpPromptWithUUID", "parameters": "(String uuid, boolean isBackedUp)", "modifiers": "public", "return": "void", "signature": "void updateWalletBackedUpPromptWithUUID(String uuid, boolean isBackedUp)", "full_signature": "public void updateWalletBackedUpPromptWithUUID(String uuid, boolean isBackedUp)", "class_method_signature": "WalletManager.updateWalletBackedUpPromptWithUUID(String uuid, boolean isBackedUp)", "testcase": false, "constructor": false}, {"identifier": "getWalletByAddress", "parameters": "(String address)", "modifiers": "public", "return": "Wallet", "signature": "Wallet getWalletByAddress(String address)", "full_signature": "public Wallet getWalletByAddress(String address)", "class_method_signature": "WalletManager.getWalletByAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "deleteWallet", "parameters": "(Wallet wallet)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteWallet(Wallet wallet)", "full_signature": "public boolean deleteWallet(Wallet wallet)", "class_method_signature": "WalletManager.deleteWallet(Wallet wallet)", "testcase": false, "constructor": false}, {"identifier": "deleteBatchWallet", "parameters": "(Wallet rootWallet)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteBatchWallet(Wallet rootWallet)", "full_signature": "public boolean deleteBatchWallet(Wallet rootWallet)", "class_method_signature": "WalletManager.deleteBatchWallet(Wallet rootWallet)", "testcase": false, "constructor": false}, {"identifier": "isValidWallet", "parameters": "(Wallet walletEntity, String password)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidWallet(Wallet walletEntity, String password)", "full_signature": "public boolean isValidWallet(Wallet walletEntity, String password)", "class_method_signature": "WalletManager.isValidWallet(Wallet walletEntity, String password)", "testcase": false, "constructor": false}, {"identifier": "isWalletNameExistsFromDB", "parameters": "(String walletName)", "modifiers": "public", "return": "boolean", "signature": "boolean isWalletNameExistsFromDB(String walletName)", "full_signature": "public boolean isWalletNameExistsFromDB(String walletName)", "class_method_signature": "WalletManager.isWalletNameExistsFromDB(String walletName)", "testcase": false, "constructor": false}, {"identifier": "isWalletNameExists", "parameters": "(String walletName)", "modifiers": "public", "return": "boolean", "signature": "boolean isWalletNameExists(String walletName)", "full_signature": "public boolean isWalletNameExists(String walletName)", "class_method_signature": "WalletManager.isWalletNameExists(String walletName)", "testcase": false, "constructor": false}, {"identifier": "isWalletAddressExists", "parameters": "(String prefixAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean isWalletAddressExists(String prefixAddress)", "full_signature": "public boolean isWalletAddressExists(String prefixAddress)", "class_method_signature": "WalletManager.isWalletAddressExists(String prefixAddress)", "testcase": false, "constructor": false}, {"identifier": "getAccountBalance", "parameters": "()", "modifiers": "public", "return": "Observable<BigDecimal>", "signature": "Observable<BigDecimal> getAccountBalance()", "full_signature": "public Observable<BigDecimal> getAccountBalance()", "class_method_signature": "WalletManager.getAccountBalance()", "testcase": false, "constructor": false}, {"identifier": "getPositionByAddress", "parameters": "(String address)", "modifiers": "public", "return": "int", "signature": "int getPositionByAddress(String address)", "full_signature": "public int getPositionByAddress(String address)", "class_method_signature": "WalletManager.getPositionByAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "getTotal", "parameters": "()", "modifiers": "public", "return": "Observable<BigDecimal>", "signature": "Observable<BigDecimal> getTotal()", "full_signature": "public Observable<BigDecimal> getTotal()", "class_method_signature": "WalletManager.getTotal()", "testcase": false, "constructor": false}, {"identifier": "getFirstSortedWallet", "parameters": "()", "modifiers": "public", "return": "Wallet", "signature": "Wallet getFirstSortedWallet()", "full_signature": "public Wallet getFirstSortedWallet()", "class_method_signature": "WalletManager.getFirstSortedWallet()", "testcase": false, "constructor": false}, {"identifier": "getWalletByBalanceBiggerThanZero", "parameters": "()", "modifiers": "private", "return": "Wallet", "signature": "Wallet getWalletByBalanceBiggerThanZero()", "full_signature": "private Wallet getWalletByBalanceBiggerThanZero()", "class_method_signature": "WalletManager.getWalletByBalanceBiggerThanZero()", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/engine/WalletManager.java"}, "focal_method": {"identifier": "isWalletAddressExists", "parameters": "(String prefixAddress)", "modifiers": "public", "return": "boolean", "body": "public boolean isWalletAddressExists(String prefixAddress) {\n\n        boolean isCacheExists = false;\n        if (TextUtils.isEmpty(prefixAddress)) {\n            return false;\n        }\n\n        if (mWalletList == null || mWalletList.isEmpty()) {\n            return false;\n        }\n\n        for (Wallet walletEntity : mWalletList) {\n            if (walletEntity.getPrefixAddress().toLowerCase().equals(prefixAddress.toLowerCase())) {\n                isCacheExists = true;\n                return true;\n            }\n        }\n\n        if(!isCacheExists){\n            Wallet wallet = WalletManager.getInstance().getWalletInfoByAddress(prefixAddress);\n           if(wallet != null && (wallet.getPrefixAddress() != null && !wallet.getPrefixAddress().equals(\"\")) &&\n              wallet.getPrefixAddress().equals(prefixAddress)){\n\n               return true;\n           }\n        }\n        return false;\n\n\n/*\n        if (mWalletList == null || mWalletList.isEmpty()) {\n            return false;\n        }\n        return Flowable\n                .fromIterable(mWalletList)\n                .map(new Function<Wallet, Boolean>() {\n                    @Override\n                    public Boolean apply(Wallet walletEntity) throws Exception {\n                        return walletEntity.getPrefixAddress().toLowerCase().equalsIgnoreCase(prefixAddress.toLowerCase());\n                    }\n                })\n                .filter(new Predicate<Boolean>() {\n                    @Override\n                    public boolean test(Boolean aBoolean) throws Exception {\n                        return aBoolean;\n                    }\n                })\n                .firstElement()\n                .defaultIfEmpty(false)\n                .blockingGet();*/\n\n    }", "signature": "boolean isWalletAddressExists(String prefixAddress)", "full_signature": "public boolean isWalletAddressExists(String prefixAddress)", "class_method_signature": "WalletManager.isWalletAddressExists(String prefixAddress)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "equals", "toLowerCase", "getPrefixAddress", "toLowerCase", "getWalletInfoByAddress", "getInstance", "getPrefixAddress", "equals", "getPrefixAddress", "equals", "getPrefixAddress"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}