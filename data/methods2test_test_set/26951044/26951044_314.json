{"test_class": {"identifier": "EnumConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EnumConverter<RoundingMode> testConverter = new EnumConverter<>(RoundingMode.class);", "modifier": "private final", "type": "EnumConverter<RoundingMode>", "declarator": "testConverter = new EnumConverter<>(RoundingMode.class)", "var_name": "testConverter"}, {"original_string": "private final ConversionContext DUMMY_CONTEXT = new ConversionContext.Builder(\"someKey\", TypeLiteral.of(Enum.class))\n            .build();", "modifier": "private final", "type": "ConversionContext", "declarator": "DUMMY_CONTEXT = new ConversionContext.Builder(\"someKey\", TypeLiteral.of(Enum.class))\n            .build()", "var_name": "DUMMY_CONTEXT"}], "file": "code/spi-support/src/test/java/org/apache/tamaya/spisupport/EnumConverterTest.java"}, "test_case": {"identifier": "testConversionWithMixedCasing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConversionWithMixedCasing() {\n        ConversionContext ctx = new ConversionContext.Builder(TypeLiteral.of(RoundingMode.class)).build();\n        for (String input : Arrays.asList(RoundingMode.CEILING.toString(), \"ceiling\", \"CeiLinG\")) {\n            assertThat(RoundingMode.CEILING).isEqualTo(testConverter.convert(input, ctx));\n        }\n    }", "signature": "void testConversionWithMixedCasing()", "full_signature": "@Test public void testConversionWithMixedCasing()", "class_method_signature": "EnumConverterTest.testConversionWithMixedCasing()", "testcase": true, "constructor": false, "invocations": ["build", "of", "asList", "toString", "isEqualTo", "assertThat", "convert"]}, "focal_class": {"identifier": "EnumConverter", "superclass": "", "interfaces": "implements PropertyConverter<T>", "fields": [{"original_string": "private final Logger LOG = Logger.getLogger(EnumConverter.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "LOG = Logger.getLogger(EnumConverter.class.getName())", "var_name": "LOG"}, {"original_string": "private Class<T> enumType;", "modifier": "private", "type": "Class<T>", "declarator": "enumType", "var_name": "enumType"}, {"original_string": "private Method factory;", "modifier": "private", "type": "Method", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "EnumConverter", "parameters": "(Class<T> enumType)", "modifiers": "public", "return": "", "signature": " EnumConverter(Class<T> enumType)", "full_signature": "public  EnumConverter(Class<T> enumType)", "class_method_signature": "EnumConverter.EnumConverter(Class<T> enumType)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "T", "signature": "T convert(String value, ConversionContext ctx)", "full_signature": "@Override public T convert(String value, ConversionContext ctx)", "class_method_signature": "EnumConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "EnumConverter.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EnumConverter.hashCode()", "testcase": false, "constructor": false}], "file": "code/spi-support/src/main/java/org/apache/tamaya/spisupport/EnumConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(String value, ConversionContext ctx)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T convert(String value, ConversionContext ctx) {\n        ctx.addSupportedFormats(getClass(), \"<enumValue>\");\n        try {\n            return (T) factory.invoke(null, value);\n        } catch (InvocationTargetException | IllegalAccessException e) {\n            LOG.log(Level.FINEST, \"Invalid enum createValue '\" + value + \"' for \" + enumType.getName(), e);\n        }\n        try {\n            if (value != null) {\n                return (T) factory.invoke(null, value.toUpperCase(Locale.ENGLISH));\n            }\n        } catch (InvocationTargetException | IllegalAccessException e) {\n            LOG.log(Level.FINEST, \"Invalid enum createValue '\" + value + \"' for \" + enumType.getName(), e);\n        }\n        return null;\n    }", "signature": "T convert(String value, ConversionContext ctx)", "full_signature": "@Override public T convert(String value, ConversionContext ctx)", "class_method_signature": "EnumConverter.convert(String value, ConversionContext ctx)", "testcase": false, "constructor": false, "invocations": ["addSupportedFormats", "getClass", "invoke", "log", "getName", "invoke", "toUpperCase", "log", "getName"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}