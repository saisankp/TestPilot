{"test_class": {"identifier": "AttributeTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/schema/AttributeTypeTest.java"}, "test_case": {"identifier": "parse", "parameters": "(final AttributeType type, final String definition)", "modifiers": "@Test(groups = \"schema\", dataProvider = \"definitions\") public", "return": "void", "body": "@Test(groups = \"schema\", dataProvider = \"definitions\")\n  public void parse(final AttributeType type, final String definition)\n    throws Exception\n  {\n    final AttributeType parsed = AttributeType.parse(definition);\n    Assert.assertEquals(type, parsed);\n    Assert.assertEquals(definition, parsed.format());\n    Assert.assertEquals(type.format(), parsed.format());\n  }", "signature": "void parse(final AttributeType type, final String definition)", "full_signature": "@Test(groups = \"schema\", dataProvider = \"definitions\") public void parse(final AttributeType type, final String definition)", "class_method_signature": "AttributeTypeTest.parse(final AttributeType type, final String definition)", "testcase": true, "constructor": false, "invocations": ["parse", "assertEquals", "assertEquals", "format", "assertEquals", "format", "format"]}, "focal_class": {"identifier": "AttributeType", "superclass": "extends AbstractNamedSchemaElement", "interfaces": "", "fields": [{"original_string": "private static final int HASH_CODE_SEED = 1103;", "modifier": "private static final", "type": "int", "declarator": "HASH_CODE_SEED = 1103", "var_name": "HASH_CODE_SEED"}, {"original_string": "private static final Pattern DEFINITION_PATTERN = Pattern.compile(\n    WSP_REGEX + \"\\\\(\" +\n      WSP_REGEX + \"(\" + NO_WSP_REGEX + \")\" +\n      WSP_REGEX + \"(?:NAME (?:'([^']+)'|\\\\(([^\\\\)]+)\\\\)))?\" +\n      WSP_REGEX + \"(?:DESC '([^']*)')?\" +\n      WSP_REGEX + \"(OBSOLETE)?\" +\n      WSP_REGEX + \"(?:SUP (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:EQUALITY (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:ORDERING (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:SUBSTR (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:SYNTAX (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(SINGLE-VALUE)?\" +\n      WSP_REGEX + \"(COLLECTIVE)?\" +\n      WSP_REGEX + \"(NO-USER-MODIFICATION)?\" +\n      WSP_REGEX + \"(?:USAGE (\\\\p{Alpha}+))?\" +\n      WSP_REGEX + \"(?:(X-[^ ]+.*))?\" +\n      WSP_REGEX + \"\\\\)\" + WSP_REGEX);", "modifier": "private static final", "type": "Pattern", "declarator": "DEFINITION_PATTERN = Pattern.compile(\n    WSP_REGEX + \"\\\\(\" +\n      WSP_REGEX + \"(\" + NO_WSP_REGEX + \")\" +\n      WSP_REGEX + \"(?:NAME (?:'([^']+)'|\\\\(([^\\\\)]+)\\\\)))?\" +\n      WSP_REGEX + \"(?:DESC '([^']*)')?\" +\n      WSP_REGEX + \"(OBSOLETE)?\" +\n      WSP_REGEX + \"(?:SUP (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:EQUALITY (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:ORDERING (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:SUBSTR (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(?:SYNTAX (\" + NO_WSP_REGEX + \"))?\" +\n      WSP_REGEX + \"(SINGLE-VALUE)?\" +\n      WSP_REGEX + \"(COLLECTIVE)?\" +\n      WSP_REGEX + \"(NO-USER-MODIFICATION)?\" +\n      WSP_REGEX + \"(?:USAGE (\\\\p{Alpha}+))?\" +\n      WSP_REGEX + \"(?:(X-[^ ]+.*))?\" +\n      WSP_REGEX + \"\\\\)\" + WSP_REGEX)", "var_name": "DEFINITION_PATTERN"}, {"original_string": "private final String oid;", "modifier": "private final", "type": "String", "declarator": "oid", "var_name": "oid"}, {"original_string": "private String superiorType;", "modifier": "private", "type": "String", "declarator": "superiorType", "var_name": "superiorType"}, {"original_string": "private String equalityMatchingRule;", "modifier": "private", "type": "String", "declarator": "equalityMatchingRule", "var_name": "equalityMatchingRule"}, {"original_string": "private String orderingMatchingRule;", "modifier": "private", "type": "String", "declarator": "orderingMatchingRule", "var_name": "orderingMatchingRule"}, {"original_string": "private String substringMatchingRule;", "modifier": "private", "type": "String", "declarator": "substringMatchingRule", "var_name": "substringMatchingRule"}, {"original_string": "private String syntaxOID;", "modifier": "private", "type": "String", "declarator": "syntaxOID", "var_name": "syntaxOID"}, {"original_string": "private boolean singleValued;", "modifier": "private", "type": "boolean", "declarator": "singleValued", "var_name": "singleValued"}, {"original_string": "private boolean collective;", "modifier": "private", "type": "boolean", "declarator": "collective", "var_name": "collective"}, {"original_string": "private boolean noUserModification;", "modifier": "private", "type": "boolean", "declarator": "noUserModification", "var_name": "noUserModification"}, {"original_string": "private AttributeUsage usage;", "modifier": "private", "type": "AttributeUsage", "declarator": "usage", "var_name": "usage"}], "methods": [{"identifier": "AttributeType", "parameters": "(final String s)", "modifiers": "public", "return": "", "signature": " AttributeType(final String s)", "full_signature": "public  AttributeType(final String s)", "class_method_signature": "AttributeType.AttributeType(final String s)", "testcase": false, "constructor": true}, {"identifier": "AttributeType", "parameters": "(\n    final String oid,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String superiorType,\n    final String equalityMatchingRule,\n    final String orderingMatchingRule,\n    final String substringMatchingRule,\n    final String syntaxOID,\n    final boolean singleValued,\n    final boolean collective,\n    final boolean noUserModification,\n    final AttributeUsage usage,\n    final Extensions extensions)", "modifiers": "public", "return": "", "signature": " AttributeType(\n    final String oid,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String superiorType,\n    final String equalityMatchingRule,\n    final String orderingMatchingRule,\n    final String substringMatchingRule,\n    final String syntaxOID,\n    final boolean singleValued,\n    final boolean collective,\n    final boolean noUserModification,\n    final AttributeUsage usage,\n    final Extensions extensions)", "full_signature": "public  AttributeType(\n    final String oid,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String superiorType,\n    final String equalityMatchingRule,\n    final String orderingMatchingRule,\n    final String substringMatchingRule,\n    final String syntaxOID,\n    final boolean singleValued,\n    final boolean collective,\n    final boolean noUserModification,\n    final AttributeUsage usage,\n    final Extensions extensions)", "class_method_signature": "AttributeType.AttributeType(\n    final String oid,\n    final String[] names,\n    final String description,\n    final boolean obsolete,\n    final String superiorType,\n    final String equalityMatchingRule,\n    final String orderingMatchingRule,\n    final String substringMatchingRule,\n    final String syntaxOID,\n    final boolean singleValued,\n    final boolean collective,\n    final boolean noUserModification,\n    final AttributeUsage usage,\n    final Extensions extensions)", "testcase": false, "constructor": true}, {"identifier": "getOID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOID()", "full_signature": "public String getOID()", "class_method_signature": "AttributeType.getOID()", "testcase": false, "constructor": false}, {"identifier": "getSuperiorType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSuperiorType()", "full_signature": "public String getSuperiorType()", "class_method_signature": "AttributeType.getSuperiorType()", "testcase": false, "constructor": false}, {"identifier": "setSuperiorType", "parameters": "(final String s)", "modifiers": "public", "return": "void", "signature": "void setSuperiorType(final String s)", "full_signature": "public void setSuperiorType(final String s)", "class_method_signature": "AttributeType.setSuperiorType(final String s)", "testcase": false, "constructor": false}, {"identifier": "getEqualityMatchingRule", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEqualityMatchingRule()", "full_signature": "public String getEqualityMatchingRule()", "class_method_signature": "AttributeType.getEqualityMatchingRule()", "testcase": false, "constructor": false}, {"identifier": "setEqualityMatchingRule", "parameters": "(final String s)", "modifiers": "public", "return": "void", "signature": "void setEqualityMatchingRule(final String s)", "full_signature": "public void setEqualityMatchingRule(final String s)", "class_method_signature": "AttributeType.setEqualityMatchingRule(final String s)", "testcase": false, "constructor": false}, {"identifier": "getOrderingMatchingRule", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOrderingMatchingRule()", "full_signature": "public String getOrderingMatchingRule()", "class_method_signature": "AttributeType.getOrderingMatchingRule()", "testcase": false, "constructor": false}, {"identifier": "setOrderingMatchingRule", "parameters": "(final String s)", "modifiers": "public", "return": "void", "signature": "void setOrderingMatchingRule(final String s)", "full_signature": "public void setOrderingMatchingRule(final String s)", "class_method_signature": "AttributeType.setOrderingMatchingRule(final String s)", "testcase": false, "constructor": false}, {"identifier": "getSubstringMatchingRule", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSubstringMatchingRule()", "full_signature": "public String getSubstringMatchingRule()", "class_method_signature": "AttributeType.getSubstringMatchingRule()", "testcase": false, "constructor": false}, {"identifier": "setSubstringMatchingRule", "parameters": "(final String s)", "modifiers": "public", "return": "void", "signature": "void setSubstringMatchingRule(final String s)", "full_signature": "public void setSubstringMatchingRule(final String s)", "class_method_signature": "AttributeType.setSubstringMatchingRule(final String s)", "testcase": false, "constructor": false}, {"identifier": "getSyntaxOID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSyntaxOID()", "full_signature": "public String getSyntaxOID()", "class_method_signature": "AttributeType.getSyntaxOID()", "testcase": false, "constructor": false}, {"identifier": "getSyntaxOID", "parameters": "(final boolean withBoundCount)", "modifiers": "public", "return": "String", "signature": "String getSyntaxOID(final boolean withBoundCount)", "full_signature": "public String getSyntaxOID(final boolean withBoundCount)", "class_method_signature": "AttributeType.getSyntaxOID(final boolean withBoundCount)", "testcase": false, "constructor": false}, {"identifier": "getSyntaxOIDBoundCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSyntaxOIDBoundCount()", "full_signature": "public int getSyntaxOIDBoundCount()", "class_method_signature": "AttributeType.getSyntaxOIDBoundCount()", "testcase": false, "constructor": false}, {"identifier": "setSyntaxOID", "parameters": "(final String s)", "modifiers": "public", "return": "void", "signature": "void setSyntaxOID(final String s)", "full_signature": "public void setSyntaxOID(final String s)", "class_method_signature": "AttributeType.setSyntaxOID(final String s)", "testcase": false, "constructor": false}, {"identifier": "isSingleValued", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSingleValued()", "full_signature": "public boolean isSingleValued()", "class_method_signature": "AttributeType.isSingleValued()", "testcase": false, "constructor": false}, {"identifier": "setSingleValued", "parameters": "(final boolean b)", "modifiers": "public", "return": "void", "signature": "void setSingleValued(final boolean b)", "full_signature": "public void setSingleValued(final boolean b)", "class_method_signature": "AttributeType.setSingleValued(final boolean b)", "testcase": false, "constructor": false}, {"identifier": "isCollective", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCollective()", "full_signature": "public boolean isCollective()", "class_method_signature": "AttributeType.isCollective()", "testcase": false, "constructor": false}, {"identifier": "setCollective", "parameters": "(final boolean b)", "modifiers": "public", "return": "void", "signature": "void setCollective(final boolean b)", "full_signature": "public void setCollective(final boolean b)", "class_method_signature": "AttributeType.setCollective(final boolean b)", "testcase": false, "constructor": false}, {"identifier": "isNoUserModification", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNoUserModification()", "full_signature": "public boolean isNoUserModification()", "class_method_signature": "AttributeType.isNoUserModification()", "testcase": false, "constructor": false}, {"identifier": "setNoUserModification", "parameters": "(final boolean b)", "modifiers": "public", "return": "void", "signature": "void setNoUserModification(final boolean b)", "full_signature": "public void setNoUserModification(final boolean b)", "class_method_signature": "AttributeType.setNoUserModification(final boolean b)", "testcase": false, "constructor": false}, {"identifier": "getUsage", "parameters": "()", "modifiers": "public", "return": "AttributeUsage", "signature": "AttributeUsage getUsage()", "full_signature": "public AttributeUsage getUsage()", "class_method_signature": "AttributeType.getUsage()", "testcase": false, "constructor": false}, {"identifier": "setUsage", "parameters": "(final AttributeUsage u)", "modifiers": "public", "return": "void", "signature": "void setUsage(final AttributeUsage u)", "full_signature": "public void setUsage(final AttributeUsage u)", "class_method_signature": "AttributeType.setUsage(final AttributeUsage u)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String definition)", "modifiers": "public static", "return": "AttributeType", "signature": "AttributeType parse(final String definition)", "full_signature": "public static AttributeType parse(final String definition)", "class_method_signature": "AttributeType.parse(final String definition)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String format()", "full_signature": "@Override public String format()", "class_method_signature": "AttributeType.format()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "AttributeType.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AttributeType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AttributeType.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/schema/AttributeType.java"}, "focal_method": {"identifier": "parse", "parameters": "(final String definition)", "modifiers": "public static", "return": "AttributeType", "body": "public static AttributeType parse(final String definition)\n    throws ParseException\n  {\n    final Matcher m = DEFINITION_PATTERN.matcher(definition);\n    if (!m.matches()) {\n      throw new ParseException(\"Invalid attribute type definition: \" + definition, definition.length());\n    }\n\n    final AttributeType atd = new AttributeType(m.group(1).trim());\n\n    // CheckStyle:MagicNumber OFF\n    // parse names\n    if (m.group(2) != null) {\n      atd.setNames(SchemaUtils.parseDescriptors(m.group(2).trim()));\n    } else if (m.group(3) != null) {\n      atd.setNames(SchemaUtils.parseDescriptors(m.group(3).trim()));\n    }\n\n    atd.setDescription(m.group(4) != null ? m.group(4).trim() : null);\n    atd.setObsolete(m.group(5) != null);\n    atd.setSuperiorType(m.group(6) != null ? m.group(6).trim() : null);\n    atd.setEqualityMatchingRule(m.group(7) != null ? m.group(7).trim() : null);\n    atd.setOrderingMatchingRule(m.group(8) != null ? m.group(8).trim() : null);\n    atd.setSubstringMatchingRule(m.group(9) != null ? m.group(9).trim() : null);\n    atd.setSyntaxOID(m.group(10) != null ? m.group(10).trim() : null);\n    atd.setSingleValued(m.group(11) != null);\n    atd.setCollective(m.group(12) != null);\n    atd.setNoUserModification(m.group(13) != null);\n    if (m.group(14) != null) {\n      atd.setUsage(AttributeUsage.parse(m.group(14).trim()));\n    }\n\n    // parse extensions\n    if (m.group(15) != null) {\n      atd.setExtensions(Extensions.parse(m.group(15).trim()));\n    }\n    return atd;\n    // CheckStyle:MagicNumber ON\n  }", "signature": "AttributeType parse(final String definition)", "full_signature": "public static AttributeType parse(final String definition)", "class_method_signature": "AttributeType.parse(final String definition)", "testcase": false, "constructor": false, "invocations": ["matcher", "matches", "length", "trim", "group", "group", "setNames", "parseDescriptors", "trim", "group", "group", "setNames", "parseDescriptors", "trim", "group", "setDescription", "group", "trim", "group", "setObsolete", "group", "setSuperiorType", "group", "trim", "group", "setEqualityMatchingRule", "group", "trim", "group", "setOrderingMatchingRule", "group", "trim", "group", "setSubstringMatchingRule", "group", "trim", "group", "setSyntaxOID", "group", "trim", "group", "setSingleValued", "group", "setCollective", "group", "setNoUserModification", "group", "group", "setUsage", "parse", "trim", "group", "group", "setExtensions", "parse", "trim", "group"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}