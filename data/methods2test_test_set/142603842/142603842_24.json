{"test_class": {"identifier": "PlanningLocationTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/planner/domain/PlanningLocationTest.java"}, "test_case": {"identifier": "angle_from_depot_on_real_coordinates_should_be_atan2_of_latitude_longitude", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void angle_from_depot_on_real_coordinates_should_be_atan2_of_latitude_longitude() {\n        PlanningLocation depot = locationAt(1.77, -10.5);\n        Offset<Double> offset = offset(0.05);\n\n        assertThat(depot.angleTo(locationAt(1.76, -5))).isCloseTo(0, offset).isNegative();\n        assertThat(depot.angleTo(locationAt(100000, -1))).isCloseTo(Math.PI / 2, offset);\n    }", "signature": "void angle_from_depot_on_real_coordinates_should_be_atan2_of_latitude_longitude()", "full_signature": "@Test void angle_from_depot_on_real_coordinates_should_be_atan2_of_latitude_longitude()", "class_method_signature": "PlanningLocationTest.angle_from_depot_on_real_coordinates_should_be_atan2_of_latitude_longitude()", "testcase": true, "constructor": false, "invocations": ["locationAt", "offset", "isNegative", "isCloseTo", "assertThat", "angleTo", "locationAt", "isCloseTo", "assertThat", "angleTo", "locationAt"]}, "focal_class": {"identifier": "PlanningLocation", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long id;", "modifier": "private final", "type": "long", "declarator": "id", "var_name": "id"}, {"original_string": "private final double latitude;", "modifier": "private final", "type": "double", "declarator": "latitude", "var_name": "latitude"}, {"original_string": "private final double longitude;", "modifier": "private final", "type": "double", "declarator": "longitude", "var_name": "longitude"}, {"original_string": "private final DistanceMap travelDistanceMap;", "modifier": "private final", "type": "DistanceMap", "declarator": "travelDistanceMap", "var_name": "travelDistanceMap"}], "methods": [{"identifier": "PlanningLocation", "parameters": "(long id, double latitude, double longitude, DistanceMap travelDistanceMap)", "modifiers": "", "return": "", "signature": " PlanningLocation(long id, double latitude, double longitude, DistanceMap travelDistanceMap)", "full_signature": "  PlanningLocation(long id, double latitude, double longitude, DistanceMap travelDistanceMap)", "class_method_signature": "PlanningLocation.PlanningLocation(long id, double latitude, double longitude, DistanceMap travelDistanceMap)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getId()", "full_signature": "public long getId()", "class_method_signature": "PlanningLocation.getId()", "testcase": false, "constructor": false}, {"identifier": "distanceTo", "parameters": "(PlanningLocation location)", "modifiers": "public", "return": "long", "signature": "long distanceTo(PlanningLocation location)", "full_signature": "public long distanceTo(PlanningLocation location)", "class_method_signature": "PlanningLocation.distanceTo(PlanningLocation location)", "testcase": false, "constructor": false}, {"identifier": "angleTo", "parameters": "(PlanningLocation location)", "modifiers": "public", "return": "double", "signature": "double angleTo(PlanningLocation location)", "full_signature": "public double angleTo(PlanningLocation location)", "class_method_signature": "PlanningLocation.angleTo(PlanningLocation location)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PlanningLocation.toString()", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/planner/domain/PlanningLocation.java"}, "focal_method": {"identifier": "angleTo", "parameters": "(PlanningLocation location)", "modifiers": "public", "return": "double", "body": "public double angleTo(PlanningLocation location) {\n        // Euclidean distance (Pythagorean theorem) - not correct when the surface is a sphere\n        double latitudeDifference = location.latitude - latitude;\n        double longitudeDifference = location.longitude - longitude;\n        return Math.atan2(latitudeDifference, longitudeDifference);\n    }", "signature": "double angleTo(PlanningLocation location)", "full_signature": "public double angleTo(PlanningLocation location)", "class_method_signature": "PlanningLocation.angleTo(PlanningLocation location)", "testcase": false, "constructor": false, "invocations": ["atan2"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}