{"test_class": {"identifier": "OntologyLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "phenol-io/src/test/java/org/monarchinitiative/phenol/io/OntologyLoaderTest.java"}, "test_case": {"identifier": "testNCITLoad", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void testNCITLoad() {\n    Path ncitPath = Paths.get(\"src/test/resources/ncit_module.owl\");\n    Ontology ontology = OntologyLoader.loadOntology(ncitPath.toFile(), \"NCIT\");\n    DefaultDirectedGraph<TermId, IdLabeledEdge> graph = ontology.getGraph();\n\n    // 1. Checking vertices\n    // In this dummy ontology, we have 6 classes.\n    TermId t1 = TermId.of(\"NCIT:C2919\");\n    TermId t2 = TermId.of(\"NCIT:C2852\");\n    TermId t3 = TermId.of(\"NCIT:C48596\");\n    TermId t4 = TermId.of(\"NCIT:C60312\");\n    TermId t5 = TermId.of(\"NCIT:C116977\");\n    TermId t6 = TermId.of(\"NCIT:C126659\");\n\n    assertTrue(graph.vertexSet().contains(t1));\n    assertTrue(graph.vertexSet().contains(t2));\n    assertTrue(graph.vertexSet().contains(t3));\n    assertTrue(graph.vertexSet().contains(t4));\n    assertTrue(graph.vertexSet().contains(t5));\n    // This one is not recognized as a node due to the lack of rdfs:label.\n    assertFalse(graph.vertexSet().contains(t6));\n\n    // 2. Checking edges\n    // Two subclasses are translated into two edges. Other axioms are not yet captured.\n    // Given there is no root term an artificial one is created and linked\n    assertEquals(4, graph.edgeSet().size());\n    assertNotNull(graph.getEdge(t1, t2));\n    assertNotNull(graph.getEdge(t1, t3));\n\n    // 3. Checking TermIds\n    // This is essentially the same as checking vertices.\n    assertTrue(ontology.getAllTermIds().contains(t1));\n    assertTrue(ontology.getAllTermIds().contains(t2));\n    assertTrue(ontology.getAllTermIds().contains(t3));\n    assertTrue(ontology.getAllTermIds().contains(t4));\n    assertTrue(ontology.getAllTermIds().contains(t5));\n    assertFalse(ontology.getAllTermIds().contains(t6));\n\n    // 4. Checking RelationMap\n    // All meta-information on edges are available in RelationMap instance.\n    Relationship gr1 = ontology.getRelationMap().get(graph.getEdge(t1, t2).getId());\n    Relationship gr2 = ontology.getRelationMap().get(graph.getEdge(t1, t3).getId());\n    assertNotNull(gr1);\n    assertNotNull(gr2);\n    assertEquals(RelationshipType.IS_A, gr1.getRelationshipType());\n    assertEquals(RelationshipType.IS_A, gr2.getRelationshipType());\n\n    // 5. The example file contains multiple roots; thus we just put owl:Thing as the root.\n    assertEquals(TermId.of(\"owl:Thing\"), ontology.getRootTermId());\n  }", "signature": "void testNCITLoad()", "full_signature": "@Test void testNCITLoad()", "class_method_signature": "OntologyLoaderTest.testNCITLoad()", "testcase": true, "constructor": false, "invocations": ["get", "loadOntology", "toFile", "getGraph", "of", "of", "of", "of", "of", "of", "assertTrue", "contains", "vertexSet", "assertTrue", "contains", "vertexSet", "assertTrue", "contains", "vertexSet", "assertTrue", "contains", "vertexSet", "assertTrue", "contains", "vertexSet", "assertFalse", "contains", "vertexSet", "assertEquals", "size", "edgeSet", "assertNotNull", "getEdge", "assertNotNull", "getEdge", "assertTrue", "contains", "getAllTermIds", "assertTrue", "contains", "getAllTermIds", "assertTrue", "contains", "getAllTermIds", "assertTrue", "contains", "getAllTermIds", "assertTrue", "contains", "getAllTermIds", "assertFalse", "contains", "getAllTermIds", "get", "getRelationMap", "getId", "getEdge", "get", "getRelationMap", "getId", "getEdge", "assertNotNull", "assertNotNull", "assertEquals", "getRelationshipType", "assertEquals", "getRelationshipType", "assertEquals", "of", "getRootTermId"]}, "focal_class": {"identifier": "OntologyLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(OntologyLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OntologyLoader.class)", "var_name": "logger"}], "methods": [{"identifier": "OntologyLoader", "parameters": "()", "modifiers": "private", "return": "", "signature": " OntologyLoader()", "full_signature": "private  OntologyLoader()", "class_method_signature": "OntologyLoader.OntologyLoader()", "testcase": false, "constructor": true}, {"identifier": "loadOntology", "parameters": "(File file)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(File file)", "full_signature": "public static Ontology loadOntology(File file)", "class_method_signature": "OntologyLoader.loadOntology(File file)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(File file, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(File file, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(File file, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(File file, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(File file, CurieUtil curieUtil, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(File file, CurieUtil curieUtil, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(File file, CurieUtil curieUtil, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(File file, CurieUtil curieUtil, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(InputStream inputStream)", "full_signature": "public static Ontology loadOntology(InputStream inputStream)", "class_method_signature": "OntologyLoader.loadOntology(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(InputStream inputStream, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(InputStream inputStream, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(InputStream inputStream, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(InputStream inputStream, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(InputStream inputStream, CurieUtil curieUtil, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadOntology", "parameters": "(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "modifiers": "public static", "return": "Ontology", "signature": "Ontology loadOntology(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "full_signature": "public static Ontology loadOntology(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "class_method_signature": "OntologyLoader.loadOntology(GraphDocument graphDocument, CurieUtil curieUtil, String... termIdPrefixes)", "testcase": false, "constructor": false}, {"identifier": "loadGraphDocument", "parameters": "(File file)", "modifiers": "private static", "return": "GraphDocument", "signature": "GraphDocument loadGraphDocument(File file)", "full_signature": "private static GraphDocument loadGraphDocument(File file)", "class_method_signature": "OntologyLoader.loadGraphDocument(File file)", "testcase": false, "constructor": false}, {"identifier": "loadGraphDocument", "parameters": "(InputStream inputStream)", "modifiers": "private static", "return": "GraphDocument", "signature": "GraphDocument loadGraphDocument(InputStream inputStream)", "full_signature": "private static GraphDocument loadGraphDocument(InputStream inputStream)", "class_method_signature": "OntologyLoader.loadGraphDocument(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "readBytes", "parameters": "(InputStream bufferedStream, int readlimit)", "modifiers": "private static", "return": "String", "signature": "String readBytes(InputStream bufferedStream, int readlimit)", "full_signature": "private static String readBytes(InputStream bufferedStream, int readlimit)", "class_method_signature": "OntologyLoader.readBytes(InputStream bufferedStream, int readlimit)", "testcase": false, "constructor": false}, {"identifier": "isJsonGraphDoc", "parameters": "(String firstBytes)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJsonGraphDoc(String firstBytes)", "full_signature": "private static boolean isJsonGraphDoc(String firstBytes)", "class_method_signature": "OntologyLoader.isJsonGraphDoc(String firstBytes)", "testcase": false, "constructor": false}], "file": "phenol-io/src/main/java/org/monarchinitiative/phenol/io/OntologyLoader.java"}, "focal_method": {"identifier": "loadOntology", "parameters": "(File file)", "modifiers": "public static", "return": "Ontology", "body": "public static Ontology loadOntology(File file) {\n    return loadOntology(file, CurieUtilBuilder.defaultCurieUtil());\n  }", "signature": "Ontology loadOntology(File file)", "full_signature": "public static Ontology loadOntology(File file)", "class_method_signature": "OntologyLoader.loadOntology(File file)", "testcase": false, "constructor": false, "invocations": ["loadOntology", "defaultCurieUtil"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}