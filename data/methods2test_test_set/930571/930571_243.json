{"test_class": {"identifier": "LdapSearcherTest", "superclass": "extends LDAPBaseTest", "interfaces": "", "fields": [{"original_string": "private static final String CONTEXT = \"ou=People,dc=jbpm,dc=org\";", "modifier": "private static final", "type": "String", "declarator": "CONTEXT = \"ou=People,dc=jbpm,dc=org\"", "var_name": "CONTEXT"}, {"original_string": "private static final String FILTER = \"(uid=*)\";", "modifier": "private static final", "type": "String", "declarator": "FILTER = \"(uid=*)\"", "var_name": "FILTER"}, {"original_string": "private Properties config;", "modifier": "private", "type": "Properties", "declarator": "config", "var_name": "config"}], "file": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/utils/LdapSearcherTest.java"}, "test_case": {"identifier": "testGetSingleSearchResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSingleSearchResult() throws NamingException {\n        LdapSearcher ldapSearcher = new LdapSearcher(config);\n        SearchResult searchResult = ldapSearcher.search(CONTEXT, \"(uid=john)\").getSingleSearchResult();\n\n        assertThat(searchResult).isNotNull();\n        assertThat(searchResult.getAttributes().get(\"uid\").get()).isEqualTo(\"john\");\n    }", "signature": "void testGetSingleSearchResult()", "full_signature": "@Test public void testGetSingleSearchResult()", "class_method_signature": "LdapSearcherTest.testGetSingleSearchResult()", "testcase": true, "constructor": false, "invocations": ["getSingleSearchResult", "search", "isNotNull", "assertThat", "isEqualTo", "assertThat", "get", "get", "getAttributes"]}, "focal_class": {"identifier": "LdapSearcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(LdapSearcher.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LdapSearcher.class)", "var_name": "log"}, {"original_string": "public static final String SEARCH_SCOPE = \"ldap.search.scope\";", "modifier": "public static final", "type": "String", "declarator": "SEARCH_SCOPE = \"ldap.search.scope\"", "var_name": "SEARCH_SCOPE"}, {"original_string": "private static final String DEFAULT_INITIAL_CONTEXT_FACTORY = \"com.sun.jndi.ldap.LdapCtxFactory\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_INITIAL_CONTEXT_FACTORY = \"com.sun.jndi.ldap.LdapCtxFactory\"", "var_name": "DEFAULT_INITIAL_CONTEXT_FACTORY"}, {"original_string": "private static final String DEFAULT_SECURITY_AUTHENTICATION = \"simple\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SECURITY_AUTHENTICATION = \"simple\"", "var_name": "DEFAULT_SECURITY_AUTHENTICATION"}, {"original_string": "private final List<SearchResult> searchResults = new ArrayList<>();", "modifier": "private final", "type": "List<SearchResult>", "declarator": "searchResults = new ArrayList<>()", "var_name": "searchResults"}, {"original_string": "private final Properties config;", "modifier": "private final", "type": "Properties", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "LdapSearcher", "parameters": "(Properties config)", "modifiers": "public", "return": "", "signature": " LdapSearcher(Properties config)", "full_signature": "public  LdapSearcher(Properties config)", "class_method_signature": "LdapSearcher.LdapSearcher(Properties config)", "testcase": false, "constructor": true}, {"identifier": "search", "parameters": "(String context, String filterExpr, Object... filterArgs)", "modifiers": "public", "return": "LdapSearcher", "signature": "LdapSearcher search(String context, String filterExpr, Object... filterArgs)", "full_signature": "public LdapSearcher search(String context, String filterExpr, Object... filterArgs)", "class_method_signature": "LdapSearcher.search(String context, String filterExpr, Object... filterArgs)", "testcase": false, "constructor": false}, {"identifier": "getSingleSearchResult", "parameters": "()", "modifiers": "public", "return": "SearchResult", "signature": "SearchResult getSingleSearchResult()", "full_signature": "public SearchResult getSingleSearchResult()", "class_method_signature": "LdapSearcher.getSingleSearchResult()", "testcase": false, "constructor": false}, {"identifier": "getSearchResults", "parameters": "()", "modifiers": "public", "return": "List<SearchResult>", "signature": "List<SearchResult> getSearchResults()", "full_signature": "public List<SearchResult> getSearchResults()", "class_method_signature": "LdapSearcher.getSearchResults()", "testcase": false, "constructor": false}, {"identifier": "getSingleAttributeResult", "parameters": "(String attributeId)", "modifiers": "public", "return": "String", "signature": "String getSingleAttributeResult(String attributeId)", "full_signature": "public String getSingleAttributeResult(String attributeId)", "class_method_signature": "LdapSearcher.getSingleAttributeResult(String attributeId)", "testcase": false, "constructor": false}, {"identifier": "getAttributeResults", "parameters": "(String attributeId)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAttributeResults(String attributeId)", "full_signature": "public List<String> getAttributeResults(String attributeId)", "class_method_signature": "LdapSearcher.getAttributeResults(String attributeId)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(SearchResult searchResult, String attributeId)", "modifiers": "private", "return": "String", "signature": "String getAttribute(SearchResult searchResult, String attributeId)", "full_signature": "private String getAttribute(SearchResult searchResult, String attributeId)", "class_method_signature": "LdapSearcher.getAttribute(SearchResult searchResult, String attributeId)", "testcase": false, "constructor": false}, {"identifier": "buildLdapContext", "parameters": "()", "modifiers": "private", "return": "LdapContext", "signature": "LdapContext buildLdapContext()", "full_signature": "private LdapContext buildLdapContext()", "class_method_signature": "LdapSearcher.buildLdapContext()", "testcase": false, "constructor": false}, {"identifier": "createDefaultProviderUrl", "parameters": "(String protocol)", "modifiers": "private", "return": "String", "signature": "String createDefaultProviderUrl(String protocol)", "full_signature": "private String createDefaultProviderUrl(String protocol)", "class_method_signature": "LdapSearcher.createDefaultProviderUrl(String protocol)", "testcase": false, "constructor": false}, {"identifier": "createSearchControls", "parameters": "()", "modifiers": "private", "return": "SearchControls", "signature": "SearchControls createSearchControls()", "full_signature": "private SearchControls createSearchControls()", "class_method_signature": "LdapSearcher.createSearchControls()", "testcase": false, "constructor": false}, {"identifier": "parseSearchScope", "parameters": "(String searchScope)", "modifiers": "private", "return": "int", "signature": "int parseSearchScope(String searchScope)", "full_signature": "private int parseSearchScope(String searchScope)", "class_method_signature": "LdapSearcher.parseSearchScope(String searchScope)", "testcase": false, "constructor": false}], "file": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/utils/LdapSearcher.java"}, "focal_method": {"identifier": "getSingleSearchResult", "parameters": "()", "modifiers": "public", "return": "SearchResult", "body": "public SearchResult getSingleSearchResult() {\n        return searchResults.isEmpty() ? null : searchResults.get(0);\n    }", "signature": "SearchResult getSingleSearchResult()", "full_signature": "public SearchResult getSingleSearchResult()", "class_method_signature": "LdapSearcher.getSingleSearchResult()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "get"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}