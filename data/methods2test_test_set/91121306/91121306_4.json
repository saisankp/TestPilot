{"test_class": {"identifier": "RxNetworkTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Scheduler CUSTOM_SCHEDULER = Schedulers.trampoline();", "modifier": "private static final", "type": "Scheduler", "declarator": "CUSTOM_SCHEDULER = Schedulers.trampoline()", "var_name": "CUSTOM_SCHEDULER"}, {"original_string": "private RxNetwork sut;", "modifier": "private", "type": "RxNetwork", "declarator": "sut", "var_name": "sut"}, {"original_string": "@Mock private Context context;", "modifier": "@Mock private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock private NetworkObservingStrategy customNetworkStrategy;", "modifier": "@Mock private", "type": "NetworkObservingStrategy", "declarator": "customNetworkStrategy", "var_name": "customNetworkStrategy"}, {"original_string": "@Mock private NetworkObservingStrategyFactory customNetworkStrategyFactory;", "modifier": "@Mock private", "type": "NetworkObservingStrategyFactory", "declarator": "customNetworkStrategyFactory", "var_name": "customNetworkStrategyFactory"}, {"original_string": "@Mock private InternetObservingStrategy customInternetStrategy;", "modifier": "@Mock private", "type": "InternetObservingStrategy", "declarator": "customInternetStrategy", "var_name": "customInternetStrategy"}, {"original_string": "@Mock private InternetObservingStrategyFactory customInternetStrategyFactory;", "modifier": "@Mock private", "type": "InternetObservingStrategyFactory", "declarator": "customInternetStrategyFactory", "var_name": "customInternetStrategyFactory"}, {"original_string": "@Mock private NetworkRequest customNetworkRequest;", "modifier": "@Mock private", "type": "NetworkRequest", "declarator": "customNetworkRequest", "var_name": "customNetworkRequest"}], "file": "rxnetwork/src/test/java/greyfox/rxnetwork/RxNetworkTest.java"}, "test_case": {"identifier": "shouldThrow_whenTryingToObserveWithNullNetworkStrategy", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n  public void shouldThrow_whenTryingToObserveWithNullNetworkStrategy() {\n    sut.observe(null);\n  }", "signature": "void shouldThrow_whenTryingToObserveWithNullNetworkStrategy()", "full_signature": "@Test(expected = NullPointerException.class) public void shouldThrow_whenTryingToObserveWithNullNetworkStrategy()", "class_method_signature": "RxNetworkTest.shouldThrow_whenTryingToObserveWithNullNetworkStrategy()", "testcase": true, "constructor": false, "invocations": ["observe"]}, "focal_class": {"identifier": "RxNetwork", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NonNull private final NetworkObservingStrategy networkObservingStrategy;", "modifier": "@NonNull private final", "type": "NetworkObservingStrategy", "declarator": "networkObservingStrategy", "var_name": "networkObservingStrategy"}, {"original_string": "@NonNull private final InternetObservingStrategy internetObservingStrategy;", "modifier": "@NonNull private final", "type": "InternetObservingStrategy", "declarator": "internetObservingStrategy", "var_name": "internetObservingStrategy"}, {"original_string": "@Nullable private final NetworkRequest networkRequest;", "modifier": "@Nullable private final", "type": "NetworkRequest", "declarator": "networkRequest", "var_name": "networkRequest"}, {"original_string": "@Nullable private final Scheduler scheduler;", "modifier": "@Nullable private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}], "methods": [{"identifier": "RxNetwork", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "", "signature": " RxNetwork()", "full_signature": "@VisibleForTesting  RxNetwork()", "class_method_signature": "RxNetwork.RxNetwork()", "testcase": false, "constructor": true}, {"identifier": "RxNetwork", "parameters": "(@NonNull Builder builder)", "modifiers": "@VisibleForTesting", "return": "", "signature": " RxNetwork(@NonNull Builder builder)", "full_signature": "@VisibleForTesting  RxNetwork(@NonNull Builder builder)", "class_method_signature": "RxNetwork.RxNetwork(@NonNull Builder builder)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(@NonNull Context context)", "modifiers": "@NonNull public static", "return": "RxNetwork", "signature": "RxNetwork init(@NonNull Context context)", "full_signature": "@NonNull public static RxNetwork init(@NonNull Context context)", "class_method_signature": "RxNetwork.init(@NonNull Context context)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@NonNull public static", "return": "RxNetwork", "signature": "RxNetwork init()", "full_signature": "@NonNull public static RxNetwork init()", "class_method_signature": "RxNetwork.init()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "@NonNull public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "@NonNull public static Builder builder()", "class_method_signature": "RxNetwork.builder()", "testcase": false, "constructor": false}, {"identifier": "scheduler", "parameters": "()", "modifiers": "@Nullable @VisibleForTesting", "return": "Scheduler", "signature": "Scheduler scheduler()", "full_signature": "@Nullable @VisibleForTesting Scheduler scheduler()", "class_method_signature": "RxNetwork.scheduler()", "testcase": false, "constructor": false}, {"identifier": "networkObservingStrategy", "parameters": "()", "modifiers": "@NonNull @VisibleForTesting", "return": "NetworkObservingStrategy", "signature": "NetworkObservingStrategy networkObservingStrategy()", "full_signature": "@NonNull @VisibleForTesting NetworkObservingStrategy networkObservingStrategy()", "class_method_signature": "RxNetwork.networkObservingStrategy()", "testcase": false, "constructor": false}, {"identifier": "internetObservingStrategy", "parameters": "()", "modifiers": "@NonNull @VisibleForTesting", "return": "InternetObservingStrategy", "signature": "InternetObservingStrategy internetObservingStrategy()", "full_signature": "@NonNull @VisibleForTesting InternetObservingStrategy internetObservingStrategy()", "class_method_signature": "RxNetwork.internetObservingStrategy()", "testcase": false, "constructor": false}, {"identifier": "networkRequest", "parameters": "()", "modifiers": "@Nullable @VisibleForTesting", "return": "NetworkRequest", "signature": "NetworkRequest networkRequest()", "full_signature": "@Nullable @VisibleForTesting NetworkRequest networkRequest()", "class_method_signature": "RxNetwork.networkRequest()", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "()", "modifiers": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public", "return": "Observable<RxNetworkInfo>", "signature": "Observable<RxNetworkInfo> observe()", "full_signature": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public Observable<RxNetworkInfo> observe()", "class_method_signature": "RxNetwork.observe()", "testcase": false, "constructor": false}, {"identifier": "observe", "parameters": "(@NonNull NetworkObservingStrategy strategy)", "modifiers": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public", "return": "Observable<RxNetworkInfo>", "signature": "Observable<RxNetworkInfo> observe(@NonNull NetworkObservingStrategy strategy)", "full_signature": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public Observable<RxNetworkInfo> observe(@NonNull NetworkObservingStrategy strategy)", "class_method_signature": "RxNetwork.observe(@NonNull NetworkObservingStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "observeSimple", "parameters": "()", "modifiers": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public", "return": "Observable<Boolean>", "signature": "Observable<Boolean> observeSimple()", "full_signature": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public Observable<Boolean> observeSimple()", "class_method_signature": "RxNetwork.observeSimple()", "testcase": false, "constructor": false}, {"identifier": "observeInternetAccess", "parameters": "()", "modifiers": "@NonNull @RequiresPermission(INTERNET) public", "return": "Observable<Boolean>", "signature": "Observable<Boolean> observeInternetAccess()", "full_signature": "@NonNull @RequiresPermission(INTERNET) public Observable<Boolean> observeInternetAccess()", "class_method_signature": "RxNetwork.observeInternetAccess()", "testcase": false, "constructor": false}, {"identifier": "observeInternetAccess", "parameters": "(@NonNull InternetObservingStrategy strategy)", "modifiers": "@NonNull @RequiresPermission(INTERNET) public", "return": "Observable<Boolean>", "signature": "Observable<Boolean> observeInternetAccess(@NonNull InternetObservingStrategy strategy)", "full_signature": "@NonNull @RequiresPermission(INTERNET) public Observable<Boolean> observeInternetAccess(@NonNull InternetObservingStrategy strategy)", "class_method_signature": "RxNetwork.observeInternetAccess(@NonNull InternetObservingStrategy strategy)", "testcase": false, "constructor": false}], "file": "rxnetwork/src/main/java/greyfox/rxnetwork/RxNetwork.java"}, "focal_method": {"identifier": "observe", "parameters": "()", "modifiers": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public", "return": "Observable<RxNetworkInfo>", "body": "@NonNull\n  @RequiresPermission(ACCESS_NETWORK_STATE)\n  public Observable<RxNetworkInfo> observe() {\n    return observe(networkObservingStrategy);\n  }", "signature": "Observable<RxNetworkInfo> observe()", "full_signature": "@NonNull @RequiresPermission(ACCESS_NETWORK_STATE) public Observable<RxNetworkInfo> observe()", "class_method_signature": "RxNetwork.observe()", "testcase": false, "constructor": false, "invocations": ["observe"]}, "repository": {"repo_id": 91121306, "url": "https://github.com/greyfoxit/RxNetwork", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 511, "license": "licensed"}}