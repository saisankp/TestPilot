{"test_class": {"identifier": "ValidationViolationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<ValidationMessage> messages;", "modifier": "private", "type": "List<ValidationMessage>", "declarator": "messages", "var_name": "messages"}, {"original_string": "private Throwable myThrowable1;", "modifier": "private", "type": "Throwable", "declarator": "myThrowable1", "var_name": "myThrowable1"}, {"original_string": "private Throwable myThrowable2;", "modifier": "private", "type": "Throwable", "declarator": "myThrowable2", "var_name": "myThrowable2"}], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/ValidationViolationTest.java"}, "test_case": {"identifier": "testValidationViolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidationViolation() {\n        ValidationViolation violation = new ValidationViolation(\"myid2\", ValidationMessageSeverity.DEBUG, \"message1\", Paths.get(\"child1\"), Paths.get(\"base1\"), \"nodepath2\", 10, 20, null);\n        Assert.assertEquals(\"myid2\", violation.getValidatorId());\n        Assert.assertEquals(ValidationMessageSeverity.DEBUG, violation.getSeverity());\n        Assert.assertEquals(\"message1\", violation.getMessage());\n        Assert.assertEquals(Paths.get(\"base1\",\"child1\"), violation.getAbsoluteFilePath());\n        Assert.assertEquals(\"nodepath2\", violation.getNodePath());\n        Assert.assertEquals(10, violation.getLine());\n        Assert.assertEquals(20, violation.getColumn());\n    }", "signature": "void testValidationViolation()", "full_signature": "@Test public void testValidationViolation()", "class_method_signature": "ValidationViolationTest.testValidationViolation()", "testcase": true, "constructor": false, "invocations": ["get", "get", "assertEquals", "getValidatorId", "assertEquals", "getSeverity", "assertEquals", "getMessage", "assertEquals", "get", "getAbsoluteFilePath", "assertEquals", "getNodePath", "assertEquals", "getLine", "assertEquals", "getColumn"]}, "focal_class": {"identifier": "ValidationViolation", "superclass": "extends ValidationMessage", "interfaces": "", "fields": [{"original_string": "private final String validatorId;", "modifier": "private final", "type": "String", "declarator": "validatorId", "var_name": "validatorId"}], "methods": [{"identifier": "wrapMessages", "parameters": "(String validatorId, Collection<? extends ValidationMessage> messages, Path filePath, Path basePath, String nodePath, int line, int column)", "modifiers": "public static final", "return": "Collection<ValidationViolation>", "signature": "Collection<ValidationViolation> wrapMessages(String validatorId, Collection<? extends ValidationMessage> messages, Path filePath, Path basePath, String nodePath, int line, int column)", "full_signature": "public static final Collection<ValidationViolation> wrapMessages(String validatorId, Collection<? extends ValidationMessage> messages, Path filePath, Path basePath, String nodePath, int line, int column)", "class_method_signature": "ValidationViolation.wrapMessages(String validatorId, Collection<? extends ValidationMessage> messages, Path filePath, Path basePath, String nodePath, int line, int column)", "testcase": false, "constructor": false}, {"identifier": "wrapMessage", "parameters": "(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column)", "modifiers": "public static final", "return": "ValidationViolation", "signature": "ValidationViolation wrapMessage(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column)", "full_signature": "public static final ValidationViolation wrapMessage(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column)", "class_method_signature": "ValidationViolation.wrapMessage(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column)", "testcase": false, "constructor": false}, {"identifier": "ValidationViolation", "parameters": "(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "modifiers": "", "return": "", "signature": " ValidationViolation(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "full_signature": "  ValidationViolation(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "class_method_signature": "ValidationViolation.ValidationViolation(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "testcase": false, "constructor": true}, {"identifier": "ValidationViolation", "parameters": "(String validatorId, ValidationMessage message)", "modifiers": "private", "return": "", "signature": " ValidationViolation(String validatorId, ValidationMessage message)", "full_signature": "private  ValidationViolation(String validatorId, ValidationMessage message)", "class_method_signature": "ValidationViolation.ValidationViolation(String validatorId, ValidationMessage message)", "testcase": false, "constructor": true}, {"identifier": "ValidationViolation", "parameters": "(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message)", "modifiers": "public", "return": "", "signature": " ValidationViolation(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message)", "full_signature": "public  ValidationViolation(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message)", "class_method_signature": "ValidationViolation.ValidationViolation(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message)", "testcase": false, "constructor": true}, {"identifier": "ValidationViolation", "parameters": "(@NotNull ValidationMessageSeverity severity, @NotNull String message)", "modifiers": "public", "return": "", "signature": " ValidationViolation(@NotNull ValidationMessageSeverity severity, @NotNull String message)", "full_signature": "public  ValidationViolation(@NotNull ValidationMessageSeverity severity, @NotNull String message)", "class_method_signature": "ValidationViolation.ValidationViolation(@NotNull ValidationMessageSeverity severity, @NotNull String message)", "testcase": false, "constructor": true}, {"identifier": "ValidationViolation", "parameters": "(@NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "modifiers": "public", "return": "", "signature": " ValidationViolation(@NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "full_signature": "public  ValidationViolation(@NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "class_method_signature": "ValidationViolation.ValidationViolation(@NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "testcase": false, "constructor": true}, {"identifier": "ValidationViolation", "parameters": "(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "modifiers": "public", "return": "", "signature": " ValidationViolation(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "full_signature": "public  ValidationViolation(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "class_method_signature": "ValidationViolation.ValidationViolation(String validatorId, @NotNull ValidationMessageSeverity severity, @NotNull String message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "testcase": false, "constructor": true}, {"identifier": "getAbsoluteFilePath", "parameters": "()", "modifiers": "public @Nullable", "return": "Path", "signature": "Path getAbsoluteFilePath()", "full_signature": "public @Nullable Path getAbsoluteFilePath()", "class_method_signature": "ValidationViolation.getAbsoluteFilePath()", "testcase": false, "constructor": false}, {"identifier": "getValidatorId", "parameters": "()", "modifiers": "public @Nullable", "return": "String", "signature": "String getValidatorId()", "full_signature": "public @Nullable String getValidatorId()", "class_method_signature": "ValidationViolation.getValidatorId()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ValidationViolation.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ValidationViolation.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ValidationViolation.toString()", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/ValidationViolation.java"}, "focal_method": {"identifier": "ValidationViolation", "parameters": "(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "modifiers": "", "return": "", "body": "ValidationViolation(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t) {\n        // potentially overwrite line, column and throwable from wrapped message (but only if not yet set there)\n        super(message.getSeverity(), message.getMessage(), message.getNodePath() != null ? message.getNodePath() : nodePath, message.getFilePath() != null ? message.getFilePath() : filePath, message.getBasePath() != null ? message.getBasePath() : basePath, message.getLine() != 0 ?  message.getLine() : line, message.getColumn() != 0 ? message.getColumn() : column, message.getThrowable() != null ? message.getThrowable() : t);\n        \n        this.validatorId = validatorId;\n    }", "signature": " ValidationViolation(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "full_signature": "  ValidationViolation(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "class_method_signature": "ValidationViolation.ValidationViolation(String validatorId, ValidationMessage message, Path filePath, Path basePath, String nodePath, int line, int column, Throwable t)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}