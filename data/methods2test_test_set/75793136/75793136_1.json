{"test_class": {"identifier": "GitHubApiControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@LocalServerPort\n    private int port;", "modifier": "@LocalServerPort\n    private", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "@Autowired\n    private TestRestTemplate restTemplate;", "modifier": "@Autowired\n    private", "type": "TestRestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}], "file": "native-cloud-app-1/src/test/java/com/bingohuang/api/GitHubApiControllerTest.java"}, "test_case": {"identifier": "testDiscoverUserByScreenName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDiscoverUserByScreenName() throws Exception {\n        ResponseEntity<User> user1 = restTemplate.getForEntity(\"http://localhost:\" + port + \"/v1/user/bingohuang\", User.class);\n        assertEquals(HttpStatus.OK, user1.getStatusCode());\n\n        ResponseEntity<User> user2 = restTemplate.getForEntity(\"http://localhost:\" + port + \"/v1/user/163yun\", User.class);\n        assertEquals(HttpStatus.OK, user2.getStatusCode());\n\n        ResponseEntity<User> user3 = restTemplate.getForEntity(\"http://localhost:\" + port + \"/v1/user/huangqingbing\", User.class);\n        assertEquals(HttpStatus.OK, user3.getStatusCode());\n    }", "signature": "void testDiscoverUserByScreenName()", "full_signature": "@Test public void testDiscoverUserByScreenName()", "class_method_signature": "GitHubApiControllerTest.testDiscoverUserByScreenName()", "testcase": true, "constructor": false, "invocations": ["getForEntity", "assertEquals", "getStatusCode", "getForEntity", "assertEquals", "getStatusCode", "getForEntity", "assertEquals", "getStatusCode"]}, "focal_class": {"identifier": "GitHubApiController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final GitHubService gitHubService;", "modifier": "private final", "type": "GitHubService", "declarator": "gitHubService", "var_name": "gitHubService"}, {"original_string": "private static final String template = \"Hello, %s!\";", "modifier": "private static final", "type": "String", "declarator": "template = \"Hello, %s!\"", "var_name": "template"}, {"original_string": "private final AtomicLong counter = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "counter = new AtomicLong()", "var_name": "counter"}], "methods": [{"identifier": "GitHubApiController", "parameters": "(GitHubService gitHubService)", "modifiers": "@Autowired public", "return": "", "signature": " GitHubApiController(GitHubService gitHubService)", "full_signature": "@Autowired public  GitHubApiController(GitHubService gitHubService)", "class_method_signature": "GitHubApiController.GitHubApiController(GitHubService gitHubService)", "testcase": false, "constructor": true}, {"identifier": "discoverUserByScreenName", "parameters": "(@PathVariable(\"screenName\")  String screenName)", "modifiers": "@GetMapping(\"user/{screenName}\") public", "return": "ResponseEntity<User>", "signature": "ResponseEntity<User> discoverUserByScreenName(@PathVariable(\"screenName\")  String screenName)", "full_signature": "@GetMapping(\"user/{screenName}\") public ResponseEntity<User> discoverUserByScreenName(@PathVariable(\"screenName\")  String screenName)", "class_method_signature": "GitHubApiController.discoverUserByScreenName(@PathVariable(\"screenName\")  String screenName)", "testcase": false, "constructor": false}], "file": "native-cloud-app-1/src/main/java/com/bingohuang/api/GitHubApiController.java"}, "focal_method": {"identifier": "discoverUserByScreenName", "parameters": "(@PathVariable(\"screenName\")  String screenName)", "modifiers": "@GetMapping(\"user/{screenName}\") public", "return": "ResponseEntity<User>", "body": "@GetMapping(\"user/{screenName}\")\n    public ResponseEntity<User> discoverUserByScreenName(@PathVariable(\"screenName\")  String screenName) {\n        return Optional.of(ResponseEntity.ok(gitHubService.discoverUserByScreenName(screenName)))\n                .or(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));\n    }", "signature": "ResponseEntity<User> discoverUserByScreenName(@PathVariable(\"screenName\")  String screenName)", "full_signature": "@GetMapping(\"user/{screenName}\") public ResponseEntity<User> discoverUserByScreenName(@PathVariable(\"screenName\")  String screenName)", "class_method_signature": "GitHubApiController.discoverUserByScreenName(@PathVariable(\"screenName\")  String screenName)", "testcase": false, "constructor": false, "invocations": ["or", "of", "ok", "discoverUserByScreenName"]}, "repository": {"repo_id": 75793136, "url": "https://github.com/163yun/cloud-native-app-sample", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 15, "size": 203, "license": "licensed"}}