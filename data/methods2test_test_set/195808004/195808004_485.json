{"test_class": {"identifier": "TestResourceTrackerService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static File TEMP_DIR = new File(System.getProperty(\n      \"test.build.data\", \"/tmp\"), \"decommision\");", "modifier": "private final static", "type": "File", "declarator": "TEMP_DIR = new File(System.getProperty(\n      \"test.build.data\", \"/tmp\"), \"decommision\")", "var_name": "TEMP_DIR"}, {"original_string": "private final File hostFile = new File(TEMP_DIR + File.separator + \"hostFile.txt\");", "modifier": "private final", "type": "File", "declarator": "hostFile = new File(TEMP_DIR + File.separator + \"hostFile.txt\")", "var_name": "hostFile"}, {"original_string": "private MockRM rm;", "modifier": "private", "type": "MockRM", "declarator": "rm", "var_name": "rm"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/TestResourceTrackerService.java"}, "test_case": {"identifier": "testReconnectNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReconnectNode() throws Exception {\n    final DrainDispatcher dispatcher = new DrainDispatcher();\n    rm = new MockRM() {\n      @Override\n      protected EventHandler<SchedulerEvent> createSchedulerEventDispatcher() {\n        return new SchedulerEventDispatcher(this.scheduler) {\n          @Override\n          public void handle(SchedulerEvent event) {\n            scheduler.handle(event);\n          }\n        };\n      }\n\n      @Override\n      protected Dispatcher createDispatcher() {\n        return dispatcher;\n      }\n    };\n    rm.start();\n\n    MockNM nm1 = rm.registerNode(\"host1:1234\", 5120);\n    MockNM nm2 = rm.registerNode(\"host2:5678\", 5120);\n    nm1.nodeHeartbeat(true);\n    nm2.nodeHeartbeat(false);\n    dispatcher.await();\n    checkUnealthyNMCount(rm, nm2, true, 1);\n    final int expectedNMs = ClusterMetrics.getMetrics().getNumActiveNMs();\n    QueueMetrics metrics = rm.getResourceScheduler().getRootQueueMetrics();\n    // TODO Metrics incorrect in case of the FifoScheduler\n    Assert.assertEquals(5120, metrics.getAvailableMB());\n\n    // reconnect of healthy node\n    nm1 = rm.registerNode(\"host1:1234\", 5120);\n    NodeHeartbeatResponse response = nm1.nodeHeartbeat(true);\n    Assert.assertTrue(NodeAction.NORMAL.equals(response.getNodeAction()));\n    dispatcher.await();\n    Assert.assertEquals(expectedNMs, ClusterMetrics.getMetrics().getNumActiveNMs());\n    checkUnealthyNMCount(rm, nm2, true, 1);\n\n    // reconnect of unhealthy node\n    nm2 = rm.registerNode(\"host2:5678\", 5120);\n    response = nm2.nodeHeartbeat(false);\n    Assert.assertTrue(NodeAction.NORMAL.equals(response.getNodeAction()));\n    dispatcher.await();\n    Assert.assertEquals(expectedNMs, ClusterMetrics.getMetrics().getNumActiveNMs());\n    checkUnealthyNMCount(rm, nm2, true, 1);\n    \n    // unhealthy node changed back to healthy\n    nm2 = rm.registerNode(\"host2:5678\", 5120);\n    dispatcher.await();\n    response = nm2.nodeHeartbeat(true);\n    response = nm2.nodeHeartbeat(true);\n    dispatcher.await();\n    Assert.assertEquals(5120 + 5120, metrics.getAvailableMB());\n\n    // reconnect of node with changed capability\n    nm1 = rm.registerNode(\"host2:5678\", 10240);\n    dispatcher.await();\n    response = nm1.nodeHeartbeat(true);\n    dispatcher.await();\n    Assert.assertTrue(NodeAction.NORMAL.equals(response.getNodeAction()));\n    Assert.assertEquals(5120 + 10240, metrics.getAvailableMB());\n\n    // reconnect of node with changed capability and running applications\n    List<ApplicationId> runningApps = new ArrayList<ApplicationId>();\n    runningApps.add(ApplicationId.newInstance(1, 0));\n    nm1 = rm.registerNode(\"host2:5678\", 15360, 2, runningApps);\n    dispatcher.await();\n    response = nm1.nodeHeartbeat(true);\n    dispatcher.await();\n    Assert.assertTrue(NodeAction.NORMAL.equals(response.getNodeAction()));\n    Assert.assertEquals(5120 + 15360, metrics.getAvailableMB());\n    \n    // reconnect healthy node changing http port\n    nm1 = new MockNM(\"host1:1234\", 5120, rm.getResourceTrackerService());\n    nm1.setHttpPort(3);\n    nm1.registerNode();\n    dispatcher.await();\n    response = nm1.nodeHeartbeat(true);\n    response = nm1.nodeHeartbeat(true);\n    dispatcher.await();\n    RMNode rmNode = rm.getRMContext().getRMNodes().get(nm1.getNodeId());\n    Assert.assertEquals(3, rmNode.getHttpPort());\n    Assert.assertEquals(5120, rmNode.getTotalCapability().getMemory());\n    Assert.assertEquals(5120 + 15360, metrics.getAvailableMB());\n\n  }", "signature": "void testReconnectNode()", "full_signature": "@Test public void testReconnectNode()", "class_method_signature": "TestResourceTrackerService.testReconnectNode()", "testcase": true, "constructor": false, "invocations": ["handle", "start", "registerNode", "registerNode", "nodeHeartbeat", "nodeHeartbeat", "await", "checkUnealthyNMCount", "getNumActiveNMs", "getMetrics", "getRootQueueMetrics", "getResourceScheduler", "assertEquals", "getAvailableMB", "registerNode", "nodeHeartbeat", "assertTrue", "equals", "getNodeAction", "await", "assertEquals", "getNumActiveNMs", "getMetrics", "checkUnealthyNMCount", "registerNode", "nodeHeartbeat", "assertTrue", "equals", "getNodeAction", "await", "assertEquals", "getNumActiveNMs", "getMetrics", "checkUnealthyNMCount", "registerNode", "await", "nodeHeartbeat", "nodeHeartbeat", "await", "assertEquals", "getAvailableMB", "registerNode", "await", "nodeHeartbeat", "await", "assertTrue", "equals", "getNodeAction", "assertEquals", "getAvailableMB", "add", "newInstance", "registerNode", "await", "nodeHeartbeat", "await", "assertTrue", "equals", "getNodeAction", "assertEquals", "getAvailableMB", "getResourceTrackerService", "setHttpPort", "registerNode", "await", "nodeHeartbeat", "nodeHeartbeat", "await", "get", "getRMNodes", "getRMContext", "getNodeId", "assertEquals", "getHttpPort", "assertEquals", "getMemory", "getTotalCapability", "assertEquals", "getAvailableMB"]}, "focal_class": {"identifier": "ResourceTrackerService", "superclass": "extends AbstractService", "interfaces": "implements\n    ResourceTracker", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(ResourceTrackerService.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(ResourceTrackerService.class)", "var_name": "LOG"}, {"original_string": "private static final RecordFactory recordFactory = \n    RecordFactoryProvider.getRecordFactory(null);", "modifier": "private static final", "type": "RecordFactory", "declarator": "recordFactory = \n    RecordFactoryProvider.getRecordFactory(null)", "var_name": "recordFactory"}, {"original_string": "private final RMContext rmContext;", "modifier": "private final", "type": "RMContext", "declarator": "rmContext", "var_name": "rmContext"}, {"original_string": "private final NodesListManager nodesListManager;", "modifier": "private final", "type": "NodesListManager", "declarator": "nodesListManager", "var_name": "nodesListManager"}, {"original_string": "private final NMLivelinessMonitor nmLivelinessMonitor;", "modifier": "private final", "type": "NMLivelinessMonitor", "declarator": "nmLivelinessMonitor", "var_name": "nmLivelinessMonitor"}, {"original_string": "private final RMContainerTokenSecretManager containerTokenSecretManager;", "modifier": "private final", "type": "RMContainerTokenSecretManager", "declarator": "containerTokenSecretManager", "var_name": "containerTokenSecretManager"}, {"original_string": "private final NMTokenSecretManagerInRM nmTokenSecretManager;", "modifier": "private final", "type": "NMTokenSecretManagerInRM", "declarator": "nmTokenSecretManager", "var_name": "nmTokenSecretManager"}, {"original_string": "private long nextHeartBeatInterval;", "modifier": "private", "type": "long", "declarator": "nextHeartBeatInterval", "var_name": "nextHeartBeatInterval"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private InetSocketAddress resourceTrackerAddress;", "modifier": "private", "type": "InetSocketAddress", "declarator": "resourceTrackerAddress", "var_name": "resourceTrackerAddress"}, {"original_string": "private String minimumNodeManagerVersion;", "modifier": "private", "type": "String", "declarator": "minimumNodeManagerVersion", "var_name": "minimumNodeManagerVersion"}, {"original_string": "private static final NodeHeartbeatResponse resync = recordFactory\n      .newRecordInstance(NodeHeartbeatResponse.class);", "modifier": "private static final", "type": "NodeHeartbeatResponse", "declarator": "resync = recordFactory\n      .newRecordInstance(NodeHeartbeatResponse.class)", "var_name": "resync"}, {"original_string": "private static final NodeHeartbeatResponse shutDown = recordFactory\n  .newRecordInstance(NodeHeartbeatResponse.class);", "modifier": "private static final", "type": "NodeHeartbeatResponse", "declarator": "shutDown = recordFactory\n  .newRecordInstance(NodeHeartbeatResponse.class)", "var_name": "shutDown"}, {"original_string": "private int minAllocMb;", "modifier": "private", "type": "int", "declarator": "minAllocMb", "var_name": "minAllocMb"}, {"original_string": "private int minAllocVcores;", "modifier": "private", "type": "int", "declarator": "minAllocVcores", "var_name": "minAllocVcores"}], "methods": [{"identifier": "ResourceTrackerService", "parameters": "(RMContext rmContext,\n      NodesListManager nodesListManager,\n      NMLivelinessMonitor nmLivelinessMonitor,\n      RMContainerTokenSecretManager containerTokenSecretManager,\n      NMTokenSecretManagerInRM nmTokenSecretManager)", "modifiers": "public", "return": "", "signature": " ResourceTrackerService(RMContext rmContext,\n      NodesListManager nodesListManager,\n      NMLivelinessMonitor nmLivelinessMonitor,\n      RMContainerTokenSecretManager containerTokenSecretManager,\n      NMTokenSecretManagerInRM nmTokenSecretManager)", "full_signature": "public  ResourceTrackerService(RMContext rmContext,\n      NodesListManager nodesListManager,\n      NMLivelinessMonitor nmLivelinessMonitor,\n      RMContainerTokenSecretManager containerTokenSecretManager,\n      NMTokenSecretManagerInRM nmTokenSecretManager)", "class_method_signature": "ResourceTrackerService.ResourceTrackerService(RMContext rmContext,\n      NodesListManager nodesListManager,\n      NMLivelinessMonitor nmLivelinessMonitor,\n      RMContainerTokenSecretManager containerTokenSecretManager,\n      NMTokenSecretManagerInRM nmTokenSecretManager)", "testcase": false, "constructor": true}, {"identifier": "serviceInit", "parameters": "(Configuration conf)", "modifiers": "@Override protected", "return": "void", "signature": "void serviceInit(Configuration conf)", "full_signature": "@Override protected void serviceInit(Configuration conf)", "class_method_signature": "ResourceTrackerService.serviceInit(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "serviceStart", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStart()", "full_signature": "@Override protected void serviceStart()", "class_method_signature": "ResourceTrackerService.serviceStart()", "testcase": false, "constructor": false}, {"identifier": "serviceStop", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void serviceStop()", "full_signature": "@Override protected void serviceStop()", "class_method_signature": "ResourceTrackerService.serviceStop()", "testcase": false, "constructor": false}, {"identifier": "handleNMContainerStatus", "parameters": "(NMContainerStatus containerStatus, NodeId nodeId)", "modifiers": "@SuppressWarnings(\"unchecked\") @VisibleForTesting", "return": "void", "signature": "void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId)", "full_signature": "@SuppressWarnings(\"unchecked\") @VisibleForTesting void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId)", "class_method_signature": "ResourceTrackerService.handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId)", "testcase": false, "constructor": false}, {"identifier": "registerNodeManager", "parameters": "(\n      RegisterNodeManagerRequest request)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "RegisterNodeManagerResponse", "signature": "RegisterNodeManagerResponse registerNodeManager(\n      RegisterNodeManagerRequest request)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public RegisterNodeManagerResponse registerNodeManager(\n      RegisterNodeManagerRequest request)", "class_method_signature": "ResourceTrackerService.registerNodeManager(\n      RegisterNodeManagerRequest request)", "testcase": false, "constructor": false}, {"identifier": "nodeHeartbeat", "parameters": "(NodeHeartbeatRequest request)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "NodeHeartbeatResponse", "signature": "NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request)", "class_method_signature": "ResourceTrackerService.nodeHeartbeat(NodeHeartbeatRequest request)", "testcase": false, "constructor": false}, {"identifier": "populateKeys", "parameters": "(NodeHeartbeatRequest request,\n      NodeHeartbeatResponse nodeHeartBeatResponse)", "modifiers": "private", "return": "void", "signature": "void populateKeys(NodeHeartbeatRequest request,\n      NodeHeartbeatResponse nodeHeartBeatResponse)", "full_signature": "private void populateKeys(NodeHeartbeatRequest request,\n      NodeHeartbeatResponse nodeHeartBeatResponse)", "class_method_signature": "ResourceTrackerService.populateKeys(NodeHeartbeatRequest request,\n      NodeHeartbeatResponse nodeHeartBeatResponse)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(String hostName)", "modifiers": "public static", "return": "Node", "signature": "Node resolve(String hostName)", "full_signature": "public static Node resolve(String hostName)", "class_method_signature": "ResourceTrackerService.resolve(String hostName)", "testcase": false, "constructor": false}, {"identifier": "refreshServiceAcls", "parameters": "(Configuration configuration, \n      PolicyProvider policyProvider)", "modifiers": "", "return": "void", "signature": "void refreshServiceAcls(Configuration configuration, \n      PolicyProvider policyProvider)", "full_signature": " void refreshServiceAcls(Configuration configuration, \n      PolicyProvider policyProvider)", "class_method_signature": "ResourceTrackerService.refreshServiceAcls(Configuration configuration, \n      PolicyProvider policyProvider)", "testcase": false, "constructor": false}, {"identifier": "getServer", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "Server", "signature": "Server getServer()", "full_signature": "@VisibleForTesting public Server getServer()", "class_method_signature": "ResourceTrackerService.getServer()", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"}, "focal_method": {"identifier": "nodeHeartbeat", "parameters": "(NodeHeartbeatRequest request)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "NodeHeartbeatResponse", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request)\n      throws YarnException, IOException {\n\n    NodeStatus remoteNodeStatus = request.getNodeStatus();\n    /**\n     * Here is the node heartbeat sequence...\n     * 1. Check if it's a valid (i.e. not excluded) node\n     * 2. Check if it's a registered node\n     * 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat\n     * 4. Send healthStatus to RMNode\n     */\n\n    NodeId nodeId = remoteNodeStatus.getNodeId();\n\n    // 1. Check if it's a valid (i.e. not excluded) node\n    if (!this.nodesListManager.isValidNode(nodeId.getHost())) {\n      String message =\n          \"Disallowed NodeManager nodeId: \" + nodeId + \" hostname: \"\n              + nodeId.getHost();\n      LOG.info(message);\n      shutDown.setDiagnosticsMessage(message);\n      return shutDown;\n    }\n\n    // 2. Check if it's a registered node\n    RMNode rmNode = this.rmContext.getRMNodes().get(nodeId);\n    if (rmNode == null) {\n      /* node does not exist */\n      String message = \"Node not found resyncing \" + remoteNodeStatus.getNodeId();\n      LOG.info(message);\n      resync.setDiagnosticsMessage(message);\n      return resync;\n    }\n\n    // Send ping\n    this.nmLivelinessMonitor.receivedPing(nodeId);\n\n    // 3. Check if it's a 'fresh' heartbeat i.e. not duplicate heartbeat\n    NodeHeartbeatResponse lastNodeHeartbeatResponse = rmNode.getLastNodeHeartBeatResponse();\n    if (remoteNodeStatus.getResponseId() + 1 == lastNodeHeartbeatResponse\n        .getResponseId()) {\n      LOG.info(\"Received duplicate heartbeat from node \"\n          + rmNode.getNodeAddress()+ \" responseId=\" + remoteNodeStatus.getResponseId());\n      return lastNodeHeartbeatResponse;\n    } else if (remoteNodeStatus.getResponseId() + 1 < lastNodeHeartbeatResponse\n        .getResponseId()) {\n      String message =\n          \"Too far behind rm response id:\"\n              + lastNodeHeartbeatResponse.getResponseId() + \" nm response id:\"\n              + remoteNodeStatus.getResponseId();\n      LOG.info(message);\n      resync.setDiagnosticsMessage(message);\n      // TODO: Just sending reboot is not enough. Think more.\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMNodeEvent(nodeId, RMNodeEventType.REBOOTING));\n      return resync;\n    }\n\n    // Heartbeat response\n    NodeHeartbeatResponse nodeHeartBeatResponse = YarnServerBuilderUtils\n        .newNodeHeartbeatResponse(lastNodeHeartbeatResponse.\n            getResponseId() + 1, NodeAction.NORMAL, null, null, null, null,\n            nextHeartBeatInterval);\n    rmNode.updateNodeHeartbeatResponseForCleanup(nodeHeartBeatResponse);\n\n    populateKeys(request, nodeHeartBeatResponse);\n\n    ConcurrentMap<ApplicationId, ByteBuffer> systemCredentials =\n        rmContext.getSystemCredentialsForApps();\n    if (!systemCredentials.isEmpty()) {\n      nodeHeartBeatResponse.setSystemCredentialsForApps(systemCredentials);\n    }\n\n    // 4. Send status to RMNode, saving the latest response.\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMNodeStatusEvent(nodeId, remoteNodeStatus.getNodeHealthStatus(),\n            remoteNodeStatus.getContainersStatuses(), \n            remoteNodeStatus.getKeepAliveApplications(), nodeHeartBeatResponse));\n\n    return nodeHeartBeatResponse;\n  }", "signature": "NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request)", "class_method_signature": "ResourceTrackerService.nodeHeartbeat(NodeHeartbeatRequest request)", "testcase": false, "constructor": false, "invocations": ["getNodeStatus", "getNodeId", "isValidNode", "getHost", "getHost", "info", "setDiagnosticsMessage", "get", "getRMNodes", "getNodeId", "info", "setDiagnosticsMessage", "receivedPing", "getLastNodeHeartBeatResponse", "getResponseId", "getResponseId", "info", "getNodeAddress", "getResponseId", "getResponseId", "getResponseId", "getResponseId", "getResponseId", "info", "setDiagnosticsMessage", "handle", "getEventHandler", "getDispatcher", "newNodeHeartbeatResponse", "getResponseId", "updateNodeHeartbeatResponseForCleanup", "populateKeys", "getSystemCredentialsForApps", "isEmpty", "setSystemCredentialsForApps", "handle", "getEventHandler", "getDispatcher", "getNodeHealthStatus", "getContainersStatuses", "getKeepAliveApplications"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}