{"test_class": {"identifier": "Slf4jReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = mock(Logger.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = mock(Logger.class)", "var_name": "logger"}, {"original_string": "private final Marker marker = mock(Marker.class);", "modifier": "private final", "type": "Marker", "declarator": "marker = mock(Marker.class)", "var_name": "marker"}, {"original_string": "private final MetricRegistry registry = mock(MetricRegistry.class);", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = mock(MetricRegistry.class)", "var_name": "registry"}, {"original_string": "private Set<MetricAttribute> disabledMetricAttributes = null;", "modifier": "private", "type": "Set<MetricAttribute>", "declarator": "disabledMetricAttributes = null", "var_name": "disabledMetricAttributes"}], "file": "metrics-core/src/test/java/com/codahale/metrics/Slf4jReporterTest.java"}, "test_case": {"identifier": "reportsTimerValuesDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reportsTimerValuesDefault() {\n        final Timer timer = timer();\n        when(logger.isInfoEnabled(marker)).thenReturn(true);\n\n        infoReporter().report(map(),\n                map(),\n                map(),\n                map(),\n                map(\"test.another.timer\", timer));\n\n        verify(logger).info(marker, \"type=TIMER, name=prefix.test.another.timer, count=1, min=300.0, max=100.0, \" +\n                \"mean=200.0, stddev=400.0, p50=500.0, p75=600.0, p95=700.0, p98=800.0, p99=900.0, p999=1000.0,\" +\n                \" m1_rate=3.0, m5_rate=4.0, m15_rate=5.0, mean_rate=2.0, rate_unit=events/second, duration_unit=milliseconds\");\n    }", "signature": "void reportsTimerValuesDefault()", "full_signature": "@Test public void reportsTimerValuesDefault()", "class_method_signature": "Slf4jReporterTest.reportsTimerValuesDefault()", "testcase": true, "constructor": false, "invocations": ["timer", "thenReturn", "when", "isInfoEnabled", "report", "infoReporter", "map", "map", "map", "map", "map", "info", "verify"]}, "focal_class": {"identifier": "Slf4jReporter", "superclass": "extends ScheduledReporter", "interfaces": "", "fields": [{"original_string": "private final LoggerProxy loggerProxy;", "modifier": "private final", "type": "LoggerProxy", "declarator": "loggerProxy", "var_name": "loggerProxy"}, {"original_string": "private final Marker marker;", "modifier": "private final", "type": "Marker", "declarator": "marker", "var_name": "marker"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}], "methods": [{"identifier": "forRegistry", "parameters": "(MetricRegistry registry)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(MetricRegistry registry)", "full_signature": "public static Builder forRegistry(MetricRegistry registry)", "class_method_signature": "Slf4jReporter.forRegistry(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "Slf4jReporter", "parameters": "(MetricRegistry registry,\n                          LoggerProxy loggerProxy,\n                          Marker marker,\n                          String prefix,\n                          TimeUnit rateUnit,\n                          TimeUnit durationUnit,\n                          MetricFilter filter,\n                          ScheduledExecutorService executor,\n                          boolean shutdownExecutorOnStop,\n                          Set<MetricAttribute> disabledMetricAttributes)", "modifiers": "private", "return": "", "signature": " Slf4jReporter(MetricRegistry registry,\n                          LoggerProxy loggerProxy,\n                          Marker marker,\n                          String prefix,\n                          TimeUnit rateUnit,\n                          TimeUnit durationUnit,\n                          MetricFilter filter,\n                          ScheduledExecutorService executor,\n                          boolean shutdownExecutorOnStop,\n                          Set<MetricAttribute> disabledMetricAttributes)", "full_signature": "private  Slf4jReporter(MetricRegistry registry,\n                          LoggerProxy loggerProxy,\n                          Marker marker,\n                          String prefix,\n                          TimeUnit rateUnit,\n                          TimeUnit durationUnit,\n                          MetricFilter filter,\n                          ScheduledExecutorService executor,\n                          boolean shutdownExecutorOnStop,\n                          Set<MetricAttribute> disabledMetricAttributes)", "class_method_signature": "Slf4jReporter.Slf4jReporter(MetricRegistry registry,\n                          LoggerProxy loggerProxy,\n                          Marker marker,\n                          String prefix,\n                          TimeUnit rateUnit,\n                          TimeUnit durationUnit,\n                          MetricFilter filter,\n                          ScheduledExecutorService executor,\n                          boolean shutdownExecutorOnStop,\n                          Set<MetricAttribute> disabledMetricAttributes)", "testcase": false, "constructor": true}, {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "Slf4jReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "logTimer", "parameters": "(StringBuilder b, String name, Timer timer)", "modifiers": "private", "return": "void", "signature": "void logTimer(StringBuilder b, String name, Timer timer)", "full_signature": "private void logTimer(StringBuilder b, String name, Timer timer)", "class_method_signature": "Slf4jReporter.logTimer(StringBuilder b, String name, Timer timer)", "testcase": false, "constructor": false}, {"identifier": "logMeter", "parameters": "(StringBuilder b, String name, Meter meter)", "modifiers": "private", "return": "void", "signature": "void logMeter(StringBuilder b, String name, Meter meter)", "full_signature": "private void logMeter(StringBuilder b, String name, Meter meter)", "class_method_signature": "Slf4jReporter.logMeter(StringBuilder b, String name, Meter meter)", "testcase": false, "constructor": false}, {"identifier": "logHistogram", "parameters": "(StringBuilder b, String name, Histogram histogram)", "modifiers": "private", "return": "void", "signature": "void logHistogram(StringBuilder b, String name, Histogram histogram)", "full_signature": "private void logHistogram(StringBuilder b, String name, Histogram histogram)", "class_method_signature": "Slf4jReporter.logHistogram(StringBuilder b, String name, Histogram histogram)", "testcase": false, "constructor": false}, {"identifier": "logCounter", "parameters": "(StringBuilder b, String name, Counter counter)", "modifiers": "private", "return": "void", "signature": "void logCounter(StringBuilder b, String name, Counter counter)", "full_signature": "private void logCounter(StringBuilder b, String name, Counter counter)", "class_method_signature": "Slf4jReporter.logCounter(StringBuilder b, String name, Counter counter)", "testcase": false, "constructor": false}, {"identifier": "logGauge", "parameters": "(StringBuilder b, String name, Gauge<?> gauge)", "modifiers": "private", "return": "void", "signature": "void logGauge(StringBuilder b, String name, Gauge<?> gauge)", "full_signature": "private void logGauge(StringBuilder b, String name, Gauge<?> gauge)", "class_method_signature": "Slf4jReporter.logGauge(StringBuilder b, String name, Gauge<?> gauge)", "testcase": false, "constructor": false}, {"identifier": "appendLongDurationIfEnabled", "parameters": "(StringBuilder b, MetricAttribute metricAttribute,\n                                             Supplier<Long> durationSupplier)", "modifiers": "private", "return": "void", "signature": "void appendLongDurationIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                             Supplier<Long> durationSupplier)", "full_signature": "private void appendLongDurationIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                             Supplier<Long> durationSupplier)", "class_method_signature": "Slf4jReporter.appendLongDurationIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                             Supplier<Long> durationSupplier)", "testcase": false, "constructor": false}, {"identifier": "appendDoubleDurationIfEnabled", "parameters": "(StringBuilder b, MetricAttribute metricAttribute,\n                                               Supplier<Double> durationSupplier)", "modifiers": "private", "return": "void", "signature": "void appendDoubleDurationIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                               Supplier<Double> durationSupplier)", "full_signature": "private void appendDoubleDurationIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                               Supplier<Double> durationSupplier)", "class_method_signature": "Slf4jReporter.appendDoubleDurationIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                               Supplier<Double> durationSupplier)", "testcase": false, "constructor": false}, {"identifier": "appendLongIfEnabled", "parameters": "(StringBuilder b, MetricAttribute metricAttribute,\n                                     Supplier<Long> valueSupplier)", "modifiers": "private", "return": "void", "signature": "void appendLongIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                     Supplier<Long> valueSupplier)", "full_signature": "private void appendLongIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                     Supplier<Long> valueSupplier)", "class_method_signature": "Slf4jReporter.appendLongIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                     Supplier<Long> valueSupplier)", "testcase": false, "constructor": false}, {"identifier": "appendDoubleIfEnabled", "parameters": "(StringBuilder b, MetricAttribute metricAttribute,\n                                       Supplier<Double> valueSupplier)", "modifiers": "private", "return": "void", "signature": "void appendDoubleIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                       Supplier<Double> valueSupplier)", "full_signature": "private void appendDoubleIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                       Supplier<Double> valueSupplier)", "class_method_signature": "Slf4jReporter.appendDoubleIfEnabled(StringBuilder b, MetricAttribute metricAttribute,\n                                       Supplier<Double> valueSupplier)", "testcase": false, "constructor": false}, {"identifier": "appendCountIfEnabled", "parameters": "(StringBuilder b, Counting counting)", "modifiers": "private", "return": "void", "signature": "void appendCountIfEnabled(StringBuilder b, Counting counting)", "full_signature": "private void appendCountIfEnabled(StringBuilder b, Counting counting)", "class_method_signature": "Slf4jReporter.appendCountIfEnabled(StringBuilder b, Counting counting)", "testcase": false, "constructor": false}, {"identifier": "appendMetered", "parameters": "(StringBuilder b, Metered meter)", "modifiers": "private", "return": "void", "signature": "void appendMetered(StringBuilder b, Metered meter)", "full_signature": "private void appendMetered(StringBuilder b, Metered meter)", "class_method_signature": "Slf4jReporter.appendMetered(StringBuilder b, Metered meter)", "testcase": false, "constructor": false}, {"identifier": "appendRateIfEnabled", "parameters": "(StringBuilder b, MetricAttribute metricAttribute, Supplier<Double> rateSupplier)", "modifiers": "private", "return": "void", "signature": "void appendRateIfEnabled(StringBuilder b, MetricAttribute metricAttribute, Supplier<Double> rateSupplier)", "full_signature": "private void appendRateIfEnabled(StringBuilder b, MetricAttribute metricAttribute, Supplier<Double> rateSupplier)", "class_method_signature": "Slf4jReporter.appendRateIfEnabled(StringBuilder b, MetricAttribute metricAttribute, Supplier<Double> rateSupplier)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder b, String key, long value)", "modifiers": "private", "return": "void", "signature": "void append(StringBuilder b, String key, long value)", "full_signature": "private void append(StringBuilder b, String key, long value)", "class_method_signature": "Slf4jReporter.append(StringBuilder b, String key, long value)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder b, String key, double value)", "modifiers": "private", "return": "void", "signature": "void append(StringBuilder b, String key, double value)", "full_signature": "private void append(StringBuilder b, String key, double value)", "class_method_signature": "Slf4jReporter.append(StringBuilder b, String key, double value)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder b, String key, String value)", "modifiers": "private", "return": "void", "signature": "void append(StringBuilder b, String key, String value)", "full_signature": "private void append(StringBuilder b, String key, String value)", "class_method_signature": "Slf4jReporter.append(StringBuilder b, String key, String value)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(StringBuilder b, String key, Object value)", "modifiers": "private", "return": "void", "signature": "void append(StringBuilder b, String key, Object value)", "full_signature": "private void append(StringBuilder b, String key, Object value)", "class_method_signature": "Slf4jReporter.append(StringBuilder b, String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "getRateUnit", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getRateUnit()", "full_signature": "@Override protected String getRateUnit()", "class_method_signature": "Slf4jReporter.getRateUnit()", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(String... components)", "modifiers": "private", "return": "String", "signature": "String prefix(String... components)", "full_signature": "private String prefix(String... components)", "class_method_signature": "Slf4jReporter.prefix(String... components)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/Slf4jReporter.java"}, "focal_method": {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers) {\n        if (loggerProxy.isEnabled(marker)) {\n            StringBuilder b = new StringBuilder();\n            for (Entry<String, Gauge> entry : gauges.entrySet()) {\n                logGauge(b, entry.getKey(), entry.getValue());\n            }\n\n            for (Entry<String, Counter> entry : counters.entrySet()) {\n                logCounter(b, entry.getKey(), entry.getValue());\n            }\n\n            for (Entry<String, Histogram> entry : histograms.entrySet()) {\n                logHistogram(b, entry.getKey(), entry.getValue());\n            }\n\n            for (Entry<String, Meter> entry : meters.entrySet()) {\n                logMeter(b, entry.getKey(), entry.getValue());\n            }\n\n            for (Entry<String, Timer> entry : timers.entrySet()) {\n                logTimer(b, entry.getKey(), entry.getValue());\n            }\n        }\n    }", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "Slf4jReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["isEnabled", "entrySet", "logGauge", "getKey", "getValue", "entrySet", "logCounter", "getKey", "getValue", "entrySet", "logHistogram", "getKey", "getValue", "entrySet", "logMeter", "getKey", "getValue", "entrySet", "logTimer", "getKey", "getValue"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}