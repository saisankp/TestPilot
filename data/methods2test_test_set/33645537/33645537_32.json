{"test_class": {"identifier": "QuickSortTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Comparator<Integer> ascOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn a - b;\n\t\t}\n\t};", "modifier": "private final", "type": "Comparator<Integer>", "declarator": "ascOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn a - b;\n\t\t}\n\t}", "var_name": "ascOrderComparator"}, {"original_string": "private final Comparator<Integer> descOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn b - a;\n\t\t}\n\t};", "modifier": "private final", "type": "Comparator<Integer>", "declarator": "descOrderComparator = new Comparator<Integer>() {\n\t\t@Override\n\t\tpublic int compare(Integer a, Integer b) {\n\t\t\treturn b - a;\n\t\t}\n\t}", "var_name": "descOrderComparator"}], "file": "algs/src/test/java/com/github/kowshik/bigo/sorting/QuickSortTest.java"}, "test_case": {"identifier": "smallerElementsAndPivotsInArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void smallerElementsAndPivotsInArray() {\n\t\tInteger[] array = { 3, 0, 2, 3, -1, -2, 0, 3 };\n\t\tint pivotIndex = QuickSort.partition(array, 0, array.length - 1,\n\t\t\t\tascOrderComparator, 3);\n\t\tassertEquals(7, pivotIndex);\n\t\tassertArrayEquals(\n\t\t\t\t\"Failure => Array returned is not partitioned according to the pivot.\",\n\t\t\t\tarray, new Integer[] { 3, 0, 2, 3, -1, -2, 0, 3 });\n\t}", "signature": "void smallerElementsAndPivotsInArray()", "full_signature": "@Test public void smallerElementsAndPivotsInArray()", "class_method_signature": "QuickSortTest.smallerElementsAndPivotsInArray()", "testcase": true, "constructor": false, "invocations": ["partition", "assertEquals", "assertArrayEquals"]}, "focal_class": {"identifier": "QuickSort", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "quickSort", "parameters": "(T[] array, Comparator<T> comparator)", "modifiers": "public static", "return": "T[]", "signature": "T[] quickSort(T[] array, Comparator<T> comparator)", "full_signature": "public static T[] quickSort(T[] array, Comparator<T> comparator)", "class_method_signature": "QuickSort.quickSort(T[] array, Comparator<T> comparator)", "testcase": false, "constructor": false}, {"identifier": "quickSort", "parameters": "(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator)", "modifiers": "private static", "return": "T[]", "signature": "T[] quickSort(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator)", "full_signature": "private static T[] quickSort(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator)", "class_method_signature": "QuickSort.quickSort(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator)", "testcase": false, "constructor": false}, {"identifier": "getRandomPivotIndex", "parameters": "(int startIndex, int endIndex)", "modifiers": "private static", "return": "int", "signature": "int getRandomPivotIndex(int startIndex, int endIndex)", "full_signature": "private static int getRandomPivotIndex(int startIndex, int endIndex)", "class_method_signature": "QuickSort.getRandomPivotIndex(int startIndex, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "partition", "parameters": "(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "modifiers": "public static", "return": "int", "signature": "int partition(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "full_signature": "public static int partition(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "class_method_signature": "QuickSort.partition(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/kowshik/bigo/sorting/QuickSort.java"}, "focal_method": {"identifier": "partition", "parameters": "(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "modifiers": "public static", "return": "int", "body": "public static <T> int partition(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex) {\n\t\tif (pivotIndex == -1) {\n\t\t\tpivotIndex = getRandomPivotIndex(startIndex, endIndex);\n\t\t}\n\n\t\tcom.github.kowshik.bigo.common.ArrayUtils.swap(array, pivotIndex, endIndex);\n\t\tint swapIndex = startIndex - 1;\n\t\tfor (int index = startIndex; index <= endIndex - 1; index++) {\n\t\t\tif (comparator.compare(array[index], array[endIndex]) <= 0) {\n\t\t\t\tswapIndex++;\n\t\t\t\tcom.github.kowshik.bigo.common.ArrayUtils.swap(array, swapIndex, index);\n\t\t\t}\n\t\t}\n\n\t\tcom.github.kowshik.bigo.common.ArrayUtils.swap(array, swapIndex + 1, endIndex);\n\t\treturn swapIndex + 1;\n\t}", "signature": "int partition(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "full_signature": "public static int partition(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "class_method_signature": "QuickSort.partition(T[] array, int startIndex, int endIndex,\n\t\t\tComparator<T> comparator, int pivotIndex)", "testcase": false, "constructor": false, "invocations": ["getRandomPivotIndex", "swap", "compare", "swap", "swap"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}