{"test_class": {"identifier": "ProvisionerTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/fdroid/fdroid/ProvisionerTest.java"}, "test_case": {"identifier": "parseProvisions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseProvisions() {\n\n        List<Provisioner.ProvisionPlaintext> plaintexts = Arrays.asList(new Provisioner.ProvisionPlaintext(), new Provisioner.ProvisionPlaintext());\n        plaintexts.get(0).setProvisionPath(\"/some/dir/abc.fdrp\");\n        plaintexts.get(0).setRepositoryProvision(\"{\\\"username\\\": \\\"user1\\\", \\\"password\\\": \\\"secret1\\\", \\\"name\\\": \\\"test repo a\\\", \\\"url\\\": \\\"https://example.com/fdroid/repo\\\", \\\"sigfp\\\": \\\"1111222233334444555566667777888899990000aaaabbbbccccddddeeeeffff\\\"}\");\n        plaintexts.get(1).setProvisionPath(\"/some/dir/def.fdrp\");\n        plaintexts.get(1).setRepositoryProvision(\"{\\\"username\\\": \\\"user2\\\", \\\"name\\\": \\\"test repo a\\\", \\\"password\\\": \\\"other secret\\\", \\\"url\\\": \\\"https://example.com/fdroid/repo\\\", \\\"sigfp\\\": \\\"1111222233334444555566667777888899990000aaaabbbbccccddddeeeeffff\\\"}\");\n\n        Provisioner p = new Provisioner();\n        List<Provisioner.Provision> result = p.parseProvisions(plaintexts);\n\n        Assert.assertEquals(\"/some/dir/abc.fdrp\", result.get(0).getProvisonPath());\n        Assert.assertEquals(\"test repo a\", result.get(0).getRepositoryProvision().getName());\n        Assert.assertEquals(\"https://example.com/fdroid/repo\", result.get(0).getRepositoryProvision().getUrl());\n        Assert.assertEquals(\"1111222233334444555566667777888899990000aaaabbbbccccddddeeeeffff\", result.get(0).getRepositoryProvision().getSigfp());\n        Assert.assertEquals(\"user1\", result.get(0).getRepositoryProvision().getUsername());\n        Assert.assertEquals(\"secret1\", result.get(0).getRepositoryProvision().getPassword());\n\n        Assert.assertEquals(\"/some/dir/def.fdrp\", result.get(1).getProvisonPath());\n        Assert.assertEquals(\"test repo a\", result.get(1).getRepositoryProvision().getName());\n        Assert.assertEquals(\"https://example.com/fdroid/repo\", result.get(1).getRepositoryProvision().getUrl());\n        Assert.assertEquals(\"1111222233334444555566667777888899990000aaaabbbbccccddddeeeeffff\", result.get(1).getRepositoryProvision().getSigfp());\n        Assert.assertEquals(\"user2\", result.get(1).getRepositoryProvision().getUsername());\n        Assert.assertEquals(\"other secret\", result.get(1).getRepositoryProvision().getPassword());\n    }", "signature": "void parseProvisions()", "full_signature": "@Test public void parseProvisions()", "class_method_signature": "ProvisionerTest.parseProvisions()", "testcase": true, "constructor": false, "invocations": ["asList", "setProvisionPath", "get", "setRepositoryProvision", "get", "setProvisionPath", "get", "setRepositoryProvision", "get", "parseProvisions", "assertEquals", "getProvisonPath", "get", "assertEquals", "getName", "getRepositoryProvision", "get", "assertEquals", "getUrl", "getRepositoryProvision", "get", "assertEquals", "getSigfp", "getRepositoryProvision", "get", "assertEquals", "getUsername", "getRepositoryProvision", "get", "assertEquals", "getPassword", "getRepositoryProvision", "get", "assertEquals", "getProvisonPath", "get", "assertEquals", "getName", "getRepositoryProvision", "get", "assertEquals", "getUrl", "getRepositoryProvision", "get", "assertEquals", "getSigfp", "getRepositoryProvision", "get", "assertEquals", "getUsername", "getRepositoryProvision", "get", "assertEquals", "getPassword", "getRepositoryProvision", "get"]}, "focal_class": {"identifier": "Provisioner", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TAG = \"Provisioner\";", "modifier": "public static final", "type": "String", "declarator": "TAG = \"Provisioner\"", "var_name": "TAG"}, {"original_string": "private static final String NEW_PROVISIONS_DIR = \"provisions\";", "modifier": "private static final", "type": "String", "declarator": "NEW_PROVISIONS_DIR = \"provisions\"", "var_name": "NEW_PROVISIONS_DIR"}], "methods": [{"identifier": "Provisioner", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Provisioner()", "full_signature": "protected  Provisioner()", "class_method_signature": "Provisioner.Provisioner()", "testcase": false, "constructor": true}, {"identifier": "scanAndProcess", "parameters": "(Context context)", "modifiers": "static", "return": "void", "signature": "void scanAndProcess(Context context)", "full_signature": "static void scanAndProcess(Context context)", "class_method_signature": "Provisioner.scanAndProcess(Context context)", "testcase": false, "constructor": false}, {"identifier": "findProvisionFiles", "parameters": "(Context context)", "modifiers": "private", "return": "List<File>", "signature": "List<File> findProvisionFiles(Context context)", "full_signature": "private List<File> findProvisionFiles(Context context)", "class_method_signature": "Provisioner.findProvisionFiles(Context context)", "testcase": false, "constructor": false}, {"identifier": "findProvisionFilesInDir", "parameters": "(File file)", "modifiers": "", "return": "List<File>", "signature": "List<File> findProvisionFilesInDir(File file)", "full_signature": " List<File> findProvisionFilesInDir(File file)", "class_method_signature": "Provisioner.findProvisionFilesInDir(File file)", "testcase": false, "constructor": false}, {"identifier": "rot13", "parameters": "(String text)", "modifiers": "", "return": "String", "signature": "String rot13(String text)", "full_signature": " String rot13(String text)", "class_method_signature": "Provisioner.rot13(String text)", "testcase": false, "constructor": false}, {"identifier": "deobfuscate", "parameters": "(String obfuscated)", "modifiers": "", "return": "String", "signature": "String deobfuscate(String obfuscated)", "full_signature": " String deobfuscate(String obfuscated)", "class_method_signature": "Provisioner.deobfuscate(String obfuscated)", "testcase": false, "constructor": false}, {"identifier": "extractProvisionsPlaintext", "parameters": "(List<File> files)", "modifiers": "", "return": "List<ProvisionPlaintext>", "signature": "List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "full_signature": " List<ProvisionPlaintext> extractProvisionsPlaintext(List<File> files)", "class_method_signature": "Provisioner.extractProvisionsPlaintext(List<File> files)", "testcase": false, "constructor": false}, {"identifier": "parseProvisions", "parameters": "(List<ProvisionPlaintext> provisionPlaintexts)", "modifiers": "", "return": "List<Provision>", "signature": "List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "full_signature": " List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "class_method_signature": "Provisioner.parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/fdroid/fdroid/Provisioner.java"}, "focal_method": {"identifier": "parseProvisions", "parameters": "(List<ProvisionPlaintext> provisionPlaintexts)", "modifiers": "", "return": "List<Provision>", "body": "List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts) {\n\n        List<Provision> provisions = new ArrayList<>();\n        ObjectMapper mapper = new ObjectMapper();\n\n        if (provisionPlaintexts != null) {\n            for (ProvisionPlaintext provisionPlaintext : provisionPlaintexts) {\n                Provision provision = new Provision();\n                provision.setProvisonPath(provisionPlaintext.getProvisionPath());\n                try {\n                    provision.setRepositoryProvision(\n                            mapper.readValue(provisionPlaintext.getRepositoryProvision(), RepositoryProvision.class));\n                    provisions.add(provision);\n                } catch (IOException e) {\n                    Utils.debugLog(TAG, \"could not parse repository provision\", e);\n                }\n            }\n        }\n\n        return provisions;\n    }", "signature": "List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "full_signature": " List<Provision> parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "class_method_signature": "Provisioner.parseProvisions(List<ProvisionPlaintext> provisionPlaintexts)", "testcase": false, "constructor": false, "invocations": ["setProvisonPath", "getProvisionPath", "setRepositoryProvision", "readValue", "getRepositoryProvision", "add", "debugLog"]}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}