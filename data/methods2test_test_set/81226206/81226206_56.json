{"test_class": {"identifier": "PostmanConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "karate-core/src/test/java/com/intuit/karate/formats/postman/PostmanConverterTest.java"}, "test_case": {"identifier": "testSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuccess() throws IOException {\n        if (FileUtils.isOsWindows()) { // TODO\n            return;\n        }\n        // create the temp file and dirctory\n        File tempSource = File.createTempFile(\"karate-postman-input\", \".postman_collection.json\");\n        tempSource.deleteOnExit();\n        Path tempOutput = Files.createTempDirectory(\"karate-postman-output\");\n        tempOutput.toFile().deleteOnExit();\n\n        // populate the temp source file with the Postman export data\n        InputStream is = getClass().getResourceAsStream(\"postman-echo-single.postman_collection\");\n        String postman = FileUtils.toString(is);\n        Files.write(Paths.get(tempSource.toURI()), postman.getBytes());\n\n        // perform the conversion\n        boolean successful = new PostmanConverter().convert(tempSource.toString(), tempOutput.toString());\n        Assert.assertTrue(successful);\n\n        // load the expected output from the resources\n        is = getClass().getResourceAsStream(\"expected-converted.txt\");\n        String expectedConverted = FileUtils.toString(is);\n\n        // load the actual output form the disk\n        Path actualOutputPath = Paths.get(tempOutput.toString(),\n            tempSource.getName().replace(\".postman_collection.json\", \"\") + \".feature\");\n        String converted = new String(Files.readAllBytes(actualOutputPath), StandardCharsets.UTF_8);\n\n        // the first line is dynamic, as it contains the temp dir characters\n        Assert.assertTrue(converted.startsWith(\"Feature: karate-postman-input\"));\n\n        // trim the file so it doesn't contain the line starting with 'Feature':\n        String convertedTrimmed = Arrays.stream(converted.split(System.lineSeparator()))\n            .filter(line -> !line.startsWith(\"Feature:\"))\n            .collect(Collectors.joining(System.lineSeparator()));\n\n        // assert that the trimmed actual output equals the trimmed expected output\n        Assert.assertEquals(convertedTrimmed.trim(), expectedConverted.trim());\n    }", "signature": "void testSuccess()", "full_signature": "@Test public void testSuccess()", "class_method_signature": "PostmanConverterTest.testSuccess()", "testcase": true, "constructor": false, "invocations": ["isOsWindows", "createTempFile", "deleteOnExit", "createTempDirectory", "deleteOnExit", "toFile", "getResourceAsStream", "getClass", "toString", "write", "get", "toURI", "getBytes", "convert", "toString", "toString", "assertTrue", "getResourceAsStream", "getClass", "toString", "get", "toString", "replace", "getName", "readAllBytes", "assertTrue", "startsWith", "collect", "filter", "stream", "split", "lineSeparator", "startsWith", "joining", "lineSeparator", "assertEquals", "trim", "trim"]}, "focal_class": {"identifier": "PostmanConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final String importFile, final String outputDir)", "modifiers": "public", "return": "boolean", "signature": "boolean convert(final String importFile, final String outputDir)", "full_signature": "public boolean convert(final String importFile, final String outputDir)", "class_method_signature": "PostmanConverter.convert(final String importFile, final String outputDir)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/formats/postman/PostmanConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(final String importFile, final String outputDir)", "modifiers": "public", "return": "boolean", "body": "public boolean convert(final String importFile, final String outputDir) {\n        try {\n            final Path pathTo = Paths.get(importFile);\n            if (!Files.exists(pathTo)) {\n                System.err.println(\"File at '\" + importFile + \"' does not exist; cannot import\");\n                return false;\n            }\n            final String content = new String(Files.readAllBytes(pathTo), StandardCharsets.UTF_8);\n            final List<PostmanItem> items = PostmanUtils.readPostmanJson(content);\n            final String collectionName = pathTo.getFileName().toString()\n                .replace(\".postman_collection\", \"\")\n                .replace(\".json\", \"\");\n            final String converted = PostmanUtils.toKarateFeature(collectionName, items);\n            final Path outputFilePath = Paths.get(outputDir, collectionName + \".feature\");\n            Files.write(outputFilePath, converted.getBytes());\n            System.out.println(\"Converted feature file available at \" + outputFilePath.toAbsolutePath().toString());\n            return true;\n        } catch (IOException e) {\n            System.err.println(\"An error occurred with processing the file - the task could not be completed\");\n            return false;\n        }\n    }", "signature": "boolean convert(final String importFile, final String outputDir)", "full_signature": "public boolean convert(final String importFile, final String outputDir)", "class_method_signature": "PostmanConverter.convert(final String importFile, final String outputDir)", "testcase": false, "constructor": false, "invocations": ["get", "exists", "println", "readAllBytes", "readPostmanJson", "replace", "replace", "toString", "getFileName", "toKarateFeature", "get", "write", "getBytes", "println", "toString", "toAbsolutePath", "println"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}