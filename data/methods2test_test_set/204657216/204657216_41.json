{"test_class": {"identifier": "SchemaTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final KeyspaceTablePair kt1 = new KeyspaceTablePair(\"ks\", \"tbl1\");", "modifier": "private static final", "type": "KeyspaceTablePair", "declarator": "kt1 = new KeyspaceTablePair(\"ks\", \"tbl1\")", "var_name": "kt1"}, {"original_string": "private static final KeyspaceTablePair kt2 = new KeyspaceTablePair(\"ks\", \"tbl2\");", "modifier": "private static final", "type": "KeyspaceTablePair", "declarator": "kt2 = new KeyspaceTablePair(\"ks\", \"tbl2\")", "var_name": "kt2"}, {"original_string": "private static final KeyspaceTablePair kt3 = new KeyspaceTablePair(\"ks\", \"tbl3\");", "modifier": "private static final", "type": "KeyspaceTablePair", "declarator": "kt3 = new KeyspaceTablePair(\"ks\", \"tbl3\")", "var_name": "kt3"}], "file": "spark-job/src/test/java/org/apache/cassandra/diff/SchemaTest.java"}, "test_case": {"identifier": "testSchemaDifference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSchemaDifference() {\n        Schema first = new Schema(ImmutableSet.of(kt1, kt2));\n        Schema second = new Schema(ImmutableSet.of(kt2, kt3));\n        Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>> difference = Schema.difference(first, second);\n        Assert.assertTrue(\"Should contain the distinct table in first schema\", difference.getLeft().contains(kt1));\n        Assert.assertTrue(\"Should contain the distinct table in second schema\", difference.getRight().contains(kt3));\n    }", "signature": "void testSchemaDifference()", "full_signature": "@Test public void testSchemaDifference()", "class_method_signature": "SchemaTest.testSchemaDifference()", "testcase": true, "constructor": false, "invocations": ["of", "of", "difference", "assertTrue", "contains", "getLeft", "assertTrue", "contains", "getRight"]}, "focal_class": {"identifier": "Schema", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> DEFAULT_FILTER = ImmutableSet.of(\n        \"system\", \"system_schema\", \"system_traces\", \"system_auth\", \"system_distributed\", \"system_virtual_schema\", \"system_views\"\n    );", "modifier": "private static final", "type": "Set<String>", "declarator": "DEFAULT_FILTER = ImmutableSet.of(\n        \"system\", \"system_schema\", \"system_traces\", \"system_auth\", \"system_distributed\", \"system_virtual_schema\", \"system_views\"\n    )", "var_name": "DEFAULT_FILTER"}, {"original_string": "private final Set<KeyspaceTablePair> qualifiedTables;", "modifier": "private final", "type": "Set<KeyspaceTablePair>", "declarator": "qualifiedTables", "var_name": "qualifiedTables"}], "methods": [{"identifier": "Schema", "parameters": "(Metadata metadata, JobConfiguration configuration)", "modifiers": "public", "return": "", "signature": " Schema(Metadata metadata, JobConfiguration configuration)", "full_signature": "public  Schema(Metadata metadata, JobConfiguration configuration)", "class_method_signature": "Schema.Schema(Metadata metadata, JobConfiguration configuration)", "testcase": false, "constructor": true}, {"identifier": "Schema", "parameters": "(Set<KeyspaceTablePair> qualifiedTables)", "modifiers": "public", "return": "", "signature": " Schema(Set<KeyspaceTablePair> qualifiedTables)", "full_signature": "public  Schema(Set<KeyspaceTablePair> qualifiedTables)", "class_method_signature": "Schema.Schema(Set<KeyspaceTablePair> qualifiedTables)", "testcase": false, "constructor": true}, {"identifier": "intersect", "parameters": "(Schema other)", "modifiers": "public", "return": "Schema", "signature": "Schema intersect(Schema other)", "full_signature": "public Schema intersect(Schema other)", "class_method_signature": "Schema.intersect(Schema other)", "testcase": false, "constructor": false}, {"identifier": "toQualifiedTableList", "parameters": "()", "modifiers": "public", "return": "List<KeyspaceTablePair>", "signature": "List<KeyspaceTablePair> toQualifiedTableList()", "full_signature": "public List<KeyspaceTablePair> toQualifiedTableList()", "class_method_signature": "Schema.toQualifiedTableList()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Schema.size()", "testcase": false, "constructor": false}, {"identifier": "getKeyspaceFilter", "parameters": "(JobConfiguration configuration)", "modifiers": "@VisibleForTesting public static", "return": "Set<String>", "signature": "Set<String> getKeyspaceFilter(JobConfiguration configuration)", "full_signature": "@VisibleForTesting public static Set<String> getKeyspaceFilter(JobConfiguration configuration)", "class_method_signature": "Schema.getKeyspaceFilter(JobConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(Schema first, Schema second)", "modifiers": "public static", "return": "Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>>", "signature": "Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>> difference(Schema first, Schema second)", "full_signature": "public static Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>> difference(Schema first, Schema second)", "class_method_signature": "Schema.difference(Schema first, Schema second)", "testcase": false, "constructor": false}], "file": "spark-job/src/main/java/org/apache/cassandra/diff/Schema.java"}, "focal_method": {"identifier": "difference", "parameters": "(Schema first, Schema second)", "modifiers": "public static", "return": "Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>>", "body": "public static Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>> difference(Schema first, Schema second) {\n        return Pair.of(Sets.difference(first.qualifiedTables, second.qualifiedTables), Sets.difference(second.qualifiedTables, first.qualifiedTables));\n    }", "signature": "Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>> difference(Schema first, Schema second)", "full_signature": "public static Pair<Set<KeyspaceTablePair>, Set<KeyspaceTablePair>> difference(Schema first, Schema second)", "class_method_signature": "Schema.difference(Schema first, Schema second)", "testcase": false, "constructor": false, "invocations": ["of", "difference", "difference"]}, "repository": {"repo_id": 204657216, "url": "https://github.com/apache/cassandra-diff", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 5, "size": 112, "license": "licensed"}}