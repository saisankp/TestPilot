{"test_class": {"identifier": "LanguageServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(LanguageServiceTest.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LanguageServiceTest.class)", "var_name": "logger"}, {"original_string": "@Mock\n    ProjectRepository projectRepository;", "modifier": "@Mock", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "@InjectMocks\n    LanguageService languageService;", "modifier": "@InjectMocks", "type": "LanguageService", "declarator": "languageService", "var_name": "languageService"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/service/LanguageServiceTest.java"}, "test_case": {"identifier": "checkProgrammingLanguage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkProgrammingLanguage() {\n\n        logger.info(\"Setting up the projects...\");\n        Project p1 = new ProjectBuilder().commitsCount(10)\n                .contributorsCount(5)\n                .forksCount(1)\n                .gitHubProjectId(12345)\n                .description(\"bogus project 1\")\n                .name(\"bogus project 1\")\n                .primaryLanguage(\"Java\")\n                .organizationName(\"zalando-stups\")\n                .getProject();\n\n        Project p2 = new ProjectBuilder().commitsCount(10)\n                .contributorsCount(5)\n                .forksCount(1)\n                .gitHubProjectId(12345)\n                .description(\"bogus project 2\")\n                .name(\"bogus project 2\")\n                .primaryLanguage(\"Scala\")\n                .organizationName(\"zalando-stups\")\n                .getProject();\n\n\n        Project p3 = new ProjectBuilder().commitsCount(10)\n                .contributorsCount(5)\n                .forksCount(1)\n                .gitHubProjectId(12345)\n                .description(\"bogus project 3\")\n                .name(\"bogus project 3\")\n                .primaryLanguage(\"C++\")\n                .organizationName(\"zalando\")\n                .getProject();\n\n        Project p4 = new ProjectBuilder().commitsCount(10)\n                .contributorsCount(5)\n                .forksCount(1)\n                .gitHubProjectId(12345)\n                .description(\"bogus project 4\")\n                .name(\"bogus project 4\")\n                .primaryLanguage(null)\n                .organizationName(\"zalando\")\n                .getProject();\n\n        projectRepository.save(p1);\n        projectRepository.save(p2);\n        projectRepository.save(p3);\n        projectRepository.save(p4);\n\n\n        String organizations = \"zalando,zalando-stups\";\n\n        logger.info(\"Calling language service...\");\n        List<Project> projectsZalando = new ArrayList<>();\n        List<Project> projectsZalandoStups = new ArrayList<>();\n\n        projectsZalandoStups.add(p1);\n        projectsZalandoStups.add(p2);\n\n        projectsZalando.add(p3);\n        projectsZalando.add(p4);\n\n        // given\n        when(projectRepository.findProjects(\"zalando\", empty(), empty())).thenReturn(projectsZalando);\n        when(projectRepository.findProjects(\"zalando-stups\", empty(), empty())).thenReturn(projectsZalandoStups);\n\n        // when\n        List<Language> result = languageService.getMainLanguages(organizations, new LanguagePercentComparator(), empty());\n        Assert.assertEquals(3, result.size());\n    }", "signature": "void checkProgrammingLanguage()", "full_signature": "@Test public void checkProgrammingLanguage()", "class_method_signature": "LanguageServiceTest.checkProgrammingLanguage()", "testcase": true, "constructor": false, "invocations": ["info", "getProject", "organizationName", "primaryLanguage", "name", "description", "gitHubProjectId", "forksCount", "contributorsCount", "commitsCount", "getProject", "organizationName", "primaryLanguage", "name", "description", "gitHubProjectId", "forksCount", "contributorsCount", "commitsCount", "getProject", "organizationName", "primaryLanguage", "name", "description", "gitHubProjectId", "forksCount", "contributorsCount", "commitsCount", "getProject", "organizationName", "primaryLanguage", "name", "description", "gitHubProjectId", "forksCount", "contributorsCount", "commitsCount", "save", "save", "save", "save", "info", "add", "add", "add", "add", "thenReturn", "when", "findProjects", "empty", "empty", "thenReturn", "when", "findProjects", "empty", "empty", "getMainLanguages", "empty", "assertEquals", "size"]}, "focal_class": {"identifier": "LanguageService", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(LanguageService.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LanguageService.class)", "var_name": "logger"}, {"original_string": "private final ProjectRepository repository;", "modifier": "private final", "type": "ProjectRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "LanguageService", "parameters": "(ProjectRepository repository)", "modifiers": "@Autowired public", "return": "", "signature": " LanguageService(ProjectRepository repository)", "full_signature": "@Autowired public  LanguageService(ProjectRepository repository)", "class_method_signature": "LanguageService.LanguageService(ProjectRepository repository)", "testcase": false, "constructor": true}, {"identifier": "filterLanguages", "parameters": "(List<Language> languages, int limit,  int offset)", "modifiers": "public", "return": "List<Language>", "signature": "List<Language> filterLanguages(List<Language> languages, int limit,  int offset)", "full_signature": "public List<Language> filterLanguages(List<Language> languages, int limit,  int offset)", "class_method_signature": "LanguageService.filterLanguages(List<Language> languages, int limit,  int offset)", "testcase": false, "constructor": false}, {"identifier": "getMainLanguages", "parameters": "(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "modifiers": "public", "return": "List<Language>", "signature": "List<Language> getMainLanguages(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "full_signature": "public List<Language> getMainLanguages(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "class_method_signature": "LanguageService.getMainLanguages(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/service/LanguageService.java"}, "focal_method": {"identifier": "getMainLanguages", "parameters": "(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "modifiers": "public", "return": "List<Language>", "body": "public List<Language> getMainLanguages(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage) {\n\n        Collection<String> organizationList = StringParser.parseStringList(organizations, \",\");\n        List<Project> projectList = new ArrayList<>();\n\n        // get the projects\n        for (String org : organizationList) {\n\n            Iterable<Project> projects = repository.findProjects(org, Optional.empty(), filterLanguage);\n\n            for (Project project : projects) {\n                projectList.add(project);\n            }\n        }\n\n        // count the languages\n\n        List<String> languageList = new ArrayList<>();\n\n        for (Project p : projectList) {\n            if (StringUtils.isEmpty(p.getPrimaryLanguage())) {\n                logger.info(String.format(\"No primary programming language set for project [%s].\", p.getName()));\n                continue;\n            }\n\n            languageList.add(p.getPrimaryLanguage());\n        }\n\n        List<Language> languages = new ArrayList<>();\n\n        Set<String> languageSet = new HashSet<>(languageList);\n\n        int frequency;\n\n        for (String language : languageSet) {\n            Language l = new Language(language);\n            frequency = Collections.frequency(languageList, language);\n\n            l.setPercentage((int) Math.round(((double) frequency) / languageList.size() * 100));\n            l.setProjectsCount(frequency);\n\n            languages.add(l);\n        }\n\n        // sort\n        if (languages.size() > 1) {\n            Collections.sort(languages, c);\n        }\n\n        return languages;\n    }", "signature": "List<Language> getMainLanguages(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "full_signature": "public List<Language> getMainLanguages(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "class_method_signature": "LanguageService.getMainLanguages(final String organizations, final Comparator<Language> c, Optional<String> filterLanguage)", "testcase": false, "constructor": false, "invocations": ["parseStringList", "findProjects", "empty", "add", "isEmpty", "getPrimaryLanguage", "info", "format", "getName", "add", "getPrimaryLanguage", "frequency", "setPercentage", "round", "size", "setProjectsCount", "add", "size", "sort"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}