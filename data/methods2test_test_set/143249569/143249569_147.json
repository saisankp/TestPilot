{"test_class": {"identifier": "PresentRefTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LocalDateTime mockTime1 = LocalDateTime.of(2018, 1, 1, 0, 0);", "modifier": "private final", "type": "LocalDateTime", "declarator": "mockTime1 = LocalDateTime.of(2018, 1, 1, 0, 0)", "var_name": "mockTime1"}, {"original_string": "private final LocalDateTime mockTime2 = LocalDateTime.of(2018, 1, 1, 0, 1);", "modifier": "private final", "type": "LocalDateTime", "declarator": "mockTime2 = LocalDateTime.of(2018, 1, 1, 0, 1)", "var_name": "mockTime2"}, {"original_string": "private final Slot mockSlot = Slot.builder()\n        .withName(\"test\")\n        .withValue(\"test\")\n        .build();", "modifier": "private final", "type": "Slot", "declarator": "mockSlot = Slot.builder()\n        .withName(\"test\")\n        .withValue(\"test\")\n        .build()", "var_name": "mockSlot"}], "file": "ask-sdk-interaction-model-mapper/src/test/java/com/amazon/ask/interaction/types/slot/date/PresentRefTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        PresentRef Time1 = new PresentRef(mockSlot, mockTime1);\n        PresentRef Time2 = new PresentRef(mockSlot, mockTime1);\n\n        assertEquals(Time1, Time2);\n        assertEquals(Time1.getTime(), Time2.getTime());\n        assertEquals(Time1.getSlot(), Time2.getSlot());\n        assertEquals(Time1.hashCode(), Time2.hashCode());\n        assertEquals(Time1.toString(), Time2.toString());\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "PresentRefTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "assertEquals", "getTime", "getTime", "assertEquals", "getSlot", "getSlot", "assertEquals", "hashCode", "hashCode", "assertEquals", "toString", "toString"]}, "focal_class": {"identifier": "PresentRef", "superclass": "extends AmazonDate", "interfaces": "", "fields": [{"original_string": "private final LocalDateTime time;", "modifier": "private final", "type": "LocalDateTime", "declarator": "time", "var_name": "time"}], "methods": [{"identifier": "PresentRef", "parameters": "(Slot slot, LocalDateTime time)", "modifiers": "public", "return": "", "signature": " PresentRef(Slot slot, LocalDateTime time)", "full_signature": "public  PresentRef(Slot slot, LocalDateTime time)", "class_method_signature": "PresentRef.PresentRef(Slot slot, LocalDateTime time)", "testcase": false, "constructor": true}, {"identifier": "getTime", "parameters": "()", "modifiers": "public", "return": "LocalDateTime", "signature": "LocalDateTime getTime()", "full_signature": "public LocalDateTime getTime()", "class_method_signature": "PresentRef.getTime()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PresentRef.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PresentRef.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PresentRef.toString()", "testcase": false, "constructor": false}], "file": "ask-sdk-interaction-model-mapper/src/main/java/com/amazon/ask/interaction/types/slot/date/PresentRef.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (!super.equals(o)) return false;\n        PresentRef that = (PresentRef) o;\n        return Objects.equals(time, that.time);\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "PresentRef.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["equals", "equals"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}