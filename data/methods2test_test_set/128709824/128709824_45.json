{"test_class": {"identifier": "DefaultSetterFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "fault/fault-hystrix/src/test/java/com/alipay/sofa/rpc/hystrix/DefaultSetterFactoryTest.java"}, "test_case": {"identifier": "testGenerateCommandKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateCommandKey() {\n        for (Method method : TestCase.class.getMethods()) {\n            if (method.isAnnotationPresent(HystrixCommandKey.class)) {\n                HystrixCommandKey annotation = method.getAnnotation(HystrixCommandKey.class);\n                Assert.assertEquals(annotation.value(), DefaultSetterFactory.generateCommandKey(\"TestCase\", method));\n            }\n        }\n    }", "signature": "void testGenerateCommandKey()", "full_signature": "@Test public void testGenerateCommandKey()", "class_method_signature": "DefaultSetterFactoryTest.testGenerateCommandKey()", "testcase": true, "constructor": false, "invocations": ["getMethods", "isAnnotationPresent", "getAnnotation", "assertEquals", "value", "generateCommandKey"]}, "focal_class": {"identifier": "DefaultSetterFactory", "superclass": "", "interfaces": "implements SetterFactory", "fields": [{"original_string": "private static final Map<Method, HystrixCommand.Setter> SETTER_CACHE = new ConcurrentHashMap<Method, HystrixCommand.Setter>();", "modifier": "private static final", "type": "Map<Method, HystrixCommand.Setter>", "declarator": "SETTER_CACHE = new ConcurrentHashMap<Method, HystrixCommand.Setter>()", "var_name": "SETTER_CACHE"}], "methods": [{"identifier": "createSetter", "parameters": "(FilterInvoker invoker, SofaRequest request)", "modifiers": "@Override public", "return": "HystrixCommand.Setter", "signature": "HystrixCommand.Setter createSetter(FilterInvoker invoker, SofaRequest request)", "full_signature": "@Override public HystrixCommand.Setter createSetter(FilterInvoker invoker, SofaRequest request)", "class_method_signature": "DefaultSetterFactory.createSetter(FilterInvoker invoker, SofaRequest request)", "testcase": false, "constructor": false}, {"identifier": "generateCommandKey", "parameters": "(String interfaceId, Method method)", "modifiers": "public static", "return": "String", "signature": "String generateCommandKey(String interfaceId, Method method)", "full_signature": "public static String generateCommandKey(String interfaceId, Method method)", "class_method_signature": "DefaultSetterFactory.generateCommandKey(String interfaceId, Method method)", "testcase": false, "constructor": false}], "file": "fault/fault-hystrix/src/main/java/com/alipay/sofa/rpc/hystrix/DefaultSetterFactory.java"}, "focal_method": {"identifier": "generateCommandKey", "parameters": "(String interfaceId, Method method)", "modifiers": "public static", "return": "String", "body": "public static String generateCommandKey(String interfaceId, Method method) {\n        StringBuilder builder = new StringBuilder(interfaceId)\n            .append(\"#\")\n            .append(method.getName())\n            .append(\"(\");\n        if (method.getParameterTypes().length > 0) {\n            for (Class<?> parameterType : method.getParameterTypes()) {\n                builder.append(parameterType.getSimpleName()).append(\",\");\n            }\n            builder.deleteCharAt(builder.length() - 1);\n        }\n        return builder.append(\")\").toString();\n    }", "signature": "String generateCommandKey(String interfaceId, Method method)", "full_signature": "public static String generateCommandKey(String interfaceId, Method method)", "class_method_signature": "DefaultSetterFactory.generateCommandKey(String interfaceId, Method method)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "getName", "getParameterTypes", "getParameterTypes", "append", "append", "getSimpleName", "deleteCharAt", "length", "toString", "append"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}