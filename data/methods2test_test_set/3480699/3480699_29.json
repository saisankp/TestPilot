{"test_class": {"identifier": "ThreadPerSessionEventHandlingStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/quickfix/mina/ThreadPerSessionEventHandlingStrategyTest.java"}, "test_case": {"identifier": "testVerifyGetConnectorAssumption", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVerifyGetConnectorAssumption() throws Exception {\n        final ThreadPerSessionEventHandlingStrategyUnderTest strategy = new ThreadPerSessionEventHandlingStrategyUnderTest();\n        assertNull(strategy.getSessionConnector());\n    }", "signature": "void testVerifyGetConnectorAssumption()", "full_signature": "@Test public void testVerifyGetConnectorAssumption()", "class_method_signature": "ThreadPerSessionEventHandlingStrategyTest.testVerifyGetConnectorAssumption()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getSessionConnector"]}, "focal_class": {"identifier": "ThreadPerSessionEventHandlingStrategy", "superclass": "", "interfaces": "implements EventHandlingStrategy", "fields": [{"original_string": "private static final long THREAD_WAIT_FOR_MESSAGE_MS = 250;", "modifier": "private static final", "type": "long", "declarator": "THREAD_WAIT_FOR_MESSAGE_MS = 250", "var_name": "THREAD_WAIT_FOR_MESSAGE_MS"}, {"original_string": "private final ConcurrentMap<SessionID, MessageDispatchingThread> dispatchers = new ConcurrentHashMap<SessionID, MessageDispatchingThread>();", "modifier": "private final", "type": "ConcurrentMap<SessionID, MessageDispatchingThread>", "declarator": "dispatchers = new ConcurrentHashMap<SessionID, MessageDispatchingThread>()", "var_name": "dispatchers"}, {"original_string": "private final SessionConnector sessionConnector;", "modifier": "private final", "type": "SessionConnector", "declarator": "sessionConnector", "var_name": "sessionConnector"}], "methods": [{"identifier": "ThreadPerSessionEventHandlingStrategy", "parameters": "(SessionConnector connector)", "modifiers": "public", "return": "", "signature": " ThreadPerSessionEventHandlingStrategy(SessionConnector connector)", "full_signature": "public  ThreadPerSessionEventHandlingStrategy(SessionConnector connector)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.ThreadPerSessionEventHandlingStrategy(SessionConnector connector)", "testcase": false, "constructor": true}, {"identifier": "onMessage", "parameters": "(Session quickfixSession, Message message)", "modifiers": "public", "return": "void", "signature": "void onMessage(Session quickfixSession, Message message)", "full_signature": "public void onMessage(Session quickfixSession, Message message)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.onMessage(Session quickfixSession, Message message)", "testcase": false, "constructor": false}, {"identifier": "getSessionConnector", "parameters": "()", "modifiers": "public", "return": "SessionConnector", "signature": "SessionConnector getSessionConnector()", "full_signature": "public SessionConnector getSessionConnector()", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getSessionConnector()", "testcase": false, "constructor": false}, {"identifier": "startDispatcherThread", "parameters": "(MessageDispatchingThread dispatcher)", "modifiers": "protected", "return": "void", "signature": "void startDispatcherThread(MessageDispatchingThread dispatcher)", "full_signature": "protected void startDispatcherThread(MessageDispatchingThread dispatcher)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.startDispatcherThread(MessageDispatchingThread dispatcher)", "testcase": false, "constructor": false}, {"identifier": "stopDispatcherThreads", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopDispatcherThreads()", "full_signature": "public void stopDispatcherThreads()", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.stopDispatcherThreads()", "testcase": false, "constructor": false}, {"identifier": "getMessages", "parameters": "(SessionID sessionID)", "modifiers": "", "return": "BlockingQueue<Message>", "signature": "BlockingQueue<Message> getMessages(SessionID sessionID)", "full_signature": " BlockingQueue<Message> getMessages(SessionID sessionID)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getMessages(SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "getDispatcher", "parameters": "(SessionID sessionID)", "modifiers": "", "return": "MessageDispatchingThread", "signature": "MessageDispatchingThread getDispatcher(SessionID sessionID)", "full_signature": " MessageDispatchingThread getDispatcher(SessionID sessionID)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getDispatcher(SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "getNextMessage", "parameters": "(BlockingQueue<Message> messages)", "modifiers": "", "return": "Message", "signature": "Message getNextMessage(BlockingQueue<Message> messages)", "full_signature": " Message getNextMessage(BlockingQueue<Message> messages)", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getNextMessage(BlockingQueue<Message> messages)", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getQueueSize()", "full_signature": "public int getQueueSize()", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getQueueSize()", "testcase": false, "constructor": false}], "file": "core/src/main/java/quickfix/mina/ThreadPerSessionEventHandlingStrategy.java"}, "focal_method": {"identifier": "getSessionConnector", "parameters": "()", "modifiers": "public", "return": "SessionConnector", "body": "public SessionConnector getSessionConnector() {\n        return sessionConnector;\n    }", "signature": "SessionConnector getSessionConnector()", "full_signature": "public SessionConnector getSessionConnector()", "class_method_signature": "ThreadPerSessionEventHandlingStrategy.getSessionConnector()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 3480699, "url": "https://github.com/quickfixj/mirror", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 29054, "license": "licensed"}}