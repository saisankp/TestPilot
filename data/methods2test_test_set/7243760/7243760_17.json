{"test_class": {"identifier": "SpanImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ValueFactoryImpl FACTORY = new ValueFactoryImpl();", "modifier": "private static final", "type": "ValueFactoryImpl", "declarator": "FACTORY = new ValueFactoryImpl()", "var_name": "FACTORY"}], "file": "series/src/test/java/com/barchart/feed/series/SpanImplTest.java"}, "test_case": {"identifier": "testExtendsSpan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtendsSpan() {\n\t\tfinal DateTime t = new DateTime(2013, 12, 11, 8, 0, 0);\n\t\tfinal DateTime t2 = new DateTime(2013, 12, 11, 13, 0, 0);\n        final SpanImpl newSpan = new SpanImpl(Period.ONE_HOUR, t, t2);\n\n\t\tfinal DateTime t3 = new DateTime(2013, 12, 11, 12, 0, 0);\n\t\tfinal DateTime t4 = new DateTime(2013, 12, 11, 16, 0, 0);\n        final SpanImpl newSpan2 = new SpanImpl(Period.ONE_HOUR, t3, t4);\n\n        assertTrue(newSpan2.extendsSpan(newSpan) && newSpan.extendsSpan(newSpan2));\n    }", "signature": "void testExtendsSpan()", "full_signature": "@Test public void testExtendsSpan()", "class_method_signature": "SpanImplTest.testExtendsSpan()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "extendsSpan", "extendsSpan"]}, "focal_class": {"identifier": "SpanImpl", "superclass": "extends DataPointImpl", "interfaces": "implements Span", "fields": [{"original_string": "private DateTime nextDate;", "modifier": "private", "type": "DateTime", "declarator": "nextDate", "var_name": "nextDate"}, {"original_string": "public static SpanImpl INITIAL = new SpanImpl(\n\t\tnew SpanImpl(Period.DAY,\n\t\t\tnew DateTime(1980, 1, 1, 0, 0, 0),\n\t\t\t\tnew DateTime(1980, 1, 1, 0, 0, 0)));", "modifier": "public static", "type": "SpanImpl", "declarator": "INITIAL = new SpanImpl(\n\t\tnew SpanImpl(Period.DAY,\n\t\t\tnew DateTime(1980, 1, 1, 0, 0, 0),\n\t\t\t\tnew DateTime(1980, 1, 1, 0, 0, 0)))", "var_name": "INITIAL"}], "methods": [{"identifier": "SpanImpl", "parameters": "(Period period, DateTime d, DateTime next)", "modifiers": "public", "return": "", "signature": " SpanImpl(Period period, DateTime d, DateTime next)", "full_signature": "public  SpanImpl(Period period, DateTime d, DateTime next)", "class_method_signature": "SpanImpl.SpanImpl(Period period, DateTime d, DateTime next)", "testcase": false, "constructor": true}, {"identifier": "SpanImpl", "parameters": "(SpanImpl other)", "modifiers": "public", "return": "", "signature": " SpanImpl(SpanImpl other)", "full_signature": "public  SpanImpl(SpanImpl other)", "class_method_signature": "SpanImpl.SpanImpl(SpanImpl other)", "testcase": false, "constructor": true}, {"identifier": "setSpan", "parameters": "(SpanImpl other)", "modifiers": "public", "return": "void", "signature": "void setSpan(SpanImpl other)", "full_signature": "public void setSpan(SpanImpl other)", "class_method_signature": "SpanImpl.setSpan(SpanImpl other)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(E other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(E other)", "full_signature": "@Override public int compareTo(E other)", "class_method_signature": "SpanImpl.compareTo(E other)", "testcase": false, "constructor": false}, {"identifier": "setNextDate", "parameters": "(DateTime dt)", "modifiers": "public", "return": "void", "signature": "void setNextDate(DateTime dt)", "full_signature": "public void setNextDate(DateTime dt)", "class_method_signature": "SpanImpl.setNextDate(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "getNextDate", "parameters": "()", "modifiers": "@Override public", "return": "DateTime", "signature": "DateTime getNextDate()", "full_signature": "@Override public DateTime getNextDate()", "class_method_signature": "SpanImpl.getNextDate()", "testcase": false, "constructor": false}, {"identifier": "getNextIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNextIndex()", "full_signature": "@Override public int getNextIndex()", "class_method_signature": "SpanImpl.getNextIndex()", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIndex()", "full_signature": "@Override public int getIndex()", "class_method_signature": "SpanImpl.getIndex()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SpanImpl.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SpanImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SpanImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "extendsSpan", "parameters": "(T span)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean extendsSpan(T span)", "full_signature": "@Override public boolean extendsSpan(T span)", "class_method_signature": "SpanImpl.extendsSpan(T span)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(T span)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T union(T span)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T union(T span)", "class_method_signature": "SpanImpl.union(T span)", "testcase": false, "constructor": false}, {"identifier": "intersection", "parameters": "(T span)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T intersection(T span)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T intersection(T span)", "class_method_signature": "SpanImpl.intersection(T span)", "testcase": false, "constructor": false}], "file": "series/src/main/java/com/barchart/feed/series/SpanImpl.java"}, "focal_method": {"identifier": "extendsSpan", "parameters": "(T span)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic <T extends Span> boolean extendsSpan(T span) {\n\t\treturn span.intersection(this) != null && ((this.date.getMillis() < span.getDate().getMillis()) ||\n\t\t\t\t(this.nextDate.getMillis() > span.getNextDate().getMillis()));\n\t}", "signature": "boolean extendsSpan(T span)", "full_signature": "@Override public boolean extendsSpan(T span)", "class_method_signature": "SpanImpl.extendsSpan(T span)", "testcase": false, "constructor": false, "invocations": ["intersection", "getMillis", "getMillis", "getDate", "getMillis", "getMillis", "getNextDate"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}