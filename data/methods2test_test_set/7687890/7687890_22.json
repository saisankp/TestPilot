{"test_class": {"identifier": "CartesianProductTest", "superclass": "", "interfaces": "", "fields": [], "file": "Code/core-abce/abce-components/src/test/java-ibm-only/eu/abc4trust/util/CartesianProductTest.java"}, "test_case": {"identifier": "testEqualySizedLists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEqualySizedLists() throws Exception {\n    List<String> s1 = new ArrayList<String>();\n    s1.add(\"a\");\n    s1.add(\"b\");\n    List<String> s2 = new ArrayList<String>();\n    s2.add(\"c\");\n    s2.add(\"d\");\n    List<String> s3 = new ArrayList<String>();\n    s3.add(\"e\");\n    s3.add(\"f\");\n    \n    List<List<String>> l = new ArrayList<List<String>>();\n    l.add(s1);\n    l.add(s2);\n    l.add(s3);\n    \n    List<ArrayList<String>> cp = CartesianProduct.cartesianProduct(l);\n    \n    ////////////////////////////////////////////\n    // build the expected result\n    List<List<String>> resultSet = new ArrayList<List<String>>();\n    List<String> rl = new ArrayList<String>();\n    rl.add(\"a\");\n    rl.add(\"c\");\n    rl.add(\"e\");\n    resultSet.add(rl);\n    rl = new ArrayList<String>();\n    rl.add(\"a\");\n    rl.add(\"c\");\n    rl.add(\"f\");\n    resultSet.add(rl);\n    rl = new ArrayList<String>();\n    rl.add(\"a\");\n    rl.add(\"d\");\n    rl.add(\"e\");\n    resultSet.add(rl);\n    rl = new ArrayList<String>();\n    rl.add(\"a\");\n    rl.add(\"d\");\n    rl.add(\"f\");\n    resultSet.add(rl);\n    rl = new ArrayList<String>();\n    rl.add(\"b\");\n    rl.add(\"c\");\n    rl.add(\"e\");\n    resultSet.add(rl);\n    rl = new ArrayList<String>();\n    rl.add(\"b\");\n    rl.add(\"c\");\n    rl.add(\"f\");\n    resultSet.add(rl);\n    rl = new ArrayList<String>();\n    rl.add(\"b\");\n    rl.add(\"d\");\n    rl.add(\"e\");\n    resultSet.add(rl);\n    rl = new ArrayList<String>();\n    rl.add(\"b\");\n    rl.add(\"d\");\n    rl.add(\"f\");\n    resultSet.add(rl);\n    \n    assertEquals(resultSet, cp);\n  }", "signature": "void testEqualySizedLists()", "full_signature": "@Test public void testEqualySizedLists()", "class_method_signature": "CartesianProductTest.testEqualySizedLists()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "cartesianProduct", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "assertEquals"]}, "focal_class": {"identifier": "CartesianProduct", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "cartesianProduct", "parameters": "(List<List<T>> sets)", "modifiers": "public static", "return": "List<ArrayList<T>>", "signature": "List<ArrayList<T>> cartesianProduct(List<List<T>> sets)", "full_signature": "public static List<ArrayList<T>> cartesianProduct(List<List<T>> sets)", "class_method_signature": "CartesianProduct.cartesianProduct(List<List<T>> sets)", "testcase": false, "constructor": false}], "file": "Code/core-abce/abce-components/src/main/java-ibm-only/eu/abc4trust/util/CartesianProduct.java"}, "focal_method": {"identifier": "cartesianProduct", "parameters": "(List<List<T>> sets)", "modifiers": "public static", "return": "List<ArrayList<T>>", "body": "public static <T> List<ArrayList<T>> cartesianProduct(List<List<T>> sets) throws Exception {\n    final BigInteger MAX_LIST_SIZE = BigInteger.valueOf(100000);\n\n    BigInteger productSize = BigInteger.ONE;\n    for (List<T> set : sets) {\n      productSize = productSize.multiply(BigInteger.valueOf(set.size()));\n    }\n\n    if (productSize.compareTo(MAX_LIST_SIZE) == 1) {\n      throw new Exception(\"Will not generate carthesian product for more than \" + MAX_LIST_SIZE\n          + \" elements \" + \"(size would be \" + productSize + \"). Not proceeding.\");\n    }\n\n    List<ArrayList<T>> cartesianProduct = new ArrayList<ArrayList<T>>(productSize.intValue());\n    for (int i = 0; i < productSize.intValue(); i++) {\n      cartesianProduct.add(new ArrayList<T>(sets.size()));\n    }\n    \n    if(productSize.equals(BigInteger.ZERO)) {\n      // Empty product\n      return cartesianProduct;\n    }\n\n    int loopSize = productSize.intValue();\n    for (int i = 0; i < sets.size(); i++) {\n      List<T> set = sets.get(i);\n\n      loopSize /= set.size();\n      Iterator<T> it = set.iterator();\n      T e = null;\n      for (int j = 0; j < productSize.intValue(); j++) {\n        if ((j % loopSize) == 0) {\n          if (it.hasNext()) {\n            e = it.next();\n          } else {\n            it = set.iterator();\n            e = it.next();\n          }\n        }\n\n        cartesianProduct.get(j).add(e);\n      }\n    }\n\n    return cartesianProduct;\n  }", "signature": "List<ArrayList<T>> cartesianProduct(List<List<T>> sets)", "full_signature": "public static List<ArrayList<T>> cartesianProduct(List<List<T>> sets)", "class_method_signature": "CartesianProduct.cartesianProduct(List<List<T>> sets)", "testcase": false, "constructor": false, "invocations": ["valueOf", "multiply", "valueOf", "size", "compareTo", "intValue", "intValue", "add", "size", "equals", "intValue", "size", "get", "size", "iterator", "intValue", "hasNext", "next", "iterator", "next", "add", "get"]}, "repository": {"repo_id": 7687890, "url": "https://github.com/p2abcengine/p2abcengine", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 71, "size": 11790, "license": "licensed"}}