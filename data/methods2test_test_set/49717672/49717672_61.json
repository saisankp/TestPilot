{"test_class": {"identifier": "InboundStreamTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/cgm/medtrum/messages/InboundStreamTest.java"}, "test_case": {"identifier": "inboundStreamTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void inboundStreamTest() {\n\n        final InboundStream inboundStream = new InboundStream();\n        assertWithMessage(\"not complete at start\").that(inboundStream.isComplete()).isFalse();\n        assertWithMessage(\"null at start\").that(inboundStream.getByteSequence()).isNull();\n\n        inboundStream.push(HexTestTools.tolerantHexStringToByteArray(\"25:00:83:41:00:00:ac:00:00:04:64:05:00:00:00:00:00:00:00:00\"));\n        assertWithMessage(\"not complete after first push\").that(inboundStream.isComplete()).isFalse();\n        assertWithMessage(\"null after first push\").that(inboundStream.getByteSequence()).isNull();\n\n        inboundStream.push(HexTestTools.tolerantHexStringToByteArray(\"00:00:00:00:00:00:00:09:00:00:00:00:00:00:00:00:00:c8:08\"));\n        assertWithMessage(\"complete after second push\").that(inboundStream.isComplete()).isTrue();\n        assertWithMessage(\"not null after second push\").that(inboundStream.getByteSequence()).isNotNull();\n        assertWithMessage(\"stream size 37\").that(inboundStream.getByteSequence().length).isEqualTo(37);\n\n        inboundStream.push(HexTestTools.tolerantHexStringToByteArray(\"00:00:00:00:00:00:00:09:00:00:00:00:00:00:00:00:00:c8:08\"));\n        assertWithMessage(\"complete after duplicate second push\").that(inboundStream.isComplete()).isTrue();\n        assertWithMessage(\"not null after duplicate second push\").that(inboundStream.getByteSequence()).isNotNull();\n        assertWithMessage(\"stream size still 37\").that(inboundStream.getByteSequence().length).isEqualTo(37);\n\n        //final byte[] result = inboundStream.getByteSequence();\n        //System.out.println(HexDump.dumpHexString(result));\n\n    }", "signature": "void inboundStreamTest()", "full_signature": "@Test public void inboundStreamTest()", "class_method_signature": "InboundStreamTest.inboundStreamTest()", "testcase": true, "constructor": false, "invocations": ["isFalse", "that", "assertWithMessage", "isComplete", "isNull", "that", "assertWithMessage", "getByteSequence", "push", "tolerantHexStringToByteArray", "isFalse", "that", "assertWithMessage", "isComplete", "isNull", "that", "assertWithMessage", "getByteSequence", "push", "tolerantHexStringToByteArray", "isTrue", "that", "assertWithMessage", "isComplete", "isNotNull", "that", "assertWithMessage", "getByteSequence", "isEqualTo", "that", "assertWithMessage", "getByteSequence", "push", "tolerantHexStringToByteArray", "isTrue", "that", "assertWithMessage", "isComplete", "isNotNull", "that", "assertWithMessage", "getByteSequence", "isEqualTo", "that", "assertWithMessage", "getByteSequence"]}, "focal_class": {"identifier": "InboundStream", "superclass": "extends BaseMessage", "interfaces": "", "fields": [{"original_string": "private int complete_length = 0;", "modifier": "private", "type": "int", "declarator": "complete_length = 0", "var_name": "complete_length"}, {"original_string": "private volatile byte[] inboundByteArray;", "modifier": "private volatile", "type": "byte[]", "declarator": "inboundByteArray", "var_name": "inboundByteArray"}], "methods": [{"identifier": "InboundStream", "parameters": "()", "modifiers": "public", "return": "", "signature": " InboundStream()", "full_signature": "public  InboundStream()", "class_method_signature": "InboundStream.InboundStream()", "testcase": false, "constructor": true}, {"identifier": "push", "parameters": "(final byte[] raw_packet)", "modifiers": "public synchronized", "return": "void", "signature": "void push(final byte[] raw_packet)", "full_signature": "public synchronized void push(final byte[] raw_packet)", "class_method_signature": "InboundStream.push(final byte[] raw_packet)", "testcase": false, "constructor": false}, {"identifier": "isComplete", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isComplete()", "full_signature": "public boolean isComplete()", "class_method_signature": "InboundStream.isComplete()", "testcase": false, "constructor": false}, {"identifier": "hasSomeData", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasSomeData()", "full_signature": "public boolean hasSomeData()", "class_method_signature": "InboundStream.hasSomeData()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "InboundStream.reset()", "testcase": false, "constructor": false}, {"identifier": "getByteSequence", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] getByteSequence()", "full_signature": "@Override public byte[] getByteSequence()", "class_method_signature": "InboundStream.getByteSequence()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/cgm/medtrum/messages/InboundStream.java"}, "focal_method": {"identifier": "InboundStream", "parameters": "()", "modifiers": "public", "return": "", "body": "public InboundStream() {\n        reset();\n    }", "signature": " InboundStream()", "full_signature": "public  InboundStream()", "class_method_signature": "InboundStream.InboundStream()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}