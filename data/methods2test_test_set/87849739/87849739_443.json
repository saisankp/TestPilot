{"test_class": {"identifier": "IndexLengthRestrictionEnforcerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAMESPACE = \"org.eclipse.ditto.test\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE = \"org.eclipse.ditto.test\"", "var_name": "NAMESPACE"}, {"original_string": "private static final String THING_ID = NAMESPACE + \":\" + \"myThingId\";", "modifier": "private static final", "type": "String", "declarator": "THING_ID = NAMESPACE + \":\" + \"myThingId\"", "var_name": "THING_ID"}, {"original_string": "private static final int OVERHEAD =\n            THING_ID.length() + NAMESPACE.length() + IndexLengthRestrictionEnforcer.AUTHORIZATION_SUBJECT_OVERHEAD;", "modifier": "private static final", "type": "int", "declarator": "OVERHEAD =\n            THING_ID.length() + NAMESPACE.length() + IndexLengthRestrictionEnforcer.AUTHORIZATION_SUBJECT_OVERHEAD", "var_name": "OVERHEAD"}, {"original_string": "private IndexLengthRestrictionEnforcer indexLengthRestrictionEnforcer;", "modifier": "private", "type": "IndexLengthRestrictionEnforcer", "declarator": "indexLengthRestrictionEnforcer", "var_name": "indexLengthRestrictionEnforcer"}], "file": "services/thingsearch/persistence/src/test/java/org/eclipse/ditto/services/thingsearch/persistence/write/IndexLengthRestrictionEnforcerTest.java"}, "test_case": {"identifier": "enforceRestrictionsOnViolation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void enforceRestrictionsOnViolation() {\n        // GIVEN:\n        final String key = \"/attributes/enforceRestrictionsOnViolation\";\n        final int maxAllowedValueForKey = MAX_INDEX_CONTENT_LENGTH - OVERHEAD - key.length();\n        final String value = TestStringGenerator.createStringOfBytes(maxAllowedValueForKey + 1);\n\n        // WHEN:\n        final String enforcedValue = indexLengthRestrictionEnforcer.enforce(JsonPointer.of(key), JsonValue.of(value))\n                .orElseThrow()\n                .asString();\n        final int enforcedValueBytes = enforcedValue.getBytes(StandardCharsets.UTF_8).length;\n\n        // THEN: value is truncated to fit in the max allowed value bytes\n        assertThat(value).startsWith(enforcedValue);\n        assertThat(enforcedValueBytes).isLessThanOrEqualTo(maxAllowedValueForKey);\n\n        // THEN: value is not truncated more than needed\n        final int maxUtf8Bytes = 4;\n        assertThat(enforcedValueBytes).isCloseTo(maxAllowedValueForKey, Offset.offset(maxUtf8Bytes));\n    }", "signature": "void enforceRestrictionsOnViolation()", "full_signature": "@Test public void enforceRestrictionsOnViolation()", "class_method_signature": "IndexLengthRestrictionEnforcerTest.enforceRestrictionsOnViolation()", "testcase": true, "constructor": false, "invocations": ["length", "createStringOfBytes", "asString", "orElseThrow", "enforce", "of", "of", "getBytes", "startsWith", "assertThat", "isLessThanOrEqualTo", "assertThat", "isCloseTo", "assertThat", "offset"]}, "focal_class": {"identifier": "IndexLengthRestrictionEnforcer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_VALUE_LENGTH = 4;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_VALUE_LENGTH = 4", "var_name": "DEFAULT_VALUE_LENGTH"}, {"original_string": "static final int MAX_INDEX_CONTENT_LENGTH = 950;", "modifier": "static final", "type": "int", "declarator": "MAX_INDEX_CONTENT_LENGTH = 950", "var_name": "MAX_INDEX_CONTENT_LENGTH"}, {"original_string": "static final int AUTHORIZATION_SUBJECT_OVERHEAD = 128;", "modifier": "static final", "type": "int", "declarator": "AUTHORIZATION_SUBJECT_OVERHEAD = 128", "var_name": "AUTHORIZATION_SUBJECT_OVERHEAD"}, {"original_string": "private final int thingIdNamespaceOverhead;", "modifier": "private final", "type": "int", "declarator": "thingIdNamespaceOverhead", "var_name": "thingIdNamespaceOverhead"}], "methods": [{"identifier": "IndexLengthRestrictionEnforcer", "parameters": "(final String thingId)", "modifiers": "private", "return": "", "signature": " IndexLengthRestrictionEnforcer(final String thingId)", "full_signature": "private  IndexLengthRestrictionEnforcer(final String thingId)", "class_method_signature": "IndexLengthRestrictionEnforcer.IndexLengthRestrictionEnforcer(final String thingId)", "testcase": false, "constructor": true}, {"identifier": "newInstance", "parameters": "(final String thingId)", "modifiers": "public static", "return": "IndexLengthRestrictionEnforcer", "signature": "IndexLengthRestrictionEnforcer newInstance(final String thingId)", "full_signature": "public static IndexLengthRestrictionEnforcer newInstance(final String thingId)", "class_method_signature": "IndexLengthRestrictionEnforcer.newInstance(final String thingId)", "testcase": false, "constructor": false}, {"identifier": "enforce", "parameters": "(final JsonPointer pointer, final JsonValue value)", "modifiers": "public", "return": "Optional<JsonValue>", "signature": "Optional<JsonValue> enforce(final JsonPointer pointer, final JsonValue value)", "full_signature": "public Optional<JsonValue> enforce(final JsonPointer pointer, final JsonValue value)", "class_method_signature": "IndexLengthRestrictionEnforcer.enforce(final JsonPointer pointer, final JsonValue value)", "testcase": false, "constructor": false}, {"identifier": "isNonEmptyComposite", "parameters": "(final JsonValue value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isNonEmptyComposite(final JsonValue value)", "full_signature": "private static boolean isNonEmptyComposite(final JsonValue value)", "class_method_signature": "IndexLengthRestrictionEnforcer.isNonEmptyComposite(final JsonValue value)", "testcase": false, "constructor": false}, {"identifier": "fixViolation", "parameters": "(final JsonValue value, final int keyOverhead)", "modifiers": "private static", "return": "JsonValue", "signature": "JsonValue fixViolation(final JsonValue value, final int keyOverhead)", "full_signature": "private static JsonValue fixViolation(final JsonValue value, final int keyOverhead)", "class_method_signature": "IndexLengthRestrictionEnforcer.fixViolation(final JsonValue value, final int keyOverhead)", "testcase": false, "constructor": false}, {"identifier": "calculateThingIdNamespaceAuthSubjectOverhead", "parameters": "(final String thingId)", "modifiers": "private static", "return": "int", "signature": "int calculateThingIdNamespaceAuthSubjectOverhead(final String thingId)", "full_signature": "private static int calculateThingIdNamespaceAuthSubjectOverhead(final String thingId)", "class_method_signature": "IndexLengthRestrictionEnforcer.calculateThingIdNamespaceAuthSubjectOverhead(final String thingId)", "testcase": false, "constructor": false}, {"identifier": "jsonPointerBytes", "parameters": "(final JsonPointer jsonPointer)", "modifiers": "private static", "return": "int", "signature": "int jsonPointerBytes(final JsonPointer jsonPointer)", "full_signature": "private static int jsonPointerBytes(final JsonPointer jsonPointer)", "class_method_signature": "IndexLengthRestrictionEnforcer.jsonPointerBytes(final JsonPointer jsonPointer)", "testcase": false, "constructor": false}, {"identifier": "checkThingId", "parameters": "(final String thingId)", "modifiers": "private static", "return": "void", "signature": "void checkThingId(final String thingId)", "full_signature": "private static void checkThingId(final String thingId)", "class_method_signature": "IndexLengthRestrictionEnforcer.checkThingId(final String thingId)", "testcase": false, "constructor": false}], "file": "services/thingsearch/persistence/src/main/java/org/eclipse/ditto/services/thingsearch/persistence/write/IndexLengthRestrictionEnforcer.java"}, "focal_method": {"identifier": "enforce", "parameters": "(final JsonPointer pointer, final JsonValue value)", "modifiers": "public", "return": "Optional<JsonValue>", "body": "public Optional<JsonValue> enforce(final JsonPointer pointer, final JsonValue value) {\n        final int keyOverhead = jsonPointerBytes(pointer) + thingIdNamespaceOverhead;\n        if (keyOverhead > MAX_INDEX_CONTENT_LENGTH - DEFAULT_VALUE_LENGTH) {\n            // not possible to trim key-value pair; do not index this entry.\n            return Optional.empty();\n        } else if (value.isString()) {\n            return Optional.of(fixViolation(value, keyOverhead));\n        } else if (isNonEmptyComposite(value)) {\n            // unexpected composite value - complain\n            throw new IllegalArgumentException(\"value should not be an array or object but it is\");\n        } else {\n            return Optional.of(value);\n        }\n    }", "signature": "Optional<JsonValue> enforce(final JsonPointer pointer, final JsonValue value)", "full_signature": "public Optional<JsonValue> enforce(final JsonPointer pointer, final JsonValue value)", "class_method_signature": "IndexLengthRestrictionEnforcer.enforce(final JsonPointer pointer, final JsonValue value)", "testcase": false, "constructor": false, "invocations": ["jsonPointerBytes", "empty", "isString", "of", "fixViolation", "isNonEmptyComposite", "of"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}