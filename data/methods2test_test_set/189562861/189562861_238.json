{"test_class": {"identifier": "TaskQueueTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueueTest.java"}, "test_case": {"identifier": "testOffer1", "parameters": "()", "modifiers": "@Test(expected = RejectedExecutionException.class) public", "return": "void", "body": "@Test(expected = RejectedExecutionException.class)\n    public void testOffer1() throws Exception {\n        TaskQueue<Runnable> queue = new TaskQueue<Runnable>(1);\n        queue.offer(mock(Runnable.class));\n    }", "signature": "void testOffer1()", "full_signature": "@Test(expected = RejectedExecutionException.class) public void testOffer1()", "class_method_signature": "TaskQueueTest.testOffer1()", "testcase": true, "constructor": false, "invocations": ["offer", "mock"]}, "focal_class": {"identifier": "TaskQueue", "superclass": "extends LinkedBlockingQueue<Runnable>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -2635853580887179627L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2635853580887179627L", "var_name": "serialVersionUID"}, {"original_string": "private EagerThreadPoolExecutor executor;", "modifier": "private", "type": "EagerThreadPoolExecutor", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "TaskQueue", "parameters": "(int capacity)", "modifiers": "public", "return": "", "signature": " TaskQueue(int capacity)", "full_signature": "public  TaskQueue(int capacity)", "class_method_signature": "TaskQueue.TaskQueue(int capacity)", "testcase": false, "constructor": true}, {"identifier": "setExecutor", "parameters": "(EagerThreadPoolExecutor exec)", "modifiers": "public", "return": "void", "signature": "void setExecutor(EagerThreadPoolExecutor exec)", "full_signature": "public void setExecutor(EagerThreadPoolExecutor exec)", "class_method_signature": "TaskQueue.setExecutor(EagerThreadPoolExecutor exec)", "testcase": false, "constructor": false}, {"identifier": "offer", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean offer(Runnable runnable)", "full_signature": "@Override public boolean offer(Runnable runnable)", "class_method_signature": "TaskQueue.offer(Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "retryOffer", "parameters": "(Runnable o, long timeout, TimeUnit unit)", "modifiers": "public", "return": "boolean", "signature": "boolean retryOffer(Runnable o, long timeout, TimeUnit unit)", "full_signature": "public boolean retryOffer(Runnable o, long timeout, TimeUnit unit)", "class_method_signature": "TaskQueue.retryOffer(Runnable o, long timeout, TimeUnit unit)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/threadpool/support/eager/TaskQueue.java"}, "focal_method": {"identifier": "offer", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean offer(Runnable runnable) {\n        if (executor == null) {\n            throw new RejectedExecutionException(\"The task queue does not have executor!\");\n        }\n\n        int currentPoolThreadSize = executor.getPoolSize();\n        // have free worker. put task into queue to let the worker deal with task.\n        if (executor.getSubmittedTaskCount() < currentPoolThreadSize) {\n            return super.offer(runnable);\n        }\n\n        // return false to let executor create new worker.\n        if (currentPoolThreadSize < executor.getMaximumPoolSize()) {\n            return false;\n        }\n\n        // currentPoolThreadSize >= max\n        return super.offer(runnable);\n    }", "signature": "boolean offer(Runnable runnable)", "full_signature": "@Override public boolean offer(Runnable runnable)", "class_method_signature": "TaskQueue.offer(Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["getPoolSize", "getSubmittedTaskCount", "offer", "getMaximumPoolSize", "offer"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}