{"test_class": {"identifier": "AbstractPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable/testSrc/com/android/tools/idea/observable/AbstractPropertyTest.java"}, "test_case": {"identifier": "testTransformMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTransformMethod() {\n    IntProperty source = new IntValueProperty(10);\n    Expression<String> transformed = source.transform(Object::toString);\n\n    assertThat(transformed.get()).isEqualTo(\"10\");\n    source.set(20);\n    assertThat(transformed.get()).isEqualTo(\"20\");\n  }", "signature": "void testTransformMethod()", "full_signature": "@Test public void testTransformMethod()", "class_method_signature": "AbstractPropertyTest.testTransformMethod()", "testcase": true, "constructor": false, "invocations": ["transform", "isEqualTo", "assertThat", "get", "set", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "AbstractProperty", "superclass": "extends AbstractObservableValue<T>", "interfaces": "implements SettableValue<T>", "fields": [{"original_string": "@Nullable List<Constraint<T>> myConstraints;", "modifier": "@Nullable", "type": "List<Constraint<T>>", "declarator": "myConstraints", "var_name": "myConstraints"}], "methods": [{"identifier": "getAll", "parameters": "(Object object)", "modifiers": "@NotNull public static", "return": "List<AbstractProperty<?>>", "signature": "List<AbstractProperty<?>> getAll(Object object)", "full_signature": "@NotNull public static List<AbstractProperty<?>> getAll(Object object)", "class_method_signature": "AbstractProperty.getAll(Object object)", "testcase": false, "constructor": false}, {"identifier": "addConstraint", "parameters": "(@NotNull Constraint<T> constraint)", "modifiers": "public final", "return": "void", "signature": "void addConstraint(@NotNull Constraint<T> constraint)", "full_signature": "public final void addConstraint(@NotNull Constraint<T> constraint)", "class_method_signature": "AbstractProperty.addConstraint(@NotNull Constraint<T> constraint)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(@NotNull T value)", "modifiers": "@Override public final", "return": "void", "signature": "void set(@NotNull T value)", "full_signature": "@Override public final void set(@NotNull T value)", "class_method_signature": "AbstractProperty.set(@NotNull T value)", "testcase": false, "constructor": false}, {"identifier": "isValueEqual", "parameters": "(@Nullable T value)", "modifiers": "protected", "return": "boolean", "signature": "boolean isValueEqual(@Nullable T value)", "full_signature": "protected boolean isValueEqual(@Nullable T value)", "class_method_signature": "AbstractProperty.isValueEqual(@Nullable T value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(@NotNull ObservableValue<T> value)", "modifiers": "public final", "return": "void", "signature": "void set(@NotNull ObservableValue<T> value)", "full_signature": "public final void set(@NotNull ObservableValue<T> value)", "class_method_signature": "AbstractProperty.set(@NotNull ObservableValue<T> value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractProperty.toString()", "testcase": false, "constructor": false}, {"identifier": "setDirectly", "parameters": "(@NotNull T value)", "modifiers": "protected abstract", "return": "void", "signature": "void setDirectly(@NotNull T value)", "full_signature": "protected abstract void setDirectly(@NotNull T value)", "class_method_signature": "AbstractProperty.setDirectly(@NotNull T value)", "testcase": false, "constructor": false}], "file": "observable/src/com/android/tools/idea/observable/AbstractProperty.java"}, "focal_method": {"identifier": "set", "parameters": "(@NotNull T value)", "modifiers": "@Override public final", "return": "void", "body": "@Override\n  public final void set(@NotNull T value) {\n    if (myConstraints != null) {\n      for (Constraint<T> c : myConstraints) {\n        value = c.constrain(value);\n      }\n    }\n    if (!isValueEqual(value)) {\n      setNotificationsEnabled(false);\n      setDirectly(value);\n      setNotificationsEnabled(true);\n      notifyInvalidated();\n    }\n  }", "signature": "void set(@NotNull T value)", "full_signature": "@Override public final void set(@NotNull T value)", "class_method_signature": "AbstractProperty.set(@NotNull T value)", "testcase": false, "constructor": false, "invocations": ["constrain", "isValueEqual", "setNotificationsEnabled", "setDirectly", "setNotificationsEnabled", "notifyInvalidated"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}