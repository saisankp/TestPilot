{"test_class": {"identifier": "ReflectionsTypeScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "saga-lib/src/test/java/com/codebullets/sagalib/startup/ReflectionsTypeScannerTest.java"}, "test_case": {"identifier": "scanForSagas_defaultCtor_returnsTestSaga", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void scanForSagas_defaultCtor_returnsTestSaga() {\n        // given\n        ReflectionsTypeScanner sut = new ReflectionsTypeScanner();\n\n        // when\n        Collection<Class<? extends Saga>> foundSagas = sut.scanForSagas();\n\n        // then\n        assertThat(\"Expected TestSaga from class path to be found.\", foundSagas, hasItem((Class<? extends Saga>) TestSaga.class));\n    }", "signature": "void scanForSagas_defaultCtor_returnsTestSaga()", "full_signature": "@Test public void scanForSagas_defaultCtor_returnsTestSaga()", "class_method_signature": "ReflectionsTypeScannerTest.scanForSagas_defaultCtor_returnsTestSaga()", "testcase": true, "constructor": false, "invocations": ["scanForSagas", "assertThat", "hasItem"]}, "focal_class": {"identifier": "ReflectionsTypeScanner", "superclass": "", "interfaces": "implements TypeScanner", "fields": [{"original_string": "private final Reflections reflections;", "modifier": "private final", "type": "Reflections", "declarator": "reflections", "var_name": "reflections"}], "methods": [{"identifier": "ReflectionsTypeScanner", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReflectionsTypeScanner()", "full_signature": "public  ReflectionsTypeScanner()", "class_method_signature": "ReflectionsTypeScanner.ReflectionsTypeScanner()", "testcase": false, "constructor": true}, {"identifier": "ReflectionsTypeScanner", "parameters": "(final Reflections reflections)", "modifiers": "public", "return": "", "signature": " ReflectionsTypeScanner(final Reflections reflections)", "full_signature": "public  ReflectionsTypeScanner(final Reflections reflections)", "class_method_signature": "ReflectionsTypeScanner.ReflectionsTypeScanner(final Reflections reflections)", "testcase": false, "constructor": true}, {"identifier": "scanForSagas", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends Saga>>", "signature": "Collection<Class<? extends Saga>> scanForSagas()", "full_signature": "@Override public Collection<Class<? extends Saga>> scanForSagas()", "class_method_signature": "ReflectionsTypeScanner.scanForSagas()", "testcase": false, "constructor": false}, {"identifier": "removeAbstractTypes", "parameters": "(final Collection<Class<? extends Saga>> foundTypes)", "modifiers": "private", "return": "Collection<Class<? extends Saga>>", "signature": "Collection<Class<? extends Saga>> removeAbstractTypes(final Collection<Class<? extends Saga>> foundTypes)", "full_signature": "private Collection<Class<? extends Saga>> removeAbstractTypes(final Collection<Class<? extends Saga>> foundTypes)", "class_method_signature": "ReflectionsTypeScanner.removeAbstractTypes(final Collection<Class<? extends Saga>> foundTypes)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(final Set<Class<? extends AbstractSingleEventSaga>> source)", "modifiers": "private", "return": "Set<Class<? extends Saga>>", "signature": "Set<Class<? extends Saga>> copy(final Set<Class<? extends AbstractSingleEventSaga>> source)", "full_signature": "private Set<Class<? extends Saga>> copy(final Set<Class<? extends AbstractSingleEventSaga>> source)", "class_method_signature": "ReflectionsTypeScanner.copy(final Set<Class<? extends AbstractSingleEventSaga>> source)", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/startup/ReflectionsTypeScanner.java"}, "focal_method": {"identifier": "scanForSagas", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends Saga>>", "body": "@Override\n    public Collection<Class<? extends Saga>> scanForSagas() {\n        Set<Class<? extends Saga>> sagaTypes = reflections.getSubTypesOf(Saga.class);\n\n        // separate searches in case saga-lib is in embedded jar when performing directory scanning\n        Set<Class<? extends AbstractSaga>> abstractSagaTypes = reflections.getSubTypesOf(AbstractSaga.class);\n        Set<Class<? extends AbstractSingleEventSaga>> singleEventSagaTypes = reflections.getSubTypesOf(AbstractSingleEventSaga.class);\n\n        Set<Class<? extends Saga>> foundTypes = Sets.union(sagaTypes, abstractSagaTypes);\n        Set<Class<? extends Saga>> mergedSet = Sets.union(foundTypes, copy(singleEventSagaTypes));\n\n        return removeAbstractTypes(mergedSet);\n    }", "signature": "Collection<Class<? extends Saga>> scanForSagas()", "full_signature": "@Override public Collection<Class<? extends Saga>> scanForSagas()", "class_method_signature": "ReflectionsTypeScanner.scanForSagas()", "testcase": false, "constructor": false, "invocations": ["getSubTypesOf", "getSubTypesOf", "getSubTypesOf", "union", "union", "copy", "removeAbstractTypes"]}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}