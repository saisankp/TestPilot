{"test_class": {"identifier": "URLTemplateSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "handlebars/src/test/java/com/github/jknack/handlebars/io/URLTemplateSourceTest.java"}, "test_case": {"identifier": "content", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void content() throws Exception {\n    URLTemplateSource templateSource = new URLTemplateSource(\"template.hbs\", getClass().getResource(\"/template.hbs\"));\n\n    assertEquals(\"template.hbs\", templateSource.content(StandardCharsets.UTF_8));\n  }", "signature": "void content()", "full_signature": "@Test public void content()", "class_method_signature": "URLTemplateSourceTest.content()", "testcase": true, "constructor": false, "invocations": ["getResource", "getClass", "assertEquals", "content"]}, "focal_class": {"identifier": "URLTemplateSource", "superclass": "extends AbstractTemplateSource", "interfaces": "", "fields": [{"original_string": "private URL resource;", "modifier": "private", "type": "URL", "declarator": "resource", "var_name": "resource"}, {"original_string": "private Long lastModified;", "modifier": "private", "type": "Long", "declarator": "lastModified", "var_name": "lastModified"}, {"original_string": "private String filename;", "modifier": "private", "type": "String", "declarator": "filename", "var_name": "filename"}], "methods": [{"identifier": "URLTemplateSource", "parameters": "(final String filename, final URL resource)", "modifiers": "public", "return": "", "signature": " URLTemplateSource(final String filename, final URL resource)", "full_signature": "public  URLTemplateSource(final String filename, final URL resource)", "class_method_signature": "URLTemplateSource.URLTemplateSource(final String filename, final URL resource)", "testcase": false, "constructor": true}, {"identifier": "content", "parameters": "(final Charset charset)", "modifiers": "@Override public", "return": "String", "signature": "String content(final Charset charset)", "full_signature": "@Override public String content(final Charset charset)", "class_method_signature": "URLTemplateSource.content(final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "filename", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String filename()", "full_signature": "@Override public String filename()", "class_method_signature": "URLTemplateSource.filename()", "testcase": false, "constructor": false}, {"identifier": "lastModified", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long lastModified()", "full_signature": "@Override public long lastModified()", "class_method_signature": "URLTemplateSource.lastModified()", "testcase": false, "constructor": false}, {"identifier": "reader", "parameters": "(final Charset charset)", "modifiers": "protected", "return": "Reader", "signature": "Reader reader(final Charset charset)", "full_signature": "protected Reader reader(final Charset charset)", "class_method_signature": "URLTemplateSource.reader(final Charset charset)", "testcase": false, "constructor": false}, {"identifier": "lastModified", "parameters": "(final URL resource)", "modifiers": "private", "return": "long", "signature": "long lastModified(final URL resource)", "full_signature": "private long lastModified(final URL resource)", "class_method_signature": "URLTemplateSource.lastModified(final URL resource)", "testcase": false, "constructor": false}], "file": "handlebars/src/main/java/com/github/jknack/handlebars/io/URLTemplateSource.java"}, "focal_method": {"identifier": "content", "parameters": "(final Charset charset)", "modifiers": "@Override public", "return": "String", "body": "@Override public String content(final Charset charset) throws IOException {\n    Reader reader = null;\n    final int bufferSize = 1024;\n    try {\n      reader = reader(charset);\n      char[] cbuf = new char[bufferSize];\n      StringBuilder sb = new StringBuilder(bufferSize);\n      int len;\n      while ((len = reader.read(cbuf, 0, bufferSize)) != -1) {\n        sb.append(cbuf, 0, len);\n      }\n      return sb.toString();\n    } finally {\n      if (reader != null) {\n        reader.close();\n      }\n    }\n  }", "signature": "String content(final Charset charset)", "full_signature": "@Override public String content(final Charset charset)", "class_method_signature": "URLTemplateSource.content(final Charset charset)", "testcase": false, "constructor": false, "invocations": ["reader", "read", "append", "toString", "close"]}, "repository": {"repo_id": 4459604, "url": "https://github.com/jknack/handlebars.java", "stars": 1107, "created": "5/27/2012 3:22:22 AM +00:00", "updates": "2020-01-24T06:58:31+00:00", "fork": "False", "license": "licensed"}}