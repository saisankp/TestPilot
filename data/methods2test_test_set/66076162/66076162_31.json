{"test_class": {"identifier": "ServerFoundActivityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServerFoundActivity serverFoundActivity;", "modifier": "private", "type": "ServerFoundActivity", "declarator": "serverFoundActivity", "var_name": "serverFoundActivity"}, {"original_string": "@Mock private ServerFoundComponent.Builder mockBuilder;", "modifier": "@Mock private", "type": "ServerFoundComponent.Builder", "declarator": "mockBuilder", "var_name": "mockBuilder"}, {"original_string": "@Mock private Navigator mockNavigator;", "modifier": "@Mock private", "type": "Navigator", "declarator": "mockNavigator", "var_name": "mockNavigator"}, {"original_string": "@Mock private ServerFoundPresenter mockServerFoundPresenter;", "modifier": "@Mock private", "type": "ServerFoundPresenter", "declarator": "mockServerFoundPresenter", "var_name": "mockServerFoundPresenter"}, {"original_string": "@Mock private ImageLoader mockImageLoader;", "modifier": "@Mock private", "type": "ImageLoader", "declarator": "mockImageLoader", "var_name": "mockImageLoader"}, {"original_string": "@Mock private ImageDecoder mockImageDecoder;", "modifier": "@Mock private", "type": "ImageDecoder", "declarator": "mockImageDecoder", "var_name": "mockImageDecoder"}, {"original_string": "@Mock private OsIconProvider mockOsIconProvider;", "modifier": "@Mock private", "type": "OsIconProvider", "declarator": "mockOsIconProvider", "var_name": "mockOsIconProvider"}, {"original_string": "private String mockPlayerAvatarUrl = \"https://minotar.net/helm/%s/%s.png\";", "modifier": "private", "type": "String", "declarator": "mockPlayerAvatarUrl = \"https://minotar.net/helm/%s/%s.png\"", "var_name": "mockPlayerAvatarUrl"}, {"original_string": "private int mockPlayerAvatarSize = 100;", "modifier": "private", "type": "int", "declarator": "mockPlayerAvatarSize = 100", "var_name": "mockPlayerAvatarSize"}, {"original_string": "private ServerFoundComponent serverFoundComponent = new ServerFoundComponent() {\n    @Override\n    public void injectMembers(ServerFoundActivity instance) {\n      instance.navigator = mockNavigator;\n      instance.presenter = mockServerFoundPresenter;\n      instance.imageLoader = mockImageLoader;\n      instance.imageDecoder = mockImageDecoder;\n      instance.osIconProvider = mockOsIconProvider;\n      instance.playerAvatarUrl = mockPlayerAvatarUrl;\n      instance.playerAvatarSize = mockPlayerAvatarSize;\n    }\n  };", "modifier": "private", "type": "ServerFoundComponent", "declarator": "serverFoundComponent = new ServerFoundComponent() {\n    @Override\n    public void injectMembers(ServerFoundActivity instance) {\n      instance.navigator = mockNavigator;\n      instance.presenter = mockServerFoundPresenter;\n      instance.imageLoader = mockImageLoader;\n      instance.imageDecoder = mockImageDecoder;\n      instance.osIconProvider = mockOsIconProvider;\n      instance.playerAvatarUrl = mockPlayerAvatarUrl;\n      instance.playerAvatarSize = mockPlayerAvatarSize;\n    }\n  }", "var_name": "serverFoundComponent"}], "file": "presentation/src/test/java/com/remotecraft/app/view/activity/ServerFoundActivityTest.java"}, "test_case": {"identifier": "shouldNavigateBack", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNavigateBack() throws Exception {\n    ServerModel serverModel = getServerModel();\n    serverFoundActivity.navigateBack(true, serverModel);\n\n    verify(mockNavigator).finishActivity(serverFoundActivity, true, \"server\", serverModel);\n  }", "signature": "void shouldNavigateBack()", "full_signature": "@Test public void shouldNavigateBack()", "class_method_signature": "ServerFoundActivityTest.shouldNavigateBack()", "testcase": true, "constructor": false, "invocations": ["getServerModel", "navigateBack", "finishActivity", "verify"]}, "focal_class": {"identifier": "ServerFoundActivity", "superclass": "extends BaseActivity", "interfaces": "implements ServerFoundView", "fields": [{"original_string": "public static final String KEY_SERVER = \"server\";", "modifier": "public static final", "type": "String", "declarator": "KEY_SERVER = \"server\"", "var_name": "KEY_SERVER"}, {"original_string": "@Inject ServerFoundPresenter presenter;", "modifier": "@Inject", "type": "ServerFoundPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Inject ImageLoader imageLoader;", "modifier": "@Inject", "type": "ImageLoader", "declarator": "imageLoader", "var_name": "imageLoader"}, {"original_string": "@Inject ImageDecoder imageDecoder;", "modifier": "@Inject", "type": "ImageDecoder", "declarator": "imageDecoder", "var_name": "imageDecoder"}, {"original_string": "@Inject OsIconProvider osIconProvider;", "modifier": "@Inject", "type": "OsIconProvider", "declarator": "osIconProvider", "var_name": "osIconProvider"}, {"original_string": "@Inject @PlayerAvatarUrl String playerAvatarUrl;", "modifier": "@Inject @PlayerAvatarUrl", "type": "String", "declarator": "playerAvatarUrl", "var_name": "playerAvatarUrl"}, {"original_string": "@Inject @PlayerAvatarSize int playerAvatarSize;", "modifier": "@Inject @PlayerAvatarSize", "type": "int", "declarator": "playerAvatarSize", "var_name": "playerAvatarSize"}, {"original_string": "@BindView(R.id.view_server_info) ServerInfoView serverInfoView;", "modifier": "@BindView(R.id.view_server_info)", "type": "ServerInfoView", "declarator": "serverInfoView", "var_name": "serverInfoView"}], "methods": [{"identifier": "getCallingIntent", "parameters": "(Context context, ServerModel serverModel)", "modifiers": "public static", "return": "Intent", "signature": "Intent getCallingIntent(Context context, ServerModel serverModel)", "full_signature": "public static Intent getCallingIntent(Context context, ServerModel serverModel)", "class_method_signature": "ServerFoundActivity.getCallingIntent(Context context, ServerModel serverModel)", "testcase": false, "constructor": false}, {"identifier": "onCreate", "parameters": "(Bundle savedInstanceState)", "modifiers": "@Override protected", "return": "void", "signature": "void onCreate(Bundle savedInstanceState)", "full_signature": "@Override protected void onCreate(Bundle savedInstanceState)", "class_method_signature": "ServerFoundActivity.onCreate(Bundle savedInstanceState)", "testcase": false, "constructor": false}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onDestroy()", "full_signature": "@Override protected void onDestroy()", "class_method_signature": "ServerFoundActivity.onDestroy()", "testcase": false, "constructor": false}, {"identifier": "injectMembers", "parameters": "(HasActivitySubcomponentBuilders hasActivitySubcomponentBuilders)", "modifiers": "@Override protected", "return": "void", "signature": "void injectMembers(HasActivitySubcomponentBuilders hasActivitySubcomponentBuilders)", "full_signature": "@Override protected void injectMembers(HasActivitySubcomponentBuilders hasActivitySubcomponentBuilders)", "class_method_signature": "ServerFoundActivity.injectMembers(HasActivitySubcomponentBuilders hasActivitySubcomponentBuilders)", "testcase": false, "constructor": false}, {"identifier": "initUi", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initUi()", "full_signature": "private void initUi()", "class_method_signature": "ServerFoundActivity.initUi()", "testcase": false, "constructor": false}, {"identifier": "mapExtras", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void mapExtras()", "full_signature": "private void mapExtras()", "class_method_signature": "ServerFoundActivity.mapExtras()", "testcase": false, "constructor": false}, {"identifier": "onOptionsItemSelected", "parameters": "(MenuItem item)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onOptionsItemSelected(MenuItem item)", "full_signature": "@Override public boolean onOptionsItemSelected(MenuItem item)", "class_method_signature": "ServerFoundActivity.onOptionsItemSelected(MenuItem item)", "testcase": false, "constructor": false}, {"identifier": "renderServer", "parameters": "(@NonNull ServerModel serverModel)", "modifiers": "@Override public", "return": "void", "signature": "void renderServer(@NonNull ServerModel serverModel)", "full_signature": "@Override public void renderServer(@NonNull ServerModel serverModel)", "class_method_signature": "ServerFoundActivity.renderServer(@NonNull ServerModel serverModel)", "testcase": false, "constructor": false}, {"identifier": "showError", "parameters": "(@NonNull String errorMessage)", "modifiers": "@Override public", "return": "void", "signature": "void showError(@NonNull String errorMessage)", "full_signature": "@Override public void showError(@NonNull String errorMessage)", "class_method_signature": "ServerFoundActivity.showError(@NonNull String errorMessage)", "testcase": false, "constructor": false}, {"identifier": "navigateBack", "parameters": "(boolean isSuccess, ServerModel serverModel)", "modifiers": "@Override public", "return": "void", "signature": "void navigateBack(boolean isSuccess, ServerModel serverModel)", "full_signature": "@Override public void navigateBack(boolean isSuccess, ServerModel serverModel)", "class_method_signature": "ServerFoundActivity.navigateBack(boolean isSuccess, ServerModel serverModel)", "testcase": false, "constructor": false}, {"identifier": "onConnectButtonClick", "parameters": "(View view)", "modifiers": "@OnClick(R.id.button_connect) public", "return": "void", "signature": "void onConnectButtonClick(View view)", "full_signature": "@OnClick(R.id.button_connect) public void onConnectButtonClick(View view)", "class_method_signature": "ServerFoundActivity.onConnectButtonClick(View view)", "testcase": false, "constructor": false}], "file": "presentation/src/main/java/com/remotecraft/app/view/activity/ServerFoundActivity.java"}, "focal_method": {"identifier": "navigateBack", "parameters": "(boolean isSuccess, ServerModel serverModel)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void navigateBack(boolean isSuccess, ServerModel serverModel) {\n    navigator.finishActivity(this, isSuccess, KEY_SERVER, serverModel);\n  }", "signature": "void navigateBack(boolean isSuccess, ServerModel serverModel)", "full_signature": "@Override public void navigateBack(boolean isSuccess, ServerModel serverModel)", "class_method_signature": "ServerFoundActivity.navigateBack(boolean isSuccess, ServerModel serverModel)", "testcase": false, "constructor": false, "invocations": ["finishActivity"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}