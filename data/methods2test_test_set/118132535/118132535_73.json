{"test_class": {"identifier": "MessageDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<String> messages;", "modifier": "private", "type": "List<String>", "declarator": "messages", "var_name": "messages"}], "file": "mobius-core/src/test/java/com/spotify/mobius/MessageDispatcherTest.java"}, "test_case": {"identifier": "shouldSendErrorsFromConsumerToMobiusHooks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldSendErrorsFromConsumerToMobiusHooks() throws Exception {\n    // given an error handler\n    TestErrorHandler errorHandler = new TestErrorHandler();\n\n    MobiusHooks.setErrorHandler(errorHandler);\n\n    final RuntimeException expected = new RuntimeException(\"boo\");\n\n    // and a message consumer that throws an exception,\n    // when a message is dispatched\n    new MessageDispatcher<String>(\n            WorkRunners.immediate(),\n            s -> {\n              throw expected;\n            })\n        .accept(\"here's an event that should be reported as the cause of failure\");\n\n    // then the exception gets sent to the error handler.\n    assertThat(errorHandler.handledErrors).extracting(Throwable::getCause).contains(expected);\n    assertThat(errorHandler.handledErrors)\n        .extracting(Throwable::getMessage)\n        .has(\n            matching(\n                containsString(\"here's an event that should be reported as the cause of failure\")),\n            atIndex(0));\n  }", "signature": "void shouldSendErrorsFromConsumerToMobiusHooks()", "full_signature": "@Test public void shouldSendErrorsFromConsumerToMobiusHooks()", "class_method_signature": "MessageDispatcherTest.shouldSendErrorsFromConsumerToMobiusHooks()", "testcase": true, "constructor": false, "invocations": ["setErrorHandler", "accept", "immediate", "contains", "extracting", "assertThat", "has", "extracting", "assertThat", "matching", "containsString", "atIndex"]}, "focal_class": {"identifier": "MessageDispatcher", "superclass": "", "interfaces": "implements Consumer<M>, Disposable", "fields": [{"original_string": "@Nonnull private final WorkRunner runner;", "modifier": "@Nonnull private final", "type": "WorkRunner", "declarator": "runner", "var_name": "runner"}, {"original_string": "@Nonnull private final Consumer<M> consumer;", "modifier": "@Nonnull private final", "type": "Consumer<M>", "declarator": "consumer", "var_name": "consumer"}, {"original_string": "private volatile boolean disposed = false;", "modifier": "private volatile", "type": "boolean", "declarator": "disposed = false", "var_name": "disposed"}], "methods": [{"identifier": "MessageDispatcher", "parameters": "(WorkRunner runner, Consumer<M> consumer)", "modifiers": "", "return": "", "signature": " MessageDispatcher(WorkRunner runner, Consumer<M> consumer)", "full_signature": "  MessageDispatcher(WorkRunner runner, Consumer<M> consumer)", "class_method_signature": "MessageDispatcher.MessageDispatcher(WorkRunner runner, Consumer<M> consumer)", "testcase": false, "constructor": true}, {"identifier": "accept", "parameters": "(final M message)", "modifiers": "@Override public", "return": "void", "signature": "void accept(final M message)", "full_signature": "@Override public void accept(final M message)", "class_method_signature": "MessageDispatcher.accept(final M message)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "MessageDispatcher.dispose()", "testcase": false, "constructor": false}], "file": "mobius-core/src/main/java/com/spotify/mobius/MessageDispatcher.java"}, "focal_method": {"identifier": "accept", "parameters": "(final M message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void accept(final M message) {\n    if (disposed) {\n      return;\n    }\n\n    runner.post(\n        () -> {\n          try {\n            consumer.accept(message);\n          } catch (Throwable throwable) {\n            MobiusHooks.handleError(\n                new RuntimeException(\n                    \"Consumer threw an exception when accepting message: \" + message, throwable));\n          }\n        });\n  }", "signature": "void accept(final M message)", "full_signature": "@Override public void accept(final M message)", "class_method_signature": "MessageDispatcher.accept(final M message)", "testcase": false, "constructor": false, "invocations": ["post", "accept", "handleError"]}, "repository": {"repo_id": 118132535, "url": "https://github.com/spotify/mobius", "stars": 663, "created": "1/19/2018 2:07:51 PM +00:00", "updates": "2020-01-27T22:05:43+00:00", "fork": "False", "license": "licensed"}}