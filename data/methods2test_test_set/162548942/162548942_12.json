{"test_class": {"identifier": "BrpcHttpObjectDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@DetectLeak\n    protected PooledByteBufAllocator alloc;", "modifier": "@DetectLeak\n    protected", "type": "PooledByteBufAllocator", "declarator": "alloc", "var_name": "alloc"}, {"original_string": "@Rule\n    public MemoryLeakDetectionRule memoryLeakDetectionRule = new MemoryLeakDetectionRule(this);", "modifier": "@Rule\n    public", "type": "MemoryLeakDetectionRule", "declarator": "memoryLeakDetectionRule = new MemoryLeakDetectionRule(this)", "var_name": "memoryLeakDetectionRule"}], "file": "brpc-java-communication/src/test/java/com/baidu/brpc/protocol/http/BrpcHttpObjectDecoderTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode() throws Exception {\n        BrpcHttpObjectDecoder decoder = BrpcHttpObjectDecoder.getDecoder(true);\n        ChannelHandlerContext ctx = Mockito.mock(ChannelHandlerContext.class);\n        when(ctx.alloc()).thenReturn(alloc);\n        ByteBuf buf = alloc.buffer(1024);\n        String[] testRequest = new String[]{\n                \"GET / HTTP/1.1\",\n                \"Host: localhost\",\n                \"Content-Length: 10\",\n                \"\",\n                \"1234567890\"\n        }; // full request\n        buf.writeBytes(StringUtils.join(testRequest, \"\\n\\r\").getBytes(Charset.forName(\"UTF-8\")));\n        Object message = decoder.decode(ctx, buf);\n        assertThat(message).isNotNull();\n        ReferenceCountUtil.release(buf);\n        ReferenceCountUtil.release(message);\n    }", "signature": "void testDecode()", "full_signature": "@Test public void testDecode()", "class_method_signature": "BrpcHttpObjectDecoderTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["getDecoder", "mock", "thenReturn", "when", "alloc", "buffer", "writeBytes", "getBytes", "join", "forName", "decode", "isNotNull", "assertThat", "release", "release"]}, "focal_class": {"identifier": "BrpcHttpObjectDecoder", "superclass": "extends HttpObjectDecoder", "interfaces": "", "fields": [{"original_string": "private static final FastThreadLocal<BrpcHttpObjectDecoder> CURRENT_RPC_RESPONSE =\n            new FastThreadLocal<BrpcHttpObjectDecoder>() {\n                @Override\n                protected BrpcHttpObjectDecoder initialValue() {\n                    return new BrpcHttpObjectDecoder(true);\n                }\n            };", "modifier": "private static final", "type": "FastThreadLocal<BrpcHttpObjectDecoder>", "declarator": "CURRENT_RPC_RESPONSE =\n            new FastThreadLocal<BrpcHttpObjectDecoder>() {\n                @Override\n                protected BrpcHttpObjectDecoder initialValue() {\n                    return new BrpcHttpObjectDecoder(true);\n                }\n            }", "var_name": "CURRENT_RPC_RESPONSE"}, {"original_string": "private static final HttpResponseStatus UNKNOWN_STATUS = new HttpResponseStatus(999, \"Unknown\");", "modifier": "private static final", "type": "HttpResponseStatus", "declarator": "UNKNOWN_STATUS = new HttpResponseStatus(999, \"Unknown\")", "var_name": "UNKNOWN_STATUS"}, {"original_string": "private boolean isDecodingRequest;", "modifier": "private", "type": "boolean", "declarator": "isDecodingRequest", "var_name": "isDecodingRequest"}], "methods": [{"identifier": "getDecoder", "parameters": "(boolean isDecodingRequest)", "modifiers": "public static", "return": "BrpcHttpObjectDecoder", "signature": "BrpcHttpObjectDecoder getDecoder(boolean isDecodingRequest)", "full_signature": "public static BrpcHttpObjectDecoder getDecoder(boolean isDecodingRequest)", "class_method_signature": "BrpcHttpObjectDecoder.getDecoder(boolean isDecodingRequest)", "testcase": false, "constructor": false}, {"identifier": "BrpcHttpObjectDecoder", "parameters": "(boolean isDecodingRequest)", "modifiers": "private", "return": "", "signature": " BrpcHttpObjectDecoder(boolean isDecodingRequest)", "full_signature": "private  BrpcHttpObjectDecoder(boolean isDecodingRequest)", "class_method_signature": "BrpcHttpObjectDecoder.BrpcHttpObjectDecoder(boolean isDecodingRequest)", "testcase": false, "constructor": true}, {"identifier": "createMessage", "parameters": "(String[] initialLine)", "modifiers": "@Override protected", "return": "HttpMessage", "signature": "HttpMessage createMessage(String[] initialLine)", "full_signature": "@Override protected HttpMessage createMessage(String[] initialLine)", "class_method_signature": "BrpcHttpObjectDecoder.createMessage(String[] initialLine)", "testcase": false, "constructor": false}, {"identifier": "createInvalidMessage", "parameters": "()", "modifiers": "@Override protected", "return": "HttpMessage", "signature": "HttpMessage createInvalidMessage()", "full_signature": "@Override protected HttpMessage createInvalidMessage()", "class_method_signature": "BrpcHttpObjectDecoder.createInvalidMessage()", "testcase": false, "constructor": false}, {"identifier": "isDecodingRequest", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isDecodingRequest()", "full_signature": "@Override protected boolean isDecodingRequest()", "class_method_signature": "BrpcHttpObjectDecoder.isDecodingRequest()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, ByteBuf in)", "modifiers": "public", "return": "Object", "signature": "Object decode(ChannelHandlerContext ctx, ByteBuf in)", "full_signature": "public Object decode(ChannelHandlerContext ctx, ByteBuf in)", "class_method_signature": "BrpcHttpObjectDecoder.decode(ChannelHandlerContext ctx, ByteBuf in)", "testcase": false, "constructor": false}], "file": "brpc-java-communication/src/main/java/com/baidu/brpc/protocol/http/BrpcHttpObjectDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(ChannelHandlerContext ctx, ByteBuf in)", "modifiers": "public", "return": "Object", "body": "public Object decode(ChannelHandlerContext ctx, ByteBuf in) {\n        BrpcHttpObjectAggregator httpObjectAggregator = new BrpcHttpObjectAggregator(10 * 1024 * 1024);\n        this.reset();\n        List httpParts = new LinkedList();\n        List httpResult = new LinkedList();\n        try {\n            while (in.isReadable()) {\n                int outSize = httpParts.size();\n\n                if (outSize > 0) {\n                    for (int i = 0; i < outSize; i++) {\n                        httpObjectAggregator.aggregate(ctx, httpParts.get(i), httpResult);\n                        if (httpResult.size() > 0) {\n                            return httpResult.get(0);\n                        }\n                    }\n                    // fireChannelRead(ctx, out, outSize);\n                    httpParts.clear();\n\n                    // Check if this handler was removed before continuing with decoding.\n                    // If it was removed, it is not safe to continue to operate on the buffer.\n                    //\n                    // See:\n                    // - https://github.com/netty/netty/issues/4635\n                    if (ctx.isRemoved()) {\n                        break;\n                    }\n                    outSize = 0;\n                }\n\n                int oldInputLength = in.readableBytes();\n                decode(ctx, in, httpParts);\n                // decodeRemovalReentryProtection(ctx, in, out);\n\n                // Check if this handler was removed before continuing the loop.\n                // If it was removed, it is not safe to continue to operate on the buffer.\n                //\n                // See https://github.com/netty/netty/issues/1664\n                if (ctx.isRemoved()) {\n                    break;\n                }\n\n                if (outSize == httpParts.size()) {\n                    if (oldInputLength == in.readableBytes()) {\n                        break;\n                    } else {\n                        continue;\n                    }\n                }\n\n                if (oldInputLength == in.readableBytes()) {\n                    throw new DecoderException(\n                            StringUtil.simpleClassName(getClass()) +\n                                    \".decode() did not read anything but decoded a message.\");\n                }\n\n                if (isSingleDecode()) {\n                    break;\n                }\n            }\n            int outSize = httpParts.size();\n            if (outSize > 0) {\n                for (int i = 0; i < outSize; i++) {\n                    httpObjectAggregator.aggregate(ctx, httpParts.get(i), httpResult);\n                    if (httpResult.size() > 0) {\n                        return httpResult.get(0);\n                    }\n                }\n            }\n            // decode failed, there's not enough bytes\n            httpObjectAggregator.abort();\n            return null;\n        } catch (DecoderException e) {\n            throw e;\n        } catch (Exception cause) {\n            throw new DecoderException(cause);\n        }\n    }", "signature": "Object decode(ChannelHandlerContext ctx, ByteBuf in)", "full_signature": "public Object decode(ChannelHandlerContext ctx, ByteBuf in)", "class_method_signature": "BrpcHttpObjectDecoder.decode(ChannelHandlerContext ctx, ByteBuf in)", "testcase": false, "constructor": false, "invocations": ["reset", "isReadable", "size", "aggregate", "get", "size", "get", "clear", "isRemoved", "readableBytes", "decode", "isRemoved", "size", "readableBytes", "readableBytes", "simpleClassName", "getClass", "isSingleDecode", "size", "aggregate", "get", "size", "get", "abort"]}, "repository": {"repo_id": 162548942, "url": "https://github.com/baidu/brpc-java", "language": "Java", "is_fork": false, "fork_count": 175, "stargazer_count": 551, "size": 3271, "license": "licensed"}}