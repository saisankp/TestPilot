{"test_class": {"identifier": "ToPEPersistentIdentifiableTest", "superclass": "extends Base_2_1_0_PE_Test", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ToPEPersistentIdentifiable task;", "modifier": "@Autowired\n    private", "type": "ToPEPersistentIdentifiable", "declarator": "task", "var_name": "task"}, {"original_string": "@Autowired\n    private PreparationRepository repository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n    private DataSetMetadataRepository dataSetMetadataRepository;", "modifier": "@Autowired\n    private", "type": "DataSetMetadataRepository", "declarator": "dataSetMetadataRepository", "var_name": "dataSetMetadataRepository"}, {"original_string": "@Autowired\n    private DataSetMetadataBuilder builder;", "modifier": "@Autowired\n    private", "type": "DataSetMetadataBuilder", "declarator": "builder", "var_name": "builder"}], "file": "dataprep-upgrade/src/test/java/org/talend/dataprep/upgrade/to_2_1_0_PE/ToPEPersistentIdentifiableTest.java"}, "test_case": {"identifier": "shouldUpdatePersistentClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldUpdatePersistentClasses() {\n        // when\n        task.run();\n\n        // then\n        assertEquals(2, repository.list(PersistentPreparation.class).count());\n        List<PersistentPreparation> persistentPreparationList = repository\n                .list(PersistentPreparation.class)\n                .sorted(Comparator.comparingInt(p1 -> p1.getSteps().size()))\n                .collect(Collectors.toList());\n        persistentPreparationList.forEach(p -> {\n            assertNotNull(p.getSteps());\n            assertNotNull(p.getRowMetadata());\n            assertFalse(p.getSteps().isEmpty());\n            assertEquals(Type.INTEGER.getName(), p.getRowMetadata().getColumns().get(0).getType());\n        });\n        assertEquals(6, persistentPreparationList.get(0).getRowMetadata().getColumns().size());\n        assertEquals(5, persistentPreparationList.get(1).getRowMetadata().getColumns().size());\n\n        repository.list(Preparation.class).forEach(p -> {\n            // make sure preparation steps are read\n            assertNotNull(p.getSteps());\n            assertFalse(p.getSteps().isEmpty());\n        });\n\n        // root step is filtered\n        assertEquals(10, repository.list(PersistentStep.class).filter(s -> s.getParentId() != null).count());\n        repository.list(Step.class).forEach(s -> assertNotNull(s.getId()));\n    }", "signature": "void shouldUpdatePersistentClasses()", "full_signature": "@Test public void shouldUpdatePersistentClasses()", "class_method_signature": "ToPEPersistentIdentifiableTest.shouldUpdatePersistentClasses()", "testcase": true, "constructor": false, "invocations": ["run", "assertEquals", "count", "list", "collect", "sorted", "list", "comparingInt", "size", "getSteps", "toList", "forEach", "assertNotNull", "getSteps", "assertNotNull", "getRowMetadata", "assertFalse", "isEmpty", "getSteps", "assertEquals", "getName", "getType", "get", "getColumns", "getRowMetadata", "assertEquals", "size", "getColumns", "getRowMetadata", "get", "assertEquals", "size", "getColumns", "getRowMetadata", "get", "forEach", "list", "assertNotNull", "getSteps", "assertFalse", "isEmpty", "getSteps", "assertEquals", "count", "filter", "list", "getParentId", "forEach", "list", "assertNotNull", "getId"]}, "focal_class": {"identifier": "ToPEPersistentIdentifiable", "superclass": "", "interfaces": "implements BaseUpgradeTaskTo_2_1_0_PE", "fields": [{"original_string": "private static final Logger LOGGER = getLogger(ToPEPersistentIdentifiable.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = getLogger(ToPEPersistentIdentifiable.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private PreparationUtils preparationUtils;", "modifier": "@Autowired\n    private", "type": "PreparationUtils", "declarator": "preparationUtils", "var_name": "preparationUtils"}, {"original_string": "@Autowired\n    private PreparationRepository preparationRepository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "preparationRepository", "var_name": "preparationRepository"}, {"original_string": "@Autowired\n    private DataSetMetadataRepository dataSetMetadataRepository;", "modifier": "@Autowired\n    private", "type": "DataSetMetadataRepository", "declarator": "dataSetMetadataRepository", "var_name": "dataSetMetadataRepository"}, {"original_string": "private FileSystemPreparationRepository fileSystemPreparationRepository;", "modifier": "private", "type": "FileSystemPreparationRepository", "declarator": "fileSystemPreparationRepository", "var_name": "fileSystemPreparationRepository"}], "methods": [{"identifier": "postInitialize", "parameters": "()", "modifiers": "@PostConstruct private", "return": "void", "signature": "void postInitialize()", "full_signature": "@PostConstruct private void postInitialize()", "class_method_signature": "ToPEPersistentIdentifiable.postInitialize()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ToPEPersistentIdentifiable.run()", "testcase": false, "constructor": false}, {"identifier": "getOrder", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOrder()", "full_signature": "@Override public int getOrder()", "class_method_signature": "ToPEPersistentIdentifiable.getOrder()", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "@Override public", "return": "target", "signature": "target getTarget()", "full_signature": "@Override public target getTarget()", "class_method_signature": "ToPEPersistentIdentifiable.getTarget()", "testcase": false, "constructor": false}, {"identifier": "turnToPersistentStep", "parameters": "(Step step)", "modifiers": "private", "return": "PersistentStep", "signature": "PersistentStep turnToPersistentStep(Step step)", "full_signature": "private PersistentStep turnToPersistentStep(Step step)", "class_method_signature": "ToPEPersistentIdentifiable.turnToPersistentStep(Step step)", "testcase": false, "constructor": false}, {"identifier": "turnToPersistentPreparation", "parameters": "(Preparation preparation)", "modifiers": "private", "return": "PersistentPreparation", "signature": "PersistentPreparation turnToPersistentPreparation(Preparation preparation)", "full_signature": "private PersistentPreparation turnToPersistentPreparation(Preparation preparation)", "class_method_signature": "ToPEPersistentIdentifiable.turnToPersistentPreparation(Preparation preparation)", "testcase": false, "constructor": false}], "file": "dataprep-upgrade/src/main/java/org/talend/dataprep/upgrade/to_2_1_0_PE/ToPEPersistentIdentifiable.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        LOGGER.debug(\"starting upgrade from {} to {}.\", Step.class, PersistentStep.class);\n        final AtomicLong counter = new AtomicLong(0L);\n        fileSystemPreparationRepository.list(Step.class).forEach(s -> {\n            fileSystemPreparationRepository.remove(s);\n            PersistentStep persistentStep = turnToPersistentStep(s);\n            preparationRepository.add(persistentStep);\n            LOGGER.debug(\"step {} updated to {}\", s, persistentStep);\n            counter.incrementAndGet();\n        });\n        LOGGER.info(\"Upgrade from {} to {} done, {} steps processed.\", Step.class, PersistentStep.class, counter.get());\n\n        LOGGER.debug(\"starting upgrade from {} to {}.\", Preparation.class, PersistentPreparation.class);\n        final Stream<Preparation> preparations = fileSystemPreparationRepository.list(Preparation.class);\n        preparations.forEach(p -> {\n            fileSystemPreparationRepository.remove(p);\n            PersistentPreparation persistentPreparation = turnToPersistentPreparation(p);\n            preparationRepository.add(persistentPreparation);\n        });\n        LOGGER.info(\"Upgrade from {} to {} done.\", Preparation.class, PersistentPreparation.class);\n\n        LOGGER.info(\"Migration of step ids in preparation...\");\n        final Stream<PersistentPreparation> persistentPreparations =\n                preparationRepository.list(PersistentPreparation.class);\n        persistentPreparations.forEach(p -> {\n            LOGGER.info(\"Migration of preparation #{}\", p.getId());\n            final List<String> stepsIds = preparationUtils.listStepsIds(p.getHeadId(), preparationRepository);\n            p.setSteps(stepsIds);\n\n            final DataSetMetadata metadata = dataSetMetadataRepository.get(p.getDataSetId());\n            if (metadata != null) {\n                LOGGER.info(\"Set metadata {} in preparation {}.\", p.getDataSetId(), p.getId());\n                p.setRowMetadata(metadata.getRowMetadata());\n            } else {\n                LOGGER.info(\"Metadata {} not found for preparation {}.\", p.getDataSetId(), p.getId());\n                p.setRowMetadata(new RowMetadata());\n            }\n\n            preparationRepository.add(p);\n            LOGGER.info(\"Migration of preparation #{} done ({} steps)\", p.getId(), stepsIds.size());\n        });\n        LOGGER.info(\"Migration of step ids in preparation done.\");\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ToPEPersistentIdentifiable.run()", "testcase": false, "constructor": false, "invocations": ["debug", "forEach", "list", "remove", "turnToPersistentStep", "add", "debug", "incrementAndGet", "info", "get", "debug", "list", "forEach", "remove", "turnToPersistentPreparation", "add", "info", "info", "list", "forEach", "info", "getId", "listStepsIds", "getHeadId", "setSteps", "get", "getDataSetId", "info", "getDataSetId", "getId", "setRowMetadata", "getRowMetadata", "info", "getDataSetId", "getId", "setRowMetadata", "add", "info", "getId", "size", "info"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}