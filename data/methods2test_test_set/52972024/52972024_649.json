{"test_class": {"identifier": "CreateAsyncOperationActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CreateAsyncOperationActor actor;", "modifier": "private", "type": "CreateAsyncOperationActor", "declarator": "actor", "var_name": "actor"}, {"original_string": "private CreateAsyncOperationMessage message;", "modifier": "private", "type": "CreateAsyncOperationMessage", "declarator": "message", "var_name": "message"}, {"original_string": "private IAsyncOperationCollection collection;", "modifier": "private", "type": "IAsyncOperationCollection", "declarator": "collection", "var_name": "collection"}], "file": "CommonFeatures/AsyncOperations/CreateAsyncOperationActor/src/test/java/info/smart_tools/smartactors/async_operations/create_async_operation/CreateAsyncOperationActorTest.java"}, "test_case": {"identifier": "ShouldCreateOperationAndSetToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ShouldCreateOperationAndSetToken()\n        throws ReadValueException, CreateAsyncOperationActorException, ChangeValueException, ResolutionException,\n                CreateAsyncOperationException {\n\n        String sessionId = \"sessionId\";\n        when(IOC.resolve(Keys.getOrAdd(\"db.collection.nextid\"))).thenReturn(\"\");\n        when(message.getSessionId()).thenReturn(sessionId);\n        when(message.getExpiredTime()).thenReturn(4);\n\n        IObject asyncDataObj = mock(IObject.class);\n        IKey dataKey = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")).thenReturn(dataKey);\n        when(message.getOperationData()).thenReturn(asyncDataObj);\n\n        actor.create(message);\n\n        verify(collection).createAsyncOperation(eq(asyncDataObj), anyString(), anyString());\n        verify(message).setAsyncOperationToken(anyString());\n    }", "signature": "void ShouldCreateOperationAndSetToken()", "full_signature": "@Test public void ShouldCreateOperationAndSetToken()", "class_method_signature": "CreateAsyncOperationActorTest.ShouldCreateOperationAndSetToken()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "resolve", "getOrAdd", "thenReturn", "when", "getSessionId", "thenReturn", "when", "getExpiredTime", "mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "when", "getOperationData", "create", "createAsyncOperation", "verify", "eq", "anyString", "anyString", "setAsyncOperationToken", "verify", "anyString"]}, "focal_class": {"identifier": "CreateAsyncOperationActor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IAsyncOperationCollection collection;", "modifier": "private", "type": "IAsyncOperationCollection", "declarator": "collection", "var_name": "collection"}, {"original_string": "private DateTimeFormatter formatter;", "modifier": "private", "type": "DateTimeFormatter", "declarator": "formatter", "var_name": "formatter"}], "methods": [{"identifier": "CreateAsyncOperationActor", "parameters": "(final IObject params)", "modifiers": "public", "return": "", "signature": " CreateAsyncOperationActor(final IObject params)", "full_signature": "public  CreateAsyncOperationActor(final IObject params)", "class_method_signature": "CreateAsyncOperationActor.CreateAsyncOperationActor(final IObject params)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final CreateAsyncOperationMessage message)", "modifiers": "public", "return": "void", "signature": "void create(final CreateAsyncOperationMessage message)", "full_signature": "public void create(final CreateAsyncOperationMessage message)", "class_method_signature": "CreateAsyncOperationActor.create(final CreateAsyncOperationMessage message)", "testcase": false, "constructor": false}], "file": "CommonFeatures/AsyncOperations/CreateAsyncOperationActor/src/main/java/info/smart_tools/smartactors/async_operations/create_async_operation/CreateAsyncOperationActor.java"}, "focal_method": {"identifier": "create", "parameters": "(final CreateAsyncOperationMessage message)", "modifiers": "public", "return": "void", "body": "public void create(final CreateAsyncOperationMessage message) throws CreateAsyncOperationActorException {\n\n        try {\n            String token = IOC.resolve(Keys.getOrAdd(\"db.collection.nextid\"));\n            Integer amountOfHoursToExpireFromNow = message.getExpiredTime();\n            String expiredTime = LocalDateTime.now().plusHours(amountOfHoursToExpireFromNow).format(formatter);\n            message.setSessionIdInData(message.getSessionId());\n            IObject authOperationData = message.getOperationData();\n            collection.createAsyncOperation(authOperationData, token, expiredTime);\n\n            message.setAsyncOperationToken(token);\n\n            List<String> availableTokens = message.getOperationTokens();\n            if (availableTokens == null) {\n                message.setOperationTokens(Arrays.asList(token));\n            } else {\n                availableTokens.add(token);\n                message.setOperationTokens(availableTokens);\n            }\n        } catch (ResolutionException | ReadValueException | ChangeValueException | CreateAsyncOperationException e) {\n            throw new CreateAsyncOperationActorException(\"Can't create async operation.\", e);\n        }\n    }", "signature": "void create(final CreateAsyncOperationMessage message)", "full_signature": "public void create(final CreateAsyncOperationMessage message)", "class_method_signature": "CreateAsyncOperationActor.create(final CreateAsyncOperationMessage message)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getExpiredTime", "format", "plusHours", "now", "setSessionIdInData", "getSessionId", "getOperationData", "createAsyncOperation", "setAsyncOperationToken", "getOperationTokens", "setOperationTokens", "asList", "add", "setOperationTokens"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}