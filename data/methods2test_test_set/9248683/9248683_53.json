{"test_class": {"identifier": "RangeExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String propertyName = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "propertyName = \"propertyName\"", "var_name": "propertyName"}, {"original_string": "private final Integer from = 1;", "modifier": "private final", "type": "Integer", "declarator": "from = 1", "var_name": "from"}, {"original_string": "private final Integer to = 10;", "modifier": "private final", "type": "Integer", "declarator": "to = 10", "var_name": "to"}, {"original_string": "private final Operator operator = Operator.BETWEEN;", "modifier": "private final", "type": "Operator", "declarator": "operator = Operator.BETWEEN", "var_name": "operator"}, {"original_string": "private final RangeExpression e = new RangeExpression(operator,\n            propertyName, from, to);", "modifier": "private final", "type": "RangeExpression", "declarator": "e = new RangeExpression(operator,\n            propertyName, from, to)", "var_name": "e"}], "file": "seeking-core/src/test/java/com/eharmony/matching/seeking/query/criterion/expression/RangeExpressionTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() {\n        String expected = propertyName + \" \" + operator + \" \" + from + \",\" + to;\n        assertEquals(expected, e.toString());\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "RangeExpressionTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "RangeExpression", "superclass": "extends Expression", "interfaces": "", "fields": [{"original_string": "private final Object from;", "modifier": "private final", "type": "Object", "declarator": "from", "var_name": "from"}, {"original_string": "private final Object to;", "modifier": "private final", "type": "Object", "declarator": "to", "var_name": "to"}], "methods": [{"identifier": "RangeExpression", "parameters": "(Operator operator, String propertyName, Object from,\n            Object to)", "modifiers": "public", "return": "", "signature": " RangeExpression(Operator operator, String propertyName, Object from,\n            Object to)", "full_signature": "public  RangeExpression(Operator operator, String propertyName, Object from,\n            Object to)", "class_method_signature": "RangeExpression.RangeExpression(Operator operator, String propertyName, Object from,\n            Object to)", "testcase": false, "constructor": true}, {"identifier": "getFrom", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getFrom()", "full_signature": "public Object getFrom()", "class_method_signature": "RangeExpression.getFrom()", "testcase": false, "constructor": false}, {"identifier": "getTo", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getTo()", "full_signature": "public Object getTo()", "class_method_signature": "RangeExpression.getTo()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RangeExpression.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RangeExpression.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "RangeExpression.equals(Object obj)", "testcase": false, "constructor": false}], "file": "seeking-core/src/main/java/com/eharmony/matching/seeking/query/criterion/expression/RangeExpression.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String toString() {\n        return getPropertyName() + \" \" + getOperator() + \" \" + from + \",\" + to;\n    }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RangeExpression.toString()", "testcase": false, "constructor": false, "invocations": ["getPropertyName", "getOperator"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}