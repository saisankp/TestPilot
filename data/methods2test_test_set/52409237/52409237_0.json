{"test_class": {"identifier": "TraditionToSimpleTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons-nlp/src/test/java/com/tqmall/search/commons/nlp/TraditionToSimpleTest.java"}, "test_case": {"identifier": "convertTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertTest() {\n        TraditionToSimple traditionToSimple = TraditionToSimple.instance();\n        Assert.assertFalse(traditionToSimple.isTraditional('\u7b80'));\n        Assert.assertTrue(traditionToSimple.isTraditional('\u7c21'));\n        Assert.assertTrue(traditionToSimple.convert('\u7c21') == '\u7b80');\n        String str = \"\u7b80\u4f53\";\n        Assert.assertTrue(str == traditionToSimple.convert(str));\n        str = \"\u7c21\u4f53\";\n        Assert.assertEquals(\"\u7b80\u4f53\", traditionToSimple.convert(str));\n        str = \"\u7535\u8d39\u6e2c\u8a66\u7e41\u9ad4\u8f49\u7c21\u9ad4\";\n        Assert.assertEquals(\"\u7535\u8d39\u6d4b\u8bd5\u7e41\u4f53\u8f6c\u7b80\u4f53\", traditionToSimple.convert(str));\n        str = \"\u7535\u8d39as\u6e2c\u8a66\u7e4112\u9ad4\u8f49xing\u7c21\u9ad4\";\n        Assert.assertEquals(\"\u7535\u8d39as\u6d4b\u8bd5\u7e4112\u4f53\u8f6cxing\u7b80\u4f53\", traditionToSimple.convert(str));\n        str = \"head\u7535\u8d39as\u6e2c\u8a6612\u7e41\u9ad4\u8f49xing\u7c21\u9ad4\";\n        Assert.assertEquals(\"head\u7535\u8d39as\u6d4b\u8bd512\u7e41\u4f53\u8f6cxing\u7b80\u4f53\", traditionToSimple.convert(str));\n    }", "signature": "void convertTest()", "full_signature": "@Test public void convertTest()", "class_method_signature": "TraditionToSimpleTest.convertTest()", "testcase": true, "constructor": false, "invocations": ["instance", "assertFalse", "isTraditional", "assertTrue", "isTraditional", "assertTrue", "convert", "assertTrue", "convert", "assertEquals", "ert(str", "assertEquals", "", "assertEquals", "", "assertEquals", ""]}, "focal_class": {"identifier": "TraditionToSimple", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(TraditionToSimple.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TraditionToSimple.class)", "var_name": "log"}, {"original_string": "private static final LazyInit<TraditionToSimple> INSTANCE = new LazyInit<>(new Supplier<TraditionToSimple>() {\n        @Override\n        public TraditionToSimple get() {\n            return new TraditionToSimple();\n        }\n    });", "modifier": "private static final", "type": "LazyInit<TraditionToSimple>", "declarator": "INSTANCE = new LazyInit<>(new Supplier<TraditionToSimple>() {\n        @Override\n        public TraditionToSimple get() {\n            return new TraditionToSimple();\n        }\n    })", "var_name": "INSTANCE"}, {"original_string": "private final char[] chars;", "modifier": "private final", "type": "char[]", "declarator": "chars", "var_name": "chars"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "public static", "return": "TraditionToSimple", "signature": "TraditionToSimple instance()", "full_signature": "public static TraditionToSimple instance()", "class_method_signature": "TraditionToSimple.instance()", "testcase": false, "constructor": false}, {"identifier": "TraditionToSimple", "parameters": "()", "modifiers": "", "return": "", "signature": " TraditionToSimple()", "full_signature": "  TraditionToSimple()", "class_method_signature": "TraditionToSimple.TraditionToSimple()", "testcase": false, "constructor": true}, {"identifier": "isTraditional", "parameters": "(char ch)", "modifiers": "public final", "return": "boolean", "signature": "boolean isTraditional(char ch)", "full_signature": "public final boolean isTraditional(char ch)", "class_method_signature": "TraditionToSimple.isTraditional(char ch)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(char ch)", "modifiers": "public final", "return": "char", "signature": "char convert(char ch)", "full_signature": "public final char convert(char ch)", "class_method_signature": "TraditionToSimple.convert(char ch)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(final char[] text, final int startPos, final int length)", "modifiers": "public final", "return": "void", "signature": "void convert(final char[] text, final int startPos, final int length)", "full_signature": "public final void convert(final char[] text, final int startPos, final int length)", "class_method_signature": "TraditionToSimple.convert(final char[] text, final int startPos, final int length)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(String str)", "modifiers": "public final", "return": "String", "signature": "String convert(String str)", "full_signature": "public final String convert(String str)", "class_method_signature": "TraditionToSimple.convert(String str)", "testcase": false, "constructor": false}], "file": "commons-nlp/src/main/java/com/tqmall/search/commons/nlp/TraditionToSimple.java"}, "focal_method": {"identifier": "convert", "parameters": "(char ch)", "modifiers": "public final", "return": "char", "body": "public final char convert(char ch) {\n        return ch < NlpConst.CJK_UNIFIED_IDEOGRAPHS_FIRST || ch > NlpConst.CJK_UNIFIED_IDEOGRAPHS_LAST ?\n                ch : chars[ch - NlpConst.CJK_UNIFIED_IDEOGRAPHS_FIRST];\n    }", "signature": "char convert(char ch)", "full_signature": "public final char convert(char ch)", "class_method_signature": "TraditionToSimple.convert(char ch)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 52409237, "url": "https://github.com/wxingyl/search-commons", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 20, "size": 3165, "license": "licensed"}}