{"test_class": {"identifier": "GlobalLoadBalancingRulesServiceImplTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImplTest.class)", "var_name": "s_logger"}], "file": "server/src/test/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImplTest.java"}, "test_case": {"identifier": "testAssignToGlobalLoadBalancerRule", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAssignToGlobalLoadBalancerRule() throws Exception {\n\n        s_logger.info(\"Running tests for AssignToGlobalLoadBalancerRule() service API\");\n\n        /*\n         * TEST 1: given valid gslb rule id, valid lb rule id, and  caller has access to both the rules\n         * assignToGlobalLoadBalancerRule service API should succeed\n         */\n        runAssignToGlobalLoadBalancerRuleTest();\n\n        /*\n         * TEST 2: given valid gslb rule id, two valid Lb rules but both belong to same zone then\n         * assignToGlobalLoadBalancerRule service API should fail\n         */\n        runAssignToGlobalLoadBalancerRuleTestSameZoneLb();\n\n        /*\n         * TEST 3: if gslb rule is in revoke state assignToGlobalLoadBalancerRule service API should fail\n         */\n        runAssignToGlobalLoadBalancerRuleTestRevokedState();\n    }", "signature": "void testAssignToGlobalLoadBalancerRule()", "full_signature": "@Test public void testAssignToGlobalLoadBalancerRule()", "class_method_signature": "GlobalLoadBalancingRulesServiceImplTest.testAssignToGlobalLoadBalancerRule()", "testcase": true, "constructor": false, "invocations": ["info", "runAssignToGlobalLoadBalancerRuleTest", "runAssignToGlobalLoadBalancerRuleTestSameZoneLb", "runAssignToGlobalLoadBalancerRuleTestRevokedState"]}, "focal_class": {"identifier": "GlobalLoadBalancingRulesServiceImpl", "superclass": "", "interfaces": "implements GlobalLoadBalancingRulesService", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(GlobalLoadBalancingRulesServiceImpl.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    GlobalLoadBalancerRuleDao _gslbRuleDao;", "modifier": "@Inject", "type": "GlobalLoadBalancerRuleDao", "declarator": "_gslbRuleDao", "var_name": "_gslbRuleDao"}, {"original_string": "@Inject\n    GlobalLoadBalancerLbRuleMapDao _gslbLbMapDao;", "modifier": "@Inject", "type": "GlobalLoadBalancerLbRuleMapDao", "declarator": "_gslbLbMapDao", "var_name": "_gslbLbMapDao"}, {"original_string": "@Inject\n    RegionDao _regionDao;", "modifier": "@Inject", "type": "RegionDao", "declarator": "_regionDao", "var_name": "_regionDao"}, {"original_string": "@Inject\n    RulesManager _rulesMgr;", "modifier": "@Inject", "type": "RulesManager", "declarator": "_rulesMgr", "var_name": "_rulesMgr"}, {"original_string": "@Inject\n    LoadBalancerDao _lbDao;", "modifier": "@Inject", "type": "LoadBalancerDao", "declarator": "_lbDao", "var_name": "_lbDao"}, {"original_string": "@Inject\n    NetworkDao _networkDao;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    ConfigurationDao _globalConfigDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_globalConfigDao", "var_name": "_globalConfigDao"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "protected List<GslbServiceProvider> _gslbProviders;", "modifier": "protected", "type": "List<GslbServiceProvider>", "declarator": "_gslbProviders", "var_name": "_gslbProviders"}], "methods": [{"identifier": "setGslbServiceProviders", "parameters": "(List<GslbServiceProvider> providers)", "modifiers": "public", "return": "void", "signature": "void setGslbServiceProviders(List<GslbServiceProvider> providers)", "full_signature": "public void setGslbServiceProviders(List<GslbServiceProvider> providers)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.setGslbServiceProviders(List<GslbServiceProvider> providers)", "testcase": false, "constructor": false}, {"identifier": "createGlobalLoadBalancerRule", "parameters": "(CreateGlobalLoadBalancerRuleCmd newRule)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_CREATE, eventDescription = \"creating global load \" + \"balancer rule\", create = true) public GlobalLoadBalancerRule createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.createGlobalLoadBalancerRule(CreateGlobalLoadBalancerRuleCmd newRule)", "testcase": false, "constructor": false}, {"identifier": "assignToGlobalLoadBalancerRule", "parameters": "(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public", "return": "boolean", "signature": "boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "removeFromGlobalLoadBalancerRule", "parameters": "(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public", "return": "boolean", "signature": "boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_REMOVE_FROM_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Removing a load balancer rule to be part of global load balancer rule\") public boolean removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.removeFromGlobalLoadBalancerRule(RemoveFromGlobalLoadBalancerRuleCmd removeFromGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "deleteGlobalLoadBalancerRule", "parameters": "(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_DELETE, eventDescription = \"Delete global load balancer rule\") public", "return": "boolean", "signature": "boolean deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_GLOBAL_LOAD_BALANCER_DELETE, eventDescription = \"Delete global load balancer rule\") public boolean deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.deleteGlobalLoadBalancerRule(DeleteGlobalLoadBalancerRuleCmd deleteGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "revokeGslbRule", "parameters": "(final long gslbRuleId, Account caller)", "modifiers": "@DB private", "return": "void", "signature": "void revokeGslbRule(final long gslbRuleId, Account caller)", "full_signature": "@DB private void revokeGslbRule(final long gslbRuleId, Account caller)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.revokeGslbRule(final long gslbRuleId, Account caller)", "testcase": false, "constructor": false}, {"identifier": "updateGlobalLoadBalancerRule", "parameters": "(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "modifiers": "@Override public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "full_signature": "@Override public GlobalLoadBalancerRule updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.updateGlobalLoadBalancerRule(UpdateGlobalLoadBalancerRuleCmd updateGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "listGlobalLoadBalancerRule", "parameters": "(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "modifiers": "@Override public", "return": "List<GlobalLoadBalancerRule>", "signature": "List<GlobalLoadBalancerRule> listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "full_signature": "@Override public List<GlobalLoadBalancerRule> listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.listGlobalLoadBalancerRule(ListGlobalLoadBalancerRuleCmd listGslbCmd)", "testcase": false, "constructor": false}, {"identifier": "listSiteLoadBalancers", "parameters": "(long gslbRuleId)", "modifiers": "@Override public", "return": "List<LoadBalancer>", "signature": "List<LoadBalancer> listSiteLoadBalancers(long gslbRuleId)", "full_signature": "@Override public List<LoadBalancer> listSiteLoadBalancers(long gslbRuleId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.listSiteLoadBalancers(long gslbRuleId)", "testcase": false, "constructor": false}, {"identifier": "applyGlobalLoadBalancerRuleConfig", "parameters": "(long gslbRuleId, boolean revoke)", "modifiers": "private", "return": "boolean", "signature": "boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "full_signature": "private boolean applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.applyGlobalLoadBalancerRuleConfig(long gslbRuleId, boolean revoke)", "testcase": false, "constructor": false}, {"identifier": "revokeAllGslbRulesForAccount", "parameters": "(com.cloud.user.Account caller, long accountId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "full_signature": "@Override public boolean revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.revokeAllGslbRulesForAccount(com.cloud.user.Account caller, long accountId)", "testcase": false, "constructor": false}, {"identifier": "checkGslbServiceEnabledInZone", "parameters": "(long zoneId, long physicalNetworkId)", "modifiers": "private", "return": "boolean", "signature": "boolean checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "full_signature": "private boolean checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.checkGslbServiceEnabledInZone(long zoneId, long physicalNetworkId)", "testcase": false, "constructor": false}, {"identifier": "lookupGslbServiceProvider", "parameters": "()", "modifiers": "protected", "return": "GslbServiceProvider", "signature": "GslbServiceProvider lookupGslbServiceProvider()", "full_signature": "protected GslbServiceProvider lookupGslbServiceProvider()", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.lookupGslbServiceProvider()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(long gslbRuleId)", "modifiers": "@Override public", "return": "GlobalLoadBalancerRule", "signature": "GlobalLoadBalancerRule findById(long gslbRuleId)", "full_signature": "@Override public GlobalLoadBalancerRule findById(long gslbRuleId)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.findById(long gslbRuleId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/cloudstack/region/gslb/GlobalLoadBalancingRulesServiceImpl.java"}, "focal_method": {"identifier": "assignToGlobalLoadBalancerRule", "parameters": "(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public", "return": "boolean", "body": "@Override\n    @DB\n    @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE,\n                 eventDescription = \"Assigning a load balancer rule to global load balancer rule\",\n                 async = true)\n    public boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd) {\n\n        CallContext ctx = CallContext.current();\n        Account caller = ctx.getCallingAccount();\n\n        final long gslbRuleId = assignToGslbCmd.getGlobalLoadBalancerRuleId();\n        final GlobalLoadBalancerRuleVO gslbRule = _gslbRuleDao.findById(gslbRuleId);\n        if (gslbRule == null) {\n            throw new InvalidParameterValueException(\"Invalid global load balancer rule id: \" + gslbRuleId);\n        }\n\n        _accountMgr.checkAccess(caller, SecurityChecker.AccessType.OperateEntry, true, gslbRule);\n\n        if (gslbRule.getState() == GlobalLoadBalancerRule.State.Revoke) {\n            throw new InvalidParameterValueException(\"global load balancer rule id: \" + gslbRule.getUuid() + \" is in revoked state\");\n        }\n\n        final List<Long> newLbRuleIds = assignToGslbCmd.getLoadBalancerRulesIds();\n        if (newLbRuleIds == null || newLbRuleIds.isEmpty()) {\n            throw new InvalidParameterValueException(\"empty list of load balancer rule Ids specified to be assigned\" + \" global load balancer rule\");\n        }\n\n        List<Long> oldLbRuleIds = new ArrayList<Long>();\n        List<Long> oldZones = new ArrayList<Long>();\n        List<Long> newZones = new ArrayList<Long>(oldZones);\n        List<Pair<Long, Long>> physcialNetworks = new ArrayList<Pair<Long, Long>>();\n\n        // get the list of load balancer rules id's that are assigned currently to GSLB rule and corresponding zone id's\n        List<GlobalLoadBalancerLbRuleMapVO> gslbLbMapVos = _gslbLbMapDao.listByGslbRuleId(gslbRuleId);\n        if (gslbLbMapVos != null) {\n            for (GlobalLoadBalancerLbRuleMapVO gslbLbMapVo : gslbLbMapVos) {\n                LoadBalancerVO loadBalancer = _lbDao.findById(gslbLbMapVo.getLoadBalancerId());\n                Network network = _networkDao.findById(loadBalancer.getNetworkId());\n                oldZones.add(network.getDataCenterId());\n                oldLbRuleIds.add(gslbLbMapVo.getLoadBalancerId());\n            }\n        }\n\n        /* check each of the load balancer rule id passed in the 'AssignToGlobalLoadBalancerRuleCmd' command is\n         *     valid ID\n         *     caller has access to the rule\n         *     check rule is not revoked\n         *     no two rules are in same zone\n         *     rule is not already assigned to gslb rule\n         */\n        for (Long lbRuleId : newLbRuleIds) {\n\n            LoadBalancerVO loadBalancer = _lbDao.findById(lbRuleId);\n            if (loadBalancer == null) {\n                throw new InvalidParameterValueException(\"Specified load balancer rule ID does not exist.\");\n            }\n\n            _accountMgr.checkAccess(caller, null, true, loadBalancer);\n\n            if (gslbRule.getAccountId() != loadBalancer.getAccountId()) {\n                throw new InvalidParameterValueException(\"GSLB rule and load balancer rule does not belong to same account\");\n            }\n\n            if (loadBalancer.getState() == LoadBalancer.State.Revoke) {\n                throw new InvalidParameterValueException(\"Load balancer ID \" + loadBalancer.getUuid() + \" is in revoke state\");\n            }\n\n            if (oldLbRuleIds != null && oldLbRuleIds.contains(loadBalancer.getId())) {\n                throw new InvalidParameterValueException(\"Load balancer ID \" + loadBalancer.getUuid() + \" is already assigned\");\n            }\n\n            Network network = _networkDao.findById(loadBalancer.getNetworkId());\n\n            if (oldZones != null && oldZones.contains(network.getDataCenterId()) || newZones != null && newZones.contains(network.getDataCenterId())) {\n                throw new InvalidParameterValueException(\"Load balancer rule specified should be in unique zone\");\n            }\n\n            newZones.add(network.getDataCenterId());\n            physcialNetworks.add(new Pair<Long, Long>(network.getDataCenterId(), network.getPhysicalNetworkId()));\n        }\n\n        // for each of the physical network check if GSLB service provider configured\n        for (Pair<Long, Long> physicalNetwork : physcialNetworks) {\n            if (!checkGslbServiceEnabledInZone(physicalNetwork.first(), physicalNetwork.second())) {\n                throw new InvalidParameterValueException(\"GSLB service is not enabled in the Zone:\" + physicalNetwork.first() + \" and physical network \" +\n                    physicalNetwork.second());\n            }\n        }\n\n        final Map<Long, Long> lbRuleWeightMap = assignToGslbCmd.getLoadBalancerRuleWeightMap();\n\n        Transaction.execute(new TransactionCallbackNoReturn() {\n            @Override\n            public void doInTransactionWithoutResult(TransactionStatus status) {\n                // persist the mapping for the new Lb rule that needs to assigned to a gslb rule\n                for (Long lbRuleId : newLbRuleIds) {\n                    GlobalLoadBalancerLbRuleMapVO newGslbLbMap = new GlobalLoadBalancerLbRuleMapVO();\n                    newGslbLbMap.setGslbLoadBalancerId(gslbRuleId);\n                    newGslbLbMap.setLoadBalancerId(lbRuleId);\n                    if (lbRuleWeightMap != null && lbRuleWeightMap.get(lbRuleId) != null) {\n                        newGslbLbMap.setWeight(lbRuleWeightMap.get(lbRuleId));\n                    }\n                    _gslbLbMapDao.persist(newGslbLbMap);\n                }\n\n                // mark the gslb rule state as add\n                if (gslbRule.getState() == GlobalLoadBalancerRule.State.Staged || gslbRule.getState() == GlobalLoadBalancerRule.State.Active) {\n                    gslbRule.setState(GlobalLoadBalancerRule.State.Add);\n                    _gslbRuleDao.update(gslbRule.getId(), gslbRule);\n                }\n            }\n        });\n\n        boolean success = false;\n        try {\n            s_logger.debug(\"Configuring gslb rule configuration on the gslb service providers in the participating zones\");\n\n            // apply the gslb rule on to the back end gslb service providers on zones participating in gslb\n            if (!applyGlobalLoadBalancerRuleConfig(gslbRuleId, false)) {\n                s_logger.warn(\"Failed to add load balancer rules \" + newLbRuleIds + \" to global load balancer rule id \" + gslbRuleId);\n                CloudRuntimeException ex = new CloudRuntimeException(\"Failed to add load balancer rules to GSLB rule \");\n                throw ex;\n            }\n\n            // on success set state to Active\n            gslbRule.setState(GlobalLoadBalancerRule.State.Active);\n            _gslbRuleDao.update(gslbRule.getId(), gslbRule);\n\n            success = true;\n\n        } catch (ResourceUnavailableException e) {\n            throw new CloudRuntimeException(\"Failed to apply new GSLB configuration while assigning new LB rules to GSLB rule.\");\n        }\n\n        return success;\n    }", "signature": "boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_ASSIGN_TO_GLOBAL_LOAD_BALANCER_RULE, eventDescription = \"Assigning a load balancer rule to global load balancer rule\", async = true) public boolean assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "class_method_signature": "GlobalLoadBalancingRulesServiceImpl.assignToGlobalLoadBalancerRule(AssignToGlobalLoadBalancerRuleCmd assignToGslbCmd)", "testcase": false, "constructor": false, "invocations": ["current", "getCallingAccount", "getGlobalLoadBalancerRuleId", "findById", "checkAccess", "getState", "getUuid", "getLoadBalancerRulesIds", "isEmpty", "listByGslbRuleId", "findById", "getLoadBalancerId", "findById", "getNetworkId", "add", "getDataCenterId", "add", "getLoadBalancerId", "findById", "checkAccess", "getAccountId", "getAccountId", "getState", "getUuid", "contains", "getId", "getUuid", "findById", "getNetworkId", "contains", "getDataCenterId", "contains", "getDataCenterId", "add", "getDataCenterId", "add", "getDataCenterId", "getPhysicalNetworkId", "checkGslbServiceEnabledInZone", "first", "second", "first", "second", "getLoadBalancerRuleWeightMap", "execute", "setGslbLoadBalancerId", "setLoadBalancerId", "get", "setWeight", "get", "persist", "getState", "getState", "setState", "update", "getId", "debug", "applyGlobalLoadBalancerRuleConfig", "warn", "setState", "update", "getId"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}