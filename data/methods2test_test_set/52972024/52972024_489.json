{"test_class": {"identifier": "HttpResponseSenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IChannelHandler ctx;", "modifier": "private", "type": "IChannelHandler", "declarator": "ctx", "var_name": "ctx"}, {"original_string": "private ICookiesSetter cookiesExtractor;", "modifier": "private", "type": "ICookiesSetter", "declarator": "cookiesExtractor", "var_name": "cookiesExtractor"}, {"original_string": "private IHeadersExtractor headersExtractor;", "modifier": "private", "type": "IHeadersExtractor", "declarator": "headersExtractor", "var_name": "headersExtractor"}, {"original_string": "private IResponseStatusExtractor responseStatusExtractor;", "modifier": "private", "type": "IResponseStatusExtractor", "declarator": "responseStatusExtractor", "var_name": "responseStatusExtractor"}, {"original_string": "private IResponse response;", "modifier": "private", "type": "IResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private String key = null;", "modifier": "private", "type": "String", "declarator": "key = null", "var_name": "key"}], "file": "CoreFeatures/HttpEndpoint/HttpResponseSender/src/test/java/info/smart_tools/smartactors/http_endpoint/http_response_sender/HttpResponseSenderTest.java"}, "test_case": {"identifier": "writeShouldCallSendMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeShouldCallSendMethod() throws\n            ResponseSendingException, ResolutionException, CookieSettingException, HeadersSetterException {\n        HttpResponseSender sender = new HttpResponseSender(\"123\");\n        IObject environment = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"), \"{\\\"foo\\\":\\\"bar\\\"}\");\n        when(responseStatusExtractor.extract(any(IObject.class))).thenReturn(200);\n        when(response.getContent()).thenReturn(\"{\\\"foo\\\":\\\"bar\\\"}\".getBytes());\n        sender.send(response, environment, ctx);\n        verify(cookiesExtractor, times(1)).set(any(FullHttpResponse.class), any(IObject.class));\n        verify(headersExtractor, times(1)).set(any(FullHttpResponse.class), any(IObject.class));\n        verify(ctx, times(1)).send(any(FullHttpResponse.class));\n    }", "signature": "void writeShouldCallSendMethod()", "full_signature": "@Test public void writeShouldCallSendMethod()", "class_method_signature": "HttpResponseSenderTest.writeShouldCallSendMethod()", "testcase": true, "constructor": false, "invocations": ["resolve", "getOrAdd", "thenReturn", "when", "extract", "any", "thenReturn", "when", "getContent", "getBytes", "send", "set", "verify", "times", "any", "any", "set", "verify", "times", "any", "any", "send", "verify", "times", "any"]}, "focal_class": {"identifier": "HttpResponseSender", "superclass": "", "interfaces": "implements IResponseSender", "fields": [{"original_string": "private final ICookiesSetter cookiesSetter;", "modifier": "private final", "type": "ICookiesSetter", "declarator": "cookiesSetter", "var_name": "cookiesSetter"}, {"original_string": "private final IHeadersExtractor headersSetter;", "modifier": "private final", "type": "IHeadersExtractor", "declarator": "headersSetter", "var_name": "headersSetter"}, {"original_string": "private final IResponseStatusExtractor responseStatusSetter;", "modifier": "private final", "type": "IResponseStatusExtractor", "declarator": "responseStatusSetter", "var_name": "responseStatusSetter"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "HttpResponseSender", "parameters": "(final String name)", "modifiers": "public", "return": "", "signature": " HttpResponseSender(final String name)", "full_signature": "public  HttpResponseSender(final String name)", "class_method_signature": "HttpResponseSender.HttpResponseSender(final String name)", "testcase": false, "constructor": true}, {"identifier": "send", "parameters": "(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "modifiers": "@Override public", "return": "void", "signature": "void send(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "full_signature": "@Override public void send(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "class_method_signature": "HttpResponseSender.send(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "testcase": false, "constructor": false}, {"identifier": "getResponseStatus", "parameters": "(final IObject environment)", "modifiers": "private", "return": "HttpResponseStatus", "signature": "HttpResponseStatus getResponseStatus(final IObject environment)", "full_signature": "private HttpResponseStatus getResponseStatus(final IObject environment)", "class_method_signature": "HttpResponseSender.getResponseStatus(final IObject environment)", "testcase": false, "constructor": false}], "file": "CoreFeatures/HttpEndpoint/HttpResponseSender/src/main/java/info/smart_tools/smartactors/http_endpoint/http_response_sender/HttpResponseSender.java"}, "focal_method": {"identifier": "send", "parameters": "(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void send(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx) throws ResponseSendingException {\n        FullHttpResponse response = new DefaultFullHttpResponse(\n                HttpVersion.HTTP_1_1, getResponseStatus(environment),\n                Unpooled.wrappedBuffer(responseObject.getContent()));\n        try {\n            headersSetter.set(response, environment);\n        } catch (HeadersSetterException e) {\n            throw new ResponseSendingException(\"Failed to set headers to response\", e);\n        }\n        try {\n            cookiesSetter.set(response, environment);\n        } catch (CookieSettingException e) {\n            throw new ResponseSendingException(\"Failed to set cookies to response\", e);\n        }\n        ctx.send(response);\n    }", "signature": "void send(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "full_signature": "@Override public void send(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "class_method_signature": "HttpResponseSender.send(final IResponse responseObject, final IObject environment,\n                     final IChannelHandler ctx)", "testcase": false, "constructor": false, "invocations": ["getResponseStatus", "wrappedBuffer", "getContent", "set", "set", "send"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}