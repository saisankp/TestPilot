{"test_class": {"identifier": "RecursiveLinearizingComposerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger( PolynomialFunctionsTests.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( PolynomialFunctionsTests.class )", "var_name": "logger"}], "file": "kryptnostic-core/src/test/java/com/kryptnostic/multivariate/composition/RecursiveLinearizingComposerTest.java"}, "test_case": {"identifier": "testRecurisveLinearizingComposer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test \n    public void testRecurisveLinearizingComposer() {\n        logger.debug(\"Starting recursive linearing composer tests.\");\n        BasePolynomialFunction f = (BasePolynomialFunction)SimplePolynomialFunctions.denseRandomMultivariateQuadratic( 128 , 128);\n        BasePolynomialFunction inner = (BasePolynomialFunction) EnhancedBitMatrix.randomMatrix( 128 , 256 ) .multiply(  SimplePolynomialFunctions.identity( 256 ) );\n        \n        \n        RecursiveLinearizingComposer composer = new RecursiveLinearizingComposer( f );\n        Stopwatch watch = Stopwatch.createStarted();\n        SimplePolynomialFunction composed = composer.compose( inner );\n        logger.info( \"Compose time: {} ms\" , watch.elapsed( TimeUnit.MILLISECONDS ) );\n        \n        BitVector input =  BitVectors.randomVector( inner.getInputLength() );\n        BitVector expected = f.apply( inner.apply( input ) );\n        BitVector actual = composed.apply( input );\n        \n        Assert.assertEquals( expected , actual );\n    }", "signature": "void testRecurisveLinearizingComposer()", "full_signature": "@Test public void testRecurisveLinearizingComposer()", "class_method_signature": "RecursiveLinearizingComposerTest.testRecurisveLinearizingComposer()", "testcase": true, "constructor": false, "invocations": ["debug", "denseRandomMultivariateQuadratic", "multiply", "randomMatrix", "identity", "createStarted", "compose", "info", "elapsed", "randomVector", "getInputLength", "apply", "apply", "apply", "assertEquals"]}, "focal_class": {"identifier": "RecursiveLinearizingComposer", "superclass": "extends RecursiveLinearizingComposerTree", "interfaces": "", "fields": [{"original_string": "private BitVector constantContribution;", "modifier": "private", "type": "BitVector", "declarator": "constantContribution", "var_name": "constantContribution"}], "methods": [{"identifier": "RecursiveLinearizingComposer", "parameters": "(SimplePolynomialFunction outer )", "modifiers": "public", "return": "", "signature": " RecursiveLinearizingComposer(SimplePolynomialFunction outer )", "full_signature": "public  RecursiveLinearizingComposer(SimplePolynomialFunction outer )", "class_method_signature": "RecursiveLinearizingComposer.RecursiveLinearizingComposer(SimplePolynomialFunction outer )", "testcase": false, "constructor": true}, {"identifier": "bucket", "parameters": "(Monomial m, BitVector contribution)", "modifiers": "@Override public", "return": "void", "signature": "void bucket(Monomial m, BitVector contribution)", "full_signature": "@Override public void bucket(Monomial m, BitVector contribution)", "class_method_signature": "RecursiveLinearizingComposer.bucket(Monomial m, BitVector contribution)", "testcase": false, "constructor": false}, {"identifier": "compose", "parameters": "( SimplePolynomialFunction inner )", "modifiers": "public", "return": "SimplePolynomialFunction", "signature": "SimplePolynomialFunction compose( SimplePolynomialFunction inner )", "full_signature": "public SimplePolynomialFunction compose( SimplePolynomialFunction inner )", "class_method_signature": "RecursiveLinearizingComposer.compose( SimplePolynomialFunction inner )", "testcase": false, "constructor": false}, {"identifier": "getConstantFunction", "parameters": "( int innerInputLength)", "modifiers": "public", "return": "SimplePolynomialFunction", "signature": "SimplePolynomialFunction getConstantFunction( int innerInputLength)", "full_signature": "public SimplePolynomialFunction getConstantFunction( int innerInputLength)", "class_method_signature": "RecursiveLinearizingComposer.getConstantFunction( int innerInputLength)", "testcase": false, "constructor": false}, {"identifier": "indices", "parameters": "( Monomial[] innerMonomials )", "modifiers": "private static", "return": "ConcurrentMap<Monomial,Integer>", "signature": "ConcurrentMap<Monomial,Integer> indices( Monomial[] innerMonomials )", "full_signature": "private static ConcurrentMap<Monomial,Integer> indices( Monomial[] innerMonomials )", "class_method_signature": "RecursiveLinearizingComposer.indices( Monomial[] innerMonomials )", "testcase": false, "constructor": false}, {"identifier": "rowContributions", "parameters": "( SimplePolynomialFunction inner )", "modifiers": "private static", "return": "List<BitVector>", "signature": "List<BitVector> rowContributions( SimplePolynomialFunction inner )", "full_signature": "private static List<BitVector> rowContributions( SimplePolynomialFunction inner )", "class_method_signature": "RecursiveLinearizingComposer.rowContributions( SimplePolynomialFunction inner )", "testcase": false, "constructor": false}, {"identifier": "initializeTreeFromOuter", "parameters": "( SimplePolynomialFunction outer )", "modifiers": "private static", "return": "RecursiveLinearizingComposerTree[]", "signature": "RecursiveLinearizingComposerTree[] initializeTreeFromOuter( SimplePolynomialFunction outer )", "full_signature": "private static RecursiveLinearizingComposerTree[] initializeTreeFromOuter( SimplePolynomialFunction outer )", "class_method_signature": "RecursiveLinearizingComposer.initializeTreeFromOuter( SimplePolynomialFunction outer )", "testcase": false, "constructor": false}], "file": "kryptnostic-core/src/main/java/com/kryptnostic/multivariate/composition/RecursiveLinearizingComposer.java"}, "focal_method": {"identifier": "compose", "parameters": "( SimplePolynomialFunction inner )", "modifiers": "public", "return": "SimplePolynomialFunction", "body": "public SimplePolynomialFunction compose( SimplePolynomialFunction inner ) {\n        Preconditions.checkArgument(outerInputLength == inner.getOutputLength() , \"Outer input length must equal inner output length\" );\n        List<SimplePolynomialFunction> pieces = evaluate( null , Arrays.asList( inner.getMonomials() ), Lists.newArrayList( inner.getMonomials() ), rowContributions( inner ) , indices( inner.getMonomials() ) );\n        SimplePolynomialFunction result = null;\n        for( SimplePolynomialFunction piece : pieces ) {\n            if( result == null ) { \n                result = piece;\n            } else {\n                result = piece.xor( result );\n            }\n        }\n        if( constantContribution!=null ) {\n            result = result.xor( getConstantFunction( inner.getInputLength() ) );\n        }\n        return result;\n    }", "signature": "SimplePolynomialFunction compose( SimplePolynomialFunction inner )", "full_signature": "public SimplePolynomialFunction compose( SimplePolynomialFunction inner )", "class_method_signature": "RecursiveLinearizingComposer.compose( SimplePolynomialFunction inner )", "testcase": false, "constructor": false, "invocations": ["checkArgument", "getOutputLength", "evaluate", "asList", "getMonomials", "newArrayList", "getMonomials", "rowContributions", "indices", "getMonomials", "xor", "xor", "getConstantFunction", "getInputLength"]}, "repository": {"repo_id": 16261234, "url": "https://github.com/kryptnostic/fhe-core", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 71, "size": 1254, "license": "licensed"}}