{"test_class": {"identifier": "ValueConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-core-model/src/test/java/step/core/dynamicbeans/ValueConverterTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tObject value;\n\t\t\n\t\t// string to long\n\t\tvalue = ValueConverter.convert(\"1\", Long.class);\n\t\tassertEquals(Long.class, value.getClass());\n\t\tassertEquals(1, (long) value);\n\t\t\n\t\t// long to long\n\t\tvalue = ValueConverter.convert(1l, Long.class);\n\t\tassertEquals(Long.class, value.getClass());\n\t\tassertEquals(1, (long) value);\n\t\t\n\t\t// int to long\n\t\tvalue = ValueConverter.convert(1, Long.class);\n\t\tassertEquals(Long.class, value.getClass());\n\t\tassertEquals(1, (long) value);\n\t\t\n\t\t// double to long\n\t\tvalue = ValueConverter.convert(1.1, Long.class);\n\t\tassertEquals(Long.class, value.getClass());\n\t\tassertEquals(1, (long) value);\n\t\t\n\t\t// string to int\n\t\tvalue = ValueConverter.convert(\"1\", Integer.class);\n\t\tassertEquals(Integer.class, value.getClass());\n\t\tassertEquals(1, (int) value);\n\t\t\n\t\t// int to int\n\t\tvalue = ValueConverter.convert(1, Integer.class);\n\t\tassertEquals(Integer.class, value.getClass());\n\t\tassertEquals(1, (int) value);\n\t\t\n\t\t// string to int\n\t\tvalue = ValueConverter.convert(\"1\", String.class);\n\t\tassertEquals(String.class, value.getClass());\n\t\tassertEquals(\"1\", value);\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ValueConverterTest.test()", "testcase": true, "constructor": false, "invocations": ["convert", "assertEquals", "getClass", "assertEquals", "convert", "assertEquals", "getClass", "assertEquals", "convert", "assertEquals", "getClass", "assertEquals", "convert", "assertEquals", "getClass", "assertEquals", "convert", "assertEquals", "getClass", "assertEquals", "convert", "assertEquals", "getClass", "assertEquals", "convert", "assertEquals", "getClass", "assertEquals"]}, "focal_class": {"identifier": "ValueConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(Object value, Class<T> classTo)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convert(Object value, Class<T> classTo)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(Object value, Class<T> classTo)", "class_method_signature": "ValueConverter.convert(Object value, Class<T> classTo)", "testcase": false, "constructor": false}, {"identifier": "unsupportedConversionException", "parameters": "(Class<?> class_, Object value)", "modifiers": "protected static", "return": "RuntimeException", "signature": "RuntimeException unsupportedConversionException(Class<?> class_, Object value)", "full_signature": "protected static RuntimeException unsupportedConversionException(Class<?> class_, Object value)", "class_method_signature": "ValueConverter.unsupportedConversionException(Class<?> class_, Object value)", "testcase": false, "constructor": false}], "file": "step-core-model/src/main/java/step/core/dynamicbeans/ValueConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object value, Class<T> classTo)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic static <T> T convert(Object value, Class<T> classTo) {\n\t\tif(value != null) {\n\t\t\tif(String.class.isAssignableFrom(classTo)) {\n\t\t\t\treturn (T) value.toString();\n\t\t\t} else if(Long.class.isAssignableFrom(classTo)) {\n\t\t\t\tif(value instanceof Number) {\n\t\t\t\t\treturn (T)new Long(((Number)value).longValue());\n\t\t\t\t} else if(value instanceof String){\n\t\t\t\t\treturn (T)new Long(Long.parseLong((String)value));\n\t\t\t\t} else {\n\t\t\t\t\tthrow unsupportedConversionException(classTo, value);\n\t\t\t\t}\n\t\t\t} else if(Integer.class.isAssignableFrom(classTo)) {\n\t\t\t\tif(value instanceof Number) {\n\t\t\t\t\treturn (T)new Integer(((Number)value).intValue());\n\t\t\t\t} else if(value instanceof String){\n\t\t\t\t\treturn (T)new Integer(Integer.parseInt((String)value));\n\t\t\t\t} else {\n\t\t\t\t\tthrow unsupportedConversionException(classTo, value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow unsupportedConversionException(classTo, value);\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "signature": "T convert(Object value, Class<T> classTo)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(Object value, Class<T> classTo)", "class_method_signature": "ValueConverter.convert(Object value, Class<T> classTo)", "testcase": false, "constructor": false, "invocations": ["isAssignableFrom", "toString", "isAssignableFrom", "longValue", "parseLong", "unsupportedConversionException", "isAssignableFrom", "intValue", "parseInt", "unsupportedConversionException", "unsupportedConversionException"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}