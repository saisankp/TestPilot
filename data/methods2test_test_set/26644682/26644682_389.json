{"test_class": {"identifier": "CSVSchemaParserTest", "superclass": "extends AbstractSchemaTestUtils", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CSVSchemaParser csvSchemaParser;", "modifier": "@Autowired\n    private", "type": "CSVSchemaParser", "declarator": "csvSchemaParser", "var_name": "csvSchemaParser"}, {"original_string": "@Autowired\n    CSVFormatFamily csvFormatFamily;", "modifier": "@Autowired", "type": "CSVFormatFamily", "declarator": "csvFormatFamily", "var_name": "csvFormatFamily"}, {"original_string": "@Autowired\n    CSVFormatUtils csvFormatUtils;", "modifier": "@Autowired", "type": "CSVFormatUtils", "declarator": "csvFormatUtils", "var_name": "csvFormatUtils"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/csv/CSVSchemaParserTest.java"}, "test_case": {"identifier": "TDP_1060", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void TDP_1060() throws IOException {\n        try (InputStream inputStream = this.getClass().getResourceAsStream(\"tdp-1060.csv\")) {\n            // We do know the format and therefore we go directly to the CSV schema guessing\n            SchemaParser.Request request = getRequest(inputStream, \"#6\");\n            request.getMetadata().setEncoding(\"UTF-8\");\n\n            csvSchemaParser.parse(request);\n            final Map<String, String> parameters = request.getMetadata().getContent().getParameters();\n            char actual = parameters.get(CSVFormatFamily.SEPARATOR_PARAMETER).charAt(0);\n            assertEquals(',', actual);\n        }\n    }", "signature": "void TDP_1060()", "full_signature": "@Test public void TDP_1060()", "class_method_signature": "CSVSchemaParserTest.TDP_1060()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "getRequest", "setEncoding", "getMetadata", "parse", "getParameters", "getContent", "getMetadata", "charAt", "get", "assertEquals"]}, "focal_class": {"identifier": "CSVSchemaParser", "superclass": "", "interfaces": "implements SchemaParser", "fields": [{"original_string": "public static final List<Character> DEFAULT_VALID_SEPARATORS =\n            Collections.unmodifiableList(Arrays.asList(' ', '\\t', ',', ';', '|'));", "modifier": "public static final", "type": "List<Character>", "declarator": "DEFAULT_VALID_SEPARATORS =\n            Collections.unmodifiableList(Arrays.asList(' ', '\\t', ',', ';', '|'))", "var_name": "DEFAULT_VALID_SEPARATORS"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CSVSchemaParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CSVSchemaParser.class)", "var_name": "LOGGER"}, {"original_string": "private static final String META_KEY = \"key\";", "modifier": "private static final", "type": "String", "declarator": "META_KEY = \"key\"", "var_name": "META_KEY"}, {"original_string": "private static final long SIZE_LIMIT = 64L * 1024L;", "modifier": "private static final", "type": "long", "declarator": "SIZE_LIMIT = 64L * 1024L", "var_name": "SIZE_LIMIT"}, {"original_string": "private static final int LINE_LIMIT = 100;", "modifier": "private static final", "type": "int", "declarator": "LINE_LIMIT = 100", "var_name": "LINE_LIMIT"}, {"original_string": "private static final int SMALL_SAMPLE_LIMIT = 10;", "modifier": "private static final", "type": "int", "declarator": "SMALL_SAMPLE_LIMIT = 10", "var_name": "SMALL_SAMPLE_LIMIT"}, {"original_string": "@Autowired\n    protected CSVFormatUtils csvFormatUtils;", "modifier": "@Autowired\n    protected", "type": "CSVFormatUtils", "declarator": "csvFormatUtils", "var_name": "csvFormatUtils"}], "methods": [{"identifier": "accept", "parameters": "(DataSetMetadata metadata)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(DataSetMetadata metadata)", "full_signature": "@Override public boolean accept(DataSetMetadata metadata)", "class_method_signature": "CSVSchemaParser.accept(DataSetMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Schema", "signature": "Schema parse(Request request)", "full_signature": "@Override public Schema parse(Request request)", "class_method_signature": "CSVSchemaParser.parse(Request request)", "testcase": false, "constructor": false}, {"identifier": "guess", "parameters": "(SchemaParser.Request request, String encoding)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> guess(SchemaParser.Request request, String encoding)", "full_signature": "public Map<String, String> guess(SchemaParser.Request request, String encoding)", "class_method_signature": "CSVSchemaParser.guess(SchemaParser.Request request, String encoding)", "testcase": false, "constructor": false}, {"identifier": "guessSeparator", "parameters": "(InputStream is, String encoding, Optional<Character> forcedSeparator)", "modifiers": "private", "return": "Separator", "signature": "Separator guessSeparator(InputStream is, String encoding, Optional<Character> forcedSeparator)", "full_signature": "private Separator guessSeparator(InputStream is, String encoding, Optional<Character> forcedSeparator)", "class_method_signature": "CSVSchemaParser.guessSeparator(InputStream is, String encoding, Optional<Character> forcedSeparator)", "testcase": false, "constructor": false}, {"identifier": "processLine", "parameters": "(String line, Map<Character, Separator> separatorMap, List<Character> validSeparators,\n            int lineCount)", "modifiers": "private", "return": "void", "signature": "void processLine(String line, Map<Character, Separator> separatorMap, List<Character> validSeparators,\n            int lineCount)", "full_signature": "private void processLine(String line, Map<Character, Separator> separatorMap, List<Character> validSeparators,\n            int lineCount)", "class_method_signature": "CSVSchemaParser.processLine(String line, Map<Character, Separator> separatorMap, List<Character> validSeparators,\n            int lineCount)", "testcase": false, "constructor": false}, {"identifier": "processCharAsSeparatorCandidate", "parameters": "(char candidate, Map<Character, Separator> separatorMap,\n            List<Character> validSeparators, int lineNumber)", "modifiers": "protected", "return": "void", "signature": "void processCharAsSeparatorCandidate(char candidate, Map<Character, Separator> separatorMap,\n            List<Character> validSeparators, int lineNumber)", "full_signature": "protected void processCharAsSeparatorCandidate(char candidate, Map<Character, Separator> separatorMap,\n            List<Character> validSeparators, int lineNumber)", "class_method_signature": "CSVSchemaParser.processCharAsSeparatorCandidate(char candidate, Map<Character, Separator> separatorMap,\n            List<Character> validSeparators, int lineNumber)", "testcase": false, "constructor": false}, {"identifier": "updateSeparatorMap", "parameters": "(char candidate, Map<Character, Separator> separatorMap, int lineNumber)", "modifiers": "private", "return": "void", "signature": "void updateSeparatorMap(char candidate, Map<Character, Separator> separatorMap, int lineNumber)", "full_signature": "private void updateSeparatorMap(char candidate, Map<Character, Separator> separatorMap, int lineNumber)", "class_method_signature": "CSVSchemaParser.updateSeparatorMap(char candidate, Map<Character, Separator> separatorMap, int lineNumber)", "testcase": false, "constructor": false}, {"identifier": "chooseSeparator", "parameters": "(List<Separator> separators, int lineCount, List<String> sampleLines,\n            Optional<Character> forcedSeparator)", "modifiers": "private", "return": "Separator", "signature": "Separator chooseSeparator(List<Separator> separators, int lineCount, List<String> sampleLines,\n            Optional<Character> forcedSeparator)", "full_signature": "private Separator chooseSeparator(List<Separator> separators, int lineCount, List<String> sampleLines,\n            Optional<Character> forcedSeparator)", "class_method_signature": "CSVSchemaParser.chooseSeparator(List<Separator> separators, int lineCount, List<String> sampleLines,\n            Optional<Character> forcedSeparator)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/csv/CSVSchemaParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Request request)", "modifiers": "@Override public", "return": "Schema", "body": "@Override\n    public Schema parse(Request request) {\n        List<Schema.SheetContent> sheetContents = new ArrayList<>();\n        sheetContents.add(new Schema.SheetContent(META_KEY, new ArrayList<>()));\n        try {\n            final DataSetMetadata metadata = request.getMetadata();\n            final Map<String, String> parameters = guess(request, metadata.getEncoding());\n            metadata.getContent().setParameters(parameters);\n            metadata.getContent().setNbLinesInHeader(Integer.parseInt(parameters.get(HEADER_NB_LINES_PARAMETER)));\n            List<String> header = csvFormatUtils.retrieveHeader(parameters);\n            if (header == null || header.isEmpty()) {\n                throw new TDPException(DataSetErrorCodes.UNABLE_TO_READ_DATASET_CONTENT);\n            }\n            LOGGER.debug(\"Columns found: {}\", header);\n            // By default, consider all columns as Strings (to be refined by deeper analysis).\n            LOGGER.debug(\"Setting default type for columns...\");\n            int i = 0;\n            for (String column : header) {\n                sheetContents\n                        .stream()\n                        .filter(sheetContent -> META_KEY.equals(sheetContent.getName()))\n                        .findFirst() //\n                        .get()\n                        .getColumnMetadatas() //\n                        .add(column().id(i++).name(column).type(Type.STRING).build());\n            }\n        } catch (Exception e) {\n            throw new TDPException(CommonErrorCodes.UNABLE_TO_READ_CONTENT, e);\n        }\n        return Schema.Builder\n                .parserResult() //\n                .sheetContents(sheetContents) //\n                .draft(false)\n                .build();\n    }", "signature": "Schema parse(Request request)", "full_signature": "@Override public Schema parse(Request request)", "class_method_signature": "CSVSchemaParser.parse(Request request)", "testcase": false, "constructor": false, "invocations": ["add", "getMetadata", "guess", "getEncoding", "setParameters", "getContent", "setNbLinesInHeader", "getContent", "parseInt", "get", "retrieveHeader", "isEmpty", "debug", "debug", "add", "getColumnMetadatas", "get", "findFirst", "filter", "stream", "equals", "getName", "build", "type", "name", "id", "column", "build", "draft", "sheetContents", "parserResult"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}