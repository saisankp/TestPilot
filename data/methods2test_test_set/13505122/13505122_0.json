{"test_class": {"identifier": "ThreadsStreamTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Tested private ThreadsStream stream;", "modifier": "@Tested private", "type": "ThreadsStream", "declarator": "stream", "var_name": "stream"}, {"original_string": "@Mocked private ThreadsProcessingItem sourcePi, destPi;", "modifier": "@Mocked private", "type": "ThreadsProcessingItem", "declarator": "sourcePi", "var_name": "sourcePi"}, {"original_string": "@Mocked private ContentEvent event;", "modifier": "@Mocked private", "type": "ContentEvent", "declarator": "event", "var_name": "event"}, {"original_string": "@Mocked private StreamDestination destination;", "modifier": "@Mocked private", "type": "StreamDestination", "declarator": "destination", "var_name": "destination"}, {"original_string": "private final String eventKey = \"eventkey\";", "modifier": "private final", "type": "String", "declarator": "eventKey = \"eventkey\"", "var_name": "eventKey"}, {"original_string": "private final int parallelism;", "modifier": "private final", "type": "int", "declarator": "parallelism", "var_name": "parallelism"}, {"original_string": "private final PartitioningScheme scheme;", "modifier": "private final", "type": "PartitioningScheme", "declarator": "scheme", "var_name": "scheme"}], "file": "samoa-threads/src/test/java/com/yahoo/labs/samoa/topology/impl/ThreadsStreamTest.java"}, "test_case": {"identifier": "testAddDestination", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddDestination() {\n\t\tboolean found = false;\n\t\tfor (StreamDestination sd:stream.getDestinations()) {\n\t\t\tif (sd == destination) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tassertTrue(\"Destination object was not added in stream's destinations set.\",found);\n\t}", "signature": "void testAddDestination()", "full_signature": "@Test public void testAddDestination()", "class_method_signature": "ThreadsStreamTest.testAddDestination()", "testcase": true, "constructor": false, "invocations": ["getDestinations", "assertTrue"]}, "focal_class": {"identifier": "ThreadsStream", "superclass": "extends AbstractStream", "interfaces": "", "fields": [{"original_string": "private List<StreamDestination> destinations;", "modifier": "private", "type": "List<StreamDestination>", "declarator": "destinations", "var_name": "destinations"}, {"original_string": "private int counter = 0;", "modifier": "private", "type": "int", "declarator": "counter = 0", "var_name": "counter"}, {"original_string": "private int maxCounter = 1;", "modifier": "private", "type": "int", "declarator": "maxCounter = 1", "var_name": "maxCounter"}], "methods": [{"identifier": "ThreadsStream", "parameters": "(IProcessingItem sourcePi)", "modifiers": "public", "return": "", "signature": " ThreadsStream(IProcessingItem sourcePi)", "full_signature": "public  ThreadsStream(IProcessingItem sourcePi)", "class_method_signature": "ThreadsStream.ThreadsStream(IProcessingItem sourcePi)", "testcase": false, "constructor": true}, {"identifier": "addDestination", "parameters": "(StreamDestination destination)", "modifiers": "public", "return": "void", "signature": "void addDestination(StreamDestination destination)", "full_signature": "public void addDestination(StreamDestination destination)", "class_method_signature": "ThreadsStream.addDestination(StreamDestination destination)", "testcase": false, "constructor": false}, {"identifier": "getDestinations", "parameters": "()", "modifiers": "public", "return": "List<StreamDestination>", "signature": "List<StreamDestination> getDestinations()", "full_signature": "public List<StreamDestination> getDestinations()", "class_method_signature": "ThreadsStream.getDestinations()", "testcase": false, "constructor": false}, {"identifier": "getNextCounter", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getNextCounter()", "full_signature": "private int getNextCounter()", "class_method_signature": "ThreadsStream.getNextCounter()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(ContentEvent event)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void put(ContentEvent event)", "full_signature": "@Override public synchronized void put(ContentEvent event)", "class_method_signature": "ThreadsStream.put(ContentEvent event)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(ContentEvent event, int counter)", "modifiers": "private", "return": "void", "signature": "void put(ContentEvent event, int counter)", "full_signature": "private void put(ContentEvent event, int counter)", "class_method_signature": "ThreadsStream.put(ContentEvent event, int counter)", "testcase": false, "constructor": false}, {"identifier": "getPIIndexForKey", "parameters": "(String key, int parallelism)", "modifiers": "private static", "return": "int", "signature": "int getPIIndexForKey(String key, int parallelism)", "full_signature": "private static int getPIIndexForKey(String key, int parallelism)", "class_method_signature": "ThreadsStream.getPIIndexForKey(String key, int parallelism)", "testcase": false, "constructor": false}], "file": "samoa-threads/src/main/java/com/yahoo/labs/samoa/topology/impl/ThreadsStream.java"}, "focal_method": {"identifier": "addDestination", "parameters": "(StreamDestination destination)", "modifiers": "public", "return": "void", "body": "public void addDestination(StreamDestination destination) {\n\t\tdestinations.add(destination);\n\t\tmaxCounter *= destination.getParallelism();\n\t}", "signature": "void addDestination(StreamDestination destination)", "full_signature": "public void addDestination(StreamDestination destination)", "class_method_signature": "ThreadsStream.addDestination(StreamDestination destination)", "testcase": false, "constructor": false, "invocations": ["add", "getParallelism"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}