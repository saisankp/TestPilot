{"test_class": {"identifier": "AclDAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject DSLContext jooqContext;", "modifier": "@Inject", "type": "DSLContext", "declarator": "jooqContext", "var_name": "jooqContext"}, {"original_string": "@Inject SecretSeriesDAOFactory secretSeriesDAOFactory;", "modifier": "@Inject", "type": "SecretSeriesDAOFactory", "declarator": "secretSeriesDAOFactory", "var_name": "secretSeriesDAOFactory"}, {"original_string": "@Inject SecretDAOFactory secretDAOFactory;", "modifier": "@Inject", "type": "SecretDAOFactory", "declarator": "secretDAOFactory", "var_name": "secretDAOFactory"}, {"original_string": "@Inject ClientDAOFactory clientDAOFactory;", "modifier": "@Inject", "type": "ClientDAOFactory", "declarator": "clientDAOFactory", "var_name": "clientDAOFactory"}, {"original_string": "@Inject GroupDAOFactory groupDAOFactory;", "modifier": "@Inject", "type": "GroupDAOFactory", "declarator": "groupDAOFactory", "var_name": "groupDAOFactory"}, {"original_string": "@Inject AclDAO.AclDAOFactory aclDAOFactory;", "modifier": "@Inject", "type": "AclDAO.AclDAOFactory", "declarator": "aclDAOFactory", "var_name": "aclDAOFactory"}, {"original_string": "Client client1, client2;", "modifier": "", "type": "Client", "declarator": "client1", "var_name": "client1"}, {"original_string": "Group group1, group2, group3;", "modifier": "", "type": "Group", "declarator": "group1", "var_name": "group1"}, {"original_string": "Secret secret1, secret2;", "modifier": "", "type": "Secret", "declarator": "secret1", "var_name": "secret1"}, {"original_string": "ClientDAO clientDAO;", "modifier": "", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "GroupDAO groupDAO;", "modifier": "", "type": "GroupDAO", "declarator": "groupDAO", "var_name": "groupDAO"}, {"original_string": "SecretSeriesDAO secretSeriesDAO;", "modifier": "", "type": "SecretSeriesDAO", "declarator": "secretSeriesDAO", "var_name": "secretSeriesDAO"}, {"original_string": "AclDAO aclDAO;", "modifier": "", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}], "file": "server/src/test/java/keywhiz/service/daos/AclDAOTest.java"}, "test_case": {"identifier": "getSecretSeriesForWhenUnauthorized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void getSecretSeriesForWhenUnauthorized() throws Exception {\n    assertThat(aclDAO.getSecretSeriesFor(jooqContext.configuration(), client1, secret1.getName()))\n        .isEmpty();\n  }", "signature": "void getSecretSeriesForWhenUnauthorized()", "full_signature": "@Test public void getSecretSeriesForWhenUnauthorized()", "class_method_signature": "AclDAOTest.getSecretSeriesForWhenUnauthorized()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "getSecretSeriesFor", "configuration", "getName"]}, "focal_class": {"identifier": "AclDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AclDAO.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AclDAO.class)", "var_name": "logger"}, {"original_string": "private final DSLContext dslContext;", "modifier": "private final", "type": "DSLContext", "declarator": "dslContext", "var_name": "dslContext"}, {"original_string": "private final ClientDAOFactory clientDAOFactory;", "modifier": "private final", "type": "ClientDAOFactory", "declarator": "clientDAOFactory", "var_name": "clientDAOFactory"}, {"original_string": "private final GroupDAOFactory groupDAOFactory;", "modifier": "private final", "type": "GroupDAOFactory", "declarator": "groupDAOFactory", "var_name": "groupDAOFactory"}, {"original_string": "private final SecretContentDAOFactory secretContentDAOFactory;", "modifier": "private final", "type": "SecretContentDAOFactory", "declarator": "secretContentDAOFactory", "var_name": "secretContentDAOFactory"}, {"original_string": "private final SecretSeriesDAOFactory secretSeriesDAOFactory;", "modifier": "private final", "type": "SecretSeriesDAOFactory", "declarator": "secretSeriesDAOFactory", "var_name": "secretSeriesDAOFactory"}, {"original_string": "private final ClientMapper clientMapper;", "modifier": "private final", "type": "ClientMapper", "declarator": "clientMapper", "var_name": "clientMapper"}, {"original_string": "private final GroupMapper groupMapper;", "modifier": "private final", "type": "GroupMapper", "declarator": "groupMapper", "var_name": "groupMapper"}, {"original_string": "private final SecretSeriesMapper secretSeriesMapper;", "modifier": "private final", "type": "SecretSeriesMapper", "declarator": "secretSeriesMapper", "var_name": "secretSeriesMapper"}, {"original_string": "private final SecretContentMapper secretContentMapper;", "modifier": "private final", "type": "SecretContentMapper", "declarator": "secretContentMapper", "var_name": "secretContentMapper"}, {"original_string": "private final RowHmacGenerator rowHmacGenerator;", "modifier": "private final", "type": "RowHmacGenerator", "declarator": "rowHmacGenerator", "var_name": "rowHmacGenerator"}, {"original_string": "private final KeywhizConfig config;", "modifier": "private final", "type": "KeywhizConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "AclDAO", "parameters": "(DSLContext dslContext, ClientDAOFactory clientDAOFactory, GroupDAOFactory groupDAOFactory,\n                 SecretContentDAOFactory secretContentDAOFactory, SecretSeriesDAOFactory secretSeriesDAOFactory,\n                 ClientMapper clientMapper, GroupMapper groupMapper, SecretSeriesMapper secretSeriesMapper,\n                 SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n                 KeywhizConfig config)", "modifiers": "private", "return": "", "signature": " AclDAO(DSLContext dslContext, ClientDAOFactory clientDAOFactory, GroupDAOFactory groupDAOFactory,\n                 SecretContentDAOFactory secretContentDAOFactory, SecretSeriesDAOFactory secretSeriesDAOFactory,\n                 ClientMapper clientMapper, GroupMapper groupMapper, SecretSeriesMapper secretSeriesMapper,\n                 SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n                 KeywhizConfig config)", "full_signature": "private  AclDAO(DSLContext dslContext, ClientDAOFactory clientDAOFactory, GroupDAOFactory groupDAOFactory,\n                 SecretContentDAOFactory secretContentDAOFactory, SecretSeriesDAOFactory secretSeriesDAOFactory,\n                 ClientMapper clientMapper, GroupMapper groupMapper, SecretSeriesMapper secretSeriesMapper,\n                 SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n                 KeywhizConfig config)", "class_method_signature": "AclDAO.AclDAO(DSLContext dslContext, ClientDAOFactory clientDAOFactory, GroupDAOFactory groupDAOFactory,\n                 SecretContentDAOFactory secretContentDAOFactory, SecretSeriesDAOFactory secretSeriesDAOFactory,\n                 ClientMapper clientMapper, GroupMapper groupMapper, SecretSeriesMapper secretSeriesMapper,\n                 SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n                 KeywhizConfig config)", "testcase": false, "constructor": true}, {"identifier": "findAndAllowAccess", "parameters": "(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "modifiers": "public", "return": "void", "signature": "void findAndAllowAccess(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "full_signature": "public void findAndAllowAccess(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "class_method_signature": "AclDAO.findAndAllowAccess(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "testcase": false, "constructor": false}, {"identifier": "findAndRevokeAccess", "parameters": "(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "modifiers": "public", "return": "void", "signature": "void findAndRevokeAccess(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "full_signature": "public void findAndRevokeAccess(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "class_method_signature": "AclDAO.findAndRevokeAccess(long secretId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "testcase": false, "constructor": false}, {"identifier": "findAndEnrollClient", "parameters": "(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "modifiers": "public", "return": "void", "signature": "void findAndEnrollClient(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "full_signature": "public void findAndEnrollClient(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "class_method_signature": "AclDAO.findAndEnrollClient(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "testcase": false, "constructor": false}, {"identifier": "findAndEvictClient", "parameters": "(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "modifiers": "public", "return": "void", "signature": "void findAndEvictClient(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "full_signature": "public void findAndEvictClient(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "class_method_signature": "AclDAO.findAndEvictClient(long clientId, long groupId, AuditLog auditLog, String user, Map<String, String> extraInfo)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedSecretsFor", "parameters": "(Group group)", "modifiers": "public", "return": "ImmutableSet<SanitizedSecret>", "signature": "ImmutableSet<SanitizedSecret> getSanitizedSecretsFor(Group group)", "full_signature": "public ImmutableSet<SanitizedSecret> getSanitizedSecretsFor(Group group)", "class_method_signature": "AclDAO.getSanitizedSecretsFor(Group group)", "testcase": false, "constructor": false}, {"identifier": "getGroupsFor", "parameters": "(Secret secret)", "modifiers": "public", "return": "Set<Group>", "signature": "Set<Group> getGroupsFor(Secret secret)", "full_signature": "public Set<Group> getGroupsFor(Secret secret)", "class_method_signature": "AclDAO.getGroupsFor(Secret secret)", "testcase": false, "constructor": false}, {"identifier": "getGroupsFor", "parameters": "(Client client)", "modifiers": "public", "return": "Set<Group>", "signature": "Set<Group> getGroupsFor(Client client)", "full_signature": "public Set<Group> getGroupsFor(Client client)", "class_method_signature": "AclDAO.getGroupsFor(Client client)", "testcase": false, "constructor": false}, {"identifier": "getClientsFor", "parameters": "(Group group)", "modifiers": "public", "return": "Set<Client>", "signature": "Set<Client> getClientsFor(Group group)", "full_signature": "public Set<Client> getClientsFor(Group group)", "class_method_signature": "AclDAO.getClientsFor(Group group)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedSecretsFor", "parameters": "(Client client)", "modifiers": "public", "return": "ImmutableSet<SanitizedSecret>", "signature": "ImmutableSet<SanitizedSecret> getSanitizedSecretsFor(Client client)", "full_signature": "public ImmutableSet<SanitizedSecret> getSanitizedSecretsFor(Client client)", "class_method_signature": "AclDAO.getSanitizedSecretsFor(Client client)", "testcase": false, "constructor": false}, {"identifier": "getClientsFor", "parameters": "(Secret secret)", "modifiers": "public", "return": "Set<Client>", "signature": "Set<Client> getClientsFor(Secret secret)", "full_signature": "public Set<Client> getClientsFor(Secret secret)", "class_method_signature": "AclDAO.getClientsFor(Secret secret)", "testcase": false, "constructor": false}, {"identifier": "getSanitizedSecretFor", "parameters": "(Client client, String secretName)", "modifiers": "public", "return": "Optional<SanitizedSecret>", "signature": "Optional<SanitizedSecret> getSanitizedSecretFor(Client client, String secretName)", "full_signature": "public Optional<SanitizedSecret> getSanitizedSecretFor(Client client, String secretName)", "class_method_signature": "AclDAO.getSanitizedSecretFor(Client client, String secretName)", "testcase": false, "constructor": false}, {"identifier": "getBatchSanitizedSecretsFor", "parameters": "(Client client, List<String> secretNames)", "modifiers": "public", "return": "List<SanitizedSecret>", "signature": "List<SanitizedSecret> getBatchSanitizedSecretsFor(Client client, List<String> secretNames)", "full_signature": "public List<SanitizedSecret> getBatchSanitizedSecretsFor(Client client, List<String> secretNames)", "class_method_signature": "AclDAO.getBatchSanitizedSecretsFor(Client client, List<String> secretNames)", "testcase": false, "constructor": false}, {"identifier": "processSanitizedSecretRow", "parameters": "(Record row, Client client)", "modifiers": "private", "return": "SanitizedSecret", "signature": "SanitizedSecret processSanitizedSecretRow(Record row, Client client)", "full_signature": "private SanitizedSecret processSanitizedSecretRow(Record row, Client client)", "class_method_signature": "AclDAO.processSanitizedSecretRow(Record row, Client client)", "testcase": false, "constructor": false}, {"identifier": "getGroupsForSecrets", "parameters": "(Set<Long> secretIdList)", "modifiers": "public", "return": "Map<Long, List<Group>>", "signature": "Map<Long, List<Group>> getGroupsForSecrets(Set<Long> secretIdList)", "full_signature": "public Map<Long, List<Group>> getGroupsForSecrets(Set<Long> secretIdList)", "class_method_signature": "AclDAO.getGroupsForSecrets(Set<Long> secretIdList)", "testcase": false, "constructor": false}, {"identifier": "allowAccess", "parameters": "(Configuration configuration, long secretId, long groupId)", "modifiers": "protected", "return": "void", "signature": "void allowAccess(Configuration configuration, long secretId, long groupId)", "full_signature": "protected void allowAccess(Configuration configuration, long secretId, long groupId)", "class_method_signature": "AclDAO.allowAccess(Configuration configuration, long secretId, long groupId)", "testcase": false, "constructor": false}, {"identifier": "revokeAccess", "parameters": "(Configuration configuration, long secretId, long groupId)", "modifiers": "protected", "return": "void", "signature": "void revokeAccess(Configuration configuration, long secretId, long groupId)", "full_signature": "protected void revokeAccess(Configuration configuration, long secretId, long groupId)", "class_method_signature": "AclDAO.revokeAccess(Configuration configuration, long secretId, long groupId)", "testcase": false, "constructor": false}, {"identifier": "enrollClient", "parameters": "(Configuration configuration, long clientId, long groupId)", "modifiers": "protected", "return": "void", "signature": "void enrollClient(Configuration configuration, long clientId, long groupId)", "full_signature": "protected void enrollClient(Configuration configuration, long clientId, long groupId)", "class_method_signature": "AclDAO.enrollClient(Configuration configuration, long clientId, long groupId)", "testcase": false, "constructor": false}, {"identifier": "evictClient", "parameters": "(Configuration configuration, long clientId, long groupId)", "modifiers": "protected", "return": "void", "signature": "void evictClient(Configuration configuration, long clientId, long groupId)", "full_signature": "protected void evictClient(Configuration configuration, long clientId, long groupId)", "class_method_signature": "AclDAO.evictClient(Configuration configuration, long clientId, long groupId)", "testcase": false, "constructor": false}, {"identifier": "getSecretSeriesFor", "parameters": "(Configuration configuration, Group group)", "modifiers": "protected", "return": "ImmutableSet<SecretSeries>", "signature": "ImmutableSet<SecretSeries> getSecretSeriesFor(Configuration configuration, Group group)", "full_signature": "protected ImmutableSet<SecretSeries> getSecretSeriesFor(Configuration configuration, Group group)", "class_method_signature": "AclDAO.getSecretSeriesFor(Configuration configuration, Group group)", "testcase": false, "constructor": false}, {"identifier": "getSecretSeriesFor", "parameters": "(Configuration configuration, Client client, String secretName)", "modifiers": "protected", "return": "Optional<SecretSeries>", "signature": "Optional<SecretSeries> getSecretSeriesFor(Configuration configuration, Client client, String secretName)", "full_signature": "protected Optional<SecretSeries> getSecretSeriesFor(Configuration configuration, Client client, String secretName)", "class_method_signature": "AclDAO.getSecretSeriesFor(Configuration configuration, Client client, String secretName)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/daos/AclDAO.java"}, "focal_method": {"identifier": "getSecretSeriesFor", "parameters": "(Configuration configuration, Group group)", "modifiers": "protected", "return": "ImmutableSet<SecretSeries>", "body": "protected ImmutableSet<SecretSeries> getSecretSeriesFor(Configuration configuration, Group group) {\n    List<SecretSeries> r = DSL.using(configuration)\n        .select(SECRETS.fields())\n        .from(SECRETS)\n        .join(ACCESSGRANTS).on(SECRETS.ID.eq(ACCESSGRANTS.SECRETID))\n        .join(GROUPS).on(GROUPS.ID.eq(ACCESSGRANTS.GROUPID))\n        .where(GROUPS.NAME.eq(group.getName()).and(SECRETS.CURRENT.isNotNull()))\n        .fetchInto(SECRETS)\n        .map(secretSeriesMapper);\n    return ImmutableSet.copyOf(r);\n  }", "signature": "ImmutableSet<SecretSeries> getSecretSeriesFor(Configuration configuration, Group group)", "full_signature": "protected ImmutableSet<SecretSeries> getSecretSeriesFor(Configuration configuration, Group group)", "class_method_signature": "AclDAO.getSecretSeriesFor(Configuration configuration, Group group)", "testcase": false, "constructor": false, "invocations": ["map", "fetchInto", "where", "on", "join", "on", "join", "from", "select", "using", "fields", "eq", "eq", "and", "eq", "getName", "isNotNull", "copyOf"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}