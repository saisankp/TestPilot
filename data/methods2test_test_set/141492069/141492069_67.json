{"test_class": {"identifier": "TestJDBCMain", "superclass": "", "interfaces": "", "fields": [], "file": "jdbcSource/src/test/java/io/vantiq/extsrc/jdbcSource/TestJDBCMain.java"}, "test_case": {"identifier": "testConfigs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfigs() {\n        Properties props = new Properties();\n        \n        try {\n            // Fail when no props are given\n            JDBCMain.createSources(props);\n            fail(\"Didn't exit when missing authToken and sources\");\n        } catch (ExitException e) {\n            assert e.getMessage().equals(\"Exit Requested: auth token was not specified.\");\n            // Expected this Exception\n        }\n        \n        try {\n            // Fail when only authToken is set\n            props.setProperty(\"authToken\", \"a token\");\n            JDBCMain.createSources(props);\n            fail(\"Didn't exit when missing sources\");\n        } catch (ExitException e) {\n            assert e.getMessage().equals(\"Exit Requested: source(s) not specified.\");\n            // Expected this Exception\n        }\n        \n        try {\n            // Fail when only authToken and sources are set\n            props.setProperty(\"sources\", \"a source\");\n            JDBCMain.createSources(props);\n            fail(\"Didn't exit when missing server\");\n        } catch (ExitException e) {\n            assert e.getMessage().equals(\"Exit Requested: target server not specified.\");\n            // Expected this Exception\n        }\n        \n        // Succeed when authToken, targetVantiqServer, and sources are set\n        props.setProperty(\"sources\", \"s\");\n        props.setProperty(\"targetServer\", \"url\");\n        JDBCMain.createSources(props);\n        assert JDBCMain.targetVantiqServer.equals(\"url\");\n        JDBCCore s = JDBCMain.sources.get(0);\n        assert s.getSourceName().equals(\"s\");\n        s.stop();\n        \n        try {\n            // Fail when only sources is set\n            props.remove(\"authToken\");\n            JDBCMain.createSources(props);\n            fail(\"Didn't exit when missing authToken\");\n        } catch (ExitException e) {\n            assert e.getMessage().equals(\"Exit Requested: auth token was not specified.\");\n            // Expected this Exception\n        }\n        \n        String targetServer = \"dev.vantiq.com\";\n        props.setProperty(\"authToken\", \"a token\");\n        props.setProperty(\"sources\", \"s2, s1  \");\n        props.setProperty(\"targetServer\", targetServer);\n        JDBCMain.createSources(props);\n        assert JDBCMain.targetVantiqServer.equals(targetServer);\n        JDBCCore s1 = JDBCMain.sources.get(0);\n        JDBCCore s2 = JDBCMain.sources.get(1);\n        assert s1.getSourceName().equals(\"s1\") || s2.getSourceName().equals(\"s1\");\n        assert s1.getSourceName().equals(\"s2\") || s2.getSourceName().equals(\"s2\");\n        s1.stop();\n        s2.stop();\n    }", "signature": "void testConfigs()", "full_signature": "@Test public void testConfigs()", "class_method_signature": "TestJDBCMain.testConfigs()", "testcase": true, "constructor": false, "invocations": ["createSources", "fail", "equals", "getMessage", "setProperty", "createSources", "fail", "equals", "getMessage", "setProperty", "createSources", "fail", "equals", "getMessage", "setProperty", "setProperty", "createSources", "equals", "get", "equals", "getSourceName", "stop", "remove", "createSources", "fail", "equals", "getMessage", "setProperty", "setProperty", "setProperty", "createSources", "equals", "get", "get", "equals", "getSourceName", "equals", "getSourceName", "equals", "getSourceName", "equals", "getSourceName", "stop", "stop"]}, "focal_class": {"identifier": "JDBCMain", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger             log = LoggerFactory.getLogger(JDBCMain.class);", "modifier": "static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(JDBCMain.class)", "var_name": "log"}, {"original_string": "static       List<JDBCCore>     sources;", "modifier": "static", "type": "List<JDBCCore>", "declarator": "sources", "var_name": "sources"}, {"original_string": "static String authToken;", "modifier": "static", "type": "String", "declarator": "authToken", "var_name": "authToken"}, {"original_string": "static String targetVantiqServer;", "modifier": "static", "type": "String", "declarator": "targetVantiqServer", "var_name": "targetVantiqServer"}, {"original_string": "static final int NO_AUTH_EXIT = 1;", "modifier": "static final", "type": "int", "declarator": "NO_AUTH_EXIT = 1", "var_name": "NO_AUTH_EXIT"}, {"original_string": "static final int NO_SOURCE_EXIT = 2;", "modifier": "static final", "type": "int", "declarator": "NO_SOURCE_EXIT = 2", "var_name": "NO_SOURCE_EXIT"}, {"original_string": "static final int NO_SERVER_EXIT = 3;", "modifier": "static final", "type": "int", "declarator": "NO_SERVER_EXIT = 3", "var_name": "NO_SERVER_EXIT"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "JDBCMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "startSources", "parameters": "(List<JDBCCore> sources)", "modifiers": "private static", "return": "void", "signature": "void startSources(List<JDBCCore> sources)", "full_signature": "private static void startSources(List<JDBCCore> sources)", "class_method_signature": "JDBCMain.startSources(List<JDBCCore> sources)", "testcase": false, "constructor": false}, {"identifier": "obtainServerConfig", "parameters": "(String fileName)", "modifiers": "static", "return": "Properties", "signature": "Properties obtainServerConfig(String fileName)", "full_signature": "static Properties obtainServerConfig(String fileName)", "class_method_signature": "JDBCMain.obtainServerConfig(String fileName)", "testcase": false, "constructor": false}, {"identifier": "createSources", "parameters": "(Properties config)", "modifiers": "static", "return": "List<JDBCCore>", "signature": "List<JDBCCore> createSources(Properties config)", "full_signature": "static List<JDBCCore> createSources(Properties config)", "class_method_signature": "JDBCMain.createSources(Properties config)", "testcase": false, "constructor": false}, {"identifier": "exit", "parameters": "(int code)", "modifiers": "public static", "return": "void", "signature": "void exit(int code)", "full_signature": "public static void exit(int code)", "class_method_signature": "JDBCMain.exit(int code)", "testcase": false, "constructor": false}], "file": "jdbcSource/src/main/java/io/vantiq/extsrc/jdbcSource/JDBCMain.java"}, "focal_method": {"identifier": "createSources", "parameters": "(Properties config)", "modifiers": "static", "return": "List<JDBCCore>", "body": "static List<JDBCCore> createSources(Properties config) {\n        authToken = config.getProperty(\"authToken\");\n        if (authToken == null) {\n            log.error(\"No valid authentication token in server settings\");\n            log.error(\"Exiting...\");\n            exit(NO_AUTH_EXIT);\n        }\n        \n        String sourceStr = config.getProperty(\"sources\");\n        if (sourceStr == null || sourceStr.equals(\"\")) {\n            log.error(\"No sources in server settings\");\n            log.error(\"Exiting...\");\n            exit(NO_SOURCE_EXIT);\n        }\n        \n        targetVantiqServer = config.getProperty(\"targetServer\");\n        if (targetVantiqServer == null || targetVantiqServer.equals(\"\")) {\n            log.error(\"No server URL specified in server settings\");\n            log.error(\"Exiting...\");\n            exit(NO_SERVER_EXIT);\n        }\n                \n        // Obtain potentially multiple sources from a comma delimited string of sources \n        String[] sourceNames = sourceStr.split(\",\");\n        sources = new ArrayList<>();\n        for (String sourceName : sourceNames) {\n            sourceName = sourceName.trim(); // remove any spacing from the name\n            \n            JDBCCore source;\n            source = new JDBCCore(sourceName, authToken, targetVantiqServer);\n            sources.add(source);\n        }\n        \n        return sources;\n    }", "signature": "List<JDBCCore> createSources(Properties config)", "full_signature": "static List<JDBCCore> createSources(Properties config)", "class_method_signature": "JDBCMain.createSources(Properties config)", "testcase": false, "constructor": false, "invocations": ["getProperty", "error", "error", "exit", "getProperty", "equals", "error", "error", "exit", "getProperty", "equals", "error", "error", "exit", "split", "trim", "add"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}