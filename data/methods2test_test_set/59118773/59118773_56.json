{"test_class": {"identifier": "TendersByItemClassificationTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private TendersByItemClassification tendersByItemClassification;", "modifier": "@Autowired\n    private", "type": "TendersByItemClassification", "declarator": "tendersByItemClassification", "var_name": "tendersByItemClassification"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/TendersByItemClassificationTest.java"}, "test_case": {"identifier": "tendersByItemClassification", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tendersByItemClassification() throws Exception {\n        final List<Document> numberOfTendersByItem = tendersByItemClassification\n                .tendersByItemClassification(new YearFilterPagingRequest());\n\n        final Document first = numberOfTendersByItem.get(0);\n        String id = (String) first.get(Fields.UNDERSCORE_ID);\n        String description = (String) first.get(TendersByItemClassification.Keys.DESCRIPTION);\n        int totalTenders = (int) first.get(TendersByItemClassification.Keys.TOTAL_TENDERS);\n        double totalTenderAmount = (double) first.get(TendersByItemClassification.Keys.TOTAL_TENDER_AMOUNT);\n        Assert.assertEquals(\"09100000\", id);\n        Assert.assertEquals(\"Fuels\", description);\n        Assert.assertEquals(1, totalTenders);\n        Assert.assertEquals(9000.0, totalTenderAmount,0);\n\n        final Document second = numberOfTendersByItem.get(1);\n        id = (String) second.get(Fields.UNDERSCORE_ID);\n        description = (String) second.get(TendersByItemClassification.Keys.DESCRIPTION);\n        totalTenders = (int) second.get(TendersByItemClassification.Keys.TOTAL_TENDERS);\n        totalTenderAmount = (double) second.get(TendersByItemClassification.Keys.TOTAL_TENDER_AMOUNT);\n        Assert.assertEquals(\"45233130\", id);\n        Assert.assertEquals(\"Construction work for highways\", description);\n        Assert.assertEquals(2, totalTenders);\n        Assert.assertEquals(1000000, totalTenderAmount, 0);\n    }", "signature": "void tendersByItemClassification()", "full_signature": "@Test public void tendersByItemClassification()", "class_method_signature": "TendersByItemClassificationTest.tendersByItemClassification()", "testcase": true, "constructor": false, "invocations": ["tendersByItemClassification", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "get", "get", "get", "get", "get", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "TendersByItemClassification", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "tendersByItemClassification", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"This should show the number of tenders per tender.items.classification.\" + \"The tender date is taken from tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/tendersByItemClassification\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> tendersByItemClassification(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"This should show the number of tenders per tender.items.classification.\" + \"The tender date is taken from tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/tendersByItemClassification\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> tendersByItemClassification(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TendersByItemClassification.tendersByItemClassification(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/TendersByItemClassification.java"}, "focal_method": {"identifier": "tendersByItemClassification", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"This should show the number of tenders per tender.items.classification.\" + \"The tender date is taken from tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/tendersByItemClassification\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"This should show the number of tenders per tender.items.classification.\"\n            + \"The tender date is taken from tender.tenderPeriod.startDate.\")\n    @RequestMapping(value = \"/api/tendersByItemClassification\", method = { RequestMethod.POST,\n            RequestMethod.GET }, produces = \"application/json\")\n    public List<Document> tendersByItemClassification(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n        DBObject project = new BasicDBObject();\n        project.put(Fields.UNDERSCORE_ID, 0);\n        project.put(\"tender.\" + Keys.ITEMS_CLASSIFICATION, 1);\n        project.put(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT, 1);\n\n        Aggregation agg = newAggregation(\n                match(where(MongoConstants.FieldNames.TENDER_PERIOD_START_DATE).exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE))),\n                new CustomProjectionOperation(project), unwind(\"tender.items\"),\n                group(\"$tender.\" + Keys.ITEMS_CLASSIFICATION).count().as(Keys.TOTAL_TENDERS)\n                        .sum(MongoConstants.FieldNames.TENDER_VALUE_AMOUNT).as(Keys.TOTAL_TENDER_AMOUNT),\n                sort(Direction.ASC, Fields.UNDERSCORE_ID));\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> tendersByItemClassification(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"This should show the number of tenders per tender.items.classification.\" + \"The tender date is taken from tender.tenderPeriod.startDate.\") @RequestMapping(value = \"/api/tendersByItemClassification\", method = { RequestMethod.POST, RequestMethod.GET }, produces = \"application/json\") public List<Document> tendersByItemClassification(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "TendersByItemClassification.tendersByItemClassification(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["put", "put", "put", "newAggregation", "match", "andOperator", "exists", "where", "getYearDefaultFilterCriteria", "unwind", "as", "sum", "as", "count", "group", "sort", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}