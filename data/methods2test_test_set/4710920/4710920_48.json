{"test_class": {"identifier": "LocalHostPermitHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-plugin/dubbo-qos/src/test/java/org/apache/dubbo/qos/server/handler/LocalHostPermitHandlerTest.java"}, "test_case": {"identifier": "testHandlerAdded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandlerAdded() throws Exception {\n        ChannelHandlerContext context = mock(ChannelHandlerContext.class);\n        Channel channel = mock(Channel.class);\n        when(context.channel()).thenReturn(channel);\n        InetAddress addr = mock(InetAddress.class);\n        when(addr.isLoopbackAddress()).thenReturn(false);\n        InetSocketAddress address = new InetSocketAddress(addr, 12345);\n        when(channel.remoteAddress()).thenReturn(address);\n        ChannelFuture future = mock(ChannelFuture.class);\n        when(context.writeAndFlush(any(ByteBuf.class))).thenReturn(future);\n        LocalHostPermitHandler handler = new LocalHostPermitHandler(false);\n        handler.handlerAdded(context);\n        ArgumentCaptor<ByteBuf> captor = ArgumentCaptor.forClass(ByteBuf.class);\n        verify(context).writeAndFlush(captor.capture());\n        assertThat(new String(captor.getValue().array()), containsString(\"Foreign Ip Not Permitted\"));\n        verify(future).addListener(ChannelFutureListener.CLOSE);\n    }", "signature": "void testHandlerAdded()", "full_signature": "@Test public void testHandlerAdded()", "class_method_signature": "LocalHostPermitHandlerTest.testHandlerAdded()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "channel", "mock", "thenReturn", "when", "isLoopbackAddress", "thenReturn", "when", "remoteAddress", "mock", "thenReturn", "when", "writeAndFlush", "any", "handlerAdded", "forClass", "writeAndFlush", "verify", "capture", "assertThat", "array", "getValue", "containsString", "addListener", "verify"]}, "focal_class": {"identifier": "LocalHostPermitHandler", "superclass": "extends ChannelHandlerAdapter", "interfaces": "", "fields": [{"original_string": "private  boolean acceptForeignIp;", "modifier": "private", "type": "boolean", "declarator": "acceptForeignIp", "var_name": "acceptForeignIp"}], "methods": [{"identifier": "LocalHostPermitHandler", "parameters": "(boolean acceptForeignIp)", "modifiers": "public", "return": "", "signature": " LocalHostPermitHandler(boolean acceptForeignIp)", "full_signature": "public  LocalHostPermitHandler(boolean acceptForeignIp)", "class_method_signature": "LocalHostPermitHandler.LocalHostPermitHandler(boolean acceptForeignIp)", "testcase": false, "constructor": true}, {"identifier": "handlerAdded", "parameters": "(ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void handlerAdded(ChannelHandlerContext ctx)", "full_signature": "@Override public void handlerAdded(ChannelHandlerContext ctx)", "class_method_signature": "LocalHostPermitHandler.handlerAdded(ChannelHandlerContext ctx)", "testcase": false, "constructor": false}], "file": "dubbo-plugin/dubbo-qos/src/main/java/org/apache/dubbo/qos/server/handler/LocalHostPermitHandler.java"}, "focal_method": {"identifier": "handlerAdded", "parameters": "(ChannelHandlerContext ctx)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        if (!acceptForeignIp) {\n            if (!((InetSocketAddress) ctx.channel().remoteAddress()).getAddress().isLoopbackAddress()) {\n                ByteBuf cb = Unpooled.wrappedBuffer((QosConstants.BR_STR + \"Foreign Ip Not Permitted.\"\n                        + QosConstants.BR_STR).getBytes());\n                ctx.writeAndFlush(cb).addListener(ChannelFutureListener.CLOSE);\n            }\n        }\n    }", "signature": "void handlerAdded(ChannelHandlerContext ctx)", "full_signature": "@Override public void handlerAdded(ChannelHandlerContext ctx)", "class_method_signature": "LocalHostPermitHandler.handlerAdded(ChannelHandlerContext ctx)", "testcase": false, "constructor": false, "invocations": ["isLoopbackAddress", "getAddress", "remoteAddress", "channel", "wrappedBuffer", "getBytes", "addListener", "writeAndFlush"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}