{"test_class": {"identifier": "DefaultManagedContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DefaultManagedContext context;", "modifier": "", "type": "DefaultManagedContext", "declarator": "context", "var_name": "context"}], "file": "framework/managed-context/src/test/java/org/apache/cloudstack/managed/context/impl/DefaultManagedContextTest.java"}, "test_case": {"identifier": "testCallable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCallable() throws Exception {\n        assertEquals(5, context.callWithContext(new Callable<Integer>() {\n            @Override\n            public Integer call() throws Exception {\n                return 5;\n            }\n        }).intValue());\n    }", "signature": "void testCallable()", "full_signature": "@Test public void testCallable()", "class_method_signature": "DefaultManagedContextTest.testCallable()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "intValue", "callWithContext"]}, "focal_class": {"identifier": "DefaultManagedContext", "superclass": "", "interfaces": "implements ManagedContext", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(DefaultManagedContext.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(DefaultManagedContext.class)", "var_name": "log"}, {"original_string": "List<ManagedContextListener<?>> listeners = new CopyOnWriteArrayList<ManagedContextListener<?>>();", "modifier": "", "type": "List<ManagedContextListener<?>>", "declarator": "listeners = new CopyOnWriteArrayList<ManagedContextListener<?>>()", "var_name": "listeners"}], "methods": [{"identifier": "registerListener", "parameters": "(ManagedContextListener<?> listener)", "modifiers": "@Override public", "return": "void", "signature": "void registerListener(ManagedContextListener<?> listener)", "full_signature": "@Override public void registerListener(ManagedContextListener<?> listener)", "class_method_signature": "DefaultManagedContext.registerListener(ManagedContextListener<?> listener)", "testcase": false, "constructor": false}, {"identifier": "unregisterListener", "parameters": "(ManagedContextListener<?> listener)", "modifiers": "@Override public", "return": "void", "signature": "void unregisterListener(ManagedContextListener<?> listener)", "full_signature": "@Override public void unregisterListener(ManagedContextListener<?> listener)", "class_method_signature": "DefaultManagedContext.unregisterListener(ManagedContextListener<?> listener)", "testcase": false, "constructor": false}, {"identifier": "runWithContext", "parameters": "(final Runnable run)", "modifiers": "@Override public", "return": "void", "signature": "void runWithContext(final Runnable run)", "full_signature": "@Override public void runWithContext(final Runnable run)", "class_method_signature": "DefaultManagedContext.runWithContext(final Runnable run)", "testcase": false, "constructor": false}, {"identifier": "callWithContext", "parameters": "(Callable<T> callable)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T callWithContext(Callable<T> callable)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T callWithContext(Callable<T> callable)", "class_method_signature": "DefaultManagedContext.callWithContext(Callable<T> callable)", "testcase": false, "constructor": false}, {"identifier": "throwException", "parameters": "(Throwable t)", "modifiers": "protected", "return": "void", "signature": "void throwException(Throwable t)", "full_signature": "protected void throwException(Throwable t)", "class_method_signature": "DefaultManagedContext.throwException(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "()", "modifiers": "public", "return": "List<ManagedContextListener<?>>", "signature": "List<ManagedContextListener<?>> getListeners()", "full_signature": "public List<ManagedContextListener<?>> getListeners()", "class_method_signature": "DefaultManagedContext.getListeners()", "testcase": false, "constructor": false}, {"identifier": "setListeners", "parameters": "(List<ManagedContextListener<?>> listeners)", "modifiers": "public", "return": "void", "signature": "void setListeners(List<ManagedContextListener<?>> listeners)", "full_signature": "public void setListeners(List<ManagedContextListener<?>> listeners)", "class_method_signature": "DefaultManagedContext.setListeners(List<ManagedContextListener<?>> listeners)", "testcase": false, "constructor": false}], "file": "framework/managed-context/src/main/java/org/apache/cloudstack/managed/context/impl/DefaultManagedContext.java"}, "focal_method": {"identifier": "callWithContext", "parameters": "(Callable<T> callable)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public <T> T callWithContext(Callable<T> callable) throws Exception {\n        Object owner = new Object();\n\n        Stack<ListenerInvocation> invocations = new Stack<ListenerInvocation>();\n        boolean reentry = !ManagedContextUtils.setAndCheckOwner(owner);\n        Throwable firstError = null;\n\n        try {\n            for (ManagedContextListener<?> listener : listeners) {\n                Object data = null;\n\n                try {\n                    data = listener.onEnterContext(reentry);\n                } catch (Throwable t) {\n                    /* If one listener fails, still call all other listeners\n                     * and then we will call onLeaveContext for all\n                     */\n                    if (firstError == null) {\n                        firstError = t;\n                    }\n                    log.error(\"Failed onEnterContext for listener [{}]\", listener, t);\n                }\n\n                /* Stack data structure is used because in between onEnter and onLeave\n                 * the listeners list could have changed\n                 */\n                invocations.push(new ListenerInvocation((ManagedContextListener<Object>)listener, data));\n            }\n\n            try {\n                if (firstError == null) {\n                    /* Only call if all the listeners didn't blow up on onEnterContext */\n                    return callable.call();\n                } else {\n                    throwException(firstError);\n                    return null;\n                }\n            } finally {\n                Throwable lastError = null;\n\n                while (!invocations.isEmpty()) {\n                    ListenerInvocation invocation = invocations.pop();\n                    try {\n                        invocation.listener.onLeaveContext(invocation.data, reentry);\n                    } catch (Throwable t) {\n                        lastError = t;\n                        log.error(\"Failed onLeaveContext for listener [{}]\", invocation.listener, t);\n                    }\n                }\n\n                if (firstError == null && lastError != null) {\n                    throwException(lastError);\n                }\n            }\n        } finally {\n            if (ManagedContextUtils.clearOwner(owner))\n                ManagedThreadLocal.reset();\n        }\n    }", "signature": "T callWithContext(Callable<T> callable)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T callWithContext(Callable<T> callable)", "class_method_signature": "DefaultManagedContext.callWithContext(Callable<T> callable)", "testcase": false, "constructor": false, "invocations": ["setAndCheckOwner", "onEnterContext", "error", "push", "call", "throwException", "isEmpty", "pop", "onLeaveContext", "error", "throwException", "clearOwner", "reset"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}