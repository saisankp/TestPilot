{"test_class": {"identifier": "FontSizeTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FontSizeTranslator fst = FontSizeTranslator.getInstance();", "modifier": "private final", "type": "FontSizeTranslator", "declarator": "fst = FontSizeTranslator.getInstance()", "var_name": "fst"}, {"original_string": "Tag p = new Tag(\"p\");", "modifier": "", "type": "Tag", "declarator": "p = new Tag(\"p\")", "var_name": "p"}, {"original_string": "Tag span = new Tag(\"span\");", "modifier": "", "type": "Tag", "declarator": "span = new Tag(\"span\")", "var_name": "span"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/css/FontSizeTranslatorTest.java"}, "test_case": {"identifier": "resolveDefaultToSmaller", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolveDefaultToSmaller() throws IOException {\n        p.getCSS().put(CSS.Property.FONT_SIZE, fst.translateFontSize(p) + \"pt\");\n        Chunk c1 = new ChunkCssApplier().apply(new Chunk(\"Text before span \"), p);\n        assertEquals(12, c1.getFont().getSize(), 0);\n\n        span.getCSS().put(CSS.Property.FONT_SIZE, CSS.Value.SMALLER);\n        span.getCSS().put(CSS.Property.FONT_SIZE, fst.translateFontSize(span) + \"pt\");\n        Chunk c2 = new ChunkCssApplier().apply(new Chunk(\"text in span \"), span);\n        assertEquals(9.75f, c2.getFont().getSize(), 0);\n    }", "signature": "void resolveDefaultToSmaller()", "full_signature": "@Test public void resolveDefaultToSmaller()", "class_method_signature": "FontSizeTranslatorTest.resolveDefaultToSmaller()", "testcase": true, "constructor": false, "invocations": ["put", "getCSS", "translateFontSize", "apply", "assertEquals", "getSize", "getFont", "put", "getCSS", "put", "getCSS", "translateFontSize", "apply", "assertEquals", "getSize", "getFont"]}, "focal_class": {"identifier": "FontSizeTranslator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final float DEFAULT_FONT_SIZE = 12f;", "modifier": "public static final", "type": "float", "declarator": "DEFAULT_FONT_SIZE = 12f", "var_name": "DEFAULT_FONT_SIZE"}, {"original_string": "private static CssUtils utils = CssUtils.getInstance();", "modifier": "private static", "type": "CssUtils", "declarator": "utils = CssUtils.getInstance()", "var_name": "utils"}, {"original_string": "private static FontSizeTranslator myself;", "modifier": "private static", "type": "FontSizeTranslator", "declarator": "myself", "var_name": "myself"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static synchronized", "return": "FontSizeTranslator", "signature": "FontSizeTranslator getInstance()", "full_signature": "public static synchronized FontSizeTranslator getInstance()", "class_method_signature": "FontSizeTranslator.getInstance()", "testcase": false, "constructor": false}, {"identifier": "translateFontSize", "parameters": "(final Tag tag)", "modifiers": "public", "return": "float", "signature": "float translateFontSize(final Tag tag)", "full_signature": "public float translateFontSize(final Tag tag)", "class_method_signature": "FontSizeTranslator.translateFontSize(final Tag tag)", "testcase": false, "constructor": false}, {"identifier": "getFontSize", "parameters": "(final Tag tag)", "modifiers": "public", "return": "float", "signature": "float getFontSize(final Tag tag)", "full_signature": "public float getFontSize(final Tag tag)", "class_method_signature": "FontSizeTranslator.getFontSize(final Tag tag)", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/css/FontSizeTranslator.java"}, "focal_method": {"identifier": "translateFontSize", "parameters": "(final Tag tag)", "modifiers": "public", "return": "float", "body": "public float translateFontSize(final Tag tag) {\n        float size = Font.UNDEFINED;\n        if (tag.getCSS().get(CSS.Property.FONT_SIZE) != null) {\n            String value = tag.getCSS().get(CSS.Property.FONT_SIZE);\n            if (value.equalsIgnoreCase(CSS.Value.XX_SMALL)) {\n                size = 6.75f;\n            } else if (value.equalsIgnoreCase(CSS.Value.X_SMALL)) {\n                size = 7.5f;\n            } else if (value.equalsIgnoreCase(CSS.Value.SMALL)) {\n                size = 9.75f;\n            } else if (value.equalsIgnoreCase(CSS.Value.MEDIUM)) {\n                size = 12f;\n            } else if (value.equalsIgnoreCase(CSS.Value.LARGE)) {\n                size = 13.5f;\n            } else if (value.equalsIgnoreCase(CSS.Value.X_LARGE)) {\n                size = 18f;\n            } else if (value.equalsIgnoreCase(CSS.Value.XX_LARGE)) {\n                size = 24f;\n            } else if (value.equalsIgnoreCase(CSS.Value.SMALLER)) {\n                if (tag.getParent() != null) {\n                    float parentSize =\n                        getFontSize(tag.getParent()); // if the font-size of the parent can be set in some memory the translation part is not needed anymore.\n                    if (parentSize == Font.UNDEFINED) {\n                        size = 9.75f;\n                    } else if (parentSize <= 6.75f) {\n                        size = parentSize - 1;\n                    } else if (parentSize == 7.5f) {\n                        size = 6.75f;\n                    } else if (parentSize == 9.75f) {\n                        size = 7.5f;\n                    } else if (parentSize == 12f) {\n                        size = 9.75f;\n                    } else if (parentSize == 13.5f) {\n                        size = 12f;\n                    } else if (parentSize == 18f) {\n                        size = 13.5f;\n                    } else if (parentSize == 24f) {\n                        size = 18f;\n                    } else if (parentSize < 24f) {\n                        size = parentSize * 0.85f;\n                    } else if (parentSize >= 24) {\n                        size = parentSize * 2 / 3;\n                    }\n                } else {\n                    size = 9.75f;\n                }\n            } else if (value.equalsIgnoreCase(CSS.Value.LARGER)) {\n                if (tag.getParent() != null) {\n                    float parentSize = getFontSize(tag.getParent()); // if the font-size of the parent can be set in some memory the translation part is not needed anymore.\n                    if (parentSize == Font.UNDEFINED) {\n                        size = 13.5f;\n                    } else if (parentSize == 6.75f) {\n                        size = 7.5f;\n                    } else if (parentSize == 7.5f) {\n                        size = 9.75f;\n                    } else if (parentSize == 9.75f) {\n                        size = 12f;\n                    } else if (parentSize == 12f) {\n                        size = 13.5f;\n                    } else if (parentSize == 13.5f) {\n                        size = 18f;\n                    } else if (parentSize == 18f) {\n                        size = 24f;\n                    } else {\n                        size = parentSize * 1.5f;\n                    }\n                } else {\n                    size = 13.5f;\n                }\n            } else if (utils.isMetricValue(value) || utils.isNumericValue(value)) {\n                size = utils.parsePxInCmMmPcToPt(value);\n            } else if (utils.isRelativeValue(value)) {\n                float baseValue = Font.UNDEFINED;\n                if (tag.getParent() != null) {\n                    baseValue = getFontSize(tag.getParent());\n                }\n                if (baseValue == Font.UNDEFINED) {\n                    baseValue = 12;\n                }\n                size = utils.parseRelativeValue(value, baseValue);\n            }\n        }\n        return size;\n    }", "signature": "float translateFontSize(final Tag tag)", "full_signature": "public float translateFontSize(final Tag tag)", "class_method_signature": "FontSizeTranslator.translateFontSize(final Tag tag)", "testcase": false, "constructor": false, "invocations": ["get", "getCSS", "get", "getCSS", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase", "getParent", "getFontSize", "getParent", "equalsIgnoreCase", "getParent", "getFontSize", "getParent", "isMetricValue", "isNumericValue", "parsePxInCmMmPcToPt", "isRelativeValue", "getParent", "getFontSize", "getParent", "parseRelativeValue"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}