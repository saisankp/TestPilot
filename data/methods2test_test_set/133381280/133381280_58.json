{"test_class": {"identifier": "LookoutRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static List<LookoutMeasurement> measurements;", "modifier": "static", "type": "List<LookoutMeasurement>", "declarator": "measurements", "var_name": "measurements"}, {"original_string": "static LookoutRegistry          registry;", "modifier": "static", "type": "LookoutRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "static ManualClock              clock          = new ManualClock();", "modifier": "static", "type": "ManualClock", "declarator": "clock          = new ManualClock()", "var_name": "clock"}, {"original_string": "static MetricObserver           metricObserver = new MetricObserver<LookoutMeasurement>() {\n\n                                                       @Override\n                                                       public boolean isEnable() {\n                                                           return true;\n                                                       }\n\n                                                       @Override\n                                                       public void update(List<LookoutMeasurement> measures,\n                                                                          Map<String, String> metadata) {\n                                                           System.out.println(measures.toString());\n                                                       }\n                                                   };", "modifier": "static", "type": "MetricObserver", "declarator": "metricObserver = new MetricObserver<LookoutMeasurement>() {\n\n                                                       @Override\n                                                       public boolean isEnable() {\n                                                           return true;\n                                                       }\n\n                                                       @Override\n                                                       public void update(List<LookoutMeasurement> measures,\n                                                                          Map<String, String> metadata) {\n                                                           System.out.println(measures.toString());\n                                                       }\n                                                   }", "var_name": "metricObserver"}], "file": "client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/step/LookoutRegistryTest.java"}, "test_case": {"identifier": "testAddMetricObservers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddMetricObservers() throws InterruptedException {\n        registry.addMetricObserver(new MetricObserver() {\n            @Override\n            public void update(List measures, Map metadata) {\n                System.out.println(\"===>2\");\n            }\n\n            @Override\n            public boolean isEnable() {\n                return true;\n            }\n        });\n\n        try {\n            Field field = registry.getClass().getDeclaredField(\"metricObserverComposite\");\n            field.setAccessible(true);\n            MetricObserverComposite metricObserverComposite = (MetricObserverComposite) field\n                .get(registry);\n            //do assert\n            Assert.assertTrue(metricObserverComposite.size() > 1);\n        } catch (Throwable e) {\n            throw new RuntimeException(\"xx\", e);\n        }\n    }", "signature": "void testAddMetricObservers()", "full_signature": "@Test public void testAddMetricObservers()", "class_method_signature": "LookoutRegistryTest.testAddMetricObservers()", "testcase": true, "constructor": false, "invocations": ["addMetricObserver", "println", "getDeclaredField", "getClass", "setAccessible", "get", "assertTrue", "size"]}, "focal_class": {"identifier": "LookoutRegistry", "superclass": "extends ResettableStepRegistry", "interfaces": "implements CommonTagsAccessor", "fields": [{"original_string": "private SchedulerPoller               poller;", "modifier": "private", "type": "SchedulerPoller", "declarator": "poller", "var_name": "poller"}, {"original_string": "private final MetricObserverComposite metricObserverComposite = new MetricObserverComposite();", "modifier": "private final", "type": "MetricObserverComposite", "declarator": "metricObserverComposite = new MetricObserverComposite()", "var_name": "metricObserverComposite"}], "methods": [{"identifier": "LookoutRegistry", "parameters": "(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config)", "modifiers": "public", "return": "", "signature": " LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config)", "full_signature": "public  LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config)", "class_method_signature": "LookoutRegistry.LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config)", "testcase": false, "constructor": true}, {"identifier": "LookoutRegistry", "parameters": "(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService)", "modifiers": "public", "return": "", "signature": " LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService)", "full_signature": "public  LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService)", "class_method_signature": "LookoutRegistry.LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService)", "testcase": false, "constructor": true}, {"identifier": "LookoutRegistry", "parameters": "(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService, long currentStep)", "modifiers": "public", "return": "", "signature": " LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService, long currentStep)", "full_signature": "public  LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService, long currentStep)", "class_method_signature": "LookoutRegistry.LookoutRegistry(Clock clock, MetricObserver<LookoutMeasurement> observer,\n                           LookoutConfig config, AddressService addressService, long currentStep)", "testcase": false, "constructor": true}, {"identifier": "getAddressService", "parameters": "(LookoutConfig config)", "modifiers": "public static", "return": "AddressService", "signature": "AddressService getAddressService(LookoutConfig config)", "full_signature": "public static AddressService getAddressService(LookoutConfig config)", "class_method_signature": "LookoutRegistry.getAddressService(LookoutConfig config)", "testcase": false, "constructor": false}, {"identifier": "LookoutRegistry", "parameters": "(LookoutConfig config)", "modifiers": "public", "return": "", "signature": " LookoutRegistry(LookoutConfig config)", "full_signature": "public  LookoutRegistry(LookoutConfig config)", "class_method_signature": "LookoutRegistry.LookoutRegistry(LookoutConfig config)", "testcase": false, "constructor": true}, {"identifier": "LookoutRegistry", "parameters": "(LookoutConfig config, AddressService addressService)", "modifiers": "public", "return": "", "signature": " LookoutRegistry(LookoutConfig config, AddressService addressService)", "full_signature": "public  LookoutRegistry(LookoutConfig config, AddressService addressService)", "class_method_signature": "LookoutRegistry.LookoutRegistry(LookoutConfig config, AddressService addressService)", "testcase": false, "constructor": true}, {"identifier": "LookoutRegistry", "parameters": "(MetricObserver<LookoutMeasurement> observer)", "modifiers": "public", "return": "", "signature": " LookoutRegistry(MetricObserver<LookoutMeasurement> observer)", "full_signature": "public  LookoutRegistry(MetricObserver<LookoutMeasurement> observer)", "class_method_signature": "LookoutRegistry.LookoutRegistry(MetricObserver<LookoutMeasurement> observer)", "testcase": false, "constructor": true}, {"identifier": "poller", "parameters": "()", "modifiers": "", "return": "SchedulerPoller", "signature": "SchedulerPoller poller()", "full_signature": " SchedulerPoller poller()", "class_method_signature": "LookoutRegistry.poller()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "LookoutRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "addMetricObserver", "parameters": "(MetricObserver metricObserver)", "modifiers": "public", "return": "void", "signature": "void addMetricObserver(MetricObserver metricObserver)", "full_signature": "public void addMetricObserver(MetricObserver metricObserver)", "class_method_signature": "LookoutRegistry.addMetricObserver(MetricObserver metricObserver)", "testcase": false, "constructor": false}, {"identifier": "getMetricObservers", "parameters": "()", "modifiers": "public", "return": "Collection<MetricObserver>", "signature": "Collection<MetricObserver> getMetricObservers()", "full_signature": "public Collection<MetricObserver> getMetricObservers()", "class_method_signature": "LookoutRegistry.getMetricObservers()", "testcase": false, "constructor": false}, {"identifier": "addMetricObserverMeasurementsFilter", "parameters": "(MetricObserverMeasurementsFilter metricObserverMeasurementsFilter)", "modifiers": "public", "return": "void", "signature": "void addMetricObserverMeasurementsFilter(MetricObserverMeasurementsFilter metricObserverMeasurementsFilter)", "full_signature": "public void addMetricObserverMeasurementsFilter(MetricObserverMeasurementsFilter metricObserverMeasurementsFilter)", "class_method_signature": "LookoutRegistry.addMetricObserverMeasurementsFilter(MetricObserverMeasurementsFilter metricObserverMeasurementsFilter)", "testcase": false, "constructor": false}, {"identifier": "getMetricObserverComposite", "parameters": "()", "modifiers": "public", "return": "MetricObserverComposite", "signature": "MetricObserverComposite getMetricObserverComposite()", "full_signature": "public MetricObserverComposite getMetricObserverComposite()", "class_method_signature": "LookoutRegistry.getMetricObserverComposite()", "testcase": false, "constructor": false}], "file": "client/lookout-reg-server/src/main/java/com/alipay/lookout/remote/step/LookoutRegistry.java"}, "focal_method": {"identifier": "addMetricObserver", "parameters": "(MetricObserver metricObserver)", "modifiers": "public", "return": "void", "body": "public void addMetricObserver(MetricObserver metricObserver) {\n        if (metricObserver == null) {\n            return;\n        }\n        metricObserverComposite.addMetricObserver(metricObserver);\n    }", "signature": "void addMetricObserver(MetricObserver metricObserver)", "full_signature": "public void addMetricObserver(MetricObserver metricObserver)", "class_method_signature": "LookoutRegistry.addMetricObserver(MetricObserver metricObserver)", "testcase": false, "constructor": false, "invocations": ["addMetricObserver"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}