{"test_class": {"identifier": "GetFirmwareFileResponseMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    protected DlmsConnectionHelper connectionHelper;", "modifier": "@Mock\n    protected", "type": "DlmsConnectionHelper", "declarator": "connectionHelper", "var_name": "connectionHelper"}, {"original_string": "@Mock\n    protected DeviceResponseMessageSender responseMessageSender;", "modifier": "@Mock\n    protected", "type": "DeviceResponseMessageSender", "declarator": "responseMessageSender", "var_name": "responseMessageSender"}, {"original_string": "@Mock\n    protected DomainHelperService domainHelperService;", "modifier": "@Mock\n    protected", "type": "DomainHelperService", "declarator": "domainHelperService", "var_name": "domainHelperService"}, {"original_string": "@Mock\n    protected DlmsMessageListener dlmsMessageListenerMock;", "modifier": "@Mock\n    protected", "type": "DlmsMessageListener", "declarator": "dlmsMessageListenerMock", "var_name": "dlmsMessageListenerMock"}, {"original_string": "@Mock\n    private RetryHeaderFactory retryHeaderFactory;", "modifier": "@Mock\n    private", "type": "RetryHeaderFactory", "declarator": "retryHeaderFactory", "var_name": "retryHeaderFactory"}, {"original_string": "@Mock\n    private FirmwareService firmwareService;", "modifier": "@Mock\n    private", "type": "FirmwareService", "declarator": "firmwareService", "var_name": "firmwareService"}, {"original_string": "@Mock\n    private DlmsConnectionManager dlmsConnectionManagerMock;", "modifier": "@Mock\n    private", "type": "DlmsConnectionManager", "declarator": "dlmsConnectionManagerMock", "var_name": "dlmsConnectionManagerMock"}, {"original_string": "@Mock\n    private ThrottlingService throttlingService;", "modifier": "@Mock\n    private", "type": "ThrottlingService", "declarator": "throttlingService", "var_name": "throttlingService"}, {"original_string": "private DlmsDevice dlmsDevice;", "modifier": "private", "type": "DlmsDevice", "declarator": "dlmsDevice", "var_name": "dlmsDevice"}, {"original_string": "@InjectMocks\n    private GetFirmwareFileResponseMessageProcessor getFirmwareFileResponseMessageProcessor;", "modifier": "@InjectMocks\n    private", "type": "GetFirmwareFileResponseMessageProcessor", "declarator": "getFirmwareFileResponseMessageProcessor", "var_name": "getFirmwareFileResponseMessageProcessor"}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/responses/from/core/processors/GetFirmwareFileResponseMessageProcessorTest.java"}, "test_case": {"identifier": "handleMessageShouldCallUpdateFirmware", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void handleMessageShouldCallUpdateFirmware() throws OsgpException {\n        // arrange\n        final FirmwareFileDto firmwareFileDto = this.setupFirmwareFileDto();\n        final ResponseMessage responseMessage = this.setupResponseMessage(firmwareFileDto);\n\n        // act\n        this.getFirmwareFileResponseMessageProcessor\n                .handleMessage(this.dlmsConnectionManagerMock, this.dlmsDevice, responseMessage);\n\n        // assert\n        verify(this.firmwareService, times(1))\n                .updateFirmware(this.dlmsConnectionManagerMock, this.dlmsDevice, firmwareFileDto);\n    }", "signature": "void handleMessageShouldCallUpdateFirmware()", "full_signature": "@Test public void handleMessageShouldCallUpdateFirmware()", "class_method_signature": "GetFirmwareFileResponseMessageProcessorTest.handleMessageShouldCallUpdateFirmware()", "testcase": true, "constructor": false, "invocations": ["setupFirmwareFileDto", "setupResponseMessage", "handleMessage", "updateFirmware", "verify", "times"]}, "focal_class": {"identifier": "GetFirmwareFileResponseMessageProcessor", "superclass": "extends OsgpResponseMessageProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GetFirmwareFileResponseMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GetFirmwareFileResponseMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private FirmwareService firmwareService;", "modifier": "@Autowired\n    private", "type": "FirmwareService", "declarator": "firmwareService", "var_name": "firmwareService"}], "methods": [{"identifier": "GetFirmwareFileResponseMessageProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " GetFirmwareFileResponseMessageProcessor()", "full_signature": "protected  GetFirmwareFileResponseMessageProcessor()", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.GetFirmwareFileResponseMessageProcessor()", "testcase": false, "constructor": true}, {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. @Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@SuppressWarnings(\"squid:S1193\") // SilentException cannot be caught since it does not extend Exception. @Override public void processMessage(final ObjectMessage message)", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "modifiers": "@Override protected", "return": "Serializable", "signature": "Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "full_signature": "@Override protected Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/responses/from/core/processors/GetFirmwareFileResponseMessageProcessor.java"}, "focal_method": {"identifier": "handleMessage", "parameters": "(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "modifiers": "@Override protected", "return": "Serializable", "body": "@Override\n    protected Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response) throws OsgpException {\n\n        if (!(response instanceof ResponseMessage)) {\n            throw new ProtocolAdapterException(\"Invalid response type, expected ResponseMessage object.\");\n        }\n\n        final ResponseMessage responseMessage = (ResponseMessage) response;\n\n        if (ResponseMessageResultType.OK.equals(responseMessage.getResult())) {\n            final FirmwareFileDto firmwareFileDto = (FirmwareFileDto) responseMessage.getDataObject();\n            return this.firmwareService.updateFirmware(conn, device, firmwareFileDto);\n        } else {\n            throw new ProtocolAdapterException(\"Get Firmware File failed.\", responseMessage.getOsgpException());\n        }\n\n    }", "signature": "Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "full_signature": "@Override protected Serializable handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "class_method_signature": "GetFirmwareFileResponseMessageProcessor.handleMessage(final DlmsConnectionManager conn, final DlmsDevice device,\n            final Serializable response)", "testcase": false, "constructor": false, "invocations": ["equals", "getResult", "getDataObject", "updateFirmware", "getOsgpException"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}