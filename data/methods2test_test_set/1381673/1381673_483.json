{"test_class": {"identifier": "DistinctValuesFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DistinctValuesFunction distinctValuesFunction;", "modifier": "private", "type": "DistinctValuesFunction", "declarator": "distinctValuesFunction", "var_name": "distinctValuesFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/DistinctValuesFunctionTest.java"}, "test_case": {"identifier": "invokeList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokeList() {\n        final List testValues = Arrays.asList(1, BigDecimal.valueOf(10.1), \"test\", 1, \"test\", BigDecimal.valueOf(10.1));\n        FunctionTestUtil.assertResultList(\n                distinctValuesFunction.invoke(testValues),\n                Arrays.asList(1, BigDecimal.valueOf(10.1), \"test\"));\n    }", "signature": "void invokeList()", "full_signature": "@Test public void invokeList()", "class_method_signature": "DistinctValuesFunctionTest.invokeList()", "testcase": true, "constructor": false, "invocations": ["asList", "valueOf", "valueOf", "assertResultList", "invoke", "asList", "valueOf"]}, "focal_class": {"identifier": "DistinctValuesFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [], "methods": [{"identifier": "DistinctValuesFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " DistinctValuesFunction()", "full_signature": "public  DistinctValuesFunction()", "class_method_signature": "DistinctValuesFunction.DistinctValuesFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName( \"list\" ) Object list)", "modifiers": "public", "return": "FEELFnResult<List<Object>>", "signature": "FEELFnResult<List<Object>> invoke(@ParameterName( \"list\" ) Object list)", "full_signature": "public FEELFnResult<List<Object>> invoke(@ParameterName( \"list\" ) Object list)", "class_method_signature": "DistinctValuesFunction.invoke(@ParameterName( \"list\" ) Object list)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/DistinctValuesFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName( \"list\" ) Object list)", "modifiers": "public", "return": "FEELFnResult<List<Object>>", "body": "public FEELFnResult<List<Object>> invoke(@ParameterName( \"list\" ) Object list) {\n        if ( list == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"cannot be null\"));\n        }\n        // spec requires us to return a new list\n        final List<Object> result = new ArrayList<>();\n        if ( list instanceof Collection ) {\n            for (Object o : (Collection) list) {\n                if ( !result.contains( o ) ) {\n                    result.add(o);\n                }\n            }\n        } else {\n            result.add( list );\n        }\n        return FEELFnResult.ofResult( result );\n    }", "signature": "FEELFnResult<List<Object>> invoke(@ParameterName( \"list\" ) Object list)", "full_signature": "public FEELFnResult<List<Object>> invoke(@ParameterName( \"list\" ) Object list)", "class_method_signature": "DistinctValuesFunction.invoke(@ParameterName( \"list\" ) Object list)", "testcase": false, "constructor": false, "invocations": ["ofError", "contains", "add", "add", "ofResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}