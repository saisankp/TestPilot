{"test_class": {"identifier": "ReflectionInvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReflectionInvoker sut;", "modifier": "private", "type": "ReflectionInvoker", "declarator": "sut", "var_name": "sut"}], "file": "saga-lib/src/test/java/com/codebullets/sagalib/processing/invocation/ReflectionInvokerTest.java"}, "test_case": {"identifier": "invoke_anyMessage_handleMethodNotFound_doesNotThrow", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void invoke_anyMessage_handleMethodNotFound_doesNotThrow() {\n        // given\n        TestSaga saga = new TestSaga();\n        saga.createNewState();\n\n        // when\n        catchException(() -> sut.invoke(createContext(saga, 42)));\n\n        // then\n        assertThat(\"Expected no exception to be thrown.\", caughtException(), is(nullValue()));\n    }", "signature": "void invoke_anyMessage_handleMethodNotFound_doesNotThrow()", "full_signature": "@Test void invoke_anyMessage_handleMethodNotFound_doesNotThrow()", "class_method_signature": "ReflectionInvokerTest.invoke_anyMessage_handleMethodNotFound_doesNotThrow()", "testcase": true, "constructor": false, "invocations": ["createNewState", "catchException", "invoke", "createContext", "assertThat", "caughtException", "is", "nullValue"]}, "focal_class": {"identifier": "ReflectionInvoker", "superclass": "", "interfaces": "implements HandlerInvoker", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ReflectionInvoker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReflectionInvoker.class)", "var_name": "LOG"}, {"original_string": "private final LoadingCache<InvokerKey, InvocationMethod> invocationMethods;", "modifier": "private final", "type": "LoadingCache<InvokerKey, InvocationMethod>", "declarator": "invocationMethods", "var_name": "invocationMethods"}], "methods": [{"identifier": "ReflectionInvoker", "parameters": "(final SagaAnalyzer analyzer)", "modifiers": "@Inject public", "return": "", "signature": " ReflectionInvoker(final SagaAnalyzer analyzer)", "full_signature": "@Inject public  ReflectionInvoker(final SagaAnalyzer analyzer)", "class_method_signature": "ReflectionInvoker.ReflectionInvoker(final SagaAnalyzer analyzer)", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(final Saga saga, final Object message)", "modifiers": "@Override public", "return": "void", "signature": "void invoke(final Saga saga, final Object message)", "full_signature": "@Override public void invoke(final Saga saga, final Object message)", "class_method_signature": "ReflectionInvoker.invoke(final Saga saga, final Object message)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(final InvocationContext invocationContext)", "modifiers": "@Override public", "return": "void", "signature": "void invoke(final InvocationContext invocationContext)", "full_signature": "@Override public void invoke(final InvocationContext invocationContext)", "class_method_signature": "ReflectionInvoker.invoke(final InvocationContext invocationContext)", "testcase": false, "constructor": false}, {"identifier": "invokeUsingReflection", "parameters": "(final InvocationContext invocationContext)", "modifiers": "private", "return": "void", "signature": "void invokeUsingReflection(final InvocationContext invocationContext)", "full_signature": "private void invokeUsingReflection(final InvocationContext invocationContext)", "class_method_signature": "ReflectionInvoker.invokeUsingReflection(final InvocationContext invocationContext)", "testcase": false, "constructor": false}, {"identifier": "tryGetMethod", "parameters": "(final InvokerKey key)", "modifiers": "private", "return": "InvocationMethod", "signature": "InvocationMethod tryGetMethod(final InvokerKey key)", "full_signature": "private InvocationMethod tryGetMethod(final InvokerKey key)", "class_method_signature": "ReflectionInvoker.tryGetMethod(final InvokerKey key)", "testcase": false, "constructor": false}], "file": "saga-lib/src/main/java/com/codebullets/sagalib/processing/invocation/ReflectionInvoker.java"}, "focal_method": {"identifier": "invoke", "parameters": "(final Saga saga, final Object message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void invoke(final Saga saga, final Object message) {\n    }", "signature": "void invoke(final Saga saga, final Object message)", "full_signature": "@Override public void invoke(final Saga saga, final Object message)", "class_method_signature": "ReflectionInvoker.invoke(final Saga saga, final Object message)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 10566148, "url": "https://github.com/Domo42/saga-lib", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 32, "size": 545, "license": "licensed"}}