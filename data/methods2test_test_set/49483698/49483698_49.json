{"test_class": {"identifier": "TestBytes", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] ba = {0x7e, (byte) 0xac, (byte) 0x8a, (byte) 0x93};", "modifier": "", "type": "byte[]", "declarator": "ba = {0x7e, (byte) 0xac, (byte) 0x8a, (byte) 0x93}", "var_name": "ba"}, {"original_string": "int bigEndianInt = 0x7eac8a93;", "modifier": "", "type": "int", "declarator": "bigEndianInt = 0x7eac8a93", "var_name": "bigEndianInt"}, {"original_string": "int littleEndianInt = 0x938aac7e;", "modifier": "", "type": "int", "declarator": "littleEndianInt = 0x938aac7e", "var_name": "littleEndianInt"}], "file": "jhelper/src/test/java/com/hwangjr/jhelper/TestBytes.java"}, "test_case": {"identifier": "testToByteArrayInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToByteArrayInt() {\n        int[] sarr4 = {0xCAFEBABE, 0xDEADBEEF};\n        int[] sarr3 = {0xCAFEBA, 0xDEADBE};\n        int[] sarr2 = {0xCAFE, 0xDEAD};\n        int[] sarr1 = {0xCA, 0xFE, 0xBA, 0xBE};\n\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr4, sarr4.length, 4, true),\n                Bytes.toByteArray(0xCA, 0xFE, 0xBA, 0xBE, 0xDE, 0xAD, 0xBE, 0xEF));\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr4, sarr4.length, 4, false),\n                Bytes.toByteArray(0xBE, 0xBA, 0xFE, 0xCA, 0xEF, 0xBE, 0xAD, 0xDE));\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr3, sarr3.length, 3, true),\n                Bytes.toByteArray(0xCA, 0xFE, 0xBA, 0xDE, 0xAD, 0xBE));\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr3, sarr3.length, 3, false),\n                Bytes.toByteArray(0xBA, 0xFE, 0xCA, 0xBE, 0xAD, 0xDE));\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr2, sarr2.length, 2, true),\n                Bytes.toByteArray(0xCA, 0xFE, 0xDE, 0xAD));\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr2, sarr2.length, 2, false),\n                Bytes.toByteArray(0xFE, 0xCA, 0xAD, 0xDE));\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr1, sarr1.length, 1, true),\n                Bytes.toByteArray(0xCA, 0xFE, 0xBA, 0xBE));\n        Assert.assertArrayEquals(Bytes.toByteArray(sarr1, sarr1.length, 1, false),\n                Bytes.toByteArray(0xCA, 0xFE, 0xBA, 0xBE));\n    }", "signature": "void testToByteArrayInt()", "full_signature": "@Test public void testToByteArrayInt()", "class_method_signature": "TestBytes.testToByteArrayInt()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "toByteArray", "toByteArray", "assertArrayEquals", "toByteArray", "toByteArray", "assertArrayEquals", "toByteArray", "toByteArray", "assertArrayEquals", "toByteArray", "toByteArray", "assertArrayEquals", "toByteArray", "toByteArray", "assertArrayEquals", "toByteArray", "toByteArray", "assertArrayEquals", "toByteArray", "toByteArray", "assertArrayEquals", "toByteArray", "toByteArray"]}, "focal_class": {"identifier": "Bytes", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];", "modifier": "public static final", "type": "byte[]", "declarator": "EMPTY_BYTE_ARRAY = new byte[0]", "var_name": "EMPTY_BYTE_ARRAY"}], "methods": [{"identifier": "toByteArray", "parameters": "(int... uints)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int... uints)", "full_signature": "public static byte[] toByteArray(int... uints)", "class_method_signature": "Bytes.toByteArray(int... uints)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(byte[] pb, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int toInt(byte[] pb, boolean bigEndian)", "full_signature": "public static int toInt(byte[] pb, boolean bigEndian)", "class_method_signature": "Bytes.toInt(byte[] pb, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(int i, int bitCount)", "modifiers": "public static", "return": "int", "signature": "int normalize(int i, int bitCount)", "full_signature": "public static int normalize(int i, int bitCount)", "class_method_signature": "Bytes.normalize(int i, int bitCount)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(int iarr[], int bitCount)", "modifiers": "public static", "return": "void", "signature": "void normalize(int iarr[], int bitCount)", "full_signature": "public static void normalize(int iarr[], int bitCount)", "class_method_signature": "Bytes.normalize(int iarr[], int bitCount)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int i, int size, boolean isBigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int i, int size, boolean isBigEndian)", "full_signature": "public static byte[] toByteArray(int i, int size, boolean isBigEndian)", "class_method_signature": "Bytes.toByteArray(int i, int size, boolean isBigEndian)", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "modifiers": "public static", "return": "int", "signature": "int toInt(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "full_signature": "public static int toInt(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "class_method_signature": "Bytes.toInt(byte b0, byte b1, byte b2, byte b3, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int i, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int i, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(int i, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(int i, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(short i, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(short i, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(short i, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(short i, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "(byte[] ba, int amount, boolean bigEndian)", "modifiers": "public static", "return": "int[]", "signature": "int[] toIntArray(byte[] ba, int amount, boolean bigEndian)", "full_signature": "public static int[] toIntArray(byte[] ba, int amount, boolean bigEndian)", "class_method_signature": "Bytes.toIntArray(byte[] ba, int amount, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "modifiers": "public static", "return": "int[]", "signature": "int[] toIntArray(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "full_signature": "public static int[] toIntArray(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "class_method_signature": "Bytes.toIntArray(byte[] ba, final int amount, final int bytePerInteger, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toReducedBitIntArray", "parameters": "(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "modifiers": "public static", "return": "int[]", "signature": "int[] toReducedBitIntArray(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "full_signature": "public static int[] toReducedBitIntArray(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "class_method_signature": "Bytes.toReducedBitIntArray(\n            byte[] ba,\n            final int amount,\n            int bytePerInteger,\n            int bitAmount,\n            boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "determineSize", "parameters": "(int amount, int arrayLength, int order)", "modifiers": "private static", "return": "int", "signature": "int determineSize(int amount, int arrayLength, int order)", "full_signature": "private static int determineSize(int amount, int arrayLength, int order)", "class_method_signature": "Bytes.determineSize(int amount, int arrayLength, int order)", "testcase": false, "constructor": false}, {"identifier": "toShortArray", "parameters": "(byte[] ba, int amount, boolean bigEndian)", "modifiers": "public static", "return": "short[]", "signature": "short[] toShortArray(byte[] ba, int amount, boolean bigEndian)", "full_signature": "public static short[] toShortArray(byte[] ba, int amount, boolean bigEndian)", "class_method_signature": "Bytes.toShortArray(byte[] ba, int amount, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(short[] sa, int amount, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(short[] sa, int amount, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(short[] sa, int amount, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(short[] sa, int amount, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "full_signature": "public static byte[] toByteArray(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "class_method_signature": "Bytes.toByteArray(int[] ia, int amount, int bytePerInteger, boolean bigEndian)", "testcase": false, "constructor": false}, {"identifier": "toHexWithZeros", "parameters": "(byte b)", "modifiers": "public static", "return": "String", "signature": "String toHexWithZeros(byte b)", "full_signature": "public static String toHexWithZeros(byte b)", "class_method_signature": "Bytes.toHexWithZeros(byte b)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(byte b)", "modifiers": "public static", "return": "String", "signature": "String toHex(byte b)", "full_signature": "public static String toHex(byte b)", "class_method_signature": "Bytes.toHex(byte b)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHex(byte[] bytes)", "full_signature": "public static String toHex(byte[] bytes)", "class_method_signature": "Bytes.toHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "toHexWithZeros", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHexWithZeros(byte[] bytes)", "full_signature": "public static String toHexWithZeros(byte[] bytes)", "class_method_signature": "Bytes.toHexWithZeros(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "hexDump", "parameters": "(OutputStream os, byte[] bytes, int columns)", "modifiers": "public static", "return": "void", "signature": "void hexDump(OutputStream os, byte[] bytes, int columns)", "full_signature": "public static void hexDump(OutputStream os, byte[] bytes, int columns)", "class_method_signature": "Bytes.hexDump(OutputStream os, byte[] bytes, int columns)", "testcase": false, "constructor": false}, {"identifier": "hexDump", "parameters": "(byte[] bytes, int columns)", "modifiers": "public static", "return": "void", "signature": "void hexDump(byte[] bytes, int columns)", "full_signature": "public static void hexDump(byte[] bytes, int columns)", "class_method_signature": "Bytes.hexDump(byte[] bytes, int columns)", "testcase": false, "constructor": false}], "file": "jhelper/src/main/java/com/hwangjr/jhelper/Bytes.java"}, "focal_method": {"identifier": "toByteArray", "parameters": "(int... uints)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] toByteArray(int... uints) {\n        byte[] bytez = new byte[uints.length];\n        for (int i = 0; i < uints.length; i++) {\n            if (uints[i] > 255 || uints[i] < 0)\n                throw new IllegalArgumentException(\"Cannot convert to byte. Number should be between 0 and (255) 0xff. \" +\n                        \"Number:\" + uints[i]);\n            bytez[i] = (byte) (uints[i] & 0xff);\n        }\n        return bytez;\n    }", "signature": "byte[] toByteArray(int... uints)", "full_signature": "public static byte[] toByteArray(int... uints)", "class_method_signature": "Bytes.toByteArray(int... uints)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 49483698, "url": "https://github.com/AndroidKnife/RecordHelper", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 10, "size": 185, "license": "licensed"}}