{"test_class": {"identifier": "SocketIoMemoryAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SocketIoMemoryAdapter.AdapterFactory ADAPTER_FACTORY = new SocketIoMemoryAdapter.Factory();", "modifier": "private static final", "type": "SocketIoMemoryAdapter.AdapterFactory", "declarator": "ADAPTER_FACTORY = new SocketIoMemoryAdapter.Factory()", "var_name": "ADAPTER_FACTORY"}], "file": "socket.io-server/src/test/java/io/socket/socketio/server/SocketIoMemoryAdapterTest.java"}, "test_case": {"identifier": "test_add_exception_on_null_room", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void test_add_exception_on_null_room() {\n        final SocketIoAdapter adapter = ADAPTER_FACTORY.createAdapter(null);\n\n        adapter.add(null, Mockito.mock(SocketIoSocket.class));\n    }", "signature": "void test_add_exception_on_null_room()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void test_add_exception_on_null_room()", "class_method_signature": "SocketIoMemoryAdapterTest.test_add_exception_on_null_room()", "testcase": true, "constructor": false, "invocations": ["createAdapter", "add", "mock"]}, "focal_class": {"identifier": "SocketIoMemoryAdapter", "superclass": "extends SocketIoAdapter", "interfaces": "", "fields": [{"original_string": "private static final String[] EMPTY_SOCKET_EXCLUSION = new String[0];", "modifier": "private static final", "type": "String[]", "declarator": "EMPTY_SOCKET_EXCLUSION = new String[0]", "var_name": "EMPTY_SOCKET_EXCLUSION"}], "methods": [{"identifier": "SocketIoMemoryAdapter", "parameters": "(SocketIoNamespace namespace)", "modifiers": "private", "return": "", "signature": " SocketIoMemoryAdapter(SocketIoNamespace namespace)", "full_signature": "private  SocketIoMemoryAdapter(SocketIoNamespace namespace)", "class_method_signature": "SocketIoMemoryAdapter.SocketIoMemoryAdapter(SocketIoNamespace namespace)", "testcase": false, "constructor": true}, {"identifier": "broadcast", "parameters": "(Packet packet, String[] rooms, String[] socketsExcluded)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void broadcast(Packet packet, String[] rooms, String[] socketsExcluded)", "full_signature": "@Override public synchronized void broadcast(Packet packet, String[] rooms, String[] socketsExcluded)", "class_method_signature": "SocketIoMemoryAdapter.broadcast(Packet packet, String[] rooms, String[] socketsExcluded)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String room, SocketIoSocket socket)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void add(String room, SocketIoSocket socket)", "full_signature": "@Override public synchronized void add(String room, SocketIoSocket socket)", "class_method_signature": "SocketIoMemoryAdapter.add(String room, SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String room, SocketIoSocket socket)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void remove(String room, SocketIoSocket socket)", "full_signature": "@Override public synchronized void remove(String room, SocketIoSocket socket)", "class_method_signature": "SocketIoMemoryAdapter.remove(String room, SocketIoSocket socket)", "testcase": false, "constructor": false}, {"identifier": "listClients", "parameters": "(String room)", "modifiers": "@Override public", "return": "SocketIoSocket[]", "signature": "SocketIoSocket[] listClients(String room)", "full_signature": "@Override public SocketIoSocket[] listClients(String room)", "class_method_signature": "SocketIoMemoryAdapter.listClients(String room)", "testcase": false, "constructor": false}, {"identifier": "listClientRooms", "parameters": "(SocketIoSocket socket)", "modifiers": "@Override public", "return": "String[]", "signature": "String[] listClientRooms(SocketIoSocket socket)", "full_signature": "@Override public String[] listClientRooms(SocketIoSocket socket)", "class_method_signature": "SocketIoMemoryAdapter.listClientRooms(SocketIoSocket socket)", "testcase": false, "constructor": false}], "file": "socket.io-server/src/main/java/io/socket/socketio/server/SocketIoMemoryAdapter.java"}, "focal_method": {"identifier": "add", "parameters": "(String room, SocketIoSocket socket)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void add(String room, SocketIoSocket socket) throws IllegalArgumentException {\n        if (room == null) {\n            throw new IllegalArgumentException(\"room must not be null.\");\n        }\n        if (socket == null) {\n            throw new IllegalArgumentException(\"socket must not be null.\");\n        }\n\n        if (!mSocketRooms.containsKey(socket.getId())) {\n            mSocketRooms.put(socket.getId(), new HashSet<>());\n        }\n        if (!mRoomSockets.containsKey(room)) {\n            mRoomSockets.put(room, new HashSet<>());\n        }\n\n        mSocketRooms.get(socket.getId()).add(room);\n        mRoomSockets.get(room).add(socket);\n    }", "signature": "void add(String room, SocketIoSocket socket)", "full_signature": "@Override public synchronized void add(String room, SocketIoSocket socket)", "class_method_signature": "SocketIoMemoryAdapter.add(String room, SocketIoSocket socket)", "testcase": false, "constructor": false, "invocations": ["containsKey", "getId", "put", "getId", "containsKey", "put", "add", "get", "getId", "add", "get"]}, "repository": {"repo_id": 144740389, "url": "https://github.com/trinopoty/socket.io-server-java", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 16, "size": 1069, "license": "licensed"}}