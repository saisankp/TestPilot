{"test_class": {"identifier": "CSVDetectorTest", "superclass": "extends AbstractSchemaTestUtils", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CSVDetector csvDetector;", "modifier": "@Autowired\n    private", "type": "CSVDetector", "declarator": "csvDetector", "var_name": "csvDetector"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/csv/CSVDetectorTest.java"}, "test_case": {"identifier": "should_not_read_null_input_stream", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void should_not_read_null_input_stream() throws Exception {\n        csvDetector.detect(null);\n    }", "signature": "void should_not_read_null_input_stream()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void should_not_read_null_input_stream()", "class_method_signature": "CSVDetectorTest.should_not_read_null_input_stream()", "testcase": true, "constructor": false, "invocations": ["detect"]}, "focal_class": {"identifier": "CSVDetector", "superclass": "", "interfaces": "implements Detector", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CSVDetector.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CSVDetector.class)", "var_name": "LOGGER"}, {"original_string": "private static final String TEXT_PLAIN = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_PLAIN = \"text/plain\"", "var_name": "TEXT_PLAIN"}, {"original_string": "private final MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes();", "modifier": "private final", "type": "MimeTypes", "declarator": "mimeTypes = MimeTypes.getDefaultMimeTypes()", "var_name": "mimeTypes"}, {"original_string": "private final UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();", "modifier": "private final", "type": "UniversalEncodingDetector", "declarator": "encodingDetector = new UniversalEncodingDetector()", "var_name": "encodingDetector"}, {"original_string": "@Autowired\n    private CSVFormatFamily csvFormatFamily;", "modifier": "@Autowired\n    private", "type": "CSVFormatFamily", "declarator": "csvFormatFamily", "var_name": "csvFormatFamily"}], "methods": [{"identifier": "detect", "parameters": "(Metadata metadata, TikaInputStream inputStream)", "modifiers": "@Override public", "return": "Format", "signature": "Format detect(Metadata metadata, TikaInputStream inputStream)", "full_signature": "@Override public Format detect(Metadata metadata, TikaInputStream inputStream)", "class_method_signature": "CSVDetector.detect(Metadata metadata, TikaInputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "detectText", "parameters": "(Metadata metadata, InputStream inputStream)", "modifiers": "private", "return": "Format", "signature": "Format detectText(Metadata metadata, InputStream inputStream)", "full_signature": "private Format detectText(Metadata metadata, InputStream inputStream)", "class_method_signature": "CSVDetector.detectText(Metadata metadata, InputStream inputStream)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/csv/CSVDetector.java"}, "focal_method": {"identifier": "detect", "parameters": "(Metadata metadata, TikaInputStream inputStream)", "modifiers": "@Override public", "return": "Format", "body": "@Override\n    public Format detect(Metadata metadata, TikaInputStream inputStream) throws IOException {\n\n        Format result = detectText(metadata, inputStream);\n\n        if (result == null) {\n            inputStream.mark(FormatUtils.META_TAG_BUFFER_SIZE);\n            byte[] buffer = new byte[FormatUtils.META_TAG_BUFFER_SIZE];\n            int n = 0;\n\n            for (int m = inputStream.read(buffer); m != -1 && n < buffer.length; m =\n                    inputStream.read(buffer, n, buffer.length - n)) {\n                n += m;\n            }\n\n            inputStream.reset();\n            String head = FormatUtils.readFromBuffer(buffer, 0, n);\n\n            try (InputStream stream = TikaInputStream.get(IOUtils.toInputStream(head))) {\n                result = detectText(new Metadata(), stream);\n            }\n        }\n        return result;\n    }", "signature": "Format detect(Metadata metadata, TikaInputStream inputStream)", "full_signature": "@Override public Format detect(Metadata metadata, TikaInputStream inputStream)", "class_method_signature": "CSVDetector.detect(Metadata metadata, TikaInputStream inputStream)", "testcase": false, "constructor": false, "invocations": ["detectText", "mark", "read", "read", "reset", "readFromBuffer", "get", "toInputStream", "detectText"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}