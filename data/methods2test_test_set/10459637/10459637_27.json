{"test_class": {"identifier": "HubTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "protected OFPacketIn packetIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "packetIn", "var_name": "packetIn"}, {"original_string": "protected IPacket testPacket;", "modifier": "protected", "type": "IPacket", "declarator": "testPacket", "var_name": "testPacket"}, {"original_string": "protected byte[] testPacketSerialized;", "modifier": "protected", "type": "byte[]", "declarator": "testPacketSerialized", "var_name": "testPacketSerialized"}, {"original_string": "private   MockFloodlightProvider mockFloodlightProvider;", "modifier": "private", "type": "MockFloodlightProvider", "declarator": "mockFloodlightProvider", "var_name": "mockFloodlightProvider"}, {"original_string": "private Hub hub;", "modifier": "private", "type": "Hub", "declarator": "hub", "var_name": "hub"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/hub/HubTest.java"}, "test_case": {"identifier": "testFloodNoBufferId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFloodNoBufferId() throws Exception {\n        // build our expected flooded packetOut\n        OFPacketOut po = ((OFPacketOut) mockFloodlightProvider.getOFMessageFactory().getMessage(OFType.PACKET_OUT))\n            .setActions(Arrays.asList(new OFAction[] {new OFActionOutput().setPort(OFPort.OFPP_FLOOD.getValue())}))\n            .setActionsLength((short) OFActionOutput.MINIMUM_LENGTH)\n            .setBufferId(-1)\n            .setInPort((short) 1)\n            .setPacketData(this.testPacketSerialized);\n        po.setLengthU(OFPacketOut.MINIMUM_LENGTH + po.getActionsLengthU()\n                + this.testPacketSerialized.length);\n\n        // Mock up our expected behavior\n        IOFSwitch mockSwitch = createMock(IOFSwitch.class);\n        \n        Capture<OFMessage> wc1 = new Capture<OFMessage>(CaptureType.ALL);\n        Capture<FloodlightContext> bc1 = new Capture<FloodlightContext>(CaptureType.ALL);\n        \n        mockSwitch.write(capture(wc1), capture(bc1));\n\n        // Start recording the replay on the mocks\n        replay(mockSwitch);\n        // Get the listener and trigger the packet in\n        IOFMessageListener listener = mockFloodlightProvider.getListeners().get(\n                OFType.PACKET_IN).get(0);\n        listener.receive(mockSwitch, this.packetIn,\n                         parseAndAnnotate(this.packetIn));\n\n        // Verify the replay matched our expectations\n        verify(mockSwitch);\n        \n        assertTrue(wc1.hasCaptured());\n        OFMessage m = wc1.getValue();\n        assert(m.equals(po));\n    }", "signature": "void testFloodNoBufferId()", "full_signature": "@Test public void testFloodNoBufferId()", "class_method_signature": "HubTest.testFloodNoBufferId()", "testcase": true, "constructor": false, "invocations": ["setPacketData", "setInPort", "setBufferId", "setActionsLength", "setActions", "getMessage", "getOFMessageFactory", "asList", "setPort", "getValue", "setLengthU", "getActionsLengthU", "createMock", "write", "capture", "capture", "replay", "get", "get", "getListeners", "receive", "parseAndAnnotate", "verify", "assertTrue", "hasCaptured", "getValue", "equals"]}, "focal_class": {"identifier": "Hub", "superclass": "", "interfaces": "implements IFloodlightModule, IOFMessageListener", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(Hub.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Hub.class)", "var_name": "log"}, {"original_string": "protected IFloodlightProviderService floodlightProvider;", "modifier": "protected", "type": "IFloodlightProviderService", "declarator": "floodlightProvider", "var_name": "floodlightProvider"}], "methods": [{"identifier": "setFloodlightProvider", "parameters": "(IFloodlightProviderService floodlightProvider)", "modifiers": "public", "return": "void", "signature": "void setFloodlightProvider(IFloodlightProviderService floodlightProvider)", "full_signature": "public void setFloodlightProvider(IFloodlightProviderService floodlightProvider)", "class_method_signature": "Hub.setFloodlightProvider(IFloodlightProviderService floodlightProvider)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Hub.getName()", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "public", "return": "Command", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "Hub.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "Hub.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "Hub.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "Hub.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "Hub.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "Hub.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "Hub.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "Hub.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/hub/Hub.java"}, "focal_method": {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "public", "return": "Command", "body": "public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx) {\n        OFPacketIn pi = (OFPacketIn) msg;\n        OFPacketOut po = (OFPacketOut) floodlightProvider.getOFMessageFactory()\n                .getMessage(OFType.PACKET_OUT);\n        po.setBufferId(pi.getBufferId())\n            .setInPort(pi.getInPort());\n\n        // set actions\n        OFActionOutput action = new OFActionOutput()\n            .setPort((short) OFPort.OFPP_FLOOD.getValue());\n        po.setActions(Collections.singletonList((OFAction)action));\n        po.setActionsLength((short) OFActionOutput.MINIMUM_LENGTH);\n\n        // set data if is is included in the packetin\n        if (pi.getBufferId() == 0xffffffff) {\n            byte[] packetData = pi.getPacketData();\n            po.setLength(U16.t(OFPacketOut.MINIMUM_LENGTH\n                    + po.getActionsLength() + packetData.length));\n            po.setPacketData(packetData);\n        } else {\n            po.setLength(U16.t(OFPacketOut.MINIMUM_LENGTH\n                    + po.getActionsLength()));\n        }\n        try {\n            sw.write(po, cntx);\n        } catch (IOException e) {\n            log.error(\"Failure writing PacketOut\", e);\n        }\n\n        return Command.CONTINUE;\n    }", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "Hub.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false, "invocations": ["getMessage", "getOFMessageFactory", "setInPort", "setBufferId", "getBufferId", "getInPort", "setPort", "getValue", "setActions", "singletonList", "setActionsLength", "getBufferId", "getPacketData", "setLength", "t", "getActionsLength", "setPacketData", "setLength", "t", "getActionsLength", "write", "error"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}