{"test_class": {"identifier": "VariantManagerImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "iidm/iidm-impl/src/test/java/com/powsybl/iidm/network/impl/VariantManagerImplTest.java"}, "test_case": {"identifier": "testMultipleSetAllowMultiThreadTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleSetAllowMultiThreadTrue() throws Exception {\n        NetworkImpl network = (NetworkImpl) Network.create(\"testMultipleSetAllowMultiThreadTrue\", \"no-format\");\n        VariantManager variantManager = new VariantManagerImpl(network);\n        variantManager.allowVariantMultiThreadAccess(true);\n        CountDownLatch cdl1 = new CountDownLatch(1);\n        Exception[] exceptionThrown = new Exception[1];\n        (new Thread() {\n            public void run() {\n                try {\n                    variantManager.allowVariantMultiThreadAccess(true);\n                    exceptionThrown[0] = null;\n                } catch (Exception e) {\n                    exceptionThrown[0] = e;\n                } finally {\n                    cdl1.countDown();\n                }\n            }\n        }).start();\n        cdl1.await();\n        if (exceptionThrown[0] != null) {\n            throw new AssertionError(exceptionThrown[0]);\n        }\n    }", "signature": "void testMultipleSetAllowMultiThreadTrue()", "full_signature": "@Test public void testMultipleSetAllowMultiThreadTrue()", "class_method_signature": "VariantManagerImplTest.testMultipleSetAllowMultiThreadTrue()", "testcase": true, "constructor": false, "invocations": ["create", "allowVariantMultiThreadAccess", "start", "allowVariantMultiThreadAccess", "countDown", "await"]}, "focal_class": {"identifier": "VariantManagerImpl", "superclass": "", "interfaces": "implements VariantManager", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(VariantManagerImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(VariantManagerImpl.class)", "var_name": "LOGGER"}, {"original_string": "private static final int INITIAL_VARIANT_INDEX = 0;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_VARIANT_INDEX = 0", "var_name": "INITIAL_VARIANT_INDEX"}, {"original_string": "private VariantContext variantContext;", "modifier": "private", "type": "VariantContext", "declarator": "variantContext", "var_name": "variantContext"}, {"original_string": "private final NetworkIndex networkIndex;", "modifier": "private final", "type": "NetworkIndex", "declarator": "networkIndex", "var_name": "networkIndex"}, {"original_string": "private final BiMap<String, Integer> id2index = HashBiMap.create();", "modifier": "private final", "type": "BiMap<String, Integer>", "declarator": "id2index = HashBiMap.create()", "var_name": "id2index"}, {"original_string": "private int variantArraySize;", "modifier": "private", "type": "int", "declarator": "variantArraySize", "var_name": "variantArraySize"}, {"original_string": "private final Deque<Integer> unusedIndexes = new ArrayDeque<>();", "modifier": "private final", "type": "Deque<Integer>", "declarator": "unusedIndexes = new ArrayDeque<>()", "var_name": "unusedIndexes"}, {"original_string": "private final NetworkImpl network;", "modifier": "private final", "type": "NetworkImpl", "declarator": "network", "var_name": "network"}], "methods": [{"identifier": "VariantManagerImpl", "parameters": "(NetworkImpl network)", "modifiers": "", "return": "", "signature": " VariantManagerImpl(NetworkImpl network)", "full_signature": "  VariantManagerImpl(NetworkImpl network)", "class_method_signature": "VariantManagerImpl.VariantManagerImpl(NetworkImpl network)", "testcase": false, "constructor": true}, {"identifier": "getVariantContext", "parameters": "()", "modifiers": "", "return": "VariantContext", "signature": "VariantContext getVariantContext()", "full_signature": " VariantContext getVariantContext()", "class_method_signature": "VariantManagerImpl.getVariantContext()", "testcase": false, "constructor": false}, {"identifier": "getVariantIds", "parameters": "()", "modifiers": "@Override public", "return": "Collection<String>", "signature": "Collection<String> getVariantIds()", "full_signature": "@Override public Collection<String> getVariantIds()", "class_method_signature": "VariantManagerImpl.getVariantIds()", "testcase": false, "constructor": false}, {"identifier": "getVariantArraySize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getVariantArraySize()", "full_signature": "public int getVariantArraySize()", "class_method_signature": "VariantManagerImpl.getVariantArraySize()", "testcase": false, "constructor": false}, {"identifier": "getVariantCount", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getVariantCount()", "full_signature": " int getVariantCount()", "class_method_signature": "VariantManagerImpl.getVariantCount()", "testcase": false, "constructor": false}, {"identifier": "getVariantIndexes", "parameters": "()", "modifiers": "", "return": "Collection<Integer>", "signature": "Collection<Integer> getVariantIndexes()", "full_signature": " Collection<Integer> getVariantIndexes()", "class_method_signature": "VariantManagerImpl.getVariantIndexes()", "testcase": false, "constructor": false}, {"identifier": "getVariantIndex", "parameters": "(String variantId)", "modifiers": "private", "return": "int", "signature": "int getVariantIndex(String variantId)", "full_signature": "private int getVariantIndex(String variantId)", "class_method_signature": "VariantManagerImpl.getVariantIndex(String variantId)", "testcase": false, "constructor": false}, {"identifier": "getVariantId", "parameters": "(int variantIndex)", "modifiers": "public", "return": "String", "signature": "String getVariantId(int variantIndex)", "full_signature": "public String getVariantId(int variantIndex)", "class_method_signature": "VariantManagerImpl.getVariantId(int variantIndex)", "testcase": false, "constructor": false}, {"identifier": "getWorkingVariantId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getWorkingVariantId()", "full_signature": "@Override public String getWorkingVariantId()", "class_method_signature": "VariantManagerImpl.getWorkingVariantId()", "testcase": false, "constructor": false}, {"identifier": "setWorkingVariant", "parameters": "(String variantId)", "modifiers": "@Override public", "return": "void", "signature": "void setWorkingVariant(String variantId)", "full_signature": "@Override public void setWorkingVariant(String variantId)", "class_method_signature": "VariantManagerImpl.setWorkingVariant(String variantId)", "testcase": false, "constructor": false}, {"identifier": "getStafulObjects", "parameters": "()", "modifiers": "private", "return": "Iterable<MultiVariantObject>", "signature": "Iterable<MultiVariantObject> getStafulObjects()", "full_signature": "private Iterable<MultiVariantObject> getStafulObjects()", "class_method_signature": "VariantManagerImpl.getStafulObjects()", "testcase": false, "constructor": false}, {"identifier": "cloneVariant", "parameters": "(String sourceVariantId, String targetVariantId)", "modifiers": "@Override public", "return": "void", "signature": "void cloneVariant(String sourceVariantId, String targetVariantId)", "full_signature": "@Override public void cloneVariant(String sourceVariantId, String targetVariantId)", "class_method_signature": "VariantManagerImpl.cloneVariant(String sourceVariantId, String targetVariantId)", "testcase": false, "constructor": false}, {"identifier": "cloneVariant", "parameters": "(String sourceVariantId, String targetVariantId, boolean mayOverwrite)", "modifiers": "@Override public", "return": "void", "signature": "void cloneVariant(String sourceVariantId, String targetVariantId, boolean mayOverwrite)", "full_signature": "@Override public void cloneVariant(String sourceVariantId, String targetVariantId, boolean mayOverwrite)", "class_method_signature": "VariantManagerImpl.cloneVariant(String sourceVariantId, String targetVariantId, boolean mayOverwrite)", "testcase": false, "constructor": false}, {"identifier": "cloneVariant", "parameters": "(String sourceVariantId, List<String> targetVariantIds)", "modifiers": "@Override public", "return": "void", "signature": "void cloneVariant(String sourceVariantId, List<String> targetVariantIds)", "full_signature": "@Override public void cloneVariant(String sourceVariantId, List<String> targetVariantIds)", "class_method_signature": "VariantManagerImpl.cloneVariant(String sourceVariantId, List<String> targetVariantIds)", "testcase": false, "constructor": false}, {"identifier": "cloneVariant", "parameters": "(String sourceVariantId, List<String> targetVariantIds, boolean mayOverwrite)", "modifiers": "@Override public", "return": "void", "signature": "void cloneVariant(String sourceVariantId, List<String> targetVariantIds, boolean mayOverwrite)", "full_signature": "@Override public void cloneVariant(String sourceVariantId, List<String> targetVariantIds, boolean mayOverwrite)", "class_method_signature": "VariantManagerImpl.cloneVariant(String sourceVariantId, List<String> targetVariantIds, boolean mayOverwrite)", "testcase": false, "constructor": false}, {"identifier": "allocateVariantArrayElements", "parameters": "(Integer sourceIndex, List<Integer> recycled, List<Integer> overwritten)", "modifiers": "private", "return": "void", "signature": "void allocateVariantArrayElements(Integer sourceIndex, List<Integer> recycled, List<Integer> overwritten)", "full_signature": "private void allocateVariantArrayElements(Integer sourceIndex, List<Integer> recycled, List<Integer> overwritten)", "class_method_signature": "VariantManagerImpl.allocateVariantArrayElements(Integer sourceIndex, List<Integer> recycled, List<Integer> overwritten)", "testcase": false, "constructor": false}, {"identifier": "removeVariant", "parameters": "(String variantId)", "modifiers": "@Override public", "return": "void", "signature": "void removeVariant(String variantId)", "full_signature": "@Override public void removeVariant(String variantId)", "class_method_signature": "VariantManagerImpl.removeVariant(String variantId)", "testcase": false, "constructor": false}, {"identifier": "allowVariantMultiThreadAccess", "parameters": "(boolean allow)", "modifiers": "@Override public", "return": "void", "signature": "void allowVariantMultiThreadAccess(boolean allow)", "full_signature": "@Override public void allowVariantMultiThreadAccess(boolean allow)", "class_method_signature": "VariantManagerImpl.allowVariantMultiThreadAccess(boolean allow)", "testcase": false, "constructor": false}, {"identifier": "isVariantMultiThreadAccessAllowed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isVariantMultiThreadAccessAllowed()", "full_signature": "@Override public boolean isVariantMultiThreadAccessAllowed()", "class_method_signature": "VariantManagerImpl.isVariantMultiThreadAccessAllowed()", "testcase": false, "constructor": false}, {"identifier": "forEachVariant", "parameters": "(Runnable r)", "modifiers": "", "return": "void", "signature": "void forEachVariant(Runnable r)", "full_signature": " void forEachVariant(Runnable r)", "class_method_signature": "VariantManagerImpl.forEachVariant(Runnable r)", "testcase": false, "constructor": false}], "file": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/VariantManagerImpl.java"}, "focal_method": {"identifier": "allowVariantMultiThreadAccess", "parameters": "(boolean allow)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void allowVariantMultiThreadAccess(boolean allow) {\n        if (allow && !(variantContext instanceof ThreadLocalMultiVariantContext)) {\n            VariantContext newVariantContext = new ThreadLocalMultiVariantContext();\n            // For multithreaded VariantContext, don't set the variantIndex to a default\n            // value if it is not set, so that missing initializations fail fast.\n            if (variantContext.isIndexSet()) {\n                newVariantContext.setVariantIndex(variantContext.getVariantIndex());\n            }\n            variantContext = newVariantContext;\n        } else if (!allow && !(variantContext instanceof MultiVariantContext)) {\n            if (variantContext.isIndexSet()) {\n                variantContext = new MultiVariantContext(variantContext.getVariantIndex());\n            } else {\n                // For singlethreaded VariantContext, set the variantIndex to a default value\n                // if it is not set, because missing initialization error are rare.\n                variantContext = new MultiVariantContext(INITIAL_VARIANT_INDEX);\n            }\n        }\n    }", "signature": "void allowVariantMultiThreadAccess(boolean allow)", "full_signature": "@Override public void allowVariantMultiThreadAccess(boolean allow)", "class_method_signature": "VariantManagerImpl.allowVariantMultiThreadAccess(boolean allow)", "testcase": false, "constructor": false, "invocations": ["isIndexSet", "setVariantIndex", "getVariantIndex", "isIndexSet", "getVariantIndex"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}