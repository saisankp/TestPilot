{"test_class": {"identifier": "FixedIntervalTokenBucketSupplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SettableConfig settableConfig = new DefaultSettableConfig();", "modifier": "private final", "type": "SettableConfig", "declarator": "settableConfig = new DefaultSettableConfig()", "var_name": "settableConfig"}, {"original_string": "private final FixedIntervalTokenBucketConfiguration configuration = Archaius2Ext.newConfiguration(\n            FixedIntervalTokenBucketConfiguration.class, \"junit\", settableConfig\n    );", "modifier": "private final", "type": "FixedIntervalTokenBucketConfiguration", "declarator": "configuration = Archaius2Ext.newConfiguration(\n            FixedIntervalTokenBucketConfiguration.class, \"junit\", settableConfig\n    )", "var_name": "configuration"}, {"original_string": "private final List<TokenBucket> buckets = new ArrayList<>();", "modifier": "private final", "type": "List<TokenBucket>", "declarator": "buckets = new ArrayList<>()", "var_name": "buckets"}, {"original_string": "private final FixedIntervalTokenBucketSupplier supplier = new FixedIntervalTokenBucketSupplier(\n            \"junit\",\n            configuration,\n            buckets::add,\n            Optional.of(TitusRuntimes.internal())\n    );", "modifier": "private final", "type": "FixedIntervalTokenBucketSupplier", "declarator": "supplier = new FixedIntervalTokenBucketSupplier(\n            \"junit\",\n            configuration,\n            buckets::add,\n            Optional.of(TitusRuntimes.internal())\n    )", "var_name": "supplier"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/limiter/tokenbucket/internal/FixedIntervalTokenBucketSupplierTest.java"}, "test_case": {"identifier": "testTokenBucketIsRecreatedIfConfigurationChanges", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTokenBucketIsRecreatedIfConfigurationChanges() {\n        settableConfig.setProperty(\"junit.initialNumberOfTokens\", \"1\");\n        settableConfig.setProperty(\"junit.capacity\", \"1\");\n        settableConfig.setProperty(\"junit.numberOfTokensPerInterval\", \"0\");\n        TokenBucket first = supplier.get();\n\n        assertThat(first.tryTake()).isTrue();\n        assertThat(first.tryTake()).isFalse();\n\n        settableConfig.setProperty(\"junit.initialNumberOfTokens\", \"2\");\n        settableConfig.setProperty(\"junit.capacity\", \"2\");\n        TokenBucket second = supplier.get();\n        assertThat(first != second).isTrue();\n\n        assertThat(second.tryTake()).isTrue();\n        assertThat(second.tryTake()).isTrue();\n        assertThat(second.tryTake()).isFalse();\n\n        assertThat(buckets).hasSize(3);\n        assertThat(buckets.get(1)).isEqualTo(first);\n        assertThat(buckets.get(2)).isEqualTo(second);\n    }", "signature": "void testTokenBucketIsRecreatedIfConfigurationChanges()", "full_signature": "@Test public void testTokenBucketIsRecreatedIfConfigurationChanges()", "class_method_signature": "FixedIntervalTokenBucketSupplierTest.testTokenBucketIsRecreatedIfConfigurationChanges()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "get", "isTrue", "assertThat", "tryTake", "isFalse", "assertThat", "tryTake", "setProperty", "setProperty", "get", "isTrue", "assertThat", "isTrue", "assertThat", "tryTake", "isTrue", "assertThat", "tryTake", "isFalse", "assertThat", "tryTake", "hasSize", "assertThat", "isEqualTo", "assertThat", "get", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "FixedIntervalTokenBucketSupplier", "superclass": "", "interfaces": "implements Supplier<TokenBucket>", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final FixedIntervalTokenBucketConfiguration configuration;", "modifier": "private final", "type": "FixedIntervalTokenBucketConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final Consumer<TokenBucket> onChangeListener;", "modifier": "private final", "type": "Consumer<TokenBucket>", "declarator": "onChangeListener", "var_name": "onChangeListener"}, {"original_string": "private final Optional<TitusRuntime> titusRuntime;", "modifier": "private final", "type": "Optional<TitusRuntime>", "declarator": "titusRuntime", "var_name": "titusRuntime"}, {"original_string": "private volatile ActiveConfiguration activeConfiguration;", "modifier": "private volatile", "type": "ActiveConfiguration", "declarator": "activeConfiguration", "var_name": "activeConfiguration"}, {"original_string": "private final Object lock = new Object();", "modifier": "private final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}], "methods": [{"identifier": "FixedIntervalTokenBucketSupplier", "parameters": "(String name,\n                                            FixedIntervalTokenBucketConfiguration configuration,\n                                            Consumer<TokenBucket> onChangeListener,\n                                            Optional<TitusRuntime> titusRuntime)", "modifiers": "public", "return": "", "signature": " FixedIntervalTokenBucketSupplier(String name,\n                                            FixedIntervalTokenBucketConfiguration configuration,\n                                            Consumer<TokenBucket> onChangeListener,\n                                            Optional<TitusRuntime> titusRuntime)", "full_signature": "public  FixedIntervalTokenBucketSupplier(String name,\n                                            FixedIntervalTokenBucketConfiguration configuration,\n                                            Consumer<TokenBucket> onChangeListener,\n                                            Optional<TitusRuntime> titusRuntime)", "class_method_signature": "FixedIntervalTokenBucketSupplier.FixedIntervalTokenBucketSupplier(String name,\n                                            FixedIntervalTokenBucketConfiguration configuration,\n                                            Consumer<TokenBucket> onChangeListener,\n                                            Optional<TitusRuntime> titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "TokenBucket", "signature": "TokenBucket get()", "full_signature": "@Override public TokenBucket get()", "class_method_signature": "FixedIntervalTokenBucketSupplier.get()", "testcase": false, "constructor": false}, {"identifier": "isSame", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSame()", "full_signature": "private boolean isSame()", "class_method_signature": "FixedIntervalTokenBucketSupplier.isSame()", "testcase": false, "constructor": false}, {"identifier": "reload", "parameters": "()", "modifiers": "private", "return": "ActiveConfiguration", "signature": "ActiveConfiguration reload()", "full_signature": "private ActiveConfiguration reload()", "class_method_signature": "FixedIntervalTokenBucketSupplier.reload()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/limiter/tokenbucket/internal/FixedIntervalTokenBucketSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "TokenBucket", "body": "@Override\n    public TokenBucket get() {\n        return isSame() ? activeConfiguration.getTokenBucket() : reload().getTokenBucket();\n    }", "signature": "TokenBucket get()", "full_signature": "@Override public TokenBucket get()", "class_method_signature": "FixedIntervalTokenBucketSupplier.get()", "testcase": false, "constructor": false, "invocations": ["isSame", "getTokenBucket", "getTokenBucket", "reload"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}