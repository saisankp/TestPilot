{"test_class": {"identifier": "DefaultConfigParamsImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/DefaultConfigParamsImplTest.java"}, "test_case": {"identifier": "testGetRaftPolicyWithDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetRaftPolicyWithDefault() {\n        DefaultConfigParamsImpl params = new DefaultConfigParamsImpl();\n\n        assertEquals(\"Default instance\", DefaultRaftPolicy.INSTANCE, params.getRaftPolicy());\n    }", "signature": "void testGetRaftPolicyWithDefault()", "full_signature": "@Test public void testGetRaftPolicyWithDefault()", "class_method_signature": "DefaultConfigParamsImplTest.testGetRaftPolicyWithDefault()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getRaftPolicy"]}, "focal_class": {"identifier": "DefaultConfigParamsImpl", "superclass": "", "interfaces": "implements ConfigParams", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultConfigParamsImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultConfigParamsImpl.class)", "var_name": "LOG"}, {"original_string": "private static final int SNAPSHOT_BATCH_COUNT = 20000;", "modifier": "private static final", "type": "int", "declarator": "SNAPSHOT_BATCH_COUNT = 20000", "var_name": "SNAPSHOT_BATCH_COUNT"}, {"original_string": "private static final int RECOVERY_SNAPSHOT_INTERVAL_SECONDS = 0;", "modifier": "private static final", "type": "int", "declarator": "RECOVERY_SNAPSHOT_INTERVAL_SECONDS = 0", "var_name": "RECOVERY_SNAPSHOT_INTERVAL_SECONDS"}, {"original_string": "private static final int JOURNAL_RECOVERY_LOG_BATCH_SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "JOURNAL_RECOVERY_LOG_BATCH_SIZE = 1000", "var_name": "JOURNAL_RECOVERY_LOG_BATCH_SIZE"}, {"original_string": "private static final int ELECTION_TIME_MAX_VARIANCE = 100;", "modifier": "private static final", "type": "int", "declarator": "ELECTION_TIME_MAX_VARIANCE = 100", "var_name": "ELECTION_TIME_MAX_VARIANCE"}, {"original_string": "private static final int SNAPSHOT_CHUNK_SIZE = 2048 * 1000;", "modifier": "private static final", "type": "int", "declarator": "SNAPSHOT_CHUNK_SIZE = 2048 * 1000", "var_name": "SNAPSHOT_CHUNK_SIZE"}, {"original_string": "public static final FiniteDuration HEART_BEAT_INTERVAL =\n        new FiniteDuration(100, TimeUnit.MILLISECONDS);", "modifier": "public static final", "type": "FiniteDuration", "declarator": "HEART_BEAT_INTERVAL =\n        new FiniteDuration(100, TimeUnit.MILLISECONDS)", "var_name": "HEART_BEAT_INTERVAL"}, {"original_string": "private final Supplier<RaftPolicy> policySupplier = Suppliers.memoize(this::getPolicy);", "modifier": "private final", "type": "Supplier<RaftPolicy>", "declarator": "policySupplier = Suppliers.memoize(this::getPolicy)", "var_name": "policySupplier"}, {"original_string": "private FiniteDuration heartBeatInterval = HEART_BEAT_INTERVAL;", "modifier": "private", "type": "FiniteDuration", "declarator": "heartBeatInterval = HEART_BEAT_INTERVAL", "var_name": "heartBeatInterval"}, {"original_string": "private long snapshotBatchCount = SNAPSHOT_BATCH_COUNT;", "modifier": "private", "type": "long", "declarator": "snapshotBatchCount = SNAPSHOT_BATCH_COUNT", "var_name": "snapshotBatchCount"}, {"original_string": "private int journalRecoveryLogBatchSize = JOURNAL_RECOVERY_LOG_BATCH_SIZE;", "modifier": "private", "type": "int", "declarator": "journalRecoveryLogBatchSize = JOURNAL_RECOVERY_LOG_BATCH_SIZE", "var_name": "journalRecoveryLogBatchSize"}, {"original_string": "private int recoverySnapshotIntervalSeconds = RECOVERY_SNAPSHOT_INTERVAL_SECONDS;", "modifier": "private", "type": "int", "declarator": "recoverySnapshotIntervalSeconds = RECOVERY_SNAPSHOT_INTERVAL_SECONDS", "var_name": "recoverySnapshotIntervalSeconds"}, {"original_string": "private long isolatedLeaderCheckInterval = HEART_BEAT_INTERVAL.$times(1000).toMillis();", "modifier": "private", "type": "long", "declarator": "isolatedLeaderCheckInterval = HEART_BEAT_INTERVAL.$times(1000).toMillis()", "var_name": "isolatedLeaderCheckInterval"}, {"original_string": "private FiniteDuration electionTimeOutInterval;", "modifier": "private", "type": "FiniteDuration", "declarator": "electionTimeOutInterval", "var_name": "electionTimeOutInterval"}, {"original_string": "private int snapshotDataThresholdPercentage = 12;", "modifier": "private", "type": "int", "declarator": "snapshotDataThresholdPercentage = 12", "var_name": "snapshotDataThresholdPercentage"}, {"original_string": "private int snapshotDataThreshold = 0;", "modifier": "private", "type": "int", "declarator": "snapshotDataThreshold = 0", "var_name": "snapshotDataThreshold"}, {"original_string": "private int snapshotChunkSize = SNAPSHOT_CHUNK_SIZE;", "modifier": "private", "type": "int", "declarator": "snapshotChunkSize = SNAPSHOT_CHUNK_SIZE", "var_name": "snapshotChunkSize"}, {"original_string": "private long electionTimeoutFactor = 2;", "modifier": "private", "type": "long", "declarator": "electionTimeoutFactor = 2", "var_name": "electionTimeoutFactor"}, {"original_string": "private long candidateElectionTimeoutDivisor = 1;", "modifier": "private", "type": "long", "declarator": "candidateElectionTimeoutDivisor = 1", "var_name": "candidateElectionTimeoutDivisor"}, {"original_string": "private String customRaftPolicyImplementationClass;", "modifier": "private", "type": "String", "declarator": "customRaftPolicyImplementationClass", "var_name": "customRaftPolicyImplementationClass"}, {"original_string": "private PeerAddressResolver peerAddressResolver = NoopPeerAddressResolver.INSTANCE;", "modifier": "private", "type": "PeerAddressResolver", "declarator": "peerAddressResolver = NoopPeerAddressResolver.INSTANCE", "var_name": "peerAddressResolver"}, {"original_string": "private String tempFileDirectory = \"\";", "modifier": "private", "type": "String", "declarator": "tempFileDirectory = \"\"", "var_name": "tempFileDirectory"}, {"original_string": "private int fileBackedStreamingThreshold = 128 * MEGABYTE;", "modifier": "private", "type": "int", "declarator": "fileBackedStreamingThreshold = 128 * MEGABYTE", "var_name": "fileBackedStreamingThreshold"}, {"original_string": "private long syncIndexThreshold = 10;", "modifier": "private", "type": "long", "declarator": "syncIndexThreshold = 10", "var_name": "syncIndexThreshold"}], "methods": [{"identifier": "setHeartBeatInterval", "parameters": "(final FiniteDuration heartBeatInterval)", "modifiers": "public", "return": "void", "signature": "void setHeartBeatInterval(final FiniteDuration heartBeatInterval)", "full_signature": "public void setHeartBeatInterval(final FiniteDuration heartBeatInterval)", "class_method_signature": "DefaultConfigParamsImpl.setHeartBeatInterval(final FiniteDuration heartBeatInterval)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotBatchCount", "parameters": "(final long snapshotBatchCount)", "modifiers": "public", "return": "void", "signature": "void setSnapshotBatchCount(final long snapshotBatchCount)", "full_signature": "public void setSnapshotBatchCount(final long snapshotBatchCount)", "class_method_signature": "DefaultConfigParamsImpl.setSnapshotBatchCount(final long snapshotBatchCount)", "testcase": false, "constructor": false}, {"identifier": "setRecoverySnapshotIntervalSeconds", "parameters": "(int recoverySnapshotInterval)", "modifiers": "public", "return": "void", "signature": "void setRecoverySnapshotIntervalSeconds(int recoverySnapshotInterval)", "full_signature": "public void setRecoverySnapshotIntervalSeconds(int recoverySnapshotInterval)", "class_method_signature": "DefaultConfigParamsImpl.setRecoverySnapshotIntervalSeconds(int recoverySnapshotInterval)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotDataThresholdPercentage", "parameters": "(final int snapshotDataThresholdPercentage)", "modifiers": "public", "return": "void", "signature": "void setSnapshotDataThresholdPercentage(final int snapshotDataThresholdPercentage)", "full_signature": "public void setSnapshotDataThresholdPercentage(final int snapshotDataThresholdPercentage)", "class_method_signature": "DefaultConfigParamsImpl.setSnapshotDataThresholdPercentage(final int snapshotDataThresholdPercentage)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotDataThreshold", "parameters": "(final int snapshotDataThreshold)", "modifiers": "public", "return": "void", "signature": "void setSnapshotDataThreshold(final int snapshotDataThreshold)", "full_signature": "public void setSnapshotDataThreshold(final int snapshotDataThreshold)", "class_method_signature": "DefaultConfigParamsImpl.setSnapshotDataThreshold(final int snapshotDataThreshold)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotChunkSize", "parameters": "(final int snapshotChunkSize)", "modifiers": "public", "return": "void", "signature": "void setSnapshotChunkSize(final int snapshotChunkSize)", "full_signature": "public void setSnapshotChunkSize(final int snapshotChunkSize)", "class_method_signature": "DefaultConfigParamsImpl.setSnapshotChunkSize(final int snapshotChunkSize)", "testcase": false, "constructor": false}, {"identifier": "setJournalRecoveryLogBatchSize", "parameters": "(final int journalRecoveryLogBatchSize)", "modifiers": "public", "return": "void", "signature": "void setJournalRecoveryLogBatchSize(final int journalRecoveryLogBatchSize)", "full_signature": "public void setJournalRecoveryLogBatchSize(final int journalRecoveryLogBatchSize)", "class_method_signature": "DefaultConfigParamsImpl.setJournalRecoveryLogBatchSize(final int journalRecoveryLogBatchSize)", "testcase": false, "constructor": false}, {"identifier": "setIsolatedLeaderCheckInterval", "parameters": "(final FiniteDuration isolatedLeaderCheckInterval)", "modifiers": "public", "return": "void", "signature": "void setIsolatedLeaderCheckInterval(final FiniteDuration isolatedLeaderCheckInterval)", "full_signature": "public void setIsolatedLeaderCheckInterval(final FiniteDuration isolatedLeaderCheckInterval)", "class_method_signature": "DefaultConfigParamsImpl.setIsolatedLeaderCheckInterval(final FiniteDuration isolatedLeaderCheckInterval)", "testcase": false, "constructor": false}, {"identifier": "setElectionTimeoutFactor", "parameters": "(final long electionTimeoutFactor)", "modifiers": "public", "return": "void", "signature": "void setElectionTimeoutFactor(final long electionTimeoutFactor)", "full_signature": "public void setElectionTimeoutFactor(final long electionTimeoutFactor)", "class_method_signature": "DefaultConfigParamsImpl.setElectionTimeoutFactor(final long electionTimeoutFactor)", "testcase": false, "constructor": false}, {"identifier": "setCandidateElectionTimeoutDivisor", "parameters": "(final long candidateElectionTimeoutDivisor)", "modifiers": "public", "return": "void", "signature": "void setCandidateElectionTimeoutDivisor(final long candidateElectionTimeoutDivisor)", "full_signature": "public void setCandidateElectionTimeoutDivisor(final long candidateElectionTimeoutDivisor)", "class_method_signature": "DefaultConfigParamsImpl.setCandidateElectionTimeoutDivisor(final long candidateElectionTimeoutDivisor)", "testcase": false, "constructor": false}, {"identifier": "setTempFileDirectory", "parameters": "(final String tempFileDirectory)", "modifiers": "public", "return": "void", "signature": "void setTempFileDirectory(final String tempFileDirectory)", "full_signature": "public void setTempFileDirectory(final String tempFileDirectory)", "class_method_signature": "DefaultConfigParamsImpl.setTempFileDirectory(final String tempFileDirectory)", "testcase": false, "constructor": false}, {"identifier": "setFileBackedStreamingThreshold", "parameters": "(final int fileBackedStreamingThreshold)", "modifiers": "public", "return": "void", "signature": "void setFileBackedStreamingThreshold(final int fileBackedStreamingThreshold)", "full_signature": "public void setFileBackedStreamingThreshold(final int fileBackedStreamingThreshold)", "class_method_signature": "DefaultConfigParamsImpl.setFileBackedStreamingThreshold(final int fileBackedStreamingThreshold)", "testcase": false, "constructor": false}, {"identifier": "setCustomRaftPolicyImplementationClass", "parameters": "(final String customRaftPolicyImplementationClass)", "modifiers": "public", "return": "void", "signature": "void setCustomRaftPolicyImplementationClass(final String customRaftPolicyImplementationClass)", "full_signature": "public void setCustomRaftPolicyImplementationClass(final String customRaftPolicyImplementationClass)", "class_method_signature": "DefaultConfigParamsImpl.setCustomRaftPolicyImplementationClass(final String customRaftPolicyImplementationClass)", "testcase": false, "constructor": false}, {"identifier": "getCustomRaftPolicyImplementationClass", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCustomRaftPolicyImplementationClass()", "full_signature": "@Override public String getCustomRaftPolicyImplementationClass()", "class_method_signature": "DefaultConfigParamsImpl.getCustomRaftPolicyImplementationClass()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotBatchCount", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSnapshotBatchCount()", "full_signature": "@Override public long getSnapshotBatchCount()", "class_method_signature": "DefaultConfigParamsImpl.getSnapshotBatchCount()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotDataThresholdPercentage", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSnapshotDataThresholdPercentage()", "full_signature": "@Override public int getSnapshotDataThresholdPercentage()", "class_method_signature": "DefaultConfigParamsImpl.getSnapshotDataThresholdPercentage()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotDataThreshold", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSnapshotDataThreshold()", "full_signature": "@Override public int getSnapshotDataThreshold()", "class_method_signature": "DefaultConfigParamsImpl.getSnapshotDataThreshold()", "testcase": false, "constructor": false}, {"identifier": "getRecoverySnapshotIntervalSeconds", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRecoverySnapshotIntervalSeconds()", "full_signature": "@Override public int getRecoverySnapshotIntervalSeconds()", "class_method_signature": "DefaultConfigParamsImpl.getRecoverySnapshotIntervalSeconds()", "testcase": false, "constructor": false}, {"identifier": "getHeartBeatInterval", "parameters": "()", "modifiers": "@Override public", "return": "FiniteDuration", "signature": "FiniteDuration getHeartBeatInterval()", "full_signature": "@Override public FiniteDuration getHeartBeatInterval()", "class_method_signature": "DefaultConfigParamsImpl.getHeartBeatInterval()", "testcase": false, "constructor": false}, {"identifier": "getElectionTimeOutInterval", "parameters": "()", "modifiers": "@Override public", "return": "FiniteDuration", "signature": "FiniteDuration getElectionTimeOutInterval()", "full_signature": "@Override public FiniteDuration getElectionTimeOutInterval()", "class_method_signature": "DefaultConfigParamsImpl.getElectionTimeOutInterval()", "testcase": false, "constructor": false}, {"identifier": "getCandidateElectionTimeoutDivisor", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCandidateElectionTimeoutDivisor()", "full_signature": "@Override public long getCandidateElectionTimeoutDivisor()", "class_method_signature": "DefaultConfigParamsImpl.getCandidateElectionTimeoutDivisor()", "testcase": false, "constructor": false}, {"identifier": "getElectionTimeVariance", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getElectionTimeVariance()", "full_signature": "@Override public int getElectionTimeVariance()", "class_method_signature": "DefaultConfigParamsImpl.getElectionTimeVariance()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotChunkSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSnapshotChunkSize()", "full_signature": "@Override public int getSnapshotChunkSize()", "class_method_signature": "DefaultConfigParamsImpl.getSnapshotChunkSize()", "testcase": false, "constructor": false}, {"identifier": "getJournalRecoveryLogBatchSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getJournalRecoveryLogBatchSize()", "full_signature": "@Override public int getJournalRecoveryLogBatchSize()", "class_method_signature": "DefaultConfigParamsImpl.getJournalRecoveryLogBatchSize()", "testcase": false, "constructor": false}, {"identifier": "getIsolatedCheckIntervalInMillis", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getIsolatedCheckIntervalInMillis()", "full_signature": "@Override public long getIsolatedCheckIntervalInMillis()", "class_method_signature": "DefaultConfigParamsImpl.getIsolatedCheckIntervalInMillis()", "testcase": false, "constructor": false}, {"identifier": "getElectionTimeoutFactor", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getElectionTimeoutFactor()", "full_signature": "@Override public long getElectionTimeoutFactor()", "class_method_signature": "DefaultConfigParamsImpl.getElectionTimeoutFactor()", "testcase": false, "constructor": false}, {"identifier": "getRaftPolicy", "parameters": "()", "modifiers": "@Override public", "return": "RaftPolicy", "signature": "RaftPolicy getRaftPolicy()", "full_signature": "@Override public RaftPolicy getRaftPolicy()", "class_method_signature": "DefaultConfigParamsImpl.getRaftPolicy()", "testcase": false, "constructor": false}, {"identifier": "getTempFileDirectory", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getTempFileDirectory()", "full_signature": "@Override public String getTempFileDirectory()", "class_method_signature": "DefaultConfigParamsImpl.getTempFileDirectory()", "testcase": false, "constructor": false}, {"identifier": "getFileBackedStreamingThreshold", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getFileBackedStreamingThreshold()", "full_signature": "@Override public int getFileBackedStreamingThreshold()", "class_method_signature": "DefaultConfigParamsImpl.getFileBackedStreamingThreshold()", "testcase": false, "constructor": false}, {"identifier": "getPeerAddressResolver", "parameters": "()", "modifiers": "@Override public", "return": "PeerAddressResolver", "signature": "PeerAddressResolver getPeerAddressResolver()", "full_signature": "@Override public PeerAddressResolver getPeerAddressResolver()", "class_method_signature": "DefaultConfigParamsImpl.getPeerAddressResolver()", "testcase": false, "constructor": false}, {"identifier": "setPeerAddressResolver", "parameters": "(final @NonNull PeerAddressResolver peerAddressResolver)", "modifiers": "public", "return": "void", "signature": "void setPeerAddressResolver(final @NonNull PeerAddressResolver peerAddressResolver)", "full_signature": "public void setPeerAddressResolver(final @NonNull PeerAddressResolver peerAddressResolver)", "class_method_signature": "DefaultConfigParamsImpl.setPeerAddressResolver(final @NonNull PeerAddressResolver peerAddressResolver)", "testcase": false, "constructor": false}, {"identifier": "getSyncIndexThreshold", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSyncIndexThreshold()", "full_signature": "@Override public long getSyncIndexThreshold()", "class_method_signature": "DefaultConfigParamsImpl.getSyncIndexThreshold()", "testcase": false, "constructor": false}, {"identifier": "setSyncIndexThreshold", "parameters": "(final long syncIndexThreshold)", "modifiers": "public", "return": "void", "signature": "void setSyncIndexThreshold(final long syncIndexThreshold)", "full_signature": "public void setSyncIndexThreshold(final long syncIndexThreshold)", "class_method_signature": "DefaultConfigParamsImpl.setSyncIndexThreshold(final long syncIndexThreshold)", "testcase": false, "constructor": false}, {"identifier": "getPolicy", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "RaftPolicy", "signature": "RaftPolicy getPolicy()", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private RaftPolicy getPolicy()", "class_method_signature": "DefaultConfigParamsImpl.getPolicy()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/DefaultConfigParamsImpl.java"}, "focal_method": {"identifier": "getRaftPolicy", "parameters": "()", "modifiers": "@Override public", "return": "RaftPolicy", "body": "@Override\n    public RaftPolicy getRaftPolicy() {\n        return policySupplier.get();\n    }", "signature": "RaftPolicy getRaftPolicy()", "full_signature": "@Override public RaftPolicy getRaftPolicy()", "class_method_signature": "DefaultConfigParamsImpl.getRaftPolicy()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}