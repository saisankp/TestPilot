{"test_class": {"identifier": "SequenceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WilmaHttpRequest request;", "modifier": "private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private WilmaHttpResponse response;", "modifier": "private", "type": "WilmaHttpResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private final boolean isVolatile = false;", "modifier": "private final", "type": "boolean", "declarator": "isVolatile = false", "var_name": "isVolatile"}, {"original_string": "@Mock\n    private SequenceService sequenceService;", "modifier": "@Mock\n    private", "type": "SequenceService", "declarator": "sequenceService", "var_name": "sequenceService"}, {"original_string": "@Mock\n    private SequenceDescriptor sequenceDescriptor;", "modifier": "@Mock\n    private", "type": "SequenceDescriptor", "declarator": "sequenceDescriptor", "var_name": "sequenceDescriptor"}, {"original_string": "@Mock\n    private SequenceCleaner cleaner;", "modifier": "@Mock\n    private", "type": "SequenceCleaner", "declarator": "cleaner", "var_name": "cleaner"}, {"original_string": "@Mock\n    private WilmaHttpResponse clonedResponse;", "modifier": "@Mock\n    private", "type": "WilmaHttpResponse", "declarator": "clonedResponse", "var_name": "clonedResponse"}, {"original_string": "@Mock\n    private WilmaHttpResponseCloner responseCloner;", "modifier": "@Mock\n    private", "type": "WilmaHttpResponseCloner", "declarator": "responseCloner", "var_name": "responseCloner"}, {"original_string": "@Mock\n    private WilmaSequence sequence;", "modifier": "@Mock\n    private", "type": "WilmaSequence", "declarator": "sequence", "var_name": "sequence"}, {"original_string": "@Mock\n    private SequenceHeaderUtil headerUtil;", "modifier": "@Mock\n    private", "type": "SequenceHeaderUtil", "declarator": "headerUtil", "var_name": "headerUtil"}, {"original_string": "@Mock\n    private SequenceIdUtil sequenceKeyResolver;", "modifier": "@Mock\n    private", "type": "SequenceIdUtil", "declarator": "sequenceKeyResolver", "var_name": "sequenceKeyResolver"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@InjectMocks\n    private SequenceManager underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceManager", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-message-sequence/src/test/java/com/epam/wilma/sequence/SequenceManagerTest.java"}, "test_case": {"identifier": "testSetStatusOfDescriptors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetStatusOfDescriptors() {\n        //GIVEN\n        Map<String, SequenceDescriptor> descriptors = new ConcurrentHashMap<>();\n        descriptors.put(\"TestTeam-fistDescriptor-TestHandler\", sequenceDescriptor);\n        Whitebox.setInternalState(underTest, \"descriptors\", descriptors);\n        given(sequenceDescriptor.getGroupName()).willReturn(\"TestTeam\");\n        //WHEN\n        underTest.setStatusOfDescriptors(\"TestTeam\", false);\n        //THEN\n        verify(sequenceDescriptor).setActive(false);\n        verify(sequenceDescriptor).dropAllSequences();\n    }", "signature": "void testSetStatusOfDescriptors()", "full_signature": "@Test public void testSetStatusOfDescriptors()", "class_method_signature": "SequenceManagerTest.testSetStatusOfDescriptors()", "testcase": true, "constructor": false, "invocations": ["put", "setInternalState", "willReturn", "given", "getGroupName", "setStatusOfDescriptors", "setActive", "verify", "dropAllSequences", "verify"]}, "focal_class": {"identifier": "SequenceManager", "superclass": "", "interfaces": "implements SequenceDescriptorHolder", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(SequenceManager.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SequenceManager.class)", "var_name": "logger"}, {"original_string": "private final Map<String, SequenceDescriptor> descriptors = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, SequenceDescriptor>", "declarator": "descriptors = new ConcurrentHashMap<>()", "var_name": "descriptors"}, {"original_string": "@Autowired\n    private WilmaHttpResponseCloner responseCloner;", "modifier": "@Autowired\n    private", "type": "WilmaHttpResponseCloner", "declarator": "responseCloner", "var_name": "responseCloner"}, {"original_string": "@Autowired\n    private SequenceService sequenceService;", "modifier": "@Autowired\n    private", "type": "SequenceService", "declarator": "sequenceService", "var_name": "sequenceService"}, {"original_string": "@Autowired\n    private SequenceCleaner cleaner;", "modifier": "@Autowired\n    private", "type": "SequenceCleaner", "declarator": "cleaner", "var_name": "cleaner"}, {"original_string": "@Autowired\n    private SequenceHeaderUtil headerUtil;", "modifier": "@Autowired\n    private", "type": "SequenceHeaderUtil", "declarator": "headerUtil", "var_name": "headerUtil"}, {"original_string": "@Autowired\n    private SequenceDescriptorKeyUtil sequenceDescriptorKeyUtil;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorKeyUtil", "declarator": "sequenceDescriptorKeyUtil", "var_name": "sequenceDescriptorKeyUtil"}, {"original_string": "@Autowired\n    private SequenceIdUtil sequenceIdUtil;", "modifier": "@Autowired\n    private", "type": "SequenceIdUtil", "declarator": "sequenceIdUtil", "var_name": "sequenceIdUtil"}], "methods": [{"identifier": "handleRequest", "parameters": "(final WilmaHttpRequest request)", "modifiers": "public", "return": "void", "signature": "void handleRequest(final WilmaHttpRequest request)", "full_signature": "public void handleRequest(final WilmaHttpRequest request)", "class_method_signature": "SequenceManager.handleRequest(final WilmaHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "cleanUpDescriptors", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanUpDescriptors()", "full_signature": "public void cleanUpDescriptors()", "class_method_signature": "SequenceManager.cleanUpDescriptors()", "testcase": false, "constructor": false}, {"identifier": "addSequenceDescriptor", "parameters": "(final String descriptorKey, final SequenceDescriptor descriptor)", "modifiers": "public", "return": "void", "signature": "void addSequenceDescriptor(final String descriptorKey, final SequenceDescriptor descriptor)", "full_signature": "public void addSequenceDescriptor(final String descriptorKey, final SequenceDescriptor descriptor)", "class_method_signature": "SequenceManager.addSequenceDescriptor(final String descriptorKey, final SequenceDescriptor descriptor)", "testcase": false, "constructor": false}, {"identifier": "removeSequenceDescriptors", "parameters": "(final String groupName)", "modifiers": "public", "return": "void", "signature": "void removeSequenceDescriptors(final String groupName)", "full_signature": "public void removeSequenceDescriptors(final String groupName)", "class_method_signature": "SequenceManager.removeSequenceDescriptors(final String groupName)", "testcase": false, "constructor": false}, {"identifier": "setStatusOfDescriptors", "parameters": "(final String groupName, final boolean newStatus)", "modifiers": "public", "return": "void", "signature": "void setStatusOfDescriptors(final String groupName, final boolean newStatus)", "full_signature": "public void setStatusOfDescriptors(final String groupName, final boolean newStatus)", "class_method_signature": "SequenceManager.setStatusOfDescriptors(final String groupName, final boolean newStatus)", "testcase": false, "constructor": false}, {"identifier": "dropAllSequences", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dropAllSequences()", "full_signature": "public void dropAllSequences()", "class_method_signature": "SequenceManager.dropAllSequences()", "testcase": false, "constructor": false}, {"identifier": "tryToSaveResponseIntoSequence", "parameters": "(final WilmaHttpResponse response)", "modifiers": "public", "return": "void", "signature": "void tryToSaveResponseIntoSequence(final WilmaHttpResponse response)", "full_signature": "public void tryToSaveResponseIntoSequence(final WilmaHttpResponse response)", "class_method_signature": "SequenceManager.tryToSaveResponseIntoSequence(final WilmaHttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "addResponseToSequence", "parameters": "(final String sequenceId, final WilmaHttpResponse response)", "modifiers": "private", "return": "void", "signature": "void addResponseToSequence(final String sequenceId, final WilmaHttpResponse response)", "full_signature": "private void addResponseToSequence(final String sequenceId, final WilmaHttpResponse response)", "class_method_signature": "SequenceManager.addResponseToSequence(final String sequenceId, final WilmaHttpResponse response)", "testcase": false, "constructor": false}, {"identifier": "getSequences", "parameters": "(final String sequenceDescriptorName)", "modifiers": "public", "return": "Map<String, WilmaSequence>", "signature": "Map<String, WilmaSequence> getSequences(final String sequenceDescriptorName)", "full_signature": "public Map<String, WilmaSequence> getSequences(final String sequenceDescriptorName)", "class_method_signature": "SequenceManager.getSequences(final String sequenceDescriptorName)", "testcase": false, "constructor": false}, {"identifier": "addAllSequenceDescriptors", "parameters": "(final StubDescriptor stubDescriptor)", "modifiers": "@Override public", "return": "void", "signature": "void addAllSequenceDescriptors(final StubDescriptor stubDescriptor)", "full_signature": "@Override public void addAllSequenceDescriptors(final StubDescriptor stubDescriptor)", "class_method_signature": "SequenceManager.addAllSequenceDescriptors(final StubDescriptor stubDescriptor)", "testcase": false, "constructor": false}, {"identifier": "getDescriptors", "parameters": "()", "modifiers": "public", "return": "Map<String, SequenceDescriptor>", "signature": "Map<String, SequenceDescriptor> getDescriptors()", "full_signature": "public Map<String, SequenceDescriptor> getDescriptors()", "class_method_signature": "SequenceManager.getDescriptors()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-message-sequence/src/main/java/com/epam/wilma/sequence/SequenceManager.java"}, "focal_method": {"identifier": "setStatusOfDescriptors", "parameters": "(final String groupName, final boolean newStatus)", "modifiers": "public", "return": "void", "body": "public void setStatusOfDescriptors(final String groupName, final boolean newStatus) {\n        for (SequenceDescriptor descriptor : descriptors.values()) {\n            if (groupName.equals(descriptor.getGroupName())) {\n                descriptor.setActive(newStatus);\n                if (!newStatus) {\n                    descriptor.dropAllSequences();\n                }\n            }\n        }\n    }", "signature": "void setStatusOfDescriptors(final String groupName, final boolean newStatus)", "full_signature": "public void setStatusOfDescriptors(final String groupName, final boolean newStatus)", "class_method_signature": "SequenceManager.setStatusOfDescriptors(final String groupName, final boolean newStatus)", "testcase": false, "constructor": false, "invocations": ["values", "equals", "getGroupName", "setActive", "dropAllSequences"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}