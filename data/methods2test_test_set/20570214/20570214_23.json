{"test_class": {"identifier": "AesGcmSivTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Integer[] keySizeInBytes;", "modifier": "private", "type": "Integer[]", "declarator": "keySizeInBytes", "var_name": "keySizeInBytes"}], "file": "java_src/src/test/java/com/google/crypto/tink/aead/subtle/AesGcmSivTest.java"}, "test_case": {"identifier": "testRandomNonce", "parameters": "()", "modifiers": "@Test /** * This is a very simple test for the randomness of the nonce. The test simply checks that the * multiple ciphertexts of the same message are distinct. */ public", "return": "void", "body": "@Test\n  /**\n   * This is a very simple test for the randomness of the nonce. The test simply checks that the\n   * multiple ciphertexts of the same message are distinct.\n   */\n  public void testRandomNonce() throws Exception {\n    final int samples = 1 << 17;\n    byte[] key = Random.randBytes(16);\n    byte[] message = new byte[0];\n    byte[] aad = new byte[0];\n    AesGcmSiv gcm = new AesGcmSiv(key);\n    HashSet<String> ciphertexts = new HashSet<String>();\n    for (int i = 0; i < samples; i++) {\n      byte[] ct = gcm.encrypt(message, aad);\n      String ctHex = TestUtil.hexEncode(ct);\n      assertFalse(ciphertexts.contains(ctHex));\n      ciphertexts.add(ctHex);\n    }\n  }", "signature": "void testRandomNonce()", "full_signature": "@Test /** * This is a very simple test for the randomness of the nonce. The test simply checks that the * multiple ciphertexts of the same message are distinct. */ public void testRandomNonce()", "class_method_signature": "AesGcmSivTest.testRandomNonce()", "testcase": true, "constructor": false, "invocations": ["randBytes", "encrypt", "hexEncode", "assertFalse", "contains", "add"]}, "focal_class": {"identifier": "AesGcmSiv", "superclass": "", "interfaces": "implements Aead", "fields": [{"original_string": "private static final ThreadLocal<Cipher> localCipher =\n      new ThreadLocal<Cipher>() {\n        @Override\n        protected Cipher initialValue() {\n          try {\n            return EngineFactory.CIPHER.getInstance(\"AES/GCM-SIV/NoPadding\");\n          } catch (GeneralSecurityException ex) {\n            throw new IllegalStateException(ex);\n          }\n        }\n      };", "modifier": "private static final", "type": "ThreadLocal<Cipher>", "declarator": "localCipher =\n      new ThreadLocal<Cipher>() {\n        @Override\n        protected Cipher initialValue() {\n          try {\n            return EngineFactory.CIPHER.getInstance(\"AES/GCM-SIV/NoPadding\");\n          } catch (GeneralSecurityException ex) {\n            throw new IllegalStateException(ex);\n          }\n        }\n      }", "var_name": "localCipher"}, {"original_string": "private static final int IV_SIZE_IN_BYTES = 12;", "modifier": "private static final", "type": "int", "declarator": "IV_SIZE_IN_BYTES = 12", "var_name": "IV_SIZE_IN_BYTES"}, {"original_string": "private static final int TAG_SIZE_IN_BYTES = 16;", "modifier": "private static final", "type": "int", "declarator": "TAG_SIZE_IN_BYTES = 16", "var_name": "TAG_SIZE_IN_BYTES"}, {"original_string": "private final SecretKey keySpec;", "modifier": "private final", "type": "SecretKey", "declarator": "keySpec", "var_name": "keySpec"}], "methods": [{"identifier": "AesGcmSiv", "parameters": "(final byte[] key)", "modifiers": "public", "return": "", "signature": " AesGcmSiv(final byte[] key)", "full_signature": "public  AesGcmSiv(final byte[] key)", "class_method_signature": "AesGcmSiv.AesGcmSiv(final byte[] key)", "testcase": false, "constructor": true}, {"identifier": "encrypt", "parameters": "(final byte[] plaintext, final byte[] associatedData)", "modifiers": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public", "return": "byte[]", "signature": "byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "full_signature": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "class_method_signature": "AesGcmSiv.encrypt(final byte[] plaintext, final byte[] associatedData)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(final byte[] ciphertext, final byte[] associatedData)", "modifiers": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public", "return": "byte[]", "signature": "byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "full_signature": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public byte[] decrypt(final byte[] ciphertext, final byte[] associatedData)", "class_method_signature": "AesGcmSiv.decrypt(final byte[] ciphertext, final byte[] associatedData)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "(final byte[] iv)", "modifiers": "private static", "return": "AlgorithmParameterSpec", "signature": "AlgorithmParameterSpec getParams(final byte[] iv)", "full_signature": "private static AlgorithmParameterSpec getParams(final byte[] iv)", "class_method_signature": "AesGcmSiv.getParams(final byte[] iv)", "testcase": false, "constructor": false}, {"identifier": "getParams", "parameters": "(final byte[] buf, int offset, int len)", "modifiers": "private static", "return": "AlgorithmParameterSpec", "signature": "AlgorithmParameterSpec getParams(final byte[] buf, int offset, int len)", "full_signature": "private static AlgorithmParameterSpec getParams(final byte[] buf, int offset, int len)", "class_method_signature": "AesGcmSiv.getParams(final byte[] buf, int offset, int len)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/aead/subtle/AesGcmSiv.java"}, "focal_method": {"identifier": "encrypt", "parameters": "(final byte[] plaintext, final byte[] associatedData)", "modifiers": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public", "return": "byte[]", "body": "@Override\n  /**\n   * On Android KitKat (API level 19) this method does not support non null or non empty {@code\n   * associatedData}. It might not work at all in older versions.\n   */\n  public byte[] encrypt(final byte[] plaintext, final byte[] associatedData)\n      throws GeneralSecurityException {\n    // Check that ciphertext is not longer than the max. size of a Java array.\n    if (plaintext.length > Integer.MAX_VALUE - IV_SIZE_IN_BYTES - TAG_SIZE_IN_BYTES) {\n      throw new GeneralSecurityException(\"plaintext too long\");\n    }\n    byte[] ciphertext = new byte[IV_SIZE_IN_BYTES + plaintext.length + TAG_SIZE_IN_BYTES];\n    byte[] iv = Random.randBytes(IV_SIZE_IN_BYTES);\n    System.arraycopy(iv, 0, ciphertext, 0, IV_SIZE_IN_BYTES);\n\n    AlgorithmParameterSpec params = getParams(iv);\n    localCipher.get().init(Cipher.ENCRYPT_MODE, keySpec, params);\n    if (associatedData != null && associatedData.length != 0) {\n      localCipher.get().updateAAD(associatedData);\n    }\n    int written =\n        localCipher.get().doFinal(plaintext, 0, plaintext.length, ciphertext, IV_SIZE_IN_BYTES);\n    // For security reasons, AES-GCM encryption must always use tag of TAG_SIZE_IN_BYTES bytes. If\n    // so, written must be equal to plaintext.length + TAG_SIZE_IN_BYTES.\n\n    if (written != plaintext.length + TAG_SIZE_IN_BYTES) {\n      // The tag is shorter than expected.\n      int actualTagSize = written - plaintext.length;\n      throw new GeneralSecurityException(\n          String.format(\n              \"encryption failed; GCM tag must be %s bytes, but got only %s bytes\",\n              TAG_SIZE_IN_BYTES, actualTagSize));\n    }\n    return ciphertext;\n  }", "signature": "byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "full_signature": "@Override /** * On Android KitKat (API level 19) this method does not support non null or non empty {@code * associatedData}. It might not work at all in older versions. */ public byte[] encrypt(final byte[] plaintext, final byte[] associatedData)", "class_method_signature": "AesGcmSiv.encrypt(final byte[] plaintext, final byte[] associatedData)", "testcase": false, "constructor": false, "invocations": ["randBytes", "arraycopy", "getParams", "init", "get", "updateAAD", "get", "doFinal", "get", "format"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}