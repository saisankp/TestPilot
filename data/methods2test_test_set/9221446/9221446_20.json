{"test_class": {"identifier": "TestGraph", "superclass": "", "interfaces": "", "fields": [], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/utils/graph/TestGraph.java"}, "test_case": {"identifier": "testFindRootNode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindRootNode() throws NodeNotExistsExeption{\n\t\tGraph<String> graph = new Graph<String>();\n\t\tgraph.addNode(\"n1\");\n\t\tgraph.addNode(\"n2\");\n\t\tgraph.addNode(\"n3\");\n\t\tgraph.addNode(\"n4\");\n\t\tgraph.addNode(\"n5\");\n\t\tgraph.addNode(\"n6\");\n\t\tgraph.addEdge(\"n2\", \"n3\");\n\t\tgraph.addEdge(\"n3\", \"n4\");\n\t\tgraph.addEdge(\"n1\", \"n5\");\n\t\tgraph.addEdge(\"n2\", \"n6\");\n\t\tassertEquals(graph.findRootNode(graph.findNode(\"n5\")), graph.findNode(\"n1\"));\n\t\tassertEquals(graph.findRootNode(graph.findNode(\"n1\")), graph.findNode(\"n1\"));\n\t\tassertNotSame(graph.findRootNode(graph.findNode(\"n1\")), graph.findNode(\"n5\"));\n\t\tassertEquals(graph.findRootNode(graph.findNode(\"n4\")), graph.findNode(\"n2\"));\n\t}", "signature": "void testFindRootNode()", "full_signature": "@Test public void testFindRootNode()", "class_method_signature": "TestGraph.testFindRootNode()", "testcase": true, "constructor": false, "invocations": ["addNode", "addNode", "addNode", "addNode", "addNode", "addNode", "addEdge", "addEdge", "addEdge", "addEdge", "assertEquals", "findRootNode", "findNode", "findNode", "assertEquals", "findRootNode", "findNode", "findNode", "assertNotSame", "findRootNode", "findNode", "findNode", "assertEquals", "findRootNode", "findNode", "findNode"]}, "focal_class": {"identifier": "Graph", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private ArrayList<Node<T>> nodes;", "modifier": "private", "type": "ArrayList<Node<T>>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "private ArrayList<Node<T>> rootNodes;", "modifier": "private", "type": "ArrayList<Node<T>>", "declarator": "rootNodes", "var_name": "rootNodes"}], "methods": [{"identifier": "Graph", "parameters": "()", "modifiers": "public", "return": "", "signature": " Graph()", "full_signature": "public  Graph()", "class_method_signature": "Graph.Graph()", "testcase": false, "constructor": true}, {"identifier": "getDescendingNodes", "parameters": "(Node<T> node)", "modifiers": "public", "return": "List<Node<T>>", "signature": "List<Node<T>> getDescendingNodes(Node<T> node)", "full_signature": "public List<Node<T>> getDescendingNodes(Node<T> node)", "class_method_signature": "Graph.getDescendingNodes(Node<T> node)", "testcase": false, "constructor": false}, {"identifier": "getNodesByDFSSearch", "parameters": "()", "modifiers": "public", "return": "List<T>", "signature": "List<T> getNodesByDFSSearch()", "full_signature": "public List<T> getNodesByDFSSearch()", "class_method_signature": "Graph.getNodesByDFSSearch()", "testcase": false, "constructor": false}, {"identifier": "getAscendingNodes", "parameters": "(Node<T> node)", "modifiers": "private", "return": "List<Node<T>>", "signature": "List<Node<T>> getAscendingNodes(Node<T> node)", "full_signature": "private List<Node<T>> getAscendingNodes(Node<T> node)", "class_method_signature": "Graph.getAscendingNodes(Node<T> node)", "testcase": false, "constructor": false}, {"identifier": "rdfs", "parameters": "(Node<T> node, ArrayList<Node<T>> list)", "modifiers": "private", "return": "void", "signature": "void rdfs(Node<T> node, ArrayList<Node<T>> list)", "full_signature": "private void rdfs(Node<T> node, ArrayList<Node<T>> list)", "class_method_signature": "Graph.rdfs(Node<T> node, ArrayList<Node<T>> list)", "testcase": false, "constructor": false}, {"identifier": "nodesAffectedByRemoval", "parameters": "(Node<T> node)", "modifiers": "public", "return": "List<Node<T>>", "signature": "List<Node<T>> nodesAffectedByRemoval(Node<T> node)", "full_signature": "public List<Node<T>> nodesAffectedByRemoval(Node<T> node)", "class_method_signature": "Graph.nodesAffectedByRemoval(Node<T> node)", "testcase": false, "constructor": false}, {"identifier": "hasCycle", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasCycle()", "full_signature": "public boolean hasCycle()", "class_method_signature": "Graph.hasCycle()", "testcase": false, "constructor": false}, {"identifier": "isNodeInCycle", "parameters": "(Node<T> node)", "modifiers": "private", "return": "boolean", "signature": "boolean isNodeInCycle(Node<T> node)", "full_signature": "private boolean isNodeInCycle(Node<T> node)", "class_method_signature": "Graph.isNodeInCycle(Node<T> node)", "testcase": false, "constructor": false}, {"identifier": "addNode", "parameters": "(T object)", "modifiers": "public", "return": "Node<T>", "signature": "Node<T> addNode(T object)", "full_signature": "public Node<T> addNode(T object)", "class_method_signature": "Graph.addNode(T object)", "testcase": false, "constructor": false}, {"identifier": "addEdge", "parameters": "(T startObject, T endObject)", "modifiers": "public", "return": "void", "signature": "void addEdge(T startObject, T endObject)", "full_signature": "public void addEdge(T startObject, T endObject)", "class_method_signature": "Graph.addEdge(T startObject, T endObject)", "testcase": false, "constructor": false}, {"identifier": "findRootNode", "parameters": "(Node<T> startNode)", "modifiers": "public", "return": "Node<T>", "signature": "Node<T> findRootNode(Node<T> startNode)", "full_signature": "public Node<T> findRootNode(Node<T> startNode)", "class_method_signature": "Graph.findRootNode(Node<T> startNode)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(T object)", "modifiers": "public", "return": "boolean", "signature": "boolean removeNode(T object)", "full_signature": "public boolean removeNode(T object)", "class_method_signature": "Graph.removeNode(T object)", "testcase": false, "constructor": false}, {"identifier": "findNode", "parameters": "(T object)", "modifiers": "public", "return": "Node<T>", "signature": "Node<T> findNode(T object)", "full_signature": "public Node<T> findNode(T object)", "class_method_signature": "Graph.findNode(T object)", "testcase": false, "constructor": false}, {"identifier": "dfs", "parameters": "(Node<T> node, List<Node<T>> list)", "modifiers": "private", "return": "void", "signature": "void dfs(Node<T> node, List<Node<T>> list)", "full_signature": "private void dfs(Node<T> node, List<Node<T>> list)", "class_method_signature": "Graph.dfs(Node<T> node, List<Node<T>> list)", "testcase": false, "constructor": false}, {"identifier": "resetVisitingStatus", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void resetVisitingStatus()", "full_signature": "private void resetVisitingStatus()", "class_method_signature": "Graph.resetVisitingStatus()", "testcase": false, "constructor": false}, {"identifier": "getNodes", "parameters": "()", "modifiers": "public", "return": "ArrayList<Node<T>>", "signature": "ArrayList<Node<T>> getNodes()", "full_signature": "public ArrayList<Node<T>> getNodes()", "class_method_signature": "Graph.getNodes()", "testcase": false, "constructor": false}, {"identifier": "getRootNodes", "parameters": "()", "modifiers": "public", "return": "ArrayList<Node<T>>", "signature": "ArrayList<Node<T>> getRootNodes()", "full_signature": "public ArrayList<Node<T>> getRootNodes()", "class_method_signature": "Graph.getRootNodes()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Graph.toString()", "testcase": false, "constructor": false}], "file": "modules/x-gsn/src/main/java/org/openiot/gsn/utils/graph/Graph.java"}, "focal_method": {"identifier": "findRootNode", "parameters": "(Node<T> startNode)", "modifiers": "public", "return": "Node<T>", "body": "public Node<T> findRootNode(Node<T> startNode) {\n\t\tList<Node<T>> ascendingNodes = getAscendingNodes(startNode);\n\t\tfor (Node<T> node : ascendingNodes) {\n\t\t\tif(rootNodes.contains(node))\n\t\t\t\treturn node;\n\t\t}\n\t\treturn null;\n\t}", "signature": "Node<T> findRootNode(Node<T> startNode)", "full_signature": "public Node<T> findRootNode(Node<T> startNode)", "class_method_signature": "Graph.findRootNode(Node<T> startNode)", "testcase": false, "constructor": false, "invocations": ["getAscendingNodes", "contains"]}, "repository": {"repo_id": 9221446, "url": "https://github.com/OpenIotOrg/openiot", "language": "Java", "is_fork": false, "fork_count": 201, "stargazer_count": 417, "size": 101270, "license": "licensed"}}