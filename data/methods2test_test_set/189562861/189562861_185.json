{"test_class": {"identifier": "CacheFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RpcInvocation invocation;", "modifier": "private", "type": "RpcInvocation", "declarator": "invocation", "var_name": "invocation"}, {"original_string": "private CacheFilter cacheFilter = new CacheFilter();", "modifier": "private", "type": "CacheFilter", "declarator": "cacheFilter = new CacheFilter()", "var_name": "cacheFilter"}, {"original_string": "private Invoker<?> invoker = mock(Invoker.class);", "modifier": "private", "type": "Invoker<?>", "declarator": "invoker = mock(Invoker.class)", "var_name": "invoker"}, {"original_string": "private Invoker<?> invoker1 = mock(Invoker.class);", "modifier": "private", "type": "Invoker<?>", "declarator": "invoker1 = mock(Invoker.class)", "var_name": "invoker1"}, {"original_string": "private Invoker<?> invoker2 = mock(Invoker.class);", "modifier": "private", "type": "Invoker<?>", "declarator": "invoker2 = mock(Invoker.class)", "var_name": "invoker2"}, {"original_string": "private Invoker<?> invoker3 = mock(Invoker.class);", "modifier": "private", "type": "Invoker<?>", "declarator": "invoker3 = mock(Invoker.class)", "var_name": "invoker3"}, {"original_string": "private Invoker<?> invoker4 = mock(Invoker.class);", "modifier": "private", "type": "Invoker<?>", "declarator": "invoker4 = mock(Invoker.class)", "var_name": "invoker4"}, {"original_string": "private String cacheType;", "modifier": "private", "type": "String", "declarator": "cacheType", "var_name": "cacheType"}, {"original_string": "private CacheFactory cacheFactory;", "modifier": "private", "type": "CacheFactory", "declarator": "cacheFactory", "var_name": "cacheFactory"}], "file": "dubbo-filter/dubbo-filter-cache/src/test/java/com/alibaba/dubbo/cache/filter/CacheFilterTest.java"}, "test_case": {"identifier": "testMethodWithArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMethodWithArgs() {\n        invocation.setMethodName(\"echo1\");\n        invocation.setParameterTypes(new Class<?>[]{String.class});\n        invocation.setArguments(new Object[]{\"arg1\"});\n\n        cacheFilter.invoke(invoker, invocation);\n        RpcResult rpcResult1 = (RpcResult) cacheFilter.invoke(invoker1, invocation);\n        RpcResult rpcResult2 = (RpcResult) cacheFilter.invoke(invoker2, invocation);\n        Assert.assertEquals(rpcResult1.getValue(), rpcResult2.getValue());\n        Assert.assertEquals(rpcResult1.getValue(), \"value\");\n    }", "signature": "void testMethodWithArgs()", "full_signature": "@Test public void testMethodWithArgs()", "class_method_signature": "CacheFilterTest.testMethodWithArgs()", "testcase": true, "constructor": false, "invocations": ["setMethodName", "setParameterTypes", "setArguments", "invoke", "invoke", "invoke", "assertEquals", "getValue", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "CacheFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private CacheFactory cacheFactory;", "modifier": "private", "type": "CacheFactory", "declarator": "cacheFactory", "var_name": "cacheFactory"}], "methods": [{"identifier": "setCacheFactory", "parameters": "(CacheFactory cacheFactory)", "modifiers": "public", "return": "void", "signature": "void setCacheFactory(CacheFactory cacheFactory)", "full_signature": "public void setCacheFactory(CacheFactory cacheFactory)", "class_method_signature": "CacheFilter.setCacheFactory(CacheFactory cacheFactory)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "CacheFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-filter/dubbo-filter-cache/src/main/java/com/alibaba/dubbo/cache/filter/CacheFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        if (cacheFactory != null && ConfigUtils.isNotEmpty(invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.CACHE_KEY))) {\n            Cache cache = cacheFactory.getCache(invoker.getUrl(), invocation);\n            if (cache != null) {\n                String key = StringUtils.toArgumentString(invocation.getArguments());\n                Object value = cache.get(key);\n                if (value != null) {\n                    return new RpcResult(value);\n                }\n                Result result = invoker.invoke(invocation);\n                if (!result.hasException() && result.getValue() != null) {\n                    cache.put(key, result.getValue());\n                }\n                return result;\n            }\n        }\n        return invoker.invoke(invocation);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "CacheFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["isNotEmpty", "getMethodParameter", "getUrl", "getMethodName", "getCache", "getUrl", "toArgumentString", "getArguments", "get", "invoke", "hasException", "getValue", "put", "getValue", "invoke"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}