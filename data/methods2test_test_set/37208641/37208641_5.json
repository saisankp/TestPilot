{"test_class": {"identifier": "ElementPropertiesTest", "superclass": "extends XPathTester", "interfaces": "", "fields": [], "file": "jdollarx/src/test/java/com/github/loyada/jdollarx/ElementPropertiesTest.java"}, "test_case": {"identifier": "hasNChildrenAtLeast", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasNChildrenAtLeast() {\n        Path el = div.or(span).that(hasNChildren(1).orMore());\n        String xpath = el.getXPath().get();\n        NodeList nodes = findAllByXpath(\"<div><x/>foo</div><div>foo</div><span><a/><b/></span>\", el);\n        assertThat(nodes.getLength(), is(2));\n        assertThat(getElementName(nodes.item(0)), equalTo(\"div\"));\n        assertThat(getElementName(nodes.item(1)), equalTo(\"span\"));\n        assertThat(el.toString(), is(equalTo(\"div or span, that has at least 1 children\")));\n    }", "signature": "void hasNChildrenAtLeast()", "full_signature": "@Test public void hasNChildrenAtLeast()", "class_method_signature": "ElementPropertiesTest.hasNChildrenAtLeast()", "testcase": true, "constructor": false, "invocations": ["that", "or", "orMore", "hasNChildren", "get", "getXPath", "findAllByXpath", "assertThat", "getLength", "is", "assertThat", "getElementName", "item", "equalTo", "assertThat", "getElementName", "item", "equalTo", "assertThat", "toString", "is", "equalTo"]}, "focal_class": {"identifier": "ElementProperties", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final ElementProperty isLastSibling = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"last()\";\n        }\n\n        public String toString() {\n            return \"is last sibling\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "isLastSibling = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"last()\";\n        }\n\n        public String toString() {\n            return \"is last sibling\";\n        }\n    }", "var_name": "isLastSibling"}, {"original_string": "public static final ElementProperty isDisabled = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"@disabled\";\n        }\n\n        public String toString() {\n            return \"is disabled\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "isDisabled = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"@disabled\";\n        }\n\n        public String toString() {\n            return \"is disabled\";\n        }\n    }", "var_name": "isDisabled"}, {"original_string": "public static final ElementProperty isEnabled = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"not(@disabled)\";\n        }\n\n        public String toString() {\n            return \"is enabled\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "isEnabled = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"not(@disabled)\";\n        }\n\n        public String toString() {\n            return \"is enabled\";\n        }\n    }", "var_name": "isEnabled"}, {"original_string": "public static final ElementProperty isChecked = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"@checked\";\n        }\n\n        public String toString() {\n            return \"is checked\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "isChecked = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"@checked\";\n        }\n\n        public String toString() {\n            return \"is checked\";\n        }\n    }", "var_name": "isChecked"}, {"original_string": "public static final ElementProperty isSelected = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"@selected\";\n        }\n\n        public String toString() {\n            return \"is selected\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "isSelected = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"@selected\";\n        }\n\n        public String toString() {\n            return \"is selected\";\n        }\n    }", "var_name": "isSelected"}, {"original_string": "public static final ElementProperty hasNoChildren = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"count(./*)=0\";\n        }\n\n        public String toString() {\n            return \"has no children\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "hasNoChildren = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"count(./*)=0\";\n        }\n\n        public String toString() {\n            return \"has no children\";\n        }\n    }", "var_name": "hasNoChildren"}, {"original_string": "public static final ElementProperty hasChildren = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"count(./*)>0\";\n        }\n\n        public String toString() {\n            return \"has some children\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "hasChildren = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"count(./*)>0\";\n        }\n\n        public String toString() {\n            return \"has some children\";\n        }\n    }", "var_name": "hasChildren"}, {"original_string": "public static final ElementProperty isOnlyChild = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"count(preceding-sibling::*)=0 and count(following-sibling::*)=0\";\n        }\n\n        public String toString() {\n            return \"is only child\";\n        }\n    };", "modifier": "public static final", "type": "ElementProperty", "declarator": "isOnlyChild = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return \"count(preceding-sibling::*)=0 and count(following-sibling::*)=0\";\n        }\n\n        public String toString() {\n            return \"is only child\";\n        }\n    }", "var_name": "isOnlyChild"}, {"original_string": "public static ElementProperty isHidden = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return XpathUtils.isHidden;\n        }\n\n        public String toString() {\n            return \"is hidden\";\n        }\n    };", "modifier": "public static", "type": "ElementProperty", "declarator": "isHidden = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return XpathUtils.isHidden;\n        }\n\n        public String toString() {\n            return \"is hidden\";\n        }\n    }", "var_name": "isHidden"}, {"original_string": "public static ElementProperty hasSomeText = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return XpathUtils.hasSomeText;\n        }\n\n        public String toString() {\n            return \"has some text\";\n        }\n    };", "modifier": "public static", "type": "ElementProperty", "declarator": "hasSomeText = new ElementProperty() {\n        @Override\n        public String toXpath() {\n            return XpathUtils.hasSomeText;\n        }\n\n        public String toString() {\n            return \"has some text\";\n        }\n    }", "var_name": "hasSomeText"}], "methods": [{"identifier": "ElementProperties", "parameters": "()", "modifiers": "private", "return": "", "signature": " ElementProperties()", "full_signature": "private  ElementProperties()", "class_method_signature": "ElementProperties.ElementProperties()", "testcase": false, "constructor": true}, {"identifier": "hasNChildren", "parameters": "(Integer n)", "modifiers": "public static", "return": "ElementPropertyWithNumericalBoundaries", "signature": "ElementPropertyWithNumericalBoundaries hasNChildren(Integer n)", "full_signature": "public static ElementPropertyWithNumericalBoundaries hasNChildren(Integer n)", "class_method_signature": "ElementProperties.hasNChildren(Integer n)", "testcase": false, "constructor": false}, {"identifier": "isNthFromLastSibling", "parameters": "(Integer reverseIndex)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isNthFromLastSibling(Integer reverseIndex)", "full_signature": "public static ElementProperty isNthFromLastSibling(Integer reverseIndex)", "class_method_signature": "ElementProperties.isNthFromLastSibling(Integer reverseIndex)", "testcase": false, "constructor": false}, {"identifier": "isNthSibling", "parameters": "(Integer index)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isNthSibling(Integer index)", "full_signature": "public static ElementProperty isNthSibling(Integer index)", "class_method_signature": "ElementProperties.isNthSibling(Integer index)", "testcase": false, "constructor": false}, {"identifier": "withIndexInRange", "parameters": "(int first, int last)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty withIndexInRange(int first, int last)", "full_signature": "public static ElementProperty withIndexInRange(int first, int last)", "class_method_signature": "ElementProperties.withIndexInRange(int first, int last)", "testcase": false, "constructor": false}, {"identifier": "hasRawXpathProperty", "parameters": "(String rawXpathProps, String rawExplanation)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasRawXpathProperty(String rawXpathProps, String rawExplanation)", "full_signature": "public static ElementProperty hasRawXpathProperty(String rawXpathProps, String rawExplanation)", "class_method_signature": "ElementProperties.hasRawXpathProperty(String rawXpathProps, String rawExplanation)", "testcase": false, "constructor": false}, {"identifier": "hasText", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasText(String txt)", "full_signature": "public static ElementProperty hasText(String txt)", "class_method_signature": "ElementProperties.hasText(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasCaseSensitiveText", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasCaseSensitiveText(String txt)", "full_signature": "public static ElementProperty hasCaseSensitiveText(String txt)", "class_method_signature": "ElementProperties.hasCaseSensitiveText(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasTextStartingWith", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasTextStartingWith(String txt)", "full_signature": "public static ElementProperty hasTextStartingWith(String txt)", "class_method_signature": "ElementProperties.hasTextStartingWith(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasTextEndingWith", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasTextEndingWith(String txt)", "full_signature": "public static ElementProperty hasTextEndingWith(String txt)", "class_method_signature": "ElementProperties.hasTextEndingWith(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasId", "parameters": "(String id)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasId(String id)", "full_signature": "public static ElementProperty hasId(String id)", "class_method_signature": "ElementProperties.hasId(String id)", "testcase": false, "constructor": false}, {"identifier": "hasName", "parameters": "(String name)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasName(String name)", "full_signature": "public static ElementProperty hasName(String name)", "class_method_signature": "ElementProperties.hasName(String name)", "testcase": false, "constructor": false}, {"identifier": "hasSource", "parameters": "(String src)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasSource(String src)", "full_signature": "public static ElementProperty hasSource(String src)", "class_method_signature": "ElementProperties.hasSource(String src)", "testcase": false, "constructor": false}, {"identifier": "hasRole", "parameters": "(String role)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasRole(String role)", "full_signature": "public static ElementProperty hasRole(String role)", "class_method_signature": "ElementProperties.hasRole(String role)", "testcase": false, "constructor": false}, {"identifier": "hasRef", "parameters": "(String ref)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasRef(String ref)", "full_signature": "public static ElementProperty hasRef(String ref)", "class_method_signature": "ElementProperties.hasRef(String ref)", "testcase": false, "constructor": false}, {"identifier": "hasAttribute", "parameters": "(String attribute, String value)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAttribute(String attribute, String value)", "full_signature": "public static ElementProperty hasAttribute(String attribute, String value)", "class_method_signature": "ElementProperties.hasAttribute(String attribute, String value)", "testcase": false, "constructor": false}, {"identifier": "hasAnyOfClasses", "parameters": "(String... cssClasses)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAnyOfClasses(String... cssClasses)", "full_signature": "public static ElementProperty hasAnyOfClasses(String... cssClasses)", "class_method_signature": "ElementProperties.hasAnyOfClasses(String... cssClasses)", "testcase": false, "constructor": false}, {"identifier": "hasClasses", "parameters": "(String... cssClasses)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasClasses(String... cssClasses)", "full_signature": "public static ElementProperty hasClasses(String... cssClasses)", "class_method_signature": "ElementProperties.hasClasses(String... cssClasses)", "testcase": false, "constructor": false}, {"identifier": "hasClassContaining", "parameters": "(String classSubString)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasClassContaining(String classSubString)", "full_signature": "public static ElementProperty hasClassContaining(String classSubString)", "class_method_signature": "ElementProperties.hasClassContaining(String classSubString)", "testcase": false, "constructor": false}, {"identifier": "hasNonOfTheClasses", "parameters": "(String... cssClasses)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasNonOfTheClasses(String... cssClasses)", "full_signature": "public static ElementProperty hasNonOfTheClasses(String... cssClasses)", "class_method_signature": "ElementProperties.hasNonOfTheClasses(String... cssClasses)", "testcase": false, "constructor": false}, {"identifier": "isWithIndex", "parameters": "(Integer index)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isWithIndex(Integer index)", "full_signature": "public static ElementProperty isWithIndex(Integer index)", "class_method_signature": "ElementProperties.isWithIndex(Integer index)", "testcase": false, "constructor": false}, {"identifier": "hasTextContaining", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasTextContaining(String txt)", "full_signature": "public static ElementProperty hasTextContaining(String txt)", "class_method_signature": "ElementProperties.hasTextContaining(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasCaseSensitiveTextContaining", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasCaseSensitiveTextContaining(String txt)", "full_signature": "public static ElementProperty hasCaseSensitiveTextContaining(String txt)", "class_method_signature": "ElementProperties.hasCaseSensitiveTextContaining(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasClass", "parameters": "(String className)", "modifiers": "static public", "return": "ElementProperty", "signature": "ElementProperty hasClass(String className)", "full_signature": "static public ElementProperty hasClass(String className)", "class_method_signature": "ElementProperties.hasClass(String className)", "testcase": false, "constructor": false}, {"identifier": "hasAggregatedTextEqualTo", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAggregatedTextEqualTo(String txt)", "full_signature": "public static ElementProperty hasAggregatedTextEqualTo(String txt)", "class_method_signature": "ElementProperties.hasAggregatedTextEqualTo(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasAggregatedCaseSensitiveTextEqualTo", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAggregatedCaseSensitiveTextEqualTo(String txt)", "full_signature": "public static ElementProperty hasAggregatedCaseSensitiveTextEqualTo(String txt)", "class_method_signature": "ElementProperties.hasAggregatedCaseSensitiveTextEqualTo(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasAggregatedTextStartingWith", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAggregatedTextStartingWith(String txt)", "full_signature": "public static ElementProperty hasAggregatedTextStartingWith(String txt)", "class_method_signature": "ElementProperties.hasAggregatedTextStartingWith(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasAggregatedTextEndingWith", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAggregatedTextEndingWith(String txt)", "full_signature": "public static ElementProperty hasAggregatedTextEndingWith(String txt)", "class_method_signature": "ElementProperties.hasAggregatedTextEndingWith(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasAggregatedTextContaining", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAggregatedTextContaining(String txt)", "full_signature": "public static ElementProperty hasAggregatedTextContaining(String txt)", "class_method_signature": "ElementProperties.hasAggregatedTextContaining(String txt)", "testcase": false, "constructor": false}, {"identifier": "hasAggregatedCaseSensitiveTextContaining", "parameters": "(String txt)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAggregatedCaseSensitiveTextContaining(String txt)", "full_signature": "public static ElementProperty hasAggregatedCaseSensitiveTextContaining(String txt)", "class_method_signature": "ElementProperties.hasAggregatedCaseSensitiveTextContaining(String txt)", "testcase": false, "constructor": false}, {"identifier": "getRelationXpath", "parameters": "(Path path, String relation)", "modifiers": "private static", "return": "String", "signature": "String getRelationXpath(Path path, String relation)", "full_signature": "private static String getRelationXpath(Path path, String relation)", "class_method_signature": "ElementProperties.getRelationXpath(Path path, String relation)", "testcase": false, "constructor": false}, {"identifier": "rValueToString", "parameters": "(Path path)", "modifiers": "private static", "return": "String", "signature": "String rValueToString(Path path)", "full_signature": "private static String rValueToString(Path path)", "class_method_signature": "ElementProperties.rValueToString(Path path)", "testcase": false, "constructor": false}, {"identifier": "isChildOf", "parameters": "(Path path)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isChildOf(Path path)", "full_signature": "public static ElementProperty isChildOf(Path path)", "class_method_signature": "ElementProperties.isChildOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "hasParent", "parameters": "(Path path)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasParent(Path path)", "full_signature": "public static ElementProperty hasParent(Path path)", "class_method_signature": "ElementProperties.hasParent(Path path)", "testcase": false, "constructor": false}, {"identifier": "isParentOf", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isParentOf(Path... paths)", "full_signature": "public static ElementProperty isParentOf(Path... paths)", "class_method_signature": "ElementProperties.isParentOf(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "hasChild", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasChild(Path... paths)", "full_signature": "public static ElementProperty hasChild(Path... paths)", "class_method_signature": "ElementProperties.hasChild(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty contains(Path... paths)", "full_signature": "public static ElementProperty contains(Path... paths)", "class_method_signature": "ElementProperties.contains(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "isAncestorOf", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isAncestorOf(Path... paths)", "full_signature": "public static ElementProperty isAncestorOf(Path... paths)", "class_method_signature": "ElementProperties.isAncestorOf(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "hasDescendant", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasDescendant(Path... paths)", "full_signature": "public static ElementProperty hasDescendant(Path... paths)", "class_method_signature": "ElementProperties.hasDescendant(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "hasAncesctor", "parameters": "(Path path)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty hasAncesctor(Path path)", "full_signature": "public static ElementProperty hasAncesctor(Path path)", "class_method_signature": "ElementProperties.hasAncesctor(Path path)", "testcase": false, "constructor": false}, {"identifier": "isDescendantOf", "parameters": "(Path path)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isDescendantOf(Path path)", "full_signature": "public static ElementProperty isDescendantOf(Path path)", "class_method_signature": "ElementProperties.isDescendantOf(Path path)", "testcase": false, "constructor": false}, {"identifier": "isInside", "parameters": "(Path path)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isInside(Path path)", "full_signature": "public static ElementProperty isInside(Path path)", "class_method_signature": "ElementProperties.isInside(Path path)", "testcase": false, "constructor": false}, {"identifier": "isContainedIn", "parameters": "(Path path)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isContainedIn(Path path)", "full_signature": "public static ElementProperty isContainedIn(Path path)", "class_method_signature": "ElementProperties.isContainedIn(Path path)", "testcase": false, "constructor": false}, {"identifier": "isAfter", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isAfter(Path... paths)", "full_signature": "public static ElementProperty isAfter(Path... paths)", "class_method_signature": "ElementProperties.isAfter(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "isAfter", "parameters": "(NPath nPath)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isAfter(NPath nPath)", "full_signature": "public static ElementProperty isAfter(NPath nPath)", "class_method_signature": "ElementProperties.isAfter(NPath nPath)", "testcase": false, "constructor": false}, {"identifier": "isBefore", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isBefore(Path... paths)", "full_signature": "public static ElementProperty isBefore(Path... paths)", "class_method_signature": "ElementProperties.isBefore(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "isBefore", "parameters": "(NPath nPath)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isBefore(NPath nPath)", "full_signature": "public static ElementProperty isBefore(NPath nPath)", "class_method_signature": "ElementProperties.isBefore(NPath nPath)", "testcase": false, "constructor": false}, {"identifier": "isSiblingOf", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isSiblingOf(Path... paths)", "full_signature": "public static ElementProperty isSiblingOf(Path... paths)", "class_method_signature": "ElementProperties.isSiblingOf(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "isAfterSibling", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isAfterSibling(Path... paths)", "full_signature": "public static ElementProperty isAfterSibling(Path... paths)", "class_method_signature": "ElementProperties.isAfterSibling(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "isAfterSibling", "parameters": "(NPath nPath)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isAfterSibling(NPath nPath)", "full_signature": "public static ElementProperty isAfterSibling(NPath nPath)", "class_method_signature": "ElementProperties.isAfterSibling(NPath nPath)", "testcase": false, "constructor": false}, {"identifier": "isBeforeSibling", "parameters": "(Path... paths)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isBeforeSibling(Path... paths)", "full_signature": "public static ElementProperty isBeforeSibling(Path... paths)", "class_method_signature": "ElementProperties.isBeforeSibling(Path... paths)", "testcase": false, "constructor": false}, {"identifier": "isBeforeSibling", "parameters": "(NPath nPath)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty isBeforeSibling(NPath nPath)", "full_signature": "public static ElementProperty isBeforeSibling(NPath nPath)", "class_method_signature": "ElementProperties.isBeforeSibling(NPath nPath)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(ElementProperty prop)", "modifiers": "public static", "return": "ElementProperty", "signature": "ElementProperty not(ElementProperty prop)", "full_signature": "public static ElementProperty not(ElementProperty prop)", "class_method_signature": "ElementProperties.not(ElementProperty prop)", "testcase": false, "constructor": false}], "file": "jdollarx/src/main/java/com/github/loyada/jdollarx/ElementProperties.java"}, "focal_method": {"identifier": "hasNChildren", "parameters": "(Integer n)", "modifiers": "public static", "return": "ElementPropertyWithNumericalBoundaries", "body": "public static ElementPropertyWithNumericalBoundaries hasNChildren(Integer n) {\n        return new ElementPropertyWithNumericalBoundaries() {\n            @Override\n            public String toXpath() {\n                return \"count(./*)=\" + n;\n            }\n\n            @Override\n            public String toString() {\n                return String.format(\"has %d children\", n);\n            }\n\n            /**\n             * The element has at least n direct children\n             * @return a element property that can be applied with Path::that\n             */\n            @Override\n            public ElementProperty orMore() {\n                return new ElementProperty() {\n                    @Override\n                    public String toXpath() {\n                        return \"count(./*)>=\" + n;\n                    }\n\n                    public String toString() {\n                        return String.format(\"has at least %d children\", n);\n                    }\n                };\n            }\n\n            /**\n             * The element has at most n direct children\n             * @return a element property that can be applied with Path::that\n             */\n            @Override\n            public ElementProperty orLess() {\n                return new ElementProperty() {\n                    @Override\n                    public String toXpath() {\n                        return \"count(./*)<=\" + n;\n                    }\n\n                    public String toString() {\n                        return String.format(\"has at most %d children\", n);\n                    }\n                };\n            }\n        };\n    }", "signature": "ElementPropertyWithNumericalBoundaries hasNChildren(Integer n)", "full_signature": "public static ElementPropertyWithNumericalBoundaries hasNChildren(Integer n)", "class_method_signature": "ElementProperties.hasNChildren(Integer n)", "testcase": false, "constructor": false, "invocations": ["format", "format", "format"]}, "repository": {"repo_id": 37208641, "url": "https://github.com/loyada/dollarx", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 10, "size": 19585, "license": "licensed"}}