{"test_class": {"identifier": "NormalizeUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "name-parser/src/test/java/org/gbif/nameparser/utils/NormalizeUtilsTest.java"}, "test_case": {"identifier": "testReplaceUnicodeEntities", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReplaceUnicodeEntities() {\n    assertEquals(\"Markus&Pia\", NormalizeUtils.replaceUnicodeEntities(\"Markus&Pia\"));\n    assertEquals(\"Markus&Pia;\", NormalizeUtils.replaceUnicodeEntities(\"Markus&Pia;\"));\n    assertEquals(\"Markus & Pia ; \", NormalizeUtils.replaceUnicodeEntities(\"Markus & Pia ; \"));\n    assertEquals(\"&#pia;\", NormalizeUtils.replaceUnicodeEntities(\"&#pia;\"));\n    assertEquals(\"&#12pia;\", NormalizeUtils.replaceUnicodeEntities(\"&#12pia;\"));\n    assertTrue(NormalizeUtils.replaceUnicodeEntities(null) == null);\n    assertEquals(\"\u043b\u043e\u0431\u0430\u043d\", NormalizeUtils.replaceUnicodeEntities(\"&#1083;&#1086;&#1073;&#1072;&#1085;\"));\n    assertEquals(\"\u043b\u043e\u0431\u0430\u043d\", NormalizeUtils.replaceUnicodeEntities(\"&#x43b;&#x43e;&#x431;&#x430;&#x43d;\"));\n    assertEquals(\"\u043b\u043e\u0431\u0430\u043d\", NormalizeUtils.replaceUnicodeEntities(\"&#x43B;&#x043e;&#x0431;&#x430;&#x43D;\"));\n    //    assertEquals(\"\u043b\u043e\u0431\u0430\u043d\", NormalizeUtils.replaceUnicodeEntities(\"\\\\u043b\\\\u0u43e\\\\u0431\\\\u0430\\\\u043d\"));\n    //    assertEquals(\"\u043b\u043e\u0431\u0430\u043d\", NormalizeUtils.replaceUnicodeEntities(\"\\\\u043B\\\\u0u43E\\\\u0431\\\\u0430\\\\u043D\"));\n    //    assertEquals(\"\\\\u43B\u043e\u0431\u0430\u043d\", NormalizeUtils.replaceUnicodeEntities(\"\\\\u43B\\\\0u43E\\\\u0431\\\\u0430\\\\u043D\"));\n    assertEquals(\"\\\\u43b\\\\u43e\\\\u431\\\\u430\\\\u43d\",\n      NormalizeUtils.replaceUnicodeEntities(\"\\\\u43b\\\\u43e\\\\u431\\\\u430\\\\u43d\"));\n  }", "signature": "void testReplaceUnicodeEntities()", "full_signature": "@Test public void testReplaceUnicodeEntities()", "class_method_signature": "NormalizeUtilsTest.testReplaceUnicodeEntities()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "replaceUnicodeEntities", "assertEquals", "replaceUnicodeEntities", "assertEquals", "replaceUnicodeEntities", "assertEquals", "replaceUnicodeEntities", "assertEquals", "replaceUnicodeEntities", "assertTrue", "replaceUnicodeEntities", "assertEquals", "ceUnicodeEntities(\"&#1", "assertEquals", "ceUnicodeEntities(\"&#x", "assertEquals", "ceUnicodeEntities(\"&#x", "assertEquals", "replaceUnicodeEntities"]}, "focal_class": {"identifier": "NormalizeUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern NORM_TERM = Pattern.compile(\"[-_\\\\.\\\\s]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "NORM_TERM = Pattern.compile(\"[-_\\\\.\\\\s]+\")", "var_name": "NORM_TERM"}, {"original_string": "private static final Pattern NORM_CITATION_PUNCT = Pattern.compile(\"\\\\. *\");", "modifier": "private static final", "type": "Pattern", "declarator": "NORM_CITATION_PUNCT = Pattern.compile(\"\\\\. *\")", "var_name": "NORM_CITATION_PUNCT"}, {"original_string": "private static final Pattern NORM_CITATION_WHITE = Pattern.compile(\"[_\\\\s]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "NORM_CITATION_WHITE = Pattern.compile(\"[_\\\\s]+\")", "var_name": "NORM_CITATION_WHITE"}, {"original_string": "private static final Pattern XML_ENTITIES_DEC = Pattern.compile(\"&#([0-9]{2,});\");", "modifier": "private static final", "type": "Pattern", "declarator": "XML_ENTITIES_DEC = Pattern.compile(\"&#([0-9]{2,});\")", "var_name": "XML_ENTITIES_DEC"}, {"original_string": "private static final Pattern XML_ENTITIES_HEX = Pattern.compile(\"&#x([0-9abcdefABCDEF]{2,});\");", "modifier": "private static final", "type": "Pattern", "declarator": "XML_ENTITIES_HEX = Pattern.compile(\"&#x([0-9abcdefABCDEF]{2,});\")", "var_name": "XML_ENTITIES_HEX"}, {"original_string": "private static final Pattern UNICODE_HEX = Pattern.compile(\"\\\\\\\\u([0-9abcdefABCDEF]{4});\");", "modifier": "private static final", "type": "Pattern", "declarator": "UNICODE_HEX = Pattern.compile(\"\\\\\\\\u([0-9abcdefABCDEF]{4});\")", "var_name": "UNICODE_HEX"}], "methods": [{"identifier": "normalizeCitation", "parameters": "(String citation)", "modifiers": "public static", "return": "String", "signature": "String normalizeCitation(String citation)", "full_signature": "public static String normalizeCitation(String citation)", "class_method_signature": "NormalizeUtils.normalizeCitation(String citation)", "testcase": false, "constructor": false}, {"identifier": "normalizeTerm", "parameters": "(String term)", "modifiers": "public static", "return": "String", "signature": "String normalizeTerm(String term)", "full_signature": "public static String normalizeTerm(String term)", "class_method_signature": "NormalizeUtils.normalizeTerm(String term)", "testcase": false, "constructor": false}, {"identifier": "replaceUnicodeEntities", "parameters": "(String x)", "modifiers": "public static", "return": "String", "signature": "String replaceUnicodeEntities(String x)", "full_signature": "public static String replaceUnicodeEntities(String x)", "class_method_signature": "NormalizeUtils.replaceUnicodeEntities(String x)", "testcase": false, "constructor": false}, {"identifier": "trimToNull", "parameters": "(String x)", "modifiers": "public static", "return": "String", "signature": "String trimToNull(String x)", "full_signature": "public static String trimToNull(String x)", "class_method_signature": "NormalizeUtils.trimToNull(String x)", "testcase": false, "constructor": false}], "file": "name-parser/src/main/java/org/gbif/nameparser/utils/NormalizeUtils.java"}, "focal_method": {"identifier": "replaceUnicodeEntities", "parameters": "(String x)", "modifiers": "public static", "return": "String", "body": "public static String replaceUnicodeEntities(String x) {\n    if (x == null) {\n      return x;\n    }\n    // decimal entities\n    Matcher m = XML_ENTITIES_DEC.matcher(x);\n    if (m.find()) {\n      m.reset();\n      StringBuffer sb = new StringBuffer();\n      while (m.find()) {\n        try {\n          Character uc = (char) Integer.parseInt(m.group(1));\n          m.appendReplacement(sb, uc.toString());\n        } catch (NumberFormatException e) {\n          // use original string\n          m.appendReplacement(sb, m.group());\n        }\n      }\n      m.appendTail(sb);\n      x = sb.toString();\n    }\n    // hexadecimal entities\n    m = XML_ENTITIES_HEX.matcher(x);\n    if (m.find()) {\n      m.reset();\n      StringBuffer sb = new StringBuffer();\n      while (m.find()) {\n        try {\n          Character uc = (char) Integer.parseInt(m.group(1), 16);\n          m.appendReplacement(sb, uc.toString());\n        } catch (NumberFormatException e) {\n          // use original string\n          m.appendReplacement(sb, m.group());\n        }\n      }\n      m.appendTail(sb);\n      x = sb.toString();\n    }\n    // java unicode\n    m = UNICODE_HEX.matcher(x);\n    if (m.find()) {\n      m.reset();\n      StringBuffer sb = new StringBuffer();\n      while (m.find()) {\n        try {\n          Character uc = (char) Integer.parseInt(m.group(1), 16);\n          m.appendReplacement(sb, uc.toString());\n        } catch (NumberFormatException e) {\n          // use original string\n          m.appendReplacement(sb, m.group());\n        }\n      }\n      m.appendTail(sb);\n      x = sb.toString();\n    }\n\n    return x;\n  }", "signature": "String replaceUnicodeEntities(String x)", "full_signature": "public static String replaceUnicodeEntities(String x)", "class_method_signature": "NormalizeUtils.replaceUnicodeEntities(String x)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "reset", "find", "parseInt", "group", "appendReplacement", "toString", "appendReplacement", "group", "appendTail", "toString", "matcher", "find", "reset", "find", "parseInt", "group", "appendReplacement", "toString", "appendReplacement", "group", "appendTail", "toString", "matcher", "find", "reset", "find", "parseInt", "group", "appendReplacement", "toString", "appendReplacement", "group", "appendTail", "toString"]}, "repository": {"repo_id": 16201889, "url": "https://github.com/gbif/name-parser", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 1978, "license": "licensed"}}