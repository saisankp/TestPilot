{"test_class": {"identifier": "StringUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "modeshape-common/src/test/java/org/modeshape/common/util/StringUtilTest.java"}, "test_case": {"identifier": "justifyLeftShouldAppendCharacterForNullStrings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void justifyLeftShouldAppendCharacterForNullStrings() {\n        assertEquals(\"          \", StringUtil.justifyLeft(null, 10, ' '));\n    }", "signature": "void justifyLeftShouldAppendCharacterForNullStrings()", "full_signature": "@Test public void justifyLeftShouldAppendCharacterForNullStrings()", "class_method_signature": "StringUtilTest.justifyLeftShouldAppendCharacterForNullStrings()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "justifyLeft"]}, "focal_class": {"identifier": "StringUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "private static final Pattern NORMALIZE_PATTERN = Pattern.compile(\"\\\\s+\");", "modifier": "private static final", "type": "Pattern", "declarator": "NORMALIZE_PATTERN = Pattern.compile(\"\\\\s+\")", "var_name": "NORMALIZE_PATTERN"}, {"original_string": "private static final Pattern PARAMETER_COUNT_PATTERN = Pattern.compile(\"\\\\{(\\\\d+)\\\\}\");", "modifier": "private static final", "type": "Pattern", "declarator": "PARAMETER_COUNT_PATTERN = Pattern.compile(\"\\\\{(\\\\d+)\\\\}\")", "var_name": "PARAMETER_COUNT_PATTERN"}, {"original_string": "private static final byte[] HEX_CHAR_TABLE = {(byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', (byte)'6',\n        (byte)'7', (byte)'8', (byte)'9', (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f'};", "modifier": "private static final", "type": "byte[]", "declarator": "HEX_CHAR_TABLE = {(byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', (byte)'6',\n        (byte)'7', (byte)'8', (byte)'9', (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f'}", "var_name": "HEX_CHAR_TABLE"}], "methods": [{"identifier": "combineLines", "parameters": "( String[] lines )", "modifiers": "public static", "return": "String", "signature": "String combineLines( String[] lines )", "full_signature": "public static String combineLines( String[] lines )", "class_method_signature": "StringUtil.combineLines( String[] lines )", "testcase": false, "constructor": false}, {"identifier": "combineLines", "parameters": "( String[] lines,\n                                       char separator )", "modifiers": "public static", "return": "String", "signature": "String combineLines( String[] lines,\n                                       char separator )", "full_signature": "public static String combineLines( String[] lines,\n                                       char separator )", "class_method_signature": "StringUtil.combineLines( String[] lines,\n                                       char separator )", "testcase": false, "constructor": false}, {"identifier": "splitLines", "parameters": "( final String content )", "modifiers": "public static", "return": "List<String>", "signature": "List<String> splitLines( final String content )", "full_signature": "public static List<String> splitLines( final String content )", "class_method_signature": "StringUtil.splitLines( final String content )", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "( Object[] values,\n                               String delimiter )", "modifiers": "public static", "return": "String", "signature": "String join( Object[] values,\n                               String delimiter )", "full_signature": "public static String join( Object[] values,\n                               String delimiter )", "class_method_signature": "StringUtil.join( Object[] values,\n                               String delimiter )", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "( Iterable<?> values,\n                               String delimiter )", "modifiers": "public static", "return": "String", "signature": "String join( Iterable<?> values,\n                               String delimiter )", "full_signature": "public static String join( Iterable<?> values,\n                               String delimiter )", "class_method_signature": "StringUtil.join( Iterable<?> values,\n                               String delimiter )", "testcase": false, "constructor": false}, {"identifier": "createString", "parameters": "( String pattern,\n                                       Object... parameters )", "modifiers": "public static", "return": "String", "signature": "String createString( String pattern,\n                                       Object... parameters )", "full_signature": "public static String createString( String pattern,\n                                       Object... parameters )", "class_method_signature": "StringUtil.createString( String pattern,\n                                       Object... parameters )", "testcase": false, "constructor": false}, {"identifier": "createString", "parameters": "( final char charToRepeat,\n                                       int numberOfRepeats )", "modifiers": "public static", "return": "String", "signature": "String createString( final char charToRepeat,\n                                       int numberOfRepeats )", "full_signature": "public static String createString( final char charToRepeat,\n                                       int numberOfRepeats )", "class_method_signature": "StringUtil.createString( final char charToRepeat,\n                                       int numberOfRepeats )", "testcase": false, "constructor": false}, {"identifier": "setLength", "parameters": "( String original,\n                                    int length,\n                                    char padChar )", "modifiers": "public static", "return": "String", "signature": "String setLength( String original,\n                                    int length,\n                                    char padChar )", "full_signature": "public static String setLength( String original,\n                                    int length,\n                                    char padChar )", "class_method_signature": "StringUtil.setLength( String original,\n                                    int length,\n                                    char padChar )", "testcase": false, "constructor": false}, {"identifier": "justify", "parameters": "( Justify justify,\n                                  String str,\n                                  final int width,\n                                  char padWithChar )", "modifiers": "public static", "return": "String", "signature": "String justify( Justify justify,\n                                  String str,\n                                  final int width,\n                                  char padWithChar )", "full_signature": "public static String justify( Justify justify,\n                                  String str,\n                                  final int width,\n                                  char padWithChar )", "class_method_signature": "StringUtil.justify( Justify justify,\n                                  String str,\n                                  final int width,\n                                  char padWithChar )", "testcase": false, "constructor": false}, {"identifier": "justifyRight", "parameters": "( String str,\n                                       final int width,\n                                       char padWithChar )", "modifiers": "public static", "return": "String", "signature": "String justifyRight( String str,\n                                       final int width,\n                                       char padWithChar )", "full_signature": "public static String justifyRight( String str,\n                                       final int width,\n                                       char padWithChar )", "class_method_signature": "StringUtil.justifyRight( String str,\n                                       final int width,\n                                       char padWithChar )", "testcase": false, "constructor": false}, {"identifier": "justifyLeft", "parameters": "( String str,\n                                      final int width,\n                                      char padWithChar )", "modifiers": "public static", "return": "String", "signature": "String justifyLeft( String str,\n                                      final int width,\n                                      char padWithChar )", "full_signature": "public static String justifyLeft( String str,\n                                      final int width,\n                                      char padWithChar )", "class_method_signature": "StringUtil.justifyLeft( String str,\n                                      final int width,\n                                      char padWithChar )", "testcase": false, "constructor": false}, {"identifier": "justifyLeft", "parameters": "( String str,\n                                         final int width,\n                                         char padWithChar,\n                                         boolean trimWhitespace )", "modifiers": "protected static", "return": "String", "signature": "String justifyLeft( String str,\n                                         final int width,\n                                         char padWithChar,\n                                         boolean trimWhitespace )", "full_signature": "protected static String justifyLeft( String str,\n                                         final int width,\n                                         char padWithChar,\n                                         boolean trimWhitespace )", "class_method_signature": "StringUtil.justifyLeft( String str,\n                                         final int width,\n                                         char padWithChar,\n                                         boolean trimWhitespace )", "testcase": false, "constructor": false}, {"identifier": "justifyCenter", "parameters": "( String str,\n                                        final int width,\n                                        char padWithChar )", "modifiers": "public static", "return": "String", "signature": "String justifyCenter( String str,\n                                        final int width,\n                                        char padWithChar )", "full_signature": "public static String justifyCenter( String str,\n                                        final int width,\n                                        char padWithChar )", "class_method_signature": "StringUtil.justifyCenter( String str,\n                                        final int width,\n                                        char padWithChar )", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "( Object obj,\n                                   int maxLength )", "modifiers": "public static", "return": "String", "signature": "String truncate( Object obj,\n                                   int maxLength )", "full_signature": "public static String truncate( Object obj,\n                                   int maxLength )", "class_method_signature": "StringUtil.truncate( Object obj,\n                                   int maxLength )", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "( Object obj,\n                                   int maxLength,\n                                   String suffix )", "modifiers": "public static", "return": "String", "signature": "String truncate( Object obj,\n                                   int maxLength,\n                                   String suffix )", "full_signature": "public static String truncate( Object obj,\n                                   int maxLength,\n                                   String suffix )", "class_method_signature": "StringUtil.truncate( Object obj,\n                                   int maxLength,\n                                   String suffix )", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "( Reader reader )", "modifiers": "public static", "return": "String", "signature": "String read( Reader reader )", "full_signature": "public static String read( Reader reader )", "class_method_signature": "StringUtil.read( Reader reader )", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "( InputStream stream )", "modifiers": "public static", "return": "String", "signature": "String read( InputStream stream )", "full_signature": "public static String read( InputStream stream )", "class_method_signature": "StringUtil.read( InputStream stream )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( String content,\n                              OutputStream stream )", "modifiers": "public static", "return": "void", "signature": "void write( String content,\n                              OutputStream stream )", "full_signature": "public static void write( String content,\n                              OutputStream stream )", "class_method_signature": "StringUtil.write( String content,\n                              OutputStream stream )", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "( String content,\n                              Writer writer )", "modifiers": "public static", "return": "void", "signature": "void write( String content,\n                              Writer writer )", "full_signature": "public static void write( String content,\n                              Writer writer )", "class_method_signature": "StringUtil.write( String content,\n                              Writer writer )", "testcase": false, "constructor": false}, {"identifier": "getStackTrace", "parameters": "( Throwable throwable )", "modifiers": "public static", "return": "String", "signature": "String getStackTrace( Throwable throwable )", "full_signature": "public static String getStackTrace( Throwable throwable )", "class_method_signature": "StringUtil.getStackTrace( Throwable throwable )", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "( String text )", "modifiers": "public static", "return": "String", "signature": "String normalize( String text )", "full_signature": "public static String normalize( String text )", "class_method_signature": "StringUtil.normalize( String text )", "testcase": false, "constructor": false}, {"identifier": "getHexString", "parameters": "( byte[] bytes )", "modifiers": "public static", "return": "String", "signature": "String getHexString( byte[] bytes )", "full_signature": "public static String getHexString( byte[] bytes )", "class_method_signature": "StringUtil.getHexString( byte[] bytes )", "testcase": false, "constructor": false}, {"identifier": "fromHexString", "parameters": "( String hexadecimal )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] fromHexString( String hexadecimal )", "full_signature": "public static byte[] fromHexString( String hexadecimal )", "class_method_signature": "StringUtil.fromHexString( String hexadecimal )", "testcase": false, "constructor": false}, {"identifier": "isHexString", "parameters": "( String hexadecimal )", "modifiers": "public static", "return": "boolean", "signature": "boolean isHexString( String hexadecimal )", "full_signature": "public static boolean isHexString( String hexadecimal )", "class_method_signature": "StringUtil.isHexString( String hexadecimal )", "testcase": false, "constructor": false}, {"identifier": "isHexCharacter", "parameters": "( char c )", "modifiers": "public static", "return": "boolean", "signature": "boolean isHexCharacter( char c )", "full_signature": "public static boolean isHexCharacter( char c )", "class_method_signature": "StringUtil.isHexCharacter( char c )", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "( String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank( String str )", "full_signature": "public static boolean isBlank( String str )", "class_method_signature": "StringUtil.isBlank( String str )", "testcase": false, "constructor": false}, {"identifier": "notBlank", "parameters": "( String str )", "modifiers": "public static", "return": "boolean", "signature": "boolean notBlank( String str )", "full_signature": "public static boolean notBlank( String str )", "class_method_signature": "StringUtil.notBlank( String str )", "testcase": false, "constructor": false}, {"identifier": "containsAnyOf", "parameters": "( String str,\n                                         char... chars )", "modifiers": "public static", "return": "boolean", "signature": "boolean containsAnyOf( String str,\n                                         char... chars )", "full_signature": "public static boolean containsAnyOf( String str,\n                                         char... chars )", "class_method_signature": "StringUtil.containsAnyOf( String str,\n                                         char... chars )", "testcase": false, "constructor": false}, {"identifier": "StringUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " StringUtil()", "full_signature": "private  StringUtil()", "class_method_signature": "StringUtil.StringUtil()", "testcase": false, "constructor": true}], "file": "modeshape-common/src/main/java/org/modeshape/common/util/StringUtil.java"}, "focal_method": {"identifier": "justifyLeft", "parameters": "( String str,\n                                      final int width,\n                                      char padWithChar )", "modifiers": "public static", "return": "String", "body": "public static String justifyLeft( String str,\n                                      final int width,\n                                      char padWithChar ) {\n        return justifyLeft(str, width, padWithChar, true);\n    }", "signature": "String justifyLeft( String str,\n                                      final int width,\n                                      char padWithChar )", "full_signature": "public static String justifyLeft( String str,\n                                      final int width,\n                                      char padWithChar )", "class_method_signature": "StringUtil.justifyLeft( String str,\n                                      final int width,\n                                      char padWithChar )", "testcase": false, "constructor": false, "invocations": ["justifyLeft"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}