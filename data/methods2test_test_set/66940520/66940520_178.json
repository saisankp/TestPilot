{"test_class": {"identifier": "ProgramInstancePreProcessorTest", "superclass": "extends BasePreProcessTest", "interfaces": "", "fields": [{"original_string": "private ProgramInstancePreProcessor subject;", "modifier": "private", "type": "ProgramInstancePreProcessor", "declarator": "subject", "var_name": "subject"}, {"original_string": "private final Map<String, ProgramInstance> programInstanceMap = new HashMap<>();", "modifier": "private final", "type": "Map<String, ProgramInstance>", "declarator": "programInstanceMap = new HashMap<>()", "var_name": "programInstanceMap"}, {"original_string": "@Mock\n    private JdbcTemplate jdbcTemplate;", "modifier": "@Mock\n    private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "@Captor\n    protected ArgumentCaptor<String> sql;", "modifier": "@Captor\n    protected", "type": "ArgumentCaptor<String>", "declarator": "sql", "var_name": "sql"}, {"original_string": "@Mock\n    protected ResultSet mockResultSet;", "modifier": "@Mock\n    protected", "type": "ResultSet", "declarator": "mockResultSet", "var_name": "mockResultSet"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessorTest.java"}, "test_case": {"identifier": "verifyEnrollmentIsNotSetOnEventWhenMultipleProgramInstanceAreFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyEnrollmentIsNotSetOnEventWhenMultipleProgramInstanceAreFound()\n    {\n        //\n        // Tracked Entity Instance\n        //\n        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = new HashMap<>();\n        teiMap.put( event.getUid(), Pair.of( tei, true ) );\n        when( workContext.getTrackedEntityInstanceMap() ).thenReturn( teiMap );\n\n        ProgramInstance programInstance1 = new ProgramInstance();\n        ProgramInstance programInstance2 = new ProgramInstance();\n\n        when( programInstanceStore.get( tei, program, ProgramStatus.ACTIVE ) )\n            .thenReturn( Lists.newArrayList( programInstance1, programInstance2 ) );\n\n        event.setProgram( program.getUid() );\n\n        subject.process( event, workContext );\n\n        assertThat( event.getEnrollment(), is( nullValue() ) );\n        assertThat( programInstanceMap.get( event.getUid() ), is( nullValue() ) );\n    }", "signature": "void verifyEnrollmentIsNotSetOnEventWhenMultipleProgramInstanceAreFound()", "full_signature": "@Test public void verifyEnrollmentIsNotSetOnEventWhenMultipleProgramInstanceAreFound()", "class_method_signature": "ProgramInstancePreProcessorTest.verifyEnrollmentIsNotSetOnEventWhenMultipleProgramInstanceAreFound()", "testcase": true, "constructor": false, "invocations": ["createTrackedEntityInstance", "createOrganisationUnit", "put", "getUid", "of", "thenReturn", "when", "getTrackedEntityInstanceMap", "thenReturn", "when", "get", "newArrayList", "setProgram", "getUid", "process", "assertThat", "getEnrollment", "is", "nullValue", "assertThat", "get", "getUid", "is", "nullValue"]}, "focal_class": {"identifier": "ProgramInstancePreProcessor", "superclass": "", "interfaces": "implements Processor", "fields": [], "methods": [{"identifier": "process", "parameters": "( Event event, WorkContext ctx )", "modifiers": "@Override public", "return": "void", "signature": "void process( Event event, WorkContext ctx )", "full_signature": "@Override public void process( Event event, WorkContext ctx )", "class_method_signature": "ProgramInstancePreProcessor.process( Event event, WorkContext ctx )", "testcase": false, "constructor": false}, {"identifier": "getProgramInstances", "parameters": "( JdbcTemplate jdbcTemplate, Program program,\n        ProgramStatus status )", "modifiers": "private", "return": "List<ProgramInstance>", "signature": "List<ProgramInstance> getProgramInstances( JdbcTemplate jdbcTemplate, Program program,\n        ProgramStatus status )", "full_signature": "private List<ProgramInstance> getProgramInstances( JdbcTemplate jdbcTemplate, Program program,\n        ProgramStatus status )", "class_method_signature": "ProgramInstancePreProcessor.getProgramInstances( JdbcTemplate jdbcTemplate, Program program,\n        ProgramStatus status )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/insert/preprocess/ProgramInstancePreProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "( Event event, WorkContext ctx )", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process( Event event, WorkContext ctx )\n    {\n        ProgramInstanceStore programInstanceStore = ctx.getServiceDelegator().getProgramInstanceStore();\n\n        Program program = ctx.getProgramsMap().get( event.getProgram() );\n\n        if ( program == null )\n        {\n            return; // Program is a mandatory value, it will be caught by the validation\n        }\n\n        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n\n        if ( program.isRegistration() && programInstance == null )\n        {\n            List<ProgramInstance> programInstances = new ArrayList<>(\n                programInstanceStore.get( trackedEntityInstance.orElse( null ), program, ProgramStatus.ACTIVE ) );\n\n            if ( programInstances.size() == 1 )\n            {\n                event.setEnrollment( programInstances.get( 0 ).getUid() );\n                ctx.getProgramInstanceMap().put( event.getUid(), programInstances.get( 0 ) );\n            }\n        }\n        else if ( program.isWithoutRegistration() && programInstance == null )\n        {\n            List<ProgramInstance> programInstances = getProgramInstances( ctx.getServiceDelegator().getJdbcTemplate(),\n                program, ProgramStatus.ACTIVE );\n\n            // the \"original\" event import code creates a Program Instance, if none is found\n            // but this is no longer needed, since a Program POST-CREATION hook takes care of that\n            if ( programInstances.size() == 1 )\n            {\n                event.setEnrollment( programInstances.get( 0 ).getUid() );\n                ctx.getProgramInstanceMap().put( event.getUid(), programInstances.get( 0 ) );\n            }\n            // If more than one Program Instance is present, the validation will detect it later\n        }\n    }", "signature": "void process( Event event, WorkContext ctx )", "full_signature": "@Override public void process( Event event, WorkContext ctx )", "class_method_signature": "ProgramInstancePreProcessor.process( Event event, WorkContext ctx )", "testcase": false, "constructor": false, "invocations": ["getProgramInstanceStore", "getServiceDelegator", "get", "getProgramsMap", "getProgram", "get", "getProgramInstanceMap", "getUid", "getTrackedEntityInstance", "getUid", "isRegistration", "get", "orElse", "size", "setEnrollment", "getUid", "get", "put", "getProgramInstanceMap", "getUid", "get", "isWithoutRegistration", "getProgramInstances", "getJdbcTemplate", "getServiceDelegator", "size", "setEnrollment", "getUid", "get", "put", "getProgramInstanceMap", "getUid", "get"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}