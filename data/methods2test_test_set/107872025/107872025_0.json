{"test_class": {"identifier": "ActivityDiaryContentProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ContentResolver contentResolver;", "modifier": "", "type": "ContentResolver", "declarator": "contentResolver", "var_name": "contentResolver"}], "file": "app/src/test/java/de/rampro/activitydiary/db/ActivityDiaryContentProviderTest.java"}, "test_case": {"identifier": "simpleQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void simpleQuery() throws Exception {\n        Cursor cursor = contentResolver.query(\n                ActivityDiaryContract.DiaryActivity.CONTENT_URI,\n                ActivityDiaryContract.DiaryActivity.PROJECTION_ALL,\n                null,\n                null,\n                ActivityDiaryContract.DiaryActivity.SORT_ORDER_DEFAULT);\n        assertNotNull(cursor);\n\n        assertTrue(\"at least some random data\", cursor.getCount() > 0);\n    }", "signature": "void simpleQuery()", "full_signature": "@Test public void simpleQuery()", "class_method_signature": "ActivityDiaryContentProviderTest.simpleQuery()", "testcase": true, "constructor": false, "invocations": ["query", "assertNotNull", "assertTrue", "getCount"]}, "focal_class": {"identifier": "ActivityDiaryContentProvider", "superclass": "extends ContentProvider", "interfaces": "", "fields": [{"original_string": "private static final int activities = 1;", "modifier": "private static final", "type": "int", "declarator": "activities = 1", "var_name": "activities"}, {"original_string": "private static final int activities_ID = 2;", "modifier": "private static final", "type": "int", "declarator": "activities_ID = 2", "var_name": "activities_ID"}, {"original_string": "private static final int conditions = 3;", "modifier": "private static final", "type": "int", "declarator": "conditions = 3", "var_name": "conditions"}, {"original_string": "private static final int conditions_ID = 4;", "modifier": "private static final", "type": "int", "declarator": "conditions_ID = 4", "var_name": "conditions_ID"}, {"original_string": "private static final int diary = 5;", "modifier": "private static final", "type": "int", "declarator": "diary = 5", "var_name": "diary"}, {"original_string": "private static final int diary_ID = 6;", "modifier": "private static final", "type": "int", "declarator": "diary_ID = 6", "var_name": "diary_ID"}, {"original_string": "private static final int diary_image = 7;", "modifier": "private static final", "type": "int", "declarator": "diary_image = 7", "var_name": "diary_image"}, {"original_string": "private static final int diary_image_ID = 8;", "modifier": "private static final", "type": "int", "declarator": "diary_image_ID = 8", "var_name": "diary_image_ID"}, {"original_string": "private static final int diary_location = 9;", "modifier": "private static final", "type": "int", "declarator": "diary_location = 9", "var_name": "diary_location"}, {"original_string": "private static final int diary_location_ID = 10;", "modifier": "private static final", "type": "int", "declarator": "diary_location_ID = 10", "var_name": "diary_location_ID"}, {"original_string": "private static final int diary_stats = 11;", "modifier": "private static final", "type": "int", "declarator": "diary_stats = 11", "var_name": "diary_stats"}, {"original_string": "private static final int search_recent_suggestion = 12;", "modifier": "private static final", "type": "int", "declarator": "search_recent_suggestion = 12", "var_name": "search_recent_suggestion"}, {"original_string": "private static final int search_suggestion = 13;", "modifier": "private static final", "type": "int", "declarator": "search_suggestion = 13", "var_name": "search_suggestion"}, {"original_string": "private static final int diary_suggestion = 14;", "modifier": "private static final", "type": "int", "declarator": "diary_suggestion = 14", "var_name": "diary_suggestion"}, {"original_string": "private static final String TAG = ActivityDiaryContentProvider.class.getName();", "modifier": "private static final", "type": "String", "declarator": "TAG = ActivityDiaryContentProvider.class.getName()", "var_name": "TAG"}, {"original_string": "public static final String SEARCH_ACTIVITY = \"de.rampro.activitydiary.action.SEARCH_ACTIVITY\";", "modifier": "public static final", "type": "String", "declarator": "SEARCH_ACTIVITY = \"de.rampro.activitydiary.action.SEARCH_ACTIVITY\"", "var_name": "SEARCH_ACTIVITY"}, {"original_string": "public static final String SEARCH_NOTE = \"de.rampro.activitydiary.action.SEARCH_NOTE\";", "modifier": "public static final", "type": "String", "declarator": "SEARCH_NOTE = \"de.rampro.activitydiary.action.SEARCH_NOTE\"", "var_name": "SEARCH_NOTE"}, {"original_string": "public static final String SEARCH_GLOBAL = \"de.rampro.activitydiary.action.SEARCH_GLOBAL\";", "modifier": "public static final", "type": "String", "declarator": "SEARCH_GLOBAL = \"de.rampro.activitydiary.action.SEARCH_GLOBAL\"", "var_name": "SEARCH_GLOBAL"}, {"original_string": "public static final String SEARCH_DATE = \"de.rampro.activitydiary.action.SEARCH_DATE\";", "modifier": "public static final", "type": "String", "declarator": "SEARCH_DATE = \"de.rampro.activitydiary.action.SEARCH_DATE\"", "var_name": "SEARCH_DATE"}, {"original_string": "public static final Uri SEARCH_URI = Uri.parse(\"content://\" + ActivityDiaryContract.AUTHORITY);", "modifier": "public static final", "type": "Uri", "declarator": "SEARCH_URI = Uri.parse(\"content://\" + ActivityDiaryContract.AUTHORITY)", "var_name": "SEARCH_URI"}, {"original_string": "private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);", "modifier": "private static final", "type": "UriMatcher", "declarator": "sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH)", "var_name": "sUriMatcher"}, {"original_string": "private LocalDBHelper mOpenHelper;", "modifier": "private", "type": "LocalDBHelper", "declarator": "mOpenHelper", "var_name": "mOpenHelper"}], "methods": [{"identifier": "onCreate", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean onCreate()", "full_signature": "@Override public boolean onCreate()", "class_method_signature": "ActivityDiaryContentProvider.onCreate()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "modifiers": "@Nullable @Override public", "return": "Cursor", "signature": "Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "full_signature": "@Nullable @Override public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "class_method_signature": "ActivityDiaryContentProvider.query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(@NonNull Uri uri)", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getType(@NonNull Uri uri)", "full_signature": "@Nullable @Override public String getType(@NonNull Uri uri)", "class_method_signature": "ActivityDiaryContentProvider.getType(@NonNull Uri uri)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(@NonNull Uri uri, @Nullable ContentValues values)", "modifiers": "@Nullable @Override public", "return": "Uri", "signature": "Uri insert(@NonNull Uri uri, @Nullable ContentValues values)", "full_signature": "@Nullable @Override public Uri insert(@NonNull Uri uri, @Nullable ContentValues values)", "class_method_signature": "ActivityDiaryContentProvider.insert(@NonNull Uri uri, @Nullable ContentValues values)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs)", "modifiers": "@Override public", "return": "int", "signature": "int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs)", "full_signature": "@Override public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs)", "class_method_signature": "ActivityDiaryContentProvider.delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@NonNull Uri uri, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)", "modifiers": "@Override public", "return": "int", "signature": "int update(@NonNull Uri uri, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)", "full_signature": "@Override public int update(@NonNull Uri uri, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)", "class_method_signature": "ActivityDiaryContentProvider.update(@NonNull Uri uri, @NonNull ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs)", "testcase": false, "constructor": false}, {"identifier": "resetDatabase", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resetDatabase()", "full_signature": "public void resetDatabase()", "class_method_signature": "ActivityDiaryContentProvider.resetDatabase()", "testcase": false, "constructor": false}, {"identifier": "searchDate", "parameters": "(Long dateInMillis)", "modifiers": "public", "return": "String", "signature": "String searchDate(Long dateInMillis)", "full_signature": "public String searchDate(Long dateInMillis)", "class_method_signature": "ActivityDiaryContentProvider.searchDate(Long dateInMillis)", "testcase": false, "constructor": false}], "file": "app/src/main/java/de/rampro/activitydiary/db/ActivityDiaryContentProvider.java"}, "focal_method": {"identifier": "query", "parameters": "(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "modifiers": "@Nullable @Override public", "return": "Cursor", "body": "@Nullable\n    @Override\n    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {\n        SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder();\n        boolean useRawQuery = false;\n        String grouping = null;\n        String sql = \"\";\n        Cursor c;\n        int id = 0;\n        if(selection == null){\n            selection = \"\";\n        }\n\n        MatrixCursor result = new MatrixCursor(new String[]{\n                BaseColumns._ID,\n                SUGGEST_COLUMN_TEXT_1,\n                SUGGEST_COLUMN_ICON_1,\n                SUGGEST_COLUMN_INTENT_ACTION,\n                SUGGEST_COLUMN_INTENT_DATA,\n                SUGGEST_COLUMN_QUERY\n        });\n\n        if (sUriMatcher.match(uri) < 1) {\n            /* URI is not recognized, return an empty Cursor */\n            return null;\n        }\n        switch (sUriMatcher.match(uri)) {\n            case activities_ID:\n            case conditions_ID:\n            case diary_ID:\n            case diary_image_ID:\n            case diary_location_ID:\n                if (selection != null) {\n                    selection = selection + \" AND \";\n                } else {\n                    selection = \"\";\n                }\n                selection = selection + \"_id=\" + uri.getLastPathSegment();\n            default:\n                /* empty */\n        }\n\n        switch (sUriMatcher.match(uri)) {\n            case activities_ID: /* intended fall through */\n            case activities:\n                int n;\n                boolean hasDiaryJoin = false;\n                String tables = ActivityDiaryContract.DiaryActivity.TABLE_NAME;\n                if (TextUtils.isEmpty(sortOrder)) {\n                    sortOrder = ActivityDiaryContract.DiaryActivity.SORT_ORDER_DEFAULT;\n                }\n                n = 0;\n                while(n < projection.length){\n                    if(ActivityDiaryContract.DiaryActivity.X_AVG_DURATION.equals(projection[n])){\n                        projection[n] = \"AVG(\" + ActivityDiaryContract.Diary.END + \" - \"\n                                + ActivityDiaryContract.Diary.START + \") AS \"\n                                + ActivityDiaryContract.DiaryActivity.X_AVG_DURATION;\n                        hasDiaryJoin = true;\n                    }\n                    if(ActivityDiaryContract.DiaryActivity.X_START_OF_LAST.equals(projection[n])){\n                        projection[n] = \"xx_start AS \"\n                                + ActivityDiaryContract.DiaryActivity.X_START_OF_LAST;\n                        hasDiaryJoin = true;\n                    }\n                    n++;\n                }\n                if(hasDiaryJoin){\n                    n = 0;\n                    while(n < projection.length) {\n                        if(ActivityDiaryContract.DiaryActivity._ID.equals(projection[n])){\n                            projection[n] = ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\"\n                                    + ActivityDiaryContract.DiaryActivity._ID;\n                        }\n                        n++;\n                    }\n                    selection = selection.replaceAll(\" \" + ActivityDiaryContract.DiaryActivity._ID, \" \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID);\n                    selection = selection.replaceAll(ActivityDiaryContract.DiaryActivity._DELETED, ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._DELETED);\n\n                    tables = tables + \", \" + ActivityDiaryContract.Diary.TABLE_NAME;\n                    tables = tables + \", (SELECT xx_ref, \" + ActivityDiaryContract.Diary.START + \" as xx_start FROM \" + ActivityDiaryContract.Diary.TABLE_NAME + \",\"\n                                    +     \"(SELECT \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID + \" AS xx_ref,\"\n                                                 + \" MAX(\" + ActivityDiaryContract.Diary.TABLE_NAME + \".\" + ActivityDiaryContract.Diary.END + \") AS xx_ref_end\"\n                                    +     \" FROM \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \", \" + ActivityDiaryContract.Diary.TABLE_NAME\n                                    +     \" WHERE \" +  ActivityDiaryContract.Diary.TABLE_NAME + \".\" + ActivityDiaryContract.Diary.ACT_ID\n                                    +           \" = \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID\n                                    +     \" GROUP BY \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID\n                                    +     \")\"\n                                    +    \" WHERE \" +  ActivityDiaryContract.Diary.TABLE_NAME + \".\" + ActivityDiaryContract.Diary.END + \" = xx_ref_end\"\n                                    +  \")\"\n                                        ;\n\n                    selection = selection + \" AND \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID + \" = \" + ActivityDiaryContract.Diary.TABLE_NAME + \".\" + ActivityDiaryContract.Diary.ACT_ID\n                                          + \" AND \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID + \" = xx_ref\";\n\n                    grouping = ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID;\n\n                }\n                qBuilder.setTables(tables);\n                break;\n\n            case diary_image_ID: /* intended fall through */\n            case diary_image:\n                qBuilder.setTables(ActivityDiaryContract.DiaryImage.TABLE_NAME);\n                if (TextUtils.isEmpty(sortOrder))\n                    sortOrder = ActivityDiaryContract.DiaryImage.SORT_ORDER_DEFAULT;\n                break;\n            case diary_location_ID: /* intended fall through */\n            case diary_location:\n                qBuilder.setTables(ActivityDiaryContract.DiaryLocation.TABLE_NAME);\n                if (TextUtils.isEmpty(sortOrder))\n                    sortOrder = ActivityDiaryContract.DiaryLocation.SORT_ORDER_DEFAULT;\n                break;\n            case diary_ID: /* intended fall through */\n            case diary:\n                /* rewrite projection, to prefix with tables */\n                qBuilder.setTables(ActivityDiaryContract.Diary.TABLE_NAME + \" INNER JOIN \" +\n                        ActivityDiaryContract.DiaryActivity.TABLE_NAME + \" ON \" +\n                        ActivityDiaryContract.Diary.TABLE_NAME + \".\" + ActivityDiaryContract.Diary.ACT_ID + \" = \" +\n                        ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID\n                );\n                if (TextUtils.isEmpty(sortOrder))\n                    sortOrder = ActivityDiaryContract.Diary.SORT_ORDER_DEFAULT;\n                break;\n            case diary_stats:\n                useRawQuery = true;\n                List<String> l = uri.getPathSegments();\n                String start;\n                String end;\n\n                if(l.size() == 3){\n                    // we have a range query with start and end timestamps here\n                    start = l.get(1);\n                    end = l.get(2);\n                }else{\n                    start = \"0\";\n                    end = \"6156000000000\"; // this is roughly 200 year since epoch, congratulations if this lasted so long...\n                }\n\n                String subselect = \"SELECT SUM(MIN(IFNULL(\" + ActivityDiaryContract.Diary.END + \",strftime('%s','now') * 1000), \" + end + \") - \"\n                        + \"MAX(\" + ActivityDiaryContract.Diary.START + \", \" + start + \")) from \" + ActivityDiaryContract.Diary.TABLE_NAME\n                        + \" WHERE ((start >= \" + start + \" AND start < \" + end + \") OR (end > \" + start + \" AND end <= \" + end + \") OR (start < \" + start + \" AND end > \" + end + \"))\";\n\n                if (selection != null && selection.length() > 0) {\n                    subselect += \" AND (\" + selection + \")\";\n                }\n\n                sql = \"SELECT \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity.NAME + \" as \" + ActivityDiaryContract.DiaryStats.NAME\n                        + \", \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity.COLOR + \" as \" + ActivityDiaryContract.DiaryStats.COLOR\n                        + \", SUM(MIN(IFNULL(\" + ActivityDiaryContract.Diary.END + \",strftime('%s','now') * 1000), \" + end + \") - MAX(\" + start + \", \" + ActivityDiaryContract.Diary.START + \")) as \" + ActivityDiaryContract.DiaryStats.DURATION\n                        + \", (SUM(MIN(IFNULL(\" + ActivityDiaryContract.Diary.END + \",strftime('%s','now') * 1000), \" + end + \") - MAX(\" + start + \", \" + ActivityDiaryContract.Diary.START + \")) * 100.0 \" +\n                        \"/ (\" + subselect + \")) as \" + ActivityDiaryContract.DiaryStats.PORTION\n                        + \" FROM \" + ActivityDiaryContract.Diary.TABLE_NAME + \", \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME\n                        + \" WHERE \" + ActivityDiaryContract.Diary.TABLE_NAME + \".\" + ActivityDiaryContract.Diary.ACT_ID + \" = \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID + \" AND\"\n                        + \" ((start >= \" + start + \" AND start < \" + end + \") OR (end > \" + start + \" AND end <= \" + end + \") OR (start < \" + start + \" AND end > \" + end + \"))\"\n                ;\n                if(selection != null && selection.length() > 0) {\n                    sql += \" AND (\" + selection + \")\";\n                    String[] newArgs = Arrays.copyOf(selectionArgs, selectionArgs.length * 2);\n                    System.arraycopy(selectionArgs, 0, newArgs, selectionArgs.length, selectionArgs.length);\n                    selectionArgs = newArgs;\n                }\n                sql += \" GROUP BY \" + ActivityDiaryContract.DiaryActivity.TABLE_NAME + \".\" + ActivityDiaryContract.DiaryActivity._ID;\n                if (sortOrder != null && sortOrder.length() > 0) {\n                    sql += \" ORDER by \" + sortOrder;\n                }\n                break;\n\n            case search_recent_suggestion:\n\n                sql = \"SELECT \" + ActivityDiaryContract.DiarySearchSuggestion.SUGGESTION + \", \" +\n                        ActivityDiaryContract.DiarySearchSuggestion.ACTION + \" FROM \" +\n                        ActivityDiaryContract.DiarySearchSuggestion.TABLE_NAME +\n                        \" ORDER BY \" + ActivityDiaryContract.DiarySearchSuggestion._ID + \" DESC\";\n\n                c = mOpenHelper.getReadableDatabase().rawQuery(sql, selectionArgs);\n                if (c != null && c.moveToFirst()) {\n                    do {\n                        Object icon = null;\n                        String action = c.getString(1);\n                        String q = c.getString(0); // what do we want to display\n\n                        if(action.equals(SEARCH_ACTIVITY)) {\n                            /* icon stays null */\n                            int i = Integer.parseInt(q);\n                            q = ActivityHelper.helper.activityWithId(i).getName();\n                        }else if(action.equals(SEARCH_NOTE)){\n                            q = getContext().getResources().getString(R.string.search_notes, q);\n                            icon = R.drawable.ic_search;\n                        }else if(action.equals(SEARCH_GLOBAL) || action.equals(Intent.ACTION_SEARCH)){\n                            q = getContext().getResources().getString(R.string.search_diary, q);\n                            icon = R.drawable.ic_search;\n                        }else if(action.equals(SEARCH_DATE)){\n                            q = getContext().getResources().getString(R.string.search_date, q);\n                            icon = R.drawable.ic_calendar;\n                        }\n\n                        result.addRow(new Object[]{id++,\n                                q,\n                                /* icon */ icon,\n                                /* intent action */ action,\n                                /* intent data */ Uri.withAppendedPath(SEARCH_URI, c.getString(0)),\n                                /* rewrite query */c.getString(0)\n                        });\n                    } while (c.moveToNext());\n                }\n\n                return result;\n\n\n            case search_suggestion:\n                String query = uri.getLastPathSegment(); //.toLowerCase();\n\n                if (query != null && query.length() > 0) {\n                    // activities matching the current search\n                    ArrayList<DiaryActivity> filtered = ActivityHelper.helper.sortedActivities(query);\n\n                    // TODO: make the amount of activities shown configurable\n                    for (int i = 0; i < 3; i++) {\n                        if (i < filtered.size()) {\n                            result.addRow(new Object[]{id++,\n                                    filtered.get(i).getName(),\n                                    /* icon */ null,\n                                    /* intent action */ SEARCH_ACTIVITY,\n                                    /* intent data */ Uri.withAppendedPath(SEARCH_URI, Integer.toString(filtered.get(i).getId())),\n                                    /* rewrite query */filtered.get(i).getName()\n                            });\n                        }\n                    }\n                    // Notes\n                    result.addRow(new Object[]{id++,\n                            getContext().getResources().getString(R.string.search_notes, query),\n                            /* icon */ R.drawable.ic_search,\n                            /* intent action */ SEARCH_NOTE,\n                            /* intent data */ Uri.withAppendedPath(SEARCH_URI, query),\n                            /* rewrite query */ query\n                    });\n\n                    // Global search\n                    result.addRow(new Object[]{id++,\n                            getContext().getResources().getString(R.string.search_diary, query),\n                            /* icon */ R.drawable.ic_search,\n                            /* intent action */ SEARCH_GLOBAL,\n                            /* intent data */ Uri.withAppendedPath(SEARCH_URI, query),\n                            /* rewrite query */ query\n                    });\n\n                    // Date\n                    result.addRow(new Object[]{id++,\n                            getContext().getResources().getString(R.string.search_date, query),\n                            /* icon */ R.drawable.ic_calendar,\n                            /* intent action */ SEARCH_DATE,\n                            /* intent data */ Uri.withAppendedPath(SEARCH_URI, query),\n                            /* rewrite query */ query\n                    });\n\n                    // has Pictures\n                    // TODO: add picture search\n\n                    // Location (GPS)\n                    // TODO: add location search\n\n                }\n                return result;\n\n            case conditions_ID:\n                /* intended fall through */\n            case conditions:\n//                qBuilder.setTables(ActivityDiaryContract.Condition.TABLE_NAME);\n                /* TODO #18               if (TextUtils.isEmpty(sortOrder)) sortOrder = ActivityDiaryContract.Conditions.SORT_ORDER_DEFAULT; */\n            default:\n                /* empty */\n        }\n\n        if (useRawQuery) {\n            c = mOpenHelper.getReadableDatabase().rawQuery(sql, selectionArgs);\n        } else {\n            c = qBuilder.query(mOpenHelper.getReadableDatabase(),\n                    projection,\n                    selection,\n                    selectionArgs,\n                    grouping,\n                    null,\n                    sortOrder);\n        }\n        c.setNotificationUri(getContext().getContentResolver(), uri);\n        return c;\n    }", "signature": "Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "full_signature": "@Nullable @Override public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "class_method_signature": "ActivityDiaryContentProvider.query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder)", "testcase": false, "constructor": false, "invocations": ["match", "match", "getLastPathSegment", "match", "isEmpty", "equals", "equals", "equals", "replaceAll", "replaceAll", "setTables", "setTables", "isEmpty", "setTables", "isEmpty", "setTables", "isEmpty", "getPathSegments", "size", "get", "get", "length", "length", "copyOf", "arraycopy", "length", "rawQuery", "getReadableDatabase", "moveToFirst", "getString", "getString", "equals", "parseInt", "getName", "activityWithId", "equals", "getString", "getResources", "getContext", "equals", "equals", "getString", "getResources", "getContext", "equals", "getString", "getResources", "getContext", "addRow", "withAppendedPath", "getString", "getString", "moveToNext", "getLastPathSegment", "length", "sortedActivities", "size", "addRow", "getName", "get", "withAppendedPath", "toString", "getId", "get", "getName", "get", "addRow", "getString", "getResources", "getContext", "withAppendedPath", "addRow", "getString", "getResources", "getContext", "withAppendedPath", "addRow", "getString", "getResources", "getContext", "withAppendedPath", "rawQuery", "getReadableDatabase", "query", "getReadableDatabase", "setNotificationUri", "getContentResolver", "getContext"]}, "repository": {"repo_id": 107872025, "url": "https://github.com/ramack/ActivityDiary", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 55, "size": 9139, "license": "licensed"}}