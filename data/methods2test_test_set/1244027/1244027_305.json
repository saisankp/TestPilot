{"test_class": {"identifier": "Base64Test", "superclass": "", "interfaces": "", "fields": [], "file": "modeshape-common/src/test/java/org/modeshape/common/util/Base64Test.java"}, "test_case": {"identifier": "testEncodeEmptyByteArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeEmptyByteArray() {\n        String result = Base64.encodeBytes(new byte[] {});\n        assertThat(result, is(notNullValue()));\n        assertThat(result.length(), is(0));\n    }", "signature": "void testEncodeEmptyByteArray()", "full_signature": "@Test public void testEncodeEmptyByteArray()", "class_method_signature": "Base64Test.testEncodeEmptyByteArray()", "testcase": true, "constructor": false, "invocations": ["encodeBytes", "assertThat", "is", "notNullValue", "assertThat", "length", "is"]}, "focal_class": {"identifier": "Base64", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int NO_OPTIONS = 0;", "modifier": "public static final", "type": "int", "declarator": "NO_OPTIONS = 0", "var_name": "NO_OPTIONS"}, {"original_string": "public static final int ENCODE = 1;", "modifier": "public static final", "type": "int", "declarator": "ENCODE = 1", "var_name": "ENCODE"}, {"original_string": "public static final int DECODE = 0;", "modifier": "public static final", "type": "int", "declarator": "DECODE = 0", "var_name": "DECODE"}, {"original_string": "public static final int GZIP = 2;", "modifier": "public static final", "type": "int", "declarator": "GZIP = 2", "var_name": "GZIP"}, {"original_string": "public static final int DONT_GUNZIP = 4;", "modifier": "public static final", "type": "int", "declarator": "DONT_GUNZIP = 4", "var_name": "DONT_GUNZIP"}, {"original_string": "public static final int DO_BREAK_LINES = 8;", "modifier": "public static final", "type": "int", "declarator": "DO_BREAK_LINES = 8", "var_name": "DO_BREAK_LINES"}, {"original_string": "public static final int URL_SAFE = 16;", "modifier": "public static final", "type": "int", "declarator": "URL_SAFE = 16", "var_name": "URL_SAFE"}, {"original_string": "public static final int ORDERED = 32;", "modifier": "public static final", "type": "int", "declarator": "ORDERED = 32", "var_name": "ORDERED"}, {"original_string": "private static final int MAX_LINE_LENGTH = 76;", "modifier": "private static final", "type": "int", "declarator": "MAX_LINE_LENGTH = 76", "var_name": "MAX_LINE_LENGTH"}, {"original_string": "private static final byte EQUALS_SIGN = (byte)'=';", "modifier": "private static final", "type": "byte", "declarator": "EQUALS_SIGN = (byte)'='", "var_name": "EQUALS_SIGN"}, {"original_string": "private static final byte NEW_LINE = (byte)'\\n';", "modifier": "private static final", "type": "byte", "declarator": "NEW_LINE = (byte)'\\n'", "var_name": "NEW_LINE"}, {"original_string": "private static final String PREFERRED_ENCODING = \"US-ASCII\";", "modifier": "private static final", "type": "String", "declarator": "PREFERRED_ENCODING = \"US-ASCII\"", "var_name": "PREFERRED_ENCODING"}, {"original_string": "private static final byte WHITE_SPACE_ENC = -5;", "modifier": "private static final", "type": "byte", "declarator": "WHITE_SPACE_ENC = -5", "var_name": "WHITE_SPACE_ENC"}, {"original_string": "private static final byte EQUALS_SIGN_ENC = -1;", "modifier": "private static final", "type": "byte", "declarator": "EQUALS_SIGN_ENC = -1", "var_name": "EQUALS_SIGN_ENC"}, {"original_string": "private static final byte[] _STANDARD_ALPHABET = {(byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F',\n        (byte)'G', (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N', (byte)'O', (byte)'P', (byte)'Q',\n        (byte)'R', (byte)'S', (byte)'T', (byte)'U', (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z', (byte)'a', (byte)'b',\n        (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g', (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m',\n        (byte)'n', (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', (byte)'v', (byte)'w', (byte)'x',\n        (byte)'y', (byte)'z', (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', (byte)'6', (byte)'7', (byte)'8',\n        (byte)'9', (byte)'+', (byte)'/'};", "modifier": "private static final", "type": "byte[]", "declarator": "_STANDARD_ALPHABET = {(byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F',\n        (byte)'G', (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N', (byte)'O', (byte)'P', (byte)'Q',\n        (byte)'R', (byte)'S', (byte)'T', (byte)'U', (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z', (byte)'a', (byte)'b',\n        (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g', (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m',\n        (byte)'n', (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', (byte)'v', (byte)'w', (byte)'x',\n        (byte)'y', (byte)'z', (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', (byte)'6', (byte)'7', (byte)'8',\n        (byte)'9', (byte)'+', (byte)'/'}", "var_name": "_STANDARD_ALPHABET"}, {"original_string": "private static final byte[] _STANDARD_DECODABET = {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 0 - 8\n        -5, -5, // Whitespace: Tab and Linefeed\n        -9, -9, // Decimal 11 - 12\n        -5, // Whitespace: Carriage Return\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n        -9, -9, -9, -9, -9, // Decimal 27 - 31\n        -5, // Whitespace: Space\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n        62, // Plus sign at decimal 43\n        -9, -9, -9, // Decimal 44 - 46\n        63, // Slash at decimal 47\n        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n        -9, -9, -9, // Decimal 58 - 60\n        -1, // Equals sign at decimal 61\n        -9, -9, -9, // Decimal 62 - 64\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n        -9, -9, -9, -9, -9, -9, // Decimal 91 - 96\n        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n        -9, -9, -9, -9, -9 // Decimal 123 - 127\n        , -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "_STANDARD_DECODABET = {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 0 - 8\n        -5, -5, // Whitespace: Tab and Linefeed\n        -9, -9, // Decimal 11 - 12\n        -5, // Whitespace: Carriage Return\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n        -9, -9, -9, -9, -9, // Decimal 27 - 31\n        -5, // Whitespace: Space\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n        62, // Plus sign at decimal 43\n        -9, -9, -9, // Decimal 44 - 46\n        63, // Slash at decimal 47\n        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n        -9, -9, -9, // Decimal 58 - 60\n        -1, // Equals sign at decimal 61\n        -9, -9, -9, // Decimal 62 - 64\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n        -9, -9, -9, -9, -9, -9, // Decimal 91 - 96\n        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n        -9, -9, -9, -9, -9 // Decimal 123 - 127\n        , -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n    }", "var_name": "_STANDARD_DECODABET"}, {"original_string": "private static final byte[] _URL_SAFE_ALPHABET = {(byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F',\n        (byte)'G', (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N', (byte)'O', (byte)'P', (byte)'Q',\n        (byte)'R', (byte)'S', (byte)'T', (byte)'U', (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z', (byte)'a', (byte)'b',\n        (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g', (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m',\n        (byte)'n', (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', (byte)'v', (byte)'w', (byte)'x',\n        (byte)'y', (byte)'z', (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', (byte)'6', (byte)'7', (byte)'8',\n        (byte)'9', (byte)'-', (byte)'_'};", "modifier": "private static final", "type": "byte[]", "declarator": "_URL_SAFE_ALPHABET = {(byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F',\n        (byte)'G', (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N', (byte)'O', (byte)'P', (byte)'Q',\n        (byte)'R', (byte)'S', (byte)'T', (byte)'U', (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z', (byte)'a', (byte)'b',\n        (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g', (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m',\n        (byte)'n', (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', (byte)'v', (byte)'w', (byte)'x',\n        (byte)'y', (byte)'z', (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5', (byte)'6', (byte)'7', (byte)'8',\n        (byte)'9', (byte)'-', (byte)'_'}", "var_name": "_URL_SAFE_ALPHABET"}, {"original_string": "private static final byte[] _URL_SAFE_DECODABET = {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 0 - 8\n        -5, -5, // Whitespace: Tab and Linefeed\n        -9, -9, // Decimal 11 - 12\n        -5, // Whitespace: Carriage Return\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n        -9, -9, -9, -9, -9, // Decimal 27 - 31\n        -5, // Whitespace: Space\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n        -9, // Plus sign at decimal 43\n        -9, // Decimal 44\n        62, // Minus sign at decimal 45\n        -9, // Decimal 46\n        -9, // Slash at decimal 47\n        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n        -9, -9, -9, // Decimal 58 - 60\n        -1, // Equals sign at decimal 61\n        -9, -9, -9, // Decimal 62 - 64\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n        -9, -9, -9, -9, // Decimal 91 - 94\n        63, // Underscore at decimal 95\n        -9, // Decimal 96\n        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n        -9, -9, -9, -9, -9 // Decimal 123 - 127\n        , -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "_URL_SAFE_DECODABET = {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 0 - 8\n        -5, -5, // Whitespace: Tab and Linefeed\n        -9, -9, // Decimal 11 - 12\n        -5, // Whitespace: Carriage Return\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n        -9, -9, -9, -9, -9, // Decimal 27 - 31\n        -5, // Whitespace: Space\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n        -9, // Plus sign at decimal 43\n        -9, // Decimal 44\n        62, // Minus sign at decimal 45\n        -9, // Decimal 46\n        -9, // Slash at decimal 47\n        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, // Numbers zero through nine\n        -9, -9, -9, // Decimal 58 - 60\n        -1, // Equals sign at decimal 61\n        -9, -9, -9, // Decimal 62 - 64\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, // Letters 'A' through 'N'\n        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, // Letters 'O' through 'Z'\n        -9, -9, -9, -9, // Decimal 91 - 94\n        63, // Underscore at decimal 95\n        -9, // Decimal 96\n        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, // Letters 'a' through 'm'\n        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, // Letters 'n' through 'z'\n        -9, -9, -9, -9, -9 // Decimal 123 - 127\n        , -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n    }", "var_name": "_URL_SAFE_DECODABET"}, {"original_string": "private static final byte[] _ORDERED_ALPHABET = {(byte)'-', (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5',\n        (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',\n        (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N', (byte)'O', (byte)'P', (byte)'Q', (byte)'R',\n        (byte)'S', (byte)'T', (byte)'U', (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z', (byte)'_', (byte)'a', (byte)'b',\n        (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g', (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m',\n        (byte)'n', (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', (byte)'v', (byte)'w', (byte)'x',\n        (byte)'y', (byte)'z'};", "modifier": "private static final", "type": "byte[]", "declarator": "_ORDERED_ALPHABET = {(byte)'-', (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5',\n        (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',\n        (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N', (byte)'O', (byte)'P', (byte)'Q', (byte)'R',\n        (byte)'S', (byte)'T', (byte)'U', (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z', (byte)'_', (byte)'a', (byte)'b',\n        (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g', (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m',\n        (byte)'n', (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u', (byte)'v', (byte)'w', (byte)'x',\n        (byte)'y', (byte)'z'}", "var_name": "_ORDERED_ALPHABET"}, {"original_string": "private static final byte[] _ORDERED_DECODABET = {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 0 - 8\n        -5, -5, // Whitespace: Tab and Linefeed\n        -9, -9, // Decimal 11 - 12\n        -5, // Whitespace: Carriage Return\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n        -9, -9, -9, -9, -9, // Decimal 27 - 31\n        -5, // Whitespace: Space\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n        -9, // Plus sign at decimal 43\n        -9, // Decimal 44\n        0, // Minus sign at decimal 45\n        -9, // Decimal 46\n        -9, // Slash at decimal 47\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, // Numbers zero through nine\n        -9, -9, -9, // Decimal 58 - 60\n        -1, // Equals sign at decimal 61\n        -9, -9, -9, // Decimal 62 - 64\n        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, // Letters 'A' through 'M'\n        24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, // Letters 'N' through 'Z'\n        -9, -9, -9, -9, // Decimal 91 - 94\n        37, // Underscore at decimal 95\n        -9, // Decimal 96\n        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // Letters 'a' through 'm'\n        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, // Letters 'n' through 'z'\n        -9, -9, -9, -9, -9 // Decimal 123 - 127\n        , -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "_ORDERED_DECODABET = {-9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 0 - 8\n        -5, -5, // Whitespace: Tab and Linefeed\n        -9, -9, // Decimal 11 - 12\n        -5, // Whitespace: Carriage Return\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 14 - 26\n        -9, -9, -9, -9, -9, // Decimal 27 - 31\n        -5, // Whitespace: Space\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 33 - 42\n        -9, // Plus sign at decimal 43\n        -9, // Decimal 44\n        0, // Minus sign at decimal 45\n        -9, // Decimal 46\n        -9, // Slash at decimal 47\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, // Numbers zero through nine\n        -9, -9, -9, // Decimal 58 - 60\n        -1, // Equals sign at decimal 61\n        -9, -9, -9, // Decimal 62 - 64\n        11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, // Letters 'A' through 'M'\n        24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, // Letters 'N' through 'Z'\n        -9, -9, -9, -9, // Decimal 91 - 94\n        37, // Underscore at decimal 95\n        -9, // Decimal 96\n        38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, // Letters 'a' through 'm'\n        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, // Letters 'n' through 'z'\n        -9, -9, -9, -9, -9 // Decimal 123 - 127\n        , -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 128 - 139\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 140 - 152\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 153 - 165\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 166 - 178\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 179 - 191\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 192 - 204\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 205 - 217\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 218 - 230\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, // Decimal 231 - 243\n        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9 // Decimal 244 - 255\n    }", "var_name": "_ORDERED_DECODABET"}], "methods": [{"identifier": "getAlphabet", "parameters": "( int options )", "modifiers": "private static final", "return": "byte[]", "signature": "byte[] getAlphabet( int options )", "full_signature": "private static final byte[] getAlphabet( int options )", "class_method_signature": "Base64.getAlphabet( int options )", "testcase": false, "constructor": false}, {"identifier": "getDecodabet", "parameters": "( int options )", "modifiers": "private static final", "return": "byte[]", "signature": "byte[] getDecodabet( int options )", "full_signature": "private static final byte[] getDecodabet( int options )", "class_method_signature": "Base64.getDecodabet( int options )", "testcase": false, "constructor": false}, {"identifier": "encode3to4", "parameters": "( byte[] b4,\n                                      byte[] threeBytes,\n                                      int numSigBytes,\n                                      int options )", "modifiers": "private static", "return": "byte[]", "signature": "byte[] encode3to4( byte[] b4,\n                                      byte[] threeBytes,\n                                      int numSigBytes,\n                                      int options )", "full_signature": "private static byte[] encode3to4( byte[] b4,\n                                      byte[] threeBytes,\n                                      int numSigBytes,\n                                      int options )", "class_method_signature": "Base64.encode3to4( byte[] b4,\n                                      byte[] threeBytes,\n                                      int numSigBytes,\n                                      int options )", "testcase": false, "constructor": false}, {"identifier": "encode3to4", "parameters": "( byte[] source,\n                                      int srcOffset,\n                                      int numSigBytes,\n                                      byte[] destination,\n                                      int destOffset,\n                                      int options )", "modifiers": "private static", "return": "byte[]", "signature": "byte[] encode3to4( byte[] source,\n                                      int srcOffset,\n                                      int numSigBytes,\n                                      byte[] destination,\n                                      int destOffset,\n                                      int options )", "full_signature": "private static byte[] encode3to4( byte[] source,\n                                      int srcOffset,\n                                      int numSigBytes,\n                                      byte[] destination,\n                                      int destOffset,\n                                      int options )", "class_method_signature": "Base64.encode3to4( byte[] source,\n                                      int srcOffset,\n                                      int numSigBytes,\n                                      byte[] destination,\n                                      int destOffset,\n                                      int options )", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "( java.io.InputStream source )", "modifiers": "public static", "return": "String", "signature": "String encode( java.io.InputStream source )", "full_signature": "public static String encode( java.io.InputStream source )", "class_method_signature": "Base64.encode( java.io.InputStream source )", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "( java.io.InputStream source,\n                                 int options )", "modifiers": "public static", "return": "String", "signature": "String encode( java.io.InputStream source,\n                                 int options )", "full_signature": "public static String encode( java.io.InputStream source,\n                                 int options )", "class_method_signature": "Base64.encode( java.io.InputStream source,\n                                 int options )", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "( java.nio.ByteBuffer raw,\n                               java.nio.ByteBuffer encoded )", "modifiers": "public static", "return": "void", "signature": "void encode( java.nio.ByteBuffer raw,\n                               java.nio.ByteBuffer encoded )", "full_signature": "public static void encode( java.nio.ByteBuffer raw,\n                               java.nio.ByteBuffer encoded )", "class_method_signature": "Base64.encode( java.nio.ByteBuffer raw,\n                               java.nio.ByteBuffer encoded )", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "( java.nio.ByteBuffer raw,\n                               java.nio.CharBuffer encoded )", "modifiers": "public static", "return": "void", "signature": "void encode( java.nio.ByteBuffer raw,\n                               java.nio.CharBuffer encoded )", "full_signature": "public static void encode( java.nio.ByteBuffer raw,\n                               java.nio.CharBuffer encoded )", "class_method_signature": "Base64.encode( java.nio.ByteBuffer raw,\n                               java.nio.CharBuffer encoded )", "testcase": false, "constructor": false}, {"identifier": "encodeObject", "parameters": "( java.io.Serializable serializableObject )", "modifiers": "public static", "return": "String", "signature": "String encodeObject( java.io.Serializable serializableObject )", "full_signature": "public static String encodeObject( java.io.Serializable serializableObject )", "class_method_signature": "Base64.encodeObject( java.io.Serializable serializableObject )", "testcase": false, "constructor": false}, {"identifier": "encodeObject", "parameters": "( java.io.Serializable serializableObject,\n                                       int options )", "modifiers": "public static", "return": "String", "signature": "String encodeObject( java.io.Serializable serializableObject,\n                                       int options )", "full_signature": "public static String encodeObject( java.io.Serializable serializableObject,\n                                       int options )", "class_method_signature": "Base64.encodeObject( java.io.Serializable serializableObject,\n                                       int options )", "testcase": false, "constructor": false}, {"identifier": "encodeBytes", "parameters": "( byte[] source )", "modifiers": "public static", "return": "String", "signature": "String encodeBytes( byte[] source )", "full_signature": "public static String encodeBytes( byte[] source )", "class_method_signature": "Base64.encodeBytes( byte[] source )", "testcase": false, "constructor": false}, {"identifier": "encodeBytes", "parameters": "( byte[] source,\n                                      int options )", "modifiers": "public static", "return": "String", "signature": "String encodeBytes( byte[] source,\n                                      int options )", "full_signature": "public static String encodeBytes( byte[] source,\n                                      int options )", "class_method_signature": "Base64.encodeBytes( byte[] source,\n                                      int options )", "testcase": false, "constructor": false}, {"identifier": "encodeBytes", "parameters": "( byte[] source,\n                                      int off,\n                                      int len )", "modifiers": "public static", "return": "String", "signature": "String encodeBytes( byte[] source,\n                                      int off,\n                                      int len )", "full_signature": "public static String encodeBytes( byte[] source,\n                                      int off,\n                                      int len )", "class_method_signature": "Base64.encodeBytes( byte[] source,\n                                      int off,\n                                      int len )", "testcase": false, "constructor": false}, {"identifier": "encodeBytes", "parameters": "( byte[] source,\n                                      int off,\n                                      int len,\n                                      int options )", "modifiers": "public static", "return": "String", "signature": "String encodeBytes( byte[] source,\n                                      int off,\n                                      int len,\n                                      int options )", "full_signature": "public static String encodeBytes( byte[] source,\n                                      int off,\n                                      int len,\n                                      int options )", "class_method_signature": "Base64.encodeBytes( byte[] source,\n                                      int off,\n                                      int len,\n                                      int options )", "testcase": false, "constructor": false}, {"identifier": "encodeBytesToBytes", "parameters": "( byte[] source )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeBytesToBytes( byte[] source )", "full_signature": "public static byte[] encodeBytesToBytes( byte[] source )", "class_method_signature": "Base64.encodeBytesToBytes( byte[] source )", "testcase": false, "constructor": false}, {"identifier": "encodeBytesToBytes", "parameters": "( byte[] source,\n                                             int off,\n                                             int len,\n                                             int options )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeBytesToBytes( byte[] source,\n                                             int off,\n                                             int len,\n                                             int options )", "full_signature": "public static byte[] encodeBytesToBytes( byte[] source,\n                                             int off,\n                                             int len,\n                                             int options )", "class_method_signature": "Base64.encodeBytesToBytes( byte[] source,\n                                             int off,\n                                             int len,\n                                             int options )", "testcase": false, "constructor": false}, {"identifier": "decode4to3", "parameters": "( byte[] source,\n                                   int srcOffset,\n                                   byte[] destination,\n                                   int destOffset,\n                                   int options )", "modifiers": "private static", "return": "int", "signature": "int decode4to3( byte[] source,\n                                   int srcOffset,\n                                   byte[] destination,\n                                   int destOffset,\n                                   int options )", "full_signature": "private static int decode4to3( byte[] source,\n                                   int srcOffset,\n                                   byte[] destination,\n                                   int destOffset,\n                                   int options )", "class_method_signature": "Base64.decode4to3( byte[] source,\n                                   int srcOffset,\n                                   byte[] destination,\n                                   int destOffset,\n                                   int options )", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "( byte[] source )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode( byte[] source )", "full_signature": "public static byte[] decode( byte[] source )", "class_method_signature": "Base64.decode( byte[] source )", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "( byte[] source,\n                                 int off,\n                                 int len,\n                                 int options )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode( byte[] source,\n                                 int off,\n                                 int len,\n                                 int options )", "full_signature": "public static byte[] decode( byte[] source,\n                                 int off,\n                                 int len,\n                                 int options )", "class_method_signature": "Base64.decode( byte[] source,\n                                 int off,\n                                 int len,\n                                 int options )", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "( String s )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode( String s )", "full_signature": "public static byte[] decode( String s )", "class_method_signature": "Base64.decode( String s )", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "( String s,\n                                 int options )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode( String s,\n                                 int options )", "full_signature": "public static byte[] decode( String s,\n                                 int options )", "class_method_signature": "Base64.decode( String s,\n                                 int options )", "testcase": false, "constructor": false}, {"identifier": "decodeToObject", "parameters": "( String encodedObject )", "modifiers": "public static", "return": "Object", "signature": "Object decodeToObject( String encodedObject )", "full_signature": "public static Object decodeToObject( String encodedObject )", "class_method_signature": "Base64.decodeToObject( String encodedObject )", "testcase": false, "constructor": false}, {"identifier": "decodeToObject", "parameters": "( String encodedObject,\n                                         int options,\n                                         final ClassLoader loader )", "modifiers": "public static", "return": "Object", "signature": "Object decodeToObject( String encodedObject,\n                                         int options,\n                                         final ClassLoader loader )", "full_signature": "public static Object decodeToObject( String encodedObject,\n                                         int options,\n                                         final ClassLoader loader )", "class_method_signature": "Base64.decodeToObject( String encodedObject,\n                                         int options,\n                                         final ClassLoader loader )", "testcase": false, "constructor": false}, {"identifier": "encodeToFile", "parameters": "( byte[] dataToEncode,\n                                     String filename )", "modifiers": "public static", "return": "void", "signature": "void encodeToFile( byte[] dataToEncode,\n                                     String filename )", "full_signature": "public static void encodeToFile( byte[] dataToEncode,\n                                     String filename )", "class_method_signature": "Base64.encodeToFile( byte[] dataToEncode,\n                                     String filename )", "testcase": false, "constructor": false}, {"identifier": "decodeToFile", "parameters": "( String dataToDecode,\n                                     String filename )", "modifiers": "public static", "return": "void", "signature": "void decodeToFile( String dataToDecode,\n                                     String filename )", "full_signature": "public static void decodeToFile( String dataToDecode,\n                                     String filename )", "class_method_signature": "Base64.decodeToFile( String dataToDecode,\n                                     String filename )", "testcase": false, "constructor": false}, {"identifier": "decodeFromFile", "parameters": "( String filename )", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decodeFromFile( String filename )", "full_signature": "public static byte[] decodeFromFile( String filename )", "class_method_signature": "Base64.decodeFromFile( String filename )", "testcase": false, "constructor": false}, {"identifier": "encodeFromFile", "parameters": "( String filename )", "modifiers": "public static", "return": "String", "signature": "String encodeFromFile( String filename )", "full_signature": "public static String encodeFromFile( String filename )", "class_method_signature": "Base64.encodeFromFile( String filename )", "testcase": false, "constructor": false}, {"identifier": "encodeFileToFile", "parameters": "( String infile,\n                                         String outfile )", "modifiers": "public static", "return": "void", "signature": "void encodeFileToFile( String infile,\n                                         String outfile )", "full_signature": "public static void encodeFileToFile( String infile,\n                                         String outfile )", "class_method_signature": "Base64.encodeFileToFile( String infile,\n                                         String outfile )", "testcase": false, "constructor": false}, {"identifier": "decodeFileToFile", "parameters": "( String infile,\n                                         String outfile )", "modifiers": "public static", "return": "void", "signature": "void decodeFileToFile( String infile,\n                                         String outfile )", "full_signature": "public static void decodeFileToFile( String infile,\n                                         String outfile )", "class_method_signature": "Base64.decodeFileToFile( String infile,\n                                         String outfile )", "testcase": false, "constructor": false}, {"identifier": "Base64", "parameters": "()", "modifiers": "private", "return": "", "signature": " Base64()", "full_signature": "private  Base64()", "class_method_signature": "Base64.Base64()", "testcase": false, "constructor": true}], "file": "modeshape-common/src/main/java/org/modeshape/common/util/Base64.java"}, "focal_method": {"identifier": "encodeBytes", "parameters": "( byte[] source )", "modifiers": "public static", "return": "String", "body": "public static String encodeBytes( byte[] source ) {\n        // Since we're not going to have the GZIP encoding turned on,\n        // we're not going to have an java.io.IOException thrown, so\n        // we should not force the user to have to catch it.\n        String encoded = null;\n        try {\n            encoded = encodeBytes(source, 0, source.length, NO_OPTIONS);\n        } catch (java.io.IOException ex) {\n            assert false : ex.getMessage();\n        } // end catch\n        assert encoded != null;\n        return encoded;\n    }", "signature": "String encodeBytes( byte[] source )", "full_signature": "public static String encodeBytes( byte[] source )", "class_method_signature": "Base64.encodeBytes( byte[] source )", "testcase": false, "constructor": false, "invocations": ["encodeBytes", "getMessage"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}