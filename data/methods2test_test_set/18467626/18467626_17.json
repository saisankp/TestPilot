{"test_class": {"identifier": "TrackUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "library/src/test/java/com/github/devnied/emvnfccard/utils/TrackUtilsTest.java"}, "test_case": {"identifier": "track2EquivalentTest2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void track2EquivalentTest2() {\n\t\tEmvTrack2 track2 = TrackUtils.extractTrack2EquivalentData(BytesUtils.fromString(\"55 55 55 66 88 77 66 55 66 7D 11 05 62 01 69 28 07 65 90 00 0F\"));\n\n\t\tAssertions.assertThat(track2).isNotNull();\n\t\tAssertions.assertThat(track2.getCardNumber()).isEqualTo(\"5555556688776655667\");\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"MM/yyyy\");\n\t\tAssertions.assertThat(sdf.format(track2.getExpireDate())).isEqualTo(\"05/2011\");\n\t\tAssertions.assertThat(track2.getService()).isNotNull();\n\t\tAssertions.assertThat(track2.getService().getServiceCode1()).isEqualTo(ServiceCode1Enum.NATIONAL_ICC);\n\t\tAssertions.assertThat(track2.getService().getServiceCode2()).isEqualTo(ServiceCode2Enum.BY_ISSUER);\n\t\tAssertions.assertThat(track2.getService().getServiceCode3()).isEqualTo(ServiceCode3Enum.NO_RESTRICTION_PIN_REQUIRED);\n\t}", "signature": "void track2EquivalentTest2()", "full_signature": "@Test public void track2EquivalentTest2()", "class_method_signature": "TrackUtilsTest.track2EquivalentTest2()", "testcase": true, "constructor": false, "invocations": ["extractTrack2EquivalentData", "fromString", "isNotNull", "assertThat", "isEqualTo", "assertThat", "getCardNumber", "isEqualTo", "assertThat", "format", "getExpireDate", "isNotNull", "assertThat", "getService", "isEqualTo", "assertThat", "getServiceCode1", "getService", "isEqualTo", "assertThat", "getServiceCode2", "getService", "isEqualTo", "assertThat", "getServiceCode3", "getService"]}, "focal_class": {"identifier": "TrackUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TrackUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TrackUtils.class)", "var_name": "LOGGER"}, {"original_string": "public static final String CARD_HOLDER_NAME_SEPARATOR = \"/\";", "modifier": "public static final", "type": "String", "declarator": "CARD_HOLDER_NAME_SEPARATOR = \"/\"", "var_name": "CARD_HOLDER_NAME_SEPARATOR"}, {"original_string": "private static final Pattern TRACK2_EQUIVALENT_PATTERN = Pattern.compile(\"([0-9]{1,19})D([0-9]{4})([0-9]{3})?(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "TRACK2_EQUIVALENT_PATTERN = Pattern.compile(\"([0-9]{1,19})D([0-9]{4})([0-9]{3})?(.*)\")", "var_name": "TRACK2_EQUIVALENT_PATTERN"}, {"original_string": "private static final Pattern TRACK1_PATTERN = Pattern\n\t\t\t.compile(\"%?([A-Z])([0-9]{1,19})(\\\\?[0-9])?\\\\^([^\\\\^]{2,26})\\\\^([0-9]{4}|\\\\^)([0-9]{3}|\\\\^)([^\\\\?]+)\\\\??\");", "modifier": "private static final", "type": "Pattern", "declarator": "TRACK1_PATTERN = Pattern\n\t\t\t.compile(\"%?([A-Z])([0-9]{1,19})(\\\\?[0-9])?\\\\^([^\\\\^]{2,26})\\\\^([0-9]{4}|\\\\^)([0-9]{3}|\\\\^)([^\\\\?]+)\\\\??\")", "var_name": "TRACK1_PATTERN"}], "methods": [{"identifier": "extractTrack2EquivalentData", "parameters": "(final byte[] pRawTrack2)", "modifiers": "public static", "return": "EmvTrack2", "signature": "EmvTrack2 extractTrack2EquivalentData(final byte[] pRawTrack2)", "full_signature": "public static EmvTrack2 extractTrack2EquivalentData(final byte[] pRawTrack2)", "class_method_signature": "TrackUtils.extractTrack2EquivalentData(final byte[] pRawTrack2)", "testcase": false, "constructor": false}, {"identifier": "extractTrack1Data", "parameters": "(final byte[] pRawTrack1)", "modifiers": "public static", "return": "EmvTrack1", "signature": "EmvTrack1 extractTrack1Data(final byte[] pRawTrack1)", "full_signature": "public static EmvTrack1 extractTrack1Data(final byte[] pRawTrack1)", "class_method_signature": "TrackUtils.extractTrack1Data(final byte[] pRawTrack1)", "testcase": false, "constructor": false}, {"identifier": "TrackUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " TrackUtils()", "full_signature": "private  TrackUtils()", "class_method_signature": "TrackUtils.TrackUtils()", "testcase": false, "constructor": true}], "file": "library/src/main/java/com/github/devnied/emvnfccard/utils/TrackUtils.java"}, "focal_method": {"identifier": "extractTrack2EquivalentData", "parameters": "(final byte[] pRawTrack2)", "modifiers": "public static", "return": "EmvTrack2", "body": "public static EmvTrack2 extractTrack2EquivalentData(final byte[] pRawTrack2) {\n\t\tEmvTrack2 ret = null;\n\n\t\tif (pRawTrack2 != null) {\n\t\t\tEmvTrack2 track2 = new EmvTrack2();\n\t\t\ttrack2.setRaw(pRawTrack2);\n\t\t\tString data = BytesUtils.bytesToStringNoSpace(pRawTrack2);\n\t\t\tMatcher m = TRACK2_EQUIVALENT_PATTERN.matcher(data);\n\t\t\t// Check pattern\n\t\t\tif (m.find()) {\n\t\t\t\t// read card number\n\t\t\t\ttrack2.setCardNumber(m.group(1));\n\t\t\t\t// Read expire date\n\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyMM\", Locale.getDefault());\n\t\t\t\ttry {\n\t\t\t\t\ttrack2.setExpireDate(DateUtils.truncate(sdf.parse(m.group(2)), Calendar.MONTH));\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\tLOGGER.error(\"Unparsable expire card date : {}\", e.getMessage());\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t\t// Read service\n\t\t\t\ttrack2.setService(new Service(m.group(3)));\n\t\t\t\tret = track2;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}", "signature": "EmvTrack2 extractTrack2EquivalentData(final byte[] pRawTrack2)", "full_signature": "public static EmvTrack2 extractTrack2EquivalentData(final byte[] pRawTrack2)", "class_method_signature": "TrackUtils.extractTrack2EquivalentData(final byte[] pRawTrack2)", "testcase": false, "constructor": false, "invocations": ["setRaw", "bytesToStringNoSpace", "matcher", "find", "setCardNumber", "group", "getDefault", "setExpireDate", "truncate", "parse", "group", "error", "getMessage", "setService", "group"]}, "repository": {"repo_id": 18467626, "url": "https://github.com/devnied/EMV-NFC-Paycard-Enrollment", "language": "Java", "is_fork": false, "fork_count": 425, "stargazer_count": 934, "size": 4233, "license": "licensed"}}