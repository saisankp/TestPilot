{"test_class": {"identifier": "HttpClientTest", "superclass": "extends AbstractEmbeddedServerTest", "interfaces": "", "fields": [{"original_string": "private HttpClient httpClient = new HttpClient();", "modifier": "private", "type": "HttpClient", "declarator": "httpClient = new HttpClient()", "var_name": "httpClient"}], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/util/HttpClientTest.java"}, "test_case": {"identifier": "testBasicAuth", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBasicAuth() throws Exception {\n\t\tfinal boolean[] handled = {false};\n\t\tstartWithHandler(new AbstractHandler() {\n\t\t\t@Override\n\t\t\tpublic void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n\t\t\t\tbaseRequest.setHandled(true);\n\t\t\t\tassertEquals(\"Basic dXNlcjpwYXNz\", request.getHeader(\"Authorization\"));\n\t\t\t\tassertThat(request.getQueryString()).isEqualTo(\"bar=baz\");\n\t\t\t\thandled[0] = true;\n\t\t\t}\n\t\t});\n\n\t\tassertEquals(Integer.valueOf(200), httpClient.send(HttpRequestBuilder.<Integer>forUrl(\"http://user:pass@localhost:\" + getPort() + \"/foo?bar=baz\")\n\t\t\t\t.successHandler(new StatusCodeResponseHandler()).build()));\n\t\tassertTrue(handled[0]);\n\t}", "signature": "void testBasicAuth()", "full_signature": "@Test public void testBasicAuth()", "class_method_signature": "HttpClientTest.testBasicAuth()", "testcase": true, "constructor": false, "invocations": ["startWithHandler", "setHandled", "assertEquals", "getHeader", "isEqualTo", "assertThat", "getQueryString", "assertEquals", "valueOf", "send", "build", "successHandler", "forUrl", "getPort", "assertTrue"]}, "focal_class": {"identifier": "HttpClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long CONNECT_TIMEOUT_SEC = 5;", "modifier": "private static final", "type": "long", "declarator": "CONNECT_TIMEOUT_SEC = 5", "var_name": "CONNECT_TIMEOUT_SEC"}, {"original_string": "private static final long READ_TIMEOUT_SEC = 15;", "modifier": "private static final", "type": "long", "declarator": "READ_TIMEOUT_SEC = 15", "var_name": "READ_TIMEOUT_SEC"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "send", "parameters": "(String method, String url, final List<String> requestBodyLines)", "modifiers": "public", "return": "void", "signature": "void send(String method, String url, final List<String> requestBodyLines)", "full_signature": "public void send(String method, String url, final List<String> requestBodyLines)", "class_method_signature": "HttpClient.send(String method, String url, final List<String> requestBodyLines)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(final String method, final String url, final Map<String, String> headerFields,\n\t\t\t\t\t  OutputStreamHandler outputStreamHandler, ResponseHandler<T> responseHandler)", "modifiers": "public", "return": "T", "signature": "T send(final String method, final String url, final Map<String, String> headerFields,\n\t\t\t\t\t  OutputStreamHandler outputStreamHandler, ResponseHandler<T> responseHandler)", "full_signature": "public T send(final String method, final String url, final Map<String, String> headerFields,\n\t\t\t\t\t  OutputStreamHandler outputStreamHandler, ResponseHandler<T> responseHandler)", "class_method_signature": "HttpClient.send(final String method, final String url, final Map<String, String> headerFields,\n\t\t\t\t\t  OutputStreamHandler outputStreamHandler, ResponseHandler<T> responseHandler)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(final HttpRequest<T> request)", "modifiers": "public", "return": "T", "signature": "T send(final HttpRequest<T> request)", "full_signature": "public T send(final HttpRequest<T> request)", "class_method_signature": "HttpClient.send(final HttpRequest<T> request)", "testcase": false, "constructor": false}, {"identifier": "getResponseCodeIfPossible", "parameters": "(HttpURLConnection connection)", "modifiers": "private", "return": "Integer", "signature": "Integer getResponseCodeIfPossible(HttpURLConnection connection)", "full_signature": "private Integer getResponseCodeIfPossible(HttpURLConnection connection)", "class_method_signature": "HttpClient.getResponseCodeIfPossible(HttpURLConnection connection)", "testcase": false, "constructor": false}, {"identifier": "getBasicAuthFromUserInfo", "parameters": "(URL url)", "modifiers": "public static", "return": "String", "signature": "String getBasicAuthFromUserInfo(URL url)", "full_signature": "public static String getBasicAuthFromUserInfo(URL url)", "class_method_signature": "HttpClient.getBasicAuthFromUserInfo(URL url)", "testcase": false, "constructor": false}, {"identifier": "removeUserInfo", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String removeUserInfo(String url)", "full_signature": "public static String removeUserInfo(String url)", "class_method_signature": "HttpClient.removeUserInfo(String url)", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/util/HttpClient.java"}, "focal_method": {"identifier": "send", "parameters": "(String method, String url, final List<String> requestBodyLines)", "modifiers": "public", "return": "void", "body": "public void send(String method, String url, final List<String> requestBodyLines) {\n\t\tsend(HttpRequestBuilder.<Integer>forUrl(url)\n\t\t\t\t.method(method)\n\t\t\t\t.body(requestBodyLines)\n\t\t\t\t.build());\n\t}", "signature": "void send(String method, String url, final List<String> requestBodyLines)", "full_signature": "public void send(String method, String url, final List<String> requestBodyLines)", "class_method_signature": "HttpClient.send(String method, String url, final List<String> requestBodyLines)", "testcase": false, "constructor": false, "invocations": ["send", "build", "body", "method", "forUrl"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}