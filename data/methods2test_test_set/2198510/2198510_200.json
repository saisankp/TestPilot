{"test_class": {"identifier": "TestRegexFilteringInterceptor", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/interceptor/TestRegexFilteringInterceptor.java"}, "test_case": {"identifier": "testExclusion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testExclusion() throws ClassNotFoundException,\n      InstantiationException, IllegalAccessException {\n    Interceptor.Builder builder = InterceptorBuilderFactory.newInstance(\n        InterceptorType.REGEX_FILTER.toString());\n\n    Context ctx = new Context();\n    ctx.put(Constants.REGEX, \".*DEBUG.*\");\n    ctx.put(Constants.EXCLUDE_EVENTS, \"true\");\n\n    builder.configure(ctx);\n    Interceptor interceptor = builder.build();\n\n    Event shouldPass1 = EventBuilder.withBody(\"INFO: some message\",\n        Charsets.UTF_8);\n    Assert.assertNotNull(interceptor.intercept(shouldPass1));\n\n    Event shouldPass2 = EventBuilder.withBody(\"WARNING: some message\",\n        Charsets.UTF_8);\n    Assert.assertNotNull(interceptor.intercept(shouldPass2));\n\n    Event shouldNotPass = EventBuilder.withBody(\"this message has DEBUG in it\",\n        Charsets.UTF_8);\n    Assert.assertNull(interceptor.intercept(shouldNotPass));\n\n    builder.configure(ctx);\n  }", "signature": "void testExclusion()", "full_signature": "@Test public void testExclusion()", "class_method_signature": "TestRegexFilteringInterceptor.testExclusion()", "testcase": true, "constructor": false, "invocations": ["newInstance", "toString", "put", "put", "configure", "build", "withBody", "assertNotNull", "intercept", "withBody", "assertNotNull", "intercept", "withBody", "assertNull", "intercept", "configure"]}, "focal_class": {"identifier": "RegexFilteringInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(RegexFilteringInterceptor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(RegexFilteringInterceptor.class)", "var_name": "logger"}, {"original_string": "private final Pattern regex;", "modifier": "private final", "type": "Pattern", "declarator": "regex", "var_name": "regex"}, {"original_string": "private final boolean excludeEvents;", "modifier": "private final", "type": "boolean", "declarator": "excludeEvents", "var_name": "excludeEvents"}], "methods": [{"identifier": "RegexFilteringInterceptor", "parameters": "(Pattern regex, boolean excludeEvents)", "modifiers": "private", "return": "", "signature": " RegexFilteringInterceptor(Pattern regex, boolean excludeEvents)", "full_signature": "private  RegexFilteringInterceptor(Pattern regex, boolean excludeEvents)", "class_method_signature": "RegexFilteringInterceptor.RegexFilteringInterceptor(Pattern regex, boolean excludeEvents)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "RegexFilteringInterceptor.initialize()", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override /** * Returns the event if it passes the regular expression filter and null * otherwise. */ public", "return": "Event", "signature": "Event intercept(Event event)", "full_signature": "@Override /** * Returns the event if it passes the regular expression filter and null * otherwise. */ public Event intercept(Event event)", "class_method_signature": "RegexFilteringInterceptor.intercept(Event event)", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(List<Event> events)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> intercept(List<Event> events)", "full_signature": "@Override public List<Event> intercept(List<Event> events)", "class_method_signature": "RegexFilteringInterceptor.intercept(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RegexFilteringInterceptor.close()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/interceptor/RegexFilteringInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override /** * Returns the event if it passes the regular expression filter and null * otherwise. */ public", "return": "Event", "body": "@Override\n  /**\n   * Returns the event if it passes the regular expression filter and null\n   * otherwise.\n   */\n  public Event intercept(Event event) {\n    // We've already ensured here that at most one of includeRegex and\n    // excludeRegex are defined.\n\n    if (!excludeEvents) {\n      if (regex.matcher(new String(event.getBody())).find()) {\n        return event;\n      } else {\n        return null;\n      }\n    } else {\n      if (regex.matcher(new String(event.getBody())).find()) {\n        return null;\n      } else {\n        return event;\n      }\n    }\n  }", "signature": "Event intercept(Event event)", "full_signature": "@Override /** * Returns the event if it passes the regular expression filter and null * otherwise. */ public Event intercept(Event event)", "class_method_signature": "RegexFilteringInterceptor.intercept(Event event)", "testcase": false, "constructor": false, "invocations": ["find", "matcher", "getBody", "find", "matcher", "getBody"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}