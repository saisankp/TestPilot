{"test_class": {"identifier": "DataManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    MondroidService mMockMondroidService;", "modifier": "@Mock", "type": "MondroidService", "declarator": "mMockMondroidService", "var_name": "mMockMondroidService"}, {"original_string": "@Mock PreferencesHelper mMockPreferencesHelper;", "modifier": "@Mock", "type": "PreferencesHelper", "declarator": "mMockPreferencesHelper", "var_name": "mMockPreferencesHelper"}, {"original_string": "DataManager mDataManager;", "modifier": "", "type": "DataManager", "declarator": "mDataManager", "var_name": "mDataManager"}], "file": "app/src/test/java/com/hitherejoe/mondroid/data/DataManagerTest.java"}, "test_case": {"identifier": "getAccountDetailsCompletesAndEmitsAccountDetails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAccountDetailsCompletesAndEmitsAccountDetails() {\n        stubPreferencesHelperGetAccessToken(TestDataFactory.makeAccessToken());\n\n        List<Account> accounts = TestDataFactory.makeAccounts(1);\n        MondroidService.AccountsResponse accountsResponse = new MondroidService.AccountsResponse();\n        accountsResponse.accounts = accounts;\n        stubMondoServiceGetAccounts(Single.just(accountsResponse));\n\n        Balance balance = TestDataFactory.makeBalance();\n        stubMondoServiceGetBalance(Single.just(balance));\n\n        List<Transaction> transactions = TestDataFactory.makeTransactions(5);\n        MondroidService.TransactionResponse transactionResponse = new MondroidService.TransactionResponse();\n        transactionResponse.transactions = transactions;\n        stubMondoServiceGetTransactions(Single.just(transactionResponse));\n\n        DataManager.AccountData accountData = new DataManager.AccountData(balance, transactions);\n\n        TestSubscriber<DataManager.AccountData> testSubscriber = new TestSubscriber<>();\n        mDataManager.getAccountDetails().subscribe(testSubscriber);\n        testSubscriber.assertCompleted();\n        testSubscriber.assertValue(accountData);\n    }", "signature": "void getAccountDetailsCompletesAndEmitsAccountDetails()", "full_signature": "@Test public void getAccountDetailsCompletesAndEmitsAccountDetails()", "class_method_signature": "DataManagerTest.getAccountDetailsCompletesAndEmitsAccountDetails()", "testcase": true, "constructor": false, "invocations": ["stubPreferencesHelperGetAccessToken", "makeAccessToken", "makeAccounts", "stubMondoServiceGetAccounts", "just", "makeBalance", "stubMondoServiceGetBalance", "just", "makeTransactions", "stubMondoServiceGetTransactions", "just", "subscribe", "getAccountDetails", "assertCompleted", "assertValue"]}, "focal_class": {"identifier": "DataManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MondroidService mMondroidService;", "modifier": "private final", "type": "MondroidService", "declarator": "mMondroidService", "var_name": "mMondroidService"}, {"original_string": "private final PreferencesHelper mPreferencesHelper;", "modifier": "private final", "type": "PreferencesHelper", "declarator": "mPreferencesHelper", "var_name": "mPreferencesHelper"}], "methods": [{"identifier": "DataManager", "parameters": "(MondroidService mondroidService, PreferencesHelper preferencesHelper)", "modifiers": "@Inject public", "return": "", "signature": " DataManager(MondroidService mondroidService, PreferencesHelper preferencesHelper)", "full_signature": "@Inject public  DataManager(MondroidService mondroidService, PreferencesHelper preferencesHelper)", "class_method_signature": "DataManager.DataManager(MondroidService mondroidService, PreferencesHelper preferencesHelper)", "testcase": false, "constructor": true}, {"identifier": "getAccessToken", "parameters": "(String code)", "modifiers": "public", "return": "Single<AccessToken>", "signature": "Single<AccessToken> getAccessToken(String code)", "full_signature": "public Single<AccessToken> getAccessToken(String code)", "class_method_signature": "DataManager.getAccessToken(String code)", "testcase": false, "constructor": false}, {"identifier": "isUserSignedIn", "parameters": "()", "modifiers": "public", "return": "Single<Boolean>", "signature": "Single<Boolean> isUserSignedIn()", "full_signature": "public Single<Boolean> isUserSignedIn()", "class_method_signature": "DataManager.isUserSignedIn()", "testcase": false, "constructor": false}, {"identifier": "signOut", "parameters": "()", "modifiers": "public", "return": "Completable", "signature": "Completable signOut()", "full_signature": "public Completable signOut()", "class_method_signature": "DataManager.signOut()", "testcase": false, "constructor": false}, {"identifier": "getAccounts", "parameters": "()", "modifiers": "public", "return": "Single<AccountsResponse>", "signature": "Single<AccountsResponse> getAccounts()", "full_signature": "public Single<AccountsResponse> getAccounts()", "class_method_signature": "DataManager.getAccounts()", "testcase": false, "constructor": false}, {"identifier": "getAccountDetails", "parameters": "()", "modifiers": "public", "return": "Single<AccountData>", "signature": "Single<AccountData> getAccountDetails()", "full_signature": "public Single<AccountData> getAccountDetails()", "class_method_signature": "DataManager.getAccountDetails()", "testcase": false, "constructor": false}, {"identifier": "getBalance", "parameters": "(String accountId)", "modifiers": "public", "return": "Single<Balance>", "signature": "Single<Balance> getBalance(String accountId)", "full_signature": "public Single<Balance> getBalance(String accountId)", "class_method_signature": "DataManager.getBalance(String accountId)", "testcase": false, "constructor": false}, {"identifier": "getTransactions", "parameters": "(String accountId)", "modifiers": "public", "return": "Single<List<Transaction>>", "signature": "Single<List<Transaction>> getTransactions(String accountId)", "full_signature": "public Single<List<Transaction>> getTransactions(String accountId)", "class_method_signature": "DataManager.getTransactions(String accountId)", "testcase": false, "constructor": false}, {"identifier": "buildAuthorization", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String buildAuthorization()", "full_signature": "private String buildAuthorization()", "class_method_signature": "DataManager.buildAuthorization()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/hitherejoe/mondroid/data/DataManager.java"}, "focal_method": {"identifier": "getAccountDetails", "parameters": "()", "modifiers": "public", "return": "Single<AccountData>", "body": "public Single<AccountData> getAccountDetails() {\n        return getAccounts()\n                .flatMap(new Func1<AccountsResponse, Single<? extends AccountData>>() {\n                    @Override\n                    public Single<? extends AccountData> call(AccountsResponse accountsResponse) {\n                        if (!accountsResponse.accounts.isEmpty()) {\n                            String accountId = accountsResponse.accounts.get(0).id;\n                            return Single.zip(getBalance(accountId), getTransactions(accountId),\n                                    new Func2<Balance, List<Transaction>, AccountData>() {\n                                @Override\n                                public AccountData call(Balance balance,\n                                                        List<Transaction> transactions) {\n                                    return new AccountData(balance, transactions);\n                                }\n                            });\n                        }\n                        return Single.just(new AccountData());\n                    }\n                });\n    }", "signature": "Single<AccountData> getAccountDetails()", "full_signature": "public Single<AccountData> getAccountDetails()", "class_method_signature": "DataManager.getAccountDetails()", "testcase": false, "constructor": false, "invocations": ["flatMap", "getAccounts", "isEmpty", "get", "zip", "getBalance", "getTransactions", "just"]}, "repository": {"repo_id": 60776569, "url": "https://github.com/hitherejoe/Mondroid", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 138, "size": 1756, "license": "GNU General Public License v3.0"}}