{"test_class": {"identifier": "ConfigControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/ConfigControllerTest.java"}, "test_case": {"identifier": "add", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void add() throws Exception {\n        String requestJson = JSONObject.toJSONString(DataBaseInfo.builder().id(1L).dbname(\"name\").build());\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/config/add\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void add()", "full_signature": "@Test public void add()", "class_method_signature": "ConfigControllerTest.add()", "testcase": true, "constructor": false, "invocations": ["toJSONString", "build", "dbname", "id", "builder", "andDo", "andExpect", "perform", "accept", "content", "contentType", "get", "isOk", "status", "print"]}, "focal_class": {"identifier": "ConfigController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Consts consts;", "modifier": "@Autowired\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private ConfigService configService;", "modifier": "@Autowired\n    private", "type": "ConfigService", "declarator": "configService", "var_name": "configService"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private DefaultConfiguration defaultConfiguration;", "modifier": "@Autowired\n    private", "type": "DefaultConfiguration", "declarator": "defaultConfiguration", "var_name": "defaultConfiguration"}, {"original_string": "@Autowired\n    private SyncConfiguration syncConfiguration;", "modifier": "@Autowired\n    private", "type": "SyncConfiguration", "declarator": "syncConfiguration", "var_name": "syncConfiguration"}], "methods": [{"identifier": "datasourceValid", "parameters": "()", "modifiers": "@RequestMapping(value = \"/datasourceValid\", method = RequestMethod.GET) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> datasourceValid()", "full_signature": "@RequestMapping(value = \"/datasourceValid\", method = RequestMethod.GET) public ServiceResult<String> datasourceValid()", "class_method_signature": "ConfigController.datasourceValid()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@RequestBody DataBaseInfo dataBaseInfo)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@RequestBody DataBaseInfo dataBaseInfo)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@RequestBody DataBaseInfo dataBaseInfo)", "class_method_signature": "ConfigController.add(@RequestBody DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false}, {"identifier": "env", "parameters": "(HttpServletRequest request, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/env\") public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> env(HttpServletRequest request, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/env\") public ServiceResult<String> env(HttpServletRequest request, @CurrentUser LoginUser user)", "class_method_signature": "ConfigController.env(HttpServletRequest request, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/ConfigController.java"}, "focal_method": {"identifier": "add", "parameters": "(@RequestBody DataBaseInfo dataBaseInfo)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/add\", method = RequestMethod.POST)\n    public ServiceResult<String> add(@RequestBody DataBaseInfo dataBaseInfo) {\n        return configService.addConfig(dataBaseInfo);\n    }", "signature": "ServiceResult<String> add(@RequestBody DataBaseInfo dataBaseInfo)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@RequestBody DataBaseInfo dataBaseInfo)", "class_method_signature": "ConfigController.add(@RequestBody DataBaseInfo dataBaseInfo)", "testcase": false, "constructor": false, "invocations": ["addConfig"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}