{"test_class": {"identifier": "GraphiteReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final long timestamp = 1000198;", "modifier": "private final", "type": "long", "declarator": "timestamp = 1000198", "var_name": "timestamp"}, {"original_string": "private final Clock clock = mock(Clock.class);", "modifier": "private final", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}, {"original_string": "private final Graphite graphite = mock(Graphite.class);", "modifier": "private final", "type": "Graphite", "declarator": "graphite = mock(Graphite.class)", "var_name": "graphite"}, {"original_string": "private final MetricRegistry registry = mock(MetricRegistry.class);", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = mock(MetricRegistry.class)", "var_name": "registry"}, {"original_string": "private final GraphiteReporter reporter = GraphiteReporter.forRegistry(registry)\n        .withClock(clock)\n        .prefixedWith(\"prefix\")\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .filter(MetricFilter.ALL)\n        .disabledMetricAttributes(Collections.emptySet())\n        .build(graphite);", "modifier": "private final", "type": "GraphiteReporter", "declarator": "reporter = GraphiteReporter.forRegistry(registry)\n        .withClock(clock)\n        .prefixedWith(\"prefix\")\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .filter(MetricFilter.ALL)\n        .disabledMetricAttributes(Collections.emptySet())\n        .build(graphite)", "var_name": "reporter"}, {"original_string": "private final GraphiteReporter minuteRateReporter = GraphiteReporter\n        .forRegistry(registry)\n        .withClock(clock)\n        .prefixedWith(\"prefix\")\n        .convertRatesTo(TimeUnit.MINUTES)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .filter(MetricFilter.ALL)\n        .disabledMetricAttributes(Collections.emptySet())\n        .build(graphite);", "modifier": "private final", "type": "GraphiteReporter", "declarator": "minuteRateReporter = GraphiteReporter\n        .forRegistry(registry)\n        .withClock(clock)\n        .prefixedWith(\"prefix\")\n        .convertRatesTo(TimeUnit.MINUTES)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .filter(MetricFilter.ALL)\n        .disabledMetricAttributes(Collections.emptySet())\n        .build(graphite)", "var_name": "minuteRateReporter"}], "file": "metrics-graphite/src/test/java/com/codahale/metrics/graphite/GraphiteReporterTest.java"}, "test_case": {"identifier": "closesConnectionIfGraphiteIsUnavailable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void closesConnectionIfGraphiteIsUnavailable() throws Exception {\n        doThrow(new UnknownHostException(\"UNKNOWN-HOST\")).when(graphite).connect();\n        reporter.report(map(\"gauge\", gauge(1)),\n            map(),\n            map(),\n            map(),\n            map());\n\n        final InOrder inOrder = inOrder(graphite);\n        inOrder.verify(graphite).connect();\n        inOrder.verify(graphite).close();\n\n\n        verifyNoMoreInteractions(graphite);\n    }", "signature": "void closesConnectionIfGraphiteIsUnavailable()", "full_signature": "@Test public void closesConnectionIfGraphiteIsUnavailable()", "class_method_signature": "GraphiteReporterTest.closesConnectionIfGraphiteIsUnavailable()", "testcase": true, "constructor": false, "invocations": ["connect", "when", "doThrow", "report", "map", "gauge", "map", "map", "map", "map", "inOrder", "connect", "verify", "close", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "GraphiteReporter", "superclass": "extends ScheduledReporter", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GraphiteReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GraphiteReporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final DoubleFunction<String> DEFAULT_FP_FORMATTER = fp -> String.format(Locale.US, \"%2.2f\", fp);", "modifier": "private static final", "type": "DoubleFunction<String>", "declarator": "DEFAULT_FP_FORMATTER = fp -> String.format(Locale.US, \"%2.2f\", fp)", "var_name": "DEFAULT_FP_FORMATTER"}, {"original_string": "private final GraphiteSender graphite;", "modifier": "private final", "type": "GraphiteSender", "declarator": "graphite", "var_name": "graphite"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final String prefix;", "modifier": "private final", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private final boolean addMetricAttributesAsTags;", "modifier": "private final", "type": "boolean", "declarator": "addMetricAttributesAsTags", "var_name": "addMetricAttributesAsTags"}, {"original_string": "private final DoubleFunction<String> floatingPointFormatter;", "modifier": "private final", "type": "DoubleFunction<String>", "declarator": "floatingPointFormatter", "var_name": "floatingPointFormatter"}], "methods": [{"identifier": "forRegistry", "parameters": "(MetricRegistry registry)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(MetricRegistry registry)", "full_signature": "public static Builder forRegistry(MetricRegistry registry)", "class_method_signature": "GraphiteReporter.forRegistry(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "GraphiteReporter", "parameters": "(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes)", "modifiers": "protected", "return": "", "signature": " GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes)", "full_signature": "protected  GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes)", "class_method_signature": "GraphiteReporter.GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes)", "testcase": false, "constructor": true}, {"identifier": "GraphiteReporter", "parameters": "(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags)", "modifiers": "protected", "return": "", "signature": " GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags)", "full_signature": "protected  GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags)", "class_method_signature": "GraphiteReporter.GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags)", "testcase": false, "constructor": true}, {"identifier": "GraphiteReporter", "parameters": "(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags,\n                               DoubleFunction<String> floatingPointFormatter)", "modifiers": "protected", "return": "", "signature": " GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags,\n                               DoubleFunction<String> floatingPointFormatter)", "full_signature": "protected  GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags,\n                               DoubleFunction<String> floatingPointFormatter)", "class_method_signature": "GraphiteReporter.GraphiteReporter(MetricRegistry registry,\n                               GraphiteSender graphite,\n                               Clock clock,\n                               String prefix,\n                               TimeUnit rateUnit,\n                               TimeUnit durationUnit,\n                               MetricFilter filter,\n                               ScheduledExecutorService executor,\n                               boolean shutdownExecutorOnStop,\n                               Set<MetricAttribute> disabledMetricAttributes,\n                               boolean addMetricAttributesAsTags,\n                               DoubleFunction<String> floatingPointFormatter)", "testcase": false, "constructor": true}, {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "GraphiteReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "GraphiteReporter.stop()", "testcase": false, "constructor": false}, {"identifier": "reportTimer", "parameters": "(String name, Timer timer, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportTimer(String name, Timer timer, long timestamp)", "full_signature": "private void reportTimer(String name, Timer timer, long timestamp)", "class_method_signature": "GraphiteReporter.reportTimer(String name, Timer timer, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportMetered", "parameters": "(String name, Metered meter, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportMetered(String name, Metered meter, long timestamp)", "full_signature": "private void reportMetered(String name, Metered meter, long timestamp)", "class_method_signature": "GraphiteReporter.reportMetered(String name, Metered meter, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportHistogram", "parameters": "(String name, Histogram histogram, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportHistogram(String name, Histogram histogram, long timestamp)", "full_signature": "private void reportHistogram(String name, Histogram histogram, long timestamp)", "class_method_signature": "GraphiteReporter.reportHistogram(String name, Histogram histogram, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "sendIfEnabled", "parameters": "(MetricAttribute type, String name, double value, long timestamp)", "modifiers": "private", "return": "void", "signature": "void sendIfEnabled(MetricAttribute type, String name, double value, long timestamp)", "full_signature": "private void sendIfEnabled(MetricAttribute type, String name, double value, long timestamp)", "class_method_signature": "GraphiteReporter.sendIfEnabled(MetricAttribute type, String name, double value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "sendIfEnabled", "parameters": "(MetricAttribute type, String name, long value, long timestamp)", "modifiers": "private", "return": "void", "signature": "void sendIfEnabled(MetricAttribute type, String name, long value, long timestamp)", "full_signature": "private void sendIfEnabled(MetricAttribute type, String name, long value, long timestamp)", "class_method_signature": "GraphiteReporter.sendIfEnabled(MetricAttribute type, String name, long value, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportCounter", "parameters": "(String name, Counter counter, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportCounter(String name, Counter counter, long timestamp)", "full_signature": "private void reportCounter(String name, Counter counter, long timestamp)", "class_method_signature": "GraphiteReporter.reportCounter(String name, Counter counter, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "reportGauge", "parameters": "(String name, Gauge<?> gauge, long timestamp)", "modifiers": "private", "return": "void", "signature": "void reportGauge(String name, Gauge<?> gauge, long timestamp)", "full_signature": "private void reportGauge(String name, Gauge<?> gauge, long timestamp)", "class_method_signature": "GraphiteReporter.reportGauge(String name, Gauge<?> gauge, long timestamp)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Object o)", "modifiers": "private", "return": "String", "signature": "String format(Object o)", "full_signature": "private String format(Object o)", "class_method_signature": "GraphiteReporter.format(Object o)", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String prefix(String name)", "full_signature": "private String prefix(String name)", "class_method_signature": "GraphiteReporter.prefix(String name)", "testcase": false, "constructor": false}, {"identifier": "appendMetricAttribute", "parameters": "(String name, String metricAttribute)", "modifiers": "private", "return": "String", "signature": "String appendMetricAttribute(String name, String metricAttribute)", "full_signature": "private String appendMetricAttribute(String name, String metricAttribute)", "class_method_signature": "GraphiteReporter.appendMetricAttribute(String name, String metricAttribute)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(long n)", "modifiers": "private", "return": "String", "signature": "String format(long n)", "full_signature": "private String format(long n)", "class_method_signature": "GraphiteReporter.format(long n)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(double v)", "modifiers": "protected", "return": "String", "signature": "String format(double v)", "full_signature": "protected String format(double v)", "class_method_signature": "GraphiteReporter.format(double v)", "testcase": false, "constructor": false}], "file": "metrics-graphite/src/main/java/com/codahale/metrics/graphite/GraphiteReporter.java"}, "focal_method": {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers) {\n        final long timestamp = clock.getTime() / 1000;\n\n        // oh it'd be lovely to use Java 7 here\n        try {\n            graphite.connect();\n\n            for (Map.Entry<String, Gauge> entry : gauges.entrySet()) {\n                reportGauge(entry.getKey(), entry.getValue(), timestamp);\n            }\n\n            for (Map.Entry<String, Counter> entry : counters.entrySet()) {\n                reportCounter(entry.getKey(), entry.getValue(), timestamp);\n            }\n\n            for (Map.Entry<String, Histogram> entry : histograms.entrySet()) {\n                reportHistogram(entry.getKey(), entry.getValue(), timestamp);\n            }\n\n            for (Map.Entry<String, Meter> entry : meters.entrySet()) {\n                reportMetered(entry.getKey(), entry.getValue(), timestamp);\n            }\n\n            for (Map.Entry<String, Timer> entry : timers.entrySet()) {\n                reportTimer(entry.getKey(), entry.getValue(), timestamp);\n            }\n            graphite.flush();\n        } catch (IOException e) {\n            LOGGER.warn(\"Unable to report to Graphite\", graphite, e);\n        } finally {\n            try {\n                graphite.close();\n            } catch (IOException e1) {\n                LOGGER.warn(\"Error closing Graphite\", graphite, e1);\n            }\n        }\n    }", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "GraphiteReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["getTime", "connect", "entrySet", "reportGauge", "getKey", "getValue", "entrySet", "reportCounter", "getKey", "getValue", "entrySet", "reportHistogram", "getKey", "getValue", "entrySet", "reportMetered", "getKey", "getValue", "entrySet", "reportTimer", "getKey", "getValue", "flush", "warn", "close", "warn"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}