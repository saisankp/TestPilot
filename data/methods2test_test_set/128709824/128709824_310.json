{"test_class": {"identifier": "RestServerTest", "superclass": "", "interfaces": "", "fields": [], "file": "remoting/remoting-resteasy/src/test/java/com/alipay/sofa/rpc/server/rest/RestServerTest.java"}, "test_case": {"identifier": "start", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void start() {\n        String host = \"127.0.0.1\";\n        int port = 18801;\n        ServerConfig serverConfig = new ServerConfig();\n        serverConfig.setBoundHost(host);\n        serverConfig.setPort(port);\n        serverConfig.setProtocol(RpcConstants.PROTOCOL_TYPE_REST);\n\n        RestServer server = new RestServer();\n        server.init(serverConfig);\n        server.start();\n        Assert.assertTrue(server.started);\n        Assert.assertTrue(NetUtils.canTelnet(host, port, 1000));\n        // \u91cd\u590d\u542f\u52a8\n        server.start();\n\n        server.stop();\n        Assert.assertFalse(server.started);\n        Assert.assertFalse(NetUtils.canTelnet(host, port, 1000));\n        // \u91cd\u590d\u5173\u95ed\n        server.stop();\n\n        // \u9500\u6bc1\n        server.init(serverConfig);\n        server.start();\n        Assert.assertTrue(server.started);\n        Assert.assertTrue(NetUtils.canTelnet(host, port, 1000));\n        server.destroy(null);\n\n        // \u9500\u6bc1\n        server.init(serverConfig);\n        server.start();\n        Assert.assertTrue(server.started);\n        Assert.assertTrue(NetUtils.canTelnet(host, port, 1000));\n        server.destroy(new Destroyable.DestroyHook() {\n            @Override\n            public void preDestroy() {\n\n            }\n\n            @Override\n            public void postDestroy() {\n\n            }\n        });\n    }", "signature": "void start()", "full_signature": "@Test public void start()", "class_method_signature": "RestServerTest.start()", "testcase": true, "constructor": false, "invocations": ["setBoundHost", "setPort", "setProtocol", "init", "start", "assertTrue", "assertTrue", "canTelnet", "start", "stop", "assertFalse", "assertFalse", "canTelnet", "stop", "init", "start", "assertTrue", "assertTrue", "canTelnet", "destroy", "init", "start", "assertTrue", "assertTrue", "canTelnet", "destroy"]}, "focal_class": {"identifier": "RestServer", "superclass": "", "interfaces": "implements Server", "fields": [{"original_string": "private static final Logger    LOGGER     = LoggerFactory.getLogger(RestServer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER     = LoggerFactory.getLogger(RestServer.class)", "var_name": "LOGGER"}, {"original_string": "protected volatile boolean     started;", "modifier": "protected volatile", "type": "boolean", "declarator": "started", "var_name": "started"}, {"original_string": "protected SofaNettyJaxrsServer httpServer;", "modifier": "protected", "type": "SofaNettyJaxrsServer", "declarator": "httpServer", "var_name": "httpServer"}, {"original_string": "protected ServerConfig         serverConfig;", "modifier": "protected", "type": "ServerConfig", "declarator": "serverConfig", "var_name": "serverConfig"}, {"original_string": "protected AtomicInteger        invokerCnt = new AtomicInteger();", "modifier": "protected", "type": "AtomicInteger", "declarator": "invokerCnt = new AtomicInteger()", "var_name": "invokerCnt"}], "methods": [{"identifier": "init", "parameters": "(ServerConfig serverConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(ServerConfig serverConfig)", "full_signature": "@Override public void init(ServerConfig serverConfig)", "class_method_signature": "RestServer.init(ServerConfig serverConfig)", "testcase": false, "constructor": false}, {"identifier": "buildServer", "parameters": "()", "modifiers": "protected", "return": "SofaNettyJaxrsServer", "signature": "SofaNettyJaxrsServer buildServer()", "full_signature": "protected SofaNettyJaxrsServer buildServer()", "class_method_signature": "RestServer.buildServer()", "testcase": false, "constructor": false}, {"identifier": "registerProvider", "parameters": "(ResteasyProviderFactory providerFactory)", "modifiers": "protected", "return": "void", "signature": "void registerProvider(ResteasyProviderFactory providerFactory)", "full_signature": "protected void registerProvider(ResteasyProviderFactory providerFactory)", "class_method_signature": "RestServer.registerProvider(ResteasyProviderFactory providerFactory)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "RestServer.start()", "testcase": false, "constructor": false}, {"identifier": "isStarted", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isStarted()", "full_signature": "@Override public boolean isStarted()", "class_method_signature": "RestServer.isStarted()", "testcase": false, "constructor": false}, {"identifier": "hasNoEntry", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNoEntry()", "full_signature": "@Override public boolean hasNoEntry()", "class_method_signature": "RestServer.hasNoEntry()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "RestServer.stop()", "testcase": false, "constructor": false}, {"identifier": "registerProcessor", "parameters": "(ProviderConfig providerConfig, Invoker instance)", "modifiers": "@Override public", "return": "void", "signature": "void registerProcessor(ProviderConfig providerConfig, Invoker instance)", "full_signature": "@Override public void registerProcessor(ProviderConfig providerConfig, Invoker instance)", "class_method_signature": "RestServer.registerProcessor(ProviderConfig providerConfig, Invoker instance)", "testcase": false, "constructor": false}, {"identifier": "unRegisterProcessor", "parameters": "(ProviderConfig providerConfig, boolean closeIfNoEntry)", "modifiers": "@Override public", "return": "void", "signature": "void unRegisterProcessor(ProviderConfig providerConfig, boolean closeIfNoEntry)", "full_signature": "@Override public void unRegisterProcessor(ProviderConfig providerConfig, boolean closeIfNoEntry)", "class_method_signature": "RestServer.unRegisterProcessor(ProviderConfig providerConfig, boolean closeIfNoEntry)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "RestServer.destroy()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(DestroyHook hook)", "modifiers": "@Override public", "return": "void", "signature": "void destroy(DestroyHook hook)", "full_signature": "@Override public void destroy(DestroyHook hook)", "class_method_signature": "RestServer.destroy(DestroyHook hook)", "testcase": false, "constructor": false}], "file": "remoting/remoting-resteasy/src/main/java/com/alipay/sofa/rpc/server/rest/RestServer.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void start() {\n        if (started) {\n            return;\n        }\n        synchronized (this) {\n            if (started) {\n                return;\n            }\n            // \u7ed1\u5b9a\u5230\u7aef\u53e3\n            try {\n                httpServer.start();\n                if (LOGGER.isInfoEnabled()) {\n                    LOGGER.info(\"Start the http rest server at port {}\", serverConfig.getPort());\n                }\n            } catch (SofaRpcRuntimeException e) {\n                throw e;\n            } catch (Exception e) {\n                throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_START_SERVER_WITH_PORT, \"rest\",\n                    serverConfig.getPort()), e);\n            }\n            started = true;\n        }\n    }", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "RestServer.start()", "testcase": false, "constructor": false, "invocations": ["start", "isInfoEnabled", "info", "getPort", "getLog", "getPort"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}