{"test_class": {"identifier": "DefaultColumnRepositoryAsyncProducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private ColumnRepositoryAsyncProducer producer;", "modifier": "@Inject\n    private", "type": "ColumnRepositoryAsyncProducer", "declarator": "producer", "var_name": "producer"}], "file": "artemis-column/src/test/java/org/jnosql/artemis/column/query/DefaultColumnRepositoryAsyncProducerTest.java"}, "test_case": {"identifier": "shouldCreateFromManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateFromManager() {\n        ColumnFamilyManagerAsync manager= Mockito.mock(ColumnFamilyManagerAsync.class);\n        PersonRepositoryAsync personRepository = producer.get(PersonRepositoryAsync.class, manager);\n        assertNotNull(personRepository);\n    }", "signature": "void shouldCreateFromManager()", "full_signature": "@Test public void shouldCreateFromManager()", "class_method_signature": "DefaultColumnRepositoryAsyncProducerTest.shouldCreateFromManager()", "testcase": true, "constructor": false, "invocations": ["mock", "get", "assertNotNull"]}, "focal_class": {"identifier": "DefaultColumnRepositoryAsyncProducer", "superclass": "", "interfaces": "implements ColumnRepositoryAsyncProducer", "fields": [{"original_string": "@Inject\n    private ClassMappings classMappings;", "modifier": "@Inject\n    private", "type": "ClassMappings", "declarator": "classMappings", "var_name": "classMappings"}, {"original_string": "@Inject\n    private Converters converters;", "modifier": "@Inject\n    private", "type": "Converters", "declarator": "converters", "var_name": "converters"}, {"original_string": "@Inject\n    private ColumnTemplateAsyncProducer producer;", "modifier": "@Inject\n    private", "type": "ColumnTemplateAsyncProducer", "declarator": "producer", "var_name": "producer"}], "methods": [{"identifier": "get", "parameters": "(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "modifiers": "@Override public", "return": "T", "signature": "T get(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "full_signature": "@Override public T get(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "class_method_signature": "DefaultColumnRepositoryAsyncProducer.get(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<T> repositoryClass, ColumnTemplateAsync template)", "modifiers": "@Override public", "return": "T", "signature": "T get(Class<T> repositoryClass, ColumnTemplateAsync template)", "full_signature": "@Override public T get(Class<T> repositoryClass, ColumnTemplateAsync template)", "class_method_signature": "DefaultColumnRepositoryAsyncProducer.get(Class<T> repositoryClass, ColumnTemplateAsync template)", "testcase": false, "constructor": false}], "file": "artemis-column/src/main/java/org/jnosql/artemis/column/query/DefaultColumnRepositoryAsyncProducer.java"}, "focal_method": {"identifier": "get", "parameters": "(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <E, ID, T extends RepositoryAsync<E, ID>> T get(Class<T> repositoryClass, ColumnFamilyManagerAsync manager) {\n        Objects.requireNonNull(repositoryClass, \"repository class is required\");\n        Objects.requireNonNull(manager, \"manager class is required\");\n        ColumnTemplateAsync template = producer.get(manager);\n        return get(repositoryClass, template);\n    }", "signature": "T get(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "full_signature": "@Override public T get(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "class_method_signature": "DefaultColumnRepositoryAsyncProducer.get(Class<T> repositoryClass, ColumnFamilyManagerAsync manager)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "get", "get"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}