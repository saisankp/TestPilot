{"test_class": {"identifier": "EventSourceTopologyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "EventSourceTopology eventSourceTopology;", "modifier": "", "type": "EventSourceTopology", "declarator": "eventSourceTopology", "var_name": "eventSourceTopology"}, {"original_string": "DataBroker dataBrokerMock;", "modifier": "", "type": "DataBroker", "declarator": "dataBrokerMock", "var_name": "dataBrokerMock"}, {"original_string": "RpcProviderService rpcProviderRegistryMock;", "modifier": "", "type": "RpcProviderService", "declarator": "rpcProviderRegistryMock", "var_name": "rpcProviderRegistryMock"}, {"original_string": "RpcConsumerRegistry rpcServiceMock;", "modifier": "", "type": "RpcConsumerRegistry", "declarator": "rpcServiceMock", "var_name": "rpcServiceMock"}, {"original_string": "CreateTopicInput createTopicInputMock;", "modifier": "", "type": "CreateTopicInput", "declarator": "createTopicInputMock", "var_name": "createTopicInputMock"}, {"original_string": "ListenerRegistration<?> listenerRegistrationMock;", "modifier": "", "type": "ListenerRegistration<?>", "declarator": "listenerRegistrationMock", "var_name": "listenerRegistrationMock"}, {"original_string": "ObjectRegistration<EventAggregatorService> aggregatorRpcReg;", "modifier": "", "type": "ObjectRegistration<EventAggregatorService>", "declarator": "aggregatorRpcReg", "var_name": "aggregatorRpcReg"}], "file": "opendaylight/md-sal/messagebus-impl/src/test/java/org/opendaylight/controller/messagebus/app/impl/EventSourceTopologyTest.java"}, "test_case": {"identifier": "createTopicTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createTopicTest() throws Exception {\n        topicTestHelper();\n        assertNotNull(\"Topic has not been created correctly.\", eventSourceTopology.createTopic(createTopicInputMock));\n    }", "signature": "void createTopicTest()", "full_signature": "@Test public void createTopicTest()", "class_method_signature": "EventSourceTopologyTest.createTopicTest()", "testcase": true, "constructor": false, "invocations": ["topicTestHelper", "assertNotNull", "createTopic"]}, "focal_class": {"identifier": "EventSourceTopology", "superclass": "", "interfaces": "implements EventAggregatorService, EventSourceRegistry", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EventSourceTopology.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EventSourceTopology.class)", "var_name": "LOG"}, {"original_string": "private static final String TOPOLOGY_ID = \"EVENT-SOURCE-TOPOLOGY\" ;", "modifier": "private static final", "type": "String", "declarator": "TOPOLOGY_ID = \"EVENT-SOURCE-TOPOLOGY\"", "var_name": "TOPOLOGY_ID"}, {"original_string": "private static final TopologyKey EVENT_SOURCE_TOPOLOGY_KEY = new TopologyKey(new TopologyId(TOPOLOGY_ID));", "modifier": "private static final", "type": "TopologyKey", "declarator": "EVENT_SOURCE_TOPOLOGY_KEY = new TopologyKey(new TopologyId(TOPOLOGY_ID))", "var_name": "EVENT_SOURCE_TOPOLOGY_KEY"}, {"original_string": "private static final LogicalDatastoreType OPERATIONAL = LogicalDatastoreType.OPERATIONAL;", "modifier": "private static final", "type": "LogicalDatastoreType", "declarator": "OPERATIONAL = LogicalDatastoreType.OPERATIONAL", "var_name": "OPERATIONAL"}, {"original_string": "static final InstanceIdentifier<Topology> EVENT_SOURCE_TOPOLOGY_PATH =\n            InstanceIdentifier.create(NetworkTopology.class).child(Topology.class, EVENT_SOURCE_TOPOLOGY_KEY);", "modifier": "static final", "type": "InstanceIdentifier<Topology>", "declarator": "EVENT_SOURCE_TOPOLOGY_PATH =\n            InstanceIdentifier.create(NetworkTopology.class).child(Topology.class, EVENT_SOURCE_TOPOLOGY_KEY)", "var_name": "EVENT_SOURCE_TOPOLOGY_PATH"}, {"original_string": "private static final InstanceIdentifier<TopologyTypes1> TOPOLOGY_TYPE_PATH = EVENT_SOURCE_TOPOLOGY_PATH\n            .child(TopologyTypes.class).augmentation(TopologyTypes1.class);", "modifier": "private static final", "type": "InstanceIdentifier<TopologyTypes1>", "declarator": "TOPOLOGY_TYPE_PATH = EVENT_SOURCE_TOPOLOGY_PATH\n            .child(TopologyTypes.class).augmentation(TopologyTypes1.class)", "var_name": "TOPOLOGY_TYPE_PATH"}, {"original_string": "private final Map<TopicId, EventSourceTopic> eventSourceTopicMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<TopicId, EventSourceTopic>", "declarator": "eventSourceTopicMap = new ConcurrentHashMap<>()", "var_name": "eventSourceTopicMap"}, {"original_string": "private final Map<NodeKey, Registration> routedRpcRegistrations = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<NodeKey, Registration>", "declarator": "routedRpcRegistrations = new ConcurrentHashMap<>()", "var_name": "routedRpcRegistrations"}, {"original_string": "private final DataBroker dataBroker;", "modifier": "private final", "type": "DataBroker", "declarator": "dataBroker", "var_name": "dataBroker"}, {"original_string": "private final ObjectRegistration<EventSourceTopology> aggregatorRpcReg;", "modifier": "private final", "type": "ObjectRegistration<EventSourceTopology>", "declarator": "aggregatorRpcReg", "var_name": "aggregatorRpcReg"}, {"original_string": "private final EventSourceService eventSourceService;", "modifier": "private final", "type": "EventSourceService", "declarator": "eventSourceService", "var_name": "eventSourceService"}, {"original_string": "private final RpcProviderService rpcRegistry;", "modifier": "private final", "type": "RpcProviderService", "declarator": "rpcRegistry", "var_name": "rpcRegistry"}], "methods": [{"identifier": "EventSourceTopology", "parameters": "(final DataBroker dataBroker, final RpcProviderService providerService,\n            RpcConsumerRegistry rpcService)", "modifiers": "public", "return": "", "signature": " EventSourceTopology(final DataBroker dataBroker, final RpcProviderService providerService,\n            RpcConsumerRegistry rpcService)", "full_signature": "public  EventSourceTopology(final DataBroker dataBroker, final RpcProviderService providerService,\n            RpcConsumerRegistry rpcService)", "class_method_signature": "EventSourceTopology.EventSourceTopology(final DataBroker dataBroker, final RpcProviderService providerService,\n            RpcConsumerRegistry rpcService)", "testcase": false, "constructor": true}, {"identifier": "putData", "parameters": "(final LogicalDatastoreType store,\n                                                 final InstanceIdentifier<T> path,\n                                                 final T data)", "modifiers": "private", "return": "void", "signature": "void putData(final LogicalDatastoreType store,\n                                                 final InstanceIdentifier<T> path,\n                                                 final T data)", "full_signature": "private void putData(final LogicalDatastoreType store,\n                                                 final InstanceIdentifier<T> path,\n                                                 final T data)", "class_method_signature": "EventSourceTopology.putData(final LogicalDatastoreType store,\n                                                 final InstanceIdentifier<T> path,\n                                                 final T data)", "testcase": false, "constructor": false}, {"identifier": "deleteData", "parameters": "(final LogicalDatastoreType store,\n            final InstanceIdentifier<T> path)", "modifiers": "private", "return": "void", "signature": "void deleteData(final LogicalDatastoreType store,\n            final InstanceIdentifier<T> path)", "full_signature": "private void deleteData(final LogicalDatastoreType store,\n            final InstanceIdentifier<T> path)", "class_method_signature": "EventSourceTopology.deleteData(final LogicalDatastoreType store,\n            final InstanceIdentifier<T> path)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "modifiers": "private", "return": "void", "signature": "void insert(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "full_signature": "private void insert(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "class_method_signature": "EventSourceTopology.insert(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "modifiers": "private", "return": "void", "signature": "void remove(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "full_signature": "private void remove(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "class_method_signature": "EventSourceTopology.remove(final KeyedInstanceIdentifier<Node, NodeKey> sourcePath)", "testcase": false, "constructor": false}, {"identifier": "createTopic", "parameters": "(final CreateTopicInput input)", "modifiers": "@Override public", "return": "ListenableFuture<RpcResult<CreateTopicOutput>>", "signature": "ListenableFuture<RpcResult<CreateTopicOutput>> createTopic(final CreateTopicInput input)", "full_signature": "@Override public ListenableFuture<RpcResult<CreateTopicOutput>> createTopic(final CreateTopicInput input)", "class_method_signature": "EventSourceTopology.createTopic(final CreateTopicInput input)", "testcase": false, "constructor": false}, {"identifier": "destroyTopic", "parameters": "(final DestroyTopicInput input)", "modifiers": "@Override public", "return": "ListenableFuture<RpcResult<DestroyTopicOutput>>", "signature": "ListenableFuture<RpcResult<DestroyTopicOutput>> destroyTopic(final DestroyTopicInput input)", "full_signature": "@Override public ListenableFuture<RpcResult<DestroyTopicOutput>> destroyTopic(final DestroyTopicInput input)", "class_method_signature": "EventSourceTopology.destroyTopic(final DestroyTopicInput input)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "EventSourceTopology.close()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(final EventSource eventSource)", "modifiers": "public", "return": "void", "signature": "void register(final EventSource eventSource)", "full_signature": "public void register(final EventSource eventSource)", "class_method_signature": "EventSourceTopology.register(final EventSource eventSource)", "testcase": false, "constructor": false}, {"identifier": "unRegister", "parameters": "(final EventSource eventSource)", "modifiers": "public", "return": "void", "signature": "void unRegister(final EventSource eventSource)", "full_signature": "public void unRegister(final EventSource eventSource)", "class_method_signature": "EventSourceTopology.unRegister(final EventSource eventSource)", "testcase": false, "constructor": false}, {"identifier": "registerEventSource", "parameters": "(final T eventSource)", "modifiers": "@Override public", "return": "EventSourceRegistration<T>", "signature": "EventSourceRegistration<T> registerEventSource(final T eventSource)", "full_signature": "@Override public EventSourceRegistration<T> registerEventSource(final T eventSource)", "class_method_signature": "EventSourceTopology.registerEventSource(final T eventSource)", "testcase": false, "constructor": false}, {"identifier": "getDataBroker", "parameters": "()", "modifiers": "", "return": "DataBroker", "signature": "DataBroker getDataBroker()", "full_signature": " DataBroker getDataBroker()", "class_method_signature": "EventSourceTopology.getDataBroker()", "testcase": false, "constructor": false}, {"identifier": "getEventSourceService", "parameters": "()", "modifiers": "", "return": "EventSourceService", "signature": "EventSourceService getEventSourceService()", "full_signature": " EventSourceService getEventSourceService()", "class_method_signature": "EventSourceTopology.getEventSourceService()", "testcase": false, "constructor": false}, {"identifier": "getRoutedRpcRegistrations", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Map<NodeKey, Registration>", "signature": "Map<NodeKey, Registration> getRoutedRpcRegistrations()", "full_signature": "@VisibleForTesting Map<NodeKey, Registration> getRoutedRpcRegistrations()", "class_method_signature": "EventSourceTopology.getRoutedRpcRegistrations()", "testcase": false, "constructor": false}, {"identifier": "getEventSourceTopicMap", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Map<TopicId, EventSourceTopic>", "signature": "Map<TopicId, EventSourceTopic> getEventSourceTopicMap()", "full_signature": "@VisibleForTesting Map<TopicId, EventSourceTopic> getEventSourceTopicMap()", "class_method_signature": "EventSourceTopology.getEventSourceTopicMap()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/messagebus-impl/src/main/java/org/opendaylight/controller/messagebus/app/impl/EventSourceTopology.java"}, "focal_method": {"identifier": "createTopic", "parameters": "(final CreateTopicInput input)", "modifiers": "@Override public", "return": "ListenableFuture<RpcResult<CreateTopicOutput>>", "body": "@Override\n    public ListenableFuture<RpcResult<CreateTopicOutput>> createTopic(final CreateTopicInput input) {\n        LOG.debug(\"Received Topic creation request: NotificationPattern -> {}, NodeIdPattern -> {}\",\n                input.getNotificationPattern(),\n                input.getNodeIdPattern());\n\n        final NotificationPattern notificationPattern = new NotificationPattern(input.getNotificationPattern());\n        //FIXME: do not use Util.wildcardToRegex - NodeIdPatter should be regex\n        final String nodeIdPattern = input.getNodeIdPattern().getValue();\n        final EventSourceTopic eventSourceTopic = EventSourceTopic.create(notificationPattern, nodeIdPattern, this);\n\n        eventSourceTopicMap.put(eventSourceTopic.getTopicId(), eventSourceTopic);\n\n        final CreateTopicOutput cto = new CreateTopicOutputBuilder()\n                .setTopicId(eventSourceTopic.getTopicId())\n                .build();\n\n        LOG.info(\"Topic has been created: NotificationPattern -> {}, NodeIdPattern -> {}\",\n                input.getNotificationPattern(),\n                input.getNodeIdPattern());\n\n        return Util.resultRpcSuccessFor(cto);\n    }", "signature": "ListenableFuture<RpcResult<CreateTopicOutput>> createTopic(final CreateTopicInput input)", "full_signature": "@Override public ListenableFuture<RpcResult<CreateTopicOutput>> createTopic(final CreateTopicInput input)", "class_method_signature": "EventSourceTopology.createTopic(final CreateTopicInput input)", "testcase": false, "constructor": false, "invocations": ["debug", "getNotificationPattern", "getNodeIdPattern", "getNotificationPattern", "getValue", "getNodeIdPattern", "create", "put", "getTopicId", "build", "setTopicId", "getTopicId", "info", "getNotificationPattern", "getNodeIdPattern", "resultRpcSuccessFor"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}