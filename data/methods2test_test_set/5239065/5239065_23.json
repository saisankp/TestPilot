{"test_class": {"identifier": "TreeDispatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "exposure-engine/gateway-common/src/test/java/com/alu/e3/gateway/dispatch/TreeDispatcherTest.java"}, "test_case": {"identifier": "testFindPrefixMatches", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindPrefixMatches() {\n\t\tTreeDispatcher<String> dispatcher = setupDispatcher();\n\t\t\n\t\tList<String> matches = dispatcher.findPrefixMatches(\"/one/two/three/four/five/six/seven/eight\");\n\t\tassertNotNull(matches);\n\t\tassertEquals(matches.size(), 3);\n\t\tassertEquals(matches.get(0), \"/one/two/three/four/five/six\");\n\t\tassertEquals(matches.get(1), \"/one/two/three/four\");\n\t\tassertEquals(matches.get(2), \"/one/two\");\n\t\t\n\t\tmatches = dispatcher.findPrefixMatches(\"//one///two////three/////four////five///six///seven/eight////\");\n\t\tassertEquals(matches.size(), 3);\n\t\tassertEquals(matches.get(0), \"/one/two/three/four/five/six\");\n\t\tassertEquals(matches.get(1), \"/one/two/three/four\");\n\t\tassertEquals(matches.get(2), \"/one/two\");\n\t\t\n\t\tmatches = dispatcher.findPrefixMatches(\"//one///two////three//\\\\//four/five/six/seven/eight\");\n\t\tassertEquals(matches.size(), 1);\n\t\tassertEquals(matches.get(0), \"/one/two\");\n\t\t\n\t\tmatches = dispatcher.findPrefixMatches(\"/one/two\");\n\t\tassertEquals(matches.size(), 1);\n\t\tassertEquals(matches.get(0), \"/one/two\");\n\t\t\n\t\tmatches = dispatcher.findPrefixMatches(\"/one/three/three\");\n\t\tassertNotNull(matches);\n\t\tassertTrue(matches.isEmpty());\n\t\t\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/*\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/.*\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"one\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/one/tw\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/one/twoo\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/one/two*\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/one/two.*\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/on/two\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/onee/two\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/onetwo\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/oneetwo\").isEmpty());\n\t\tassertTrue(dispatcher.findPrefixMatches(\"/one\\\\two\").isEmpty());\n\t}", "signature": "void testFindPrefixMatches()", "full_signature": "@Test public void testFindPrefixMatches()", "class_method_signature": "TreeDispatcherTest.testFindPrefixMatches()", "testcase": true, "constructor": false, "invocations": ["setupDispatcher", "findPrefixMatches", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "findPrefixMatches", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "findPrefixMatches", "assertEquals", "size", "assertEquals", "get", "findPrefixMatches", "assertEquals", "size", "assertEquals", "get", "findPrefixMatches", "assertNotNull", "assertTrue", "isEmpty", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches", "assertTrue", "isEmpty", "findPrefixMatches"]}, "focal_class": {"identifier": "TreeDispatcher", "superclass": "", "interfaces": "implements Dispatcher<E>", "fields": [{"original_string": "private final ConcurrentTree<String, E> tree = new ConcurrentTree<String, E>();", "modifier": "private final", "type": "ConcurrentTree<String, E>", "declarator": "tree = new ConcurrentTree<String, E>()", "var_name": "tree"}, {"original_string": "private Pattern delimiter = Pattern.compile(\"/+\");", "modifier": "private", "type": "Pattern", "declarator": "delimiter = Pattern.compile(\"/+\")", "var_name": "delimiter"}], "methods": [{"identifier": "setDelimiter", "parameters": "(String delimiter)", "modifiers": "public", "return": "void", "signature": "void setDelimiter(String delimiter)", "full_signature": "public void setDelimiter(String delimiter)", "class_method_signature": "TreeDispatcher.setDelimiter(String delimiter)", "testcase": false, "constructor": false}, {"identifier": "addEndpoint", "parameters": "(String path, E endpoint)", "modifiers": "@Override public", "return": "void", "signature": "void addEndpoint(String path, E endpoint)", "full_signature": "@Override public void addEndpoint(String path, E endpoint)", "class_method_signature": "TreeDispatcher.addEndpoint(String path, E endpoint)", "testcase": false, "constructor": false}, {"identifier": "removeEndpoint", "parameters": "(String path)", "modifiers": "@Override public", "return": "E", "signature": "E removeEndpoint(String path)", "full_signature": "@Override public E removeEndpoint(String path)", "class_method_signature": "TreeDispatcher.removeEndpoint(String path)", "testcase": false, "constructor": false}, {"identifier": "findExactMatch", "parameters": "(String path)", "modifiers": "@Override public", "return": "E", "signature": "E findExactMatch(String path)", "full_signature": "@Override public E findExactMatch(String path)", "class_method_signature": "TreeDispatcher.findExactMatch(String path)", "testcase": false, "constructor": false}, {"identifier": "findPrefixMatches", "parameters": "(String path)", "modifiers": "@Override public", "return": "List<E>", "signature": "List<E> findPrefixMatches(String path)", "full_signature": "@Override public List<E> findPrefixMatches(String path)", "class_method_signature": "TreeDispatcher.findPrefixMatches(String path)", "testcase": false, "constructor": false}], "file": "exposure-engine/gateway-common/src/main/java/com/alu/e3/gateway/dispatch/TreeDispatcher.java"}, "focal_method": {"identifier": "findPrefixMatches", "parameters": "(String path)", "modifiers": "@Override public", "return": "List<E>", "body": "@Override\n\tpublic List<E> findPrefixMatches(String path) {\n\t\treturn tree.getMatches(delimiter.split(path));\n\t}", "signature": "List<E> findPrefixMatches(String path)", "full_signature": "@Override public List<E> findPrefixMatches(String path)", "class_method_signature": "TreeDispatcher.findPrefixMatches(String path)", "testcase": false, "constructor": false, "invocations": ["getMatches", "split"]}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}