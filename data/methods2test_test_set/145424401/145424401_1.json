{"test_class": {"identifier": "VulasCliTest", "superclass": "extends AbstractGoalTest", "interfaces": "", "fields": [], "file": "cli-scanner/src/test/java/org/eclipse/steady/cli/VulasCliTest.java"}, "test_case": {"identifier": "testAppGoal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAppGoal() throws GoalConfigurationException, GoalExecutionException {\n    // App: Relative and absolute folders with and without spaces\n    final Path rel_app_with_space = Paths.get(\"src\", \"test\", \"resources\", \"appfolder with space\");\n    final Path abs_app = Paths.get(\"src\", \"test\", \"resources\", \"appfolder\").toAbsolutePath();\n    final Path py_app = Paths.get(\"src\", \"test\", \"resources\", \"foo\").toAbsolutePath();\n    final String app_string = rel_app_with_space.toString() + \",\" + abs_app + \",\" + py_app;\n\n    // Dep: Relative and absolute folders with and without spaces\n    final Path rel_dep_with_space = Paths.get(\"src\", \"test\", \"resources\", \"depfolder with space\");\n    final Path abs_dep = Paths.get(\"src\", \"test\", \"resources\", \"depfolder\").toAbsolutePath();\n    final Path cc =\n        Paths.get(\"src\", \"test\", \"resources\", \"depfolder\", \"commons-collections-3.2.2.jar\");\n    final String dep_string =\n        cc.toString() + \",\" + rel_dep_with_space.toString() + \",\" + abs_dep.toString();\n\n    System.setProperty(CoreConfiguration.APP_DIRS, app_string + \",\" + dep_string);\n\n    // Mock REST services\n    this.configureBackendServiceUrl(server);\n    this.setupMockServices(this.testApp);\n\n    final String[] args = new String[] {\"-goal\", \"app\"};\n    VulasCli.main(args);\n\n    // Check the HTTP calls made\n    verifyHttp(server)\n        .times(1, method(Method.PUT), uri(\"/backend\" + PathBuilder.app(this.testApp)));\n    verifyHttp(server)\n        .times(\n            2,\n            method(Method.POST),\n            uri(\"/backend\" + PathBuilder.goalExcecutions(null, null, this.testApp)));\n  }", "signature": "void testAppGoal()", "full_signature": "@Test public void testAppGoal()", "class_method_signature": "VulasCliTest.testAppGoal()", "testcase": true, "constructor": false, "invocations": ["get", "toAbsolutePath", "get", "toAbsolutePath", "get", "toString", "get", "toAbsolutePath", "get", "get", "toString", "toString", "toString", "setProperty", "configureBackendServiceUrl", "setupMockServices", "main", "times", "verifyHttp", "method", "uri", "app", "times", "verifyHttp", "method", "uri", "goalExcecutions"]}, "focal_class": {"identifier": "VulasCli", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private static GoalType goalType = null;", "modifier": "private static", "type": "GoalType", "declarator": "goalType = null", "var_name": "goalType"}, {"original_string": "private static AbstractGoal goal = null;", "modifier": "private static", "type": "AbstractGoal", "declarator": "goal = null", "var_name": "goal"}], "methods": [{"identifier": "main", "parameters": "(String[] _args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] _args)", "full_signature": "public static void main(String[] _args)", "class_method_signature": "VulasCli.main(String[] _args)", "testcase": false, "constructor": false}], "file": "cli-scanner/src/main/java/org/eclipse/steady/cli/VulasCli.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] _args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] _args)\n      throws GoalConfigurationException, GoalExecutionException {\n\n    // Prepare parsing of cmd line arguments\n    final Options options = new Options();\n    options.addOption(\n        \"goal\",\n        \"goal\",\n        true,\n        \"Goal to be executed (clean, cleanSpace, app, a2c, t2c, instr, report, upload)\");\n\n    // Get the goal to be executed\n    try {\n      final CommandLineParser parser = new DefaultParser();\n      final CommandLine cmd = parser.parse(options, _args);\n      String g = cmd.getOptionValue(\"goal\", null);\n\n      // Ugly workaround to correct the non-intuitive goal type SPACECLEAN and SPACEDEL\n      // TODO: Change GoalType.SPACECLEAN and GoalType.SPACEDEL\n      if (\"cleanSpace\".equals(g)) g = \"spaceClean\";\n      else if (\"cleanSpace\".equals(g)) g = \"spaceDel\";\n\n      goalType = GoalType.parseGoal(g);\n    }\n    // Happens for unknown/invalid options\n    catch (ParseException pe) {\n      log.error(pe.getMessage());\n      final HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(\"Vulas Command Line Interface\", options);\n      return;\n    }\n    // Happens during the parsing of the goal\n    catch (IllegalArgumentException iae) {\n      log.error(iae.getMessage());\n      final HelpFormatter formatter = new HelpFormatter();\n      formatter.printHelp(\"Vulas Command Line Interface\", options);\n      return;\n    }\n\n    // Create and execute the goal\n    try {\n      goal = GoalFactory.create(goalType, GoalClient.CLI);\n      goal.executeSync();\n    } catch (IllegalStateException ise) {\n      log.error(ise.getMessage());\n    } catch (IllegalArgumentException iae) {\n      log.error(iae.getMessage());\n    }\n  }", "signature": "void main(String[] _args)", "full_signature": "public static void main(String[] _args)", "class_method_signature": "VulasCli.main(String[] _args)", "testcase": false, "constructor": false, "invocations": ["addOption", "parse", "getOptionValue", "equals", "equals", "parseGoal", "error", "getMessage", "printHelp", "error", "getMessage", "printHelp", "create", "executeSync", "error", "getMessage", "error", "getMessage"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}