{"test_class": {"identifier": "BoardTest", "superclass": "", "interfaces": "", "fields": [], "file": "Paris/2015/2015-01-08-Reversi-Java-Randori/src/test/java/murex/pop/dojo/reversi/BoardTest.java"}, "test_case": {"identifier": "it_has_just_one_illegal_position", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void\n   it_has_just_one_illegal_position() {\n      assertThat(new Board(\n        l(B, B, B, B),\n        l(B, B, B, B),\n        l(B, _, B, B),\n        l(B, B, B, B)).legalMovesFor(B))\n        .isEmpty();\n   }", "signature": "void it_has_just_one_illegal_position()", "full_signature": "@Test public void it_has_just_one_illegal_position()", "class_method_signature": "BoardTest.it_has_just_one_illegal_position()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "legalMovesFor", "l", "l", "l", "l"]}, "focal_class": {"identifier": "Board", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final char _ = '.';", "modifier": "public static final", "type": "char", "declarator": "_ = '.'", "var_name": "_"}, {"original_string": "public static final char B = 'B';", "modifier": "public static final", "type": "char", "declarator": "B = 'B'", "var_name": "B"}, {"original_string": "public static final char W = 'W';", "modifier": "public static final", "type": "char", "declarator": "W = 'W'", "var_name": "W"}, {"original_string": "private final char[][] cells;", "modifier": "private final", "type": "char[][]", "declarator": "cells", "var_name": "cells"}], "methods": [{"identifier": "Board", "parameters": "(char[]... cells)", "modifiers": "public", "return": "", "signature": " Board(char[]... cells)", "full_signature": "public  Board(char[]... cells)", "class_method_signature": "Board.Board(char[]... cells)", "testcase": false, "constructor": true}, {"identifier": "legalMovesFor", "parameters": "(char color)", "modifiers": "public", "return": "List<Position>", "signature": "List<Position> legalMovesFor(char color)", "full_signature": "public List<Position> legalMovesFor(char color)", "class_method_signature": "Board.legalMovesFor(char color)", "testcase": false, "constructor": false}, {"identifier": "isValidPosition", "parameters": "(char color, Position position)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidPosition(char color, Position position)", "full_signature": "private boolean isValidPosition(char color, Position position)", "class_method_signature": "Board.isValidPosition(char color, Position position)", "testcase": false, "constructor": false}, {"identifier": "colorAt", "parameters": "(Position position)", "modifiers": "private", "return": "char", "signature": "char colorAt(Position position)", "full_signature": "private char colorAt(Position position)", "class_method_signature": "Board.colorAt(Position position)", "testcase": false, "constructor": false}, {"identifier": "isNotSurroundByItsOwnColor", "parameters": "(char color, Position position)", "modifiers": "private", "return": "boolean", "signature": "boolean isNotSurroundByItsOwnColor(char color, Position position)", "full_signature": "private boolean isNotSurroundByItsOwnColor(char color, Position position)", "class_method_signature": "Board.isNotSurroundByItsOwnColor(char color, Position position)", "testcase": false, "constructor": false}, {"identifier": "neighboursOf", "parameters": "(Position position)", "modifiers": "private", "return": "FluentIterable<Position>", "signature": "FluentIterable<Position> neighboursOf(Position position)", "full_signature": "private FluentIterable<Position> neighboursOf(Position position)", "class_method_signature": "Board.neighboursOf(Position position)", "testcase": false, "constructor": false}, {"identifier": "toColor", "parameters": "()", "modifiers": "private", "return": "Function<? super Position, Character>", "signature": "Function<? super Position, Character> toColor()", "full_signature": "private Function<? super Position, Character> toColor()", "class_method_signature": "Board.toColor()", "testcase": false, "constructor": false}, {"identifier": "other", "parameters": "(char color)", "modifiers": "private static", "return": "char", "signature": "char other(char color)", "full_signature": "private static char other(char color)", "class_method_signature": "Board.other(char color)", "testcase": false, "constructor": false}], "file": "Paris/2015/2015-01-08-Reversi-Java-Randori/src/main/java/murex/pop/dojo/reversi/Board.java"}, "focal_method": {"identifier": "legalMovesFor", "parameters": "(char color)", "modifiers": "public", "return": "List<Position>", "body": "public List<Position> legalMovesFor(char color) {\n      final ImmutableList.Builder<Position> result = ImmutableList.builder();\n\n      for (int iLine = 0; iLine < cells.length; ++iLine) {\n         for (int iColumn = 0; iColumn < cells[iLine].length; ++iColumn) {\n            final Position currentPosition = position(iLine, iColumn);\n\n            if (isValidPosition(color, currentPosition)) {\n\n               result.add(currentPosition);\n            }\n         }\n      }\n\n      return result.build();\n   }", "signature": "List<Position> legalMovesFor(char color)", "full_signature": "public List<Position> legalMovesFor(char color)", "class_method_signature": "Board.legalMovesFor(char color)", "testcase": false, "constructor": false, "invocations": ["builder", "position", "isValidPosition", "add", "build"]}, "repository": {"repo_id": 39905754, "url": "https://github.com/murex/murex-coding-dojo", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1700, "license": "licensed"}}