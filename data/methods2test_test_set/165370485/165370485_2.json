{"test_class": {"identifier": "SimpleStanzaHandlerInterceptorChainTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StanzaHandler stanzaHandler;", "modifier": "private", "type": "StanzaHandler", "declarator": "stanzaHandler", "var_name": "stanzaHandler"}, {"original_string": "private Stanza stanza;", "modifier": "private", "type": "Stanza", "declarator": "stanza", "var_name": "stanza"}, {"original_string": "private ServerRuntimeContext serverRuntimeContext;", "modifier": "private", "type": "ServerRuntimeContext", "declarator": "serverRuntimeContext", "var_name": "serverRuntimeContext"}, {"original_string": "private SessionContext sessionContext;", "modifier": "private", "type": "SessionContext", "declarator": "sessionContext", "var_name": "sessionContext"}, {"original_string": "private SessionStateHolder sessionStateHolder;", "modifier": "private", "type": "SessionStateHolder", "declarator": "sessionStateHolder", "var_name": "sessionStateHolder"}, {"original_string": "private StanzaBroker firstStanzaBroker;", "modifier": "private", "type": "StanzaBroker", "declarator": "firstStanzaBroker", "var_name": "firstStanzaBroker"}], "file": "server/core/src/test/java/org/apache/vysper/xmpp/protocol/SimpleStanzaHandlerInterceptorChainTest.java"}, "test_case": {"identifier": "test_stanzabroker_substitution_chaining", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_stanzabroker_substitution_chaining() throws ProtocolException {\n        StanzaBroker secondStanzaBroker = mock(StanzaBroker.class);\n        StanzaBroker thirdStanzaBroker = mock(StanzaBroker.class);\n\n        InterceptorMock firstInterceptor = new InterceptorMock().replaceStanzaBroker(secondStanzaBroker);\n        InterceptorMock secondInterceptor = new InterceptorMock().replaceStanzaBroker(thirdStanzaBroker);\n\n        List<StanzaHandlerInterceptor> interceptors = new ArrayList<>();\n        interceptors.add(firstInterceptor);\n        interceptors.add(secondInterceptor);\n\n        new SimpleStanzaHandlerInterceptorChain(stanzaHandler, interceptors).intercept(stanza, serverRuntimeContext,\n                false, sessionContext, sessionStateHolder, firstStanzaBroker);\n\n        assertEquals(firstStanzaBroker, firstInterceptor.receivedStanzaBroker);\n        assertEquals(secondStanzaBroker, secondInterceptor.receivedStanzaBroker);\n\n        verify(stanzaHandler).execute(stanza, serverRuntimeContext, false, sessionContext, sessionStateHolder,\n                thirdStanzaBroker);\n\n    }", "signature": "void test_stanzabroker_substitution_chaining()", "full_signature": "@Test public void test_stanzabroker_substitution_chaining()", "class_method_signature": "SimpleStanzaHandlerInterceptorChainTest.test_stanzabroker_substitution_chaining()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "replaceStanzaBroker", "replaceStanzaBroker", "add", "add", "intercept", "assertEquals", "assertEquals", "execute", "verify"]}, "focal_class": {"identifier": "SimpleStanzaHandlerInterceptorChain", "superclass": "", "interfaces": "implements StanzaHandlerInterceptorChain", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleStanzaHandlerInterceptorChain.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleStanzaHandlerInterceptorChain.class)", "var_name": "LOG"}, {"original_string": "private final StanzaHandler stanzaHandler;", "modifier": "private final", "type": "StanzaHandler", "declarator": "stanzaHandler", "var_name": "stanzaHandler"}, {"original_string": "private final Queue<StanzaHandlerInterceptor> interceptors;", "modifier": "private final", "type": "Queue<StanzaHandlerInterceptor>", "declarator": "interceptors", "var_name": "interceptors"}], "methods": [{"identifier": "SimpleStanzaHandlerInterceptorChain", "parameters": "(StanzaHandler stanzaHandler,\n            List<StanzaHandlerInterceptor> interceptors)", "modifiers": "public", "return": "", "signature": " SimpleStanzaHandlerInterceptorChain(StanzaHandler stanzaHandler,\n            List<StanzaHandlerInterceptor> interceptors)", "full_signature": "public  SimpleStanzaHandlerInterceptorChain(StanzaHandler stanzaHandler,\n            List<StanzaHandlerInterceptor> interceptors)", "class_method_signature": "SimpleStanzaHandlerInterceptorChain.SimpleStanzaHandlerInterceptorChain(StanzaHandler stanzaHandler,\n            List<StanzaHandlerInterceptor> interceptors)", "testcase": false, "constructor": true}, {"identifier": "intercept", "parameters": "(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "modifiers": "@Override public", "return": "void", "signature": "void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "full_signature": "@Override public void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "class_method_signature": "SimpleStanzaHandlerInterceptorChain.intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "testcase": false, "constructor": false}], "file": "server/core/src/main/java/org/apache/vysper/xmpp/protocol/SimpleStanzaHandlerInterceptorChain.java"}, "focal_method": {"identifier": "intercept", "parameters": "(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)\n            throws ProtocolException {\n        StanzaHandlerInterceptor interceptor = interceptors.poll();\n        if (interceptor == null) {\n            LOG.debug(\"No more interceptor to execute. Executing stanza handler {}.\", stanzaHandler);\n            stanzaHandler.execute(stanza, serverRuntimeContext, isOutboundStanza, sessionContext, sessionStateHolder,\n                    stanzaBroker);\n            return;\n        }\n        LOG.debug(\"Executing interceptor {}\", interceptor);\n        interceptor.intercept(stanza, serverRuntimeContext, isOutboundStanza, sessionContext, sessionStateHolder,\n                stanzaBroker, this);\n    }", "signature": "void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "full_signature": "@Override public void intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "class_method_signature": "SimpleStanzaHandlerInterceptorChain.intercept(Stanza stanza, ServerRuntimeContext serverRuntimeContext, boolean isOutboundStanza,\n            SessionContext sessionContext, SessionStateHolder sessionStateHolder, StanzaBroker stanzaBroker)", "testcase": false, "constructor": false, "invocations": ["poll", "debug", "execute", "debug", "intercept"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}