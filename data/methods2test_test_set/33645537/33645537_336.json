{"test_class": {"identifier": "LowestCommonAncestorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LowestCommonAncestor lca;", "modifier": "private", "type": "LowestCommonAncestor", "declarator": "lca", "var_name": "lca"}], "file": "algs/src/test/java/com/github/pedrovgs/problem21/LowestCommonAncestorTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullElementsRecursive", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldNotAcceptNullElementsRecursive() {\n    lca.getRecursive(null, null, null);\n  }", "signature": "void shouldNotAcceptNullElementsRecursive()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullElementsRecursive()", "class_method_signature": "LowestCommonAncestorTest.shouldNotAcceptNullElementsRecursive()", "testcase": true, "constructor": false, "invocations": ["getRecursive"]}, "focal_class": {"identifier": "LowestCommonAncestor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getRecursive", "parameters": "(BinaryNode root, BinaryNode n1, BinaryNode n2)", "modifiers": "public", "return": "BinaryNode", "signature": "BinaryNode getRecursive(BinaryNode root, BinaryNode n1, BinaryNode n2)", "full_signature": "public BinaryNode getRecursive(BinaryNode root, BinaryNode n1, BinaryNode n2)", "class_method_signature": "LowestCommonAncestor.getRecursive(BinaryNode root, BinaryNode n1, BinaryNode n2)", "testcase": false, "constructor": false}, {"identifier": "getRecursiveInner", "parameters": "(BinaryNode root, BinaryNode n1, BinaryNode n2)", "modifiers": "private", "return": "BinaryNode", "signature": "BinaryNode getRecursiveInner(BinaryNode root, BinaryNode n1, BinaryNode n2)", "full_signature": "private BinaryNode getRecursiveInner(BinaryNode root, BinaryNode n1, BinaryNode n2)", "class_method_signature": "LowestCommonAncestor.getRecursiveInner(BinaryNode root, BinaryNode n1, BinaryNode n2)", "testcase": false, "constructor": false}, {"identifier": "getIterative", "parameters": "(BinaryNode root, BinaryNode n1, BinaryNode n2)", "modifiers": "public", "return": "BinaryNode", "signature": "BinaryNode getIterative(BinaryNode root, BinaryNode n1, BinaryNode n2)", "full_signature": "public BinaryNode getIterative(BinaryNode root, BinaryNode n1, BinaryNode n2)", "class_method_signature": "LowestCommonAncestor.getIterative(BinaryNode root, BinaryNode n1, BinaryNode n2)", "testcase": false, "constructor": false}, {"identifier": "getPathTo", "parameters": "(BinaryNode root, BinaryNode target)", "modifiers": "private static", "return": "List<BinaryNode>", "signature": "List<BinaryNode> getPathTo(BinaryNode root, BinaryNode target)", "full_signature": "private static List<BinaryNode> getPathTo(BinaryNode root, BinaryNode target)", "class_method_signature": "LowestCommonAncestor.getPathTo(BinaryNode root, BinaryNode target)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(BinaryNode root, BinaryNode n1, BinaryNode n2)", "modifiers": "private", "return": "void", "signature": "void validateInput(BinaryNode root, BinaryNode n1, BinaryNode n2)", "full_signature": "private void validateInput(BinaryNode root, BinaryNode n1, BinaryNode n2)", "class_method_signature": "LowestCommonAncestor.validateInput(BinaryNode root, BinaryNode n1, BinaryNode n2)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem21/LowestCommonAncestor.java"}, "focal_method": {"identifier": "getRecursive", "parameters": "(BinaryNode root, BinaryNode n1, BinaryNode n2)", "modifiers": "public", "return": "BinaryNode", "body": "public BinaryNode getRecursive(BinaryNode root, BinaryNode n1, BinaryNode n2) {\n    validateInput(root, n1, n2);\n    return getRecursiveInner(root, n1, n2);\n  }", "signature": "BinaryNode getRecursive(BinaryNode root, BinaryNode n1, BinaryNode n2)", "full_signature": "public BinaryNode getRecursive(BinaryNode root, BinaryNode n1, BinaryNode n2)", "class_method_signature": "LowestCommonAncestor.getRecursive(BinaryNode root, BinaryNode n1, BinaryNode n2)", "testcase": false, "constructor": false, "invocations": ["validateInput", "getRecursiveInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}