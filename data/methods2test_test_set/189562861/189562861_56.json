{"test_class": {"identifier": "HessianProtocolTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-hessian/src/test/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianProtocolTest.java"}, "test_case": {"identifier": "testGenericInvokeWithBean", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenericInvokeWithBean() {\n        HessianServiceImpl server = new HessianServiceImpl();\n        Assert.assertFalse(server.isCalled());\n        ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\n        Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        URL url = URL.valueOf(\"hessian://127.0.0.1:5342/\" + HessianService.class.getName() + \"?version=1.0.0&generic=bean\");\n        Exporter<HessianService> exporter = protocol.export(proxyFactory.getInvoker(server, HessianService.class, url));\n        Invoker<GenericService> invoker = protocol.refer(GenericService.class, url);\n        GenericService client = proxyFactory.getProxy(invoker);\n\n        JavaBeanDescriptor javaBeanDescriptor = JavaBeanSerializeUtil.serialize(\"haha\");\n\n        Object result = client.$invoke(\"sayHello\", new String[]{\"java.lang.String\"}, new Object[]{javaBeanDescriptor});\n        Assert.assertTrue(server.isCalled());\n        Assert.assertEquals(\"Hello, haha\", JavaBeanSerializeUtil.deserialize((JavaBeanDescriptor) result));\n        invoker.destroy();\n        exporter.unexport();\n    }", "signature": "void testGenericInvokeWithBean()", "full_signature": "@Test public void testGenericInvokeWithBean()", "class_method_signature": "HessianProtocolTest.testGenericInvokeWithBean()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isCalled", "getAdaptiveExtension", "getExtensionLoader", "getAdaptiveExtension", "getExtensionLoader", "valueOf", "getName", "export", "getInvoker", "refer", "getProxy", "serialize", "invoke", "assertTrue", "isCalled", "assertEquals", "deserialize", "destroy", "unexport"]}, "focal_class": {"identifier": "HessianProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "private final Map<String, HttpServer> serverMap = new ConcurrentHashMap<String, HttpServer>();", "modifier": "private final", "type": "Map<String, HttpServer>", "declarator": "serverMap = new ConcurrentHashMap<String, HttpServer>()", "var_name": "serverMap"}, {"original_string": "private final Map<String, HessianSkeleton> skeletonMap = new ConcurrentHashMap<String, HessianSkeleton>();", "modifier": "private final", "type": "Map<String, HessianSkeleton>", "declarator": "skeletonMap = new ConcurrentHashMap<String, HessianSkeleton>()", "var_name": "skeletonMap"}, {"original_string": "private HttpBinder httpBinder;", "modifier": "private", "type": "HttpBinder", "declarator": "httpBinder", "var_name": "httpBinder"}], "methods": [{"identifier": "HessianProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " HessianProtocol()", "full_signature": "public  HessianProtocol()", "class_method_signature": "HessianProtocol.HessianProtocol()", "testcase": false, "constructor": true}, {"identifier": "setHttpBinder", "parameters": "(HttpBinder httpBinder)", "modifiers": "public", "return": "void", "signature": "void setHttpBinder(HttpBinder httpBinder)", "full_signature": "public void setHttpBinder(HttpBinder httpBinder)", "class_method_signature": "HessianProtocol.setHttpBinder(HttpBinder httpBinder)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "HessianProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(T impl, Class<T> type, URL url)", "class_method_signature": "HessianProtocol.doExport(T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(Class<T> serviceType, URL url)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "T", "signature": "T doRefer(Class<T> serviceType, URL url)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected T doRefer(Class<T> serviceType, URL url)", "class_method_signature": "HessianProtocol.doRefer(Class<T> serviceType, URL url)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(Throwable e)", "modifiers": "@Override protected", "return": "int", "signature": "int getErrorCode(Throwable e)", "full_signature": "@Override protected int getErrorCode(Throwable e)", "class_method_signature": "HessianProtocol.getErrorCode(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "HessianProtocol.destroy()", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-hessian/src/main/java/com/alibaba/dubbo/rpc/protocol/hessian/HessianProtocol.java"}, "focal_method": {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void destroy() {\n        super.destroy();\n        for (String key : new ArrayList<String>(serverMap.keySet())) {\n            HttpServer server = serverMap.remove(key);\n            if (server != null) {\n                try {\n                    if (logger.isInfoEnabled()) {\n                        logger.info(\"Close hessian server \" + server.getUrl());\n                    }\n                    server.close();\n                } catch (Throwable t) {\n                    logger.warn(t.getMessage(), t);\n                }\n            }\n        }\n    }", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "HessianProtocol.destroy()", "testcase": false, "constructor": false, "invocations": ["destroy", "keySet", "remove", "isInfoEnabled", "info", "getUrl", "close", "warn", "getMessage"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}