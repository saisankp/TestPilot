{"test_class": {"identifier": "FilterRecordTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Duration validPeriodAfterAccess = Duration.ofSeconds(3);", "modifier": "private static final", "type": "Duration", "declarator": "validPeriodAfterAccess = Duration.ofSeconds(3)", "var_name": "validPeriodAfterAccess"}, {"original_string": "private static final int expectedInsertions = 1000000;", "modifier": "private static final", "type": "int", "declarator": "expectedInsertions = 1000000", "var_name": "expectedInsertions"}, {"original_string": "private static final double fpp = 0.0001;", "modifier": "private static final", "type": "double", "declarator": "fpp = 0.0001", "var_name": "fpp"}, {"original_string": "private static final ZonedDateTime creation = ZonedDateTime.now(ZoneOffset.UTC);", "modifier": "private static final", "type": "ZonedDateTime", "declarator": "creation = ZonedDateTime.now(ZoneOffset.UTC)", "var_name": "creation"}, {"original_string": "private static final ZonedDateTime expiration = creation.plus(Duration.ofSeconds(10));", "modifier": "private static final", "type": "ZonedDateTime", "declarator": "expiration = creation.plus(Duration.ofSeconds(10))", "var_name": "expiration"}, {"original_string": "private static final String testingFilterName = \"testing_filter\";", "modifier": "private static final", "type": "String", "declarator": "testingFilterName = \"testing_filter\"", "var_name": "testingFilterName"}, {"original_string": "private File tempFile;", "modifier": "private", "type": "File", "declarator": "tempFile", "var_name": "tempFile"}, {"original_string": "private String tempDir;", "modifier": "private", "type": "String", "declarator": "tempDir", "var_name": "tempDir"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/FilterRecordTest.java"}, "test_case": {"identifier": "testReadWriteFilterRecord", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadWriteFilterRecord() throws Exception {\n        final GuavaBloomFilter filter = new GuavaBloomFilter(\n                expectedInsertions,\n                fpp,\n                creation,\n                expiration,\n                validPeriodAfterAccess);\n        final FilterRecord<GuavaBloomFilter> record = new FilterRecord<>(testingFilterName, filter);\n        final FileChannel channel = FileChannel.open(tempFile.toPath(), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.READ);\n\n        record.writeFullyTo(channel);\n\n        final FilterRecordInputStream<GuavaBloomFilter> stream = new FilterRecordInputStream<>(tempFile.toPath(), new GuavaBloomFilterFactory());\n        assertThat(stream.nextFilterRecord()).isEqualTo(new FilterRecord<>(testingFilterName, filter));\n    }", "signature": "void testReadWriteFilterRecord()", "full_signature": "@Test public void testReadWriteFilterRecord()", "class_method_signature": "FilterRecordTest.testReadWriteFilterRecord()", "testcase": true, "constructor": false, "invocations": ["open", "toPath", "writeFullyTo", "toPath", "isEqualTo", "assertThat", "nextFilterRecord"]}, "focal_class": {"identifier": "FilterRecord", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int BODY_LENGTH_OFFSET = 0;", "modifier": "static final", "type": "int", "declarator": "BODY_LENGTH_OFFSET = 0", "var_name": "BODY_LENGTH_OFFSET"}, {"original_string": "static final int BODY_LENGTH_LENGTH = 4;", "modifier": "static final", "type": "int", "declarator": "BODY_LENGTH_LENGTH = 4", "var_name": "BODY_LENGTH_LENGTH"}, {"original_string": "static final int MAGIC_OFFSET = BODY_LENGTH_OFFSET + BODY_LENGTH_LENGTH;", "modifier": "static final", "type": "int", "declarator": "MAGIC_OFFSET = BODY_LENGTH_OFFSET + BODY_LENGTH_LENGTH", "var_name": "MAGIC_OFFSET"}, {"original_string": "static final int MAGIC_LENGTH = 1;", "modifier": "static final", "type": "int", "declarator": "MAGIC_LENGTH = 1", "var_name": "MAGIC_LENGTH"}, {"original_string": "static final int CRC_OFFSET = MAGIC_OFFSET + MAGIC_LENGTH;", "modifier": "static final", "type": "int", "declarator": "CRC_OFFSET = MAGIC_OFFSET + MAGIC_LENGTH", "var_name": "CRC_OFFSET"}, {"original_string": "static final int CRC_LENGTH = 4;", "modifier": "static final", "type": "int", "declarator": "CRC_LENGTH = 4", "var_name": "CRC_LENGTH"}, {"original_string": "static final int HEADER_OVERHEAD = CRC_OFFSET + CRC_LENGTH;", "modifier": "static final", "type": "int", "declarator": "HEADER_OVERHEAD = CRC_OFFSET + CRC_LENGTH", "var_name": "HEADER_OVERHEAD"}, {"original_string": "static final byte DEFAULT_MAGIC = (byte) 0;", "modifier": "static final", "type": "byte", "declarator": "DEFAULT_MAGIC = (byte) 0", "var_name": "DEFAULT_MAGIC"}, {"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final F filter;", "modifier": "private final", "type": "F", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "FilterRecord", "parameters": "(String name, F filter)", "modifiers": "public", "return": "", "signature": " FilterRecord(String name, F filter)", "full_signature": "public  FilterRecord(String name, F filter)", "class_method_signature": "FilterRecord.FilterRecord(String name, F filter)", "testcase": false, "constructor": true}, {"identifier": "name", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String name()", "full_signature": "public String name()", "class_method_signature": "FilterRecord.name()", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "()", "modifiers": "public", "return": "F", "signature": "F filter()", "full_signature": "public F filter()", "class_method_signature": "FilterRecord.filter()", "testcase": false, "constructor": false}, {"identifier": "writeFullyTo", "parameters": "(FileChannel channel)", "modifiers": "public", "return": "int", "signature": "int writeFullyTo(FileChannel channel)", "full_signature": "public int writeFullyTo(FileChannel channel)", "class_method_signature": "FilterRecord.writeFullyTo(FileChannel channel)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "FilterRecord.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FilterRecord.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FilterRecord.toString()", "testcase": false, "constructor": false}, {"identifier": "writeBody", "parameters": "(OutputStream out)", "modifiers": "private", "return": "void", "signature": "void writeBody(OutputStream out)", "full_signature": "private void writeBody(OutputStream out)", "class_method_signature": "FilterRecord.writeBody(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeBufferTo", "parameters": "(GatheringByteChannel channel, ByteBuffer buffer)", "modifiers": "private", "return": "int", "signature": "int writeBufferTo(GatheringByteChannel channel, ByteBuffer buffer)", "full_signature": "private int writeBufferTo(GatheringByteChannel channel, ByteBuffer buffer)", "class_method_signature": "FilterRecord.writeBufferTo(GatheringByteChannel channel, ByteBuffer buffer)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/FilterRecord.java"}, "focal_method": {"identifier": "writeFullyTo", "parameters": "(FileChannel channel)", "modifiers": "public", "return": "int", "body": "public int writeFullyTo(FileChannel channel) throws IOException {\n        final long startPos = channel.position();\n        // write body first then we can know how large the body is\n        channel.position(startPos + HEADER_OVERHEAD);\n\n        // we don't need to close this stream. it'll be effectively closed when the underlying channel closed\n        final ChecksumedBufferedOutputStream stream = new ChecksumedBufferedOutputStream(\n                Channels.newOutputStream(channel),\n                Configuration.channelBufferSizeForFilterPersistence());\n        writeBody(stream);\n        stream.flush();\n\n        // write header\n        int bodyLen = (int) (channel.position() - startPos - HEADER_OVERHEAD);\n        channel.position(startPos);\n\n        final ByteBuffer headerBuffer = ByteBuffer.allocate(HEADER_OVERHEAD);\n        headerBuffer.putInt(BODY_LENGTH_OFFSET, bodyLen);\n        headerBuffer.put(MAGIC_OFFSET, DEFAULT_MAGIC);\n        headerBuffer.putInt(CRC_OFFSET, (int) stream.checksum());\n        writeBufferTo(channel, headerBuffer);\n\n        // move position forward to the end of this record\n        channel.position(startPos + HEADER_OVERHEAD + bodyLen);\n        return HEADER_OVERHEAD + bodyLen;\n    }", "signature": "int writeFullyTo(FileChannel channel)", "full_signature": "public int writeFullyTo(FileChannel channel)", "class_method_signature": "FilterRecord.writeFullyTo(FileChannel channel)", "testcase": false, "constructor": false, "invocations": ["position", "position", "newOutputStream", "channelBufferSizeForFilterPersistence", "writeBody", "flush", "position", "position", "allocate", "putInt", "put", "putInt", "checksum", "writeBufferTo", "position"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}