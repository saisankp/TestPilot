{"test_class": {"identifier": "EuclideanDistanceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EuclideanDistance distance = new EuclideanDistance();", "modifier": "private", "type": "EuclideanDistance", "declarator": "distance = new EuclideanDistance()", "var_name": "distance"}, {"original_string": "private DenseVector denseVector1 = new DenseVector(new double[] {1, 2, 4, 1, 3});", "modifier": "private", "type": "DenseVector", "declarator": "denseVector1 = new DenseVector(new double[] {1, 2, 4, 1, 3})", "var_name": "denseVector1"}, {"original_string": "private DenseVector denseVector2 = new DenseVector(new double[] {4, 6, 1, 2, 4});", "modifier": "private", "type": "DenseVector", "declarator": "denseVector2 = new DenseVector(new double[] {4, 6, 1, 2, 4})", "var_name": "denseVector2"}, {"original_string": "private SparseVector sparseVector1 = new SparseVector(5, new int[] {1, 3}, new double[] {0.1, 0.4});", "modifier": "private", "type": "SparseVector", "declarator": "sparseVector1 = new SparseVector(5, new int[] {1, 3}, new double[] {0.1, 0.4})", "var_name": "sparseVector1"}, {"original_string": "private SparseVector sparseVector2 = new SparseVector(5, new int[] {2, 3}, new double[] {0.4, 0.1});", "modifier": "private", "type": "SparseVector", "declarator": "sparseVector2 = new SparseVector(5, new int[] {2, 3}, new double[] {0.4, 0.1})", "var_name": "sparseVector2"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/distance/EuclideanDistanceTest.java"}, "test_case": {"identifier": "testCalDistanceVecVec", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalDistanceVecVec(){\n        DenseMatrix denseResult = distance.calc(distance.prepareVectorData(Tuple2.of(denseVector1, null)), (FastDistanceData)distance.prepareVectorData(Tuple2.of(\n\n\n            denseVector2, null)));\n        Assert.assertEquals(denseResult.get(0, 0), 6.0, 0.01);\n\n        DenseMatrix sparseResult = distance.calc(distance.prepareVectorData(Tuple2.of(sparseVector1, null)), (FastDistanceData)distance.prepareVectorData(Tuple2.of(\n\n\n            sparseVector2, null)));\n        Assert.assertEquals(sparseResult.get(0, 0), 0.5, 0.01);\n    }", "signature": "void testCalDistanceVecVec()", "full_signature": "@Test public void testCalDistanceVecVec()", "class_method_signature": "EuclideanDistanceTest.testCalDistanceVecVec()", "testcase": true, "constructor": false, "invocations": ["calc", "prepareVectorData", "of", "prepareVectorData", "of", "assertEquals", "get", "calc", "prepareVectorData", "of", "prepareVectorData", "of", "assertEquals", "get"]}, "focal_class": {"identifier": "EuclideanDistance", "superclass": "extends FastDistance", "interfaces": "", "fields": [{"original_string": "private static int LABEL_SIZE = 1;", "modifier": "private static", "type": "int", "declarator": "LABEL_SIZE = 1", "var_name": "LABEL_SIZE"}], "methods": [{"identifier": "calc", "parameters": "(double[] array1, double[] array2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(double[] array1, double[] array2)", "full_signature": "@Override public double calc(double[] array1, double[] array2)", "class_method_signature": "EuclideanDistance.calc(double[] array1, double[] array2)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(Vector vec1, Vector vec2)", "full_signature": "@Override public double calc(Vector vec1, Vector vec2)", "class_method_signature": "EuclideanDistance.calc(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "updateLabel", "parameters": "(FastDistanceData data)", "modifiers": "@Override public", "return": "void", "signature": "void updateLabel(FastDistanceData data)", "full_signature": "@Override public void updateLabel(FastDistanceData data)", "class_method_signature": "EuclideanDistance.updateLabel(FastDistanceData data)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData left, FastDistanceVectorData right)", "modifiers": "@Override", "return": "double", "signature": "double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "full_signature": "@Override double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "class_method_signature": "EuclideanDistance.calc(FastDistanceVectorData left, FastDistanceVectorData right)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "full_signature": "@Override void calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "class_method_signature": "EuclideanDistance.calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "full_signature": "@Override void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "class_method_signature": "EuclideanDistance.calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/distance/EuclideanDistance.java"}, "focal_method": {"identifier": "calc", "parameters": "(double[] array1, double[] array2)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double calc(double[] array1, double[] array2) {\n        double s = 0.;\n        for (int i = 0; i < array1.length; i++) {\n            double d = array1[i] - array2[i];\n            s += d * d;\n        }\n        return Math.sqrt(s);\n    }", "signature": "double calc(double[] array1, double[] array2)", "full_signature": "@Override public double calc(double[] array1, double[] array2)", "class_method_signature": "EuclideanDistance.calc(double[] array1, double[] array2)", "testcase": false, "constructor": false, "invocations": ["sqrt"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}