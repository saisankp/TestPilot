{"test_class": {"identifier": "StringTypeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StringType type = new StringType();", "modifier": "private", "type": "StringType", "declarator": "type = new StringType()", "var_name": "type"}], "file": "smartparam-engine/src/test/java/org/smartparam/engine/types/string/StringTypeTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode() {\n\n        // przypadki testowe\n        Object[][] testCases = {\n            {\"abc\", new StringHolder(\"abc\")},\n            {\"\", new StringHolder(\"\")},\n            {null, new StringHolder(null)}\n        };\n\n        // wykonanie testow\n        for (Object[] testCase : testCases) {\n            String text = (String) testCase[0];\n            StringHolder expectedHolder = (StringHolder) testCase[1];\n\n            StringHolder holder = type.decode(text);\n            assertEquals(expectedHolder.getValue(), holder.getValue());\n        }\n    }", "signature": "void testDecode()", "full_signature": "@Test public void testDecode()", "class_method_signature": "StringTypeTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["decode", "assertEquals", "getValue", "getValue"]}, "focal_class": {"identifier": "StringType", "superclass": "", "interfaces": "implements Type<StringHolder>", "fields": [{"original_string": "public static final String TYPE_NAME = \"string\";", "modifier": "public static final", "type": "String", "declarator": "TYPE_NAME = \"string\"", "var_name": "TYPE_NAME"}], "methods": [{"identifier": "encode", "parameters": "(StringHolder holder)", "modifiers": "@Override public", "return": "String", "signature": "String encode(StringHolder holder)", "full_signature": "@Override public String encode(StringHolder holder)", "class_method_signature": "StringType.encode(StringHolder holder)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "StringHolder", "signature": "StringHolder decode(String text)", "full_signature": "@Override public StringHolder decode(String text)", "class_method_signature": "StringType.decode(String text)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "StringHolder", "signature": "StringHolder convert(Object obj)", "full_signature": "@Override public StringHolder convert(Object obj)", "class_method_signature": "StringType.convert(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newArray", "parameters": "(int size)", "modifiers": "@Override public", "return": "StringHolder[]", "signature": "StringHolder[] newArray(int size)", "full_signature": "@Override public StringHolder[] newArray(int size)", "class_method_signature": "StringType.newArray(int size)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/types/string/StringType.java"}, "focal_method": {"identifier": "decode", "parameters": "(String text)", "modifiers": "@Override public", "return": "StringHolder", "body": "@Override\n    public StringHolder decode(String text) {\n        return new StringHolder(text);\n    }", "signature": "StringHolder decode(String text)", "full_signature": "@Override public StringHolder decode(String text)", "class_method_signature": "StringType.decode(String text)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}