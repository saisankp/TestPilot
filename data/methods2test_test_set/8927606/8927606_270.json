{"test_class": {"identifier": "IteratingPipeTest", "superclass": "extends PipeTestBase<P>", "interfaces": "", "fields": [{"original_string": "protected StringBuffer resultLog;", "modifier": "protected", "type": "StringBuffer", "declarator": "resultLog", "var_name": "resultLog"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/IteratingPipeTest.java"}, "test_case": {"identifier": "testNullIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNullIterator() throws Exception {\n\t\tpipe.setSender(getElementRenderer(false));\n\t\tconfigurePipe();\n\t\tpipe.start();\n\t\t\n\t\tString expected = \"<results/>\";\n\t\t\n\t\tPipeRunResult prr = doPipe(new Message(\"\"));\n\t\tMatchUtils.assertXmlEquals(\"null iterator\", expected, prr.getResult().asString(), true);\n\t}", "signature": "void testNullIterator()", "full_signature": "@Test public void testNullIterator()", "class_method_signature": "IteratingPipeTest.testNullIterator()", "testcase": true, "constructor": false, "invocations": ["setSender", "getElementRenderer", "configurePipe", "start", "doPipe", "assertXmlEquals", "asString", "getResult"]}, "focal_class": {"identifier": "IteratingPipe", "superclass": "extends MessageSendingPipe", "interfaces": "", "fields": [{"original_string": "private String styleSheetName;", "modifier": "private", "type": "String", "declarator": "styleSheetName", "var_name": "styleSheetName"}, {"original_string": "private String xpathExpression=null;", "modifier": "private", "type": "String", "declarator": "xpathExpression=null", "var_name": "xpathExpression"}, {"original_string": "private String namespaceDefs = null;", "modifier": "private", "type": "String", "declarator": "namespaceDefs = null", "var_name": "namespaceDefs"}, {"original_string": "private String outputType=\"text\";", "modifier": "private", "type": "String", "declarator": "outputType=\"text\"", "var_name": "outputType"}, {"original_string": "private boolean omitXmlDeclaration=true;", "modifier": "private", "type": "boolean", "declarator": "omitXmlDeclaration=true", "var_name": "omitXmlDeclaration"}, {"original_string": "private String itemNoSessionKey=null;", "modifier": "private", "type": "String", "declarator": "itemNoSessionKey=null", "var_name": "itemNoSessionKey"}, {"original_string": "private String stopConditionXPathExpression=null;", "modifier": "private", "type": "String", "declarator": "stopConditionXPathExpression=null", "var_name": "stopConditionXPathExpression"}, {"original_string": "private int maxItems;", "modifier": "private", "type": "int", "declarator": "maxItems", "var_name": "maxItems"}, {"original_string": "private boolean ignoreExceptions=false;", "modifier": "private", "type": "boolean", "declarator": "ignoreExceptions=false", "var_name": "ignoreExceptions"}, {"original_string": "private boolean collectResults=true;", "modifier": "private", "type": "boolean", "declarator": "collectResults=true", "var_name": "collectResults"}, {"original_string": "private boolean removeXmlDeclarationInResults=false;", "modifier": "private", "type": "boolean", "declarator": "removeXmlDeclarationInResults=false", "var_name": "removeXmlDeclarationInResults"}, {"original_string": "private boolean addInputToResult=false;", "modifier": "private", "type": "boolean", "declarator": "addInputToResult=false", "var_name": "addInputToResult"}, {"original_string": "private boolean removeDuplicates=false;", "modifier": "private", "type": "boolean", "declarator": "removeDuplicates=false", "var_name": "removeDuplicates"}, {"original_string": "private boolean closeIteratorOnExit=true;", "modifier": "private", "type": "boolean", "declarator": "closeIteratorOnExit=true", "var_name": "closeIteratorOnExit"}, {"original_string": "private boolean parallel = false;", "modifier": "private", "type": "boolean", "declarator": "parallel = false", "var_name": "parallel"}, {"original_string": "private int maxChildThreads = 0;", "modifier": "private", "type": "int", "declarator": "maxChildThreads = 0", "var_name": "maxChildThreads"}, {"original_string": "private int blockSize=0;", "modifier": "private", "type": "int", "declarator": "blockSize=0", "var_name": "blockSize"}, {"original_string": "private TaskExecutor taskExecutor;", "modifier": "private", "type": "TaskExecutor", "declarator": "taskExecutor", "var_name": "taskExecutor"}, {"original_string": "protected TransformerPool msgTransformerPool;", "modifier": "protected", "type": "TransformerPool", "declarator": "msgTransformerPool", "var_name": "msgTransformerPool"}, {"original_string": "private TransformerPool stopConditionTp=null;", "modifier": "private", "type": "TransformerPool", "declarator": "stopConditionTp=null", "var_name": "stopConditionTp"}, {"original_string": "private StatisticsKeeper preprocessingStatisticsKeeper;", "modifier": "private", "type": "StatisticsKeeper", "declarator": "preprocessingStatisticsKeeper", "var_name": "preprocessingStatisticsKeeper"}, {"original_string": "private StatisticsKeeper senderStatisticsKeeper;", "modifier": "private", "type": "StatisticsKeeper", "declarator": "senderStatisticsKeeper", "var_name": "senderStatisticsKeeper"}, {"original_string": "private StatisticsKeeper stopConditionStatisticsKeeper;", "modifier": "private", "type": "StatisticsKeeper", "declarator": "stopConditionStatisticsKeeper", "var_name": "stopConditionStatisticsKeeper"}, {"original_string": "private Semaphore childThreadSemaphore=null;", "modifier": "private", "type": "Semaphore", "declarator": "childThreadSemaphore=null", "var_name": "childThreadSemaphore"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "IteratingPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "getIterator", "parameters": "(Message input, IPipeLineSession session, Map<String,Object> threadContext)", "modifiers": "protected", "return": "IDataIterator<I>", "signature": "IDataIterator<I> getIterator(Message input, IPipeLineSession session, Map<String,Object> threadContext)", "full_signature": "protected IDataIterator<I> getIterator(Message input, IPipeLineSession session, Map<String,Object> threadContext)", "class_method_signature": "IteratingPipe.getIterator(Message input, IPipeLineSession session, Map<String,Object> threadContext)", "testcase": false, "constructor": false}, {"identifier": "createItemCallBack", "parameters": "(IPipeLineSession session, ISender sender, Writer out)", "modifiers": "protected", "return": "ItemCallback", "signature": "ItemCallback createItemCallBack(IPipeLineSession session, ISender sender, Writer out)", "full_signature": "protected ItemCallback createItemCallBack(IPipeLineSession session, ISender sender, Writer out)", "class_method_signature": "IteratingPipe.createItemCallBack(IPipeLineSession session, ISender sender, Writer out)", "testcase": false, "constructor": false}, {"identifier": "itemToMessage", "parameters": "(I item)", "modifiers": "protected", "return": "Message", "signature": "Message itemToMessage(I item)", "full_signature": "protected Message itemToMessage(I item)", "class_method_signature": "IteratingPipe.itemToMessage(I item)", "testcase": false, "constructor": false}, {"identifier": "iterateOverInput", "parameters": "(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "modifiers": "protected", "return": "void", "signature": "void iterateOverInput(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "full_signature": "protected void iterateOverInput(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "class_method_signature": "IteratingPipe.iterateOverInput(Message input, IPipeLineSession session, Map<String,Object> threadContext, ItemCallback callback)", "testcase": false, "constructor": false}, {"identifier": "provideOutputStream", "parameters": "(IPipeLineSession session)", "modifiers": "@Override public", "return": "MessageOutputStream", "signature": "MessageOutputStream provideOutputStream(IPipeLineSession session)", "full_signature": "@Override public MessageOutputStream provideOutputStream(IPipeLineSession session)", "class_method_signature": "IteratingPipe.provideOutputStream(IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "canStreamToNextPipe", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canStreamToNextPipe()", "full_signature": "@Override public boolean canStreamToNextPipe()", "class_method_signature": "IteratingPipe.canStreamToNextPipe()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Message input, IPipeLineSession session, ISender sender, Map<String,Object> threadContext)", "modifiers": "@Override protected", "return": "PipeRunResult", "signature": "PipeRunResult sendMessage(Message input, IPipeLineSession session, ISender sender, Map<String,Object> threadContext)", "full_signature": "@Override protected PipeRunResult sendMessage(Message input, IPipeLineSession session, ISender sender, Map<String,Object> threadContext)", "class_method_signature": "IteratingPipe.sendMessage(Message input, IPipeLineSession session, ISender sender, Map<String,Object> threadContext)", "testcase": false, "constructor": false}, {"identifier": "getItem", "parameters": "(IDataIterator<I> it)", "modifiers": "protected", "return": "I", "signature": "I getItem(IDataIterator<I> it)", "full_signature": "protected I getItem(IDataIterator<I> it)", "class_method_signature": "IteratingPipe.getItem(IDataIterator<I> it)", "testcase": false, "constructor": false}, {"identifier": "iterateOverStatistics", "parameters": "(StatisticsKeeperIterationHandler hski, Object data, int action)", "modifiers": "@Override public", "return": "void", "signature": "void iterateOverStatistics(StatisticsKeeperIterationHandler hski, Object data, int action)", "full_signature": "@Override public void iterateOverStatistics(StatisticsKeeperIterationHandler hski, Object data, int action)", "class_method_signature": "IteratingPipe.iterateOverStatistics(StatisticsKeeperIterationHandler hski, Object data, int action)", "testcase": false, "constructor": false}, {"identifier": "setSender", "parameters": "(ISender sender)", "modifiers": "@Override public", "return": "void", "signature": "void setSender(ISender sender)", "full_signature": "@Override public void setSender(ISender sender)", "class_method_signature": "IteratingPipe.setSender(ISender sender)", "testcase": false, "constructor": false}, {"identifier": "setTaskExecutor", "parameters": "(TaskExecutor executor)", "modifiers": "public", "return": "void", "signature": "void setTaskExecutor(TaskExecutor executor)", "full_signature": "public void setTaskExecutor(TaskExecutor executor)", "class_method_signature": "IteratingPipe.setTaskExecutor(TaskExecutor executor)", "testcase": false, "constructor": false}, {"identifier": "getTaskExecutor", "parameters": "()", "modifiers": "public", "return": "TaskExecutor", "signature": "TaskExecutor getTaskExecutor()", "full_signature": "public TaskExecutor getTaskExecutor()", "class_method_signature": "IteratingPipe.getTaskExecutor()", "testcase": false, "constructor": false}, {"identifier": "getStopConditionTp", "parameters": "()", "modifiers": "protected", "return": "TransformerPool", "signature": "TransformerPool getStopConditionTp()", "full_signature": "protected TransformerPool getStopConditionTp()", "class_method_signature": "IteratingPipe.getStopConditionTp()", "testcase": false, "constructor": false}, {"identifier": "setStyleSheetName", "parameters": "(String stylesheetName)", "modifiers": "@IbisDoc({\"1\", \"Stylesheet to apply to each message, before sending it\", \"\"}) public", "return": "void", "signature": "void setStyleSheetName(String stylesheetName)", "full_signature": "@IbisDoc({\"1\", \"Stylesheet to apply to each message, before sending it\", \"\"}) public void setStyleSheetName(String stylesheetName)", "class_method_signature": "IteratingPipe.setStyleSheetName(String stylesheetName)", "testcase": false, "constructor": false}, {"identifier": "getStyleSheetName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStyleSheetName()", "full_signature": "public String getStyleSheetName()", "class_method_signature": "IteratingPipe.getStyleSheetName()", "testcase": false, "constructor": false}, {"identifier": "setXpathExpression", "parameters": "(String string)", "modifiers": "@IbisDoc({\"2\", \"Alternatively: xpath-expression to create stylesheet from\", \"\"}) public", "return": "void", "signature": "void setXpathExpression(String string)", "full_signature": "@IbisDoc({\"2\", \"Alternatively: xpath-expression to create stylesheet from\", \"\"}) public void setXpathExpression(String string)", "class_method_signature": "IteratingPipe.setXpathExpression(String string)", "testcase": false, "constructor": false}, {"identifier": "getXpathExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getXpathExpression()", "full_signature": "public String getXpathExpression()", "class_method_signature": "IteratingPipe.getXpathExpression()", "testcase": false, "constructor": false}, {"identifier": "setNamespaceDefs", "parameters": "(String namespaceDefs)", "modifiers": "@IbisDoc({\"3\", \"Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.\", \"\"}) public", "return": "void", "signature": "void setNamespaceDefs(String namespaceDefs)", "full_signature": "@IbisDoc({\"3\", \"Namespace defintions for xpathExpression. Must be in the form of a comma or space separated list of <code>prefix=namespaceuri</code>-definitions. For some use other cases (NOT xpathExpression), one entry can be without a prefix, that will define the default namespace.\", \"\"}) public void setNamespaceDefs(String namespaceDefs)", "class_method_signature": "IteratingPipe.setNamespaceDefs(String namespaceDefs)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceDefs", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespaceDefs()", "full_signature": "public String getNamespaceDefs()", "class_method_signature": "IteratingPipe.getNamespaceDefs()", "testcase": false, "constructor": false}, {"identifier": "setOutputType", "parameters": "(String string)", "modifiers": "@IbisDoc({\"4\", \"Either 'text' or 'xml'. only valid for xpathexpression\", \"text\"}) public", "return": "void", "signature": "void setOutputType(String string)", "full_signature": "@IbisDoc({\"4\", \"Either 'text' or 'xml'. only valid for xpathexpression\", \"text\"}) public void setOutputType(String string)", "class_method_signature": "IteratingPipe.setOutputType(String string)", "testcase": false, "constructor": false}, {"identifier": "getOutputType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOutputType()", "full_signature": "public String getOutputType()", "class_method_signature": "IteratingPipe.getOutputType()", "testcase": false, "constructor": false}, {"identifier": "setOmitXmlDeclaration", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"5\", \"Force the transformer generated from the xpath-expression to omit the xml declaration\", \"true\"}) public", "return": "void", "signature": "void setOmitXmlDeclaration(boolean b)", "full_signature": "@IbisDoc({\"5\", \"Force the transformer generated from the xpath-expression to omit the xml declaration\", \"true\"}) public void setOmitXmlDeclaration(boolean b)", "class_method_signature": "IteratingPipe.setOmitXmlDeclaration(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isOmitXmlDeclaration", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isOmitXmlDeclaration()", "full_signature": "public boolean isOmitXmlDeclaration()", "class_method_signature": "IteratingPipe.isOmitXmlDeclaration()", "testcase": false, "constructor": false}, {"identifier": "setItemNoSessionKey", "parameters": "(String string)", "modifiers": "@IbisDoc({\"6\", \"Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.\", \"\"}) public", "return": "void", "signature": "void setItemNoSessionKey(String string)", "full_signature": "@IbisDoc({\"6\", \"Key of session variable to store number of items processed, i.e. the position or index in the set of items to be processed.\", \"\"}) public void setItemNoSessionKey(String string)", "class_method_signature": "IteratingPipe.setItemNoSessionKey(String string)", "testcase": false, "constructor": false}, {"identifier": "getItemNoSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getItemNoSessionKey()", "full_signature": "public String getItemNoSessionKey()", "class_method_signature": "IteratingPipe.getItemNoSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setMaxItems", "parameters": "(int maxItems)", "modifiers": "@IbisDoc({\"7\", \"The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned\",\"0\"}) public", "return": "void", "signature": "void setMaxItems(int maxItems)", "full_signature": "@IbisDoc({\"7\", \"The maximum number of items returned. The (default) value of 0 means unlimited, all available items will be returned\",\"0\"}) public void setMaxItems(int maxItems)", "class_method_signature": "IteratingPipe.setMaxItems(int maxItems)", "testcase": false, "constructor": false}, {"identifier": "getMaxItems", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxItems()", "full_signature": "public int getMaxItems()", "class_method_signature": "IteratingPipe.getMaxItems()", "testcase": false, "constructor": false}, {"identifier": "setStopConditionXPathExpression", "parameters": "(String string)", "modifiers": "@IbisDoc({\"7\", \"Expression evaluated on each result if set. \" + \"Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression <code>*[@finished='yes']</code> can be used. \" + \"This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use <code>maxItems</code>.\" + \"Previous versions documented that <code>position()=2</code> could be used. This is not working as expected; Use maxItems instead\", \"\"}) public", "return": "void", "signature": "void setStopConditionXPathExpression(String string)", "full_signature": "@IbisDoc({\"7\", \"Expression evaluated on each result if set. \" + \"Iteration stops if condition returns anything other than an empty result. To test for the root element to have an attribute 'finished' with the value 'yes', the expression <code>*[@finished='yes']</code> can be used. \" + \"This can be used if the condition to stop can be derived from the item result. To stop after a maximum number of items has been processed, use <code>maxItems</code>.\" + \"Previous versions documented that <code>position()=2</code> could be used. This is not working as expected; Use maxItems instead\", \"\"}) public void setStopConditionXPathExpression(String string)", "class_method_signature": "IteratingPipe.setStopConditionXPathExpression(String string)", "testcase": false, "constructor": false}, {"identifier": "getStopConditionXPathExpression", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStopConditionXPathExpression()", "full_signature": "public String getStopConditionXPathExpression()", "class_method_signature": "IteratingPipe.getStopConditionXPathExpression()", "testcase": false, "constructor": false}, {"identifier": "setIgnoreExceptions", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"8\", \"When <code>true</code> ignore any exception thrown by executing sender\", \"false\"}) public", "return": "void", "signature": "void setIgnoreExceptions(boolean b)", "full_signature": "@IbisDoc({\"8\", \"When <code>true</code> ignore any exception thrown by executing sender\", \"false\"}) public void setIgnoreExceptions(boolean b)", "class_method_signature": "IteratingPipe.setIgnoreExceptions(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isIgnoreExceptions", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isIgnoreExceptions()", "full_signature": "public boolean isIgnoreExceptions()", "class_method_signature": "IteratingPipe.isIgnoreExceptions()", "testcase": false, "constructor": false}, {"identifier": "setCollectResults", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"9\", \"Controls whether all the results of each iteration will be collected in one result message. If set <code>false</code>, only a small summary is returned. \" + \"Setting this attributes to <code>false</code> is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too\", \"true\"}) public", "return": "void", "signature": "void setCollectResults(boolean b)", "full_signature": "@IbisDoc({\"9\", \"Controls whether all the results of each iteration will be collected in one result message. If set <code>false</code>, only a small summary is returned. \" + \"Setting this attributes to <code>false</code> is often required to enable processing of very large files. N.B. Remember in such a case that setting transactionAttribute to NotSupported might be necessary too\", \"true\"}) public void setCollectResults(boolean b)", "class_method_signature": "IteratingPipe.setCollectResults(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isCollectResults", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCollectResults()", "full_signature": "public boolean isCollectResults()", "class_method_signature": "IteratingPipe.isCollectResults()", "testcase": false, "constructor": false}, {"identifier": "setRemoveXmlDeclarationInResults", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"10\", \"Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document\", \"false\"}) public", "return": "void", "signature": "void setRemoveXmlDeclarationInResults(boolean b)", "full_signature": "@IbisDoc({\"10\", \"Postprocess each partial result, to remove the xml-declaration, as this is not allowed inside an xml-document\", \"false\"}) public void setRemoveXmlDeclarationInResults(boolean b)", "class_method_signature": "IteratingPipe.setRemoveXmlDeclarationInResults(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isRemoveXmlDeclarationInResults", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRemoveXmlDeclarationInResults()", "full_signature": "public boolean isRemoveXmlDeclarationInResults()", "class_method_signature": "IteratingPipe.isRemoveXmlDeclarationInResults()", "testcase": false, "constructor": false}, {"identifier": "setAddInputToResult", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"11\", \"When <code>true</code> the input is added to the result in an input element\", \"false\"}) public", "return": "void", "signature": "void setAddInputToResult(boolean b)", "full_signature": "@IbisDoc({\"11\", \"When <code>true</code> the input is added to the result in an input element\", \"false\"}) public void setAddInputToResult(boolean b)", "class_method_signature": "IteratingPipe.setAddInputToResult(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isAddInputToResult", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAddInputToResult()", "full_signature": "public boolean isAddInputToResult()", "class_method_signature": "IteratingPipe.isAddInputToResult()", "testcase": false, "constructor": false}, {"identifier": "setRemoveDuplicates", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"12\", \"When <code>true</code> duplicate input elements are removed, i.e. they are handled only once\", \"false\"}) public", "return": "void", "signature": "void setRemoveDuplicates(boolean b)", "full_signature": "@IbisDoc({\"12\", \"When <code>true</code> duplicate input elements are removed, i.e. they are handled only once\", \"false\"}) public void setRemoveDuplicates(boolean b)", "class_method_signature": "IteratingPipe.setRemoveDuplicates(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isRemoveDuplicates", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRemoveDuplicates()", "full_signature": "public boolean isRemoveDuplicates()", "class_method_signature": "IteratingPipe.isRemoveDuplicates()", "testcase": false, "constructor": false}, {"identifier": "setCloseIteratorOnExit", "parameters": "(boolean b)", "modifiers": "protected", "return": "void", "signature": "void setCloseIteratorOnExit(boolean b)", "full_signature": "protected void setCloseIteratorOnExit(boolean b)", "class_method_signature": "IteratingPipe.setCloseIteratorOnExit(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isCloseIteratorOnExit", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isCloseIteratorOnExit()", "full_signature": "protected boolean isCloseIteratorOnExit()", "class_method_signature": "IteratingPipe.isCloseIteratorOnExit()", "testcase": false, "constructor": false}, {"identifier": "setParallel", "parameters": "(boolean parallel)", "modifiers": "@IbisDoc({\"13\", \"When set <code>true</code>, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set <code>true</code>, this pipe will wait for all calls to finish before results are collected and pipe result is returned\", \"false\"}) public", "return": "void", "signature": "void setParallel(boolean parallel)", "full_signature": "@IbisDoc({\"13\", \"When set <code>true</code>, the calls for all items are done in parallel (a new thread is started for each call). when collectresults set <code>true</code>, this pipe will wait for all calls to finish before results are collected and pipe result is returned\", \"false\"}) public void setParallel(boolean parallel)", "class_method_signature": "IteratingPipe.setParallel(boolean parallel)", "testcase": false, "constructor": false}, {"identifier": "isParallel", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isParallel()", "full_signature": "public boolean isParallel()", "class_method_signature": "IteratingPipe.isParallel()", "testcase": false, "constructor": false}, {"identifier": "setMaxChildThreads", "parameters": "(int maxChildThreads)", "modifiers": "@IbisDoc({\"14\", \"maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe)\", \"0 (unlimited)\"}) public", "return": "void", "signature": "void setMaxChildThreads(int maxChildThreads)", "full_signature": "@IbisDoc({\"14\", \"maximum number of child threads that may run in parallel simultaneously (combined total of all threads calling this pipe)\", \"0 (unlimited)\"}) public void setMaxChildThreads(int maxChildThreads)", "class_method_signature": "IteratingPipe.setMaxChildThreads(int maxChildThreads)", "testcase": false, "constructor": false}, {"identifier": "getMaxChildThreads", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxChildThreads()", "full_signature": "public int getMaxChildThreads()", "class_method_signature": "IteratingPipe.getMaxChildThreads()", "testcase": false, "constructor": false}, {"identifier": "setBlockSize", "parameters": "(int i)", "modifiers": "@IbisDoc({\"15\", \"Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender.\", \"0 (one line at a time, no prefix of suffix)\"}) public", "return": "void", "signature": "void setBlockSize(int i)", "full_signature": "@IbisDoc({\"15\", \"Controls multiline behaviour. when set to a value greater than 0, it specifies the number of rows send in a block to the sender.\", \"0 (one line at a time, no prefix of suffix)\"}) public void setBlockSize(int i)", "class_method_signature": "IteratingPipe.setBlockSize(int i)", "testcase": false, "constructor": false}, {"identifier": "getBlockSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBlockSize()", "full_signature": "public int getBlockSize()", "class_method_signature": "IteratingPipe.getBlockSize()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/IteratingPipe.java"}, "focal_method": {"identifier": "setSender", "parameters": "(ISender sender)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setSender(ISender sender) {\n\t\tsuper.setSender(sender);\n\t\tsenderStatisticsKeeper =  new StatisticsKeeper(\"-> \"+(StringUtils.isNotEmpty(sender.getName())?sender.getName():ClassUtils.nameOf(sender)));\n\t}", "signature": "void setSender(ISender sender)", "full_signature": "@Override public void setSender(ISender sender)", "class_method_signature": "IteratingPipe.setSender(ISender sender)", "testcase": false, "constructor": false, "invocations": ["setSender", "isNotEmpty", "getName", "getName", "nameOf"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}