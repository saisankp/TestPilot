{"test_class": {"identifier": "TestPromptChooser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TRUE_CONDITION = \"2 == 2\";", "modifier": "public static final", "type": "String", "declarator": "TRUE_CONDITION = \"2 == 2\"", "var_name": "TRUE_CONDITION"}, {"original_string": "public static final String FALSE_CONDITION = \"1 == 2\";", "modifier": "public static final", "type": "String", "declarator": "FALSE_CONDITION = \"1 == 2\"", "var_name": "FALSE_CONDITION"}, {"original_string": "public static final String DEFAULT_CONDITION = \"true\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONDITION = \"true\"", "var_name": "DEFAULT_CONDITION"}, {"original_string": "private VoiceXmlInterpreterContext context;", "modifier": "private", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}, {"original_string": "private VoiceXmlDocument document;", "modifier": "private", "type": "VoiceXmlDocument", "declarator": "document", "var_name": "document"}, {"original_string": "private Field field;", "modifier": "private", "type": "Field", "declarator": "field", "var_name": "field"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/TestPromptChooser.java"}, "test_case": {"identifier": "testCollectPromptsWithoutCondition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollectPromptsWithoutCondition() throws JVoiceXMLEvent {\n        final Prompt prompt1 = field.appendChild(Prompt.class);\n        prompt1.addText(\"prompt 1\");\n        final Prompt prompt2 = field.appendChild(Prompt.class);\n        prompt2.addText(\"prompt 2\");\n        final PromptCountable countable = new FieldFormItem(context, field);\n        final PromptChooser chooser = new PromptChooser(countable, context);\n        final Collection<VoiceXmlNode> prompts = chooser.collect();\n        Assert.assertEquals(2, prompts.size());\n        final Iterator<VoiceXmlNode> iterator = prompts.iterator();\n        Assert.assertEquals(prompt1, iterator.next());\n        Assert.assertEquals(prompt2, iterator.next());\n    }", "signature": "void testCollectPromptsWithoutCondition()", "full_signature": "@Test public void testCollectPromptsWithoutCondition()", "class_method_signature": "TestPromptChooser.testCollectPromptsWithoutCondition()", "testcase": true, "constructor": false, "invocations": ["appendChild", "addText", "appendChild", "addText", "collect", "assertEquals", "size", "iterator", "assertEquals", "next", "assertEquals", "next"]}, "focal_class": {"identifier": "PromptChooser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(PromptChooser.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(PromptChooser.class)", "var_name": "LOGGER"}, {"original_string": "private final PromptCountable countable;", "modifier": "private final", "type": "PromptCountable", "declarator": "countable", "var_name": "countable"}, {"original_string": "private final VoiceXmlInterpreterContext context;", "modifier": "private final", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "PromptChooser", "parameters": "(final PromptCountable cnt,\n            final VoiceXmlInterpreterContext ctx)", "modifiers": "", "return": "", "signature": " PromptChooser(final PromptCountable cnt,\n            final VoiceXmlInterpreterContext ctx)", "full_signature": "  PromptChooser(final PromptCountable cnt,\n            final VoiceXmlInterpreterContext ctx)", "class_method_signature": "PromptChooser.PromptChooser(final PromptCountable cnt,\n            final VoiceXmlInterpreterContext ctx)", "testcase": false, "constructor": true}, {"identifier": "collect", "parameters": "()", "modifiers": "public", "return": "Collection<VoiceXmlNode>", "signature": "Collection<VoiceXmlNode> collect()", "full_signature": "public Collection<VoiceXmlNode> collect()", "class_method_signature": "PromptChooser.collect()", "testcase": false, "constructor": false}, {"identifier": "findAllPrompts", "parameters": "()", "modifiers": "private", "return": "Collection<VoiceXmlNode>", "signature": "Collection<VoiceXmlNode> findAllPrompts()", "full_signature": "private Collection<VoiceXmlNode> findAllPrompts()", "class_method_signature": "PromptChooser.findAllPrompts()", "testcase": false, "constructor": false}, {"identifier": "filterCond", "parameters": "(\n            final Collection<VoiceXmlNode> prompts)", "modifiers": "private", "return": "Collection<VoiceXmlNode>", "signature": "Collection<VoiceXmlNode> filterCond(\n            final Collection<VoiceXmlNode> prompts)", "full_signature": "private Collection<VoiceXmlNode> filterCond(\n            final Collection<VoiceXmlNode> prompts)", "class_method_signature": "PromptChooser.filterCond(\n            final Collection<VoiceXmlNode> prompts)", "testcase": false, "constructor": false}, {"identifier": "findHighestCount", "parameters": "(final Collection<VoiceXmlNode> prompts,\n            final int count)", "modifiers": "private", "return": "int", "signature": "int findHighestCount(final Collection<VoiceXmlNode> prompts,\n            final int count)", "full_signature": "private int findHighestCount(final Collection<VoiceXmlNode> prompts,\n            final int count)", "class_method_signature": "PromptChooser.findHighestCount(final Collection<VoiceXmlNode> prompts,\n            final int count)", "testcase": false, "constructor": false}, {"identifier": "filterCount", "parameters": "(\n            final Collection<VoiceXmlNode> prompts, final int count)", "modifiers": "private", "return": "Collection<VoiceXmlNode>", "signature": "Collection<VoiceXmlNode> filterCount(\n            final Collection<VoiceXmlNode> prompts, final int count)", "full_signature": "private Collection<VoiceXmlNode> filterCount(\n            final Collection<VoiceXmlNode> prompts, final int count)", "class_method_signature": "PromptChooser.filterCount(\n            final Collection<VoiceXmlNode> prompts, final int count)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/PromptChooser.java"}, "focal_method": {"identifier": "collect", "parameters": "()", "modifiers": "public", "return": "Collection<VoiceXmlNode>", "body": "public Collection<VoiceXmlNode> collect() throws SemanticError {\n        final int count = countable.getPromptCount();\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"find all prompts of '\" + countable.getName()\n                    + \"' with count \" + count);\n        }\n        final Collection<VoiceXmlNode> allPrompts = findAllPrompts();\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"found \" + allPrompts.size() + \" prompt(s) in '\"\n                    + countable.getName() + \"'\");\n        }\n        final Collection<VoiceXmlNode> condPrompts = filterCond(allPrompts);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"found \" + condPrompts.size()\n                    + \" prompt(s) after cond evaluation in '\"\n                    + countable.getName() + \"'\");\n        }\n        final int highestCount = findHighestCount(condPrompts, count);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"highest count of \" + countable.getName() + \"' is \"\n                    + highestCount + \" <= \" + count);\n        }\n        final Collection<VoiceXmlNode> correctCountPrompts = filterCount(\n                condPrompts, highestCount);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"found \" + correctCountPrompts.size()\n                    + \" prompt(s) with count \" + highestCount + \" in '\"\n                    + countable.getName() + \"'\");\n        }\n\n        return correctCountPrompts;\n    }", "signature": "Collection<VoiceXmlNode> collect()", "full_signature": "public Collection<VoiceXmlNode> collect()", "class_method_signature": "PromptChooser.collect()", "testcase": false, "constructor": false, "invocations": ["getPromptCount", "isDebugEnabled", "debug", "getName", "findAllPrompts", "isDebugEnabled", "debug", "size", "getName", "filterCond", "isDebugEnabled", "debug", "size", "getName", "findHighestCount", "isDebugEnabled", "debug", "getName", "filterCount", "isDebugEnabled", "debug", "size", "getName"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}