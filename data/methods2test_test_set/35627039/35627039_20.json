{"test_class": {"identifier": "AmbariInfraWithStormLogSearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String TEST_SOLR_API_PATH = \"/solr\";", "modifier": "private final", "type": "String", "declarator": "TEST_SOLR_API_PATH = \"/solr\"", "var_name": "TEST_SOLR_API_PATH"}, {"original_string": "private final String TEST_COLLECTION_NAME = \"test_collection\";", "modifier": "private final", "type": "String", "declarator": "TEST_COLLECTION_NAME = \"test_collection\"", "var_name": "TEST_COLLECTION_NAME"}, {"original_string": "private final String STUB_REQUEST_API_PATH = TEST_SOLR_API_PATH + \"/\" + TEST_COLLECTION_NAME + \"/select\";", "modifier": "private final", "type": "String", "declarator": "STUB_REQUEST_API_PATH = TEST_SOLR_API_PATH + \"/\" + TEST_COLLECTION_NAME + \"/select\"", "var_name": "STUB_REQUEST_API_PATH"}, {"original_string": "private AmbariInfraWithStormLogSearch logSearch;", "modifier": "private", "type": "AmbariInfraWithStormLogSearch", "declarator": "logSearch", "var_name": "logSearch"}, {"original_string": "private String buildTestSolrApiUrl;", "modifier": "private", "type": "String", "declarator": "buildTestSolrApiUrl", "var_name": "buildTestSolrApiUrl"}, {"original_string": "@Rule\n    public WireMockRule wireMockRule = new WireMockRule(18886);", "modifier": "@Rule\n    public", "type": "WireMockRule", "declarator": "wireMockRule = new WireMockRule(18886)", "var_name": "wireMockRule"}, {"original_string": "public static final String TEST_APP_ID = \"1\";", "modifier": "public static final", "type": "String", "declarator": "TEST_APP_ID = \"1\"", "var_name": "TEST_APP_ID"}, {"original_string": "public static final long TEST_FROM = System.currentTimeMillis() - (1000 * 60 * 30);", "modifier": "public static final", "type": "long", "declarator": "TEST_FROM = System.currentTimeMillis() - (1000 * 60 * 30)", "var_name": "TEST_FROM"}, {"original_string": "public static final long TEST_TO = System.currentTimeMillis();", "modifier": "public static final", "type": "long", "declarator": "TEST_TO = System.currentTimeMillis()", "var_name": "TEST_TO"}], "file": "streams/runners/storm/logsearch/src/test/java/com/hortonworks/streamline/streams/logsearch/storm/ambari/AmbariInfraWithStormLogSearchTest.java"}, "test_case": {"identifier": "testEventSearchWithEventId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEventSearchWithEventId() throws Exception {\n        stubSolrUrl();\n\n        String testEventId = \"b7715c60-74ad-43dd-814a-8a40403a31bc\";\n\n        EventSearchCriteria eventSearchCriteria = new EventSearchCriteria.Builder(TEST_APP_ID, TEST_FROM, TEST_TO)\n                .setSearchEventId(testEventId).build();\n        EventSearchResult result = logSearch.searchEvent(eventSearchCriteria);\n        verifyEventSearchResults(result);\n\n        // please note that space should be escaped to '+' since Wiremock doesn't handle it when matching...\n        String dateRangeValue = \"%s:[%s+TO+%s]\";\n\n        Instant fromInstant = Instant.ofEpochMilli(TEST_FROM);\n        Instant toInstant = Instant.ofEpochMilli(TEST_TO);\n\n        dateRangeValue = String.format(dateRangeValue, COLUMN_NAME_LOG_TIME, fromInstant.toString(), toInstant.toString());\n\n        List<LoggedRequest> requests = wireMockRule.findAll(getRequestedFor(urlPathEqualTo(STUB_REQUEST_API_PATH)));\n        assertEquals(1, requests.size());\n\n        LoggedRequest request = requests.get(0);\n\n        QueryParameter qParam = request.queryParameter(\"q\");\n        assertTrue(qParam.containsValue(COLUMN_NAME_STREAMLINE_EVENT_ID + \":*\"));\n\n        QueryParameter fqParam = request.queryParameter(\"fq\");\n        assertTrue(fqParam.containsValue(COLUMN_NAME_TYPE + \":\" + COLUMN_VALUE_TYPE_EVENT));\n        assertTrue(fqParam.containsValue(COLUMN_NAME_STREAMLINE_TOPOLOGY_ID + \":\" + TEST_APP_ID));\n        assertTrue(fqParam.containsValue(dateRangeValue));\n        assertFalse(fqParam.hasValueMatching(ValuePattern.containing(COLUMN_NAME_STREAMLINE_COMPONENT_NAME)));\n\n        String expectedEventIdQuery = COLUMN_NAME_STREAMLINE_EVENT_ID + \":\" + testEventId;\n        expectedEventIdQuery += \"+OR+\" + COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET + \":*\" + testEventId + \"*\";\n        expectedEventIdQuery += \"+OR+\" + COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET + \":*\" + testEventId + \"*\";\n        assertTrue(fqParam.containsValue(expectedEventIdQuery));\n\n        QueryParameter sortParam = request.queryParameter(\"sort\");\n        assertTrue(sortParam.containsValue(COLUMN_NAME_LOG_TIME + \"+asc\"));\n    }", "signature": "void testEventSearchWithEventId()", "full_signature": "@Test public void testEventSearchWithEventId()", "class_method_signature": "AmbariInfraWithStormLogSearchTest.testEventSearchWithEventId()", "testcase": true, "constructor": false, "invocations": ["stubSolrUrl", "build", "setSearchEventId", "searchEvent", "verifyEventSearchResults", "ofEpochMilli", "ofEpochMilli", "format", "toString", "toString", "findAll", "getRequestedFor", "urlPathEqualTo", "assertEquals", "size", "get", "queryParameter", "assertTrue", "containsValue", "queryParameter", "assertTrue", "containsValue", "assertTrue", "containsValue", "assertTrue", "containsValue", "assertFalse", "hasValueMatching", "containing", "assertTrue", "containsValue", "queryParameter", "assertTrue", "containsValue"]}, "focal_class": {"identifier": "AmbariInfraWithStormLogSearch", "superclass": "", "interfaces": "implements TopologyLogSearch", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AmbariInfraWithStormLogSearch.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AmbariInfraWithStormLogSearch.class)", "var_name": "LOG"}, {"original_string": "static final String SOLR_API_URL_KEY = \"solrApiUrl\";", "modifier": "static final", "type": "String", "declarator": "SOLR_API_URL_KEY = \"solrApiUrl\"", "var_name": "SOLR_API_URL_KEY"}, {"original_string": "static final String COLLECTION_NAME = \"collection\";", "modifier": "static final", "type": "String", "declarator": "COLLECTION_NAME = \"collection\"", "var_name": "COLLECTION_NAME"}, {"original_string": "static final String SECURED_CLUSTER = \"secured\";", "modifier": "static final", "type": "String", "declarator": "SECURED_CLUSTER = \"secured\"", "var_name": "SECURED_CLUSTER"}, {"original_string": "public static final String COLUMN_NAME_TYPE = \"type\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_TYPE = \"type\"", "var_name": "COLUMN_NAME_TYPE"}, {"original_string": "public static final String COLUMN_VALUE_TYPE_WORKER_LOG = \"storm_worker\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_VALUE_TYPE_WORKER_LOG = \"storm_worker\"", "var_name": "COLUMN_VALUE_TYPE_WORKER_LOG"}, {"original_string": "public static final String COLUMN_VALUE_TYPE_EVENT = \"storm_worker_event\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_VALUE_TYPE_EVENT = \"storm_worker_event\"", "var_name": "COLUMN_VALUE_TYPE_EVENT"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_TOPOLOGY_ID = \"sdi_streamline_topology_id\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_TOPOLOGY_ID = \"sdi_streamline_topology_id\"", "var_name": "COLUMN_NAME_STREAMLINE_TOPOLOGY_ID"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_COMPONENT_NAME = \"sdi_streamline_component_name\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_COMPONENT_NAME = \"sdi_streamline_component_name\"", "var_name": "COLUMN_NAME_STREAMLINE_COMPONENT_NAME"}, {"original_string": "public static final String COLUMN_NAME_STORM_WORKER_PORT = \"sdi_storm_worker_port\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STORM_WORKER_PORT = \"sdi_storm_worker_port\"", "var_name": "COLUMN_NAME_STORM_WORKER_PORT"}, {"original_string": "public static final String COLUMN_NAME_HOST = \"host\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_HOST = \"host\"", "var_name": "COLUMN_NAME_HOST"}, {"original_string": "public static final String COLUMN_NAME_LOG_TIME = \"logtime\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_LOG_TIME = \"logtime\"", "var_name": "COLUMN_NAME_LOG_TIME"}, {"original_string": "public static final String COLUMN_NAME_LOG_LEVEL = \"level\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_LOG_LEVEL = \"level\"", "var_name": "COLUMN_NAME_LOG_LEVEL"}, {"original_string": "public static final String COLUMN_NAME_LOG_MESSAGE = \"log_message\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_LOG_MESSAGE = \"log_message\"", "var_name": "COLUMN_NAME_LOG_MESSAGE"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_ID = \"sdi_streamline_event_id\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_ID = \"sdi_streamline_event_id\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_ID"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET = \"sdi_streamline_root_ids\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET = \"sdi_streamline_root_ids\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET = \"sdi_streamline_parent_ids\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET = \"sdi_streamline_parent_ids\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES = \"sdi_streamline_event_fields_and_values\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES = \"sdi_streamline_event_fields_and_values\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_HEADERS = \"sdi_streamline_event_headers\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_HEADERS = \"sdi_streamline_event_headers\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_HEADERS"}, {"original_string": "public static final String COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES = \"sdi_streamline_event_aux_fields_and_values\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES = \"sdi_streamline_event_aux_fields_and_values\"", "var_name": "COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES"}, {"original_string": "public static final String DEFAULT_COLLECTION_NAME = \"hadoop_logs\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_COLLECTION_NAME = \"hadoop_logs\"", "var_name": "DEFAULT_COLLECTION_NAME"}, {"original_string": "static final List<String> DEFAULT_LOG_LEVELS = Lists.newArrayList(\"INFO\", \"WARN\", \"ERROR\");", "modifier": "static final", "type": "List<String>", "declarator": "DEFAULT_LOG_LEVELS = Lists.newArrayList(\"INFO\", \"WARN\", \"ERROR\")", "var_name": "DEFAULT_LOG_LEVELS"}, {"original_string": "private HttpSolrClient solr;", "modifier": "private", "type": "HttpSolrClient", "declarator": "solr", "var_name": "solr"}], "methods": [{"identifier": "AmbariInfraWithStormLogSearch", "parameters": "()", "modifiers": "public", "return": "", "signature": " AmbariInfraWithStormLogSearch()", "full_signature": "public  AmbariInfraWithStormLogSearch()", "class_method_signature": "AmbariInfraWithStormLogSearch.AmbariInfraWithStormLogSearch()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Map<String, Object> conf)", "modifiers": "@Override public", "return": "void", "signature": "void init(Map<String, Object> conf)", "full_signature": "@Override public void init(Map<String, Object> conf)", "class_method_signature": "AmbariInfraWithStormLogSearch.init(Map<String, Object> conf)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(LogSearchCriteria logSearchCriteria)", "modifiers": "@Override public", "return": "LogSearchResult", "signature": "LogSearchResult search(LogSearchCriteria logSearchCriteria)", "full_signature": "@Override public LogSearchResult search(LogSearchCriteria logSearchCriteria)", "class_method_signature": "AmbariInfraWithStormLogSearch.search(LogSearchCriteria logSearchCriteria)", "testcase": false, "constructor": false}, {"identifier": "searchEvent", "parameters": "(EventSearchCriteria criteria)", "modifiers": "@Override public", "return": "EventSearchResult", "signature": "EventSearchResult searchEvent(EventSearchCriteria criteria)", "full_signature": "@Override public EventSearchResult searchEvent(EventSearchCriteria criteria)", "class_method_signature": "AmbariInfraWithStormLogSearch.searchEvent(EventSearchCriteria criteria)", "testcase": false, "constructor": false}, {"identifier": "addQueryStringToListOnlyIfAvailable", "parameters": "(List<String> queryStrings, String searchString, String columnName)", "modifiers": "private", "return": "void", "signature": "void addQueryStringToListOnlyIfAvailable(List<String> queryStrings, String searchString, String columnName)", "full_signature": "private void addQueryStringToListOnlyIfAvailable(List<String> queryStrings, String searchString, String columnName)", "class_method_signature": "AmbariInfraWithStormLogSearch.addQueryStringToListOnlyIfAvailable(List<String> queryStrings, String searchString, String columnName)", "testcase": false, "constructor": false}, {"identifier": "buildColumnAndValue", "parameters": "(String column, String value)", "modifiers": "private", "return": "String", "signature": "String buildColumnAndValue(String column, String value)", "full_signature": "private String buildColumnAndValue(String column, String value)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildColumnAndValue(String column, String value)", "testcase": false, "constructor": false}, {"identifier": "buildORValues", "parameters": "(List<String> values)", "modifiers": "private", "return": "String", "signature": "String buildORValues(List<String> values)", "full_signature": "private String buildORValues(List<String> values)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildORValues(List<String> values)", "testcase": false, "constructor": false}, {"identifier": "buildValue", "parameters": "(String value)", "modifiers": "private", "return": "String", "signature": "String buildValue(String value)", "full_signature": "private String buildValue(String value)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildValue(String value)", "testcase": false, "constructor": false}, {"identifier": "buildDateRangeValue", "parameters": "(long from, long to)", "modifiers": "private", "return": "String", "signature": "String buildDateRangeValue(long from, long to)", "full_signature": "private String buildDateRangeValue(long from, long to)", "class_method_signature": "AmbariInfraWithStormLogSearch.buildDateRangeValue(long from, long to)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/logsearch/src/main/java/com/hortonworks/streamline/streams/logsearch/storm/ambari/AmbariInfraWithStormLogSearch.java"}, "focal_method": {"identifier": "searchEvent", "parameters": "(EventSearchCriteria criteria)", "modifiers": "@Override public", "return": "EventSearchResult", "body": "@Override\n    public EventSearchResult searchEvent(EventSearchCriteria criteria) {\n        SolrQuery query = new SolrQuery();\n\n        String searchString = criteria.getSearchString();\n\n        List<String> queryStrings = new ArrayList<>();\n        addQueryStringToListOnlyIfAvailable(queryStrings, searchString, COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES);\n        addQueryStringToListOnlyIfAvailable(queryStrings, searchString, COLUMN_NAME_STREAMLINE_EVENT_HEADERS);\n        addQueryStringToListOnlyIfAvailable(queryStrings, searchString, COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES);\n\n        // this is to get rid of non-streamline events\n        String queryString = buildColumnAndValue(COLUMN_NAME_STREAMLINE_EVENT_ID, buildValue(null));\n\n        if (!queryStrings.isEmpty()) {\n            queryString += \" AND (\" + String.join(\" OR \", queryStrings) + \")\";\n        }\n\n        query.setQuery(queryString);\n\n        query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_TYPE, COLUMN_VALUE_TYPE_EVENT));\n        query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_STREAMLINE_TOPOLOGY_ID, buildValue(criteria.getAppId())));\n        query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_LOG_TIME, buildDateRangeValue(criteria.getFrom(), criteria.getTo())));\n\n        List<String> componentNames = criteria.getComponentNames();\n        if (componentNames != null && !componentNames.isEmpty()) {\n            query.addFilterQuery(buildColumnAndValue(COLUMN_NAME_STREAMLINE_COMPONENT_NAME, buildORValues(componentNames)));\n        }\n\n        String searchEventId = criteria.getSearchEventId();\n        if (searchEventId != null) {\n            // eventId OR rootId OR parentId\n            String queryToEventId = buildColumnAndValue(COLUMN_NAME_STREAMLINE_EVENT_ID, buildValue(searchEventId));\n            String queryToRootIds = buildColumnAndValue(COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET, buildValue(\"*\" + searchEventId + \"*\"));\n            String queryToParentIds = buildColumnAndValue(COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET, buildValue(\"*\" + searchEventId + \"*\"));\n            query.addFilterQuery(queryToEventId + \" OR \" + queryToRootIds + \" OR \" + queryToParentIds);\n        }\n\n        if (criteria.getAscending() == null || criteria.getAscending()) {\n            query.addSort(COLUMN_NAME_LOG_TIME, SolrQuery.ORDER.asc);\n        } else {\n            query.addSort(COLUMN_NAME_LOG_TIME, SolrQuery.ORDER.desc);\n        }\n\n        if (criteria.getStart() != null) {\n            query.setStart(criteria.getStart());\n        }\n        if (criteria.getLimit() != null) {\n            query.setRows(criteria.getLimit());\n        }\n\n        LOG.debug(\"Querying to Solr: query => {}\", query);\n\n        long numFound;\n        List<EventSearchResult.Event> results = new ArrayList<>();\n        try {\n            QueryResponse response = solr.query(query);\n\n            SolrDocumentList docList = response.getResults();\n            numFound = docList.getNumFound();\n\n            for (SolrDocument document : docList) {\n                String appId = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_TOPOLOGY_ID);\n                String componentName = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_COMPONENT_NAME);\n                String eventId = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_EVENT_ID);\n                String rootIds = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_EVENT_ROOT_ID_SET);\n                String parentIds = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_EVENT_PARENT_ID_SET);\n                String keyValues = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_EVENT_KEYVALUES);\n                String headers = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_EVENT_HEADERS);\n                String auxKeyValues = (String) document.getFieldValue(COLUMN_NAME_STREAMLINE_EVENT_AUX_KEYVALUES);\n\n                Date logDate = (Date) document.getFieldValue(COLUMN_NAME_LOG_TIME);\n                long timestamp = logDate.toInstant().toEpochMilli();\n\n                EventSearchResult.Event event = new EventSearchResult.Event(appId, componentName,\n                        eventId, rootIds, parentIds, keyValues, headers, auxKeyValues, timestamp);\n                results.add(event);\n            }\n\n        } catch (SolrServerException | IOException e) {\n            // TODO: any fine-grained control needed?\n            throw new RuntimeException(e);\n        }\n\n        return new EventSearchResult(numFound, results);\n    }", "signature": "EventSearchResult searchEvent(EventSearchCriteria criteria)", "full_signature": "@Override public EventSearchResult searchEvent(EventSearchCriteria criteria)", "class_method_signature": "AmbariInfraWithStormLogSearch.searchEvent(EventSearchCriteria criteria)", "testcase": false, "constructor": false, "invocations": ["getSearchString", "addQueryStringToListOnlyIfAvailable", "addQueryStringToListOnlyIfAvailable", "addQueryStringToListOnlyIfAvailable", "buildColumnAndValue", "buildValue", "isEmpty", "join", "setQuery", "addFilterQuery", "buildColumnAndValue", "addFilterQuery", "buildColumnAndValue", "buildValue", "getAppId", "addFilterQuery", "buildColumnAndValue", "buildDateRangeValue", "getFrom", "getTo", "getComponentNames", "isEmpty", "addFilterQuery", "buildColumnAndValue", "buildORValues", "getSearchEventId", "buildColumnAndValue", "buildValue", "buildColumnAndValue", "buildValue", "buildColumnAndValue", "buildValue", "addFilterQuery", "getAscending", "getAscending", "addSort", "addSort", "getStart", "setStart", "getStart", "getLimit", "setRows", "getLimit", "debug", "query", "getResults", "getNumFound", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "getFieldValue", "toEpochMilli", "toInstant", "add"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}