{"test_class": {"identifier": "TestJDBCCore", "superclass": "extends TestJDBCBase", "interfaces": "", "fields": [{"original_string": "NoSendJDBCCore core;", "modifier": "", "type": "NoSendJDBCCore", "declarator": "core", "var_name": "core"}, {"original_string": "String sourceName;", "modifier": "", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "String authToken;", "modifier": "", "type": "String", "declarator": "authToken", "var_name": "authToken"}, {"original_string": "String targetVantiqServer;", "modifier": "", "type": "String", "declarator": "targetVantiqServer", "var_name": "targetVantiqServer"}, {"original_string": "JDBC jdbc;", "modifier": "", "type": "JDBC", "declarator": "jdbc", "var_name": "jdbc"}], "file": "jdbcSource/src/test/java/io/vantiq/extsrc/jdbcSource/TestJDBCCore.java"}, "test_case": {"identifier": "testPublishQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPublishQuery() throws VantiqSQLException {\n        assumeTrue(testDBUsername != null && testDBPassword != null && testDBURL != null && jdbcDriverLoc != null);\n        jdbc.setupJDBC(testDBURL, testDBUsername, testDBPassword, false, 0);\n        \n        Map<String, Object> request;\n        ExtensionServiceMessage msg = new ExtensionServiceMessage(\"\");\n        Map<String, String> header = new LinkedHashMap<>();\n        header.put(ExtensionServiceMessage.ORIGIN_ADDRESS_HEADER, \"queryAddress\");\n        msg.messageHeaders = header;\n        \n        request = new LinkedHashMap<>();\n        msg.object = request;\n        core.executePublish(msg);\n        assertFalse(\"Core should not be closed\", core.isClosed());\n        \n        request = new LinkedHashMap<>();\n        request.put(\"query\", \"jibberish\");\n        msg.object = request;\n        core.executePublish(msg);\n        assertFalse(\"Core should not be closed\", core.isClosed());\n    }", "signature": "void testPublishQuery()", "full_signature": "@Test public void testPublishQuery()", "class_method_signature": "TestJDBCCore.testPublishQuery()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "setupJDBC", "put", "executePublish", "assertFalse", "isClosed", "put", "executePublish", "assertFalse", "isClosed"]}, "focal_class": {"identifier": "JDBCCore", "superclass": "", "interfaces": "", "fields": [{"original_string": "String sourceName;", "modifier": "", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "String authToken;", "modifier": "", "type": "String", "declarator": "authToken", "var_name": "authToken"}, {"original_string": "String targetVantiqServer;", "modifier": "", "type": "String", "declarator": "targetVantiqServer", "var_name": "targetVantiqServer"}, {"original_string": "JDBCHandleConfiguration jdbcConfigHandler;", "modifier": "", "type": "JDBCHandleConfiguration", "declarator": "jdbcConfigHandler", "var_name": "jdbcConfigHandler"}, {"original_string": "Timer                       pollTimer = null;", "modifier": "", "type": "Timer", "declarator": "pollTimer = null", "var_name": "pollTimer"}, {"original_string": "ExtensionWebSocketClient    client  = null;", "modifier": "", "type": "ExtensionWebSocketClient", "declarator": "client  = null", "var_name": "client"}, {"original_string": "JDBC                        jdbc    = null;", "modifier": "", "type": "JDBC", "declarator": "jdbc    = null", "var_name": "jdbc"}, {"original_string": "final Logger log;", "modifier": "final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "final static int RECONNECT_INTERVAL = 5000;", "modifier": "final static", "type": "int", "declarator": "RECONNECT_INTERVAL = 5000", "var_name": "RECONNECT_INTERVAL"}, {"original_string": "final static int DEFAULT_BUNDLE_SIZE = 500;", "modifier": "final static", "type": "int", "declarator": "DEFAULT_BUNDLE_SIZE = 500", "var_name": "DEFAULT_BUNDLE_SIZE"}, {"original_string": "final static String SELECT_STATEMENT_IDENTIFIER = \"select\";", "modifier": "final static", "type": "String", "declarator": "SELECT_STATEMENT_IDENTIFIER = \"select\"", "var_name": "SELECT_STATEMENT_IDENTIFIER"}, {"original_string": "public HashMap[] lastRowBundle = null;", "modifier": "public", "type": "HashMap[]", "declarator": "lastRowBundle = null", "var_name": "lastRowBundle"}, {"original_string": "ExecutorService queryPool = null;", "modifier": "", "type": "ExecutorService", "declarator": "queryPool = null", "var_name": "queryPool"}, {"original_string": "ExecutorService publishPool = null;", "modifier": "", "type": "ExecutorService", "declarator": "publishPool = null", "var_name": "publishPool"}, {"original_string": "private static final String SYNCH_LOCK = \"synchLock\";", "modifier": "private static final", "type": "String", "declarator": "SYNCH_LOCK = \"synchLock\"", "var_name": "SYNCH_LOCK"}, {"original_string": "public final Handler<ExtensionServiceMessage> reconnectHandler = new Handler<ExtensionServiceMessage>() {\n        @Override\n        public void handleMessage(ExtensionServiceMessage message) {\n            log.trace(\"Reconnect message received. Reinitializing configuration\");\n            \n            if (pollTimer != null) {\n                pollTimer.cancel();\n                pollTimer = null;\n            }\n            \n            jdbcConfigHandler.configComplete = false;\n                        \n            CompletableFuture<Boolean> success = client.connectToSource();\n            \n            try {\n                if ( !success.get(10, TimeUnit.SECONDS) ) {\n                    if (!client.isOpen()) {\n                        log.error(\"Failed to connect to server url '\" + targetVantiqServer + \"'.\");\n                    } else if (!client.isAuthed()) {\n                        log.error(\"Failed to authenticate within 10 seconds using the given authentication data.\");\n                    } else {\n                        log.error(\"Failed to connect within 10 seconds\");\n                    }\n                    close();\n                }\n            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                log.error(\"Could not reconnect to source within 10 seconds: \", e);\n                close();\n            }\n        }\n    };", "modifier": "public final", "type": "Handler<ExtensionServiceMessage>", "declarator": "reconnectHandler = new Handler<ExtensionServiceMessage>() {\n        @Override\n        public void handleMessage(ExtensionServiceMessage message) {\n            log.trace(\"Reconnect message received. Reinitializing configuration\");\n            \n            if (pollTimer != null) {\n                pollTimer.cancel();\n                pollTimer = null;\n            }\n            \n            jdbcConfigHandler.configComplete = false;\n                        \n            CompletableFuture<Boolean> success = client.connectToSource();\n            \n            try {\n                if ( !success.get(10, TimeUnit.SECONDS) ) {\n                    if (!client.isOpen()) {\n                        log.error(\"Failed to connect to server url '\" + targetVantiqServer + \"'.\");\n                    } else if (!client.isAuthed()) {\n                        log.error(\"Failed to authenticate within 10 seconds using the given authentication data.\");\n                    } else {\n                        log.error(\"Failed to connect within 10 seconds\");\n                    }\n                    close();\n                }\n            } catch (InterruptedException | ExecutionException | TimeoutException e) {\n                log.error(\"Could not reconnect to source within 10 seconds: \", e);\n                close();\n            }\n        }\n    }", "var_name": "reconnectHandler"}, {"original_string": "public final Handler<ExtensionWebSocketClient> closeHandler = new Handler<ExtensionWebSocketClient>() {\n        @Override\n        public void handleMessage(ExtensionWebSocketClient message) {\n            log.trace(\"WebSocket closed unexpectedly. Attempting to reconnect\");\n            \n            if (pollTimer != null) {\n                pollTimer.cancel();\n                pollTimer = null;\n            }\n   \n            jdbcConfigHandler.configComplete = false;\n            \n            boolean sourcesSucceeded = false;\n            while (!sourcesSucceeded) {\n                client.initiateFullConnection(targetVantiqServer, authToken);\n                sourcesSucceeded = exitIfConnectionFails(client, 10);\n                if (!sourcesSucceeded) {\n                    try {\n                        Thread.sleep(RECONNECT_INTERVAL);\n                    } catch (InterruptedException e) {\n                        log.error(\"An error occurred when trying to sleep the current thread. Error Message: \", e);\n                    }\n                }\n            }\n        }\n    };", "modifier": "public final", "type": "Handler<ExtensionWebSocketClient>", "declarator": "closeHandler = new Handler<ExtensionWebSocketClient>() {\n        @Override\n        public void handleMessage(ExtensionWebSocketClient message) {\n            log.trace(\"WebSocket closed unexpectedly. Attempting to reconnect\");\n            \n            if (pollTimer != null) {\n                pollTimer.cancel();\n                pollTimer = null;\n            }\n   \n            jdbcConfigHandler.configComplete = false;\n            \n            boolean sourcesSucceeded = false;\n            while (!sourcesSucceeded) {\n                client.initiateFullConnection(targetVantiqServer, authToken);\n                sourcesSucceeded = exitIfConnectionFails(client, 10);\n                if (!sourcesSucceeded) {\n                    try {\n                        Thread.sleep(RECONNECT_INTERVAL);\n                    } catch (InterruptedException e) {\n                        log.error(\"An error occurred when trying to sleep the current thread. Error Message: \", e);\n                    }\n                }\n            }\n        }\n    }", "var_name": "closeHandler"}], "methods": [{"identifier": "JDBCCore", "parameters": "(String sourceName, String authToken, String targetVantiqServer)", "modifiers": "public", "return": "", "signature": " JDBCCore(String sourceName, String authToken, String targetVantiqServer)", "full_signature": "public  JDBCCore(String sourceName, String authToken, String targetVantiqServer)", "class_method_signature": "JDBCCore.JDBCCore(String sourceName, String authToken, String targetVantiqServer)", "testcase": false, "constructor": true}, {"identifier": "getSourceName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSourceName()", "full_signature": "public String getSourceName()", "class_method_signature": "JDBCCore.getSourceName()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(int timeout)", "modifiers": "public", "return": "boolean", "signature": "boolean start(int timeout)", "full_signature": "public boolean start(int timeout)", "class_method_signature": "JDBCCore.start(int timeout)", "testcase": false, "constructor": false}, {"identifier": "executeQuery", "parameters": "(ExtensionServiceMessage message)", "modifiers": "public", "return": "void", "signature": "void executeQuery(ExtensionServiceMessage message)", "full_signature": "public void executeQuery(ExtensionServiceMessage message)", "class_method_signature": "JDBCCore.executeQuery(ExtensionServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "executePublish", "parameters": "(ExtensionServiceMessage message)", "modifiers": "public", "return": "void", "signature": "void executePublish(ExtensionServiceMessage message)", "full_signature": "public void executePublish(ExtensionServiceMessage message)", "class_method_signature": "JDBCCore.executePublish(ExtensionServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "executePolling", "parameters": "(String pollQuery)", "modifiers": "public", "return": "void", "signature": "void executePolling(String pollQuery)", "full_signature": "public void executePolling(String pollQuery)", "class_method_signature": "JDBCCore.executePolling(String pollQuery)", "testcase": false, "constructor": false}, {"identifier": "sendDataFromQuery", "parameters": "(HashMap[] queryArray, ExtensionServiceMessage message)", "modifiers": "public", "return": "void", "signature": "void sendDataFromQuery(HashMap[] queryArray, ExtensionServiceMessage message)", "full_signature": "public void sendDataFromQuery(HashMap[] queryArray, ExtensionServiceMessage message)", "class_method_signature": "JDBCCore.sendDataFromQuery(HashMap[] queryArray, ExtensionServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "JDBCCore.close()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "JDBCCore.stop()", "testcase": false, "constructor": false}, {"identifier": "exitIfConnectionFails", "parameters": "(ExtensionWebSocketClient client, int timeout)", "modifiers": "public", "return": "boolean", "signature": "boolean exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "full_signature": "public boolean exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "class_method_signature": "JDBCCore.exitIfConnectionFails(ExtensionWebSocketClient client, int timeout)", "testcase": false, "constructor": false}], "file": "jdbcSource/src/main/java/io/vantiq/extsrc/jdbcSource/JDBCCore.java"}, "focal_method": {"identifier": "executePublish", "parameters": "(ExtensionServiceMessage message)", "modifiers": "public", "return": "void", "body": "public void executePublish(ExtensionServiceMessage message) {\n        Map<String, ?> request = (Map<String, ?>) message.getObject();\n\n        // Getting local copy of JDBC class\n        JDBC localJDBC = null;\n        synchronized (SYNCH_LOCK) {\n            localJDBC = jdbc;\n        }\n\n        if (localJDBC == null) {\n            log.error(\"JDBC connection closed before operation could complete\");\n        }\n\n        // Gather query results, or send a query error if an exception is caught\n        try {\n            if (request.get(\"query\") instanceof String) {\n                String queryString = (String) request.get(\"query\");\n                int data = localJDBC.processPublish(queryString);\n                log.trace(\"The returned integer value from Publish Query is the following: \", data);\n            } else if (request.get(\"query\") instanceof List) {\n                List queryArray = (List) request.get(\"query\");\n                int[] data = localJDBC.processBatchPublish(queryArray);\n                log.trace(\"The returned integer array from Publish Query is the following: \", data);\n            } else {\n                log.error(\"Query could not be executed because query was not a String or a List\");\n            }\n        } catch (VantiqSQLException e) {\n            log.error(\"Could not execute requested query.\", e);\n            log.error(\"Request was: {}\", request);\n        } catch (ClassCastException e) {\n            log.error(\"Could not execute requested query. This is most likely because the query list did not contain Strings.\", e);\n            log.error(\"Request was: {}\", request);\n        } catch (Exception e) {\n            log.error(\"An unexpected error occurred when executing the requested query.\", e);\n            log.error(\"Request was: {}\", request);\n        }\n    }", "signature": "void executePublish(ExtensionServiceMessage message)", "full_signature": "public void executePublish(ExtensionServiceMessage message)", "class_method_signature": "JDBCCore.executePublish(ExtensionServiceMessage message)", "testcase": false, "constructor": false, "invocations": ["getObject", "error", "get", "get", "processPublish", "trace", "get", "get", "processBatchPublish", "trace", "error", "error", "error", "error", "error", "error", "error"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}