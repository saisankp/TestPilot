{"test_class": {"identifier": "FieldsTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/FieldsTokenResolverTest.java"}, "test_case": {"identifier": "testSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testSelect() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.SELECT, \"<fields/>\");\n      Readset<?> readset = UserEntity.READSET_FULL;\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, readset);\n\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"u.user_id,u.full_name,u.creation_date,u.last_modified_date\", ctx.getSqlStatement());\n      Assert.assertEquals(null, ctx.getOutSubObjectNames().get(0));\n      Assert.assertEquals(\"[user-id, user-name, creation-date, last-modified-date]\", ctx.getOutFields().toString());\n   }", "signature": "void testSelect()", "full_signature": "@Test public void testSelect()", "class_method_signature": "FieldsTokenResolverTest.testSelect()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "get", "getOutSubObjectNames", "assertEquals", "toString", "getOutFields"]}, "focal_class": {"identifier": "FieldsTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [{"original_string": "@Inject\n   private EntityInfoManager m_manager;", "modifier": "@Inject\n   private", "type": "EntityInfoManager", "declarator": "m_manager", "var_name": "m_manager"}, {"original_string": "@Inject\n   private ExpressionResolver m_expressionResolver;", "modifier": "@Inject\n   private", "type": "ExpressionResolver", "declarator": "m_expressionResolver", "var_name": "m_expressionResolver"}, {"original_string": "@Inject\n   private QueryNaming m_naming;", "modifier": "@Inject\n   private", "type": "QueryNaming", "declarator": "m_naming", "var_name": "m_naming"}], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "@SuppressWarnings(\"unchecked\") public String resolve(Token token, QueryContext ctx)", "class_method_signature": "FieldsTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(String data, String delimiter)", "modifiers": "private", "return": "List<String>", "signature": "List<String> split(String data, String delimiter)", "full_signature": "private List<String> split(String data, String delimiter)", "class_method_signature": "FieldsTokenResolver.split(String data, String delimiter)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/FieldsTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "String", "body": "@SuppressWarnings(\"unchecked\")\n   public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.FIELDS) {\n         throw new DalRuntimeException(\"Internal error: only FIELDS token is supported by \" + getClass());\n      }\n\n      EntityInfo entityInfo = ctx.getEntityInfo();\n      SimpleTagToken fields = (SimpleTagToken) token;\n      String output = fields.getAttribute(\"output\", \"true\");\n      List<String> excludes = split(fields.getAttribute(\"excludes\", \"\"), \",\");\n      StringBuilder sb = new StringBuilder(1024);\n      DataObject proto = ctx.getProto();\n\n      switch (ctx.getQuery().getType()) {\n      case SELECT:\n         SubObjects subobjects = entityInfo.getSubobjects(ctx.getReadset());\n         String[] names;\n         List<Readset<Object>> readsets;\n\n         if (subobjects != null) {\n            names = subobjects.value();\n            readsets = ((Readset<Object>) ctx.getReadset()).getChildren();\n         } else {\n            names = null;\n            readsets = new ArrayList<Readset<Object>>(1);\n            readsets.add((Readset<Object>) ctx.getReadset());\n         }\n\n         int size = readsets.size();\n\n         for (int i = 0; i < size; i++) {\n            Readset<Object> readset = readsets.get(i);\n            Relation relation = (names == null ? null : entityInfo.getRelation(names[i]));\n            String alias = (relation == null ? entityInfo.getAlias() : relation.alias());\n            String subObjectName = (relation == null ? null : names[i]);\n\n            for (DataField field : readset.getFields()) {\n               EntityInfo ei = m_manager.getEntityInfo(field.getEntityClass());\n               Attribute attribute = ei.getAttribute(field);\n\n               if (attribute != null) {\n                  if (excludes.contains(field.getName())) {\n                     continue;\n                  }\n\n                  if (sb.length() > 0) {\n                     sb.append(',');\n                  }\n\n                  if (attribute.selectExpr().length() > 0) {\n                     sb.append(m_expressionResolver.resolve(ctx, attribute.selectExpr()));\n                  } else {\n                     sb.append(alias).append('.').append(m_naming.getField(attribute.field()));\n                  }\n\n                  if (\"true\".equals(output)) {\n                     ctx.addOutField(field);\n                     ctx.addOutSubObjectName(subObjectName);\n                  }\n               } else {\n                  throw new DalRuntimeException(\"Internal error: No Attribute annotation defined for field: \" + field);\n               }\n            }\n         }\n\n         break;\n      case INSERT:\n         for (DataField field : entityInfo.getAttributeFields()) {\n            Attribute attribute = entityInfo.getAttribute(field);\n\n            if (attribute != null) {\n               if (attribute.field().length() > 0 && !(attribute.autoIncrement() && !proto.isFieldUsed(field))) {\n                  if (sb.length() > 0) {\n                     sb.append(',');\n                  }\n\n                  sb.append(m_naming.getField(attribute.field()));\n               }\n            } else {\n               throw new DalRuntimeException(\"Internal error: No Attribute annotation defined for field: \" + field);\n            }\n         }\n\n         break;\n      case UPDATE:\n         for (DataField field : ctx.getUpdateset().getFields()) {\n            Attribute attribute = entityInfo.getAttribute(field);\n\n            if (attribute != null) {\n               if (proto.isFieldUsed(field) || attribute.updateExpr().length() > 0) {\n                  if (sb.length() > 0) {\n                     sb.append(',');\n                  }\n\n                  if (!proto.isFieldUsed(field) && attribute.updateExpr().length() > 0) {\n                     sb.append(m_naming.getField(attribute.field())).append('=').append(m_expressionResolver.resolve(ctx, attribute.updateExpr()));\n                  } else {\n                     sb.append(m_naming.getField(attribute.field())).append(\"=?\");\n                     ctx.addParameter(new Parameter(field));\n                  }\n               }\n            } else {\n               throw new DalRuntimeException(\"Internal error: No Attribute annotation defined for field: \" + field);\n            }\n         }\n\n         break;\n      case DELETE:\n         throw new DalRuntimeException(\"FIELDS token does not support query type: \" + ctx.getQuery().getType());\n      default:\n         throw new DalRuntimeException(\"FIELDS token does not support query type: \" + ctx.getQuery().getType());\n      }\n\n      return sb.toString();\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "@SuppressWarnings(\"unchecked\") public String resolve(Token token, QueryContext ctx)", "class_method_signature": "FieldsTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getEntityInfo", "getAttribute", "split", "getAttribute", "getProto", "getType", "getQuery", "getSubobjects", "getReadset", "value", "getChildren", "getReadset", "add", "getReadset", "size", "get", "getRelation", "getAlias", "alias", "getFields", "getEntityInfo", "getEntityClass", "getAttribute", "contains", "getName", "length", "append", "length", "selectExpr", "append", "resolve", "selectExpr", "append", "append", "append", "getField", "field", "equals", "addOutField", "addOutSubObjectName", "getAttributeFields", "getAttribute", "length", "field", "autoIncrement", "isFieldUsed", "length", "append", "append", "getField", "field", "getFields", "getUpdateset", "getAttribute", "isFieldUsed", "length", "updateExpr", "length", "append", "isFieldUsed", "length", "updateExpr", "append", "append", "append", "getField", "field", "resolve", "updateExpr", "append", "append", "getField", "field", "addParameter", "getType", "getQuery", "getType", "getQuery", "toString"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}