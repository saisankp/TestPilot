{"test_class": {"identifier": "ArgumentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Command<String> ARGUMENT = val -> 0;", "modifier": "static final", "type": "Command<String>", "declarator": "ARGUMENT = val -> 0", "var_name": "ARGUMENT"}, {"original_string": "static final Command<String> COMMAND = val -> 0;", "modifier": "static final", "type": "Command<String>", "declarator": "COMMAND = val -> 0", "var_name": "COMMAND"}, {"original_string": "Argument<String, String> argument = Argument.<String, String>builder(\"argument\", StringArgumentType.string()).executes(ARGUMENT).build();", "modifier": "", "type": "Argument<String, String>", "declarator": "argument = Argument.<String, String>builder(\"argument\", StringArgumentType.string()).executes(ARGUMENT).build()", "var_name": "argument"}, {"original_string": "Argument<String, String> child = Argument.<String, String>builder(\"child\", StringArgumentType.string()).executes(COMMAND).build();", "modifier": "", "type": "Argument<String, String>", "declarator": "child = Argument.<String, String>builder(\"child\", StringArgumentType.string()).executes(COMMAND).build()", "var_name": "child"}, {"original_string": "Literal<String> grandchild = Literal.<String>builder(\"grandchild\").alias(\"grandchild_alias\").executes(COMMAND).build();", "modifier": "", "type": "Literal<String>", "declarator": "grandchild = Literal.<String>builder(\"grandchild\").alias(\"grandchild_alias\").executes(COMMAND).build()", "var_name": "grandchild"}, {"original_string": "Literal<String> extensive = Literal.<String>builder(\"child\").alias(\"child_alias\", \"child_alias_other\").then(grandchild).executes(COMMAND).build();", "modifier": "", "type": "Literal<String>", "declarator": "extensive = Literal.<String>builder(\"child\").alias(\"child_alias\", \"child_alias_other\").then(grandchild).executes(COMMAND).build()", "var_name": "extensive"}, {"original_string": "Literal<String> literal = Literal.<String>builder(\"child\").alias(\"alias\").build();", "modifier": "", "type": "Literal<String>", "declarator": "literal = Literal.<String>builder(\"child\").alias(\"alias\").build()", "var_name": "literal"}], "file": "commons/src/test/java/com/karuslabs/commons/command/tree/nodes/ArgumentTest.java"}, "test_case": {"identifier": "addChild_child_extensive", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void addChild_child_extensive() {\n        argument.addChild(child);\n        argument.addChild(extensive);\n        \n        assertEquals(3, argument.getChildren().size());\n        \n        var child = (Literal<String>) argument.getChild(\"child\");\n        \n        assertSame(this.extensive, child);\n        assertEquals(2, child.getChildren().size());\n        assertEquals(2, child.aliases().size());\n        assertEquals(2, child.aliases().get(0).getChildren().size());\n        assertTrue(((Aliasable<String>) child.aliases().get(0)).aliases().isEmpty());\n    }", "signature": "void addChild_child_extensive()", "full_signature": "@Test void addChild_child_extensive()", "class_method_signature": "ArgumentTest.addChild_child_extensive()", "testcase": true, "constructor": false, "invocations": ["addChild", "addChild", "assertEquals", "size", "getChildren", "getChild", "assertSame", "assertEquals", "size", "getChildren", "assertEquals", "size", "aliases", "assertEquals", "size", "getChildren", "get", "aliases", "assertTrue", "isEmpty", "aliases", "get", "aliases"]}, "focal_class": {"identifier": "Argument", "superclass": "extends ArgumentCommandNode<T, V>", "interfaces": "implements Mutable<T>", "fields": [{"original_string": "private CommandNode<T> destination;", "modifier": "private", "type": "CommandNode<T>", "declarator": "destination", "var_name": "destination"}, {"original_string": "private Consumer<CommandNode<T>> addition;", "modifier": "private", "type": "Consumer<CommandNode<T>>", "declarator": "addition", "var_name": "addition"}], "methods": [{"identifier": "builder", "parameters": "(String name, ArgumentType<V> type)", "modifiers": "public static", "return": "Builder<T, V>", "signature": "Builder<T, V> builder(String name, ArgumentType<V> type)", "full_signature": "public static Builder<T, V> builder(String name, ArgumentType<V> type)", "class_method_signature": "Argument.builder(String name, ArgumentType<V> type)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String name, ArgumentType<V> type)", "modifiers": "public static", "return": "Builder<CommandSender, V>", "signature": "Builder<CommandSender, V> of(String name, ArgumentType<V> type)", "full_signature": "public static Builder<CommandSender, V> of(String name, ArgumentType<V> type)", "class_method_signature": "Argument.of(String name, ArgumentType<V> type)", "testcase": false, "constructor": false}, {"identifier": "Argument", "parameters": "(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "modifiers": "public", "return": "", "signature": " Argument(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "full_signature": "public  Argument(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "class_method_signature": "Argument.Argument(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "testcase": false, "constructor": true}, {"identifier": "Argument", "parameters": "(String name, ArgumentType<V> type, Execution<T> execution, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "modifiers": "public", "return": "", "signature": " Argument(String name, ArgumentType<V> type, Execution<T> execution, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "full_signature": "public  Argument(String name, ArgumentType<V> type, Execution<T> execution, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "class_method_signature": "Argument.Argument(String name, ArgumentType<V> type, Execution<T> execution, Predicate<T> requirement, SuggestionProvider<T> suggestions)", "testcase": false, "constructor": true}, {"identifier": "Argument", "parameters": "(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, @Nullable CommandNode<T> destination, RedirectModifier<T> modifier, boolean fork, SuggestionProvider<T> suggestions)", "modifiers": "public", "return": "", "signature": " Argument(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, @Nullable CommandNode<T> destination, RedirectModifier<T> modifier, boolean fork, SuggestionProvider<T> suggestions)", "full_signature": "public  Argument(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, @Nullable CommandNode<T> destination, RedirectModifier<T> modifier, boolean fork, SuggestionProvider<T> suggestions)", "class_method_signature": "Argument.Argument(String name, ArgumentType<V> type, Command<T> command, Predicate<T> requirement, @Nullable CommandNode<T> destination, RedirectModifier<T> modifier, boolean fork, SuggestionProvider<T> suggestions)", "testcase": false, "constructor": true}, {"identifier": "addChild", "parameters": "(CommandNode<T> child)", "modifiers": "@Override public", "return": "void", "signature": "void addChild(CommandNode<T> child)", "full_signature": "@Override public void addChild(CommandNode<T> child)", "class_method_signature": "Argument.addChild(CommandNode<T> child)", "testcase": false, "constructor": false}, {"identifier": "removeChild", "parameters": "(String child)", "modifiers": "@Override public", "return": "CommandNode<T>", "signature": "CommandNode<T> removeChild(String child)", "full_signature": "@Override public CommandNode<T> removeChild(String child)", "class_method_signature": "Argument.removeChild(String child)", "testcase": false, "constructor": false}, {"identifier": "setCommand", "parameters": "(Command<T> command)", "modifiers": "@Override public", "return": "void", "signature": "void setCommand(Command<T> command)", "full_signature": "@Override public void setCommand(Command<T> command)", "class_method_signature": "Argument.setCommand(Command<T> command)", "testcase": false, "constructor": false}, {"identifier": "getRedirect", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "CommandNode<T>", "signature": "CommandNode<T> getRedirect()", "full_signature": "@Override public @Nullable CommandNode<T> getRedirect()", "class_method_signature": "Argument.getRedirect()", "testcase": false, "constructor": false}, {"identifier": "setRedirect", "parameters": "(CommandNode<T> destination)", "modifiers": "@Override public", "return": "void", "signature": "void setRedirect(CommandNode<T> destination)", "full_signature": "@Override public void setRedirect(CommandNode<T> destination)", "class_method_signature": "Argument.setRedirect(CommandNode<T> destination)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/tree/nodes/Argument.java"}, "focal_method": {"identifier": "addChild", "parameters": "(CommandNode<T> child)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addChild(CommandNode<T> child) {\n        Nodes.addChild(this, child, addition);\n    }", "signature": "void addChild(CommandNode<T> child)", "full_signature": "@Override public void addChild(CommandNode<T> child)", "class_method_signature": "Argument.addChild(CommandNode<T> child)", "testcase": false, "constructor": false, "invocations": ["addChild"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}