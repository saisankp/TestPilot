{"test_class": {"identifier": "DnsPacketProxyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MockEventLoop mockEventLoop;", "modifier": "private", "type": "MockEventLoop", "declarator": "mockEventLoop", "var_name": "mockEventLoop"}, {"original_string": "private DnsPacketProxy dnsPacketProxy;", "modifier": "private", "type": "DnsPacketProxy", "declarator": "dnsPacketProxy", "var_name": "dnsPacketProxy"}, {"original_string": "private RuleDatabase ruleDatabase;", "modifier": "private", "type": "RuleDatabase", "declarator": "ruleDatabase", "var_name": "ruleDatabase"}], "file": "app/src/test/java/org/jak_linux/dns66/vpn/DnsPacketProxyTest.java"}, "test_case": {"identifier": "testInitialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialize() throws Exception {\n        ArrayList<InetAddress> dnsServers = new ArrayList<>();\n        dnsPacketProxy = new DnsPacketProxy(mockEventLoop, Mockito.mock(RuleDatabase.class));\n        dnsPacketProxy.initialize(Mockito.mock(Context.class), dnsServers);\n        assertSame(dnsServers, dnsPacketProxy.upstreamDnsServers);\n    }", "signature": "void testInitialize()", "full_signature": "@Test public void testInitialize()", "class_method_signature": "DnsPacketProxyTest.testInitialize()", "testcase": true, "constructor": false, "invocations": ["mock", "initialize", "mock", "assertSame"]}, "focal_class": {"identifier": "DnsPacketProxy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"DnsPacketProxy\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"DnsPacketProxy\"", "var_name": "TAG"}, {"original_string": "private static final int NEGATIVE_CACHE_TTL_SECONDS = 5;", "modifier": "private static final", "type": "int", "declarator": "NEGATIVE_CACHE_TTL_SECONDS = 5", "var_name": "NEGATIVE_CACHE_TTL_SECONDS"}, {"original_string": "private static final SOARecord NEGATIVE_CACHE_SOA_RECORD;", "modifier": "private static final", "type": "SOARecord", "declarator": "NEGATIVE_CACHE_SOA_RECORD", "var_name": "NEGATIVE_CACHE_SOA_RECORD"}, {"original_string": "final RuleDatabase ruleDatabase;", "modifier": "final", "type": "RuleDatabase", "declarator": "ruleDatabase", "var_name": "ruleDatabase"}, {"original_string": "private final EventLoop eventLoop;", "modifier": "private final", "type": "EventLoop", "declarator": "eventLoop", "var_name": "eventLoop"}, {"original_string": "ArrayList<InetAddress> upstreamDnsServers = new ArrayList<>();", "modifier": "", "type": "ArrayList<InetAddress>", "declarator": "upstreamDnsServers = new ArrayList<>()", "var_name": "upstreamDnsServers"}], "methods": [{"identifier": "DnsPacketProxy", "parameters": "(EventLoop eventLoop, RuleDatabase database)", "modifiers": "public", "return": "", "signature": " DnsPacketProxy(EventLoop eventLoop, RuleDatabase database)", "full_signature": "public  DnsPacketProxy(EventLoop eventLoop, RuleDatabase database)", "class_method_signature": "DnsPacketProxy.DnsPacketProxy(EventLoop eventLoop, RuleDatabase database)", "testcase": false, "constructor": true}, {"identifier": "DnsPacketProxy", "parameters": "(EventLoop eventLoop)", "modifiers": "public", "return": "", "signature": " DnsPacketProxy(EventLoop eventLoop)", "full_signature": "public  DnsPacketProxy(EventLoop eventLoop)", "class_method_signature": "DnsPacketProxy.DnsPacketProxy(EventLoop eventLoop)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(Context context, ArrayList<InetAddress> upstreamDnsServers)", "modifiers": "", "return": "void", "signature": "void initialize(Context context, ArrayList<InetAddress> upstreamDnsServers)", "full_signature": " void initialize(Context context, ArrayList<InetAddress> upstreamDnsServers)", "class_method_signature": "DnsPacketProxy.initialize(Context context, ArrayList<InetAddress> upstreamDnsServers)", "testcase": false, "constructor": false}, {"identifier": "handleDnsResponse", "parameters": "(IpPacket requestPacket, byte[] responsePayload)", "modifiers": "", "return": "void", "signature": "void handleDnsResponse(IpPacket requestPacket, byte[] responsePayload)", "full_signature": " void handleDnsResponse(IpPacket requestPacket, byte[] responsePayload)", "class_method_signature": "DnsPacketProxy.handleDnsResponse(IpPacket requestPacket, byte[] responsePayload)", "testcase": false, "constructor": false}, {"identifier": "handleDnsRequest", "parameters": "(byte[] packetData)", "modifiers": "", "return": "void", "signature": "void handleDnsRequest(byte[] packetData)", "full_signature": " void handleDnsRequest(byte[] packetData)", "class_method_signature": "DnsPacketProxy.handleDnsRequest(byte[] packetData)", "testcase": false, "constructor": false}, {"identifier": "translateDestinationAdress", "parameters": "(IpPacket parsedPacket)", "modifiers": "private", "return": "InetAddress", "signature": "InetAddress translateDestinationAdress(IpPacket parsedPacket)", "full_signature": "private InetAddress translateDestinationAdress(IpPacket parsedPacket)", "class_method_signature": "DnsPacketProxy.translateDestinationAdress(IpPacket parsedPacket)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/jak_linux/dns66/vpn/DnsPacketProxy.java"}, "focal_method": {"identifier": "initialize", "parameters": "(Context context, ArrayList<InetAddress> upstreamDnsServers)", "modifiers": "", "return": "void", "body": "void initialize(Context context, ArrayList<InetAddress> upstreamDnsServers) throws InterruptedException {\n        ruleDatabase.initialize(context);\n        this.upstreamDnsServers = upstreamDnsServers;\n    }", "signature": "void initialize(Context context, ArrayList<InetAddress> upstreamDnsServers)", "full_signature": " void initialize(Context context, ArrayList<InetAddress> upstreamDnsServers)", "class_method_signature": "DnsPacketProxy.initialize(Context context, ArrayList<InetAddress> upstreamDnsServers)", "testcase": false, "constructor": false, "invocations": ["initialize"]}, "repository": {"repo_id": 70996010, "url": "https://github.com/julian-klode/dns66", "stars": 1372, "created": "10/15/2016 3:27:17 PM +00:00", "updates": "2020-01-26T10:51:30+00:00", "fork": "False", "license": "licensed"}}