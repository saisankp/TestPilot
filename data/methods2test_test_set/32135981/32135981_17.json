{"test_class": {"identifier": "MavenPluginLogTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Log logMock = mock(Log.class);", "modifier": "private final", "type": "Log", "declarator": "logMock = mock(Log.class)", "var_name": "logMock"}, {"original_string": "private MavenPluginLog mavenLogger;", "modifier": "private", "type": "MavenPluginLog", "declarator": "mavenLogger", "var_name": "mavenLogger"}], "file": "maven-plugin/src/test/java/echo/output/MavenPluginLogTest.java"}, "test_case": {"identifier": "debugMessageLevelShouldLogToDebugIfEnabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void debugMessageLevelShouldLogToDebugIfEnabled() {\n        when(logMock.isDebugEnabled()).thenReturn(true);\n\n        mavenLogger.debug(\"Ta daa!\");\n\n        verify(logMock).isDebugEnabled();\n        verify(logMock).debug(\"Ta daa!\");\n        verifyNoMoreInteractions(logMock);\n    }", "signature": "void debugMessageLevelShouldLogToDebugIfEnabled()", "full_signature": "@Test public void debugMessageLevelShouldLogToDebugIfEnabled()", "class_method_signature": "MavenPluginLogTest.debugMessageLevelShouldLogToDebugIfEnabled()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isDebugEnabled", "debug", "isDebugEnabled", "verify", "debug", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "MavenPluginLog", "superclass": "", "interfaces": "implements PluginLog", "fields": [{"original_string": "private final Log wrappedLog;", "modifier": "private final", "type": "Log", "declarator": "wrappedLog", "var_name": "wrappedLog"}], "methods": [{"identifier": "MavenPluginLog", "parameters": "(Log wrappedLog)", "modifiers": "public", "return": "", "signature": " MavenPluginLog(Log wrappedLog)", "full_signature": "public  MavenPluginLog(Log wrappedLog)", "class_method_signature": "MavenPluginLog.MavenPluginLog(Log wrappedLog)", "testcase": false, "constructor": true}, {"identifier": "info", "parameters": "(String content)", "modifiers": "@Override public", "return": "void", "signature": "void info(String content)", "full_signature": "@Override public void info(String content)", "class_method_signature": "MavenPluginLog.info(String content)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(Throwable throwable)", "modifiers": "@Override public", "return": "void", "signature": "void debug(Throwable throwable)", "full_signature": "@Override public void debug(Throwable throwable)", "class_method_signature": "MavenPluginLog.debug(Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String content)", "modifiers": "@Override public", "return": "void", "signature": "void debug(String content)", "full_signature": "@Override public void debug(String content)", "class_method_signature": "MavenPluginLog.debug(String content)", "testcase": false, "constructor": false}], "file": "maven-plugin/src/main/java/echo/output/MavenPluginLog.java"}, "focal_method": {"identifier": "debug", "parameters": "(Throwable throwable)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void debug(Throwable throwable) {\n        if (wrappedLog.isDebugEnabled()) {\n            wrappedLog.debug(throwable);\n        }\n    }", "signature": "void debug(Throwable throwable)", "full_signature": "@Override public void debug(Throwable throwable)", "class_method_signature": "MavenPluginLog.debug(Throwable throwable)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug"]}, "repository": {"repo_id": 32135981, "url": "https://github.com/Ekryd/echo-maven-plugin", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 7, "size": 156, "license": "licensed"}}