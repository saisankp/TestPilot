{"test_class": {"identifier": "VolumeApiServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    VolumeApiServiceImpl _svc = new VolumeApiServiceImpl();", "modifier": "@Inject", "type": "VolumeApiServiceImpl", "declarator": "_svc = new VolumeApiServiceImpl()", "var_name": "_svc"}, {"original_string": "@Mock\n    VolumeDao _volumeDao;", "modifier": "@Mock", "type": "VolumeDao", "declarator": "_volumeDao", "var_name": "_volumeDao"}, {"original_string": "@Mock\n    AccountManager _accountMgr;", "modifier": "@Mock", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Mock\n    UserVmDao _userVmDao;", "modifier": "@Mock", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Mock\n    PrimaryDataStoreDao _storagePoolDao;", "modifier": "@Mock", "type": "PrimaryDataStoreDao", "declarator": "_storagePoolDao", "var_name": "_storagePoolDao"}, {"original_string": "@Mock\n    VMSnapshotDao _vmSnapshotDao;", "modifier": "@Mock", "type": "VMSnapshotDao", "declarator": "_vmSnapshotDao", "var_name": "_vmSnapshotDao"}, {"original_string": "@Mock\n    AsyncJobManager _jobMgr;", "modifier": "@Mock", "type": "AsyncJobManager", "declarator": "_jobMgr", "var_name": "_jobMgr"}, {"original_string": "@Mock\n    AsyncJobJoinMapDao _joinMapDao;", "modifier": "@Mock", "type": "AsyncJobJoinMapDao", "declarator": "_joinMapDao", "var_name": "_joinMapDao"}, {"original_string": "@Mock\n    VolumeDataFactory _volFactory;", "modifier": "@Mock", "type": "VolumeDataFactory", "declarator": "_volFactory", "var_name": "_volFactory"}, {"original_string": "@Mock\n    VMInstanceDao _vmInstanceDao;", "modifier": "@Mock", "type": "VMInstanceDao", "declarator": "_vmInstanceDao", "var_name": "_vmInstanceDao"}, {"original_string": "@Mock\n    VolumeInfo volumeInfoMock;", "modifier": "@Mock", "type": "VolumeInfo", "declarator": "volumeInfoMock", "var_name": "volumeInfoMock"}, {"original_string": "@Mock\n    SnapshotInfo snapshotInfoMock;", "modifier": "@Mock", "type": "SnapshotInfo", "declarator": "snapshotInfoMock", "var_name": "snapshotInfoMock"}, {"original_string": "@Mock\n    VolumeService volService;", "modifier": "@Mock", "type": "VolumeService", "declarator": "volService", "var_name": "volService"}, {"original_string": "@Mock\n    CreateVolumeCmd createVol;", "modifier": "@Mock", "type": "CreateVolumeCmd", "declarator": "createVol", "var_name": "createVol"}, {"original_string": "DetachVolumeCmd detachCmd = new DetachVolumeCmd();", "modifier": "", "type": "DetachVolumeCmd", "declarator": "detachCmd = new DetachVolumeCmd()", "var_name": "detachCmd"}, {"original_string": "Class<?> _detachCmdClass = detachCmd.getClass();", "modifier": "", "type": "Class<?>", "declarator": "_detachCmdClass = detachCmd.getClass()", "var_name": "_detachCmdClass"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "server/src/test/java/com/cloud/storage/VolumeApiServiceImplTest.java"}, "test_case": {"identifier": "attachRootInUploadedState", "parameters": "()", "modifiers": "@Test(expected = InvalidParameterValueException.class) public", "return": "void", "body": "@Test(expected = InvalidParameterValueException.class)\n    public void attachRootInUploadedState() throws NoSuchFieldException, IllegalAccessException {\n        _svc.attachVolumeToVM(2L, 8L, 0L);\n    }", "signature": "void attachRootInUploadedState()", "full_signature": "@Test(expected = InvalidParameterValueException.class) public void attachRootInUploadedState()", "class_method_signature": "VolumeApiServiceImplTest.attachRootInUploadedState()", "testcase": true, "constructor": false, "invocations": ["attachVolumeToVM"]}, "focal_class": {"identifier": "VolumeApiServiceImpl", "superclass": "extends ManagerBase", "interfaces": "implements VolumeApiService, VmWorkJobHandler", "fields": [{"original_string": "private final static Logger s_logger = LoggerFactory.getLogger(VolumeApiServiceImpl.class);", "modifier": "private final static", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(VolumeApiServiceImpl.class)", "var_name": "s_logger"}, {"original_string": "public static final String VM_WORK_JOB_HANDLER = VolumeApiServiceImpl.class.getSimpleName();", "modifier": "public static final", "type": "String", "declarator": "VM_WORK_JOB_HANDLER = VolumeApiServiceImpl.class.getSimpleName()", "var_name": "VM_WORK_JOB_HANDLER"}, {"original_string": "@Inject\n  VolumeOrchestrationService _volumeMgr;", "modifier": "@Inject", "type": "VolumeOrchestrationService", "declarator": "_volumeMgr", "var_name": "_volumeMgr"}, {"original_string": "@Inject\n  EntityManager _entityMgr;", "modifier": "@Inject", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n  AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n  TemplateManager _tmpltMgr;", "modifier": "@Inject", "type": "TemplateManager", "declarator": "_tmpltMgr", "var_name": "_tmpltMgr"}, {"original_string": "@Inject\n  SnapshotManager _snapshotMgr;", "modifier": "@Inject", "type": "SnapshotManager", "declarator": "_snapshotMgr", "var_name": "_snapshotMgr"}, {"original_string": "@Inject\n  AccountManager _accountMgr;", "modifier": "@Inject", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n  ConfigurationManager _configMgr;", "modifier": "@Inject", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Inject\n  VolumeDao _volsDao;", "modifier": "@Inject", "type": "VolumeDao", "declarator": "_volsDao", "var_name": "_volsDao"}, {"original_string": "@Inject\n  HostDao _hostDao;", "modifier": "@Inject", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n  SnapshotDao _snapshotDao;", "modifier": "@Inject", "type": "SnapshotDao", "declarator": "_snapshotDao", "var_name": "_snapshotDao"}, {"original_string": "@Inject\n  ServiceOfferingDetailsDao _serviceOfferingDetailsDao;", "modifier": "@Inject", "type": "ServiceOfferingDetailsDao", "declarator": "_serviceOfferingDetailsDao", "var_name": "_serviceOfferingDetailsDao"}, {"original_string": "@Inject\n  StoragePoolDetailsDao storagePoolDetailsDao;", "modifier": "@Inject", "type": "StoragePoolDetailsDao", "declarator": "storagePoolDetailsDao", "var_name": "storagePoolDetailsDao"}, {"original_string": "@Inject\n  UserVmDao _userVmDao;", "modifier": "@Inject", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Inject\n  VolumeDataStoreDao _volumeStoreDao;", "modifier": "@Inject", "type": "VolumeDataStoreDao", "declarator": "_volumeStoreDao", "var_name": "_volumeStoreDao"}, {"original_string": "@Inject\n  VMInstanceDao _vmInstanceDao;", "modifier": "@Inject", "type": "VMInstanceDao", "declarator": "_vmInstanceDao", "var_name": "_vmInstanceDao"}, {"original_string": "@Inject\n  PrimaryDataStoreDao _storagePoolDao;", "modifier": "@Inject", "type": "PrimaryDataStoreDao", "declarator": "_storagePoolDao", "var_name": "_storagePoolDao"}, {"original_string": "@Inject\n  DiskOfferingDao _diskOfferingDao;", "modifier": "@Inject", "type": "DiskOfferingDao", "declarator": "_diskOfferingDao", "var_name": "_diskOfferingDao"}, {"original_string": "@Inject\n  AccountDao _accountDao;", "modifier": "@Inject", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Inject\n  final DataCenterDao _dcDao = null;", "modifier": "@Inject\n  final", "type": "DataCenterDao", "declarator": "_dcDao = null", "var_name": "_dcDao"}, {"original_string": "@Inject\n  VMTemplateDao _templateDao;", "modifier": "@Inject", "type": "VMTemplateDao", "declarator": "_templateDao", "var_name": "_templateDao"}, {"original_string": "@Inject\n  ResourceLimitService _resourceLimitMgr;", "modifier": "@Inject", "type": "ResourceLimitService", "declarator": "_resourceLimitMgr", "var_name": "_resourceLimitMgr"}, {"original_string": "@Inject\n  VmDiskStatisticsDao _vmDiskStatsDao;", "modifier": "@Inject", "type": "VmDiskStatisticsDao", "declarator": "_vmDiskStatsDao", "var_name": "_vmDiskStatsDao"}, {"original_string": "@Inject\n  VMSnapshotDao _vmSnapshotDao;", "modifier": "@Inject", "type": "VMSnapshotDao", "declarator": "_vmSnapshotDao", "var_name": "_vmSnapshotDao"}, {"original_string": "@Inject\n  ConfigurationDao _configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n  DataStoreManager dataStoreMgr;", "modifier": "@Inject", "type": "DataStoreManager", "declarator": "dataStoreMgr", "var_name": "dataStoreMgr"}, {"original_string": "@Inject\n  VolumeService volService;", "modifier": "@Inject", "type": "VolumeService", "declarator": "volService", "var_name": "volService"}, {"original_string": "@Inject\n  VolumeDataFactory volFactory;", "modifier": "@Inject", "type": "VolumeDataFactory", "declarator": "volFactory", "var_name": "volFactory"}, {"original_string": "@Inject\n  SnapshotApiService snapshotMgr;", "modifier": "@Inject", "type": "SnapshotApiService", "declarator": "snapshotMgr", "var_name": "snapshotMgr"}, {"original_string": "@Inject\n  UUIDManager _uuidMgr;", "modifier": "@Inject", "type": "UUIDManager", "declarator": "_uuidMgr", "var_name": "_uuidMgr"}, {"original_string": "@Inject\n  HypervisorCapabilitiesDao _hypervisorCapabilitiesDao;", "modifier": "@Inject", "type": "HypervisorCapabilitiesDao", "declarator": "_hypervisorCapabilitiesDao", "var_name": "_hypervisorCapabilitiesDao"}, {"original_string": "@Inject\n  AsyncJobManager _jobMgr;", "modifier": "@Inject", "type": "AsyncJobManager", "declarator": "_jobMgr", "var_name": "_jobMgr"}, {"original_string": "@Inject\n  VmWorkJobDao _workJobDao;", "modifier": "@Inject", "type": "VmWorkJobDao", "declarator": "_workJobDao", "var_name": "_workJobDao"}, {"original_string": "@Inject\n  ClusterDetailsDao _clusterDetailsDao;", "modifier": "@Inject", "type": "ClusterDetailsDao", "declarator": "_clusterDetailsDao", "var_name": "_clusterDetailsDao"}, {"original_string": "private List<StoragePoolAllocator> _storagePoolAllocators;", "modifier": "private", "type": "List<StoragePoolAllocator>", "declarator": "_storagePoolAllocators", "var_name": "_storagePoolAllocators"}, {"original_string": "VmWorkJobHandlerProxy _jobHandlerProxy = new VmWorkJobHandlerProxy(this);", "modifier": "", "type": "VmWorkJobHandlerProxy", "declarator": "_jobHandlerProxy = new VmWorkJobHandlerProxy(this)", "var_name": "_jobHandlerProxy"}, {"original_string": "static final ConfigKey<Long> VmJobCheckInterval = new ConfigKey<Long>(\"Advanced\", Long.class, \"vm.job.check.interval\", \"3000\",\n      \"Interval in milliseconds to check if the job is complete\", false);", "modifier": "static final", "type": "ConfigKey<Long>", "declarator": "VmJobCheckInterval = new ConfigKey<Long>(\"Advanced\", Long.class, \"vm.job.check.interval\", \"3000\",\n      \"Interval in milliseconds to check if the job is complete\", false)", "var_name": "VmJobCheckInterval"}, {"original_string": "private long _maxVolumeSizeInGb;", "modifier": "private", "type": "long", "declarator": "_maxVolumeSizeInGb", "var_name": "_maxVolumeSizeInGb"}, {"original_string": "private final StateMachine2<Volume.State, Volume.Event, Volume> _volStateMachine;", "modifier": "private final", "type": "StateMachine2<Volume.State, Volume.Event, Volume>", "declarator": "_volStateMachine", "var_name": "_volStateMachine"}], "methods": [{"identifier": "VolumeApiServiceImpl", "parameters": "()", "modifiers": "protected", "return": "", "signature": " VolumeApiServiceImpl()", "full_signature": "protected  VolumeApiServiceImpl()", "class_method_signature": "VolumeApiServiceImpl.VolumeApiServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "uploadVolume", "parameters": "(UploadVolumeCmd cmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_UPLOAD, eventDescription = \"uploading volume\", async = true) public", "return": "VolumeVO", "signature": "VolumeVO uploadVolume(UploadVolumeCmd cmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_UPLOAD, eventDescription = \"uploading volume\", async = true) public VolumeVO uploadVolume(UploadVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.uploadVolume(UploadVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "uploadVolume", "parameters": "(final GetUploadParamsForVolumeCmd cmd)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_UPLOAD, eventDescription = \"uploading volume for post upload\", async = true) public", "return": "GetUploadParamsResponse", "signature": "GetUploadParamsResponse uploadVolume(final GetUploadParamsForVolumeCmd cmd)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_UPLOAD, eventDescription = \"uploading volume for post upload\", async = true) public GetUploadParamsResponse uploadVolume(final GetUploadParamsForVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.uploadVolume(final GetUploadParamsForVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "validateVolume", "parameters": "(Account caller, long ownerId, Long zoneId, String volumeName, String url,\n      String format, Long diskOfferingId)", "modifiers": "private", "return": "boolean", "signature": "boolean validateVolume(Account caller, long ownerId, Long zoneId, String volumeName, String url,\n      String format, Long diskOfferingId)", "full_signature": "private boolean validateVolume(Account caller, long ownerId, Long zoneId, String volumeName, String url,\n      String format, Long diskOfferingId)", "class_method_signature": "VolumeApiServiceImpl.validateVolume(Account caller, long ownerId, Long zoneId, String volumeName, String url,\n      String format, Long diskOfferingId)", "testcase": false, "constructor": false}, {"identifier": "getRandomVolumeName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRandomVolumeName()", "full_signature": "public String getRandomVolumeName()", "class_method_signature": "VolumeApiServiceImpl.getRandomVolumeName()", "testcase": false, "constructor": false}, {"identifier": "persistVolume", "parameters": "(final Account owner, final Long zoneId, final String volumeName, final String url,\n      final String format, final Long diskOfferingId, final Volume.State state)", "modifiers": "@DB protected", "return": "VolumeVO", "signature": "VolumeVO persistVolume(final Account owner, final Long zoneId, final String volumeName, final String url,\n      final String format, final Long diskOfferingId, final Volume.State state)", "full_signature": "@DB protected VolumeVO persistVolume(final Account owner, final Long zoneId, final String volumeName, final String url,\n      final String format, final Long diskOfferingId, final Volume.State state)", "class_method_signature": "VolumeApiServiceImpl.persistVolume(final Account owner, final Long zoneId, final String volumeName, final String url,\n      final String format, final Long diskOfferingId, final Volume.State state)", "testcase": false, "constructor": false}, {"identifier": "getVolumeNameFromCommand", "parameters": "(CreateVolumeCmd cmd)", "modifiers": "public", "return": "String", "signature": "String getVolumeNameFromCommand(CreateVolumeCmd cmd)", "full_signature": "public String getVolumeNameFromCommand(CreateVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.getVolumeNameFromCommand(CreateVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "allocVolume", "parameters": "(CreateVolumeCmd cmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_CREATE, eventDescription = \"creating volume\", create = true) public", "return": "VolumeVO", "signature": "VolumeVO allocVolume(CreateVolumeCmd cmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_CREATE, eventDescription = \"creating volume\", create = true) public VolumeVO allocVolume(CreateVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.allocVolume(CreateVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "commitVolume", "parameters": "(final CreateVolumeCmd cmd, final Account caller, final Account owner, final Boolean displayVolume,\n      final Long zoneId, final Long diskOfferingId, final Storage.ProvisioningType provisioningType, final Long size, final Long minIops, final Long maxIops, final VolumeVO parentVolume,\n      final String userSpecifiedName, final String uuid)", "modifiers": "private", "return": "VolumeVO", "signature": "VolumeVO commitVolume(final CreateVolumeCmd cmd, final Account caller, final Account owner, final Boolean displayVolume,\n      final Long zoneId, final Long diskOfferingId, final Storage.ProvisioningType provisioningType, final Long size, final Long minIops, final Long maxIops, final VolumeVO parentVolume,\n      final String userSpecifiedName, final String uuid)", "full_signature": "private VolumeVO commitVolume(final CreateVolumeCmd cmd, final Account caller, final Account owner, final Boolean displayVolume,\n      final Long zoneId, final Long diskOfferingId, final Storage.ProvisioningType provisioningType, final Long size, final Long minIops, final Long maxIops, final VolumeVO parentVolume,\n      final String userSpecifiedName, final String uuid)", "class_method_signature": "VolumeApiServiceImpl.commitVolume(final CreateVolumeCmd cmd, final Account caller, final Account owner, final Boolean displayVolume,\n      final Long zoneId, final Long diskOfferingId, final Storage.ProvisioningType provisioningType, final Long size, final Long minIops, final Long maxIops, final VolumeVO parentVolume,\n      final String userSpecifiedName, final String uuid)", "testcase": false, "constructor": false}, {"identifier": "validateVolumeSizeRange", "parameters": "(long size)", "modifiers": "public", "return": "boolean", "signature": "boolean validateVolumeSizeRange(long size)", "full_signature": "public boolean validateVolumeSizeRange(long size)", "class_method_signature": "VolumeApiServiceImpl.validateVolumeSizeRange(long size)", "testcase": false, "constructor": false}, {"identifier": "createVolume", "parameters": "(CreateVolumeCmd cmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_CREATE, eventDescription = \"creating volume\", async = true) public", "return": "VolumeVO", "signature": "VolumeVO createVolume(CreateVolumeCmd cmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_CREATE, eventDescription = \"creating volume\", async = true) public VolumeVO createVolume(CreateVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.createVolume(CreateVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "createVolumeFromSnapshot", "parameters": "(VolumeVO volume, long snapshotId, Long vmId)", "modifiers": "protected", "return": "VolumeVO", "signature": "VolumeVO createVolumeFromSnapshot(VolumeVO volume, long snapshotId, Long vmId)", "full_signature": "protected VolumeVO createVolumeFromSnapshot(VolumeVO volume, long snapshotId, Long vmId)", "class_method_signature": "VolumeApiServiceImpl.createVolumeFromSnapshot(VolumeVO volume, long snapshotId, Long vmId)", "testcase": false, "constructor": false}, {"identifier": "resizeVolume", "parameters": "(ResizeVolumeCmd cmd)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_RESIZE, eventDescription = \"resizing volume\", async = true) public", "return": "VolumeVO", "signature": "VolumeVO resizeVolume(ResizeVolumeCmd cmd)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_RESIZE, eventDescription = \"resizing volume\", async = true) public VolumeVO resizeVolume(ResizeVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.resizeVolume(ResizeVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "areIntegersEqual", "parameters": "(Integer i1, Integer i2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areIntegersEqual(Integer i1, Integer i2)", "full_signature": "private static boolean areIntegersEqual(Integer i1, Integer i2)", "class_method_signature": "VolumeApiServiceImpl.areIntegersEqual(Integer i1, Integer i2)", "testcase": false, "constructor": false}, {"identifier": "validateIops", "parameters": "(Long minIops, Long maxIops)", "modifiers": "private", "return": "void", "signature": "void validateIops(Long minIops, Long maxIops)", "full_signature": "private void validateIops(Long minIops, Long maxIops)", "class_method_signature": "VolumeApiServiceImpl.validateIops(Long minIops, Long maxIops)", "testcase": false, "constructor": false}, {"identifier": "orchestrateResizeVolume", "parameters": "(long volumeId, long currentSize, long newSize, Long newMinIops, Long newMaxIops, Long newDiskOfferingId, boolean shrinkOk)", "modifiers": "private", "return": "VolumeVO", "signature": "VolumeVO orchestrateResizeVolume(long volumeId, long currentSize, long newSize, Long newMinIops, Long newMaxIops, Long newDiskOfferingId, boolean shrinkOk)", "full_signature": "private VolumeVO orchestrateResizeVolume(long volumeId, long currentSize, long newSize, Long newMinIops, Long newMaxIops, Long newDiskOfferingId, boolean shrinkOk)", "class_method_signature": "VolumeApiServiceImpl.orchestrateResizeVolume(long volumeId, long currentSize, long newSize, Long newMinIops, Long newMaxIops, Long newDiskOfferingId, boolean shrinkOk)", "testcase": false, "constructor": false}, {"identifier": "deleteVolume", "parameters": "(long volumeId, Account caller)", "modifiers": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_DELETE, eventDescription = \"deleting volume\") public", "return": "boolean", "signature": "boolean deleteVolume(long volumeId, Account caller)", "full_signature": "@Override @DB @ActionEvent(eventType = EventTypes.EVENT_VOLUME_DELETE, eventDescription = \"deleting volume\") public boolean deleteVolume(long volumeId, Account caller)", "class_method_signature": "VolumeApiServiceImpl.deleteVolume(long volumeId, Account caller)", "testcase": false, "constructor": false}, {"identifier": "stateTransitTo", "parameters": "(Volume vol, Volume.Event event)", "modifiers": "private", "return": "boolean", "signature": "boolean stateTransitTo(Volume vol, Volume.Event event)", "full_signature": "private boolean stateTransitTo(Volume vol, Volume.Event event)", "class_method_signature": "VolumeApiServiceImpl.stateTransitTo(Volume vol, Volume.Event event)", "testcase": false, "constructor": false}, {"identifier": "attachVolumeToVM", "parameters": "(AttachVolumeCmd command)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_ATTACH, eventDescription = \"attaching volume\", async = true) public", "return": "Volume", "signature": "Volume attachVolumeToVM(AttachVolumeCmd command)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_ATTACH, eventDescription = \"attaching volume\", async = true) public Volume attachVolumeToVM(AttachVolumeCmd command)", "class_method_signature": "VolumeApiServiceImpl.attachVolumeToVM(AttachVolumeCmd command)", "testcase": false, "constructor": false}, {"identifier": "orchestrateAttachVolumeToVM", "parameters": "(Long vmId, Long volumeId, Long deviceId)", "modifiers": "private", "return": "Volume", "signature": "Volume orchestrateAttachVolumeToVM(Long vmId, Long volumeId, Long deviceId)", "full_signature": "private Volume orchestrateAttachVolumeToVM(Long vmId, Long volumeId, Long deviceId)", "class_method_signature": "VolumeApiServiceImpl.orchestrateAttachVolumeToVM(Long vmId, Long volumeId, Long deviceId)", "testcase": false, "constructor": false}, {"identifier": "attachVolumeToVM", "parameters": "(Long vmId, Long volumeId, Long deviceId)", "modifiers": "public", "return": "Volume", "signature": "Volume attachVolumeToVM(Long vmId, Long volumeId, Long deviceId)", "full_signature": "public Volume attachVolumeToVM(Long vmId, Long volumeId, Long deviceId)", "class_method_signature": "VolumeApiServiceImpl.attachVolumeToVM(Long vmId, Long volumeId, Long deviceId)", "testcase": false, "constructor": false}, {"identifier": "updateVolume", "parameters": "(long volumeId, String path, String state, Long storageId, Boolean displayVolume, String customId, long entityOwnerId, String chainInfo)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_UPDATE, eventDescription = \"updating volume\", async = true) public", "return": "Volume", "signature": "Volume updateVolume(long volumeId, String path, String state, Long storageId, Boolean displayVolume, String customId, long entityOwnerId, String chainInfo)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_UPDATE, eventDescription = \"updating volume\", async = true) public Volume updateVolume(long volumeId, String path, String state, Long storageId, Boolean displayVolume, String customId, long entityOwnerId, String chainInfo)", "class_method_signature": "VolumeApiServiceImpl.updateVolume(long volumeId, String path, String state, Long storageId, Boolean displayVolume, String customId, long entityOwnerId, String chainInfo)", "testcase": false, "constructor": false}, {"identifier": "updateDisplay", "parameters": "(Volume volume, Boolean displayVolume)", "modifiers": "@Override public", "return": "void", "signature": "void updateDisplay(Volume volume, Boolean displayVolume)", "full_signature": "@Override public void updateDisplay(Volume volume, Boolean displayVolume)", "class_method_signature": "VolumeApiServiceImpl.updateDisplay(Volume volume, Boolean displayVolume)", "testcase": false, "constructor": false}, {"identifier": "updateResourceCount", "parameters": "(Volume volume, Boolean displayVolume)", "modifiers": "private", "return": "void", "signature": "void updateResourceCount(Volume volume, Boolean displayVolume)", "full_signature": "private void updateResourceCount(Volume volume, Boolean displayVolume)", "class_method_signature": "VolumeApiServiceImpl.updateResourceCount(Volume volume, Boolean displayVolume)", "testcase": false, "constructor": false}, {"identifier": "saveUsageEvent", "parameters": "(Volume volume, Boolean displayVolume)", "modifiers": "private", "return": "void", "signature": "void saveUsageEvent(Volume volume, Boolean displayVolume)", "full_signature": "private void saveUsageEvent(Volume volume, Boolean displayVolume)", "class_method_signature": "VolumeApiServiceImpl.saveUsageEvent(Volume volume, Boolean displayVolume)", "testcase": false, "constructor": false}, {"identifier": "isVolumeDestroyed", "parameters": "(Volume volume)", "modifiers": "private", "return": "boolean", "signature": "boolean isVolumeDestroyed(Volume volume)", "full_signature": "private boolean isVolumeDestroyed(Volume volume)", "class_method_signature": "VolumeApiServiceImpl.isVolumeDestroyed(Volume volume)", "testcase": false, "constructor": false}, {"identifier": "detachVolumeFromVM", "parameters": "(DetachVolumeCmd cmmd)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_DETACH, eventDescription = \"detaching volume\", async = true) public", "return": "Volume", "signature": "Volume detachVolumeFromVM(DetachVolumeCmd cmmd)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_DETACH, eventDescription = \"detaching volume\", async = true) public Volume detachVolumeFromVM(DetachVolumeCmd cmmd)", "class_method_signature": "VolumeApiServiceImpl.detachVolumeFromVM(DetachVolumeCmd cmmd)", "testcase": false, "constructor": false}, {"identifier": "validateRootVolumeDetachAttach", "parameters": "(VolumeVO volume, UserVmVO vm)", "modifiers": "private", "return": "void", "signature": "void validateRootVolumeDetachAttach(VolumeVO volume, UserVmVO vm)", "full_signature": "private void validateRootVolumeDetachAttach(VolumeVO volume, UserVmVO vm)", "class_method_signature": "VolumeApiServiceImpl.validateRootVolumeDetachAttach(VolumeVO volume, UserVmVO vm)", "testcase": false, "constructor": false}, {"identifier": "orchestrateDetachVolumeFromVM", "parameters": "(long vmId, long volumeId)", "modifiers": "private", "return": "Volume", "signature": "Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId)", "full_signature": "private Volume orchestrateDetachVolumeFromVM(long vmId, long volumeId)", "class_method_signature": "VolumeApiServiceImpl.orchestrateDetachVolumeFromVM(long vmId, long volumeId)", "testcase": false, "constructor": false}, {"identifier": "migrateVolume", "parameters": "(MigrateVolumeCmd cmd)", "modifiers": "@DB @Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_MIGRATE, eventDescription = \"migrating volume\", async = true) public", "return": "Volume", "signature": "Volume migrateVolume(MigrateVolumeCmd cmd)", "full_signature": "@DB @Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_MIGRATE, eventDescription = \"migrating volume\", async = true) public Volume migrateVolume(MigrateVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.migrateVolume(MigrateVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateVolume", "parameters": "(long volumeId, long destPoolId, boolean liveMigrateVolume)", "modifiers": "private", "return": "Volume", "signature": "Volume orchestrateMigrateVolume(long volumeId, long destPoolId, boolean liveMigrateVolume)", "full_signature": "private Volume orchestrateMigrateVolume(long volumeId, long destPoolId, boolean liveMigrateVolume)", "class_method_signature": "VolumeApiServiceImpl.orchestrateMigrateVolume(long volumeId, long destPoolId, boolean liveMigrateVolume)", "testcase": false, "constructor": false}, {"identifier": "liveMigrateVolume", "parameters": "(Volume volume, StoragePool destPool)", "modifiers": "@DB protected", "return": "Volume", "signature": "Volume liveMigrateVolume(Volume volume, StoragePool destPool)", "full_signature": "@DB protected Volume liveMigrateVolume(Volume volume, StoragePool destPool)", "class_method_signature": "VolumeApiServiceImpl.liveMigrateVolume(Volume volume, StoragePool destPool)", "testcase": false, "constructor": false}, {"identifier": "takeSnapshot", "parameters": "(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_SNAPSHOT_CREATE, eventDescription = \"taking snapshot\", async = true) public", "return": "Snapshot", "signature": "Snapshot takeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_SNAPSHOT_CREATE, eventDescription = \"taking snapshot\", async = true) public Snapshot takeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "class_method_signature": "VolumeApiServiceImpl.takeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "testcase": false, "constructor": false}, {"identifier": "orchestrateTakeVolumeSnapshot", "parameters": "(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "modifiers": "private", "return": "Snapshot", "signature": "Snapshot orchestrateTakeVolumeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "full_signature": "private Snapshot orchestrateTakeVolumeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "class_method_signature": "VolumeApiServiceImpl.orchestrateTakeVolumeSnapshot(Long volumeId, Long policyId, Long snapshotId, Account account, boolean quiescevm)", "testcase": false, "constructor": false}, {"identifier": "allocSnapshot", "parameters": "(Long volumeId, Long policyId, String snapshotName)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_SNAPSHOT_CREATE, eventDescription = \"allocating snapshot\", create = true) public", "return": "Snapshot", "signature": "Snapshot allocSnapshot(Long volumeId, Long policyId, String snapshotName)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_SNAPSHOT_CREATE, eventDescription = \"allocating snapshot\", create = true) public Snapshot allocSnapshot(Long volumeId, Long policyId, String snapshotName)", "class_method_signature": "VolumeApiServiceImpl.allocSnapshot(Long volumeId, Long policyId, String snapshotName)", "testcase": false, "constructor": false}, {"identifier": "extractVolume", "parameters": "(ExtractVolumeCmd cmd)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_EXTRACT, eventDescription = \"extracting volume\", async = true) public", "return": "String", "signature": "String extractVolume(ExtractVolumeCmd cmd)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_EXTRACT, eventDescription = \"extracting volume\", async = true) public String extractVolume(ExtractVolumeCmd cmd)", "class_method_signature": "VolumeApiServiceImpl.extractVolume(ExtractVolumeCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "orchestrateExtractVolume", "parameters": "(long volumeId, long zoneId)", "modifiers": "private", "return": "String", "signature": "String orchestrateExtractVolume(long volumeId, long zoneId)", "full_signature": "private String orchestrateExtractVolume(long volumeId, long zoneId)", "class_method_signature": "VolumeApiServiceImpl.orchestrateExtractVolume(long volumeId, long zoneId)", "testcase": false, "constructor": false}, {"identifier": "isDisplayResourceEnabled", "parameters": "(Long id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisplayResourceEnabled(Long id)", "full_signature": "@Override public boolean isDisplayResourceEnabled(Long id)", "class_method_signature": "VolumeApiServiceImpl.isDisplayResourceEnabled(Long id)", "testcase": false, "constructor": false}, {"identifier": "getFormatForPool", "parameters": "(StoragePool pool)", "modifiers": "private", "return": "String", "signature": "String getFormatForPool(StoragePool pool)", "full_signature": "private String getFormatForPool(StoragePool pool)", "class_method_signature": "VolumeApiServiceImpl.getFormatForPool(StoragePool pool)", "testcase": false, "constructor": false}, {"identifier": "needMoveVolume", "parameters": "(VolumeVO existingVolume, VolumeInfo newVolume)", "modifiers": "private", "return": "boolean", "signature": "boolean needMoveVolume(VolumeVO existingVolume, VolumeInfo newVolume)", "full_signature": "private boolean needMoveVolume(VolumeVO existingVolume, VolumeInfo newVolume)", "class_method_signature": "VolumeApiServiceImpl.needMoveVolume(VolumeVO existingVolume, VolumeInfo newVolume)", "testcase": false, "constructor": false}, {"identifier": "sendAttachVolumeCommand", "parameters": "(UserVmVO vm, VolumeVO volumeToAttach, Long deviceId)", "modifiers": "private", "return": "VolumeVO", "signature": "VolumeVO sendAttachVolumeCommand(UserVmVO vm, VolumeVO volumeToAttach, Long deviceId)", "full_signature": "private VolumeVO sendAttachVolumeCommand(UserVmVO vm, VolumeVO volumeToAttach, Long deviceId)", "class_method_signature": "VolumeApiServiceImpl.sendAttachVolumeCommand(UserVmVO vm, VolumeVO volumeToAttach, Long deviceId)", "testcase": false, "constructor": false}, {"identifier": "getMaxDataVolumesSupported", "parameters": "(UserVmVO vm)", "modifiers": "private", "return": "int", "signature": "int getMaxDataVolumesSupported(UserVmVO vm)", "full_signature": "private int getMaxDataVolumesSupported(UserVmVO vm)", "class_method_signature": "VolumeApiServiceImpl.getMaxDataVolumesSupported(UserVmVO vm)", "testcase": false, "constructor": false}, {"identifier": "getDeviceId", "parameters": "(long vmId, Long deviceId)", "modifiers": "private", "return": "Long", "signature": "Long getDeviceId(long vmId, Long deviceId)", "full_signature": "private Long getDeviceId(long vmId, Long deviceId)", "class_method_signature": "VolumeApiServiceImpl.getDeviceId(long vmId, Long deviceId)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "VolumeApiServiceImpl.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "getStoragePoolAllocators", "parameters": "()", "modifiers": "public", "return": "List<StoragePoolAllocator>", "signature": "List<StoragePoolAllocator> getStoragePoolAllocators()", "full_signature": "public List<StoragePoolAllocator> getStoragePoolAllocators()", "class_method_signature": "VolumeApiServiceImpl.getStoragePoolAllocators()", "testcase": false, "constructor": false}, {"identifier": "setStoragePoolAllocators", "parameters": "(List<StoragePoolAllocator> storagePoolAllocators)", "modifiers": "@Inject public", "return": "void", "signature": "void setStoragePoolAllocators(List<StoragePoolAllocator> storagePoolAllocators)", "full_signature": "@Inject public void setStoragePoolAllocators(List<StoragePoolAllocator> storagePoolAllocators)", "class_method_signature": "VolumeApiServiceImpl.setStoragePoolAllocators(List<StoragePoolAllocator> storagePoolAllocators)", "testcase": false, "constructor": false}, {"identifier": "attachVolumeToVmThroughJobQueue", "parameters": "(final Long vmId, final Long volumeId, final Long deviceId)", "modifiers": "public", "return": "Outcome<Volume>", "signature": "Outcome<Volume> attachVolumeToVmThroughJobQueue(final Long vmId, final Long volumeId, final Long deviceId)", "full_signature": "public Outcome<Volume> attachVolumeToVmThroughJobQueue(final Long vmId, final Long volumeId, final Long deviceId)", "class_method_signature": "VolumeApiServiceImpl.attachVolumeToVmThroughJobQueue(final Long vmId, final Long volumeId, final Long deviceId)", "testcase": false, "constructor": false}, {"identifier": "detachVolumeFromVmThroughJobQueue", "parameters": "(final Long vmId, final Long volumeId)", "modifiers": "public", "return": "Outcome<Volume>", "signature": "Outcome<Volume> detachVolumeFromVmThroughJobQueue(final Long vmId, final Long volumeId)", "full_signature": "public Outcome<Volume> detachVolumeFromVmThroughJobQueue(final Long vmId, final Long volumeId)", "class_method_signature": "VolumeApiServiceImpl.detachVolumeFromVmThroughJobQueue(final Long vmId, final Long volumeId)", "testcase": false, "constructor": false}, {"identifier": "resizeVolumeThroughJobQueue", "parameters": "(final Long vmId, final long volumeId,\n      final long currentSize, final long newSize, final Long newMinIops, final Long newMaxIops, final Long newServiceOfferingId, final boolean shrinkOk)", "modifiers": "public", "return": "Outcome<Volume>", "signature": "Outcome<Volume> resizeVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long currentSize, final long newSize, final Long newMinIops, final Long newMaxIops, final Long newServiceOfferingId, final boolean shrinkOk)", "full_signature": "public Outcome<Volume> resizeVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long currentSize, final long newSize, final Long newMinIops, final Long newMaxIops, final Long newServiceOfferingId, final boolean shrinkOk)", "class_method_signature": "VolumeApiServiceImpl.resizeVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long currentSize, final long newSize, final Long newMinIops, final Long newMaxIops, final Long newServiceOfferingId, final boolean shrinkOk)", "testcase": false, "constructor": false}, {"identifier": "extractVolumeThroughJobQueue", "parameters": "(final Long vmId, final long volumeId,\n      final long zoneId)", "modifiers": "public", "return": "Outcome<String>", "signature": "Outcome<String> extractVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long zoneId)", "full_signature": "public Outcome<String> extractVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long zoneId)", "class_method_signature": "VolumeApiServiceImpl.extractVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long zoneId)", "testcase": false, "constructor": false}, {"identifier": "migrateVolumeThroughJobQueue", "parameters": "(final Long vmId, final long volumeId,\n      final long destPoolId, final boolean liveMigrate)", "modifiers": "public", "return": "Outcome<Volume>", "signature": "Outcome<Volume> migrateVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long destPoolId, final boolean liveMigrate)", "full_signature": "public Outcome<Volume> migrateVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long destPoolId, final boolean liveMigrate)", "class_method_signature": "VolumeApiServiceImpl.migrateVolumeThroughJobQueue(final Long vmId, final long volumeId,\n      final long destPoolId, final boolean liveMigrate)", "testcase": false, "constructor": false}, {"identifier": "takeVolumeSnapshotThroughJobQueue", "parameters": "(final Long vmId, final Long volumeId,\n      final Long policyId, final Long snapshotId, final Long accountId, final boolean quiesceVm)", "modifiers": "public", "return": "Outcome<Snapshot>", "signature": "Outcome<Snapshot> takeVolumeSnapshotThroughJobQueue(final Long vmId, final Long volumeId,\n      final Long policyId, final Long snapshotId, final Long accountId, final boolean quiesceVm)", "full_signature": "public Outcome<Snapshot> takeVolumeSnapshotThroughJobQueue(final Long vmId, final Long volumeId,\n      final Long policyId, final Long snapshotId, final Long accountId, final boolean quiesceVm)", "class_method_signature": "VolumeApiServiceImpl.takeVolumeSnapshotThroughJobQueue(final Long vmId, final Long volumeId,\n      final Long policyId, final Long snapshotId, final Long accountId, final boolean quiesceVm)", "testcase": false, "constructor": false}, {"identifier": "orchestrateExtractVolume", "parameters": "(VmWorkExtractVolume work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateExtractVolume(VmWorkExtractVolume work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateExtractVolume(VmWorkExtractVolume work)", "class_method_signature": "VolumeApiServiceImpl.orchestrateExtractVolume(VmWorkExtractVolume work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateAttachVolumeToVM", "parameters": "(VmWorkAttachVolume work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateAttachVolumeToVM(VmWorkAttachVolume work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateAttachVolumeToVM(VmWorkAttachVolume work)", "class_method_signature": "VolumeApiServiceImpl.orchestrateAttachVolumeToVM(VmWorkAttachVolume work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateDetachVolumeFromVM", "parameters": "(VmWorkDetachVolume work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateDetachVolumeFromVM(VmWorkDetachVolume work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateDetachVolumeFromVM(VmWorkDetachVolume work)", "class_method_signature": "VolumeApiServiceImpl.orchestrateDetachVolumeFromVM(VmWorkDetachVolume work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateResizeVolume", "parameters": "(VmWorkResizeVolume work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateResizeVolume(VmWorkResizeVolume work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateResizeVolume(VmWorkResizeVolume work)", "class_method_signature": "VolumeApiServiceImpl.orchestrateResizeVolume(VmWorkResizeVolume work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateMigrateVolume", "parameters": "(VmWorkMigrateVolume work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateMigrateVolume(VmWorkMigrateVolume work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateMigrateVolume(VmWorkMigrateVolume work)", "class_method_signature": "VolumeApiServiceImpl.orchestrateMigrateVolume(VmWorkMigrateVolume work)", "testcase": false, "constructor": false}, {"identifier": "orchestrateTakeVolumeSnapshot", "parameters": "(VmWorkTakeVolumeSnapshot work)", "modifiers": "@ReflectionUse private", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> orchestrateTakeVolumeSnapshot(VmWorkTakeVolumeSnapshot work)", "full_signature": "@ReflectionUse private Pair<JobInfo.Status, String> orchestrateTakeVolumeSnapshot(VmWorkTakeVolumeSnapshot work)", "class_method_signature": "VolumeApiServiceImpl.orchestrateTakeVolumeSnapshot(VmWorkTakeVolumeSnapshot work)", "testcase": false, "constructor": false}, {"identifier": "handleVmWorkJob", "parameters": "(VmWork work)", "modifiers": "@Override public", "return": "Pair<JobInfo.Status, String>", "signature": "Pair<JobInfo.Status, String> handleVmWorkJob(VmWork work)", "full_signature": "@Override public Pair<JobInfo.Status, String> handleVmWorkJob(VmWork work)", "class_method_signature": "VolumeApiServiceImpl.handleVmWorkJob(VmWork work)", "testcase": false, "constructor": false}, {"identifier": "createPlaceHolderWork", "parameters": "(long instanceId)", "modifiers": "private", "return": "VmWorkJobVO", "signature": "VmWorkJobVO createPlaceHolderWork(long instanceId)", "full_signature": "private VmWorkJobVO createPlaceHolderWork(long instanceId)", "class_method_signature": "VolumeApiServiceImpl.createPlaceHolderWork(long instanceId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/storage/VolumeApiServiceImpl.java"}, "focal_method": {"identifier": "attachVolumeToVM", "parameters": "(AttachVolumeCmd command)", "modifiers": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_ATTACH, eventDescription = \"attaching volume\", async = true) public", "return": "Volume", "body": "@Override\n  @ActionEvent(eventType = EventTypes.EVENT_VOLUME_ATTACH, eventDescription = \"attaching volume\", async = true)\n  public Volume attachVolumeToVM(AttachVolumeCmd command) {\n    return attachVolumeToVM(command.getVirtualMachineId(), command.getId(), command.getDeviceId());\n  }", "signature": "Volume attachVolumeToVM(AttachVolumeCmd command)", "full_signature": "@Override @ActionEvent(eventType = EventTypes.EVENT_VOLUME_ATTACH, eventDescription = \"attaching volume\", async = true) public Volume attachVolumeToVM(AttachVolumeCmd command)", "class_method_signature": "VolumeApiServiceImpl.attachVolumeToVM(AttachVolumeCmd command)", "testcase": false, "constructor": false, "invocations": ["attachVolumeToVM", "getVirtualMachineId", "getId", "getDeviceId"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}