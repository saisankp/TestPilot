{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/NumberUtilsTest.java"}, "test_case": {"identifier": "testDecodeBigInteger", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDecodeBigInteger()\n      throws ClassNotFoundException, NoSuchMethodException, SecurityException,\n      IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n    final Object[][] testParameters =\n        new Object[][] {{\"012\", new BigInteger(\"10\")},\n            {\"-014\", new BigInteger(\"-12\")},\n            {\"16\", new BigInteger(\"16\")},\n            {\"-16\", new BigInteger(\"-16\")},\n            {\"0x18\", new BigInteger(\"24\")},\n            {\"-0X20\", new BigInteger(\"-32\")},\n            {\"#22\", new BigInteger(\"34\")},\n            {\"-#24\", new BigInteger(\"-36\")}};\n\n    for (final Object[] testParameter : testParameters) {\n      BigInteger expected = (BigInteger) testParameter[1];\n      String value = (String) testParameter[0];\n      Method method = NumberUtils.class.getDeclaredMethod(\"decodeBigInteger\", String.class);\n      method.setAccessible(true);\n      assertEquals(expected, method.invoke(NumberUtils.class, value));\n    }\n  }", "signature": "void testDecodeBigInteger()", "full_signature": "@Test public void testDecodeBigInteger()", "class_method_signature": "NumberUtilsTest.testDecodeBigInteger()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "setAccessible", "assertEquals", "invoke"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final Number number, final Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convert(final Number number, final Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(final Number number, final Class<T> targetClass)", "class_method_signature": "NumberUtils.convert(final Number number, final Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "throwOverflowException", "parameters": "(final Number number, final Class<?> targetClass)", "modifiers": "private static", "return": "void", "signature": "void throwOverflowException(final Number number, final Class<?> targetClass)", "full_signature": "private static void throwOverflowException(final Number number, final Class<?> targetClass)", "class_method_signature": "NumberUtils.throwOverflowException(final Number number, final Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parse(final String text, final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parse(final String text, final Class<?> clazz)", "class_method_signature": "NumberUtils.parse(final String text, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "modifiers": "public static", "return": "T", "signature": "T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "full_signature": "public static T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "class_method_signature": "NumberUtils.parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "testcase": false, "constructor": false}, {"identifier": "decodeBigInteger", "parameters": "(final String value)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger decodeBigInteger(final String value)", "full_signature": "private static BigInteger decodeBigInteger(final String value)", "class_method_signature": "NumberUtils.decodeBigInteger(final String value)", "testcase": false, "constructor": false}, {"identifier": "positiveToByteArray", "parameters": "(final BigInteger positiveNumber)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] positiveToByteArray(final BigInteger positiveNumber)", "full_signature": "public static byte[] positiveToByteArray(final BigInteger positiveNumber)", "class_method_signature": "NumberUtils.positiveToByteArray(final BigInteger positiveNumber)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToPositive", "parameters": "(final byte[] rawBytes)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger byteArrayToPositive(final byte[] rawBytes)", "full_signature": "public static BigInteger byteArrayToPositive(final byte[] rawBytes)", "class_method_signature": "NumberUtils.byteArrayToPositive(final byte[] rawBytes)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/NumberUtils.java"}, "focal_method": {"identifier": "decodeBigInteger", "parameters": "(final String value)", "modifiers": "private static", "return": "BigInteger", "body": "private static BigInteger decodeBigInteger(final String value) {\n    int radix = 10;\n    int index = 0;\n    boolean negative = false;\n\n    // Handle minus sign, if present.\n    if (value.startsWith(\"-\")) {\n      negative = true;\n      ++index;\n    }\n\n    // Handle radix specifier, if present.\n    if (value.startsWith(\"0x\", index) || value.startsWith(\"0X\", index)) {\n      index += 2;\n      radix = 16;\n    } else if (value.startsWith(\"#\", index)) {\n      ++index;\n      radix = 16;\n    } else if (value.startsWith(\"0\", index) && 1 + index < value.length()) {\n      ++index;\n      radix = 8;\n    }\n\n    final BigInteger result = new BigInteger(value.substring(index), radix);\n    return (negative ? result.negate() : result);\n  }", "signature": "BigInteger decodeBigInteger(final String value)", "full_signature": "private static BigInteger decodeBigInteger(final String value)", "class_method_signature": "NumberUtils.decodeBigInteger(final String value)", "testcase": false, "constructor": false, "invocations": ["startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "length", "substring", "negate"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}