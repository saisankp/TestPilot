{"test_class": {"identifier": "CounterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/nl/nn/adapterframework/util/CounterTest.java"}, "test_case": {"identifier": "testSetValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetValue() throws Exception {\n        Counter c = new Counter(15);\n        c.setValue(30);\n        assertEquals(30, c.getValue());\n    }", "signature": "void testSetValue()", "full_signature": "@Test public void testSetValue()", "class_method_signature": "CounterTest.testSetValue()", "testcase": true, "constructor": false, "invocations": ["setValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "Counter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private long value = 0 ;", "modifier": "private", "type": "long", "declarator": "value = 0", "var_name": "value"}], "methods": [{"identifier": "Counter", "parameters": "(int startValue)", "modifiers": "public", "return": "", "signature": " Counter(int startValue)", "full_signature": "public  Counter(int startValue)", "class_method_signature": "Counter.Counter(int startValue)", "testcase": false, "constructor": true}, {"identifier": "decrease", "parameters": "()", "modifiers": "public synchronized", "return": "long", "signature": "long decrease()", "full_signature": "public synchronized long decrease()", "class_method_signature": "Counter.decrease()", "testcase": false, "constructor": false}, {"identifier": "decrease", "parameters": "(long amount)", "modifiers": "public synchronized", "return": "long", "signature": "long decrease(long amount)", "full_signature": "public synchronized long decrease(long amount)", "class_method_signature": "Counter.decrease(long amount)", "testcase": false, "constructor": false}, {"identifier": "increase", "parameters": "()", "modifiers": "public synchronized", "return": "long", "signature": "long increase()", "full_signature": "public synchronized long increase()", "class_method_signature": "Counter.increase()", "testcase": false, "constructor": false}, {"identifier": "increase", "parameters": "(long amount)", "modifiers": "public synchronized", "return": "long", "signature": "long increase(long amount)", "full_signature": "public synchronized long increase(long amount)", "class_method_signature": "Counter.increase(long amount)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void clear()", "full_signature": "public synchronized void clear()", "class_method_signature": "Counter.clear()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "public synchronized", "return": "long", "signature": "long getValue()", "full_signature": "public synchronized long getValue()", "class_method_signature": "Counter.getValue()", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(long newValue)", "modifiers": "public synchronized", "return": "void", "signature": "void setValue(long newValue)", "full_signature": "public synchronized void setValue(long newValue)", "class_method_signature": "Counter.setValue(long newValue)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/util/Counter.java"}, "focal_method": {"identifier": "setValue", "parameters": "(long newValue)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void setValue(long newValue) {\n\t\tvalue=newValue;\n\t}", "signature": "void setValue(long newValue)", "full_signature": "public synchronized void setValue(long newValue)", "class_method_signature": "Counter.setValue(long newValue)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}