{"test_class": {"identifier": "GroupByTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/GroupByTest.java"}, "test_case": {"identifier": "testGroup_Agg_MultipleAggregationsForKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGroup_Agg_MultipleAggregationsForKey() {\n        DataFrame df1 = DataFrame.newFrame(\"a\", \"b\").foldByRow(\n                1, \"x\",\n                2, \"y\",\n                1, \"y\",\n                0, \"a\",\n                1, \"x\");\n\n        DataFrame df = df1\n                .group(\"b\")\n                .agg(Aggregator.first(\"b\"), Aggregator.sumLong(\"a\"), Aggregator.medianDouble(\"a\"));\n\n        new DataFrameAsserts(df, \"b\", \"a\", \"a_\")\n                .expectHeight(3)\n                .expectRow(0, \"x\", 2L, 1.)\n                .expectRow(1, \"y\", 3L, 1.5)\n                .expectRow(2, \"a\", 0L, 0.);\n    }", "signature": "void testGroup_Agg_MultipleAggregationsForKey()", "full_signature": "@Test public void testGroup_Agg_MultipleAggregationsForKey()", "class_method_signature": "GroupByTest.testGroup_Agg_MultipleAggregationsForKey()", "testcase": true, "constructor": false, "invocations": ["foldByRow", "newFrame", "agg", "group", "first", "sumLong", "medianDouble", "expectRow", "expectRow", "expectRow", "expectHeight"]}, "focal_class": {"identifier": "GroupBy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataFrame ungrouped;", "modifier": "private", "type": "DataFrame", "declarator": "ungrouped", "var_name": "ungrouped"}, {"original_string": "private Map<Object, IntSeries> groupsIndex;", "modifier": "private", "type": "Map<Object, IntSeries>", "declarator": "groupsIndex", "var_name": "groupsIndex"}, {"original_string": "private Map<Object, DataFrame> resolvedGroups;", "modifier": "private", "type": "Map<Object, DataFrame>", "declarator": "resolvedGroups", "var_name": "resolvedGroups"}, {"original_string": "private Comparator<RowProxy> sorter;", "modifier": "private", "type": "Comparator<RowProxy>", "declarator": "sorter", "var_name": "sorter"}], "methods": [{"identifier": "GroupBy", "parameters": "(DataFrame ungrouped, Map<Object, IntSeries> groupsIndex, Comparator<RowProxy> sorter)", "modifiers": "public", "return": "", "signature": " GroupBy(DataFrame ungrouped, Map<Object, IntSeries> groupsIndex, Comparator<RowProxy> sorter)", "full_signature": "public  GroupBy(DataFrame ungrouped, Map<Object, IntSeries> groupsIndex, Comparator<RowProxy> sorter)", "class_method_signature": "GroupBy.GroupBy(DataFrame ungrouped, Map<Object, IntSeries> groupsIndex, Comparator<RowProxy> sorter)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "GroupBy.size()", "testcase": false, "constructor": false}, {"identifier": "getUngroupedColumnIndex", "parameters": "()", "modifiers": "public", "return": "Index", "signature": "Index getUngroupedColumnIndex()", "full_signature": "public Index getUngroupedColumnIndex()", "class_method_signature": "GroupBy.getUngroupedColumnIndex()", "testcase": false, "constructor": false}, {"identifier": "toDataFrame", "parameters": "()", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame toDataFrame()", "full_signature": "public DataFrame toDataFrame()", "class_method_signature": "GroupBy.toDataFrame()", "testcase": false, "constructor": false}, {"identifier": "getGroups", "parameters": "()", "modifiers": "public", "return": "Collection<Object>", "signature": "Collection<Object> getGroups()", "full_signature": "public Collection<Object> getGroups()", "class_method_signature": "GroupBy.getGroups()", "testcase": false, "constructor": false}, {"identifier": "hasGroup", "parameters": "(Object key)", "modifiers": "public", "return": "boolean", "signature": "boolean hasGroup(Object key)", "full_signature": "public boolean hasGroup(Object key)", "class_method_signature": "GroupBy.hasGroup(Object key)", "testcase": false, "constructor": false}, {"identifier": "getGroupIndex", "parameters": "(Object key)", "modifiers": "public", "return": "IntSeries", "signature": "IntSeries getGroupIndex(Object key)", "full_signature": "public IntSeries getGroupIndex(Object key)", "class_method_signature": "GroupBy.getGroupIndex(Object key)", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "(Object key)", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame getGroup(Object key)", "full_signature": "public DataFrame getGroup(Object key)", "class_method_signature": "GroupBy.getGroup(Object key)", "testcase": false, "constructor": false}, {"identifier": "rowNumbers", "parameters": "()", "modifiers": "@Deprecated public", "return": "Series<Integer>", "signature": "Series<Integer> rowNumbers()", "full_signature": "@Deprecated public Series<Integer> rowNumbers()", "class_method_signature": "GroupBy.rowNumbers()", "testcase": false, "constructor": false}, {"identifier": "rowNumber", "parameters": "()", "modifiers": "public", "return": "IntSeries", "signature": "IntSeries rowNumber()", "full_signature": "public IntSeries rowNumber()", "class_method_signature": "GroupBy.rowNumber()", "testcase": false, "constructor": false}, {"identifier": "rank", "parameters": "()", "modifiers": "public", "return": "IntSeries", "signature": "IntSeries rank()", "full_signature": "public IntSeries rank()", "class_method_signature": "GroupBy.rank()", "testcase": false, "constructor": false}, {"identifier": "denseRank", "parameters": "()", "modifiers": "public", "return": "IntSeries", "signature": "IntSeries denseRank()", "full_signature": "public IntSeries denseRank()", "class_method_signature": "GroupBy.denseRank()", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(String column, int offset, T filler)", "modifiers": "public", "return": "Series<T>", "signature": "Series<T> shift(String column, int offset, T filler)", "full_signature": "public Series<T> shift(String column, int offset, T filler)", "class_method_signature": "GroupBy.shift(String column, int offset, T filler)", "testcase": false, "constructor": false}, {"identifier": "shift", "parameters": "(int column, int offset, T filler)", "modifiers": "public", "return": "Series<T>", "signature": "Series<T> shift(int column, int offset, T filler)", "full_signature": "public Series<T> shift(int column, int offset, T filler)", "class_method_signature": "GroupBy.shift(int column, int offset, T filler)", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "(int len)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy head(int len)", "full_signature": "public GroupBy head(int len)", "class_method_signature": "GroupBy.head(int len)", "testcase": false, "constructor": false}, {"identifier": "tail", "parameters": "(int len)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy tail(int len)", "full_signature": "public GroupBy tail(int len)", "class_method_signature": "GroupBy.tail(int len)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(RowToValueMapper<V> sortKeyExtractor)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy sort(RowToValueMapper<V> sortKeyExtractor)", "full_signature": "public GroupBy sort(RowToValueMapper<V> sortKeyExtractor)", "class_method_signature": "GroupBy.sort(RowToValueMapper<V> sortKeyExtractor)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(Comparator<RowProxy> sorter)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy sort(Comparator<RowProxy> sorter)", "full_signature": "public GroupBy sort(Comparator<RowProxy> sorter)", "class_method_signature": "GroupBy.sort(Comparator<RowProxy> sorter)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(String column, boolean ascending)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy sort(String column, boolean ascending)", "full_signature": "public GroupBy sort(String column, boolean ascending)", "class_method_signature": "GroupBy.sort(String column, boolean ascending)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int column, boolean ascending)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy sort(int column, boolean ascending)", "full_signature": "public GroupBy sort(int column, boolean ascending)", "class_method_signature": "GroupBy.sort(int column, boolean ascending)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(String[] columns, boolean[] ascending)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy sort(String[] columns, boolean[] ascending)", "full_signature": "public GroupBy sort(String[] columns, boolean[] ascending)", "class_method_signature": "GroupBy.sort(String[] columns, boolean[] ascending)", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(int[] columns, boolean[] ascending)", "modifiers": "public", "return": "GroupBy", "signature": "GroupBy sort(int[] columns, boolean[] ascending)", "full_signature": "public GroupBy sort(int[] columns, boolean[] ascending)", "class_method_signature": "GroupBy.sort(int[] columns, boolean[] ascending)", "testcase": false, "constructor": false}, {"identifier": "agg", "parameters": "(Aggregator<?>... aggregators)", "modifiers": "public", "return": "DataFrame", "signature": "DataFrame agg(Aggregator<?>... aggregators)", "full_signature": "public DataFrame agg(Aggregator<?>... aggregators)", "class_method_signature": "GroupBy.agg(Aggregator<?>... aggregators)", "testcase": false, "constructor": false}, {"identifier": "resolveGroup", "parameters": "(Object key)", "modifiers": "protected", "return": "DataFrame", "signature": "DataFrame resolveGroup(Object key)", "full_signature": "protected DataFrame resolveGroup(Object key)", "class_method_signature": "GroupBy.resolveGroup(Object key)", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/GroupBy.java"}, "focal_method": {"identifier": "agg", "parameters": "(Aggregator<?>... aggregators)", "modifiers": "public", "return": "DataFrame", "body": "public DataFrame agg(Aggregator<?>... aggregators) {\n        return DataFrameAggregation.aggGroupBy(this, aggregators);\n    }", "signature": "DataFrame agg(Aggregator<?>... aggregators)", "full_signature": "public DataFrame agg(Aggregator<?>... aggregators)", "class_method_signature": "GroupBy.agg(Aggregator<?>... aggregators)", "testcase": false, "constructor": false, "invocations": ["aggGroupBy"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}