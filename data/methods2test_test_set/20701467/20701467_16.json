{"test_class": {"identifier": "PacketDispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private PacketProcessingService packetProcessingService;", "modifier": "@Mock\n    private", "type": "PacketProcessingService", "declarator": "packetProcessingService", "var_name": "packetProcessingService"}, {"original_string": "@Mock\n    private InventoryReader inventoryReader;", "modifier": "@Mock\n    private", "type": "InventoryReader", "declarator": "inventoryReader", "var_name": "inventoryReader"}, {"original_string": "private PacketDispatcher packetDispatcher;", "modifier": "private", "type": "PacketDispatcher", "declarator": "packetDispatcher", "var_name": "packetDispatcher"}], "file": "arphandler/src/test/java/org/opendaylight/l2switch/arphandler/core/PacketDispatcherTest.java"}, "test_case": {"identifier": "testFloodPacket_NullList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFloodPacket_NullList() throws Exception {\n        HashMap<String, List<NodeConnectorRef>> switchNodeConnectors = Mockito.mock(HashMap.class);\n        when(switchNodeConnectors.get(any(String.class))).thenReturn(null);\n        when(inventoryReader.getSwitchNodeConnectors()).thenReturn(switchNodeConnectors);\n\n        packetDispatcher.floodPacket(\"\", null, new NodeConnectorRef(InstanceIdentifier.create(NodeConnector.class)),\n                new NodeConnectorRef(InstanceIdentifier.create(NodeConnector.class)));\n        verify(inventoryReader, times(1)).setRefreshData(true);\n        verify(inventoryReader, times(1)).readInventory();\n        verify(packetProcessingService, times(0)).transmitPacket(any(TransmitPacketInput.class));\n    }", "signature": "void testFloodPacket_NullList()", "full_signature": "@Test public void testFloodPacket_NullList()", "class_method_signature": "PacketDispatcherTest.testFloodPacket_NullList()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "get", "any", "thenReturn", "when", "getSwitchNodeConnectors", "floodPacket", "create", "create", "setRefreshData", "verify", "times", "readInventory", "verify", "times", "transmitPacket", "verify", "times", "any"]}, "focal_class": {"identifier": "PacketDispatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PacketDispatcher.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PacketDispatcher.class)", "var_name": "LOG"}, {"original_string": "private InventoryReader inventoryReader;", "modifier": "private", "type": "InventoryReader", "declarator": "inventoryReader", "var_name": "inventoryReader"}, {"original_string": "private PacketProcessingService packetProcessingService;", "modifier": "private", "type": "PacketProcessingService", "declarator": "packetProcessingService", "var_name": "packetProcessingService"}], "methods": [{"identifier": "setPacketProcessingService", "parameters": "(PacketProcessingService packetProcessingService)", "modifiers": "public", "return": "void", "signature": "void setPacketProcessingService(PacketProcessingService packetProcessingService)", "full_signature": "public void setPacketProcessingService(PacketProcessingService packetProcessingService)", "class_method_signature": "PacketDispatcher.setPacketProcessingService(PacketProcessingService packetProcessingService)", "testcase": false, "constructor": false}, {"identifier": "setInventoryReader", "parameters": "(InventoryReader inventoryReader)", "modifiers": "public", "return": "void", "signature": "void setInventoryReader(InventoryReader inventoryReader)", "full_signature": "public void setInventoryReader(InventoryReader inventoryReader)", "class_method_signature": "PacketDispatcher.setInventoryReader(InventoryReader inventoryReader)", "testcase": false, "constructor": false}, {"identifier": "dispatchPacket", "parameters": "(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "modifiers": "public", "return": "void", "signature": "void dispatchPacket(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "full_signature": "public void dispatchPacket(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "class_method_signature": "PacketDispatcher.dispatchPacket(byte[] payload, NodeConnectorRef ingress, MacAddress srcMac, MacAddress destMac)", "testcase": false, "constructor": false}, {"identifier": "floodPacket", "parameters": "(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "modifiers": "public", "return": "void", "signature": "void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "full_signature": "public void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "class_method_signature": "PacketDispatcher.floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "testcase": false, "constructor": false}, {"identifier": "sendPacketOut", "parameters": "(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "modifiers": "public", "return": "void", "signature": "void sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "full_signature": "public void sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "class_method_signature": "PacketDispatcher.sendPacketOut(byte[] payload, NodeConnectorRef ingress, NodeConnectorRef egress)", "testcase": false, "constructor": false}, {"identifier": "refreshInventoryReader", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshInventoryReader()", "full_signature": "private void refreshInventoryReader()", "class_method_signature": "PacketDispatcher.refreshInventoryReader()", "testcase": false, "constructor": false}, {"identifier": "getNodePath", "parameters": "(final InstanceIdentifier<?> nodeChild)", "modifiers": "private", "return": "InstanceIdentifier<Node>", "signature": "InstanceIdentifier<Node> getNodePath(final InstanceIdentifier<?> nodeChild)", "full_signature": "private InstanceIdentifier<Node> getNodePath(final InstanceIdentifier<?> nodeChild)", "class_method_signature": "PacketDispatcher.getNodePath(final InstanceIdentifier<?> nodeChild)", "testcase": false, "constructor": false}], "file": "arphandler/src/main/java/org/opendaylight/l2switch/arphandler/core/PacketDispatcher.java"}, "focal_method": {"identifier": "floodPacket", "parameters": "(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "modifiers": "public", "return": "void", "body": "public void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector) {\n\n        List<NodeConnectorRef> nodeConnectors = inventoryReader.getSwitchNodeConnectors().get(nodeId);\n\n        if (nodeConnectors == null) {\n            refreshInventoryReader();\n            nodeConnectors = inventoryReader.getSwitchNodeConnectors().get(nodeId);\n            if (nodeConnectors == null) {\n                LOG.info(\"Cannot flood packets, as inventory doesn't have any node connectors for node {}\", nodeId);\n                return;\n            }\n        }\n        for (NodeConnectorRef ncRef : nodeConnectors) {\n            String ncId = ncRef.getValue().firstIdentifierOf(NodeConnector.class)\n                    .firstKeyOf(NodeConnector.class, NodeConnectorKey.class).getId().getValue();\n            // Don't flood on discarding node connectors & origIngress\n            if (!ncId.equals(origIngress.getValue().firstIdentifierOf(NodeConnector.class)\n                    .firstKeyOf(NodeConnector.class, NodeConnectorKey.class).getId().getValue())) {\n                sendPacketOut(payload, origIngress, ncRef);\n            }\n        }\n    }", "signature": "void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "full_signature": "public void floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "class_method_signature": "PacketDispatcher.floodPacket(String nodeId, byte[] payload, NodeConnectorRef origIngress,\n            NodeConnectorRef controllerNodeConnector)", "testcase": false, "constructor": false, "invocations": ["get", "getSwitchNodeConnectors", "refreshInventoryReader", "get", "getSwitchNodeConnectors", "info", "getValue", "getId", "firstKeyOf", "firstIdentifierOf", "getValue", "equals", "getValue", "getId", "firstKeyOf", "firstIdentifierOf", "getValue", "sendPacketOut"]}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}