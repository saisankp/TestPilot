{"test_class": {"identifier": "JwtTokenUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate JwtTokenUtil jwtTokenUtil;", "modifier": "@Autowired\n\tprivate", "type": "JwtTokenUtil", "declarator": "jwtTokenUtil", "var_name": "jwtTokenUtil"}], "file": "trading-webapp/src/test/java/fr/ymanvieu/trading/webapp/jwt/JwtTokenUtilTest.java"}, "test_case": {"identifier": "testGenerateRefreshToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGenerateRefreshToken() throws Exception {\n\t\t// GIVEN\n\t\tInstant start = Instant.now().minusSeconds(1);\n\t\tDuration expiration = Duration.ofDays(90);\n\t\t\n\t\t// WHEN\n\t\tString token = jwtTokenUtil.generateRefreshToken(\"username\");\n\t\t\n\t\t\n\t\t// THEN\n\t\tassertThat(jwtTokenUtil.getUsernameFromToken(token)).isEqualTo(\"username\");\n\t\tassertThat(jwtTokenUtil.getIssuedAtDateFromToken(token)).isBetween(start, Instant.now());\n\t\tassertThat(jwtTokenUtil.getExpirationDateFromToken(token)).isBetween(start.plus(expiration), Instant.now().plus(expiration));\n\t}", "signature": "void testGenerateRefreshToken()", "full_signature": "@Test public void testGenerateRefreshToken()", "class_method_signature": "JwtTokenUtilTest.testGenerateRefreshToken()", "testcase": true, "constructor": false, "invocations": ["minusSeconds", "now", "ofDays", "generateRefreshToken", "isEqualTo", "assertThat", "getUsernameFromToken", "isBetween", "assertThat", "getIssuedAtDateFromToken", "now", "isBetween", "assertThat", "getExpirationDateFromToken", "plus", "plus", "now"]}, "focal_class": {"identifier": "JwtTokenUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String CLAIM_KEY_ROLES = \"roles\";", "modifier": "static final", "type": "String", "declarator": "CLAIM_KEY_ROLES = \"roles\"", "var_name": "CLAIM_KEY_ROLES"}, {"original_string": "static final String ROLES_CLAIM_DELIMITER = \",\";", "modifier": "static final", "type": "String", "declarator": "ROLES_CLAIM_DELIMITER = \",\"", "var_name": "ROLES_CLAIM_DELIMITER"}, {"original_string": "@Autowired\n    private JwtProperties jwtConfig;", "modifier": "@Autowired\n    private", "type": "JwtProperties", "declarator": "jwtConfig", "var_name": "jwtConfig"}], "methods": [{"identifier": "getUsernameFromToken", "parameters": "(String token)", "modifiers": "public", "return": "String", "signature": "String getUsernameFromToken(String token)", "full_signature": "public String getUsernameFromToken(String token)", "class_method_signature": "JwtTokenUtil.getUsernameFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getIssuedAtDateFromToken", "parameters": "(String token)", "modifiers": "public", "return": "Instant", "signature": "Instant getIssuedAtDateFromToken(String token)", "full_signature": "public Instant getIssuedAtDateFromToken(String token)", "class_method_signature": "JwtTokenUtil.getIssuedAtDateFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getExpirationDateFromToken", "parameters": "(String token)", "modifiers": "public", "return": "Instant", "signature": "Instant getExpirationDateFromToken(String token)", "full_signature": "public Instant getExpirationDateFromToken(String token)", "class_method_signature": "JwtTokenUtil.getExpirationDateFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getClaimFromToken", "parameters": "(String token, Function<Claims, T> claimsResolver)", "modifiers": "public", "return": "T", "signature": "T getClaimFromToken(String token, Function<Claims, T> claimsResolver)", "full_signature": "public T getClaimFromToken(String token, Function<Claims, T> claimsResolver)", "class_method_signature": "JwtTokenUtil.getClaimFromToken(String token, Function<Claims, T> claimsResolver)", "testcase": false, "constructor": false}, {"identifier": "getAllClaimsFromToken", "parameters": "(String token)", "modifiers": "private", "return": "Claims", "signature": "Claims getAllClaimsFromToken(String token)", "full_signature": "private Claims getAllClaimsFromToken(String token)", "class_method_signature": "JwtTokenUtil.getAllClaimsFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "isTokenExpired", "parameters": "(String token)", "modifiers": "private", "return": "Boolean", "signature": "Boolean isTokenExpired(String token)", "full_signature": "private Boolean isTokenExpired(String token)", "class_method_signature": "JwtTokenUtil.isTokenExpired(String token)", "testcase": false, "constructor": false}, {"identifier": "isCreatedBeforeLastPasswordReset", "parameters": "(Instant created, Instant lastPasswordReset)", "modifiers": "private", "return": "Boolean", "signature": "Boolean isCreatedBeforeLastPasswordReset(Instant created, Instant lastPasswordReset)", "full_signature": "private Boolean isCreatedBeforeLastPasswordReset(Instant created, Instant lastPasswordReset)", "class_method_signature": "JwtTokenUtil.isCreatedBeforeLastPasswordReset(Instant created, Instant lastPasswordReset)", "testcase": false, "constructor": false}, {"identifier": "generateToken", "parameters": "(UserDetails userDetails)", "modifiers": "public", "return": "String", "signature": "String generateToken(UserDetails userDetails)", "full_signature": "public String generateToken(UserDetails userDetails)", "class_method_signature": "JwtTokenUtil.generateToken(UserDetails userDetails)", "testcase": false, "constructor": false}, {"identifier": "doGenerateToken", "parameters": "(String subject, Map<String, Object> claims)", "modifiers": "private", "return": "String", "signature": "String doGenerateToken(String subject, Map<String, Object> claims)", "full_signature": "private String doGenerateToken(String subject, Map<String, Object> claims)", "class_method_signature": "JwtTokenUtil.doGenerateToken(String subject, Map<String, Object> claims)", "testcase": false, "constructor": false}, {"identifier": "canTokenBeRefreshed", "parameters": "(String token, Instant lastPasswordReset)", "modifiers": "public", "return": "Boolean", "signature": "Boolean canTokenBeRefreshed(String token, Instant lastPasswordReset)", "full_signature": "public Boolean canTokenBeRefreshed(String token, Instant lastPasswordReset)", "class_method_signature": "JwtTokenUtil.canTokenBeRefreshed(String token, Instant lastPasswordReset)", "testcase": false, "constructor": false}, {"identifier": "generateRefreshToken", "parameters": "(String subject)", "modifiers": "public", "return": "String", "signature": "String generateRefreshToken(String subject)", "full_signature": "public String generateRefreshToken(String subject)", "class_method_signature": "JwtTokenUtil.generateRefreshToken(String subject)", "testcase": false, "constructor": false}, {"identifier": "validateToken", "parameters": "(String token, UserDetails userDetails)", "modifiers": "public", "return": "Boolean", "signature": "Boolean validateToken(String token, UserDetails userDetails)", "full_signature": "public Boolean validateToken(String token, UserDetails userDetails)", "class_method_signature": "JwtTokenUtil.validateToken(String token, UserDetails userDetails)", "testcase": false, "constructor": false}, {"identifier": "getGrantedAuthoritiesFromToken", "parameters": "(String authToken)", "modifiers": "public", "return": "Collection<? extends GrantedAuthority>", "signature": "Collection<? extends GrantedAuthority> getGrantedAuthoritiesFromToken(String authToken)", "full_signature": "public Collection<? extends GrantedAuthority> getGrantedAuthoritiesFromToken(String authToken)", "class_method_signature": "JwtTokenUtil.getGrantedAuthoritiesFromToken(String authToken)", "testcase": false, "constructor": false}], "file": "trading-webapp/src/main/java/fr/ymanvieu/trading/webapp/jwt/JwtTokenUtil.java"}, "focal_method": {"identifier": "generateRefreshToken", "parameters": "(String subject)", "modifiers": "public", "return": "String", "body": "public String generateRefreshToken(String subject) {\n    \tfinal Instant createdDate = Instant.now();\n    \tfinal Instant expirationDate = createdDate.plus(jwtConfig.getRefreshExpiration());\n    \t\n    \tlog.info(\"generateRefreshToken()\");\n        \n        return Jwts.builder()\n        \t\t.setSubject(subject)\n                .setIssuedAt(Date.from(createdDate))\n                .setExpiration(Date.from(expirationDate))\n                .signWith(Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtConfig.getSecret())), SignatureAlgorithm.HS512)\n                .compact();\n    }", "signature": "String generateRefreshToken(String subject)", "full_signature": "public String generateRefreshToken(String subject)", "class_method_signature": "JwtTokenUtil.generateRefreshToken(String subject)", "testcase": false, "constructor": false, "invocations": ["now", "plus", "getRefreshExpiration", "info", "compact", "signWith", "setExpiration", "setIssuedAt", "setSubject", "builder", "from", "from", "hmacShaKeyFor", "decode", "getSecret"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}