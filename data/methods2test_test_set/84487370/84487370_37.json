{"test_class": {"identifier": "PropertyTreeBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "hydrograph.ui/hydrograph.ui.propertywindow/src/test/java/hydrograph/ui/propertywindow/property/PropertyTreeBuilderTest.java"}, "test_case": {"identifier": "itShouldBuildComponenetPropertyTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void itShouldBuildComponenetPropertyTree(){\n\t\t//Given\n\t\tPropertyStore propertyStore = new PropertyStore();\n\t\tArrayList<Property> inputComponentProperties = propertyStore.getProperties(\"Input\");\n\t\t//String expectedTree = \"PropertyTreeBuilder [propertyTree={TextProperties={TextProperties.GENERAL=[Property [propertyName=path, propertyRenderer=TEXT, propertyGroup=TextProperties, propertySubGroup=GENERAL, propertyDataType=String, propertyType=USER, propertyListeners=[]], Property [propertyName=delimiter, propertyRenderer=TEXT, propertyGroup=TextProperties, propertySubGroup=GENERAL, propertyDataType=String, propertyType=USER, propertyListeners=[]]], TextProperties.Opetional=[Property [propertyName=charset, propertyRenderer=TEXT, propertyGroup=TextProperties, propertySubGroup=Opetional, propertyDataType=String, propertyType=USER, propertyListeners=[]], Property [propertyName=batch, propertyRenderer=TEXT, propertyGroup=TextProperties, propertySubGroup=Opetional, propertyDataType=String, propertyType=USER, propertyListeners=[]]]}, RadioProperties={RadioProperties.safe=[Property [propertyName=safe, propertyRenderer=RADIO, propertyGroup=RadioProperties, propertySubGroup=safe, propertyDataType=boolean, propertyType=USER, propertyListeners=[]]], RadioProperties.header=[Property [propertyName=has_header, propertyRenderer=RADIO, propertyGroup=RadioProperties, propertySubGroup=header, propertyDataType=boolean, propertyType=USER, propertyListeners=[]]]}}]\";\n\t\tString expectedTree =\"PropertyTreeBuilder [propertyTree={TEXT_PROPERTIES={TEXT_PROPERTIES.GENERAL=[Property [propertyName=name, propertyRenderer=AAA, propertyGroup=TEXT_PROPERTIES, propertySubGroup=GENERAL, propertyDataType=String, propertyType=USER, propertyListeners=[]], Property [propertyName=path, propertyRenderer=AAA, propertyGroup=TEXT_PROPERTIES, propertySubGroup=GENERAL, propertyDataType=String, propertyType=USER, propertyListeners=[]], Property [propertyName=delimiter, propertyRenderer=AAA, propertyGroup=TEXT_PROPERTIES, propertySubGroup=GENERAL, propertyDataType=String, propertyType=USER, propertyListeners=[]]], TEXT_PROPERTIES.OPTIONAL_PROPERTIES=[Property [propertyName=charset, propertyRenderer=AAA, propertyGroup=TEXT_PROPERTIES, propertySubGroup=OPTIONAL_PROPERTIES, propertyDataType=String, propertyType=USER, propertyListeners=[]], Property [propertyName=batch, propertyRenderer=AAA, propertyGroup=TEXT_PROPERTIES, propertySubGroup=OPTIONAL_PROPERTIES, propertyDataType=String, propertyType=USER, propertyListeners=[]]]}, RADIO_PROPERTIES={RADIO_PROPERTIES.safe=[Property [propertyName=safe, propertyRenderer=AAA, propertyGroup=RADIO_PROPERTIES, propertySubGroup=safe, propertyDataType=boolean, propertyType=USER, propertyListeners=[]]], RADIO_PROPERTIES.header=[Property [propertyName=has_header, propertyRenderer=AAA, propertyGroup=RADIO_PROPERTIES, propertySubGroup=header, propertyDataType=boolean, propertyType=USER, propertyListeners=[]]]}, Schema={Schema.GENERAL=[Property [propertyName=Schema, propertyRenderer=AAA, propertyGroup=Schema, propertySubGroup=GENERAL, propertyDataType=boolean, propertyType=USER, propertyListeners=[]]]}, RUNTIME_PROP={RUNTIME_PROP.GENERAL=[Property [propertyName=RuntimeProps, propertyRenderer=AAA, propertyGroup=RUNTIME_PROP, propertySubGroup=GENERAL, propertyDataType=boolean, propertyType=USER, propertyListeners=[]]]}}]\";\n\t\t//When\n\t\tPropertyTreeBuilder propertyTreeBuilder = new PropertyTreeBuilder(inputComponentProperties);\n\t\t\n\t\t//Then\n\t\tassertEquals(expectedTree,propertyTreeBuilder.toString());\n\t}", "signature": "void itShouldBuildComponenetPropertyTree()", "full_signature": "@Test public void itShouldBuildComponenetPropertyTree()", "class_method_signature": "PropertyTreeBuilderTest.itShouldBuildComponenetPropertyTree()", "testcase": true, "constructor": false, "invocations": ["getProperties", "assertEquals", "toString"]}, "focal_class": {"identifier": "PropertyTreeBuilder", "superclass": "", "interfaces": "implements IPropertyTreeBuilder", "fields": [{"original_string": "private LinkedHashMap<String,LinkedHashMap<String,ArrayList<Property>>> propertyTree = new LinkedHashMap<>();", "modifier": "private", "type": "LinkedHashMap<String,LinkedHashMap<String,ArrayList<Property>>>", "declarator": "propertyTree = new LinkedHashMap<>()", "var_name": "propertyTree"}], "methods": [{"identifier": "PropertyTreeBuilder", "parameters": "()", "modifiers": "private", "return": "", "signature": " PropertyTreeBuilder()", "full_signature": "private  PropertyTreeBuilder()", "class_method_signature": "PropertyTreeBuilder.PropertyTreeBuilder()", "testcase": false, "constructor": true}, {"identifier": "PropertyTreeBuilder", "parameters": "(ArrayList<Property> properties)", "modifiers": "public", "return": "", "signature": " PropertyTreeBuilder(ArrayList<Property> properties)", "full_signature": "public  PropertyTreeBuilder(ArrayList<Property> properties)", "class_method_signature": "PropertyTreeBuilder.PropertyTreeBuilder(ArrayList<Property> properties)", "testcase": false, "constructor": true}, {"identifier": "getPropertyTree", "parameters": "()", "modifiers": "@Override public", "return": "LinkedHashMap<String, LinkedHashMap<String, ArrayList<Property>>>", "signature": "LinkedHashMap<String, LinkedHashMap<String, ArrayList<Property>>> getPropertyTree()", "full_signature": "@Override public LinkedHashMap<String, LinkedHashMap<String, ArrayList<Property>>> getPropertyTree()", "class_method_signature": "PropertyTreeBuilder.getPropertyTree()", "testcase": false, "constructor": false}, {"identifier": "getGroupNameList", "parameters": "(ArrayList<Property> properties)", "modifiers": "private", "return": "ArrayList<String>", "signature": "ArrayList<String> getGroupNameList(ArrayList<Property> properties)", "full_signature": "private ArrayList<String> getGroupNameList(ArrayList<Property> properties)", "class_method_signature": "PropertyTreeBuilder.getGroupNameList(ArrayList<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "getPropertiesByGroupName", "parameters": "(String groupName,ArrayList<Property> properties)", "modifiers": "private", "return": "ArrayList<Property>", "signature": "ArrayList<Property> getPropertiesByGroupName(String groupName,ArrayList<Property> properties)", "full_signature": "private ArrayList<Property> getPropertiesByGroupName(String groupName,ArrayList<Property> properties)", "class_method_signature": "PropertyTreeBuilder.getPropertiesByGroupName(String groupName,ArrayList<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "getPropertiesBySubGroupID", "parameters": "(String subGroupID,\n\t\t\tArrayList<Property> propertiesByGroupName)", "modifiers": "private", "return": "ArrayList<Property>", "signature": "ArrayList<Property> getPropertiesBySubGroupID(String subGroupID,\n\t\t\tArrayList<Property> propertiesByGroupName)", "full_signature": "private ArrayList<Property> getPropertiesBySubGroupID(String subGroupID,\n\t\t\tArrayList<Property> propertiesByGroupName)", "class_method_signature": "PropertyTreeBuilder.getPropertiesBySubGroupID(String subGroupID,\n\t\t\tArrayList<Property> propertiesByGroupName)", "testcase": false, "constructor": false}, {"identifier": "getPropertiesSubgroupMap", "parameters": "(ArrayList<Property> propertiesByGroupName)", "modifiers": "private", "return": "LinkedHashMap<String, ArrayList<Property>>", "signature": "LinkedHashMap<String, ArrayList<Property>> getPropertiesSubgroupMap(ArrayList<Property> propertiesByGroupName)", "full_signature": "private LinkedHashMap<String, ArrayList<Property>> getPropertiesSubgroupMap(ArrayList<Property> propertiesByGroupName)", "class_method_signature": "PropertyTreeBuilder.getPropertiesSubgroupMap(ArrayList<Property> propertiesByGroupName)", "testcase": false, "constructor": false}, {"identifier": "buildComponenetPropertyTree", "parameters": "(ArrayList<Property> properties)", "modifiers": "private", "return": "void", "signature": "void buildComponenetPropertyTree(ArrayList<Property> properties)", "full_signature": "private void buildComponenetPropertyTree(ArrayList<Property> properties)", "class_method_signature": "PropertyTreeBuilder.buildComponenetPropertyTree(ArrayList<Property> properties)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PropertyTreeBuilder.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "PropertyTreeBuilder.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "PropertyTreeBuilder.equals(Object obj)", "testcase": false, "constructor": false}], "file": "hydrograph.ui/hydrograph.ui.propertywindow/src/main/java/hydrograph/ui/propertywindow/property/PropertyTreeBuilder.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String toString() {\n\t\treturn \"PropertyTreeBuilder [propertyTree=\" + propertyTree + \"]\";\n\t}", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PropertyTreeBuilder.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 84487370, "url": "https://github.com/BitwiseInc/Hydrograph", "language": "Java", "is_fork": false, "fork_count": 104, "stargazer_count": 139, "size": 35089, "license": "licensed"}}