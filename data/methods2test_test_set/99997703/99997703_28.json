{"test_class": {"identifier": "PolynomialRootUtilsTest", "superclass": "", "interfaces": "implements UtilityClassTest", "fields": [{"original_string": "private static final double EPSILON = 0.01;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.01", "var_name": "EPSILON"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/maths/PolynomialRootUtilsTest.java"}, "test_case": {"identifier": "getMaximumNegativeRealRoot_whenUnsuitableRootsProvided_thenReturnsCorrectValue", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void getMaximumNegativeRealRoot_whenUnsuitableRootsProvided_thenReturnsCorrectValue() {\n        ImmutableList<Complex> roots = ImmutableList.of(\n                new Complex(1, 0),\n                new Complex(-1, 1),\n                new Complex(-1, -1),\n                new Complex(-53, 0)\n        );\n        Assertions.assertEquals(-53, PolynomialRootUtils.getMaximumNegativeRealRoot(roots));\n    }", "signature": "void getMaximumNegativeRealRoot_whenUnsuitableRootsProvided_thenReturnsCorrectValue()", "full_signature": "@Test void getMaximumNegativeRealRoot_whenUnsuitableRootsProvided_thenReturnsCorrectValue()", "class_method_signature": "PolynomialRootUtilsTest.getMaximumNegativeRealRoot_whenUnsuitableRootsProvided_thenReturnsCorrectValue()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "getMaximumNegativeRealRoot"]}, "focal_class": {"identifier": "PolynomialRootUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PolynomialRootUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " PolynomialRootUtils()", "full_signature": "private  PolynomialRootUtils()", "class_method_signature": "PolynomialRootUtils.PolynomialRootUtils()", "testcase": false, "constructor": true}, {"identifier": "getMinimumPositiveRealRoot", "parameters": "(ImmutableList<Complex> roots)", "modifiers": "public static", "return": "double", "signature": "double getMinimumPositiveRealRoot(ImmutableList<Complex> roots)", "full_signature": "public static double getMinimumPositiveRealRoot(ImmutableList<Complex> roots)", "class_method_signature": "PolynomialRootUtils.getMinimumPositiveRealRoot(ImmutableList<Complex> roots)", "testcase": false, "constructor": false}, {"identifier": "getMinimumPositiveRealRoot", "parameters": "(ImmutableList<Complex> roots, double epsilon)", "modifiers": "public static", "return": "double", "signature": "double getMinimumPositiveRealRoot(ImmutableList<Complex> roots, double epsilon)", "full_signature": "public static double getMinimumPositiveRealRoot(ImmutableList<Complex> roots, double epsilon)", "class_method_signature": "PolynomialRootUtils.getMinimumPositiveRealRoot(ImmutableList<Complex> roots, double epsilon)", "testcase": false, "constructor": false}, {"identifier": "getMaximumNegativeRealRoot", "parameters": "(ImmutableList<Complex> roots)", "modifiers": "public static", "return": "double", "signature": "double getMaximumNegativeRealRoot(ImmutableList<Complex> roots)", "full_signature": "public static double getMaximumNegativeRealRoot(ImmutableList<Complex> roots)", "class_method_signature": "PolynomialRootUtils.getMaximumNegativeRealRoot(ImmutableList<Complex> roots)", "testcase": false, "constructor": false}, {"identifier": "getMaximumNegativeRealRoot", "parameters": "(ImmutableList<Complex> roots, double epsilon)", "modifiers": "public static", "return": "double", "signature": "double getMaximumNegativeRealRoot(ImmutableList<Complex> roots, double epsilon)", "full_signature": "public static double getMaximumNegativeRealRoot(ImmutableList<Complex> roots, double epsilon)", "class_method_signature": "PolynomialRootUtils.getMaximumNegativeRealRoot(ImmutableList<Complex> roots, double epsilon)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/maths/PolynomialRootUtils.java"}, "focal_method": {"identifier": "getMaximumNegativeRealRoot", "parameters": "(ImmutableList<Complex> roots)", "modifiers": "public static", "return": "double", "body": "public static double getMaximumNegativeRealRoot(ImmutableList<Complex> roots) {\n        return getMaximumNegativeRealRoot(roots, 1e-9);\n    }", "signature": "double getMaximumNegativeRealRoot(ImmutableList<Complex> roots)", "full_signature": "public static double getMaximumNegativeRealRoot(ImmutableList<Complex> roots)", "class_method_signature": "PolynomialRootUtils.getMaximumNegativeRealRoot(ImmutableList<Complex> roots)", "testcase": false, "constructor": false, "invocations": ["getMaximumNegativeRealRoot"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}