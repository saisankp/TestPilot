{"test_class": {"identifier": "ObservableListTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable/testSrc/com/android/tools/idea/observable/collections/ObservableListTest.java"}, "test_case": {"identifier": "listInvalidatedForEachElementAdded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void listInvalidatedForEachElementAdded() throws Exception {\n    ObservableList<String> list = new ObservableList<>();\n    CountListener listener = new CountListener();\n    list.addListener(listener);\n\n    assertThat(listener.getCount()).isEqualTo(0);\n    list.add(\"A\");\n    list.add(\"B\");\n    list.add(\"C\");\n    assertThat(listener.getCount()).isEqualTo(3);\n  }", "signature": "void listInvalidatedForEachElementAdded()", "full_signature": "@Test public void listInvalidatedForEachElementAdded()", "class_method_signature": "ObservableListTest.listInvalidatedForEachElementAdded()", "testcase": true, "constructor": false, "invocations": ["addListener", "isEqualTo", "assertThat", "getCount", "add", "add", "add", "isEqualTo", "assertThat", "getCount"]}, "focal_class": {"identifier": "ObservableList", "superclass": "extends AbstractObservableValue<List<? extends E>>", "interfaces": "implements List<E>,\n                                                                                                   SettableValue<List<? extends E>>", "fields": [{"original_string": "@NotNull private List<E> myInnerList;", "modifier": "@NotNull private", "type": "List<E>", "declarator": "myInnerList", "var_name": "myInnerList"}, {"original_string": "private int myUpdateCount;", "modifier": "private", "type": "int", "declarator": "myUpdateCount", "var_name": "myUpdateCount"}, {"original_string": "private boolean myInvalidatedWhileUpdating;", "modifier": "private", "type": "boolean", "declarator": "myInvalidatedWhileUpdating", "var_name": "myInvalidatedWhileUpdating"}], "methods": [{"identifier": "ObservableList", "parameters": "()", "modifiers": "public", "return": "", "signature": " ObservableList()", "full_signature": "public  ObservableList()", "class_method_signature": "ObservableList.ObservableList()", "testcase": false, "constructor": true}, {"identifier": "ObservableList", "parameters": "(@NotNull Iterable<? extends E> otherCollection)", "modifiers": "public", "return": "", "signature": " ObservableList(@NotNull Iterable<? extends E> otherCollection)", "full_signature": "public  ObservableList(@NotNull Iterable<? extends E> otherCollection)", "class_method_signature": "ObservableList.ObservableList(@NotNull Iterable<? extends E> otherCollection)", "testcase": false, "constructor": true}, {"identifier": "beginUpdate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void beginUpdate()", "full_signature": "public void beginUpdate()", "class_method_signature": "ObservableList.beginUpdate()", "testcase": false, "constructor": false}, {"identifier": "endUpdate", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void endUpdate()", "full_signature": "public void endUpdate()", "class_method_signature": "ObservableList.endUpdate()", "testcase": false, "constructor": false}, {"identifier": "notifyContentsChanged", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyContentsChanged()", "full_signature": "private void notifyContentsChanged()", "class_method_signature": "ObservableList.notifyContentsChanged()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ObservableList.size()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "ObservableList.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "ObservableList.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Iterator<E>", "signature": "Iterator<E> iterator()", "full_signature": "@NotNull @Override public Iterator<E> iterator()", "class_method_signature": "ObservableList.iterator()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Object[]", "signature": "Object[] toArray()", "full_signature": "@NotNull @Override public Object[] toArray()", "class_method_signature": "ObservableList.toArray()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(T[] a)", "modifiers": "@NotNull @Override public", "return": "T[]", "signature": "T[] toArray(T[] a)", "full_signature": "@NotNull @Override public T[] toArray(T[] a)", "class_method_signature": "ObservableList.toArray(T[] a)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(E e)", "full_signature": "@Override public boolean add(E e)", "class_method_signature": "ObservableList.add(E e)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "ObservableList.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsAll(Collection<?> c)", "full_signature": "@Override public boolean containsAll(Collection<?> c)", "class_method_signature": "ObservableList.containsAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Collection<? extends E> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(Collection<? extends E> c)", "full_signature": "@Override public boolean addAll(Collection<? extends E> c)", "class_method_signature": "ObservableList.addAll(Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "setAll", "parameters": "(@NotNull Collection<? extends E> c)", "modifiers": "public", "return": "boolean", "signature": "boolean setAll(@NotNull Collection<? extends E> c)", "full_signature": "public boolean setAll(@NotNull Collection<? extends E> c)", "class_method_signature": "ObservableList.setAll(@NotNull Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(int index, Collection<? extends E> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(int index, Collection<? extends E> c)", "full_signature": "@Override public boolean addAll(int index, Collection<? extends E> c)", "class_method_signature": "ObservableList.addAll(int index, Collection<? extends E> c)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(Collection<?> c)", "full_signature": "@Override public boolean removeAll(Collection<?> c)", "class_method_signature": "ObservableList.removeAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(Collection<?> c)", "full_signature": "@Override public boolean retainAll(Collection<?> c)", "class_method_signature": "ObservableList.retainAll(Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "ObservableList.clear()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Nullable @Override public", "return": "E", "signature": "E get(int index)", "full_signature": "@Nullable @Override public E get(int index)", "class_method_signature": "ObservableList.get(int index)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, E element)", "modifiers": "@Nullable @Override public", "return": "E", "signature": "E set(int index, E element)", "full_signature": "@Nullable @Override public E set(int index, E element)", "class_method_signature": "ObservableList.set(int index, E element)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int index, E element)", "modifiers": "@Override public", "return": "void", "signature": "void add(int index, E element)", "full_signature": "@Override public void add(int index, E element)", "class_method_signature": "ObservableList.add(int index, E element)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int index)", "modifiers": "@Nullable @Override public", "return": "E", "signature": "E remove(int index)", "full_signature": "@Nullable @Override public E remove(int index)", "class_method_signature": "ObservableList.remove(int index)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(Object o)", "full_signature": "@Override public int indexOf(Object o)", "class_method_signature": "ObservableList.indexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "lastIndexOf", "parameters": "(Object o)", "modifiers": "@Override public", "return": "int", "signature": "int lastIndexOf(Object o)", "full_signature": "@Override public int lastIndexOf(Object o)", "class_method_signature": "ObservableList.lastIndexOf(Object o)", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ListIterator<E>", "signature": "ListIterator<E> listIterator()", "full_signature": "@NotNull @Override public ListIterator<E> listIterator()", "class_method_signature": "ObservableList.listIterator()", "testcase": false, "constructor": false}, {"identifier": "listIterator", "parameters": "(int index)", "modifiers": "@NotNull @Override public", "return": "ListIterator<E>", "signature": "ListIterator<E> listIterator(int index)", "full_signature": "@NotNull @Override public ListIterator<E> listIterator(int index)", "class_method_signature": "ObservableList.listIterator(int index)", "testcase": false, "constructor": false}, {"identifier": "subList", "parameters": "(int fromIndex, int toIndex)", "modifiers": "@NotNull @Override public", "return": "List<E>", "signature": "List<E> subList(int fromIndex, int toIndex)", "full_signature": "@NotNull @Override public List<E> subList(int fromIndex, int toIndex)", "class_method_signature": "ObservableList.subList(int fromIndex, int toIndex)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ObservableList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "ObservableList.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ObservableList.toString()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "List<E>", "signature": "List<E> get()", "full_signature": "@NotNull @Override public List<E> get()", "class_method_signature": "ObservableList.get()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(@NotNull List<? extends E> value)", "modifiers": "@Override public", "return": "void", "signature": "void set(@NotNull List<? extends E> value)", "full_signature": "@Override public void set(@NotNull List<? extends E> value)", "class_method_signature": "ObservableList.set(@NotNull List<? extends E> value)", "testcase": false, "constructor": false}], "file": "observable/src/com/android/tools/idea/observable/collections/ObservableList.java"}, "focal_method": {"identifier": "add", "parameters": "(E e)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean add(E e) {\n\n    boolean added = myInnerList.add(e);\n    if (added) {\n      notifyContentsChanged();\n    }\n    return added;\n  }", "signature": "boolean add(E e)", "full_signature": "@Override public boolean add(E e)", "class_method_signature": "ObservableList.add(E e)", "testcase": false, "constructor": false, "invocations": ["add", "notifyContentsChanged"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}