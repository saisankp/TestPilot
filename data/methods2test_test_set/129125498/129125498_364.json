{"test_class": {"identifier": "AnomalyControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private AnomalyController controller;", "modifier": "@InjectMocks\n    private", "type": "AnomalyController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Mock\n    private AnomalyRepository anomalyRepository;", "modifier": "@Mock\n    private", "type": "AnomalyRepository", "declarator": "anomalyRepository", "var_name": "anomalyRepository"}, {"original_string": "@Mock\n    private AnomalyRequest request;", "modifier": "@Mock\n    private", "type": "AnomalyRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private List<OutlierDetectorResult> results;", "modifier": "@Mock\n    private", "type": "List<OutlierDetectorResult>", "declarator": "results", "var_name": "results"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/web/AnomalyControllerTest.java"}, "test_case": {"identifier": "testGetAnomalies", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetAnomalies() {\n        List<OutlierDetectorResult> actualResults = controller.getAnomalies(request);\n        assertNotNull(actualResults);\n        assertSame(results, actualResults);\n    }", "signature": "void testGetAnomalies()", "full_signature": "@Test public void testGetAnomalies()", "class_method_signature": "AnomalyControllerTest.testGetAnomalies()", "testcase": true, "constructor": false, "invocations": ["getAnomalies", "assertNotNull", "assertSame"]}, "focal_class": {"identifier": "AnomalyController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AnomalyRepository anomalyRepository;", "modifier": "@Autowired\n    private", "type": "AnomalyRepository", "declarator": "anomalyRepository", "var_name": "anomalyRepository"}], "methods": [{"identifier": "getAnomalies", "parameters": "(@RequestBody AnomalyRequest request)", "modifiers": "@PostMapping(path = \"/anomalies\", consumes = \"application/json\", produces = \"application/json\") public", "return": "List<OutlierDetectorResult>", "signature": "List<OutlierDetectorResult> getAnomalies(@RequestBody AnomalyRequest request)", "full_signature": "@PostMapping(path = \"/anomalies\", consumes = \"application/json\", produces = \"application/json\") public List<OutlierDetectorResult> getAnomalies(@RequestBody AnomalyRequest request)", "class_method_signature": "AnomalyController.getAnomalies(@RequestBody AnomalyRequest request)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/web/AnomalyController.java"}, "focal_method": {"identifier": "getAnomalies", "parameters": "(@RequestBody AnomalyRequest request)", "modifiers": "@PostMapping(path = \"/anomalies\", consumes = \"application/json\", produces = \"application/json\") public", "return": "List<OutlierDetectorResult>", "body": "@PostMapping(path = \"/anomalies\", consumes = \"application/json\", produces = \"application/json\")\n    public List<OutlierDetectorResult> getAnomalies(@RequestBody AnomalyRequest request) {\n        List<OutlierDetectorResult> detectorResults = anomalyRepository.getAnomalies(request);\n        if (detectorResults == null || detectorResults.isEmpty()) {\n            // TODO: This should be RecordNotFoundException\n            throw new IllegalArgumentException(\"Invalid request: \" + request);\n        }\n        return detectorResults;\n    }", "signature": "List<OutlierDetectorResult> getAnomalies(@RequestBody AnomalyRequest request)", "full_signature": "@PostMapping(path = \"/anomalies\", consumes = \"application/json\", produces = \"application/json\") public List<OutlierDetectorResult> getAnomalies(@RequestBody AnomalyRequest request)", "class_method_signature": "AnomalyController.getAnomalies(@RequestBody AnomalyRequest request)", "testcase": false, "constructor": false, "invocations": ["getAnomalies", "isEmpty"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}