{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "log/src/test/java/org/cloudname/log/format/UtilTest.java"}, "test_case": {"identifier": "testFormatTimeSecondsSinceEpoch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormatTimeSecondsSinceEpoch() throws Exception {\n        {\n            StringBuilder buff = new StringBuilder();\n            Util.formatTimeSecondsSinceEpoch(10001L, buff);\n            assertEquals(\"10.001\", buff.toString());\n        }\n        {\n            // This is a degenerate case\n            StringBuilder buff = new StringBuilder();\n            Util.formatTimeSecondsSinceEpoch(10L, buff);\n            assertEquals(\"10\", buff.toString());\n        }\n    }", "signature": "void testFormatTimeSecondsSinceEpoch()", "full_signature": "@Test public void testFormatTimeSecondsSinceEpoch()", "class_method_signature": "UtilTest.testFormatTimeSecondsSinceEpoch()", "testcase": true, "constructor": false, "invocations": ["formatTimeSecondsSinceEpoch", "assertEquals", "toString", "formatTimeSecondsSinceEpoch", "assertEquals", "toString"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTimeFormatter isoTimeFormatter = ISODateTimeFormat\n        .dateHourMinuteSecondMillis()\n        .withZone(DateTimeZone.UTC);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "isoTimeFormatter = ISODateTimeFormat\n        .dateHourMinuteSecondMillis()\n        .withZone(DateTimeZone.UTC)", "var_name": "isoTimeFormatter"}, {"original_string": "private static final NavigableMap<Integer,String> logLevelByValue = new TreeMap<Integer,String>();", "modifier": "private static final", "type": "NavigableMap<Integer,String>", "declarator": "logLevelByValue = new TreeMap<Integer,String>()", "var_name": "logLevelByValue"}], "methods": [{"identifier": "Util", "parameters": "()", "modifiers": "private", "return": "", "signature": " Util()", "full_signature": "private  Util()", "class_method_signature": "Util.Util()", "testcase": false, "constructor": true}, {"identifier": "logLevelNameForValue", "parameters": "(int value)", "modifiers": "public static", "return": "String", "signature": "String logLevelNameForValue(int value)", "full_signature": "public static String logLevelNameForValue(int value)", "class_method_signature": "Util.logLevelNameForValue(int value)", "testcase": false, "constructor": false}, {"identifier": "formatTimeSecondsSinceEpoch", "parameters": "(final long time, StringBuilder sbuffer)", "modifiers": "public static", "return": "void", "signature": "void formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "full_signature": "public static void formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "class_method_signature": "Util.formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "testcase": false, "constructor": false}, {"identifier": "formatTimeISO", "parameters": "(long time, StringBuilder sbuffer)", "modifiers": "public static", "return": "void", "signature": "void formatTimeISO(long time, StringBuilder sbuffer)", "full_signature": "public static void formatTimeISO(long time, StringBuilder sbuffer)", "class_method_signature": "Util.formatTimeISO(long time, StringBuilder sbuffer)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String escape(String s)", "full_signature": "public static String escape(String s)", "class_method_signature": "Util.escape(String s)", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/format/Util.java"}, "focal_method": {"identifier": "formatTimeSecondsSinceEpoch", "parameters": "(final long time, StringBuilder sbuffer)", "modifiers": "public static", "return": "void", "body": "public static void formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer) {\n        String timeString = Long.toString(time);\n        int len = timeString.length();\n\n        if (len < 3) {\n            // Something wrong.  Handle it by just returning the input\n            // long as a string.  We prefer this to just crashing in the\n            // substring handling.\n            sbuffer.append(timeString);\n            return;\n        }\n\n        sbuffer.append(timeString.substring(0, len - 3));\n        sbuffer.append('.');\n        sbuffer.append(timeString.substring(len - 3));\n    }", "signature": "void formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "full_signature": "public static void formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "class_method_signature": "Util.formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "testcase": false, "constructor": false, "invocations": ["toString", "length", "append", "append", "substring", "append", "append", "substring"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}