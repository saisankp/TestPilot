{"test_class": {"identifier": "BboxTest", "superclass": "", "interfaces": "", "fields": [], "file": "coastal-hazards-portal/src/test/java/gov/usgs/cida/coastalhazards/model/BboxTest.java"}, "test_case": {"identifier": "testCopyToCRS", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopyToCRS() {\n\t\tBbox testBox = new Bbox();\n\t\ttestBox.setBbox(1, 1, 3, 2);\n\t\tBbox resultBox = Bbox.copyToCRS(testBox, \"EPSG:3857\");\n\t\tPair<Pair<Double,Double>,Pair<Double,Double>> points = Bbox.getPoints(resultBox);\n\t\tassertEquals(new Double(111319.490793), points.getLeft().getLeft());\n\t\tassertEquals(new Double(111325.142866), points.getLeft().getRight());\n\t\tassertEquals(new Double(333958.47238), points.getRight().getLeft());\n\t\tassertEquals(new Double(222684.208506), points.getRight().getRight());\n\t}", "signature": "void testCopyToCRS()", "full_signature": "@Test public void testCopyToCRS()", "class_method_signature": "BboxTest.testCopyToCRS()", "testcase": true, "constructor": false, "invocations": ["setBbox", "copyToCRS", "getPoints", "assertEquals", "getLeft", "getLeft", "assertEquals", "getRight", "getLeft", "assertEquals", "getLeft", "getRight", "assertEquals", "getRight", "getRight"]}, "focal_class": {"identifier": "Bbox", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Bbox.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Bbox.class)", "var_name": "log"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final int SRID = 4326;", "modifier": "public static final", "type": "int", "declarator": "SRID = 4326", "var_name": "SRID"}, {"original_string": "public static final String BOX_FORMAT = \"BOX(%f %f, %f %f)\";", "modifier": "public static final", "type": "String", "declarator": "BOX_FORMAT = \"BOX(%f %f, %f %f)\"", "var_name": "BOX_FORMAT"}, {"original_string": "private transient int id;", "modifier": "private transient", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private String bbox;", "modifier": "private", "type": "String", "declarator": "bbox", "var_name": "bbox"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "@Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(name = \"id\") public", "return": "int", "signature": "int getId()", "full_signature": "@Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(name = \"id\") public int getId()", "class_method_signature": "Bbox.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(int id)", "modifiers": "public", "return": "void", "signature": "void setId(int id)", "full_signature": "public void setId(int id)", "class_method_signature": "Bbox.setId(int id)", "testcase": false, "constructor": false}, {"identifier": "getBbox", "parameters": "()", "modifiers": "@Column(name = \"bbox\", columnDefinition = \"box2d\") public", "return": "String", "signature": "String getBbox()", "full_signature": "@Column(name = \"bbox\", columnDefinition = \"box2d\") public String getBbox()", "class_method_signature": "Bbox.getBbox()", "testcase": false, "constructor": false}, {"identifier": "setBbox", "parameters": "(String bbox)", "modifiers": "public", "return": "void", "signature": "void setBbox(String bbox)", "full_signature": "public void setBbox(String bbox)", "class_method_signature": "Bbox.setBbox(String bbox)", "testcase": false, "constructor": false}, {"identifier": "setBbox", "parameters": "(double minX, double minY, double maxX, double maxY)", "modifiers": "public", "return": "void", "signature": "void setBbox(double minX, double minY, double maxX, double maxY)", "full_signature": "public void setBbox(double minX, double minY, double maxX, double maxY)", "class_method_signature": "Bbox.setBbox(double minX, double minY, double maxX, double maxY)", "testcase": false, "constructor": false}, {"identifier": "makeEnvelope", "parameters": "()", "modifiers": "public", "return": "Envelope", "signature": "Envelope makeEnvelope()", "full_signature": "public Envelope makeEnvelope()", "class_method_signature": "Bbox.makeEnvelope()", "testcase": false, "constructor": false}, {"identifier": "getPoints", "parameters": "(Bbox source)", "modifiers": "public static", "return": "Pair<Pair<Double,Double>,Pair<Double,Double>>", "signature": "Pair<Pair<Double,Double>,Pair<Double,Double>> getPoints(Bbox source)", "full_signature": "public static Pair<Pair<Double,Double>,Pair<Double,Double>> getPoints(Bbox source)", "class_method_signature": "Bbox.getPoints(Bbox source)", "testcase": false, "constructor": false}, {"identifier": "copyValues", "parameters": "(Bbox from, Bbox to)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox copyValues(Bbox from, Bbox to)", "full_signature": "public static Bbox copyValues(Bbox from, Bbox to)", "class_method_signature": "Bbox.copyValues(Bbox from, Bbox to)", "testcase": false, "constructor": false}, {"identifier": "envelopeToPolygon", "parameters": "(Envelope e)", "modifiers": "public static", "return": "Polygon", "signature": "Polygon envelopeToPolygon(Envelope e)", "full_signature": "public static Polygon envelopeToPolygon(Envelope e)", "class_method_signature": "Bbox.envelopeToPolygon(Envelope e)", "testcase": false, "constructor": false}, {"identifier": "copyToSquareBox", "parameters": "(Bbox source)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox copyToSquareBox(Bbox source)", "full_signature": "public static Bbox copyToSquareBox(Bbox source)", "class_method_signature": "Bbox.copyToSquareBox(Bbox source)", "testcase": false, "constructor": false}, {"identifier": "copyToCRS", "parameters": "(Bbox source, String targetCRS)", "modifiers": "public static", "return": "Bbox", "signature": "Bbox copyToCRS(Bbox source, String targetCRS)", "full_signature": "public static Bbox copyToCRS(Bbox source, String targetCRS)", "class_method_signature": "Bbox.copyToCRS(Bbox source, String targetCRS)", "testcase": false, "constructor": false}], "file": "coastal-hazards-portal/src/main/java/gov/usgs/cida/coastalhazards/model/Bbox.java"}, "focal_method": {"identifier": "copyToCRS", "parameters": "(Bbox source, String targetCRS)", "modifiers": "public static", "return": "Bbox", "body": "public static Bbox copyToCRS(Bbox source, String targetCRS) {\n\t\tBbox newBox = copyValues(source, new Bbox());\n\t\tCoordinateReferenceSystem sourceCRS = DefaultGeographicCRS.WGS84;\n\t\tPair<Pair<Double,Double>,Pair<Double,Double>> points = getPoints(source);\n\t\t\n\t\tif(points != null) {\n\t\t\ttry {\n\t\t\t\tMathTransform transform = CRS.findMathTransform(sourceCRS, CRS.decode(targetCRS));\n\t\t\t\tDirectPosition minPoint = new DirectPosition2D(sourceCRS, points.getLeft().getLeft(), points.getLeft().getRight());\n\t\t\t\tminPoint = transform.transform(minPoint, null);\n\t\t\t\tDirectPosition maxPoint = new DirectPosition2D(sourceCRS, points.getRight().getLeft(), points.getRight().getRight());\n\t\t\t\tmaxPoint = transform.transform(maxPoint, null);\n\t\t\t\tnewBox.setBbox(minPoint.getCoordinate()[0], minPoint.getCoordinate()[1], maxPoint.getCoordinate()[0], maxPoint.getCoordinate()[1]);\n\t\t\t} catch(Exception e) {\n\t\t\t\tlog.error(\"Failed to transform BBOX points from EPSG:4326 to \" + targetCRS);\n\t\t\t\tnewBox = new Bbox();\n\t\t\t}\n\t\t\tlog.debug(\"Transformed box: \" + newBox.getBbox());\n\t\t}\n\n\t\treturn newBox;\n\t}", "signature": "Bbox copyToCRS(Bbox source, String targetCRS)", "full_signature": "public static Bbox copyToCRS(Bbox source, String targetCRS)", "class_method_signature": "Bbox.copyToCRS(Bbox source, String targetCRS)", "testcase": false, "constructor": false, "invocations": ["copyValues", "getPoints", "findMathTransform", "decode", "getLeft", "getLeft", "getRight", "getLeft", "transform", "getLeft", "getRight", "getRight", "getRight", "transform", "setBbox", "getCoordinate", "getCoordinate", "getCoordinate", "getCoordinate", "error", "debug", "getBbox"]}, "repository": {"repo_id": 6888625, "url": "https://github.com/USGS-CIDA/coastal-hazards", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 5, "size": 37212, "license": "licensed"}}