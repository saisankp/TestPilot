{"test_class": {"identifier": "LongRunningProcessClearTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ConcurrentMap<UUID, Future<?>> metadataStorage = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<UUID, Future<?>>", "declarator": "metadataStorage = new ConcurrentHashMap<>()", "var_name": "metadataStorage"}], "file": "modules/tensorflow/src/test/java/org/apache/ignite/tensorflow/core/longrunning/task/LongRunningProcessClearTaskTest.java"}, "test_case": {"identifier": "testCallProcessIsRunning", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testCallProcessIsRunning() {\n        UUID procId = UUID.randomUUID();\n\n        Future<?> fut = mock(Future.class);\n        doReturn(false).when(fut).isDone();\n        metadataStorage.put(procId, fut);\n\n        LongRunningProcessClearTask clearTask = createTask(procId);\n\n        clearTask.call();\n    }", "signature": "void testCallProcessIsRunning()", "full_signature": "@Test(expected = IllegalStateException.class) public void testCallProcessIsRunning()", "class_method_signature": "LongRunningProcessClearTaskTest.testCallProcessIsRunning()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "mock", "isDone", "when", "doReturn", "put", "createTask", "call"]}, "focal_class": {"identifier": "LongRunningProcessClearTask", "superclass": "extends LongRunningProcessTask<List<LongRunningProcessStatus>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -1840332865137076107L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1840332865137076107L", "var_name": "serialVersionUID"}, {"original_string": "private final List<UUID> procIds;", "modifier": "private final", "type": "List<UUID>", "declarator": "procIds", "var_name": "procIds"}], "methods": [{"identifier": "LongRunningProcessClearTask", "parameters": "(List<UUID> procIds)", "modifiers": "public", "return": "", "signature": " LongRunningProcessClearTask(List<UUID> procIds)", "full_signature": "public  LongRunningProcessClearTask(List<UUID> procIds)", "class_method_signature": "LongRunningProcessClearTask.LongRunningProcessClearTask(List<UUID> procIds)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "List<LongRunningProcessStatus>", "signature": "List<LongRunningProcessStatus> call()", "full_signature": "@Override public List<LongRunningProcessStatus> call()", "class_method_signature": "LongRunningProcessClearTask.call()", "testcase": false, "constructor": false}, {"identifier": "prepareProcessForRemoving", "parameters": "(UUID procId)", "modifiers": "private", "return": "LongRunningProcessStatus", "signature": "LongRunningProcessStatus prepareProcessForRemoving(UUID procId)", "full_signature": "private LongRunningProcessStatus prepareProcessForRemoving(UUID procId)", "class_method_signature": "LongRunningProcessClearTask.prepareProcessForRemoving(UUID procId)", "testcase": false, "constructor": false}, {"identifier": "removeProcessesFromMetadataStorage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeProcessesFromMetadataStorage()", "full_signature": "private void removeProcessesFromMetadataStorage()", "class_method_signature": "LongRunningProcessClearTask.removeProcessesFromMetadataStorage()", "testcase": false, "constructor": false}], "file": "modules/tensorflow/src/main/java/org/apache/ignite/tensorflow/core/longrunning/task/LongRunningProcessClearTask.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "List<LongRunningProcessStatus>", "body": "@Override public List<LongRunningProcessStatus> call() {\n        ArrayList<LongRunningProcessStatus> res = new ArrayList<>();\n\n        for (UUID prodId : procIds)\n            res.add(prepareProcessForRemoving(prodId));\n\n        // All-or-nothing strategy. Processes will be removed only if all processes can be removed.\n        removeProcessesFromMetadataStorage();\n\n        return res;\n    }", "signature": "List<LongRunningProcessStatus> call()", "full_signature": "@Override public List<LongRunningProcessStatus> call()", "class_method_signature": "LongRunningProcessClearTask.call()", "testcase": false, "constructor": false, "invocations": ["add", "prepareProcessForRemoving", "removeProcessesFromMetadataStorage"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}