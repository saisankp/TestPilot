{"test_class": {"identifier": "GetFactHandlesCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private KieSession ksession;", "modifier": "private", "type": "KieSession", "declarator": "ksession", "var_name": "ksession"}, {"original_string": "private ExecutableRunner runner;", "modifier": "private", "type": "ExecutableRunner", "declarator": "runner", "var_name": "runner"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "file": "drools-core/src/test/java/org/drools/core/command/runtime/rule/GetFactHandlesCommandTest.java"}, "test_case": {"identifier": "getOneFactHandleTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getOneFactHandleTest() { \n        String randomFact = \"\" + random.nextLong();\n        ksession.insert(randomFact);\n        GetFactHandlesCommand command = new GetFactHandlesCommand();\n        Object result = runner.execute(command, context);\n        \n        verifyThatCollectionContains1FactHandleWithThisFact(randomFact, result);\n    }", "signature": "void getOneFactHandleTest()", "full_signature": "@Test public void getOneFactHandleTest()", "class_method_signature": "GetFactHandlesCommandTest.getOneFactHandleTest()", "testcase": true, "constructor": false, "invocations": ["nextLong", "insert", "execute", "verifyThatCollectionContains1FactHandleWithThisFact"]}, "focal_class": {"identifier": "GetFactHandlesCommand", "superclass": "", "interfaces": "implements\n    ExecutableCommand<Collection<FactHandle>>", "fields": [{"original_string": "private transient ObjectFilter filter = null;", "modifier": "private transient", "type": "ObjectFilter", "declarator": "filter = null", "var_name": "filter"}, {"original_string": "@XmlAttribute\n    private boolean disconnected = false;", "modifier": "@XmlAttribute\n    private", "type": "boolean", "declarator": "disconnected = false", "var_name": "disconnected"}, {"original_string": "@XmlAttribute(name=\"out-identifier\")\n    private String  outIdentifier;", "modifier": "@XmlAttribute(name=\"out-identifier\")\n    private", "type": "String", "declarator": "outIdentifier", "var_name": "outIdentifier"}], "methods": [{"identifier": "GetFactHandlesCommand", "parameters": "()", "modifiers": "public", "return": "", "signature": " GetFactHandlesCommand()", "full_signature": "public  GetFactHandlesCommand()", "class_method_signature": "GetFactHandlesCommand.GetFactHandlesCommand()", "testcase": false, "constructor": true}, {"identifier": "GetFactHandlesCommand", "parameters": "(ObjectFilter filter)", "modifiers": "public", "return": "", "signature": " GetFactHandlesCommand(ObjectFilter filter)", "full_signature": "public  GetFactHandlesCommand(ObjectFilter filter)", "class_method_signature": "GetFactHandlesCommand.GetFactHandlesCommand(ObjectFilter filter)", "testcase": false, "constructor": true}, {"identifier": "GetFactHandlesCommand", "parameters": "(ObjectFilter filter, boolean disconnected)", "modifiers": "public", "return": "", "signature": " GetFactHandlesCommand(ObjectFilter filter, boolean disconnected)", "full_signature": "public  GetFactHandlesCommand(ObjectFilter filter, boolean disconnected)", "class_method_signature": "GetFactHandlesCommand.GetFactHandlesCommand(ObjectFilter filter, boolean disconnected)", "testcase": false, "constructor": true}, {"identifier": "GetFactHandlesCommand", "parameters": "(boolean disconnected)", "modifiers": "public", "return": "", "signature": " GetFactHandlesCommand(boolean disconnected)", "full_signature": "public  GetFactHandlesCommand(boolean disconnected)", "class_method_signature": "GetFactHandlesCommand.GetFactHandlesCommand(boolean disconnected)", "testcase": false, "constructor": true}, {"identifier": "isDisconnected", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDisconnected()", "full_signature": "public boolean isDisconnected()", "class_method_signature": "GetFactHandlesCommand.isDisconnected()", "testcase": false, "constructor": false}, {"identifier": "setDisconnected", "parameters": "( boolean disconnected )", "modifiers": "public", "return": "void", "signature": "void setDisconnected( boolean disconnected )", "full_signature": "public void setDisconnected( boolean disconnected )", "class_method_signature": "GetFactHandlesCommand.setDisconnected( boolean disconnected )", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "( Context context )", "modifiers": "public", "return": "Collection<FactHandle>", "signature": "Collection<FactHandle> execute( Context context )", "full_signature": "public Collection<FactHandle> execute( Context context )", "class_method_signature": "GetFactHandlesCommand.execute( Context context )", "testcase": false, "constructor": false}, {"identifier": "getOutIdentifier", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOutIdentifier()", "full_signature": "public String getOutIdentifier()", "class_method_signature": "GetFactHandlesCommand.getOutIdentifier()", "testcase": false, "constructor": false}, {"identifier": "setOutIdentifier", "parameters": "(String outIdentifier)", "modifiers": "public", "return": "void", "signature": "void setOutIdentifier(String outIdentifier)", "full_signature": "public void setOutIdentifier(String outIdentifier)", "class_method_signature": "GetFactHandlesCommand.setOutIdentifier(String outIdentifier)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "GetFactHandlesCommand.toString()", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/command/runtime/rule/GetFactHandlesCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "( Context context )", "modifiers": "public", "return": "Collection<FactHandle>", "body": "public Collection<FactHandle> execute( Context context ) {\n        KieSession ksession = ((RegistryContext) context).lookup( KieSession.class );\n        Collection<FactHandle> disconnectedFactHandles = new ArrayList<FactHandle>();\n        if ( filter != null ) {\n            Collection<InternalFactHandle> factHandles = ksession.getFactHandles( this.filter );\n            if(factHandles != null && disconnected){\n                for(InternalFactHandle factHandle: factHandles){\n                    InternalFactHandle handle = factHandle.clone();\n                    handle.disconnect();\n                    disconnectedFactHandles.add(handle);\n                }\n                if (outIdentifier != null) {\n                    ((RegistryContext) context).lookup( ExecutionResultImpl.class ).setResult( this.outIdentifier, disconnectedFactHandles );\n                }\n                return disconnectedFactHandles;\n            }\n            else {\n\n                Collection<FactHandle> ksessionFactHandles = ksession.getFactHandles( this.filter );\n                if (outIdentifier != null) {\n                    ((RegistryContext) context).lookup( ExecutionResultImpl.class ).setResult(this.outIdentifier, new ArrayList<FactHandle>(ksessionFactHandles));\n                }\n                return ksessionFactHandles;\n            }\n        } else {\n            Collection<InternalFactHandle> factHandles = ksession.getFactHandles( );\n            if(factHandles != null && disconnected){\n                for(InternalFactHandle factHandle: factHandles){\n                    InternalFactHandle handle = factHandle.clone();\n                    handle.disconnect();\n                    disconnectedFactHandles.add(handle);\n                }\n                if (outIdentifier != null) {\n                    ((RegistryContext) context).lookup( ExecutionResultImpl.class ).setResult(this.outIdentifier, disconnectedFactHandles);\n                }\n                return disconnectedFactHandles;\n            }\n            else {\n                Collection<FactHandle> ksessionFactHandles =  ksession.getFactHandles();\n                if (outIdentifier != null) {\n                    ((RegistryContext) context).lookup( ExecutionResultImpl.class ).setResult(this.outIdentifier, new ArrayList<FactHandle>(ksessionFactHandles));\n                }\n                return ksessionFactHandles;\n            }\n        }\n    }", "signature": "Collection<FactHandle> execute( Context context )", "full_signature": "public Collection<FactHandle> execute( Context context )", "class_method_signature": "GetFactHandlesCommand.execute( Context context )", "testcase": false, "constructor": false, "invocations": ["lookup", "getFactHandles", "clone", "disconnect", "add", "setResult", "lookup", "getFactHandles", "setResult", "lookup", "getFactHandles", "clone", "disconnect", "add", "setResult", "lookup", "getFactHandles", "setResult", "lookup"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}