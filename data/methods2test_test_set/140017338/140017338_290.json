{"test_class": {"identifier": "AntennaComplianceToolTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "@Rule\n    public final ExpectedSystemExit exit = ExpectedSystemExit.none();", "modifier": "@Rule\n    public final", "type": "ExpectedSystemExit", "declarator": "exit = ExpectedSystemExit.none()", "var_name": "exit"}], "file": "assembly/compliance-tool/src/test/java/org/eclipse/sw360/antenna/frontend/compliancetool/main/AntennaComplianceToolTest.java"}, "test_case": {"identifier": "testMainFailsWithNonExistentComplianceToolArgs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMainFailsWithNonExistentComplianceToolArgs() throws IOException {\n        exit.expectSystemExitWithStatus(1);\n        File testFile = folder.newFile(\"test\");\n        AntennaComplianceTool.main(new String[]{\"non-existent-option\", testFile.getAbsolutePath()});\n    }", "signature": "void testMainFailsWithNonExistentComplianceToolArgs()", "full_signature": "@Test public void testMainFailsWithNonExistentComplianceToolArgs()", "class_method_signature": "AntennaComplianceToolTest.testMainFailsWithNonExistentComplianceToolArgs()", "testcase": true, "constructor": false, "invocations": ["expectSystemExitWithStatus", "newFile", "main", "getAbsolutePath"]}, "focal_class": {"identifier": "AntennaComplianceTool", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AntennaComplianceTool.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AntennaComplianceTool.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AntennaComplianceTool.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String mode, Set<String> parameters, Path propertiesFile)", "modifiers": "private", "return": "int", "signature": "int execute(String mode, Set<String> parameters, Path propertiesFile)", "full_signature": "private int execute(String mode, Set<String> parameters, Path propertiesFile)", "class_method_signature": "AntennaComplianceTool.execute(String mode, Set<String> parameters, Path propertiesFile)", "testcase": false, "constructor": false}, {"identifier": "createExporter", "parameters": "(Path propertiesFile)", "modifiers": "private", "return": "SW360Exporter", "signature": "SW360Exporter createExporter(Path propertiesFile)", "full_signature": "private SW360Exporter createExporter(Path propertiesFile)", "class_method_signature": "AntennaComplianceTool.createExporter(Path propertiesFile)", "testcase": false, "constructor": false}, {"identifier": "createUpdater", "parameters": "(Path propertiesFile)", "modifiers": "private", "return": "SW360Updater", "signature": "SW360Updater createUpdater(Path propertiesFile)", "full_signature": "private SW360Updater createUpdater(Path propertiesFile)", "class_method_signature": "AntennaComplianceTool.createUpdater(Path propertiesFile)", "testcase": false, "constructor": false}, {"identifier": "createStatusReporter", "parameters": "(Path propertiesFile, Set<String> parameters)", "modifiers": "private", "return": "SW360StatusReporter", "signature": "SW360StatusReporter createStatusReporter(Path propertiesFile, Set<String> parameters)", "full_signature": "private SW360StatusReporter createStatusReporter(Path propertiesFile, Set<String> parameters)", "class_method_signature": "AntennaComplianceTool.createStatusReporter(Path propertiesFile, Set<String> parameters)", "testcase": false, "constructor": false}, {"identifier": "enableDebugLogging", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void enableDebugLogging()", "full_signature": "private static void enableDebugLogging()", "class_method_signature": "AntennaComplianceTool.enableDebugLogging()", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printUsage()", "full_signature": "private static void printUsage()", "class_method_signature": "AntennaComplianceTool.printUsage()", "testcase": false, "constructor": false}], "file": "assembly/compliance-tool/src/main/java/org/eclipse/sw360/antenna/frontend/compliancetool/main/AntennaComplianceTool.java"}, "focal_method": {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "body": "public static void main(String[] args) {\n        AntennaComplianceToolOptions options = AntennaComplianceToolOptions.parse(args);\n        if (options.isShowHelp()) {\n            printUsage();\n            System.exit(1);\n        }\n\n        if (options.isDebugLog()) {\n            enableDebugLogging();\n        }\n        try {\n            Path propertiesFile = Paths.get(options.getPropertiesFilePath()).toAbsolutePath();\n\n            if (!propertiesFile.toFile().exists()) {\n                LOGGER.error(\"Cannot find {}\", propertiesFile);\n                throw new IllegalArgumentException(\"Cannot find \" + propertiesFile);\n            }\n\n            LOGGER.info(\"Starting Compliance Tool with mode '{}'\", options.getComplianceMode());\n\n            System.exit(new AntennaComplianceTool().execute(options.getComplianceMode(), options.getParameters(), propertiesFile));\n        } catch (Exception e) {\n            LOGGER.error(\"Error:\", e);\n            System.exit(1);\n        }\n    }", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "AntennaComplianceTool.main(String[] args)", "testcase": false, "constructor": false, "invocations": ["parse", "isShowHelp", "printUsage", "exit", "isDebugLog", "enableDebugLogging", "toAbsolutePath", "get", "getPropertiesFilePath", "exists", "toFile", "error", "info", "getComplianceMode", "exit", "execute", "getComplianceMode", "getParameters", "error", "exit"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}