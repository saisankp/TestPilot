{"test_class": {"identifier": "SegmentRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<String> TABLES = ImmutableSet.of(\"table1\");", "modifier": "private static final", "type": "Set<String>", "declarator": "TABLES = ImmutableSet.of(\"table1\")", "var_name": "TABLES"}, {"original_string": "private static final Set<String> COORDS = Collections.singleton(\"\");", "modifier": "private static final", "type": "Set<String>", "declarator": "COORDS = Collections.singleton(\"\")", "var_name": "COORDS"}], "file": "src/server/src/test/java/io/cassandrareaper/service/SegmentRunnerTest.java"}, "test_case": {"identifier": "isItOkToRepairTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void isItOkToRepairTest() {\n    assertFalse(SegmentRunner.okToRepairSegment(false, true, DatacenterAvailability.ALL));\n    assertFalse(SegmentRunner.okToRepairSegment(false, false, DatacenterAvailability.ALL));\n    assertTrue(SegmentRunner.okToRepairSegment(true, true, DatacenterAvailability.ALL));\n\n    assertTrue(SegmentRunner.okToRepairSegment(false, true, DatacenterAvailability.LOCAL));\n    assertFalse(SegmentRunner.okToRepairSegment(false, false, DatacenterAvailability.LOCAL));\n    assertTrue(SegmentRunner.okToRepairSegment(true, true, DatacenterAvailability.LOCAL));\n\n    assertFalse(SegmentRunner.okToRepairSegment(false, true, DatacenterAvailability.EACH));\n    assertFalse(SegmentRunner.okToRepairSegment(false, false, DatacenterAvailability.EACH));\n    assertTrue(SegmentRunner.okToRepairSegment(true, true, DatacenterAvailability.EACH));\n  }", "signature": "void isItOkToRepairTest()", "full_signature": "@Test public void isItOkToRepairTest()", "class_method_signature": "SegmentRunnerTest.isItOkToRepairTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "okToRepairSegment", "assertFalse", "okToRepairSegment", "assertTrue", "okToRepairSegment", "assertTrue", "okToRepairSegment", "assertFalse", "okToRepairSegment", "assertTrue", "okToRepairSegment", "assertFalse", "okToRepairSegment", "assertFalse", "okToRepairSegment", "assertTrue", "okToRepairSegment"]}, "focal_class": {"identifier": "SegmentRunner", "superclass": "", "interfaces": "implements RepairStatusHandler, Runnable", "fields": [{"original_string": "static final Map<UUID, SegmentRunner> SEGMENT_RUNNERS = Maps.newConcurrentMap();", "modifier": "static final", "type": "Map<UUID, SegmentRunner>", "declarator": "SEGMENT_RUNNERS = Maps.newConcurrentMap()", "var_name": "SEGMENT_RUNNERS"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SegmentRunner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SegmentRunner.class)", "var_name": "LOG"}, {"original_string": "private static final int MAX_TIMEOUT_EXTENSIONS = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_TIMEOUT_EXTENSIONS = 10", "var_name": "MAX_TIMEOUT_EXTENSIONS"}, {"original_string": "private static final int LOCK_DURATION = 30;", "modifier": "private static final", "type": "int", "declarator": "LOCK_DURATION = 30", "var_name": "LOCK_DURATION"}, {"original_string": "private static final Pattern REPAIR_UUID_PATTERN\n      = Pattern.compile(\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\");", "modifier": "private static final", "type": "Pattern", "declarator": "REPAIR_UUID_PATTERN\n      = Pattern.compile(\"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\")", "var_name": "REPAIR_UUID_PATTERN"}, {"original_string": "private static final long SLEEP_TIME_AFTER_POSTPONE_IN_MS\n      = Integer.getInteger(SegmentRunner.class.getName() + \".sleep_time_after_postpone_in_ms\", 10000);", "modifier": "private static final", "type": "long", "declarator": "SLEEP_TIME_AFTER_POSTPONE_IN_MS\n      = Integer.getInteger(SegmentRunner.class.getName() + \".sleep_time_after_postpone_in_ms\", 10000)", "var_name": "SLEEP_TIME_AFTER_POSTPONE_IN_MS"}, {"original_string": "private static final ExecutorService METRICS_GRABBER_EXECUTOR = Executors.newFixedThreadPool(10);", "modifier": "private static final", "type": "ExecutorService", "declarator": "METRICS_GRABBER_EXECUTOR = Executors.newFixedThreadPool(10)", "var_name": "METRICS_GRABBER_EXECUTOR"}, {"original_string": "private static final long METRICS_POLL_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5);", "modifier": "private static final", "type": "long", "declarator": "METRICS_POLL_INTERVAL_MS = TimeUnit.SECONDS.toMillis(5)", "var_name": "METRICS_POLL_INTERVAL_MS"}, {"original_string": "private static final long METRICS_MAX_WAIT_MS = TimeUnit.MINUTES.toMillis(2);", "modifier": "private static final", "type": "long", "declarator": "METRICS_MAX_WAIT_MS = TimeUnit.MINUTES.toMillis(2)", "var_name": "METRICS_MAX_WAIT_MS"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final UUID segmentId;", "modifier": "private final", "type": "UUID", "declarator": "segmentId", "var_name": "segmentId"}, {"original_string": "private final Condition condition = new SimpleCondition();", "modifier": "private final", "type": "Condition", "declarator": "condition = new SimpleCondition()", "var_name": "condition"}, {"original_string": "private final Collection<String> potentialCoordinators;", "modifier": "private final", "type": "Collection<String>", "declarator": "potentialCoordinators", "var_name": "potentialCoordinators"}, {"original_string": "private final long timeoutMillis;", "modifier": "private final", "type": "long", "declarator": "timeoutMillis", "var_name": "timeoutMillis"}, {"original_string": "private final double intensity;", "modifier": "private final", "type": "double", "declarator": "intensity", "var_name": "intensity"}, {"original_string": "private final RepairParallelism validationParallelism;", "modifier": "private final", "type": "RepairParallelism", "declarator": "validationParallelism", "var_name": "validationParallelism"}, {"original_string": "private final String clusterName;", "modifier": "private final", "type": "String", "declarator": "clusterName", "var_name": "clusterName"}, {"original_string": "private final RepairRunner repairRunner;", "modifier": "private final", "type": "RepairRunner", "declarator": "repairRunner", "var_name": "repairRunner"}, {"original_string": "private final RepairUnit repairUnit;", "modifier": "private final", "type": "RepairUnit", "declarator": "repairUnit", "var_name": "repairUnit"}, {"original_string": "private volatile int repairNo;", "modifier": "private volatile", "type": "int", "declarator": "repairNo", "var_name": "repairNo"}, {"original_string": "private final AtomicBoolean segmentFailed;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "segmentFailed", "var_name": "segmentFailed"}, {"original_string": "private final UUID leaderElectionId;", "modifier": "private final", "type": "UUID", "declarator": "leaderElectionId", "var_name": "leaderElectionId"}, {"original_string": "private final AtomicBoolean successOrFailedNotified = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "successOrFailedNotified = new AtomicBoolean(false)", "var_name": "successOrFailedNotified"}, {"original_string": "private final AtomicBoolean completeNotified = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "completeNotified = new AtomicBoolean(false)", "var_name": "completeNotified"}, {"original_string": "private final ClusterFacade clusterFacade;", "modifier": "private final", "type": "ClusterFacade", "declarator": "clusterFacade", "var_name": "clusterFacade"}, {"original_string": "private final Set<String> tablesToRepair;", "modifier": "private final", "type": "Set<String>", "declarator": "tablesToRepair", "var_name": "tablesToRepair"}, {"original_string": "private final AtomicBoolean releasedSegmentRunner = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "releasedSegmentRunner = new AtomicBoolean(false)", "var_name": "releasedSegmentRunner"}], "methods": [{"identifier": "SegmentRunner", "parameters": "(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "modifiers": "private", "return": "", "signature": " SegmentRunner(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "full_signature": "private  SegmentRunner(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "class_method_signature": "SegmentRunner.SegmentRunner(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "modifiers": "public static", "return": "SegmentRunner", "signature": "SegmentRunner create(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "full_signature": "public static SegmentRunner create(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "class_method_signature": "SegmentRunner.create(\n      AppContext context,\n      ClusterFacade clusterFacade,\n      UUID segmentId,\n      Collection<String> potentialCoordinators,\n      long timeoutMillis,\n      double intensity,\n      RepairParallelism validationParallelism,\n      String clusterName,\n      RepairUnit repairUnit,\n      Set<String> tablesToRepair,\n      RepairRunner repairRunner)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "SegmentRunner.run()", "testcase": false, "constructor": false}, {"identifier": "postponeSegment", "parameters": "(AppContext context, RepairSegment segment)", "modifiers": "static", "return": "void", "signature": "void postponeSegment(AppContext context, RepairSegment segment)", "full_signature": "static void postponeSegment(AppContext context, RepairSegment segment)", "class_method_signature": "SegmentRunner.postponeSegment(AppContext context, RepairSegment segment)", "testcase": false, "constructor": false}, {"identifier": "postpone", "parameters": "(AppContext context, RepairSegment segment, RepairUnit repairUnit)", "modifiers": "private static", "return": "void", "signature": "void postpone(AppContext context, RepairSegment segment, RepairUnit repairUnit)", "full_signature": "private static void postpone(AppContext context, RepairSegment segment, RepairUnit repairUnit)", "class_method_signature": "SegmentRunner.postpone(AppContext context, RepairSegment segment, RepairUnit repairUnit)", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "(AppContext context, RepairSegment segment, JmxProxy jmxConnection)", "modifiers": "static", "return": "void", "signature": "void abort(AppContext context, RepairSegment segment, JmxProxy jmxConnection)", "full_signature": "static void abort(AppContext context, RepairSegment segment, JmxProxy jmxConnection)", "class_method_signature": "SegmentRunner.abort(AppContext context, RepairSegment segment, JmxProxy jmxConnection)", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "(RepairSegment segment, JmxProxy jmxConnection)", "modifiers": "private", "return": "void", "signature": "void abort(RepairSegment segment, JmxProxy jmxConnection)", "full_signature": "private void abort(RepairSegment segment, JmxProxy jmxConnection)", "class_method_signature": "SegmentRunner.abort(RepairSegment segment, JmxProxy jmxConnection)", "testcase": false, "constructor": false}, {"identifier": "postponeCurrentSegment", "parameters": "()", "modifiers": "", "return": "void", "signature": "void postponeCurrentSegment()", "full_signature": " void postponeCurrentSegment()", "class_method_signature": "SegmentRunner.postponeCurrentSegment()", "testcase": false, "constructor": false}, {"identifier": "getOpenFilesAmount", "parameters": "()", "modifiers": "private static", "return": "long", "signature": "long getOpenFilesAmount()", "full_signature": "private static long getOpenFilesAmount()", "class_method_signature": "SegmentRunner.getOpenFilesAmount()", "testcase": false, "constructor": false}, {"identifier": "runRepair", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean runRepair()", "full_signature": "private boolean runRepair()", "class_method_signature": "SegmentRunner.runRepair()", "testcase": false, "constructor": false}, {"identifier": "processTriggeredSegment", "parameters": "(final RepairSegment segment, final JmxProxy coordinator, int repairNo)", "modifiers": "private", "return": "void", "signature": "void processTriggeredSegment(final RepairSegment segment, final JmxProxy coordinator, int repairNo)", "full_signature": "private void processTriggeredSegment(final RepairSegment segment, final JmxProxy coordinator, int repairNo)", "class_method_signature": "SegmentRunner.processTriggeredSegment(final RepairSegment segment, final JmxProxy coordinator, int repairNo)", "testcase": false, "constructor": false}, {"identifier": "metricNameForPostpone", "parameters": "(RepairUnit unit, RepairSegment segment)", "modifiers": "private static", "return": "String", "signature": "String metricNameForPostpone(RepairUnit unit, RepairSegment segment)", "full_signature": "private static String metricNameForPostpone(RepairUnit unit, RepairSegment segment)", "class_method_signature": "SegmentRunner.metricNameForPostpone(RepairUnit unit, RepairSegment segment)", "testcase": false, "constructor": false}, {"identifier": "metricNameForRepairing", "parameters": "(RepairSegment rs)", "modifiers": "private", "return": "String", "signature": "String metricNameForRepairing(RepairSegment rs)", "full_signature": "private String metricNameForRepairing(RepairSegment rs)", "class_method_signature": "SegmentRunner.metricNameForRepairing(RepairSegment rs)", "testcase": false, "constructor": false}, {"identifier": "metricNameForRunRepair", "parameters": "(RepairSegment rs)", "modifiers": "private", "return": "String", "signature": "String metricNameForRunRepair(RepairSegment rs)", "full_signature": "private String metricNameForRunRepair(RepairSegment rs)", "class_method_signature": "SegmentRunner.metricNameForRunRepair(RepairSegment rs)", "testcase": false, "constructor": false}, {"identifier": "canRepair", "parameters": "(\n      RepairSegment segment,\n      String keyspace,\n      JmxProxy coordinator,\n      Cluster cluster,\n      LazyInitializer<Set<String>> busyHosts)", "modifiers": "", "return": "boolean", "signature": "boolean canRepair(\n      RepairSegment segment,\n      String keyspace,\n      JmxProxy coordinator,\n      Cluster cluster,\n      LazyInitializer<Set<String>> busyHosts)", "full_signature": " boolean canRepair(\n      RepairSegment segment,\n      String keyspace,\n      JmxProxy coordinator,\n      Cluster cluster,\n      LazyInitializer<Set<String>> busyHosts)", "class_method_signature": "SegmentRunner.canRepair(\n      RepairSegment segment,\n      String keyspace,\n      JmxProxy coordinator,\n      Cluster cluster,\n      LazyInitializer<Set<String>> busyHosts)", "testcase": false, "constructor": false}, {"identifier": "okToRepairSegment", "parameters": "(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "modifiers": "static", "return": "boolean", "signature": "boolean okToRepairSegment(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "full_signature": "static boolean okToRepairSegment(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "class_method_signature": "SegmentRunner.okToRepairSegment(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "testcase": false, "constructor": false}, {"identifier": "handlePotentialStuckRepairs", "parameters": "(LazyInitializer<Set<String>> busyHosts, String hostName)", "modifiers": "private", "return": "void", "signature": "void handlePotentialStuckRepairs(LazyInitializer<Set<String>> busyHosts, String hostName)", "full_signature": "private void handlePotentialStuckRepairs(LazyInitializer<Set<String>> busyHosts, String hostName)", "class_method_signature": "SegmentRunner.handlePotentialStuckRepairs(LazyInitializer<Set<String>> busyHosts, String hostName)", "testcase": false, "constructor": false}, {"identifier": "getNodeMetrics", "parameters": "(String node, String localDc, String nodeDc)", "modifiers": "", "return": "Pair<String, Callable<Optional<NodeMetrics>>>", "signature": "Pair<String, Callable<Optional<NodeMetrics>>> getNodeMetrics(String node, String localDc, String nodeDc)", "full_signature": " Pair<String, Callable<Optional<NodeMetrics>>> getNodeMetrics(String node, String localDc, String nodeDc)", "class_method_signature": "SegmentRunner.getNodeMetrics(String node, String localDc, String nodeDc)", "testcase": false, "constructor": false}, {"identifier": "maybeGetRemoteNodeMetrics", "parameters": "(String node, String nodeDc)", "modifiers": "private", "return": "Optional<NodeMetrics>", "signature": "Optional<NodeMetrics> maybeGetRemoteNodeMetrics(String node, String nodeDc)", "full_signature": "private Optional<NodeMetrics> maybeGetRemoteNodeMetrics(String node, String nodeDc)", "class_method_signature": "SegmentRunner.maybeGetRemoteNodeMetrics(String node, String nodeDc)", "testcase": false, "constructor": false}, {"identifier": "getRemoteNodeMetrics", "parameters": "(String node, String nodeDc)", "modifiers": "private", "return": "Optional<NodeMetrics>", "signature": "Optional<NodeMetrics> getRemoteNodeMetrics(String node, String nodeDc)", "full_signature": "private Optional<NodeMetrics> getRemoteNodeMetrics(String node, String nodeDc)", "class_method_signature": "SegmentRunner.getRemoteNodeMetrics(String node, String nodeDc)", "testcase": false, "constructor": false}, {"identifier": "nodesReadyForNewRepair", "parameters": "(\n      JmxProxy coordinator,\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      LazyInitializer<Set<String>> busyHosts)", "modifiers": "private", "return": "boolean", "signature": "boolean nodesReadyForNewRepair(\n      JmxProxy coordinator,\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      LazyInitializer<Set<String>> busyHosts)", "full_signature": "private boolean nodesReadyForNewRepair(\n      JmxProxy coordinator,\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      LazyInitializer<Set<String>> busyHosts)", "class_method_signature": "SegmentRunner.nodesReadyForNewRepair(\n      JmxProxy coordinator,\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      LazyInitializer<Set<String>> busyHosts)", "testcase": false, "constructor": false}, {"identifier": "isRepairRunningOnNodes", "parameters": "(\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      String keyspace,\n      Cluster cluster)", "modifiers": "private", "return": "boolean", "signature": "boolean isRepairRunningOnNodes(\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      String keyspace,\n      Cluster cluster)", "full_signature": "private boolean isRepairRunningOnNodes(\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      String keyspace,\n      Cluster cluster)", "class_method_signature": "SegmentRunner.isRepairRunningOnNodes(\n      RepairSegment segment,\n      Map<String, String> dcByNode,\n      String keyspace,\n      Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "getNodesInvolvedInSegment", "parameters": "(Map<String, String> dcByNode)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> getNodesInvolvedInSegment(Map<String, String> dcByNode)", "full_signature": "private Collection<String> getNodesInvolvedInSegment(Map<String, String> dcByNode)", "class_method_signature": "SegmentRunner.getNodesInvolvedInSegment(Map<String, String> dcByNode)", "testcase": false, "constructor": false}, {"identifier": "hasReplicaInNodes", "parameters": "(\n      Cluster cluster,\n      String keyspace,\n      RepairSegment segment,\n      Collection<String> nodes)", "modifiers": "private", "return": "boolean", "signature": "boolean hasReplicaInNodes(\n      Cluster cluster,\n      String keyspace,\n      RepairSegment segment,\n      Collection<String> nodes)", "full_signature": "private boolean hasReplicaInNodes(\n      Cluster cluster,\n      String keyspace,\n      RepairSegment segment,\n      Collection<String> nodes)", "class_method_signature": "SegmentRunner.hasReplicaInNodes(\n      Cluster cluster,\n      String keyspace,\n      RepairSegment segment,\n      Collection<String> nodes)", "testcase": false, "constructor": false}, {"identifier": "getDCsByNodeForRepairSegment", "parameters": "(\n      JmxProxy coordinator,\n      Cluster cluster,\n      RepairSegment segment,\n      String keyspace)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getDCsByNodeForRepairSegment(\n      JmxProxy coordinator,\n      Cluster cluster,\n      RepairSegment segment,\n      String keyspace)", "full_signature": "private Map<String, String> getDCsByNodeForRepairSegment(\n      JmxProxy coordinator,\n      Cluster cluster,\n      RepairSegment segment,\n      String keyspace)", "class_method_signature": "SegmentRunner.getDCsByNodeForRepairSegment(\n      JmxProxy coordinator,\n      Cluster cluster,\n      RepairSegment segment,\n      String keyspace)", "testcase": false, "constructor": false}, {"identifier": "storeNodeMetrics", "parameters": "(NodeMetrics metrics)", "modifiers": "private", "return": "void", "signature": "void storeNodeMetrics(NodeMetrics metrics)", "full_signature": "private void storeNodeMetrics(NodeMetrics metrics)", "class_method_signature": "SegmentRunner.storeNodeMetrics(NodeMetrics metrics)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(\n      int repairNo,\n      Optional<ActiveRepairService.Status> status,\n      Optional<ProgressEventType> progress,\n      String message,\n      JmxProxy jmxProxy)", "modifiers": "@Override public", "return": "void", "signature": "void handle(\n      int repairNo,\n      Optional<ActiveRepairService.Status> status,\n      Optional<ProgressEventType> progress,\n      String message,\n      JmxProxy jmxProxy)", "full_signature": "@Override public void handle(\n      int repairNo,\n      Optional<ActiveRepairService.Status> status,\n      Optional<ProgressEventType> progress,\n      String message,\n      JmxProxy jmxProxy)", "class_method_signature": "SegmentRunner.handle(\n      int repairNo,\n      Optional<ActiveRepairService.Status> status,\n      Optional<ProgressEventType> progress,\n      String message,\n      JmxProxy jmxProxy)", "testcase": false, "constructor": false}, {"identifier": "handleJmxNotificationForCassandra22", "parameters": "(\n      Optional<ProgressEventType> progress,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      JmxProxy jmxProxy)", "modifiers": "private", "return": "boolean", "signature": "boolean handleJmxNotificationForCassandra22(\n      Optional<ProgressEventType> progress,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      JmxProxy jmxProxy)", "full_signature": "private boolean handleJmxNotificationForCassandra22(\n      Optional<ProgressEventType> progress,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      JmxProxy jmxProxy)", "class_method_signature": "SegmentRunner.handleJmxNotificationForCassandra22(\n      Optional<ProgressEventType> progress,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      JmxProxy jmxProxy)", "testcase": false, "constructor": false}, {"identifier": "handleJmxNotificationForCassandra21", "parameters": "(\n      Optional<ActiveRepairService.Status> status,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      Optional<ProgressEventType> progress,\n      JmxProxy jmxProxy)", "modifiers": "private", "return": "boolean", "signature": "boolean handleJmxNotificationForCassandra21(\n      Optional<ActiveRepairService.Status> status,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      Optional<ProgressEventType> progress,\n      JmxProxy jmxProxy)", "full_signature": "private boolean handleJmxNotificationForCassandra21(\n      Optional<ActiveRepairService.Status> status,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      Optional<ProgressEventType> progress,\n      JmxProxy jmxProxy)", "class_method_signature": "SegmentRunner.handleJmxNotificationForCassandra21(\n      Optional<ActiveRepairService.Status> status,\n      RepairSegment currentSegment,\n      int repairNumber,\n      boolean failOutsideSynchronizedBlock,\n      Optional<ProgressEventType> progress,\n      JmxProxy jmxProxy)", "testcase": false, "constructor": false}, {"identifier": "tryClearSnapshots", "parameters": "(String message)", "modifiers": "", "return": "void", "signature": "void tryClearSnapshots(String message)", "full_signature": " void tryClearSnapshots(String message)", "class_method_signature": "SegmentRunner.tryClearSnapshots(String message)", "testcase": false, "constructor": false}, {"identifier": "parseRepairId", "parameters": "(String message)", "modifiers": "static", "return": "String", "signature": "String parseRepairId(String message)", "full_signature": "static String parseRepairId(String message)", "class_method_signature": "SegmentRunner.parseRepairId(String message)", "testcase": false, "constructor": false}, {"identifier": "intensityBasedDelayMillis", "parameters": "(double intensity)", "modifiers": "", "return": "long", "signature": "long intensityBasedDelayMillis(double intensity)", "full_signature": " long intensityBasedDelayMillis(double intensity)", "class_method_signature": "SegmentRunner.intensityBasedDelayMillis(double intensity)", "testcase": false, "constructor": false}, {"identifier": "lockSegmentRunners", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean lockSegmentRunners()", "full_signature": "private boolean lockSegmentRunners()", "class_method_signature": "SegmentRunner.lockSegmentRunners()", "testcase": false, "constructor": false}, {"identifier": "releaseSegmentRunners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseSegmentRunners()", "full_signature": "private void releaseSegmentRunners()", "class_method_signature": "SegmentRunner.releaseSegmentRunners()", "testcase": false, "constructor": false}, {"identifier": "takeLead", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean takeLead()", "full_signature": "private boolean takeLead()", "class_method_signature": "SegmentRunner.takeLead()", "testcase": false, "constructor": false}, {"identifier": "renewLead", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean renewLead()", "full_signature": "private boolean renewLead()", "class_method_signature": "SegmentRunner.renewLead()", "testcase": false, "constructor": false}, {"identifier": "releaseLead", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void releaseLead()", "full_signature": "private void releaseLead()", "class_method_signature": "SegmentRunner.releaseLead()", "testcase": false, "constructor": false}, {"identifier": "countRunningReapers", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int countRunningReapers()", "full_signature": "private int countRunningReapers()", "class_method_signature": "SegmentRunner.countRunningReapers()", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/SegmentRunner.java"}, "focal_method": {"identifier": "okToRepairSegment", "parameters": "(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "modifiers": "static", "return": "boolean", "body": "static boolean okToRepairSegment(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability) {\n\n    return allHostsChecked || (allLocalDcHostsChecked && DatacenterAvailability.LOCAL == dcAvailability);\n  }", "signature": "boolean okToRepairSegment(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "full_signature": "static boolean okToRepairSegment(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "class_method_signature": "SegmentRunner.okToRepairSegment(\n      boolean allHostsChecked,\n      boolean allLocalDcHostsChecked,\n      DatacenterAvailability dcAvailability)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}