{"test_class": {"identifier": "DocumentViewParserValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/spi/impl/DocumentViewParserValidatorTest.java"}, "test_case": {"identifier": "testGetDocumentViewXmlRootPathFromContentXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDocumentViewXmlRootPathFromContentXml() throws IOException {\n        Path filePath = Paths.get(\"test\", \"parent\", \".content.xml\");\n        Assert.assertEquals(Paths.get(\"test\", \"parent\"), DocumentViewParserValidator.getDocumentViewXmlRootPath(null, filePath));\n    }", "signature": "void testGetDocumentViewXmlRootPathFromContentXml()", "full_signature": "@Test public void testGetDocumentViewXmlRootPathFromContentXml()", "class_method_signature": "DocumentViewParserValidatorTest.testGetDocumentViewXmlRootPathFromContentXml()", "testcase": true, "constructor": false, "invocations": ["get", "assertEquals", "get", "getDocumentViewXmlRootPath"]}, "focal_class": {"identifier": "DocumentViewParserValidator", "superclass": "", "interfaces": "implements GenericJcrDataValidator", "fields": [{"original_string": "public static final String EXTENDED_FILE_AGGREGATE_FOLDER_SUFFIX = \".dir\";", "modifier": "public static final", "type": "String", "declarator": "EXTENDED_FILE_AGGREGATE_FOLDER_SUFFIX = \".dir\"", "var_name": "EXTENDED_FILE_AGGREGATE_FOLDER_SUFFIX"}, {"original_string": "private final Map<String, DocumentViewXmlValidator> docViewValidators;", "modifier": "private final", "type": "Map<String, DocumentViewXmlValidator>", "declarator": "docViewValidators", "var_name": "docViewValidators"}, {"original_string": "private final SAXParser saxParser;", "modifier": "private final", "type": "SAXParser", "declarator": "saxParser", "var_name": "saxParser"}, {"original_string": "private final @NotNull ValidationMessageSeverity severity;", "modifier": "private final @NotNull", "type": "ValidationMessageSeverity", "declarator": "severity", "var_name": "severity"}], "methods": [{"identifier": "DocumentViewParserValidator", "parameters": "(SAXParser saxParser, @NotNull ValidationMessageSeverity severity)", "modifiers": "public", "return": "", "signature": " DocumentViewParserValidator(SAXParser saxParser, @NotNull ValidationMessageSeverity severity)", "full_signature": "public  DocumentViewParserValidator(SAXParser saxParser, @NotNull ValidationMessageSeverity severity)", "class_method_signature": "DocumentViewParserValidator.DocumentViewParserValidator(SAXParser saxParser, @NotNull ValidationMessageSeverity severity)", "testcase": false, "constructor": true}, {"identifier": "setDocumentViewXmlValidators", "parameters": "(Map<String, DocumentViewXmlValidator> documentViewXmlValidators)", "modifiers": "public", "return": "void", "signature": "void setDocumentViewXmlValidators(Map<String, DocumentViewXmlValidator> documentViewXmlValidators)", "full_signature": "public void setDocumentViewXmlValidators(Map<String, DocumentViewXmlValidator> documentViewXmlValidators)", "class_method_signature": "DocumentViewParserValidator.setDocumentViewXmlValidators(Map<String, DocumentViewXmlValidator> documentViewXmlValidators)", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> done()", "full_signature": "@Override public Collection<ValidationMessage> done()", "class_method_signature": "DocumentViewParserValidator.done()", "testcase": false, "constructor": false}, {"identifier": "shouldValidateJcrData", "parameters": "(@NotNull Path filePath, @NotNull Path basePath)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldValidateJcrData(@NotNull Path filePath, @NotNull Path basePath)", "full_signature": "@Override public boolean shouldValidateJcrData(@NotNull Path filePath, @NotNull Path basePath)", "class_method_signature": "DocumentViewParserValidator.shouldValidateJcrData(@NotNull Path filePath, @NotNull Path basePath)", "testcase": false, "constructor": false}, {"identifier": "validateJcrData", "parameters": "(@NotNull InputStream input, @NotNull Path filePath, @NotNull Path basePath, @NotNull Map<String, Integer> nodePathsAndLineNumbers)", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> validateJcrData(@NotNull InputStream input, @NotNull Path filePath, @NotNull Path basePath, @NotNull Map<String, Integer> nodePathsAndLineNumbers)", "full_signature": "@Override public Collection<ValidationMessage> validateJcrData(@NotNull InputStream input, @NotNull Path filePath, @NotNull Path basePath, @NotNull Map<String, Integer> nodePathsAndLineNumbers)", "class_method_signature": "DocumentViewParserValidator.validateJcrData(@NotNull InputStream input, @NotNull Path filePath, @NotNull Path basePath, @NotNull Map<String, Integer> nodePathsAndLineNumbers)", "testcase": false, "constructor": false}, {"identifier": "getDocumentViewXmlRootPath", "parameters": "(BufferedInputStream input, Path path)", "modifiers": "static", "return": "Path", "signature": "Path getDocumentViewXmlRootPath(BufferedInputStream input, Path path)", "full_signature": "static Path getDocumentViewXmlRootPath(BufferedInputStream input, Path path)", "class_method_signature": "DocumentViewParserValidator.getDocumentViewXmlRootPath(BufferedInputStream input, Path path)", "testcase": false, "constructor": false}, {"identifier": "validateDocumentViewXml", "parameters": "(InputStream input, @NotNull Path filePath, @NotNull Path basePath, String rootNodePath,\n            Map<String, Integer> nodePathsAndLineNumbers)", "modifiers": "protected", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> validateDocumentViewXml(InputStream input, @NotNull Path filePath, @NotNull Path basePath, String rootNodePath,\n            Map<String, Integer> nodePathsAndLineNumbers)", "full_signature": "protected Collection<ValidationMessage> validateDocumentViewXml(InputStream input, @NotNull Path filePath, @NotNull Path basePath, String rootNodePath,\n            Map<String, Integer> nodePathsAndLineNumbers)", "class_method_signature": "DocumentViewParserValidator.validateDocumentViewXml(InputStream input, @NotNull Path filePath, @NotNull Path basePath, String rootNodePath,\n            Map<String, Integer> nodePathsAndLineNumbers)", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/DocumentViewParserValidator.java"}, "focal_method": {"identifier": "getDocumentViewXmlRootPath", "parameters": "(BufferedInputStream input, Path path)", "modifiers": "static", "return": "Path", "body": "static Path getDocumentViewXmlRootPath(BufferedInputStream input, Path path) throws IOException {\n        Path name = path.getFileName();\n        Path rootPath = null;\n\n        int nameCount = path.getNameCount();\n        if (name.equals(Paths.get(Constants.DOT_CONTENT_XML))) {\n            if (nameCount > 1) {\n                rootPath = path.subpath(0, nameCount - 1);\n                // fix root mapping for http://jackrabbit.apache.org/filevault/vaultfs.html#Extended_File_aggregates\n                if (rootPath.toString().endsWith(EXTENDED_FILE_AGGREGATE_FOLDER_SUFFIX)) {\n                    rootPath = Paths.get(rootPath.toString().substring(0, rootPath.toString().length() - EXTENDED_FILE_AGGREGATE_FOLDER_SUFFIX.length()));\n                }\n            } else {\n                rootPath = Paths.get(\"\");\n            }\n            // correct suffix matching\n        } else if (name.toString().endsWith(\".xml\")) {\n\n            // we need to rely on a buffered input stream to be able to reset it later\n            input.mark(1024);\n            // analyze content\n            // this closes the input source internally, therefore protect against closing\n            // make sure to initialize the SLF4J logger appropriately (for the XmlAnalyzer)\n            try {\n                SerializationType type = XmlAnalyzer.analyze(new InputSource(new CloseShieldInputStream(input)));\n                if (type == SerializationType.XML_DOCVIEW) {\n                    //  remove .xml extension\n                    String fileName = path.getFileName().toString();\n                    fileName = fileName.substring(0, fileName.length() - \".xml\".length());\n                    if (nameCount > 1) {\n                        rootPath = path.subpath(0, nameCount - 1).resolve(fileName);\n                    } else {\n                        rootPath = Paths.get(fileName);\n                    }\n                }\n            } finally {\n                input.reset();\n            }\n        }\n        return rootPath;\n    }", "signature": "Path getDocumentViewXmlRootPath(BufferedInputStream input, Path path)", "full_signature": "static Path getDocumentViewXmlRootPath(BufferedInputStream input, Path path)", "class_method_signature": "DocumentViewParserValidator.getDocumentViewXmlRootPath(BufferedInputStream input, Path path)", "testcase": false, "constructor": false, "invocations": ["getFileName", "getNameCount", "equals", "get", "subpath", "endsWith", "toString", "get", "substring", "toString", "length", "toString", "length", "get", "endsWith", "toString", "mark", "analyze", "toString", "getFileName", "substring", "length", "length", "resolve", "subpath", "get", "reset"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}