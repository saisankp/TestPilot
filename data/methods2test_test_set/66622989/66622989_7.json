{"test_class": {"identifier": "MainPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Main.View mView;", "modifier": "@Mock\n    private", "type": "Main.View", "declarator": "mView", "var_name": "mView"}, {"original_string": "@Mock\n    private UseCaseHandler mUseCaseHandler;", "modifier": "@Mock\n    private", "type": "UseCaseHandler", "declarator": "mUseCaseHandler", "var_name": "mUseCaseHandler"}, {"original_string": "@Mock\n    private ManuallyFetchTodaysSentenceUC mFetchTodaysSentenceUseCase;", "modifier": "@Mock\n    private", "type": "ManuallyFetchTodaysSentenceUC", "declarator": "mFetchTodaysSentenceUseCase", "var_name": "mFetchTodaysSentenceUseCase"}, {"original_string": "@Mock\n    private EventBus mEventBus;", "modifier": "@Mock\n    private", "type": "EventBus", "declarator": "mEventBus", "var_name": "mEventBus"}, {"original_string": "@Mock\n    private FetchingEvent mFetchingEvent;", "modifier": "@Mock\n    private", "type": "FetchingEvent", "declarator": "mFetchingEvent", "var_name": "mFetchingEvent"}, {"original_string": "@Captor\n    private ArgumentCaptor<Class> mEventClassCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Class>", "declarator": "mEventClassCaptor", "var_name": "mEventClassCaptor"}, {"original_string": "private MainPresenter mMainPresenter;", "modifier": "private", "type": "MainPresenter", "declarator": "mMainPresenter", "var_name": "mMainPresenter"}], "file": "app/src/test/java/com/xixicm/de/presentation/presenter/MainPresenterTest.java"}, "test_case": {"identifier": "testOnResume", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnResume() {\n        String today = Constants.SHORT_DATEFORMAT.format(new Date());\n        mMainPresenter.onResume();\n        // update date string\n        verify(mView).refreshDateView(today);\n    }", "signature": "void testOnResume()", "full_signature": "@Test public void testOnResume()", "class_method_signature": "MainPresenterTest.testOnResume()", "testcase": true, "constructor": false, "invocations": ["format", "onResume", "refreshDateView", "verify"]}, "focal_class": {"identifier": "MainPresenter", "superclass": "extends AbstractMvpPresenter<Main.View, Void>", "interfaces": "implements Main.Presenter<Main.View, Void>", "fields": [{"original_string": "private UseCaseHandler mUseCaseHandler;", "modifier": "private", "type": "UseCaseHandler", "declarator": "mUseCaseHandler", "var_name": "mUseCaseHandler"}, {"original_string": "private ManuallyFetchTodaysSentenceUC mFetchTodaysSentenceUseCase;", "modifier": "private", "type": "ManuallyFetchTodaysSentenceUC", "declarator": "mFetchTodaysSentenceUseCase", "var_name": "mFetchTodaysSentenceUseCase"}], "methods": [{"identifier": "MainPresenter", "parameters": "()", "modifiers": "public", "return": "", "signature": " MainPresenter()", "full_signature": "public  MainPresenter()", "class_method_signature": "MainPresenter.MainPresenter()", "testcase": false, "constructor": true}, {"identifier": "MainPresenter", "parameters": "(UseCaseHandler useCaseHandler, ManuallyFetchTodaysSentenceUC fetchTodaysSentenceUseCase)", "modifiers": "public", "return": "", "signature": " MainPresenter(UseCaseHandler useCaseHandler, ManuallyFetchTodaysSentenceUC fetchTodaysSentenceUseCase)", "full_signature": "public  MainPresenter(UseCaseHandler useCaseHandler, ManuallyFetchTodaysSentenceUC fetchTodaysSentenceUseCase)", "class_method_signature": "MainPresenter.MainPresenter(UseCaseHandler useCaseHandler, ManuallyFetchTodaysSentenceUC fetchTodaysSentenceUseCase)", "testcase": false, "constructor": true}, {"identifier": "fetchTodaysSentence", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fetchTodaysSentence()", "full_signature": "@Override public void fetchTodaysSentence()", "class_method_signature": "MainPresenter.fetchTodaysSentence()", "testcase": false, "constructor": false}, {"identifier": "onCreate", "parameters": "(long widgetSentenceId)", "modifiers": "@Override public", "return": "void", "signature": "void onCreate(long widgetSentenceId)", "full_signature": "@Override public void onCreate(long widgetSentenceId)", "class_method_signature": "MainPresenter.onCreate(long widgetSentenceId)", "testcase": false, "constructor": false}, {"identifier": "onStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onStart()", "full_signature": "@Override public void onStart()", "class_method_signature": "MainPresenter.onStart()", "testcase": false, "constructor": false}, {"identifier": "updateManualFetchFabStatus", "parameters": "(boolean isDisplayingList, boolean isFavoriteList)", "modifiers": "@Override public", "return": "void", "signature": "void updateManualFetchFabStatus(boolean isDisplayingList, boolean isFavoriteList)", "full_signature": "@Override public void updateManualFetchFabStatus(boolean isDisplayingList, boolean isFavoriteList)", "class_method_signature": "MainPresenter.updateManualFetchFabStatus(boolean isDisplayingList, boolean isFavoriteList)", "testcase": false, "constructor": false}, {"identifier": "updateManualFetchFabStatus", "parameters": "(UpdateManualFetchFabEvent event)", "modifiers": "@Subscribe(threadMode = ThreadMode.MAIN) public", "return": "void", "signature": "void updateManualFetchFabStatus(UpdateManualFetchFabEvent event)", "full_signature": "@Subscribe(threadMode = ThreadMode.MAIN) public void updateManualFetchFabStatus(UpdateManualFetchFabEvent event)", "class_method_signature": "MainPresenter.updateManualFetchFabStatus(UpdateManualFetchFabEvent event)", "testcase": false, "constructor": false}, {"identifier": "onResume", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onResume()", "full_signature": "@Override public void onResume()", "class_method_signature": "MainPresenter.onResume()", "testcase": false, "constructor": false}, {"identifier": "onStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onStop()", "full_signature": "@Override public void onStop()", "class_method_signature": "MainPresenter.onStop()", "testcase": false, "constructor": false}, {"identifier": "onBackPressed", "parameters": "(boolean isDrawerOpen, boolean isDetailFragment, int backStackEntryCount)", "modifiers": "@Override public", "return": "void", "signature": "void onBackPressed(boolean isDrawerOpen, boolean isDetailFragment, int backStackEntryCount)", "full_signature": "@Override public void onBackPressed(boolean isDrawerOpen, boolean isDetailFragment, int backStackEntryCount)", "class_method_signature": "MainPresenter.onBackPressed(boolean isDrawerOpen, boolean isDetailFragment, int backStackEntryCount)", "testcase": false, "constructor": false}, {"identifier": "refreshFetchingStatus", "parameters": "(FetchingEvent fetchingEvent)", "modifiers": "@Override @Subscribe(threadMode = ThreadMode.MAIN) public", "return": "void", "signature": "void refreshFetchingStatus(FetchingEvent fetchingEvent)", "full_signature": "@Override @Subscribe(threadMode = ThreadMode.MAIN) public void refreshFetchingStatus(FetchingEvent fetchingEvent)", "class_method_signature": "MainPresenter.refreshFetchingStatus(FetchingEvent fetchingEvent)", "testcase": false, "constructor": false}, {"identifier": "onNavigationItemSelected", "parameters": "(int menuId)", "modifiers": "@Override public", "return": "void", "signature": "void onNavigationItemSelected(int menuId)", "full_signature": "@Override public void onNavigationItemSelected(int menuId)", "class_method_signature": "MainPresenter.onNavigationItemSelected(int menuId)", "testcase": false, "constructor": false}, {"identifier": "getEventBus", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "EventBus", "signature": "EventBus getEventBus()", "full_signature": "@VisibleForTesting public EventBus getEventBus()", "class_method_signature": "MainPresenter.getEventBus()", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/xixicm/de/presentation/presenter/MainPresenter.java"}, "focal_method": {"identifier": "onResume", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onResume() {\n        mView.refreshDateView(Constants.SHORT_DATEFORMAT.format(new Date()));\n    }", "signature": "void onResume()", "full_signature": "@Override public void onResume()", "class_method_signature": "MainPresenter.onResume()", "testcase": false, "constructor": false, "invocations": ["refreshDateView", "format"]}, "repository": {"repo_id": 66622989, "url": "https://github.com/enuoCM/DE-MVP-Clean", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 17, "size": 278, "license": "licensed"}}