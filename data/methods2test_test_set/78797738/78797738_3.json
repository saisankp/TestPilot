{"test_class": {"identifier": "UserControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UserController userController;", "modifier": "private", "type": "UserController", "declarator": "userController", "var_name": "userController"}], "file": "10-ps-mvc-practice/src/test/java/com/ps/web/UserControllerTest.java"}, "test_case": {"identifier": "testFindAllHandler", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindAllHandler(){\n        ExtendedModelMap model = new ExtendedModelMap();\n        String viewName = userController.list(model);\n        List<User> users = (List<User>) model.get(\"users\");\n        assertNotNull(users);\n        assertEquals(2, users.size());\n        assertEquals(Long.valueOf(0), users.get(0).getId());\n        assertEquals(\"users/list\", viewName);\n    }", "signature": "void testFindAllHandler()", "full_signature": "@Test public void testFindAllHandler()", "class_method_signature": "UserControllerTest.testFindAllHandler()", "testcase": true, "constructor": false, "invocations": ["list", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "valueOf", "getId", "get", "assertEquals"]}, "focal_class": {"identifier": "UserController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Logger logger = LoggerFactory.getLogger(UserController.class);", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(UserController.class)", "var_name": "logger"}, {"original_string": "private UserService userService;", "modifier": "private", "type": "UserService", "declarator": "userService", "var_name": "userService"}], "methods": [{"identifier": "setUserService", "parameters": "(UserService userService)", "modifiers": "@Autowired public", "return": "void", "signature": "void setUserService(UserService userService)", "full_signature": "@Autowired public void setUserService(UserService userService)", "class_method_signature": "UserController.setUserService(UserService userService)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Model model)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.GET) public", "return": "String", "signature": "String list(Model model)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.GET) public String list(Model model)", "class_method_signature": "UserController.list(Model model)", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(@PathVariable Long id, Model model)", "modifiers": "@RequestMapping(value = \"/{id:[\\\\d]*}\", method = RequestMethod.GET) public", "return": "String", "signature": "String show(@PathVariable Long id, Model model)", "full_signature": "@RequestMapping(value = \"/{id:[\\\\d]*}\", method = RequestMethod.GET) public String show(@PathVariable Long id, Model model)", "class_method_signature": "UserController.show(@PathVariable Long id, Model model)", "testcase": false, "constructor": false}], "file": "10-ps-mvc-practice/src/main/java/com/ps/web/UserController.java"}, "focal_method": {"identifier": "list", "parameters": "(Model model)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.GET) public", "return": "String", "body": "@RequestMapping(value = \"/list\", method = RequestMethod.GET)\n\tpublic String list(Model model) {\n\t\tlogger.info(\"Populating model with list...\");\n\t\tmodel.addAttribute(\"users\", userService.findAll());\n\t\treturn \"users/list\";\n\t}", "signature": "String list(Model model)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.GET) public String list(Model model)", "class_method_signature": "UserController.list(Model model)", "testcase": false, "constructor": false, "invocations": ["info", "addAttribute", "findAll"]}, "repository": {"repo_id": 78797738, "url": "https://github.com/Apress/pivotal-certified-pro-spring-dev-exam", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 82, "size": 62744, "license": "licensed"}}