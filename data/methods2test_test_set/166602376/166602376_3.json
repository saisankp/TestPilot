{"test_class": {"identifier": "TestPing", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/com/spectrum/android/ping/TestPing.java"}, "test_case": {"identifier": "testErrnoException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testErrnoException() {\n        final MockPingListener listener = new MockPingListener();\n        final ErrnoException fail = new ErrnoException(\"sendto()\", 1);\n        new MockPing(null, listener) {\n            @Override\n            protected int sendto(final FileDescriptor fd, final ByteBuffer byteBuffer) throws ErrnoException {\n                throw fail;\n            }\n        }.run();\n        Assert.assertEquals(fail, listener.exception);\n    }", "signature": "void testErrnoException()", "full_signature": "@Test public void testErrnoException()", "class_method_signature": "TestPing.testErrnoException()", "testcase": true, "constructor": false, "invocations": ["run", "assertEquals"]}, "focal_class": {"identifier": "Ping", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "public static final int DEFAULT_COUNT = 8;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_COUNT = 8", "var_name": "DEFAULT_COUNT"}, {"original_string": "public static final long TIMED_OUT_MS = -1;", "modifier": "public static final", "type": "long", "declarator": "TIMED_OUT_MS = -1", "var_name": "TIMED_OUT_MS"}, {"original_string": "private static final String TAG = Ping.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG = Ping.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private static final int IPTOS_LOWDELAY = 0x10;", "modifier": "private static final", "type": "int", "declarator": "IPTOS_LOWDELAY = 0x10", "var_name": "IPTOS_LOWDELAY"}, {"original_string": "private static final int ECHO_PORT = 7;", "modifier": "private static final", "type": "int", "declarator": "ECHO_PORT = 7", "var_name": "ECHO_PORT"}, {"original_string": "protected static final short POLLIN = (short)(OsConstants.POLLIN==0?1:OsConstants.POLLIN);", "modifier": "protected static final", "type": "short", "declarator": "POLLIN = (short)(OsConstants.POLLIN==0?1:OsConstants.POLLIN)", "var_name": "POLLIN"}, {"original_string": "private static final int MSG_DONTWAIT = 0x40;", "modifier": "private static final", "type": "int", "declarator": "MSG_DONTWAIT = 0x40", "var_name": "MSG_DONTWAIT"}, {"original_string": "private final InetAddress mDest;", "modifier": "private final", "type": "InetAddress", "declarator": "mDest", "var_name": "mDest"}, {"original_string": "private final PingListener mListener;", "modifier": "private final", "type": "PingListener", "declarator": "mListener", "var_name": "mListener"}, {"original_string": "private int mTimeoutMs = 4000;", "modifier": "private", "type": "int", "declarator": "mTimeoutMs = 4000", "var_name": "mTimeoutMs"}, {"original_string": "private int mDelayMs = 1000;", "modifier": "private", "type": "int", "declarator": "mDelayMs = 1000", "var_name": "mDelayMs"}, {"original_string": "private int mCount = DEFAULT_COUNT;", "modifier": "private", "type": "int", "declarator": "mCount = DEFAULT_COUNT", "var_name": "mCount"}, {"original_string": "private EchoPacketBuilder mEchoPacketBuilder;", "modifier": "private", "type": "EchoPacketBuilder", "declarator": "mEchoPacketBuilder", "var_name": "mEchoPacketBuilder"}, {"original_string": "private Network mNetwork;", "modifier": "private", "type": "Network", "declarator": "mNetwork", "var_name": "mNetwork"}], "methods": [{"identifier": "Ping", "parameters": "(final InetAddress dest, final PingListener listener)", "modifiers": "public", "return": "", "signature": " Ping(final InetAddress dest, final PingListener listener)", "full_signature": "public  Ping(final InetAddress dest, final PingListener listener)", "class_method_signature": "Ping.Ping(final InetAddress dest, final PingListener listener)", "testcase": false, "constructor": true}, {"identifier": "setTimeoutMs", "parameters": "(final int timeoutMs)", "modifiers": "public", "return": "void", "signature": "void setTimeoutMs(final int timeoutMs)", "full_signature": "public void setTimeoutMs(final int timeoutMs)", "class_method_signature": "Ping.setTimeoutMs(final int timeoutMs)", "testcase": false, "constructor": false}, {"identifier": "getTimeoutMs", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimeoutMs()", "full_signature": "public int getTimeoutMs()", "class_method_signature": "Ping.getTimeoutMs()", "testcase": false, "constructor": false}, {"identifier": "getDelayMs", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDelayMs()", "full_signature": "public int getDelayMs()", "class_method_signature": "Ping.getDelayMs()", "testcase": false, "constructor": false}, {"identifier": "setDelayMs", "parameters": "(final int delayMs)", "modifiers": "public", "return": "void", "signature": "void setDelayMs(final int delayMs)", "full_signature": "public void setDelayMs(final int delayMs)", "class_method_signature": "Ping.setDelayMs(final int delayMs)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCount()", "full_signature": "public int getCount()", "class_method_signature": "Ping.getCount()", "testcase": false, "constructor": false}, {"identifier": "setCount", "parameters": "(final int count)", "modifiers": "public", "return": "void", "signature": "void setCount(final int count)", "full_signature": "public void setCount(final int count)", "class_method_signature": "Ping.setCount(final int count)", "testcase": false, "constructor": false}, {"identifier": "getNetwork", "parameters": "()", "modifiers": "public", "return": "Network", "signature": "Network getNetwork()", "full_signature": "public Network getNetwork()", "class_method_signature": "Ping.getNetwork()", "testcase": false, "constructor": false}, {"identifier": "setNetwork", "parameters": "(final Network network)", "modifiers": "public", "return": "void", "signature": "void setNetwork(final Network network)", "full_signature": "public void setNetwork(final Network network)", "class_method_signature": "Ping.setNetwork(final Network network)", "testcase": false, "constructor": false}, {"identifier": "setEchoPacketBuilder", "parameters": "(final EchoPacketBuilder echoPacketBuilder)", "modifiers": "public", "return": "void", "signature": "void setEchoPacketBuilder(final EchoPacketBuilder echoPacketBuilder)", "full_signature": "public void setEchoPacketBuilder(final EchoPacketBuilder echoPacketBuilder)", "class_method_signature": "Ping.setEchoPacketBuilder(final EchoPacketBuilder echoPacketBuilder)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Ping.run()", "testcase": false, "constructor": false}, {"identifier": "calcLatency", "parameters": "(final long startTimestamp, final long endTimestamp)", "modifiers": "protected", "return": "long", "signature": "long calcLatency(final long startTimestamp, final long endTimestamp)", "full_signature": "protected long calcLatency(final long startTimestamp, final long endTimestamp)", "class_method_signature": "Ping.calcLatency(final long startTimestamp, final long endTimestamp)", "testcase": false, "constructor": false}, {"identifier": "socket", "parameters": "(final int inet, final int proto)", "modifiers": "protected", "return": "FileDescriptor", "signature": "FileDescriptor socket(final int inet, final int proto)", "full_signature": "protected FileDescriptor socket(final int inet, final int proto)", "class_method_signature": "Ping.socket(final int inet, final int proto)", "testcase": false, "constructor": false}, {"identifier": "setLowDelay", "parameters": "(final FileDescriptor fd)", "modifiers": "protected", "return": "void", "signature": "void setLowDelay(final FileDescriptor fd)", "full_signature": "protected void setLowDelay(final FileDescriptor fd)", "class_method_signature": "Ping.setLowDelay(final FileDescriptor fd)", "testcase": false, "constructor": false}, {"identifier": "sendto", "parameters": "(final FileDescriptor fd, final ByteBuffer byteBuffer)", "modifiers": "protected", "return": "int", "signature": "int sendto(final FileDescriptor fd, final ByteBuffer byteBuffer)", "full_signature": "protected int sendto(final FileDescriptor fd, final ByteBuffer byteBuffer)", "class_method_signature": "Ping.sendto(final FileDescriptor fd, final ByteBuffer byteBuffer)", "testcase": false, "constructor": false}, {"identifier": "poll", "parameters": "(final StructPollfd[] structPollfds)", "modifiers": "protected", "return": "int", "signature": "int poll(final StructPollfd[] structPollfds)", "full_signature": "protected int poll(final StructPollfd[] structPollfds)", "class_method_signature": "Ping.poll(final StructPollfd[] structPollfds)", "testcase": false, "constructor": false}, {"identifier": "recvfrom", "parameters": "(final FileDescriptor fd, final byte[] buffer)", "modifiers": "protected", "return": "int", "signature": "int recvfrom(final FileDescriptor fd, final byte[] buffer)", "full_signature": "protected int recvfrom(final FileDescriptor fd, final byte[] buffer)", "class_method_signature": "Ping.recvfrom(final FileDescriptor fd, final byte[] buffer)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(final FileDescriptor fd)", "modifiers": "protected", "return": "void", "signature": "void close(final FileDescriptor fd)", "full_signature": "protected void close(final FileDescriptor fd)", "class_method_signature": "Ping.close(final FileDescriptor fd)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void sleep()", "full_signature": "protected void sleep()", "class_method_signature": "Ping.sleep()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/spectrum/android/ping/Ping.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() {\n        final int inet, proto;\n        if (mDest instanceof Inet6Address) {\n            inet = OsConstants.AF_INET6;\n            proto = OsConstants.IPPROTO_ICMPV6;\n        } else {\n            inet = OsConstants.AF_INET;\n            proto = OsConstants.IPPROTO_ICMP;\n        }\n        try {\n            final FileDescriptor fd = socket(inet, proto);\n            if (fd.valid()) {\n                try {\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && mNetwork != null) {\n                        mNetwork.bindSocket(fd);\n                    }\n                    setLowDelay(fd);\n\n                    final StructPollfd structPollfd = new StructPollfd();\n                    structPollfd.fd = fd;\n                    structPollfd.events = POLLIN;\n                    final StructPollfd[] structPollfds = {structPollfd};\n                    for (int i = 0; i < mCount; i++) {\n                        final ByteBuffer byteBuffer = mEchoPacketBuilder.build();\n                        final byte buffer[] = new byte[byteBuffer.limit()];\n\n                        try {\n                            // Note: it appears that the OS updates the Checksum, Identifier, and Sequence number.  The payload appears to be untouched.\n                            // These changes are not reflected in the buffer, but in the returning packet.\n                            final long start = System.currentTimeMillis();\n                            int rc = sendto(fd, byteBuffer);\n                            if (rc >= 0) {\n                                rc = poll(structPollfds);\n                                final long time = calcLatency(start, System.currentTimeMillis());\n                                if (rc >= 0) {\n                                    if (structPollfd.revents == POLLIN) {\n                                        structPollfd.revents = 0;\n                                        rc = recvfrom(fd, buffer);\n                                        if (rc < 0) {\n                                            Log.d(TAG, \"recvfrom() return failure: \" + rc);\n                                        }\n                                        mListener.onPing(time, i);\n                                    } else {\n                                        mListener.onPing(TIMED_OUT_MS, i);\n                                    }\n                                } else {\n                                    mListener.onPingException(new IOException(\"poll() failed\"), i);\n                                    break;\n                                }\n                            } else {\n                                mListener.onPingException(new IOException(\"sendto() failed\"), i);\n                                break;\n                            }\n                        } catch (ErrnoException e) {\n                            mListener.onPingException(e, i);\n                            break;\n                        }\n                        sleep();\n                    }\n                } finally {\n                    close(fd);\n                }\n            } else {\n                mListener.onPingException(new IOException(\"Invalid FD \" + fd.toString()), 0);\n            }\n        } catch (ErrnoException | IOException e) {\n            mListener.onPingException(e, 0);\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Ping.run()", "testcase": false, "constructor": false, "invocations": ["socket", "valid", "bindSocket", "setLowDelay", "build", "limit", "currentTimeMillis", "sendto", "poll", "calcLatency", "currentTimeMillis", "recvfrom", "d", "onPing", "onPing", "onPingException", "onPingException", "onPingException", "sleep", "close", "onPingException", "toString", "onPingException"]}, "repository": {"repo_id": 166602376, "url": "https://github.com/dburckh/AndroidPing", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 15, "size": 133, "license": "licensed"}}