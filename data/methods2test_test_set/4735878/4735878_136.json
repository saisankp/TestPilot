{"test_class": {"identifier": "RemoteMapCatalogTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/layerModel/mapcatalog/RemoteMapCatalogTest.java"}, "test_case": {"identifier": "testParseXML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n        public void testParseXML() throws Exception {\n                // Unused URL\n                URL apiUrl = new URL(\"http://poulpe.heig-vd.ch/scapc2/serviceapi/index.php\");\n                \n                FileReader inFile = new FileReader(new File(RemoteMapCatalogTest.class.getResource(\"workspaces.xml\").toURI()));\n                BufferedReader in = new BufferedReader(inFile);\n                XMLInputFactory factory = XMLInputFactory.newInstance();\n                \n                // Parse Data\n                XMLStreamReader parser;\n                parser = factory.createXMLStreamReader(in);\n                RemoteMapCatalog mapCatalog =\n                        new RemoteMapCatalog(\n                        new ConnectionProperties(apiUrl, null, new File(\"target/maps\")));\n                List<Workspace> workspaces = new ArrayList<Workspace>();                \n                mapCatalog.parseXML(workspaces, parser);                        \n                parser.close();\n                \n                assertEquals(workspaces.size(), 4);\n                List<String> workspacesNames = new ArrayList<String>();\n                for(Workspace workspace : workspaces) {\n                        workspacesNames.add(workspace.getWorkspaceName());\n                }\n                assertTrue(workspacesNames.containsAll(\n                        Arrays.asList(\"default\",\"toto\",\"titi\",\"tata\")));\n        }", "signature": "void testParseXML()", "full_signature": "@Test public void testParseXML()", "class_method_signature": "RemoteMapCatalogTest.testParseXML()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "newInstance", "createXMLStreamReader", "parseXML", "close", "assertEquals", "size", "add", "getWorkspaceName", "assertTrue", "containsAll", "asList"]}, "focal_class": {"identifier": "RemoteMapCatalog", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectionProperties cParams;", "modifier": "private", "type": "ConnectionProperties", "declarator": "cParams", "var_name": "cParams"}, {"original_string": "private static final I18n I18N = I18nFactory.getI18n(RemoteMapCatalog.class);", "modifier": "private static final", "type": "I18n", "declarator": "I18N = I18nFactory.getI18n(RemoteMapCatalog.class)", "var_name": "I18N"}], "methods": [{"identifier": "RemoteMapCatalog", "parameters": "(ConnectionProperties connectionProperties)", "modifiers": "public", "return": "", "signature": " RemoteMapCatalog(ConnectionProperties connectionProperties)", "full_signature": "public  RemoteMapCatalog(ConnectionProperties connectionProperties)", "class_method_signature": "RemoteMapCatalog.RemoteMapCatalog(ConnectionProperties connectionProperties)", "testcase": false, "constructor": true}, {"identifier": "parseXML", "parameters": "(List<Workspace> workspaces,XMLStreamReader parser)", "modifiers": "public", "return": "void", "signature": "void parseXML(List<Workspace> workspaces,XMLStreamReader parser)", "full_signature": "public void parseXML(List<Workspace> workspaces,XMLStreamReader parser)", "class_method_signature": "RemoteMapCatalog.parseXML(List<Workspace> workspaces,XMLStreamReader parser)", "testcase": false, "constructor": false}, {"identifier": "getWorkspaces", "parameters": "()", "modifiers": "public", "return": "List<Workspace>", "signature": "List<Workspace> getWorkspaces()", "full_signature": "public List<Workspace> getWorkspaces()", "class_method_signature": "RemoteMapCatalog.getWorkspaces()", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/layerModel/mapcatalog/RemoteMapCatalog.java"}, "focal_method": {"identifier": "parseXML", "parameters": "(List<Workspace> workspaces,XMLStreamReader parser)", "modifiers": "public", "return": "void", "body": "public void parseXML(List<Workspace> workspaces,XMLStreamReader parser) throws XMLStreamException {\n                List<String> hierarchy = new ArrayList<String>();\n                // Hold workspace name\n                StringBuilder characters = new StringBuilder();\n                // Starting with a valid event, iterating while the parser\n                // does not reach the end document XML tag\n                for (int event = parser.next();\n                        event != XMLStreamConstants.END_DOCUMENT;\n                        event = parser.next()) {\n                        // For each XML elements\n                        switch(event) {\n                                case XMLStreamConstants.START_ELEMENT:\n                                        hierarchy.add(parser.getLocalName());\n                                        break;\n                                case XMLStreamConstants.END_ELEMENT:\n                                        if(RemoteCommons.endsWith(hierarchy,\"workspaces\",\"workspace\",\"name\")) {\n                                                workspaces.add(new Workspace(cParams,characters.toString().trim()));\n                                        }\n                                        hierarchy.remove(hierarchy.size()-1);\n                                        characters = new StringBuilder(); // Clear the string buffer\n                                        break;\n                                case XMLStreamConstants.CHARACTERS:\n                                        characters.append(StringEscapeUtils.unescapeHtml4(parser.getText()));\n                                        break;\n                        }                               \n                }                \n        }", "signature": "void parseXML(List<Workspace> workspaces,XMLStreamReader parser)", "full_signature": "public void parseXML(List<Workspace> workspaces,XMLStreamReader parser)", "class_method_signature": "RemoteMapCatalog.parseXML(List<Workspace> workspaces,XMLStreamReader parser)", "testcase": false, "constructor": false, "invocations": ["next", "next", "add", "getLocalName", "endsWith", "add", "trim", "toString", "remove", "size", "append", "unescapeHtml4", "getText"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}