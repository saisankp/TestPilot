{"test_class": {"identifier": "DeclaredTypeCodegenTest", "superclass": "", "interfaces": "", "fields": [], "file": "kogito-codegen/src/test/java/org/kie/kogito/codegen/rules/DeclaredTypeCodegenTest.java"}, "test_case": {"identifier": "ofPath", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void ofPath() {\n        DeclaredTypeCodegen incrementalRuleCodegen =\n                DeclaredTypeCodegen.ofFiles(\n                        Collections.singleton(\n                                new File(\"src/test/resources/org/kie/kogito/codegen/declared/declared.drl\")));\n        incrementalRuleCodegen.setPackageName(\"com.acme\");\n\n        List<GeneratedFile> generatedFiles = incrementalRuleCodegen.generate();\n\n        assertThat(generatedFiles).hasSize(1);\n\n    }", "signature": "void ofPath()", "full_signature": "@Test void ofPath()", "class_method_signature": "DeclaredTypeCodegenTest.ofPath()", "testcase": true, "constructor": false, "invocations": ["ofFiles", "singleton", "setPackageName", "generate", "hasSize", "assertThat"]}, "focal_class": {"identifier": "DeclaredTypeCodegen", "superclass": "extends AbstractGenerator", "interfaces": "", "fields": [{"original_string": "private static final ResourceType[] resourceTypes = {\n            ResourceType.DRL\n    };", "modifier": "private static final", "type": "ResourceType[]", "declarator": "resourceTypes = {\n            ResourceType.DRL\n    }", "var_name": "resourceTypes"}, {"original_string": "private final Collection<Resource> resources;", "modifier": "private final", "type": "Collection<Resource>", "declarator": "resources", "var_name": "resources"}, {"original_string": "private ClassLoader contextClassLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "contextClassLoader", "var_name": "contextClassLoader"}], "methods": [{"identifier": "ofPath", "parameters": "(Path basePath)", "modifiers": "public static", "return": "DeclaredTypeCodegen", "signature": "DeclaredTypeCodegen ofPath(Path basePath)", "full_signature": "public static DeclaredTypeCodegen ofPath(Path basePath)", "class_method_signature": "DeclaredTypeCodegen.ofPath(Path basePath)", "testcase": false, "constructor": false}, {"identifier": "ofFiles", "parameters": "(Collection<File> files)", "modifiers": "public static", "return": "DeclaredTypeCodegen", "signature": "DeclaredTypeCodegen ofFiles(Collection<File> files)", "full_signature": "public static DeclaredTypeCodegen ofFiles(Collection<File> files)", "class_method_signature": "DeclaredTypeCodegen.ofFiles(Collection<File> files)", "testcase": false, "constructor": false}, {"identifier": "ofResources", "parameters": "(Collection<Resource> resources)", "modifiers": "public static", "return": "DeclaredTypeCodegen", "signature": "DeclaredTypeCodegen ofResources(Collection<Resource> resources)", "full_signature": "public static DeclaredTypeCodegen ofResources(Collection<Resource> resources)", "class_method_signature": "DeclaredTypeCodegen.ofResources(Collection<Resource> resources)", "testcase": false, "constructor": false}, {"identifier": "toResources", "parameters": "(Stream<File> files)", "modifiers": "private static", "return": "Set<Resource>", "signature": "Set<Resource> toResources(Stream<File> files)", "full_signature": "private static Set<Resource> toResources(Stream<File> files)", "class_method_signature": "DeclaredTypeCodegen.toResources(Stream<File> files)", "testcase": false, "constructor": false}, {"identifier": "typeOf", "parameters": "(FileSystemResource r)", "modifiers": "private static", "return": "ResourceType", "signature": "ResourceType typeOf(FileSystemResource r)", "full_signature": "private static ResourceType typeOf(FileSystemResource r)", "class_method_signature": "DeclaredTypeCodegen.typeOf(FileSystemResource r)", "testcase": false, "constructor": false}, {"identifier": "DeclaredTypeCodegen", "parameters": "(Collection<Resource> resources)", "modifiers": "private", "return": "", "signature": " DeclaredTypeCodegen(Collection<Resource> resources)", "full_signature": "private  DeclaredTypeCodegen(Collection<Resource> resources)", "class_method_signature": "DeclaredTypeCodegen.DeclaredTypeCodegen(Collection<Resource> resources)", "testcase": false, "constructor": true}, {"identifier": "setPackageName", "parameters": "(String packageName)", "modifiers": "@Override public", "return": "void", "signature": "void setPackageName(String packageName)", "full_signature": "@Override public void setPackageName(String packageName)", "class_method_signature": "DeclaredTypeCodegen.setPackageName(String packageName)", "testcase": false, "constructor": false}, {"identifier": "setDependencyInjection", "parameters": "(DependencyInjectionAnnotator annotator)", "modifiers": "public", "return": "void", "signature": "void setDependencyInjection(DependencyInjectionAnnotator annotator)", "full_signature": "public void setDependencyInjection(DependencyInjectionAnnotator annotator)", "class_method_signature": "DeclaredTypeCodegen.setDependencyInjection(DependencyInjectionAnnotator annotator)", "testcase": false, "constructor": false}, {"identifier": "section", "parameters": "()", "modifiers": "@Override public", "return": "ApplicationSection", "signature": "ApplicationSection section()", "full_signature": "@Override public ApplicationSection section()", "class_method_signature": "DeclaredTypeCodegen.section()", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "List<org.kie.kogito.codegen.GeneratedFile>", "signature": "List<org.kie.kogito.codegen.GeneratedFile> generate()", "full_signature": "public List<org.kie.kogito.codegen.GeneratedFile> generate()", "class_method_signature": "DeclaredTypeCodegen.generate()", "testcase": false, "constructor": false}, {"identifier": "updateConfig", "parameters": "(ConfigGenerator cfg)", "modifiers": "@Override public", "return": "void", "signature": "void updateConfig(ConfigGenerator cfg)", "full_signature": "@Override public void updateConfig(ConfigGenerator cfg)", "class_method_signature": "DeclaredTypeCodegen.updateConfig(ConfigGenerator cfg)", "testcase": false, "constructor": false}, {"identifier": "withClassLoader", "parameters": "(ClassLoader projectClassLoader)", "modifiers": "public", "return": "DeclaredTypeCodegen", "signature": "DeclaredTypeCodegen withClassLoader(ClassLoader projectClassLoader)", "full_signature": "public DeclaredTypeCodegen withClassLoader(ClassLoader projectClassLoader)", "class_method_signature": "DeclaredTypeCodegen.withClassLoader(ClassLoader projectClassLoader)", "testcase": false, "constructor": false}], "file": "kogito-codegen/src/main/java/org/kie/kogito/codegen/rules/DeclaredTypeCodegen.java"}, "focal_method": {"identifier": "ofPath", "parameters": "(Path basePath)", "modifiers": "public static", "return": "DeclaredTypeCodegen", "body": "public static DeclaredTypeCodegen ofPath(Path basePath) {\n        try {\n            Stream<File> files = Files.walk(basePath).map(Path::toFile);\n            Set<Resource> resources = toResources(files);\n            return new DeclaredTypeCodegen(resources);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "DeclaredTypeCodegen ofPath(Path basePath)", "full_signature": "public static DeclaredTypeCodegen ofPath(Path basePath)", "class_method_signature": "DeclaredTypeCodegen.ofPath(Path basePath)", "testcase": false, "constructor": false, "invocations": ["map", "walk", "toResources"]}, "repository": {"repo_id": 174306645, "url": "https://github.com/kiegroup/kogito-runtimes", "stars": 78, "created": "3/7/2019 8:49:09 AM +00:00", "updates": "2020-01-26T20:41:49+00:00", "fork": "False", "license": "licensed"}}