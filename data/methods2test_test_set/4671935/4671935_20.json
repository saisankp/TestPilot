{"test_class": {"identifier": "TrackDataTrimmerTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/tracks/TrackDataTrimmerTest.java"}, "test_case": {"identifier": "autoTrim", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void autoTrim() {\n        List<MLocation> untrimmed = new ArrayList<>();\n        addPoints(untrimmed, 0, 100);\n        addPoints(untrimmed, -20, 100);\n        addPoints(untrimmed, 0, 100);\n        List<MLocation> trimmed = TrackDataTrimmer.autoTrim(untrimmed);\n        assertEquals(200, trimmed.size());\n    }", "signature": "void autoTrim()", "full_signature": "@Test public void autoTrim()", "class_method_signature": "TrackDataTrimmerTest.autoTrim()", "testcase": true, "constructor": false, "invocations": ["addPoints", "addPoints", "addPoints", "autoTrim", "assertEquals", "size"]}, "focal_class": {"identifier": "TrackDataTrimmer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "autoTrim", "parameters": "(@NonNull List<MLocation> points)", "modifiers": "@NonNull static", "return": "List<MLocation>", "signature": "List<MLocation> autoTrim(@NonNull List<MLocation> points)", "full_signature": "@NonNull static List<MLocation> autoTrim(@NonNull List<MLocation> points)", "class_method_signature": "TrackDataTrimmer.autoTrim(@NonNull List<MLocation> points)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/tracks/TrackDataTrimmer.java"}, "focal_method": {"identifier": "autoTrim", "parameters": "(@NonNull List<MLocation> points)", "modifiers": "@NonNull static", "return": "List<MLocation>", "body": "@NonNull\n    static List<MLocation> autoTrim(@NonNull List<MLocation> points) {\n        // Margin size is the number of data points on either side of the jump\n        // TODO: Use time instead of samples\n        final int margin_size = 50;\n        final int n = points.size();\n        // Scan data\n        int index_start = 0;\n        int index_end = n;\n        for (int i = 0; i < n; i++) {\n            final MLocation point = points.get(i);\n            if (index_start == 0 && point.climb < -4) {\n                index_start = i;\n            }\n            if (point.climb < -2.5 && index_start < i) {\n                index_end = i;\n            }\n        }\n        // Conform to list bounds\n        index_start = Math.max(index_start - margin_size, 0);\n        index_end = Math.min(index_end + margin_size + 1, n);\n        return points.subList(index_start, index_end);\n    }", "signature": "List<MLocation> autoTrim(@NonNull List<MLocation> points)", "full_signature": "@NonNull static List<MLocation> autoTrim(@NonNull List<MLocation> points)", "class_method_signature": "TrackDataTrimmer.autoTrim(@NonNull List<MLocation> points)", "testcase": false, "constructor": false, "invocations": ["size", "get", "max", "min", "subList"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}