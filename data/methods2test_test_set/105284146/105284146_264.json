{"test_class": {"identifier": "DefaultNetworkReducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NHV1_NHV2_1 = \"NHV1_NHV2_1\";", "modifier": "private static final", "type": "String", "declarator": "NHV1_NHV2_1 = \"NHV1_NHV2_1\"", "var_name": "NHV1_NHV2_1"}, {"original_string": "private static final String NHV1_NHV2_2 = \"NHV1_NHV2_2\";", "modifier": "private static final", "type": "String", "declarator": "NHV1_NHV2_2 = \"NHV1_NHV2_2\"", "var_name": "NHV1_NHV2_2"}, {"original_string": "@Rule\n    public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "iidm/iidm-reducer/src/test/java/com/powsybl/iidm/reducer/DefaultNetworkReducerTest.java"}, "test_case": {"identifier": "testLoad2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoad2() {\n        Network network = EurostagTutorialExample1Factory.createWithLFResults();\n\n        NetworkReducerObserverImpl observer = new NetworkReducerObserverImpl();\n\n        NetworkReducer reducer = NetworkReducer.builder()\n                .withNetworkPredicate(new NominalVoltageNetworkPredicate(225.0, 400.0))\n                .withObservers(observer)\n                .build();\n        reducer.reduce(network);\n\n        assertEquals(2, network.getSubstationCount());\n        assertEquals(2, network.getVoltageLevelCount());\n        assertEquals(0, network.getTwoWindingsTransformerCount());\n        assertEquals(2, network.getLineCount());\n        assertEquals(0, network.getGeneratorCount());\n        assertEquals(2, network.getLoadCount());\n        assertEquals(0, network.getDanglingLineCount());\n\n        Load load1 = network.getLoad(\"NGEN_NHV1\");\n        assertNotNull(load1);\n        assertEquals(LoadType.FICTITIOUS, load1.getLoadType());\n        assertEquals(-604.8909301757812, load1.getP0(), 0.0);\n        assertEquals(-197.48046875, load1.getQ0(), 0.0);\n        assertEquals(-604.8909301757812, load1.getTerminal().getP(), 0.0);\n        assertEquals(-197.48046875, load1.getTerminal().getQ(), 0.0);\n\n        Load load2 = network.getLoad(\"NHV2_NLOAD\");\n        assertNotNull(load2);\n        assertEquals(LoadType.FICTITIOUS, load2.getLoadType());\n        assertEquals(600.8677978515625, load2.getP0(), 0.0);\n        assertEquals(274.3769836425781, load2.getQ0(), 0.0);\n        assertEquals(600.8677978515625, load2.getTerminal().getP(), 0.0);\n        assertEquals(274.3769836425781, load2.getTerminal().getQ(), 0.0);\n\n        assertEquals(0, observer.getSubstationRemovedCount());\n        assertEquals(2, observer.getVoltageLevelRemovedCount());\n        assertEquals(0, observer.getLineReplacedCount());\n        assertEquals(0, observer.getLineRemovedCount());\n        assertEquals(2, observer.getTwoWindingsTransformerReplacedCount());\n        assertEquals(2, observer.getTwoWindingsTransformerRemovedCount());\n        assertEquals(0, observer.getThreeWindingsTransformerReplacedCount());\n        assertEquals(0, observer.getThreeWindingsTransformerRemovedCount());\n        assertEquals(0, observer.getHvdcLineRemovedCount());\n        assertEquals(0, observer.getHvdcLineRemovedCount());\n    }", "signature": "void testLoad2()", "full_signature": "@Test public void testLoad2()", "class_method_signature": "DefaultNetworkReducerTest.testLoad2()", "testcase": true, "constructor": false, "invocations": ["createWithLFResults", "build", "withObservers", "withNetworkPredicate", "builder", "reduce", "assertEquals", "getSubstationCount", "assertEquals", "getVoltageLevelCount", "assertEquals", "getTwoWindingsTransformerCount", "assertEquals", "getLineCount", "assertEquals", "getGeneratorCount", "assertEquals", "getLoadCount", "assertEquals", "getDanglingLineCount", "getLoad", "assertNotNull", "assertEquals", "getLoadType", "assertEquals", "getP0", "assertEquals", "getQ0", "assertEquals", "getP", "getTerminal", "assertEquals", "getQ", "getTerminal", "getLoad", "assertNotNull", "assertEquals", "getLoadType", "assertEquals", "getP0", "assertEquals", "getQ0", "assertEquals", "getP", "getTerminal", "assertEquals", "getQ", "getTerminal", "assertEquals", "getSubstationRemovedCount", "assertEquals", "getVoltageLevelRemovedCount", "assertEquals", "getLineReplacedCount", "assertEquals", "getLineRemovedCount", "assertEquals", "getTwoWindingsTransformerReplacedCount", "assertEquals", "getTwoWindingsTransformerRemovedCount", "assertEquals", "getThreeWindingsTransformerReplacedCount", "assertEquals", "getThreeWindingsTransformerRemovedCount", "assertEquals", "getHvdcLineRemovedCount", "assertEquals", "getHvdcLineRemovedCount"]}, "focal_class": {"identifier": "DefaultNetworkReducer", "superclass": "extends AbstractNetworkReducer", "interfaces": "", "fields": [{"original_string": "private final ReductionOptions options;", "modifier": "private final", "type": "ReductionOptions", "declarator": "options", "var_name": "options"}, {"original_string": "private final List<NetworkReducerObserver> observers = new ArrayList<>();", "modifier": "private final", "type": "List<NetworkReducerObserver>", "declarator": "observers = new ArrayList<>()", "var_name": "observers"}], "methods": [{"identifier": "DefaultNetworkReducer", "parameters": "(NetworkPredicate predicate, ReductionOptions options)", "modifiers": "public", "return": "", "signature": " DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options)", "full_signature": "public  DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options)", "class_method_signature": "DefaultNetworkReducer.DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options)", "testcase": false, "constructor": true}, {"identifier": "DefaultNetworkReducer", "parameters": "(NetworkPredicate predicate, ReductionOptions options, NetworkReducerObserver... observers)", "modifiers": "public", "return": "", "signature": " DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options, NetworkReducerObserver... observers)", "full_signature": "public  DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options, NetworkReducerObserver... observers)", "class_method_signature": "DefaultNetworkReducer.DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options, NetworkReducerObserver... observers)", "testcase": false, "constructor": true}, {"identifier": "DefaultNetworkReducer", "parameters": "(NetworkPredicate predicate, ReductionOptions options, List<NetworkReducerObserver> observers)", "modifiers": "public", "return": "", "signature": " DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options, List<NetworkReducerObserver> observers)", "full_signature": "public  DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options, List<NetworkReducerObserver> observers)", "class_method_signature": "DefaultNetworkReducer.DefaultNetworkReducer(NetworkPredicate predicate, ReductionOptions options, List<NetworkReducerObserver> observers)", "testcase": false, "constructor": true}, {"identifier": "reduce", "parameters": "(Substation substation)", "modifiers": "@Override protected", "return": "void", "signature": "void reduce(Substation substation)", "full_signature": "@Override protected void reduce(Substation substation)", "class_method_signature": "DefaultNetworkReducer.reduce(Substation substation)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(VoltageLevel voltageLevel)", "modifiers": "@Override protected", "return": "void", "signature": "void reduce(VoltageLevel voltageLevel)", "full_signature": "@Override protected void reduce(VoltageLevel voltageLevel)", "class_method_signature": "DefaultNetworkReducer.reduce(VoltageLevel voltageLevel)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(Line line)", "modifiers": "@Override protected", "return": "void", "signature": "void reduce(Line line)", "full_signature": "@Override protected void reduce(Line line)", "class_method_signature": "DefaultNetworkReducer.reduce(Line line)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(TwoWindingsTransformer transformer)", "modifiers": "@Override protected", "return": "void", "signature": "void reduce(TwoWindingsTransformer transformer)", "full_signature": "@Override protected void reduce(TwoWindingsTransformer transformer)", "class_method_signature": "DefaultNetworkReducer.reduce(TwoWindingsTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(ThreeWindingsTransformer transformer)", "modifiers": "@Override protected", "return": "void", "signature": "void reduce(ThreeWindingsTransformer transformer)", "full_signature": "@Override protected void reduce(ThreeWindingsTransformer transformer)", "class_method_signature": "DefaultNetworkReducer.reduce(ThreeWindingsTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(HvdcLine hvdcLine)", "modifiers": "@Override protected", "return": "void", "signature": "void reduce(HvdcLine hvdcLine)", "full_signature": "@Override protected void reduce(HvdcLine hvdcLine)", "class_method_signature": "DefaultNetworkReducer.reduce(HvdcLine hvdcLine)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(Line line, VoltageLevel vl, Terminal terminal)", "modifiers": "private", "return": "void", "signature": "void reduce(Line line, VoltageLevel vl, Terminal terminal)", "full_signature": "private void reduce(Line line, VoltageLevel vl, Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.reduce(Line line, VoltageLevel vl, Terminal terminal)", "testcase": false, "constructor": false}, {"identifier": "replaceLineByLoad", "parameters": "(Line line, VoltageLevel vl, Terminal terminal)", "modifiers": "private", "return": "void", "signature": "void replaceLineByLoad(Line line, VoltageLevel vl, Terminal terminal)", "full_signature": "private void replaceLineByLoad(Line line, VoltageLevel vl, Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.replaceLineByLoad(Line line, VoltageLevel vl, Terminal terminal)", "testcase": false, "constructor": false}, {"identifier": "replaceLineByDanglingLine", "parameters": "(Line line, VoltageLevel vl, Terminal terminal)", "modifiers": "private", "return": "void", "signature": "void replaceLineByDanglingLine(Line line, VoltageLevel vl, Terminal terminal)", "full_signature": "private void replaceLineByDanglingLine(Line line, VoltageLevel vl, Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.replaceLineByDanglingLine(Line line, VoltageLevel vl, Terminal terminal)", "testcase": false, "constructor": false}, {"identifier": "replaceTransformerByLoad", "parameters": "(TwoWindingsTransformer transformer, VoltageLevel vl, Terminal terminal)", "modifiers": "private", "return": "void", "signature": "void replaceTransformerByLoad(TwoWindingsTransformer transformer, VoltageLevel vl, Terminal terminal)", "full_signature": "private void replaceTransformerByLoad(TwoWindingsTransformer transformer, VoltageLevel vl, Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.replaceTransformerByLoad(TwoWindingsTransformer transformer, VoltageLevel vl, Terminal terminal)", "testcase": false, "constructor": false}, {"identifier": "replaceBranchByLoad", "parameters": "(Branch<?> branch, VoltageLevel vl, Terminal terminal)", "modifiers": "private", "return": "Load", "signature": "Load replaceBranchByLoad(Branch<?> branch, VoltageLevel vl, Terminal terminal)", "full_signature": "private Load replaceBranchByLoad(Branch<?> branch, VoltageLevel vl, Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.replaceBranchByLoad(Branch<?> branch, VoltageLevel vl, Terminal terminal)", "testcase": false, "constructor": false}, {"identifier": "fillNodeOrBus", "parameters": "(InjectionAdder adder, Terminal terminal)", "modifiers": "private static", "return": "void", "signature": "void fillNodeOrBus(InjectionAdder adder, Terminal terminal)", "full_signature": "private static void fillNodeOrBus(InjectionAdder adder, Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.fillNodeOrBus(InjectionAdder adder, Terminal terminal)", "testcase": false, "constructor": false}, {"identifier": "checkP", "parameters": "(Terminal terminal)", "modifiers": "private static", "return": "double", "signature": "double checkP(Terminal terminal)", "full_signature": "private static double checkP(Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.checkP(Terminal terminal)", "testcase": false, "constructor": false}, {"identifier": "checkQ", "parameters": "(Terminal terminal)", "modifiers": "private static", "return": "double", "signature": "double checkQ(Terminal terminal)", "full_signature": "private static double checkQ(Terminal terminal)", "class_method_signature": "DefaultNetworkReducer.checkQ(Terminal terminal)", "testcase": false, "constructor": false}], "file": "iidm/iidm-reducer/src/main/java/com/powsybl/iidm/reducer/DefaultNetworkReducer.java"}, "focal_method": {"identifier": "reduce", "parameters": "(Substation substation)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void reduce(Substation substation) {\n        substation.remove();\n        observers.forEach(o -> o.substationRemoved(substation));\n    }", "signature": "void reduce(Substation substation)", "full_signature": "@Override protected void reduce(Substation substation)", "class_method_signature": "DefaultNetworkReducer.reduce(Substation substation)", "testcase": false, "constructor": false, "invocations": ["remove", "forEach", "substationRemoved"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}