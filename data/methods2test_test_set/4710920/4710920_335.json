{"test_class": {"identifier": "UnsafeStringReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/io/UnsafeStringReaderTest.java"}, "test_case": {"identifier": "testSkip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSkip() throws IOException {\n        UnsafeStringReader reader = new UnsafeStringReader(\"abc\");\n        assertThat(reader.ready(), is(true));\n        reader.skip(1);\n        assertThat(reader.read(), is((int) 'b'));\n    }", "signature": "void testSkip()", "full_signature": "@Test public void testSkip()", "class_method_signature": "UnsafeStringReaderTest.testSkip()", "testcase": true, "constructor": false, "invocations": ["assertThat", "ready", "is", "skip", "assertThat", "read", "is"]}, "focal_class": {"identifier": "UnsafeStringReader", "superclass": "extends Reader", "interfaces": "", "fields": [{"original_string": "private String mString;", "modifier": "private", "type": "String", "declarator": "mString", "var_name": "mString"}, {"original_string": "private int mPosition, mLimit, mMark;", "modifier": "private", "type": "int", "declarator": "mPosition", "var_name": "mPosition"}], "methods": [{"identifier": "UnsafeStringReader", "parameters": "(String str)", "modifiers": "public", "return": "", "signature": " UnsafeStringReader(String str)", "full_signature": "public  UnsafeStringReader(String str)", "class_method_signature": "UnsafeStringReader.UnsafeStringReader(String str)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int read()", "full_signature": "@Override public int read()", "class_method_signature": "UnsafeStringReader.read()", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(char[] cs, int off, int len)", "modifiers": "@Override public", "return": "int", "signature": "int read(char[] cs, int off, int len)", "full_signature": "@Override public int read(char[] cs, int off, int len)", "class_method_signature": "UnsafeStringReader.read(char[] cs, int off, int len)", "testcase": false, "constructor": false}, {"identifier": "skip", "parameters": "(long ns)", "modifiers": "@Override public", "return": "long", "signature": "long skip(long ns)", "full_signature": "@Override public long skip(long ns)", "class_method_signature": "UnsafeStringReader.skip(long ns)", "testcase": false, "constructor": false}, {"identifier": "ready", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean ready()", "full_signature": "@Override public boolean ready()", "class_method_signature": "UnsafeStringReader.ready()", "testcase": false, "constructor": false}, {"identifier": "markSupported", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean markSupported()", "full_signature": "@Override public boolean markSupported()", "class_method_signature": "UnsafeStringReader.markSupported()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(int readAheadLimit)", "modifiers": "@Override public", "return": "void", "signature": "void mark(int readAheadLimit)", "full_signature": "@Override public void mark(int readAheadLimit)", "class_method_signature": "UnsafeStringReader.mark(int readAheadLimit)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "UnsafeStringReader.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "UnsafeStringReader.close()", "testcase": false, "constructor": false}, {"identifier": "ensureOpen", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void ensureOpen()", "full_signature": "private void ensureOpen()", "class_method_signature": "UnsafeStringReader.ensureOpen()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/io/UnsafeStringReader.java"}, "focal_method": {"identifier": "skip", "parameters": "(long ns)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long skip(long ns) throws IOException {\n        ensureOpen();\n        if (mPosition >= mLimit) {\n            return 0;\n        }\n\n        long n = Math.min(mLimit - mPosition, ns);\n        n = Math.max(-mPosition, n);\n        mPosition += n;\n        return n;\n    }", "signature": "long skip(long ns)", "full_signature": "@Override public long skip(long ns)", "class_method_signature": "UnsafeStringReader.skip(long ns)", "testcase": false, "constructor": false, "invocations": ["ensureOpen", "min", "max"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}