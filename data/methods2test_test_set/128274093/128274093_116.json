{"test_class": {"identifier": "PublishSubjectTest", "superclass": "extends SubjectTest<Integer>", "interfaces": "", "fields": [{"original_string": "private final Throwable testException = new Throwable();", "modifier": "private final", "type": "Throwable", "declarator": "testException = new Throwable()", "var_name": "testException"}], "file": "rxjava/src/test/java/io/reactivex/subjects/PublishSubjectTest.java"}, "test_case": {"identifier": "addRemoveRance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addRemoveRance() throws Exception {\n\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final PublishSubject<Integer> ps = PublishSubject.create();\n\n            final TestObserver<Integer> to = ps.test();\n\n            Runnable r1 = new Runnable() {\n                @Override\n                public void run() {\n                    ps.subscribe();\n                }\n            };\n            Runnable r2 = new Runnable() {\n                @Override\n                public void run() {\n                    to.cancel();\n                }\n            };\n\n            TestHelper.race(r1, r2);\n        }\n    }", "signature": "void addRemoveRance()", "full_signature": "@Test public void addRemoveRance()", "class_method_signature": "PublishSubjectTest.addRemoveRance()", "testcase": true, "constructor": false, "invocations": ["create", "test", "subscribe", "cancel", "race"]}, "focal_class": {"identifier": "PublishSubject", "superclass": "extends Subject<T>", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final PublishDisposable[] TERMINATED = new PublishDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "PublishDisposable[]", "declarator": "TERMINATED = new PublishDisposable[0]", "var_name": "TERMINATED"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final PublishDisposable[] EMPTY = new PublishDisposable[0];", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "PublishDisposable[]", "declarator": "EMPTY = new PublishDisposable[0]", "var_name": "EMPTY"}, {"original_string": "final AtomicReference<PublishDisposable<T>[]> subscribers;", "modifier": "final", "type": "AtomicReference<PublishDisposable<T>[]>", "declarator": "subscribers", "var_name": "subscribers"}, {"original_string": "Throwable error;", "modifier": "", "type": "Throwable", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "PublishSubject<T>", "signature": "PublishSubject<T> create()", "full_signature": "@CheckReturnValue @NonNull public static PublishSubject<T> create()", "class_method_signature": "PublishSubject.create()", "testcase": false, "constructor": false}, {"identifier": "PublishSubject", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "", "signature": " PublishSubject()", "full_signature": "@SuppressWarnings(\"unchecked\")  PublishSubject()", "class_method_signature": "PublishSubject.PublishSubject()", "testcase": false, "constructor": true}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> t)", "modifiers": "@Override public", "return": "void", "signature": "void subscribeActual(Observer<? super T> t)", "full_signature": "@Override public void subscribeActual(Observer<? super T> t)", "class_method_signature": "PublishSubject.subscribeActual(Observer<? super T> t)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(PublishDisposable<T> ps)", "modifiers": "", "return": "boolean", "signature": "boolean add(PublishDisposable<T> ps)", "full_signature": " boolean add(PublishDisposable<T> ps)", "class_method_signature": "PublishSubject.add(PublishDisposable<T> ps)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(PublishDisposable<T> ps)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "void", "signature": "void remove(PublishDisposable<T> ps)", "full_signature": "@SuppressWarnings(\"unchecked\") void remove(PublishDisposable<T> ps)", "class_method_signature": "PublishSubject.remove(PublishDisposable<T> ps)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Disposable s)", "modifiers": "@Override public", "return": "void", "signature": "void onSubscribe(Disposable s)", "full_signature": "@Override public void onSubscribe(Disposable s)", "class_method_signature": "PublishSubject.onSubscribe(Disposable s)", "testcase": false, "constructor": false}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "PublishSubject.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(Throwable t)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onError(Throwable t)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onError(Throwable t)", "class_method_signature": "PublishSubject.onError(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "onComplete", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void onComplete()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void onComplete()", "class_method_signature": "PublishSubject.onComplete()", "testcase": false, "constructor": false}, {"identifier": "hasObservers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasObservers()", "full_signature": "@Override public boolean hasObservers()", "class_method_signature": "PublishSubject.hasObservers()", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "()", "modifiers": "@Override @Nullable public", "return": "Throwable", "signature": "Throwable getThrowable()", "full_signature": "@Override @Nullable public Throwable getThrowable()", "class_method_signature": "PublishSubject.getThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasThrowable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasThrowable()", "full_signature": "@Override public boolean hasThrowable()", "class_method_signature": "PublishSubject.hasThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasComplete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasComplete()", "full_signature": "@Override public boolean hasComplete()", "class_method_signature": "PublishSubject.hasComplete()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/subjects/PublishSubject.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "@CheckReturnValue @NonNull public static", "return": "PublishSubject<T>", "body": "@CheckReturnValue\n    @NonNull\n    public static <T> PublishSubject<T> create() {\n        return new PublishSubject<T>();\n    }", "signature": "PublishSubject<T> create()", "full_signature": "@CheckReturnValue @NonNull public static PublishSubject<T> create()", "class_method_signature": "PublishSubject.create()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}