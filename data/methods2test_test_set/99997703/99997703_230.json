{"test_class": {"identifier": "EitherTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/utils/EitherTest.java"}, "test_case": {"identifier": "leftOnly_withRight_fails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void leftOnly_withRight_fails() {\n        Either<String, Integer> e = Either.createRight(1);\n        assertThrows(IllegalStateException.class, e::leftOnly);\n    }", "signature": "void leftOnly_withRight_fails()", "full_signature": "@Test public void leftOnly_withRight_fails()", "class_method_signature": "EitherTest.leftOnly_withRight_fails()", "testcase": true, "constructor": false, "invocations": ["createRight", "assertThrows"]}, "focal_class": {"identifier": "Either", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createLeft", "parameters": "(C value)", "modifiers": "public static", "return": "Either<C, D>", "signature": "Either<C, D> createLeft(C value)", "full_signature": "public static Either<C, D> createLeft(C value)", "class_method_signature": "Either.createLeft(C value)", "testcase": false, "constructor": false}, {"identifier": "createRight", "parameters": "(D value)", "modifiers": "public static", "return": "Either<C, D>", "signature": "Either<C, D> createRight(D value)", "full_signature": "public static Either<C, D> createRight(D value)", "class_method_signature": "Either.createRight(D value)", "testcase": false, "constructor": false}, {"identifier": "createRight", "parameters": "(Optional<D> value, C ifNotPresent)", "modifiers": "public static", "return": "Either<C, D>", "signature": "Either<C, D> createRight(Optional<D> value, C ifNotPresent)", "full_signature": "public static Either<C, D> createRight(Optional<D> value, C ifNotPresent)", "class_method_signature": "Either.createRight(Optional<D> value, C ifNotPresent)", "testcase": false, "constructor": false}, {"identifier": "createRight", "parameters": "(Optional<D> value, Supplier<C> ifNotPresent)", "modifiers": "public static", "return": "Either<C, D>", "signature": "Either<C, D> createRight(Optional<D> value, Supplier<C> ifNotPresent)", "full_signature": "public static Either<C, D> createRight(Optional<D> value, Supplier<C> ifNotPresent)", "class_method_signature": "Either.createRight(Optional<D> value, Supplier<C> ifNotPresent)", "testcase": false, "constructor": false}, {"identifier": "isLeft", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isLeft()", "full_signature": "public abstract boolean isLeft()", "class_method_signature": "Either.isLeft()", "testcase": false, "constructor": false}, {"identifier": "isRight", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isRight()", "full_signature": "public abstract boolean isRight()", "class_method_signature": "Either.isRight()", "testcase": false, "constructor": false}, {"identifier": "left", "parameters": "()", "modifiers": "public", "return": "LeftProjection<A, B>", "signature": "LeftProjection<A, B> left()", "full_signature": "public LeftProjection<A, B> left()", "class_method_signature": "Either.left()", "testcase": false, "constructor": false}, {"identifier": "right", "parameters": "()", "modifiers": "public", "return": "RightProjection<A, B>", "signature": "RightProjection<A, B> right()", "full_signature": "public RightProjection<A, B> right()", "class_method_signature": "Either.right()", "testcase": false, "constructor": false}, {"identifier": "leftValue", "parameters": "()", "modifiers": "public abstract", "return": "A", "signature": "A leftValue()", "full_signature": "public abstract A leftValue()", "class_method_signature": "Either.leftValue()", "testcase": false, "constructor": false}, {"identifier": "rightValue", "parameters": "()", "modifiers": "public abstract", "return": "B", "signature": "B rightValue()", "full_signature": "public abstract B rightValue()", "class_method_signature": "Either.rightValue()", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "()", "modifiers": "public abstract", "return": "Either<B, A>", "signature": "Either<B, A> swap()", "full_signature": "public abstract Either<B, A> swap()", "class_method_signature": "Either.swap()", "testcase": false, "constructor": false}, {"identifier": "leftOnly", "parameters": "()", "modifiers": "public abstract", "return": "Either<A, C>", "signature": "Either<A, C> leftOnly()", "full_signature": "public abstract Either<A, C> leftOnly()", "class_method_signature": "Either.leftOnly()", "testcase": false, "constructor": false}, {"identifier": "rightOnly", "parameters": "()", "modifiers": "public abstract", "return": "Either<C, B>", "signature": "Either<C, B> rightOnly()", "full_signature": "public abstract Either<C, B> rightOnly()", "class_method_signature": "Either.rightOnly()", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Function<B, C> functor)", "modifiers": "public", "return": "Either<A, C>", "signature": "Either<A, C> map(Function<B, C> functor)", "full_signature": "public Either<A, C> map(Function<B, C> functor)", "class_method_signature": "Either.map(Function<B, C> functor)", "testcase": false, "constructor": false}, {"identifier": "bimap", "parameters": "(Function<A, C> leftMap, Function<B, D> rightMap)", "modifiers": "public abstract", "return": "Either<C, D>", "signature": "Either<C, D> bimap(Function<A, C> leftMap, Function<B, D> rightMap)", "full_signature": "public abstract Either<C, D> bimap(Function<A, C> leftMap, Function<B, D> rightMap)", "class_method_signature": "Either.bimap(Function<A, C> leftMap, Function<B, D> rightMap)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(Function<A, C> leftReduce, Function<B, C> rightReduce)", "modifiers": "public abstract", "return": "C", "signature": "C reduce(Function<A, C> leftReduce, Function<B, C> rightReduce)", "full_signature": "public abstract C reduce(Function<A, C> leftReduce, Function<B, C> rightReduce)", "class_method_signature": "Either.reduce(Function<A, C> leftReduce, Function<B, C> rightReduce)", "testcase": false, "constructor": false}, {"identifier": "reduceToDouble", "parameters": "(ToDoubleFunction<A> leftReduce, ToDoubleFunction<B> rightReduce)", "modifiers": "public abstract", "return": "double", "signature": "double reduceToDouble(ToDoubleFunction<A> leftReduce, ToDoubleFunction<B> rightReduce)", "full_signature": "public abstract double reduceToDouble(ToDoubleFunction<A> leftReduce, ToDoubleFunction<B> rightReduce)", "class_method_signature": "Either.reduceToDouble(ToDoubleFunction<A> leftReduce, ToDoubleFunction<B> rightReduce)", "testcase": false, "constructor": false}, {"identifier": "reduceToInt", "parameters": "(ToIntFunction<A> leftReduce, ToIntFunction<B> rightReduce)", "modifiers": "public abstract", "return": "int", "signature": "int reduceToInt(ToIntFunction<A> leftReduce, ToIntFunction<B> rightReduce)", "full_signature": "public abstract int reduceToInt(ToIntFunction<A> leftReduce, ToIntFunction<B> rightReduce)", "class_method_signature": "Either.reduceToInt(ToIntFunction<A> leftReduce, ToIntFunction<B> rightReduce)", "testcase": false, "constructor": false}, {"identifier": "reduceToBoolean", "parameters": "(Predicate<A> leftReduce, Predicate<B> rightReduce)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean reduceToBoolean(Predicate<A> leftReduce, Predicate<B> rightReduce)", "full_signature": "public abstract boolean reduceToBoolean(Predicate<A> leftReduce, Predicate<B> rightReduce)", "class_method_signature": "Either.reduceToBoolean(Predicate<A> leftReduce, Predicate<B> rightReduce)", "testcase": false, "constructor": false}, {"identifier": "reduceLeft", "parameters": "(Function<A, B> reduceLeft)", "modifiers": "public abstract", "return": "B", "signature": "B reduceLeft(Function<A, B> reduceLeft)", "full_signature": "public abstract B reduceLeft(Function<A, B> reduceLeft)", "class_method_signature": "Either.reduceLeft(Function<A, B> reduceLeft)", "testcase": false, "constructor": false}, {"identifier": "reduceRight", "parameters": "(Function<B, A> reduceRight)", "modifiers": "public abstract", "return": "A", "signature": "A reduceRight(Function<B, A> reduceRight)", "full_signature": "public abstract A reduceRight(Function<B, A> reduceRight)", "class_method_signature": "Either.reduceRight(Function<B, A> reduceRight)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Consumer<A> leftConsumer, Consumer<B> rightConsumer)", "modifiers": "public abstract", "return": "void", "signature": "void accept(Consumer<A> leftConsumer, Consumer<B> rightConsumer)", "full_signature": "public abstract void accept(Consumer<A> leftConsumer, Consumer<B> rightConsumer)", "class_method_signature": "Either.accept(Consumer<A> leftConsumer, Consumer<B> rightConsumer)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(Function<B, Either<A, C>> mapper)", "modifiers": "public abstract", "return": "Either<A, C>", "signature": "Either<A, C> flatMap(Function<B, Either<A, C>> mapper)", "full_signature": "public abstract Either<A, C> flatMap(Function<B, Either<A, C>> mapper)", "class_method_signature": "Either.flatMap(Function<B, Either<A, C>> mapper)", "testcase": false, "constructor": false}, {"identifier": "toOptional", "parameters": "()", "modifiers": "public abstract", "return": "Optional<B>", "signature": "Optional<B> toOptional()", "full_signature": "public abstract Optional<B> toOptional()", "class_method_signature": "Either.toOptional()", "testcase": false, "constructor": false}, {"identifier": "testEither", "parameters": "(Predicate<A> leftCheck, Predicate<B> rightCheck)", "modifiers": "public abstract", "return": "boolean", "signature": "boolean testEither(Predicate<A> leftCheck, Predicate<B> rightCheck)", "full_signature": "public abstract boolean testEither(Predicate<A> leftCheck, Predicate<B> rightCheck)", "class_method_signature": "Either.testEither(Predicate<A> leftCheck, Predicate<B> rightCheck)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<B> acceptor, A onNotAccepted)", "modifiers": "public abstract", "return": "Either<A, B>", "signature": "Either<A, B> filter(Predicate<B> acceptor, A onNotAccepted)", "full_signature": "public abstract Either<A, B> filter(Predicate<B> acceptor, A onNotAccepted)", "class_method_signature": "Either.filter(Predicate<B> acceptor, A onNotAccepted)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<B> acceptor, Supplier<A> onNotAccepted)", "modifiers": "public abstract", "return": "Either<A, B>", "signature": "Either<A, B> filter(Predicate<B> acceptor, Supplier<A> onNotAccepted)", "full_signature": "public abstract Either<A, B> filter(Predicate<B> acceptor, Supplier<A> onNotAccepted)", "class_method_signature": "Either.filter(Predicate<B> acceptor, Supplier<A> onNotAccepted)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/utils/Either.java"}, "focal_method": {"identifier": "createRight", "parameters": "(D value)", "modifiers": "public static", "return": "Either<C, D>", "body": "public static <C, D> Either<C, D> createRight(D value) {\n        return new Right<>(value);\n    }", "signature": "Either<C, D> createRight(D value)", "full_signature": "public static Either<C, D> createRight(D value)", "class_method_signature": "Either.createRight(D value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}