{"test_class": {"identifier": "PathHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static PathHelper pathHelper = new PathHelper();", "modifier": "private static", "type": "PathHelper", "declarator": "pathHelper = new PathHelper()", "var_name": "pathHelper"}], "file": "http/src/test/java/ro/polak/http/PathHelperTest.java"}, "test_case": {"identifier": "shouldNotAcceptInvalidCharacters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotAcceptInvalidCharacters() {\n        assertThat(pathHelper.isPathContainingIllegalCharacters(\"somepath../\"), is(false));\n        assertThat(pathHelper.isPathContainingIllegalCharacters(\"../somepath\"), is(true));\n        assertThat(pathHelper.isPathContainingIllegalCharacters(\"somepath/../\"), is(true));\n        assertThat(pathHelper.isPathContainingIllegalCharacters(null), is(true));\n    }", "signature": "void shouldNotAcceptInvalidCharacters()", "full_signature": "@Test public void shouldNotAcceptInvalidCharacters()", "class_method_signature": "PathHelperTest.shouldNotAcceptInvalidCharacters()", "testcase": true, "constructor": false, "invocations": ["assertThat", "isPathContainingIllegalCharacters", "is", "assertThat", "isPathContainingIllegalCharacters", "is", "assertThat", "isPathContainingIllegalCharacters", "is", "assertThat", "isPathContainingIllegalCharacters", "is"]}, "focal_class": {"identifier": "PathHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SLASH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "SLASH = \"/\"", "var_name": "SLASH"}], "methods": [{"identifier": "isPathContainingIllegalCharacters", "parameters": "(final String path)", "modifiers": "public", "return": "boolean", "signature": "boolean isPathContainingIllegalCharacters(final String path)", "full_signature": "public boolean isPathContainingIllegalCharacters(final String path)", "class_method_signature": "PathHelper.isPathContainingIllegalCharacters(final String path)", "testcase": false, "constructor": false}, {"identifier": "getNormalizedDirectoryPath", "parameters": "(final String path)", "modifiers": "public", "return": "String", "signature": "String getNormalizedDirectoryPath(final String path)", "full_signature": "public String getNormalizedDirectoryPath(final String path)", "class_method_signature": "PathHelper.getNormalizedDirectoryPath(final String path)", "testcase": false, "constructor": false}, {"identifier": "isDirectoryPath", "parameters": "(final String originalPath)", "modifiers": "public", "return": "boolean", "signature": "boolean isDirectoryPath(final String originalPath)", "full_signature": "public boolean isDirectoryPath(final String originalPath)", "class_method_signature": "PathHelper.isDirectoryPath(final String originalPath)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/PathHelper.java"}, "focal_method": {"identifier": "isPathContainingIllegalCharacters", "parameters": "(final String path)", "modifiers": "public", "return": "boolean", "body": "public boolean isPathContainingIllegalCharacters(final String path) {\n        return path == null || path.startsWith(\"../\") || path.indexOf(\"/../\") != -1;\n    }", "signature": "boolean isPathContainingIllegalCharacters(final String path)", "full_signature": "public boolean isPathContainingIllegalCharacters(final String path)", "class_method_signature": "PathHelper.isPathContainingIllegalCharacters(final String path)", "testcase": false, "constructor": false, "invocations": ["startsWith", "indexOf"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}