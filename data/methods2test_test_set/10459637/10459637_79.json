{"test_class": {"identifier": "FirewallTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "protected MockFloodlightProvider mockFloodlightProvider;", "modifier": "protected", "type": "MockFloodlightProvider", "declarator": "mockFloodlightProvider", "var_name": "mockFloodlightProvider"}, {"original_string": "protected FloodlightContext cntx;", "modifier": "protected", "type": "FloodlightContext", "declarator": "cntx", "var_name": "cntx"}, {"original_string": "protected OFPacketIn packetIn;", "modifier": "protected", "type": "OFPacketIn", "declarator": "packetIn", "var_name": "packetIn"}, {"original_string": "protected IOFSwitch sw;", "modifier": "protected", "type": "IOFSwitch", "declarator": "sw", "var_name": "sw"}, {"original_string": "protected IPacket tcpPacket;", "modifier": "protected", "type": "IPacket", "declarator": "tcpPacket", "var_name": "tcpPacket"}, {"original_string": "protected IPacket broadcastARPPacket;", "modifier": "protected", "type": "IPacket", "declarator": "broadcastARPPacket", "var_name": "broadcastARPPacket"}, {"original_string": "protected IPacket ARPReplyPacket;", "modifier": "protected", "type": "IPacket", "declarator": "ARPReplyPacket", "var_name": "ARPReplyPacket"}, {"original_string": "protected IPacket broadcastIPPacket;", "modifier": "protected", "type": "IPacket", "declarator": "broadcastIPPacket", "var_name": "broadcastIPPacket"}, {"original_string": "protected IPacket tcpPacketReply;", "modifier": "protected", "type": "IPacket", "declarator": "tcpPacketReply", "var_name": "tcpPacketReply"}, {"original_string": "protected IPacket broadcastMalformedPacket;", "modifier": "protected", "type": "IPacket", "declarator": "broadcastMalformedPacket", "var_name": "broadcastMalformedPacket"}, {"original_string": "private Firewall firewall;", "modifier": "private", "type": "Firewall", "declarator": "firewall", "var_name": "firewall"}, {"original_string": "public static String TestSwitch1DPID = \"00:00:00:00:00:00:00:01\";", "modifier": "public static", "type": "String", "declarator": "TestSwitch1DPID = \"00:00:00:00:00:00:00:01\"", "var_name": "TestSwitch1DPID"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/firewall/FirewallTest.java"}, "test_case": {"identifier": "testReadRulesFromStorage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadRulesFromStorage() throws Exception {\n        // add 2 rules first\n        FirewallRule rule = new FirewallRule();\n        rule.in_port = 2;\n        rule.dl_src = MACAddress.valueOf(\"00:00:00:00:00:01\").toLong();\n        rule.dl_dst = MACAddress.valueOf(\"00:00:00:00:00:02\").toLong();\n        rule.priority = 1;\n        rule.action = FirewallRule.FirewallAction.DENY;\n        firewall.addRule(rule);\n        rule = new FirewallRule();\n        rule.in_port = 3;\n        rule.dl_src = MACAddress.valueOf(\"00:00:00:00:00:02\").toLong();\n        rule.dl_dst = MACAddress.valueOf(\"00:00:00:00:00:01\").toLong();\n        rule.nw_proto = IPv4.PROTOCOL_TCP;\n        rule.wildcard_nw_proto = false;\n        rule.tp_dst = 80;\n        rule.priority = 2;\n        rule.action = FirewallRule.FirewallAction.ALLOW;\n        firewall.addRule(rule);\n\n        List<FirewallRule> rules = firewall.readRulesFromStorage();\n        // verify rule 1\n        FirewallRule r = rules.get(0);\n        assertEquals(r.in_port, 2);\n        assertEquals(r.priority, 1);\n        assertEquals(r.dl_src, MACAddress.valueOf(\"00:00:00:00:00:01\").toLong());\n        assertEquals(r.dl_dst, MACAddress.valueOf(\"00:00:00:00:00:02\").toLong());\n        assertEquals(r.action, FirewallRule.FirewallAction.DENY);\n        // verify rule 2\n        r = rules.get(1);\n        assertEquals(r.in_port, 3);\n        assertEquals(r.priority, 2);\n        assertEquals(r.dl_src, MACAddress.valueOf(\"00:00:00:00:00:02\").toLong());\n        assertEquals(r.dl_dst, MACAddress.valueOf(\"00:00:00:00:00:01\").toLong());\n        assertEquals(r.nw_proto, IPv4.PROTOCOL_TCP);\n        assertEquals(r.tp_dst, 80);\n        assertEquals(r.wildcard_nw_proto, false);\n        assertEquals(r.action, FirewallRule.FirewallAction.ALLOW);\n    }", "signature": "void testReadRulesFromStorage()", "full_signature": "@Test public void testReadRulesFromStorage()", "class_method_signature": "FirewallTest.testReadRulesFromStorage()", "testcase": true, "constructor": false, "invocations": ["toLong", "valueOf", "toLong", "valueOf", "addRule", "toLong", "valueOf", "toLong", "valueOf", "addRule", "readRulesFromStorage", "get", "assertEquals", "assertEquals", "assertEquals", "toLong", "valueOf", "assertEquals", "toLong", "valueOf", "assertEquals", "get", "assertEquals", "assertEquals", "assertEquals", "toLong", "valueOf", "assertEquals", "toLong", "valueOf", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Firewall", "superclass": "", "interfaces": "implements IFirewallService, IOFMessageListener,\n        IFloodlightModule", "fields": [{"original_string": "protected IFloodlightProviderService floodlightProvider;", "modifier": "protected", "type": "IFloodlightProviderService", "declarator": "floodlightProvider", "var_name": "floodlightProvider"}, {"original_string": "protected IStorageSourceService storageSource;", "modifier": "protected", "type": "IStorageSourceService", "declarator": "storageSource", "var_name": "storageSource"}, {"original_string": "protected IRestApiService restApi;", "modifier": "protected", "type": "IRestApiService", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "protected static Logger logger;", "modifier": "protected static", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "protected List<FirewallRule> rules;", "modifier": "protected", "type": "List<FirewallRule>", "declarator": "rules", "var_name": "rules"}, {"original_string": "protected boolean enabled;", "modifier": "protected", "type": "boolean", "declarator": "enabled", "var_name": "enabled"}, {"original_string": "protected int subnet_mask = IPv4.toIPv4Address(\"255.255.255.0\");", "modifier": "protected", "type": "int", "declarator": "subnet_mask = IPv4.toIPv4Address(\"255.255.255.0\")", "var_name": "subnet_mask"}, {"original_string": "public static final String TABLE_NAME = \"controller_firewallrules\";", "modifier": "public static final", "type": "String", "declarator": "TABLE_NAME = \"controller_firewallrules\"", "var_name": "TABLE_NAME"}, {"original_string": "public static final String COLUMN_RULEID = \"ruleid\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_RULEID = \"ruleid\"", "var_name": "COLUMN_RULEID"}, {"original_string": "public static final String COLUMN_DPID = \"dpid\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_DPID = \"dpid\"", "var_name": "COLUMN_DPID"}, {"original_string": "public static final String COLUMN_IN_PORT = \"in_port\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_IN_PORT = \"in_port\"", "var_name": "COLUMN_IN_PORT"}, {"original_string": "public static final String COLUMN_DL_SRC = \"dl_src\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_DL_SRC = \"dl_src\"", "var_name": "COLUMN_DL_SRC"}, {"original_string": "public static final String COLUMN_DL_DST = \"dl_dst\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_DL_DST = \"dl_dst\"", "var_name": "COLUMN_DL_DST"}, {"original_string": "public static final String COLUMN_DL_TYPE = \"dl_type\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_DL_TYPE = \"dl_type\"", "var_name": "COLUMN_DL_TYPE"}, {"original_string": "public static final String COLUMN_NW_SRC_PREFIX = \"nw_src_prefix\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NW_SRC_PREFIX = \"nw_src_prefix\"", "var_name": "COLUMN_NW_SRC_PREFIX"}, {"original_string": "public static final String COLUMN_NW_SRC_MASKBITS = \"nw_src_maskbits\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NW_SRC_MASKBITS = \"nw_src_maskbits\"", "var_name": "COLUMN_NW_SRC_MASKBITS"}, {"original_string": "public static final String COLUMN_NW_DST_PREFIX = \"nw_dst_prefix\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NW_DST_PREFIX = \"nw_dst_prefix\"", "var_name": "COLUMN_NW_DST_PREFIX"}, {"original_string": "public static final String COLUMN_NW_DST_MASKBITS = \"nw_dst_maskbits\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NW_DST_MASKBITS = \"nw_dst_maskbits\"", "var_name": "COLUMN_NW_DST_MASKBITS"}, {"original_string": "public static final String COLUMN_NW_PROTO = \"nw_proto\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_NW_PROTO = \"nw_proto\"", "var_name": "COLUMN_NW_PROTO"}, {"original_string": "public static final String COLUMN_TP_SRC = \"tp_src\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_TP_SRC = \"tp_src\"", "var_name": "COLUMN_TP_SRC"}, {"original_string": "public static final String COLUMN_TP_DST = \"tp_dst\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_TP_DST = \"tp_dst\"", "var_name": "COLUMN_TP_DST"}, {"original_string": "public static final String COLUMN_WILDCARD_DPID = \"wildcard_dpid\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_DPID = \"wildcard_dpid\"", "var_name": "COLUMN_WILDCARD_DPID"}, {"original_string": "public static final String COLUMN_WILDCARD_IN_PORT = \"wildcard_in_port\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_IN_PORT = \"wildcard_in_port\"", "var_name": "COLUMN_WILDCARD_IN_PORT"}, {"original_string": "public static final String COLUMN_WILDCARD_DL_SRC = \"wildcard_dl_src\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_DL_SRC = \"wildcard_dl_src\"", "var_name": "COLUMN_WILDCARD_DL_SRC"}, {"original_string": "public static final String COLUMN_WILDCARD_DL_DST = \"wildcard_dl_dst\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_DL_DST = \"wildcard_dl_dst\"", "var_name": "COLUMN_WILDCARD_DL_DST"}, {"original_string": "public static final String COLUMN_WILDCARD_DL_TYPE = \"wildcard_dl_type\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_DL_TYPE = \"wildcard_dl_type\"", "var_name": "COLUMN_WILDCARD_DL_TYPE"}, {"original_string": "public static final String COLUMN_WILDCARD_NW_SRC = \"wildcard_nw_src\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_NW_SRC = \"wildcard_nw_src\"", "var_name": "COLUMN_WILDCARD_NW_SRC"}, {"original_string": "public static final String COLUMN_WILDCARD_NW_DST = \"wildcard_nw_dst\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_NW_DST = \"wildcard_nw_dst\"", "var_name": "COLUMN_WILDCARD_NW_DST"}, {"original_string": "public static final String COLUMN_WILDCARD_NW_PROTO = \"wildcard_nw_proto\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_NW_PROTO = \"wildcard_nw_proto\"", "var_name": "COLUMN_WILDCARD_NW_PROTO"}, {"original_string": "public static final String COLUMN_WILDCARD_TP_SRC = \"wildcard_tp_src\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_TP_SRC = \"wildcard_tp_src\"", "var_name": "COLUMN_WILDCARD_TP_SRC"}, {"original_string": "public static final String COLUMN_WILDCARD_TP_DST = \"wildcard_tp_dst\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_WILDCARD_TP_DST = \"wildcard_tp_dst\"", "var_name": "COLUMN_WILDCARD_TP_DST"}, {"original_string": "public static final String COLUMN_PRIORITY = \"priority\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_PRIORITY = \"priority\"", "var_name": "COLUMN_PRIORITY"}, {"original_string": "public static final String COLUMN_ACTION = \"action\";", "modifier": "public static final", "type": "String", "declarator": "COLUMN_ACTION = \"action\"", "var_name": "COLUMN_ACTION"}, {"original_string": "public static String ColumnNames[] = { COLUMN_RULEID, COLUMN_DPID,\n            COLUMN_IN_PORT, COLUMN_DL_SRC, COLUMN_DL_DST, COLUMN_DL_TYPE,\n            COLUMN_NW_SRC_PREFIX, COLUMN_NW_SRC_MASKBITS, COLUMN_NW_DST_PREFIX,\n            COLUMN_NW_DST_MASKBITS, COLUMN_NW_PROTO, COLUMN_TP_SRC,\n            COLUMN_TP_DST, COLUMN_WILDCARD_DPID, COLUMN_WILDCARD_IN_PORT,\n            COLUMN_WILDCARD_DL_SRC, COLUMN_WILDCARD_DL_DST,\n            COLUMN_WILDCARD_DL_TYPE, COLUMN_WILDCARD_NW_SRC,\n            COLUMN_WILDCARD_NW_DST, COLUMN_WILDCARD_NW_PROTO, COLUMN_PRIORITY,\n            COLUMN_ACTION };", "modifier": "public static", "type": "String", "declarator": "ColumnNames[] = { COLUMN_RULEID, COLUMN_DPID,\n            COLUMN_IN_PORT, COLUMN_DL_SRC, COLUMN_DL_DST, COLUMN_DL_TYPE,\n            COLUMN_NW_SRC_PREFIX, COLUMN_NW_SRC_MASKBITS, COLUMN_NW_DST_PREFIX,\n            COLUMN_NW_DST_MASKBITS, COLUMN_NW_PROTO, COLUMN_TP_SRC,\n            COLUMN_TP_DST, COLUMN_WILDCARD_DPID, COLUMN_WILDCARD_IN_PORT,\n            COLUMN_WILDCARD_DL_SRC, COLUMN_WILDCARD_DL_DST,\n            COLUMN_WILDCARD_DL_TYPE, COLUMN_WILDCARD_NW_SRC,\n            COLUMN_WILDCARD_NW_DST, COLUMN_WILDCARD_NW_PROTO, COLUMN_PRIORITY,\n            COLUMN_ACTION }", "var_name": "ColumnNames"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Firewall.getName()", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "Firewall.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "Firewall.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "Firewall.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "Firewall.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "Firewall.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "readRulesFromStorage", "parameters": "()", "modifiers": "protected", "return": "ArrayList<FirewallRule>", "signature": "ArrayList<FirewallRule> readRulesFromStorage()", "full_signature": "protected ArrayList<FirewallRule> readRulesFromStorage()", "class_method_signature": "Firewall.readRulesFromStorage()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "Firewall.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "Firewall.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "@Override public", "return": "Command", "signature": "Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "@Override public Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "Firewall.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "enableFirewall", "parameters": "(boolean enabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableFirewall(boolean enabled)", "full_signature": "@Override public void enableFirewall(boolean enabled)", "class_method_signature": "Firewall.enableFirewall(boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "getRules", "parameters": "()", "modifiers": "@Override public", "return": "List<FirewallRule>", "signature": "List<FirewallRule> getRules()", "full_signature": "@Override public List<FirewallRule> getRules()", "class_method_signature": "Firewall.getRules()", "testcase": false, "constructor": false}, {"identifier": "getStorageRules", "parameters": "()", "modifiers": "@Override public", "return": "List<Map<String, Object>>", "signature": "List<Map<String, Object>> getStorageRules()", "full_signature": "@Override public List<Map<String, Object>> getStorageRules()", "class_method_signature": "Firewall.getStorageRules()", "testcase": false, "constructor": false}, {"identifier": "getSubnetMask", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSubnetMask()", "full_signature": "@Override public String getSubnetMask()", "class_method_signature": "Firewall.getSubnetMask()", "testcase": false, "constructor": false}, {"identifier": "setSubnetMask", "parameters": "(String newMask)", "modifiers": "@Override public", "return": "void", "signature": "void setSubnetMask(String newMask)", "full_signature": "@Override public void setSubnetMask(String newMask)", "class_method_signature": "Firewall.setSubnetMask(String newMask)", "testcase": false, "constructor": false}, {"identifier": "addRule", "parameters": "(FirewallRule rule)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addRule(FirewallRule rule)", "full_signature": "@Override public synchronized void addRule(FirewallRule rule)", "class_method_signature": "Firewall.addRule(FirewallRule rule)", "testcase": false, "constructor": false}, {"identifier": "deleteRule", "parameters": "(int ruleid)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void deleteRule(int ruleid)", "full_signature": "@Override public synchronized void deleteRule(int ruleid)", "class_method_signature": "Firewall.deleteRule(int ruleid)", "testcase": false, "constructor": false}, {"identifier": "matchWithRule", "parameters": "(IOFSwitch sw, OFPacketIn pi,\n            FloodlightContext cntx)", "modifiers": "protected", "return": "RuleWildcardsPair", "signature": "RuleWildcardsPair matchWithRule(IOFSwitch sw, OFPacketIn pi,\n            FloodlightContext cntx)", "full_signature": "protected RuleWildcardsPair matchWithRule(IOFSwitch sw, OFPacketIn pi,\n            FloodlightContext cntx)", "class_method_signature": "Firewall.matchWithRule(IOFSwitch sw, OFPacketIn pi,\n            FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "IPIsBroadcast", "parameters": "(int IPAddress)", "modifiers": "protected", "return": "boolean", "signature": "boolean IPIsBroadcast(int IPAddress)", "full_signature": "protected boolean IPIsBroadcast(int IPAddress)", "class_method_signature": "Firewall.IPIsBroadcast(int IPAddress)", "testcase": false, "constructor": false}, {"identifier": "processPacketInMessage", "parameters": "(IOFSwitch sw, OFPacketIn pi,\n            IRoutingDecision decision, FloodlightContext cntx)", "modifiers": "public", "return": "Command", "signature": "Command processPacketInMessage(IOFSwitch sw, OFPacketIn pi,\n            IRoutingDecision decision, FloodlightContext cntx)", "full_signature": "public Command processPacketInMessage(IOFSwitch sw, OFPacketIn pi,\n            IRoutingDecision decision, FloodlightContext cntx)", "class_method_signature": "Firewall.processPacketInMessage(IOFSwitch sw, OFPacketIn pi,\n            IRoutingDecision decision, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "@Override public boolean isEnabled()", "class_method_signature": "Firewall.isEnabled()", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/firewall/Firewall.java"}, "focal_method": {"identifier": "readRulesFromStorage", "parameters": "()", "modifiers": "protected", "return": "ArrayList<FirewallRule>", "body": "protected ArrayList<FirewallRule> readRulesFromStorage() {\n        ArrayList<FirewallRule> l = new ArrayList<FirewallRule>();\n\n        try {\n            Map<String, Object> row;\n\n            // (..., null, null) for no predicate, no ordering\n            IResultSet resultSet = storageSource.executeQuery(TABLE_NAME,\n                    ColumnNames, null, null);\n\n            // put retrieved rows into FirewallRules\n            for (Iterator<IResultSet> it = resultSet.iterator(); it.hasNext();) {\n                row = it.next().getRow();\n                // now, parse row\n                FirewallRule r = new FirewallRule();\n                if (!row.containsKey(COLUMN_RULEID)\n                        || !row.containsKey(COLUMN_DPID)) {\n                    logger.error(\n                            \"skipping entry with missing required 'ruleid' or 'switchid' entry: {}\",\n                            row);\n                    return l;\n                }\n                try {\n                    r.ruleid = Integer\n                            .parseInt((String) row.get(COLUMN_RULEID));\n                    r.dpid = Long.parseLong((String) row.get(COLUMN_DPID));\n\n                    for (String key : row.keySet()) {\n                        if (row.get(key) == null)\n                            continue;\n                        if (key.equals(COLUMN_RULEID)\n                                || key.equals(COLUMN_DPID)\n                                || key.equals(\"id\")) {\n                            continue; // already handled\n                        } \n                        \n                        else if (key.equals(COLUMN_IN_PORT)) {\n                            r.in_port = Short.parseShort((String) row\n                                    .get(COLUMN_IN_PORT));\n                        } \n                        \n                        else if (key.equals(COLUMN_DL_SRC)) {\n                            r.dl_src = Long.parseLong((String) row\n                                    .get(COLUMN_DL_SRC));\n                        } \n                        \n                        else if (key.equals(COLUMN_DL_DST)) {\n                            r.dl_dst = Long.parseLong((String) row\n                                    .get(COLUMN_DL_DST));\n                        } \n                        \n                        else if (key.equals(COLUMN_DL_TYPE)) {\n                            r.dl_type = Short.parseShort((String) row\n                                    .get(COLUMN_DL_TYPE));\n                        } \n                        \n                        else if (key.equals(COLUMN_NW_SRC_PREFIX)) {\n                            r.nw_src_prefix = Integer.parseInt((String) row\n                                    .get(COLUMN_NW_SRC_PREFIX));\n                        } \n                        \n                        else if (key.equals(COLUMN_NW_SRC_MASKBITS)) {\n                            r.nw_src_maskbits = Integer.parseInt((String) row\n                                    .get(COLUMN_NW_SRC_MASKBITS));\n                        } \n                        \n                        else if (key.equals(COLUMN_NW_DST_PREFIX)) {\n                            r.nw_dst_prefix = Integer.parseInt((String) row\n                                    .get(COLUMN_NW_DST_PREFIX));\n                        } \n                        \n                        else if (key.equals(COLUMN_NW_DST_MASKBITS)) {\n                            r.nw_dst_maskbits = Integer.parseInt((String) row\n                                    .get(COLUMN_NW_DST_MASKBITS));\n                        } \n                        \n                        else if (key.equals(COLUMN_NW_PROTO)) {\n                            r.nw_proto = Short.parseShort((String) row\n                                    .get(COLUMN_NW_PROTO));\n                        } \n                        \n                        else if (key.equals(COLUMN_TP_SRC)) {\n                            r.tp_src = Short.parseShort((String) row\n                                    .get(COLUMN_TP_SRC));\n                        } \n                        \n                        else if (key.equals(COLUMN_TP_DST)) {\n                            r.tp_dst = Short.parseShort((String) row\n                                    .get(COLUMN_TP_DST));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_DPID)) {\n                            r.wildcard_dpid = Boolean.parseBoolean((String) row\n                                    .get(COLUMN_WILDCARD_DPID));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_IN_PORT)) {\n                            r.wildcard_in_port = Boolean\n                                    .parseBoolean((String) row\n                                            .get(COLUMN_WILDCARD_IN_PORT));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_DL_SRC)) {\n                            r.wildcard_dl_src = Boolean\n                                    .parseBoolean((String) row\n                                            .get(COLUMN_WILDCARD_DL_SRC));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_DL_DST)) {\n                            r.wildcard_dl_dst = Boolean\n                                    .parseBoolean((String) row\n                                            .get(COLUMN_WILDCARD_DL_DST));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_DL_TYPE)) {\n                            r.wildcard_dl_type = Boolean\n                                    .parseBoolean((String) row\n                                            .get(COLUMN_WILDCARD_DL_TYPE));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_NW_SRC)) {\n                            r.wildcard_nw_src = Boolean\n                                    .parseBoolean((String) row\n                                            .get(COLUMN_WILDCARD_NW_SRC));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_NW_DST)) {\n                            r.wildcard_nw_dst = Boolean\n                                    .parseBoolean((String) row\n                                            .get(COLUMN_WILDCARD_NW_DST));\n                        } \n                        \n                        else if (key.equals(COLUMN_WILDCARD_NW_PROTO)) {\n                            r.wildcard_nw_proto = Boolean\n                                    .parseBoolean((String) row\n                                            .get(COLUMN_WILDCARD_NW_PROTO));\n                        } \n                        \n                        else if (key.equals(COLUMN_PRIORITY)) {\n                            r.priority = Integer.parseInt((String) row\n                                    .get(COLUMN_PRIORITY));\n                        } \n                        \n                        else if (key.equals(COLUMN_ACTION)) {\n                            int tmp = Integer.parseInt((String) row.get(COLUMN_ACTION));\n                            if (tmp == FirewallRule.FirewallAction.DENY.ordinal())\n                                r.action = FirewallRule.FirewallAction.DENY;\n                            else if (tmp == FirewallRule.FirewallAction.ALLOW.ordinal())\n                                r.action = FirewallRule.FirewallAction.ALLOW;\n                            else {\n                                r.action = null;\n                                logger.error(\"action not recognized\");\n                            }\n                        }\n                    }\n                } catch (ClassCastException e) {\n                    logger.error(\n                            \"skipping rule {} with bad data : \"\n                                    + e.getMessage(), r.ruleid);\n                }\n                if (r.action != null)\n                    l.add(r);\n            }\n        } catch (StorageException e) {\n            logger.error(\"failed to access storage: {}\", e.getMessage());\n            // if the table doesn't exist, then wait to populate later via\n            // setStorageSource()\n        }\n\n        // now, sort the list based on priorities\n        Collections.sort(l);\n\n        return l;\n    }", "signature": "ArrayList<FirewallRule> readRulesFromStorage()", "full_signature": "protected ArrayList<FirewallRule> readRulesFromStorage()", "class_method_signature": "Firewall.readRulesFromStorage()", "testcase": false, "constructor": false, "invocations": ["executeQuery", "iterator", "hasNext", "getRow", "next", "containsKey", "containsKey", "error", "parseInt", "get", "parseLong", "get", "keySet", "get", "equals", "equals", "equals", "equals", "parseShort", "get", "equals", "parseLong", "get", "equals", "parseLong", "get", "equals", "parseShort", "get", "equals", "parseInt", "get", "equals", "parseInt", "get", "equals", "parseInt", "get", "equals", "parseInt", "get", "equals", "parseShort", "get", "equals", "parseShort", "get", "equals", "parseShort", "get", "equals", "parseBoolean", "get", "equals", "parseBoolean", "get", "equals", "parseBoolean", "get", "equals", "parseBoolean", "get", "equals", "parseBoolean", "get", "equals", "parseBoolean", "get", "equals", "parseBoolean", "get", "equals", "parseBoolean", "get", "equals", "parseInt", "get", "equals", "parseInt", "get", "ordinal", "ordinal", "error", "error", "getMessage", "add", "error", "getMessage", "sort"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}