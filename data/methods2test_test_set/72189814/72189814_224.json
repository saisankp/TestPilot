{"test_class": {"identifier": "NotificationImageDecoratorTest", "superclass": "extends BaseNotificationDecoratorTest<NotificationImageDecorator>", "interfaces": "", "fields": [{"original_string": "Halo mHalo;", "modifier": "", "type": "Halo", "declarator": "mHalo", "var_name": "mHalo"}], "file": "sdk-libs/halo-notifications/src/test/java/com/mobgen/halo/android/notifications/decorator/NotificationImageDecoratorTest.java"}, "test_case": {"identifier": "thatCanHandleAImageOnTheNotificationWithLeftType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void thatCanHandleAImageOnTheNotificationWithLeftType() throws IOException {\n        final boolean[] marker = new boolean[1];\n        final String text = \"This is my Text And Body\";\n        final String image = givenAImageNotification(mHalo.context(), \"left\");\n        Bundle bundle = BundleTestUtils.builder().putString(\"body\", text).putString(\"title\", text).build();\n        when(bundle.get(\"image\")).thenReturn(image);\n        when(bundle.get(\"image\").toString()).thenReturn(image);\n        when(getBuilder().setCustomContentView(any(RemoteViews.class))).then(new Answer<Object>() {\n            @Override\n            public Object answer(InvocationOnMock invocation) throws Throwable {\n                marker[0] = true;\n                return null;\n            }\n        });\n        getDecorator().decorate(getBuilder(), bundle);\n        Assert.assertTrue(marker[0]);\n    }", "signature": "void thatCanHandleAImageOnTheNotificationWithLeftType()", "full_signature": "@Test public void thatCanHandleAImageOnTheNotificationWithLeftType()", "class_method_signature": "NotificationImageDecoratorTest.thatCanHandleAImageOnTheNotificationWithLeftType()", "testcase": true, "constructor": false, "invocations": ["givenAImageNotification", "context", "build", "putString", "putString", "builder", "thenReturn", "when", "get", "thenReturn", "when", "toString", "get", "then", "when", "setCustomContentView", "getBuilder", "any", "decorate", "getDecorator", "getBuilder", "assertTrue"]}, "focal_class": {"identifier": "NotificationImageDecorator", "superclass": "extends HaloNotificationDecorator", "interfaces": "", "fields": [{"original_string": "private static final int IMAGE_MAX_SIZE = 1000000;", "modifier": "private static final", "type": "int", "declarator": "IMAGE_MAX_SIZE = 1000000", "var_name": "IMAGE_MAX_SIZE"}, {"original_string": "private static final String IMAGE_KEY = \"image\";", "modifier": "private static final", "type": "String", "declarator": "IMAGE_KEY = \"image\"", "var_name": "IMAGE_KEY"}, {"original_string": "private Context mContext;", "modifier": "private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private Intent mActionIntent;", "modifier": "private", "type": "Intent", "declarator": "mActionIntent", "var_name": "mActionIntent"}, {"original_string": "private Class<?> glide;", "modifier": "private", "type": "Class<?>", "declarator": "glide", "var_name": "glide"}, {"original_string": "private Class<?> picasso;", "modifier": "private", "type": "Class<?>", "declarator": "picasso", "var_name": "picasso"}], "methods": [{"identifier": "NotificationImageDecorator", "parameters": "(Context context, HaloNotificationDecorator decorator)", "modifiers": "public", "return": "", "signature": " NotificationImageDecorator(Context context, HaloNotificationDecorator decorator)", "full_signature": "public  NotificationImageDecorator(Context context, HaloNotificationDecorator decorator)", "class_method_signature": "NotificationImageDecorator.NotificationImageDecorator(Context context, HaloNotificationDecorator decorator)", "testcase": false, "constructor": true}, {"identifier": "decorate", "parameters": "(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "modifiers": "@Override public", "return": "NotificationCompat.Builder", "signature": "NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "full_signature": "@Override public NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "class_method_signature": "NotificationImageDecorator.decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "getScale", "parameters": "(int originalWidth, int originalHeight)", "modifiers": "private", "return": "int", "signature": "int getScale(int originalWidth, int originalHeight)", "full_signature": "private int getScale(int originalWidth, int originalHeight)", "class_method_signature": "NotificationImageDecorator.getScale(int originalWidth, int originalHeight)", "testcase": false, "constructor": false}, {"identifier": "getImageBitmap", "parameters": "(@NonNull String pushImageUrl)", "modifiers": "@Nullable private", "return": "Bitmap", "signature": "Bitmap getImageBitmap(@NonNull String pushImageUrl)", "full_signature": "@Nullable private Bitmap getImageBitmap(@NonNull String pushImageUrl)", "class_method_signature": "NotificationImageDecorator.getImageBitmap(@NonNull String pushImageUrl)", "testcase": false, "constructor": false}, {"identifier": "downloadScaledBitmapFromURL", "parameters": "(String url)", "modifiers": "@Nullable private", "return": "Bitmap", "signature": "Bitmap downloadScaledBitmapFromURL(String url)", "full_signature": "@Nullable private Bitmap downloadScaledBitmapFromURL(String url)", "class_method_signature": "NotificationImageDecorator.downloadScaledBitmapFromURL(String url)", "testcase": false, "constructor": false}, {"identifier": "getRemoteView", "parameters": "(@PushImage.Layout String type, @NonNull Bitmap image,\n                                      @Nullable String title, @Nullable String message)", "modifiers": "@NonNull private", "return": "RemoteViews", "signature": "RemoteViews getRemoteView(@PushImage.Layout String type, @NonNull Bitmap image,\n                                      @Nullable String title, @Nullable String message)", "full_signature": "@NonNull private RemoteViews getRemoteView(@PushImage.Layout String type, @NonNull Bitmap image,\n                                      @Nullable String title, @Nullable String message)", "class_method_signature": "NotificationImageDecorator.getRemoteView(@PushImage.Layout String type, @NonNull Bitmap image,\n                                      @Nullable String title, @Nullable String message)", "testcase": false, "constructor": false}, {"identifier": "setIntent", "parameters": "(Intent intent)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setIntent(Intent intent)", "full_signature": "@VisibleForTesting public void setIntent(Intent intent)", "class_method_signature": "NotificationImageDecorator.setIntent(Intent intent)", "testcase": false, "constructor": false}], "file": "sdk-libs/halo-notifications/src/main/java/com/mobgen/halo/android/notifications/decorator/NotificationImageDecorator.java"}, "focal_method": {"identifier": "decorate", "parameters": "(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "modifiers": "@Override public", "return": "NotificationCompat.Builder", "body": "@Override\n    public NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle) {\n        if (bundle.get(IMAGE_KEY) != null) {\n            try {\n                PushImage pushImage = PushImage.deserialize(bundle.get(IMAGE_KEY).toString(), Halo.instance().framework().parser());\n                Bitmap bitmapNotification = getImageBitmap(pushImage.getUrl());\n                if (bitmapNotification != null) {\n                    String title = bundle.getString(\"title\");\n                    String message = bundle.getString(\"body\");\n                    RemoteViews remoteView, remoteViewExpanded;\n                    switch (pushImage.getLayout()) {\n                        case PushImage.DEFAULT:\n                            builder.setLargeIcon(bitmapNotification);\n                            break;\n                        case PushImage.EXPANDED:\n                            builder.setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bitmapNotification));\n                            break;\n                        case PushImage.LEFT:\n                            remoteView = getRemoteView(pushImage.getLayout(), bitmapNotification, title, message);\n                            builder.setCustomContentView(remoteView);\n                            break;\n                        case PushImage.RIGHT:\n                            remoteView = getRemoteView(pushImage.getLayout(), bitmapNotification, title, message);\n                            builder.setCustomContentView(remoteView);\n                            break;\n                        case PushImage.TOP:\n                            remoteView = getRemoteView(PushImage.LEFT, bitmapNotification, title, message);\n                            builder.setCustomContentView(remoteView);\n                            remoteViewExpanded = getRemoteView(pushImage.getLayout(), bitmapNotification, title, message);\n                            builder.setCustomBigContentView(remoteViewExpanded);\n                            break;\n                        case PushImage.BOTTOM:\n                            remoteView = getRemoteView(PushImage.RIGHT, bitmapNotification, title, message);\n                            builder.setCustomContentView(remoteView);\n                            remoteViewExpanded = getRemoteView(pushImage.getLayout(), bitmapNotification, title, message);\n                            builder.setCustomBigContentView(remoteViewExpanded);\n                            break;\n                        case PushImage.BACKGROUND:\n                            remoteView = getRemoteView(pushImage.getLayout(), bitmapNotification, title, message);\n                            builder.setCustomContentView(remoteView);\n                            builder.setCustomBigContentView(remoteView);\n                            break;\n                    }\n                }\n\n            } catch (HaloParsingException e) {\n                Halog.v(NotificationImageDecorator.class, \"Cannot parse the content\");\n            }\n        }\n\n        return chain(builder, bundle);\n    }", "signature": "NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "full_signature": "@Override public NotificationCompat.Builder decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "class_method_signature": "NotificationImageDecorator.decorate(@NonNull NotificationCompat.Builder builder, @NonNull Bundle bundle)", "testcase": false, "constructor": false, "invocations": ["get", "deserialize", "toString", "get", "parser", "framework", "instance", "getImageBitmap", "getUrl", "getString", "getString", "getLayout", "setLargeIcon", "setStyle", "bigPicture", "getRemoteView", "getLayout", "setCustomContentView", "getRemoteView", "getLayout", "setCustomContentView", "getRemoteView", "setCustomContentView", "getRemoteView", "getLayout", "setCustomBigContentView", "getRemoteView", "setCustomContentView", "getRemoteView", "getLayout", "setCustomBigContentView", "getRemoteView", "getLayout", "setCustomContentView", "setCustomBigContentView", "v", "chain"]}, "repository": {"repo_id": 72189814, "url": "https://github.com/mobgen/halo-android", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 3343, "license": "licensed"}}