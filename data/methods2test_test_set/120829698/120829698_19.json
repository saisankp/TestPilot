{"test_class": {"identifier": "P2PathUtilsTest", "superclass": "extends TestSupport", "interfaces": "", "fields": [{"original_string": "@Mock\n  Context context;", "modifier": "@Mock", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n  TokenMatcher.State state;", "modifier": "@Mock", "type": "TokenMatcher.State", "declarator": "state", "var_name": "state"}, {"original_string": "@Mock\n  AttributesMap attributesMap;", "modifier": "@Mock", "type": "AttributesMap", "declarator": "attributesMap", "var_name": "attributesMap"}, {"original_string": "private final String fakePath = \"fakepath\";", "modifier": "private final", "type": "String", "declarator": "fakePath = \"fakepath\"", "var_name": "fakePath"}, {"original_string": "private final String fakeComponentName = \"eclipsepackage1\";", "modifier": "private final", "type": "String", "declarator": "fakeComponentName = \"eclipsepackage1\"", "var_name": "fakeComponentName"}, {"original_string": "private final String fakeFileName = fakeComponentName + \"_2_3.jar\";", "modifier": "private final", "type": "String", "declarator": "fakeFileName = fakeComponentName + \"_2_3.jar\"", "var_name": "fakeFileName"}, {"original_string": "private final String fakeExtension = \"pack.gz\";", "modifier": "private final", "type": "String", "declarator": "fakeExtension = \"pack.gz\"", "var_name": "fakeExtension"}], "file": "nexus-repository-p2/src/test/java/org/sonatype/nexus/repository/p2/internal/util/P2PathUtilsTest.java"}, "test_case": {"identifier": "pathTestMaybePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void pathTestMaybePath() throws Exception {\n    final Map<String, String> someMap = new HashMap<>();\n    someMap.put(\"name\", fakeFileName);\n    someMap.put(\"extension\", fakeExtension);\n    when(state.getTokens())\n        .thenReturn(someMap);\n    String path = maybePath(state);\n\n    assertThat(path, is(equalTo(fakeFileName + \".\" + fakeExtension)));\n\n    someMap.put(\"path\", fakePath);\n    path = maybePath(state);\n\n    assertThat(path, is(equalTo(fakePath + \"/\" + fakeFileName + \".\" + fakeExtension)));\n  }", "signature": "void pathTestMaybePath()", "full_signature": "@Test public void pathTestMaybePath()", "class_method_signature": "P2PathUtilsTest.pathTestMaybePath()", "testcase": true, "constructor": false, "invocations": ["put", "put", "thenReturn", "when", "getTokens", "maybePath", "assertThat", "is", "equalTo", "put", "maybePath", "assertThat", "is", "equalTo"]}, "focal_class": {"identifier": "P2PathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PLUGIN_NAME = \"pluginName\";", "modifier": "public static final", "type": "String", "declarator": "PLUGIN_NAME = \"pluginName\"", "var_name": "PLUGIN_NAME"}, {"original_string": "private final static String NAME_VERSION_SEPARATOR = \"_\";", "modifier": "private final static", "type": "String", "declarator": "NAME_VERSION_SEPARATOR = \"_\"", "var_name": "NAME_VERSION_SEPARATOR"}], "methods": [{"identifier": "P2PathUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " P2PathUtils()", "full_signature": "private  P2PathUtils()", "class_method_signature": "P2PathUtils.P2PathUtils()", "testcase": false, "constructor": true}, {"identifier": "path", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String path(final TokenMatcher.State state)", "full_signature": "public static String path(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.path(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "maybePath", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String maybePath(final TokenMatcher.State state)", "full_signature": "public static String maybePath(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.maybePath(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(final TokenMatcher.State state, final String name)", "modifiers": "private static", "return": "String", "signature": "String match(final TokenMatcher.State state, final String name)", "full_signature": "private static String match(final TokenMatcher.State state, final String name)", "class_method_signature": "P2PathUtils.match(final TokenMatcher.State state, final String name)", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(final String path, final String filename)", "modifiers": "public static", "return": "String", "signature": "String path(final String path, final String filename)", "full_signature": "public static String path(final String path, final String filename)", "class_method_signature": "P2PathUtils.path(final String path, final String filename)", "testcase": false, "constructor": false}, {"identifier": "path", "parameters": "(final String path, final String filename, final String extension)", "modifiers": "public static", "return": "String", "signature": "String path(final String path, final String filename, final String extension)", "full_signature": "public static String path(final String path, final String filename, final String extension)", "class_method_signature": "P2PathUtils.path(final String path, final String filename, final String extension)", "testcase": false, "constructor": false}, {"identifier": "binaryPath", "parameters": "(final String path, final String name, final String version)", "modifiers": "public static", "return": "String", "signature": "String binaryPath(final String path, final String name, final String version)", "full_signature": "public static String binaryPath(final String path, final String name, final String version)", "class_method_signature": "P2PathUtils.binaryPath(final String path, final String name, final String version)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String name(final TokenMatcher.State state)", "full_signature": "public static String name(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.name(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "filename", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String filename(final TokenMatcher.State state)", "full_signature": "public static String filename(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.filename(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "version", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String version(final TokenMatcher.State state)", "full_signature": "public static String version(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.version(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "componentName", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String componentName(final TokenMatcher.State state)", "full_signature": "public static String componentName(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.componentName(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "componentVersion", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String componentVersion(final TokenMatcher.State state)", "full_signature": "public static String componentVersion(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.componentVersion(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "extension", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "signature": "String extension(final TokenMatcher.State state)", "full_signature": "public static String extension(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.extension(final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "matcherState", "parameters": "(final Context context)", "modifiers": "public static", "return": "TokenMatcher.State", "signature": "TokenMatcher.State matcherState(final Context context)", "full_signature": "public static TokenMatcher.State matcherState(final Context context)", "class_method_signature": "P2PathUtils.matcherState(final Context context)", "testcase": false, "constructor": false}, {"identifier": "toP2Attributes", "parameters": "(final String path, final TokenMatcher.State state)", "modifiers": "public static", "return": "P2Attributes", "signature": "P2Attributes toP2Attributes(final String path, final TokenMatcher.State state)", "full_signature": "public static P2Attributes toP2Attributes(final String path, final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.toP2Attributes(final String path, final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "toP2AttributesBinary", "parameters": "(final String path, final TokenMatcher.State state)", "modifiers": "public static", "return": "P2Attributes", "signature": "P2Attributes toP2AttributesBinary(final String path, final TokenMatcher.State state)", "full_signature": "public static P2Attributes toP2AttributesBinary(final String path, final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.toP2AttributesBinary(final String path, final TokenMatcher.State state)", "testcase": false, "constructor": false}, {"identifier": "getBinaryAttributesFromBlobName", "parameters": "(final String blobName)", "modifiers": "public static", "return": "P2Attributes", "signature": "P2Attributes getBinaryAttributesFromBlobName(final String blobName)", "full_signature": "public static P2Attributes getBinaryAttributesFromBlobName(final String blobName)", "class_method_signature": "P2PathUtils.getBinaryAttributesFromBlobName(final String blobName)", "testcase": false, "constructor": false}, {"identifier": "getPackageAttributesFromBlob", "parameters": "(final StorageFacet storageFacet,\n                                                          final P2TempBlobUtils p2TempBlobUtils,\n                                                          final Blob blob,\n                                                          final String blobName)", "modifiers": "public static", "return": "P2Attributes", "signature": "P2Attributes getPackageAttributesFromBlob(final StorageFacet storageFacet,\n                                                          final P2TempBlobUtils p2TempBlobUtils,\n                                                          final Blob blob,\n                                                          final String blobName)", "full_signature": "public static P2Attributes getPackageAttributesFromBlob(final StorageFacet storageFacet,\n                                                          final P2TempBlobUtils p2TempBlobUtils,\n                                                          final Blob blob,\n                                                          final String blobName)", "class_method_signature": "P2PathUtils.getPackageAttributesFromBlob(final StorageFacet storageFacet,\n                                                          final P2TempBlobUtils p2TempBlobUtils,\n                                                          final Blob blob,\n                                                          final String blobName)", "testcase": false, "constructor": false}, {"identifier": "getBinaryNameFromBlobName", "parameters": "(final String blobName, final String version)", "modifiers": "private static", "return": "String", "signature": "String getBinaryNameFromBlobName(final String blobName, final String version)", "full_signature": "private static String getBinaryNameFromBlobName(final String blobName, final String version)", "class_method_signature": "P2PathUtils.getBinaryNameFromBlobName(final String blobName, final String version)", "testcase": false, "constructor": false}, {"identifier": "getBinaryVersionFromBlobName", "parameters": "(final String blobName)", "modifiers": "private static", "return": "String", "signature": "String getBinaryVersionFromBlobName(final String blobName)", "full_signature": "private static String getBinaryVersionFromBlobName(final String blobName)", "class_method_signature": "P2PathUtils.getBinaryVersionFromBlobName(final String blobName)", "testcase": false, "constructor": false}, {"identifier": "getPackageExtensionFromBlobName", "parameters": "(final String blobName)", "modifiers": "private static", "return": "String", "signature": "String getPackageExtensionFromBlobName(final String blobName)", "full_signature": "private static String getPackageExtensionFromBlobName(final String blobName)", "class_method_signature": "P2PathUtils.getPackageExtensionFromBlobName(final String blobName)", "testcase": false, "constructor": false}, {"identifier": "getAssetKind", "parameters": "(final String path)", "modifiers": "public static", "return": "AssetKind", "signature": "AssetKind getAssetKind(final String path)", "full_signature": "public static AssetKind getAssetKind(final String path)", "class_method_signature": "P2PathUtils.getAssetKind(final String path)", "testcase": false, "constructor": false}], "file": "nexus-repository-p2/src/main/java/org/sonatype/nexus/repository/p2/internal/util/P2PathUtils.java"}, "focal_method": {"identifier": "maybePath", "parameters": "(final TokenMatcher.State state)", "modifiers": "public static", "return": "String", "body": "public static String maybePath(final TokenMatcher.State state) {\n    checkNotNull(state);\n    String path = state.getTokens().get(\"path\");\n    if (isNullOrEmpty(path)) {\n      return String.format(\"%s.%s\", match(state, \"name\"), match(state, \"extension\"));\n    }\n    return String.format(\"%s/%s.%s\", path, match(state, \"name\"), match(state, \"extension\"));\n  }", "signature": "String maybePath(final TokenMatcher.State state)", "full_signature": "public static String maybePath(final TokenMatcher.State state)", "class_method_signature": "P2PathUtils.maybePath(final TokenMatcher.State state)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "get", "getTokens", "isNullOrEmpty", "format", "match", "match", "format", "match", "match"]}, "repository": {"repo_id": 120829698, "url": "https://github.com/sonatype-nexus-community/nexus-repository-p2", "stars": 20, "created": "2/8/2018 11:14:52 PM +00:00", "updates": "2020-01-22T20:10:49+00:00", "fork": "False", "license": "licensed"}}