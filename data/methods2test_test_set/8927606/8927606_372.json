{"test_class": {"identifier": "SchedulerSenderTest", "superclass": "extends SchedulerTestBase", "interfaces": "", "fields": [{"original_string": "private SchedulerSender schedulerSender;", "modifier": "private", "type": "SchedulerSender", "declarator": "schedulerSender", "var_name": "schedulerSender"}, {"original_string": "private final String JOB_NAME = \"senderName\";", "modifier": "private final", "type": "String", "declarator": "JOB_NAME = \"senderName\"", "var_name": "JOB_NAME"}], "file": "core/src/test/java/nl/nn/adapterframework/scheduler/SchedulerSenderTest.java"}, "test_case": {"identifier": "testConfigure", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConfigure() throws ConfigurationException, SenderException, SchedulerException, IOException {\n\t\tschedulerSender.setJavaListener(\"dummyJavaListener\");\n\t\tschedulerSender.setCronExpressionPattern(\"0 0 5 * * ?\");\n\n\t\tschedulerSender.configure();\n\t\tschedulerSender.sendMessage(new Message(\"message\"), null);\n\t\tassertNull(schedulerSender.getParameterList().findParameter(\"_jobname\"));\n\n\t\tassertTrue(schedulerHelper.contains(JOB_NAME));\n\t}", "signature": "void testConfigure()", "full_signature": "@Test public void testConfigure()", "class_method_signature": "SchedulerSenderTest.testConfigure()", "testcase": true, "constructor": false, "invocations": ["setJavaListener", "setCronExpressionPattern", "configure", "sendMessage", "assertNull", "findParameter", "getParameterList", "assertTrue", "contains"]}, "focal_class": {"identifier": "SchedulerSender", "superclass": "extends SenderWithParametersBase", "interfaces": "", "fields": [{"original_string": "private String javaListener;", "modifier": "private", "type": "String", "declarator": "javaListener", "var_name": "javaListener"}, {"original_string": "private String cronExpressionPattern;", "modifier": "private", "type": "String", "declarator": "cronExpressionPattern", "var_name": "cronExpressionPattern"}, {"original_string": "private String jobGroup = null;", "modifier": "private", "type": "String", "declarator": "jobGroup = null", "var_name": "jobGroup"}, {"original_string": "private String jobNamePattern;", "modifier": "private", "type": "String", "declarator": "jobNamePattern", "var_name": "jobNamePattern"}, {"original_string": "private SchedulerHelper schedulerHelper;", "modifier": "private", "type": "SchedulerHelper", "declarator": "schedulerHelper", "var_name": "schedulerHelper"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "SchedulerSender.configure()", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void open()", "full_signature": "@Override public void open()", "class_method_signature": "SchedulerSender.open()", "testcase": false, "constructor": false}, {"identifier": "isSynchronous", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSynchronous()", "full_signature": "@Override public boolean isSynchronous()", "class_method_signature": "SchedulerSender.isSynchronous()", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "Message", "signature": "Message sendMessage(Message message, IPipeLineSession session)", "full_signature": "@Override public Message sendMessage(Message message, IPipeLineSession session)", "class_method_signature": "SchedulerSender.sendMessage(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(String jobName, String cronExpression, String correlationId, String message)", "modifiers": "private", "return": "void", "signature": "void schedule(String jobName, String cronExpression, String correlationId, String message)", "full_signature": "private void schedule(String jobName, String cronExpression, String correlationId, String message)", "class_method_signature": "SchedulerSender.schedule(String jobName, String cronExpression, String correlationId, String message)", "testcase": false, "constructor": false}, {"identifier": "setCronExpressionPattern", "parameters": "(String string)", "modifiers": "@IbisDoc({\"expression that generates the cron trigger\", \"\"}) public", "return": "void", "signature": "void setCronExpressionPattern(String string)", "full_signature": "@IbisDoc({\"expression that generates the cron trigger\", \"\"}) public void setCronExpressionPattern(String string)", "class_method_signature": "SchedulerSender.setCronExpressionPattern(String string)", "testcase": false, "constructor": false}, {"identifier": "setJobGroup", "parameters": "(String string)", "modifiers": "@IbisDoc({\"job group in which the new trigger is to be created (optional)\", \"\"}) public", "return": "void", "signature": "void setJobGroup(String string)", "full_signature": "@IbisDoc({\"job group in which the new trigger is to be created (optional)\", \"\"}) public void setJobGroup(String string)", "class_method_signature": "SchedulerSender.setJobGroup(String string)", "testcase": false, "constructor": false}, {"identifier": "setJobNamePattern", "parameters": "(String string)", "modifiers": "@IbisDoc({\"pattern that leads to the name of the registered trigger(optional)\", \"\"}) public", "return": "void", "signature": "void setJobNamePattern(String string)", "full_signature": "@IbisDoc({\"pattern that leads to the name of the registered trigger(optional)\", \"\"}) public void setJobNamePattern(String string)", "class_method_signature": "SchedulerSender.setJobNamePattern(String string)", "testcase": false, "constructor": false}, {"identifier": "setJavaListener", "parameters": "(String string)", "modifiers": "@IbisDoc({\"java listener to be called when scheduler trigger fires\", \"\"}) public", "return": "void", "signature": "void setJavaListener(String string)", "full_signature": "@IbisDoc({\"java listener to be called when scheduler trigger fires\", \"\"}) public void setJavaListener(String string)", "class_method_signature": "SchedulerSender.setJavaListener(String string)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerHelper", "parameters": "()", "modifiers": "public", "return": "SchedulerHelper", "signature": "SchedulerHelper getSchedulerHelper()", "full_signature": "public SchedulerHelper getSchedulerHelper()", "class_method_signature": "SchedulerSender.getSchedulerHelper()", "testcase": false, "constructor": false}, {"identifier": "setSchedulerHelper", "parameters": "(SchedulerHelper helper)", "modifiers": "public", "return": "void", "signature": "void setSchedulerHelper(SchedulerHelper helper)", "full_signature": "public void setSchedulerHelper(SchedulerHelper helper)", "class_method_signature": "SchedulerSender.setSchedulerHelper(SchedulerHelper helper)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/scheduler/SchedulerSender.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void configure() throws ConfigurationException {\n\t\tif (StringUtils.isEmpty(javaListener)) {\n\t\t\tthrow new ConfigurationException(\"Property [serviceName] is empty\");\n\t\t}\n\t\tif (StringUtils.isEmpty(cronExpressionPattern)) {\n\t\t\tthrow new ConfigurationException(\"Property [cronExpressionPattern] is empty\");\n\t\t}\n\t\t\n\t\tParameter p = new Parameter();\n\t\tp.setName(\"_cronexpression\");\n\t\tp.setPattern(cronExpressionPattern);\n\t\taddParameter(p);\n\n\t\tif (StringUtils.isNotEmpty(jobNamePattern)) {\n\t\t\tp = new Parameter();\n\t\t\tp.setName(\"_jobname\");\n\t\t\tp.setPattern(jobNamePattern);\n\t\t\taddParameter(p);\n\t\t}\n\t\tsuper.configure();\n\t}", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "SchedulerSender.configure()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "setName", "setPattern", "addParameter", "isNotEmpty", "setName", "setPattern", "addParameter", "configure"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}