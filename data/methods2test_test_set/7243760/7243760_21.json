{"test_class": {"identifier": "ExtendedChronologyTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/com/barchart/feed/api/series/ExtendedChronologyTest.java"}, "test_case": {"identifier": "testWithPeriodEnd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWithPeriodEnd() {\n\t\tDateTime testDate = new DateTime(2009, 5, 1, 0, 0, 0, 0);//Friday, May 1st\n\t\tDateTime adjustedDate = ExtendedChronology.withPeriodEnd(testDate);\n\t\tassertEquals(\"2009-06-30T00:00:00.000\", noZone(adjustedDate.toString()));\n\t\t\n\t\ttestDate = new DateTime(2009, 3, 27, 0, 0, 0, 0);//Friday, May 1st\n\t\tadjustedDate = ExtendedChronology.withPeriodEnd(testDate);\n\t\tassertEquals(\"2009-03-31T00:00:00.000\", noZone(adjustedDate.toString()));\n\t}", "signature": "void testWithPeriodEnd()", "full_signature": "@Test public void testWithPeriodEnd()", "class_method_signature": "ExtendedChronologyTest.testWithPeriodEnd()", "testcase": true, "constructor": false, "invocations": ["withPeriodEnd", "assertEquals", "noZone", "toString", "withPeriodEnd", "assertEquals", "noZone", "toString"]}, "focal_class": {"identifier": "ExtendedChronology", "superclass": "extends AssembledChronology", "interfaces": "", "fields": [{"original_string": "private static final ExtendedChronology INSTANCE_UTC;", "modifier": "private static final", "type": "ExtendedChronology", "declarator": "INSTANCE_UTC", "var_name": "INSTANCE_UTC"}, {"original_string": "private static final int FAST_CACHE_SIZE = 64;", "modifier": "private static final", "type": "int", "declarator": "FAST_CACHE_SIZE = 64", "var_name": "FAST_CACHE_SIZE"}, {"original_string": "private static final ExtendedChronology[] cFastCache;", "modifier": "private static final", "type": "ExtendedChronology[]", "declarator": "cFastCache", "var_name": "cFastCache"}, {"original_string": "private static final Map<DateTimeZone, Chronology> cCache = new HashMap<DateTimeZone, Chronology>();", "modifier": "private static final", "type": "Map<DateTimeZone, Chronology>", "declarator": "cCache = new HashMap<DateTimeZone, Chronology>()", "var_name": "cCache"}], "methods": [{"identifier": "getInstanceUTC", "parameters": "()", "modifiers": "public static", "return": "ExtendedChronology", "signature": "ExtendedChronology getInstanceUTC()", "full_signature": "public static ExtendedChronology getInstanceUTC()", "class_method_signature": "ExtendedChronology.getInstanceUTC()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "ExtendedChronology", "signature": "ExtendedChronology getInstance()", "full_signature": "public static ExtendedChronology getInstance()", "class_method_signature": "ExtendedChronology.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(DateTimeZone zone)", "modifiers": "public static", "return": "ExtendedChronology", "signature": "ExtendedChronology getInstance(DateTimeZone zone)", "full_signature": "public static ExtendedChronology getInstance(DateTimeZone zone)", "class_method_signature": "ExtendedChronology.getInstance(DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "getQuarter", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "int", "signature": "int getQuarter(DateTime dt)", "full_signature": "public static int getQuarter(DateTime dt)", "class_method_signature": "ExtendedChronology.getQuarter(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "withPeriodStart", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime withPeriodStart(DateTime dt)", "full_signature": "public static DateTime withPeriodStart(DateTime dt)", "class_method_signature": "ExtendedChronology.withPeriodStart(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "withPeriodEnd", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "DateTime", "signature": "DateTime withPeriodEnd(DateTime dt)", "full_signature": "public static DateTime withPeriodEnd(DateTime dt)", "class_method_signature": "ExtendedChronology.withPeriodEnd(DateTime dt)", "testcase": false, "constructor": false}, {"identifier": "ExtendedChronology", "parameters": "(Chronology base)", "modifiers": "private", "return": "", "signature": " ExtendedChronology(Chronology base)", "full_signature": "private  ExtendedChronology(Chronology base)", "class_method_signature": "ExtendedChronology.ExtendedChronology(Chronology base)", "testcase": false, "constructor": true}, {"identifier": "withUTC", "parameters": "()", "modifiers": "public", "return": "Chronology", "signature": "Chronology withUTC()", "full_signature": "public Chronology withUTC()", "class_method_signature": "ExtendedChronology.withUTC()", "testcase": false, "constructor": false}, {"identifier": "withZone", "parameters": "(DateTimeZone zone)", "modifiers": "public", "return": "Chronology", "signature": "Chronology withZone(DateTimeZone zone)", "full_signature": "public Chronology withZone(DateTimeZone zone)", "class_method_signature": "ExtendedChronology.withZone(DateTimeZone zone)", "testcase": false, "constructor": false}, {"identifier": "quarters", "parameters": "()", "modifiers": "public", "return": "DurationField", "signature": "DurationField quarters()", "full_signature": "public DurationField quarters()", "class_method_signature": "ExtendedChronology.quarters()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ExtendedChronology.toString()", "testcase": false, "constructor": false}, {"identifier": "assemble", "parameters": "(Fields fields)", "modifiers": "protected", "return": "void", "signature": "void assemble(Fields fields)", "full_signature": "protected void assemble(Fields fields)", "class_method_signature": "ExtendedChronology.assemble(Fields fields)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "ExtendedChronology.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "ExtendedChronology.hashCode()", "testcase": false, "constructor": false}, {"identifier": "writeReplace", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object writeReplace()", "full_signature": "private Object writeReplace()", "class_method_signature": "ExtendedChronology.writeReplace()", "testcase": false, "constructor": false}], "file": "api/src/main/java/com/barchart/feed/api/series/ExtendedChronology.java"}, "focal_method": {"identifier": "withPeriodEnd", "parameters": "(DateTime dt)", "modifiers": "public static", "return": "DateTime", "body": "public static DateTime withPeriodEnd(DateTime dt) {\n    \tdt = withPeriodStart(dt);\n    \tdt = dt.plusMonths(2).dayOfMonth().withMaximumValue();\n    \treturn dt;\n    }", "signature": "DateTime withPeriodEnd(DateTime dt)", "full_signature": "public static DateTime withPeriodEnd(DateTime dt)", "class_method_signature": "ExtendedChronology.withPeriodEnd(DateTime dt)", "testcase": false, "constructor": false, "invocations": ["withPeriodStart", "withMaximumValue", "dayOfMonth", "plusMonths"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}