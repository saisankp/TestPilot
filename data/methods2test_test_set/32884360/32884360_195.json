{"test_class": {"identifier": "CastUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String input;", "modifier": "private final", "type": "String", "declarator": "input", "var_name": "input"}, {"original_string": "private final long expected;", "modifier": "private final", "type": "long", "declarator": "expected", "var_name": "expected"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/server/types/mcompat/mcasts/CastUtilsTest.java"}, "test_case": {"identifier": "testTruncate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTruncate() {\n        TExecutionContext context = new TExecutionContext(null, null, null, null,\n                ErrorHandlingMode.IGNORE, ErrorHandlingMode.IGNORE, ErrorHandlingMode.IGNORE);\n        long actual = CastUtils.parseInRange(input, Long.MAX_VALUE, Long.MIN_VALUE, context);\n    \n        assertEquals(input, expected, actual);\n    }", "signature": "void testTruncate()", "full_signature": "@Test public void testTruncate()", "class_method_signature": "CastUtilsTest.testTruncate()", "testcase": true, "constructor": false, "invocations": ["parseInRange", "assertEquals"]}, "focal_class": {"identifier": "CastUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern DOUBLE_PATTERN = Pattern.compile(\"([-+]?\\\\d*)(\\\\.?\\\\d+)?([eE][-+]?\\\\d+)?\");", "modifier": "private static final", "type": "Pattern", "declarator": "DOUBLE_PATTERN = Pattern.compile(\"([-+]?\\\\d*)(\\\\.?\\\\d+)?([eE][-+]?\\\\d+)?\")", "var_name": "DOUBLE_PATTERN"}, {"original_string": "private static int WHOLE_PART = 1;", "modifier": "private static", "type": "int", "declarator": "WHOLE_PART = 1", "var_name": "WHOLE_PART"}, {"original_string": "private static int FLOAT_PART = 2;", "modifier": "private static", "type": "int", "declarator": "FLOAT_PART = 2", "var_name": "FLOAT_PART"}, {"original_string": "private static int EXP_PART = 3;", "modifier": "private static", "type": "int", "declarator": "EXP_PART = 3", "var_name": "EXP_PART"}, {"original_string": "public static final long MAX_TINYINT = 127;", "modifier": "public static final", "type": "long", "declarator": "MAX_TINYINT = 127", "var_name": "MAX_TINYINT"}, {"original_string": "public static final long MAX_UNSIGNED_TINYINT = 255;", "modifier": "public static final", "type": "long", "declarator": "MAX_UNSIGNED_TINYINT = 255", "var_name": "MAX_UNSIGNED_TINYINT"}, {"original_string": "public static final long MIN_TINYINT = -128;", "modifier": "public static final", "type": "long", "declarator": "MIN_TINYINT = -128", "var_name": "MIN_TINYINT"}, {"original_string": "public static final long MAX_SMALLINT = 32767;", "modifier": "public static final", "type": "long", "declarator": "MAX_SMALLINT = 32767", "var_name": "MAX_SMALLINT"}, {"original_string": "public static final long MAX_UNSIGNED_SMALLINT = 65535;", "modifier": "public static final", "type": "long", "declarator": "MAX_UNSIGNED_SMALLINT = 65535", "var_name": "MAX_UNSIGNED_SMALLINT"}, {"original_string": "public static final long MIN_SMALLINT = -32768;", "modifier": "public static final", "type": "long", "declarator": "MIN_SMALLINT = -32768", "var_name": "MIN_SMALLINT"}, {"original_string": "public static final long MAX_MEDINT = 8388607;", "modifier": "public static final", "type": "long", "declarator": "MAX_MEDINT = 8388607", "var_name": "MAX_MEDINT"}, {"original_string": "public static final long MAX_UNSIGNED_MEDINT = 16777215;", "modifier": "public static final", "type": "long", "declarator": "MAX_UNSIGNED_MEDINT = 16777215", "var_name": "MAX_UNSIGNED_MEDINT"}, {"original_string": "public static final long MIN_MEDINT = -8388608;", "modifier": "public static final", "type": "long", "declarator": "MIN_MEDINT = -8388608", "var_name": "MIN_MEDINT"}, {"original_string": "public static final long MAX_INT = 2147483647;", "modifier": "public static final", "type": "long", "declarator": "MAX_INT = 2147483647", "var_name": "MAX_INT"}, {"original_string": "public static final long MAX_UNSIGNED_INT = 4294967295L;", "modifier": "public static final", "type": "long", "declarator": "MAX_UNSIGNED_INT = 4294967295L", "var_name": "MAX_UNSIGNED_INT"}, {"original_string": "public static final long MIN_INT = -2147483648;", "modifier": "public static final", "type": "long", "declarator": "MIN_INT = -2147483648", "var_name": "MIN_INT"}, {"original_string": "public static final long MAX_BIGINT = 9223372036854775807L;", "modifier": "public static final", "type": "long", "declarator": "MAX_BIGINT = 9223372036854775807L", "var_name": "MAX_BIGINT"}, {"original_string": "public static final long MIN_BIGINT = -9223372036854775808L;", "modifier": "public static final", "type": "long", "declarator": "MIN_BIGINT = -9223372036854775808L", "var_name": "MIN_BIGINT"}, {"original_string": "private static final BigDecimal MAX_LONG = BigDecimal.valueOf(Long.MAX_VALUE);", "modifier": "private static final", "type": "BigDecimal", "declarator": "MAX_LONG = BigDecimal.valueOf(Long.MAX_VALUE)", "var_name": "MAX_LONG"}, {"original_string": "private static final BigDecimal MIN_LONG = BigDecimal.valueOf(Long.MIN_VALUE);", "modifier": "private static final", "type": "BigDecimal", "declarator": "MIN_LONG = BigDecimal.valueOf(Long.MIN_VALUE)", "var_name": "MIN_LONG"}], "methods": [{"identifier": "round", "parameters": "(long max, long min, double val, TExecutionContext context)", "modifiers": "public static", "return": "long", "signature": "long round(long max, long min, double val, TExecutionContext context)", "full_signature": "public static long round(long max, long min, double val, TExecutionContext context)", "class_method_signature": "CastUtils.round(long max, long min, double val, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "getInRange", "parameters": "(long max, long min, long val, TExecutionContext context)", "modifiers": "public static", "return": "long", "signature": "long getInRange(long max, long min, long val, TExecutionContext context)", "full_signature": "public static long getInRange(long max, long min, long val, TExecutionContext context)", "class_method_signature": "CastUtils.getInRange(long max, long min, long val, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "getInRange", "parameters": "(long max, long min, long val, long defaultVal, TExecutionContext context)", "modifiers": "public static", "return": "long", "signature": "long getInRange(long max, long min, long val, long defaultVal, TExecutionContext context)", "full_signature": "public static long getInRange(long max, long min, long val, long defaultVal, TExecutionContext context)", "class_method_signature": "CastUtils.getInRange(long max, long min, long val, long defaultVal, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "getNum", "parameters": "(int scale, int precision)", "modifiers": "public static", "return": "String", "signature": "String getNum(int scale, int precision)", "full_signature": "public static String getNum(int scale, int precision)", "class_method_signature": "CastUtils.getNum(int scale, int precision)", "testcase": false, "constructor": false}, {"identifier": "doCastDecimal", "parameters": "(TExecutionContext context,\n                            BigDecimalWrapper num,\n                            ValueTarget out)", "modifiers": "public static", "return": "void", "signature": "void doCastDecimal(TExecutionContext context,\n                            BigDecimalWrapper num,\n                            ValueTarget out)", "full_signature": "public static void doCastDecimal(TExecutionContext context,\n                            BigDecimalWrapper num,\n                            ValueTarget out)", "class_method_signature": "CastUtils.doCastDecimal(TExecutionContext context,\n                            BigDecimalWrapper num,\n                            ValueTarget out)", "testcase": false, "constructor": false}, {"identifier": "parseDecimalString", "parameters": "(String st, TExecutionContext context)", "modifiers": "public static", "return": "BigDecimalWrapperImpl", "signature": "BigDecimalWrapperImpl parseDecimalString(String st, TExecutionContext context)", "full_signature": "public static BigDecimalWrapperImpl parseDecimalString(String st, TExecutionContext context)", "class_method_signature": "CastUtils.parseDecimalString(String st, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "parseDoubleString", "parameters": "(String st, TExecutionContext context)", "modifiers": "public static", "return": "double", "signature": "double parseDoubleString(String st, TExecutionContext context)", "full_signature": "public static double parseDoubleString(String st, TExecutionContext context)", "class_method_signature": "CastUtils.parseDoubleString(String st, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "parseInRange", "parameters": "(String st, long max, long min, TExecutionContext context)", "modifiers": "public static", "return": "long", "signature": "long parseInRange(String st, long max, long min, TExecutionContext context)", "full_signature": "public static long parseInRange(String st, long max, long min, TExecutionContext context)", "class_method_signature": "CastUtils.parseInRange(String st, long max, long min, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "parseUnsignedLong", "parameters": "(String st, TExecutionContext context)", "modifiers": "public static", "return": "long", "signature": "long parseUnsignedLong(String st, TExecutionContext context)", "full_signature": "public static long parseUnsignedLong(String st, TExecutionContext context)", "class_method_signature": "CastUtils.parseUnsignedLong(String st, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "truncateNonDigits", "parameters": "(String st, TExecutionContext context)", "modifiers": "public static", "return": "Object", "signature": "Object truncateNonDigits(String st, TExecutionContext context)", "full_signature": "public static Object truncateNonDigits(String st, TExecutionContext context)", "class_method_signature": "CastUtils.truncateNonDigits(String st, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "truncateNonDigitPlainString", "parameters": "(String st, TExecutionContext context)", "modifiers": "public static", "return": "String", "signature": "String truncateNonDigitPlainString(String st, TExecutionContext context)", "full_signature": "public static String truncateNonDigitPlainString(String st, TExecutionContext context)", "class_method_signature": "CastUtils.truncateNonDigitPlainString(String st, TExecutionContext context)", "testcase": false, "constructor": false}, {"identifier": "isFiveOrHigher", "parameters": "(String string, int index)", "modifiers": "private static", "return": "boolean", "signature": "boolean isFiveOrHigher(String string, int index)", "full_signature": "private static boolean isFiveOrHigher(String string, int index)", "class_method_signature": "CastUtils.isFiveOrHigher(String string, int index)", "testcase": false, "constructor": false}, {"identifier": "adjustYear", "parameters": "(long raw, TExecutionContext context)", "modifiers": "public static", "return": "short", "signature": "short adjustYear(long raw, TExecutionContext context)", "full_signature": "public static short adjustYear(long raw, TExecutionContext context)", "class_method_signature": "CastUtils.adjustYear(long raw, TExecutionContext context)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/server/types/mcompat/mcasts/CastUtils.java"}, "focal_method": {"identifier": "parseInRange", "parameters": "(String st, long max, long min, TExecutionContext context)", "modifiers": "public static", "return": "long", "body": "public static long parseInRange(String st, long max, long min, TExecutionContext context)\n    {\n        Object truncated;\n\n        // first attempt\n        try\n        {\n            return CastUtils.getInRange(max, min, Long.parseLong(st), context);\n        }\n        catch (NumberFormatException e) // This could be an overflow, but there is no way to know\n        {\n            truncated = CastUtils.truncateNonDigits(st, context);\n        }\n\n        // second attemp\n        if (truncated instanceof String)\n        {\n            String truncatedStr = (String)truncated;\n            try\n            {\n                return CastUtils.getInRange(max, min, Long.parseLong(truncatedStr), context);\n            }\n            catch (NumberFormatException e) // overflow\n            {\n                context.reportOverflow(e.getMessage());\n                \n                // check wether the number is too big or too small\n                char first = truncatedStr.charAt(0);\n                if (first == '-')\n                    return getInRange(max, min, Long.MIN_VALUE, context);\n                else\n                    return getInRange(max, min, Long.MAX_VALUE, context);\n            }\n        }\n        else // must be a BigDecimal object\n        {\n            BigDecimal num = (BigDecimal)truncated;\n            \n            // check overflow\n            if (num.compareTo(MAX_LONG) > 0)\n            {\n                context.reportTruncate(st, Long.toString(max));\n                return max;\n            }\n            else if (num.compareTo(MIN_LONG) < 0)\n            {\n                context.reportTruncate(st, Long.toString(min));\n                return min;\n            }\n\n            try\n            {\n                return getInRange(max, min, num.longValueExact(), context);\n            }\n            catch (ArithmeticException e) // has non-zero fractional parts\n            {\n                long ret = num.setScale(0, RoundingMode.HALF_UP).longValue();\n                context.reportTruncate(st, Long.toString(ret));\n                return getInRange(max, min, ret, context);\n            }\n        }\n    }", "signature": "long parseInRange(String st, long max, long min, TExecutionContext context)", "full_signature": "public static long parseInRange(String st, long max, long min, TExecutionContext context)", "class_method_signature": "CastUtils.parseInRange(String st, long max, long min, TExecutionContext context)", "testcase": false, "constructor": false, "invocations": ["getInRange", "parseLong", "truncateNonDigits", "getInRange", "parseLong", "reportOverflow", "getMessage", "charAt", "getInRange", "getInRange", "compareTo", "reportTruncate", "toString", "compareTo", "reportTruncate", "toString", "getInRange", "longValueExact", "longValue", "setScale", "reportTruncate", "toString", "getInRange"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}