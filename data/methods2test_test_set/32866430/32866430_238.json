{"test_class": {"identifier": "AddActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "private static final Base64.Decoder base64Decoder = Base64.getDecoder();", "modifier": "private static final", "type": "Base64.Decoder", "declarator": "base64Decoder = Base64.getDecoder()", "var_name": "base64Decoder"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "AddActionConfig addActionConfig;", "modifier": "", "type": "AddActionConfig", "declarator": "addActionConfig", "var_name": "addActionConfig"}, {"original_string": "AddAction addAction;", "modifier": "", "type": "AddAction", "declarator": "addAction", "var_name": "addAction"}, {"original_string": "Client client =\n      new Client(4, \"newClient\", null, null, null, null, null, null, null, null, true, false);", "modifier": "", "type": "Client", "declarator": "client =\n      new Client(4, \"newClient\", null, null, null, null, null, null, null, null, true, false)", "var_name": "client"}, {"original_string": "Group group = new Group(4, \"newGroup\", null, null, null, null, null, null);", "modifier": "", "type": "Group", "declarator": "group = new Group(4, \"newGroup\", null, null, null, null, null, null)", "var_name": "group"}, {"original_string": "Secret secret =\n      new Secret(15, \"newSecret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null,\n          null, null, ImmutableMap.of(), 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secret =\n      new Secret(15, \"newSecret\", null, () -> \"c2VjcmV0MQ==\", \"checksum\", NOW, null, NOW, null,\n          null, null, ImmutableMap.of(), 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "SanitizedSecret sanitizedSecret = SanitizedSecret.fromSecret(secret);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecret = SanitizedSecret.fromSecret(secret)", "var_name": "sanitizedSecret"}, {"original_string": "SecretDetailResponse secretDetailResponse = SecretDetailResponse.fromSecret(secret, null, null);", "modifier": "", "type": "SecretDetailResponse", "declarator": "secretDetailResponse = SecretDetailResponse.fromSecret(secret, null, null)", "var_name": "secretDetailResponse"}], "file": "cli/src/test/java/keywhiz/cli/commands/AddActionTest.java"}, "test_case": {"identifier": "addValidatesSecretName", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void addValidatesSecretName() throws Exception {\n    addActionConfig.addType = Arrays.asList(\"secret\");\n    addActionConfig.name = \"Invalid Name\";\n\n    addAction.run();\n  }", "signature": "void addValidatesSecretName()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void addValidatesSecretName()", "class_method_signature": "AddActionTest.addValidatesSecretName()", "testcase": true, "constructor": false, "invocations": ["asList", "run"]}, "focal_class": {"identifier": "AddAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AddAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AddAction.class)", "var_name": "logger"}, {"original_string": "private final AddActionConfig config;", "modifier": "private final", "type": "AddActionConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "InputStream stream = System.in;", "modifier": "", "type": "InputStream", "declarator": "stream = System.in", "var_name": "stream"}], "methods": [{"identifier": "AddAction", "parameters": "(AddActionConfig config, KeywhizClient client, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " AddAction(AddActionConfig config, KeywhizClient client, ObjectMapper mapper)", "full_signature": "public  AddAction(AddActionConfig config, KeywhizClient client, ObjectMapper mapper)", "class_method_signature": "AddAction.AddAction(AddActionConfig config, KeywhizClient client, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AddAction.run()", "testcase": false, "constructor": false}, {"identifier": "createAndAssignSecret", "parameters": "(String secretName, String description, byte[] content,\n      ImmutableMap<String, String> metadata, long expiry)", "modifiers": "private", "return": "void", "signature": "void createAndAssignSecret(String secretName, String description, byte[] content,\n      ImmutableMap<String, String> metadata, long expiry)", "full_signature": "private void createAndAssignSecret(String secretName, String description, byte[] content,\n      ImmutableMap<String, String> metadata, long expiry)", "class_method_signature": "AddAction.createAndAssignSecret(String secretName, String description, byte[] content,\n      ImmutableMap<String, String> metadata, long expiry)", "testcase": false, "constructor": false}, {"identifier": "readSecretContent", "parameters": "()", "modifiers": "private", "return": "byte[]", "signature": "byte[] readSecretContent()", "full_signature": "private byte[] readSecretContent()", "class_method_signature": "AddAction.readSecretContent()", "testcase": false, "constructor": false}, {"identifier": "assignSecret", "parameters": "(long secretId, String secretDisplayName)", "modifiers": "private", "return": "void", "signature": "void assignSecret(long secretId, String secretDisplayName)", "full_signature": "private void assignSecret(long secretId, String secretDisplayName)", "class_method_signature": "AddAction.assignSecret(long secretId, String secretDisplayName)", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/AddAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    List<String> types = config.addType;\n\n    if (types == null || types.isEmpty()) {\n      throw new IllegalArgumentException(\"Must specify a single type to add.\");\n    }\n\n    String firstType = types.get(0).toLowerCase().trim();\n    String name = config.name;\n\n    if (name == null || !validName(name)) {\n      throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN));\n    }\n\n    switch (firstType) {\n      case \"group\":\n        try {\n          keywhizClient.getGroupByName(name);\n          throw new AssertionError(\"Group already exists.\");\n        } catch (NotFoundException e) {\n          // group does not exist, continue to add it\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        try {\n          keywhizClient.createGroup(name, config.getDescription(), config.getMetadata(mapper));\n          logger.info(\"Creating group '{}'.\", name);\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      case \"secret\":\n        try {\n          keywhizClient.getSanitizedSecretByName(name);\n          throw new AssertionError(\"Secret already exists.\");\n        } catch (NotFoundException e) {\n          // secret does not exist, continue to add it\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        byte[] content = readSecretContent();\n        ImmutableMap<String, String> metadata = config.getMetadata(mapper);\n\n        createAndAssignSecret(name, config.getDescription(), content, metadata, config.getExpiry());\n        break;\n\n      case \"client\":\n        try {\n          keywhizClient.getClientByName(name);\n          throw new AssertionError(\"Client name already exists.\");\n        } catch (NotFoundException e) {\n          // client does not exist, continue to add it\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        try {\n          keywhizClient.createClient(name, config.getDescription(), config.getSpiffeId());\n          logger.info(\"Creating client '{}'.\", name);\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n        break;\n\n      default:\n        throw new AssertionError(\"Invalid add type specified: \" + firstType);\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "AddAction.run()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "trim", "toLowerCase", "get", "validName", "format", "getGroupByName", "propagate", "createGroup", "getDescription", "getMetadata", "info", "propagate", "getSanitizedSecretByName", "propagate", "readSecretContent", "getMetadata", "createAndAssignSecret", "getDescription", "getExpiry", "getClientByName", "propagate", "createClient", "getDescription", "getSpiffeId", "info", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}