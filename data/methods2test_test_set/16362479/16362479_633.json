{"test_class": {"identifier": "DistributedShardedDOMDataTreeTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DistributedShardedDOMDataTreeRemotingTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DistributedShardedDOMDataTreeRemotingTest.class)", "var_name": "LOG"}, {"original_string": "private static final Address MEMBER_1_ADDRESS =\n            AddressFromURIString.parse(\"akka.tcp://cluster-test@127.0.0.1:2558\");", "modifier": "private static final", "type": "Address", "declarator": "MEMBER_1_ADDRESS =\n            AddressFromURIString.parse(\"akka.tcp://cluster-test@127.0.0.1:2558\")", "var_name": "MEMBER_1_ADDRESS"}, {"original_string": "private static final DOMDataTreeIdentifier TEST_ID =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION, TestModel.TEST_PATH);", "modifier": "private static final", "type": "DOMDataTreeIdentifier", "declarator": "TEST_ID =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION, TestModel.TEST_PATH)", "var_name": "TEST_ID"}, {"original_string": "private static final DOMDataTreeIdentifier INNER_LIST_ID =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION,\n                    YangInstanceIdentifier.create(getOuterListIdFor(0).getPathArguments())\n                            .node(TestModel.INNER_LIST_QNAME));", "modifier": "private static final", "type": "DOMDataTreeIdentifier", "declarator": "INNER_LIST_ID =\n            new DOMDataTreeIdentifier(LogicalDatastoreType.CONFIGURATION,\n                    YangInstanceIdentifier.create(getOuterListIdFor(0).getPathArguments())\n                            .node(TestModel.INNER_LIST_QNAME))", "var_name": "INNER_LIST_ID"}, {"original_string": "private static final Set<MemberName> SINGLE_MEMBER = Collections.singleton(AbstractTest.MEMBER_NAME);", "modifier": "private static final", "type": "Set<MemberName>", "declarator": "SINGLE_MEMBER = Collections.singleton(AbstractTest.MEMBER_NAME)", "var_name": "SINGLE_MEMBER"}, {"original_string": "private static final String MODULE_SHARDS_CONFIG = \"module-shards-default-member-1.conf\";", "modifier": "private static final", "type": "String", "declarator": "MODULE_SHARDS_CONFIG = \"module-shards-default-member-1.conf\"", "var_name": "MODULE_SHARDS_CONFIG"}, {"original_string": "private ActorSystem leaderSystem;", "modifier": "private", "type": "ActorSystem", "declarator": "leaderSystem", "var_name": "leaderSystem"}, {"original_string": "private final Builder leaderDatastoreContextBuilder =\n            DatastoreContext.newBuilder()\n                    .shardHeartbeatIntervalInMillis(100)\n                    .shardElectionTimeoutFactor(2)\n                    .logicalStoreType(LogicalDatastoreType.CONFIGURATION);", "modifier": "private final", "type": "Builder", "declarator": "leaderDatastoreContextBuilder =\n            DatastoreContext.newBuilder()\n                    .shardHeartbeatIntervalInMillis(100)\n                    .shardElectionTimeoutFactor(2)\n                    .logicalStoreType(LogicalDatastoreType.CONFIGURATION)", "var_name": "leaderDatastoreContextBuilder"}, {"original_string": "private DistributedDataStore leaderDistributedDataStore;", "modifier": "private", "type": "DistributedDataStore", "declarator": "leaderDistributedDataStore", "var_name": "leaderDistributedDataStore"}, {"original_string": "private DistributedDataStore operDistributedDatastore;", "modifier": "private", "type": "DistributedDataStore", "declarator": "operDistributedDatastore", "var_name": "operDistributedDatastore"}, {"original_string": "private IntegrationTestKit leaderTestKit;", "modifier": "private", "type": "IntegrationTestKit", "declarator": "leaderTestKit", "var_name": "leaderTestKit"}, {"original_string": "private DistributedShardedDOMDataTree leaderShardFactory;", "modifier": "private", "type": "DistributedShardedDOMDataTree", "declarator": "leaderShardFactory", "var_name": "leaderShardFactory"}, {"original_string": "@Captor\n    private ArgumentCaptor<Collection<DataTreeCandidate>> captorForChanges;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Collection<DataTreeCandidate>>", "declarator": "captorForChanges", "var_name": "captorForChanges"}, {"original_string": "@Captor\n    private ArgumentCaptor<Map<DOMDataTreeIdentifier, NormalizedNode<?, ?>>> captorForSubtrees;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<Map<DOMDataTreeIdentifier, NormalizedNode<?, ?>>>", "declarator": "captorForSubtrees", "var_name": "captorForSubtrees"}, {"original_string": "private ActorSystemProvider leaderSystemProvider;", "modifier": "private", "type": "ActorSystemProvider", "declarator": "leaderSystemProvider", "var_name": "leaderSystemProvider"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/sharding/DistributedShardedDOMDataTreeTest.java"}, "test_case": {"identifier": "testMultipleRegistrationsAtOnePrefix", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultipleRegistrationsAtOnePrefix() throws Exception {\n        initEmptyDatastores();\n\n        for (int i = 0; i < 10; i++) {\n            LOG.debug(\"Round {}\", i);\n            final DistributedShardRegistration reg1 = waitOnAsyncTask(leaderShardFactory.createDistributedShard(\n                    TEST_ID, Lists.newArrayList(AbstractTest.MEMBER_NAME)),\n                    DistributedShardedDOMDataTree.SHARD_FUTURE_TIMEOUT_DURATION);\n\n            leaderTestKit.waitUntilLeader(leaderDistributedDataStore.getActorUtils(),\n                    ClusterUtils.getCleanShardName(TestModel.TEST_PATH));\n\n            assertNotNull(findLocalShard(leaderDistributedDataStore.getActorUtils(),\n                    ClusterUtils.getCleanShardName(TestModel.TEST_PATH)));\n\n            waitOnAsyncTask(reg1.close(), DistributedShardedDOMDataTree.SHARD_FUTURE_TIMEOUT_DURATION);\n\n            waitUntilShardIsDown(leaderDistributedDataStore.getActorUtils(),\n                    ClusterUtils.getCleanShardName(TestModel.TEST_PATH));\n        }\n    }", "signature": "void testMultipleRegistrationsAtOnePrefix()", "full_signature": "@Test public void testMultipleRegistrationsAtOnePrefix()", "class_method_signature": "DistributedShardedDOMDataTreeTest.testMultipleRegistrationsAtOnePrefix()", "testcase": true, "constructor": false, "invocations": ["initEmptyDatastores", "debug", "waitOnAsyncTask", "createDistributedShard", "newArrayList", "waitUntilLeader", "getActorUtils", "getCleanShardName", "assertNotNull", "findLocalShard", "getActorUtils", "getCleanShardName", "waitOnAsyncTask", "close", "waitUntilShardIsDown", "getActorUtils", "getCleanShardName"]}, "focal_class": {"identifier": "DistributedShardedDOMDataTree", "superclass": "", "interfaces": "implements DOMDataTreeService, DOMDataTreeShardingService,\n        DistributedShardFactory", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DistributedShardedDOMDataTree.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DistributedShardedDOMDataTree.class)", "var_name": "LOG"}, {"original_string": "private static final int MAX_ACTOR_CREATION_RETRIES = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_ACTOR_CREATION_RETRIES = 100", "var_name": "MAX_ACTOR_CREATION_RETRIES"}, {"original_string": "private static final int ACTOR_RETRY_DELAY = 100;", "modifier": "private static final", "type": "int", "declarator": "ACTOR_RETRY_DELAY = 100", "var_name": "ACTOR_RETRY_DELAY"}, {"original_string": "private static final TimeUnit ACTOR_RETRY_TIME_UNIT = TimeUnit.MILLISECONDS;", "modifier": "private static final", "type": "TimeUnit", "declarator": "ACTOR_RETRY_TIME_UNIT = TimeUnit.MILLISECONDS", "var_name": "ACTOR_RETRY_TIME_UNIT"}, {"original_string": "private static final int LOOKUP_TASK_MAX_RETRIES = 100;", "modifier": "private static final", "type": "int", "declarator": "LOOKUP_TASK_MAX_RETRIES = 100", "var_name": "LOOKUP_TASK_MAX_RETRIES"}, {"original_string": "static final FiniteDuration SHARD_FUTURE_TIMEOUT_DURATION =\n            new FiniteDuration(LOOKUP_TASK_MAX_RETRIES * LOOKUP_TASK_MAX_RETRIES * 3, TimeUnit.SECONDS);", "modifier": "static final", "type": "FiniteDuration", "declarator": "SHARD_FUTURE_TIMEOUT_DURATION =\n            new FiniteDuration(LOOKUP_TASK_MAX_RETRIES * LOOKUP_TASK_MAX_RETRIES * 3, TimeUnit.SECONDS)", "var_name": "SHARD_FUTURE_TIMEOUT_DURATION"}, {"original_string": "static final Timeout SHARD_FUTURE_TIMEOUT = new Timeout(SHARD_FUTURE_TIMEOUT_DURATION);", "modifier": "static final", "type": "Timeout", "declarator": "SHARD_FUTURE_TIMEOUT = new Timeout(SHARD_FUTURE_TIMEOUT_DURATION)", "var_name": "SHARD_FUTURE_TIMEOUT"}, {"original_string": "static final String ACTOR_ID = \"ShardedDOMDataTreeFrontend\";", "modifier": "static final", "type": "String", "declarator": "ACTOR_ID = \"ShardedDOMDataTreeFrontend\"", "var_name": "ACTOR_ID"}, {"original_string": "private final ShardedDOMDataTree shardedDOMDataTree;", "modifier": "private final", "type": "ShardedDOMDataTree", "declarator": "shardedDOMDataTree", "var_name": "shardedDOMDataTree"}, {"original_string": "private final ActorSystem actorSystem;", "modifier": "private final", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private final DistributedDataStoreInterface distributedOperDatastore;", "modifier": "private final", "type": "DistributedDataStoreInterface", "declarator": "distributedOperDatastore", "var_name": "distributedOperDatastore"}, {"original_string": "private final DistributedDataStoreInterface distributedConfigDatastore;", "modifier": "private final", "type": "DistributedDataStoreInterface", "declarator": "distributedConfigDatastore", "var_name": "distributedConfigDatastore"}, {"original_string": "private final ActorRef shardedDataTreeActor;", "modifier": "private final", "type": "ActorRef", "declarator": "shardedDataTreeActor", "var_name": "shardedDataTreeActor"}, {"original_string": "private final MemberName memberName;", "modifier": "private final", "type": "MemberName", "declarator": "memberName", "var_name": "memberName"}, {"original_string": "@GuardedBy(\"shards\")\n    private final DOMDataTreePrefixTable<DOMDataTreeShardRegistration<DOMDataTreeShard>> shards =\n            DOMDataTreePrefixTable.create();", "modifier": "@GuardedBy(\"shards\")\n    private final", "type": "DOMDataTreePrefixTable<DOMDataTreeShardRegistration<DOMDataTreeShard>>", "declarator": "shards =\n            DOMDataTreePrefixTable.create()", "var_name": "shards"}, {"original_string": "private final EnumMap<LogicalDatastoreType, Entry<DataStoreClient, ActorRef>> configurationShardMap =\n            new EnumMap<>(LogicalDatastoreType.class);", "modifier": "private final", "type": "EnumMap<LogicalDatastoreType, Entry<DataStoreClient, ActorRef>>", "declarator": "configurationShardMap =\n            new EnumMap<>(LogicalDatastoreType.class)", "var_name": "configurationShardMap"}, {"original_string": "private final EnumMap<LogicalDatastoreType, PrefixedShardConfigWriter> writerMap =\n            new EnumMap<>(LogicalDatastoreType.class);", "modifier": "private final", "type": "EnumMap<LogicalDatastoreType, PrefixedShardConfigWriter>", "declarator": "writerMap =\n            new EnumMap<>(LogicalDatastoreType.class)", "var_name": "writerMap"}, {"original_string": "private final PrefixedShardConfigUpdateHandler updateHandler;", "modifier": "private final", "type": "PrefixedShardConfigUpdateHandler", "declarator": "updateHandler", "var_name": "updateHandler"}], "methods": [{"identifier": "DistributedShardedDOMDataTree", "parameters": "(final ActorSystemProvider actorSystemProvider,\n                                         final DistributedDataStoreInterface distributedOperDatastore,\n                                         final DistributedDataStoreInterface distributedConfigDatastore)", "modifiers": "public", "return": "", "signature": " DistributedShardedDOMDataTree(final ActorSystemProvider actorSystemProvider,\n                                         final DistributedDataStoreInterface distributedOperDatastore,\n                                         final DistributedDataStoreInterface distributedConfigDatastore)", "full_signature": "public  DistributedShardedDOMDataTree(final ActorSystemProvider actorSystemProvider,\n                                         final DistributedDataStoreInterface distributedOperDatastore,\n                                         final DistributedDataStoreInterface distributedConfigDatastore)", "class_method_signature": "DistributedShardedDOMDataTree.DistributedShardedDOMDataTree(final ActorSystemProvider actorSystemProvider,\n                                         final DistributedDataStoreInterface distributedOperDatastore,\n                                         final DistributedDataStoreInterface distributedConfigDatastore)", "testcase": false, "constructor": true}, {"identifier": "createPrefixConfigShard", "parameters": "(final DistributedDataStoreInterface dataStore)", "modifiers": "private static", "return": "void", "signature": "void createPrefixConfigShard(final DistributedDataStoreInterface dataStore)", "full_signature": "private static void createPrefixConfigShard(final DistributedDataStoreInterface dataStore)", "class_method_signature": "DistributedShardedDOMDataTree.createPrefixConfigShard(final DistributedDataStoreInterface dataStore)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "DistributedShardedDOMDataTree.init()", "testcase": false, "constructor": false}, {"identifier": "handleConfigShardLookup", "parameters": "()", "modifiers": "private", "return": "ListenableFuture<List<Void>>", "signature": "ListenableFuture<List<Void>> handleConfigShardLookup()", "full_signature": "private ListenableFuture<List<Void>> handleConfigShardLookup()", "class_method_signature": "DistributedShardedDOMDataTree.handleConfigShardLookup()", "testcase": false, "constructor": false}, {"identifier": "lookupConfigShard", "parameters": "(final LogicalDatastoreType type)", "modifiers": "private", "return": "ListenableFuture<Void>", "signature": "ListenableFuture<Void> lookupConfigShard(final LogicalDatastoreType type)", "full_signature": "private ListenableFuture<Void> lookupConfigShard(final LogicalDatastoreType type)", "class_method_signature": "DistributedShardedDOMDataTree.lookupConfigShard(final LogicalDatastoreType type)", "testcase": false, "constructor": false}, {"identifier": "registerListener", "parameters": "(\n            final T listener, final Collection<DOMDataTreeIdentifier> subtrees,\n            final boolean allowRxMerges, final Collection<DOMDataTreeProducer> producers)", "modifiers": "@Override public", "return": "ListenerRegistration<T>", "signature": "ListenerRegistration<T> registerListener(\n            final T listener, final Collection<DOMDataTreeIdentifier> subtrees,\n            final boolean allowRxMerges, final Collection<DOMDataTreeProducer> producers)", "full_signature": "@Override public ListenerRegistration<T> registerListener(\n            final T listener, final Collection<DOMDataTreeIdentifier> subtrees,\n            final boolean allowRxMerges, final Collection<DOMDataTreeProducer> producers)", "class_method_signature": "DistributedShardedDOMDataTree.registerListener(\n            final T listener, final Collection<DOMDataTreeIdentifier> subtrees,\n            final boolean allowRxMerges, final Collection<DOMDataTreeProducer> producers)", "testcase": false, "constructor": false}, {"identifier": "getExtensions", "parameters": "()", "modifiers": "@Override public", "return": "ClassToInstanceMap<DOMDataTreeServiceExtension>", "signature": "ClassToInstanceMap<DOMDataTreeServiceExtension> getExtensions()", "full_signature": "@Override public ClassToInstanceMap<DOMDataTreeServiceExtension> getExtensions()", "class_method_signature": "DistributedShardedDOMDataTree.getExtensions()", "testcase": false, "constructor": false}, {"identifier": "createProducer", "parameters": "(final Collection<DOMDataTreeIdentifier> subtrees)", "modifiers": "@Override public", "return": "DOMDataTreeProducer", "signature": "DOMDataTreeProducer createProducer(final Collection<DOMDataTreeIdentifier> subtrees)", "full_signature": "@Override public DOMDataTreeProducer createProducer(final Collection<DOMDataTreeIdentifier> subtrees)", "class_method_signature": "DistributedShardedDOMDataTree.createProducer(final Collection<DOMDataTreeIdentifier> subtrees)", "testcase": false, "constructor": false}, {"identifier": "createDistributedShard", "parameters": "(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "modifiers": "@Override public", "return": "CompletionStage<DistributedShardRegistration>", "signature": "CompletionStage<DistributedShardRegistration> createDistributedShard(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "full_signature": "@Override public CompletionStage<DistributedShardRegistration> createDistributedShard(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "class_method_signature": "DistributedShardedDOMDataTree.createDistributedShard(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "testcase": false, "constructor": false}, {"identifier": "resolveShardAdditions", "parameters": "(final Set<DOMDataTreeIdentifier> additions)", "modifiers": "", "return": "void", "signature": "void resolveShardAdditions(final Set<DOMDataTreeIdentifier> additions)", "full_signature": " void resolveShardAdditions(final Set<DOMDataTreeIdentifier> additions)", "class_method_signature": "DistributedShardedDOMDataTree.resolveShardAdditions(final Set<DOMDataTreeIdentifier> additions)", "testcase": false, "constructor": false}, {"identifier": "resolveShardRemovals", "parameters": "(final Set<DOMDataTreeIdentifier> removals)", "modifiers": "", "return": "void", "signature": "void resolveShardRemovals(final Set<DOMDataTreeIdentifier> removals)", "full_signature": " void resolveShardRemovals(final Set<DOMDataTreeIdentifier> removals)", "class_method_signature": "DistributedShardedDOMDataTree.resolveShardRemovals(final Set<DOMDataTreeIdentifier> removals)", "testcase": false, "constructor": false}, {"identifier": "createShardFrontend", "parameters": "(final DOMDataTreeIdentifier prefix)", "modifiers": "private", "return": "void", "signature": "void createShardFrontend(final DOMDataTreeIdentifier prefix)", "full_signature": "private void createShardFrontend(final DOMDataTreeIdentifier prefix)", "class_method_signature": "DistributedShardedDOMDataTree.createShardFrontend(final DOMDataTreeIdentifier prefix)", "testcase": false, "constructor": false}, {"identifier": "despawnShardFrontend", "parameters": "(final DOMDataTreeIdentifier prefix)", "modifiers": "private", "return": "void", "signature": "void despawnShardFrontend(final DOMDataTreeIdentifier prefix)", "full_signature": "private void despawnShardFrontend(final DOMDataTreeIdentifier prefix)", "class_method_signature": "DistributedShardedDOMDataTree.despawnShardFrontend(final DOMDataTreeIdentifier prefix)", "testcase": false, "constructor": false}, {"identifier": "lookupShardFrontend", "parameters": "(\n            final DOMDataTreeIdentifier prefix)", "modifiers": "", "return": "DOMDataTreePrefixTableEntry<DOMDataTreeShardRegistration<DOMDataTreeShard>>", "signature": "DOMDataTreePrefixTableEntry<DOMDataTreeShardRegistration<DOMDataTreeShard>> lookupShardFrontend(\n            final DOMDataTreeIdentifier prefix)", "full_signature": " DOMDataTreePrefixTableEntry<DOMDataTreeShardRegistration<DOMDataTreeShard>> lookupShardFrontend(\n            final DOMDataTreeIdentifier prefix)", "class_method_signature": "DistributedShardedDOMDataTree.lookupShardFrontend(\n            final DOMDataTreeIdentifier prefix)", "testcase": false, "constructor": false}, {"identifier": "localCreateProducer", "parameters": "(final Collection<DOMDataTreeIdentifier> prefix)", "modifiers": "", "return": "DOMDataTreeProducer", "signature": "DOMDataTreeProducer localCreateProducer(final Collection<DOMDataTreeIdentifier> prefix)", "full_signature": " DOMDataTreeProducer localCreateProducer(final Collection<DOMDataTreeIdentifier> prefix)", "class_method_signature": "DistributedShardedDOMDataTree.localCreateProducer(final Collection<DOMDataTreeIdentifier> prefix)", "testcase": false, "constructor": false}, {"identifier": "registerDataTreeShard", "parameters": "(\n            final DOMDataTreeIdentifier prefix, final T shard, final DOMDataTreeProducer producer)", "modifiers": "@Override public", "return": "ListenerRegistration<T>", "signature": "ListenerRegistration<T> registerDataTreeShard(\n            final DOMDataTreeIdentifier prefix, final T shard, final DOMDataTreeProducer producer)", "full_signature": "@Override public ListenerRegistration<T> registerDataTreeShard(\n            final DOMDataTreeIdentifier prefix, final T shard, final DOMDataTreeProducer producer)", "class_method_signature": "DistributedShardedDOMDataTree.registerDataTreeShard(\n            final DOMDataTreeIdentifier prefix, final T shard, final DOMDataTreeProducer producer)", "testcase": false, "constructor": false}, {"identifier": "createDatastoreClient", "parameters": "(final String shardName, final ActorUtils actorUtils)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "Entry<DataStoreClient, ActorRef>", "signature": "Entry<DataStoreClient, ActorRef> createDatastoreClient(final String shardName, final ActorUtils actorUtils)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private Entry<DataStoreClient, ActorRef> createDatastoreClient(final String shardName, final ActorUtils actorUtils)", "class_method_signature": "DistributedShardedDOMDataTree.createDatastoreClient(final String shardName, final ActorUtils actorUtils)", "testcase": false, "constructor": false}, {"identifier": "initDefaultShard", "parameters": "(final LogicalDatastoreType logicalDatastoreType)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void initDefaultShard(final LogicalDatastoreType logicalDatastoreType)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void initDefaultShard(final LogicalDatastoreType logicalDatastoreType)", "class_method_signature": "DistributedShardedDOMDataTree.initDefaultShard(final LogicalDatastoreType logicalDatastoreType)", "testcase": false, "constructor": false}, {"identifier": "closeProducer", "parameters": "(final DOMDataTreeProducer producer)", "modifiers": "private static", "return": "void", "signature": "void closeProducer(final DOMDataTreeProducer producer)", "full_signature": "private static void closeProducer(final DOMDataTreeProducer producer)", "class_method_signature": "DistributedShardedDOMDataTree.closeProducer(final DOMDataTreeProducer producer)", "testcase": false, "constructor": false}, {"identifier": "createShardedDataTreeActor", "parameters": "(final ActorSystem actorSystem,\n                                                       final ShardedDataTreeActorCreator creator,\n                                                       final String shardDataTreeActorId)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private static", "return": "ActorRef", "signature": "ActorRef createShardedDataTreeActor(final ActorSystem actorSystem,\n                                                       final ShardedDataTreeActorCreator creator,\n                                                       final String shardDataTreeActorId)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private static ActorRef createShardedDataTreeActor(final ActorSystem actorSystem,\n                                                       final ShardedDataTreeActorCreator creator,\n                                                       final String shardDataTreeActorId)", "class_method_signature": "DistributedShardedDOMDataTree.createShardedDataTreeActor(final ActorSystem actorSystem,\n                                                       final ShardedDataTreeActorCreator creator,\n                                                       final String shardDataTreeActorId)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/sharding/DistributedShardedDOMDataTree.java"}, "focal_method": {"identifier": "createDistributedShard", "parameters": "(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "modifiers": "@Override public", "return": "CompletionStage<DistributedShardRegistration>", "body": "@Override\n    public CompletionStage<DistributedShardRegistration> createDistributedShard(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)\n            throws DOMDataTreeShardingConflictException {\n\n        synchronized (shards) {\n            final DOMDataTreePrefixTableEntry<DOMDataTreeShardRegistration<DOMDataTreeShard>> lookup =\n                    shards.lookup(prefix);\n            if (lookup != null && lookup.getValue().getPrefix().equals(prefix)) {\n                throw new DOMDataTreeShardingConflictException(\n                        \"Prefix \" + prefix + \" is already occupied by another shard.\");\n            }\n        }\n\n        final PrefixedShardConfigWriter writer = writerMap.get(prefix.getDatastoreType());\n\n        final ListenableFuture<Void> writeFuture =\n                writer.writeConfig(prefix.getRootIdentifier(), replicaMembers);\n\n        final Promise<DistributedShardRegistration> shardRegistrationPromise = akka.dispatch.Futures.promise();\n        Futures.addCallback(writeFuture, new FutureCallback<Void>() {\n            @Override\n            public void onSuccess(final Void result) {\n\n                final Future<Object> ask =\n                        Patterns.ask(shardedDataTreeActor, new LookupPrefixShard(prefix), SHARD_FUTURE_TIMEOUT);\n\n                shardRegistrationPromise.completeWith(ask.transform(\n                        new Mapper<Object, DistributedShardRegistration>() {\n                            @Override\n                            public DistributedShardRegistration apply(final Object parameter) {\n                                return new DistributedShardRegistrationImpl(\n                                        prefix, shardedDataTreeActor, DistributedShardedDOMDataTree.this);\n                            }\n                        },\n                        new Mapper<Throwable, Throwable>() {\n                            @Override\n                            public Throwable apply(final Throwable throwable) {\n                                return new DOMDataTreeShardCreationFailedException(\n                                        \"Unable to create a cds shard.\", throwable);\n                            }\n                        }, actorSystem.dispatcher()));\n            }\n\n            @Override\n            public void onFailure(final Throwable throwable) {\n                shardRegistrationPromise.failure(\n                        new DOMDataTreeShardCreationFailedException(\"Unable to create a cds shard.\", throwable));\n            }\n        }, MoreExecutors.directExecutor());\n\n        return FutureConverters.toJava(shardRegistrationPromise.future());\n    }", "signature": "CompletionStage<DistributedShardRegistration> createDistributedShard(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "full_signature": "@Override public CompletionStage<DistributedShardRegistration> createDistributedShard(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "class_method_signature": "DistributedShardedDOMDataTree.createDistributedShard(\n            final DOMDataTreeIdentifier prefix, final Collection<MemberName> replicaMembers)", "testcase": false, "constructor": false, "invocations": ["lookup", "equals", "getPrefix", "getValue", "get", "getDatastoreType", "writeConfig", "getRootIdentifier", "promise", "addCallback", "ask", "completeWith", "transform", "dispatcher", "failure", "directExecutor", "toJava", "future"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}