{"test_class": {"identifier": "JcrSql2QueryParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private JcrValueFactory valueFactory;", "modifier": "@Mock\n    private", "type": "JcrValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}, {"original_string": "private JcrTypeSystem typeSystem;", "modifier": "private", "type": "JcrTypeSystem", "declarator": "typeSystem", "var_name": "typeSystem"}, {"original_string": "private JcrSql2QueryParser parser;", "modifier": "private", "type": "JcrSql2QueryParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private Query query;", "modifier": "private", "type": "Query", "declarator": "query", "var_name": "query"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/parse/JcrSql2QueryParserTest.java"}, "test_case": {"identifier": "shouldParseSelectStarFromEquijoinAndAdditionalCriteria", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldParseSelectStarFromEquijoinAndAdditionalCriteria() {\n        query = parse(\"SELECT * FROM [modetest:queryable] JOIN [mix:referenceable] ON ISSAMENODE([modetest:queryable],[mix:referenceable]) WHERE PATH([modetest:queryable]) LIKE '/testroot/someQueryableNodeD/%'\");\n        // SELECT * ...\n        assertThat(query.columns().isEmpty(), is(true));\n        // FROM ...\n        Join join = isJoin(query.source());\n        assertThat(join.getLeft(), is((Source)namedSelector(selectorName(\"modetest:queryable\"))));\n        assertThat(join.getRight(), is((Source)namedSelector(selectorName(\"mix:referenceable\"))));\n        assertThat(join.type(), is(JoinType.INNER));\n        SameNodeJoinCondition joinCondition = isSameNodeJoinCondition(join.getJoinCondition());\n        assertThat(joinCondition.selector1Name(), is(selectorName(\"modetest:queryable\")));\n        assertThat(joinCondition.selector2Name(), is(selectorName(\"mix:referenceable\")));\n        assertThat(joinCondition.getSelector2Path(), is(nullValue()));\n        // WHERE ...\n        Comparison comparison = isComparison(query.constraint());\n        assertThat(comparison.getOperand1(), is((DynamicOperand)nodePath(selectorName(\"modetest:queryable\"))));\n        assertThat(comparison.getOperand2(), is((StaticOperand)literal(\"/testroot/someQueryableNodeD/%\")));\n    }", "signature": "void shouldParseSelectStarFromEquijoinAndAdditionalCriteria()", "full_signature": "@Test public void shouldParseSelectStarFromEquijoinAndAdditionalCriteria()", "class_method_signature": "JcrSql2QueryParserTest.shouldParseSelectStarFromEquijoinAndAdditionalCriteria()", "testcase": true, "constructor": false, "invocations": ["parse", "assertThat", "isEmpty", "columns", "is", "isJoin", "source", "assertThat", "getLeft", "is", "namedSelector", "selectorName", "assertThat", "getRight", "is", "namedSelector", "selectorName", "assertThat", "type", "is", "isSameNodeJoinCondition", "getJoinCondition", "assertThat", "selector1Name", "is", "selectorName", "assertThat", "selector2Name", "is", "selectorName", "assertThat", "getSelector2Path", "is", "nullValue", "isComparison", "constraint", "assertThat", "getOperand1", "is", "nodePath", "selectorName", "assertThat", "getOperand2", "is", "literal"]}, "focal_class": {"identifier": "JcrSql2QueryParser", "superclass": "extends BasicSqlQueryParser", "interfaces": "", "fields": [{"original_string": "public static final String LANGUAGE = Query.JCR_SQL2;", "modifier": "public static final", "type": "String", "declarator": "LANGUAGE = Query.JCR_SQL2", "var_name": "LANGUAGE"}], "methods": [{"identifier": "getLanguage", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLanguage()", "full_signature": "@Override public String getLanguage()", "class_method_signature": "JcrSql2QueryParser.getLanguage()", "testcase": false, "constructor": false}, {"identifier": "literal", "parameters": "( TypeSystem typeSystem,\n                                    Object value )", "modifiers": "@Override protected", "return": "LiteralValue", "signature": "LiteralValue literal( TypeSystem typeSystem,\n                                    Object value )", "full_signature": "@Override protected LiteralValue literal( TypeSystem typeSystem,\n                                    Object value )", "class_method_signature": "JcrSql2QueryParser.literal( TypeSystem typeSystem,\n                                    Object value )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/parse/JcrSql2QueryParser.java"}, "focal_method": {"identifier": "literal", "parameters": "( TypeSystem typeSystem,\n                                    Object value )", "modifiers": "@Override protected", "return": "LiteralValue", "body": "@Override\n    protected LiteralValue literal( TypeSystem typeSystem,\n                                    Object value ) throws ValueFormatException {\n        JcrValueFactory factory = ((JcrTypeSystem)typeSystem).getValueFactory();\n        Value jcrValue = null;\n        if (value instanceof String) {\n            jcrValue = factory.createValue((String)value);\n        } else if (value instanceof Boolean) {\n            jcrValue = factory.createValue(((Boolean)value).booleanValue());\n        } else if (value instanceof Binary) {\n            jcrValue = factory.createValue((Binary)value);\n        } else if (value instanceof DateTime) {\n            jcrValue = factory.createValue(((DateTime)value).toCalendar());\n        } else if (value instanceof Calendar) {\n            jcrValue = factory.createValue((Calendar)value);\n        } else if (value instanceof BigDecimal) {\n            jcrValue = factory.createValue((BigDecimal)value);\n        } else if (value instanceof Double) {\n            jcrValue = factory.createValue((Double)value);\n        } else if (value instanceof Long) {\n            jcrValue = factory.createValue((Long)value);\n        } else if (value instanceof Reference) {\n            jcrValue = factory.createValue((Reference)value);\n        } else if (value instanceof URI) {\n            jcrValue = factory.createValue((URI)value);\n        } else if (value instanceof InputStream) {\n            Binary binary = factory.createBinary((InputStream)value);\n            jcrValue = factory.createValue(binary);\n        } else if (value instanceof Name || value instanceof Path) {\n            // Convert first to a string ...\n            String strValue = typeSystem.getStringFactory().create(value);\n            jcrValue = factory.createValue(strValue);\n        } else if (value instanceof Node) {\n            try {\n                jcrValue = factory.createValue((Node)value);\n            } catch (RepositoryException e) {\n                throw new ValueFormatException(value, PropertyType.REFERENCE,\n                                               GraphI18n.errorConvertingType.text(Node.class.getSimpleName(),\n                                                                                  Reference.class.getSimpleName(), value), e);\n            }\n        } else {\n            jcrValue = factory.createValue(value.toString());\n        }\n        return new LiteralValue(jcrValue, value);\n    }", "signature": "LiteralValue literal( TypeSystem typeSystem,\n                                    Object value )", "full_signature": "@Override protected LiteralValue literal( TypeSystem typeSystem,\n                                    Object value )", "class_method_signature": "JcrSql2QueryParser.literal( TypeSystem typeSystem,\n                                    Object value )", "testcase": false, "constructor": false, "invocations": ["getValueFactory", "createValue", "createValue", "booleanValue", "createValue", "createValue", "toCalendar", "createValue", "createValue", "createValue", "createValue", "createValue", "createValue", "createBinary", "createValue", "create", "getStringFactory", "createValue", "createValue", "text", "getSimpleName", "getSimpleName", "createValue", "toString"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}