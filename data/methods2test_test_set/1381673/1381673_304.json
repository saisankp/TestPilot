{"test_class": {"identifier": "InsertBeforeFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InsertBeforeFunction insertBeforeFunction;", "modifier": "private", "type": "InsertBeforeFunction", "declarator": "insertBeforeFunction", "var_name": "insertBeforeFunction"}], "file": "kie-dmn/kie-dmn-feel/src/test/java/org/kie/dmn/feel/runtime/functions/InsertBeforeFunctionTest.java"}, "test_case": {"identifier": "invokePositionNegative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invokePositionNegative() {\n        FunctionTestUtil.assertResult(insertBeforeFunction.invoke(Collections.singletonList(\"test\"), BigDecimal.valueOf(-1), null), Arrays.asList(null, \"test\"));\n        FunctionTestUtil.assertResult(\n                insertBeforeFunction.invoke(Arrays.asList(\"test\", null, BigDecimal.ZERO), BigDecimal.valueOf(-2), \"testtt\"),\n                Arrays.asList(\"test\", \"testtt\", null, BigDecimal.ZERO));\n        FunctionTestUtil.assertResult(\n                insertBeforeFunction.invoke(Arrays.asList(\"test\", null, BigDecimal.ZERO), BigDecimal.valueOf(-3), \"testtt\"),\n                Arrays.asList(\"testtt\", \"test\", null, BigDecimal.ZERO));\n    }", "signature": "void invokePositionNegative()", "full_signature": "@Test public void invokePositionNegative()", "class_method_signature": "InsertBeforeFunctionTest.invokePositionNegative()", "testcase": true, "constructor": false, "invocations": ["assertResult", "invoke", "singletonList", "valueOf", "asList", "assertResult", "invoke", "asList", "valueOf", "asList", "assertResult", "invoke", "asList", "valueOf", "asList"]}, "focal_class": {"identifier": "InsertBeforeFunction", "superclass": "extends BaseFEELFunction", "interfaces": "", "fields": [], "methods": [{"identifier": "InsertBeforeFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " InsertBeforeFunction()", "full_signature": "public  InsertBeforeFunction()", "class_method_signature": "InsertBeforeFunction.InsertBeforeFunction()", "testcase": false, "constructor": true}, {"identifier": "invoke", "parameters": "(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "modifiers": "public", "return": "FEELFnResult<List>", "signature": "FEELFnResult<List> invoke(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "full_signature": "public FEELFnResult<List> invoke(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "class_method_signature": "InsertBeforeFunction.invoke(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-feel/src/main/java/org/kie/dmn/feel/runtime/functions/InsertBeforeFunction.java"}, "focal_method": {"identifier": "invoke", "parameters": "(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "modifiers": "public", "return": "FEELFnResult<List>", "body": "public FEELFnResult<List> invoke(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem) {\n        if ( list == null ) { \n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"list\", \"cannot be null\"));\n        }\n        if ( position == null ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"position\", \"cannot be null\"));\n        }\n        if ( position.intValue() == 0 ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"position\", \"cannot be zero (parameter 'position' is 1-based)\"));\n        }\n        if ( position.abs().intValue() > list.size() ) {\n            return FEELFnResult.ofError(new InvalidParametersEvent(Severity.ERROR, \"position\", \"inconsistent with 'list' size\"));\n        }\n\n        // spec requires us to return a new list\n        final List<Object> result = new ArrayList<Object>( list );\n        if( position.intValue() > 0 ) {\n            result.add( position.intValue() - 1, newItem );\n        } else {\n            result.add( list.size() + position.intValue(), newItem );\n        }\n        return FEELFnResult.ofResult( result );\n    }", "signature": "FEELFnResult<List> invoke(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "full_signature": "public FEELFnResult<List> invoke(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "class_method_signature": "InsertBeforeFunction.invoke(@ParameterName( \"list\" ) List list, @ParameterName( \"position\" ) BigDecimal position, @ParameterName( \"newItem\" ) Object newItem)", "testcase": false, "constructor": false, "invocations": ["ofError", "ofError", "intValue", "ofError", "intValue", "abs", "size", "ofError", "intValue", "add", "intValue", "add", "size", "intValue", "ofResult"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}