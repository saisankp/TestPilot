{"test_class": {"identifier": "CmakeOutputParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "@Mock public Consumer<? super BuildEvent> messageConsumer;", "modifier": "@Mock public", "type": "Consumer<? super BuildEvent>", "declarator": "messageConsumer", "var_name": "messageConsumer"}, {"original_string": "private CmakeOutputParser parser;", "modifier": "private", "type": "CmakeOutputParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private File sourceFile;", "modifier": "private", "type": "File", "declarator": "sourceFile", "var_name": "sourceFile"}], "file": "android/testSrc/com/android/tools/idea/gradle/project/build/output/CmakeOutputParserTest.java"}, "test_case": {"identifier": "testSingleLineCmakeWarningInFileWithLineNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSingleLineCmakeWarningInFileWithLineNumber() {\n    String prefix = \"CMake Warning: Warning in cmake code at \";\n    String filePath = sourceFile.getAbsolutePath();\n    int lineNumber = 13;\n    String fileAndLineNumber =\n      String.format(Locale.getDefault(), \"%s:%d:\\n\", filePath, lineNumber);\n    String err = prefix + fileAndLineNumber;\n    BuildOutputInstantReader reader = new TestBuildOutputInstantReader(err);\n\n    ArgumentCaptor<BuildEvent> captor = ArgumentCaptor.forClass(BuildEvent.class);\n\n    assertThat(parser.parse(reader.readLine(), reader, messageConsumer)).isTrue();\n\n    verify(messageConsumer).accept(captor.capture());\n    assertThat(captor.getAllValues()).hasSize(1);\n\n    verifyFileMessageEvent(captor.getAllValues().get(0), filePath, \"CMake warnings\", MessageEvent.Kind.WARNING, lineNumber, 0);\n  }", "signature": "void testSingleLineCmakeWarningInFileWithLineNumber()", "full_signature": "@Test public void testSingleLineCmakeWarningInFileWithLineNumber()", "class_method_signature": "CmakeOutputParserTest.testSingleLineCmakeWarningInFileWithLineNumber()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "format", "getDefault", "forClass", "isTrue", "assertThat", "parse", "readLine", "accept", "verify", "capture", "hasSize", "assertThat", "getAllValues", "verifyFileMessageEvent", "get", "getAllValues"]}, "focal_class": {"identifier": "CmakeOutputParser", "superclass": "", "interfaces": "implements BuildOutputParser", "fields": [{"original_string": "@NonNull static final String CMAKE = \"CMake\";", "modifier": "@NonNull static final", "type": "String", "declarator": "CMAKE = \"CMake\"", "var_name": "CMAKE"}, {"original_string": "@NonNull private static final String ERROR = \"Error\";", "modifier": "@NonNull private static final", "type": "String", "declarator": "ERROR = \"Error\"", "var_name": "ERROR"}, {"original_string": "@NonNull private static final String CMAKE_ERROR = CMAKE + \" \" + ERROR;", "modifier": "@NonNull private static final", "type": "String", "declarator": "CMAKE_ERROR = CMAKE + \" \" + ERROR", "var_name": "CMAKE_ERROR"}, {"original_string": "private final Pattern cmakeErrorOrWarning = Pattern.compile(\"^\\\\s*CMake (Error|Warning).+\");", "modifier": "private final", "type": "Pattern", "declarator": "cmakeErrorOrWarning = Pattern.compile(\"^\\\\s*CMake (Error|Warning).+\")", "var_name": "cmakeErrorOrWarning"}, {"original_string": "static final Pattern fileAndLineNumber = Pattern.compile(\"^(([A-Za-z]:)?.*):([0-9]+)? *:([0-9]+)?(.+)?\");", "modifier": "static final", "type": "Pattern", "declarator": "fileAndLineNumber = Pattern.compile(\"^(([A-Za-z]:)?.*):([0-9]+)? *:([0-9]+)?(.+)?\")", "var_name": "fileAndLineNumber"}, {"original_string": "static final Pattern errorFileAndLineNumber =\n    Pattern.compile(\"CMake (Error|Warning).*at (([A-Za-z]:)?[^:]+):([0-9]+)?.*(\\\\([^:]*\\\\))?:([0-9]+)?(.+)?\");", "modifier": "static final", "type": "Pattern", "declarator": "errorFileAndLineNumber =\n    Pattern.compile(\"CMake (Error|Warning).*at (([A-Za-z]:)?[^:]+):([0-9]+)?.*(\\\\([^:]*\\\\))?:([0-9]+)?(.+)?\")", "var_name": "errorFileAndLineNumber"}, {"original_string": "private static final int SOURCE_POSITION_OFFSET = -1;", "modifier": "private static final", "type": "int", "declarator": "SOURCE_POSITION_OFFSET = -1", "var_name": "SOURCE_POSITION_OFFSET"}], "methods": [{"identifier": "parse", "parameters": "(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "full_signature": "@Override public boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "class_method_signature": "CmakeOutputParser.parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "testcase": false, "constructor": false}, {"identifier": "matchesFileAndLineNumberError", "parameters": "(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchesFileAndLineNumberError(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "full_signature": "private static boolean matchesFileAndLineNumberError(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "class_method_signature": "CmakeOutputParser.matchesFileAndLineNumberError(@NonNull List<String> messages,\n                                                       @NonNull Object buildId,\n                                                       @NonNull Consumer<? super BuildEvent> messageConsumer)", "testcase": false, "constructor": false}, {"identifier": "matchFileAndLineNumberErrorParts", "parameters": "(\n    @NonNull Matcher matcher, @NonNull String line)", "modifiers": "@VisibleForTesting static", "return": "ErrorFields", "signature": "ErrorFields matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "full_signature": "@VisibleForTesting static ErrorFields matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "class_method_signature": "CmakeOutputParser.matchFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "testcase": false, "constructor": false}, {"identifier": "matchesErrorFileAndLineNumberError", "parameters": "(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "modifiers": "private static", "return": "boolean", "signature": "boolean matchesErrorFileAndLineNumberError(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "full_signature": "private static boolean matchesErrorFileAndLineNumberError(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "class_method_signature": "CmakeOutputParser.matchesErrorFileAndLineNumberError(@NonNull List<String> messages,\n                                                            @NonNull Object buildId,\n                                                            @NonNull Consumer<? super BuildEvent> messageConsumer)", "testcase": false, "constructor": false}, {"identifier": "matchErrorFileAndLineNumberErrorParts", "parameters": "(\n    @NonNull Matcher matcher, @NonNull String line)", "modifiers": "@VisibleForTesting static", "return": "ErrorFields", "signature": "ErrorFields matchErrorFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "full_signature": "@VisibleForTesting static ErrorFields matchErrorFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "class_method_signature": "CmakeOutputParser.matchErrorFileAndLineNumberErrorParts(\n    @NonNull Matcher matcher, @NonNull String line)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/gradle/project/build/output/CmakeOutputParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer) {\n    if (cmakeErrorOrWarning.matcher(line).matches()) {\n      List<String> messages = new ArrayList<>();\n      messages.add(line.trim());\n      String nextLine;\n      // stop when nextLine is blank or matches the CMake prefix\n      while ((nextLine = reader.readLine()) != null) {\n        if (nextLine.isEmpty() || cmakeErrorOrWarning.matcher(nextLine).matches()) {\n          reader.pushBack();\n          break;\n        }\n        else {\n          nextLine = nextLine.trim();\n          if (!nextLine.isEmpty()) {\n            messages.add(nextLine);\n          }\n        }\n      }\n\n      if (matchesErrorFileAndLineNumberError(messages, reader.getParentEventId(), messageConsumer) ||\n          matchesFileAndLineNumberError(messages, reader.getParentEventId(), messageConsumer)) {\n        return true;\n      }\n\n      if (messages.get(0).startsWith(CMAKE_ERROR)) {\n        messageConsumer.accept(\n          new MessageEventImpl(reader.getParentEventId(), MessageEvent.Kind.ERROR, CMAKE + MESSAGE_GROUP_ERROR_SUFFIX, String.join(\" \", messages),\n                               String.join(\"\\n\", messages)));\n      }\n      else {\n        messageConsumer.accept(\n          new MessageEventImpl(reader.getParentEventId(), MessageEvent.Kind.WARNING, CMAKE + MESSAGE_GROUP_WARNING_SUFFIX,\n                               String.join(\" \", messages),\n                               String.join(\"\\n\", messages)));\n      }\n      return true;\n    }\n\n    return false;\n  }", "signature": "boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "full_signature": "@Override public boolean parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "class_method_signature": "CmakeOutputParser.parse(String line, BuildOutputInstantReader reader, Consumer<? super BuildEvent> messageConsumer)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher", "add", "trim", "readLine", "isEmpty", "matches", "matcher", "pushBack", "trim", "isEmpty", "add", "matchesErrorFileAndLineNumberError", "getParentEventId", "matchesFileAndLineNumberError", "getParentEventId", "startsWith", "get", "accept", "getParentEventId", "join", "join", "accept", "getParentEventId", "join", "join"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}