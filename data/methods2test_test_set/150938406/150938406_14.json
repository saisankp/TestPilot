{"test_class": {"identifier": "TransformerBaseTest", "superclass": "extends PipelineStageTestBase", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/pipeline/TransformerBaseTest.java"}, "test_case": {"identifier": "testFitStreamTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFitStreamTable() {\n\t\tLong id = MLEnvironmentFactory.getNewMLEnvironmentId();\n\t\tMLEnvironment env = MLEnvironmentFactory.get(id);\n\t\tDataStream<Integer> input = env.getStreamExecutionEnvironment().fromElements(1, 2, 3);\n\t\tTable table = env.getStreamTableEnvironment().fromDataStream(input);\n\n\t\tFakeTransFormer transFormer = new FakeTransFormer();\n\t\ttransFormer.setMLEnvironmentId(id);\n\t\ttransFormer.transform(env.getStreamTableEnvironment(), table);\n\n\t\tAssert.assertFalse(transFormer.batchTransformed);\n\t\tAssert.assertTrue(transFormer.streamTransformed);\n\t}", "signature": "void testFitStreamTable()", "full_signature": "@Test public void testFitStreamTable()", "class_method_signature": "TransformerBaseTest.testFitStreamTable()", "testcase": true, "constructor": false, "invocations": ["getNewMLEnvironmentId", "get", "fromElements", "getStreamExecutionEnvironment", "fromDataStream", "getStreamTableEnvironment", "setMLEnvironmentId", "transform", "getStreamTableEnvironment", "assertFalse", "assertTrue"]}, "focal_class": {"identifier": "TransformerBase", "superclass": "extends PipelineStageBase<T>", "interfaces": "implements Transformer<T>, HasLazyPrintTransformInfo<T>", "fields": [], "methods": [{"identifier": "TransformerBase", "parameters": "()", "modifiers": "public", "return": "", "signature": " TransformerBase()", "full_signature": "public  TransformerBase()", "class_method_signature": "TransformerBase.TransformerBase()", "testcase": false, "constructor": true}, {"identifier": "TransformerBase", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " TransformerBase(Params params)", "full_signature": "public  TransformerBase(Params params)", "class_method_signature": "TransformerBase.TransformerBase(Params params)", "testcase": false, "constructor": true}, {"identifier": "transform", "parameters": "(TableEnvironment tEnv, Table input)", "modifiers": "@Override public", "return": "Table", "signature": "Table transform(TableEnvironment tEnv, Table input)", "full_signature": "@Override public Table transform(TableEnvironment tEnv, Table input)", "class_method_signature": "TransformerBase.transform(TableEnvironment tEnv, Table input)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(Table input)", "modifiers": "public", "return": "Table", "signature": "Table transform(Table input)", "full_signature": "public Table transform(Table input)", "class_method_signature": "TransformerBase.transform(Table input)", "testcase": false, "constructor": false}, {"identifier": "postProcessTransformResult", "parameters": "(BatchOperator output)", "modifiers": "protected", "return": "BatchOperator", "signature": "BatchOperator postProcessTransformResult(BatchOperator output)", "full_signature": "protected BatchOperator postProcessTransformResult(BatchOperator output)", "class_method_signature": "TransformerBase.postProcessTransformResult(BatchOperator output)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(BatchOperator input)", "modifiers": "public abstract", "return": "BatchOperator", "signature": "BatchOperator transform(BatchOperator input)", "full_signature": "public abstract BatchOperator transform(BatchOperator input)", "class_method_signature": "TransformerBase.transform(BatchOperator input)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(StreamOperator input)", "modifiers": "public abstract", "return": "StreamOperator", "signature": "StreamOperator transform(StreamOperator input)", "full_signature": "public abstract StreamOperator transform(StreamOperator input)", "class_method_signature": "TransformerBase.transform(StreamOperator input)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/pipeline/TransformerBase.java"}, "focal_method": {"identifier": "transform", "parameters": "(TableEnvironment tEnv, Table input)", "modifiers": "@Override public", "return": "Table", "body": "@Override\n\tpublic Table transform(TableEnvironment tEnv, Table input) {\n\t\tPreconditions.checkArgument(input != null, \"Input CAN NOT BE null!\");\n\t\tPreconditions.checkArgument(\n\t\t\ttableEnvOf(input) == tEnv,\n\t\t\t\"The input table is not in the specified table environment.\");\n\t\treturn transform(input);\n\t}", "signature": "Table transform(TableEnvironment tEnv, Table input)", "full_signature": "@Override public Table transform(TableEnvironment tEnv, Table input)", "class_method_signature": "TransformerBase.transform(TableEnvironment tEnv, Table input)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "checkArgument", "tableEnvOf", "transform"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}