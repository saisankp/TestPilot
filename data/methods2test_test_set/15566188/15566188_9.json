{"test_class": {"identifier": "RepositoryTodoCrudServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CREATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP;", "modifier": "private static final", "type": "String", "declarator": "CREATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP", "var_name": "CREATION_TIME_STRING"}, {"original_string": "private static final Timestamp CREATION_TIME = TestDateUtil.parseTimestamp(CREATION_TIME_STRING);", "modifier": "private static final", "type": "Timestamp", "declarator": "CREATION_TIME = TestDateUtil.parseTimestamp(CREATION_TIME_STRING)", "var_name": "CREATION_TIME"}, {"original_string": "private static final String DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final Long ID = 1L;", "modifier": "private static final", "type": "Long", "declarator": "ID = 1L", "var_name": "ID"}, {"original_string": "private static final String MODIFICATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP;", "modifier": "private static final", "type": "String", "declarator": "MODIFICATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP", "var_name": "MODIFICATION_TIME_STRING"}, {"original_string": "private static final Timestamp MODIFICATION_TIME = TestDateUtil.parseTimestamp(MODIFICATION_TIME_STRING);", "modifier": "private static final", "type": "Timestamp", "declarator": "MODIFICATION_TIME = TestDateUtil.parseTimestamp(MODIFICATION_TIME_STRING)", "var_name": "MODIFICATION_TIME"}, {"original_string": "private static final String TITLE = \"title\";", "modifier": "private static final", "type": "String", "declarator": "TITLE = \"title\"", "var_name": "TITLE"}, {"original_string": "@Mock\n    private TodoRepository repositoryMock;", "modifier": "@Mock\n    private", "type": "TodoRepository", "declarator": "repositoryMock", "var_name": "repositoryMock"}, {"original_string": "private RepositoryTodoCrudService service;", "modifier": "private", "type": "RepositoryTodoCrudService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n    private JTransfo transformer;", "modifier": "@Autowired\n    private", "type": "JTransfo", "declarator": "transformer", "var_name": "transformer"}], "file": "jooq-only/src/test/java/net/petrikainulainen/spring/jooq/todo/service/RepositoryTodoCrudServiceTest.java"}, "test_case": {"identifier": "add_NewTodoEntry_ShouldAddTodoEntryAndReturnAddedEntry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void add_NewTodoEntry_ShouldAddTodoEntryAndReturnAddedEntry() {\n        TodoDTO newTodoEntry = new TodoDTOBuilder()\n                .description(DESCRIPTION)\n                .title(TITLE)\n                .build();\n\n        Todo addedTodoEntry = Todo.getBuilder(TITLE)\n                .creationTime(CREATION_TIME)\n                .description(DESCRIPTION)\n                .id(ID)\n                .modificationTime(MODIFICATION_TIME)\n                .build();\n\n        when(repositoryMock.add(isA(Todo.class))).thenReturn(addedTodoEntry);\n\n        TodoDTO returnedTodoEntry = service.add(newTodoEntry);\n\n        ArgumentCaptor<Todo> repositoryMethodArgument = ArgumentCaptor.forClass(Todo.class);\n\n        verify(repositoryMock, times(1)).add(repositoryMethodArgument.capture());\n        verifyNoMoreInteractions(repositoryMock);\n\n        Todo repositoryMethodArgumentValue = repositoryMethodArgument.getValue();\n\n        assertThatTodo(repositoryMethodArgumentValue)\n                .creationTimeIsNotSet()\n                .hasDescription(DESCRIPTION)\n                .hasNoId()\n                .hasTitle(TITLE)\n                .modificationTimeIsNotSet();\n\n        assertThatTodoDTO(returnedTodoEntry)\n                .hasDescription(DESCRIPTION)\n                .hasId(ID)\n                .hasTitle(TITLE)\n                .wasCreatedAt(CREATION_TIME_STRING)\n                .wasModifiedAt(MODIFICATION_TIME_STRING);\n    }", "signature": "void add_NewTodoEntry_ShouldAddTodoEntryAndReturnAddedEntry()", "full_signature": "@Test public void add_NewTodoEntry_ShouldAddTodoEntryAndReturnAddedEntry()", "class_method_signature": "RepositoryTodoCrudServiceTest.add_NewTodoEntry_ShouldAddTodoEntryAndReturnAddedEntry()", "testcase": true, "constructor": false, "invocations": ["build", "title", "description", "build", "modificationTime", "id", "description", "creationTime", "getBuilder", "thenReturn", "when", "add", "isA", "add", "forClass", "add", "verify", "times", "capture", "verifyNoMoreInteractions", "getValue", "modificationTimeIsNotSet", "hasTitle", "hasNoId", "hasDescription", "creationTimeIsNotSet", "assertThatTodo", "wasModifiedAt", "wasCreatedAt", "hasTitle", "hasId", "hasDescription", "assertThatTodoDTO"]}, "focal_class": {"identifier": "RepositoryTodoCrudService", "superclass": "", "interfaces": "implements TodoCrudService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryTodoCrudService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RepositoryTodoCrudService.class)", "var_name": "LOGGER"}, {"original_string": "private final TodoRepository repository;", "modifier": "private final", "type": "TodoRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final JTransfo transformer;", "modifier": "private final", "type": "JTransfo", "declarator": "transformer", "var_name": "transformer"}], "methods": [{"identifier": "RepositoryTodoCrudService", "parameters": "(TodoRepository repository, JTransfo transformer)", "modifiers": "@Autowired public", "return": "", "signature": " RepositoryTodoCrudService(TodoRepository repository, JTransfo transformer)", "full_signature": "@Autowired public  RepositoryTodoCrudService(TodoRepository repository, JTransfo transformer)", "class_method_signature": "RepositoryTodoCrudService.RepositoryTodoCrudService(TodoRepository repository, JTransfo transformer)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(TodoDTO dto)", "modifiers": "@Transactional @Override public", "return": "TodoDTO", "signature": "TodoDTO add(TodoDTO dto)", "full_signature": "@Transactional @Override public TodoDTO add(TodoDTO dto)", "class_method_signature": "RepositoryTodoCrudService.add(TodoDTO dto)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Long id)", "modifiers": "@Transactional @Override public", "return": "TodoDTO", "signature": "TodoDTO delete(Long id)", "full_signature": "@Transactional @Override public TodoDTO delete(Long id)", "class_method_signature": "RepositoryTodoCrudService.delete(Long id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "List<TodoDTO>", "signature": "List<TodoDTO> findAll()", "full_signature": "@Transactional(readOnly = true) @Override public List<TodoDTO> findAll()", "class_method_signature": "RepositoryTodoCrudService.findAll()", "testcase": false, "constructor": false}, {"identifier": "findById", "parameters": "(Long id)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "TodoDTO", "signature": "TodoDTO findById(Long id)", "full_signature": "@Transactional(readOnly = true) @Override public TodoDTO findById(Long id)", "class_method_signature": "RepositoryTodoCrudService.findById(Long id)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(TodoDTO dto)", "modifiers": "@Transactional @Override public", "return": "TodoDTO", "signature": "TodoDTO update(TodoDTO dto)", "full_signature": "@Transactional @Override public TodoDTO update(TodoDTO dto)", "class_method_signature": "RepositoryTodoCrudService.update(TodoDTO dto)", "testcase": false, "constructor": false}, {"identifier": "createModel", "parameters": "(TodoDTO dto)", "modifiers": "private", "return": "Todo", "signature": "Todo createModel(TodoDTO dto)", "full_signature": "private Todo createModel(TodoDTO dto)", "class_method_signature": "RepositoryTodoCrudService.createModel(TodoDTO dto)", "testcase": false, "constructor": false}], "file": "jooq-only/src/main/java/net/petrikainulainen/spring/jooq/todo/service/RepositoryTodoCrudService.java"}, "focal_method": {"identifier": "add", "parameters": "(TodoDTO dto)", "modifiers": "@Transactional @Override public", "return": "TodoDTO", "body": "@Transactional\n    @Override\n    public TodoDTO add(TodoDTO dto) {\n        LOGGER.info(\"Adding todo entry with information: {}\", dto);\n\n        Todo added = createModel(dto);\n        Todo persisted = repository.add(added);\n\n        LOGGER.info(\"Added todo entry with information: {}\", persisted);\n\n        return transformer.convert(persisted, new TodoDTO());\n    }", "signature": "TodoDTO add(TodoDTO dto)", "full_signature": "@Transactional @Override public TodoDTO add(TodoDTO dto)", "class_method_signature": "RepositoryTodoCrudService.add(TodoDTO dto)", "testcase": false, "constructor": false, "invocations": ["info", "createModel", "add", "info", "convert"]}, "repository": {"repo_id": 15566188, "url": "https://github.com/pkainulainen/jooq-with-spring-examples", "language": "Java", "is_fork": false, "fork_count": 51, "stargazer_count": 70, "size": 370, "license": "licensed"}}