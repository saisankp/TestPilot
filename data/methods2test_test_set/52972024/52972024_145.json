{"test_class": {"identifier": "MessageBusHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IStrategyContainer container = new StrategyContainer();", "modifier": "private", "type": "IStrategyContainer", "declarator": "container = new StrategyContainer()", "var_name": "container"}, {"original_string": "private IQueue queue = mock(IQueue.class);", "modifier": "private", "type": "IQueue", "declarator": "queue = mock(IQueue.class)", "var_name": "queue"}, {"original_string": "private IReceiverChain chain = mock(IReceiverChain.class);", "modifier": "private", "type": "IReceiverChain", "declarator": "chain = mock(IReceiverChain.class)", "var_name": "chain"}, {"original_string": "private IResponseStrategy nullResponseStrategy;", "modifier": "private", "type": "IResponseStrategy", "declarator": "nullResponseStrategy", "var_name": "nullResponseStrategy"}, {"original_string": "private IResponseStrategy mbResponseStrategy;", "modifier": "private", "type": "IResponseStrategy", "declarator": "mbResponseStrategy", "var_name": "mbResponseStrategy"}], "file": "CoreFeatures/MessageBus/MessageBusHandler/src/test/java/info/smart_tools/smartactors/message_bus/message_bus_handler/MessageBusHandlerTest.java"}, "test_case": {"identifier": "checkMessageHandleWithSpecificChainAndReply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkMessageHandleWithSpecificChainAndReply()\n            throws Exception {\n        IResolveDependencyStrategy sequenceStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessingSequence\"),\n                sequenceStrategy\n        );\n        IResolveDependencyStrategy messageProcessorStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.message_processing_interfaces.message_processing.IMessageProcessor\"),\n                messageProcessorStrategy\n        );\n        IResolveDependencyStrategy iobjectStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"info.smart_tools.smartactors.iobject.iobject.IObject\"),\n                iobjectStrategy\n        );\n        IResolveDependencyStrategy chainIdStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), \"chain_id_from_map_name\"),\n                chainIdStrategy\n        );\n        IResolveDependencyStrategy chainStorageStrategy = mock(IResolveDependencyStrategy.class);\n        IOC.register(\n                IOC.resolve(IOC.getKeyForKeyStorage(), IChainStorage.class.getCanonicalName()),\n                chainStorageStrategy\n        );\n        IReceiverChain chain = mock(IReceiverChain.class);\n        IMessageProcessingSequence sequence = mock(IMessageProcessingSequence.class);\n        when(sequenceStrategy.resolve(1, chain)).thenReturn(sequence);\n        IMessageProcessor processor = mock(IMessageProcessor.class);\n        when(messageProcessorStrategy.resolve(this.queue, sequence)).thenReturn(processor);\n        IObject context = mock(IObject.class);\n        when(iobjectStrategy.resolve()).thenReturn(context);\n        IObject message = mock(IObject.class);\n        IAction finalAction = mock(IAction.class);\n        Object replyToChainName = mock(Object.class);\n        Object chainName = mock(Object.class);\n\n        Object replyToChainId = mock(Object.class);\n        Object chainId = mock(Object.class);\n        IChainStorage storage = mock(IChainStorage.class);\n        IReceiverChain replyToChain = mock(IReceiverChain.class);\n\n        when(chainIdStrategy.resolve(replyToChainName)).thenReturn(replyToChainId);\n        when(chainIdStrategy.resolve(chainName)).thenReturn(chainId);\n        when(chainStorageStrategy.resolve()).thenReturn(storage);\n        when(storage.resolve(replyToChainId)).thenReturn(replyToChain);\n        when(storage.resolve(chainId)).thenReturn(chain);\n\n        IMessageBusHandler handler = new MessageBusHandler(this.queue, 1, this.chain, finalAction);\n        handler.handleForReply(message, chainName, replyToChainName);\n        verify(sequenceStrategy, times(1)).resolve(1, chain);\n        verify(messageProcessorStrategy, times(1)).resolve(this.queue, sequence);\n        verify(iobjectStrategy, times(1)).resolve();\n        verify(processor, times(1)).process(message, context);\n        verify(context, times(1)).setValue(eq(new FieldName(\"finalActions\")), any(List.class));\n        verify(context, times(1)).setValue(new FieldName(\"messageBusReplyTo\"), replyToChainName);\n    }", "signature": "void checkMessageHandleWithSpecificChainAndReply()", "full_signature": "@Test public void checkMessageHandleWithSpecificChainAndReply()", "class_method_signature": "MessageBusHandlerTest.checkMessageHandleWithSpecificChainAndReply()", "testcase": true, "constructor": false, "invocations": ["mock", "register", "resolve", "getKeyForKeyStorage", "mock", "register", "resolve", "getKeyForKeyStorage", "mock", "register", "resolve", "getKeyForKeyStorage", "mock", "register", "resolve", "getKeyForKeyStorage", "mock", "register", "resolve", "getKeyForKeyStorage", "getCanonicalName", "mock", "mock", "thenReturn", "when", "resolve", "mock", "thenReturn", "when", "resolve", "mock", "thenReturn", "when", "resolve", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "resolve", "thenReturn", "when", "resolve", "thenReturn", "when", "resolve", "thenReturn", "when", "resolve", "thenReturn", "when", "resolve", "handleForReply", "resolve", "verify", "times", "resolve", "verify", "times", "resolve", "verify", "times", "process", "verify", "times", "setValue", "verify", "times", "eq", "any", "setValue", "verify", "times"]}, "focal_class": {"identifier": "MessageBusHandler", "superclass": "", "interfaces": "implements IMessageBusHandler", "fields": [{"original_string": "private final IFieldName replyToFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "replyToFieldName", "var_name": "replyToFieldName"}, {"original_string": "private final IFieldName finalActionsFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "finalActionsFieldName", "var_name": "finalActionsFieldName"}, {"original_string": "private final IFieldName responseStrategyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "responseStrategyFieldName", "var_name": "responseStrategyFieldName"}, {"original_string": "private final IQueue<ITask> taskQueue;", "modifier": "private final", "type": "IQueue<ITask>", "declarator": "taskQueue", "var_name": "taskQueue"}, {"original_string": "private final int stackDepth;", "modifier": "private final", "type": "int", "declarator": "stackDepth", "var_name": "stackDepth"}, {"original_string": "private final IReceiverChain chain;", "modifier": "private final", "type": "IReceiverChain", "declarator": "chain", "var_name": "chain"}, {"original_string": "private final IAction<IObject> replyAction;", "modifier": "private final", "type": "IAction<IObject>", "declarator": "replyAction", "var_name": "replyAction"}, {"original_string": "private final IResponseStrategy messageBusResponseStrategy;", "modifier": "private final", "type": "IResponseStrategy", "declarator": "messageBusResponseStrategy", "var_name": "messageBusResponseStrategy"}, {"original_string": "private final IResponseStrategy nullResponseStrategy;", "modifier": "private final", "type": "IResponseStrategy", "declarator": "nullResponseStrategy", "var_name": "nullResponseStrategy"}], "methods": [{"identifier": "MessageBusHandler", "parameters": "(final IQueue<ITask> taskQueue, final int stackDepth, final IReceiverChain receiverChain, final IAction<IObject> finalAction)", "modifiers": "public", "return": "", "signature": " MessageBusHandler(final IQueue<ITask> taskQueue, final int stackDepth, final IReceiverChain receiverChain, final IAction<IObject> finalAction)", "full_signature": "public  MessageBusHandler(final IQueue<ITask> taskQueue, final int stackDepth, final IReceiverChain receiverChain, final IAction<IObject> finalAction)", "class_method_signature": "MessageBusHandler.MessageBusHandler(final IQueue<ITask> taskQueue, final int stackDepth, final IReceiverChain receiverChain, final IAction<IObject> finalAction)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(final IObject message)", "modifiers": "@Override public", "return": "void", "signature": "void handle(final IObject message)", "full_signature": "@Override public void handle(final IObject message)", "class_method_signature": "MessageBusHandler.handle(final IObject message)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final IObject message, final Object chainName)", "modifiers": "@Override public", "return": "void", "signature": "void handle(final IObject message, final Object chainName)", "full_signature": "@Override public void handle(final IObject message, final Object chainName)", "class_method_signature": "MessageBusHandler.handle(final IObject message, final Object chainName)", "testcase": false, "constructor": false}, {"identifier": "handleForReply", "parameters": "(final IObject message, final Object replyToChainName)", "modifiers": "@Override public", "return": "void", "signature": "void handleForReply(final IObject message, final Object replyToChainName)", "full_signature": "@Override public void handleForReply(final IObject message, final Object replyToChainName)", "class_method_signature": "MessageBusHandler.handleForReply(final IObject message, final Object replyToChainName)", "testcase": false, "constructor": false}, {"identifier": "handleForReply", "parameters": "(final IObject message, final Object chainName, final Object replyToChainName)", "modifiers": "@Override public", "return": "void", "signature": "void handleForReply(final IObject message, final Object chainName, final Object replyToChainName)", "full_signature": "@Override public void handleForReply(final IObject message, final Object chainName, final Object replyToChainName)", "class_method_signature": "MessageBusHandler.handleForReply(final IObject message, final Object chainName, final Object replyToChainName)", "testcase": false, "constructor": false}, {"identifier": "handle0", "parameters": "(final IObject message, final IReceiverChain dstChain)", "modifiers": "private", "return": "void", "signature": "void handle0(final IObject message, final IReceiverChain dstChain)", "full_signature": "private void handle0(final IObject message, final IReceiverChain dstChain)", "class_method_signature": "MessageBusHandler.handle0(final IObject message, final IReceiverChain dstChain)", "testcase": false, "constructor": false}, {"identifier": "handleForReply0", "parameters": "(final IObject message, final IReceiverChain dstChain, final Object replyChainId)", "modifiers": "private", "return": "void", "signature": "void handleForReply0(final IObject message, final IReceiverChain dstChain, final Object replyChainId)", "full_signature": "private void handleForReply0(final IObject message, final IReceiverChain dstChain, final Object replyChainId)", "class_method_signature": "MessageBusHandler.handleForReply0(final IObject message, final IReceiverChain dstChain, final Object replyChainId)", "testcase": false, "constructor": false}, {"identifier": "resolveChain", "parameters": "(final Object chainName)", "modifiers": "private", "return": "IReceiverChain", "signature": "IReceiverChain resolveChain(final Object chainName)", "full_signature": "private IReceiverChain resolveChain(final Object chainName)", "class_method_signature": "MessageBusHandler.resolveChain(final Object chainName)", "testcase": false, "constructor": false}, {"identifier": "resolveMessageProcessor", "parameters": "(final IReceiverChain mpChain)", "modifiers": "private", "return": "IMessageProcessor", "signature": "IMessageProcessor resolveMessageProcessor(final IReceiverChain mpChain)", "full_signature": "private IMessageProcessor resolveMessageProcessor(final IReceiverChain mpChain)", "class_method_signature": "MessageBusHandler.resolveMessageProcessor(final IReceiverChain mpChain)", "testcase": false, "constructor": false}, {"identifier": "resolveDefaultContext", "parameters": "()", "modifiers": "private", "return": "IObject", "signature": "IObject resolveDefaultContext()", "full_signature": "private IObject resolveDefaultContext()", "class_method_signature": "MessageBusHandler.resolveDefaultContext()", "testcase": false, "constructor": false}, {"identifier": "resolveReplyContext", "parameters": "(final Object replyChainId)", "modifiers": "private", "return": "IObject", "signature": "IObject resolveReplyContext(final Object replyChainId)", "full_signature": "private IObject resolveReplyContext(final Object replyChainId)", "class_method_signature": "MessageBusHandler.resolveReplyContext(final Object replyChainId)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageBus/MessageBusHandler/src/main/java/info/smart_tools/smartactors/message_bus/message_bus_handler/MessageBusHandler.java"}, "focal_method": {"identifier": "handleForReply", "parameters": "(final IObject message, final Object replyToChainName)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handleForReply(final IObject message, final Object replyToChainName)\n            throws MessageBusHandlerException {\n        handleForReply0(message, this.chain, replyToChainName);\n    }", "signature": "void handleForReply(final IObject message, final Object replyToChainName)", "full_signature": "@Override public void handleForReply(final IObject message, final Object replyToChainName)", "class_method_signature": "MessageBusHandler.handleForReply(final IObject message, final Object replyToChainName)", "testcase": false, "constructor": false, "invocations": ["handleForReply0"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}