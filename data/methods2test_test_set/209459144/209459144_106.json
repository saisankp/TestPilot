{"test_class": {"identifier": "GitUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GitUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GitUtilsTest.class)", "var_name": "LOG"}, {"original_string": "private static final String OWNER = \"submarine-thirdparty\";", "modifier": "private static final", "type": "String", "declarator": "OWNER = \"submarine-thirdparty\"", "var_name": "OWNER"}, {"original_string": "private static final String REPO = \"submarine_git_test\";", "modifier": "private static final", "type": "String", "declarator": "REPO = \"submarine_git_test\"", "var_name": "REPO"}, {"original_string": "GitUtils gitUtils = new GitUtils();", "modifier": "", "type": "GitUtils", "declarator": "gitUtils = new GitUtils()", "var_name": "gitUtils"}, {"original_string": "private static final String REMOTE_PATH = \"https://github.com/\" + OWNER + \"/\" + REPO + \".git\";", "modifier": "private static final", "type": "String", "declarator": "REMOTE_PATH = \"https://github.com/\" + OWNER + \"/\" + REPO + \".git\"", "var_name": "REMOTE_PATH"}, {"original_string": "private static final long TIME = new Date().getTime();", "modifier": "private static final", "type": "long", "declarator": "TIME = new Date().getTime()", "var_name": "TIME"}, {"original_string": "private static final String BRANCHNAME = \"Branch-\" + TIME;", "modifier": "private static final", "type": "String", "declarator": "BRANCHNAME = \"Branch-\" + TIME", "var_name": "BRANCHNAME"}, {"original_string": "private static final String LOCALPATH =\n      GitUtilsTest.class.getResource(\"\").toString().substring(6) + REPO + TIME;", "modifier": "private static final", "type": "String", "declarator": "LOCALPATH =\n      GitUtilsTest.class.getResource(\"\").toString().substring(6) + REPO + TIME", "var_name": "LOCALPATH"}, {"original_string": "private static final String token = System.getenv(\"gitToken\");", "modifier": "private static final", "type": "String", "declarator": "token = System.getenv(\"gitToken\")", "var_name": "token"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/utils/GitUtilsTest.java"}, "test_case": {"identifier": "pull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void pull() {\n    if (token == null) {\n      LOG.warn(\"Token not set!\");\n      return;\n    } else {\n      gitUtils.add(LOCALPATH, \"/log4j.properties\");\n      gitUtils.commit(LOCALPATH, \"add new file.\");\n      Iterable<PushResult> iterable = gitUtils.push(LOCALPATH, token, REMOTE_PATH);\n      assertEquals(1, Lists.newArrayList(iterable).size());\n\n      PullResult pullResult = gitUtils.pull(LOCALPATH, token, \"master\");\n      assertEquals(1, pullResult.getFetchResult().getTrackingRefUpdates().size());\n\n      gitUtils.rm(LOCALPATH, \"/log4j.properties\");\n      gitUtils.commit(LOCALPATH, \"add new file.\");\n      gitUtils.push(LOCALPATH, token, REMOTE_PATH);\n    }\n  }", "signature": "void pull()", "full_signature": "@Test public void pull()", "class_method_signature": "GitUtilsTest.pull()", "testcase": true, "constructor": false, "invocations": ["warn", "add", "commit", "push", "assertEquals", "size", "newArrayList", "pull", "assertEquals", "size", "getTrackingRefUpdates", "getFetchResult", "rm", "commit", "push"]}, "focal_class": {"identifier": "GitUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(GitUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(GitUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "clone", "parameters": "(String remotePath, String localPath, String token, String branch)", "modifiers": "public", "return": "void", "signature": "void clone(String remotePath, String localPath, String token, String branch)", "full_signature": "public void clone(String remotePath, String localPath, String token, String branch)", "class_method_signature": "GitUtils.clone(String remotePath, String localPath, String token, String branch)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String localPath, String fileName)", "modifiers": "public", "return": "DirCache", "signature": "DirCache add(String localPath, String fileName)", "full_signature": "public DirCache add(String localPath, String fileName)", "class_method_signature": "GitUtils.add(String localPath, String fileName)", "testcase": false, "constructor": false}, {"identifier": "rm", "parameters": "(String localPath, String fileName)", "modifiers": "public", "return": "DirCache", "signature": "DirCache rm(String localPath, String fileName)", "full_signature": "public DirCache rm(String localPath, String fileName)", "class_method_signature": "GitUtils.rm(String localPath, String fileName)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(String localPath, String fileName)", "modifiers": "public", "return": "void", "signature": "void reset(String localPath, String fileName)", "full_signature": "public void reset(String localPath, String fileName)", "class_method_signature": "GitUtils.reset(String localPath, String fileName)", "testcase": false, "constructor": false}, {"identifier": "pull", "parameters": "(String localPath, String token, String branch)", "modifiers": "public", "return": "PullResult", "signature": "PullResult pull(String localPath, String token, String branch)", "full_signature": "public PullResult pull(String localPath, String token, String branch)", "class_method_signature": "GitUtils.pull(String localPath, String token, String branch)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(String localPath, String message)", "modifiers": "public", "return": "RevCommit", "signature": "RevCommit commit(String localPath, String message)", "full_signature": "public RevCommit commit(String localPath, String message)", "class_method_signature": "GitUtils.commit(String localPath, String message)", "testcase": false, "constructor": false}, {"identifier": "push", "parameters": "(String localPath, String token, String remote)", "modifiers": "public", "return": "Iterable<PushResult>", "signature": "Iterable<PushResult> push(String localPath, String token, String remote)", "full_signature": "public Iterable<PushResult> push(String localPath, String token, String remote)", "class_method_signature": "GitUtils.push(String localPath, String token, String remote)", "testcase": false, "constructor": false}, {"identifier": "branchCreate", "parameters": "(String localPath, String branchName)", "modifiers": "public", "return": "Ref", "signature": "Ref branchCreate(String localPath, String branchName)", "full_signature": "public Ref branchCreate(String localPath, String branchName)", "class_method_signature": "GitUtils.branchCreate(String localPath, String branchName)", "testcase": false, "constructor": false}, {"identifier": "branchDelete", "parameters": "(String localPath, String branchName)", "modifiers": "public", "return": "List<String>", "signature": "List<String> branchDelete(String localPath, String branchName)", "full_signature": "public List<String> branchDelete(String localPath, String branchName)", "class_method_signature": "GitUtils.branchDelete(String localPath, String branchName)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(String localPath, String branchName)", "modifiers": "public", "return": "Ref", "signature": "Ref checkout(String localPath, String branchName)", "full_signature": "public Ref checkout(String localPath, String branchName)", "class_method_signature": "GitUtils.checkout(String localPath, String branchName)", "testcase": false, "constructor": false}, {"identifier": "rebase", "parameters": "(String localPath, String branchName, String upstreamName)", "modifiers": "public", "return": "void", "signature": "void rebase(String localPath, String branchName, String upstreamName)", "full_signature": "public void rebase(String localPath, String branchName, String upstreamName)", "class_method_signature": "GitUtils.rebase(String localPath, String branchName, String upstreamName)", "testcase": false, "constructor": false}, {"identifier": "remoteAdd", "parameters": "(String localPath, String uri, String remoteName)", "modifiers": "public", "return": "void", "signature": "void remoteAdd(String localPath, String uri, String remoteName)", "full_signature": "public void remoteAdd(String localPath, String uri, String remoteName)", "class_method_signature": "GitUtils.remoteAdd(String localPath, String uri, String remoteName)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/utils/GitUtils.java"}, "focal_method": {"identifier": "pull", "parameters": "(String localPath, String token, String branch)", "modifiers": "public", "return": "PullResult", "body": "public PullResult pull(String localPath, String token, String branch) {\n    CredentialsProvider credentialsProvider =\n        new UsernamePasswordCredentialsProvider(\"PRIVATE-TOKEN\", token);\n    PullResult pullResult = null;\n    // Git repository address\n    try (Git git = Git.open(new File(localPath))) {\n      pullResult = git.pull().setRemoteBranchName(branch).\n          setCredentialsProvider(credentialsProvider).call();\n    } catch (IOException e) {\n      LOG.error(e.getMessage(), e);\n    } catch (GitAPIException e) {\n      LOG.error(e.getMessage(), e);\n    }\n    return pullResult;\n  }", "signature": "PullResult pull(String localPath, String token, String branch)", "full_signature": "public PullResult pull(String localPath, String token, String branch)", "class_method_signature": "GitUtils.pull(String localPath, String token, String branch)", "testcase": false, "constructor": false, "invocations": ["open", "call", "setCredentialsProvider", "setRemoteBranchName", "pull", "error", "getMessage", "error", "getMessage"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}