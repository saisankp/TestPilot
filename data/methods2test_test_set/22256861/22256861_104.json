{"test_class": {"identifier": "SlstrPduStitcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File targetDirectory;", "modifier": "private", "type": "File", "declarator": "targetDirectory", "var_name": "targetDirectory"}], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/SlstrPduStitcherTest.java"}, "test_case": {"identifier": "testCreateParentDirectoryNameOfStitchedFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateParentDirectoryNameOfStitchedFile() throws URISyntaxException, PDUStitchingException {\n        SlstrPduStitcher.SlstrNameDecomposition[] decompositions = new SlstrPduStitcher.SlstrNameDecomposition[3];\n        decompositions[0] = SlstrPduStitcher.decomposeSlstrName(TestUtils.getFirstSlstrFile().getParentFile().getName());\n        decompositions[1] = SlstrPduStitcher.decomposeSlstrName(TestUtils.getSecondSlstrFile().getParentFile().getName());\n        decompositions[2] = SlstrPduStitcher.decomposeSlstrName(TestUtils.getThirdSlstrFile().getParentFile().getName());\n\n        Date time = Calendar.getInstance().getTime();\n        final String parentDirectoryNameOfStitchedFile =\n                SlstrPduStitcher.createParentDirectoryNameOfStitchedFile(decompositions, time);\n\n        final String now = new SimpleDateFormat(\"yyyyMMdd'T'HHmmss\").format(time);\n        assertEquals(\"S3A_SL_1_RBT____20130707T153252_20130707T154752_\" + now + \"_0299_158_182______SVL_O_NR_001.SEN3\",\n                              parentDirectoryNameOfStitchedFile);\n    }", "signature": "void testCreateParentDirectoryNameOfStitchedFile()", "full_signature": "@Test public void testCreateParentDirectoryNameOfStitchedFile()", "class_method_signature": "SlstrPduStitcherTest.testCreateParentDirectoryNameOfStitchedFile()", "testcase": true, "constructor": false, "invocations": ["decomposeSlstrName", "getName", "getParentFile", "getFirstSlstrFile", "decomposeSlstrName", "getName", "getParentFile", "getSecondSlstrFile", "decomposeSlstrName", "getName", "getParentFile", "getThirdSlstrFile", "getTime", "getInstance", "createParentDirectoryNameOfStitchedFile", "format", "assertEquals"]}, "focal_class": {"identifier": "SlstrPduStitcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateFormatConverter SLSTR_DATE_FORMAT_CONVERTER =\n            new DateFormatConverter(new SimpleDateFormat(\"yyyyMMdd'T'HHmmss\"));", "modifier": "private static final", "type": "DateFormatConverter", "declarator": "SLSTR_DATE_FORMAT_CONVERTER =\n            new DateFormatConverter(new SimpleDateFormat(\"yyyyMMdd'T'HHmmss\"))", "var_name": "SLSTR_DATE_FORMAT_CONVERTER"}, {"original_string": "private static final ImageSize NULL_IMAGE_SIZE = new ImageSize(\"null\", 0, 0, 0, 0);", "modifier": "private static final", "type": "ImageSize", "declarator": "NULL_IMAGE_SIZE = new ImageSize(\"null\", 0, 0, 0, 0)", "var_name": "NULL_IMAGE_SIZE"}], "methods": [{"identifier": "createStitchedSlstrL1BFile", "parameters": "(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "modifiers": "public static", "return": "File", "signature": "File createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "full_signature": "public static File createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "class_method_signature": "SlstrPduStitcher.createStitchedSlstrL1BFile(File targetDirectory, File[] slstrProductFiles, String productName,\n                                                  ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "createManifestFile", "parameters": "(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "modifiers": "private static", "return": "File", "signature": "File createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "full_signature": "private static File createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "class_method_signature": "SlstrPduStitcher.createManifestFile(File[] manifestFiles, File stitchedParentDirectory, Date now, long productSize)", "testcase": false, "constructor": false}, {"identifier": "collectFiles", "parameters": "(List<String> ncFileNames, Document manifestDocument)", "modifiers": "static", "return": "void", "signature": "void collectFiles(List<String> ncFileNames, Document manifestDocument)", "full_signature": "static void collectFiles(List<String> ncFileNames, Document manifestDocument)", "class_method_signature": "SlstrPduStitcher.collectFiles(List<String> ncFileNames, Document manifestDocument)", "testcase": false, "constructor": false}, {"identifier": "createXmlDocument", "parameters": "(InputStream inputStream)", "modifiers": "static", "return": "Document", "signature": "Document createXmlDocument(InputStream inputStream)", "full_signature": "static Document createXmlDocument(InputStream inputStream)", "class_method_signature": "SlstrPduStitcher.createXmlDocument(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "createParentDirectoryNameOfStitchedFile", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "modifiers": "static", "return": "String", "signature": "String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "full_signature": "static String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "class_method_signature": "SlstrPduStitcher.createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "testcase": false, "constructor": false}, {"identifier": "extractStartTime", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions)", "modifiers": "private static", "return": "Date", "signature": "Date extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "full_signature": "private static Date extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "class_method_signature": "SlstrPduStitcher.extractStartTime(SlstrNameDecomposition[] slstrNameDecompositions)", "testcase": false, "constructor": false}, {"identifier": "extractStopTime", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions)", "modifiers": "private static", "return": "Date", "signature": "Date extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "full_signature": "private static Date extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "class_method_signature": "SlstrPduStitcher.extractStopTime(SlstrNameDecomposition[] slstrNameDecompositions)", "testcase": false, "constructor": false}, {"identifier": "decomposeSlstrName", "parameters": "(String slstrName)", "modifiers": "static", "return": "SlstrNameDecomposition", "signature": "SlstrNameDecomposition decomposeSlstrName(String slstrName)", "full_signature": "static SlstrNameDecomposition decomposeSlstrName(String slstrName)", "class_method_signature": "SlstrPduStitcher.decomposeSlstrName(String slstrName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/SlstrPduStitcher.java"}, "focal_method": {"identifier": "createParentDirectoryNameOfStitchedFile", "parameters": "(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "modifiers": "static", "return": "String", "body": "static String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now) {\n        Date startTime = extractStartTime(slstrNameDecompositions);\n        Date stopTime = extractStopTime(slstrNameDecompositions);\n        final StringBuilder slstrNameStringBuilder = new StringBuilder(\"S3A_SL_1_RBT___\");\n        String[] slstrNameParts = new String[]{SLSTR_DATE_FORMAT_CONVERTER.format(startTime),\n                SLSTR_DATE_FORMAT_CONVERTER.format(stopTime), SLSTR_DATE_FORMAT_CONVERTER.format(now),\n                slstrNameDecompositions[0].duration, slstrNameDecompositions[0].cycleNumber, slstrNameDecompositions[0].relativeOrbitNumber,\n                slstrNameDecompositions[0].frameAlongTrackCoordinate, slstrNameDecompositions[0].fileGeneratingCentre, slstrNameDecompositions[0].platform,\n                slstrNameDecompositions[0].timelinessOfProcessingWorkflow, slstrNameDecompositions[0].baselineCollectionOrDataUsage};\n        for (String namePart : slstrNameParts) {\n            slstrNameStringBuilder.append(\"_\").append(namePart);\n        }\n        slstrNameStringBuilder.append(\".SEN3\");\n        return slstrNameStringBuilder.toString();\n    }", "signature": "String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "full_signature": "static String createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "class_method_signature": "SlstrPduStitcher.createParentDirectoryNameOfStitchedFile(SlstrNameDecomposition[] slstrNameDecompositions, Date now)", "testcase": false, "constructor": false, "invocations": ["extractStartTime", "extractStopTime", "format", "format", "format", "append", "append", "append", "toString"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}