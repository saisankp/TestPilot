{"test_class": {"identifier": "AuthorizedRequestFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BEARER_TOKEN = \"Bearer token\";", "modifier": "private static final", "type": "String", "declarator": "BEARER_TOKEN = \"Bearer token\"", "var_name": "BEARER_TOKEN"}, {"original_string": "private final RequestFactory delegate = mock(RequestFactory.class);", "modifier": "private final", "type": "RequestFactory", "declarator": "delegate = mock(RequestFactory.class)", "var_name": "delegate"}, {"original_string": "private final AuthorizedRequestFactory unit = new AuthorizedRequestFactory(delegate, () -> BEARER_TOKEN);", "modifier": "private final", "type": "AuthorizedRequestFactory", "declarator": "unit = new AuthorizedRequestFactory(delegate, () -> BEARER_TOKEN)", "var_name": "unit"}], "file": "fahrschein/src/test/java/org/zalando/fahrschein/AuthorizedRequestFactoryTest.java"}, "test_case": {"identifier": "shouldDelegate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDelegate() throws IOException {\n        final URI uri = URI.create(\"localhost\");\n        final String method = \"GET\";\n\n        unit.createRequest(uri, method);\n        verify(delegate).createRequest(uri, method);\n    }", "signature": "void shouldDelegate()", "full_signature": "@Test public void shouldDelegate()", "class_method_signature": "AuthorizedRequestFactoryTest.shouldDelegate()", "testcase": true, "constructor": false, "invocations": ["create", "createRequest", "createRequest", "verify"]}, "focal_class": {"identifier": "AuthorizedRequestFactory", "superclass": "", "interfaces": "implements RequestFactory", "fields": [{"original_string": "private final RequestFactory delegate;", "modifier": "private final", "type": "RequestFactory", "declarator": "delegate", "var_name": "delegate"}, {"original_string": "private final AuthorizationProvider authorizationProvider;", "modifier": "private final", "type": "AuthorizationProvider", "declarator": "authorizationProvider", "var_name": "authorizationProvider"}], "methods": [{"identifier": "AuthorizedRequestFactory", "parameters": "(final RequestFactory delegate, final AuthorizationProvider authorizationProvider)", "modifiers": "", "return": "", "signature": " AuthorizedRequestFactory(final RequestFactory delegate, final AuthorizationProvider authorizationProvider)", "full_signature": "  AuthorizedRequestFactory(final RequestFactory delegate, final AuthorizationProvider authorizationProvider)", "class_method_signature": "AuthorizedRequestFactory.AuthorizedRequestFactory(final RequestFactory delegate, final AuthorizationProvider authorizationProvider)", "testcase": false, "constructor": true}, {"identifier": "createRequest", "parameters": "(URI uri, String method)", "modifiers": "@Override public", "return": "Request", "signature": "Request createRequest(URI uri, String method)", "full_signature": "@Override public Request createRequest(URI uri, String method)", "class_method_signature": "AuthorizedRequestFactory.createRequest(URI uri, String method)", "testcase": false, "constructor": false}], "file": "fahrschein/src/main/java/org/zalando/fahrschein/AuthorizedRequestFactory.java"}, "focal_method": {"identifier": "createRequest", "parameters": "(URI uri, String method)", "modifiers": "@Override public", "return": "Request", "body": "@Override\n    public Request createRequest(URI uri, String method) throws IOException {\n        final Request request = delegate.createRequest(uri, method);\n        request.getHeaders().put(Headers.AUTHORIZATION, authorizationProvider.getAuthorizationHeader());\n        return request;\n    }", "signature": "Request createRequest(URI uri, String method)", "full_signature": "@Override public Request createRequest(URI uri, String method)", "class_method_signature": "AuthorizedRequestFactory.createRequest(URI uri, String method)", "testcase": false, "constructor": false, "invocations": ["createRequest", "put", "getHeaders", "getAuthorizationHeader"]}, "repository": {"repo_id": 60344998, "url": "https://github.com/zalando-nakadi/fahrschein", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 17, "size": 776, "license": "licensed"}}