{"test_class": {"identifier": "RandomGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static int NO_TESTS_PER_CASE = 100;", "modifier": "public static", "type": "int", "declarator": "NO_TESTS_PER_CASE = 100", "var_name": "NO_TESTS_PER_CASE"}], "file": "java/babudb-core/src/test/java/org/xtreemfs/babudb/sandbox/RandomGeneratorTest.java"}, "test_case": {"identifier": "testInitialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialize() {\n        for (int i = 0; i < NO_TESTS_PER_CASE; i++) {\n            long testSeed = RandomGenerator.getRandomSeed();\n            assertEquals(new RandomGenerator().initialize(testSeed).toString(),\n                    new RandomGenerator().initialize(testSeed).toString());\n        }\n    }", "signature": "void testInitialize()", "full_signature": "@Test public void testInitialize()", "class_method_signature": "RandomGeneratorTest.testInitialize()", "testcase": true, "constructor": false, "invocations": ["getRandomSeed", "assertEquals", "toString", "initialize", "toString", "initialize"]}, "focal_class": {"identifier": "RandomGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int MAX_INSERTS_PER_GROUP = 10;", "modifier": "public final static", "type": "int", "declarator": "MAX_INSERTS_PER_GROUP = 10", "var_name": "MAX_INSERTS_PER_GROUP"}, {"original_string": "public final static int MIN_INSERTS_PER_GROUP = 5;", "modifier": "public final static", "type": "int", "declarator": "MIN_INSERTS_PER_GROUP = 5", "var_name": "MIN_INSERTS_PER_GROUP"}, {"original_string": "public final static int MAX_DELETES_PER_GROUP = 5;", "modifier": "public final static", "type": "int", "declarator": "MAX_DELETES_PER_GROUP = 5", "var_name": "MAX_DELETES_PER_GROUP"}, {"original_string": "public final static int MIN_DELETES_PER_GROUP = 3;", "modifier": "public final static", "type": "int", "declarator": "MIN_DELETES_PER_GROUP = 3", "var_name": "MIN_DELETES_PER_GROUP"}, {"original_string": "public final static int MAX_META_OPERATIONS_PER_VIEWID = 3;", "modifier": "public final static", "type": "int", "declarator": "MAX_META_OPERATIONS_PER_VIEWID = 3", "var_name": "MAX_META_OPERATIONS_PER_VIEWID"}, {"original_string": "public final static int MIN_META_OPERATIONS_PER_VIEWID = 1;", "modifier": "public final static", "type": "int", "declarator": "MIN_META_OPERATIONS_PER_VIEWID = 1", "var_name": "MIN_META_OPERATIONS_PER_VIEWID"}, {"original_string": "public final static int MAX_INDICES = 10;", "modifier": "public final static", "type": "int", "declarator": "MAX_INDICES = 10", "var_name": "MAX_INDICES"}, {"original_string": "public final static int MIN_INDICES = 2;", "modifier": "public final static", "type": "int", "declarator": "MIN_INDICES = 2", "var_name": "MIN_INDICES"}, {"original_string": "public final static int MAX_KEY_LENGTH = 10;", "modifier": "public final static", "type": "int", "declarator": "MAX_KEY_LENGTH = 10", "var_name": "MAX_KEY_LENGTH"}, {"original_string": "public final static int MIN_KEY_LENGTH = 3;", "modifier": "public final static", "type": "int", "declarator": "MIN_KEY_LENGTH = 3", "var_name": "MIN_KEY_LENGTH"}, {"original_string": "public final static int MAX_VALUE_LENGTH = 30;", "modifier": "public final static", "type": "int", "declarator": "MAX_VALUE_LENGTH = 30", "var_name": "MAX_VALUE_LENGTH"}, {"original_string": "public final static int MIN_VALUE_LENGTH = 10;", "modifier": "public final static", "type": "int", "declarator": "MIN_VALUE_LENGTH = 10", "var_name": "MIN_VALUE_LENGTH"}, {"original_string": "public final static int MAX_VIEWID = 29;", "modifier": "public final static", "type": "int", "declarator": "MAX_VIEWID = 29", "var_name": "MAX_VIEWID"}, {"original_string": "public final static long MAX_SEQUENCENO;", "modifier": "public final static", "type": "long", "declarator": "MAX_SEQUENCENO", "var_name": "MAX_SEQUENCENO"}, {"original_string": "public final static long MIN_SEQUENCENO = ReplicationLongrunTestConfig.MIN_SEQUENCENO;", "modifier": "public final static", "type": "long", "declarator": "MIN_SEQUENCENO = ReplicationLongrunTestConfig.MIN_SEQUENCENO", "var_name": "MIN_SEQUENCENO"}, {"original_string": "public final Map<Integer,List<List<Object>>> operationsScenario = new HashMap<Integer,List<List<Object>>>();", "modifier": "public final", "type": "Map<Integer,List<List<Object>>>", "declarator": "operationsScenario = new HashMap<Integer,List<List<Object>>>()", "var_name": "operationsScenario"}, {"original_string": "private final static byte[] CHARS;", "modifier": "private final static", "type": "byte[]", "declarator": "CHARS", "var_name": "CHARS"}, {"original_string": "private final static long[] prims = new long[MAX_VIEWID];", "modifier": "private final static", "type": "long[]", "declarator": "prims = new long[MAX_VIEWID]", "var_name": "prims"}, {"original_string": "private final static String[] dbPrefixes;", "modifier": "private final static", "type": "String[]", "declarator": "dbPrefixes", "var_name": "dbPrefixes"}, {"original_string": "private final Map<Integer, List<Object[]>> dbExist = new HashMap<Integer, List<Object[]>>();", "modifier": "private final", "type": "Map<Integer, List<Object[]>>", "declarator": "dbExist = new HashMap<Integer, List<Object[]>>()", "var_name": "dbExist"}, {"original_string": "private InsertGroup lastISG = null;", "modifier": "private", "type": "InsertGroup", "declarator": "lastISG = null", "var_name": "lastISG"}], "methods": [{"identifier": "initialize", "parameters": "(Long seed)", "modifiers": "public", "return": "Map<Integer,List<List<Object>>>", "signature": "Map<Integer,List<List<Object>>> initialize(Long seed)", "full_signature": "public Map<Integer,List<List<Object>>> initialize(Long seed)", "class_method_signature": "RandomGenerator.initialize(Long seed)", "testcase": false, "constructor": false}, {"identifier": "deleteOperation", "parameters": "(Random random, int viewId)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> deleteOperation(Random random, int viewId)", "full_signature": "private List<Object> deleteOperation(Random random, int viewId)", "class_method_signature": "RandomGenerator.deleteOperation(Random random, int viewId)", "testcase": false, "constructor": false}, {"identifier": "copyOperation", "parameters": "(Random random, int dbNo, int viewId)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> copyOperation(Random random, int dbNo, int viewId)", "full_signature": "private List<Object> copyOperation(Random random, int dbNo, int viewId)", "class_method_signature": "RandomGenerator.copyOperation(Random random, int dbNo, int viewId)", "testcase": false, "constructor": false}, {"identifier": "createOperation", "parameters": "(Random random, int dbNo, int viewId)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> createOperation(Random random, int dbNo, int viewId)", "full_signature": "private List<Object> createOperation(Random random, int dbNo, int viewId)", "class_method_signature": "RandomGenerator.createOperation(Random random, int dbNo, int viewId)", "testcase": false, "constructor": false}, {"identifier": "createRandomBytes", "parameters": "(Random random,int length)", "modifiers": "private", "return": "byte[]", "signature": "byte[] createRandomBytes(Random random,int length)", "full_signature": "private byte[] createRandomBytes(Random random,int length)", "class_method_signature": "RandomGenerator.createRandomBytes(Random random,int length)", "testcase": false, "constructor": false}, {"identifier": "getInsertGroup", "parameters": "(LSN lsn)", "modifiers": "public", "return": "InsertGroup", "signature": "InsertGroup getInsertGroup(LSN lsn)", "full_signature": "public InsertGroup getInsertGroup(LSN lsn)", "class_method_signature": "RandomGenerator.getInsertGroup(LSN lsn)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "RandomGenerator.reset()", "testcase": false, "constructor": false}, {"identifier": "getLookupGroup", "parameters": "(LSN lsn)", "modifiers": "public", "return": "LookupGroup", "signature": "LookupGroup getLookupGroup(LSN lsn)", "full_signature": "public LookupGroup getLookupGroup(LSN lsn)", "class_method_signature": "RandomGenerator.getLookupGroup(LSN lsn)", "testcase": false, "constructor": false}, {"identifier": "getRandomSeed", "parameters": "()", "modifiers": "public static", "return": "long", "signature": "long getRandomSeed()", "full_signature": "public static long getRandomSeed()", "class_method_signature": "RandomGenerator.getRandomSeed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RandomGenerator.toString()", "testcase": false, "constructor": false}], "file": "java/babudb-core/src/main/java/org/xtreemfs/babudb/sandbox/RandomGenerator.java"}, "focal_method": {"identifier": "initialize", "parameters": "(Long seed)", "modifiers": "public", "return": "Map<Integer,List<List<Object>>>", "body": "public Map<Integer,List<List<Object>>> initialize(Long seed) {\n    \tint dbNo = 0;\n    \t\n    \tRandom random = new Random(seed);\n    \t\n    \tfor (int i=1;i<=prims.length;i++){\n    \t\tList<Object[]> availableDBs = dbExist.get(i-1);\n\t\t\tif (availableDBs!=null)\n    \t\t\tdbExist.put(i, new LinkedList<Object[]>(availableDBs));\n    \t\telse availableDBs = new LinkedList<Object[]>();\n    \t\t\n    \t\tint metaOperations = random.nextInt(MAX_META_OPERATIONS_PER_VIEWID-MIN_META_OPERATIONS_PER_VIEWID)+MIN_META_OPERATIONS_PER_VIEWID;\n    \t\tList<List<Object>> opsAtView = new LinkedList<List<Object>>();\n    \t\t\n    \t\tfor (int y=0;y<metaOperations;y++){\n        \t\tavailableDBs = dbExist.get(i);\n    \t\t\tif (availableDBs==null) availableDBs = new LinkedList<Object[]>();\n    \t\t\tList<Object> operation;\n    \t\t\t\n    \t\t\t// no DBs available jet --> make a create operation\n    \t\t\tif (availableDBs.size()<=1) {\n    \t\t\t\toperation = createOperation(random, dbNo, i);\n    \t\t\t\tdbNo++;\n    \t\t\t} else {\n    \t\t\t\tOperation op = Operation.values()[random.nextInt(Operation.values().length)];\n    \t\t\t\t\n    \t\t\t\tswitch (op) {\n    \t\t\t\tcase create:\n    \t\t\t\t\toperation = createOperation(random, dbNo, i);\n        \t\t\t\tdbNo++;\n        \t\t\t\tbreak;\n    \t\t\t\tcase copy:\n    \t\t\t\t\toperation = copyOperation(random, dbNo, i);\n    \t\t\t\t\tdbNo++;\n    \t\t\t\t\tbreak;\n    \t\t\t\tcase delete:\n    \t\t\t\t\toperation = deleteOperation(random, i);\n    \t\t\t\t\tbreak;\n    \t\t\t\tdefault:\n    \t\t\t\t\tthrow new UnsupportedOperationException (\"for \"+op.toString());\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\topsAtView.add(operation);\n    \t\t}\n    \t\toperationsScenario.put(i, opsAtView);\n    \t}\n    \t\n        Logging.logMessage(Logging.LEVEL_DEBUG, Category.babudb, this, \"%s\", this.toString());\n    \t\n    \treturn operationsScenario;\n    }", "signature": "Map<Integer,List<List<Object>>> initialize(Long seed)", "full_signature": "public Map<Integer,List<List<Object>>> initialize(Long seed)", "class_method_signature": "RandomGenerator.initialize(Long seed)", "testcase": false, "constructor": false, "invocations": ["get", "put", "nextInt", "get", "size", "createOperation", "values", "nextInt", "values", "createOperation", "copyOperation", "deleteOperation", "toString", "add", "put", "logMessage", "toString"]}, "repository": {"repo_id": 20433978, "url": "https://github.com/xtreemfs/babudb", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 37, "size": 19631, "license": "licensed"}}