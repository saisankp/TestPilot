{"test_class": {"identifier": "ZooKeeperServerMainTest", "superclass": "extends ZKTestCase", "interfaces": "implements Watcher", "fields": [{"original_string": "protected static final Logger LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMainTest.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMainTest.class)", "var_name": "LOG"}, {"original_string": "private CountDownLatch clientConnected = new CountDownLatch(1);", "modifier": "private", "type": "CountDownLatch", "declarator": "clientConnected = new CountDownLatch(1)", "var_name": "clientConnected"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java"}, "test_case": {"identifier": "testWithMinSessionTimeoutGreaterThanMaxSessionTimeout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithMinSessionTimeoutGreaterThanMaxSessionTimeout()\n            throws Exception {\n        ClientBase.setupTestEnv();\n\n        final int CLIENT_PORT = PortAssignment.unique();\n        final int tickTime = 2000;\n        final int minSessionTimeout = 20 * tickTime + 1000; // min is higher\n        final int maxSessionTimeout = tickTime * 2 - 100; // max is lower\n        final String configs = \"maxSessionTimeout=\" + maxSessionTimeout + \"\\n\"\n                + \"minSessionTimeout=\" + minSessionTimeout + \"\\n\";\n        MainThread main = new MainThread(CLIENT_PORT, false, configs);\n        String args[] = new String[1];\n        args[0] = main.confFile.toString();\n        try {\n            main.main.initializeAndRun(args);\n            Assert.fail(\"Must throw exception as \"\n                    + \"minsessiontimeout > maxsessiontimeout\");\n        } catch (ConfigException iae) {\n            // expected\n        }\n    }", "signature": "void testWithMinSessionTimeoutGreaterThanMaxSessionTimeout()", "full_signature": "@Test public void testWithMinSessionTimeoutGreaterThanMaxSessionTimeout()", "class_method_signature": "ZooKeeperServerMainTest.testWithMinSessionTimeoutGreaterThanMaxSessionTimeout()", "testcase": true, "constructor": false, "invocations": ["setupTestEnv", "unique", "toString", "initializeAndRun", "fail"]}, "focal_class": {"identifier": "ZooKeeperServerMain", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMain.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n        LoggerFactory.getLogger(ZooKeeperServerMain.class)", "var_name": "LOG"}, {"original_string": "private static final String USAGE =\n        \"Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]\";", "modifier": "private static final", "type": "String", "declarator": "USAGE =\n        \"Usage: ZooKeeperServerMain configfile | port datadir [ticktime] [maxcnxns]\"", "var_name": "USAGE"}, {"original_string": "private ServerCnxnFactory cnxnFactory;", "modifier": "private", "type": "ServerCnxnFactory", "declarator": "cnxnFactory", "var_name": "cnxnFactory"}, {"original_string": "private ServerCnxnFactory secureCnxnFactory;", "modifier": "private", "type": "ServerCnxnFactory", "declarator": "secureCnxnFactory", "var_name": "secureCnxnFactory"}, {"original_string": "private ContainerManager containerManager;", "modifier": "private", "type": "ContainerManager", "declarator": "containerManager", "var_name": "containerManager"}, {"original_string": "private AdminServer adminServer;", "modifier": "private", "type": "AdminServer", "declarator": "adminServer", "var_name": "adminServer"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "ZooKeeperServerMain.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "initializeAndRun", "parameters": "(String[] args)", "modifiers": "protected", "return": "void", "signature": "void initializeAndRun(String[] args)", "full_signature": "protected void initializeAndRun(String[] args)", "class_method_signature": "ZooKeeperServerMain.initializeAndRun(String[] args)", "testcase": false, "constructor": false}, {"identifier": "runFromConfig", "parameters": "(ServerConfig config)", "modifiers": "public", "return": "void", "signature": "void runFromConfig(ServerConfig config)", "full_signature": "public void runFromConfig(ServerConfig config)", "class_method_signature": "ZooKeeperServerMain.runFromConfig(ServerConfig config)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void shutdown()", "full_signature": "protected void shutdown()", "class_method_signature": "ZooKeeperServerMain.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getCnxnFactory", "parameters": "()", "modifiers": "", "return": "ServerCnxnFactory", "signature": "ServerCnxnFactory getCnxnFactory()", "full_signature": " ServerCnxnFactory getCnxnFactory()", "class_method_signature": "ZooKeeperServerMain.getCnxnFactory()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java"}, "focal_method": {"identifier": "initializeAndRun", "parameters": "(String[] args)", "modifiers": "protected", "return": "void", "body": "protected void initializeAndRun(String[] args)\n        throws ConfigException, IOException, AdminServerException\n    {\n        try {\n            ManagedUtil.registerLog4jMBeans();\n        } catch (JMException e) {\n            LOG.warn(\"Unable to register log4j JMX control\", e);\n        }\n\n        ServerConfig config = new ServerConfig();\n        if (args.length == 1) {\n            config.parse(args[0]);\n        } else {\n            config.parse(args);\n        }\n\n        runFromConfig(config);\n    }", "signature": "void initializeAndRun(String[] args)", "full_signature": "protected void initializeAndRun(String[] args)", "class_method_signature": "ZooKeeperServerMain.initializeAndRun(String[] args)", "testcase": false, "constructor": false, "invocations": ["registerLog4jMBeans", "warn", "parse", "parse", "runFromConfig"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}