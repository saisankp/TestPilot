{"test_class": {"identifier": "RewardedAdsVerifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "private static final String GOOGLE_VERIFYING_PUBLIC_KEYS_JSON =\n      \"{\\n\"\n          + \"  \\\"keys\\\": [\\n\"\n          + \"    {\\n\"\n          + \"      \\\"base64\\\": \\\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEPYnHwS8uegWAewQtlxizmLFynw\"\n          + \"HcxRT1PK07cDA6/C4sXrVI1SzZCUx8U8S0LjMrT6ird/VW7be3Mz6t/srtRQ==\\\",\\n\"\n          + \"      \\\"keyId\\\": 1234\\n\"\n          + \"    },\\n\"\n          + \"  ],\\n\"\n          + \"}\";", "modifier": "private static final", "type": "String", "declarator": "GOOGLE_VERIFYING_PUBLIC_KEYS_JSON =\n      \"{\\n\"\n          + \"  \\\"keys\\\": [\\n\"\n          + \"    {\\n\"\n          + \"      \\\"base64\\\": \\\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEPYnHwS8uegWAewQtlxizmLFynw\"\n          + \"HcxRT1PK07cDA6/C4sXrVI1SzZCUx8U8S0LjMrT6ird/VW7be3Mz6t/srtRQ==\\\",\\n\"\n          + \"      \\\"keyId\\\": 1234\\n\"\n          + \"    },\\n\"\n          + \"  ],\\n\"\n          + \"}\"", "var_name": "GOOGLE_VERIFYING_PUBLIC_KEYS_JSON"}, {"original_string": "private static final String GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64 =\n      \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgZj/Dldxz8fvKVF5O\"\n          + \"TeAtK6tY3G1McmvhMppe6ayW6GahRANCAAQ9icfBLy56BYB7BC2XGLOYsXKfAdzF\"\n          + \"FPU8rTtwMDr8LixetUjVLNkJTHxTxLQuMytPqKt39Vbtt7czPq3+yu1F\";", "modifier": "private static final", "type": "String", "declarator": "GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64 =\n      \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgZj/Dldxz8fvKVF5O\"\n          + \"TeAtK6tY3G1McmvhMppe6ayW6GahRANCAAQ9icfBLy56BYB7BC2XGLOYsXKfAdzF\"\n          + \"FPU8rTtwMDr8LixetUjVLNkJTHxTxLQuMytPqKt39Vbtt7czPq3+yu1F\"", "var_name": "GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64"}, {"original_string": "private static final long KEY_ID = 1234;", "modifier": "private static final", "type": "long", "declarator": "KEY_ID = 1234", "var_name": "KEY_ID"}, {"original_string": "private static final String REWARD_HOST_AND_PATH = \"https://publisher.com/blah?\";", "modifier": "private static final", "type": "String", "declarator": "REWARD_HOST_AND_PATH = \"https://publisher.com/blah?\"", "var_name": "REWARD_HOST_AND_PATH"}, {"original_string": "private static final String REWARD_QUERY = \"foo1=bar1&foo2=bar2\";", "modifier": "private static final", "type": "String", "declarator": "REWARD_QUERY = \"foo1=bar1&foo2=bar2\"", "var_name": "REWARD_QUERY"}, {"original_string": "private static final String REWARD_URL = REWARD_HOST_AND_PATH + REWARD_QUERY;", "modifier": "private static final", "type": "String", "declarator": "REWARD_URL = REWARD_HOST_AND_PATH + REWARD_QUERY", "var_name": "REWARD_URL"}, {"original_string": "private static final String ALTERNATE_PUBLIC_SIGNING_KEY =\n      \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEU8E6JppGKFG40r5dDU1idHRN52NuwsemFzXZh1oUqh3bGUPgPioH+RoW\"\n          + \"nmVSUQz1WfM2426w9f0GADuXzpUkcw==\";", "modifier": "private static final", "type": "String", "declarator": "ALTERNATE_PUBLIC_SIGNING_KEY =\n      \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEU8E6JppGKFG40r5dDU1idHRN52NuwsemFzXZh1oUqh3bGUPgPioH+RoW\"\n          + \"nmVSUQz1WfM2426w9f0GADuXzpUkcw==\"", "var_name": "ALTERNATE_PUBLIC_SIGNING_KEY"}], "file": "apps/rewardedads/src/test/java/com/google/crypto/tink/apps/rewardedads/RewardedAdsVerifierTest.java"}, "test_case": {"identifier": "testShouldFailIfSignedMessageWasChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testShouldFailIfSignedMessageWasChanged() throws Exception {\n    RewardedAdsVerifier verifier =\n        new RewardedAdsVerifier.Builder()\n            .setVerifyingPublicKeys(GOOGLE_VERIFYING_PUBLIC_KEYS_JSON)\n            .build();\n    byte[] validSignedUrl =\n        signUrl(REWARD_URL, GOOGLE_SIGNING_PRIVATE_KEY_PKCS8_BASE64, KEY_ID).getBytes(UTF_8);\n    for (int i = REWARD_HOST_AND_PATH.length(); i < REWARD_URL.length(); i++) {\n      byte[] modifiedUrl = Arrays.copyOf(validSignedUrl, validSignedUrl.length);\n      modifiedUrl[i] = (byte) (modifiedUrl[i] ^ 0xff);\n      try {\n        verifier.verify(new String(modifiedUrl, UTF_8));\n        fail(\"Expected GeneralSecurityException\");\n      } catch (GeneralSecurityException e) {\n        assertEquals(\"Invalid signature\", e.getMessage());\n      }\n    }\n  }", "signature": "void testShouldFailIfSignedMessageWasChanged()", "full_signature": "@Test public void testShouldFailIfSignedMessageWasChanged()", "class_method_signature": "RewardedAdsVerifierTest.testShouldFailIfSignedMessageWasChanged()", "testcase": true, "constructor": false, "invocations": ["build", "setVerifyingPublicKeys", "getBytes", "signUrl", "length", "length", "copyOf", "verify", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "RewardedAdsVerifier", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}, {"original_string": "private static final NetHttpTransport DEFAULT_HTTP_TRANSPORT =\n      new NetHttpTransport.Builder().build();", "modifier": "private static final", "type": "NetHttpTransport", "declarator": "DEFAULT_HTTP_TRANSPORT =\n      new NetHttpTransport.Builder().build()", "var_name": "DEFAULT_HTTP_TRANSPORT"}, {"original_string": "private static final Executor DEFAULT_BACKGROUND_EXECUTOR = Executors.newCachedThreadPool();", "modifier": "private static final", "type": "Executor", "declarator": "DEFAULT_BACKGROUND_EXECUTOR = Executors.newCachedThreadPool()", "var_name": "DEFAULT_BACKGROUND_EXECUTOR"}, {"original_string": "private final List<VerifyingPublicKeysProvider> verifyingPublicKeysProviders;", "modifier": "private final", "type": "List<VerifyingPublicKeysProvider>", "declarator": "verifyingPublicKeysProviders", "var_name": "verifyingPublicKeysProviders"}, {"original_string": "public static final String SIGNATURE_PARAM_NAME = \"signature=\";", "modifier": "public static final", "type": "String", "declarator": "SIGNATURE_PARAM_NAME = \"signature=\"", "var_name": "SIGNATURE_PARAM_NAME"}, {"original_string": "public static final String KEY_ID_PARAM_NAME = \"key_id=\";", "modifier": "public static final", "type": "String", "declarator": "KEY_ID_PARAM_NAME = \"key_id=\"", "var_name": "KEY_ID_PARAM_NAME"}, {"original_string": "public static final String PUBLIC_KEYS_URL_PROD =\n      \"https://www.gstatic.com/admob/reward/verifier-keys.json\";", "modifier": "public static final", "type": "String", "declarator": "PUBLIC_KEYS_URL_PROD =\n      \"https://www.gstatic.com/admob/reward/verifier-keys.json\"", "var_name": "PUBLIC_KEYS_URL_PROD"}, {"original_string": "public static final String PUBLIC_KEYS_URL_TEST =\n      \"https://www.gstatic.com/admob/reward/verifier-keys-test.json\";", "modifier": "public static final", "type": "String", "declarator": "PUBLIC_KEYS_URL_TEST =\n      \"https://www.gstatic.com/admob/reward/verifier-keys-test.json\"", "var_name": "PUBLIC_KEYS_URL_TEST"}, {"original_string": "public static final KeysDownloader KEYS_DOWNLOADER_INSTANCE_PROD =\n      new KeysDownloader(DEFAULT_BACKGROUND_EXECUTOR, DEFAULT_HTTP_TRANSPORT, PUBLIC_KEYS_URL_PROD);", "modifier": "public static final", "type": "KeysDownloader", "declarator": "KEYS_DOWNLOADER_INSTANCE_PROD =\n      new KeysDownloader(DEFAULT_BACKGROUND_EXECUTOR, DEFAULT_HTTP_TRANSPORT, PUBLIC_KEYS_URL_PROD)", "var_name": "KEYS_DOWNLOADER_INSTANCE_PROD"}, {"original_string": "public static final KeysDownloader KEYS_DOWNLOADER_INSTANCE_TEST =\n      new KeysDownloader(DEFAULT_BACKGROUND_EXECUTOR, DEFAULT_HTTP_TRANSPORT, PUBLIC_KEYS_URL_TEST);", "modifier": "public static final", "type": "KeysDownloader", "declarator": "KEYS_DOWNLOADER_INSTANCE_TEST =\n      new KeysDownloader(DEFAULT_BACKGROUND_EXECUTOR, DEFAULT_HTTP_TRANSPORT, PUBLIC_KEYS_URL_TEST)", "var_name": "KEYS_DOWNLOADER_INSTANCE_TEST"}], "methods": [{"identifier": "RewardedAdsVerifier", "parameters": "(List<VerifyingPublicKeysProvider> verifyingPublicKeysProviders)", "modifiers": "", "return": "", "signature": " RewardedAdsVerifier(List<VerifyingPublicKeysProvider> verifyingPublicKeysProviders)", "full_signature": "  RewardedAdsVerifier(List<VerifyingPublicKeysProvider> verifyingPublicKeysProviders)", "class_method_signature": "RewardedAdsVerifier.RewardedAdsVerifier(List<VerifyingPublicKeysProvider> verifyingPublicKeysProviders)", "testcase": false, "constructor": true}, {"identifier": "RewardedAdsVerifier", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " RewardedAdsVerifier(Builder builder)", "full_signature": "private  RewardedAdsVerifier(Builder builder)", "class_method_signature": "RewardedAdsVerifier.RewardedAdsVerifier(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "verify", "parameters": "(String rewardUrl)", "modifiers": "public", "return": "void", "signature": "void verify(String rewardUrl)", "full_signature": "public void verify(String rewardUrl)", "class_method_signature": "RewardedAdsVerifier.verify(String rewardUrl)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "(final byte[] tbs, long keyId, final byte[] signature)", "modifiers": "private", "return": "void", "signature": "void verify(final byte[] tbs, long keyId, final byte[] signature)", "full_signature": "private void verify(final byte[] tbs, long keyId, final byte[] signature)", "class_method_signature": "RewardedAdsVerifier.verify(final byte[] tbs, long keyId, final byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "parsePublicKeysJson", "parameters": "(String publicKeysJson)", "modifiers": "private static", "return": "Map<Long, ECPublicKey>", "signature": "Map<Long, ECPublicKey> parsePublicKeysJson(String publicKeysJson)", "full_signature": "private static Map<Long, ECPublicKey> parsePublicKeysJson(String publicKeysJson)", "class_method_signature": "RewardedAdsVerifier.parsePublicKeysJson(String publicKeysJson)", "testcase": false, "constructor": false}], "file": "apps/rewardedads/src/main/java/com/google/crypto/tink/apps/rewardedads/RewardedAdsVerifier.java"}, "focal_method": {"identifier": "verify", "parameters": "(String rewardUrl)", "modifiers": "public", "return": "void", "body": "public void verify(String rewardUrl) throws GeneralSecurityException {\n    URI uri;\n    try {\n      uri = new URI(rewardUrl);\n    } catch (URISyntaxException ex) {\n      throw new GeneralSecurityException(ex);\n    }\n    String queryString = uri.getQuery();\n    int i = queryString.indexOf(SIGNATURE_PARAM_NAME);\n    if (i <= 0 || queryString.charAt(i - 1) != '&') {\n      throw new GeneralSecurityException(\n          \"signature and key id must be the last two query parameters\");\n    }\n    byte[] tbsData =\n        queryString.substring(0, i - 1 /* i - 1 instead of i because of & */).getBytes(UTF_8);\n\n    String sigAndKeyId = queryString.substring(i);\n    i = sigAndKeyId.indexOf(KEY_ID_PARAM_NAME);\n    if (i == -1 || sigAndKeyId.charAt(i - 1) != '&') {\n      throw new GeneralSecurityException(\n          \"signature and key id must be the last two query parameters\");\n    }\n    String sig =\n        sigAndKeyId.substring(\n            SIGNATURE_PARAM_NAME.length(), i - 1 /* i - 1 instead of i because of & */);\n\n    // We don't have to check that keyId is the last parameter, because the long conversion would\n    // fail anyway if there's any trailing data.\n    try {\n      long keyId = Long.parseLong(sigAndKeyId.substring(i + KEY_ID_PARAM_NAME.length()));\n      verify(tbsData, keyId, Base64.urlSafeDecode(sig));\n    } catch (NumberFormatException ex) {\n      throw new GeneralSecurityException(\"key_id must be a long\");\n    }\n  }", "signature": "void verify(String rewardUrl)", "full_signature": "public void verify(String rewardUrl)", "class_method_signature": "RewardedAdsVerifier.verify(String rewardUrl)", "testcase": false, "constructor": false, "invocations": ["getQuery", "indexOf", "charAt", "getBytes", "substring", "substring", "indexOf", "charAt", "substring", "length", "parseLong", "substring", "length", "verify", "urlSafeDecode"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}