{"test_class": {"identifier": "BookControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate MockMvc mockMvc;", "modifier": "@Autowired\n\tprivate", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@MockBean\n\tprivate BookService bookService;", "modifier": "@MockBean\n\tprivate", "type": "BookService", "declarator": "bookService", "var_name": "bookService"}], "file": "ch06/recipe_6_1_i/src/test/java/com/apress/springbootrecipes/library/rest/BookControllerTest.java"}, "test_case": {"identifier": "shouldAddBook", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldAddBook() throws Exception {\n\n\t  when(bookService.create(any(Book.class))).thenReturn(new Book(\"123456789\", \"Test Book Stored\", \"T. Author\"));\n\n\t  mockMvc.perform(post(\"/books\")\n            .contentType(MediaType.APPLICATION_JSON)\n            .content(\"{ \\\"isbn\\\" : \\\"123456789\\\"}, \\\"title\\\" : \\\"Test Book\\\", \\\"authors\\\" : [\\\"T. Author\\\"]\"))\n            .andExpect(status().isCreated())\n            .andExpect(header().string(\"Location\", \"http://localhost/books/123456789\"));\n  }", "signature": "void shouldAddBook()", "full_signature": "@Test public void shouldAddBook()", "class_method_signature": "BookControllerTest.shouldAddBook()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "create", "any", "andExpect", "andExpect", "perform", "content", "contentType", "post", "isCreated", "status", "string", "header"]}, "focal_class": {"identifier": "BookController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BookService bookService;", "modifier": "private final", "type": "BookService", "declarator": "bookService", "var_name": "bookService"}], "methods": [{"identifier": "BookController", "parameters": "(BookService bookService)", "modifiers": "public", "return": "", "signature": " BookController(BookService bookService)", "full_signature": "public  BookController(BookService bookService)", "class_method_signature": "BookController.BookController(BookService bookService)", "testcase": false, "constructor": true}, {"identifier": "all", "parameters": "()", "modifiers": "@GetMapping @PermitAll public", "return": "Iterable<Book>", "signature": "Iterable<Book> all()", "full_signature": "@GetMapping @PermitAll public Iterable<Book> all()", "class_method_signature": "BookController.all()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@PathVariable(\"isbn\") String isbn)", "modifiers": "@GetMapping(\"/{isbn}\") public", "return": "ResponseEntity<Book>", "signature": "ResponseEntity<Book> get(@PathVariable(\"isbn\") String isbn)", "full_signature": "@GetMapping(\"/{isbn}\") public ResponseEntity<Book> get(@PathVariable(\"isbn\") String isbn)", "class_method_signature": "BookController.get(@PathVariable(\"isbn\") String isbn)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "modifiers": "@PostMapping public", "return": "ResponseEntity<Book>", "signature": "ResponseEntity<Book> create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "full_signature": "@PostMapping public ResponseEntity<Book> create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "class_method_signature": "BookController.create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "testcase": false, "constructor": false}], "file": "ch06/recipe_6_1_i/src/main/java/com/apress/springbootrecipes/library/rest/BookController.java"}, "focal_method": {"identifier": "create", "parameters": "(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "modifiers": "@PostMapping public", "return": "ResponseEntity<Book>", "body": "@PostMapping\n\tpublic ResponseEntity<Book> create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder) {\n    var created = bookService.create(book);\n    var newBookUri = uriBuilder.path(\"/books/{isbn}\").build(created.getIsbn());\n    return ResponseEntity\n            .created(newBookUri)\n            .body(created);\n\t}", "signature": "ResponseEntity<Book> create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "full_signature": "@PostMapping public ResponseEntity<Book> create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "class_method_signature": "BookController.create(@RequestBody Book book,\n                                     UriComponentsBuilder uriBuilder)", "testcase": false, "constructor": false, "invocations": ["create", "build", "path", "getIsbn", "body", "created"]}, "repository": {"repo_id": 158588129, "url": "https://github.com/Apress/spring-boot-2-recipes", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 24, "size": 202, "license": "licensed"}}