{"test_class": {"identifier": "DefaultDeflateCompressionDivinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultDeflateCompressionDiviner diviner = null;", "modifier": "private", "type": "DefaultDeflateCompressionDiviner", "declarator": "diviner = null", "var_name": "diviner"}, {"original_string": "private byte[] testData = null;", "modifier": "private", "type": "byte[]", "declarator": "testData = null", "var_name": "testData"}], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/DefaultDeflateCompressionDivinerTest.java"}, "test_case": {"identifier": "testDivineDeflateParameters_File", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDivineDeflateParameters_File() throws IOException {\n    File tempFile = File.createTempFile(\"ddcdt\", \"tmp\");\n    tempFile.deleteOnExit();\n    try {\n      UnitTestZipArchive.saveTestZip(tempFile);\n      List<DivinationResult> results = diviner.divineDeflateParameters(tempFile);\n      Assert.assertEquals(UnitTestZipArchive.allEntriesInFileOrder.size(), results.size());\n      for (int x = 0; x < results.size(); x++) {\n        UnitTestZipEntry expected = UnitTestZipArchive.allEntriesInFileOrder.get(x);\n        DivinationResult actual = results.get(x);\n        Assert.assertEquals(expected.path, actual.minimalZipEntry.getFileName());\n        int expectedLevel = expected.level;\n        if (expectedLevel > 0) {\n          // Compressed entry\n          Assert.assertTrue(actual.minimalZipEntry.isDeflateCompressed());\n          Assert.assertNotNull(actual.divinedParameters);\n          Assert.assertEquals(expectedLevel, actual.divinedParameters.level);\n          Assert.assertEquals(0, actual.divinedParameters.strategy);\n          Assert.assertTrue(actual.divinedParameters.nowrap);\n        } else {\n          // Uncompressed entry\n          Assert.assertFalse(actual.minimalZipEntry.isDeflateCompressed());\n          Assert.assertNull(actual.divinedParameters);\n        }\n      }\n    } finally {\n      try {\n        tempFile.delete();\n      } catch (Exception ignoreD) {\n        // Nothing\n      }\n    }\n  }", "signature": "void testDivineDeflateParameters_File()", "full_signature": "@Test public void testDivineDeflateParameters_File()", "class_method_signature": "DefaultDeflateCompressionDivinerTest.testDivineDeflateParameters_File()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "deleteOnExit", "saveTestZip", "divineDeflateParameters", "assertEquals", "size", "size", "size", "get", "get", "assertEquals", "getFileName", "assertTrue", "isDeflateCompressed", "assertNotNull", "assertEquals", "assertEquals", "assertTrue", "assertFalse", "isDeflateCompressed", "assertNull", "delete"]}, "focal_class": {"identifier": "DefaultDeflateCompressionDiviner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<Integer, List<Integer>> levelsByStrategy = getLevelsByStrategy();", "modifier": "private final", "type": "Map<Integer, List<Integer>>", "declarator": "levelsByStrategy = getLevelsByStrategy()", "var_name": "levelsByStrategy"}], "methods": [{"identifier": "divineDeflateParameters", "parameters": "(File archiveFile)", "modifiers": "public", "return": "List<DivinationResult>", "signature": "List<DivinationResult> divineDeflateParameters(File archiveFile)", "full_signature": "public List<DivinationResult> divineDeflateParameters(File archiveFile)", "class_method_signature": "DefaultDeflateCompressionDiviner.divineDeflateParameters(File archiveFile)", "testcase": false, "constructor": false}, {"identifier": "getLevelsByStrategy", "parameters": "()", "modifiers": "protected", "return": "Map<Integer, List<Integer>>", "signature": "Map<Integer, List<Integer>> getLevelsByStrategy()", "full_signature": "protected Map<Integer, List<Integer>> getLevelsByStrategy()", "class_method_signature": "DefaultDeflateCompressionDiviner.getLevelsByStrategy()", "testcase": false, "constructor": false}, {"identifier": "divineDeflateParameters", "parameters": "(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "modifiers": "public", "return": "JreDeflateParameters", "signature": "JreDeflateParameters divineDeflateParameters(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "full_signature": "public JreDeflateParameters divineDeflateParameters(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "class_method_signature": "DefaultDeflateCompressionDiviner.divineDeflateParameters(\n      MultiViewInputStreamFactory<?> compressedDataInputStreamFactory)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "modifiers": "private", "return": "boolean", "signature": "boolean matches(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "full_signature": "private boolean matches(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "class_method_signature": "DefaultDeflateCompressionDiviner.matches(\n      InputStream compressedDataIn,\n      Inflater inflater,\n      Deflater deflater,\n      InputStream matchingStreamInput,\n      byte[] copyBuffer)", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/DefaultDeflateCompressionDiviner.java"}, "focal_method": {"identifier": "divineDeflateParameters", "parameters": "(File archiveFile)", "modifiers": "public", "return": "List<DivinationResult>", "body": "public List<DivinationResult> divineDeflateParameters(File archiveFile) throws IOException {\n    List<DivinationResult> results = new ArrayList<DivinationResult>();\n    for (MinimalZipEntry minimalZipEntry : MinimalZipArchive.listEntries(archiveFile)) {\n      JreDeflateParameters divinedParameters = null;\n      if (minimalZipEntry.isDeflateCompressed()) {\n        // TODO(andrewhayden): Reuse streams to avoid churning file descriptors\n        RandomAccessFileInputStreamFactory rafisFactory =\n            new RandomAccessFileInputStreamFactory(\n                archiveFile,\n                minimalZipEntry.getFileOffsetOfCompressedData(),\n                minimalZipEntry.getCompressedSize());\n        divinedParameters = divineDeflateParameters(rafisFactory);\n      }\n      results.add(new DivinationResult(minimalZipEntry, divinedParameters));\n    }\n    return results;\n  }", "signature": "List<DivinationResult> divineDeflateParameters(File archiveFile)", "full_signature": "public List<DivinationResult> divineDeflateParameters(File archiveFile)", "class_method_signature": "DefaultDeflateCompressionDiviner.divineDeflateParameters(File archiveFile)", "testcase": false, "constructor": false, "invocations": ["listEntries", "isDeflateCompressed", "getFileOffsetOfCompressedData", "getCompressedSize", "divineDeflateParameters", "add"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}