{"test_class": {"identifier": "ContractDefinitionPayloadConverterTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [{"original_string": "protected final String encodedContract =\n      Base58Utils.encodeWithCheck(new byte[] {ContractDefinition.PAYLOAD_VERSION});", "modifier": "protected final", "type": "String", "declarator": "encodedContract =\n      Base58Utils.encodeWithCheck(new byte[] {ContractDefinition.PAYLOAD_VERSION})", "var_name": "encodedContract"}], "file": "core/common/src/test/java/hera/api/transaction/ContractDefinitionPayloadConverterTest.java"}, "test_case": {"identifier": "testConvertToPayload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConvertToPayload() {\n    final PayloadConverter<ContractDefinition> converter = new ContractDefinitionPayloadConverter();\n    final ContractDefinition definition = ContractDefinition.newBuilder()\n        .encodedContract(encodedContract)\n        .constructorArgs(\"1\", \"2\")\n        .build();\n    final BytesValue payload = converter.convertToPayload(definition);\n    assertNotNull(payload);\n  }", "signature": "void testConvertToPayload()", "full_signature": "@Test public void testConvertToPayload()", "class_method_signature": "ContractDefinitionPayloadConverterTest.testConvertToPayload()", "testcase": true, "constructor": false, "invocations": ["build", "constructorArgs", "encodedContract", "newBuilder", "convertToPayload", "assertNotNull"]}, "focal_class": {"identifier": "ContractDefinitionPayloadConverter", "superclass": "", "interfaces": "implements PayloadConverter<ContractDefinition>", "fields": [{"original_string": "protected final Logger logger = getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final JsonMapper mapper = new AergoJsonMapper();", "modifier": "protected final", "type": "JsonMapper", "declarator": "mapper = new AergoJsonMapper()", "var_name": "mapper"}], "methods": [{"identifier": "convertToPayload", "parameters": "(final ContractDefinition contractDefinition)", "modifiers": "@Override public", "return": "BytesValue", "signature": "BytesValue convertToPayload(final ContractDefinition contractDefinition)", "full_signature": "@Override public BytesValue convertToPayload(final ContractDefinition contractDefinition)", "class_method_signature": "ContractDefinitionPayloadConverter.convertToPayload(final ContractDefinition contractDefinition)", "testcase": false, "constructor": false}, {"identifier": "parseToModel", "parameters": "(final BytesValue payload)", "modifiers": "@Override public", "return": "ContractDefinition", "signature": "ContractDefinition parseToModel(final BytesValue payload)", "full_signature": "@Override public ContractDefinition parseToModel(final BytesValue payload)", "class_method_signature": "ContractDefinitionPayloadConverter.parseToModel(final BytesValue payload)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/hera/api/transaction/ContractDefinitionPayloadConverter.java"}, "focal_method": {"identifier": "convertToPayload", "parameters": "(final ContractDefinition contractDefinition)", "modifiers": "@Override public", "return": "BytesValue", "body": "@Override\n  public BytesValue convertToPayload(final ContractDefinition contractDefinition) {\n    try {\n      logger.debug(\"Convert to payload from {}\", contractDefinition);\n      final byte[] rawContract = contractDefinition.getDecodedContract().getValue();\n      final ByteArrayOutputStream rawStream = new ByteArrayOutputStream();\n      final LittleEndianDataOutputStream dataOut = new LittleEndianDataOutputStream(rawStream);\n      try {\n        dataOut.writeInt(rawContract.length + 4);\n        dataOut.write(rawContract);\n        if (!contractDefinition.getConstructorArgs().isEmpty()) {\n          final BytesValue constructorArgs =\n              mapper.marshal(contractDefinition.getConstructorArgs());\n          dataOut.write(constructorArgs.getValue());\n        }\n      } finally {\n        dataOut.close();\n      }\n      return BytesValue.of(rawStream.toByteArray());\n    } catch (HerajException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new HerajException(e);\n    }\n  }", "signature": "BytesValue convertToPayload(final ContractDefinition contractDefinition)", "full_signature": "@Override public BytesValue convertToPayload(final ContractDefinition contractDefinition)", "class_method_signature": "ContractDefinitionPayloadConverter.convertToPayload(final ContractDefinition contractDefinition)", "testcase": false, "constructor": false, "invocations": ["debug", "getValue", "getDecodedContract", "writeInt", "write", "isEmpty", "getConstructorArgs", "marshal", "getConstructorArgs", "write", "getValue", "close", "of", "toByteArray"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}