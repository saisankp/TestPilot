{"test_class": {"identifier": "TestAndMatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ClassPool pool = ClassPool.getDefault();", "modifier": "private final static", "type": "ClassPool", "declarator": "pool = ClassPool.getDefault()", "var_name": "pool"}], "file": "com.gzoltar.core/src/test/java/com/gzoltar/core/instr/matchers/TestAndMatcher.java"}, "test_case": {"identifier": "testPublicAndFinalMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPublicAndFinalMethods() throws Exception {\n    MethodModifierMatcher publicMethodsMatcher = new MethodModifierMatcher(AccessFlag.PUBLIC);\n    MethodModifierMatcher protectedMethodsMatcher = new MethodModifierMatcher(AccessFlag.FINAL);\n    AndMatcher orMatcher = new AndMatcher(publicMethodsMatcher, protectedMethodsMatcher);\n\n    CtClass ctClass = pool.get(PublicFinalModifiers.class.getCanonicalName());\n    CtBehavior ctBehavior = ctClass.getDeclaredMethod(\"isNegative\");\n    assertTrue(orMatcher.matches(ctBehavior));\n\n    ctClass = pool.get(PublicModifiers.class.getCanonicalName());\n    ctBehavior = ctClass.getDeclaredMethod(\"isNegative\");\n    assertFalse(orMatcher.matches(ctBehavior));\n\n    ctClass = pool.get(ProtectedModifiers.class.getCanonicalName());\n    ctBehavior = ctClass.getDeclaredMethod(\"isNegative\");\n    assertFalse(orMatcher.matches(ctBehavior));\n\n    ctClass = pool.get(PrivateModifiers.class.getCanonicalName());\n    ctBehavior = ctClass.getDeclaredMethod(\"isNegative\");\n    assertFalse(orMatcher.matches(ctBehavior));\n  }", "signature": "void testPublicAndFinalMethods()", "full_signature": "@Test public void testPublicAndFinalMethods()", "class_method_signature": "TestAndMatcher.testPublicAndFinalMethods()", "testcase": true, "constructor": false, "invocations": ["get", "getCanonicalName", "getDeclaredMethod", "assertTrue", "matches", "get", "getCanonicalName", "getDeclaredMethod", "assertFalse", "matches", "get", "getCanonicalName", "getDeclaredMethod", "assertFalse", "matches", "get", "getCanonicalName", "getDeclaredMethod", "assertFalse", "matches"]}, "focal_class": {"identifier": "AndMatcher", "superclass": "", "interfaces": "implements IMatcher", "fields": [{"original_string": "private final IMatcher[] matchers;", "modifier": "private final", "type": "IMatcher[]", "declarator": "matchers", "var_name": "matchers"}], "methods": [{"identifier": "AndMatcher", "parameters": "(final IMatcher... matchers)", "modifiers": "public", "return": "", "signature": " AndMatcher(final IMatcher... matchers)", "full_signature": "public  AndMatcher(final IMatcher... matchers)", "class_method_signature": "AndMatcher.AndMatcher(final IMatcher... matchers)", "testcase": false, "constructor": true}, {"identifier": "matches", "parameters": "(final CtClass ctClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(final CtClass ctClass)", "full_signature": "@Override public boolean matches(final CtClass ctClass)", "class_method_signature": "AndMatcher.matches(final CtClass ctClass)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final CtBehavior ctBehavior)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(final CtBehavior ctBehavior)", "full_signature": "@Override public boolean matches(final CtBehavior ctBehavior)", "class_method_signature": "AndMatcher.matches(final CtBehavior ctBehavior)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(final CtField ctField)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean matches(final CtField ctField)", "full_signature": "@Override public boolean matches(final CtField ctField)", "class_method_signature": "AndMatcher.matches(final CtField ctField)", "testcase": false, "constructor": false}], "file": "com.gzoltar.core/src/main/java/com/gzoltar/core/instr/matchers/AndMatcher.java"}, "focal_method": {"identifier": "matches", "parameters": "(final CtClass ctClass)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n  public boolean matches(final CtClass ctClass) {\n    for (IMatcher mat : this.matchers) {\n      if (!mat.matches(ctClass)) {\n        return false;\n      }\n    }\n    return true;\n  }", "signature": "boolean matches(final CtClass ctClass)", "full_signature": "@Override public boolean matches(final CtClass ctClass)", "class_method_signature": "AndMatcher.matches(final CtClass ctClass)", "testcase": false, "constructor": false, "invocations": ["matches"]}, "repository": {"repo_id": 139729058, "url": "https://github.com/GZoltar/gzoltar", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 30, "size": 2454, "license": "licensed"}}