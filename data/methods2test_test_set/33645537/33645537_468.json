{"test_class": {"identifier": "IsBSTTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IsBST isBST;", "modifier": "private", "type": "IsBST", "declarator": "isBST", "var_name": "isBST"}], "file": "algs/src/test/java/com/github/pedrovgs/problem18/IsBSTTest.java"}, "test_case": {"identifier": "shouldReturnTrueIfBinaryTreeIsBSTRecursive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnTrueIfBinaryTreeIsBSTRecursive() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(0);\n    BinaryNode<Integer> n1 = new BinaryNode<Integer>(1);\n    BinaryNode<Integer> n2 = new BinaryNode<Integer>(2);\n    n1.setLeft(root);\n    n1.setRight(n2);\n\n    assertTrue(isBST.checkRecursive(n1));\n  }", "signature": "void shouldReturnTrueIfBinaryTreeIsBSTRecursive()", "full_signature": "@Test public void shouldReturnTrueIfBinaryTreeIsBSTRecursive()", "class_method_signature": "IsBSTTest.shouldReturnTrueIfBinaryTreeIsBSTRecursive()", "testcase": true, "constructor": false, "invocations": ["setLeft", "setRight", "assertTrue", "checkRecursive"]}, "focal_class": {"identifier": "IsBST", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BinaryTreeInOrder binaryTreeInOrder = new BinaryTreeInOrder();", "modifier": "private", "type": "BinaryTreeInOrder", "declarator": "binaryTreeInOrder = new BinaryTreeInOrder()", "var_name": "binaryTreeInOrder"}], "methods": [{"identifier": "checkRecursive", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "boolean", "signature": "boolean checkRecursive(BinaryNode<Integer> root)", "full_signature": "public boolean checkRecursive(BinaryNode<Integer> root)", "class_method_signature": "IsBST.checkRecursive(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "checkRecursiveInner", "parameters": "(BinaryNode<Integer> root)", "modifiers": "private", "return": "boolean", "signature": "boolean checkRecursiveInner(BinaryNode<Integer> root)", "full_signature": "private boolean checkRecursiveInner(BinaryNode<Integer> root)", "class_method_signature": "IsBST.checkRecursiveInner(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "checkIterative", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "boolean", "signature": "boolean checkIterative(BinaryNode<Integer> root)", "full_signature": "public boolean checkIterative(BinaryNode<Integer> root)", "class_method_signature": "IsBST.checkIterative(BinaryNode<Integer> root)", "testcase": false, "constructor": false}, {"identifier": "isListOrdered", "parameters": "(List<BinaryNode<Integer>> nodes)", "modifiers": "private", "return": "boolean", "signature": "boolean isListOrdered(List<BinaryNode<Integer>> nodes)", "full_signature": "private boolean isListOrdered(List<BinaryNode<Integer>> nodes)", "class_method_signature": "IsBST.isListOrdered(List<BinaryNode<Integer>> nodes)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(BinaryNode<Integer> root)", "modifiers": "private", "return": "void", "signature": "void validateInput(BinaryNode<Integer> root)", "full_signature": "private void validateInput(BinaryNode<Integer> root)", "class_method_signature": "IsBST.validateInput(BinaryNode<Integer> root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem18/IsBST.java"}, "focal_method": {"identifier": "checkRecursive", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "boolean", "body": "public boolean checkRecursive(BinaryNode<Integer> root) {\n    validateInput(root);\n    return checkRecursiveInner(root);\n  }", "signature": "boolean checkRecursive(BinaryNode<Integer> root)", "full_signature": "public boolean checkRecursive(BinaryNode<Integer> root)", "class_method_signature": "IsBST.checkRecursive(BinaryNode<Integer> root)", "testcase": false, "constructor": false, "invocations": ["validateInput", "checkRecursiveInner"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}