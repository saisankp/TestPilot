{"test_class": {"identifier": "NSEmulatorReceiverTest", "superclass": "extends RobolectricTestWithConfig", "interfaces": "", "fields": [], "file": "app/src/test/java/com/eveningoutpost/dexdrip/NSEmulatorReceiverTest.java"}, "test_case": {"identifier": "bgReadingInsertFromDataTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void bgReadingInsertFromDataTest() throws JSONException {\n\n        // test data courtesy of philipgo - thanks\n        final JSONObject json_object = new JSONObject();\n        json_object.put(\"date\", 1526717691000.0);\n        json_object.put(\"sgv\", 148);\n        json_object.put(\"direction\", \"SingleUp\");\n\n        final BgReading result = NSEmulatorReceiver.bgReadingInsertFromData(json_object.getLong(\"date\"),\n                json_object.getDouble(\"sgv\"),\n                BgReading.slopefromName(json_object.getString(\"direction\")),\n                true);\n\n        assertWithMessage(\"result not null\").that(result).isNotNull();\n        assertWithMessage(\"direction matches\").that(result.slopeName()).isEqualTo(\"SingleUp\");\n        assertWithMessage(\"timestamp matches\").that(result.timestamp).isEqualTo(1526717691000L);\n        assertWithMessage(\"sgv matches 1\").that(result.calculated_value).isEqualTo(148d);\n        assertWithMessage(\"sgv matches 2\").that(result.filtered_calculated_value).isEqualTo(148d);\n        assertWithMessage(\"sgv matches 3\").that(result.raw_data).isEqualTo(148d);\n        assertWithMessage(\"sgv matches 4\").that(result.filtered_data).isEqualTo(148d);\n\n        //System.out.println(result.toJSON(true));\n        //System.out.println(result.slopeName());\n\n    }", "signature": "void bgReadingInsertFromDataTest()", "full_signature": "@Test public void bgReadingInsertFromDataTest()", "class_method_signature": "NSEmulatorReceiverTest.bgReadingInsertFromDataTest()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "bgReadingInsertFromData", "getLong", "getDouble", "slopefromName", "getString", "isNotNull", "that", "assertWithMessage", "isEqualTo", "that", "assertWithMessage", "slopeName", "isEqualTo", "that", "assertWithMessage", "isEqualTo", "that", "assertWithMessage", "isEqualTo", "that", "assertWithMessage", "isEqualTo", "that", "assertWithMessage", "isEqualTo", "that", "assertWithMessage"]}, "focal_class": {"identifier": "NSEmulatorReceiver", "superclass": "extends BroadcastReceiver", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"jamorham nsemulator\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"jamorham nsemulator\"", "var_name": "TAG"}, {"original_string": "private static final boolean debug = false;", "modifier": "private static final", "type": "boolean", "declarator": "debug = false", "var_name": "debug"}, {"original_string": "private static final boolean d = false;", "modifier": "private static final", "type": "boolean", "declarator": "d = false", "var_name": "d"}, {"original_string": "private static SharedPreferences prefs;", "modifier": "private static", "type": "SharedPreferences", "declarator": "prefs", "var_name": "prefs"}, {"original_string": "private static final Object lock = new Object();", "modifier": "private static final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}], "methods": [{"identifier": "onReceive", "parameters": "(final Context context, final Intent intent)", "modifiers": "@Override public", "return": "void", "signature": "void onReceive(final Context context, final Intent intent)", "full_signature": "@Override public void onReceive(final Context context, final Intent intent)", "class_method_signature": "NSEmulatorReceiver.onReceive(final Context context, final Intent intent)", "testcase": false, "constructor": false}, {"identifier": "bgReadingInsertFromData", "parameters": "(long timestamp, double sgv, double slope, boolean do_notification)", "modifiers": "public static", "return": "BgReading", "signature": "BgReading bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "full_signature": "public static BgReading bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "class_method_signature": "NSEmulatorReceiver.bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/eveningoutpost/dexdrip/NSEmulatorReceiver.java"}, "focal_method": {"identifier": "bgReadingInsertFromData", "parameters": "(long timestamp, double sgv, double slope, boolean do_notification)", "modifiers": "public static", "return": "BgReading", "body": "public static BgReading bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification) {\n        Log.d(TAG, \"bgReadingInsertFromData called timestamp = \" + timestamp + \" bg = \" + sgv + \" time =\" + JoH.dateTimeText(timestamp));\n        final JSONObject faux_bgr = new JSONObject();\n        try {\n            faux_bgr.put(\"timestamp\", timestamp);\n            faux_bgr.put(\"calculated_value\", sgv);\n            faux_bgr.put(\"filtered_calculated_value\", sgv);\n            faux_bgr.put(\"calculated_value_slope\", slope);\n            // sanity checking???\n            // fake up some extra data\n            faux_bgr.put(\"raw_data\", sgv);\n            faux_bgr.put(\"age_adjusted_raw_value\", sgv);\n            faux_bgr.put(\"filtered_data\", sgv);\n\n            faux_bgr.put(\"uuid\", UUID.randomUUID().toString());\n        } catch (JSONException e) {\n            // TODO Auto-generated catch block\n            UserError.Log.e(TAG, \"bgReadingInsertFromData Got JSON exception: \" + e);\n            return null;\n        }\n\n        Log.d(TAG, \"Received NSEmulator SGV: \" + faux_bgr);\n        return bgReadingInsertFromJson(faux_bgr.toString(), do_notification, true); // notify and force sensor\n    }", "signature": "BgReading bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "full_signature": "public static BgReading bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "class_method_signature": "NSEmulatorReceiver.bgReadingInsertFromData(long timestamp, double sgv, double slope, boolean do_notification)", "testcase": false, "constructor": false, "invocations": ["d", "dateTimeText", "put", "put", "put", "put", "put", "put", "put", "put", "toString", "randomUUID", "e", "d", "bgReadingInsertFromJson", "toString"]}, "repository": {"repo_id": 49717672, "url": "https://github.com/jamorham/xDrip-plus", "stars": 199, "created": "1/15/2016 12:31:22 PM +00:00", "updates": "2020-01-26T20:46:33+00:00", "fork": "False", "license": "licensed"}}