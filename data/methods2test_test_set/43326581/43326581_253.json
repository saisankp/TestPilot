{"test_class": {"identifier": "ThriftEnumUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "libraries/lib-datahandler/src/test/java/org/eclipse/sw360/datahandler/common/ThriftEnumUtilsTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToString() {\n        assertThat(ThriftEnumUtils.enumToString(AttachmentType.DESIGN), is(\"Design document\"));\n        assertThat(ThriftEnumUtils.enumToString(RepositoryType.GIT), is(\"Git\"));\n    }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "ThriftEnumUtilsTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertThat", "enumToString", "is", "assertThat", "enumToString", "is"]}, "focal_class": {"identifier": "ThriftEnumUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ImmutableMap<ComponentType, String> MAP_COMPONENT_TYPE_STRING = ImmutableMap.<ComponentType, String>builder()\n            .put(ComponentType.OSS, \"OSS\")\n            .put(ComponentType.COTS, \"COTS\")\n            .put(ComponentType.INTERNAL, \"Internal\")\n            .put(ComponentType.INNER_SOURCE, \"Inner Source\")\n            .put(ComponentType.SERVICE, \"Service\")\n            .put(ComponentType.FREESOFTWARE, \"Freeware\")\n            .build();", "modifier": "private static final", "type": "ImmutableMap<ComponentType, String>", "declarator": "MAP_COMPONENT_TYPE_STRING = ImmutableMap.<ComponentType, String>builder()\n            .put(ComponentType.OSS, \"OSS\")\n            .put(ComponentType.COTS, \"COTS\")\n            .put(ComponentType.INTERNAL, \"Internal\")\n            .put(ComponentType.INNER_SOURCE, \"Inner Source\")\n            .put(ComponentType.SERVICE, \"Service\")\n            .put(ComponentType.FREESOFTWARE, \"Freeware\")\n            .build()", "var_name": "MAP_COMPONENT_TYPE_STRING"}, {"original_string": "private static final ImmutableMap<Ternary,String> MAP_TERNARY_STRING = ImmutableMap.of(\n            Ternary.UNDEFINED, \"undefined\",\n            Ternary.NO, \"no\",\n            Ternary.YES, \"yes\");", "modifier": "private static final", "type": "ImmutableMap<Ternary,String>", "declarator": "MAP_TERNARY_STRING = ImmutableMap.of(\n            Ternary.UNDEFINED, \"undefined\",\n            Ternary.NO, \"no\",\n            Ternary.YES, \"yes\")", "var_name": "MAP_TERNARY_STRING"}, {"original_string": "private static final ImmutableMap<ProjectType, String> MAP_PROJECT_TYPE_STRING = ImmutableMap.of(\n            ProjectType.CUSTOMER, \"Customer Project\" ,\n            ProjectType.INTERNAL, \"Internal Project\" ,\n            ProjectType.PRODUCT, \"Product\" ,\n            ProjectType.SERVICE, \"Service\",\n            ProjectType.INNER_SOURCE, \"Inner Source\");", "modifier": "private static final", "type": "ImmutableMap<ProjectType, String>", "declarator": "MAP_PROJECT_TYPE_STRING = ImmutableMap.of(\n            ProjectType.CUSTOMER, \"Customer Project\" ,\n            ProjectType.INTERNAL, \"Internal Project\" ,\n            ProjectType.PRODUCT, \"Product\" ,\n            ProjectType.SERVICE, \"Service\",\n            ProjectType.INNER_SOURCE, \"Inner Source\")", "var_name": "MAP_PROJECT_TYPE_STRING"}, {"original_string": "private static final ImmutableMap<AttachmentType, String> MAP_ATTACHMENT_TYPE_STRING = ImmutableMap.<AttachmentType, String>builder()\n            .put(AttachmentType.DOCUMENT, \"Document\")\n            .put(AttachmentType.SOURCE, \"Source file\")\n            .put(AttachmentType.DESIGN, \"Design document\")\n            .put(AttachmentType.REQUIREMENT, \"Requirement document\")\n            .put(AttachmentType.CLEARING_REPORT, \"Clearing report\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_XML, \"Component license information (XML)\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_COMBINED, \"Component license information (Combined)\")\n            .put(AttachmentType.SCAN_RESULT_REPORT, \"Scan result report\")\n            .put(AttachmentType.SCAN_RESULT_REPORT_XML, \"Scan result report (XML)\")\n            .put(AttachmentType.SOURCE_SELF, \"Source file (Self-made)\")\n            .put(AttachmentType.BINARY, \"Binaries\")\n            .put(AttachmentType.BINARY_SELF, \"Binaries (Self-made)\")\n            .put(AttachmentType.DECISION_REPORT, \"Decision report\")\n            .put(AttachmentType.LEGAL_EVALUATION, \"Legal evaluation report\")\n            .put(AttachmentType.LICENSE_AGREEMENT, \"License agreement\")\n            .put(AttachmentType.SCREENSHOT, \"Screenshot of website\")\n            .put(AttachmentType.README_OSS, \"ReadMe OSS\")\n            .put(AttachmentType.OTHER, \"Other\")\n            .build();", "modifier": "private static final", "type": "ImmutableMap<AttachmentType, String>", "declarator": "MAP_ATTACHMENT_TYPE_STRING = ImmutableMap.<AttachmentType, String>builder()\n            .put(AttachmentType.DOCUMENT, \"Document\")\n            .put(AttachmentType.SOURCE, \"Source file\")\n            .put(AttachmentType.DESIGN, \"Design document\")\n            .put(AttachmentType.REQUIREMENT, \"Requirement document\")\n            .put(AttachmentType.CLEARING_REPORT, \"Clearing report\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_XML, \"Component license information (XML)\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_COMBINED, \"Component license information (Combined)\")\n            .put(AttachmentType.SCAN_RESULT_REPORT, \"Scan result report\")\n            .put(AttachmentType.SCAN_RESULT_REPORT_XML, \"Scan result report (XML)\")\n            .put(AttachmentType.SOURCE_SELF, \"Source file (Self-made)\")\n            .put(AttachmentType.BINARY, \"Binaries\")\n            .put(AttachmentType.BINARY_SELF, \"Binaries (Self-made)\")\n            .put(AttachmentType.DECISION_REPORT, \"Decision report\")\n            .put(AttachmentType.LEGAL_EVALUATION, \"Legal evaluation report\")\n            .put(AttachmentType.LICENSE_AGREEMENT, \"License agreement\")\n            .put(AttachmentType.SCREENSHOT, \"Screenshot of website\")\n            .put(AttachmentType.README_OSS, \"ReadMe OSS\")\n            .put(AttachmentType.OTHER, \"Other\")\n            .build()", "var_name": "MAP_ATTACHMENT_TYPE_STRING"}, {"original_string": "public static final ImmutableMap<AttachmentType, String>\n            MAP_ATTACHMENT_TYPE_SHORT_STRING = ImmutableMap.<AttachmentType, String>builder()\n            .put(AttachmentType.DOCUMENT, \"DOC\")\n            .put(AttachmentType.SOURCE, \"SRC\")\n            .put(AttachmentType.DESIGN, \"DSN\")\n            .put(AttachmentType.REQUIREMENT, \"RDT\")\n            .put(AttachmentType.CLEARING_REPORT, \"CRT\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_XML, \"CLX\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_COMBINED, \"CLI\")\n            .put(AttachmentType.SCAN_RESULT_REPORT, \"SRR\")\n            .put(AttachmentType.SCAN_RESULT_REPORT_XML, \"SRX\")\n            .put(AttachmentType.SOURCE_SELF, \"SRS\")\n            .put(AttachmentType.BINARY, \"BIN\")\n            .put(AttachmentType.BINARY_SELF, \"BIS\")\n            .put(AttachmentType.DECISION_REPORT, \"DRT\")\n            .put(AttachmentType.LEGAL_EVALUATION, \"LRT\")\n            .put(AttachmentType.LICENSE_AGREEMENT, \"LAT\")\n            .put(AttachmentType.SCREENSHOT, \"SCR\")\n            .put(AttachmentType.README_OSS, \"RDM\")\n            .put(AttachmentType.OTHER, \"OTH\")\n            .build();", "modifier": "public static final", "type": "ImmutableMap<AttachmentType, String>", "declarator": "MAP_ATTACHMENT_TYPE_SHORT_STRING = ImmutableMap.<AttachmentType, String>builder()\n            .put(AttachmentType.DOCUMENT, \"DOC\")\n            .put(AttachmentType.SOURCE, \"SRC\")\n            .put(AttachmentType.DESIGN, \"DSN\")\n            .put(AttachmentType.REQUIREMENT, \"RDT\")\n            .put(AttachmentType.CLEARING_REPORT, \"CRT\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_XML, \"CLX\")\n            .put(AttachmentType.COMPONENT_LICENSE_INFO_COMBINED, \"CLI\")\n            .put(AttachmentType.SCAN_RESULT_REPORT, \"SRR\")\n            .put(AttachmentType.SCAN_RESULT_REPORT_XML, \"SRX\")\n            .put(AttachmentType.SOURCE_SELF, \"SRS\")\n            .put(AttachmentType.BINARY, \"BIN\")\n            .put(AttachmentType.BINARY_SELF, \"BIS\")\n            .put(AttachmentType.DECISION_REPORT, \"DRT\")\n            .put(AttachmentType.LEGAL_EVALUATION, \"LRT\")\n            .put(AttachmentType.LICENSE_AGREEMENT, \"LAT\")\n            .put(AttachmentType.SCREENSHOT, \"SCR\")\n            .put(AttachmentType.README_OSS, \"RDM\")\n            .put(AttachmentType.OTHER, \"OTH\")\n            .build()", "var_name": "MAP_ATTACHMENT_TYPE_SHORT_STRING"}, {"original_string": "private static final ImmutableMap<ClearingState, String> MAP_CLEARING_STATUS_STRING = ImmutableMap.of(\n            ClearingState.NEW_CLEARING, \"New\",\n            ClearingState.SENT_TO_FOSSOLOGY, \"Sent to Fossology\",\n            ClearingState.UNDER_CLEARING, \"Under clearing\",\n            ClearingState.REPORT_AVAILABLE, \"Report available\",\n            ClearingState.APPROVED, \"Report Approved\");", "modifier": "private static final", "type": "ImmutableMap<ClearingState, String>", "declarator": "MAP_CLEARING_STATUS_STRING = ImmutableMap.of(\n            ClearingState.NEW_CLEARING, \"New\",\n            ClearingState.SENT_TO_FOSSOLOGY, \"Sent to Fossology\",\n            ClearingState.UNDER_CLEARING, \"Under clearing\",\n            ClearingState.REPORT_AVAILABLE, \"Report available\",\n            ClearingState.APPROVED, \"Report Approved\")", "var_name": "MAP_CLEARING_STATUS_STRING"}, {"original_string": "private static final ImmutableMap<FossologyStatus, String> MAP_FOSSOLOGY_STATE_STRING = ImmutableMap.<FossologyStatus, String>builder()\n            .put(FossologyStatus.CONNECTION_FAILED, \"Connection to FOSSology failed\")\n            .put(FossologyStatus.NON_EXISTENT, \"Non available or removed on remote server\")\n            .put(FossologyStatus.INACCESSIBLE, \"Read permission to upload is denied\")\n            .put(FossologyStatus.ERROR, \"Error\")\n            .put(FossologyStatus.NOT_SENT, \"Not yet sent\")\n            .put(FossologyStatus.SENT, \"Sent\")\n            .put(FossologyStatus.SCANNING, \"Job scanning\")\n            .put(FossologyStatus.OPEN, \"Open\")\n            .put(FossologyStatus.IN_PROGRESS, \"Assigned in progress\")\n            .put(FossologyStatus.CLOSED, \"Closed by assignee\")\n            .put(FossologyStatus.REJECTED, \"Rejected by assignee\")\n            .put(FossologyStatus.REPORT_AVAILABLE, \"Clearing report is available\")\n            .build();", "modifier": "private static final", "type": "ImmutableMap<FossologyStatus, String>", "declarator": "MAP_FOSSOLOGY_STATE_STRING = ImmutableMap.<FossologyStatus, String>builder()\n            .put(FossologyStatus.CONNECTION_FAILED, \"Connection to FOSSology failed\")\n            .put(FossologyStatus.NON_EXISTENT, \"Non available or removed on remote server\")\n            .put(FossologyStatus.INACCESSIBLE, \"Read permission to upload is denied\")\n            .put(FossologyStatus.ERROR, \"Error\")\n            .put(FossologyStatus.NOT_SENT, \"Not yet sent\")\n            .put(FossologyStatus.SENT, \"Sent\")\n            .put(FossologyStatus.SCANNING, \"Job scanning\")\n            .put(FossologyStatus.OPEN, \"Open\")\n            .put(FossologyStatus.IN_PROGRESS, \"Assigned in progress\")\n            .put(FossologyStatus.CLOSED, \"Closed by assignee\")\n            .put(FossologyStatus.REJECTED, \"Rejected by assignee\")\n            .put(FossologyStatus.REPORT_AVAILABLE, \"Clearing report is available\")\n            .build()", "var_name": "MAP_FOSSOLOGY_STATE_STRING"}, {"original_string": "private static final ImmutableMap<ModerationState, String> MAP_MODERATION_STATE_STRING = ImmutableMap.of(\n            ModerationState.APPROVED, \"Approved\",\n            ModerationState.PENDING, \"Pending\",\n            ModerationState.REJECTED, \"Rejected\",\n            ModerationState.INPROGRESS, \"In progress\");", "modifier": "private static final", "type": "ImmutableMap<ModerationState, String>", "declarator": "MAP_MODERATION_STATE_STRING = ImmutableMap.of(\n            ModerationState.APPROVED, \"Approved\",\n            ModerationState.PENDING, \"Pending\",\n            ModerationState.REJECTED, \"Rejected\",\n            ModerationState.INPROGRESS, \"In progress\")", "var_name": "MAP_MODERATION_STATE_STRING"}, {"original_string": "private static final ImmutableMap<ProjectRelationship, String> MAP_PROJECT_RELATION_STRING = ImmutableMap.of(\n            ProjectRelationship.UNKNOWN, \"Unknown\" ,\n            ProjectRelationship.DUPLICATE, \"Duplicate\" ,\n            ProjectRelationship.CONTAINED, \"Is a subproject\" ,\n            ProjectRelationship.REFERRED, \"Related\");", "modifier": "private static final", "type": "ImmutableMap<ProjectRelationship, String>", "declarator": "MAP_PROJECT_RELATION_STRING = ImmutableMap.of(\n            ProjectRelationship.UNKNOWN, \"Unknown\" ,\n            ProjectRelationship.DUPLICATE, \"Duplicate\" ,\n            ProjectRelationship.CONTAINED, \"Is a subproject\" ,\n            ProjectRelationship.REFERRED, \"Related\")", "var_name": "MAP_PROJECT_RELATION_STRING"}, {"original_string": "private static final ImmutableMap<ReleaseRelationship, String> MAP_RELEASE_RELATION_STRING = ImmutableMap.<ReleaseRelationship, String>builder()\n            .put(ReleaseRelationship.UNKNOWN, \"Unknown\")\n            .put(ReleaseRelationship.CONTAINED, \"Contained\")\n            .put(ReleaseRelationship.REFERRED, \"Related\")\n            .put(ReleaseRelationship.DYNAMICALLY_LINKED, \"Dynamically linked\")\n            .put(ReleaseRelationship.STATICALLY_LINKED, \"Statically linked\")\n            .put(ReleaseRelationship.SIDE_BY_SIDE, \"Side by side\")\n            .put(ReleaseRelationship.STANDALONE, \"Standalone\")\n            .put(ReleaseRelationship.INTERNAL_USE, \"Internal use\")\n            .put(ReleaseRelationship.OPTIONAL, \"Optional\")\n            .put(ReleaseRelationship.TO_BE_REPLACED, \"To be replaced\")\n            .build();", "modifier": "private static final", "type": "ImmutableMap<ReleaseRelationship, String>", "declarator": "MAP_RELEASE_RELATION_STRING = ImmutableMap.<ReleaseRelationship, String>builder()\n            .put(ReleaseRelationship.UNKNOWN, \"Unknown\")\n            .put(ReleaseRelationship.CONTAINED, \"Contained\")\n            .put(ReleaseRelationship.REFERRED, \"Related\")\n            .put(ReleaseRelationship.DYNAMICALLY_LINKED, \"Dynamically linked\")\n            .put(ReleaseRelationship.STATICALLY_LINKED, \"Statically linked\")\n            .put(ReleaseRelationship.SIDE_BY_SIDE, \"Side by side\")\n            .put(ReleaseRelationship.STANDALONE, \"Standalone\")\n            .put(ReleaseRelationship.INTERNAL_USE, \"Internal use\")\n            .put(ReleaseRelationship.OPTIONAL, \"Optional\")\n            .put(ReleaseRelationship.TO_BE_REPLACED, \"To be replaced\")\n            .build()", "var_name": "MAP_RELEASE_RELATION_STRING"}, {"original_string": "private static final ImmutableMap<RepositoryType, String> MAP_REPOSITORY_TYPE_STRING = ImmutableMap.<RepositoryType, String>builder()\n            .put(RepositoryType.UNKNOWN, \"Unknown\")\n            .put(RepositoryType.GIT, \"Git\")\n            .put(RepositoryType.CLEARCASE, \"ClearCase\")\n            .put(RepositoryType.SVN, \"Subversion (SVN)\")\n            .put(RepositoryType.CVS, \"CVS\")\n            .put(RepositoryType.MERCURIAL, \"Mercurial\")\n            .put(RepositoryType.PERFORCE, \"Perforce\")\n            .put(RepositoryType.VISUAL_SOURCESAFE, \"Visual SourceSafe\")\n            .put(RepositoryType.BAZAAR, \"Bazaar\")\n            .put(RepositoryType.ALIENBRAIN, \"Alienbrain\")\n            .put(RepositoryType.TEAM_FOUNDATION_SERVER, \"Team Foundation Server\")\n            .put(RepositoryType.RATIONAL_SYNERGY, \"IBM Rational Synergy\")\n            .put(RepositoryType.PTC_INTEGRITY, \"PTC Integrity\")\n            .put(RepositoryType.DTR, \"SAP Design Time Repository (DTR)\")\n            .put(RepositoryType.DARCS, \"Darcs\")\n            .put(RepositoryType.FOSSIL, \"Fossil\")\n            .put(RepositoryType.GNU_ARCH, \"GNU arch\")\n            .put(RepositoryType.MONOTONE, \"Monotone\")\n            .put(RepositoryType.BIT_KEEPER, \"BitKeeper\")\n            .put(RepositoryType.RATIONAL_TEAM_CONCERT, \"Rational Team Concert\")\n            .put(RepositoryType.RCS, \"Revision Control System (RCS)\")\n            .build();", "modifier": "private static final", "type": "ImmutableMap<RepositoryType, String>", "declarator": "MAP_REPOSITORY_TYPE_STRING = ImmutableMap.<RepositoryType, String>builder()\n            .put(RepositoryType.UNKNOWN, \"Unknown\")\n            .put(RepositoryType.GIT, \"Git\")\n            .put(RepositoryType.CLEARCASE, \"ClearCase\")\n            .put(RepositoryType.SVN, \"Subversion (SVN)\")\n            .put(RepositoryType.CVS, \"CVS\")\n            .put(RepositoryType.MERCURIAL, \"Mercurial\")\n            .put(RepositoryType.PERFORCE, \"Perforce\")\n            .put(RepositoryType.VISUAL_SOURCESAFE, \"Visual SourceSafe\")\n            .put(RepositoryType.BAZAAR, \"Bazaar\")\n            .put(RepositoryType.ALIENBRAIN, \"Alienbrain\")\n            .put(RepositoryType.TEAM_FOUNDATION_SERVER, \"Team Foundation Server\")\n            .put(RepositoryType.RATIONAL_SYNERGY, \"IBM Rational Synergy\")\n            .put(RepositoryType.PTC_INTEGRITY, \"PTC Integrity\")\n            .put(RepositoryType.DTR, \"SAP Design Time Repository (DTR)\")\n            .put(RepositoryType.DARCS, \"Darcs\")\n            .put(RepositoryType.FOSSIL, \"Fossil\")\n            .put(RepositoryType.GNU_ARCH, \"GNU arch\")\n            .put(RepositoryType.MONOTONE, \"Monotone\")\n            .put(RepositoryType.BIT_KEEPER, \"BitKeeper\")\n            .put(RepositoryType.RATIONAL_TEAM_CONCERT, \"Rational Team Concert\")\n            .put(RepositoryType.RCS, \"Revision Control System (RCS)\")\n            .build()", "var_name": "MAP_REPOSITORY_TYPE_STRING"}, {"original_string": "private static final ImmutableMap<MainlineState, String> MAP_MAINLINE_STATE_STRING = ImmutableMap.of(\n            MainlineState.OPEN, \"Open\",\n            MainlineState.MAINLINE, \"Mainline\",\n            MainlineState.SPECIFIC, \"Specific\",\n            MainlineState.PHASEOUT, \"Phaseout\",\n            MainlineState.DENIED, \"Denied\"\n    );", "modifier": "private static final", "type": "ImmutableMap<MainlineState, String>", "declarator": "MAP_MAINLINE_STATE_STRING = ImmutableMap.of(\n            MainlineState.OPEN, \"Open\",\n            MainlineState.MAINLINE, \"Mainline\",\n            MainlineState.SPECIFIC, \"Specific\",\n            MainlineState.PHASEOUT, \"Phaseout\",\n            MainlineState.DENIED, \"Denied\"\n    )", "var_name": "MAP_MAINLINE_STATE_STRING"}, {"original_string": "private static final ImmutableMap<CheckStatus, String> MAP_CHECK_STATUS_STRING = ImmutableMap.of(\n            CheckStatus.ACCEPTED,\"Accepted\",\n            CheckStatus.REJECTED,\"Rejected\",\n            CheckStatus.NOTCHECKED,\"Not checked\"\n    );", "modifier": "private static final", "type": "ImmutableMap<CheckStatus, String>", "declarator": "MAP_CHECK_STATUS_STRING = ImmutableMap.of(\n            CheckStatus.ACCEPTED,\"Accepted\",\n            CheckStatus.REJECTED,\"Rejected\",\n            CheckStatus.NOTCHECKED,\"Not checked\"\n    )", "var_name": "MAP_CHECK_STATUS_STRING"}, {"original_string": "private static final ImmutableMap<Visibility, String> MAP_VISIBILITY_STRING = ImmutableMap.of(\n            Visibility.PRIVATE, \"Private\" ,\n            Visibility.ME_AND_MODERATORS, \"Me and Moderators\",\n            Visibility.BUISNESSUNIT_AND_MODERATORS, \"Group and Moderators\",\n            Visibility.EVERYONE, \"Everyone\"\n    );", "modifier": "private static final", "type": "ImmutableMap<Visibility, String>", "declarator": "MAP_VISIBILITY_STRING = ImmutableMap.of(\n            Visibility.PRIVATE, \"Private\" ,\n            Visibility.ME_AND_MODERATORS, \"Me and Moderators\",\n            Visibility.BUISNESSUNIT_AND_MODERATORS, \"Group and Moderators\",\n            Visibility.EVERYONE, \"Everyone\"\n    )", "var_name": "MAP_VISIBILITY_STRING"}, {"original_string": "private static final ImmutableMap<ProjectState, String> MAP_PROJECT_STATE_STRING = ImmutableMap.of(\n            ProjectState.ACTIVE, \"Active\" ,\n            ProjectState.PHASE_OUT, \"Phase out\" ,\n            ProjectState.UNKNOWN, \"Unknown\");", "modifier": "private static final", "type": "ImmutableMap<ProjectState, String>", "declarator": "MAP_PROJECT_STATE_STRING = ImmutableMap.of(\n            ProjectState.ACTIVE, \"Active\" ,\n            ProjectState.PHASE_OUT, \"Phase out\" ,\n            ProjectState.UNKNOWN, \"Unknown\")", "var_name": "MAP_PROJECT_STATE_STRING"}, {"original_string": "private static final ImmutableMap<ProjectClearingState, String> MAP_PROJECT_CLEARING_STATE_STRING = ImmutableMap.of(\n            ProjectClearingState.OPEN, \"Open\",\n            ProjectClearingState.IN_PROGRESS, \"In Progress\",\n            ProjectClearingState.CLOSED, \"Closed\");", "modifier": "private static final", "type": "ImmutableMap<ProjectClearingState, String>", "declarator": "MAP_PROJECT_CLEARING_STATE_STRING = ImmutableMap.of(\n            ProjectClearingState.OPEN, \"Open\",\n            ProjectClearingState.IN_PROGRESS, \"In Progress\",\n            ProjectClearingState.CLOSED, \"Closed\")", "var_name": "MAP_PROJECT_CLEARING_STATE_STRING"}, {"original_string": "private static final ImmutableMap<UserGroup, String> MAP_USER_GROUP_STRING = ImmutableMap.<UserGroup, String>builder()\n            .put(UserGroup.USER, \"User\")\n            .put(UserGroup.ADMIN, \"Admin\")\n            .put(UserGroup.CLEARING_ADMIN, \"Clearing Admin\")\n            .put(UserGroup.ECC_ADMIN, \"ECC Admin\")\n            .put(UserGroup.SECURITY_ADMIN, \"Security Admin\")\n            .put(UserGroup.SW360_ADMIN, \"SW360 Admin\")\n            .build();", "modifier": "private static final", "type": "ImmutableMap<UserGroup, String>", "declarator": "MAP_USER_GROUP_STRING = ImmutableMap.<UserGroup, String>builder()\n            .put(UserGroup.USER, \"User\")\n            .put(UserGroup.ADMIN, \"Admin\")\n            .put(UserGroup.CLEARING_ADMIN, \"Clearing Admin\")\n            .put(UserGroup.ECC_ADMIN, \"ECC Admin\")\n            .put(UserGroup.SECURITY_ADMIN, \"Security Admin\")\n            .put(UserGroup.SW360_ADMIN, \"SW360 Admin\")\n            .build()", "var_name": "MAP_USER_GROUP_STRING"}, {"original_string": "private static final ImmutableMap<VulnerabilityRatingForProject, String> MAP_VULNERABILITY_RATING_FOR_PROJECT_STRING = ImmutableMap.of(\n            VulnerabilityRatingForProject.NOT_CHECKED, \"Not Checked\" ,\n            VulnerabilityRatingForProject.IRRELEVANT, \"Irrelevant\" ,\n            VulnerabilityRatingForProject.RESOLVED, \"Resolved\" ,\n            VulnerabilityRatingForProject.APPLICABLE, \"Applicable\"\n    );", "modifier": "private static final", "type": "ImmutableMap<VulnerabilityRatingForProject, String>", "declarator": "MAP_VULNERABILITY_RATING_FOR_PROJECT_STRING = ImmutableMap.of(\n            VulnerabilityRatingForProject.NOT_CHECKED, \"Not Checked\" ,\n            VulnerabilityRatingForProject.IRRELEVANT, \"Irrelevant\" ,\n            VulnerabilityRatingForProject.RESOLVED, \"Resolved\" ,\n            VulnerabilityRatingForProject.APPLICABLE, \"Applicable\"\n    )", "var_name": "MAP_VULNERABILITY_RATING_FOR_PROJECT_STRING"}, {"original_string": "private static final ImmutableMap<VerificationState, String> MAP_VERIFICATION_STATUS_STRING = ImmutableMap.of(\n            VerificationState.NOT_CHECKED, \"Not Checked\" ,\n            VerificationState.CHECKED, \"Checked\" ,\n            VerificationState.INCORRECT, \"Incorrect\"\n    );", "modifier": "private static final", "type": "ImmutableMap<VerificationState, String>", "declarator": "MAP_VERIFICATION_STATUS_STRING = ImmutableMap.of(\n            VerificationState.NOT_CHECKED, \"Not Checked\" ,\n            VerificationState.CHECKED, \"Checked\" ,\n            VerificationState.INCORRECT, \"Incorrect\"\n    )", "var_name": "MAP_VERIFICATION_STATUS_STRING"}, {"original_string": "private static final ImmutableMap<ECCStatus, String> MAP_ECC_STATUS_STRING = ImmutableMap.of(\n            ECCStatus.OPEN, \"Open\" ,\n            ECCStatus.IN_PROGRESS, \"In Progress\" ,\n            ECCStatus.APPROVED, \"Approved\",\n            ECCStatus.REJECTED, \"Rejected\"\n    );", "modifier": "private static final", "type": "ImmutableMap<ECCStatus, String>", "declarator": "MAP_ECC_STATUS_STRING = ImmutableMap.of(\n            ECCStatus.OPEN, \"Open\" ,\n            ECCStatus.IN_PROGRESS, \"In Progress\" ,\n            ECCStatus.APPROVED, \"Approved\",\n            ECCStatus.REJECTED, \"Rejected\"\n    )", "var_name": "MAP_ECC_STATUS_STRING"}, {"original_string": "private static final ImmutableMap<DocumentType, String> MAP_DOCUMENT_TYPE_STRING = ImmutableMap.of(\n            DocumentType.COMPONENT, \"component\" ,\n            DocumentType.RELEASE, \"release\" ,\n            DocumentType.PROJECT, \"project\",\n            DocumentType.LICENSE, \"license\",\n            DocumentType.USER, \"user\"\n    );", "modifier": "private static final", "type": "ImmutableMap<DocumentType, String>", "declarator": "MAP_DOCUMENT_TYPE_STRING = ImmutableMap.of(\n            DocumentType.COMPONENT, \"component\" ,\n            DocumentType.RELEASE, \"release\" ,\n            DocumentType.PROJECT, \"project\",\n            DocumentType.LICENSE, \"license\",\n            DocumentType.USER, \"user\"\n    )", "var_name": "MAP_DOCUMENT_TYPE_STRING"}, {"original_string": "public static final ImmutableMap<Class<? extends TEnum>, Map<? extends TEnum, String>>\n            MAP_ENUMTYPE_MAP = ImmutableMap.<Class<? extends TEnum>, Map<? extends TEnum, String>>builder()\n            .put(ComponentType.class, MAP_COMPONENT_TYPE_STRING)\n            .put(Ternary.class, MAP_TERNARY_STRING)\n            .put(ProjectType.class, MAP_PROJECT_TYPE_STRING)\n            .put(AttachmentType.class, MAP_ATTACHMENT_TYPE_STRING)\n            .put(ClearingState.class, MAP_CLEARING_STATUS_STRING)\n            .put(FossologyStatus.class, MAP_FOSSOLOGY_STATE_STRING)\n            .put(ModerationState.class, MAP_MODERATION_STATE_STRING)\n            .put(ProjectRelationship.class, MAP_PROJECT_RELATION_STRING)\n            .put(ReleaseRelationship.class, MAP_RELEASE_RELATION_STRING)\n            .put(RepositoryType.class, MAP_REPOSITORY_TYPE_STRING)\n            .put(MainlineState.class, MAP_MAINLINE_STATE_STRING)\n            .put(UserGroup.class, MAP_USER_GROUP_STRING)\n            .put(Visibility.class, MAP_VISIBILITY_STRING)\n            .put(ProjectState.class, MAP_PROJECT_STATE_STRING)\n            .put(ProjectClearingState.class, MAP_PROJECT_CLEARING_STATE_STRING)\n            .put(CheckStatus.class,MAP_CHECK_STATUS_STRING)\n            .put(VerificationState.class, MAP_VERIFICATION_STATUS_STRING)\n            .put(VulnerabilityRatingForProject.class, MAP_VULNERABILITY_RATING_FOR_PROJECT_STRING)\n            .put(ECCStatus.class, MAP_ECC_STATUS_STRING)\n            .put(DocumentType.class, MAP_DOCUMENT_TYPE_STRING)\n            .build();", "modifier": "public static final", "type": "ImmutableMap<Class<? extends TEnum>, Map<? extends TEnum, String>>", "declarator": "MAP_ENUMTYPE_MAP = ImmutableMap.<Class<? extends TEnum>, Map<? extends TEnum, String>>builder()\n            .put(ComponentType.class, MAP_COMPONENT_TYPE_STRING)\n            .put(Ternary.class, MAP_TERNARY_STRING)\n            .put(ProjectType.class, MAP_PROJECT_TYPE_STRING)\n            .put(AttachmentType.class, MAP_ATTACHMENT_TYPE_STRING)\n            .put(ClearingState.class, MAP_CLEARING_STATUS_STRING)\n            .put(FossologyStatus.class, MAP_FOSSOLOGY_STATE_STRING)\n            .put(ModerationState.class, MAP_MODERATION_STATE_STRING)\n            .put(ProjectRelationship.class, MAP_PROJECT_RELATION_STRING)\n            .put(ReleaseRelationship.class, MAP_RELEASE_RELATION_STRING)\n            .put(RepositoryType.class, MAP_REPOSITORY_TYPE_STRING)\n            .put(MainlineState.class, MAP_MAINLINE_STATE_STRING)\n            .put(UserGroup.class, MAP_USER_GROUP_STRING)\n            .put(Visibility.class, MAP_VISIBILITY_STRING)\n            .put(ProjectState.class, MAP_PROJECT_STATE_STRING)\n            .put(ProjectClearingState.class, MAP_PROJECT_CLEARING_STATE_STRING)\n            .put(CheckStatus.class,MAP_CHECK_STATUS_STRING)\n            .put(VerificationState.class, MAP_VERIFICATION_STATUS_STRING)\n            .put(VulnerabilityRatingForProject.class, MAP_VULNERABILITY_RATING_FOR_PROJECT_STRING)\n            .put(ECCStatus.class, MAP_ECC_STATUS_STRING)\n            .put(DocumentType.class, MAP_DOCUMENT_TYPE_STRING)\n            .build()", "var_name": "MAP_ENUMTYPE_MAP"}, {"original_string": "public static final ImmutableMap<Class<? extends TEnum>, Map<? extends TEnum, String>>\n            MAP_ENUMTYPE_SHORT_STRING_MAP = ImmutableMap.<Class<? extends TEnum>, Map<? extends TEnum, String>>builder()\n            .put(AttachmentType.class, MAP_ATTACHMENT_TYPE_SHORT_STRING)\n            .build();", "modifier": "public static final", "type": "ImmutableMap<Class<? extends TEnum>, Map<? extends TEnum, String>>", "declarator": "MAP_ENUMTYPE_SHORT_STRING_MAP = ImmutableMap.<Class<? extends TEnum>, Map<? extends TEnum, String>>builder()\n            .put(AttachmentType.class, MAP_ATTACHMENT_TYPE_SHORT_STRING)\n            .build()", "var_name": "MAP_ENUMTYPE_SHORT_STRING_MAP"}], "methods": [{"identifier": "ThriftEnumUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ThriftEnumUtils()", "full_signature": "private  ThriftEnumUtils()", "class_method_signature": "ThriftEnumUtils.ThriftEnumUtils()", "testcase": false, "constructor": true}, {"identifier": "enumToString", "parameters": "(TEnum value)", "modifiers": "public static", "return": "String", "signature": "String enumToString(TEnum value)", "full_signature": "public static String enumToString(TEnum value)", "class_method_signature": "ThriftEnumUtils.enumToString(TEnum value)", "testcase": false, "constructor": false}, {"identifier": "stringToEnum", "parameters": "(String in, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T stringToEnum(String in, Class<T> clazz)", "full_signature": "public static T stringToEnum(String in, Class<T> clazz)", "class_method_signature": "ThriftEnumUtils.stringToEnum(String in, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "enumByString", "parameters": "(String in, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T enumByString(String in, Class<T> clazz)", "full_signature": "public static T enumByString(String in, Class<T> clazz)", "class_method_signature": "ThriftEnumUtils.enumByString(String in, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "enumToShortString", "parameters": "(TEnum value)", "modifiers": "public static", "return": "String", "signature": "String enumToShortString(TEnum value)", "full_signature": "public static String enumToShortString(TEnum value)", "class_method_signature": "ThriftEnumUtils.enumToShortString(TEnum value)", "testcase": false, "constructor": false}, {"identifier": "enumByShortString", "parameters": "(String in, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T enumByShortString(String in, Class<T> clazz)", "full_signature": "public static T enumByShortString(String in, Class<T> clazz)", "class_method_signature": "ThriftEnumUtils.enumByShortString(String in, Class<T> clazz)", "testcase": false, "constructor": false}], "file": "libraries/lib-datahandler/src/main/java/org/eclipse/sw360/datahandler/common/ThriftEnumUtils.java"}, "focal_method": {"identifier": "enumToString", "parameters": "(TEnum value)", "modifiers": "public static", "return": "String", "body": "public static String enumToString(TEnum value) {\n\n        String out = \"\";\n        if (value != null) {\n            out = MAP_ENUMTYPE_MAP.get(value.getClass()).get(value);\n        }\n        return out;\n    }", "signature": "String enumToString(TEnum value)", "full_signature": "public static String enumToString(TEnum value)", "class_method_signature": "ThriftEnumUtils.enumToString(TEnum value)", "testcase": false, "constructor": false, "invocations": ["get", "get", "getClass"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}