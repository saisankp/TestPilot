{"test_class": {"identifier": "DateValueConverterTest", "superclass": "extends ValueConverterTestCase<OffsetDateTime>", "interfaces": "", "fields": [{"original_string": "private ValueFactory vf = SimpleValueFactory.getInstance();", "modifier": "private", "type": "ValueFactory", "declarator": "vf = SimpleValueFactory.getInstance()", "var_name": "vf"}], "file": "rdf-orm/com.mobi.rdf.orm/src/test/java/com/mobi/rdf/orm/conversion/impl/DateValueConverterTest.java"}, "test_case": {"identifier": "convertTypeReturnsCorrectDatatype", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertTypeReturnsCorrectDatatype() {\n        OffsetDateTime expected = OffsetDateTime.now();\n        Value value = valueConverter.convertType(expected, null);\n        assertEquals(((Literal) value).getDatatype(), vf.createIRI(\"http://www.w3.org/2001/XMLSchema#dateTime\"));\n    }", "signature": "void convertTypeReturnsCorrectDatatype()", "full_signature": "@Test public void convertTypeReturnsCorrectDatatype()", "class_method_signature": "DateValueConverterTest.convertTypeReturnsCorrectDatatype()", "testcase": true, "constructor": false, "invocations": ["now", "convertType", "assertEquals", "getDatatype", "createIRI"]}, "focal_class": {"identifier": "DateValueConverter", "superclass": "extends AbstractValueConverter<OffsetDateTime>", "interfaces": "", "fields": [], "methods": [{"identifier": "DateValueConverter", "parameters": "()", "modifiers": "public", "return": "", "signature": " DateValueConverter()", "full_signature": "public  DateValueConverter()", "class_method_signature": "DateValueConverter.DateValueConverter()", "testcase": false, "constructor": true}, {"identifier": "convertValue", "parameters": "(final Value value, final Thing thing,\n            final Class<? extends OffsetDateTime> desiredType)", "modifiers": "@Override public", "return": "OffsetDateTime", "signature": "OffsetDateTime convertValue(final Value value, final Thing thing,\n            final Class<? extends OffsetDateTime> desiredType)", "full_signature": "@Override public OffsetDateTime convertValue(final Value value, final Thing thing,\n            final Class<? extends OffsetDateTime> desiredType)", "class_method_signature": "DateValueConverter.convertValue(final Value value, final Thing thing,\n            final Class<? extends OffsetDateTime> desiredType)", "testcase": false, "constructor": false}, {"identifier": "convertType", "parameters": "(OffsetDateTime type, Thing thing)", "modifiers": "@Override public", "return": "Value", "signature": "Value convertType(OffsetDateTime type, Thing thing)", "full_signature": "@Override public Value convertType(OffsetDateTime type, Thing thing)", "class_method_signature": "DateValueConverter.convertType(OffsetDateTime type, Thing thing)", "testcase": false, "constructor": false}], "file": "rdf-orm/com.mobi.rdf.orm/src/main/java/com/mobi/rdf/orm/conversion/impl/DateValueConverter.java"}, "focal_method": {"identifier": "convertType", "parameters": "(OffsetDateTime type, Thing thing)", "modifiers": "@Override public", "return": "Value", "body": "@Override\n    public Value convertType(OffsetDateTime type, Thing thing) throws ValueConversionException {\n        try {\n            return getValueFactory(thing).createLiteral(type);\n        } catch (Exception e) {\n            throw new ValueConversionException(\"Issue converting calendar into Value\", e);\n        }\n    }", "signature": "Value convertType(OffsetDateTime type, Thing thing)", "full_signature": "@Override public Value convertType(OffsetDateTime type, Thing thing)", "class_method_signature": "DateValueConverter.convertType(OffsetDateTime type, Thing thing)", "testcase": false, "constructor": false, "invocations": ["createLiteral", "getValueFactory"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}