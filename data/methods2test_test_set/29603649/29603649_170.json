{"test_class": {"identifier": "JsonSchemaCheckerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SCHEMA = \"schema\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMA = \"schema\"", "var_name": "SCHEMA"}, {"original_string": "private static final String LOG_IF_VALIDATION_FAILED = \"logIfValidationFailed\";", "modifier": "private static final", "type": "String", "declarator": "LOG_IF_VALIDATION_FAILED = \"logIfValidationFailed\"", "var_name": "LOG_IF_VALIDATION_FAILED"}, {"original_string": "private WilmaHttpRequest request;", "modifier": "private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "private ParameterList parameters;", "modifier": "private", "type": "ParameterList", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private JsonSchemaChecker underTest;", "modifier": "private", "type": "JsonSchemaChecker", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/json/JsonSchemaCheckerTest.java"}, "test_case": {"identifier": "testCheckConditionShouldFailWhenRequestIsNotJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckConditionShouldFailWhenRequestIsNotJson() {\n        givenExpectations(\"JsonSchemaCheckerTestSchema.json\", \"false\");\n        givenWilmaRequest(\"<request><name>Wilma</name><age>2></age></request>\");\n\n        boolean matches = underTest.checkCondition(request, parameters);\n\n        assertFalse(matches);\n    }", "signature": "void testCheckConditionShouldFailWhenRequestIsNotJson()", "full_signature": "@Test public void testCheckConditionShouldFailWhenRequestIsNotJson()", "class_method_signature": "JsonSchemaCheckerTest.testCheckConditionShouldFailWhenRequestIsNotJson()", "testcase": true, "constructor": false, "invocations": ["givenExpectations", "givenWilmaRequest", "checkCondition", "assertFalse"]}, "focal_class": {"identifier": "JsonSchemaChecker", "superclass": "", "interfaces": "implements ConditionChecker", "fields": [{"original_string": "private static final String SCHEMA = \"schema\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMA = \"schema\"", "var_name": "SCHEMA"}, {"original_string": "private static final String IS_SCHEMA_VOLATILE = \"isSchemaVolatile\";", "modifier": "private static final", "type": "String", "declarator": "IS_SCHEMA_VOLATILE = \"isSchemaVolatile\"", "var_name": "IS_SCHEMA_VOLATILE"}, {"original_string": "private static Map<String, Schema> schemaMap = new ConcurrentHashMap<>();", "modifier": "private static", "type": "Map<String, Schema>", "declarator": "schemaMap = new ConcurrentHashMap<>()", "var_name": "schemaMap"}, {"original_string": "@Autowired\n    private StubResourcePathProvider stubResourcePathProvider;", "modifier": "@Autowired\n    private", "type": "StubResourcePathProvider", "declarator": "stubResourcePathProvider", "var_name": "stubResourcePathProvider"}], "methods": [{"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "class_method_signature": "JsonSchemaChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "testcase": false, "constructor": false}, {"identifier": "readTemplateAsJsonSchemaFromFileSystem", "parameters": "(final String jsonSchemaName)", "modifiers": "private", "return": "Schema", "signature": "Schema readTemplateAsJsonSchemaFromFileSystem(final String jsonSchemaName)", "full_signature": "private Schema readTemplateAsJsonSchemaFromFileSystem(final String jsonSchemaName)", "class_method_signature": "JsonSchemaChecker.readTemplateAsJsonSchemaFromFileSystem(final String jsonSchemaName)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/json/JsonSchemaChecker.java"}, "focal_method": {"identifier": "checkCondition", "parameters": "(final WilmaHttpRequest request, final ParameterList parameters)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters) {\n        boolean result = true;\n        String schemaString = parameters.get(SCHEMA);\n        String isSchemaVolatileString = parameters.get(IS_SCHEMA_VOLATILE);\n        boolean isSchemaVolatile = isSchemaVolatileString == null || isSchemaVolatileString.compareToIgnoreCase(\"true\") == 0;\n\n        Schema jsonSchema;\n        try {\n            if (!isSchemaVolatile && schemaMap.containsKey(schemaString)) {\n                jsonSchema = schemaMap.get(schemaString);\n            } else {  //either volatile or schema is not yet loaded\n                jsonSchema = readTemplateAsJsonSchemaFromFileSystem(schemaString);\n                if (!isSchemaVolatile) {\n                    schemaMap.put(schemaString, jsonSchema);\n                }\n            }\n        } catch (Exception e) {\n            throw new StubConfigJsonSchemaException(\"Cannot load: \" + schemaString + \" as Json Schema to check the messages, pls fix the configuration.\");\n        }\n\n        JSONObject jsonToBeValidated = null;\n        try {\n            InputStream stream = new ByteArrayInputStream(request.getBody().getBytes(StandardCharsets.UTF_8.name()));\n            jsonToBeValidated = new JSONObject(new JSONTokener(stream));\n        } catch (JSONException | IOException e) {\n            //it is not a valid Json file\n            result = false;\n        }\n\n        if (result) {\n            try {\n                jsonSchema.validate(jsonToBeValidated);\n            } catch (ValidationException e) {\n                //it is not a good Json file\n                result = false;\n            }\n        }\n        return result;\n    }", "signature": "boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "full_signature": "@Override public boolean checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "class_method_signature": "JsonSchemaChecker.checkCondition(final WilmaHttpRequest request, final ParameterList parameters)", "testcase": false, "constructor": false, "invocations": ["get", "get", "compareToIgnoreCase", "containsKey", "get", "readTemplateAsJsonSchemaFromFileSystem", "put", "getBytes", "getBody", "name", "validate"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}