{"test_class": {"identifier": "DefaultFutureTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AtomicInteger index = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "index = new AtomicInteger()", "var_name": "index"}], "file": "dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/exchange/support/DefaultFutureTest.java"}, "test_case": {"identifier": "newFuture", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void newFuture() {\n        DefaultFuture future = defaultFuture(3000);\n        Assertions.assertNotNull(future, \"new future return null\");\n    }", "signature": "void newFuture()", "full_signature": "@Test public void newFuture()", "class_method_signature": "DefaultFutureTest.newFuture()", "testcase": true, "constructor": false, "invocations": ["defaultFuture", "assertNotNull"]}, "focal_class": {"identifier": "DefaultFuture", "superclass": "extends CompletableFuture<Object>", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultFuture.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultFuture.class)", "var_name": "logger"}, {"original_string": "private static final Map<Long, Channel> CHANNELS = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<Long, Channel>", "declarator": "CHANNELS = new ConcurrentHashMap<>()", "var_name": "CHANNELS"}, {"original_string": "private static final Map<Long, DefaultFuture> FUTURES = new ConcurrentHashMap<>();", "modifier": "private static final", "type": "Map<Long, DefaultFuture>", "declarator": "FUTURES = new ConcurrentHashMap<>()", "var_name": "FUTURES"}, {"original_string": "public static final Timer TIME_OUT_TIMER = new HashedWheelTimer(\n            new NamedThreadFactory(\"dubbo-future-timeout\", true),\n            30,\n            TimeUnit.MILLISECONDS);", "modifier": "public static final", "type": "Timer", "declarator": "TIME_OUT_TIMER = new HashedWheelTimer(\n            new NamedThreadFactory(\"dubbo-future-timeout\", true),\n            30,\n            TimeUnit.MILLISECONDS)", "var_name": "TIME_OUT_TIMER"}, {"original_string": "private final Long id;", "modifier": "private final", "type": "Long", "declarator": "id", "var_name": "id"}, {"original_string": "private final Channel channel;", "modifier": "private final", "type": "Channel", "declarator": "channel", "var_name": "channel"}, {"original_string": "private final Request request;", "modifier": "private final", "type": "Request", "declarator": "request", "var_name": "request"}, {"original_string": "private final int timeout;", "modifier": "private final", "type": "int", "declarator": "timeout", "var_name": "timeout"}, {"original_string": "private final long start = System.currentTimeMillis();", "modifier": "private final", "type": "long", "declarator": "start = System.currentTimeMillis()", "var_name": "start"}, {"original_string": "private volatile long sent;", "modifier": "private volatile", "type": "long", "declarator": "sent", "var_name": "sent"}, {"original_string": "private Timeout timeoutCheckTask;", "modifier": "private", "type": "Timeout", "declarator": "timeoutCheckTask", "var_name": "timeoutCheckTask"}, {"original_string": "private ExecutorService executor;", "modifier": "private", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}], "methods": [{"identifier": "getExecutor", "parameters": "()", "modifiers": "public", "return": "ExecutorService", "signature": "ExecutorService getExecutor()", "full_signature": "public ExecutorService getExecutor()", "class_method_signature": "DefaultFuture.getExecutor()", "testcase": false, "constructor": false}, {"identifier": "setExecutor", "parameters": "(ExecutorService executor)", "modifiers": "public", "return": "void", "signature": "void setExecutor(ExecutorService executor)", "full_signature": "public void setExecutor(ExecutorService executor)", "class_method_signature": "DefaultFuture.setExecutor(ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "DefaultFuture", "parameters": "(Channel channel, Request request, int timeout)", "modifiers": "private", "return": "", "signature": " DefaultFuture(Channel channel, Request request, int timeout)", "full_signature": "private  DefaultFuture(Channel channel, Request request, int timeout)", "class_method_signature": "DefaultFuture.DefaultFuture(Channel channel, Request request, int timeout)", "testcase": false, "constructor": true}, {"identifier": "timeoutCheck", "parameters": "(DefaultFuture future)", "modifiers": "private static", "return": "void", "signature": "void timeoutCheck(DefaultFuture future)", "full_signature": "private static void timeoutCheck(DefaultFuture future)", "class_method_signature": "DefaultFuture.timeoutCheck(DefaultFuture future)", "testcase": false, "constructor": false}, {"identifier": "newFuture", "parameters": "(Channel channel, Request request, int timeout, ExecutorService executor)", "modifiers": "public static", "return": "DefaultFuture", "signature": "DefaultFuture newFuture(Channel channel, Request request, int timeout, ExecutorService executor)", "full_signature": "public static DefaultFuture newFuture(Channel channel, Request request, int timeout, ExecutorService executor)", "class_method_signature": "DefaultFuture.newFuture(Channel channel, Request request, int timeout, ExecutorService executor)", "testcase": false, "constructor": false}, {"identifier": "getFuture", "parameters": "(long id)", "modifiers": "public static", "return": "DefaultFuture", "signature": "DefaultFuture getFuture(long id)", "full_signature": "public static DefaultFuture getFuture(long id)", "class_method_signature": "DefaultFuture.getFuture(long id)", "testcase": false, "constructor": false}, {"identifier": "hasFuture", "parameters": "(Channel channel)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasFuture(Channel channel)", "full_signature": "public static boolean hasFuture(Channel channel)", "class_method_signature": "DefaultFuture.hasFuture(Channel channel)", "testcase": false, "constructor": false}, {"identifier": "sent", "parameters": "(Channel channel, Request request)", "modifiers": "public static", "return": "void", "signature": "void sent(Channel channel, Request request)", "full_signature": "public static void sent(Channel channel, Request request)", "class_method_signature": "DefaultFuture.sent(Channel channel, Request request)", "testcase": false, "constructor": false}, {"identifier": "closeChannel", "parameters": "(Channel channel)", "modifiers": "public static", "return": "void", "signature": "void closeChannel(Channel channel)", "full_signature": "public static void closeChannel(Channel channel)", "class_method_signature": "DefaultFuture.closeChannel(Channel channel)", "testcase": false, "constructor": false}, {"identifier": "received", "parameters": "(Channel channel, Response response)", "modifiers": "public static", "return": "void", "signature": "void received(Channel channel, Response response)", "full_signature": "public static void received(Channel channel, Response response)", "class_method_signature": "DefaultFuture.received(Channel channel, Response response)", "testcase": false, "constructor": false}, {"identifier": "received", "parameters": "(Channel channel, Response response, boolean timeout)", "modifiers": "public static", "return": "void", "signature": "void received(Channel channel, Response response, boolean timeout)", "full_signature": "public static void received(Channel channel, Response response, boolean timeout)", "class_method_signature": "DefaultFuture.received(Channel channel, Response response, boolean timeout)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(boolean mayInterruptIfRunning)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean cancel(boolean mayInterruptIfRunning)", "full_signature": "@Override public boolean cancel(boolean mayInterruptIfRunning)", "class_method_signature": "DefaultFuture.cancel(boolean mayInterruptIfRunning)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cancel()", "full_signature": "public void cancel()", "class_method_signature": "DefaultFuture.cancel()", "testcase": false, "constructor": false}, {"identifier": "doReceived", "parameters": "(Response res)", "modifiers": "private", "return": "void", "signature": "void doReceived(Response res)", "full_signature": "private void doReceived(Response res)", "class_method_signature": "DefaultFuture.doReceived(Response res)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getId()", "full_signature": "private long getId()", "class_method_signature": "DefaultFuture.getId()", "testcase": false, "constructor": false}, {"identifier": "getChannel", "parameters": "()", "modifiers": "private", "return": "Channel", "signature": "Channel getChannel()", "full_signature": "private Channel getChannel()", "class_method_signature": "DefaultFuture.getChannel()", "testcase": false, "constructor": false}, {"identifier": "isSent", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSent()", "full_signature": "private boolean isSent()", "class_method_signature": "DefaultFuture.isSent()", "testcase": false, "constructor": false}, {"identifier": "getRequest", "parameters": "()", "modifiers": "public", "return": "Request", "signature": "Request getRequest()", "full_signature": "public Request getRequest()", "class_method_signature": "DefaultFuture.getRequest()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getTimeout()", "full_signature": "private int getTimeout()", "class_method_signature": "DefaultFuture.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "doSent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void doSent()", "full_signature": "private void doSent()", "class_method_signature": "DefaultFuture.doSent()", "testcase": false, "constructor": false}, {"identifier": "getTimeoutMessage", "parameters": "(boolean scan)", "modifiers": "private", "return": "String", "signature": "String getTimeoutMessage(boolean scan)", "full_signature": "private String getTimeoutMessage(boolean scan)", "class_method_signature": "DefaultFuture.getTimeoutMessage(boolean scan)", "testcase": false, "constructor": false}, {"identifier": "getRequestWithoutData", "parameters": "()", "modifiers": "private", "return": "Request", "signature": "Request getRequestWithoutData()", "full_signature": "private Request getRequestWithoutData()", "class_method_signature": "DefaultFuture.getRequestWithoutData()", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/exchange/support/DefaultFuture.java"}, "focal_method": {"identifier": "newFuture", "parameters": "(Channel channel, Request request, int timeout, ExecutorService executor)", "modifiers": "public static", "return": "DefaultFuture", "body": "public static DefaultFuture newFuture(Channel channel, Request request, int timeout, ExecutorService executor) {\n        final DefaultFuture future = new DefaultFuture(channel, request, timeout);\n        future.setExecutor(executor);\n        // ThreadlessExecutor needs to hold the waiting future in case of circuit return.\n        if (executor instanceof ThreadlessExecutor) {\n            ((ThreadlessExecutor) executor).setWaitingFuture(future);\n        }\n        // timeout check\n        timeoutCheck(future);\n        return future;\n    }", "signature": "DefaultFuture newFuture(Channel channel, Request request, int timeout, ExecutorService executor)", "full_signature": "public static DefaultFuture newFuture(Channel channel, Request request, int timeout, ExecutorService executor)", "class_method_signature": "DefaultFuture.newFuture(Channel channel, Request request, int timeout, ExecutorService executor)", "testcase": false, "constructor": false, "invocations": ["setExecutor", "setWaitingFuture", "timeoutCheck"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}