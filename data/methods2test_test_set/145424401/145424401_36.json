{"test_class": {"identifier": "DirUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "shared/src/test/java/org/eclipse/steady/shared/util/DirUtilTest.java"}, "test_case": {"identifier": "testGetAllFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetAllFiles() {\n    final File[] f1 = DirUtil.getAllFiles(new File(\"./src/test/resources/foo\"), null);\n    assertEquals(4, f1.length);\n\n    final File[] f2 =\n        DirUtil.getAllFiles(new File(\"./src/test/resources/foo\"), new String[] {\"bar\"});\n    assertEquals(3, f2.length);\n\n    final File[] f3 =\n        DirUtil.getAllFiles(new File(\"./src/test/resources/foo\"), new String[] {\"bar\", \"baz\"});\n    assertEquals(2, f3.length);\n  }", "signature": "void testGetAllFiles()", "full_signature": "@Test public void testGetAllFiles()", "class_method_signature": "DirUtilTest.testGetAllFiles()", "testcase": true, "constructor": false, "invocations": ["getAllFiles", "assertEquals", "getAllFiles", "assertEquals", "getAllFiles", "assertEquals"]}, "focal_class": {"identifier": "DirUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}], "methods": [{"identifier": "containsFile", "parameters": "(final File _dir, final String _filename)", "modifiers": "public static final", "return": "boolean", "signature": "boolean containsFile(final File _dir, final String _filename)", "full_signature": "public static final boolean containsFile(final File _dir, final String _filename)", "class_method_signature": "DirUtil.containsFile(final File _dir, final String _filename)", "testcase": false, "constructor": false}, {"identifier": "getAllFiles", "parameters": "(final File _dir, final String[] _ignore)", "modifiers": "public static", "return": "File[]", "signature": "File[] getAllFiles(final File _dir, final String[] _ignore)", "full_signature": "public static File[] getAllFiles(final File _dir, final String[] _ignore)", "class_method_signature": "DirUtil.getAllFiles(final File _dir, final String[] _ignore)", "testcase": false, "constructor": false}, {"identifier": "unzip", "parameters": "(final File _zip, File _out_dir)", "modifiers": "public static", "return": "File", "signature": "File unzip(final File _zip, File _out_dir)", "full_signature": "public static File unzip(final File _zip, File _out_dir)", "class_method_signature": "DirUtil.unzip(final File _zip, File _out_dir)", "testcase": false, "constructor": false}, {"identifier": "isBelowDestinationPath", "parameters": "(Path _destination_path, String _entry_name)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBelowDestinationPath(Path _destination_path, String _entry_name)", "full_signature": "public static boolean isBelowDestinationPath(Path _destination_path, String _entry_name)", "class_method_signature": "DirUtil.isBelowDestinationPath(Path _destination_path, String _entry_name)", "testcase": false, "constructor": false}, {"identifier": "filterSubpaths", "parameters": "(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "modifiers": "public static", "return": "Set<Path>", "signature": "Set<Path> filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "full_signature": "public static Set<Path> filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "class_method_signature": "DirUtil.filterSubpaths(\n      Set<Path> _to_be_filtered, Set<Path> _filter, boolean _keep_subpaths)", "testcase": false, "constructor": false}, {"identifier": "getDigest", "parameters": "(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "modifiers": "public static", "return": "String", "signature": "String getDigest(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "full_signature": "public static String getDigest(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "class_method_signature": "DirUtil.getDigest(final File _dir, final String[] _ignore, DigestAlgorithm _alg)", "testcase": false, "constructor": false}], "file": "shared/src/main/java/org/eclipse/steady/shared/util/DirUtil.java"}, "focal_method": {"identifier": "getAllFiles", "parameters": "(final File _dir, final String[] _ignore)", "modifiers": "public static", "return": "File[]", "body": "public static File[] getAllFiles(final File _dir, final String[] _ignore) {\n    if (!_dir.isDirectory())\n      throw new IllegalArgumentException(\"[\" + _dir + \"] is not a directory\");\n\n    final List<File> list = new ArrayList<File>();\n\n    final File[] files = _dir.listFiles();\n    if (files != null) {\n      Arrays.sort(files);\n      outer:\n      for (final File file : files) {\n        if (file.isDirectory()) {\n          list.addAll(Arrays.asList(DirUtil.getAllFiles(file, _ignore)));\n          list.add(file);\n        } else {\n          if (_ignore != null) {\n            for (String ext : _ignore) {\n              if (file.getName().endsWith(ext)) {\n                continue outer;\n              }\n            }\n          }\n          list.add(file);\n        }\n      }\n    }\n    return list.toArray(new File[list.size()]);\n  }", "signature": "File[] getAllFiles(final File _dir, final String[] _ignore)", "full_signature": "public static File[] getAllFiles(final File _dir, final String[] _ignore)", "class_method_signature": "DirUtil.getAllFiles(final File _dir, final String[] _ignore)", "testcase": false, "constructor": false, "invocations": ["isDirectory", "listFiles", "sort", "isDirectory", "addAll", "asList", "getAllFiles", "add", "endsWith", "getName", "add", "toArray", "size"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}