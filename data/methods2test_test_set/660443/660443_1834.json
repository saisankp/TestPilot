{"test_class": {"identifier": "AtomHybridizationDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsaratomic/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/AtomHybridizationDescriptorTest.java"}, "test_case": {"identifier": "testBug1701073", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBug1701073() throws Exception {\n\n        String[] smiles = new String[]{\"C1CCCC=2[C]1(C(=O)NN2)C\", \"C1CCCC=2[C]1(C(=O)NN2)O\",\n                \"C[Si](C)(C)[CH](Br)CC(F)(Br)F\", \"c1(ccc(cc1)O)C#N\", \"CCN(CC)C#CC#CC(=O)OC\",\n                \"C(#CN1CCCCC1)[Sn](C)(C)C\", \"c1([As+](c2ccccc2)(c2ccccc2)C)ccccc1.[I-]\",\n                \"c1(noc(n1)CCC(=O)N(CC)CC)c1ccc(cc1)C\", \"c1c(c(ccc1)O)/C=N/CCCC\", \"c1(ccc(cc1)C#Cc1ccc(cc1)C#C)OC\"};\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol;\n        Iterator<IAtom> atoms;\n\n        for (String smile : smiles) {\n            mol = sp.parseSmiles(smile);\n            addImplicitHydrogens(mol);\n            AtomContainerManipulator.convertImplicitToExplicitHydrogens(mol);\n            atoms = mol.atoms().iterator();\n            while (atoms.hasNext()) {\n                IAtom atom = atoms.next();\n                ((IntegerResult) descriptor.calculate(atom, mol).getValue()).intValue();\n            }\n        }\n\n    }", "signature": "void testBug1701073()", "full_signature": "@Test public void testBug1701073()", "class_method_signature": "AtomHybridizationDescriptorTest.testBug1701073()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "addImplicitHydrogens", "convertImplicitToExplicitHydrogens", "iterator", "atoms", "hasNext", "next", "intValue", "getValue", "calculate"]}, "focal_class": {"identifier": "AtomHybridizationDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "implements IAtomicDescriptor", "fields": [{"original_string": "AtomTypeManipulator atman   = null;", "modifier": "", "type": "AtomTypeManipulator", "declarator": "atman   = null", "var_name": "atman"}, {"original_string": "IAtom               atom    = null;", "modifier": "", "type": "IAtom", "declarator": "atom    = null", "var_name": "atom"}, {"original_string": "IAtomType           matched = null;", "modifier": "", "type": "IAtomType", "declarator": "matched = null", "var_name": "matched"}], "methods": [{"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "AtomHybridizationDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "AtomHybridizationDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "AtomHybridizationDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "AtomHybridizationDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "AtomHybridizationDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "AtomHybridizationDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "AtomHybridizationDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "AtomHybridizationDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsaratomic/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/AtomHybridizationDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer container) {\n        try {\n            matched = CDKAtomTypeMatcher.getInstance(atom.getBuilder()).findMatchingAtomType(container, atom);\n        } catch (CDKException e) {\n            return getDummyDescriptorValue(e);\n        }\n        if (matched == null) {\n            int atnum = container.indexOf(atom);\n            return getDummyDescriptorValue(new CDKException(\"The matched atom type was null (atom number \" + atnum\n                    + \") \" + atom.getSymbol()));\n        }\n        Hybridization atomHybridization = matched.getHybridization();\n        IntegerResult result = new IntegerResult(atomHybridization == null ? 0 : atomHybridization.ordinal());\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), result,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "AtomHybridizationDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["findMatchingAtomType", "getInstance", "getBuilder", "getDummyDescriptorValue", "indexOf", "getDummyDescriptorValue", "getSymbol", "getHybridization", "ordinal", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}