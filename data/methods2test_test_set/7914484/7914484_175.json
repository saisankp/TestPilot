{"test_class": {"identifier": "XPathParamMethodArgumentResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CONTENTS = \"<root><child><text>text</text><number>42</number></child></root>\";", "modifier": "private static final", "type": "String", "declarator": "CONTENTS = \"<root><child><text>text</text><number>42</number></child></root>\"", "var_name": "CONTENTS"}, {"original_string": "private XPathParamMethodArgumentResolver resolver;", "modifier": "private", "type": "XPathParamMethodArgumentResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private MethodParameter booleanParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "booleanParameter", "var_name": "booleanParameter"}, {"original_string": "private MethodParameter doubleParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "doubleParameter", "var_name": "doubleParameter"}, {"original_string": "private MethodParameter nodeParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "nodeParameter", "var_name": "nodeParameter"}, {"original_string": "private MethodParameter nodeListParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "nodeListParameter", "var_name": "nodeListParameter"}, {"original_string": "private MethodParameter stringParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "stringParameter", "var_name": "stringParameter"}, {"original_string": "private MethodParameter convertedParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "convertedParameter", "var_name": "convertedParameter"}, {"original_string": "private MethodParameter unsupportedParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "unsupportedParameter", "var_name": "unsupportedParameter"}, {"original_string": "private MethodParameter namespaceMethodParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "namespaceMethodParameter", "var_name": "namespaceMethodParameter"}, {"original_string": "private MethodParameter namespaceClassParameter;", "modifier": "private", "type": "MethodParameter", "declarator": "namespaceClassParameter", "var_name": "namespaceClassParameter"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/server/endpoint/adapter/method/XPathParamMethodArgumentResolverTest.java"}, "test_case": {"identifier": "supportsParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void supportsParameter() {\n\t\tassertTrue(\"resolver does not support boolean parameter\", resolver.supportsParameter(booleanParameter));\n\t\tassertTrue(\"resolver does not support double parameter\", resolver.supportsParameter(doubleParameter));\n\t\tassertTrue(\"resolver does not support Node parameter\", resolver.supportsParameter(nodeParameter));\n\t\tassertTrue(\"resolver does not support NodeList parameter\", resolver.supportsParameter(nodeListParameter));\n\t\tassertTrue(\"resolver does not support String parameter\", resolver.supportsParameter(stringParameter));\n\t\tassertTrue(\"resolver does not support String parameter\", resolver.supportsParameter(convertedParameter));\n\t\tassertFalse(\"resolver supports parameter without @XPathParam\", resolver.supportsParameter(unsupportedParameter));\n\t}", "signature": "void supportsParameter()", "full_signature": "@Test public void supportsParameter()", "class_method_signature": "XPathParamMethodArgumentResolverTest.supportsParameter()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "supportsParameter", "assertTrue", "supportsParameter", "assertTrue", "supportsParameter", "assertTrue", "supportsParameter", "assertTrue", "supportsParameter", "assertTrue", "supportsParameter", "assertFalse", "supportsParameter"]}, "focal_class": {"identifier": "XPathParamMethodArgumentResolver", "superclass": "", "interfaces": "implements MethodArgumentResolver", "fields": [{"original_string": "private final XPathFactory xpathFactory = createXPathFactory();", "modifier": "private final", "type": "XPathFactory", "declarator": "xpathFactory = createXPathFactory()", "var_name": "xpathFactory"}, {"original_string": "private TransformerHelper transformerHelper = new TransformerHelper();", "modifier": "private", "type": "TransformerHelper", "declarator": "transformerHelper = new TransformerHelper()", "var_name": "transformerHelper"}, {"original_string": "private ConversionService conversionService = new DefaultConversionService();", "modifier": "private", "type": "ConversionService", "declarator": "conversionService = new DefaultConversionService()", "var_name": "conversionService"}], "methods": [{"identifier": "setConversionService", "parameters": "(ConversionService conversionService)", "modifiers": "public", "return": "void", "signature": "void setConversionService(ConversionService conversionService)", "full_signature": "public void setConversionService(ConversionService conversionService)", "class_method_signature": "XPathParamMethodArgumentResolver.setConversionService(ConversionService conversionService)", "testcase": false, "constructor": false}, {"identifier": "setTransformerHelper", "parameters": "(TransformerHelper transformerHelper)", "modifiers": "public", "return": "void", "signature": "void setTransformerHelper(TransformerHelper transformerHelper)", "full_signature": "public void setTransformerHelper(TransformerHelper transformerHelper)", "class_method_signature": "XPathParamMethodArgumentResolver.setTransformerHelper(TransformerHelper transformerHelper)", "testcase": false, "constructor": false}, {"identifier": "supportsParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsParameter(MethodParameter parameter)", "full_signature": "@Override public boolean supportsParameter(MethodParameter parameter)", "class_method_signature": "XPathParamMethodArgumentResolver.supportsParameter(MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "resolveArgument", "parameters": "(MessageContext messageContext, MethodParameter parameter)", "modifiers": "@Override public", "return": "Object", "signature": "Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "full_signature": "@Override public Object resolveArgument(MessageContext messageContext, MethodParameter parameter)", "class_method_signature": "XPathParamMethodArgumentResolver.resolveArgument(MessageContext messageContext, MethodParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "getReturnType", "parameters": "(Class<?> parameterType)", "modifiers": "private", "return": "QName", "signature": "QName getReturnType(Class<?> parameterType)", "full_signature": "private QName getReturnType(Class<?> parameterType)", "class_method_signature": "XPathParamMethodArgumentResolver.getReturnType(Class<?> parameterType)", "testcase": false, "constructor": false}, {"identifier": "createXPath", "parameters": "()", "modifiers": "private", "return": "XPath", "signature": "XPath createXPath()", "full_signature": "private XPath createXPath()", "class_method_signature": "XPathParamMethodArgumentResolver.createXPath()", "testcase": false, "constructor": false}, {"identifier": "getRootElement", "parameters": "(Source source)", "modifiers": "private", "return": "Element", "signature": "Element getRootElement(Source source)", "full_signature": "private Element getRootElement(Source source)", "class_method_signature": "XPathParamMethodArgumentResolver.getRootElement(Source source)", "testcase": false, "constructor": false}, {"identifier": "createXPathFactory", "parameters": "()", "modifiers": "protected", "return": "XPathFactory", "signature": "XPathFactory createXPathFactory()", "full_signature": "protected XPathFactory createXPathFactory()", "class_method_signature": "XPathParamMethodArgumentResolver.createXPathFactory()", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/server/endpoint/adapter/method/XPathParamMethodArgumentResolver.java"}, "focal_method": {"identifier": "supportsParameter", "parameters": "(MethodParameter parameter)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean supportsParameter(MethodParameter parameter) {\n\t\tif (parameter.getParameterAnnotation(XPathParam.class) == null) {\n\t\t\treturn false;\n\t\t}\n\t\tClass<?> parameterType = parameter.getParameterType();\n\t\tif (Boolean.class.equals(parameterType) || Boolean.TYPE.equals(parameterType) || Double.class.equals(parameterType)\n\t\t\t\t|| Double.TYPE.equals(parameterType) || Node.class.isAssignableFrom(parameterType)\n\t\t\t\t|| NodeList.class.isAssignableFrom(parameterType) || String.class.isAssignableFrom(parameterType)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn conversionService.canConvert(String.class, parameterType);\n\t\t}\n\t}", "signature": "boolean supportsParameter(MethodParameter parameter)", "full_signature": "@Override public boolean supportsParameter(MethodParameter parameter)", "class_method_signature": "XPathParamMethodArgumentResolver.supportsParameter(MethodParameter parameter)", "testcase": false, "constructor": false, "invocations": ["getParameterAnnotation", "getParameterType", "equals", "equals", "equals", "equals", "isAssignableFrom", "isAssignableFrom", "isAssignableFrom", "canConvert"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}