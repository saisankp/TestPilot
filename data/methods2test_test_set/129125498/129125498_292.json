{"test_class": {"identifier": "HaystackConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private HaystackConfig haystackConfig;", "modifier": "@InjectMocks\n    private", "type": "HaystackConfig", "declarator": "haystackConfig", "var_name": "haystackConfig"}, {"original_string": "@Mock\n    private HaystackProperties haystackProperties;", "modifier": "@Mock\n    private", "type": "HaystackProperties", "declarator": "haystackProperties", "var_name": "haystackProperties"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/tracing/HaystackConfigTest.java"}, "test_case": {"identifier": "testHaystackConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHaystackConfig() {\n        assertNotNull(haystackConfig.initTracer(haystackProperties));\n    }", "signature": "void testHaystackConfig()", "full_signature": "@Test public void testHaystackConfig()", "class_method_signature": "HaystackConfigTest.testHaystackConfig()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "initTracer"]}, "focal_class": {"identifier": "HaystackConfig", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "initTracer", "parameters": "(HaystackProperties haystackProperties)", "modifiers": "@Bean public", "return": "Tracer", "signature": "Tracer initTracer(HaystackProperties haystackProperties)", "full_signature": "@Bean public Tracer initTracer(HaystackProperties haystackProperties)", "class_method_signature": "HaystackConfig.initTracer(HaystackProperties haystackProperties)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/tracing/HaystackConfig.java"}, "focal_method": {"identifier": "initTracer", "parameters": "(HaystackProperties haystackProperties)", "modifiers": "@Bean public", "return": "Tracer", "body": "@Bean\n    public Tracer initTracer(HaystackProperties haystackProperties) {\n        val collectorHeaders = new HashMap<String, String>();\n        collectorHeaders.put(\"X-Api-Key\", haystackProperties.getApiKey());\n        collectorHeaders.put(\"X-Client-Id\", haystackProperties.getClientId());\n        val metricsRegistry = new NoopMetricsRegistry();\n\n        val dispatcher = new RemoteDispatcher.Builder(\n                metricsRegistry,\n                new HttpCollectorClient(haystackProperties.getEndpoint(), collectorHeaders)\n        ).withBlockingQueueLimit(haystackProperties.getQueueSize())\n                .withShutdownTimeoutMillis(haystackProperties.getShutdownInterval())\n                .withFlushIntervalMillis(haystackProperties.getFlushInterval())\n                .withExecutorThreadCount(haystackProperties.getThreadCount())\n                .build();\n\n        val httpPropagator = new TextMapPropagator.Builder()\n                .withKeyConvention(new DefaultKeyConvention())\n                .withURLCodex()\n                .build();\n\n        return new Tracer.Builder(metricsRegistry, haystackProperties.getClientId(), dispatcher)\n                .withFormat(\n                        Format.Builtin.HTTP_HEADERS, (Extractor<TextMap>) httpPropagator\n                ).withFormat(Format.Builtin.HTTP_HEADERS, (Injector<TextMap>) httpPropagator)\n                .withDualSpanMode()\n                .withIdGenerator(new RandomUUIDGenerator())\n                .build();\n    }", "signature": "Tracer initTracer(HaystackProperties haystackProperties)", "full_signature": "@Bean public Tracer initTracer(HaystackProperties haystackProperties)", "class_method_signature": "HaystackConfig.initTracer(HaystackProperties haystackProperties)", "testcase": false, "constructor": false, "invocations": ["put", "getApiKey", "put", "getClientId", "build", "withExecutorThreadCount", "withFlushIntervalMillis", "withShutdownTimeoutMillis", "withBlockingQueueLimit", "getEndpoint", "getQueueSize", "getShutdownInterval", "getFlushInterval", "getThreadCount", "build", "withURLCodex", "withKeyConvention", "build", "withIdGenerator", "withDualSpanMode", "withFormat", "withFormat", "getClientId"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}