{"test_class": {"identifier": "MetadataSyncImportHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n    MetadataImportService metadataImportService;", "modifier": "@Mock", "type": "MetadataImportService", "declarator": "metadataImportService", "var_name": "metadataImportService"}, {"original_string": "@Mock\n    MetadataVersionDelegate metadataVersionDelegate;", "modifier": "@Mock", "type": "MetadataVersionDelegate", "declarator": "metadataVersionDelegate", "var_name": "metadataVersionDelegate"}, {"original_string": "@Mock\n    private RenderService renderService;", "modifier": "@Mock\n    private", "type": "RenderService", "declarator": "renderService", "var_name": "renderService"}, {"original_string": "@InjectMocks\n    private MetadataSyncImportHandler metadataSyncImportHandler;", "modifier": "@InjectMocks\n    private", "type": "MetadataSyncImportHandler", "declarator": "metadataSyncImportHandler", "var_name": "metadataSyncImportHandler"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private MetadataVersion metadataVersion;", "modifier": "private", "type": "MetadataVersion", "declarator": "metadataVersion", "var_name": "metadataVersion"}, {"original_string": "private String expectedMetadataSnapshot;", "modifier": "private", "type": "String", "declarator": "expectedMetadataSnapshot", "var_name": "expectedMetadataSnapshot"}, {"original_string": "private MetadataSyncParams syncParams;", "modifier": "private", "type": "MetadataSyncParams", "declarator": "syncParams", "var_name": "syncParams"}, {"original_string": "private ImportReport importReport;", "modifier": "private", "type": "ImportReport", "declarator": "importReport", "var_name": "importReport"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/sync/MetadataSyncImportHandlerTest.java"}, "test_case": {"identifier": "testShouldThrowExceptionWhenNoImportParams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShouldThrowExceptionWhenNoImportParams()\n    {\n        syncParams.setVersion( metadataVersion );\n        syncParams.setImportParams( null );\n\n        expectedException.expect( MetadataSyncServiceException.class );\n        expectedException.expectMessage( \"MetadataImportParams for the Sync cant be null.\" );\n\n        metadataSyncImportHandler.importMetadata( syncParams, expectedMetadataSnapshot );\n    }", "signature": "void testShouldThrowExceptionWhenNoImportParams()", "full_signature": "@Test public void testShouldThrowExceptionWhenNoImportParams()", "class_method_signature": "MetadataSyncImportHandlerTest.testShouldThrowExceptionWhenNoImportParams()", "testcase": true, "constructor": false, "invocations": ["setVersion", "setImportParams", "expect", "expectMessage", "importMetadata"]}, "focal_class": {"identifier": "MetadataSyncImportHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private MetadataVersionDelegate metadataVersionDelegate;", "modifier": "@Autowired\n    private", "type": "MetadataVersionDelegate", "declarator": "metadataVersionDelegate", "var_name": "metadataVersionDelegate"}, {"original_string": "@Autowired\n    private RenderService renderService;", "modifier": "@Autowired\n    private", "type": "RenderService", "declarator": "renderService", "var_name": "renderService"}, {"original_string": "@Autowired\n    private MetadataImportService metadataImportService;", "modifier": "@Autowired\n    private", "type": "MetadataImportService", "declarator": "metadataImportService", "var_name": "metadataImportService"}], "methods": [{"identifier": "importMetadata", "parameters": "( MetadataSyncParams syncParams, String versionSnapShot )", "modifiers": "public", "return": "MetadataSyncSummary", "signature": "MetadataSyncSummary importMetadata( MetadataSyncParams syncParams, String versionSnapShot )", "full_signature": "public MetadataSyncSummary importMetadata( MetadataSyncParams syncParams, String versionSnapShot )", "class_method_signature": "MetadataSyncImportHandler.importMetadata( MetadataSyncParams syncParams, String versionSnapShot )", "testcase": false, "constructor": false}, {"identifier": "handleImportReport", "parameters": "( ImportReport importReport, MetadataVersion version )", "modifiers": "private", "return": "boolean", "signature": "boolean handleImportReport( ImportReport importReport, MetadataVersion version )", "full_signature": "private boolean handleImportReport( ImportReport importReport, MetadataVersion version )", "class_method_signature": "MetadataSyncImportHandler.handleImportReport( ImportReport importReport, MetadataVersion version )", "testcase": false, "constructor": false}, {"identifier": "isBestEffort", "parameters": "( MetadataVersion version, Status importStatus )", "modifiers": "private", "return": "boolean", "signature": "boolean isBestEffort( MetadataVersion version, Status importStatus )", "full_signature": "private boolean isBestEffort( MetadataVersion version, Status importStatus )", "class_method_signature": "MetadataSyncImportHandler.isBestEffort( MetadataVersion version, Status importStatus )", "testcase": false, "constructor": false}, {"identifier": "parseClassListMap", "parameters": "(\n        String metadataVersionSnapshot )", "modifiers": "private", "return": "Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>>", "signature": "Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> parseClassListMap(\n        String metadataVersionSnapshot )", "full_signature": "private Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> parseClassListMap(\n        String metadataVersionSnapshot )", "class_method_signature": "MetadataSyncImportHandler.parseClassListMap(\n        String metadataVersionSnapshot )", "testcase": false, "constructor": false}, {"identifier": "getMetadataVersion", "parameters": "( MetadataSyncParams syncParams )", "modifiers": "private", "return": "MetadataVersion", "signature": "MetadataVersion getMetadataVersion( MetadataSyncParams syncParams )", "full_signature": "private MetadataVersion getMetadataVersion( MetadataSyncParams syncParams )", "class_method_signature": "MetadataSyncImportHandler.getMetadataVersion( MetadataSyncParams syncParams )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/sync/MetadataSyncImportHandler.java"}, "focal_method": {"identifier": "importMetadata", "parameters": "( MetadataSyncParams syncParams, String versionSnapShot )", "modifiers": "public", "return": "MetadataSyncSummary", "body": "public MetadataSyncSummary importMetadata( MetadataSyncParams syncParams, String versionSnapShot )\n    {\n        MetadataVersion version = getMetadataVersion( syncParams );\n        MetadataImportParams importParams = syncParams.getImportParams();\n        MetadataSyncSummary metadataSyncSummary = new MetadataSyncSummary();\n\n        if ( importParams == null )\n        {\n            throw new MetadataSyncServiceException( \"MetadataImportParams for the Sync cant be null.\" );\n        }\n\n        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> classListMap = parseClassListMap(\n            versionSnapShot );\n\n        if ( classListMap == null )\n        {\n            throw new MetadataSyncServiceException( \"ClassListMap can't be null\" );\n        }\n\n        // Job configurations should not be imported from any source\n        // (neither by normal metadata import nor by sync).\n        classListMap.remove( JobConfiguration.class );\n        importParams.setObjects( classListMap );\n\n        ImportReport importReport = null;\n\n        try\n        {\n            importReport = metadataImportService.importMetadata( importParams );\n\n        }\n        catch ( Exception e )\n        {\n            String message = \"Exception occurred while trying to import the metadata. \" + e.getMessage();\n            log.error( message,e );\n            throw new MetadataSyncImportException( message,e );\n        }\n\n        boolean addNewVersion = handleImportReport( importReport, version );\n\n        if ( addNewVersion )\n        {\n            try\n            {\n                metadataVersionDelegate.addNewMetadataVersion( version );\n            }\n            catch ( MetadataVersionServiceException e )\n            {\n                throw new MetadataSyncServiceException( e.getMessage(), e );\n            }\n\n        }\n\n        metadataSyncSummary.setImportReport( importReport );\n        metadataSyncSummary.setMetadataVersion( version );\n\n        return metadataSyncSummary;\n    }", "signature": "MetadataSyncSummary importMetadata( MetadataSyncParams syncParams, String versionSnapShot )", "full_signature": "public MetadataSyncSummary importMetadata( MetadataSyncParams syncParams, String versionSnapShot )", "class_method_signature": "MetadataSyncImportHandler.importMetadata( MetadataSyncParams syncParams, String versionSnapShot )", "testcase": false, "constructor": false, "invocations": ["getMetadataVersion", "getImportParams", "parseClassListMap", "remove", "setObjects", "importMetadata", "getMessage", "error", "handleImportReport", "addNewMetadataVersion", "getMessage", "setImportReport", "setMetadataVersion"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}