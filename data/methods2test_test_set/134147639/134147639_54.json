{"test_class": {"identifier": "JWSFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JWSFactory target = new JWSFactory();", "modifier": "private final", "type": "JWSFactory", "declarator": "target = new JWSFactory()", "var_name": "target"}], "file": "webauthn4j-core/src/test/java/com/webauthn4j/data/jws/JWSFactoryTest.java"}, "test_case": {"identifier": "create_with_signature_test", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void create_with_signature_test() {\n        JWSHeader header = new JWSHeader(JWAIdentifier.ES256, TestAttestationUtil.load3tierTestAttestationCertificatePath());\n        Payload payload = new Payload();\n        byte[] signature = new byte[32];\n        JWS<Payload> jws = target.create(header, payload, signature);\n        assertThat(jws).isNotNull();\n    }", "signature": "void create_with_signature_test()", "full_signature": "@Test void create_with_signature_test()", "class_method_signature": "JWSFactoryTest.create_with_signature_test()", "testcase": true, "constructor": false, "invocations": ["load3tierTestAttestationCertificatePath", "create", "isNotNull", "assertThat"]}, "focal_class": {"identifier": "JWSFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JsonConverter jsonConverter;", "modifier": "private final", "type": "JsonConverter", "declarator": "jsonConverter", "var_name": "jsonConverter"}], "methods": [{"identifier": "JWSFactory", "parameters": "(ObjectConverter objectConverter)", "modifiers": "public", "return": "", "signature": " JWSFactory(ObjectConverter objectConverter)", "full_signature": "public  JWSFactory(ObjectConverter objectConverter)", "class_method_signature": "JWSFactory.JWSFactory(ObjectConverter objectConverter)", "testcase": false, "constructor": true}, {"identifier": "JWSFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " JWSFactory()", "full_signature": "public  JWSFactory()", "class_method_signature": "JWSFactory.JWSFactory()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(JWSHeader header, T payload, PrivateKey privateKey)", "modifiers": "public", "return": "JWS<T>", "signature": "JWS<T> create(JWSHeader header, T payload, PrivateKey privateKey)", "full_signature": "public JWS<T> create(JWSHeader header, T payload, PrivateKey privateKey)", "class_method_signature": "JWSFactory.create(JWSHeader header, T payload, PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(JWSHeader header, T payload, byte[] signature)", "modifiers": "public", "return": "JWS<T>", "signature": "JWS<T> create(JWSHeader header, T payload, byte[] signature)", "full_signature": "public JWS<T> create(JWSHeader header, T payload, byte[] signature)", "class_method_signature": "JWSFactory.create(JWSHeader header, T payload, byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String value, Class<T> payloadType)", "modifiers": "public", "return": "JWS<T>", "signature": "JWS<T> parse(String value, Class<T> payloadType)", "full_signature": "public JWS<T> parse(String value, Class<T> payloadType)", "class_method_signature": "JWSFactory.parse(String value, Class<T> payloadType)", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/data/jws/JWSFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(JWSHeader header, T payload, PrivateKey privateKey)", "modifiers": "public", "return": "JWS<T>", "body": "public <T extends Serializable> JWS<T> create(JWSHeader header, T payload, PrivateKey privateKey) {\n        String headerString = Base64UrlUtil.encodeToString(jsonConverter.writeValueAsString(header).getBytes(StandardCharsets.UTF_8));\n        String payloadString = Base64UrlUtil.encodeToString(jsonConverter.writeValueAsString(payload).getBytes(StandardCharsets.UTF_8));\n        String signedData = headerString + \".\" + payloadString;\n        Signature signatureObj = SignatureUtil.createSignature(header.getAlg().getJcaName());\n        try {\n            signatureObj.initSign(privateKey);\n            signatureObj.update(signedData.getBytes());\n            byte[] derSignature = signatureObj.sign();\n            byte[] jwsSignature = JWSSignatureUtil.convertDerSignatureToJwsSignature(derSignature);\n            return new JWS<>(header, headerString, payload, payloadString, jwsSignature);\n        } catch (InvalidKeyException | SignatureException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }", "signature": "JWS<T> create(JWSHeader header, T payload, PrivateKey privateKey)", "full_signature": "public JWS<T> create(JWSHeader header, T payload, PrivateKey privateKey)", "class_method_signature": "JWSFactory.create(JWSHeader header, T payload, PrivateKey privateKey)", "testcase": false, "constructor": false, "invocations": ["encodeToString", "getBytes", "writeValueAsString", "encodeToString", "getBytes", "writeValueAsString", "createSignature", "getJcaName", "getAlg", "initSign", "update", "getBytes", "sign", "convertDerSignatureToJwsSignature"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}