{"test_class": {"identifier": "WaitForSeRemovalTest", "superclass": "extends CoreBaseTest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WaitForSeRemovalTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WaitForSeRemovalTest.class)", "var_name": "logger"}, {"original_string": "final String PLUGIN_NAME = \"WaitForSeRemovalJobExecutorTestP\";", "modifier": "final", "type": "String", "declarator": "PLUGIN_NAME = \"WaitForSeRemovalJobExecutorTestP\"", "var_name": "PLUGIN_NAME"}, {"original_string": "final String READER_NAME = \"WaitForSeRemovalJobExecutorTest\";", "modifier": "final", "type": "String", "declarator": "READER_NAME = \"WaitForSeRemovalJobExecutorTest\"", "var_name": "READER_NAME"}, {"original_string": "static final Integer X_TIMES = 5;", "modifier": "static final", "type": "Integer", "declarator": "X_TIMES = 5", "var_name": "X_TIMES"}], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/seproxy/plugin/reader/WaitForSeRemovalTest.java"}, "test_case": {"identifier": "waitForRemoval_SINGLESHOT", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void waitForRemoval_SINGLESHOT() throws Exception {\n    /*\n     * ------------ input polling mode is STOP SE has been removed within timeout\n     */\n    AbstractObservableLocalReader r = AbsSmartInsertionTheadedReaderTest.getMock(READER_NAME);\n    WaitForSeRemoval waitForSeRemoval = new WaitForSeRemoval(r);\n    doReturn(ObservableReader.PollingMode.SINGLESHOT).when(r).getPollingMode();\n    doNothing().when(r).processSeRemoved();\n\n    /* test */\n    waitForSeRemoval.onActivate();\n\n    waitForSeRemoval.onEvent(AbstractObservableLocalReader.InternalEvent.SE_REMOVED);\n\n    /* Assert */\n    verify(r, times(1)).switchState(WAIT_FOR_START_DETECTION);\n  }", "signature": "void waitForRemoval_SINGLESHOT()", "full_signature": "@Test public void waitForRemoval_SINGLESHOT()", "class_method_signature": "WaitForSeRemovalTest.waitForRemoval_SINGLESHOT()", "testcase": true, "constructor": false, "invocations": ["getMock", "getPollingMode", "when", "doReturn", "processSeRemoved", "when", "doNothing", "onActivate", "onEvent", "switchState", "verify", "times"]}, "focal_class": {"identifier": "WaitForSeRemoval", "superclass": "extends AbstractObservableState", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(WaitForSeRemoval.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(WaitForSeRemoval.class)", "var_name": "logger"}], "methods": [{"identifier": "WaitForSeRemoval", "parameters": "(AbstractObservableLocalReader reader)", "modifiers": "public", "return": "", "signature": " WaitForSeRemoval(AbstractObservableLocalReader reader)", "full_signature": "public  WaitForSeRemoval(AbstractObservableLocalReader reader)", "class_method_signature": "WaitForSeRemoval.WaitForSeRemoval(AbstractObservableLocalReader reader)", "testcase": false, "constructor": true}, {"identifier": "WaitForSeRemoval", "parameters": "(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "modifiers": "public", "return": "", "signature": " WaitForSeRemoval(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "full_signature": "public  WaitForSeRemoval(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "class_method_signature": "WaitForSeRemoval.WaitForSeRemoval(\n      AbstractObservableLocalReader reader,\n      AbstractMonitoringJob monitoringJob,\n      ExecutorService executorService)", "testcase": false, "constructor": true}, {"identifier": "onEvent", "parameters": "(AbstractObservableLocalReader.InternalEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void onEvent(AbstractObservableLocalReader.InternalEvent event)", "full_signature": "@Override public void onEvent(AbstractObservableLocalReader.InternalEvent event)", "class_method_signature": "WaitForSeRemoval.onEvent(AbstractObservableLocalReader.InternalEvent event)", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/seproxy/plugin/reader/WaitForSeRemoval.java"}, "focal_method": {"identifier": "onEvent", "parameters": "(AbstractObservableLocalReader.InternalEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void onEvent(AbstractObservableLocalReader.InternalEvent event) {\n    if (logger.isTraceEnabled()) {\n      logger.trace(\n          \"[{}] onEvent => Event {} received in currentState {}\", reader.getName(), event, state);\n    }\n    /*\n     * Process InternalEvent\n     */\n    switch (event) {\n      case SE_REMOVED:\n        // the SE has been removed, we close all channels and return to\n        // the currentState of waiting\n        // for insertion\n        // We notify the application of the SE_REMOVED event.\n        reader.processSeRemoved();\n        if (reader.getPollingMode() == ObservableReader.PollingMode.REPEATING) {\n          switchState(MonitoringState.WAIT_FOR_SE_INSERTION);\n        } else {\n          switchState(MonitoringState.WAIT_FOR_START_DETECTION);\n        }\n        break;\n\n      case STOP_DETECT:\n        reader.processSeRemoved();\n        switchState(MonitoringState.WAIT_FOR_START_DETECTION);\n        break;\n\n      default:\n        logger.warn(\n            \"[{}] Ignore =>  Event {} received in currentState {}\", reader.getName(), event, state);\n        break;\n    }\n  }", "signature": "void onEvent(AbstractObservableLocalReader.InternalEvent event)", "full_signature": "@Override public void onEvent(AbstractObservableLocalReader.InternalEvent event)", "class_method_signature": "WaitForSeRemoval.onEvent(AbstractObservableLocalReader.InternalEvent event)", "testcase": false, "constructor": false, "invocations": ["isTraceEnabled", "trace", "getName", "processSeRemoved", "getPollingMode", "switchState", "switchState", "processSeRemoved", "switchState", "warn", "getName"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}