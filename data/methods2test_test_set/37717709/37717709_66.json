{"test_class": {"identifier": "TestPromptStrategy", "superclass": "extends TagStrategyTestBase", "interfaces": "implements SynthesizedOutputListener", "fields": [{"original_string": "private SpeakableText queuedSpeakable;", "modifier": "private", "type": "SpeakableText", "declarator": "queuedSpeakable", "var_name": "queuedSpeakable"}], "file": "org.jvoicexml.profile.vxml21/src/test/java/org/jvoicexml/profile/vxml21/tagstrategy/TestPromptStrategy.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception, JVoiceXMLEvent {\n        final Block block = createBlock();\n        final Prompt prompt = block.appendChild(Prompt.class);\n        prompt.addText(\"When you hear the name of the movie you want, just say it.\");\n        final Audio audio1 = prompt.appendChild(Audio.class);\n        audio1.setSrc(\"godfather.wav\");\n        audio1.addText(\"the godfather\");\n        final Audio audio2 = prompt.appendChild(Audio.class);\n        audio2.setSrc(\"high_fidelity.wav\");\n        audio2.addText(\"high fidelity\");\n        final Audio audio3 = prompt.appendChild(Audio.class);\n        audio3.setSrc(\"raiders.wav\");\n        audio3.addText(\"raiders of the lost ark\");\n\n        setSystemOutputListener(this);\n        final PromptStrategy strategy = new PromptStrategy();\n        final ImplementationPlatform platform = getImplementationPlatform();\n        platform.startPromptQueuing(30000);\n        executeTagStrategy(prompt, strategy);\n        final CallControlProperties props = new CallControlProperties();\n        platform.renderPrompts(null, null, props);\n\n        final SsmlDocument ssml = new SsmlDocument();\n        final Speak speak = ssml.getSpeak();\n        speak.addText(\"When you hear the name of the movie you want, just say it.\");\n        final Audio ssmlAudio1 = speak.appendChild(Audio.class);\n        ssmlAudio1.setSrc(\"godfather.wav\");\n        ssmlAudio1.addText(\"the godfather\");\n        final Audio ssmlAudio2 = speak.appendChild(Audio.class);\n        ssmlAudio2.setSrc(\"high_fidelity.wav\");\n        ssmlAudio2.addText(\"high fidelity\");\n        final Audio ssmlAudio3 = speak.appendChild(Audio.class);\n        ssmlAudio3.setSrc(\"raiders.wav\");\n        ssmlAudio3.addText(\"raiders of the lost ark\");\n\n        final SpeakableSsmlText speakable = new SpeakableSsmlText(ssml);\n        Assert.assertEquals(speakable, queuedSpeakable);\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "TestPromptStrategy.testExecute()", "testcase": true, "constructor": false, "invocations": ["createBlock", "appendChild", "addText", "appendChild", "setSrc", "addText", "appendChild", "setSrc", "addText", "appendChild", "setSrc", "addText", "setSystemOutputListener", "getImplementationPlatform", "startPromptQueuing", "executeTagStrategy", "renderPrompts", "getSpeak", "addText", "appendChild", "setSrc", "addText", "appendChild", "setSrc", "addText", "appendChild", "setSrc", "addText", "assertEquals"]}, "focal_class": {"identifier": "PromptStrategy", "superclass": "extends AbstractTagStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(ValueStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(ValueStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private static final Collection<String> EVAL_ATTRIBUTES;", "modifier": "private static final", "type": "Collection<String>", "declarator": "EVAL_ATTRIBUTES", "var_name": "EVAL_ATTRIBUTES"}, {"original_string": "private boolean bargein;", "modifier": "private", "type": "boolean", "declarator": "bargein", "var_name": "bargein"}], "methods": [{"identifier": "PromptStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " PromptStrategy()", "full_signature": "  PromptStrategy()", "class_method_signature": "PromptStrategy.PromptStrategy()", "testcase": false, "constructor": true}, {"identifier": "getEvalAttributes", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getEvalAttributes()", "full_signature": "public Collection<String> getEvalAttributes()", "class_method_signature": "PromptStrategy.getEvalAttributes()", "testcase": false, "constructor": false}, {"identifier": "validateAttributes", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "void", "signature": "void validateAttributes(final DataModel model)", "full_signature": "@Override public void validateAttributes(final DataModel model)", "class_method_signature": "PromptStrategy.validateAttributes(final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "@Override public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "PromptStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}, {"identifier": "queueSpeakable", "parameters": "(final VoiceXmlInterpreterContext context,\n            final FormInterpretationAlgorithm fia,\n            final SpeakableSsmlText speakable)", "modifiers": "private", "return": "void", "signature": "void queueSpeakable(final VoiceXmlInterpreterContext context,\n            final FormInterpretationAlgorithm fia,\n            final SpeakableSsmlText speakable)", "full_signature": "private void queueSpeakable(final VoiceXmlInterpreterContext context,\n            final FormInterpretationAlgorithm fia,\n            final SpeakableSsmlText speakable)", "class_method_signature": "PromptStrategy.queueSpeakable(final VoiceXmlInterpreterContext context,\n            final FormInterpretationAlgorithm fia,\n            final SpeakableSsmlText speakable)", "testcase": false, "constructor": false}, {"identifier": "getBargeInType", "parameters": "()", "modifiers": "private", "return": "BargeInType", "signature": "BargeInType getBargeInType()", "full_signature": "private BargeInType getBargeInType()", "class_method_signature": "PromptStrategy.getBargeInType()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getTimeout()", "full_signature": "private long getTimeout()", "class_method_signature": "PromptStrategy.getTimeout()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.profile.vxml21/src/main/java/org/jvoicexml/profile/vxml21/tagstrategy/PromptStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node) throws JVoiceXMLEvent {\n        final Object cond = getAttribute(Prompt.ATTRIBUTE_COND);\n        if (Boolean.FALSE.equals(cond)) {\n            LOGGER.info(\"cond '\" + cond\n                    + \"' evaluates to false: skipping prompt\");\n            return;\n        }\n\n        // Create an SSML document from the prompt node\n        // Make sure to cast to prompt to access the correct constructor since\n        // the VoiceXmlNode constructor does not keep namespaces\n        final Prompt prompt = (Prompt) node;\n        final Profile profile = context.getProfile();\n        final SsmlParser parser = new VoiceXml21SsmlParser(profile, prompt,\n                context);\n        final SsmlDocument document;\n        try {\n            document = parser.getDocument();\n        } catch (javax.xml.parsers.ParserConfigurationException pce) {\n            throw new BadFetchError(\"Error converting to SSML!\", pce);\n        }\n\n        // Set the locale\n        final Speak speak = document.getSpeak();\n        final String lang = (String) getAttribute(Prompt.ATTRIBUTE_XML_LANG);\n        if (lang != null) {\n            speak.setXmlLang(lang);\n        }\n        final BargeInType bargeInType = getBargeInType();\n        final SpeakableSsmlText speakable = new SpeakableSsmlText(document,\n                bargein, bargeInType);\n        if (!speakable.isSpeakableTextEmpty()) {\n            queueSpeakable(context, fia, speakable);\n        }\n    }", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "@Override public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "PromptStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false, "invocations": ["getAttribute", "equals", "info", "getProfile", "getDocument", "getSpeak", "getAttribute", "setXmlLang", "getBargeInType", "isSpeakableTextEmpty", "queueSpeakable"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}