{"test_class": {"identifier": "ElectronImpactNBEReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private final LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private final", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}, {"original_string": "private IChemObjectBuilder            builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/ElectronImpactNBEReactionTest.java"}, "test_case": {"identifier": "testInitiate_IAtomContainerSet_IAtomContainerSet", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testInitiate_IAtomContainerSet_IAtomContainerSet() throws Exception {\n        /* ionize(>C=O): C=CCC(=O)CC -> C=CCC(=O*)CC , set the reactive center */\n\n        IAtomContainer reactant = builder.newInstance(IAtomContainer.class);//Smiles(\"C=CCC(=O)CC\")\n        reactant.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        reactant.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        reactant.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        reactant.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        reactant.addAtom(builder.newInstance(IAtom.class, \"O\"));\n        reactant.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        reactant.addAtom(builder.newInstance(IAtom.class, \"C\"));\n        reactant.addBond(0, 1, IBond.Order.DOUBLE);\n        reactant.addBond(1, 2, IBond.Order.SINGLE);\n        reactant.addBond(2, 3, IBond.Order.SINGLE);\n        reactant.addBond(3, 4, IBond.Order.DOUBLE);\n        reactant.addBond(3, 5, IBond.Order.SINGLE);\n        reactant.addBond(5, 6, IBond.Order.SINGLE);\n        addExplicitHydrogens(reactant);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(reactant);\n        lpcheck.saturate(reactant);\n\n        Iterator<IAtom> atoms = reactant.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atom = (IAtom) atoms.next();\n            if (reactant.getConnectedLonePairsCount(atom) > 0) {\n                atom.setFlag(CDKConstants.REACTIVE_CENTER, true);\n            }\n        }\n\n        IAtomContainerSet setOfReactants = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);\n        setOfReactants.addAtomContainer(reactant);\n\n        /* initiate */\n        makeSureAtomTypesAreRecognized(reactant);\n\n        IReactionProcess type = new ElectronImpactNBEReaction();\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.TRUE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(1, setOfReactions.getReactionCount());\n        Assert.assertEquals(1, setOfReactions.getReaction(0).getProductCount());\n\n        IAtomContainer molecule = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n        Assert.assertEquals(1, molecule.getAtom(4).getFormalCharge().intValue());\n        Assert.assertEquals(1, molecule.getConnectedSingleElectronsCount(molecule.getAtom(4)));\n\n        Assert.assertTrue(setOfReactions.getReaction(0).mappings().iterator().hasNext());\n\n    }", "signature": "void testInitiate_IAtomContainerSet_IAtomContainerSet()", "full_signature": "@Test @Override public void testInitiate_IAtomContainerSet_IAtomContainerSet()", "class_method_signature": "ElectronImpactNBEReactionTest.testInitiate_IAtomContainerSet_IAtomContainerSet()", "testcase": true, "constructor": false, "invocations": ["newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addAtom", "newInstance", "addBond", "addBond", "addBond", "addBond", "addBond", "addBond", "addExplicitHydrogens", "percieveAtomTypesAndConfigureAtoms", "saturate", "iterator", "atoms", "hasNext", "next", "getConnectedLonePairsCount", "setFlag", "newInstance", "getInstance", "addAtomContainer", "makeSureAtomTypesAreRecognized", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "assertEquals", "intValue", "getFormalCharge", "getAtom", "assertEquals", "getConnectedSingleElectronsCount", "getAtom", "assertTrue", "hasNext", "iterator", "mappings", "getReaction"]}, "focal_class": {"identifier": "ElectronImpactNBEReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(ElectronImpactNBEReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(ElectronImpactNBEReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "ElectronImpactNBEReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " ElectronImpactNBEReaction()", "full_signature": "public  ElectronImpactNBEReaction()", "class_method_signature": "ElectronImpactNBEReaction.ElectronImpactNBEReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "ElectronImpactNBEReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "ElectronImpactNBEReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "ElectronImpactNBEReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/ElectronImpactNBEReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: ElectronImpactNBEReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"ElectronImpactNBEReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"ElectronImpactNBEReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        Iterator<IAtom> atoms = reactant.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            if (atom.getFlag(CDKConstants.REACTIVE_CENTER) && reactant.getConnectedLonePairsCount(atom) > 0\n                    && reactant.getConnectedSingleElectronsCount(atom) == 0) {\n\n                ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                atomList.add(atom);\n                IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(IAtomContainerSet.class);\n                moleculeSet.addAtomContainer(reactant);\n                IReaction reaction = mechanism.initiate(moleculeSet, atomList, null);\n                if (reaction == null)\n                    continue;\n                else\n                    setOfReactions.addReaction(reaction);\n            }\n        }\n        return setOfReactions;\n\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "ElectronImpactNBEReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "atoms", "hasNext", "next", "getFlag", "getConnectedLonePairsCount", "getConnectedSingleElectronsCount", "add", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}