{"test_class": {"identifier": "ServletContextHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ServletContextImpl servletContext;", "modifier": "private", "type": "ServletContextImpl", "declarator": "servletContext", "var_name": "servletContext"}, {"original_string": "private ServletContextHelper servletContextHelper = new ServletContextHelper();", "modifier": "private", "type": "ServletContextHelper", "declarator": "servletContextHelper = new ServletContextHelper()", "var_name": "servletContextHelper"}], "file": "http/src/test/java/ro/polak/http/servlet/helper/ServletContextHelperTest.java"}, "test_case": {"identifier": "shouldNotResolveFirstServletMappingWhenNoMatchingElements", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotResolveFirstServletMappingWhenNoMatchingElements() {\n        ServletMapping servletMapping1 = new ServletMappingImpl(Pattern.compile(\"^/notmatching.*$\"), SampleServlet.class);\n\n        when(servletContext.getServletMappings()).thenReturn(Arrays.asList(servletMapping1));\n        assertThat(servletContextHelper.getResolvedServletMapping(servletContext, \"/context/somepath\"), is(nullValue()));\n    }", "signature": "void shouldNotResolveFirstServletMappingWhenNoMatchingElements()", "full_signature": "@Test public void shouldNotResolveFirstServletMappingWhenNoMatchingElements()", "class_method_signature": "ServletContextHelperTest.shouldNotResolveFirstServletMappingWhenNoMatchingElements()", "testcase": true, "constructor": false, "invocations": ["compile", "thenReturn", "when", "getServletMappings", "asList", "assertThat", "getResolvedServletMapping", "is", "nullValue"]}, "focal_class": {"identifier": "ServletContextHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getResolvedServletMapping", "parameters": "(final ServletContext servletContext, final String path)", "modifiers": "public", "return": "ServletMapping", "signature": "ServletMapping getResolvedServletMapping(final ServletContext servletContext, final String path)", "full_signature": "public ServletMapping getResolvedServletMapping(final ServletContext servletContext, final String path)", "class_method_signature": "ServletContextHelper.getResolvedServletMapping(final ServletContext servletContext, final String path)", "testcase": false, "constructor": false}, {"identifier": "getResolvedContext", "parameters": "(final List<ServletContextImpl> servletContexts, final String path)", "modifiers": "public", "return": "ServletContextImpl", "signature": "ServletContextImpl getResolvedContext(final List<ServletContextImpl> servletContexts, final String path)", "full_signature": "public ServletContextImpl getResolvedContext(final List<ServletContextImpl> servletContexts, final String path)", "class_method_signature": "ServletContextHelper.getResolvedContext(final List<ServletContextImpl> servletContexts, final String path)", "testcase": false, "constructor": false}, {"identifier": "getFilterMappingsForPath", "parameters": "(final ServletContext servletContext, final String path)", "modifiers": "public", "return": "List<FilterMapping>", "signature": "List<FilterMapping> getFilterMappingsForPath(final ServletContext servletContext, final String path)", "full_signature": "public List<FilterMapping> getFilterMappingsForPath(final ServletContext servletContext, final String path)", "class_method_signature": "ServletContextHelper.getFilterMappingsForPath(final ServletContext servletContext, final String path)", "testcase": false, "constructor": false}, {"identifier": "getPathInContext", "parameters": "(final ServletContext servletContext, final String path)", "modifiers": "private", "return": "String", "signature": "String getPathInContext(final ServletContext servletContext, final String path)", "full_signature": "private String getPathInContext(final ServletContext servletContext, final String path)", "class_method_signature": "ServletContextHelper.getPathInContext(final ServletContext servletContext, final String path)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/servlet/helper/ServletContextHelper.java"}, "focal_method": {"identifier": "getResolvedServletMapping", "parameters": "(final ServletContext servletContext, final String path)", "modifiers": "public", "return": "ServletMapping", "body": "public ServletMapping getResolvedServletMapping(final ServletContext servletContext, final String path) {\n        Objects.requireNonNull(servletContext);\n        for (ServletMapping servletMapping : servletContext.getServletMappings()) {\n            String inContextPath = getPathInContext(servletContext, path);\n            if (servletMapping.getUrlPattern().matcher(inContextPath).matches()) {\n                return servletMapping;\n            }\n        }\n\n        return null;\n    }", "signature": "ServletMapping getResolvedServletMapping(final ServletContext servletContext, final String path)", "full_signature": "public ServletMapping getResolvedServletMapping(final ServletContext servletContext, final String path)", "class_method_signature": "ServletContextHelper.getResolvedServletMapping(final ServletContext servletContext, final String path)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getServletMappings", "getPathInContext", "matches", "matcher", "getUrlPattern"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}