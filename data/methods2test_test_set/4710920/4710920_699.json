{"test_class": {"identifier": "AbstractZookeeperTransporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestingServer zkServer;", "modifier": "private", "type": "TestingServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private ZookeeperClient zookeeperClient;", "modifier": "private", "type": "ZookeeperClient", "declarator": "zookeeperClient", "var_name": "zookeeperClient"}, {"original_string": "private AbstractZookeeperTransporter abstractZookeeperTransporter;", "modifier": "private", "type": "AbstractZookeeperTransporter", "declarator": "abstractZookeeperTransporter", "var_name": "abstractZookeeperTransporter"}, {"original_string": "private int zkServerPort;", "modifier": "private", "type": "int", "declarator": "zkServerPort", "var_name": "zkServerPort"}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporterTest.java"}, "test_case": {"identifier": "testFetchAndUpdateZookeeperClientCache", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFetchAndUpdateZookeeperClientCache() throws Exception {\n        int zkServerPort2 = NetUtils.getAvailablePort();\n        TestingServer zkServer2 = new TestingServer(zkServerPort2, true);\n\n        int zkServerPort3 = NetUtils.getAvailablePort();\n        TestingServer zkServer3 = new TestingServer(zkServerPort3, true);\n\n        URL url = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort + \"/org.apache.dubbo.registry.RegistryService?backup=127.0.0.1:\" + zkServerPort3 + \",127.0.0.1:\" + zkServerPort2 + \"&application=metadatareport-local-xml-provider2&dubbo=2.0.2&interface=org.apache.dubbo.registry.RegistryService&pid=47418&specVersion=2.7.0-SNAPSHOT&timestamp=1547102428828\");\n        ZookeeperClient newZookeeperClient = abstractZookeeperTransporter.connect(url);\n        //just for connected\n        newZookeeperClient.getContent(\"/dubbo/test\");\n        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().size(), 3);\n        Assertions.assertEquals(abstractZookeeperTransporter.getZookeeperClientMap().get(\"127.0.0.1:\" + zkServerPort), newZookeeperClient);\n\n        URL url2 = URL.valueOf(\"zookeeper://127.0.0.1:\" + zkServerPort + \"/org.apache.dubbo.metadata.store.MetadataReport?address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n        checkFetchAndUpdateCacheNotNull(url2);\n        URL url3 = URL.valueOf(\"zookeeper://127.0.0.1:8778/org.apache.dubbo.metadata.store.MetadataReport?backup=127.0.0.1:\" + zkServerPort3 + \"&address=zookeeper://127.0.0.1:2181&application=metadatareport-local-xml-provider2&cycle-report=false&interface=org.apache.dubbo.metadata.store.MetadataReport&retry-period=4590&retry-times=23&sync-report=true\");\n        checkFetchAndUpdateCacheNotNull(url3);\n\n        zkServer2.stop();\n        zkServer3.stop();\n    }", "signature": "void testFetchAndUpdateZookeeperClientCache()", "full_signature": "@Test public void testFetchAndUpdateZookeeperClientCache()", "class_method_signature": "AbstractZookeeperTransporterTest.testFetchAndUpdateZookeeperClientCache()", "testcase": true, "constructor": false, "invocations": ["getAvailablePort", "getAvailablePort", "valueOf", "connect", "getContent", "assertEquals", "size", "getZookeeperClientMap", "assertEquals", "get", "getZookeeperClientMap", "valueOf", "checkFetchAndUpdateCacheNotNull", "valueOf", "checkFetchAndUpdateCacheNotNull", "stop", "stop"]}, "focal_class": {"identifier": "AbstractZookeeperTransporter", "superclass": "", "interfaces": "implements ZookeeperTransporter", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ZookeeperTransporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ZookeeperTransporter.class)", "var_name": "logger"}, {"original_string": "private final Map<String, ZookeeperClient> zookeeperClientMap = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, ZookeeperClient>", "declarator": "zookeeperClientMap = new ConcurrentHashMap<>()", "var_name": "zookeeperClientMap"}], "methods": [{"identifier": "connect", "parameters": "(URL url)", "modifiers": "@Override public", "return": "ZookeeperClient", "signature": "ZookeeperClient connect(URL url)", "full_signature": "@Override public ZookeeperClient connect(URL url)", "class_method_signature": "AbstractZookeeperTransporter.connect(URL url)", "testcase": false, "constructor": false}, {"identifier": "createZookeeperClient", "parameters": "(URL url)", "modifiers": "protected abstract", "return": "ZookeeperClient", "signature": "ZookeeperClient createZookeeperClient(URL url)", "full_signature": "protected abstract ZookeeperClient createZookeeperClient(URL url)", "class_method_signature": "AbstractZookeeperTransporter.createZookeeperClient(URL url)", "testcase": false, "constructor": false}, {"identifier": "fetchAndUpdateZookeeperClientCache", "parameters": "(List<String> addressList)", "modifiers": "", "return": "ZookeeperClient", "signature": "ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList)", "full_signature": " ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList)", "class_method_signature": "AbstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(List<String> addressList)", "testcase": false, "constructor": false}, {"identifier": "getURLBackupAddress", "parameters": "(URL url)", "modifiers": "", "return": "List<String>", "signature": "List<String> getURLBackupAddress(URL url)", "full_signature": " List<String> getURLBackupAddress(URL url)", "class_method_signature": "AbstractZookeeperTransporter.getURLBackupAddress(URL url)", "testcase": false, "constructor": false}, {"identifier": "writeToClientMap", "parameters": "(List<String> addressList, ZookeeperClient zookeeperClient)", "modifiers": "", "return": "void", "signature": "void writeToClientMap(List<String> addressList, ZookeeperClient zookeeperClient)", "full_signature": " void writeToClientMap(List<String> addressList, ZookeeperClient zookeeperClient)", "class_method_signature": "AbstractZookeeperTransporter.writeToClientMap(List<String> addressList, ZookeeperClient zookeeperClient)", "testcase": false, "constructor": false}, {"identifier": "toClientURL", "parameters": "(URL url)", "modifiers": "", "return": "URL", "signature": "URL toClientURL(URL url)", "full_signature": " URL toClientURL(URL url)", "class_method_signature": "AbstractZookeeperTransporter.toClientURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "getZookeeperClientMap", "parameters": "()", "modifiers": "", "return": "Map<String, ZookeeperClient>", "signature": "Map<String, ZookeeperClient> getZookeeperClientMap()", "full_signature": " Map<String, ZookeeperClient> getZookeeperClientMap()", "class_method_signature": "AbstractZookeeperTransporter.getZookeeperClientMap()", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/org/apache/dubbo/remoting/zookeeper/support/AbstractZookeeperTransporter.java"}, "focal_method": {"identifier": "fetchAndUpdateZookeeperClientCache", "parameters": "(List<String> addressList)", "modifiers": "", "return": "ZookeeperClient", "body": "ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList) {\n\n        ZookeeperClient zookeeperClient = null;\n        for (String address : addressList) {\n            if ((zookeeperClient = zookeeperClientMap.get(address)) != null && zookeeperClient.isConnected()) {\n                break;\n            }\n        }\n        if (zookeeperClient != null && zookeeperClient.isConnected()) {\n            writeToClientMap(addressList, zookeeperClient);\n        }\n        return zookeeperClient;\n    }", "signature": "ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList)", "full_signature": " ZookeeperClient fetchAndUpdateZookeeperClientCache(List<String> addressList)", "class_method_signature": "AbstractZookeeperTransporter.fetchAndUpdateZookeeperClientCache(List<String> addressList)", "testcase": false, "constructor": false, "invocations": ["get", "isConnected", "isConnected", "writeToClientMap"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}