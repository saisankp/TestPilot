{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Configuration mockConfiguration;", "modifier": "@Mock\n    private", "type": "Configuration", "declarator": "mockConfiguration", "var_name": "mockConfiguration"}, {"original_string": "private final String sep = File.separator;", "modifier": "private final", "type": "String", "declarator": "sep = File.separator", "var_name": "sep"}, {"original_string": "private final String localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep;", "modifier": "private final", "type": "String", "declarator": "localDataFolder =\n        System.getProperty(\"user.dir\") + sep\n            + \"src\" + sep\n            + \"test\" + sep\n            + \"resources\" + sep", "var_name": "localDataFolder"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/utils/games/UtilsTest.java"}, "test_case": {"identifier": "shouldConvertWindowsPath", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldConvertWindowsPath() {\n        Map<String, String> answers = Map.of(\n            \"/this/is/already/a/path\", \"/this/is/already/a/path\",\n            \"a\\\\windows\\\\path\", \"a/windows/path\"\n        );\n\n        for (Map.Entry<String, String> entry : answers.entrySet()) {\n            assertEquals(entry.getValue(), Utils.convertWindowsPath(entry.getKey()));\n        }\n    }", "signature": "void shouldConvertWindowsPath()", "full_signature": "@Test void shouldConvertWindowsPath()", "class_method_signature": "UtilsTest.shouldConvertWindowsPath()", "testcase": true, "constructor": false, "invocations": ["of", "entrySet", "assertEquals", "getValue", "convertWindowsPath", "getKey"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getInputStream", "parameters": "(final String resource)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getInputStream(final String resource)", "full_signature": "public static InputStream getInputStream(final String resource)", "class_method_signature": "Utils.getInputStream(final String resource)", "testcase": false, "constructor": false}, {"identifier": "getFilesFolder", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getFilesFolder()", "full_signature": "public static String getFilesFolder()", "class_method_signature": "Utils.getFilesFolder()", "testcase": false, "constructor": false}, {"identifier": "getBaseImagesDirectory", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File getBaseImagesDirectory()", "full_signature": "public static File getBaseImagesDirectory()", "class_method_signature": "Utils.getBaseImagesDirectory()", "testcase": false, "constructor": false}, {"identifier": "getImagesSubdirectory", "parameters": "(final String subdirectoryName)", "modifiers": "public static", "return": "File", "signature": "File getImagesSubdirectory(final String subdirectoryName)", "full_signature": "public static File getImagesSubdirectory(final String subdirectoryName)", "class_method_signature": "Utils.getImagesSubdirectory(final String subdirectoryName)", "testcase": false, "constructor": false}, {"identifier": "convertWindowsPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String convertWindowsPath(String path)", "full_signature": "public static String convertWindowsPath(String path)", "class_method_signature": "Utils.convertWindowsPath(String path)", "testcase": false, "constructor": false}, {"identifier": "isWindows", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isWindows()", "full_signature": "public static boolean isWindows()", "class_method_signature": "Utils.isWindows()", "testcase": false, "constructor": false}, {"identifier": "logSystemProperties", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void logSystemProperties()", "full_signature": "public static void logSystemProperties()", "class_method_signature": "Utils.logSystemProperties()", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/utils/games/Utils.java"}, "focal_method": {"identifier": "convertWindowsPath", "parameters": "(String path)", "modifiers": "public static", "return": "String", "body": "public static String convertWindowsPath(String path) {\n        String windowsPath = path;\n        windowsPath = windowsPath.replace(\"\\\\\", \"/\");\n        windowsPath = windowsPath.replaceAll(\"\\\\\\\\\", \"/\");\n        return windowsPath;\n    }", "signature": "String convertWindowsPath(String path)", "full_signature": "public static String convertWindowsPath(String path)", "class_method_signature": "Utils.convertWindowsPath(String path)", "testcase": false, "constructor": false, "invocations": ["replace", "replaceAll"]}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}