{"test_class": {"identifier": "RepeatingRunnableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EventSchedulerType DUMMY_SCHEDULER_TYPE = new EventSchedulerType() {};", "modifier": "private final", "type": "EventSchedulerType", "declarator": "DUMMY_SCHEDULER_TYPE = new EventSchedulerType() {}", "var_name": "DUMMY_SCHEDULER_TYPE"}, {"original_string": "private SimpleDiscreteEventScheduler simpleDiscreteEventScheduler;", "modifier": "private", "type": "SimpleDiscreteEventScheduler", "declarator": "simpleDiscreteEventScheduler", "var_name": "simpleDiscreteEventScheduler"}, {"original_string": "private ExceptionSwallowingEventExecutor exceptionSwallowingEventExecutor;", "modifier": "private", "type": "ExceptionSwallowingEventExecutor", "declarator": "exceptionSwallowingEventExecutor", "var_name": "exceptionSwallowingEventExecutor"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/event/scheduling/RepeatingRunnableTest.java"}, "test_case": {"identifier": "whenRunnableIsNotADamonEvent_theSchedulerKnowsItDoesNotHaveOnlyDamonEvents", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenRunnableIsNotADamonEvent_theSchedulerKnowsItDoesNotHaveOnlyDamonEvents() {\n        simpleDiscreteEventScheduler.pause();\n        RepeatingRunnable.startIn(0, 1, \"Test Event\", time -> {}, simpleDiscreteEventScheduler);\n        simpleDiscreteEventScheduler.doAt(20, () -> Preconditions.checkState(!simpleDiscreteEventScheduler.hasOnlyDaemonEvents()));\n        simpleDiscreteEventScheduler.doAtDaemon(100, simpleDiscreteEventScheduler::stop, \"Shutdown Event\");\n        simpleDiscreteEventScheduler.unPause();\n\n        Assertions.assertNull(exceptionSwallowingEventExecutor.getFirstExceptionEncountered());\n    }", "signature": "void whenRunnableIsNotADamonEvent_theSchedulerKnowsItDoesNotHaveOnlyDamonEvents()", "full_signature": "@Test public void whenRunnableIsNotADamonEvent_theSchedulerKnowsItDoesNotHaveOnlyDamonEvents()", "class_method_signature": "RepeatingRunnableTest.whenRunnableIsNotADamonEvent_theSchedulerKnowsItDoesNotHaveOnlyDamonEvents()", "testcase": true, "constructor": false, "invocations": ["pause", "startIn", "doAt", "checkState", "hasOnlyDaemonEvents", "doAtDaemon", "unPause", "assertNull", "getFirstExceptionEncountered"]}, "focal_class": {"identifier": "RepeatingRunnable", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private final double time;", "modifier": "private final", "type": "double", "declarator": "time", "var_name": "time"}, {"original_string": "private final double period;", "modifier": "private final", "type": "double", "declarator": "period", "var_name": "period"}, {"original_string": "private final String description;", "modifier": "private final", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private final Consumer<Double> timeConsumingAction;", "modifier": "private final", "type": "Consumer<Double>", "declarator": "timeConsumingAction", "var_name": "timeConsumingAction"}, {"original_string": "protected final EventScheduler eventScheduler;", "modifier": "protected final", "type": "EventScheduler", "declarator": "eventScheduler", "var_name": "eventScheduler"}, {"original_string": "private final boolean isDaemon;", "modifier": "private final", "type": "boolean", "declarator": "isDaemon", "var_name": "isDaemon"}, {"original_string": "private final AtomicBoolean canceled;", "modifier": "private final", "type": "AtomicBoolean", "declarator": "canceled", "var_name": "canceled"}, {"original_string": "private final boolean fixedDelay;", "modifier": "private final", "type": "boolean", "declarator": "fixedDelay", "var_name": "fixedDelay"}], "methods": [{"identifier": "startIn", "parameters": "(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startIn(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startIn(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startIn(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startAt", "parameters": "(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startAt(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startAt(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startAt(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startAtDaemon", "parameters": "(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startAtDaemon(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startAtDaemon(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startAtDaemon(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startAtDaemon", "parameters": "(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startAtDaemon(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startAtDaemon(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startAtDaemon(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startInDaemon", "parameters": "(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startInDaemon(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startInDaemon(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startInDaemon(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startInDaemon", "parameters": "(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startInDaemon(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startInDaemon(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startInDaemon(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startInWithFixedDelay", "parameters": "(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startInWithFixedDelay(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startInWithFixedDelay(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startInWithFixedDelay(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startAtWithFixedDelay", "parameters": "(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startAtWithFixedDelay(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startAtWithFixedDelay(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startAtWithFixedDelay(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startAtDaemonWithFixedDelay", "parameters": "(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startAtDaemonWithFixedDelay(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startAtDaemonWithFixedDelay(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startAtDaemonWithFixedDelay(double time, double period, String description, Runnable r, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startAtDaemonWithFixedDelay", "parameters": "(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startAtDaemonWithFixedDelay(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startAtDaemonWithFixedDelay(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startAtDaemonWithFixedDelay(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startInDaemonWithFixedDelay", "parameters": "(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startInDaemonWithFixedDelay(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startInDaemonWithFixedDelay(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startInDaemonWithFixedDelay(double delay, double period, String description, Runnable r, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "startInDaemonWithFixedDelay", "parameters": "(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "signature": "Cancelable startInDaemonWithFixedDelay(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startInDaemonWithFixedDelay(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startInDaemonWithFixedDelay(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler, boolean isDaemon, boolean fixedDelay)", "modifiers": "private static", "return": "Cancelable", "signature": "Cancelable start(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler, boolean isDaemon, boolean fixedDelay)", "full_signature": "private static Cancelable start(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler, boolean isDaemon, boolean fixedDelay)", "class_method_signature": "RepeatingRunnable.start(double time, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler, boolean isDaemon, boolean fixedDelay)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "modifiers": "private static", "return": "void", "signature": "void repeat(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "full_signature": "private static void repeat(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "class_method_signature": "RepeatingRunnable.repeat(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "testcase": false, "constructor": false}, {"identifier": "RepeatingRunnable", "parameters": "(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "modifiers": "private", "return": "", "signature": " RepeatingRunnable(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "full_signature": "private  RepeatingRunnable(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "class_method_signature": "RepeatingRunnable.RepeatingRunnable(\n            double time,\n            double period,\n            String description,\n            Consumer<Double> timeConsumingAction,\n            EventScheduler eventScheduler,\n            boolean isDaemon,\n            AtomicBoolean canceled,\n            boolean fixedDelay)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RepeatingRunnable.run()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/event/scheduling/RepeatingRunnable.java"}, "focal_method": {"identifier": "startIn", "parameters": "(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "modifiers": "public static", "return": "Cancelable", "body": "public static Cancelable startIn(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler) {\n        return startAt(eventScheduler.getTimeProvider().getTime() + delay, period, description, timeConsumingAction, eventScheduler);\n    }", "signature": "Cancelable startIn(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "full_signature": "public static Cancelable startIn(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "class_method_signature": "RepeatingRunnable.startIn(double delay, double period, String description, Consumer<Double> timeConsumingAction, EventScheduler eventScheduler)", "testcase": false, "constructor": false, "invocations": ["startAt", "getTime", "getTimeProvider"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}