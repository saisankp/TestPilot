{"test_class": {"identifier": "PMMLRuntimeImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PMMLRuntimeImpl pmmlRuntime;", "modifier": "private", "type": "PMMLRuntimeImpl", "declarator": "pmmlRuntime", "var_name": "pmmlRuntime"}], "file": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/test/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImplTest.java"}, "test_case": {"identifier": "addMissingValuesReplacements", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addMissingValuesReplacements() {\n        Map<String, Object> missingValueReplacementMap = new HashMap<>();\n        missingValueReplacementMap.put(\"fieldA\", \"one\");\n        missingValueReplacementMap.put(\"fieldB\", 2);\n        KiePMMLTestingModel model = KiePMMLTestingModel.builder(\"TESTINGMODEL\", Collections.emptyList(), MINING_FUNCTION.REGRESSION)\n                .withMissingValueReplacementMap(missingValueReplacementMap)\n                .build();\n        PMMLRequestData pmmlRequestData = new PMMLRequestData(\"123\", \"modelName\");\n        pmmlRequestData.addRequestParam(\"age\", 123);\n        pmmlRequestData.addRequestParam(\"work\", \"work\");\n        PMMLContext pmmlContext = new PMMLContextImpl(pmmlRequestData);\n        missingValueReplacementMap.keySet().forEach(key -> {\n            assertFalse(pmmlContext.getRequestData().getMappedRequestParams().containsKey(key));\n            assertFalse(pmmlContext.getMissingValueReplacedMap().containsKey(key));\n        });\n        pmmlRuntime.addMissingValuesReplacements(model, pmmlContext);\n        missingValueReplacementMap.forEach((key, value) -> {\n            assertTrue(pmmlContext.getRequestData().getMappedRequestParams().containsKey(key));\n            final ParameterInfo<?> parameterInfo = pmmlContext.getRequestData().getMappedRequestParams().get(key);\n            assertEquals(key, parameterInfo.getName());\n            assertEquals(value.getClass(), parameterInfo.getType());\n            assertEquals(value, parameterInfo.getValue());\n            assertTrue(pmmlContext.getMissingValueReplacedMap().containsKey(key));\n            assertEquals(value, pmmlContext.getMissingValueReplacedMap().get(key));\n        });\n    }", "signature": "void addMissingValuesReplacements()", "full_signature": "@Test public void addMissingValuesReplacements()", "class_method_signature": "PMMLRuntimeImplTest.addMissingValuesReplacements()", "testcase": true, "constructor": false, "invocations": ["put", "put", "build", "withMissingValueReplacementMap", "builder", "emptyList", "addRequestParam", "addRequestParam", "forEach", "keySet", "assertFalse", "containsKey", "getMappedRequestParams", "getRequestData", "assertFalse", "containsKey", "getMissingValueReplacedMap", "addMissingValuesReplacements", "forEach", "assertTrue", "containsKey", "getMappedRequestParams", "getRequestData", "get", "getMappedRequestParams", "getRequestData", "assertEquals", "getName", "assertEquals", "getClass", "getType", "assertEquals", "getValue", "assertTrue", "containsKey", "getMissingValueReplacedMap", "assertEquals", "get", "getMissingValueReplacedMap"]}, "focal_class": {"identifier": "PMMLRuntimeImpl", "superclass": "", "interfaces": "implements PMMLRuntime", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PMMLRuntimeImpl.class)", "var_name": "logger"}, {"original_string": "private final KieBase knowledgeBase;", "modifier": "private final", "type": "KieBase", "declarator": "knowledgeBase", "var_name": "knowledgeBase"}, {"original_string": "private final PMMLModelEvaluatorFinderImpl pmmlModelExecutorFinder;", "modifier": "private final", "type": "PMMLModelEvaluatorFinderImpl", "declarator": "pmmlModelExecutorFinder", "var_name": "pmmlModelExecutorFinder"}], "methods": [{"identifier": "PMMLRuntimeImpl", "parameters": "(final KieBase knowledgeBase, final PMMLModelEvaluatorFinderImpl pmmlModelExecutorFinder)", "modifiers": "public", "return": "", "signature": " PMMLRuntimeImpl(final KieBase knowledgeBase, final PMMLModelEvaluatorFinderImpl pmmlModelExecutorFinder)", "full_signature": "public  PMMLRuntimeImpl(final KieBase knowledgeBase, final PMMLModelEvaluatorFinderImpl pmmlModelExecutorFinder)", "class_method_signature": "PMMLRuntimeImpl.PMMLRuntimeImpl(final KieBase knowledgeBase, final PMMLModelEvaluatorFinderImpl pmmlModelExecutorFinder)", "testcase": false, "constructor": true}, {"identifier": "getKnowledgeBase", "parameters": "()", "modifiers": "@Override public", "return": "KieBase", "signature": "KieBase getKnowledgeBase()", "full_signature": "@Override public KieBase getKnowledgeBase()", "class_method_signature": "PMMLRuntimeImpl.getKnowledgeBase()", "testcase": false, "constructor": false}, {"identifier": "getModels", "parameters": "()", "modifiers": "@Override public", "return": "List<KiePMMLModel>", "signature": "List<KiePMMLModel> getModels()", "full_signature": "@Override public List<KiePMMLModel> getModels()", "class_method_signature": "PMMLRuntimeImpl.getModels()", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "(final String modelName)", "modifiers": "@Override public", "return": "Optional<KiePMMLModel>", "signature": "Optional<KiePMMLModel> getModel(final String modelName)", "full_signature": "@Override public Optional<KiePMMLModel> getModel(final String modelName)", "class_method_signature": "PMMLRuntimeImpl.getModel(final String modelName)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final String modelName, final PMMLContext context)", "modifiers": "@Override public", "return": "PMML4Result", "signature": "PMML4Result evaluate(final String modelName, final PMMLContext context)", "full_signature": "@Override public PMML4Result evaluate(final String modelName, final PMMLContext context)", "class_method_signature": "PMMLRuntimeImpl.evaluate(final String modelName, final PMMLContext context)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(final KiePMMLModel model, final PMMLContext context)", "modifiers": "protected", "return": "PMML4Result", "signature": "PMML4Result evaluate(final KiePMMLModel model, final PMMLContext context)", "full_signature": "protected PMML4Result evaluate(final KiePMMLModel model, final PMMLContext context)", "class_method_signature": "PMMLRuntimeImpl.evaluate(final KiePMMLModel model, final PMMLContext context)", "testcase": false, "constructor": false}, {"identifier": "addMissingValuesReplacements", "parameters": "(final KiePMMLModel model, final PMMLContext context)", "modifiers": "protected", "return": "void", "signature": "void addMissingValuesReplacements(final KiePMMLModel model, final PMMLContext context)", "full_signature": "protected void addMissingValuesReplacements(final KiePMMLModel model, final PMMLContext context)", "class_method_signature": "PMMLRuntimeImpl.addMissingValuesReplacements(final KiePMMLModel model, final PMMLContext context)", "testcase": false, "constructor": false}, {"identifier": "executeTransformations", "parameters": "(final KiePMMLModel model, final PMMLContext context)", "modifiers": "protected", "return": "void", "signature": "void executeTransformations(final KiePMMLModel model, final PMMLContext context)", "full_signature": "protected void executeTransformations(final KiePMMLModel model, final PMMLContext context)", "class_method_signature": "PMMLRuntimeImpl.executeTransformations(final KiePMMLModel model, final PMMLContext context)", "testcase": false, "constructor": false}, {"identifier": "getFromPMMLModelType", "parameters": "(final PMML_MODEL pmmlMODEL)", "modifiers": "private", "return": "Optional<PMMLModelEvaluator>", "signature": "Optional<PMMLModelEvaluator> getFromPMMLModelType(final PMML_MODEL pmmlMODEL)", "full_signature": "private Optional<PMMLModelEvaluator> getFromPMMLModelType(final PMML_MODEL pmmlMODEL)", "class_method_signature": "PMMLRuntimeImpl.getFromPMMLModelType(final PMML_MODEL pmmlMODEL)", "testcase": false, "constructor": false}, {"identifier": "getKiePMMLNameValuesFromParameterInfos", "parameters": "(final Collection<ParameterInfo> parameterInfos)", "modifiers": "private", "return": "List<KiePMMLNameValue>", "signature": "List<KiePMMLNameValue> getKiePMMLNameValuesFromParameterInfos(final Collection<ParameterInfo> parameterInfos)", "full_signature": "private List<KiePMMLNameValue> getKiePMMLNameValuesFromParameterInfos(final Collection<ParameterInfo> parameterInfos)", "class_method_signature": "PMMLRuntimeImpl.getKiePMMLNameValuesFromParameterInfos(final Collection<ParameterInfo> parameterInfos)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java"}, "focal_method": {"identifier": "addMissingValuesReplacements", "parameters": "(final KiePMMLModel model, final PMMLContext context)", "modifiers": "protected", "return": "void", "body": "protected void addMissingValuesReplacements(final KiePMMLModel model, final PMMLContext context) {\n        logger.debug(\"addMissingValuesReplacements {} {}\", model, context);\n        final PMMLRequestData requestData = context.getRequestData();\n        final Map<String, ParameterInfo> mappedRequestParams = requestData.getMappedRequestParams();\n        final Map<String, Object> missingValueReplacementMap = model.getMissingValueReplacementMap();\n        missingValueReplacementMap.forEach((fieldName, missingValueReplacement) -> {\n            if (!mappedRequestParams.containsKey(fieldName)) {\n                logger.debug(\"missingValueReplacement {} {}\", fieldName, missingValueReplacement);\n                requestData.addRequestParam(fieldName, missingValueReplacement);\n                context.addMissingValueReplaced(fieldName, missingValueReplacement);\n            }\n        });\n    }", "signature": "void addMissingValuesReplacements(final KiePMMLModel model, final PMMLContext context)", "full_signature": "protected void addMissingValuesReplacements(final KiePMMLModel model, final PMMLContext context)", "class_method_signature": "PMMLRuntimeImpl.addMissingValuesReplacements(final KiePMMLModel model, final PMMLContext context)", "testcase": false, "constructor": false, "invocations": ["debug", "getRequestData", "getMappedRequestParams", "getMissingValueReplacementMap", "forEach", "containsKey", "debug", "addRequestParam", "addMissingValueReplaced"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}