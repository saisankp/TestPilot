{"test_class": {"identifier": "AtomTypeTest", "superclass": "extends AbstractAtomTypeTest", "interfaces": "", "fields": [], "file": "base/data/src/test/java/org/openscience/cdk/AtomTypeTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() {\n        IAtomType at = new AtomType(\"C4\", \"C\");\n        if (at instanceof org.openscience.cdk.AtomType) {\n            org.openscience.cdk.AtomType at1 = (org.openscience.cdk.AtomType) at;\n            IAtomType at2 = at.getBuilder().newInstance(IAtomType.class, \"C3\", \"C\");\n            Assert.assertFalse(at1.compare(\"C4\"));\n            Assert.assertFalse(at1.compare(at2));\n        }\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "AtomTypeTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getBuilder", "assertFalse", "compare", "assertFalse", "compare"]}, "focal_class": {"identifier": "AtomType", "superclass": "extends Isotope", "interfaces": "implements IAtomType, Serializable, Cloneable", "fields": [{"original_string": "private static final long         serialVersionUID     = -7950397716808229972L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID     = -7950397716808229972L", "var_name": "serialVersionUID"}, {"original_string": "IBond.Order                       maxBondOrder         = null;", "modifier": "", "type": "IBond.Order", "declarator": "maxBondOrder         = null", "var_name": "maxBondOrder"}, {"original_string": "Double                            bondOrderSum         = (Double) CDKConstants.UNSET;", "modifier": "", "type": "Double", "declarator": "bondOrderSum         = (Double) CDKConstants.UNSET", "var_name": "bondOrderSum"}, {"original_string": "Double                            covalentRadius       = (Double) CDKConstants.UNSET;", "modifier": "", "type": "Double", "declarator": "covalentRadius       = (Double) CDKConstants.UNSET", "var_name": "covalentRadius"}, {"original_string": "protected Integer                 formalCharge         = (Integer) CDKConstants.UNSET;", "modifier": "protected", "type": "Integer", "declarator": "formalCharge         = (Integer) CDKConstants.UNSET", "var_name": "formalCharge"}, {"original_string": "protected IAtomType.Hybridization hybridization        = (Hybridization) CDKConstants.UNSET;", "modifier": "protected", "type": "IAtomType.Hybridization", "declarator": "hybridization        = (Hybridization) CDKConstants.UNSET", "var_name": "hybridization"}, {"original_string": "protected Integer                 electronValency      = (Integer) CDKConstants.UNSET;", "modifier": "protected", "type": "Integer", "declarator": "electronValency      = (Integer) CDKConstants.UNSET", "var_name": "electronValency"}, {"original_string": "protected Integer                 formalNeighbourCount = (Integer) CDKConstants.UNSET;", "modifier": "protected", "type": "Integer", "declarator": "formalNeighbourCount = (Integer) CDKConstants.UNSET", "var_name": "formalNeighbourCount"}, {"original_string": "private String                    identifier           = (String) CDKConstants.UNSET;", "modifier": "private", "type": "String", "declarator": "identifier           = (String) CDKConstants.UNSET", "var_name": "identifier"}], "methods": [{"identifier": "AtomType", "parameters": "(String elementSymbol)", "modifiers": "public", "return": "", "signature": " AtomType(String elementSymbol)", "full_signature": "public  AtomType(String elementSymbol)", "class_method_signature": "AtomType.AtomType(String elementSymbol)", "testcase": false, "constructor": true}, {"identifier": "AtomType", "parameters": "(String identifier, String elementSymbol)", "modifiers": "public", "return": "", "signature": " AtomType(String identifier, String elementSymbol)", "full_signature": "public  AtomType(String identifier, String elementSymbol)", "class_method_signature": "AtomType.AtomType(String identifier, String elementSymbol)", "testcase": false, "constructor": true}, {"identifier": "AtomType", "parameters": "(IElement element)", "modifiers": "public", "return": "", "signature": " AtomType(IElement element)", "full_signature": "public  AtomType(IElement element)", "class_method_signature": "AtomType.AtomType(IElement element)", "testcase": false, "constructor": true}, {"identifier": "setAtomTypeName", "parameters": "(String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void setAtomTypeName(String identifier)", "full_signature": "@Override public void setAtomTypeName(String identifier)", "class_method_signature": "AtomType.setAtomTypeName(String identifier)", "testcase": false, "constructor": false}, {"identifier": "setMaxBondOrder", "parameters": "(IBond.Order maxBondOrder)", "modifiers": "@Override public", "return": "void", "signature": "void setMaxBondOrder(IBond.Order maxBondOrder)", "full_signature": "@Override public void setMaxBondOrder(IBond.Order maxBondOrder)", "class_method_signature": "AtomType.setMaxBondOrder(IBond.Order maxBondOrder)", "testcase": false, "constructor": false}, {"identifier": "setBondOrderSum", "parameters": "(Double bondOrderSum)", "modifiers": "@Override public", "return": "void", "signature": "void setBondOrderSum(Double bondOrderSum)", "full_signature": "@Override public void setBondOrderSum(Double bondOrderSum)", "class_method_signature": "AtomType.setBondOrderSum(Double bondOrderSum)", "testcase": false, "constructor": false}, {"identifier": "getAtomTypeName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAtomTypeName()", "full_signature": "@Override public String getAtomTypeName()", "class_method_signature": "AtomType.getAtomTypeName()", "testcase": false, "constructor": false}, {"identifier": "getMaxBondOrder", "parameters": "()", "modifiers": "@Override public", "return": "IBond.Order", "signature": "IBond.Order getMaxBondOrder()", "full_signature": "@Override public IBond.Order getMaxBondOrder()", "class_method_signature": "AtomType.getMaxBondOrder()", "testcase": false, "constructor": false}, {"identifier": "getBondOrderSum", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getBondOrderSum()", "full_signature": "@Override public Double getBondOrderSum()", "class_method_signature": "AtomType.getBondOrderSum()", "testcase": false, "constructor": false}, {"identifier": "setFormalCharge", "parameters": "(Integer charge)", "modifiers": "@Override public", "return": "void", "signature": "void setFormalCharge(Integer charge)", "full_signature": "@Override public void setFormalCharge(Integer charge)", "class_method_signature": "AtomType.setFormalCharge(Integer charge)", "testcase": false, "constructor": false}, {"identifier": "getFormalCharge", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getFormalCharge()", "full_signature": "@Override public Integer getFormalCharge()", "class_method_signature": "AtomType.getFormalCharge()", "testcase": false, "constructor": false}, {"identifier": "setFormalNeighbourCount", "parameters": "(Integer count)", "modifiers": "@Override public", "return": "void", "signature": "void setFormalNeighbourCount(Integer count)", "full_signature": "@Override public void setFormalNeighbourCount(Integer count)", "class_method_signature": "AtomType.setFormalNeighbourCount(Integer count)", "testcase": false, "constructor": false}, {"identifier": "getFormalNeighbourCount", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getFormalNeighbourCount()", "full_signature": "@Override public Integer getFormalNeighbourCount()", "class_method_signature": "AtomType.getFormalNeighbourCount()", "testcase": false, "constructor": false}, {"identifier": "setHybridization", "parameters": "(IAtomType.Hybridization hybridization)", "modifiers": "@Override public", "return": "void", "signature": "void setHybridization(IAtomType.Hybridization hybridization)", "full_signature": "@Override public void setHybridization(IAtomType.Hybridization hybridization)", "class_method_signature": "AtomType.setHybridization(IAtomType.Hybridization hybridization)", "testcase": false, "constructor": false}, {"identifier": "getHybridization", "parameters": "()", "modifiers": "@Override public", "return": "IAtomType.Hybridization", "signature": "IAtomType.Hybridization getHybridization()", "full_signature": "@Override public IAtomType.Hybridization getHybridization()", "class_method_signature": "AtomType.getHybridization()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean compare(Object object)", "full_signature": "@Override public boolean compare(Object object)", "class_method_signature": "AtomType.compare(Object object)", "testcase": false, "constructor": false}, {"identifier": "setCovalentRadius", "parameters": "(Double radius)", "modifiers": "@Override public", "return": "void", "signature": "void setCovalentRadius(Double radius)", "full_signature": "@Override public void setCovalentRadius(Double radius)", "class_method_signature": "AtomType.setCovalentRadius(Double radius)", "testcase": false, "constructor": false}, {"identifier": "getCovalentRadius", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getCovalentRadius()", "full_signature": "@Override public Double getCovalentRadius()", "class_method_signature": "AtomType.getCovalentRadius()", "testcase": false, "constructor": false}, {"identifier": "setValency", "parameters": "(Integer valency)", "modifiers": "@Override public", "return": "void", "signature": "void setValency(Integer valency)", "full_signature": "@Override public void setValency(Integer valency)", "class_method_signature": "AtomType.setValency(Integer valency)", "testcase": false, "constructor": false}, {"identifier": "getValency", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getValency()", "full_signature": "@Override public Integer getValency()", "class_method_signature": "AtomType.getValency()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "AtomType.clone()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AtomType.toString()", "testcase": false, "constructor": false}], "file": "base/data/src/main/java/org/openscience/cdk/AtomType.java"}, "focal_method": {"identifier": "compare", "parameters": "(Object object)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean compare(Object object) {\n        if (!(object instanceof IAtomType)) {\n            return false;\n        }\n        if (!super.compare(object)) {\n            return false;\n        }\n        AtomType type = (AtomType) object;\n        return Objects.equal(getAtomTypeName(), type.getAtomTypeName())\n                && Objects.equal(maxBondOrder, type.maxBondOrder) && Objects.equal(bondOrderSum, type.bondOrderSum);\n    }", "signature": "boolean compare(Object object)", "full_signature": "@Override public boolean compare(Object object)", "class_method_signature": "AtomType.compare(Object object)", "testcase": false, "constructor": false, "invocations": ["compare", "equal", "getAtomTypeName", "getAtomTypeName", "equal", "equal"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}