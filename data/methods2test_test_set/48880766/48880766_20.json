{"test_class": {"identifier": "AbstractColumnTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/columns/AbstractColumnTest.java"}, "test_case": {"identifier": "doWithEach", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void doWithEach() throws Exception {\n\n    Table table = Table.read().csv(\"../data/bush.csv\").first(5);\n\n    DateColumn dc1 = table.dateColumn(\"date\");\n\n    DateColumn dc2 = DateColumn.create(\"100 days later\");\n\n    dc1.forEach(localDate -> dc2.append(localDate.plusDays(100)));\n\n    assertEquals(dc1.get(0).plusDays(100), dc2.get(0));\n  }", "signature": "void doWithEach()", "full_signature": "@Test public void doWithEach()", "class_method_signature": "AbstractColumnTest.doWithEach()", "testcase": true, "constructor": false, "invocations": ["first", "csv", "read", "dateColumn", "create", "forEach", "append", "plusDays", "assertEquals", "plusDays", "get", "get"]}, "focal_class": {"identifier": "AbstractColumn", "superclass": "", "interfaces": "implements Column<T>", "fields": [{"original_string": "public static final int DEFAULT_ARRAY_SIZE = 128;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_ARRAY_SIZE = 128", "var_name": "DEFAULT_ARRAY_SIZE"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final ColumnType type;", "modifier": "private final", "type": "ColumnType", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "AbstractColumn", "parameters": "(ColumnType type, final String name)", "modifiers": "public", "return": "", "signature": " AbstractColumn(ColumnType type, final String name)", "full_signature": "public  AbstractColumn(ColumnType type, final String name)", "class_method_signature": "AbstractColumn.AbstractColumn(ColumnType type, final String name)", "testcase": false, "constructor": true}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "AbstractColumn.name()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(final String name)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C setName(final String name)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C setName(final String name)", "class_method_signature": "AbstractColumn.setName(final String name)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "()", "modifiers": "@Override public", "return": "ColumnType", "signature": "ColumnType type()", "full_signature": "@Override public ColumnType type()", "class_method_signature": "AbstractColumn.type()", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "()", "modifiers": "@Override public abstract", "return": "Column<T>", "signature": "Column<T> emptyCopy()", "full_signature": "@Override public abstract Column<T> emptyCopy()", "class_method_signature": "AbstractColumn.emptyCopy()", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Predicate<? super T> test)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C filter(Predicate<? super T> test)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C filter(Predicate<? super T> test)", "class_method_signature": "AbstractColumn.filter(Predicate<? super T> test)", "testcase": false, "constructor": false}, {"identifier": "sorted", "parameters": "(Comparator<? super T> comp)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C sorted(Comparator<? super T> comp)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C sorted(Comparator<? super T> comp)", "class_method_signature": "AbstractColumn.sorted(Comparator<? super T> comp)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Function<? super T, ? extends T> fun)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C map(Function<? super T, ? extends T> fun)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C map(Function<? super T, ? extends T> fun)", "class_method_signature": "AbstractColumn.map(Function<? super T, ? extends T> fun)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(Column<T> other)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C min(Column<T> other)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C min(Column<T> other)", "class_method_signature": "AbstractColumn.min(Column<T> other)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "(Column<T> other)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C max(Column<T> other)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C max(Column<T> other)", "class_method_signature": "AbstractColumn.max(Column<T> other)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Selection condition, Column<T> other)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C set(Selection condition, Column<T> other)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C set(Selection condition, Column<T> other)", "class_method_signature": "AbstractColumn.set(Selection condition, Column<T> other)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Selection rowSelection, T newValue)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C set(Selection rowSelection, T newValue)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C set(Selection rowSelection, T newValue)", "class_method_signature": "AbstractColumn.set(Selection rowSelection, T newValue)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(int numRows)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C first(int numRows)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C first(int numRows)", "class_method_signature": "AbstractColumn.first(int numRows)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(int numRows)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C last(int numRows)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C last(int numRows)", "class_method_signature": "AbstractColumn.last(int numRows)", "testcase": false, "constructor": false}, {"identifier": "sampleN", "parameters": "(int n)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C sampleN(int n)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C sampleN(int n)", "class_method_signature": "AbstractColumn.sampleN(int n)", "testcase": false, "constructor": false}, {"identifier": "sampleX", "parameters": "(double proportion)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C sampleX(double proportion)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C sampleX(double proportion)", "class_method_signature": "AbstractColumn.sampleX(double proportion)", "testcase": false, "constructor": false}, {"identifier": "subset", "parameters": "(int[] rows)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C subset(int[] rows)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C subset(int[] rows)", "class_method_signature": "AbstractColumn.subset(int[] rows)", "testcase": false, "constructor": false}, {"identifier": "inRange", "parameters": "(int start, int end)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "signature": "C inRange(int start, int end)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C inRange(int start, int end)", "class_method_signature": "AbstractColumn.inRange(int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractColumn.toString()", "testcase": false, "constructor": false}, {"identifier": "asStringColumn", "parameters": "()", "modifiers": "@Override public", "return": "StringColumn", "signature": "StringColumn asStringColumn()", "full_signature": "@Override public StringColumn asStringColumn()", "class_method_signature": "AbstractColumn.asStringColumn()", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "int", "signature": "int indexOf(final Object o)", "full_signature": "@Override public int indexOf(final Object o)", "class_method_signature": "AbstractColumn.indexOf(final Object o)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/columns/AbstractColumn.java"}, "focal_method": {"identifier": "first", "parameters": "(int numRows)", "modifiers": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "C", "body": "@Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public C first(int numRows) {\n    return (C) Column.super.first(numRows);\n  }", "signature": "C first(int numRows)", "full_signature": "@Override @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public C first(int numRows)", "class_method_signature": "AbstractColumn.first(int numRows)", "testcase": false, "constructor": false, "invocations": ["first"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}