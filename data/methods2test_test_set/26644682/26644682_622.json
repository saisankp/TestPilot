{"test_class": {"identifier": "SimpleSuggestionEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SimpleSuggestionEngine suggestionEngine = new SimpleSuggestionEngine();", "modifier": "private final", "type": "SimpleSuggestionEngine", "declarator": "suggestionEngine = new SimpleSuggestionEngine()", "var_name": "suggestionEngine"}, {"original_string": "private ActionRegistry actionRegistry;", "modifier": "private", "type": "ActionRegistry", "declarator": "actionRegistry", "var_name": "actionRegistry"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/api/transformer/suggestion/SimpleSuggestionEngineTest.java"}, "test_case": {"identifier": "shouldTestSuggestColumnString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldTestSuggestColumnString() throws IOException {\n        // given\n        final String json =\n                IOUtils.toString(this.getClass().getResourceAsStream(\"metadata_gonfleurs_suggestion.json\"), UTF_8);\n        ObjectMapper mapper = new ObjectMapper();\n        final ColumnMetadata columnMetadata = mapper.readValue(json, ColumnMetadata.class);\n\n        String[] expectedResult = { \"lowercase\", \"propercase\", \"replace_on_value\", \"uppercase\" };\n\n        // when\n        String[] newActionFormArray = suggestionEngine //\n                .score(actionRegistry.findAll(), columnMetadata) //\n                .filter(i -> i.getScore() > 0) //\n                .limit(5) //\n                .map(a -> a.getAction().getName()) //\n                .toArray(String[]::new);\n\n        // then\n        assertEquals(4, newActionFormArray.length);\n        assertArrayEquals(expectedResult, newActionFormArray);\n    }", "signature": "void shouldTestSuggestColumnString()", "full_signature": "@Test public void shouldTestSuggestColumnString()", "class_method_signature": "SimpleSuggestionEngineTest.shouldTestSuggestColumnString()", "testcase": true, "constructor": false, "invocations": ["toString", "getResourceAsStream", "getClass", "readValue", "toArray", "map", "limit", "filter", "score", "findAll", "getScore", "getName", "getAction", "assertEquals", "assertArrayEquals"]}, "focal_class": {"identifier": "SimpleSuggestionEngine", "superclass": "", "interfaces": "implements SuggestionEngine", "fields": [{"original_string": "private static final Comparator<Suggestion> SUGGESTION_COMPARATOR =\n            (s1, s2) -> Integer.compare(s2.getScore(), s1.getScore());", "modifier": "private static final", "type": "Comparator<Suggestion>", "declarator": "SUGGESTION_COMPARATOR =\n            (s1, s2) -> Integer.compare(s2.getScore(), s1.getScore())", "var_name": "SUGGESTION_COMPARATOR"}, {"original_string": "@Autowired(required = false)\n    private List<SuggestionEngineRule> rules = new ArrayList<>();", "modifier": "@Autowired(required = false)\n    private", "type": "List<SuggestionEngineRule>", "declarator": "rules = new ArrayList<>()", "var_name": "rules"}], "methods": [{"identifier": "setRules", "parameters": "(List<SuggestionEngineRule> rules)", "modifiers": "public", "return": "void", "signature": "void setRules(List<SuggestionEngineRule> rules)", "full_signature": "public void setRules(List<SuggestionEngineRule> rules)", "class_method_signature": "SimpleSuggestionEngine.setRules(List<SuggestionEngineRule> rules)", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "(Stream<ActionDefinition> actions, ColumnMetadata column)", "modifiers": "@Override public", "return": "Stream<Suggestion>", "signature": "Stream<Suggestion> score(Stream<ActionDefinition> actions, ColumnMetadata column)", "full_signature": "@Override public Stream<Suggestion> score(Stream<ActionDefinition> actions, ColumnMetadata column)", "class_method_signature": "SimpleSuggestionEngine.score(Stream<ActionDefinition> actions, ColumnMetadata column)", "testcase": false, "constructor": false}, {"identifier": "score", "parameters": "(ActionDefinition actionDef, ColumnMetadata column)", "modifiers": "@Override public", "return": "Suggestion", "signature": "Suggestion score(ActionDefinition actionDef, ColumnMetadata column)", "full_signature": "@Override public Suggestion score(ActionDefinition actionDef, ColumnMetadata column)", "class_method_signature": "SimpleSuggestionEngine.score(ActionDefinition actionDef, ColumnMetadata column)", "testcase": false, "constructor": false}, {"identifier": "suggest", "parameters": "(DataSet dataSet)", "modifiers": "@Override public", "return": "List<ActionDefinition>", "signature": "List<ActionDefinition> suggest(DataSet dataSet)", "full_signature": "@Override public List<ActionDefinition> suggest(DataSet dataSet)", "class_method_signature": "SimpleSuggestionEngine.suggest(DataSet dataSet)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/api/transformer/suggestion/SimpleSuggestionEngine.java"}, "focal_method": {"identifier": "score", "parameters": "(Stream<ActionDefinition> actions, ColumnMetadata column)", "modifiers": "@Override public", "return": "Stream<Suggestion>", "body": "@Override\n    public Stream<Suggestion> score(Stream<ActionDefinition> actions, ColumnMetadata column) {\n        return actions.map(actionMetadata -> score(actionMetadata, column)).sorted(SUGGESTION_COMPARATOR);\n    }", "signature": "Stream<Suggestion> score(Stream<ActionDefinition> actions, ColumnMetadata column)", "full_signature": "@Override public Stream<Suggestion> score(Stream<ActionDefinition> actions, ColumnMetadata column)", "class_method_signature": "SimpleSuggestionEngine.score(Stream<ActionDefinition> actions, ColumnMetadata column)", "testcase": false, "constructor": false, "invocations": ["sorted", "map", "score"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}