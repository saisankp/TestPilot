{"test_class": {"identifier": "SubjectIdReplacementDefinitionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SubjectIdReplacementDefinition underTest;", "modifier": "private", "type": "SubjectIdReplacementDefinition", "declarator": "underTest", "var_name": "underTest"}], "file": "services/concierge/enforcement/src/test/java/org/eclipse/ditto/services/concierge/enforcement/placeholders/SubjectIdReplacementDefinitionTest.java"}, "test_case": {"identifier": "succeedsWhenHeadersContainSubjectId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void succeedsWhenHeadersContainSubjectId() {\n        final String subjectId = \"nginx:first\";\n        final DittoHeaders validHeaders = DittoHeaders.newBuilder()\n                .authorizationContext(AuthorizationContext.newInstance(DittoAuthorizationContextType.UNSPECIFIED,\n                        AuthorizationSubject.newInstance(subjectId), AuthorizationSubject.newInstance(\"nginx:second\")))\n                .build();\n\n        final String actualSubjectId = underTest.apply(validHeaders);\n\n        assertThat(actualSubjectId).isEqualTo(subjectId);\n    }", "signature": "void succeedsWhenHeadersContainSubjectId()", "full_signature": "@Test public void succeedsWhenHeadersContainSubjectId()", "class_method_signature": "SubjectIdReplacementDefinitionTest.succeedsWhenHeadersContainSubjectId()", "testcase": true, "constructor": false, "invocations": ["build", "authorizationContext", "newBuilder", "newInstance", "newInstance", "newInstance", "apply", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "SubjectIdReplacementDefinition", "superclass": "", "interfaces": "implements Function<DittoHeaders, String>", "fields": [{"original_string": "static final String REPLACER_NAME = \"request:subjectId\";", "modifier": "static final", "type": "String", "declarator": "REPLACER_NAME = \"request:subjectId\"", "var_name": "REPLACER_NAME"}, {"original_string": "static final String LEGACY_REPLACER_NAME = \"request.subjectId\";", "modifier": "static final", "type": "String", "declarator": "LEGACY_REPLACER_NAME = \"request.subjectId\"", "var_name": "LEGACY_REPLACER_NAME"}, {"original_string": "private static final SubjectIdReplacementDefinition INSTANCE = new SubjectIdReplacementDefinition();", "modifier": "private static final", "type": "SubjectIdReplacementDefinition", "declarator": "INSTANCE = new SubjectIdReplacementDefinition()", "var_name": "INSTANCE"}], "methods": [{"identifier": "SubjectIdReplacementDefinition", "parameters": "()", "modifiers": "private", "return": "", "signature": " SubjectIdReplacementDefinition()", "full_signature": "private  SubjectIdReplacementDefinition()", "class_method_signature": "SubjectIdReplacementDefinition.SubjectIdReplacementDefinition()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "SubjectIdReplacementDefinition", "signature": "SubjectIdReplacementDefinition getInstance()", "full_signature": "public static SubjectIdReplacementDefinition getInstance()", "class_method_signature": "SubjectIdReplacementDefinition.getInstance()", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "String", "signature": "String apply(final DittoHeaders dittoHeaders)", "full_signature": "@Override public String apply(final DittoHeaders dittoHeaders)", "class_method_signature": "SubjectIdReplacementDefinition.apply(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}], "file": "services/concierge/enforcement/src/main/java/org/eclipse/ditto/services/concierge/enforcement/placeholders/SubjectIdReplacementDefinition.java"}, "focal_method": {"identifier": "apply", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String apply(final DittoHeaders dittoHeaders) {\n        requireNonNull(dittoHeaders);\n\n        return dittoHeaders.getAuthorizationContext().getFirstAuthorizationSubject()\n                .map(AuthorizationSubject::getId)\n                .orElseThrow(() -> new IllegalStateException(\"AuthorizationContext must be available when this \" +\n                        \"function is applied!\"));\n    }", "signature": "String apply(final DittoHeaders dittoHeaders)", "full_signature": "@Override public String apply(final DittoHeaders dittoHeaders)", "class_method_signature": "SubjectIdReplacementDefinition.apply(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "orElseThrow", "map", "getFirstAuthorizationSubject", "getAuthorizationContext"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}