{"test_class": {"identifier": "DataProviderFrameworkMethodTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private BasePlaceholder placeholder;", "modifier": "@Mock\n    private", "type": "BasePlaceholder", "declarator": "placeholder", "var_name": "placeholder"}, {"original_string": "private final Method method = anyMethod();", "modifier": "private final", "type": "Method", "declarator": "method = anyMethod()", "var_name": "method"}], "file": "junit4/src/test/java/com/tngtech/java/junit/dataprovider/DataProviderFrameworkMethodTest.java"}, "test_case": {"identifier": "testGetNameShouldRetrunResultOfProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetNameShouldRetrunResultOfProcess() {\n        // Given:\n        final Method method = getMethod(\"testGetNameShouldRetrunResultOfProcess\");\n        final Object[] parameters = new Object[] { 720, \"720\" };\n        final String nameFormat = \"%m[%i: %p[0..-1]]\";\n\n        DataProviderFrameworkMethod underTest = new DataProviderFrameworkMethod(method, 22, parameters, nameFormat);\n\n        // When:\n        String result = underTest.getName();\n\n        // Then:\n        assertThat(result).isEqualTo(\"testGetNameShouldRetrunResultOfProcess[22: 720, 720]\");\n    }", "signature": "void testGetNameShouldRetrunResultOfProcess()", "full_signature": "@Test public void testGetNameShouldRetrunResultOfProcess()", "class_method_signature": "DataProviderFrameworkMethodTest.testGetNameShouldRetrunResultOfProcess()", "testcase": true, "constructor": false, "invocations": ["getMethod", "getName", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "DataProviderFrameworkMethod", "superclass": "extends FrameworkMethod", "interfaces": "", "fields": [{"original_string": "final int idx;", "modifier": "final", "type": "int", "declarator": "idx", "var_name": "idx"}, {"original_string": "final Object[] parameters;", "modifier": "final", "type": "Object[]", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "final String nameFormat;", "modifier": "final", "type": "String", "declarator": "nameFormat", "var_name": "nameFormat"}, {"original_string": "final Class<? extends DataProviderTestNameFormatter> nameFormatter;", "modifier": "final", "type": "Class<? extends DataProviderTestNameFormatter>", "declarator": "nameFormatter", "var_name": "nameFormatter"}], "methods": [{"identifier": "DataProviderFrameworkMethod", "parameters": "(Method method, int idx, Object[] parameters, String nameFormat)", "modifiers": "public", "return": "", "signature": " DataProviderFrameworkMethod(Method method, int idx, Object[] parameters, String nameFormat)", "full_signature": "public  DataProviderFrameworkMethod(Method method, int idx, Object[] parameters, String nameFormat)", "class_method_signature": "DataProviderFrameworkMethod.DataProviderFrameworkMethod(Method method, int idx, Object[] parameters, String nameFormat)", "testcase": false, "constructor": true}, {"identifier": "DataProviderFrameworkMethod", "parameters": "(Method method, int idx, Object[] parameters,\n            String nameFormat, Class<? extends DataProviderTestNameFormatter> nameFormatter)", "modifiers": "public", "return": "", "signature": " DataProviderFrameworkMethod(Method method, int idx, Object[] parameters,\n            String nameFormat, Class<? extends DataProviderTestNameFormatter> nameFormatter)", "full_signature": "public  DataProviderFrameworkMethod(Method method, int idx, Object[] parameters,\n            String nameFormat, Class<? extends DataProviderTestNameFormatter> nameFormatter)", "class_method_signature": "DataProviderFrameworkMethod.DataProviderFrameworkMethod(Method method, int idx, Object[] parameters,\n            String nameFormat, Class<? extends DataProviderTestNameFormatter> nameFormatter)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "DataProviderFrameworkMethod.getName()", "testcase": false, "constructor": false}, {"identifier": "invokeExplosively", "parameters": "(Object target, Object... params)", "modifiers": "@Override public", "return": "Object", "signature": "Object invokeExplosively(Object target, Object... params)", "full_signature": "@Override public Object invokeExplosively(Object target, Object... params)", "class_method_signature": "DataProviderFrameworkMethod.invokeExplosively(Object target, Object... params)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DataProviderFrameworkMethod.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DataProviderFrameworkMethod.equals(Object obj)", "testcase": false, "constructor": false}], "file": "junit4/src/main/java/com/tngtech/java/junit/dataprovider/DataProviderFrameworkMethod.java"}, "focal_method": {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getName() {\n        if (nameFormatter == null || DataProviderPlaceholderFormatter.class.equals(nameFormatter)) {\n            return new DataProviderPlaceholderFormatter(nameFormat, Placeholders.all()).format(getMethod(), idx,\n                    Arrays.asList(parameters));\n        }\n\n        try {\n            return nameFormatter.getDeclaredConstructor().newInstance().format(getMethod(), idx,\n                    Arrays.asList(parameters));\n        } catch (InstantiationException e) {\n            throw new IllegalStateException(String\n                    .format(\"Could not instantiate name formatter using default constructor '%s'.\", nameFormatter),\n                    e);\n        } catch (IllegalAccessException e) {\n            throw new IllegalStateException(\n                    String.format(\"Default constructor not accessable of name formatter '%s'.\", nameFormatter), e);\n        } catch (InvocationTargetException e) {\n            throw new IllegalStateException(String.format(\"Default constructor of name formatter '%s' has thrown: %s\",\n                    nameFormatter, e.getMessage()), e);\n        } catch (NoSuchMethodException e) {\n            throw new IllegalStateException(\n                    String.format(\"Default constructor not found for name formatter '%s'.\", nameFormatter), e);\n        } catch (Exception e) {\n            throw new IllegalStateException(String.format(\n                    \"Unexpected exception while finding and invoking default constructor of name formatter '%s': %s\",\n                    nameFormatter, e.getMessage()), e);\n        }\n    }", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "DataProviderFrameworkMethod.getName()", "testcase": false, "constructor": false, "invocations": ["equals", "format", "all", "getMethod", "asList", "format", "newInstance", "getDeclaredConstructor", "getMethod", "asList", "format", "format", "format", "getMessage", "format", "format", "getMessage"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}