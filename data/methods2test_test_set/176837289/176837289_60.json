{"test_class": {"identifier": "RedisCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static RedissonClient client;", "modifier": "private static", "type": "RedissonClient", "declarator": "client", "var_name": "client"}, {"original_string": "private static RedisCache cache;", "modifier": "private static", "type": "RedisCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "@ClassRule\n    public static SettingsOverride settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.REDIS_CACHE_HOST, \"localhost\",\n        AppSettings.REDIS_CACHE_PORT, 6379,\n        AppSettings.REDIS_CACHE_DB, 0\n    ));", "modifier": "@ClassRule\n    public static", "type": "SettingsOverride", "declarator": "settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.REDIS_CACHE_HOST, \"localhost\",\n        AppSettings.REDIS_CACHE_PORT, 6379,\n        AppSettings.REDIS_CACHE_DB, 0\n    ))", "var_name": "settingsOverride"}], "file": "code/extensions/caching/redis/src/test/java/com/google/cloud/broker/caching/remote/RedisCacheTest.java"}, "test_case": {"identifier": "testDelete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDelete() {\n        // Set a key/value\n        RBucket<byte[]> bucket = client.getBucket(\"test\", ByteArrayCodec.INSTANCE);\n        bucket.set(\"abcd\".getBytes());\n\n        // Let the backend delete the key\n        cache.delete(\"test\");\n\n        // Check that the key was deleted\n        assertNull(cache.get(\"test\"));\n        assertNull(bucket.get());\n    }", "signature": "void testDelete()", "full_signature": "@Test public void testDelete()", "class_method_signature": "RedisCacheTest.testDelete()", "testcase": true, "constructor": false, "invocations": ["getBucket", "set", "getBytes", "delete", "assertNull", "get", "assertNull", "get"]}, "focal_class": {"identifier": "RedisCache", "superclass": "extends AbstractRemoteCache", "interfaces": "", "fields": [{"original_string": "private RedissonClient client;", "modifier": "private", "type": "RedissonClient", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "RedisCache", "parameters": "()", "modifiers": "public", "return": "", "signature": " RedisCache()", "full_signature": "public  RedisCache()", "class_method_signature": "RedisCache.RedisCache()", "testcase": false, "constructor": true}, {"identifier": "getClient", "parameters": "()", "modifiers": "private", "return": "RedissonClient", "signature": "RedissonClient getClient()", "full_signature": "private RedissonClient getClient()", "class_method_signature": "RedisCache.getClient()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "byte[]", "signature": "byte[] get(String key)", "full_signature": "public byte[] get(String key)", "class_method_signature": "RedisCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String key, byte[] value)", "modifiers": "public", "return": "void", "signature": "void set(String key, byte[] value)", "full_signature": "public void set(String key, byte[] value)", "class_method_signature": "RedisCache.set(String key, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String key, byte[] value, int expireIn)", "modifiers": "public", "return": "void", "signature": "void set(String key, byte[] value, int expireIn)", "full_signature": "public void set(String key, byte[] value, int expireIn)", "class_method_signature": "RedisCache.set(String key, byte[] value, int expireIn)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void delete(String key)", "full_signature": "public void delete(String key)", "class_method_signature": "RedisCache.delete(String key)", "testcase": false, "constructor": false}, {"identifier": "acquireLock", "parameters": "(String lockName)", "modifiers": "public", "return": "Lock", "signature": "Lock acquireLock(String lockName)", "full_signature": "public Lock acquireLock(String lockName)", "class_method_signature": "RedisCache.acquireLock(String lockName)", "testcase": false, "constructor": false}, {"identifier": "checkConnection", "parameters": "()", "modifiers": "@Override public", "return": "CheckResult", "signature": "CheckResult checkConnection()", "full_signature": "@Override public CheckResult checkConnection()", "class_method_signature": "RedisCache.checkConnection()", "testcase": false, "constructor": false}], "file": "code/extensions/caching/redis/src/main/java/com/google/cloud/broker/caching/remote/RedisCache.java"}, "focal_method": {"identifier": "delete", "parameters": "(String key)", "modifiers": "public", "return": "void", "body": "public void delete(String key) {\n        RBucket<byte[]> bucket = getClient().getBucket(key, ByteArrayCodec.INSTANCE);\n        bucket.delete();\n    }", "signature": "void delete(String key)", "full_signature": "public void delete(String key)", "class_method_signature": "RedisCache.delete(String key)", "testcase": false, "constructor": false, "invocations": ["getBucket", "getClient", "delete"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}