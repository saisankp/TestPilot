{"test_class": {"identifier": "ChecksumPipeTest", "superclass": "extends PipeTestBase<ChecksumPipe>", "interfaces": "", "fields": [{"original_string": "public static final String CHECKSUM_MD5=\"MD5\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_MD5=\"MD5\"", "var_name": "CHECKSUM_MD5"}, {"original_string": "public static final String CHECKSUM_SHA=\"SHA\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_SHA=\"SHA\"", "var_name": "CHECKSUM_SHA"}, {"original_string": "public static final String CHECKSUM_CRC32=\"CRC32\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_CRC32=\"CRC32\"", "var_name": "CHECKSUM_CRC32"}, {"original_string": "public static final String CHECKSUM_ADLER32=\"Adler32\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_ADLER32=\"Adler32\"", "var_name": "CHECKSUM_ADLER32"}, {"original_string": "private IPipeLineSession session = new PipeLineSessionBase();", "modifier": "private", "type": "IPipeLineSession", "declarator": "session = new PipeLineSessionBase()", "var_name": "session"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/ChecksumPipeTest.java"}, "test_case": {"identifier": "cantCalculate", "parameters": "()", "modifiers": "@Test(expected = PipeRunException.class) public", "return": "void", "body": "@Test(expected = PipeRunException.class)\n\tpublic void cantCalculate() throws PipeRunException {\n\t\tdoPipe(pipe, new Message((String)null), session);\n\t}", "signature": "void cantCalculate()", "full_signature": "@Test(expected = PipeRunException.class) public void cantCalculate()", "class_method_signature": "ChecksumPipeTest.cantCalculate()", "testcase": true, "constructor": false, "invocations": ["doPipe"]}, "focal_class": {"identifier": "ChecksumPipe", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "public static final String CHECKSUM_MD5=\"MD5\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_MD5=\"MD5\"", "var_name": "CHECKSUM_MD5"}, {"original_string": "public static final String CHECKSUM_SHA=\"SHA\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_SHA=\"SHA\"", "var_name": "CHECKSUM_SHA"}, {"original_string": "public static final String CHECKSUM_CRC32=\"CRC32\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_CRC32=\"CRC32\"", "var_name": "CHECKSUM_CRC32"}, {"original_string": "public static final String CHECKSUM_ADLER32=\"Adler32\";", "modifier": "public static final", "type": "String", "declarator": "CHECKSUM_ADLER32=\"Adler32\"", "var_name": "CHECKSUM_ADLER32"}, {"original_string": "private String charset=Misc.DEFAULT_INPUT_STREAM_ENCODING;", "modifier": "private", "type": "String", "declarator": "charset=Misc.DEFAULT_INPUT_STREAM_ENCODING", "var_name": "charset"}, {"original_string": "private String type=CHECKSUM_MD5;", "modifier": "private", "type": "String", "declarator": "type=CHECKSUM_MD5", "var_name": "type"}, {"original_string": "private boolean inputIsFile=false;", "modifier": "private", "type": "boolean", "declarator": "inputIsFile=false", "var_name": "inputIsFile"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "ChecksumPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "createChecksumGenerator", "parameters": "()", "modifiers": "protected", "return": "ChecksumGenerator", "signature": "ChecksumGenerator createChecksumGenerator()", "full_signature": "protected ChecksumGenerator createChecksumGenerator()", "class_method_signature": "ChecksumPipe.createChecksumGenerator()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "ChecksumPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setCharset", "parameters": "(String string)", "modifiers": "@IbisDoc({\"character encoding to be used to encode message before calculating checksum\", \"utf-8\"}) public", "return": "void", "signature": "void setCharset(String string)", "full_signature": "@IbisDoc({\"character encoding to be used to encode message before calculating checksum\", \"utf-8\"}) public void setCharset(String string)", "class_method_signature": "ChecksumPipe.setCharset(String string)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCharset()", "full_signature": "public String getCharset()", "class_method_signature": "ChecksumPipe.getCharset()", "testcase": false, "constructor": false}, {"identifier": "setType", "parameters": "(String string)", "modifiers": "@IbisDoc({\"type of checksum to be calculated. must be one of md5, sha, crc32, adler32\", \"md5\"}) public", "return": "void", "signature": "void setType(String string)", "full_signature": "@IbisDoc({\"type of checksum to be calculated. must be one of md5, sha, crc32, adler32\", \"md5\"}) public void setType(String string)", "class_method_signature": "ChecksumPipe.setType(String string)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getType()", "full_signature": "public String getType()", "class_method_signature": "ChecksumPipe.getType()", "testcase": false, "constructor": false}, {"identifier": "setInputIsFile", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"when set <code>true</code>, the input is assumed to be a filename; otherwise the input itself is used in the calculations\", \"false\"}) public", "return": "void", "signature": "void setInputIsFile(boolean b)", "full_signature": "@IbisDoc({\"when set <code>true</code>, the input is assumed to be a filename; otherwise the input itself is used in the calculations\", \"false\"}) public void setInputIsFile(boolean b)", "class_method_signature": "ChecksumPipe.setInputIsFile(boolean b)", "testcase": false, "constructor": false}, {"identifier": "isInputIsFile", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInputIsFile()", "full_signature": "public boolean isInputIsFile()", "class_method_signature": "ChecksumPipe.isInputIsFile()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/ChecksumPipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\tString result;\n\t\ttry {\n\t\t\tChecksumGenerator cg=createChecksumGenerator();\n\t\t\tif (isInputIsFile()) {\n\t\t\t\tbyte barr[]=new byte[1000];\n\t\t\t\tFileInputStream fis=new FileInputStream(message.asString());\n\t\t\t\tint c;\n\t\t\t\twhile ((c=fis.read(barr))>=0) {\n\t\t\t\t\tcg.update(barr,c);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbyte barr[];\n\t\t\t\tif (StringUtils.isEmpty(getCharset())) {\n\t\t\t\t\tbarr=message.asByteArray();\n\t\t\t\t} else {\n\t\t\t\t\tbarr=message.asByteArray(getCharset());\n\t\t\t\t}\n\t\t\t\tcg.update(barr,barr.length);\n\t\t\t}\n\t\t\tresult=cg.getResult();\n\t\t\treturn new PipeRunResult(getForward(),result);\n\t\t} catch (Exception e) {\n\t\t\tthrow new PipeRunException(this,\"cannot calculate [\"+getType()+\"]\"+(isInputIsFile()?\" on file [\"+message+\"]\":\" using charset [\"+getCharset()+\"]\"),e);\n\t\t}\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "ChecksumPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["createChecksumGenerator", "isInputIsFile", "asString", "read", "update", "isEmpty", "getCharset", "asByteArray", "asByteArray", "getCharset", "update", "getResult", "getForward", "getType", "isInputIsFile", "getCharset"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}