{"test_class": {"identifier": "UndirectedGraphImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}, {"original_string": "private UndirectedGraph<Vertex, Object> graph;", "modifier": "private", "type": "UndirectedGraph<Vertex, Object>", "declarator": "graph", "var_name": "graph"}], "file": "math/src/test/java/com/powsybl/math/graph/UndirectedGraphImplTest.java"}, "test_case": {"identifier": "testGetEdgeObjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEdgeObjects() {\n        graph.addVertex();\n        graph.addVertex();\n        int a = graph.addEdge(0, 1, \"Arrow\");\n        assertEquals(1, graph.getEdgeObjects(0, 1).size());\n        assertEquals(1, graph.getEdgeObjects(1, 0).size());\n    }", "signature": "void testGetEdgeObjects()", "full_signature": "@Test public void testGetEdgeObjects()", "class_method_signature": "UndirectedGraphImplTest.testGetEdgeObjects()", "testcase": true, "constructor": false, "invocations": ["addVertex", "addVertex", "addEdge", "assertEquals", "size", "getEdgeObjects", "assertEquals", "size", "getEdgeObjects"]}, "focal_class": {"identifier": "UndirectedGraphImpl", "superclass": "", "interfaces": "implements UndirectedGraph<V, E>", "fields": [{"original_string": "private static final int VERTICES_CAPACITY = 10;", "modifier": "private static final", "type": "int", "declarator": "VERTICES_CAPACITY = 10", "var_name": "VERTICES_CAPACITY"}, {"original_string": "private static final int EDGES_CAPACITY = 15;", "modifier": "private static final", "type": "int", "declarator": "EDGES_CAPACITY = 15", "var_name": "EDGES_CAPACITY"}, {"original_string": "private static final int NEIGHBORS_CAPACITY = 2;", "modifier": "private static final", "type": "int", "declarator": "NEIGHBORS_CAPACITY = 2", "var_name": "NEIGHBORS_CAPACITY"}, {"original_string": "private final List<Vertex<V>> vertices = new ArrayList<>(VERTICES_CAPACITY);", "modifier": "private final", "type": "List<Vertex<V>>", "declarator": "vertices = new ArrayList<>(VERTICES_CAPACITY)", "var_name": "vertices"}, {"original_string": "private final List<Edge<E>> edges = new ArrayList<>(EDGES_CAPACITY);", "modifier": "private final", "type": "List<Edge<E>>", "declarator": "edges = new ArrayList<>(EDGES_CAPACITY)", "var_name": "edges"}, {"original_string": "private TIntArrayList[] adjacencyListCache;", "modifier": "private", "type": "TIntArrayList[]", "declarator": "adjacencyListCache", "var_name": "adjacencyListCache"}, {"original_string": "private final Lock adjacencyListCacheLock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "adjacencyListCacheLock = new ReentrantLock()", "var_name": "adjacencyListCacheLock"}, {"original_string": "private final TIntHashSet availableVertices = new TIntHashSet();", "modifier": "private final", "type": "TIntHashSet", "declarator": "availableVertices = new TIntHashSet()", "var_name": "availableVertices"}, {"original_string": "private final TIntLinkedList removedEdges = new TIntLinkedList();", "modifier": "private final", "type": "TIntLinkedList", "declarator": "removedEdges = new TIntLinkedList()", "var_name": "removedEdges"}, {"original_string": "private final List<UndirectedGraphListener> listeners = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "List<UndirectedGraphListener>", "declarator": "listeners = new CopyOnWriteArrayList<>()", "var_name": "listeners"}], "methods": [{"identifier": "checkVertex", "parameters": "(int v)", "modifiers": "private", "return": "void", "signature": "void checkVertex(int v)", "full_signature": "private void checkVertex(int v)", "class_method_signature": "UndirectedGraphImpl.checkVertex(int v)", "testcase": false, "constructor": false}, {"identifier": "checkEdge", "parameters": "(int e)", "modifiers": "private", "return": "void", "signature": "void checkEdge(int e)", "full_signature": "private void checkEdge(int e)", "class_method_signature": "UndirectedGraphImpl.checkEdge(int e)", "testcase": false, "constructor": false}, {"identifier": "addVertex", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int addVertex()", "full_signature": "@Override public int addVertex()", "class_method_signature": "UndirectedGraphImpl.addVertex()", "testcase": false, "constructor": false}, {"identifier": "addVertexIfNotPresent", "parameters": "(int v)", "modifiers": "@Override public", "return": "void", "signature": "void addVertexIfNotPresent(int v)", "full_signature": "@Override public void addVertexIfNotPresent(int v)", "class_method_signature": "UndirectedGraphImpl.addVertexIfNotPresent(int v)", "testcase": false, "constructor": false}, {"identifier": "vertexExists", "parameters": "(int v)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean vertexExists(int v)", "full_signature": "@Override public boolean vertexExists(int v)", "class_method_signature": "UndirectedGraphImpl.vertexExists(int v)", "testcase": false, "constructor": false}, {"identifier": "removeVertex", "parameters": "(int v)", "modifiers": "@Override public", "return": "V", "signature": "V removeVertex(int v)", "full_signature": "@Override public V removeVertex(int v)", "class_method_signature": "UndirectedGraphImpl.removeVertex(int v)", "testcase": false, "constructor": false}, {"identifier": "cleanVertices", "parameters": "(int v)", "modifiers": "private", "return": "void", "signature": "void cleanVertices(int v)", "full_signature": "private void cleanVertices(int v)", "class_method_signature": "UndirectedGraphImpl.cleanVertices(int v)", "testcase": false, "constructor": false}, {"identifier": "getVertexCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVertexCount()", "full_signature": "@Override public int getVertexCount()", "class_method_signature": "UndirectedGraphImpl.getVertexCount()", "testcase": false, "constructor": false}, {"identifier": "removeAllVertices", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllVertices()", "full_signature": "@Override public void removeAllVertices()", "class_method_signature": "UndirectedGraphImpl.removeAllVertices()", "testcase": false, "constructor": false}, {"identifier": "addEdge", "parameters": "(int v1, int v2, E obj)", "modifiers": "@Override public", "return": "int", "signature": "int addEdge(int v1, int v2, E obj)", "full_signature": "@Override public int addEdge(int v1, int v2, E obj)", "class_method_signature": "UndirectedGraphImpl.addEdge(int v1, int v2, E obj)", "testcase": false, "constructor": false}, {"identifier": "removeEdge", "parameters": "(int e)", "modifiers": "@Override public", "return": "E", "signature": "E removeEdge(int e)", "full_signature": "@Override public E removeEdge(int e)", "class_method_signature": "UndirectedGraphImpl.removeEdge(int e)", "testcase": false, "constructor": false}, {"identifier": "removeAllEdges", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllEdges()", "full_signature": "@Override public void removeAllEdges()", "class_method_signature": "UndirectedGraphImpl.removeAllEdges()", "testcase": false, "constructor": false}, {"identifier": "getEdgeCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getEdgeCount()", "full_signature": "@Override public int getEdgeCount()", "class_method_signature": "UndirectedGraphImpl.getEdgeCount()", "testcase": false, "constructor": false}, {"identifier": "getVertices", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getVertices()", "full_signature": "@Override public int[] getVertices()", "class_method_signature": "UndirectedGraphImpl.getVertices()", "testcase": false, "constructor": false}, {"identifier": "getEdges", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] getEdges()", "full_signature": "@Override public int[] getEdges()", "class_method_signature": "UndirectedGraphImpl.getEdges()", "testcase": false, "constructor": false}, {"identifier": "getVertexCapacity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getVertexCapacity()", "full_signature": "@Override public int getVertexCapacity()", "class_method_signature": "UndirectedGraphImpl.getVertexCapacity()", "testcase": false, "constructor": false}, {"identifier": "getVerticesObj", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<V>", "signature": "Iterable<V> getVerticesObj()", "full_signature": "@Override public Iterable<V> getVerticesObj()", "class_method_signature": "UndirectedGraphImpl.getVerticesObj()", "testcase": false, "constructor": false}, {"identifier": "getVertexObjectStream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<V>", "signature": "Stream<V> getVertexObjectStream()", "full_signature": "@Override public Stream<V> getVertexObjectStream()", "class_method_signature": "UndirectedGraphImpl.getVertexObjectStream()", "testcase": false, "constructor": false}, {"identifier": "getVertexObject", "parameters": "(int v)", "modifiers": "@Override public", "return": "V", "signature": "V getVertexObject(int v)", "full_signature": "@Override public V getVertexObject(int v)", "class_method_signature": "UndirectedGraphImpl.getVertexObject(int v)", "testcase": false, "constructor": false}, {"identifier": "setVertexObject", "parameters": "(int v, V obj)", "modifiers": "@Override public", "return": "void", "signature": "void setVertexObject(int v, V obj)", "full_signature": "@Override public void setVertexObject(int v, V obj)", "class_method_signature": "UndirectedGraphImpl.setVertexObject(int v, V obj)", "testcase": false, "constructor": false}, {"identifier": "getEdgeVertex1", "parameters": "(int e)", "modifiers": "@Override public", "return": "int", "signature": "int getEdgeVertex1(int e)", "full_signature": "@Override public int getEdgeVertex1(int e)", "class_method_signature": "UndirectedGraphImpl.getEdgeVertex1(int e)", "testcase": false, "constructor": false}, {"identifier": "getEdgeVertex2", "parameters": "(int e)", "modifiers": "@Override public", "return": "int", "signature": "int getEdgeVertex2(int e)", "full_signature": "@Override public int getEdgeVertex2(int e)", "class_method_signature": "UndirectedGraphImpl.getEdgeVertex2(int e)", "testcase": false, "constructor": false}, {"identifier": "getEdgesObject", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<E>", "signature": "Iterable<E> getEdgesObject()", "full_signature": "@Override public Iterable<E> getEdgesObject()", "class_method_signature": "UndirectedGraphImpl.getEdgesObject()", "testcase": false, "constructor": false}, {"identifier": "getEdgeObjectStream", "parameters": "()", "modifiers": "@Override public", "return": "Stream<E>", "signature": "Stream<E> getEdgeObjectStream()", "full_signature": "@Override public Stream<E> getEdgeObjectStream()", "class_method_signature": "UndirectedGraphImpl.getEdgeObjectStream()", "testcase": false, "constructor": false}, {"identifier": "getEdgeObject", "parameters": "(int e)", "modifiers": "@Override public", "return": "E", "signature": "E getEdgeObject(int e)", "full_signature": "@Override public E getEdgeObject(int e)", "class_method_signature": "UndirectedGraphImpl.getEdgeObject(int e)", "testcase": false, "constructor": false}, {"identifier": "getEdgeObjects", "parameters": "(int v1, int v2)", "modifiers": "@Override public", "return": "List<E>", "signature": "List<E> getEdgeObjects(int v1, int v2)", "full_signature": "@Override public List<E> getEdgeObjects(int v1, int v2)", "class_method_signature": "UndirectedGraphImpl.getEdgeObjects(int v1, int v2)", "testcase": false, "constructor": false}, {"identifier": "getAdjacencyList", "parameters": "()", "modifiers": "private", "return": "TIntArrayList[]", "signature": "TIntArrayList[] getAdjacencyList()", "full_signature": "private TIntArrayList[] getAdjacencyList()", "class_method_signature": "UndirectedGraphImpl.getAdjacencyList()", "testcase": false, "constructor": false}, {"identifier": "invalidateAdjacencyList", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void invalidateAdjacencyList()", "full_signature": "private void invalidateAdjacencyList()", "class_method_signature": "UndirectedGraphImpl.invalidateAdjacencyList()", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(int v, Traverser traverser, boolean[] encountered)", "modifiers": "@Override public", "return": "void", "signature": "void traverse(int v, Traverser traverser, boolean[] encountered)", "full_signature": "@Override public void traverse(int v, Traverser traverser, boolean[] encountered)", "class_method_signature": "UndirectedGraphImpl.traverse(int v, Traverser traverser, boolean[] encountered)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(int v, Traverser traverser)", "modifiers": "@Override public", "return": "void", "signature": "void traverse(int v, Traverser traverser)", "full_signature": "@Override public void traverse(int v, Traverser traverser)", "class_method_signature": "UndirectedGraphImpl.traverse(int v, Traverser traverser)", "testcase": false, "constructor": false}, {"identifier": "findAllPaths", "parameters": "(int from, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled)", "modifiers": "@Override public", "return": "List<TIntArrayList>", "signature": "List<TIntArrayList> findAllPaths(int from, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled)", "full_signature": "@Override public List<TIntArrayList> findAllPaths(int from, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled)", "class_method_signature": "UndirectedGraphImpl.findAllPaths(int from, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled)", "testcase": false, "constructor": false}, {"identifier": "findAllPaths", "parameters": "(int e, int v1or2, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                                 TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "modifiers": "private", "return": "boolean", "signature": "boolean findAllPaths(int e, int v1or2, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                                 TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "full_signature": "private boolean findAllPaths(int e, int v1or2, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                                 TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "class_method_signature": "UndirectedGraphImpl.findAllPaths(int e, int v1or2, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                                 TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "testcase": false, "constructor": false}, {"identifier": "findAllPaths", "parameters": "(int v, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                              TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "modifiers": "private", "return": "void", "signature": "void findAllPaths(int v, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                              TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "full_signature": "private void findAllPaths(int v, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                              TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "class_method_signature": "UndirectedGraphImpl.findAllPaths(int v, Function<V, Boolean> pathComplete, Function<E, Boolean> pathCancelled,\n                              TIntArrayList path, BitSet encountered, List<TIntArrayList> paths)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(UndirectedGraphListener l)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(UndirectedGraphListener l)", "full_signature": "@Override public void addListener(UndirectedGraphListener l)", "class_method_signature": "UndirectedGraphImpl.addListener(UndirectedGraphListener l)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(UndirectedGraphListener l)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(UndirectedGraphListener l)", "full_signature": "@Override public void removeListener(UndirectedGraphListener l)", "class_method_signature": "UndirectedGraphImpl.removeListener(UndirectedGraphListener l)", "testcase": false, "constructor": false}, {"identifier": "notifyListener", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifyListener()", "full_signature": "private void notifyListener()", "class_method_signature": "UndirectedGraphImpl.notifyListener()", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(PrintStream out, Function<V, String> vertexToString, Function<E, String> edgeToString)", "modifiers": "@Override public", "return": "void", "signature": "void print(PrintStream out, Function<V, String> vertexToString, Function<E, String> edgeToString)", "full_signature": "@Override public void print(PrintStream out, Function<V, String> vertexToString, Function<E, String> edgeToString)", "class_method_signature": "UndirectedGraphImpl.print(PrintStream out, Function<V, String> vertexToString, Function<E, String> edgeToString)", "testcase": false, "constructor": false}], "file": "math/src/main/java/com/powsybl/math/graph/UndirectedGraphImpl.java"}, "focal_method": {"identifier": "getEdgeObjects", "parameters": "(int v1, int v2)", "modifiers": "@Override public", "return": "List<E>", "body": "@Override\n    public List<E> getEdgeObjects(int v1, int v2) {\n        checkVertex(v1);\n        checkVertex(v2);\n        List<E> edgeObjects = new ArrayList<>(1);\n        TIntArrayList[] adjacencyList = getAdjacencyList();\n        TIntArrayList adjacentEdges = adjacencyList[v1];\n        for (int i = 0; i < adjacentEdges.size(); i++) {\n            int e = adjacentEdges.getQuick(i);\n            Edge<E> edge = edges.get(e);\n            if ((edge.getV1() == v1 && edge.getV2() == v2)\n                    || (edge.getV1() == v2 && edge.getV2() == v1)) {\n                edgeObjects.add(edge.getObject());\n            }\n        }\n        return edgeObjects;\n    }", "signature": "List<E> getEdgeObjects(int v1, int v2)", "full_signature": "@Override public List<E> getEdgeObjects(int v1, int v2)", "class_method_signature": "UndirectedGraphImpl.getEdgeObjects(int v1, int v2)", "testcase": false, "constructor": false, "invocations": ["checkVertex", "checkVertex", "getAdjacencyList", "size", "getQuick", "get", "getV1", "getV2", "getV1", "getV2", "add", "getObject"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}