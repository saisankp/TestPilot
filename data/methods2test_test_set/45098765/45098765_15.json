{"test_class": {"identifier": "CompoundKeyTest", "superclass": "", "interfaces": "", "fields": [], "file": "columnfamily/src/test/java/com/puresoltechnologies/ductiledb/columnfamily/CompoundKeyTest.java"}, "test_case": {"identifier": "testDecode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDecode() {\n\tbyte[][] keyParts = CompoundKey\n\t\t.decode(new byte[] { 3, 0, 0, 0, 1, 42, 0, 0, 0, 2, 12, 13, 0, 0, 0, 3, 1, 2, 3 });\n\tassertEquals(3, keyParts.length);\n\tassertEquals(1, keyParts[0].length);\n\tassertEquals(42, keyParts[0][0]);\n\tassertEquals(2, keyParts[1].length);\n\tassertEquals(12, keyParts[1][0]);\n\tassertEquals(13, keyParts[1][1]);\n\tassertEquals(3, keyParts[2].length);\n\tassertEquals(1, keyParts[2][0]);\n\tassertEquals(2, keyParts[2][1]);\n\tassertEquals(3, keyParts[2][2]);\n    }", "signature": "void testDecode()", "full_signature": "@Test public void testDecode()", "class_method_signature": "CompoundKeyTest.testDecode()", "testcase": true, "constructor": false, "invocations": ["decode", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CompoundKey", "superclass": "extends Key", "interfaces": "", "fields": [{"original_string": "List<byte[]> parts = new ArrayList<>();", "modifier": "", "type": "List<byte[]>", "declarator": "parts = new ArrayList<>()", "var_name": "parts"}], "methods": [{"identifier": "decode", "parameters": "(byte[] key)", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] decode(byte[] key)", "full_signature": "public static byte[][] decode(byte[] key)", "class_method_signature": "CompoundKey.decode(byte[] key)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[]... keyParts)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encode(byte[]... keyParts)", "full_signature": "public static byte[] encode(byte[]... keyParts)", "class_method_signature": "CompoundKey.encode(byte[]... keyParts)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(byte[]... keyParts)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey create(byte[]... keyParts)", "full_signature": "public static CompoundKey create(byte[]... keyParts)", "class_method_signature": "CompoundKey.create(byte[]... keyParts)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(byte[] compoundKey)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey of(byte[] compoundKey)", "full_signature": "public static CompoundKey of(byte[] compoundKey)", "class_method_signature": "CompoundKey.of(byte[] compoundKey)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Key... keyParts)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey create(Key... keyParts)", "full_signature": "public static CompoundKey create(Key... keyParts)", "class_method_signature": "CompoundKey.create(Key... keyParts)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Key compoundKey)", "modifiers": "public static", "return": "CompoundKey", "signature": "CompoundKey of(Key compoundKey)", "full_signature": "public static CompoundKey of(Key compoundKey)", "class_method_signature": "CompoundKey.of(Key compoundKey)", "testcase": false, "constructor": false}, {"identifier": "CompoundKey", "parameters": "(boolean encoded, byte[]... keyParts)", "modifiers": "private", "return": "", "signature": " CompoundKey(boolean encoded, byte[]... keyParts)", "full_signature": "private  CompoundKey(boolean encoded, byte[]... keyParts)", "class_method_signature": "CompoundKey.CompoundKey(boolean encoded, byte[]... keyParts)", "testcase": false, "constructor": true}, {"identifier": "getPartNum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPartNum()", "full_signature": "public int getPartNum()", "class_method_signature": "CompoundKey.getPartNum()", "testcase": false, "constructor": false}, {"identifier": "getPart", "parameters": "(int i)", "modifiers": "public", "return": "byte[]", "signature": "byte[] getPart(int i)", "full_signature": "public byte[] getPart(int i)", "class_method_signature": "CompoundKey.getPart(int i)", "testcase": false, "constructor": false}], "file": "columnfamily/src/main/java/com/puresoltechnologies/ductiledb/columnfamily/CompoundKey.java"}, "focal_method": {"identifier": "decode", "parameters": "(byte[] key)", "modifiers": "public static", "return": "byte[][]", "body": "public static byte[][] decode(byte[] key) {\n\tint num = key[0] & 0xFF;\n\tbyte[][] keyParts = new byte[num][];\n\tint pos = 1;\n\tfor (int i = 0; i < num; ++i) {\n\t    int length = Bytes.toInt(key, pos);\n\t    pos += 4;\n\t    byte[] keyPart = new byte[length];\n\t    System.arraycopy(key, pos, keyPart, 0, length);\n\t    pos += length;\n\t    keyParts[i] = keyPart;\n\t}\n\treturn keyParts;\n    }", "signature": "byte[][] decode(byte[] key)", "full_signature": "public static byte[][] decode(byte[] key)", "class_method_signature": "CompoundKey.decode(byte[] key)", "testcase": false, "constructor": false, "invocations": ["toInt", "arraycopy"]}, "repository": {"repo_id": 45098765, "url": "https://github.com/PureSolTechnologies/DuctileDB", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 12564, "license": "licensed"}}