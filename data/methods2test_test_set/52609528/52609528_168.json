{"test_class": {"identifier": "LoggingResourceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TYPE = \"type\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}, {"original_string": "private static final String FILE = \"file\";", "modifier": "private static final", "type": "String", "declarator": "FILE = \"file\"", "var_name": "FILE"}, {"original_string": "private static final String METADATA = \"metadata\";", "modifier": "private static final", "type": "String", "declarator": "METADATA = \"metadata\"", "var_name": "METADATA"}, {"original_string": "private static final String TRANSMISSION = \"transmission\";", "modifier": "private static final", "type": "String", "declarator": "TRANSMISSION = \"transmission\"", "var_name": "TRANSMISSION"}, {"original_string": "private static final String ADDRESS = \"address\";", "modifier": "private static final", "type": "String", "declarator": "ADDRESS = \"address\"", "var_name": "ADDRESS"}, {"original_string": "private static final String EVENT_BUS = \"eventBus\";", "modifier": "private static final", "type": "String", "declarator": "EVENT_BUS = \"eventBus\"", "var_name": "EVENT_BUS"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger( LoggingResourceManagerTest.class );", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger( LoggingResourceManagerTest.class )", "var_name": "logger"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private ResourceStorage storage;", "modifier": "private", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final String LOGGING_URI = \"/playground/server/admin/v1/logging\";", "modifier": "private final", "type": "String", "declarator": "LOGGING_URI = \"/playground/server/admin/v1/logging\"", "var_name": "LOGGING_URI"}, {"original_string": "private final String INITIAL_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_logging_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INITIAL_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_inital_logging_resource\", true)", "var_name": "INITIAL_LOGGING_RESOURCE"}, {"original_string": "private final String VALID_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_logging_resource\", true);", "modifier": "private final", "type": "String", "declarator": "VALID_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_valid_logging_resource\", true)", "var_name": "VALID_LOGGING_RESOURCE"}, {"original_string": "private final String INVALID_TYPE_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_type_logging_resource\", true);", "modifier": "private final", "type": "String", "declarator": "INVALID_TYPE_LOGGING_RESOURCE = ResourcesUtils.loadResource(\"testresource_invalid_type_logging_resource\", true)", "var_name": "INVALID_TYPE_LOGGING_RESOURCE"}], "file": "gateleen-logging/src/test/java/org/swisspush/gateleen/logging/LoggingResourceManagerTest.java"}, "test_case": {"identifier": "testLoggingResourceContent", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoggingResourceContent(TestContext context){\n        storage = new MockResourceStorage(ImmutableMap.of(LOGGING_URI, VALID_LOGGING_RESOURCE));\n        LoggingResourceManager manager = new LoggingResourceManager(vertx, storage, LOGGING_URI);\n        LoggingResource loggingResource = manager.getLoggingResource();\n\n        // PayloadFilters\n        List<Map<String, String>> payloadFilterEntries = loggingResource.getPayloadFilters();\n        context.assertEquals(2, payloadFilterEntries.size());\n\n        // DestinationEntries\n        Map<String, Map<String, String>> destinationEntries = loggingResource.getDestinationEntries();\n        context.assertEquals(2, destinationEntries.size());\n        context.assertTrue(destinationEntries.containsKey(\"fileLog\"));\n        Map<String, String> fileLogProperties = destinationEntries.get(\"fileLog\");\n        assertFilterProperty(context, fileLogProperties, TYPE, FILE);\n        assertFilterProperty(context, fileLogProperties, FILE, \"requests.log\");\n        context.assertFalse(fileLogProperties.containsKey(METADATA));\n        context.assertFalse(fileLogProperties.containsKey(TRANSMISSION));\n        context.assertTrue(destinationEntries.containsKey(\"eventBusLog\"));\n        Map<String, String> eventBusLogProperties = destinationEntries.get(\"eventBusLog\");\n        assertFilterProperty(context, eventBusLogProperties, TYPE, EVENT_BUS);\n        assertFilterProperty(context, eventBusLogProperties, ADDRESS, \"some_eventbus_address\");\n        assertFilterProperty(context, eventBusLogProperties, METADATA, \"meta 1\");\n        assertFilterProperty(context, eventBusLogProperties, TRANSMISSION, \"send\");\n    }", "signature": "void testLoggingResourceContent(TestContext context)", "full_signature": "@Test public void testLoggingResourceContent(TestContext context)", "class_method_signature": "LoggingResourceManagerTest.testLoggingResourceContent(TestContext context)", "testcase": true, "constructor": false, "invocations": ["of", "getLoggingResource", "getPayloadFilters", "assertEquals", "size", "getDestinationEntries", "assertEquals", "size", "assertTrue", "containsKey", "get", "assertFilterProperty", "assertFilterProperty", "assertFalse", "containsKey", "assertFalse", "containsKey", "assertTrue", "containsKey", "get", "assertFilterProperty", "assertFilterProperty", "assertFilterProperty", "assertFilterProperty"]}, "focal_class": {"identifier": "LoggingResourceManager", "superclass": "", "interfaces": "implements LoggableResource", "fields": [{"original_string": "private static final String UPDATE_ADDRESS = \"gateleen.logging-updated\";", "modifier": "private static final", "type": "String", "declarator": "UPDATE_ADDRESS = \"gateleen.logging-updated\"", "var_name": "UPDATE_ADDRESS"}, {"original_string": "private final String loggingUri;", "modifier": "private final", "type": "String", "declarator": "loggingUri", "var_name": "loggingUri"}, {"original_string": "private final ResourceStorage storage;", "modifier": "private final", "type": "ResourceStorage", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(LoggingResourceManager.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoggingResourceManager.class)", "var_name": "log"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private LoggingResource loggingResource;", "modifier": "private", "type": "LoggingResource", "declarator": "loggingResource", "var_name": "loggingResource"}, {"original_string": "private final String loggingResourceSchema;", "modifier": "private final", "type": "String", "declarator": "loggingResourceSchema", "var_name": "loggingResourceSchema"}, {"original_string": "private boolean logConfigurationResourceChanges = false;", "modifier": "private", "type": "boolean", "declarator": "logConfigurationResourceChanges = false", "var_name": "logConfigurationResourceChanges"}], "methods": [{"identifier": "getLoggingResource", "parameters": "()", "modifiers": "public", "return": "LoggingResource", "signature": "LoggingResource getLoggingResource()", "full_signature": "public LoggingResource getLoggingResource()", "class_method_signature": "LoggingResourceManager.getLoggingResource()", "testcase": false, "constructor": false}, {"identifier": "LoggingResourceManager", "parameters": "(Vertx vertx, final ResourceStorage storage, String loggingUri)", "modifiers": "public", "return": "", "signature": " LoggingResourceManager(Vertx vertx, final ResourceStorage storage, String loggingUri)", "full_signature": "public  LoggingResourceManager(Vertx vertx, final ResourceStorage storage, String loggingUri)", "class_method_signature": "LoggingResourceManager.LoggingResourceManager(Vertx vertx, final ResourceStorage storage, String loggingUri)", "testcase": false, "constructor": true}, {"identifier": "enableResourceLogging", "parameters": "(boolean resourceLoggingEnabled)", "modifiers": "@Override public", "return": "void", "signature": "void enableResourceLogging(boolean resourceLoggingEnabled)", "full_signature": "@Override public void enableResourceLogging(boolean resourceLoggingEnabled)", "class_method_signature": "LoggingResourceManager.enableResourceLogging(boolean resourceLoggingEnabled)", "testcase": false, "constructor": false}, {"identifier": "updateLoggingResources", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateLoggingResources()", "full_signature": "private void updateLoggingResources()", "class_method_signature": "LoggingResourceManager.updateLoggingResources()", "testcase": false, "constructor": false}, {"identifier": "updateLoggingResources", "parameters": "(Buffer buffer)", "modifiers": "private", "return": "void", "signature": "void updateLoggingResources(Buffer buffer)", "full_signature": "private void updateLoggingResources(Buffer buffer)", "class_method_signature": "LoggingResourceManager.updateLoggingResources(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "handleLoggingResource", "parameters": "(final HttpServerRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean handleLoggingResource(final HttpServerRequest request)", "full_signature": "public boolean handleLoggingResource(final HttpServerRequest request)", "class_method_signature": "LoggingResourceManager.handleLoggingResource(final HttpServerRequest request)", "testcase": false, "constructor": false}, {"identifier": "extractLoggingFilterValues", "parameters": "(Buffer loggingResourceBuffer)", "modifiers": "private", "return": "void", "signature": "void extractLoggingFilterValues(Buffer loggingResourceBuffer)", "full_signature": "private void extractLoggingFilterValues(Buffer loggingResourceBuffer)", "class_method_signature": "LoggingResourceManager.extractLoggingFilterValues(Buffer loggingResourceBuffer)", "testcase": false, "constructor": false}], "file": "gateleen-logging/src/main/java/org/swisspush/gateleen/logging/LoggingResourceManager.java"}, "focal_method": {"identifier": "getLoggingResource", "parameters": "()", "modifiers": "public", "return": "LoggingResource", "body": "public LoggingResource getLoggingResource() {\n        if (loggingResource == null) {\n            loggingResource = new LoggingResource();\n        }\n        return loggingResource;\n    }", "signature": "LoggingResource getLoggingResource()", "full_signature": "public LoggingResource getLoggingResource()", "class_method_signature": "LoggingResourceManager.getLoggingResource()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}