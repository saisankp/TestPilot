{"test_class": {"identifier": "RegistrationMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RegistrationMapper mapper = Mappers.getMapper(RegistrationMapper.class);", "modifier": "private", "type": "RegistrationMapper", "declarator": "mapper = Mappers.getMapper(RegistrationMapper.class)", "var_name": "mapper"}, {"original_string": "@Mock\n    RegistrationDao dao;", "modifier": "@Mock", "type": "RegistrationDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "@Mock\n    EventMapper eventMapper;", "modifier": "@Mock", "type": "EventMapper", "declarator": "eventMapper", "var_name": "eventMapper"}, {"original_string": "@Mock\n    HandicapGroupMapper handicapGroupMapper;", "modifier": "@Mock", "type": "HandicapGroupMapper", "declarator": "handicapGroupMapper", "var_name": "handicapGroupMapper"}, {"original_string": "@Mock\n    HandicapGroupEntityService handicapGroupEntityService;", "modifier": "@Mock", "type": "HandicapGroupEntityService", "declarator": "handicapGroupEntityService", "var_name": "handicapGroupEntityService"}, {"original_string": "@Mock\n    CompetitionGroupMapper competitionGroupMapper;", "modifier": "@Mock", "type": "CompetitionGroupMapper", "declarator": "competitionGroupMapper", "var_name": "competitionGroupMapper"}, {"original_string": "@Mock\n    CompetitionGroupEntityService competitionGroupEntityService;", "modifier": "@Mock", "type": "CompetitionGroupEntityService", "declarator": "competitionGroupEntityService", "var_name": "competitionGroupEntityService"}], "file": "service/src/test/java/org/coner/core/mapper/RegistrationMapperTest.java"}, "test_case": {"identifier": "whenToApiEntityListFromDomainEntityList", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenToApiEntityListFromDomainEntityList() {\n        List<Registration> domainEntityList = Arrays.asList(DomainEntityTestUtils.fullRegistration());\n        List<RegistrationApiEntity> expected = Arrays.asList(ApiEntityTestUtils.fullRegistration());\n\n        List<RegistrationApiEntity> actual = mapper.toApiEntityList(domainEntityList);\n\n        assertThat(actual).isEqualTo(expected);\n    }", "signature": "void whenToApiEntityListFromDomainEntityList()", "full_signature": "@Test public void whenToApiEntityListFromDomainEntityList()", "class_method_signature": "RegistrationMapperTest.whenToApiEntityListFromDomainEntityList()", "testcase": true, "constructor": false, "invocations": ["asList", "fullRegistration", "asList", "fullRegistration", "toApiEntityList", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "RegistrationMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RegistrationDao dao;", "modifier": "private", "type": "RegistrationDao", "declarator": "dao", "var_name": "dao"}, {"original_string": "private EventMapper eventMapper;", "modifier": "private", "type": "EventMapper", "declarator": "eventMapper", "var_name": "eventMapper"}, {"original_string": "private HandicapGroupMapper handicapGroupMapper;", "modifier": "private", "type": "HandicapGroupMapper", "declarator": "handicapGroupMapper", "var_name": "handicapGroupMapper"}, {"original_string": "private HandicapGroupEntityService handicapGroupEntityService;", "modifier": "private", "type": "HandicapGroupEntityService", "declarator": "handicapGroupEntityService", "var_name": "handicapGroupEntityService"}, {"original_string": "private CompetitionGroupMapper competitionGroupMapper;", "modifier": "private", "type": "CompetitionGroupMapper", "declarator": "competitionGroupMapper", "var_name": "competitionGroupMapper"}, {"original_string": "private CompetitionGroupEntityService competitionGroupEntityService;", "modifier": "private", "type": "CompetitionGroupEntityService", "declarator": "competitionGroupEntityService", "var_name": "competitionGroupEntityService"}], "methods": [{"identifier": "toDomainAddPayload", "parameters": "(AddRegistrationRequest apiAddRequest, String eventId)", "modifiers": "@Mappings({ @Mapping(source = \"apiAddRequest.handicapGroupId\", target = \"handicapGroup\"), @Mapping(source = \"apiAddRequest.competitionGroupId\", target = \"competitionGroup\") }) public abstract", "return": "RegistrationAddPayload", "signature": "RegistrationAddPayload toDomainAddPayload(AddRegistrationRequest apiAddRequest, String eventId)", "full_signature": "@Mappings({ @Mapping(source = \"apiAddRequest.handicapGroupId\", target = \"handicapGroup\"), @Mapping(source = \"apiAddRequest.competitionGroupId\", target = \"competitionGroup\") }) public abstract RegistrationAddPayload toDomainAddPayload(AddRegistrationRequest apiAddRequest, String eventId)", "class_method_signature": "RegistrationMapper.toDomainAddPayload(AddRegistrationRequest apiAddRequest, String eventId)", "testcase": false, "constructor": false}, {"identifier": "toApiEntity", "parameters": "(Registration domainEntity)", "modifiers": "@Mappings({ @Mapping(source = \"domainEntity.handicapGroup.id\", target = \"handicapGroupId\"), @Mapping(source = \"domainEntity.competitionGroup.id\", target = \"competitionGroupId\") }) public abstract", "return": "RegistrationApiEntity", "signature": "RegistrationApiEntity toApiEntity(Registration domainEntity)", "full_signature": "@Mappings({ @Mapping(source = \"domainEntity.handicapGroup.id\", target = \"handicapGroupId\"), @Mapping(source = \"domainEntity.competitionGroup.id\", target = \"competitionGroupId\") }) public abstract RegistrationApiEntity toApiEntity(Registration domainEntity)", "class_method_signature": "RegistrationMapper.toApiEntity(Registration domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toApiEntityList", "parameters": "(List<Registration> domainEntityList)", "modifiers": "public abstract", "return": "List<RegistrationApiEntity>", "signature": "List<RegistrationApiEntity> toApiEntityList(List<Registration> domainEntityList)", "full_signature": "public abstract List<RegistrationApiEntity> toApiEntityList(List<Registration> domainEntityList)", "class_method_signature": "RegistrationMapper.toApiEntityList(List<Registration> domainEntityList)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(RegistrationAddPayload domainAddPayload)", "modifiers": "public abstract", "return": "RegistrationHibernateEntity", "signature": "RegistrationHibernateEntity toHibernateEntity(RegistrationAddPayload domainAddPayload)", "full_signature": "public abstract RegistrationHibernateEntity toHibernateEntity(RegistrationAddPayload domainAddPayload)", "class_method_signature": "RegistrationMapper.toHibernateEntity(RegistrationAddPayload domainAddPayload)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(Registration domainEntity)", "modifiers": "public", "return": "RegistrationHibernateEntity", "signature": "RegistrationHibernateEntity toHibernateEntity(Registration domainEntity)", "full_signature": "public RegistrationHibernateEntity toHibernateEntity(Registration domainEntity)", "class_method_signature": "RegistrationMapper.toHibernateEntity(Registration domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(Event event)", "modifiers": "public", "return": "EventHibernateEntity", "signature": "EventHibernateEntity toHibernateEntity(Event event)", "full_signature": "public EventHibernateEntity toHibernateEntity(Event event)", "class_method_signature": "RegistrationMapper.toHibernateEntity(Event event)", "testcase": false, "constructor": false}, {"identifier": "updateHibernateEntity", "parameters": "(\n            Registration domainEntity,\n            @MappingTarget RegistrationHibernateEntity hibernateEntity\n    )", "modifiers": "public abstract", "return": "void", "signature": "void updateHibernateEntity(\n            Registration domainEntity,\n            @MappingTarget RegistrationHibernateEntity hibernateEntity\n    )", "full_signature": "public abstract void updateHibernateEntity(\n            Registration domainEntity,\n            @MappingTarget RegistrationHibernateEntity hibernateEntity\n    )", "class_method_signature": "RegistrationMapper.updateHibernateEntity(\n            Registration domainEntity,\n            @MappingTarget RegistrationHibernateEntity hibernateEntity\n    )", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(RegistrationHibernateEntity hibernateEntity)", "modifiers": "public abstract", "return": "Registration", "signature": "Registration toDomainEntity(RegistrationHibernateEntity hibernateEntity)", "full_signature": "public abstract Registration toDomainEntity(RegistrationHibernateEntity hibernateEntity)", "class_method_signature": "RegistrationMapper.toDomainEntity(RegistrationHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(EventHibernateEntity eventHibernateEntity)", "modifiers": "public", "return": "Event", "signature": "Event toDomainEntity(EventHibernateEntity eventHibernateEntity)", "full_signature": "public Event toDomainEntity(EventHibernateEntity eventHibernateEntity)", "class_method_signature": "RegistrationMapper.toDomainEntity(EventHibernateEntity eventHibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntityList", "parameters": "(List<RegistrationHibernateEntity> hibernateEntityList)", "modifiers": "public abstract", "return": "List<Registration>", "signature": "List<Registration> toDomainEntityList(List<RegistrationHibernateEntity> hibernateEntityList)", "full_signature": "public abstract List<Registration> toDomainEntityList(List<RegistrationHibernateEntity> hibernateEntityList)", "class_method_signature": "RegistrationMapper.toDomainEntityList(List<RegistrationHibernateEntity> hibernateEntityList)", "testcase": false, "constructor": false}, {"identifier": "toDomainAddPayload", "parameters": "(\n            AddRegistrationRequest.AddPerson addPerson\n    )", "modifiers": "public abstract", "return": "RegistrationAddPayload.PersonAddPayload", "signature": "RegistrationAddPayload.PersonAddPayload toDomainAddPayload(\n            AddRegistrationRequest.AddPerson addPerson\n    )", "full_signature": "public abstract RegistrationAddPayload.PersonAddPayload toDomainAddPayload(\n            AddRegistrationRequest.AddPerson addPerson\n    )", "class_method_signature": "RegistrationMapper.toDomainAddPayload(\n            AddRegistrationRequest.AddPerson addPerson\n    )", "testcase": false, "constructor": false}, {"identifier": "toApiEntity", "parameters": "(Person domainEntity)", "modifiers": "public abstract", "return": "PersonApiEntity", "signature": "PersonApiEntity toApiEntity(Person domainEntity)", "full_signature": "public abstract PersonApiEntity toApiEntity(Person domainEntity)", "class_method_signature": "RegistrationMapper.toApiEntity(Person domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(RegistrationAddPayload.PersonAddPayload addPayload)", "modifiers": "public abstract", "return": "PersonHibernateEntity", "signature": "PersonHibernateEntity toHibernateEntity(RegistrationAddPayload.PersonAddPayload addPayload)", "full_signature": "public abstract PersonHibernateEntity toHibernateEntity(RegistrationAddPayload.PersonAddPayload addPayload)", "class_method_signature": "RegistrationMapper.toHibernateEntity(RegistrationAddPayload.PersonAddPayload addPayload)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(Person domainEntity)", "modifiers": "public abstract", "return": "PersonHibernateEntity", "signature": "PersonHibernateEntity toHibernateEntity(Person domainEntity)", "full_signature": "public abstract PersonHibernateEntity toHibernateEntity(Person domainEntity)", "class_method_signature": "RegistrationMapper.toHibernateEntity(Person domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(PersonHibernateEntity hibernateEntity)", "modifiers": "public abstract", "return": "Person", "signature": "Person toDomainEntity(PersonHibernateEntity hibernateEntity)", "full_signature": "public abstract Person toDomainEntity(PersonHibernateEntity hibernateEntity)", "class_method_signature": "RegistrationMapper.toDomainEntity(PersonHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainAddPayload", "parameters": "(\n            AddRegistrationRequest.AddCar addCar\n    )", "modifiers": "public abstract", "return": "RegistrationAddPayload.CarAddPayload", "signature": "RegistrationAddPayload.CarAddPayload toDomainAddPayload(\n            AddRegistrationRequest.AddCar addCar\n    )", "full_signature": "public abstract RegistrationAddPayload.CarAddPayload toDomainAddPayload(\n            AddRegistrationRequest.AddCar addCar\n    )", "class_method_signature": "RegistrationMapper.toDomainAddPayload(\n            AddRegistrationRequest.AddCar addCar\n    )", "testcase": false, "constructor": false}, {"identifier": "toApiEntity", "parameters": "(Car domainEntity)", "modifiers": "public abstract", "return": "CarApiEntity", "signature": "CarApiEntity toApiEntity(Car domainEntity)", "full_signature": "public abstract CarApiEntity toApiEntity(Car domainEntity)", "class_method_signature": "RegistrationMapper.toApiEntity(Car domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(RegistrationAddPayload.CarAddPayload addPayload)", "modifiers": "public abstract", "return": "CarHibernateEntity", "signature": "CarHibernateEntity toHibernateEntity(RegistrationAddPayload.CarAddPayload addPayload)", "full_signature": "public abstract CarHibernateEntity toHibernateEntity(RegistrationAddPayload.CarAddPayload addPayload)", "class_method_signature": "RegistrationMapper.toHibernateEntity(RegistrationAddPayload.CarAddPayload addPayload)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(Car domainEntity)", "modifiers": "public abstract", "return": "CarHibernateEntity", "signature": "CarHibernateEntity toHibernateEntity(Car domainEntity)", "full_signature": "public abstract CarHibernateEntity toHibernateEntity(Car domainEntity)", "class_method_signature": "RegistrationMapper.toHibernateEntity(Car domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(CarHibernateEntity hibernateEntity)", "modifiers": "public abstract", "return": "Car", "signature": "Car toDomainEntity(CarHibernateEntity hibernateEntity)", "full_signature": "public abstract Car toDomainEntity(CarHibernateEntity hibernateEntity)", "class_method_signature": "RegistrationMapper.toDomainEntity(CarHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "toHandicapGroupDomainEntity", "parameters": "(String handicapGroupId)", "modifiers": "public", "return": "HandicapGroup", "signature": "HandicapGroup toHandicapGroupDomainEntity(String handicapGroupId)", "full_signature": "public HandicapGroup toHandicapGroupDomainEntity(String handicapGroupId)", "class_method_signature": "RegistrationMapper.toHandicapGroupDomainEntity(String handicapGroupId)", "testcase": false, "constructor": false}, {"identifier": "toCompetitionGroupDomainEntity", "parameters": "(String competitionGroupId)", "modifiers": "public", "return": "CompetitionGroup", "signature": "CompetitionGroup toCompetitionGroupDomainEntity(String competitionGroupId)", "full_signature": "public CompetitionGroup toCompetitionGroupDomainEntity(String competitionGroupId)", "class_method_signature": "RegistrationMapper.toCompetitionGroupDomainEntity(String competitionGroupId)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(HandicapGroup domainEntity)", "modifiers": "public", "return": "HandicapGroupHibernateEntity", "signature": "HandicapGroupHibernateEntity toHibernateEntity(HandicapGroup domainEntity)", "full_signature": "public HandicapGroupHibernateEntity toHibernateEntity(HandicapGroup domainEntity)", "class_method_signature": "RegistrationMapper.toHibernateEntity(HandicapGroup domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toHibernateEntity", "parameters": "(CompetitionGroup domainEntity)", "modifiers": "public", "return": "CompetitionGroupHibernateEntity", "signature": "CompetitionGroupHibernateEntity toHibernateEntity(CompetitionGroup domainEntity)", "full_signature": "public CompetitionGroupHibernateEntity toHibernateEntity(CompetitionGroup domainEntity)", "class_method_signature": "RegistrationMapper.toHibernateEntity(CompetitionGroup domainEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(HandicapGroupHibernateEntity hibernateEntity)", "modifiers": "public", "return": "HandicapGroup", "signature": "HandicapGroup toDomainEntity(HandicapGroupHibernateEntity hibernateEntity)", "full_signature": "public HandicapGroup toDomainEntity(HandicapGroupHibernateEntity hibernateEntity)", "class_method_signature": "RegistrationMapper.toDomainEntity(HandicapGroupHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "toDomainEntity", "parameters": "(CompetitionGroupHibernateEntity hibernateEntity)", "modifiers": "public", "return": "CompetitionGroup", "signature": "CompetitionGroup toDomainEntity(CompetitionGroupHibernateEntity hibernateEntity)", "full_signature": "public CompetitionGroup toDomainEntity(CompetitionGroupHibernateEntity hibernateEntity)", "class_method_signature": "RegistrationMapper.toDomainEntity(CompetitionGroupHibernateEntity hibernateEntity)", "testcase": false, "constructor": false}, {"identifier": "setDao", "parameters": "(RegistrationDao dao)", "modifiers": "public", "return": "void", "signature": "void setDao(RegistrationDao dao)", "full_signature": "public void setDao(RegistrationDao dao)", "class_method_signature": "RegistrationMapper.setDao(RegistrationDao dao)", "testcase": false, "constructor": false}, {"identifier": "setEventMapper", "parameters": "(EventMapper eventMapper)", "modifiers": "public", "return": "void", "signature": "void setEventMapper(EventMapper eventMapper)", "full_signature": "public void setEventMapper(EventMapper eventMapper)", "class_method_signature": "RegistrationMapper.setEventMapper(EventMapper eventMapper)", "testcase": false, "constructor": false}, {"identifier": "setHandicapGroupMapper", "parameters": "(HandicapGroupMapper handicapGroupMapper)", "modifiers": "public", "return": "void", "signature": "void setHandicapGroupMapper(HandicapGroupMapper handicapGroupMapper)", "full_signature": "public void setHandicapGroupMapper(HandicapGroupMapper handicapGroupMapper)", "class_method_signature": "RegistrationMapper.setHandicapGroupMapper(HandicapGroupMapper handicapGroupMapper)", "testcase": false, "constructor": false}, {"identifier": "setHandicapGroupEntityService", "parameters": "(HandicapGroupEntityService handicapGroupEntityService)", "modifiers": "public", "return": "void", "signature": "void setHandicapGroupEntityService(HandicapGroupEntityService handicapGroupEntityService)", "full_signature": "public void setHandicapGroupEntityService(HandicapGroupEntityService handicapGroupEntityService)", "class_method_signature": "RegistrationMapper.setHandicapGroupEntityService(HandicapGroupEntityService handicapGroupEntityService)", "testcase": false, "constructor": false}, {"identifier": "setCompetitionGroupMapper", "parameters": "(CompetitionGroupMapper competitionGroupMapper)", "modifiers": "public", "return": "void", "signature": "void setCompetitionGroupMapper(CompetitionGroupMapper competitionGroupMapper)", "full_signature": "public void setCompetitionGroupMapper(CompetitionGroupMapper competitionGroupMapper)", "class_method_signature": "RegistrationMapper.setCompetitionGroupMapper(CompetitionGroupMapper competitionGroupMapper)", "testcase": false, "constructor": false}, {"identifier": "setCompetitionGroupEntityService", "parameters": "(CompetitionGroupEntityService competitionGroupEntityService)", "modifiers": "public", "return": "void", "signature": "void setCompetitionGroupEntityService(CompetitionGroupEntityService competitionGroupEntityService)", "full_signature": "public void setCompetitionGroupEntityService(CompetitionGroupEntityService competitionGroupEntityService)", "class_method_signature": "RegistrationMapper.setCompetitionGroupEntityService(CompetitionGroupEntityService competitionGroupEntityService)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/mapper/RegistrationMapper.java"}, "focal_method": {"identifier": "toApiEntityList", "parameters": "(List<Registration> domainEntityList)", "modifiers": "public abstract", "return": "List<RegistrationApiEntity>", "body": "public abstract List<RegistrationApiEntity> toApiEntityList(List<Registration> domainEntityList);", "signature": "List<RegistrationApiEntity> toApiEntityList(List<Registration> domainEntityList)", "full_signature": "public abstract List<RegistrationApiEntity> toApiEntityList(List<Registration> domainEntityList)", "class_method_signature": "RegistrationMapper.toApiEntityList(List<Registration> domainEntityList)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}