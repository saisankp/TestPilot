{"test_class": {"identifier": "WrapperGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/MessageProcessing/WrapperGenerator/src/test/java/info/smart_tools/smartactors/message_processing/wrapper_generator/WrapperGeneratorTest.java"}, "test_case": {"identifier": "checkInvalidArgumentExceptionOnTargetInterfaceNull", "parameters": "()", "modifiers": "@Test (expected = InvalidArgumentException.class) public", "return": "void", "body": "@Test (expected = InvalidArgumentException.class)\n    public void checkInvalidArgumentExceptionOnTargetInterfaceNull()\n            throws Exception {\n        IWrapperGenerator wg = new WrapperGenerator(null);\n        wg.generate(null);\n        fail();\n    }", "signature": "void checkInvalidArgumentExceptionOnTargetInterfaceNull()", "full_signature": "@Test (expected = InvalidArgumentException.class) public void checkInvalidArgumentExceptionOnTargetInterfaceNull()", "class_method_signature": "WrapperGeneratorTest.checkInvalidArgumentExceptionOnTargetInterfaceNull()", "testcase": true, "constructor": false, "invocations": ["generate", "fail"]}, "focal_class": {"identifier": "WrapperGenerator", "superclass": "", "interfaces": "implements IWrapperGenerator", "fields": [{"original_string": "private IClassGenerator<String> classGenerator;", "modifier": "private", "type": "IClassGenerator<String>", "declarator": "classGenerator", "var_name": "classGenerator"}], "methods": [{"identifier": "WrapperGenerator", "parameters": "(final ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " WrapperGenerator(final ClassLoader classLoader)", "full_signature": "public  WrapperGenerator(final ClassLoader classLoader)", "class_method_signature": "WrapperGenerator.WrapperGenerator(final ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(final Class<T> targetInterface)", "modifiers": "@Override public", "return": "T", "signature": "T generate(final Class<T> targetInterface)", "full_signature": "@Override public T generate(final Class<T> targetInterface)", "class_method_signature": "WrapperGenerator.generate(final Class<T> targetInterface)", "testcase": false, "constructor": false}, {"identifier": "generateClass", "parameters": "(final Class<T> targetInterface)", "modifiers": "private", "return": "Class<T>", "signature": "Class<T> generateClass(final Class<T> targetInterface)", "full_signature": "private Class<T> generateClass(final Class<T> targetInterface)", "class_method_signature": "WrapperGenerator.generateClass(final Class<T> targetInterface)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/WrapperGenerator/src/main/java/info/smart_tools/smartactors/message_processing/wrapper_generator/WrapperGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(final Class<T> targetInterface)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T generate(final Class<T> targetInterface)\n            throws InvalidArgumentException, WrapperGeneratorException {\n        T instance = null;\n\n        if (null == targetInterface) {\n            throw new InvalidArgumentException(\"Target class should not be null!\");\n        }\n        if (!targetInterface.isInterface()) {\n            throw new InvalidArgumentException(\"Target class should be an interface!\");\n        }\n\n        try {\n            instance = IOC.resolve(\n                    IOC.resolve(IOC.getKeyForKeyStorage(), targetInterface.getCanonicalName() + \"wrapper\")\n            );\n        } catch (ResolutionException e) {\n            // do nothing\n            // ToDo: need refactoring\n        }\n        if (null != instance) {\n            return instance;\n        }\n\n        try {\n            Class<T> clazz = generateClass(targetInterface);\n\n            // May be later CreateNewInstanceStrategy will be replaced by GetInstanceFromPoolStrategy\n            // ToDo: replace this strategy to the future plugin for WrapperGenerator\n            IOC.register(\n                    IOC.resolve(IOC.getKeyForKeyStorage(), targetInterface.getCanonicalName() + \"wrapper\"),\n                    new ApplyFunctionToArgumentsStrategy(\n                            (arg) ->  {\n                                try {\n                                    return clazz.newInstance();\n                                } catch (Throwable e) {\n                                    throw new RuntimeException(\"Error on creation new instance.\", e);\n                                }\n                            }\n                    )\n            );\n\n            return IOC.resolve(\n                    IOC.resolve(IOC.getKeyForKeyStorage(), targetInterface.getCanonicalName() + \"wrapper\")\n            );\n        } catch (Throwable e) {\n            throw new WrapperGeneratorException(\n                    \"Could not implement wrapper interface because of the following error:\",\n                    e\n            );\n        }\n    }", "signature": "T generate(final Class<T> targetInterface)", "full_signature": "@Override public T generate(final Class<T> targetInterface)", "class_method_signature": "WrapperGenerator.generate(final Class<T> targetInterface)", "testcase": false, "constructor": false, "invocations": ["isInterface", "resolve", "resolve", "getKeyForKeyStorage", "getCanonicalName", "generateClass", "register", "resolve", "getKeyForKeyStorage", "getCanonicalName", "newInstance", "resolve", "resolve", "getKeyForKeyStorage", "getCanonicalName"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}