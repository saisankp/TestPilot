{"test_class": {"identifier": "ParameterDAOTest", "superclass": "extends DatabaseTest", "interfaces": "", "fields": [], "file": "smartparam-repository-jdbc/src/test/java/org/smartparam/repository/jdbc/dao/ParameterDAOTest.java"}, "test_case": {"identifier": "shouldReturnFilteredListOfParameterNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnFilteredListOfParameterNames() {\n        // given\n        database().withParameters(5).build();\n        ParameterDAO parameterDAO = get(ParameterDAO.class);\n        ParameterFilter filter = new ParameterFilter(\"*4\");\n\n        // when\n        List<String> parameters = parameterDAO.getParameterNames(filter);\n\n        // then\n        assertThat(parameters).containsExactly(\"parameter4\");\n    }", "signature": "void shouldReturnFilteredListOfParameterNames()", "full_signature": "@Test public void shouldReturnFilteredListOfParameterNames()", "class_method_signature": "ParameterDAOTest.shouldReturnFilteredListOfParameterNames()", "testcase": true, "constructor": false, "invocations": ["build", "withParameters", "database", "get", "getParameterNames", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "ParameterDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final JdbcConfig configuration;", "modifier": "private final", "type": "JdbcConfig", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final SimpleQueryRunner simpleQueryRunner;", "modifier": "private final", "type": "SimpleQueryRunner", "declarator": "simpleQueryRunner", "var_name": "simpleQueryRunner"}], "methods": [{"identifier": "ParameterDAO", "parameters": "(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "modifiers": "public", "return": "", "signature": " ParameterDAO(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "full_signature": "public  ParameterDAO(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "class_method_signature": "ParameterDAO.ParameterDAO(JdbcConfig configuration, SimpleQueryRunner simpleQueryRunner)", "testcase": false, "constructor": true}, {"identifier": "insert", "parameters": "(QueryRunner queryRunner, Parameter parameter)", "modifiers": "public", "return": "long", "signature": "long insert(QueryRunner queryRunner, Parameter parameter)", "full_signature": "public long insert(QueryRunner queryRunner, Parameter parameter)", "class_method_signature": "ParameterDAO.insert(QueryRunner queryRunner, Parameter parameter)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(QueryRunner queryRunner, String parameterName)", "modifiers": "public", "return": "void", "signature": "void delete(QueryRunner queryRunner, String parameterName)", "full_signature": "public void delete(QueryRunner queryRunner, String parameterName)", "class_method_signature": "ParameterDAO.delete(QueryRunner queryRunner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getParameterNames()", "full_signature": "public Set<String> getParameterNames()", "class_method_signature": "ParameterDAO.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "(ParameterFilter filter)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getParameterNames(ParameterFilter filter)", "full_signature": "public List<String> getParameterNames(ParameterFilter filter)", "class_method_signature": "ParameterDAO.getParameterNames(ParameterFilter filter)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(QueryRunner queryRunner, String parameterName)", "modifiers": "public", "return": "JdbcParameter", "signature": "JdbcParameter getParameter(QueryRunner queryRunner, String parameterName)", "full_signature": "public JdbcParameter getParameter(QueryRunner queryRunner, String parameterName)", "class_method_signature": "ParameterDAO.getParameter(QueryRunner queryRunner, String parameterName)", "testcase": false, "constructor": false}, {"identifier": "parameterExists", "parameters": "(String parameterName)", "modifiers": "public", "return": "boolean", "signature": "boolean parameterExists(String parameterName)", "full_signature": "public boolean parameterExists(String parameterName)", "class_method_signature": "ParameterDAO.parameterExists(String parameterName)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(QueryRunner queryRunner, String parameterName, Parameter parameter)", "modifiers": "public", "return": "void", "signature": "void update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "full_signature": "public void update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "class_method_signature": "ParameterDAO.update(QueryRunner queryRunner, String parameterName, Parameter parameter)", "testcase": false, "constructor": false}], "file": "smartparam-repository-jdbc/src/main/java/org/smartparam/repository/jdbc/dao/ParameterDAO.java"}, "focal_method": {"identifier": "getParameterNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "body": "public Set<String> getParameterNames() {\n        SelectQuery query = QueryFactory.select(\"name\").from(configuration.parameterEntityName());\n        return new HashSet<String>(simpleQueryRunner.queryList(query, new StringMapper()));\n    }", "signature": "Set<String> getParameterNames()", "full_signature": "public Set<String> getParameterNames()", "class_method_signature": "ParameterDAO.getParameterNames()", "testcase": false, "constructor": false, "invocations": ["from", "select", "parameterEntityName", "queryList"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}