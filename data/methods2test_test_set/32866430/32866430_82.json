{"test_class": {"identifier": "SecretsResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "private static final ApiDate NOWPLUS = new ApiDate(NOW.toEpochSecond() + 10000);", "modifier": "private static final", "type": "ApiDate", "declarator": "NOWPLUS = new ApiDate(NOW.toEpochSecond() + 10000)", "var_name": "NOWPLUS"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "@Mock SecretDAO secretDAO;", "modifier": "@Mock", "type": "SecretDAO", "declarator": "secretDAO", "var_name": "secretDAO"}, {"original_string": "@Mock SecretController secretController;", "modifier": "@Mock", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "User user = User.named(\"user\");", "modifier": "", "type": "User", "declarator": "user = User.named(\"user\")", "var_name": "user"}, {"original_string": "ImmutableMap<String, String> emptyMap = ImmutableMap.of();", "modifier": "", "type": "ImmutableMap<String, String>", "declarator": "emptyMap = ImmutableMap.of()", "var_name": "emptyMap"}, {"original_string": "Secret secret = new Secret(22, \"name\", \"desc\", () -> \"secret\", \"checksum\", NOW, \"creator\", NOW,\n      \"updater\", emptyMap, null, null, 1136214245, 1L, NOW, \"user\");", "modifier": "", "type": "Secret", "declarator": "secret = new Secret(22, \"name\", \"desc\", () -> \"secret\", \"checksum\", NOW, \"creator\", NOW,\n      \"updater\", emptyMap, null, null, 1136214245, 1L, NOW, \"user\")", "var_name": "secret"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}, {"original_string": "SecretsResource resource;", "modifier": "", "type": "SecretsResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/keywhiz/service/resources/admin/SecretsResourceTest.java"}, "test_case": {"identifier": "triesToCreateDuplicateSecret", "parameters": "()", "modifiers": "@Test(expected = ConflictException.class) public", "return": "void", "body": "@Test(expected = ConflictException.class)\n  public void triesToCreateDuplicateSecret() throws Exception {\n    SecretController.SecretBuilder secretBuilder = mock(SecretController.SecretBuilder.class);\n    when(secretController.builder(\"name\", \"content\", user.getName(), 0)).thenReturn(secretBuilder);\n    DataAccessException exception = new DataAccessException(\"\");\n    doThrow(exception).when(secretBuilder).create();\n\n    CreateSecretRequestV2 req = CreateSecretRequestV2.builder()\n        .name(\"name\")\n        .description(\"desc\")\n        .content(\"content\")\n        .build();\n    resource.createSecret(user, req);\n  }", "signature": "void triesToCreateDuplicateSecret()", "full_signature": "@Test(expected = ConflictException.class) public void triesToCreateDuplicateSecret()", "class_method_signature": "SecretsResourceTest.triesToCreateDuplicateSecret()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "builder", "getName", "create", "when", "doThrow", "build", "content", "description", "name", "builder", "createSecret"]}, "focal_class": {"identifier": "SecretsResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SecretsResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SecretsResource.class)", "var_name": "logger"}, {"original_string": "private final SecretController secretController;", "modifier": "private final", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "private final AclDAO aclDAOReadOnly;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAOReadOnly", "var_name": "aclDAOReadOnly"}, {"original_string": "private final SecretDAO secretDAOReadWrite;", "modifier": "private final", "type": "SecretDAO", "declarator": "secretDAOReadWrite", "var_name": "secretDAOReadWrite"}, {"original_string": "private final SecretDAO secretDAOReadOnly;", "modifier": "private final", "type": "SecretDAO", "declarator": "secretDAOReadOnly", "var_name": "secretDAOReadOnly"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "SecretsResource", "parameters": "(SecretController secretController, AclDAOFactory aclDAOFactory,\n      SecretDAOFactory secretDAOFactory, AuditLog auditLog)", "modifiers": "@SuppressWarnings(\"unused\") @Inject public", "return": "", "signature": " SecretsResource(SecretController secretController, AclDAOFactory aclDAOFactory,\n      SecretDAOFactory secretDAOFactory, AuditLog auditLog)", "full_signature": "@SuppressWarnings(\"unused\") @Inject public  SecretsResource(SecretController secretController, AclDAOFactory aclDAOFactory,\n      SecretDAOFactory secretDAOFactory, AuditLog auditLog)", "class_method_signature": "SecretsResource.SecretsResource(SecretController secretController, AclDAOFactory aclDAOFactory,\n      SecretDAOFactory secretDAOFactory, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "SecretsResource", "parameters": "(SecretController secretController, AclDAO aclDAOReadOnly,\n      SecretDAO secretDAOReadWrite, AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " SecretsResource(SecretController secretController, AclDAO aclDAOReadOnly,\n      SecretDAO secretDAOReadWrite, AuditLog auditLog)", "full_signature": "@VisibleForTesting  SecretsResource(SecretController secretController, AclDAO aclDAOReadOnly,\n      SecretDAO secretDAOReadWrite, AuditLog auditLog)", "class_method_signature": "SecretsResource.SecretsResource(SecretController secretController, AclDAO aclDAOReadOnly,\n      SecretDAO secretDAOReadWrite, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "findSecrets", "parameters": "(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name,\n      @DefaultValue(\"\") @QueryParam(\"nameOnly\") String nameOnly, @QueryParam(\"idx\") Integer idx,\n      @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") Boolean newestFirst)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "signature": "Response findSecrets(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name,\n      @DefaultValue(\"\") @QueryParam(\"nameOnly\") String nameOnly, @QueryParam(\"idx\") Integer idx,\n      @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") Boolean newestFirst)", "full_signature": "@Timed @ExceptionMetered @GET public Response findSecrets(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name,\n      @DefaultValue(\"\") @QueryParam(\"nameOnly\") String nameOnly, @QueryParam(\"idx\") Integer idx,\n      @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") Boolean newestFirst)", "class_method_signature": "SecretsResource.findSecrets(@Auth User user, @DefaultValue(\"\") @QueryParam(\"name\") String name,\n      @DefaultValue(\"\") @QueryParam(\"nameOnly\") String nameOnly, @QueryParam(\"idx\") Integer idx,\n      @QueryParam(\"num\") Integer num,\n      @DefaultValue(\"true\") @QueryParam(\"newestFirst\") Boolean newestFirst)", "testcase": false, "constructor": false}, {"identifier": "validateArguments", "parameters": "(String name, String nameOnly, Integer idx, Integer num)", "modifiers": "private", "return": "void", "signature": "void validateArguments(String name, String nameOnly, Integer idx, Integer num)", "full_signature": "private void validateArguments(String name, String nameOnly, Integer idx, Integer num)", "class_method_signature": "SecretsResource.validateArguments(String name, String nameOnly, Integer idx, Integer num)", "testcase": false, "constructor": false}, {"identifier": "listSecrets", "parameters": "(@Auth User user)", "modifiers": "protected", "return": "List<SanitizedSecret>", "signature": "List<SanitizedSecret> listSecrets(@Auth User user)", "full_signature": "protected List<SanitizedSecret> listSecrets(@Auth User user)", "class_method_signature": "SecretsResource.listSecrets(@Auth User user)", "testcase": false, "constructor": false}, {"identifier": "listSecretsNameOnly", "parameters": "(@Auth User user)", "modifiers": "protected", "return": "List<SanitizedSecret>", "signature": "List<SanitizedSecret> listSecretsNameOnly(@Auth User user)", "full_signature": "protected List<SanitizedSecret> listSecretsNameOnly(@Auth User user)", "class_method_signature": "SecretsResource.listSecretsNameOnly(@Auth User user)", "testcase": false, "constructor": false}, {"identifier": "listSecretsBatched", "parameters": "(@Auth User user, int idx, int num,\n      boolean newestFirst)", "modifiers": "protected", "return": "List<SanitizedSecret>", "signature": "List<SanitizedSecret> listSecretsBatched(@Auth User user, int idx, int num,\n      boolean newestFirst)", "full_signature": "protected List<SanitizedSecret> listSecretsBatched(@Auth User user, int idx, int num,\n      boolean newestFirst)", "class_method_signature": "SecretsResource.listSecretsBatched(@Auth User user, int idx, int num,\n      boolean newestFirst)", "testcase": false, "constructor": false}, {"identifier": "retrieveSecret", "parameters": "(@Auth User user, String name)", "modifiers": "protected", "return": "SanitizedSecret", "signature": "SanitizedSecret retrieveSecret(@Auth User user, String name)", "full_signature": "protected SanitizedSecret retrieveSecret(@Auth User user, String name)", "class_method_signature": "SecretsResource.retrieveSecret(@Auth User user, String name)", "testcase": false, "constructor": false}, {"identifier": "createSecret", "parameters": "(@Auth User user, @Valid CreateSecretRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response createSecret(@Auth User user, @Valid CreateSecretRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createSecret(@Auth User user, @Valid CreateSecretRequestV2 request)", "class_method_signature": "SecretsResource.createSecret(@Auth User user, @Valid CreateSecretRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateSecret", "parameters": "(@Auth User user, @PathParam(\"name\") String secretName,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "modifiers": "@Path(\"{name}\") @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response createOrUpdateSecret(@Auth User user, @PathParam(\"name\") String secretName,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "full_signature": "@Path(\"{name}\") @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createOrUpdateSecret(@Auth User user, @PathParam(\"name\") String secretName,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "class_method_signature": "SecretsResource.createOrUpdateSecret(@Auth User user, @PathParam(\"name\") String secretName,\n      @Valid CreateOrUpdateSecretRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "partialUpdateSecret", "parameters": "(@Auth User user, @PathParam(\"name\") String secretName, @Valid\n      PartialUpdateSecretRequestV2 request)", "modifiers": "@Path(\"{name}/partialupdate\") @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "signature": "Response partialUpdateSecret(@Auth User user, @PathParam(\"name\") String secretName, @Valid\n      PartialUpdateSecretRequestV2 request)", "full_signature": "@Path(\"{name}/partialupdate\") @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response partialUpdateSecret(@Auth User user, @PathParam(\"name\") String secretName, @Valid\n      PartialUpdateSecretRequestV2 request)", "class_method_signature": "SecretsResource.partialUpdateSecret(@Auth User user, @PathParam(\"name\") String secretName, @Valid\n      PartialUpdateSecretRequestV2 request)", "testcase": false, "constructor": false}, {"identifier": "retrieveSecret", "parameters": "(@Auth User user,\n      @PathParam(\"secretId\") LongParam secretId)", "modifiers": "@Path(\"{secretId}\") @Timed @ExceptionMetered @GET public", "return": "SecretDetailResponse", "signature": "SecretDetailResponse retrieveSecret(@Auth User user,\n      @PathParam(\"secretId\") LongParam secretId)", "full_signature": "@Path(\"{secretId}\") @Timed @ExceptionMetered @GET public SecretDetailResponse retrieveSecret(@Auth User user,\n      @PathParam(\"secretId\") LongParam secretId)", "class_method_signature": "SecretsResource.retrieveSecret(@Auth User user,\n      @PathParam(\"secretId\") LongParam secretId)", "testcase": false, "constructor": false}, {"identifier": "secretVersions", "parameters": "(@Auth User user,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"versions/{name}\") @Produces(APPLICATION_JSON) public", "return": "List<SanitizedSecret>", "signature": "List<SanitizedSecret> secretVersions(@Auth User user,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"versions/{name}\") @Produces(APPLICATION_JSON) public List<SanitizedSecret> secretVersions(@Auth User user,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "class_method_signature": "SecretsResource.secretVersions(@Auth User user,\n      @PathParam(\"name\") String name, @QueryParam(\"versionIdx\") int versionIdx,\n      @QueryParam(\"numVersions\") int numVersions)", "testcase": false, "constructor": false}, {"identifier": "resetSecretVersion", "parameters": "(@Auth User user, @PathParam(\"secretName\") String secretName,\n      @PathParam(\"versionId\") LongParam versionId)", "modifiers": "@Path(\"rollback/{secretName}/{versionId}\") @Timed @ExceptionMetered @POST public", "return": "Response", "signature": "Response resetSecretVersion(@Auth User user, @PathParam(\"secretName\") String secretName,\n      @PathParam(\"versionId\") LongParam versionId)", "full_signature": "@Path(\"rollback/{secretName}/{versionId}\") @Timed @ExceptionMetered @POST public Response resetSecretVersion(@Auth User user, @PathParam(\"secretName\") String secretName,\n      @PathParam(\"versionId\") LongParam versionId)", "class_method_signature": "SecretsResource.resetSecretVersion(@Auth User user, @PathParam(\"secretName\") String secretName,\n      @PathParam(\"versionId\") LongParam versionId)", "testcase": false, "constructor": false}, {"identifier": "deleteSecret", "parameters": "(@Auth User user, @PathParam(\"secretId\") LongParam secretId)", "modifiers": "@Path(\"{secretId}\") @Timed @ExceptionMetered @DELETE public", "return": "Response", "signature": "Response deleteSecret(@Auth User user, @PathParam(\"secretId\") LongParam secretId)", "full_signature": "@Path(\"{secretId}\") @Timed @ExceptionMetered @DELETE public Response deleteSecret(@Auth User user, @PathParam(\"secretId\") LongParam secretId)", "class_method_signature": "SecretsResource.deleteSecret(@Auth User user, @PathParam(\"secretId\") LongParam secretId)", "testcase": false, "constructor": false}, {"identifier": "secretDetailResponseFromId", "parameters": "(long secretId)", "modifiers": "private", "return": "SecretDetailResponse", "signature": "SecretDetailResponse secretDetailResponseFromId(long secretId)", "full_signature": "private SecretDetailResponse secretDetailResponseFromId(long secretId)", "class_method_signature": "SecretsResource.secretDetailResponseFromId(long secretId)", "testcase": false, "constructor": false}, {"identifier": "secretDetailResponseFromName", "parameters": "(String secretName)", "modifiers": "private", "return": "SecretDetailResponse", "signature": "SecretDetailResponse secretDetailResponseFromName(String secretName)", "full_signature": "private SecretDetailResponse secretDetailResponseFromName(String secretName)", "class_method_signature": "SecretsResource.secretDetailResponseFromName(String secretName)", "testcase": false, "constructor": false}, {"identifier": "sanitizedSecretFromName", "parameters": "(String name)", "modifiers": "private", "return": "SanitizedSecret", "signature": "SanitizedSecret sanitizedSecretFromName(String name)", "full_signature": "private SanitizedSecret sanitizedSecretFromName(String name)", "class_method_signature": "SecretsResource.sanitizedSecretFromName(String name)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/admin/SecretsResource.java"}, "focal_method": {"identifier": "createSecret", "parameters": "(@Auth User user, @Valid CreateSecretRequestV2 request)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Response", "body": "@Timed @ExceptionMetered\n  @POST\n  @Consumes(APPLICATION_JSON)\n  public Response createSecret(@Auth User user, @Valid CreateSecretRequestV2 request) {\n\n    logger.info(\"User '{}' creating secret '{}'.\", user, request.name());\n\n    Secret secret;\n    try {\n      SecretController.SecretBuilder builder =\n          secretController.builder(request.name(), request.content(), user.getName(),\n              request.expiry());\n\n      if (request.description() != null) {\n        builder.withDescription(request.description());\n      }\n\n      if (request.metadata() != null) {\n        builder.withMetadata(request.metadata());\n      }\n\n      secret = builder.create();\n    } catch (DataAccessException e) {\n      logger.info(format(\"Cannot create secret %s\", request.name()), e);\n      throw new ConflictException(format(\"Cannot create secret %s.\", request.name()));\n    }\n\n    URI uri =\n        UriBuilder.fromResource(SecretsResource.class).path(\"{secretId}\").build(secret.getId());\n    Response response = Response\n        .created(uri)\n        .entity(secretDetailResponseFromId(secret.getId()))\n        .build();\n\n    if (response.getStatus() == HttpStatus.SC_CREATED) {\n      Map<String, String> extraInfo = new HashMap<>();\n      if (request.description() != null) {\n        extraInfo.put(\"description\", request.description());\n      }\n      if (request.metadata() != null) {\n        extraInfo.put(\"metadata\", request.metadata().toString());\n      }\n      extraInfo.put(\"expiry\", Long.toString(request.expiry()));\n      auditLog.recordEvent(\n          new Event(Instant.now(), EventTag.SECRET_CREATE, user.getName(), request.name(),\n              extraInfo));\n    }\n    // TODO (jessep): Should we also log failures?\n\n    return response;\n  }", "signature": "Response createSecret(@Auth User user, @Valid CreateSecretRequestV2 request)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createSecret(@Auth User user, @Valid CreateSecretRequestV2 request)", "class_method_signature": "SecretsResource.createSecret(@Auth User user, @Valid CreateSecretRequestV2 request)", "testcase": false, "constructor": false, "invocations": ["info", "name", "builder", "name", "content", "getName", "expiry", "description", "withDescription", "description", "metadata", "withMetadata", "metadata", "create", "info", "format", "name", "format", "name", "build", "path", "fromResource", "getId", "build", "entity", "created", "secretDetailResponseFromId", "getId", "getStatus", "description", "put", "description", "metadata", "put", "toString", "metadata", "put", "toString", "expiry", "recordEvent", "now", "getName", "name"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}