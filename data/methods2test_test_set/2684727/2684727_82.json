{"test_class": {"identifier": "ActivityPermissionsRequesterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ActivityPermissionsRequester permissionsRequester;", "modifier": "", "type": "ActivityPermissionsRequester", "declarator": "permissionsRequester", "var_name": "permissionsRequester"}, {"original_string": "@Mock\n    HeadlessFragmentPermissionRequesterFactory permissionRequesterFactory;", "modifier": "@Mock", "type": "HeadlessFragmentPermissionRequesterFactory", "declarator": "permissionRequesterFactory", "var_name": "permissionRequesterFactory"}, {"original_string": "@Mock\n    PermissionRequesterHeadlessFragment permissionRequesterFragment;", "modifier": "@Mock", "type": "PermissionRequesterHeadlessFragment", "declarator": "permissionRequesterFragment", "var_name": "permissionRequesterFragment"}], "file": "app/src/test/java/co/smartreceipts/android/permissions/ActivityPermissionsRequesterTest.java"}, "test_case": {"identifier": "request", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void request() throws Exception {\n        final String permission = \"permission\";\n        final PermissionAuthorizationResponse response = new PermissionAuthorizationResponse(permission, true);\n        when(permissionRequesterFragment.request(permission)).thenReturn(Single.just(response));\n        permissionsRequester.request(permission).test()\n                .assertValue(response)\n                .assertComplete()\n                .assertNoErrors();\n    }", "signature": "void request()", "full_signature": "@Test public void request()", "class_method_signature": "ActivityPermissionsRequesterTest.request()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "request", "just", "assertNoErrors", "assertComplete", "assertValue", "test", "request"]}, "focal_class": {"identifier": "ActivityPermissionsRequester", "superclass": "", "interfaces": "implements PermissionRequester", "fields": [{"original_string": "private final HeadlessFragmentPermissionRequesterFactory permissionRequesterFactory;", "modifier": "private final", "type": "HeadlessFragmentPermissionRequesterFactory", "declarator": "permissionRequesterFactory", "var_name": "permissionRequesterFactory"}], "methods": [{"identifier": "ActivityPermissionsRequester", "parameters": "(@NonNull T activity)", "modifiers": "@Inject public", "return": "", "signature": " ActivityPermissionsRequester(@NonNull T activity)", "full_signature": "@Inject public  ActivityPermissionsRequester(@NonNull T activity)", "class_method_signature": "ActivityPermissionsRequester.ActivityPermissionsRequester(@NonNull T activity)", "testcase": false, "constructor": true}, {"identifier": "ActivityPermissionsRequester", "parameters": "(@NonNull HeadlessFragmentPermissionRequesterFactory permissionRequesterFactory)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " ActivityPermissionsRequester(@NonNull HeadlessFragmentPermissionRequesterFactory permissionRequesterFactory)", "full_signature": "@VisibleForTesting public  ActivityPermissionsRequester(@NonNull HeadlessFragmentPermissionRequesterFactory permissionRequesterFactory)", "class_method_signature": "ActivityPermissionsRequester.ActivityPermissionsRequester(@NonNull HeadlessFragmentPermissionRequesterFactory permissionRequesterFactory)", "testcase": false, "constructor": true}, {"identifier": "request", "parameters": "(@NonNull String manifestPermission)", "modifiers": "@NonNull @Override public", "return": "Single<PermissionAuthorizationResponse>", "signature": "Single<PermissionAuthorizationResponse> request(@NonNull String manifestPermission)", "full_signature": "@NonNull @Override public Single<PermissionAuthorizationResponse> request(@NonNull String manifestPermission)", "class_method_signature": "ActivityPermissionsRequester.request(@NonNull String manifestPermission)", "testcase": false, "constructor": false}, {"identifier": "markRequestConsumed", "parameters": "(@NonNull String manifestPermission)", "modifiers": "@Override public", "return": "void", "signature": "void markRequestConsumed(@NonNull String manifestPermission)", "full_signature": "@Override public void markRequestConsumed(@NonNull String manifestPermission)", "class_method_signature": "ActivityPermissionsRequester.markRequestConsumed(@NonNull String manifestPermission)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/permissions/ActivityPermissionsRequester.java"}, "focal_method": {"identifier": "request", "parameters": "(@NonNull String manifestPermission)", "modifiers": "@NonNull @Override public", "return": "Single<PermissionAuthorizationResponse>", "body": "@NonNull\n    @Override\n    public Single<PermissionAuthorizationResponse> request(@NonNull String manifestPermission) {\n        Logger.info(this, \"Requesting permission: {}\", manifestPermission);\n        try {\n            return permissionRequesterFactory.get().request(manifestPermission);\n        } catch (IllegalStateException e) {\n            return Single.error(e);\n        }\n    }", "signature": "Single<PermissionAuthorizationResponse> request(@NonNull String manifestPermission)", "full_signature": "@NonNull @Override public Single<PermissionAuthorizationResponse> request(@NonNull String manifestPermission)", "class_method_signature": "ActivityPermissionsRequester.request(@NonNull String manifestPermission)", "testcase": false, "constructor": false, "invocations": ["info", "request", "get", "error"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}