{"test_class": {"identifier": "ACollectionHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java"}, "test_case": {"identifier": "testFlatten", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFlatten() {\n        final Set<Set<String>> set = new HashSet<>();\n\n        set.add(new HashSet<>(Arrays.asList(\"a\", \"b\")));\n        set.add(new HashSet<>(Arrays.asList(\"b\", \"c\", \"d\")));\n\n        final Collection<String> flattened = ACollectionHelper.flatten(set);\n        assertEquals(5, flattened.size ());\n\n        final List<String> flattenedList = new ArrayList<>(flattened);\n        Collections.sort (flattenedList);\n        assertEquals(Arrays.asList(\"a\", \"b\", \"b\", \"c\", \"d\"), flattenedList);\n    }", "signature": "void testFlatten()", "full_signature": "@Test public void testFlatten()", "class_method_signature": "ACollectionHelperTest.testFlatten()", "testcase": true, "constructor": false, "invocations": ["add", "asList", "add", "asList", "flatten", "assertEquals", "size", "sort", "assertEquals", "asList"]}, "focal_class": {"identifier": "ACollectionHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createSet", "parameters": "(Iterator<T> elements)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> createSet(Iterator<T> elements)", "full_signature": "public static Set<T> createSet(Iterator<T> elements)", "class_method_signature": "ACollectionHelper.createSet(Iterator<T> elements)", "testcase": false, "constructor": false}, {"identifier": "createSet", "parameters": "(Iterable<T> elements)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> createSet(Iterable<T> elements)", "full_signature": "public static Set<T> createSet(Iterable<T> elements)", "class_method_signature": "ACollectionHelper.createSet(Iterable<T> elements)", "testcase": false, "constructor": false}, {"identifier": "createSet", "parameters": "(Iterator<T> elements, AFunction1<T,U,E> f)", "modifiers": "public static", "return": "Set<U>", "signature": "Set<U> createSet(Iterator<T> elements, AFunction1<T,U,E> f)", "full_signature": "public static Set<U> createSet(Iterator<T> elements, AFunction1<T,U,E> f)", "class_method_signature": "ACollectionHelper.createSet(Iterator<T> elements, AFunction1<T,U,E> f)", "testcase": false, "constructor": false}, {"identifier": "createSet", "parameters": "(Iterable<T> elements, AFunction1<T,U,E> f)", "modifiers": "public static", "return": "Set<U>", "signature": "Set<U> createSet(Iterable<T> elements, AFunction1<T,U,E> f)", "full_signature": "public static Set<U> createSet(Iterable<T> elements, AFunction1<T,U,E> f)", "class_method_signature": "ACollectionHelper.createSet(Iterable<T> elements, AFunction1<T,U,E> f)", "testcase": false, "constructor": false}, {"identifier": "mkString", "parameters": "(Iterable<?> iterable)", "modifiers": "public static", "return": "String", "signature": "String mkString(Iterable<?> iterable)", "full_signature": "public static String mkString(Iterable<?> iterable)", "class_method_signature": "ACollectionHelper.mkString(Iterable<?> iterable)", "testcase": false, "constructor": false}, {"identifier": "mkString", "parameters": "(Iterable<?> iterable, String separator)", "modifiers": "public static", "return": "String", "signature": "String mkString(Iterable<?> iterable, String separator)", "full_signature": "public static String mkString(Iterable<?> iterable, String separator)", "class_method_signature": "ACollectionHelper.mkString(Iterable<?> iterable, String separator)", "testcase": false, "constructor": false}, {"identifier": "mkString", "parameters": "(Iterable<?> iterable, String prefix, String separator, String suffix)", "modifiers": "public static", "return": "String", "signature": "String mkString(Iterable<?> iterable, String prefix, String separator, String suffix)", "full_signature": "public static String mkString(Iterable<?> iterable, String prefix, String separator, String suffix)", "class_method_signature": "ACollectionHelper.mkString(Iterable<?> iterable, String prefix, String separator, String suffix)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Iterable<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "AOption<T>", "signature": "AOption<T> find(Iterable<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static AOption<T> find(Iterable<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.find(Iterable<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "forAll", "parameters": "(Iterable<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "boolean", "signature": "boolean forAll(Iterable<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static boolean forAll(Iterable<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.forAll(Iterable<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(Iterable<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "boolean", "signature": "boolean exists(Iterable<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static boolean exists(Iterable<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.exists(Iterable<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "modifiers": "public static", "return": "Collection<X>", "signature": "Collection<X> map(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "full_signature": "public static Collection<X> map(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "class_method_signature": "ACollectionHelper.map(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "modifiers": "public static", "return": "List<X>", "signature": "List<X> map(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "full_signature": "public static List<X> map(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "class_method_signature": "ACollectionHelper.map(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "modifiers": "public static", "return": "Set<X>", "signature": "Set<X> map(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "full_signature": "public static Set<X> map(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "class_method_signature": "ACollectionHelper.map(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "testcase": false, "constructor": false}, {"identifier": "createEmptyListOfType", "parameters": "(List<?> original, boolean sameSize)", "modifiers": "@SuppressWarnings (\"unchecked\") private static", "return": "List<T>", "signature": "List<T> createEmptyListOfType(List<?> original, boolean sameSize)", "full_signature": "@SuppressWarnings (\"unchecked\") private static List<T> createEmptyListOfType(List<?> original, boolean sameSize)", "class_method_signature": "ACollectionHelper.createEmptyListOfType(List<?> original, boolean sameSize)", "testcase": false, "constructor": false}, {"identifier": "createEmptySetOfType", "parameters": "(Set<?> original, boolean sameSize)", "modifiers": "@SuppressWarnings (\"unchecked\") private static", "return": "Set<T>", "signature": "Set<T> createEmptySetOfType(Set<?> original, boolean sameSize)", "full_signature": "@SuppressWarnings (\"unchecked\") private static Set<T> createEmptySetOfType(Set<?> original, boolean sameSize)", "class_method_signature": "ACollectionHelper.createEmptySetOfType(Set<?> original, boolean sameSize)", "testcase": false, "constructor": false}, {"identifier": "flatMap", "parameters": "(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "modifiers": "public static", "return": "Collection<X>", "signature": "Collection<X> flatMap(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "full_signature": "public static Collection<X> flatMap(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "class_method_signature": "ACollectionHelper.flatMap(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "testcase": false, "constructor": false}, {"identifier": "flatMapList", "parameters": "(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "modifiers": "public static", "return": "List<X>", "signature": "List<X> flatMapList(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "full_signature": "public static List<X> flatMapList(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "class_method_signature": "ACollectionHelper.flatMapList(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "testcase": false, "constructor": false}, {"identifier": "flatMapSet", "parameters": "(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "modifiers": "public static", "return": "Set<X>", "signature": "Set<X> flatMapSet(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "full_signature": "public static Set<X> flatMapSet(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "class_method_signature": "ACollectionHelper.flatMapSet(Iterable<T> coll, AFunction1<? super T, ? extends Iterable<X>, E> f)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(Iterable<? extends Iterable<T>> coll)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> flatten(Iterable<? extends Iterable<T>> coll)", "full_signature": "public static Collection<T> flatten(Iterable<? extends Iterable<T>> coll)", "class_method_signature": "ACollectionHelper.flatten(Iterable<? extends Iterable<T>> coll)", "testcase": false, "constructor": false}, {"identifier": "flattenList", "parameters": "(Iterable<? extends Iterable<T>> coll)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> flattenList(Iterable<? extends Iterable<T>> coll)", "full_signature": "public static List<T> flattenList(Iterable<? extends Iterable<T>> coll)", "class_method_signature": "ACollectionHelper.flattenList(Iterable<? extends Iterable<T>> coll)", "testcase": false, "constructor": false}, {"identifier": "flattenSet", "parameters": "(Iterable<? extends Iterable<T>> coll)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> flattenSet(Iterable<? extends Iterable<T>> coll)", "full_signature": "public static Set<T> flattenSet(Iterable<? extends Iterable<T>> coll)", "class_method_signature": "ACollectionHelper.flattenSet(Iterable<? extends Iterable<T>> coll)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(Iterable<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "modifiers": "public static", "return": "Collection<X>", "signature": "Collection<X> collect(Iterable<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "full_signature": "public static Collection<X> collect(Iterable<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "class_method_signature": "ACollectionHelper.collect(Iterable<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(List<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "modifiers": "public static", "return": "List<X>", "signature": "List<X> collect(List<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "full_signature": "public static List<X> collect(List<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "class_method_signature": "ACollectionHelper.collect(List<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(Set<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "modifiers": "public static", "return": "Set<X>", "signature": "Set<X> collect(Set<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "full_signature": "public static Set<X> collect(Set<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "class_method_signature": "ACollectionHelper.collect(Set<T> coll, APartialFunction<? super T, ? extends X, E> pf)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Iterable<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> filter(Iterable<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static Collection<T> filter(Iterable<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.filter(Iterable<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(List<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filter(List<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static List<T> filter(List<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.filter(List<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(Set<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> filter(Set<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static Set<T> filter(Set<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.filter(Set<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "filterNot", "parameters": "(Iterable<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> filterNot(Iterable<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static Collection<T> filterNot(Iterable<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.filterNot(Iterable<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "filterNot", "parameters": "(List<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> filterNot(List<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static List<T> filterNot(List<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.filterNot(List<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "filterNot", "parameters": "(Set<T> coll, APredicate<? super T, E> pred)", "modifiers": "public static", "return": "Set<T>", "signature": "Set<T> filterNot(Set<T> coll, APredicate<? super T, E> pred)", "full_signature": "public static Set<T> filterNot(Set<T> coll, APredicate<? super T, E> pred)", "class_method_signature": "ACollectionHelper.filterNot(Set<T> coll, APredicate<? super T, E> pred)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "modifiers": "public static", "return": "Map<X, Collection<T>>", "signature": "Map<X, Collection<T>> groupBy(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "full_signature": "public static Map<X, Collection<T>> groupBy(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "class_method_signature": "ACollectionHelper.groupBy(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "modifiers": "public static", "return": "Map<X, List<T>>", "signature": "Map<X, List<T>> groupBy(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "full_signature": "public static Map<X, List<T>> groupBy(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "class_method_signature": "ACollectionHelper.groupBy(List<T> coll, AFunction1<? super T, ? extends X, E> f)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "modifiers": "public static", "return": "Map<X, Set<T>>", "signature": "Map<X, Set<T>> groupBy(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "full_signature": "public static Map<X, Set<T>> groupBy(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "class_method_signature": "ACollectionHelper.groupBy(Set<T> coll, AFunction1<? super T, ? extends X, E> f)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "modifiers": "public static", "return": "Map<AEqualsWrapper<X>, Collection<T>>", "signature": "Map<AEqualsWrapper<X>, Collection<T>> groupBy(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "full_signature": "public static Map<AEqualsWrapper<X>, Collection<T>> groupBy(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "class_method_signature": "ACollectionHelper.groupBy(Iterable<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(List<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "modifiers": "public static", "return": "Map<AEqualsWrapper<X>, List<T>>", "signature": "Map<AEqualsWrapper<X>, List<T>> groupBy(List<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "full_signature": "public static Map<AEqualsWrapper<X>, List<T>> groupBy(List<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "class_method_signature": "ACollectionHelper.groupBy(List<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "testcase": false, "constructor": false}, {"identifier": "groupBy", "parameters": "(Set<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "modifiers": "public static", "return": "Map<AEqualsWrapper<X>, Set<T>>", "signature": "Map<AEqualsWrapper<X>, Set<T>> groupBy(Set<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "full_signature": "public static Map<AEqualsWrapper<X>, Set<T>> groupBy(Set<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "class_method_signature": "ACollectionHelper.groupBy(Set<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality)", "testcase": false, "constructor": false}, {"identifier": "foldLeft", "parameters": "(Iterable<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "modifiers": "public static", "return": "R", "signature": "R foldLeft(Iterable<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "full_signature": "public static R foldLeft(Iterable<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "class_method_signature": "ACollectionHelper.foldLeft(Iterable<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "testcase": false, "constructor": false}, {"identifier": "foldRight", "parameters": "(List<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "modifiers": "public static", "return": "R", "signature": "R foldRight(List<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "full_signature": "public static R foldRight(List<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "class_method_signature": "ACollectionHelper.foldRight(List<T> coll, R startValue, AFunction2<R, ? super T, R, E> f)", "testcase": false, "constructor": false}, {"identifier": "asACollectionCopy", "parameters": "(Collection<T> c)", "modifiers": "public static", "return": "ACollectionWrapper<T>", "signature": "ACollectionWrapper<T> asACollectionCopy(Collection<T> c)", "full_signature": "public static ACollectionWrapper<T> asACollectionCopy(Collection<T> c)", "class_method_signature": "ACollectionHelper.asACollectionCopy(Collection<T> c)", "testcase": false, "constructor": false}, {"identifier": "asACollectionView", "parameters": "(Collection<T> c)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "ACollectionWrapper<T>", "signature": "ACollectionWrapper<T> asACollectionView(Collection<T> c)", "full_signature": "@SuppressWarnings(\"unchecked\") public static ACollectionWrapper<T> asACollectionView(Collection<T> c)", "class_method_signature": "ACollectionHelper.asACollectionView(Collection<T> c)", "testcase": false, "constructor": false}, {"identifier": "asASetView", "parameters": "(Collection<T> c)", "modifiers": "public static", "return": "ASetWrapper<T>", "signature": "ASetWrapper<T> asASetView(Collection<T> c)", "full_signature": "public static ASetWrapper<T> asASetView(Collection<T> c)", "class_method_signature": "ACollectionHelper.asASetView(Collection<T> c)", "testcase": false, "constructor": false}, {"identifier": "asArrayCopy", "parameters": "(T[] c)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "AArrayWrapper<T>", "signature": "AArrayWrapper<T> asArrayCopy(T[] c)", "full_signature": "@SuppressWarnings(\"unchecked\") public static AArrayWrapper<T> asArrayCopy(T[] c)", "class_method_signature": "ACollectionHelper.asArrayCopy(T[] c)", "testcase": false, "constructor": false}, {"identifier": "asArrayView", "parameters": "(T[] c)", "modifiers": "public static", "return": "AArrayWrapper<T>", "signature": "AArrayWrapper<T> asArrayView(T[] c)", "full_signature": "public static AArrayWrapper<T> asArrayView(T[] c)", "class_method_signature": "ACollectionHelper.asArrayView(T[] c)", "testcase": false, "constructor": false}, {"identifier": "asJavaUtilList", "parameters": "(Iterable<T> c)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asJavaUtilList(Iterable<T> c)", "full_signature": "public static List<T> asJavaUtilList(Iterable<T> c)", "class_method_signature": "ACollectionHelper.asJavaUtilList(Iterable<T> c)", "testcase": false, "constructor": false}, {"identifier": "asJavaUtilCollection", "parameters": "(Iterable<T> c)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> asJavaUtilCollection(Iterable<T> c)", "full_signature": "public static Collection<T> asJavaUtilCollection(Iterable<T> c)", "class_method_signature": "ACollectionHelper.asJavaUtilCollection(Iterable<T> c)", "testcase": false, "constructor": false}, {"identifier": "asJavaUtilCollection", "parameters": "(Iterator<T> c)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asJavaUtilCollection(Iterator<T> c)", "full_signature": "public static List<T> asJavaUtilCollection(Iterator<T> c)", "class_method_signature": "ACollectionHelper.asJavaUtilCollection(Iterator<T> c)", "testcase": false, "constructor": false}], "file": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java"}, "focal_method": {"identifier": "flatten", "parameters": "(Iterable<? extends Iterable<T>> coll)", "modifiers": "public static", "return": "Collection<T>", "body": "public static <T> Collection<T> flatten(Iterable<? extends Iterable<T>> coll) {\n        final List<T> result = new ArrayList<>();\n        for(Iterable<T> o: coll) {\n            for(T el: o) {\n                result.add(el);\n            }\n        }\n        return result;\n    }", "signature": "Collection<T> flatten(Iterable<? extends Iterable<T>> coll)", "full_signature": "public static Collection<T> flatten(Iterable<? extends Iterable<T>> coll)", "class_method_signature": "ACollectionHelper.flatten(Iterable<? extends Iterable<T>> coll)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 17586846, "url": "https://github.com/arnohaase/a-foundation", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 30, "size": 2940, "license": "licensed"}}