{"test_class": {"identifier": "TestSchedulerApplicationAttempt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final NodeId nodeId = NodeId.newInstance(\"somehost\", 5);", "modifier": "private static final", "type": "NodeId", "declarator": "nodeId = NodeId.newInstance(\"somehost\", 5)", "var_name": "nodeId"}, {"original_string": "private Configuration conf = new Configuration();", "modifier": "private", "type": "Configuration", "declarator": "conf = new Configuration()", "var_name": "conf"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/TestSchedulerApplicationAttempt.java"}, "test_case": {"identifier": "testMove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMove() {\n    final String user = \"user1\";\n    Queue parentQueue = createQueue(\"parent\", null);\n    Queue oldQueue = createQueue(\"old\", parentQueue);\n    Queue newQueue = createQueue(\"new\", parentQueue);\n    QueueMetrics parentMetrics = parentQueue.getMetrics();\n    QueueMetrics oldMetrics = oldQueue.getMetrics();\n    QueueMetrics newMetrics = newQueue.getMetrics();\n\n    ApplicationAttemptId appAttId = createAppAttemptId(0, 0);\n    RMContext rmContext = mock(RMContext.class);\n    when(rmContext.getEpoch()).thenReturn(3L);\n    SchedulerApplicationAttempt app = new SchedulerApplicationAttempt(appAttId,\n        user, oldQueue, oldQueue.getActiveUsersManager(), rmContext);\n    oldMetrics.submitApp(user);\n    \n    // confirm that containerId is calculated based on epoch.\n    assertEquals(0x30000000001L, app.getNewContainerId());\n    \n    // Resource request\n    Resource requestedResource = Resource.newInstance(1536, 2);\n    Priority requestedPriority = Priority.newInstance(2);\n    ResourceRequest request = ResourceRequest.newInstance(requestedPriority,\n        ResourceRequest.ANY, requestedResource, 3);\n    app.updateResourceRequests(Arrays.asList(request));\n\n    // Allocated container\n    RMContainer container1 = createRMContainer(appAttId, 1, requestedResource);\n    app.liveContainers.put(container1.getContainerId(), container1);\n    SchedulerNode node = createNode();\n    app.appSchedulingInfo.allocate(NodeType.OFF_SWITCH, node, requestedPriority,\n        request, container1.getContainer());\n    \n    // Reserved container\n    Priority prio1 = Priority.newInstance(1);\n    Resource reservedResource = Resource.newInstance(2048, 3);\n    RMContainer container2 = createReservedRMContainer(appAttId, 1, reservedResource,\n        node.getNodeID(), prio1);\n    Map<NodeId, RMContainer> reservations = new HashMap<NodeId, RMContainer>();\n    reservations.put(node.getNodeID(), container2);\n    app.reservedContainers.put(prio1, reservations);\n    oldMetrics.reserveResource(user, reservedResource);\n    \n    checkQueueMetrics(oldMetrics, 1, 1, 1536, 2, 2048, 3, 3072, 4);\n    checkQueueMetrics(newMetrics, 0, 0, 0, 0, 0, 0, 0, 0);\n    checkQueueMetrics(parentMetrics, 1, 1, 1536, 2, 2048, 3, 3072, 4);\n    \n    app.move(newQueue);\n    \n    checkQueueMetrics(oldMetrics, 0, 0, 0, 0, 0, 0, 0, 0);\n    checkQueueMetrics(newMetrics, 1, 1, 1536, 2, 2048, 3, 3072, 4);\n    checkQueueMetrics(parentMetrics, 1, 1, 1536, 2, 2048, 3, 3072, 4);\n  }", "signature": "void testMove()", "full_signature": "@Test public void testMove()", "class_method_signature": "TestSchedulerApplicationAttempt.testMove()", "testcase": true, "constructor": false, "invocations": ["createQueue", "createQueue", "createQueue", "getMetrics", "getMetrics", "getMetrics", "createAppAttemptId", "mock", "thenReturn", "when", "getEpoch", "getActiveUsersManager", "submitApp", "assertEquals", "getNewContainerId", "newInstance", "newInstance", "newInstance", "updateResourceRequests", "asList", "createRMContainer", "put", "getContainerId", "createNode", "allocate", "getContainer", "newInstance", "newInstance", "createReservedRMContainer", "getNodeID", "put", "getNodeID", "put", "reserveResource", "checkQueueMetrics", "checkQueueMetrics", "checkQueueMetrics", "move", "checkQueueMetrics", "checkQueueMetrics", "checkQueueMetrics"]}, "focal_class": {"identifier": "SchedulerApplicationAttempt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory\n    .getLog(SchedulerApplicationAttempt.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory\n    .getLog(SchedulerApplicationAttempt.class)", "var_name": "LOG"}, {"original_string": "private static final long MEM_AGGREGATE_ALLOCATION_CACHE_MSECS = 3000;", "modifier": "private static final", "type": "long", "declarator": "MEM_AGGREGATE_ALLOCATION_CACHE_MSECS = 3000", "var_name": "MEM_AGGREGATE_ALLOCATION_CACHE_MSECS"}, {"original_string": "protected long lastMemoryAggregateAllocationUpdateTime = 0;", "modifier": "protected", "type": "long", "declarator": "lastMemoryAggregateAllocationUpdateTime = 0", "var_name": "lastMemoryAggregateAllocationUpdateTime"}, {"original_string": "private long lastMemorySeconds = 0;", "modifier": "private", "type": "long", "declarator": "lastMemorySeconds = 0", "var_name": "lastMemorySeconds"}, {"original_string": "private long lastVcoreSeconds = 0;", "modifier": "private", "type": "long", "declarator": "lastVcoreSeconds = 0", "var_name": "lastVcoreSeconds"}, {"original_string": "protected final AppSchedulingInfo appSchedulingInfo;", "modifier": "protected final", "type": "AppSchedulingInfo", "declarator": "appSchedulingInfo", "var_name": "appSchedulingInfo"}, {"original_string": "protected ApplicationAttemptId attemptId;", "modifier": "protected", "type": "ApplicationAttemptId", "declarator": "attemptId", "var_name": "attemptId"}, {"original_string": "protected Map<ContainerId, RMContainer> liveContainers =\n      new HashMap<ContainerId, RMContainer>();", "modifier": "protected", "type": "Map<ContainerId, RMContainer>", "declarator": "liveContainers =\n      new HashMap<ContainerId, RMContainer>()", "var_name": "liveContainers"}, {"original_string": "protected final Map<Priority, Map<NodeId, RMContainer>> reservedContainers = \n      new HashMap<Priority, Map<NodeId, RMContainer>>();", "modifier": "protected final", "type": "Map<Priority, Map<NodeId, RMContainer>>", "declarator": "reservedContainers = \n      new HashMap<Priority, Map<NodeId, RMContainer>>()", "var_name": "reservedContainers"}, {"original_string": "private final Multiset<Priority> reReservations = HashMultiset.create();", "modifier": "private final", "type": "Multiset<Priority>", "declarator": "reReservations = HashMultiset.create()", "var_name": "reReservations"}, {"original_string": "protected final Resource currentReservation = Resource.newInstance(0, 0);", "modifier": "protected final", "type": "Resource", "declarator": "currentReservation = Resource.newInstance(0, 0)", "var_name": "currentReservation"}, {"original_string": "private Resource resourceLimit = Resource.newInstance(0, 0);", "modifier": "private", "type": "Resource", "declarator": "resourceLimit = Resource.newInstance(0, 0)", "var_name": "resourceLimit"}, {"original_string": "protected Resource currentConsumption = Resource.newInstance(0, 0);", "modifier": "protected", "type": "Resource", "declarator": "currentConsumption = Resource.newInstance(0, 0)", "var_name": "currentConsumption"}, {"original_string": "private Resource amResource = Resources.none();", "modifier": "private", "type": "Resource", "declarator": "amResource = Resources.none()", "var_name": "amResource"}, {"original_string": "private boolean unmanagedAM = true;", "modifier": "private", "type": "boolean", "declarator": "unmanagedAM = true", "var_name": "unmanagedAM"}, {"original_string": "private boolean amRunning = false;", "modifier": "private", "type": "boolean", "declarator": "amRunning = false", "var_name": "amRunning"}, {"original_string": "private LogAggregationContext logAggregationContext;", "modifier": "private", "type": "LogAggregationContext", "declarator": "logAggregationContext", "var_name": "logAggregationContext"}, {"original_string": "protected List<RMContainer> newlyAllocatedContainers = \n      new ArrayList<RMContainer>();", "modifier": "protected", "type": "List<RMContainer>", "declarator": "newlyAllocatedContainers = \n      new ArrayList<RMContainer>()", "var_name": "newlyAllocatedContainers"}, {"original_string": "private Set<ContainerId> pendingRelease = null;", "modifier": "private", "type": "Set<ContainerId>", "declarator": "pendingRelease = null", "var_name": "pendingRelease"}, {"original_string": "Multiset<Priority> schedulingOpportunities = HashMultiset.create();", "modifier": "", "type": "Multiset<Priority>", "declarator": "schedulingOpportunities = HashMultiset.create()", "var_name": "schedulingOpportunities"}, {"original_string": "protected Map<Priority, Long> lastScheduledContainer =\n      new HashMap<Priority, Long>();", "modifier": "protected", "type": "Map<Priority, Long>", "declarator": "lastScheduledContainer =\n      new HashMap<Priority, Long>()", "var_name": "lastScheduledContainer"}, {"original_string": "protected Queue queue;", "modifier": "protected", "type": "Queue", "declarator": "queue", "var_name": "queue"}, {"original_string": "protected boolean isStopped = false;", "modifier": "protected", "type": "boolean", "declarator": "isStopped = false", "var_name": "isStopped"}, {"original_string": "protected final RMContext rmContext;", "modifier": "protected final", "type": "RMContext", "declarator": "rmContext", "var_name": "rmContext"}], "methods": [{"identifier": "SchedulerApplicationAttempt", "parameters": "(ApplicationAttemptId applicationAttemptId, \n      String user, Queue queue, ActiveUsersManager activeUsersManager,\n      RMContext rmContext)", "modifiers": "public", "return": "", "signature": " SchedulerApplicationAttempt(ApplicationAttemptId applicationAttemptId, \n      String user, Queue queue, ActiveUsersManager activeUsersManager,\n      RMContext rmContext)", "full_signature": "public  SchedulerApplicationAttempt(ApplicationAttemptId applicationAttemptId, \n      String user, Queue queue, ActiveUsersManager activeUsersManager,\n      RMContext rmContext)", "class_method_signature": "SchedulerApplicationAttempt.SchedulerApplicationAttempt(ApplicationAttemptId applicationAttemptId, \n      String user, Queue queue, ActiveUsersManager activeUsersManager,\n      RMContext rmContext)", "testcase": false, "constructor": true}, {"identifier": "getLiveContainers", "parameters": "()", "modifiers": "public synchronized", "return": "Collection<RMContainer>", "signature": "Collection<RMContainer> getLiveContainers()", "full_signature": "public synchronized Collection<RMContainer> getLiveContainers()", "class_method_signature": "SchedulerApplicationAttempt.getLiveContainers()", "testcase": false, "constructor": false}, {"identifier": "getAppSchedulingInfo", "parameters": "()", "modifiers": "public", "return": "AppSchedulingInfo", "signature": "AppSchedulingInfo getAppSchedulingInfo()", "full_signature": "public AppSchedulingInfo getAppSchedulingInfo()", "class_method_signature": "SchedulerApplicationAttempt.getAppSchedulingInfo()", "testcase": false, "constructor": false}, {"identifier": "isPending", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPending()", "full_signature": "public boolean isPending()", "class_method_signature": "SchedulerApplicationAttempt.isPending()", "testcase": false, "constructor": false}, {"identifier": "getApplicationAttemptId", "parameters": "()", "modifiers": "public", "return": "ApplicationAttemptId", "signature": "ApplicationAttemptId getApplicationAttemptId()", "full_signature": "public ApplicationAttemptId getApplicationAttemptId()", "class_method_signature": "SchedulerApplicationAttempt.getApplicationAttemptId()", "testcase": false, "constructor": false}, {"identifier": "getApplicationId", "parameters": "()", "modifiers": "public", "return": "ApplicationId", "signature": "ApplicationId getApplicationId()", "full_signature": "public ApplicationId getApplicationId()", "class_method_signature": "SchedulerApplicationAttempt.getApplicationId()", "testcase": false, "constructor": false}, {"identifier": "getUser", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUser()", "full_signature": "public String getUser()", "class_method_signature": "SchedulerApplicationAttempt.getUser()", "testcase": false, "constructor": false}, {"identifier": "getResourceRequests", "parameters": "(Priority priority)", "modifiers": "public", "return": "Map<String, ResourceRequest>", "signature": "Map<String, ResourceRequest> getResourceRequests(Priority priority)", "full_signature": "public Map<String, ResourceRequest> getResourceRequests(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.getResourceRequests(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "getPendingRelease", "parameters": "()", "modifiers": "public", "return": "Set<ContainerId>", "signature": "Set<ContainerId> getPendingRelease()", "full_signature": "public Set<ContainerId> getPendingRelease()", "class_method_signature": "SchedulerApplicationAttempt.getPendingRelease()", "testcase": false, "constructor": false}, {"identifier": "getNewContainerId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getNewContainerId()", "full_signature": "public long getNewContainerId()", "class_method_signature": "SchedulerApplicationAttempt.getNewContainerId()", "testcase": false, "constructor": false}, {"identifier": "getPriorities", "parameters": "()", "modifiers": "public", "return": "Collection<Priority>", "signature": "Collection<Priority> getPriorities()", "full_signature": "public Collection<Priority> getPriorities()", "class_method_signature": "SchedulerApplicationAttempt.getPriorities()", "testcase": false, "constructor": false}, {"identifier": "getResourceRequest", "parameters": "(Priority priority, String resourceName)", "modifiers": "public synchronized", "return": "ResourceRequest", "signature": "ResourceRequest getResourceRequest(Priority priority, String resourceName)", "full_signature": "public synchronized ResourceRequest getResourceRequest(Priority priority, String resourceName)", "class_method_signature": "SchedulerApplicationAttempt.getResourceRequest(Priority priority, String resourceName)", "testcase": false, "constructor": false}, {"identifier": "getTotalRequiredResources", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "int", "signature": "int getTotalRequiredResources(Priority priority)", "full_signature": "public synchronized int getTotalRequiredResources(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.getTotalRequiredResources(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "Resource", "signature": "Resource getResource(Priority priority)", "full_signature": "public synchronized Resource getResource(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.getResource(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "getQueueName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getQueueName()", "full_signature": "public String getQueueName()", "class_method_signature": "SchedulerApplicationAttempt.getQueueName()", "testcase": false, "constructor": false}, {"identifier": "getAMResource", "parameters": "()", "modifiers": "public", "return": "Resource", "signature": "Resource getAMResource()", "full_signature": "public Resource getAMResource()", "class_method_signature": "SchedulerApplicationAttempt.getAMResource()", "testcase": false, "constructor": false}, {"identifier": "setAMResource", "parameters": "(Resource amResource)", "modifiers": "public", "return": "void", "signature": "void setAMResource(Resource amResource)", "full_signature": "public void setAMResource(Resource amResource)", "class_method_signature": "SchedulerApplicationAttempt.setAMResource(Resource amResource)", "testcase": false, "constructor": false}, {"identifier": "isAmRunning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAmRunning()", "full_signature": "public boolean isAmRunning()", "class_method_signature": "SchedulerApplicationAttempt.isAmRunning()", "testcase": false, "constructor": false}, {"identifier": "setAmRunning", "parameters": "(boolean bool)", "modifiers": "public", "return": "void", "signature": "void setAmRunning(boolean bool)", "full_signature": "public void setAmRunning(boolean bool)", "class_method_signature": "SchedulerApplicationAttempt.setAmRunning(boolean bool)", "testcase": false, "constructor": false}, {"identifier": "getUnmanagedAM", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getUnmanagedAM()", "full_signature": "public boolean getUnmanagedAM()", "class_method_signature": "SchedulerApplicationAttempt.getUnmanagedAM()", "testcase": false, "constructor": false}, {"identifier": "getRMContainer", "parameters": "(ContainerId id)", "modifiers": "public synchronized", "return": "RMContainer", "signature": "RMContainer getRMContainer(ContainerId id)", "full_signature": "public synchronized RMContainer getRMContainer(ContainerId id)", "class_method_signature": "SchedulerApplicationAttempt.getRMContainer(ContainerId id)", "testcase": false, "constructor": false}, {"identifier": "resetReReservations", "parameters": "(Priority priority)", "modifiers": "protected synchronized", "return": "void", "signature": "void resetReReservations(Priority priority)", "full_signature": "protected synchronized void resetReReservations(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.resetReReservations(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "addReReservation", "parameters": "(Priority priority)", "modifiers": "protected synchronized", "return": "void", "signature": "void addReReservation(Priority priority)", "full_signature": "protected synchronized void addReReservation(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.addReReservation(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "getReReservations", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "int", "signature": "int getReReservations(Priority priority)", "full_signature": "public synchronized int getReReservations(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.getReReservations(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "getCurrentReservation", "parameters": "()", "modifiers": "@Stable @Private public synchronized", "return": "Resource", "signature": "Resource getCurrentReservation()", "full_signature": "@Stable @Private public synchronized Resource getCurrentReservation()", "class_method_signature": "SchedulerApplicationAttempt.getCurrentReservation()", "testcase": false, "constructor": false}, {"identifier": "getQueue", "parameters": "()", "modifiers": "public", "return": "Queue", "signature": "Queue getQueue()", "full_signature": "public Queue getQueue()", "class_method_signature": "SchedulerApplicationAttempt.getQueue()", "testcase": false, "constructor": false}, {"identifier": "updateResourceRequests", "parameters": "(\n      List<ResourceRequest> requests)", "modifiers": "public synchronized", "return": "void", "signature": "void updateResourceRequests(\n      List<ResourceRequest> requests)", "full_signature": "public synchronized void updateResourceRequests(\n      List<ResourceRequest> requests)", "class_method_signature": "SchedulerApplicationAttempt.updateResourceRequests(\n      List<ResourceRequest> requests)", "testcase": false, "constructor": false}, {"identifier": "recoverResourceRequests", "parameters": "(\n      List<ResourceRequest> requests)", "modifiers": "public synchronized", "return": "void", "signature": "void recoverResourceRequests(\n      List<ResourceRequest> requests)", "full_signature": "public synchronized void recoverResourceRequests(\n      List<ResourceRequest> requests)", "class_method_signature": "SchedulerApplicationAttempt.recoverResourceRequests(\n      List<ResourceRequest> requests)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "(RMAppAttemptState rmAppAttemptFinalState)", "modifiers": "public synchronized", "return": "void", "signature": "void stop(RMAppAttemptState rmAppAttemptFinalState)", "full_signature": "public synchronized void stop(RMAppAttemptState rmAppAttemptFinalState)", "class_method_signature": "SchedulerApplicationAttempt.stop(RMAppAttemptState rmAppAttemptFinalState)", "testcase": false, "constructor": false}, {"identifier": "isStopped", "parameters": "()", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isStopped()", "full_signature": "public synchronized boolean isStopped()", "class_method_signature": "SchedulerApplicationAttempt.isStopped()", "testcase": false, "constructor": false}, {"identifier": "getReservedContainers", "parameters": "()", "modifiers": "public synchronized", "return": "List<RMContainer>", "signature": "List<RMContainer> getReservedContainers()", "full_signature": "public synchronized List<RMContainer> getReservedContainers()", "class_method_signature": "SchedulerApplicationAttempt.getReservedContainers()", "testcase": false, "constructor": false}, {"identifier": "reserve", "parameters": "(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container)", "modifiers": "public synchronized", "return": "RMContainer", "signature": "RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container)", "full_signature": "public synchronized RMContainer reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container)", "class_method_signature": "SchedulerApplicationAttempt.reserve(SchedulerNode node, Priority priority,\n      RMContainer rmContainer, Container container)", "testcase": false, "constructor": false}, {"identifier": "isReserved", "parameters": "(SchedulerNode node, Priority priority)", "modifiers": "public synchronized", "return": "boolean", "signature": "boolean isReserved(SchedulerNode node, Priority priority)", "full_signature": "public synchronized boolean isReserved(SchedulerNode node, Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.isReserved(SchedulerNode node, Priority priority)", "testcase": false, "constructor": false}, {"identifier": "setHeadroom", "parameters": "(Resource globalLimit)", "modifiers": "public synchronized", "return": "void", "signature": "void setHeadroom(Resource globalLimit)", "full_signature": "public synchronized void setHeadroom(Resource globalLimit)", "class_method_signature": "SchedulerApplicationAttempt.setHeadroom(Resource globalLimit)", "testcase": false, "constructor": false}, {"identifier": "getHeadroom", "parameters": "()", "modifiers": "public synchronized", "return": "Resource", "signature": "Resource getHeadroom()", "full_signature": "public synchronized Resource getHeadroom()", "class_method_signature": "SchedulerApplicationAttempt.getHeadroom()", "testcase": false, "constructor": false}, {"identifier": "getNumReservedContainers", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "int", "signature": "int getNumReservedContainers(Priority priority)", "full_signature": "public synchronized int getNumReservedContainers(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.getNumReservedContainers(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "containerLaunchedOnNode", "parameters": "(ContainerId containerId,\n      NodeId nodeId)", "modifiers": "@SuppressWarnings(\"unchecked\") public synchronized", "return": "void", "signature": "void containerLaunchedOnNode(ContainerId containerId,\n      NodeId nodeId)", "full_signature": "@SuppressWarnings(\"unchecked\") public synchronized void containerLaunchedOnNode(ContainerId containerId,\n      NodeId nodeId)", "class_method_signature": "SchedulerApplicationAttempt.containerLaunchedOnNode(ContainerId containerId,\n      NodeId nodeId)", "testcase": false, "constructor": false}, {"identifier": "showRequests", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void showRequests()", "full_signature": "public synchronized void showRequests()", "class_method_signature": "SchedulerApplicationAttempt.showRequests()", "testcase": false, "constructor": false}, {"identifier": "getCurrentConsumption", "parameters": "()", "modifiers": "public", "return": "Resource", "signature": "Resource getCurrentConsumption()", "full_signature": "public Resource getCurrentConsumption()", "class_method_signature": "SchedulerApplicationAttempt.getCurrentConsumption()", "testcase": false, "constructor": false}, {"identifier": "pullNewlyAllocatedContainersAndNMTokens", "parameters": "()", "modifiers": "public synchronized", "return": "ContainersAndNMTokensAllocation", "signature": "ContainersAndNMTokensAllocation pullNewlyAllocatedContainersAndNMTokens()", "full_signature": "public synchronized ContainersAndNMTokensAllocation pullNewlyAllocatedContainersAndNMTokens()", "class_method_signature": "SchedulerApplicationAttempt.pullNewlyAllocatedContainersAndNMTokens()", "testcase": false, "constructor": false}, {"identifier": "updateBlacklist", "parameters": "(\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "modifiers": "public synchronized", "return": "void", "signature": "void updateBlacklist(\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "full_signature": "public synchronized void updateBlacklist(\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "class_method_signature": "SchedulerApplicationAttempt.updateBlacklist(\n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "testcase": false, "constructor": false}, {"identifier": "isBlacklisted", "parameters": "(String resourceName)", "modifiers": "public", "return": "boolean", "signature": "boolean isBlacklisted(String resourceName)", "full_signature": "public boolean isBlacklisted(String resourceName)", "class_method_signature": "SchedulerApplicationAttempt.isBlacklisted(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "addSchedulingOpportunity", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "void", "signature": "void addSchedulingOpportunity(Priority priority)", "full_signature": "public synchronized void addSchedulingOpportunity(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.addSchedulingOpportunity(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "subtractSchedulingOpportunity", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "void", "signature": "void subtractSchedulingOpportunity(Priority priority)", "full_signature": "public synchronized void subtractSchedulingOpportunity(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.subtractSchedulingOpportunity(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "getSchedulingOpportunities", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "int", "signature": "int getSchedulingOpportunities(Priority priority)", "full_signature": "public synchronized int getSchedulingOpportunities(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.getSchedulingOpportunities(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "resetSchedulingOpportunities", "parameters": "(Priority priority)", "modifiers": "public synchronized", "return": "void", "signature": "void resetSchedulingOpportunities(Priority priority)", "full_signature": "public synchronized void resetSchedulingOpportunities(Priority priority)", "class_method_signature": "SchedulerApplicationAttempt.resetSchedulingOpportunities(Priority priority)", "testcase": false, "constructor": false}, {"identifier": "resetSchedulingOpportunities", "parameters": "(Priority priority,\n      long currentTimeMs)", "modifiers": "public synchronized", "return": "void", "signature": "void resetSchedulingOpportunities(Priority priority,\n      long currentTimeMs)", "full_signature": "public synchronized void resetSchedulingOpportunities(Priority priority,\n      long currentTimeMs)", "class_method_signature": "SchedulerApplicationAttempt.resetSchedulingOpportunities(Priority priority,\n      long currentTimeMs)", "testcase": false, "constructor": false}, {"identifier": "getRunningAggregateAppResourceUsage", "parameters": "()", "modifiers": "synchronized", "return": "AggregateAppResourceUsage", "signature": "AggregateAppResourceUsage getRunningAggregateAppResourceUsage()", "full_signature": "synchronized AggregateAppResourceUsage getRunningAggregateAppResourceUsage()", "class_method_signature": "SchedulerApplicationAttempt.getRunningAggregateAppResourceUsage()", "testcase": false, "constructor": false}, {"identifier": "getResourceUsageReport", "parameters": "()", "modifiers": "public synchronized", "return": "ApplicationResourceUsageReport", "signature": "ApplicationResourceUsageReport getResourceUsageReport()", "full_signature": "public synchronized ApplicationResourceUsageReport getResourceUsageReport()", "class_method_signature": "SchedulerApplicationAttempt.getResourceUsageReport()", "testcase": false, "constructor": false}, {"identifier": "getLiveContainersMap", "parameters": "()", "modifiers": "public synchronized", "return": "Map<ContainerId, RMContainer>", "signature": "Map<ContainerId, RMContainer> getLiveContainersMap()", "full_signature": "public synchronized Map<ContainerId, RMContainer> getLiveContainersMap()", "class_method_signature": "SchedulerApplicationAttempt.getLiveContainersMap()", "testcase": false, "constructor": false}, {"identifier": "getResourceLimit", "parameters": "()", "modifiers": "public synchronized", "return": "Resource", "signature": "Resource getResourceLimit()", "full_signature": "public synchronized Resource getResourceLimit()", "class_method_signature": "SchedulerApplicationAttempt.getResourceLimit()", "testcase": false, "constructor": false}, {"identifier": "getLastScheduledContainer", "parameters": "()", "modifiers": "public synchronized", "return": "Map<Priority, Long>", "signature": "Map<Priority, Long> getLastScheduledContainer()", "full_signature": "public synchronized Map<Priority, Long> getLastScheduledContainer()", "class_method_signature": "SchedulerApplicationAttempt.getLastScheduledContainer()", "testcase": false, "constructor": false}, {"identifier": "transferStateFromPreviousAttempt", "parameters": "(\n      SchedulerApplicationAttempt appAttempt)", "modifiers": "public synchronized", "return": "void", "signature": "void transferStateFromPreviousAttempt(\n      SchedulerApplicationAttempt appAttempt)", "full_signature": "public synchronized void transferStateFromPreviousAttempt(\n      SchedulerApplicationAttempt appAttempt)", "class_method_signature": "SchedulerApplicationAttempt.transferStateFromPreviousAttempt(\n      SchedulerApplicationAttempt appAttempt)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(Queue newQueue)", "modifiers": "public synchronized", "return": "void", "signature": "void move(Queue newQueue)", "full_signature": "public synchronized void move(Queue newQueue)", "class_method_signature": "SchedulerApplicationAttempt.move(Queue newQueue)", "testcase": false, "constructor": false}, {"identifier": "recoverContainer", "parameters": "(RMContainer rmContainer)", "modifiers": "public synchronized", "return": "void", "signature": "void recoverContainer(RMContainer rmContainer)", "full_signature": "public synchronized void recoverContainer(RMContainer rmContainer)", "class_method_signature": "SchedulerApplicationAttempt.recoverContainer(RMContainer rmContainer)", "testcase": false, "constructor": false}, {"identifier": "incNumAllocatedContainers", "parameters": "(NodeType containerType,\n      NodeType requestType)", "modifiers": "public", "return": "void", "signature": "void incNumAllocatedContainers(NodeType containerType,\n      NodeType requestType)", "full_signature": "public void incNumAllocatedContainers(NodeType containerType,\n      NodeType requestType)", "class_method_signature": "SchedulerApplicationAttempt.incNumAllocatedContainers(NodeType containerType,\n      NodeType requestType)", "testcase": false, "constructor": false}, {"identifier": "setApplicationHeadroomForMetrics", "parameters": "(Resource headroom)", "modifiers": "public", "return": "void", "signature": "void setApplicationHeadroomForMetrics(Resource headroom)", "full_signature": "public void setApplicationHeadroomForMetrics(Resource headroom)", "class_method_signature": "SchedulerApplicationAttempt.setApplicationHeadroomForMetrics(Resource headroom)", "testcase": false, "constructor": false}, {"identifier": "getBlacklistedNodes", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getBlacklistedNodes()", "full_signature": "public Set<String> getBlacklistedNodes()", "class_method_signature": "SchedulerApplicationAttempt.getBlacklistedNodes()", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java"}, "focal_method": {"identifier": "move", "parameters": "(Queue newQueue)", "modifiers": "public synchronized", "return": "void", "body": "public synchronized void move(Queue newQueue) {\n    QueueMetrics oldMetrics = queue.getMetrics();\n    QueueMetrics newMetrics = newQueue.getMetrics();\n    String user = getUser();\n    for (RMContainer liveContainer : liveContainers.values()) {\n      Resource resource = liveContainer.getContainer().getResource();\n      oldMetrics.releaseResources(user, 1, resource);\n      newMetrics.allocateResources(user, 1, resource, false);\n    }\n    for (Map<NodeId, RMContainer> map : reservedContainers.values()) {\n      for (RMContainer reservedContainer : map.values()) {\n        Resource resource = reservedContainer.getReservedResource();\n        oldMetrics.unreserveResource(user, resource);\n        newMetrics.reserveResource(user, resource);\n      }\n    }\n\n    appSchedulingInfo.move(newQueue);\n    this.queue = newQueue;\n  }", "signature": "void move(Queue newQueue)", "full_signature": "public synchronized void move(Queue newQueue)", "class_method_signature": "SchedulerApplicationAttempt.move(Queue newQueue)", "testcase": false, "constructor": false, "invocations": ["getMetrics", "getMetrics", "getUser", "values", "getResource", "getContainer", "releaseResources", "allocateResources", "values", "values", "getReservedResource", "unreserveResource", "reserveResource", "move"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}