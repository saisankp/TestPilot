{"test_class": {"identifier": "JavadocSupportTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File resourcesRoot = getFile(\"src\", \"test\", \"resources\");", "modifier": "private static final", "type": "File", "declarator": "resourcesRoot = getFile(\"src\", \"test\", \"resources\")", "var_name": "resourcesRoot"}, {"original_string": "private static final File regularJavadoc = getFile(System.getProperty(\"j2d-sample-javadoc\"));", "modifier": "private static final", "type": "File", "declarator": "regularJavadoc = getFile(System.getProperty(\"j2d-sample-javadoc\"))", "var_name": "regularJavadoc"}, {"original_string": "private static final File splitJavadoc = getFile(System.getProperty(\"j2d-sample-javadoc-split\"));", "modifier": "private static final", "type": "File", "declarator": "splitJavadoc = getFile(System.getProperty(\"j2d-sample-javadoc-split\"))", "var_name": "splitJavadoc"}, {"original_string": "private static final String NOT_JAVADOC_DIR = \"not-javadoc\";", "modifier": "private static final", "type": "String", "declarator": "NOT_JAVADOC_DIR = \"not-javadoc\"", "var_name": "NOT_JAVADOC_DIR"}, {"original_string": "private static final String INDEX_ALL_BAD_TAG_HTML = \"index-all-bad-tag.html\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_ALL_BAD_TAG_HTML = \"index-all-bad-tag.html\"", "var_name": "INDEX_ALL_BAD_TAG_HTML"}], "file": "javadoc2dash-api/src/test/java/com/megatome/j2d/support/JavadocSupportTest.java"}, "test_case": {"identifier": "testMissingJavadocDir", "parameters": "()", "modifiers": "@Test(expected = BuilderException.class) public", "return": "void", "body": "@Test(expected = BuilderException.class)\n    public void testMissingJavadocDir() throws Exception {\n        JavadocSupport.findIndexFile(getFile(resourcesRoot, \"FOO\"));\n    }", "signature": "void testMissingJavadocDir()", "full_signature": "@Test(expected = BuilderException.class) public void testMissingJavadocDir()", "class_method_signature": "JavadocSupportTest.testMissingJavadocDir()", "testcase": true, "constructor": false, "invocations": ["findIndexFile", "getFile"]}, "focal_class": {"identifier": "JavadocSupport", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern parentPattern = Pattern.compile(\"span|code|i|b\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "parentPattern = Pattern.compile(\"span|code|i|b\", Pattern.CASE_INSENSITIVE)", "var_name": "parentPattern"}, {"original_string": "private static final List<MatchType> extraIndexingTypes = Arrays.asList(MatchType.CLASS, MatchType.INTERFACE, MatchType.ENUM, MatchType.EXCEPTION, MatchType.ERROR);", "modifier": "private static final", "type": "List<MatchType>", "declarator": "extraIndexingTypes = Arrays.asList(MatchType.CLASS, MatchType.INTERFACE, MatchType.ENUM, MatchType.EXCEPTION, MatchType.ERROR)", "var_name": "extraIndexingTypes"}], "methods": [{"identifier": "JavadocSupport", "parameters": "()", "modifiers": "private", "return": "", "signature": " JavadocSupport()", "full_signature": "private  JavadocSupport()", "class_method_signature": "JavadocSupport.JavadocSupport()", "testcase": false, "constructor": true}, {"identifier": "findIndexFile", "parameters": "(File javadocDir)", "modifiers": "public static", "return": "IndexData", "signature": "IndexData findIndexFile(File javadocDir)", "full_signature": "public static IndexData findIndexFile(File javadocDir)", "class_method_signature": "JavadocSupport.findIndexFile(File javadocDir)", "testcase": false, "constructor": false}, {"identifier": "findSearchIndexValues", "parameters": "(List<File> filesToIndex)", "modifiers": "public static", "return": "List<SearchIndexValue>", "signature": "List<SearchIndexValue> findSearchIndexValues(List<File> filesToIndex)", "full_signature": "public static List<SearchIndexValue> findSearchIndexValues(List<File> filesToIndex)", "class_method_signature": "JavadocSupport.findSearchIndexValues(List<File> filesToIndex)", "testcase": false, "constructor": false}, {"identifier": "indexFile", "parameters": "(File f)", "modifiers": "private static", "return": "List<SearchIndexValue>", "signature": "List<SearchIndexValue> indexFile(File f)", "full_signature": "private static List<SearchIndexValue> indexFile(File f)", "class_method_signature": "JavadocSupport.indexFile(File f)", "testcase": false, "constructor": false}, {"identifier": "loadAndFindLinks", "parameters": "(final File f)", "modifiers": "private static", "return": "Elements", "signature": "Elements loadAndFindLinks(final File f)", "full_signature": "private static Elements loadAndFindLinks(final File f)", "class_method_signature": "JavadocSupport.loadAndFindLinks(final File f)", "testcase": false, "constructor": false}, {"identifier": "getMatchingType", "parameters": "(String text, String className)", "modifiers": "private static", "return": "MatchType", "signature": "MatchType getMatchingType(String text, String className)", "full_signature": "private static MatchType getMatchingType(String text, String className)", "class_method_signature": "JavadocSupport.getMatchingType(String text, String className)", "testcase": false, "constructor": false}], "file": "javadoc2dash-api/src/main/java/com/megatome/j2d/support/JavadocSupport.java"}, "focal_method": {"identifier": "findIndexFile", "parameters": "(File javadocDir)", "modifiers": "public static", "return": "IndexData", "body": "public static IndexData findIndexFile(File javadocDir) throws BuilderException {\n        final IndexData indexData = new IndexData();\n        if (!javadocDir.exists() || !javadocDir.isDirectory()) {\n            throw new BuilderException(String.format(\"%s does not exist, or is not a directory\", javadocDir.getAbsolutePath()));\n        }\n\n        logVerbose(\"Looking for javadoc files\");\n\n        String docsetIndexFile = \"overview-summary.html\";\n\n        if (!getFile(javadocDir, docsetIndexFile).exists()) {\n            docsetIndexFile = null;\n        }\n\n        final File indexFilesDir = getFile(javadocDir, \"index-files\");\n        if (indexFilesDir.exists() && indexFilesDir.isDirectory()) {\n            docsetIndexFile = (docsetIndexFile != null) ? docsetIndexFile : \"index-1.html\";\n            for (File f : FileUtils.listFiles(indexFilesDir, new String[]{\"html\"}, false)) {\n                if (f.getName().startsWith(\"index-\")) {\n                    indexData.addFileToIndex(f);\n                }\n            }\n        } else if (getFile(javadocDir, \"index-all.html\").exists()){\n            docsetIndexFile = (docsetIndexFile != null) ? docsetIndexFile : \"index-all.html\";\n            indexData.addFileToIndex(getFile(javadocDir, \"index-all.html\"));\n        }\n\n        if (!indexData.hasFilesToIndex()) {\n            throw new BuilderException(String.format(\"Did not find any javadoc files. Make sure that %s is a directory containing javadoc\", javadocDir.getAbsolutePath()));\n        }\n\n        indexData.setDocsetIndexFile(docsetIndexFile);\n        logVerbose(\"Found javadoc files\");\n        return indexData;\n    }", "signature": "IndexData findIndexFile(File javadocDir)", "full_signature": "public static IndexData findIndexFile(File javadocDir)", "class_method_signature": "JavadocSupport.findIndexFile(File javadocDir)", "testcase": false, "constructor": false, "invocations": ["exists", "isDirectory", "format", "getAbsolutePath", "logVerbose", "exists", "getFile", "getFile", "exists", "isDirectory", "listFiles", "startsWith", "getName", "addFileToIndex", "exists", "getFile", "addFileToIndex", "getFile", "hasFilesToIndex", "format", "getAbsolutePath", "setDocsetIndexFile", "logVerbose"]}, "repository": {"repo_id": 34531285, "url": "https://github.com/iamthechad/javadoc2dash", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 17, "size": 396, "license": "licensed"}}