{"test_class": {"identifier": "RepairRunnerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RepairRunnerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RepairRunnerTest.class)", "var_name": "LOG"}, {"original_string": "private static final Set<String> TABLES = ImmutableSet.of(\"table1\");", "modifier": "private static final", "type": "Set<String>", "declarator": "TABLES = ImmutableSet.of(\"table1\")", "var_name": "TABLES"}, {"original_string": "private final Cluster cluster = Cluster.builder()\n            .withName(\"test_\" + RandomStringUtils.randomAlphabetic(12))\n            .withSeedHosts(ImmutableSet.of(\"127.0.0.1\"))\n            .withState(Cluster.State.ACTIVE)\n            .build();", "modifier": "private final", "type": "Cluster", "declarator": "cluster = Cluster.builder()\n            .withName(\"test_\" + RandomStringUtils.randomAlphabetic(12))\n            .withSeedHosts(ImmutableSet.of(\"127.0.0.1\"))\n            .withState(Cluster.State.ACTIVE)\n            .build()", "var_name": "cluster"}], "file": "src/server/src/test/java/io/cassandrareaper/service/RepairRunnerTest.java"}, "test_case": {"identifier": "getPossibleParallelRepairsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getPossibleParallelRepairsTest() throws Exception {\n    Map<List<String>, List<String>> map = RepairRunnerTest.threeNodeCluster();\n    Map<String, String> endpointsThreeNodes = RepairRunnerTest.threeNodeClusterEndpoint();\n    assertEquals(1, RepairRunner.getPossibleParallelRepairsCount(map, endpointsThreeNodes, DatacenterAvailability.ALL));\n\n    map = RepairRunnerTest.sixNodeCluster();\n    Map<String, String> endpointsSixNodes = RepairRunnerTest.sixNodeClusterEndpoint();\n    assertEquals(2, RepairRunner.getPossibleParallelRepairsCount(map, endpointsSixNodes, DatacenterAvailability.ALL));\n    assertEquals(1,\n        RepairRunner.getPossibleParallelRepairsCount(map, endpointsSixNodes, DatacenterAvailability.SIDECAR));\n  }", "signature": "void getPossibleParallelRepairsTest()", "full_signature": "@Test public void getPossibleParallelRepairsTest()", "class_method_signature": "RepairRunnerTest.getPossibleParallelRepairsTest()", "testcase": true, "constructor": false, "invocations": ["threeNodeCluster", "threeNodeClusterEndpoint", "assertEquals", "getPossibleParallelRepairsCount", "sixNodeCluster", "sixNodeClusterEndpoint", "assertEquals", "getPossibleParallelRepairsCount", "assertEquals", "getPossibleParallelRepairsCount"]}, "focal_class": {"identifier": "RepairRunner", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RepairRunner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RepairRunner.class)", "var_name": "LOG"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final ClusterFacade clusterFacade;", "modifier": "private final", "type": "ClusterFacade", "declarator": "clusterFacade", "var_name": "clusterFacade"}, {"original_string": "private final UUID repairRunId;", "modifier": "private final", "type": "UUID", "declarator": "repairRunId", "var_name": "repairRunId"}, {"original_string": "private final String clusterName;", "modifier": "private final", "type": "String", "declarator": "clusterName", "var_name": "clusterName"}, {"original_string": "private final AtomicReferenceArray<UUID> currentlyRunningSegments;", "modifier": "private final", "type": "AtomicReferenceArray<UUID>", "declarator": "currentlyRunningSegments", "var_name": "currentlyRunningSegments"}, {"original_string": "private final List<RingRange> parallelRanges;", "modifier": "private final", "type": "List<RingRange>", "declarator": "parallelRanges", "var_name": "parallelRanges"}, {"original_string": "private final String metricNameForMillisSinceLastRepairPerKeyspace;", "modifier": "private final", "type": "String", "declarator": "metricNameForMillisSinceLastRepairPerKeyspace", "var_name": "metricNameForMillisSinceLastRepairPerKeyspace"}, {"original_string": "private final String metricNameForMillisSinceLastRepair;", "modifier": "private final", "type": "String", "declarator": "metricNameForMillisSinceLastRepair", "var_name": "metricNameForMillisSinceLastRepair"}, {"original_string": "private final Cluster cluster;", "modifier": "private final", "type": "Cluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private float repairProgress;", "modifier": "private", "type": "float", "declarator": "repairProgress", "var_name": "repairProgress"}, {"original_string": "private float segmentsDone;", "modifier": "private", "type": "float", "declarator": "segmentsDone", "var_name": "segmentsDone"}, {"original_string": "private float segmentsTotal;", "modifier": "private", "type": "float", "declarator": "segmentsTotal", "var_name": "segmentsTotal"}, {"original_string": "private final List<RingRange> localEndpointRanges;", "modifier": "private final", "type": "List<RingRange>", "declarator": "localEndpointRanges", "var_name": "localEndpointRanges"}], "methods": [{"identifier": "RepairRunner", "parameters": "(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "modifiers": "private", "return": "", "signature": " RepairRunner(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "full_signature": "private  RepairRunner(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "class_method_signature": "RepairRunner.RepairRunner(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "modifiers": "public static", "return": "RepairRunner", "signature": "RepairRunner create(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "full_signature": "public static RepairRunner create(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "class_method_signature": "RepairRunner.create(\n      AppContext context,\n      UUID repairRunId,\n      ClusterFacade clusterFacade)", "testcase": false, "constructor": false}, {"identifier": "registerMetric", "parameters": "(String metricName, Gauge<?> gauge)", "modifiers": "private", "return": "void", "signature": "void registerMetric(String metricName, Gauge<?> gauge)", "full_signature": "private void registerMetric(String metricName, Gauge<?> gauge)", "class_method_signature": "RepairRunner.registerMetric(String metricName, Gauge<?> gauge)", "testcase": false, "constructor": false}, {"identifier": "getRepairRunId", "parameters": "()", "modifiers": "", "return": "UUID", "signature": "UUID getRepairRunId()", "full_signature": " UUID getRepairRunId()", "class_method_signature": "RepairRunner.getRepairRunId()", "testcase": false, "constructor": false}, {"identifier": "getPossibleParallelRepairsCount", "parameters": "(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "modifiers": "static", "return": "int", "signature": "int getPossibleParallelRepairsCount(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "full_signature": "static int getPossibleParallelRepairsCount(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "class_method_signature": "RepairRunner.getPossibleParallelRepairsCount(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "testcase": false, "constructor": false}, {"identifier": "getParallelRanges", "parameters": "(int parallelRepairs, List<RingRange> segments)", "modifiers": "static", "return": "List<RingRange>", "signature": "List<RingRange> getParallelRanges(int parallelRepairs, List<RingRange> segments)", "full_signature": "static List<RingRange> getParallelRanges(int parallelRepairs, List<RingRange> segments)", "class_method_signature": "RepairRunner.getParallelRanges(int parallelRepairs, List<RingRange> segments)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "RepairRunner.run()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void start()", "full_signature": "private void start()", "class_method_signature": "RepairRunner.start()", "testcase": false, "constructor": false}, {"identifier": "updateClusterNodeList", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void updateClusterNodeList()", "full_signature": "private void updateClusterNodeList()", "class_method_signature": "RepairRunner.updateClusterNodeList()", "testcase": false, "constructor": false}, {"identifier": "endRepairRun", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void endRepairRun()", "full_signature": "private void endRepairRun()", "class_method_signature": "RepairRunner.endRepairRun()", "testcase": false, "constructor": false}, {"identifier": "startNextSegment", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startNextSegment()", "full_signature": "private void startNextSegment()", "class_method_signature": "RepairRunner.startNextSegment()", "testcase": false, "constructor": false}, {"identifier": "repairSegment", "parameters": "(final int rangeIndex, final UUID segmentId, Segment segment)", "modifiers": "private", "return": "boolean", "signature": "boolean repairSegment(final int rangeIndex, final UUID segmentId, Segment segment)", "full_signature": "private boolean repairSegment(final int rangeIndex, final UUID segmentId, Segment segment)", "class_method_signature": "RepairRunner.repairSegment(final int rangeIndex, final UUID segmentId, Segment segment)", "testcase": false, "constructor": false}, {"identifier": "filterPotentialCoordinatorsByDatacenters", "parameters": "(\n      Collection<String> datacenters,\n      List<String> potentialCoordinators)", "modifiers": "private", "return": "List<String>", "signature": "List<String> filterPotentialCoordinatorsByDatacenters(\n      Collection<String> datacenters,\n      List<String> potentialCoordinators)", "full_signature": "private List<String> filterPotentialCoordinatorsByDatacenters(\n      Collection<String> datacenters,\n      List<String> potentialCoordinators)", "class_method_signature": "RepairRunner.filterPotentialCoordinatorsByDatacenters(\n      Collection<String> datacenters,\n      List<String> potentialCoordinators)", "testcase": false, "constructor": false}, {"identifier": "getNodeDatacenterPair", "parameters": "(String node)", "modifiers": "private", "return": "Pair<String, String>", "signature": "Pair<String, String> getNodeDatacenterPair(String node)", "full_signature": "private Pair<String, String> getNodeDatacenterPair(String node)", "class_method_signature": "RepairRunner.getNodeDatacenterPair(String node)", "testcase": false, "constructor": false}, {"identifier": "handleResult", "parameters": "(UUID segmentId)", "modifiers": "private", "return": "void", "signature": "void handleResult(UUID segmentId)", "full_signature": "private void handleResult(UUID segmentId)", "class_method_signature": "RepairRunner.handleResult(UUID segmentId)", "testcase": false, "constructor": false}, {"identifier": "updateLastEvent", "parameters": "(String newEvent)", "modifiers": "", "return": "void", "signature": "void updateLastEvent(String newEvent)", "full_signature": " void updateLastEvent(String newEvent)", "class_method_signature": "RepairRunner.updateLastEvent(String newEvent)", "testcase": false, "constructor": false}, {"identifier": "killAndCleanupRunner", "parameters": "()", "modifiers": "", "return": "void", "signature": "void killAndCleanupRunner()", "full_signature": " void killAndCleanupRunner()", "class_method_signature": "RepairRunner.killAndCleanupRunner()", "testcase": false, "constructor": false}, {"identifier": "metricName", "parameters": "(String metric, String clusterName, String keyspaceName, UUID repairRunId)", "modifiers": "private", "return": "String", "signature": "String metricName(String metric, String clusterName, String keyspaceName, UUID repairRunId)", "full_signature": "private String metricName(String metric, String clusterName, String keyspaceName, UUID repairRunId)", "class_method_signature": "RepairRunner.metricName(String metric, String clusterName, String keyspaceName, UUID repairRunId)", "testcase": false, "constructor": false}, {"identifier": "metricName", "parameters": "(String metric, String clusterName, UUID repairRunId)", "modifiers": "private", "return": "String", "signature": "String metricName(String metric, String clusterName, UUID repairRunId)", "full_signature": "private String metricName(String metric, String clusterName, UUID repairRunId)", "class_method_signature": "RepairRunner.metricName(String metric, String clusterName, UUID repairRunId)", "testcase": false, "constructor": false}, {"identifier": "fixMissingRepairRunTables", "parameters": "(RepairRun repairRun, RepairUnit repairUnit)", "modifiers": "private", "return": "RepairRun", "signature": "RepairRun fixMissingRepairRunTables(RepairRun repairRun, RepairUnit repairUnit)", "full_signature": "private RepairRun fixMissingRepairRunTables(RepairRun repairRun, RepairUnit repairUnit)", "class_method_signature": "RepairRunner.fixMissingRepairRunTables(RepairRun repairRun, RepairUnit repairUnit)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/RepairRunner.java"}, "focal_method": {"identifier": "getPossibleParallelRepairsCount", "parameters": "(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "modifiers": "static", "return": "int", "body": "static int getPossibleParallelRepairsCount(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability) throws ReaperException {\n\n    if (ranges.isEmpty()) {\n      String msg = \"Repairing 0-sized cluster.\";\n      LOG.error(msg);\n      throw new ReaperException(msg);\n    }\n\n    if (DatacenterAvailability.SIDECAR == datacenterAvailability) {\n      // only 1 segment can be repaired by each instance at once in sidecar mode\n      return 1;\n    }\n\n    LOG.debug(\n        \"Possible parallel repairs : {}\",\n        Math.min(\n            ranges.size() / ranges.values().iterator().next().size(),\n            Math.max(1, hostsInRing.keySet().size() / ranges.values().iterator().next().size())));\n    return Math.min(\n        ranges.size() / ranges.values().iterator().next().size(),\n        Math.max(1, hostsInRing.keySet().size() / ranges.values().iterator().next().size()));\n  }", "signature": "int getPossibleParallelRepairsCount(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "full_signature": "static int getPossibleParallelRepairsCount(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "class_method_signature": "RepairRunner.getPossibleParallelRepairsCount(\n      Map<List<String>, List<String>> ranges,\n      Map<String, String> hostsInRing,\n      DatacenterAvailability datacenterAvailability)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "error", "debug", "min", "size", "size", "next", "iterator", "values", "max", "size", "keySet", "size", "next", "iterator", "values", "min", "size", "size", "next", "iterator", "values", "max", "size", "keySet", "size", "next", "iterator", "values"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}