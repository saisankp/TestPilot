{"test_class": {"identifier": "AbstractExtensionFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PluginManager pluginManager;", "modifier": "private", "type": "PluginManager", "declarator": "pluginManager", "var_name": "pluginManager"}], "file": "pf4j/src/test/java/org/pf4j/AbstractExtensionFinderTest.java"}, "test_case": {"identifier": "testFindFromPlugin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindFromPlugin() {\n        ExtensionFinder instance = new AbstractExtensionFinder(pluginManager) {\n\n            @Override\n            public Map<String, Set<String>> readPluginsStorages() {\n                Map<String, Set<String>> entries = new LinkedHashMap<>();\n\n                Set<String> bucket = new HashSet<>();\n                bucket.add(\"org.pf4j.plugin.TestExtension\");\n                bucket.add(\"org.pf4j.plugin.FailTestExtension\");\n                entries.put(\"plugin1\", bucket);\n                bucket = new HashSet<>();\n                bucket.add(\"org.pf4j.plugin.TestExtension\");\n                entries.put(\"plugin2\", bucket);\n\n                return entries;\n            }\n\n            @Override\n            public Map<String, Set<String>> readClasspathStorages() {\n                return Collections.emptyMap();\n            }\n\n        };\n\n        List<ExtensionWrapper<TestExtensionPoint>> list = instance.find(TestExtensionPoint.class);\n        assertEquals(2, list.size());\n\n        list = instance.find(TestExtensionPoint.class, \"plugin1\");\n        assertEquals(2, list.size());\n\n        list = instance.find(TestExtensionPoint.class, \"plugin2\");\n        assertEquals(0, list.size());\n    }", "signature": "void testFindFromPlugin()", "full_signature": "@Test public void testFindFromPlugin()", "class_method_signature": "AbstractExtensionFinderTest.testFindFromPlugin()", "testcase": true, "constructor": false, "invocations": ["add", "add", "put", "add", "put", "emptyMap", "find", "assertEquals", "size", "find", "assertEquals", "size", "find", "assertEquals", "size"]}, "focal_class": {"identifier": "AbstractExtensionFinder", "superclass": "", "interfaces": "implements ExtensionFinder, PluginStateListener", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(AbstractExtensionFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(AbstractExtensionFinder.class)", "var_name": "log"}, {"original_string": "protected PluginManager pluginManager;", "modifier": "protected", "type": "PluginManager", "declarator": "pluginManager", "var_name": "pluginManager"}, {"original_string": "protected volatile Map<String, Set<String>> entries;", "modifier": "protected volatile", "type": "Map<String, Set<String>>", "declarator": "entries", "var_name": "entries"}, {"original_string": "protected volatile Map<String, ExtensionInfo> extensionInfos;", "modifier": "protected volatile", "type": "Map<String, ExtensionInfo>", "declarator": "extensionInfos", "var_name": "extensionInfos"}, {"original_string": "protected Boolean checkForExtensionDependencies = null;", "modifier": "protected", "type": "Boolean", "declarator": "checkForExtensionDependencies = null", "var_name": "checkForExtensionDependencies"}], "methods": [{"identifier": "AbstractExtensionFinder", "parameters": "(PluginManager pluginManager)", "modifiers": "public", "return": "", "signature": " AbstractExtensionFinder(PluginManager pluginManager)", "full_signature": "public  AbstractExtensionFinder(PluginManager pluginManager)", "class_method_signature": "AbstractExtensionFinder.AbstractExtensionFinder(PluginManager pluginManager)", "testcase": false, "constructor": true}, {"identifier": "readPluginsStorages", "parameters": "()", "modifiers": "public abstract", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> readPluginsStorages()", "full_signature": "public abstract Map<String, Set<String>> readPluginsStorages()", "class_method_signature": "AbstractExtensionFinder.readPluginsStorages()", "testcase": false, "constructor": false}, {"identifier": "readClasspathStorages", "parameters": "()", "modifiers": "public abstract", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> readClasspathStorages()", "full_signature": "public abstract Map<String, Set<String>> readClasspathStorages()", "class_method_signature": "AbstractExtensionFinder.readClasspathStorages()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Class<T> type)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<ExtensionWrapper<T>>", "signature": "List<ExtensionWrapper<T>> find(Class<T> type)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<ExtensionWrapper<T>> find(Class<T> type)", "class_method_signature": "AbstractExtensionFinder.find(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(Class<T> type, String pluginId)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<ExtensionWrapper<T>>", "signature": "List<ExtensionWrapper<T>> find(Class<T> type, String pluginId)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<ExtensionWrapper<T>> find(Class<T> type, String pluginId)", "class_method_signature": "AbstractExtensionFinder.find(Class<T> type, String pluginId)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "List<ExtensionWrapper>", "signature": "List<ExtensionWrapper> find(String pluginId)", "full_signature": "@Override public List<ExtensionWrapper> find(String pluginId)", "class_method_signature": "AbstractExtensionFinder.find(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "findClassNames", "parameters": "(String pluginId)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> findClassNames(String pluginId)", "full_signature": "@Override public Set<String> findClassNames(String pluginId)", "class_method_signature": "AbstractExtensionFinder.findClassNames(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "pluginStateChanged", "parameters": "(PluginStateEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void pluginStateChanged(PluginStateEvent event)", "full_signature": "@Override public void pluginStateChanged(PluginStateEvent event)", "class_method_signature": "AbstractExtensionFinder.pluginStateChanged(PluginStateEvent event)", "testcase": false, "constructor": false}, {"identifier": "isCheckForExtensionDependencies", "parameters": "()", "modifiers": "public final", "return": "boolean", "signature": "boolean isCheckForExtensionDependencies()", "full_signature": "public final boolean isCheckForExtensionDependencies()", "class_method_signature": "AbstractExtensionFinder.isCheckForExtensionDependencies()", "testcase": false, "constructor": false}, {"identifier": "setCheckForExtensionDependencies", "parameters": "(boolean checkForExtensionDependencies)", "modifiers": "public", "return": "void", "signature": "void setCheckForExtensionDependencies(boolean checkForExtensionDependencies)", "full_signature": "public void setCheckForExtensionDependencies(boolean checkForExtensionDependencies)", "class_method_signature": "AbstractExtensionFinder.setCheckForExtensionDependencies(boolean checkForExtensionDependencies)", "testcase": false, "constructor": false}, {"identifier": "debugExtensions", "parameters": "(Set<String> extensions)", "modifiers": "protected", "return": "void", "signature": "void debugExtensions(Set<String> extensions)", "full_signature": "protected void debugExtensions(Set<String> extensions)", "class_method_signature": "AbstractExtensionFinder.debugExtensions(Set<String> extensions)", "testcase": false, "constructor": false}, {"identifier": "readStorages", "parameters": "()", "modifiers": "private", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> readStorages()", "full_signature": "private Map<String, Set<String>> readStorages()", "class_method_signature": "AbstractExtensionFinder.readStorages()", "testcase": false, "constructor": false}, {"identifier": "getEntries", "parameters": "()", "modifiers": "private", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> getEntries()", "full_signature": "private Map<String, Set<String>> getEntries()", "class_method_signature": "AbstractExtensionFinder.getEntries()", "testcase": false, "constructor": false}, {"identifier": "getExtensionInfo", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "private", "return": "ExtensionInfo", "signature": "ExtensionInfo getExtensionInfo(String className, ClassLoader classLoader)", "full_signature": "private ExtensionInfo getExtensionInfo(String className, ClassLoader classLoader)", "class_method_signature": "AbstractExtensionFinder.getExtensionInfo(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "createExtensionWrapper", "parameters": "(Class<?> extensionClass)", "modifiers": "private", "return": "ExtensionWrapper", "signature": "ExtensionWrapper createExtensionWrapper(Class<?> extensionClass)", "full_signature": "private ExtensionWrapper createExtensionWrapper(Class<?> extensionClass)", "class_method_signature": "AbstractExtensionFinder.createExtensionWrapper(Class<?> extensionClass)", "testcase": false, "constructor": false}, {"identifier": "findExtensionAnnotation", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "Extension", "signature": "Extension findExtensionAnnotation(Class<?> clazz)", "full_signature": "public static Extension findExtensionAnnotation(Class<?> clazz)", "class_method_signature": "AbstractExtensionFinder.findExtensionAnnotation(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "checkDifferentClassLoaders", "parameters": "(Class<?> type, Class<?> extensionClass)", "modifiers": "private", "return": "void", "signature": "void checkDifferentClassLoaders(Class<?> type, Class<?> extensionClass)", "full_signature": "private void checkDifferentClassLoaders(Class<?> type, Class<?> extensionClass)", "class_method_signature": "AbstractExtensionFinder.checkDifferentClassLoaders(Class<?> type, Class<?> extensionClass)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/AbstractExtensionFinder.java"}, "focal_method": {"identifier": "find", "parameters": "(Class<T> type)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<ExtensionWrapper<T>>", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> List<ExtensionWrapper<T>> find(Class<T> type) {\n        log.debug(\"Finding extensions of extension point '{}'\", type.getName());\n        Map<String, Set<String>> entries = getEntries();\n        List<ExtensionWrapper<T>> result = new ArrayList<>();\n\n        // add extensions found in classpath and plugins\n        for (String pluginId : entries.keySet()) {\n            // classpath's extensions <=> pluginId = null\n            List<ExtensionWrapper<T>> pluginExtensions = find(type, pluginId);\n            result.addAll(pluginExtensions);\n        }\n\n        if (result.isEmpty()) {\n            log.debug(\"No extensions found for extension point '{}'\", type.getName());\n        } else {\n            log.debug(\"Found {} extensions for extension point '{}'\", result.size(), type.getName());\n        }\n\n        // sort by \"ordinal\" property\n        Collections.sort(result);\n\n        return result;\n    }", "signature": "List<ExtensionWrapper<T>> find(Class<T> type)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<ExtensionWrapper<T>> find(Class<T> type)", "class_method_signature": "AbstractExtensionFinder.find(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["debug", "getName", "getEntries", "keySet", "find", "addAll", "isEmpty", "debug", "getName", "debug", "size", "getName", "sort"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}