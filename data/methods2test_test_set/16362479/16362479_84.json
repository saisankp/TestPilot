{"test_class": {"identifier": "AbstractClientConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final MemberName MEMBER_NAME = MemberName.forName(\"member-1\");", "modifier": "protected static final", "type": "MemberName", "declarator": "MEMBER_NAME = MemberName.forName(\"member-1\")", "var_name": "MEMBER_NAME"}, {"original_string": "protected static final FrontendType FRONTEND_TYPE =\n            FrontendType.forName(ClientActorContextTest.class.getSimpleName());", "modifier": "protected static final", "type": "FrontendType", "declarator": "FRONTEND_TYPE =\n            FrontendType.forName(ClientActorContextTest.class.getSimpleName())", "var_name": "FRONTEND_TYPE"}, {"original_string": "protected static final FrontendIdentifier FRONTEND_ID = FrontendIdentifier.create(MEMBER_NAME, FRONTEND_TYPE);", "modifier": "protected static final", "type": "FrontendIdentifier", "declarator": "FRONTEND_ID = FrontendIdentifier.create(MEMBER_NAME, FRONTEND_TYPE)", "var_name": "FRONTEND_ID"}, {"original_string": "protected static final ClientIdentifier CLIENT_ID = ClientIdentifier.create(FRONTEND_ID, 0);", "modifier": "protected static final", "type": "ClientIdentifier", "declarator": "CLIENT_ID = ClientIdentifier.create(FRONTEND_ID, 0)", "var_name": "CLIENT_ID"}, {"original_string": "protected static final String PERSISTENCE_ID = \"per-1\";", "modifier": "protected static final", "type": "String", "declarator": "PERSISTENCE_ID = \"per-1\"", "var_name": "PERSISTENCE_ID"}, {"original_string": "protected T connection;", "modifier": "protected", "type": "T", "declarator": "connection", "var_name": "connection"}, {"original_string": "protected ClientActorContext context;", "modifier": "protected", "type": "ClientActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "protected ActorSystem system;", "modifier": "protected", "type": "ActorSystem", "declarator": "system", "var_name": "system"}, {"original_string": "protected TestProbe backendProbe;", "modifier": "protected", "type": "TestProbe", "declarator": "backendProbe", "var_name": "backendProbe"}, {"original_string": "protected TestProbe contextProbe;", "modifier": "protected", "type": "TestProbe", "declarator": "contextProbe", "var_name": "contextProbe"}, {"original_string": "protected TestProbe replyToProbe;", "modifier": "protected", "type": "TestProbe", "declarator": "replyToProbe", "var_name": "replyToProbe"}], "file": "opendaylight/md-sal/cds-access-client/src/test/java/org/opendaylight/controller/cluster/access/client/AbstractClientConnectionTest.java"}, "test_case": {"identifier": "testPoison", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPoison() {\n        final Consumer<Response<?, ?>> callback = mock(Consumer.class);\n        final Request<?, ?> request = createRequest(replyToProbe.ref());\n        final ConnectionEntry entry = new ConnectionEntry(request, callback, 0L);\n        connection.enqueueEntry(entry, 0L);\n        connection.poison(new RuntimeRequestException(\"fail\", new RuntimeException(\"fail\")));\n        verify(callback, timeout(1000)).accept(isA(TransactionFailure.class));\n    }", "signature": "void testPoison()", "full_signature": "@Test public void testPoison()", "class_method_signature": "AbstractClientConnectionTest.testPoison()", "testcase": true, "constructor": false, "invocations": ["mock", "createRequest", "ref", "enqueueEntry", "poison", "accept", "verify", "timeout", "isA"]}, "focal_class": {"identifier": "AbstractClientConnection", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractClientConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractClientConnection.class)", "var_name": "LOG"}, {"original_string": "public static final long DEFAULT_BACKEND_ALIVE_TIMEOUT_NANOS = TimeUnit.SECONDS.toNanos(30);", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_BACKEND_ALIVE_TIMEOUT_NANOS = TimeUnit.SECONDS.toNanos(30)", "var_name": "DEFAULT_BACKEND_ALIVE_TIMEOUT_NANOS"}, {"original_string": "public static final long DEFAULT_REQUEST_TIMEOUT_NANOS = TimeUnit.MINUTES.toNanos(2);", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_REQUEST_TIMEOUT_NANOS = TimeUnit.MINUTES.toNanos(2)", "var_name": "DEFAULT_REQUEST_TIMEOUT_NANOS"}, {"original_string": "public static final long DEFAULT_NO_PROGRESS_TIMEOUT_NANOS = TimeUnit.MINUTES.toNanos(15);", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_NO_PROGRESS_TIMEOUT_NANOS = TimeUnit.MINUTES.toNanos(15)", "var_name": "DEFAULT_NO_PROGRESS_TIMEOUT_NANOS"}, {"original_string": "private static final long DEBUG_DELAY_NANOS = TimeUnit.MILLISECONDS.toNanos(100);", "modifier": "private static final", "type": "long", "declarator": "DEBUG_DELAY_NANOS = TimeUnit.MILLISECONDS.toNanos(100)", "var_name": "DEBUG_DELAY_NANOS"}, {"original_string": "private static final long MAX_DELAY_SECONDS = 5;", "modifier": "private static final", "type": "long", "declarator": "MAX_DELAY_SECONDS = 5", "var_name": "MAX_DELAY_SECONDS"}, {"original_string": "private static final long MAX_DELAY_NANOS = TimeUnit.SECONDS.toNanos(MAX_DELAY_SECONDS);", "modifier": "private static final", "type": "long", "declarator": "MAX_DELAY_NANOS = TimeUnit.SECONDS.toNanos(MAX_DELAY_SECONDS)", "var_name": "MAX_DELAY_NANOS"}, {"original_string": "private final Lock lock = new ReentrantLock();", "modifier": "private final", "type": "Lock", "declarator": "lock = new ReentrantLock()", "var_name": "lock"}, {"original_string": "private final ClientActorContext context;", "modifier": "private final", "type": "ClientActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "@GuardedBy(\"lock\")\n    private final TransmitQueue queue;", "modifier": "@GuardedBy(\"lock\")\n    private final", "type": "TransmitQueue", "declarator": "queue", "var_name": "queue"}, {"original_string": "private final @NonNull Long cookie;", "modifier": "private final @NonNull", "type": "Long", "declarator": "cookie", "var_name": "cookie"}, {"original_string": "private final String backendName;", "modifier": "private final", "type": "String", "declarator": "backendName", "var_name": "backendName"}, {"original_string": "@GuardedBy(\"lock\")\n    private boolean haveTimer;", "modifier": "@GuardedBy(\"lock\")\n    private", "type": "boolean", "declarator": "haveTimer", "var_name": "haveTimer"}, {"original_string": "private long lastReceivedTicks;", "modifier": "private", "type": "long", "declarator": "lastReceivedTicks", "var_name": "lastReceivedTicks"}, {"original_string": "private volatile RequestException poisoned;", "modifier": "private volatile", "type": "RequestException", "declarator": "poisoned", "var_name": "poisoned"}], "methods": [{"identifier": "AbstractClientConnection", "parameters": "(final AbstractClientConnection<T> oldConn, final TransmitQueue newQueue,\n            final String backendName)", "modifiers": "private", "return": "", "signature": " AbstractClientConnection(final AbstractClientConnection<T> oldConn, final TransmitQueue newQueue,\n            final String backendName)", "full_signature": "private  AbstractClientConnection(final AbstractClientConnection<T> oldConn, final TransmitQueue newQueue,\n            final String backendName)", "class_method_signature": "AbstractClientConnection.AbstractClientConnection(final AbstractClientConnection<T> oldConn, final TransmitQueue newQueue,\n            final String backendName)", "testcase": false, "constructor": true}, {"identifier": "AbstractClientConnection", "parameters": "(final ClientActorContext context, final Long cookie, final String backendName,\n            final int queueDepth)", "modifiers": "", "return": "", "signature": " AbstractClientConnection(final ClientActorContext context, final Long cookie, final String backendName,\n            final int queueDepth)", "full_signature": "  AbstractClientConnection(final ClientActorContext context, final Long cookie, final String backendName,\n            final int queueDepth)", "class_method_signature": "AbstractClientConnection.AbstractClientConnection(final ClientActorContext context, final Long cookie, final String backendName,\n            final int queueDepth)", "testcase": false, "constructor": true}, {"identifier": "AbstractClientConnection", "parameters": "(final AbstractClientConnection<T> oldConn)", "modifiers": "", "return": "", "signature": " AbstractClientConnection(final AbstractClientConnection<T> oldConn)", "full_signature": "  AbstractClientConnection(final AbstractClientConnection<T> oldConn)", "class_method_signature": "AbstractClientConnection.AbstractClientConnection(final AbstractClientConnection<T> oldConn)", "testcase": false, "constructor": true}, {"identifier": "AbstractClientConnection", "parameters": "(final AbstractClientConnection<T> oldConn, final T newBackend,\n            final int queueDepth)", "modifiers": "", "return": "", "signature": " AbstractClientConnection(final AbstractClientConnection<T> oldConn, final T newBackend,\n            final int queueDepth)", "full_signature": "  AbstractClientConnection(final AbstractClientConnection<T> oldConn, final T newBackend,\n            final int queueDepth)", "class_method_signature": "AbstractClientConnection.AbstractClientConnection(final AbstractClientConnection<T> oldConn, final T newBackend,\n            final int queueDepth)", "testcase": false, "constructor": true}, {"identifier": "context", "parameters": "()", "modifiers": "public final", "return": "ClientActorContext", "signature": "ClientActorContext context()", "full_signature": "public final ClientActorContext context()", "class_method_signature": "AbstractClientConnection.context()", "testcase": false, "constructor": false}, {"identifier": "cookie", "parameters": "()", "modifiers": "public final @NonNull", "return": "Long", "signature": "Long cookie()", "full_signature": "public final @NonNull Long cookie()", "class_method_signature": "AbstractClientConnection.cookie()", "testcase": false, "constructor": false}, {"identifier": "localActor", "parameters": "()", "modifiers": "public final", "return": "ActorRef", "signature": "ActorRef localActor()", "full_signature": "public final ActorRef localActor()", "class_method_signature": "AbstractClientConnection.localActor()", "testcase": false, "constructor": false}, {"identifier": "currentTime", "parameters": "()", "modifiers": "public final", "return": "long", "signature": "long currentTime()", "full_signature": "public final long currentTime()", "class_method_signature": "AbstractClientConnection.currentTime()", "testcase": false, "constructor": false}, {"identifier": "sendRequest", "parameters": "(final Request<?, ?> request, final Consumer<Response<?, ?>> callback)", "modifiers": "public final", "return": "void", "signature": "void sendRequest(final Request<?, ?> request, final Consumer<Response<?, ?>> callback)", "full_signature": "public final void sendRequest(final Request<?, ?> request, final Consumer<Response<?, ?>> callback)", "class_method_signature": "AbstractClientConnection.sendRequest(final Request<?, ?> request, final Consumer<Response<?, ?>> callback)", "testcase": false, "constructor": false}, {"identifier": "enqueueRequest", "parameters": "(final Request<?, ?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "modifiers": "public final", "return": "void", "signature": "void enqueueRequest(final Request<?, ?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "full_signature": "public final void enqueueRequest(final Request<?, ?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "class_method_signature": "AbstractClientConnection.enqueueRequest(final Request<?, ?> request, final Consumer<Response<?, ?>> callback,\n            final long enqueuedTicks)", "testcase": false, "constructor": false}, {"identifier": "enqueueOrForward", "parameters": "(final ConnectionEntry entry, final long now)", "modifiers": "private", "return": "long", "signature": "long enqueueOrForward(final ConnectionEntry entry, final long now)", "full_signature": "private long enqueueOrForward(final ConnectionEntry entry, final long now)", "class_method_signature": "AbstractClientConnection.enqueueOrForward(final ConnectionEntry entry, final long now)", "testcase": false, "constructor": false}, {"identifier": "enqueueEntry", "parameters": "(final ConnectionEntry entry, final long now)", "modifiers": "public final", "return": "void", "signature": "void enqueueEntry(final ConnectionEntry entry, final long now)", "full_signature": "public final void enqueueEntry(final ConnectionEntry entry, final long now)", "class_method_signature": "AbstractClientConnection.enqueueEntry(final ConnectionEntry entry, final long now)", "testcase": false, "constructor": false}, {"identifier": "commonEnqueue", "parameters": "(final ConnectionEntry entry, final long now)", "modifiers": "@Holding(\"lock\") private", "return": "void", "signature": "void commonEnqueue(final ConnectionEntry entry, final long now)", "full_signature": "@Holding(\"lock\") private void commonEnqueue(final ConnectionEntry entry, final long now)", "class_method_signature": "AbstractClientConnection.commonEnqueue(final ConnectionEntry entry, final long now)", "testcase": false, "constructor": false}, {"identifier": "cancelDebt", "parameters": "()", "modifiers": "final", "return": "void", "signature": "void cancelDebt()", "full_signature": "final void cancelDebt()", "class_method_signature": "AbstractClientConnection.cancelDebt()", "testcase": false, "constructor": false}, {"identifier": "getBackendInfo", "parameters": "()", "modifiers": "public abstract", "return": "Optional<T>", "signature": "Optional<T> getBackendInfo()", "full_signature": "public abstract Optional<T> getBackendInfo()", "class_method_signature": "AbstractClientConnection.getBackendInfo()", "testcase": false, "constructor": false}, {"identifier": "startReplay", "parameters": "()", "modifiers": "final", "return": "Collection<ConnectionEntry>", "signature": "Collection<ConnectionEntry> startReplay()", "full_signature": "final Collection<ConnectionEntry> startReplay()", "class_method_signature": "AbstractClientConnection.startReplay()", "testcase": false, "constructor": false}, {"identifier": "finishReplay", "parameters": "(final ReconnectForwarder forwarder)", "modifiers": "@Holding(\"lock\") final", "return": "void", "signature": "void finishReplay(final ReconnectForwarder forwarder)", "full_signature": "@Holding(\"lock\") final void finishReplay(final ReconnectForwarder forwarder)", "class_method_signature": "AbstractClientConnection.finishReplay(final ReconnectForwarder forwarder)", "testcase": false, "constructor": false}, {"identifier": "setForwarder", "parameters": "(final ReconnectForwarder forwarder)", "modifiers": "@Holding(\"lock\") final", "return": "void", "signature": "void setForwarder(final ReconnectForwarder forwarder)", "full_signature": "@Holding(\"lock\") final void setForwarder(final ReconnectForwarder forwarder)", "class_method_signature": "AbstractClientConnection.setForwarder(final ReconnectForwarder forwarder)", "testcase": false, "constructor": false}, {"identifier": "lockedReconnect", "parameters": "(ClientActorBehavior<T> current,\n            RequestException runtimeRequestException)", "modifiers": "@Holding(\"lock\") abstract", "return": "ClientActorBehavior<T>", "signature": "ClientActorBehavior<T> lockedReconnect(ClientActorBehavior<T> current,\n            RequestException runtimeRequestException)", "full_signature": "@Holding(\"lock\") abstract ClientActorBehavior<T> lockedReconnect(ClientActorBehavior<T> current,\n            RequestException runtimeRequestException)", "class_method_signature": "AbstractClientConnection.lockedReconnect(ClientActorBehavior<T> current,\n            RequestException runtimeRequestException)", "testcase": false, "constructor": false}, {"identifier": "sendEntry", "parameters": "(final ConnectionEntry entry, final long now)", "modifiers": "final", "return": "void", "signature": "void sendEntry(final ConnectionEntry entry, final long now)", "full_signature": "final void sendEntry(final ConnectionEntry entry, final long now)", "class_method_signature": "AbstractClientConnection.sendEntry(final ConnectionEntry entry, final long now)", "testcase": false, "constructor": false}, {"identifier": "reconnect", "parameters": "(final ClientActorBehavior<T> current, final RequestException cause)", "modifiers": "final", "return": "ClientActorBehavior<T>", "signature": "ClientActorBehavior<T> reconnect(final ClientActorBehavior<T> current, final RequestException cause)", "full_signature": "final ClientActorBehavior<T> reconnect(final ClientActorBehavior<T> current, final RequestException cause)", "class_method_signature": "AbstractClientConnection.reconnect(final ClientActorBehavior<T> current, final RequestException cause)", "testcase": false, "constructor": false}, {"identifier": "scheduleTimer", "parameters": "(final long delay)", "modifiers": "@Holding(\"lock\") private", "return": "void", "signature": "void scheduleTimer(final long delay)", "full_signature": "@Holding(\"lock\") private void scheduleTimer(final long delay)", "class_method_signature": "AbstractClientConnection.scheduleTimer(final long delay)", "testcase": false, "constructor": false}, {"identifier": "runTimer", "parameters": "(final ClientActorBehavior<T> current)", "modifiers": "@VisibleForTesting final", "return": "ClientActorBehavior<T>", "signature": "ClientActorBehavior<T> runTimer(final ClientActorBehavior<T> current)", "full_signature": "@VisibleForTesting final ClientActorBehavior<T> runTimer(final ClientActorBehavior<T> current)", "class_method_signature": "AbstractClientConnection.runTimer(final ClientActorBehavior<T> current)", "testcase": false, "constructor": false}, {"identifier": "checkTimeout", "parameters": "(final long now)", "modifiers": "@VisibleForTesting final", "return": "OptionalLong", "signature": "OptionalLong checkTimeout(final long now)", "full_signature": "@VisibleForTesting final OptionalLong checkTimeout(final long now)", "class_method_signature": "AbstractClientConnection.checkTimeout(final long now)", "testcase": false, "constructor": false}, {"identifier": "backendSilentTicks", "parameters": "(final long now)", "modifiers": "", "return": "long", "signature": "long backendSilentTicks(final long now)", "full_signature": " long backendSilentTicks(final long now)", "class_method_signature": "AbstractClientConnection.backendSilentTicks(final long now)", "testcase": false, "constructor": false}, {"identifier": "lockedCheckTimeout", "parameters": "(final long now)", "modifiers": "@SuppressFBWarnings(value = \"NP_OPTIONAL_RETURN_NULL\", justification = \"Returning null Optional is documented in the API contract.\") @GuardedBy(\"lock\") private", "return": "OptionalLong", "signature": "OptionalLong lockedCheckTimeout(final long now)", "full_signature": "@SuppressFBWarnings(value = \"NP_OPTIONAL_RETURN_NULL\", justification = \"Returning null Optional is documented in the API contract.\") @GuardedBy(\"lock\") private OptionalLong lockedCheckTimeout(final long now)", "class_method_signature": "AbstractClientConnection.lockedCheckTimeout(final long now)", "testcase": false, "constructor": false}, {"identifier": "timeoutEntry", "parameters": "(final ConnectionEntry entry, final long beenOpen)", "modifiers": "private", "return": "void", "signature": "void timeoutEntry(final ConnectionEntry entry, final long beenOpen)", "full_signature": "private void timeoutEntry(final ConnectionEntry entry, final long beenOpen)", "class_method_signature": "AbstractClientConnection.timeoutEntry(final ConnectionEntry entry, final long beenOpen)", "testcase": false, "constructor": false}, {"identifier": "poison", "parameters": "(final RequestException cause)", "modifiers": "final", "return": "void", "signature": "void poison(final RequestException cause)", "full_signature": "final void poison(final RequestException cause)", "class_method_signature": "AbstractClientConnection.poison(final RequestException cause)", "testcase": false, "constructor": false}, {"identifier": "poison", "parameters": "(final Collection<? extends ConnectionEntry> entries, final RequestException cause)", "modifiers": "private static", "return": "void", "signature": "void poison(final Collection<? extends ConnectionEntry> entries, final RequestException cause)", "full_signature": "private static void poison(final Collection<? extends ConnectionEntry> entries, final RequestException cause)", "class_method_signature": "AbstractClientConnection.poison(final Collection<? extends ConnectionEntry> entries, final RequestException cause)", "testcase": false, "constructor": false}, {"identifier": "lockedPoison", "parameters": "(final RequestException cause)", "modifiers": "@Holding(\"lock\") private", "return": "List<ConnectionEntry>", "signature": "List<ConnectionEntry> lockedPoison(final RequestException cause)", "full_signature": "@Holding(\"lock\") private List<ConnectionEntry> lockedPoison(final RequestException cause)", "class_method_signature": "AbstractClientConnection.lockedPoison(final RequestException cause)", "testcase": false, "constructor": false}, {"identifier": "enrichPoison", "parameters": "(final RequestException ex)", "modifiers": "", "return": "RequestException", "signature": "RequestException enrichPoison(final RequestException ex)", "full_signature": " RequestException enrichPoison(final RequestException ex)", "class_method_signature": "AbstractClientConnection.enrichPoison(final RequestException ex)", "testcase": false, "constructor": false}, {"identifier": "poisoned", "parameters": "()", "modifiers": "@VisibleForTesting final", "return": "RequestException", "signature": "RequestException poisoned()", "full_signature": "@VisibleForTesting final RequestException poisoned()", "class_method_signature": "AbstractClientConnection.poisoned()", "testcase": false, "constructor": false}, {"identifier": "receiveResponse", "parameters": "(final ResponseEnvelope<?> envelope)", "modifiers": "", "return": "void", "signature": "void receiveResponse(final ResponseEnvelope<?> envelope)", "full_signature": " void receiveResponse(final ResponseEnvelope<?> envelope)", "class_method_signature": "AbstractClientConnection.receiveResponse(final ResponseEnvelope<?> envelope)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String toString()", "full_signature": "@Override public final String toString()", "class_method_signature": "AbstractClientConnection.toString()", "testcase": false, "constructor": false}, {"identifier": "addToStringAttributes", "parameters": "(final ToStringHelper toStringHelper)", "modifiers": "", "return": "ToStringHelper", "signature": "ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "full_signature": " ToStringHelper addToStringAttributes(final ToStringHelper toStringHelper)", "class_method_signature": "AbstractClientConnection.addToStringAttributes(final ToStringHelper toStringHelper)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/cds-access-client/src/main/java/org/opendaylight/controller/cluster/access/client/AbstractClientConnection.java"}, "focal_method": {"identifier": "poison", "parameters": "(final RequestException cause)", "modifiers": "final", "return": "void", "body": "final void poison(final RequestException cause) {\n        final List<ConnectionEntry> entries;\n\n        lock.lock();\n        try {\n            entries = lockedPoison(cause);\n        } finally {\n            lock.unlock();\n        }\n\n        poison(entries, cause);\n    }", "signature": "void poison(final RequestException cause)", "full_signature": "final void poison(final RequestException cause)", "class_method_signature": "AbstractClientConnection.poison(final RequestException cause)", "testcase": false, "constructor": false, "invocations": ["lock", "lockedPoison", "unlock", "poison"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}