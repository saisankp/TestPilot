{"test_class": {"identifier": "AccessTokenTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File ecPrivateKey = new File(\"./src/test/resources/unit_test_ec_private.key\");", "modifier": "private final", "type": "File", "declarator": "ecPrivateKey = new File(\"./src/test/resources/unit_test_ec_private.key\")", "var_name": "ecPrivateKey"}, {"original_string": "private final File ecPublicKey = new File(\"./src/test/resources/ec_public.key\");", "modifier": "private final", "type": "File", "declarator": "ecPublicKey = new File(\"./src/test/resources/ec_public.key\")", "var_name": "ecPublicKey"}, {"original_string": "private final String JWT_KEYS = \"{\\\"keys\\\":[{\\\"kty\\\":\\\"RSA\\\",\\\"kid\\\":\\\"0\\\",\\\"alg\\\":\\\"RS256\\\",\"\n        + \"\\\"use\\\":\\\"sig\\\",\\\"n\\\":\\\"AMV3cnZXxYJL-A0TYY8Fy245HKSOBCYt9atNAUQVtbEwx9QaZGj8moYIe4nXgx\"\n        + \"72Ktwg0Gruh8sS7GQLBizCXg7fCk62sDV_MZINnwON9gsKbxxgn9mLFeYSaatUzk-VRphDoHNIBC-qeDtYnZhs\"\n        + \"HYcV9Jp0GPkLNquhN1TXA7gT\\\",\\\"e\\\":\\\"AQAB\\\"},{\\\"kty\\\":\\\"EC\\\",\\\"kid\\\":\\\"eckey1\\\",\\\"alg\\\":\"\n        + \"\\\"ES256\\\",\\\"use\\\":\\\"sig\\\",\\\"crv\\\":\\\"prime256v1\\\",\\\"x\\\":\\\"AI0x6wEUk5T0hslaT83DNVy5r98Xn\"\n        + \"G7HAjQynjCrcdCe\\\",\\\"y\\\":\\\"ATdV2ebpefqBli_SXZwvL3-7OiD3MTryGbR-zRSFZ_s=\\\"},\"\n        + \"{\\\"kty\\\":\\\"ATHENZ\\\",\\\"alg\\\":\\\"ES256\\\"}]}\";", "modifier": "private final", "type": "String", "declarator": "JWT_KEYS = \"{\\\"keys\\\":[{\\\"kty\\\":\\\"RSA\\\",\\\"kid\\\":\\\"0\\\",\\\"alg\\\":\\\"RS256\\\",\"\n        + \"\\\"use\\\":\\\"sig\\\",\\\"n\\\":\\\"AMV3cnZXxYJL-A0TYY8Fy245HKSOBCYt9atNAUQVtbEwx9QaZGj8moYIe4nXgx\"\n        + \"72Ktwg0Gruh8sS7GQLBizCXg7fCk62sDV_MZINnwON9gsKbxxgn9mLFeYSaatUzk-VRphDoHNIBC-qeDtYnZhs\"\n        + \"HYcV9Jp0GPkLNquhN1TXA7gT\\\",\\\"e\\\":\\\"AQAB\\\"},{\\\"kty\\\":\\\"EC\\\",\\\"kid\\\":\\\"eckey1\\\",\\\"alg\\\":\"\n        + \"\\\"ES256\\\",\\\"use\\\":\\\"sig\\\",\\\"crv\\\":\\\"prime256v1\\\",\\\"x\\\":\\\"AI0x6wEUk5T0hslaT83DNVy5r98Xn\"\n        + \"G7HAjQynjCrcdCe\\\",\\\"y\\\":\\\"ATdV2ebpefqBli_SXZwvL3-7OiD3MTryGbR-zRSFZ_s=\\\"},\"\n        + \"{\\\"kty\\\":\\\"ATHENZ\\\",\\\"alg\\\":\\\"ES256\\\"}]}\"", "var_name": "JWT_KEYS"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/token/AccessTokenTest.java"}, "test_case": {"identifier": "testConfirmX509CertPrincipalCertStartTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConfirmX509CertPrincipalCertStartTime() throws IOException {\n\n        // our cert issue time is 1565245568\n        // so we're going to set token issue time to cert time + 3600 + 100\n\n        AccessToken accessToken = createAccessToken(1565245568 + 3600 + 100);\n\n        Path path = Paths.get(\"src/test/resources/mtls_token2_spec.cert\");\n        String certStr = new String(Files.readAllBytes(path));\n        X509Certificate cert = Crypto.loadX509Certificate(certStr);\n        assertFalse(accessToken.confirmX509CertPrincipal(cert, \"mtls\"));\n    }", "signature": "void testConfirmX509CertPrincipalCertStartTime()", "full_signature": "@Test public void testConfirmX509CertPrincipalCertStartTime()", "class_method_signature": "AccessTokenTest.testConfirmX509CertPrincipalCertStartTime()", "testcase": true, "constructor": false, "invocations": ["createAccessToken", "get", "readAllBytes", "loadX509Certificate", "assertFalse", "confirmX509CertPrincipal"]}, "focal_class": {"identifier": "AccessToken", "superclass": "extends OAuth2Token", "interfaces": "", "fields": [{"original_string": "public static final String HDR_TOKEN_TYPE = \"typ\";", "modifier": "public static final", "type": "String", "declarator": "HDR_TOKEN_TYPE = \"typ\"", "var_name": "HDR_TOKEN_TYPE"}, {"original_string": "public static final String HDR_TOKEN_JWT = \"at+jwt\";", "modifier": "public static final", "type": "String", "declarator": "HDR_TOKEN_JWT = \"at+jwt\"", "var_name": "HDR_TOKEN_JWT"}, {"original_string": "public static final String CLAIM_SCOPE = \"scp\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_SCOPE = \"scp\"", "var_name": "CLAIM_SCOPE"}, {"original_string": "public static final String CLAIM_UID = \"uid\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_UID = \"uid\"", "var_name": "CLAIM_UID"}, {"original_string": "public static final String CLAIM_CLIENT_ID = \"client_id\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_CLIENT_ID = \"client_id\"", "var_name": "CLAIM_CLIENT_ID"}, {"original_string": "public static final String CLAIM_CONFIRM = \"cnf\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_CONFIRM = \"cnf\"", "var_name": "CLAIM_CONFIRM"}, {"original_string": "public static final String CLAIM_PROXY = \"proxy\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_PROXY = \"proxy\"", "var_name": "CLAIM_PROXY"}, {"original_string": "public static final String CLAIM_CONFIRM_X509_HASH = \"x5t#S256\";", "modifier": "public static final", "type": "String", "declarator": "CLAIM_CONFIRM_X509_HASH = \"x5t#S256\"", "var_name": "CLAIM_CONFIRM_X509_HASH"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AccessToken.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AccessToken.class)", "var_name": "LOG"}, {"original_string": "private static long ACCESS_TOKEN_CERT_OFFSET = 3600;", "modifier": "private static", "type": "long", "declarator": "ACCESS_TOKEN_CERT_OFFSET = 3600", "var_name": "ACCESS_TOKEN_CERT_OFFSET"}, {"original_string": "private static Set<String> ACCESS_TOKEN_PROXY_PRINCIPALS = null;", "modifier": "private static", "type": "Set<String>", "declarator": "ACCESS_TOKEN_PROXY_PRINCIPALS = null", "var_name": "ACCESS_TOKEN_PROXY_PRINCIPALS"}, {"original_string": "private String clientId;", "modifier": "private", "type": "String", "declarator": "clientId", "var_name": "clientId"}, {"original_string": "private String userId;", "modifier": "private", "type": "String", "declarator": "userId", "var_name": "userId"}, {"original_string": "private String proxyPrincipal;", "modifier": "private", "type": "String", "declarator": "proxyPrincipal", "var_name": "proxyPrincipal"}, {"original_string": "private List<String> scope;", "modifier": "private", "type": "List<String>", "declarator": "scope", "var_name": "scope"}, {"original_string": "private LinkedHashMap<String, Object> confirm;", "modifier": "private", "type": "LinkedHashMap<String, Object>", "declarator": "confirm", "var_name": "confirm"}], "methods": [{"identifier": "AccessToken", "parameters": "()", "modifiers": "public", "return": "", "signature": " AccessToken()", "full_signature": "public  AccessToken()", "class_method_signature": "AccessToken.AccessToken()", "testcase": false, "constructor": true}, {"identifier": "AccessToken", "parameters": "(final String token, JwtsSigningKeyResolver keyResolver)", "modifiers": "public", "return": "", "signature": " AccessToken(final String token, JwtsSigningKeyResolver keyResolver)", "full_signature": "public  AccessToken(final String token, JwtsSigningKeyResolver keyResolver)", "class_method_signature": "AccessToken.AccessToken(final String token, JwtsSigningKeyResolver keyResolver)", "testcase": false, "constructor": true}, {"identifier": "AccessToken", "parameters": "(final String token, PublicKey publicKey)", "modifiers": "public", "return": "", "signature": " AccessToken(final String token, PublicKey publicKey)", "full_signature": "public  AccessToken(final String token, PublicKey publicKey)", "class_method_signature": "AccessToken.AccessToken(final String token, PublicKey publicKey)", "testcase": false, "constructor": true}, {"identifier": "AccessToken", "parameters": "(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert)", "modifiers": "public", "return": "", "signature": " AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert)", "full_signature": "public  AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert)", "class_method_signature": "AccessToken.AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert)", "testcase": false, "constructor": true}, {"identifier": "AccessToken", "parameters": "(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert, final String x509CertHash)", "modifiers": "public", "return": "", "signature": " AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert, final String x509CertHash)", "full_signature": "public  AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert, final String x509CertHash)", "class_method_signature": "AccessToken.AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert, final String x509CertHash)", "testcase": false, "constructor": true}, {"identifier": "setAccessTokenCertOffset", "parameters": "(long offset)", "modifiers": "public static", "return": "void", "signature": "void setAccessTokenCertOffset(long offset)", "full_signature": "public static void setAccessTokenCertOffset(long offset)", "class_method_signature": "AccessToken.setAccessTokenCertOffset(long offset)", "testcase": false, "constructor": false}, {"identifier": "setAccessTokenProxyPrincipals", "parameters": "(Set<String> proxyPrincipals)", "modifiers": "public static", "return": "void", "signature": "void setAccessTokenProxyPrincipals(Set<String> proxyPrincipals)", "full_signature": "public static void setAccessTokenProxyPrincipals(Set<String> proxyPrincipals)", "class_method_signature": "AccessToken.setAccessTokenProxyPrincipals(Set<String> proxyPrincipals)", "testcase": false, "constructor": false}, {"identifier": "setAccessTokenFields", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setAccessTokenFields()", "full_signature": " void setAccessTokenFields()", "class_method_signature": "AccessToken.setAccessTokenFields()", "testcase": false, "constructor": false}, {"identifier": "getClientId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getClientId()", "full_signature": "public String getClientId()", "class_method_signature": "AccessToken.getClientId()", "testcase": false, "constructor": false}, {"identifier": "setClientId", "parameters": "(String clientId)", "modifiers": "public", "return": "void", "signature": "void setClientId(String clientId)", "full_signature": "public void setClientId(String clientId)", "class_method_signature": "AccessToken.setClientId(String clientId)", "testcase": false, "constructor": false}, {"identifier": "getProxyPrincipal", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProxyPrincipal()", "full_signature": "public String getProxyPrincipal()", "class_method_signature": "AccessToken.getProxyPrincipal()", "testcase": false, "constructor": false}, {"identifier": "setProxyPrincipal", "parameters": "(String proxyPrincipal)", "modifiers": "public", "return": "void", "signature": "void setProxyPrincipal(String proxyPrincipal)", "full_signature": "public void setProxyPrincipal(String proxyPrincipal)", "class_method_signature": "AccessToken.setProxyPrincipal(String proxyPrincipal)", "testcase": false, "constructor": false}, {"identifier": "getUserId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserId()", "full_signature": "public String getUserId()", "class_method_signature": "AccessToken.getUserId()", "testcase": false, "constructor": false}, {"identifier": "setUserId", "parameters": "(String userId)", "modifiers": "public", "return": "void", "signature": "void setUserId(String userId)", "full_signature": "public void setUserId(String userId)", "class_method_signature": "AccessToken.setUserId(String userId)", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getScope()", "full_signature": "public List<String> getScope()", "class_method_signature": "AccessToken.getScope()", "testcase": false, "constructor": false}, {"identifier": "setScope", "parameters": "(List<String> scope)", "modifiers": "public", "return": "void", "signature": "void setScope(List<String> scope)", "full_signature": "public void setScope(List<String> scope)", "class_method_signature": "AccessToken.setScope(List<String> scope)", "testcase": false, "constructor": false}, {"identifier": "getConfirm", "parameters": "()", "modifiers": "public", "return": "LinkedHashMap<String, Object>", "signature": "LinkedHashMap<String, Object> getConfirm()", "full_signature": "public LinkedHashMap<String, Object> getConfirm()", "class_method_signature": "AccessToken.getConfirm()", "testcase": false, "constructor": false}, {"identifier": "setConfirm", "parameters": "(LinkedHashMap<String, Object> confirm)", "modifiers": "public", "return": "void", "signature": "void setConfirm(LinkedHashMap<String, Object> confirm)", "full_signature": "public void setConfirm(LinkedHashMap<String, Object> confirm)", "class_method_signature": "AccessToken.setConfirm(LinkedHashMap<String, Object> confirm)", "testcase": false, "constructor": false}, {"identifier": "setConfirmEntry", "parameters": "(final String key, final Object value)", "modifiers": "public", "return": "void", "signature": "void setConfirmEntry(final String key, final Object value)", "full_signature": "public void setConfirmEntry(final String key, final Object value)", "class_method_signature": "AccessToken.setConfirmEntry(final String key, final Object value)", "testcase": false, "constructor": false}, {"identifier": "setConfirmX509CertHash", "parameters": "(X509Certificate cert)", "modifiers": "public", "return": "void", "signature": "void setConfirmX509CertHash(X509Certificate cert)", "full_signature": "public void setConfirmX509CertHash(X509Certificate cert)", "class_method_signature": "AccessToken.setConfirmX509CertHash(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "confirmMTLSBoundToken", "parameters": "(X509Certificate x509Cert, final String x509CertHash)", "modifiers": "public", "return": "boolean", "signature": "boolean confirmMTLSBoundToken(X509Certificate x509Cert, final String x509CertHash)", "full_signature": "public boolean confirmMTLSBoundToken(X509Certificate x509Cert, final String x509CertHash)", "class_method_signature": "AccessToken.confirmMTLSBoundToken(X509Certificate x509Cert, final String x509CertHash)", "testcase": false, "constructor": false}, {"identifier": "confirmX509CertHash", "parameters": "(X509Certificate cert, final String cnfHash)", "modifiers": "", "return": "boolean", "signature": "boolean confirmX509CertHash(X509Certificate cert, final String cnfHash)", "full_signature": " boolean confirmX509CertHash(X509Certificate cert, final String cnfHash)", "class_method_signature": "AccessToken.confirmX509CertHash(X509Certificate cert, final String cnfHash)", "testcase": false, "constructor": false}, {"identifier": "confirmX509ProxyPrincipal", "parameters": "(final String cn, final String certHash, final String cnfHash)", "modifiers": "", "return": "boolean", "signature": "boolean confirmX509ProxyPrincipal(final String cn, final String certHash, final String cnfHash)", "full_signature": " boolean confirmX509ProxyPrincipal(final String cn, final String certHash, final String cnfHash)", "class_method_signature": "AccessToken.confirmX509ProxyPrincipal(final String cn, final String certHash, final String cnfHash)", "testcase": false, "constructor": false}, {"identifier": "confirmX509CertPrincipal", "parameters": "(X509Certificate cert, final String cn)", "modifiers": "", "return": "boolean", "signature": "boolean confirmX509CertPrincipal(X509Certificate cert, final String cn)", "full_signature": " boolean confirmX509CertPrincipal(X509Certificate cert, final String cn)", "class_method_signature": "AccessToken.confirmX509CertPrincipal(X509Certificate cert, final String cn)", "testcase": false, "constructor": false}, {"identifier": "getX509CertificateHash", "parameters": "(X509Certificate cert)", "modifiers": "", "return": "String", "signature": "String getX509CertificateHash(X509Certificate cert)", "full_signature": " String getX509CertificateHash(X509Certificate cert)", "class_method_signature": "AccessToken.getX509CertificateHash(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "getConfirmEntry", "parameters": "(final String key)", "modifiers": "public", "return": "Object", "signature": "Object getConfirmEntry(final String key)", "full_signature": "public Object getConfirmEntry(final String key)", "class_method_signature": "AccessToken.getConfirmEntry(final String key)", "testcase": false, "constructor": false}, {"identifier": "getSignedToken", "parameters": "(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "modifiers": "public", "return": "String", "signature": "String getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "full_signature": "public String getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "class_method_signature": "AccessToken.getSignedToken(final PrivateKey key, final String keyId,\n            final SignatureAlgorithm keyAlg)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java"}, "focal_method": {"identifier": "confirmX509CertPrincipal", "parameters": "(X509Certificate cert, final String cn)", "modifiers": "", "return": "boolean", "body": "boolean confirmX509CertPrincipal(X509Certificate cert, final String cn) {\n\n        // if our offset is 0 then the additional confirmation\n        // check is disabled\n\n        if (ACCESS_TOKEN_CERT_OFFSET == 0) {\n            LOG.error(\"confirmX509CertPrincipal: check disabled\");\n            return false;\n        }\n\n        // our principal cn must be the client in the token\n\n        if (!cn.equals(clientId)) {\n            LOG.error(\"confirmX509CertPrincipal: Principal mismatch {} vs {}\", cn, clientId);\n            return false;\n        }\n\n        // if the access token cert offset is set to -1 then\n        // we only need to verify that the certificate principal\n        // matches to the token client id which we have already\n        // verified thus we'll return success\n\n        if (ACCESS_TOKEN_CERT_OFFSET == -1) {\n            return true;\n        }\n\n        // now let's verify our offsets. the certificate must\n        // be issued before our token issue time. since athenz\n        // always issues certs with backdating one hour, we\n        // need to take into account that extra hour\n\n        long certIssueTime = Crypto.extractX509CertIssueTime(cert);\n        if (certIssueTime < issueTime - 3600) {\n            LOG.error(\"confirmX509CertPrincipal: Certificate: {} issued before token: {}\",\n                    certIssueTime, issueTime);\n            return false;\n        }\n\n        // also the certificate must be issued after the configured\n        // number of seconds after our token issue time. again,\n        // since athenz issues certs with backdating one hour, we\n        // need to take into account that extra hour\n\n        if (certIssueTime > issueTime + ACCESS_TOKEN_CERT_OFFSET - 3600) {\n            LOG.error(\"confirmX509CertPrincipal: Certificate: {} past configured offset {} for token: {}\",\n                    certIssueTime, ACCESS_TOKEN_CERT_OFFSET, issueTime);\n            return false;\n        }\n\n        return true;\n    }", "signature": "boolean confirmX509CertPrincipal(X509Certificate cert, final String cn)", "full_signature": " boolean confirmX509CertPrincipal(X509Certificate cert, final String cn)", "class_method_signature": "AccessToken.confirmX509CertPrincipal(X509Certificate cert, final String cn)", "testcase": false, "constructor": false, "invocations": ["error", "equals", "error", "extractX509CertIssueTime", "error", "error"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}