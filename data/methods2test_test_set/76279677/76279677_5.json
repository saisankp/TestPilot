{"test_class": {"identifier": "VarDependenciesTest", "superclass": "extends BaseVarTests", "interfaces": "", "fields": [], "file": "cypher2sql/src/test/java/org/cytosm/cypher2sql/lowering/typeck/VarDependenciesTest.java"}, "test_case": {"identifier": "testGetUsedAndIndirectUsedVars2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetUsedAndIndirectUsedVars2() {\n        String cypher = \"\" +\n                \"MATCH (a)--(e)\\n\" +\n                \"MATCH (b)--(c)\\n\" +\n                \"MATCH (a)--(d)\\n\" +\n                \"RETURN 42\";\n        Statement st = PassAvailables.parseCypher(cypher);\n        SingleQuery sq = (SingleQuery) st.query.part;\n        VarDependencies dependencies = new VarDependencies(st);\n\n        Iterator<Clause> clauses = sq.clauses.iterator();\n        List<Var> match0 = dependencies.getUsedAndIndirectUsedVars(\n                this.genClauseForASTNode(this.getPatternPart(clauses.next()).next()));\n        List<Var> match1 = dependencies.getUsedAndIndirectUsedVars(\n                this.genClauseForASTNode(this.getPatternPart(clauses.next()).next()));\n        List<Var> match2 = dependencies.getUsedAndIndirectUsedVars(\n                this.genClauseForASTNode(this.getPatternPart(clauses.next()).next()));\n\n        Assert.assertEquals(match0.size(), 2);\n        Assert.assertEquals(match1.size(), 2);\n        Assert.assertEquals(match2.size(), 3);\n    }", "signature": "void testGetUsedAndIndirectUsedVars2()", "full_signature": "@Test public void testGetUsedAndIndirectUsedVars2()", "class_method_signature": "VarDependenciesTest.testGetUsedAndIndirectUsedVars2()", "testcase": true, "constructor": false, "invocations": ["parseCypher", "iterator", "getUsedAndIndirectUsedVars", "genClauseForASTNode", "next", "getPatternPart", "next", "getUsedAndIndirectUsedVars", "genClauseForASTNode", "next", "getPatternPart", "next", "getUsedAndIndirectUsedVars", "genClauseForASTNode", "next", "getPatternPart", "next", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "VarDependencies", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<ClauseId, List<Var>> usedVariablesInClause = new HashMap<>();", "modifier": "private", "type": "Map<ClauseId, List<Var>>", "declarator": "usedVariablesInClause = new HashMap<>()", "var_name": "usedVariablesInClause"}, {"original_string": "private Map<ClauseId, AvailableVariables> reachableVariables = new HashMap<>();", "modifier": "private", "type": "Map<ClauseId, AvailableVariables>", "declarator": "reachableVariables = new HashMap<>()", "var_name": "reachableVariables"}, {"original_string": "private Map<ClauseId, List<Relationship>> relationships = new HashMap<>();", "modifier": "private", "type": "Map<ClauseId, List<Relationship>>", "declarator": "relationships = new HashMap<>()", "var_name": "relationships"}, {"original_string": "private List<Expr> returnExprs = new ArrayList<>();", "modifier": "private", "type": "List<Expr>", "declarator": "returnExprs = new ArrayList<>()", "var_name": "returnExprs"}], "methods": [{"identifier": "VarDependencies", "parameters": "(final Statement statement)", "modifiers": "public", "return": "", "signature": " VarDependencies(final Statement statement)", "full_signature": "public  VarDependencies(final Statement statement)", "class_method_signature": "VarDependencies.VarDependencies(final Statement statement)", "testcase": false, "constructor": true}, {"identifier": "getUsedVars", "parameters": "(ClauseId clauseId)", "modifiers": "public", "return": "List<Var>", "signature": "List<Var> getUsedVars(ClauseId clauseId)", "full_signature": "public List<Var> getUsedVars(ClauseId clauseId)", "class_method_signature": "VarDependencies.getUsedVars(ClauseId clauseId)", "testcase": false, "constructor": false}, {"identifier": "getAllVariables", "parameters": "()", "modifiers": "public", "return": "Set<Var>", "signature": "Set<Var> getAllVariables()", "full_signature": "public Set<Var> getAllVariables()", "class_method_signature": "VarDependencies.getAllVariables()", "testcase": false, "constructor": false}, {"identifier": "getUsedAndIndirectUsedVars", "parameters": "(ClauseId clauseId)", "modifiers": "public", "return": "List<Var>", "signature": "List<Var> getUsedAndIndirectUsedVars(ClauseId clauseId)", "full_signature": "public List<Var> getUsedAndIndirectUsedVars(ClauseId clauseId)", "class_method_signature": "VarDependencies.getUsedAndIndirectUsedVars(ClauseId clauseId)", "testcase": false, "constructor": false}, {"identifier": "getReachableVars", "parameters": "(ClauseId clauseId)", "modifiers": "public", "return": "AvailableVariables", "signature": "AvailableVariables getReachableVars(ClauseId clauseId)", "full_signature": "public AvailableVariables getReachableVars(ClauseId clauseId)", "class_method_signature": "VarDependencies.getReachableVars(ClauseId clauseId)", "testcase": false, "constructor": false}, {"identifier": "getRelationships", "parameters": "(ClauseId clauseId)", "modifiers": "public", "return": "List<Relationship>", "signature": "List<Relationship> getRelationships(ClauseId clauseId)", "full_signature": "public List<Relationship> getRelationships(ClauseId clauseId)", "class_method_signature": "VarDependencies.getRelationships(ClauseId clauseId)", "testcase": false, "constructor": false}, {"identifier": "getReturnExprs", "parameters": "()", "modifiers": "public", "return": "List<Expr>", "signature": "List<Expr> getReturnExprs()", "full_signature": "public List<Expr> getReturnExprs()", "class_method_signature": "VarDependencies.getReturnExprs()", "testcase": false, "constructor": false}], "file": "cypher2sql/src/main/java/org/cytosm/cypher2sql/lowering/typeck/VarDependencies.java"}, "focal_method": {"identifier": "getUsedAndIndirectUsedVars", "parameters": "(ClauseId clauseId)", "modifiers": "public", "return": "List<Var>", "body": "public List<Var> getUsedAndIndirectUsedVars(ClauseId clauseId) {\n        // Start with the used variable.\n        Set<Var> result = new HashSet<>(this.getUsedVars(clauseId));\n        Stack<Var> stack = new Stack<>();\n\n        List<Relationship> relsToInspect = relationships.entrySet().stream()\n                .filter(a -> a.getKey().compareTo(clauseId) < 0)\n                .flatMap(x -> x.getValue().stream())\n                .collect(Collectors.toList());\n\n        // Start with the used variables:\n        stack.addAll(result);\n\n        while (!stack.isEmpty()) {\n            Var var = stack.pop();\n            if (var instanceof NodeVar) {\n                relsToInspect.stream().filter(r -> r.leftNode == var).forEach(rel -> {\n                    if (!result.contains(rel.rightNode)) {\n                        stack.add(rel.rightNode);\n                        result.add(rel.rightNode);\n                    }\n                });\n                relsToInspect.stream().filter(r -> r.rightNode == var).forEach(rel -> {\n                    if (!result.contains(rel.leftNode)) {\n                        stack.add(rel.leftNode);\n                        result.add(rel.leftNode);\n                    }\n                });\n            }\n        }\n\n        return Collections.unmodifiableList(result.stream().collect(Collectors.toList()));\n    }", "signature": "List<Var> getUsedAndIndirectUsedVars(ClauseId clauseId)", "full_signature": "public List<Var> getUsedAndIndirectUsedVars(ClauseId clauseId)", "class_method_signature": "VarDependencies.getUsedAndIndirectUsedVars(ClauseId clauseId)", "testcase": false, "constructor": false, "invocations": ["getUsedVars", "collect", "flatMap", "filter", "stream", "entrySet", "compareTo", "getKey", "stream", "getValue", "toList", "addAll", "isEmpty", "pop", "forEach", "filter", "stream", "contains", "add", "add", "forEach", "filter", "stream", "contains", "add", "add", "unmodifiableList", "collect", "stream", "toList"]}, "repository": {"repo_id": 76279677, "url": "https://github.com/cytosm/cytosm", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 41, "size": 1250, "license": "licensed"}}