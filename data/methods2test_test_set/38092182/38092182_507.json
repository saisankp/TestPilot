{"test_class": {"identifier": "MraidControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AdConfiguration mockAdConfiguration;", "modifier": "private", "type": "AdConfiguration", "declarator": "mockAdConfiguration", "var_name": "mockAdConfiguration"}, {"original_string": "@Mock private MraidBridge mockBridge;", "modifier": "@Mock private", "type": "MraidBridge", "declarator": "mockBridge", "var_name": "mockBridge"}, {"original_string": "@Mock private MraidBridge mockTwoPartBridge;", "modifier": "@Mock private", "type": "MraidBridge", "declarator": "mockTwoPartBridge", "var_name": "mockTwoPartBridge"}, {"original_string": "@Mock private ScreenMetricsWaiter mockScreenMetricsWaiter;", "modifier": "@Mock private", "type": "ScreenMetricsWaiter", "declarator": "mockScreenMetricsWaiter", "var_name": "mockScreenMetricsWaiter"}, {"original_string": "@Mock private WaitRequest mockWaitRequest;", "modifier": "@Mock private", "type": "WaitRequest", "declarator": "mockWaitRequest", "var_name": "mockWaitRequest"}, {"original_string": "@Mock private MraidListener mockMraidListener;", "modifier": "@Mock private", "type": "MraidListener", "declarator": "mockMraidListener", "var_name": "mockMraidListener"}, {"original_string": "@Mock private UseCustomCloseListener mockUseCustomCloseListener;", "modifier": "@Mock private", "type": "UseCustomCloseListener", "declarator": "mockUseCustomCloseListener", "var_name": "mockUseCustomCloseListener"}, {"original_string": "@Mock private OrientationBroadcastReceiver mockOrientationBroadcastReceiver;", "modifier": "@Mock private", "type": "OrientationBroadcastReceiver", "declarator": "mockOrientationBroadcastReceiver", "var_name": "mockOrientationBroadcastReceiver"}, {"original_string": "@Captor private ArgumentCaptor<MraidBridgeListener> bridgeListenerCaptor;", "modifier": "@Captor private", "type": "ArgumentCaptor<MraidBridgeListener>", "declarator": "bridgeListenerCaptor", "var_name": "bridgeListenerCaptor"}, {"original_string": "private Activity activity;", "modifier": "private", "type": "Activity", "declarator": "activity", "var_name": "activity"}, {"original_string": "private FrameLayout rootView;", "modifier": "private", "type": "FrameLayout", "declarator": "rootView", "var_name": "rootView"}, {"original_string": "private MraidController subject;", "modifier": "private", "type": "MraidController", "declarator": "subject", "var_name": "subject"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java"}, "test_case": {"identifier": "constructor_shouldSetStateToLoading", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void constructor_shouldSetStateToLoading() {\n        ViewState state = subject.getViewState();\n\n        assertThat(state).isEqualTo(ViewState.LOADING);\n    }", "signature": "void constructor_shouldSetStateToLoading()", "full_signature": "@Test public void constructor_shouldSetStateToLoading()", "class_method_signature": "MraidControllerTest.constructor_shouldSetStateToLoading()", "testcase": true, "constructor": false, "invocations": ["getViewState", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "MraidController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Nullable private Activity mActivity;", "modifier": "@Nullable private", "type": "Activity", "declarator": "mActivity", "var_name": "mActivity"}, {"original_string": "@NonNull private final Context mContext;", "modifier": "@NonNull private final", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "@NonNull private final AdConfiguration mAdConfiguration;", "modifier": "@NonNull private final", "type": "AdConfiguration", "declarator": "mAdConfiguration", "var_name": "mAdConfiguration"}, {"original_string": "@NonNull private final PlacementType mPlacementType;", "modifier": "@NonNull private final", "type": "PlacementType", "declarator": "mPlacementType", "var_name": "mPlacementType"}, {"original_string": "@NonNull private final FrameLayout mDefaultAdContainer;", "modifier": "@NonNull private final", "type": "FrameLayout", "declarator": "mDefaultAdContainer", "var_name": "mDefaultAdContainer"}, {"original_string": "@NonNull private final CloseableLayout mCloseableAdContainer;", "modifier": "@NonNull private final", "type": "CloseableLayout", "declarator": "mCloseableAdContainer", "var_name": "mCloseableAdContainer"}, {"original_string": "@Nullable private ViewGroup mRootView;", "modifier": "@Nullable private", "type": "ViewGroup", "declarator": "mRootView", "var_name": "mRootView"}, {"original_string": "@NonNull private final ScreenMetricsWaiter mScreenMetricsWaiter;", "modifier": "@NonNull private final", "type": "ScreenMetricsWaiter", "declarator": "mScreenMetricsWaiter", "var_name": "mScreenMetricsWaiter"}, {"original_string": "@NonNull private final MraidScreenMetrics mScreenMetrics;", "modifier": "@NonNull private final", "type": "MraidScreenMetrics", "declarator": "mScreenMetrics", "var_name": "mScreenMetrics"}, {"original_string": "@NonNull private ViewState mViewState = ViewState.LOADING;", "modifier": "@NonNull private", "type": "ViewState", "declarator": "mViewState = ViewState.LOADING", "var_name": "mViewState"}, {"original_string": "@Nullable private MraidListener mMraidListener;", "modifier": "@Nullable private", "type": "MraidListener", "declarator": "mMraidListener", "var_name": "mMraidListener"}, {"original_string": "@Nullable private UseCustomCloseListener mOnCloseButtonListener;", "modifier": "@Nullable private", "type": "UseCustomCloseListener", "declarator": "mOnCloseButtonListener", "var_name": "mOnCloseButtonListener"}, {"original_string": "@Nullable private MraidWebViewDebugListener mDebugListener;", "modifier": "@Nullable private", "type": "MraidWebViewDebugListener", "declarator": "mDebugListener", "var_name": "mDebugListener"}, {"original_string": "@Nullable private MraidWebView mMraidWebView;", "modifier": "@Nullable private", "type": "MraidWebView", "declarator": "mMraidWebView", "var_name": "mMraidWebView"}, {"original_string": "@Nullable private MraidWebView mTwoPartWebView;", "modifier": "@Nullable private", "type": "MraidWebView", "declarator": "mTwoPartWebView", "var_name": "mTwoPartWebView"}, {"original_string": "@NonNull private final MraidBridge mMraidBridge;", "modifier": "@NonNull private final", "type": "MraidBridge", "declarator": "mMraidBridge", "var_name": "mMraidBridge"}, {"original_string": "@NonNull private final MraidBridge mTwoPartBridge;", "modifier": "@NonNull private final", "type": "MraidBridge", "declarator": "mTwoPartBridge", "var_name": "mTwoPartBridge"}, {"original_string": "@NonNull private OrientationBroadcastReceiver mOrientationBroadcastReceiver =\n            new OrientationBroadcastReceiver();", "modifier": "@NonNull private", "type": "OrientationBroadcastReceiver", "declarator": "mOrientationBroadcastReceiver =\n            new OrientationBroadcastReceiver()", "var_name": "mOrientationBroadcastReceiver"}, {"original_string": "@Nullable private Integer mOriginalActivityOrientation;", "modifier": "@Nullable private", "type": "Integer", "declarator": "mOriginalActivityOrientation", "var_name": "mOriginalActivityOrientation"}, {"original_string": "private boolean mAllowOrientationChange = true;", "modifier": "private", "type": "boolean", "declarator": "mAllowOrientationChange = true", "var_name": "mAllowOrientationChange"}, {"original_string": "private MraidOrientation mForceOrientation = MraidOrientation.NONE;", "modifier": "private", "type": "MraidOrientation", "declarator": "mForceOrientation = MraidOrientation.NONE", "var_name": "mForceOrientation"}, {"original_string": "private final MraidNativeCommandHandler mMraidNativeCommandHandler;", "modifier": "private final", "type": "MraidNativeCommandHandler", "declarator": "mMraidNativeCommandHandler", "var_name": "mMraidNativeCommandHandler"}, {"original_string": "private boolean mIsPaused;", "modifier": "private", "type": "boolean", "declarator": "mIsPaused", "var_name": "mIsPaused"}, {"original_string": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final MraidBridgeListener mMraidBridgeListener = new MraidBridgeListener() {\n        @Override\n        public void onPageLoaded() {\n            handlePageLoad();\n        }\n\n        @Override\n        public void onVisibilityChanged(final boolean isVisible) {\n            // The bridge only receives visibility events if there is no 2 part covering it\n            if (!mTwoPartBridge.isAttached()) {\n                mMraidBridge.notifyViewability(isVisible);\n            }\n        }\n\n        @Override\n        public boolean onJsAlert(@NonNull final String message, @NonNull final JsResult result) {\n            return handleJsAlert(message, result);\n        }\n\n        @Override\n        public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {\n            return handleConsoleMessage(consoleMessage);\n        }\n\n        @Override\n        public void onClose() {\n            handleClose();\n        }\n\n        @Override\n        public void onResize(final int width, final int height, final int offsetX,\n                final int offsetY, @NonNull final ClosePosition closePosition,\n                final boolean allowOffscreen) throws MraidCommandException {\n            handleResize(width, height, offsetX, offsetY, closePosition, allowOffscreen);\n        }\n\n        public void onExpand(@Nullable final URI uri, final boolean shouldUseCustomClose)\n                throws MraidCommandException {\n            handleExpand(uri, shouldUseCustomClose);\n        }\n\n        @Override\n        public void onUseCustomClose(final boolean shouldUseCustomClose) {\n            handleCustomClose(shouldUseCustomClose);\n        }\n\n        @Override\n        public void onSetOrientationProperties(final boolean allowOrientationChange,\n                final MraidOrientation forceOrientation) throws MraidCommandException {\n            handleSetOrientationProperties(allowOrientationChange, forceOrientation);\n        }\n\n        @Override\n        public void onOpen(@NonNull final URI uri) {\n            handleOpen(uri.toString());\n        }\n\n        @Override\n        public void onPlayVideo(@NonNull final URI uri) {\n            handleShowVideo(uri.toString());\n        }\n    };", "modifier": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final", "type": "MraidBridgeListener", "declarator": "mMraidBridgeListener = new MraidBridgeListener() {\n        @Override\n        public void onPageLoaded() {\n            handlePageLoad();\n        }\n\n        @Override\n        public void onVisibilityChanged(final boolean isVisible) {\n            // The bridge only receives visibility events if there is no 2 part covering it\n            if (!mTwoPartBridge.isAttached()) {\n                mMraidBridge.notifyViewability(isVisible);\n            }\n        }\n\n        @Override\n        public boolean onJsAlert(@NonNull final String message, @NonNull final JsResult result) {\n            return handleJsAlert(message, result);\n        }\n\n        @Override\n        public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {\n            return handleConsoleMessage(consoleMessage);\n        }\n\n        @Override\n        public void onClose() {\n            handleClose();\n        }\n\n        @Override\n        public void onResize(final int width, final int height, final int offsetX,\n                final int offsetY, @NonNull final ClosePosition closePosition,\n                final boolean allowOffscreen) throws MraidCommandException {\n            handleResize(width, height, offsetX, offsetY, closePosition, allowOffscreen);\n        }\n\n        public void onExpand(@Nullable final URI uri, final boolean shouldUseCustomClose)\n                throws MraidCommandException {\n            handleExpand(uri, shouldUseCustomClose);\n        }\n\n        @Override\n        public void onUseCustomClose(final boolean shouldUseCustomClose) {\n            handleCustomClose(shouldUseCustomClose);\n        }\n\n        @Override\n        public void onSetOrientationProperties(final boolean allowOrientationChange,\n                final MraidOrientation forceOrientation) throws MraidCommandException {\n            handleSetOrientationProperties(allowOrientationChange, forceOrientation);\n        }\n\n        @Override\n        public void onOpen(@NonNull final URI uri) {\n            handleOpen(uri.toString());\n        }\n\n        @Override\n        public void onPlayVideo(@NonNull final URI uri) {\n            handleShowVideo(uri.toString());\n        }\n    }", "var_name": "mMraidBridgeListener"}, {"original_string": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final MraidBridgeListener mTwoPartBridgeListener = new MraidBridgeListener() {\n        @Override\n        public void onPageLoaded() {\n            handleTwoPartPageLoad();\n        }\n\n        @Override\n        public void onVisibilityChanged(final boolean isVisible) {\n            // The original web view must see the 2-part bridges visibility\n            mMraidBridge.notifyViewability(isVisible);\n            mTwoPartBridge.notifyViewability(isVisible);\n        }\n\n        @Override\n        public boolean onJsAlert(@NonNull final String message, @NonNull final JsResult result) {\n            return handleJsAlert(message, result);\n        }\n\n        @Override\n        public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {\n            return handleConsoleMessage(consoleMessage);\n        }\n\n        @Override\n        public void onResize(final int width, final int height, final int offsetX,\n                final int offsetY, @NonNull final ClosePosition closePosition,\n                final boolean allowOffscreen) throws MraidCommandException {\n            throw new MraidCommandException(\"Not allowed to resize from an expanded state\");\n        }\n        \n        @Override\n        public void onExpand(@Nullable final URI uri, final boolean shouldUseCustomClose) {\n            // The MRAID spec dictates that this is ignored rather than firing an error\n        }\n\n        @Override\n        public void onClose() {\n            handleClose();\n        }\n\n        @Override\n        public void onUseCustomClose(final boolean shouldUseCustomClose) {\n            handleCustomClose(shouldUseCustomClose);\n        }\n\n        @Override\n        public void onSetOrientationProperties(final boolean allowOrientationChange,\n                final MraidOrientation forceOrientation) throws MraidCommandException {\n            handleSetOrientationProperties(allowOrientationChange, forceOrientation);\n        }\n\n        @Override\n        public void onOpen(final URI uri) {\n            handleOpen(uri.toString());\n        }\n\n        @Override\n        public void onPlayVideo(@NonNull final URI uri) {\n            handleShowVideo(uri.toString());\n        }\n    };", "modifier": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final", "type": "MraidBridgeListener", "declarator": "mTwoPartBridgeListener = new MraidBridgeListener() {\n        @Override\n        public void onPageLoaded() {\n            handleTwoPartPageLoad();\n        }\n\n        @Override\n        public void onVisibilityChanged(final boolean isVisible) {\n            // The original web view must see the 2-part bridges visibility\n            mMraidBridge.notifyViewability(isVisible);\n            mTwoPartBridge.notifyViewability(isVisible);\n        }\n\n        @Override\n        public boolean onJsAlert(@NonNull final String message, @NonNull final JsResult result) {\n            return handleJsAlert(message, result);\n        }\n\n        @Override\n        public boolean onConsoleMessage(@NonNull final ConsoleMessage consoleMessage) {\n            return handleConsoleMessage(consoleMessage);\n        }\n\n        @Override\n        public void onResize(final int width, final int height, final int offsetX,\n                final int offsetY, @NonNull final ClosePosition closePosition,\n                final boolean allowOffscreen) throws MraidCommandException {\n            throw new MraidCommandException(\"Not allowed to resize from an expanded state\");\n        }\n        \n        @Override\n        public void onExpand(@Nullable final URI uri, final boolean shouldUseCustomClose) {\n            // The MRAID spec dictates that this is ignored rather than firing an error\n        }\n\n        @Override\n        public void onClose() {\n            handleClose();\n        }\n\n        @Override\n        public void onUseCustomClose(final boolean shouldUseCustomClose) {\n            handleCustomClose(shouldUseCustomClose);\n        }\n\n        @Override\n        public void onSetOrientationProperties(final boolean allowOrientationChange,\n                final MraidOrientation forceOrientation) throws MraidCommandException {\n            handleSetOrientationProperties(allowOrientationChange, forceOrientation);\n        }\n\n        @Override\n        public void onOpen(final URI uri) {\n            handleOpen(uri.toString());\n        }\n\n        @Override\n        public void onPlayVideo(@NonNull final URI uri) {\n            handleShowVideo(uri.toString());\n        }\n    }", "var_name": "mTwoPartBridgeListener"}], "methods": [{"identifier": "MraidController", "parameters": "(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "modifiers": "public", "return": "", "signature": " MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "full_signature": "public  MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "class_method_signature": "MraidController.MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType)", "testcase": false, "constructor": true}, {"identifier": "MraidController", "parameters": "(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidBridge bridge, @NonNull MraidBridge twoPartBridge,\n            @NonNull ScreenMetricsWaiter screenMetricsWaiter)", "modifiers": "@VisibleForTesting", "return": "", "signature": " MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidBridge bridge, @NonNull MraidBridge twoPartBridge,\n            @NonNull ScreenMetricsWaiter screenMetricsWaiter)", "full_signature": "@VisibleForTesting  MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidBridge bridge, @NonNull MraidBridge twoPartBridge,\n            @NonNull ScreenMetricsWaiter screenMetricsWaiter)", "class_method_signature": "MraidController.MraidController(@NonNull Context context, @NonNull AdConfiguration adConfiguration,\n            @NonNull PlacementType placementType,\n            @NonNull MraidBridge bridge, @NonNull MraidBridge twoPartBridge,\n            @NonNull ScreenMetricsWaiter screenMetricsWaiter)", "testcase": false, "constructor": true}, {"identifier": "setMraidListener", "parameters": "(@Nullable MraidListener mraidListener)", "modifiers": "public", "return": "void", "signature": "void setMraidListener(@Nullable MraidListener mraidListener)", "full_signature": "public void setMraidListener(@Nullable MraidListener mraidListener)", "class_method_signature": "MraidController.setMraidListener(@Nullable MraidListener mraidListener)", "testcase": false, "constructor": false}, {"identifier": "setUseCustomCloseListener", "parameters": "(@Nullable UseCustomCloseListener listener)", "modifiers": "public", "return": "void", "signature": "void setUseCustomCloseListener(@Nullable UseCustomCloseListener listener)", "full_signature": "public void setUseCustomCloseListener(@Nullable UseCustomCloseListener listener)", "class_method_signature": "MraidController.setUseCustomCloseListener(@Nullable UseCustomCloseListener listener)", "testcase": false, "constructor": false}, {"identifier": "setDebugListener", "parameters": "(@Nullable MraidWebViewDebugListener debugListener)", "modifiers": "public", "return": "void", "signature": "void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)", "full_signature": "public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)", "class_method_signature": "MraidController.setDebugListener(@Nullable MraidWebViewDebugListener debugListener)", "testcase": false, "constructor": false}, {"identifier": "loadContent", "parameters": "(@NonNull String htmlData)", "modifiers": "public", "return": "void", "signature": "void loadContent(@NonNull String htmlData)", "full_signature": "public void loadContent(@NonNull String htmlData)", "class_method_signature": "MraidController.loadContent(@NonNull String htmlData)", "testcase": false, "constructor": false}, {"identifier": "getDisplayRotation", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getDisplayRotation()", "full_signature": "private int getDisplayRotation()", "class_method_signature": "MraidController.getDisplayRotation()", "testcase": false, "constructor": false}, {"identifier": "handleConsoleMessage", "parameters": "(@NonNull final ConsoleMessage consoleMessage)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean handleConsoleMessage(@NonNull final ConsoleMessage consoleMessage)", "full_signature": "@VisibleForTesting boolean handleConsoleMessage(@NonNull final ConsoleMessage consoleMessage)", "class_method_signature": "MraidController.handleConsoleMessage(@NonNull final ConsoleMessage consoleMessage)", "testcase": false, "constructor": false}, {"identifier": "handleJsAlert", "parameters": "(@NonNull final String message, @NonNull final JsResult result)", "modifiers": "@VisibleForTesting", "return": "boolean", "signature": "boolean handleJsAlert(@NonNull final String message, @NonNull final JsResult result)", "full_signature": "@VisibleForTesting boolean handleJsAlert(@NonNull final String message, @NonNull final JsResult result)", "class_method_signature": "MraidController.handleJsAlert(@NonNull final String message, @NonNull final JsResult result)", "testcase": false, "constructor": false}, {"identifier": "getCurrentWebView", "parameters": "()", "modifiers": "@Nullable private", "return": "View", "signature": "View getCurrentWebView()", "full_signature": "@Nullable private View getCurrentWebView()", "class_method_signature": "MraidController.getCurrentWebView()", "testcase": false, "constructor": false}, {"identifier": "isInlineVideoAvailable", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isInlineVideoAvailable()", "full_signature": "private boolean isInlineVideoAvailable()", "class_method_signature": "MraidController.isInlineVideoAvailable()", "testcase": false, "constructor": false}, {"identifier": "handlePageLoad", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handlePageLoad()", "full_signature": "@VisibleForTesting void handlePageLoad()", "class_method_signature": "MraidController.handlePageLoad()", "testcase": false, "constructor": false}, {"identifier": "handleTwoPartPageLoad", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handleTwoPartPageLoad()", "full_signature": "@VisibleForTesting void handleTwoPartPageLoad()", "class_method_signature": "MraidController.handleTwoPartPageLoad()", "testcase": false, "constructor": false}, {"identifier": "updateScreenMetricsAsync", "parameters": "(@Nullable final Runnable successRunnable)", "modifiers": "private", "return": "void", "signature": "void updateScreenMetricsAsync(@Nullable final Runnable successRunnable)", "full_signature": "private void updateScreenMetricsAsync(@Nullable final Runnable successRunnable)", "class_method_signature": "MraidController.updateScreenMetricsAsync(@Nullable final Runnable successRunnable)", "testcase": false, "constructor": false}, {"identifier": "handleOrientationChange", "parameters": "(int currentRotation)", "modifiers": "", "return": "void", "signature": "void handleOrientationChange(int currentRotation)", "full_signature": " void handleOrientationChange(int currentRotation)", "class_method_signature": "MraidController.handleOrientationChange(int currentRotation)", "testcase": false, "constructor": false}, {"identifier": "pause", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pause()", "full_signature": "public void pause()", "class_method_signature": "MraidController.pause()", "testcase": false, "constructor": false}, {"identifier": "resume", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resume()", "full_signature": "public void resume()", "class_method_signature": "MraidController.resume()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "MraidController.destroy()", "testcase": false, "constructor": false}, {"identifier": "setViewState", "parameters": "(@NonNull ViewState viewState)", "modifiers": "private", "return": "void", "signature": "void setViewState(@NonNull ViewState viewState)", "full_signature": "private void setViewState(@NonNull ViewState viewState)", "class_method_signature": "MraidController.setViewState(@NonNull ViewState viewState)", "testcase": false, "constructor": false}, {"identifier": "setViewState", "parameters": "(@NonNull ViewState viewState, @Nullable Runnable successRunnable)", "modifiers": "private", "return": "void", "signature": "void setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable)", "full_signature": "private void setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable)", "class_method_signature": "MraidController.setViewState(@NonNull ViewState viewState, @Nullable Runnable successRunnable)", "testcase": false, "constructor": false}, {"identifier": "clampInt", "parameters": "(int min, int target, int max)", "modifiers": "", "return": "int", "signature": "int clampInt(int min, int target, int max)", "full_signature": " int clampInt(int min, int target, int max)", "class_method_signature": "MraidController.clampInt(int min, int target, int max)", "testcase": false, "constructor": false}, {"identifier": "handleResize", "parameters": "(final int widthDips, final int heightDips, final int offsetXDips,\n            final int offsetYDips, @NonNull final ClosePosition closePosition,\n            final boolean allowOffscreen)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handleResize(final int widthDips, final int heightDips, final int offsetXDips,\n            final int offsetYDips, @NonNull final ClosePosition closePosition,\n            final boolean allowOffscreen)", "full_signature": "@VisibleForTesting void handleResize(final int widthDips, final int heightDips, final int offsetXDips,\n            final int offsetYDips, @NonNull final ClosePosition closePosition,\n            final boolean allowOffscreen)", "class_method_signature": "MraidController.handleResize(final int widthDips, final int heightDips, final int offsetXDips,\n            final int offsetYDips, @NonNull final ClosePosition closePosition,\n            final boolean allowOffscreen)", "testcase": false, "constructor": false}, {"identifier": "handleExpand", "parameters": "(@Nullable URI uri, boolean shouldUseCustomClose)", "modifiers": "", "return": "void", "signature": "void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)", "full_signature": " void handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)", "class_method_signature": "MraidController.handleExpand(@Nullable URI uri, boolean shouldUseCustomClose)", "testcase": false, "constructor": false}, {"identifier": "handleClose", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handleClose()", "full_signature": "@VisibleForTesting void handleClose()", "class_method_signature": "MraidController.handleClose()", "testcase": false, "constructor": false}, {"identifier": "getRootView", "parameters": "()", "modifiers": "@NonNull @TargetApi(VERSION_CODES.KITKAT) private", "return": "ViewGroup", "signature": "ViewGroup getRootView()", "full_signature": "@NonNull @TargetApi(VERSION_CODES.KITKAT) private ViewGroup getRootView()", "class_method_signature": "MraidController.getRootView()", "testcase": false, "constructor": false}, {"identifier": "handleShowVideo", "parameters": "(@NonNull String videoUrl)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handleShowVideo(@NonNull String videoUrl)", "full_signature": "@VisibleForTesting void handleShowVideo(@NonNull String videoUrl)", "class_method_signature": "MraidController.handleShowVideo(@NonNull String videoUrl)", "testcase": false, "constructor": false}, {"identifier": "lockOrientation", "parameters": "(final int screenOrientation)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void lockOrientation(final int screenOrientation)", "full_signature": "@VisibleForTesting void lockOrientation(final int screenOrientation)", "class_method_signature": "MraidController.lockOrientation(final int screenOrientation)", "testcase": false, "constructor": false}, {"identifier": "applyOrientation", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void applyOrientation()", "full_signature": "@VisibleForTesting void applyOrientation()", "class_method_signature": "MraidController.applyOrientation()", "testcase": false, "constructor": false}, {"identifier": "unApplyOrientation", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void unApplyOrientation()", "full_signature": "@VisibleForTesting void unApplyOrientation()", "class_method_signature": "MraidController.unApplyOrientation()", "testcase": false, "constructor": false}, {"identifier": "shouldAllowForceOrientation", "parameters": "(final MraidOrientation newOrientation)", "modifiers": "@TargetApi(VERSION_CODES.HONEYCOMB_MR2) @VisibleForTesting", "return": "boolean", "signature": "boolean shouldAllowForceOrientation(final MraidOrientation newOrientation)", "full_signature": "@TargetApi(VERSION_CODES.HONEYCOMB_MR2) @VisibleForTesting boolean shouldAllowForceOrientation(final MraidOrientation newOrientation)", "class_method_signature": "MraidController.shouldAllowForceOrientation(final MraidOrientation newOrientation)", "testcase": false, "constructor": false}, {"identifier": "handleCustomClose", "parameters": "(boolean useCustomClose)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handleCustomClose(boolean useCustomClose)", "full_signature": "@VisibleForTesting void handleCustomClose(boolean useCustomClose)", "class_method_signature": "MraidController.handleCustomClose(boolean useCustomClose)", "testcase": false, "constructor": false}, {"identifier": "getAdContainer", "parameters": "()", "modifiers": "@NonNull public", "return": "FrameLayout", "signature": "FrameLayout getAdContainer()", "full_signature": "@NonNull public FrameLayout getAdContainer()", "class_method_signature": "MraidController.getAdContainer()", "testcase": false, "constructor": false}, {"identifier": "loadJavascript", "parameters": "(@NonNull String javascript)", "modifiers": "public", "return": "void", "signature": "void loadJavascript(@NonNull String javascript)", "full_signature": "public void loadJavascript(@NonNull String javascript)", "class_method_signature": "MraidController.loadJavascript(@NonNull String javascript)", "testcase": false, "constructor": false}, {"identifier": "getContext", "parameters": "()", "modifiers": "@NonNull public", "return": "Context", "signature": "Context getContext()", "full_signature": "@NonNull public Context getContext()", "class_method_signature": "MraidController.getContext()", "testcase": false, "constructor": false}, {"identifier": "handleSetOrientationProperties", "parameters": "(final boolean allowOrientationChange,\n            final MraidOrientation forceOrientation)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handleSetOrientationProperties(final boolean allowOrientationChange,\n            final MraidOrientation forceOrientation)", "full_signature": "@VisibleForTesting void handleSetOrientationProperties(final boolean allowOrientationChange,\n            final MraidOrientation forceOrientation)", "class_method_signature": "MraidController.handleSetOrientationProperties(final boolean allowOrientationChange,\n            final MraidOrientation forceOrientation)", "testcase": false, "constructor": false}, {"identifier": "handleOpen", "parameters": "(@NonNull String url)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void handleOpen(@NonNull String url)", "full_signature": "@VisibleForTesting void handleOpen(@NonNull String url)", "class_method_signature": "MraidController.handleOpen(@NonNull String url)", "testcase": false, "constructor": false}, {"identifier": "launchApplicationUrl", "parameters": "(String url)", "modifiers": "private", "return": "boolean", "signature": "boolean launchApplicationUrl(String url)", "full_signature": "private boolean launchApplicationUrl(String url)", "class_method_signature": "MraidController.launchApplicationUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "isWebSiteUrl", "parameters": "(@NonNull String url)", "modifiers": "private", "return": "boolean", "signature": "boolean isWebSiteUrl(@NonNull String url)", "full_signature": "private boolean isWebSiteUrl(@NonNull String url)", "class_method_signature": "MraidController.isWebSiteUrl(@NonNull String url)", "testcase": false, "constructor": false}, {"identifier": "getViewState", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated // for testing @NonNull", "return": "ViewState", "signature": "ViewState getViewState()", "full_signature": "@VisibleForTesting @Deprecated // for testing @NonNull ViewState getViewState()", "class_method_signature": "MraidController.getViewState()", "testcase": false, "constructor": false}, {"identifier": "setViewStateForTesting", "parameters": "(@NonNull ViewState viewState)", "modifiers": "@VisibleForTesting @Deprecated", "return": "void", "signature": "void setViewStateForTesting(@NonNull ViewState viewState)", "full_signature": "@VisibleForTesting @Deprecated void setViewStateForTesting(@NonNull ViewState viewState)", "class_method_signature": "MraidController.setViewStateForTesting(@NonNull ViewState viewState)", "testcase": false, "constructor": false}, {"identifier": "getExpandedAdContainer", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated // for testing @NonNull", "return": "CloseableLayout", "signature": "CloseableLayout getExpandedAdContainer()", "full_signature": "@VisibleForTesting @Deprecated // for testing @NonNull CloseableLayout getExpandedAdContainer()", "class_method_signature": "MraidController.getExpandedAdContainer()", "testcase": false, "constructor": false}, {"identifier": "setRootView", "parameters": "(FrameLayout rootView)", "modifiers": "@VisibleForTesting @Deprecated", "return": "void", "signature": "void setRootView(FrameLayout rootView)", "full_signature": "@VisibleForTesting @Deprecated void setRootView(FrameLayout rootView)", "class_method_signature": "MraidController.setRootView(FrameLayout rootView)", "testcase": false, "constructor": false}, {"identifier": "setRootViewSize", "parameters": "(int width, int height)", "modifiers": "@VisibleForTesting @Deprecated", "return": "void", "signature": "void setRootViewSize(int width, int height)", "full_signature": "@VisibleForTesting @Deprecated void setRootViewSize(int width, int height)", "class_method_signature": "MraidController.setRootViewSize(int width, int height)", "testcase": false, "constructor": false}, {"identifier": "getOriginalActivityOrientation", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated", "return": "Integer", "signature": "Integer getOriginalActivityOrientation()", "full_signature": "@VisibleForTesting @Deprecated Integer getOriginalActivityOrientation()", "class_method_signature": "MraidController.getOriginalActivityOrientation()", "testcase": false, "constructor": false}, {"identifier": "getAllowOrientationChange", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated", "return": "boolean", "signature": "boolean getAllowOrientationChange()", "full_signature": "@VisibleForTesting @Deprecated boolean getAllowOrientationChange()", "class_method_signature": "MraidController.getAllowOrientationChange()", "testcase": false, "constructor": false}, {"identifier": "getForceOrientation", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated", "return": "MraidOrientation", "signature": "MraidOrientation getForceOrientation()", "full_signature": "@VisibleForTesting @Deprecated MraidOrientation getForceOrientation()", "class_method_signature": "MraidController.getForceOrientation()", "testcase": false, "constructor": false}, {"identifier": "setOrientationBroadcastReceiver", "parameters": "(OrientationBroadcastReceiver receiver)", "modifiers": "@VisibleForTesting @Deprecated", "return": "void", "signature": "void setOrientationBroadcastReceiver(OrientationBroadcastReceiver receiver)", "full_signature": "@VisibleForTesting @Deprecated void setOrientationBroadcastReceiver(OrientationBroadcastReceiver receiver)", "class_method_signature": "MraidController.setOrientationBroadcastReceiver(OrientationBroadcastReceiver receiver)", "testcase": false, "constructor": false}, {"identifier": "getMraidWebView", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated", "return": "MraidWebView", "signature": "MraidWebView getMraidWebView()", "full_signature": "@VisibleForTesting @Deprecated MraidWebView getMraidWebView()", "class_method_signature": "MraidController.getMraidWebView()", "testcase": false, "constructor": false}, {"identifier": "getTwoPartWebView", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated", "return": "MraidWebView", "signature": "MraidWebView getTwoPartWebView()", "full_signature": "@VisibleForTesting @Deprecated MraidWebView getTwoPartWebView()", "class_method_signature": "MraidController.getTwoPartWebView()", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mraid/MraidController.java"}, "focal_method": {"identifier": "getViewState", "parameters": "()", "modifiers": "@VisibleForTesting @Deprecated // for testing @NonNull", "return": "ViewState", "body": "@VisibleForTesting\n    @Deprecated // for testing\n    @NonNull\n    ViewState getViewState() {\n        return mViewState;\n    }", "signature": "ViewState getViewState()", "full_signature": "@VisibleForTesting @Deprecated // for testing @NonNull ViewState getViewState()", "class_method_signature": "MraidController.getViewState()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}