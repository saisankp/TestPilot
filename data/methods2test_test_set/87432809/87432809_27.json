{"test_class": {"identifier": "ForceDriverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ForceDriver driver;", "modifier": "private", "type": "ForceDriver", "declarator": "driver", "var_name": "driver"}], "file": "sf-jdbc-driver/src/test/java/com/ascendix/jdbc/salesforce/ForceDriverTest.java"}, "test_case": {"identifier": "testConnect_WhenWrongURL", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConnect_WhenWrongURL() throws  SQLException {\n        Connection connection = driver.connect(\"jdbc:mysql://localhost/test\", new Properties());\n\n        assertNull(connection);\n    }", "signature": "void testConnect_WhenWrongURL()", "full_signature": "@Test public void testConnect_WhenWrongURL()", "class_method_signature": "ForceDriverTest.testConnect_WhenWrongURL()", "testcase": true, "constructor": false, "invocations": ["connect", "assertNull"]}, "focal_class": {"identifier": "ForceDriver", "superclass": "", "interfaces": "implements Driver", "fields": [{"original_string": "private static final String ACCEPTABLE_URL = \"jdbc:ascendix:salesforce\";", "modifier": "private static final", "type": "String", "declarator": "ACCEPTABLE_URL = \"jdbc:ascendix:salesforce\"", "var_name": "ACCEPTABLE_URL"}, {"original_string": "private static final Pattern URL_PATTERN = Pattern.compile(\"\\\\A\" + ACCEPTABLE_URL + \"://(.*)\");", "modifier": "private static final", "type": "Pattern", "declarator": "URL_PATTERN = Pattern.compile(\"\\\\A\" + ACCEPTABLE_URL + \"://(.*)\")", "var_name": "URL_PATTERN"}, {"original_string": "private static final Pattern URL_HAS_AUTHORIZATION_SEGMENT = Pattern.compile(\"\\\\A\" + ACCEPTABLE_URL + \"://([^:]+):([^@]+)@.*\");", "modifier": "private static final", "type": "Pattern", "declarator": "URL_HAS_AUTHORIZATION_SEGMENT = Pattern.compile(\"\\\\A\" + ACCEPTABLE_URL + \"://([^:]+):([^@]+)@.*\")", "var_name": "URL_HAS_AUTHORIZATION_SEGMENT"}], "methods": [{"identifier": "connect", "parameters": "(String url, Properties properties)", "modifiers": "@Override public", "return": "Connection", "signature": "Connection connect(String url, Properties properties)", "full_signature": "@Override public Connection connect(String url, Properties properties)", "class_method_signature": "ForceDriver.connect(String url, Properties properties)", "testcase": false, "constructor": false}, {"identifier": "resolveSandboxProperty", "parameters": "(Properties properties)", "modifiers": "private static", "return": "Boolean", "signature": "Boolean resolveSandboxProperty(Properties properties)", "full_signature": "private static Boolean resolveSandboxProperty(Properties properties)", "class_method_signature": "ForceDriver.resolveSandboxProperty(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getConnStringProperties", "parameters": "(String url)", "modifiers": "protected", "return": "Properties", "signature": "Properties getConnStringProperties(String url)", "full_signature": "protected Properties getConnStringProperties(String url)", "class_method_signature": "ForceDriver.getConnStringProperties(String url)", "testcase": false, "constructor": false}, {"identifier": "acceptsURL", "parameters": "(String url)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean acceptsURL(String url)", "full_signature": "@Override public boolean acceptsURL(String url)", "class_method_signature": "ForceDriver.acceptsURL(String url)", "testcase": false, "constructor": false}, {"identifier": "getPropertyInfo", "parameters": "(String url, Properties info)", "modifiers": "@Override public", "return": "DriverPropertyInfo[]", "signature": "DriverPropertyInfo[] getPropertyInfo(String url, Properties info)", "full_signature": "@Override public DriverPropertyInfo[] getPropertyInfo(String url, Properties info)", "class_method_signature": "ForceDriver.getPropertyInfo(String url, Properties info)", "testcase": false, "constructor": false}, {"identifier": "getMajorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMajorVersion()", "full_signature": "@Override public int getMajorVersion()", "class_method_signature": "ForceDriver.getMajorVersion()", "testcase": false, "constructor": false}, {"identifier": "getMinorVersion", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMinorVersion()", "full_signature": "@Override public int getMinorVersion()", "class_method_signature": "ForceDriver.getMinorVersion()", "testcase": false, "constructor": false}, {"identifier": "jdbcCompliant", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean jdbcCompliant()", "full_signature": "@Override public boolean jdbcCompliant()", "class_method_signature": "ForceDriver.jdbcCompliant()", "testcase": false, "constructor": false}, {"identifier": "getParentLogger", "parameters": "()", "modifiers": "@Override public", "return": "Logger", "signature": "Logger getParentLogger()", "full_signature": "@Override public Logger getParentLogger()", "class_method_signature": "ForceDriver.getParentLogger()", "testcase": false, "constructor": false}], "file": "sf-jdbc-driver/src/main/java/com/ascendix/jdbc/salesforce/ForceDriver.java"}, "focal_method": {"identifier": "connect", "parameters": "(String url, Properties properties)", "modifiers": "@Override public", "return": "Connection", "body": "@Override\n    public Connection connect(String url, Properties properties) throws SQLException {\n        if (!acceptsURL(url)) {\n            /*\n             * According to JDBC spec:\n             * > The driver should return \"null\" if it realizes it is the wrong kind of driver to connect to the given URL.\n             * > This will be common, as when the JDBC driver manager is asked to connect to a given URL it passes the URL to each loaded driver in turn.\n             *\n             * Source: https://docs.oracle.com/javase/8/docs/api/java/sql/Driver.html#connect-java.lang.String-java.util.Properties-\n             */\n            return null;\n        }\n        try {\n            Properties connStringProps = getConnStringProperties(url);\n            properties.putAll(connStringProps);\n            ForceConnectionInfo info = new ForceConnectionInfo();\n            info.setUserName(properties.getProperty(\"user\"));\n            info.setPassword(properties.getProperty(\"password\"));\n            info.setSessionId(properties.getProperty(\"sessionId\"));\n            info.setSandbox(resolveSandboxProperty(properties));\n\n            PartnerConnection partnerConnection = ForceService.createPartnerConnection(info);\n            return new ForceConnection(partnerConnection);\n        } catch (ConnectionException | IOException e) {\n            throw new SQLException(e);\n        }\n    }", "signature": "Connection connect(String url, Properties properties)", "full_signature": "@Override public Connection connect(String url, Properties properties)", "class_method_signature": "ForceDriver.connect(String url, Properties properties)", "testcase": false, "constructor": false, "invocations": ["acceptsURL", "getConnStringProperties", "putAll", "setUserName", "getProperty", "setPassword", "getProperty", "setSessionId", "getProperty", "setSandbox", "resolveSandboxProperty", "createPartnerConnection"]}, "repository": {"repo_id": 87432809, "url": "https://github.com/ascendix/salesforce-jdbc", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 19, "size": 41622, "license": "licensed"}}