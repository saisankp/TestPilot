{"test_class": {"identifier": "GaussianNaiveBayesTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [{"original_string": "private static final double PRECISION = 1e-2;", "modifier": "private static final", "type": "double", "declarator": "PRECISION = 1e-2", "var_name": "PRECISION"}, {"original_string": "private static final double LABEL_1 = 1.;", "modifier": "private static final", "type": "double", "declarator": "LABEL_1 = 1.", "var_name": "LABEL_1"}, {"original_string": "private static final double LABEL_2 = 2.;", "modifier": "private static final", "type": "double", "declarator": "LABEL_2 = 2.", "var_name": "LABEL_2"}, {"original_string": "private static final Map<Integer, double[]> data = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, double[]>", "declarator": "data = new HashMap<>()", "var_name": "data"}, {"original_string": "private static final Map<Integer, double[]> singleLabeldata1 = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, double[]>", "declarator": "singleLabeldata1 = new HashMap<>()", "var_name": "singleLabeldata1"}, {"original_string": "private static final Map<Integer, double[]> singleLabeldata2 = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, double[]>", "declarator": "singleLabeldata2 = new HashMap<>()", "var_name": "singleLabeldata2"}, {"original_string": "private GaussianNaiveBayesTrainer trainer;", "modifier": "private", "type": "GaussianNaiveBayesTrainer", "declarator": "trainer", "var_name": "trainer"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/naivebayes/gaussian/GaussianNaiveBayesTrainerTest.java"}, "test_case": {"identifier": "testReturnsEquivalentProbalitiesWhenSetEquiprobableClasses_", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReturnsEquivalentProbalitiesWhenSetEquiprobableClasses_() {\n        GaussianNaiveBayesTrainer trainer = new GaussianNaiveBayesTrainer()\n            .withEquiprobableClasses();\n\n        GaussianNaiveBayesModel model = trainer.fit(\n            new LocalDatasetBuilder<>(data, parts),\n            new DoubleArrayVectorizer<Integer>().labeled(Vectorizer.LabelCoordinate.LAST)\n        );\n\n        Assert.assertEquals(.5, model.getClassProbabilities()[0], PRECISION);\n        Assert.assertEquals(.5, model.getClassProbabilities()[1], PRECISION);\n    }", "signature": "void testReturnsEquivalentProbalitiesWhenSetEquiprobableClasses_()", "full_signature": "@Test public void testReturnsEquivalentProbalitiesWhenSetEquiprobableClasses_()", "class_method_signature": "GaussianNaiveBayesTrainerTest.testReturnsEquivalentProbalitiesWhenSetEquiprobableClasses_()", "testcase": true, "constructor": false, "invocations": ["withEquiprobableClasses", "fit", "labeled", "assertEquals", "getClassProbabilities", "assertEquals", "getClassProbabilities"]}, "focal_class": {"identifier": "GaussianNaiveBayesTrainer", "superclass": "extends SingleLabelDatasetTrainer<GaussianNaiveBayesModel>", "interfaces": "", "fields": [{"original_string": "private double[] priorProbabilities;", "modifier": "private", "type": "double[]", "declarator": "priorProbabilities", "var_name": "priorProbabilities"}, {"original_string": "private boolean equiprobableClasses;", "modifier": "private", "type": "boolean", "declarator": "equiprobableClasses", "var_name": "equiprobableClasses"}], "methods": [{"identifier": "fitWithInitializedDeployingContext", "parameters": "(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "modifiers": "@Override public", "return": "GaussianNaiveBayesModel", "signature": "GaussianNaiveBayesModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "full_signature": "@Override public GaussianNaiveBayesModel fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "class_method_signature": "GaussianNaiveBayesTrainer.fitWithInitializedDeployingContext(DatasetBuilder<K, V> datasetBuilder,\n                                                        Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "isUpdateable", "parameters": "(GaussianNaiveBayesModel mdl)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUpdateable(GaussianNaiveBayesModel mdl)", "full_signature": "@Override public boolean isUpdateable(GaussianNaiveBayesModel mdl)", "class_method_signature": "GaussianNaiveBayesTrainer.isUpdateable(GaussianNaiveBayesModel mdl)", "testcase": false, "constructor": false}, {"identifier": "withEnvironmentBuilder", "parameters": "(LearningEnvironmentBuilder envBuilder)", "modifiers": "@Override public", "return": "GaussianNaiveBayesTrainer", "signature": "GaussianNaiveBayesTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "full_signature": "@Override public GaussianNaiveBayesTrainer withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "class_method_signature": "GaussianNaiveBayesTrainer.withEnvironmentBuilder(LearningEnvironmentBuilder envBuilder)", "testcase": false, "constructor": false}, {"identifier": "updateModel", "parameters": "(GaussianNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "modifiers": "@Override protected", "return": "GaussianNaiveBayesModel", "signature": "GaussianNaiveBayesModel updateModel(GaussianNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "full_signature": "@Override protected GaussianNaiveBayesModel updateModel(GaussianNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "class_method_signature": "GaussianNaiveBayesTrainer.updateModel(GaussianNaiveBayesModel mdl,\n                                                                   DatasetBuilder<K, V> datasetBuilder, Preprocessor<K, V> extractor)", "testcase": false, "constructor": false}, {"identifier": "withEquiprobableClasses", "parameters": "()", "modifiers": "public", "return": "GaussianNaiveBayesTrainer", "signature": "GaussianNaiveBayesTrainer withEquiprobableClasses()", "full_signature": "public GaussianNaiveBayesTrainer withEquiprobableClasses()", "class_method_signature": "GaussianNaiveBayesTrainer.withEquiprobableClasses()", "testcase": false, "constructor": false}, {"identifier": "setPriorProbabilities", "parameters": "(double[] priorProbabilities)", "modifiers": "public", "return": "GaussianNaiveBayesTrainer", "signature": "GaussianNaiveBayesTrainer setPriorProbabilities(double[] priorProbabilities)", "full_signature": "public GaussianNaiveBayesTrainer setPriorProbabilities(double[] priorProbabilities)", "class_method_signature": "GaussianNaiveBayesTrainer.setPriorProbabilities(double[] priorProbabilities)", "testcase": false, "constructor": false}, {"identifier": "resetSettings", "parameters": "()", "modifiers": "public", "return": "GaussianNaiveBayesTrainer", "signature": "GaussianNaiveBayesTrainer resetSettings()", "full_signature": "public GaussianNaiveBayesTrainer resetSettings()", "class_method_signature": "GaussianNaiveBayesTrainer.resetSettings()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/naivebayes/gaussian/GaussianNaiveBayesTrainer.java"}, "focal_method": {"identifier": "withEquiprobableClasses", "parameters": "()", "modifiers": "public", "return": "GaussianNaiveBayesTrainer", "body": "public GaussianNaiveBayesTrainer withEquiprobableClasses() {\n        resetSettings();\n        equiprobableClasses = true;\n        return this;\n    }", "signature": "GaussianNaiveBayesTrainer withEquiprobableClasses()", "full_signature": "public GaussianNaiveBayesTrainer withEquiprobableClasses()", "class_method_signature": "GaussianNaiveBayesTrainer.withEquiprobableClasses()", "testcase": false, "constructor": false, "invocations": ["resetSettings"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}