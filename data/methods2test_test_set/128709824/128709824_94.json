{"test_class": {"identifier": "RegistryConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/config/RegistryConfigTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        RegistryConfig config1 = new RegistryConfig();\n        Assert.assertTrue(config1.equals(config1));\n        Assert.assertFalse(config1.equals(null));\n        Assert.assertFalse(config1.equals(\"\"));\n\n        RegistryConfig config2 = new RegistryConfig();\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setRegister(!config1.isRegister());\n        Assert.assertFalse(config1.equals(config2));\n        config2.setRegister(!config2.isRegister());\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setSubscribe(!config1.isSubscribe());\n        Assert.assertFalse(config1.equals(config2));\n        config2.setSubscribe(!config2.isSubscribe());\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setTimeout(9998);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setTimeout(9997);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setTimeout(9998);\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setConnectTimeout(9998);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setConnectTimeout(9997);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setConnectTimeout(9998);\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setBatch(!config1.isBatch());\n        Assert.assertFalse(config1.equals(config2));\n        config2.setBatch(!config2.isBatch());\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setBatchSize(9998);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setBatchSize(9997);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setBatchSize(9998);\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setHeartbeatPeriod(9998);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setHeartbeatPeriod(9997);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setHeartbeatPeriod(9998);\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setReconnectPeriod(9998);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setReconnectPeriod(9997);\n        Assert.assertFalse(config1.equals(config2));\n        config2.setReconnectPeriod(9998);\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setProtocol(\"xxx\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setProtocol(\"yyy\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setProtocol(\"xxx\");\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setAddress(\"xxx\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setAddress(\"yyy\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setAddress(\"xxx\");\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setIndex(\"xxx\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setIndex(\"yyy\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setIndex(\"xxx\");\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setFile(\"xxx\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setFile(\"yyy\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setFile(\"xxx\");\n        Assert.assertTrue(config1.equals(config2));\n\n        config1.setParameter(\"xxx\", \"xxx\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setParameter(\"xxx\", \"yyy\");\n        Assert.assertFalse(config1.equals(config2));\n        config2.setParameter(\"xxx\", \"xxx\");\n        Assert.assertTrue(config1.equals(config2));\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "RegistryConfigTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "equals", "assertFalse", "equals", "assertFalse", "equals", "assertTrue", "equals", "setRegister", "isRegister", "assertFalse", "equals", "setRegister", "isRegister", "assertTrue", "equals", "setSubscribe", "isSubscribe", "assertFalse", "equals", "setSubscribe", "isSubscribe", "assertTrue", "equals", "setTimeout", "assertFalse", "equals", "setTimeout", "assertFalse", "equals", "setTimeout", "assertTrue", "equals", "setConnectTimeout", "assertFalse", "equals", "setConnectTimeout", "assertFalse", "equals", "setConnectTimeout", "assertTrue", "equals", "setBatch", "isBatch", "assertFalse", "equals", "setBatch", "isBatch", "assertTrue", "equals", "setBatchSize", "assertFalse", "equals", "setBatchSize", "assertFalse", "equals", "setBatchSize", "assertTrue", "equals", "setHeartbeatPeriod", "assertFalse", "equals", "setHeartbeatPeriod", "assertFalse", "equals", "setHeartbeatPeriod", "assertTrue", "equals", "setReconnectPeriod", "assertFalse", "equals", "setReconnectPeriod", "assertFalse", "equals", "setReconnectPeriod", "assertTrue", "equals", "setProtocol", "assertFalse", "equals", "setProtocol", "assertFalse", "equals", "setProtocol", "assertTrue", "equals", "setAddress", "assertFalse", "equals", "setAddress", "assertFalse", "equals", "setAddress", "assertTrue", "equals", "setIndex", "assertFalse", "equals", "setIndex", "assertFalse", "equals", "setIndex", "assertTrue", "equals", "setFile", "assertFalse", "equals", "setFile", "assertFalse", "equals", "setFile", "assertTrue", "equals", "setParameter", "assertFalse", "equals", "setParameter", "assertFalse", "equals", "setParameter", "assertTrue", "equals"]}, "focal_class": {"identifier": "RegistryConfig", "superclass": "extends AbstractIdConfig", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long     serialVersionUID = -2921019924557602234L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2921019924557602234L", "var_name": "serialVersionUID"}, {"original_string": "private String                protocol         = getStringValue(DEFAULT_REGISTRY);", "modifier": "private", "type": "String", "declarator": "protocol         = getStringValue(DEFAULT_REGISTRY)", "var_name": "protocol"}, {"original_string": "private String                address;", "modifier": "private", "type": "String", "declarator": "address", "var_name": "address"}, {"original_string": "private String                index            = getStringValue(REGISTRY_INDEX_ADDRESS);", "modifier": "private", "type": "String", "declarator": "index            = getStringValue(REGISTRY_INDEX_ADDRESS)", "var_name": "index"}, {"original_string": "private boolean               register         = getBooleanValue(SERVICE_REGISTER);", "modifier": "private", "type": "boolean", "declarator": "register         = getBooleanValue(SERVICE_REGISTER)", "var_name": "register"}, {"original_string": "private boolean               subscribe        = getBooleanValue(SERVICE_SUBSCRIBE);", "modifier": "private", "type": "boolean", "declarator": "subscribe        = getBooleanValue(SERVICE_SUBSCRIBE)", "var_name": "subscribe"}, {"original_string": "private int                   timeout          = getIntValue(REGISTRY_INVOKE_TIMEOUT);", "modifier": "private", "type": "int", "declarator": "timeout          = getIntValue(REGISTRY_INVOKE_TIMEOUT)", "var_name": "timeout"}, {"original_string": "private int                   connectTimeout   = getIntValue(REGISTRY_CONNECT_TIMEOUT);", "modifier": "private", "type": "int", "declarator": "connectTimeout   = getIntValue(REGISTRY_CONNECT_TIMEOUT)", "var_name": "connectTimeout"}, {"original_string": "private String                file;", "modifier": "private", "type": "String", "declarator": "file", "var_name": "file"}, {"original_string": "private boolean               batch            = getBooleanValue(REGISTRY_BATCH);", "modifier": "private", "type": "boolean", "declarator": "batch            = getBooleanValue(REGISTRY_BATCH)", "var_name": "batch"}, {"original_string": "private int                   batchSize        = getIntValue(REGISTRY_BATCH_SIZE);", "modifier": "private", "type": "int", "declarator": "batchSize        = getIntValue(REGISTRY_BATCH_SIZE)", "var_name": "batchSize"}, {"original_string": "protected int                 heartbeatPeriod  = getIntValue(REGISTRY_HEARTBEAT_PERIOD);", "modifier": "protected", "type": "int", "declarator": "heartbeatPeriod  = getIntValue(REGISTRY_HEARTBEAT_PERIOD)", "var_name": "heartbeatPeriod"}, {"original_string": "protected int                 reconnectPeriod  = getIntValue(REGISTRY_RECONNECT_PERIOD);", "modifier": "protected", "type": "int", "declarator": "reconnectPeriod  = getIntValue(REGISTRY_RECONNECT_PERIOD)", "var_name": "reconnectPeriod"}, {"original_string": "protected Map<String, String> parameters;", "modifier": "protected", "type": "Map<String, String>", "declarator": "parameters", "var_name": "parameters"}], "methods": [{"identifier": "getProtocol", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProtocol()", "full_signature": "public String getProtocol()", "class_method_signature": "RegistryConfig.getProtocol()", "testcase": false, "constructor": false}, {"identifier": "setProtocol", "parameters": "(String protocol)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setProtocol(String protocol)", "full_signature": "public RegistryConfig setProtocol(String protocol)", "class_method_signature": "RegistryConfig.setProtocol(String protocol)", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAddress()", "full_signature": "public String getAddress()", "class_method_signature": "RegistryConfig.getAddress()", "testcase": false, "constructor": false}, {"identifier": "setAddress", "parameters": "(String address)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setAddress(String address)", "full_signature": "public RegistryConfig setAddress(String address)", "class_method_signature": "RegistryConfig.setAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getIndex()", "full_signature": "public String getIndex()", "class_method_signature": "RegistryConfig.getIndex()", "testcase": false, "constructor": false}, {"identifier": "setIndex", "parameters": "(String index)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setIndex(String index)", "full_signature": "public RegistryConfig setIndex(String index)", "class_method_signature": "RegistryConfig.setIndex(String index)", "testcase": false, "constructor": false}, {"identifier": "isRegister", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRegister()", "full_signature": "public boolean isRegister()", "class_method_signature": "RegistryConfig.isRegister()", "testcase": false, "constructor": false}, {"identifier": "setRegister", "parameters": "(boolean register)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setRegister(boolean register)", "full_signature": "public RegistryConfig setRegister(boolean register)", "class_method_signature": "RegistryConfig.setRegister(boolean register)", "testcase": false, "constructor": false}, {"identifier": "isSubscribe", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSubscribe()", "full_signature": "public boolean isSubscribe()", "class_method_signature": "RegistryConfig.isSubscribe()", "testcase": false, "constructor": false}, {"identifier": "setSubscribe", "parameters": "(boolean subscribe)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setSubscribe(boolean subscribe)", "full_signature": "public RegistryConfig setSubscribe(boolean subscribe)", "class_method_signature": "RegistryConfig.setSubscribe(boolean subscribe)", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTimeout()", "full_signature": "public int getTimeout()", "class_method_signature": "RegistryConfig.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "setTimeout", "parameters": "(int timeout)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setTimeout(int timeout)", "full_signature": "public RegistryConfig setTimeout(int timeout)", "class_method_signature": "RegistryConfig.setTimeout(int timeout)", "testcase": false, "constructor": false}, {"identifier": "getConnectTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getConnectTimeout()", "full_signature": "public int getConnectTimeout()", "class_method_signature": "RegistryConfig.getConnectTimeout()", "testcase": false, "constructor": false}, {"identifier": "setConnectTimeout", "parameters": "(int connectTimeout)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setConnectTimeout(int connectTimeout)", "full_signature": "public RegistryConfig setConnectTimeout(int connectTimeout)", "class_method_signature": "RegistryConfig.setConnectTimeout(int connectTimeout)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFile()", "full_signature": "public String getFile()", "class_method_signature": "RegistryConfig.getFile()", "testcase": false, "constructor": false}, {"identifier": "setFile", "parameters": "(String file)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setFile(String file)", "full_signature": "public RegistryConfig setFile(String file)", "class_method_signature": "RegistryConfig.setFile(String file)", "testcase": false, "constructor": false}, {"identifier": "isBatch", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBatch()", "full_signature": "public boolean isBatch()", "class_method_signature": "RegistryConfig.isBatch()", "testcase": false, "constructor": false}, {"identifier": "setBatch", "parameters": "(boolean batch)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setBatch(boolean batch)", "full_signature": "public RegistryConfig setBatch(boolean batch)", "class_method_signature": "RegistryConfig.setBatch(boolean batch)", "testcase": false, "constructor": false}, {"identifier": "getBatchSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBatchSize()", "full_signature": "public int getBatchSize()", "class_method_signature": "RegistryConfig.getBatchSize()", "testcase": false, "constructor": false}, {"identifier": "setBatchSize", "parameters": "(int batchSize)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setBatchSize(int batchSize)", "full_signature": "public RegistryConfig setBatchSize(int batchSize)", "class_method_signature": "RegistryConfig.setBatchSize(int batchSize)", "testcase": false, "constructor": false}, {"identifier": "getHeartbeatPeriod", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHeartbeatPeriod()", "full_signature": "public int getHeartbeatPeriod()", "class_method_signature": "RegistryConfig.getHeartbeatPeriod()", "testcase": false, "constructor": false}, {"identifier": "setHeartbeatPeriod", "parameters": "(int heartbeatPeriod)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setHeartbeatPeriod(int heartbeatPeriod)", "full_signature": "public RegistryConfig setHeartbeatPeriod(int heartbeatPeriod)", "class_method_signature": "RegistryConfig.setHeartbeatPeriod(int heartbeatPeriod)", "testcase": false, "constructor": false}, {"identifier": "getReconnectPeriod", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReconnectPeriod()", "full_signature": "public int getReconnectPeriod()", "class_method_signature": "RegistryConfig.getReconnectPeriod()", "testcase": false, "constructor": false}, {"identifier": "setReconnectPeriod", "parameters": "(int reconnectPeriod)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setReconnectPeriod(int reconnectPeriod)", "full_signature": "public RegistryConfig setReconnectPeriod(int reconnectPeriod)", "class_method_signature": "RegistryConfig.setReconnectPeriod(int reconnectPeriod)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getParameters()", "full_signature": "public Map<String, String> getParameters()", "class_method_signature": "RegistryConfig.getParameters()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Map<String, String> parameters)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setParameters(Map<String, String> parameters)", "full_signature": "public RegistryConfig setParameters(Map<String, String> parameters)", "class_method_signature": "RegistryConfig.setParameters(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "setParameter", "parameters": "(String key, String value)", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig setParameter(String key, String value)", "full_signature": "public RegistryConfig setParameter(String key, String value)", "class_method_signature": "RegistryConfig.setParameter(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "getParameter", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getParameter(String key)", "full_signature": "public String getParameter(String key)", "class_method_signature": "RegistryConfig.getParameter(String key)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RegistryConfig.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RegistryConfig.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RegistryConfig.hashCode()", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/config/RegistryConfig.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof RegistryConfig)) {\n            return false;\n        }\n\n        RegistryConfig that = (RegistryConfig) o;\n\n        if (register != that.register) {\n            return false;\n        }\n        if (subscribe != that.subscribe) {\n            return false;\n        }\n        if (timeout != that.timeout) {\n            return false;\n        }\n        if (connectTimeout != that.connectTimeout) {\n            return false;\n        }\n        if (batch != that.batch) {\n            return false;\n        }\n        if (batchSize != that.batchSize) {\n            return false;\n        }\n        if (heartbeatPeriod != that.heartbeatPeriod) {\n            return false;\n        }\n        if (reconnectPeriod != that.reconnectPeriod) {\n            return false;\n        }\n        if (!protocol.equals(that.protocol)) {\n            return false;\n        }\n        if (address != null ? !address.equals(that.address) : that.address != null) {\n            return false;\n        }\n        if (index != null ? !index.equals(that.index) : that.index != null) {\n            return false;\n        }\n        if (file != null ? !file.equals(that.file) : that.file != null) {\n            return false;\n        }\n        return parameters != null ? parameters.equals(that.parameters) : that.parameters == null;\n\n    }", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RegistryConfig.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}