{"test_class": {"identifier": "H2ScoreDistributionReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScoreDistributionReader objDbReader;", "modifier": "private", "type": "ScoreDistributionReader", "declarator": "objDbReader", "var_name": "objDbReader"}], "file": "phenol-annotations/src/test/java/org/monarchinitiative/phenol/annotations/scoredist/H2ScoreDistributionReaderTest.java"}, "test_case": {"identifier": "readForTermCount", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void readForTermCount() throws Exception {\n    ScoreDistribution objScoreDist = objDbReader.readForTermCount(3);\n    assertEquals(objScoreDist.getObjectIds().size(), 1);\n  }", "signature": "void readForTermCount()", "full_signature": "@Test void readForTermCount()", "class_method_signature": "H2ScoreDistributionReaderTest.readForTermCount()", "testcase": true, "constructor": false, "invocations": ["readForTermCount", "assertEquals", "size", "getObjectIds"]}, "focal_class": {"identifier": "H2ScoreDistributionReader", "superclass": "", "interfaces": "implements ScoreDistributionReader", "fields": [{"original_string": "private final String pathDb;", "modifier": "private final", "type": "String", "declarator": "pathDb", "var_name": "pathDb"}, {"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private final Connection conn;", "modifier": "private final", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private static final String H2_SELECT_TERM_COUNTS = \"SELECT DISTINCT num_terms from %s\";", "modifier": "private static final", "type": "String", "declarator": "H2_SELECT_TERM_COUNTS = \"SELECT DISTINCT num_terms from %s\"", "var_name": "H2_SELECT_TERM_COUNTS"}, {"original_string": "private static final String H2_SELECT_BY_TERM_COUNT_STATEMENT =\n      \"SELECT num_terms, object_id, sample_size, scores, p_values FROM %s WHERE num_terms = ?\";", "modifier": "private static final", "type": "String", "declarator": "H2_SELECT_BY_TERM_COUNT_STATEMENT =\n      \"SELECT num_terms, object_id, sample_size, scores, p_values FROM %s WHERE num_terms = ?\"", "var_name": "H2_SELECT_BY_TERM_COUNT_STATEMENT"}, {"original_string": "private static final String H2_SELECT_BY_TERM_COUNT_AND_OBJECT_STATEMENT =\n      \"SELECT num_terms, object_id, sample_size, scores, p_values FROM %s WHERE num_terms = ? AND object_id = ?\";", "modifier": "private static final", "type": "String", "declarator": "H2_SELECT_BY_TERM_COUNT_AND_OBJECT_STATEMENT =\n      \"SELECT num_terms, object_id, sample_size, scores, p_values FROM %s WHERE num_terms = ? AND object_id = ?\"", "var_name": "H2_SELECT_BY_TERM_COUNT_AND_OBJECT_STATEMENT"}], "methods": [{"identifier": "H2ScoreDistributionReader", "parameters": "(String pathDb, String tableName)", "modifiers": "public", "return": "", "signature": " H2ScoreDistributionReader(String pathDb, String tableName)", "full_signature": "public  H2ScoreDistributionReader(String pathDb, String tableName)", "class_method_signature": "H2ScoreDistributionReader.H2ScoreDistributionReader(String pathDb, String tableName)", "testcase": false, "constructor": true}, {"identifier": "openConnection", "parameters": "()", "modifiers": "private", "return": "Connection", "signature": "Connection openConnection()", "full_signature": "private Connection openConnection()", "class_method_signature": "H2ScoreDistributionReader.openConnection()", "testcase": false, "constructor": false}, {"identifier": "readForTermCountAndObject", "parameters": "(int termCount, TermId objectId)", "modifiers": "@Override public", "return": "ObjectScoreDistribution", "signature": "ObjectScoreDistribution readForTermCountAndObject(int termCount, TermId objectId)", "full_signature": "@Override public ObjectScoreDistribution readForTermCountAndObject(int termCount, TermId objectId)", "class_method_signature": "H2ScoreDistributionReader.readForTermCountAndObject(int termCount, TermId objectId)", "testcase": false, "constructor": false}, {"identifier": "objectScoreDistributionFromResultSet", "parameters": "(ResultSet rs)", "modifiers": "private", "return": "ObjectScoreDistribution", "signature": "ObjectScoreDistribution objectScoreDistributionFromResultSet(ResultSet rs)", "full_signature": "private ObjectScoreDistribution objectScoreDistributionFromResultSet(ResultSet rs)", "class_method_signature": "H2ScoreDistributionReader.objectScoreDistributionFromResultSet(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "readForTermCount", "parameters": "(int termCount)", "modifiers": "@Override public", "return": "ScoreDistribution", "signature": "ScoreDistribution readForTermCount(int termCount)", "full_signature": "@Override public ScoreDistribution readForTermCount(int termCount)", "class_method_signature": "H2ScoreDistributionReader.readForTermCount(int termCount)", "testcase": false, "constructor": false}, {"identifier": "readAll", "parameters": "()", "modifiers": "@Override public", "return": "Map<Integer, ScoreDistribution>", "signature": "Map<Integer, ScoreDistribution> readAll()", "full_signature": "@Override public Map<Integer, ScoreDistribution> readAll()", "class_method_signature": "H2ScoreDistributionReader.readAll()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "H2ScoreDistributionReader.close()", "testcase": false, "constructor": false}], "file": "phenol-annotations/src/main/java/org/monarchinitiative/phenol/annotations/scoredist/H2ScoreDistributionReader.java"}, "focal_method": {"identifier": "readForTermCount", "parameters": "(int termCount)", "modifiers": "@Override public", "return": "ScoreDistribution", "body": "@Override\n  public ScoreDistribution readForTermCount(int termCount) throws PhenolException {\n    final Map<TermId, ObjectScoreDistribution> dists = new HashMap<>();\n\n    try (final PreparedStatement stmt =\n        conn.prepareStatement(String.format(H2_SELECT_BY_TERM_COUNT_STATEMENT, tableName))) {\n      stmt.setInt(1, termCount);\n      try (final ResultSet rs = stmt.executeQuery()) {\n        while (rs.next()) {\n          final ObjectScoreDistribution objScoreDist = objectScoreDistributionFromResultSet(rs);\n          dists.put(objScoreDist.getObjectId(), objScoreDist);\n        }\n      }\n    } catch (SQLException e) {\n      throw new PhenolException(\n          \"Problem with getting object score distributions for termCount: \" + termCount);\n    }\n\n    if (dists.size() == 0) {\n      throw new PhenolException(\"Found no score distributions for termCount: \" + termCount);\n    } else {\n      return new ScoreDistribution(termCount, dists);\n    }\n  }", "signature": "ScoreDistribution readForTermCount(int termCount)", "full_signature": "@Override public ScoreDistribution readForTermCount(int termCount)", "class_method_signature": "H2ScoreDistributionReader.readForTermCount(int termCount)", "testcase": false, "constructor": false, "invocations": ["prepareStatement", "format", "setInt", "executeQuery", "next", "objectScoreDistributionFromResultSet", "put", "getObjectId", "size"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}