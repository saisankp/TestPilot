{"test_class": {"identifier": "MultipartRequestHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BOUNDARY = \"------------BOUNDARY\";", "modifier": "private static final", "type": "String", "declarator": "BOUNDARY = \"------------BOUNDARY\"", "var_name": "BOUNDARY"}, {"original_string": "private static final String TEMPORARY_UPLOADS_DIRECTORY\n            = System.getProperty(\"java.io.tmpdir\") + \"/\";", "modifier": "private static final", "type": "String", "declarator": "TEMPORARY_UPLOADS_DIRECTORY\n            = System.getProperty(\"java.io.tmpdir\") + \"/\"", "var_name": "TEMPORARY_UPLOADS_DIRECTORY"}, {"original_string": "private static final Parser<MultipartHeadersPart> PARSER = new MultipartHeadersPartParser(\n            new HeadersParser()\n    );", "modifier": "private static final", "type": "Parser<MultipartHeadersPart>", "declarator": "PARSER = new MultipartHeadersPartParser(\n            new HeadersParser()\n    )", "var_name": "PARSER"}], "file": "http/src/test/java/ro/polak/http/MultipartRequestHandlerTest.java"}, "test_case": {"identifier": "shouldStopParsingOnWrongContentLengthInBody", "parameters": "()", "modifiers": "@Test(expected = PayloadTooLargeProtocolException.class) public", "return": "void", "body": "@Test(expected = PayloadTooLargeProtocolException.class)\n    public void shouldStopParsingOnWrongContentLengthInBody() throws MalformedInputException {\n        String begin = new MultipartInputBuilder(BOUNDARY)\n                .withField(\"field_1\", \"A123\")\n                .build();\n\n        String data = begin + new MultipartInputBuilder(BOUNDARY)\n                .withField(\"field_2\", \"B123\")\n                .withField(\"field_3\", \"C123\")\n                .build();\n\n        MultipartRequestHandler mrh = new MultipartRequestHandler(PARSER, getStreamOutOfString(data),\n                begin.length(), BOUNDARY, TEMPORARY_UPLOADS_DIRECTORY, 2048);\n\n        try {\n            mrh.handle();\n        } catch (IOException e) {\n            fail(\"Should not throw IOException: \" + e.getMessage());\n        }\n    }", "signature": "void shouldStopParsingOnWrongContentLengthInBody()", "full_signature": "@Test(expected = PayloadTooLargeProtocolException.class) public void shouldStopParsingOnWrongContentLengthInBody()", "class_method_signature": "MultipartRequestHandlerTest.shouldStopParsingOnWrongContentLengthInBody()", "testcase": true, "constructor": false, "invocations": ["build", "withField", "build", "withField", "withField", "getStreamOutOfString", "length", "handle", "fail", "getMessage"]}, "focal_class": {"identifier": "MultipartRequestHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NEW_LINE = \"\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "NEW_LINE = \"\\r\\n\"", "var_name": "NEW_LINE"}, {"original_string": "private static final String BOUNDARY_BEGIN_MARK = \"--\";", "modifier": "private static final", "type": "String", "declarator": "BOUNDARY_BEGIN_MARK = \"--\"", "var_name": "BOUNDARY_BEGIN_MARK"}, {"original_string": "private static final String HEADERS_DELIMINATOR = NEW_LINE + NEW_LINE;", "modifier": "private static final", "type": "String", "declarator": "HEADERS_DELIMINATOR = NEW_LINE + NEW_LINE", "var_name": "HEADERS_DELIMINATOR"}, {"original_string": "private final InputStream in;", "modifier": "private final", "type": "InputStream", "declarator": "in", "var_name": "in"}, {"original_string": "private final Parser<MultipartHeadersPart> multipartHeadersPartParser;", "modifier": "private final", "type": "Parser<MultipartHeadersPart>", "declarator": "multipartHeadersPartParser", "var_name": "multipartHeadersPartParser"}, {"original_string": "private final int expectedPostLength;", "modifier": "private final", "type": "int", "declarator": "expectedPostLength", "var_name": "expectedPostLength"}, {"original_string": "private final int bufferLength;", "modifier": "private final", "type": "int", "declarator": "bufferLength", "var_name": "bufferLength"}, {"original_string": "private final String temporaryUploadsDirectory;", "modifier": "private final", "type": "String", "declarator": "temporaryUploadsDirectory", "var_name": "temporaryUploadsDirectory"}, {"original_string": "private final Map<String, String> post;", "modifier": "private final", "type": "Map<String, String>", "declarator": "post", "var_name": "post"}, {"original_string": "private File currentFile;", "modifier": "private", "type": "File", "declarator": "currentFile", "var_name": "currentFile"}, {"original_string": "private FileOutputStream fileOutputStream;", "modifier": "private", "type": "FileOutputStream", "declarator": "fileOutputStream", "var_name": "fileOutputStream"}, {"original_string": "private int allBytesRead = 0;", "modifier": "private", "type": "int", "declarator": "allBytesRead = 0", "var_name": "allBytesRead"}, {"original_string": "private StringBuilder headersStringBuffered;", "modifier": "private", "type": "StringBuilder", "declarator": "headersStringBuffered", "var_name": "headersStringBuffered"}, {"original_string": "private StringBuilder valueStringBuffered;", "modifier": "private", "type": "StringBuilder", "declarator": "valueStringBuffered", "var_name": "valueStringBuffered"}, {"original_string": "private String endBoundary;", "modifier": "private", "type": "String", "declarator": "endBoundary", "var_name": "endBoundary"}, {"original_string": "private String beginBoundary;", "modifier": "private", "type": "String", "declarator": "beginBoundary", "var_name": "beginBoundary"}, {"original_string": "private MultipartHeadersPart multipartHeadersPart;", "modifier": "private", "type": "MultipartHeadersPart", "declarator": "multipartHeadersPart", "var_name": "multipartHeadersPart"}, {"original_string": "private Collection<UploadedFile> uploadedFiles;", "modifier": "private", "type": "Collection<UploadedFile>", "declarator": "uploadedFiles", "var_name": "uploadedFiles"}, {"original_string": "private boolean wasHandledBefore;", "modifier": "private", "type": "boolean", "declarator": "wasHandledBefore", "var_name": "wasHandledBefore"}], "methods": [{"identifier": "MultipartRequestHandler", "parameters": "(final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                   final InputStream in, final int expectedPostLength,\n                                   final String boundary, final String temporaryUploadsDirectory,\n                                   final int bufferLength)", "modifiers": "public", "return": "", "signature": " MultipartRequestHandler(final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                   final InputStream in, final int expectedPostLength,\n                                   final String boundary, final String temporaryUploadsDirectory,\n                                   final int bufferLength)", "full_signature": "public  MultipartRequestHandler(final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                   final InputStream in, final int expectedPostLength,\n                                   final String boundary, final String temporaryUploadsDirectory,\n                                   final int bufferLength)", "class_method_signature": "MultipartRequestHandler.MultipartRequestHandler(final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                   final InputStream in, final int expectedPostLength,\n                                   final String boundary, final String temporaryUploadsDirectory,\n                                   final int bufferLength)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void handle()", "full_signature": "public void handle()", "class_method_signature": "MultipartRequestHandler.handle()", "testcase": false, "constructor": false}, {"identifier": "getPost", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getPost()", "full_signature": "public Map<String, String> getPost()", "class_method_signature": "MultipartRequestHandler.getPost()", "testcase": false, "constructor": false}, {"identifier": "getUploadedFiles", "parameters": "()", "modifiers": "public", "return": "Collection<UploadedFile>", "signature": "Collection<UploadedFile> getUploadedFiles()", "full_signature": "public Collection<UploadedFile> getUploadedFiles()", "class_method_signature": "MultipartRequestHandler.getUploadedFiles()", "testcase": false, "constructor": false}, {"identifier": "skipToTheFirstPart", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipToTheFirstPart()", "full_signature": "private void skipToTheFirstPart()", "class_method_signature": "MultipartRequestHandler.skipToTheFirstPart()", "testcase": false, "constructor": false}, {"identifier": "handleBody", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void handleBody()", "full_signature": "private void handleBody()", "class_method_signature": "MultipartRequestHandler.handleBody()", "testcase": false, "constructor": false}, {"identifier": "pushBufferToDestination", "parameters": "(final byte[] bytes,\n                                         final int start,\n                                         final int end,\n                                         final boolean isHeadersReadingState)", "modifiers": "private", "return": "void", "signature": "void pushBufferToDestination(final byte[] bytes,\n                                         final int start,\n                                         final int end,\n                                         final boolean isHeadersReadingState)", "full_signature": "private void pushBufferToDestination(final byte[] bytes,\n                                         final int start,\n                                         final int end,\n                                         final boolean isHeadersReadingState)", "class_method_signature": "MultipartRequestHandler.pushBufferToDestination(final byte[] bytes,\n                                         final int start,\n                                         final int end,\n                                         final boolean isHeadersReadingState)", "testcase": false, "constructor": false}, {"identifier": "pushBufferOnEndOfState", "parameters": "(final byte[] bytes,\n                                          final int start,\n                                          final int end,\n                                          final boolean isHeadersReadingState)", "modifiers": "private", "return": "String", "signature": "String pushBufferOnEndOfState(final byte[] bytes,\n                                          final int start,\n                                          final int end,\n                                          final boolean isHeadersReadingState)", "full_signature": "private String pushBufferOnEndOfState(final byte[] bytes,\n                                          final int start,\n                                          final int end,\n                                          final boolean isHeadersReadingState)", "class_method_signature": "MultipartRequestHandler.pushBufferOnEndOfState(final byte[] bytes,\n                                          final int start,\n                                          final int end,\n                                          final boolean isHeadersReadingState)", "testcase": false, "constructor": false}, {"identifier": "pushBufferOnEndOfStateBody", "parameters": "(final byte[] bytes, final int start, final int end)", "modifiers": "private", "return": "void", "signature": "void pushBufferOnEndOfStateBody(final byte[] bytes, final int start, final int end)", "full_signature": "private void pushBufferOnEndOfStateBody(final byte[] bytes, final int start, final int end)", "class_method_signature": "MultipartRequestHandler.pushBufferOnEndOfStateBody(final byte[] bytes, final int start, final int end)", "testcase": false, "constructor": false}, {"identifier": "getMultipartFile", "parameters": "()", "modifiers": "private", "return": "UploadedFile", "signature": "UploadedFile getMultipartFile()", "full_signature": "private UploadedFile getMultipartFile()", "class_method_signature": "MultipartRequestHandler.getMultipartFile()", "testcase": false, "constructor": false}, {"identifier": "pushBufferOnEndOfStateHeaders", "parameters": "(final byte[] bytes, final int start, final int end)", "modifiers": "private", "return": "void", "signature": "void pushBufferOnEndOfStateHeaders(final byte[] bytes, final int start, final int end)", "full_signature": "private void pushBufferOnEndOfStateHeaders(final byte[] bytes, final int start, final int end)", "class_method_signature": "MultipartRequestHandler.pushBufferOnEndOfStateHeaders(final byte[] bytes, final int start, final int end)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/MultipartRequestHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void handle() throws IOException, MalformedInputException {\n        if (wasHandledBefore) {\n            throw new IllegalStateException(\"Handle method was not expected to be called more than once\");\n        }\n        wasHandledBefore = true;\n\n        skipToTheFirstPart();\n        handleBody();\n    }", "signature": "void handle()", "full_signature": "public void handle()", "class_method_signature": "MultipartRequestHandler.handle()", "testcase": false, "constructor": false, "invocations": ["skipToTheFirstPart", "handleBody"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}