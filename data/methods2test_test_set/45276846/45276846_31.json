{"test_class": {"identifier": "TestNodeGroupUtils", "superclass": "", "interfaces": "", "fields": [], "file": "xenon-common/src/test/java/com/vmware/xenon/services/common/TestNodeGroupUtils.java"}, "test_case": {"identifier": "toBroadcastResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toBroadcastResult() {\n        String hostSuccess1 = \"host-success1\";\n        String hostSuccess2 = \"host-success2\";\n        String hostSuccess3 = \"host-success3\";\n        String hostFailure = \"host-fail\";\n        URI successUri1 = URI.create(\"http://success1.localhost/core/examples\");\n        URI successUri2 = URI.create(\"http://success2.localhost/core/examples\");\n        URI successUri3 = URI.create(\"http://success3.localhost/core/examples\");\n        URI failureUri = URI.create(\"http://fail.localhost/core/examples\");\n        URI successNodeGroup1 = URI.create(\"http://success1.localhost/core/node-groups/default\");\n        URI successNodeGroup2 = URI.create(\"http://success2.localhost/core/node-groups/default\");\n        URI successNodeGroup3 = URI.create(\"http://success3.localhost/core/node-groups/default\");\n        URI failureNodeGroup = URI.create(\"http://fail.localhost/core/node-groups/default\");\n\n        ServiceDocument document = new ServiceDocument();\n        document.documentOwner = hostSuccess1;\n        String jsonForHostSuccess1 = Utils.toJson(document);\n        document.documentOwner = hostSuccess2;\n        String jsonForHostSuccess2 = Utils.toJson(document);\n        document.documentOwner = hostSuccess3;\n        String jsonForHostSuccess3 = Utils.toJson(document);\n\n        ServiceErrorResponse errorResponse = new ServiceErrorResponse();\n\n        NodeGroupBroadcastResponse seed = new NodeGroupBroadcastResponse();\n        seed.nodeCount = 5;\n        seed.availableNodeCount = 4;\n        seed.membershipQuorum = 2;\n\n        seed.receivers.add(successUri1);\n        seed.receivers.add(successUri2);\n        seed.receivers.add(successUri3);\n        seed.receivers.add(failureUri);\n\n        seed.selectedNodes.put(hostSuccess1, successNodeGroup1);\n        seed.selectedNodes.put(hostSuccess2, successNodeGroup2);\n        seed.selectedNodes.put(hostSuccess3, successNodeGroup3);\n        seed.selectedNodes.put(hostFailure, failureNodeGroup);\n\n        seed.jsonResponses.put(successUri1, jsonForHostSuccess1);\n        seed.jsonResponses.put(successUri2, jsonForHostSuccess2);\n        seed.jsonResponses.put(successUri3, jsonForHostSuccess3);\n\n        seed.failures.put(failureUri, errorResponse);\n\n        NodeGroupBroadcastResult result = NodeGroupUtils.toBroadcastResult(seed);\n\n        assertEquals(5, result.totalNodeCount);\n        assertEquals(4, result.availableNodeCount);\n        assertEquals(1, result.unavailableNodeCount);\n        assertEquals(2, result.membershipQuorum);\n\n        assertTrue(result.hasSuccess());\n        assertTrue(result.hasFailure());\n        assertTrue(result.isMajoritySuccess());\n        assertFalse(result.isAllSuccess());\n        assertFalse(result.isAllFailure());\n        assertFalse(result.isMajorityFailure());\n\n        List<PeerNodeResult> successes = result.successResponses;\n        assertEquals(3, successes.size());\n        List<PeerNodeResult> sorted = successes.stream()\n                .sorted(Comparator.comparing(peerNodeResult -> peerNodeResult.hostId))\n                .collect(toList());\n\n        // success1\n        PeerNodeResult singleResponse = sorted.get(0);\n        assertTrue(singleResponse.isSuccess());\n        assertFalse(singleResponse.isFailure());\n        assertEquals(hostSuccess1, singleResponse.hostId);\n        assertEquals(successUri1, singleResponse.requestUri);\n        assertEquals(successNodeGroup1, singleResponse.nodeGroupUri);\n        assertEquals(jsonForHostSuccess1, singleResponse.json);\n        assertNull(singleResponse.errorResponse);\n\n        // success2\n        singleResponse = sorted.get(1);\n        assertTrue(singleResponse.isSuccess());\n        assertFalse(singleResponse.isFailure());\n        assertEquals(hostSuccess2, singleResponse.hostId);\n        assertEquals(successUri2, singleResponse.requestUri);\n        assertEquals(successNodeGroup2, singleResponse.nodeGroupUri);\n        assertEquals(jsonForHostSuccess2, singleResponse.json);\n        assertNull(singleResponse.errorResponse);\n\n        // success3\n        singleResponse = sorted.get(2);\n        assertTrue(singleResponse.isSuccess());\n        assertFalse(singleResponse.isFailure());\n        assertEquals(hostSuccess3, singleResponse.hostId);\n        assertEquals(successUri3, singleResponse.requestUri);\n        assertEquals(successNodeGroup3, singleResponse.nodeGroupUri);\n        assertEquals(jsonForHostSuccess3, singleResponse.json);\n        assertNull(singleResponse.errorResponse);\n\n        // failure\n        List<PeerNodeResult> failures = result.failureResponses;\n        assertEquals(1, failures.size());\n        PeerNodeResult failure = failures.iterator().next();\n        assertTrue(failure.isFailure());\n        assertEquals(hostFailure, failure.hostId);\n        assertEquals(failureUri, failure.requestUri);\n        assertEquals(failureNodeGroup, failure.nodeGroupUri);\n        assertNull(failure.json);\n        assertSame(errorResponse, failure.errorResponse);\n    }", "signature": "void toBroadcastResult()", "full_signature": "@Test public void toBroadcastResult()", "class_method_signature": "TestNodeGroupUtils.toBroadcastResult()", "testcase": true, "constructor": false, "invocations": ["create", "create", "create", "create", "create", "create", "create", "create", "toJson", "toJson", "toJson", "add", "add", "add", "add", "put", "put", "put", "put", "put", "put", "put", "put", "toBroadcastResult", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertTrue", "hasSuccess", "assertTrue", "hasFailure", "assertTrue", "isMajoritySuccess", "assertFalse", "isAllSuccess", "assertFalse", "isAllFailure", "assertFalse", "isMajorityFailure", "assertEquals", "size", "collect", "sorted", "stream", "comparing", "toList", "get", "assertTrue", "isSuccess", "assertFalse", "isFailure", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertNull", "get", "assertTrue", "isSuccess", "assertFalse", "isFailure", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertNull", "get", "assertTrue", "isSuccess", "assertFalse", "isFailure", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertNull", "assertEquals", "size", "next", "iterator", "assertTrue", "isFailure", "assertEquals", "assertEquals", "assertEquals", "assertNull", "assertSame"]}, "focal_class": {"identifier": "NodeGroupUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long OPERATION_TIMEOUT_SECONDS = XenonConfiguration.number(\n            NodeGroupUtils.class,\n            \"operationTimeoutSeconds\",\n            TimeUnit.MICROSECONDS.toSeconds(ServiceHostState.DEFAULT_OPERATION_TIMEOUT_MICROS / 3)\n    );", "modifier": "private static final", "type": "long", "declarator": "OPERATION_TIMEOUT_SECONDS = XenonConfiguration.number(\n            NodeGroupUtils.class,\n            \"operationTimeoutSeconds\",\n            TimeUnit.MICROSECONDS.toSeconds(ServiceHostState.DEFAULT_OPERATION_TIMEOUT_MICROS / 3)\n    )", "var_name": "OPERATION_TIMEOUT_SECONDS"}], "methods": [{"identifier": "NodeGroupUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " NodeGroupUtils()", "full_signature": "private  NodeGroupUtils()", "class_method_signature": "NodeGroupUtils.NodeGroupUtils()", "testcase": false, "constructor": true}, {"identifier": "checkServiceAvailability", "parameters": "(CompletionHandler ch, Service s)", "modifiers": "public static", "return": "void", "signature": "void checkServiceAvailability(CompletionHandler ch, Service s)", "full_signature": "public static void checkServiceAvailability(CompletionHandler ch, Service s)", "class_method_signature": "NodeGroupUtils.checkServiceAvailability(CompletionHandler ch, Service s)", "testcase": false, "constructor": false}, {"identifier": "checkServiceAvailability", "parameters": "(CompletionHandler ch, ServiceHost host,\n            String link, String selectorPath)", "modifiers": "public static", "return": "void", "signature": "void checkServiceAvailability(CompletionHandler ch, ServiceHost host,\n            String link, String selectorPath)", "full_signature": "public static void checkServiceAvailability(CompletionHandler ch, ServiceHost host,\n            String link, String selectorPath)", "class_method_signature": "NodeGroupUtils.checkServiceAvailability(CompletionHandler ch, ServiceHost host,\n            String link, String selectorPath)", "testcase": false, "constructor": false}, {"identifier": "checkServiceAvailability", "parameters": "(CompletionHandler ch, ServiceHost host,\n            URI service,\n            String selectorPath)", "modifiers": "public static", "return": "void", "signature": "void checkServiceAvailability(CompletionHandler ch, ServiceHost host,\n            URI service,\n            String selectorPath)", "full_signature": "public static void checkServiceAvailability(CompletionHandler ch, ServiceHost host,\n            URI service,\n            String selectorPath)", "class_method_signature": "NodeGroupUtils.checkServiceAvailability(CompletionHandler ch, ServiceHost host,\n            URI service,\n            String selectorPath)", "testcase": false, "constructor": false}, {"identifier": "checkConvergenceFromAnyHost", "parameters": "(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "modifiers": "public static", "return": "void", "signature": "void checkConvergenceFromAnyHost(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "full_signature": "public static void checkConvergenceFromAnyHost(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "class_method_signature": "NodeGroupUtils.checkConvergenceFromAnyHost(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "testcase": false, "constructor": false}, {"identifier": "checkConvergence", "parameters": "(ServiceHost host, NodeGroupState ngs, Operation parentOp)", "modifiers": "public static", "return": "void", "signature": "void checkConvergence(ServiceHost host, NodeGroupState ngs, Operation parentOp)", "full_signature": "public static void checkConvergence(ServiceHost host, NodeGroupState ngs, Operation parentOp)", "class_method_signature": "NodeGroupUtils.checkConvergence(ServiceHost host, NodeGroupState ngs, Operation parentOp)", "testcase": false, "constructor": false}, {"identifier": "checkConvergenceAcrossPeers", "parameters": "(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "modifiers": "private static", "return": "void", "signature": "void checkConvergenceAcrossPeers(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "full_signature": "private static void checkConvergenceAcrossPeers(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "class_method_signature": "NodeGroupUtils.checkConvergenceAcrossPeers(ServiceHost host, NodeGroupState ngs,\n            Operation parentOp)", "testcase": false, "constructor": false}, {"identifier": "checkConvergence", "parameters": "(ServiceHost host, URI nodegroupReference, Operation parentOp)", "modifiers": "public static", "return": "void", "signature": "void checkConvergence(ServiceHost host, URI nodegroupReference, Operation parentOp)", "full_signature": "public static void checkConvergence(ServiceHost host, URI nodegroupReference, Operation parentOp)", "class_method_signature": "NodeGroupUtils.checkConvergence(ServiceHost host, URI nodegroupReference, Operation parentOp)", "testcase": false, "constructor": false}, {"identifier": "isMembershipSettled", "parameters": "(ServiceHost host, long maintIntervalMicros,\n            NodeGroupState localState)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMembershipSettled(ServiceHost host, long maintIntervalMicros,\n            NodeGroupState localState)", "full_signature": "public static boolean isMembershipSettled(ServiceHost host, long maintIntervalMicros,\n            NodeGroupState localState)", "class_method_signature": "NodeGroupUtils.isMembershipSettled(ServiceHost host, long maintIntervalMicros,\n            NodeGroupState localState)", "testcase": false, "constructor": false}, {"identifier": "hasMembershipQuorum", "parameters": "(ServiceHost host, NodeGroupState ngs)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasMembershipQuorum(ServiceHost host, NodeGroupState ngs)", "full_signature": "public static boolean hasMembershipQuorum(ServiceHost host, NodeGroupState ngs)", "class_method_signature": "NodeGroupUtils.hasMembershipQuorum(ServiceHost host, NodeGroupState ngs)", "testcase": false, "constructor": false}, {"identifier": "isNodeGroupAvailable", "parameters": "(ServiceHost host, NodeGroupState localState)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNodeGroupAvailable(ServiceHost host, NodeGroupState localState)", "full_signature": "public static boolean isNodeGroupAvailable(ServiceHost host, NodeGroupState localState)", "class_method_signature": "NodeGroupUtils.isNodeGroupAvailable(ServiceHost host, NodeGroupState localState)", "testcase": false, "constructor": false}, {"identifier": "registerForReplicatedServiceAvailability", "parameters": "(ServiceHost host, Operation op,\n            String servicePath, String nodeSelectorPath)", "modifiers": "public static", "return": "void", "signature": "void registerForReplicatedServiceAvailability(ServiceHost host, Operation op,\n            String servicePath, String nodeSelectorPath)", "full_signature": "public static void registerForReplicatedServiceAvailability(ServiceHost host, Operation op,\n            String servicePath, String nodeSelectorPath)", "class_method_signature": "NodeGroupUtils.registerForReplicatedServiceAvailability(ServiceHost host, Operation op,\n            String servicePath, String nodeSelectorPath)", "testcase": false, "constructor": false}, {"identifier": "toBroadcastResult", "parameters": "(NodeGroupBroadcastResponse response)", "modifiers": "public static", "return": "NodeGroupBroadcastResult", "signature": "NodeGroupBroadcastResult toBroadcastResult(NodeGroupBroadcastResponse response)", "full_signature": "public static NodeGroupBroadcastResult toBroadcastResult(NodeGroupBroadcastResponse response)", "class_method_signature": "NodeGroupUtils.toBroadcastResult(NodeGroupBroadcastResponse response)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/services/common/NodeGroupUtils.java"}, "focal_method": {"identifier": "toBroadcastResult", "parameters": "(NodeGroupBroadcastResponse response)", "modifiers": "public static", "return": "NodeGroupBroadcastResult", "body": "public static NodeGroupBroadcastResult toBroadcastResult(NodeGroupBroadcastResponse response) {\n        NodeGroupBroadcastResult result = new NodeGroupBroadcastResult();\n\n        result.totalNodeCount = response.nodeCount;\n        result.availableNodeCount = response.availableNodeCount;\n        result.unavailableNodeCount = response.nodeCount - response.availableNodeCount;\n        result.membershipQuorum = response.membershipQuorum;\n\n\n        // entry example: \"http://127.0.0.1:8000\" => \"host1\"\n        Map<URI, String> hostIdByUrl = response.selectedNodes.entrySet().stream()\n                .collect(toMap(entry -> {\n                    URI uri = entry.getValue();\n                    return URI.create(uri.toString().replace(uri.getPath(), \"\"));\n                }, Map.Entry::getKey));\n\n        // for successful responses\n        for (Entry<URI, String> entry : response.jsonResponses.entrySet()) {\n            PeerNodeResult singleResult = new PeerNodeResult();\n            URI requestUri = entry.getKey();\n            String json = entry.getValue();\n\n            URI hostUri = URI.create(requestUri.toString().replace(requestUri.getPath(), \"\"));\n            String hostId = hostIdByUrl.get(hostUri);\n            URI nodeGroupUri = response.selectedNodes.get(hostId);\n\n            singleResult.requestUri = requestUri;\n            singleResult.hostId = hostId;\n            singleResult.nodeGroupUri = nodeGroupUri;\n            singleResult.json = json;\n            singleResult.errorResponse = null;\n\n            result.allResponses.add(singleResult);\n            result.successResponses.add(singleResult);\n        }\n\n        // for failure responses\n        for (Entry<URI, ServiceErrorResponse> entry : response.failures.entrySet()) {\n            PeerNodeResult singleResult = new PeerNodeResult();\n            URI requestUri = entry.getKey();\n            ServiceErrorResponse errorResponse = entry.getValue();\n\n            URI hostUri = URI.create(requestUri.toString().replace(requestUri.getPath(), \"\"));\n            String hostId = hostIdByUrl.get(hostUri);\n            URI nodeGroupUri = response.selectedNodes.get(hostId);\n\n            singleResult.requestUri = requestUri;\n            singleResult.hostId = hostId;\n            singleResult.nodeGroupUri = nodeGroupUri;\n            singleResult.json = null;\n            singleResult.errorResponse = errorResponse;\n\n            result.allResponses.add(singleResult);\n            result.failureResponses.add(singleResult);\n            result.failureErrorResponses.add(errorResponse);\n        }\n\n        return result;\n    }", "signature": "NodeGroupBroadcastResult toBroadcastResult(NodeGroupBroadcastResponse response)", "full_signature": "public static NodeGroupBroadcastResult toBroadcastResult(NodeGroupBroadcastResponse response)", "class_method_signature": "NodeGroupUtils.toBroadcastResult(NodeGroupBroadcastResponse response)", "testcase": false, "constructor": false, "invocations": ["collect", "stream", "entrySet", "toMap", "getValue", "create", "replace", "toString", "getPath", "entrySet", "getKey", "getValue", "create", "replace", "toString", "getPath", "get", "get", "add", "add", "entrySet", "getKey", "getValue", "create", "replace", "toString", "getPath", "get", "get", "add", "add", "add"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}