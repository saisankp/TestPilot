{"test_class": {"identifier": "TeamServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TeamServiceTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TeamServiceTest.class)", "var_name": "LOG"}, {"original_string": "TeamService teamService = new TeamService();", "modifier": "", "type": "TeamService", "declarator": "teamService = new TeamService()", "var_name": "teamService"}], "file": "submarine-server/server-core/src/test/java/org/apache/submarine/server/workbench/database/service/TeamServiceTest.java"}, "test_case": {"identifier": "delete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void delete() throws Exception {\n    TeamMember teamMember = new TeamMember();\n    teamMember.setTeamName(\"submarine\");\n    teamMember.setInviter(0);\n    teamMember.setMember(\"admin\");\n    teamMember.setCreateBy(\"createByteamMember\");\n\n    Team team = new Team();\n    team.setTeamName(\"submarine\");\n    team.setOwner(\"test_sub\");\n    team.setCreateBy(\"createByteam\");\n    List list = new ArrayList<TeamMember>();\n    list.add(teamMember);\n    team.setCollaborators(list);\n    Boolean ret = teamService.add(team);\n    assertTrue(ret);\n\n    Boolean deleteRet = teamService.delete(team.getId());\n    assertTrue(deleteRet);\n\n    List<Team> teamList = teamService.queryPageList(\"test_sub\",\n        \"create_time\", \"desc\", 0, 100);\n    assertEquals(teamList.size(), 0);\n\n    TeamMemberService teamMemberService = new TeamMemberService();\n    List<TeamMember> teamMemberList = teamMemberService.queryList(team.getId());\n    assertEquals(teamMemberList.size(), 0);\n  }", "signature": "void delete()", "full_signature": "@Test public void delete()", "class_method_signature": "TeamServiceTest.delete()", "testcase": true, "constructor": false, "invocations": ["setTeamName", "setInviter", "setMember", "setCreateBy", "setTeamName", "setOwner", "setCreateBy", "add", "setCollaborators", "add", "assertTrue", "delete", "getId", "assertTrue", "queryPageList", "assertEquals", "size", "queryList", "getId", "assertEquals", "size"]}, "focal_class": {"identifier": "TeamService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TeamService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TeamService.class)", "var_name": "LOG"}], "methods": [{"identifier": "queryPageList", "parameters": "(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "modifiers": "public", "return": "List<Team>", "signature": "List<Team> queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "full_signature": "public List<Team> queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "class_method_signature": "TeamService.queryPageList(String owner,\n                                  String column,\n                                  String order,\n                                  int pageNo,\n                                  int pageSize)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Team team)", "modifiers": "public", "return": "boolean", "signature": "boolean add(Team team)", "full_signature": "public boolean add(Team team)", "class_method_signature": "TeamService.add(Team team)", "testcase": false, "constructor": false}, {"identifier": "updateByPrimaryKeySelective", "parameters": "(Team team)", "modifiers": "public", "return": "boolean", "signature": "boolean updateByPrimaryKeySelective(Team team)", "full_signature": "public boolean updateByPrimaryKeySelective(Team team)", "class_method_signature": "TeamService.updateByPrimaryKeySelective(Team team)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(String id)", "full_signature": "public boolean delete(String id)", "class_method_signature": "TeamService.delete(String id)", "testcase": false, "constructor": false}], "file": "submarine-server/server-core/src/main/java/org/apache/submarine/server/workbench/database/service/TeamService.java"}, "focal_method": {"identifier": "delete", "parameters": "(String id)", "modifiers": "public", "return": "boolean", "body": "public boolean delete(String id) throws Exception {\n    LOG.info(\"delete({})\", id);\n    try (SqlSession sqlSession = MyBatisUtil.getSqlSession()) {\n      TeamMapper teamMapper = sqlSession.getMapper(TeamMapper.class);\n      teamMapper.deleteByPrimaryKey(id);\n\n      TeamMemberMapper teamMemberMapper = sqlSession.getMapper(TeamMemberMapper.class);\n      TeamMember teamMember = new TeamMember();\n      teamMember.setTeamId(id);\n      teamMemberMapper.deleteSelective(teamMember);\n      sqlSession.commit();\n    } catch (Exception e) {\n      LOG.error(e.getMessage(), e);\n      throw new Exception(e);\n    }\n    return true;\n  }", "signature": "boolean delete(String id)", "full_signature": "public boolean delete(String id)", "class_method_signature": "TeamService.delete(String id)", "testcase": false, "constructor": false, "invocations": ["info", "getSqlSession", "getMapper", "deleteByPrimaryKey", "getMapper", "setTeamId", "deleteSelective", "commit", "error", "getMessage"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}