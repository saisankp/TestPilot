{"test_class": {"identifier": "CharUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/CharUtilTest.java"}, "test_case": {"identifier": "toAscii", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toAscii() {\n        assertEquals(0x3F, CharUtil.toAscii('\u4f60'));\n        assertEquals(0x3F, CharUtil.toAscii('\u6211'));\n\n        assertEquals(48, CharUtil.toAscii('0'));\n\n        assertEquals(9, CharUtil.toAscii('9') - CharUtil.toAscii('0'));\n    }", "signature": "void toAscii()", "full_signature": "@Test public void toAscii()", "class_method_signature": "CharUtilTest.toAscii()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toAscii", "assertEquals", "toAscii", "assertEquals", "toAscii", "assertEquals", "toAscii", "toAscii"]}, "focal_class": {"identifier": "CharUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CHAR_STRING = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\"\n            + \"\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\" + \"\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\"\n            + \"\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f\" + \"\\u0020\\u0021\\\"\\u0023\\u0024\\u0025\\u0026\\u0027\"\n            + \"\\u0028\\u0029\\u002a\\u002b\\u002c\\u002d\\u002e\\u002f\" + \"\\u0030\\u0031\\u0032\\u0033\\u0034\\u0035\\u0036\\u0037\"\n            + \"\\u0038\\u0039\\u003a\\u003b\\u003c\\u003d\\u003e\\u003f\" + \"\\u0040\\u0041\\u0042\\u0043\\u0044\\u0045\\u0046\\u0047\"\n            + \"\\u0048\\u0049\\u004a\\u004b\\u004c\\u004d\\u004e\\u004f\" + \"\\u0050\\u0051\\u0052\\u0053\\u0054\\u0055\\u0056\\u0057\"\n            + \"\\u0058\\u0059\\u005a\\u005b\\\\\\u005d\\u005e\\u005f\" + \"\\u0060\\u0061\\u0062\\u0063\\u0064\\u0065\\u0066\\u0067\"\n            + \"\\u0068\\u0069\\u006a\\u006b\\u006c\\u006d\\u006e\\u006f\" + \"\\u0070\\u0071\\u0072\\u0073\\u0074\\u0075\\u0076\\u0077\"\n            + \"\\u0078\\u0079\\u007a\\u007b\\u007c\\u007d\\u007e\\u007f\";", "modifier": "private static final", "type": "String", "declarator": "CHAR_STRING = \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\"\n            + \"\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\" + \"\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\"\n            + \"\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f\" + \"\\u0020\\u0021\\\"\\u0023\\u0024\\u0025\\u0026\\u0027\"\n            + \"\\u0028\\u0029\\u002a\\u002b\\u002c\\u002d\\u002e\\u002f\" + \"\\u0030\\u0031\\u0032\\u0033\\u0034\\u0035\\u0036\\u0037\"\n            + \"\\u0038\\u0039\\u003a\\u003b\\u003c\\u003d\\u003e\\u003f\" + \"\\u0040\\u0041\\u0042\\u0043\\u0044\\u0045\\u0046\\u0047\"\n            + \"\\u0048\\u0049\\u004a\\u004b\\u004c\\u004d\\u004e\\u004f\" + \"\\u0050\\u0051\\u0052\\u0053\\u0054\\u0055\\u0056\\u0057\"\n            + \"\\u0058\\u0059\\u005a\\u005b\\\\\\u005d\\u005e\\u005f\" + \"\\u0060\\u0061\\u0062\\u0063\\u0064\\u0065\\u0066\\u0067\"\n            + \"\\u0068\\u0069\\u006a\\u006b\\u006c\\u006d\\u006e\\u006f\" + \"\\u0070\\u0071\\u0072\\u0073\\u0074\\u0075\\u0076\\u0077\"\n            + \"\\u0078\\u0079\\u007a\\u007b\\u007c\\u007d\\u007e\\u007f\"", "var_name": "CHAR_STRING"}, {"original_string": "private static final String[] CHAR_STRING_ARRAY = new String[128];", "modifier": "private static final", "type": "String[]", "declarator": "CHAR_STRING_ARRAY = new String[128]", "var_name": "CHAR_STRING_ARRAY"}, {"original_string": "private static final Character[] CHAR_ARRAY = new Character[128];", "modifier": "private static final", "type": "Character[]", "declarator": "CHAR_ARRAY = new Character[128]", "var_name": "CHAR_ARRAY"}], "methods": [{"identifier": "toAscii", "parameters": "(char ch)", "modifiers": "public static", "return": "int", "signature": "int toAscii(char ch)", "full_signature": "public static int toAscii(char ch)", "class_method_signature": "CharUtil.toAscii(char ch)", "testcase": false, "constructor": false}, {"identifier": "isWhitespace", "parameters": "(char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWhitespace(char ch)", "full_signature": "public static boolean isWhitespace(char ch)", "class_method_signature": "CharUtil.isWhitespace(char ch)", "testcase": false, "constructor": false}, {"identifier": "toCharacterObject", "parameters": "(char ch)", "modifiers": "public static", "return": "Character", "signature": "Character toCharacterObject(char ch)", "full_signature": "public static Character toCharacterObject(char ch)", "class_method_signature": "CharUtil.toCharacterObject(char ch)", "testcase": false, "constructor": false}, {"identifier": "toCharacterObject", "parameters": "(String str)", "modifiers": "public static", "return": "Character", "signature": "Character toCharacterObject(String str)", "full_signature": "public static Character toCharacterObject(String str)", "class_method_signature": "CharUtil.toCharacterObject(String str)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(byte b)", "modifiers": "public static", "return": "char", "signature": "char toChar(byte b)", "full_signature": "public static char toChar(byte b)", "class_method_signature": "CharUtil.toChar(byte b)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(Character ch)", "modifiers": "public static", "return": "char", "signature": "char toChar(Character ch)", "full_signature": "public static char toChar(Character ch)", "class_method_signature": "CharUtil.toChar(Character ch)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(Character ch, char defaultValue)", "modifiers": "public static", "return": "char", "signature": "char toChar(Character ch, char defaultValue)", "full_signature": "public static char toChar(Character ch, char defaultValue)", "class_method_signature": "CharUtil.toChar(Character ch, char defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(String str)", "modifiers": "public static", "return": "char", "signature": "char toChar(String str)", "full_signature": "public static char toChar(String str)", "class_method_signature": "CharUtil.toChar(String str)", "testcase": false, "constructor": false}, {"identifier": "toChar", "parameters": "(String str, char defaultValue)", "modifiers": "public static", "return": "char", "signature": "char toChar(String str, char defaultValue)", "full_signature": "public static char toChar(String str, char defaultValue)", "class_method_signature": "CharUtil.toChar(String str, char defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toIntValue", "parameters": "(char ch)", "modifiers": "public static", "return": "int", "signature": "int toIntValue(char ch)", "full_signature": "public static int toIntValue(char ch)", "class_method_signature": "CharUtil.toIntValue(char ch)", "testcase": false, "constructor": false}, {"identifier": "toIntValue", "parameters": "(char ch, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int toIntValue(char ch, int defaultValue)", "full_signature": "public static int toIntValue(char ch, int defaultValue)", "class_method_signature": "CharUtil.toIntValue(char ch, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toIntValue", "parameters": "(Character ch)", "modifiers": "public static", "return": "int", "signature": "int toIntValue(Character ch)", "full_signature": "public static int toIntValue(Character ch)", "class_method_signature": "CharUtil.toIntValue(Character ch)", "testcase": false, "constructor": false}, {"identifier": "toIntValue", "parameters": "(Character ch, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int toIntValue(Character ch, int defaultValue)", "full_signature": "public static int toIntValue(Character ch, int defaultValue)", "class_method_signature": "CharUtil.toIntValue(Character ch, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(char ch)", "modifiers": "public static", "return": "String", "signature": "String toString(char ch)", "full_signature": "public static String toString(char ch)", "class_method_signature": "CharUtil.toString(char ch)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Character ch)", "modifiers": "public static", "return": "String", "signature": "String toString(Character ch)", "full_signature": "public static String toString(Character ch)", "class_method_signature": "CharUtil.toString(Character ch)", "testcase": false, "constructor": false}, {"identifier": "unicodeEscaped", "parameters": "(char ch)", "modifiers": "public static", "return": "String", "signature": "String unicodeEscaped(char ch)", "full_signature": "public static String unicodeEscaped(char ch)", "class_method_signature": "CharUtil.unicodeEscaped(char ch)", "testcase": false, "constructor": false}, {"identifier": "unicodeEscaped", "parameters": "(Character ch)", "modifiers": "public static", "return": "String", "signature": "String unicodeEscaped(Character ch)", "full_signature": "public static String unicodeEscaped(Character ch)", "class_method_signature": "CharUtil.unicodeEscaped(Character ch)", "testcase": false, "constructor": false}, {"identifier": "toSimpleByteArray", "parameters": "(char[] carr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toSimpleByteArray(char[] carr)", "full_signature": "public static byte[] toSimpleByteArray(char[] carr)", "class_method_signature": "CharUtil.toSimpleByteArray(char[] carr)", "testcase": false, "constructor": false}, {"identifier": "toSimpleByteArray", "parameters": "(CharSequence charSequence)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toSimpleByteArray(CharSequence charSequence)", "full_signature": "public static byte[] toSimpleByteArray(CharSequence charSequence)", "class_method_signature": "CharUtil.toSimpleByteArray(CharSequence charSequence)", "testcase": false, "constructor": false}, {"identifier": "toSimpleCharArray", "parameters": "(byte[] barr)", "modifiers": "public static", "return": "char[]", "signature": "char[] toSimpleCharArray(byte[] barr)", "full_signature": "public static char[] toSimpleCharArray(byte[] barr)", "class_method_signature": "CharUtil.toSimpleCharArray(byte[] barr)", "testcase": false, "constructor": false}, {"identifier": "toAsciiByteArray", "parameters": "(char[] carr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toAsciiByteArray(char[] carr)", "full_signature": "public static byte[] toAsciiByteArray(char[] carr)", "class_method_signature": "CharUtil.toAsciiByteArray(char[] carr)", "testcase": false, "constructor": false}, {"identifier": "toAsciiByteArray", "parameters": "(CharSequence charSequence)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toAsciiByteArray(CharSequence charSequence)", "full_signature": "public static byte[] toAsciiByteArray(CharSequence charSequence)", "class_method_signature": "CharUtil.toAsciiByteArray(CharSequence charSequence)", "testcase": false, "constructor": false}, {"identifier": "toRawByteArray", "parameters": "(char[] carr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toRawByteArray(char[] carr)", "full_signature": "public static byte[] toRawByteArray(char[] carr)", "class_method_signature": "CharUtil.toRawByteArray(char[] carr)", "testcase": false, "constructor": false}, {"identifier": "toRawCharArray", "parameters": "(byte[] barr)", "modifiers": "public static", "return": "char[]", "signature": "char[] toRawCharArray(byte[] barr)", "full_signature": "public static char[] toRawCharArray(byte[] barr)", "class_method_signature": "CharUtil.toRawCharArray(byte[] barr)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(char[] carr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(char[] carr)", "full_signature": "public static byte[] toByteArray(char[] carr)", "class_method_signature": "CharUtil.toByteArray(char[] carr)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(char[] carr, String charset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(char[] carr, String charset)", "full_signature": "public static byte[] toByteArray(char[] carr, String charset)", "class_method_signature": "CharUtil.toByteArray(char[] carr, String charset)", "testcase": false, "constructor": false}, {"identifier": "toCharArray", "parameters": "(byte[] barr)", "modifiers": "public static", "return": "char[]", "signature": "char[] toCharArray(byte[] barr)", "full_signature": "public static char[] toCharArray(byte[] barr)", "class_method_signature": "CharUtil.toCharArray(byte[] barr)", "testcase": false, "constructor": false}, {"identifier": "toCharArray", "parameters": "(byte[] barr, String charset)", "modifiers": "public static", "return": "char[]", "signature": "char[] toCharArray(byte[] barr, String charset)", "full_signature": "public static char[] toCharArray(byte[] barr, String charset)", "class_method_signature": "CharUtil.toCharArray(byte[] barr, String charset)", "testcase": false, "constructor": false}, {"identifier": "equalsOne", "parameters": "(char c, char[] match)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsOne(char c, char[] match)", "full_signature": "public static boolean equalsOne(char c, char[] match)", "class_method_signature": "CharUtil.equalsOne(char c, char[] match)", "testcase": false, "constructor": false}, {"identifier": "findFirstEqual", "parameters": "(char[] source, int index, char[] match)", "modifiers": "public static", "return": "int", "signature": "int findFirstEqual(char[] source, int index, char[] match)", "full_signature": "public static int findFirstEqual(char[] source, int index, char[] match)", "class_method_signature": "CharUtil.findFirstEqual(char[] source, int index, char[] match)", "testcase": false, "constructor": false}, {"identifier": "findFirstEqual", "parameters": "(char[] source, int index, char match)", "modifiers": "public static", "return": "int", "signature": "int findFirstEqual(char[] source, int index, char match)", "full_signature": "public static int findFirstEqual(char[] source, int index, char match)", "class_method_signature": "CharUtil.findFirstEqual(char[] source, int index, char match)", "testcase": false, "constructor": false}, {"identifier": "findFirstDiff", "parameters": "(char[] source, int index, char[] match)", "modifiers": "public static", "return": "int", "signature": "int findFirstDiff(char[] source, int index, char[] match)", "full_signature": "public static int findFirstDiff(char[] source, int index, char[] match)", "class_method_signature": "CharUtil.findFirstDiff(char[] source, int index, char[] match)", "testcase": false, "constructor": false}, {"identifier": "findFirstDiff", "parameters": "(char[] source, int index, char match)", "modifiers": "public static", "return": "int", "signature": "int findFirstDiff(char[] source, int index, char match)", "full_signature": "public static int findFirstDiff(char[] source, int index, char match)", "class_method_signature": "CharUtil.findFirstDiff(char[] source, int index, char match)", "testcase": false, "constructor": false}, {"identifier": "isLowercaseLetter", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLowercaseLetter(char c)", "full_signature": "public static boolean isLowercaseLetter(char c)", "class_method_signature": "CharUtil.isLowercaseLetter(char c)", "testcase": false, "constructor": false}, {"identifier": "isUppercaseLetter", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUppercaseLetter(char c)", "full_signature": "public static boolean isUppercaseLetter(char c)", "class_method_signature": "CharUtil.isUppercaseLetter(char c)", "testcase": false, "constructor": false}, {"identifier": "isLetter", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLetter(char c)", "full_signature": "public static boolean isLetter(char c)", "class_method_signature": "CharUtil.isLetter(char c)", "testcase": false, "constructor": false}, {"identifier": "isDigit", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigit(char c)", "full_signature": "public static boolean isDigit(char c)", "class_method_signature": "CharUtil.isDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "isLetterOrDigit", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isLetterOrDigit(char c)", "full_signature": "public static boolean isLetterOrDigit(char c)", "class_method_signature": "CharUtil.isLetterOrDigit(char c)", "testcase": false, "constructor": false}, {"identifier": "isWordChar", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWordChar(char c)", "full_signature": "public static boolean isWordChar(char c)", "class_method_signature": "CharUtil.isWordChar(char c)", "testcase": false, "constructor": false}, {"identifier": "isPropertyNameChar", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPropertyNameChar(char c)", "full_signature": "public static boolean isPropertyNameChar(char c)", "class_method_signature": "CharUtil.isPropertyNameChar(char c)", "testcase": false, "constructor": false}, {"identifier": "isAscii", "parameters": "(char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAscii(char ch)", "full_signature": "public static boolean isAscii(char ch)", "class_method_signature": "CharUtil.isAscii(char ch)", "testcase": false, "constructor": false}, {"identifier": "isAsciiPrintable", "parameters": "(char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsciiPrintable(char ch)", "full_signature": "public static boolean isAsciiPrintable(char ch)", "class_method_signature": "CharUtil.isAsciiPrintable(char ch)", "testcase": false, "constructor": false}, {"identifier": "isAsciiControl", "parameters": "(char ch)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAsciiControl(char ch)", "full_signature": "public static boolean isAsciiControl(char ch)", "class_method_signature": "CharUtil.isAsciiControl(char ch)", "testcase": false, "constructor": false}, {"identifier": "isChinese", "parameters": "(char c)", "modifiers": "public static", "return": "boolean", "signature": "boolean isChinese(char c)", "full_signature": "public static boolean isChinese(char c)", "class_method_signature": "CharUtil.isChinese(char c)", "testcase": false, "constructor": false}, {"identifier": "toUpperAscii", "parameters": "(char c)", "modifiers": "public static", "return": "char", "signature": "char toUpperAscii(char c)", "full_signature": "public static char toUpperAscii(char c)", "class_method_signature": "CharUtil.toUpperAscii(char c)", "testcase": false, "constructor": false}, {"identifier": "toLowerAscii", "parameters": "(char c)", "modifiers": "public static", "return": "char", "signature": "char toLowerAscii(char c)", "full_signature": "public static char toLowerAscii(char c)", "class_method_signature": "CharUtil.toLowerAscii(char c)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/CharUtil.java"}, "focal_method": {"identifier": "toAscii", "parameters": "(char ch)", "modifiers": "public static", "return": "int", "body": "public static int toAscii(char ch) {\n        if (ch <= 0xFF) {\n            return ch;\n        }\n        return 0x3F;\n    }", "signature": "int toAscii(char ch)", "full_signature": "public static int toAscii(char ch)", "class_method_signature": "CharUtil.toAscii(char ch)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}