{"test_class": {"identifier": "PerturbedAtomHashGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/PerturbedAtomHashGeneratorTest.java"}, "test_case": {"identifier": "testGenerate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerate() throws Exception {\n\n        IAtomContainer m1 = cyclopentylcyclopentane();\n        IAtomContainer m2 = decahydronaphthalene();\n\n        SeedGenerator seeding = new SeedGenerator(BasicAtomEncoder.ATOMIC_NUMBER);\n        Pseudorandom pseudorandom = new Xorshift();\n\n        MoleculeHashGenerator basic = new BasicMoleculeHashGenerator(new BasicAtomHashGenerator(seeding, pseudorandom,\n                8));\n        MoleculeHashGenerator perturb = new BasicMoleculeHashGenerator(new PerturbedAtomHashGenerator(seeding,\n                new BasicAtomHashGenerator(seeding, pseudorandom, 8), pseudorandom, StereoEncoderFactory.EMPTY,\n                new MinimumEquivalentCyclicSet(), AtomSuppression.unsuppressed()));\n        // basic encoding should say these are the same\n        assertThat(basic.generate(m1), is(basic.generate(m2)));\n\n        // perturbed encoding should differentiate them\n        assertThat(perturb.generate(m1), is(not(perturb.generate(m2))));\n\n    }", "signature": "void testGenerate()", "full_signature": "@Test public void testGenerate()", "class_method_signature": "PerturbedAtomHashGeneratorTest.testGenerate()", "testcase": true, "constructor": false, "invocations": ["cyclopentylcyclopentane", "decahydronaphthalene", "unsuppressed", "assertThat", "generate", "is", "generate", "assertThat", "generate", "is", "not", "generate"]}, "focal_class": {"identifier": "PerturbedAtomHashGenerator", "superclass": "extends AbstractHashGenerator", "interfaces": "implements AtomHashGenerator", "fields": [{"original_string": "private final StereoEncoderFactory      factory;", "modifier": "private final", "type": "StereoEncoderFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final AbstractAtomHashGenerator simple;", "modifier": "private final", "type": "AbstractAtomHashGenerator", "declarator": "simple", "var_name": "simple"}, {"original_string": "private final AtomHashGenerator         seeds;", "modifier": "private final", "type": "AtomHashGenerator", "declarator": "seeds", "var_name": "seeds"}, {"original_string": "private final EquivalentSetFinder       finder;", "modifier": "private final", "type": "EquivalentSetFinder", "declarator": "finder", "var_name": "finder"}, {"original_string": "private final AtomSuppression           suppression;", "modifier": "private final", "type": "AtomSuppression", "declarator": "suppression", "var_name": "suppression"}], "methods": [{"identifier": "PerturbedAtomHashGenerator", "parameters": "(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "modifiers": "public", "return": "", "signature": " PerturbedAtomHashGenerator(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "full_signature": "public  PerturbedAtomHashGenerator(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "class_method_signature": "PerturbedAtomHashGenerator.PerturbedAtomHashGenerator(SeedGenerator seeds, AbstractAtomHashGenerator simple, Pseudorandom pseudorandom,\n            StereoEncoderFactory factory, EquivalentSetFinder finder, AtomSuppression suppression)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "PerturbedAtomHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "modifiers": "private", "return": "long[]", "signature": "long[] generate(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "full_signature": "private long[] generate(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "class_method_signature": "PerturbedAtomHashGenerator.generate(IAtomContainer container, long[] seeds, StereoEncoder encoder, int[][] graph)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(long[][] perturbed)", "modifiers": "", "return": "long[]", "signature": "long[] combine(long[][] perturbed)", "full_signature": " long[] combine(long[][] perturbed)", "class_method_signature": "PerturbedAtomHashGenerator.combine(long[][] perturbed)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/PerturbedAtomHashGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "long[]", "body": "@Override\n    public long[] generate(IAtomContainer container) {\n        int[][] graph = toAdjList(container);\n        return generate(container, seeds.generate(container), factory.create(container, graph), graph);\n    }", "signature": "long[] generate(IAtomContainer container)", "full_signature": "@Override public long[] generate(IAtomContainer container)", "class_method_signature": "PerturbedAtomHashGenerator.generate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["toAdjList", "generate", "generate", "create"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}