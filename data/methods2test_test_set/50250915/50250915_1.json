{"test_class": {"identifier": "ResourceCacheControlTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResourceCacheControl resourceCacheControl;", "modifier": "private", "type": "ResourceCacheControl", "declarator": "resourceCacheControl", "var_name": "resourceCacheControl"}, {"original_string": "private HttpServletRequest servletRequest;", "modifier": "private", "type": "HttpServletRequest", "declarator": "servletRequest", "var_name": "servletRequest"}, {"original_string": "private HttpServletResponse servletResponse;", "modifier": "private", "type": "HttpServletResponse", "declarator": "servletResponse", "var_name": "servletResponse"}, {"original_string": "private FilterChain filterChain;", "modifier": "private", "type": "FilterChain", "declarator": "filterChain", "var_name": "filterChain"}], "file": "blueocean-web/src/test/java/io/jenkins/blueocean/ResourceCacheControlTest.java"}, "test_case": {"identifier": "test_cache_control_set", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_cache_control_set() throws IOException, ServletException {\n        Mockito.when(servletRequest.getPathInfo()).thenReturn(\"/a/b/c.js\");\n        resourceCacheControl.doFilter(servletRequest, servletResponse, filterChain);\n        Mockito.verify(servletResponse).setHeader(\"Cache-Control\", \"public, max-age=31536000\");\n    }", "signature": "void test_cache_control_set()", "full_signature": "@Test public void test_cache_control_set()", "class_method_signature": "ResourceCacheControlTest.test_cache_control_set()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getPathInfo", "doFilter", "setHeader", "verify"]}, "focal_class": {"identifier": "ResourceCacheControl", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static ResourceCacheControl INSTANCE;", "modifier": "private static", "type": "ResourceCacheControl", "declarator": "INSTANCE", "var_name": "INSTANCE"}, {"original_string": "private final List<String> resourcePrefixes = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "resourcePrefixes = new ArrayList<>()", "var_name": "resourcePrefixes"}], "methods": [{"identifier": "ResourceCacheControl", "parameters": "()", "modifiers": "", "return": "", "signature": " ResourceCacheControl()", "full_signature": "  ResourceCacheControl()", "class_method_signature": "ResourceCacheControl.ResourceCacheControl()", "testcase": false, "constructor": true}, {"identifier": "addPath", "parameters": "(String path)", "modifiers": "", "return": "String", "signature": "String addPath(String path)", "full_signature": " String addPath(String path)", "class_method_signature": "ResourceCacheControl.addPath(String path)", "testcase": false, "constructor": false}, {"identifier": "install", "parameters": "()", "modifiers": "public static synchronized", "return": "void", "signature": "void install()", "full_signature": "public static synchronized void install()", "class_method_signature": "ResourceCacheControl.install()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FilterConfig filterConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(FilterConfig filterConfig)", "full_signature": "@Override public void init(FilterConfig filterConfig)", "class_method_signature": "ResourceCacheControl.init(FilterConfig filterConfig)", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "ResourceCacheControl.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "isCacheableResourceRequest", "parameters": "(HttpServletRequest request)", "modifiers": "", "return": "boolean", "signature": "boolean isCacheableResourceRequest(HttpServletRequest request)", "full_signature": " boolean isCacheableResourceRequest(HttpServletRequest request)", "class_method_signature": "ResourceCacheControl.isCacheableResourceRequest(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ResourceCacheControl.destroy()", "testcase": false, "constructor": false}], "file": "blueocean-web/src/main/java/io/jenkins/blueocean/ResourceCacheControl.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        // Check the request path and set the cache-control header if we find\n        // it matches what we're looking for.\n        if (request instanceof HttpServletRequest) {\n            if (isCacheableResourceRequest((HttpServletRequest)request)) {\n                HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n\n                //\n                // Set the expiry to one year.\n                //\n                // Note that this does NOT mean that the browser will never send a request\n                // for these resources. If you click reload in the browser (def in Chrome) it will\n                // send an If-Modified-Since request to the server (at a minimum), which means you at\n                // least have the request overhead even if it results in a 304 response. Setting the\n                // Cache-Control header helps for normal browsing (clicking on links, bookmarks etc),\n                // in which case the local cache is fully used (no If-Modified-Since requests for\n                // non-stale resources).\n                //\n                httpServletResponse.setHeader(\"Cache-Control\", \"public, max-age=31536000\");\n                response = new HttpServletResponseWrapper(httpServletResponse) {\n                    @Override\n                    public void setHeader(String name, String value) {\n                        // Block the setting of the legacy HTTP/1.0 \"Expires\" header.\n                        // Note that, strictly speaking, this should not be required because\n                        // the HTTP spec dictates that the Cache-Control header takes priority.\n                        // Lets eliminate it anyway in case a browser/intermediary doesn't comply.\n                        if (!name.equalsIgnoreCase(\"Expires\")) {\n                            super.setHeader(name, value);\n                        }\n                    }\n                };\n            }\n        }\n        // continue to execute the filer chain as normal\n        chain.doFilter(request, response);\n    }", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "ResourceCacheControl.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false, "invocations": ["isCacheableResourceRequest", "setHeader", "equalsIgnoreCase", "setHeader", "doFilter"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}