{"test_class": {"identifier": "ImplicitToExplicitTest", "superclass": "", "interfaces": "", "fields": [], "file": "func/src/test/java/uk/ac/ebi/beam/ImplicitToExplicitTest.java"}, "test_case": {"identifier": "toExplicitEdge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void toExplicitEdge() {\n        Graph g = new Graph(2);\n\n        Atom u = Mockito.mock(Atom.class);\n        Atom v = Mockito.mock(Atom.class);\n\n        Mockito.when(u.aromatic()).thenReturn(false);\n        Mockito.when(v.aromatic()).thenReturn(false);\n\n        g.addAtom(u);\n        g.addAtom(v);\n\n        Edge e = new Edge(0, 1, IMPLICIT);\n        Assert.assertThat(ImplicitToExplicit.toExplicitEdge(g, e),\n                          CoreMatchers.is(CoreMatchers.not(CoreMatchers\n                                                                   .sameInstance(e))));\n        Assert.assertThat(ImplicitToExplicit.toExplicitEdge(g, e),\n                          CoreMatchers.is(new Edge(0, 1, SINGLE)));\n\n\n    }", "signature": "void toExplicitEdge()", "full_signature": "@Test public void toExplicitEdge()", "class_method_signature": "ImplicitToExplicitTest.toExplicitEdge()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "aromatic", "thenReturn", "when", "aromatic", "addAtom", "addAtom", "assertThat", "toExplicitEdge", "is", "not", "sameInstance", "assertThat", "toExplicitEdge", "is"]}, "focal_class": {"identifier": "ImplicitToExplicit", "superclass": "extends AbstractFunction<Graph,Graph>", "interfaces": "", "fields": [], "methods": [{"identifier": "apply", "parameters": "(final Graph g)", "modifiers": "public", "return": "Graph", "signature": "Graph apply(final Graph g)", "full_signature": "public Graph apply(final Graph g)", "class_method_signature": "ImplicitToExplicit.apply(final Graph g)", "testcase": false, "constructor": false}, {"identifier": "toExplicitEdge", "parameters": "(final Graph g, final Edge e)", "modifiers": "static", "return": "Edge", "signature": "Edge toExplicitEdge(final Graph g, final Edge e)", "full_signature": "static Edge toExplicitEdge(final Graph g, final Edge e)", "class_method_signature": "ImplicitToExplicit.toExplicitEdge(final Graph g, final Edge e)", "testcase": false, "constructor": false}, {"identifier": "type", "parameters": "(Atom u, Atom v)", "modifiers": "static", "return": "Bond", "signature": "Bond type(Atom u, Atom v)", "full_signature": "static Bond type(Atom u, Atom v)", "class_method_signature": "ImplicitToExplicit.type(Atom u, Atom v)", "testcase": false, "constructor": false}], "file": "func/src/main/java/uk/ac/ebi/beam/ImplicitToExplicit.java"}, "focal_method": {"identifier": "toExplicitEdge", "parameters": "(final Graph g, final Edge e)", "modifiers": "static", "return": "Edge", "body": "static Edge toExplicitEdge(final Graph g, final Edge e) {\n        final int u = e.either(), v = e.other(u);\n        if (e.bond() == Bond.IMPLICIT) {\n            return new Edge(u, v,\n                            type(g.atom(u),\n                                 g.atom(v)));\n        }\n        return e;\n    }", "signature": "Edge toExplicitEdge(final Graph g, final Edge e)", "full_signature": "static Edge toExplicitEdge(final Graph g, final Edge e)", "class_method_signature": "ImplicitToExplicit.toExplicitEdge(final Graph g, final Edge e)", "testcase": false, "constructor": false, "invocations": ["either", "other", "bond", "type", "atom", "atom"]}, "repository": {"repo_id": 12061606, "url": "https://github.com/johnmay/beam", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 19, "size": 825, "license": "licensed"}}