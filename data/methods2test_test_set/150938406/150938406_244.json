{"test_class": {"identifier": "SparseVectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOL = 1.0e-6;", "modifier": "private static final", "type": "double", "declarator": "TOL = 1.0e-6", "var_name": "TOL"}, {"original_string": "private SparseVector v1 = new SparseVector(8, new int[]{1, 3, 5, 7}, new double[]{2.0, 2.0, 2.0, 2.0});", "modifier": "private", "type": "SparseVector", "declarator": "v1 = new SparseVector(8, new int[]{1, 3, 5, 7}, new double[]{2.0, 2.0, 2.0, 2.0})", "var_name": "v1"}, {"original_string": "private SparseVector v2 = new SparseVector(8, new int[]{3, 4, 5}, new double[]{1.0, 1.0, 1.0});", "modifier": "private", "type": "SparseVector", "declarator": "v2 = new SparseVector(8, new int[]{3, 4, 5}, new double[]{1.0, 1.0, 1.0})", "var_name": "v2"}], "file": "core/src/test/java/com/alibaba/alink/common/linalg/SparseVectorTest.java"}, "test_case": {"identifier": "testIterator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIterator() throws Exception {\n        VectorIterator iterator = v1.iterator();\n        Assert.assertTrue(iterator.hasNext());\n        Assert.assertEquals(iterator.getIndex(), 1);\n        Assert.assertEquals(iterator.getValue(), 2, 0);\n        iterator.next();\n        Assert.assertTrue(iterator.hasNext());\n        Assert.assertEquals(iterator.getIndex(), 3);\n        Assert.assertEquals(iterator.getValue(), 2, 0);\n        iterator.next();\n        Assert.assertTrue(iterator.hasNext());\n        Assert.assertEquals(iterator.getIndex(), 5);\n        Assert.assertEquals(iterator.getValue(), 2, 0);\n        iterator.next();\n        Assert.assertTrue(iterator.hasNext());\n        Assert.assertEquals(iterator.getIndex(), 7);\n        Assert.assertEquals(iterator.getValue(), 2, 0);\n        iterator.next();\n        Assert.assertFalse(iterator.hasNext());\n    }", "signature": "void testIterator()", "full_signature": "@Test public void testIterator()", "class_method_signature": "SparseVectorTest.testIterator()", "testcase": true, "constructor": false, "invocations": ["iterator", "assertTrue", "hasNext", "assertEquals", "getIndex", "assertEquals", "getValue", "next", "assertTrue", "hasNext", "assertEquals", "getIndex", "assertEquals", "getValue", "next", "assertTrue", "hasNext", "assertEquals", "getIndex", "assertEquals", "getValue", "next", "assertTrue", "hasNext", "assertEquals", "getIndex", "assertEquals", "getValue", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "SparseVector", "superclass": "extends Vector", "interfaces": "", "fields": [{"original_string": "int n;", "modifier": "", "type": "int", "declarator": "n", "var_name": "n"}, {"original_string": "int[] indices;", "modifier": "", "type": "int[]", "declarator": "indices", "var_name": "indices"}, {"original_string": "double[] values;", "modifier": "", "type": "double[]", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "SparseVector", "parameters": "()", "modifiers": "public", "return": "", "signature": " SparseVector()", "full_signature": "public  SparseVector()", "class_method_signature": "SparseVector.SparseVector()", "testcase": false, "constructor": true}, {"identifier": "SparseVector", "parameters": "(int n)", "modifiers": "public", "return": "", "signature": " SparseVector(int n)", "full_signature": "public  SparseVector(int n)", "class_method_signature": "SparseVector.SparseVector(int n)", "testcase": false, "constructor": true}, {"identifier": "SparseVector", "parameters": "(int n, int[] indices, double[] values)", "modifiers": "public", "return": "", "signature": " SparseVector(int n, int[] indices, double[] values)", "full_signature": "public  SparseVector(int n, int[] indices, double[] values)", "class_method_signature": "SparseVector.SparseVector(int n, int[] indices, double[] values)", "testcase": false, "constructor": true}, {"identifier": "SparseVector", "parameters": "(int n, Map<Integer, Double> kv)", "modifiers": "public", "return": "", "signature": " SparseVector(int n, Map<Integer, Double> kv)", "full_signature": "public  SparseVector(int n, Map<Integer, Double> kv)", "class_method_signature": "SparseVector.SparseVector(int n, Map<Integer, Double> kv)", "testcase": false, "constructor": true}, {"identifier": "checkSizeAndIndicesRange", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkSizeAndIndicesRange()", "full_signature": "private void checkSizeAndIndicesRange()", "class_method_signature": "SparseVector.checkSizeAndIndicesRange()", "testcase": false, "constructor": false}, {"identifier": "sortImpl", "parameters": "(int[] indices, double[] values, int low, int high)", "modifiers": "private static", "return": "void", "signature": "void sortImpl(int[] indices, double[] values, int low, int high)", "full_signature": "private static void sortImpl(int[] indices, double[] values, int low, int high)", "class_method_signature": "SparseVector.sortImpl(int[] indices, double[] values, int low, int high)", "testcase": false, "constructor": false}, {"identifier": "sortIndices", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sortIndices()", "full_signature": "private void sortIndices()", "class_method_signature": "SparseVector.sortIndices()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "SparseVector", "signature": "SparseVector clone()", "full_signature": "@Override public SparseVector clone()", "class_method_signature": "SparseVector.clone()", "testcase": false, "constructor": false}, {"identifier": "prefix", "parameters": "(double d)", "modifiers": "@Override public", "return": "SparseVector", "signature": "SparseVector prefix(double d)", "full_signature": "@Override public SparseVector prefix(double d)", "class_method_signature": "SparseVector.prefix(double d)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(double d)", "modifiers": "@Override public", "return": "SparseVector", "signature": "SparseVector append(double d)", "full_signature": "@Override public SparseVector append(double d)", "class_method_signature": "SparseVector.append(double d)", "testcase": false, "constructor": false}, {"identifier": "getIndices", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getIndices()", "full_signature": "public int[] getIndices()", "class_method_signature": "SparseVector.getIndices()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getValues()", "full_signature": "public double[] getValues()", "class_method_signature": "SparseVector.getValues()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "SparseVector.size()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int i)", "modifiers": "@Override public", "return": "double", "signature": "double get(int i)", "full_signature": "@Override public double get(int i)", "class_method_signature": "SparseVector.get(int i)", "testcase": false, "constructor": false}, {"identifier": "setSize", "parameters": "(int n)", "modifiers": "public", "return": "void", "signature": "void setSize(int n)", "full_signature": "public void setSize(int n)", "class_method_signature": "SparseVector.setSize(int n)", "testcase": false, "constructor": false}, {"identifier": "numberOfValues", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int numberOfValues()", "full_signature": "public int numberOfValues()", "class_method_signature": "SparseVector.numberOfValues()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int i, double val)", "modifiers": "@Override public", "return": "void", "signature": "void set(int i, double val)", "full_signature": "@Override public void set(int i, double val)", "class_method_signature": "SparseVector.set(int i, double val)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int i, double val)", "modifiers": "@Override public", "return": "void", "signature": "void add(int i, double val)", "full_signature": "@Override public void add(int i, double val)", "class_method_signature": "SparseVector.add(int i, double val)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(int pos, int index, double val)", "modifiers": "private", "return": "void", "signature": "void insert(int pos, int index, double val)", "full_signature": "private void insert(int pos, int index, double val)", "class_method_signature": "SparseVector.insert(int pos, int index, double val)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SparseVector.toString()", "testcase": false, "constructor": false}, {"identifier": "normL2", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normL2()", "full_signature": "@Override public double normL2()", "class_method_signature": "SparseVector.normL2()", "testcase": false, "constructor": false}, {"identifier": "normL1", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normL1()", "full_signature": "@Override public double normL1()", "class_method_signature": "SparseVector.normL1()", "testcase": false, "constructor": false}, {"identifier": "normInf", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normInf()", "full_signature": "@Override public double normInf()", "class_method_signature": "SparseVector.normInf()", "testcase": false, "constructor": false}, {"identifier": "normL2Square", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double normL2Square()", "full_signature": "@Override public double normL2Square()", "class_method_signature": "SparseVector.normL2Square()", "testcase": false, "constructor": false}, {"identifier": "slice", "parameters": "(int[] indices)", "modifiers": "@Override public", "return": "SparseVector", "signature": "SparseVector slice(int[] indices)", "full_signature": "@Override public SparseVector slice(int[] indices)", "class_method_signature": "SparseVector.slice(int[] indices)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector plus(Vector vec)", "full_signature": "@Override public Vector plus(Vector vec)", "class_method_signature": "SparseVector.plus(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(Vector vec)", "modifiers": "@Override public", "return": "Vector", "signature": "Vector minus(Vector vec)", "full_signature": "@Override public Vector minus(Vector vec)", "class_method_signature": "SparseVector.minus(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "scale", "parameters": "(double d)", "modifiers": "@Override public", "return": "SparseVector", "signature": "SparseVector scale(double d)", "full_signature": "@Override public SparseVector scale(double d)", "class_method_signature": "SparseVector.scale(double d)", "testcase": false, "constructor": false}, {"identifier": "scaleEqual", "parameters": "(double d)", "modifiers": "@Override public", "return": "void", "signature": "void scaleEqual(double d)", "full_signature": "@Override public void scaleEqual(double d)", "class_method_signature": "SparseVector.scaleEqual(double d)", "testcase": false, "constructor": false}, {"identifier": "removeZeroValues", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeZeroValues()", "full_signature": "public void removeZeroValues()", "class_method_signature": "SparseVector.removeZeroValues()", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(SparseVector other)", "modifiers": "private", "return": "double", "signature": "double dot(SparseVector other)", "full_signature": "private double dot(SparseVector other)", "class_method_signature": "SparseVector.dot(SparseVector other)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(DenseVector other)", "modifiers": "private", "return": "double", "signature": "double dot(DenseVector other)", "full_signature": "private double dot(DenseVector other)", "class_method_signature": "SparseVector.dot(DenseVector other)", "testcase": false, "constructor": false}, {"identifier": "dot", "parameters": "(Vector other)", "modifiers": "@Override public", "return": "double", "signature": "double dot(Vector other)", "full_signature": "@Override public double dot(Vector other)", "class_method_signature": "SparseVector.dot(Vector other)", "testcase": false, "constructor": false}, {"identifier": "outer", "parameters": "()", "modifiers": "@Override public", "return": "DenseMatrix", "signature": "DenseMatrix outer()", "full_signature": "@Override public DenseMatrix outer()", "class_method_signature": "SparseVector.outer()", "testcase": false, "constructor": false}, {"identifier": "outer", "parameters": "(SparseVector other)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix outer(SparseVector other)", "full_signature": "public DenseMatrix outer(SparseVector other)", "class_method_signature": "SparseVector.outer(SparseVector other)", "testcase": false, "constructor": false}, {"identifier": "toDenseVector", "parameters": "()", "modifiers": "public", "return": "DenseVector", "signature": "DenseVector toDenseVector()", "full_signature": "public DenseVector toDenseVector()", "class_method_signature": "SparseVector.toDenseVector()", "testcase": false, "constructor": false}, {"identifier": "standardizeEqual", "parameters": "(double mean, double stdvar)", "modifiers": "@Override public", "return": "void", "signature": "void standardizeEqual(double mean, double stdvar)", "full_signature": "@Override public void standardizeEqual(double mean, double stdvar)", "class_method_signature": "SparseVector.standardizeEqual(double mean, double stdvar)", "testcase": false, "constructor": false}, {"identifier": "normalizeEqual", "parameters": "(double p)", "modifiers": "@Override public", "return": "void", "signature": "void normalizeEqual(double p)", "full_signature": "@Override public void normalizeEqual(double p)", "class_method_signature": "SparseVector.normalizeEqual(double p)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SparseVector.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SparseVector.hashCode()", "testcase": false, "constructor": false}, {"identifier": "forEach", "parameters": "(BiConsumer<Integer, Double> action)", "modifiers": "public", "return": "void", "signature": "void forEach(BiConsumer<Integer, Double> action)", "full_signature": "public void forEach(BiConsumer<Integer, Double> action)", "class_method_signature": "SparseVector.forEach(BiConsumer<Integer, Double> action)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "VectorIterator", "signature": "VectorIterator iterator()", "full_signature": "@Override public VectorIterator iterator()", "class_method_signature": "SparseVector.iterator()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/common/linalg/SparseVector.java"}, "focal_method": {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "VectorIterator", "body": "@Override\n    public VectorIterator iterator() {\n        return new SparseVectorVectorIterator();\n    }", "signature": "VectorIterator iterator()", "full_signature": "@Override public VectorIterator iterator()", "class_method_signature": "SparseVector.iterator()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}