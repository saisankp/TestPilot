{"test_class": {"identifier": "DependencyValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DependencyValidator validator;", "modifier": "private", "type": "DependencyValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "@Mock\n    private PackageProperties properties;", "modifier": "@Mock\n    private", "type": "PackageProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private Collection<PackageInfo> resolvedPackageInfos;", "modifier": "private", "type": "Collection<PackageInfo>", "declarator": "resolvedPackageInfos", "var_name": "resolvedPackageInfos"}], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/spi/impl/DependencyValidatorTest.java"}, "test_case": {"identifier": "testWithResolvedNonOverlappingDependency", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithResolvedNonOverlappingDependency() {\n        resolvedPackageInfos.add(getPackageInfo(\"group1:package1:0.1\", \"/filter.xml\", null));\n        resolvedPackageInfos.add(getPackageInfo(\"group2:package2:2.9\", \"/simple-package/META-INF/vault/filter.xml\", null));\n        \n        Assert.assertThat(validator.validate(properties), AnyValidationMessageMatcher.noValidationInCollection());\n    }", "signature": "void testWithResolvedNonOverlappingDependency()", "full_signature": "@Test public void testWithResolvedNonOverlappingDependency()", "class_method_signature": "DependencyValidatorTest.testWithResolvedNonOverlappingDependency()", "testcase": true, "constructor": false, "invocations": ["add", "getPackageInfo", "add", "getPackageInfo", "assertThat", "validate", "noValidationInCollection"]}, "focal_class": {"identifier": "DependencyValidator", "superclass": "", "interfaces": "implements PropertiesValidator", "fields": [{"original_string": "static final String MESSAGE_DEPENDENCIES_WITH_OVERLAPPING_FILTERS = \"Dependency '%s' defines same filter root '%s' as dependency '%s'\";", "modifier": "static final", "type": "String", "declarator": "MESSAGE_DEPENDENCIES_WITH_OVERLAPPING_FILTERS = \"Dependency '%s' defines same filter root '%s' as dependency '%s'\"", "var_name": "MESSAGE_DEPENDENCIES_WITH_OVERLAPPING_FILTERS"}, {"original_string": "static final String MESSAGE_UNRESOLVED_DEPENDENCY = \"Dependency '%s'was not successfully resolved and can therefore not be used for analysis.\";", "modifier": "static final", "type": "String", "declarator": "MESSAGE_UNRESOLVED_DEPENDENCY = \"Dependency '%s'was not successfully resolved and can therefore not be used for analysis.\"", "var_name": "MESSAGE_UNRESOLVED_DEPENDENCY"}, {"original_string": "private final Collection<PackageInfo> dependenciesMetaInfo;", "modifier": "private final", "type": "Collection<PackageInfo>", "declarator": "dependenciesMetaInfo", "var_name": "dependenciesMetaInfo"}, {"original_string": "private final ValidationMessageSeverity severity;", "modifier": "private final", "type": "ValidationMessageSeverity", "declarator": "severity", "var_name": "severity"}, {"original_string": "private final ValidationMessageSeverity severityForUnresolvedDependencies;", "modifier": "private final", "type": "ValidationMessageSeverity", "declarator": "severityForUnresolvedDependencies", "var_name": "severityForUnresolvedDependencies"}], "methods": [{"identifier": "DependencyValidator", "parameters": "(@NotNull ValidationMessageSeverity severity, ValidationMessageSeverity severityForUnresolvedDependencies, Collection<PackageInfo> dependenciesMetaInfo)", "modifiers": "public", "return": "", "signature": " DependencyValidator(@NotNull ValidationMessageSeverity severity, ValidationMessageSeverity severityForUnresolvedDependencies, Collection<PackageInfo> dependenciesMetaInfo)", "full_signature": "public  DependencyValidator(@NotNull ValidationMessageSeverity severity, ValidationMessageSeverity severityForUnresolvedDependencies, Collection<PackageInfo> dependenciesMetaInfo)", "class_method_signature": "DependencyValidator.DependencyValidator(@NotNull ValidationMessageSeverity severity, ValidationMessageSeverity severityForUnresolvedDependencies, Collection<PackageInfo> dependenciesMetaInfo)", "testcase": false, "constructor": true}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> done()", "full_signature": "@Override public Collection<ValidationMessage> done()", "class_method_signature": "DependencyValidator.done()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NotNull PackageProperties properties)", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> validate(@NotNull PackageProperties properties)", "full_signature": "@Override public Collection<ValidationMessage> validate(@NotNull PackageProperties properties)", "class_method_signature": "DependencyValidator.validate(@NotNull PackageProperties properties)", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/DependencyValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(@NotNull PackageProperties properties)", "modifiers": "@Override public", "return": "Collection<ValidationMessage>", "body": "@Override\n    public Collection<ValidationMessage> validate(@NotNull PackageProperties properties) {\n        \n        // use resolved dependencies\n        Collection<ValidationMessage> messages = new LinkedList<>();\n        \n        Map<String, PackageInfo> roots = new HashMap<>();\n        \n        // check for unresolved dependencies!\n        for (Dependency dependency : properties.getDependencies()) {\n            boolean isDependencyResolved = false;\n            for (PackageInfo resolvedDependency : dependenciesMetaInfo) {\n                if (dependency.matches(resolvedDependency.getId())) {\n                    for (PathFilterSet set : resolvedDependency.getFilter().getFilterSets()) {\n                        String root = set.getRoot();\n                        PackageInfo existing = roots.get(root);\n                        if (existing != null) {\n                            String msg = String.format(MESSAGE_DEPENDENCIES_WITH_OVERLAPPING_FILTERS,\n                                    resolvedDependency.getId(), root, existing.getId());\n                            messages.add(new ValidationMessage(severity, msg));\n                        }\n                        roots.put(root, resolvedDependency);\n                    }\n                    isDependencyResolved = true;\n                    break;\n                }\n            }\n            if (!isDependencyResolved) {\n                String msg = String.format(MESSAGE_UNRESOLVED_DEPENDENCY, dependency);\n                messages.add(new ValidationMessage(severityForUnresolvedDependencies, msg));\n                continue;\n            }\n            // TODO: check for overlapping roots with current filter.xml\n        }\n        return messages;\n    }", "signature": "Collection<ValidationMessage> validate(@NotNull PackageProperties properties)", "full_signature": "@Override public Collection<ValidationMessage> validate(@NotNull PackageProperties properties)", "class_method_signature": "DependencyValidator.validate(@NotNull PackageProperties properties)", "testcase": false, "constructor": false, "invocations": ["getDependencies", "matches", "getId", "getFilterSets", "getFilter", "getRoot", "get", "format", "getId", "getId", "add", "put", "format", "add"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}