{"test_class": {"identifier": "SimpleJdbcLockTest", "superclass": "", "interfaces": "implements InitializingBean", "fields": [{"original_string": "@Autowired\n  private JdbcTemplate jdbcTemplate;", "modifier": "@Autowired\n  private", "type": "JdbcTemplate", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "private Lock lock;", "modifier": "private", "type": "Lock", "declarator": "lock", "var_name": "lock"}], "file": "distributed-lock-jdbc/src/test/java/com/github/alturkovic/lock/jdbc/impl/SimpleJdbcLockTest.java"}, "test_case": {"identifier": "shouldRelease", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldRelease() {\n    new SimpleJdbcInsert(jdbcTemplate)\n      .withTableName(\"locks\")\n      .usingGeneratedKeyColumns(\"id\")\n      .executeAndReturnKey(values(\"1\", \"abc\"));\n\n    final var released = lock.release(Collections.singletonList(\"1\"), \"locks\", \"abc\");\n    assertThat(released).isTrue();\n    assertThat(jdbcTemplate.queryForList(\"SELECT * FROM locks\")).isNullOrEmpty();\n  }", "signature": "void shouldRelease()", "full_signature": "@Test public void shouldRelease()", "class_method_signature": "SimpleJdbcLockTest.shouldRelease()", "testcase": true, "constructor": false, "invocations": ["executeAndReturnKey", "usingGeneratedKeyColumns", "withTableName", "values", "release", "singletonList", "isTrue", "assertThat", "isNullOrEmpty", "assertThat", "queryForList"]}, "focal_class": {"identifier": "SimpleJdbcLock", "superclass": "extends AbstractSimpleLock", "interfaces": "", "fields": [{"original_string": "private final JdbcLockSingleKeyService lockSingleKeyService;", "modifier": "private final", "type": "JdbcLockSingleKeyService", "declarator": "lockSingleKeyService", "var_name": "lockSingleKeyService"}], "methods": [{"identifier": "SimpleJdbcLock", "parameters": "(final Supplier<String> tokenSupplier, final JdbcLockSingleKeyService lockSingleKeyService)", "modifiers": "public", "return": "", "signature": " SimpleJdbcLock(final Supplier<String> tokenSupplier, final JdbcLockSingleKeyService lockSingleKeyService)", "full_signature": "public  SimpleJdbcLock(final Supplier<String> tokenSupplier, final JdbcLockSingleKeyService lockSingleKeyService)", "class_method_signature": "SimpleJdbcLock.SimpleJdbcLock(final Supplier<String> tokenSupplier, final JdbcLockSingleKeyService lockSingleKeyService)", "testcase": false, "constructor": true}, {"identifier": "acquire", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "String", "signature": "String acquire(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected String acquire(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleJdbcLock.acquire(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final String key, final String storeId, final String token)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean release(final String key, final String storeId, final String token)", "full_signature": "@Override protected boolean release(final String key, final String storeId, final String token)", "class_method_signature": "SimpleJdbcLock.release(final String key, final String storeId, final String token)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "(final String key, final String storeId, final String token, final long expiration)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean refresh(final String key, final String storeId, final String token, final long expiration)", "full_signature": "@Override protected boolean refresh(final String key, final String storeId, final String token, final long expiration)", "class_method_signature": "SimpleJdbcLock.refresh(final String key, final String storeId, final String token, final long expiration)", "testcase": false, "constructor": false}], "file": "distributed-lock-jdbc/src/main/java/com/github/alturkovic/lock/jdbc/impl/SimpleJdbcLock.java"}, "focal_method": {"identifier": "release", "parameters": "(final String key, final String storeId, final String token)", "modifiers": "@Override protected", "return": "boolean", "body": "@Override\n  protected boolean release(final String key, final String storeId, final String token) {\n    return lockSingleKeyService.release(key, storeId, token);\n  }", "signature": "boolean release(final String key, final String storeId, final String token)", "full_signature": "@Override protected boolean release(final String key, final String storeId, final String token)", "class_method_signature": "SimpleJdbcLock.release(final String key, final String storeId, final String token)", "testcase": false, "constructor": false, "invocations": ["release"]}, "repository": {"repo_id": 93310060, "url": "https://github.com/alturkovic/distributed-lock", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 77, "size": 282, "license": "licensed"}}