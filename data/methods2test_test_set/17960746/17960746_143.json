{"test_class": {"identifier": "VirtualIndexBufferTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "jme3-core/src/test/java/com/jme3/scene/mesh/VirtualIndexBufferTest.java"}, "test_case": {"identifier": "testSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSize() {\n        final VirtualIndexBuffer bufferTriangleFan = new VirtualIndexBuffer(5, Mode.TriangleFan);\n        assertEquals(9, bufferTriangleFan.size());\n\n        final VirtualIndexBuffer bufferLineLoop = new VirtualIndexBuffer(8, Mode.LineLoop);\n        assertEquals(15, bufferLineLoop.size());\n\n        final VirtualIndexBuffer bufferPoints = new VirtualIndexBuffer(8, Mode.Points);\n        assertEquals(8, bufferPoints.size());\n\n        final VirtualIndexBuffer bufferLines = new VirtualIndexBuffer(8, Mode.Lines);\n        assertEquals(8, bufferLines.size());\n\n        final VirtualIndexBuffer bufferLineStrip = new VirtualIndexBuffer(8, Mode.LineStrip);\n        assertEquals(14, bufferLineStrip.size());\n\n        final VirtualIndexBuffer bufferTriangles = new VirtualIndexBuffer(8, Mode.Triangles);\n        assertEquals(8, bufferTriangles.size());\n\n        final VirtualIndexBuffer bufferTriangleStrip = new VirtualIndexBuffer(8, Mode.TriangleStrip);\n        assertEquals(18, bufferTriangleStrip.size());\n    }", "signature": "void testSize()", "full_signature": "@Test public void testSize()", "class_method_signature": "VirtualIndexBufferTest.testSize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size", "assertEquals", "size"]}, "focal_class": {"identifier": "VirtualIndexBuffer", "superclass": "extends IndexBuffer", "interfaces": "", "fields": [{"original_string": "protected int numVerts = 0;", "modifier": "protected", "type": "int", "declarator": "numVerts = 0", "var_name": "numVerts"}, {"original_string": "protected int numIndices = 0;", "modifier": "protected", "type": "int", "declarator": "numIndices = 0", "var_name": "numIndices"}, {"original_string": "protected Mode meshMode;", "modifier": "protected", "type": "Mode", "declarator": "meshMode", "var_name": "meshMode"}, {"original_string": "protected int position = 0;", "modifier": "protected", "type": "int", "declarator": "position = 0", "var_name": "position"}], "methods": [{"identifier": "VirtualIndexBuffer", "parameters": "(int numVerts, Mode meshMode)", "modifiers": "public", "return": "", "signature": " VirtualIndexBuffer(int numVerts, Mode meshMode)", "full_signature": "public  VirtualIndexBuffer(int numVerts, Mode meshMode)", "class_method_signature": "VirtualIndexBuffer.VirtualIndexBuffer(int numVerts, Mode meshMode)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int get()", "full_signature": "@Override public int get()", "class_method_signature": "VirtualIndexBuffer.get()", "testcase": false, "constructor": false}, {"identifier": "rewind", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rewind()", "full_signature": "@Override public void rewind()", "class_method_signature": "VirtualIndexBuffer.rewind()", "testcase": false, "constructor": false}, {"identifier": "remaining", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int remaining()", "full_signature": "@Override public int remaining()", "class_method_signature": "VirtualIndexBuffer.remaining()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int i)", "modifiers": "@Override public", "return": "int", "signature": "int get(int i)", "full_signature": "@Override public int get(int i)", "class_method_signature": "VirtualIndexBuffer.get(int i)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(int i, int value)", "modifiers": "@Override public", "return": "IndexBuffer", "signature": "IndexBuffer put(int i, int value)", "full_signature": "@Override public IndexBuffer put(int i, int value)", "class_method_signature": "VirtualIndexBuffer.put(int i, int value)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "VirtualIndexBuffer.size()", "testcase": false, "constructor": false}, {"identifier": "getBuffer", "parameters": "()", "modifiers": "@Override public", "return": "Buffer", "signature": "Buffer getBuffer()", "full_signature": "@Override public Buffer getBuffer()", "class_method_signature": "VirtualIndexBuffer.getBuffer()", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(int value)", "modifiers": "@Override public", "return": "IndexBuffer", "signature": "IndexBuffer put(int value)", "full_signature": "@Override public IndexBuffer put(int value)", "class_method_signature": "VirtualIndexBuffer.put(int value)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "Format", "signature": "Format getFormat()", "full_signature": "@Override public Format getFormat()", "class_method_signature": "VirtualIndexBuffer.getFormat()", "testcase": false, "constructor": false}], "file": "jme3-core/src/main/java/com/jme3/scene/mesh/VirtualIndexBuffer.java"}, "focal_method": {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int size() {\n        return numIndices;\n    }", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "VirtualIndexBuffer.size()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 17960746, "url": "https://github.com/jMonkeyEngine/jmonkeyengine", "language": "Java", "is_fork": false, "fork_count": 957, "stargazer_count": 2373, "size": 861551, "license": "licensed"}}