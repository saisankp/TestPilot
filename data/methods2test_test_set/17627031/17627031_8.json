{"test_class": {"identifier": "WarcModuleTest", "superclass": "", "interfaces": "", "fields": [], "file": "jhove-ext-modules/src/test/java/edu/harvard/hul/ois/jhove/module/WarcModuleTest.java"}, "test_case": {"identifier": "checkSignatureCompressWarc", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkSignatureCompressWarc() throws Exception {\n\t\tFile warcFile = new File(\"src/test/resources/warc/valid-warcfile-upper-lower-case.warc.gz\");\n\n\t\tWarcModule wm = new WarcModule();\n        RepInfo info = new RepInfo(warcFile.getAbsolutePath());\n        wm.checkSignatures(null, new FileInputStream(warcFile), info);\n        \n        assertEquals(RepInfo.TRUE, info.getWellFormed());\n        assertEquals(WarcModule.class, info.getModule().getClass());\n        assertEquals(Arrays.asList(wm.getName()), info.getSigMatch());\n\t}", "signature": "void checkSignatureCompressWarc()", "full_signature": "@Test public void checkSignatureCompressWarc()", "class_method_signature": "WarcModuleTest.checkSignatureCompressWarc()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "checkSignatures", "assertEquals", "getWellFormed", "assertEquals", "getClass", "getModule", "assertEquals", "asList", "getName", "getSigMatch"]}, "focal_class": {"identifier": "WarcModule", "superclass": "extends ModuleBase", "interfaces": "", "fields": [{"original_string": "private static final Agent KB_AGENT = new Builder(\n            \"Royal Library of Denmark\", AgentType.STANDARD)\n            .address(\"S\u00f8ren Kierkegaards Plads 1, 1219 K\u00f8benhavn K, Denmark\")\n            .fax(\"+45 3393 2218\")\n            .web(\"http://kb.dk\").build();", "modifier": "private static final", "type": "Agent", "declarator": "KB_AGENT = new Builder(\n            \"Royal Library of Denmark\", AgentType.STANDARD)\n            .address(\"S\u00f8ren Kierkegaards Plads 1, 1219 K\u00f8benhavn K, Denmark\")\n            .fax(\"+45 3393 2218\")\n            .web(\"http://kb.dk\").build()", "var_name": "KB_AGENT"}, {"original_string": "private static final String NAME = \"WARC-kb\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"WARC-kb\"", "var_name": "NAME"}, {"original_string": "private static final String RELEASE = \"1.0\";", "modifier": "private static final", "type": "String", "declarator": "RELEASE = \"1.0\"", "var_name": "RELEASE"}, {"original_string": "private static final int[] DATE = {2015, 12, 07};", "modifier": "private static final", "type": "int[]", "declarator": "DATE = {2015, 12, 07}", "var_name": "DATE"}, {"original_string": "private static final String[] FORMAT = {\n            \"WARC\", \"WARC, Web ARChive file format\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "FORMAT = {\n            \"WARC\", \"WARC, Web ARChive file format\"\n    }", "var_name": "FORMAT"}, {"original_string": "private static final String COVERAGE = \"WARC, 28500:2009\";", "modifier": "private static final", "type": "String", "declarator": "COVERAGE = \"WARC, 28500:2009\"", "var_name": "COVERAGE"}, {"original_string": "private static final String[] MIMETYPE = {\"application/warc\", \"application/warc-fields\"};", "modifier": "private static final", "type": "String[]", "declarator": "MIMETYPE = {\"application/warc\", \"application/warc-fields\"}", "var_name": "MIMETYPE"}, {"original_string": "private static final String WELLFORMED = \"\";", "modifier": "private static final", "type": "String", "declarator": "WELLFORMED = \"\"", "var_name": "WELLFORMED"}, {"original_string": "private static final String VALIDITY = \"The file is well-formed\";", "modifier": "private static final", "type": "String", "declarator": "VALIDITY = \"The file is well-formed\"", "var_name": "VALIDITY"}, {"original_string": "private static final String REPINFO = \"\";", "modifier": "private static final", "type": "String", "declarator": "REPINFO = \"\"", "var_name": "REPINFO"}, {"original_string": "private static final String NOTE = \"\";", "modifier": "private static final", "type": "String", "declarator": "NOTE = \"\"", "var_name": "NOTE"}, {"original_string": "private static final String RIGHTS = \"Copyright 2015 by The Royal Library of Denmark. \" +\n            \"Released under the GNU Lesser General Public License.\";", "modifier": "private static final", "type": "String", "declarator": "RIGHTS = \"Copyright 2015 by The Royal Library of Denmark. \" +\n            \"Released under the GNU Lesser General Public License.\"", "var_name": "RIGHTS"}, {"original_string": "private static final Boolean DEFAULT_COMPUTE_BLOCK_DIGEST = Boolean.TRUE;", "modifier": "private static final", "type": "Boolean", "declarator": "DEFAULT_COMPUTE_BLOCK_DIGEST = Boolean.TRUE", "var_name": "DEFAULT_COMPUTE_BLOCK_DIGEST"}, {"original_string": "private static final String DEFAULT_BLOCK_DIGEST_ALGORITHM = \"sha1\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_BLOCK_DIGEST_ALGORITHM = \"sha1\"", "var_name": "DEFAULT_BLOCK_DIGEST_ALGORITHM"}, {"original_string": "private static final String DEFAULT_BLOCK_DIGEST_ENCODING = \"base32\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_BLOCK_DIGEST_ENCODING = \"base32\"", "var_name": "DEFAULT_BLOCK_DIGEST_ENCODING"}, {"original_string": "private static final Boolean DEFAULT_COMPUTE_PAYLOAD_DIGEST = Boolean.TRUE;", "modifier": "private static final", "type": "Boolean", "declarator": "DEFAULT_COMPUTE_PAYLOAD_DIGEST = Boolean.TRUE", "var_name": "DEFAULT_COMPUTE_PAYLOAD_DIGEST"}, {"original_string": "private static final String DEFAULT_PAYLOAD_DIGEST_ALGORITHM = \"sha1\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PAYLOAD_DIGEST_ALGORITHM = \"sha1\"", "var_name": "DEFAULT_PAYLOAD_DIGEST_ALGORITHM"}, {"original_string": "private static final String DEFAULT_PAYLOAD_DIGEST_ENCODING = \"base32\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_PAYLOAD_DIGEST_ENCODING = \"base32\"", "var_name": "DEFAULT_PAYLOAD_DIGEST_ENCODING"}, {"original_string": "private static final Boolean DEFAULT_STRICT_TARGET_URI_VALIDATION = Boolean.FALSE;", "modifier": "private static final", "type": "Boolean", "declarator": "DEFAULT_STRICT_TARGET_URI_VALIDATION = Boolean.FALSE", "var_name": "DEFAULT_STRICT_TARGET_URI_VALIDATION"}, {"original_string": "private static final Boolean DEFAULT_STRICT_URI_VALIDATION = Boolean.FALSE;", "modifier": "private static final", "type": "Boolean", "declarator": "DEFAULT_STRICT_URI_VALIDATION = Boolean.FALSE", "var_name": "DEFAULT_STRICT_URI_VALIDATION"}, {"original_string": "private boolean bComputeBlockDigest;", "modifier": "private", "type": "boolean", "declarator": "bComputeBlockDigest", "var_name": "bComputeBlockDigest"}, {"original_string": "private String blockDigestAlgorithm;", "modifier": "private", "type": "String", "declarator": "blockDigestAlgorithm", "var_name": "blockDigestAlgorithm"}, {"original_string": "private String blockDigestEncoding;", "modifier": "private", "type": "String", "declarator": "blockDigestEncoding", "var_name": "blockDigestEncoding"}, {"original_string": "private boolean bComputePayloadDigest;", "modifier": "private", "type": "boolean", "declarator": "bComputePayloadDigest", "var_name": "bComputePayloadDigest"}, {"original_string": "private String payloadDigestAlgorithm;", "modifier": "private", "type": "String", "declarator": "payloadDigestAlgorithm", "var_name": "payloadDigestAlgorithm"}, {"original_string": "private String payloadDigestEncoding;", "modifier": "private", "type": "String", "declarator": "payloadDigestEncoding", "var_name": "payloadDigestEncoding"}, {"original_string": "private boolean bStrictTargetUriValidation;", "modifier": "private", "type": "boolean", "declarator": "bStrictTargetUriValidation", "var_name": "bStrictTargetUriValidation"}, {"original_string": "private boolean bStrictUriValidation;", "modifier": "private", "type": "boolean", "declarator": "bStrictUriValidation", "var_name": "bStrictUriValidation"}, {"original_string": "private Map<String, Integer> versions;", "modifier": "private", "type": "Map<String, Integer>", "declarator": "versions", "var_name": "versions"}, {"original_string": "private List<Property> recordProperties;", "modifier": "private", "type": "List<Property>", "declarator": "recordProperties", "var_name": "recordProperties"}], "methods": [{"identifier": "WarcModule", "parameters": "()", "modifiers": "public", "return": "", "signature": " WarcModule()", "full_signature": "public  WarcModule()", "class_method_signature": "WarcModule.WarcModule()", "testcase": false, "constructor": true}, {"identifier": "setVendorAndSpecification", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setVendorAndSpecification()", "full_signature": "private void setVendorAndSpecification()", "class_method_signature": "WarcModule.setVendorAndSpecification()", "testcase": false, "constructor": false}, {"identifier": "initialiseVariables", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialiseVariables()", "full_signature": "private void initialiseVariables()", "class_method_signature": "WarcModule.initialiseVariables()", "testcase": false, "constructor": false}, {"identifier": "resetParams", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void resetParams()", "full_signature": "@Override public void resetParams()", "class_method_signature": "WarcModule.resetParams()", "testcase": false, "constructor": false}, {"identifier": "checkSignatures", "parameters": "(File file,\n            InputStream stream,\n            RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void checkSignatures(File file,\n            InputStream stream,\n            RepInfo info)", "full_signature": "@Override public void checkSignatures(File file,\n            InputStream stream,\n            RepInfo info)", "class_method_signature": "WarcModule.checkSignatures(File file,\n            InputStream stream,\n            RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "checkSignatures", "parameters": "(File file,\n            RandomAccessFile raf,\n            RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void checkSignatures(File file,\n            RandomAccessFile raf,\n            RepInfo info)", "full_signature": "@Override public void checkSignatures(File file,\n            RandomAccessFile raf,\n            RepInfo info)", "class_method_signature": "WarcModule.checkSignatures(File file,\n            RandomAccessFile raf,\n            RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(RandomAccessFile file, RepInfo info)", "modifiers": "@Override public", "return": "void", "signature": "void parse(RandomAccessFile file, RepInfo info)", "full_signature": "@Override public void parse(RandomAccessFile file, RepInfo info)", "class_method_signature": "WarcModule.parse(RandomAccessFile file, RepInfo info)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream stream, RepInfo info, int parseIndex)", "modifiers": "@Override public", "return": "int", "signature": "int parse(InputStream stream, RepInfo info, int parseIndex)", "full_signature": "@Override public int parse(InputStream stream, RepInfo info, int parseIndex)", "class_method_signature": "WarcModule.parse(InputStream stream, RepInfo info, int parseIndex)", "testcase": false, "constructor": false}, {"identifier": "setReaderOptions", "parameters": "(WarcReader reader)", "modifiers": "protected", "return": "void", "signature": "void setReaderOptions(WarcReader reader)", "full_signature": "protected void setReaderOptions(WarcReader reader)", "class_method_signature": "WarcModule.setReaderOptions(WarcReader reader)", "testcase": false, "constructor": false}, {"identifier": "parseRecords", "parameters": "(WarcReader reader)", "modifiers": "protected", "return": "void", "signature": "void parseRecords(WarcReader reader)", "full_signature": "protected void parseRecords(WarcReader reader)", "class_method_signature": "WarcModule.parseRecords(WarcReader reader)", "testcase": false, "constructor": false}, {"identifier": "processRecord", "parameters": "(WarcRecord record)", "modifiers": "protected", "return": "void", "signature": "void processRecord(WarcRecord record)", "full_signature": "protected void processRecord(WarcRecord record)", "class_method_signature": "WarcModule.processRecord(WarcRecord record)", "testcase": false, "constructor": false}, {"identifier": "reportResults", "parameters": "(WarcReader reader, RepInfo repInfo)", "modifiers": "private", "return": "void", "signature": "void reportResults(WarcReader reader, RepInfo repInfo)", "full_signature": "private void reportResults(WarcReader reader, RepInfo repInfo)", "class_method_signature": "WarcModule.reportResults(WarcReader reader, RepInfo repInfo)", "testcase": false, "constructor": false}, {"identifier": "extractDiagnosisType", "parameters": "(Diagnosis d)", "modifiers": "private static", "return": "String", "signature": "String extractDiagnosisType(Diagnosis d)", "full_signature": "private static String extractDiagnosisType(Diagnosis d)", "class_method_signature": "WarcModule.extractDiagnosisType(Diagnosis d)", "testcase": false, "constructor": false}, {"identifier": "extractDiagnosisMessage", "parameters": "(Diagnosis d)", "modifiers": "private static", "return": "String", "signature": "String extractDiagnosisMessage(Diagnosis d)", "full_signature": "private static String extractDiagnosisMessage(Diagnosis d)", "class_method_signature": "WarcModule.extractDiagnosisMessage(Diagnosis d)", "testcase": false, "constructor": false}], "file": "jhove-ext-modules/src/main/java/edu/harvard/hul/ois/jhove/module/WarcModule.java"}, "focal_method": {"identifier": "checkSignatures", "parameters": "(File file,\n            InputStream stream,\n            RepInfo info)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void checkSignatures (File file,\n            InputStream stream,\n            RepInfo info)\n    throws IOException  {\n        info.setFormat (_format[0]);\n        info.setMimeType (_mimeType[0]);\n        info.setModule (this);\n\n        ByteCountingPushBackInputStream pbin = new ByteCountingPushBackInputStream(stream, GzipReader.DEFAULT_INPUT_BUFFER_SIZE);\n    \t// First try warc uncompressed\n    \tboolean checkIsWarc = WarcReaderFactory.isWarcFile(pbin);\n        if (checkIsWarc) {\n            info.setSigMatch(_name);\n            return;\n        }\n    \t// Then try warc compressed\n    \tboolean checkIsGzip = GzipReader.isGzipped(pbin);\n        if (checkIsGzip) {\n            info.setSigMatch(_name);\n            return;\n        }\n        // Not a warc or a gzip\n        info.setWellFormed (false);\n    }", "signature": "void checkSignatures(File file,\n            InputStream stream,\n            RepInfo info)", "full_signature": "@Override public void checkSignatures(File file,\n            InputStream stream,\n            RepInfo info)", "class_method_signature": "WarcModule.checkSignatures(File file,\n            InputStream stream,\n            RepInfo info)", "testcase": false, "constructor": false, "invocations": ["setFormat", "setMimeType", "setModule", "isWarcFile", "setSigMatch", "isGzipped", "setSigMatch", "setWellFormed"]}, "repository": {"repo_id": 17627031, "url": "https://github.com/openpreserve/jhove", "stars": 91, "created": "3/11/2014 10:47:10 AM +00:00", "updates": "2020-01-24T19:19:11+00:00", "fork": "False", "license": "licensed"}}