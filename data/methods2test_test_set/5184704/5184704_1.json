{"test_class": {"identifier": "HandshakeResponseTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/com/github/mpjct/jmpjct/mysql/proto/HandshakeResponseTest.java"}, "test_case": {"identifier": "test_5_5_8", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_5_5_8() {\n        // https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::HandshakeResponse\n        byte[] packet = new byte[] {\n            (byte)0x54, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x8d, (byte)0xa6, (byte)0x0f, (byte)0x00,\n            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x08, (byte)0x00, (byte)0x00, (byte)0x00,\n            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,\n            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00,\n            (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x70, (byte)0x61, (byte)0x6d, (byte)0x00,\n            (byte)0x14, (byte)0xab, (byte)0x09, (byte)0xee, (byte)0xf6, (byte)0xbc, (byte)0xb1, (byte)0x32,\n            (byte)0x3e, (byte)0x61, (byte)0x14, (byte)0x38, (byte)0x65, (byte)0xc0, (byte)0x99, (byte)0x1d,\n            (byte)0x95, (byte)0x7d, (byte)0x75, (byte)0xd4, (byte)0x47, (byte)0x74, (byte)0x65, (byte)0x73,\n            (byte)0x74, (byte)0x00, (byte)0x6d, (byte)0x79, (byte)0x73, (byte)0x71, (byte)0x6c, (byte)0x5f,\n            (byte)0x6e, (byte)0x61, (byte)0x74, (byte)0x69, (byte)0x76, (byte)0x65, (byte)0x5f, (byte)0x70,\n            (byte)0x61, (byte)0x73, (byte)0x73, (byte)0x77, (byte)0x6f, (byte)0x72, (byte)0x64, (byte)0x00,\n        };\n        \n        assertArrayEquals(packet, HandshakeResponse.loadFromPacket(packet).toPacket());\n    }", "signature": "void test_5_5_8()", "full_signature": "@Test public void test_5_5_8()", "class_method_signature": "HandshakeResponseTest.test_5_5_8()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "toPacket", "loadFromPacket"]}, "focal_class": {"identifier": "HandshakeResponse", "superclass": "extends Packet", "interfaces": "", "fields": [{"original_string": "public long capabilityFlags = Flags.CLIENT_PROTOCOL_41;", "modifier": "public", "type": "long", "declarator": "capabilityFlags = Flags.CLIENT_PROTOCOL_41", "var_name": "capabilityFlags"}, {"original_string": "public long maxPacketSize = 0;", "modifier": "public", "type": "long", "declarator": "maxPacketSize = 0", "var_name": "maxPacketSize"}, {"original_string": "public long characterSet = 0;", "modifier": "public", "type": "long", "declarator": "characterSet = 0", "var_name": "characterSet"}, {"original_string": "public String username = \"\";", "modifier": "public", "type": "String", "declarator": "username = \"\"", "var_name": "username"}, {"original_string": "public long authResponseLen = 0;", "modifier": "public", "type": "long", "declarator": "authResponseLen = 0", "var_name": "authResponseLen"}, {"original_string": "public String authResponse = \"\";", "modifier": "public", "type": "String", "declarator": "authResponse = \"\"", "var_name": "authResponse"}, {"original_string": "public String schema = \"\";", "modifier": "public", "type": "String", "declarator": "schema = \"\"", "var_name": "schema"}, {"original_string": "public String pluginName = \"\";", "modifier": "public", "type": "String", "declarator": "pluginName = \"\"", "var_name": "pluginName"}, {"original_string": "public long clientAttributesLen = 0;", "modifier": "public", "type": "long", "declarator": "clientAttributesLen = 0", "var_name": "clientAttributesLen"}, {"original_string": "public String clientAttributes = \"\";", "modifier": "public", "type": "String", "declarator": "clientAttributes = \"\"", "var_name": "clientAttributes"}], "methods": [{"identifier": "setCapabilityFlag", "parameters": "(long flag)", "modifiers": "public", "return": "void", "signature": "void setCapabilityFlag(long flag)", "full_signature": "public void setCapabilityFlag(long flag)", "class_method_signature": "HandshakeResponse.setCapabilityFlag(long flag)", "testcase": false, "constructor": false}, {"identifier": "removeCapabilityFlag", "parameters": "(long flag)", "modifiers": "public", "return": "void", "signature": "void removeCapabilityFlag(long flag)", "full_signature": "public void removeCapabilityFlag(long flag)", "class_method_signature": "HandshakeResponse.removeCapabilityFlag(long flag)", "testcase": false, "constructor": false}, {"identifier": "toggleCapabilityFlag", "parameters": "(long flag)", "modifiers": "public", "return": "void", "signature": "void toggleCapabilityFlag(long flag)", "full_signature": "public void toggleCapabilityFlag(long flag)", "class_method_signature": "HandshakeResponse.toggleCapabilityFlag(long flag)", "testcase": false, "constructor": false}, {"identifier": "hasCapabilityFlag", "parameters": "(long flag)", "modifiers": "public", "return": "boolean", "signature": "boolean hasCapabilityFlag(long flag)", "full_signature": "public boolean hasCapabilityFlag(long flag)", "class_method_signature": "HandshakeResponse.hasCapabilityFlag(long flag)", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "()", "modifiers": "public", "return": "ArrayList<byte[]>", "signature": "ArrayList<byte[]> getPayload()", "full_signature": "public ArrayList<byte[]> getPayload()", "class_method_signature": "HandshakeResponse.getPayload()", "testcase": false, "constructor": false}, {"identifier": "loadFromPacket", "parameters": "(byte[] packet)", "modifiers": "public static", "return": "HandshakeResponse", "signature": "HandshakeResponse loadFromPacket(byte[] packet)", "full_signature": "public static HandshakeResponse loadFromPacket(byte[] packet)", "class_method_signature": "HandshakeResponse.loadFromPacket(byte[] packet)", "testcase": false, "constructor": false}], "file": "src/com/github/mpjct/jmpjct/mysql/proto/HandshakeResponse.java"}, "focal_method": {"identifier": "loadFromPacket", "parameters": "(byte[] packet)", "modifiers": "public static", "return": "HandshakeResponse", "body": "public static HandshakeResponse loadFromPacket(byte[] packet) {\n        HandshakeResponse obj = new HandshakeResponse();\n        Proto proto = new Proto(packet, 3);\n        \n        obj.sequenceId = proto.get_fixed_int(1);\n        obj.capabilityFlags = proto.get_fixed_int(2);\n        proto.offset -= 2;\n        \n        if (obj.hasCapabilityFlag(Flags.CLIENT_PROTOCOL_41)) {\n            obj.capabilityFlags = proto.get_fixed_int(4);\n            obj.maxPacketSize = proto.get_fixed_int(4);\n            obj.characterSet = proto.get_fixed_int(1);\n            proto.get_filler(23);\n            obj.username = proto.get_null_str();\n            \n            if (obj.hasCapabilityFlag(Flags.CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA)) {\n                obj.authResponseLen = proto.get_lenenc_int();\n                obj.authResponse = proto.get_fixed_str(obj.authResponseLen, true);\n            }\n            else  {\n                if (obj.hasCapabilityFlag(Flags.CLIENT_SECURE_CONNECTION)) {\n                    obj.authResponseLen = proto.get_fixed_int(1);\n                    obj.authResponse = proto.get_fixed_str(obj.authResponseLen, true);\n                }\n                else {\n                    obj.authResponse = proto.get_null_str();\n                }\n            }\n            \n            if (obj.hasCapabilityFlag(Flags.CLIENT_CONNECT_WITH_DB))\n                obj.schema = proto.get_null_str();\n            \n            if (obj.hasCapabilityFlag(Flags.CLIENT_PLUGIN_AUTH))\n                obj.pluginName = proto.get_null_str();\n                \n            if (obj.hasCapabilityFlag(Flags.CLIENT_CONNECT_ATTRS)) {\n                obj.clientAttributesLen = proto.get_lenenc_int();\n                obj.clientAttributes = proto.get_eop_str();\n            }\n        }\n        else {\n            obj.capabilityFlags = proto.get_fixed_int(2);\n            obj.maxPacketSize = proto.get_fixed_int(3);\n            obj.username = proto.get_null_str();\n            \n            if (obj.hasCapabilityFlag(Flags.CLIENT_CONNECT_WITH_DB)) {\n                obj.authResponse = proto.get_null_str();\n                obj.schema = proto.get_null_str();\n            }\n            else\n                obj.authResponse = proto.get_eop_str();\n        }\n        \n        return obj;\n    }", "signature": "HandshakeResponse loadFromPacket(byte[] packet)", "full_signature": "public static HandshakeResponse loadFromPacket(byte[] packet)", "class_method_signature": "HandshakeResponse.loadFromPacket(byte[] packet)", "testcase": false, "constructor": false, "invocations": ["get_fixed_int", "get_fixed_int", "hasCapabilityFlag", "get_fixed_int", "get_fixed_int", "get_fixed_int", "get_filler", "get_null_str", "hasCapabilityFlag", "get_lenenc_int", "get_fixed_str", "hasCapabilityFlag", "get_fixed_int", "get_fixed_str", "get_null_str", "hasCapabilityFlag", "get_null_str", "hasCapabilityFlag", "get_null_str", "hasCapabilityFlag", "get_lenenc_int", "get_eop_str", "get_fixed_int", "get_fixed_int", "get_null_str", "hasCapabilityFlag", "get_null_str", "get_null_str", "get_eop_str"]}, "repository": {"repo_id": 5184704, "url": "https://github.com/MPjct/JMPjct", "language": "Java", "is_fork": false, "fork_count": 52, "stargazer_count": 81, "size": 16233, "license": "licensed"}}