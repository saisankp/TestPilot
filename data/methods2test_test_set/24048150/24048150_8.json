{"test_class": {"identifier": "ImageUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/net/nashlegend/sourcewall/util/ImageUtilsTest.java"}, "test_case": {"identifier": "compressImage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compressImage() throws Exception {\n        try {\n            String str = new Markdown4jProcessor().process(\"#test\\n\" +\n                    \"\\n\" +\n                    \"- 1\\n\" +\n                    \"- 2\\n\" +\n                    \"\\n\" +\n                    \"> sss\\n\\n\" +\n                    \"ds\\n\" +\n                    \" [](http://jdjdjdjd) \\n\" +\n                    \"  ![](http://2.im.guokr.com/Ulll4wpKlonIkr6JIzHRoJVzSYwmmzbPR_gow_569TcACQAAwAYAAEpQ.jpg) \");\n            System.out.println(str);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "signature": "void compressImage()", "full_signature": "@Test public void compressImage()", "class_method_signature": "ImageUtilsTest.compressImage()", "testcase": true, "constructor": false, "invocations": ["process", "println", "printStackTrace"]}, "focal_class": {"identifier": "ImageUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static DisplayImageOptions defaultImageOptions = new DisplayImageOptions.Builder()\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .resetViewBeforeLoading(true)\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build();", "modifier": "public static", "type": "DisplayImageOptions", "declarator": "defaultImageOptions = new DisplayImageOptions.Builder()\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .resetViewBeforeLoading(true)\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build()", "var_name": "defaultImageOptions"}, {"original_string": "public static DisplayImageOptions articleTitleImageOptions = new DisplayImageOptions.Builder()\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .resetViewBeforeLoading(true)\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build();", "modifier": "public static", "type": "DisplayImageOptions", "declarator": "articleTitleImageOptions = new DisplayImageOptions.Builder()\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .resetViewBeforeLoading(true)\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build()", "var_name": "articleTitleImageOptions"}, {"original_string": "public static DisplayImageOptions bigAvatarOptions = new DisplayImageOptions.Builder()\n            .showImageOnLoading(R.drawable.ic_default_avatar_96dp)\n            .showImageForEmptyUri(R.drawable.ic_default_avatar_96dp)\n            .showImageOnFail(R.drawable.ic_default_avatar_96dp)\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .displayer(new CircleBitmapDisplayer())\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build();", "modifier": "public static", "type": "DisplayImageOptions", "declarator": "bigAvatarOptions = new DisplayImageOptions.Builder()\n            .showImageOnLoading(R.drawable.ic_default_avatar_96dp)\n            .showImageForEmptyUri(R.drawable.ic_default_avatar_96dp)\n            .showImageOnFail(R.drawable.ic_default_avatar_96dp)\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .displayer(new CircleBitmapDisplayer())\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build()", "var_name": "bigAvatarOptions"}, {"original_string": "public static DisplayImageOptions avatarOptions = new DisplayImageOptions.Builder()\n            .showImageOnLoading(R.drawable.default_avatar)\n            .showImageForEmptyUri(R.drawable.default_avatar)\n            .showImageOnFail(R.drawable.default_avatar)\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .displayer(new CircleBitmapDisplayer())\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build();", "modifier": "public static", "type": "DisplayImageOptions", "declarator": "avatarOptions = new DisplayImageOptions.Builder()\n            .showImageOnLoading(R.drawable.default_avatar)\n            .showImageForEmptyUri(R.drawable.default_avatar)\n            .showImageOnFail(R.drawable.default_avatar)\n            .cacheInMemory(true)\n            .cacheOnDisk(true)\n            .displayer(new CircleBitmapDisplayer())\n            .bitmapConfig(Bitmap.Config.RGB_565)\n            .build()", "var_name": "avatarOptions"}, {"original_string": "public static DisplayImageOptions downloadOptions = new DisplayImageOptions.Builder()\n            .cacheInMemory(false)\n            .cacheOnDisk(true)\n            .build();", "modifier": "public static", "type": "DisplayImageOptions", "declarator": "downloadOptions = new DisplayImageOptions.Builder()\n            .cacheInMemory(false)\n            .cacheOnDisk(true)\n            .build()", "var_name": "downloadOptions"}], "methods": [{"identifier": "compressImage", "parameters": "(final String path, int mode)", "modifiers": "public static", "return": "String", "signature": "String compressImage(final String path, int mode)", "full_signature": "public static String compressImage(final String path, int mode)", "class_method_signature": "ImageUtils.compressImage(final String path, int mode)", "testcase": false, "constructor": false}, {"identifier": "compressImage", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String compressImage(String path)", "full_signature": "public static String compressImage(String path)", "class_method_signature": "ImageUtils.compressImage(String path)", "testcase": false, "constructor": false}, {"identifier": "convertImgRound", "parameters": "(Bitmap bitmap, int strokeColor, float strokeWidth,\n            boolean isCircle)", "modifiers": "public static", "return": "Bitmap", "signature": "Bitmap convertImgRound(Bitmap bitmap, int strokeColor, float strokeWidth,\n            boolean isCircle)", "full_signature": "public static Bitmap convertImgRound(Bitmap bitmap, int strokeColor, float strokeWidth,\n            boolean isCircle)", "class_method_signature": "ImageUtils.convertImgRound(Bitmap bitmap, int strokeColor, float strokeWidth,\n            boolean isCircle)", "testcase": false, "constructor": false}, {"identifier": "getImageFileScale", "parameters": "(File imageFile)", "modifiers": "@Nullable public static", "return": "Point", "signature": "Point getImageFileScale(File imageFile)", "full_signature": "@Nullable public static Point getImageFileScale(File imageFile)", "class_method_signature": "ImageUtils.getImageFileScale(File imageFile)", "testcase": false, "constructor": false}], "file": "app/src/main/java/net/nashlegend/sourcewall/util/ImageUtils.java"}, "focal_method": {"identifier": "compressImage", "parameters": "(final String path, int mode)", "modifiers": "public static", "return": "String", "body": "public static String compressImage(final String path, int mode) {\n        if (FileUtil.getFileSuffix(new File(path)).equals(\"gif\")) {\n            return path;\n        }\n        if (mode == ZipMode.Original) {\n            return path;\n        }\n\n        int quality = 80;\n        //\u5c06\u5176\u4e2d\u4e00\u8fb9\u81f3\u5c11\u538b\u7f29\u5230maxSize\uff0c\u800c\u4e0d\u662f\u4e24\u8fb9\u90fd\u538b\u7f29\u5230maxSize\uff0c\u5426\u5219\u6709\u53ef\u80fd\u56fe\u7247\u5f88\u4e0d\u6e05\u695a\n        float maxSize = 720;\n\n        switch (mode) {\n            case ZipMode.Low:\n                quality = 80;\n                maxSize = 720;\n                break;\n            case ZipMode.Medium:\n                quality = 95;\n                maxSize = 1280;\n                break;\n            case ZipMode.High:\n                quality = 100;\n                maxSize = 1280;\n                break;\n        }\n\n        BitmapFactory.Options options = new BitmapFactory.Options();\n        options.inJustDecodeBounds = true;\n        BitmapFactory.decodeFile(path, options);\n        final int outWidth = options.outWidth;\n        final int outHeight = options.outHeight;\n        final int halfHeight = outHeight / 2;\n        final int halfWidth = outWidth / 2;\n        int sample = 1;\n        while (halfWidth / sample > maxSize && halfHeight / sample > maxSize) {\n            sample *= 2;\n        }\n        if (outWidth > maxSize && outHeight > maxSize) {\n            options.inJustDecodeBounds = false;\n            options.inSampleSize = sample;\n            Bitmap finalBitmap = BitmapFactory.decodeFile(path, options);\n            if (mode != ZipMode.High) {\n                int finalWidth = finalBitmap.getWidth();\n                int finalHeight = finalBitmap.getHeight();\n                float scale =\n                        (finalWidth < finalHeight) ? maxSize / finalWidth : maxSize / finalHeight;\n                if (scale > 1) {\n                    scale = 1;\n                }\n                Matrix matrix = new Matrix();\n                matrix.setScale(scale, scale);\n                finalBitmap = Bitmap.createBitmap(finalBitmap, 0, 0, finalWidth, finalHeight,\n                        matrix, false);\n            }\n            String parentPath;\n            File pFile = null;\n            if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n                pFile = App.getApp().getExternalCacheDir();\n            }\n            if (pFile == null) {\n                pFile = App.getApp().getCacheDir();\n            }\n            parentPath = pFile.getAbsolutePath();\n            String cachePath = new File(parentPath,\n                    System.currentTimeMillis() + \".jpg\").getAbsolutePath();\n            FileOutputStream outputStream = null;\n            boolean ok = false;\n            try {\n                outputStream = new FileOutputStream(cachePath);\n                finalBitmap.compress(Bitmap.CompressFormat.JPEG, quality,\n                        outputStream);//jpg\u901f\u5ea6\u8fdc\u5feb\u4e8epng\uff0c\u5e76\u4e14\u4f53\u79ef\u8981\u5c0f\n                outputStream.flush();\n                ok = true;\n            } catch (IOException e) {\n                ok = false;\n            } finally {\n                try {\n                    if (outputStream != null) {\n                        outputStream.close();\n                    }\n                } catch (Exception e) {\n                    ErrorUtils.onException(e);\n                }\n            }\n            if (ok) {\n                return cachePath;\n            } else {\n                return path;\n            }\n        } else {\n            return path;\n        }\n    }", "signature": "String compressImage(final String path, int mode)", "full_signature": "public static String compressImage(final String path, int mode)", "class_method_signature": "ImageUtils.compressImage(final String path, int mode)", "testcase": false, "constructor": false, "invocations": ["equals", "getFileSuffix", "decodeFile", "decodeFile", "getWidth", "getHeight", "setScale", "createBitmap", "equals", "getExternalStorageState", "getExternalCacheDir", "getApp", "getCacheDir", "getApp", "getAbsolutePath", "getAbsolutePath", "currentTimeMillis", "compress", "flush", "close", "onException"]}, "repository": {"repo_id": 24048150, "url": "https://github.com/NashLegend/SourceWall", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 80, "size": 93019, "license": "licensed"}}