{"test_class": {"identifier": "JSoupTextExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "lt.ltbot/src/test/java/de/tudarmstadt/lt/ltbot/text/JSoupTextExtractorTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() throws IOException {\n\t\t// Document doc = Jsoup.connect(\"http://bildungsserver.de/\").get();\n\t\t// Document doc = Jsoup.connect(\"http://schoolcomputing.wikia.com/wiki/WindERP,_School_ERP_Software,_School_Management_System_,School_Management_Software?action=edit&section=4\").get();\n\t\tDocument doc = Jsoup.connect(\"http://www.jil.go.jp/index.htm\").get();\n\t\tSystem.out.println(doc.outputSettings().charset());\n\n\t\tString html = doc.toString();\n\t\tSystem.out.println(html);\n\n\t\tHtmlTextExtractor extr = new JSoupTextExtractor();\n\t\tString plain = extr.getPlaintext(html);\n\n\t\tSystem.out.println(plain);\n\t\tSystem.out.println(plain.length());\n\n\t\tSystem.out.println(doc.text());\n\n\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "JSoupTextExtractorTest.test()", "testcase": true, "constructor": false, "invocations": ["get", "connect", "println", "charset", "outputSettings", "toString", "println", "getPlaintext", "println", "println", "length", "println", "text"]}, "focal_class": {"identifier": "JSoupTextExtractor", "superclass": "", "interfaces": "implements HtmlTextExtractor", "fields": [{"original_string": "private final static Logger LOG = Logger.getLogger(JSoupTextExtractor.class.getName());", "modifier": "private final static", "type": "Logger", "declarator": "LOG = Logger.getLogger(JSoupTextExtractor.class.getName())", "var_name": "LOG"}, {"original_string": "private final static Pattern _end_prgrph_ptrn = Pattern.compile(\"(?i)</p>\");", "modifier": "private final static", "type": "Pattern", "declarator": "_end_prgrph_ptrn = Pattern.compile(\"(?i)</p>\")", "var_name": "_end_prgrph_ptrn"}, {"original_string": "private final static Pattern _nwln_ptrn = Pattern.compile(\"\\r?\\n\");", "modifier": "private final static", "type": "Pattern", "declarator": "_nwln_ptrn = Pattern.compile(\"\\r?\\n\")", "var_name": "_nwln_ptrn"}, {"original_string": "private final static Pattern _tmp_nwln_ptrn = Pattern.compile(\"br2nl\");", "modifier": "private final static", "type": "Pattern", "declarator": "_tmp_nwln_ptrn = Pattern.compile(\"br2nl\")", "var_name": "_tmp_nwln_ptrn"}, {"original_string": "private final static Pattern _emptln_ptrn = Pattern.compile(\"(?m)\\\\s+$\");", "modifier": "private final static", "type": "Pattern", "declarator": "_emptln_ptrn = Pattern.compile(\"(?m)\\\\s+$\")", "var_name": "_emptln_ptrn"}], "methods": [{"identifier": "getPlaintext", "parameters": "(final String htmltext)", "modifiers": "@Override public", "return": "String", "signature": "String getPlaintext(final String htmltext)", "full_signature": "@Override public String getPlaintext(final String htmltext)", "class_method_signature": "JSoupTextExtractor.getPlaintext(final String htmltext)", "testcase": false, "constructor": false}], "file": "lt.ltbot/src/main/java/de/tudarmstadt/lt/ltbot/text/JSoupTextExtractor.java"}, "focal_method": {"identifier": "getPlaintext", "parameters": "(final String htmltext)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getPlaintext(final String htmltext) {\n\t\ttry {\n\t\t\t// preserve newlines\n\t\t\t// html = html.replaceAll(\"(?i)<br[^>]*>\", \"br2nl\"); // <br>s are often just inserted for style\n\t\t\tString hhtmltext = _end_prgrph_ptrn.matcher(htmltext).replaceAll(\"</p>br2nl\");\n\t\t\thhtmltext = _nwln_ptrn.matcher(hhtmltext).replaceAll(\"br2nl\");\n\n\t\t\tDocument soup = Jsoup.parse(hhtmltext);\n\t\t\tString plaintext = soup.text();\n\n\t\t\tplaintext = _tmp_nwln_ptrn.matcher(plaintext).replaceAll(\"\\n\");\n\t\t\tplaintext = _emptln_ptrn.matcher(plaintext.trim()).replaceAll(\"\");\n\n\t\t\treturn plaintext;\n\t\t} catch (Throwable t) {\n\t\t\tfor (int i = 1; t != null && i < 10; i++) {\n\t\t\t\tLOG.log(Level.SEVERE, String.format(\"Failed to get plaintext from while '%s' (%d %s:%s).\", StringUtils.abbreviate(htmltext, 100), i, t.getClass().getName(), t.getMessage()), t);\n\t\t\t\tt = t.getCause();\n\t\t\t}\n\t\t\treturn \"Failed to get plaintext content \\n\" + htmltext;\n\t\t}\n\t}", "signature": "String getPlaintext(final String htmltext)", "full_signature": "@Override public String getPlaintext(final String htmltext)", "class_method_signature": "JSoupTextExtractor.getPlaintext(final String htmltext)", "testcase": false, "constructor": false, "invocations": ["replaceAll", "matcher", "replaceAll", "matcher", "parse", "text", "replaceAll", "matcher", "replaceAll", "matcher", "trim", "log", "format", "abbreviate", "getName", "getClass", "getMessage", "getCause"]}, "repository": {"repo_id": 53501969, "url": "https://github.com/tudarmstadt-lt/topicrawler", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 6504, "license": "licensed"}}